uint64_t type metadata accessor for NANPublish.Configuration(uint64_t a1)
{
  uint64_t result;

  result = qword_100409E68;
  if (!qword_100409E68)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for NANPublish.Configuration);
  return result;
}

uint64_t _s7CoreP2P10NANPublishO28InternetSharingConfigurationO2eeoiySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  char v8;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;
  _BYTE v13[48];
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  char v17;

  sub_100185018(a1, (uint64_t)v13);
  sub_100185018(a2, (uint64_t)&v14);
  if ((v13[40] & 1) == 0)
  {
    sub_100185018((uint64_t)v13, (uint64_t)&v10);
    v4 = v11;
    if ((v17 & 1) != 0)
    {
      swift_bridgeObjectRelease(v11);
      goto LABEL_6;
    }
    v5 = v12;
    v6 = v15;
    v7 = v16;
    if (v10 == v14 && v11 == v15)
    {
      swift_bridgeObjectRelease_n(v11, 2);
    }
    else
    {
      v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v10, v11, v14, v15, 0);
      swift_bridgeObjectRelease(v6);
      swift_bridgeObjectRelease(v4);
      v3 = 0;
      if ((v8 & 1) == 0)
      {
LABEL_12:
        sub_100185054((uint64_t)v13);
        return v3;
      }
    }
    v3 = v5 ^ v7 ^ 1u;
    goto LABEL_12;
  }
  if (v17 != 1)
  {
LABEL_6:
    sub_100033A84((uint64_t)v13, &qword_100409F38);
    return 0;
  }
  sub_100185054((uint64_t)&v14);
  sub_100185054((uint64_t)v13);
  return 1;
}

uint64_t sub_10018B2A4(int a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  BOOL v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;

  v12 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v13 = 1735617902;
  else
    v13 = 7365742;
  if (v12)
    v14 = 0xE300000000000000;
  else
    v14 = 0xE400000000000000;
  if ((a4 & 1) != 0)
    v15 = 1735617902;
  else
    v15 = 7365742;
  if ((a4 & 1) != 0)
    v16 = 0xE400000000000000;
  else
    v16 = 0xE300000000000000;
  if (v13 == v15 && v14 == v16)
  {
    swift_bridgeObjectRelease_n(v14, 2);
  }
  else
  {
    v17 = _stringCompareWithSmolCheck(_:_:expecting:)(v13, v14, v15, v16, 0);
    swift_bridgeObjectRelease(v14);
    swift_bridgeObjectRelease(v16);
    if ((v17 & 1) == 0)
      return 0;
  }
  v18 = a4 & 0xFF00;
  if ((a1 & 0xFF00) == 0x200)
  {
    if (v18 != 512)
      return 0;
  }
  else
  {
    if (v18 == 512)
      return 0;
    if ((a1 & 0x100) != 0)
      v19 = 0x614D6F54796E616DLL;
    else
      v19 = 0x6E614D6F54656E6FLL;
    if ((a1 & 0x100) != 0)
      v20 = 0xEA0000000000796ELL;
    else
      v20 = 0xE900000000000079;
    if ((a4 & 0x100) != 0)
      v21 = 0x614D6F54796E616DLL;
    else
      v21 = 0x6E614D6F54656E6FLL;
    if ((a4 & 0x100) != 0)
      v22 = 0xEA0000000000796ELL;
    else
      v22 = 0xE900000000000079;
    if (v19 == v21 && v20 == v22)
    {
      swift_bridgeObjectRelease_n(v20, 2);
    }
    else
    {
      v23 = _stringCompareWithSmolCheck(_:_:expecting:)(v19, v20, v21, v22, 0);
      swift_bridgeObjectRelease(v20);
      swift_bridgeObjectRelease(v22);
      if ((v23 & 1) == 0)
        return 0;
    }
  }
  if (BYTE2(a1))
  {
    if (BYTE2(a1) == 1)
      v24 = 0x656D69746C616572;
    else
      v24 = 0x6E6574614C776F6CLL;
    if (BYTE2(a1) == 1)
      v25 = 0xE800000000000000;
    else
      v25 = 0xEA00000000007963;
  }
  else
  {
    v25 = 0xE800000000000000;
    v24 = 0x6576697470616461;
  }
  v26 = 0xE800000000000000;
  v27 = 0x656D69746C616572;
  if (BYTE2(a4) != 1)
  {
    v27 = 0x6E6574614C776F6CLL;
    v26 = 0xEA00000000007963;
  }
  if (BYTE2(a4))
    v28 = v27;
  else
    v28 = 0x6576697470616461;
  if (BYTE2(a4))
    v29 = v26;
  else
    v29 = 0xE800000000000000;
  if (v24 == v28 && v25 == v29)
  {
    swift_bridgeObjectRelease_n(v25, 2);
  }
  else
  {
    v30 = _stringCompareWithSmolCheck(_:_:expecting:)(v24, v25, v28, v29, 0);
    swift_bridgeObjectRelease(v25);
    swift_bridgeObjectRelease(v29);
    if ((v30 & 1) == 0)
      return 0;
  }
  if ((sub_1000738DC(a2, a5) & 1) != 0)
    return sub_100089E74(a3, a6);
  return 0;
}

uint64_t _s7CoreP2P10NANPublishO13ConfigurationV23__derived_struct_equalsySbAE_AEtFZ_0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  Swift::String v4;
  Swift::String v5;
  char v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  int v33;
  int v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char v39;
  int v40;
  int v41;
  int v43;
  int v44;
  int *v46;
  uint64_t v47;
  int v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  unsigned __int8 *v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  char v62;
  char v63;
  uint64_t v64;
  unsigned __int8 v65;
  int v66;
  uint64_t v67;
  unsigned __int8 *v68;
  unsigned __int8 v69;
  unsigned __int8 *v70;
  int v71;
  uint64_t v72;
  unsigned __int8 *v73;
  unsigned __int8 v74;
  unsigned __int8 *v75;
  unint64_t v76;
  unint64_t v77;
  int8x16_t v78;
  uint64x2_t v79;
  int16x8_t v80;
  uint64x2_t v81;
  int64x2_t v82;
  int16x8_t v83;
  uint64_t v85;
  unsigned __int8 v86;
  unsigned __int8 v87;
  _BYTE v88[48];
  _BYTE v89[48];
  _BYTE v90[36];
  unsigned __int8 v91;
  _BYTE v92[40];
  unsigned __int8 v93;
  _BYTE v94[48];
  _BYTE v95[48];

  if (*a1 != *a2)
    return 0;
  v4 = String.lowercased()();
  v5 = String.lowercased()();
  if (v4._countAndFlagsBits == v5._countAndFlagsBits && v4._object == v5._object)
  {
    swift_bridgeObjectRelease_n(v4._object, 2);
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v4._countAndFlagsBits, v4._object, v5._countAndFlagsBits, v5._object, 0);
    swift_bridgeObjectRelease(v4._object);
    swift_bridgeObjectRelease(v5._object);
    result = 0;
    if ((v7 & 1) == 0)
      return result;
  }
  if ((sub_1000738DC(*((_QWORD *)a1 + 3), *((_QWORD *)a2 + 3)) & 1) == 0)
    return 0;
  if (a1[32] != a2[32])
    return 0;
  v9 = *((_QWORD *)a1 + 6);
  v10 = *((_QWORD *)a2 + 6);
  if ((sub_10003BC9C(a1[40], a2[40]) & 1) == 0)
    return 0;
  if ((sub_1000860FC(v9, v10) & 1) == 0)
    return 0;
  v11 = *((_QWORD *)a1 + 8);
  v12 = *((_QWORD *)a2 + 8);
  if ((sub_10003BC9C(a1[56], a2[56]) & 1) == 0 || (sub_1000860FC(v11, v12) & 1) == 0)
    return 0;
  v13 = 0xEB00000000646574;
  v14 = 0x6963696C6F736E75;
  if (a1[72])
  {
    if (a1[72] == 1)
    {
      v15 = 0x65746963696C6F73;
      v16 = 0xE900000000000064;
    }
    else
    {
      v16 = 0x8000000100361130;
      v15 = 0xD000000000000017;
    }
  }
  else
  {
    v15 = 0x6963696C6F736E75;
    v16 = 0xEB00000000646574;
  }
  if (a2[72])
  {
    if (a2[72] == 1)
    {
      v14 = 0x65746963696C6F73;
      v13 = 0xE900000000000064;
    }
    else
    {
      v13 = 0x8000000100361130;
      v14 = 0xD000000000000017;
    }
  }
  if (v15 == v14 && v16 == v13)
  {
    swift_bridgeObjectRelease_n(v16, 2);
  }
  else
  {
    v17 = _stringCompareWithSmolCheck(_:_:expecting:)(v15, v16, v14, v13, 0);
    swift_bridgeObjectRelease(v16);
    swift_bridgeObjectRelease(v13);
    result = 0;
    if ((v17 & 1) == 0)
      return result;
  }
  v18 = a1[73] ? 0x73616369746C756DLL : 0x74736163696E75;
  v19 = a1[73] ? 0xE900000000000074 : 0xE700000000000000;
  v20 = a2[73] ? 0x73616369746C756DLL : 0x74736163696E75;
  v21 = a2[73] ? 0xE900000000000074 : 0xE700000000000000;
  if (v18 == v20 && v19 == v21)
  {
    swift_bridgeObjectRelease_n(v19, 2);
  }
  else
  {
    v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v18, v19, v20, v21, 0);
    swift_bridgeObjectRelease(v19);
    swift_bridgeObjectRelease(v21);
    result = 0;
    if ((v22 & 1) == 0)
      return result;
  }
  v23 = a1[74] ? 0x65746963696C6F73 : 1701736302;
  v24 = a1[74] ? 0xEB00000000785464 : 0xE400000000000000;
  v25 = a2[74] ? 0x65746963696C6F73 : 1701736302;
  v26 = a2[74] ? 0xEB00000000785464 : 0xE400000000000000;
  if (v23 == v25 && v24 == v26)
  {
    swift_bridgeObjectRelease_n(v24, 2);
  }
  else
  {
    v27 = _stringCompareWithSmolCheck(_:_:expecting:)(v23, v24, v25, v26, 0);
    swift_bridgeObjectRelease(v24);
    swift_bridgeObjectRelease(v26);
    result = 0;
    if ((v27 & 1) == 0)
      return result;
  }
  v28 = a1[75] ? 0x757145746F4E7874 : 0x526C617571457874;
  v29 = a1[75] ? 0xEC00000078526C61 : 0xE900000000000078;
  v30 = a2[75] ? 0x757145746F4E7874 : 0x526C617571457874;
  v31 = a2[75] ? 0xEC00000078526C61 : 0xE900000000000078;
  if (v28 == v30 && v29 == v31)
  {
    swift_bridgeObjectRelease_n(v29, 2);
  }
  else
  {
    v32 = _stringCompareWithSmolCheck(_:_:expecting:)(v28, v29, v30, v31, 0);
    swift_bridgeObjectRelease(v29);
    swift_bridgeObjectRelease(v31);
    result = 0;
    if ((v32 & 1) == 0)
      return result;
  }
  if (a1[76] != a2[76])
    return 0;
  v33 = a1[77];
  v34 = a2[77];
  if (v33 == 2)
  {
    if (v34 != 2)
      return 0;
  }
  else
  {
    if (v34 == 2)
      return 0;
    if ((v33 & 1) != 0)
      v35 = 7561575;
    else
      v35 = 0x7055776F6C6C6F66;
    if ((v33 & 1) != 0)
      v36 = 0xE300000000000000;
    else
      v36 = 0xE800000000000000;
    if ((v34 & 1) != 0)
      v37 = 7561575;
    else
      v37 = 0x7055776F6C6C6F66;
    if ((v34 & 1) != 0)
      v38 = 0xE300000000000000;
    else
      v38 = 0xE800000000000000;
    if (v35 == v37 && v36 == v38)
    {
      swift_bridgeObjectRelease_n(v36, 2);
    }
    else
    {
      v39 = _stringCompareWithSmolCheck(_:_:expecting:)(v35, v36, v37, v38, 0);
      swift_bridgeObjectRelease(v36);
      swift_bridgeObjectRelease(v38);
      result = 0;
      if ((v39 & 1) == 0)
        return result;
    }
  }
  v40 = *((unsigned __int16 *)a1 + 41);
  v41 = *((unsigned __int16 *)a2 + 41);
  *(_DWORD *)v90 = *(_DWORD *)(a1 + 78);
  *(_WORD *)&v90[4] = v40;
  if (*(_DWORD *)v90 != *(_DWORD *)(a2 + 78) || v40 != v41)
    return 0;
  v43 = *((unsigned __int16 *)a1 + 44);
  v44 = *((unsigned __int16 *)a2 + 44);
  *(_DWORD *)v90 = *((_DWORD *)a1 + 21);
  *(_WORD *)&v90[4] = v43;
  if (*(_DWORD *)v90 != *((_DWORD *)a2 + 21) || v43 != v44)
    return 0;
  v46 = (int *)type metadata accessor for NANPublish.Configuration(0);
  if ((static DispatchTimeInterval.== infix(_:_:)(&a1[v46[18]], &a2[v46[18]]) & 1) == 0)
    return 0;
  if ((sub_10003BBE4(a1[v46[19]], a2[v46[19]]) & 1) == 0)
    return 0;
  if (a1[v46[20]] != a2[v46[20]])
    return 0;
  v47 = v46[21];
  v48 = a1[v47];
  v49 = a1[v47 + 1];
  v50 = a1[v47 + 2];
  v51 = *(_QWORD *)&a1[v47 + 8];
  v52 = *(_QWORD *)&a1[v47 + 16];
  v53 = &a2[v47];
  if ((sub_10018B2A4(v48 | (v49 << 8) | (v50 << 16), v51, v52, *v53 | (v53[1] << 8) | (v53[2] << 16), *((_QWORD *)v53 + 1), *((_QWORD *)v53 + 2)) & 1) == 0)return 0;
  sub_100033B48((uint64_t)&a1[v46[22]], (uint64_t)v95, (uint64_t *)&unk_10040E260);
  sub_100033B48((uint64_t)&a2[v46[22]], (uint64_t)v94, (uint64_t *)&unk_10040E260);
  sub_100033B48((uint64_t)v95, (uint64_t)v90, (uint64_t *)&unk_10040E260);
  sub_100033B48((uint64_t)v94, (uint64_t)v92, (uint64_t *)&unk_10040E260);
  if (v91 == 255)
  {
    sub_100033A84((uint64_t)v94, (uint64_t *)&unk_10040E260);
    sub_100033A84((uint64_t)v95, (uint64_t *)&unk_10040E260);
    if (v93 == 255)
    {
      v55 = sub_100033A84((uint64_t)v90, (uint64_t *)&unk_10040E260);
      goto LABEL_117;
    }
LABEL_122:
    sub_100033A84((uint64_t)v90, &qword_100409D10);
    return 0;
  }
  sub_100033B48((uint64_t)v90, (uint64_t)v89, (uint64_t *)&unk_10040E260);
  if (v93 == 255)
  {
    sub_100033A84((uint64_t)v94, (uint64_t *)&unk_10040E260);
    sub_100033A84((uint64_t)v95, (uint64_t *)&unk_10040E260);
    sub_100185054((uint64_t)v89);
    goto LABEL_122;
  }
  sub_100184FDC((uint64_t)v92, (uint64_t)v88);
  v54 = _s7CoreP2P10NANPublishO28InternetSharingConfigurationO2eeoiySbAE_AEtFZ_0((uint64_t)v89, (uint64_t)v88);
  sub_100185054((uint64_t)v88);
  sub_100033A84((uint64_t)v94, (uint64_t *)&unk_10040E260);
  sub_100033A84((uint64_t)v95, (uint64_t *)&unk_10040E260);
  sub_100185054((uint64_t)v89);
  v55 = sub_100033A84((uint64_t)v90, (uint64_t *)&unk_10040E260);
  if ((v54 & 1) == 0)
    return 0;
LABEL_117:
  v56 = P256.KeyAgreement.PrivateKey.rawRepresentation.getter(v55);
  v58 = v57;
  v59 = P256.KeyAgreement.PrivateKey.rawRepresentation.getter(v56);
  v61 = v60;
  _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(v56, v58);
  v63 = v62;
  sub_10000E614(v59, v61);
  sub_10000E614(v56, v58);
  if ((v63 & 1) != 0)
  {
    v64 = v46[24];
    v65 = a1[v64];
    v66 = a2[v64];
    if ((v65 & 1) != 0)
    {
      if (!v66)
        return 0;
    }
    else if ((v66 & 1) != 0)
    {
      return 0;
    }
    v67 = v46[25];
    v68 = &a1[v67];
    v69 = a1[v67 + 2];
    v70 = &a2[v67];
    v71 = a2[v67 + 2];
    if ((v69 & 1) != 0)
    {
      if (!v71)
        return 0;
    }
    else
    {
      if (*(unsigned __int16 *)v68 != *(unsigned __int16 *)v70)
        LOBYTE(v71) = 1;
      if ((v71 & 1) != 0)
        return 0;
    }
    v72 = v46[26];
    v73 = &a1[v72];
    v74 = a1[v72 + 6];
    v75 = &a2[v72];
    if ((v74 & 1) != 0)
    {
      if (!v75[6])
        return 0;
    }
    else
    {
      if ((v75[6] & 1) != 0)
        return 0;
      v76 = *(unsigned int *)v73 | ((unint64_t)*((unsigned __int16 *)v73 + 2) << 32);
      v77 = *(unsigned int *)v75 | ((unint64_t)*((unsigned __int16 *)v75 + 2) << 32);
      v78.i64[0] = 0xFFFFFFFFFFFFLL;
      v78.i64[1] = 0xFFFFFFFFFFFFLL;
      v79 = (uint64x2_t)vandq_s8((int8x16_t)vdupq_n_s64(v76), v78);
      v80 = (int16x8_t)vshlq_u64(v79, (uint64x2_t)xmmword_10033B100);
      v81 = (uint64x2_t)vandq_s8((int8x16_t)vdupq_n_s64(v77), v78);
      v82 = (int64x2_t)vshlq_u64(v81, (uint64x2_t)xmmword_10033B100);
      v83 = (int16x8_t)vshlq_u64(v81, (uint64x2_t)xmmword_10033B0F0);
      v90[0] = v76;
      *(int32x2_t *)v79.i8 = vmovn_s64((int64x2_t)vshlq_u64(v79, (uint64x2_t)xmmword_10033B0F0));
      *(int32x2_t *)v80.i8 = vmovn_s64((int64x2_t)v80);
      v80.i16[1] = v80.i16[2];
      v80.i16[2] = v79.i16[0];
      v80.i16[3] = v79.i16[2];
      *(_DWORD *)&v90[1] = vmovn_s16(v80).u32[0];
      v90[5] = BYTE5(v76);
      v95[0] = v77;
      *(int32x2_t *)v79.i8 = vmovn_s64((int64x2_t)v83);
      *(int32x2_t *)v83.i8 = vmovn_s64(v82);
      v83.i16[1] = v83.i16[2];
      v83.i16[2] = v79.i16[0];
      v83.i16[3] = v79.i16[2];
      *(_DWORD *)&v95[1] = vmovn_s16(v83).u32[0];
      v95[5] = BYTE5(v77);
      if (*(_DWORD *)v90 != *(_DWORD *)v95 || *(unsigned __int16 *)&v90[4] != *(unsigned __int16 *)&v95[4])
        return 0;
    }
    v85 = v46[27];
    v86 = a1[v85];
    v87 = a2[v85];
    if ((v86 & 1) != 0)
    {
      if ((v87 & 1) != 0)
        return 1;
    }
    else if ((v87 & 1) == 0)
    {
      return 1;
    }
  }
  return 0;
}

unint64_t _s7CoreP2P10NANPublishO11PublishTypeO8rawValueAESgSS_tcfC_0(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1003D4B90, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 3)
    return 3;
  else
    return v3;
}

uint64_t sub_10018BE84(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100012C44((uint64_t *)&unk_10040E260);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_10018BECC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for OWEKeys(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

unint64_t sub_10018BF14()
{
  unint64_t result;

  result = qword_100409D70;
  if (!qword_100409D70)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANPublish.PublishType, &type metadata for NANPublish.PublishType);
    atomic_store(result, (unint64_t *)&qword_100409D70);
  }
  return result;
}

unint64_t sub_10018BF5C()
{
  unint64_t result;

  result = qword_100409D78;
  if (!qword_100409D78)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANPublish.SolicitedTransmissionType, &type metadata for NANPublish.SolicitedTransmissionType);
    atomic_store(result, (unint64_t *)&qword_100409D78);
  }
  return result;
}

unint64_t sub_10018BFA4()
{
  unint64_t result;

  result = qword_100409D80;
  if (!qword_100409D80)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANPublish.EventCondition, &type metadata for NANPublish.EventCondition);
    atomic_store(result, (unint64_t *)&qword_100409D80);
  }
  return result;
}

unint64_t sub_10018BFEC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100409D88;
  if (!qword_100409D88)
  {
    v1 = sub_100013C64(&qword_100409D90);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_100409D88);
  }
  return result;
}

unint64_t sub_10018C03C()
{
  unint64_t result;

  result = qword_100409D98;
  if (!qword_100409D98)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANPublish.FurtherServiceDiscoveryFunction, &type metadata for NANPublish.FurtherServiceDiscoveryFunction);
    atomic_store(result, (unint64_t *)&qword_100409D98);
  }
  return result;
}

unint64_t sub_10018C084()
{
  unint64_t result;

  result = qword_100409DA0;
  if (!qword_100409DA0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANPublish.InternetSharingConfiguration, &type metadata for NANPublish.InternetSharingConfiguration);
    atomic_store(result, (unint64_t *)&qword_100409DA0);
  }
  return result;
}

unint64_t sub_10018C0CC()
{
  unint64_t result;

  result = qword_100409DA8;
  if (!qword_100409DA8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANPublish.DatapathConfiguration, &type metadata for NANPublish.DatapathConfiguration);
    atomic_store(result, (unint64_t *)&qword_100409DA8);
  }
  return result;
}

uint64_t sub_10018C110(uint64_t a1)
{
  uint64_t result;

  result = sub_10018C1B4(&qword_100409DB0, protocol conformance descriptor for NANPublish.Configuration);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_10018C144(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_10018C1B4(&qword_100409DF8, protocol conformance descriptor for NANPublish.Configuration);
  result = sub_10018C1B4(&qword_100409E00, protocol conformance descriptor for NANPublish.Configuration);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_10018C190()
{
  return sub_10018C1B4(&qword_100409E08, protocol conformance descriptor for NANPublish.Configuration);
}

uint64_t sub_10018C1B4(unint64_t *a1, const char *a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for NANPublish.Configuration(255);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

ValueMetadata *type metadata accessor for NANPublish()
{
  return &type metadata for NANPublish;
}

uint64_t storeEnumTagSinglePayload for NANPublish.PublishType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_10018C250 + 4 * byte_10034E93A[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10018C284 + 4 * byte_10034E935[v4]))();
}

uint64_t sub_10018C284(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10018C28C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10018C294);
  return result;
}

uint64_t sub_10018C2A0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10018C2A8);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_10018C2AC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10018C2B4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NANPublish.PublishType()
{
  return &type metadata for NANPublish.PublishType;
}

ValueMetadata *type metadata accessor for NANPublish.SolicitedTransmissionType()
{
  return &type metadata for NANPublish.SolicitedTransmissionType;
}

ValueMetadata *type metadata accessor for NANPublish.EventCondition()
{
  return &type metadata for NANPublish.EventCondition;
}

uint64_t _s7CoreP2P10NANPublishO25SolicitedTransmissionTypeOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10018C340 + 4 * byte_10034E944[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10018C374 + 4 * byte_10034E93F[v4]))();
}

uint64_t sub_10018C374(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10018C37C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10018C384);
  return result;
}

uint64_t sub_10018C390(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10018C398);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_10018C39C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10018C3A4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NANPublish.FurtherServiceDiscoveryFunction()
{
  return &type metadata for NANPublish.FurtherServiceDiscoveryFunction;
}

double destroy for NANPublish.InternetSharingConfiguration(uint64_t a1)
{
  unsigned int v1;
  double result;

  v1 = *(unsigned __int8 *)(a1 + 40);
  if (v1 >= 2)
    v1 = *(_DWORD *)a1 + 2;
  if (v1 == 1)
    sub_100014430((_QWORD *)a1);
  else
    *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8)).n128_u64[0];
  return result;
}

uint64_t initializeWithCopy for NANPublish.InternetSharingConfiguration(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  __int128 v4;
  char v5;
  uint64_t v6;

  v3 = *(unsigned __int8 *)(a2 + 40);
  if (v3 >= 2)
    v3 = *(_DWORD *)a2 + 2;
  if (v3 == 1)
  {
    v4 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v4;
    (**(void (***)(uint64_t))(v4 - 8))(a1);
    v5 = 1;
  }
  else
  {
    v6 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v6;
    *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
    swift_bridgeObjectRetain(v6);
    v5 = 0;
  }
  *(_BYTE *)(a1 + 40) = v5;
  return a1;
}

uint64_t assignWithCopy for NANPublish.InternetSharingConfiguration(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  __n128 v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;

  if (a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 2)
      v4 = *(_DWORD *)a1 + 2;
    if (v4 == 1)
      sub_100014430((_QWORD *)a1);
    else
      v5 = swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
    v6 = *(unsigned __int8 *)(a2 + 40);
    if (v6 >= 2)
      v6 = *(_DWORD *)a2 + 2;
    if (v6 == 1)
    {
      v7 = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 24) = v7;
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      (**(void (***)(uint64_t, uint64_t, __n128))(v7 - 8))(a1, a2, v5);
      *(_BYTE *)(a1 + 40) = 1;
    }
    else
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v8 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 8) = v8;
      *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
      *(_BYTE *)(a1 + 40) = 0;
      swift_bridgeObjectRetain(v8);
    }
  }
  return a1;
}

uint64_t assignWithTake for NANPublish.InternetSharingConfiguration(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  __int128 v6;
  char v7;

  if (a1 != a2)
  {
    v4 = *(unsigned __int8 *)(a1 + 40);
    if (v4 >= 2)
      v4 = *(_DWORD *)a1 + 2;
    if (v4 == 1)
      sub_100014430((_QWORD *)a1);
    else
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
    v5 = *(unsigned __int8 *)(a2 + 40);
    if (v5 >= 2)
      v5 = *(_DWORD *)a2 + 2;
    if (v5 == 1)
    {
      v6 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v6;
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      v7 = 1;
    }
    else
    {
      v7 = 0;
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
    }
    *(_BYTE *)(a1 + 40) = v7;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for NANPublish.InternetSharingConfiguration(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 41))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 40);
  if (v3 >= 2)
    return (v3 ^ 0xFF) + 1;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for NANPublish.InternetSharingConfiguration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 25) = 0u;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 41) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 41) = 0;
    if (a2)
      *(_BYTE *)(result + 40) = -(char)a2;
  }
  return result;
}

uint64_t sub_10018C65C(uint64_t a1)
{
  uint64_t result;

  result = *(unsigned __int8 *)(a1 + 40);
  if (result >= 2)
    return (*(_DWORD *)a1 + 2);
  return result;
}

uint64_t sub_10018C678(uint64_t result, unsigned int a2)
{
  if (a2 > 1)
  {
    *(_QWORD *)(result + 32) = 0;
    *(_OWORD *)result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(_BYTE *)(result + 40) = a2;
  return result;
}

ValueMetadata *type metadata accessor for NANPublish.InternetSharingConfiguration()
{
  return &type metadata for NANPublish.InternetSharingConfiguration;
}

uint64_t destroy for NANPublish.DatapathConfiguration(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
}

uint64_t _s7CoreP2P10NANPublishO21DatapathConfigurationVwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_WORD *)(a1 + 1) = *(_WORD *)(a2 + 1);
  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t assignWithCopy for NANPublish.DatapathConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t assignWithTake for NANPublish.DatapathConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_WORD *)(a1 + 1) = *(_WORD *)(a2 + 1);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  v4 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for NANPublish.DatapathConfiguration(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NANPublish.DatapathConfiguration(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for NANPublish.DatapathConfiguration()
{
  return &type metadata for NANPublish.DatapathConfiguration;
}

_QWORD *initializeBufferWithCopyOfBuffer for NANPublish.Configuration(uint64_t a1, uint64_t *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  int v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _DWORD *v38;
  _DWORD *v39;
  uint64_t v41;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v26 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v26 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v26);
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v7 = a2[2];
    *(_QWORD *)(a1 + 8) = a2[1];
    *(_QWORD *)(a1 + 16) = v7;
    v8 = a2[3];
    *(_QWORD *)(a1 + 24) = v8;
    *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
    *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
    v9 = a2[6];
    *(_QWORD *)(a1 + 48) = v9;
    *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
    v10 = a2[8];
    *(_BYTE *)(a1 + 72) = *((_BYTE *)a2 + 72);
    *(_BYTE *)(a1 + 73) = *((_BYTE *)a2 + 73);
    *(_BYTE *)(a1 + 74) = *((_BYTE *)a2 + 74);
    *(_BYTE *)(a1 + 75) = *((_BYTE *)a2 + 75);
    *(_WORD *)(a1 + 76) = *((_WORD *)a2 + 38);
    *(_DWORD *)(a1 + 78) = *(_DWORD *)((char *)a2 + 78);
    *(_WORD *)(a1 + 82) = *((_WORD *)a2 + 41);
    *(_DWORD *)(a1 + 84) = *((_DWORD *)a2 + 21);
    *(_WORD *)(a1 + 88) = *((_WORD *)a2 + 44);
    v11 = a3[18];
    v41 = a1 + v11;
    v12 = (uint64_t)a2 + v11;
    *(_QWORD *)(a1 + 64) = v10;
    v13 = type metadata accessor for DispatchTimeInterval(0);
    v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v10);
    v14(v41, v12, v13);
    v15 = a3[20];
    *((_BYTE *)v4 + a3[19]) = *((_BYTE *)a2 + a3[19]);
    *((_BYTE *)v4 + v15) = *((_BYTE *)a2 + v15);
    v16 = a3[21];
    v17 = a3[22];
    v18 = (char *)v4 + v16;
    v19 = (char *)a2 + v16;
    *v18 = *v19;
    *(_WORD *)(v18 + 1) = *(_WORD *)(v19 + 1);
    v20 = *((_QWORD *)v19 + 1);
    v21 = *((_QWORD *)v19 + 2);
    *((_QWORD *)v18 + 1) = v20;
    *((_QWORD *)v18 + 2) = v21;
    v22 = (char *)v4 + v17;
    v23 = (uint64_t)a2 + v17;
    v24 = *((unsigned __int8 *)a2 + v17 + 40);
    swift_bridgeObjectRetain(v20);
    swift_bridgeObjectRetain(v21);
    if (v24 == 255)
    {
      v25 = *(_OWORD *)(v23 + 16);
      *(_OWORD *)v22 = *(_OWORD *)v23;
      *((_OWORD *)v22 + 1) = v25;
      *(_OWORD *)(v22 + 25) = *(_OWORD *)(v23 + 25);
    }
    else if ((v24 & 1) != 0)
    {
      v28 = *(_OWORD *)(v23 + 24);
      *(_OWORD *)(v22 + 24) = v28;
      (**(void (***)(char *, uint64_t))(v28 - 8))(v22, v23);
      v22[40] = 1;
    }
    else
    {
      v27 = *(_QWORD *)(v23 + 8);
      *(_QWORD *)v22 = *(_QWORD *)v23;
      *((_QWORD *)v22 + 1) = v27;
      v22[16] = *(_BYTE *)(v23 + 16);
      v22[40] = 0;
      swift_bridgeObjectRetain(v27);
    }
    v29 = a3[23];
    v30 = (char *)v4 + v29;
    v31 = (uint64_t)a2 + v29;
    v32 = type metadata accessor for P256.KeyAgreement.PrivateKey(0);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 16))(v30, v31, v32);
    v33 = a3[25];
    *((_BYTE *)v4 + a3[24]) = *((_BYTE *)a2 + a3[24]);
    v34 = (char *)v4 + v33;
    v35 = (uint64_t)a2 + v33;
    *(_WORD *)v34 = *(_WORD *)v35;
    v34[2] = *(_BYTE *)(v35 + 2);
    v36 = a3[26];
    v37 = a3[27];
    v38 = (_DWORD *)((char *)v4 + v36);
    v39 = (_DWORD *)((char *)a2 + v36);
    *v38 = *v39;
    *(_DWORD *)((char *)v38 + 3) = *(_DWORD *)((char *)v39 + 3);
    *((_BYTE *)v4 + v37) = *((_BYTE *)a2 + v37);
  }
  return v4;
}

uint64_t destroy for NANPublish.Configuration(_QWORD *a1, int *a2)
{
  char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  int v8;
  char *v9;
  uint64_t v10;

  swift_bridgeObjectRelease(a1[2]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[6]);
  swift_bridgeObjectRelease(a1[8]);
  v4 = (char *)a1 + a2[18];
  v5 = type metadata accessor for DispatchTimeInterval(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = (char *)a1 + a2[21];
  swift_bridgeObjectRelease(*((_QWORD *)v6 + 1));
  swift_bridgeObjectRelease(*((_QWORD *)v6 + 2));
  v7 = (char *)a1 + a2[22];
  v8 = v7[40];
  if (v8 != 255)
  {
    if ((v8 & 1) != 0)
      sub_100014430(v7);
    else
      swift_bridgeObjectRelease(*((_QWORD *)v7 + 1));
  }
  v9 = (char *)a1 + a2[23];
  v10 = type metadata accessor for P256.KeyAgreement.PrivateKey(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
}

uint64_t initializeWithCopy for NANPublish.Configuration(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _DWORD *v36;
  _DWORD *v37;
  uint64_t v39;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v6;
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v7;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v8 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 48) = v8;
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v9 = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_BYTE *)(a1 + 73) = *(_BYTE *)(a2 + 73);
  *(_BYTE *)(a1 + 74) = *(_BYTE *)(a2 + 74);
  *(_BYTE *)(a1 + 75) = *(_BYTE *)(a2 + 75);
  *(_WORD *)(a1 + 76) = *(_WORD *)(a2 + 76);
  *(_DWORD *)(a1 + 78) = *(_DWORD *)(a2 + 78);
  *(_WORD *)(a1 + 82) = *(_WORD *)(a2 + 82);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_WORD *)(a1 + 88) = *(_WORD *)(a2 + 88);
  v10 = a3[18];
  v39 = a1 + v10;
  v11 = a2 + v10;
  *(_QWORD *)(a1 + 64) = v9;
  v12 = type metadata accessor for DispatchTimeInterval(0);
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  v13(v39, v11, v12);
  v14 = a3[20];
  *(_BYTE *)(a1 + a3[19]) = *(_BYTE *)(a2 + a3[19]);
  *(_BYTE *)(a1 + v14) = *(_BYTE *)(a2 + v14);
  v15 = a3[21];
  v16 = a3[22];
  v17 = a1 + v15;
  v18 = a2 + v15;
  *(_BYTE *)v17 = *(_BYTE *)v18;
  *(_WORD *)(v17 + 1) = *(_WORD *)(v18 + 1);
  v19 = *(_QWORD *)(v18 + 8);
  v20 = *(_QWORD *)(v18 + 16);
  *(_QWORD *)(v17 + 8) = v19;
  *(_QWORD *)(v17 + 16) = v20;
  v21 = a1 + v16;
  v22 = a2 + v16;
  v23 = *(unsigned __int8 *)(a2 + v16 + 40);
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRetain(v20);
  if (v23 == 255)
  {
    v24 = *(_OWORD *)(v22 + 16);
    *(_OWORD *)v21 = *(_OWORD *)v22;
    *(_OWORD *)(v21 + 16) = v24;
    *(_OWORD *)(v21 + 25) = *(_OWORD *)(v22 + 25);
  }
  else if ((v23 & 1) != 0)
  {
    v26 = *(_OWORD *)(v22 + 24);
    *(_OWORD *)(v21 + 24) = v26;
    (**(void (***)(uint64_t, uint64_t))(v26 - 8))(v21, v22);
    *(_BYTE *)(v21 + 40) = 1;
  }
  else
  {
    v25 = *(_QWORD *)(v22 + 8);
    *(_QWORD *)v21 = *(_QWORD *)v22;
    *(_QWORD *)(v21 + 8) = v25;
    *(_BYTE *)(v21 + 16) = *(_BYTE *)(v22 + 16);
    *(_BYTE *)(v21 + 40) = 0;
    swift_bridgeObjectRetain(v25);
  }
  v27 = a3[23];
  v28 = a1 + v27;
  v29 = a2 + v27;
  v30 = type metadata accessor for P256.KeyAgreement.PrivateKey(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 16))(v28, v29, v30);
  v31 = a3[25];
  *(_BYTE *)(a1 + a3[24]) = *(_BYTE *)(a2 + a3[24]);
  v32 = a1 + v31;
  v33 = a2 + v31;
  *(_WORD *)v32 = *(_WORD *)v33;
  *(_BYTE *)(v32 + 2) = *(_BYTE *)(v33 + 2);
  v34 = a3[26];
  v35 = a3[27];
  v36 = (_DWORD *)(a1 + v34);
  v37 = (_DWORD *)(a2 + v34);
  *v36 = *v37;
  *(_DWORD *)((char *)v36 + 3) = *(_DWORD *)((char *)v37 + 3);
  *(_BYTE *)(a1 + v35) = *(_BYTE *)(a2 + v35);
  return a1;
}

uint64_t assignWithCopy for NANPublish.Configuration(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 *v27;
  int v28;
  int v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  _DWORD *v45;
  _DWORD *v46;
  int v47;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v12 = *(_QWORD *)(a2 + 64);
  v13 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_BYTE *)(a1 + 73) = *(_BYTE *)(a2 + 73);
  *(_BYTE *)(a1 + 74) = *(_BYTE *)(a2 + 74);
  *(_BYTE *)(a1 + 75) = *(_BYTE *)(a2 + 75);
  *(_BYTE *)(a1 + 76) = *(_BYTE *)(a2 + 76);
  *(_BYTE *)(a1 + 77) = *(_BYTE *)(a2 + 77);
  *(_BYTE *)(a1 + 78) = *(_BYTE *)(a2 + 78);
  *(_BYTE *)(a1 + 79) = *(_BYTE *)(a2 + 79);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_BYTE *)(a1 + 81) = *(_BYTE *)(a2 + 81);
  *(_BYTE *)(a1 + 82) = *(_BYTE *)(a2 + 82);
  *(_BYTE *)(a1 + 83) = *(_BYTE *)(a2 + 83);
  *(_BYTE *)(a1 + 84) = *(_BYTE *)(a2 + 84);
  *(_BYTE *)(a1 + 85) = *(_BYTE *)(a2 + 85);
  *(_BYTE *)(a1 + 86) = *(_BYTE *)(a2 + 86);
  *(_BYTE *)(a1 + 87) = *(_BYTE *)(a2 + 87);
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_BYTE *)(a1 + 89) = *(_BYTE *)(a2 + 89);
  v14 = a3[18];
  v15 = a1 + v14;
  v16 = a2 + v14;
  v17 = type metadata accessor for DispatchTimeInterval(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 24))(v15, v16, v17);
  *(_BYTE *)(a1 + a3[19]) = *(_BYTE *)(a2 + a3[19]);
  *(_BYTE *)(a1 + a3[20]) = *(_BYTE *)(a2 + a3[20]);
  v18 = a3[21];
  v19 = a1 + v18;
  v20 = a2 + v18;
  *(_BYTE *)v19 = *(_BYTE *)(a2 + v18);
  *(_BYTE *)(v19 + 1) = *(_BYTE *)(a2 + v18 + 1);
  *(_BYTE *)(v19 + 2) = *(_BYTE *)(a2 + v18 + 2);
  v21 = *(_QWORD *)(a2 + v18 + 8);
  v22 = *(_QWORD *)(a1 + v18 + 8);
  *(_QWORD *)(v19 + 8) = v21;
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRelease(v22);
  v23 = *(_QWORD *)(v20 + 16);
  v24 = *(_QWORD *)(v19 + 16);
  *(_QWORD *)(v19 + 16) = v23;
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRelease(v24);
  v25 = a3[22];
  v26 = a1 + v25;
  v27 = (__int128 *)(a2 + v25);
  v28 = *(unsigned __int8 *)(a1 + v25 + 40);
  v29 = *(unsigned __int8 *)(a2 + v25 + 40);
  if (v28 == 255)
  {
    if (v29 == 255)
    {
      v32 = *v27;
      v33 = v27[1];
      *(_OWORD *)(v26 + 25) = *(__int128 *)((char *)v27 + 25);
      *(_OWORD *)v26 = v32;
      *(_OWORD *)(v26 + 16) = v33;
      goto LABEL_11;
    }
    if ((v29 & 1) != 0)
    {
LABEL_8:
      v34 = *((_QWORD *)v27 + 3);
      *(_QWORD *)(v26 + 24) = v34;
      *(_QWORD *)(v26 + 32) = *((_QWORD *)v27 + 4);
      (**(void (***)(uint64_t, __int128 *))(v34 - 8))(v26, v27);
      *(_BYTE *)(v26 + 40) = 1;
      goto LABEL_11;
    }
LABEL_10:
    *(_QWORD *)v26 = *(_QWORD *)v27;
    v35 = *((_QWORD *)v27 + 1);
    *(_QWORD *)(v26 + 8) = v35;
    *(_BYTE *)(v26 + 16) = *((_BYTE *)v27 + 16);
    *(_BYTE *)(v26 + 40) = 0;
    swift_bridgeObjectRetain(v35);
    goto LABEL_11;
  }
  if (v29 != 255)
  {
    if (a1 == a2)
      goto LABEL_11;
    sub_100185054(v26);
    if ((*((_BYTE *)v27 + 40) & 1) != 0)
      goto LABEL_8;
    goto LABEL_10;
  }
  sub_100185054(v26);
  v30 = *(__int128 *)((char *)v27 + 25);
  v31 = v27[1];
  *(_OWORD *)v26 = *v27;
  *(_OWORD *)(v26 + 16) = v31;
  *(_OWORD *)(v26 + 25) = v30;
LABEL_11:
  v36 = a3[23];
  v37 = a1 + v36;
  v38 = a2 + v36;
  v39 = type metadata accessor for P256.KeyAgreement.PrivateKey(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 24))(v37, v38, v39);
  *(_BYTE *)(a1 + a3[24]) = *(_BYTE *)(a2 + a3[24]);
  v40 = a3[25];
  v41 = a1 + v40;
  v42 = a2 + v40;
  v43 = *(_BYTE *)(v42 + 2);
  *(_WORD *)v41 = *(_WORD *)v42;
  *(_BYTE *)(v41 + 2) = v43;
  v44 = a3[26];
  v45 = (_DWORD *)(a1 + v44);
  v46 = (_DWORD *)(a2 + v44);
  v47 = *(_DWORD *)((char *)v46 + 3);
  *v45 = *v46;
  *(_DWORD *)((char *)v45 + 3) = v47;
  *(_BYTE *)(a1 + a3[27]) = *(_BYTE *)(a2 + a3[27]);
  return a1;
}

uint64_t initializeWithTake for NANPublish.Configuration(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 *v15;
  __int128 v16;
  _OWORD *v17;
  _OWORD *v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _DWORD *v29;
  _DWORD *v30;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  v6 = *(_OWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_BYTE *)(a1 + 73) = *(_BYTE *)(a2 + 73);
  *(_BYTE *)(a1 + 74) = *(_BYTE *)(a2 + 74);
  *(_BYTE *)(a1 + 75) = *(_BYTE *)(a2 + 75);
  *(_WORD *)(a1 + 76) = *(_WORD *)(a2 + 76);
  *(_DWORD *)(a1 + 78) = *(_DWORD *)(a2 + 78);
  *(_WORD *)(a1 + 82) = *(_WORD *)(a2 + 82);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_WORD *)(a1 + 88) = *(_WORD *)(a2 + 88);
  v7 = a3[18];
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_OWORD *)(a1 + 56) = v6;
  v10 = type metadata accessor for DispatchTimeInterval(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[20];
  *(_BYTE *)(a1 + a3[19]) = *(_BYTE *)(a2 + a3[19]);
  *(_BYTE *)(a1 + v11) = *(_BYTE *)(a2 + v11);
  v12 = a3[21];
  v13 = a3[22];
  v14 = a1 + v12;
  v15 = (__int128 *)(a2 + v12);
  v16 = *v15;
  *(_QWORD *)(v14 + 16) = *((_QWORD *)v15 + 2);
  *(_OWORD *)v14 = v16;
  v17 = (_OWORD *)(a1 + v13);
  v18 = (_OWORD *)(a2 + v13);
  v19 = v18[1];
  *v17 = *v18;
  v17[1] = v19;
  *(_OWORD *)((char *)v17 + 25) = *(_OWORD *)((char *)v18 + 25);
  v20 = a3[23];
  v21 = a1 + v20;
  v22 = a2 + v20;
  v23 = type metadata accessor for P256.KeyAgreement.PrivateKey(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 32))(v21, v22, v23);
  v24 = a3[25];
  *(_BYTE *)(a1 + a3[24]) = *(_BYTE *)(a2 + a3[24]);
  v25 = a1 + v24;
  v26 = a2 + v24;
  *(_WORD *)v25 = *(_WORD *)v26;
  *(_BYTE *)(v25 + 2) = *(_BYTE *)(v26 + 2);
  v27 = a3[26];
  v28 = a3[27];
  v29 = (_DWORD *)(a1 + v27);
  v30 = (_DWORD *)(a2 + v27);
  *v29 = *v30;
  *(_DWORD *)((char *)v29 + 3) = *(_DWORD *)((char *)v30 + 3);
  *(_BYTE *)(a1 + v28) = *(_BYTE *)(a2 + v28);
  return a1;
}

uint64_t assignWithTake for NANPublish.Configuration(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _DWORD *v34;
  _DWORD *v35;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease(v8);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v10 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRelease(v10);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_BYTE *)(a1 + 73) = *(_BYTE *)(a2 + 73);
  *(_BYTE *)(a1 + 74) = *(_BYTE *)(a2 + 74);
  *(_BYTE *)(a1 + 75) = *(_BYTE *)(a2 + 75);
  *(_BYTE *)(a1 + 76) = *(_BYTE *)(a2 + 76);
  *(_QWORD *)(a1 + 77) = *(_QWORD *)(a2 + 77);
  *(_DWORD *)(a1 + 85) = *(_DWORD *)(a2 + 85);
  *(_BYTE *)(a1 + 89) = *(_BYTE *)(a2 + 89);
  v11 = a3[18];
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = type metadata accessor for DispatchTimeInterval(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 40))(v12, v13, v14);
  v15 = a3[20];
  *(_BYTE *)(a1 + a3[19]) = *(_BYTE *)(a2 + a3[19]);
  *(_BYTE *)(a1 + v15) = *(_BYTE *)(a2 + v15);
  v16 = a3[21];
  v17 = a1 + v16;
  v18 = a2 + v16;
  *(_BYTE *)v17 = *(_BYTE *)(a2 + v16);
  *(_WORD *)(v17 + 1) = *(_WORD *)(a2 + v16 + 1);
  v19 = *(_QWORD *)(a1 + v16 + 8);
  *(_QWORD *)(v17 + 8) = *(_QWORD *)(a2 + v16 + 8);
  swift_bridgeObjectRelease(v19);
  v20 = *(_QWORD *)(v17 + 16);
  *(_QWORD *)(v17 + 16) = *(_QWORD *)(v18 + 16);
  swift_bridgeObjectRelease(v20);
  v21 = a3[22];
  v22 = (_OWORD *)(a1 + v21);
  v23 = a2 + v21;
  if (*(unsigned __int8 *)(a1 + v21 + 40) == 255)
    goto LABEL_5;
  if (*(unsigned __int8 *)(v23 + 40) == 255 || a1 != a2)
  {
    sub_100185054((uint64_t)v22);
LABEL_5:
    v24 = *(_OWORD *)(v23 + 16);
    *v22 = *(_OWORD *)v23;
    v22[1] = v24;
    *(_OWORD *)((char *)v22 + 25) = *(_OWORD *)(v23 + 25);
  }
  v25 = a3[23];
  v26 = a1 + v25;
  v27 = a2 + v25;
  v28 = type metadata accessor for P256.KeyAgreement.PrivateKey(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 40))(v26, v27, v28);
  v29 = a3[25];
  *(_BYTE *)(a1 + a3[24]) = *(_BYTE *)(a2 + a3[24]);
  v30 = a1 + v29;
  v31 = a2 + v29;
  *(_WORD *)v30 = *(_WORD *)v31;
  *(_BYTE *)(v30 + 2) = *(_BYTE *)(v31 + 2);
  v32 = a3[26];
  v33 = a3[27];
  v34 = (_DWORD *)(a1 + v32);
  v35 = (_DWORD *)(a2 + v32);
  *v34 = *v35;
  *(_DWORD *)((char *)v34 + 3) = *(_DWORD *)((char *)v35 + 3);
  *(_BYTE *)(a1 + v33) = *(_BYTE *)(a2 + v33);
  return a1;
}

uint64_t getEnumTagSinglePayload for NANPublish.Configuration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10018D4F4);
}

uint64_t sub_10018D4F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for DispatchTimeInterval(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 72);
    }
    else
    {
      v10 = type metadata accessor for OWEKeys(0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 92);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t storeEnumTagSinglePayload for NANPublish.Configuration(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10018D5A0);
}

uint64_t sub_10018D5A0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 16) = (a2 - 1);
  }
  else
  {
    v8 = type metadata accessor for DispatchTimeInterval(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 72);
    }
    else
    {
      v10 = type metadata accessor for OWEKeys(0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 92);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

uint64_t sub_10018D63C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[24];

  v5[0] = (char *)&value witness table for Builtin.Int8 + 64;
  v5[1] = &unk_10034F038;
  v5[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v5[3] = (char *)&value witness table for Builtin.Int8 + 64;
  v5[4] = &unk_10034F038;
  v5[5] = &unk_10034F038;
  v5[6] = &unk_10034F050;
  v5[7] = &unk_10034F068;
  v5[8] = &unk_10034F068;
  v5[9] = &unk_10034F068;
  v5[10] = &unk_10034F068;
  v5[11] = &unk_10034F050;
  v5[12] = &unk_10034F080;
  v5[13] = &unk_10034F080;
  result = type metadata accessor for DispatchTimeInterval(319);
  if (v3 <= 0x3F)
  {
    v5[14] = *(_QWORD *)(result - 8) + 64;
    v5[15] = &unk_10034F098;
    v5[16] = &unk_10034F068;
    v5[17] = &unk_10034F0B0;
    v5[18] = &unk_10034F0C8;
    result = type metadata accessor for P256.KeyAgreement.PrivateKey(319);
    if (v4 <= 0x3F)
    {
      v5[19] = *(_QWORD *)(result - 8) + 64;
      v5[20] = (char *)&value witness table for Builtin.Int8 + 64;
      v5[21] = &unk_10034F0E0;
      v5[22] = &unk_10034F0F8;
      v5[23] = (char *)&value witness table for Builtin.Int8 + 64;
      swift_initStructMetadata(a1, 256, 24, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

unint64_t sub_10018D758()
{
  unint64_t result;

  result = qword_100409F00;
  if (!qword_100409F00)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANPublish.FurtherServiceDiscoveryFunction, &type metadata for NANPublish.FurtherServiceDiscoveryFunction);
    atomic_store(result, (unint64_t *)&qword_100409F00);
  }
  return result;
}

unint64_t sub_10018D79C()
{
  unint64_t result;

  result = qword_100409F08;
  if (!qword_100409F08)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANPublish.EventCondition, &type metadata for NANPublish.EventCondition);
    atomic_store(result, (unint64_t *)&qword_100409F08);
  }
  return result;
}

unint64_t sub_10018D7E0()
{
  unint64_t result;

  result = qword_100409F10;
  if (!qword_100409F10)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANPublish.SolicitedTransmissionType, &type metadata for NANPublish.SolicitedTransmissionType);
    atomic_store(result, (unint64_t *)&qword_100409F10);
  }
  return result;
}

unint64_t sub_10018D824()
{
  unint64_t result;

  result = qword_100409F18;
  if (!qword_100409F18)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANPublish.PublishType, &type metadata for NANPublish.PublishType);
    atomic_store(result, (unint64_t *)&qword_100409F18);
  }
  return result;
}

uint64_t sub_10018D868(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100012C44((uint64_t *)&unk_10040E260);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10018D8B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for OWEKeys(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10018D8F4(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  _BOOL8 v5;
  BOOL v6;

  v2 = *(_QWORD *)(a2 + 16);
  if (!v2)
    return 0;
  if (*(_DWORD *)(a2 + 32) == (_DWORD)result)
    return 1;
  if (v2 == 1)
    return 0;
  for (i = 9; ; ++i)
  {
    v4 = i - 7;
    if (__OFADD__(i - 8, 1))
      break;
    v6 = *(_DWORD *)(a2 + 4 * i) == (_DWORD)result;
    v5 = v6;
    v6 = v6 || v4 == v2;
    if (v6)
      return v5;
  }
  __break(1u);
  return result;
}

uint64_t static Channel.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2)
{
  return sub_100192574(a1 & 0xFFFFFFFFFFFFLL, a2 & 0xFFFFFFFFFFFFLL);
}

CoreP2P::Channel::Band_optional __swiftcall Channel.Band.init(rawValue:)(Swift::UInt8 rawValue)
{
  char v1;
  CoreP2P::Channel::Band_optional v2;

  if (rawValue == 128)
    v1 = 2;
  else
    v1 = 3;
  if (rawValue == 16)
    v2.value = CoreP2P_Channel_Band_fiveGHz;
  else
    v2.value = v1;
  if (rawValue == 4)
    return 0;
  else
    return v2;
}

unint64_t NANBitmap.Channel.channel.getter(unint64_t a1)
{
  uint64_t v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t i;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned __int8 v11;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;

  if (qword_100404198 != -1)
    goto LABEL_89;
LABEL_2:
  v2 = *((_QWORD *)off_100409F60 + 2);
  if (!v2)
    return 0x300000000;
  if (*((unsigned __int8 *)off_100409F60 + 32) == a1)
  {
    v3 = (char *)off_100409F60 + 40;
    v4 = (char *)off_100409F60 + 34;
    v5 = (char *)off_100409F60 + 33;
    goto LABEL_12;
  }
  if (v2 == 1)
    return 0x300000000;
  v3 = (char *)off_100409F60 + 56;
  for (i = 1; ; ++i)
  {
    v7 = i + 1;
    if (__OFADD__(i, 1))
    {
      __break(1u);
LABEL_89:
      swift_once(&qword_100404198, sub_100191124);
      goto LABEL_2;
    }
    if (*(v3 - 8) == a1)
      break;
    v3 += 16;
    if (v7 == v2)
      return 0x300000000;
  }
  v5 = v3 - 7;
  v4 = v3 - 6;
LABEL_12:
  v8 = HIDWORD(a1);
  v9 = *(_QWORD *)v3;
  v10 = *v4;
  v11 = *v5;
  swift_bridgeObjectRetain(*(_QWORD *)v3);
  if (a1 >= 0x83u)
  {
    if ((BYTE4(a1) & (BYTE4(a1) - 1)) == 0 && (a1 & 0xFF000000) == 0x1000000)
    {
      v8 = __clz(__rbit32(HIDWORD(a1) | 0x100));
      if (a1 == 132)
        v14 = (_DWORD)v8 == 1;
      else
        v14 = v10;
      if (qword_1004041A0 != -1)
        goto LABEL_92;
      goto LABEL_29;
    }
    goto LABEL_86;
  }
  if ((WORD1(a1) & ((a1 >> 16) - 1)) != 0 || WORD1(a1) == 0)
    goto LABEL_86;
  if ((BYTE4(a1) & (BYTE4(a1) - 1)) != 0)
    goto LABEL_86;
  v13 = __clz(__rbit32((a1 >> 16) | 0x10000));
  if (*(_QWORD *)(v9 + 16) <= v13)
    goto LABEL_86;
  LODWORD(a1) = *(_DWORD *)(v9 + 4 * v13 + 32);
  if (qword_1004041A0 != -1)
    swift_once(&qword_1004041A0, sub_1001919B8);
  v14 = *((_QWORD *)off_100409F68 + 2);
  if (!v14)
  {
LABEL_52:
    v37 = a1;
LABEL_53:
    sub_10018FA04();
    swift_bridgeObjectRelease(v9);
    return v37 | ((unint64_t)v11 << 32) | ((unint64_t)v10 << 40);
  }
  v15 = 0;
  v16 = (char *)off_100409F68 + 32;
  while (1)
  {
    v26 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (((0x801004u >> (8 * v11)) & 0xFFC) == (0x801004u >> (8 * *v16)))
    {
      switch(v16[1])
      {
        case 2:
          if (v10 == 2)
            goto LABEL_69;
          goto LABEL_55;
        case 3:
          if (v10 == 3)
            goto LABEL_69;
          goto LABEL_55;
        case 4:
          if (v10 == 4)
            goto LABEL_69;
          goto LABEL_55;
        case 5:
          if (v10 == 5)
            goto LABEL_69;
          goto LABEL_55;
        case 6:
          if (v10 != 6)
            goto LABEL_55;
          goto LABEL_69;
        default:
          if ((v10 - 2) < 5u || ((v10 ^ ((v16[1] & 1) == 0)) & 1) == 0)
            goto LABEL_55;
LABEL_69:
          v27 = *((_QWORD *)v16 + 1);
          v28 = *(_QWORD *)(v27 + 16);
          if (!v28)
            goto LABEL_86;
          if (*(_DWORD *)(v27 + 32) == (_DWORD)a1)
          {
            v29 = (_QWORD *)(v27 + 40);
LABEL_72:
            v30 = *v29;
            v31 = __clz(__rbit32(v8 | 0x100));
            if (*(_QWORD *)(v30 + 16) > v31)
            {
              v24 = v30 + 4 * v31;
              goto LABEL_74;
            }
            goto LABEL_86;
          }
          if (v28 == 1)
            goto LABEL_86;
          v29 = (_QWORD *)(v27 + 56);
          v34 = 1;
          while (1)
          {
            v35 = v34 + 1;
            if (__OFADD__(v34, 1))
              break;
            if (*((_DWORD *)v29 - 2) == (_DWORD)a1)
              goto LABEL_72;
            v29 += 2;
            ++v34;
            if (v35 == v28)
              goto LABEL_86;
          }
          break;
      }
LABEL_94:
      __break(1u);
      JUMPOUT(0x10018DE60);
    }
LABEL_55:
    v16 += 16;
    ++v15;
    if (v26 == v14)
      goto LABEL_52;
  }
  while (1)
  {
    __break(1u);
LABEL_92:
    v36 = v14;
    swift_once(&qword_1004041A0, sub_1001919B8);
    v14 = v36;
LABEL_29:
    a1 = BYTE2(a1);
    v17 = *((_QWORD *)off_100409F68 + 2);
    if (!v17)
    {
LABEL_51:
      if ((sub_10018D8F4(a1, v9) & 1) == 0)
        goto LABEL_86;
      goto LABEL_52;
    }
    v18 = 0;
    v19 = (char *)off_100409F68 + 32;
LABEL_33:
    v20 = v18 + 1;
    if (!__OFADD__(v18, 1))
      break;
    __break(1u);
  }
  if (((0x801004u >> (8 * v11)) & 0xFFC) != (0x801004u >> (8 * *v19)))
  {
LABEL_32:
    v19 += 16;
    ++v18;
    if (v20 == v17)
      goto LABEL_51;
    goto LABEL_33;
  }
  switch(v19[1])
  {
    case 2:
      if ((_DWORD)v14 == 2)
        goto LABEL_46;
      goto LABEL_32;
    case 3:
      if ((_DWORD)v14 == 3)
        goto LABEL_46;
      goto LABEL_32;
    case 4:
      if ((_DWORD)v14 == 4)
        goto LABEL_46;
      goto LABEL_32;
    case 5:
      if ((_DWORD)v14 == 5)
        goto LABEL_46;
      goto LABEL_32;
    case 6:
      if ((_DWORD)v14 != 6)
        goto LABEL_32;
      goto LABEL_46;
    default:
      if ((v14 - 2) < 5u || ((v14 ^ ((v19[1] & 1) == 0)) & 1) == 0)
        goto LABEL_32;
LABEL_46:
      v21 = *((_QWORD *)v19 + 1);
      v22 = *(_QWORD *)(v21 + 16);
      if (!v22)
        goto LABEL_86;
      if (*(_DWORD *)(v21 + 32) != (_DWORD)a1)
      {
        if (v22 == 1)
          goto LABEL_86;
        v23 = v21 + 56;
        v32 = 1;
        while (1)
        {
          v33 = v32 + 1;
          if (__OFADD__(v32, 1))
            break;
          if (*(_DWORD *)(v23 - 8) == (_DWORD)a1)
            goto LABEL_49;
          v23 += 16;
          ++v32;
          if (v33 == v22)
            goto LABEL_86;
        }
        __break(1u);
        goto LABEL_94;
      }
      v23 = v21 + 40;
LABEL_49:
      if (*(_QWORD *)(*(_QWORD *)v23 + 16) > v8)
      {
        v24 = *(_QWORD *)v23 + 4 * v8;
LABEL_74:
        v37 = *(_DWORD *)(v24 + 32);
        goto LABEL_53;
      }
LABEL_86:
      swift_bridgeObjectRelease(v9);
      return 0x300000000;
  }
}

unint64_t NANBitmap.Channel.init(channel:)(uint64_t a1)
{
  return sub_100192B90(a1 & 0xFFFFFFFFFFFFLL);
}

BOOL Channel.is2_4GHz.getter(uint64_t a1)
{
  return (a1 & 0x700000000) == 0;
}

uint64_t Channel.init<A>(_:)(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t AssociatedConformanceWitness;
  char v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char v24;
  void (*v25)(char *, uint64_t);
  unsigned int v26;
  char *v27;
  unsigned int v28;
  unint64_t v29;
  char v30;
  uint64_t result;
  char *v32;
  unsigned int v33;
  void (*v34)(char *, uint64_t);
  unint64_t v35;
  char *v36;
  char *v37;
  void (*v38)(char *, uint64_t, uint64_t);
  char *v39;
  uint64_t v40;
  int v41;

  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 24) + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v6, a2, &protocol requirements base descriptor for ExpressibleByIntegerLiteral);
  __chkstk_darwin();
  v9 = (char *)&v36 - v8;
  __chkstk_darwin();
  v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v39 = (char *)&v36 - v12;
  __chkstk_darwin();
  v14 = (char *)&v36 - v13;
  __chkstk_darwin();
  v16 = (char *)&v36 - v15;
  v40 = v17;
  v38 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 16);
  v38((char *)&v36 - v15, (uint64_t)a1, a2);
  if ((dispatch thunk of static BinaryInteger.isSigned.getter(a2, a3) & 1) != 0)
  {
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v6, a2, AssociatedTypeWitness, &protocol requirements base descriptor for ExpressibleByIntegerLiteral, &associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
    dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)(&unk_10033A248, 256, AssociatedTypeWitness, AssociatedConformanceWitness);
    dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)(v9, a2, v6);
    v19 = dispatch thunk of static Comparable.>= infix(_:_:)(v16, v14, a2, *(_QWORD *)(*(_QWORD *)(a3 + 32) + 8));
    (*(void (**)(char *, uint64_t))(v40 + 8))(v14, a2);
    if ((v19 & 1) == 0)
    {
      result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
      goto LABEL_17;
    }
  }
  if (dispatch thunk of BinaryInteger.bitWidth.getter(a2, a3) < 32)
    goto LABEL_15;
  v36 = v11;
  v37 = a1;
  v38(v39, (uint64_t)v16, a2);
  v41 = -1;
  v20 = dispatch thunk of static BinaryInteger.isSigned.getter(a2, a3);
  v21 = dispatch thunk of BinaryInteger.bitWidth.getter(a2, a3);
  if ((v20 & 1) == 0)
  {
    if (v21 >= 33)
      goto LABEL_10;
    v32 = v39;
    dispatch thunk of BinaryInteger._lowWord.getter(a2, a3);
    a1 = v37;
    (*(void (**)(char *, uint64_t))(v40 + 8))(v32, a2);
LABEL_15:
    v33 = dispatch thunk of BinaryInteger._lowWord.getter(a2, a3);
    v34 = *(void (**)(char *, uint64_t))(v40 + 8);
    v34(v16, a2);
    v35 = sub_100192784(v33);
    v34(a1, a2);
    return v35 & 0xFFFFFFFFFFFFLL;
  }
  if (v21 <= 32)
  {
    v22 = swift_getAssociatedConformanceWitness(v6, a2, AssociatedTypeWitness, &protocol requirements base descriptor for ExpressibleByIntegerLiteral, &associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
    dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)(&unk_10033A248, 256, AssociatedTypeWitness, v22);
    dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)(v9, a2, v6);
    v23 = v39;
    v24 = dispatch thunk of static Comparable.> infix(_:_:)(v39, v14, a2, *(_QWORD *)(*(_QWORD *)(a3 + 32) + 8));
    v25 = *(void (**)(char *, uint64_t))(v40 + 8);
    v25(v14, a2);
    v26 = v41;
    v27 = v36;
    v38(v36, (uint64_t)v23, a2);
    a1 = v37;
    if ((v24 & 1) != 0)
    {
      v28 = dispatch thunk of BinaryInteger._lowWord.getter(a2, a3);
      v25(v27, a2);
      if (v26 < v28)
        goto LABEL_11;
    }
    else
    {
      v25(v27, a2);
    }
    goto LABEL_14;
  }
LABEL_10:
  v29 = sub_100193064();
  dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(&v41, &type metadata for UInt32, v29, a2, a3);
  v23 = v39;
  v30 = dispatch thunk of static Comparable.< infix(_:_:)(v14, v39, a2, *(_QWORD *)(*(_QWORD *)(a3 + 32) + 8));
  v25 = *(void (**)(char *, uint64_t))(v40 + 8);
  v25(v14, a2);
  a1 = v37;
  if ((v30 & 1) == 0)
  {
LABEL_14:
    v25(v23, a2);
    goto LABEL_15;
  }
LABEL_11:
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 3455, 0);
LABEL_17:
  __break(1u);
  return result;
}

int *Channel.nanPrimary.unsafeMutableAddressor()
{
  if (qword_100404180 != -1)
    swift_once(&qword_100404180, sub_1001902EC);
  return &static Channel.nanPrimary;
}

unint64_t Optional<A>.init(integerLiteral:)(unsigned int a1)
{
  return sub_100192784(a1) & 0xFFFFFFFFFFFFLL;
}

int *Channel.awdlSocial2GHz.unsafeMutableAddressor()
{
  if (qword_100404168 != -1)
    swift_once(&qword_100404168, sub_100190174);
  return &static Channel.awdlSocial2GHz;
}

unint64_t Channel.init(_:band:bandwidth:)(unsigned int a1, unsigned __int8 a2, unsigned __int8 a3)
{
  sub_10018FA04();
  return a1 | ((unint64_t)a2 << 32) | ((unint64_t)a3 << 40);
}

BOOL Channel.isDFS.getter(unsigned int a1)
{
  if (qword_100404148 != -1)
    swift_once(&qword_100404148, sub_10018F9E0);
  return sub_10009B344(a1, qword_100409F40);
}

uint64_t Channel.init<A, B>(channel:operatingClass:)(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  void (*v26)(unint64_t, char *, uint64_t);
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t AssociatedConformanceWitness;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  char v47;
  void (*v48)(char *, uint64_t);
  unsigned int v49;
  char *v50;
  uint64_t v51;
  unsigned int v52;
  unint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t result;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  unint64_t v62;
  char *v63;
  int v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  unint64_t v68;
  char *v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  char *v73;
  char *v74;
  void (*v75)(char *, uint64_t);
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  char *v85;
  uint64_t v86;
  void (*v87)(char *, uint64_t, uint64_t);
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  __n128 v98;
  char *v99;
  int v100;
  uint64_t v101;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  void (*v109)(uint64_t, uint64_t);
  __n128 v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  void (*v114)(char *, uint64_t);
  char *v115;
  char *v116;
  uint64_t AssociatedTypeWitness;
  uint64_t v118;
  void (*v119)(uint64_t, uint64_t);
  char *v120;
  char *v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  void (*v125)(unint64_t, char *, uint64_t);
  char *v126;
  char *v127;
  char *v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char v133;
  char v134;
  unsigned int v135;
  unsigned __int8 v136;
  unsigned __int8 v137;
  char v138;
  int v139[3];

  v10 = *(_QWORD *)(a6 + 8);
  v123 = a2;
  v124 = v10;
  v118 = *(_QWORD *)(*(_QWORD *)(v10 + 24) + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v118, a4, &protocol requirements base descriptor for ExpressibleByIntegerLiteral);
  __chkstk_darwin();
  v116 = (char *)&v114 - v11;
  v130 = *(_QWORD *)(a4 - 8);
  __chkstk_darwin();
  v13 = (char *)&v114 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v128 = (char *)&v114 - v14;
  v15 = *(_QWORD *)(a5 + 8);
  v127 = *(char **)(*(_QWORD *)(v15 + 24) + 16);
  v16 = swift_getAssociatedTypeWitness(0, v127, a3, &protocol requirements base descriptor for ExpressibleByIntegerLiteral);
  __chkstk_darwin();
  v126 = (char *)&v114 - v17;
  v132 = *(_QWORD *)(a3 - 8);
  __chkstk_darwin();
  v19 = (char *)&v114 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v129 = (unint64_t)&v114 - v20;
  __chkstk_darwin();
  v22 = (char *)&v114 - v21;
  __chkstk_darwin();
  v24 = (char *)&v114 - v23;
  v26 = *(void (**)(unint64_t, char *, uint64_t))(v25 + 16);
  v120 = (uint64_t)a1;
  v125 = v26;
  v26((unint64_t)&v114 - v23, a1, a3);
  v131 = a3;
  if ((dispatch thunk of static BinaryInteger.isSigned.getter(a3, v15) & 1) != 0)
  {
    v27 = v13;
    v28 = v127;
    v29 = v131;
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v127, v131, v16, &protocol requirements base descriptor for ExpressibleByIntegerLiteral, &associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
    v31 = v16;
    v32 = v15;
    v33 = v22;
    v34 = v126;
    dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)(&unk_10033A248, 256, v31, AssociatedConformanceWitness);
    v35 = v34;
    v22 = v33;
    v15 = v32;
    v16 = v31;
    v36 = v28;
    v13 = v27;
    dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)(v35, v29, v36);
    LOBYTE(v31) = dispatch thunk of static Comparable.>= infix(_:_:)(v24, v22, v29, *(_QWORD *)(*(_QWORD *)(v15 + 32) + 8));
    (*(void (**)(char *, uint64_t))(v132 + 8))(v22, v29);
    if ((v31 & 1) == 0)
    {
      result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
      goto LABEL_95;
    }
  }
  v37 = dispatch thunk of BinaryInteger.bitWidth.getter(v131, v15);
  v38 = v124;
  v115 = v13;
  if (v37 < 32)
    goto LABEL_16;
  v122 = v19;
  v39 = v131;
  v125(v129, v24, v131);
  v139[0] = -1;
  v40 = dispatch thunk of static BinaryInteger.isSigned.getter(v39, v15);
  v41 = dispatch thunk of BinaryInteger.bitWidth.getter(v39, v15);
  if ((v40 & 1) != 0)
  {
    if (v41 <= 32)
    {
      v42 = v127;
      v43 = v131;
      v44 = swift_getAssociatedConformanceWitness(v127, v131, v16, &protocol requirements base descriptor for ExpressibleByIntegerLiteral, &associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
      v45 = v126;
      dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)(&unk_10033A248, 256, v16, v44);
      dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)(v45, v43, v42);
      v46 = (char *)v129;
      v47 = dispatch thunk of static Comparable.> infix(_:_:)(v129, v22, v43, *(_QWORD *)(*(_QWORD *)(v15 + 32) + 8));
      v48 = *(void (**)(char *, uint64_t))(v132 + 8);
      v48(v22, v43);
      v49 = v139[0];
      v50 = v122;
      v125((unint64_t)v122, v46, v43);
      if ((v47 & 1) != 0)
      {
        v51 = v131;
        v52 = dispatch thunk of BinaryInteger._lowWord.getter(v131, v15);
        v48(v50, v51);
        if (v49 < v52)
          goto LABEL_11;
      }
      else
      {
        v48(v50, v131);
      }
LABEL_14:
      v48(v46, v131);
      goto LABEL_15;
    }
LABEL_10:
    v53 = sub_100193064();
    v54 = v131;
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(v139, &type metadata for UInt32, v53, v131, v15);
    v46 = (char *)v129;
    v55 = dispatch thunk of static Comparable.< infix(_:_:)(v22, v129, v54, *(_QWORD *)(*(_QWORD *)(v15 + 32) + 8));
    v48 = *(void (**)(char *, uint64_t))(v132 + 8);
    v48(v22, v54);
    if ((v55 & 1) != 0)
    {
LABEL_11:
      result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 3455, 0);
LABEL_95:
      __break(1u);
      return result;
    }
    goto LABEL_14;
  }
  if (v41 >= 33)
    goto LABEL_10;
  v57 = (char *)v129;
  dispatch thunk of BinaryInteger._lowWord.getter(v131, v15);
  (*(void (**)(char *, uint64_t))(v132 + 8))(v57, v131);
LABEL_15:
  v38 = v124;
LABEL_16:
  v58 = v131;
  v125 = (void (*)(unint64_t, char *, uint64_t))dispatch thunk of BinaryInteger._lowWord.getter(v131, v15);
  v59 = *(_QWORD *)(v132 + 8);
  ((void (*)(char *, uint64_t))v59)(v24, v58);
  if (qword_100404198 != -1)
    goto LABEL_93;
  while (1)
  {
    v119 = (void (*)(uint64_t, uint64_t))v59;
    v60 = (char *)off_100409F60;
    v61 = v123;
    v126 = (char *)*((_QWORD *)off_100409F60 + 2);
    if (!v126)
      break;
    v127 = (char *)off_100409F60 + 32;
    swift_bridgeObjectRetain(off_100409F60);
    v62 = 0;
    v122 = v60;
    while (1)
    {
      if (v62 >= *((_QWORD *)v60 + 2))
        goto LABEL_91;
      v63 = &v127[16 * v62];
      v64 = *v63;
      v129 = v63[1];
      LODWORD(v132) = v63[2];
      v65 = *((_QWORD *)v63 + 1);
      swift_bridgeObjectRetain(v65);
      if ((dispatch thunk of static BinaryInteger.isSigned.getter(a4, v38) & 1) == 0)
        break;
      v66 = dispatch thunk of static BinaryInteger.isSigned.getter(a4, v38);
      v67 = dispatch thunk of BinaryInteger.bitWidth.getter(a4, v38);
      if ((v66 & 1) == 0)
      {
        if (v67 >= 8)
        {
          v134 = v64;
          v68 = sub_1001930A8();
          v69 = &v134;
          goto LABEL_35;
        }
        v76 = v130;
        v77 = v128;
        (*(void (**)(char *, uint64_t, uint64_t))(v130 + 16))(v128, v61, a4);
        v59 = dispatch thunk of BinaryInteger._lowWord.getter(a4, v38);
        v75 = *(void (**)(char *, uint64_t))(v76 + 8);
        v78 = v77;
        v60 = v122;
        v75(v78, a4);
        goto LABEL_29;
      }
      if (v67 > 8)
      {
        v133 = v64;
        v68 = sub_1001930A8();
        v69 = &v133;
        goto LABEL_35;
      }
      v79 = AssociatedTypeWitness;
      v80 = v118;
      v81 = swift_getAssociatedConformanceWitness(v118, a4, AssociatedTypeWitness, &protocol requirements base descriptor for ExpressibleByIntegerLiteral, &associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
      v82 = v61;
      v83 = v116;
      dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)(&unk_10033A248, 256, v79, v81);
      v84 = v128;
      v85 = v83;
      v61 = v82;
      dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)(v85, a4, v80);
      v59 = dispatch thunk of static Comparable.>= infix(_:_:)(v82, v84, a4, *(_QWORD *)(*(_QWORD *)(v38 + 32) + 8));
      v86 = v130;
      v75 = *(void (**)(char *, uint64_t))(v130 + 8);
      v75(v84, a4);
      v87 = *(void (**)(char *, uint64_t, uint64_t))(v86 + 16);
      v88 = v115;
      v87(v115, v61, a4);
      if ((v59 & 1) == 0)
      {
        v75(v88, a4);
        v60 = v122;
        goto LABEL_52;
      }
      v59 = dispatch thunk of BinaryInteger._lowWord.getter(a4, v38);
      v75(v88, a4);
      v60 = v122;
      if (v64 == v59)
        goto LABEL_36;
LABEL_52:
      v98 = swift_bridgeObjectRelease(v65);
LABEL_53:
      if ((char *)++v62 == v126)
        goto LABEL_87;
    }
    if (dispatch thunk of BinaryInteger.bitWidth.getter(a4, v38) >= 8)
    {
      v138 = v64;
      v68 = sub_1001930A8();
      v69 = &v138;
LABEL_35:
      v89 = v128;
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(v69, &type metadata for UInt8, v68, a4, v38);
      v59 = dispatch thunk of static Equatable.== infix(_:_:)(v61, v89, a4, *(_QWORD *)(*(_QWORD *)(v38 + 16) + 8));
      v75 = *(void (**)(char *, uint64_t))(v130 + 8);
      v75(v89, a4);
      if ((v59 & 1) == 0)
        goto LABEL_52;
      goto LABEL_36;
    }
    v70 = v130;
    v71 = v60;
    v72 = v61;
    v73 = v128;
    (*(void (**)(char *, uint64_t, uint64_t))(v130 + 16))(v128, v72, a4);
    v59 = dispatch thunk of BinaryInteger._lowWord.getter(a4, v38);
    v74 = v73;
    v61 = v72;
    v60 = v71;
    v75 = *(void (**)(char *, uint64_t))(v70 + 8);
    v75(v74, a4);
LABEL_29:
    if (v64 != v59)
      goto LABEL_52;
LABEL_36:
    if ((v132 - 4) > 2)
    {
      v95 = *(_QWORD *)(v65 + 16);
      if (v95)
      {
        if (*(_DWORD *)(v65 + 32) == (_DWORD)v125)
          goto LABEL_88;
        if (v95 != 1)
        {
          if (*(_DWORD *)(v65 + 36) == (_DWORD)v125)
            goto LABEL_88;
          if (v95 != 2)
          {
            v96 = 10;
            while (1)
            {
              v97 = v96 - 7;
              if (__OFADD__(v96 - 8, 1))
                goto LABEL_92;
              if (*(_DWORD *)(v65 + 4 * v96) == (_DWORD)v125)
                break;
              ++v96;
              if (v97 == v95)
                goto LABEL_52;
            }
LABEL_88:
            swift_bridgeObjectRelease(v60);
            v109 = v119;
LABEL_85:
            v135 = v125;
            v136 = v129;
            v137 = v132;
            sub_10018FA04();
            v110 = swift_bridgeObjectRelease(v65);
            v111 = v135;
            v112 = v136;
            v113 = v137;
            ((void (*)(uint64_t, uint64_t, __n128))v75)(v61, a4, v110);
            v109(v120, v131);
            return v111 | (v112 << 32) | (v113 << 40);
          }
        }
      }
      goto LABEL_52;
    }
    if (qword_1004041A0 != -1)
      swift_once(&qword_1004041A0, sub_1001919B8);
    v121 = (char *)off_100409F68;
    v90 = *((_QWORD *)off_100409F68 + 2);
    if (!v90)
      goto LABEL_52;
    v114 = v75;
    v91 = v61;
    v38 = 0x801004u >> (8 * v129);
    v92 = v121 + 32;
    swift_bridgeObjectRetain_n(v121, 2);
    v93 = v132;
    v94 = 0;
    while (1)
    {
      v59 = v94 + 1;
      if (__OFADD__(v94, 1))
        break;
      if ((0x801004u >> (8 * v92[16 * v94])) == v38)
      {
        v99 = &v92[16 * v94];
        v100 = v99[1];
        v101 = *((_QWORD *)v99 + 1);
        if (v100 == 6)
        {
          if (v93 != 6)
            goto LABEL_56;
        }
        else if (v100 == 5)
        {
          if (v93 != 5)
            goto LABEL_56;
        }
        else if (v100 != 4 || v93 != 4)
        {
          goto LABEL_56;
        }
        v103 = *(_QWORD *)(v101 + 16);
        if (v103)
        {
          swift_bridgeObjectRetain_n(*((_QWORD *)v99 + 1), 2);
          v104 = 0;
          while (1)
          {
            v105 = *(_QWORD *)(v101 + 32 + 16 * v104 + 8);
            v106 = *(_QWORD *)(v105 + 16);
            if (v106)
            {
              if (*(_DWORD *)(v105 + 32) == (_DWORD)v125)
                goto LABEL_84;
              if (v106 != 1)
              {
                if (*(_DWORD *)(v105 + 36) == (_DWORD)v125)
                {
LABEL_84:
                  swift_bridgeObjectRelease(v101);
                  swift_bridgeObjectRelease(v122);
                  swift_bridgeObjectRelease_n(v121, 2);
                  swift_bridgeObjectRelease(v101);
                  v61 = v123;
                  v109 = v119;
                  v75 = v114;
                  goto LABEL_85;
                }
                if (v106 != 2)
                  break;
              }
            }
LABEL_72:
            if (++v104 == v103)
            {
              swift_bridgeObjectRelease_n(v101, 2);
              v91 = v123;
              v93 = v132;
              goto LABEL_56;
            }
          }
          v107 = 10;
          while (1)
          {
            v108 = v107 - 7;
            if (__OFADD__(v107 - 8, 1))
              break;
            if (*(_DWORD *)(v105 + 4 * v107) == (_DWORD)v125)
              goto LABEL_84;
            ++v107;
            if (v108 == v106)
              goto LABEL_72;
          }
          __break(1u);
          break;
        }
      }
LABEL_56:
      v94 = v59;
      if (v59 == v90)
      {
        swift_bridgeObjectRelease(v65);
        swift_bridgeObjectRelease_n(v121, 2);
        v38 = v124;
        v61 = v91;
        v60 = v122;
        v75 = v114;
        goto LABEL_53;
      }
    }
    __break(1u);
LABEL_91:
    __break(1u);
LABEL_92:
    __break(1u);
LABEL_93:
    swift_once(&qword_100404198, sub_100191124);
  }
  v75 = *(void (**)(char *, uint64_t))(v130 + 8);
  swift_bridgeObjectRetain(off_100409F60);
LABEL_87:
  ((void (*)(uint64_t, uint64_t, __n128))v75)(v61, a4, v98);
  v119(v120, v131);
  swift_bridgeObjectRelease(v60);
  return 0x300000000;
}

uint64_t Channel.operatingClass.getter(unint64_t a1)
{
  int v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  Swift::String v27;
  void *object;
  Swift::String v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  Swift::String v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;

  v2 = BYTE5(a1);
  if (qword_1004041A0 != -1)
LABEL_69:
    swift_once(&qword_1004041A0, sub_1001919B8);
  v3 = *((_QWORD *)off_100409F68 + 2);
  v4 = a1;
  if (v3)
  {
    v5 = 0;
    v6 = (char *)off_100409F68 + 32;
    while (1)
    {
      v7 = v5 + 1;
      if (__OFADD__(v5, 1))
      {
LABEL_67:
        __break(1u);
LABEL_68:
        __break(1u);
        goto LABEL_69;
      }
      if ((0x801004u >> (8 * BYTE4(a1))) == (0x801004u >> (8 * *v6)))
        break;
LABEL_5:
      v6 += 16;
      ++v5;
      if (v7 == v3)
      {
LABEL_32:
        v4 = a1;
        goto LABEL_33;
      }
    }
    switch(v6[1])
    {
      case 2:
        if (v2 != 2)
          goto LABEL_5;
        break;
      case 3:
        if (v2 != 3)
          goto LABEL_5;
        break;
      case 4:
        if (v2 != 4)
          goto LABEL_5;
        break;
      case 5:
        if (v2 != 5)
          goto LABEL_5;
        break;
      case 6:
        if (v2 != 6)
          goto LABEL_5;
        break;
      default:
        if ((v2 - 2) < 5 || ((a1 >> 40) & 1) == ((v6[1] & 1) == 0))
          goto LABEL_5;
        break;
    }
    v8 = *((_QWORD *)v6 + 1);
    v9 = *(_QWORD *)(v8 + 16);
    v4 = a1;
    if (v9)
    {
      v10 = 0;
      v11 = v8 + 32;
      while (1)
      {
        v12 = *(_QWORD *)(v11 + 16 * v10 + 8);
        v13 = *(_QWORD *)(v12 + 16);
        if (v13)
        {
          if (*(_DWORD *)(v12 + 32) == (_DWORD)a1)
            goto LABEL_64;
          if (v13 != 1)
          {
            if (*(_DWORD *)(v12 + 36) == (_DWORD)a1)
            {
LABEL_64:
              v4 = *(_DWORD *)(v11 + 16 * v10);
              goto LABEL_33;
            }
            if (v13 != 2)
              break;
          }
        }
LABEL_21:
        if (++v10 == v9)
          goto LABEL_32;
      }
      v14 = 10;
      while (1)
      {
        v15 = v14 - 7;
        if (__OFADD__(v14 - 8, 1))
          goto LABEL_68;
        if (*(_DWORD *)(v12 + 4 * v14) == (_DWORD)a1)
          goto LABEL_64;
        ++v14;
        if (v15 == v13)
          goto LABEL_21;
      }
    }
  }
LABEL_33:
  if (qword_100404198 != -1)
    swift_once(&qword_100404198, sub_100191124);
  v16 = *((_QWORD *)off_100409F60 + 2);
  if (!v16)
  {
LABEL_70:
    _StringGuts.grow(_:)(49);
    swift_bridgeObjectRelease(0xE000000000000000);
    v27._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt32, &protocol witness table for UInt32);
    object = v27._object;
    String.append(_:)(v27);
    swift_bridgeObjectRelease(object);
    v29._countAndFlagsBits = 32;
    v29._object = (void *)0xE100000000000000;
    String.append(_:)(v29);
    if (BYTE4(a1))
    {
      if (BYTE4(a1) == 1)
        v30 = 0x7A48472035;
      else
        v30 = 0x7A48472036;
      v31 = 0xE500000000000000;
    }
    else
    {
      v31 = 0xE700000000000000;
      v30 = 0x7A484720342E32;
    }
    v32 = v31;
    String.append(_:)(*(Swift::String *)&v30);
    swift_bridgeObjectRelease(v31);
    v33._countAndFlagsBits = 32;
    v33._object = (void *)0xE100000000000000;
    String.append(_:)(v33);
    v34 = 0x7A484D203031;
    v35 = 0xE600000000000000;
    switch(v2)
    {
      case 2:
        break;
      case 3:
        v34 = 0x7A484D203032;
        break;
      case 4:
        v34 = 0x7A484D203038;
        break;
      case 5:
        v34 = 0x7A484D20303631;
        v35 = 0xE700000000000000;
        break;
      case 6:
        v35 = 0xE700000000000000;
        v34 = 0x7A484D20303233;
        break;
      default:
        v34 = 0x7A484D202D3034;
        v35 = 0xE700000000000000;
        break;
    }
    v36 = v35;
    String.append(_:)(*(Swift::String *)&v34);
    swift_bridgeObjectRelease(v35);
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000029, 0x80000001003676B0, "CoreP2P/Channel.swift", 21, 2, 218, 0);
    __break(1u);
    JUMPOUT(0x10018F570);
  }
  v17 = 0;
  v18 = (char *)off_100409F60 + 32;
  while (1)
  {
    v19 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
      __break(1u);
LABEL_66:
      __break(1u);
      goto LABEL_67;
    }
    v20 = &v18[16 * v17];
    if ((0x801004u >> (8 * BYTE4(a1))) == (0x801004u >> (8 * v20[1])))
      break;
LABEL_37:
    ++v17;
    if (v19 == v16)
      goto LABEL_70;
  }
  v21 = v20[2];
  v22 = *((_QWORD *)v20 + 1);
  switch(v21)
  {
    case 2:
      if (v2 != 2)
        goto LABEL_37;
      goto LABEL_53;
    case 3:
      if (v2 == 3)
        goto LABEL_53;
      goto LABEL_37;
    case 4:
      if (v2 == 4)
        goto LABEL_53;
      goto LABEL_37;
    case 5:
      if (v2 == 5)
        goto LABEL_53;
      goto LABEL_37;
    case 6:
      if (v2 == 6)
        goto LABEL_53;
      goto LABEL_37;
    default:
      if ((v2 - 2) < 5 || ((a1 >> 40) & 1) == ((v21 & 1) == 0))
        goto LABEL_37;
LABEL_53:
      v23 = *(_QWORD *)(v22 + 16);
      if (!v23)
        goto LABEL_37;
      if (*(_DWORD *)(v22 + 32) == v4)
        return v18[16 * v17];
      if (v23 == 1)
        goto LABEL_37;
      if (*(_DWORD *)(v22 + 36) == v4)
        return v18[16 * v17];
      if (v23 == 2)
        goto LABEL_37;
      v24 = 10;
      break;
  }
  while (1)
  {
    v25 = v24 - 7;
    if (__OFADD__(v24 - 8, 1))
      goto LABEL_66;
    if (*(_DWORD *)(v22 + 4 * v24) == v4)
      return v18[16 * v17];
    ++v24;
    if (v25 == v23)
      goto LABEL_37;
  }
}

BOOL Channel.is6GHz.getter(uint64_t a1)
{
  return (a1 & 0xFE00000000) != 0;
}

uint64_t static Channel.< infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return sub_10019265C(a1 & 0xFFFFFFFFFFFFLL, a2 & 0xFFFFFFFFFFFFLL);
}

int *Channel.awdlSocial5GHz.unsafeMutableAddressor()
{
  if (qword_100404170 != -1)
    swift_once(&qword_100404170, sub_1001901DC);
  return &static Channel.awdlSocial5GHz;
}

uint64_t Channel.Band.maximumBandwidth.getter(int a1)
{
  return (a1 + 3);
}

BOOL static Channel.Band.< infix(_:_:)(char a1, char a2)
{
  return ((0x801004u >> (8 * a1)) & 0xFFC) < ((0x801004u >> (8 * a2)) & 0xFFC);
}

uint64_t Channel.Band.rawValue.getter(char a1)
{
  return 0x801004u >> (8 * a1);
}

uint64_t Channel.Band.description.getter(char a1)
{
  if (!a1)
    return 0x7A484720342E32;
  if (a1 == 1)
    return 0x7A48472035;
  return 0x7A48472036;
}

_UNKNOWN **static Channel.Band.allCases.getter()
{
  return &off_1003D7260;
}

BOOL sub_10018F6A8(_BYTE *a1, _BYTE *a2)
{
  return ((0x801004u >> (8 * *a1)) & 0xFFC) == ((0x801004u >> (8 * *a2)) & 0xFFC);
}

unsigned __int8 *sub_10018F6DC@<X0>(unsigned __int8 *result@<X0>, char *a2@<X8>)
{
  int v2;
  char v3;
  char v4;
  char v5;

  v2 = *result;
  if (v2 == 4)
    v3 = 0;
  else
    v3 = 3;
  if (v2 == 16)
    v4 = 1;
  else
    v4 = v3;
  if (v2 == 128)
    v5 = 2;
  else
    v5 = v4;
  *a2 = v5;
  return result;
}

void sub_10018F70C(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = 0x801004u >> (8 * *v1);
}

Swift::Int sub_10018F728()
{
  char *v0;
  char v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(0x801004u >> (8 * v1));
  return Hasher._finalize()();
}

void sub_10018F778()
{
  _BYTE *v0;

  Hasher._combine(_:)(0x801004u >> (8 * *v0));
}

Swift::Int sub_10018F7B0()
{
  char *v0;
  char v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(0x801004u >> (8 * v1));
  return Hasher._finalize()();
}

void sub_10018F7FC(_QWORD *a1@<X8>)
{
  *a1 = &off_1003D7288;
}

uint64_t sub_10018F80C()
{
  _BYTE *v0;
  int v1;
  uint64_t v2;

  v1 = *v0;
  v2 = 0x7A48472035;
  if (v1 != 1)
    v2 = 0x7A48472036;
  if (*v0)
    return v2;
  else
    return 0x7A484720342E32;
}

uint64_t sub_10018F854(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1001935BC();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_10018F8B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1001935BC();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

BOOL sub_10018F8FC(_BYTE *a1, _BYTE *a2)
{
  return ((0x801004u >> (8 * *a1)) & 0xFFC) < ((0x801004u >> (8 * *a2)) & 0xFFC);
}

BOOL sub_10018F930(_BYTE *a1, _BYTE *a2)
{
  return ((0x801004u >> (8 * *a2)) & 0xFFC) >= ((0x801004u >> (8 * *a1)) & 0xFFC);
}

BOOL sub_10018F964(_BYTE *a1, _BYTE *a2)
{
  return ((0x801004u >> (8 * *a1)) & 0xFFC) >= ((0x801004u >> (8 * *a2)) & 0xFFC);
}

BOOL sub_10018F998(_BYTE *a1, _BYTE *a2)
{
  return ((0x801004u >> (8 * *a2)) & 0xFFC) < ((0x801004u >> (8 * *a1)) & 0xFFC);
}

BOOL Optional<A>.is5GHz.getter(uint64_t a1)
{
  return (a1 & 0xFF00000000) == (_QWORD)&_mh_execute_header;
}

uint64_t sub_10018F9E0()
{
  uint64_t result;

  result = sub_100016858((uint64_t)&off_1003D6D78);
  qword_100409F40 = result;
  return result;
}

void sub_10018FA04()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  unsigned __int8 v3;
  int v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  char *v11;
  char *v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  Swift::String v41;
  Swift::String v42;
  void *object;
  Swift::String v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  Swift::String v48;
  uint64_t v49;
  uint64_t v50;
  Swift::String v51;
  uint64_t v52;
  unint64_t v53;
  Swift::String v54;
  Swift::String v55;
  void *v56;
  Swift::String v57;
  Swift::String v58;
  Swift::String v59;
  uint64_t v60;
  unint64_t v61;
  Swift::String v62;
  Swift::String v63;
  void *v64;
  _BYTE v65[12];
  _BYTE v66[12];

  v1 = *(unsigned __int8 *)(v0 + 5);
  if ((v1 - 2) < 5)
    return;
  v2 = v0;
  v3 = (v1 & 1) == 0;
  v4 = *(unsigned __int8 *)(v0 + 4);
  if (v4 == 2)
  {
    if (qword_1004041A0 != -1)
      goto LABEL_78;
    goto LABEL_4;
  }
  if (qword_100404198 != -1)
    swift_once(&qword_100404198, sub_100191124);
  v8 = *((_QWORD *)off_100409F60 + 2);
  if (!v8)
  {
LABEL_79:
    *(_DWORD *)&v65[8] = 0;
    _StringGuts.grow(_:)(58);
    v41._object = (void *)0x8000000100367700;
    v41._countAndFlagsBits = 0xD00000000000002CLL;
    String.append(_:)(v41);
    *(_QWORD *)v65 = *(unsigned int *)v2;
    v42._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt32, &protocol witness table for UInt32);
    object = v42._object;
    String.append(_:)(v42);
    swift_bridgeObjectRelease(object);
    v44._countAndFlagsBits = 32;
    v44._object = (void *)0xE100000000000000;
    String.append(_:)(v44);
    if (v4)
      v45 = 0x7A48472035;
    else
      v45 = 0x7A484720342E32;
    if (v4)
      v46 = 0xE500000000000000;
    else
      v46 = 0xE700000000000000;
    v47 = v46;
    String.append(_:)(*(Swift::String *)&v45);
    swift_bridgeObjectRelease(v46);
    v48._countAndFlagsBits = 32;
    v48._object = (void *)0xE100000000000000;
    String.append(_:)(v48);
    v49 = 0x7A484D203031;
    v2 = 0xE600000000000000;
    switch(v1)
    {
      case 2:
        break;
      case 3:
        v49 = 0x7A484D203032;
        break;
      case 4:
        v49 = 0x7A484D203038;
        break;
      case 5:
        v49 = 0x7A484D20303631;
        v2 = 0xE700000000000000;
        break;
      case 6:
        v2 = 0xE700000000000000;
        v49 = 0x7A484D20303233;
        break;
      default:
        if ((v1 & 1) != 0)
          v49 = 0x7A484D202B3034;
        else
          v49 = 0x7A484D202D3034;
        v2 = 0xE700000000000000;
        break;
    }
    v50 = v2;
    String.append(_:)(*(Swift::String *)&v49);
    swift_bridgeObjectRelease(v2);
    v51._countAndFlagsBits = 544370464;
    v51._object = (void *)0xE400000000000000;
    String.append(_:)(v51);
    if ((v1 & 1) != 0)
      v52 = 0x7A484D202D3034;
    else
      v52 = 0x7A484D202B3034;
    v53 = 0xE700000000000000;
    String.append(_:)(*(Swift::String *)&v52);
    swift_bridgeObjectRelease(0xE700000000000000);
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, *(_QWORD *)&v65[4], 0xE000000000000000, "CoreP2P/Channel.swift", 21, 2, 400, 0);
    goto LABEL_98;
  }
  v9 = 0;
  if (v4)
    v10 = 16;
  else
    v10 = 4;
  v11 = (char *)off_100409F60 + 32;
  do
  {
    v12 = &v11[16 * v9];
    v13 = v12[2];
    v14 = *((_QWORD *)v12 + 1);
    v15 = v12[1];
    if (v15)
    {
      if (v15 != 1 || v10 != 16)
        goto LABEL_13;
    }
    else if (v10 != 4)
    {
      goto LABEL_13;
    }
    if ((v13 - 2) >= 5 && (v1 & 1) != ((v13 & 1) == 0))
    {
      v16 = *(_QWORD *)(v14 + 16);
      if (v16)
      {
        v17 = *(_DWORD *)v2;
        if (*(_DWORD *)(v14 + 32) == *(_DWORD *)v2)
          return;
        if (v16 != 1)
        {
          if (*(_DWORD *)(v14 + 36) == v17)
            return;
          if (v16 != 2)
          {
            v18 = 10;
            do
            {
              v19 = v18 - 7;
              if (__OFADD__(v18 - 8, 1))
                goto LABEL_77;
              if (*(_DWORD *)(v14 + 4 * v18) == v17)
                return;
              ++v18;
            }
            while (v19 != v16);
          }
        }
      }
    }
LABEL_13:
    ++v9;
  }
  while (v9 != v8);
  v20 = 0;
  while (1)
  {
    v21 = &v11[16 * v20];
    v22 = v21[2];
    v23 = *((_QWORD *)v21 + 1);
    v24 = v21[1];
    if (v24)
      break;
    if (v10 == 4)
      goto LABEL_38;
LABEL_32:
    if (++v20 == v8)
      goto LABEL_79;
  }
  if (v24 != 1 || v10 != 16)
    goto LABEL_32;
LABEL_38:
  v32 = (v22 - 2) >= 5;
  v25 = v22 & 1;
  if (!v32 || (v1 & 1) == v25)
    goto LABEL_32;
  v27 = *(_QWORD *)(v23 + 16);
  if (!v27)
    goto LABEL_32;
  v28 = *(_DWORD *)v2;
  if (*(_DWORD *)(v23 + 32) == *(_DWORD *)v2)
    goto LABEL_73;
  if (v27 == 1)
    goto LABEL_32;
  if (*(_DWORD *)(v23 + 36) == v28)
    goto LABEL_73;
  if (v27 == 2)
    goto LABEL_32;
  v29 = 10;
  while (1)
  {
    v30 = v29 - 7;
    if (__OFADD__(v29 - 8, 1))
      break;
    if (*(_DWORD *)(v23 + 4 * v29) == v28)
      goto LABEL_73;
    ++v29;
    if (v30 == v27)
      goto LABEL_32;
  }
  while (2)
  {
    __break(1u);
LABEL_77:
    __break(1u);
LABEL_78:
    swift_once(&qword_1004041A0, sub_1001919B8);
LABEL_4:
    v5 = *((_QWORD *)off_100409F68 + 2);
    if (!v5)
      goto LABEL_100;
    v6 = (char *)off_100409F68 + 32;
    v64 = off_100409F68;
    swift_bridgeObjectRetain_n(off_100409F68, 2);
    v7 = 0;
    while (1)
    {
      v31 = &v6[16 * v7];
      v3 = v31[1];
      v32 = *v31 >= 2u && (v3 - 2) >= 5u;
      if (v32)
      {
        v33 = *((_QWORD *)v31 + 1);
        v34 = *(_QWORD *)(v33 + 16);
        if (v34)
          break;
      }
LABEL_53:
      if (++v7 == v5)
      {
        while (1)
        {
          swift_bridgeObjectRelease_n(v64, 2);
LABEL_100:
          *(_DWORD *)&v66[8] = 0;
          _StringGuts.grow(_:)(58);
          v54._object = (void *)0x8000000100367700;
          v54._countAndFlagsBits = 0xD00000000000002CLL;
          String.append(_:)(v54);
          *(_QWORD *)v66 = *(unsigned int *)v2;
          v55._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt32, &protocol witness table for UInt32);
          v56 = v55._object;
          String.append(_:)(v55);
          swift_bridgeObjectRelease(v56);
          v57._countAndFlagsBits = 32;
          v57._object = (void *)0xE100000000000000;
          String.append(_:)(v57);
          v58._countAndFlagsBits = 0x7A48472036;
          v58._object = (void *)0xE500000000000000;
          String.append(_:)(v58);
          v59._countAndFlagsBits = 32;
          v59._object = (void *)0xE100000000000000;
          String.append(_:)(v59);
          if ((v1 & 1) != 0)
            v60 = 0x7A484D202B3034;
          else
            v60 = 0x7A484D202D3034;
          if ((v1 & 1) != 0)
            v2 = 0x7A484D202D3034;
          else
            v2 = 0x7A484D202B3034;
          v61 = 0xE700000000000000;
          String.append(_:)(*(Swift::String *)&v60);
          swift_bridgeObjectRelease(0xE700000000000000);
          v62._countAndFlagsBits = 544370464;
          v62._object = (void *)0xE400000000000000;
          String.append(_:)(v62);
          v63._countAndFlagsBits = v2;
          v63._object = (void *)0xE700000000000000;
          String.append(_:)(v63);
          swift_bridgeObjectRelease(0xE700000000000000);
          _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, *(_QWORD *)&v66[4], 0xE000000000000000, "CoreP2P/Channel.swift", 21, 2, 390, 0);
LABEL_98:
          __break(1u);
        }
      }
    }
    v35 = *(_DWORD *)v2;
    swift_bridgeObjectRetain_n(*((_QWORD *)v31 + 1), 2);
    v36 = 0;
    while (2)
    {
      v37 = *(_QWORD *)(v33 + 32 + 16 * v36 + 8);
      v38 = *(_QWORD *)(v37 + 16);
      if (!v38)
        goto LABEL_61;
      if (*(_DWORD *)(v37 + 32) == v35)
        goto LABEL_72;
      if (v38 == 1)
      {
LABEL_61:
        if (++v36 == v34)
        {
          swift_bridgeObjectRelease_n(v33, 2);
          goto LABEL_53;
        }
        continue;
      }
      break;
    }
    if (*(_DWORD *)(v37 + 36) != v35)
    {
      if (v38 != 2)
      {
        v39 = 10;
        while (1)
        {
          v40 = v39 - 7;
          if (__OFADD__(v39 - 8, 1))
            break;
          if (*(_DWORD *)(v37 + 4 * v39) == v35)
            goto LABEL_72;
          ++v39;
          if (v40 == v38)
            goto LABEL_61;
        }
        __break(1u);
        continue;
      }
      goto LABEL_61;
    }
    break;
  }
LABEL_72:
  swift_bridgeObjectRelease(v33);
  swift_bridgeObjectRelease(v33);
  swift_bridgeObjectRelease_n(v64, 2);
LABEL_73:
  *(_BYTE *)(v2 + 5) = v3;
}

unint64_t Channel.init(_:maximumBandwidthOnBand:)(unsigned int a1, unsigned __int8 a2)
{
  unsigned __int8 v5;

  v5 = a2 + 3;
  sub_10018FA04();
  return a1 | ((unint64_t)a2 << 32) | ((unint64_t)v5 << 40);
}

void *sub_100190108()
{
  void *result;

  result = (void *)sub_100016858((uint64_t)&off_1003D30E0);
  off_100409F48 = result;
  return result;
}

void *sub_10019012C()
{
  void *result;

  result = (void *)sub_100016858((uint64_t)&off_1003D3138);
  off_100409F50 = result;
  return result;
}

void *sub_100190150()
{
  void *result;

  result = (void *)sub_100016858((uint64_t)&off_1003D31C8);
  off_100409F58 = result;
  return result;
}

unint64_t sub_100190174(uint64_t a1)
{
  return sub_100190300(a1, &static Channel.awdlSocial2GHz, &byte_10041058C, &byte_10041058D);
}

unint64_t static Channel.awdlSocial2GHz.getter()
{
  if (qword_100404168 != -1)
    swift_once(&qword_100404168, sub_100190174);
  return static Channel.awdlSocial2GHz | ((unint64_t)byte_10041058C << 32) | ((unint64_t)byte_10041058D << 40);
}

unint64_t sub_1001901DC(uint64_t a1)
{
  return sub_1001903C4(a1, &static Channel.awdlSocial5GHz, &byte_100410594, &byte_100410595);
}

unint64_t static Channel.awdlSocial5GHz.getter()
{
  if (qword_100404170 != -1)
    swift_once(&qword_100404170, sub_1001901DC);
  return static Channel.awdlSocial5GHz | ((unint64_t)byte_100410594 << 32) | ((unint64_t)byte_100410595 << 40);
}

unint64_t sub_100190244(uint64_t a1)
{
  return sub_1001904C8(a1, &static Channel.awdlAlternateSocial5GHz, &byte_10041059C, &byte_10041059D);
}

int *Channel.awdlAlternateSocial5GHz.unsafeMutableAddressor()
{
  if (qword_100404178 != -1)
    swift_once(&qword_100404178, sub_100190244);
  return &static Channel.awdlAlternateSocial5GHz;
}

unint64_t static Channel.awdlAlternateSocial5GHz.getter()
{
  if (qword_100404178 != -1)
    swift_once(&qword_100404178, sub_100190244);
  return static Channel.awdlAlternateSocial5GHz | ((unint64_t)byte_10041059C << 32) | ((unint64_t)byte_10041059D << 40);
}

unint64_t sub_1001902EC(uint64_t a1)
{
  return sub_100190300(a1, &static Channel.nanPrimary, &byte_1004105A4, &byte_1004105A5);
}

unint64_t sub_100190300(uint64_t a1, _DWORD *a2, _BYTE *a3, _BYTE *a4)
{
  unint64_t result;

  result = sub_100192784(6u);
  if ((result & 0xFF00000000) == 0x300000000)
  {
    __break(1u);
  }
  else
  {
    *a2 = result;
    *a3 = BYTE4(result);
    *a4 = BYTE5(result);
  }
  return result;
}

unint64_t static Channel.nanPrimary.getter()
{
  if (qword_100404180 != -1)
    swift_once(&qword_100404180, sub_1001902EC);
  return static Channel.nanPrimary | ((unint64_t)byte_1004105A4 << 32) | ((unint64_t)byte_1004105A5 << 40);
}

unint64_t sub_1001903B0(uint64_t a1)
{
  return sub_1001903C4(a1, &static Channel.nanSecondary, &byte_1004105AC, &byte_1004105AD);
}

unint64_t sub_1001903C4(uint64_t a1, _DWORD *a2, _BYTE *a3, _BYTE *a4)
{
  unint64_t result;

  result = sub_100192784(0x95u);
  if ((result & 0xFF00000000) == 0x300000000)
  {
    __break(1u);
  }
  else
  {
    *a2 = result;
    *a3 = BYTE4(result);
    *a4 = BYTE5(result);
  }
  return result;
}

int *Channel.nanSecondary.unsafeMutableAddressor()
{
  if (qword_100404188 != -1)
    swift_once(&qword_100404188, sub_1001903B0);
  return &static Channel.nanSecondary;
}

unint64_t static Channel.nanSecondary.getter()
{
  if (qword_100404188 != -1)
    swift_once(&qword_100404188, sub_1001903B0);
  return static Channel.nanSecondary | ((unint64_t)byte_1004105AC << 32) | ((unint64_t)byte_1004105AD << 40);
}

unint64_t sub_1001904B4(uint64_t a1)
{
  return sub_1001904C8(a1, &static Channel.nanAlternateSecondary, &byte_1004105B4, &byte_1004105B5);
}

unint64_t sub_1001904C8(uint64_t a1, _DWORD *a2, _BYTE *a3, _BYTE *a4)
{
  unint64_t result;

  result = sub_100192784(0x2Cu);
  if ((result & 0xFF00000000) == 0x300000000)
  {
    __break(1u);
  }
  else
  {
    *a2 = result;
    *a3 = BYTE4(result);
    *a4 = BYTE5(result);
  }
  return result;
}

int *Channel.nanAlternateSecondary.unsafeMutableAddressor()
{
  if (qword_100404190 != -1)
    swift_once(&qword_100404190, sub_1001904B4);
  return &static Channel.nanAlternateSecondary;
}

unint64_t static Channel.nanAlternateSecondary.getter()
{
  if (qword_100404190 != -1)
    swift_once(&qword_100404190, sub_1001904B4);
  return static Channel.nanAlternateSecondary | ((unint64_t)byte_1004105B4 << 32) | ((unint64_t)byte_1004105B5 << 40);
}

uint64_t Channel.description.getter(uint64_t a1)
{
  unsigned __int8 v1;
  int v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;

  v1 = BYTE5(a1);
  v7 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt32, &protocol witness table for UInt32);
  v2 = v1 - 2;
  v3 = 0xE200000000000000;
  v4 = 11051;
  switch(v2)
  {
    case 0:
    case 1:
      v4 = 0;
      v3 = 0xE000000000000000;
      break;
    case 2:
      break;
    case 3:
      v4 = 30840;
      break;
    case 4:
      v4 = 31097;
      break;
    default:
      v4 = 45;
      v3 = 0xE100000000000000;
      break;
  }
  v5 = v3;
  String.append(_:)(*(Swift::String *)&v4);
  swift_bridgeObjectRelease(v3);
  return v7;
}

void Channel.hash(into:)(int a1, unint64_t a2)
{
  Swift::UInt v3;

  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(0x801004u >> ((a2 >> 29) & 0xF8));
  switch(BYTE5(a2))
  {
    case 2:
      v3 = 0;
      goto LABEL_8;
    case 3:
      v3 = 1;
      goto LABEL_8;
    case 4:
      v3 = 3;
      goto LABEL_8;
    case 5:
      v3 = 4;
      goto LABEL_8;
    case 6:
      v3 = 5;
LABEL_8:
      Hasher._combine(_:)(v3);
      break;
    default:
      Hasher._combine(_:)(2uLL);
      Hasher._combine(_:)(BYTE5(a2) & 1);
      break;
  }
}

uint64_t sub_100190718()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 1684955490;
  if (*v0 != 1)
    v1 = 0x74646977646E6162;
  if (*v0)
    return v1;
  else
    return 0x6C656E6E616863;
}

uint64_t sub_100190770@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10019346C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100190794(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001930EC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001907BC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001930EC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t Channel.encode(to:)(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v15;
  char v16;
  char v17;
  char v18;
  char v19;
  char v20;

  v5 = sub_100012C44(&qword_100409F80);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin();
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10003259C(a1, v9);
  v11 = sub_1001930EC();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for Channel.CodingKeys, &type metadata for Channel.CodingKeys, v11, v9, v10);
  v20 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(a2, &v20, v5);
  if (!v2)
  {
    v19 = BYTE4(a2);
    v18 = 1;
    v12 = sub_100193130();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v19, &v18, v5, &type metadata for Channel.Band, v12);
    v17 = BYTE5(a2);
    v16 = 2;
    v13 = sub_100193174();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v17, &v16, v5, &type metadata for Bandwidth, v13);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

Swift::Int Channel.hashValue.getter(unint64_t a1)
{
  Swift::UInt v2;
  _QWORD v4[9];

  Hasher.init(_seed:)(v4);
  Hasher._combine(_:)(a1);
  Hasher._combine(_:)(0x801004u >> ((a1 >> 29) & 0xF8));
  switch(BYTE5(a1))
  {
    case 2:
      v2 = 0;
      goto LABEL_8;
    case 3:
      v2 = 1;
      goto LABEL_8;
    case 4:
      v2 = 3;
      goto LABEL_8;
    case 5:
      v2 = 4;
      goto LABEL_8;
    case 6:
      v2 = 5;
LABEL_8:
      Hasher._combine(_:)(v2);
      break;
    default:
      Hasher._combine(_:)(2uLL);
      Hasher._combine(_:)(BYTE5(a1) & 1);
      break;
  }
  return Hasher._finalize()();
}

uint64_t Channel.init(from:)(_QWORD *a1)
{
  return sub_1001929E8(a1) & 0xFFFFFFFFFFFFLL;
}

Swift::Int sub_100190A48()
{
  unsigned int *v0;

  return Channel.hashValue.getter(*v0 | ((unint64_t)*((unsigned __int8 *)v0 + 4) << 32) | ((unint64_t)*((unsigned __int8 *)v0 + 5) << 40));
}

void sub_100190A60(int a1)
{
  unsigned int *v1;

  Channel.hash(into:)(a1, *v1 | ((unint64_t)*((unsigned __int8 *)v1 + 4) << 32) | ((unint64_t)*((unsigned __int8 *)v1 + 5) << 40));
}

Swift::Int sub_100190A78()
{
  uint64_t v0;
  Swift::UInt32 v1;
  char v2;
  int v3;
  Swift::UInt v4;
  _QWORD v6[9];

  v1 = *(_DWORD *)v0;
  v2 = *(_BYTE *)(v0 + 4);
  v3 = *(unsigned __int8 *)(v0 + 5);
  Hasher.init(_seed:)(v6);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(0x801004u >> (8 * v2));
  switch(v3)
  {
    case 2:
      v4 = 0;
      goto LABEL_8;
    case 3:
      v4 = 1;
      goto LABEL_8;
    case 4:
      v4 = 3;
      goto LABEL_8;
    case 5:
      v4 = 4;
      goto LABEL_8;
    case 6:
      v4 = 5;
LABEL_8:
      Hasher._combine(_:)(v4);
      break;
    default:
      Hasher._combine(_:)(2uLL);
      Hasher._combine(_:)(v3 & 1);
      break;
  }
  return Hasher._finalize()();
}

uint64_t sub_100190B60()
{
  unsigned int *v0;

  return Channel.description.getter(*v0 | ((unint64_t)*((unsigned __int8 *)v0 + 4) << 32) | ((unint64_t)*((unsigned __int8 *)v0 + 5) << 40));
}

uint64_t sub_100190B78@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = sub_1001929E8(a1);
  if (!v2)
  {
    *(_DWORD *)a2 = result;
    *(_BYTE *)(a2 + 4) = BYTE4(result);
    *(_BYTE *)(a2 + 5) = BYTE5(result);
  }
  return result;
}

uint64_t sub_100190BB0(_QWORD *a1)
{
  unsigned int *v1;

  return Channel.encode(to:)(a1, *v1 | ((unint64_t)*((unsigned __int8 *)v1 + 4) << 32) | ((unint64_t)*((unsigned __int8 *)v1 + 5) << 40));
}

uint64_t sub_100190BD8(unsigned int *a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  return sub_100190CA4(a1, a2, a3, a4, sub_10019265C);
}

BOOL sub_100190BE4(unsigned int *a1, unsigned int *a2)
{
  return (sub_10019265C(*a2 | ((unint64_t)*((unsigned __int8 *)a2 + 4) << 32) | ((unint64_t)*((unsigned __int8 *)a2 + 5) << 40), *a1 | ((unint64_t)*((unsigned __int8 *)a1 + 4) << 32) | ((unint64_t)*((unsigned __int8 *)a1 + 5) << 40)) & 1) == 0;
}

BOOL sub_100190C28(unsigned int *a1, unsigned int *a2)
{
  return (sub_10019265C(*a1 | ((unint64_t)*((unsigned __int8 *)a1 + 4) << 32) | ((unint64_t)*((unsigned __int8 *)a1 + 5) << 40), *a2 | ((unint64_t)*((unsigned __int8 *)a2 + 4) << 32) | ((unint64_t)*((unsigned __int8 *)a2 + 5) << 40)) & 1) == 0;
}

uint64_t sub_100190C6C(unsigned int *a1, unsigned int *a2)
{
  return sub_10019265C(*a2 | ((unint64_t)*((unsigned __int8 *)a2 + 4) << 32) | ((unint64_t)*((unsigned __int8 *)a2 + 5) << 40), *a1 | ((unint64_t)*((unsigned __int8 *)a1 + 4) << 32) | ((unint64_t)*((unsigned __int8 *)a1 + 5) << 40));
}

uint64_t sub_100190C98(unsigned int *a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  return sub_100190CA4(a1, a2, a3, a4, sub_100192574);
}

uint64_t sub_100190CA4(unsigned int *a1, unsigned int *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(unint64_t, unint64_t))
{
  return a5(*a1 | ((unint64_t)*((unsigned __int8 *)a1 + 4) << 32) | ((unint64_t)*((unsigned __int8 *)a1 + 5) << 40), *a2 | ((unint64_t)*((unsigned __int8 *)a2 + 4) << 32) | ((unint64_t)*((unsigned __int8 *)a2 + 5) << 40));
}

uint64_t Optional<A>.description.getter(uint64_t a1)
{
  if ((a1 & 0xFF00000000) == 0x300000000)
    return 48;
  else
    return Channel.description.getter(a1 & 0xFFFFFFFFFFFFLL);
}

BOOL Optional<A>.is2_4GHz.getter(uint64_t a1)
{
  return (a1 & 0x700000000) == 0 && (a1 & 0xFF00000000) != 0x300000000;
}

BOOL Optional<A>.is6GHz.getter(uint64_t a1)
{
  return (a1 & 0xFE00000000) != 0 && (a1 & 0xFF00000000) != 0x300000000;
}

BOOL Optional<A>.isDFS.getter(uint64_t a1)
{
  unsigned int v2;

  if ((a1 & 0xFF00000000) == 0x300000000)
    return 0;
  v2 = a1;
  if (qword_100404148 != -1)
    swift_once(&qword_100404148, sub_10018F9E0);
  return sub_10009B344(v2, qword_100409F40);
}

id Optional<A>.apiChannel.getter(uint64_t a1)
{
  uint64_t v2;

  if ((a1 & 0xFF00000000) != 0x300000000)
    return Channel.apiChannel.getter(a1 & 0xFFFFFFFFFFFFLL);
  LOBYTE(v2) = 0;
  return objc_msgSend(objc_allocWithZone((Class)WiFiChannel), "initWithChannelNumber:bandwidth:is2_4GHz:is5GHz:is6GHz:isDFS:extensionChannelAbove:", 0, 1, 0, 0, 0, 0, v2);
}

id Channel.apiChannel.getter(unint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v2 = a1 >> 40;
  if ((BYTE5(a1) - 2) > 4u)
    v3 = 2;
  else
    v3 = qword_10034F618[(char)(BYTE5(a1) - 2)];
  if (qword_100404148 != -1)
    swift_once(&qword_100404148, sub_10018F9E0);
  LOBYTE(v5) = v2 & ((v2 - 7) < 0xFBu);
  return objc_msgSend(objc_allocWithZone((Class)WiFiChannel), "initWithChannelNumber:bandwidth:is2_4GHz:is5GHz:is6GHz:isDFS:extensionChannelAbove:", a1, v3, (a1 & 0x700000000) == 0, HIDWORD(a1) & 1, (a1 & 0x700000000) == 0x200000000, sub_10009B344(a1, qword_100409F40), v5);
}

unint64_t sub_100190F04@<X0>(unsigned int *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result;

  result = sub_100192784(*a1);
  *(_DWORD *)a2 = result;
  *(_WORD *)(a2 + 4) = WORD2(result);
  return result;
}

uint64_t sub_100190F34()
{
  unsigned int *v0;
  unint64_t v1;

  v1 = *v0 | ((unint64_t)*((unsigned __int16 *)v0 + 2) << 32);
  if ((v1 & 0xFF00000000) == 0x300000000)
    return 48;
  else
    return Channel.description.getter(v1);
}

unint64_t Channel.init(apiChannel:)(void *a1)
{
  unsigned int v2;
  int v3;
  unsigned __int8 v4;

  v2 = objc_msgSend(a1, "channelNumber");
  v3 = 2;
  switch((unint64_t)objc_msgSend(a1, "bandwidth"))
  {
    case 0uLL:
      goto LABEL_7;
    case 1uLL:
      v3 = 3;
      goto LABEL_7;
    case 2uLL:
      v3 = objc_msgSend(a1, "extensionChannelAbove");
      goto LABEL_7;
    case 3uLL:
      v3 = 4;
      goto LABEL_7;
    case 4uLL:
      v3 = 5;
      goto LABEL_7;
    case 5uLL:
      v3 = 6;
LABEL_7:
      if (!objc_msgSend(a1, "is2_4GHz")
        || (objc_msgSend(a1, "is5GHz") & 1) != 0
        || objc_msgSend(a1, "is6GHz"))
      {
        if ((objc_msgSend(a1, "is2_4GHz") & 1) != 0
          || !objc_msgSend(a1, "is5GHz")
          || objc_msgSend(a1, "is6GHz"))
        {
          if ((objc_msgSend(a1, "is2_4GHz") & 1) != 0
            || (objc_msgSend(a1, "is5GHz") & 1) != 0
            || (objc_msgSend(a1, "is6GHz") & 1) == 0)
          {
            goto LABEL_21;
          }
          v4 = 2;
        }
        else
        {
          v4 = 1;
        }
      }
      else
      {
        v4 = 0;
      }
      if ((_s7CoreP2P7ChannelV7isValid7channel2on4withSbs6UInt32V_AC4BandOAA9BandwidthOtFZ_0(v2, v4, v3) & 1) != 0)
      {
        sub_10018FA04();

        return v2 | ((unint64_t)v4 << 32) | ((unint64_t)v3 << 40);
      }
LABEL_21:

      return 0x300000000;
    default:
      goto LABEL_21;
  }
}

_QWORD *sub_100191124()
{
  _QWORD *result;

  result = sub_100191140();
  off_100409F60 = result;
  return result;
}

_QWORD *sub_100191140()
{
  _QWORD *v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  int64_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  int64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  int64_t v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  int64_t v27;
  _QWORD *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  int64_t v34;
  _QWORD *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  int64_t v41;
  _QWORD *v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  int64_t v48;
  _QWORD *v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  _QWORD *v60;
  int64_t v61;
  _QWORD *v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  _QWORD *v67;
  int64_t v68;
  _QWORD *v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  _QWORD *v74;
  int64_t v75;
  _QWORD *v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  _QWORD *v81;
  int64_t v82;
  _QWORD *v83;
  _QWORD *v84;

  v0 = sub_1000B1814(0, 1, 1, _swiftEmptyArrayStorage);
  v2 = v0[2];
  v1 = v0[3];
  v3 = v1 >> 1;
  v4 = v2 + 1;
  if (v1 >> 1 <= v2)
  {
    v0 = sub_1000B1814((_QWORD *)(v1 > 1), v2 + 1, 1, v0);
    v1 = v0[3];
    v3 = v1 >> 1;
  }
  v0[2] = v4;
  v5 = &v0[2 * v2];
  *((_WORD *)v5 + 16) = 81;
  *((_BYTE *)v5 + 34) = 3;
  v5[5] = &off_1003D4258;
  v6 = v2 + 2;
  if (v3 <= v4)
    v0 = sub_1000B1814((_QWORD *)(v1 > 1), v6, 1, v0);
  v0[2] = v6;
  v7 = &v0[2 * v4];
  *((_WORD *)v7 + 16) = 82;
  *((_BYTE *)v7 + 34) = 3;
  v7[5] = &off_1003D42B0;
  v9 = v0[2];
  v8 = v0[3];
  v10 = v8 >> 1;
  v11 = v9 + 1;
  if (v8 >> 1 <= v9)
  {
    v0 = sub_1000B1814((_QWORD *)(v8 > 1), v9 + 1, 1, v0);
    v8 = v0[3];
    v10 = v8 >> 1;
  }
  v0[2] = v11;
  v12 = &v0[2 * v9];
  *((_WORD *)v12 + 16) = 83;
  *((_BYTE *)v12 + 34) = 0;
  v12[5] = &off_1003D42D8;
  v13 = v9 + 2;
  if (v10 <= v11)
    v0 = sub_1000B1814((_QWORD *)(v8 > 1), v13, 1, v0);
  v0[2] = v13;
  v14 = &v0[2 * v11];
  *((_WORD *)v14 + 16) = 84;
  *((_BYTE *)v14 + 34) = 1;
  v14[5] = &off_1003D4320;
  v16 = v0[2];
  v15 = v0[3];
  v17 = v15 >> 1;
  v18 = v16 + 1;
  if (v15 >> 1 <= v16)
  {
    v0 = sub_1000B1814((_QWORD *)(v15 > 1), v16 + 1, 1, v0);
    v15 = v0[3];
    v17 = v15 >> 1;
  }
  v0[2] = v18;
  v19 = &v0[2 * v16];
  *((_WORD *)v19 + 16) = 371;
  *((_BYTE *)v19 + 34) = 3;
  v19[5] = &off_1003D4368;
  v20 = v16 + 2;
  if (v17 <= v18)
    v0 = sub_1000B1814((_QWORD *)(v15 > 1), v20, 1, v0);
  v0[2] = v20;
  v21 = &v0[2 * v18];
  *((_WORD *)v21 + 16) = 372;
  *((_BYTE *)v21 + 34) = 0;
  v21[5] = &off_1003D4398;
  v23 = v0[2];
  v22 = v0[3];
  v24 = v22 >> 1;
  v25 = v23 + 1;
  if (v22 >> 1 <= v23)
  {
    v0 = sub_1000B1814((_QWORD *)(v22 > 1), v23 + 1, 1, v0);
    v22 = v0[3];
    v24 = v22 >> 1;
  }
  v0[2] = v25;
  v26 = &v0[2 * v23];
  *((_WORD *)v26 + 16) = 373;
  *((_BYTE *)v26 + 34) = 1;
  v26[5] = &off_1003D43C0;
  v27 = v23 + 2;
  if (v24 <= v25)
    v0 = sub_1000B1814((_QWORD *)(v22 > 1), v27, 1, v0);
  v0[2] = v27;
  v28 = &v0[2 * v25];
  *((_WORD *)v28 + 16) = 374;
  *((_BYTE *)v28 + 34) = 3;
  v28[5] = &off_1003D43E8;
  v30 = v0[2];
  v29 = v0[3];
  v31 = v29 >> 1;
  v32 = v30 + 1;
  if (v29 >> 1 <= v30)
  {
    v0 = sub_1000B1814((_QWORD *)(v29 > 1), v30 + 1, 1, v0);
    v29 = v0[3];
    v31 = v29 >> 1;
  }
  v0[2] = v32;
  v33 = &v0[2 * v30];
  *((_WORD *)v33 + 16) = 375;
  *((_BYTE *)v33 + 34) = 0;
  v33[5] = &off_1003D4418;
  v34 = v30 + 2;
  if (v31 <= v32)
    v0 = sub_1000B1814((_QWORD *)(v29 > 1), v34, 1, v0);
  v0[2] = v34;
  v35 = &v0[2 * v32];
  *((_WORD *)v35 + 16) = 376;
  *((_BYTE *)v35 + 34) = 1;
  v35[5] = &off_1003D4440;
  v37 = v0[2];
  v36 = v0[3];
  v38 = v36 >> 1;
  v39 = v37 + 1;
  if (v36 >> 1 <= v37)
  {
    v0 = sub_1000B1814((_QWORD *)(v36 > 1), v37 + 1, 1, v0);
    v36 = v0[3];
    v38 = v36 >> 1;
  }
  v0[2] = v39;
  v40 = &v0[2 * v37];
  *((_WORD *)v40 + 16) = 377;
  *((_BYTE *)v40 + 34) = 3;
  v40[5] = &off_1003D4468;
  v41 = v37 + 2;
  if (v38 <= v39)
    v0 = sub_1000B1814((_QWORD *)(v36 > 1), v41, 1, v0);
  v0[2] = v41;
  v42 = &v0[2 * v39];
  *((_WORD *)v42 + 16) = 378;
  *((_BYTE *)v42 + 34) = 0;
  v42[5] = &off_1003D44B8;
  v44 = v0[2];
  v43 = v0[3];
  v45 = v43 >> 1;
  v46 = v44 + 1;
  if (v43 >> 1 <= v44)
  {
    v0 = sub_1000B1814((_QWORD *)(v43 > 1), v44 + 1, 1, v0);
    v43 = v0[3];
    v45 = v43 >> 1;
  }
  v0[2] = v46;
  v47 = &v0[2 * v44];
  *((_WORD *)v47 + 16) = 379;
  *((_BYTE *)v47 + 34) = 1;
  v47[5] = &off_1003D44F0;
  v48 = v44 + 2;
  if (v45 <= v46)
    v0 = sub_1000B1814((_QWORD *)(v43 > 1), v48, 1, v0);
  v0[2] = v48;
  v49 = &v0[2 * v46];
  *((_WORD *)v49 + 16) = 380;
  *((_BYTE *)v49 + 34) = 3;
  v49[5] = &off_1003D4528;
  v51 = v0[2];
  v50 = v0[3];
  v52 = v50 >> 1;
  v53 = v51 + 1;
  if (v50 >> 1 <= v51)
  {
    v0 = sub_1000B1814((_QWORD *)(v50 > 1), v51 + 1, 1, v0);
    v50 = v0[3];
    v52 = v50 >> 1;
  }
  v0[2] = v53;
  v54 = &v0[2 * v51];
  *((_WORD *)v54 + 16) = 381;
  *((_BYTE *)v54 + 34) = 3;
  v54[5] = &off_1003D4558;
  if (v52 <= v53)
    v0 = sub_1000B1814((_QWORD *)(v50 > 1), v51 + 2, 1, v0);
  v0[2] = v51 + 2;
  v55 = &v0[2 * v53];
  *((_WORD *)v55 + 16) = 382;
  *((_BYTE *)v55 + 34) = 0;
  v55[5] = &off_1003D4598;
  v57 = v0[2];
  v56 = v0[3];
  v58 = v56 >> 1;
  v59 = v57 + 1;
  if (v56 >> 1 <= v57)
  {
    v0 = sub_1000B1814((_QWORD *)(v56 > 1), v57 + 1, 1, v0);
    v56 = v0[3];
    v58 = v56 >> 1;
  }
  v0[2] = v59;
  v60 = &v0[2 * v57];
  *((_WORD *)v60 + 16) = 383;
  *((_BYTE *)v60 + 34) = 1;
  v60[5] = &off_1003D45C8;
  v61 = v57 + 2;
  if (v58 <= v59)
    v0 = sub_1000B1814((_QWORD *)(v56 > 1), v61, 1, v0);
  v0[2] = v61;
  v62 = &v0[2 * v59];
  *((_WORD *)v62 + 16) = 384;
  *((_BYTE *)v62 + 34) = 4;
  v62[5] = &off_1003D45F8;
  v64 = v0[2];
  v63 = v0[3];
  v65 = v63 >> 1;
  v66 = v64 + 1;
  if (v63 >> 1 <= v64)
  {
    v0 = sub_1000B1814((_QWORD *)(v63 > 1), v64 + 1, 1, v0);
    v63 = v0[3];
    v65 = v63 >> 1;
  }
  v0[2] = v66;
  v67 = &v0[2 * v64];
  *((_WORD *)v67 + 16) = 385;
  *((_BYTE *)v67 + 34) = 5;
  v67[5] = &off_1003D4638;
  v68 = v64 + 2;
  if (v65 <= v66)
    v0 = sub_1000B1814((_QWORD *)(v63 > 1), v68, 1, v0);
  v0[2] = v68;
  v69 = &v0[2 * v66];
  *((_WORD *)v69 + 16) = 386;
  *((_BYTE *)v69 + 34) = 4;
  v69[5] = &off_1003D4668;
  v71 = v0[2];
  v70 = v0[3];
  v72 = v70 >> 1;
  v73 = v71 + 1;
  if (v70 >> 1 <= v71)
  {
    v0 = sub_1000B1814((_QWORD *)(v70 > 1), v71 + 1, 1, v0);
    v70 = v0[3];
    v72 = v70 >> 1;
  }
  v0[2] = v73;
  v74 = &v0[2 * v71];
  *((_WORD *)v74 + 16) = 643;
  *((_BYTE *)v74 + 34) = 3;
  v74[5] = &off_1003D46A0;
  v75 = v71 + 2;
  if (v72 <= v73)
    v0 = sub_1000B1814((_QWORD *)(v70 > 1), v75, 1, v0);
  v0[2] = v75;
  v76 = &v0[2 * v73];
  *((_WORD *)v76 + 16) = 644;
  *((_BYTE *)v76 + 34) = 1;
  v76[5] = &off_1003D47B0;
  v78 = v0[2];
  v77 = v0[3];
  v79 = v77 >> 1;
  v80 = v78 + 1;
  if (v77 >> 1 <= v78)
  {
    v0 = sub_1000B1814((_QWORD *)(v77 > 1), v78 + 1, 1, v0);
    v77 = v0[3];
    v79 = v77 >> 1;
  }
  v0[2] = v80;
  v81 = &v0[2 * v78];
  *((_WORD *)v81 + 16) = 645;
  *((_BYTE *)v81 + 34) = 4;
  v81[5] = &off_1003D4848;
  v82 = v78 + 2;
  if (v79 <= v80)
    v0 = sub_1000B1814((_QWORD *)(v77 > 1), v82, 1, v0);
  v0[2] = v82;
  v83 = &v0[2 * v80];
  *((_WORD *)v83 + 16) = 646;
  *((_BYTE *)v83 + 34) = 5;
  v83[5] = &off_1003D48A0;
  v84 = sub_1001AAEC8((uint64_t)v0);
  swift_bridgeObjectRelease(v0);
  return v84;
}

_QWORD *sub_1001919B8()
{
  _QWORD *result;

  result = sub_1001919D4();
  off_100409F68 = result;
  return result;
}

_QWORD *sub_1001919D4()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  _QWORD *v26;

  v0 = sub_100012C44(&qword_100409FF0);
  v1 = swift_allocObject(v0, 144, 7);
  *(_DWORD *)(v1 + 32) = 42;
  *(_QWORD *)(v1 + 40) = &off_1003D32D8;
  *(_DWORD *)(v1 + 48) = 58;
  *(_QWORD *)(v1 + 56) = &off_1003D3308;
  *(_DWORD *)(v1 + 64) = 106;
  *(_QWORD *)(v1 + 72) = &off_1003D3338;
  *(_DWORD *)(v1 + 80) = 122;
  *(_QWORD *)(v1 + 88) = &off_1003D3368;
  *(_DWORD *)(v1 + 96) = 138;
  *(_OWORD *)(v1 + 16) = xmmword_100349F50;
  *(_QWORD *)(v1 + 104) = &off_1003D3398;
  *(_DWORD *)(v1 + 112) = 155;
  *(_QWORD *)(v1 + 120) = &off_1003D33C8;
  *(_DWORD *)(v1 + 128) = 171;
  *(_QWORD *)(v1 + 136) = &off_1003D33F8;
  v2 = sub_1000B1A38(0, 1, 1, _swiftEmptyArrayStorage);
  v4 = v2[2];
  v3 = v2[3];
  v5 = v4 + 1;
  if (v4 >= v3 >> 1)
    v2 = sub_1000B1A38((_QWORD *)(v3 > 1), v4 + 1, 1, v2);
  v2[2] = v5;
  v6 = &v2[2 * v4];
  *((_WORD *)v6 + 16) = 1025;
  v6[5] = v1;
  v7 = swift_allocObject(v0, 80, 7);
  *(_OWORD *)(v7 + 16) = xmmword_10033A120;
  *(_DWORD *)(v7 + 32) = 50;
  *(_QWORD *)(v7 + 40) = &off_1003D3428;
  *(_DWORD *)(v7 + 48) = 114;
  *(_QWORD *)(v7 + 56) = &off_1003D3468;
  *(_DWORD *)(v7 + 64) = 163;
  *(_QWORD *)(v7 + 72) = &off_1003D34A8;
  v8 = v2[3];
  v9 = v4 + 2;
  if (v5 >= v8 >> 1)
    v2 = sub_1000B1A38((_QWORD *)(v8 > 1), v9, 1, v2);
  v2[2] = v9;
  v10 = &v2[2 * v5];
  *((_WORD *)v10 + 16) = 1281;
  v10[5] = v7;
  v11 = swift_allocObject(v0, 496, 7);
  *(_OWORD *)(v11 + 16) = xmmword_10034F640;
  *(_DWORD *)(v11 + 32) = 3;
  *(_QWORD *)(v11 + 40) = &off_1003D34E8;
  *(_DWORD *)(v11 + 48) = 11;
  *(_QWORD *)(v11 + 56) = &off_1003D3510;
  *(_DWORD *)(v11 + 64) = 19;
  *(_QWORD *)(v11 + 72) = &off_1003D3538;
  *(_DWORD *)(v11 + 80) = 27;
  *(_QWORD *)(v11 + 88) = &off_1003D3560;
  *(_DWORD *)(v11 + 96) = 35;
  *(_QWORD *)(v11 + 104) = &off_1003D3588;
  *(_DWORD *)(v11 + 112) = 43;
  *(_QWORD *)(v11 + 120) = &off_1003D35B0;
  *(_DWORD *)(v11 + 128) = 51;
  *(_QWORD *)(v11 + 136) = &off_1003D35D8;
  *(_DWORD *)(v11 + 144) = 59;
  *(_QWORD *)(v11 + 152) = &off_1003D3600;
  *(_DWORD *)(v11 + 160) = 67;
  *(_QWORD *)(v11 + 168) = &off_1003D3628;
  *(_DWORD *)(v11 + 176) = 75;
  *(_QWORD *)(v11 + 184) = &off_1003D3650;
  *(_DWORD *)(v11 + 192) = 83;
  *(_QWORD *)(v11 + 200) = &off_1003D3678;
  *(_DWORD *)(v11 + 208) = 91;
  *(_QWORD *)(v11 + 216) = &off_1003D36A0;
  *(_DWORD *)(v11 + 224) = 99;
  *(_QWORD *)(v11 + 232) = &off_1003D36C8;
  *(_DWORD *)(v11 + 240) = 107;
  *(_QWORD *)(v11 + 248) = &off_1003D36F0;
  *(_DWORD *)(v11 + 256) = 115;
  *(_QWORD *)(v11 + 264) = &off_1003D3718;
  *(_DWORD *)(v11 + 272) = 123;
  *(_QWORD *)(v11 + 280) = &off_1003D3740;
  *(_DWORD *)(v11 + 288) = 131;
  *(_QWORD *)(v11 + 296) = &off_1003D3768;
  *(_DWORD *)(v11 + 304) = 139;
  *(_QWORD *)(v11 + 312) = &off_1003D3790;
  *(_DWORD *)(v11 + 320) = 147;
  *(_QWORD *)(v11 + 328) = &off_1003D37B8;
  *(_DWORD *)(v11 + 336) = 155;
  *(_QWORD *)(v11 + 344) = &off_1003D37E0;
  *(_DWORD *)(v11 + 352) = 163;
  *(_QWORD *)(v11 + 360) = &off_1003D3808;
  *(_DWORD *)(v11 + 368) = 171;
  *(_QWORD *)(v11 + 376) = &off_1003D3830;
  *(_DWORD *)(v11 + 384) = 179;
  *(_QWORD *)(v11 + 392) = &off_1003D3858;
  *(_DWORD *)(v11 + 400) = 187;
  *(_QWORD *)(v11 + 408) = &off_1003D3880;
  *(_DWORD *)(v11 + 416) = 195;
  *(_QWORD *)(v11 + 424) = &off_1003D38A8;
  *(_DWORD *)(v11 + 432) = 203;
  *(_QWORD *)(v11 + 440) = &off_1003D38D0;
  *(_DWORD *)(v11 + 448) = 211;
  *(_QWORD *)(v11 + 456) = &off_1003D38F8;
  *(_DWORD *)(v11 + 464) = 219;
  *(_QWORD *)(v11 + 472) = &off_1003D3920;
  *(_DWORD *)(v11 + 480) = 227;
  *(_QWORD *)(v11 + 488) = &off_1003D3948;
  v13 = v2[2];
  v12 = v2[3];
  if (v13 >= v12 >> 1)
    v2 = sub_1000B1A38((_QWORD *)(v12 > 1), v13 + 1, 1, v2);
  v2[2] = v13 + 1;
  v14 = &v2[2 * v13];
  *((_WORD *)v14 + 16) = 2;
  v14[5] = v11;
  v15 = swift_allocObject(v0, 496, 7);
  *(_OWORD *)(v15 + 16) = xmmword_10034F640;
  *(_DWORD *)(v15 + 32) = 3;
  *(_QWORD *)(v15 + 40) = &off_1003D3970;
  *(_DWORD *)(v15 + 48) = 11;
  *(_QWORD *)(v15 + 56) = &off_1003D3998;
  *(_DWORD *)(v15 + 64) = 19;
  *(_QWORD *)(v15 + 72) = &off_1003D39C0;
  *(_DWORD *)(v15 + 80) = 27;
  *(_QWORD *)(v15 + 88) = &off_1003D39E8;
  *(_DWORD *)(v15 + 96) = 35;
  *(_QWORD *)(v15 + 104) = &off_1003D3A10;
  *(_DWORD *)(v15 + 112) = 43;
  *(_QWORD *)(v15 + 120) = &off_1003D3A38;
  *(_DWORD *)(v15 + 128) = 51;
  *(_QWORD *)(v15 + 136) = &off_1003D3A60;
  *(_DWORD *)(v15 + 144) = 59;
  *(_QWORD *)(v15 + 152) = &off_1003D3A88;
  *(_DWORD *)(v15 + 160) = 67;
  *(_QWORD *)(v15 + 168) = &off_1003D3AB0;
  *(_DWORD *)(v15 + 176) = 75;
  *(_QWORD *)(v15 + 184) = &off_1003D3AD8;
  *(_DWORD *)(v15 + 192) = 83;
  *(_QWORD *)(v15 + 200) = &off_1003D3B00;
  *(_DWORD *)(v15 + 208) = 91;
  *(_QWORD *)(v15 + 216) = &off_1003D3B28;
  *(_DWORD *)(v15 + 224) = 99;
  *(_QWORD *)(v15 + 232) = &off_1003D3B50;
  *(_DWORD *)(v15 + 240) = 107;
  *(_QWORD *)(v15 + 248) = &off_1003D3B78;
  *(_DWORD *)(v15 + 256) = 115;
  *(_QWORD *)(v15 + 264) = &off_1003D3BA0;
  *(_DWORD *)(v15 + 272) = 123;
  *(_QWORD *)(v15 + 280) = &off_1003D3BC8;
  *(_DWORD *)(v15 + 288) = 131;
  *(_QWORD *)(v15 + 296) = &off_1003D3BF0;
  *(_DWORD *)(v15 + 304) = 139;
  *(_QWORD *)(v15 + 312) = &off_1003D3C18;
  *(_DWORD *)(v15 + 320) = 147;
  *(_QWORD *)(v15 + 328) = &off_1003D3C40;
  *(_DWORD *)(v15 + 336) = 155;
  *(_QWORD *)(v15 + 344) = &off_1003D3C68;
  *(_DWORD *)(v15 + 352) = 163;
  *(_QWORD *)(v15 + 360) = &off_1003D3C90;
  *(_DWORD *)(v15 + 368) = 171;
  *(_QWORD *)(v15 + 376) = &off_1003D3CB8;
  *(_DWORD *)(v15 + 384) = 179;
  *(_QWORD *)(v15 + 392) = &off_1003D3CE0;
  *(_DWORD *)(v15 + 400) = 187;
  *(_QWORD *)(v15 + 408) = &off_1003D3D08;
  *(_DWORD *)(v15 + 416) = 195;
  *(_QWORD *)(v15 + 424) = &off_1003D3D30;
  *(_DWORD *)(v15 + 432) = 203;
  *(_QWORD *)(v15 + 440) = &off_1003D3D58;
  *(_DWORD *)(v15 + 448) = 211;
  *(_QWORD *)(v15 + 456) = &off_1003D3D80;
  *(_DWORD *)(v15 + 464) = 219;
  *(_QWORD *)(v15 + 472) = &off_1003D3DA8;
  *(_DWORD *)(v15 + 480) = 227;
  *(_QWORD *)(v15 + 488) = &off_1003D3DD0;
  v17 = v2[2];
  v16 = v2[3];
  if (v17 >= v16 >> 1)
    v2 = sub_1000B1A38((_QWORD *)(v16 > 1), v17 + 1, 1, v2);
  v2[2] = v17 + 1;
  v18 = &v2[2 * v17];
  *((_WORD *)v18 + 16) = 258;
  v18[5] = v15;
  v19 = swift_allocObject(v0, 256, 7);
  *(_OWORD *)(v19 + 16) = xmmword_10034F650;
  *(_DWORD *)(v19 + 32) = 7;
  *(_QWORD *)(v19 + 40) = &off_1003D3DF8;
  *(_DWORD *)(v19 + 48) = 23;
  *(_QWORD *)(v19 + 56) = &off_1003D3E28;
  *(_DWORD *)(v19 + 64) = 39;
  *(_QWORD *)(v19 + 72) = &off_1003D3E58;
  *(_DWORD *)(v19 + 80) = 55;
  *(_QWORD *)(v19 + 88) = &off_1003D3E88;
  *(_DWORD *)(v19 + 96) = 71;
  *(_QWORD *)(v19 + 104) = &off_1003D3EB8;
  *(_DWORD *)(v19 + 112) = 87;
  *(_QWORD *)(v19 + 120) = &off_1003D3EE8;
  *(_DWORD *)(v19 + 128) = 103;
  *(_QWORD *)(v19 + 136) = &off_1003D3F18;
  *(_DWORD *)(v19 + 144) = 119;
  *(_QWORD *)(v19 + 152) = &off_1003D3F48;
  *(_DWORD *)(v19 + 160) = 135;
  *(_QWORD *)(v19 + 168) = &off_1003D3F78;
  *(_DWORD *)(v19 + 176) = 151;
  *(_QWORD *)(v19 + 184) = &off_1003D3FA8;
  *(_DWORD *)(v19 + 192) = 167;
  *(_QWORD *)(v19 + 200) = &off_1003D3FD8;
  *(_DWORD *)(v19 + 208) = 183;
  *(_QWORD *)(v19 + 216) = &off_1003D4008;
  *(_DWORD *)(v19 + 224) = 199;
  *(_QWORD *)(v19 + 232) = &off_1003D4038;
  *(_DWORD *)(v19 + 240) = 215;
  *(_QWORD *)(v19 + 248) = &off_1003D4068;
  v21 = v2[2];
  v20 = v2[3];
  if (v21 >= v20 >> 1)
    v2 = sub_1000B1A38((_QWORD *)(v20 > 1), v21 + 1, 1, v2);
  v2[2] = v21 + 1;
  v22 = &v2[2 * v21];
  *((_WORD *)v22 + 16) = 1026;
  v22[5] = v19;
  v23 = swift_allocObject(v0, 144, 7);
  *(_OWORD *)(v23 + 16) = xmmword_100349F50;
  *(_DWORD *)(v23 + 32) = 15;
  *(_QWORD *)(v23 + 40) = &off_1003D4098;
  *(_DWORD *)(v23 + 48) = 47;
  *(_QWORD *)(v23 + 56) = &off_1003D40D8;
  *(_DWORD *)(v23 + 64) = 79;
  *(_QWORD *)(v23 + 72) = &off_1003D4118;
  *(_DWORD *)(v23 + 80) = 111;
  *(_QWORD *)(v23 + 88) = &off_1003D4158;
  *(_DWORD *)(v23 + 96) = 143;
  *(_QWORD *)(v23 + 104) = &off_1003D4198;
  *(_DWORD *)(v23 + 112) = 175;
  *(_QWORD *)(v23 + 120) = &off_1003D41D8;
  *(_DWORD *)(v23 + 128) = 207;
  *(_QWORD *)(v23 + 136) = &off_1003D4218;
  v25 = v2[2];
  v24 = v2[3];
  if (v25 >= v24 >> 1)
    v2 = sub_1000B1A38((_QWORD *)(v24 > 1), v25 + 1, 1, v2);
  v2[2] = v25 + 1;
  v26 = &v2[2 * v25];
  *((_WORD *)v26 + 16) = 1282;
  v26[5] = v23;
  return v2;
}

Swift::Int sub_100192374(Swift::UInt32 a1, uint64_t a2)
{
  Swift::UInt v4;
  Swift::UInt32 *v5;
  Swift::UInt32 v6;
  _QWORD v8[9];

  Hasher.init(_seed:)(v8);
  Hasher._combine(_:)(a1);
  v4 = *(_QWORD *)(a2 + 16);
  Hasher._combine(_:)(v4);
  if (v4)
  {
    v5 = (Swift::UInt32 *)(a2 + 32);
    do
    {
      v6 = *v5++;
      Hasher._combine(_:)(v6);
      --v4;
    }
    while (v4);
  }
  return Hasher._finalize()();
}

Swift::Int sub_1001923F0()
{
  uint64_t v0;

  return sub_100192374(*(_DWORD *)v0, *(_QWORD *)(v0 + 8));
}

void sub_1001923FC()
{
  uint64_t v0;
  uint64_t v1;
  Swift::UInt v2;
  Swift::UInt32 *v3;
  Swift::UInt32 v4;

  v1 = *(_QWORD *)(v0 + 8);
  Hasher._combine(_:)(*(_DWORD *)v0);
  v2 = *(_QWORD *)(v1 + 16);
  Hasher._combine(_:)(v2);
  if (v2)
  {
    v3 = (Swift::UInt32 *)(v1 + 32);
    do
    {
      v4 = *v3++;
      Hasher._combine(_:)(v4);
      --v2;
    }
    while (v2);
  }
}

Swift::Int sub_100192454()
{
  uint64_t v0;
  Swift::UInt32 v1;
  uint64_t v2;
  Swift::UInt v3;
  Swift::UInt32 *v4;
  Swift::UInt32 v5;
  _QWORD v7[9];

  v1 = *(_DWORD *)v0;
  v2 = *(_QWORD *)(v0 + 8);
  Hasher.init(_seed:)(v7);
  Hasher._combine(_:)(v1);
  v3 = *(_QWORD *)(v2 + 16);
  Hasher._combine(_:)(v3);
  if (v3)
  {
    v4 = (Swift::UInt32 *)(v2 + 32);
    do
    {
      v5 = *v4++;
      Hasher._combine(_:)(v5);
      --v3;
    }
    while (v3);
  }
  return Hasher._finalize()();
}

BOOL sub_1001924CC(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)a1 == *(_DWORD *)a2 && sub_1000851D4(*(_QWORD *)(a1 + 8), *(_QWORD *)(a2 + 8));
}

uint64_t NonNANOperatingChannelInformation.init(channel:)(uint64_t a1)
{
  int v1;
  unsigned __int8 v2;
  uint64_t result;

  v1 = a1;
  v2 = Channel.operatingClass.getter(a1 & 0xFFFFFFFFFFFFLL);
  if ((v1 & 0xFFFFFF00) == 0)
    return v2 | (v1 << 8);
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 3455, 0);
  __break(1u);
  return result;
}

uint64_t sub_100192574(unint64_t a1, unint64_t a2)
{
  uint64_t result;

  if ((_DWORD)a1 != (_DWORD)a2
    || ((0x801004u >> ((a1 >> 29) & 0xF8)) & 0xFFC) != ((0x801004u >> ((a2 >> 29) & 0xF8)) & 0xFFC))
  {
    return 0;
  }
  switch(BYTE5(a1))
  {
    case 2:
      if (BYTE5(a2) != 2)
        return 0;
      result = 1;
      break;
    case 3:
      if (BYTE5(a2) != 3)
        return 0;
      result = 1;
      break;
    case 4:
      if (BYTE5(a2) != 4)
        return 0;
      result = 1;
      break;
    case 5:
      if (BYTE5(a2) != 5)
        return 0;
      result = 1;
      break;
    case 6:
      if (BYTE5(a2) != 6)
        return 0;
      result = 1;
      break;
    default:
      if (BYTE5(a2) - 2 < 5 || ((a1 & 0x10000000000) == 0) == ((a2 >> 40) & 1))
        return 0;
      result = 1;
      break;
  }
  return result;
}

uint64_t sub_10019265C(unint64_t a1, unint64_t a2)
{
  uint64_t result;
  int v6;
  uint64_t v7;

  if (((0x801004u >> ((a1 >> 29) & 0xF8)) & 0xFFC) < ((0x801004u >> ((a2 >> 29) & 0xF8)) & 0xFFC)
    || a1 < a2)
  {
    return 1;
  }
  v6 = BYTE5(a2);
  v7 = sub_100012C44(&qword_100406E48);
  if (v6 == 2)
    return 0;
  if (BYTE5(a1) == 2)
    return 1;
  if (v6 == 3)
    return 0;
  if (BYTE5(a1) == 3)
    return 1;
  if ((BYTE5(a2) - 2) >= 5u && (a2 & 0x10000000000) == 0)
    return 0;
  if ((a1 & 0x10000000000) == 0 && (BYTE5(a1) - 2) > 4u)
    return 1;
  if ((BYTE5(a2) - 2) >= 5u && (a2 & 0x10000000000) != 0)
    return 0;
  if ((a1 & 0x10000000000) != 0 && (BYTE5(a1) - 2) > 4u)
    return 1;
  if (v6 == 4)
    return 0;
  if (BYTE5(a1) == 4)
    return 1;
  if (v6 == 5)
    return 0;
  if (BYTE5(a1) == 5)
    return 1;
  if (v6 == 6)
    return 0;
  if (BYTE5(a1) == 6)
    return 1;
  result = _diagnoseUnexpectedEnumCase<A>(type:)(v7, v7);
  __break(1u);
  return result;
}

unint64_t sub_100192784(unsigned int a1)
{
  char v2;
  char v3;
  unsigned __int8 v5;
  unsigned __int8 v6;

  if (qword_100404150 != -1)
    swift_once(&qword_100404150, sub_100190108);
  if (sub_10009B344(a1, (uint64_t)off_100409F48))
  {
    v2 = 0;
    v3 = 3;
LABEL_13:
    v5 = v2;
    v6 = v3;
    sub_10018FA04();
    return a1 | ((unint64_t)v5 << 32) | ((unint64_t)v6 << 40);
  }
  if (qword_100404158 != -1)
    swift_once(&qword_100404158, sub_10019012C);
  if (sub_10009B344(a1, (uint64_t)off_100409F50))
  {
    v2 = 1;
    v3 = 4;
    goto LABEL_13;
  }
  if (qword_100404160 != -1)
    swift_once(&qword_100404160, sub_100190150);
  if (sub_10009B344(a1, (uint64_t)off_100409F58))
  {
    v2 = 2;
    v3 = 5;
    goto LABEL_13;
  }
  return 0x300000000;
}

uint64_t _s7CoreP2P7ChannelV7isValid7channel2on4withSbs6UInt32V_AC4BandOAA9BandwidthOtFZ_0(unsigned int a1, char a2, int a3)
{
  uint64_t *v5;
  _UNKNOWN **v6;
  uint64_t v7;
  void *v8;
  BOOL v9;
  char v10;

  if (a2)
  {
    if (a2 == 1)
    {
      if (qword_100404158 != -1)
        swift_once(&qword_100404158, sub_10019012C);
      v5 = (uint64_t *)&off_100409F50;
      v6 = &off_1003D6998;
    }
    else
    {
      if (qword_100404160 != -1)
        swift_once(&qword_100404160, sub_100190150);
      v5 = (uint64_t *)&off_100409F58;
      v6 = &off_1003D69C0;
    }
  }
  else
  {
    if (qword_100404150 != -1)
      swift_once(&qword_100404150, sub_100190108);
    v5 = (uint64_t *)&off_100409F48;
    v6 = &off_1003D6970;
  }
  v7 = *v5;
  v8 = sub_100016C84((uint64_t)v6);
  swift_bridgeObjectRetain(v7);
  v9 = sub_10009B344(a1, v7);
  swift_bridgeObjectRelease(v7);
  if (v9)
    v10 = sub_10009B410(a3, (uint64_t)v8);
  else
    v10 = 0;
  swift_bridgeObjectRelease(v8);
  return v10 & 1;
}

uint64_t sub_1001929E8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v16;
  char v17;
  uint64_t v18;

  v3 = sub_100012C44(&qword_100409FD8);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin();
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  sub_10003259C(a1, v7);
  v9 = sub_1001930EC();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for Channel.CodingKeys, &type metadata for Channel.CodingKeys, v9, v7, v8);
  if (v1)
    return sub_100014430(a1);
  BYTE3(v18) = 0;
  v10 = KeyedDecodingContainer.decode(_:forKey:)((char *)&v18 + 3, v3);
  BYTE1(v18) = 1;
  v11 = sub_100193600();
  KeyedDecodingContainer.decode<A>(_:forKey:)((uint64_t *)((char *)&v18 + 2), &type metadata for Channel.Band, (char *)&v18 + 1, v3, &type metadata for Channel.Band, v11);
  v12 = BYTE2(v18);
  v17 = 2;
  v13 = sub_100193644();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v18, &type metadata for Bandwidth, &v17, v3, &type metadata for Bandwidth, v13);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  v14 = v18;
  sub_100014430(a1);
  return v10 | (unint64_t)(v12 << 32) | (v14 << 40);
}

unint64_t sub_100192B90(unint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  unsigned __int8 *i;
  uint64_t v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  int v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  unint64_t result;
  uint64_t v33;
  char v34;
  char v35;
  uint64_t v36;
  char v37;

  if (qword_100404198 != -1)
LABEL_85:
    swift_once(&qword_100404198, sub_100191124);
  v2 = *((_QWORD *)off_100409F60 + 2);
  if (!v2)
    return 0;
  v3 = 0;
  v4 = (0x801004u >> (8 * BYTE4(a1))) & 0xFFC;
  for (i = (unsigned __int8 *)off_100409F60 + 32; ; i += 16)
  {
    v6 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_85;
    }
    if (v4 == (0x801004u >> (8 * i[1])))
      break;
LABEL_4:
    ++v3;
    if (v6 == v2)
      return 0;
  }
  v7 = i[2];
  switch(BYTE5(a1))
  {
    case 2:
      if (v7 == 2)
        goto LABEL_22;
      goto LABEL_20;
    case 3:
      if (v7 == 3)
        goto LABEL_22;
      goto LABEL_20;
    case 4:
      if (v7 == 4)
        goto LABEL_22;
      goto LABEL_20;
    case 5:
      if (v7 == 5)
        goto LABEL_22;
      goto LABEL_20;
    case 6:
      if (v7 == 6)
        goto LABEL_22;
      goto LABEL_20;
    default:
      if ((v7 - 2) < 5)
        goto LABEL_4;
      if (((((a1 & 0x10000000000) == 0) ^ v7) & 1) != 0)
        goto LABEL_22;
LABEL_20:
      if ((3u >> (BYTE4(a1) & 7)) & 1 | (a1 >> 40) & 1 | (BYTE5(a1) - 2 < 5) | ((v7 - 2) < 5)
        || (v7 & 1) == 0)
      {
        goto LABEL_4;
      }
LABEL_22:
      v8 = *i;
      v9 = *((_QWORD *)i + 1);
      v10 = qword_1004041A0;
      swift_bridgeObjectRetain(v9);
      if (v10 != -1)
        swift_once(&qword_1004041A0, sub_1001919B8);
      v11 = *((_QWORD *)off_100409F68 + 2);
      if (!v11)
        goto LABEL_65;
      v12 = 0;
      break;
  }
  while (1)
  {
    v13 = (char *)off_100409F68 + 16 * v12 + 32;
    if (v4 == (0x801004u >> (8 * *v13)))
      break;
LABEL_26:
    if (++v12 == v11)
    {
LABEL_65:
      v33 = sub_10011D4AC(a1, v9);
      v35 = v34;
      swift_bridgeObjectRelease(v9);
      result = 0;
      if ((v35 & 1) != 0 || v33 >= 16)
        return result;
      if (v8 < 0x83)
      {
        LOBYTE(v36) = 0;
        if (v33 >= 0)
          v22 = 1 << v33;
        else
          LODWORD(v22) = 0;
        return (((_DWORD)v22 << 16) | v8) & 0xFFFFFF00FFFFFFFFLL | ((unint64_t)v36 << 32);
      }
      if (a1 < 0x100)
      {
        LOBYTE(v36) = 0;
        LODWORD(v22) = a1;
        return (((_DWORD)v22 << 16) | v8) & 0xFFFFFF00FFFFFFFFLL | ((unint64_t)v36 << 32);
      }
LABEL_86:
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 3455, 0);
      __break(1u);
      JUMPOUT(0x10019303CLL);
    }
  }
  v14 = v13[1];
  v15 = *((_QWORD *)v13 + 1);
  switch(BYTE5(a1))
  {
    case 2:
      if (v14 == 2)
        goto LABEL_41;
      goto LABEL_26;
    case 3:
      if (v14 == 3)
        goto LABEL_41;
      goto LABEL_26;
    case 4:
      if (v14 == 4)
        goto LABEL_41;
      goto LABEL_26;
    case 5:
      if (v14 == 5)
        goto LABEL_41;
      goto LABEL_26;
    case 6:
      if (v14 == 6)
        goto LABEL_41;
      goto LABEL_26;
    default:
      if ((v14 - 2) < 5 || ((((a1 & 0x10000000000) == 0) ^ v14) & 1) == 0)
        goto LABEL_26;
LABEL_41:
      v16 = *(_QWORD *)(v15 + 16);
      if (!v16)
        goto LABEL_26;
      v17 = 0;
      v18 = v15 + 32;
      break;
  }
  while (1)
  {
    v19 = v18 + 16 * v17;
    v20 = *(_QWORD *)(v19 + 8);
    v21 = *(_QWORD *)(v20 + 16);
    if (v21)
    {
      LODWORD(v22) = *(_DWORD *)v19;
      if (*(_DWORD *)(v20 + 32) == (_DWORD)a1)
      {
        v23 = 0;
      }
      else
      {
        if (v21 == 1)
          goto LABEL_43;
        if (*(_DWORD *)(v20 + 36) == (_DWORD)a1)
        {
          v23 = 1;
        }
        else
        {
          v28 = 0;
          v29 = v21 - 2;
          v30 = v20 + 40;
          do
          {
            if (v29 == v28)
              goto LABEL_43;
            v31 = *(_DWORD *)(v30 + 4 * v28++);
          }
          while (v31 != (_DWORD)a1);
          if (v28 > 6)
            goto LABEL_43;
          v23 = v28 + 1;
        }
      }
      v24 = *(_QWORD *)(v9 + 16);
      if (v24)
      {
        if (*(_DWORD *)(v9 + 32) == (_DWORD)v22)
        {
          swift_bridgeObjectRelease(v9);
          if (v8 < 0x83)
          {
            v37 = 0;
            goto LABEL_79;
          }
          goto LABEL_80;
        }
        if (v24 != 1)
          break;
      }
    }
LABEL_43:
    if (++v17 == v16)
      goto LABEL_26;
  }
  if (*(_DWORD *)(v9 + 36) == (_DWORD)v22)
  {
    swift_bridgeObjectRelease(v9);
    if (v8 < 0x83)
    {
      v37 = 1;
      goto LABEL_79;
    }
LABEL_80:
    if (v22 < 0x100)
    {
      v36 = 1 << v23;
      return (((_DWORD)v22 << 16) | v8) & 0xFFFFFF00FFFFFFFFLL | ((unint64_t)v36 << 32);
    }
    goto LABEL_86;
  }
  v25 = 0;
  v26 = v24 - 2;
  do
  {
    if (v26 == v25)
      goto LABEL_43;
    v27 = *(_DWORD *)(v9 + 4 * v25++ + 40);
  }
  while (v27 != (_DWORD)v22);
  if (v25 > 0xE)
    goto LABEL_43;
  swift_bridgeObjectRelease(v9);
  if (v8 >= 0x83)
    goto LABEL_80;
  v37 = v25 + 1;
LABEL_79:
  v22 = 1 << v37;
  v36 = 1 << v23;
  return (((_DWORD)v22 << 16) | v8) & 0xFFFFFF00FFFFFFFFLL | ((unint64_t)v36 << 32);
}

unint64_t sub_100193064()
{
  unint64_t result;

  result = qword_100409F70;
  if (!qword_100409F70)
  {
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for UInt32, &type metadata for UInt32);
    atomic_store(result, (unint64_t *)&qword_100409F70);
  }
  return result;
}

unint64_t sub_1001930A8()
{
  unint64_t result;

  result = qword_100409F78;
  if (!qword_100409F78)
  {
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for UInt8, &type metadata for UInt8);
    atomic_store(result, (unint64_t *)&qword_100409F78);
  }
  return result;
}

unint64_t sub_1001930EC()
{
  unint64_t result;

  result = qword_100409F88;
  if (!qword_100409F88)
  {
    result = swift_getWitnessTable(byte_10034F550, &type metadata for Channel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100409F88);
  }
  return result;
}

unint64_t sub_100193130()
{
  unint64_t result;

  result = qword_100409F90;
  if (!qword_100409F90)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for Channel.Band, &type metadata for Channel.Band);
    atomic_store(result, (unint64_t *)&qword_100409F90);
  }
  return result;
}

unint64_t sub_100193174()
{
  unint64_t result;

  result = qword_100409F98;
  if (!qword_100409F98)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for Bandwidth, &type metadata for Bandwidth);
    atomic_store(result, (unint64_t *)&qword_100409F98);
  }
  return result;
}

unint64_t sub_1001931BC()
{
  unint64_t result;

  result = qword_100409FA0;
  if (!qword_100409FA0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for Channel.Band, &type metadata for Channel.Band);
    atomic_store(result, (unint64_t *)&qword_100409FA0);
  }
  return result;
}

unint64_t sub_100193204()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100409FA8;
  if (!qword_100409FA8)
  {
    v1 = sub_100013C64(&qword_100409FB0);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_100409FA8);
  }
  return result;
}

unint64_t sub_100193254()
{
  unint64_t result;

  result = qword_10040FAE0;
  if (!qword_10040FAE0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for Channel, &type metadata for Channel);
    atomic_store(result, (unint64_t *)&qword_10040FAE0);
  }
  return result;
}

void *sub_100193298()
{
  return &protocol witness table for UInt32;
}

ValueMetadata *type metadata accessor for Channel()
{
  return &type metadata for Channel;
}

ValueMetadata *type metadata accessor for Channel.Band()
{
  return &type metadata for Channel.Band;
}

uint64_t _s7CoreP2P7ChannelV4BandOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_100193314 + 4 * byte_10034F134[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_100193348 + 4 * byte_10034F12F[v4]))();
}

uint64_t sub_100193348(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100193350(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100193358);
  return result;
}

uint64_t sub_100193364(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10019336CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_100193370(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100193378(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Channel.CodingKeys()
{
  return &type metadata for Channel.CodingKeys;
}

unint64_t sub_100193398()
{
  unint64_t result;

  result = qword_100409FB8;
  if (!qword_100409FB8)
  {
    result = swift_getWitnessTable(byte_10034F528, &type metadata for Channel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100409FB8);
  }
  return result;
}

unint64_t sub_1001933E0()
{
  unint64_t result;

  result = qword_100409FC0;
  if (!qword_100409FC0)
  {
    result = swift_getWitnessTable(aI_2, &type metadata for Channel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100409FC0);
  }
  return result;
}

unint64_t sub_100193428()
{
  unint64_t result;

  result = qword_100409FC8;
  if (!qword_100409FC8)
  {
    result = swift_getWitnessTable(byte_10034F4C0, &type metadata for Channel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100409FC8);
  }
  return result;
}

uint64_t sub_10019346C(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  char v8;

  if (a1 == 0x6C656E6E616863 && a2 == 0xE700000000000000)
  {
    v5 = 0xE700000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6C656E6E616863, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 1684955490 && a2 == 0xE400000000000000)
  {
    v7 = 0xE400000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1684955490, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x74646977646E6162 && a2 == 0xE900000000000068)
  {
    swift_bridgeObjectRelease(0xE900000000000068);
    return 2;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x74646977646E6162, 0xE900000000000068, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

unint64_t sub_1001935BC()
{
  unint64_t result;

  result = qword_100409FD0;
  if (!qword_100409FD0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for Channel.Band, &type metadata for Channel.Band);
    atomic_store(result, (unint64_t *)&qword_100409FD0);
  }
  return result;
}

unint64_t sub_100193600()
{
  unint64_t result;

  result = qword_100409FE0;
  if (!qword_100409FE0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for Channel.Band, &type metadata for Channel.Band);
    atomic_store(result, (unint64_t *)&qword_100409FE0);
  }
  return result;
}

unint64_t sub_100193644()
{
  unint64_t result;

  result = qword_100409FE8;
  if (!qword_100409FE8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for Bandwidth, &type metadata for Bandwidth);
    atomic_store(result, (unint64_t *)&qword_100409FE8);
  }
  return result;
}

uint64_t assignWithCopy for Channel.ChannelBitmap(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

ValueMetadata *type metadata accessor for Channel.ChannelBitmap()
{
  return &type metadata for Channel.ChannelBitmap;
}

unint64_t sub_1001936DC()
{
  unint64_t result;

  result = qword_100409FF8;
  if (!qword_100409FF8)
  {
    result = swift_getWitnessTable(a9_1, &type metadata for Channel.ChannelBitmap);
    atomic_store(result, (unint64_t *)&qword_100409FF8);
  }
  return result;
}

uint64_t sub_100193720(uint64_t a1, unint64_t *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int (*v16)(_QWORD *, uint64_t, uint64_t);
  uint64_t v18[6];

  v5 = sub_100012C44(&qword_10040A0D8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin();
  v8 = (uint64_t *)((char *)v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100012C44(&qword_10040A0E0);
  __chkstk_darwin();
  v10 = (uint64_t *)((char *)v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = -1 << *(_BYTE *)(a1 + 32);
  v12 = *(_QWORD *)(a1 + 64);
  v13 = ~v11;
  v14 = -v11;
  v18[0] = a1;
  v18[1] = a1 + 64;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  else
    v15 = -1;
  v18[2] = v13;
  v18[3] = 0;
  v18[4] = v15 & v12;
  v18[5] = 0;
  swift_bridgeObjectRetain(a1);
  sub_100193BE8(v10);
  v16 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v6 + 48);
  while (v16(v10, 1, v5) != 1)
  {
    sub_100063EB8((uint64_t)v10, (uint64_t)v8, &qword_10040A0D8);
    sub_1001959DC(v8, a2);
    sub_100033A84((uint64_t)v8, &qword_10040A0D8);
    if (v2)
      break;
    sub_100193BE8(v10);
  }
  return sub_100062B6C(v18[0]);
}

uint64_t sub_1001938B4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t result;
  int64_t v6;
  char *v7;
  unint64_t v8;
  unint64_t i;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  int64_t v25;
  _QWORD *v26;
  _BYTE v27[8];
  _QWORD v28[4];
  _OWORD v29[2];
  uint64_t v30;
  _OWORD v31[2];
  uint64_t v32;
  uint64_t v33;

  v1 = a1;
  v24 = a1 + 64;
  v2 = 1 << *(_BYTE *)(a1 + 32);
  v3 = -1;
  if (v2 < 64)
    v3 = ~(-1 << v2);
  v4 = v3 & *(_QWORD *)(a1 + 64);
  v25 = (unint64_t)(v2 + 63) >> 6;
  result = swift_bridgeObjectRetain(a1);
  v6 = 0;
  v26 = _swiftEmptyArrayStorage;
  v7 = &type metadata for Any[8];
  if (v4)
    goto LABEL_6;
LABEL_7:
  v10 = v6 + 1;
  if (!__OFADD__(v6, 1))
  {
    if (v10 < v25)
    {
      v11 = *(_QWORD *)(v24 + 8 * v10);
      ++v6;
      if (v11)
        goto LABEL_22;
      v6 = v10 + 1;
      if (v10 + 1 >= v25)
        goto LABEL_30;
      v11 = *(_QWORD *)(v24 + 8 * v6);
      if (v11)
        goto LABEL_22;
      v6 = v10 + 2;
      if (v10 + 2 >= v25)
        goto LABEL_30;
      v11 = *(_QWORD *)(v24 + 8 * v6);
      if (v11)
        goto LABEL_22;
      v6 = v10 + 3;
      if (v10 + 3 >= v25)
        goto LABEL_30;
      v11 = *(_QWORD *)(v24 + 8 * v6);
      if (v11)
      {
LABEL_22:
        v4 = (v11 - 1) & v11;
        for (i = __clz(__rbit64(v11)) + (v6 << 6); ; i = v8 | (v6 << 6))
        {
          v13 = *(_BYTE *)(*(_QWORD *)(v1 + 48) + i);
          sub_100014450(*(_QWORD *)(v1 + 56) + 32 * i, (uint64_t)v31 + 8);
          LOBYTE(v31[0]) = v13;
          v29[0] = v31[0];
          v29[1] = v31[1];
          v30 = v32;
          v27[0] = v13;
          sub_100014450((uint64_t)v29 + 8, (uint64_t)v28);
          v14 = sub_100032C0C();
          if (swift_dynamicCast(&v33, v28, v7, v14, 6))
          {
            v15 = v1;
            v16 = v33;
            v17 = v29[0];
            v27[0] = v29[0];
            sub_100014450((uint64_t)v29 + 8, (uint64_t)v28);
            v18 = sub_100194468(v17);
            v20 = v19;
            sub_100014430(v28);
            sub_100033A84((uint64_t)v29, &qword_10040A0E8);
            result = swift_isUniquelyReferenced_nonNull_native(v26);
            if ((result & 1) == 0)
            {
              result = (uint64_t)sub_1000B2D84(0, v26[2] + 1, 1, v26);
              v26 = (_QWORD *)result;
            }
            v22 = v26[2];
            v21 = v26[3];
            if (v22 >= v21 >> 1)
            {
              result = (uint64_t)sub_1000B2D84((_QWORD *)(v21 > 1), v22 + 1, 1, v26);
              v26 = (_QWORD *)result;
            }
            v26[2] = v22 + 1;
            v23 = &v26[3 * v22];
            v23[4] = v18;
            v23[5] = v20;
            v23[6] = v16;
            v1 = v15;
            v7 = &type metadata for Any[8];
            if (!v4)
              goto LABEL_7;
          }
          else
          {
            v27[0] = v29[0];
            sub_100014450((uint64_t)v29 + 8, (uint64_t)v28);
            sub_100033A84((uint64_t)v27, &qword_10040A0E8);
            result = sub_100033A84((uint64_t)v29, &qword_10040A0E8);
            if (!v4)
              goto LABEL_7;
          }
LABEL_6:
          v8 = __clz(__rbit64(v4));
          v4 &= v4 - 1;
        }
      }
      v12 = v10 + 4;
      if (v12 < v25)
      {
        v11 = *(_QWORD *)(v24 + 8 * v12);
        if (v11)
        {
          v6 = v12;
          goto LABEL_22;
        }
        while (1)
        {
          v6 = v12 + 1;
          if (__OFADD__(v12, 1))
            goto LABEL_32;
          if (v6 >= v25)
            break;
          v11 = *(_QWORD *)(v24 + 8 * v6);
          ++v12;
          if (v11)
            goto LABEL_22;
        }
      }
    }
LABEL_30:
    swift_release(v1);
    return (uint64_t)v26;
  }
  __break(1u);
LABEL_32:
  __break(1u);
  return result;
}

uint64_t sub_100193BE8@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  __int16 v22;
  char v23;
  uint64_t v24;
  int v25;
  uint64_t i;
  uint64_t v27;
  uint64_t v28;
  int64_t v29;
  uint64_t v31;
  int64_t v32;
  _QWORD *v33;
  uint64_t v34;
  int64_t v35;
  unint64_t v36;
  int64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  int64_t v46;

  v3 = sub_100012C44(&qword_10040A0D8);
  v44 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin();
  v40 = (char *)&v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(_QWORD *)(type metadata accessor for NANInternetSharingStatistics.Requester(0) - 8);
  __chkstk_darwin();
  v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012C44(&qword_1004061A0);
  __chkstk_darwin();
  v9 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (uint64_t *)sub_100012C44(&qword_1004061A8);
  v11 = *(v10 - 1);
  __chkstk_darwin();
  v13 = (char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *v1;
  v15 = v1[1];
  v17 = v1[2];
  v16 = v1[3];
  v18 = v1[4];
  v45 = a1;
  v39 = v13;
  if (v18)
  {
    v41 = v15;
    v42 = v17;
    v43 = v3;
    v19 = (v18 - 1) & v18;
    v46 = v16;
    v20 = __clz(__rbit64(v18)) | (v16 << 6);
LABEL_3:
    v21 = *(_QWORD *)(v14 + 48) - v20 + 8 * v20;
    v22 = *(_WORD *)(v21 + 4);
    v23 = *(_BYTE *)(v21 + 6);
    v24 = *(_QWORD *)(v14 + 56) + *(_QWORD *)(v5 + 72) * v20;
    v25 = *(_DWORD *)v21;
    i = v14;
    sub_100197B04(v24, (uint64_t)v7);
    v27 = (uint64_t)&v9[*((int *)v10 + 12)];
    *(_DWORD *)v9 = v25;
    *((_WORD *)v9 + 2) = v22;
    v9[6] = v23;
    sub_100198EAC((uint64_t)v7, v27);
    v28 = 0;
    v17 = v42;
    v3 = v43;
    v15 = v41;
    goto LABEL_4;
  }
  v32 = v16 + 1;
  if (__OFADD__(v16, 1))
    goto LABEL_33;
  v35 = (unint64_t)(v17 + 64) >> 6;
  if (v32 >= v35)
  {
    v46 = v16;
    v19 = 0;
    v28 = 1;
    i = v14;
    goto LABEL_4;
  }
  v36 = *(_QWORD *)(v15 + 8 * v32);
  if (v36)
  {
    v43 = v3;
LABEL_13:
    v41 = v15;
    v42 = v17;
    v19 = (v36 - 1) & v36;
    v20 = __clz(__rbit64(v36)) + (v32 << 6);
    v46 = v32;
    goto LABEL_3;
  }
  v37 = v16 + 2;
  if (v16 + 2 >= v35)
  {
    v19 = 0;
    v28 = 1;
    v46 = v16 + 1;
    i = v14;
    goto LABEL_4;
  }
  v36 = *(_QWORD *)(v15 + 8 * v37);
  if (v36)
  {
LABEL_17:
    v43 = v3;
    v32 = v37;
    goto LABEL_13;
  }
  if (v16 + 3 >= v35)
  {
LABEL_30:
    v19 = 0;
    v28 = 1;
    v46 = v37;
    i = v14;
    goto LABEL_4;
  }
  v36 = *(_QWORD *)(v15 + 8 * (v16 + 3));
  if (v36)
  {
    v43 = v3;
    v32 = v16 + 3;
    goto LABEL_13;
  }
  v37 = v16 + 4;
  if (v16 + 4 < v35)
  {
    v36 = *(_QWORD *)(v15 + 8 * v37);
    if (v36)
      goto LABEL_17;
    v32 = v16 + 5;
    if (v16 + 5 < v35)
    {
      v43 = v3;
      v36 = *(_QWORD *)(v15 + 8 * v32);
      if (!v36)
      {
        v32 = v35 - 1;
        v38 = v16 + 6;
        do
        {
          if (v35 == v38)
            goto LABEL_34;
          v36 = *(_QWORD *)(v15 + 8 * v38++);
        }
        while (!v36);
        v32 = v38 - 1;
      }
      goto LABEL_13;
    }
    goto LABEL_30;
  }
  v19 = 0;
  v28 = 1;
  v46 = v16 + 3;
  for (i = v14; ; i = v14)
  {
LABEL_4:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t *))(v11 + 56))(v9, v28, 1, v10);
    *v1 = i;
    v1[1] = v15;
    v29 = v46;
    v1[2] = v17;
    v1[3] = v29;
    v1[4] = v19;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t *))(v11 + 48))(v9, 1, v10) == 1)
    {
      sub_100033A84((uint64_t)v9, &qword_1004061A0);
      return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(v44 + 56))(v45, 1, 1, v3);
    }
    v10 = &qword_1004061A8;
    v31 = (uint64_t)v39;
    sub_100063EB8((uint64_t)v9, (uint64_t)v39, &qword_1004061A8);
    v9 = &v40[*(int *)(v3 + 48)];
    v15 = v1[5];
    sub_100063EB8(v31, (uint64_t)v9, &qword_1004061A8);
    v32 = v15 + 1;
    if (!__OFADD__(v15, 1))
      break;
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    v19 = 0;
    v28 = 1;
    v46 = v32;
    v3 = v43;
  }
  v1[5] = v32;
  v33 = v45;
  v34 = (uint64_t)v45 + *(int *)(v3 + 48);
  *v45 = v15;
  sub_100063EB8((uint64_t)v9, v34, &qword_1004061A8);
  return (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v44 + 56))(v33, 0, 1, v3);
}

unint64_t NANCoreAnalyticsMetrics.peerAddress.getter()
{
  uint64_t v0;

  return *(unsigned __int16 *)(v0 + 33) | ((unint64_t)*(unsigned int *)(v0 + 35) << 16);
}

uint64_t NANCoreAnalyticsMetrics.peerAddress.setter(uint64_t result)
{
  uint64_t v1;

  *(_WORD *)(v1 + 33) = result;
  *(_BYTE *)(v1 + 35) = BYTE2(result);
  *(_BYTE *)(v1 + 36) = BYTE3(result);
  *(_BYTE *)(v1 + 37) = BYTE4(result);
  *(_BYTE *)(v1 + 38) = BYTE5(result);
  return result;
}

uint64_t NANCoreAnalyticsMetrics.internetSharingStatistics.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 344);
  swift_bridgeObjectRetain(*(_QWORD *)(v0 + 352));
  return v1;
}

uint64_t NANCoreAnalyticsMetrics.internetSharingStatistics.setter(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t result;

  result = swift_bridgeObjectRelease(*(_QWORD *)(v3 + 352));
  *(_QWORD *)(v3 + 344) = a1;
  *(_QWORD *)(v3 + 352) = a2;
  *(_BYTE *)(v3 + 360) = a3;
  return result;
}

uint64_t (*NANCoreAnalyticsMetrics.internetSharingStatistics.modify())(_QWORD)
{
  return NANBitmap.Channel.operatingClass.getter;
}

double NANCoreAnalyticsMetrics.hash(into:)(__int128 *a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::UInt8 v4;
  Swift::UInt8 v5;
  Swift::UInt8 v6;
  Swift::UInt8 v7;
  Swift::UInt8 v8;
  uint64_t v9;
  uint64_t v10;
  Swift::UInt8 v11;
  double result;

  v2 = v1;
  Hasher._combine(_:)(*(_DWORD *)v2);
  Hasher._combine(_:)(*(_BYTE *)(v2 + 4) & 1);
  Hasher._combine(_:)(*(_BYTE *)(v2 + 5) & 1);
  Hasher._combine(_:)(*(_BYTE *)(v2 + 6) & 1);
  Hasher._combine(_:)(*(_DWORD *)(v2 + 8));
  Hasher._combine(_:)(*(_DWORD *)(v2 + 12));
  Hasher._combine(_:)(*(_BYTE *)(v2 + 16));
  Hasher._combine(_:)(*(_BYTE *)(v2 + 17));
  Hasher._combine(_:)(*(_BYTE *)(v2 + 18));
  Hasher._combine(_:)(*(_BYTE *)(v2 + 19));
  Hasher._combine(_:)(*(_DWORD *)(v2 + 20));
  Hasher._combine(_:)(*(_DWORD *)(v2 + 24));
  Hasher._combine(_:)(*(_DWORD *)(v2 + 28));
  Hasher._combine(_:)(*(_BYTE *)(v2 + 32));
  v4 = *(_BYTE *)(v2 + 34);
  v5 = *(_BYTE *)(v2 + 35);
  v6 = *(_BYTE *)(v2 + 36);
  v7 = *(_BYTE *)(v2 + 37);
  v8 = *(_BYTE *)(v2 + 38);
  Hasher._combine(_:)(*(_BYTE *)(v2 + 33));
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(*(_DWORD *)(v2 + 40));
  Hasher._combine(_:)(*(_DWORD *)(v2 + 44));
  Hasher._combine(_:)(*(_DWORD *)(v2 + 48));
  Hasher._combine(_:)(*(_QWORD *)(v2 + 56));
  Hasher._combine(_:)(*(_QWORD *)(v2 + 64));
  Hasher._combine(_:)(*(_QWORD *)(v2 + 72));
  Hasher._combine(_:)(*(_QWORD *)(v2 + 80));
  Hasher._combine(_:)(*(_QWORD *)(v2 + 88));
  Hasher._combine(_:)(*(_QWORD *)(v2 + 96));
  Hasher._combine(_:)(*(_QWORD *)(v2 + 104));
  Hasher._combine(_:)(*(_QWORD *)(v2 + 112));
  Hasher._combine(_:)(*(_QWORD *)(v2 + 120));
  Hasher._combine(_:)(*(_QWORD *)(v2 + 128));
  Hasher._combine(_:)(*(_QWORD *)(v2 + 136));
  Hasher._combine(_:)(*(_QWORD *)(v2 + 144));
  Hasher._combine(_:)(*(_QWORD *)(v2 + 152));
  Hasher._combine(_:)(*(_QWORD *)(v2 + 160));
  Hasher._combine(_:)(*(_QWORD *)(v2 + 168));
  Hasher._combine(_:)(*(_QWORD *)(v2 + 176));
  Hasher._combine(_:)(*(_QWORD *)(v2 + 184));
  Hasher._combine(_:)(*(_QWORD *)(v2 + 192));
  Hasher._combine(_:)(*(_QWORD *)(v2 + 200));
  Hasher._combine(_:)(*(_QWORD *)(v2 + 208));
  Hasher._combine(_:)(*(_QWORD *)(v2 + 216));
  Hasher._combine(_:)(*(_QWORD *)(v2 + 224));
  sub_10008E368((uint64_t)a1, *(_QWORD *)(v2 + 232));
  sub_10008E368((uint64_t)a1, *(_QWORD *)(v2 + 240));
  sub_10008E368((uint64_t)a1, *(_QWORD *)(v2 + 248));
  sub_10008E368((uint64_t)a1, *(_QWORD *)(v2 + 256));
  sub_10008E368((uint64_t)a1, *(_QWORD *)(v2 + 264));
  sub_10008E368((uint64_t)a1, *(_QWORD *)(v2 + 272));
  sub_10008E368((uint64_t)a1, *(_QWORD *)(v2 + 280));
  sub_10008E368((uint64_t)a1, *(_QWORD *)(v2 + 288));
  sub_10008E368((uint64_t)a1, *(_QWORD *)(v2 + 296));
  sub_10008E368((uint64_t)a1, *(_QWORD *)(v2 + 304));
  sub_10008E368((uint64_t)a1, *(_QWORD *)(v2 + 312));
  sub_10008E368((uint64_t)a1, *(_QWORD *)(v2 + 320));
  sub_10008E368((uint64_t)a1, *(_QWORD *)(v2 + 328));
  sub_10008E368((uint64_t)a1, *(_QWORD *)(v2 + 336));
  v9 = *(_QWORD *)(v2 + 352);
  if (v9)
  {
    v10 = *(_QWORD *)(v2 + 344);
    v11 = *(_BYTE *)(v2 + 360) & 1;
    Hasher._combine(_:)(1u);
    if (v10 == 2)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v10 & 1);
    }
    Hasher._combine(_:)((BYTE1(v10) & 1) + 1);
    Hasher._combine(_:)(BYTE2(v10) & 1);
    swift_bridgeObjectRetain(v9);
    sub_100077890(a1, v9);
    Hasher._combine(_:)(v11);
    *(_QWORD *)&result = swift_bridgeObjectRelease(v9).n128_u64[0];
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return result;
}

Swift::Int NANCoreAnalyticsMetrics.hashValue.getter()
{
  __int128 v1[4];

  Hasher.init(_seed:)(v1);
  NANCoreAnalyticsMetrics.hash(into:)(v1);
  return Hasher._finalize()();
}

Swift::Int sub_1001943DC()
{
  __int128 v1[4];

  Hasher.init(_seed:)(v1);
  NANCoreAnalyticsMetrics.hash(into:)(v1);
  return Hasher._finalize()();
}

uint64_t sub_100194414(void *__src, const void *a2)
{
  _BYTE v4[368];
  _BYTE __dst[368];

  memcpy(v4, __src, 0x169uLL);
  memcpy(__dst, a2, 0x169uLL);
  return _s7CoreP2P23NANCoreAnalyticsMetricsV23__derived_struct_equalsySbAC_ACtFZ_0((uint64_t)v4, (uint64_t)__dst) & 1;
}

uint64_t sub_100194468(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1001944A8 + 4 * word_10034F660[a1]))(0x5F5050485F4E414ELL, 0xEF4E4F4953524556);
}

unint64_t sub_1001944A8()
{
  return 0xD000000000000019;
}

uint64_t NANCoreAnalyticsMetrics.eventPayload.getter()
{
  int *v0;
  int *v1;
  int v2;
  char isUniquelyReferenced_nonNull_native;
  char v4;
  char v5;
  char v6;
  char v7;
  char v8;
  char v9;
  int v10;
  char v11;
  int v12;
  char v13;
  char v14;
  char v15;
  char v16;
  char v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  int v23;
  char v24;
  int v25;
  char v26;
  int v27;
  char v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  char v72;
  char v73;
  char v74;
  int v75;
  char v76;
  int v77;
  char v78;
  int v79;
  char v80;
  char v81;
  char v82;
  _QWORD *v83;
  uint64_t v84;
  _BOOL8 v85;
  char v86;
  char v87;
  char v88;
  uint64_t v89;
  char v90;
  unint64_t v91;
  char v92;
  char v93;
  unint64_t v94;
  char v95;
  char v96;
  unint64_t v97;
  char v98;
  char v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  _QWORD *v104;
  uint64_t v105;
  _QWORD *v106;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  _QWORD *v111;

  v1 = v0;
  v2 = *v0;
  v111 = &type metadata for UInt32;
  LODWORD(v110) = v2;
  sub_100033A2C(&v110, &v108);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_100031650(&v108, 0, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease(0x8000000000000000);
  v4 = *((_BYTE *)v0 + 4);
  v111 = &type metadata for Bool;
  LOBYTE(v110) = v4;
  sub_100033A2C(&v110, &v108);
  v5 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_100031650(&v108, 1, v5);
  swift_bridgeObjectRelease(0x8000000000000000);
  v6 = *((_BYTE *)v0 + 5);
  v111 = &type metadata for Bool;
  LOBYTE(v110) = v6;
  sub_100033A2C(&v110, &v108);
  v7 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_100031650(&v108, 2, v7);
  swift_bridgeObjectRelease(0x8000000000000000);
  v8 = *((_BYTE *)v0 + 6);
  v111 = &type metadata for Bool;
  LOBYTE(v110) = v8;
  sub_100033A2C(&v110, &v108);
  v9 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_100031650(&v108, 3, v9);
  swift_bridgeObjectRelease(0x8000000000000000);
  v10 = v0[2];
  v111 = &type metadata for UInt32;
  LODWORD(v110) = v10;
  sub_100033A2C(&v110, &v108);
  v11 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_100031650(&v108, 5, v11);
  swift_bridgeObjectRelease(0x8000000000000000);
  v12 = v0[3];
  v111 = &type metadata for UInt32;
  LODWORD(v110) = v12;
  sub_100033A2C(&v110, &v108);
  v13 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_100031650(&v108, 6, v13);
  swift_bridgeObjectRelease(0x8000000000000000);
  v14 = *((_BYTE *)v0 + 16);
  v111 = &type metadata for UInt8;
  LOBYTE(v110) = v14;
  sub_100033A2C(&v110, &v108);
  v15 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_100031650(&v108, 7, v15);
  swift_bridgeObjectRelease(0x8000000000000000);
  v16 = *((_BYTE *)v0 + 17);
  v111 = &type metadata for UInt8;
  LOBYTE(v110) = v16;
  sub_100033A2C(&v110, &v108);
  v17 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_100031650(&v108, 8, v17);
  swift_bridgeObjectRelease(0x8000000000000000);
  v18 = *((_BYTE *)v0 + 32);
  v111 = &type metadata for UInt8;
  LOBYTE(v110) = v18;
  sub_100033A2C(&v110, &v108);
  v19 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_100031650(&v108, 10, v19);
  swift_bridgeObjectRelease(0x8000000000000000);
  v20 = WiFiAddress.description.getter(*(unsigned __int16 *)((char *)v1 + 33) | ((unint64_t)*(unsigned int *)((char *)v1 + 35) << 16));
  v111 = &type metadata for String;
  *(_QWORD *)&v110 = v20;
  *((_QWORD *)&v110 + 1) = v21;
  sub_100033A2C(&v110, &v108);
  v22 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_100031650(&v108, 11, v22);
  swift_bridgeObjectRelease(0x8000000000000000);
  v23 = v0[10];
  v111 = &type metadata for Int32;
  LODWORD(v110) = v23;
  sub_100033A2C(&v110, &v108);
  v24 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_100031650(&v108, 12, v24);
  swift_bridgeObjectRelease(0x8000000000000000);
  v25 = v0[11];
  v111 = &type metadata for Int32;
  LODWORD(v110) = v25;
  sub_100033A2C(&v110, &v108);
  v26 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_100031650(&v108, 13, v26);
  swift_bridgeObjectRelease(0x8000000000000000);
  v27 = v0[12];
  v111 = &type metadata for UInt32;
  LODWORD(v110) = v27;
  sub_100033A2C(&v110, &v108);
  v28 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_100031650(&v108, 56, v28);
  swift_bridgeObjectRelease(0x8000000000000000);
  v29 = *((_QWORD *)v0 + 7);
  v111 = &type metadata for UInt64;
  *(_QWORD *)&v110 = v29;
  sub_100033A2C(&v110, &v108);
  v30 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_100031650(&v108, 15, v30);
  swift_bridgeObjectRelease(0x8000000000000000);
  v31 = *((_QWORD *)v0 + 8);
  v111 = &type metadata for UInt64;
  *(_QWORD *)&v110 = v31;
  sub_100033A2C(&v110, &v108);
  v32 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_100031650(&v108, 16, v32);
  swift_bridgeObjectRelease(0x8000000000000000);
  v33 = *((_QWORD *)v0 + 9);
  v111 = &type metadata for UInt64;
  *(_QWORD *)&v110 = v33;
  sub_100033A2C(&v110, &v108);
  v34 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_100031650(&v108, 17, v34);
  swift_bridgeObjectRelease(0x8000000000000000);
  v35 = *((_QWORD *)v0 + 10);
  v111 = &type metadata for UInt64;
  *(_QWORD *)&v110 = v35;
  sub_100033A2C(&v110, &v108);
  v36 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_100031650(&v108, 18, v36);
  swift_bridgeObjectRelease(0x8000000000000000);
  v37 = *((_QWORD *)v0 + 11);
  v111 = &type metadata for UInt64;
  *(_QWORD *)&v110 = v37;
  sub_100033A2C(&v110, &v108);
  v38 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_100031650(&v108, 19, v38);
  swift_bridgeObjectRelease(0x8000000000000000);
  v39 = *((_QWORD *)v0 + 12);
  v111 = &type metadata for UInt64;
  *(_QWORD *)&v110 = v39;
  sub_100033A2C(&v110, &v108);
  v40 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_100031650(&v108, 20, v40);
  swift_bridgeObjectRelease(0x8000000000000000);
  v41 = *((_QWORD *)v0 + 13);
  v111 = &type metadata for UInt64;
  *(_QWORD *)&v110 = v41;
  sub_100033A2C(&v110, &v108);
  v42 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_100031650(&v108, 21, v42);
  swift_bridgeObjectRelease(0x8000000000000000);
  v43 = *((_QWORD *)v0 + 14);
  v111 = &type metadata for UInt64;
  *(_QWORD *)&v110 = v43;
  sub_100033A2C(&v110, &v108);
  v44 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_100031650(&v108, 22, v44);
  swift_bridgeObjectRelease(0x8000000000000000);
  v45 = *((_QWORD *)v0 + 15);
  v111 = &type metadata for UInt64;
  *(_QWORD *)&v110 = v45;
  sub_100033A2C(&v110, &v108);
  v46 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_100031650(&v108, 23, v46);
  swift_bridgeObjectRelease(0x8000000000000000);
  v47 = *((_QWORD *)v0 + 16);
  v111 = &type metadata for UInt64;
  *(_QWORD *)&v110 = v47;
  sub_100033A2C(&v110, &v108);
  v48 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_100031650(&v108, 24, v48);
  swift_bridgeObjectRelease(0x8000000000000000);
  v49 = *((_QWORD *)v0 + 17);
  v111 = &type metadata for UInt64;
  *(_QWORD *)&v110 = v49;
  sub_100033A2C(&v110, &v108);
  v50 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_100031650(&v108, 25, v50);
  swift_bridgeObjectRelease(0x8000000000000000);
  v51 = *((_QWORD *)v0 + 18);
  v111 = &type metadata for UInt64;
  *(_QWORD *)&v110 = v51;
  sub_100033A2C(&v110, &v108);
  v52 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_100031650(&v108, 26, v52);
  swift_bridgeObjectRelease(0x8000000000000000);
  v53 = *((_QWORD *)v0 + 19);
  v111 = &type metadata for UInt64;
  *(_QWORD *)&v110 = v53;
  sub_100033A2C(&v110, &v108);
  v54 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_100031650(&v108, 27, v54);
  swift_bridgeObjectRelease(0x8000000000000000);
  v55 = *((_QWORD *)v0 + 20);
  v111 = &type metadata for UInt64;
  *(_QWORD *)&v110 = v55;
  sub_100033A2C(&v110, &v108);
  v56 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_100031650(&v108, 28, v56);
  swift_bridgeObjectRelease(0x8000000000000000);
  v57 = *((_QWORD *)v0 + 21);
  v111 = &type metadata for UInt64;
  *(_QWORD *)&v110 = v57;
  sub_100033A2C(&v110, &v108);
  v58 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_100031650(&v108, 29, v58);
  swift_bridgeObjectRelease(0x8000000000000000);
  v59 = *((_QWORD *)v0 + 22);
  v111 = &type metadata for UInt64;
  *(_QWORD *)&v110 = v59;
  sub_100033A2C(&v110, &v108);
  v60 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_100031650(&v108, 30, v60);
  swift_bridgeObjectRelease(0x8000000000000000);
  v61 = *((_QWORD *)v0 + 23);
  v111 = &type metadata for UInt64;
  *(_QWORD *)&v110 = v61;
  sub_100033A2C(&v110, &v108);
  v62 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_100031650(&v108, 31, v62);
  swift_bridgeObjectRelease(0x8000000000000000);
  v63 = *((_QWORD *)v0 + 24);
  v111 = &type metadata for UInt64;
  *(_QWORD *)&v110 = v63;
  sub_100033A2C(&v110, &v108);
  v64 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_100031650(&v108, 32, v64);
  swift_bridgeObjectRelease(0x8000000000000000);
  v65 = *((_QWORD *)v0 + 25);
  v111 = &type metadata for UInt64;
  *(_QWORD *)&v110 = v65;
  sub_100033A2C(&v110, &v108);
  v66 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_100031650(&v108, 33, v66);
  swift_bridgeObjectRelease(0x8000000000000000);
  v67 = *((_QWORD *)v0 + 26);
  v111 = &type metadata for UInt64;
  *(_QWORD *)&v110 = v67;
  sub_100033A2C(&v110, &v108);
  v68 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_100031650(&v108, 34, v68);
  swift_bridgeObjectRelease(0x8000000000000000);
  v69 = *((_QWORD *)v0 + 27);
  v111 = &type metadata for UInt64;
  *(_QWORD *)&v110 = v69;
  sub_100033A2C(&v110, &v108);
  v70 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_100031650(&v108, 35, v70);
  swift_bridgeObjectRelease(0x8000000000000000);
  v71 = *((_QWORD *)v0 + 28);
  v111 = &type metadata for UInt64;
  *(_QWORD *)&v110 = v71;
  sub_100033A2C(&v110, &v108);
  v72 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_100031650(&v108, 36, v72);
  swift_bridgeObjectRelease(0x8000000000000000);
  v73 = *((_BYTE *)v0 + 18);
  v111 = &type metadata for UInt8;
  LOBYTE(v110) = v73;
  sub_100033A2C(&v110, &v108);
  v74 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_100031650(&v108, 52, v74);
  swift_bridgeObjectRelease(0x8000000000000000);
  v75 = v0[5];
  v111 = &type metadata for UInt32;
  LODWORD(v110) = v75;
  sub_100033A2C(&v110, &v108);
  v76 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_100031650(&v108, 51, v76);
  swift_bridgeObjectRelease(0x8000000000000000);
  v77 = v0[6];
  v111 = &type metadata for UInt32;
  LODWORD(v110) = v77;
  sub_100033A2C(&v110, &v108);
  v78 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_100031650(&v108, 54, v78);
  swift_bridgeObjectRelease(0x8000000000000000);
  v79 = v0[7];
  v111 = &type metadata for UInt32;
  LODWORD(v110) = v79;
  sub_100033A2C(&v110, &v108);
  v80 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_100031650(&v108, 55, v80);
  swift_bridgeObjectRelease(0x8000000000000000);
  v81 = *((_BYTE *)v0 + 19);
  v111 = &type metadata for UInt8;
  LOBYTE(v110) = v81;
  sub_100033A2C(&v110, &v108);
  v82 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_100031650(&v108, 53, v82);
  swift_bridgeObjectRelease(0x8000000000000000);
  v84 = *((_QWORD *)v0 + 43);
  v83 = (_QWORD *)*((_QWORD *)v0 + 44);
  v85 = v83 && *((_QWORD *)v0 + 43) != 2 && (v84 & 1) == 0;
  v111 = &type metadata for Int;
  *(_QWORD *)&v110 = v85;
  sub_100033A2C(&v110, &v108);
  v86 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
  sub_100031650(&v108, 57, v86);
  swift_bridgeObjectRelease(0x8000000000000000);
  if (v83)
  {
    v111 = &type metadata for Bool;
    LOBYTE(v110) = BYTE2(v84) & 1;
    sub_100033A2C(&v110, &v108);
    v87 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
    sub_100031650(&v108, 58, v87);
    swift_bridgeObjectRelease(0x8000000000000000);
    v111 = &type metadata for UInt8;
    LOBYTE(v110) = (BYTE1(v84) & 1) + 1;
    sub_100033A2C(&v110, &v108);
    v88 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
    sub_100031650(&v108, 59, v88);
    swift_bridgeObjectRelease(0x8000000000000000);
    v89 = v83[2];
    v111 = &type metadata for Int;
    *(_QWORD *)&v110 = v89;
    sub_100033A2C(&v110, &v108);
    v90 = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton);
    sub_100031650(&v108, 60, v90);
    swift_bridgeObjectRelease(0x8000000000000000);
  }
  else
  {
    swift_bridgeObjectRetain(_swiftEmptyDictionarySingleton);
    v91 = sub_10002DFD8(58);
    v93 = v92;
    swift_bridgeObjectRelease(_swiftEmptyDictionarySingleton);
    if ((v93 & 1) != 0)
    {
      if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton) & 1) == 0)
        sub_100148690();
      sub_100033A2C((_OWORD *)(_swiftEmptyDictionarySingleton[7] + 32 * v91), &v108);
      sub_100146400(v91, (uint64_t)_swiftEmptyDictionarySingleton);
      swift_bridgeObjectRelease(0x8000000000000000);
    }
    else
    {
      v108 = 0u;
      v109 = 0u;
    }
    sub_100033A84((uint64_t)&v108, &qword_100405050);
    swift_bridgeObjectRetain(_swiftEmptyDictionarySingleton);
    v94 = sub_10002DFD8(59);
    v96 = v95;
    swift_bridgeObjectRelease(_swiftEmptyDictionarySingleton);
    if ((v96 & 1) != 0)
    {
      if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton) & 1) == 0)
        sub_100148690();
      sub_100033A2C((_OWORD *)(_swiftEmptyDictionarySingleton[7] + 32 * v94), &v108);
      sub_100146400(v94, (uint64_t)_swiftEmptyDictionarySingleton);
      swift_bridgeObjectRelease(0x8000000000000000);
    }
    else
    {
      v108 = 0u;
      v109 = 0u;
    }
    sub_100033A84((uint64_t)&v108, &qword_100405050);
    swift_bridgeObjectRetain(_swiftEmptyDictionarySingleton);
    v97 = sub_10002DFD8(60);
    v99 = v98;
    swift_bridgeObjectRelease(_swiftEmptyDictionarySingleton);
    if ((v99 & 1) != 0)
    {
      if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyDictionarySingleton) & 1) == 0)
        sub_100148690();
      sub_100033A2C((_OWORD *)(_swiftEmptyDictionarySingleton[7] + 32 * v97), &v108);
      sub_100146400(v97, (uint64_t)_swiftEmptyDictionarySingleton);
      swift_bridgeObjectRelease(0x8000000000000000);
    }
    else
    {
      v108 = 0u;
      v109 = 0u;
    }
    sub_100033A84((uint64_t)&v108, &qword_100405050);
  }
  v100 = swift_bridgeObjectRetain(_swiftEmptyDictionarySingleton);
  v101 = sub_1001938B4(v100);
  swift_bridgeObjectRelease(_swiftEmptyDictionarySingleton);
  v102 = *(_QWORD *)(v101 + 16);
  if (v102)
  {
    sub_100012C44(&qword_100408FE8);
    v103 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v102);
  }
  else
  {
    v103 = _swiftEmptyDictionarySingleton;
  }
  *(_QWORD *)&v110 = v103;
  v104 = (_QWORD *)swift_bridgeObjectRetain(v101);
  sub_10015DA04(v104, 1, &v110);
  swift_bridgeObjectRelease(v101);
  if (v83)
  {
    v105 = swift_bridgeObjectRetain(v83);
    sub_100193720(v105, (unint64_t *)&v110);
    swift_bridgeObjectRelease(_swiftEmptyDictionarySingleton);
    v106 = v83;
  }
  else
  {
    v106 = _swiftEmptyDictionarySingleton;
  }
  swift_bridgeObjectRelease(v106);
  sub_100197840(*((_QWORD *)v1 + 29), 0x25u, &v110);
  sub_100197840(*((_QWORD *)v1 + 30), 0x26u, &v110);
  sub_100197840(*((_QWORD *)v1 + 31), 0x27u, &v110);
  sub_100197840(*((_QWORD *)v1 + 32), 0x28u, &v110);
  sub_100197840(*((_QWORD *)v1 + 33), 0x29u, &v110);
  sub_100197840(*((_QWORD *)v1 + 34), 0x2Au, &v110);
  sub_100197840(*((_QWORD *)v1 + 35), 0x2Bu, &v110);
  sub_100197840(*((_QWORD *)v1 + 36), 0x2Cu, &v110);
  sub_100197840(*((_QWORD *)v1 + 37), 0x2Du, &v110);
  sub_100197840(*((_QWORD *)v1 + 38), 0x2Eu, &v110);
  sub_100197840(*((_QWORD *)v1 + 39), 0x2Fu, &v110);
  sub_100197840(*((_QWORD *)v1 + 40), 0x30u, &v110);
  sub_100197840(*((_QWORD *)v1 + 41), 0x31u, &v110);
  sub_100197840(*((_QWORD *)v1 + 42), 0x32u, &v110);
  return v110;
}

void sub_1001959DC(_QWORD *a1, unint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  Swift::String v12;
  void *object;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  char *v21;
  uint64_t v22;
  char v23;
  Class isa;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v26;
  uint64_t v27;
  Swift::String v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  __int16 v34;
  char v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  Class v39;
  char v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;

  v4 = type metadata accessor for DispatchTimeInterval(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin();
  v7 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100012C44(&qword_10040A0D8);
  __chkstk_darwin();
  v48 = (uint64_t *)((char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v49 = 0;
  v50 = 0xE000000000000000;
  _StringGuts.grow(_:)(25);
  swift_bridgeObjectRelease(v50);
  v49 = 0xD000000000000017;
  v50 = 0x8000000100362890;
  v10 = a1;
  v11 = *a1;
  if (__OFADD__(v11, 1))
  {
    __break(1u);
  }
  else
  {
    v44 = v7;
    v45 = v5;
    v46 = v4;
    v51 = v11 + 1;
    v12._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    object = v12._object;
    String.append(_:)(v12);
    swift_bridgeObjectRelease(object);
    v14 = v50;
    v47 = v49;
    v43 = v8;
    v15 = *(int *)(v8 + 48);
    v16 = v48;
    v17 = (char *)v48 + v15;
    v42 = sub_100012C44(&qword_1004061A8);
    v18 = *(int *)(v42 + 48);
    v19 = (uint64_t)&v17[v18];
    v20 = v10;
    v21 = (char *)v10 + v15;
    *v16 = v11;
    v22 = (uint64_t)&v21[v18];
    LOWORD(v18) = *((_WORD *)v21 + 2);
    v23 = v21[6];
    *(_DWORD *)v17 = *(_DWORD *)v21;
    *((_WORD *)v17 + 2) = v18;
    v17[6] = v23;
    sub_100197B04(v22, v19);
    type metadata accessor for NANInternetSharingStatistics.Requester(0);
    sub_100197B48(v19);
    isa = UInt8._bridgeToObjectiveC()().super.super.isa;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a2);
    v49 = *a2;
    *a2 = 0x8000000000000000;
    sub_100031778((uint64_t)isa, v47, v14, isUniquelyReferenced_nonNull_native);
    v26 = *a2;
    *a2 = v49;
    swift_bridgeObjectRelease(v14);
    swift_bridgeObjectRelease(v26);
    v49 = 0;
    v50 = 0xE000000000000000;
    _StringGuts.grow(_:)(23);
    swift_bridgeObjectRelease(v50);
    v49 = 0xD000000000000015;
    v50 = 0x80000001003628B0;
    v27 = *v20;
    if (!__OFADD__(*v20, 1))
    {
      v51 = *v20 + 1;
      v28._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
      v29 = v28._object;
      String.append(_:)(v28);
      swift_bridgeObjectRelease(v29);
      v30 = v49;
      v31 = v50;
      v32 = (char *)v48 + *(int *)(v43 + 48);
      v33 = (uint64_t)&v32[*(int *)(v42 + 48)];
      *v48 = v27;
      v34 = *((_WORD *)v21 + 2);
      v35 = v21[6];
      *(_DWORD *)v32 = *(_DWORD *)v21;
      *((_WORD *)v32 + 2) = v34;
      v32[6] = v35;
      sub_100197B04(v22, v33);
      v37 = v44;
      v36 = v45;
      v38 = v46;
      (*(void (**)(char *, uint64_t, uint64_t))(v45 + 16))(v44, v33, v46);
      sub_100197B48(v33);
      DispatchTimeInterval.rawSeconds.getter();
      (*(void (**)(char *, uint64_t))(v36 + 8))(v37, v38);
      v39 = Int._bridgeToObjectiveC()().super.super.isa;
      v40 = swift_isUniquelyReferenced_nonNull_native(*a2);
      v49 = *a2;
      *a2 = 0x8000000000000000;
      sub_100031778((uint64_t)v39, v30, v31, v40);
      v41 = *a2;
      *a2 = v49;
      swift_bridgeObjectRelease(v31);
      swift_bridgeObjectRelease(v41);
      return;
    }
  }
  __break(1u);
}

uint64_t sub_100195D54(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char v10;

  v2 = *a2;
  v3 = sub_100194468(*a1);
  v5 = v4;
  v6 = sub_100194468(v2);
  if (v3 == v6 && v5 == v7)
  {
    v10 = 1;
    v9 = v5;
  }
  else
  {
    v9 = v7;
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0);
  }
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v9);
  return v10 & 1;
}

Swift::Int sub_100195DDC()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[9];

  v1 = *v0;
  Hasher.init(_seed:)(v6);
  v2 = sub_100194468(v1);
  v4 = v3;
  String.hash(into:)(v6, v2, v3);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

double sub_100195E3C(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double result;

  v3 = sub_100194468(*v1);
  v5 = v4;
  String.hash(into:)(a1, v3, v4);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v5).n128_u64[0];
  return result;
}

Swift::Int sub_100195E7C()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[9];

  v1 = *v0;
  Hasher.init(_seed:)(v6);
  v2 = sub_100194468(v1);
  v4 = v3;
  String.hash(into:)(v6, v2, v3);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_100195ED8@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_1001977DC(*a1, a1[1]);
  *a2 = result;
  return result;
}

uint64_t sub_100195F04@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_100194468(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

CoreP2P::NANInternetSharingStatistics::Provider::SharingMode_optional __swiftcall NANInternetSharingStatistics.Provider.SharingMode.init(rawValue:)(Swift::UInt8 rawValue)
{
  CoreP2P::NANInternetSharingStatistics::Provider::SharingMode_optional v1;

  if (rawValue == 2)
    v1.value = CoreP2P_NANInternetSharingStatistics_Provider_SharingMode_dhcpServer;
  else
    v1.value = CoreP2P_NANInternetSharingStatistics_Provider_SharingMode_unknownDefault;
  if (rawValue == 1)
    return 0;
  else
    return v1;
}

unsigned __int8 *sub_100195F48@<X0>(unsigned __int8 *result@<X0>, char *a2@<X8>)
{
  int v2;
  char v3;
  char v4;

  v2 = *result;
  if (v2 == 2)
    v3 = 1;
  else
    v3 = 2;
  if (v2 == 1)
    v4 = 0;
  else
    v4 = v3;
  *a2 = v4;
  return result;
}

void sub_100195F68(char *a1@<X8>)
{
  _BYTE *v1;
  char v2;

  if (*v1)
    v2 = 2;
  else
    v2 = 1;
  *a1 = v2;
}

Swift::Int sub_100195F80()
{
  unsigned __int8 *v0;
  int v1;
  Swift::UInt8 v2;
  _QWORD v4[9];

  v1 = *v0;
  Hasher.init(_seed:)(v4);
  if (v1)
    v2 = 2;
  else
    v2 = 1;
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void sub_100195FCC()
{
  _BYTE *v0;
  Swift::UInt8 v1;

  if (*v0)
    v1 = 2;
  else
    v1 = 1;
  Hasher._combine(_:)(v1);
}

Swift::Int sub_100196000()
{
  unsigned __int8 *v0;
  int v1;
  Swift::UInt8 v2;
  _QWORD v4[9];

  v1 = *v0;
  Hasher.init(_seed:)(v4);
  if (v1)
    v2 = 2;
  else
    v2 = 1;
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void NANInternetSharingStatistics.Provider.hash(into:)(uint64_t a1, __int16 a2)
{
  char v2;
  Swift::UInt8 v3;

  v2 = HIBYTE(a2);
  if ((a2 & 1) != 0)
    v3 = 2;
  else
    v3 = 1;
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v2 & 1);
}

BOOL static NANInternetSharingStatistics.Provider.__derived_struct_equals(_:_:)(int a1, unsigned int a2)
{
  return ((a1 ^ a2 | ((a1 ^ a2) >> 8)) & 1) == 0;
}

Swift::Int NANInternetSharingStatistics.Provider.hashValue.getter(__int16 a1)
{
  Swift::UInt8 v2;
  _QWORD v4[9];

  Hasher.init(_seed:)(v4);
  if ((a1 & 1) != 0)
    v2 = 2;
  else
    v2 = 1;
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(HIBYTE(a1) & 1);
  return Hasher._finalize()();
}

Swift::Int sub_1001960EC()
{
  unsigned __int8 *v0;
  int v1;
  Swift::UInt8 v2;
  Swift::UInt8 v3;
  _QWORD v5[9];

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)(v5);
  if (v1)
    v3 = 2;
  else
    v3 = 1;
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void sub_100196150()
{
  _BYTE *v0;
  Swift::UInt8 v1;
  Swift::UInt8 v2;

  v1 = v0[1];
  if (*v0)
    v2 = 2;
  else
    v2 = 1;
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v1);
}

Swift::Int sub_100196198()
{
  unsigned __int8 *v0;
  int v1;
  Swift::UInt8 v2;
  Swift::UInt8 v3;
  _QWORD v5[9];

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)(v5);
  if (v1)
    v3 = 2;
  else
    v3 = 1;
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

BOOL sub_1001961F8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2 | a2[1] ^ a1[1]) & 1) == 0;
}

uint64_t NANInternetSharingStatistics.Requester.InternetSharingPolicyChannelState.init(apiValue:)(unint64_t a1)
{
  if (a1 >= 4)
    return 0;
  else
    return 0x3040102u >> (8 * a1);
}

uint64_t sub_100196240@<X0>(unsigned __int8 *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = _s7CoreP2P28NANInternetSharingStatisticsV9RequesterV08InternetD18PolicyChannelStateO8rawValueAGSgs5UInt8V_tcfC_0(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100196268(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100198E68();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t NANInternetSharingStatistics.Requester.dhcpDelay.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for DispatchTimeInterval(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 40))(v1, a1, v3);
}

uint64_t NANInternetSharingStatistics.Requester.policy.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for NANInternetSharingStatistics.Requester(0) + 20));
}

uint64_t NANInternetSharingStatistics.Requester.policy.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for NANInternetSharingStatistics.Requester(0);
  *(_BYTE *)(v1 + *(int *)(result + 20)) = a1;
  return result;
}

uint64_t (*NANInternetSharingStatistics.Requester.policy.modify())(_QWORD)
{
  type metadata accessor for NANInternetSharingStatistics.Requester(0);
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t NANInternetSharingStatistics.Requester.init(dhcpDelay:policy:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t result;

  v6 = type metadata accessor for DispatchTimeInterval(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a3, a1, v6);
  result = type metadata accessor for NANInternetSharingStatistics.Requester(0);
  *(_BYTE *)(a3 + *(int *)(result + 20)) = a2;
  return result;
}

uint64_t NANInternetSharingStatistics.Requester.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, _QWORD *, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD v26[3];
  uint64_t v27;
  uint64_t v28;
  char v29;

  v24 = a2;
  v3 = type metadata accessor for DispatchTimeInterval(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin();
  v6 = (uint64_t *)((char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = type metadata accessor for NANInternetSharingStatistics.Requester(0);
  __chkstk_darwin();
  v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a1[3];
  v10 = a1[4];
  sub_10003259C(a1, v11);
  v12 = v25;
  dispatch thunk of Decoder.unkeyedContainer()(v26, v11, v10);
  if (v12)
    return sub_100014430(a1);
  v25 = a1;
  v22 = v7;
  v23 = v9;
  v13 = v27;
  v14 = v28;
  sub_100034C68((uint64_t)v26, v27);
  *v6 = (int)dispatch thunk of UnkeyedDecodingContainer.decode(_:)(v13, v14);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v4 + 104))(v6, enum case for DispatchTimeInterval.seconds(_:), v3);
  v15 = *(void (**)(char *, _QWORD *, uint64_t))(v4 + 32);
  v16 = (uint64_t)v23;
  v15(v23, v6, v3);
  v17 = v27;
  v18 = v28;
  sub_100034C68((uint64_t)v26, v27);
  v19 = sub_100197AC0();
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)(&type metadata for NANInternetSharingStatistics.Requester.InternetSharingPolicyChannelState, &type metadata for NANInternetSharingStatistics.Requester.InternetSharingPolicyChannelState, v19, v17, v18);
  *(_BYTE *)(v16 + *(int *)(v22 + 20)) = v29;
  sub_100014430(v26);
  sub_100197B04(v16, v24);
  sub_100014430(v25);
  return sub_100197B48(v16);
}

uint64_t NANInternetSharingStatistics.Requester.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[3];
  uint64_t v15;
  uint64_t v16;

  v3 = v1;
  v4 = a1[3];
  v5 = a1[4];
  sub_10003259C(a1, v4);
  dispatch thunk of Encoder.unkeyedContainer()(v14, v4, v5);
  result = DispatchTimeInterval.rawSeconds.getter();
  if (result < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_7;
  }
  v7 = result;
  if (result > 0x7FFFFFFF)
  {
LABEL_7:
    __break(1u);
    return result;
  }
  v8 = v15;
  v9 = v16;
  sub_100034C68((uint64_t)v14, v15);
  dispatch thunk of UnkeyedEncodingContainer.encode(_:)(v7, v8, v9);
  if (!v2)
  {
    v10 = type metadata accessor for NANInternetSharingStatistics.Requester(0);
    v11 = v15;
    v12 = v16;
    v13 = *(unsigned __int8 *)(v3 + *(int *)(v10 + 20));
    sub_100034C68((uint64_t)v14, v15);
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)(v13, v11, v12);
  }
  return sub_100014430(v14);
}

void NANInternetSharingStatistics.Requester.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  Swift::UInt64 *v4;
  int v5;
  int64_t v6;
  uint64_t v7;
  Swift::UInt64 v8;
  BOOL v9;
  BOOL v10;
  unint64_t v11;
  Swift::UInt64 v12;
  uint64_t v13;
  uint64_t v14;

  v1 = type metadata accessor for DispatchTimeInterval(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin();
  v4 = (Swift::UInt64 *)((char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(Swift::UInt64 *, uint64_t, uint64_t))(v2 + 16))(v4, v0, v1);
  v5 = (*(uint64_t (**)(Swift::UInt64 *, uint64_t))(v2 + 88))(v4, v1);
  if (v5 == enum case for DispatchTimeInterval.seconds(_:))
  {
    (*(void (**)(Swift::UInt64 *, uint64_t))(v2 + 96))(v4, v1);
    v6 = *v4;
    v7 = 1000000000;
LABEL_7:
    v8 = v6 * v7;
    v9 = (unsigned __int128)(v6 * (__int128)v7) >> 64 != (v6 * v7) >> 63;
    v10 = v6 <= 0;
    v11 = 0x7FFFFFFFFFFFFFFFLL;
    if (v10)
      v11 = 0x8000000000000000;
    if (v9)
      v12 = v11;
    else
      v12 = v8;
    goto LABEL_12;
  }
  if (v5 == enum case for DispatchTimeInterval.milliseconds(_:))
  {
    (*(void (**)(Swift::UInt64 *, uint64_t))(v2 + 96))(v4, v1);
    v6 = *v4;
    v7 = 1000000;
    goto LABEL_7;
  }
  if (v5 == enum case for DispatchTimeInterval.microseconds(_:))
  {
    (*(void (**)(Swift::UInt64 *, uint64_t))(v2 + 96))(v4, v1);
    v6 = *v4;
    v7 = 1000;
    goto LABEL_7;
  }
  if (v5 == enum case for DispatchTimeInterval.nanoseconds(_:))
  {
    (*(void (**)(Swift::UInt64 *, uint64_t))(v2 + 96))(v4, v1);
    v12 = *v4;
  }
  else
  {
    if (v5 != enum case for DispatchTimeInterval.never(_:))
      (*(void (**)(Swift::UInt64 *, uint64_t))(v2 + 8))(v4, v1);
    v12 = 0x7FFFFFFFFFFFFFFFLL;
  }
LABEL_12:
  Hasher._combine(_:)(v12);
  v13 = type metadata accessor for NANInternetSharingStatistics.Requester(0);
  Hasher._combine(_:)(*(_BYTE *)(v0 + *(int *)(v13 + 20)));
}

BOOL static NANInternetSharingStatistics.Requester.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  if ((static DispatchTimeInterval.== infix(_:_:)(a1, a2) & 1) == 0)
    return 0;
  v4 = type metadata accessor for NANInternetSharingStatistics.Requester(0);
  return *(unsigned __int8 *)(a1 + *(int *)(v4 + 20)) == *(unsigned __int8 *)(a2 + *(int *)(v4 + 20));
}

Swift::Int NANInternetSharingStatistics.Requester.hashValue.getter()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  NANInternetSharingStatistics.Requester.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int sub_100196928()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  NANInternetSharingStatistics.Requester.hash(into:)();
  return Hasher._finalize()();
}

uint64_t sub_100196960@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return NANInternetSharingStatistics.Requester.init(from:)(a1, a2);
}

uint64_t sub_100196974(_QWORD *a1)
{
  return NANInternetSharingStatistics.Requester.encode(to:)(a1);
}

BOOL sub_100196988(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (static DispatchTimeInterval.== infix(_:_:)(a1, a2) & 1) != 0
      && *(unsigned __int8 *)(a1 + *(int *)(a3 + 20)) == *(unsigned __int8 *)(a2 + *(int *)(a3 + 20));
}

uint64_t NANInternetSharingStatistics.provider.getter(unsigned int a1)
{
  return (a1 >> 8) & 0x101;
}

uint64_t NANInternetSharingStatistics.provider.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 1) = result & 1;
  *(_BYTE *)(v1 + 2) = BYTE1(result) & 1;
  return result;
}

uint64_t NANInternetSharingStatistics.init(provider:)(__int16 a1)
{
  int v2;

  sub_10001EF14((uint64_t)_swiftEmptyArrayStorage);
  if ((a1 & 1) != 0)
    v2 = 258;
  else
    v2 = 2;
  return v2 & 0xFFFEFFFF | ((((unsigned __int16)(a1 & 0x100) >> 8) & 1) << 16);
}

void NANInternetSharingStatistics.hash(into:)(__int128 *a1, int a2, uint64_t a3, char a4)
{
  Swift::UInt8 v8;

  if (a2 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(a2 & 1);
  }
  if ((a2 & 0x100) != 0)
    v8 = 2;
  else
    v8 = 1;
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(BYTE2(a2) & 1);
  swift_bridgeObjectRetain(a3);
  sub_100077890(a1, a3);
  swift_bridgeObjectRelease(a3);
  Hasher._combine(_:)(a4 & 1);
}

uint64_t static NANInternetSharingStatistics.__derived_struct_equals(_:_:)(int a1, uint64_t a2, char a3, int a4, uint64_t a5, char a6)
{
  return sub_1001972F0(a1 & 0x101FF, a2, a3, a4 & 0x101FF, a5, a6);
}

Swift::Int NANInternetSharingStatistics.hashValue.getter(int a1, uint64_t a2, char a3)
{
  Swift::UInt8 v6;
  __int128 v8[4];

  Hasher.init(_seed:)(v8);
  if (a1 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(a1 & 1);
  }
  if ((a1 & 0x100) != 0)
    v6 = 2;
  else
    v6 = 1;
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(BYTE2(a1) & 1);
  swift_bridgeObjectRetain(a2);
  sub_100077890(v8, a2);
  swift_bridgeObjectRelease(a2);
  Hasher._combine(_:)(a3 & 1);
  return Hasher._finalize()();
}

Swift::Int sub_100196BC8()
{
  unsigned __int8 *v0;
  int v1;
  int v2;
  int v3;

  if (v0[1])
    v1 = 256;
  else
    v1 = 0;
  v2 = v1 | *v0;
  if (v0[2])
    v3 = 0x10000;
  else
    v3 = 0;
  return NANInternetSharingStatistics.hashValue.getter(v2 | v3, *((_QWORD *)v0 + 1), v0[16]);
}

void sub_100196C00(__int128 *a1)
{
  unsigned __int8 *v1;
  int v2;
  int v3;
  int v4;

  if (v1[1])
    v2 = 256;
  else
    v2 = 0;
  v3 = v2 | *v1;
  if (v1[2])
    v4 = 0x10000;
  else
    v4 = 0;
  NANInternetSharingStatistics.hash(into:)(a1, v3 | v4, *((_QWORD *)v1 + 1), v1[16]);
}

Swift::Int sub_100196C38()
{
  unsigned __int8 *v0;
  int v1;
  int v2;
  Swift::UInt8 v3;
  uint64_t v4;
  Swift::UInt8 v5;
  Swift::UInt8 v6;
  __int128 v8[4];

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  v4 = *((_QWORD *)v0 + 1);
  v5 = v0[16];
  Hasher.init(_seed:)(v8);
  if (v1 == 2)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1 & 1);
  }
  if (v2)
    v6 = 2;
  else
    v6 = 1;
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v3);
  swift_bridgeObjectRetain(v4);
  sub_100077890(v8, v4);
  swift_bridgeObjectRelease(v4);
  Hasher._combine(_:)(v5);
  return Hasher._finalize()();
}

uint64_t sub_100196D08(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  char v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;

  v2 = *((_QWORD *)a1 + 1);
  v3 = a1[16];
  if (a1[1])
    v4 = 256;
  else
    v4 = 0;
  v5 = v4 | *a1;
  if (a1[2])
    v6 = 0x10000;
  else
    v6 = 0;
  v7 = v5 | v6;
  if (a2[1])
    v8 = 256;
  else
    v8 = 0;
  v9 = v8 | *a2;
  if (a2[2])
    v10 = 0x10000;
  else
    v10 = 0;
  return sub_1001972F0(v7, v2, v3, v9 | v10, *((_QWORD *)a2 + 1), a2[16]);
}

uint64_t sub_100196D70@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  int64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void *v11;
  id v12;
  int64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  int64_t v17;
  void (*v18)(_OWORD *);
  uint64_t result;
  _OWORD v20[2];
  uint64_t v21;
  _OWORD v22[2];
  uint64_t v23;
  _OWORD v24[2];
  uint64_t v25;

  v3 = *v1;
  v4 = v1[1];
  v6 = v1[2];
  v5 = v1[3];
  v7 = v5;
  v8 = v1[4];
  if (v8)
  {
    v9 = (v8 - 1) & v8;
    v10 = __clz(__rbit64(v8)) | (v5 << 6);
LABEL_3:
    v11 = *(void **)(*(_QWORD *)(v3 + 48) + 8 * v10);
    sub_100014450(*(_QWORD *)(v3 + 56) + 32 * v10, (uint64_t)v24 + 8);
    *(_QWORD *)&v24[0] = v11;
    v12 = v11;
    goto LABEL_23;
  }
  v13 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
    return result;
  }
  v14 = (unint64_t)(v6 + 64) >> 6;
  if (v13 < v14)
  {
    v15 = *(_QWORD *)(v4 + 8 * v13);
    if (v15)
    {
LABEL_7:
      v9 = (v15 - 1) & v15;
      v10 = __clz(__rbit64(v15)) + (v13 << 6);
      v7 = v13;
      goto LABEL_3;
    }
    v16 = v5 + 2;
    v7 = v5 + 1;
    if (v5 + 2 < v14)
    {
      v15 = *(_QWORD *)(v4 + 8 * v16);
      if (v15)
      {
LABEL_10:
        v13 = v16;
        goto LABEL_7;
      }
      v7 = v5 + 2;
      if (v5 + 3 < v14)
      {
        v15 = *(_QWORD *)(v4 + 8 * (v5 + 3));
        if (v15)
        {
          v13 = v5 + 3;
          goto LABEL_7;
        }
        v16 = v5 + 4;
        v7 = v5 + 3;
        if (v5 + 4 < v14)
        {
          v15 = *(_QWORD *)(v4 + 8 * v16);
          if (v15)
            goto LABEL_10;
          v13 = v5 + 5;
          v7 = v5 + 4;
          if (v5 + 5 < v14)
          {
            v15 = *(_QWORD *)(v4 + 8 * v13);
            if (v15)
              goto LABEL_7;
            v7 = v14 - 1;
            v17 = v5 + 6;
            while (v14 != v17)
            {
              v15 = *(_QWORD *)(v4 + 8 * v17++);
              if (v15)
              {
                v13 = v17 - 1;
                goto LABEL_7;
              }
            }
          }
        }
      }
    }
  }
  v9 = 0;
  v25 = 0;
  memset(v24, 0, sizeof(v24));
LABEL_23:
  *v1 = v3;
  v1[1] = v4;
  v1[2] = v6;
  v1[3] = v7;
  v1[4] = v9;
  v18 = (void (*)(_OWORD *))v1[5];
  result = sub_100063EB8((uint64_t)v24, (uint64_t)v22, &qword_10040A0F8);
  if (*(_QWORD *)&v22[0])
  {
    v20[0] = v22[0];
    v20[1] = v22[1];
    v21 = v23;
    v18(v20);
    return sub_100033A84((uint64_t)v20, &qword_10040A100);
  }
  else
  {
    *(_QWORD *)(a1 + 32) = 0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

void sub_100196F48()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  int64_t v3;
  int64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void (*v11)(uint64_t *__return_ptr, _QWORD *);
  id v12;
  int64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  int64_t v18;
  uint64_t v19;
  _QWORD v20[3];

  v1 = *v0;
  v3 = v0[3];
  v2 = v0[4];
  v4 = v3;
  if (v2)
  {
    v5 = (v2 - 1) & v2;
    v6 = __clz(__rbit64(v2)) | (v3 << 6);
LABEL_3:
    v7 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 16 * v6);
    v8 = *v7;
    v9 = v7[1];
    v10 = *(void **)(*(_QWORD *)(v1 + 56) + 8 * v6);
    v0[3] = v4;
    v0[4] = v5;
    v11 = (void (*)(uint64_t *__return_ptr, _QWORD *))v0[5];
    v20[0] = v8;
    v20[1] = v9;
    v20[2] = v10;
    swift_bridgeObjectRetain(v9);
    v12 = v10;
    v11(&v19, v20);

    swift_bridgeObjectRelease(v9);
    return;
  }
  v13 = v3 + 1;
  if (__OFADD__(v3, 1))
  {
    __break(1u);
  }
  else
  {
    v14 = (unint64_t)(v0[2] + 64) >> 6;
    if (v13 < v14)
    {
      v15 = v0[1];
      v16 = *(_QWORD *)(v15 + 8 * v13);
      if (v16)
      {
LABEL_7:
        v5 = (v16 - 1) & v16;
        v6 = __clz(__rbit64(v16)) + (v13 << 6);
        v4 = v13;
        goto LABEL_3;
      }
      v17 = v3 + 2;
      v4 = v3 + 1;
      if (v3 + 2 < v14)
      {
        v16 = *(_QWORD *)(v15 + 8 * v17);
        if (v16)
        {
LABEL_10:
          v13 = v17;
          goto LABEL_7;
        }
        v4 = v3 + 2;
        if (v3 + 3 < v14)
        {
          v16 = *(_QWORD *)(v15 + 8 * (v3 + 3));
          if (v16)
          {
            v13 = v3 + 3;
            goto LABEL_7;
          }
          v17 = v3 + 4;
          v4 = v3 + 3;
          if (v3 + 4 < v14)
          {
            v16 = *(_QWORD *)(v15 + 8 * v17);
            if (v16)
              goto LABEL_10;
            v13 = v3 + 5;
            v4 = v3 + 4;
            if (v3 + 5 < v14)
            {
              v16 = *(_QWORD *)(v15 + 8 * v13);
              if (v16)
                goto LABEL_7;
              v4 = v14 - 1;
              v18 = v3 + 6;
              while (v14 != v18)
              {
                v16 = *(_QWORD *)(v15 + 8 * v18++);
                if (v16)
                {
                  v13 = v18 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }
    v0[3] = v4;
    v0[4] = 0;
  }
}

uint64_t sub_1001970D4@<X0>(_OWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  int64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  int64_t v18;
  void (*v19)(_OWORD *);
  uint64_t result;
  _OWORD v21[3];
  _OWORD v22[3];
  __int128 v23;
  _OWORD v24[2];

  v3 = *v1;
  v4 = v1[1];
  v6 = v1[2];
  v5 = v1[3];
  v7 = v5;
  v8 = v1[4];
  if (v8)
  {
    v9 = (v8 - 1) & v8;
    v10 = __clz(__rbit64(v8)) | (v5 << 6);
LABEL_3:
    v11 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v10);
    v13 = *v11;
    v12 = v11[1];
    sub_100014450(*(_QWORD *)(v3 + 56) + 32 * v10, (uint64_t)v24);
    *(_QWORD *)&v23 = v13;
    *((_QWORD *)&v23 + 1) = v12;
    swift_bridgeObjectRetain(v12);
    goto LABEL_23;
  }
  v14 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
    return result;
  }
  v15 = (unint64_t)(v6 + 64) >> 6;
  if (v14 < v15)
  {
    v16 = *(_QWORD *)(v4 + 8 * v14);
    if (v16)
    {
LABEL_7:
      v9 = (v16 - 1) & v16;
      v10 = __clz(__rbit64(v16)) + (v14 << 6);
      v7 = v14;
      goto LABEL_3;
    }
    v17 = v5 + 2;
    v7 = v5 + 1;
    if (v5 + 2 < v15)
    {
      v16 = *(_QWORD *)(v4 + 8 * v17);
      if (v16)
      {
LABEL_10:
        v14 = v17;
        goto LABEL_7;
      }
      v7 = v5 + 2;
      if (v5 + 3 < v15)
      {
        v16 = *(_QWORD *)(v4 + 8 * (v5 + 3));
        if (v16)
        {
          v14 = v5 + 3;
          goto LABEL_7;
        }
        v17 = v5 + 4;
        v7 = v5 + 3;
        if (v5 + 4 < v15)
        {
          v16 = *(_QWORD *)(v4 + 8 * v17);
          if (v16)
            goto LABEL_10;
          v14 = v5 + 5;
          v7 = v5 + 4;
          if (v5 + 5 < v15)
          {
            v16 = *(_QWORD *)(v4 + 8 * v14);
            if (v16)
              goto LABEL_7;
            v7 = v15 - 1;
            v18 = v5 + 6;
            while (v15 != v18)
            {
              v16 = *(_QWORD *)(v4 + 8 * v18++);
              if (v16)
              {
                v14 = v18 - 1;
                goto LABEL_7;
              }
            }
          }
        }
      }
    }
  }
  v9 = 0;
  memset(v24, 0, sizeof(v24));
  v23 = 0u;
LABEL_23:
  *v1 = v3;
  v1[1] = v4;
  v1[2] = v6;
  v1[3] = v7;
  v1[4] = v9;
  v19 = (void (*)(_OWORD *))v1[5];
  result = sub_100063EB8((uint64_t)&v23, (uint64_t)v22, &qword_10040A0F0);
  if (*((_QWORD *)&v22[0] + 1))
  {
    v21[0] = v22[0];
    v21[1] = v22[1];
    v21[2] = v22[2];
    v19(v21);
    return sub_100033A84((uint64_t)v21, &qword_100409340);
  }
  else
  {
    a1[1] = 0u;
    a1[2] = 0u;
    *a1 = 0u;
  }
  return result;
}

id sub_1001972B8@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  id v4;

  v2 = a1[1];
  v4 = (id)a1[2];
  *a2 = *a1;
  a2[1] = v2;
  a2[2] = v4;
  swift_bridgeObjectRetain(v2);
  return v4;
}

uint64_t sub_1001972F0(int a1, uint64_t a2, char a3, int a4, uint64_t a5, char a6)
{
  char v8;
  char v9;

  if (a1 == 2)
  {
    if (a4 != 2)
    {
      v8 = 0;
      return v8 & 1;
    }
  }
  else
  {
    v8 = 0;
    if (a4 == 2 || ((a4 ^ a1) & 1) != 0)
      return v8 & 1;
  }
  v8 = 0;
  if (((a1 ^ a4) & 0x100) == 0 && ((a1 ^ a4) & 0x10000) == 0)
  {
    v9 = sub_100073C98(a2, a5);
    v8 = a3 ^ a6 ^ 1;
    if ((v9 & 1) == 0)
      v8 = 0;
  }
  return v8 & 1;
}

uint64_t _s7CoreP2P23NANCoreAnalyticsMetricsV23__derived_struct_equalsySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  int v11;
  char v12;

  if (*(_DWORD *)a1 == *(_DWORD *)a2
    && ((*(unsigned __int8 *)(a1 + 4) ^ *(unsigned __int8 *)(a2 + 4)) & 1) == 0
    && ((*(unsigned __int8 *)(a1 + 5) ^ *(unsigned __int8 *)(a2 + 5)) & 1) == 0
    && ((*(unsigned __int8 *)(a1 + 6) ^ *(unsigned __int8 *)(a2 + 6)) & 1) == 0
    && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8)
    && *(_DWORD *)(a1 + 12) == *(_DWORD *)(a2 + 12)
    && *(unsigned __int8 *)(a1 + 16) == *(unsigned __int8 *)(a2 + 16)
    && *(unsigned __int8 *)(a1 + 17) == *(unsigned __int8 *)(a2 + 17)
    && *(unsigned __int8 *)(a1 + 18) == *(unsigned __int8 *)(a2 + 18)
    && *(unsigned __int8 *)(a1 + 19) == *(unsigned __int8 *)(a2 + 19)
    && *(_DWORD *)(a1 + 20) == *(_DWORD *)(a2 + 20)
    && *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24)
    && *(_DWORD *)(a1 + 28) == *(_DWORD *)(a2 + 28)
    && *(unsigned __int8 *)(a1 + 32) == *(unsigned __int8 *)(a2 + 32))
  {
    v2 = *(_DWORD *)(a1 + 33) == *(_DWORD *)(a2 + 33)
      && *(unsigned __int16 *)(a1 + 37) == *(unsigned __int16 *)(a2 + 37);
    if (v2
      && *(_DWORD *)(a1 + 40) == *(_DWORD *)(a2 + 40)
      && *(_DWORD *)(a1 + 44) == *(_DWORD *)(a2 + 44)
      && *(_DWORD *)(a1 + 48) == *(_DWORD *)(a2 + 48)
      && *(_QWORD *)(a1 + 56) == *(_QWORD *)(a2 + 56)
      && *(_QWORD *)(a1 + 64) == *(_QWORD *)(a2 + 64)
      && *(_QWORD *)(a1 + 72) == *(_QWORD *)(a2 + 72)
      && *(_QWORD *)(a1 + 80) == *(_QWORD *)(a2 + 80)
      && *(_QWORD *)(a1 + 88) == *(_QWORD *)(a2 + 88)
      && *(_QWORD *)(a1 + 96) == *(_QWORD *)(a2 + 96)
      && *(_QWORD *)(a1 + 104) == *(_QWORD *)(a2 + 104)
      && *(_QWORD *)(a1 + 112) == *(_QWORD *)(a2 + 112)
      && *(_QWORD *)(a1 + 120) == *(_QWORD *)(a2 + 120)
      && *(_QWORD *)(a1 + 128) == *(_QWORD *)(a2 + 128)
      && *(_QWORD *)(a1 + 136) == *(_QWORD *)(a2 + 136)
      && *(_QWORD *)(a1 + 144) == *(_QWORD *)(a2 + 144)
      && *(_QWORD *)(a1 + 152) == *(_QWORD *)(a2 + 152)
      && *(_QWORD *)(a1 + 160) == *(_QWORD *)(a2 + 160)
      && *(_QWORD *)(a1 + 168) == *(_QWORD *)(a2 + 168)
      && *(_QWORD *)(a1 + 176) == *(_QWORD *)(a2 + 176)
      && *(_QWORD *)(a1 + 184) == *(_QWORD *)(a2 + 184)
      && *(_QWORD *)(a1 + 192) == *(_QWORD *)(a2 + 192)
      && *(_QWORD *)(a1 + 200) == *(_QWORD *)(a2 + 200)
      && *(_QWORD *)(a1 + 208) == *(_QWORD *)(a2 + 208)
      && *(_QWORD *)(a1 + 216) == *(_QWORD *)(a2 + 216)
      && *(_QWORD *)(a1 + 224) == *(_QWORD *)(a2 + 224)
      && sub_100089220(*(_QWORD *)(a1 + 232), *(_QWORD *)(a2 + 232))
      && sub_100089220(*(_QWORD *)(a1 + 240), *(_QWORD *)(a2 + 240))
      && sub_100089220(*(_QWORD *)(a1 + 248), *(_QWORD *)(a2 + 248))
      && sub_100089220(*(_QWORD *)(a1 + 256), *(_QWORD *)(a2 + 256))
      && sub_100089220(*(_QWORD *)(a1 + 264), *(_QWORD *)(a2 + 264))
      && sub_100089220(*(_QWORD *)(a1 + 272), *(_QWORD *)(a2 + 272))
      && sub_100089220(*(_QWORD *)(a1 + 280), *(_QWORD *)(a2 + 280))
      && sub_100089220(*(_QWORD *)(a1 + 288), *(_QWORD *)(a2 + 288))
      && sub_100089220(*(_QWORD *)(a1 + 296), *(_QWORD *)(a2 + 296))
      && sub_100089220(*(_QWORD *)(a1 + 304), *(_QWORD *)(a2 + 304))
      && sub_100089220(*(_QWORD *)(a1 + 312), *(_QWORD *)(a2 + 312))
      && sub_100089220(*(_QWORD *)(a1 + 320), *(_QWORD *)(a2 + 320))
      && sub_100089220(*(_QWORD *)(a1 + 328), *(_QWORD *)(a2 + 328))
      && sub_100089220(*(_QWORD *)(a1 + 336), *(_QWORD *)(a2 + 336)))
    {
      v5 = *(_QWORD *)(a1 + 352);
      v6 = *(_QWORD *)(a2 + 352);
      if (v5)
      {
        if (v6)
        {
          v7 = *(_QWORD *)(a2 + 344);
          v8 = *(_BYTE *)(a2 + 360);
          v9 = *(_QWORD *)(a1 + 344) & 0x101FFLL;
          v10 = *(_BYTE *)(a1 + 360) & 1;
          v11 = v7 & 0x101FF;
          v12 = v8 & 1;
          swift_bridgeObjectRetain(v5);
          swift_bridgeObjectRetain(v6);
          LOBYTE(v9) = sub_1001972F0(v9, v5, v10, v11, v6, v12);
          swift_bridgeObjectRelease(v5);
          swift_bridgeObjectRelease(v6);
          if ((v9 & 1) != 0)
            return 1;
        }
      }
      else if (!v6)
      {
        return 1;
      }
    }
  }
  return 0;
}

uint64_t sub_1001977DC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = _findStringSwitchCaseWithCache(cases:string:cache:)(&off_1003D62F0, a1, a2, &unk_100404288);
  swift_bridgeObjectRelease(a2);
  if (v3 >= 0x3F)
    return 63;
  else
    return v3;
}

uint64_t _s7CoreP2P28NANInternetSharingStatisticsV9RequesterV08InternetD18PolicyChannelStateO8rawValueAGSgs5UInt8V_tcfC_0(uint64_t result)
{
  if (result >= 5u)
    return 5;
  else
    return result;
}

void sub_100197840(uint64_t a1, unsigned __int8 a2, _QWORD *a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  objc_class *v9;
  objc_class *v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  Swift::String v15;
  objc_class *v16;
  NSNumber v17;
  unint64_t v18;
  unint64_t v19;
  NSNumber *v20;
  uint64_t v21;
  void *v22;
  _QWORD *v23;
  uint64_t v24;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v26;
  _QWORD *v27;
  _QWORD v29[2];
  _QWORD *v30;

  v30 = _swiftEmptyArrayStorage;
  swift_bridgeObjectRetain(a1);
  sub_100075194(0, 0, 0);
  v5 = _swiftEmptyArrayStorage;
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    v27 = a3;
    swift_bridgeObjectRetain(a1);
    v7 = 0;
    do
    {
      v8 = sub_100194468(a2);
      v10 = v9;
      v11 = sub_100035EE0();
      v12 = BinaryInteger.description.getter(&type metadata for Int, v11);
      v14 = v13;
      v29[0] = v8;
      v29[1] = v10;
      swift_bridgeObjectRetain(v10);
      v15._countAndFlagsBits = v12;
      v15._object = v14;
      String.append(_:)(v15);
      swift_bridgeObjectRelease(v10);
      swift_bridgeObjectRelease(v14);
      v16 = (objc_class *)v8;
      v17.super.super.isa = Double._bridgeToObjectiveC()().super.super.isa;
      v30 = v5;
      v19 = v5[2];
      v18 = v5[3];
      if (v19 >= v18 >> 1)
      {
        sub_100075194(v18 > 1, v19 + 1, 1);
        v5 = v30;
      }
      ++v7;
      v5[2] = v19 + 1;
      v20 = (NSNumber *)&v5[3 * v19];
      v20[4].super.super.isa = v16;
      v20[5].super.super.isa = v10;
      v20[6].super.super.isa = v17.super.super.isa;
    }
    while (v6 != v7);
    swift_bridgeObjectRelease_n(a1, 2);
    a3 = v27;
    v21 = v5[2];
    if (v21)
      goto LABEL_7;
LABEL_9:
    v22 = &_swiftEmptyDictionarySingleton;
    goto LABEL_10;
  }
  swift_bridgeObjectRelease(a1);
  v21 = _swiftEmptyArrayStorage[2];
  if (!v21)
    goto LABEL_9;
LABEL_7:
  sub_100012C44(&qword_100408FE8);
  v22 = (void *)static _DictionaryStorage.allocate(capacity:)(v21);
LABEL_10:
  v29[0] = v22;
  v23 = (_QWORD *)swift_bridgeObjectRetain(v5);
  sub_10015DA04(v23, 1, v29);
  swift_release(v5);
  v24 = v29[0];
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a3);
  v29[0] = *a3;
  *a3 = 0x8000000000000000;
  sub_10015DD90(v24, (uint64_t)sub_1001972B8, 0, isUniquelyReferenced_nonNull_native, v29);
  v26 = *a3;
  *a3 = v29[0];
  swift_bridgeObjectRelease(v26);
}

uint64_t type metadata accessor for NANInternetSharingStatistics.Requester(uint64_t a1)
{
  uint64_t result;

  result = qword_10040A098;
  if (!qword_10040A098)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for NANInternetSharingStatistics.Requester);
  return result;
}

unint64_t sub_100197AC0()
{
  unint64_t result;

  result = qword_10040A000;
  if (!qword_10040A000)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANInternetSharingStatistics.Requester.InternetSharingPolicyChannelState, &type metadata for NANInternetSharingStatistics.Requester.InternetSharingPolicyChannelState);
    atomic_store(result, (unint64_t *)&qword_10040A000);
  }
  return result;
}

uint64_t sub_100197B04(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for NANInternetSharingStatistics.Requester(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100197B48(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for NANInternetSharingStatistics.Requester(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_100197B88()
{
  unint64_t result;

  result = qword_10040A008;
  if (!qword_10040A008)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANCoreAnalyticsMetrics, &type metadata for NANCoreAnalyticsMetrics);
    atomic_store(result, (unint64_t *)&qword_10040A008);
  }
  return result;
}

unint64_t sub_100197BD0()
{
  unint64_t result;

  result = qword_10040A010;
  if (!qword_10040A010)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANInternetSharingStatistics.Provider.SharingMode, &type metadata for NANInternetSharingStatistics.Provider.SharingMode);
    atomic_store(result, (unint64_t *)&qword_10040A010);
  }
  return result;
}

unint64_t sub_100197C18()
{
  unint64_t result;

  result = qword_10040A018;
  if (!qword_10040A018)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANInternetSharingStatistics.Provider, &type metadata for NANInternetSharingStatistics.Provider);
    atomic_store(result, (unint64_t *)&qword_10040A018);
  }
  return result;
}

unint64_t sub_100197C60()
{
  unint64_t result;

  result = qword_10040A020;
  if (!qword_10040A020)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANInternetSharingStatistics.Requester.InternetSharingPolicyChannelState, &type metadata for NANInternetSharingStatistics.Requester.InternetSharingPolicyChannelState);
    atomic_store(result, (unint64_t *)&qword_10040A020);
  }
  return result;
}

unint64_t sub_100197CA8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10040A028;
  if (!qword_10040A028)
  {
    v1 = type metadata accessor for NANInternetSharingStatistics.Requester(255);
    result = swift_getWitnessTable(protocol conformance descriptor for NANInternetSharingStatistics.Requester, v1);
    atomic_store(result, (unint64_t *)&qword_10040A028);
  }
  return result;
}

unint64_t sub_100197CF4()
{
  unint64_t result;

  result = qword_10040A030;
  if (!qword_10040A030)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANInternetSharingStatistics.Status, &type metadata for NANInternetSharingStatistics.Status);
    atomic_store(result, (unint64_t *)&qword_10040A030);
  }
  return result;
}

unint64_t sub_100197D3C()
{
  unint64_t result;

  result = qword_10040A038;
  if (!qword_10040A038)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANInternetSharingStatistics, &type metadata for NANInternetSharingStatistics);
    atomic_store(result, (unint64_t *)&qword_10040A038);
  }
  return result;
}

uint64_t destroy for NANCoreAnalyticsMetrics(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[29]);
  swift_bridgeObjectRelease(a1[30]);
  swift_bridgeObjectRelease(a1[31]);
  swift_bridgeObjectRelease(a1[32]);
  swift_bridgeObjectRelease(a1[33]);
  swift_bridgeObjectRelease(a1[34]);
  swift_bridgeObjectRelease(a1[35]);
  swift_bridgeObjectRelease(a1[36]);
  swift_bridgeObjectRelease(a1[37]);
  swift_bridgeObjectRelease(a1[38]);
  swift_bridgeObjectRelease(a1[39]);
  swift_bridgeObjectRelease(a1[40]);
  swift_bridgeObjectRelease(a1[41]);
  swift_bridgeObjectRelease(a1[42]);
  return swift_bridgeObjectRelease(a1[44]);
}

uint64_t initializeWithCopy for NANCoreAnalyticsMetrics(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
  *(_WORD *)(a1 + 5) = *(_WORD *)(a2 + 5);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 20) = *(_QWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v3 = *(_DWORD *)(a2 + 33);
  *(_WORD *)(a1 + 37) = *(_WORD *)(a2 + 37);
  *(_DWORD *)(a1 + 33) = v3;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  v4 = *(_QWORD *)(a2 + 232);
  v5 = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a1 + 232) = v4;
  *(_QWORD *)(a1 + 240) = v5;
  v6 = *(_QWORD *)(a2 + 248);
  v7 = *(_QWORD *)(a2 + 256);
  *(_QWORD *)(a1 + 248) = v6;
  *(_QWORD *)(a1 + 256) = v7;
  v9 = *(_QWORD *)(a2 + 264);
  v8 = *(_QWORD *)(a2 + 272);
  *(_QWORD *)(a1 + 264) = v9;
  *(_QWORD *)(a1 + 272) = v8;
  v10 = *(_QWORD *)(a2 + 280);
  v11 = *(_QWORD *)(a2 + 288);
  *(_QWORD *)(a1 + 280) = v10;
  *(_QWORD *)(a1 + 288) = v11;
  v12 = *(_QWORD *)(a2 + 296);
  v13 = *(_QWORD *)(a2 + 304);
  *(_QWORD *)(a1 + 296) = v12;
  *(_QWORD *)(a1 + 304) = v13;
  v14 = *(_QWORD *)(a2 + 320);
  v16 = *(_QWORD *)(a2 + 312);
  *(_QWORD *)(a1 + 312) = v16;
  *(_QWORD *)(a1 + 320) = v14;
  v18 = v14;
  v19 = *(_QWORD *)(a2 + 328);
  v20 = *(_QWORD *)(a2 + 336);
  *(_QWORD *)(a1 + 328) = v19;
  *(_QWORD *)(a1 + 336) = v20;
  *(_BYTE *)(a1 + 344) = *(_BYTE *)(a2 + 344);
  *(_WORD *)(a1 + 345) = *(_WORD *)(a2 + 345);
  v17 = *(_QWORD *)(a2 + 352);
  *(_QWORD *)(a1 + 352) = v17;
  *(_BYTE *)(a1 + 360) = *(_BYTE *)(a2 + 360);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRetain(v17);
  return a1;
}

uint64_t assignWithCopy for NANCoreAnalyticsMetrics(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v4 = a2 + 345;
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
  *(_BYTE *)(a1 + 5) = *(_BYTE *)(a2 + 5);
  *(_BYTE *)(a1 + 6) = *(_BYTE *)(a2 + 6);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  *(_BYTE *)(a1 + 18) = *(_BYTE *)(a2 + 18);
  *(_BYTE *)(a1 + 19) = *(_BYTE *)(a2 + 19);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_BYTE *)(a1 + 33) = *(_BYTE *)(a2 + 33);
  *(_BYTE *)(a1 + 34) = *(_BYTE *)(a2 + 34);
  *(_BYTE *)(a1 + 35) = *(_BYTE *)(a2 + 35);
  *(_BYTE *)(a1 + 36) = *(_BYTE *)(a2 + 36);
  *(_BYTE *)(a1 + 37) = *(_BYTE *)(a2 + 37);
  *(_BYTE *)(a1 + 38) = *(_BYTE *)(a2 + 38);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  v5 = *(_QWORD *)(a2 + 232);
  v6 = *(_QWORD *)(a1 + 232);
  *(_QWORD *)(a1 + 232) = v5;
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRelease(v6);
  v7 = *(_QWORD *)(a2 + 240);
  v8 = *(_QWORD *)(a1 + 240);
  *(_QWORD *)(a1 + 240) = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v8);
  v9 = *(_QWORD *)(a2 + 248);
  v10 = *(_QWORD *)(a1 + 248);
  *(_QWORD *)(a1 + 248) = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v10);
  v11 = *(_QWORD *)(a2 + 256);
  v12 = *(_QWORD *)(a1 + 256);
  *(_QWORD *)(a1 + 256) = v11;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRelease(v12);
  v13 = *(_QWORD *)(a2 + 264);
  v14 = *(_QWORD *)(a1 + 264);
  *(_QWORD *)(a1 + 264) = v13;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRelease(v14);
  v15 = *(_QWORD *)(a2 + 272);
  v16 = *(_QWORD *)(a1 + 272);
  *(_QWORD *)(a1 + 272) = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16);
  v17 = *(_QWORD *)(a2 + 280);
  v18 = *(_QWORD *)(a1 + 280);
  *(_QWORD *)(a1 + 280) = v17;
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRelease(v18);
  v19 = *(_QWORD *)(a2 + 288);
  v20 = *(_QWORD *)(a1 + 288);
  *(_QWORD *)(a1 + 288) = v19;
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRelease(v20);
  v21 = *(_QWORD *)(a2 + 296);
  v22 = *(_QWORD *)(a1 + 296);
  *(_QWORD *)(a1 + 296) = v21;
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRelease(v22);
  v23 = *(_QWORD *)(a2 + 304);
  v24 = *(_QWORD *)(a1 + 304);
  *(_QWORD *)(a1 + 304) = v23;
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRelease(v24);
  v25 = *(_QWORD *)(a2 + 312);
  v26 = *(_QWORD *)(a1 + 312);
  *(_QWORD *)(a1 + 312) = v25;
  swift_bridgeObjectRetain(v25);
  swift_bridgeObjectRelease(v26);
  v27 = *(_QWORD *)(a2 + 320);
  v28 = *(_QWORD *)(a1 + 320);
  *(_QWORD *)(a1 + 320) = v27;
  swift_bridgeObjectRetain(v27);
  swift_bridgeObjectRelease(v28);
  v29 = *(_QWORD *)(a2 + 328);
  v30 = *(_QWORD *)(a1 + 328);
  *(_QWORD *)(a1 + 328) = v29;
  swift_bridgeObjectRetain(v29);
  swift_bridgeObjectRelease(v30);
  v31 = *(_QWORD *)(a2 + 336);
  v32 = *(_QWORD *)(a1 + 336);
  *(_QWORD *)(a1 + 336) = v31;
  swift_bridgeObjectRetain(v31);
  swift_bridgeObjectRelease(v32);
  *(_BYTE *)(a1 + 344) = *(_BYTE *)(a2 + 344);
  *(_BYTE *)(a1 + 345) = *(_BYTE *)(a2 + 345);
  *(_BYTE *)(a1 + 346) = *(_BYTE *)(v4 + 1);
  v33 = *(_QWORD *)(a2 + 352);
  v34 = *(_QWORD *)(a1 + 352);
  *(_QWORD *)(a1 + 352) = v33;
  swift_bridgeObjectRetain(v33);
  swift_bridgeObjectRelease(v34);
  *(_BYTE *)(a1 + 360) = *(_BYTE *)(v4 + 15);
  return a1;
}

void *initializeWithTake for NANCoreAnalyticsMetrics(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x169uLL);
}

uint64_t assignWithTake for NANCoreAnalyticsMetrics(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v4 = a2 + 345;
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
  *(_BYTE *)(a1 + 5) = *(_BYTE *)(a2 + 5);
  *(_BYTE *)(a1 + 6) = *(_BYTE *)(a2 + 6);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 20) = *(_QWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 36) = *(_BYTE *)(a2 + 36);
  *(_BYTE *)(a1 + 37) = *(_BYTE *)(a2 + 37);
  *(_BYTE *)(a1 + 38) = *(_BYTE *)(a2 + 38);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  v5 = *(_QWORD *)(a1 + 232);
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a1 + 240);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  swift_bridgeObjectRelease(v6);
  v7 = *(_QWORD *)(a1 + 248);
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a1 + 256);
  *(_QWORD *)(a1 + 256) = *(_QWORD *)(a2 + 256);
  swift_bridgeObjectRelease(v8);
  v9 = *(_QWORD *)(a1 + 264);
  *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a1 + 272);
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 272);
  swift_bridgeObjectRelease(v10);
  v11 = *(_QWORD *)(a1 + 280);
  *(_QWORD *)(a1 + 280) = *(_QWORD *)(a2 + 280);
  swift_bridgeObjectRelease(v11);
  v12 = *(_QWORD *)(a1 + 288);
  *(_QWORD *)(a1 + 288) = *(_QWORD *)(a2 + 288);
  swift_bridgeObjectRelease(v12);
  v13 = *(_QWORD *)(a1 + 296);
  *(_QWORD *)(a1 + 296) = *(_QWORD *)(a2 + 296);
  swift_bridgeObjectRelease(v13);
  v14 = *(_QWORD *)(a1 + 304);
  *(_QWORD *)(a1 + 304) = *(_QWORD *)(a2 + 304);
  swift_bridgeObjectRelease(v14);
  v15 = *(_QWORD *)(a1 + 312);
  *(_QWORD *)(a1 + 312) = *(_QWORD *)(a2 + 312);
  swift_bridgeObjectRelease(v15);
  v16 = *(_QWORD *)(a1 + 320);
  *(_QWORD *)(a1 + 320) = *(_QWORD *)(a2 + 320);
  swift_bridgeObjectRelease(v16);
  v17 = *(_QWORD *)(a1 + 328);
  *(_QWORD *)(a1 + 328) = *(_QWORD *)(a2 + 328);
  swift_bridgeObjectRelease(v17);
  v18 = *(_QWORD *)(a1 + 336);
  *(_QWORD *)(a1 + 336) = *(_QWORD *)(a2 + 336);
  swift_bridgeObjectRelease(v18);
  *(_BYTE *)(a1 + 344) = *(_BYTE *)(a2 + 344);
  *(_BYTE *)(a1 + 345) = *(_BYTE *)(a2 + 345);
  *(_BYTE *)(a1 + 346) = *(_BYTE *)(v4 + 1);
  v19 = *(_QWORD *)(a1 + 352);
  *(_QWORD *)(a1 + 352) = *(_QWORD *)(a2 + 352);
  swift_bridgeObjectRelease(v19);
  *(_BYTE *)(a1 + 360) = *(_BYTE *)(v4 + 15);
  return a1;
}

uint64_t getEnumTagSinglePayload for NANCoreAnalyticsMetrics(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 361))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 232);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NANCoreAnalyticsMetrics(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 360) = 0;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 361) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 232) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 361) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for NANCoreAnalyticsMetrics()
{
  return &type metadata for NANCoreAnalyticsMetrics;
}

uint64_t sub_100198624(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_WORD *)(a1 + 1) = *(_WORD *)(a2 + 1);
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t assignWithCopy for NANInternetSharingStatistics(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t assignWithTake for NANInternetSharingStatistics(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease(v4);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for NANInternetSharingStatistics(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 17))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NANInternetSharingStatistics(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 17) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for NANInternetSharingStatistics()
{
  return &type metadata for NANInternetSharingStatistics;
}

uint64_t getEnumTagSinglePayload for NANInternetSharingStatistics.Provider(unsigned __int16 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 65281 <= 0xFFFEFFFF)
    v2 = 2;
  else
    v2 = 4;
  if (a2 + 65281 < 0xFF0000)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 16)) - 65281;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
      return (*a1 | (v4 << 16)) - 65281;
    }
    v4 = *((unsigned __int8 *)a1 + 2);
    if (*((_BYTE *)a1 + 2))
      return (*a1 | (v4 << 16)) - 65281;
  }
LABEL_17:
  v6 = *(unsigned __int8 *)a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for NANInternetSharingStatistics.Provider(_WORD *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 65281 <= 0xFFFEFFFF)
    v3 = 2;
  else
    v3 = 4;
  if (a3 + 65281 < 0xFF0000)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100198898 + 4 * byte_10034F6E3[v4]))();
  *a1 = a2 - 255;
  return ((uint64_t (*)(void))((char *)sub_1001988CC + 4 * byte_10034F6DE[v4]))();
}

uint64_t sub_1001988CC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 2) = v1;
  return result;
}

uint64_t sub_1001988D4(uint64_t result, int a2)
{
  *(_WORD *)(result + 2) = 0;
  if (a2)
    JUMPOUT(0x1001988DCLL);
  return result;
}

uint64_t sub_1001988E8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 2) = 0;
  if (!a2)
    JUMPOUT(0x1001988F0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1001988F4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_1001988FC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 2) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NANInternetSharingStatistics.Provider()
{
  return &type metadata for NANInternetSharingStatistics.Provider;
}

ValueMetadata *type metadata accessor for NANInternetSharingStatistics.Provider.SharingMode()
{
  return &type metadata for NANInternetSharingStatistics.Provider.SharingMode;
}

_QWORD *initializeBufferWithCopyOfBuffer for NANInternetSharingStatistics.Requester(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v8 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v8);
  }
  else
  {
    v7 = type metadata accessor for DispatchTimeInterval(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
  }
  return a1;
}

uint64_t destroy for NANInternetSharingStatistics.Requester(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for DispatchTimeInterval(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t initializeWithCopy for NANInternetSharingStatistics.Requester(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for DispatchTimeInterval(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithCopy for NANInternetSharingStatistics.Requester(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for DispatchTimeInterval(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t initializeWithTake for NANInternetSharingStatistics.Requester(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for DispatchTimeInterval(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithTake for NANInternetSharingStatistics.Requester(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for DispatchTimeInterval(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t getEnumTagSinglePayload for NANInternetSharingStatistics.Requester(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100198B64);
}

uint64_t sub_100198B64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;

  v6 = type metadata accessor for DispatchTimeInterval(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 5)
    return v9 - 4;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for NANInternetSharingStatistics.Requester(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100198BE8);
}

uint64_t sub_100198BE8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for DispatchTimeInterval(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 20)) = a2 + 4;
  return result;
}

uint64_t sub_100198C60(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = type metadata accessor for DispatchTimeInterval(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_10034FB30;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for NANInternetSharingStatistics.Requester.InternetSharingPolicyChannelState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_100198D1C + 4 * byte_10034F6ED[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_100198D50 + 4 * byte_10034F6E8[v4]))();
}

uint64_t sub_100198D50(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100198D58(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100198D60);
  return result;
}

uint64_t sub_100198D6C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100198D74);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_100198D78(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100198D80(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NANInternetSharingStatistics.Requester.InternetSharingPolicyChannelState()
{
  return &type metadata for NANInternetSharingStatistics.Requester.InternetSharingPolicyChannelState;
}

uint64_t _s7CoreP2P28NANInternetSharingStatisticsV6StatusOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100198DE8 + 4 * byte_10034F6F7[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100198E1C + 4 * byte_10034F6F2[v4]))();
}

uint64_t sub_100198E1C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100198E24(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100198E2CLL);
  return result;
}

uint64_t sub_100198E38(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100198E40);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100198E44(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100198E4C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NANInternetSharingStatistics.Status()
{
  return &type metadata for NANInternetSharingStatistics.Status;
}

unint64_t sub_100198E68()
{
  unint64_t result;

  result = qword_10040A0D0;
  if (!qword_10040A0D0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANInternetSharingStatistics.Requester.InternetSharingPolicyChannelState, &type metadata for NANInternetSharingStatistics.Requester.InternetSharingPolicyChannelState);
    atomic_store(result, (unint64_t *)&qword_10040A0D0);
  }
  return result;
}

uint64_t sub_100198EAC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for NANInternetSharingStatistics.Requester(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t getEnumTagSinglePayload for NANCoreAnalyticsMetrics.Key(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xC2)
    goto LABEL_17;
  if (a2 + 62 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 62) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 62;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 62;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 62;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x3F;
  v8 = v6 - 63;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for NANCoreAnalyticsMetrics.Key(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 62 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 62) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xC2)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xC1)
    return ((uint64_t (*)(void))((char *)&loc_100198FCC + 4 * byte_10034F701[v4]))();
  *a1 = a2 + 62;
  return ((uint64_t (*)(void))((char *)sub_100199000 + 4 * byte_10034F6FC[v4]))();
}

uint64_t sub_100199000(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100199008(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100199010);
  return result;
}

uint64_t sub_10019901C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100199024);
  *(_BYTE *)result = a2 + 62;
  return result;
}

uint64_t sub_100199028(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100199030(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NANCoreAnalyticsMetrics.Key()
{
  return &type metadata for NANCoreAnalyticsMetrics.Key;
}

unint64_t sub_100199050()
{
  unint64_t result;

  result = qword_10040A108;
  if (!qword_10040A108)
  {
    result = swift_getWitnessTable(byte_10034FBF8, &type metadata for NANCoreAnalyticsMetrics.Key);
    atomic_store(result, (unint64_t *)&qword_10040A108);
  }
  return result;
}

void NANMulticastLinkCondition.per.setter(double a1)
{
  double *v1;

  *v1 = a1;
}

double NANMulticastLinkCondition.snr.getter(double a1, double a2)
{
  return a2;
}

void NANMulticastLinkCondition.snr.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 8) = a1;
}

double NANMulticastLinkCondition.cca.getter(double a1, double a2, double a3)
{
  return a3;
}

void NANMulticastLinkCondition.cca.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 16) = a1;
}

double NANMulticastLinkCondition.init(from:)(_QWORD *a1)
{
  return sub_1001994DC(a1);
}

uint64_t NANMulticastLinkCondition.encode(to:)(_QWORD *a1, double a2, double a3, double a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v17[3];
  uint64_t v18;
  uint64_t v19;

  v8 = a1[3];
  v9 = a1[4];
  sub_10003259C(a1, v8);
  dispatch thunk of Encoder.unkeyedContainer()(v17, v8, v9);
  v10 = v18;
  v11 = v19;
  sub_100034C68((uint64_t)v17, v18);
  dispatch thunk of UnkeyedEncodingContainer.encode(_:)(v10, v11, a2);
  if (!v4)
  {
    v12 = v18;
    v13 = v19;
    sub_100034C68((uint64_t)v17, v18);
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)(v12, v13, a3);
    v14 = v18;
    v15 = v19;
    sub_100034C68((uint64_t)v17, v18);
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)(v14, v15, a4);
  }
  return sub_100014430(v17);
}

void NANMulticastLinkCondition.hash(into:)(double a1, double a2, double a3)
{
  Swift::UInt64 v5;
  Swift::UInt64 v6;
  Swift::UInt64 v7;

  if ((*(_QWORD *)&a1 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v5 = *(_QWORD *)&a1;
  else
    v5 = 0;
  Hasher._combine(_:)(v5);
  if ((*(_QWORD *)&a2 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v6 = *(_QWORD *)&a2;
  else
    v6 = 0;
  Hasher._combine(_:)(v6);
  if ((*(_QWORD *)&a3 & 0x7FFFFFFFFFFFFFFFLL) != 0)
    v7 = *(_QWORD *)&a3;
  else
    v7 = 0;
  Hasher._combine(_:)(v7);
}

BOOL static NANMulticastLinkCondition.__derived_struct_equals(_:_:)(double a1, double a2, double a3, double a4, double a5, double a6)
{
  _BOOL4 v6;

  v6 = a1 == a4;
  if (a2 != a5)
    v6 = 0;
  return a3 == a6 && v6;
}

Swift::Int NANMulticastLinkCondition.hashValue.getter(double a1, double a2, double a3)
{
  _QWORD v7[9];

  Hasher.init(_seed:)(v7);
  NANMulticastLinkCondition.hash(into:)(a1, a2, a3);
  return Hasher._finalize()();
}

Swift::Int sub_1001992BC()
{
  double *v0;
  double v1;
  double v2;
  double v3;
  _QWORD v5[9];

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  Hasher.init(_seed:)(v5);
  NANMulticastLinkCondition.hash(into:)(v1, v2, v3);
  return Hasher._finalize()();
}

void sub_10019931C()
{
  double *v0;

  NANMulticastLinkCondition.hash(into:)(*v0, v0[1], v0[2]);
}

Swift::Int sub_100199328()
{
  double *v0;
  double v1;
  double v2;
  double v3;
  _QWORD v5[9];

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  Hasher.init(_seed:)(v5);
  NANMulticastLinkCondition.hash(into:)(v1, v2, v3);
  return Hasher._finalize()();
}

void sub_100199384(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double v4;
  uint64_t v5;
  uint64_t v6;

  v4 = sub_1001994DC(a1);
  if (!v2)
  {
    *(double *)a2 = v4;
    *(_QWORD *)(a2 + 8) = v5;
    *(_QWORD *)(a2 + 16) = v6;
  }
}

uint64_t sub_1001993B0(_QWORD *a1)
{
  double *v1;
  uint64_t v2;
  double v3;
  double v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;
  uint64_t v17;

  v4 = *v1;
  v3 = v1[1];
  v5 = v1[2];
  v6 = a1[3];
  v7 = a1[4];
  sub_10003259C(a1, v6);
  dispatch thunk of Encoder.unkeyedContainer()(v15, v6, v7);
  v8 = v16;
  v9 = v17;
  sub_100034C68((uint64_t)v15, v16);
  dispatch thunk of UnkeyedEncodingContainer.encode(_:)(v8, v9, v4);
  if (!v2)
  {
    v10 = v16;
    v11 = v17;
    sub_100034C68((uint64_t)v15, v16);
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)(v10, v11, v3);
    v12 = v16;
    v13 = v17;
    sub_100034C68((uint64_t)v15, v16);
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)(v12, v13, v5);
  }
  return sub_100014430(v15);
}

BOOL sub_1001994AC(double *a1, double *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2];
}

double sub_1001994DC(_QWORD *a1)
{
  uint64_t v1;
  double v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v13;
  _QWORD v14[3];
  uint64_t v15;
  uint64_t v16;

  v4 = a1[3];
  v5 = a1[4];
  sub_10003259C(a1, v4);
  dispatch thunk of Decoder.unkeyedContainer()(v14, v4, v5);
  if (!v1)
  {
    v6 = v15;
    v7 = v16;
    sub_100034C68((uint64_t)v14, v15);
    UnkeyedDecodingContainer.inferredDecode<A>()(v6, (uint64_t)&type metadata for Double, v7, (uint64_t)&protocol witness table for Double);
    v2 = v13;
    v8 = v15;
    v9 = v16;
    sub_100034C68((uint64_t)v14, v15);
    UnkeyedDecodingContainer.inferredDecode<A>()(v8, (uint64_t)&type metadata for Double, v9, (uint64_t)&protocol witness table for Double);
    v10 = v15;
    v11 = v16;
    sub_100034C68((uint64_t)v14, v15);
    UnkeyedDecodingContainer.inferredDecode<A>()(v10, (uint64_t)&type metadata for Double, v11, (uint64_t)&protocol witness table for Double);
    sub_100014430(v14);
  }
  sub_100014430(a1);
  return v2;
}

unint64_t sub_100199660()
{
  unint64_t result;

  result = qword_10040A110;
  if (!qword_10040A110)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANMulticastLinkCondition, &type metadata for NANMulticastLinkCondition);
    atomic_store(result, (unint64_t *)&qword_10040A110);
  }
  return result;
}

ValueMetadata *type metadata accessor for NANMulticastLinkCondition()
{
  return &type metadata for NANMulticastLinkCondition;
}

char *sub_1001996B4(char *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  char *v6;
  int64_t i;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  char v14;

  v12 = result;
  v4 = a2 - (_QWORD)result;
  if (__OFSUB__(a2, result))
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (!v4)
    return (char *)_swiftEmptyArrayStorage;
  result = (char *)sub_100074F24(0, v4 & ~(v4 >> 63), 0);
  if ((v4 & 0x8000000000000000) == 0)
  {
    v6 = (char *)a2;
    if (a2 <= (uint64_t)v12)
      v6 = v12;
    for (i = v6 - v12; ; --i)
    {
      v8 = *(_QWORD *)(a3 + 24);
      v9 = *(_QWORD *)(a3 + 32);
      sub_100034C68(a3, v8);
      result = (char *)UnkeyedDecodingContainer.inferredDecode<A>()(v8, (uint64_t)&type metadata for UInt8, v9, (uint64_t)&protocol witness table for UInt8);
      if (v3)
      {
        swift_release(_swiftEmptyArrayStorage);
        return (char *)_swiftEmptyArrayStorage;
      }
      v11 = _swiftEmptyArrayStorage[2];
      v10 = _swiftEmptyArrayStorage[3];
      if (v11 >= v10 >> 1)
        result = (char *)sub_100074F24(v10 > 1, v11 + 1, 1);
      _swiftEmptyArrayStorage[2] = v11 + 1;
      *((_BYTE *)&_swiftEmptyArrayStorage[4] + v11) = v14;
      if (a2 < (uint64_t)v12)
        break;
      if (!i)
        goto LABEL_17;
      if (!--v4)
        return (char *)_swiftEmptyArrayStorage;
    }
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
LABEL_19:
  __break(1u);
  return result;
}

_QWORD *sub_100199814(unsigned int a1, uint64_t a2, uint64_t (*a3)(BOOL, uint64_t, uint64_t), uint64_t (*a4)(void), uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned int v20;
  unsigned __int16 v21;
  char v22;

  v6 = (unsigned __int16)(HIWORD(a1) - a1);
  v20 = HIWORD(a1);
  v21 = a1;
  if (HIWORD(a1) < (unsigned __int16)a1)
    v7 = -(uint64_t)(unsigned __int16)(a1 - HIWORD(a1));
  else
    v7 = (unsigned __int16)(HIWORD(a1) - a1);
  if (!v7)
    return _swiftEmptyArrayStorage;
  result = (_QWORD *)a3(0, v7 & ~(v7 >> 63), 0);
  if ((v7 & 0x8000000000000000) == 0)
  {
    LODWORD(v10) = v20 - v21;
    if (v20 >= v21)
      v10 = v10;
    else
      v10 = 0;
    v11 = -v10;
    while (v7)
    {
      v12 = *(_QWORD *)(a2 + 24);
      v13 = *(_QWORD *)(a2 + 32);
      sub_100034C68(a2, v12);
      v14 = a4();
      result = (_QWORD *)UnkeyedDecodingContainer.inferredDecode<A>()(v12, a5, v13, v14);
      if (v5)
      {
        swift_release(_swiftEmptyArrayStorage);
        return _swiftEmptyArrayStorage;
      }
      v16 = _swiftEmptyArrayStorage[2];
      v15 = _swiftEmptyArrayStorage[3];
      if (v16 >= v15 >> 1)
        result = (_QWORD *)a3(v15 > 1, v16 + 1, 1);
      _swiftEmptyArrayStorage[2] = v16 + 1;
      *((_BYTE *)&_swiftEmptyArrayStorage[4] + v16) = v22;
      if (v20 < v21)
        goto LABEL_21;
      if (!v11)
        goto LABEL_22;
      ++v11;
      --v7;
      if (!--v6)
        return _swiftEmptyArrayStorage;
    }
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
  }
  __break(1u);
  return result;
}

_QWORD *sub_100199998(unsigned int a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  __int128 v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unsigned __int16 v16;
  __int128 v17;

  v3 = (unsigned __int16)(HIWORD(a1) - a1);
  v15 = HIWORD(a1);
  v16 = a1;
  if (HIWORD(a1) < (unsigned __int16)a1)
    v4 = -(uint64_t)(unsigned __int16)(a1 - HIWORD(a1));
  else
    v4 = (unsigned __int16)(HIWORD(a1) - a1);
  if (!v4)
    return _swiftEmptyArrayStorage;
  result = (_QWORD *)sub_100074F48(0, v4 & ~(v4 >> 63), 0);
  if ((v4 & 0x8000000000000000) == 0)
  {
    LODWORD(v7) = v15 - v16;
    if (v15 >= v16)
      v7 = v7;
    else
      v7 = 0;
    v8 = -v7;
    while (v4)
    {
      v9 = *(_QWORD *)(a2 + 24);
      v10 = *(_QWORD *)(a2 + 32);
      sub_100034C68(a2, v9);
      v11 = sub_1001A53D8();
      result = (_QWORD *)UnkeyedDecodingContainer.inferredDecode<A>()(v9, (uint64_t)&type metadata for NANPMK.ID, v10, v11);
      if (v2)
      {
        swift_release(_swiftEmptyArrayStorage);
        return _swiftEmptyArrayStorage;
      }
      v12 = v17;
      v14 = _swiftEmptyArrayStorage[2];
      v13 = _swiftEmptyArrayStorage[3];
      if (v14 >= v13 >> 1)
      {
        result = (_QWORD *)sub_100074F48(v13 > 1, v14 + 1, 1);
        v12 = v17;
      }
      _swiftEmptyArrayStorage[2] = v14 + 1;
      *(_OWORD *)&_swiftEmptyArrayStorage[2 * v14 + 4] = v12;
      if (v15 < v16)
        goto LABEL_21;
      if (!v8)
        goto LABEL_22;
      ++v8;
      --v4;
      if (!--v3)
        return _swiftEmptyArrayStorage;
    }
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
  }
  __break(1u);
  return result;
}

void static IEEE80211InformationElement.HighThroughputCapability.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((a1 & 0xFFFFFFFFFFLL) == (a4 & 0xFFFFFFFFFFLL))
    _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(a2, a3);
}

uint64_t IEEE80211InformationElement.HighThroughputCapability.hash(into:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v7;
  unint64_t v8;
  __n128 v9;

  v7 = a2 >> 16;
  v8 = HIDWORD(a2);
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  sub_100031FEC(a3, a4);
  Data.hash(into:)(a1, a3, a4, v9);
  return sub_10000E614(a3, a4);
}

uint64_t sub_100199BC4()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100199BEC + 4 * byte_10034FD00[*v0]))(1802401130, 0xE400000000000000);
}

uint64_t sub_100199BEC()
{
  return 1868983913;
}

uint64_t sub_100199BF8()
{
  return 0x7261507564706D61;
}

uint64_t sub_100199C1C()
{
  return 7562093;
}

uint64_t sub_100199C2C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1001A4BB4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100199C50(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001A0914();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100199C78(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001A0914();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t IEEE80211InformationElement.HighThroughputCapability.encode(to:)(_QWORD *a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[2];
  char v22;

  v20 = a4;
  v8 = sub_100012C44(&qword_10040A118);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin();
  v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  sub_10003259C(a1, v12);
  v14 = sub_1001A0914();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for IEEE80211InformationElement.HighThroughputCapability.CodingKeys, &type metadata for IEEE80211InformationElement.HighThroughputCapability.CodingKeys, v14, v12, v13);
  LOBYTE(v21[0]) = 0;
  KeyedEncodingContainer.encode(_:forKey:)(a2, v21, v8);
  if (!v4)
  {
    v15 = a3;
    v16 = v20;
    LOBYTE(v21[0]) = 1;
    KeyedEncodingContainer.encode(_:forKey:)(a2 >> 16, v21, v8);
    LOBYTE(v21[0]) = 2;
    KeyedEncodingContainer.encode(_:forKey:)(HIDWORD(a2), v21, v8);
    v21[0] = v15;
    v21[1] = v16;
    v22 = 3;
    v17 = sub_100068570();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v21, &v22, v8, &type metadata for Data, v17);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

Swift::Int IEEE80211InformationElement.HighThroughputCapability.hashValue.getter(unint64_t a1, uint64_t a2, unint64_t a3)
{
  Swift::UInt16 v5;
  unint64_t v6;
  unint64_t v7;
  __n128 v8;
  _QWORD v10[9];

  v5 = a1;
  v6 = a1 >> 16;
  v7 = HIDWORD(a1);
  Hasher.init(_seed:)(v10);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  sub_100031FEC(a2, a3);
  Data.hash(into:)(v10, a2, a3, v8);
  sub_10000E614(a2, a3);
  return Hasher._finalize()();
}

unint64_t IEEE80211InformationElement.HighThroughputCapability.init(from:)(_QWORD *a1)
{
  return sub_1001A0A4C(a1) & 0xFFFFFFFFFFLL;
}

Swift::Int sub_100199EFC()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  Swift::UInt16 v3;
  Swift::UInt16 v4;
  Swift::UInt8 v5;
  __n128 v6;
  _QWORD v8[9];

  v1 = *(_QWORD *)(v0 + 8);
  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_WORD *)v0;
  v4 = *(_WORD *)(v0 + 2);
  v5 = *(_BYTE *)(v0 + 4);
  Hasher.init(_seed:)(v8);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  sub_100031FEC(v1, v2);
  Data.hash(into:)(v8, v1, v2, v6);
  sub_10000E614(v1, v2);
  return Hasher._finalize()();
}

uint64_t sub_100199F9C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  Swift::UInt16 v5;
  Swift::UInt8 v6;
  __n128 v7;

  v3 = *(_QWORD *)(v1 + 8);
  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_WORD *)(v1 + 2);
  v6 = *(_BYTE *)(v1 + 4);
  Hasher._combine(_:)(*(_WORD *)v1);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  sub_100031FEC(v3, v4);
  Data.hash(into:)(a1, v3, v4, v7);
  return sub_10000E614(v3, v4);
}

Swift::Int sub_10019A014()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  Swift::UInt16 v3;
  Swift::UInt16 v4;
  Swift::UInt8 v5;
  __n128 v6;
  _QWORD v8[9];

  v1 = *(_QWORD *)(v0 + 8);
  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_WORD *)v0;
  v4 = *(_WORD *)(v0 + 2);
  v5 = *(_BYTE *)(v0 + 4);
  Hasher.init(_seed:)(v8);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  sub_100031FEC(v1, v2);
  Data.hash(into:)(v8, v1, v2, v6);
  sub_10000E614(v1, v2);
  return Hasher._finalize()();
}

unint64_t sub_10019A0B0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  unint64_t result;
  uint64_t v5;
  uint64_t v6;

  result = sub_1001A0A4C(a1);
  if (!v2)
  {
    *(_DWORD *)a2 = result;
    *(_BYTE *)(a2 + 4) = BYTE4(result);
    *(_QWORD *)(a2 + 8) = v5;
    *(_QWORD *)(a2 + 16) = v6;
  }
  return result;
}

uint64_t sub_10019A0EC(_QWORD *a1)
{
  unsigned int *v1;

  return IEEE80211InformationElement.HighThroughputCapability.encode(to:)(a1, *v1 | ((unint64_t)*((unsigned __int8 *)v1 + 4) << 32), *((_QWORD *)v1 + 1), *((_QWORD *)v1 + 2));
}

void sub_10019A110(unsigned __int16 *a1, unsigned __int16 *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1] && *((unsigned __int8 *)a1 + 4) == *((unsigned __int8 *)a2 + 4))
    _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(*((_QWORD *)a1 + 1), *((_QWORD *)a1 + 2));
}

uint64_t IEEE80211InformationElement.HighThroughputOperation.mcs.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  sub_100031FEC(v1, *(_QWORD *)(v0 + 32));
  return v1;
}

uint64_t IEEE80211InformationElement.HighThroughputOperation.mcs.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = sub_10000E614(*(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32));
  *(_QWORD *)(v2 + 24) = a1;
  *(_QWORD *)(v2 + 32) = a2;
  return result;
}

double IEEE80211InformationElement.HighThroughputOperation.init(from:)@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  uint64_t v7;

  sub_1001A161C(a1, (uint64_t)v6);
  if (!v2)
  {
    result = *(double *)v6;
    v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    *(_QWORD *)(a2 + 32) = v7;
  }
  return result;
}

uint64_t IEEE80211InformationElement.HighThroughputOperation.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  __n128 v6;
  unint64_t v7;
  uint64_t v8;
  __n128 v9;

  v2 = v1;
  Hasher._combine(_:)(*(_BYTE *)v2);
  v4 = *(_QWORD *)(v2 + 8);
  v5 = *(_QWORD *)(v2 + 16);
  sub_100031FEC(v4, v5);
  Data.hash(into:)(a1, v4, v5, v6);
  sub_10000E614(v4, v5);
  v8 = *(_QWORD *)(v2 + 24);
  v7 = *(_QWORD *)(v2 + 32);
  sub_100031FEC(v8, v7);
  Data.hash(into:)(a1, v8, v7, v9);
  return sub_10000E614(v8, v7);
}

void static IEEE80211InformationElement.HighThroughputOperation.__derived_struct_equals(_:_:)(uint64_t *a1, unsigned __int8 *a2)
{
  char v3;

  if (*(unsigned __int8 *)a1 == *a2)
  {
    _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(a1[1], a1[2]);
    if ((v3 & 1) != 0)
      _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(a1[3], a1[4]);
  }
}

uint64_t sub_10019A2D4()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x6F6974617265706FLL;
  if (*v0 != 1)
    v1 = 7562093;
  if (*v0)
    return v1;
  else
    return 0x437972616D697270;
}

uint64_t sub_10019A338@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1001A4D60(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10019A35C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001A180C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10019A384(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001A180C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t IEEE80211InformationElement.HighThroughputOperation.encode(to:)(_QWORD *a1)
{
  unsigned __int8 *v1;
  uint64_t v2;
  unsigned __int8 *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v15;
  char v16;
  __int128 v17;

  v3 = v1;
  v5 = sub_100012C44(&qword_10040A128);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin();
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10003259C(a1, v9);
  v11 = sub_1001A180C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for IEEE80211InformationElement.HighThroughputOperation.CodingKeys, &type metadata for IEEE80211InformationElement.HighThroughputOperation.CodingKeys, v11, v9, v10);
  v12 = *v3;
  LOBYTE(v17) = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, &v17, v5);
  if (!v2)
  {
    v17 = *(_OWORD *)(v3 + 8);
    v16 = 1;
    v13 = sub_100068570();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v17, &v16, v5, &type metadata for Data, v13);
    v17 = *(_OWORD *)(v3 + 24);
    v16 = 2;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v17, &v16, v5, &type metadata for Data, v13);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

Swift::Int IEEE80211InformationElement.HighThroughputOperation.hashValue.getter()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  __n128 v4;
  unint64_t v5;
  uint64_t v6;
  __n128 v7;
  _QWORD v9[9];

  v1 = v0;
  Hasher.init(_seed:)(v9);
  Hasher._combine(_:)(*(_BYTE *)v0);
  v2 = v0[1];
  v3 = v1[2];
  sub_100031FEC(v1[1], v3);
  Data.hash(into:)(v9, v2, v3, v4);
  sub_10000E614(v2, v3);
  v6 = v1[3];
  v5 = v1[4];
  sub_100031FEC(v6, v5);
  Data.hash(into:)(v9, v6, v5, v7);
  sub_10000E614(v6, v5);
  return Hasher._finalize()();
}

Swift::Int sub_10019A5BC()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  Swift::UInt8 v5;
  __n128 v6;
  __n128 v7;
  _QWORD v9[9];

  v1 = *(_QWORD *)(v0 + 8);
  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = *(_QWORD *)(v0 + 32);
  v5 = *(_BYTE *)v0;
  Hasher.init(_seed:)(v9);
  Hasher._combine(_:)(v5);
  sub_100031FEC(v1, v2);
  Data.hash(into:)(v9, v1, v2, v6);
  sub_10000E614(v1, v2);
  sub_100031FEC(v3, v4);
  Data.hash(into:)(v9, v3, v4, v7);
  sub_10000E614(v3, v4);
  return Hasher._finalize()();
}

uint64_t sub_10019A668(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  __n128 v7;
  __n128 v8;

  v3 = *(_QWORD *)(v1 + 8);
  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v6 = *(_QWORD *)(v1 + 32);
  Hasher._combine(_:)(*(_BYTE *)v1);
  sub_100031FEC(v3, v4);
  Data.hash(into:)(a1, v3, v4, v7);
  sub_10000E614(v3, v4);
  sub_100031FEC(v5, v6);
  Data.hash(into:)(a1, v5, v6, v8);
  return sub_10000E614(v5, v6);
}

Swift::Int sub_10019A6F4()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  Swift::UInt8 v5;
  __n128 v6;
  __n128 v7;
  _QWORD v9[9];

  v1 = *(_QWORD *)(v0 + 8);
  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = *(_QWORD *)(v0 + 32);
  v5 = *(_BYTE *)v0;
  Hasher.init(_seed:)(v9);
  Hasher._combine(_:)(v5);
  sub_100031FEC(v1, v2);
  Data.hash(into:)(v9, v1, v2, v6);
  sub_10000E614(v1, v2);
  sub_100031FEC(v3, v4);
  Data.hash(into:)(v9, v3, v4, v7);
  sub_10000E614(v3, v4);
  return Hasher._finalize()();
}

double sub_10019A79C@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  uint64_t v7;

  result = IEEE80211InformationElement.HighThroughputOperation.init(from:)(a1, (uint64_t)v6);
  if (!v2)
  {
    result = *(double *)v6;
    v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    *(_QWORD *)(a2 + 32) = v7;
  }
  return result;
}

uint64_t sub_10019A7E0(_QWORD *a1)
{
  return IEEE80211InformationElement.HighThroughputOperation.encode(to:)(a1);
}

void sub_10019A7F4(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  if (*(unsigned __int8 *)a1 == *a2)
  {
    v2 = a1[3];
    v3 = a1[4];
    _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(a1[1], a1[2]);
    if ((v4 & 1) != 0)
      _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(v2, v3);
  }
}

void IEEE80211InformationElement.VeryHighThroughputCapability.hash(into:)(int a1, unint64_t a2, unsigned int a3)
{
  Swift::UInt16 v3;
  unint64_t v4;
  unint64_t v5;
  unsigned int v6;

  v3 = a3;
  v4 = HIDWORD(a2);
  v5 = HIWORD(a2);
  v6 = HIWORD(a3);
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v6);
}

BOOL static IEEE80211InformationElement.VeryHighThroughputCapability.__derived_struct_equals(_:_:)(uint64_t a1, unsigned int a2, uint64_t a3, unsigned int a4)
{
  _BOOL4 v4;

  v4 = (unsigned __int16)a2 == (unsigned __int16)a4 && HIWORD(a2) == HIWORD(a4);
  return a1 == a3 && v4;
}

uint64_t sub_10019A8E8()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10019A910 + 4 * byte_10034FD04[*v0]))(1868983913, 0xE400000000000000);
}

uint64_t sub_10019A910()
{
  return 0x70614D53434D7872;
}

uint64_t sub_10019A928()
{
  return 0x474C686769487872;
}

uint64_t sub_10019A980@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1001A4ED4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10019A9A4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001A1850();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10019A9CC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001A1850();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t IEEE80211InformationElement.VeryHighThroughputCapability.encode(to:)(_QWORD *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v15;
  char v16;
  char v17;
  char v18;
  char v19;
  char v20;

  v7 = sub_100012C44(&qword_10040A138);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin();
  v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a1[3];
  v12 = a1[4];
  sub_10003259C(a1, v11);
  v13 = sub_1001A1850();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for IEEE80211InformationElement.VeryHighThroughputCapability.CodingKeys, &type metadata for IEEE80211InformationElement.VeryHighThroughputCapability.CodingKeys, v13, v11, v12);
  v20 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(a2, &v20, v7);
  if (!v3)
  {
    v19 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(HIDWORD(a2), &v19, v7);
    v18 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(HIWORD(a2), &v18, v7);
    v17 = 3;
    KeyedEncodingContainer.encode(_:forKey:)(a3, &v17, v7);
    v16 = 4;
    KeyedEncodingContainer.encode(_:forKey:)(WORD1(a3), &v16, v7);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

Swift::Int IEEE80211InformationElement.VeryHighThroughputCapability.hashValue.getter(unint64_t a1, unsigned int a2)
{
  Swift::UInt16 v2;
  Swift::UInt32 v3;
  unint64_t v4;
  unint64_t v5;
  unsigned int v6;
  _QWORD v8[9];

  v2 = a2;
  v3 = a1;
  v4 = HIDWORD(a1);
  v5 = HIWORD(a1);
  v6 = HIWORD(a2);
  Hasher.init(_seed:)(v8);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v6);
  return Hasher._finalize()();
}

unint64_t IEEE80211InformationElement.VeryHighThroughputCapability.init(from:)(_QWORD *a1)
{
  return sub_1001A0C18(a1);
}

unint64_t sub_10019AC30@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  unint64_t result;
  int v5;

  result = sub_1001A0C18(a1);
  if (!v2)
  {
    *(_QWORD *)a2 = result;
    *(_DWORD *)(a2 + 8) = v5;
  }
  return result;
}

uint64_t sub_10019AC74(_QWORD *a1)
{
  uint64_t v1;

  return IEEE80211InformationElement.VeryHighThroughputCapability.encode(to:)(a1, *(_QWORD *)v1, *(unsigned int *)(v1 + 8));
}

Swift::Int sub_10019AC90()
{
  uint64_t v0;
  Swift::UInt32 v1;
  Swift::UInt16 v2;
  Swift::UInt16 v3;
  Swift::UInt16 v4;
  Swift::UInt16 v5;
  _QWORD v7[9];

  v1 = *(_DWORD *)v0;
  v2 = *(_WORD *)(v0 + 4);
  v3 = *(_WORD *)(v0 + 6);
  v4 = *(_WORD *)(v0 + 8);
  v5 = *(_WORD *)(v0 + 10);
  Hasher.init(_seed:)(v7);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  return Hasher._finalize()();
}

void sub_10019AD24()
{
  uint64_t v0;
  Swift::UInt16 v1;
  Swift::UInt16 v2;
  Swift::UInt16 v3;
  Swift::UInt16 v4;

  v1 = *(_WORD *)(v0 + 4);
  v2 = *(_WORD *)(v0 + 6);
  v3 = *(_WORD *)(v0 + 8);
  v4 = *(_WORD *)(v0 + 10);
  Hasher._combine(_:)(*(_DWORD *)v0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
}

Swift::Int sub_10019AD8C()
{
  uint64_t v0;
  Swift::UInt32 v1;
  Swift::UInt16 v2;
  Swift::UInt16 v3;
  Swift::UInt16 v4;
  Swift::UInt16 v5;
  _QWORD v7[9];

  v1 = *(_DWORD *)v0;
  v2 = *(_WORD *)(v0 + 4);
  v3 = *(_WORD *)(v0 + 6);
  v4 = *(_WORD *)(v0 + 8);
  v5 = *(_WORD *)(v0 + 10);
  Hasher.init(_seed:)(v7);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  return Hasher._finalize()();
}

BOOL sub_10019AE1C(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)a1 == *(_DWORD *)a2
      && *(unsigned __int16 *)(a1 + 4) == *(unsigned __int16 *)(a2 + 4)
      && *(unsigned __int16 *)(a1 + 6) == *(unsigned __int16 *)(a2 + 6)
      && *(unsigned __int16 *)(a1 + 8) == *(unsigned __int16 *)(a2 + 8)
      && *(unsigned __int16 *)(a1 + 10) == *(unsigned __int16 *)(a2 + 10);
}

uint64_t sub_10019AE6C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001A1894();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10019AE94(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001A1894();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t IEEE80211InformationElement.VeryHighThroughputOperation.encode(to:)(_QWORD *a1)
{
  return sub_10019CFC4(a1, &qword_10040A148, (uint64_t (*)(void))sub_1001A1894, (uint64_t)&type metadata for IEEE80211InformationElement.VeryHighThroughputOperation.CodingKeys);
}

uint64_t sub_10019AEEC(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_10019D0C0(a1, a2, a3, &qword_10040A148, (uint64_t (*)(void))sub_1001A1894, (uint64_t)&type metadata for IEEE80211InformationElement.VeryHighThroughputOperation.CodingKeys);
}

void *IEEE80211InformationElement.RSNCapability.Capabilities.rsnPreAuthentication.unsafeMutableAddressor()
{
  return &static IEEE80211InformationElement.RSNCapability.Capabilities.rsnPreAuthentication;
}

void *IEEE80211InformationElement.RSNCapability.Capabilities.noPairwiseCapabilities.unsafeMutableAddressor()
{
  return &static IEEE80211InformationElement.RSNCapability.Capabilities.noPairwiseCapabilities;
}

uint64_t IEEE80211InformationElement.RSNCapability.Capabilities.ptksaReplayCounters.getter@<X0>(__int16 a1@<W0>, unint64_t a2@<X8>)
{
  return sub_10019AF48(a1, 2, a2);
}

uint64_t IEEE80211InformationElement.RSNCapability.Capabilities.gtksaReplayCounters.getter@<X0>(__int16 a1@<W0>, unint64_t a2@<X8>)
{
  return sub_10019AF48(a1, 4, a2);
}

uint64_t sub_10019AF48@<X0>(__int16 a1@<W0>, uint64_t a2@<X1>, unint64_t a3@<X8>)
{
  return sub_10007CE78(a2, 2, a1, a3);
}

void *IEEE80211InformationElement.RSNCapability.Capabilities.mfpr.unsafeMutableAddressor()
{
  return &static IEEE80211InformationElement.RSNCapability.Capabilities.mfpr;
}

void *IEEE80211InformationElement.RSNCapability.Capabilities.mfpc.unsafeMutableAddressor()
{
  return &static IEEE80211InformationElement.RSNCapability.Capabilities.mfpc;
}

void *IEEE80211InformationElement.RSNCapability.Capabilities.jointMultiBandRSNAuthentication.unsafeMutableAddressor()
{
  return &static IEEE80211InformationElement.RSNCapability.Capabilities.jointMultiBandRSNAuthentication;
}

void *IEEE80211InformationElement.RSNCapability.Capabilities.peerKeyEnabled.unsafeMutableAddressor()
{
  return &static IEEE80211InformationElement.RSNCapability.Capabilities.peerKeyEnabled;
}

void *IEEE80211InformationElement.RSNCapability.Capabilities.extendedKeyIDForIndviduallyAddressedFrames.unsafeMutableAddressor()
{
  return &static IEEE80211InformationElement.RSNCapability.Capabilities.extendedKeyIDForIndviduallyAddressedFrames;
}

void *IEEE80211InformationElement.RSNCapability.Capabilities.ocvc.unsafeMutableAddressor()
{
  return &static IEEE80211InformationElement.RSNCapability.Capabilities.ocvc;
}

uint64_t sub_10019AFF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1001A2BA0();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_10019B050(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1001A2BA0();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

void sub_10019B09C(uint64_t a1@<X0>, _WORD *a2@<X8>)
{
  __int16 v4;

  v4 = sub_1001A4B0C(a1);
  swift_bridgeObjectRelease(a1);
  *a2 = v4;
}

void *IEEE80211InformationElement.RSNCapability.defaultVersion.unsafeMutableAddressor()
{
  return &static IEEE80211InformationElement.RSNCapability.defaultVersion;
}

uint64_t IEEE80211InformationElement.RSNCapability.groupCipherSuite.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 2);
}

uint64_t IEEE80211InformationElement.RSNCapability.groupManagementCipherSuite.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 40);
}

uint64_t IEEE80211InformationElement.RSNCapability.groupManagementCipherSuite.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 40) = result;
  return result;
}

void IEEE80211InformationElement.RSNCapability.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  Swift::UInt v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  Swift::UInt v9;
  char *v10;
  char v11;
  uint64_t v12;
  Swift::UInt v13;
  unint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  __n128 v17;
  uint64_t v18;

  v2 = v1;
  Hasher._combine(_:)(*(_WORD *)v2);
  Hasher._combine(_:)(byte_1003519CF[*(char *)(v2 + 2)]);
  v4 = *(_QWORD *)(v2 + 8);
  v5 = *(_QWORD *)(v4 + 16);
  Hasher._combine(_:)(v5);
  if (v5)
  {
    v6 = (char *)(v4 + 32);
    do
    {
      v7 = *v6++;
      Hasher._combine(_:)(byte_1003519CF[v7]);
      --v5;
    }
    while (v5);
  }
  v8 = *(_QWORD *)(v2 + 16);
  v9 = *(_QWORD *)(v8 + 16);
  Hasher._combine(_:)(v9);
  if (v9)
  {
    v10 = (char *)(v8 + 32);
    do
    {
      v11 = *v10++;
      Hasher._combine(_:)(v11 + 1);
      --v9;
    }
    while (v9);
  }
  Hasher._combine(_:)(*(_WORD *)(v2 + 24));
  v12 = *(_QWORD *)(v2 + 32);
  v18 = v12;
  v13 = *(_QWORD *)(v12 + 16);
  Hasher._combine(_:)(v13);
  if (v13)
  {
    swift_bridgeObjectRetain(v12);
    v14 = (unint64_t *)(v12 + 40);
    do
    {
      v15 = *(v14 - 1);
      v16 = *v14;
      sub_100031FEC(v15, *v14);
      Data.hash(into:)(a1, v15, v16, v17);
      sub_10000E614(v15, v16);
      v14 += 2;
      --v13;
    }
    while (v13);
    sub_1001A18D8(&v18);
  }
  Hasher._combine(_:)(byte_1003519CF[*(char *)(v2 + 40)]);
}

Swift::Int IEEE80211InformationElement.RSNCapability.hashValue.getter()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  IEEE80211InformationElement.RSNCapability.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

double sub_10019B264@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  __int128 v6;
  _OWORD v7[2];

  result = IEEE80211InformationElement.RSNCapability.init(from:)(a1, &v6);
  if (!v2)
  {
    v5 = v7[0];
    *a2 = v6;
    a2[1] = v5;
    result = *(double *)((char *)v7 + 9);
    *(_OWORD *)((char *)a2 + 25) = *(_OWORD *)((char *)v7 + 9);
  }
  return result;
}

double IEEE80211InformationElement.RSNCapability.init(from:)@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  __int128 v6;
  _OWORD v7[2];

  sub_1001A1A20(a1, (uint64_t)&v6);
  if (!v2)
  {
    v5 = v7[0];
    *a2 = v6;
    a2[1] = v5;
    result = *(double *)((char *)v7 + 9);
    *(_OWORD *)((char *)a2 + 25) = *(_OWORD *)((char *)v7 + 9);
  }
  return result;
}

uint64_t sub_10019B2E4(_QWORD *a1)
{
  return IEEE80211InformationElement.RSNCapability.encode(to:)(a1);
}

uint64_t IEEE80211InformationElement.RSNCapability.encode(to:)(_QWORD *a1)
{
  unsigned __int16 *v1;
  uint64_t v2;
  unsigned __int16 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  _QWORD v22[3];
  uint64_t v23;
  uint64_t v24;

  v3 = v1;
  v4 = a1[3];
  v5 = a1[4];
  sub_10003259C(a1, v4);
  dispatch thunk of Encoder.unkeyedContainer()(v22, v4, v5);
  v6 = v23;
  v7 = v24;
  v8 = *v1;
  sub_100034C68((uint64_t)v22, v23);
  dispatch thunk of UnkeyedEncodingContainer.encode(_:)(v8, v6, v7);
  if (v2)
    return sub_100014430(v22);
  LOBYTE(v21) = *((_BYTE *)v3 + 2);
  v9 = v23;
  v10 = v24;
  sub_100034C68((uint64_t)v22, v23);
  v11 = sub_1001A1DF0();
  dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)(&v21, &type metadata for IEEE80211InformationElement.IEEE80211CipherSuite, v11, v9, v10);
  v12 = *((_QWORD *)v3 + 1);
  v13 = *(_QWORD *)(v12 + 16);
  if (v13 < 0x10000)
  {
    v14 = v23;
    v15 = v24;
    sub_100034C68((uint64_t)v22, v23);
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)(v13, v14, v15);
    v21 = v12;
    v16 = v23;
    v17 = v24;
    sub_100034C68((uint64_t)v22, v23);
    v18 = sub_100012C44(&qword_10040A160);
    v19 = sub_1000934A0(&qword_10040A168, &qword_10040A160, (uint64_t (*)(void))sub_1001A1DF0, (const char *)&protocol conformance descriptor for <A> [A]);
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)(&v21, v18, v19, v16, v17);
    return sub_100014430(v22);
  }
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 3455, 0);
  __break(1u);
  return result;
}

Swift::Int sub_10019B4D8()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  IEEE80211InformationElement.RSNCapability.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

BOOL sub_10019B510(__int128 *a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v5;
  _OWORD v6[2];
  __int128 v7;
  _OWORD v8[2];

  v2 = a1[1];
  v5 = *a1;
  v6[0] = v2;
  *(_OWORD *)((char *)v6 + 9) = *(__int128 *)((char *)a1 + 25);
  v3 = a2[1];
  v7 = *a2;
  v8[0] = v3;
  *(_OWORD *)((char *)v8 + 9) = *(__int128 *)((char *)a2 + 25);
  return _s7CoreP2P27IEEE80211InformationElementO13RSNCapabilityV23__derived_struct_equalsySbAE_AEtFZ_0((unsigned __int16 *)&v5, (unsigned __int16 *)&v7);
}

uint64_t sub_10019B558()
{
  uint64_t result;

  result = sub_1001AA1C0(4);
  static IEEE80211InformationElement.ExtendedRSNCapability.protectedTWTOperationsSupport = result;
  return result;
}

uint64_t *IEEE80211InformationElement.ExtendedRSNCapability.protectedTWTOperationsSupport.unsafeMutableAddressor()
{
  if (qword_1004041A8 != -1)
    swift_once(&qword_1004041A8, sub_10019B558);
  return &static IEEE80211InformationElement.ExtendedRSNCapability.protectedTWTOperationsSupport;
}

uint64_t static IEEE80211InformationElement.ExtendedRSNCapability.protectedTWTOperationsSupport.getter()
{
  return sub_10006998C(&qword_1004041A8, &static IEEE80211InformationElement.ExtendedRSNCapability.protectedTWTOperationsSupport);
}

uint64_t sub_10019B5D4()
{
  uint64_t result;

  result = sub_1001AA1C0(5);
  static IEEE80211InformationElement.ExtendedRSNCapability.saeHashToElement = result;
  return result;
}

uint64_t *IEEE80211InformationElement.ExtendedRSNCapability.saeHashToElement.unsafeMutableAddressor()
{
  if (qword_1004041B0 != -1)
    swift_once(&qword_1004041B0, sub_10019B5D4);
  return &static IEEE80211InformationElement.ExtendedRSNCapability.saeHashToElement;
}

uint64_t static IEEE80211InformationElement.ExtendedRSNCapability.saeHashToElement.getter()
{
  return sub_10006998C(&qword_1004041B0, &static IEEE80211InformationElement.ExtendedRSNCapability.saeHashToElement);
}

uint64_t sub_10019B650()
{
  uint64_t result;

  result = sub_1001AA1C0(8);
  static IEEE80211InformationElement.ExtendedRSNCapability.secureLTFSupported = result;
  return result;
}

uint64_t *IEEE80211InformationElement.ExtendedRSNCapability.secureLTFSupported.unsafeMutableAddressor()
{
  if (qword_1004041B8 != -1)
    swift_once(&qword_1004041B8, sub_10019B650);
  return &static IEEE80211InformationElement.ExtendedRSNCapability.secureLTFSupported;
}

uint64_t static IEEE80211InformationElement.ExtendedRSNCapability.secureLTFSupported.getter()
{
  return sub_10006998C(&qword_1004041B8, &static IEEE80211InformationElement.ExtendedRSNCapability.secureLTFSupported);
}

uint64_t sub_10019B6CC()
{
  uint64_t result;

  result = sub_1001AA1C0(9);
  static IEEE80211InformationElement.ExtendedRSNCapability.secureRTTSupported = result;
  return result;
}

uint64_t *IEEE80211InformationElement.ExtendedRSNCapability.secureRTTSupported.unsafeMutableAddressor()
{
  if (qword_1004041C0 != -1)
    swift_once(&qword_1004041C0, sub_10019B6CC);
  return &static IEEE80211InformationElement.ExtendedRSNCapability.secureRTTSupported;
}

uint64_t static IEEE80211InformationElement.ExtendedRSNCapability.secureRTTSupported.getter()
{
  return sub_10006998C(&qword_1004041C0, &static IEEE80211InformationElement.ExtendedRSNCapability.secureRTTSupported);
}

uint64_t sub_10019B748()
{
  uint64_t result;

  result = sub_1001AA1C0(10);
  static IEEE80211InformationElement.ExtendedRSNCapability.urnmMFPR = result;
  return result;
}

uint64_t *IEEE80211InformationElement.ExtendedRSNCapability.urnmMFPR.unsafeMutableAddressor()
{
  if (qword_1004041C8 != -1)
    swift_once(&qword_1004041C8, sub_10019B748);
  return &static IEEE80211InformationElement.ExtendedRSNCapability.urnmMFPR;
}

uint64_t static IEEE80211InformationElement.ExtendedRSNCapability.urnmMFPR.getter()
{
  return sub_10006998C(&qword_1004041C8, &static IEEE80211InformationElement.ExtendedRSNCapability.urnmMFPR);
}

uint64_t sub_10019B7C4()
{
  uint64_t result;

  result = sub_1001AA1C0(11);
  static IEEE80211InformationElement.ExtendedRSNCapability.protectedAnnounceSupport = result;
  return result;
}

uint64_t *IEEE80211InformationElement.ExtendedRSNCapability.protectedAnnounceSupport.unsafeMutableAddressor()
{
  if (qword_1004041D0 != -1)
    swift_once(&qword_1004041D0, sub_10019B7C4);
  return &static IEEE80211InformationElement.ExtendedRSNCapability.protectedAnnounceSupport;
}

uint64_t static IEEE80211InformationElement.ExtendedRSNCapability.protectedAnnounceSupport.getter()
{
  return sub_10006998C(&qword_1004041D0, &static IEEE80211InformationElement.ExtendedRSNCapability.protectedAnnounceSupport);
}

_QWORD *IEEE80211InformationElement.ExtendedRSNCapability.init(from:)(_QWORD *a1)
{
  return sub_1001A1900(a1);
}

uint64_t sub_10019B854(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001A1E34();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10019B87C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001A1E34();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t IEEE80211InformationElement.ExtendedRSNCapability.encode(to:)(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v4 = sub_100012C44(&qword_10040A170);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin();
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a1[3];
  v9 = a1[4];
  sub_10003259C(a1, v8);
  v10 = sub_1001A1E34();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for IEEE80211InformationElement.ExtendedRSNCapability.CodingKeys, &type metadata for IEEE80211InformationElement.ExtendedRSNCapability.CodingKeys, v10, v8, v9);
  v16 = a2;
  v11 = sub_100012C44(&qword_100406738);
  v12 = sub_1001A1E78();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v16, v13, v4, v11, v12);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

_QWORD *sub_10019B9A8@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;

  result = IEEE80211InformationElement.ExtendedRSNCapability.init(from:)(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_10019B9D0(_QWORD *a1)
{
  uint64_t *v1;

  return IEEE80211InformationElement.ExtendedRSNCapability.encode(to:)(a1, *v1);
}

uint64_t sub_10019B9E8()
{
  _QWORD *v0;

  return sub_1001A9D14(0, *v0);
}

void sub_10019B9F4()
{
  uint64_t *v0;
  uint64_t v1;
  Swift::UInt v2;
  Swift::UInt8 *v3;
  Swift::UInt8 v4;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 16);
  Hasher._combine(_:)(v2);
  if (v2)
  {
    v3 = (Swift::UInt8 *)(v1 + 32);
    do
    {
      v4 = *v3++;
      Hasher._combine(_:)(v4);
      --v2;
    }
    while (v2);
  }
}

uint64_t sub_10019BA44(uint64_t a1)
{
  _QWORD *v1;

  return sub_1001A9D14(a1, *v1);
}

uint64_t sub_10019BA50@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_100068DEC(a1, (void (*)(uint64_t))sub_10009B5E8, a2);
}

void sub_10019BA5C(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *a1;
  v5 = *v2;
  v6 = *v2;
  swift_bridgeObjectRetain(*v2);
  sub_1001AA114(v4);
  swift_bridgeObjectRelease(v5);
  *a2 = v6;
}

BOOL sub_10019BAB8(uint64_t *a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v9;

  v4 = *a2;
  v9 = *v2;
  swift_bridgeObjectRetain(*v2);
  sub_1001AA114(v4);
  v5 = v9;
  v6 = sub_1000851D0(v9, v4);
  if ((v6 & 1) == 0)
  {
    swift_bridgeObjectRelease(v9);
    v7 = swift_bridgeObjectRetain(v4);
    sub_10009B5E8(v7);
    v5 = v4;
  }
  *a1 = v5;
  swift_bridgeObjectRelease(v4);
  return (v6 & 1) == 0;
}

uint64_t sub_10019BB54@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = sub_1001AA028(*a1);
  *a2 = result;
  return result;
}

void sub_10019BB7C(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;

  v4 = *a1;
  v7 = *v2;
  swift_bridgeObjectRetain(*v2);
  sub_1001AA114(v4);
  v5 = v7;
  sub_10009B5E8(v4);
  v6 = sub_1000851D0(v7, _swiftEmptyArrayStorage);
  swift_bridgeObjectRelease(v4);
  if ((v6 & 1) != 0)
  {
    swift_bridgeObjectRelease(v7);
    v5 = 0;
  }
  *a2 = v5;
}

double sub_10019BC10(uint64_t *a1)
{
  uint64_t v1;
  double result;

  v1 = *a1;
  sub_10009B5E8(*a1);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v1).n128_u64[0];
  return result;
}

uint64_t sub_10019BC38(uint64_t *a1)
{
  return sub_1001AA114(*a1);
}

void sub_10019BC40(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *a1;
  v5 = *v2;
  v6 = *v2;
  swift_bridgeObjectRetain_n(*v2, 2);
  sub_1001AA1B4(v4);
  sub_1001AA114(v6);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v6);
  *a2 = v5;
}

uint64_t sub_10019BCBC(uint64_t *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v6;

  v2 = *a1;
  v3 = *v1;
  v6 = *v1;
  swift_bridgeObjectRetain(*v1);
  sub_1001AA114(v2);
  v4 = sub_1000851D0(v6, v3);
  swift_bridgeObjectRelease(v6);
  return v4 & 1;
}

uint64_t sub_10019BD24(uint64_t *a1)
{
  _QWORD *v1;
  uint64_t v2;
  char v3;
  uint64_t v5;

  v2 = *a1;
  v5 = *v1;
  swift_bridgeObjectRetain(*v1);
  sub_1001AA114(v2);
  v3 = sub_1000851D0(v5, _swiftEmptyArrayStorage);
  swift_bridgeObjectRelease(v5);
  return v3 & 1;
}

uint64_t sub_10019BD84(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v2 = *a1;
  v3 = *v1;
  v5 = *a1;
  swift_bridgeObjectRetain(*a1);
  sub_1001AA114(v3);
  LOBYTE(v2) = sub_1000851D0(v5, v2);
  swift_bridgeObjectRelease(v5);
  return v2 & 1;
}

double sub_10019BDEC(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  double result;
  uint64_t v4;

  v2 = *a1;
  v4 = *v1;
  swift_bridgeObjectRetain(*v1);
  sub_1001AA1B4(v2);
  sub_1001AA114(v4);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v4).n128_u64[0];
  return result;
}

void sub_10019BE48(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;

  sub_1001EAF68(a1);
  v5 = v4;
  swift_bridgeObjectRelease(a1);
  *a2 = v5;
}

uint64_t IEEE80211InformationElement.IEEE80211CipherSuite.init(from:)(_QWORD *a1)
{
  return sub_1001A11D4(a1);
}

uint64_t IEEE80211InformationElement.IEEE80211CipherSuite.encode(to:)(_QWORD *a1, char a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int16 v13;
  char v14;
  _QWORD v15[3];
  uint64_t v16;
  uint64_t v17;

  v4 = a1[3];
  v5 = a1[4];
  sub_10003259C(a1, v4);
  dispatch thunk of Encoder.unkeyedContainer()(v15, v4, v5);
  v13 = 3840;
  v14 = -84;
  v6 = v16;
  v7 = v17;
  sub_100034C68((uint64_t)v15, v16);
  v8 = sub_10016FD7C();
  dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)(&v13, &type metadata for OUI, v8, v6, v7);
  if (!v2)
  {
    v9 = a2;
    v10 = v16;
    v11 = v17;
    sub_100034C68((uint64_t)v15, v16);
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)(byte_1003519CF[v9], v10, v11);
  }
  return sub_100014430(v15);
}

uint64_t IEEE80211InformationElement.IEEE80211CipherSuite.rawValue.getter(char a1)
{
  return byte_1003519CF[a1];
}

BOOL sub_10019BF9C(char *a1, char *a2)
{
  return byte_1003519CF[*a1] == byte_1003519CF[*a2];
}

uint64_t sub_10019BFC0@<X0>(unsigned __int8 *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = _s7CoreP2P27IEEE80211InformationElementO0C11CipherSuiteO8rawValueAESgs5UInt8V_tcfC_0(*a1);
  *a2 = result;
  return result;
}

void sub_10019BFE8(_BYTE *a1@<X8>)
{
  char *v1;

  *a1 = byte_1003519CF[*v1];
}

Swift::Int sub_10019C000()
{
  char *v0;
  uint64_t v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(byte_1003519CF[v1]);
  return Hasher._finalize()();
}

void sub_10019C04C()
{
  char *v0;

  Hasher._combine(_:)(byte_1003519CF[*v0]);
}

Swift::Int sub_10019C080()
{
  char *v0;
  uint64_t v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(byte_1003519CF[v1]);
  return Hasher._finalize()();
}

uint64_t sub_10019C0C8@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = sub_1001A11D4(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_10019C0F0(_QWORD *a1)
{
  char *v1;

  return IEEE80211InformationElement.IEEE80211CipherSuite.encode(to:)(a1, *v1);
}

uint64_t sub_10019C108(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1001A44E0();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_10019C164(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1001A44E0();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

void sub_10019C1B0(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  char v4;

  v4 = sub_1001A4AD4(a1);
  swift_bridgeObjectRelease(a1);
  *a2 = v4;
}

uint64_t sub_10019C1EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1001A5574();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_10019C248(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1001A5574();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_10019C294()
{
  _BYTE *v0;

  if (*v0)
    return 0x65696B6F6F63;
  else
    return 0x6B636162656D6F63;
}

uint64_t sub_10019C2D8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1001A50F0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10019C2FC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001A1ED4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10019C324(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001A1ED4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters.Comeback.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[2];
  char v20;

  v18 = a4;
  v8 = sub_100012C44(&qword_10040A180);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin();
  v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  sub_10003259C(a1, v12);
  v14 = sub_1001A1ED4();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters.Comeback.CodingKeys, &type metadata for IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters.Comeback.CodingKeys, v14, v12, v13);
  LOBYTE(v19[0]) = 0;
  KeyedEncodingContainer.encode(_:forKey:)(a2, v19, v8);
  if (!v4)
  {
    v19[0] = a3;
    v19[1] = v18;
    v20 = 1;
    v15 = sub_100068570();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v19, &v20, v8, &type metadata for Data, v15);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t sub_10019C488@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  result = sub_1001A0F1C(a1);
  if (!v2)
  {
    *(_WORD *)a2 = result;
    *(_QWORD *)(a2 + 8) = v5;
    *(_QWORD *)(a2 + 16) = v6;
  }
  return result;
}

uint64_t IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters.Comeback.init(from:)(_QWORD *a1)
{
  return sub_1001A0F1C(a1);
}

uint64_t sub_10019C4D4(_QWORD *a1)
{
  unsigned __int16 *v1;

  return IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters.Comeback.encode(to:)(a1, *v1, *((_QWORD *)v1 + 1), *((_QWORD *)v1 + 2));
}

uint64_t IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters.comeback.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)v0;
  sub_100063C28(*(_QWORD *)v0, *(_QWORD *)(v0 + 8), *(_QWORD *)(v0 + 16));
  return v1;
}

uint64_t IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters.comeback.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t result;

  result = sub_1000634E8(*(_QWORD *)v3, *(_QWORD *)(v3 + 8), *(_QWORD *)(v3 + 16));
  *(_QWORD *)v3 = a1;
  *(_QWORD *)(v3 + 8) = a2;
  *(_QWORD *)(v3 + 16) = a3;
  return result;
}

uint64_t IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters.finiteCylicGroupID.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 24) = result & 1;
  return result;
}

uint64_t IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters.ephemeralPublicKey.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  sub_1000339F4(v1, *(_QWORD *)(v0 + 40));
  return v1;
}

uint64_t IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters.ephemeralPublicKey.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = sub_10000E658(*(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40));
  *(_QWORD *)(v2 + 32) = a1;
  *(_QWORD *)(v2 + 40) = a2;
  return result;
}

void IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters.hash(into:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  unint64_t v8;
  uint64_t v9;
  __n128 v10;
  char v11;
  char v12;

  v2 = v1;
  v4 = v2[2];
  if (v4 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v6 = *v2;
    v5 = v2[1];
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v6);
    sub_100031FEC(v5, v4);
    Data.hash(into:)(a1, v5, v4, v7);
    sub_1000634E8(v6, v5, v4);
  }
  sub_100063EB8((uint64_t)(v2 + 3), (uint64_t)&v11, &qword_100409460);
  sub_100063EB8((uint64_t)&v11, (uint64_t)&v12, &qword_100409460);
  if (v12 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(0x13u);
  }
  v8 = v2[5];
  if (v8 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v9 = v2[4];
    Hasher._combine(_:)(1u);
    sub_100031FEC(v9, v8);
    Data.hash(into:)(a1, v9, v8, v10);
    sub_10000E658(v9, v8);
  }
}

Swift::Int IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters.hashValue.getter()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int sub_10019C754()
{
  __int128 *v0;
  __int128 v1;
  _QWORD v3[9];
  __int128 v4;
  __int128 v5;
  __int128 v6;

  v1 = v0[1];
  v4 = *v0;
  v5 = v1;
  v6 = v0[2];
  Hasher.init(_seed:)(v3);
  IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters.hash(into:)((uint64_t)v3);
  return Hasher._finalize()();
}

void sub_10019C7A4(uint64_t a1)
{
  IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters.hash(into:)(a1);
}

Swift::Int sub_10019C7DC()
{
  __int128 *v0;
  __int128 v1;
  _QWORD v3[9];
  __int128 v4;
  __int128 v5;
  __int128 v6;

  v1 = v0[1];
  v4 = *v0;
  v5 = v1;
  v6 = v0[2];
  Hasher.init(_seed:)(v3);
  IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters.hash(into:)((uint64_t)v3);
  return Hasher._finalize()();
}

double sub_10019C828@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  __int128 v7;

  result = IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters.init(from:)(a1, v6);
  if (!v2)
  {
    v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
    result = *(double *)&v7;
    a2[2] = v7;
  }
  return result;
}

double IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters.init(from:)@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  __int128 v7;

  sub_1001A1340(a1, (uint64_t)v6);
  if (!v2)
  {
    v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
    result = *(double *)&v7;
    a2[2] = v7;
  }
  return result;
}

uint64_t sub_10019C8A8(_QWORD *a1)
{
  return IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters.encode(to:)(a1);
}

uint64_t IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v22[24];
  _QWORD v23[3];
  uint64_t v24;
  uint64_t v25;
  _BYTE v26[16];
  _BYTE v27[16];
  _BYTE v28[24];
  _BYTE v29[16];
  unint64_t v30;
  _BYTE v31[8];
  unint64_t v32;
  char v33;
  char v34;

  v3 = a1[3];
  v4 = a1[4];
  sub_10003259C(a1, v3);
  dispatch thunk of Encoder.unkeyedContainer()(v23, v3, v4);
  sub_100063EB8(v1, (uint64_t)v28, &qword_10040A190);
  sub_100063EB8((uint64_t)v28, (uint64_t)v29, &qword_10040A190);
  v5 = v30 >> 60 != 15;
  sub_100063EB8(v1 + 24, (uint64_t)&v33, &qword_100409460);
  sub_100063EB8((uint64_t)&v33, (uint64_t)&v34, &qword_100409460);
  if ((v34 & 1) == 0)
  {
    sub_100063EB8(v1 + 32, (uint64_t)v27, &qword_10040A1B8);
    sub_100063EB8((uint64_t)v27, (uint64_t)v31, &qword_10040A1B8);
    if (v32 >> 60 != 15)
      v5 |= 2u;
  }
  v22[0] = v5;
  v6 = v24;
  v7 = v25;
  sub_100034C68((uint64_t)v23, v24);
  v8 = sub_1001A1F18();
  dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)(v22, &type metadata for IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters.Control, v8, v6, v7);
  if (!v2)
  {
    sub_100063EB8((uint64_t)v28, (uint64_t)v22, &qword_10040A190);
    v9 = v24;
    v10 = v25;
    sub_100034C68((uint64_t)v23, v24);
    v11 = sub_100012C44(&qword_10040A190);
    v12 = sub_1000934A0(&qword_10040A1A0, &qword_10040A190, (uint64_t (*)(void))sub_1001A1F5C, (const char *)&protocol conformance descriptor for <A> A?);
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)(v22, v11, v12, v9, v10);
    sub_100063EB8((uint64_t)&v33, (uint64_t)v22, &qword_100409460);
    v13 = v24;
    v14 = v25;
    sub_100034C68((uint64_t)v23, v24);
    v15 = sub_100012C44(&qword_100409460);
    v16 = sub_1000934A0(&qword_10040A1B0, &qword_100409460, (uint64_t (*)(void))sub_10016EA58, (const char *)&protocol conformance descriptor for <A> A?);
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)(v22, v15, v16, v13, v14);
    sub_100063EB8(v1 + 32, (uint64_t)v26, &qword_10040A1B8);
    sub_100063EB8((uint64_t)v26, (uint64_t)v22, &qword_10040A1B8);
    v17 = v24;
    v18 = v25;
    sub_100034C68((uint64_t)v23, v24);
    v19 = sub_100012C44(&qword_10040A1B8);
    v20 = sub_1000934A0(&qword_10040A1C0, &qword_10040A1B8, (uint64_t (*)(void))sub_100068570, (const char *)&protocol conformance descriptor for <A> A?);
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)(v22, v19, v20, v17, v18);
  }
  return sub_100014430(v23);
}

BOOL sub_10019CBBC(_OWORD *a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[3];
  _OWORD v8[3];

  v2 = a1[1];
  v7[0] = *a1;
  v7[1] = v2;
  v3 = *a2;
  v4 = a2[1];
  v7[2] = a1[2];
  v8[0] = v3;
  v5 = a2[2];
  v8[1] = v4;
  v8[2] = v5;
  return _s7CoreP2P27IEEE80211InformationElementO43PreAssociationSecurityNegotiationParametersV23__derived_struct_equalsySbAE_AEtFZ_0((uint64_t *)v7, (uint64_t *)v8);
}

uint64_t IEEE80211InformationElement.AuthenticationKeyManagementSuite.init(from:)(_QWORD *a1)
{
  return sub_1001A1068(a1);
}

uint64_t IEEE80211InformationElement.AuthenticationKeyManagementSuite.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  __int16 v7;
  char v8;
  _QWORD v9[3];
  uint64_t v10;
  uint64_t v11;

  v1 = a1[3];
  v2 = a1[4];
  sub_10003259C(a1, v1);
  dispatch thunk of Encoder.unkeyedContainer()(v9, v1, v2);
  v7 = 3840;
  v8 = -84;
  v3 = v10;
  v4 = v11;
  sub_100034C68((uint64_t)v9, v10);
  v5 = sub_10016FD7C();
  dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)(&v7, &type metadata for OUI, v5, v3, v4);
  return sub_100014430(v9);
}

uint64_t sub_10019CCBC@<X0>(char *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = _s7CoreP2P27IEEE80211InformationElementO32AuthenticationKeyManagementSuiteO8rawValueAESgs5UInt8V_tcfC_0(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10019CCE4@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = sub_1001A1068(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_10019CD0C()
{
  return 1701080931;
}

uint64_t sub_10019CD1C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v6;
  uint64_t result;
  char v8;

  if (a1 == 1701080931 && a2 == 0xE400000000000000)
  {
    result = swift_bridgeObjectRelease(0xE400000000000000);
    v8 = 0;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(1701080931, 0xE400000000000000, a1, a2, 0);
    result = swift_bridgeObjectRelease(a2);
    v8 = v6 ^ 1;
  }
  *a3 = v8 & 1;
  return result;
}

uint64_t sub_10019CDA0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001A1FA0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10019CDC8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001A1FA0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t IEEE80211InformationElement.MessageIntegrityCode.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD v16[2];

  v6 = sub_100012C44(&qword_10040A1C8);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin();
  v9 = (char *)v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a1[3];
  v11 = a1[4];
  sub_10003259C(a1, v10);
  v12 = sub_1001A1FA0();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for IEEE80211InformationElement.MessageIntegrityCode.CodingKeys, &type metadata for IEEE80211InformationElement.MessageIntegrityCode.CodingKeys, v12, v10, v11);
  v16[0] = a2;
  v16[1] = a3;
  v13 = sub_100068570();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v16, v14, v6, &type metadata for Data, v13);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

_QWORD *IEEE80211InformationElement.MessageIntegrityCode.init(from:)(_QWORD *a1)
{
  return sub_1001A0DF8(a1);
}

_QWORD *sub_10019CF08@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v5;

  result = sub_1001A0DF8(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t sub_10019CF30(_QWORD *a1)
{
  uint64_t *v1;

  return IEEE80211InformationElement.MessageIntegrityCode.encode(to:)(a1, *v1, v1[1]);
}

uint64_t sub_10019CF48(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001A1FE4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10019CF70(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001A1FE4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t IEEE80211InformationElement.WrappedData.encode(to:)(_QWORD *a1)
{
  return sub_10019CFC4(a1, &qword_10040A1D8, (uint64_t (*)(void))sub_1001A1FE4, (uint64_t)&type metadata for IEEE80211InformationElement.WrappedData.CodingKeys);
}

uint64_t sub_10019CFC4(_QWORD *a1, uint64_t *a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v7 = sub_100012C44(a2);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin();
  v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a1[3];
  v12 = a1[4];
  sub_10003259C(a1, v11);
  v13 = a3();
  dispatch thunk of Encoder.container<A>(keyedBy:)(a4, a4, v13, v11, v12);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_10019D094(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_10019D0C0(a1, a2, a3, &qword_10040A1D8, (uint64_t (*)(void))sub_1001A1FE4, (uint64_t)&type metadata for IEEE80211InformationElement.WrappedData.CodingKeys);
}

uint64_t sub_10019D0C0(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t (*a5)(void), uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v9 = sub_100012C44(a4);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin();
  v12 = (char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a1[3];
  v14 = a1[4];
  sub_10003259C(a1, v13);
  v15 = a5();
  dispatch thunk of Encoder.container<A>(keyedBy:)(a6, a6, v15, v13, v14);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

BOOL sub_10019D190(char *a1, char *a2)
{
  return byte_1003519C6[*a1] == byte_1003519C6[*a2];
}

Swift::Int sub_10019D1B4()
{
  char *v0;
  uint64_t v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(byte_1003519C6[v1]);
  return Hasher._finalize()();
}

void sub_10019D200()
{
  char *v0;

  Hasher._combine(_:)(byte_1003519C6[*v0]);
}

Swift::Int sub_10019D234()
{
  char *v0;
  uint64_t v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(byte_1003519C6[v1]);
  return Hasher._finalize()();
}

uint64_t sub_10019D27C@<X0>(unsigned __int8 *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_1001A0980(*a1);
  *a2 = result;
  return result;
}

void sub_10019D2A4(_BYTE *a1@<X8>)
{
  char *v1;

  *a1 = byte_1003519C6[*v1];
}

uint64_t sub_10019D2BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1001A51FC();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_10019D318(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1001A51FC();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

unsigned __int8 *sub_10019D364@<X0>(unsigned __int8 *result@<X0>, char *a2@<X8>)
{
  int v2;
  char v3;
  char v4;

  v2 = *result;
  if (v2 == 100)
    v3 = 1;
  else
    v3 = 2;
  if (v2 == 8)
    v4 = 0;
  else
    v4 = v3;
  *a2 = v4;
  return result;
}

void sub_10019D384(char *a1@<X8>)
{
  _BYTE *v1;
  char v2;

  if (*v1)
    v2 = 100;
  else
    v2 = 8;
  *a1 = v2;
}

Swift::Int sub_10019D3A0()
{
  unsigned __int8 *v0;
  int v1;
  Swift::UInt8 v2;
  _QWORD v4[9];

  v1 = *v0;
  Hasher.init(_seed:)(v4);
  if (v1)
    v2 = 100;
  else
    v2 = 8;
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void sub_10019D3F0()
{
  _BYTE *v0;
  Swift::UInt8 v1;

  if (*v0)
    v1 = 100;
  else
    v1 = 8;
  Hasher._combine(_:)(v1);
}

Swift::Int sub_10019D428()
{
  unsigned __int8 *v0;
  int v1;
  Swift::UInt8 v2;
  _QWORD v4[9];

  v1 = *v0;
  Hasher.init(_seed:)(v4);
  if (v1)
    v2 = 100;
  else
    v2 = 8;
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t sub_10019D474(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1001A5240();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_10019D4D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1001A5240();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

void sub_10019D51C()
{
  uint64_t v0;
  _BYTE v1[56];

  sub_100095708(v0, (uint64_t)v1);
  __asm { BR              X12 }
}

uint64_t sub_10019D558@<X0>(int a1@<W8>)
{
  return (a1 << 8) | 6u;
}

uint64_t IEEE80211InformationElement.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  _BYTE v5[56];

  result = sub_1001A2028(a1);
  if (!v2)
    return sub_100095708((uint64_t)v5, a2);
  return result;
}

uint64_t sub_10019D624(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  char *v8;
  unsigned __int8 v9;
  _BYTE v10[24];

  v3 = sub_100012C44(&qword_10040A430);
  swift_beginAccess(a1, v10, 33, 0);
  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 32);
  sub_100034C68(a1, v4);
  v6 = sub_100011770(&qword_10040A438, &qword_10040A430, "%@\t");
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)(v3, v3, v6, v4, v5);
  result = swift_endAccess(v10);
  if (!v1)
  {
    v8 = (char *)&loc_10019D700 + 4 * byte_10034FD13[sub_1001A0980(v9)];
    __asm { BR              X11 }
  }
  return result;
}

uint64_t sub_10019D8C8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unsigned __int8 v11;
  _BYTE v12[24];

  v5 = sub_100012C44(&qword_10040A430);
  swift_beginAccess(a1, v12, 33, 0);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_QWORD *)(a1 + 32);
  sub_100034C68(a1, v6);
  v8 = sub_100011770(&qword_10040A438, &qword_10040A430, "%@\t");
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)(v5, v5, v8, v6, v7);
  swift_endAccess(v12);
  if (!v2)
  {
    v9 = (char *)&loc_10019D9A0 + 4 * byte_10034FD21[sub_1001A0980(v11)];
    __asm { BR              X11 }
  }
  return a2;
}

uint64_t sub_10019DB5C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  char *v8;
  unsigned __int8 v9;
  _BYTE v10[24];

  v3 = sub_100012C44(&qword_10040A430);
  swift_beginAccess(a1, v10, 33, 0);
  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 32);
  sub_100034C68(a1, v4);
  v6 = sub_100011770(&qword_10040A438, &qword_10040A430, "%@\t");
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)(v3, v3, v6, v4, v5);
  result = swift_endAccess(v10);
  if (!v1)
  {
    v8 = (char *)&loc_10019DC3C + 4 * byte_10034FD2F[sub_1001A0980(v9)];
    __asm { BR              X11 }
  }
  return result;
}

uint64_t sub_10019DE28(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  char *v8;
  unsigned __int8 v9;
  _BYTE v10[24];

  v3 = sub_100012C44(&qword_10040A430);
  swift_beginAccess(a1, v10, 33, 0);
  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 32);
  sub_100034C68(a1, v4);
  v6 = sub_100011770(&qword_10040A438, &qword_10040A430, "%@\t");
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)(v3, v3, v6, v4, v5);
  result = swift_endAccess(v10);
  if (!v1)
  {
    v8 = (char *)&loc_10019DF04 + 4 * byte_10034FD3D[sub_1001A0980(v9)];
    __asm { BR              X11 }
  }
  return result;
}

uint64_t sub_10019E0D0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unsigned __int8 v11;
  _BYTE v12[24];

  v5 = sub_100012C44(&qword_10040A430);
  swift_beginAccess(a1, v12, 33, 0);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_QWORD *)(a1 + 32);
  sub_100034C68(a1, v6);
  v8 = sub_100011770(&qword_10040A438, &qword_10040A430, "%@\t");
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)(v5, v5, v8, v6, v7);
  swift_endAccess(v12);
  if (!v2)
  {
    v9 = (char *)&loc_10019E1A8 + 4 * byte_10034FD4B[sub_1001A0980(v11)];
    __asm { BR              X11 }
  }
  return a2;
}

uint64_t sub_10019E36C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  char *v8;
  _BYTE v9[32];

  v3 = sub_100012C44(&qword_10040A430);
  swift_beginAccess(a1, v9, 33, 0);
  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 32);
  sub_100034C68(a1, v4);
  v6 = sub_100011770(&qword_10040A438, &qword_10040A430, "%@\t");
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)(v3, v3, v6, v4, v5);
  result = swift_endAccess(v9);
  if (!v1)
  {
    v8 = (char *)&loc_10019E444 + 4 * byte_10034FD59[sub_1001A0980(v9[24])];
    __asm { BR              X11 }
  }
  return result;
}

uint64_t sub_10019E578(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  char *v8;
  unsigned __int8 v9;
  _BYTE v10[24];

  v3 = sub_100012C44(&qword_10040A430);
  swift_beginAccess(a1, v10, 33, 0);
  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 32);
  sub_100034C68(a1, v4);
  v6 = sub_100011770(&qword_10040A438, &qword_10040A430, "%@\t");
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)(v3, v3, v6, v4, v5);
  result = swift_endAccess(v10);
  if (!v1)
  {
    v8 = (char *)&loc_10019E654 + 4 * byte_10034FD63[sub_1001A0980(v9)];
    __asm { BR              X11 }
  }
  return result;
}

void IEEE80211InformationElement.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[22];
  _QWORD v15[5];
  _BYTE v16[344];
  uint64_t v17;

  v2 = v1;
  v4 = sub_100012C44(&qword_10040A1C8);
  v14[7] = *(_QWORD *)(v4 - 8);
  v14[8] = v4;
  __chkstk_darwin();
  v14[6] = (char *)v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100012C44(&qword_10040A1D8);
  v14[4] = *(_QWORD *)(v6 - 8);
  v14[5] = v6;
  __chkstk_darwin();
  v14[3] = (char *)v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100012C44(&qword_10040A148);
  v14[1] = *(_QWORD *)(v8 - 8);
  v14[2] = v8;
  __chkstk_darwin();
  sub_100012C44(&qword_10040A170);
  __chkstk_darwin();
  v9 = a1[3];
  v10 = a1[4];
  sub_10003259C(a1, v9);
  dispatch thunk of Encoder.unkeyedContainer()(v15, v9, v10);
  v11 = sub_10001F11C((uint64_t)_swiftEmptyArrayStorage);
  v12 = type metadata accessor for BinaryEncoder();
  v13 = swift_allocObject(v12, 40, 7);
  *(_OWORD *)(v13 + 16) = xmmword_10033A100;
  v14[9] = v13 + 16;
  v17 = v13;
  *(_QWORD *)(v13 + 32) = v11;
  v14[11] = v2;
  sub_100095708(v2, (uint64_t)v16);
  __asm { BR              X10 }
}

uint64_t sub_10019E9EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_OWORD *)(v0 + 232);
  *(_OWORD *)(v0 + 272) = *(_OWORD *)(v0 + 216);
  *(_OWORD *)(v0 + 288) = v3;
  *(_OWORD *)(v0 + 297) = *(_OWORD *)(v0 + 241);
  *(_QWORD *)(v0 + 152) = v1;
  *(_QWORD *)(v0 + 160) = sub_100011DE4((unint64_t *)&qword_100406278, (uint64_t (*)(uint64_t))type metadata accessor for BinaryEncoder, (uint64_t)protocol conformance descriptor for BinaryEncoder);
  v4 = *(_QWORD *)(v2 - 72);
  *(_QWORD *)(v0 + 128) = v4;
  v5 = *(_QWORD *)(v0 + 88);
  sub_100095744(v5, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100063C58);
  swift_retain();
  v6 = *(_QWORD *)(v0 + 80);
  IEEE80211InformationElement.RSNCapability.encode(to:)((_QWORD *)(v0 + 128));
  sub_100014430((_QWORD *)(v0 + 128));
  sub_100095744(v5, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100063518);
  if (!v6)
  {
    v7 = *(_QWORD *)(v0 + 72);
    sub_10019D51C();
    swift_beginAccess(v7, v0 + 128, 0, 0);
    __asm { BR              X12 }
  }
  swift_release(v4);
  return sub_100014430((_QWORD *)(v0 + 176));
}

void IEEE80211InformationElement.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD v2[6];

  sub_100095708(v0, (uint64_t)&v1);
  sub_100095708(v0, (uint64_t)v2);
  __asm { BR              X10 }
}

void sub_10019F7FC()
{
  uint64_t v0;

  Hasher._combine(_:)(0);
  IEEE80211InformationElement.RSNCapability.hash(into:)(v0);
}

void sub_10019FB2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  uint64_t v21;
  Swift::UInt v22;

  if (a20 | a21 | v21 | a19 | a18 | a17)
    v22 = 6;
  else
    v22 = 5;
  Hasher._combine(_:)(v22);
  JUMPOUT(0x10019FB0CLL);
}

Swift::Int IEEE80211InformationElement.hashValue.getter()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  IEEE80211InformationElement.hash(into:)();
  return Hasher._finalize()();
}

Swift::Int sub_10019FCB4()
{
  uint64_t v0;
  _QWORD v2[9];
  _BYTE v3[56];

  sub_100095708(v0, (uint64_t)v3);
  Hasher.init(_seed:)(v2);
  IEEE80211InformationElement.hash(into:)();
  return Hasher._finalize()();
}

void sub_10019FD00()
{
  uint64_t v0;
  _BYTE v1[56];

  sub_100095708(v0, (uint64_t)v1);
  IEEE80211InformationElement.hash(into:)();
}

Swift::Int sub_10019FD3C()
{
  uint64_t v0;
  _QWORD v2[9];
  _BYTE v3[56];

  sub_100095708(v0, (uint64_t)v3);
  Hasher.init(_seed:)(v2);
  IEEE80211InformationElement.hash(into:)();
  return Hasher._finalize()();
}

uint64_t sub_10019FD8C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  _BYTE v5[56];

  result = IEEE80211InformationElement.init(from:)(a1, (uint64_t)v5);
  if (!v2)
    return sub_100095708((uint64_t)v5, a2);
  return result;
}

void sub_10019FDD0(_QWORD *a1)
{
  uint64_t v1;
  _BYTE v3[56];

  sub_100095708(v1, (uint64_t)v3);
  IEEE80211InformationElement.encode(to:)(a1);
}

uint64_t sub_10019FE1C(uint64_t a1, uint64_t a2)
{
  char v3;
  _BYTE v5[56];
  _BYTE v6[56];

  sub_100095708(a1, (uint64_t)v5);
  sub_100095708(a2, (uint64_t)v6);
  static IEEE80211InformationElement.__derived_enum_equals(_:_:)((uint64_t)v5);
  return v3 & 1;
}

BOOL _s7CoreP2P27IEEE80211InformationElementO43PreAssociationSecurityNegotiationParametersV23__derived_struct_equalsySbAE_AEtFZ_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  char v19;
  char v20;
  char v21;
  char v22;
  char v23;

  v4 = *a1;
  v5 = a1[1];
  v6 = a1[2];
  v7 = *a2;
  v8 = a2[1];
  v9 = a2[2];
  if (v6 >> 60 != 15)
  {
    if (v9 >> 60 != 15)
    {
      if ((unsigned __int16)*a1 != (unsigned __int16)v7)
        return 0;
      sub_100063C28(*a1, v5, v6);
      sub_100063C28(v7, v8, v9);
      _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(v5, v6);
      v11 = v10;
      sub_1000634E8(v7, v8, v9);
      sub_1000634E8(v4, v5, v6);
      if ((v11 & 1) == 0)
        return 0;
      goto LABEL_3;
    }
LABEL_7:
    sub_100063C28(*a1, v5, v6);
    sub_100063C28(v7, v8, v9);
    sub_1000634E8(v4, v5, v6);
    sub_1000634E8(v7, v8, v9);
    return 0;
  }
  if (v9 >> 60 != 15)
    goto LABEL_7;
LABEL_3:
  sub_100063EB8((uint64_t)(a1 + 3), (uint64_t)&v20, &qword_100409460);
  sub_100063EB8((uint64_t)(a2 + 3), (uint64_t)&v19, &qword_100409460);
  sub_100063EB8((uint64_t)&v20, (uint64_t)&v21, &qword_100409460);
  if ((v21 & 1) != 0)
  {
    sub_100063EB8((uint64_t)&v19, (uint64_t)&v23, &qword_100409460);
    if (v23 != 1)
      return 0;
  }
  else
  {
    sub_100063EB8((uint64_t)&v19, (uint64_t)&v22, &qword_100409460);
    if ((v22 & 1) != 0)
      return 0;
  }
  v13 = a1[4];
  v12 = a1[5];
  v15 = a2[4];
  v14 = a2[5];
  if (v12 >> 60 == 15)
  {
    if (v14 >> 60 == 15)
      return 1;
    goto LABEL_16;
  }
  if (v14 >> 60 == 15)
  {
LABEL_16:
    sub_1000339F4(v13, v12);
    sub_1000339F4(v15, v14);
    sub_10000E658(v13, v12);
    sub_10000E658(v15, v14);
    return 0;
  }
  sub_1000339F4(v13, v12);
  sub_1000339F4(v15, v14);
  _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(v13, v12);
  v17 = v16;
  sub_10000E658(v15, v14);
  sub_10000E658(v13, v12);
  return (v17 & 1) != 0;
}

BOOL _s7CoreP2P27IEEE80211InformationElementO13RSNCapabilityV23__derived_struct_equalsySbAE_AEtFZ_0(unsigned __int16 *a1, unsigned __int16 *a2)
{
  return *a1 == *a2
      && byte_1003519CF[*((char *)a1 + 2)] == byte_1003519CF[*((char *)a2 + 2)]
      && sub_1000892A0(*((_QWORD *)a1 + 1), *((_QWORD *)a2 + 1))
      && (sub_1000851D0(*((_QWORD *)a1 + 2), *((_QWORD *)a2 + 2)) & 1) != 0
      && a1[12] == a2[12]
      && (_s7CoreP2P12NANAttributeO13ServiceIDListV23__derived_struct_equalsySbAE_AEtFZ_0(*((_QWORD *)a1 + 4), *((_QWORD *)a2 + 4)) & 1) != 0&& byte_1003519CF[*((char *)a1 + 40)] == byte_1003519CF[*((char *)a2 + 40)];
}

void _s7CoreP2P27IEEE80211InformationElementO21__derived_enum_equalsySbAC_ACtFZ_0(uint64_t a1)
{
  _QWORD v1[6];

  sub_100095708(a1, (uint64_t)v1);
  __asm { BR              X10 }
}

BOOL sub_1001A01DC()
{
  uint64_t v0;
  int v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  unsigned __int16 v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int16 v18;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int16 v24;
  uint64_t v25;
  char v26;

  v4 = v22;
  v3 = v23;
  v5 = v24;
  v6 = v25;
  v7 = v26;
  sub_100095708(v0, (uint64_t)&v14);
  v12 = 0;
  if (!v21 && v14 == v1 && byte_1003519CF[v2] == byte_1003519CF[v15])
  {
    v8 = v17;
    v9 = v18;
    v10 = v19;
    v11 = v20;
    if (sub_1000892A0(v4, v16)
      && (sub_1000851D0(v3, v8) & 1) != 0
      && v5 == v9
      && (_s7CoreP2P12NANAttributeO13ServiceIDListV23__derived_struct_equalsySbAE_AEtFZ_0(v6, v10) & 1) != 0
      && byte_1003519CF[v7] == byte_1003519CF[v11])
    {
      return 1;
    }
  }
  return v12;
}

unint64_t sub_1001A0914()
{
  unint64_t result;

  result = qword_10040A120;
  if (!qword_10040A120)
  {
    result = swift_getWitnessTable("ݣ\t", &type metadata for IEEE80211InformationElement.HighThroughputCapability.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040A120);
  }
  return result;
}

uint64_t _s7CoreP2P27IEEE80211InformationElementO0C11CipherSuiteO8rawValueAESgs5UInt8V_tcfC_0(unsigned __int8 a1)
{
  if (a1 > 0xDu)
    return 13;
  else
    return byte_1003519DC[(char)a1];
}

uint64_t sub_1001A0980(unsigned __int8 a1)
{
  if (a1 <= 0xBEu)
  {
    if (a1 > 0x3Cu)
    {
      if (a1 == 61)
        return 2;
      if (a1 == 140)
        return 3;
    }
    else
    {
      if (a1 == 45)
        return 0;
      if (a1 == 48)
        return 1;
    }
  }
  else if (a1 <= 0xDCu)
  {
    if (a1 == 191)
      return 4;
    if (a1 == 192)
      return 5;
  }
  else
  {
    switch(a1)
    {
      case 0xDDu:
        return 6;
      case 0xF4u:
        return 7;
      case 0xFFu:
        return 8;
    }
  }
  return 9;
}

uint64_t _s7CoreP2P27IEEE80211InformationElementO32AuthenticationKeyManagementSuiteO8rawValueAESgs5UInt8V_tcfC_0(char a1)
{
  if ((a1 - 1) >= 0x19u)
    return 25;
  else
    return (a1 - 1);
}

unint64_t sub_1001A0A4C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned __int16 v10;
  unsigned __int16 v11;
  unsigned __int8 v12;
  unint64_t v13;
  uint64_t v15;
  char v16;

  v3 = sub_100012C44(&qword_10040A428);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin();
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  sub_10003259C(a1, v7);
  v9 = sub_1001A0914();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for IEEE80211InformationElement.HighThroughputCapability.CodingKeys, &type metadata for IEEE80211InformationElement.HighThroughputCapability.CodingKeys, v9, v7, v8);
  if (v1)
    return sub_100014430(a1);
  LOBYTE(v15) = 0;
  v10 = KeyedDecodingContainer.decode(_:forKey:)(&v15, v3);
  LOBYTE(v15) = 1;
  v11 = KeyedDecodingContainer.decode(_:forKey:)(&v15, v3);
  LOBYTE(v15) = 2;
  v12 = KeyedDecodingContainer.decode(_:forKey:)(&v15, v3);
  v16 = 3;
  v13 = sub_10007BAC0();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v15, &type metadata for Data, &v16, v3, &type metadata for Data, v13);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  sub_100014430(a1);
  return v10 | ((unint64_t)v11 << 16) | ((unint64_t)v12 << 32);
}

unint64_t sub_1001A0C18(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  unsigned __int16 v11;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  char v17;
  char v18;
  char v19;

  v3 = sub_100012C44(&qword_10040A420);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin();
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  sub_10003259C(a1, v7);
  v9 = sub_1001A1850();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for IEEE80211InformationElement.VeryHighThroughputCapability.CodingKeys, &type metadata for IEEE80211InformationElement.VeryHighThroughputCapability.CodingKeys, v9, v7, v8);
  if (v1)
    return sub_100014430(a1);
  v19 = 0;
  v10 = KeyedDecodingContainer.decode(_:forKey:)(&v19, v3);
  v18 = 1;
  v11 = KeyedDecodingContainer.decode(_:forKey:)(&v18, v3);
  v17 = 2;
  v14 = KeyedDecodingContainer.decode(_:forKey:)(&v17, v3);
  v16 = 3;
  KeyedDecodingContainer.decode(_:forKey:)(&v16, v3);
  v15 = 4;
  KeyedDecodingContainer.decode(_:forKey:)(&v15, v3);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  sub_100014430(a1);
  return v10 | ((unint64_t)v11 << 32) | (v14 << 48);
}

_QWORD *sub_1001A0DF8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v14;

  v3 = sub_100012C44(&qword_10040A3E0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin();
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  v9 = sub_10003259C(a1, v7);
  v10 = sub_1001A1FA0();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for IEEE80211InformationElement.MessageIntegrityCode.CodingKeys, &type metadata for IEEE80211InformationElement.MessageIntegrityCode.CodingKeys, v10, v7, v8);
  if (v1)
  {
    sub_100014430(a1);
  }
  else
  {
    v11 = sub_10007BAC0();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v14, &type metadata for Data, v12, v3, &type metadata for Data, v11);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    v9 = v14;
    sub_100014430(a1);
  }
  return v9;
}

uint64_t sub_1001A0F1C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int16 v13;
  _QWORD v14[3];
  uint64_t v15;
  uint64_t v16;

  v3 = a1[3];
  v4 = a1[4];
  sub_10003259C(a1, v3);
  dispatch thunk of Decoder.unkeyedContainer()(v14, v3, v4);
  if (!v1)
  {
    v5 = v15;
    v6 = v16;
    sub_100034C68((uint64_t)v14, v15);
    UnkeyedDecodingContainer.inferredDecode<A>()(v5, (uint64_t)&type metadata for UInt16, v6, (uint64_t)&protocol witness table for UInt16);
    v3 = v13;
    v7 = v15;
    v8 = v16;
    sub_100034C68((uint64_t)v14, v15);
    v9 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)(v7, v8);
    v10 = v15;
    v11 = v16;
    sub_100034C68((uint64_t)v14, v15);
    UnkeyedDecodingContainer.decodeData(with:)(v9, v10, v11);
    sub_100014430(v14);
  }
  sub_100014430(a1);
  return v3;
}

uint64_t sub_1001A1068(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v17[3];
  uint64_t v18;
  uint64_t v19;
  unsigned __int16 v20;
  unsigned __int8 v21;

  v3 = a1[3];
  v4 = a1[4];
  v5 = (uint64_t)sub_10003259C(a1, v3);
  dispatch thunk of Decoder.unkeyedContainer()(v17, v3, v4);
  if (!v1)
  {
    v6 = v18;
    v7 = v19;
    v5 = sub_100034C68((uint64_t)v17, v18);
    v8 = sub_10007BA7C();
    dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)(&type metadata for OUI, &type metadata for OUI, v8, v6, v7);
    if ((sub_1000349A4(v20 | (v21 << 16), 0xAC0F00u) & 1) != 0)
    {
      v9 = v18;
      v10 = v19;
      v5 = sub_100034C68((uint64_t)v17, v18);
      v11 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)(v9, v10);
      v12 = _s7CoreP2P27IEEE80211InformationElementO32AuthenticationKeyManagementSuiteO8rawValueAESgs5UInt8V_tcfC_0(v11);
      if (v12 != 25)
      {
        v5 = v12;
        sub_100014430(v17);
        sub_100014430(a1);
        return v5;
      }
    }
    v13 = sub_100012C84();
    v14 = swift_allocError(&type metadata for WiFiError, v13, 0, 0);
    *(_OWORD *)v15 = xmmword_100337850;
    *(_BYTE *)(v15 + 16) = 2;
    swift_willThrow(v14);
    sub_100014430(v17);
  }
  sub_100014430(a1);
  return v5;
}

uint64_t sub_1001A11D4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v17[3];
  uint64_t v18;
  uint64_t v19;
  unsigned __int16 v20;
  unsigned __int8 v21;

  v3 = a1[3];
  v4 = a1[4];
  v5 = (uint64_t)sub_10003259C(a1, v3);
  dispatch thunk of Decoder.unkeyedContainer()(v17, v3, v4);
  if (!v1)
  {
    v6 = v18;
    v7 = v19;
    v5 = sub_100034C68((uint64_t)v17, v18);
    v8 = sub_10007BA7C();
    dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)(&type metadata for OUI, &type metadata for OUI, v8, v6, v7);
    if ((sub_1000349A4(v20 | (v21 << 16), 0xAC0F00u) & 1) != 0)
    {
      v9 = v18;
      v10 = v19;
      v5 = sub_100034C68((uint64_t)v17, v18);
      v11 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)(v9, v10);
      v12 = _s7CoreP2P27IEEE80211InformationElementO0C11CipherSuiteO8rawValueAESgs5UInt8V_tcfC_0(v11);
      if (v12 != 13)
      {
        v5 = v12;
        sub_100014430(v17);
        sub_100014430(a1);
        return v5;
      }
    }
    v13 = sub_100012C84();
    v14 = swift_allocError(&type metadata for WiFiError, v13, 0, 0);
    *(_OWORD *)v15 = xmmword_100337850;
    *(_BYTE *)(v15 + 16) = 2;
    swift_willThrow(v14);
    sub_100014430(v17);
  }
  sub_100014430(a1);
  return v5;
}

uint64_t sub_1001A1340@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unsigned __int16 v28;
  uint64_t v29;
  unint64_t v30;
  _QWORD v31[3];
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v5 = a1[3];
  v6 = a1[4];
  sub_10003259C(a1, v5);
  dispatch thunk of Decoder.unkeyedContainer()(v31, v5, v6);
  if (v2)
  {
    sub_100014430(a1);
    sub_1000634E8(0, 0, 0xF000000000000000);
    return sub_10000E658(0, 0xF000000000000000);
  }
  v7 = v32;
  v8 = v33;
  sub_100034C68((uint64_t)v31, v32);
  v9 = sub_1001A5284();
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)(&type metadata for IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters.Control, &type metadata for IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters.Control, v9, v7, v8);
  v10 = v32;
  v11 = v33;
  sub_100034C68((uint64_t)v31, v32);
  v12 = sub_1001A52C8();
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)(&type metadata for IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters.WrappedDataFormat, &type metadata for IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters.WrappedDataFormat, v12, v10, v11);
  if ((v28 & 1) != 0)
  {
    v19 = v32;
    v20 = v33;
    sub_100034C68((uint64_t)v31, v32);
    v21 = sub_1001A530C();
    dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)(&type metadata for IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters.Comeback, &type metadata for IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters.Comeback, v21, v19, v20);
    v15 = v28;
    v14 = v29;
    v16 = v30;
    if ((v28 & 2) == 0)
      goto LABEL_6;
LABEL_9:
    v22 = v32;
    v34 = v33;
    sub_100034C68((uint64_t)v31, v32);
    v23 = sub_100175328();
    dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)(&type metadata for IEEE80211Frame.Management.Authentication.FiniteCyclicGroup, &type metadata for IEEE80211Frame.Management.Authentication.FiniteCyclicGroup, v23, v22, v34);
    v24 = v32;
    v34 = v33;
    sub_100034C68((uint64_t)v31, v32);
    v25 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)(v24, v34);
    v26 = v32;
    v34 = v33;
    sub_100034C68((uint64_t)v31, v32);
    v17 = UnkeyedDecodingContainer.decodeData(with:)(v25, v26, v34);
    v18 = v27;
    goto LABEL_7;
  }
  v14 = 0;
  v15 = 0;
  v16 = 0xF000000000000000;
  if ((v28 & 2) != 0)
    goto LABEL_9;
LABEL_6:
  v17 = 0;
  v18 = 0xF000000000000000;
LABEL_7:
  sub_100014430(v31);
  sub_100063C28(v15, v14, v16);
  sub_1000339F4(v17, v18);
  sub_100014430(a1);
  sub_1000634E8(v15, v14, v16);
  result = sub_10000E658(v17, v18);
  *(_QWORD *)a2 = v15;
  *(_QWORD *)(a2 + 8) = v14;
  *(_QWORD *)(a2 + 16) = v16;
  *(_BYTE *)(a2 + 24) = (v28 & 2) == 0;
  *(_QWORD *)(a2 + 32) = v17;
  *(_QWORD *)(a2 + 40) = v18;
  return result;
}

uint64_t sub_1001A161C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t result;
  _QWORD v21[3];
  uint64_t v22;
  uint64_t v23;
  char v24;

  v5 = a1[3];
  v6 = a1[4];
  sub_10003259C(a1, v5);
  dispatch thunk of Decoder.unkeyedContainer()(v21, v5, v6);
  if (v2)
    return sub_100014430(a1);
  v7 = v22;
  v8 = v23;
  sub_100034C68((uint64_t)v21, v22);
  UnkeyedDecodingContainer.inferredDecode<A>()(v7, (uint64_t)&type metadata for UInt8, v8, (uint64_t)&protocol witness table for UInt8);
  v9 = v24;
  v10 = v22;
  v11 = v23;
  sub_100034C68((uint64_t)v21, v22);
  v12 = UnkeyedDecodingContainer.decodeData(with:)(5, v10, v11);
  v14 = v13;
  v15 = v22;
  v16 = v23;
  sub_100034C68((uint64_t)v21, v22);
  sub_100031FEC(v12, v14);
  v17 = UnkeyedDecodingContainer.decodeData(with:)(16, v15, v16);
  v19 = v18;
  sub_100031FEC(v17, v18);
  sub_100014430(v21);
  sub_100031FEC(v12, v14);
  sub_100031FEC(v17, v19);
  sub_10000E614(v17, v19);
  sub_10000E614(v12, v14);
  sub_100014430(a1);
  sub_10000E614(v12, v14);
  result = sub_10000E614(v17, v19);
  *(_BYTE *)a2 = v9;
  *(_QWORD *)(a2 + 8) = v12;
  *(_QWORD *)(a2 + 16) = v14;
  *(_QWORD *)(a2 + 24) = v17;
  *(_QWORD *)(a2 + 32) = v19;
  return result;
}

unint64_t sub_1001A180C()
{
  unint64_t result;

  result = qword_10040A130;
  if (!qword_10040A130)
  {
    result = swift_getWitnessTable(asc_100351814, &type metadata for IEEE80211InformationElement.HighThroughputOperation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040A130);
  }
  return result;
}

unint64_t sub_1001A1850()
{
  unint64_t result;

  result = qword_10040A140;
  if (!qword_10040A140)
  {
    result = swift_getWitnessTable(asc_1003517C4, &type metadata for IEEE80211InformationElement.VeryHighThroughputCapability.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040A140);
  }
  return result;
}

unint64_t sub_1001A1894()
{
  unint64_t result;

  result = qword_10040A150;
  if (!qword_10040A150)
  {
    result = swift_getWitnessTable("ͤ\t", &type metadata for IEEE80211InformationElement.VeryHighThroughputOperation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040A150);
  }
  return result;
}

_QWORD *sub_1001A18D8(_QWORD *a1)
{
  swift_bridgeObjectRelease(*a1);
  return a1;
}

_QWORD *sub_1001A1900(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD v13[3];
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v3 = a1[3];
  v4 = a1[4];
  v5 = sub_10003259C(a1, v3);
  dispatch thunk of Decoder.unkeyedContainer()(v13, v3, v4);
  if (!v1)
  {
    v6 = v14;
    v7 = v15;
    sub_100034C68((uint64_t)v13, v14);
    v8 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)(v6, v7);
    v9 = sub_100012C44(&qword_100403E88);
    v10 = swift_allocObject(v9, 33, 7);
    *(_OWORD *)(v10 + 16) = xmmword_10033A110;
    *(_BYTE *)(v10 + 32) = v8;
    v11 = sub_1001996B4(0, v8 & 0xF, (uint64_t)v13);
    v16 = (_QWORD *)v10;
    sub_1001A7594((uint64_t)v11);
    v5 = v16;
    sub_100014430(v13);
  }
  sub_100014430(a1);
  return v5;
}

void sub_1001A1A20(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD v33[3];
  uint64_t v34;
  uint64_t v35;
  int v36;
  __int16 v37;

  v5 = a1[3];
  v6 = a1[4];
  sub_10003259C(a1, v5);
  dispatch thunk of Decoder.unkeyedContainer()(v33, v5, v6);
  if (v2)
  {
    sub_100014430(a1);
  }
  else
  {
    v7 = v34;
    v8 = v35;
    sub_100034C68((uint64_t)v33, v34);
    UnkeyedDecodingContainer.inferredDecode<A>()(v7, (uint64_t)&type metadata for UInt16, v8, (uint64_t)&protocol witness table for UInt16);
    v9 = v37;
    v10 = v34;
    v11 = v35;
    sub_100034C68((uint64_t)v33, v34);
    v12 = sub_1001A5350();
    UnkeyedDecodingContainer.inferredDecode<A>()(v10, (uint64_t)&type metadata for IEEE80211InformationElement.IEEE80211CipherSuite, v11, v12);
    v13 = v37;
    v14 = v34;
    v15 = v35;
    sub_100034C68((uint64_t)v33, v34);
    v16 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)(v14, v15);
    v17 = sub_100199814(v16 << 16, (uint64_t)v33, (uint64_t (*)(BOOL, uint64_t, uint64_t))sub_100074F88, (uint64_t (*)(void))sub_1001A5350, (uint64_t)&type metadata for IEEE80211InformationElement.IEEE80211CipherSuite);
    v36 = v13;
    v18 = v34;
    v19 = v35;
    sub_100034C68((uint64_t)v33, v34);
    swift_bridgeObjectRetain(v17);
    v20 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)(v18, v19);
    v21 = sub_100199814(v20 << 16, (uint64_t)v33, (uint64_t (*)(BOOL, uint64_t, uint64_t))sub_100074F64, (uint64_t (*)(void))sub_1001A541C, (uint64_t)&type metadata for IEEE80211InformationElement.AuthenticationKeyManagementSuite);
    v22 = v34;
    v31 = v35;
    v23 = v21;
    sub_100034C68((uint64_t)v33, v34);
    v24 = sub_1001A5394();
    swift_bridgeObjectRetain(v23);
    UnkeyedDecodingContainer.inferredDecode<A>()(v22, (uint64_t)&type metadata for IEEE80211InformationElement.RSNCapability.Capabilities, v31, v24);
    v32 = v23;
    LOWORD(v31) = v37;
    v26 = v34;
    v25 = v35;
    sub_100034C68((uint64_t)v33, v34);
    v27 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)(v26, v25);
    v28 = sub_100199998(v27 << 16, (uint64_t)v33);
    v29 = v34;
    v30 = v35;
    sub_100034C68((uint64_t)v33, v34);
    swift_bridgeObjectRetain(v28);
    UnkeyedDecodingContainer.inferredDecode<A>()(v29, (uint64_t)&type metadata for IEEE80211InformationElement.IEEE80211CipherSuite, v30, v12);
    LOBYTE(v29) = v37;
    sub_100014430(v33);
    sub_100014430(a1);
    swift_bridgeObjectRelease(v28);
    swift_bridgeObjectRelease(v32);
    swift_bridgeObjectRelease(v17);
    *(_WORD *)a2 = v9;
    *(_BYTE *)(a2 + 2) = v36;
    *(_QWORD *)(a2 + 8) = v17;
    *(_QWORD *)(a2 + 16) = v32;
    *(_WORD *)(a2 + 24) = v31;
    *(_QWORD *)(a2 + 32) = v28;
    *(_BYTE *)(a2 + 40) = v29;
  }
}

unint64_t sub_1001A1DF0()
{
  unint64_t result;

  result = qword_10040A158;
  if (!qword_10040A158)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for IEEE80211InformationElement.IEEE80211CipherSuite, &type metadata for IEEE80211InformationElement.IEEE80211CipherSuite);
    atomic_store(result, (unint64_t *)&qword_10040A158);
  }
  return result;
}

unint64_t sub_1001A1E34()
{
  unint64_t result;

  result = qword_10040A178;
  if (!qword_10040A178)
  {
    result = swift_getWitnessTable(byte_100351724, &type metadata for IEEE80211InformationElement.ExtendedRSNCapability.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040A178);
  }
  return result;
}

unint64_t sub_1001A1E78()
{
  unint64_t result;
  uint64_t v1;
  void *v2;

  result = qword_1004071D0;
  if (!qword_1004071D0)
  {
    v1 = sub_100013C64(&qword_100406738);
    v2 = &protocol witness table for UInt8;
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <A> [A], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_1004071D0);
  }
  return result;
}

unint64_t sub_1001A1ED4()
{
  unint64_t result;

  result = qword_10040A188;
  if (!qword_10040A188)
  {
    result = swift_getWitnessTable(aM_5, &type metadata for IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters.Comeback.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040A188);
  }
  return result;
}

unint64_t sub_1001A1F18()
{
  unint64_t result;

  result = qword_10040A198;
  if (!qword_10040A198)
  {
    result = swift_getWitnessTable(aE_3, &type metadata for IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters.Control);
    atomic_store(result, (unint64_t *)&qword_10040A198);
  }
  return result;
}

unint64_t sub_1001A1F5C()
{
  unint64_t result;

  result = qword_10040A1A8;
  if (!qword_10040A1A8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters.Comeback, &type metadata for IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters.Comeback);
    atomic_store(result, (unint64_t *)&qword_10040A1A8);
  }
  return result;
}

unint64_t sub_1001A1FA0()
{
  unint64_t result;

  result = qword_10040A1D0;
  if (!qword_10040A1D0)
  {
    result = swift_getWitnessTable(byte_10035165C, &type metadata for IEEE80211InformationElement.MessageIntegrityCode.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040A1D0);
  }
  return result;
}

unint64_t sub_1001A1FE4()
{
  unint64_t result;

  result = qword_10040A1E0;
  if (!qword_10040A1E0)
  {
    result = swift_getWitnessTable(a5_1, &type metadata for IEEE80211InformationElement.WrappedData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040A1E0);
  }
  return result;
}

uint64_t sub_1001A2028(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  _QWORD v12[3];
  _QWORD v13[3];

  v3 = a1[3];
  v4 = a1[4];
  sub_10003259C(a1, v3);
  dispatch thunk of Decoder.unkeyedContainer()(v13, v3, v4);
  if (!v1)
  {
    sub_100031D80((uint64_t)a1, (uint64_t)&v11);
    v5 = sub_100012C44(&qword_100406690);
    v6 = type metadata accessor for BinaryDecoder();
    if ((swift_dynamicCast(v12, &v11, v5, v6, 6) & 1) != 0)
    {
      if (!__OFADD__(*(_QWORD *)(v12[0] + 32), 1))
        __asm { BR              X10 }
      __break(1u);
      JUMPOUT(0x1001A2690);
    }
    v7 = sub_100012C84();
    v8 = swift_allocError(&type metadata for WiFiError, v7, 0, 0);
    *(_OWORD *)v9 = xmmword_100337850;
    *(_BYTE *)(v9 + 16) = 2;
    swift_willThrow(v8);
    sub_100014430(v13);
  }
  return sub_100014430(a1);
}

void sub_1001A273C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  va_list va;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v13 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  *(_QWORD *)(v6 + 32) = (int)v9;
  swift_beginAccess(a1, va1, 1, 0);
  v12 = *(_QWORD *)(v6 + 40);
  *(_QWORD *)(v6 + 40) = v10;
  swift_bridgeObjectRelease(v12);
  v18 = sub_100011DE4((unint64_t *)&qword_100405BB8, (uint64_t (*)(uint64_t))type metadata accessor for BinaryDecoder, (uint64_t)protocol conformance descriptor for BinaryDecoder);
  v13 = v6;
  sub_1001A1340((uint64_t *)va, v11 - 136);
  if (!v7)
  {
    *(_QWORD *)(v11 - 72) = *(unsigned __int8 *)(v11 - 112);
    sub_10000E614(v9, v8);
    JUMPOUT(0x1001A23E0);
  }
  JUMPOUT(0x1001A28ECLL);
}

void sub_1001A2880()
{
  JUMPOUT(0x1001A2888);
}

unint64_t sub_1001A2978()
{
  unint64_t result;

  result = qword_10040A1E8;
  if (!qword_10040A1E8)
  {
    result = swift_getWitnessTable(asc_1003515E4, &type metadata for IEEE80211InformationElement.ElementType);
    atomic_store(result, (unint64_t *)&qword_10040A1E8);
  }
  return result;
}

unint64_t sub_1001A29BC()
{
  unint64_t result;

  result = qword_10040A200;
  if (!qword_10040A200)
  {
    result = swift_getWitnessTable(a5_2, &type metadata for IEEE80211InformationElement.ExtendedElementID);
    atomic_store(result, (unint64_t *)&qword_10040A200);
  }
  return result;
}

unint64_t sub_1001A2A00()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_100409D38;
  if (!qword_100409D38)
  {
    v1 = sub_100013C64(&qword_100405C48);
    v2 = sub_100011DE4(&qword_100406720, type metadata accessor for NANAttribute, (uint64_t)&protocol conformance descriptor for NANAttribute);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <A> [A], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_100409D38);
  }
  return result;
}

unint64_t sub_1001A2A80()
{
  unint64_t result;

  result = qword_10040A248;
  if (!qword_10040A248)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for IEEE80211InformationElement.HighThroughputCapability, &type metadata for IEEE80211InformationElement.HighThroughputCapability);
    atomic_store(result, (unint64_t *)&qword_10040A248);
  }
  return result;
}

unint64_t sub_1001A2AC8()
{
  unint64_t result;

  result = qword_10040A250;
  if (!qword_10040A250)
  {
    result = swift_getWitnessTable("Ż\t", &type metadata for IEEE80211InformationElement.HighThroughputOperation);
    atomic_store(result, (unint64_t *)&qword_10040A250);
  }
  return result;
}

unint64_t sub_1001A2B10()
{
  unint64_t result;

  result = qword_10040A258;
  if (!qword_10040A258)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for IEEE80211InformationElement.VeryHighThroughputCapability, &type metadata for IEEE80211InformationElement.VeryHighThroughputCapability);
    atomic_store(result, (unint64_t *)&qword_10040A258);
  }
  return result;
}

unint64_t sub_1001A2B58()
{
  unint64_t result;

  result = qword_10040A260;
  if (!qword_10040A260)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for IEEE80211InformationElement.VeryHighThroughputOperation, &type metadata for IEEE80211InformationElement.VeryHighThroughputOperation);
    atomic_store(result, (unint64_t *)&qword_10040A260);
  }
  return result;
}

unint64_t sub_1001A2BA0()
{
  unint64_t result;

  result = qword_10040A268;
  if (!qword_10040A268)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for IEEE80211InformationElement.RSNCapability.Capabilities, &type metadata for IEEE80211InformationElement.RSNCapability.Capabilities);
    atomic_store(result, (unint64_t *)&qword_10040A268);
  }
  return result;
}

unint64_t sub_1001A2BE8()
{
  unint64_t result;

  result = qword_10040A270;
  if (!qword_10040A270)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for IEEE80211InformationElement.RSNCapability.Capabilities, &type metadata for IEEE80211InformationElement.RSNCapability.Capabilities);
    atomic_store(result, (unint64_t *)&qword_10040A270);
  }
  return result;
}

unint64_t sub_1001A2C30()
{
  unint64_t result;

  result = qword_10040A278;
  if (!qword_10040A278)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for IEEE80211InformationElement.RSNCapability.Capabilities, &type metadata for IEEE80211InformationElement.RSNCapability.Capabilities);
    atomic_store(result, (unint64_t *)&qword_10040A278);
  }
  return result;
}

unint64_t sub_1001A2C78()
{
  unint64_t result;

  result = qword_10040A280;
  if (!qword_10040A280)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for IEEE80211InformationElement.RSNCapability.Capabilities, &type metadata for IEEE80211InformationElement.RSNCapability.Capabilities);
    atomic_store(result, (unint64_t *)&qword_10040A280);
  }
  return result;
}

unint64_t sub_1001A2CC0()
{
  unint64_t result;

  result = qword_10040A288;
  if (!qword_10040A288)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for IEEE80211InformationElement.RSNCapability, &type metadata for IEEE80211InformationElement.RSNCapability);
    atomic_store(result, (unint64_t *)&qword_10040A288);
  }
  return result;
}

unint64_t sub_1001A2D08()
{
  unint64_t result;

  result = qword_10040A290;
  if (!qword_10040A290)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for IEEE80211InformationElement.ExtendedRSNCapability, &type metadata for IEEE80211InformationElement.ExtendedRSNCapability);
    atomic_store(result, (unint64_t *)&qword_10040A290);
  }
  return result;
}

unint64_t sub_1001A2D4C(uint64_t a1)
{
  unint64_t result;

  result = sub_1001A2D70();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1001A2D70()
{
  unint64_t result;

  result = qword_10040A298;
  if (!qword_10040A298)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for IEEE80211InformationElement.ExtendedRSNCapability, &type metadata for IEEE80211InformationElement.ExtendedRSNCapability);
    atomic_store(result, (unint64_t *)&qword_10040A298);
  }
  return result;
}

unint64_t sub_1001A2DB8()
{
  unint64_t result;

  result = qword_10040A2A0;
  if (!qword_10040A2A0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for IEEE80211InformationElement.ExtendedRSNCapability, &type metadata for IEEE80211InformationElement.ExtendedRSNCapability);
    atomic_store(result, (unint64_t *)&qword_10040A2A0);
  }
  return result;
}

unint64_t sub_1001A2E00()
{
  unint64_t result;

  result = qword_10040A2A8;
  if (!qword_10040A2A8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for IEEE80211InformationElement.ExtendedRSNCapability, &type metadata for IEEE80211InformationElement.ExtendedRSNCapability);
    atomic_store(result, (unint64_t *)&qword_10040A2A8);
  }
  return result;
}

unint64_t sub_1001A2E48()
{
  unint64_t result;

  result = qword_10040A2B0;
  if (!qword_10040A2B0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for IEEE80211InformationElement.ExtendedRSNCapability, &type metadata for IEEE80211InformationElement.ExtendedRSNCapability);
    atomic_store(result, (unint64_t *)&qword_10040A2B0);
  }
  return result;
}

unint64_t sub_1001A2E90()
{
  unint64_t result;

  result = qword_10040A2B8;
  if (!qword_10040A2B8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for IEEE80211InformationElement.IEEE80211CipherSuite, &type metadata for IEEE80211InformationElement.IEEE80211CipherSuite);
    atomic_store(result, (unint64_t *)&qword_10040A2B8);
  }
  return result;
}

unint64_t sub_1001A2ED8()
{
  unint64_t result;

  result = qword_10040A2C0;
  if (!qword_10040A2C0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters.Comeback, &type metadata for IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters.Comeback);
    atomic_store(result, (unint64_t *)&qword_10040A2C0);
  }
  return result;
}

unint64_t sub_1001A2F20()
{
  unint64_t result;

  result = qword_10040A2C8;
  if (!qword_10040A2C8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters, &type metadata for IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters);
    atomic_store(result, (unint64_t *)&qword_10040A2C8);
  }
  return result;
}

unint64_t sub_1001A2F68()
{
  unint64_t result;

  result = qword_10040A2D0;
  if (!qword_10040A2D0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for IEEE80211InformationElement.AuthenticationKeyManagementSuite, &type metadata for IEEE80211InformationElement.AuthenticationKeyManagementSuite);
    atomic_store(result, (unint64_t *)&qword_10040A2D0);
  }
  return result;
}

unint64_t sub_1001A2FB0()
{
  unint64_t result;

  result = qword_10040A2D8;
  if (!qword_10040A2D8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for IEEE80211InformationElement.MessageIntegrityCode, &type metadata for IEEE80211InformationElement.MessageIntegrityCode);
    atomic_store(result, (unint64_t *)&qword_10040A2D8);
  }
  return result;
}

unint64_t sub_1001A2FF8()
{
  unint64_t result;

  result = qword_10040A2E0;
  if (!qword_10040A2E0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for IEEE80211InformationElement.WrappedData, &type metadata for IEEE80211InformationElement.WrappedData);
    atomic_store(result, (unint64_t *)&qword_10040A2E0);
  }
  return result;
}

unint64_t sub_1001A3040()
{
  unint64_t result;

  result = qword_10040A2E8;
  if (!qword_10040A2E8)
  {
    result = swift_getWitnessTable("ɯ\t", &type metadata for IEEE80211InformationElement);
    atomic_store(result, (unint64_t *)&qword_10040A2E8);
  }
  return result;
}

uint64_t destroy for IEEE80211InformationElement(uint64_t a1)
{
  return sub_100063518(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_BYTE *)(a1 + 48));
}

uint64_t initializeWithCopy for IEEE80211InformationElement(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_BYTE *)(a2 + 48);
  sub_100063C58(*(_QWORD *)a2, v4, v5, v6, v7, v8, v9);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_BYTE *)(a1 + 48) = v9;
  return a1;
}

uint64_t assignWithCopy for IEEE80211InformationElement(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char v16;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_BYTE *)(a2 + 48);
  sub_100063C58(*(_QWORD *)a2, v4, v5, v6, v7, v8, v9);
  v10 = *(_QWORD *)a1;
  v11 = *(_QWORD *)(a1 + 8);
  v12 = *(_QWORD *)(a1 + 16);
  v13 = *(_QWORD *)(a1 + 24);
  v14 = *(_QWORD *)(a1 + 32);
  v15 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  v16 = *(_BYTE *)(a1 + 48);
  *(_BYTE *)(a1 + 48) = v9;
  sub_100063518(v10, v11, v12, v13, v14, v15, v16);
  return a1;
}

uint64_t assignWithTake for IEEE80211InformationElement(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  __int128 v10;
  char v11;

  v3 = *(_BYTE *)(a2 + 48);
  v4 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_QWORD *)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v10;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  v11 = *(_BYTE *)(a1 + 48);
  *(_BYTE *)(a1 + 48) = v3;
  sub_100063518(v4, v6, v5, v7, v8, v9, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for IEEE80211InformationElement(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xF7 && *(_BYTE *)(a1 + 49))
    return (*(_DWORD *)a1 + 247);
  v3 = *(unsigned __int8 *)(a1 + 48);
  if (v3 <= 9)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for IEEE80211InformationElement(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF6)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 48) = 0;
    *(_QWORD *)result = a2 - 247;
    if (a3 >= 0xF7)
      *(_BYTE *)(result + 49) = 1;
  }
  else
  {
    if (a3 >= 0xF7)
      *(_BYTE *)(result + 49) = 0;
    if (a2)
      *(_BYTE *)(result + 48) = -(char)a2;
  }
  return result;
}

uint64_t sub_1001A3290(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 48) <= 8u)
    return *(unsigned __int8 *)(a1 + 48);
  else
    return (*(_DWORD *)a1 + 9);
}

uint64_t sub_1001A32A8(uint64_t result, unsigned int a2)
{
  if (a2 >= 9)
  {
    *(_QWORD *)result = a2 - 9;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)(result + 40) = 0;
    LOBYTE(a2) = 9;
  }
  *(_BYTE *)(result + 48) = a2;
  return result;
}

ValueMetadata *type metadata accessor for IEEE80211InformationElement()
{
  return &type metadata for IEEE80211InformationElement;
}

uint64_t sub_1001A32E4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  sub_100031FEC(v3, v4);
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  return a1;
}

uint64_t assignWithCopy for IEEE80211InformationElement.HighThroughputCapability(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  *(_WORD *)a1 = *(_WORD *)a2;
  *(_WORD *)(a1 + 2) = *(_WORD *)(a2 + 2);
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  sub_100031FEC(v3, v4);
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  sub_10000E614(v5, v6);
  return a1;
}

uint64_t assignWithTake for IEEE80211InformationElement.HighThroughputCapability(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  sub_10000E614(v3, v4);
  return a1;
}

ValueMetadata *type metadata accessor for IEEE80211InformationElement.HighThroughputCapability()
{
  return &type metadata for IEEE80211InformationElement.HighThroughputCapability;
}

uint64_t destroy for IEEE80211InformationElement.HighThroughputOperation(uint64_t a1)
{
  sub_10000E614(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
  return sub_10000E614(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32));
}

uint64_t initializeWithCopy for IEEE80211InformationElement.HighThroughputOperation(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  sub_100031FEC(v4, v5);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  v7 = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 32);
  sub_100031FEC(v7, v6);
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v6;
  return a1;
}

uint64_t assignWithCopy for IEEE80211InformationElement.HighThroughputOperation(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  sub_100031FEC(v4, v5);
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  sub_10000E614(v6, v7);
  v9 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  sub_100031FEC(v9, v8);
  v10 = *(_QWORD *)(a1 + 24);
  v11 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = v9;
  *(_QWORD *)(a1 + 32) = v8;
  sub_10000E614(v10, v11);
  return a1;
}

uint64_t assignWithTake for IEEE80211InformationElement.HighThroughputOperation(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  sub_10000E614(v4, v5);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_QWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  sub_10000E614(v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for IEEE80211InformationElement.HighThroughputOperation(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xD && *(_BYTE *)(a1 + 40))
    return (*(_DWORD *)a1 + 13);
  v3 = (((*(_QWORD *)(a1 + 16) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(_QWORD *)(a1 + 16) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for IEEE80211InformationElement.HighThroughputOperation(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 - 13;
    if (a3 >= 0xD)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if (a3 >= 0xD)
      *(_BYTE *)(result + 40) = 0;
    if (a2)
    {
      *(_QWORD *)(result + 8) = 0;
      *(_QWORD *)(result + 16) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for IEEE80211InformationElement.HighThroughputOperation()
{
  return &type metadata for IEEE80211InformationElement.HighThroughputOperation;
}

ValueMetadata *type metadata accessor for IEEE80211InformationElement.VeryHighThroughputCapability()
{
  return &type metadata for IEEE80211InformationElement.VeryHighThroughputCapability;
}

ValueMetadata *type metadata accessor for IEEE80211InformationElement.VeryHighThroughputOperation()
{
  return &type metadata for IEEE80211InformationElement.VeryHighThroughputOperation;
}

uint64_t destroy for IEEE80211InformationElement.RSNCapability(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[2]);
  return swift_bridgeObjectRelease(a1[4]);
}

uint64_t initializeWithCopy for IEEE80211InformationElement.RSNCapability(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_WORD *)a1 = *(_WORD *)a2;
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v5;
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

uint64_t assignWithCopy for IEEE80211InformationElement.RSNCapability(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_WORD *)a1 = *(_WORD *)a2;
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  return a1;
}

uint64_t assignWithTake for IEEE80211InformationElement.RSNCapability(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_WORD *)a1 = *(_WORD *)a2;
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  v4 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease(v4);
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  v5 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for IEEE80211InformationElement.RSNCapability(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 41))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for IEEE80211InformationElement.RSNCapability(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 40) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 41) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 41) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for IEEE80211InformationElement.RSNCapability()
{
  return &type metadata for IEEE80211InformationElement.RSNCapability;
}

ValueMetadata *type metadata accessor for IEEE80211InformationElement.RSNCapability.Capabilities()
{
  return &type metadata for IEEE80211InformationElement.RSNCapability.Capabilities;
}

ValueMetadata *type metadata accessor for IEEE80211InformationElement.ExtendedRSNCapability()
{
  return &type metadata for IEEE80211InformationElement.ExtendedRSNCapability;
}

uint64_t storeEnumTagSinglePayload for IEEE80211InformationElement.IEEE80211CipherSuite(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 12 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 12) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF4)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF3)
    return ((uint64_t (*)(void))((char *)&loc_1001A38B8 + 4 * byte_10034FD97[v4]))();
  *a1 = a2 + 12;
  return ((uint64_t (*)(void))((char *)sub_1001A38EC + 4 * byte_10034FD92[v4]))();
}

uint64_t sub_1001A38EC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001A38F4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001A38FCLL);
  return result;
}

uint64_t sub_1001A3908(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001A3910);
  *(_BYTE *)result = a2 + 12;
  return result;
}

uint64_t sub_1001A3914(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001A391C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for IEEE80211InformationElement.IEEE80211CipherSuite()
{
  return &type metadata for IEEE80211InformationElement.IEEE80211CipherSuite;
}

uint64_t destroy for IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters(uint64_t result)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = result;
  v2 = *(_QWORD *)(result + 16);
  if (v2 >> 60 != 15)
    result = sub_10000E614(*(_QWORD *)(result + 8), v2);
  v3 = *(_QWORD *)(v1 + 40);
  if (v3 >> 60 != 15)
    return sub_10000E614(*(_QWORD *)(v1 + 32), v3);
  return result;
}

uint64_t initializeWithCopy for IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD *)(a2 + 16);
  if (v4 >> 60 == 15)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  }
  else
  {
    *(_WORD *)a1 = *(_WORD *)a2;
    v5 = *(_QWORD *)(a2 + 8);
    sub_100031FEC(v5, v4);
    *(_QWORD *)(a1 + 8) = v5;
    *(_QWORD *)(a1 + 16) = v4;
  }
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v6 = (uint64_t *)(a2 + 32);
  v7 = *(_QWORD *)(a2 + 40);
  if (v7 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 32) = *(_OWORD *)v6;
  }
  else
  {
    v8 = *v6;
    sub_100031FEC(*v6, v7);
    *(_QWORD *)(a1 + 32) = v8;
    *(_QWORD *)(a1 + 40) = v7;
  }
  return a1;
}

uint64_t assignWithCopy for IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;

  if (*(_QWORD *)(a1 + 16) >> 60 == 15)
  {
    if (*((_QWORD *)a2 + 2) >> 60 == 15)
    {
      v4 = *a2;
      *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
      *(_OWORD *)a1 = v4;
    }
    else
    {
      *(_WORD *)a1 = *(_WORD *)a2;
      v6 = *((_QWORD *)a2 + 1);
      v7 = *((_QWORD *)a2 + 2);
      sub_100031FEC(v6, v7);
      *(_QWORD *)(a1 + 8) = v6;
      *(_QWORD *)(a1 + 16) = v7;
    }
  }
  else if (*((_QWORD *)a2 + 2) >> 60 == 15)
  {
    sub_100172578(a1);
    v5 = *((_QWORD *)a2 + 2);
    *(_OWORD *)a1 = *a2;
    *(_QWORD *)(a1 + 16) = v5;
  }
  else
  {
    *(_WORD *)a1 = *(_WORD *)a2;
    v8 = *((_QWORD *)a2 + 1);
    v9 = *((_QWORD *)a2 + 2);
    sub_100031FEC(v8, v9);
    v10 = *(_QWORD *)(a1 + 8);
    v11 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 8) = v8;
    *(_QWORD *)(a1 + 16) = v9;
    sub_10000E614(v10, v11);
  }
  *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
  v12 = (uint64_t *)(a2 + 2);
  v13 = *((_QWORD *)a2 + 5);
  if (*(_QWORD *)(a1 + 40) >> 60 != 15)
  {
    if (v13 >> 60 != 15)
    {
      v15 = *v12;
      sub_100031FEC(*v12, v13);
      v16 = *(_QWORD *)(a1 + 32);
      v17 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 32) = v15;
      *(_QWORD *)(a1 + 40) = v13;
      sub_10000E614(v16, v17);
      return a1;
    }
    sub_1001725AC(a1 + 32);
    goto LABEL_13;
  }
  if (v13 >> 60 == 15)
  {
LABEL_13:
    *(_OWORD *)(a1 + 32) = *(_OWORD *)v12;
    return a1;
  }
  v14 = *v12;
  sub_100031FEC(*v12, v13);
  *(_QWORD *)(a1 + 32) = v14;
  *(_QWORD *)(a1 + 40) = v13;
  return a1;
}

uint64_t assignWithTake for IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4 >> 60 == 15)
    goto LABEL_4;
  v5 = *(_QWORD *)(a2 + 16);
  if (v5 >> 60 == 15)
  {
    sub_100172578(a1);
LABEL_4:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    goto LABEL_6;
  }
  *(_WORD *)a1 = *(_WORD *)a2;
  v6 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v5;
  sub_10000E614(v6, v4);
LABEL_6:
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  v7 = (_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  if (v8 >> 60 != 15)
  {
    v9 = *(_QWORD *)(a2 + 40);
    if (v9 >> 60 != 15)
    {
      v10 = *(_QWORD *)(a1 + 32);
      *(_QWORD *)(a1 + 32) = *v7;
      *(_QWORD *)(a1 + 40) = v9;
      sub_10000E614(v10, v8);
      return a1;
    }
    sub_1001725AC(a1 + 32);
  }
  *(_OWORD *)(a1 + 32) = *(_OWORD *)v7;
  return a1;
}

uint64_t getEnumTagSinglePayload for IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters(uint64_t a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xC && *(_BYTE *)(a1 + 48))
    return (*(_DWORD *)a1 + 12);
  v3 = *(_QWORD *)(a1 + 16) >> 60;
  if (((4 * (_DWORD)v3) & 0xC) != 0)
    v4 = 14 - ((4 * v3) & 0xC | (v3 >> 2));
  else
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xB)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 12;
    if (a3 >= 0xC)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if (a3 >= 0xC)
      *(_BYTE *)(result + 48) = 0;
    if (a2)
    {
      *(_QWORD *)(result + 8) = 0;
      *(_QWORD *)(result + 16) = (unint64_t)((4 * (a2 ^ 0xF)) | ((a2 ^ 0xF) >> 2)) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters()
{
  return &type metadata for IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters;
}

ValueMetadata *type metadata accessor for IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters.Comeback()
{
  return &type metadata for IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters.Comeback;
}

uint64_t getEnumTagSinglePayload for IEEE80211InformationElement.AuthenticationKeyManagementSuite(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xE8)
    goto LABEL_17;
  if (a2 + 24 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 24) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 24;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 24;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 24;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x19;
  v8 = v6 - 25;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for IEEE80211InformationElement.AuthenticationKeyManagementSuite(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 24 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 24) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xE8)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xE7)
    return ((uint64_t (*)(void))((char *)&loc_1001A3E0C + 4 * byte_10034FDA1[v4]))();
  *a1 = a2 + 24;
  return ((uint64_t (*)(void))((char *)sub_1001A3E40 + 4 * byte_10034FD9C[v4]))();
}

uint64_t sub_1001A3E40(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001A3E48(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001A3E50);
  return result;
}

uint64_t sub_1001A3E5C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001A3E64);
  *(_BYTE *)result = a2 + 24;
  return result;
}

uint64_t sub_1001A3E68(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001A3E70(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for IEEE80211InformationElement.AuthenticationKeyManagementSuite()
{
  return &type metadata for IEEE80211InformationElement.AuthenticationKeyManagementSuite;
}

ValueMetadata *type metadata accessor for IEEE80211InformationElement.MessageIntegrityCode()
{
  return &type metadata for IEEE80211InformationElement.MessageIntegrityCode;
}

ValueMetadata *type metadata accessor for IEEE80211InformationElement.WrappedData()
{
  return &type metadata for IEEE80211InformationElement.WrappedData;
}

ValueMetadata *type metadata accessor for IEEE80211InformationElement.ExtendedElementID()
{
  return &type metadata for IEEE80211InformationElement.ExtendedElementID;
}

uint64_t storeEnumTagSinglePayload for IEEE80211InformationElement.ElementType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 8 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 8) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF8)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF7)
    return ((uint64_t (*)(void))((char *)&loc_1001A3F0C + 4 * byte_10034FDAB[v4]))();
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_1001A3F40 + 4 * byte_10034FDA6[v4]))();
}

uint64_t sub_1001A3F40(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001A3F48(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001A3F50);
  return result;
}

uint64_t sub_1001A3F5C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001A3F64);
  *(_BYTE *)result = a2 + 8;
  return result;
}

uint64_t sub_1001A3F68(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001A3F70(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for IEEE80211InformationElement.ElementType()
{
  return &type metadata for IEEE80211InformationElement.ElementType;
}

ValueMetadata *type metadata accessor for IEEE80211InformationElement.WrappedData.CodingKeys()
{
  return &type metadata for IEEE80211InformationElement.WrappedData.CodingKeys;
}

ValueMetadata *type metadata accessor for IEEE80211InformationElement.MessageIntegrityCode.CodingKeys()
{
  return &type metadata for IEEE80211InformationElement.MessageIntegrityCode.CodingKeys;
}

ValueMetadata *type metadata accessor for IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters.Control()
{
  return &type metadata for IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters.Control;
}

uint64_t _s7CoreP2P27IEEE80211InformationElementO17ExtendedElementIDOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1001A400C + 4 * byte_10034FDB5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1001A4040 + 4 * byte_10034FDB0[v4]))();
}

uint64_t sub_1001A4040(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001A4048(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001A4050);
  return result;
}

uint64_t sub_1001A405C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001A4064);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1001A4068(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001A4070(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters.Comeback.CodingKeys()
{
  return &type metadata for IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters.Comeback.CodingKeys;
}

uint64_t _s7CoreP2P27IEEE80211InformationElementO20MessageIntegrityCodeV10CodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1001A40CC + 4 * byte_10034FDBA[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1001A40EC + 4 * byte_10034FDBF[v4]))();
}

_BYTE *sub_1001A40CC(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1001A40EC(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1001A40F4(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1001A40FC(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1001A4104(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1001A410C(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for IEEE80211InformationElement.ExtendedRSNCapability.CodingKeys()
{
  return &type metadata for IEEE80211InformationElement.ExtendedRSNCapability.CodingKeys;
}

ValueMetadata *type metadata accessor for IEEE80211InformationElement.VeryHighThroughputOperation.CodingKeys()
{
  return &type metadata for IEEE80211InformationElement.VeryHighThroughputOperation.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for IEEE80211InformationElement.VeryHighThroughputCapability.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1001A4184 + 4 * byte_10034FDC9[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1001A41B8 + 4 * byte_10034FDC4[v4]))();
}

uint64_t sub_1001A41B8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001A41C0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001A41C8);
  return result;
}

uint64_t sub_1001A41D4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001A41DCLL);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1001A41E0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001A41E8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for IEEE80211InformationElement.VeryHighThroughputCapability.CodingKeys()
{
  return &type metadata for IEEE80211InformationElement.VeryHighThroughputCapability.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for IEEE80211InformationElement.HighThroughputOperation.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1001A4250 + 4 * byte_10034FDD3[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1001A4284 + 4 * byte_10034FDCE[v4]))();
}

uint64_t sub_1001A4284(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001A428C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001A4294);
  return result;
}

uint64_t sub_1001A42A0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001A42A8);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1001A42AC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001A42B4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for IEEE80211InformationElement.HighThroughputOperation.CodingKeys()
{
  return &type metadata for IEEE80211InformationElement.HighThroughputOperation.CodingKeys;
}

ValueMetadata *type metadata accessor for IEEE80211InformationElement.HighThroughputCapability.CodingKeys()
{
  return &type metadata for IEEE80211InformationElement.HighThroughputCapability.CodingKeys;
}

unint64_t sub_1001A42E8()
{
  unint64_t result;

  result = qword_10040A2F0;
  if (!qword_10040A2F0)
  {
    result = swift_getWitnessTable(asc_100350DD4, &type metadata for IEEE80211InformationElement.HighThroughputCapability.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040A2F0);
  }
  return result;
}

unint64_t sub_1001A4330()
{
  unint64_t result;

  result = qword_10040A2F8;
  if (!qword_10040A2F8)
  {
    result = swift_getWitnessTable(aU_6, &type metadata for IEEE80211InformationElement.HighThroughputOperation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040A2F8);
  }
  return result;
}

unint64_t sub_1001A4378()
{
  unint64_t result;

  result = qword_10040A300;
  if (!qword_10040A300)
  {
    result = swift_getWitnessTable(byte_100350F44, &type metadata for IEEE80211InformationElement.VeryHighThroughputCapability.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040A300);
  }
  return result;
}

unint64_t sub_1001A43C0()
{
  unint64_t result;

  result = qword_10040A308;
  if (!qword_10040A308)
  {
    result = swift_getWitnessTable(byte_10035104C, &type metadata for IEEE80211InformationElement.ExtendedRSNCapability.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040A308);
  }
  return result;
}

unint64_t sub_1001A4408()
{
  unint64_t result;

  result = qword_10040A310;
  if (!qword_10040A310)
  {
    result = swift_getWitnessTable(byte_100351104, &type metadata for IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters.Comeback.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040A310);
  }
  return result;
}

unint64_t sub_1001A4450()
{
  unint64_t result;

  result = qword_10040A318;
  if (!qword_10040A318)
  {
    result = swift_getWitnessTable(byte_10035115C, &type metadata for IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters.Control);
    atomic_store(result, (unint64_t *)&qword_10040A318);
  }
  return result;
}

unint64_t sub_1001A4498()
{
  unint64_t result;

  result = qword_10040A320;
  if (!qword_10040A320)
  {
    result = swift_getWitnessTable("ժ\t", &type metadata for IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters.Control);
    atomic_store(result, (unint64_t *)&qword_10040A320);
  }
  return result;
}

unint64_t sub_1001A44E0()
{
  unint64_t result;

  result = qword_10040A328;
  if (!qword_10040A328)
  {
    result = swift_getWitnessTable(asc_100351184, &type metadata for IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters.Control);
    atomic_store(result, (unint64_t *)&qword_10040A328);
  }
  return result;
}

unint64_t sub_1001A4528()
{
  unint64_t result;

  result = qword_10040A330;
  if (!qword_10040A330)
  {
    result = swift_getWitnessTable(aU_7, &type metadata for IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters.Control);
    atomic_store(result, (unint64_t *)&qword_10040A330);
  }
  return result;
}

unint64_t sub_1001A4570()
{
  unint64_t result;

  result = qword_10040A338;
  if (!qword_10040A338)
  {
    result = swift_getWitnessTable(aM_6, &type metadata for IEEE80211InformationElement.MessageIntegrityCode.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040A338);
  }
  return result;
}

unint64_t sub_1001A45B8()
{
  unint64_t result;

  result = qword_10040A340;
  if (!qword_10040A340)
  {
    result = swift_getWitnessTable(a5_3, &type metadata for IEEE80211InformationElement.ElementType);
    atomic_store(result, (unint64_t *)&qword_10040A340);
  }
  return result;
}

unint64_t sub_1001A4600()
{
  unint64_t result;

  result = qword_10040A348;
  if (!qword_10040A348)
  {
    result = swift_getWitnessTable(aM_7, &type metadata for IEEE80211InformationElement.ExtendedElementID);
    atomic_store(result, (unint64_t *)&qword_10040A348);
  }
  return result;
}

unint64_t sub_1001A4648()
{
  unint64_t result;

  result = qword_10040A350;
  if (!qword_10040A350)
  {
    result = swift_getWitnessTable(aE_4, &type metadata for IEEE80211InformationElement.WrappedData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040A350);
  }
  return result;
}

unint64_t sub_1001A4690()
{
  unint64_t result;

  result = qword_10040A358;
  if (!qword_10040A358)
  {
    result = swift_getWitnessTable(asc_100351404, &type metadata for IEEE80211InformationElement.WrappedData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040A358);
  }
  return result;
}

unint64_t sub_1001A46D8()
{
  unint64_t result;

  result = qword_10040A360;
  if (!qword_10040A360)
  {
    result = swift_getWitnessTable(byte_100351324, &type metadata for IEEE80211InformationElement.MessageIntegrityCode.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040A360);
  }
  return result;
}

unint64_t sub_1001A4720()
{
  unint64_t result;

  result = qword_10040A368;
  if (!qword_10040A368)
  {
    result = swift_getWitnessTable(byte_10035134C, &type metadata for IEEE80211InformationElement.MessageIntegrityCode.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040A368);
  }
  return result;
}

unint64_t sub_1001A4768()
{
  unint64_t result;

  result = qword_10040A370;
  if (!qword_10040A370)
  {
    result = swift_getWitnessTable(byte_100351074, &type metadata for IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters.Comeback.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040A370);
  }
  return result;
}

unint64_t sub_1001A47B0()
{
  unint64_t result;

  result = qword_10040A378;
  if (!qword_10040A378)
  {
    result = swift_getWitnessTable(byte_10035109C, &type metadata for IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters.Comeback.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040A378);
  }
  return result;
}

unint64_t sub_1001A47F8()
{
  unint64_t result;

  result = qword_10040A380;
  if (!qword_10040A380)
  {
    result = swift_getWitnessTable(aE_5, &type metadata for IEEE80211InformationElement.ExtendedRSNCapability.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040A380);
  }
  return result;
}

unint64_t sub_1001A4840()
{
  unint64_t result;

  result = qword_10040A388;
  if (!qword_10040A388)
  {
    result = swift_getWitnessTable(aM_8, &type metadata for IEEE80211InformationElement.ExtendedRSNCapability.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040A388);
  }
  return result;
}

unint64_t sub_1001A4888()
{
  unint64_t result;

  result = qword_10040A390;
  if (!qword_10040A390)
  {
    result = swift_getWitnessTable(byte_100350F6C, &type metadata for IEEE80211InformationElement.VeryHighThroughputOperation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040A390);
  }
  return result;
}

unint64_t sub_1001A48D0()
{
  unint64_t result;

  result = qword_10040A398;
  if (!qword_10040A398)
  {
    result = swift_getWitnessTable(byte_100350F94, &type metadata for IEEE80211InformationElement.VeryHighThroughputOperation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040A398);
  }
  return result;
}

unint64_t sub_1001A4918()
{
  unint64_t result;

  result = qword_10040A3A0;
  if (!qword_10040A3A0)
  {
    result = swift_getWitnessTable(aM_9, &type metadata for IEEE80211InformationElement.VeryHighThroughputCapability.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040A3A0);
  }
  return result;
}

unint64_t sub_1001A4960()
{
  unint64_t result;

  result = qword_10040A3A8;
  if (!qword_10040A3A8)
  {
    result = swift_getWitnessTable(aU_8, &type metadata for IEEE80211InformationElement.VeryHighThroughputCapability.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040A3A8);
  }
  return result;
}

unint64_t sub_1001A49A8()
{
  unint64_t result;

  result = qword_10040A3B0;
  if (!qword_10040A3B0)
  {
    result = swift_getWitnessTable(asc_100350DFC, &type metadata for IEEE80211InformationElement.HighThroughputOperation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040A3B0);
  }
  return result;
}

unint64_t sub_1001A49F0()
{
  unint64_t result;

  result = qword_10040A3B8;
  if (!qword_10040A3B8)
  {
    result = swift_getWitnessTable(asc_100350E24, &type metadata for IEEE80211InformationElement.HighThroughputOperation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040A3B8);
  }
  return result;
}

unint64_t sub_1001A4A38()
{
  unint64_t result;

  result = qword_10040A3C0;
  if (!qword_10040A3C0)
  {
    result = swift_getWitnessTable("ݮ\t", &type metadata for IEEE80211InformationElement.HighThroughputCapability.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040A3C0);
  }
  return result;
}

unint64_t sub_1001A4A80()
{
  unint64_t result;

  result = qword_10040A3C8;
  if (!qword_10040A3C8)
  {
    result = swift_getWitnessTable("Ů\t", &type metadata for IEEE80211InformationElement.HighThroughputCapability.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040A3C8);
  }
  return result;
}

uint64_t sub_1001A4AD4(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 *v3;
  int v4;
  int v5;

  v1 = *(_QWORD *)(result + 16);
  if (!v1)
    return 0;
  v2 = result;
  LODWORD(result) = 0;
  v3 = (unsigned __int8 *)(v2 + 32);
  do
  {
    v5 = *v3++;
    v4 = v5;
    if ((v5 & ~(_DWORD)result) == 0)
      v4 = 0;
    result = v4 | result;
    --v1;
  }
  while (v1);
  return result;
}

uint64_t sub_1001A4B0C(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  unsigned __int16 *v3;
  int v4;
  int v5;

  v1 = *(_QWORD *)(result + 16);
  if (!v1)
    return 0;
  v2 = result;
  LODWORD(result) = 0;
  v3 = (unsigned __int16 *)(v2 + 32);
  do
  {
    v5 = *v3++;
    v4 = v5;
    if ((v5 & ~(_DWORD)result) == 0)
      v4 = 0;
    result = v4 | result;
    --v1;
  }
  while (v1);
  return result;
}

uint64_t sub_1001A4B44(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  int *v3;
  int v4;
  int v5;

  v1 = *(_QWORD *)(result + 16);
  if (!v1)
    return 0;
  v2 = result;
  LODWORD(result) = 0;
  v3 = (int *)(v2 + 32);
  do
  {
    v5 = *v3++;
    v4 = v5;
    if ((v5 & ~(_DWORD)result) == 0)
      v4 = 0;
    result = v4 | result;
    --v1;
  }
  while (v1);
  return result;
}

uint64_t sub_1001A4B7C(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return 0;
  result = 0;
  v4 = (uint64_t *)(a1 + 32);
  do
  {
    v6 = *v4++;
    v5 = v6;
    if ((v6 & ~result) == 0)
      v5 = 0;
    result |= v5;
    --v1;
  }
  while (v1);
  return result;
}

uint64_t sub_1001A4BB4(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  char v9;

  if (a1 == 1802401130 && a2 == 0xE400000000000000)
  {
    v5 = 0xE400000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1802401130, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 1868983913 && a2 == 0xE400000000000000)
  {
    v7 = 0xE400000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1868983913, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x7261507564706D61 && a2 == 0xEF73726574656D61)
  {
    v8 = 0xEF73726574656D61;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7261507564706D61, 0xEF73726574656D61, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 7562093 && a2 == 0xE300000000000000)
  {
    swift_bridgeObjectRelease(0xE300000000000000);
    return 3;
  }
  else
  {
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(7562093, 0xE300000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v9 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_1001A4D60(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  char v8;

  if (a1 == 0x437972616D697270 && a2 == 0xEE006C656E6E6168)
  {
    v5 = 0xEE006C656E6E6168;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x437972616D697270, 0xEE006C656E6E6168, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6F6974617265706FLL && a2 == 0xE90000000000006ELL)
  {
    v7 = 0xE90000000000006ELL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F6974617265706FLL, 0xE90000000000006ELL, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 7562093 && a2 == 0xE300000000000000)
  {
    swift_bridgeObjectRelease(0xE300000000000000);
    return 2;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(7562093, 0xE300000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_1001A4ED4(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char v10;

  if (a1 == 1868983913 && a2 == 0xE400000000000000)
  {
    v5 = 0xE400000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1868983913, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x70614D53434D7872 && a2 == 0xE800000000000000)
  {
    v7 = 0xE800000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x70614D53434D7872, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x474C686769487872 && a2 == 0xED00006574615249)
  {
    v8 = 0xED00006574615249;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x474C686769487872, 0xED00006574615249, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x70614D53434D7874 && a2 == 0xE800000000000000)
  {
    v9 = 0xE800000000000000;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x70614D53434D7874, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_26;
  }
  if (a1 == 0x474C686769487874 && a2 == 0xED00006574615249)
  {
    swift_bridgeObjectRelease(0xED00006574615249);
    return 4;
  }
  else
  {
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(0x474C686769487874, 0xED00006574615249, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v10 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t sub_1001A50F0(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x6B636162656D6F63 && a2 == 0xED00007265746641)
  {
    v5 = 0xED00007265746641;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6B636162656D6F63, 0xED00007265746641, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x65696B6F6F63 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease(0xE600000000000000);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x65696B6F6F63, 0xE600000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

unint64_t sub_1001A51FC()
{
  unint64_t result;

  result = qword_10040A3D0;
  if (!qword_10040A3D0)
  {
    result = swift_getWitnessTable(byte_100351454, &type metadata for IEEE80211InformationElement.ElementType);
    atomic_store(result, (unint64_t *)&qword_10040A3D0);
  }
  return result;
}

unint64_t sub_1001A5240()
{
  unint64_t result;

  result = qword_10040A3D8;
  if (!qword_10040A3D8)
  {
    result = swift_getWitnessTable(byte_10035155C, &type metadata for IEEE80211InformationElement.ExtendedElementID);
    atomic_store(result, (unint64_t *)&qword_10040A3D8);
  }
  return result;
}

unint64_t sub_1001A5284()
{
  unint64_t result;

  result = qword_10040A3E8;
  if (!qword_10040A3E8)
  {
    result = swift_getWitnessTable(asc_100351284, &type metadata for IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters.Control);
    atomic_store(result, (unint64_t *)&qword_10040A3E8);
  }
  return result;
}

unint64_t sub_1001A52C8()
{
  unint64_t result;

  result = qword_10040A3F0;
  if (!qword_10040A3F0)
  {
    result = swift_getWitnessTable(aE_6, &type metadata for IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters.WrappedDataFormat);
    atomic_store(result, (unint64_t *)&qword_10040A3F0);
  }
  return result;
}

unint64_t sub_1001A530C()
{
  unint64_t result;

  result = qword_10040A3F8;
  if (!qword_10040A3F8)
  {
    result = swift_getWitnessTable("ɳ\t", &type metadata for IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters.Comeback);
    atomic_store(result, (unint64_t *)&qword_10040A3F8);
  }
  return result;
}

unint64_t sub_1001A5350()
{
  unint64_t result;

  result = qword_10040A400;
  if (!qword_10040A400)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for IEEE80211InformationElement.IEEE80211CipherSuite, &type metadata for IEEE80211InformationElement.IEEE80211CipherSuite);
    atomic_store(result, (unint64_t *)&qword_10040A400);
  }
  return result;
}

unint64_t sub_1001A5394()
{
  unint64_t result;

  result = qword_10040A408;
  if (!qword_10040A408)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for IEEE80211InformationElement.RSNCapability.Capabilities, &type metadata for IEEE80211InformationElement.RSNCapability.Capabilities);
    atomic_store(result, (unint64_t *)&qword_10040A408);
  }
  return result;
}

unint64_t sub_1001A53D8()
{
  unint64_t result;

  result = qword_10040A410;
  if (!qword_10040A410)
  {
    result = swift_getWitnessTable("Q6\n", &type metadata for NANPMK.ID);
    atomic_store(result, (unint64_t *)&qword_10040A410);
  }
  return result;
}

unint64_t sub_1001A541C()
{
  unint64_t result;

  result = qword_10040A418;
  if (!qword_10040A418)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for IEEE80211InformationElement.AuthenticationKeyManagementSuite, &type metadata for IEEE80211InformationElement.AuthenticationKeyManagementSuite);
    atomic_store(result, (unint64_t *)&qword_10040A418);
  }
  return result;
}

uint64_t _s7CoreP2P27IEEE80211InformationElementO24HighThroughputCapabilityV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1001A54AC + 4 * byte_10034FDDD[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1001A54E0 + 4 * byte_10034FDD8[v4]))();
}

uint64_t sub_1001A54E0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001A54E8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001A54F0);
  return result;
}

uint64_t sub_1001A54FC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001A5504);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1001A5508(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001A5510(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters.WrappedDataFormat()
{
  return &type metadata for IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters.WrappedDataFormat;
}

unint64_t sub_1001A5530()
{
  unint64_t result;

  result = qword_10040A440;
  if (!qword_10040A440)
  {
    result = swift_getWitnessTable(byte_100351974, &type metadata for IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters.WrappedDataFormat);
    atomic_store(result, (unint64_t *)&qword_10040A440);
  }
  return result;
}

unint64_t sub_1001A5574()
{
  unint64_t result;

  result = qword_10040A448;
  if (!qword_10040A448)
  {
    result = swift_getWitnessTable(byte_10035193C, &type metadata for IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters.WrappedDataFormat);
    atomic_store(result, (unint64_t *)&qword_10040A448);
  }
  return result;
}

void sub_1001A55C0(CoreP2P::WiFiInterfaceRole a1@<W0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v5;
  uint64_t v7;

  sub_1001A55F0(a1, a2, a3, a4 & 0xFFFFFFFFFFFFLL);
  if (!v5)
    *a5 = v7;
}

void sub_1001A55F0(CoreP2P::WiFiInterfaceRole a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  CoreP2P::WiFiAddress *v10;
  Swift::String v11;
  Swift::String_optional v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;

  if (a1)
  {
    v8 = *v4;
    v9 = v4[5];
    v10 = (CoreP2P::WiFiAddress *)(a4 & 0xFFFFFFFFFFFFLL);
    swift_retain();
    v11._countAndFlagsBits = a2;
    v11._object = a3;
    v12 = AppleDevice.findOrCreateInterface(for:on:with:)(a1, v11, v10);
    swift_release(v9);
    if (v12.value._object)
    {
      swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
      v13 = swift_retain();
      AppleIO80211Driver.init(device:role:name:)(v13, a1, v12.value._countAndFlagsBits, (uint64_t)v12.value._object);
      return;
    }
    v18 = sub_100012C84();
    v15 = swift_allocError(&type metadata for WiFiError, v18, 0, 0);
    v17 = 7;
  }
  else
  {
    v14 = sub_100012C84();
    v15 = swift_allocError(&type metadata for WiFiError, v14, 0, 0);
    v17 = 2;
  }
  *(_QWORD *)v16 = v17;
  *(_QWORD *)(v16 + 8) = 0;
  *(_BYTE *)(v16 + 16) = 1;
  swift_willThrow(v15);
}

void sub_1001A5704(CoreP2P::WiFiInterfaceRole a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  CoreP2P::WiFiAddress *v10;
  Swift::String v11;
  Swift::String_optional v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;

  if (a1 == CoreP2P_WiFiInterfaceRole_infrastructure)
  {
    v19 = sub_100012C84();
    v16 = swift_allocError(&type metadata for WiFiError, v19, 0, 0);
    v18 = 2;
    goto LABEL_6;
  }
  v8 = *v4;
  v9 = v4[5];
  v10 = (CoreP2P::WiFiAddress *)(a4 & 0xFFFFFFFFFFFFLL);
  swift_retain();
  v11._countAndFlagsBits = a2;
  v11._object = a3;
  v12 = AppleDevice.findOrCreateInterface(for:on:with:)(a1, v11, v10);
  swift_release(v9);
  if (!v12.value._object
    || (swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52)),
        v13 = swift_retain(),
        AppleBroadcomDriver.init(device:role:name:)(v13, a1, v12.value._countAndFlagsBits, (uint64_t)v12.value._object),
        !v14))
  {
    v15 = sub_100012C84();
    v16 = swift_allocError(&type metadata for WiFiError, v15, 0, 0);
    v18 = 7;
LABEL_6:
    *(_QWORD *)v17 = v18;
    *(_QWORD *)(v17 + 8) = 0;
    *(_BYTE *)(v17 + 16) = 1;
    swift_willThrow(v16);
  }
}

uint64_t WiFiDriver<>.createInterface(for:on:macAddress:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  int v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t AssociatedTypeWitness;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t AssociatedConformanceWitness;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v30;
  void (*v31)(uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v35 = a2;
  v36 = a3;
  v34 = a7;
  v11 = a1;
  v12 = type metadata accessor for Optional(0, a5);
  v32 = *(_QWORD *)(v12 - 8);
  v33 = v12;
  __chkstk_darwin();
  v14 = (char *)&v30 - v13;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a6, a5, &protocol requirements base descriptor for DeviceDriver);
  v16 = *(_QWORD *)(AssociatedTypeWitness - 8);
  __chkstk_darwin();
  v18 = (char *)&v30 - v17;
  if (!v11)
  {
    v28 = sub_100012C84();
    v25 = swift_allocError(&type metadata for WiFiError, v28, 0, 0);
    v27 = 2;
    goto LABEL_7;
  }
  v31 = *(void (**)(uint64_t, uint64_t))(a6 + 56);
  v31(a5, a6);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a6, a5, AssociatedTypeWitness, &protocol requirements base descriptor for DeviceDriver, &associated conformance descriptor for DeviceDriver.DeviceDriver.Device: Device);
  v20 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness
                                                                                        + 72))(a1, v35, v36, a4 & 0xFFFFFFFFFFFFLL, AssociatedTypeWitness, AssociatedConformanceWitness);
  v22 = v21;
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, AssociatedTypeWitness);
  if (!v22)
  {
LABEL_5:
    v24 = sub_100012C84();
    v25 = swift_allocError(&type metadata for WiFiError, v24, 0, 0);
    v27 = 7;
LABEL_7:
    *(_QWORD *)v26 = v27;
    *(_QWORD *)(v26 + 8) = 0;
    *(_BYTE *)(v26 + 16) = 1;
    return swift_willThrow(v25);
  }
  v31(a5, a6);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a6 + 48))(v18, a1, v20, v22, a5, a6);
  v23 = *(_QWORD *)(a5 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v14, 1, a5) == 1)
  {
    (*(void (**)(char *, uint64_t))(v32 + 8))(v14, v33);
    goto LABEL_5;
  }
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v23 + 32))(v34, v14, a5);
}

void sub_1001A5A70(CoreP2P::WiFiInterfaceRole a1@<W0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v5;
  uint64_t v7;

  sub_1001A5704(a1, a2, a3, a4 & 0xFFFFFFFFFFFFLL);
  if (!v5)
    *a5 = v7;
}

void *InterfaceIdentifier.size.unsafeMutableAddressor()
{
  return &static InterfaceIdentifier.size;
}

uint64_t InterfaceIdentifier.ipv6Address.getter(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v11;

  v4 = sub_1001068EC((uint64_t)&off_1003D72B0);
  v6 = v5;
  v11 = v5;
  sub_100031FEC(a1, a2);
  sub_100031FEC(v4, v6);
  sub_1000FBDAC(a1, a2);
  sub_10000E614(a1, a2);
  sub_10000E614(v4, v6);
  v7 = v4;
  sub_100212BD4(v4, v11);
  v9 = v8;
  sub_10000E614(v7, v11);
  return v9;
}

void InterfaceIdentifier.description.getter(uint64_t a1, uint64_t a2)
{
  __asm { BR              X9 }
}

uint64_t sub_1001A5BE4()
{
  unint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  Swift::String v8;
  void *object;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v4 = 0;
  v5 = BYTE6(v0);
  result = 0x3A30386566;
  *(_QWORD *)(v3 - 112) = 0x3A30386566;
  *(_QWORD *)(v3 - 104) = 0xE500000000000000;
  if (!BYTE6(v0))
    return result;
  v37 = v1 >> 32;
  v35 = BYTE6(v0);
  v33 = v0 >> 8;
  v31 = v0 >> 24;
  v32 = v0 >> 16;
  v34 = v0;
  v29 = v0 >> 40;
  v30 = HIDWORD(v0);
  v36 = BYTE6(v0);
  while (1)
  {
    v10 = __OFADD__(v4, 2) ? 0x7FFFFFFFFFFFFFFFLL : v4 + 2;
    v11 = sub_100012C44((uint64_t *)&unk_100404F10);
    v12 = swift_allocObject(v11, 72, 7);
    *(_OWORD *)(v12 + 16) = xmmword_10033A110;
    if (v2)
      break;
    if (v4 >= v35)
      goto LABEL_36;
    *(_QWORD *)(v3 - 126) = v1;
    *(_BYTE *)(v3 - 118) = v34;
    *(_BYTE *)(v3 - 117) = v33;
    *(_BYTE *)(v3 - 116) = v32;
    *(_BYTE *)(v3 - 115) = v31;
    *(_BYTE *)(v3 - 114) = v30;
    v22 = v4 + 1;
    *(_BYTE *)(v3 - 113) = v29;
    if (v4 + 1 >= v35)
      goto LABEL_39;
    v17 = *(unsigned __int8 *)(v3 - 126 + v4);
    *(_QWORD *)(v3 - 126) = v1;
    *(_BYTE *)(v3 - 118) = v34;
    *(_BYTE *)(v3 - 117) = v33;
    *(_BYTE *)(v3 - 116) = v32;
    *(_BYTE *)(v3 - 115) = v31;
    *(_BYTE *)(v3 - 114) = v30;
    *(_BYTE *)(v3 - 113) = v29;
    v7 = *(unsigned __int8 *)(v3 - 126 + v22);
LABEL_4:
    *(_QWORD *)(v12 + 56) = &type metadata for Int;
    *(_QWORD *)(v12 + 64) = &protocol witness table for Int;
    *(_QWORD *)(v12 + 32) = v7 | (v17 << 8);
    v8._countAndFlagsBits = String.init(format:_:)(0x783430253ALL, 0xE500000000000000, v12);
    object = v8._object;
    String.append(_:)(v8);
    swift_bridgeObjectRelease(object);
    v4 = v10;
    if (v10 >= v5)
      return *(_QWORD *)(v3 - 112);
  }
  if (v2 == 1)
  {
    if (v4 < (int)v1 || v4 >= v37)
    {
      __break(1u);
LABEL_36:
      __break(1u);
LABEL_37:
      __break(1u);
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
LABEL_43:
      __break(1u);
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
LABEL_47:
      __break(1u);
LABEL_48:
      __break(1u);
LABEL_49:
      __break(1u);
    }
    v13 = __DataStorage._bytes.getter();
    if (!v13)
      goto LABEL_46;
    v14 = v13;
    v15 = __DataStorage._offset.getter();
    if (__OFSUB__(v4, v15))
      goto LABEL_38;
    v16 = v4 + 1;
    if (v4 + 1 < (int)v1 || v16 >= v37)
      goto LABEL_41;
    v17 = *(unsigned __int8 *)(v14 + v4 - v15);
    v18 = __DataStorage._bytes.getter();
    if (!v18)
      goto LABEL_47;
    v19 = v18;
    v20 = __DataStorage._offset.getter();
    v21 = v16 - v20;
    if (__OFSUB__(v16, v20))
      goto LABEL_43;
    goto LABEL_3;
  }
  if (v4 < *(_QWORD *)(v1 + 16))
    goto LABEL_37;
  if (v4 >= *(_QWORD *)(v1 + 24))
    goto LABEL_40;
  v23 = __DataStorage._bytes.getter();
  if (!v23)
    goto LABEL_48;
  v24 = v23;
  v25 = __DataStorage._offset.getter();
  if (__OFSUB__(v4, v25))
    goto LABEL_42;
  v26 = v4 + 1;
  if (v4 + 1 < *(_QWORD *)(v1 + 16))
    goto LABEL_44;
  if (v26 >= *(_QWORD *)(v1 + 24))
    goto LABEL_45;
  v17 = *(unsigned __int8 *)(v24 + v4 - v25);
  v27 = __DataStorage._bytes.getter();
  if (!v27)
    goto LABEL_49;
  v19 = v27;
  v28 = __DataStorage._offset.getter();
  v21 = v26 - v28;
  if (!__OFSUB__(v26, v28))
  {
LABEL_3:
    v7 = *(unsigned __int8 *)(v19 + v21);
    v5 = v36;
    goto LABEL_4;
  }
  __break(1u);
  return *(_QWORD *)(v3 - 112);
}

void sub_1001A5F74()
{
  uint64_t *v0;

  InterfaceIdentifier.description.getter(*v0, v0[1]);
}

uint64_t InterfaceIdentifier.customMirror.getter(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  _QWORD *v15;
  _QWORD v16[2];

  v4 = type metadata accessor for Mirror.AncestorRepresentation(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin();
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012C44((uint64_t *)&unk_1004085C0);
  __chkstk_darwin();
  v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16[0] = a1;
  v16[1] = a2;
  v15 = _swiftEmptyArrayStorage;
  v10 = type metadata accessor for Mirror.DisplayStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for Mirror.AncestorRepresentation.generated(_:), v4);
  sub_100031FEC(a1, a2);
  v11 = sub_100012C44(&qword_100405B90);
  v12 = sub_1000687EC();
  return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)(v16, &v15, v9, v7, &type metadata for InterfaceIdentifier, v11, v12);
}

uint64_t InterfaceIdentifier.init(from:)(_QWORD *a1)
{
  return sub_1001A6190(a1);
}

uint64_t InterfaceIdentifier.init(_:)(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    __asm { BR              X10 }
  return 0;
}

uint64_t sub_1001A6168@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = sub_1001A6190(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t sub_1001A6190(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v9[3];
  uint64_t v10;
  uint64_t v11;

  v3 = a1[3];
  v4 = a1[4];
  sub_10003259C(a1, v3);
  dispatch thunk of Decoder.unkeyedContainer()(v9, v3, v4);
  if (!v1)
  {
    v5 = v10;
    v6 = v11;
    sub_100034C68((uint64_t)v9, v10);
    UnkeyedDecodingContainer.decodeData(with:)(8, v5, v6);
    __asm { BR              X10 }
  }
  sub_100014430(a1);
  return v3;
}

unint64_t sub_1001A639C()
{
  unint64_t result;

  result = qword_10040A450;
  if (!qword_10040A450)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for InterfaceIdentifier, &type metadata for InterfaceIdentifier);
    atomic_store(result, (unint64_t *)&qword_10040A450);
  }
  return result;
}

ValueMetadata *type metadata accessor for InterfaceIdentifier()
{
  return &type metadata for InterfaceIdentifier;
}

uint64_t ExtendableOptionSet.init()(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;

  v3 = _swiftEmptyArrayStorage;
  return dispatch thunk of OptionSet.init(rawValue:)(&v3, a1, *(_QWORD *)(a2 + 8));
}

void ExtendableOptionSet.formUnion(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1001A65D8(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128))sub_1001A7ED0);
}

uint64_t ExtendableOptionSet.formIntersection(_:)(uint64_t (*a1)(_BYTE *, _QWORD), uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(_QWORD *, _QWORD);
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  BOOL v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[4];
  uint64_t v22;

  v4 = v3;
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 8) + 8);
  dispatch thunk of RawRepresentable.rawValue.getter(v21, a2, v8);
  v9 = *(_QWORD *)(v21[0] + 16);
  swift_bridgeObjectRelease(v21[0]);
  dispatch thunk of RawRepresentable.rawValue.getter(&v22, a2, v8);
  v10 = *(_QWORD *)(v22 + 16);
  swift_bridgeObjectRelease(v22);
  if (v10 < v9)
  {
    dispatch thunk of RawRepresentable.rawValue.getter(v21, a2, v8);
    v11 = *(_QWORD *)(v21[0] + 16);
    swift_bridgeObjectRelease(v21[0]);
    dispatch thunk of RawRepresentable.rawValue.getter(&v22, a2, v8);
    v12 = *(_QWORD *)(v22 + 16);
    swift_bridgeObjectRelease(v22);
    v13 = (void (*)(_QWORD *, _QWORD))(*(uint64_t (**)(_QWORD *, uint64_t *, uint64_t))(a3 + 24))(v21, a2, a3);
    sub_1001A7FD0(v11 - v12);
    v13(v21, 0);
  }
  dispatch thunk of RawRepresentable.rawValue.getter(v21, a2, v8);
  v14 = *(_QWORD *)(v21[0] + 16);
  swift_bridgeObjectRelease(v21[0]);
  dispatch thunk of RawRepresentable.rawValue.getter(&v22, a2, v8);
  v15 = *(_QWORD *)(v22 + 16);
  result = swift_bridgeObjectRelease(v22);
  if (v14)
    v17 = v15 == 0;
  else
    v17 = 1;
  if (!v17)
  {
    v18 = 0;
    v19 = v15 - 1;
    v20 = v14 - 1;
    do
    {
      result = sub_1001A7FF8(v18, v18, v4, a1, a2, a3);
      if (v20 == v18)
        break;
      v17 = v19 == v18++;
    }
    while (!v17);
  }
  return result;
}

void ExtendableOptionSet.formSymmetricDifference(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1001A65D8(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128))sub_1001A80F8);
}

void sub_1001A65D8(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, __n128))
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  __n128 v24;
  unint64_t v25;
  unint64_t v26;
  void (*v27)(_QWORD *, _QWORD, __n128);
  __n128 v28;
  _QWORD v29[4];
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v6 = v4;
  v10 = *(_QWORD *)(*(_QWORD *)(a3 + 8) + 8);
  dispatch thunk of RawRepresentable.rawValue.getter(v29, a2, v10);
  v11 = *(_QWORD *)(v29[0] + 16);
  swift_bridgeObjectRelease(v29[0]);
  dispatch thunk of RawRepresentable.rawValue.getter(&v32, a2, v10);
  v12 = *(_QWORD *)(v32 + 16);
  v13 = swift_bridgeObjectRelease(v32);
  if (v11)
    v14 = v12 == 0;
  else
    v14 = 1;
  if (!v14)
  {
    v15 = 0;
    v16 = v12 - 1;
    v17 = v11 - 1;
    do
    {
      a4(v15, v15, v6, a1, a2, a3, v13);
      if (v17 == v15)
        break;
      v14 = v16 == v15++;
    }
    while (!v14);
  }
  dispatch thunk of RawRepresentable.rawValue.getter(v29, a2, v10);
  v18 = *(_QWORD *)(v29[0] + 16);
  swift_bridgeObjectRelease(v29[0]);
  dispatch thunk of RawRepresentable.rawValue.getter(&v32, a2, v10);
  v19 = *(_QWORD *)(v32 + 16);
  swift_bridgeObjectRelease(v32);
  if (v18 < v19)
  {
    dispatch thunk of RawRepresentable.rawValue.getter(&v32, a2, v10);
    v20 = v32;
    dispatch thunk of RawRepresentable.rawValue.getter(v29, a2, v10);
    v21 = v29[0];
    dispatch thunk of RawRepresentable.rawValue.getter(&v31, a2, v10);
    swift_bridgeObjectRelease(v31);
    dispatch thunk of RawRepresentable.rawValue.getter(&v30, a2, v10);
    v22 = v30;
    v23 = *(_QWORD *)(v30 + 16);
    swift_bridgeObjectRelease(v21);
    v24 = swift_bridgeObjectRelease(v22);
    v25 = *(_QWORD *)(v20 + 16);
    if (v25 < v23)
    {
      __break(1u);
    }
    else
    {
      v26 = (2 * v25) | 1;
      v27 = (void (*)(_QWORD *, _QWORD, __n128))(*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, __n128))(a3 + 24))(v29, a2, a3, v24);
      sub_1001A88E8(v20, v20 + 32, v23, v26);
      v28 = swift_bridgeObjectRelease(v20);
      v27(v29, 0, v28);
    }
  }
}

uint64_t ExtendableOptionSet.init(bitOffset:)(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  char v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t result;
  _QWORD *v9;

  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    v4 = a3;
    v3 = a2;
    v5 = a1;
    v7 = a1 >> 3;
    v6 = sub_1001A81F8(0, (a1 >> 3) + 1);
    result = swift_isUniquelyReferenced_nonNull_native(v6);
    if ((result & 1) != 0)
      goto LABEL_3;
  }
  result = (uint64_t)sub_1001A87B8(v6);
  v6 = (_QWORD *)result;
LABEL_3:
  if (v7 >= v6[2])
  {
    __break(1u);
  }
  else
  {
    *((_BYTE *)v6 + v7 + 32) |= 1 << (v5 & 7);
    v9 = v6;
    return dispatch thunk of OptionSet.init(rawValue:)(&v9, v3, *(_QWORD *)(v4 + 8));
  }
  return result;
}

uint64_t static OptionSet<>.withValue<A>(_:at:withBitCount:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v16;
  uint64_t AssociatedTypeWitness;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  BOOL v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t result;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(char *, uint64_t, uint64_t);
  char v45;
  uint64_t v46;
  void (*v47)(char *, uint64_t);
  char *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  char *v55;
  char v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  unint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  char *v69;
  char v70;
  char *v71;
  char *v72;
  uint64_t v73;
  char *v74;
  unint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  uint64_t v81;
  unint64_t v82;
  char *v83;
  char *v84;
  char v85;
  uint64_t v86;
  unint64_t v87;
  char *v88;
  unint64_t v89;
  char *v90;
  char *v91;
  char v92;
  char *v93;
  char *v94;
  uint64_t v95;
  uint64_t AssociatedConformanceWitness;
  uint64_t v97;
  char *v98;
  char *v99;
  char *v100;
  int64_t v101;
  uint64_t v102;
  BOOL v103;
  uint64_t v104;
  void (*v105)(char *, uint64_t, uint64_t);
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  char *v110;
  char *v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  char *v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  int64_t v127;

  v10 = v9;
  v125 = a1;
  v117 = a9;
  v119 = a6;
  v16 = *(_QWORD *)(a6 + 8);
  v118 = a4;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v16, a4, &protocol requirements base descriptor for RawRepresentable);
  __chkstk_darwin();
  v116 = (char *)&v104 - v18;
  v19 = *(_QWORD **)(a7 + 8);
  v109 = *(_QWORD *)(v19[3] + 16);
  swift_getAssociatedTypeWitness(0, v109, a5, &protocol requirements base descriptor for ExpressibleByIntegerLiteral);
  __chkstk_darwin();
  v122 = *(_QWORD *)(a5 - 8);
  __chkstk_darwin();
  v111 = (char *)&v104 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  __chkstk_darwin();
  __chkstk_darwin();
  v123 = (char *)&v104 - v21;
  __chkstk_darwin();
  v121 = (char *)&v104 - v22;
  __chkstk_darwin();
  v124 = (char *)&v104 - v23;
  __chkstk_darwin();
  v112 = (char *)&v104 - v24;
  __chkstk_darwin();
  v26 = (char *)&v104 - v25;
  v27 = __chkstk_darwin();
  v33 = (char *)&v104 - v32;
  v120 = a2;
  v34 = __OFADD__(a2, a3);
  v35 = a2 + a3;
  if (v34)
  {
    __break(1u);
LABEL_67:
    __break(1u);
    goto LABEL_68;
  }
  v106 = v31;
  v107 = v27;
  v108 = v30;
  v110 = v29;
  v113 = v9;
  v114 = AssociatedTypeWitness;
  v115 = a8;
  if (dispatch thunk of static FixedWidthInteger.bitWidth.getter(AssociatedTypeWitness, a8) < v35)
  {
LABEL_3:
    v36 = sub_100012C84();
    v37 = swift_allocError(&type metadata for WiFiError, v36, 0, 0);
    *(_QWORD *)v38 = 0;
    *(_QWORD *)(v38 + 8) = 0;
    *(_BYTE *)(v38 + 16) = 2;
    return swift_willThrow(v37);
  }
  if (a3 < 0)
    goto LABEL_67;
  v40 = 0;
  if (a3)
  {
    v41 = 0;
    v42 = v125;
    while (1)
    {
      if (v41 <= 0x3F)
        v40 |= 1 << v41;
      if (a3 - 1 == v41)
        break;
      if (a3 == ++v41)
      {
        __break(1u);
        goto LABEL_12;
      }
    }
  }
  else
  {
LABEL_12:
    v42 = v125;
  }
  v43 = v122;
  v44 = *(void (**)(char *, uint64_t, uint64_t))(v122 + 16);
  v44(v33, v42, a5);
  v45 = dispatch thunk of static BinaryInteger.isSigned.getter(a5, v19);
  v44(v26, (uint64_t)v33, a5);
  v105 = v44;
  if ((v45 & 1) == 0)
  {
    v47 = *(void (**)(char *, uint64_t))(v43 + 8);
    v53 = v26;
    goto LABEL_19;
  }
  v46 = dispatch thunk of BinaryInteger.bitWidth.getter(a5, v19);
  v47 = *(void (**)(char *, uint64_t))(v43 + 8);
  v47(v26, a5);
  if (v46 <= 64)
    goto LABEL_20;
  v48 = v112;
  v44(v112, (uint64_t)v33, a5);
  v127 = 0x8000000000000000;
  if ((dispatch thunk of static BinaryInteger.isSigned.getter(a5, v19) & 1) != 0)
  {
    if (dispatch thunk of BinaryInteger.bitWidth.getter(a5, v19) >= 64)
    {
      v89 = sub_100035EE0();
      v90 = v124;
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(&v127, &type metadata for Int, v89, a5, v19);
      v91 = v48;
      v92 = dispatch thunk of static Comparable.< infix(_:_:)(v48, v90, a5, *(_QWORD *)(v19[4] + 8));
      v93 = v90;
      v44 = v105;
      v47(v93, a5);
      v47(v91, a5);
      if ((v92 & 1) != 0)
        goto LABEL_61;
      goto LABEL_20;
    }
    v49 = dispatch thunk of BinaryInteger._lowWord.getter(a5, v19);
    v50 = v48;
    v51 = v49;
    v52 = v50;
LABEL_60:
    v47(v52, a5);
    if (v51 < v127)
      goto LABEL_61;
LABEL_20:
    v54 = dispatch thunk of BinaryInteger.bitWidth.getter(a5, v19);
    v55 = v121;
    v44(v121, (uint64_t)v33, a5);
    if (v54 < 65)
    {
      v62 = dispatch thunk of BinaryInteger.bitWidth.getter(a5, v19);
      v47(v55, a5);
      if (v62 != 64 || (dispatch thunk of static BinaryInteger.isSigned.getter(a5, v19) & 1) != 0)
      {
LABEL_32:
        v66 = dispatch thunk of BinaryInteger._lowWord.getter(a5, v19);
        v47(v33, a5);
        v10 = v66 & v40;
        LOBYTE(v66) = dispatch thunk of static BinaryInteger.isSigned.getter(a5, v19);
        v67 = dispatch thunk of BinaryInteger.bitWidth.getter(a5, v19);
        if ((v66 & 1) != 0)
        {
          if (v67 > 64)
          {
            v127 = v10;
            v68 = sub_100035EE0();
            v69 = v124;
            dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(&v127, &type metadata for Int, v68, a5, v19);
            v70 = dispatch thunk of static Equatable.== infix(_:_:)(v69, v42, a5, *(_QWORD *)(v19[2] + 8));
            v71 = v69;
            goto LABEL_40;
          }
        }
        else if (v67 > 63)
        {
          v127 = v10;
          v74 = v111;
          v105(v111, v42, a5);
          if (v10 < 0)
          {
            v47(v74, a5);
            goto LABEL_3;
          }
          v75 = sub_100035EE0();
          v76 = v124;
          dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(&v127, &type metadata for Int, v75, a5, v19);
          v70 = dispatch thunk of static Equatable.== infix(_:_:)(v76, v74, a5, *(_QWORD *)(v19[2] + 8));
          v47(v76, a5);
          v71 = v74;
LABEL_40:
          v47(v71, a5);
          if ((v70 & 1) == 0)
            goto LABEL_3;
LABEL_41:
          v28 = v120;
          if (v120 <= -65)
            goto LABEL_42;
          v79 = v114;
          v78 = v115;
          if (v120 > 64)
          {
            v77 = 0;
            goto LABEL_53;
          }
          if ((v120 & 0x8000000000000000) == 0)
          {
            v77 = v10 << v120;
            if ((unint64_t)v120 >= 0x40)
              v77 = 0;
            goto LABEL_53;
          }
LABEL_69:
          if (v28 > 0xFFFFFFFFFFFFFFC0)
          {
            v77 = v10 >> -(char)v120;
            goto LABEL_43;
          }
LABEL_42:
          v77 = v10 >> 63;
LABEL_43:
          v79 = v114;
          v78 = v115;
LABEL_53:
          v127 = v77;
          v86 = *(_QWORD *)(v78 + 8);
          v87 = sub_100035EE0();
          v88 = v116;
          dispatch thunk of BinaryInteger.init<A>(_:)(&v127, &type metadata for Int, v87, v79, v86);
          return dispatch thunk of OptionSet.init(rawValue:)(v88, v118, v119);
        }
        v72 = v124;
        v105(v124, v42, a5);
        v73 = dispatch thunk of BinaryInteger._lowWord.getter(a5, v19);
        v47(v72, a5);
        if (v10 != v73)
          goto LABEL_3;
        goto LABEL_41;
      }
    }
    else
    {
      v47(v55, a5);
    }
    v44(v123, (uint64_t)v33, a5);
    v127 = 0x7FFFFFFFFFFFFFFFLL;
    v56 = dispatch thunk of static BinaryInteger.isSigned.getter(a5, v19);
    v57 = dispatch thunk of BinaryInteger.bitWidth.getter(a5, v19);
    if ((v56 & 1) != 0)
    {
      if (v57 > 64)
      {
        v58 = sub_100035EE0();
        v10 = (uint64_t)v124;
        dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(&v127, &type metadata for Int, v58, a5, v19);
        v59 = v123;
        v60 = dispatch thunk of static Comparable.< infix(_:_:)(v10, v123, a5, *(_QWORD *)(v19[4] + 8));
        v47((char *)v10, a5);
        v61 = (uint64_t)v59;
        goto LABEL_31;
      }
    }
    else if (v57 > 63)
    {
      v126 = 0x7FFFFFFFFFFFFFFFLL;
      v10 = (uint64_t)v124;
      (*(void (**)(char *, char *, uint64_t))(v122 + 32))(v124, v123, a5);
      v64 = sub_100035EE0();
      v65 = v110;
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(&v126, &type metadata for Int, v64, a5, v19);
      v60 = dispatch thunk of static Comparable.< infix(_:_:)(v65, v10, a5, *(_QWORD *)(v19[4] + 8));
      v47(v65, a5);
      v61 = v10;
LABEL_31:
      v47((char *)v61, a5);
      v42 = v125;
      if ((v60 & 1) == 0)
        goto LABEL_32;
LABEL_68:
      __break(1u);
      goto LABEL_69;
    }
    v63 = v123;
    dispatch thunk of BinaryInteger._lowWord.getter(a5, v19);
    v47(v63, a5);
    v42 = v125;
    goto LABEL_32;
  }
  v80 = dispatch thunk of static BinaryInteger.isSigned.getter(a5, v19);
  v81 = dispatch thunk of BinaryInteger.bitWidth.getter(a5, v19);
  if ((v80 & 1) == 0)
  {
    if (v81 < 64)
    {
      v94 = v112;
      v51 = dispatch thunk of BinaryInteger._lowWord.getter(a5, v19);
      v52 = v94;
      goto LABEL_60;
    }
    v53 = v112;
LABEL_19:
    v47(v53, a5);
    goto LABEL_20;
  }
  if (v81 <= 64)
    goto LABEL_62;
  v82 = sub_100035EE0();
  v83 = v124;
  dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(&v127, &type metadata for Int, v82, a5, v19);
  v84 = v112;
  v85 = dispatch thunk of static Comparable.< infix(_:_:)(v112, v83, a5, *(_QWORD *)(v19[4] + 8));
  v47(v83, a5);
  v47(v84, a5);
  v44 = v105;
  if ((v85 & 1) == 0)
    goto LABEL_20;
LABEL_61:
  while (1)
  {
    __break(1u);
LABEL_62:
    v95 = v107;
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v109, a5, v107, &protocol requirements base descriptor for ExpressibleByIntegerLiteral, &associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
    v97 = v106;
    dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)(&unk_10033A248, 256, v95, AssociatedConformanceWitness);
    v98 = v124;
    dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)(v97, a5, v109);
    v99 = v112;
    LODWORD(v109) = dispatch thunk of static Comparable.< infix(_:_:)(v112, v98, a5, *(_QWORD *)(v19[4] + 8));
    v47(v98, a5);
    v100 = v108;
    (*(void (**)(char *, char *, uint64_t))(v122 + 32))(v108, v99, a5);
    if ((v109 & 1) != 0)
      break;
    v101 = v127;
    v102 = dispatch thunk of BinaryInteger._lowWord.getter(a5, v19);
    v47(v100, a5);
    v103 = v102 < v101;
    v44 = v105;
    if (!v103)
      goto LABEL_20;
  }
  result = ((uint64_t (*)(char *, uint64_t))v47)(v100, a5);
  __break(1u);
  return result;
}

uint64_t static OptionSet<>.withValue<A>(_:at:withBitCount:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v20 = a5;
  v21 = a7;
  v18 = a2;
  v19 = a3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a6, a4, &protocol requirements base descriptor for RawRepresentable);
  v14 = *(_QWORD *)(AssociatedTypeWitness - 8);
  __chkstk_darwin();
  v16 = (char *)&v18 - v15;
  dispatch thunk of RawRepresentable.rawValue.getter((uint64_t *)((char *)&v18 - v15), a4, a6);
  static OptionSet<>.withValue<A>(_:at:withBitCount:)((uint64_t)v16, a1, v18, v19, AssociatedTypeWitness, v20, a9, v21, a8);
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, AssociatedTypeWitness);
}

uint64_t static OptionSet<>.withBool(_:at:)@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  unint64_t v11;
  uint64_t v13;

  v13 = a1 & 1;
  v11 = sub_1000CB880();
  return static OptionSet<>.withValue<A>(_:at:withBitCount:)((uint64_t)&v13, a2, 1, a3, (uint64_t)&type metadata for Int, a4, v11, a5, a6);
}

void sub_1001A7444(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  char v15;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = sub_1000B192C(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = (unint64_t)&v3[2 * v8 + 4];
  if (a1 + 32 < v9 + 16 * v2 && v9 < a1 + 32 + 16 * v2)
    goto LABEL_24;
  swift_arrayInitWithCopy(v9);
  if (!v2)
  {
LABEL_19:
    swift_bridgeObjectRelease(a1);
    *v1 = v3;
    return;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  v15 = 2;
  _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, v15, 1092, 0);
  __break(1u);
}

void sub_1001A7594(uint64_t a1)
{
  _QWORD *v1;
  int64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  char *v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  char v15;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = sub_1000B1920(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = (char *)v3 + v8 + 32;
  if (a1 + 32 < (unint64_t)&v9[v2] && (unint64_t)v9 < a1 + 32 + v2)
    goto LABEL_24;
  memcpy(v9, (const void *)(a1 + 32), v2);
  if (!v2)
  {
LABEL_19:
    swift_bridgeObjectRelease(a1);
    *v1 = v3;
    return;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  v15 = 2;
  _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, v15, 1092, 0);
  __break(1u);
}

void sub_1001A76D8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  char v15;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = sub_1000B1E74(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = &v3[v8 + 4];
  if (a1 + 32 < (unint64_t)&v9[v2] && (unint64_t)v9 < a1 + 32 + 8 * v2)
    goto LABEL_24;
  memcpy(v9, (const void *)(a1 + 32), 8 * v2);
  if (!v2)
  {
LABEL_19:
    swift_bridgeObjectRelease(a1);
    *v1 = v3;
    return;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  v15 = 2;
  _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, v15, 1092, 0);
  __break(1u);
}

void sub_1001A781C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  char v15;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = sub_1000B2B6C(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = (unint64_t)&v3[2 * v8 + 4];
  if (a1 + 32 < v9 + 16 * v2 && v9 < a1 + 32 + 16 * v2)
    goto LABEL_24;
  swift_arrayInitWithCopy(v9);
  if (!v2)
  {
LABEL_19:
    swift_bridgeObjectRelease(a1);
    *v1 = v3;
    return;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  v15 = 2;
  _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, v15, 1092, 0);
  __break(1u);
}

void *Dictionary<>.serializeForCoreAnalytics()(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t WitnessTable;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  _QWORD *v11;
  _QWORD v13[7];
  void *v14;

  v14 = a1;
  v13[2] = a2;
  v13[3] = a3;
  v13[4] = a4;
  v13[5] = a5;
  v5 = type metadata accessor for Dictionary(0, a2, a3, a4);
  v6 = sub_100012C44(&qword_1004061B8);
  WitnessTable = swift_getWitnessTable((const char *)&protocol conformance descriptor for [A : B], v5);
  v8 = Sequence.compactMap<A>(_:)(sub_1001A8A7C, v13, v5, v6, WitnessTable);
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    sub_100012C44(&qword_100408FE8);
    v10 = (void *)static _DictionaryStorage.allocate(capacity:)(v9);
  }
  else
  {
    v10 = &_swiftEmptyDictionarySingleton;
  }
  v14 = v10;
  v11 = (_QWORD *)swift_bridgeObjectRetain(v8);
  sub_10015DA04(v11, 1, &v14);
  swift_bridgeObjectRelease(v8);
  return v14;
}

void *Dictionary<>.serializeForCoreAnalytics()(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t WitnessTable;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  _QWORD *v8;
  _QWORD v10[5];
  void *v11;

  v11 = a1;
  v10[2] = a2;
  v2 = type metadata accessor for Dictionary(0, &type metadata for String, a2, &protocol witness table for String);
  v3 = sub_100012C44(&qword_1004061B8);
  WitnessTable = swift_getWitnessTable((const char *)&protocol conformance descriptor for [A : B], v2);
  v5 = Sequence.compactMap<A>(_:)(sub_1001A8A98, v10, v2, v3, WitnessTable);
  v6 = *(_QWORD *)(v5 + 16);
  if (v6)
  {
    sub_100012C44(&qword_100408FE8);
    v7 = (void *)static _DictionaryStorage.allocate(capacity:)(v6);
  }
  else
  {
    v7 = &_swiftEmptyDictionarySingleton;
  }
  v11 = v7;
  v8 = (_QWORD *)swift_bridgeObjectRetain(v5);
  sub_10015DA04(v8, 1, &v11);
  swift_bridgeObjectRelease(v5);
  return v11;
}

_QWORD *sub_1001A7B7C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, _QWORD *a5@<X8>)
{
  uint64_t TupleTypeMetadata2;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t, uint64_t);
  void (*v19)(char *, uint64_t, uint64_t);
  unint64_t v20;
  uint64_t v21;
  _QWORD *result;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _QWORD *v26;
  void (*v27)(char *, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD v33[2];

  v30 = a4;
  v32 = a5;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, a2, a3, "key value ", 0);
  v29 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  __chkstk_darwin();
  v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin();
  v13 = (char *)&v27 - v12;
  v14 = *(int *)(v11 + 48);
  v15 = (char *)&v27 + v14 - v12;
  v16 = a1 + v14;
  v17 = *(_QWORD *)(a2 - 8);
  v18 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 16);
  v31 = a1;
  v27 = v18;
  v18((char *)&v27 - v12, a1, a2);
  v19 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 16);
  v28 = v16;
  v19(v15, v16, a3);
  v20 = sub_100032C0C();
  if ((swift_dynamicCast(v33, v15, a3, v20, 6) & 1) != 0)
  {
    v21 = v33[0];
    (*(void (**)(char *, uint64_t))(v17 + 8))(v13, a2);
    result = dispatch thunk of RawRepresentable.rawValue.getter(v33, a2, v30);
    v23 = v33[0];
    v24 = v33[1];
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v17 + 8))(v13, a2);
    v25 = &v10[*(int *)(TupleTypeMetadata2 + 48)];
    v27(v10, v31, a2);
    v19(v25, v28, a3);
    result = (_QWORD *)(*(uint64_t (**)(char *, uint64_t))(v29 + 8))(v10, TupleTypeMetadata2);
    v23 = 0;
    v24 = 0;
    v21 = 0;
  }
  v26 = v32;
  *v32 = v23;
  v26[1] = v24;
  v26[2] = v21;
  return result;
}

uint64_t sub_1001A7D3C@<X0>(char *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t TupleTypeMetadata2;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, char *, uint64_t);
  unint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(char *, uint64_t);
  uint64_t result;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(_QWORD *, uint64_t);
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;

  v30 = a3;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, &type metadata for String, a2, "key value ", 0);
  v6 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  __chkstk_darwin();
  v8 = (_QWORD **)((char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = __chkstk_darwin();
  v11 = (_QWORD **)((char *)&v30 - v10);
  v12 = *(int *)(v9 + 48);
  v13 = (char *)&v30 + v12 - v10;
  v14 = &a1[v12];
  v15 = *((_QWORD *)a1 + 1);
  *v11 = *(_QWORD *)a1;
  v11[1] = v15;
  v16 = *(_QWORD *)(a2 - 8);
  v17 = *(void (**)(char *, char *, uint64_t))(v16 + 16);
  v17(v13, &a1[v12], a2);
  v18 = sub_100032C0C();
  if ((swift_dynamicCast(&v31, v13, a2, v18, 6) & 1) != 0)
  {
    v19 = v31;
    v20 = (char *)v8 + *(int *)(TupleTypeMetadata2 + 48);
    v22 = *(_QWORD *)a1;
    v21 = *((_QWORD *)a1 + 1);
    *v8 = v22;
    v8[1] = v21;
    v17(v20, v14, a2);
    v23 = *(uint64_t (**)(char *, uint64_t))(v16 + 8);
    swift_bridgeObjectRetain(v21);
    result = v23(v20, a2);
  }
  else
  {
    v25 = (char *)v8 + *(int *)(TupleTypeMetadata2 + 48);
    v26 = *(_QWORD *)a1;
    v27 = *((_QWORD *)a1 + 1);
    *v8 = v26;
    v8[1] = v27;
    v17(v25, v14, a2);
    v28 = *(uint64_t (**)(_QWORD *, uint64_t))(v6 + 8);
    swift_bridgeObjectRetain(v27);
    result = v28(v8, TupleTypeMetadata2);
    v22 = 0;
    v21 = 0;
    v19 = 0;
  }
  v29 = v30;
  *v30 = v22;
  v29[1] = v21;
  v29[2] = v19;
  return result;
}

uint64_t sub_1001A7ED0(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t (*a4)(_BYTE *, _QWORD), uint64_t *a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t *v7;
  __n128 v11;
  uint64_t *v12;
  uint64_t result;
  _BYTE v14[32];
  uint64_t v15;

  v6 = a6;
  v7 = a5;
  dispatch thunk of RawRepresentable.rawValue.getter(&v15, a5, *(_QWORD *)(*(_QWORD *)(a6 + 8) + 8));
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (*(_QWORD *)(v15 + 16) <= a2)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  LOBYTE(a2) = *(_BYTE *)(v15 + a2 + 32);
  v11 = swift_bridgeObjectRelease(v15);
  a4 = (uint64_t (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *, uint64_t *, uint64_t, __n128))(v6 + 24))(v14, v7, v6, v11);
  v7 = v12;
  v6 = *v12;
  result = swift_isUniquelyReferenced_nonNull_native(*v12);
  *v7 = v6;
  if ((result & 1) != 0)
  {
    if ((a1 & 0x8000000000000000) == 0)
      goto LABEL_5;
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
LABEL_9:
  result = (uint64_t)sub_1001A87B8((_QWORD *)v6);
  v6 = result;
  *v7 = result;
  if ((a1 & 0x8000000000000000) != 0)
    goto LABEL_10;
LABEL_5:
  if (*(_QWORD *)(v6 + 16) > a1)
  {
    *(_BYTE *)(v6 + a1 + 32) |= a2;
    return a4(v14, 0);
  }
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1001A7FD0(unint64_t result)
{
  uint64_t v1;
  unint64_t v2;
  BOOL v3;

  if (result)
  {
    if ((result & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else
    {
      v2 = *(_QWORD *)(*(_QWORD *)v1 + 16);
      v3 = v2 >= result;
      result = v2 - result;
      if (v3)
        return (unint64_t)sub_1001EA84C(result, v2);
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_1001A7FF8(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t (*a4)(_BYTE *, _QWORD), uint64_t *a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v11;
  uint64_t result;
  _BYTE v13[32];
  uint64_t v14;

  v6 = a6;
  v7 = a5;
  dispatch thunk of RawRepresentable.rawValue.getter(&v14, a5, *(_QWORD *)(*(_QWORD *)(a6 + 8) + 8));
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (*(_QWORD *)(v14 + 16) <= a2)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  LOBYTE(a2) = *(_BYTE *)(v14 + a2 + 32);
  swift_bridgeObjectRelease(v14);
  a4 = (uint64_t (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *, uint64_t *, uint64_t))(v6 + 24))(v13, v7, v6);
  v7 = v11;
  v6 = *v11;
  result = swift_isUniquelyReferenced_nonNull_native(*v11);
  *v7 = v6;
  if ((result & 1) != 0)
  {
    if ((a1 & 0x8000000000000000) == 0)
      goto LABEL_5;
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
LABEL_9:
  result = (uint64_t)sub_1001A87B8((_QWORD *)v6);
  v6 = result;
  *v7 = result;
  if ((a1 & 0x8000000000000000) != 0)
    goto LABEL_10;
LABEL_5:
  if (*(_QWORD *)(v6 + 16) > a1)
  {
    *(_BYTE *)(v6 + a1 + 32) &= a2;
    return a4(v13, 0);
  }
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1001A80F8(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD *, _QWORD), uint64_t *a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t *v7;
  __n128 v11;
  uint64_t *v12;
  uint64_t result;
  _QWORD v14[4];

  v6 = a6;
  v7 = a5;
  dispatch thunk of RawRepresentable.rawValue.getter(v14, a5, *(_QWORD *)(*(_QWORD *)(a6 + 8) + 8));
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (*(_QWORD *)(v14[0] + 16) <= a2)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  LOBYTE(a2) = *(_BYTE *)(v14[0] + a2 + 32);
  v11 = swift_bridgeObjectRelease(v14[0]);
  a4 = (uint64_t (*)(_QWORD *, _QWORD))(*(uint64_t (**)(_QWORD *, uint64_t *, uint64_t, __n128))(v6 + 24))(v14, v7, v6, v11);
  v7 = v12;
  v6 = *v12;
  result = swift_isUniquelyReferenced_nonNull_native(*v12);
  *v7 = v6;
  if ((result & 1) != 0)
  {
    if ((a1 & 0x8000000000000000) == 0)
      goto LABEL_5;
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
LABEL_9:
  result = (uint64_t)sub_1001A87B8((_QWORD *)v6);
  v6 = result;
  *v7 = result;
  if ((a1 & 0x8000000000000000) != 0)
    goto LABEL_10;
LABEL_5:
  if (*(_QWORD *)(v6 + 16) > a1)
  {
    *(_BYTE *)(v6 + a1 + 32) &= ~(_BYTE)a2;
    return a4(v14, 0);
  }
LABEL_11:
  __break(1u);
  return result;
}

_QWORD *sub_1001A81F8(int a1, size_t a2)
{
  uint64_t v4;
  _QWORD *result;

  if ((a2 & 0x8000000000000000) != 0)
  {
    result = (_QWORD *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
    __break(1u);
  }
  else
  {
    if (!a2)
      return _swiftEmptyArrayStorage;
    v4 = static Array._allocateBufferUninitialized(minimumCapacity:)(a2, &type metadata for UInt8);
    *(_QWORD *)(v4 + 16) = a2;
    memset((void *)(v4 + 32), a1, a2);
    return (_QWORD *)v4;
  }
  return result;
}

uint64_t ExtendableOptionSet.init<A>(bitOffset:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t, uint64_t);
  uint64_t v21;
  void (*v22)(char *, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t AssociatedConformanceWitness;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  void (*v39)(char *, uint64_t, uint64_t);
  void (*v40)(char *, uint64_t);
  unint64_t v41;
  char *v42;
  unint64_t v43;
  unint64_t v44;
  char v45;
  uint64_t result;
  char *v47;
  unint64_t v48;
  void (*v49)(char *, uint64_t);
  _QWORD v50[2];
  uint64_t AssociatedTypeWitness;
  char *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  v7 = v6;
  v56 = a2;
  v57 = a4;
  v55 = a6;
  v10 = *(_QWORD *)(a5 + 8);
  v53 = *(_QWORD *)(*(_QWORD *)(v10 + 24) + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v53, a3, &protocol requirements base descriptor for ExpressibleByIntegerLiteral);
  __chkstk_darwin();
  v52 = (char *)v50 - v11;
  __chkstk_darwin();
  v13 = (char *)v50 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v54 = (char *)v50 - v14;
  __chkstk_darwin();
  v16 = (char *)v50 - v15;
  __chkstk_darwin();
  v18 = (char *)v50 - v17;
  v58 = a1;
  v59 = v19;
  v20 = *(void (**)(char *, uint64_t, uint64_t))(v19 + 16);
  v20((char *)v50 - v17, a1, a3);
  if ((dispatch thunk of static BinaryInteger.isSigned.getter(a3, v10) & 1) != 0)
  {
    v21 = v10;
    v22 = v20;
    v23 = v7;
    v24 = v53;
    v25 = AssociatedTypeWitness;
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v53, a3, AssociatedTypeWitness, &protocol requirements base descriptor for ExpressibleByIntegerLiteral, &associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
    v27 = v16;
    v28 = v52;
    dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)(&unk_10033A248, 256, v25, AssociatedConformanceWitness);
    v29 = v28;
    v16 = v27;
    v30 = v24;
    v7 = v23;
    v20 = v22;
    v10 = v21;
    dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)(v29, a3, v30);
    LOBYTE(v25) = dispatch thunk of static Comparable.>= infix(_:_:)(v18, v27, a3, *(_QWORD *)(*(_QWORD *)(v21 + 32) + 8));
    (*(void (**)(char *, uint64_t))(v59 + 8))(v27, a3);
    if ((v25 & 1) == 0)
    {
      result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
      goto LABEL_17;
    }
  }
  if (dispatch thunk of BinaryInteger.bitWidth.getter(a3, v10) < 64)
    goto LABEL_15;
  v50[0] = v13;
  v50[1] = v7;
  v20(v54, (uint64_t)v18, a3);
  v60 = -1;
  v31 = dispatch thunk of static BinaryInteger.isSigned.getter(a3, v10);
  v32 = dispatch thunk of BinaryInteger.bitWidth.getter(a3, v10);
  if ((v31 & 1) == 0)
  {
    if (v32 >= 65)
      goto LABEL_10;
    v47 = v54;
    dispatch thunk of BinaryInteger._lowWord.getter(a3, v10);
    (*(void (**)(char *, uint64_t))(v59 + 8))(v47, a3);
LABEL_15:
    v48 = dispatch thunk of BinaryInteger._lowWord.getter(a3, v10);
    v49 = *(void (**)(char *, uint64_t))(v59 + 8);
    v49(v18, a3);
    ExtendableOptionSet.init(bitOffset:)(v48, v56, v57);
    return ((uint64_t (*)(uint64_t, uint64_t))v49)(v58, a3);
  }
  if (v32 <= 64)
  {
    v33 = v53;
    v34 = AssociatedTypeWitness;
    v35 = swift_getAssociatedConformanceWitness(v53, a3, AssociatedTypeWitness, &protocol requirements base descriptor for ExpressibleByIntegerLiteral, &associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
    v36 = v16;
    v37 = v52;
    dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)(&unk_10033A248, 256, v34, v35);
    dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)(v37, a3, v33);
    v38 = v54;
    LOBYTE(v34) = dispatch thunk of static Comparable.> infix(_:_:)(v54, v36, a3, *(_QWORD *)(*(_QWORD *)(v10 + 32) + 8));
    v39 = v20;
    v40 = *(void (**)(char *, uint64_t))(v59 + 8);
    v40(v36, a3);
    v41 = v60;
    v42 = (char *)v50[0];
    v39((char *)v50[0], (uint64_t)v38, a3);
    if ((v34 & 1) != 0)
    {
      v43 = dispatch thunk of BinaryInteger._lowWord.getter(a3, v10);
      v40(v42, a3);
      if (v41 < v43)
        goto LABEL_11;
    }
    else
    {
      v40(v42, a3);
    }
    goto LABEL_14;
  }
LABEL_10:
  v44 = sub_100164234();
  dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(&v60, &type metadata for UInt64, v44, a3, v10);
  v38 = v54;
  v45 = dispatch thunk of static Comparable.< infix(_:_:)(v16, v54, a3, *(_QWORD *)(*(_QWORD *)(v10 + 32) + 8));
  v40 = *(void (**)(char *, uint64_t))(v59 + 8);
  v40(v16, a3);
  if ((v45 & 1) == 0)
  {
LABEL_14:
    v40(v38, a3);
    goto LABEL_15;
  }
LABEL_11:
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 3455, 0);
LABEL_17:
  __break(1u);
  return result;
}

_QWORD *sub_1001A8790(_QWORD *a1)
{
  return sub_1000B192C(0, a1[2], 0, a1);
}

_QWORD *sub_1001A87A4(_QWORD *a1)
{
  return sub_1000B208C(0, a1[2], 0, a1);
}

_QWORD *sub_1001A87B8(_QWORD *a1)
{
  return sub_1000B1920(0, a1[2], 0, a1);
}

_QWORD *sub_1001A87CC(_QWORD *a1)
{
  return sub_1000B2834(0, a1[2], 0, a1);
}

_QWORD *sub_1001A87E0(_QWORD *a1)
{
  return sub_1000B2B6C(0, a1[2], 0, a1);
}

_QWORD *sub_1001A87F4(_QWORD *a1)
{
  return sub_1000B2C78(0, a1[2], 0, a1);
}

uint64_t sub_1001A8808(unint64_t a1)
{
  return sub_1000B30D8(0, *(_QWORD *)(a1 + 16), 0, a1);
}

uint64_t sub_1001A881C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v10;

  if (result != a2)
  {
    v6 = result;
    if (a2 < result)
    {
LABEL_15:
      __break(1u);
      goto LABEL_16;
    }
    if (result >= a2)
    {
LABEL_16:
      __break(1u);
      goto LABEL_17;
    }
    v8 = a3;
    if (a3 != a4)
    {
      if (a4 < a3)
      {
LABEL_17:
        __break(1u);
        return result;
      }
      v10 = result + 1;
      while (v8 < a4)
      {
        result = a5(v10 - 1, v8);
        if (a2 == v10)
          return result;
        if (v10 < v6 || v10 >= a2)
          goto LABEL_14;
        ++v8;
        ++v10;
        if (a4 == v8)
          return result;
      }
      __break(1u);
LABEL_14:
      __break(1u);
      goto LABEL_15;
    }
  }
  return result;
}

_QWORD *sub_1001A88E8(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v4;
  unint64_t v5;
  int64_t v6;
  _QWORD *v7;
  int64_t v8;
  int64_t v9;
  _QWORD *result;
  int64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;

  v5 = a4 >> 1;
  v6 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
    goto LABEL_24;
  }
  v7 = (_QWORD *)*v4;
  v8 = *(_QWORD *)(*v4 + 16);
  v9 = v8 + v6;
  if (__OFADD__(v8, v6))
  {
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  result = (_QWORD *)swift_isUniquelyReferenced_nonNull_native(*v4);
  if (!(_DWORD)result || v9 > v7[3] >> 1)
    goto LABEL_8;
  if (v5 == a3)
  {
    while (v6 > 0)
    {
      __break(1u);
LABEL_8:
      if (v8 <= v9)
        v13 = v8 + v6;
      else
        v13 = v8;
      result = sub_1000B1920(result, v13, 1, v7);
      v7 = result;
      if (v5 != a3)
        goto LABEL_12;
    }
    goto LABEL_22;
  }
LABEL_12:
  v14 = v7[2];
  if ((v7[3] >> 1) - v14 < v6)
    goto LABEL_25;
  if (v6 < 0)
  {
LABEL_27:
    result = (_QWORD *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_28;
  }
  v15 = (char *)v7 + v14 + 32;
  if (a2 + a3 >= (unint64_t)&v15[v6] || (unint64_t)v15 >= a2 + a3 + v6)
  {
    result = memcpy(v15, (const void *)(a2 + a3), v6);
    if (!v6)
    {
LABEL_22:
      *v4 = v7;
      return result;
    }
    v17 = v7[2];
    v18 = __OFADD__(v17, v6);
    v19 = v17 + v6;
    if (!v18)
    {
      v7[2] = v19;
      goto LABEL_22;
    }
    goto LABEL_26;
  }
  result = (_QWORD *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_28:
  __break(1u);
  return result;
}

_QWORD *sub_1001A8A7C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v2;

  return sub_1001A7B7C(a1, v2[2], v2[3], v2[5], a2);
}

uint64_t sub_1001A8A98@<X0>(char *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return sub_1001A7D3C(a1, *(_QWORD *)(v2 + 16), a2);
}

void *InfraStatistics.none.unsafeMutableAddressor()
{
  return &static InfraStatistics.none;
}

uint64_t TrafficClass.description.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1001A8AF4 + 4 * byte_100351B60[a1]))(0x756F72676B636142, 0xEA0000000000646ELL);
}

uint64_t sub_1001A8AF4()
{
  return 0x6666452074736542;
}

uint64_t sub_1001A8B14()
{
  return 0x6563696F56;
}

uint64_t sub_1001A8B28()
{
  return 0x6F65646956;
}

_UNKNOWN **static TrafficClass.allCases.getter()
{
  return &off_1003D72D8;
}

uint64_t TrafficClass.rawValue.getter(char a1)
{
  return *(_QWORD *)&aBk_0[8 * a1];
}

uint64_t sub_1001A8B64(char *a1, char *a2)
{
  return sub_10003C404(*a1, *a2);
}

unint64_t sub_1001A8B70@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = _s7CoreP2P12TrafficClassO8rawValueACSgSS_tcfC_0(*a1);
  *a2 = result;
  return result;
}

void sub_1001A8B9C(_QWORD *a1@<X8>)
{
  char *v1;

  *a1 = *(_QWORD *)&aBk_0[8 * *v1];
  a1[1] = 0xE200000000000000;
}

Swift::Int sub_1001A8BB8()
{
  char *v0;
  uint64_t v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  String.hash(into:)(v3, *(_QWORD *)&aBk_0[8 * v1], 0xE200000000000000);
  swift_bridgeObjectRelease(0xE200000000000000);
  return Hasher._finalize()();
}

uint64_t sub_1001A8C10(uint64_t a1)
{
  char *v1;

  String.hash(into:)(a1, *(_QWORD *)&aBk_0[8 * *v1], 0xE200000000000000);
  return swift_bridgeObjectRelease(0xE200000000000000);
}

Swift::Int sub_1001A8C3C()
{
  char *v0;
  uint64_t v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  String.hash(into:)(v3, *(_QWORD *)&aBk_0[8 * v1], 0xE200000000000000);
  swift_bridgeObjectRelease(0xE200000000000000);
  return Hasher._finalize()();
}

void sub_1001A8C90(_QWORD *a1@<X8>)
{
  *a1 = &off_1003D7300;
}

uint64_t sub_1001A8CA0()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1001A8CD4 + 4 * byte_100351B64[*v0]))(0x756F72676B636142, 0xEA0000000000646ELL);
}

uint64_t sub_1001A8CD4()
{
  return 0x6666452074736542;
}

uint64_t sub_1001A8CF4()
{
  return 0x6563696F56;
}

uint64_t sub_1001A8D08()
{
  return 0x6F65646956;
}

uint64_t sub_1001A8D1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1001A9A48();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1001A8D78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1001A9A48();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t TrafficType.description.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1001A8DF0 + 4 * byte_100351B68[a1]))(1701736270, 0xE400000000000000);
}

uint64_t sub_1001A8DF0()
{
  return 0x6D6974206C616552;
}

uint64_t sub_1001A8E10()
{
  return 0x6E696D6165727453;
}

uint64_t sub_1001A8E30()
{
  return 0x746164206B6C7542;
}

_UNKNOWN **static TrafficType.allCases.getter()
{
  return &off_1003D7328;
}

void sub_1001A8E58(_QWORD *a1@<X8>)
{
  *a1 = &off_1003D7350;
}

uint64_t sub_1001A8E68()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1001A8E90 + 4 * byte_100351B6C[*v0]))(1701736270, 0xE400000000000000);
}

uint64_t sub_1001A8E90()
{
  return 0x6D6974206C616552;
}

uint64_t sub_1001A8EB0()
{
  return 0x6E696D6165727453;
}

uint64_t sub_1001A8ED0()
{
  return 0x746164206B6C7542;
}

uint64_t TrafficState.description.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1001A8F18 + 4 * byte_100351B70[a1]))(1701602377, 0xE400000000000000);
}

uint64_t sub_1001A8F18()
{
  return 0x6D6974206C616552;
}

uint64_t sub_1001A8F38()
{
  return 0x6E696D6165727453;
}

uint64_t sub_1001A8F58()
{
  return 0x746164206B6C7542;
}

uint64_t sub_1001A8F74()
{
  return 0x697469736E617254;
}

_UNKNOWN **static TrafficState.allCases.getter()
{
  return &off_1003D7378;
}

void sub_1001A8FA4(_QWORD *a1@<X8>)
{
  *a1 = &off_1003D73A0;
}

uint64_t sub_1001A8FB4()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1001A8FDC + 4 * byte_100351B75[*v0]))(1701602377, 0xE400000000000000);
}

uint64_t sub_1001A8FDC()
{
  return 0x6D6974206C616552;
}

uint64_t sub_1001A8FFC()
{
  return 0x6E696D6165727453;
}

uint64_t sub_1001A901C()
{
  return 0x746164206B6C7542;
}

uint64_t sub_1001A9038()
{
  return 0x697469736E617254;
}

double InfrastructureQualityOfService.availabilityPercentage.getter(char a1)
{
  return dbl_1003521D8[a1];
}

uint64_t InfrastructureQualityOfService.description.getter(char a1)
{
  Swift::String v2;
  Swift::String v3;
  void *object;
  Swift::String v5;
  Swift::String v6;
  _QWORD v8[2];

  v8[0] = 0;
  v8[1] = 0xE000000000000000;
  v2._countAndFlagsBits = 0x2072656954;
  v2._object = (void *)0xE500000000000000;
  String.append(_:)(v2);
  v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  object = v3._object;
  String.append(_:)(v3);
  swift_bridgeObjectRelease(object);
  v5._countAndFlagsBits = 10272;
  v5._object = (void *)0xE200000000000000;
  String.append(_:)(v5);
  Double.write<A>(to:)(v8, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, dbl_1003521D8[a1]);
  v6._countAndFlagsBits = 10533;
  v6._object = (void *)0xE200000000000000;
  String.append(_:)(v6);
  return v8[0];
}

BOOL static InfrastructureQualityOfService.> infix(_:_:)(unsigned __int8 a1, unsigned __int8 a2)
{
  return a2 < a1;
}

Swift::Int sub_1001A9154()
{
  unsigned __int8 *v0;
  uint64_t v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(v1 + 1);
  return Hasher._finalize()();
}

void sub_1001A9198()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0 + 1);
}

Swift::Int sub_1001A91C4()
{
  unsigned __int8 *v0;
  uint64_t v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(v1 + 1);
  return Hasher._finalize()();
}

uint64_t sub_1001A9204@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = _s7CoreP2P30InfrastructureQualityOfServiceO8rawValueACSgSi_tcfC_0(*a1);
  *a2 = result;
  return result;
}

void sub_1001A922C(_QWORD *a1@<X8>)
{
  unsigned __int8 *v1;

  *a1 = *v1 + 1;
}

uint64_t sub_1001A923C()
{
  char *v0;

  return InfrastructureQualityOfService.description.getter(*v0);
}

double NANQualityOfService.availabilityPercentage.getter(char a1)
{
  return dbl_100352220[a1];
}

void NANQualityOfService.description.getter(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1001A9294()
{
  char v0;
  Swift::String v1;
  Swift::String v2;
  void *object;
  Swift::String v4;
  Swift::String v5;
  _QWORD v7[8];

  v7[0] = 0;
  v7[1] = 0xE000000000000000;
  v1._countAndFlagsBits = 0x2072656954;
  v1._object = (void *)0xE500000000000000;
  String.append(_:)(v1);
  v2._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  object = v2._object;
  String.append(_:)(v2);
  swift_bridgeObjectRelease(object);
  v4._countAndFlagsBits = 10272;
  v4._object = (void *)0xE200000000000000;
  String.append(_:)(v4);
  Double.write<A>(to:)(v7, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, dbl_1003521F8[v0]);
  v5._countAndFlagsBits = 10533;
  v5._object = (void *)0xE200000000000000;
  String.append(_:)(v5);
  return v7[0];
}

void sub_1001A9360()
{
  Swift::String v0;

  v0._countAndFlagsBits = 0x656D69546C616552;
  v0._object = (void *)0xEA00000000002820;
  String.append(_:)(v0);
  JUMPOUT(0x1001A9330);
}

BOOL static NANQualityOfService.< infix(_:_:)(char a1, char a2)
{
  return dbl_100352220[a1] < dbl_100352220[a2];
}

_UNKNOWN **static NANQualityOfService.allCases.getter()
{
  return &off_1003D73C8;
}

void sub_1001A93D4(_QWORD *a1@<X8>)
{
  *a1 = &off_1003D73C8;
}

void sub_1001A93E4()
{
  char *v0;

  NANQualityOfService.description.getter(*v0);
}

BOOL sub_1001A93EC(char *a1, char *a2)
{
  return dbl_100352220[*a1] < dbl_100352220[*a2];
}

BOOL sub_1001A9410(char *a1, char *a2)
{
  return dbl_100352220[*a2] >= dbl_100352220[*a1];
}

BOOL sub_1001A9434(char *a1, char *a2)
{
  return dbl_100352220[*a1] >= dbl_100352220[*a2];
}

BOOL sub_1001A9458(char *a1, char *a2)
{
  return dbl_100352220[*a2] < dbl_100352220[*a1];
}

void *InfraStatistics.infraRealtimePacketThreshold.unsafeMutableAddressor()
{
  return &static InfraStatistics.infraRealtimePacketThreshold;
}

void *InfraStatistics.infraStreamingPacketLengthThreshold.unsafeMutableAddressor()
{
  return &static InfraStatistics.infraStreamingPacketLengthThreshold;
}

uint64_t static InfraStatistics.infraStreamingPacketLengthThreshold.getter()
{
  return 1400;
}

void *InfraStatistics.infraEstimatedOverhead.unsafeMutableAddressor()
{
  return &static InfraStatistics.infraEstimatedOverhead;
}

double static InfraStatistics.infraEstimatedOverhead.getter()
{
  return 0.7;
}

void *InfraStatistics.infra5GHzBulkDataUtilizationThreshold.unsafeMutableAddressor()
{
  return &static InfraStatistics.infra5GHzBulkDataUtilizationThreshold;
}

double static InfraStatistics.infra5GHzBulkDataUtilizationThreshold.getter()
{
  return 0.8;
}

void *InfraStatistics.infra2_4GHzBulkDataUtilizationThreshold.unsafeMutableAddressor()
{
  return &static InfraStatistics.infra2_4GHzBulkDataUtilizationThreshold;
}

double static InfraStatistics.infra2_4GHzBulkDataUtilizationThreshold.getter()
{
  return 0.5;
}

unint64_t _s7CoreP2P12TrafficClassO8rawValueACSgSS_tcfC_0(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1003D51F0, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 4)
    return 4;
  else
    return v3;
}

uint64_t _s7CoreP2P30InfrastructureQualityOfServiceO8rawValueACSgSi_tcfC_0(unint64_t a1)
{
  if (a1 >= 5)
    return 4;
  else
    return (0x302010004uLL >> (8 * a1));
}

unint64_t sub_1001A9554()
{
  unint64_t result;

  result = qword_10040A458;
  if (!qword_10040A458)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for TrafficClass, &type metadata for TrafficClass);
    atomic_store(result, (unint64_t *)&qword_10040A458);
  }
  return result;
}

uint64_t sub_1001A9598()
{
  return sub_100066494(&qword_10040A460, &qword_10040A468);
}

unint64_t sub_1001A95C0()
{
  unint64_t result;

  result = qword_10040A470;
  if (!qword_10040A470)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for TrafficType, &type metadata for TrafficType);
    atomic_store(result, (unint64_t *)&qword_10040A470);
  }
  return result;
}

uint64_t sub_1001A9604()
{
  return sub_100066494(&qword_10040A478, &qword_10040A480);
}

unint64_t sub_1001A962C()
{
  unint64_t result;

  result = qword_10040A488;
  if (!qword_10040A488)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for TrafficState, &type metadata for TrafficState);
    atomic_store(result, (unint64_t *)&qword_10040A488);
  }
  return result;
}

uint64_t sub_1001A9670()
{
  return sub_100066494(&qword_10040A490, &qword_10040A498);
}

unint64_t sub_1001A9698()
{
  unint64_t result;

  result = qword_10040A4A0;
  if (!qword_10040A4A0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for InfrastructureQualityOfService, &type metadata for InfrastructureQualityOfService);
    atomic_store(result, (unint64_t *)&qword_10040A4A0);
  }
  return result;
}

unint64_t sub_1001A96E0()
{
  unint64_t result;

  result = qword_10040A4A8;
  if (!qword_10040A4A8)
  {
    result = swift_getWitnessTable("Ѡ\t", &type metadata for NANQualityOfService);
    atomic_store(result, (unint64_t *)&qword_10040A4A8);
  }
  return result;
}

uint64_t sub_1001A9724()
{
  return sub_100066494(&qword_10040A4B0, &qword_10040A4B8);
}

ValueMetadata *type metadata accessor for TrafficClass()
{
  return &type metadata for TrafficClass;
}

ValueMetadata *type metadata accessor for TrafficType()
{
  return &type metadata for TrafficType;
}

uint64_t storeEnumTagSinglePayload for TrafficState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1001A97B8 + 4 * byte_100351B85[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1001A97EC + 4 * byte_100351B80[v4]))();
}

uint64_t sub_1001A97EC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001A97F4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001A97FCLL);
  return result;
}

uint64_t sub_1001A9808(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001A9810);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1001A9814(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001A981C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TrafficState()
{
  return &type metadata for TrafficState;
}

uint64_t _s7CoreP2P12TrafficClassOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1001A9884 + 4 * byte_100351B8F[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1001A98B8 + 4 * byte_100351B8A[v4]))();
}

uint64_t sub_1001A98B8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001A98C0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001A98C8);
  return result;
}

uint64_t sub_1001A98D4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001A98DCLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1001A98E0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001A98E8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for InfrastructureQualityOfService()
{
  return &type metadata for InfrastructureQualityOfService;
}

uint64_t storeEnumTagSinglePayload for NANQualityOfService(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_1001A9950 + 4 * byte_100351B99[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1001A9984 + 4 * byte_100351B94[v4]))();
}

uint64_t sub_1001A9984(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001A998C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001A9994);
  return result;
}

uint64_t sub_1001A99A0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001A99A8);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_1001A99AC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001A99B4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NANQualityOfService()
{
  return &type metadata for NANQualityOfService;
}

uint64_t getEnumTagSinglePayload for InfraStatistics(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 112))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for InfraStatistics(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 112) = v3;
  return result;
}

ValueMetadata *type metadata accessor for InfraStatistics()
{
  return &type metadata for InfraStatistics;
}

unint64_t sub_1001A9A48()
{
  unint64_t result;

  result = qword_10040A4C0;
  if (!qword_10040A4C0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for TrafficClass, &type metadata for TrafficClass);
    atomic_store(result, (unint64_t *)&qword_10040A4C0);
  }
  return result;
}

void *NANAttribute.DeviceCapability.OperationMode.vht.unsafeMutableAddressor()
{
  return &static NANAttribute.DeviceCapability.OperationMode.vht;
}

CoreP2P::NANAttribute::DeviceCapability::AnntenaCount __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> NANAttribute.DeviceCapability.AnntenaCount.init(txAnntenaCount:rxAnntenaCount:)(Swift::Int txAnntenaCount, Swift::Int rxAnntenaCount)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t inited;
  char v7;
  unsigned __int8 v8;
  char v10;
  unsigned __int8 v11;
  _BYTE v12[40];

  v5 = sub_100012C44(&qword_1004048C0);
  inited = swift_initStackObject(v5, v12);
  *(_QWORD *)(inited + 24) = 4;
  v7 = sub_1001AA4A8(txAnntenaCount, 0, 4);
  if (v2)
  {
    *(_QWORD *)(inited + 16) = 0;
    swift_release(inited);
  }
  else
  {
    *(_BYTE *)(inited + 32) = v7;
    v8 = sub_1001AA4A8(rxAnntenaCount, 4, 4);
    *(_BYTE *)(inited + 33) = v8;
    v10 = *(_BYTE *)(inited + 32);
    if ((v8 & ~v10) != 0)
      v11 = v8;
    else
      v11 = 0;
    LOBYTE(rxAnntenaCount) = v11 | v10;
    swift_setDeallocating(inited);
  }
  return (CoreP2P::NANAttribute::DeviceCapability::AnntenaCount)rxAnntenaCount;
}

void *NANAttribute.CustomDeviceInformation.Version.latest.unsafeMutableAddressor()
{
  return &static NANAttribute.CustomDeviceInformation.Version.latest;
}

_QWORD *sub_1001A9B6C(__int16 a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unsigned int v17;
  unsigned __int8 v18;
  int v19;
  uint64_t v20;
  char v21;
  char v22;

  v3 = v2;
  v4 = (HIBYTE(a1) - a1);
  v17 = HIBYTE(a1);
  v18 = a1;
  if (HIBYTE(a1) < a1)
    v5 = -(uint64_t)(a1 - HIBYTE(a1));
  else
    v5 = (HIBYTE(a1) - a1);
  if (!v5)
    return _swiftEmptyArrayStorage;
  result = (_QWORD *)sub_100074EE4(0, v5 & ~(v5 >> 63), 0);
  if ((v5 & 0x8000000000000000) == 0)
  {
    LODWORD(v7) = v17 - v18;
    if (v17 >= v18)
      v7 = v7;
    else
      v7 = 0;
    v8 = -v7;
    while (v5)
    {
      v9 = *(_QWORD *)(a2 + 24);
      v10 = *(_QWORD *)(a2 + 32);
      sub_100034C68(a2, v9);
      v11 = sub_1001EE448();
      result = (_QWORD *)UnkeyedDecodingContainer.inferredDecode<A>()(v9, (uint64_t)&type metadata for NANAttribute.FineTimingMeasurementRangeReport.Entry, v10, v11);
      if (v3)
      {
        swift_release(_swiftEmptyArrayStorage);
        return _swiftEmptyArrayStorage;
      }
      v12 = v22;
      v14 = _swiftEmptyArrayStorage[2];
      v13 = _swiftEmptyArrayStorage[3];
      if (v14 >= v13 >> 1)
      {
        result = (_QWORD *)sub_100074EE4(v13 > 1, v14 + 1, 1);
        v12 = v22;
      }
      _swiftEmptyArrayStorage[2] = v14 + 1;
      v15 = &_swiftEmptyArrayStorage[2 * v14];
      *((_DWORD *)v15 + 8) = v19;
      *(_QWORD *)((char *)v15 + 36) = v20;
      *((_BYTE *)v15 + 44) = v21;
      *((_BYTE *)v15 + 45) = v12;
      if (v17 < v18)
        goto LABEL_21;
      if (!v8)
        goto LABEL_22;
      ++v8;
      --v5;
      --v4;
      v3 = 0;
      if (!v4)
        return _swiftEmptyArrayStorage;
    }
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
  }
  __break(1u);
  return result;
}

void sub_1001A9D18(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3);
  __asm { BR              X10 }
}

Swift::Int sub_1001A9D6C()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0xD000000000000010, 0x8000000100361FA0);
  swift_bridgeObjectRelease(0x8000000100361FA0);
  return Hasher._finalize()();
}

void sub_1001A9E1C(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3);
  __asm { BR              X10 }
}

Swift::Int sub_1001A9E68()
{
  uint64_t v0;
  uint64_t v2;

  String.hash(into:)(&v2, 0x6172666E49796DLL, v0);
  swift_bridgeObjectRelease(v0);
  return Hasher._finalize()();
}

Swift::Int sub_1001A9F1C(uint64_t a1, uint64_t a2)
{
  Swift::UInt v3;
  Swift::UInt8 *v4;
  Swift::UInt8 v5;
  _QWORD v7[9];

  Hasher.init(_seed:)(v7);
  v3 = *(_QWORD *)(a2 + 16);
  Hasher._combine(_:)(v3);
  if (v3)
  {
    v4 = (Swift::UInt8 *)(a2 + 32);
    do
    {
      v5 = *v4++;
      Hasher._combine(_:)(v5);
      --v3;
    }
    while (v3);
  }
  return Hasher._finalize()();
}

BOOL sub_1001A9F84(unint64_t a1, __int16 a2, unint64_t a3, __int16 a4)
{
  _BOOL8 result;

  if ((a2 & 0x100) == 0)
    return (a4 & 0x100) == 0 && a1 == a3;
  result = 0;
  if ((a4 & 0x100) != 0
    && a1 == a3
    && WORD1(a1) == WORD1(a3)
    && BYTE4(a1) == BYTE4(a3))
  {
    if ((a2 & 1) != 0)
    {
      if ((a4 & 1) != 0)
        return 1;
    }
    else if ((a4 & 1) == 0 && HIWORD(a1) == HIWORD(a3))
    {
      return 1;
    }
    return 0;
  }
  return result;
}

uint64_t sub_1001AA014(uint64_t a1)
{
  return sub_1001AA03C(a1, (uint64_t (*)(uint64_t, uint64_t))sub_1001EE1C8, (uint64_t (*)(uint64_t, uint64_t))sub_1001EEFB8);
}

uint64_t sub_1001AA028(uint64_t a1)
{
  return sub_1001AA03C(a1, (uint64_t (*)(uint64_t, uint64_t))sub_1001EEFBC, (uint64_t (*)(uint64_t, uint64_t))sub_1001EEFB8);
}

uint64_t sub_1001AA03C(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t), uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v7 = *v3;
  v10 = *v3;
  swift_bridgeObjectRetain(*v3);
  sub_1001AA120(a1, a2);
  v8 = v10;
  if ((sub_1000851D0(v10, _swiftEmptyArrayStorage) & 1) != 0)
  {
    swift_bridgeObjectRelease(v10);
    return 0;
  }
  else
  {
    swift_bridgeObjectRetain(v7);
    sub_10009B5F4(a1, a3);
    sub_1001AA120(v7, a2);
    swift_bridgeObjectRelease(v7);
  }
  return v8;
}

uint64_t sub_1001AA108(uint64_t a1)
{
  return sub_1001AA120(a1, (uint64_t (*)(uint64_t, uint64_t))sub_1001EE1C8);
}

uint64_t sub_1001AA114(uint64_t a1)
{
  return sub_1001AA120(a1, (uint64_t (*)(uint64_t, uint64_t))sub_1001EEFBC);
}

uint64_t sub_1001AA120(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t))
{
  uint64_t v2;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(*(_QWORD *)v2 + 16);
  v5 = *(_QWORD *)(a1 + 16);
  if (v4 > v5)
    sub_1001A7FD0(v4 - v5);
  __chkstk_darwin();
  return sub_1001A881C(0, v6, 0, v5, a2);
}

double sub_1001AA1B4(uint64_t a1)
{
  return sub_10009B5F4(a1, (uint64_t (*)(uint64_t, uint64_t))sub_1001EEFB8);
}

uint64_t sub_1001AA1C4(unint64_t a1)
{
  char v1;
  _QWORD *v2;
  unint64_t v3;
  uint64_t result;

  if ((a1 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    v1 = a1;
    v3 = a1 >> 3;
    v2 = sub_1001A81F8(0, (a1 >> 3) + 1);
    result = swift_isUniquelyReferenced_nonNull_native(v2);
    if ((result & 1) != 0)
      goto LABEL_3;
  }
  result = (uint64_t)sub_1001A87B8(v2);
  v2 = (_QWORD *)result;
LABEL_3:
  if (v3 >= v2[2])
  {
    __break(1u);
  }
  else
  {
    *((_BYTE *)v2 + v3 + 32) |= 1 << (v1 & 7);
    return (uint64_t)v2;
  }
  return result;
}

uint64_t NANAttribute.CustomDeviceInformation.CustomAttributes.init()@<X0>(uint64_t a1@<X8>)
{
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  *(_WORD *)a1 = 0;
  *(_BYTE *)(a1 + 2) = 1;
  v2 = (int *)type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
  v3 = a1 + v2[6];
  v4 = type metadata accessor for P256.KeyAgreement.PublicKey(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  *(_OWORD *)(a1 + v2[7]) = xmmword_10033C6E0;
  *(_OWORD *)(a1 + v2[8]) = xmmword_10033C6E0;
  *(_OWORD *)(a1 + v2[9]) = xmmword_10033C6E0;
  v5 = a1 + v2[10];
  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
  *(_QWORD *)(a1 + v2[11]) = _swiftEmptyArrayStorage;
  v7 = a1 + v2[12];
  v8 = type metadata accessor for NANInternetSharingStatistics.Requester(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
  v10 = a1 + v2[13];
  *(_QWORD *)v10 = 0;
  *(_QWORD *)(v10 + 8) = 0;
  *(_QWORD *)(v10 + 16) = 0;
  *(_BYTE *)(v10 + 24) = 1;
  return result;
}

void *NANAttribute.CustomDeviceInformation.Flags.furtherServiceDiscoveryFollowUp.unsafeMutableAddressor()
{
  return &static NANAttribute.CustomDeviceInformation.Flags.furtherServiceDiscoveryFollowUp;
}

uint64_t sub_1001AA35C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001AA4A8(a1, a2, a3);
}

unint64_t sub_1001AA370(unsigned __int8 a1, unint64_t a2, uint64_t a3)
{
  return sub_1001AA700(a1, a2, a3);
}

unint64_t sub_1001AA384(unsigned __int8 a1, unint64_t a2, uint64_t a3)
{
  return sub_1001AA5F8(a1, a2, a3);
}

unint64_t sub_1001AA398(unint64_t result, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (__OFADD__(a2, a3))
    goto LABEL_22;
  if ((uint64_t)(a2 + a3) > 16)
    goto LABEL_15;
  if (a3 < 0)
    goto LABEL_23;
  v3 = 0;
  if (a3)
  {
    v4 = 0;
    while (1)
    {
      if (v4 < 0x40)
        v3 |= 1 << v4;
      if (a3 - 1 == v4)
        break;
      if (a3 == ++v4)
      {
        __break(1u);
        break;
      }
    }
  }
  if ((result & 0x8000000000000000) != 0)
    goto LABEL_24;
  if ((result & ~v3) != 0)
  {
LABEL_15:
    v5 = sub_100012C84();
    v6 = swift_allocError(&type metadata for WiFiError, v5, 0, 0);
    *(_QWORD *)v7 = 0;
    *(_QWORD *)(v7 + 8) = 0;
    *(_BYTE *)(v7 + 16) = 2;
    return swift_willThrow(v6);
  }
  else
  {
    if (a2 - 65 < 0xFFFFFFFFFFFFFF7FLL)
      return 0;
    if ((a2 & 0x8000000000000000) != 0)
      goto LABEL_26;
    if (a2 >= 0x40)
      return 0;
    result <<= a2;
    if ((result & 0x8000000000000000) != 0)
      goto LABEL_25;
    if (result >> 16)
    {
      while (1)
      {
        __break(1u);
LABEL_22:
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
LABEL_25:
        __break(1u);
LABEL_26:
        if (a2 <= 0xFFFFFFFFFFFFFFC0)
          break;
        result >>= -(char)a2;
        if (!(result >> 16))
          return result;
      }
      return 0;
    }
  }
  return result;
}

uint64_t sub_1001AA4A8(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  if (__OFADD__(a2, a3))
    goto LABEL_31;
  if (a2 + a3 > 8)
    goto LABEL_18;
  if (a3 < 0)
    goto LABEL_32;
  if (a3)
  {
    v3 = 0;
    v4 = 0;
    while (1)
    {
      if (v4 < 0x40)
        v3 |= 1 << v4;
      if (a3 - 1 == v4)
        break;
      if (a3 == ++v4)
      {
        __break(1u);
        break;
      }
    }
    if ((result & ~v3) == 0)
    {
      if (a2 <= -65)
        goto LABEL_22;
      if (a2 > 64)
        return 0;
      if (a2 < 0)
        goto LABEL_33;
      if ((unint64_t)a2 >= 0x40)
        return 0;
      goto LABEL_28;
    }
    goto LABEL_18;
  }
  if (result)
  {
LABEL_18:
    v5 = sub_100012C84();
    v6 = swift_allocError(&type metadata for WiFiError, v5, 0, 0);
    *(_QWORD *)v7 = 0;
    *(_QWORD *)(v7 + 8) = 0;
    *(_BYTE *)(v7 + 16) = 2;
    swift_willThrow(v6);
    return v8;
  }
  if (a2 < -64)
  {
    result = 0;
    goto LABEL_22;
  }
  if (a2 > 64)
    return 0;
  v8 = 0;
  result = 0;
  if (a2 < 0)
  {
    if ((unint64_t)a2 > 0xFFFFFFFFFFFFFFC0)
      goto LABEL_36;
    return v8;
  }
  if ((unint64_t)a2 >= 0x40)
    return v8;
LABEL_28:
  v8 = result << a2;
  if (((result << a2) & 0x8000000000000000) == 0)
  {
    while (v8 > 0xFF)
    {
      __break(1u);
LABEL_31:
      __break(1u);
LABEL_32:
      __break(1u);
LABEL_33:
      if ((unint64_t)a2 > 0xFFFFFFFFFFFFFFC0)
      {
LABEL_36:
        v8 = result >> -(char)a2;
        if ((v8 & 0x8000000000000000) != 0)
          goto LABEL_37;
      }
      else
      {
LABEL_22:
        v8 = result >> 63;
        if (result >> 63 < 0)
          goto LABEL_37;
      }
    }
    return v8;
  }
LABEL_37:
  __break(1u);
  return result;
}

unint64_t sub_1001AA5F8(unsigned __int8 a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t result;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (__OFADD__(a2, a3))
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if ((uint64_t)(a2 + a3) > 16)
    goto LABEL_14;
  if (a3 < 0)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v4 = 0;
  if (a3)
  {
    v5 = 0;
    while (1)
    {
      if (v5 < 0x40)
        v4 |= 1 << v5;
      if (a3 - 1 == v5)
        break;
      if (a3 == ++v5)
      {
        __break(1u);
        break;
      }
    }
  }
  v3 = a1;
  if ((~(_BYTE)v4 & a1) != 0)
  {
LABEL_14:
    v7 = sub_100012C84();
    v8 = swift_allocError(&type metadata for WiFiError, v7, 0, 0);
    *(_QWORD *)v9 = 0;
    *(_QWORD *)(v9 + 8) = 0;
    *(_BYTE *)(v9 + 16) = 2;
    return swift_willThrow(v8);
  }
  if (a2 - 65 < 0xFFFFFFFFFFFFFF7FLL)
    return 0;
  if ((a2 & 0x8000000000000000) != 0)
    goto LABEL_24;
  if (a2 >= 0x40)
    return 0;
  result = (unint64_t)a1 << a2;
  if (((v3 << a2) & 0x8000000000000000) == 0)
  {
    if (!(result >> 16))
      return result;
    __break(1u);
    goto LABEL_21;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  if (a2 <= 0xFFFFFFFFFFFFFFC0)
    return 0;
  else
    return v3 >> -(char)a2;
}

unint64_t sub_1001AA700(unsigned __int8 a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t result;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (__OFADD__(a2, a3))
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if ((uint64_t)(a2 + a3) > 8)
    goto LABEL_14;
  if (a3 < 0)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v4 = 0;
  if (a3)
  {
    v5 = 0;
    while (1)
    {
      if (v5 < 0x40)
        v4 |= 1 << v5;
      if (a3 - 1 == v5)
        break;
      if (a3 == ++v5)
      {
        __break(1u);
        break;
      }
    }
  }
  v3 = a1;
  if ((~(_BYTE)v4 & a1) != 0)
  {
LABEL_14:
    v7 = sub_100012C84();
    v8 = swift_allocError(&type metadata for WiFiError, v7, 0, 0);
    *(_QWORD *)v9 = 0;
    *(_QWORD *)(v9 + 8) = 0;
    *(_BYTE *)(v9 + 16) = 2;
    return swift_willThrow(v8);
  }
  if (a2 - 65 < 0xFFFFFFFFFFFFFF7FLL)
    return 0;
  if ((a2 & 0x8000000000000000) != 0)
    goto LABEL_24;
  if (a2 >= 0x40)
    return 0;
  result = (unint64_t)a1 << a2;
  if (((v3 << a2) & 0x8000000000000000) == 0)
  {
    if (result <= 0xFF)
      return result;
    __break(1u);
    goto LABEL_21;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  if (a2 <= 0xFFFFFFFFFFFFFFC0)
    return 0;
  else
    return v3 >> -(char)a2;
}

unint64_t NANAttribute.Availability.Control.mapID.getter(__int16 a1)
{
  return sub_10007CCF8(0, 4, a1) & 0xF;
}

void *NANAttribute.Availability.Control.potentialChange.unsafeMutableAddressor()
{
  return &static NANAttribute.Availability.Control.potentialChange;
}

CoreP2P::NANAttribute::Availability::Control __swiftcall NANAttribute.Availability.Control.init(mapID:with:)(CoreP2P::NANMapID mapID, CoreP2P::NANAttribute::Availability::Control with)
{
  return (CoreP2P::NANAttribute::Availability::Control)(sub_1001AA5F8(mapID.rawValue, 0, 4) | with.rawValue & 0x3F0);
}

CoreP2P::NANAttribute::Availability __swiftcall NANAttribute.Availability.init(sequenceID:control:availabilityEntries:)(Swift::UInt8 sequenceID, CoreP2P::NANAttribute::Availability::Control control, Swift::OpaquePointer availabilityEntries)
{
  int v3;
  CoreP2P::NANAttribute::Availability result;

  v3 = sequenceID | (*(_DWORD *)&control << 16);
  result.availabilityEntries = availabilityEntries;
  result.sequenceID = v3;
  result.control = *(CoreP2P::NANAttribute::Availability::Control *)((char *)&v3 + 2);
  return result;
}

void *NANAttribute.Availability.Control.committedChange.unsafeMutableAddressor()
{
  return &static NANAttribute.Availability.Control.committedChange;
}

void sub_1001AA8F4()
{
  __asm { BR              X10 }
}

BOOL static NANAttribute.Cluster.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1001D1394(a1, a2 & 0xFFFFFFFF000000FFLL, a3, a4 & 0xFFFFFFFF000000FFLL);
}

uint64_t Array<A>.retrieve(attribute:)@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t result;
  uint64_t i;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v6 = *(_QWORD *)(type metadata accessor for NANAttribute(0) - 8);
  __chkstk_darwin();
  v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(a2 + 16);
  if (v11)
  {
    v19 = v7;
    v20 = a3;
    v12 = byte_10035BC32[a1];
    v13 = a2 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
    result = swift_bridgeObjectRetain(a2);
    for (i = 0; ; ++i)
    {
      v16 = i + 1;
      if (__OFADD__(i, 1))
        break;
      sub_1000637E0(v13 + *(_QWORD *)(v6 + 72) * i, (uint64_t)v10, type metadata accessor for NANAttribute);
      NANAttribute.attributeType.getter();
      if (byte_10035BC32[v17] == v12)
      {
        swift_bridgeObjectRelease(a2);
        a3 = v20;
        sub_100033AC0((uint64_t)v10, v20, type metadata accessor for NANAttribute);
        v18 = 0;
        v7 = v19;
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(v6 + 56))(a3, v18, 1, v7, v8);
      }
      result = sub_100063824((uint64_t)v10, type metadata accessor for NANAttribute);
      if (v16 == v11)
      {
        v8 = swift_bridgeObjectRelease(a2);
        v18 = 1;
        v7 = v19;
        a3 = v20;
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(v6 + 56))(a3, v18, 1, v7, v8);
      }
    }
    __break(1u);
  }
  else
  {
    v18 = 1;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(v6 + 56))(a3, v18, 1, v7, v8);
  }
  return result;
}

uint64_t NANAttribute.ServiceDescriptorExtension.Control.furtherServiceDiscoveryFunction.getter(unsigned int a1)
{
  if ((a1 & 1) != 0)
    return (a1 >> 1) & 1;
  else
    return 2;
}

uint64_t NANAttribute.ServiceDescriptorExtension.Control.datapathType.getter(unsigned int a1)
{
  if ((a1 & 4) != 0)
    return (a1 >> 3) & 1;
  else
    return 2;
}

void *NANAttribute.ServiceDescriptorExtension.Control.securityRequired.unsafeMutableAddressor()
{
  return &static NANAttribute.ServiceDescriptorExtension.Control.securityRequired;
}

void *NANAttribute.ServiceDescriptorExtension.Control.furtherServiceDiscoveryRequired.unsafeMutableAddressor()
{
  return &static NANAttribute.ServiceDescriptorExtension.Control.furtherServiceDiscoveryRequired;
}

void *NANAttribute.ServiceDescriptorExtension.Control.gasForFurtherServiceDiscovery.unsafeMutableAddressor()
{
  return &static NANAttribute.ServiceDescriptorExtension.Control.gasForFurtherServiceDiscovery;
}

void *NANAttribute.ServiceDescriptorExtension.Control.datapathRequired.unsafeMutableAddressor()
{
  return &static NANAttribute.ServiceDescriptorExtension.Control.datapathRequired;
}

void *NANAttribute.ServiceDescriptorExtension.Control.serviceUpdateIndicator.unsafeMutableAddressor()
{
  return &static NANAttribute.ServiceDescriptorExtension.Control.serviceUpdateIndicator;
}

_QWORD *sub_1001AAEC8(uint64_t a1)
{
  int64_t v1;
  _QWORD *v2;
  __int16 *v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  char v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  __int16 v17;
  char v18;
  uint64_t v19;
  _BYTE v20[8];
  uint64_t v21;
  _QWORD *v22;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    v22 = _swiftEmptyArrayStorage;
    sub_100074E90(0, v1, 0);
    v4 = (__int16 *)(a1 + 32);
    v2 = _swiftEmptyArrayStorage;
    do
    {
      v5 = *((_BYTE *)v4 + 2);
      v6 = *((_QWORD *)v4 + 1);
      v17 = *v4;
      v18 = v5;
      v19 = v6;
      swift_bridgeObjectRetain_n(v6, 2);
      v7 = sub_100012C44(&qword_100406918);
      v8 = sub_100012C44(&qword_100406220);
      swift_dynamicCast(v20, &v17, v7, v8, 7);
      v9 = v20[0];
      v10 = v20[1];
      v11 = v20[2];
      v12 = v21;
      swift_bridgeObjectRelease(v6);
      if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      {
        sub_100074E90(0, v2[2] + 1, 1);
        v2 = v22;
      }
      v14 = v2[2];
      v13 = v2[3];
      if (v14 >= v13 >> 1)
      {
        sub_100074E90(v13 > 1, v14 + 1, 1);
        v2 = v22;
      }
      v2[2] = v14 + 1;
      v15 = &v2[2 * v14];
      *((_BYTE *)v15 + 32) = v9;
      *((_BYTE *)v15 + 33) = v10;
      *((_BYTE *)v15 + 34) = v11;
      v15[5] = v12;
      v4 += 8;
      --v1;
    }
    while (v1);
  }
  return v2;
}

_QWORD *sub_1001AB034(uint64_t a1)
{
  int64_t v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _OWORD *v9;
  __int128 v10;
  __int128 v11;
  _BYTE v13[48];
  _OWORD v14[3];
  _QWORD *v15;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    v15 = _swiftEmptyArrayStorage;
    sub_1000751B0(0, v1, 0);
    v4 = a1 + 32;
    v2 = _swiftEmptyArrayStorage;
    do
    {
      sub_100033B48(v4, (uint64_t)v13, &qword_100404EE0);
      v5 = sub_100012C44(&qword_100404EE0);
      v6 = sub_100012C44(&qword_100406168);
      swift_dynamicCast(v14, v13, v5, v6, 7);
      if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      {
        sub_1000751B0(0, v2[2] + 1, 1);
        v2 = v15;
      }
      v8 = v2[2];
      v7 = v2[3];
      if (v8 >= v7 >> 1)
      {
        sub_1000751B0(v7 > 1, v8 + 1, 1);
        v2 = v15;
      }
      v2[2] = v8 + 1;
      v9 = &v2[6 * v8];
      v10 = v14[0];
      v11 = v14[2];
      v9[3] = v14[1];
      v9[4] = v11;
      v9[2] = v10;
      v4 += 48;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_1001AB178(unint64_t a1, unint64_t a2, _QWORD *a3, uint64_t a4)
{
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;
  char v7;
  uint64_t result;

  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (*(_QWORD *)(a4 + 16) <= a2)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v4 = a3;
  v5 = a1;
  v7 = *(_BYTE *)(a4 + a2 + 32);
  v6 = (_QWORD *)*a3;
  result = swift_isUniquelyReferenced_nonNull_native(*a3);
  *v4 = v6;
  if ((result & 1) != 0)
  {
    if ((v5 & 0x8000000000000000) == 0)
      goto LABEL_5;
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
LABEL_9:
  result = (uint64_t)sub_1001A87B8(v6);
  v6 = (_QWORD *)result;
  if ((v5 & 0x8000000000000000) != 0)
    goto LABEL_10;
LABEL_5:
  if (v6[2] > v5)
  {
    *((_BYTE *)v6 + v5 + 32) &= v7;
    *v4 = v6;
    return result;
  }
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1001AB210(unint64_t a1, unint64_t a2, _QWORD *a3, uint64_t a4)
{
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;
  char v7;
  uint64_t result;

  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (*(_QWORD *)(a4 + 16) <= a2)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v4 = a3;
  v5 = a1;
  v7 = *(_BYTE *)(a4 + a2 + 32);
  v6 = (_QWORD *)*a3;
  result = swift_isUniquelyReferenced_nonNull_native(*a3);
  *v4 = v6;
  if ((result & 1) != 0)
  {
    if ((v5 & 0x8000000000000000) == 0)
      goto LABEL_5;
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
LABEL_9:
  result = (uint64_t)sub_1001A87B8(v6);
  v6 = (_QWORD *)result;
  if ((v5 & 0x8000000000000000) != 0)
    goto LABEL_10;
LABEL_5:
  if (v6[2] > v5)
  {
    *((_BYTE *)v6 + v5 + 32) &= ~v7;
    *v4 = v6;
    return result;
  }
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1001AB2A8()
{
  _BYTE *v0;

  if (*v0)
    return 0x61466D6F646E6172;
  else
    return 0xD000000000000010;
}

uint64_t sub_1001AB2F0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1001EB4E8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1001AB314(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001D1494();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001AB33C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001D1494();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NANAttribute.MasterIndication.encode(to:)(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;
  char v14;
  char v15;

  v5 = sub_100012C44(&qword_10040A4D0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin();
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10003259C(a1, v9);
  v11 = sub_1001D1494();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for NANAttribute.MasterIndication.CodingKeys, &type metadata for NANAttribute.MasterIndication.CodingKeys, v11, v9, v10);
  v15 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(a2, &v15, v5);
  if (!v2)
  {
    v14 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(BYTE1(a2), &v14, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t NANAttribute.MasterIndication.init(from:)(_QWORD *a1)
{
  return sub_1001D5A10(a1);
}

uint64_t sub_1001AB48C@<X0>(_WORD *a1@<X8>)
{
  return sub_1001BD5B0((uint64_t (*)(void))sub_1001D5A10, a1);
}

uint64_t sub_1001AB4A8(_QWORD *a1)
{
  unsigned __int16 *v1;

  return NANAttribute.MasterIndication.encode(to:)(a1, *v1);
}

void NANAttribute.Cluster.hash(into:)(int a1, unint64_t a2, unint64_t a3)
{
  Swift::UInt8 v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v3 = a3;
  v4 = a2 >> 8;
  v5 = a2 >> 16;
  v6 = a2 >> 24;
  v7 = HIDWORD(a2);
  v8 = a2 >> 40;
  v9 = HIWORD(a2);
  v10 = HIBYTE(a2);
  v11 = HIDWORD(a3);
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v11);
}

unint64_t sub_1001AB570()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0x746E756F43706F68;
  if (*v0 != 1)
    v1 = 0xD000000000000022;
  if (*v0)
    return v1;
  else
    return 0xD000000000000010;
}

uint64_t sub_1001AB5D0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1001EB5EC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1001AB5F4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001D5B60();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001AB61C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001D5B60();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NANAttribute.Cluster.encode(to:)(_QWORD *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v16;
  char v17;
  char v18;
  char v19;
  uint64_t v20;

  v7 = sub_100012C44(&qword_10040A4E0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin();
  v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a1[3];
  v12 = a1[4];
  sub_10003259C(a1, v11);
  v13 = sub_1001D5B60();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for NANAttribute.Cluster.CodingKeys, &type metadata for NANAttribute.Cluster.CodingKeys, v13, v11, v12);
  v20 = a2;
  v19 = 0;
  v14 = sub_1001D5BA4();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v20, &v19, v7, &type metadata for NANMasterRank, v14);
  if (!v3)
  {
    v18 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(a3, &v18, v7);
    v17 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(HIDWORD(a3), &v17, v7);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

Swift::Int NANAttribute.Cluster.hashValue.getter(unint64_t a1, unint64_t a2)
{
  Swift::UInt8 v2;
  Swift::UInt8 v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  Swift::UInt32 v12[2];
  _QWORD v13[9];

  v2 = a2;
  v3 = a1;
  v4 = a1 >> 8;
  v5 = a1 >> 16;
  v6 = a1 >> 24;
  v7 = HIDWORD(a1);
  v8 = a1 >> 40;
  v9 = HIWORD(a1);
  v10 = HIBYTE(a1);
  *(_QWORD *)v12 = HIDWORD(a2);
  Hasher.init(_seed:)(v13);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v12[0]);
  return Hasher._finalize()();
}

unint64_t NANAttribute.Cluster.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  unint64_t result;
  uint64_t v3;

  result = sub_1001D7A40(a1);
  if (v1)
    return v3 & 0xFFFFFFFF000000FFLL;
  return result;
}

Swift::Int sub_1001AB8BC()
{
  uint64_t v0;
  Swift::UInt8 v1;
  Swift::UInt8 v2;
  Swift::UInt8 v3;
  Swift::UInt8 v4;
  Swift::UInt8 v5;
  Swift::UInt8 v6;
  Swift::UInt8 v7;
  Swift::UInt8 v8;
  Swift::UInt8 v9;
  Swift::UInt32 v11;
  _QWORD v12[9];

  v11 = *(_DWORD *)(v0 + 12);
  v1 = *(_BYTE *)v0;
  v2 = *(_BYTE *)(v0 + 1);
  v3 = *(_BYTE *)(v0 + 2);
  v4 = *(_BYTE *)(v0 + 3);
  v5 = *(_BYTE *)(v0 + 4);
  v6 = *(_BYTE *)(v0 + 5);
  v7 = *(_BYTE *)(v0 + 6);
  v8 = *(_BYTE *)(v0 + 7);
  v9 = *(_BYTE *)(v0 + 8);
  Hasher.init(_seed:)(v12);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v11);
  return Hasher._finalize()();
}

void sub_1001AB9B4()
{
  uint64_t v0;
  Swift::UInt8 v1;
  Swift::UInt8 v2;
  Swift::UInt8 v3;
  Swift::UInt8 v4;
  Swift::UInt8 v5;
  Swift::UInt8 v6;
  Swift::UInt8 v7;
  Swift::UInt8 v8;
  Swift::UInt32 v9;

  v9 = *(_DWORD *)(v0 + 12);
  v1 = *(_BYTE *)(v0 + 1);
  v2 = *(_BYTE *)(v0 + 2);
  v3 = *(_BYTE *)(v0 + 3);
  v4 = *(_BYTE *)(v0 + 4);
  v5 = *(_BYTE *)(v0 + 5);
  v6 = *(_BYTE *)(v0 + 6);
  v7 = *(_BYTE *)(v0 + 7);
  v8 = *(_BYTE *)(v0 + 8);
  Hasher._combine(_:)(*(_BYTE *)v0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
}

Swift::Int sub_1001ABA74()
{
  uint64_t v0;
  Swift::UInt8 v1;
  Swift::UInt8 v2;
  Swift::UInt8 v3;
  Swift::UInt8 v4;
  Swift::UInt8 v5;
  Swift::UInt8 v6;
  Swift::UInt8 v7;
  Swift::UInt8 v8;
  Swift::UInt8 v9;
  Swift::UInt32 v11;
  _QWORD v12[9];

  v11 = *(_DWORD *)(v0 + 12);
  v1 = *(_BYTE *)v0;
  v2 = *(_BYTE *)(v0 + 1);
  v3 = *(_BYTE *)(v0 + 2);
  v4 = *(_BYTE *)(v0 + 3);
  v5 = *(_BYTE *)(v0 + 4);
  v6 = *(_BYTE *)(v0 + 5);
  v7 = *(_BYTE *)(v0 + 6);
  v8 = *(_BYTE *)(v0 + 7);
  v9 = *(_BYTE *)(v0 + 8);
  Hasher.init(_seed:)(v12);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v11);
  return Hasher._finalize()();
}

uint64_t sub_1001ABB68@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v5;
  int v6;

  result = sub_1001D7A40(a1);
  if (!v2)
  {
    *(_QWORD *)a2 = result;
    *(_BYTE *)(a2 + 8) = v5;
    *(_DWORD *)(a2 + 12) = v6;
  }
  return result;
}

uint64_t sub_1001ABBD4(_QWORD *a1)
{
  uint64_t v1;

  return NANAttribute.Cluster.encode(to:)(a1, *(_QWORD *)v1, *(unsigned __int8 *)(v1 + 8) | ((unint64_t)*(unsigned int *)(v1 + 12) << 32));
}

BOOL sub_1001ABBF8(uint64_t a1, uint64_t a2)
{
  return sub_1001D1394(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8) | ((unint64_t)*(unsigned int *)(a1 + 12) << 32), *(_QWORD *)a2, *(unsigned __int8 *)(a2 + 8) | ((unint64_t)*(unsigned int *)(a2 + 12) << 32));
}

double NANAttribute.ServiceIDList.hash(into:)(uint64_t a1, uint64_t a2)
{
  Swift::UInt v4;
  double result;
  unint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  __n128 v9;

  v4 = *(_QWORD *)(a2 + 16);
  Hasher._combine(_:)(v4);
  if (v4)
  {
    swift_bridgeObjectRetain(a2);
    v6 = (unint64_t *)(a2 + 40);
    do
    {
      v7 = *(v6 - 1);
      v8 = *v6;
      sub_100031FEC(v7, *v6);
      Data.hash(into:)(a1, v7, v8, v9);
      sub_10000E614(v7, v8);
      v6 += 2;
      --v4;
    }
    while (v4);
    *(_QWORD *)&result = swift_bridgeObjectRelease(a2).n128_u64[0];
  }
  return result;
}

uint64_t sub_1001ABCC4()
{
  return 0x7365636976726573;
}

uint64_t sub_1001ABCDC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v6;
  uint64_t result;
  char v8;

  if (a1 == 0x7365636976726573 && a2 == 0xE800000000000000)
  {
    result = swift_bridgeObjectRelease(0xE800000000000000);
    v8 = 0;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x7365636976726573, 0xE800000000000000, a1, a2, 0);
    result = swift_bridgeObjectRelease(a2);
    v8 = v6 ^ 1;
  }
  *a3 = v8 & 1;
  return result;
}

uint64_t sub_1001ABD70(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001D7BD0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001ABD98(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001D7BD0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NANAttribute.ServiceIDList.encode(to:)(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v4 = sub_100012C44(&qword_10040A4F8);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin();
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a1[3];
  v9 = a1[4];
  sub_10003259C(a1, v8);
  v10 = sub_1001D7BD0();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for NANAttribute.ServiceIDList.CodingKeys, &type metadata for NANAttribute.ServiceIDList.CodingKeys, v10, v8, v9);
  v16 = a2;
  v11 = sub_100012C44(&qword_10040A508);
  v12 = sub_1000934A0(&qword_10040A510, &qword_10040A508, (uint64_t (*)(void))sub_1001D7C14, (const char *)&protocol conformance descriptor for <A> [A]);
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v16, v13, v4, v11, v12);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

Swift::Int NANAttribute.ServiceIDList.hashValue.getter(uint64_t a1)
{
  Swift::UInt v2;
  unint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  __n128 v6;
  _QWORD v8[9];

  Hasher.init(_seed:)(v8);
  v2 = *(_QWORD *)(a1 + 16);
  Hasher._combine(_:)(v2);
  if (v2)
  {
    swift_bridgeObjectRetain(a1);
    v3 = (unint64_t *)(a1 + 40);
    do
    {
      v4 = *(v3 - 1);
      v5 = *v3;
      sub_100031FEC(v4, *v3);
      Data.hash(into:)(v8, v4, v5, v6);
      sub_10000E614(v4, v5);
      v3 += 2;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease(a1);
  }
  return Hasher._finalize()();
}

_QWORD *NANAttribute.ServiceIDList.init(from:)(_QWORD *a1)
{
  return sub_1001D50E8(a1);
}

Swift::Int sub_1001ABFA0()
{
  uint64_t *v0;

  return NANAttribute.ServiceIDList.hashValue.getter(*v0);
}

double sub_1001ABFA8(uint64_t a1)
{
  uint64_t *v1;

  return NANAttribute.ServiceIDList.hash(into:)(a1, *v1);
}

Swift::Int sub_1001ABFB0()
{
  uint64_t *v0;
  uint64_t v1;
  Swift::UInt v2;
  unint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  __n128 v6;
  _QWORD v8[9];

  v1 = *v0;
  Hasher.init(_seed:)(v8);
  v2 = *(_QWORD *)(v1 + 16);
  Hasher._combine(_:)(v2);
  if (v2)
  {
    swift_bridgeObjectRetain(v1);
    v3 = (unint64_t *)(v1 + 40);
    do
    {
      v4 = *(v3 - 1);
      v5 = *v3;
      sub_100031FEC(v4, *v3);
      Data.hash(into:)(v8, v4, v5, v6);
      sub_10000E614(v4, v5);
      v3 += 2;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease(v1);
  }
  return Hasher._finalize()();
}

_QWORD *sub_1001AC054@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;

  result = sub_1001D50E8(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_1001AC07C(_QWORD *a1)
{
  uint64_t *v1;

  return NANAttribute.ServiceIDList.encode(to:)(a1, *v1);
}

uint64_t sub_1001AC094(uint64_t *a1, uint64_t *a2)
{
  return _s7CoreP2P12NANAttributeO13ServiceIDListV23__derived_struct_equalsySbAE_AEtFZ_0(*a1, *a2);
}

uint64_t NANAttribute.ServiceDescriptor.Control.type.getter(uint64_t a1)
{
  return sub_1001B782C(a1, (uint64_t (*)(_QWORD, uint64_t, uint64_t))sub_10007CD0C, 62);
}

void *NANAttribute.ServiceDescriptor.Control.matchingFilter.unsafeMutableAddressor()
{
  return &static NANAttribute.ServiceDescriptor.Control.matchingFilter;
}

void *NANAttribute.ServiceDescriptor.Control.serviceResponseFilter.unsafeMutableAddressor()
{
  return &static NANAttribute.ServiceDescriptor.Control.serviceResponseFilter;
}

void *NANAttribute.ServiceDescriptor.Control.serviceInfo.unsafeMutableAddressor()
{
  return &static NANAttribute.ServiceDescriptor.Control.serviceInfo;
}

void *NANAttribute.ServiceDescriptor.Control.discoveryRangeLimited.unsafeMutableAddressor()
{
  return &static NANAttribute.ServiceDescriptor.Control.discoveryRangeLimited;
}

void *NANAttribute.ServiceDescriptor.Control.bindingBitmap.unsafeMutableAddressor()
{
  return &static NANAttribute.ServiceDescriptor.Control.bindingBitmap;
}

void *NANAttribute.ServiceDescriptor.Control.reserved.unsafeMutableAddressor()
{
  return &static NANAttribute.ServiceDescriptor.Control.reserved;
}

uint64_t sub_1001AC0F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1001DD284();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1001AC154(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1001DD284();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t NANAttribute.ServiceDescriptor.ServiceResponseFilterControl.type.getter(uint64_t a1)
{
  return sub_1001BCDAC(a1, (unsigned __int8 (*)(_QWORD, uint64_t, uint64_t))sub_10007CD0C);
}

BOOL NANAttribute.ServiceDescriptor.ServiceResponseFilterControl.include.getter@<W0>(char a1@<W0>, unint64_t a2@<X8>)
{
  return sub_10007CD20(1, 1, a1, a2) != 0;
}

uint64_t NANAttribute.ServiceDescriptor.ServiceResponseFilterControl.bloomFilterIndex.getter(char a1)
{
  unint64_t v1;
  uint64_t result;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = sub_10007CD0C(2uLL, 2, a1);
  result = _s7CoreP2P19NANIntervalDurationO8rawValueACSgs5UInt8V_tcfC_0(v1);
  if (result == 4)
  {
    v3 = sub_100012C84();
    v4 = swift_allocError(&type metadata for WiFiError, v3, 0, 0);
    *(_OWORD *)v5 = xmmword_100337850;
    *(_BYTE *)(v5 + 16) = 2;
    v6 = v4;
    swift_willThrow(v4);
    result = swift_unexpectedError(v6, "CoreP2P/NANAttribute.swift", 26, 1);
    __break(1u);
  }
  return result;
}

CoreP2P::NANAttribute::ServiceDescriptor::ServiceResponseFilterControl __swiftcall NANAttribute.ServiceDescriptor.ServiceResponseFilterControl.init(type:include:bloomFilterIndex:)(CoreP2P::NANAttribute::ServiceDescriptor::ServiceResponseFilterControl::FilterType type, Swift::Bool include, CoreP2P::NANBloomFilter::Index bloomFilterIndex)
{
  char v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  char v9;
  unsigned __int8 v10;

  v5 = sub_1001AA700(type & 1, 0, 1);
  v6 = sub_1001AA4A8(include, 1, 1);
  v7 = sub_1001AA700(bloomFilterIndex, 2uLL, 2);
  if ((v6 & ~v5) != 0)
    v8 = v6;
  else
    v8 = 0;
  v9 = v8 | v5;
  if ((v7 & ~v9) != 0)
    v10 = v7;
  else
    v10 = 0;
  return (CoreP2P::NANAttribute::ServiceDescriptor::ServiceResponseFilterControl)(v10 | v9);
}

uint64_t sub_1001AC3A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1001DD3EC();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1001AC400(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1001DD3EC();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t NANAttribute.ServiceDescriptor.ServiceFilterControl.include.getter(uint64_t a1, char a2)
{
  return a2 & 1;
}

void NANAttribute.ServiceDescriptor.ServiceFilterControl.hash(into:)(uint64_t a1, uint64_t a2, char a3)
{
  Swift::UInt v5;
  Swift::UInt8 *v6;
  Swift::UInt8 v7;
  Swift::UInt8 v8;
  Swift::UInt8 v9;
  Swift::UInt8 v10;
  Swift::UInt8 v11;
  Swift::UInt8 v12;

  v5 = *(_QWORD *)(a2 + 16);
  Hasher._combine(_:)(v5);
  if (v5)
  {
    v6 = (Swift::UInt8 *)(a2 + 37);
    do
    {
      v7 = *(v6 - 5);
      v8 = *(v6 - 4);
      v9 = *(v6 - 3);
      v10 = *(v6 - 2);
      v11 = *(v6 - 1);
      v12 = *v6;
      v6 += 6;
      Hasher._combine(_:)(v7);
      Hasher._combine(_:)(v8);
      Hasher._combine(_:)(v9);
      Hasher._combine(_:)(v10);
      Hasher._combine(_:)(v11);
      Hasher._combine(_:)(v12);
      --v5;
    }
    while (v5);
  }
  Hasher._combine(_:)(a3 & 1);
}

uint64_t static NANAttribute.ServiceDescriptor.ServiceFilterControl.__derived_struct_equals(_:_:)(uint64_t a1, int a2, uint64_t a3, int a4)
{
  return _s7CoreP2P15AWDLActionFrameV12SyncTreePathV23__derived_struct_equalsySbAE_AEtFZ_0(a1, a3) & ~(a2 ^ a4) & 1;
}

uint64_t sub_1001AC534()
{
  _BYTE *v0;

  if (*v0)
    return 0x6564756C636E69;
  else
    return 0x6573736572646461;
}

uint64_t sub_1001AC574@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1001EB738(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1001AC598(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001EEC04();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001AC5C0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001EEC04();
  return CodingKey.debugDescription.getter(a1, v2);
}

Swift::Int NANAttribute.ServiceDescriptor.ServiceFilterControl.hashValue.getter(uint64_t a1, char a2)
{
  _QWORD v5[9];

  Hasher.init(_seed:)(v5);
  NANAttribute.ServiceDescriptor.ServiceFilterControl.hash(into:)((uint64_t)v5, a1, a2);
  return Hasher._finalize()();
}

uint64_t NANAttribute.ServiceDescriptor.ServiceFilterControl.init(from:)(_QWORD *a1)
{
  return sub_1001D5BE8(a1);
}

Swift::Int sub_1001AC64C()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  _QWORD v4[9];

  v1 = *(_QWORD *)v0;
  v2 = *(_BYTE *)(v0 + 8);
  Hasher.init(_seed:)(v4);
  NANAttribute.ServiceDescriptor.ServiceFilterControl.hash(into:)((uint64_t)v4, v1, v2);
  return Hasher._finalize()();
}

void sub_1001AC698(uint64_t a1)
{
  uint64_t v1;

  NANAttribute.ServiceDescriptor.ServiceFilterControl.hash(into:)(a1, *(_QWORD *)v1, *(_BYTE *)(v1 + 8));
}

Swift::Int sub_1001AC6A4()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  _QWORD v4[9];

  v1 = *(_QWORD *)v0;
  v2 = *(_BYTE *)(v0 + 8);
  Hasher.init(_seed:)(v4);
  NANAttribute.ServiceDescriptor.ServiceFilterControl.hash(into:)((uint64_t)v4, v1, v2);
  return Hasher._finalize()();
}

uint64_t sub_1001AC6EC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v5;

  result = sub_1001D5BE8(a1);
  if (!v2)
  {
    *(_QWORD *)a2 = result;
    *(_BYTE *)(a2 + 8) = v5 & 1;
  }
  return result;
}

uint64_t sub_1001AC71C(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;

  v2 = *(unsigned __int8 *)(a1 + 8);
  v3 = *(unsigned __int8 *)(a2 + 8);
  return _s7CoreP2P15AWDLActionFrameV12SyncTreePathV23__derived_struct_equalsySbAE_AEtFZ_0(*(_QWORD *)a1, *(_QWORD *)a2) & ~(v2 ^ v3) & 1;
}

uint64_t NANAttribute.ServiceDescriptor.serviceID.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)v0;
  sub_100031FEC(*(_QWORD *)v0, *(_QWORD *)(v0 + 8));
  return v1;
}

uint64_t NANAttribute.ServiceDescriptor.bindingBitmap.getter()
{
  uint64_t v0;

  return *(unsigned __int16 *)(v0 + 20) | (*(unsigned __int8 *)(v0 + 22) << 16);
}

uint64_t NANAttribute.ServiceDescriptor.bindingBitmap.setter(uint64_t result)
{
  uint64_t v1;
  char v2;
  char v3;

  *(_WORD *)(v1 + 20) = result;
  *(_BYTE *)(v1 + 22) = BYTE2(result) & 1;
  v2 = *(_BYTE *)(v1 + 18);
  if ((result & 0x10000) != 0)
  {
    if ((*(_BYTE *)(v1 + 18) & 0x40) == 0)
      return result;
    v3 = v2 & 0xBF;
  }
  else
  {
    if ((*(_BYTE *)(v1 + 18) & 0x40) != 0)
      return result;
    v3 = v2 | 0x40;
  }
  *(_BYTE *)(v1 + 18) = v3;
  return result;
}

uint64_t *(*NANAttribute.ServiceDescriptor.bindingBitmap.modify(_QWORD *a1))(uint64_t *result, char a2)
{
  uint64_t v1;

  *a1 = v1;
  return sub_1001AC7E8;
}

uint64_t *sub_1001AC7E8(uint64_t *result, char a2)
{
  uint64_t v2;
  char v3;

  if ((a2 & 1) == 0)
  {
    v2 = *result;
    v3 = *(_BYTE *)(*result + 18);
    if ((*(_BYTE *)(*result + 22) & 1) != 0)
    {
      if ((*(_BYTE *)(*result + 18) & 0x40) != 0)
        *(_BYTE *)(v2 + 18) = v3 & 0xBF;
    }
    else if ((*(_BYTE *)(*result + 18) & 0x40) == 0)
    {
      *(_BYTE *)(v2 + 18) = v3 | 0x40;
    }
  }
  return result;
}

uint64_t NANAttribute.ServiceDescriptor.matchingFilters.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  char v4;
  char v5;

  result = swift_bridgeObjectRelease(*(_QWORD *)(v1 + 24));
  *(_QWORD *)(v1 + 24) = a1;
  v4 = *(_BYTE *)(v1 + 18);
  if (a1)
  {
    if ((*(_BYTE *)(v1 + 18) & 4) != 0)
      return result;
    v5 = v4 | 4;
  }
  else
  {
    if ((*(_BYTE *)(v1 + 18) & 4) == 0)
      return result;
    v5 = v4 & 0xFB;
  }
  *(_BYTE *)(v1 + 18) = v5;
  return result;
}

uint64_t *(*NANAttribute.ServiceDescriptor.matchingFilters.modify(_QWORD *a1))(uint64_t *result, char a2)
{
  uint64_t v1;

  *a1 = v1;
  return sub_1001AC878;
}

uint64_t *sub_1001AC878(uint64_t *result, char a2)
{
  uint64_t v2;
  char v3;

  if ((a2 & 1) == 0)
  {
    v2 = *result;
    v3 = *(_BYTE *)(*result + 18);
    if (*(_QWORD *)(*result + 24))
    {
      if ((*(_BYTE *)(*result + 18) & 4) == 0)
        *(_BYTE *)(v2 + 18) = v3 | 4;
    }
    else if ((*(_BYTE *)(*result + 18) & 4) != 0)
    {
      *(_BYTE *)(v2 + 18) = v3 & 0xFB;
    }
  }
  return result;
}

uint64_t NANAttribute.ServiceDescriptor.serviceFilterControl.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  sub_1001D7C58(v1, *(_QWORD *)(v0 + 40), *(unsigned __int16 *)(v0 + 48) | (*(unsigned __int8 *)(v0 + 50) << 16));
  return v1;
}

uint64_t NANAttribute.ServiceDescriptor.serviceFilterControl.setter(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v7;
  int v8;
  uint64_t result;

  v8 = *(unsigned __int16 *)(v3 + 48);
  v7 = v3 + 48;
  result = sub_100111B98(*(_QWORD *)(v7 - 16), *(_QWORD *)(v7 - 8), v8 | (*(unsigned __int8 *)(v7 + 2) << 16));
  *(_QWORD *)(v7 - 16) = a1;
  *(_QWORD *)(v7 - 8) = a2;
  *(_BYTE *)(v7 + 2) = BYTE2(a3);
  *(_WORD *)v7 = a3;
  return result;
}

uint64_t NANAttribute.ServiceDescriptor.serviceInfo.getter()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[7];
  sub_100111B7C(v1, v0[8], v0[9]);
  return v1;
}

uint64_t NANAttribute.ServiceDescriptor.serviceInfo.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t result;

  result = sub_100111BBC(*(_QWORD *)(v3 + 56), *(_QWORD *)(v3 + 64), *(_QWORD *)(v3 + 72));
  *(_QWORD *)(v3 + 56) = a1;
  *(_QWORD *)(v3 + 64) = a2;
  *(_QWORD *)(v3 + 72) = a3;
  return result;
}

void NANAttribute.ServiceDescriptor.hash(into:)(uint64_t a1)
{
  __int128 *v1;
  __int128 *v2;
  __int128 v4;
  __n128 v5;
  uint64_t v6;
  Swift::UInt v7;
  unint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  __n128 v11;
  Swift::UInt16 v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  __int128 *v19;
  __n128 v20;
  __int128 v21;

  v2 = v1;
  v21 = *v2;
  v4 = v21;
  sub_100184F84((uint64_t)&v21);
  Data.hash(into:)(a1, v4, *((_QWORD *)&v4 + 1), v5);
  sub_100184FB0((uint64_t)&v21);
  Hasher._combine(_:)(*((_BYTE *)v2 + 16));
  Hasher._combine(_:)(*((_BYTE *)v2 + 17));
  Hasher._combine(_:)(*((_BYTE *)v2 + 18));
  if (*((_BYTE *)v2 + 22) == 1)
  {
    Hasher._combine(_:)(0);
    v6 = *((_QWORD *)v2 + 3);
    if (v6)
      goto LABEL_3;
LABEL_8:
    Hasher._combine(_:)(0);
    goto LABEL_9;
  }
  v12 = *((_WORD *)v2 + 10);
  Hasher._combine(_:)(1u);
  Hasher._combine(_:)(v12);
  v6 = *((_QWORD *)v2 + 3);
  if (!v6)
    goto LABEL_8;
LABEL_3:
  Hasher._combine(_:)(1u);
  v7 = *(_QWORD *)(v6 + 16);
  Hasher._combine(_:)(v7);
  if (v7)
  {
    swift_bridgeObjectRetain(v6);
    v8 = (unint64_t *)(v6 + 40);
    do
    {
      v9 = *(v8 - 1);
      v10 = *v8;
      sub_100031FEC(v9, *v8);
      Data.hash(into:)(a1, v9, v10, v11);
      sub_10000E614(v9, v10);
      v8 += 2;
      --v7;
    }
    while (v7);
    swift_bridgeObjectRelease(v6);
  }
LABEL_9:
  v13 = *((_QWORD *)v2 + 4);
  v14 = *((_QWORD *)v2 + 5);
  v15 = *((unsigned __int16 *)v2 + 24) | (*((unsigned __int8 *)v2 + 50) << 16);
  sub_1001D7C58(v13, v14, v15);
  sub_1001CF5E0(a1, v13, v14, v15);
  sub_100111B98(v13, v14, v15);
  v16 = *((_QWORD *)v2 + 7);
  if (v16 == 4)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v19 = v2 + 4;
    v17 = *((_QWORD *)v2 + 8);
    v18 = *((_QWORD *)v19 + 1);
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v16);
    sub_100031FEC(v17, v18);
    Data.hash(into:)(a1, v17, v18, v20);
    sub_100111BBC(v16, v17, v18);
  }
}

Swift::Int NANAttribute.ServiceDescriptor.hashValue.getter()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  NANAttribute.ServiceDescriptor.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int sub_1001ACBE0()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  NANAttribute.ServiceDescriptor.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

__n128 NANAttribute.ServiceDescriptor.init(from:)@<Q0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __n128 result;
  __int128 v5;
  _OWORD v6[5];

  sub_1001D9980(a1, (uint64_t)v6);
  if (!v2)
  {
    v5 = v6[3];
    *(_OWORD *)(a2 + 32) = v6[2];
    *(_OWORD *)(a2 + 48) = v5;
    *(_OWORD *)(a2 + 64) = v6[4];
    result = (__n128)v6[1];
    *(_OWORD *)a2 = v6[0];
    *(__n128 *)(a2 + 16) = result;
  }
  return result;
}

uint64_t sub_1001ACC60(_QWORD *a1)
{
  return NANAttribute.ServiceDescriptor.encode(to:)(a1);
}

uint64_t NANAttribute.ServiceDescriptor.encode(to:)(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v2;
  __int128 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  _BYTE v72[24];
  _QWORD v73[2];
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD v77[3];
  uint64_t v78;
  uint64_t v79;
  _BYTE v80[8];
  _BYTE v81[4];
  unsigned __int16 v82;
  char v83;
  uint64_t v84;

  v3 = v1;
  v4 = a1[3];
  v5 = a1[4];
  sub_10003259C(a1, v4);
  dispatch thunk of Encoder.unkeyedContainer()(v77, v4, v5);
  v74 = *v1;
  v6 = v78;
  v7 = v79;
  sub_100034C68((uint64_t)v77, v78);
  v8 = sub_1001D7C14();
  dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)(&v74, &type metadata for NANServiceName.Hash, v8, v6, v7);
  if (!v2)
  {
    v9 = v78;
    v10 = v79;
    v11 = *((unsigned __int8 *)v1 + 16);
    sub_100034C68((uint64_t)v77, v78);
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)(v11, v9, v10);
    v12 = v78;
    v13 = v79;
    v14 = *((unsigned __int8 *)v3 + 17);
    sub_100034C68((uint64_t)v77, v78);
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)(v14, v12, v13);
    v15 = *((_BYTE *)v3 + 18);
    LOBYTE(v74) = v15;
    v16 = v78;
    v17 = v79;
    sub_100034C68((uint64_t)v77, v78);
    v18 = sub_1001DA6E8();
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)(&v74, &type metadata for NANAttribute.ServiceDescriptor.Control, v18, v16, v17);
    sub_100063EB8((uint64_t)v3 + 20, (uint64_t)v81, &qword_1004066D8);
    sub_100063EB8((uint64_t)v81, (uint64_t)&v82, &qword_1004066D8);
    if ((v83 & 1) == 0 && (v15 & 0x40) != 0)
    {
      v20 = v78;
      v21 = v79;
      v22 = v82;
      sub_100034C68((uint64_t)v77, v78);
      dispatch thunk of UnkeyedEncodingContainer.encode(_:)(v22, v20, v21);
    }
    sub_100063EB8((uint64_t)v3 + 24, (uint64_t)v80, &qword_10040A528);
    sub_100063EB8((uint64_t)v80, (uint64_t)&v84, &qword_10040A528);
    v23 = v84;
    if (v84 && (v15 & 4) != 0)
    {
      v68 = v15;
      v24 = *(_QWORD *)(v84 + 16);
      if (v24)
      {
        *(_QWORD *)&v74 = _swiftEmptyArrayStorage;
        sub_100075078(0, v24, 0);
        __asm { BR              X9 }
      }
      v25 = sub_10001F11C((uint64_t)_swiftEmptyArrayStorage);
      v26 = type metadata accessor for BinaryEncoder();
      v27 = swift_allocObject(v26, 40, 7);
      *(_OWORD *)(v27 + 16) = xmmword_10033A100;
      *(_QWORD *)(v27 + 32) = v25;
      v75 = v26;
      v76 = sub_100011DE4((unint64_t *)&qword_100406278, (uint64_t (*)(uint64_t))type metadata accessor for BinaryEncoder, (uint64_t)protocol conformance descriptor for BinaryEncoder);
      *(_QWORD *)&v74 = v27;
      swift_bridgeObjectRetain(_swiftEmptyArrayStorage);
      swift_retain();
      v28 = sub_100012C44(&qword_100406180);
      v29 = sub_100011770(&qword_1004062B8, &qword_100406180, protocol conformance descriptor for LengthValue<A>);
      Array<A>.encode(to:)(&v74, _swiftEmptyArrayStorage, v28, v29);
      sub_100014430(&v74);
      swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
      swift_beginAccess(v27 + 16, v72, 0, 0);
      v30 = *(_QWORD *)(v27 + 16);
      v31 = *(_QWORD *)(v27 + 24);
      sub_100031FEC(v30, v31);
      swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
      swift_release(v27);
      sub_10007DB34(v30, v31);
      v33 = v32;
      v35 = v34;
      *(_QWORD *)&v74 = v32;
      *((_QWORD *)&v74 + 1) = v34;
      v36 = v78;
      v37 = v79;
      sub_100034C68((uint64_t)v77, v78);
      dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)(&v74, v28, v29, v36, v37);
      sub_10000E614(v33, v35);
      v15 = v68;
    }
    if (*((unsigned __int8 *)v3 + 50) != 255 && (v15 & 8) != 0)
    {
      v45 = *((_QWORD *)v3 + 4);
      v44 = *((_QWORD *)v3 + 5);
      v46 = *((unsigned __int16 *)v3 + 24) | (*((unsigned __int8 *)v3 + 50) << 16);
      v69 = v15;
      if (((*((unsigned __int8 *)v3 + 50) << 16) & 0x10000) != 0)
        __asm { BR              X10 }
      v47 = *(_QWORD *)(v45 + 16);
      v48 = (unsigned __int128)(v47 * (__int128)6) >> 64;
      v49 = 6 * v47;
      if (v48 != v49 >> 63)
      {
        __break(1u);
        JUMPOUT(0x1001AD768);
      }
      v50 = v49 | 1;
      if ((v49 | 1uLL) >= 0x100)
      {
        _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 3455, 0);
        __break(1u);
        swift_unexpectedError(0, "CoreP2P/NANAttribute.swift", 26, 1);
        __break(1u);
        JUMPOUT(0x1001AD848);
      }
      v51 = v78;
      v52 = v79;
      sub_100034C68((uint64_t)v77, v78);
      sub_1001D7C70(v45, v44, v46, 0);
      sub_1001D7C70(v45, v44, v46, 0);
      dispatch thunk of UnkeyedEncodingContainer.encode(_:)(v50, v51, v52);
      LOBYTE(v74) = sub_1001AA4A8(v44 & 1, 1, 1);
      v53 = v78;
      v54 = v79;
      sub_100034C68((uint64_t)v77, v78);
      v55 = sub_1001DA72C();
      dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)(&v74, &type metadata for NANAttribute.ServiceDescriptor.ServiceResponseFilterControl, v55, v53, v54);
      *(_QWORD *)&v74 = v45;
      v56 = v78;
      v70 = v79;
      sub_100034C68((uint64_t)v77, v78);
      v57 = sub_100012C44(&qword_100407250);
      v58 = sub_1000934A0(&qword_100407258, &qword_100407250, (uint64_t (*)(void))sub_100039C34, (const char *)&protocol conformance descriptor for <A> [A]);
      dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)(&v74, v57, v58, v56, v70);
      sub_100111B98(v45, v44, v46);
      sub_100111B98(v45, v44, v46);
      v15 = v69;
    }
    v38 = *((_QWORD *)v3 + 7);
    if (v38 != 4 && (v15 & 0x10) != 0)
    {
      v40 = *((_QWORD *)v3 + 8);
      v39 = *((_QWORD *)v3 + 9);
      sub_100031FEC(v40, v39);
      v41 = sub_10001F11C((uint64_t)_swiftEmptyArrayStorage);
      v42 = type metadata accessor for BinaryEncoder();
      v43 = swift_allocObject(v42, 40, 7);
      *(_OWORD *)(v43 + 16) = xmmword_10033A100;
      *(_QWORD *)(v43 + 32) = v41;
      v75 = v42;
      v76 = sub_100011DE4((unint64_t *)&qword_100406278, (uint64_t (*)(uint64_t))type metadata accessor for BinaryEncoder, (uint64_t)protocol conformance descriptor for BinaryEncoder);
      *(_QWORD *)&v74 = v43;
      sub_100111B7C(v38, v40, v39);
      swift_retain();
      NANServiceInfo.encode(to:)((uint64_t)&v74, v38, v40, v39);
      sub_100014430(&v74);
      sub_100111BBC(v38, v40, v39);
      swift_beginAccess(v43 + 16, &v74, 0, 0);
      v59 = *(_QWORD *)(v43 + 16);
      v60 = *(_QWORD *)(v43 + 24);
      sub_100031FEC(v59, v60);
      swift_release(v43);
      sub_10007DB34(v59, v60);
      v62 = v61;
      v64 = v63;
      v73[0] = v61;
      v73[1] = v63;
      v65 = v78;
      v71 = v79;
      sub_100034C68((uint64_t)v77, v78);
      v66 = sub_100012C44(&qword_100406180);
      v67 = sub_100011770(&qword_1004062B8, &qword_100406180, protocol conformance descriptor for LengthValue<A>);
      dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)(v73, v66, v67, v65, v71);
      sub_10000E614(v62, v64);
      sub_100111BBC(v38, v40, v39);
    }
  }
  return sub_100014430(v77);
}

BOOL sub_1001AD888(_OWORD *a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  _OWORD v8[5];
  _OWORD v9[5];

  v2 = a1[3];
  v8[2] = a1[2];
  v8[3] = v2;
  v3 = a1[4];
  v4 = a1[1];
  v8[0] = *a1;
  v8[1] = v4;
  v5 = a2[3];
  v9[2] = a2[2];
  v9[3] = v5;
  v9[4] = a2[4];
  v6 = *a2;
  v9[1] = a2[1];
  v8[4] = v3;
  v9[0] = v6;
  return _s7CoreP2P12NANAttributeO17ServiceDescriptorV23__derived_struct_equalsySbAE_AEtFZ_0((uint64_t)v8, (uint64_t)v9);
}

void *NANAttribute.ServiceDescriptorExtension.Control.datapathTypeIsMulticast.unsafeMutableAddressor()
{
  return &static NANAttribute.ServiceDescriptorExtension.Control.datapathTypeIsMulticast;
}

uint64_t NANAttribute.ServiceDescriptorExtension.Control.multicastType.getter(unsigned int a1)
{
  if ((~a1 & 0xC) != 0)
    return 2;
  else
    return (a1 >> 4) & 1;
}

void *NANAttribute.ServiceDescriptorExtension.Control.multicastType.unsafeMutableAddressor()
{
  return &static NANAttribute.ServiceDescriptorExtension.Control.multicastType;
}

void *NANAttribute.ServiceDescriptorExtension.Control.qosRequired.unsafeMutableAddressor()
{
  return &static NANAttribute.ServiceDescriptorExtension.Control.qosRequired;
}

void *NANAttribute.ServiceDescriptorExtension.Control.rangingRequired.unsafeMutableAddressor()
{
  return &static NANAttribute.ServiceDescriptorExtension.Control.rangingRequired;
}

void *NANAttribute.ServiceDescriptorExtension.Control.rangeLimit.unsafeMutableAddressor()
{
  return &static NANAttribute.ServiceDescriptorExtension.Control.rangeLimit;
}

uint64_t sub_1001AD934(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1001DD59C();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1001AD990(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1001DD59C();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

unint64_t sub_1001AD9DC()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000010;
  else
    return 0xD000000000000011;
}

uint64_t sub_1001ADA1C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1001EB834(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1001ADA40(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001DA770();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001ADA68(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001DA770();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NANAttribute.ServiceDescriptorExtension.RangeLimit.encode(to:)(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;
  char v14;
  char v15;

  v5 = sub_100012C44(&qword_10040A538);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin();
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10003259C(a1, v9);
  v11 = sub_1001DA770();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for NANAttribute.ServiceDescriptorExtension.RangeLimit.CodingKeys, &type metadata for NANAttribute.ServiceDescriptorExtension.RangeLimit.CodingKeys, v11, v9, v10);
  v15 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(a2, &v15, v5);
  if (!v2)
  {
    v14 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(WORD1(a2), &v14, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t NANAttribute.ServiceDescriptorExtension.RangeLimit.init(from:)(_QWORD *a1)
{
  return sub_1001D71A0(a1);
}

uint64_t sub_1001ADBB8@<X0>(_QWORD *a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = sub_1001D71A0(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_1001ADBE0(_QWORD *a1)
{
  unsigned int *v1;

  return NANAttribute.ServiceDescriptorExtension.RangeLimit.encode(to:)(a1, *v1);
}

unint64_t NANAttribute.ServiceDescriptorExtension.rangeLimit.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 4) | ((unint64_t)*(unsigned __int8 *)(v0 + 8) << 32);
}

uint64_t NANAttribute.ServiceDescriptorExtension.rangeLimit.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 4) = result;
  *(_BYTE *)(v1 + 8) = BYTE4(result) & 1;
  return result;
}

uint64_t NANAttribute.ServiceDescriptorExtension.serviceUpdateIndicator.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 9) | (*(unsigned __int8 *)(v0 + 10) << 8);
}

uint64_t NANAttribute.ServiceDescriptorExtension.serviceUpdateIndicator.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 9) = result;
  *(_BYTE *)(v1 + 10) = BYTE1(result) & 1;
  return result;
}

uint64_t (*NANAttribute.Datapath.datapathID.modify())(_QWORD)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t NANAttribute.ServiceDescriptorExtension.serviceInfo.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t result;

  result = sub_100111BBC(*(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), *(_QWORD *)(v3 + 32));
  *(_QWORD *)(v3 + 16) = a1;
  *(_QWORD *)(v3 + 24) = a2;
  *(_QWORD *)(v3 + 32) = a3;
  return result;
}

uint64_t NANAttribute.ServiceDescriptorExtension.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::UInt8 v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;

  v2 = v1;
  Hasher._combine(_:)(*(_BYTE *)v2);
  Hasher._combine(_:)(*(_WORD *)(v2 + 2));
  if (*(_BYTE *)(v2 + 8) == 1)
  {
    Hasher._combine(_:)(0);
    if ((*(_BYTE *)(v2 + 10) & 1) == 0)
    {
LABEL_3:
      v4 = *(_BYTE *)(v2 + 9);
      Hasher._combine(_:)(1u);
      goto LABEL_6;
    }
  }
  else
  {
    v5 = *(_DWORD *)(v2 + 4);
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v5);
    Hasher._combine(_:)(HIWORD(v5));
    if ((*(_BYTE *)(v2 + 10) & 1) == 0)
      goto LABEL_3;
  }
  v4 = 0;
LABEL_6:
  Hasher._combine(_:)(v4);
  v6 = *(unsigned __int8 *)(v2 + 16);
  if (v6 == 4)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v8 = *(_QWORD *)(v2 + 24);
    v7 = *(_QWORD *)(v2 + 32);
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v6);
    sub_1001DA7B4(v2);
    Data.hash(into:)(a1, v8, v7, v9);
  }
  return sub_1001DA7E0(v2);
}

Swift::Int NANAttribute.ServiceDescriptorExtension.hashValue.getter()
{
  uint64_t v0;
  Swift::UInt8 v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  _QWORD v8[9];

  Hasher.init(_seed:)(v8);
  Hasher._combine(_:)(*(_BYTE *)v0);
  Hasher._combine(_:)(*(_WORD *)(v0 + 2));
  if (*(_BYTE *)(v0 + 8) == 1)
  {
    Hasher._combine(_:)(0);
    if ((*(_BYTE *)(v0 + 10) & 1) == 0)
    {
LABEL_3:
      v1 = *(_BYTE *)(v0 + 9);
      Hasher._combine(_:)(1u);
      goto LABEL_6;
    }
  }
  else
  {
    v2 = *(_DWORD *)(v0 + 4);
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v2);
    Hasher._combine(_:)(HIWORD(v2));
    if ((*(_BYTE *)(v0 + 10) & 1) == 0)
      goto LABEL_3;
  }
  v1 = 0;
LABEL_6:
  Hasher._combine(_:)(v1);
  v3 = *(unsigned __int8 *)(v0 + 16);
  if (v3 == 4)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v5 = *(_QWORD *)(v0 + 24);
    v4 = *(_QWORD *)(v0 + 32);
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v3);
    sub_1001DA7B4(v0);
    Data.hash(into:)(v8, v5, v4, v6);
  }
  sub_1001DA7E0(v0);
  return Hasher._finalize()();
}

Swift::Int sub_1001ADEBC()
{
  return NANAttribute.ServiceDescriptorExtension.hashValue.getter();
}

uint64_t sub_1001ADEF4(uint64_t a1)
{
  return NANAttribute.ServiceDescriptorExtension.hash(into:)(a1);
}

Swift::Int sub_1001ADF2C()
{
  uint64_t v0;
  int v1;
  int v2;
  Swift::UInt8 v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  Swift::UInt8 v8;
  Swift::UInt16 v9;
  __n128 v10;
  _QWORD v12[9];

  v1 = *(_DWORD *)(v0 + 4);
  v2 = *(unsigned __int8 *)(v0 + 8);
  v3 = *(_BYTE *)(v0 + 9);
  v4 = *(_BYTE *)(v0 + 10);
  v5 = *(_QWORD *)(v0 + 16);
  v6 = *(_QWORD *)(v0 + 24);
  v7 = *(_QWORD *)(v0 + 32);
  v8 = *(_BYTE *)v0;
  v9 = *(_WORD *)(v0 + 2);
  Hasher.init(_seed:)(v12);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  if (v2 == 1)
  {
    Hasher._combine(_:)(0);
    if ((v4 & 1) == 0)
    {
LABEL_3:
      Hasher._combine(_:)(1u);
      goto LABEL_6;
    }
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1);
    Hasher._combine(_:)(HIWORD(v1));
    if ((v4 & 1) == 0)
      goto LABEL_3;
  }
  v3 = 0;
LABEL_6:
  Hasher._combine(_:)(v3);
  if (v5 == 4)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v5);
    sub_100111B7C(v5, v6, v7);
    Data.hash(into:)(v12, v6, v7, v10);
  }
  sub_100111BBC(v5, v6, v7);
  return Hasher._finalize()();
}

double NANAttribute.ServiceDescriptorExtension.init(from:)@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  __int128 v6;
  uint64_t v7;

  sub_1001D8380(a1);
  if (!v2)
  {
    result = *(double *)&v5;
    *(_OWORD *)a2 = v5;
    *(_OWORD *)(a2 + 16) = v6;
    *(_QWORD *)(a2 + 32) = v7;
  }
  return result;
}

uint64_t sub_1001AE0BC(_QWORD *a1)
{
  return NANAttribute.ServiceDescriptorExtension.encode(to:)(a1);
}

uint64_t NANAttribute.ServiceDescriptorExtension.encode(to:)(_QWORD *a1)
{
  unsigned __int8 *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[2];
  _QWORD v37[5];
  _QWORD v38[3];
  uint64_t v39;
  uint64_t v40;
  _BYTE v41[24];
  _BYTE v42[2];
  _BYTE v43[6];
  _BYTE v44[8];
  uint64_t v45;
  uint64_t v46;
  int v47;
  char v48;
  _BYTE v49[2];

  v3 = (uint64_t)v1;
  v4 = a1[3];
  v5 = a1[4];
  sub_10003259C(a1, v4);
  dispatch thunk of Encoder.unkeyedContainer()(v38, v4, v5);
  v6 = v39;
  v7 = v40;
  v8 = *v1;
  sub_100034C68((uint64_t)v38, v39);
  dispatch thunk of UnkeyedEncodingContainer.encode(_:)(v8, v6, v7);
  if (!v2)
  {
    v9 = *(_WORD *)(v3 + 2);
    LOWORD(v37[0]) = v9;
    v10 = v39;
    v11 = v40;
    sub_100034C68((uint64_t)v38, v39);
    v12 = sub_1001DA80C();
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)(v37, &type metadata for NANAttribute.ServiceDescriptorExtension.Control, v12, v10, v11);
    sub_100063EB8(v3 + 4, (uint64_t)v43, &qword_10040A550);
    sub_100063EB8((uint64_t)v43, (uint64_t)&v47, &qword_10040A550);
    if ((v48 & 1) == 0 && (v9 & 0x100) != 0)
    {
      LODWORD(v37[0]) = v47;
      v14 = v39;
      v15 = v40;
      sub_100034C68((uint64_t)v38, v39);
      v16 = sub_1001DA850();
      dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)(v37, &type metadata for NANAttribute.ServiceDescriptorExtension.RangeLimit, v16, v14, v15);
    }
    sub_100063EB8(v3 + 9, (uint64_t)v42, &qword_10040A558);
    sub_100063EB8((uint64_t)v42, (uint64_t)v49, &qword_10040A558);
    if ((v49[1] & 1) == 0 && (v9 & 0x200) != 0)
    {
      v17 = v39;
      v18 = v40;
      v19 = v49[0];
      sub_100034C68((uint64_t)v38, v39);
      dispatch thunk of UnkeyedEncodingContainer.encode(_:)(v19, v17, v18);
    }
    sub_100063EB8(v3 + 16, (uint64_t)v41, (uint64_t *)&unk_10040DAC0);
    sub_100063EB8((uint64_t)v41, (uint64_t)v44, (uint64_t *)&unk_10040DAC0);
    v20 = v44[0];
    if (v44[0] != 4)
    {
      v21 = v45;
      v22 = v46;
      sub_1001DA7B4(v3);
      v23 = sub_10001F11C((uint64_t)_swiftEmptyArrayStorage);
      v24 = type metadata accessor for BinaryEncoder();
      v25 = swift_allocObject(v24, 40, 7);
      *(_OWORD *)(v25 + 16) = xmmword_10033A100;
      *(_QWORD *)(v25 + 32) = v23;
      v37[3] = v24;
      v37[4] = sub_100011DE4((unint64_t *)&qword_100406278, (uint64_t (*)(uint64_t))type metadata accessor for BinaryEncoder, (uint64_t)protocol conformance descriptor for BinaryEncoder);
      v37[0] = v25;
      sub_1001DA7B4(v3);
      swift_retain();
      NANServiceInfo.encode(to:)((uint64_t)v37, v20, v21, v22);
      sub_100014430(v37);
      sub_1001DA7E0(v3);
      swift_beginAccess(v25 + 16, v37, 0, 0);
      v26 = *(_QWORD *)(v25 + 16);
      v27 = *(_QWORD *)(v25 + 24);
      sub_100031FEC(v26, v27);
      swift_release(v25);
      sub_10007DC10(v26, v27);
      v29 = v28;
      v31 = v30;
      v36[0] = v28;
      v36[1] = v30;
      v32 = v39;
      v33 = v40;
      sub_100034C68((uint64_t)v38, v39);
      v34 = sub_100012C44(&qword_100406668);
      v35 = sub_100011770(&qword_10040A560, &qword_100406668, protocol conformance descriptor for LengthValue<A>);
      dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)(v36, v34, v35, v32, v33);
      sub_10000E614(v29, v31);
      sub_1001DA7E0(v3);
    }
  }
  return sub_100014430(v38);
}

uint64_t sub_1001AE48C(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  _OWORD v5[2];
  uint64_t v6;
  _OWORD v7[2];
  uint64_t v8;

  v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  v6 = *(_QWORD *)(a1 + 32);
  v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  v8 = *(_QWORD *)(a2 + 32);
  return _s7CoreP2P12NANAttributeO26ServiceDescriptorExtensionV23__derived_struct_equalsySbAE_AEtFZ_0((unsigned __int8 *)v5, (unsigned __int8 *)v7) & 1;
}

void *NANAttribute.ConnectionCapability.wifiDirect.unsafeMutableAddressor()
{
  return &static NANAttribute.ConnectionCapability.wifiDirect;
}

void *NANAttribute.ConnectionCapability.p2ps.unsafeMutableAddressor()
{
  return &static NANAttribute.ConnectionCapability.p2ps;
}

void *NANAttribute.ConnectionCapability.tdls.unsafeMutableAddressor()
{
  return &static NANAttribute.ConnectionCapability.tdls;
}

void *NANAttribute.ConnectionCapability.wlanInfrastructure.unsafeMutableAddressor()
{
  return &static NANAttribute.ConnectionCapability.wlanInfrastructure;
}

void *NANAttribute.ConnectionCapability.ibss.unsafeMutableAddressor()
{
  return &static NANAttribute.ConnectionCapability.ibss;
}

void *NANAttribute.ConnectionCapability.mesh.unsafeMutableAddressor()
{
  return &static NANAttribute.ConnectionCapability.mesh;
}

uint64_t sub_1001AE51C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1001DD74C();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1001AE578(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1001DD74C();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_1001AE5C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1001EE184();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1001AE620(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1001EE184();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t NANAttribute.IBSS.availability.getter()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  int v4;
  int v5;

  v1 = *(unsigned __int8 *)(v0 + 18);
  v2 = *(_QWORD *)(v0 + 24);
  v3 = *(_QWORD *)(v0 + 32);
  v4 = *(unsigned __int16 *)(v0 + 16);
  sub_100031FEC(v2, v3);
  if (v1)
    v5 = 0x10000;
  else
    v5 = 0;
  return v4 | v5;
}

uint64_t NANAttribute.IBSS.availability.setter(unsigned int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unsigned int v7;
  uint64_t result;

  v7 = a1 >> 8;
  result = sub_10000E614(*(_QWORD *)(v3 + 24), *(_QWORD *)(v3 + 32));
  *(_BYTE *)(v3 + 16) = a1;
  *(_BYTE *)(v3 + 17) = v7;
  *(_BYTE *)(v3 + 18) = BYTE2(a1) & 1;
  *(_QWORD *)(v3 + 24) = a2;
  *(_QWORD *)(v3 + 32) = a3;
  return result;
}

uint64_t NANAttribute.WLANInfrastructure.role.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 40) = result & 1;
  return result;
}

void NANAttribute.WLANInfrastructure.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::UInt8 v4;
  Swift::UInt8 v5;
  Swift::UInt8 v6;
  Swift::UInt8 v7;
  Swift::UInt8 v8;
  Swift::UInt8 v9;
  Swift::UInt8 v10;
  Swift::UInt8 v11;
  Swift::UInt8 v12;
  Swift::UInt8 v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  Swift::UInt8 v17;
  __n128 v18;

  v2 = v1;
  v4 = *(_BYTE *)(v2 + 1);
  v5 = *(_BYTE *)(v2 + 2);
  v6 = *(_BYTE *)(v2 + 3);
  v7 = *(_BYTE *)(v2 + 4);
  v8 = *(_BYTE *)(v2 + 5);
  Hasher._combine(_:)(*(_BYTE *)v2);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  v9 = *(_BYTE *)(v2 + 7);
  v10 = *(_BYTE *)(v2 + 8);
  v11 = *(_BYTE *)(v2 + 9);
  v12 = *(_BYTE *)(v2 + 10);
  v13 = *(_BYTE *)(v2 + 11);
  Hasher._combine(_:)(*(_BYTE *)(v2 + 6));
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(v11);
  Hasher._combine(_:)(v12);
  Hasher._combine(_:)(v13);
  v14 = *(_BYTE *)(v2 + 18);
  v15 = *(_QWORD *)(v2 + 24);
  v16 = *(_QWORD *)(v2 + 32);
  v17 = *(_BYTE *)(v2 + 17);
  Hasher._combine(_:)(*(_BYTE *)(v2 + 16));
  Hasher._combine(_:)(v17);
  Hasher._combine(_:)(v14 & 1);
  sub_1001DA894(v2);
  Data.hash(into:)(a1, v15, v16, v18);
  sub_1001DA8C0(v2);
  Hasher._combine(_:)(*(_BYTE *)(v2 + 40));
}

uint64_t sub_1001AE82C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1001AE860 + 4 * byte_10035226C[*v0]))(0xD000000000000010, 0x8000000100367910);
}

uint64_t sub_1001AE860(uint64_t a1)
{
  return a1 + 8;
}

uint64_t sub_1001AE878()
{
  return 0x6962616C69617661;
}

uint64_t sub_1001AE898()
{
  return 1701605234;
}

uint64_t sub_1001AE8A8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1001EB91C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1001AE8CC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001DA8EC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001AE8F4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001DA8EC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NANAttribute.WLANInfrastructure.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  __int128 v16;
  uint64_t v17;
  char v18;

  v3 = v1;
  v5 = sub_100012C44(&qword_10040A570);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin();
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10003259C(a1, v9);
  v11 = sub_1001DA8EC();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for NANAttribute.WLANInfrastructure.CodingKeys, &type metadata for NANAttribute.WLANInfrastructure.CodingKeys, v11, v9, v10);
  LODWORD(v16) = *(_DWORD *)v3;
  WORD2(v16) = *(_WORD *)(v3 + 4);
  v18 = 0;
  v12 = sub_100039C34();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v16, &v18, v5, &type metadata for WiFiAddress, v12);
  if (!v2)
  {
    LODWORD(v16) = *(_DWORD *)(v3 + 6);
    WORD2(v16) = *(_WORD *)(v3 + 10);
    v18 = 1;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v16, &v18, v5, &type metadata for WiFiAddress, v12);
    v16 = *(_OWORD *)(v3 + 16);
    v17 = *(_QWORD *)(v3 + 32);
    v18 = 2;
    v13 = sub_1001DA930();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v16, &v18, v5, &type metadata for DeprecatedNANAvailability, v13);
    LOBYTE(v16) = *(_BYTE *)(v3 + 40);
    v18 = 3;
    v14 = sub_1001DA974();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v16, &v18, v5, &type metadata for NANAttribute.WLANInfrastructure.DeviceRole, v14);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

Swift::Int NANAttribute.WLANInfrastructure.hashValue.getter()
{
  uint64_t v0;
  Swift::UInt8 v1;
  Swift::UInt8 v2;
  Swift::UInt8 v3;
  Swift::UInt8 v4;
  Swift::UInt8 v5;
  Swift::UInt8 v6;
  Swift::UInt8 v7;
  Swift::UInt8 v8;
  Swift::UInt8 v9;
  Swift::UInt8 v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  Swift::UInt8 v14;
  __n128 v15;
  _QWORD v17[9];

  Hasher.init(_seed:)(v17);
  v1 = *(_BYTE *)(v0 + 1);
  v2 = *(_BYTE *)(v0 + 2);
  v3 = *(_BYTE *)(v0 + 3);
  v4 = *(_BYTE *)(v0 + 4);
  v5 = *(_BYTE *)(v0 + 5);
  Hasher._combine(_:)(*(_BYTE *)v0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  v6 = *(_BYTE *)(v0 + 7);
  v7 = *(_BYTE *)(v0 + 8);
  v8 = *(_BYTE *)(v0 + 9);
  v9 = *(_BYTE *)(v0 + 10);
  v10 = *(_BYTE *)(v0 + 11);
  Hasher._combine(_:)(*(_BYTE *)(v0 + 6));
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  v11 = *(_BYTE *)(v0 + 18);
  v12 = *(_QWORD *)(v0 + 24);
  v13 = *(_QWORD *)(v0 + 32);
  v14 = *(_BYTE *)(v0 + 17);
  Hasher._combine(_:)(*(_BYTE *)(v0 + 16));
  Hasher._combine(_:)(v14);
  Hasher._combine(_:)(v11 & 1);
  sub_1001DA894(v0);
  Data.hash(into:)(v17, v12, v13, v15);
  sub_1001DA8C0(v0);
  Hasher._combine(_:)(*(_BYTE *)(v0 + 40));
  return Hasher._finalize()();
}

double NANAttribute.WLANInfrastructure.init(from:)@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  __int128 v6;
  _OWORD v7[2];

  sub_1001D5EF0(a1, (uint64_t)&v6);
  if (!v2)
  {
    v5 = v7[0];
    *a2 = v6;
    a2[1] = v5;
    result = *(double *)((char *)v7 + 9);
    *(_OWORD *)((char *)a2 + 25) = *(_OWORD *)((char *)v7 + 9);
  }
  return result;
}

Swift::Int sub_1001AEC9C()
{
  return NANAttribute.WLANInfrastructure.hashValue.getter();
}

void sub_1001AECD4(uint64_t a1)
{
  NANAttribute.WLANInfrastructure.hash(into:)(a1);
}

Swift::Int sub_1001AED0C()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  Swift::UInt8 v3;
  Swift::UInt8 v4;
  Swift::UInt8 v5;
  Swift::UInt8 v6;
  Swift::UInt8 v7;
  Swift::UInt8 v8;
  Swift::UInt8 v9;
  __n128 v10;
  Swift::UInt8 v12;
  Swift::UInt8 v13;
  Swift::UInt8 v14;
  Swift::UInt8 v15;
  Swift::UInt8 v16;
  Swift::UInt8 v17;
  Swift::UInt8 v18;
  Swift::UInt8 v19;
  Swift::UInt8 v20;
  _QWORD v21[9];

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(_QWORD *)(v0 + 32);
  v19 = *(_BYTE *)(v0 + 18);
  v20 = *(_BYTE *)(v0 + 40);
  v3 = *(_BYTE *)v0;
  v4 = *(_BYTE *)(v0 + 1);
  v5 = *(_BYTE *)(v0 + 2);
  v6 = *(_BYTE *)(v0 + 3);
  v7 = *(_BYTE *)(v0 + 4);
  v8 = *(_BYTE *)(v0 + 5);
  v9 = *(_BYTE *)(v0 + 6);
  v12 = *(_BYTE *)(v0 + 7);
  v13 = *(_BYTE *)(v0 + 8);
  v14 = *(_BYTE *)(v0 + 9);
  v15 = *(_BYTE *)(v0 + 10);
  v16 = *(_BYTE *)(v0 + 11);
  v17 = *(_BYTE *)(v0 + 16);
  v18 = *(_BYTE *)(v0 + 17);
  Hasher.init(_seed:)(v21);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v12);
  Hasher._combine(_:)(v13);
  Hasher._combine(_:)(v14);
  Hasher._combine(_:)(v15);
  Hasher._combine(_:)(v16);
  Hasher._combine(_:)(v17);
  Hasher._combine(_:)(v18);
  Hasher._combine(_:)(v19);
  sub_100031FEC(v1, v2);
  Data.hash(into:)(v21, v1, v2, v10);
  sub_10000E614(v1, v2);
  Hasher._combine(_:)(v20);
  return Hasher._finalize()();
}

uint64_t sub_1001AEE9C(_QWORD *a1)
{
  return NANAttribute.WLANInfrastructure.encode(to:)(a1);
}

uint64_t sub_1001AEEB0(__int128 *a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v5;
  _OWORD v6[2];
  __int128 v7;
  _OWORD v8[2];

  v2 = a1[1];
  v5 = *a1;
  v6[0] = v2;
  *(_OWORD *)((char *)v6 + 9) = *(__int128 *)((char *)a1 + 25);
  v3 = a2[1];
  v7 = *a2;
  v8[0] = v3;
  *(_OWORD *)((char *)v8 + 9) = *(__int128 *)((char *)a2 + 25);
  return _s7CoreP2P12NANAttributeO18WLANInfrastructureV23__derived_struct_equalsySbAE_AEtFZ_0((uint64_t)&v5, (uint64_t)&v7) & 1;
}

void *NANAttribute.P2POperation.DeviceRole.device.unsafeMutableAddressor()
{
  return &static NANAttribute.P2POperation.DeviceRole.device;
}

void *NANAttribute.P2POperation.DeviceRole.groupOwner.unsafeMutableAddressor()
{
  return &static NANAttribute.P2POperation.DeviceRole.groupOwner;
}

void *NANAttribute.P2POperation.DeviceRole.client.unsafeMutableAddressor()
{
  return &static NANAttribute.P2POperation.DeviceRole.client;
}

uint64_t sub_1001AEF1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1001DD8FC();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1001AEF78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1001DD8FC();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t NANAttribute.P2POperation.availability.getter(uint64_t a1, int a2, uint64_t a3, unint64_t a4)
{
  sub_100031FEC(a3, a4);
  return a2 & 0x1FFFF;
}

uint64_t NANAttribute.Mesh.availability.setter(unsigned int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unsigned int v7;
  uint64_t result;

  v7 = a1 >> 8;
  result = sub_10000E614(*(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24));
  *(_BYTE *)(v3 + 8) = a1;
  *(_BYTE *)(v3 + 9) = v7;
  *(_BYTE *)(v3 + 10) = BYTE2(a1) & 1;
  *(_QWORD *)(v3 + 16) = a2;
  *(_QWORD *)(v3 + 24) = a3;
  return result;
}

uint64_t NANAttribute.P2POperation.hash(into:)(uint64_t a1, unint64_t a2, unsigned int a3, uint64_t a4, unint64_t a5)
{
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  __n128 v15;
  Swift::UInt8 v17[4];

  *(_DWORD *)v17 = a3 >> 8;
  v9 = a2 >> 8;
  v10 = a2 >> 16;
  v11 = a2 >> 24;
  v12 = HIDWORD(a2);
  v13 = a2 >> 40;
  v14 = HIWORD(a2);
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(v11);
  Hasher._combine(_:)(v12);
  Hasher._combine(_:)(v13);
  Hasher._combine(_:)(v14);
  Hasher._combine(_:)(a3);
  Hasher._combine(_:)(v17[0]);
  Hasher._combine(_:)(BYTE2(a3) & 1);
  sub_100031FEC(a4, a5);
  Data.hash(into:)(a1, a4, a5, v15);
  return sub_10000E614(a4, a5);
}

uint64_t static NANAttribute.P2POperation.__derived_struct_equals(_:_:)(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  return sub_1001D0CA0(a1 & 0xFFFFFFFFFFFFFFLL, a2 & 0x1FFFF, a3, a4, a5 & 0xFFFFFFFFFFFFFFLL, a6 & 0x1FFFF);
}

uint64_t sub_1001AF154()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x657264644163616DLL;
  if (*v0 != 1)
    v1 = 0x6962616C69617661;
  if (*v0)
    return v1;
  else
    return 1701605234;
}

uint64_t sub_1001AF1B4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1001EBAD4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1001AF1D8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001DA9B8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001AF200(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001DA9B8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NANAttribute.P2POperation.encode(to:)(_QWORD *a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int16 v26;
  char v27;
  char v28;
  char v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  char v33;

  v24 = a4;
  v25 = a5;
  v9 = sub_100012C44(&qword_10040A590);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin();
  v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1[3];
  v13 = a1[4];
  sub_10003259C(a1, v14);
  v15 = sub_1001DA9B8();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for NANAttribute.P2POperation.CodingKeys, &type metadata for NANAttribute.P2POperation.CodingKeys, v15, v14, v13);
  LOBYTE(v26) = a2;
  v33 = 0;
  v16 = sub_1001DA9FC();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v26, &v33, v9, &type metadata for NANAttribute.P2POperation.DeviceRole, v16);
  if (!v5)
  {
    v17 = a3;
    v18 = v24;
    v19 = v25;
    LOBYTE(v26) = BYTE1(a2);
    HIBYTE(v26) = BYTE2(a2);
    v27 = BYTE3(a2);
    v28 = BYTE4(a2);
    v29 = BYTE5(a2);
    v30 = BYTE6(a2);
    v33 = 1;
    v20 = sub_100039C34();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v26, &v33, v9, &type metadata for WiFiAddress, v20);
    v26 = v17;
    v27 = BYTE2(v17) & 1;
    v31 = v18;
    v32 = v19;
    v33 = 2;
    v21 = sub_1001DA930();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v26, &v33, v9, &type metadata for DeprecatedNANAvailability, v21);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

Swift::Int NANAttribute.P2POperation.hashValue.getter(unint64_t a1, unsigned int a2, uint64_t a3, unint64_t a4)
{
  Swift::UInt8 v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  __n128 v13;
  Swift::UInt8 v15[8];
  Swift::UInt8 v16[4];
  _QWORD v17[9];

  v7 = a1;
  *(_DWORD *)v16 = a2 >> 8;
  v8 = a1 >> 8;
  v9 = a1 >> 16;
  v10 = a1 >> 24;
  v11 = HIDWORD(a1);
  v12 = a1 >> 40;
  *(_QWORD *)v15 = HIWORD(a1);
  Hasher.init(_seed:)(v17);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(v11);
  Hasher._combine(_:)(v12);
  Hasher._combine(_:)(v15[0]);
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(v16[0]);
  Hasher._combine(_:)(BYTE2(a2) & 1);
  sub_100031FEC(a3, a4);
  Data.hash(into:)(v17, a3, a4, v13);
  sub_10000E614(a3, a4);
  return Hasher._finalize()();
}

uint64_t NANAttribute.P2POperation.init(from:)(_QWORD *a1)
{
  return sub_1001D44DC(a1) & 0xFFFFFFFFFFFFFFLL;
}

Swift::Int sub_1001AF550()
{
  unsigned int *v0;
  int v1;

  if (*((_BYTE *)v0 + 10))
    v1 = 0x10000;
  else
    v1 = 0;
  return NANAttribute.P2POperation.hashValue.getter(*v0 | ((unint64_t)*((unsigned __int8 *)v0 + 4) << 32) | ((unint64_t)*((unsigned __int8 *)v0 + 5) << 40) | ((unint64_t)*((unsigned __int8 *)v0 + 6) << 48), *((unsigned __int16 *)v0 + 4) | v1, *((_QWORD *)v0 + 2), *((_QWORD *)v0 + 3));
}

uint64_t sub_1001AF58C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  Swift::UInt8 v6;
  Swift::UInt8 v7;
  Swift::UInt8 v8;
  Swift::UInt8 v9;
  Swift::UInt8 v10;
  Swift::UInt8 v11;
  Swift::UInt8 v12;
  __n128 v13;
  Swift::UInt8 v15;
  Swift::UInt8 v16;

  v2 = v1;
  v4 = *(_QWORD *)(v2 + 16);
  v5 = *(_QWORD *)(v2 + 24);
  v6 = *(_BYTE *)(v2 + 1);
  v7 = *(_BYTE *)(v2 + 2);
  v8 = *(_BYTE *)(v2 + 3);
  v9 = *(_BYTE *)(v2 + 4);
  v10 = *(_BYTE *)(v2 + 5);
  v11 = *(_BYTE *)(v2 + 6);
  v12 = *(_BYTE *)(v2 + 8);
  v15 = *(_BYTE *)(v2 + 9);
  v16 = *(_BYTE *)(v2 + 10);
  Hasher._combine(_:)(*(_BYTE *)v2);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(v11);
  Hasher._combine(_:)(v12);
  Hasher._combine(_:)(v15);
  Hasher._combine(_:)(v16);
  sub_100031FEC(v4, v5);
  Data.hash(into:)(a1, v4, v5, v13);
  return sub_10000E614(v4, v5);
}

Swift::Int sub_1001AF674()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  Swift::UInt8 v3;
  Swift::UInt8 v4;
  Swift::UInt8 v5;
  Swift::UInt8 v6;
  Swift::UInt8 v7;
  Swift::UInt8 v8;
  Swift::UInt8 v9;
  __n128 v10;
  Swift::UInt8 v12;
  Swift::UInt8 v13;
  Swift::UInt8 v14;
  _QWORD v15[9];

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24);
  v3 = *(_BYTE *)v0;
  v4 = *(_BYTE *)(v0 + 1);
  v5 = *(_BYTE *)(v0 + 2);
  v6 = *(_BYTE *)(v0 + 3);
  v7 = *(_BYTE *)(v0 + 4);
  v8 = *(_BYTE *)(v0 + 5);
  v9 = *(_BYTE *)(v0 + 6);
  v12 = *(_BYTE *)(v0 + 8);
  v13 = *(_BYTE *)(v0 + 9);
  v14 = *(_BYTE *)(v0 + 10);
  Hasher.init(_seed:)(v15);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v12);
  Hasher._combine(_:)(v13);
  Hasher._combine(_:)(v14);
  sub_100031FEC(v1, v2);
  Data.hash(into:)(v15, v1, v2, v10);
  sub_10000E614(v1, v2);
  return Hasher._finalize()();
}

uint64_t sub_1001AF798@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  int v5;
  uint64_t v6;
  uint64_t v7;

  result = sub_1001D44DC(a1);
  if (!v2)
  {
    *(_WORD *)a2 = result;
    *(_BYTE *)(a2 + 2) = BYTE2(result);
    *(_BYTE *)(a2 + 3) = BYTE3(result);
    *(_BYTE *)(a2 + 4) = BYTE4(result);
    *(_BYTE *)(a2 + 5) = BYTE5(result);
    *(_BYTE *)(a2 + 6) = BYTE6(result);
    *(_WORD *)(a2 + 8) = v5;
    *(_BYTE *)(a2 + 10) = BYTE2(v5) & 1;
    *(_QWORD *)(a2 + 16) = v6;
    *(_QWORD *)(a2 + 24) = v7;
  }
  return result;
}

uint64_t sub_1001AF808(_QWORD *a1)
{
  unsigned int *v1;
  int v2;

  if (*((_BYTE *)v1 + 10))
    v2 = 0x10000;
  else
    v2 = 0;
  return NANAttribute.P2POperation.encode(to:)(a1, *v1 | ((unint64_t)*((unsigned __int8 *)v1 + 4) << 32) | ((unint64_t)*((unsigned __int8 *)v1 + 5) << 40) | ((unint64_t)*((unsigned __int8 *)v1 + 6) << 48), *((unsigned __int16 *)v1 + 4) | v2, *((_QWORD *)v1 + 2), *((_QWORD *)v1 + 3));
}

uint64_t sub_1001AF854(unsigned int *a1, unsigned int *a2)
{
  int v2;
  int v3;

  if (*((_BYTE *)a1 + 10))
    v2 = 0x10000;
  else
    v2 = 0;
  if (*((_BYTE *)a2 + 10))
    v3 = 0x10000;
  else
    v3 = 0;
  return sub_1001D0CA0(*a1 | ((unint64_t)*((unsigned __int8 *)a1 + 4) << 32) | ((unint64_t)*((unsigned __int8 *)a1 + 5) << 40) | ((unint64_t)*((unsigned __int8 *)a1 + 6) << 48), *((unsigned __int16 *)a1 + 4) | v2, *((_QWORD *)a1 + 2), *((_QWORD *)a1 + 3), *a2 | ((unint64_t)*((unsigned __int8 *)a2 + 4) << 32) | ((unint64_t)*((unsigned __int8 *)a2 + 5) << 40) | ((unint64_t)*((unsigned __int8 *)a2 + 6) << 48), *((unsigned __int16 *)a2 + 4) | v3);
}

uint64_t NANAttribute.IBSS.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::UInt8 v4;
  Swift::UInt8 v5;
  Swift::UInt8 v6;
  Swift::UInt8 v7;
  Swift::UInt8 v8;
  Swift::UInt8 v9;
  Swift::UInt8 v10;
  Swift::UInt8 v11;
  Swift::UInt8 v12;
  Swift::UInt8 v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  Swift::UInt8 v17;
  __n128 v18;

  v2 = v1;
  v4 = *(_BYTE *)(v2 + 1);
  v5 = *(_BYTE *)(v2 + 2);
  v6 = *(_BYTE *)(v2 + 3);
  v7 = *(_BYTE *)(v2 + 4);
  v8 = *(_BYTE *)(v2 + 5);
  Hasher._combine(_:)(*(_BYTE *)v2);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  v9 = *(_BYTE *)(v2 + 7);
  v10 = *(_BYTE *)(v2 + 8);
  v11 = *(_BYTE *)(v2 + 9);
  v12 = *(_BYTE *)(v2 + 10);
  v13 = *(_BYTE *)(v2 + 11);
  Hasher._combine(_:)(*(_BYTE *)(v2 + 6));
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(v11);
  Hasher._combine(_:)(v12);
  Hasher._combine(_:)(v13);
  v14 = *(_BYTE *)(v2 + 18);
  v15 = *(_QWORD *)(v2 + 24);
  v16 = *(_QWORD *)(v2 + 32);
  v17 = *(_BYTE *)(v2 + 17);
  Hasher._combine(_:)(*(_BYTE *)(v2 + 16));
  Hasher._combine(_:)(v17);
  Hasher._combine(_:)(v14 & 1);
  sub_1001DA894(v2);
  Data.hash(into:)(a1, v15, v16, v18);
  return sub_1001DA8C0(v2);
}

uint64_t sub_1001AF9D0()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x657264644163616DLL;
  if (*v0 != 1)
    v1 = 0x6962616C69617661;
  if (*v0)
    return v1;
  else
    return 0x4953534273736269;
}

uint64_t sub_1001AFA3C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1001EBC3C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1001AFA60(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001DAA40();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001AFA88(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001DAA40();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NANAttribute.IBSS.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  __int128 v15;
  uint64_t v16;
  char v17;

  v3 = v1;
  v5 = sub_100012C44(&qword_10040A5A8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin();
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10003259C(a1, v9);
  v11 = sub_1001DAA40();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for NANAttribute.IBSS.CodingKeys, &type metadata for NANAttribute.IBSS.CodingKeys, v11, v9, v10);
  LODWORD(v15) = *(_DWORD *)v3;
  WORD2(v15) = *(_WORD *)(v3 + 4);
  v17 = 0;
  v12 = sub_100039C34();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v15, &v17, v5, &type metadata for WiFiAddress, v12);
  if (!v2)
  {
    LODWORD(v15) = *(_DWORD *)(v3 + 6);
    WORD2(v15) = *(_WORD *)(v3 + 10);
    v17 = 1;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v15, &v17, v5, &type metadata for WiFiAddress, v12);
    v15 = *(_OWORD *)(v3 + 16);
    v16 = *(_QWORD *)(v3 + 32);
    v17 = 2;
    v13 = sub_1001DA930();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v15, &v17, v5, &type metadata for DeprecatedNANAvailability, v13);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

Swift::Int NANAttribute.IBSS.hashValue.getter()
{
  uint64_t v0;
  Swift::UInt8 v1;
  Swift::UInt8 v2;
  Swift::UInt8 v3;
  Swift::UInt8 v4;
  Swift::UInt8 v5;
  Swift::UInt8 v6;
  Swift::UInt8 v7;
  Swift::UInt8 v8;
  Swift::UInt8 v9;
  Swift::UInt8 v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  Swift::UInt8 v14;
  __n128 v15;
  _QWORD v17[9];

  Hasher.init(_seed:)(v17);
  v1 = *(_BYTE *)(v0 + 1);
  v2 = *(_BYTE *)(v0 + 2);
  v3 = *(_BYTE *)(v0 + 3);
  v4 = *(_BYTE *)(v0 + 4);
  v5 = *(_BYTE *)(v0 + 5);
  Hasher._combine(_:)(*(_BYTE *)v0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  v6 = *(_BYTE *)(v0 + 7);
  v7 = *(_BYTE *)(v0 + 8);
  v8 = *(_BYTE *)(v0 + 9);
  v9 = *(_BYTE *)(v0 + 10);
  v10 = *(_BYTE *)(v0 + 11);
  Hasher._combine(_:)(*(_BYTE *)(v0 + 6));
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  v11 = *(_BYTE *)(v0 + 18);
  v12 = *(_QWORD *)(v0 + 24);
  v13 = *(_QWORD *)(v0 + 32);
  v14 = *(_BYTE *)(v0 + 17);
  Hasher._combine(_:)(*(_BYTE *)(v0 + 16));
  Hasher._combine(_:)(v14);
  Hasher._combine(_:)(v11 & 1);
  sub_1001DA894(v0);
  Data.hash(into:)(v17, v12, v13, v15);
  sub_1001DA8C0(v0);
  return Hasher._finalize()();
}

double NANAttribute.IBSS.init(from:)@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  uint64_t v7;

  sub_1001D7564(a1, (uint64_t)v6);
  if (!v2)
  {
    result = *(double *)v6;
    v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    *(_QWORD *)(a2 + 32) = v7;
  }
  return result;
}

Swift::Int sub_1001AFDE8()
{
  return NANAttribute.IBSS.hashValue.getter();
}

uint64_t sub_1001AFE20(uint64_t a1)
{
  return NANAttribute.IBSS.hash(into:)(a1);
}

Swift::Int sub_1001AFE58()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  Swift::UInt8 v3;
  Swift::UInt8 v4;
  Swift::UInt8 v5;
  Swift::UInt8 v6;
  Swift::UInt8 v7;
  Swift::UInt8 v8;
  Swift::UInt8 v9;
  __n128 v10;
  Swift::UInt8 v12;
  Swift::UInt8 v13;
  Swift::UInt8 v14;
  Swift::UInt8 v15;
  Swift::UInt8 v16;
  Swift::UInt8 v17;
  Swift::UInt8 v18;
  Swift::UInt8 v19;
  _QWORD v20[9];

  v19 = *(_BYTE *)(v0 + 18);
  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(_QWORD *)(v0 + 32);
  v3 = *(_BYTE *)v0;
  v4 = *(_BYTE *)(v0 + 1);
  v5 = *(_BYTE *)(v0 + 2);
  v6 = *(_BYTE *)(v0 + 3);
  v7 = *(_BYTE *)(v0 + 4);
  v8 = *(_BYTE *)(v0 + 5);
  v9 = *(_BYTE *)(v0 + 6);
  v12 = *(_BYTE *)(v0 + 7);
  v13 = *(_BYTE *)(v0 + 8);
  v14 = *(_BYTE *)(v0 + 9);
  v15 = *(_BYTE *)(v0 + 10);
  v16 = *(_BYTE *)(v0 + 11);
  v17 = *(_BYTE *)(v0 + 16);
  v18 = *(_BYTE *)(v0 + 17);
  Hasher.init(_seed:)(v20);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v12);
  Hasher._combine(_:)(v13);
  Hasher._combine(_:)(v14);
  Hasher._combine(_:)(v15);
  Hasher._combine(_:)(v16);
  Hasher._combine(_:)(v17);
  Hasher._combine(_:)(v18);
  Hasher._combine(_:)(v19);
  sub_100031FEC(v1, v2);
  Data.hash(into:)(v20, v1, v2, v10);
  sub_10000E614(v1, v2);
  return Hasher._finalize()();
}

uint64_t sub_1001AFFD8(_QWORD *a1)
{
  return NANAttribute.IBSS.encode(to:)(a1);
}

BOOL sub_1001AFFEC(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  _OWORD v5[2];
  uint64_t v6;
  _OWORD v7[2];
  uint64_t v8;

  v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  v6 = *(_QWORD *)(a1 + 32);
  v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  v8 = *(_QWORD *)(a2 + 32);
  return _s7CoreP2P12NANAttributeO4IBSSV23__derived_struct_equalsySbAE_AEtFZ_0((uint64_t)v5, (uint64_t)v7);
}

uint64_t NANAttribute.Mesh.availability.getter()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  unint64_t v3;
  int v4;
  int v5;

  v1 = *(unsigned __int8 *)(v0 + 10);
  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = *(unsigned __int16 *)(v0 + 8);
  sub_100031FEC(v2, v3);
  if (v1)
    v5 = 0x10000;
  else
    v5 = 0;
  return v4 | v5;
}

uint64_t NANAttribute.Mesh.meshID.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  sub_100031FEC(v1, *(_QWORD *)(v0 + 40));
  return v1;
}

uint64_t NANAttribute.Mesh.meshID.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = sub_10000E614(*(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40));
  *(_QWORD *)(v2 + 32) = a1;
  *(_QWORD *)(v2 + 40) = a2;
  return result;
}

uint64_t NANAttribute.Mesh.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::UInt8 v4;
  Swift::UInt8 v5;
  Swift::UInt8 v6;
  Swift::UInt8 v7;
  Swift::UInt8 v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  __int128 v12;
  __n128 v13;
  __int128 v15;
  Swift::UInt8 v16[16];
  uint64_t v17;

  v2 = v1;
  v4 = *(_BYTE *)(v2 + 1);
  v5 = *(_BYTE *)(v2 + 2);
  v6 = *(_BYTE *)(v2 + 3);
  v7 = *(_BYTE *)(v2 + 4);
  v8 = *(_BYTE *)(v2 + 5);
  Hasher._combine(_:)(*(_BYTE *)v2);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  *(_OWORD *)v16 = *(_OWORD *)(v2 + 8);
  v17 = *(_QWORD *)(v2 + 24);
  Hasher._combine(_:)(v16[0]);
  Hasher._combine(_:)(v16[1]);
  Hasher._combine(_:)(v16[2] & 1);
  v9 = *(_QWORD *)&v16[8];
  v10 = v17;
  sub_10011C7C0((uint64_t)v16);
  Data.hash(into:)(a1, v9, v10, v11);
  sub_100093F8C((uint64_t)v16);
  v15 = *(_OWORD *)(v2 + 32);
  v12 = v15;
  sub_100184F84((uint64_t)&v15);
  Data.hash(into:)(a1, v12, *((_QWORD *)&v12 + 1), v13);
  return sub_100184FB0((uint64_t)&v15);
}

uint64_t sub_1001B01EC()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x6962616C69617661;
  if (*v0 != 1)
    v1 = 0x44496873656DLL;
  if (*v0)
    return v1;
  else
    return 0x657264644163616DLL;
}

uint64_t sub_1001B0250@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1001EBDC0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1001B0274(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001DAA84();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001B029C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001DAA84();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NANAttribute.Mesh.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  __int128 v16;
  uint64_t v17;
  char v18;

  v3 = v1;
  v5 = sub_100012C44(&qword_10040A5B8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin();
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10003259C(a1, v9);
  v11 = sub_1001DAA84();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for NANAttribute.Mesh.CodingKeys, &type metadata for NANAttribute.Mesh.CodingKeys, v11, v9, v10);
  LODWORD(v16) = *(_DWORD *)v3;
  WORD2(v16) = *(_WORD *)(v3 + 4);
  v18 = 0;
  v12 = sub_100039C34();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v16, &v18, v5, &type metadata for WiFiAddress, v12);
  if (!v2)
  {
    v16 = *(_OWORD *)(v3 + 8);
    v17 = *(_QWORD *)(v3 + 24);
    v18 = 1;
    v13 = sub_1001DA930();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v16, &v18, v5, &type metadata for DeprecatedNANAvailability, v13);
    v16 = *(_OWORD *)(v3 + 32);
    v18 = 2;
    v14 = sub_1001DAAC8();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v16, &v18, v5, &type metadata for BinaryDecoder.DataCopy, v14);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

Swift::Int NANAttribute.Mesh.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  Swift::UInt8 v2;
  Swift::UInt8 v3;
  Swift::UInt8 v4;
  Swift::UInt8 v5;
  Swift::UInt8 v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  __int128 v10;
  __n128 v11;
  _QWORD v13[9];
  __int128 v14;
  Swift::UInt8 v15[16];
  uint64_t v16;

  v1 = v0;
  Hasher.init(_seed:)(v13);
  v2 = *(_BYTE *)(v0 + 1);
  v3 = *(_BYTE *)(v0 + 2);
  v4 = *(_BYTE *)(v0 + 3);
  v5 = *(_BYTE *)(v0 + 4);
  v6 = *(_BYTE *)(v0 + 5);
  Hasher._combine(_:)(*(_BYTE *)v0);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  *(_OWORD *)v15 = *(_OWORD *)(v0 + 8);
  v16 = *(_QWORD *)(v0 + 24);
  Hasher._combine(_:)(v15[0]);
  Hasher._combine(_:)(v15[1]);
  Hasher._combine(_:)(v15[2] & 1);
  v7 = *(_QWORD *)&v15[8];
  v8 = v16;
  sub_10011C7C0((uint64_t)v15);
  Data.hash(into:)(v13, v7, v8, v9);
  sub_100093F8C((uint64_t)v15);
  v14 = *(_OWORD *)(v1 + 32);
  v10 = v14;
  sub_100184F84((uint64_t)&v14);
  Data.hash(into:)(v13, v10, *((_QWORD *)&v10 + 1), v11);
  sub_100184FB0((uint64_t)&v14);
  return Hasher._finalize()();
}

double NANAttribute.Mesh.init(from:)@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  __int128 v7;

  sub_1001D7798(a1, (uint64_t)v6);
  if (!v2)
  {
    v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
    result = *(double *)&v7;
    a2[2] = v7;
  }
  return result;
}

uint64_t sub_1001B05D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  Swift::UInt8 v8;
  Swift::UInt8 v9;
  Swift::UInt8 v10;
  Swift::UInt8 v11;
  Swift::UInt8 v12;
  __n128 v13;
  __n128 v14;
  Swift::UInt8 v16;
  Swift::UInt8 v17;
  Swift::UInt8 v18;

  v2 = v1;
  v4 = *(_QWORD *)(v2 + 16);
  v5 = *(_QWORD *)(v2 + 24);
  v6 = *(_QWORD *)(v2 + 32);
  v7 = *(_QWORD *)(v2 + 40);
  v8 = *(_BYTE *)(v2 + 1);
  v9 = *(_BYTE *)(v2 + 2);
  v10 = *(_BYTE *)(v2 + 3);
  v11 = *(_BYTE *)(v2 + 4);
  v12 = *(_BYTE *)(v2 + 5);
  v16 = *(_BYTE *)(v2 + 8);
  v17 = *(_BYTE *)(v2 + 9);
  v18 = *(_BYTE *)(v2 + 10);
  Hasher._combine(_:)(*(_BYTE *)v2);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(v11);
  Hasher._combine(_:)(v12);
  Hasher._combine(_:)(v16);
  Hasher._combine(_:)(v17);
  Hasher._combine(_:)(v18);
  sub_100031FEC(v4, v5);
  Data.hash(into:)(a1, v4, v5, v13);
  sub_10000E614(v4, v5);
  sub_100031FEC(v6, v7);
  Data.hash(into:)(a1, v6, v7, v14);
  return sub_10000E614(v6, v7);
}

Swift::Int sub_1001B06DC()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  Swift::UInt8 v5;
  Swift::UInt8 v6;
  Swift::UInt8 v7;
  Swift::UInt8 v8;
  Swift::UInt8 v9;
  __n128 v10;
  __n128 v11;
  Swift::UInt8 v13;
  Swift::UInt8 v14;
  Swift::UInt8 v15;
  Swift::UInt8 v16;
  _QWORD v17[9];

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24);
  v3 = *(_QWORD *)(v0 + 32);
  v4 = *(_QWORD *)(v0 + 40);
  v5 = *(_BYTE *)v0;
  v6 = *(_BYTE *)(v0 + 1);
  v7 = *(_BYTE *)(v0 + 2);
  v8 = *(_BYTE *)(v0 + 3);
  v9 = *(_BYTE *)(v0 + 4);
  v13 = *(_BYTE *)(v0 + 5);
  v14 = *(_BYTE *)(v0 + 8);
  v15 = *(_BYTE *)(v0 + 9);
  v16 = *(_BYTE *)(v0 + 10);
  Hasher.init(_seed:)(v17);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v13);
  Hasher._combine(_:)(v14);
  Hasher._combine(_:)(v15);
  Hasher._combine(_:)(v16);
  sub_100031FEC(v1, v2);
  Data.hash(into:)(v17, v1, v2, v10);
  sub_10000E614(v1, v2);
  sub_100031FEC(v3, v4);
  Data.hash(into:)(v17, v3, v4, v11);
  sub_10000E614(v3, v4);
  return Hasher._finalize()();
}

uint64_t sub_1001B081C(_QWORD *a1)
{
  return NANAttribute.Mesh.encode(to:)(a1);
}

uint64_t sub_1001B0830(_OWORD *a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  char v6;
  _OWORD v8[3];
  _OWORD v9[3];

  v2 = a1[1];
  v8[0] = *a1;
  v8[1] = v2;
  v3 = *a2;
  v4 = a2[1];
  v8[2] = a1[2];
  v9[0] = v3;
  v5 = a2[2];
  v9[1] = v4;
  v9[2] = v5;
  _s7CoreP2P12NANAttributeO4MeshV23__derived_struct_equalsySbAE_AEtFZ_0((uint64_t)v8, (uint64_t)v9);
  return v6 & 1;
}

uint64_t NANAttribute.FurtherServiceDiscovery.availability.getter(int a1, uint64_t a2, unint64_t a3)
{
  sub_100031FEC(a2, a3);
  return a1 & 0x1FFFF;
}

uint64_t NANAttribute.FurtherServiceDiscovery.availability.setter(unsigned int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unsigned int v7;
  uint64_t result;

  v7 = a1 >> 8;
  result = sub_10000E614(*(_QWORD *)(v3 + 8), *(_QWORD *)(v3 + 16));
  *(_BYTE *)v3 = a1;
  *(_BYTE *)(v3 + 1) = v7;
  *(_BYTE *)(v3 + 2) = BYTE2(a1) & 1;
  *(_QWORD *)(v3 + 8) = a2;
  *(_QWORD *)(v3 + 16) = a3;
  return result;
}

BOOL static NANAttribute.FurtherServiceDiscovery.__derived_struct_equals(_:_:)(int a1, uint64_t a2, uint64_t a3, int a4)
{
  char v4;
  _BOOL8 result;

  result = 0;
  if ((unsigned __int16)a1 == (unsigned __int16)a4 && ((a1 ^ a4) & 0x10000) == 0)
  {
    _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(a2, a3);
    if ((v4 & 1) != 0)
      return 1;
  }
  return result;
}

uint64_t sub_1001B0958()
{
  return 0x6962616C69617661;
}

uint64_t sub_1001B0978@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v6;
  uint64_t result;
  char v8;

  if (a1 == 0x6962616C69617661 && a2 == 0xEC0000007974696CLL)
  {
    result = swift_bridgeObjectRelease(0xEC0000007974696CLL);
    v8 = 0;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6962616C69617661, 0xEC0000007974696CLL, a1, a2, 0);
    result = swift_bridgeObjectRelease(a2);
    v8 = v6 ^ 1;
  }
  *a3 = v8 & 1;
  return result;
}

uint64_t sub_1001B0A24(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001DAB0C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001B0A4C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001DAB0C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NANAttribute.FurtherServiceDiscovery.encode(to:)(_QWORD *a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v18;
  _BYTE v19[8];
  uint64_t v20;
  uint64_t v21;

  v18 = a4;
  v7 = a2 >> 8;
  v8 = sub_100012C44(&qword_10040A5D0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin();
  v11 = &v19[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v12 = a1[3];
  v13 = a1[4];
  sub_10003259C(a1, v12);
  v14 = sub_1001DAB0C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for NANAttribute.FurtherServiceDiscovery.CodingKeys, &type metadata for NANAttribute.FurtherServiceDiscovery.CodingKeys, v14, v12, v13);
  v19[0] = a2;
  v19[1] = v7;
  v19[2] = BYTE2(a2) & 1;
  v20 = a3;
  v21 = v18;
  v15 = sub_1001DA930();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v19, v16, v8, &type metadata for DeprecatedNANAvailability, v15);
  return (*(uint64_t (**)(_BYTE *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t NANAttribute.FurtherServiceDiscovery.init(from:)(_QWORD *a1)
{
  return sub_1001D68C8(a1) & 0x1FFFF;
}

uint64_t sub_1001B0BBC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  result = sub_1001D68C8(a1);
  if (!v2)
  {
    *(_WORD *)a2 = result;
    *(_BYTE *)(a2 + 2) = BYTE2(result) & 1;
    *(_QWORD *)(a2 + 8) = v5;
    *(_QWORD *)(a2 + 16) = v6;
  }
  return result;
}

uint64_t sub_1001B0BF8(_QWORD *a1)
{
  unsigned __int16 *v1;
  int v2;

  if (*((_BYTE *)v1 + 2))
    v2 = 0x10000;
  else
    v2 = 0;
  return NANAttribute.FurtherServiceDiscovery.encode(to:)(a1, *v1 | v2, *((_QWORD *)v1 + 1), *((_QWORD *)v1 + 2));
}

BOOL sub_1001B0C28(unsigned __int8 *a1, unsigned __int8 *a2)
{
  BOOL v2;
  char v3;
  _BOOL8 result;

  v2 = *a1 == *a2 && a1[1] == a2[1];
  result = 0;
  if (v2 && ((a1[2] ^ a2[2]) & 1) == 0)
  {
    _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(*((_QWORD *)a1 + 1), *((_QWORD *)a1 + 2));
    if ((v3 & 1) != 0)
      return 1;
  }
  return result;
}

double NANAttribute.FurtherAvailabilityMap.hash(into:)(uint64_t a1, Swift::UInt8 a2, uint64_t a3)
{
  double result;

  Hasher._combine(_:)(a2);
  swift_bridgeObjectRetain(a3);
  sub_10008EAB0(a1, a3);
  *(_QWORD *)&result = swift_bridgeObjectRelease(a3).n128_u64[0];
  return result;
}

uint64_t static NANAttribute.FurtherAvailabilityMap.__derived_struct_equals(_:_:)(char a1, uint64_t a2, char a3, uint64_t a4)
{
  return sub_1001BD660(a1, a2, a3, a4, sub_100086A54);
}

uint64_t sub_1001B0CD0()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000013;
  else
    return 0x444970616DLL;
}

uint64_t sub_1001B0D0C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1001EBF30(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1001B0D30(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001DAB50();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001B0D58(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001DAB50();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NANAttribute.FurtherAvailabilityMap.encode(to:)(_QWORD *a1, char a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  char v22;

  v7 = sub_100012C44(&qword_10040A5E0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin();
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a1[3];
  v12 = a1[4];
  sub_10003259C(a1, v11);
  v13 = sub_1001DAB50();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for NANAttribute.FurtherAvailabilityMap.CodingKeys, &type metadata for NANAttribute.FurtherAvailabilityMap.CodingKeys, v13, v11, v12);
  v22 = a2;
  v21 = 0;
  v14 = sub_100092ABC();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v22, &v21, v7, &type metadata for NANMapID, v14);
  if (!v3)
  {
    v19 = a3;
    v20 = 1;
    v15 = sub_100012C44(&qword_10040A5F0);
    v16 = sub_1000934A0(&qword_10040A5F8, &qword_10040A5F0, (uint64_t (*)(void))sub_1001DAB94, (const char *)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v19, &v20, v7, v15, v16);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

Swift::Int NANAttribute.FurtherAvailabilityMap.hashValue.getter(Swift::UInt8 a1, uint64_t a2)
{
  _QWORD v5[9];

  Hasher.init(_seed:)(v5);
  Hasher._combine(_:)(a1);
  swift_bridgeObjectRetain(a2);
  sub_10008EAB0((uint64_t)v5, a2);
  swift_bridgeObjectRelease(a2);
  return Hasher._finalize()();
}

uint64_t NANAttribute.FurtherAvailabilityMap.init(from:)(_QWORD *a1)
{
  return sub_1001D6654(a1);
}

Swift::Int sub_1001B0F74()
{
  uint64_t v0;
  uint64_t v1;
  Swift::UInt8 v2;
  _QWORD v4[9];

  v1 = *(_QWORD *)(v0 + 8);
  v2 = *(_BYTE *)v0;
  Hasher.init(_seed:)(v4);
  Hasher._combine(_:)(v2);
  swift_bridgeObjectRetain(v1);
  sub_10008EAB0((uint64_t)v4, v1);
  swift_bridgeObjectRelease(v1);
  return Hasher._finalize()();
}

double sub_1001B0FE0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  double result;

  v3 = *(_QWORD *)(v1 + 8);
  Hasher._combine(_:)(*(_BYTE *)v1);
  swift_bridgeObjectRetain(v3);
  sub_10008EAB0(a1, v3);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v3).n128_u64[0];
  return result;
}

Swift::Int sub_1001B102C()
{
  uint64_t v0;
  uint64_t v1;
  Swift::UInt8 v2;
  _QWORD v4[9];

  v1 = *(_QWORD *)(v0 + 8);
  v2 = *(_BYTE *)v0;
  Hasher.init(_seed:)(v4);
  Hasher._combine(_:)(v2);
  swift_bridgeObjectRetain(v1);
  sub_10008EAB0((uint64_t)v4, v1);
  swift_bridgeObjectRelease(v1);
  return Hasher._finalize()();
}

uint64_t sub_1001B1094@<X0>(uint64_t a1@<X8>)
{
  return sub_1001BD9CC((uint64_t (*)(void))sub_1001D6654, a1);
}

uint64_t sub_1001B10B0(_QWORD *a1)
{
  uint64_t v1;

  return NANAttribute.FurtherAvailabilityMap.encode(to:)(a1, *(_BYTE *)v1, *(_QWORD *)(v1 + 8));
}

uint64_t sub_1001B10CC(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  return sub_1001BDA20(a1, a2, a3, a4, sub_100086A54);
}

uint64_t NANAttribute.Ranging.hash(into:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __n128 v12;

  v7 = a2 >> 8;
  v8 = a2 >> 16;
  v9 = a2 >> 24;
  v10 = HIDWORD(a2);
  v11 = a2 >> 40;
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(v11);
  sub_100031FEC(a3, a4);
  Data.hash(into:)(a1, a3, a4, v12);
  return sub_10000E614(a3, a4);
}

void static NANAttribute.Ranging.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __int16 v5;
  __int16 v6;

  LOBYTE(v6) = BYTE4(a1);
  HIBYTE(v6) = BYTE5(a1);
  LOBYTE(v5) = BYTE4(a4);
  HIBYTE(v5) = BYTE5(a4);
  if ((_DWORD)a1 == (_DWORD)a4 && v6 == v5)
    _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(a2, a3);
}

uint64_t sub_1001B1240()
{
  _BYTE *v0;

  if (*v0)
    return 1635017060;
  else
    return 0x657264644163616DLL;
}

uint64_t sub_1001B1278@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1001EC014(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1001B129C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001DABD8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001B12C4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001DABD8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NANAttribute.Ranging.encode(to:)(_QWORD *a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  char v4;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[2];
  char v26;

  v19 = a3;
  v20 = a4;
  v4 = a2;
  v6 = a2 >> 8;
  v7 = a2 >> 16;
  v8 = a2 >> 24;
  v21 = HIDWORD(a2);
  v22 = a2 >> 40;
  v9 = sub_100012C44(&qword_10040A608);
  v24 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin();
  v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  sub_10003259C(a1, v12);
  v14 = sub_1001DABD8();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for NANAttribute.Ranging.CodingKeys, &type metadata for NANAttribute.Ranging.CodingKeys, v14, v12, v13);
  LOBYTE(v25[0]) = v4;
  BYTE1(v25[0]) = v6;
  BYTE2(v25[0]) = v7;
  BYTE3(v25[0]) = v8;
  BYTE4(v25[0]) = v21;
  BYTE5(v25[0]) = v22;
  v26 = 0;
  v15 = sub_100039C34();
  v16 = v23;
  KeyedEncodingContainer.encode<A>(_:forKey:)(v25, &v26, v9, &type metadata for WiFiAddress, v15);
  if (!v16)
  {
    v25[0] = v19;
    v25[1] = v20;
    v26 = 1;
    v17 = sub_1001DAAC8();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v25, &v26, v9, &type metadata for BinaryDecoder.DataCopy, v17);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v11, v9);
}

Swift::Int NANAttribute.Ranging.hashValue.getter(unint64_t a1, uint64_t a2, unint64_t a3)
{
  Swift::UInt8 v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  __n128 v11;
  _QWORD v13[9];

  v5 = a1;
  v6 = a1 >> 8;
  v7 = a1 >> 16;
  v8 = a1 >> 24;
  v9 = HIDWORD(a1);
  v10 = a1 >> 40;
  Hasher.init(_seed:)(v13);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  sub_100031FEC(a2, a3);
  Data.hash(into:)(v13, a2, a3, v11);
  sub_10000E614(a2, a3);
  return Hasher._finalize()();
}

uint64_t NANAttribute.Ranging.init(from:)(_QWORD *a1)
{
  return sub_1001D7C7C(a1) & 0xFFFFFFFFFFFFLL;
}

Swift::Int sub_1001B1584()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  Swift::UInt8 v3;
  Swift::UInt8 v4;
  Swift::UInt8 v5;
  Swift::UInt8 v6;
  Swift::UInt8 v7;
  Swift::UInt8 v8;
  __n128 v9;
  _QWORD v11[9];

  v1 = *(_QWORD *)(v0 + 8);
  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_BYTE *)v0;
  v4 = *(_BYTE *)(v0 + 1);
  v5 = *(_BYTE *)(v0 + 2);
  v6 = *(_BYTE *)(v0 + 3);
  v7 = *(_BYTE *)(v0 + 4);
  v8 = *(_BYTE *)(v0 + 5);
  Hasher.init(_seed:)(v11);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  sub_100031FEC(v1, v2);
  Data.hash(into:)(v11, v1, v2, v9);
  sub_10000E614(v1, v2);
  return Hasher._finalize()();
}

uint64_t sub_1001B1664(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  Swift::UInt8 v5;
  Swift::UInt8 v6;
  Swift::UInt8 v7;
  Swift::UInt8 v8;
  Swift::UInt8 v9;
  __n128 v10;

  v3 = *(_QWORD *)(v1 + 8);
  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_BYTE *)(v1 + 1);
  v6 = *(_BYTE *)(v1 + 2);
  v7 = *(_BYTE *)(v1 + 3);
  v8 = *(_BYTE *)(v1 + 4);
  v9 = *(_BYTE *)(v1 + 5);
  Hasher._combine(_:)(*(_BYTE *)v1);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  sub_100031FEC(v3, v4);
  Data.hash(into:)(a1, v3, v4, v10);
  return sub_10000E614(v3, v4);
}

Swift::Int sub_1001B1710()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  Swift::UInt8 v3;
  Swift::UInt8 v4;
  Swift::UInt8 v5;
  Swift::UInt8 v6;
  Swift::UInt8 v7;
  Swift::UInt8 v8;
  __n128 v9;
  _QWORD v11[9];

  v1 = *(_QWORD *)(v0 + 8);
  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_BYTE *)v0;
  v4 = *(_BYTE *)(v0 + 1);
  v5 = *(_BYTE *)(v0 + 2);
  v6 = *(_BYTE *)(v0 + 3);
  v7 = *(_BYTE *)(v0 + 4);
  v8 = *(_BYTE *)(v0 + 5);
  Hasher.init(_seed:)(v11);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  sub_100031FEC(v1, v2);
  Data.hash(into:)(v11, v1, v2, v9);
  sub_10000E614(v1, v2);
  return Hasher._finalize()();
}

uint64_t sub_1001B17EC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  result = sub_1001D7C7C(a1);
  if (!v2)
  {
    *(_WORD *)a2 = result;
    *(_BYTE *)(a2 + 2) = BYTE2(result);
    *(_BYTE *)(a2 + 3) = BYTE3(result);
    *(_BYTE *)(a2 + 4) = BYTE4(result);
    *(_BYTE *)(a2 + 5) = BYTE5(result);
    *(_QWORD *)(a2 + 8) = v5;
    *(_QWORD *)(a2 + 16) = v6;
  }
  return result;
}

uint64_t sub_1001B1840(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001B2158(a1, a2, a3, (uint64_t (*)(uint64_t, unint64_t, _QWORD, _QWORD))NANAttribute.Ranging.encode(to:));
}

void sub_1001B185C(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;

  v3 = *(unsigned __int16 *)(a1 + 4);
  v4 = *(_QWORD *)(a1 + 8);
  if (*(_DWORD *)a1 == *(_DWORD *)a2 && v3 == *(unsigned __int16 *)(a2 + 4))
    _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(v4, *(_QWORD *)(a1 + 16));
}

void NANAttribute.ClusterDiscovery.hash(into:)(int a1, unint64_t a2, Swift::UInt64 a3, unint64_t a4)
{
  Swift::UInt8 v4;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  Swift::UInt8 v13[8];
  Swift::UInt8 v14[8];
  Swift::UInt8 v15[8];
  Swift::UInt8 v16[8];
  Swift::UInt8 v17[8];

  v4 = a4;
  v6 = a2 >> 8;
  v7 = a2 >> 16;
  v8 = a2 >> 24;
  v9 = HIDWORD(a2);
  v10 = a2 >> 40;
  v11 = a4 >> 8;
  v12 = a4 >> 16;
  *(_QWORD *)v13 = a4 >> 24;
  *(_QWORD *)v14 = HIDWORD(a4);
  *(_QWORD *)v15 = a4 >> 40;
  *(_QWORD *)v16 = HIWORD(a4);
  *(_QWORD *)v17 = HIBYTE(a4);
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(a3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v11);
  Hasher._combine(_:)(v12);
  Hasher._combine(_:)(v13[0]);
  Hasher._combine(_:)(v14[0]);
  Hasher._combine(_:)(v15[0]);
  Hasher._combine(_:)(v16[0]);
  Hasher._combine(_:)(v17[0]);
}

BOOL static NANAttribute.ClusterDiscovery.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return sub_1001CFB7C(a1 & 0xFFFFFFFFFFFFLL, a2, a3, a4 & 0xFFFFFFFFFFFFLL, a5, a6);
}

uint64_t sub_1001B1A0C()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0x7366664F656D6974;
  if (*v0 != 1)
    v1 = 0xD000000000000010;
  if (*v0)
    return v1;
  else
    return 0x4972657473756C63;
}

uint64_t sub_1001B1A74@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1001EC100(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1001B1A98(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001DAC1C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001B1AC0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001DAC1C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NANAttribute.ClusterDiscovery.encode(to:)(_QWORD *a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  char v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;

  v21 = a4;
  v22 = a3;
  v4 = a2;
  v6 = a2 >> 8;
  v7 = a2 >> 16;
  v23 = a2 >> 24;
  v24 = HIDWORD(a2);
  v25 = a2 >> 40;
  v8 = sub_100012C44(&qword_10040A618);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin();
  v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  sub_10003259C(a1, v12);
  v14 = sub_1001DAC1C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for NANAttribute.ClusterDiscovery.CodingKeys, &type metadata for NANAttribute.ClusterDiscovery.CodingKeys, v14, v12, v13);
  LOBYTE(v27) = v4;
  BYTE1(v27) = v6;
  BYTE2(v27) = v7;
  BYTE3(v27) = v23;
  BYTE4(v27) = v24;
  BYTE5(v27) = v25;
  v28 = 0;
  v15 = sub_100039C34();
  v16 = v26;
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v27, &v28, v8, &type metadata for WiFiAddress, v15);
  if (!v16)
  {
    v17 = v21;
    LOBYTE(v27) = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v22, &v27, v8);
    v27 = v17;
    v28 = 2;
    v18 = sub_1001D5BA4();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v27, &v28, v8, &type metadata for NANMasterRank, v18);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

Swift::Int NANAttribute.ClusterDiscovery.hashValue.getter(unint64_t a1, Swift::UInt64 a2, unint64_t a3)
{
  Swift::UInt8 v3;
  Swift::UInt8 v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  Swift::UInt8 v13[8];
  Swift::UInt8 v14[8];
  Swift::UInt8 v15[8];
  Swift::UInt8 v16[8];
  Swift::UInt8 v17[8];
  Swift::UInt8 v18[8];
  _QWORD v19[9];

  v3 = a3;
  v5 = a1;
  v6 = a1 >> 8;
  v7 = a1 >> 16;
  v8 = a1 >> 24;
  v9 = HIDWORD(a1);
  v10 = a1 >> 40;
  v11 = a3 >> 8;
  *(_QWORD *)v13 = a3 >> 16;
  *(_QWORD *)v14 = a3 >> 24;
  *(_QWORD *)v15 = HIDWORD(a3);
  *(_QWORD *)v16 = a3 >> 40;
  *(_QWORD *)v17 = HIWORD(a3);
  *(_QWORD *)v18 = HIBYTE(a3);
  Hasher.init(_seed:)(v19);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v11);
  Hasher._combine(_:)(v13[0]);
  Hasher._combine(_:)(v14[0]);
  Hasher._combine(_:)(v15[0]);
  Hasher._combine(_:)(v16[0]);
  Hasher._combine(_:)(v17[0]);
  Hasher._combine(_:)(v18[0]);
  return Hasher._finalize()();
}

uint64_t NANAttribute.ClusterDiscovery.init(from:)(_QWORD *a1)
{
  return sub_1001D53CC(a1) & 0xFFFFFFFFFFFFLL;
}

Swift::Int sub_1001B1E40()
{
  unsigned int *v0;

  return NANAttribute.ClusterDiscovery.hashValue.getter(*v0 | ((unint64_t)*((unsigned __int8 *)v0 + 4) << 32) | ((unint64_t)*((unsigned __int8 *)v0 + 5) << 40), *((_QWORD *)v0 + 1), *((_QWORD *)v0 + 2));
}

void sub_1001B1E5C()
{
  uint64_t v0;
  Swift::UInt64 v1;
  Swift::UInt8 v2;
  Swift::UInt8 v3;
  Swift::UInt8 v4;
  Swift::UInt8 v5;
  Swift::UInt8 v6;
  Swift::UInt8 v7;
  Swift::UInt8 v8;
  Swift::UInt8 v9;
  Swift::UInt8 v10;
  Swift::UInt8 v11;
  Swift::UInt8 v12;
  Swift::UInt8 v13;
  Swift::UInt8 v14;

  v1 = *(_QWORD *)(v0 + 8);
  v2 = *(_BYTE *)(v0 + 1);
  v3 = *(_BYTE *)(v0 + 2);
  v4 = *(_BYTE *)(v0 + 3);
  v5 = *(_BYTE *)(v0 + 4);
  v6 = *(_BYTE *)(v0 + 5);
  v7 = *(_BYTE *)(v0 + 16);
  v8 = *(_BYTE *)(v0 + 17);
  v9 = *(_BYTE *)(v0 + 18);
  v10 = *(_BYTE *)(v0 + 19);
  v11 = *(_BYTE *)(v0 + 20);
  v12 = *(_BYTE *)(v0 + 21);
  v13 = *(_BYTE *)(v0 + 22);
  v14 = *(_BYTE *)(v0 + 23);
  Hasher._combine(_:)(*(_BYTE *)v0);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(v11);
  Hasher._combine(_:)(v12);
  Hasher._combine(_:)(v13);
  Hasher._combine(_:)(v14);
}

Swift::Int sub_1001B1F60()
{
  uint64_t v0;
  Swift::UInt64 v1;
  Swift::UInt8 v2;
  Swift::UInt8 v3;
  Swift::UInt8 v4;
  Swift::UInt8 v5;
  Swift::UInt8 v6;
  Swift::UInt8 v7;
  Swift::UInt8 v8;
  Swift::UInt8 v9;
  Swift::UInt8 v11;
  Swift::UInt8 v12;
  Swift::UInt8 v13;
  Swift::UInt8 v14;
  Swift::UInt8 v15;
  Swift::UInt8 v16;
  _QWORD v17[9];

  v1 = *(_QWORD *)(v0 + 8);
  v2 = *(_BYTE *)v0;
  v3 = *(_BYTE *)(v0 + 1);
  v4 = *(_BYTE *)(v0 + 2);
  v5 = *(_BYTE *)(v0 + 3);
  v6 = *(_BYTE *)(v0 + 4);
  v7 = *(_BYTE *)(v0 + 5);
  v8 = *(_BYTE *)(v0 + 16);
  v9 = *(_BYTE *)(v0 + 17);
  v11 = *(_BYTE *)(v0 + 18);
  v12 = *(_BYTE *)(v0 + 19);
  v13 = *(_BYTE *)(v0 + 20);
  v14 = *(_BYTE *)(v0 + 21);
  v15 = *(_BYTE *)(v0 + 22);
  v16 = *(_BYTE *)(v0 + 23);
  Hasher.init(_seed:)(v17);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v11);
  Hasher._combine(_:)(v12);
  Hasher._combine(_:)(v13);
  Hasher._combine(_:)(v14);
  Hasher._combine(_:)(v15);
  Hasher._combine(_:)(v16);
  return Hasher._finalize()();
}

uint64_t sub_1001B20AC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  result = sub_1001D53CC(a1);
  if (!v2)
  {
    *(_WORD *)a2 = result;
    *(_BYTE *)(a2 + 2) = BYTE2(result);
    *(_BYTE *)(a2 + 3) = BYTE3(result);
    *(_BYTE *)(a2 + 4) = BYTE4(result);
    *(_BYTE *)(a2 + 5) = BYTE5(result);
    *(_QWORD *)(a2 + 8) = v5;
    *(_QWORD *)(a2 + 16) = v6;
  }
  return result;
}

uint64_t sub_1001B213C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001B2158(a1, a2, a3, (uint64_t (*)(uint64_t, unint64_t, _QWORD, _QWORD))NANAttribute.ClusterDiscovery.encode(to:));
}

uint64_t sub_1001B2158(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, unint64_t, _QWORD, _QWORD))
{
  unsigned int *v4;

  return a4(a1, *v4 | ((unint64_t)*((unsigned __int8 *)v4 + 4) << 32) | ((unint64_t)*((unsigned __int8 *)v4 + 5) << 40), *((_QWORD *)v4 + 1), *((_QWORD *)v4 + 2));
}

BOOL sub_1001B2188(unsigned int *a1, unsigned int *a2)
{
  return sub_1001CFB7C(*a1 | ((unint64_t)*((unsigned __int8 *)a1 + 4) << 32) | ((unint64_t)*((unsigned __int8 *)a1 + 5) << 40), *((_QWORD *)a1 + 1), *((_QWORD *)a1 + 2), *a2 | ((unint64_t)*((unsigned __int8 *)a2 + 4) << 32) | ((unint64_t)*((unsigned __int8 *)a2 + 5) << 40), *((_QWORD *)a2 + 1), *((_QWORD *)a2 + 2));
}

void NANAttribute.DeviceCapability.CommittedDiscoveryWindowInformation.hash(into:)(int a1, Swift::UInt16 a2)
{
  Hasher._combine(_:)(a2);
}

uint64_t sub_1001B21E8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001DAC60();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001B2210(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001DAC60();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NANAttribute.DeviceCapability.CommittedDiscoveryWindowInformation.encode(to:)(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v4 = sub_100012C44(&qword_10040A628);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin();
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a1[3];
  v9 = a1[4];
  sub_10003259C(a1, v8);
  v10 = sub_1001DAC60();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for NANAttribute.DeviceCapability.CommittedDiscoveryWindowInformation.CodingKeys, &type metadata for NANAttribute.DeviceCapability.CommittedDiscoveryWindowInformation.CodingKeys, v10, v8, v9);
  KeyedEncodingContainer.encode(_:forKey:)(a2, v11, v4);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

Swift::Int NANAttribute.DeviceCapability.CommittedDiscoveryWindowInformation.hashValue.getter(Swift::UInt16 a1)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(a1);
  return Hasher._finalize()();
}

_QWORD *NANAttribute.DeviceCapability.CommittedDiscoveryWindowInformation.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v3 = sub_100012C44(&qword_10040A638);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin();
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  v9 = sub_10003259C(a1, v7);
  v10 = sub_1001DAC60();
  v11 = dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for NANAttribute.DeviceCapability.CommittedDiscoveryWindowInformation.CodingKeys, &type metadata for NANAttribute.DeviceCapability.CommittedDiscoveryWindowInformation.CodingKeys, v10, v7, v8);
  if (!v1)
  {
    v9 = (_QWORD *)KeyedDecodingContainer.decode(_:forKey:)(v11, v3);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  sub_100014430(a1);
  return v9;
}

uint64_t sub_1001B2460@<X0>(_QWORD *a1@<X0>, _WORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  __int16 v13;
  uint64_t result;
  uint64_t v15;

  v5 = sub_100012C44(&qword_10040A638);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin();
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10003259C(a1, v9);
  v11 = sub_1001DAC60();
  v12 = dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for NANAttribute.DeviceCapability.CommittedDiscoveryWindowInformation.CodingKeys, &type metadata for NANAttribute.DeviceCapability.CommittedDiscoveryWindowInformation.CodingKeys, v11, v9, v10);
  if (v2)
    return sub_100014430(a1);
  v13 = KeyedDecodingContainer.decode(_:forKey:)(v12, v5);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  result = sub_100014430(a1);
  *a2 = v13;
  return result;
}

uint64_t sub_1001B2570(_QWORD *a1)
{
  unsigned __int16 *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v3 = sub_100012C44(&qword_10040A628);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin();
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  v9 = *v1;
  sub_10003259C(a1, v7);
  v10 = sub_1001DAC60();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for NANAttribute.DeviceCapability.CommittedDiscoveryWindowInformation.CodingKeys, &type metadata for NANAttribute.DeviceCapability.CommittedDiscoveryWindowInformation.CodingKeys, v10, v7, v8);
  KeyedEncodingContainer.encode(_:forKey:)(v9, v11, v3);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

void *NANAttribute.DeviceCapability.OperationMode.vht80_80.unsafeMutableAddressor()
{
  return &static NANAttribute.DeviceCapability.OperationMode.vht80_80;
}

void *NANAttribute.DeviceCapability.OperationMode.vht_160.unsafeMutableAddressor()
{
  return &static NANAttribute.DeviceCapability.OperationMode.vht_160;
}

void *NANAttribute.DeviceCapability.OperationMode.ndlPaging.unsafeMutableAddressor()
{
  return &static NANAttribute.DeviceCapability.OperationMode.ndlPaging;
}

uint64_t sub_1001B267C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1001DDC5C();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1001B26D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1001DDC5C();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t NANAttribute.DeviceCapability.AnntenaCount.txAntennaCount.getter(uint64_t a1)
{
  return sub_1001B7904(a1, 0, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_10007CD20);
}

uint64_t NANAttribute.DeviceCapability.AnntenaCount.rxAntennaCount.getter(uint64_t a1)
{
  return sub_1001B7904(a1, 4, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_10007CD20);
}

uint64_t sub_1001B274C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1001DDD7C();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1001B27A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1001DDD7C();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(uint64_t a1)
{
  return sub_10000D69C(a1, (uint64_t *)&unk_10040B0C0, (uint64_t)&nominal type descriptor for NANAttribute.CustomDeviceInformation.CustomAttributes);
}

void *NANAttribute.DeviceCapability.Capabilities.dfsMaster.unsafeMutableAddressor()
{
  return &static NANAttribute.DeviceCapability.Capabilities.dfsMaster;
}

void *NANAttribute.DeviceCapability.Capabilities.extendedIDKey.unsafeMutableAddressor()
{
  return &static NANAttribute.DeviceCapability.Capabilities.extendedIDKey;
}

void *NANAttribute.DeviceCapability.Capabilities.simultaneousDatapathReception.unsafeMutableAddressor()
{
  return &static NANAttribute.DeviceCapability.Capabilities.simultaneousDatapathReception;
}

void *NANAttribute.DeviceCapability.Capabilities.extendedNANDatapath.unsafeMutableAddressor()
{
  return &static NANAttribute.DeviceCapability.Capabilities.extendedNANDatapath;
}

void *NANAttribute.DeviceCapability.Capabilities.s3Capable.unsafeMutableAddressor()
{
  return &static NANAttribute.DeviceCapability.Capabilities.s3Capable;
}

uint64_t sub_1001B2844(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1001DDE9C();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1001B28A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1001DDE9C();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t NANAttribute.ElementContainer.mapIDs.setter(uint64_t result)
{
  _BYTE *v1;

  *v1 = result;
  v1[1] = BYTE1(result) & 1;
  return result;
}

uint64_t NANAttribute.DeviceCapability.maximumChannelSwitchTime.getter@<X0>(unsigned __int16 a1@<W1>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;

  *a2 = a1;
  v3 = enum case for DispatchTimeInterval.microseconds(_:);
  v4 = type metadata accessor for DispatchTimeInterval(0);
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 104))(a2, v3, v4);
}

uint64_t NANAttribute.Datapath.control.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 10) = result;
  return result;
}

void NANAttribute.DeviceCapability.hash(into:)(uint64_t a1, unint64_t a2, unsigned int a3)
{
  Swift::UInt16 v3;
  unsigned int v4;
  unint64_t v5;
  unint64_t v6;
  Swift::UInt8 v7;
  unint64_t v8;
  unint64_t v9;

  v3 = a3;
  v4 = HIWORD(a3);
  v5 = HIWORD(a2);
  v6 = a2 >> 40;
  if ((a2 & 0x100) != 0)
    v7 = 1;
  else
    v7 = 2 * a2;
  v8 = HIDWORD(a2);
  v9 = a2 >> 16;
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
}

BOOL static NANAttribute.DeviceCapability.__derived_struct_equals(_:_:)(uint64_t a1, int a2, uint64_t a3, int a4)
{
  return sub_1001CFE14(a1 & 0xFFFFFFFFFF00FFLL | ((unint64_t)(BYTE1(a1) & 1) << 8), a2 & 0xFFFFFF, a3 & 0xFFFFFFFFFF00FFLL | ((unint64_t)(BYTE1(a3) & 1) << 8), a4 & 0xFFFFFF);
}

uint64_t sub_1001B2A20(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1001B2A50 + 4 * byte_100352270[a1]))(0x444970616DLL, 0xE500000000000000);
}

unint64_t sub_1001B2A50()
{
  return 0xD000000000000023;
}

uint64_t sub_1001B2AD8()
{
  return 0x696C696261706163;
}

uint64_t sub_1001B2AF8()
{
  unsigned __int8 *v0;

  return sub_1001B2A20(*v0);
}

uint64_t sub_1001B2B00@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1001EC268(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1001B2B24(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001DACA4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001B2B4C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001DACA4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NANAttribute.DeviceCapability.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v21;
  char v22;
  char v23;
  char v24;
  char v25;
  char v26;
  char v27;
  char v28;
  char v29;
  char v30;
  __int16 v31;
  char v32;
  char v33;
  __int16 v34;

  v7 = sub_100012C44(&qword_10040A640);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin();
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a1[3];
  v12 = a1[4];
  sub_10003259C(a1, v11);
  v13 = sub_1001DACA4();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for NANAttribute.DeviceCapability.CodingKeys, &type metadata for NANAttribute.DeviceCapability.CodingKeys, v13, v11, v12);
  v34 = a2 & 0x1FF;
  v33 = 0;
  v14 = sub_1001DACE8();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v34, &v33, v7, &type metadata for NANMapIDs, v14);
  if (!v3)
  {
    v31 = WORD1(a2);
    v32 = 1;
    v15 = sub_1001DAD2C();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v31, &v32, v7, &type metadata for NANAttribute.DeviceCapability.CommittedDiscoveryWindowInformation, v15);
    v30 = BYTE4(a2);
    v29 = 2;
    v16 = sub_10009290C();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v30, &v29, v7, &type metadata for NANBitmap.Band, v16);
    v28 = BYTE5(a2);
    v27 = 3;
    v17 = sub_1001DAD70();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v28, &v27, v7, &type metadata for NANAttribute.DeviceCapability.OperationMode, v17);
    v26 = BYTE6(a2);
    v25 = 4;
    v18 = sub_1001DADB4();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v26, &v25, v7, &type metadata for NANAttribute.DeviceCapability.AnntenaCount, v18);
    v24 = 5;
    KeyedEncodingContainer.encode(_:forKey:)(a3, &v24, v7);
    v23 = BYTE2(a3);
    v22 = 6;
    v19 = sub_1001DADF8();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v23, &v22, v7, &type metadata for NANAttribute.DeviceCapability.Capabilities, v19);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

Swift::Int NANAttribute.DeviceCapability.hashValue.getter(uint64_t a1, int a2)
{
  Swift::UInt8 v4;
  _QWORD v6[9];

  Hasher.init(_seed:)(v6);
  if ((a1 & 0x100) != 0)
    v4 = 1;
  else
    v4 = 2 * a1;
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(WORD1(a1));
  Hasher._combine(_:)(BYTE4(a1));
  Hasher._combine(_:)(BYTE5(a1));
  Hasher._combine(_:)(BYTE6(a1));
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(BYTE2(a2));
  return Hasher._finalize()();
}

unint64_t NANAttribute.DeviceCapability.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  unint64_t result;

  result = sub_1001D559C(a1);
  if (!v1)
    return result & 0xFFFFFFFFFF00FFLL | ((unint64_t)(BYTE1(result) & 1) << 8);
  return result;
}

Swift::Int sub_1001B2EF4()
{
  char *v0;
  char v1;
  int v2;
  Swift::UInt16 v3;
  Swift::UInt8 v4;
  Swift::UInt8 v5;
  Swift::UInt8 v6;
  Swift::UInt16 v7;
  Swift::UInt8 v8;
  Swift::UInt8 v9;
  _QWORD v11[9];

  v1 = *v0;
  v2 = v0[1];
  v3 = *((_WORD *)v0 + 1);
  v4 = v0[4];
  v5 = v0[5];
  v6 = v0[6];
  v7 = *((_WORD *)v0 + 4);
  v8 = v0[10];
  Hasher.init(_seed:)(v11);
  if (v2)
    v9 = 1;
  else
    v9 = 2 * v1;
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  return Hasher._finalize()();
}

void sub_1001B2FC4()
{
  uint64_t v0;
  Swift::UInt16 v1;
  Swift::UInt8 v2;
  Swift::UInt8 v3;
  Swift::UInt8 v4;
  Swift::UInt16 v5;
  Swift::UInt8 v6;
  Swift::UInt8 v7;

  v1 = *(_WORD *)(v0 + 2);
  v2 = *(_BYTE *)(v0 + 4);
  v3 = *(_BYTE *)(v0 + 5);
  v4 = *(_BYTE *)(v0 + 6);
  v5 = *(_WORD *)(v0 + 8);
  v6 = *(_BYTE *)(v0 + 10);
  if ((*(_BYTE *)(v0 + 1) & 1) != 0)
    v7 = 1;
  else
    v7 = 2 * *(_BYTE *)v0;
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
}

Swift::Int sub_1001B3060()
{
  char *v0;
  char v1;
  int v2;
  Swift::UInt16 v3;
  Swift::UInt8 v4;
  Swift::UInt8 v5;
  Swift::UInt8 v6;
  Swift::UInt16 v7;
  Swift::UInt8 v8;
  Swift::UInt8 v9;
  _QWORD v11[9];

  v1 = *v0;
  v2 = v0[1];
  v3 = *((_WORD *)v0 + 1);
  v4 = v0[4];
  v5 = v0[5];
  v6 = v0[6];
  v7 = *((_WORD *)v0 + 4);
  v8 = v0[10];
  Hasher.init(_seed:)(v11);
  if (v2)
    v9 = 1;
  else
    v9 = 2 * v1;
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  return Hasher._finalize()();
}

unint64_t sub_1001B312C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  unint64_t result;
  int v5;

  result = sub_1001D559C(a1);
  if (!v2)
  {
    *(_BYTE *)a2 = result;
    *(_BYTE *)(a2 + 1) = BYTE1(result) & 1;
    *(_WORD *)(a2 + 2) = WORD1(result);
    *(_BYTE *)(a2 + 4) = BYTE4(result);
    *(_BYTE *)(a2 + 5) = BYTE5(result);
    *(_BYTE *)(a2 + 6) = BYTE6(result);
    *(_WORD *)(a2 + 8) = v5;
    *(_BYTE *)(a2 + 10) = BYTE2(v5);
  }
  return result;
}

uint64_t sub_1001B3188(_QWORD *a1)
{
  unsigned __int8 *v1;

  return NANAttribute.DeviceCapability.encode(to:)(a1, *v1 | ((unint64_t)*((unsigned __int16 *)v1 + 1) << 16) | ((unint64_t)v1[4] << 32) | ((unint64_t)v1[5] << 40) | ((unint64_t)v1[6] << 48) | ((unint64_t)v1[1] << 8), *((unsigned __int16 *)v1 + 4) | (v1[10] << 16));
}

BOOL sub_1001B31E4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1001CFE14(*a1 | ((unint64_t)*((unsigned __int16 *)a1 + 1) << 16) | ((unint64_t)a1[4] << 32) | ((unint64_t)a1[5] << 40) | ((unint64_t)a1[6] << 48) | ((unint64_t)a1[1] << 8), *((unsigned __int16 *)a1 + 4) | (a1[10] << 16), *a2 | ((unint64_t)*((unsigned __int16 *)a2 + 1) << 16) | ((unint64_t)a2[4] << 32) | ((unint64_t)a2[5] << 40) | ((unint64_t)a2[6] << 48) | ((unint64_t)a2[1] << 8), *((unsigned __int16 *)a2 + 4) | (a2[10] << 16));
}

uint64_t sub_1001B3274(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1001EE140();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1001B32D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1001EE140();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_1001B331C()
{
  uint64_t result;

  result = sub_1001AA1C4(0);
  qword_10040A4C8 = result;
  return result;
}

uint64_t NANAttribute.DeviceCapabilityExtension.regulatoryInformationForSixGHz.getter(uint64_t a1)
{
  uint64_t v2;
  char v3;
  unsigned int v4;
  uint64_t v6;

  if (qword_1004041D8 != -1)
    swift_once(&qword_1004041D8, sub_1001B331C);
  v2 = qword_10040A4C8;
  v6 = qword_10040A4C8;
  swift_bridgeObjectRetain_n(qword_10040A4C8, 2);
  sub_1001AA120(a1, (uint64_t (*)(uint64_t, uint64_t))sub_1001EE910);
  v3 = sub_1000851D0(v6, v2);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v6);
  if ((v3 & 1) == 0 || !*(_QWORD *)(a1 + 16))
    return 5;
  v4 = (*(unsigned __int8 *)(a1 + 32) >> 1) & 7;
  if (v4 >= 5)
    return 5;
  else
    return v4;
}

uint64_t sub_1001B3408()
{
  uint64_t result;

  result = sub_1001AA1C4(8uLL);
  static NANAttribute.DeviceCapabilityExtension.pairingSetupEnabled = result;
  return result;
}

uint64_t *NANAttribute.DeviceCapabilityExtension.pairingSetupEnabled.unsafeMutableAddressor()
{
  if (qword_1004041E0 != -1)
    swift_once(&qword_1004041E0, sub_1001B3408);
  return &static NANAttribute.DeviceCapabilityExtension.pairingSetupEnabled;
}

uint64_t static NANAttribute.DeviceCapabilityExtension.pairingSetupEnabled.getter()
{
  return sub_10006998C(&qword_1004041E0, &static NANAttribute.DeviceCapabilityExtension.pairingSetupEnabled);
}

uint64_t sub_1001B3484()
{
  uint64_t result;

  result = sub_1001AA1C4(9uLL);
  static NANAttribute.DeviceCapabilityExtension.pairingCachingEnabled = result;
  return result;
}

uint64_t *NANAttribute.DeviceCapabilityExtension.pairingCachingEnabled.unsafeMutableAddressor()
{
  if (qword_1004041E8 != -1)
    swift_once(&qword_1004041E8, sub_1001B3484);
  return &static NANAttribute.DeviceCapabilityExtension.pairingCachingEnabled;
}

uint64_t static NANAttribute.DeviceCapabilityExtension.pairingCachingEnabled.getter()
{
  return sub_10006998C(&qword_1004041E8, &static NANAttribute.DeviceCapabilityExtension.pairingCachingEnabled);
}

uint64_t sub_1001B3500(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001DAE3C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001B3528(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001DAE3C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NANAttribute.DeviceCapabilityExtension.encode(to:)(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v4 = sub_100012C44(&qword_10040A678);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin();
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a1[3];
  v9 = a1[4];
  sub_10003259C(a1, v8);
  v10 = sub_1001DAE3C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for NANAttribute.DeviceCapabilityExtension.CodingKeys, &type metadata for NANAttribute.DeviceCapabilityExtension.CodingKeys, v10, v8, v9);
  v16 = a2;
  v11 = sub_100012C44(&qword_100406738);
  v12 = sub_1000F08DC((unint64_t *)&qword_1004071D0, (uint64_t)&protocol witness table for UInt8, (const char *)&protocol conformance descriptor for <A> [A]);
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v16, v13, v4, v11, v12);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

_QWORD *NANAttribute.DeviceCapabilityExtension.init(from:)(_QWORD *a1)
{
  return sub_1001D6C5C(a1);
}

Swift::Int sub_1001B3680()
{
  uint64_t *v0;

  return sub_1001A9F1C(0, *v0);
}

Swift::Int sub_1001B369C(uint64_t a1)
{
  uint64_t *v1;

  return sub_1001A9F1C(a1, *v1);
}

_QWORD *sub_1001B36B4@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;

  result = sub_1001D6C5C(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_1001B36DC(_QWORD *a1)
{
  uint64_t *v1;

  return NANAttribute.DeviceCapabilityExtension.encode(to:)(a1, *v1);
}

void sub_1001B36F8(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *a1;
  v5 = *v2;
  v6 = *v2;
  swift_bridgeObjectRetain(*v2);
  sub_10009B5E8(v4);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v5);
  *a2 = v6;
}

void sub_1001B375C(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *a1;
  v5 = *v2;
  v6 = *v2;
  swift_bridgeObjectRetain(*v2);
  sub_1001AA120(v4, (uint64_t (*)(uint64_t, uint64_t))sub_1001EE910);
  swift_bridgeObjectRelease(v5);
  *a2 = v6;
}

void sub_1001B37C0(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *a1;
  v5 = *v2;
  v6 = *v2;
  swift_bridgeObjectRetain(*v2);
  sub_10009B5F4(v4, (uint64_t (*)(uint64_t, uint64_t))sub_1001EE124);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v5);
  *a2 = v6;
}

BOOL sub_1001B382C(uint64_t *a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v9;

  v4 = *a2;
  v9 = *v2;
  swift_bridgeObjectRetain(*v2);
  sub_1001AA120(v4, (uint64_t (*)(uint64_t, uint64_t))sub_1001EE910);
  v5 = v9;
  v6 = sub_1000851D0(v9, v4);
  if ((v6 & 1) == 0)
  {
    swift_bridgeObjectRelease(v9);
    v7 = swift_bridgeObjectRetain(v4);
    sub_10009B5E8(v7);
    v5 = v4;
  }
  *a1 = v5;
  swift_bridgeObjectRelease(v4);
  return (v6 & 1) == 0;
}

uint64_t sub_1001B38D0@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = sub_1001AA03C(*a1, (uint64_t (*)(uint64_t, uint64_t))sub_1001EE910, (uint64_t (*)(uint64_t, uint64_t))sub_1001EE124);
  *a2 = result;
  return result;
}

void sub_1001B3908(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;

  v4 = *a1;
  v7 = *v2;
  swift_bridgeObjectRetain(*v2);
  sub_1001AA120(v4, (uint64_t (*)(uint64_t, uint64_t))sub_1001EE910);
  v5 = v7;
  sub_10009B5E8(v4);
  v6 = sub_1000851D0(v7, _swiftEmptyArrayStorage);
  swift_bridgeObjectRelease(v4);
  if ((v6 & 1) != 0)
  {
    swift_bridgeObjectRelease(v7);
    v5 = 0;
  }
  *a2 = v5;
}

uint64_t sub_1001B39A4(uint64_t *a1)
{
  return sub_1001AA120(*a1, (uint64_t (*)(uint64_t, uint64_t))sub_1001EE910);
}

double sub_1001B39C4(uint64_t *a1)
{
  uint64_t v1;
  double result;

  v1 = *a1;
  sub_10009B5F4(*a1, (uint64_t (*)(uint64_t, uint64_t))sub_1001EE124);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v1).n128_u64[0];
  return result;
}

void sub_1001B39F4(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *a1;
  v5 = *v2;
  v6 = *v2;
  swift_bridgeObjectRetain_n(*v2, 2);
  sub_10009B5F4(v4, (uint64_t (*)(uint64_t, uint64_t))sub_1001EE124);
  sub_1001AA120(v6, (uint64_t (*)(uint64_t, uint64_t))sub_1001EE910);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v6);
  *a2 = v5;
}

uint64_t sub_1001B3A80(uint64_t *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v6;

  v2 = *a1;
  v3 = *v1;
  v6 = *v1;
  swift_bridgeObjectRetain(*v1);
  sub_1001AA120(v2, (uint64_t (*)(uint64_t, uint64_t))sub_1001EE910);
  v4 = sub_1000851D0(v6, v3);
  swift_bridgeObjectRelease(v6);
  return v4 & 1;
}

uint64_t sub_1001B3AF0(uint64_t *a1)
{
  _QWORD *v1;
  uint64_t v2;
  char v3;
  uint64_t v5;

  v2 = *a1;
  v5 = *v1;
  swift_bridgeObjectRetain(*v1);
  sub_1001AA120(v2, (uint64_t (*)(uint64_t, uint64_t))sub_1001EE910);
  v3 = sub_1000851D0(v5, _swiftEmptyArrayStorage);
  swift_bridgeObjectRelease(v5);
  return v3 & 1;
}

uint64_t sub_1001B3B58(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v2 = *a1;
  v3 = *v1;
  v5 = *a1;
  swift_bridgeObjectRetain(*a1);
  sub_1001AA120(v3, (uint64_t (*)(uint64_t, uint64_t))sub_1001EE910);
  LOBYTE(v2) = sub_1000851D0(v5, v2);
  swift_bridgeObjectRelease(v5);
  return v2 & 1;
}

double sub_1001B3BC8(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  double result;
  uint64_t v4;

  v2 = *a1;
  v4 = *v1;
  swift_bridgeObjectRetain(*v1);
  sub_10009B5F4(v2, (uint64_t (*)(uint64_t, uint64_t))sub_1001EE124);
  sub_1001AA120(v4, (uint64_t (*)(uint64_t, uint64_t))sub_1001EE910);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v4).n128_u64[0];
  return result;
}

void sub_1001B3C34(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;

  sub_1001EB224(a1);
  v5 = v4;
  swift_bridgeObjectRelease(a1);
  *a2 = v5;
}

uint64_t sub_1001B3C70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1001EE0E0();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1001B3CCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1001EE0E0();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t NANAttribute.Datapath.Status.description.getter(char a1)
{
  if (!a1)
    return 0x65756E69746E6F63;
  if (a1 == 1)
    return 0x6465747065636361;
  return 0x64657463656A6572;
}

uint64_t sub_1001B3D74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1001EE09C();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1001B3DD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1001EE09C();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_1001B3E1C()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x6465747065636361;
  if (*v0 != 1)
    v1 = 0x64657463656A6572;
  if (*v0)
    return v1;
  else
    return 0x65756E69746E6F63;
}

void *NANAttribute.Datapath.Control.confirmRequired.unsafeMutableAddressor()
{
  return &static NANAttribute.Datapath.Control.confirmRequired;
}

void *NANAttribute.Datapath.Control.security.unsafeMutableAddressor()
{
  return &static NANAttribute.Datapath.Control.security;
}

void *NANAttribute.Datapath.Control.publishID.unsafeMutableAddressor()
{
  return &static NANAttribute.Datapath.Control.publishID;
}

void *NANAttribute.Datapath.Control.responderDatapathInterfaceAddress.unsafeMutableAddressor()
{
  return &static NANAttribute.Datapath.Control.responderDatapathInterfaceAddress;
}

void *NANAttribute.Datapath.Control.serviceSpecificInfo.unsafeMutableAddressor()
{
  return &static NANAttribute.Datapath.Control.serviceSpecificInfo;
}

uint64_t sub_1001B3EB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1001DE264();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1001B3F14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1001DE264();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t NANAttribute.Datapath.type.getter()
{
  uint64_t v0;
  unsigned int v1;

  v1 = sub_10007CD0C(0, 4, *(_BYTE *)(v0 + 1));
  if (v1 >= 5)
    return 5;
  else
    return v1;
}

unint64_t NANAttribute.Datapath.status.getter()
{
  uint64_t v0;
  unint64_t result;

  result = sub_10007CD0C(4uLL, 4, *(_BYTE *)(v0 + 1));
  if (result >= 3u)
    return 3;
  return result;
}

unint64_t NANAttribute.Datapath.initiatorDatapathInterfaceAddress.getter()
{
  uint64_t v0;

  return *(unsigned __int16 *)(v0 + 3) | ((unint64_t)*(unsigned int *)(v0 + 5) << 16);
}

uint64_t NANAttribute.Datapath.initiatorDatapathInterfaceAddress.setter(uint64_t result)
{
  uint64_t v1;

  *(_WORD *)(v1 + 3) = result;
  *(_BYTE *)(v1 + 5) = BYTE2(result);
  *(_BYTE *)(v1 + 6) = BYTE3(result);
  *(_BYTE *)(v1 + 7) = BYTE4(result);
  *(_BYTE *)(v1 + 8) = BYTE5(result);
  return result;
}

uint64_t (*NANAttribute.Datapath.initiatorDatapathInterfaceAddress.modify())(_QWORD)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t NANAttribute.Datapath.datapathID.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 9);
}

uint64_t NANAttribute.Datapath.datapathID.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 9) = result;
  return result;
}

uint64_t NANAttribute.Datapath.control.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 10);
}

uint64_t NANAttribute.Datapath.publishID.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 11) | (*(unsigned __int8 *)(v0 + 12) << 8);
}

uint64_t NANAttribute.Datapath.publishID.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 11) = result;
  *(_BYTE *)(v1 + 12) = BYTE1(result) & 1;
  return result;
}

uint64_t (*NANAttribute.Datapath.publishID.modify())(_QWORD)
{
  return NANBitmap.Channel.operatingClass.getter;
}

unint64_t NANAttribute.Datapath.responderDatapathInterfaceAddress.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 13) | ((unint64_t)*(unsigned __int16 *)(v0 + 17) << 32) | ((unint64_t)*(unsigned __int8 *)(v0 + 19) << 48);
}

uint64_t NANAttribute.Datapath.responderDatapathInterfaceAddress.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 13) = result;
  *(_WORD *)(v1 + 17) = WORD2(result);
  *(_BYTE *)(v1 + 19) = BYTE6(result) & 1;
  return result;
}

uint64_t (*NANAttribute.Datapath.responderDatapathInterfaceAddress.modify())(_QWORD)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t NANAttribute.Datapath.serviceInfo.getter()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[3];
  sub_100111B7C(v1, v0[4], v0[5]);
  return v1;
}

uint64_t NANAttribute.Datapath.serviceInfo.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t result;

  result = sub_100111BBC(*(_QWORD *)(v3 + 24), *(_QWORD *)(v3 + 32), *(_QWORD *)(v3 + 40));
  *(_QWORD *)(v3 + 24) = a1;
  *(_QWORD *)(v3 + 32) = a2;
  *(_QWORD *)(v3 + 40) = a3;
  return result;
}

uint64_t NANAttribute.Datapath.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::UInt8 v4;
  Swift::UInt8 v5;
  Swift::UInt8 v6;
  Swift::UInt8 v7;
  Swift::UInt8 v8;
  Swift::UInt8 v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;

  v2 = v1;
  Hasher._combine(_:)(*(_BYTE *)v2);
  Hasher._combine(_:)(*(_BYTE *)(v2 + 1));
  Hasher._combine(_:)(*(_BYTE *)(v2 + 2));
  v4 = *(_BYTE *)(v2 + 4);
  v5 = *(_BYTE *)(v2 + 5);
  v6 = *(_BYTE *)(v2 + 6);
  v7 = *(_BYTE *)(v2 + 7);
  v8 = *(_BYTE *)(v2 + 8);
  Hasher._combine(_:)(*(_BYTE *)(v2 + 3));
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(*(_BYTE *)(v2 + 9));
  Hasher._combine(_:)(*(_BYTE *)(v2 + 10));
  if ((*(_BYTE *)(v2 + 12) & 1) != 0)
  {
    v9 = 0;
  }
  else
  {
    v9 = *(_BYTE *)(v2 + 11);
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v9);
  if ((*(_BYTE *)(v2 + 19) & 1) != 0)
  {
    LOBYTE(v10) = 0;
  }
  else
  {
    v11 = *(unsigned __int16 *)(v2 + 17);
    v12 = *(_DWORD *)(v2 + 13);
    v13 = v12 | ((unint64_t)*(unsigned __int16 *)(v2 + 17) << 32);
    v14 = v13 >> 8;
    v15 = v13 >> 16;
    v16 = v13 >> 24;
    v10 = v11 >> 8;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v12);
    Hasher._combine(_:)(v14);
    Hasher._combine(_:)(v15);
    Hasher._combine(_:)(v16);
    Hasher._combine(_:)(v11);
  }
  Hasher._combine(_:)(v10);
  v17 = *(unsigned __int8 *)(v2 + 24);
  if (v17 == 4)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v19 = *(_QWORD *)(v2 + 32);
    v18 = *(_QWORD *)(v2 + 40);
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v17);
    sub_1001DAE80(v2);
    Data.hash(into:)(a1, v19, v18, v20);
  }
  return sub_1001DAEAC(v2);
}

Swift::Int NANAttribute.Datapath.hashValue.getter()
{
  uint64_t v0;
  Swift::UInt8 v1;
  Swift::UInt8 v2;
  Swift::UInt8 v3;
  Swift::UInt8 v4;
  Swift::UInt8 v5;
  Swift::UInt8 v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  _QWORD v19[9];

  Hasher.init(_seed:)(v19);
  Hasher._combine(_:)(*(_BYTE *)v0);
  Hasher._combine(_:)(*(_BYTE *)(v0 + 1));
  Hasher._combine(_:)(*(_BYTE *)(v0 + 2));
  v1 = *(_BYTE *)(v0 + 4);
  v2 = *(_BYTE *)(v0 + 5);
  v3 = *(_BYTE *)(v0 + 6);
  v4 = *(_BYTE *)(v0 + 7);
  v5 = *(_BYTE *)(v0 + 8);
  Hasher._combine(_:)(*(_BYTE *)(v0 + 3));
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(*(_BYTE *)(v0 + 9));
  Hasher._combine(_:)(*(_BYTE *)(v0 + 10));
  if ((*(_BYTE *)(v0 + 12) & 1) != 0)
  {
    v6 = 0;
  }
  else
  {
    v6 = *(_BYTE *)(v0 + 11);
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v6);
  if ((*(_BYTE *)(v0 + 19) & 1) != 0)
  {
    LOBYTE(v7) = 0;
  }
  else
  {
    v8 = *(unsigned __int16 *)(v0 + 17);
    v9 = *(_DWORD *)(v0 + 13);
    v10 = v9 | ((unint64_t)*(unsigned __int16 *)(v0 + 17) << 32);
    v11 = v10 >> 8;
    v12 = v10 >> 16;
    v13 = v10 >> 24;
    v7 = v8 >> 8;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v9);
    Hasher._combine(_:)(v11);
    Hasher._combine(_:)(v12);
    Hasher._combine(_:)(v13);
    Hasher._combine(_:)(v8);
  }
  Hasher._combine(_:)(v7);
  v14 = *(unsigned __int8 *)(v0 + 24);
  if (v14 == 4)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v16 = *(_QWORD *)(v0 + 32);
    v15 = *(_QWORD *)(v0 + 40);
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v14);
    sub_1001DAE80(v0);
    Data.hash(into:)(v19, v16, v15, v17);
  }
  sub_1001DAEAC(v0);
  return Hasher._finalize()();
}

Swift::Int sub_1001B44EC()
{
  return NANAttribute.Datapath.hashValue.getter();
}

uint64_t sub_1001B4524(uint64_t a1)
{
  return NANAttribute.Datapath.hash(into:)(a1);
}

Swift::Int sub_1001B455C()
{
  __int128 *v0;
  __int128 v1;
  _QWORD v3[9];
  __int128 v4;
  __int128 v5;
  __int128 v6;

  v1 = v0[1];
  v4 = *v0;
  v5 = v1;
  v6 = v0[2];
  Hasher.init(_seed:)(v3);
  NANAttribute.Datapath.hash(into:)((uint64_t)v3);
  return Hasher._finalize()();
}

double NANAttribute.Datapath.init(from:)@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  __int128 v7;

  sub_1001D7E10(a1, (uint64_t)v6);
  if (!v2)
  {
    v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
    result = *(double *)&v7;
    a2[2] = v7;
  }
  return result;
}

uint64_t sub_1001B45E8(_QWORD *a1)
{
  return NANAttribute.Datapath.encode(to:)(a1);
}

uint64_t NANAttribute.Datapath.encode(to:)(_QWORD *a1)
{
  unsigned __int8 *v1;
  uint64_t v2;
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  __int128 v35;
  uint64_t v36;
  _QWORD v37[3];
  uint64_t v38;
  uint64_t v39;
  _BYTE v40[29];
  _BYTE v41[7];
  _BYTE v42[2];
  _BYTE v43[2];
  __int128 v44;
  uint64_t v45;
  int v46;
  __int16 v47;
  char v48;

  v3 = v1;
  v4 = a1[3];
  v5 = a1[4];
  sub_10003259C(a1, v4);
  dispatch thunk of Encoder.unkeyedContainer()(v37, v4, v5);
  v6 = v38;
  v7 = v39;
  v8 = *v1;
  sub_100034C68((uint64_t)v37, v38);
  dispatch thunk of UnkeyedEncodingContainer.encode(_:)(v8, v6, v7);
  if (!v2)
  {
    LOBYTE(v35) = v3[1];
    v9 = v38;
    v10 = v39;
    sub_100034C68((uint64_t)v37, v38);
    v11 = sub_100012C44(&qword_10040A688);
    v12 = sub_100011770(&qword_10040A690, &qword_10040A688, byte_100349338);
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)(&v35, v11, v12, v9, v10);
    LOBYTE(v35) = v3[2];
    v13 = v38;
    v14 = v39;
    sub_100034C68((uint64_t)v37, v38);
    v15 = sub_1001DAED8();
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)(&v35, &type metadata for NANReasonCode, v15, v13, v14);
    LODWORD(v35) = *(_DWORD *)(v3 + 3);
    WORD2(v35) = *(_WORD *)(v3 + 7);
    v16 = v38;
    v17 = v39;
    sub_100034C68((uint64_t)v37, v38);
    v18 = sub_100039C34();
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)(&v35, &type metadata for WiFiAddress, v18, v16, v17);
    v19 = v38;
    v20 = v39;
    v21 = v3[9];
    sub_100034C68((uint64_t)v37, v38);
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)(v21, v19, v20);
    v22 = v3[10];
    LOBYTE(v35) = v22;
    v23 = v38;
    v24 = v39;
    sub_100034C68((uint64_t)v37, v38);
    v25 = sub_1001DAF1C();
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)(&v35, &type metadata for NANAttribute.Datapath.Control, v25, v23, v24);
    sub_100063EB8((uint64_t)(v3 + 11), (uint64_t)v42, &qword_10040A558);
    sub_100063EB8((uint64_t)v42, (uint64_t)v43, &qword_10040A558);
    if ((v43[1] & 1) == 0 && (v22 & 8) != 0)
    {
      v27 = v38;
      v28 = v39;
      v29 = v43[0];
      sub_100034C68((uint64_t)v37, v38);
      dispatch thunk of UnkeyedEncodingContainer.encode(_:)(v29, v27, v28);
    }
    sub_100063EB8((uint64_t)(v3 + 13), (uint64_t)v41, &qword_10040A6A8);
    sub_100063EB8((uint64_t)v41, (uint64_t)&v46, &qword_10040A6A8);
    if ((v48 & 1) == 0 && (v22 & 0x10) != 0)
    {
      LODWORD(v35) = v46;
      WORD2(v35) = v47;
      v30 = v38;
      v31 = v39;
      sub_100034C68((uint64_t)v37, v38);
      dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)(&v35, &type metadata for WiFiAddress, v18, v30, v31);
    }
    sub_100063EB8((uint64_t)(v3 + 24), (uint64_t)v40, (uint64_t *)&unk_10040DAC0);
    sub_100063EB8((uint64_t)v40, (uint64_t)&v44, (uint64_t *)&unk_10040DAC0);
    if (v44 != 4 && (v22 & 0x20) != 0)
    {
      v35 = v44;
      v36 = v45;
      v32 = v38;
      v33 = v39;
      sub_100034C68((uint64_t)v37, v38);
      v34 = sub_1001DAF60();
      dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)(&v35, &type metadata for NANServiceInfo, v34, v32, v33);
    }
  }
  return sub_100014430(v37);
}

uint64_t sub_1001B49C0(_OWORD *a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[3];
  _OWORD v8[3];

  v2 = a1[1];
  v7[0] = *a1;
  v7[1] = v2;
  v3 = *a2;
  v4 = a2[1];
  v7[2] = a1[2];
  v8[0] = v3;
  v5 = a2[2];
  v8[1] = v4;
  v8[2] = v5;
  return _s7CoreP2P12NANAttributeO8DatapathV23__derived_struct_equalsySbAE_AEtFZ_0((unsigned __int8 *)v7, (unsigned __int8 *)v8) & 1;
}

void *NANAttribute.DatapathExtension.Control.confirmRequired.unsafeMutableAddressor()
{
  return &static NANAttribute.DatapathExtension.Control.confirmRequired;
}

void *NANAttribute.DatapathExtension.Control.security.unsafeMutableAddressor()
{
  return &static NANAttribute.DatapathExtension.Control.security;
}

void *NANAttribute.DatapathExtension.Control.publishID.unsafeMutableAddressor()
{
  return &static NANAttribute.DatapathExtension.Control.publishID;
}

void *NANAttribute.DatapathExtension.Control.responderDatapathInterfaceAddress.unsafeMutableAddressor()
{
  return &static NANAttribute.DatapathExtension.Control.responderDatapathInterfaceAddress;
}

uint64_t sub_1001B4A34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1001DE3CC();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1001B4A90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1001DE3CC();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t NANAttribute.DatapathExtension.serviceInfo.getter()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[5];
  sub_100111B7C(v1, v0[6], v0[7]);
  return v1;
}

uint64_t NANAttribute.DatapathExtension.serviceInfo.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t result;

  result = sub_100111BBC(*(_QWORD *)(v3 + 40), *(_QWORD *)(v3 + 48), *(_QWORD *)(v3 + 56));
  *(_QWORD *)(v3 + 40) = a1;
  *(_QWORD *)(v3 + 48) = a2;
  *(_QWORD *)(v3 + 56) = a3;
  return result;
}

uint64_t sub_1001B4B60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1001EE058();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1001B4BBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1001EE058();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

void NANAttribute.DatapathExtension.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::UInt8 v4;
  Swift::UInt8 v5;
  Swift::UInt8 v6;
  Swift::UInt8 v7;
  Swift::UInt8 v8;
  Swift::UInt8 v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  __n128 v24;

  v2 = v1;
  Hasher._combine(_:)(*(_BYTE *)v2);
  Hasher._combine(_:)(*(_BYTE *)(v2 + 1));
  Hasher._combine(_:)(*(_BYTE *)(v2 + 2));
  v4 = *(_BYTE *)(v2 + 4);
  v5 = *(_BYTE *)(v2 + 5);
  v6 = *(_BYTE *)(v2 + 6);
  v7 = *(_BYTE *)(v2 + 7);
  v8 = *(_BYTE *)(v2 + 8);
  Hasher._combine(_:)(*(_BYTE *)(v2 + 3));
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(*(_BYTE *)(v2 + 9));
  Hasher._combine(_:)(*(_BYTE *)(v2 + 10));
  if ((*(_BYTE *)(v2 + 12) & 1) != 0)
  {
    v9 = 0;
  }
  else
  {
    v9 = *(_BYTE *)(v2 + 11);
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v9);
  if ((*(_BYTE *)(v2 + 19) & 1) != 0)
  {
    LOBYTE(v10) = 0;
  }
  else
  {
    v11 = *(unsigned __int16 *)(v2 + 17);
    v12 = *(_DWORD *)(v2 + 13);
    v13 = v12 | ((unint64_t)*(unsigned __int16 *)(v2 + 17) << 32);
    v14 = v13 >> 8;
    v15 = v13 >> 16;
    v16 = v13 >> 24;
    v10 = v11 >> 8;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v12);
    Hasher._combine(_:)(v14);
    Hasher._combine(_:)(v15);
    Hasher._combine(_:)(v16);
    Hasher._combine(_:)(v11);
  }
  Hasher._combine(_:)(v10);
  v17 = *(_QWORD *)(v2 + 32);
  if (v17 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v18 = *(_QWORD *)(v2 + 24);
    Hasher._combine(_:)(1u);
    sub_100031FEC(v18, v17);
    Data.hash(into:)(a1, v18, v17, v19);
    sub_10000E658(v18, v17);
  }
  v20 = *(_QWORD *)(v2 + 40);
  if (v20 == 4)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v23 = v2 + 48;
    v21 = *(_QWORD *)(v2 + 48);
    v22 = *(_QWORD *)(v23 + 8);
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v20);
    sub_100031FEC(v21, v22);
    Data.hash(into:)(a1, v21, v22, v24);
    sub_100111BBC(v20, v21, v22);
  }
}

Swift::Int NANAttribute.DatapathExtension.hashValue.getter()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  NANAttribute.DatapathExtension.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int sub_1001B4E38()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  NANAttribute.DatapathExtension.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

double NANAttribute.DatapathExtension.init(from:)@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  __int128 v6;
  _OWORD v7[2];
  __int128 v8;
  __int128 v9;

  sub_1001DAFA4(a1, (uint64_t)v7);
  if (!v2)
  {
    v5 = v7[1];
    *a2 = v7[0];
    a2[1] = v5;
    result = *(double *)&v8;
    v6 = v9;
    a2[2] = v8;
    a2[3] = v6;
  }
  return result;
}

uint64_t sub_1001B4EB0(_QWORD *a1)
{
  return NANAttribute.DatapathExtension.encode(to:)(a1);
}

uint64_t NANAttribute.DatapathExtension.encode(to:)(_QWORD *a1)
{
  unsigned __int8 *v1;
  uint64_t v2;
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  _QWORD *v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  unint64_t v45;
  char v46[24];
  char v47[8];
  uint64_t *v48;
  ValueMetadata *v49;
  unint64_t v50;
  _QWORD v51[3];
  uint64_t v52;
  uint64_t v53;
  _BYTE v54[7];
  _BYTE v55[2];
  _BYTE v56[2];
  int v57;
  __int16 v58;
  char v59;

  v3 = v1;
  v4 = a1[3];
  v5 = a1[4];
  sub_10003259C(a1, v4);
  dispatch thunk of Encoder.unkeyedContainer()(v51, v4, v5);
  v6 = v52;
  v7 = v53;
  v8 = *v1;
  sub_100034C68((uint64_t)v51, v52);
  dispatch thunk of UnkeyedEncodingContainer.encode(_:)(v8, v6, v7);
  if (!v2)
  {
    LOBYTE(v48) = v3[1];
    v9 = v52;
    v10 = v53;
    sub_100034C68((uint64_t)v51, v52);
    v11 = sub_100012C44(&qword_10040A688);
    v12 = sub_100011770(&qword_10040A690, &qword_10040A688, byte_100349338);
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)(&v48, v11, v12, v9, v10);
    LOBYTE(v48) = v3[2];
    v13 = v52;
    v14 = v53;
    sub_100034C68((uint64_t)v51, v52);
    v15 = sub_1001DAED8();
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)(&v48, &type metadata for NANReasonCode, v15, v13, v14);
    LODWORD(v48) = *(_DWORD *)(v3 + 3);
    WORD2(v48) = *(_WORD *)(v3 + 7);
    v16 = v52;
    v17 = v53;
    sub_100034C68((uint64_t)v51, v52);
    v18 = sub_100039C34();
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)(&v48, &type metadata for WiFiAddress, v18, v16, v17);
    v19 = v52;
    v20 = v53;
    v21 = v3[9];
    sub_100034C68((uint64_t)v51, v52);
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)(v21, v19, v20);
    v22 = v3[10];
    LOBYTE(v48) = v22;
    v23 = v52;
    v24 = v53;
    sub_100034C68((uint64_t)v51, v52);
    v25 = sub_1001DBA1C();
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)(&v48, &type metadata for NANAttribute.DatapathExtension.Control, v25, v23, v24);
    sub_100063EB8((uint64_t)(v3 + 11), (uint64_t)v55, &qword_10040A558);
    sub_100063EB8((uint64_t)v55, (uint64_t)v56, &qword_10040A558);
    if ((v56[1] & 1) == 0 && (v22 & 8) != 0)
    {
      v27 = v52;
      v28 = v53;
      v29 = v56[0];
      sub_100034C68((uint64_t)v51, v52);
      dispatch thunk of UnkeyedEncodingContainer.encode(_:)(v29, v27, v28);
    }
    sub_100063EB8((uint64_t)(v3 + 13), (uint64_t)v54, &qword_10040A6A8);
    sub_100063EB8((uint64_t)v54, (uint64_t)&v57, &qword_10040A6A8);
    if ((v59 & 1) == 0 && (v22 & 0x10) != 0)
    {
      LODWORD(v48) = v57;
      WORD2(v48) = v58;
      v30 = v52;
      v31 = v53;
      sub_100034C68((uint64_t)v51, v52);
      dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)(&v48, &type metadata for WiFiAddress, v18, v30, v31);
    }
    v32 = *((_QWORD *)v3 + 4);
    if (v32 >> 60 != 15)
    {
      v33 = *((_QWORD *)v3 + 3);
      sub_100031FEC(v33, *((_QWORD *)v3 + 4));
      v34 = sub_10001F11C((uint64_t)_swiftEmptyArrayStorage);
      v35 = type metadata accessor for BinaryEncoder();
      v36 = (uint64_t *)swift_allocObject(v35, 40, 7);
      *((_OWORD *)v36 + 1) = xmmword_10033A100;
      v36[4] = v34;
      v49 = &type metadata for BinaryEncoder.UnkeyedContainer;
      v50 = sub_100179604();
      v48 = v36;
      v37 = (_QWORD *)sub_100034C68((uint64_t)&v48, (uint64_t)&type metadata for BinaryEncoder.UnkeyedContainer);
      swift_beginAccess(*v37 + 16, v47, 33, 0);
      sub_1000339F4(v33, v32);
      swift_retain();
      sub_1000FBDAC(v33, v32);
      swift_endAccess(v47);
      sub_100014430(&v48);
      sub_10000E658(v33, v32);
      swift_beginAccess(v36 + 2, v46, 0, 0);
      v38 = v36[3];
      sub_100031FEC(v36[2], v38);
      swift_release(v36);
      __asm { BR              X9 }
    }
    v39 = *((_QWORD *)v3 + 5);
    if (v39 != 4)
    {
      v41 = *((_QWORD *)v3 + 6);
      v40 = *((_QWORD *)v3 + 7);
      sub_100031FEC(v41, v40);
      v42 = sub_10001F11C((uint64_t)_swiftEmptyArrayStorage);
      v43 = type metadata accessor for BinaryEncoder();
      v44 = (uint64_t *)swift_allocObject(v43, 40, 7);
      *((_OWORD *)v44 + 1) = xmmword_10033A100;
      v44[4] = v42;
      v49 = (ValueMetadata *)v43;
      v50 = sub_100011DE4((unint64_t *)&qword_100406278, (uint64_t (*)(uint64_t))type metadata accessor for BinaryEncoder, (uint64_t)protocol conformance descriptor for BinaryEncoder);
      v48 = v44;
      sub_100111B7C(v39, v41, v40);
      swift_retain();
      NANServiceInfo.encode(to:)((uint64_t)&v48, v39, v41, v40);
      sub_100014430(&v48);
      sub_100111BBC(v39, v41, v40);
      swift_beginAccess(v44 + 2, &v48, 0, 0);
      v45 = v44[3];
      sub_100031FEC(v44[2], v45);
      swift_release(v44);
      __asm { BR              X9 }
    }
  }
  return sub_100014430(v51);
}

BOOL sub_1001B569C(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[4];
  _OWORD v8[4];

  v2 = a1[1];
  v7[0] = *a1;
  v7[1] = v2;
  v3 = a1[3];
  v7[2] = a1[2];
  v7[3] = v3;
  v4 = a2[1];
  v8[0] = *a2;
  v8[1] = v4;
  v5 = a2[3];
  v8[2] = a2[2];
  v8[3] = v5;
  return _s7CoreP2P12NANAttributeO17DatapathExtensionV23__derived_struct_equalsySbAE_AEtFZ_0((unsigned __int8 *)v7, (unsigned __int8 *)v8);
}

void *NANAttribute.Availability.Control.publicAvailabilityChange.unsafeMutableAddressor()
{
  return &static NANAttribute.Availability.Control.publicAvailabilityChange;
}

void *NANAttribute.Availability.Control.dataClusterChange.unsafeMutableAddressor()
{
  return &static NANAttribute.Availability.Control.dataClusterChange;
}

void *NANAttribute.Availability.Control.multicastScheduleChange.unsafeMutableAddressor()
{
  return &static NANAttribute.Availability.Control.multicastScheduleChange;
}

void *NANAttribute.Availability.Control.multicastScheduleChangeChanged.unsafeMutableAddressor()
{
  return &static NANAttribute.Availability.Control.multicastScheduleChangeChanged;
}

uint64_t NANAttribute.Availability.Control.scheduleChangeFlags.getter(__int16 a1)
{
  return a1 & 0x3F0;
}

uint64_t sub_1001B571C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1001DE57C();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1001B5778(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1001DE57C();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

double NANAttribute.Availability.hash(into:)(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unsigned int v5;
  double result;

  v5 = HIWORD(a2);
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(v5);
  swift_bridgeObjectRetain(a3);
  sub_10008E8D0(a1, a3);
  *(_QWORD *)&result = swift_bridgeObjectRelease(a3).n128_u64[0];
  return result;
}

uint64_t static NANAttribute.Availability.__derived_struct_equals(_:_:)(unsigned int a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  if (a1 == a3 && HIWORD(a1) == HIWORD(a3))
    return sub_100087490(a2, a4);
  else
    return 0;
}

uint64_t sub_1001B5848()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0x6C6F72746E6F63;
  if (*v0 != 1)
    v1 = 0xD000000000000013;
  if (*v0)
    return v1;
  else
    return 0x65636E6575716573;
}

uint64_t sub_1001B58AC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1001EC558(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1001B58D0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001DBA60();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001B58F8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001DBA60();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NANAttribute.Availability.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  char v20;
  __int16 v21;
  char v22;
  char v23;

  v7 = sub_100012C44(&qword_10040A6C8);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin();
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a1[3];
  v12 = a1[4];
  sub_10003259C(a1, v11);
  v13 = sub_1001DBA60();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for NANAttribute.Availability.CodingKeys, &type metadata for NANAttribute.Availability.CodingKeys, v13, v11, v12);
  v23 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(a2, &v23, v7);
  if (!v3)
  {
    v21 = WORD1(a2);
    v22 = 1;
    v14 = sub_1001DBAA4();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v21, &v22, v7, &type metadata for NANAttribute.Availability.Control, v14);
    v19 = a3;
    v20 = 2;
    v15 = sub_100012C44(&qword_10040A6E0);
    v16 = sub_1000934A0(&qword_10040A6E8, &qword_10040A6E0, (uint64_t (*)(void))sub_1001DBAE8, (const char *)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v19, &v20, v7, v15, v16);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

Swift::Int NANAttribute.Availability.hashValue.getter(unsigned int a1, uint64_t a2)
{
  Swift::UInt8 v3;
  unsigned int v4;
  _QWORD v6[9];

  v3 = a1;
  v4 = HIWORD(a1);
  Hasher.init(_seed:)(v6);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  swift_bridgeObjectRetain(a2);
  sub_10008E8D0((uint64_t)v6, a2);
  swift_bridgeObjectRelease(a2);
  return Hasher._finalize()();
}

uint64_t NANAttribute.Availability.init(from:)(_QWORD *a1)
{
  return sub_1001D490C(a1) & 0xFFFF00FFLL;
}

Swift::Int sub_1001B5B60()
{
  uint64_t v0;
  uint64_t v1;
  Swift::UInt8 v2;
  Swift::UInt16 v3;
  _QWORD v5[9];

  v1 = *(_QWORD *)(v0 + 8);
  v2 = *(_BYTE *)v0;
  v3 = *(_WORD *)(v0 + 2);
  Hasher.init(_seed:)(v5);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  swift_bridgeObjectRetain(v1);
  sub_10008E8D0((uint64_t)v5, v1);
  swift_bridgeObjectRelease(v1);
  return Hasher._finalize()();
}

double sub_1001B5BDC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  Swift::UInt16 v4;
  double result;

  v3 = *(_QWORD *)(v1 + 8);
  v4 = *(_WORD *)(v1 + 2);
  Hasher._combine(_:)(*(_BYTE *)v1);
  Hasher._combine(_:)(v4);
  swift_bridgeObjectRetain(v3);
  sub_10008E8D0(a1, v3);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v3).n128_u64[0];
  return result;
}

Swift::Int sub_1001B5C34()
{
  uint64_t v0;
  uint64_t v1;
  Swift::UInt8 v2;
  Swift::UInt16 v3;
  _QWORD v5[9];

  v1 = *(_QWORD *)(v0 + 8);
  v2 = *(_BYTE *)v0;
  v3 = *(_WORD *)(v0 + 2);
  Hasher.init(_seed:)(v5);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  swift_bridgeObjectRetain(v1);
  sub_10008E8D0((uint64_t)v5, v1);
  swift_bridgeObjectRelease(v1);
  return Hasher._finalize()();
}

uint64_t sub_1001B5CAC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = sub_1001D490C(a1);
  if (!v2)
  {
    *(_BYTE *)a2 = result;
    *(_WORD *)(a2 + 2) = WORD1(result);
    *(_QWORD *)(a2 + 8) = v5;
  }
  return result;
}

uint64_t sub_1001B5CE0(_QWORD *a1)
{
  unsigned __int8 *v1;

  return NANAttribute.Availability.encode(to:)(a1, *v1 | (*((unsigned __int16 *)v1 + 1) << 16), *((_QWORD *)v1 + 1));
}

uint64_t sub_1001B5D04(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 == *a2 && *((unsigned __int16 *)a1 + 1) == *((unsigned __int16 *)a2 + 1))
    return sub_100087490(*((_QWORD *)a1 + 1), *((_QWORD *)a2 + 1));
  else
    return 0;
}

void *NANAttribute.DataCluster.Control.selectedDataCluster.unsafeMutableAddressor()
{
  return &static NANAttribute.DataCluster.Control.selectedDataCluster;
}

uint64_t sub_1001B5D40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1001DE6E4();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1001B5D9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1001DE6E4();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

void __swiftcall NANAttribute.DataCluster.init(clusterID:control:scheduleEntries:)(CoreP2P::NANAttribute::DataCluster *__return_ptr retstr, CoreP2P::WiFiAddress *clusterID, CoreP2P::NANAttribute::DataCluster::Control control, Swift::OpaquePointer scheduleEntries)
{
  ;
}

uint64_t sub_1001B5DFC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int16 v3;
  uint64_t result;
  uint64_t v5;

  v1 = sub_100012C44((uint64_t *)&unk_10040E180);
  v2 = swift_allocObject(v1, 64, 7);
  *(_OWORD *)(v2 + 16) = xmmword_10033A110;
  if (NANIntervalDuration.timeUnits.getter(0))
  {
    v3 = sub_1001AA5F8(3u, 3uLL, 3);
    result = sub_1001068EC((uint64_t)&off_1003D73F0);
    *(_BYTE *)(v2 + 32) = 0;
    *(_WORD *)(v2 + 40) = v3;
    *(_QWORD *)(v2 + 48) = result;
    *(_QWORD *)(v2 + 56) = v5;
    static NANAttribute.DataCluster.empty = 0;
    *(int *)((char *)&static NANAttribute.DataCluster.empty + 3) = 0;
    qword_100410600 = v2;
  }
  else
  {
    __break(1u);
    result = swift_unexpectedError(v0, "CoreP2P/NANAvailability.swift", 29, 1, 119);
    __break(1u);
  }
  return result;
}

int *NANAttribute.DataCluster.empty.unsafeMutableAddressor()
{
  if (qword_1004041F0 != -1)
    swift_once(&qword_1004041F0, sub_1001B5DFC);
  return &static NANAttribute.DataCluster.empty;
}

unint64_t static NANAttribute.DataCluster.empty.getter()
{
  unint64_t v0;

  if (qword_1004041F0 != -1)
    swift_once(&qword_1004041F0, sub_1001B5DFC);
  v0 = static NANAttribute.DataCluster.empty | ((unint64_t)byte_1004105FC << 32) | ((unint64_t)byte_1004105FD << 40) | ((unint64_t)byte_1004105FE << 48);
  swift_bridgeObjectRetain(qword_100410600);
  return v0;
}

double NANAttribute.DataCluster.hash(into:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  double result;

  v5 = a2 >> 8;
  v6 = a2 >> 16;
  v7 = a2 >> 24;
  v8 = HIDWORD(a2);
  v9 = a2 >> 40;
  v10 = HIWORD(a2);
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  swift_bridgeObjectRetain(a3);
  sub_10008E0F8(a1, a3);
  *(_QWORD *)&result = swift_bridgeObjectRelease(a3).n128_u64[0];
  return result;
}

uint64_t static NANAttribute.DataCluster.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1001D0DA8(a1 & 0xFFFFFFFFFFFFFFLL, a2, a3 & 0xFFFFFFFFFFFFFFLL, a4);
}

uint64_t sub_1001B6028()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x6C6F72746E6F63;
  if (*v0 != 1)
    v1 = 0x656C756465686373;
  if (*v0)
    return v1;
  else
    return 0x4972657473756C63;
}

uint64_t sub_1001B6094@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1001EC6B4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1001B60B8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001DBB2C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001B60E0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001DBB2C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NANAttribute.DataCluster.encode(to:)(_QWORD *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;

  v5 = a2 >> 8;
  v6 = a2 >> 16;
  v21 = a3;
  v22 = a2 >> 24;
  v23 = HIDWORD(a2);
  v24 = a2 >> 40;
  v7 = sub_100012C44(&qword_10040A6F8);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin();
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a1[3];
  v12 = a1[4];
  sub_10003259C(a1, v11);
  v13 = sub_1001DBB2C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for NANAttribute.DataCluster.CodingKeys, &type metadata for NANAttribute.DataCluster.CodingKeys, v13, v11, v12);
  LOBYTE(v26) = a2;
  BYTE1(v26) = v5;
  BYTE2(v26) = v6;
  BYTE3(v26) = v22;
  BYTE4(v26) = v23;
  BYTE5(v26) = v24;
  v27 = 0;
  v14 = sub_100039C34();
  v15 = v25;
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v26, &v27, v7, &type metadata for WiFiAddress, v14);
  if (!v15)
  {
    v16 = v21;
    LOBYTE(v26) = BYTE6(a2);
    v27 = 1;
    v17 = sub_1001DBB70();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v26, &v27, v7, &type metadata for NANAttribute.DataCluster.Control, v17);
    v26 = v16;
    v27 = 2;
    v18 = sub_100012C44(&qword_10040A710);
    v19 = sub_1000934A0(&qword_10040A718, &qword_10040A710, (uint64_t (*)(void))sub_1001DBBB4, (const char *)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v26, &v27, v7, v18, v19);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

Swift::Int NANAttribute.DataCluster.hashValue.getter(unint64_t a1, uint64_t a2)
{
  Swift::UInt8 v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD v11[9];

  v3 = a1;
  v4 = a1 >> 8;
  v5 = a1 >> 16;
  v6 = a1 >> 24;
  v7 = HIDWORD(a1);
  v8 = a1 >> 40;
  v9 = HIWORD(a1);
  Hasher.init(_seed:)(v11);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  swift_bridgeObjectRetain(a2);
  sub_10008E0F8((uint64_t)v11, a2);
  swift_bridgeObjectRelease(a2);
  return Hasher._finalize()();
}

uint64_t NANAttribute.DataCluster.init(from:)(_QWORD *a1)
{
  return sub_1001D4704(a1) & 0xFFFFFFFFFFFFFFLL;
}

Swift::Int sub_1001B6404()
{
  uint64_t v0;
  uint64_t v1;
  Swift::UInt8 v2;
  Swift::UInt8 v3;
  Swift::UInt8 v4;
  Swift::UInt8 v5;
  Swift::UInt8 v6;
  Swift::UInt8 v7;
  Swift::UInt8 v8;
  _QWORD v10[9];

  v1 = *(_QWORD *)(v0 + 8);
  v2 = *(_BYTE *)v0;
  v3 = *(_BYTE *)(v0 + 1);
  v4 = *(_BYTE *)(v0 + 2);
  v5 = *(_BYTE *)(v0 + 3);
  v6 = *(_BYTE *)(v0 + 4);
  v7 = *(_BYTE *)(v0 + 5);
  v8 = *(_BYTE *)(v0 + 6);
  Hasher.init(_seed:)(v10);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  swift_bridgeObjectRetain(v1);
  sub_10008E0F8((uint64_t)v10, v1);
  swift_bridgeObjectRelease(v1);
  return Hasher._finalize()();
}

double sub_1001B64E8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  Swift::UInt8 v4;
  Swift::UInt8 v5;
  Swift::UInt8 v6;
  Swift::UInt8 v7;
  Swift::UInt8 v8;
  Swift::UInt8 v9;
  double result;

  v3 = *(_QWORD *)(v1 + 8);
  v4 = *(_BYTE *)(v1 + 1);
  v5 = *(_BYTE *)(v1 + 2);
  v6 = *(_BYTE *)(v1 + 3);
  v7 = *(_BYTE *)(v1 + 4);
  v8 = *(_BYTE *)(v1 + 5);
  v9 = *(_BYTE *)(v1 + 6);
  Hasher._combine(_:)(*(_BYTE *)v1);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  swift_bridgeObjectRetain(v3);
  sub_10008E0F8(a1, v3);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v3).n128_u64[0];
  return result;
}

Swift::Int sub_1001B6594()
{
  uint64_t v0;
  uint64_t v1;
  Swift::UInt8 v2;
  Swift::UInt8 v3;
  Swift::UInt8 v4;
  Swift::UInt8 v5;
  Swift::UInt8 v6;
  Swift::UInt8 v7;
  Swift::UInt8 v8;
  _QWORD v10[9];

  v1 = *(_QWORD *)(v0 + 8);
  v2 = *(_BYTE *)v0;
  v3 = *(_BYTE *)(v0 + 1);
  v4 = *(_BYTE *)(v0 + 2);
  v5 = *(_BYTE *)(v0 + 3);
  v6 = *(_BYTE *)(v0 + 4);
  v7 = *(_BYTE *)(v0 + 5);
  v8 = *(_BYTE *)(v0 + 6);
  Hasher.init(_seed:)(v10);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  swift_bridgeObjectRetain(v1);
  sub_10008E0F8((uint64_t)v10, v1);
  swift_bridgeObjectRelease(v1);
  return Hasher._finalize()();
}

uint64_t sub_1001B6674@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = sub_1001D4704(a1);
  if (!v2)
  {
    *(_WORD *)a2 = result;
    *(_BYTE *)(a2 + 2) = BYTE2(result);
    *(_BYTE *)(a2 + 3) = BYTE3(result);
    *(_BYTE *)(a2 + 4) = BYTE4(result);
    *(_BYTE *)(a2 + 5) = BYTE5(result);
    *(_BYTE *)(a2 + 6) = BYTE6(result);
    *(_QWORD *)(a2 + 8) = v5;
  }
  return result;
}

uint64_t sub_1001B66D0(_QWORD *a1)
{
  unsigned int *v1;

  return NANAttribute.DataCluster.encode(to:)(a1, *v1 | ((unint64_t)*((unsigned __int8 *)v1 + 4) << 32) | ((unint64_t)*((unsigned __int8 *)v1 + 5) << 40) | ((unint64_t)*((unsigned __int8 *)v1 + 6) << 48), *((_QWORD *)v1 + 1));
}

uint64_t sub_1001B6704(unsigned int *a1, unsigned int *a2)
{
  return sub_1001D0DA8(*a1 | ((unint64_t)*((unsigned __int8 *)a1 + 4) << 32) | ((unint64_t)*((unsigned __int8 *)a1 + 5) << 40) | ((unint64_t)*((unsigned __int8 *)a1 + 6) << 48), *((_QWORD *)a1 + 1), *a2 | ((unint64_t)*((unsigned __int8 *)a2 + 4) << 32) | ((unint64_t)*((unsigned __int8 *)a2 + 5) << 40) | ((unint64_t)*((unsigned __int8 *)a2 + 6) << 48), *((_QWORD *)a2 + 1));
}

void *NANAttribute.DeviceLink.Control.peerID.unsafeMutableAddressor()
{
  return &static NANAttribute.DeviceLink.Control.peerID;
}

void *NANAttribute.DeviceLink.Control.immutableSchedule.unsafeMutableAddressor()
{
  return &static NANAttribute.DeviceLink.Control.immutableSchedule;
}

void *NANAttribute.DeviceLink.Control.dataCluster.unsafeMutableAddressor()
{
  return &static NANAttribute.DeviceLink.Control.dataCluster;
}

void *NANAttribute.DeviceLink.Control.qos.unsafeMutableAddressor()
{
  return &static NANAttribute.DeviceLink.Control.qos;
}

void *NANAttribute.DeviceLink.Control.maximumIdlePeriod.unsafeMutableAddressor()
{
  return &static NANAttribute.DeviceLink.Control.maximumIdlePeriod;
}

void *NANAttribute.DeviceLink.Control.linkType.unsafeMutableAddressor()
{
  return &static NANAttribute.DeviceLink.Control.linkType;
}

uint64_t NANAttribute.DeviceLink.Control.setupReason.getter(char a1)
{
  char v1;
  unsigned int v2;

  v1 = sub_10007CD0C(6uLL, 2, a1);
  if (v1 == 1)
    v2 = 1;
  else
    v2 = 2;
  if (v1)
    return v2;
  else
    return 0;
}

uint64_t sub_1001B67F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1001DE894();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1001B6850(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1001DE894();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_1001B689C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1001EE014();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1001B68F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1001EE014();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

CoreP2P::NANAttribute::DeviceLink::Status_optional __swiftcall NANAttribute.DeviceLink.Status.init(rawValue:)(CoreP2P::NANAttribute::DeviceLink::Status_optional rawValue)
{
  if (rawValue.value >= CoreP2P_NANAttribute_DeviceLink_Status_unknownDefault)
    return (CoreP2P::NANAttribute::DeviceLink::Status_optional)3;
  return rawValue;
}

unsigned __int8 *sub_1001B6958@<X0>(unsigned __int8 *result@<X0>, _BYTE *a2@<X8>)
{
  unsigned int v2;

  v2 = *result;
  if (v2 >= 3)
    LOBYTE(v2) = 3;
  *a2 = v2;
  return result;
}

uint64_t sub_1001B6970(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1001EDFD0();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1001B69CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1001EDFD0();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t NANAttribute.DeviceLink.type.getter(__int16 a1)
{
  unsigned int v1;

  v1 = sub_10007CD0C(0, 4, SHIBYTE(a1));
  if (v1 >= 5)
    return 5;
  else
    return v1;
}

unint64_t NANAttribute.DeviceLink.status.getter(__int16 a1)
{
  unint64_t result;

  result = sub_10007CD0C(4uLL, 4, SHIBYTE(a1));
  if (result >= 3u)
    return 3;
  return result;
}

unint64_t NANAttribute.RangingSetup.control.getter(unint64_t a1)
{
  return a1 >> 24;
}

uint64_t NANAttribute.RangingSetup.control.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 3) = result;
  return result;
}

unint64_t NANAttribute.DeviceLink.peerID.getter(unint64_t a1)
{
  return BYTE4(a1) | (((a1 >> 40) & 1) << 8);
}

uint64_t NANAttribute.DeviceLink.peerID.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 4) = result;
  *(_BYTE *)(v1 + 5) = BYTE1(result) & 1;
  return result;
}

uint64_t NANAttribute.DeviceLink.maximumIdlePeriod.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t NANAttribute.DeviceLink.maximumIdlePeriod.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 8) = result;
  *(_BYTE *)(v2 + 16) = a2 & 1;
  return result;
}

double NANAttribute.DeviceLink.hash(into:)(uint64_t a1, unint64_t a2, Swift::UInt64 a3, char a4, uint64_t a5)
{
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  double result;

  v10 = a2 >> 8;
  v11 = a2 >> 16;
  v12 = a2 >> 24;
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(v11);
  Hasher._combine(_:)(v12);
  if ((a2 & 0x10000000000) != 0)
  {
    LOBYTE(v13) = 0;
  }
  else
  {
    v13 = HIDWORD(a2);
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v13);
  if ((a4 & 1) != 0)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(a3);
  }
  swift_bridgeObjectRetain(a5);
  sub_10008E0F8(a1, a5);
  *(_QWORD *)&result = swift_bridgeObjectRelease(a5).n128_u64[0];
  return result;
}

uint64_t static NANAttribute.DeviceLink.__derived_struct_equals(_:_:)(unint64_t a1, uint64_t a2, char a3, uint64_t a4, unint64_t a5, uint64_t a6, char a7, uint64_t a8)
{
  return sub_1001D014C(a1 & 0xFFFFFFFFFFLL | (((a1 >> 40) & 1) << 40), a2, a3 & 1, a4, a5 & 0xFFFFFFFFFFLL | (((a5 >> 40) & 1) << 40), a6, a7 & 1, a8);
}

Swift::Int NANAttribute.DeviceLink.hashValue.getter(unint64_t a1, Swift::UInt64 a2, char a3, uint64_t a4)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD v13[9];

  v8 = a1 >> 8;
  v9 = a1 >> 16;
  v10 = a1 >> 24;
  Hasher.init(_seed:)(v13);
  Hasher._combine(_:)(a1);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  if ((a1 & 0x10000000000) != 0)
  {
    LOBYTE(v11) = 0;
  }
  else
  {
    v11 = HIDWORD(a1);
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v11);
  if ((a3 & 1) != 0)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(a2);
  }
  swift_bridgeObjectRetain(a4);
  sub_10008E0F8((uint64_t)v13, a4);
  swift_bridgeObjectRelease(a4);
  return Hasher._finalize()();
}

Swift::Int sub_1001B6D28()
{
  unsigned int *v0;

  return NANAttribute.DeviceLink.hashValue.getter(*v0 | ((unint64_t)*((unsigned __int8 *)v0 + 4) << 32) | ((unint64_t)*((unsigned __int8 *)v0 + 5) << 40), *((_QWORD *)v0 + 1), *((_BYTE *)v0 + 16), *((_QWORD *)v0 + 3));
}

double sub_1001B6D60(uint64_t a1)
{
  unsigned int *v1;

  return NANAttribute.DeviceLink.hash(into:)(a1, *v1 | ((unint64_t)*((unsigned __int8 *)v1 + 4) << 32) | ((unint64_t)*((unsigned __int8 *)v1 + 5) << 40), *((_QWORD *)v1 + 1), *((_BYTE *)v1 + 16), *((_QWORD *)v1 + 3));
}

Swift::Int sub_1001B6D98()
{
  uint64_t v0;
  Swift::UInt8 v1;
  char v2;
  Swift::UInt64 v3;
  int v4;
  uint64_t v5;
  Swift::UInt8 v6;
  Swift::UInt8 v7;
  Swift::UInt8 v8;
  Swift::UInt8 v9;
  _QWORD v11[9];

  v1 = *(_BYTE *)(v0 + 4);
  v2 = *(_BYTE *)(v0 + 5);
  v3 = *(_QWORD *)(v0 + 8);
  v4 = *(unsigned __int8 *)(v0 + 16);
  v5 = *(_QWORD *)(v0 + 24);
  v6 = *(_BYTE *)v0;
  v7 = *(_BYTE *)(v0 + 1);
  v8 = *(_BYTE *)(v0 + 2);
  v9 = *(_BYTE *)(v0 + 3);
  Hasher.init(_seed:)(v11);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  if ((v2 & 1) != 0)
    v1 = 0;
  else
    Hasher._combine(_:)(1u);
  Hasher._combine(_:)(v1);
  if (v4)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v3);
  }
  swift_bridgeObjectRetain(v5);
  sub_10008E0F8((uint64_t)v11, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

unint64_t sub_1001B6EA4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  unint64_t result;
  uint64_t v5;
  char v6;
  uint64_t v7;

  result = sub_1001DC050(a1);
  if (!v2)
  {
    *(_WORD *)a2 = result;
    *(_BYTE *)(a2 + 2) = BYTE2(result);
    *(_BYTE *)(a2 + 3) = BYTE3(result);
    *(_BYTE *)(a2 + 4) = BYTE4(result);
    *(_BYTE *)(a2 + 5) = BYTE5(result) & 1;
    *(_QWORD *)(a2 + 8) = v5;
    *(_BYTE *)(a2 + 16) = v6 & 1;
    *(_QWORD *)(a2 + 24) = v7;
  }
  return result;
}

unint64_t NANAttribute.DeviceLink.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  unint64_t result;

  result = sub_1001DC050(a1);
  if (!v1)
    return result & 0xFFFFFFFFFFLL | (((result >> 40) & 1) << 40);
  return result;
}

uint64_t sub_1001B6F40(_QWORD *a1)
{
  unsigned int *v1;

  return NANAttribute.DeviceLink.encode(to:)(a1, *v1 | ((unint64_t)*((unsigned __int8 *)v1 + 4) << 32) | ((unint64_t)*((unsigned __int8 *)v1 + 5) << 40), *((_QWORD *)v1 + 1), *((_BYTE *)v1 + 16), *((_QWORD *)v1 + 3));
}

uint64_t NANAttribute.DeviceLink.encode(to:)(_QWORD *a1, unint64_t a2, unint64_t a3, char a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t result;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD v42[3];
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v10 = a1[3];
  v11 = a1[4];
  sub_10003259C(a1, v10);
  dispatch thunk of Encoder.unkeyedContainer()(v42, v10, v11);
  v12 = v43;
  v13 = v44;
  sub_100034C68((uint64_t)v42, v43);
  dispatch thunk of UnkeyedEncodingContainer.encode(_:)(a2, v12, v13);
  if (v5)
    return sub_100014430(v42);
  LOBYTE(v45) = BYTE1(a2);
  v14 = v43;
  v41 = v44;
  sub_100034C68((uint64_t)v42, v43);
  v15 = a4;
  v16 = a3;
  v17 = sub_100012C44(&qword_10040A728);
  v18 = a5;
  v19 = sub_100011770(&qword_10040A730, &qword_10040A728, byte_100349338);
  v20 = v17;
  v21 = v16;
  v22 = v15;
  dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)(&v45, v20, v19, v14, v41);
  LOBYTE(v45) = BYTE2(a2);
  v23 = v43;
  v24 = v44;
  sub_100034C68((uint64_t)v42, v43);
  v25 = sub_1001DAED8();
  dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)(&v45, &type metadata for NANReasonCode, v25, v23, v24);
  v26 = BYTE3(a2);
  LOBYTE(v45) = BYTE3(a2);
  v27 = v43;
  v28 = v44;
  sub_100034C68((uint64_t)v42, v43);
  v29 = sub_1001DC394();
  dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)(&v45, &type metadata for NANAttribute.DeviceLink.Control, v29, v27, v28);
  if ((a2 & 0x10000000000) == 0 && (a2 & 0x1000000) != 0)
  {
    v31 = HIDWORD(a2);
    v32 = v43;
    v33 = v44;
    sub_100034C68((uint64_t)v42, v43);
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)(v31, v32, v33);
  }
  if ((v22 & 1) != 0 || (v26 & 0x10) == 0)
  {
LABEL_13:
    if (*(_QWORD *)(v18 + 16))
    {
      if ((v26 & 2) != 0)
      {
        v45 = v18;
        v37 = v43;
        v38 = v44;
        sub_100034C68((uint64_t)v42, v43);
        v39 = sub_100012C44(&qword_10040A710);
        v40 = sub_1000934A0(&qword_10040A718, &qword_10040A710, (uint64_t (*)(void))sub_1001DBBB4, (const char *)&protocol conformance descriptor for <A> [A]);
        dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)(&v45, v39, v40, v37, v38);
      }
    }
    return sub_100014430(v42);
  }
  if (!(v21 >> 26))
  {
    v34 = v21 >> 10;
    v35 = v43;
    v36 = v44;
    sub_100034C68((uint64_t)v42, v43);
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)(v34, v35, v36);
    goto LABEL_13;
  }
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 3455, 0);
  __break(1u);
  return result;
}

uint64_t sub_1001B7298(unsigned int *a1, unsigned int *a2)
{
  return sub_1001D014C(*a1 | ((unint64_t)*((unsigned __int8 *)a1 + 4) << 32) | ((unint64_t)*((unsigned __int8 *)a1 + 5) << 40), *((_QWORD *)a1 + 1), *((_BYTE *)a1 + 16), *((_QWORD *)a1 + 3), *a2 | ((unint64_t)*((unsigned __int8 *)a2 + 4) << 32) | ((unint64_t)*((unsigned __int8 *)a2 + 5) << 40), *((_QWORD *)a2 + 1), *((_BYTE *)a2 + 16), *((_QWORD *)a2 + 3));
}

void NANAttribute.DeviceLinkQoS.hash(into:)(int a1, unsigned int a2)
{
  unsigned int v2;

  v2 = HIWORD(a2);
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(v2);
}

BOOL static NANAttribute.DeviceLinkQoS.__derived_struct_equals(_:_:)(unsigned int a1, unsigned int a2)
{
  return a1 == a2 && HIWORD(a1) == HIWORD(a2);
}

uint64_t sub_1001B734C()
{
  _BYTE *v0;

  if (*v0)
    return 0x4C6D756D6978616DLL;
  else
    return 0xD000000000000010;
}

uint64_t sub_1001B7398@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1001EC838(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1001B73BC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001DC3D8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001B73E4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001DC3D8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NANAttribute.DeviceLinkQoS.encode(to:)(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;
  char v14;
  char v15;

  v5 = sub_100012C44(&qword_10040A740);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin();
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10003259C(a1, v9);
  v11 = sub_1001DC3D8();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for NANAttribute.DeviceLinkQoS.CodingKeys, &type metadata for NANAttribute.DeviceLinkQoS.CodingKeys, v11, v9, v10);
  v15 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(a2, &v15, v5);
  if (!v2)
  {
    v14 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(WORD1(a2), &v14, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

Swift::Int NANAttribute.DeviceLinkQoS.hashValue.getter(unsigned int a1)
{
  Swift::UInt8 v1;
  unsigned int v2;
  _QWORD v4[9];

  v1 = a1;
  v2 = HIWORD(a1);
  Hasher.init(_seed:)(v4);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t NANAttribute.DeviceLinkQoS.init(from:)(_QWORD *a1)
{
  return sub_1001D4F98(a1) & 0xFFFF00FFLL;
}

Swift::Int sub_1001B7594()
{
  uint64_t v0;
  Swift::UInt8 v1;
  Swift::UInt16 v2;
  _QWORD v4[9];

  v1 = *(_BYTE *)v0;
  v2 = *(_WORD *)(v0 + 2);
  Hasher.init(_seed:)(v4);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void sub_1001B75F0()
{
  uint64_t v0;
  Swift::UInt16 v1;

  v1 = *(_WORD *)(v0 + 2);
  Hasher._combine(_:)(*(_BYTE *)v0);
  Hasher._combine(_:)(v1);
}

Swift::Int sub_1001B762C()
{
  uint64_t v0;
  Swift::UInt8 v1;
  Swift::UInt16 v2;
  _QWORD v4[9];

  v1 = *(_BYTE *)v0;
  v2 = *(_WORD *)(v0 + 2);
  Hasher.init(_seed:)(v4);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t sub_1001B7684@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = sub_1001D4F98(a1);
  if (!v2)
  {
    *(_BYTE *)a2 = result;
    *(_WORD *)(a2 + 2) = WORD1(result);
  }
  return result;
}

uint64_t sub_1001B76B4(_QWORD *a1)
{
  unsigned __int8 *v1;

  return NANAttribute.DeviceLinkQoS.encode(to:)(a1, *v1 | (*((unsigned __int16 *)v1 + 1) << 16));
}

BOOL sub_1001B76D4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2 && *((unsigned __int16 *)a1 + 1) == *((unsigned __int16 *)a2 + 1);
}

void *NANAttribute.UnalignedSchedule.UnalignedWindowOverwrite.overwriteAll.unsafeMutableAddressor()
{
  return &static NANAttribute.UnalignedSchedule.UnalignedWindowOverwrite.overwriteAll;
}

unint64_t NANAttribute.UnalignedSchedule.UnalignedWindowOverwrite.mapID.getter(char a1)
{
  if ((a1 & 1) != 0)
    return 256;
  else
    return sub_10007CD0C(1uLL, 4, a1) & 0xF;
}

uint64_t sub_1001B7774(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1001DEAD4();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1001B77D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1001DEAD4();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t NANAttribute.UnalignedSchedule.UnalignedWindowControl.entryType.getter(uint64_t a1)
{
  return sub_1001B782C(a1, (uint64_t (*)(_QWORD, uint64_t, uint64_t))sub_10007CD0C, 628);
}

uint64_t sub_1001B782C(uint64_t a1, uint64_t (*a2)(_QWORD, uint64_t, uint64_t), uint64_t a3)
{
  uint64_t result;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = a2(0, 2, a1);
  if (result > 3u)
  {
    v5 = sub_100012C84();
    v6 = swift_allocError(&type metadata for WiFiError, v5, 0, 0);
    *(_OWORD *)v7 = xmmword_100337850;
    *(_BYTE *)(v7 + 16) = 2;
    v8 = v6;
    swift_willThrow(v6);
    result = swift_unexpectedError(v8, "CoreP2P/NANAttribute.swift", 26, 1, a3);
    __break(1u);
  }
  return result;
}

void *NANAttribute.UnalignedSchedule.UnalignedWindowControl.availableOnEntry.unsafeMutableAddressor()
{
  return &static NANAttribute.UnalignedSchedule.UnalignedWindowControl.availableOnEntry;
}

uint64_t NANAttribute.UnalignedSchedule.UnalignedWindowControl.rxNSS.getter(uint64_t a1)
{
  return sub_1001B7904(a1, 3, (uint64_t (*)(uint64_t, uint64_t, uint64_t))sub_10007CD20);
}

uint64_t sub_1001B7904(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  return a3(a2, 4, a1);
}

uint64_t sub_1001B796C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1001DEC3C();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1001B79C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1001DEC3C();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

unint64_t NANAttribute.UnalignedSchedule.unalignedWindowOverwrite.getter(uint64_t a1, uint64_t a2, unint64_t a3)
{
  return a3 >> 8;
}

uint64_t NANAttribute.UnalignedSchedule.unalignedWindowControl.getter(uint64_t a1, uint64_t a2, int a3)
{
  return BYTE2(a3) | ((HIBYTE(a3) & 1) << 8);
}

uint64_t NANAttribute.UnalignedSchedule.unalignedWindowControl.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 18) = result;
  *(_BYTE *)(v1 + 19) = BYTE1(result) & 1;
  return result;
}

unint64_t NANAttribute.UnalignedSchedule.entry.getter(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  return __PAIR64__(a4, HIDWORD(a3));
}

uint64_t NANAttribute.UnalignedSchedule.entry.setter(uint64_t result, __int16 a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 20) = result;
  *(_WORD *)(v2 + 28) = a2;
  return result;
}

void NANAttribute.UnalignedSchedule.hash(into:)(int a1, unint64_t a2, unint64_t a3, unint64_t a4, uint64_t a5)
{
  Swift::UInt32 v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char v11;
  unsigned int v12;
  unint64_t v13;
  Swift::UInt8 v14;
  int v15;
  int v16;

  v6 = a3;
  v15 = HIDWORD(a4);
  v16 = a5;
  v7 = a2 >> 8;
  v8 = HIDWORD(a2);
  v9 = HIDWORD(a3);
  v10 = a4 >> 8;
  v11 = BYTE3(a4);
  v12 = WORD2(a5);
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(a4);
  Hasher._combine(_:)(v10);
  if ((v11 & 1) != 0)
  {
    LOBYTE(v13) = 0;
  }
  else
  {
    v13 = a4 >> 16;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v13);
  if (v12 >> 8 >= 0xFF)
  {
LABEL_9:
    v14 = 0;
    goto LABEL_10;
  }
  Hasher._combine(_:)(1u);
  if ((v12 & 0x100) != 0)
  {
    Hasher._combine(_:)(v15);
    Hasher._combine(_:)(HIWORD(v15));
    Hasher._combine(_:)(v16);
    if ((v12 & 1) == 0)
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(HIWORD(v16));
      return;
    }
    goto LABEL_9;
  }
  v14 = v15;
LABEL_10:
  Hasher._combine(_:)(v14);
}

uint64_t static NANAttribute.UnalignedSchedule.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE var10[20];

  *(_DWORD *)&var10[4] = HIDWORD(a7);
  *(_QWORD *)&var10[8] = a8;
  v8 = *(_QWORD *)&var10[4];
  *(_WORD *)var10 = a3;
  var10[2] = BYTE2(a3);
  var10[3] = BYTE3(a3);
  *(_QWORD *)&var10[4] = __PAIR64__(a4, HIDWORD(a3));
  *(_WORD *)&var10[12] = WORD2(a4);
  v9 = *(_QWORD *)var10;
  v10 = *(_QWORD *)&var10[8];
  *(_WORD *)var10 = a7;
  var10[2] = BYTE2(a7);
  var10[3] = BYTE3(a7);
  *(_QWORD *)&var10[4] = v8;
  *(_WORD *)&var10[12] = WORD2(a8);
  return sub_1001D01A0(a1 & 0xFFFFFFFF0000FFFFLL, a2, v9, v10, a5 & 0xFFFFFFFF0000FFFFLL, a6, *(uint64_t *)var10, *(uint64_t *)&var10[8]);
}

Swift::Int NANAttribute.UnalignedSchedule.hashValue.getter(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  char v4;
  unint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  unint64_t v11;
  __int128 v13;
  _OWORD v14[4];

  v4 = a3;
  *(_QWORD *)&v14[0] = a3;
  *((_QWORD *)&v14[0] + 1) = a4;
  v7 = a3 >> 8;
  v8 = a3 >> 16;
  v9 = BYTE3(a3);
  v10 = *(_QWORD *)((char *)v14 + 4);
  v11 = HIDWORD(a4);
  Hasher.init(_seed:)(v14);
  LOBYTE(v13) = v4;
  BYTE1(v13) = v7;
  BYTE2(v13) = v8;
  BYTE3(v13) = v9;
  *(_QWORD *)((char *)&v13 + 4) = v10;
  WORD6(v13) = v11;
  NANAttribute.UnalignedSchedule.hash(into:)((int)v14, a1 & 0xFFFFFFFF0000FFFFLL, a2, v13, *((uint64_t *)&v13 + 1));
  return Hasher._finalize()();
}

Swift::Int sub_1001B7C9C()
{
  unsigned __int16 *v0;
  unint64_t v1;
  unsigned __int16 v2;
  char v3;
  char v4;
  uint64_t v5;
  unsigned __int16 v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v10;
  _QWORD v11[9];

  v1 = *((_QWORD *)v0 + 1);
  v2 = v0[8];
  v3 = *((_BYTE *)v0 + 18);
  v4 = *((_BYTE *)v0 + 19);
  v5 = *(_QWORD *)(v0 + 10);
  v6 = v0[14];
  v7 = *v0;
  v8 = *((unsigned int *)v0 + 1);
  Hasher.init(_seed:)(v11);
  LOWORD(v10) = v2;
  BYTE2(v10) = v3;
  BYTE3(v10) = v4;
  *(_QWORD *)((char *)&v10 + 4) = v5;
  WORD6(v10) = v6;
  NANAttribute.UnalignedSchedule.hash(into:)((int)v11, v7 | (v8 << 32), v1, v10, *((uint64_t *)&v10 + 1));
  return Hasher._finalize()();
}

void sub_1001B7D30(int a1)
{
  unsigned __int16 *v1;
  __int128 v2;

  BYTE2(v2) = *((_BYTE *)v1 + 18);
  BYTE3(v2) = *((_BYTE *)v1 + 19);
  *(_QWORD *)((char *)&v2 + 4) = *(_QWORD *)(v1 + 10);
  WORD6(v2) = v1[14];
  NANAttribute.UnalignedSchedule.hash(into:)(a1, *v1 | ((unint64_t)*((unsigned int *)v1 + 1) << 32), *((_QWORD *)v1 + 1), v2, *((uint64_t *)&v2 + 1));
}

Swift::Int sub_1001B7D70()
{
  unsigned __int16 *v0;
  unint64_t v1;
  unsigned __int16 v2;
  char v3;
  char v4;
  uint64_t v5;
  unsigned __int16 v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v10;
  _QWORD v11[9];

  v1 = *((_QWORD *)v0 + 1);
  v2 = v0[8];
  v3 = *((_BYTE *)v0 + 18);
  v4 = *((_BYTE *)v0 + 19);
  v5 = *(_QWORD *)(v0 + 10);
  v6 = v0[14];
  v7 = *v0;
  v8 = *((unsigned int *)v0 + 1);
  Hasher.init(_seed:)(v11);
  LOWORD(v10) = v2;
  BYTE2(v10) = v3;
  BYTE3(v10) = v4;
  *(_QWORD *)((char *)&v10 + 4) = v5;
  WORD6(v10) = v6;
  NANAttribute.UnalignedSchedule.hash(into:)((int)v11, v7 | (v8 << 32), v1, v10, *((uint64_t *)&v10 + 1));
  return Hasher._finalize()();
}

uint64_t sub_1001B7E00@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = sub_1001D90D4(a1);
  if (!v2)
  {
    *(_WORD *)a2 = result;
    *(_DWORD *)(a2 + 4) = HIDWORD(result);
    *(_QWORD *)(a2 + 8) = v5;
    *(_WORD *)(a2 + 16) = v6;
    *(_BYTE *)(a2 + 18) = BYTE2(v6);
    *(_BYTE *)(a2 + 19) = BYTE3(v6);
    *(_QWORD *)(a2 + 20) = __PAIR64__(v7, HIDWORD(v6));
    *(_WORD *)(a2 + 28) = WORD2(v7);
  }
  return result;
}

uint64_t NANAttribute.UnalignedSchedule.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t result;

  result = sub_1001D90D4(a1);
  if (!v1)
    return result & 0xFFFFFFFF0000FFFFLL;
  return result;
}

uint64_t sub_1001B7ED4(_QWORD *a1)
{
  unsigned __int16 *v1;
  __int128 v3;

  LOWORD(v3) = v1[8];
  BYTE2(v3) = *((_BYTE *)v1 + 18);
  BYTE3(v3) = *((_BYTE *)v1 + 19);
  *(_QWORD *)((char *)&v3 + 4) = *(_QWORD *)(v1 + 10);
  WORD6(v3) = v1[14];
  return NANAttribute.UnalignedSchedule.encode(to:)(a1, *v1 | ((unint64_t)*((unsigned int *)v1 + 1) << 32), *((_QWORD *)v1 + 1), v3, *((uint64_t *)&v3 + 1));
}

uint64_t NANAttribute.UnalignedSchedule.encode(to:)(_QWORD *a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  unsigned __int16 v6;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  unsigned __int8 v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  ValueMetadata *v38;
  int v39;
  unsigned int v40;
  uint64_t result;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE v45[2];
  __int16 v46;
  char v47;
  __int16 v48;
  char v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v6 = WORD2(a5);
  *(_QWORD *)&v50 = a4;
  *((_QWORD *)&v50 + 1) = a5;
  v10 = BYTE3(a4);
  v53 = *(_QWORD *)((char *)&v50 + 4);
  v11 = a1[3];
  v12 = a1[4];
  sub_10003259C(a1, v11);
  dispatch thunk of Encoder.unkeyedContainer()(&v50, v11, v12);
  v13 = v51;
  v14 = v52;
  sub_100034C68((uint64_t)&v50, v51);
  dispatch thunk of UnkeyedEncodingContainer.encode(_:)(a2, v13, v14);
  if (v5)
    return sub_100014430(&v50);
  v15 = v51;
  v16 = v52;
  sub_100034C68((uint64_t)&v50, v51);
  dispatch thunk of UnkeyedEncodingContainer.encode(_:)(a2 >> 8, v15, v16);
  v17 = HIDWORD(a2);
  v18 = v51;
  v19 = v52;
  sub_100034C68((uint64_t)&v50, v51);
  dispatch thunk of UnkeyedEncodingContainer.encode(_:)(v17, v18, v19);
  v20 = v51;
  v21 = v52;
  sub_100034C68((uint64_t)&v50, v51);
  dispatch thunk of UnkeyedEncodingContainer.encode(_:)(a3, v20, v21);
  v22 = HIDWORD(a3);
  v23 = v51;
  v24 = v52;
  sub_100034C68((uint64_t)&v50, v51);
  dispatch thunk of UnkeyedEncodingContainer.encode(_:)(v22, v23, v24);
  v25 = v51;
  v26 = v52;
  sub_100034C68((uint64_t)&v50, v51);
  dispatch thunk of UnkeyedEncodingContainer.encode(_:)(a4, v25, v26);
  v45[0] = BYTE1(a4);
  v27 = v51;
  v28 = v52;
  sub_100034C68((uint64_t)&v50, v51);
  v29 = sub_1001DC41C();
  dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)(v45, &type metadata for NANAttribute.UnalignedSchedule.UnalignedWindowOverwrite, v29, v27, v28);
  v30 = HIBYTE(v6) > 0xFEu ? 1 : v10;
  if ((v30 & 1) != 0)
    return sub_100014430(&v50);
  if ((v6 & 0x100) != 0)
  {
    v39 = sub_10007CD0C(0, 2, SBYTE2(a4));
    if ((v39 - 2) >= 2 && v39)
    {
      if (v39 != 1)
        goto LABEL_20;
    }
    else
    {
      v40 = sub_10007CD0C(0, 2, SBYTE2(a4));
      if (v40 < 2)
        return sub_100014430(&v50);
      if (v40 != 2)
      {
        if (v40 != 3)
          goto LABEL_20;
        return sub_100014430(&v50);
      }
    }
    v45[0] = v53;
    v46 = WORD1(v53);
    v47 = BYTE4(v53);
    v48 = HIWORD(v53);
    v49 = v6 & 1;
    v35 = v51;
    v36 = v52;
    sub_100034C68((uint64_t)&v50, v51);
    v37 = sub_1000928C8();
    v38 = &type metadata for NANBitmap.Channel;
    goto LABEL_18;
  }
  v31 = sub_10007CD0C(0, 2, SBYTE2(a4));
  if (v31 - 1 < 3)
    return sub_100014430(&v50);
  if (!v31)
  {
    v45[0] = BYTE2(a4);
    v32 = v51;
    v33 = v52;
    sub_100034C68((uint64_t)&v50, v51);
    v34 = sub_1001DC460();
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)(v45, &type metadata for NANAttribute.UnalignedSchedule.UnalignedWindowControl, v34, v32, v33);
    v45[0] = v53;
    v35 = v51;
    v36 = v52;
    sub_100034C68((uint64_t)&v50, v51);
    v37 = sub_10009290C();
    v38 = &type metadata for NANBitmap.Band;
LABEL_18:
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)(v45, v38, v37, v35, v36);
    return sub_100014430(&v50);
  }
LABEL_20:
  v42 = sub_100012C84();
  v43 = swift_allocError(&type metadata for WiFiError, v42, 0, 0);
  *(_OWORD *)v44 = xmmword_100337850;
  *(_BYTE *)(v44 + 16) = 2;
  swift_willThrow(v43);
  result = swift_unexpectedError(v43, "CoreP2P/NANAttribute.swift", 26, 1);
  __break(1u);
  return result;
}

uint64_t sub_1001B831C(unsigned __int16 *a1, unsigned __int16 *a2)
{
  __int128 v2;
  __int128 v4;

  BYTE2(v4) = *((_BYTE *)a1 + 18);
  BYTE3(v4) = *((_BYTE *)a1 + 19);
  *(_QWORD *)((char *)&v4 + 4) = *(_QWORD *)(a1 + 10);
  WORD6(v4) = a1[14];
  v2 = v4;
  LOWORD(v4) = a2[8];
  BYTE2(v4) = *((_BYTE *)a2 + 18);
  BYTE3(v4) = *((_BYTE *)a2 + 19);
  *(_QWORD *)((char *)&v4 + 4) = *(_QWORD *)(a2 + 10);
  WORD6(v4) = a2[14];
  return sub_1001D01A0(*a1 | ((unint64_t)*((unsigned int *)a1 + 1) << 32), *((_QWORD *)a1 + 1), v2, *((uint64_t *)&v2 + 1), *a2 | ((unint64_t)*((unsigned int *)a2 + 1) << 32), *((_QWORD *)a2 + 1), v4, *((uint64_t *)&v4 + 1));
}

void *NANAttribute.RangingInformation.LocationInformation.localCoordinates.unsafeMutableAddressor()
{
  return &static NANAttribute.RangingInformation.LocationInformation.localCoordinates;
}

void *NANAttribute.RangingInformation.LocationInformation.geospatial.unsafeMutableAddressor()
{
  return &static NANAttribute.RangingInformation.LocationInformation.geospatial;
}

void *NANAttribute.RangingInformation.LocationInformation.civic.unsafeMutableAddressor()
{
  return &static NANAttribute.RangingInformation.LocationInformation.civic;
}

void *NANAttribute.RangingInformation.LocationInformation.lastMovementIndication.unsafeMutableAddressor()
{
  return &static NANAttribute.RangingInformation.LocationInformation.lastMovementIndication;
}

uint64_t sub_1001B83CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1001DEDA4();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1001B8428(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1001DEDA4();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

unint64_t NANAttribute.RangingInformation.lastMovementIndication.getter(uint64_t a1)
{
  return (a1 & 0x1FFFFFFFFuLL) >> 16;
}

uint64_t NANAttribute.RangingInformation.lastMovementIndication.setter(uint64_t result)
{
  char *v1;
  char v2;
  char v3;

  *((_WORD *)v1 + 1) = result;
  v1[4] = BYTE2(result) & 1;
  v2 = *v1;
  if ((result & 0x10000) != 0)
  {
    if ((*v1 & 8) == 0)
      return result;
    v3 = v2 & 0xF7;
  }
  else
  {
    if ((*v1 & 8) != 0)
      return result;
    v3 = v2 | 8;
  }
  *v1 = v3;
  return result;
}

char **(*NANAttribute.RangingInformation.lastMovementIndication.modify(_QWORD *a1))(char **result, char a2)
{
  uint64_t v1;

  *a1 = v1;
  return sub_1001B84D4;
}

char **sub_1001B84D4(char **result, char a2)
{
  char *v2;
  char v3;

  if ((a2 & 1) == 0)
  {
    v2 = *result;
    v3 = **result;
    if (((*result)[4] & 1) != 0)
    {
      if ((**result & 8) != 0)
        *v2 = v3 & 0xF7;
    }
    else if ((**result & 8) == 0)
    {
      *v2 = v3 | 8;
    }
  }
  return result;
}

void NANAttribute.RangingInformation.hash(into:)(int a1, uint64_t a2)
{
  Hasher._combine(_:)(a2);
  if ((a2 & 0x100000000) != 0)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(WORD1(a2));
  }
}

uint64_t static NANAttribute.RangingInformation.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2)
{
  if (a1 == a2)
  {
    if ((a1 & 0x100000000) != 0)
    {
      if ((a2 & 0x100000000) != 0)
        return 1;
    }
    else if (WORD1(a1) == WORD1(a2) && (a2 & 0x100000000) == 0)
    {
      return 1;
    }
  }
  return 0;
}

Swift::Int NANAttribute.RangingInformation.hashValue.getter(uint64_t a1)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(a1);
  if ((a1 & 0x100000000) != 0)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(WORD1(a1));
  }
  return Hasher._finalize()();
}

Swift::Int sub_1001B8604()
{
  uint64_t v0;
  Swift::UInt16 v1;
  int v2;
  Swift::UInt8 v3;
  _QWORD v5[9];

  v1 = *(_WORD *)(v0 + 2);
  v2 = *(unsigned __int8 *)(v0 + 4);
  v3 = *(_BYTE *)v0;
  Hasher.init(_seed:)(v5);
  Hasher._combine(_:)(v3);
  if (v2 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1);
  }
  return Hasher._finalize()();
}

void sub_1001B8684()
{
  uint64_t v0;
  Swift::UInt16 v1;
  int v2;

  v1 = *(_WORD *)(v0 + 2);
  v2 = *(unsigned __int8 *)(v0 + 4);
  Hasher._combine(_:)(*(_BYTE *)v0);
  if (v2 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1);
  }
}

Swift::Int sub_1001B86E0()
{
  uint64_t v0;
  Swift::UInt16 v1;
  int v2;
  Swift::UInt8 v3;
  _QWORD v5[9];

  v1 = *(_WORD *)(v0 + 2);
  v2 = *(unsigned __int8 *)(v0 + 4);
  v3 = *(_BYTE *)v0;
  Hasher.init(_seed:)(v5);
  Hasher._combine(_:)(v3);
  if (v2 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1);
  }
  return Hasher._finalize()();
}

unint64_t sub_1001B875C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  unint64_t result;

  result = sub_1001D8FA4(a1);
  if (!v2)
  {
    *(_BYTE *)a2 = result;
    *(_WORD *)(a2 + 2) = WORD1(result);
    *(_BYTE *)(a2 + 4) = BYTE4(result) & 1;
  }
  return result;
}

uint64_t NANAttribute.RangingInformation.init(from:)(_QWORD *a1)
{
  unint64_t v1;

  v1 = sub_1001D8FA4(a1);
  return v1 & 0xFFFF00FF | ((HIDWORD(v1) & 1) << 32);
}

uint64_t sub_1001B87C8(_QWORD *a1)
{
  unsigned __int8 *v1;

  return NANAttribute.RangingInformation.encode(to:)(a1, *v1 | ((unint64_t)*((unsigned __int16 *)v1 + 1) << 16) | ((unint64_t)v1[4] << 32));
}

uint64_t NANAttribute.RangingInformation.encode(to:)(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[3];
  uint64_t v14;
  uint64_t v15;
  char v16;

  v4 = a1[3];
  v5 = a1[4];
  sub_10003259C(a1, v4);
  dispatch thunk of Encoder.unkeyedContainer()(v13, v4, v5);
  v16 = a2;
  v6 = v14;
  v7 = v15;
  sub_100034C68((uint64_t)v13, v14);
  v8 = sub_1001DC4A4();
  dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)(&v16, &type metadata for NANAttribute.RangingInformation.LocationInformation, v8, v6, v7);
  if (!v2 && (a2 & 0x100000000) == 0 && (a2 & 8) != 0)
  {
    v9 = a2 >> 16;
    v10 = v14;
    v11 = v15;
    sub_100034C68((uint64_t)v13, v14);
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)(v9, v10, v11);
  }
  return sub_100014430(v13);
}

uint64_t sub_1001B88E8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  char v2;

  if (*a1 == *a2)
  {
    v2 = a2[4];
    if ((a1[4] & 1) != 0)
    {
      if (a2[4])
        return 1;
    }
    else
    {
      if (*((unsigned __int16 *)a1 + 1) != *((unsigned __int16 *)a2 + 1))
        v2 = 1;
      if ((v2 & 1) == 0)
        return 1;
    }
  }
  return 0;
}

uint64_t sub_1001B892C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1001EDF8C();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1001B8988(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1001EDF8C();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_1001B89D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1001EDF48();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1001B8A30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1001EDF48();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

void *NANAttribute.RangingSetup.Control.rangingReportRequired.unsafeMutableAddressor()
{
  return &static NANAttribute.RangingSetup.Control.rangingReportRequired;
}

void *NANAttribute.RangingSetup.Control.fineTimingMeasurementParameters.unsafeMutableAddressor()
{
  return &static NANAttribute.RangingSetup.Control.fineTimingMeasurementParameters;
}

void *NANAttribute.RangingSetup.Control.scheduleEntries.unsafeMutableAddressor()
{
  return &static NANAttribute.RangingSetup.Control.scheduleEntries;
}

uint64_t sub_1001B8AA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1001DEF9C();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1001B8AFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1001DEF9C();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

_QWORD *NANAttribute.RangingSetup.FineTimingMeasurementParameters.init(from:)(_QWORD *a1)
{
  return sub_1001DBEE0(a1);
}

unint64_t NANAttribute.RangingSetup.FineTimingMeasurementParameters.maximumBurstDuration.getter(unsigned int a1)
{
  return sub_1001B8B9C(a1, 0, 4);
}

unint64_t NANAttribute.RangingSetup.FineTimingMeasurementParameters.minimumDeltaFineTimingMeasurement.getter(unsigned int a1)
{
  return sub_1001B8B9C(a1, 4uLL, 6);
}

unint64_t NANAttribute.RangingSetup.FineTimingMeasurementParameters.maximumFineTimingMeasurementsPerBurst.getter(unsigned int a1)
{
  return sub_1001B8B9C(a1, 9uLL, 5);
}

unint64_t NANAttribute.RangingSetup.FineTimingMeasurementParameters.fineTimingMeasurementFormatAndBandwidth.getter(unsigned int a1)
{
  return sub_1001B8B9C(a1, 0xDuLL, 6);
}

unint64_t sub_1001B8B9C(unsigned int a1, unint64_t a2, uint64_t a3)
{
  return sub_10007D0EC(a2, a3, a1);
}

_QWORD *sub_1001B8C04@<X0>(_QWORD *a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;

  result = sub_1001DBEE0(a1);
  if (!v2)
    *a2 = (_DWORD)result;
  return result;
}

uint64_t sub_1001B8C2C(_QWORD *a1)
{
  unsigned int *v1;

  return OUI.encode(to:)(a1, *v1);
}

unint64_t NANAttribute.RangingSetup.type.getter(__int16 a1)
{
  unint64_t result;

  result = sub_10007CD0C(0, 4, SHIBYTE(a1));
  if (result >= 3u)
    return 3;
  return result;
}

uint64_t NANAttribute.RangingSetup.status.getter(__int16 a1)
{
  char v1;
  unsigned int v2;

  v1 = sub_10007CD0C(4uLL, 4, SHIBYTE(a1));
  if (v1 == 1)
    v2 = 1;
  else
    v2 = 2;
  if (v1)
    return v2;
  else
    return 0;
}

uint64_t NANAttribute.RangingSetup.fineTimingMeasurementParameters.getter(uint64_t a1, char a2)
{
  __int128 v3;

  *((_QWORD *)&v3 + 1) = a2 & 1;
  *(_QWORD *)&v3 = a1;
  return v3 >> 32;
}

double NANAttribute.RangingSetup.hash(into:)(uint64_t a1, unint64_t a2, char a3, uint64_t a4)
{
  Swift::UInt32 v6;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  double result;

  v6 = HIDWORD(a2);
  v8 = a2 >> 8;
  v9 = a2 >> 16;
  v10 = a2 >> 24;
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  if ((a3 & 1) != 0)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v6);
  }
  swift_bridgeObjectRetain(a4);
  sub_10008E0F8(a1, a4);
  *(_QWORD *)&result = swift_bridgeObjectRelease(a4).n128_u64[0];
  return result;
}

uint64_t static NANAttribute.RangingSetup.__derived_struct_equals(_:_:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6)
{
  return sub_1001D02C0(a1, a2 & 1, a3, a4, a5 & 1, a6);
}

Swift::Int NANAttribute.RangingSetup.hashValue.getter(unint64_t a1, char a2, uint64_t a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD v10[9];

  v6 = a1 >> 8;
  v7 = a1 >> 16;
  v8 = a1 >> 24;
  Hasher.init(_seed:)(v10);
  Hasher._combine(_:)(a1);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  if ((a2 & 1) != 0)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(HIDWORD(a1));
  }
  swift_bridgeObjectRetain(a3);
  sub_10008E0F8((uint64_t)v10, a3);
  swift_bridgeObjectRelease(a3);
  return Hasher._finalize()();
}

Swift::Int sub_1001B8EB0()
{
  uint64_t v0;

  return NANAttribute.RangingSetup.hashValue.getter(*(_QWORD *)v0, *(_BYTE *)(v0 + 8), *(_QWORD *)(v0 + 16));
}

double sub_1001B8EC8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::UInt32 v4;
  int v5;
  uint64_t v6;
  Swift::UInt8 v7;
  Swift::UInt8 v8;
  Swift::UInt8 v9;
  double result;

  v2 = v1;
  v4 = *(_DWORD *)(v2 + 4);
  v5 = *(unsigned __int8 *)(v2 + 8);
  v6 = *(_QWORD *)(v2 + 16);
  v7 = *(_BYTE *)(v2 + 1);
  v8 = *(_BYTE *)(v2 + 2);
  v9 = *(_BYTE *)(v2 + 3);
  Hasher._combine(_:)(*(_BYTE *)v2);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  if (v5 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v4);
  }
  swift_bridgeObjectRetain(v6);
  sub_10008E0F8(a1, v6);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v6).n128_u64[0];
  return result;
}

Swift::Int sub_1001B8F74()
{
  uint64_t v0;
  Swift::UInt32 v1;
  int v2;
  uint64_t v3;
  Swift::UInt8 v4;
  Swift::UInt8 v5;
  Swift::UInt8 v6;
  Swift::UInt8 v7;
  _QWORD v9[9];

  v1 = *(_DWORD *)(v0 + 4);
  v2 = *(unsigned __int8 *)(v0 + 8);
  v3 = *(_QWORD *)(v0 + 16);
  v4 = *(_BYTE *)v0;
  v5 = *(_BYTE *)(v0 + 1);
  v6 = *(_BYTE *)(v0 + 2);
  v7 = *(_BYTE *)(v0 + 3);
  Hasher.init(_seed:)(v9);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  if (v2 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1);
  }
  swift_bridgeObjectRetain(v3);
  sub_10008E0F8((uint64_t)v9, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

unint64_t sub_1001B9050@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  unint64_t result;
  char v5;
  uint64_t v6;

  result = sub_1001DBBF8(a1);
  if (!v2)
  {
    *(_QWORD *)a2 = result;
    *(_BYTE *)(a2 + 8) = v5 & 1;
    *(_QWORD *)(a2 + 16) = v6;
  }
  return result;
}

unint64_t NANAttribute.RangingSetup.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  unint64_t result;
  char v3;

  result = sub_1001DBBF8(a1);
  if (v1)
    return v3 & 1;
  return result;
}

uint64_t sub_1001B90D4(_QWORD *a1)
{
  uint64_t v1;

  return NANAttribute.RangingSetup.encode(to:)(a1, *(_QWORD *)v1, *(_BYTE *)(v1 + 8), *(_QWORD *)(v1 + 16));
}

uint64_t NANAttribute.RangingSetup.encode(to:)(_QWORD *a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[3];
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v8 = a1[3];
  v9 = a1[4];
  sub_10003259C(a1, v8);
  dispatch thunk of Encoder.unkeyedContainer()(v31, v8, v9);
  v10 = v32;
  v11 = v33;
  sub_100034C68((uint64_t)v31, v32);
  dispatch thunk of UnkeyedEncodingContainer.encode(_:)(a2, v10, v11);
  if (!v4)
  {
    LOBYTE(v34) = BYTE1(a2);
    v12 = v32;
    v13 = v33;
    sub_100034C68((uint64_t)v31, v32);
    v14 = sub_100012C44(&qword_10040A768);
    v15 = sub_100011770(&qword_10040A770, &qword_10040A768, byte_100349338);
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)(&v34, v14, v15, v12, v13);
    LOBYTE(v34) = BYTE2(a2);
    v16 = v32;
    v17 = v33;
    sub_100034C68((uint64_t)v31, v32);
    v18 = sub_1001DAED8();
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)(&v34, &type metadata for NANReasonCode, v18, v16, v17);
    v19 = BYTE3(a2);
    LOBYTE(v34) = BYTE3(a2);
    v20 = v32;
    v21 = v33;
    sub_100034C68((uint64_t)v31, v32);
    v22 = sub_1001DC4E8();
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)(&v34, &type metadata for NANAttribute.RangingSetup.Control, v22, v20, v21);
    if ((a3 & 1) == 0 && (a2 & 0x2000000) != 0)
    {
      LODWORD(v34) = HIDWORD(a2);
      v24 = v32;
      v25 = v33;
      sub_100034C68((uint64_t)v31, v32);
      v26 = sub_1001DC52C();
      dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)(&v34, &type metadata for NANAttribute.RangingSetup.FineTimingMeasurementParameters, v26, v24, v25);
    }
    if (*(_QWORD *)(a4 + 16) && (v19 & 4) != 0)
    {
      v34 = a4;
      v27 = v32;
      v28 = v33;
      sub_100034C68((uint64_t)v31, v32);
      v29 = sub_100012C44(&qword_10040A710);
      v30 = sub_1000934A0(&qword_10040A718, &qword_10040A710, (uint64_t (*)(void))sub_1001DBBB4, (const char *)&protocol conformance descriptor for <A> [A]);
      dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)(&v34, v29, v30, v27, v28);
    }
  }
  return sub_100014430(v31);
}

uint64_t sub_1001B9370(uint64_t a1, uint64_t a2)
{
  return sub_1001D02C0(*(_QWORD *)a1, *(_BYTE *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)a2, *(_BYTE *)(a2 + 8), *(_QWORD *)(a2 + 16));
}

uint64_t NANAttribute.ElementContainer.hash(into:)(uint64_t a1, __int16 a2, uint64_t a3, unint64_t a4)
{
  Swift::UInt8 v7;
  __n128 v8;

  if ((a2 & 0x100) != 0)
    v7 = 1;
  else
    v7 = 2 * a2;
  Hasher._combine(_:)(v7);
  sub_100031FEC(a3, a4);
  Data.hash(into:)(a1, a3, a4, v8);
  return sub_10000E614(a3, a4);
}

void static NANAttribute.ElementContainer.__derived_struct_equals(_:_:)(unsigned __int16 a1, uint64_t a2, uint64_t a3, unsigned __int16 a4)
{
  if ((a4 & 0x100) == 0)
  {
    if (a1 & 0x100 | (a4 ^ a1) & 0x7F)
      return;
    goto LABEL_3;
  }
  if ((a1 & 0x100) != 0)
LABEL_3:
    _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(a2, a3);
}

uint64_t sub_1001B9434()
{
  _BYTE *v0;

  if (*v0)
    return 1635017060;
  else
    return 0x73444970616DLL;
}

uint64_t sub_1001B9464@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1001EC948(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1001B9488(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001DC570();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001B94B0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001DC570();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NANAttribute.ElementContainer.encode(to:)(_QWORD *a1, __int16 a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[2];
  char v21;

  v19 = a4;
  v8 = sub_100012C44(&qword_10040A788);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin();
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  sub_10003259C(a1, v12);
  v14 = sub_1001DC570();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for NANAttribute.ElementContainer.CodingKeys, &type metadata for NANAttribute.ElementContainer.CodingKeys, v14, v12, v13);
  LOWORD(v20[0]) = a2 & 0x1FF;
  v21 = 0;
  v15 = sub_1001DACE8();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v20, &v21, v8, &type metadata for NANMapIDs, v15);
  if (!v4)
  {
    v20[0] = a3;
    v20[1] = v19;
    v21 = 1;
    v16 = sub_1001DAAC8();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v20, &v21, v8, &type metadata for BinaryDecoder.DataCopy, v16);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

Swift::Int NANAttribute.ElementContainer.hashValue.getter(__int16 a1, uint64_t a2, unint64_t a3)
{
  Swift::UInt8 v6;
  __n128 v7;
  _QWORD v9[9];

  Hasher.init(_seed:)(v9);
  if ((a1 & 0x100) != 0)
    v6 = 1;
  else
    v6 = 2 * a1;
  Hasher._combine(_:)(v6);
  sub_100031FEC(a2, a3);
  Data.hash(into:)(v9, a2, a3, v7);
  sub_10000E614(a2, a3);
  return Hasher._finalize()();
}

uint64_t NANAttribute.ElementContainer.init(from:)(_QWORD *a1)
{
  return sub_1001D5888(a1) & 0x1FF;
}

Swift::Int sub_1001B96E4()
{
  char *v0;
  char v1;
  int v2;
  uint64_t v3;
  unint64_t v4;
  Swift::UInt8 v5;
  __n128 v6;
  _QWORD v8[9];

  v1 = *v0;
  v2 = v0[1];
  v3 = *((_QWORD *)v0 + 1);
  v4 = *((_QWORD *)v0 + 2);
  Hasher.init(_seed:)(v8);
  if (v2)
    v5 = 1;
  else
    v5 = 2 * v1;
  Hasher._combine(_:)(v5);
  sub_100031FEC(v3, v4);
  Data.hash(into:)(v8, v3, v4, v6);
  sub_10000E614(v3, v4);
  return Hasher._finalize()();
}

uint64_t sub_1001B9770(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  Swift::UInt8 v5;
  __n128 v6;

  v3 = *(_QWORD *)(v1 + 8);
  v4 = *(_QWORD *)(v1 + 16);
  if ((*(_BYTE *)(v1 + 1) & 1) != 0)
    v5 = 1;
  else
    v5 = 2 * *(_BYTE *)v1;
  Hasher._combine(_:)(v5);
  sub_100031FEC(v3, v4);
  Data.hash(into:)(a1, v3, v4, v6);
  return sub_10000E614(v3, v4);
}

Swift::Int sub_1001B97DC()
{
  char *v0;
  char v1;
  int v2;
  uint64_t v3;
  unint64_t v4;
  Swift::UInt8 v5;
  __n128 v6;
  _QWORD v8[9];

  v1 = *v0;
  v2 = v0[1];
  v3 = *((_QWORD *)v0 + 1);
  v4 = *((_QWORD *)v0 + 2);
  Hasher.init(_seed:)(v8);
  if (v2)
    v5 = 1;
  else
    v5 = 2 * v1;
  Hasher._combine(_:)(v5);
  sub_100031FEC(v3, v4);
  Data.hash(into:)(v8, v3, v4, v6);
  sub_10000E614(v3, v4);
  return Hasher._finalize()();
}

uint64_t sub_1001B9864@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  result = sub_1001D5888(a1);
  if (!v2)
  {
    *(_BYTE *)a2 = result;
    *(_BYTE *)(a2 + 1) = BYTE1(result) & 1;
    *(_QWORD *)(a2 + 8) = v5;
    *(_QWORD *)(a2 + 16) = v6;
  }
  return result;
}

uint64_t sub_1001B9898(_QWORD *a1)
{
  unsigned __int8 *v1;

  return NANAttribute.ElementContainer.encode(to:)(a1, *v1 | (unsigned __int16)(v1[1] << 8), *((_QWORD *)v1 + 1), *((_QWORD *)v1 + 2));
}

void sub_1001B98C4(uint64_t a1, _BYTE *a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v4 = *(_BYTE *)(a1 + 1);
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  if ((v4 & 1) != 0)
  {
    if (!a2[1])
      return;
LABEL_8:
    _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(v5, v6);
    return;
  }
  if (((*(_BYTE *)a1 ^ *a2) & 0x7F) != 0)
    v7 = 1;
  else
    v7 = a2[1];
  if ((v7 & 1) == 0)
    goto LABEL_8;
}

uint64_t NANAttribute.ExtendedWLANInfrastructure.role.getter(uint64_t a1, unint64_t a2)
{
  return HIDWORD(a2) & 1;
}

uint64_t NANAttribute.ExtendedWLANInfrastructure.role.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 12) = result & 1;
  return result;
}

unint64_t NANAttribute.FineTimingMeasurementRangeReport.Entry.maximumRangeErrorExponent.getter(uint64_t a1, unint64_t a2)
{
  return a2 >> 40;
}

uint64_t NANAttribute.ExtendedWLANInfrastructure.operatingChannelInformation.setter(uint64_t result)
{
  uint64_t v1;

  *(_WORD *)(v1 + 13) = result;
  *(_BYTE *)(v1 + 15) = BYTE2(result);
  return result;
}

void __swiftcall NANAttribute.ExtendedWLANInfrastructure.init(accessPointBSSID:infrastructureMACAddress:role:operatingChannelInformation:beaconInformation:)(CoreP2P::NANAttribute::ExtendedWLANInfrastructure *__return_ptr retstr, CoreP2P::WiFiAddress *accessPointBSSID, CoreP2P::WiFiAddress *infrastructureMACAddress, CoreP2P::NANAttribute::WLANInfrastructure::DeviceRole role, CoreP2P::NonNANOperatingChannelInformation operatingChannelInformation, CoreP2P::NonNANBeaconInformation beaconInformation)
{
  ;
}

uint64_t NANAttribute.ExtendedWLANInfrastructure.init(network:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4;
  uint64_t result;

  v4 = a4;
  Channel.operatingClass.getter(a4 & 0xFFFFFFFFFFFFLL);
  if ((v4 & 0xFFFFFF00) != 0)
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 3455, 0);
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease(a2);
    return 0;
  }
  return result;
}

uint64_t NANAttribute.ExtendedWLANInfrastructure.encode(to:)(_QWORD *a1, unint64_t a2, uint64_t a3, int a4)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v29;
  _QWORD v30[3];
  uint64_t v31;
  uint64_t v32;
  _BYTE v33[6];

  v5 = a2 >> 8;
  v6 = a2 >> 16;
  v7 = a2 >> 24;
  v8 = a1[3];
  v9 = a1[4];
  v10 = HIDWORD(a2);
  v11 = a2 >> 40;
  sub_10003259C(a1, v8);
  dispatch thunk of Encoder.unkeyedContainer()(v30, v8, v9);
  v33[0] = a2;
  v33[1] = v5;
  v33[2] = v6;
  v33[3] = v7;
  v33[4] = v10;
  v33[5] = v11;
  v12 = v31;
  v13 = v32;
  sub_100034C68((uint64_t)v30, v31);
  v14 = sub_100039C34();
  dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)(v33, &type metadata for WiFiAddress, v14, v12, v13);
  if (!v29)
  {
    v33[0] = BYTE6(a2);
    v33[1] = HIBYTE(a2);
    *(_DWORD *)&v33[2] = a3;
    v15 = v31;
    v16 = v32;
    sub_100034C68((uint64_t)v30, v31);
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)(v33, &type metadata for WiFiAddress, v14, v15, v16);
    v33[0] = BYTE4(a3) & 1;
    v17 = v31;
    v18 = v32;
    sub_100034C68((uint64_t)v30, v31);
    v19 = sub_1001DA974();
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)(v33, &type metadata for NANAttribute.WLANInfrastructure.DeviceRole, v19, v17, v18);
    *(_WORD *)v33 = *(_WORD *)((char *)&a3 + 5);
    v33[2] = HIBYTE(a3);
    v20 = v31;
    v21 = v32;
    sub_100034C68((uint64_t)v30, v31);
    v22 = sub_1001DC5B4();
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)(v33, &type metadata for NonNANOperatingChannelInformation, v22, v20, v21);
    *(_DWORD *)v33 = a4;
    v23 = v31;
    v24 = v32;
    sub_100034C68((uint64_t)v30, v31);
    v25 = sub_1001DC5F8();
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)(v33, &type metadata for NonNANBeaconInformation, v25, v23, v24);
  }
  return sub_100014430(v30);
}

void NANAttribute.ExtendedWLANInfrastructure.hash(into:)(int a1, unint64_t a2, unint64_t a3, unsigned int a4)
{
  Swift::UInt16 v4;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  Swift::UInt8 v13[8];
  Swift::UInt8 v14[8];
  Swift::UInt8 v15[8];
  Swift::UInt8 v16[8];
  Swift::UInt8 v17[8];
  Swift::UInt8 v18[8];
  Swift::UInt16 v19[2];

  v4 = a4;
  *(_QWORD *)v13 = a3 >> 8;
  *(_QWORD *)v14 = a3 >> 16;
  *(_QWORD *)v15 = a3 >> 24;
  *(_QWORD *)v16 = a3 >> 40;
  *(_QWORD *)v17 = HIWORD(a3);
  *(_QWORD *)v18 = HIBYTE(a3);
  v6 = a2 >> 8;
  v7 = a2 >> 16;
  v8 = a2 >> 24;
  v9 = HIDWORD(a2);
  v10 = a2 >> 40;
  v11 = HIWORD(a2);
  v12 = HIBYTE(a2);
  *(_DWORD *)v19 = HIWORD(a4);
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(v11);
  Hasher._combine(_:)(v12);
  Hasher._combine(_:)(a3);
  Hasher._combine(_:)(v13[0]);
  Hasher._combine(_:)(v14[0]);
  Hasher._combine(_:)(v15[0]);
  Hasher._combine(_:)(BYTE4(a3) & 1);
  Hasher._combine(_:)(v16[0]);
  Hasher._combine(_:)(v17[0]);
  Hasher._combine(_:)(v18[0]);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v19[0]);
}

uint64_t static NANAttribute.ExtendedWLANInfrastructure.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, int a6)
{
  return sub_1001D02F8(a1, a2 & 0xFFFFFF01FFFFFFFFLL, a3, a4, a5 & 0xFFFFFF01FFFFFFFFLL, a6);
}

uint64_t sub_1001B9D88(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1001B9DC0 + 4 * byte_100352277[a1]))(0xD000000000000010, 0x8000000100367910);
}

uint64_t sub_1001B9DC0(uint64_t a1)
{
  return a1 + 8;
}

uint64_t sub_1001B9E08()
{
  unsigned __int8 *v0;

  return sub_1001B9D88(*v0);
}

uint64_t sub_1001B9E10@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1001ECA20(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1001B9E34(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001EE558();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001B9E5C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001EE558();
  return CodingKey.debugDescription.getter(a1, v2);
}

Swift::Int NANAttribute.ExtendedWLANInfrastructure.hashValue.getter(unint64_t a1, unint64_t a2, unsigned int a3)
{
  Swift::UInt8 v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  Swift::UInt8 v13[8];
  Swift::UInt8 v14[8];
  Swift::UInt8 v15[8];
  Swift::UInt8 v16[8];
  Swift::UInt8 v17[8];
  Swift::UInt16 v18;
  Swift::UInt8 v19[8];
  Swift::UInt16 v20[2];
  _QWORD v21[9];

  v18 = a3;
  v4 = a1;
  *(_QWORD *)v13 = a2 >> 8;
  *(_QWORD *)v14 = a2 >> 16;
  *(_QWORD *)v15 = a2 >> 24;
  *(_QWORD *)v16 = a2 >> 40;
  *(_QWORD *)v17 = HIWORD(a2);
  *(_QWORD *)v19 = HIBYTE(a2);
  v5 = a1 >> 8;
  v6 = a1 >> 16;
  v7 = a1 >> 24;
  v8 = HIDWORD(a1);
  v9 = a1 >> 40;
  v10 = HIWORD(a1);
  v11 = HIBYTE(a1);
  *(_DWORD *)v20 = HIWORD(a3);
  Hasher.init(_seed:)(v21);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(v11);
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(v13[0]);
  Hasher._combine(_:)(v14[0]);
  Hasher._combine(_:)(v15[0]);
  Hasher._combine(_:)(BYTE4(a2) & 1);
  Hasher._combine(_:)(v16[0]);
  Hasher._combine(_:)(v17[0]);
  Hasher._combine(_:)(v19[0]);
  Hasher._combine(_:)(v18);
  Hasher._combine(_:)(v20[0]);
  return Hasher._finalize()();
}

unint64_t NANAttribute.ExtendedWLANInfrastructure.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  unint64_t result;
  uint64_t v3;

  result = sub_1001D6DA0(a1);
  if (v1)
    return v3 & 0xFFFFFF01FFFFFFFFLL;
  return result;
}

Swift::Int sub_1001BA030()
{
  uint64_t v0;
  const mach_header_64 *v1;

  v1 = &_mh_execute_header;
  if (!*(_BYTE *)(v0 + 12))
    v1 = 0;
  return NANAttribute.ExtendedWLANInfrastructure.hashValue.getter(*(_QWORD *)v0, (unint64_t)v1 | *(unsigned int *)(v0 + 8) | ((unint64_t)*(unsigned __int8 *)(v0 + 13) << 40) | ((unint64_t)*(unsigned __int8 *)(v0 + 14) << 48) | ((unint64_t)*(unsigned __int8 *)(v0 + 15) << 56), *(_DWORD *)(v0 + 16));
}

void sub_1001BA06C(int a1)
{
  uint64_t v1;
  const mach_header_64 *v2;

  v2 = &_mh_execute_header;
  if (!*(_BYTE *)(v1 + 12))
    v2 = 0;
  NANAttribute.ExtendedWLANInfrastructure.hash(into:)(a1, *(_QWORD *)v1, (unint64_t)v2 | *(unsigned int *)(v1 + 8) | ((unint64_t)*(unsigned __int8 *)(v1 + 13) << 40) | ((unint64_t)*(unsigned __int8 *)(v1 + 14) << 48) | ((unint64_t)*(unsigned __int8 *)(v1 + 15) << 56), *(_DWORD *)(v1 + 16));
}

Swift::Int sub_1001BA0A8()
{
  uint64_t v0;
  Swift::UInt8 v1;
  Swift::UInt8 v2;
  Swift::UInt8 v3;
  Swift::UInt8 v4;
  Swift::UInt8 v5;
  Swift::UInt8 v6;
  Swift::UInt8 v7;
  Swift::UInt8 v8;
  Swift::UInt8 v9;
  Swift::UInt8 v11;
  Swift::UInt8 v12;
  Swift::UInt8 v13;
  Swift::UInt8 v14;
  Swift::UInt8 v15;
  Swift::UInt8 v16;
  Swift::UInt8 v17;
  Swift::UInt16 v18;
  Swift::UInt16 v19;
  _QWORD v20[9];

  v17 = *(_BYTE *)(v0 + 12);
  v1 = *(_BYTE *)v0;
  v2 = *(_BYTE *)(v0 + 1);
  v3 = *(_BYTE *)(v0 + 2);
  v4 = *(_BYTE *)(v0 + 3);
  v5 = *(_BYTE *)(v0 + 4);
  v6 = *(_BYTE *)(v0 + 5);
  v7 = *(_BYTE *)(v0 + 6);
  v8 = *(_BYTE *)(v0 + 7);
  v9 = *(_BYTE *)(v0 + 8);
  v11 = *(_BYTE *)(v0 + 9);
  v12 = *(_BYTE *)(v0 + 10);
  v13 = *(_BYTE *)(v0 + 11);
  v14 = *(_BYTE *)(v0 + 13);
  v15 = *(_BYTE *)(v0 + 14);
  v16 = *(_BYTE *)(v0 + 15);
  v18 = *(_WORD *)(v0 + 16);
  v19 = *(_WORD *)(v0 + 18);
  Hasher.init(_seed:)(v20);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v11);
  Hasher._combine(_:)(v12);
  Hasher._combine(_:)(v13);
  Hasher._combine(_:)(v17);
  Hasher._combine(_:)(v14);
  Hasher._combine(_:)(v15);
  Hasher._combine(_:)(v16);
  Hasher._combine(_:)(v18);
  Hasher._combine(_:)(v19);
  return Hasher._finalize()();
}

uint64_t sub_1001BA22C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  int v6;

  result = sub_1001D6DA0(a1);
  if (!v2)
  {
    *(_QWORD *)a2 = result;
    *(_WORD *)(a2 + 8) = v5;
    *(_BYTE *)(a2 + 10) = BYTE2(v5);
    *(_BYTE *)(a2 + 11) = BYTE3(v5);
    *(_BYTE *)(a2 + 12) = BYTE4(v5) & 1;
    *(_BYTE *)(a2 + 13) = BYTE5(v5);
    *(_BYTE *)(a2 + 14) = BYTE6(v5);
    *(_BYTE *)(a2 + 15) = HIBYTE(v5);
    *(_DWORD *)(a2 + 16) = v6;
  }
  return result;
}

uint64_t sub_1001BA2D4(_QWORD *a1)
{
  uint64_t v1;
  const mach_header_64 *v2;

  v2 = &_mh_execute_header;
  if (!*(_BYTE *)(v1 + 12))
    v2 = 0;
  return NANAttribute.ExtendedWLANInfrastructure.encode(to:)(a1, *(_QWORD *)v1, (unint64_t)v2 | *(unsigned int *)(v1 + 8) | ((unint64_t)*(unsigned __int8 *)(v1 + 13) << 40) | ((unint64_t)*(unsigned __int8 *)(v1 + 14) << 48) | ((unint64_t)*(unsigned __int8 *)(v1 + 15) << 56), *(_DWORD *)(v1 + 16));
}

uint64_t sub_1001BA320(uint64_t a1, uint64_t a2)
{
  const mach_header_64 *v2;
  const mach_header_64 *v3;

  v2 = &_mh_execute_header;
  if (*(_BYTE *)(a1 + 12))
    v3 = &_mh_execute_header;
  else
    v3 = 0;
  if (!*(_BYTE *)(a2 + 12))
    v2 = 0;
  return sub_1001D02F8(*(_QWORD *)a1, (unint64_t)v3 | *(unsigned int *)(a1 + 8) | ((unint64_t)*(unsigned __int8 *)(a1 + 13) << 40) | ((unint64_t)*(unsigned __int8 *)(a1 + 14) << 48) | ((unint64_t)*(unsigned __int8 *)(a1 + 15) << 56), *(_DWORD *)(a1 + 16), *(_QWORD *)a2, (unint64_t)v2 | *(unsigned int *)(a2 + 8) | ((unint64_t)*(unsigned __int8 *)(a2 + 13) << 40) | ((unint64_t)*(unsigned __int8 *)(a2 + 14) << 48) | ((unint64_t)*(unsigned __int8 *)(a2 + 15) << 56), *(_DWORD *)(a2 + 16));
}

uint64_t NANAttribute.ExtendedP2POperation.operatingChannelInformation.getter(uint64_t a1, unsigned __int16 a2)
{
  return HIBYTE(a1) | (a2 << 8);
}

uint64_t NANAttribute.ExtendedP2POperation.operatingChannelInformation.setter(uint64_t result)
{
  uint64_t v1;

  *(_WORD *)(v1 + 7) = result;
  *(_BYTE *)(v1 + 9) = BYTE2(result);
  return result;
}

uint64_t NANAttribute.ExtendedMesh.beaconInformation.getter(uint64_t a1, unsigned int a2)
{
  return HIWORD(a2);
}

uint64_t NANAttribute.ExtendedMesh.beaconInformation.setter(uint64_t result)
{
  uint64_t v1;

  *(_DWORD *)(v1 + 10) = result;
  return result;
}

void NANAttribute.ExtendedP2POperation.hash(into:)(int a1, unint64_t a2, unint64_t a3)
{
  Swift::UInt8 v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  Swift::UInt16 v12[4];
  Swift::UInt16 v13[4];

  v3 = a3;
  v4 = a2 >> 8;
  v5 = a2 >> 16;
  v6 = a2 >> 24;
  v7 = HIDWORD(a2);
  v8 = a2 >> 40;
  v9 = HIWORD(a2);
  v10 = HIBYTE(a2);
  v11 = a3 >> 8;
  *(_QWORD *)v12 = a3 >> 16;
  *(_QWORD *)v13 = HIDWORD(a3);
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v11);
  Hasher._combine(_:)(v12[0]);
  Hasher._combine(_:)(v13[0]);
}

BOOL static NANAttribute.ExtendedP2POperation.__derived_struct_equals(_:_:)(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  return sub_1001D0B80(a1, a2 & 0xFFFFFFFFFFFFLL, a3, a4 & 0xFFFFFFFFFFFFLL);
}

uint64_t sub_1001BA4B4()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1001BA4DC + 4 * byte_10035227C[*v0]))(1701605234, 0xE400000000000000);
}

uint64_t sub_1001BA4DC()
{
  return 0x657264644163616DLL;
}

unint64_t sub_1001BA4F8()
{
  return 0xD00000000000001BLL;
}

unint64_t sub_1001BA51C()
{
  return 0xD000000000000011;
}

uint64_t sub_1001BA538@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1001ECC0C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1001BA55C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001DC63C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001BA584(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001DC63C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NANAttribute.ExtendedP2POperation.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v19;
  int v20;
  char v21;
  char v22;
  char v23;

  v7 = sub_100012C44(&qword_10040A7A8);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin();
  v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a1[3];
  v12 = a1[4];
  sub_10003259C(a1, v11);
  v13 = sub_1001DC63C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for NANAttribute.ExtendedP2POperation.CodingKeys, &type metadata for NANAttribute.ExtendedP2POperation.CodingKeys, v13, v11, v12);
  LOBYTE(v20) = a2;
  v23 = 0;
  v14 = sub_1001DA9FC();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v20, &v23, v7, &type metadata for NANAttribute.P2POperation.DeviceRole, v14);
  if (!v3)
  {
    LOBYTE(v20) = BYTE1(a2);
    BYTE1(v20) = BYTE2(a2);
    BYTE2(v20) = BYTE3(a2);
    HIBYTE(v20) = BYTE4(a2);
    v21 = BYTE5(a2);
    v22 = BYTE6(a2);
    v23 = 1;
    v15 = sub_100039C34();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v20, &v23, v7, &type metadata for WiFiAddress, v15);
    LOBYTE(v20) = HIBYTE(a2);
    *(_WORD *)((char *)&v20 + 1) = a3;
    v23 = 2;
    v16 = sub_1001DC5B4();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v20, &v23, v7, &type metadata for NonNANOperatingChannelInformation, v16);
    LOWORD(v20) = WORD1(a3);
    HIWORD(v20) = WORD2(a3);
    v23 = 3;
    v17 = sub_1001DC5F8();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v20, &v23, v7, &type metadata for NonNANBeaconInformation, v17);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

Swift::Int NANAttribute.ExtendedP2POperation.hashValue.getter(unint64_t a1, unint64_t a2)
{
  Swift::UInt8 v2;
  Swift::UInt8 v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  Swift::UInt8 v12[8];
  Swift::UInt16 v13[4];
  Swift::UInt16 v14[4];
  _QWORD v15[9];

  v2 = a2;
  v3 = a1;
  v4 = a1 >> 8;
  v5 = a1 >> 16;
  v6 = a1 >> 24;
  v7 = HIDWORD(a1);
  v8 = a1 >> 40;
  v9 = HIWORD(a1);
  v10 = HIBYTE(a1);
  *(_QWORD *)v12 = a2 >> 8;
  *(_QWORD *)v13 = a2 >> 16;
  *(_QWORD *)v14 = HIDWORD(a2);
  Hasher.init(_seed:)(v15);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v12[0]);
  Hasher._combine(_:)(v13[0]);
  Hasher._combine(_:)(v14[0]);
  return Hasher._finalize()();
}

uint64_t NANAttribute.ExtendedP2POperation.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  result = sub_1001D4268(a1);
  if (v1)
    return v3 & 0xFFFFFFFFFFFFLL;
  return result;
}

Swift::Int sub_1001BA8F0()
{
  uint64_t v0;
  Swift::UInt8 v1;
  Swift::UInt8 v2;
  Swift::UInt8 v3;
  Swift::UInt8 v4;
  Swift::UInt8 v5;
  Swift::UInt8 v6;
  Swift::UInt8 v7;
  Swift::UInt8 v8;
  Swift::UInt8 v9;
  Swift::UInt8 v11;
  Swift::UInt16 v12;
  Swift::UInt16 v13;
  _QWORD v14[9];

  v1 = *(_BYTE *)v0;
  v2 = *(_BYTE *)(v0 + 1);
  v3 = *(_BYTE *)(v0 + 2);
  v4 = *(_BYTE *)(v0 + 3);
  v5 = *(_BYTE *)(v0 + 4);
  v6 = *(_BYTE *)(v0 + 5);
  v7 = *(_BYTE *)(v0 + 6);
  v8 = *(_BYTE *)(v0 + 7);
  v9 = *(_BYTE *)(v0 + 8);
  v11 = *(_BYTE *)(v0 + 9);
  v12 = *(_WORD *)(v0 + 10);
  v13 = *(_WORD *)(v0 + 12);
  Hasher.init(_seed:)(v14);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v11);
  Hasher._combine(_:)(v12);
  Hasher._combine(_:)(v13);
  return Hasher._finalize()();
}

void sub_1001BAA0C()
{
  uint64_t v0;
  Swift::UInt8 v1;
  Swift::UInt8 v2;
  Swift::UInt8 v3;
  Swift::UInt8 v4;
  Swift::UInt8 v5;
  Swift::UInt8 v6;
  Swift::UInt8 v7;
  Swift::UInt8 v8;
  Swift::UInt8 v9;
  Swift::UInt16 v10;
  Swift::UInt16 v11;

  v1 = *(_BYTE *)(v0 + 1);
  v2 = *(_BYTE *)(v0 + 2);
  v3 = *(_BYTE *)(v0 + 3);
  v4 = *(_BYTE *)(v0 + 4);
  v5 = *(_BYTE *)(v0 + 5);
  v6 = *(_BYTE *)(v0 + 6);
  v7 = *(_BYTE *)(v0 + 7);
  v8 = *(_BYTE *)(v0 + 8);
  v9 = *(_BYTE *)(v0 + 9);
  v10 = *(_WORD *)(v0 + 10);
  v11 = *(_WORD *)(v0 + 12);
  Hasher._combine(_:)(*(_BYTE *)v0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(v11);
}

Swift::Int sub_1001BAAE4()
{
  uint64_t v0;
  Swift::UInt8 v1;
  Swift::UInt8 v2;
  Swift::UInt8 v3;
  Swift::UInt8 v4;
  Swift::UInt8 v5;
  Swift::UInt8 v6;
  Swift::UInt8 v7;
  Swift::UInt8 v8;
  Swift::UInt8 v9;
  Swift::UInt8 v11;
  Swift::UInt16 v12;
  Swift::UInt16 v13;
  _QWORD v14[9];

  v1 = *(_BYTE *)v0;
  v2 = *(_BYTE *)(v0 + 1);
  v3 = *(_BYTE *)(v0 + 2);
  v4 = *(_BYTE *)(v0 + 3);
  v5 = *(_BYTE *)(v0 + 4);
  v6 = *(_BYTE *)(v0 + 5);
  v7 = *(_BYTE *)(v0 + 6);
  v8 = *(_BYTE *)(v0 + 7);
  v9 = *(_BYTE *)(v0 + 8);
  v11 = *(_BYTE *)(v0 + 9);
  v12 = *(_WORD *)(v0 + 10);
  v13 = *(_WORD *)(v0 + 12);
  Hasher.init(_seed:)(v14);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v11);
  Hasher._combine(_:)(v12);
  Hasher._combine(_:)(v13);
  return Hasher._finalize()();
}

uint64_t sub_1001BABFC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = sub_1001D4268(a1);
  if (!v2)
  {
    *(_QWORD *)a2 = result;
    *(_DWORD *)(a2 + 8) = v5;
    *(_WORD *)(a2 + 12) = WORD2(v5);
  }
  return result;
}

uint64_t sub_1001BAC78(_QWORD *a1)
{
  uint64_t v1;

  return NANAttribute.ExtendedP2POperation.encode(to:)(a1, *(_QWORD *)v1, *(unsigned int *)(v1 + 8) | ((unint64_t)*(unsigned __int16 *)(v1 + 12) << 32));
}

BOOL sub_1001BAC9C(uint64_t a1, uint64_t a2)
{
  return sub_1001D0B80(*(_QWORD *)a1, *(unsigned int *)(a1 + 8) | ((unint64_t)*(unsigned __int16 *)(a1 + 12) << 32), *(_QWORD *)a2, *(unsigned int *)(a2 + 8) | ((unint64_t)*(unsigned __int16 *)(a2 + 12) << 32));
}

uint64_t NANAttribute.ExtendedIBSS.operatingChannelInformation.getter(uint64_t a1, unint64_t a2)
{
  return HIDWORD(a2) & 0xFFFFFF;
}

uint64_t NANAttribute.ExtendedIBSS.operatingChannelInformation.setter(uint64_t result)
{
  uint64_t v1;

  *(_WORD *)(v1 + 12) = result;
  *(_BYTE *)(v1 + 14) = BYTE2(result);
  return result;
}

void NANAttribute.ExtendedIBSS.hash(into:)(int a1, unint64_t a2, unint64_t a3, unsigned int a4)
{
  Swift::UInt8 v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  Swift::UInt8 v13[8];
  Swift::UInt8 v14[8];
  Swift::UInt8 v15[8];
  Swift::UInt8 v16[8];
  Swift::UInt8 v17[8];
  Swift::UInt16 v18;
  Swift::UInt16 v19[2];

  v18 = a4;
  v4 = a3;
  v5 = a2 >> 8;
  v6 = a2 >> 16;
  v7 = a2 >> 24;
  v8 = HIDWORD(a2);
  v9 = a2 >> 40;
  v10 = HIWORD(a2);
  v11 = HIBYTE(a2);
  v12 = a3 >> 8;
  *(_QWORD *)v13 = a3 >> 16;
  *(_QWORD *)v14 = a3 >> 24;
  *(_QWORD *)v15 = HIDWORD(a3);
  *(_QWORD *)v16 = a3 >> 40;
  *(_QWORD *)v17 = HIWORD(a3);
  *(_DWORD *)v19 = HIWORD(a4);
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(v11);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v12);
  Hasher._combine(_:)(v13[0]);
  Hasher._combine(_:)(v14[0]);
  Hasher._combine(_:)(v15[0]);
  Hasher._combine(_:)(v16[0]);
  Hasher._combine(_:)(v17[0]);
  Hasher._combine(_:)(v18);
  Hasher._combine(_:)(v19[0]);
}

BOOL static NANAttribute.ExtendedIBSS.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, int a6)
{
  return sub_1001D0458(a1, a2 & 0xFFFFFFFFFFFFFFLL, a3, a4, a5 & 0xFFFFFFFFFFFFFFLL, a6);
}

uint64_t sub_1001BAE10()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1001BAE44 + 4 * byte_100352280[*v0]))(0x4953534273736269, 0xE900000000000044);
}

uint64_t sub_1001BAE44()
{
  return 0x657264644163616DLL;
}

unint64_t sub_1001BAE60()
{
  return 0xD00000000000001BLL;
}

unint64_t sub_1001BAE84()
{
  return 0xD000000000000011;
}

uint64_t sub_1001BAEA0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1001ECDB8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1001BAEC4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001DC680();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001BAEEC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001DC680();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NANAttribute.ExtendedIBSS.encode(to:)(_QWORD *a1, unint64_t a2, uint64_t a3, int a4)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  _BYTE v29[6];

  HIDWORD(v22) = a4;
  v6 = a2 >> 8;
  v7 = a2 >> 16;
  v23 = a3;
  v24 = a2 >> 24;
  v25 = HIDWORD(a2);
  v26 = a2 >> 40;
  v8 = sub_100012C44(&qword_10040A7B8);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin();
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  sub_10003259C(a1, v12);
  v14 = sub_1001DC680();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for NANAttribute.ExtendedIBSS.CodingKeys, &type metadata for NANAttribute.ExtendedIBSS.CodingKeys, v14, v12, v13);
  v29[0] = a2;
  v29[1] = v6;
  v29[2] = v7;
  v29[3] = v24;
  v29[4] = v25;
  v29[5] = v26;
  v28 = 0;
  v15 = sub_100039C34();
  v16 = v27;
  KeyedEncodingContainer.encode<A>(_:forKey:)(v29, &v28, v8, &type metadata for WiFiAddress, v15);
  if (!v16)
  {
    v17 = HIDWORD(v22);
    v29[0] = BYTE6(a2);
    v29[1] = HIBYTE(a2);
    v18 = HIDWORD(v23);
    *(_DWORD *)&v29[2] = v23;
    v28 = 1;
    KeyedEncodingContainer.encode<A>(_:forKey:)(v29, &v28, v8, &type metadata for WiFiAddress, v15);
    v29[0] = v18;
    v29[1] = BYTE1(v18);
    v29[2] = BYTE2(v18);
    v28 = 2;
    v19 = sub_1001DC5B4();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v29, &v28, v8, &type metadata for NonNANOperatingChannelInformation, v19);
    *(_DWORD *)v29 = v17;
    v28 = 3;
    v20 = sub_1001DC5F8();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v29, &v28, v8, &type metadata for NonNANBeaconInformation, v20);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

Swift::Int NANAttribute.ExtendedIBSS.hashValue.getter(unint64_t a1, unint64_t a2, unsigned int a3)
{
  Swift::UInt8 v3;
  Swift::UInt8 v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  Swift::UInt8 v13[8];
  Swift::UInt8 v14[8];
  Swift::UInt8 v15[8];
  Swift::UInt8 v16[8];
  Swift::UInt8 v17[8];
  Swift::UInt8 v18[8];
  Swift::UInt16 v19;
  Swift::UInt16 v20[2];
  _QWORD v21[9];

  v19 = a3;
  v3 = a2;
  v4 = a1;
  v5 = a1 >> 8;
  v6 = a1 >> 16;
  v7 = a1 >> 24;
  v8 = HIDWORD(a1);
  v9 = a1 >> 40;
  v10 = HIWORD(a1);
  v11 = HIBYTE(a1);
  *(_QWORD *)v13 = a2 >> 8;
  *(_QWORD *)v14 = a2 >> 16;
  *(_QWORD *)v15 = a2 >> 24;
  *(_QWORD *)v16 = HIDWORD(a2);
  *(_QWORD *)v17 = a2 >> 40;
  *(_QWORD *)v18 = HIWORD(a2);
  *(_DWORD *)v20 = HIWORD(a3);
  Hasher.init(_seed:)(v21);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(v11);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v13[0]);
  Hasher._combine(_:)(v14[0]);
  Hasher._combine(_:)(v15[0]);
  Hasher._combine(_:)(v16[0]);
  Hasher._combine(_:)(v17[0]);
  Hasher._combine(_:)(v18[0]);
  Hasher._combine(_:)(v19);
  Hasher._combine(_:)(v20[0]);
  return Hasher._finalize()();
}

uint64_t NANAttribute.ExtendedIBSS.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  result = sub_1001D4AE8(a1);
  if (v1)
    return v3 & 0xFFFFFFFFFFFFFFLL;
  return result;
}

Swift::Int sub_1001BB2F0()
{
  uint64_t v0;

  return NANAttribute.ExtendedIBSS.hashValue.getter(*(_QWORD *)v0, *(unsigned int *)(v0 + 8) | ((unint64_t)*(unsigned __int8 *)(v0 + 12) << 32) | ((unint64_t)*(unsigned __int8 *)(v0 + 13) << 40) | ((unint64_t)*(unsigned __int8 *)(v0 + 14) << 48), *(_DWORD *)(v0 + 16));
}

void sub_1001BB318()
{
  uint64_t v0;
  Swift::UInt8 v1;
  Swift::UInt8 v2;
  Swift::UInt8 v3;
  Swift::UInt8 v4;
  Swift::UInt8 v5;
  Swift::UInt8 v6;
  Swift::UInt8 v7;
  Swift::UInt8 v8;
  Swift::UInt8 v9;
  Swift::UInt8 v10;
  Swift::UInt8 v11;
  Swift::UInt8 v12;
  Swift::UInt8 v13;
  Swift::UInt8 v14;
  Swift::UInt16 v15;
  Swift::UInt16 v16;

  v1 = *(_BYTE *)(v0 + 1);
  v2 = *(_BYTE *)(v0 + 2);
  v3 = *(_BYTE *)(v0 + 3);
  v4 = *(_BYTE *)(v0 + 4);
  v5 = *(_BYTE *)(v0 + 5);
  v6 = *(_BYTE *)(v0 + 6);
  v7 = *(_BYTE *)(v0 + 7);
  v8 = *(_BYTE *)(v0 + 8);
  v9 = *(_BYTE *)(v0 + 9);
  v10 = *(_BYTE *)(v0 + 10);
  v11 = *(_BYTE *)(v0 + 11);
  v12 = *(_BYTE *)(v0 + 12);
  v13 = *(_BYTE *)(v0 + 13);
  v14 = *(_BYTE *)(v0 + 14);
  v15 = *(_WORD *)(v0 + 16);
  v16 = *(_WORD *)(v0 + 18);
  Hasher._combine(_:)(*(_BYTE *)v0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(v11);
  Hasher._combine(_:)(v12);
  Hasher._combine(_:)(v13);
  Hasher._combine(_:)(v14);
  Hasher._combine(_:)(v15);
  Hasher._combine(_:)(v16);
}

Swift::Int sub_1001BB438()
{
  uint64_t v0;
  Swift::UInt8 v1;
  Swift::UInt8 v2;
  Swift::UInt8 v3;
  Swift::UInt8 v4;
  Swift::UInt8 v5;
  Swift::UInt8 v6;
  Swift::UInt8 v7;
  Swift::UInt8 v8;
  Swift::UInt8 v9;
  Swift::UInt8 v11;
  Swift::UInt8 v12;
  Swift::UInt8 v13;
  Swift::UInt8 v14;
  Swift::UInt8 v15;
  Swift::UInt8 v16;
  Swift::UInt16 v17;
  Swift::UInt16 v18;
  _QWORD v19[9];

  v1 = *(_BYTE *)v0;
  v2 = *(_BYTE *)(v0 + 1);
  v3 = *(_BYTE *)(v0 + 2);
  v4 = *(_BYTE *)(v0 + 3);
  v5 = *(_BYTE *)(v0 + 4);
  v6 = *(_BYTE *)(v0 + 5);
  v7 = *(_BYTE *)(v0 + 6);
  v8 = *(_BYTE *)(v0 + 7);
  v9 = *(_BYTE *)(v0 + 8);
  v11 = *(_BYTE *)(v0 + 9);
  v12 = *(_BYTE *)(v0 + 10);
  v13 = *(_BYTE *)(v0 + 11);
  v14 = *(_BYTE *)(v0 + 12);
  v15 = *(_BYTE *)(v0 + 13);
  v16 = *(_BYTE *)(v0 + 14);
  v17 = *(_WORD *)(v0 + 16);
  v18 = *(_WORD *)(v0 + 18);
  Hasher.init(_seed:)(v19);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v11);
  Hasher._combine(_:)(v12);
  Hasher._combine(_:)(v13);
  Hasher._combine(_:)(v14);
  Hasher._combine(_:)(v15);
  Hasher._combine(_:)(v16);
  Hasher._combine(_:)(v17);
  Hasher._combine(_:)(v18);
  return Hasher._finalize()();
}

uint64_t sub_1001BB5A8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  int v6;

  result = sub_1001D4AE8(a1);
  if (!v2)
  {
    *(_QWORD *)a2 = result;
    *(_WORD *)(a2 + 8) = v5;
    *(_BYTE *)(a2 + 10) = BYTE2(v5);
    *(_BYTE *)(a2 + 11) = BYTE3(v5);
    *(_BYTE *)(a2 + 12) = BYTE4(v5);
    *(_BYTE *)(a2 + 13) = BYTE5(v5);
    *(_BYTE *)(a2 + 14) = BYTE6(v5);
    *(_DWORD *)(a2 + 16) = v6;
  }
  return result;
}

uint64_t sub_1001BB648(_QWORD *a1)
{
  uint64_t v1;

  return NANAttribute.ExtendedIBSS.encode(to:)(a1, *(_QWORD *)v1, *(unsigned int *)(v1 + 8) | ((unint64_t)*(unsigned __int8 *)(v1 + 12) << 32) | ((unint64_t)*(unsigned __int8 *)(v1 + 13) << 40) | ((unint64_t)*(unsigned __int8 *)(v1 + 14) << 48), *(_DWORD *)(v1 + 16));
}

BOOL sub_1001BB680(uint64_t a1, uint64_t a2)
{
  return sub_1001D0458(*(_QWORD *)a1, *(unsigned int *)(a1 + 8) | ((unint64_t)*(unsigned __int8 *)(a1 + 12) << 32) | ((unint64_t)*(unsigned __int8 *)(a1 + 13) << 40) | ((unint64_t)*(unsigned __int8 *)(a1 + 14) << 48), *(_DWORD *)(a1 + 16), *(_QWORD *)a2, *(unsigned int *)(a2 + 8) | ((unint64_t)*(unsigned __int8 *)(a2 + 12) << 32) | ((unint64_t)*(unsigned __int8 *)(a2 + 13) << 40) | ((unint64_t)*(unsigned __int8 *)(a2 + 14) << 48), *(_DWORD *)(a2 + 16));
}

uint64_t NANAttribute.ExtendedMesh.operatingChannelInformation.getter(uint64_t a1, unsigned __int8 a2)
{
  return HIWORD(a1) | (a2 << 16);
}

uint64_t NANAttribute.ExtendedMesh.operatingChannelInformation.setter(uint64_t result)
{
  uint64_t v1;

  *(_WORD *)(v1 + 6) = result;
  *(_BYTE *)(v1 + 8) = BYTE2(result);
  return result;
}

uint64_t NANAttribute.ExtendedMesh.hash(into:)(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  Swift::UInt8 v7;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  __n128 v15;
  Swift::UInt8 v17[8];
  Swift::UInt16 v18[4];
  Swift::UInt16 v19[4];

  v7 = a3;
  v9 = a2 >> 8;
  v10 = a2 >> 16;
  v11 = a2 >> 24;
  v12 = HIDWORD(a2);
  v13 = a2 >> 40;
  v14 = HIWORD(a2);
  *(_QWORD *)v17 = HIBYTE(a2);
  *(_QWORD *)v18 = a3 >> 16;
  *(_QWORD *)v19 = HIDWORD(a3);
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(v11);
  Hasher._combine(_:)(v12);
  Hasher._combine(_:)(v13);
  Hasher._combine(_:)(v14);
  Hasher._combine(_:)(v17[0]);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v18[0]);
  Hasher._combine(_:)(v19[0]);
  sub_100031FEC(a4, a5);
  Data.hash(into:)(a1, a4, a5, v15);
  return sub_10000E614(a4, a5);
}

void static NANAttribute.ExtendedMesh.__derived_struct_equals(_:_:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  sub_1001D058C(a1, a2 & 0xFFFFFFFF00FFLL, a3, a4, a5, a6 & 0xFFFFFFFF00FFLL);
}

uint64_t sub_1001BB800()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1001BB834 + 4 * byte_100352284[*v0]))(0x657264644163616DLL, 0xEA00000000007373);
}

unint64_t sub_1001BB834()
{
  return 0xD00000000000001BLL;
}

unint64_t sub_1001BB858()
{
  return 0xD000000000000011;
}

uint64_t sub_1001BB874()
{
  return 0x44496873656DLL;
}

uint64_t sub_1001BB888@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1001ECF80(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1001BB8AC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001DC6C4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001BB8D4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001DC6C4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NANAttribute.ExtendedMesh.encode(to:)(_QWORD *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  _QWORD v33[2];
  char v34;

  v26 = a4;
  v27 = a5;
  v7 = a2 >> 8;
  v8 = a2 >> 16;
  v28 = a3;
  v29 = a2 >> 24;
  v30 = HIDWORD(a2);
  v31 = a2 >> 40;
  v9 = sub_100012C44(&qword_10040A7C8);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin();
  v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1[3];
  v13 = a1[4];
  sub_10003259C(a1, v14);
  v15 = sub_1001DC6C4();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for NANAttribute.ExtendedMesh.CodingKeys, &type metadata for NANAttribute.ExtendedMesh.CodingKeys, v15, v14, v13);
  LOBYTE(v33[0]) = a2;
  BYTE1(v33[0]) = v7;
  BYTE2(v33[0]) = v8;
  BYTE3(v33[0]) = v29;
  BYTE4(v33[0]) = v30;
  BYTE5(v33[0]) = v31;
  v34 = 0;
  v16 = sub_100039C34();
  v17 = v32;
  KeyedEncodingContainer.encode<A>(_:forKey:)(v33, &v34, v9, &type metadata for WiFiAddress, v16);
  if (!v17)
  {
    v19 = v26;
    v18 = v27;
    LOBYTE(v33[0]) = BYTE6(a2);
    BYTE1(v33[0]) = HIBYTE(a2);
    v20 = v28;
    BYTE2(v33[0]) = v28;
    v34 = 1;
    v21 = sub_1001DC5B4();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v33, &v34, v9, &type metadata for NonNANOperatingChannelInformation, v21);
    LOWORD(v33[0]) = WORD1(v20);
    WORD1(v33[0]) = WORD2(v20);
    v34 = 2;
    v22 = sub_1001DC5F8();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v33, &v34, v9, &type metadata for NonNANBeaconInformation, v22);
    v33[0] = v19;
    v33[1] = v18;
    v34 = 3;
    v23 = sub_1001DAAC8();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v33, &v34, v9, &type metadata for BinaryDecoder.DataCopy, v23);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

Swift::Int NANAttribute.ExtendedMesh.hashValue.getter(unint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  Swift::UInt8 v6;
  Swift::UInt8 v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  __n128 v13;
  Swift::UInt8 v15[8];
  Swift::UInt8 v16[8];
  Swift::UInt16 v17[4];
  Swift::UInt16 v18[4];
  _QWORD v19[9];

  v6 = a2;
  v7 = a1;
  v8 = a1 >> 8;
  v9 = a1 >> 16;
  v10 = a1 >> 24;
  v11 = HIDWORD(a1);
  v12 = a1 >> 40;
  *(_QWORD *)v15 = HIWORD(a1);
  *(_QWORD *)v16 = HIBYTE(a1);
  *(_QWORD *)v17 = a2 >> 16;
  *(_QWORD *)v18 = HIDWORD(a2);
  Hasher.init(_seed:)(v19);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(v11);
  Hasher._combine(_:)(v12);
  Hasher._combine(_:)(v15[0]);
  Hasher._combine(_:)(v16[0]);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v17[0]);
  Hasher._combine(_:)(v18[0]);
  sub_100031FEC(a3, a4);
  Data.hash(into:)(v19, a3, a4, v13);
  sub_10000E614(a3, a4);
  return Hasher._finalize()();
}

uint64_t NANAttribute.ExtendedMesh.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  result = sub_1001D4D44(a1);
  if (v1)
    return v3 & 0xFFFFFFFF00FFLL;
  return result;
}

Swift::Int sub_1001BBC88()
{
  uint64_t v0;

  return NANAttribute.ExtendedMesh.hashValue.getter(*(_QWORD *)v0, *(unsigned __int8 *)(v0 + 8) | ((unint64_t)*(unsigned __int16 *)(v0 + 10) << 16) | ((unint64_t)*(unsigned __int16 *)(v0 + 12) << 32), *(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1001BBCA8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  Swift::UInt8 v6;
  Swift::UInt8 v7;
  Swift::UInt8 v8;
  Swift::UInt8 v9;
  Swift::UInt8 v10;
  Swift::UInt8 v11;
  Swift::UInt8 v12;
  __n128 v13;
  Swift::UInt8 v15;
  Swift::UInt16 v16;
  Swift::UInt16 v17;

  v2 = v1;
  v4 = *(_QWORD *)(v2 + 16);
  v5 = *(_QWORD *)(v2 + 24);
  v6 = *(_BYTE *)(v2 + 1);
  v7 = *(_BYTE *)(v2 + 2);
  v8 = *(_BYTE *)(v2 + 3);
  v9 = *(_BYTE *)(v2 + 4);
  v10 = *(_BYTE *)(v2 + 5);
  v11 = *(_BYTE *)(v2 + 6);
  v12 = *(_BYTE *)(v2 + 7);
  v15 = *(_BYTE *)(v2 + 8);
  v16 = *(_WORD *)(v2 + 10);
  v17 = *(_WORD *)(v2 + 12);
  Hasher._combine(_:)(*(_BYTE *)v2);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(v11);
  Hasher._combine(_:)(v12);
  Hasher._combine(_:)(v15);
  Hasher._combine(_:)(v16);
  Hasher._combine(_:)(v17);
  sub_100031FEC(v4, v5);
  Data.hash(into:)(a1, v4, v5, v13);
  return sub_10000E614(v4, v5);
}

Swift::Int sub_1001BBDA0()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  Swift::UInt8 v3;
  Swift::UInt8 v4;
  Swift::UInt8 v5;
  Swift::UInt8 v6;
  Swift::UInt8 v7;
  Swift::UInt8 v8;
  Swift::UInt8 v9;
  __n128 v10;
  Swift::UInt8 v12;
  Swift::UInt8 v13;
  Swift::UInt16 v14;
  Swift::UInt16 v15;
  _QWORD v16[9];

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24);
  v3 = *(_BYTE *)v0;
  v4 = *(_BYTE *)(v0 + 1);
  v5 = *(_BYTE *)(v0 + 2);
  v6 = *(_BYTE *)(v0 + 3);
  v7 = *(_BYTE *)(v0 + 4);
  v8 = *(_BYTE *)(v0 + 5);
  v9 = *(_BYTE *)(v0 + 6);
  v12 = *(_BYTE *)(v0 + 7);
  v13 = *(_BYTE *)(v0 + 8);
  v14 = *(_WORD *)(v0 + 10);
  v15 = *(_WORD *)(v0 + 12);
  Hasher.init(_seed:)(v16);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v12);
  Hasher._combine(_:)(v13);
  Hasher._combine(_:)(v14);
  Hasher._combine(_:)(v15);
  sub_100031FEC(v1, v2);
  Data.hash(into:)(v16, v1, v2, v10);
  sub_10000E614(v1, v2);
  return Hasher._finalize()();
}

uint64_t sub_1001BBED4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v5;
  __int16 v6;
  __int16 v7;
  uint64_t v8;
  uint64_t v9;

  result = sub_1001D4D44(a1);
  if (!v2)
  {
    *(_QWORD *)a2 = result;
    *(_BYTE *)(a2 + 8) = v5;
    *(_WORD *)(a2 + 10) = v6;
    *(_WORD *)(a2 + 12) = v7;
    *(_QWORD *)(a2 + 16) = v8;
    *(_QWORD *)(a2 + 24) = v9;
  }
  return result;
}

uint64_t sub_1001BBF4C(_QWORD *a1)
{
  uint64_t v1;

  return NANAttribute.ExtendedMesh.encode(to:)(a1, *(_QWORD *)v1, *(unsigned __int8 *)(v1 + 8) | ((unint64_t)*(unsigned __int16 *)(v1 + 10) << 16) | ((unint64_t)*(unsigned __int16 *)(v1 + 12) << 32), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

void sub_1001BBF7C(uint64_t a1, uint64_t a2)
{
  sub_1001D058C(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8) | ((unint64_t)*(unsigned __int16 *)(a1 + 10) << 16) | ((unint64_t)*(unsigned __int16 *)(a1 + 12) << 32), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)a2, *(unsigned __int8 *)(a2 + 8) | ((unint64_t)*(unsigned __int16 *)(a2 + 10) << 16) | ((unint64_t)*(unsigned __int16 *)(a2 + 12) << 32));
}

unint64_t NANAttribute.FineTimingMeasurementRangeReport.Entry.rangeEntry2.getter(uint64_t a1, unint64_t a2)
{
  return a2 >> 24;
}

uint64_t NANAttribute.FineTimingMeasurementRangeReport.Entry.rangeEntry2.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 11) = result;
  return result;
}

uint64_t NANAttribute.FineTimingMeasurementRangeReport.Entry.rangeEntry3.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 12) = result;
  return result;
}

uint64_t NANAttribute.FineTimingMeasurementRangeReport.Entry.maximumRangeErrorExponent.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 13) = result;
  return result;
}

void NANAttribute.FineTimingMeasurementRangeReport.Entry.hash(into:)(int a1, unint64_t a2, unint64_t a3)
{
  Swift::UInt8 v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  Swift::UInt8 v12[8];

  v3 = a3;
  v4 = HIDWORD(a2);
  v5 = a2 >> 40;
  v6 = HIWORD(a2);
  v7 = HIBYTE(a2);
  v8 = a3 >> 8;
  v9 = a3 >> 16;
  v10 = a3 >> 24;
  v11 = HIDWORD(a3);
  *(_QWORD *)v12 = a3 >> 40;
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(v11);
  Hasher._combine(_:)(v12[0]);
}

BOOL static NANAttribute.FineTimingMeasurementRangeReport.Entry.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1001D10C8(a1, a2 & 0xFFFFFFFFFFFFLL, a3, a4 & 0xFFFFFFFFFFFFLL);
}

uint64_t sub_1001BC0B0()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1001BC0E4 + 4 * byte_100352288[*v0]))(0x6D69547472617473, 0xE900000000000065);
}

uint64_t sub_1001BC0E4()
{
  return 0x6469737362;
}

uint64_t sub_1001BC0F8()
{
  return 0x746E4565676E6172;
}

uint64_t sub_1001BC118()
{
  return 0x746E4565676E6172;
}

uint64_t sub_1001BC13C()
{
  return 0x746E4565676E6172;
}

unint64_t sub_1001BC160()
{
  return 0xD000000000000019;
}

uint64_t sub_1001BC17C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1001ED130(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1001BC1A0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001DC708();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001BC1C8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001DC708();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NANAttribute.FineTimingMeasurementRangeReport.Entry.encode(to:)(_QWORD *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v16;
  char v17;
  char v18;
  char v19;
  char v20;
  char v21;
  _BYTE v22[4];
  __int16 v23;
  char v24;

  v7 = sub_100012C44(&qword_10040A7D8);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin();
  v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a1[3];
  v12 = a1[4];
  sub_10003259C(a1, v11);
  v13 = sub_1001DC708();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for NANAttribute.FineTimingMeasurementRangeReport.Entry.CodingKeys, &type metadata for NANAttribute.FineTimingMeasurementRangeReport.Entry.CodingKeys, v13, v11, v12);
  v24 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(a2, &v24, v7);
  if (!v3)
  {
    v22[0] = BYTE4(a2);
    v22[1] = BYTE5(a2);
    v22[2] = BYTE6(a2);
    v22[3] = HIBYTE(a2);
    v23 = a3;
    v21 = 1;
    v14 = sub_100039C34();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v22, &v21, v7, &type metadata for WiFiAddress, v14);
    v20 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(a3 >> 16, &v20, v7);
    v19 = 3;
    KeyedEncodingContainer.encode(_:forKey:)(a3 >> 24, &v19, v7);
    v18 = 4;
    KeyedEncodingContainer.encode(_:forKey:)(HIDWORD(a3), &v18, v7);
    v17 = 5;
    KeyedEncodingContainer.encode(_:forKey:)(a3 >> 40, &v17, v7);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

Swift::Int NANAttribute.FineTimingMeasurementRangeReport.Entry.hashValue.getter(unint64_t a1, unint64_t a2)
{
  Swift::UInt8 v2;
  Swift::UInt32 v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  Swift::UInt8 v12[8];
  Swift::UInt8 v13[8];
  _QWORD v14[9];

  v2 = a2;
  v3 = a1;
  v4 = HIDWORD(a1);
  v5 = a1 >> 40;
  v6 = HIWORD(a1);
  v7 = HIBYTE(a1);
  v8 = a2 >> 8;
  v9 = a2 >> 16;
  v10 = a2 >> 24;
  *(_QWORD *)v12 = HIDWORD(a2);
  *(_QWORD *)v13 = a2 >> 40;
  Hasher.init(_seed:)(v14);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(v12[0]);
  Hasher._combine(_:)(v13[0]);
  return Hasher._finalize()();
}

uint64_t NANAttribute.FineTimingMeasurementRangeReport.Entry.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  result = sub_1001D72F0(a1);
  if (v1)
    return v3 & 0xFFFFFFFFFFFFLL;
  return result;
}

Swift::Int sub_1001BC518()
{
  uint64_t v0;
  Swift::UInt32 v1;
  Swift::UInt8 v2;
  Swift::UInt8 v3;
  Swift::UInt8 v4;
  Swift::UInt8 v5;
  Swift::UInt8 v6;
  Swift::UInt8 v7;
  Swift::UInt8 v8;
  Swift::UInt8 v9;
  Swift::UInt8 v11;
  Swift::UInt8 v12;
  _QWORD v13[9];

  v1 = *(_DWORD *)v0;
  v2 = *(_BYTE *)(v0 + 4);
  v3 = *(_BYTE *)(v0 + 5);
  v4 = *(_BYTE *)(v0 + 6);
  v5 = *(_BYTE *)(v0 + 7);
  v6 = *(_BYTE *)(v0 + 8);
  v7 = *(_BYTE *)(v0 + 9);
  v8 = *(_BYTE *)(v0 + 10);
  v9 = *(_BYTE *)(v0 + 11);
  v11 = *(_BYTE *)(v0 + 12);
  v12 = *(_BYTE *)(v0 + 13);
  Hasher.init(_seed:)(v13);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v11);
  Hasher._combine(_:)(v12);
  return Hasher._finalize()();
}

void sub_1001BC620()
{
  uint64_t v0;
  Swift::UInt8 v1;
  Swift::UInt8 v2;
  Swift::UInt8 v3;
  Swift::UInt8 v4;
  Swift::UInt8 v5;
  Swift::UInt8 v6;
  Swift::UInt8 v7;
  Swift::UInt8 v8;
  Swift::UInt8 v9;
  Swift::UInt8 v10;

  v1 = *(_BYTE *)(v0 + 4);
  v2 = *(_BYTE *)(v0 + 5);
  v3 = *(_BYTE *)(v0 + 6);
  v4 = *(_BYTE *)(v0 + 7);
  v5 = *(_BYTE *)(v0 + 8);
  v6 = *(_BYTE *)(v0 + 9);
  v7 = *(_BYTE *)(v0 + 10);
  v8 = *(_BYTE *)(v0 + 11);
  v9 = *(_BYTE *)(v0 + 12);
  v10 = *(_BYTE *)(v0 + 13);
  Hasher._combine(_:)(*(_DWORD *)v0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
}

Swift::Int sub_1001BC6EC()
{
  uint64_t v0;
  Swift::UInt32 v1;
  Swift::UInt8 v2;
  Swift::UInt8 v3;
  Swift::UInt8 v4;
  Swift::UInt8 v5;
  Swift::UInt8 v6;
  Swift::UInt8 v7;
  Swift::UInt8 v8;
  Swift::UInt8 v9;
  Swift::UInt8 v11;
  Swift::UInt8 v12;
  _QWORD v13[9];

  v1 = *(_DWORD *)v0;
  v2 = *(_BYTE *)(v0 + 4);
  v3 = *(_BYTE *)(v0 + 5);
  v4 = *(_BYTE *)(v0 + 6);
  v5 = *(_BYTE *)(v0 + 7);
  v6 = *(_BYTE *)(v0 + 8);
  v7 = *(_BYTE *)(v0 + 9);
  v8 = *(_BYTE *)(v0 + 10);
  v9 = *(_BYTE *)(v0 + 11);
  v11 = *(_BYTE *)(v0 + 12);
  v12 = *(_BYTE *)(v0 + 13);
  Hasher.init(_seed:)(v13);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v11);
  Hasher._combine(_:)(v12);
  return Hasher._finalize()();
}

uint64_t sub_1001BC7F0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = sub_1001D72F0(a1);
  if (!v2)
  {
    *(_QWORD *)a2 = result;
    *(_WORD *)(a2 + 8) = v5;
    *(_BYTE *)(a2 + 10) = BYTE2(v5);
    *(_BYTE *)(a2 + 11) = BYTE3(v5);
    *(_BYTE *)(a2 + 12) = BYTE4(v5);
    *(_BYTE *)(a2 + 13) = BYTE5(v5);
  }
  return result;
}

uint64_t sub_1001BC864(_QWORD *a1)
{
  uint64_t v1;

  return NANAttribute.FineTimingMeasurementRangeReport.Entry.encode(to:)(a1, *(_QWORD *)v1, *(unsigned int *)(v1 + 8) | ((unint64_t)*(unsigned __int8 *)(v1 + 12) << 32) | ((unint64_t)*(unsigned __int8 *)(v1 + 13) << 40));
}

BOOL sub_1001BC890(uint64_t a1, uint64_t a2)
{
  return sub_1001D10C8(*(_QWORD *)a1, *(unsigned int *)(a1 + 8) | ((unint64_t)*(unsigned __int8 *)(a1 + 12) << 32) | ((unint64_t)*(unsigned __int8 *)(a1 + 13) << 40), *(_QWORD *)a2, *(unsigned int *)(a2 + 8) | ((unint64_t)*(unsigned __int8 *)(a2 + 12) << 32) | ((unint64_t)*(unsigned __int8 *)(a2 + 13) << 40));
}

uint64_t sub_1001BC8CC()
{
  return 0x73656972746E65;
}

uint64_t sub_1001BC8E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v6;
  uint64_t result;
  char v8;

  if (a1 == 0x73656972746E65 && a2 == 0xE700000000000000)
  {
    result = swift_bridgeObjectRelease(0xE700000000000000);
    v8 = 0;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x73656972746E65, 0xE700000000000000, a1, a2, 0);
    result = swift_bridgeObjectRelease(a2);
    v8 = v6 ^ 1;
  }
  *a3 = v8 & 1;
  return result;
}

uint64_t sub_1001BC978(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001DC74C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001BC9A0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001DC74C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NANAttribute.FineTimingMeasurementRangeReport.encode(to:)(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v4 = sub_100012C44(&qword_10040A7E8);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin();
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a1[3];
  v9 = a1[4];
  sub_10003259C(a1, v8);
  v10 = sub_1001DC74C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for NANAttribute.FineTimingMeasurementRangeReport.CodingKeys, &type metadata for NANAttribute.FineTimingMeasurementRangeReport.CodingKeys, v10, v8, v9);
  v16 = a2;
  v11 = sub_100012C44(&qword_10040A7F8);
  v12 = sub_1000934A0(&qword_10040A800, &qword_10040A7F8, (uint64_t (*)(void))sub_1001DC790, (const char *)&protocol conformance descriptor for <A> [A]);
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v16, v13, v4, v11, v12);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

Swift::Int NANAttribute.FineTimingMeasurementRangeReport.hashValue.getter(uint64_t a1)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3);
  NANAttribute.FineTimingMeasurementRangeReport.hash(into:)((uint64_t)v3, a1);
  return Hasher._finalize()();
}

Swift::Int sub_1001BCB30()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  NANAttribute.FineTimingMeasurementRangeReport.hash(into:)((uint64_t)v3, v1);
  return Hasher._finalize()();
}

void sub_1001BCB74(uint64_t a1)
{
  uint64_t *v1;

  NANAttribute.FineTimingMeasurementRangeReport.hash(into:)(a1, *v1);
}

Swift::Int sub_1001BCB7C()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  NANAttribute.FineTimingMeasurementRangeReport.hash(into:)((uint64_t)v3, v1);
  return Hasher._finalize()();
}

uint64_t sub_1001BCBBC@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int16 v9;
  _QWORD *v10;
  uint64_t result;
  _QWORD v12[3];
  uint64_t v13;
  uint64_t v14;

  v5 = a1[3];
  v6 = a1[4];
  sub_10003259C(a1, v5);
  dispatch thunk of Decoder.unkeyedContainer()(v12, v5, v6);
  if (v2)
    return sub_100014430(a1);
  v7 = v13;
  v8 = v14;
  sub_100034C68((uint64_t)v12, v13);
  v9 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)(v7, v8);
  v10 = sub_1001A9B6C(v9 << 8, (uint64_t)v12);
  sub_100014430(v12);
  result = sub_100014430(a1);
  *a2 = v10;
  return result;
}

_QWORD *NANAttribute.FineTimingMeasurementRangeReport.init(from:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int16 v6;
  _QWORD *v7;
  _QWORD v9[3];
  uint64_t v10;
  uint64_t v11;

  v2 = a1[3];
  v3 = a1[4];
  sub_10003259C(a1, v2);
  dispatch thunk of Decoder.unkeyedContainer()(v9, v2, v3);
  v4 = v10;
  v5 = v11;
  sub_100034C68((uint64_t)v9, v10);
  v6 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)(v4, v5);
  v7 = sub_1001A9B6C(v6 << 8, (uint64_t)v9);
  sub_100014430(v9);
  sub_100014430(a1);
  return v7;
}

uint64_t sub_1001BCD78(_QWORD *a1)
{
  uint64_t *v1;

  return NANAttribute.FineTimingMeasurementRangeReport.encode(to:)(a1, *v1);
}

uint64_t sub_1001BCD90(uint64_t *a1, uint64_t *a2, uint8x8_t a3, uint8x8_t a4)
{
  return _s7CoreP2P12NANAttributeO32FineTimingMeasurementRangeReportV23__derived_struct_equalsySbAE_AEtFZ_0(*a1, *a2, a3, a4);
}

uint64_t NANAttribute.CipherSuiteInformation.Capabilities.replayCounters.getter(uint64_t a1)
{
  return sub_1001BCDAC(a1, (unsigned __int8 (*)(_QWORD, uint64_t, uint64_t))sub_10007CD0C);
}

uint64_t sub_1001BCDAC(uint64_t a1, unsigned __int8 (*a2)(_QWORD, uint64_t, uint64_t))
{
  int v2;
  uint64_t result;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a2(0, 1, a1);
  if (v2 == 1)
    return 1;
  if (!v2)
    return 0;
  v4 = sub_100012C84();
  v5 = swift_allocError(&type metadata for WiFiError, v4, 0, 0);
  *(_OWORD *)v6 = xmmword_100337850;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = v5;
  swift_willThrow(v5);
  result = swift_unexpectedError(v7, "CoreP2P/NANAttribute.swift", 26, 1);
  __break(1u);
  return result;
}

unint64_t NANAttribute.CipherSuiteInformation.Capabilities.groupKeySupport.getter(char a1)
{
  unint64_t result;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  result = sub_10007CD0C(1uLL, 2, a1);
  if (result > 3u)
  {
    v2 = sub_100012C84();
    v3 = swift_allocError(&type metadata for WiFiError, v2, 0, 0);
    *(_OWORD *)v4 = xmmword_100337850;
    *(_BYTE *)(v4 + 16) = 2;
    v5 = v3;
    swift_willThrow(v3);
    result = swift_unexpectedError(v5, "CoreP2P/NANAttribute.swift", 26, 1);
    __break(1u);
  }
  return result;
}

uint64_t NANAttribute.CipherSuiteInformation.Capabilities.gtksaReplayCounters.getter(char a1)
{
  int v2;
  char v3;
  uint64_t result;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;

  v2 = sub_10007CD0C(1uLL, 2, a1);
  if ((v2 - 1) >= 2)
  {
    result = 2;
    if (v2 && v2 != 3)
    {
      v5 = sub_100012C84();
      v6 = swift_allocError(&type metadata for WiFiError, v5, 0, 0);
      *(_OWORD *)v7 = xmmword_100337850;
      *(_BYTE *)(v7 + 16) = 2;
      v8 = v6;
      swift_willThrow(v6);
      result = swift_unexpectedError(v8, "CoreP2P/NANAttribute.swift", 26, 1);
      __break(1u);
    }
  }
  else
  {
    v3 = sub_10007CD0C(3uLL, 1, a1);
    if (v3 == 1)
      v9 = 1;
    else
      v9 = 2;
    if (v3)
      return v9;
    else
      return 0;
  }
  return result;
}

uint64_t NANAttribute.CipherSuiteInformation.Capabilities.broadcastIntegrityProtocol.getter(char a1)
{
  unsigned int v2;
  uint64_t result;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = sub_10007CD0C(1uLL, 2, a1);
  result = 2;
  if (v2 >= 2)
  {
    if (v2 == 2)
    {
      result = sub_10007CD0C(4uLL, 1, a1);
      if ((_BYTE)result)
      {
        if (result == 1)
          return 1;
        goto LABEL_9;
      }
    }
    else if (v2 != 3)
    {
      v4 = sub_100012C84();
      v5 = swift_allocError(&type metadata for WiFiError, v4, 0, 0);
      *(_OWORD *)v6 = xmmword_100337850;
      *(_BYTE *)(v6 + 16) = 2;
      v7 = v5;
      swift_willThrow(v5);
      swift_unexpectedError(v7, "CoreP2P/NANAttribute.swift", 26, 1);
      __break(1u);
LABEL_9:
      v8 = sub_100012C84();
      v9 = swift_allocError(&type metadata for WiFiError, v8, 0, 0);
      *(_OWORD *)v10 = xmmword_100337850;
      *(_BYTE *)(v10 + 16) = 2;
      swift_willThrow(v9);
      result = swift_unexpectedError(v9, "CoreP2P/NANAttribute.swift", 26, 1);
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_1001BD174(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1001DF4F4();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1001BD1D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1001DF4F4();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

void NANAttribute.CipherSuiteInformation.CipherSuite.hash(into:)(uint64_t a1, __int16 a2)
{
  Swift::UInt8 v2;

  v2 = HIBYTE(a2);
  Hasher._combine(_:)(a2 + 1);
  Hasher._combine(_:)(v2);
}

uint64_t sub_1001BD24C()
{
  _BYTE *v0;

  if (*v0)
    return 0x496873696C627570;
  else
    return 0x7553726568706963;
}

uint64_t sub_1001BD294@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1001ED3A8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1001BD2B8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001DC7D4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001BD2E0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001DC7D4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NANAttribute.CipherSuiteInformation.CipherSuite.encode(to:)(_QWORD *a1, __int16 a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v14;
  char v15;
  char v16;
  char v17;

  v5 = sub_100012C44(&qword_10040A810);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin();
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10003259C(a1, v9);
  v11 = sub_1001DC7D4();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for NANAttribute.CipherSuiteInformation.CipherSuite.CodingKeys, &type metadata for NANAttribute.CipherSuiteInformation.CipherSuite.CodingKeys, v11, v9, v10);
  v17 = a2;
  v16 = 0;
  v12 = sub_1001DC818();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v17, &v16, v5, &type metadata for NANCipherSuite, v12);
  if (!v2)
  {
    v15 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(HIBYTE(a2), &v15, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

Swift::Int NANAttribute.CipherSuiteInformation.CipherSuite.hashValue.getter(__int16 a1)
{
  char v1;
  Swift::UInt8 v2;
  _QWORD v4[9];

  v1 = a1;
  v2 = HIBYTE(a1);
  Hasher.init(_seed:)(v4);
  Hasher._combine(_:)(v1 + 1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t NANAttribute.CipherSuiteInformation.CipherSuite.init(from:)(_QWORD *a1)
{
  return sub_1001D6344(a1);
}

Swift::Int sub_1001BD4A0()
{
  char *v0;
  char v1;
  Swift::UInt8 v2;
  _QWORD v4[9];

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)(v4);
  Hasher._combine(_:)(v1 + 1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void sub_1001BD4FC()
{
  _BYTE *v0;
  Swift::UInt8 v1;

  v1 = v0[1];
  Hasher._combine(_:)(*v0 + 1);
  Hasher._combine(_:)(v1);
}

Swift::Int sub_1001BD53C()
{
  char *v0;
  char v1;
  Swift::UInt8 v2;
  _QWORD v4[9];

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)(v4);
  Hasher._combine(_:)(v1 + 1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t sub_1001BD594@<X0>(_WORD *a1@<X8>)
{
  return sub_1001BD5B0((uint64_t (*)(void))sub_1001D6344, a1);
}

uint64_t sub_1001BD5B0@<X0>(uint64_t (*a1)(void)@<X3>, _WORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = a1();
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_1001BD5D8(_QWORD *a1)
{
  __int16 *v1;

  return NANAttribute.CipherSuiteInformation.CipherSuite.encode(to:)(a1, *v1);
}

void NANAttribute.CipherSuiteInformation.hash(into:)(int a1, Swift::UInt8 a2, uint64_t a3)
{
  Swift::UInt v4;
  Swift::UInt8 *v5;
  Swift::UInt8 v6;
  Swift::UInt8 v7;

  Hasher._combine(_:)(a2);
  v4 = *(_QWORD *)(a3 + 16);
  Hasher._combine(_:)(v4);
  if (v4)
  {
    v5 = (Swift::UInt8 *)(a3 + 33);
    do
    {
      v6 = *(v5 - 1) + 1;
      v7 = *v5;
      v5 += 2;
      Hasher._combine(_:)(v6);
      Hasher._combine(_:)(v7);
      --v4;
    }
    while (v4);
  }
}

uint64_t static NANAttribute.CipherSuiteInformation.__derived_struct_equals(_:_:)(char a1, uint64_t a2, char a3, uint64_t a4)
{
  return sub_1001BD660(a1, a2, a3, a4, (uint64_t (*)(uint64_t, uint64_t))sub_100088318);
}

uint64_t sub_1001BD660(char a1, uint64_t a2, char a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  if (a1 == a3)
    return a5(a2, a4);
  else
    return 0;
}

uint64_t sub_1001BD680()
{
  _BYTE *v0;

  if (*v0)
    return 0x7553726568706963;
  else
    return 0x696C696261706163;
}

uint64_t sub_1001BD6C4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1001ED4BC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1001BD6E8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001DC85C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001BD710(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001DC85C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NANAttribute.CipherSuiteInformation.encode(to:)(_QWORD *a1, char a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  char v22;

  v7 = sub_100012C44(&qword_10040A828);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin();
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a1[3];
  v12 = a1[4];
  sub_10003259C(a1, v11);
  v13 = sub_1001DC85C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for NANAttribute.CipherSuiteInformation.CodingKeys, &type metadata for NANAttribute.CipherSuiteInformation.CodingKeys, v13, v11, v12);
  v22 = a2;
  v21 = 0;
  v14 = sub_1001DC8A0();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v22, &v21, v7, &type metadata for NANAttribute.CipherSuiteInformation.Capabilities, v14);
  if (!v3)
  {
    v19 = a3;
    v20 = 1;
    v15 = sub_100012C44(&qword_10040A840);
    v16 = sub_1000934A0(&qword_10040A848, &qword_10040A840, (uint64_t (*)(void))sub_1001DC8E4, (const char *)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v19, &v20, v7, v15, v16);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

Swift::Int NANAttribute.CipherSuiteInformation.hashValue.getter(Swift::UInt8 a1, uint64_t a2)
{
  Swift::UInt v4;
  Swift::UInt8 *v5;
  Swift::UInt8 v6;
  Swift::UInt8 v7;
  _QWORD v9[9];

  Hasher.init(_seed:)(v9);
  Hasher._combine(_:)(a1);
  v4 = *(_QWORD *)(a2 + 16);
  Hasher._combine(_:)(v4);
  if (v4)
  {
    v5 = (Swift::UInt8 *)(a2 + 33);
    do
    {
      v6 = *(v5 - 1) + 1;
      v7 = *v5;
      v5 += 2;
      Hasher._combine(_:)(v6);
      Hasher._combine(_:)(v7);
      --v4;
    }
    while (v4);
  }
  return Hasher._finalize()();
}

uint64_t NANAttribute.CipherSuiteInformation.init(from:)(_QWORD *a1)
{
  return sub_1001D64A8(a1);
}

Swift::Int sub_1001BD950()
{
  uint64_t v0;

  return NANAttribute.CipherSuiteInformation.hashValue.getter(*(_BYTE *)v0, *(_QWORD *)(v0 + 8));
}

void sub_1001BD95C(int a1)
{
  uint64_t v1;

  NANAttribute.CipherSuiteInformation.hash(into:)(a1, *(_BYTE *)v1, *(_QWORD *)(v1 + 8));
}

Swift::Int sub_1001BD968()
{
  uint64_t v0;
  uint64_t v1;
  Swift::UInt8 v2;
  _QWORD v4[9];

  v1 = *(_QWORD *)(v0 + 8);
  v2 = *(_BYTE *)v0;
  Hasher.init(_seed:)(v4);
  NANAttribute.CipherSuiteInformation.hash(into:)((int)v4, v2, v1);
  return Hasher._finalize()();
}

uint64_t sub_1001BD9B0@<X0>(uint64_t a1@<X8>)
{
  return sub_1001BD9CC((uint64_t (*)(void))sub_1001D64A8, a1);
}

uint64_t sub_1001BD9CC@<X0>(uint64_t (*a1)(void)@<X3>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = a1();
  if (!v2)
  {
    *(_BYTE *)a2 = result;
    *(_QWORD *)(a2 + 8) = v5;
  }
  return result;
}

uint64_t sub_1001BD9F8(_QWORD *a1)
{
  uint64_t v1;

  return NANAttribute.CipherSuiteInformation.encode(to:)(a1, *(_BYTE *)v1, *(_QWORD *)(v1 + 8));
}

uint64_t sub_1001BDA14(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  return sub_1001BDA20(a1, a2, a3, a4, (uint64_t (*)(_QWORD, _QWORD))sub_100088318);
}

uint64_t sub_1001BDA20(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD, _QWORD))
{
  if (*a1 == *a2)
    return a5(*((_QWORD *)a1 + 1), *((_QWORD *)a2 + 1));
  else
    return 0;
}

BOOL NANAttribute.SecurityContextInformation.SecurityContextIdentifier.IdentifierType.init(rawValue:)(char a1)
{
  return a1 != 1;
}

_BYTE *sub_1001BDA54@<X0>(_BYTE *result@<X0>, BOOL *a2@<X8>)
{
  *a2 = *result != 1;
  return result;
}

Swift::Int sub_1001BDA68(uint64_t a1, uint64_t a2)
{
  return sub_1001BF320(a1, a2, 1u);
}

void sub_1001BDA70()
{
  Hasher._combine(_:)(1u);
}

Swift::Int sub_1001BDA94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001BF390(a1, a2, a3, 1u);
}

uint64_t sub_1001BDA9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1001EDF04();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1001BDAF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1001EDF04();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

BOOL NANAttribute.SecurityContextInformation.SecurityContextIdentifier.type.getter(__int16 a1)
{
  return (a1 & 0xFF00) != 256;
}

uint64_t NANAttribute.SecurityContextInformation.SecurityContextIdentifier.hash(into:)(uint64_t a1, __int16 a2, uint64_t a3, unint64_t a4)
{
  Swift::UInt8 v7;
  __n128 v8;

  v7 = HIBYTE(a2);
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(v7);
  sub_100031FEC(a3, a4);
  Data.hash(into:)(a1, a3, a4, v8);
  return sub_10000E614(a3, a4);
}

Swift::Int NANAttribute.SecurityContextInformation.SecurityContextIdentifier.hashValue.getter(__int16 a1, uint64_t a2, unint64_t a3)
{
  Swift::UInt8 v5;
  Swift::UInt8 v6;
  __n128 v7;
  _QWORD v9[9];

  v5 = a1;
  v6 = HIBYTE(a1);
  Hasher.init(_seed:)(v9);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  sub_100031FEC(a2, a3);
  Data.hash(into:)(v9, a2, a3, v7);
  sub_10000E614(a2, a3);
  return Hasher._finalize()();
}

Swift::Int sub_1001BDC4C()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  Swift::UInt8 v3;
  Swift::UInt8 v4;
  __n128 v5;
  _QWORD v7[9];

  v1 = *(_QWORD *)(v0 + 8);
  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_BYTE *)v0;
  v4 = *(_BYTE *)(v0 + 1);
  Hasher.init(_seed:)(v7);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  sub_100031FEC(v1, v2);
  Data.hash(into:)(v7, v1, v2, v5);
  sub_10000E614(v1, v2);
  return Hasher._finalize()();
}

uint64_t sub_1001BDCDC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  Swift::UInt8 v5;
  __n128 v6;

  v3 = *(_QWORD *)(v1 + 8);
  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_BYTE *)(v1 + 1);
  Hasher._combine(_:)(*(_BYTE *)v1);
  Hasher._combine(_:)(v5);
  sub_100031FEC(v3, v4);
  Data.hash(into:)(a1, v3, v4, v6);
  return sub_10000E614(v3, v4);
}

Swift::Int sub_1001BDD48()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  Swift::UInt8 v3;
  Swift::UInt8 v4;
  __n128 v5;
  _QWORD v7[9];

  v1 = *(_QWORD *)(v0 + 8);
  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_BYTE *)v0;
  v4 = *(_BYTE *)(v0 + 1);
  Hasher.init(_seed:)(v7);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  sub_100031FEC(v1, v2);
  Data.hash(into:)(v7, v1, v2, v5);
  sub_10000E614(v1, v2);
  return Hasher._finalize()();
}

uint64_t sub_1001BDDD4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  result = sub_1001D8758(a1);
  if (!v2)
  {
    *(_WORD *)a2 = result;
    *(_QWORD *)(a2 + 8) = v5;
    *(_QWORD *)(a2 + 16) = v6;
  }
  return result;
}

uint64_t NANAttribute.SecurityContextInformation.SecurityContextIdentifier.init(from:)(_QWORD *a1)
{
  return sub_1001D8758(a1);
}

void sub_1001BDE28(_QWORD *a1)
{
  unsigned __int16 *v1;

  NANAttribute.SecurityContextInformation.SecurityContextIdentifier.encode(to:)(a1, *v1, *((_QWORD *)v1 + 1), *((_QWORD *)v1 + 2));
}

void NANAttribute.SecurityContextInformation.SecurityContextIdentifier.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v5 = a1[3];
  v6 = a1[4];
  sub_10003259C(a1, v5);
  dispatch thunk of Encoder.unkeyedContainer()(v7, v5, v6);
  __asm { BR              X10 }
}

uint64_t sub_1001BDEB0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD v14[2];
  _QWORD v15[3];
  uint64_t v16;
  uint64_t v17;

  v4 = v16;
  v5 = v17;
  sub_100034C68((uint64_t)v15, v16);
  dispatch thunk of UnkeyedEncodingContainer.encode(_:)(BYTE6(v0), v4, v5);
  if (!v3)
  {
    v6 = v16;
    v7 = v17;
    sub_100034C68((uint64_t)v15, v16);
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)(BYTE1(v2), v6, v7);
    v8 = v16;
    v9 = v17;
    sub_100034C68((uint64_t)v15, v16);
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)(v2, v8, v9);
    v14[0] = v1;
    v14[1] = v0;
    v10 = v16;
    v11 = v17;
    sub_100034C68((uint64_t)v15, v16);
    v12 = sub_100068570();
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)(v14, &type metadata for Data, v12, v10, v11);
  }
  return sub_100014430(v15);
}

void sub_1001BE084(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1])
    _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(*((_QWORD *)a1 + 1), *((_QWORD *)a1 + 2));
}

double NANAttribute.SecurityContextInformation.hash(into:)(uint64_t a1, uint64_t a2)
{
  Swift::UInt v4;
  double result;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  Swift::UInt8 v9;
  __n128 v10;

  v4 = *(_QWORD *)(a2 + 16);
  Hasher._combine(_:)(v4);
  if (v4)
  {
    v6 = a2 + 32;
    swift_bridgeObjectRetain(a2);
    do
    {
      v7 = *(_QWORD *)(v6 + 8);
      v8 = *(_QWORD *)(v6 + 16);
      v9 = *(_BYTE *)(v6 + 1);
      Hasher._combine(_:)(*(_BYTE *)v6);
      Hasher._combine(_:)(v9);
      sub_100031FEC(v7, v8);
      Data.hash(into:)(a1, v7, v8, v10);
      sub_10000E614(v7, v8);
      v6 += 24;
      --v4;
    }
    while (v4);
    *(_QWORD *)&result = swift_bridgeObjectRelease(a2).n128_u64[0];
  }
  return result;
}

unint64_t sub_1001BE174()
{
  return 0xD000000000000012;
}

uint64_t sub_1001BE190@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1001ED5C8(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_1001BE1B8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001DC928();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001BE1E0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001DC928();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NANAttribute.SecurityContextInformation.encode(to:)(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v4 = sub_100012C44(&qword_10040A858);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin();
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a1[3];
  v9 = a1[4];
  sub_10003259C(a1, v8);
  v10 = sub_1001DC928();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for NANAttribute.SecurityContextInformation.CodingKeys, &type metadata for NANAttribute.SecurityContextInformation.CodingKeys, v10, v8, v9);
  v16 = a2;
  v11 = sub_100012C44(&qword_10040A868);
  v12 = sub_1000934A0(&qword_10040A870, &qword_10040A868, (uint64_t (*)(void))sub_1001DC96C, (const char *)&protocol conformance descriptor for <A> [A]);
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v16, v13, v4, v11, v12);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

Swift::Int NANAttribute.SecurityContextInformation.hashValue.getter(uint64_t a1)
{
  return sub_1001BF10C(a1, (void (*)(_QWORD *, uint64_t))sub_10008E754);
}

_QWORD *NANAttribute.SecurityContextInformation.init(from:)(_QWORD *a1)
{
  return sub_1001D7054(a1);
}

Swift::Int sub_1001BE34C(uint64_t a1, uint64_t a2)
{
  return sub_1001BF184(a1, a2, (void (*)(_QWORD *, uint64_t))sub_10008E754);
}

double sub_1001BE358(uint64_t a1)
{
  uint64_t *v1;

  return NANAttribute.SecurityContextInformation.hash(into:)(a1, *v1);
}

Swift::Int sub_1001BE360()
{
  uint64_t *v0;
  uint64_t v1;
  Swift::UInt v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  Swift::UInt8 v6;
  __n128 v7;
  _QWORD v9[9];

  v1 = *v0;
  Hasher.init(_seed:)(v9);
  v2 = *(_QWORD *)(v1 + 16);
  Hasher._combine(_:)(v2);
  if (v2)
  {
    v3 = v1 + 32;
    swift_bridgeObjectRetain(v1);
    do
    {
      v4 = *(_QWORD *)(v3 + 8);
      v5 = *(_QWORD *)(v3 + 16);
      v6 = *(_BYTE *)(v3 + 1);
      Hasher._combine(_:)(*(_BYTE *)v3);
      Hasher._combine(_:)(v6);
      sub_100031FEC(v4, v5);
      Data.hash(into:)(v9, v4, v5, v7);
      sub_10000E614(v4, v5);
      v3 += 24;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease(v1);
  }
  return Hasher._finalize()();
}

_QWORD *sub_1001BE428@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;

  result = sub_1001D7054(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_1001BE450(_QWORD *a1)
{
  uint64_t *v1;

  return NANAttribute.SecurityContextInformation.encode(to:)(a1, *v1);
}

uint64_t sub_1001BE468(uint64_t *a1, uint64_t *a2)
{
  return _s7CoreP2P12NANAttributeO26SecurityContextInformationV23__derived_struct_equalsySbAE_AEtFZ_0(*a1, *a2);
}

uint64_t sub_1001BE474()
{
  _BYTE *v0;

  if (*v0)
    return 1635017060;
  else
    return 0x496873696C627570;
}

uint64_t sub_1001BE4AC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1001ED64C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1001BE4D0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001DC9B0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001BE4F8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001DC9B0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NANAttribute.SharedKeyDescriptor.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[2];
  char v20;

  v18 = a4;
  v8 = sub_100012C44(&qword_10040A880);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin();
  v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  sub_10003259C(a1, v12);
  v14 = sub_1001DC9B0();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for NANAttribute.SharedKeyDescriptor.CodingKeys, &type metadata for NANAttribute.SharedKeyDescriptor.CodingKeys, v14, v12, v13);
  LOBYTE(v19[0]) = 0;
  KeyedEncodingContainer.encode(_:forKey:)(a2, v19, v8);
  if (!v4)
  {
    v19[0] = a3;
    v19[1] = v18;
    v20 = 1;
    v15 = sub_1001DAAC8();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v19, &v20, v8, &type metadata for BinaryDecoder.DataCopy, v15);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t NANAttribute.SharedKeyDescriptor.init(from:)(_QWORD *a1)
{
  return sub_1001D61D8(a1);
}

uint64_t sub_1001BE67C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  result = sub_1001D61D8(a1);
  if (!v2)
  {
    *(_BYTE *)a2 = result;
    *(_QWORD *)(a2 + 8) = v5;
    *(_QWORD *)(a2 + 16) = v6;
  }
  return result;
}

uint64_t sub_1001BE6A8(_QWORD *a1)
{
  unsigned __int8 *v1;

  return NANAttribute.SharedKeyDescriptor.encode(to:)(a1, *v1, *((_QWORD *)v1 + 1), *((_QWORD *)v1 + 2));
}

void *NANAttribute.MulticastScheduleChange.Control.accepted.unsafeMutableAddressor()
{
  return &static NANAttribute.MulticastScheduleChange.Control.accepted;
}

void *NANAttribute.MulticastScheduleChange.Control.request.unsafeMutableAddressor()
{
  return &static NANAttribute.MulticastScheduleChange.Control.request;
}

void *NANAttribute.MulticastScheduleChange.Control.response.unsafeMutableAddressor()
{
  return &static NANAttribute.MulticastScheduleChange.Control.response;
}

uint64_t sub_1001BE6E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1001DF7C4();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1001BE744(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1001DF7C4();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t NANAttribute.MulticastScheduleChange.reason.getter(uint64_t a1, uint64_t a2, unsigned int a3)
{
  return HIWORD(a3);
}

double NANAttribute.MulticastScheduleChange.hash(into:)(uint64_t a1, Swift::UInt64 a2, Swift::UInt64 a3, unsigned int a4, uint64_t a5)
{
  Swift::UInt16 v6;
  unsigned int v9;
  double result;

  v6 = a4;
  v9 = HIWORD(a4);
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(a3);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v9);
  swift_bridgeObjectRetain(a5);
  sub_10008E0F8(a1, a5);
  *(_QWORD *)&result = swift_bridgeObjectRelease(a5).n128_u64[0];
  return result;
}

uint64_t static NANAttribute.MulticastScheduleChange.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8)
{
  if (a1 == a5 && a2 == a6 && (unsigned __int16)a3 == (unsigned __int16)a7 && BYTE2(a3) == BYTE2(a7))
    return _s7CoreP2P12NANAttributeO18PublicAvailabilityV23__derived_struct_equalsySbAE_AEtFZ_0(a4, a8);
  else
    return 0;
}

uint64_t sub_1001BE850(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1001BE880 + 4 * byte_10035228E[a1]))(0x444967736D6ELL, 0xE600000000000000);
}

unint64_t sub_1001BE880()
{
  return 0xD000000000000012;
}

uint64_t sub_1001BE89C()
{
  return 0x6C6F72746E6F63;
}

uint64_t sub_1001BE8B4()
{
  return 0x6E6F73616572;
}

unint64_t sub_1001BE8C4()
{
  return 0xD00000000000001ELL;
}

uint64_t sub_1001BE8E4()
{
  unsigned __int8 *v0;

  return sub_1001BE850(*v0);
}

uint64_t sub_1001BE8EC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1001ED738(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1001BE910(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001DC9F4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001BE938(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001DC9F4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NANAttribute.MulticastScheduleChange.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;

  v23 = a5;
  v24 = a3;
  v9 = sub_100012C44(&qword_10040A890);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin();
  v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1[3];
  v13 = a1[4];
  sub_10003259C(a1, v14);
  v15 = sub_1001DC9F4();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for NANAttribute.MulticastScheduleChange.CodingKeys, &type metadata for NANAttribute.MulticastScheduleChange.CodingKeys, v15, v14, v13);
  LOBYTE(v25) = 0;
  KeyedEncodingContainer.encode(_:forKey:)(a2);
  if (!v5)
  {
    v16 = v23;
    LOBYTE(v25) = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v24);
    LOWORD(v25) = a4;
    v26 = 2;
    v17 = sub_1001DCA38();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v25, &v26, v9, &type metadata for NANAttribute.MulticastScheduleChange.Control, v17);
    LOBYTE(v25) = BYTE2(a4);
    v26 = 3;
    v18 = sub_1001DAED8();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v25, &v26, v9, &type metadata for NANReasonCode, v18);
    v25 = v16;
    v26 = 4;
    v19 = sub_100012C44(&qword_10040A710);
    v20 = sub_1000934A0(&qword_10040A718, &qword_10040A710, (uint64_t (*)(void))sub_1001DBBB4, (const char *)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v25, &v26, v9, v19, v20);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

Swift::Int NANAttribute.MulticastScheduleChange.hashValue.getter(Swift::UInt64 a1, Swift::UInt64 a2, unsigned int a3, uint64_t a4)
{
  Swift::UInt16 v5;
  unsigned int v8;
  _QWORD v10[9];

  v5 = a3;
  v8 = HIWORD(a3);
  Hasher.init(_seed:)(v10);
  Hasher._combine(_:)(a1);
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v8);
  swift_bridgeObjectRetain(a4);
  sub_10008E0F8((uint64_t)v10, a4);
  swift_bridgeObjectRelease(a4);
  return Hasher._finalize()();
}

uint64_t NANAttribute.MulticastScheduleChange.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t result;
  int v3;

  result = sub_1001D6A04(a1);
  if (v1)
    return v3 & 0xFFFFFF;
  return result;
}

Swift::Int sub_1001BEC38()
{
  uint64_t v0;
  Swift::UInt64 v1;
  Swift::UInt64 v2;
  uint64_t v3;
  Swift::UInt16 v4;
  Swift::UInt8 v5;
  _QWORD v7[9];

  v1 = *(_QWORD *)v0;
  v2 = *(_QWORD *)(v0 + 8);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = *(_WORD *)(v0 + 16);
  v5 = *(_BYTE *)(v0 + 18);
  Hasher.init(_seed:)(v7);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  swift_bridgeObjectRetain(v3);
  sub_10008E0F8((uint64_t)v7, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

double sub_1001BECD8(uint64_t a1)
{
  uint64_t v1;
  Swift::UInt64 v3;
  uint64_t v4;
  Swift::UInt16 v5;
  Swift::UInt8 v6;
  double result;

  v3 = *(_QWORD *)(v1 + 8);
  v4 = *(_QWORD *)(v1 + 24);
  v5 = *(_WORD *)(v1 + 16);
  v6 = *(_BYTE *)(v1 + 18);
  Hasher._combine(_:)(*(_QWORD *)v1);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  swift_bridgeObjectRetain(v4);
  sub_10008E0F8(a1, v4);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v4).n128_u64[0];
  return result;
}

Swift::Int sub_1001BED4C()
{
  uint64_t v0;
  Swift::UInt64 v1;
  Swift::UInt64 v2;
  uint64_t v3;
  Swift::UInt16 v4;
  Swift::UInt8 v5;
  _QWORD v7[9];

  v1 = *(_QWORD *)v0;
  v2 = *(_QWORD *)(v0 + 8);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = *(_WORD *)(v0 + 16);
  v5 = *(_BYTE *)(v0 + 18);
  Hasher.init(_seed:)(v7);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  swift_bridgeObjectRetain(v3);
  sub_10008E0F8((uint64_t)v7, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_1001BEDE8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  int v6;
  uint64_t v7;

  result = sub_1001D6A04(a1);
  if (!v2)
  {
    *(_QWORD *)a2 = result;
    *(_QWORD *)(a2 + 8) = v5;
    *(_WORD *)(a2 + 16) = v6;
    *(_BYTE *)(a2 + 18) = BYTE2(v6);
    *(_QWORD *)(a2 + 24) = v7;
  }
  return result;
}

uint64_t sub_1001BEE20(_QWORD *a1)
{
  uint64_t v1;

  return NANAttribute.MulticastScheduleChange.encode(to:)(a1, *(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(unsigned __int16 *)(v1 + 16) | (*(unsigned __int8 *)(v1 + 18) << 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1001BEE48(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)a1 == *(_QWORD *)a2
    && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8)
    && *(unsigned __int16 *)(a1 + 16) == *(unsigned __int16 *)(a2 + 16)
    && *(unsigned __int8 *)(a1 + 18) == *(unsigned __int8 *)(a2 + 18))
  {
    return _s7CoreP2P12NANAttributeO18PublicAvailabilityV23__derived_struct_equalsySbAE_AEtFZ_0(*(_QWORD *)(a1 + 24), *(_QWORD *)(a2 + 24));
  }
  else
  {
    return 0;
  }
}

double NANAttribute.PublicAvailability.hash(into:)(uint64_t a1, uint64_t a2)
{
  Swift::UInt v4;
  double result;
  unint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  Swift::UInt16 v9;
  __n128 v10;

  v4 = *(_QWORD *)(a2 + 16);
  Hasher._combine(_:)(v4);
  if (v4)
  {
    swift_bridgeObjectRetain(a2);
    v6 = (unint64_t *)(a2 + 56);
    do
    {
      v7 = *(v6 - 1);
      v8 = *v6;
      v9 = *((_WORD *)v6 - 8);
      Hasher._combine(_:)(*((_BYTE *)v6 - 24));
      Hasher._combine(_:)(v9);
      sub_100031FEC(v7, v8);
      Data.hash(into:)(a1, v7, v8, v10);
      sub_10000E614(v7, v8);
      v6 += 4;
      --v4;
    }
    while (v4);
    *(_QWORD *)&result = swift_bridgeObjectRelease(a2).n128_u64[0];
  }
  return result;
}

unint64_t sub_1001BEF48()
{
  return 0xD000000000000021;
}

uint64_t sub_1001BEF64@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1001ED938(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_1001BEF8C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001DCA7C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001BEFB4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001DCA7C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NANAttribute.PublicAvailability.encode(to:)(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v4 = sub_100012C44(&qword_10040A8A8);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin();
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a1[3];
  v9 = a1[4];
  sub_10003259C(a1, v8);
  v10 = sub_1001DCA7C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for NANAttribute.PublicAvailability.CodingKeys, &type metadata for NANAttribute.PublicAvailability.CodingKeys, v10, v8, v9);
  v16 = a2;
  v11 = sub_100012C44(&qword_10040A710);
  v12 = sub_1000934A0(&qword_10040A718, &qword_10040A710, (uint64_t (*)(void))sub_1001DBBB4, (const char *)&protocol conformance descriptor for <A> [A]);
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v16, v13, v4, v11, v12);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

Swift::Int NANAttribute.PublicAvailability.hashValue.getter(uint64_t a1)
{
  return sub_1001BF10C(a1, (void (*)(_QWORD *, uint64_t))sub_10008E0F8);
}

Swift::Int sub_1001BF10C(uint64_t a1, void (*a2)(_QWORD *, uint64_t))
{
  _QWORD v5[9];

  Hasher.init(_seed:)(v5);
  swift_bridgeObjectRetain(a1);
  a2(v5, a1);
  swift_bridgeObjectRelease(a1);
  return Hasher._finalize()();
}

_QWORD *NANAttribute.PublicAvailability.init(from:)(_QWORD *a1)
{
  return sub_1001D5DA4(a1);
}

Swift::Int sub_1001BF178(uint64_t a1, uint64_t a2)
{
  return sub_1001BF184(a1, a2, (void (*)(_QWORD *, uint64_t))sub_10008E0F8);
}

Swift::Int sub_1001BF184(uint64_t a1, uint64_t a2, void (*a3)(_QWORD *, uint64_t))
{
  uint64_t *v3;
  uint64_t v5;
  _QWORD v7[9];

  v5 = *v3;
  Hasher.init(_seed:)(v7);
  swift_bridgeObjectRetain(v5);
  a3(v7, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

double sub_1001BF1DC(uint64_t a1)
{
  uint64_t *v1;

  return NANAttribute.PublicAvailability.hash(into:)(a1, *v1);
}

Swift::Int sub_1001BF1E4()
{
  uint64_t *v0;
  uint64_t v1;
  Swift::UInt v2;
  unint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  Swift::UInt16 v6;
  __n128 v7;
  _QWORD v9[9];

  v1 = *v0;
  Hasher.init(_seed:)(v9);
  v2 = *(_QWORD *)(v1 + 16);
  Hasher._combine(_:)(v2);
  if (v2)
  {
    swift_bridgeObjectRetain(v1);
    v3 = (unint64_t *)(v1 + 56);
    do
    {
      v4 = *(v3 - 1);
      v5 = *v3;
      v6 = *((_WORD *)v3 - 8);
      Hasher._combine(_:)(*((_BYTE *)v3 - 24));
      Hasher._combine(_:)(v6);
      sub_100031FEC(v4, v5);
      Data.hash(into:)(v9, v4, v5, v7);
      sub_10000E614(v4, v5);
      v3 += 4;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease(v1);
  }
  return Hasher._finalize()();
}

_QWORD *sub_1001BF2AC@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;

  result = sub_1001D5DA4(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_1001BF2D4(_QWORD *a1)
{
  uint64_t *v1;

  return NANAttribute.PublicAvailability.encode(to:)(a1, *v1);
}

uint64_t sub_1001BF2EC(uint64_t *a1, uint64_t *a2)
{
  return _s7CoreP2P12NANAttributeO18PublicAvailabilityV23__derived_struct_equalsySbAE_AEtFZ_0(*a1, *a2);
}

BOOL NANAttribute.PairingIdentityResolution.CipherVersion.init(rawValue:)(char a1)
{
  return a1 != 0;
}

_BYTE *sub_1001BF304@<X0>(_BYTE *result@<X0>, BOOL *a2@<X8>)
{
  *a2 = *result != 0;
  return result;
}

Swift::Int sub_1001BF318(uint64_t a1, uint64_t a2)
{
  return sub_1001BF320(a1, a2, 0);
}

Swift::Int sub_1001BF320(uint64_t a1, uint64_t a2, Swift::UInt8 a3)
{
  _QWORD v5[9];

  Hasher.init(_seed:)(v5);
  Hasher._combine(_:)(a3);
  return Hasher._finalize()();
}

void sub_1001BF364()
{
  Hasher._combine(_:)(0);
}

Swift::Int sub_1001BF388(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001BF390(a1, a2, a3, 0);
}

Swift::Int sub_1001BF390(uint64_t a1, uint64_t a2, uint64_t a3, Swift::UInt8 a4)
{
  _QWORD v6[9];

  Hasher.init(_seed:)(v6);
  Hasher._combine(_:)(a4);
  return Hasher._finalize()();
}

uint64_t sub_1001BF3D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1001EDEC0();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1001BF42C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1001EDEC0();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

void NANAttribute.PairingIdentityResolution.init(nonce:tag:)(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1001BF4BC()
{
  unint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (BYTE6(v0) == 8)
    __asm { BR              X10 }
  v4 = sub_100012C84();
  v5 = swift_allocError(&type metadata for WiFiError, v4, 0, 0);
  *(_QWORD *)v6 = 0;
  *(_QWORD *)(v6 + 8) = 0;
  *(_BYTE *)(v6 + 16) = 2;
  swift_willThrow(v5);
  sub_10000E614(v3, v2);
  sub_10000E614(v1, v0);
  return v1;
}

uint64_t NANAttribute.PairingIdentityResolution.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;

  result = sub_1001D8994(a1);
  if (v1)
    return v3;
  return result;
}

uint64_t NANAttribute.PairingIdentityResolution.hash(into:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  __n128 v10;
  __n128 v11;

  Hasher._combine(_:)(0);
  sub_100031FEC(a2, a3);
  Data.hash(into:)(a1, a2, a3, v10);
  sub_10000E614(a2, a3);
  sub_100031FEC(a4, a5);
  Data.hash(into:)(a1, a4, a5, v11);
  return sub_10000E614(a4, a5);
}

uint64_t sub_1001BF694()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x65636E6F6ELL;
  if (*v0 != 1)
    v1 = 6775156;
  if (*v0)
    return v1;
  else
    return 0x6556726568706963;
}

uint64_t sub_1001BF6F0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1001ED9BC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1001BF714(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001DCAC0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001BF73C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001DCAC0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NANAttribute.PairingIdentityResolution.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;

  v21 = a5;
  v22 = a3;
  v9 = sub_100012C44(&qword_10040A8B8);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin();
  v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1[3];
  v13 = a1[4];
  sub_10003259C(a1, v14);
  v15 = sub_1001DCAC0();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for NANAttribute.PairingIdentityResolution.CodingKeys, &type metadata for NANAttribute.PairingIdentityResolution.CodingKeys, v15, v14, v13);
  LOBYTE(v23) = 0;
  v16 = sub_1001DCB04();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v16, &v23, v9, &type metadata for NANAttribute.PairingIdentityResolution.CipherVersion, v16);
  if (!v5)
  {
    v17 = a4;
    v18 = v21;
    v23 = a2;
    v24 = v22;
    v25 = 1;
    v19 = sub_100068570();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v23, &v25, v9, &type metadata for Data, v19);
    v23 = v17;
    v24 = v18;
    v25 = 2;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v23, &v25, v9, &type metadata for Data, v19);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

Swift::Int NANAttribute.PairingIdentityResolution.hashValue.getter(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  __n128 v8;
  __n128 v9;
  _QWORD v11[9];

  Hasher.init(_seed:)(v11);
  Hasher._combine(_:)(0);
  sub_100031FEC(a1, a2);
  Data.hash(into:)(v11, a1, a2, v8);
  sub_10000E614(a1, a2);
  sub_100031FEC(a3, a4);
  Data.hash(into:)(v11, a3, a4, v9);
  sub_10000E614(a3, a4);
  return Hasher._finalize()();
}

Swift::Int sub_1001BF99C()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  __n128 v5;
  __n128 v6;
  _QWORD v8[9];

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  v4 = v0[3];
  Hasher.init(_seed:)(v8);
  Hasher._combine(_:)(0);
  sub_100031FEC(v1, v2);
  Data.hash(into:)(v8, v1, v2, v5);
  sub_10000E614(v1, v2);
  sub_100031FEC(v3, v4);
  Data.hash(into:)(v8, v3, v4, v6);
  sub_10000E614(v3, v4);
  return Hasher._finalize()();
}

uint64_t sub_1001BFA44(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  __n128 v7;
  __n128 v8;

  v3 = *v1;
  v4 = v1[1];
  v5 = v1[2];
  v6 = v1[3];
  Hasher._combine(_:)(0);
  sub_100031FEC(v3, v4);
  Data.hash(into:)(a1, v3, v4, v7);
  sub_10000E614(v3, v4);
  sub_100031FEC(v5, v6);
  Data.hash(into:)(a1, v5, v6, v8);
  return sub_10000E614(v5, v6);
}

Swift::Int sub_1001BFAD0()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  __n128 v5;
  __n128 v6;
  _QWORD v8[9];

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  v4 = v0[3];
  Hasher.init(_seed:)(v8);
  Hasher._combine(_:)(0);
  sub_100031FEC(v1, v2);
  Data.hash(into:)(v8, v1, v2, v5);
  sub_10000E614(v1, v2);
  sub_100031FEC(v3, v4);
  Data.hash(into:)(v8, v3, v4, v6);
  sub_10000E614(v3, v4);
  return Hasher._finalize()();
}

uint64_t sub_1001BFB74@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = sub_1001D8994(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }
  return result;
}

uint64_t sub_1001BFBA0(_QWORD *a1)
{
  uint64_t *v1;

  return NANAttribute.PairingIdentityResolution.encode(to:)(a1, *v1, v1[1], v1[2], v1[3]);
}

uint64_t sub_1001BFBBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1001EDE7C();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1001BFC18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1001EDE7C();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_1001BFC64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1001EDE38();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1001BFCC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1001EDE38();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

void *NANAttribute.PairingBootstrapping.Method.opportunistic.unsafeMutableAddressor()
{
  return &static NANAttribute.PairingBootstrapping.Method.opportunistic;
}

void *NANAttribute.PairingBootstrapping.Method.pinCode.unsafeMutableAddressor()
{
  return &static NANAttribute.PairingBootstrapping.Method.pinCode;
}

void *NANAttribute.PairingBootstrapping.Method.passphrase.unsafeMutableAddressor()
{
  return &static NANAttribute.PairingBootstrapping.Method.passphrase;
}

void *NANAttribute.PairingBootstrapping.Method.qrCode.unsafeMutableAddressor()
{
  return &static NANAttribute.PairingBootstrapping.Method.qrCode;
}

void *NANAttribute.PairingBootstrapping.Method.nfcTag.unsafeMutableAddressor()
{
  return &static NANAttribute.PairingBootstrapping.Method.nfcTag;
}

void *NANAttribute.PairingBootstrapping.Method.keypadPinCode.unsafeMutableAddressor()
{
  return &static NANAttribute.PairingBootstrapping.Method.keypadPinCode;
}

void *NANAttribute.PairingBootstrapping.Method.keypadPassphrase.unsafeMutableAddressor()
{
  return &static NANAttribute.PairingBootstrapping.Method.keypadPassphrase;
}

void *NANAttribute.PairingBootstrapping.Method.qrCodeScan.unsafeMutableAddressor()
{
  return &static NANAttribute.PairingBootstrapping.Method.qrCodeScan;
}

void *NANAttribute.PairingBootstrapping.Method.nfcReader.unsafeMutableAddressor()
{
  return &static NANAttribute.PairingBootstrapping.Method.nfcReader;
}

void *NANAttribute.PairingBootstrapping.Method.bootstrapManagedByService.unsafeMutableAddressor()
{
  return &static NANAttribute.PairingBootstrapping.Method.bootstrapManagedByService;
}

void *NANAttribute.PairingBootstrapping.Method.bootstrapHandshakeSkipped.unsafeMutableAddressor()
{
  return &static NANAttribute.PairingBootstrapping.Method.bootstrapHandshakeSkipped;
}

void *NANAttribute.PairingBootstrapping.Method.validAdvertiseMethods.unsafeMutableAddressor()
{
  return &static NANAttribute.PairingBootstrapping.Method.validAdvertiseMethods;
}

uint64_t static NANAttribute.PairingBootstrapping.Method.validAdvertiseMethods.getter()
{
  return 31;
}

uint64_t sub_1001BFDA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1001DFA94();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1001BFE00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1001DFA94();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t NANAttribute.PairingBootstrapping.Comeback.comebackAfter.setter(uint64_t result, char a2)
{
  uint64_t v2;

  *(_QWORD *)v2 = result;
  *(_BYTE *)(v2 + 8) = a2 & 1;
  return result;
}

uint64_t NANAttribute.PairingBootstrapping.Comeback.hash(into:)(uint64_t a1, Swift::UInt64 a2, char a3, uint64_t a4, unint64_t a5)
{
  __n128 v9;

  if ((a3 & 1) != 0)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(a2);
  }
  sub_100031FEC(a4, a5);
  Data.hash(into:)(a1, a4, a5, v9);
  return sub_10000E614(a4, a5);
}

void static NANAttribute.PairingBootstrapping.Comeback.__derived_struct_equals(_:_:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  if ((a2 & 1) != 0)
  {
    if ((a6 & 1) != 0)
LABEL_4:
      _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(a3, a4);
  }
  else if ((a6 & 1) == 0 && a1 == a5)
  {
    goto LABEL_4;
  }
}

Swift::Int NANAttribute.PairingBootstrapping.Comeback.hashValue.getter(Swift::UInt64 a1, char a2, uint64_t a3, unint64_t a4)
{
  __n128 v8;
  _QWORD v10[9];

  Hasher.init(_seed:)(v10);
  if ((a2 & 1) != 0)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(a1);
  }
  sub_100031FEC(a3, a4);
  Data.hash(into:)(v10, a3, a4, v8);
  sub_10000E614(a3, a4);
  return Hasher._finalize()();
}

Swift::Int sub_1001BFFA8()
{
  uint64_t v0;
  Swift::UInt64 v1;
  int v2;
  uint64_t v3;
  unint64_t v4;
  __n128 v5;
  _QWORD v7[9];

  v1 = *(_QWORD *)v0;
  v2 = *(unsigned __int8 *)(v0 + 8);
  v3 = *(_QWORD *)(v0 + 16);
  v4 = *(_QWORD *)(v0 + 24);
  Hasher.init(_seed:)(v7);
  if (v2 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1);
  }
  sub_100031FEC(v3, v4);
  Data.hash(into:)(v7, v3, v4, v5);
  sub_10000E614(v3, v4);
  return Hasher._finalize()();
}

uint64_t sub_1001C004C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  Swift::UInt64 v5;
  __n128 v6;

  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 24);
  if (*(_BYTE *)(v1 + 8) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v5 = *(_QWORD *)v1;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v5);
  }
  sub_100031FEC(v3, v4);
  Data.hash(into:)(a1, v3, v4, v6);
  return sub_10000E614(v3, v4);
}

Swift::Int sub_1001C00D4()
{
  uint64_t v0;
  Swift::UInt64 v1;
  int v2;
  uint64_t v3;
  unint64_t v4;
  __n128 v5;
  _QWORD v7[9];

  v1 = *(_QWORD *)v0;
  v2 = *(unsigned __int8 *)(v0 + 8);
  v3 = *(_QWORD *)(v0 + 16);
  v4 = *(_QWORD *)(v0 + 24);
  Hasher.init(_seed:)(v7);
  if (v2 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1);
  }
  sub_100031FEC(v3, v4);
  Data.hash(into:)(v7, v3, v4, v5);
  sub_10000E614(v3, v4);
  return Hasher._finalize()();
}

void sub_1001C0174(uint64_t a1, uint64_t a2)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v4 = *(_BYTE *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  if ((v4 & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 8))
      return;
LABEL_8:
    _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(v5, v6);
    return;
  }
  if (*(_QWORD *)a1 == *(_QWORD *)a2)
    v7 = *(_BYTE *)(a2 + 8);
  else
    v7 = 1;
  if ((v7 & 1) == 0)
    goto LABEL_8;
}

unint64_t NANAttribute.PairingBootstrapping.type.getter()
{
  uint64_t v0;
  unint64_t result;

  result = sub_10007CD0C(0, 4, *(_BYTE *)(v0 + 1));
  if (result >= 3u)
    return 3;
  return result;
}

uint64_t NANAttribute.PairingBootstrapping.comeback.getter()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[1];
  sub_1001218A8(v1, v0[2], v0[3], v0[4]);
  return v1;
}

uint64_t NANAttribute.PairingBootstrapping.comeback.setter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t result;

  result = sub_100128024(*(_QWORD *)(v4 + 8), *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), *(_QWORD *)(v4 + 32));
  *(_QWORD *)(v4 + 8) = a1;
  *(_QWORD *)(v4 + 16) = a2;
  *(_QWORD *)(v4 + 24) = a3;
  *(_QWORD *)(v4 + 32) = a4;
  return result;
}

void NANAttribute.PairingBootstrapping.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::UInt64 v7;
  __n128 v8;

  v2 = v1;
  Hasher._combine(_:)(*(_BYTE *)v2);
  Hasher._combine(_:)(*(_BYTE *)(v2 + 1));
  Hasher._combine(_:)(*(_BYTE *)(v2 + 2));
  v4 = *(_QWORD *)(v2 + 32);
  if (v4 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v6 = *(_QWORD *)(v2 + 16);
    v5 = *(_QWORD *)(v2 + 24);
    v7 = *(_QWORD *)(v2 + 8);
    Hasher._combine(_:)(1u);
    if ((v6 & 1) != 0)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v7);
    }
    sub_1001DCB48(v2);
    Data.hash(into:)(a1, v5, v4, v8);
  }
  sub_1001DCB78(v2);
  Hasher._combine(_:)(*(_WORD *)(v2 + 40));
}

Swift::Int NANAttribute.PairingBootstrapping.hashValue.getter()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  Swift::UInt64 v4;
  __n128 v5;
  _QWORD v7[9];

  Hasher.init(_seed:)(v7);
  Hasher._combine(_:)(*(_BYTE *)v0);
  Hasher._combine(_:)(*(_BYTE *)(v0 + 1));
  Hasher._combine(_:)(*(_BYTE *)(v0 + 2));
  v1 = *(_QWORD *)(v0 + 32);
  if (v1 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v3 = *(_QWORD *)(v0 + 16);
    v2 = *(_QWORD *)(v0 + 24);
    v4 = *(_QWORD *)(v0 + 8);
    Hasher._combine(_:)(1u);
    if ((v3 & 1) != 0)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v4);
    }
    sub_1001DCB48(v0);
    Data.hash(into:)(v7, v2, v1, v5);
  }
  sub_1001DCB78(v0);
  Hasher._combine(_:)(*(_WORD *)(v0 + 40));
  return Hasher._finalize()();
}

Swift::Int sub_1001C0458()
{
  return NANAttribute.PairingBootstrapping.hashValue.getter();
}

void sub_1001C0490(uint64_t a1)
{
  NANAttribute.PairingBootstrapping.hash(into:)(a1);
}

Swift::Int sub_1001C04C8()
{
  uint64_t v0;
  Swift::UInt64 v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  Swift::UInt16 v5;
  Swift::UInt8 v6;
  Swift::UInt8 v7;
  Swift::UInt8 v8;
  __n128 v9;
  _QWORD v11[9];

  v1 = *(_QWORD *)(v0 + 8);
  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = *(_QWORD *)(v0 + 32);
  v5 = *(_WORD *)(v0 + 40);
  v6 = *(_BYTE *)v0;
  v7 = *(_BYTE *)(v0 + 1);
  v8 = *(_BYTE *)(v0 + 2);
  Hasher.init(_seed:)(v11);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  if (v4 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    if ((v2 & 1) != 0)
    {
      Hasher._combine(_:)(0);
    }
    else
    {
      Hasher._combine(_:)(1u);
      Hasher._combine(_:)(v1);
    }
    sub_1001218A8(v1, v2, v3, v4);
    Data.hash(into:)(v11, v3, v4, v9);
  }
  sub_100128024(v1, v2, v3, v4);
  Hasher._combine(_:)(v5);
  return Hasher._finalize()();
}

double NANAttribute.PairingBootstrapping.init(from:)@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  __int128 v6;
  _OWORD v7[2];

  sub_1001D8B74(a1, (uint64_t)&v6);
  if (!v2)
  {
    v5 = v7[0];
    *a2 = v6;
    a2[1] = v5;
    result = *(double *)((char *)v7 + 10);
    *(_OWORD *)((char *)a2 + 26) = *(_OWORD *)((char *)v7 + 10);
  }
  return result;
}

uint64_t sub_1001C0624(_QWORD *a1)
{
  return NANAttribute.PairingBootstrapping.encode(to:)(a1);
}

uint64_t NANAttribute.PairingBootstrapping.encode(to:)(_QWORD *a1)
{
  unsigned __int8 *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _WORD v23[12];
  _QWORD v24[3];
  uint64_t v25;
  uint64_t v26;
  _BYTE v27[32];
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  _BYTE v32[16];
  __int128 v33;
  _BYTE v34[16];
  _QWORD v35[2];
  unint64_t v36;
  char v37;

  v3 = (uint64_t)v1;
  v4 = a1[3];
  v5 = a1[4];
  sub_10003259C(a1, v4);
  dispatch thunk of Encoder.unkeyedContainer()(v24, v4, v5);
  v6 = v25;
  v7 = v26;
  v8 = *v1;
  sub_100034C68((uint64_t)v24, v25);
  dispatch thunk of UnkeyedEncodingContainer.encode(_:)(v8, v6, v7);
  if (!v2)
  {
    LOBYTE(v23[0]) = *(_BYTE *)(v3 + 1);
    v9 = v25;
    v10 = v26;
    sub_100034C68((uint64_t)v24, v25);
    v11 = sub_100012C44(&qword_10040A8D0);
    v12 = sub_100011770(&qword_10040A8D8, &qword_10040A8D0, byte_100349338);
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)(v23, v11, v12, v9, v10);
    LOBYTE(v23[0]) = *(_BYTE *)(v3 + 2);
    v13 = v25;
    v14 = v26;
    sub_100034C68((uint64_t)v24, v25);
    v15 = sub_1001DAED8();
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)(v23, &type metadata for NANReasonCode, v15, v13, v14);
    sub_100063EB8(v3 + 8, (uint64_t)v27, &qword_10040A8E0);
    sub_100063EB8((uint64_t)v27, (uint64_t)&v28, &qword_10040A8E0);
    if (*((_QWORD *)&v29 + 1) >> 60 != 15)
    {
      v30 = v28;
      v31 = v29;
      sub_100063EB8((uint64_t)&v30, (uint64_t)v32, &qword_10040A8F0);
      sub_100063EB8((uint64_t)v32, (uint64_t)&v36, &qword_10040A8F0);
      if (v37 == 1)
      {
        sub_1001DCB48(v3);
      }
      else
      {
        v19 = v36;
        if (v36 >= 0x10000)
        {
          _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 3455, 0);
          __break(1u);
          JUMPOUT(0x1001C0A74);
        }
        v20 = v25;
        v21 = v26;
        sub_100034C68((uint64_t)v24, v25);
        sub_1001DCB48(v3);
        dispatch thunk of UnkeyedEncodingContainer.encode(_:)(v19, v20, v21);
      }
      v33 = v31;
      sub_1001DCBEC((uint64_t)&v33, (uint64_t)v34);
      sub_1001DCBEC((uint64_t)v34, (uint64_t)v35);
      __asm { BR              X11 }
    }
    v23[0] = *(_WORD *)(v3 + 40);
    v16 = v25;
    v17 = v26;
    sub_100034C68((uint64_t)v24, v25);
    v18 = sub_1001DCBA8();
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)(v23, &type metadata for NANAttribute.PairingBootstrapping.Method, v18, v16, v17);
  }
  return sub_100014430(v24);
}

BOOL sub_1001C0A84(__int128 *a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v5;
  _OWORD v6[2];
  __int128 v7;
  _OWORD v8[2];

  v2 = a1[1];
  v5 = *a1;
  v6[0] = v2;
  *(_OWORD *)((char *)v6 + 10) = *(__int128 *)((char *)a1 + 26);
  v3 = a2[1];
  v7 = *a2;
  v8[0] = v3;
  *(_OWORD *)((char *)v8 + 10) = *(__int128 *)((char *)a2 + 26);
  return _s7CoreP2P12NANAttributeO20PairingBootstrappingV23__derived_struct_equalsySbAE_AEtFZ_0((unsigned __int8 *)&v5, (unsigned __int8 *)&v7);
}

uint64_t NANAttribute.VendorSpecific.oui.getter(int a1)
{
  return a1 & 0xFFFFFF;
}

uint64_t NANAttribute.VendorSpecific.oui.setter(uint64_t result)
{
  uint64_t v1;

  *(_WORD *)v1 = result;
  *(_BYTE *)(v1 + 2) = BYTE2(result);
  return result;
}

uint64_t NANAttribute.VendorSpecific.hash(into:)(uint64_t a1, unsigned int a2, uint64_t a3, unint64_t a4)
{
  char v6;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  __n128 v15;
  __n128 v16;

  v6 = a2;
  v8 = a2 >> 8;
  v9 = HIWORD(a2);
  v10 = sub_100012C44(&qword_100403E88);
  v11 = swift_allocObject(v10, 35, 7);
  *(_OWORD *)(v11 + 16) = xmmword_10033A120;
  *(_BYTE *)(v11 + 32) = v6;
  *(_BYTE *)(v11 + 33) = v8;
  *(_BYTE *)(v11 + 34) = v9;
  v12 = sub_1001068EC(v11);
  v14 = v13;
  v15 = swift_bridgeObjectRelease(v11);
  Data.hash(into:)(a1, v12, v14, v15);
  sub_10000E614(v12, v14);
  sub_100031FEC(a3, a4);
  Data.hash(into:)(a1, a3, a4, v16);
  return sub_10000E614(a3, a4);
}

void static NANAttribute.VendorSpecific.__derived_struct_equals(_:_:)(int a1, uint64_t a2, uint64_t a3, int a4)
{
  sub_1001D0E74(a1 & 0xFFFFFF, a2, a3, a4 & 0xFFFFFF);
}

uint64_t sub_1001C0BC8()
{
  _BYTE *v0;

  if (*v0)
    return 1635017060;
  else
    return 6911343;
}

uint64_t sub_1001C0BF4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1001EDB1C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1001C0C18(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001DCC28();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001C0C40(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001DCC28();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NANAttribute.VendorSpecific.encode(to:)(_QWORD *a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  char v4;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[2];
  char v24;

  v21 = a4;
  v20 = a3;
  v4 = a2;
  v6 = a2 >> 8;
  v7 = HIWORD(a2);
  v8 = sub_100012C44(&qword_10040A8F8);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin();
  v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  sub_10003259C(a1, v12);
  v14 = sub_1001DCC28();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for NANAttribute.VendorSpecific.CodingKeys, &type metadata for NANAttribute.VendorSpecific.CodingKeys, v14, v12, v13);
  LOBYTE(v23[0]) = v4;
  BYTE1(v23[0]) = v6;
  BYTE2(v23[0]) = v7;
  v24 = 0;
  v15 = sub_10016FD7C();
  v16 = v22;
  KeyedEncodingContainer.encode<A>(_:forKey:)(v23, &v24, v8, &type metadata for OUI, v15);
  if (!v16)
  {
    v23[0] = v20;
    v23[1] = v21;
    v24 = 1;
    v17 = sub_1001DAAC8();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v23, &v24, v8, &type metadata for BinaryDecoder.DataCopy, v17);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

Swift::Int NANAttribute.VendorSpecific.hashValue.getter(unsigned int a1, uint64_t a2, unint64_t a3)
{
  char v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  __n128 v13;
  __n128 v14;
  _QWORD v16[9];

  v5 = a1;
  v6 = a1 >> 8;
  v7 = HIWORD(a1);
  Hasher.init(_seed:)(v16);
  v8 = sub_100012C44(&qword_100403E88);
  v9 = swift_allocObject(v8, 35, 7);
  *(_OWORD *)(v9 + 16) = xmmword_10033A120;
  *(_BYTE *)(v9 + 32) = v5;
  *(_BYTE *)(v9 + 33) = v6;
  *(_BYTE *)(v9 + 34) = v7;
  v10 = sub_1001068EC(v9);
  v12 = v11;
  v13 = swift_bridgeObjectRelease(v9);
  Data.hash(into:)(v16, v10, v12, v13);
  sub_10000E614(v10, v12);
  sub_100031FEC(a2, a3);
  Data.hash(into:)(v16, a2, a3, v14);
  sub_10000E614(a2, a3);
  return Hasher._finalize()();
}

uint64_t NANAttribute.VendorSpecific.init(from:)(_QWORD *a1)
{
  return sub_1001D5234(a1) & 0xFFFFFF;
}

Swift::Int sub_1001C0ED4()
{
  unsigned __int16 *v0;

  return NANAttribute.VendorSpecific.hashValue.getter(*v0 | (*((unsigned __int8 *)v0 + 2) << 16), *((_QWORD *)v0 + 1), *((_QWORD *)v0 + 2));
}

uint64_t sub_1001C0EE8(uint64_t a1)
{
  __int16 *v1;
  __int16 v3;
  char v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __n128 v12;
  __n128 v13;

  v3 = *v1;
  v4 = *((_BYTE *)v1 + 2);
  v6 = *((_QWORD *)v1 + 1);
  v5 = *((_QWORD *)v1 + 2);
  v7 = sub_100012C44(&qword_100403E88);
  v8 = swift_allocObject(v7, 35, 7);
  *(_OWORD *)(v8 + 16) = xmmword_10033A120;
  *(_WORD *)(v8 + 32) = v3;
  *(_BYTE *)(v8 + 34) = v4;
  v9 = sub_1001068EC(v8);
  v11 = v10;
  v12 = swift_bridgeObjectRelease(v8);
  Data.hash(into:)(a1, v9, v11, v12);
  sub_10000E614(v9, v11);
  sub_100031FEC(v6, v5);
  Data.hash(into:)(a1, v6, v5, v13);
  return sub_10000E614(v6, v5);
}

Swift::Int sub_1001C0FA4()
{
  __int16 *v0;
  __int16 v1;
  char v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  __n128 v10;
  __n128 v11;
  _QWORD v13[9];

  v1 = *v0;
  v2 = *((_BYTE *)v0 + 2);
  v3 = *((_QWORD *)v0 + 1);
  v4 = *((_QWORD *)v0 + 2);
  Hasher.init(_seed:)(v13);
  v5 = sub_100012C44(&qword_100403E88);
  v6 = swift_allocObject(v5, 35, 7);
  *(_OWORD *)(v6 + 16) = xmmword_10033A120;
  *(_WORD *)(v6 + 32) = v1;
  *(_BYTE *)(v6 + 34) = v2;
  v7 = sub_1001068EC(v6);
  v9 = v8;
  v10 = swift_bridgeObjectRelease(v6);
  Data.hash(into:)(v13, v7, v9, v10);
  sub_10000E614(v7, v9);
  sub_100031FEC(v3, v4);
  Data.hash(into:)(v13, v3, v4, v11);
  sub_10000E614(v3, v4);
  return Hasher._finalize()();
}

uint64_t sub_1001C1078@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  result = sub_1001D5234(a1);
  if (!v2)
  {
    *(_WORD *)a2 = result;
    *(_BYTE *)(a2 + 2) = BYTE2(result);
    *(_QWORD *)(a2 + 8) = v5;
    *(_QWORD *)(a2 + 16) = v6;
  }
  return result;
}

uint64_t sub_1001C10B4(_QWORD *a1)
{
  unsigned __int16 *v1;

  return NANAttribute.VendorSpecific.encode(to:)(a1, *v1 | (*((unsigned __int8 *)v1 + 2) << 16), *((_QWORD *)v1 + 1), *((_QWORD *)v1 + 2));
}

void sub_1001C10D8(unsigned __int16 *a1, unsigned __int16 *a2)
{
  sub_1001D0E74(*a1 | (*((unsigned __int8 *)a1 + 2) << 16), *((_QWORD *)a1 + 1), *((_QWORD *)a1 + 2), *a2 | (*((unsigned __int8 *)a2 + 2) << 16));
}

uint64_t (*NANAttribute.CustomDeviceInformation.CustomAttributes.flags.modify(uint64_t a1))(uint64_t result)
{
  unsigned __int8 *v1;

  *(_QWORD *)a1 = v1;
  *(_DWORD *)(a1 + 8) = *v1;
  return sub_1001C111C;
}

uint64_t sub_1001C111C(uint64_t result)
{
  **(_BYTE **)result = *(_DWORD *)(result + 8);
  return result;
}

uint64_t NANAttribute.CustomDeviceInformation.CustomAttributes.datapathSubscribeID.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 1) | (*(unsigned __int8 *)(v0 + 2) << 8);
}

uint64_t NANAttribute.CustomDeviceInformation.CustomAttributes.datapathSubscribeID.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 1) = result;
  *(_BYTE *)(v1 + 2) = BYTE1(result) & 1;
  return result;
}

uint64_t NANAttribute.CustomDeviceInformation.CustomAttributes.publicKey.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
  return sub_100033B48(v1 + *(int *)(v3 + 24), a1, (uint64_t *)&unk_10040D200);
}

uint64_t NANAttribute.CustomDeviceInformation.CustomAttributes.publicKey.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
  return sub_10006298C(a1, v1 + *(int *)(v3 + 24), (uint64_t *)&unk_10040D200);
}

uint64_t (*NANAttribute.CustomDeviceInformation.CustomAttributes.publicKey.modify())(_QWORD)
{
  type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t NANAttribute.CustomDeviceInformation.CustomAttributes.publisherAuthenticationToken.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + *(int *)(type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0) + 28);
  v2 = *(_QWORD *)v1;
  sub_1000339F4(*(_QWORD *)v1, *(_QWORD *)(v1 + 8));
  return v2;
}

uint64_t NANAttribute.CustomDeviceInformation.CustomAttributes.publisherAuthenticationToken.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t result;

  v5 = v2 + *(int *)(type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0) + 28);
  result = sub_10000E658(*(_QWORD *)v5, *(_QWORD *)(v5 + 8));
  *(_QWORD *)v5 = a1;
  *(_QWORD *)(v5 + 8) = a2;
  return result;
}

uint64_t (*NANAttribute.CustomDeviceInformation.CustomAttributes.publisherAuthenticationToken.modify())(_QWORD)
{
  type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t NANAttribute.CustomDeviceInformation.CustomAttributes.encryptedSignature.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + *(int *)(type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0) + 32);
  v2 = *(_QWORD *)v1;
  sub_1000339F4(*(_QWORD *)v1, *(_QWORD *)(v1 + 8));
  return v2;
}

uint64_t NANAttribute.CustomDeviceInformation.CustomAttributes.encryptedSignature.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t result;

  v5 = v2 + *(int *)(type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0) + 32);
  result = sub_10000E658(*(_QWORD *)v5, *(_QWORD *)(v5 + 8));
  *(_QWORD *)v5 = a1;
  *(_QWORD *)(v5 + 8) = a2;
  return result;
}

uint64_t (*NANAttribute.CustomDeviceInformation.CustomAttributes.encryptedSignature.modify())(_QWORD)
{
  type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t NANAttribute.CustomDeviceInformation.CustomAttributes.encryptedExtraServiceSpecificInfo.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + *(int *)(type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0) + 36);
  v2 = *(_QWORD *)v1;
  sub_1000339F4(*(_QWORD *)v1, *(_QWORD *)(v1 + 8));
  return v2;
}

uint64_t NANAttribute.CustomDeviceInformation.CustomAttributes.encryptedExtraServiceSpecificInfo.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t result;

  v5 = v2 + *(int *)(type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0) + 36);
  result = sub_10000E658(*(_QWORD *)v5, *(_QWORD *)(v5 + 8));
  *(_QWORD *)v5 = a1;
  *(_QWORD *)(v5 + 8) = a2;
  return result;
}

uint64_t (*NANAttribute.CustomDeviceInformation.CustomAttributes.encryptedExtraServiceSpecificInfo.modify())(_QWORD)
{
  type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t NANAttribute.CustomDeviceInformation.CustomAttributes.keepAliveUUID.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
  return sub_100033B48(v1 + *(int *)(v3 + 40), a1, &qword_10040E1F0);
}

uint64_t NANAttribute.CustomDeviceInformation.CustomAttributes.keepAliveUUID.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
  return sub_10006298C(a1, v1 + *(int *)(v3 + 40), &qword_10040E1F0);
}

uint64_t (*NANAttribute.CustomDeviceInformation.CustomAttributes.keepAliveUUID.modify())(_QWORD)
{
  type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t NANAttribute.CustomDeviceInformation.CustomAttributes.keepAliveDatapathIdentifiers.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + *(int *)(v1 + 44)));
}

void NANAttribute.CustomDeviceInformation.CustomAttributes.keepAliveDatapathIdentifiers.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(int *)(type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0) + 44);
  swift_bridgeObjectRelease(*(_QWORD *)(v1 + v3));
  *(_QWORD *)(v1 + v3) = a1;
}

uint64_t (*NANAttribute.CustomDeviceInformation.CustomAttributes.keepAliveDatapathIdentifiers.modify())(_QWORD)
{
  type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t NANAttribute.CustomDeviceInformation.CustomAttributes.internetSharingStatistics.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
  return sub_100033B48(v1 + *(int *)(v3 + 48), a1, (uint64_t *)&unk_10040DAB0);
}

uint64_t NANAttribute.CustomDeviceInformation.CustomAttributes.internetSharingStatistics.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
  return sub_10006298C(a1, v1 + *(int *)(v3 + 48), (uint64_t *)&unk_10040DAB0);
}

uint64_t (*NANAttribute.CustomDeviceInformation.CustomAttributes.internetSharingStatistics.modify())(_QWORD)
{
  type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t NANAttribute.CustomDeviceInformation.CustomAttributes.multicastLinkConditionResponse.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0
                   + *(int *)(type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0) + 52));
}

uint64_t NANAttribute.CustomDeviceInformation.CustomAttributes.multicastLinkConditionResponse.setter(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v10;

  result = type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
  v10 = v4 + *(int *)(result + 52);
  *(_QWORD *)v10 = a1;
  *(_QWORD *)(v10 + 8) = a2;
  *(_QWORD *)(v10 + 16) = a3;
  *(_BYTE *)(v10 + 24) = a4 & 1;
  return result;
}

uint64_t (*NANAttribute.CustomDeviceInformation.CustomAttributes.multicastLinkConditionResponse.modify())(_QWORD)
{
  type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t NANAttribute.CustomDeviceInformation.CustomAttributes.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  void (*v24)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t result;
  unint64_t v36;
  unint64_t *v37;
  char *v38;
  uint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD *v47;
  char *v48;
  unint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  char *v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  _QWORD v70[3];
  int v71;
  uint64_t v72;
  char *v73;
  void (*v74)(char *, uint64_t, uint64_t, uint64_t);
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void (*v79)(void);
  char *v80;
  char *v81;
  char *v82;
  char *v83;
  char *v84;
  uint64_t v85;
  void (*v86)(char *, uint64_t, uint64_t, uint64_t);
  char *v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  char *v97;
  unint64_t v98;
  char *v99;
  uint64_t *v100;
  uint64_t v101;
  char *v102;
  _QWORD *v103;
  uint64_t v104;
  _QWORD v105[3];
  uint64_t v106;
  uint64_t v107;

  v103 = a1;
  v78 = a2;
  v2 = type metadata accessor for DispatchTimeInterval(0);
  v93 = *(_QWORD *)(v2 - 8);
  v94 = v2;
  __chkstk_darwin();
  v92 = (char *)v70 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for NANInternetSharingStatistics.Requester(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin();
  v99 = (char *)v70 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v84 = (char *)v70 - v7;
  sub_100012C44((uint64_t *)&unk_10040DAB0);
  __chkstk_darwin();
  v83 = (char *)v70 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012C44(&qword_10040E1F0);
  __chkstk_darwin();
  v88 = (char *)v70 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for P256.KeyAgreement.PublicKey(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin();
  v89 = (char *)v70 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v82 = (char *)v70 - v13;
  sub_100012C44((uint64_t *)&unk_10040D200);
  __chkstk_darwin();
  v81 = (char *)v70 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = (int *)type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
  v16 = __chkstk_darwin();
  v18 = (char *)v70 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_WORD *)v18 = 0;
  v18[2] = 1;
  v19 = &v18[*(int *)(v16 + 24)];
  v90 = v11;
  v91 = v10;
  v79 = *(void (**)(void))(v11 + 56);
  v80 = v19;
  v79();
  v95 = &v18[v15[7]];
  *(_OWORD *)v95 = xmmword_10033C6E0;
  v100 = (uint64_t *)&v18[v15[8]];
  *(_OWORD *)v100 = xmmword_10033C6E0;
  v97 = &v18[v15[9]];
  *(_OWORD *)v97 = xmmword_10033C6E0;
  v20 = &v18[v15[10]];
  v21 = type metadata accessor for UUID(0);
  v86 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56);
  v87 = v20;
  v86(v20, 1, 1, v21);
  v22 = v15[11];
  *(_QWORD *)&v18[v22] = _swiftEmptyArrayStorage;
  v23 = &v18[v15[12]];
  v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v85 = v4;
  v24(v23, 1, 1, v4);
  v25 = v15[13];
  v102 = v18;
  v26 = &v18[v25];
  *(_QWORD *)v26 = 0;
  *((_QWORD *)v26 + 1) = 0;
  *((_QWORD *)v26 + 2) = 0;
  v26[24] = 1;
  v27 = v103[3];
  v28 = v103[4];
  sub_10003259C(v103, v27);
  v29 = v101;
  dispatch thunk of Decoder.unkeyedContainer()(v105, v27, v28);
  if (v29)
  {
    v34 = (uint64_t)v102;
    sub_100014430(v103);
    return sub_100063824(v34, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
  }
  else
  {
    v73 = v26;
    v74 = v24;
    v75 = v23;
    v76 = v21;
    v77 = v22;
    v30 = sub_100012C44(&qword_100406230);
    v31 = v106;
    v32 = v107;
    sub_100034C68((uint64_t)v105, v106);
    v33 = sub_10007B978();
    dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)(v30, v30, v33, v31, v32);
    v101 = 0;
    v36 = *(_QWORD *)(v104 + 16);
    v72 = v104;
    if (v36)
    {
      v71 = enum case for DispatchTimeInterval.seconds(_:);
      v37 = (unint64_t *)(v104 + 48);
      v70[2] = &type metadata for Any[8];
      v38 = v99;
      v39 = v100;
      do
      {
        v41 = *(v37 - 1);
        v40 = *v37;
        switch(*((_BYTE *)v37 - 16))
        {
          case 0:
            v42 = type metadata accessor for BinaryDecoder();
            v43 = (_QWORD *)swift_allocObject(v42, 48, 7);
            v43[5] = &_swiftEmptyDictionarySingleton;
            v96 = v41;
            v43[2] = v41;
            v43[3] = v40;
            __asm { BR              X9 }
            return result;
          case 1:
            v44 = type metadata accessor for BinaryDecoder();
            v45 = (_QWORD *)swift_allocObject(v44, 48, 7);
            v45[5] = &_swiftEmptyDictionarySingleton;
            v96 = v41;
            v45[2] = v41;
            v45[3] = v40;
            v98 = v40;
            __asm { BR              X9 }
            return result;
          case 2:
            sub_100031FEC(*(v37 - 1), *v37);
            sub_100031FEC(v41, v40);
            sub_10001F11C((uint64_t)_swiftEmptyArrayStorage);
            v46 = type metadata accessor for BinaryDecoder();
            v47 = (_QWORD *)swift_allocObject(v46, 48, 7);
            v47[5] = &_swiftEmptyDictionarySingleton;
            v47[2] = v41;
            v47[3] = v40;
            v98 = v40;
            __asm { BR              X9 }
            return result;
          case 3:
            v98 = v36;
            v48 = v38;
            v49 = v40;
            v50 = (uint64_t *)v95;
            v51 = *(_QWORD *)v95;
            v52 = *((_QWORD *)v95 + 1);
            sub_100031FEC(v41, v49);
            sub_10000E658(v51, v52);
            *v50 = v41;
            v50[1] = v49;
            v38 = v48;
            v36 = v98;
            break;
          case 4:
            v53 = v36;
            v54 = v38;
            v55 = *v37;
            v56 = *v39;
            v57 = v39[1];
            sub_100031FEC(*(v37 - 1), *v37);
            sub_10000E658(v56, v57);
            *v39 = v41;
            v39[1] = v55;
            goto LABEL_14;
          case 5:
            v53 = v36;
            v54 = v38;
            v58 = *v37;
            v59 = *(_QWORD *)v97;
            v60 = *((_QWORD *)v97 + 1);
            sub_100031FEC(*(v37 - 1), *v37);
            v61 = v59;
            v62 = (uint64_t *)v97;
            sub_10000E658(v61, v60);
            *v62 = v41;
            v62[1] = v58;
LABEL_14:
            v38 = v54;
            v36 = v53;
            break;
          case 6:
            v98 = *v37;
            __asm { BR              X8 }
            return result;
          case 7:
            sub_100031FEC(*(v37 - 1), *v37);
            sub_100031FEC(v41, v40);
            sub_100031FEC(v41, v40);
            sub_10001F11C((uint64_t)_swiftEmptyArrayStorage);
            v63 = type metadata accessor for BinaryDecoder();
            v64 = (_QWORD *)swift_allocObject(v63, 48, 7);
            v64[5] = &_swiftEmptyDictionarySingleton;
            v64[2] = v41;
            v64[3] = v40;
            __asm { BR              X9 }
            return result;
          case 8:
            sub_100031FEC(*(v37 - 1), *v37);
            sub_100031FEC(v41, v40);
            sub_10001F11C((uint64_t)_swiftEmptyArrayStorage);
            v65 = type metadata accessor for BinaryDecoder();
            v66 = (_QWORD *)swift_allocObject(v65, 48, 7);
            v66[5] = &_swiftEmptyDictionarySingleton;
            v66[2] = v41;
            v66[3] = v40;
            v98 = v40;
            __asm { BR              X9 }
            return result;
          case 9:
            sub_100031FEC(*(v37 - 1), *v37);
            sub_100031FEC(v41, v40);
            sub_10001F11C((uint64_t)_swiftEmptyArrayStorage);
            v67 = type metadata accessor for BinaryDecoder();
            v68 = (_QWORD *)swift_allocObject(v67, 48, 7);
            v68[5] = &_swiftEmptyDictionarySingleton;
            v68[2] = v41;
            v68[3] = v40;
            v98 = v40;
            __asm { BR              X9 }
            return result;
          default:
            break;
        }
        v37 += 3;
        --v36;
      }
      while (v36);
    }
    swift_bridgeObjectRelease(v72);
    sub_100014430(v105);
    v69 = (uint64_t)v102;
    sub_1000637E0((uint64_t)v102, v78, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
    sub_100014430(v103);
    return sub_100063824(v69, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
  }
}

uint64_t NANAttribute.CustomDeviceInformation.CustomAttributes.encode(to:)(_QWORD *a1)
{
  unsigned __int8 *v1;
  uint64_t v2;
  unsigned __int8 *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned __int8 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int *v27;
  int *v28;
  uint64_t v29;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  __int16 v42;
  char v43;
  char v44;
  char v45;
  char v46;
  char v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  ValueMetadata *v53;
  uint64_t *v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unsigned __int8 *v58;
  double v59;
  double v60;
  double v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  unint64_t v65;
  ValueMetadata *v66;
  unint64_t v67;
  ValueMetadata *v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  ValueMetadata *v75;
  unint64_t v76;
  ValueMetadata *v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  unsigned __int8 *v93;
  int *v94;
  char v95[24];
  uint64_t v96;
  __int16 v97;
  char v98;
  char v99;
  char v100;
  char v101;
  char v102;
  char v103;
  uint64_t v104;
  ValueMetadata *v105;
  unint64_t v106;
  char v107[24];
  _QWORD v108[2];

  v3 = v1;
  sub_100012C44((uint64_t *)&unk_10040DAB0);
  __chkstk_darwin();
  v84 = (uint64_t)&v82 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v86 = type metadata accessor for NANInternetSharingStatistics.Requester(0);
  v83 = *(_QWORD *)(v86 - 8);
  __chkstk_darwin();
  v85 = (uint64_t)&v82 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012C44(&qword_10040E1F0);
  __chkstk_darwin();
  v89 = (uint64_t)&v82 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for UUID(0);
  v90 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin();
  v87 = (char *)&v82 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v88 = (char *)&v82 - v10;
  sub_100012C44((uint64_t *)&unk_10040D200);
  __chkstk_darwin();
  v12 = (char *)&v82 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for P256.KeyAgreement.PublicKey(0);
  v94 = *(int **)(v13 - 8);
  __chkstk_darwin();
  v92 = (char *)&v82 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = a1[3];
  v16 = a1[4];
  sub_10003259C(a1, v15);
  dispatch thunk of Encoder.unkeyedContainer()(v108, v15, v16);
  v17 = *v3;
  v93 = v3;
  v91 = v8;
  if (v17)
  {
    v18 = sub_100012C44(&qword_100403E88);
    v19 = swift_allocObject(v18, 33, 7);
    *(_OWORD *)(v19 + 16) = xmmword_10033A110;
    *(_BYTE *)(v19 + 32) = v17;
    sub_1001068EC(v19);
    v21 = v20;
    swift_bridgeObjectRelease(v19);
    __asm { BR              X10 }
  }
  if ((v3[2] & 1) == 0)
  {
    v22 = v3[1];
    v23 = sub_100012C44(&qword_100403E88);
    v24 = swift_allocObject(v23, 33, 7);
    *(_OWORD *)(v24 + 16) = xmmword_10033A110;
    *(_BYTE *)(v24 + 32) = v22;
    sub_1001068EC(v24);
    v26 = v25;
    swift_bridgeObjectRelease(v24);
    __asm { BR              X10 }
  }
  v27 = v94;
  v28 = (int *)type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
  sub_100033B48((uint64_t)&v3[v28[6]], (uint64_t)v12, (uint64_t *)&unk_10040D200);
  if ((*((unsigned int (**)(char *, uint64_t, uint64_t))v27 + 6))(v12, 1, v13) != 1)
  {
    v29 = (*((uint64_t (**)(char *, char *, uint64_t))v27 + 4))(v92, v12, v13);
    P256.KeyAgreement.PublicKey.rawRepresentation.getter(v29);
    __asm { BR              X10 }
  }
  sub_100033A84((uint64_t)v12, (uint64_t *)&unk_10040D200);
  v31 = *(_QWORD *)&v3[v28[7] + 8];
  if (v31 >> 60 != 15)
    __asm { BR              X10 }
  v32 = *(_QWORD *)&v3[v28[8] + 8];
  if (v32 >> 60 != 15)
    __asm { BR              X10 }
  v33 = *(_QWORD *)&v3[v28[9] + 8];
  if (v33 >> 60 != 15)
    __asm { BR              X10 }
  v35 = v89;
  sub_100033B48((uint64_t)&v3[v28[10]], v89, &qword_10040E1F0);
  v36 = v90;
  v37 = v91;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v90 + 48))(v35, 1, v91) != 1)
  {
    v39 = v88;
    (*(void (**)(char *, uint64_t, uint64_t))(v36 + 32))(v88, v35, v37);
    v40 = v87;
    v41 = (*(uint64_t (**)(char *, char *, uint64_t))(v36 + 16))(v87, v39, v37);
    v96 = UUID.uuid.getter(v41);
    v97 = v42;
    v98 = v43;
    v99 = v44;
    v100 = v45;
    v101 = v46;
    v102 = v47;
    v103 = v48;
    sub_1000FADC0((uint64_t)&v96, (uint64_t)&v104);
    v50 = v49;
    (*(void (**)(char *, uint64_t))(v36 + 8))(v40, v37);
    __asm { BR              X10 }
  }
  v94 = v28;
  v38 = v2;
  sub_100033A84(v35, &qword_10040E1F0);
  v51 = *(_QWORD *)&v3[v94[11]];
  if (*(_QWORD *)(v51 + 16))
  {
    swift_bridgeObjectRetain(*(_QWORD *)&v3[v94[11]]);
    v52 = sub_10001F11C((uint64_t)_swiftEmptyArrayStorage);
    v53 = (ValueMetadata *)type metadata accessor for BinaryEncoder();
    v54 = (uint64_t *)swift_allocObject(v53, 40, 7);
    *((_OWORD *)v54 + 1) = xmmword_10033A100;
    v54[4] = v52;
    v105 = v53;
    v106 = sub_100011DE4((unint64_t *)&qword_100406278, (uint64_t (*)(uint64_t))type metadata accessor for BinaryEncoder, (uint64_t)&protocol conformance descriptor for BinaryEncoder);
    v96 = (uint64_t)v54;
    v55 = sub_1001DCC6C();
    swift_bridgeObjectRetain(v51);
    swift_retain(v54);
    Array<A>.encode(to:)(&v96, v51, &type metadata for NANPeerServiceIdentifier, v55);
    if (!v38)
    {
      sub_100014430(&v96);
      swift_bridgeObjectRelease(v51);
      swift_beginAccess(v54 + 2, v107, 0, 0);
      v56 = v54[3];
      sub_100031FEC(v54[2], v56);
      swift_bridgeObjectRelease(v51);
      swift_release(v54);
      __asm { BR              X9 }
    }
    sub_100014430(&v96);
    swift_release(v54);
    swift_bridgeObjectRelease_n(v51, 2);
    return sub_100014430(v108);
  }
  v57 = v84;
  sub_100033B48((uint64_t)&v3[v94[12]], v84, (uint64_t *)&unk_10040DAB0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v83 + 48))(v57, 1, v86) == 1)
  {
    sub_100033A84(v57, (uint64_t *)&unk_10040DAB0);
    v58 = &v3[v94[13]];
    if ((v58[24] & 1) == 0)
    {
      v60 = *((double *)v58 + 1);
      v59 = *((double *)v58 + 2);
      v61 = *(double *)v58;
      v62 = sub_10001F11C((uint64_t)_swiftEmptyArrayStorage);
      v63 = type metadata accessor for BinaryEncoder();
      v64 = (uint64_t *)swift_allocObject(v63, 40, 7);
      *((_OWORD *)v64 + 1) = xmmword_10033A100;
      v64[4] = v62;
      v105 = &type metadata for BinaryEncoder.UnkeyedContainer;
      v65 = sub_100079B58();
      v106 = v65;
      v96 = (uint64_t)v64;
      sub_100034C68((uint64_t)&v96, (uint64_t)&type metadata for BinaryEncoder.UnkeyedContainer);
      swift_retain(v64);
      dispatch thunk of UnkeyedEncodingContainer.encode(_:)(&type metadata for BinaryEncoder.UnkeyedContainer, v65, v61);
      if (!v2)
      {
        v66 = v105;
        v67 = v106;
        sub_100034C68((uint64_t)&v96, (uint64_t)v105);
        dispatch thunk of UnkeyedEncodingContainer.encode(_:)(v66, v67, v60);
        v68 = v105;
        v69 = v106;
        sub_100034C68((uint64_t)&v96, (uint64_t)v105);
        dispatch thunk of UnkeyedEncodingContainer.encode(_:)(v68, v69, v59);
        sub_100014430(&v96);
        swift_beginAccess(v64 + 2, &v96, 0, 0);
        v81 = v64[3];
        sub_100031FEC(v64[2], v81);
        swift_release(v64);
        __asm { BR              X9 }
      }
      sub_100014430(&v96);
      swift_release(v64);
    }
    return sub_100014430(v108);
  }
  sub_100033AC0(v57, v85, type metadata accessor for NANInternetSharingStatistics.Requester);
  v70 = sub_10001F11C((uint64_t)_swiftEmptyArrayStorage);
  v71 = type metadata accessor for BinaryEncoder();
  v72 = (uint64_t *)swift_allocObject(v71, 40, 7);
  *((_OWORD *)v72 + 1) = xmmword_10033A100;
  v72[4] = v70;
  v105 = &type metadata for BinaryEncoder.UnkeyedContainer;
  v106 = sub_100079B58();
  v96 = (uint64_t)v72;
  swift_retain(v72);
  v73 = DispatchTimeInterval.rawSeconds.getter();
  if (v73 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_33;
  }
  v74 = v73;
  if (v73 > 0x7FFFFFFF)
  {
LABEL_33:
    __break(1u);
    JUMPOUT(0x1001C43A4);
  }
  v75 = v105;
  v76 = v106;
  sub_100034C68((uint64_t)&v96, (uint64_t)v105);
  dispatch thunk of UnkeyedEncodingContainer.encode(_:)(v74, v75, v76);
  if (!v2)
  {
    v77 = v105;
    v78 = v106;
    v79 = *(unsigned __int8 *)(v85 + *(int *)(v86 + 20));
    sub_100034C68((uint64_t)&v96, (uint64_t)v105);
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)(v79, v77, v78);
    sub_100014430(&v96);
    swift_beginAccess(v72 + 2, v95, 0, 0);
    v80 = v72[3];
    sub_100031FEC(v72[2], v80);
    swift_release(v72);
    __asm { BR              X9 }
  }
  sub_100014430(&v96);
  swift_release(v72);
  sub_100063824(v85, type metadata accessor for NANInternetSharingStatistics.Requester);
  return sub_100014430(v108);
}

uint64_t NANAttribute.CustomDeviceInformation.CustomAttributes.customMirror.getter@<X0>(uint64_t a1@<X8>)
{
  unsigned __int8 *v1;
  unsigned __int8 *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  int *v15;
  uint64_t v16;
  uint64_t (*v17)(_QWORD);
  ValueMetadata *v18;
  unint64_t v19;
  uint64_t v20;
  unsigned __int8 v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  int32x2_t v34;
  int64x2_t v35;
  _QWORD *v36;
  unint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  unsigned __int8 *v40;
  uint64_t v41;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  uint64_t i;
  unint64_t v78;
  unint64_t v79;
  _OWORD *v80;
  __int128 v81;
  __int128 v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  char *v92;
  uint64_t v93;
  unint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  int *v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  _OWORD v111[3];
  _QWORD v112[8];
  __int128 v113;
  _QWORD v114[4];
  unint64_t v115;
  unint64_t v116;
  int8x16_t v117;
  _BYTE v118[16];
  __int128 v119;
  _QWORD v120[2];
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  ValueMetadata *v124;
  unint64_t v125;
  unint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  _QWORD *v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  _QWORD *v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  unint64_t v139;
  unint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;

  v2 = v1;
  v106 = a1;
  v104 = type metadata accessor for Mirror.AncestorRepresentation(0);
  v102 = *(_QWORD *)(v104 - 8);
  __chkstk_darwin();
  v105 = (char *)&v92 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012C44((uint64_t *)&unk_1004085C0);
  __chkstk_darwin();
  v103 = (char *)&v92 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for NANInternetSharingStatistics.Requester(0);
  v99 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin();
  v93 = (uint64_t)&v92 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012C44((uint64_t *)&unk_10040DAB0);
  __chkstk_darwin();
  v8 = (char *)&v92 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v97 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v97 - 8);
  __chkstk_darwin();
  v92 = (char *)&v92 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012C44(&qword_10040E1F0);
  __chkstk_darwin();
  v12 = (char *)&v92 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012C44((uint64_t *)&unk_10040D200);
  __chkstk_darwin();
  v14 = (char *)&v92 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = (int *)type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
  __chkstk_darwin();
  v101 = (uint64_t)&v92 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000637E0((uint64_t)v2, v101, v17);
  v119 = xmmword_10033B190;
  if (*v2)
  {
    LODWORD(v121) = *v2;
    v18 = &type metadata for NANAttribute.CustomDeviceInformation.Flags;
    v19 = 0xE500000000000000;
    v20 = 0x7367616C66;
  }
  else
  {
    v20 = 0;
    v19 = 0;
    v18 = 0;
    v121 = 0;
    v122 = 0;
    v123 = 0;
  }
  v120[0] = v20;
  v120[1] = v19;
  v124 = v18;
  v21 = v2[2];
  v100 = v5;
  v98 = v8;
  v95 = v12;
  if ((v21 & 1) != 0)
  {
    v22 = 0;
    v23 = 0;
    v24 = 0;
    v127 = 0;
    v128 = 0;
    v129 = 0;
  }
  else
  {
    LOBYTE(v127) = v2[1];
    v23 = 0x8000000100367820;
    v24 = &type metadata for UInt8;
    v22 = 0xD000000000000013;
  }
  v96 = v9;
  v125 = v22;
  v126 = v23;
  v130 = v24;
  v131 = 0x7974697275636573;
  v132 = 0xE800000000000000;
  v113 = xmmword_10033F040;
  sub_100033B48((uint64_t)&v2[v15[6]], (uint64_t)v14, (uint64_t *)&unk_10040D200);
  v25 = type metadata accessor for P256.KeyAgreement.PublicKey(0);
  v26 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 48))(v14, 1, v25);
  v27 = 0;
  v28 = 0;
  if (v26 != 1)
  {
    sub_100033A84((uint64_t)v14, (uint64_t *)&unk_10040D200);
    v28 = 0xEE0079654B204557;
    v27 = 0x4F2063696C627550;
  }
  v114[0] = v27;
  v114[1] = v28;
  v29 = *(_QWORD *)&v2[v15[7] + 8] >> 60;
  if (v29 == 15)
    v30 = 0;
  else
    v30 = 0xD000000000000014;
  v94 = (unint64_t)"Encrypted Signature";
  v31 = 0x8000000100367800;
  if (v29 > 0xE)
    v31 = 0;
  v114[2] = v30;
  v114[3] = v31;
  if (*(_QWORD *)&v2[v15[8] + 8] >> 60 == 15)
    v32 = 0;
  else
    v32 = 0xD000000000000013;
  if (*(_QWORD *)&v2[v15[8] + 8] >> 60 == 15)
    v33 = 0;
  else
    v33 = 0x80000001003677E0;
  v115 = v32;
  v116 = v33;
  v34 = vdup_n_s32(*(_QWORD *)&v2[v15[9] + 8] >> 60 == 15);
  v35.i64[0] = v34.u32[0];
  v35.i64[1] = v34.u32[1];
  v117 = vandq_s8((int8x16_t)vcgezq_s64(vshlq_n_s64(v35, 0x3FuLL)), (int8x16_t)xmmword_10035BCB0);
  v107 = v15;
  if (v26 == 1)
  {
    v36 = _swiftEmptyArrayStorage;
  }
  else
  {
    swift_bridgeObjectRetain(v28);
    v36 = sub_1000B192C(0, 1, 1, _swiftEmptyArrayStorage);
    v38 = v36[2];
    v37 = v36[3];
    if (v38 >= v37 >> 1)
      v36 = sub_1000B192C((_QWORD *)(v37 > 1), v38 + 1, 1, v36);
    v36[2] = v38 + 1;
    v39 = &v36[2 * v38];
    v39[4] = v27;
    v39[5] = v28;
    v15 = v107;
  }
  if (v29 > 0xE)
  {
    v40 = v2;
    v41 = v96;
    if (!v33)
      goto LABEL_38;
    goto LABEL_33;
  }
  swift_bridgeObjectRetain(v94 | 0x8000000000000000);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v36);
  v40 = v2;
  v41 = v96;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    v36 = sub_1000B192C(0, v36[2] + 1, 1, v36);
  v44 = v36[2];
  v43 = v36[3];
  if (v44 >= v43 >> 1)
    v36 = sub_1000B192C((_QWORD *)(v43 > 1), v44 + 1, 1, v36);
  v36[2] = v44 + 1;
  v45 = &v36[2 * v44];
  v46 = v94 | 0x8000000000000000;
  v45[4] = 0xD000000000000014;
  v45[5] = v46;
  v32 = v115;
  v33 = v116;
  if (v116)
  {
LABEL_33:
    swift_bridgeObjectRetain(v33);
    if ((swift_isUniquelyReferenced_nonNull_native(v36) & 1) == 0)
      v36 = sub_1000B192C(0, v36[2] + 1, 1, v36);
    v48 = v36[2];
    v47 = v36[3];
    if (v48 >= v47 >> 1)
      v36 = sub_1000B192C((_QWORD *)(v47 > 1), v48 + 1, 1, v36);
    v36[2] = v48 + 1;
    v49 = &v36[2 * v48];
    v49[4] = v32;
    v49[5] = v33;
  }
LABEL_38:
  v50 = v117.i64[1];
  if (v117.i64[1])
  {
    v51 = v117.i64[0];
    swift_bridgeObjectRetain(v117.i64[1]);
    if ((swift_isUniquelyReferenced_nonNull_native(v36) & 1) == 0)
      v36 = sub_1000B192C(0, v36[2] + 1, 1, v36);
    v53 = v36[2];
    v52 = v36[3];
    if (v53 >= v52 >> 1)
      v36 = sub_1000B192C((_QWORD *)(v52 > 1), v53 + 1, 1, v36);
    v36[2] = v53 + 1;
    v54 = &v36[2 * v53];
    v54[4] = v51;
    v54[5] = v50;
  }
  v55 = v113;
  v56 = sub_100012C44(&qword_10040A918);
  swift_arrayDestroy(v114, v55, v56);
  v112[0] = v36;
  v57 = sub_100012C44((uint64_t *)&unk_1004102C0);
  v58 = sub_100011770(&qword_10040FCA0, (uint64_t *)&unk_1004102C0, (const char *)&protocol conformance descriptor for [A]);
  v59 = BidirectionalCollection<>.joined(separator:)(8236, 0xE200000000000000, v57, v58);
  v61 = v60;
  swift_bridgeObjectRelease(v36);
  v135 = &type metadata for String;
  v133 = v59;
  v134 = v61;
  v62 = (uint64_t)v95;
  sub_100033B48((uint64_t)&v40[v15[10]], (uint64_t)v95, &qword_10040E1F0);
  v63 = v97;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v41 + 48))(v62, 1, v97) == 1)
  {
    v137 = 0u;
    v138 = 0u;
    v136 = 0u;
  }
  else
  {
    v64 = v92;
    v65 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v41 + 32))(v92, v62, v63);
    strcpy((char *)&v136, "keepAliveUUID");
    HIWORD(v136) = -4864;
    v66 = UUID.uuidString.getter(v65);
    *((_QWORD *)&v138 + 1) = &type metadata for String;
    *(_QWORD *)&v137 = v66;
    *((_QWORD *)&v137 + 1) = v67;
    (*(void (**)(char *, uint64_t))(v41 + 8))(v64, v63);
  }
  v68 = *(_QWORD *)&v40[v15[11]];
  if (*(_QWORD *)(v68 + 16))
  {
    v139 = 0xD00000000000001CLL;
    v140 = 0x80000001003677A0;
    v69 = sub_100012C44(&qword_10040A908);
    swift_bridgeObjectRetain(v68);
  }
  else
  {
    v68 = 0;
    v69 = 0;
    v139 = 0;
    v140 = 0;
    v143 = 0;
    v142 = 0;
  }
  v141 = v68;
  v144 = v69;
  v70 = (uint64_t)&v40[v15[12]];
  v71 = (uint64_t)v98;
  sub_100033B48(v70, (uint64_t)v98, (uint64_t *)&unk_10040DAB0);
  v72 = v100;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v99 + 48))(v71, 1, v100) == 1)
  {
    v146 = 0u;
    v147 = 0u;
    v145 = 0u;
  }
  else
  {
    v73 = v71;
    v74 = v93;
    sub_100033AC0(v73, v93, type metadata accessor for NANInternetSharingStatistics.Requester);
    *(_QWORD *)&v145 = 0xD000000000000019;
    *((_QWORD *)&v145 + 1) = 0x80000001003677C0;
    *((_QWORD *)&v147 + 1) = v72;
    v75 = sub_100033C24(&v146);
    sub_100033AC0(v74, (uint64_t)v75, type metadata accessor for NANInternetSharingStatistics.Requester);
  }
  v76 = _swiftEmptyArrayStorage;
  for (i = 32; i != 320; i += 48)
  {
    sub_100033B48((uint64_t)&v118[i], (uint64_t)v112, &qword_10040A920);
    sub_100063EB8((uint64_t)v112, (uint64_t)v111, &qword_10040A920);
    if (*((_QWORD *)&v111[0] + 1))
    {
      v108 = v111[0];
      v109 = v111[1];
      v110 = v111[2];
      if ((swift_isUniquelyReferenced_nonNull_native(v76) & 1) == 0)
        v76 = sub_1000B2FB4(0, v76[2] + 1, 1, v76);
      v79 = v76[2];
      v78 = v76[3];
      if (v79 >= v78 >> 1)
        v76 = sub_1000B2FB4((_QWORD *)(v78 > 1), v79 + 1, 1, v76);
      v76[2] = v79 + 1;
      v80 = &v76[6 * v79];
      v81 = v108;
      v82 = v110;
      v80[3] = v109;
      v80[4] = v82;
      v80[2] = v81;
    }
    else
    {
      sub_100033A84((uint64_t)v111, &qword_10040A920);
    }
  }
  v83 = v119;
  v84 = sub_100012C44(&qword_10040A920);
  swift_arrayDestroy(v120, v83, v84);
  v85 = sub_1001AB034((uint64_t)v76);
  swift_bridgeObjectRelease(v76);
  v112[0] = v85;
  v86 = type metadata accessor for Mirror.DisplayStyle(0);
  v87 = v103;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v86 - 8) + 56))(v103, 1, 1, v86);
  v88 = v105;
  (*(void (**)(char *, _QWORD, uint64_t))(v102 + 104))(v105, enum case for Mirror.AncestorRepresentation.generated(_:), v104);
  v89 = sub_100012C44(&qword_100405B90);
  v90 = sub_100011770((unint64_t *)&qword_10040C3E0, &qword_100405B90, (const char *)&protocol conformance descriptor for [A]);
  return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)(v101, v112, v87, v88, v107, v89, v90);
}

void NANAttribute.CustomDeviceInformation.CustomAttributes.hash(into:)(uint64_t a1)
{
  Swift::UInt8 *v1;
  Swift::UInt8 *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  Swift::UInt8 v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  __n128 v23;
  uint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  __n128 v27;
  uint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  __n128 v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  __n128 v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  Swift::UInt8 *v41;
  double v42;
  double v43;
  double v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v2 = v1;
  v4 = type metadata accessor for NANInternetSharingStatistics.Requester(0);
  v49 = *(_QWORD *)(v4 - 8);
  v50 = v4;
  __chkstk_darwin();
  v46 = (uint64_t)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012C44((uint64_t *)&unk_10040DAB0);
  __chkstk_darwin();
  v48 = (uint64_t)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UUID(0);
  v47 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin();
  v45 = (char *)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012C44(&qword_10040E1F0);
  __chkstk_darwin();
  v10 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for P256.KeyAgreement.PublicKey(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin();
  v14 = (char *)&v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012C44((uint64_t *)&unk_10040D200);
  __chkstk_darwin();
  v16 = (char *)&v45 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  Hasher._combine(_:)(*v1);
  if ((v1[2] & 1) != 0)
  {
    v17 = 0;
  }
  else
  {
    v17 = v1[1];
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v17);
  v18 = (int *)type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
  sub_100033B48((uint64_t)&v1[v18[6]], (uint64_t)v16, (uint64_t *)&unk_10040D200);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v16, 1, v11) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v14, v16, v11);
    Hasher._combine(_:)(1u);
    v20 = P256.KeyAgreement.PublicKey.rawRepresentation.getter(v19);
    v22 = v21;
    Data.hash(into:)(a1, v20, v21, v23);
    sub_10000E614(v20, v22);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }
  v24 = (uint64_t *)&v2[v18[7]];
  v25 = v24[1];
  if (v25 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v26 = *v24;
    Hasher._combine(_:)(1u);
    sub_100031FEC(v26, v25);
    Data.hash(into:)(a1, v26, v25, v27);
    sub_10000E658(v26, v25);
  }
  v28 = (uint64_t *)&v2[v18[8]];
  v29 = v28[1];
  if (v29 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v30 = *v28;
    Hasher._combine(_:)(1u);
    sub_100031FEC(v30, v29);
    Data.hash(into:)(a1, v30, v29, v31);
    sub_10000E658(v30, v29);
  }
  v32 = (uint64_t *)&v2[v18[9]];
  v33 = v32[1];
  if (v33 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v34 = *v32;
    Hasher._combine(_:)(1u);
    sub_100031FEC(v34, v33);
    Data.hash(into:)(a1, v34, v33, v35);
    sub_10000E658(v34, v33);
  }
  sub_100033B48((uint64_t)&v2[v18[10]], (uint64_t)v10, &qword_10040E1F0);
  v36 = v47;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v47 + 48))(v10, 1, v7) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v37 = v45;
    (*(void (**)(char *, char *, uint64_t))(v36 + 32))(v45, v10, v7);
    Hasher._combine(_:)(1u);
    v38 = sub_100011DE4(&qword_10040F670, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    dispatch thunk of Hashable.hash(into:)(a1, v7, v38);
    (*(void (**)(char *, uint64_t))(v36 + 8))(v37, v7);
  }
  sub_10008EB54(a1, *(_QWORD *)&v2[v18[11]]);
  v39 = v48;
  sub_100033B48((uint64_t)&v2[v18[12]], v48, (uint64_t *)&unk_10040DAB0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v49 + 48))(v39, 1, v50) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v40 = v46;
    sub_100033AC0(v39, v46, type metadata accessor for NANInternetSharingStatistics.Requester);
    Hasher._combine(_:)(1u);
    NANInternetSharingStatistics.Requester.hash(into:)();
    sub_100063824(v40, type metadata accessor for NANInternetSharingStatistics.Requester);
  }
  v41 = &v2[v18[13]];
  if (v41[24] == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v43 = *((double *)v41 + 1);
    v42 = *((double *)v41 + 2);
    v44 = *(double *)v41;
    Hasher._combine(_:)(1u);
    NANMulticastLinkCondition.hash(into:)(v44, v43, v42);
  }
}

Swift::Int NANAttribute.CustomDeviceInformation.CustomAttributes.hashValue.getter()
{
  return sub_1000DE8A0((void (*)(_QWORD *))NANAttribute.CustomDeviceInformation.CustomAttributes.hash(into:));
}

Swift::Int sub_1001C544C(uint64_t a1, uint64_t a2)
{
  return sub_1000DE8EC(a1, a2, (void (*)(_QWORD *))NANAttribute.CustomDeviceInformation.CustomAttributes.hash(into:));
}

Swift::Int sub_1001C545C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000D72EC(a1, a2, a3, (void (*)(_QWORD *))NANAttribute.CustomDeviceInformation.CustomAttributes.hash(into:));
}

uint64_t sub_1001C5468@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return NANAttribute.CustomDeviceInformation.CustomAttributes.init(from:)(a1, a2);
}

uint64_t sub_1001C547C(_QWORD *a1)
{
  return NANAttribute.CustomDeviceInformation.CustomAttributes.encode(to:)(a1);
}

unint64_t NANAttribute.CustomDeviceInformation.PlatformType.init(from:)(_QWORD *a1)
{
  return sub_1001D6800(a1);
}

uint64_t sub_1001C54B0@<X0>(unsigned __int8 *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = _s7CoreP2P12NANAttributeO23CustomDeviceInformationV12PlatformTypeO8rawValueAGSgs5UInt8V_tcfC_0(*a1);
  *a2 = result;
  return result;
}

unint64_t sub_1001C54D8@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  unint64_t result;

  result = sub_1001D6800(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_1001C5500(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1001EDDF4();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

void *NANAttribute.CustomDeviceInformation.Flags.doesNotSupportSimultaneousDualBand.unsafeMutableAddressor()
{
  return &static NANAttribute.CustomDeviceInformation.Flags.doesNotSupportSimultaneousDualBand;
}

void *NANAttribute.CustomDeviceInformation.Flags.triggeredWatchdogReset.unsafeMutableAddressor()
{
  return &static NANAttribute.CustomDeviceInformation.Flags.triggeredWatchdogReset;
}

void *NANAttribute.CustomDeviceInformation.Flags.linkConditionFeedbackRequest.unsafeMutableAddressor()
{
  return &static NANAttribute.CustomDeviceInformation.Flags.linkConditionFeedbackRequest;
}

uint64_t NANAttribute.CustomDeviceInformation.Flags.description.getter(char a1)
{
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  Swift::String v20;
  Swift::String v21;

  if ((a1 & 1) != 0)
  {
    v2 = sub_1000B192C(0, 1, 1, _swiftEmptyArrayStorage);
    v4 = v2[2];
    v3 = v2[3];
    if (v4 >= v3 >> 1)
      v2 = sub_1000B192C((_QWORD *)(v3 > 1), v4 + 1, 1, v2);
    v2[2] = v4 + 1;
    v5 = (char *)&v2[2 * v4];
    strcpy(v5 + 32, "No SDB Support");
    v5[47] = -18;
  }
  else
  {
    v2 = _swiftEmptyArrayStorage;
  }
  if ((a1 & 2) != 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      v2 = sub_1000B192C(0, v2[2] + 1, 1, v2);
    v7 = v2[2];
    v6 = v2[3];
    if (v7 >= v6 >> 1)
      v2 = sub_1000B192C((_QWORD *)(v6 > 1), v7 + 1, 1, v2);
    v2[2] = v7 + 1;
    v8 = &v2[2 * v7];
    v8[4] = 0xD000000000000018;
    v8[5] = 0x8000000100367890;
    if ((a1 & 4) == 0)
    {
LABEL_8:
      if ((a1 & 8) == 0)
        goto LABEL_25;
      goto LABEL_20;
    }
  }
  else if ((a1 & 4) == 0)
  {
    goto LABEL_8;
  }
  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
    v2 = sub_1000B192C(0, v2[2] + 1, 1, v2);
  v10 = v2[2];
  v9 = v2[3];
  if (v10 >= v9 >> 1)
    v2 = sub_1000B192C((_QWORD *)(v9 > 1), v10 + 1, 1, v2);
  v2[2] = v10 + 1;
  v11 = &v2[2 * v10];
  v11[4] = 0xD000000000000021;
  v11[5] = 0x8000000100367860;
  if ((a1 & 8) != 0)
  {
LABEL_20:
    if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      v2 = sub_1000B192C(0, v2[2] + 1, 1, v2);
    v13 = v2[2];
    v12 = v2[3];
    if (v13 >= v12 >> 1)
      v2 = sub_1000B192C((_QWORD *)(v12 > 1), v13 + 1, 1, v2);
    v2[2] = v13 + 1;
    v14 = &v2[2 * v13];
    v14[4] = 0xD00000000000001FLL;
    v14[5] = 0x8000000100367840;
  }
LABEL_25:
  v15 = sub_100012C44((uint64_t *)&unk_1004102C0);
  v16 = sub_100011770(&qword_10040FCA0, (uint64_t *)&unk_1004102C0, (const char *)&protocol conformance descriptor for [A]);
  v17 = BidirectionalCollection<>.joined(separator:)(8236, 0xE200000000000000, v15, v16);
  v19 = v18;
  swift_bridgeObjectRelease(v2);
  v20._countAndFlagsBits = v17;
  v20._object = v19;
  String.append(_:)(v20);
  swift_bridgeObjectRelease(v19);
  v21._countAndFlagsBits = 93;
  v21._object = (void *)0xE100000000000000;
  String.append(_:)(v21);
  return 91;
}

uint64_t NANAttribute.CustomDeviceInformation.Flags.customMirror.getter(int a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v12;
  int v13;

  v2 = type metadata accessor for Mirror.AncestorRepresentation(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin();
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012C44((uint64_t *)&unk_1004085C0);
  __chkstk_darwin();
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a1;
  v12 = _swiftEmptyArrayStorage;
  v8 = type metadata accessor for Mirror.DisplayStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for Mirror.AncestorRepresentation.generated(_:), v2);
  v9 = sub_100012C44(&qword_100405B90);
  v10 = sub_100011770((unint64_t *)&qword_10040C3E0, &qword_100405B90, (const char *)&protocol conformance descriptor for [A]);
  return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)(&v13, &v12, v7, v5, &type metadata for NANAttribute.CustomDeviceInformation.Flags, v9, v10);
}

uint64_t sub_1001C5998(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1001DFD00();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1001C59F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1001DFD00();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_1001C5A40()
{
  _DWORD *v0;

  return NANAttribute.CustomDeviceInformation.Flags.description.getter(*v0);
}

uint64_t sub_1001C5A48(uint64_t a1)
{
  int *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v13;
  int v14;

  v3 = type metadata accessor for Mirror.AncestorRepresentation(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin();
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012C44((uint64_t *)&unk_1004085C0);
  __chkstk_darwin();
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *v1;
  v13 = _swiftEmptyArrayStorage;
  v9 = type metadata accessor for Mirror.DisplayStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, enum case for Mirror.AncestorRepresentation.generated(_:), v3);
  v10 = sub_100012C44(&qword_100405B90);
  v11 = sub_100011770((unint64_t *)&qword_10040C3E0, &qword_100405B90, (const char *)&protocol conformance descriptor for [A]);
  return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)(&v14, &v13, v8, v6, a1, v10, v11);
}

uint64_t NANAttribute.CustomDeviceInformation.Version.majorVersion.getter(unsigned __int8 a1)
{
  return a1 >> 2;
}

uint64_t NANAttribute.CustomDeviceInformation.Version.minorVersion.getter(char a1)
{
  return a1 & 3;
}

uint64_t static NANAttribute.CustomDeviceInformation.Version.< infix(_:_:)(unsigned __int8 a1, unsigned __int8 a2)
{
  unsigned int v2;
  unsigned int v3;
  _BOOL4 v4;

  v2 = a1 >> 2;
  v3 = a2 >> 2;
  v4 = (a1 & 3u) < (a2 & 3u);
  if (v2 != v3)
    v4 = 0;
  return v2 < v3 || v4;
}

uint64_t NANAttribute.CustomDeviceInformation.Version.description.getter()
{
  Swift::String v0;
  void *object;
  Swift::String v2;
  Swift::String v3;
  void *v4;
  Swift::String v5;

  v0._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt8, &protocol witness table for UInt8);
  object = v0._object;
  String.append(_:)(v0);
  swift_bridgeObjectRelease(object);
  v2._countAndFlagsBits = 46;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt8, &protocol witness table for UInt8);
  v4 = v3._object;
  String.append(_:)(v3);
  swift_bridgeObjectRelease(v4);
  v5._countAndFlagsBits = 93;
  v5._object = (void *)0xE100000000000000;
  String.append(_:)(v5);
  return 0x5B6E6F6973726556;
}

BOOL NANAttribute.CustomDeviceInformation.Version.supportsCustomDeviceInformation.getter(unsigned __int8 a1)
{
  _BOOL4 v1;

  v1 = (a1 & 0xFC) != 4 || (a1 & 3) != 0;
  return a1 >= 4u && v1;
}

uint64_t sub_1001C5CE0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001DCCB0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001C5D08(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001DCCB0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NANAttribute.CustomDeviceInformation.Version.encode(to:)(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v4 = sub_100012C44(&qword_10040A928);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin();
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a1[3];
  v9 = a1[4];
  sub_10003259C(a1, v8);
  v10 = sub_1001DCCB0();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for NANAttribute.CustomDeviceInformation.Version.CodingKeys, &type metadata for NANAttribute.CustomDeviceInformation.Version.CodingKeys, v10, v8, v9);
  KeyedEncodingContainer.encode(_:forKey:)(a2, v11, v4);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

_QWORD *NANAttribute.CustomDeviceInformation.Version.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v3 = sub_100012C44(&qword_10040A938);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin();
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  v9 = sub_10003259C(a1, v7);
  v10 = sub_1001DCCB0();
  v11 = dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for NANAttribute.CustomDeviceInformation.Version.CodingKeys, &type metadata for NANAttribute.CustomDeviceInformation.Version.CodingKeys, v10, v7, v8);
  if (!v1)
  {
    v9 = (_QWORD *)KeyedDecodingContainer.decode(_:forKey:)(v11, v3);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  sub_100014430(a1);
  return v9;
}

uint64_t sub_1001C5F14(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  _BOOL4 v5;

  v2 = *a1;
  v3 = *a2;
  v4 = v2 >> 2;
  v5 = (v2 & 3) < (v3 & 3);
  if (v4 != v3 >> 2)
    v5 = 0;
  return v4 < v3 >> 2 || v5;
}

uint64_t sub_1001C5F48(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  _BOOL4 v6;

  v2 = *a1;
  v3 = *a2;
  v4 = v2 >> 2;
  if (v3 >> 2 < v2 >> 2)
    return 0;
  v6 = (v3 & 3) >= (v2 & 3);
  return v3 >> 2 != v4 || v6;
}

uint64_t sub_1001C5F88(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  _BOOL4 v6;

  v2 = *a1;
  v3 = *a2;
  v4 = v2 >> 2;
  if (v2 >> 2 < v3 >> 2)
    return 0;
  v6 = (v2 & 3) >= (v3 & 3);
  return v4 != v3 >> 2 || v6;
}

uint64_t sub_1001C5FC8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  _BOOL4 v5;

  v2 = *a1;
  v3 = *a2;
  v4 = v2 >> 2;
  v5 = (v3 & 3) < (v2 & 3);
  if (v3 >> 2 != v4)
    v5 = 0;
  return v3 >> 2 < v4 || v5;
}

uint64_t sub_1001C5FFC@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t result;
  uint64_t v15;

  v5 = sub_100012C44(&qword_10040A938);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin();
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10003259C(a1, v9);
  v11 = sub_1001DCCB0();
  v12 = dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for NANAttribute.CustomDeviceInformation.Version.CodingKeys, &type metadata for NANAttribute.CustomDeviceInformation.Version.CodingKeys, v11, v9, v10);
  if (v2)
    return sub_100014430(a1);
  v13 = KeyedDecodingContainer.decode(_:forKey:)(v12, v5);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  result = sub_100014430(a1);
  *a2 = v13;
  return result;
}

uint64_t sub_1001C610C(_QWORD *a1)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v3 = sub_100012C44(&qword_10040A928);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin();
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  v9 = *v1;
  sub_10003259C(a1, v7);
  v10 = sub_1001DCCB0();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for NANAttribute.CustomDeviceInformation.Version.CodingKeys, &type metadata for NANAttribute.CustomDeviceInformation.Version.CodingKeys, v10, v7, v8);
  KeyedEncodingContainer.encode(_:forKey:)(v9, v11, v3);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_1001C61F4()
{
  return NANAttribute.CustomDeviceInformation.Version.description.getter();
}

uint64_t NANAttribute.CustomDeviceInformation.flags.getter()
{
  uint64_t v0;

  return *(unsigned int *)(v0 + 4);
}

uint64_t NANAttribute.CustomDeviceInformation.customAttributes.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for NANAttribute.CustomDeviceInformation(0);
  return sub_1000637E0(v1 + *(int *)(v3 + 28), a1, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
}

uint64_t NANAttribute.CustomDeviceInformation.customAttributes.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for NANAttribute.CustomDeviceInformation(0) + 28);
  return sub_1001DCD08(a1, v3);
}

uint64_t (*NANAttribute.CustomDeviceInformation.customAttributes.modify())(_QWORD)
{
  type metadata accessor for NANAttribute.CustomDeviceInformation(0);
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t NANAttribute.CustomDeviceInformation.init(version:platformType:flags:customAttributes:)@<X0>(char a1@<W0>, char a2@<W1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;

  *(_BYTE *)a5 = a1;
  *(_BYTE *)(a5 + 1) = a2;
  *(_DWORD *)(a5 + 4) = a3;
  v7 = type metadata accessor for NANAttribute.CustomDeviceInformation(0);
  return sub_100033AC0(a4, a5 + *(int *)(v7 + 28), type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
}

void NANAttribute.CustomDeviceInformation.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = v1;
  Hasher._combine(_:)(*(_BYTE *)v2);
  Hasher._combine(_:)(*(_BYTE *)(v2 + 1));
  Hasher._combine(_:)(*(_DWORD *)(v2 + 4));
  type metadata accessor for NANAttribute.CustomDeviceInformation(0);
  NANAttribute.CustomDeviceInformation.CustomAttributes.hash(into:)(a1);
}

uint64_t sub_1001C633C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1001C636C + 4 * byte_100352293[*v0]))(0x6E6F6973726576, 0xE700000000000000);
}

uint64_t sub_1001C636C()
{
  return 0x6D726F6674616C70;
}

uint64_t sub_1001C638C()
{
  return 0x7367616C66;
}

unint64_t sub_1001C63A0()
{
  return 0xD000000000000010;
}

uint64_t sub_1001C63BC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1001EDBEC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1001C63E0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001DCD4C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001C6408(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001DCD4C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NANAttribute.CustomDeviceInformation.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v2;
  char *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  int v20;
  char v21;
  char v22;
  char v23;
  char v24;

  v3 = v1;
  v5 = sub_100012C44(&qword_10040A940);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin();
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10003259C(a1, v9);
  v11 = sub_1001DCD4C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for NANAttribute.CustomDeviceInformation.CodingKeys, &type metadata for NANAttribute.CustomDeviceInformation.CodingKeys, v11, v9, v10);
  v24 = *v3;
  v23 = 0;
  v12 = sub_1001DCD90();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v24, &v23, v5, &type metadata for NANAttribute.CustomDeviceInformation.Version, v12);
  if (!v2)
  {
    v22 = v3[1];
    v21 = 1;
    v13 = sub_1001DCDD4();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v22, &v21, v5, &type metadata for NANAttribute.CustomDeviceInformation.PlatformType, v13);
    v20 = *((_DWORD *)v3 + 1);
    HIBYTE(v19) = 2;
    v14 = sub_1001DCE18();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v20, (char *)&v19 + 7, v5, &type metadata for NANAttribute.CustomDeviceInformation.Flags, v14);
    v15 = &v3[*(int *)(type metadata accessor for NANAttribute.CustomDeviceInformation(0) + 28)];
    BYTE6(v19) = 3;
    v16 = type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
    v17 = sub_100011DE4(&qword_10040A968, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes, (uint64_t)&protocol conformance descriptor for NANAttribute.CustomDeviceInformation.CustomAttributes);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v15, (char *)&v19 + 6, v5, v16, v17);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

Swift::Int NANAttribute.CustomDeviceInformation.hashValue.getter()
{
  uint64_t v0;
  _QWORD v2[9];

  Hasher.init(_seed:)(v2);
  Hasher._combine(_:)(*(_BYTE *)v0);
  Hasher._combine(_:)(*(_BYTE *)(v0 + 1));
  Hasher._combine(_:)(*(_DWORD *)(v0 + 4));
  type metadata accessor for NANAttribute.CustomDeviceInformation(0);
  NANAttribute.CustomDeviceInformation.CustomAttributes.hash(into:)((uint64_t)v2);
  return Hasher._finalize()();
}

uint64_t NANAttribute.CustomDeviceInformation.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char v30;
  char v31;
  uint64_t v32;

  v25 = a2;
  v26 = type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
  __chkstk_darwin();
  v4 = (uint64_t *)((char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v27 = sub_100012C44(&qword_10040A970);
  v5 = *(_QWORD *)(v27 - 8);
  __chkstk_darwin();
  v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for NANAttribute.CustomDeviceInformation(0);
  __chkstk_darwin();
  v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a1[3];
  v12 = a1[4];
  sub_10003259C(a1, v11);
  v13 = sub_1001DCD4C();
  v28 = v7;
  v14 = v29;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for NANAttribute.CustomDeviceInformation.CodingKeys, &type metadata for NANAttribute.CustomDeviceInformation.CodingKeys, v13, v11, v12);
  if (!v14)
  {
    v29 = v8;
    v15 = v5;
    v16 = v26;
    BYTE6(v32) = 0;
    v17 = sub_1001DCE5C();
    v18 = v27;
    KeyedDecodingContainer.decode<A>(_:forKey:)((uint64_t *)((char *)&v32 + 7), &type metadata for NANAttribute.CustomDeviceInformation.Version, (char *)&v32 + 6, v27, &type metadata for NANAttribute.CustomDeviceInformation.Version, v17);
    *v10 = HIBYTE(v32);
    BYTE4(v32) = 1;
    v19 = sub_1001DCEA0();
    KeyedDecodingContainer.decode<A>(_:forKey:)((uint64_t *)((char *)&v32 + 5), &type metadata for NANAttribute.CustomDeviceInformation.PlatformType, (char *)&v32 + 4, v18, &type metadata for NANAttribute.CustomDeviceInformation.PlatformType, v19);
    v10[1] = BYTE5(v32);
    v31 = 2;
    v20 = sub_1001DCEE4();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v32, &type metadata for NANAttribute.CustomDeviceInformation.Flags, &v31, v18, &type metadata for NANAttribute.CustomDeviceInformation.Flags, v20);
    *((_DWORD *)v10 + 1) = v32;
    v30 = 3;
    v22 = sub_100011DE4((unint64_t *)&unk_10040E350, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes, (uint64_t)&protocol conformance descriptor for NANAttribute.CustomDeviceInformation.CustomAttributes);
    v23 = v28;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v4, v16, &v30, v18, v16, v22);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v23, v18);
    v24 = v25;
    sub_100033AC0((uint64_t)v4, (uint64_t)&v10[*(int *)(v29 + 28)], type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
    sub_100033AC0((uint64_t)v10, v24, type metadata accessor for NANAttribute.CustomDeviceInformation);
  }
  return sub_100014430(a1);
}

Swift::Int sub_1001C695C()
{
  uint64_t v0;
  _QWORD v2[9];

  Hasher.init(_seed:)(v2);
  Hasher._combine(_:)(*(_BYTE *)v0);
  Hasher._combine(_:)(*(_BYTE *)(v0 + 1));
  Hasher._combine(_:)(*(_DWORD *)(v0 + 4));
  NANAttribute.CustomDeviceInformation.CustomAttributes.hash(into:)((uint64_t)v2);
  return Hasher._finalize()();
}

void sub_1001C69D4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = v1;
  Hasher._combine(_:)(*(_BYTE *)v2);
  Hasher._combine(_:)(*(_BYTE *)(v2 + 1));
  Hasher._combine(_:)(*(_DWORD *)(v2 + 4));
  NANAttribute.CustomDeviceInformation.CustomAttributes.hash(into:)(a1);
}

Swift::Int sub_1001C6A2C()
{
  uint64_t v0;
  _QWORD v2[9];

  Hasher.init(_seed:)(v2);
  Hasher._combine(_:)(*(_BYTE *)v0);
  Hasher._combine(_:)(*(_BYTE *)(v0 + 1));
  Hasher._combine(_:)(*(_DWORD *)(v0 + 4));
  NANAttribute.CustomDeviceInformation.CustomAttributes.hash(into:)((uint64_t)v2);
  return Hasher._finalize()();
}

uint64_t sub_1001C6AA0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return NANAttribute.CustomDeviceInformation.init(from:)(a1, a2);
}

uint64_t sub_1001C6AB4(_QWORD *a1)
{
  return NANAttribute.CustomDeviceInformation.encode(to:)(a1);
}

uint64_t NANAttribute.AttributeType.customMirror.getter(char a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v14;
  char v15;

  v2 = type metadata accessor for Mirror.AncestorRepresentation(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin();
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012C44((uint64_t *)&unk_1004085C0);
  __chkstk_darwin();
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = a1;
  v14 = _swiftEmptyArrayStorage;
  v8 = enum case for Mirror.DisplayStyle.enum(_:);
  v9 = type metadata accessor for Mirror.DisplayStyle(0);
  v10 = *(_QWORD *)(v9 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 104))(v7, v8, v9);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for Mirror.AncestorRepresentation.generated(_:), v2);
  v11 = sub_100012C44(&qword_100405B90);
  v12 = sub_100011770((unint64_t *)&qword_10040C3E0, &qword_100405B90, (const char *)&protocol conformance descriptor for [A]);
  return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)(&v15, &v14, v7, v5, &type metadata for NANAttribute.AttributeType, v11, v12);
}

uint64_t NANAttribute.AttributeType.rawValue.getter(char a1)
{
  return byte_10035BC32[a1];
}

BOOL sub_1001C6C58(char *a1, char *a2)
{
  return byte_10035BC32[*a1] == byte_10035BC32[*a2];
}

uint64_t sub_1001C6C7C@<X0>(char *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = _s7CoreP2P12NANAttributeO13AttributeTypeO8rawValueAESgs5UInt8V_tcfC_0(*a1);
  *a2 = result;
  return result;
}

void sub_1001C6CA4(_BYTE *a1@<X8>)
{
  char *v1;

  *a1 = byte_10035BC32[*v1];
}

uint64_t sub_1001C6CBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1001EDDB0();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1001C6D18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1001EDDB0();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

Swift::Int sub_1001C6D64()
{
  char *v0;
  uint64_t v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(byte_10035BC32[v1]);
  return Hasher._finalize()();
}

void sub_1001C6DB0()
{
  char *v0;

  Hasher._combine(_:)(byte_10035BC32[*v0]);
}

Swift::Int sub_1001C6DE4()
{
  char *v0;
  uint64_t v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(byte_10035BC32[v1]);
  return Hasher._finalize()();
}

uint64_t sub_1001C6E2C(uint64_t a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v15;
  char v16;

  v3 = type metadata accessor for Mirror.AncestorRepresentation(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin();
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012C44((uint64_t *)&unk_1004085C0);
  __chkstk_darwin();
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *v1;
  v15 = _swiftEmptyArrayStorage;
  v9 = enum case for Mirror.DisplayStyle.enum(_:);
  v10 = type metadata accessor for Mirror.DisplayStyle(0);
  v11 = *(_QWORD *)(v10 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 104))(v8, v9, v10);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, enum case for Mirror.AncestorRepresentation.generated(_:), v3);
  v12 = sub_100012C44(&qword_100405B90);
  v13 = sub_100011770((unint64_t *)&qword_10040C3E0, &qword_100405B90, (const char *)&protocol conformance descriptor for [A]);
  return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)(&v16, &v15, v8, v6, a1, v12, v13);
}

uint64_t NANAttribute.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  _QWORD v63[59];
  _QWORD v64[3];
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;

  v63[48] = a2;
  v63[47] = type metadata accessor for NANAttribute(0);
  __chkstk_darwin();
  v63[7] = (char *)v63 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v63[46] = (char *)v63 - v4;
  __chkstk_darwin();
  v63[25] = (char *)v63 - v5;
  __chkstk_darwin();
  v63[45] = (char *)v63 - v6;
  __chkstk_darwin();
  v63[50] = (char *)v63 - v7;
  __chkstk_darwin();
  v63[44] = (char *)v63 - v8;
  __chkstk_darwin();
  v63[49] = (char *)v63 - v9;
  __chkstk_darwin();
  v63[43] = (char *)v63 - v10;
  __chkstk_darwin();
  v63[23] = (char *)v63 - v11;
  __chkstk_darwin();
  v63[20] = (char *)v63 - v12;
  __chkstk_darwin();
  v63[42] = (char *)v63 - v13;
  __chkstk_darwin();
  v63[41] = (char *)v63 - v14;
  __chkstk_darwin();
  v63[22] = (char *)v63 - v15;
  __chkstk_darwin();
  v63[24] = (char *)v63 - v16;
  __chkstk_darwin();
  v63[19] = (char *)v63 - v17;
  __chkstk_darwin();
  v63[21] = (char *)v63 - v18;
  __chkstk_darwin();
  v63[18] = (char *)v63 - v19;
  __chkstk_darwin();
  v63[6] = (char *)v63 - v20;
  __chkstk_darwin();
  v63[17] = (char *)v63 - v21;
  __chkstk_darwin();
  v63[40] = (char *)v63 - v22;
  __chkstk_darwin();
  v63[39] = (char *)v63 - v23;
  __chkstk_darwin();
  v63[38] = (char *)v63 - v24;
  __chkstk_darwin();
  v63[16] = (char *)v63 - v25;
  __chkstk_darwin();
  v63[37] = (char *)v63 - v26;
  __chkstk_darwin();
  v63[36] = (char *)v63 - v27;
  __chkstk_darwin();
  v63[15] = (char *)v63 - v28;
  __chkstk_darwin();
  v63[14] = (char *)v63 - v29;
  __chkstk_darwin();
  v63[12] = (char *)v63 - v30;
  __chkstk_darwin();
  v63[35] = (char *)v63 - v31;
  __chkstk_darwin();
  v63[34] = (char *)v63 - v32;
  __chkstk_darwin();
  v63[11] = (char *)v63 - v33;
  __chkstk_darwin();
  v63[33] = (char *)v63 - v34;
  __chkstk_darwin();
  v63[13] = (char *)v63 - v35;
  __chkstk_darwin();
  v63[10] = (char *)v63 - v36;
  __chkstk_darwin();
  v63[32] = (char *)v63 - v37;
  __chkstk_darwin();
  v63[31] = (char *)v63 - v38;
  __chkstk_darwin();
  v63[8] = (char *)v63 - v39;
  __chkstk_darwin();
  v63[30] = (char *)v63 - v40;
  __chkstk_darwin();
  v63[29] = (char *)v63 - v41;
  __chkstk_darwin();
  v63[9] = (char *)v63 - v42;
  __chkstk_darwin();
  v63[28] = (char *)v63 - v43;
  __chkstk_darwin();
  v63[26] = (char *)v63 - v44;
  __chkstk_darwin();
  v63[27] = (char *)v63 - v45;
  __chkstk_darwin();
  v47 = (char *)v63 - v46;
  __chkstk_darwin();
  v49 = (char *)v63 - v48;
  __chkstk_darwin();
  v51 = (char *)v63 - v50;
  __chkstk_darwin();
  v53 = (char *)v63 - v52;
  v55 = a1[3];
  v54 = a1[4];
  sub_10003259C(a1, v55);
  v56 = v69;
  dispatch thunk of Decoder.unkeyedContainer()(v64, v55, v54);
  if (!v56)
  {
    v63[2] = v51;
    v63[3] = v47;
    v63[1] = v49;
    v63[4] = v53;
    v69 = a1;
    v57 = sub_100012C44(&qword_100406248);
    v58 = v65;
    v59 = v66;
    sub_100034C68((uint64_t)v64, v65);
    v60 = sub_100011770(&qword_100406240, &qword_100406248, "%@\t");
    dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)(v57, v57, v60, v58, v59);
    v63[0] = 0;
    v63[5] = v68;
    v61 = (char *)&loc_1001C76CC
        + 4
        * word_100352298[_s7CoreP2P12NANAttributeO13AttributeTypeO8rawValueAESgs5UInt8V_tcfC_0(v67)];
    __asm { BR              X10 }
  }
  return sub_100014430(a1);
}

void NANAttribute.encode(to:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  _QWORD v15[6];
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v2 = v1;
  v29 = a1;
  type metadata accessor for NANAttribute.CustomDeviceInformation(0);
  __chkstk_darwin();
  v25 = (char *)v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_100012C44(&qword_10040A678);
  v15[5] = *(_QWORD *)(v24 - 8);
  __chkstk_darwin();
  v23 = (char *)v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_100012C44(&qword_10040A8A8);
  v15[4] = *(_QWORD *)(v22 - 8);
  __chkstk_darwin();
  v21 = (char *)v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_100012C44(&qword_10040A858);
  v15[3] = *(_QWORD *)(v20 - 8);
  __chkstk_darwin();
  v19 = (char *)v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_100012C44(&qword_10040A7E8);
  v15[2] = *(_QWORD *)(v18 - 8);
  __chkstk_darwin();
  v17 = (char *)v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100012C44(&qword_10040A5D0);
  v15[1] = *(_QWORD *)(v16 - 8);
  __chkstk_darwin();
  v8 = sub_100012C44(&qword_10040A4F8);
  v26 = *(_QWORD *)(v8 - 8);
  v27 = v8;
  __chkstk_darwin();
  __chkstk_darwin();
  v9 = type metadata accessor for NANAttribute(0);
  __chkstk_darwin();
  v11 = (char *)v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_10001F11C((uint64_t)_swiftEmptyArrayStorage);
  v31 = type metadata accessor for BinaryEncoder();
  v13 = swift_allocObject(v31, 40, 7);
  *(_OWORD *)(v13 + 16) = xmmword_10033A100;
  v28 = v13 + 16;
  v32 = v13;
  *(_QWORD *)(v13 + 32) = v12;
  v30 = v2;
  sub_1000637E0(v2, (uint64_t)v11, type metadata accessor for NANAttribute);
  v14 = (char *)&loc_1001CBA0C + *((int *)qword_1001CD738 + swift_getEnumCaseMultiPayload(v11, v9));
  __asm { BR              X10 }
}

uint64_t sub_1001CBA1C()
{
  uint64_t v0;
  unsigned __int16 *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;

  v3 = *v1;
  *(_QWORD *)(v0 + 256) = *(_QWORD *)(v0 + 168);
  *(_QWORD *)(v0 + 264) = sub_100011DE4((unint64_t *)&qword_100406278, (uint64_t (*)(uint64_t))type metadata accessor for BinaryEncoder, (uint64_t)protocol conformance descriptor for BinaryEncoder);
  v4 = *(_QWORD *)(v0 + 176);
  *(_QWORD *)(v0 + 232) = v4;
  swift_retain();
  v5 = *(_QWORD *)(v2 - 72);
  NANAttribute.MasterIndication.encode(to:)((_QWORD *)(v0 + 232), v3);
  v6 = (_QWORD *)(v0 + 232);
  if (!v5)
  {
    sub_100014430(v6);
    v8 = *(_QWORD **)(v0 + 152);
    v9 = v8[3];
    v10 = v8[4];
    sub_10003259C(v8, v9);
    dispatch thunk of Encoder.unkeyedContainer()((_QWORD *)(v0 + 232), v9, v10);
    NANAttribute.attributeType.getter();
    *(_BYTE *)(v0 + 208) = v11;
    v12 = *(_QWORD *)(v0 + 256);
    v13 = *(_QWORD *)(v0 + 264);
    sub_100034C68(v0 + 232, v12);
    v14 = sub_1001DCFB0();
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)(v0 + 208, &type metadata for NANAttribute.AttributeType, v14, v12, v13);
    swift_beginAccess(*(_QWORD *)(v0 + 144), v0 + 208, 0, 0);
    __asm { BR              X12 }
  }
  sub_100014430(v6);
  return swift_release(v4);
}

void NANAttribute.attributeType.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t (*v5)(_QWORD);
  char *v6;
  uint64_t v7;

  v1 = v0;
  v2 = type metadata accessor for NANAttribute(0);
  __chkstk_darwin();
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000637E0(v1, (uint64_t)v4, v5);
  v6 = (char *)sub_1001CD880 + 4 * byte_100352466[swift_getEnumCaseMultiPayload(v4, v2)];
  __asm { BR              X10 }
}

uint64_t sub_1001CD880()
{
  uint64_t v0;

  sub_100063824(v0, type metadata accessor for NANAttribute);
  return 45;
}

void NANAttribute.hash(into:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t (*v5)(_QWORD);
  char *v6;
  uint64_t v7;

  v1 = v0;
  type metadata accessor for NANAttribute.CustomDeviceInformation(0);
  __chkstk_darwin();
  v2 = type metadata accessor for NANAttribute(0);
  __chkstk_darwin();
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000637E0(v1, (uint64_t)v4, v5);
  v6 = (char *)sub_1001CDC88 + 4 * word_100352492[swift_getEnumCaseMultiPayload(v4, v2)];
  __asm { BR              X10 }
}

void sub_1001CDC88()
{
  Swift::UInt8 *v0;
  Swift::UInt8 v1;
  Swift::UInt8 v2;

  v1 = *v0;
  v2 = v0[1];
  Hasher._combine(_:)(0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
}

Swift::Int NANAttribute.hashValue.getter()
{
  return sub_1000DE8A0((void (*)(_QWORD *))NANAttribute.hash(into:));
}

Swift::Int sub_1001CEF80(uint64_t a1, uint64_t a2)
{
  return sub_1000DE8EC(a1, a2, (void (*)(_QWORD *))NANAttribute.hash(into:));
}

Swift::Int sub_1001CEF90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000D72EC(a1, a2, a3, (void (*)(_QWORD *))NANAttribute.hash(into:));
}

uint64_t sub_1001CEF9C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return NANAttribute.init(from:)(a1, a2);
}

void sub_1001CEFB0(uint64_t a1)
{
  NANAttribute.encode(to:)(a1);
}

_QWORD *Array<A>.retrieve(allAttributes:)(char a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t (*v16)(uint64_t);
  char v17;
  uint64_t (*v18)(uint64_t);
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;

  v4 = *(_QWORD *)(type metadata accessor for NANAttribute(0) - 8);
  __chkstk_darwin();
  v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v8 = (char *)&v23 - v7;
  v9 = _swiftEmptyArrayStorage;
  v26 = _swiftEmptyArrayStorage;
  v10 = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain(a2);
  if (v10)
  {
    v11 = *(unsigned __int8 *)(v4 + 80);
    v12 = *(_QWORD *)(v4 + 72);
    v23 = a2;
    v25 = (v11 + 32) & ~v11;
    v13 = a2 + v25;
    v14 = a1;
    v15 = _swiftEmptyArrayStorage;
    v16 = type metadata accessor for NANAttribute;
    v24 = a1;
    do
    {
      sub_1000637E0(v13, (uint64_t)v8, v16);
      NANAttribute.attributeType.getter();
      if (byte_10035BC32[v17] == byte_10035BC32[v14])
      {
        v18 = v16;
        sub_100033AC0((uint64_t)v8, (uint64_t)v6, v16);
        if ((swift_isUniquelyReferenced_nonNull_native(v15) & 1) == 0)
          sub_1000751CC(0, v15[2] + 1, 1);
        v15 = v26;
        v20 = v26[2];
        v19 = v26[3];
        if (v20 >= v19 >> 1)
        {
          sub_1000751CC(v19 > 1, v20 + 1, 1);
          v15 = v26;
        }
        v15[2] = v20 + 1;
        v21 = (uint64_t)v15 + v25 + v20 * v12;
        v16 = v18;
        sub_100033AC0((uint64_t)v6, v21, v18);
        v14 = v24;
      }
      else
      {
        sub_100063824((uint64_t)v8, v16);
      }
      v13 += v12;
      --v10;
    }
    while (v10);
    v9 = v26;
    a2 = v23;
  }
  swift_bridgeObjectRelease(a2);
  return v9;
}

void Array<A>.modify(attribute:using:)(char a1, void (*a2)(unint64_t), uint64_t a3)
{
  unint64_t *v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  int v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t i;
  char v16;
  int v17;
  unint64_t v18;
  uint64_t v19;
  void (*v20)(unint64_t);
  unint64_t *v21;
  uint64_t v22;
  uint64_t v23;

  type metadata accessor for NANAttribute(0);
  __chkstk_darwin();
  v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *v3;
  v23 = *(_QWORD *)(*v3 + 16);
  if (v23)
  {
    v19 = a3;
    v20 = a2;
    v21 = v3;
    v22 = v4;
    v12 = byte_10035BC32[a1];
    v13 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
    v14 = *(unint64_t **)(v8 + 72);
    swift_bridgeObjectRetain(v11);
    for (i = 0; ; ++i)
    {
      sub_1000637E0(v11 + v13, (uint64_t)v10, type metadata accessor for NANAttribute);
      NANAttribute.attributeType.getter();
      v17 = byte_10035BC32[v16];
      sub_100063824((uint64_t)v10, type metadata accessor for NANAttribute);
      if (v17 == v12)
        break;
      v18 = i + 1;
      if (__OFADD__(i, 1))
      {
        __break(1u);
LABEL_13:
        v11 = sub_1001A8808(v11);
        if ((i & 0x8000000000000000) != 0)
          goto LABEL_14;
        goto LABEL_9;
      }
      v13 += (unint64_t)v14;
      if (v18 == v23)
      {
        swift_bridgeObjectRelease(v11);
        return;
      }
    }
    swift_bridgeObjectRelease(v11);
    v14 = v21;
    v11 = *v21;
    if ((swift_isUniquelyReferenced_nonNull_native(*v21) & 1) == 0)
      goto LABEL_13;
    if ((i & 0x8000000000000000) != 0)
    {
LABEL_14:
      __break(1u);
      goto LABEL_15;
    }
LABEL_9:
    if (i < *(_QWORD *)(v11 + 16))
    {
      v20(v11 + v13);
      *v14 = v11;
      return;
    }
LABEL_15:
    __break(1u);
  }
}

void sub_1001CF350()
{
  __asm { BR              X9 }
}

uint64_t sub_1001CF384()
{
  uint64_t v0;
  uint64_t *v1;
  unint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!BYTE6(v2))
    goto LABEL_13;
  sub_1000FB764(v0, v2);
  if ((v4 & 0x100) != 0)
  {
LABEL_12:
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v5 = v4;
  if (!v3)
  {
    v7 = BYTE6(v2);
    v6 = 1;
    goto LABEL_9;
  }
  if (v3 == 1)
  {
    v6 = (int)v0 + 1;
    v7 = v0 >> 32;
    goto LABEL_9;
  }
  v8 = *(_QWORD *)(v0 + 16);
  v6 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_12;
  }
  v7 = *(_QWORD *)(v0 + 24);
LABEL_9:
  if (v7 < v6)
  {
LABEL_14:
    __break(1u);
    JUMPOUT(0x1001CF448);
  }
  v9 = Data._Representation.subscript.getter(v6, v7, v0, v2);
  v11 = v10;
  sub_10000E614(v0, v2);
  *v1 = v9;
  v1[1] = v11;
  return v5;
}

CoreP2P::NANAttribute::ServiceDescriptor::Control __swiftcall NANAttribute.ServiceDescriptor.Control.init(type:_:)(CoreP2P::NANAttribute::ServiceDescriptor::Control::ControlType type, CoreP2P::NANAttribute::ServiceDescriptor::Control _)
{
  return (CoreP2P::NANAttribute::ServiceDescriptor::Control)(_.rawValue | type);
}

char *sub_1001CF460(uint64_t a1, int64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v6;
  int64_t v7;
  uint64_t v9;
  uint64_t v10;
  int64_t v11;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v15;
  _QWORD *v16;
  char *result;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  char v24;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v6 = (_QWORD *)*v4;
  v7 = *(_QWORD *)(*v4 + 16);
  if (v7 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v10 = 1 - v9;
  if (__OFSUB__(1, v9))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v11 = v7 + v10;
  if (__OFADD__(v7, v10))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native(*v4);
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v11 > v6[3] >> 1)
  {
    if (v7 <= v11)
      v15 = v7 + v10;
    else
      v15 = v7;
    v6 = sub_1000B192C(isUniquelyReferenced_nonNull_native, v15, 1, v6);
  }
  v16 = &v6[2 * a1 + 4];
  result = (char *)swift_arrayDestroy(v16, v9, &type metadata for String);
  if (!v10)
    goto LABEL_20;
  v18 = v6[2];
  v19 = __OFSUB__(v18, a2);
  v20 = v18 - a2;
  if (v19)
    goto LABEL_26;
  if ((v20 & 0x8000000000000000) == 0)
  {
    result = (char *)(v16 + 2);
    v21 = &v6[2 * a2 + 4];
    if (v16 + 2 != v21 || result >= (char *)&v21[2 * v20])
      result = (char *)memmove(result, v21, 16 * v20);
    v22 = v6[2];
    v19 = __OFADD__(v22, v10);
    v23 = v22 + v10;
    if (!v19)
    {
      v6[2] = v23;
LABEL_20:
      *v16 = a3;
      v16[1] = a4;
      *v4 = v6;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  v24 = 2;
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v24, 1046, 0);
  __break(1u);
  return result;
}

void sub_1001CF5E0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  Swift::UInt8 v5;
  Swift::UInt v9;
  Swift::UInt8 *v10;
  Swift::UInt8 v11;
  Swift::UInt8 v12;
  Swift::UInt8 v13;
  Swift::UInt8 v14;
  Swift::UInt8 v15;
  Swift::UInt8 v16;
  __n128 v17;

  if ((a4 & 0xFFFFFF) >= 0xFF0000)
  {
    v5 = 0;
LABEL_8:
    Hasher._combine(_:)(v5);
    return;
  }
  Hasher._combine(_:)(1u);
  if ((a4 & 0x10000) == 0)
  {
    v9 = *(_QWORD *)(a2 + 16);
    Hasher._combine(_:)(v9);
    if (v9)
    {
      v10 = (Swift::UInt8 *)(a2 + 37);
      do
      {
        v11 = *(v10 - 5);
        v12 = *(v10 - 4);
        v13 = *(v10 - 3);
        v14 = *(v10 - 2);
        v15 = *(v10 - 1);
        v16 = *v10;
        v10 += 6;
        Hasher._combine(_:)(v11);
        Hasher._combine(_:)(v12);
        Hasher._combine(_:)(v13);
        Hasher._combine(_:)(v14);
        Hasher._combine(_:)(v15);
        Hasher._combine(_:)(v16);
        --v9;
      }
      while (v9);
    }
    v5 = a3 & 1;
    goto LABEL_8;
  }
  sub_100031FEC(a2, a3);
  Data.hash(into:)(a1, a2, a3, v17);
  Hasher._combine(_:)(a4);
  Hasher._combine(_:)(BYTE1(a4) & 1);
  sub_100111B98(a2, a3, a4);
}

uint64_t sub_1001CF704(unint64_t a1, unint64_t a2, _QWORD *a3, uint64_t a4)
{
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;
  char v7;
  uint64_t result;

  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (*(_QWORD *)(*(_QWORD *)a4 + 16) <= a2)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v4 = a3;
  v5 = a1;
  v7 = *(_BYTE *)(*(_QWORD *)a4 + a2 + 32);
  v6 = (_QWORD *)*a3;
  result = swift_isUniquelyReferenced_nonNull_native(*a3);
  *v4 = v6;
  if ((result & 1) != 0)
  {
    if ((v5 & 0x8000000000000000) == 0)
      goto LABEL_5;
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
LABEL_9:
  result = (uint64_t)sub_1001A87B8(v6);
  v6 = (_QWORD *)result;
  if ((v5 & 0x8000000000000000) != 0)
    goto LABEL_10;
LABEL_5:
  if (v6[2] > v5)
  {
    *((_BYTE *)v6 + v5 + 32) &= v7;
    *v4 = v6;
    return result;
  }
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1001CF7A0(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  return sub_1001F12F4(a1, a2, a3, *a4);
}

BOOL _s7CoreP2P12NANAttributeO17ServiceDescriptorV23__derived_struct_equalsySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  char v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  _BOOL8 result;
  char v27;
  char v28;
  BOOL v29;

  _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  if ((v4 & 1) == 0
    || *(unsigned __int8 *)(a1 + 16) != *(unsigned __int8 *)(a2 + 16)
    || *(unsigned __int8 *)(a1 + 17) != *(unsigned __int8 *)(a2 + 17)
    || *(unsigned __int8 *)(a1 + 18) != *(unsigned __int8 *)(a2 + 18))
  {
    return 0;
  }
  v5 = *(_BYTE *)(a2 + 22);
  if ((*(_BYTE *)(a1 + 22) & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 22))
      return 0;
  }
  else
  {
    if (*(unsigned __int16 *)(a1 + 20) != *(unsigned __int16 *)(a2 + 20))
      v5 = 1;
    if ((v5 & 1) != 0)
      return 0;
  }
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_QWORD *)(a2 + 24);
  if (v6)
  {
    if (!v7)
      return 0;
    swift_bridgeObjectRetain(*(_QWORD *)(a2 + 24));
    v8 = swift_bridgeObjectRetain(v6);
    v9 = sub_1000860FC(v8, v7);
    swift_bridgeObjectRelease(v6);
    swift_bridgeObjectRelease(v7);
    if ((v9 & 1) == 0)
      return 0;
  }
  else if (v7)
  {
    return 0;
  }
  v11 = *(_QWORD *)(a1 + 32);
  v10 = *(_QWORD *)(a1 + 40);
  v12 = *(unsigned __int16 *)(a1 + 48) | (*(unsigned __int8 *)(a1 + 50) << 16);
  v14 = *(_QWORD *)(a2 + 32);
  v13 = *(_QWORD *)(a2 + 40);
  v15 = *(unsigned __int16 *)(a2 + 48) | (*(unsigned __int8 *)(a2 + 50) << 16);
  if (*(unsigned __int8 *)(a1 + 50) == 255)
  {
    if (*(unsigned __int8 *)(a2 + 50) == 255)
    {
LABEL_18:
      v16 = *(_QWORD *)(a1 + 56);
      v17 = *(_QWORD *)(a1 + 64);
      v18 = *(_QWORD *)(a1 + 72);
      v19 = *(_QWORD *)(a2 + 56);
      v20 = *(_QWORD *)(a2 + 64);
      v21 = *(_QWORD *)(a2 + 72);
      if (v16 == 4)
      {
        if (v19 == 4)
          return 1;
      }
      else if (v19 != 4)
      {
        if (v16 != v19)
          return 0;
        sub_100111B7C(v16, v17, v18);
        sub_100111B7C(v19, v20, v21);
        _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(v17, v18);
        v28 = v27;
        sub_100111BBC(v19, v20, v21);
        sub_100111BBC(v16, v17, v18);
        return (v28 & 1) != 0;
      }
      sub_100111B7C(v16, v17, v18);
      sub_100111B7C(v19, v20, v21);
      sub_100111BBC(v16, v17, v18);
      sub_100111BBC(v19, v20, v21);
      return 0;
    }
    goto LABEL_22;
  }
  if (*(unsigned __int8 *)(a2 + 50) == 255)
  {
LABEL_22:
    sub_1001D7C58(*(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 40), *(unsigned __int16 *)(a2 + 48) | (*(unsigned __int8 *)(a2 + 50) << 16));
    sub_1001D7C58(v11, v10, v12);
    sub_100111B98(v11, v10, v12);
    v22 = v14;
    v23 = v13;
    v24 = v15;
LABEL_23:
    sub_100111B98(v22, v23, v24);
    return 0;
  }
  if (((*(unsigned __int8 *)(a1 + 50) << 16) & 0x10000) == 0)
  {
    if ((v15 & 0x10000) == 0)
    {
      sub_1001D7C58(*(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 40), *(unsigned __int16 *)(a2 + 48) | (*(unsigned __int8 *)(a2 + 50) << 16));
      sub_1001D7C58(v11, v10, v12);
      v29 = _s7CoreP2P15AWDLActionFrameV12SyncTreePathV23__derived_struct_equalsySbAE_AEtFZ_0(v11, v14);
      sub_100111B98(v14, v13, v15);
      sub_100111B98(v11, v10, v12);
      result = 0;
      if (v29 && ((((v10 & 1) == 0) ^ v13) & 1) != 0)
        goto LABEL_18;
      return result;
    }
LABEL_33:
    sub_1001D7C58(*(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 40), *(unsigned __int16 *)(a2 + 48) | (*(unsigned __int8 *)(a2 + 50) << 16));
    sub_1001D7C58(v11, v10, v12);
    sub_100111BB0(v11, v10, v12, BYTE2(v12) & 1);
    sub_100111BB0(v14, v13, v15, BYTE2(v15) & 1);
    return 0;
  }
  if ((v15 & 0x10000) == 0)
    goto LABEL_33;
  sub_1001D7C58(*(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 40), *(unsigned __int16 *)(a2 + 48) | (*(unsigned __int8 *)(a2 + 50) << 16));
  sub_1001D7C58(v11, v10, v12);
  _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(v11, v10);
  if ((v25 & 1) == 0)
  {
    sub_100111B98(v14, v13, v15);
    v22 = v11;
    v23 = v10;
    v24 = v12;
    goto LABEL_23;
  }
  sub_100111B98(v14, v13, v15);
  sub_100111B98(v11, v10, v12);
  result = 0;
  if (v12 == v15
    && ((((v12 & 0x100) == 0) ^ ((unsigned __int16)(v15 & 0x100) >> 8)) & 1) != 0)
  {
    goto LABEL_18;
  }
  return result;
}

BOOL sub_1001CFB7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  BOOL v8;
  int v11;
  __int16 v12;
  __int16 v13;
  int v14;
  __int16 v15;
  __int16 v16;

  LOBYTE(v15) = BYTE4(a1);
  HIBYTE(v15) = BYTE5(a1);
  LOBYTE(v12) = BYTE4(a4);
  HIBYTE(v12) = BYTE5(a4);
  v8 = (_DWORD)a1 == (_DWORD)a4 && v15 == v12 && a2 == a5;
  if (!v8 || (unsigned __int16)a3 != (unsigned __int16)a6)
    return 0;
  LOBYTE(v14) = BYTE2(a3);
  BYTE1(v14) = BYTE3(a3);
  BYTE2(v14) = BYTE4(a3);
  HIBYTE(v14) = BYTE5(a3);
  LOBYTE(v16) = BYTE6(a3);
  HIBYTE(v16) = HIBYTE(a3);
  LOBYTE(v11) = BYTE2(a6);
  BYTE1(v11) = BYTE3(a6);
  BYTE2(v11) = BYTE4(a6);
  HIBYTE(v11) = BYTE5(a6);
  LOBYTE(v13) = BYTE6(a6);
  HIBYTE(v13) = HIBYTE(a6);
  return v14 == v11 && v16 == v13;
}

uint64_t _s7CoreP2P12NANAttributeO26ServiceDescriptorExtensionV23__derived_struct_equalsySbAE_AEtFZ_0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  char v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v13;
  char v14;

  if (*a1 != *a2 || *((unsigned __int16 *)a1 + 1) != *((unsigned __int16 *)a2 + 1))
    return 0;
  v4 = a2[8];
  if ((a1[8] & 1) != 0)
  {
    if (!a2[8])
      return 0;
  }
  else
  {
    if (*((_DWORD *)a1 + 1) != *((_DWORD *)a2 + 1))
      v4 = 1;
    if ((v4 & 1) != 0)
      return 0;
  }
  v5 = a2[10];
  if ((a1[10] & 1) != 0)
  {
    if (!a2[10])
      return 0;
  }
  else
  {
    if (a1[9] != a2[9])
      v5 = 1;
    if ((v5 & 1) != 0)
      return 0;
  }
  v7 = *((_QWORD *)a1 + 2);
  v6 = *((_QWORD *)a1 + 3);
  v8 = *((_QWORD *)a1 + 4);
  v10 = *((_QWORD *)a2 + 2);
  v9 = *((_QWORD *)a2 + 3);
  v11 = *((_QWORD *)a2 + 4);
  if (v7 == 4)
  {
    if (v10 == 4)
    {
      sub_1001DA7B4((uint64_t)a2);
      return 1;
    }
    goto LABEL_19;
  }
  if (v10 == 4)
  {
LABEL_19:
    sub_1001DA7B4((uint64_t)a2);
    sub_1001DA7B4((uint64_t)a1);
    sub_100111BBC(v7, v6, v8);
    sub_100111BBC(v10, v9, v11);
    return 0;
  }
  if (v7 == v10)
  {
    sub_1001DA7B4((uint64_t)a2);
    sub_1001DA7B4((uint64_t)a1);
    _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(v6, v8);
    v14 = v13;
    sub_1001DA7E0((uint64_t)a2);
    sub_1001DA7E0((uint64_t)a1);
    if ((v14 & 1) != 0)
      return 1;
  }
  return 0;
}

BOOL sub_1001CFE14(uint64_t a1, int a2, uint64_t a3, int a4)
{
  __int16 v4;
  int v5;
  int v6;
  int v7;
  int v8;
  _BOOL8 result;

  v4 = a1;
  v5 = WORD1(a1);
  v6 = BYTE4(a1);
  v7 = BYTE5(a1);
  v8 = BYTE6(a1);
  result = 0;
  if ((a3 & 0x100) != 0)
  {
    if ((v4 & 0x100) == 0)
      return result;
  }
  else if ((v4 & 0x100) != 0 || ((a3 ^ v4) & 0x7F) != 0)
  {
    return result;
  }
  if (v5 == WORD1(a3)
    && v6 == BYTE4(a3)
    && v7 == BYTE5(a3)
    && v8 == BYTE6(a3)
    && (unsigned __int16)a2 == (unsigned __int16)a4)
  {
    return BYTE2(a2) == BYTE2(a4);
  }
  return result;
}

uint64_t _s7CoreP2P12NANAttributeO8DatapathV23__derived_struct_equalsySbAE_AEtFZ_0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  BOOL v3;
  char v4;
  int8x16_t v5;
  uint64x2_t v6;
  int16x8_t v7;
  uint64x2_t v8;
  int64x2_t v9;
  int16x8_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v20;
  char v21;
  _BYTE v22[6];
  _BYTE v23[6];

  if (*a1 != *a2 || a1[1] != a2[1] || a1[2] != a2[2])
    return 0;
  v3 = *(_DWORD *)(a1 + 3) == *(_DWORD *)(a2 + 3) && *(unsigned __int16 *)(a1 + 7) == *(unsigned __int16 *)(a2 + 7);
  if (!v3 || a1[9] != a2[9] || a1[10] != a2[10])
    return 0;
  v4 = a2[12];
  if ((a1[12] & 1) != 0)
  {
    if (!a2[12])
      return 0;
  }
  else
  {
    if (a1[11] != a2[11])
      v4 = 1;
    if ((v4 & 1) != 0)
      return 0;
  }
  if ((a1[19] & 1) != 0)
  {
    if (!a2[19])
      return 0;
  }
  else
  {
    if ((a2[19] & 1) != 0)
      return 0;
    v5.i64[0] = 0xFFFFFFFFFFFFLL;
    v5.i64[1] = 0xFFFFFFFFFFFFLL;
    v6 = (uint64x2_t)vandq_s8((int8x16_t)vdupq_n_s64(*(unsigned int *)(a1 + 13) | ((unint64_t)*(unsigned __int16 *)(a1 + 17) << 32)), v5);
    v7 = (int16x8_t)vshlq_u64(v6, (uint64x2_t)xmmword_10033B100);
    v8 = (uint64x2_t)vandq_s8((int8x16_t)vdupq_n_s64(*(unsigned int *)(a2 + 13) | ((unint64_t)*(unsigned __int16 *)(a2 + 17) << 32)), v5);
    v9 = (int64x2_t)vshlq_u64(v8, (uint64x2_t)xmmword_10033B100);
    v10 = (int16x8_t)vshlq_u64(v8, (uint64x2_t)xmmword_10033B0F0);
    v23[0] = *(_DWORD *)(a1 + 13);
    *(int32x2_t *)v6.i8 = vmovn_s64((int64x2_t)vshlq_u64(v6, (uint64x2_t)xmmword_10033B0F0));
    *(int32x2_t *)v7.i8 = vmovn_s64((int64x2_t)v7);
    v7.i16[1] = v7.i16[2];
    v7.i16[2] = v6.i16[0];
    v7.i16[3] = v6.i16[2];
    *(_DWORD *)&v23[1] = vmovn_s16(v7).u32[0];
    v22[0] = *(_DWORD *)(a2 + 13);
    *(int32x2_t *)v6.i8 = vmovn_s64((int64x2_t)v10);
    *(int32x2_t *)v10.i8 = vmovn_s64(v9);
    v10.i16[1] = v10.i16[2];
    v10.i16[2] = v6.i16[0];
    v10.i16[3] = v6.i16[2];
    *(_DWORD *)&v22[1] = vmovn_s16(v10).u32[0];
    if (*(_DWORD *)v23 == *(_DWORD *)v22)
    {
      v22[5] = HIBYTE(*(_WORD *)(a2 + 17));
      v23[5] = HIBYTE(*(_WORD *)(a1 + 17));
      v11 = *(unsigned __int16 *)&v23[4] == *(unsigned __int16 *)&v22[4];
    }
    else
    {
      v11 = 0;
    }
    if (!v11)
      return 0;
  }
  v13 = *((_QWORD *)a1 + 3);
  v12 = *((_QWORD *)a1 + 4);
  v14 = *((_QWORD *)a1 + 5);
  v16 = *((_QWORD *)a2 + 3);
  v15 = *((_QWORD *)a2 + 4);
  v17 = *((_QWORD *)a2 + 5);
  if (v13 == 4)
  {
    if (v16 == 4)
    {
      sub_1001DAE80((uint64_t)a2);
      return 1;
    }
    goto LABEL_30;
  }
  if (v16 == 4)
  {
LABEL_30:
    sub_1001DAE80((uint64_t)a2);
    sub_1001DAE80((uint64_t)a1);
    sub_100111BBC(v13, v12, v14);
    sub_100111BBC(v16, v15, v17);
    return 0;
  }
  if (v13 == v16)
  {
    sub_1001DAE80((uint64_t)a2);
    sub_1001DAE80((uint64_t)a1);
    _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(v12, v14);
    v21 = v20;
    sub_1001DAEAC((uint64_t)a2);
    sub_1001DAEAC((uint64_t)a1);
    if ((v21 & 1) != 0)
      return 1;
  }
  return 0;
}

uint64_t sub_1001D014C(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8)
{
  if ((_DWORD)a1 != (_DWORD)a5)
    return 0;
  if ((a1 & 0x10000000000) != 0)
  {
    if ((a5 & 0x10000000000) == 0)
      return 0;
  }
  else if ((a5 & 0x10000000000) != 0 || BYTE4(a1) != BYTE4(a5))
  {
    return 0;
  }
  if ((a3 & 1) != 0)
  {
    if ((a7 & 1) != 0)
      return _s7CoreP2P12NANAttributeO18PublicAvailabilityV23__derived_struct_equalsySbAE_AEtFZ_0(a4, a8);
  }
  else if ((a7 & 1) == 0 && a2 == a6)
  {
    return _s7CoreP2P12NANAttributeO18PublicAvailabilityV23__derived_struct_equalsySbAE_AEtFZ_0(a4, a8);
  }
  return 0;
}

uint64_t sub_1001D01A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  char v9;

  v8 = 0;
  if ((unsigned __int16)a1 == (unsigned __int16)a5
    && HIDWORD(a1) == HIDWORD(a5)
    && a2 == a6
    && a3 == a7
    && BYTE1(a3) == BYTE1(a7))
  {
    v9 = BYTE3(a7);
    if ((a3 & 0x1000000) != 0)
    {
      if (!BYTE3(a7))
        return 0;
    }
    else
    {
      if (BYTE2(a3) != BYTE2(a7))
        v9 = 1;
      if ((v9 & 1) != 0)
        return 0;
    }
    if (BYTE5(a4) == 255)
    {
      if (BYTE5(a8) != 255)
        return 0;
    }
    else if (BYTE5(a8) == 255
           || !sub_1001A9F84(__PAIR64__(a4, HIDWORD(a3)), BYTE4(a4) | (((HIDWORD(a4) >> 8) & 1) << 8), __PAIR64__(a8, HIDWORD(a7)), BYTE4(a8) | (((HIDWORD(a8) >> 8) & 1) << 8)))
    {
      return 0;
    }
    return 1;
  }
  return v8;
}

uint64_t sub_1001D02C0(uint64_t a1, char a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6)
{
  if ((_DWORD)a1 == (_DWORD)a4)
  {
    if ((a2 & 1) != 0)
    {
      if ((a5 & 1) != 0)
        return _s7CoreP2P12NANAttributeO18PublicAvailabilityV23__derived_struct_equalsySbAE_AEtFZ_0(a3, a6);
    }
    else if (HIDWORD(a1) == HIDWORD(a4) && (a5 & 1) == 0)
    {
      return _s7CoreP2P12NANAttributeO18PublicAvailabilityV23__derived_struct_equalsySbAE_AEtFZ_0(a3, a6);
    }
  }
  return 0;
}

uint64_t sub_1001D02F8(uint64_t a1, unint64_t a2, int a3, uint64_t a4, unint64_t a5, int a6)
{
  _BOOL4 v9;
  unsigned int v10;
  int v11;
  __int16 v12;
  __int16 v13;
  int v14;
  __int16 v15;
  __int16 v16;

  LOBYTE(v15) = BYTE4(a1);
  HIBYTE(v15) = BYTE5(a1);
  LOBYTE(v12) = BYTE4(a4);
  HIBYTE(v12) = BYTE5(a4);
  if ((_DWORD)a1 != (_DWORD)a4 || v15 != v12)
    return 0;
  LOBYTE(v14) = BYTE6(a1);
  BYTE1(v14) = HIBYTE(a1);
  HIWORD(v14) = a2;
  LOBYTE(v16) = BYTE2(a2);
  HIBYTE(v16) = BYTE3(a2);
  LOBYTE(v11) = BYTE6(a4);
  BYTE1(v11) = HIBYTE(a4);
  HIWORD(v11) = a5;
  LOBYTE(v13) = BYTE2(a5);
  HIBYTE(v13) = BYTE3(a5);
  v9 = v14 == v11 && v16 == v13;
  v10 = v9 & (((a2 & (unint64_t)&_mh_execute_header) == 0) ^ HIDWORD(a5));
  if (BYTE5(a2) != BYTE5(a5))
    v10 = 0;
  if (BYTE6(a2) != BYTE6(a5))
    v10 = 0;
  if (HIBYTE(a2) != HIBYTE(a5))
    v10 = 0;
  if (a3 == a6)
    return v10;
  else
    return 0;
}

BOOL sub_1001D0458(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, int a6)
{
  int v13;
  __int16 v14;
  __int16 v15;
  int v16;
  __int16 v17;
  __int16 v18;

  LOBYTE(v17) = BYTE4(a1);
  HIBYTE(v17) = BYTE5(a1);
  LOBYTE(v14) = BYTE4(a4);
  HIBYTE(v14) = BYTE5(a4);
  if ((_DWORD)a1 != (_DWORD)a4 || v17 != v14)
    return 0;
  LOBYTE(v16) = BYTE6(a1);
  BYTE1(v16) = HIBYTE(a1);
  HIWORD(v16) = a2;
  LOBYTE(v18) = BYTE2(a2);
  HIBYTE(v18) = BYTE3(a2);
  LOBYTE(v13) = BYTE6(a4);
  BYTE1(v13) = HIBYTE(a4);
  HIWORD(v13) = a5;
  LOBYTE(v15) = BYTE2(a5);
  HIBYTE(v15) = BYTE3(a5);
  return v16 == v13
      && v18 == v15
      && BYTE4(a2) == BYTE4(a5)
      && BYTE5(a2) == BYTE5(a5)
      && BYTE6(a2) == BYTE6(a5)
      && a3 == a6;
}

void sub_1001D058C(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  BOOL v6;
  __int16 v7;
  __int16 v8;

  LOBYTE(v8) = BYTE4(a1);
  HIBYTE(v8) = BYTE5(a1);
  LOBYTE(v7) = BYTE4(a5);
  HIBYTE(v7) = BYTE5(a5);
  v6 = (_DWORD)a1 == (_DWORD)a5 && v8 == v7;
  if (v6
    && BYTE6(a1) == BYTE6(a5)
    && HIBYTE(a1) == HIBYTE(a5)
    && a2 == a6
    && WORD1(a2) == WORD1(a6)
    && WORD2(a2) == WORD2(a6))
  {
    _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(a3, a4);
  }
}

BOOL _s7CoreP2P12NANAttributeO17DatapathExtensionV23__derived_struct_equalsySbAE_AEtFZ_0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  BOOL v4;
  char v5;
  int8x16_t v6;
  uint64x2_t v7;
  int16x8_t v8;
  uint64x2_t v9;
  int64x2_t v10;
  int16x8_t v11;
  BOOL v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  char v26;
  _BYTE v28[6];
  _BYTE v29[6];

  if (*a1 != *a2 || a1[1] != a2[1] || a1[2] != a2[2])
    return 0;
  v4 = *(_DWORD *)(a1 + 3) == *(_DWORD *)(a2 + 3) && *(unsigned __int16 *)(a1 + 7) == *(unsigned __int16 *)(a2 + 7);
  if (!v4 || a1[9] != a2[9] || a1[10] != a2[10])
    return 0;
  v5 = a2[12];
  if ((a1[12] & 1) != 0)
  {
    if (!a2[12])
      return 0;
  }
  else
  {
    if (a1[11] != a2[11])
      v5 = 1;
    if ((v5 & 1) != 0)
      return 0;
  }
  if ((a1[19] & 1) != 0)
  {
    if (!a2[19])
      return 0;
  }
  else
  {
    if ((a2[19] & 1) != 0)
      return 0;
    v6.i64[0] = 0xFFFFFFFFFFFFLL;
    v6.i64[1] = 0xFFFFFFFFFFFFLL;
    v7 = (uint64x2_t)vandq_s8((int8x16_t)vdupq_n_s64(*(unsigned int *)(a1 + 13) | ((unint64_t)*(unsigned __int16 *)(a1 + 17) << 32)), v6);
    v8 = (int16x8_t)vshlq_u64(v7, (uint64x2_t)xmmword_10033B100);
    v9 = (uint64x2_t)vandq_s8((int8x16_t)vdupq_n_s64(*(unsigned int *)(a2 + 13) | ((unint64_t)*(unsigned __int16 *)(a2 + 17) << 32)), v6);
    v10 = (int64x2_t)vshlq_u64(v9, (uint64x2_t)xmmword_10033B100);
    v11 = (int16x8_t)vshlq_u64(v9, (uint64x2_t)xmmword_10033B0F0);
    v29[0] = *(_DWORD *)(a1 + 13);
    *(int32x2_t *)v7.i8 = vmovn_s64((int64x2_t)vshlq_u64(v7, (uint64x2_t)xmmword_10033B0F0));
    *(int32x2_t *)v8.i8 = vmovn_s64((int64x2_t)v8);
    v8.i16[1] = v8.i16[2];
    v8.i16[2] = v7.i16[0];
    v8.i16[3] = v7.i16[2];
    *(_DWORD *)&v29[1] = vmovn_s16(v8).u32[0];
    v28[0] = *(_DWORD *)(a2 + 13);
    *(int32x2_t *)v7.i8 = vmovn_s64((int64x2_t)v11);
    *(int32x2_t *)v11.i8 = vmovn_s64(v10);
    v11.i16[1] = v11.i16[2];
    v11.i16[2] = v7.i16[0];
    v11.i16[3] = v7.i16[2];
    *(_DWORD *)&v28[1] = vmovn_s16(v11).u32[0];
    if (*(_DWORD *)v29 == *(_DWORD *)v28)
    {
      v28[5] = HIBYTE(*(_WORD *)(a2 + 17));
      v29[5] = HIBYTE(*(_WORD *)(a1 + 17));
      v12 = *(unsigned __int16 *)&v29[4] == *(unsigned __int16 *)&v28[4];
    }
    else
    {
      v12 = 0;
    }
    if (!v12)
      return 0;
  }
  v13 = *((_QWORD *)a1 + 3);
  v14 = *((_QWORD *)a1 + 4);
  v15 = *((_QWORD *)a2 + 3);
  v16 = *((_QWORD *)a2 + 4);
  if (v14 >> 60 != 15)
  {
    if (v16 >> 60 != 15)
    {
      sub_1000339F4(*((_QWORD *)a1 + 3), *((_QWORD *)a1 + 4));
      sub_1000339F4(v15, v16);
      _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(v13, v14);
      v18 = v17;
      sub_10000E658(v15, v16);
      sub_10000E658(v13, v14);
      if ((v18 & 1) == 0)
        return 0;
      goto LABEL_32;
    }
LABEL_30:
    sub_1000339F4(*((_QWORD *)a1 + 3), *((_QWORD *)a1 + 4));
    sub_1000339F4(v15, v16);
    sub_10000E658(v13, v14);
    sub_10000E658(v15, v16);
    return 0;
  }
  if (v16 >> 60 != 15)
    goto LABEL_30;
LABEL_32:
  v19 = *((_QWORD *)a1 + 5);
  v20 = *((_QWORD *)a1 + 6);
  v21 = *((_QWORD *)a1 + 7);
  v22 = *((_QWORD *)a2 + 5);
  v23 = *((_QWORD *)a2 + 6);
  v24 = *((_QWORD *)a2 + 7);
  if (v19 == 4)
  {
    if (v22 == 4)
      return 1;
  }
  else if (v22 != 4)
  {
    if (v19 != v22)
      return 0;
    sub_100111B7C(v19, v20, v21);
    sub_100111B7C(v22, v23, v24);
    _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(v20, v21);
    v26 = v25;
    sub_100111BBC(v22, v23, v24);
    sub_100111BBC(v19, v20, v21);
    return (v26 & 1) != 0;
  }
  sub_100111B7C(v19, v20, v21);
  sub_100111B7C(v22, v23, v24);
  sub_100111BBC(v19, v20, v21);
  sub_100111BBC(v22, v23, v24);
  return 0;
}

BOOL _s7CoreP2P12NANAttributeO20PairingBootstrappingV23__derived_struct_equalsySbAE_AEtFZ_0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _BOOL8 result;
  char v13;
  char v14;

  if (*a1 != *a2 || a1[1] != a2[1] || a1[2] != a2[2])
    return 0;
  v4 = *((_QWORD *)a1 + 1);
  v5 = *((_QWORD *)a1 + 2);
  v6 = *((_QWORD *)a1 + 3);
  v7 = *((_QWORD *)a1 + 4);
  v9 = *((_QWORD *)a2 + 1);
  v8 = *((_QWORD *)a2 + 2);
  v10 = *((_QWORD *)a2 + 3);
  v11 = *((_QWORD *)a2 + 4);
  if (v7 >> 60 == 15)
  {
    if (v11 >> 60 == 15)
    {
      sub_1001DCB48((uint64_t)a2);
      return *((unsigned __int16 *)a1 + 20) == *((unsigned __int16 *)a2 + 20);
    }
    goto LABEL_9;
  }
  if (v11 >> 60 == 15)
  {
LABEL_9:
    sub_1001DCB48((uint64_t)a2);
    sub_1001DCB48((uint64_t)a1);
    sub_100128024(v4, v5, v6, v7);
    sub_100128024(v9, v8, v10, v11);
    return 0;
  }
  if ((v5 & 1) != 0)
  {
    if ((v8 & 1) == 0)
      return 0;
LABEL_17:
    sub_1001DCB48((uint64_t)a2);
    sub_1001DCB48((uint64_t)a1);
    _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(v6, v7);
    v14 = v13;
    sub_1001DCB78((uint64_t)a2);
    sub_1001DCB78((uint64_t)a1);
    if ((v14 & 1) != 0)
      return *((unsigned __int16 *)a1 + 20) == *((unsigned __int16 *)a2 + 20);
    return 0;
  }
  result = 0;
  if ((v8 & 1) == 0 && v4 == v9)
    goto LABEL_17;
  return result;
}

BOOL sub_1001D0B80(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  _BOOL8 result;
  unint64_t v6;
  _BOOL4 v8;
  int v9;
  __int16 v10;
  int v11;
  __int16 v12;

  if (a1 != a3)
    return 0;
  result = 0;
  v6 = HIBYTE(a1);
  LOBYTE(v11) = BYTE1(a1);
  BYTE1(v11) = BYTE2(a1);
  BYTE2(v11) = BYTE3(a1);
  HIBYTE(v11) = BYTE4(a1);
  LOBYTE(v12) = BYTE5(a1);
  HIBYTE(v12) = BYTE6(a1);
  LOBYTE(v9) = BYTE1(a3);
  BYTE1(v9) = BYTE2(a3);
  BYTE2(v9) = BYTE3(a3);
  HIBYTE(v9) = BYTE4(a3);
  LOBYTE(v10) = BYTE5(a3);
  HIBYTE(v10) = BYTE6(a3);
  v8 = v11 != v9 || v12 != v10;
  if ((_DWORD)v6 == HIBYTE(a3) && !v8 && a2 == a4 && BYTE1(a2) == BYTE1(a4))
    return (a2 >> 16) == (a4 >> 16);
  return result;
}

uint64_t sub_1001D0CA0(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  BOOL v6;
  char v8;
  int v9;
  __int16 v10;
  int v11;
  __int16 v12;

  if (a1 != a5)
    return 0;
  LOBYTE(v11) = BYTE1(a1);
  BYTE1(v11) = BYTE2(a1);
  BYTE2(v11) = BYTE3(a1);
  HIBYTE(v11) = BYTE4(a1);
  LOBYTE(v12) = BYTE5(a1);
  HIBYTE(v12) = BYTE6(a1);
  LOBYTE(v9) = BYTE1(a5);
  BYTE1(v9) = BYTE2(a5);
  BYTE2(v9) = BYTE3(a5);
  HIBYTE(v9) = BYTE4(a5);
  LOBYTE(v10) = BYTE5(a5);
  HIBYTE(v10) = BYTE6(a5);
  v6 = v11 == v9 && v12 == v10;
  if (v6
    && (unsigned __int16)a2 == (unsigned __int16)a6
    && ((a2 ^ a6) & 0x10000) == 0
    && (_s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(a3, a4), (v8 & 1) != 0))
  {
    return 1;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_1001D0DA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL v4;
  __int16 v6;
  __int16 v7;

  LOBYTE(v7) = BYTE4(a1);
  HIBYTE(v7) = BYTE5(a1);
  LOBYTE(v6) = BYTE4(a3);
  HIBYTE(v6) = BYTE5(a3);
  v4 = (_DWORD)a1 == (_DWORD)a3 && v7 == v6;
  if (v4 && BYTE6(a1) == BYTE6(a3))
    return _s7CoreP2P12NANAttributeO18PublicAvailabilityV23__derived_struct_equalsySbAE_AEtFZ_0(a2, a4);
  else
    return 0;
}

void sub_1001D0E74(unsigned int a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  char v4;
  char v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char v21;

  v4 = a4;
  v7 = a1;
  v8 = a1 >> 8;
  v9 = HIWORD(a1);
  v10 = a4 >> 8;
  v11 = HIWORD(a4);
  v12 = sub_100012C44(&qword_100403E88);
  v13 = swift_allocObject(v12, 35, 7);
  *(_OWORD *)(v13 + 16) = xmmword_10033A120;
  *(_BYTE *)(v13 + 32) = v7;
  *(_BYTE *)(v13 + 33) = v8;
  *(_BYTE *)(v13 + 34) = v9;
  v14 = sub_1001068EC(v13);
  v16 = v15;
  swift_bridgeObjectRelease(v13);
  v17 = swift_allocObject(v12, 35, 7);
  *(_OWORD *)(v17 + 16) = xmmword_10033A120;
  *(_BYTE *)(v17 + 32) = v4;
  *(_BYTE *)(v17 + 33) = v10;
  *(_BYTE *)(v17 + 34) = v11;
  v18 = sub_1001068EC(v17);
  v20 = v19;
  swift_bridgeObjectRelease(v17);
  _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(v14, v16);
  LOBYTE(v17) = v21;
  sub_10000E614(v18, v20);
  sub_10000E614(v14, v16);
  if ((v17 & 1) != 0)
    _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(a2, a3);
}

uint64_t _s7CoreP2P12NANAttributeO18WLANInfrastructureV23__derived_struct_equalsySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  char v3;
  BOOL v6;
  char v8;

  if (*(_DWORD *)a1 != *(_DWORD *)a2 || *(unsigned __int16 *)(a1 + 4) != *(unsigned __int16 *)(a2 + 4))
  {
LABEL_5:
    v3 = 0;
    return v3 & 1;
  }
  v3 = 0;
  v6 = *(_DWORD *)(a1 + 6) == *(_DWORD *)(a2 + 6) && *(unsigned __int16 *)(a1 + 10) == *(unsigned __int16 *)(a2 + 10);
  if (v6
    && *(unsigned __int8 *)(a1 + 16) == *(unsigned __int8 *)(a2 + 16)
    && *(unsigned __int8 *)(a1 + 17) == *(unsigned __int8 *)(a2 + 17))
  {
    if (((*(unsigned __int8 *)(a1 + 18) ^ *(unsigned __int8 *)(a2 + 18)) & 1) == 0)
    {
      _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32));
      if ((v8 & 1) != 0)
      {
        v3 = *(_BYTE *)(a1 + 40) ^ *(_BYTE *)(a2 + 40) ^ 1;
        return v3 & 1;
      }
    }
    goto LABEL_5;
  }
  return v3 & 1;
}

BOOL sub_1001D10C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v10;
  int v11;

  if ((_DWORD)a1 != (_DWORD)a3)
    return 0;
  LOBYTE(v11) = BYTE4(a1);
  BYTE1(v11) = BYTE5(a1);
  BYTE2(v11) = BYTE6(a1);
  HIBYTE(v11) = HIBYTE(a1);
  LOBYTE(v10) = BYTE4(a3);
  BYTE1(v10) = BYTE5(a3);
  BYTE2(v10) = BYTE6(a3);
  HIBYTE(v10) = HIBYTE(a3);
  return v11 == v10
      && (unsigned __int16)a2 == (unsigned __int16)a4
      && BYTE2(a2) == BYTE2(a4)
      && BYTE3(a2) == BYTE3(a4)
      && BYTE4(a2) == BYTE4(a4)
      && BYTE5(a2) == BYTE5(a4);
}

BOOL _s7CoreP2P12NANAttributeO4IBSSV23__derived_struct_equalsySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  _BOOL8 result;
  char v5;

  v2 = *(_DWORD *)a1 == *(_DWORD *)a2 && *(unsigned __int16 *)(a1 + 4) == *(unsigned __int16 *)(a2 + 4);
  result = 0;
  if (v2
    && *(_DWORD *)(a1 + 6) == *(_DWORD *)(a2 + 6)
    && *(unsigned __int16 *)(a1 + 10) == *(unsigned __int16 *)(a2 + 10)
    && *(unsigned __int8 *)(a1 + 16) == *(unsigned __int8 *)(a2 + 16)
    && *(unsigned __int8 *)(a1 + 17) == *(unsigned __int8 *)(a2 + 17)
    && ((*(unsigned __int8 *)(a1 + 18) ^ *(unsigned __int8 *)(a2 + 18)) & 1) == 0)
  {
    _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32));
    if ((v5 & 1) != 0)
      return 1;
  }
  return result;
}

void _s7CoreP2P12NANAttributeO4MeshV23__derived_struct_equalsySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v4;

  v2 = *(_DWORD *)a1 == *(_DWORD *)a2 && *(unsigned __int16 *)(a1 + 4) == *(unsigned __int16 *)(a2 + 4);
  if (v2
    && *(unsigned __int8 *)(a1 + 8) == *(unsigned __int8 *)(a2 + 8)
    && *(unsigned __int8 *)(a1 + 9) == *(unsigned __int8 *)(a2 + 9)
    && ((*(unsigned __int8 *)(a1 + 10) ^ *(unsigned __int8 *)(a2 + 10)) & 1) == 0)
  {
    _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
    if ((v4 & 1) != 0)
      _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
  }
}

BOOL sub_1001D1394(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8;
  __int16 v9;
  int v10;
  __int16 v11;

  if ((unsigned __int16)a1 != (unsigned __int16)a3)
    return 0;
  LOBYTE(v10) = BYTE2(a1);
  BYTE1(v10) = BYTE3(a1);
  BYTE2(v10) = BYTE4(a1);
  HIBYTE(v10) = BYTE5(a1);
  LOBYTE(v11) = BYTE6(a1);
  HIBYTE(v11) = HIBYTE(a1);
  LOBYTE(v8) = BYTE2(a3);
  BYTE1(v8) = BYTE3(a3);
  BYTE2(v8) = BYTE4(a3);
  HIBYTE(v8) = BYTE5(a3);
  LOBYTE(v9) = BYTE6(a3);
  HIBYTE(v9) = HIBYTE(a3);
  return v10 == v8 && v11 == v9 && a2 == a4 && HIDWORD(a2) == HIDWORD(a4);
}

uint64_t type metadata accessor for NANAttribute(uint64_t a1)
{
  return sub_10000D69C(a1, qword_10040AF90, (uint64_t)&nominal type descriptor for NANAttribute);
}

unint64_t sub_1001D1494()
{
  unint64_t result;

  result = qword_10040A4D8;
  if (!qword_10040A4D8)
  {
    result = swift_getWitnessTable(byte_10035B9D0, &type metadata for NANAttribute.MasterIndication.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040A4D8);
  }
  return result;
}

uint64_t _s7CoreP2P12NANAttributeO23CustomDeviceInformationV23__derived_struct_equalsySbAE_AEtFZ_0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v4;

  if (*a1 != *a2 || a1[1] != a2[1] || *((_DWORD *)a1 + 1) != *((_DWORD *)a2 + 1))
    return 0;
  v4 = *(int *)(type metadata accessor for NANAttribute.CustomDeviceInformation(0) + 28);
  return _s7CoreP2P12NANAttributeO23CustomDeviceInformationV0D10AttributesV23__derived_struct_equalsySbAG_AGtFZ_0((uint64_t)&a1[v4], &a2[v4]);
}

void _s7CoreP2P12NANAttributeO21__derived_enum_equalsySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  _QWORD v45[39];
  uint64_t v46;
  uint64_t v47;
  char *v48;

  v48 = (char *)a2;
  v47 = a1;
  v45[0] = type metadata accessor for NANAttribute.CustomDeviceInformation(0);
  __chkstk_darwin();
  v45[1] = (char *)v45 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = type metadata accessor for NANAttribute(0);
  __chkstk_darwin();
  v45[37] = (char *)v45 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v45[36] = (char *)v45 - v4;
  __chkstk_darwin();
  v45[38] = (char *)v45 - v5;
  __chkstk_darwin();
  v45[35] = (char *)v45 - v6;
  __chkstk_darwin();
  v45[34] = (char *)v45 - v7;
  __chkstk_darwin();
  v45[33] = (char *)v45 - v8;
  __chkstk_darwin();
  v45[32] = (char *)v45 - v9;
  __chkstk_darwin();
  v45[31] = (char *)v45 - v10;
  __chkstk_darwin();
  v45[29] = (char *)v45 - v11;
  __chkstk_darwin();
  v45[30] = (char *)v45 - v12;
  __chkstk_darwin();
  v45[28] = (char *)v45 - v13;
  __chkstk_darwin();
  v45[25] = (char *)v45 - v14;
  __chkstk_darwin();
  v45[27] = (char *)v45 - v15;
  __chkstk_darwin();
  v45[26] = (char *)v45 - v16;
  __chkstk_darwin();
  v45[24] = (char *)v45 - v17;
  __chkstk_darwin();
  v45[22] = (char *)v45 - v18;
  __chkstk_darwin();
  v45[23] = (char *)v45 - v19;
  __chkstk_darwin();
  v45[21] = (char *)v45 - v20;
  __chkstk_darwin();
  v45[18] = (char *)v45 - v21;
  __chkstk_darwin();
  v45[20] = (char *)v45 - v22;
  __chkstk_darwin();
  v45[17] = (char *)v45 - v23;
  __chkstk_darwin();
  v45[19] = (char *)v45 - v24;
  __chkstk_darwin();
  v45[15] = (char *)v45 - v25;
  __chkstk_darwin();
  v45[16] = (char *)v45 - v26;
  __chkstk_darwin();
  v45[14] = (char *)v45 - v27;
  __chkstk_darwin();
  v45[13] = (char *)v45 - v28;
  __chkstk_darwin();
  v45[11] = (char *)v45 - v29;
  __chkstk_darwin();
  v45[12] = (char *)v45 - v30;
  __chkstk_darwin();
  v45[9] = (char *)v45 - v31;
  __chkstk_darwin();
  v45[10] = (char *)v45 - v32;
  __chkstk_darwin();
  v45[8] = (char *)v45 - v33;
  __chkstk_darwin();
  v45[7] = (char *)v45 - v34;
  __chkstk_darwin();
  v45[5] = (char *)v45 - v35;
  __chkstk_darwin();
  v45[4] = (char *)v45 - v36;
  __chkstk_darwin();
  v45[6] = (char *)v45 - v37;
  __chkstk_darwin();
  v45[3] = (char *)v45 - v38;
  __chkstk_darwin();
  __chkstk_darwin();
  v45[2] = (char *)v45 - v39;
  __chkstk_darwin();
  __chkstk_darwin();
  __chkstk_darwin();
  __chkstk_darwin();
  __chkstk_darwin();
  sub_100012C44(&qword_10040B4D0);
  v40 = __chkstk_darwin();
  v42 = (char *)v45 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = (uint64_t)&v42[*(int *)(v40 + 48)];
  sub_1000637E0(v47, (uint64_t)v42, type metadata accessor for NANAttribute);
  v47 = v43;
  sub_1000637E0((uint64_t)v48, v43, type metadata accessor for NANAttribute);
  v48 = v42;
  v44 = (char *)sub_1001D1BC8 + 4 * word_1003524E8[swift_getEnumCaseMultiPayload(v42, v46)];
  __asm { BR              X10 }
}

BOOL sub_1001D1BC8()
{
  uint64_t v0;
  unsigned __int8 *v1;
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 *v4;
  BOOL v6;

  v3 = *(_QWORD *)(v0 + 344);
  sub_1000637E0(v3, (uint64_t)v1, type metadata accessor for NANAttribute);
  v4 = *(unsigned __int8 **)(v0 + 320);
  if (swift_getEnumCaseMultiPayload(v4, v2))
  {
    sub_100033A84(v3, &qword_10040B4D0);
    return 0;
  }
  else
  {
    v6 = *v1 == *v4 && v1[1] == v4[1];
    sub_100063824(v3, type metadata accessor for NANAttribute);
  }
  return v6;
}

uint64_t _s7CoreP2P12NANAttributeO23CustomDeviceInformationV0D10AttributesV23__derived_struct_equalsySbAG_AGtFZ_0(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  _BYTE *v25;
  unsigned __int8 *v26;
  uint64_t v27;
  _BYTE *v28;
  char v29;
  unsigned __int8 *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int (*v34)(uint64_t, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  int v42;
  void (*v43)(_BYTE *, uint64_t);
  unsigned __int8 *v44;
  int *v45;
  uint64_t v46;
  unsigned __int8 *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  char v54;
  char v55;
  uint64_t v56;
  uint64_t *v57;
  char v58;
  char v59;
  uint64_t v60;
  uint64_t *v61;
  char v63;
  char v64;
  _BYTE *v65;
  _BYTE *v66;
  _BYTE *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t (*v70)(uint64_t, uint64_t, uint64_t);
  uint64_t v71;
  int v72;
  uint64_t v73;
  _BYTE *v74;
  _BYTE *v75;
  int v76;
  _BYTE *v77;
  _BYTE *v78;
  uint64_t v79;
  char v80;
  void (*v81)(_BYTE *, uint64_t);
  unsigned __int8 *v82;
  uint64_t v83;
  uint64_t v84;
  unsigned int (*v85)(uint64_t, uint64_t, uint64_t);
  uint64_t v86;
  double *v87;
  unsigned __int8 v88;
  unsigned __int8 *v89;
  _BYTE *v90;
  _BYTE *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  uint64_t v96;
  int v97;
  _BYTE v98[12];
  int v99;
  uint64_t v100;
  _BYTE *v101;
  uint64_t v102;
  int *v103;
  unsigned __int8 *v104;
  unsigned __int8 *v105;
  _BYTE *v106;
  _BYTE *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  _BYTE *v111;
  _BYTE *v112;
  uint64_t v113;
  uint64_t v114;
  _BYTE *v115;
  _BYTE *v116;
  _BYTE *v117;
  _BYTE *v118;
  _BYTE *v119;
  uint64_t v120;

  v3 = type metadata accessor for NANInternetSharingStatistics.Requester(0);
  v109 = *(_QWORD *)(v3 - 8);
  v110 = v3;
  __chkstk_darwin();
  v106 = &v98[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v108 = sub_100012C44(&qword_10040B4D8);
  __chkstk_darwin();
  v6 = &v98[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100012C44((uint64_t *)&unk_10040DAB0);
  __chkstk_darwin();
  v107 = &v98[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin();
  v119 = &v98[-v8];
  __chkstk_darwin();
  v115 = &v98[-v9];
  v10 = type metadata accessor for UUID(0);
  v114 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin();
  v111 = &v98[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v113 = sub_100012C44((uint64_t *)&unk_10040E340);
  __chkstk_darwin();
  v118 = &v98[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100012C44(&qword_10040E1F0);
  __chkstk_darwin();
  v112 = &v98[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin();
  v116 = &v98[-v14];
  __chkstk_darwin();
  v117 = &v98[-v15];
  v120 = type metadata accessor for P256.KeyAgreement.PublicKey(0);
  v16 = *(_QWORD *)(v120 - 8);
  __chkstk_darwin();
  v18 = &v98[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v19 = sub_100012C44(&qword_10040B4E0);
  __chkstk_darwin();
  v21 = &v98[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100012C44((uint64_t *)&unk_10040D200);
  __chkstk_darwin();
  v23 = &v98[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin();
  v25 = &v98[-v24];
  __chkstk_darwin();
  v28 = &v98[-v27];
  if (*v26 != *a2)
    return 0;
  v29 = a2[2];
  if ((v26[2] & 1) != 0)
  {
    if (!a2[2])
      return 0;
  }
  else
  {
    if (v26[1] != a2[1])
      v29 = 1;
    if ((v29 & 1) != 0)
      return 0;
  }
  v101 = v6;
  v102 = v10;
  v30 = v26;
  v31 = type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
  v32 = *(int *)(v31 + 24);
  v105 = v30;
  sub_100033B48((uint64_t)&v30[v32], (uint64_t)v28, (uint64_t *)&unk_10040D200);
  v103 = (int *)v31;
  v104 = a2;
  sub_100033B48((uint64_t)&a2[*(int *)(v31 + 24)], (uint64_t)v25, (uint64_t *)&unk_10040D200);
  v33 = (uint64_t)&v21[*(int *)(v19 + 48)];
  sub_100033B48((uint64_t)v28, (uint64_t)v21, (uint64_t *)&unk_10040D200);
  sub_100033B48((uint64_t)v25, v33, (uint64_t *)&unk_10040D200);
  v34 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  v35 = v120;
  if (v34((uint64_t)v21, 1, v120) == 1)
  {
    sub_100033A84((uint64_t)v25, (uint64_t *)&unk_10040D200);
    sub_100033A84((uint64_t)v28, (uint64_t *)&unk_10040D200);
    if (v34(v33, 1, v35) == 1)
    {
      sub_100033A84((uint64_t)v21, (uint64_t *)&unk_10040D200);
      goto LABEL_15;
    }
LABEL_13:
    sub_100033A84((uint64_t)v21, &qword_10040B4E0);
    return 0;
  }
  sub_100033B48((uint64_t)v21, (uint64_t)v23, (uint64_t *)&unk_10040D200);
  if (v34(v33, 1, v35) == 1)
  {
    sub_100033A84((uint64_t)v25, (uint64_t *)&unk_10040D200);
    sub_100033A84((uint64_t)v28, (uint64_t *)&unk_10040D200);
    (*(void (**)(_BYTE *, uint64_t))(v16 + 8))(v23, v35);
    goto LABEL_13;
  }
  v36 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v16 + 32))(v18, v33, v35);
  v100 = P256.KeyAgreement.PublicKey.rawRepresentation.getter(v36);
  v38 = v37;
  v39 = P256.KeyAgreement.PublicKey.rawRepresentation.getter(v100);
  v41 = v40;
  _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(v100, v38);
  v99 = v42;
  sub_10000E614(v39, v41);
  sub_10000E614(v100, v38);
  v43 = *(void (**)(_BYTE *, uint64_t))(v16 + 8);
  v43(v18, v35);
  sub_100033A84((uint64_t)v25, (uint64_t *)&unk_10040D200);
  sub_100033A84((uint64_t)v28, (uint64_t *)&unk_10040D200);
  v43(v23, v35);
  sub_100033A84((uint64_t)v21, (uint64_t *)&unk_10040D200);
  if ((v99 & 1) == 0)
    return 0;
LABEL_15:
  v45 = v103;
  v44 = v104;
  v46 = v103[7];
  v47 = v105;
  v48 = *(_QWORD *)&v105[v46];
  v49 = *(_QWORD *)&v105[v46 + 8];
  v50 = (uint64_t *)&v104[v46];
  v51 = *v50;
  v52 = v50[1];
  if (v49 >> 60 == 15)
  {
    v53 = (uint64_t)v119;
    if (v52 >> 60 != 15)
      goto LABEL_29;
  }
  else
  {
    v53 = (uint64_t)v119;
    if (v52 >> 60 == 15)
      goto LABEL_29;
    sub_1000339F4(v48, v49);
    sub_1000339F4(v51, v52);
    _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(v48, v49);
    v55 = v54;
    sub_10000E658(v51, v52);
    sub_10000E658(v48, v49);
    v47 = v105;
    if ((v55 & 1) == 0)
      return 0;
  }
  v56 = v45[8];
  v48 = *(_QWORD *)&v47[v56];
  v49 = *(_QWORD *)&v47[v56 + 8];
  v57 = (uint64_t *)&v44[v56];
  v51 = *v57;
  v52 = v57[1];
  if (v49 >> 60 == 15)
  {
    if (v52 >> 60 != 15)
      goto LABEL_29;
  }
  else
  {
    if (v52 >> 60 == 15)
      goto LABEL_29;
    sub_1000339F4(v48, v49);
    sub_1000339F4(v51, v52);
    _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(v48, v49);
    v59 = v58;
    sub_10000E658(v51, v52);
    sub_10000E658(v48, v49);
    v47 = v105;
    if ((v59 & 1) == 0)
      return 0;
  }
  v60 = v45[9];
  v48 = *(_QWORD *)&v47[v60];
  v49 = *(_QWORD *)&v47[v60 + 8];
  v61 = (uint64_t *)&v44[v60];
  v51 = *v61;
  v52 = v61[1];
  if (v49 >> 60 == 15)
  {
    if (v52 >> 60 == 15)
      goto LABEL_32;
LABEL_29:
    sub_1000339F4(v48, v49);
    sub_1000339F4(v51, v52);
    sub_10000E658(v48, v49);
    sub_10000E658(v51, v52);
    return 0;
  }
  if (v52 >> 60 == 15)
    goto LABEL_29;
  sub_1000339F4(v48, v49);
  sub_1000339F4(v51, v52);
  _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(v48, v49);
  v64 = v63;
  sub_10000E658(v51, v52);
  sub_10000E658(v48, v49);
  v47 = v105;
  if ((v64 & 1) == 0)
    return 0;
LABEL_32:
  v65 = v117;
  sub_100033B48((uint64_t)&v47[v45[10]], (uint64_t)v117, &qword_10040E1F0);
  v66 = v116;
  sub_100033B48((uint64_t)&v44[v45[10]], (uint64_t)v116, &qword_10040E1F0);
  v67 = v118;
  v68 = (uint64_t)&v118[*(int *)(v113 + 48)];
  sub_100033B48((uint64_t)v65, (uint64_t)v118, &qword_10040E1F0);
  sub_100033B48((uint64_t)v66, v68, &qword_10040E1F0);
  v69 = v114;
  v70 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v114 + 48);
  v71 = v102;
  if (v70((uint64_t)v67, 1, v102) == 1)
  {
    sub_100033A84((uint64_t)v66, &qword_10040E1F0);
    sub_100033A84((uint64_t)v65, &qword_10040E1F0);
    v72 = v70(v68, 1, v71);
    v73 = (uint64_t)v101;
    v74 = v115;
    if (v72 == 1)
    {
      sub_100033A84((uint64_t)v118, &qword_10040E1F0);
      goto LABEL_39;
    }
LABEL_37:
    sub_100033A84((uint64_t)v118, (uint64_t *)&unk_10040E340);
    return 0;
  }
  v75 = v112;
  sub_100033B48((uint64_t)v67, (uint64_t)v112, &qword_10040E1F0);
  v76 = v70(v68, 1, v71);
  v74 = v115;
  if (v76 == 1)
  {
    sub_100033A84((uint64_t)v116, &qword_10040E1F0);
    sub_100033A84((uint64_t)v117, &qword_10040E1F0);
    (*(void (**)(_BYTE *, uint64_t))(v69 + 8))(v75, v71);
    goto LABEL_37;
  }
  v77 = v75;
  v78 = v111;
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v69 + 32))(v111, v68, v71);
  v79 = sub_100011DE4(&qword_100404EB0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v80 = dispatch thunk of static Equatable.== infix(_:_:)(v77, v78, v71, v79);
  v81 = *(void (**)(_BYTE *, uint64_t))(v69 + 8);
  v81(v78, v71);
  sub_100033A84((uint64_t)v116, &qword_10040E1F0);
  sub_100033A84((uint64_t)v117, &qword_10040E1F0);
  v73 = (uint64_t)v101;
  v81(v77, v71);
  sub_100033A84((uint64_t)v118, &qword_10040E1F0);
  if ((v80 & 1) == 0)
    return 0;
LABEL_39:
  v82 = v105;
  if ((sub_100088DC8(*(_QWORD *)&v105[v45[11]], *(_QWORD *)&v44[v45[11]]) & 1) == 0)
    return 0;
  sub_100033B48((uint64_t)&v82[v45[12]], (uint64_t)v74, (uint64_t *)&unk_10040DAB0);
  sub_100033B48((uint64_t)&v44[v45[12]], v53, (uint64_t *)&unk_10040DAB0);
  v83 = v73 + *(int *)(v108 + 48);
  sub_100033B48((uint64_t)v74, v73, (uint64_t *)&unk_10040DAB0);
  sub_100033B48(v53, v83, (uint64_t *)&unk_10040DAB0);
  v84 = v110;
  v85 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v109 + 48);
  if (v85(v73, 1, v110) == 1)
  {
    sub_100033A84(v53, (uint64_t *)&unk_10040DAB0);
    sub_100033A84((uint64_t)v74, (uint64_t *)&unk_10040DAB0);
    if (v85(v83, 1, v84) == 1)
    {
      sub_100033A84(v73, (uint64_t *)&unk_10040DAB0);
      goto LABEL_43;
    }
LABEL_48:
    sub_100033A84(v73, &qword_10040B4D8);
    return 0;
  }
  v90 = v107;
  sub_100033B48(v73, (uint64_t)v107, (uint64_t *)&unk_10040DAB0);
  if (v85(v83, 1, v84) == 1)
  {
    sub_100033A84(v53, (uint64_t *)&unk_10040DAB0);
    sub_100033A84((uint64_t)v115, (uint64_t *)&unk_10040DAB0);
    sub_100063824((uint64_t)v90, type metadata accessor for NANInternetSharingStatistics.Requester);
    goto LABEL_48;
  }
  v91 = v106;
  sub_100033AC0(v83, (uint64_t)v106, type metadata accessor for NANInternetSharingStatistics.Requester);
  if ((static DispatchTimeInterval.== infix(_:_:)(v90, v91) & 1) == 0)
  {
    sub_100063824((uint64_t)v91, type metadata accessor for NANInternetSharingStatistics.Requester);
    sub_100033A84(v53, (uint64_t *)&unk_10040DAB0);
    sub_100033A84((uint64_t)v115, (uint64_t *)&unk_10040DAB0);
    sub_100063824((uint64_t)v90, type metadata accessor for NANInternetSharingStatistics.Requester);
    sub_100033A84(v73, (uint64_t *)&unk_10040DAB0);
    return 0;
  }
  v92 = *(int *)(v84 + 20);
  v93 = (uint64_t)v90;
  v94 = (uint64_t)v91;
  v95 = v90[v92];
  v96 = v73;
  v97 = *(unsigned __int8 *)(v94 + v92);
  sub_100063824(v94, type metadata accessor for NANInternetSharingStatistics.Requester);
  sub_100033A84(v53, (uint64_t *)&unk_10040DAB0);
  sub_100033A84((uint64_t)v115, (uint64_t *)&unk_10040DAB0);
  sub_100063824(v93, type metadata accessor for NANInternetSharingStatistics.Requester);
  sub_100033A84(v96, (uint64_t *)&unk_10040DAB0);
  if (v95 != v97)
    return 0;
LABEL_43:
  v86 = v45[13];
  v87 = (double *)&v105[v86];
  v88 = v105[v86 + 24];
  v89 = &v44[v86];
  if ((v88 & 1) != 0)
  {
    if ((v89[24] & 1) == 0)
      return 0;
  }
  else if ((v89[24] & 1) != 0
         || *v87 != *(double *)v89
         || v87[1] != *((double *)v89 + 1)
         || v87[2] != *((double *)v89 + 2))
  {
    return 0;
  }
  return 1;
}

uint64_t _s7CoreP2P12NANAttributeO13AttributeTypeO8rawValueAESgs5UInt8V_tcfC_0(char a1)
{
  if ((a1 + 35) > 0x4Fu)
    return 46;
  else
    return asc_10035BC60[(char)(a1 + 35)];
}

uint64_t _s7CoreP2P12NANAttributeO23CustomDeviceInformationV12PlatformTypeO8rawValueAGSgs5UInt8V_tcfC_0(uint64_t result)
{
  if (result >= 6u)
    return 6;
  else
    return result;
}

uint64_t sub_1001D4268(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v3 = sub_100012C44(&qword_10040B5B8);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin();
  v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  sub_10003259C(a1, v7);
  v9 = sub_1001DC63C();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for NANAttribute.ExtendedP2POperation.CodingKeys, &type metadata for NANAttribute.ExtendedP2POperation.CodingKeys, v9, v7, v8);
  if (v1)
    return sub_100014430(a1);
  HIBYTE(v28) = 0;
  v10 = sub_1001EE514();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v28, &type metadata for NANAttribute.P2POperation.DeviceRole, (char *)&v28 + 7, v3, &type metadata for NANAttribute.P2POperation.DeviceRole, v10);
  v11 = v28;
  HIBYTE(v28) = 1;
  v12 = sub_10003A65C();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v28, &type metadata for WiFiAddress, (char *)&v28 + 7, v3, &type metadata for WiFiAddress, v12);
  v26 = v28;
  v24 = v11;
  v25 = BYTE1(v28);
  v27 = BYTE2(v28);
  v13 = BYTE3(v28);
  v14 = BYTE4(v28);
  v15 = BYTE5(v28);
  HIBYTE(v28) = 2;
  v16 = sub_1001EE48C();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v28, &type metadata for NonNANOperatingChannelInformation, (char *)&v28 + 7, v3, &type metadata for NonNANOperatingChannelInformation, v16);
  v21 = v15;
  v22 = v14;
  v23 = v13;
  v17 = v28;
  HIBYTE(v28) = 3;
  v18 = sub_1001EE4D0();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v28, &type metadata for NonNANBeaconInformation, (char *)&v28 + 7, v3, &type metadata for NonNANBeaconInformation, v18);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  sub_100014430(a1);
  return v24 | (v26 << 8) | (v25 << 16) | (v27 << 24) | (v23 << 32) | (v22 << 40) | (v21 << 48) | (v17 << 56);
}

uint64_t sub_1001D44DC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;

  v3 = sub_100012C44(&qword_10040B710);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin();
  v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  sub_10003259C(a1, v7);
  v9 = sub_1001DA9B8();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for NANAttribute.P2POperation.CodingKeys, &type metadata for NANAttribute.P2POperation.CodingKeys, v9, v7, v8);
  if (v1)
    return sub_100014430(a1);
  v23 = 0;
  v10 = sub_1001EE514();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v22, &type metadata for NANAttribute.P2POperation.DeviceRole, &v23, v3, &type metadata for NANAttribute.P2POperation.DeviceRole, v10);
  v11 = v22;
  v23 = 1;
  v12 = sub_10003A65C();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v22, &type metadata for WiFiAddress, &v23, v3, &type metadata for WiFiAddress, v12);
  v13 = v22;
  v14 = BYTE1(v22);
  v21 = BYTE2(v22);
  v20 = BYTE3(v22);
  v19 = BYTE4(v22);
  v18 = BYTE5(v22);
  v23 = 2;
  v15 = sub_1001EEAB0();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v22, &type metadata for DeprecatedNANAvailability, &v23, v3, &type metadata for DeprecatedNANAvailability, v15);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  sub_100014430(a1);
  return v11 | (v13 << 8) | (v14 << 16) | (v21 << 24) | (v20 << 32) | (v19 << 40) | (v18 << 48);
}

uint64_t sub_1001D4704(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;

  v3 = sub_100012C44(&qword_10040B648);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin();
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  sub_10003259C(a1, v7);
  v9 = sub_1001DBB2C();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for NANAttribute.DataCluster.CodingKeys, &type metadata for NANAttribute.DataCluster.CodingKeys, v9, v7, v8);
  if (v1)
    return sub_100014430(a1);
  v22 = 0;
  v10 = sub_10003A65C();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v21, &type metadata for WiFiAddress, &v22, v3, &type metadata for WiFiAddress, v10);
  v11 = v21;
  v12 = BYTE4(v21);
  v13 = BYTE5(v21);
  v22 = 1;
  v14 = sub_1001EE7BC();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v21, &type metadata for NANAttribute.DataCluster.Control, &v22, v3, &type metadata for NANAttribute.DataCluster.Control, v14);
  v19 = v21;
  v20 = v11;
  v15 = sub_100012C44(&qword_10040A710);
  v22 = 2;
  v16 = sub_1000934A0(&qword_10040B518, &qword_10040A710, (uint64_t (*)(void))sub_1001EE2B0, (const char *)&protocol conformance descriptor for <A> [A]);
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v21, v15, &v22, v3, v15, v16);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  sub_100014430(a1);
  return v20 | (v12 << 32) | (v13 << 40) | (v19 << 48);
}

uint64_t sub_1001D490C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned __int8 v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;

  v3 = sub_100012C44(&qword_10040B658);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin();
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  sub_10003259C(a1, v7);
  v9 = sub_1001DBA60();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for NANAttribute.Availability.CodingKeys, &type metadata for NANAttribute.Availability.CodingKeys, v9, v7, v8);
  if (v1)
    return sub_100014430(a1);
  BYTE3(v19) = 0;
  v10 = KeyedDecodingContainer.decode(_:forKey:)((char *)&v19 + 3, v3);
  BYTE2(v19) = 1;
  v11 = sub_1001EE800();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v19, &type metadata for NANAttribute.Availability.Control, (char *)&v19 + 2, v3, &type metadata for NANAttribute.Availability.Control, v11);
  v12 = (unsigned __int16)v19;
  v13 = sub_100012C44(&qword_10040A6E0);
  v18 = 2;
  v14 = sub_1000934A0(&qword_10040B668, &qword_10040A6E0, (uint64_t (*)(void))sub_1001EE844, (const char *)&protocol conformance descriptor for <A> [A]);
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v17, v13, &v18, v3, v13, v14);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  sub_100014430(a1);
  return v10 | (v12 << 16);
}

uint64_t sub_1001D4AE8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v3 = sub_100012C44(&qword_10040B5B0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin();
  v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  sub_10003259C(a1, v7);
  v9 = sub_1001DC680();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for NANAttribute.ExtendedIBSS.CodingKeys, &type metadata for NANAttribute.ExtendedIBSS.CodingKeys, v9, v7, v8);
  if (v1)
    return sub_100014430(a1);
  HIBYTE(v25) = 0;
  v10 = sub_10003A65C();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v25, &type metadata for WiFiAddress, (char *)&v25 + 7, v3, &type metadata for WiFiAddress, v10);
  v24 = v25;
  v11 = BYTE4(v25);
  v12 = BYTE5(v25);
  HIBYTE(v25) = 1;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v25, &type metadata for WiFiAddress, (char *)&v25 + 7, v3, &type metadata for WiFiAddress, v10);
  v22 = v11;
  v23 = v12;
  v13 = v25;
  v14 = BYTE1(v25);
  v15 = *(unsigned int *)((char *)&v25 + 2);
  HIBYTE(v25) = 2;
  v16 = sub_1001EE48C();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v25, &type metadata for NonNANOperatingChannelInformation, (char *)&v25 + 7, v3, &type metadata for NonNANOperatingChannelInformation, v16);
  v19 = v14;
  v20 = v13;
  v21 = v15;
  HIBYTE(v25) = 3;
  v17 = sub_1001EE4D0();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v25, &type metadata for NonNANBeaconInformation, (char *)&v25 + 7, v3, &type metadata for NonNANBeaconInformation, v17);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  sub_100014430(a1);
  return v24 | (v22 << 32) | (v23 << 40) | (v20 << 48) | (v19 << 56);
}

uint64_t sub_1001D4D44(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;

  v3 = sub_100012C44(&qword_10040B598);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin();
  v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  sub_10003259C(a1, v7);
  v9 = sub_1001DC6C4();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for NANAttribute.ExtendedMesh.CodingKeys, &type metadata for NANAttribute.ExtendedMesh.CodingKeys, v9, v7, v8);
  if (v1)
    return sub_100014430(a1);
  v28 = 0;
  v10 = sub_10003A65C();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v27, &type metadata for WiFiAddress, &v28, v3, &type metadata for WiFiAddress, v10);
  v11 = v27;
  v12 = BYTE4(v27);
  v13 = BYTE5(v27);
  v28 = 1;
  v14 = sub_1001EE48C();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v27, &type metadata for NonNANOperatingChannelInformation, &v28, v3, &type metadata for NonNANOperatingChannelInformation, v14);
  v24 = v13;
  v25 = v12;
  v26 = v11;
  v15 = v27;
  v16 = BYTE1(v27);
  v17 = BYTE2(v27);
  v28 = 2;
  v18 = sub_1001EE4D0();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v27, &type metadata for NonNANBeaconInformation, &v28, v3, &type metadata for NonNANBeaconInformation, v18);
  v21 = v17;
  v22 = v16;
  v23 = v15;
  v28 = 3;
  v19 = sub_1001DCF28();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v27, &type metadata for BinaryDecoder.DataCopy, &v28, v3, &type metadata for BinaryDecoder.DataCopy, v19);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  sub_100014430(a1);
  return v26 | (v25 << 32) | (v24 << 40) | (v23 << 48) | (v22 << 56);
}

uint64_t sub_1001D4F98(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned __int8 v10;
  int v11;
  uint64_t v13;
  char v14;
  char v15;

  v3 = sub_100012C44(&qword_10040B630);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin();
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  sub_10003259C(a1, v7);
  v9 = sub_1001DC3D8();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for NANAttribute.DeviceLinkQoS.CodingKeys, &type metadata for NANAttribute.DeviceLinkQoS.CodingKeys, v9, v7, v8);
  if (v1)
    return sub_100014430(a1);
  v15 = 0;
  v10 = KeyedDecodingContainer.decode(_:forKey:)(&v15, v3);
  v14 = 1;
  v11 = KeyedDecodingContainer.decode(_:forKey:)(&v14, v3);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  sub_100014430(a1);
  return v10 | (v11 << 16);
}

_QWORD *sub_1001D50E8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  _QWORD *v16;

  v3 = sub_100012C44(&qword_10040B760);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin();
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  v9 = sub_10003259C(a1, v7);
  v10 = sub_1001D7BD0();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for NANAttribute.ServiceIDList.CodingKeys, &type metadata for NANAttribute.ServiceIDList.CodingKeys, v10, v7, v8);
  if (v1)
  {
    sub_100014430(a1);
  }
  else
  {
    v11 = sub_100012C44(&qword_10040A508);
    v12 = sub_1000934A0(&qword_10040B768, &qword_10040A508, (uint64_t (*)(void))sub_1001EEB7C, (const char *)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v16, v11, v13, v3, v11, v12);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    v9 = v16;
    sub_100014430(a1);
  }
  return v9;
}

uint64_t sub_1001D5234(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  int v12;
  int v13;
  unint64_t v14;
  uint64_t v16;
  char v17;

  v3 = sub_100012C44(&qword_10040B4E8);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin();
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  sub_10003259C(a1, v7);
  v9 = sub_1001DCC28();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for NANAttribute.VendorSpecific.CodingKeys, &type metadata for NANAttribute.VendorSpecific.CodingKeys, v9, v7, v8);
  if (v1)
    return sub_100014430(a1);
  v17 = 0;
  v10 = sub_10007BA7C();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v16, &type metadata for OUI, &v17, v3, &type metadata for OUI, v10);
  v11 = v16;
  v12 = BYTE1(v16);
  v13 = BYTE2(v16);
  v17 = 1;
  v14 = sub_1001DCF28();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v16, &type metadata for BinaryDecoder.DataCopy, &v17, v3, &type metadata for BinaryDecoder.DataCopy, v14);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  sub_100014430(a1);
  return v11 | (v12 << 8) | (v13 << 16);
}

uint64_t sub_1001D53CC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;

  v3 = sub_100012C44(&qword_10040B6C0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin();
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  sub_10003259C(a1, v7);
  v9 = sub_1001DAC1C();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for NANAttribute.ClusterDiscovery.CodingKeys, &type metadata for NANAttribute.ClusterDiscovery.CodingKeys, v9, v7, v8);
  if (v1)
    return sub_100014430(a1);
  v19 = 0;
  v10 = sub_10003A65C();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v18, &type metadata for WiFiAddress, &v19, v3, &type metadata for WiFiAddress, v10);
  v17 = v18;
  v11 = BYTE4(v18);
  v12 = BYTE5(v18);
  LOBYTE(v18) = 1;
  KeyedDecodingContainer.decode(_:forKey:)(&v18, v3);
  v15 = v11;
  v16 = v12;
  v19 = 2;
  v13 = sub_1001EEA28();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v18, &type metadata for NANMasterRank, &v19, v3, &type metadata for NANMasterRank, v13);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  sub_100014430(a1);
  return v17 | (v15 << 32) | (v16 << 40);
}

unint64_t sub_1001D559C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  char v28;
  uint64_t v29;

  v3 = sub_100012C44(&qword_10040B698);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin();
  v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  sub_10003259C(a1, v7);
  v9 = sub_1001DACA4();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for NANAttribute.DeviceCapability.CodingKeys, &type metadata for NANAttribute.DeviceCapability.CodingKeys, v9, v7, v8);
  if (v1)
    return sub_100014430(a1);
  v28 = 0;
  v10 = sub_1001EE5E0();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v29, &type metadata for NANMapIDs, &v28, v3, &type metadata for NANMapIDs, v10);
  v11 = v29;
  v12 = BYTE1(v29);
  v28 = 1;
  v13 = sub_1001EE918();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v29, &type metadata for NANAttribute.DeviceCapability.CommittedDiscoveryWindowInformation, &v28, v3, &type metadata for NANAttribute.DeviceCapability.CommittedDiscoveryWindowInformation, v13);
  v14 = (unsigned __int16)v29;
  v28 = 2;
  v15 = sub_1000959E8();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v29, &type metadata for NANBitmap.Band, &v28, v3, &type metadata for NANBitmap.Band, v15);
  v26 = v14;
  v16 = v29;
  v28 = 3;
  v17 = sub_1001EE95C();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v29, &type metadata for NANAttribute.DeviceCapability.OperationMode, &v28, v3, &type metadata for NANAttribute.DeviceCapability.OperationMode, v17);
  v25 = v16;
  v18 = v29;
  v28 = 4;
  v19 = sub_1001EE9A0();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v29, &type metadata for NANAttribute.DeviceCapability.AnntenaCount, &v28, v3, &type metadata for NANAttribute.DeviceCapability.AnntenaCount, v19);
  v24 = v18;
  v20 = v29;
  LOBYTE(v29) = 5;
  v27 = KeyedDecodingContainer.decode(_:forKey:)(&v29, v3);
  v23 = v20;
  v28 = 6;
  v21 = sub_1001EE9E4();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v29, &type metadata for NANAttribute.DeviceCapability.Capabilities, &v28, v3, &type metadata for NANAttribute.DeviceCapability.Capabilities, v21);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  sub_100014430(a1);
  return v11 | (v26 << 16) | (v25 << 32) | (v24 << 40) | (v23 << 48) | ((unint64_t)v12 << 8);
}

uint64_t sub_1001D5888(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  int v12;
  unint64_t v13;
  uint64_t v15;
  uint64_t v16;
  char v17;

  v3 = sub_100012C44(&qword_10040B5E0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin();
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  sub_10003259C(a1, v7);
  v9 = sub_1001DC570();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for NANAttribute.ElementContainer.CodingKeys, &type metadata for NANAttribute.ElementContainer.CodingKeys, v9, v7, v8);
  if (v1)
    return sub_100014430(a1);
  v17 = 0;
  v10 = sub_1001EE5E0();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v16, &type metadata for NANMapIDs, &v17, v3, &type metadata for NANMapIDs, v10);
  v11 = v16;
  v12 = BYTE1(v16);
  v17 = 1;
  v13 = sub_1001DCF28();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v16, &type metadata for BinaryDecoder.DataCopy, &v17, v3, &type metadata for BinaryDecoder.DataCopy, v13);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  sub_100014430(a1);
  return v11 | (v12 << 8);
}

uint64_t sub_1001D5A10(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned __int8 v10;
  int v11;
  uint64_t v13;
  char v14;
  char v15;

  v3 = sub_100012C44(&qword_10040B778);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin();
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  sub_10003259C(a1, v7);
  v9 = sub_1001D1494();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for NANAttribute.MasterIndication.CodingKeys, &type metadata for NANAttribute.MasterIndication.CodingKeys, v9, v7, v8);
  if (v1)
  {
    sub_100014430(a1);
  }
  else
  {
    v15 = 0;
    v10 = KeyedDecodingContainer.decode(_:forKey:)(&v15, v3);
    v14 = 1;
    v11 = KeyedDecodingContainer.decode(_:forKey:)(&v14, v3);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    sub_100014430(a1);
    return v10 | (v11 << 8);
  }
  return v7;
}

unint64_t sub_1001D5B60()
{
  unint64_t result;

  result = qword_10040A4E8;
  if (!qword_10040A4E8)
  {
    result = swift_getWitnessTable("QD\t", &type metadata for NANAttribute.Cluster.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040A4E8);
  }
  return result;
}

unint64_t sub_1001D5BA4()
{
  unint64_t result;

  result = qword_10040A4F0;
  if (!qword_10040A4F0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANMasterRank, &type metadata for NANMasterRank);
    atomic_store(result, (unint64_t *)&qword_10040A4F0);
  }
  return result;
}

uint64_t sub_1001D5BE8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  v3 = sub_100012C44(&qword_10040B750);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin();
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  sub_10003259C(a1, v7);
  v9 = sub_1001EEC04();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for NANAttribute.ServiceDescriptor.ServiceFilterControl.CodingKeys, &type metadata for NANAttribute.ServiceDescriptor.ServiceFilterControl.CodingKeys, v9, v7, v8);
  if (v1)
  {
    sub_100014430(a1);
  }
  else
  {
    v10 = sub_100012C44(&qword_100407250);
    HIBYTE(v13) = 0;
    v11 = sub_1000934A0(&qword_100407B40, &qword_100407250, (uint64_t (*)(void))sub_10003A65C, (const char *)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v14, v10, (char *)&v13 + 7, v3, v10, v11);
    v7 = v14;
    BYTE6(v13) = 1;
    swift_bridgeObjectRetain(v14);
    KeyedDecodingContainer.decode(_:forKey:)((char *)&v13 + 6, v3);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    sub_100014430(a1);
    swift_bridgeObjectRelease(v7);
  }
  return v7;
}

_QWORD *sub_1001D5DA4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  _QWORD *v16;

  v3 = sub_100012C44(&qword_10040B510);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin();
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  v9 = sub_10003259C(a1, v7);
  v10 = sub_1001DCA7C();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for NANAttribute.PublicAvailability.CodingKeys, &type metadata for NANAttribute.PublicAvailability.CodingKeys, v10, v7, v8);
  if (v1)
  {
    sub_100014430(a1);
  }
  else
  {
    v11 = sub_100012C44(&qword_10040A710);
    v12 = sub_1000934A0(&qword_10040B518, &qword_10040A710, (uint64_t (*)(void))sub_1001EE2B0, (const char *)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v16, v11, v13, v3, v11, v12);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    v9 = v16;
    sub_100014430(a1);
  }
  return v9;
}

uint64_t sub_1001D5EF0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint8x8_t v3;
  uint8x8_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t result;
  int16x8_t v23;
  int16x8_t v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  int v34;
  char v35;

  v7 = sub_100012C44(&qword_10040B718);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin();
  v10 = &v23.i8[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = a1[3];
  v12 = a1[4];
  sub_10003259C(a1, v11);
  v13 = sub_1001DA8EC();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for NANAttribute.WLANInfrastructure.CodingKeys, &type metadata for NANAttribute.WLANInfrastructure.CodingKeys, v13, v11, v12);
  if (v2)
    return sub_100014430(a1);
  v35 = 0;
  v14 = sub_10003A65C();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v31, &type metadata for WiFiAddress, &v35, v7, &type metadata for WiFiAddress, v14);
  v3.i32[0] = v31;
  v34 = BYTE4(v31);
  v15 = BYTE5(v31);
  v35 = 1;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v31, &type metadata for WiFiAddress, &v35, v7, &type metadata for WiFiAddress, v14);
  v30 = v15;
  v4.i32[0] = v31;
  v16 = BYTE4(v31);
  LODWORD(v14) = BYTE5(v31);
  v35 = 2;
  v17 = sub_1001EEAB0();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v31, &type metadata for DeprecatedNANAvailability, &v35, v7, &type metadata for DeprecatedNANAvailability, v17);
  v28 = v16;
  v29 = v14;
  v26 = BYTE1(v31);
  v27 = v31;
  v25 = BYTE2(v31);
  v18 = v32;
  v35 = 3;
  v19 = v33;
  sub_100031FEC(v32, v33);
  v20 = sub_1001EE59C();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v31, &type metadata for NANAttribute.WLANInfrastructure.DeviceRole, &v35, v7, &type metadata for NANAttribute.WLANInfrastructure.DeviceRole, v20);
  v23 = (int16x8_t)vmovl_u8(v3);
  v24 = (int16x8_t)vmovl_u8(v4);
  (*(void (**)(__int8 *, uint64_t))(v8 + 8))(v10, v7);
  v21 = v31;
  sub_100014430(a1);
  result = sub_10000E614(v18, v19);
  *(_DWORD *)a2 = vmovn_s16(v23).u32[0];
  *(_BYTE *)(a2 + 4) = v34;
  *(_BYTE *)(a2 + 5) = v30;
  *(_DWORD *)(a2 + 6) = vmovn_s16(v24).u32[0];
  *(_BYTE *)(a2 + 10) = v28;
  *(_BYTE *)(a2 + 11) = v29;
  *(_BYTE *)(a2 + 16) = v27;
  *(_BYTE *)(a2 + 17) = v26;
  *(_BYTE *)(a2 + 18) = v25;
  *(_QWORD *)(a2 + 24) = v18;
  *(_QWORD *)(a2 + 32) = v19;
  *(_BYTE *)(a2 + 40) = v21;
  return result;
}

uint64_t sub_1001D61D8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v12;
  char v13;
  uint64_t v14;

  v3 = sub_100012C44(&qword_10040B538);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin();
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  sub_10003259C(a1, v7);
  v9 = sub_1001DC9B0();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for NANAttribute.SharedKeyDescriptor.CodingKeys, &type metadata for NANAttribute.SharedKeyDescriptor.CodingKeys, v9, v7, v8);
  if (!v1)
  {
    LOBYTE(v14) = 0;
    v7 = KeyedDecodingContainer.decode(_:forKey:)(&v14, v3);
    v13 = 1;
    v10 = sub_1001DCF28();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v14, &type metadata for BinaryDecoder.DataCopy, &v13, v3, &type metadata for BinaryDecoder.DataCopy, v10);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  sub_100014430(a1);
  return v7;
}

uint64_t sub_1001D6344(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int v11;
  int v12;
  uint64_t v14;
  char v15;
  char v16;
  uint64_t v17;

  v3 = sub_100012C44(&qword_10040B578);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin();
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  sub_10003259C(a1, v7);
  v9 = sub_1001DC7D4();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for NANAttribute.CipherSuiteInformation.CipherSuite.CodingKeys, &type metadata for NANAttribute.CipherSuiteInformation.CipherSuite.CodingKeys, v9, v7, v8);
  if (v1)
    return sub_100014430(a1);
  v16 = 0;
  v10 = sub_1001EE404();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v17, &type metadata for NANCipherSuite, &v16, v3, &type metadata for NANCipherSuite, v10);
  v11 = v17;
  v15 = 1;
  v12 = KeyedDecodingContainer.decode(_:forKey:)(&v15, v3);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  sub_100014430(a1);
  return v11 | (v12 << 8);
}

uint64_t sub_1001D64A8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  uint64_t v18;

  v2 = sub_100012C44(&qword_10040B558);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin();
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = a1[3];
  v7 = a1[4];
  sub_10003259C(a1, v6);
  v8 = sub_1001DC85C();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for NANAttribute.CipherSuiteInformation.CodingKeys, &type metadata for NANAttribute.CipherSuiteInformation.CodingKeys, v8, v6, v7);
  v17 = 0;
  v9 = sub_1001EE37C();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v18, &type metadata for NANAttribute.CipherSuiteInformation.Capabilities, &v17, v2, &type metadata for NANAttribute.CipherSuiteInformation.Capabilities, v9);
  v10 = v18;
  v11 = sub_100012C44(&qword_10040A840);
  v15 = 1;
  v12 = sub_1000934A0(&qword_10040B568, &qword_10040A840, (uint64_t (*)(void))sub_1001EE3C0, (const char *)&protocol conformance descriptor for <A> [A]);
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v16, v11, &v15, v2, v11, v12);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  sub_100014430(a1);
  return v10;
}

uint64_t sub_1001D6654(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  uint64_t v18;

  v2 = sub_100012C44(&qword_10040B6D8);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin();
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = a1[3];
  v7 = a1[4];
  sub_10003259C(a1, v6);
  v8 = sub_1001DAB50();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for NANAttribute.FurtherAvailabilityMap.CodingKeys, &type metadata for NANAttribute.FurtherAvailabilityMap.CodingKeys, v8, v6, v7);
  v17 = 0;
  v9 = sub_10009584C();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v18, &type metadata for NANMapID, &v17, v2, &type metadata for NANMapID, v9);
  v10 = v18;
  v11 = sub_100012C44(&qword_10040A5F0);
  v15 = 1;
  v12 = sub_1000934A0(&qword_10040B6E0, &qword_10040A5F0, (uint64_t (*)(void))sub_1001EEA6C, (const char *)&protocol conformance descriptor for <A> [A]);
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v16, v11, &v15, v2, v11, v12);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  sub_100014430(a1);
  return v10;
}

unint64_t sub_1001D6800(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  _QWORD v10[3];
  uint64_t v11;
  uint64_t v12;

  v3 = a1[3];
  v4 = a1[4];
  v5 = (unint64_t)sub_10003259C(a1, v3);
  dispatch thunk of Decoder.unkeyedContainer()(v10, v3, v4);
  if (v1)
  {
    sub_100014430(a1);
  }
  else
  {
    v6 = v11;
    v7 = v12;
    sub_100034C68((uint64_t)v10, v11);
    v8 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)(v6, v7);
    if (v8 >= 6u)
      v5 = 0;
    else
      v5 = v8;
    sub_100014430(v10);
    sub_100014430(a1);
  }
  return v5;
}

uint64_t sub_1001D68C8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;

  v3 = sub_100012C44(&qword_10040B6F0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin();
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  sub_10003259C(a1, v7);
  v9 = sub_1001DAB0C();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for NANAttribute.FurtherServiceDiscovery.CodingKeys, &type metadata for NANAttribute.FurtherServiceDiscovery.CodingKeys, v9, v7, v8);
  if (v1)
    return sub_100014430(a1);
  v10 = sub_1001EEAB0();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v17, &type metadata for DeprecatedNANAvailability, v11, v3, &type metadata for DeprecatedNANAvailability, v10);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  v13 = BYTE2(v17);
  v14 = (unsigned __int16)v17;
  sub_100014430(a1);
  if (v13)
    v15 = 0x10000;
  else
    v15 = 0;
  return v14 | v15;
}

uint64_t sub_1001D6A04(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  _DWORD v16[2];
  uint64_t v17;
  int v18;
  char v19;

  v2 = sub_100012C44(&qword_10040B528);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin();
  v5 = (char *)v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = a1[3];
  v7 = a1[4];
  sub_10003259C(a1, v6);
  v8 = sub_1001DC9F4();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for NANAttribute.MulticastScheduleChange.CodingKeys, &type metadata for NANAttribute.MulticastScheduleChange.CodingKeys, v8, v6, v7);
  LOBYTE(v17) = 0;
  v9 = KeyedDecodingContainer.decode(_:forKey:)(&v17, v2);
  LOBYTE(v17) = 1;
  KeyedDecodingContainer.decode(_:forKey:)(&v17, v2);
  v19 = 2;
  v10 = sub_1001EE2F4();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v17, &type metadata for NANAttribute.MulticastScheduleChange.Control, &v19, v2, &type metadata for NANAttribute.MulticastScheduleChange.Control, v10);
  v11 = (unsigned __int16)v17;
  v19 = 3;
  v12 = sub_1001EE1E4();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v17, &type metadata for NANReasonCode, &v19, v2, &type metadata for NANReasonCode, v12);
  v18 = v11;
  v16[1] = v17;
  v14 = sub_100012C44(&qword_10040A710);
  v19 = 4;
  v15 = sub_1000934A0(&qword_10040B518, &qword_10040A710, (uint64_t (*)(void))sub_1001EE2B0, (const char *)&protocol conformance descriptor for <A> [A]);
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v17, v14, &v19, v2, v14, v15);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  sub_100014430(a1);
  return v9;
}

_QWORD *sub_1001D6C5C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  _QWORD *v16;

  v3 = sub_100012C44(&qword_10040B690);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin();
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  v9 = sub_10003259C(a1, v7);
  v10 = sub_1001DAE3C();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for NANAttribute.DeviceCapabilityExtension.CodingKeys, &type metadata for NANAttribute.DeviceCapabilityExtension.CodingKeys, v10, v7, v8);
  if (v1)
  {
    sub_100014430(a1);
  }
  else
  {
    v11 = sub_100012C44(&qword_100406738);
    v12 = sub_1000F08DC(&qword_100407B28, (uint64_t)&protocol witness table for UInt8, (const char *)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v16, v11, v13, v3, v11, v12);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    v9 = v16;
    sub_100014430(a1);
  }
  return v9;
}

uint64_t sub_1001D6DA0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD v20[2];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v3 = sub_100012C44(&qword_10040B5C8);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin();
  v6 = (char *)v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  sub_10003259C(a1, v7);
  v9 = sub_1001EE558();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for NANAttribute.ExtendedWLANInfrastructure.CodingKeys, &type metadata for NANAttribute.ExtendedWLANInfrastructure.CodingKeys, v9, v7, v8);
  if (v1)
    return sub_100014430(a1);
  HIBYTE(v27) = 0;
  v10 = sub_10003A65C();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v27, &type metadata for WiFiAddress, (char *)&v27 + 7, v3, &type metadata for WiFiAddress, v10);
  v26 = v27;
  v11 = BYTE4(v27);
  v12 = BYTE5(v27);
  HIBYTE(v27) = 1;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v27, &type metadata for WiFiAddress, (char *)&v27 + 7, v3, &type metadata for WiFiAddress, v10);
  v24 = v11;
  v25 = v12;
  v13 = v27;
  v14 = BYTE1(v27);
  v15 = *(unsigned int *)((char *)&v27 + 2);
  HIBYTE(v27) = 2;
  v16 = sub_1001EE59C();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v27, &type metadata for NANAttribute.WLANInfrastructure.DeviceRole, (char *)&v27 + 7, v3, &type metadata for NANAttribute.WLANInfrastructure.DeviceRole, v16);
  v21 = v13;
  v22 = v15;
  v23 = v14;
  HIBYTE(v27) = 3;
  v17 = sub_1001EE48C();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v27, &type metadata for NonNANOperatingChannelInformation, (char *)&v27 + 7, v3, &type metadata for NonNANOperatingChannelInformation, v17);
  v20[1] = BYTE2(v27);
  HIBYTE(v27) = 4;
  v18 = sub_1001EE4D0();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v27, &type metadata for NonNANBeaconInformation, (char *)&v27 + 7, v3, &type metadata for NonNANBeaconInformation, v18);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  sub_100014430(a1);
  return v26 | (v24 << 32) | (v25 << 40) | (v21 << 48) | (v23 << 56);
}

_QWORD *sub_1001D7054(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  _QWORD *v16;

  v3 = sub_100012C44(&qword_10040B540);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin();
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  v9 = sub_10003259C(a1, v7);
  v10 = sub_1001DC928();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for NANAttribute.SecurityContextInformation.CodingKeys, &type metadata for NANAttribute.SecurityContextInformation.CodingKeys, v10, v7, v8);
  if (v1)
  {
    sub_100014430(a1);
  }
  else
  {
    v11 = sub_100012C44(&qword_10040A868);
    v12 = sub_1000934A0(&qword_10040B548, &qword_10040A868, (uint64_t (*)(void))sub_1001EE338, (const char *)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v16, v11, v13, v3, v11, v12);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    v9 = v16;
    sub_100014430(a1);
  }
  return v9;
}

uint64_t sub_1001D71A0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned __int16 v10;
  unsigned __int16 v11;
  uint64_t v13;
  char v14;
  char v15;

  v3 = sub_100012C44(&qword_10040B730);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin();
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  sub_10003259C(a1, v7);
  v9 = sub_1001DA770();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for NANAttribute.ServiceDescriptorExtension.RangeLimit.CodingKeys, &type metadata for NANAttribute.ServiceDescriptorExtension.RangeLimit.CodingKeys, v9, v7, v8);
  if (v1)
  {
    sub_100014430(a1);
  }
  else
  {
    v15 = 0;
    v10 = KeyedDecodingContainer.decode(_:forKey:)(&v15, v3);
    v14 = 1;
    v11 = KeyedDecodingContainer.decode(_:forKey:)(&v14, v3);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    sub_100014430(a1);
    return v10 | (v11 << 16);
  }
  return v7;
}

uint64_t sub_1001D72F0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  char v22;
  char v23;
  char v24;
  uint64_t v25;

  v3 = sub_100012C44(&qword_10040B590);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin();
  v6 = (char *)v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  sub_10003259C(a1, v7);
  v9 = sub_1001DC708();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for NANAttribute.FineTimingMeasurementRangeReport.Entry.CodingKeys, &type metadata for NANAttribute.FineTimingMeasurementRangeReport.Entry.CodingKeys, v9, v7, v8);
  if (v1)
    return sub_100014430(a1);
  BYTE6(v25) = 0;
  v10 = KeyedDecodingContainer.decode(_:forKey:)((char *)&v25 + 6, v3);
  v24 = 1;
  v11 = sub_10003A65C();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v25, &type metadata for WiFiAddress, &v24, v3, &type metadata for WiFiAddress, v11);
  v19 = v25;
  v18 = BYTE1(v25);
  v17 = BYTE2(v25);
  v16 = BYTE3(v25);
  v12 = BYTE4(v25);
  v13 = BYTE5(v25);
  v23 = 2;
  v15[0] = KeyedDecodingContainer.decode(_:forKey:)(&v23, v3);
  v15[1] = v13;
  v15[2] = v12;
  v22 = 3;
  KeyedDecodingContainer.decode(_:forKey:)(&v22, v3);
  v21 = 4;
  KeyedDecodingContainer.decode(_:forKey:)(&v21, v3);
  v20 = 5;
  KeyedDecodingContainer.decode(_:forKey:)(&v20, v3);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  sub_100014430(a1);
  return v10 | (unint64_t)(v19 << 32) | (v18 << 40) | (v17 << 48) | (v16 << 56);
}

uint64_t sub_1001D7564@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint8x8_t v3;
  uint8x8_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char v15;
  unint64_t v16;
  __int16 v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  int16x8_t v22;
  int16x8_t v23;
  int v24;
  int v25;
  _QWORD v26[3];
  int v27;
  char v28;

  v7 = sub_100012C44(&qword_10040B708);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin();
  v10 = &v22.i8[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = a1[3];
  v12 = a1[4];
  sub_10003259C(a1, v11);
  v13 = sub_1001DAA40();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for NANAttribute.IBSS.CodingKeys, &type metadata for NANAttribute.IBSS.CodingKeys, v13, v11, v12);
  if (v2)
    return sub_100014430(a1);
  v28 = 0;
  v14 = sub_10003A65C();
  KeyedDecodingContainer.decode<A>(_:forKey:)(v26, &type metadata for WiFiAddress, &v28, v7, &type metadata for WiFiAddress, v14);
  v3.i32[0] = v26[0];
  v27 = BYTE4(v26[0]);
  v15 = BYTE5(v26[0]);
  v28 = 1;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v26, &type metadata for WiFiAddress, &v28, v7, &type metadata for WiFiAddress, v14);
  LOBYTE(v14) = v27;
  v4.i32[0] = v26[0];
  v24 = BYTE5(v26[0]);
  v25 = BYTE4(v26[0]);
  v28 = 2;
  v16 = sub_1001EEAB0();
  KeyedDecodingContainer.decode<A>(_:forKey:)(v26, &type metadata for DeprecatedNANAvailability, &v28, v7, &type metadata for DeprecatedNANAvailability, v16);
  (*(void (**)(__int8 *, uint64_t))(v8 + 8))(v10, v7);
  v22 = (int16x8_t)vmovl_u8(v3);
  v23 = (int16x8_t)vmovl_u8(v4);
  v17 = v26[0];
  v18 = BYTE2(v26[0]);
  v19 = v26[1];
  v20 = v26[2];
  result = sub_100014430(a1);
  *(_DWORD *)a2 = vmovn_s16(v22).u32[0];
  *(_BYTE *)(a2 + 4) = v14;
  *(_BYTE *)(a2 + 5) = v15;
  *(_DWORD *)(a2 + 6) = vmovn_s16(v23).u32[0];
  *(_BYTE *)(a2 + 10) = v25;
  *(_BYTE *)(a2 + 11) = v24;
  *(_WORD *)(a2 + 16) = v17;
  *(_BYTE *)(a2 + 18) = v18;
  *(_QWORD *)(a2 + 24) = v19;
  *(_QWORD *)(a2 + 32) = v20;
  return result;
}

uint64_t sub_1001D7798@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint8x8_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t result;
  int16x8_t v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;

  v6 = sub_100012C44(&qword_10040B700);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin();
  v9 = &v23.i8[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = a1[3];
  v11 = a1[4];
  sub_10003259C(a1, v10);
  v12 = sub_1001DAA84();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for NANAttribute.Mesh.CodingKeys, &type metadata for NANAttribute.Mesh.CodingKeys, v12, v10, v11);
  if (v2)
    return sub_100014430(a1);
  v32 = 0;
  v13 = sub_10003A65C();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v29, &type metadata for WiFiAddress, &v32, v6, &type metadata for WiFiAddress, v13);
  v3.i32[0] = v29;
  v14 = BYTE4(v29);
  v15 = BYTE5(v29);
  v32 = 1;
  v16 = sub_1001EEAB0();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v29, &type metadata for DeprecatedNANAvailability, &v32, v6, &type metadata for DeprecatedNANAvailability, v16);
  v27 = v15;
  v28 = v14;
  v25 = BYTE1(v29);
  v26 = v29;
  v24 = BYTE2(v29);
  v17 = v30;
  v18 = v31;
  v32 = 2;
  sub_100031FEC(v30, v31);
  v19 = sub_1001DCF28();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v29, &type metadata for BinaryDecoder.DataCopy, &v32, v6, &type metadata for BinaryDecoder.DataCopy, v19);
  v23 = (int16x8_t)vmovl_u8(v3);
  (*(void (**)(__int8 *, uint64_t))(v7 + 8))(v9, v6);
  v20 = v29;
  v21 = v30;
  sub_100031FEC(v17, v18);
  sub_100031FEC(v20, v21);
  sub_10000E614(v17, v18);
  sub_100014430(a1);
  sub_10000E614(v17, v18);
  result = sub_10000E614(v20, v21);
  *(_DWORD *)a2 = vmovn_s16(v23).u32[0];
  *(_BYTE *)(a2 + 4) = v28;
  *(_BYTE *)(a2 + 5) = v27;
  *(_BYTE *)(a2 + 8) = v26;
  *(_BYTE *)(a2 + 9) = v25;
  *(_BYTE *)(a2 + 10) = v24;
  *(_QWORD *)(a2 + 16) = v17;
  *(_QWORD *)(a2 + 24) = v18;
  *(_QWORD *)(a2 + 32) = v20;
  *(_QWORD *)(a2 + 40) = v21;
  return result;
}

uint64_t sub_1001D7A40(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;

  v2 = sub_100012C44(&qword_10040B770);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin();
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = a1[3];
  v7 = a1[4];
  sub_10003259C(a1, v6);
  v8 = sub_1001D5B60();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for NANAttribute.Cluster.CodingKeys, &type metadata for NANAttribute.Cluster.CodingKeys, v8, v6, v7);
  HIBYTE(v12) = 0;
  v9 = sub_1001EEA28();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v13, &type metadata for NANMasterRank, (char *)&v12 + 7, v2, &type metadata for NANMasterRank, v9);
  v10 = v13;
  BYTE6(v12) = 1;
  KeyedDecodingContainer.decode(_:forKey:)((char *)&v12 + 6, v2);
  BYTE5(v12) = 2;
  KeyedDecodingContainer.decode(_:forKey:)((char *)&v12 + 5, v2);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  sub_100014430(a1);
  return v10;
}

unint64_t sub_1001D7BD0()
{
  unint64_t result;

  result = qword_10040A500;
  if (!qword_10040A500)
  {
    result = swift_getWitnessTable(byte_10035B930, &type metadata for NANAttribute.ServiceIDList.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040A500);
  }
  return result;
}

unint64_t sub_1001D7C14()
{
  unint64_t result;

  result = qword_10040A518;
  if (!qword_10040A518)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANServiceName.Hash, &type metadata for NANServiceName.Hash);
    atomic_store(result, (unint64_t *)&qword_10040A518);
  }
  return result;
}

uint64_t sub_1001D7C58(uint64_t result, unint64_t a2, uint64_t a3)
{
  if (BYTE2(a3) != 255)
    return sub_1001D7C70(result, a2, a3, BYTE2(a3) & 1);
  return result;
}

uint64_t sub_1001D7C70(uint64_t result, unint64_t a2, uint64_t a3, char a4)
{
  if ((a4 & 1) != 0)
    return sub_100031FEC(result, a2);
  else
    return swift_bridgeObjectRetain(result);
}

uint64_t sub_1001D7C7C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v16;
  char v17;

  v3 = sub_100012C44(&qword_10040B6D0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin();
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  sub_10003259C(a1, v7);
  v9 = sub_1001DABD8();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for NANAttribute.Ranging.CodingKeys, &type metadata for NANAttribute.Ranging.CodingKeys, v9, v7, v8);
  if (v1)
    return sub_100014430(a1);
  v17 = 0;
  v10 = sub_10003A65C();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v16, &type metadata for WiFiAddress, &v17, v3, &type metadata for WiFiAddress, v10);
  v11 = v16;
  v12 = BYTE4(v16);
  v13 = BYTE5(v16);
  v17 = 1;
  v14 = sub_1001DCF28();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v16, &type metadata for BinaryDecoder.DataCopy, &v17, v3, &type metadata for BinaryDecoder.DataCopy, v14);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  sub_100014430(a1);
  return v11 | (v12 << 32) | (v13 << 40);
}

uint64_t sub_1001D7E10@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint8x8_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t result;
  char v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  char v37;
  char v38;
  unsigned __int32 v39;
  unsigned __int8 v40;
  unsigned __int8 v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD v44[3];
  uint64_t v45;
  uint64_t v46;

  v6 = a1[3];
  v7 = a1[4];
  sub_10003259C(a1, v6);
  dispatch thunk of Decoder.unkeyedContainer()(v44, v6, v7);
  if (v2)
  {
    sub_100014430(a1);
    return sub_100111BBC(4, 0, 0);
  }
  else
  {
    v8 = v45;
    v9 = v46;
    sub_100034C68((uint64_t)v44, v45);
    UnkeyedDecodingContainer.inferredDecode<A>()(v8, (uint64_t)&type metadata for UInt8, v9, (uint64_t)&protocol witness table for UInt8);
    v10 = v45;
    v11 = v46;
    sub_100034C68((uint64_t)v44, v45);
    v12 = sub_100012C44(&qword_10040A688);
    v13 = sub_100011770(&qword_10040B678, &qword_10040A688, aQ_9);
    UnkeyedDecodingContainer.inferredDecode<A>()(v10, v12, v11, v13);
    v14 = v45;
    v15 = v46;
    sub_100034C68((uint64_t)v44, v45);
    v16 = sub_1001EE1E4();
    UnkeyedDecodingContainer.inferredDecode<A>()(v14, (uint64_t)&type metadata for NANReasonCode, v15, v16);
    v17 = v45;
    v18 = v46;
    sub_100034C68((uint64_t)v44, v45);
    v19 = sub_10003A65C();
    UnkeyedDecodingContainer.inferredDecode<A>()(v17, (uint64_t)&type metadata for WiFiAddress, v18, v19);
    v3.i32[0] = v39;
    v20 = v45;
    v21 = v46;
    sub_100034C68((uint64_t)v44, v45);
    UnkeyedDecodingContainer.inferredDecode<A>()(v20, (uint64_t)&type metadata for UInt8, v21, (uint64_t)&protocol witness table for UInt8);
    v22 = v45;
    v23 = v46;
    sub_100034C68((uint64_t)v44, v45);
    v24 = sub_1001EE8CC();
    UnkeyedDecodingContainer.inferredDecode<A>()(v22, (uint64_t)&type metadata for NANAttribute.Datapath.Control, v23, v24);
    v26 = v39;
    if ((v39 & 8) != 0)
    {
      v27 = v45;
      v28 = v46;
      sub_100034C68((uint64_t)v44, v45);
      v38 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)(v27, v28);
      v26 = v39;
    }
    else
    {
      v38 = 0;
    }
    if ((v26 & 0x10) != 0)
    {
      v37 = v26;
      v31 = v45;
      v30 = v46;
      sub_100034C68((uint64_t)v44, v45);
      dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)(&type metadata for WiFiAddress, &type metadata for WiFiAddress, v19, v31, v30);
      v29 = v39 | ((unint64_t)v40 << 32) | ((unint64_t)v41 << 40);
      v26 = v37;
    }
    else
    {
      v29 = 0;
    }
    if ((v26 & 0x20) != 0)
    {
      v32 = v45;
      v33 = v46;
      sub_100034C68((uint64_t)v44, v45);
      v34 = sub_10007BAC0();
      dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)(&type metadata for Data, &type metadata for Data, v34, v32, v33);
      sub_100031FEC(v42, v43);
      sub_10001F11C((uint64_t)_swiftEmptyArrayStorage);
      v35 = type metadata accessor for BinaryDecoder();
      v36 = (_QWORD *)swift_allocObject(v35, 48, 7);
      v36[5] = &_swiftEmptyDictionarySingleton;
      v36[2] = v42;
      v36[3] = v43;
      __asm { BR              X10 }
    }
    sub_100014430(v44);
    sub_100111B7C(4, 0, 0);
    sub_100014430(a1);
    result = sub_100111BBC(4, 0, 0);
    *(_BYTE *)a2 = v39;
    *(_BYTE *)(a2 + 1) = v39;
    *(_BYTE *)(a2 + 2) = v39;
    *(_DWORD *)(a2 + 3) = vmovn_s16((int16x8_t)vmovl_u8(v3)).u32[0];
    *(_BYTE *)(a2 + 7) = v40;
    *(_BYTE *)(a2 + 8) = v41;
    *(_BYTE *)(a2 + 9) = v39;
    *(_BYTE *)(a2 + 10) = v26;
    *(_BYTE *)(a2 + 11) = v38;
    *(_BYTE *)(a2 + 12) = (v26 & 8) == 0;
    *(_WORD *)(a2 + 17) = WORD2(v29);
    *(_DWORD *)(a2 + 13) = v29;
    *(_BYTE *)(a2 + 19) = (v26 & 0x10) == 0;
    *(_QWORD *)(a2 + 24) = 4;
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 40) = 0;
  }
  return result;
}

void sub_1001D82DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  va_list va1;

  va_start(va1, a9);
  va_start(va, a9);
  v14 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  v18 = va_arg(va1, _QWORD);
  v19 = va_arg(va1, _QWORD);
  *(_QWORD *)(v11 + 32) = (int)v12;
  swift_beginAccess(a1, va1, 1, 0);
  v13 = *(_QWORD *)(v11 + 40);
  *(_QWORD *)(v11 + 40) = a5;
  swift_bridgeObjectRelease(v13);
  v19 = sub_100011DE4((unint64_t *)&qword_100405BB8, (uint64_t (*)(uint64_t))type metadata accessor for BinaryDecoder, (uint64_t)protocol conformance descriptor for BinaryDecoder);
  v14 = v11;
  NANServiceInfo.init(from:)((uint64_t *)va);
  if (v9)
  {
    sub_10000E614(v12, v10);
    JUMPOUT(0x1001D8054);
  }
  sub_10000E614(v12, v10);
  JUMPOUT(0x1001D8164);
}

uint64_t sub_1001D8380(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  _QWORD v24[3];
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;

  v3 = a1[3];
  v4 = a1[4];
  sub_10003259C(a1, v3);
  dispatch thunk of Decoder.unkeyedContainer()(v24, v3, v4);
  if (!v1)
  {
    v5 = v25;
    v6 = v26;
    sub_100034C68((uint64_t)v24, v25);
    UnkeyedDecodingContainer.inferredDecode<A>()(v5, (uint64_t)&type metadata for UInt8, v6, (uint64_t)&protocol witness table for UInt8);
    v7 = v25;
    v8 = v26;
    sub_100034C68((uint64_t)v24, v25);
    v9 = sub_1001EEAF4();
    UnkeyedDecodingContainer.inferredDecode<A>()(v7, (uint64_t)&type metadata for NANAttribute.ServiceDescriptorExtension.Control, v8, v9);
    if ((v22 & 0x100) != 0)
    {
      v11 = v25;
      v12 = v26;
      sub_100034C68((uint64_t)v24, v25);
      v13 = sub_1001EEB38();
      dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)(&type metadata for NANAttribute.ServiceDescriptorExtension.RangeLimit, &type metadata for NANAttribute.ServiceDescriptorExtension.RangeLimit, v13, v11, v12);
      if ((v22 & 0x200) == 0)
        goto LABEL_6;
    }
    else if ((v22 & 0x200) == 0)
    {
LABEL_6:
      v27 = (unsigned __int16)v22;
      v28 = v22;
      goto LABEL_9;
    }
    v14 = v25;
    v15 = v26;
    sub_100034C68((uint64_t)v24, v25);
    dispatch thunk of UnkeyedDecodingContainer.decode(_:)(v14, v15);
    v27 = (unsigned __int16)v22;
    v28 = v22;
LABEL_9:
    v16 = sub_100012C44(&qword_100406668);
    v17 = v25;
    v18 = v26;
    sub_100034C68((uint64_t)v24, v25);
    v19 = sub_100011770(&qword_100406670, &qword_100406668, protocol conformance descriptor for LengthValue<A>);
    dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)(v16, v16, v19, v17, v18);
    sub_100031FEC(v22, v23);
    sub_10001F11C((uint64_t)_swiftEmptyArrayStorage);
    v20 = type metadata accessor for BinaryDecoder();
    v21 = (_QWORD *)swift_allocObject(v20, 48, 7);
    v21[5] = &_swiftEmptyDictionarySingleton;
    v21[2] = v22;
    v21[3] = v23;
    __asm { BR              X10 }
  }
  sub_100014430(a1);
  return sub_100111BBC(4, 0, 0);
}

uint64_t sub_1001D8758(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v16[3];
  uint64_t v17;
  uint64_t v18;

  v3 = a1[3];
  v4 = a1[4];
  sub_10003259C(a1, v3);
  dispatch thunk of Decoder.unkeyedContainer()(v16, v3, v4);
  if (!v1)
  {
    v5 = v17;
    v6 = v18;
    sub_100034C68((uint64_t)v16, v17);
    LOWORD(v6) = dispatch thunk of UnkeyedDecodingContainer.decode(_:)(v5, v6);
    v7 = v17;
    v8 = v18;
    sub_100034C68((uint64_t)v16, v17);
    dispatch thunk of UnkeyedDecodingContainer.decode(_:)(v7, v8);
    v9 = v17;
    v10 = v18;
    sub_100034C68((uint64_t)v16, v17);
    UnkeyedDecodingContainer.inferredDecode<A>()(v9, (uint64_t)&type metadata for UInt8, v10, (uint64_t)&protocol witness table for UInt8);
    v11 = (unsigned __int16)v6;
    v12 = v17;
    v13 = v18;
    sub_100034C68((uint64_t)v16, v17);
    UnkeyedDecodingContainer.decodeData(with:)(v11, v12, v13);
    __asm { BR              X10 }
  }
  return sub_100014430(a1);
}

void sub_1001D88EC(uint64_t a1, ...)
{
  _QWORD *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  va_list va;

  va_start(va, a1);
  v4 = Data.subdata(in:)(0, BYTE6(v3), v2, v3);
  v6 = v5;
  sub_10000E614(v2, v3);
  sub_100031FEC(v4, v6);
  sub_10000E614(v2, v3);
  sub_100014430((uint64_t *)va);
  sub_100014430(v1);
  sub_10000E614(v4, v6);
  JUMPOUT(0x1001D8898);
}

uint64_t sub_1001D8994(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD v18[3];
  uint64_t v19;
  uint64_t v20;

  v3 = a1[3];
  v4 = a1[4];
  sub_10003259C(a1, v3);
  dispatch thunk of Decoder.unkeyedContainer()(v18, v3, v4);
  if (v1)
  {
    sub_100014430(a1);
  }
  else
  {
    v5 = v19;
    v6 = v20;
    sub_100034C68((uint64_t)v18, v19);
    v7 = sub_1001EE26C();
    dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)(&type metadata for NANAttribute.PairingIdentityResolution.CipherVersion, &type metadata for NANAttribute.PairingIdentityResolution.CipherVersion, v7, v5, v6);
    v8 = v19;
    v9 = v20;
    sub_100034C68((uint64_t)v18, v19);
    v3 = UnkeyedDecodingContainer.decodeData(with:)(8, v8, v9);
    v12 = v11;
    v13 = v19;
    v14 = v20;
    sub_100034C68((uint64_t)v18, v19);
    sub_100031FEC(v3, v12);
    v15 = UnkeyedDecodingContainer.decodeData(with:)(8, v13, v14);
    v17 = v16;
    sub_100031FEC(v15, v16);
    sub_100014430(v18);
    sub_100031FEC(v3, v12);
    sub_100031FEC(v15, v17);
    sub_10000E614(v15, v17);
    sub_10000E614(v3, v12);
    sub_100014430(a1);
    sub_10000E614(v3, v12);
    sub_10000E614(v15, v17);
  }
  return v3;
}

uint64_t sub_1001D8B74@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t result;
  int v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  char v42;
  uint64_t v43;
  _QWORD v44[3];
  uint64_t v45;
  uint64_t v46;
  int v47;
  __int16 v48;

  v5 = a1[3];
  v6 = a1[4];
  sub_10003259C(a1, v5);
  dispatch thunk of Decoder.unkeyedContainer()(v44, v5, v6);
  if (v2)
  {
    sub_100014430(a1);
    return sub_100128024(0, 0, 0, 0xF000000000000000);
  }
  else
  {
    v7 = v45;
    v8 = v46;
    sub_100034C68((uint64_t)v44, v45);
    UnkeyedDecodingContainer.inferredDecode<A>()(v7, (uint64_t)&type metadata for UInt8, v8, (uint64_t)&protocol witness table for UInt8);
    v9 = v48;
    v10 = v45;
    v11 = v46;
    sub_100034C68((uint64_t)v44, v45);
    v12 = sub_100012C44(&qword_10040A8D0);
    v13 = sub_100011770(&qword_10040B4F0, &qword_10040A8D0, aQ_9);
    UnkeyedDecodingContainer.inferredDecode<A>()(v10, v12, v11, v13);
    v14 = v48;
    v15 = v45;
    v16 = v46;
    sub_100034C68((uint64_t)v44, v45);
    v17 = sub_1001EE1E4();
    UnkeyedDecodingContainer.inferredDecode<A>()(v15, (uint64_t)&type metadata for NANReasonCode, v16, v17);
    v19 = v48;
    if (sub_10007CD0C(4uLL, 4, v14) == 2)
    {
      v20 = sub_10007CD0C(0, 4, v14);
      if (v20 == 2)
      {
        v47 = v19;
        v27 = v45;
        v28 = v46;
        sub_100034C68((uint64_t)v44, v45);
        LOWORD(v21) = dispatch thunk of UnkeyedDecodingContainer.decode(_:)(v27, v28);
        v29 = v45;
        v30 = v46;
        sub_100034C68((uint64_t)v44, v45);
        v41 = v14;
        v42 = v9;
        v31 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)(v29, v30);
        v32 = v45;
        v33 = v46;
        sub_100034C68((uint64_t)v44, v45);
        v23 = UnkeyedDecodingContainer.decodeData(with:)(v31, v32, v33);
        v24 = v34;
        v22 = 0;
        v21 = (unsigned __int16)v21;
      }
      else
      {
        v35 = v45;
        v36 = v46;
        sub_100034C68((uint64_t)v44, v45);
        v37 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)(v35, v36);
        v38 = v45;
        v39 = v46;
        sub_100034C68((uint64_t)v44, v45);
        v23 = UnkeyedDecodingContainer.decodeData(with:)(v37, v38, v39);
        v24 = v40;
        v47 = v19;
        v41 = v14;
        v42 = v9;
        v21 = 0;
        v22 = 1;
      }
    }
    else
    {
      v47 = v19;
      v41 = v14;
      v42 = v9;
      v21 = 0;
      v22 = 0;
      v23 = 0;
      v24 = 0xF000000000000000;
    }
    v25 = v45;
    v43 = v46;
    sub_100034C68((uint64_t)v44, v45);
    v26 = sub_1001EE228();
    UnkeyedDecodingContainer.inferredDecode<A>()(v25, (uint64_t)&type metadata for NANAttribute.PairingBootstrapping.Method, v43, v26);
    LOWORD(v25) = v48;
    sub_100014430(v44);
    sub_1001218A8(v21, v22, v23, v24);
    sub_100014430(a1);
    result = sub_100128024(v21, v22, v23, v24);
    *(_BYTE *)a2 = v42;
    *(_BYTE *)(a2 + 1) = v41;
    *(_BYTE *)(a2 + 2) = v47;
    *(_QWORD *)(a2 + 8) = v21;
    *(_QWORD *)(a2 + 16) = v22;
    *(_QWORD *)(a2 + 24) = v23;
    *(_QWORD *)(a2 + 32) = v24;
    *(_WORD *)(a2 + 40) = v25;
  }
  return result;
}

unint64_t sub_1001D8FA4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned __int16 v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;
  _QWORD v13[3];
  uint64_t v14;
  uint64_t v15;

  v3 = a1[3];
  v4 = a1[4];
  sub_10003259C(a1, v3);
  dispatch thunk of Decoder.unkeyedContainer()(v13, v3, v4);
  if (v1)
    return sub_100014430(a1);
  v5 = v14;
  v6 = v15;
  sub_100034C68((uint64_t)v13, v14);
  v7 = sub_1001EE6AC();
  UnkeyedDecodingContainer.inferredDecode<A>()(v5, (uint64_t)&type metadata for NANAttribute.RangingInformation.LocationInformation, v6, v7);
  if ((v12 & 8) != 0)
  {
    v10 = v14;
    v11 = v15;
    sub_100034C68((uint64_t)v13, v14);
    v9 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)(v10, v11);
  }
  else
  {
    v9 = 0;
  }
  sub_100014430(v13);
  sub_100014430(a1);
  return ((unint64_t)v9 << 16) | ((unint64_t)((v12 & 8) == 0) << 32) | v12;
}

uint64_t sub_1001D90D4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  char v34;
  unint64_t v35;
  __int16 v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t result;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(char *, uint64_t, uint64_t);
  unint64_t v49;
  char v50;
  __n128 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void (*v64)(char *, uint64_t, uint64_t);
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _BYTE v72[24];
  _QWORD v73[4];
  unsigned int v74;
  unsigned __int8 v75;
  unsigned __int16 v76;
  uint64_t v77;
  _OWORD v78[2];
  _BYTE v79[12];
  __int16 v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  char v84;

  v3 = type metadata accessor for CodingUserInfoKey(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin();
  v6 = (char *)&v62 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v8 = (char *)&v62 - v7;
  v84 = 1;
  v9 = a1[3];
  v10 = a1[4];
  sub_10003259C(a1, v9);
  dispatch thunk of Decoder.unkeyedContainer()(v79, v9, v10);
  if (v1)
    return sub_100014430(a1);
  v11 = v81;
  v12 = v82;
  sub_100034C68((uint64_t)v79, v81);
  UnkeyedDecodingContainer.inferredDecode<A>()(v11, (uint64_t)&type metadata for UInt8, v12, (uint64_t)&protocol witness table for UInt8);
  v13 = v74;
  v14 = v81;
  v15 = v82;
  sub_100034C68((uint64_t)v79, v81);
  UnkeyedDecodingContainer.inferredDecode<A>()(v14, (uint64_t)&type metadata for UInt8, v15, (uint64_t)&protocol witness table for UInt8);
  v71 = v13;
  v16 = v74;
  v17 = v81;
  v18 = v82;
  sub_100034C68((uint64_t)v79, v81);
  UnkeyedDecodingContainer.inferredDecode<A>()(v17, (uint64_t)&type metadata for UInt32, v18, (uint64_t)&protocol witness table for UInt32);
  v70 = v16;
  v19 = v74;
  v20 = v81;
  v21 = v82;
  sub_100034C68((uint64_t)v79, v81);
  UnkeyedDecodingContainer.inferredDecode<A>()(v20, (uint64_t)&type metadata for UInt32, v21, (uint64_t)&protocol witness table for UInt32);
  v69 = v19;
  v22 = v74;
  v23 = v81;
  v24 = v82;
  sub_100034C68((uint64_t)v79, v81);
  UnkeyedDecodingContainer.inferredDecode<A>()(v23, (uint64_t)&type metadata for UInt32, v24, (uint64_t)&protocol witness table for UInt32);
  v68 = v22;
  v25 = v74;
  v26 = v81;
  v27 = v82;
  sub_100034C68((uint64_t)v79, v81);
  UnkeyedDecodingContainer.inferredDecode<A>()(v26, (uint64_t)&type metadata for UInt8, v27, (uint64_t)&protocol witness table for UInt8);
  v66 = v25;
  LODWORD(v25) = v74;
  v28 = v81;
  v67 = v82;
  sub_100034C68((uint64_t)v79, v81);
  v29 = sub_1001EE6F0();
  UnkeyedDecodingContainer.inferredDecode<A>()(v28, (uint64_t)&type metadata for NANAttribute.UnalignedSchedule.UnalignedWindowOverwrite, v67, v29);
  v83 = v25;
  v30 = v74;
  v31 = v81;
  v67 = v82;
  sub_100034C68((uint64_t)v79, v81);
  v32 = sub_1001EE734();
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)(&type metadata for NANAttribute.UnalignedSchedule.UnalignedWindowControl, &type metadata for NANAttribute.UnalignedSchedule.UnalignedWindowControl, v32, v31, v67);
  v65 = v8;
  LODWORD(v28) = v74;
  v84 = 0;
  v33 = sub_10007CD0C(0, 2, v74);
  LODWORD(v67) = v28;
  v34 = 0;
  v35 = 0;
  v36 = -256;
  switch(v33)
  {
    case 0:
      v37 = v81;
      v38 = v82;
      sub_100034C68((uint64_t)v79, v81);
      v39 = sub_1000959E8();
      UnkeyedDecodingContainer.inferredDecode<A>()(v37, (uint64_t)&type metadata for NANBitmap.Band, v38, v39);
      v34 = 0;
      v36 = 0;
      v35 = v74;
      goto LABEL_17;
    case 1:
      v41 = v81;
      v42 = v82;
      sub_100034C68((uint64_t)v79, v81);
      v43 = sub_100095A2C();
      UnkeyedDecodingContainer.inferredDecode<A>()(v41, (uint64_t)&type metadata for NANBitmap.Channel, v42, v43);
      v34 = 0;
      v35 = v74 | ((unint64_t)HIWORD(v74) << 16) | ((unint64_t)v75 << 32) | ((unint64_t)v76 << 48);
      v36 = v77 | 0x100;
      goto LABEL_17;
    case 2:
      v44 = a1[3];
      v45 = a1[4];
      sub_10003259C(a1, v44);
      v46 = dispatch thunk of Decoder.userInfo.getter(v44, v45);
      if (qword_100403F40 != -1)
        swift_once(&qword_100403F40, sub_1000C8B68);
      v47 = sub_100014C44(v3, (uint64_t)static CodingUserInfoKey.channelInformationHasAuxillaryBitmap);
      v48 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
      v63 = v47;
      v64 = v48;
      ((void (*)(char *))v48)(v65);
      if (*(_QWORD *)(v46 + 16) && (v49 = sub_10002DA48((uint64_t)v65), (v50 & 1) != 0))
        sub_100014450(*(_QWORD *)(v46 + 56) + 32 * v49, (uint64_t)v78);
      else
        memset(v78, 0, sizeof(v78));
      v51 = swift_bridgeObjectRelease(v46);
      (*(void (**)(char *, uint64_t, __n128))(v4 + 8))(v65, v3, v51);
      sub_100031D80((uint64_t)a1, (uint64_t)&v74);
      v52 = sub_100012C44(&qword_100406690);
      v53 = type metadata accessor for BinaryDecoder();
      v65 = (char *)v52;
      v62 = v53;
      if ((swift_dynamicCast(v73, &v74, v52, v53, 6) & 1) != 0)
      {
        v54 = v73[0];
        v64(v6, v63, v3);
        v73[3] = &type metadata for Bool;
        LOBYTE(v73[0]) = 1;
        swift_beginAccess(v54 + 40, v72, 33, 0);
        sub_1000253A8((uint64_t)v73, (uint64_t)v6);
        swift_endAccess(v72);
        swift_release(v54);
      }
      v55 = v81;
      v56 = v82;
      sub_100034C68((uint64_t)v79, v81);
      v57 = sub_100095A2C();
      UnkeyedDecodingContainer.inferredDecode<A>()(v55, (uint64_t)&type metadata for NANBitmap.Channel, v56, v57);
      v35 = v74 | ((unint64_t)HIWORD(v74) << 16) | ((unint64_t)v75 << 32) | ((unint64_t)v76 << 48);
      v36 = v77 | 0x100;
      sub_100031D80((uint64_t)a1, (uint64_t)&v74);
      if ((swift_dynamicCast(v73, &v74, v65, v62, 6) & 1) != 0)
      {
        v58 = v73[0];
        v64(v6, v63, v3);
        sub_100033B48((uint64_t)v78, (uint64_t)v73, &qword_100405050);
        swift_beginAccess(v58 + 40, v72, 33, 0);
        sub_1000253A8((uint64_t)v73, (uint64_t)v6);
        swift_endAccess(v72);
        swift_release(v58);
      }
      sub_100033A84((uint64_t)v78, &qword_100405050);
      v34 = v84;
      goto LABEL_17;
    case 3:
LABEL_17:
      sub_100014430(v79);
      sub_100014430(a1);
      result = v71 | (v70 << 8) | (v69 << 32);
      v79[0] = v83;
      v79[1] = v30;
      v79[2] = v67;
      v79[3] = v34;
      *(_QWORD *)&v79[4] = v35;
      v80 = v36;
      break;
    default:
      v59 = sub_100012C84();
      v60 = swift_allocError(&type metadata for WiFiError, v59, 0, 0);
      *(_OWORD *)v61 = xmmword_100337850;
      *(_BYTE *)(v61 + 16) = 2;
      swift_willThrow(v60);
      result = swift_unexpectedError(v60, "CoreP2P/NANAttribute.swift", 26, 1);
      __break(1u);
      break;
  }
  return result;
}

uint64_t sub_1001D9980@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  __int16 v37;
  uint64_t v38;
  unint64_t v39;
  _QWORD v41[3];
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;

  v5 = a1[3];
  v6 = a1[4];
  sub_10003259C(a1, v5);
  dispatch thunk of Decoder.unkeyedContainer()(v41, v5, v6);
  if (v2)
  {
    sub_100014430(a1);
    swift_bridgeObjectRelease(0);
    sub_100111B98(0, 0, 16711680);
    return sub_100111BBC(4, 0, 0);
  }
  else
  {
    v7 = v42;
    v8 = v43;
    sub_100034C68((uint64_t)v41, v42);
    v9 = sub_1001EEB7C();
    UnkeyedDecodingContainer.inferredDecode<A>()(v7, (uint64_t)&type metadata for NANServiceName.Hash, v8, v9);
    v11 = v42;
    v12 = v43;
    sub_100034C68((uint64_t)v41, v42);
    sub_100031FEC(v38, v39);
    UnkeyedDecodingContainer.inferredDecode<A>()(v11, (uint64_t)&type metadata for UInt8, v12, (uint64_t)&protocol witness table for UInt8);
    v44 = v39;
    v13 = v42;
    v14 = v43;
    sub_100034C68((uint64_t)v41, v42);
    UnkeyedDecodingContainer.inferredDecode<A>()(v13, (uint64_t)&type metadata for UInt8, v14, (uint64_t)&protocol witness table for UInt8);
    v15 = v42;
    v16 = v43;
    sub_100034C68((uint64_t)v41, v42);
    v17 = sub_1001EEBC0();
    UnkeyedDecodingContainer.inferredDecode<A>()(v15, (uint64_t)&type metadata for NANAttribute.ServiceDescriptor.Control, v16, v17);
    if ((v38 & 0x40) != 0)
    {
      v18 = v42;
      v19 = v43;
      sub_100034C68((uint64_t)v41, v42);
      v37 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)(v18, v19);
    }
    else
    {
      v37 = 0;
    }
    if ((v38 & 4) != 0)
    {
      v21 = sub_100012C44(&qword_100406180);
      v22 = v42;
      v23 = v43;
      sub_100034C68((uint64_t)v41, v42);
      v24 = sub_100011770(&qword_1004066D0, &qword_100406180, protocol conformance descriptor for LengthValue<A>);
      dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)(v21, v21, v24, v22, v23);
      sub_100031FEC(v38, v39);
      sub_100031FEC(v38, v39);
      sub_10001F11C((uint64_t)_swiftEmptyArrayStorage);
      v25 = type metadata accessor for BinaryDecoder();
      v26 = (_QWORD *)swift_allocObject(v25, 48, 7);
      v26[5] = &_swiftEmptyDictionarySingleton;
      v26[2] = v38;
      v26[3] = v39;
      __asm { BR              X10 }
    }
    if ((v38 & 8) != 0)
    {
      v27 = sub_100012C44(&qword_100406180);
      v28 = v42;
      v29 = v43;
      sub_100034C68((uint64_t)v41, v42);
      v30 = sub_100011770(&qword_1004066D0, &qword_100406180, protocol conformance descriptor for LengthValue<A>);
      dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)(v27, v27, v30, v28, v29);
      __asm { BR              X12 }
    }
    if ((v38 & 0x10) != 0)
    {
      v31 = sub_100012C44(&qword_100406180);
      v32 = v42;
      v33 = v43;
      sub_100034C68((uint64_t)v41, v42);
      v34 = sub_100011770(&qword_1004066D0, &qword_100406180, protocol conformance descriptor for LengthValue<A>);
      dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)(v31, v31, v34, v32, v33);
      sub_100031FEC(v38, v39);
      sub_10001F11C((uint64_t)_swiftEmptyArrayStorage);
      v36 = type metadata accessor for BinaryDecoder();
      v35 = (_QWORD *)swift_allocObject(v36, 48, 7);
      v35[5] = &_swiftEmptyDictionarySingleton;
      v35[2] = v38;
      v35[3] = v39;
      __asm { BR              X10 }
    }
    sub_100014430(v41);
    v20 = v44;
    sub_100031FEC(v38, v44);
    swift_bridgeObjectRetain(0);
    sub_1001D7C58(0, 0, 16711680);
    sub_100111B7C(4, 0, 0);
    sub_10000E614(v38, v20);
    sub_100014430(a1);
    sub_10000E614(v38, v20);
    swift_bridgeObjectRelease(0);
    sub_100111B98(0, 0, 16711680);
    result = sub_100111BBC(4, 0, 0);
    *(_QWORD *)a2 = v38;
    *(_QWORD *)(a2 + 8) = v20;
    *(_BYTE *)(a2 + 16) = v38;
    *(_BYTE *)(a2 + 17) = v38;
    *(_BYTE *)(a2 + 18) = v38;
    *(_WORD *)(a2 + 20) = v37;
    *(_BYTE *)(a2 + 22) = (v38 & 0x40) == 0;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 40) = 0;
    *(_BYTE *)(a2 + 50) = -1;
    *(_WORD *)(a2 + 48) = 0;
    *(_QWORD *)(a2 + 56) = 4;
    *(_QWORD *)(a2 + 64) = 0;
    *(_QWORD *)(a2 + 72) = 0;
  }
  return result;
}

unint64_t sub_1001DA6E8()
{
  unint64_t result;

  result = qword_10040A520;
  if (!qword_10040A520)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.ServiceDescriptor.Control, &type metadata for NANAttribute.ServiceDescriptor.Control);
    atomic_store(result, (unint64_t *)&qword_10040A520);
  }
  return result;
}

unint64_t sub_1001DA72C()
{
  unint64_t result;

  result = qword_10040A530;
  if (!qword_10040A530)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.ServiceDescriptor.ServiceResponseFilterControl, &type metadata for NANAttribute.ServiceDescriptor.ServiceResponseFilterControl);
    atomic_store(result, (unint64_t *)&qword_10040A530);
  }
  return result;
}

unint64_t sub_1001DA770()
{
  unint64_t result;

  result = qword_10040A540;
  if (!qword_10040A540)
  {
    result = swift_getWitnessTable(byte_10035B8E0, &type metadata for NANAttribute.ServiceDescriptorExtension.RangeLimit.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040A540);
  }
  return result;
}

uint64_t sub_1001DA7B4(uint64_t a1)
{
  sub_100111B7C(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32));
  return a1;
}

uint64_t sub_1001DA7E0(uint64_t a1)
{
  sub_100111BBC(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32));
  return a1;
}

unint64_t sub_1001DA80C()
{
  unint64_t result;

  result = qword_10040A548;
  if (!qword_10040A548)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.ServiceDescriptorExtension.Control, &type metadata for NANAttribute.ServiceDescriptorExtension.Control);
    atomic_store(result, (unint64_t *)&qword_10040A548);
  }
  return result;
}

unint64_t sub_1001DA850()
{
  unint64_t result;

  result = qword_10040A568;
  if (!qword_10040A568)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.ServiceDescriptorExtension.RangeLimit, &type metadata for NANAttribute.ServiceDescriptorExtension.RangeLimit);
    atomic_store(result, (unint64_t *)&qword_10040A568);
  }
  return result;
}

uint64_t sub_1001DA894(uint64_t a1)
{
  sub_100031FEC(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32));
  return a1;
}

uint64_t sub_1001DA8C0(uint64_t a1)
{
  sub_10000E614(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32));
  return a1;
}

unint64_t sub_1001DA8EC()
{
  unint64_t result;

  result = qword_10040A578;
  if (!qword_10040A578)
  {
    result = swift_getWitnessTable("AE\t", &type metadata for NANAttribute.WLANInfrastructure.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040A578);
  }
  return result;
}

unint64_t sub_1001DA930()
{
  unint64_t result;

  result = qword_10040A580;
  if (!qword_10040A580)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for DeprecatedNANAvailability, &type metadata for DeprecatedNANAvailability);
    atomic_store(result, (unint64_t *)&qword_10040A580);
  }
  return result;
}

unint64_t sub_1001DA974()
{
  unint64_t result;

  result = qword_10040A588;
  if (!qword_10040A588)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.WLANInfrastructure.DeviceRole, &type metadata for NANAttribute.WLANInfrastructure.DeviceRole);
    atomic_store(result, (unint64_t *)&qword_10040A588);
  }
  return result;
}

unint64_t sub_1001DA9B8()
{
  unint64_t result;

  result = qword_10040A598;
  if (!qword_10040A598)
  {
    result = swift_getWitnessTable(byte_10035B840, &type metadata for NANAttribute.P2POperation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040A598);
  }
  return result;
}

unint64_t sub_1001DA9FC()
{
  unint64_t result;

  result = qword_10040A5A0;
  if (!qword_10040A5A0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.P2POperation.DeviceRole, &type metadata for NANAttribute.P2POperation.DeviceRole);
    atomic_store(result, (unint64_t *)&qword_10040A5A0);
  }
  return result;
}

unint64_t sub_1001DAA40()
{
  unint64_t result;

  result = qword_10040A5B0;
  if (!qword_10040A5B0)
  {
    result = swift_getWitnessTable(byte_10035B7F0, &type metadata for NANAttribute.IBSS.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040A5B0);
  }
  return result;
}

unint64_t sub_1001DAA84()
{
  unint64_t result;

  result = qword_10040A5C0;
  if (!qword_10040A5C0)
  {
    result = swift_getWitnessTable("1F\t", &type metadata for NANAttribute.Mesh.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040A5C0);
  }
  return result;
}

unint64_t sub_1001DAAC8()
{
  unint64_t result;

  result = qword_10040A5C8;
  if (!qword_10040A5C8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for BinaryDecoder.DataCopy, &type metadata for BinaryDecoder.DataCopy);
    atomic_store(result, (unint64_t *)&qword_10040A5C8);
  }
  return result;
}

unint64_t sub_1001DAB0C()
{
  unint64_t result;

  result = qword_10040A5D8;
  if (!qword_10040A5D8)
  {
    result = swift_getWitnessTable(byte_10035B750, &type metadata for NANAttribute.FurtherServiceDiscovery.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040A5D8);
  }
  return result;
}

unint64_t sub_1001DAB50()
{
  unint64_t result;

  result = qword_10040A5E8;
  if (!qword_10040A5E8)
  {
    result = swift_getWitnessTable(byte_10035B700, &type metadata for NANAttribute.FurtherAvailabilityMap.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040A5E8);
  }
  return result;
}

unint64_t sub_1001DAB94()
{
  unint64_t result;

  result = qword_10040A600;
  if (!qword_10040A600)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for DeprecatedNANAvailabilityEntry, &type metadata for DeprecatedNANAvailabilityEntry);
    atomic_store(result, (unint64_t *)&qword_10040A600);
  }
  return result;
}

unint64_t sub_1001DABD8()
{
  unint64_t result;

  result = qword_10040A610;
  if (!qword_10040A610)
  {
    result = swift_getWitnessTable("!G\t", &type metadata for NANAttribute.Ranging.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040A610);
  }
  return result;
}

unint64_t sub_1001DAC1C()
{
  unint64_t result;

  result = qword_10040A620;
  if (!qword_10040A620)
  {
    result = swift_getWitnessTable("qG\t", &type metadata for NANAttribute.ClusterDiscovery.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040A620);
  }
  return result;
}

unint64_t sub_1001DAC60()
{
  unint64_t result;

  result = qword_10040A630;
  if (!qword_10040A630)
  {
    result = swift_getWitnessTable(byte_10035B610, &type metadata for NANAttribute.DeviceCapability.CommittedDiscoveryWindowInformation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040A630);
  }
  return result;
}

unint64_t sub_1001DACA4()
{
  unint64_t result;

  result = qword_10040A648;
  if (!qword_10040A648)
  {
    result = swift_getWitnessTable(byte_10035B5C0, &type metadata for NANAttribute.DeviceCapability.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040A648);
  }
  return result;
}

unint64_t sub_1001DACE8()
{
  unint64_t result;

  result = qword_10040A650;
  if (!qword_10040A650)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANMapIDs, &type metadata for NANMapIDs);
    atomic_store(result, (unint64_t *)&qword_10040A650);
  }
  return result;
}

unint64_t sub_1001DAD2C()
{
  unint64_t result;

  result = qword_10040A658;
  if (!qword_10040A658)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.DeviceCapability.CommittedDiscoveryWindowInformation, &type metadata for NANAttribute.DeviceCapability.CommittedDiscoveryWindowInformation);
    atomic_store(result, (unint64_t *)&qword_10040A658);
  }
  return result;
}

unint64_t sub_1001DAD70()
{
  unint64_t result;

  result = qword_10040A660;
  if (!qword_10040A660)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.DeviceCapability.OperationMode, &type metadata for NANAttribute.DeviceCapability.OperationMode);
    atomic_store(result, (unint64_t *)&qword_10040A660);
  }
  return result;
}

unint64_t sub_1001DADB4()
{
  unint64_t result;

  result = qword_10040A668;
  if (!qword_10040A668)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.DeviceCapability.AnntenaCount, &type metadata for NANAttribute.DeviceCapability.AnntenaCount);
    atomic_store(result, (unint64_t *)&qword_10040A668);
  }
  return result;
}

unint64_t sub_1001DADF8()
{
  unint64_t result;

  result = qword_10040A670;
  if (!qword_10040A670)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.DeviceCapability.Capabilities, &type metadata for NANAttribute.DeviceCapability.Capabilities);
    atomic_store(result, (unint64_t *)&qword_10040A670);
  }
  return result;
}

unint64_t sub_1001DAE3C()
{
  unint64_t result;

  result = qword_10040A680;
  if (!qword_10040A680)
  {
    result = swift_getWitnessTable("aH\t", &type metadata for NANAttribute.DeviceCapabilityExtension.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040A680);
  }
  return result;
}

uint64_t sub_1001DAE80(uint64_t a1)
{
  sub_100111B7C(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
  return a1;
}

uint64_t sub_1001DAEAC(uint64_t a1)
{
  sub_100111BBC(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
  return a1;
}

unint64_t sub_1001DAED8()
{
  unint64_t result;

  result = qword_10040A698;
  if (!qword_10040A698)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANReasonCode, &type metadata for NANReasonCode);
    atomic_store(result, (unint64_t *)&qword_10040A698);
  }
  return result;
}

unint64_t sub_1001DAF1C()
{
  unint64_t result;

  result = qword_10040A6A0;
  if (!qword_10040A6A0)
  {
    result = swift_getWitnessTable("կ\t", &type metadata for NANAttribute.Datapath.Control);
    atomic_store(result, (unint64_t *)&qword_10040A6A0);
  }
  return result;
}

unint64_t sub_1001DAF60()
{
  unint64_t result;

  result = qword_10040A6B0;
  if (!qword_10040A6B0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANServiceInfo, &type metadata for NANServiceInfo);
    atomic_store(result, (unint64_t *)&qword_10040A6B0);
  }
  return result;
}

uint64_t sub_1001DAFA4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint8x8_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t result;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  _QWORD *v40;
  unint64_t v41;
  char v42;
  char v43;
  uint64_t v44;
  BOOL v45;
  uint64_t v46;
  BOOL v47;
  uint64_t v48;
  unsigned __int32 v49;
  unsigned __int8 v50;
  unsigned __int8 v51;
  _QWORD v52[3];
  uint64_t v53;
  uint64_t v54;
  char v55;
  char v56;

  v56 = 1;
  v55 = 1;
  v6 = a1[3];
  v7 = a1[4];
  sub_10003259C(a1, v6);
  dispatch thunk of Decoder.unkeyedContainer()(v52, v6, v7);
  if (v2)
  {
    sub_100014430(a1);
    sub_10000E658(0, 0xF000000000000000);
    return sub_100111BBC(4, 0, 0);
  }
  else
  {
    v8 = v53;
    v9 = v54;
    sub_100034C68((uint64_t)v52, v53);
    UnkeyedDecodingContainer.inferredDecode<A>()(v8, (uint64_t)&type metadata for UInt8, v9, (uint64_t)&protocol witness table for UInt8);
    v10 = v53;
    v11 = v54;
    sub_100034C68((uint64_t)v52, v53);
    v12 = sub_100012C44(&qword_10040A688);
    v13 = sub_100011770(&qword_10040B678, &qword_10040A688, aQ_9);
    UnkeyedDecodingContainer.inferredDecode<A>()(v10, v12, v11, v13);
    v14 = v53;
    v15 = v54;
    sub_100034C68((uint64_t)v52, v53);
    v16 = sub_1001EE1E4();
    UnkeyedDecodingContainer.inferredDecode<A>()(v14, (uint64_t)&type metadata for NANReasonCode, v15, v16);
    v17 = v53;
    v18 = v54;
    sub_100034C68((uint64_t)v52, v53);
    v19 = sub_10003A65C();
    UnkeyedDecodingContainer.inferredDecode<A>()(v17, (uint64_t)&type metadata for WiFiAddress, v18, v19);
    v3.i32[0] = v49;
    v20 = v53;
    v21 = v54;
    sub_100034C68((uint64_t)v52, v53);
    UnkeyedDecodingContainer.inferredDecode<A>()(v20, (uint64_t)&type metadata for UInt8, v21, (uint64_t)&protocol witness table for UInt8);
    v22 = v53;
    v23 = v54;
    sub_100034C68((uint64_t)v52, v53);
    v24 = sub_1001EE888();
    UnkeyedDecodingContainer.inferredDecode<A>()(v22, (uint64_t)&type metadata for NANAttribute.DatapathExtension.Control, v23, v24);
    v47 = (v49 & 8) == 0;
    if ((v49 & 8) != 0)
    {
      v27 = v53;
      v28 = v54;
      sub_100034C68((uint64_t)v52, v53);
      v26 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)(v27, v28);
      v56 = 0;
    }
    else
    {
      v26 = 0;
    }
    v43 = v26;
    v45 = (v49 & 0x10) == 0;
    if ((v49 & 0x10) != 0)
    {
      v29 = v53;
      v30 = v54;
      sub_100034C68((uint64_t)v52, v53);
      dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)(&type metadata for WiFiAddress, &type metadata for WiFiAddress, v19, v29, v30);
      v42 = v49;
      v41 = v49 | ((unint64_t)v50 << 32) | ((unint64_t)v51 << 40);
      v55 = 0;
    }
    else
    {
      v42 = v49;
      v41 = 0;
    }
    v31 = v53;
    v32 = v54;
    sub_100034C68((uint64_t)v52, v53);
    v33 = sub_100012C44(&qword_100406248);
    v34 = sub_100011770(&qword_100406240, &qword_100406248, "%@\t");
    v35 = UnkeyedDecodingContainer.inferredArrayDecode<A>()(v31, v33, v32, v34);
    v36 = *(_QWORD *)(v35 + 16);
    if (v36)
    {
      v37 = (_QWORD *)(v35 + 48);
      do
      {
        v46 = *(v37 - 1);
        v48 = *v37;
        if (!*((_BYTE *)v37 - 16))
        {
          v39 = type metadata accessor for BinaryDecoder();
          v40 = (_QWORD *)swift_allocObject(v39, 48, 7);
          v40[5] = &_swiftEmptyDictionarySingleton;
          v40[2] = v46;
          v40[3] = v48;
          __asm { BR              X9 }
        }
        if (*((_BYTE *)v37 - 16) == 1)
        {
          v44 = type metadata accessor for BinaryDecoder();
          v38 = (_QWORD *)swift_allocObject(v44, 48, 7);
          v38[5] = &_swiftEmptyDictionarySingleton;
          v38[2] = v46;
          v38[3] = v48;
          __asm { BR              X9 }
        }
        v37 += 3;
        --v36;
      }
      while (v36);
      swift_bridgeObjectRelease(v35);
      v47 = v56;
      v45 = v55;
    }
    else
    {
      swift_bridgeObjectRelease(v35);
    }
    sub_100014430(v52);
    sub_1000339F4(0, 0xF000000000000000);
    sub_100111B7C(4, 0, 0);
    sub_100014430(a1);
    sub_10000E658(0, 0xF000000000000000);
    result = sub_100111BBC(4, 0, 0);
    *(_BYTE *)a2 = v49;
    *(_BYTE *)(a2 + 1) = v49;
    *(_BYTE *)(a2 + 2) = v49;
    *(_DWORD *)(a2 + 3) = vmovn_s16((int16x8_t)vmovl_u8(v3)).u32[0];
    *(_BYTE *)(a2 + 7) = v50;
    *(_BYTE *)(a2 + 8) = v51;
    *(_BYTE *)(a2 + 9) = v49;
    *(_BYTE *)(a2 + 10) = v42;
    *(_BYTE *)(a2 + 11) = v43;
    *(_BYTE *)(a2 + 12) = v47;
    *(_WORD *)(a2 + 17) = WORD2(v41);
    *(_DWORD *)(a2 + 13) = v41;
    *(_BYTE *)(a2 + 19) = v45;
    *(_QWORD *)(a2 + 24) = 0;
    *(_QWORD *)(a2 + 32) = 0xF000000000000000;
    *(_QWORD *)(a2 + 40) = 4;
    *(_QWORD *)(a2 + 48) = 0;
    *(_QWORD *)(a2 + 56) = 0;
  }
  return result;
}

unint64_t sub_1001DBA1C()
{
  unint64_t result;

  result = qword_10040A6B8;
  if (!qword_10040A6B8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.DatapathExtension.Control, &type metadata for NANAttribute.DatapathExtension.Control);
    atomic_store(result, (unint64_t *)&qword_10040A6B8);
  }
  return result;
}

unint64_t sub_1001DBA60()
{
  unint64_t result;

  result = qword_10040A6D0;
  if (!qword_10040A6D0)
  {
    result = swift_getWitnessTable(byte_10035B520, &type metadata for NANAttribute.Availability.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040A6D0);
  }
  return result;
}

unint64_t sub_1001DBAA4()
{
  unint64_t result;

  result = qword_10040A6D8;
  if (!qword_10040A6D8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.Availability.Control, &type metadata for NANAttribute.Availability.Control);
    atomic_store(result, (unint64_t *)&qword_10040A6D8);
  }
  return result;
}

unint64_t sub_1001DBAE8()
{
  unint64_t result;

  result = qword_10040A6F0;
  if (!qword_10040A6F0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAvailabilityEntry, &type metadata for NANAvailabilityEntry);
    atomic_store(result, (unint64_t *)&qword_10040A6F0);
  }
  return result;
}

unint64_t sub_1001DBB2C()
{
  unint64_t result;

  result = qword_10040A700;
  if (!qword_10040A700)
  {
    result = swift_getWitnessTable(byte_10035B4D0, &type metadata for NANAttribute.DataCluster.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040A700);
  }
  return result;
}

unint64_t sub_1001DBB70()
{
  unint64_t result;

  result = qword_10040A708;
  if (!qword_10040A708)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.DataCluster.Control, &type metadata for NANAttribute.DataCluster.Control);
    atomic_store(result, (unint64_t *)&qword_10040A708);
  }
  return result;
}

unint64_t sub_1001DBBB4()
{
  unint64_t result;

  result = qword_10040A720;
  if (!qword_10040A720)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANScheduleEntry, &type metadata for NANScheduleEntry);
    atomic_store(result, (unint64_t *)&qword_10040A720);
  }
  return result;
}

unint64_t sub_1001DBBF8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unsigned int v27;
  _QWORD v28[3];
  uint64_t v29;
  uint64_t v30;

  v3 = a1[3];
  v4 = a1[4];
  sub_10003259C(a1, v3);
  dispatch thunk of Decoder.unkeyedContainer()(v28, v3, v4);
  if (v1)
    return sub_100014430(a1);
  v5 = v29;
  v6 = v30;
  sub_100034C68((uint64_t)v28, v29);
  UnkeyedDecodingContainer.inferredDecode<A>()(v5, (uint64_t)&type metadata for UInt8, v6, (uint64_t)&protocol witness table for UInt8);
  v7 = v29;
  v8 = v30;
  sub_100034C68((uint64_t)v28, v29);
  v9 = sub_100012C44(&qword_10040A768);
  v10 = sub_100011770(&qword_10040B5F0, &qword_10040A768, aQ_9);
  UnkeyedDecodingContainer.inferredDecode<A>()(v7, v9, v8, v10);
  v11 = v29;
  v12 = v30;
  sub_100034C68((uint64_t)v28, v29);
  v13 = sub_1001EE1E4();
  UnkeyedDecodingContainer.inferredDecode<A>()(v11, (uint64_t)&type metadata for NANReasonCode, v12, v13);
  v14 = v29;
  v15 = v30;
  sub_100034C68((uint64_t)v28, v29);
  v16 = sub_1001EE624();
  UnkeyedDecodingContainer.inferredDecode<A>()(v14, (uint64_t)&type metadata for NANAttribute.RangingSetup.Control, v15, v16);
  if ((v27 & 2) != 0)
  {
    v19 = v29;
    v25 = v30;
    sub_100034C68((uint64_t)v28, v29);
    v20 = sub_100012C44(&qword_10040B600);
    v21 = sub_1000934A0(&qword_10040B608, &qword_10040B600, (uint64_t (*)(void))sub_1001EE668, (const char *)&protocol conformance descriptor for <A> A?);
    UnkeyedDecodingContainer.inferredDecode<A>()(v19, v20, v25, v21);
    v18 = (unint64_t)v27 << 32;
  }
  else
  {
    v18 = 0;
  }
  if ((v27 & 4) != 0)
  {
    v26 = v18;
    v22 = v29;
    v23 = v30;
    sub_100034C68((uint64_t)v28, v29);
    v24 = sub_1001EE2B0();
    UnkeyedDecodingContainer.inferredArrayDecode<A>()(v22, (uint64_t)&type metadata for NANScheduleEntry, v23, v24);
    v18 = v26;
  }
  sub_100014430(v28);
  sub_100014430(a1);
  return v27 | ((unint64_t)v27 << 8) | ((unint64_t)v27 << 16) | ((unint64_t)v27 << 24) | v18;
}

_QWORD *sub_1001DBEE0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v13;
  _QWORD v14[3];
  uint64_t v15;
  uint64_t v16;

  v3 = a1[3];
  v4 = a1[4];
  v5 = sub_10003259C(a1, v3);
  dispatch thunk of Decoder.unkeyedContainer()(v14, v3, v4);
  if (!v1)
  {
    v6 = v15;
    v7 = v16;
    sub_100034C68((uint64_t)v14, v15);
    UnkeyedDecodingContainer.inferredDecode<A>()(v6, (uint64_t)&type metadata for UInt8, v7, (uint64_t)&protocol witness table for UInt8);
    v8 = v15;
    v9 = v16;
    sub_100034C68((uint64_t)v14, v15);
    UnkeyedDecodingContainer.inferredDecode<A>()(v8, (uint64_t)&type metadata for UInt8, v9, (uint64_t)&protocol witness table for UInt8);
    v10 = v15;
    v11 = v16;
    sub_100034C68((uint64_t)v14, v15);
    UnkeyedDecodingContainer.inferredDecode<A>()(v10, (uint64_t)&type metadata for UInt8, v11, (uint64_t)&protocol witness table for UInt8);
    v5 = (_QWORD *)(v13 | (v13 << 8) | (v13 << 16));
    sub_100014430(v14);
  }
  sub_100014430(a1);
  return v5;
}

unint64_t sub_1001DC050(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  _QWORD v33[3];
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;

  v3 = a1[3];
  v4 = a1[4];
  sub_10003259C(a1, v3);
  dispatch thunk of Decoder.unkeyedContainer()(v33, v3, v4);
  if (v1)
    return sub_100014430(a1);
  v5 = v34;
  v6 = v35;
  sub_100034C68((uint64_t)v33, v34);
  UnkeyedDecodingContainer.inferredDecode<A>()(v5, (uint64_t)&type metadata for UInt8, v6, (uint64_t)&protocol witness table for UInt8);
  v7 = v36;
  v8 = v34;
  v9 = v35;
  sub_100034C68((uint64_t)v33, v34);
  v10 = sub_100012C44(&qword_10040A728);
  v11 = sub_100011770(&qword_10040B638, &qword_10040A728, aQ_9);
  UnkeyedDecodingContainer.inferredDecode<A>()(v8, v10, v9, v11);
  v12 = v36;
  v13 = v34;
  v14 = v35;
  sub_100034C68((uint64_t)v33, v34);
  v15 = sub_1001EE1E4();
  UnkeyedDecodingContainer.inferredDecode<A>()(v13, (uint64_t)&type metadata for NANReasonCode, v14, v15);
  v16 = v36;
  v17 = v34;
  v18 = v35;
  sub_100034C68((uint64_t)v33, v34);
  v19 = sub_1001EE778();
  UnkeyedDecodingContainer.inferredDecode<A>()(v17, (uint64_t)&type metadata for NANAttribute.DeviceLink.Control, v18, v19);
  v21 = v36;
  if ((v36 & 1) != 0)
  {
    v22 = v34;
    v23 = v35;
    sub_100034C68((uint64_t)v33, v34);
    v32 = (unint64_t)dispatch thunk of UnkeyedDecodingContainer.decode(_:)(v22, v23) << 32;
  }
  else
  {
    v32 = 0;
  }
  if ((v21 & 0x10) != 0)
  {
    v24 = v34;
    v25 = v35;
    sub_100034C68((uint64_t)v33, v34);
    dispatch thunk of UnkeyedDecodingContainer.decode(_:)(v24, v25);
  }
  v31 = v16;
  if ((v21 & 2) != 0)
  {
    v27 = sub_100012C44(&qword_10040A710);
    v28 = v34;
    v30 = v35;
    sub_100034C68((uint64_t)v33, v34);
    v29 = sub_1000934A0(&qword_10040B518, &qword_10040A710, (uint64_t (*)(void))sub_1001EE2B0, (const char *)&protocol conformance descriptor for <A> [A]);
    dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)(v27, v27, v29, v28, v30);
    v26 = v36;
  }
  else
  {
    v26 = _swiftEmptyArrayStorage;
  }
  sub_100014430(v33);
  swift_bridgeObjectRetain(v26);
  sub_100014430(a1);
  swift_bridgeObjectRelease(v26);
  return v32 | ((unint64_t)((v21 & 1) == 0) << 40) | (v21 << 24) | (v31 << 16) | (v12 << 8) | v7;
}

unint64_t sub_1001DC394()
{
  unint64_t result;

  result = qword_10040A738;
  if (!qword_10040A738)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.DeviceLink.Control, &type metadata for NANAttribute.DeviceLink.Control);
    atomic_store(result, (unint64_t *)&qword_10040A738);
  }
  return result;
}

unint64_t sub_1001DC3D8()
{
  unint64_t result;

  result = qword_10040A748;
  if (!qword_10040A748)
  {
    result = swift_getWitnessTable("QI\t", &type metadata for NANAttribute.DeviceLinkQoS.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040A748);
  }
  return result;
}

unint64_t sub_1001DC41C()
{
  unint64_t result;

  result = qword_10040A750;
  if (!qword_10040A750)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.UnalignedSchedule.UnalignedWindowOverwrite, &type metadata for NANAttribute.UnalignedSchedule.UnalignedWindowOverwrite);
    atomic_store(result, (unint64_t *)&qword_10040A750);
  }
  return result;
}

unint64_t sub_1001DC460()
{
  unint64_t result;

  result = qword_10040A758;
  if (!qword_10040A758)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.UnalignedSchedule.UnalignedWindowControl, &type metadata for NANAttribute.UnalignedSchedule.UnalignedWindowControl);
    atomic_store(result, (unint64_t *)&qword_10040A758);
  }
  return result;
}

unint64_t sub_1001DC4A4()
{
  unint64_t result;

  result = qword_10040A760;
  if (!qword_10040A760)
  {
    result = swift_getWitnessTable("ݗ\t", &type metadata for NANAttribute.RangingInformation.LocationInformation);
    atomic_store(result, (unint64_t *)&qword_10040A760);
  }
  return result;
}

unint64_t sub_1001DC4E8()
{
  unint64_t result;

  result = qword_10040A778;
  if (!qword_10040A778)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.RangingSetup.Control, &type metadata for NANAttribute.RangingSetup.Control);
    atomic_store(result, (unint64_t *)&qword_10040A778);
  }
  return result;
}

unint64_t sub_1001DC52C()
{
  unint64_t result;

  result = qword_10040A780;
  if (!qword_10040A780)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.RangingSetup.FineTimingMeasurementParameters, &type metadata for NANAttribute.RangingSetup.FineTimingMeasurementParameters);
    atomic_store(result, (unint64_t *)&qword_10040A780);
  }
  return result;
}

unint64_t sub_1001DC570()
{
  unint64_t result;

  result = qword_10040A790;
  if (!qword_10040A790)
  {
    result = swift_getWitnessTable(byte_10035B430, &type metadata for NANAttribute.ElementContainer.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040A790);
  }
  return result;
}

unint64_t sub_1001DC5B4()
{
  unint64_t result;

  result = qword_10040A798;
  if (!qword_10040A798)
  {
    result = swift_getWitnessTable("5 \n", &type metadata for NonNANOperatingChannelInformation);
    atomic_store(result, (unint64_t *)&qword_10040A798);
  }
  return result;
}

unint64_t sub_1001DC5F8()
{
  unint64_t result;

  result = qword_10040A7A0;
  if (!qword_10040A7A0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NonNANBeaconInformation, &type metadata for NonNANBeaconInformation);
    atomic_store(result, (unint64_t *)&qword_10040A7A0);
  }
  return result;
}

unint64_t sub_1001DC63C()
{
  unint64_t result;

  result = qword_10040A7B0;
  if (!qword_10040A7B0)
  {
    result = swift_getWitnessTable(byte_10035B3E0, &type metadata for NANAttribute.ExtendedP2POperation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040A7B0);
  }
  return result;
}

unint64_t sub_1001DC680()
{
  unint64_t result;

  result = qword_10040A7C0;
  if (!qword_10040A7C0)
  {
    result = swift_getWitnessTable("AJ\t", &type metadata for NANAttribute.ExtendedIBSS.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040A7C0);
  }
  return result;
}

unint64_t sub_1001DC6C4()
{
  unint64_t result;

  result = qword_10040A7D0;
  if (!qword_10040A7D0)
  {
    result = swift_getWitnessTable(byte_10035B340, &type metadata for NANAttribute.ExtendedMesh.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040A7D0);
  }
  return result;
}

unint64_t sub_1001DC708()
{
  unint64_t result;

  result = qword_10040A7E0;
  if (!qword_10040A7E0)
  {
    result = swift_getWitnessTable(byte_10035B2F0, &type metadata for NANAttribute.FineTimingMeasurementRangeReport.Entry.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040A7E0);
  }
  return result;
}

unint64_t sub_1001DC74C()
{
  unint64_t result;

  result = qword_10040A7F0;
  if (!qword_10040A7F0)
  {
    result = swift_getWitnessTable("1K\t", &type metadata for NANAttribute.FineTimingMeasurementRangeReport.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040A7F0);
  }
  return result;
}

unint64_t sub_1001DC790()
{
  unint64_t result;

  result = qword_10040A808;
  if (!qword_10040A808)
  {
    result = swift_getWitnessTable("͊\t", &type metadata for NANAttribute.FineTimingMeasurementRangeReport.Entry);
    atomic_store(result, (unint64_t *)&qword_10040A808);
  }
  return result;
}

unint64_t sub_1001DC7D4()
{
  unint64_t result;

  result = qword_10040A818;
  if (!qword_10040A818)
  {
    result = swift_getWitnessTable(byte_10035B250, &type metadata for NANAttribute.CipherSuiteInformation.CipherSuite.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040A818);
  }
  return result;
}

unint64_t sub_1001DC818()
{
  unint64_t result;

  result = qword_10040A820;
  if (!qword_10040A820)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANCipherSuite, &type metadata for NANCipherSuite);
    atomic_store(result, (unint64_t *)&qword_10040A820);
  }
  return result;
}

unint64_t sub_1001DC85C()
{
  unint64_t result;

  result = qword_10040A830;
  if (!qword_10040A830)
  {
    result = swift_getWitnessTable(byte_10035B200, &type metadata for NANAttribute.CipherSuiteInformation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040A830);
  }
  return result;
}

unint64_t sub_1001DC8A0()
{
  unint64_t result;

  result = qword_10040A838;
  if (!qword_10040A838)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.CipherSuiteInformation.Capabilities, &type metadata for NANAttribute.CipherSuiteInformation.Capabilities);
    atomic_store(result, (unint64_t *)&qword_10040A838);
  }
  return result;
}

unint64_t sub_1001DC8E4()
{
  unint64_t result;

  result = qword_10040A850;
  if (!qword_10040A850)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.CipherSuiteInformation.CipherSuite, &type metadata for NANAttribute.CipherSuiteInformation.CipherSuite);
    atomic_store(result, (unint64_t *)&qword_10040A850);
  }
  return result;
}

unint64_t sub_1001DC928()
{
  unint64_t result;

  result = qword_10040A860;
  if (!qword_10040A860)
  {
    result = swift_getWitnessTable("!L\t", &type metadata for NANAttribute.SecurityContextInformation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040A860);
  }
  return result;
}

unint64_t sub_1001DC96C()
{
  unint64_t result;

  result = qword_10040A878;
  if (!qword_10040A878)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.SecurityContextInformation.SecurityContextIdentifier, &type metadata for NANAttribute.SecurityContextInformation.SecurityContextIdentifier);
    atomic_store(result, (unint64_t *)&qword_10040A878);
  }
  return result;
}

unint64_t sub_1001DC9B0()
{
  unint64_t result;

  result = qword_10040A888;
  if (!qword_10040A888)
  {
    result = swift_getWitnessTable("qL\t", &type metadata for NANAttribute.SharedKeyDescriptor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040A888);
  }
  return result;
}

unint64_t sub_1001DC9F4()
{
  unint64_t result;

  result = qword_10040A898;
  if (!qword_10040A898)
  {
    result = swift_getWitnessTable(byte_10035B110, &type metadata for NANAttribute.MulticastScheduleChange.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040A898);
  }
  return result;
}

unint64_t sub_1001DCA38()
{
  unint64_t result;

  result = qword_10040A8A0;
  if (!qword_10040A8A0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.MulticastScheduleChange.Control, &type metadata for NANAttribute.MulticastScheduleChange.Control);
    atomic_store(result, (unint64_t *)&qword_10040A8A0);
  }
  return result;
}

unint64_t sub_1001DCA7C()
{
  unint64_t result;

  result = qword_10040A8B0;
  if (!qword_10040A8B0)
  {
    result = swift_getWitnessTable(byte_10035B0C0, &type metadata for NANAttribute.PublicAvailability.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040A8B0);
  }
  return result;
}

unint64_t sub_1001DCAC0()
{
  unint64_t result;

  result = qword_10040A8C0;
  if (!qword_10040A8C0)
  {
    result = swift_getWitnessTable("aM\t", &type metadata for NANAttribute.PairingIdentityResolution.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040A8C0);
  }
  return result;
}

unint64_t sub_1001DCB04()
{
  unint64_t result;

  result = qword_10040A8C8;
  if (!qword_10040A8C8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.PairingIdentityResolution.CipherVersion, &type metadata for NANAttribute.PairingIdentityResolution.CipherVersion);
    atomic_store(result, (unint64_t *)&qword_10040A8C8);
  }
  return result;
}

uint64_t sub_1001DCB48(uint64_t a1)
{
  sub_1001218A8(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32));
  return a1;
}

uint64_t sub_1001DCB78(uint64_t a1)
{
  sub_100128024(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32));
  return a1;
}

unint64_t sub_1001DCBA8()
{
  unint64_t result;

  result = qword_10040A8E8;
  if (!qword_10040A8E8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.PairingBootstrapping.Method, &type metadata for NANAttribute.PairingBootstrapping.Method);
    atomic_store(result, (unint64_t *)&qword_10040A8E8);
  }
  return result;
}

uint64_t sub_1001DCBEC(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(&type metadata for Data._Representation - 1) + 32))(a2, a1);
  return a2;
}

unint64_t sub_1001DCC28()
{
  unint64_t result;

  result = qword_10040A900;
  if (!qword_10040A900)
  {
    result = swift_getWitnessTable(byte_10035B020, &type metadata for NANAttribute.VendorSpecific.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040A900);
  }
  return result;
}

unint64_t sub_1001DCC6C()
{
  unint64_t result;

  result = qword_10040A910;
  if (!qword_10040A910)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANPeerServiceIdentifier, &type metadata for NANPeerServiceIdentifier);
    atomic_store(result, (unint64_t *)&qword_10040A910);
  }
  return result;
}

unint64_t sub_1001DCCB0()
{
  unint64_t result;

  result = qword_10040A930;
  if (!qword_10040A930)
  {
    result = swift_getWitnessTable(byte_10035AFD0, &type metadata for NANAttribute.CustomDeviceInformation.Version.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040A930);
  }
  return result;
}

uint64_t type metadata accessor for NANAttribute.CustomDeviceInformation(uint64_t a1)
{
  return sub_10000D69C(a1, qword_10040B028, (uint64_t)&nominal type descriptor for NANAttribute.CustomDeviceInformation);
}

uint64_t sub_1001DCD08(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

unint64_t sub_1001DCD4C()
{
  unint64_t result;

  result = qword_10040A948;
  if (!qword_10040A948)
  {
    result = swift_getWitnessTable("QN\t", &type metadata for NANAttribute.CustomDeviceInformation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040A948);
  }
  return result;
}

unint64_t sub_1001DCD90()
{
  unint64_t result;

  result = qword_10040A950;
  if (!qword_10040A950)
  {
    result = swift_getWitnessTable("}q\t", &type metadata for NANAttribute.CustomDeviceInformation.Version);
    atomic_store(result, (unint64_t *)&qword_10040A950);
  }
  return result;
}

unint64_t sub_1001DCDD4()
{
  unint64_t result;

  result = qword_10040A958;
  if (!qword_10040A958)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.CustomDeviceInformation.PlatformType, &type metadata for NANAttribute.CustomDeviceInformation.PlatformType);
    atomic_store(result, (unint64_t *)&qword_10040A958);
  }
  return result;
}

unint64_t sub_1001DCE18()
{
  unint64_t result;

  result = qword_10040A960;
  if (!qword_10040A960)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.CustomDeviceInformation.Flags, &type metadata for NANAttribute.CustomDeviceInformation.Flags);
    atomic_store(result, (unint64_t *)&qword_10040A960);
  }
  return result;
}

unint64_t sub_1001DCE5C()
{
  unint64_t result;

  result = qword_10040A978;
  if (!qword_10040A978)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.CustomDeviceInformation.Version, &type metadata for NANAttribute.CustomDeviceInformation.Version);
    atomic_store(result, (unint64_t *)&qword_10040A978);
  }
  return result;
}

unint64_t sub_1001DCEA0()
{
  unint64_t result;

  result = qword_10040A980;
  if (!qword_10040A980)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.CustomDeviceInformation.PlatformType, &type metadata for NANAttribute.CustomDeviceInformation.PlatformType);
    atomic_store(result, (unint64_t *)&qword_10040A980);
  }
  return result;
}

unint64_t sub_1001DCEE4()
{
  unint64_t result;

  result = qword_10040A988;
  if (!qword_10040A988)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.CustomDeviceInformation.Flags, &type metadata for NANAttribute.CustomDeviceInformation.Flags);
    atomic_store(result, (unint64_t *)&qword_10040A988);
  }
  return result;
}

unint64_t sub_1001DCF28()
{
  unint64_t result;

  result = qword_10040A990;
  if (!qword_10040A990)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for BinaryDecoder.DataCopy, &type metadata for BinaryDecoder.DataCopy);
    atomic_store(result, (unint64_t *)&qword_10040A990);
  }
  return result;
}

unint64_t sub_1001DCF6C()
{
  unint64_t result;

  result = qword_10040A998;
  if (!qword_10040A998)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.ConnectionCapability, &type metadata for NANAttribute.ConnectionCapability);
    atomic_store(result, (unint64_t *)&qword_10040A998);
  }
  return result;
}

unint64_t sub_1001DCFB0()
{
  unint64_t result;

  result = qword_10040A9A0;
  if (!qword_10040A9A0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.AttributeType, &type metadata for NANAttribute.AttributeType);
    atomic_store(result, (unint64_t *)&qword_10040A9A0);
  }
  return result;
}

_QWORD *sub_1001DCFF4(_QWORD *a1, void (*a2)(_QWORD, _QWORD), void (*a3)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = a1[5];
  v6 = a1[6];
  v7 = a1[7];
  a2(a1[3], a1[4]);
  a3(v5, v6, v7);
  return a1;
}

_QWORD *sub_1001DD04C(_QWORD *a1, void (*a2)(uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v5;

  v4 = a1[4];
  v5 = a1[5];
  a2(a1[2], a1[3]);
  a2(v4, v5);
  return a1;
}

unint64_t sub_1001DD094()
{
  unint64_t result;

  result = qword_10040AA08;
  if (!qword_10040AA08)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.ConnectionCapability, &type metadata for NANAttribute.ConnectionCapability);
    atomic_store(result, (unint64_t *)&qword_10040AA08);
  }
  return result;
}

uint64_t sub_1001DD0D8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(unsigned __int16 *)(a1 + 48) | (*(unsigned __int8 *)(a1 + 50) << 16);
  v6 = *(_QWORD *)(a1 + 56);
  v7 = *(_QWORD *)(a1 + 64);
  v8 = *(_QWORD *)(a1 + 72);
  sub_100031FEC(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  swift_bridgeObjectRetain(v2);
  sub_1001D7C58(v3, v4, v5);
  sub_100111B7C(v6, v7, v8);
  return a1;
}

unint64_t sub_1001DD164()
{
  unint64_t result;

  result = qword_10040FAB0;
  if (!qword_10040FAB0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.MasterIndication, &type metadata for NANAttribute.MasterIndication);
    atomic_store(result, (unint64_t *)&qword_10040FAB0);
  }
  return result;
}

unint64_t sub_1001DD1AC()
{
  unint64_t result;

  result = qword_10040AA10;
  if (!qword_10040AA10)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.Cluster, &type metadata for NANAttribute.Cluster);
    atomic_store(result, (unint64_t *)&qword_10040AA10);
  }
  return result;
}

unint64_t sub_1001DD1F4()
{
  unint64_t result;

  result = qword_10040AA18;
  if (!qword_10040AA18)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.ServiceIDList, &type metadata for NANAttribute.ServiceIDList);
    atomic_store(result, (unint64_t *)&qword_10040AA18);
  }
  return result;
}

unint64_t sub_1001DD23C()
{
  unint64_t result;

  result = qword_10040AA20;
  if (!qword_10040AA20)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.ServiceDescriptor.Control.ControlType, &type metadata for NANAttribute.ServiceDescriptor.Control.ControlType);
    atomic_store(result, (unint64_t *)&qword_10040AA20);
  }
  return result;
}

unint64_t sub_1001DD284()
{
  unint64_t result;

  result = qword_10040AA28;
  if (!qword_10040AA28)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.ServiceDescriptor.Control, &type metadata for NANAttribute.ServiceDescriptor.Control);
    atomic_store(result, (unint64_t *)&qword_10040AA28);
  }
  return result;
}

unint64_t sub_1001DD2CC()
{
  unint64_t result;

  result = qword_10040AA30;
  if (!qword_10040AA30)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.ServiceDescriptor.Control, &type metadata for NANAttribute.ServiceDescriptor.Control);
    atomic_store(result, (unint64_t *)&qword_10040AA30);
  }
  return result;
}

unint64_t sub_1001DD314()
{
  unint64_t result;

  result = qword_10040AA38;
  if (!qword_10040AA38)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.ServiceDescriptor.Control, &type metadata for NANAttribute.ServiceDescriptor.Control);
    atomic_store(result, (unint64_t *)&qword_10040AA38);
  }
  return result;
}

unint64_t sub_1001DD35C()
{
  unint64_t result;

  result = qword_10040AA40;
  if (!qword_10040AA40)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.ServiceDescriptor.Control, &type metadata for NANAttribute.ServiceDescriptor.Control);
    atomic_store(result, (unint64_t *)&qword_10040AA40);
  }
  return result;
}

unint64_t sub_1001DD3A4()
{
  unint64_t result;

  result = qword_10040AA48;
  if (!qword_10040AA48)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.ServiceDescriptor.ServiceResponseFilterControl.FilterType, &type metadata for NANAttribute.ServiceDescriptor.ServiceResponseFilterControl.FilterType);
    atomic_store(result, (unint64_t *)&qword_10040AA48);
  }
  return result;
}

unint64_t sub_1001DD3EC()
{
  unint64_t result;

  result = qword_10040AA50;
  if (!qword_10040AA50)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.ServiceDescriptor.ServiceResponseFilterControl, &type metadata for NANAttribute.ServiceDescriptor.ServiceResponseFilterControl);
    atomic_store(result, (unint64_t *)&qword_10040AA50);
  }
  return result;
}

unint64_t sub_1001DD434()
{
  unint64_t result;

  result = qword_10040AA58;
  if (!qword_10040AA58)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.ServiceDescriptor.ServiceResponseFilterControl, &type metadata for NANAttribute.ServiceDescriptor.ServiceResponseFilterControl);
    atomic_store(result, (unint64_t *)&qword_10040AA58);
  }
  return result;
}

unint64_t sub_1001DD47C()
{
  unint64_t result;

  result = qword_10040AA60;
  if (!qword_10040AA60)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.ServiceDescriptor.ServiceResponseFilterControl, &type metadata for NANAttribute.ServiceDescriptor.ServiceResponseFilterControl);
    atomic_store(result, (unint64_t *)&qword_10040AA60);
  }
  return result;
}

unint64_t sub_1001DD4C4()
{
  unint64_t result;

  result = qword_10040AA68;
  if (!qword_10040AA68)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.ServiceDescriptor.ServiceResponseFilterControl, &type metadata for NANAttribute.ServiceDescriptor.ServiceResponseFilterControl);
    atomic_store(result, (unint64_t *)&qword_10040AA68);
  }
  return result;
}

unint64_t sub_1001DD50C()
{
  unint64_t result;

  result = qword_10040AA70;
  if (!qword_10040AA70)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.ServiceDescriptor.ServiceFilterControl, &type metadata for NANAttribute.ServiceDescriptor.ServiceFilterControl);
    atomic_store(result, (unint64_t *)&qword_10040AA70);
  }
  return result;
}

unint64_t sub_1001DD554()
{
  unint64_t result;

  result = qword_10040AA78;
  if (!qword_10040AA78)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.ServiceDescriptor, &type metadata for NANAttribute.ServiceDescriptor);
    atomic_store(result, (unint64_t *)&qword_10040AA78);
  }
  return result;
}

unint64_t sub_1001DD59C()
{
  unint64_t result;

  result = qword_10040AA80;
  if (!qword_10040AA80)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.ServiceDescriptorExtension.Control, &type metadata for NANAttribute.ServiceDescriptorExtension.Control);
    atomic_store(result, (unint64_t *)&qword_10040AA80);
  }
  return result;
}

unint64_t sub_1001DD5E4()
{
  unint64_t result;

  result = qword_10040AA88;
  if (!qword_10040AA88)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.ServiceDescriptorExtension.Control, &type metadata for NANAttribute.ServiceDescriptorExtension.Control);
    atomic_store(result, (unint64_t *)&qword_10040AA88);
  }
  return result;
}

unint64_t sub_1001DD62C()
{
  unint64_t result;

  result = qword_10040AA90;
  if (!qword_10040AA90)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.ServiceDescriptorExtension.Control, &type metadata for NANAttribute.ServiceDescriptorExtension.Control);
    atomic_store(result, (unint64_t *)&qword_10040AA90);
  }
  return result;
}

unint64_t sub_1001DD674()
{
  unint64_t result;

  result = qword_10040AA98;
  if (!qword_10040AA98)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.ServiceDescriptorExtension.Control, &type metadata for NANAttribute.ServiceDescriptorExtension.Control);
    atomic_store(result, (unint64_t *)&qword_10040AA98);
  }
  return result;
}

unint64_t sub_1001DD6BC()
{
  unint64_t result;

  result = qword_10040AAA0;
  if (!qword_10040AAA0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.ServiceDescriptorExtension.RangeLimit, &type metadata for NANAttribute.ServiceDescriptorExtension.RangeLimit);
    atomic_store(result, (unint64_t *)&qword_10040AAA0);
  }
  return result;
}

unint64_t sub_1001DD704()
{
  unint64_t result;

  result = qword_10040AAA8;
  if (!qword_10040AAA8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.ServiceDescriptorExtension, &type metadata for NANAttribute.ServiceDescriptorExtension);
    atomic_store(result, (unint64_t *)&qword_10040AAA8);
  }
  return result;
}

unint64_t sub_1001DD74C()
{
  unint64_t result;

  result = qword_10040AAB0;
  if (!qword_10040AAB0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.ConnectionCapability, &type metadata for NANAttribute.ConnectionCapability);
    atomic_store(result, (unint64_t *)&qword_10040AAB0);
  }
  return result;
}

unint64_t sub_1001DD794()
{
  unint64_t result;

  result = qword_10040AAB8;
  if (!qword_10040AAB8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.ConnectionCapability, &type metadata for NANAttribute.ConnectionCapability);
    atomic_store(result, (unint64_t *)&qword_10040AAB8);
  }
  return result;
}

unint64_t sub_1001DD7DC()
{
  unint64_t result;

  result = qword_10040AAC0;
  if (!qword_10040AAC0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.ConnectionCapability, &type metadata for NANAttribute.ConnectionCapability);
    atomic_store(result, (unint64_t *)&qword_10040AAC0);
  }
  return result;
}

unint64_t sub_1001DD824()
{
  unint64_t result;

  result = qword_10040AAC8;
  if (!qword_10040AAC8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.ConnectionCapability, &type metadata for NANAttribute.ConnectionCapability);
    atomic_store(result, (unint64_t *)&qword_10040AAC8);
  }
  return result;
}

unint64_t sub_1001DD86C()
{
  unint64_t result;

  result = qword_10040AAD0;
  if (!qword_10040AAD0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.WLANInfrastructure.DeviceRole, &type metadata for NANAttribute.WLANInfrastructure.DeviceRole);
    atomic_store(result, (unint64_t *)&qword_10040AAD0);
  }
  return result;
}

unint64_t sub_1001DD8B4()
{
  unint64_t result;

  result = qword_10040AAD8;
  if (!qword_10040AAD8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.WLANInfrastructure, &type metadata for NANAttribute.WLANInfrastructure);
    atomic_store(result, (unint64_t *)&qword_10040AAD8);
  }
  return result;
}

unint64_t sub_1001DD8FC()
{
  unint64_t result;

  result = qword_10040AAE0;
  if (!qword_10040AAE0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.P2POperation.DeviceRole, &type metadata for NANAttribute.P2POperation.DeviceRole);
    atomic_store(result, (unint64_t *)&qword_10040AAE0);
  }
  return result;
}

unint64_t sub_1001DD944()
{
  unint64_t result;

  result = qword_10040AAE8;
  if (!qword_10040AAE8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.P2POperation.DeviceRole, &type metadata for NANAttribute.P2POperation.DeviceRole);
    atomic_store(result, (unint64_t *)&qword_10040AAE8);
  }
  return result;
}

unint64_t sub_1001DD98C()
{
  unint64_t result;

  result = qword_10040AAF0;
  if (!qword_10040AAF0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.P2POperation.DeviceRole, &type metadata for NANAttribute.P2POperation.DeviceRole);
    atomic_store(result, (unint64_t *)&qword_10040AAF0);
  }
  return result;
}

unint64_t sub_1001DD9D4()
{
  unint64_t result;

  result = qword_10040AAF8;
  if (!qword_10040AAF8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.P2POperation.DeviceRole, &type metadata for NANAttribute.P2POperation.DeviceRole);
    atomic_store(result, (unint64_t *)&qword_10040AAF8);
  }
  return result;
}

unint64_t sub_1001DDA1C()
{
  unint64_t result;

  result = qword_10040AB00;
  if (!qword_10040AB00)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.P2POperation, &type metadata for NANAttribute.P2POperation);
    atomic_store(result, (unint64_t *)&qword_10040AB00);
  }
  return result;
}

unint64_t sub_1001DDA64()
{
  unint64_t result;

  result = qword_10040AB08;
  if (!qword_10040AB08)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.IBSS, &type metadata for NANAttribute.IBSS);
    atomic_store(result, (unint64_t *)&qword_10040AB08);
  }
  return result;
}

unint64_t sub_1001DDAAC()
{
  unint64_t result;

  result = qword_10040AB10;
  if (!qword_10040AB10)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.Mesh, &type metadata for NANAttribute.Mesh);
    atomic_store(result, (unint64_t *)&qword_10040AB10);
  }
  return result;
}

unint64_t sub_1001DDAF4()
{
  unint64_t result;

  result = qword_10040AB18;
  if (!qword_10040AB18)
  {
    result = swift_getWitnessTable("ٿ\t", &type metadata for NANAttribute.FurtherServiceDiscovery);
    atomic_store(result, (unint64_t *)&qword_10040AB18);
  }
  return result;
}

unint64_t sub_1001DDB3C()
{
  unint64_t result;

  result = qword_10040AB20;
  if (!qword_10040AB20)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.FurtherAvailabilityMap, &type metadata for NANAttribute.FurtherAvailabilityMap);
    atomic_store(result, (unint64_t *)&qword_10040AB20);
  }
  return result;
}

unint64_t sub_1001DDB84()
{
  unint64_t result;

  result = qword_10040AB28;
  if (!qword_10040AB28)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.Ranging, &type metadata for NANAttribute.Ranging);
    atomic_store(result, (unint64_t *)&qword_10040AB28);
  }
  return result;
}

unint64_t sub_1001DDBCC()
{
  unint64_t result;

  result = qword_10040AB30;
  if (!qword_10040AB30)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.ClusterDiscovery, &type metadata for NANAttribute.ClusterDiscovery);
    atomic_store(result, (unint64_t *)&qword_10040AB30);
  }
  return result;
}

unint64_t sub_1001DDC14()
{
  unint64_t result;

  result = qword_10040AB38;
  if (!qword_10040AB38)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.DeviceCapability.CommittedDiscoveryWindowInformation, &type metadata for NANAttribute.DeviceCapability.CommittedDiscoveryWindowInformation);
    atomic_store(result, (unint64_t *)&qword_10040AB38);
  }
  return result;
}

unint64_t sub_1001DDC5C()
{
  unint64_t result;

  result = qword_10040AB40;
  if (!qword_10040AB40)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.DeviceCapability.OperationMode, &type metadata for NANAttribute.DeviceCapability.OperationMode);
    atomic_store(result, (unint64_t *)&qword_10040AB40);
  }
  return result;
}

unint64_t sub_1001DDCA4()
{
  unint64_t result;

  result = qword_10040AB48;
  if (!qword_10040AB48)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.DeviceCapability.OperationMode, &type metadata for NANAttribute.DeviceCapability.OperationMode);
    atomic_store(result, (unint64_t *)&qword_10040AB48);
  }
  return result;
}

unint64_t sub_1001DDCEC()
{
  unint64_t result;

  result = qword_10040AB50;
  if (!qword_10040AB50)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.DeviceCapability.OperationMode, &type metadata for NANAttribute.DeviceCapability.OperationMode);
    atomic_store(result, (unint64_t *)&qword_10040AB50);
  }
  return result;
}

unint64_t sub_1001DDD34()
{
  unint64_t result;

  result = qword_10040AB58;
  if (!qword_10040AB58)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.DeviceCapability.OperationMode, &type metadata for NANAttribute.DeviceCapability.OperationMode);
    atomic_store(result, (unint64_t *)&qword_10040AB58);
  }
  return result;
}

unint64_t sub_1001DDD7C()
{
  unint64_t result;

  result = qword_10040AB60;
  if (!qword_10040AB60)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.DeviceCapability.AnntenaCount, &type metadata for NANAttribute.DeviceCapability.AnntenaCount);
    atomic_store(result, (unint64_t *)&qword_10040AB60);
  }
  return result;
}

unint64_t sub_1001DDDC4()
{
  unint64_t result;

  result = qword_10040AB68;
  if (!qword_10040AB68)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.DeviceCapability.AnntenaCount, &type metadata for NANAttribute.DeviceCapability.AnntenaCount);
    atomic_store(result, (unint64_t *)&qword_10040AB68);
  }
  return result;
}

unint64_t sub_1001DDE0C()
{
  unint64_t result;

  result = qword_10040AB70;
  if (!qword_10040AB70)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.DeviceCapability.AnntenaCount, &type metadata for NANAttribute.DeviceCapability.AnntenaCount);
    atomic_store(result, (unint64_t *)&qword_10040AB70);
  }
  return result;
}

unint64_t sub_1001DDE54()
{
  unint64_t result;

  result = qword_10040AB78;
  if (!qword_10040AB78)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.DeviceCapability.AnntenaCount, &type metadata for NANAttribute.DeviceCapability.AnntenaCount);
    atomic_store(result, (unint64_t *)&qword_10040AB78);
  }
  return result;
}

unint64_t sub_1001DDE9C()
{
  unint64_t result;

  result = qword_10040AB80;
  if (!qword_10040AB80)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.DeviceCapability.Capabilities, &type metadata for NANAttribute.DeviceCapability.Capabilities);
    atomic_store(result, (unint64_t *)&qword_10040AB80);
  }
  return result;
}

unint64_t sub_1001DDEE4()
{
  unint64_t result;

  result = qword_10040AB88;
  if (!qword_10040AB88)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.DeviceCapability.Capabilities, &type metadata for NANAttribute.DeviceCapability.Capabilities);
    atomic_store(result, (unint64_t *)&qword_10040AB88);
  }
  return result;
}

unint64_t sub_1001DDF2C()
{
  unint64_t result;

  result = qword_10040AB90;
  if (!qword_10040AB90)
  {
    result = swift_getWitnessTable("ɶ\t", &type metadata for NANAttribute.DeviceCapability.Capabilities);
    atomic_store(result, (unint64_t *)&qword_10040AB90);
  }
  return result;
}

unint64_t sub_1001DDF74()
{
  unint64_t result;

  result = qword_10040AB98;
  if (!qword_10040AB98)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.DeviceCapability.Capabilities, &type metadata for NANAttribute.DeviceCapability.Capabilities);
    atomic_store(result, (unint64_t *)&qword_10040AB98);
  }
  return result;
}

unint64_t sub_1001DDFBC()
{
  unint64_t result;

  result = qword_10040ABA0;
  if (!qword_10040ABA0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.DeviceCapability, &type metadata for NANAttribute.DeviceCapability);
    atomic_store(result, (unint64_t *)&qword_10040ABA0);
  }
  return result;
}

unint64_t sub_1001DE004()
{
  unint64_t result;

  result = qword_10040ABA8;
  if (!qword_10040ABA8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.DeviceCapabilityExtension.RegulatoryInformationForSixGHz, &type metadata for NANAttribute.DeviceCapabilityExtension.RegulatoryInformationForSixGHz);
    atomic_store(result, (unint64_t *)&qword_10040ABA8);
  }
  return result;
}

unint64_t sub_1001DE04C()
{
  unint64_t result;

  result = qword_10040ABB0;
  if (!qword_10040ABB0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.DeviceCapabilityExtension, &type metadata for NANAttribute.DeviceCapabilityExtension);
    atomic_store(result, (unint64_t *)&qword_10040ABB0);
  }
  return result;
}

unint64_t sub_1001DE090(uint64_t a1)
{
  unint64_t result;

  result = sub_1001DE0B4();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1001DE0B4()
{
  unint64_t result;

  result = qword_10040ABB8;
  if (!qword_10040ABB8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.DeviceCapabilityExtension, &type metadata for NANAttribute.DeviceCapabilityExtension);
    atomic_store(result, (unint64_t *)&qword_10040ABB8);
  }
  return result;
}

unint64_t sub_1001DE0FC()
{
  unint64_t result;

  result = qword_10040ABC0;
  if (!qword_10040ABC0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.DeviceCapabilityExtension, &type metadata for NANAttribute.DeviceCapabilityExtension);
    atomic_store(result, (unint64_t *)&qword_10040ABC0);
  }
  return result;
}

unint64_t sub_1001DE144()
{
  unint64_t result;

  result = qword_10040ABC8;
  if (!qword_10040ABC8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.DeviceCapabilityExtension, &type metadata for NANAttribute.DeviceCapabilityExtension);
    atomic_store(result, (unint64_t *)&qword_10040ABC8);
  }
  return result;
}

unint64_t sub_1001DE18C()
{
  unint64_t result;

  result = qword_10040ABD0;
  if (!qword_10040ABD0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.DeviceCapabilityExtension, &type metadata for NANAttribute.DeviceCapabilityExtension);
    atomic_store(result, (unint64_t *)&qword_10040ABD0);
  }
  return result;
}

unint64_t sub_1001DE1D4()
{
  unint64_t result;

  result = qword_10040ABD8;
  if (!qword_10040ABD8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.Datapath.AttributeType, &type metadata for NANAttribute.Datapath.AttributeType);
    atomic_store(result, (unint64_t *)&qword_10040ABD8);
  }
  return result;
}

unint64_t sub_1001DE21C()
{
  unint64_t result;

  result = qword_10040ABE0;
  if (!qword_10040ABE0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.Datapath.Status, &type metadata for NANAttribute.Datapath.Status);
    atomic_store(result, (unint64_t *)&qword_10040ABE0);
  }
  return result;
}

unint64_t sub_1001DE264()
{
  unint64_t result;

  result = qword_10040ABE8;
  if (!qword_10040ABE8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.Datapath.Control, &type metadata for NANAttribute.Datapath.Control);
    atomic_store(result, (unint64_t *)&qword_10040ABE8);
  }
  return result;
}

unint64_t sub_1001DE2AC()
{
  unint64_t result;

  result = qword_10040ABF0;
  if (!qword_10040ABF0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.Datapath.Control, &type metadata for NANAttribute.Datapath.Control);
    atomic_store(result, (unint64_t *)&qword_10040ABF0);
  }
  return result;
}

unint64_t sub_1001DE2F4()
{
  unint64_t result;

  result = qword_10040ABF8;
  if (!qword_10040ABF8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.Datapath.Control, &type metadata for NANAttribute.Datapath.Control);
    atomic_store(result, (unint64_t *)&qword_10040ABF8);
  }
  return result;
}

unint64_t sub_1001DE33C()
{
  unint64_t result;

  result = qword_10040AC00;
  if (!qword_10040AC00)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.Datapath.Control, &type metadata for NANAttribute.Datapath.Control);
    atomic_store(result, (unint64_t *)&qword_10040AC00);
  }
  return result;
}

unint64_t sub_1001DE384()
{
  unint64_t result;

  result = qword_10040AC08;
  if (!qword_10040AC08)
  {
    result = swift_getWitnessTable("խ\t", &type metadata for NANAttribute.Datapath);
    atomic_store(result, (unint64_t *)&qword_10040AC08);
  }
  return result;
}

unint64_t sub_1001DE3CC()
{
  unint64_t result;

  result = qword_10040AC10;
  if (!qword_10040AC10)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.DatapathExtension.Control, &type metadata for NANAttribute.DatapathExtension.Control);
    atomic_store(result, (unint64_t *)&qword_10040AC10);
  }
  return result;
}

unint64_t sub_1001DE414()
{
  unint64_t result;

  result = qword_10040AC18;
  if (!qword_10040AC18)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.DatapathExtension.Control, &type metadata for NANAttribute.DatapathExtension.Control);
    atomic_store(result, (unint64_t *)&qword_10040AC18);
  }
  return result;
}

unint64_t sub_1001DE45C()
{
  unint64_t result;

  result = qword_10040AC20;
  if (!qword_10040AC20)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.DatapathExtension.Control, &type metadata for NANAttribute.DatapathExtension.Control);
    atomic_store(result, (unint64_t *)&qword_10040AC20);
  }
  return result;
}

unint64_t sub_1001DE4A4()
{
  unint64_t result;

  result = qword_10040AC28;
  if (!qword_10040AC28)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.DatapathExtension.Control, &type metadata for NANAttribute.DatapathExtension.Control);
    atomic_store(result, (unint64_t *)&qword_10040AC28);
  }
  return result;
}

unint64_t sub_1001DE4EC()
{
  unint64_t result;

  result = qword_10040AC30;
  if (!qword_10040AC30)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.DatapathExtension.ServiceInfoType, &type metadata for NANAttribute.DatapathExtension.ServiceInfoType);
    atomic_store(result, (unint64_t *)&qword_10040AC30);
  }
  return result;
}

unint64_t sub_1001DE534()
{
  unint64_t result;

  result = qword_10040AC38;
  if (!qword_10040AC38)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.DatapathExtension, &type metadata for NANAttribute.DatapathExtension);
    atomic_store(result, (unint64_t *)&qword_10040AC38);
  }
  return result;
}

unint64_t sub_1001DE57C()
{
  unint64_t result;

  result = qword_10040AC40;
  if (!qword_10040AC40)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.Availability.Control, &type metadata for NANAttribute.Availability.Control);
    atomic_store(result, (unint64_t *)&qword_10040AC40);
  }
  return result;
}

unint64_t sub_1001DE5C4()
{
  unint64_t result;

  result = qword_10040AC48;
  if (!qword_10040AC48)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.Availability.Control, &type metadata for NANAttribute.Availability.Control);
    atomic_store(result, (unint64_t *)&qword_10040AC48);
  }
  return result;
}

unint64_t sub_1001DE60C()
{
  unint64_t result;

  result = qword_10040AC50;
  if (!qword_10040AC50)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.Availability.Control, &type metadata for NANAttribute.Availability.Control);
    atomic_store(result, (unint64_t *)&qword_10040AC50);
  }
  return result;
}

unint64_t sub_1001DE654()
{
  unint64_t result;

  result = qword_10040AC58;
  if (!qword_10040AC58)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.Availability.Control, &type metadata for NANAttribute.Availability.Control);
    atomic_store(result, (unint64_t *)&qword_10040AC58);
  }
  return result;
}

unint64_t sub_1001DE69C()
{
  unint64_t result;

  result = qword_10040AC60;
  if (!qword_10040AC60)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.Availability, &type metadata for NANAttribute.Availability);
    atomic_store(result, (unint64_t *)&qword_10040AC60);
  }
  return result;
}

unint64_t sub_1001DE6E4()
{
  unint64_t result;

  result = qword_10040AC68;
  if (!qword_10040AC68)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.DataCluster.Control, &type metadata for NANAttribute.DataCluster.Control);
    atomic_store(result, (unint64_t *)&qword_10040AC68);
  }
  return result;
}

unint64_t sub_1001DE72C()
{
  unint64_t result;

  result = qword_10040AC70;
  if (!qword_10040AC70)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.DataCluster.Control, &type metadata for NANAttribute.DataCluster.Control);
    atomic_store(result, (unint64_t *)&qword_10040AC70);
  }
  return result;
}

unint64_t sub_1001DE774()
{
  unint64_t result;

  result = qword_10040AC78;
  if (!qword_10040AC78)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.DataCluster.Control, &type metadata for NANAttribute.DataCluster.Control);
    atomic_store(result, (unint64_t *)&qword_10040AC78);
  }
  return result;
}

unint64_t sub_1001DE7BC()
{
  unint64_t result;

  result = qword_10040AC80;
  if (!qword_10040AC80)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.DataCluster.Control, &type metadata for NANAttribute.DataCluster.Control);
    atomic_store(result, (unint64_t *)&qword_10040AC80);
  }
  return result;
}

unint64_t sub_1001DE804()
{
  unint64_t result;

  result = qword_10040AC88;
  if (!qword_10040AC88)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.DataCluster, &type metadata for NANAttribute.DataCluster);
    atomic_store(result, (unint64_t *)&qword_10040AC88);
  }
  return result;
}

unint64_t sub_1001DE84C()
{
  unint64_t result;

  result = qword_10040AC90;
  if (!qword_10040AC90)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.DeviceLink.Control.SetupReason, &type metadata for NANAttribute.DeviceLink.Control.SetupReason);
    atomic_store(result, (unint64_t *)&qword_10040AC90);
  }
  return result;
}

unint64_t sub_1001DE894()
{
  unint64_t result;

  result = qword_10040AC98;
  if (!qword_10040AC98)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.DeviceLink.Control, &type metadata for NANAttribute.DeviceLink.Control);
    atomic_store(result, (unint64_t *)&qword_10040AC98);
  }
  return result;
}

unint64_t sub_1001DE8DC()
{
  unint64_t result;

  result = qword_10040ACA0;
  if (!qword_10040ACA0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.DeviceLink.Control, &type metadata for NANAttribute.DeviceLink.Control);
    atomic_store(result, (unint64_t *)&qword_10040ACA0);
  }
  return result;
}

unint64_t sub_1001DE924()
{
  unint64_t result;

  result = qword_10040ACA8;
  if (!qword_10040ACA8)
  {
    result = swift_getWitnessTable("͡\t", &type metadata for NANAttribute.DeviceLink.Control);
    atomic_store(result, (unint64_t *)&qword_10040ACA8);
  }
  return result;
}

unint64_t sub_1001DE96C()
{
  unint64_t result;

  result = qword_10040ACB0;
  if (!qword_10040ACB0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.DeviceLink.Control, &type metadata for NANAttribute.DeviceLink.Control);
    atomic_store(result, (unint64_t *)&qword_10040ACB0);
  }
  return result;
}

unint64_t sub_1001DE9B4()
{
  unint64_t result;

  result = qword_10040ACB8;
  if (!qword_10040ACB8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.DeviceLink.AttributeType, &type metadata for NANAttribute.DeviceLink.AttributeType);
    atomic_store(result, (unint64_t *)&qword_10040ACB8);
  }
  return result;
}

unint64_t sub_1001DE9FC()
{
  unint64_t result;

  result = qword_10040ACC0;
  if (!qword_10040ACC0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.DeviceLink.Status, &type metadata for NANAttribute.DeviceLink.Status);
    atomic_store(result, (unint64_t *)&qword_10040ACC0);
  }
  return result;
}

unint64_t sub_1001DEA44()
{
  unint64_t result;

  result = qword_10040ACC8;
  if (!qword_10040ACC8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.DeviceLink, &type metadata for NANAttribute.DeviceLink);
    atomic_store(result, (unint64_t *)&qword_10040ACC8);
  }
  return result;
}

unint64_t sub_1001DEA8C()
{
  unint64_t result;

  result = qword_10040ACD0;
  if (!qword_10040ACD0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.DeviceLinkQoS, &type metadata for NANAttribute.DeviceLinkQoS);
    atomic_store(result, (unint64_t *)&qword_10040ACD0);
  }
  return result;
}

unint64_t sub_1001DEAD4()
{
  unint64_t result;

  result = qword_10040ACD8;
  if (!qword_10040ACD8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.UnalignedSchedule.UnalignedWindowOverwrite, &type metadata for NANAttribute.UnalignedSchedule.UnalignedWindowOverwrite);
    atomic_store(result, (unint64_t *)&qword_10040ACD8);
  }
  return result;
}

unint64_t sub_1001DEB1C()
{
  unint64_t result;

  result = qword_10040ACE0;
  if (!qword_10040ACE0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.UnalignedSchedule.UnalignedWindowOverwrite, &type metadata for NANAttribute.UnalignedSchedule.UnalignedWindowOverwrite);
    atomic_store(result, (unint64_t *)&qword_10040ACE0);
  }
  return result;
}

unint64_t sub_1001DEB64()
{
  unint64_t result;

  result = qword_10040ACE8;
  if (!qword_10040ACE8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.UnalignedSchedule.UnalignedWindowOverwrite, &type metadata for NANAttribute.UnalignedSchedule.UnalignedWindowOverwrite);
    atomic_store(result, (unint64_t *)&qword_10040ACE8);
  }
  return result;
}

unint64_t sub_1001DEBAC()
{
  unint64_t result;

  result = qword_10040ACF0;
  if (!qword_10040ACF0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.UnalignedSchedule.UnalignedWindowOverwrite, &type metadata for NANAttribute.UnalignedSchedule.UnalignedWindowOverwrite);
    atomic_store(result, (unint64_t *)&qword_10040ACF0);
  }
  return result;
}

unint64_t sub_1001DEBF4()
{
  unint64_t result;

  result = qword_10040ACF8;
  if (!qword_10040ACF8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.UnalignedSchedule.UnalignedWindowControl.EntryType, &type metadata for NANAttribute.UnalignedSchedule.UnalignedWindowControl.EntryType);
    atomic_store(result, (unint64_t *)&qword_10040ACF8);
  }
  return result;
}

unint64_t sub_1001DEC3C()
{
  unint64_t result;

  result = qword_10040AD00;
  if (!qword_10040AD00)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.UnalignedSchedule.UnalignedWindowControl, &type metadata for NANAttribute.UnalignedSchedule.UnalignedWindowControl);
    atomic_store(result, (unint64_t *)&qword_10040AD00);
  }
  return result;
}

unint64_t sub_1001DEC84()
{
  unint64_t result;

  result = qword_10040AD08;
  if (!qword_10040AD08)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.UnalignedSchedule.UnalignedWindowControl, &type metadata for NANAttribute.UnalignedSchedule.UnalignedWindowControl);
    atomic_store(result, (unint64_t *)&qword_10040AD08);
  }
  return result;
}

unint64_t sub_1001DECCC()
{
  unint64_t result;

  result = qword_10040AD10;
  if (!qword_10040AD10)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.UnalignedSchedule.UnalignedWindowControl, &type metadata for NANAttribute.UnalignedSchedule.UnalignedWindowControl);
    atomic_store(result, (unint64_t *)&qword_10040AD10);
  }
  return result;
}

unint64_t sub_1001DED14()
{
  unint64_t result;

  result = qword_10040AD18;
  if (!qword_10040AD18)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.UnalignedSchedule.UnalignedWindowControl, &type metadata for NANAttribute.UnalignedSchedule.UnalignedWindowControl);
    atomic_store(result, (unint64_t *)&qword_10040AD18);
  }
  return result;
}

unint64_t sub_1001DED5C()
{
  unint64_t result;

  result = qword_10040AD20;
  if (!qword_10040AD20)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.UnalignedSchedule, &type metadata for NANAttribute.UnalignedSchedule);
    atomic_store(result, (unint64_t *)&qword_10040AD20);
  }
  return result;
}

unint64_t sub_1001DEDA4()
{
  unint64_t result;

  result = qword_10040AD28;
  if (!qword_10040AD28)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.RangingInformation.LocationInformation, &type metadata for NANAttribute.RangingInformation.LocationInformation);
    atomic_store(result, (unint64_t *)&qword_10040AD28);
  }
  return result;
}

unint64_t sub_1001DEDEC()
{
  unint64_t result;

  result = qword_10040AD30;
  if (!qword_10040AD30)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.RangingInformation.LocationInformation, &type metadata for NANAttribute.RangingInformation.LocationInformation);
    atomic_store(result, (unint64_t *)&qword_10040AD30);
  }
  return result;
}

unint64_t sub_1001DEE34()
{
  unint64_t result;

  result = qword_10040AD38;
  if (!qword_10040AD38)
  {
    result = swift_getWitnessTable("Ŗ\t", &type metadata for NANAttribute.RangingInformation.LocationInformation);
    atomic_store(result, (unint64_t *)&qword_10040AD38);
  }
  return result;
}

unint64_t sub_1001DEE7C()
{
  unint64_t result;

  result = qword_10040AD40;
  if (!qword_10040AD40)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.RangingInformation.LocationInformation, &type metadata for NANAttribute.RangingInformation.LocationInformation);
    atomic_store(result, (unint64_t *)&qword_10040AD40);
  }
  return result;
}

unint64_t sub_1001DEEC4()
{
  unint64_t result;

  result = qword_10040AD48;
  if (!qword_10040AD48)
  {
    result = swift_getWitnessTable("ݕ\t", &type metadata for NANAttribute.RangingInformation);
    atomic_store(result, (unint64_t *)&qword_10040AD48);
  }
  return result;
}

unint64_t sub_1001DEF0C()
{
  unint64_t result;

  result = qword_10040AD50;
  if (!qword_10040AD50)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.RangingSetup.AttributeType, &type metadata for NANAttribute.RangingSetup.AttributeType);
    atomic_store(result, (unint64_t *)&qword_10040AD50);
  }
  return result;
}

unint64_t sub_1001DEF54()
{
  unint64_t result;

  result = qword_10040AD58;
  if (!qword_10040AD58)
  {
    result = swift_getWitnessTable("Ŕ\t", &type metadata for NANAttribute.RangingSetup.Status);
    atomic_store(result, (unint64_t *)&qword_10040AD58);
  }
  return result;
}

unint64_t sub_1001DEF9C()
{
  unint64_t result;

  result = qword_10040AD60;
  if (!qword_10040AD60)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.RangingSetup.Control, &type metadata for NANAttribute.RangingSetup.Control);
    atomic_store(result, (unint64_t *)&qword_10040AD60);
  }
  return result;
}

unint64_t sub_1001DEFE4()
{
  unint64_t result;

  result = qword_10040AD68;
  if (!qword_10040AD68)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.RangingSetup.Control, &type metadata for NANAttribute.RangingSetup.Control);
    atomic_store(result, (unint64_t *)&qword_10040AD68);
  }
  return result;
}

unint64_t sub_1001DF02C()
{
  unint64_t result;

  result = qword_10040AD70;
  if (!qword_10040AD70)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.RangingSetup.Control, &type metadata for NANAttribute.RangingSetup.Control);
    atomic_store(result, (unint64_t *)&qword_10040AD70);
  }
  return result;
}

unint64_t sub_1001DF074()
{
  unint64_t result;

  result = qword_10040AD78;
  if (!qword_10040AD78)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.RangingSetup.Control, &type metadata for NANAttribute.RangingSetup.Control);
    atomic_store(result, (unint64_t *)&qword_10040AD78);
  }
  return result;
}

unint64_t sub_1001DF0BC()
{
  unint64_t result;

  result = qword_10040AD80;
  if (!qword_10040AD80)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.RangingSetup.FineTimingMeasurementParameters, &type metadata for NANAttribute.RangingSetup.FineTimingMeasurementParameters);
    atomic_store(result, (unint64_t *)&qword_10040AD80);
  }
  return result;
}

unint64_t sub_1001DF104()
{
  unint64_t result;

  result = qword_10040AD88;
  if (!qword_10040AD88)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.RangingSetup.FineTimingMeasurementParameters, &type metadata for NANAttribute.RangingSetup.FineTimingMeasurementParameters);
    atomic_store(result, (unint64_t *)&qword_10040AD88);
  }
  return result;
}

unint64_t sub_1001DF14C()
{
  unint64_t result;

  result = qword_10040AD90;
  if (!qword_10040AD90)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.RangingSetup.FineTimingMeasurementParameters, &type metadata for NANAttribute.RangingSetup.FineTimingMeasurementParameters);
    atomic_store(result, (unint64_t *)&qword_10040AD90);
  }
  return result;
}

unint64_t sub_1001DF194()
{
  unint64_t result;

  result = qword_10040AD98;
  if (!qword_10040AD98)
  {
    result = swift_getWitnessTable("Ő\t", &type metadata for NANAttribute.RangingSetup.FineTimingMeasurementParameters);
    atomic_store(result, (unint64_t *)&qword_10040AD98);
  }
  return result;
}

unint64_t sub_1001DF1DC()
{
  unint64_t result;

  result = qword_10040ADA0;
  if (!qword_10040ADA0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.RangingSetup, &type metadata for NANAttribute.RangingSetup);
    atomic_store(result, (unint64_t *)&qword_10040ADA0);
  }
  return result;
}

unint64_t sub_1001DF224()
{
  unint64_t result;

  result = qword_10040ADA8;
  if (!qword_10040ADA8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.ElementContainer, &type metadata for NANAttribute.ElementContainer);
    atomic_store(result, (unint64_t *)&qword_10040ADA8);
  }
  return result;
}

unint64_t sub_1001DF26C()
{
  unint64_t result;

  result = qword_10040ADB0;
  if (!qword_10040ADB0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.ExtendedWLANInfrastructure, &type metadata for NANAttribute.ExtendedWLANInfrastructure);
    atomic_store(result, (unint64_t *)&qword_10040ADB0);
  }
  return result;
}

unint64_t sub_1001DF2B4()
{
  unint64_t result;

  result = qword_10040ADB8;
  if (!qword_10040ADB8)
  {
    result = swift_getWitnessTable("\u074C\t", &type metadata for NANAttribute.ExtendedP2POperation);
    atomic_store(result, (unint64_t *)&qword_10040ADB8);
  }
  return result;
}

unint64_t sub_1001DF2FC()
{
  unint64_t result;

  result = qword_10040ADC0;
  if (!qword_10040ADC0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.ExtendedIBSS, &type metadata for NANAttribute.ExtendedIBSS);
    atomic_store(result, (unint64_t *)&qword_10040ADC0);
  }
  return result;
}

unint64_t sub_1001DF344()
{
  unint64_t result;

  result = qword_10040ADC8;
  if (!qword_10040ADC8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.ExtendedMesh, &type metadata for NANAttribute.ExtendedMesh);
    atomic_store(result, (unint64_t *)&qword_10040ADC8);
  }
  return result;
}

unint64_t sub_1001DF38C()
{
  unint64_t result;

  result = qword_10040ADD0;
  if (!qword_10040ADD0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.FineTimingMeasurementRangeReport.Entry, &type metadata for NANAttribute.FineTimingMeasurementRangeReport.Entry);
    atomic_store(result, (unint64_t *)&qword_10040ADD0);
  }
  return result;
}

unint64_t sub_1001DF3D4()
{
  unint64_t result;

  result = qword_10040ADD8;
  if (!qword_10040ADD8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.FineTimingMeasurementRangeReport, &type metadata for NANAttribute.FineTimingMeasurementRangeReport);
    atomic_store(result, (unint64_t *)&qword_10040ADD8);
  }
  return result;
}

unint64_t sub_1001DF41C()
{
  unint64_t result;

  result = qword_10040ADE0;
  if (!qword_10040ADE0)
  {
    result = swift_getWitnessTable("Չ\t", &type metadata for NANAttribute.CipherSuiteInformation.Capabilities.ReplayCounters);
    atomic_store(result, (unint64_t *)&qword_10040ADE0);
  }
  return result;
}

unint64_t sub_1001DF464()
{
  unint64_t result;

  result = qword_10040ADE8;
  if (!qword_10040ADE8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.CipherSuiteInformation.Capabilities.GroupKeySupport, &type metadata for NANAttribute.CipherSuiteInformation.Capabilities.GroupKeySupport);
    atomic_store(result, (unint64_t *)&qword_10040ADE8);
  }
  return result;
}

unint64_t sub_1001DF4AC()
{
  unint64_t result;

  result = qword_10040ADF0;
  if (!qword_10040ADF0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.CipherSuiteInformation.Capabilities.BroadcastIntegrityProtocol, &type metadata for NANAttribute.CipherSuiteInformation.Capabilities.BroadcastIntegrityProtocol);
    atomic_store(result, (unint64_t *)&qword_10040ADF0);
  }
  return result;
}

unint64_t sub_1001DF4F4()
{
  unint64_t result;

  result = qword_10040ADF8;
  if (!qword_10040ADF8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.CipherSuiteInformation.Capabilities, &type metadata for NANAttribute.CipherSuiteInformation.Capabilities);
    atomic_store(result, (unint64_t *)&qword_10040ADF8);
  }
  return result;
}

unint64_t sub_1001DF53C()
{
  unint64_t result;

  result = qword_10040AE00;
  if (!qword_10040AE00)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.CipherSuiteInformation.Capabilities, &type metadata for NANAttribute.CipherSuiteInformation.Capabilities);
    atomic_store(result, (unint64_t *)&qword_10040AE00);
  }
  return result;
}

unint64_t sub_1001DF584()
{
  unint64_t result;

  result = qword_10040AE08;
  if (!qword_10040AE08)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.CipherSuiteInformation.Capabilities, &type metadata for NANAttribute.CipherSuiteInformation.Capabilities);
    atomic_store(result, (unint64_t *)&qword_10040AE08);
  }
  return result;
}

unint64_t sub_1001DF5CC()
{
  unint64_t result;

  result = qword_10040AE10;
  if (!qword_10040AE10)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.CipherSuiteInformation.Capabilities, &type metadata for NANAttribute.CipherSuiteInformation.Capabilities);
    atomic_store(result, (unint64_t *)&qword_10040AE10);
  }
  return result;
}

unint64_t sub_1001DF614()
{
  unint64_t result;

  result = qword_10040AE18;
  if (!qword_10040AE18)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.CipherSuiteInformation.CipherSuite, &type metadata for NANAttribute.CipherSuiteInformation.CipherSuite);
    atomic_store(result, (unint64_t *)&qword_10040AE18);
  }
  return result;
}

unint64_t sub_1001DF65C()
{
  unint64_t result;

  result = qword_10040AE20;
  if (!qword_10040AE20)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.CipherSuiteInformation, &type metadata for NANAttribute.CipherSuiteInformation);
    atomic_store(result, (unint64_t *)&qword_10040AE20);
  }
  return result;
}

unint64_t sub_1001DF6A4()
{
  unint64_t result;

  result = qword_10040AE28;
  if (!qword_10040AE28)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.SecurityContextInformation.SecurityContextIdentifier.IdentifierType, &type metadata for NANAttribute.SecurityContextInformation.SecurityContextIdentifier.IdentifierType);
    atomic_store(result, (unint64_t *)&qword_10040AE28);
  }
  return result;
}

unint64_t sub_1001DF6EC()
{
  unint64_t result;

  result = qword_10040AE30;
  if (!qword_10040AE30)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.SecurityContextInformation.SecurityContextIdentifier, &type metadata for NANAttribute.SecurityContextInformation.SecurityContextIdentifier);
    atomic_store(result, (unint64_t *)&qword_10040AE30);
  }
  return result;
}

unint64_t sub_1001DF734()
{
  unint64_t result;

  result = qword_10040AE38;
  if (!qword_10040AE38)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.SecurityContextInformation, &type metadata for NANAttribute.SecurityContextInformation);
    atomic_store(result, (unint64_t *)&qword_10040AE38);
  }
  return result;
}

unint64_t sub_1001DF77C()
{
  unint64_t result;

  result = qword_10040AE40;
  if (!qword_10040AE40)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.SharedKeyDescriptor, &type metadata for NANAttribute.SharedKeyDescriptor);
    atomic_store(result, (unint64_t *)&qword_10040AE40);
  }
  return result;
}

unint64_t sub_1001DF7C4()
{
  unint64_t result;

  result = qword_10040AE48;
  if (!qword_10040AE48)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.MulticastScheduleChange.Control, &type metadata for NANAttribute.MulticastScheduleChange.Control);
    atomic_store(result, (unint64_t *)&qword_10040AE48);
  }
  return result;
}

unint64_t sub_1001DF80C()
{
  unint64_t result;

  result = qword_10040AE50;
  if (!qword_10040AE50)
  {
    result = swift_getWitnessTable("Հ\t", &type metadata for NANAttribute.MulticastScheduleChange.Control);
    atomic_store(result, (unint64_t *)&qword_10040AE50);
  }
  return result;
}

unint64_t sub_1001DF854()
{
  unint64_t result;

  result = qword_10040AE58;
  if (!qword_10040AE58)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.MulticastScheduleChange.Control, &type metadata for NANAttribute.MulticastScheduleChange.Control);
    atomic_store(result, (unint64_t *)&qword_10040AE58);
  }
  return result;
}

unint64_t sub_1001DF89C()
{
  unint64_t result;

  result = qword_10040AE60;
  if (!qword_10040AE60)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.MulticastScheduleChange.Control, &type metadata for NANAttribute.MulticastScheduleChange.Control);
    atomic_store(result, (unint64_t *)&qword_10040AE60);
  }
  return result;
}

unint64_t sub_1001DF8E4()
{
  unint64_t result;

  result = qword_10040AE68;
  if (!qword_10040AE68)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.MulticastScheduleChange, &type metadata for NANAttribute.MulticastScheduleChange);
    atomic_store(result, (unint64_t *)&qword_10040AE68);
  }
  return result;
}

unint64_t sub_1001DF92C()
{
  unint64_t result;

  result = qword_10040AE70;
  if (!qword_10040AE70)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.PublicAvailability, &type metadata for NANAttribute.PublicAvailability);
    atomic_store(result, (unint64_t *)&qword_10040AE70);
  }
  return result;
}

unint64_t sub_1001DF974()
{
  unint64_t result;

  result = qword_10040AE78;
  if (!qword_10040AE78)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.PairingIdentityResolution.CipherVersion, &type metadata for NANAttribute.PairingIdentityResolution.CipherVersion);
    atomic_store(result, (unint64_t *)&qword_10040AE78);
  }
  return result;
}

unint64_t sub_1001DF9BC()
{
  unint64_t result;

  result = qword_10040AE80;
  if (!qword_10040AE80)
  {
    result = swift_getWitnessTable("=|\t", &type metadata for NANAttribute.PairingIdentityResolution);
    atomic_store(result, (unint64_t *)&qword_10040AE80);
  }
  return result;
}

unint64_t sub_1001DFA04()
{
  unint64_t result;

  result = qword_10040AE88;
  if (!qword_10040AE88)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.PairingBootstrapping.PairingType, &type metadata for NANAttribute.PairingBootstrapping.PairingType);
    atomic_store(result, (unint64_t *)&qword_10040AE88);
  }
  return result;
}

unint64_t sub_1001DFA4C()
{
  unint64_t result;

  result = qword_10040AE90;
  if (!qword_10040AE90)
  {
    result = swift_getWitnessTable("%{\t", &type metadata for NANAttribute.PairingBootstrapping.Status);
    atomic_store(result, (unint64_t *)&qword_10040AE90);
  }
  return result;
}

unint64_t sub_1001DFA94()
{
  unint64_t result;

  result = qword_10040AE98;
  if (!qword_10040AE98)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.PairingBootstrapping.Method, &type metadata for NANAttribute.PairingBootstrapping.Method);
    atomic_store(result, (unint64_t *)&qword_10040AE98);
  }
  return result;
}

unint64_t sub_1001DFADC()
{
  unint64_t result;

  result = qword_10040AEA0;
  if (!qword_10040AEA0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.PairingBootstrapping.Method, &type metadata for NANAttribute.PairingBootstrapping.Method);
    atomic_store(result, (unint64_t *)&qword_10040AEA0);
  }
  return result;
}

unint64_t sub_1001DFB24()
{
  unint64_t result;

  result = qword_10040AEA8;
  if (!qword_10040AEA8)
  {
    result = swift_getWitnessTable("mx\t", &type metadata for NANAttribute.PairingBootstrapping.Method);
    atomic_store(result, (unint64_t *)&qword_10040AEA8);
  }
  return result;
}

unint64_t sub_1001DFB6C()
{
  unint64_t result;

  result = qword_10040AEB0;
  if (!qword_10040AEB0)
  {
    result = swift_getWitnessTable("Ey\t", &type metadata for NANAttribute.PairingBootstrapping.Method);
    atomic_store(result, (unint64_t *)&qword_10040AEB0);
  }
  return result;
}

unint64_t sub_1001DFBB4()
{
  unint64_t result;

  result = qword_10040AEB8;
  if (!qword_10040AEB8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.PairingBootstrapping.Comeback, &type metadata for NANAttribute.PairingBootstrapping.Comeback);
    atomic_store(result, (unint64_t *)&qword_10040AEB8);
  }
  return result;
}

unint64_t sub_1001DFBFC()
{
  unint64_t result;

  result = qword_10040AEC0;
  if (!qword_10040AEC0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.PairingBootstrapping, &type metadata for NANAttribute.PairingBootstrapping);
    atomic_store(result, (unint64_t *)&qword_10040AEC0);
  }
  return result;
}

unint64_t sub_1001DFC44()
{
  unint64_t result;

  result = qword_10040AEC8;
  if (!qword_10040AEC8)
  {
    result = swift_getWitnessTable("ev\t", &type metadata for NANAttribute.VendorSpecific);
    atomic_store(result, (unint64_t *)&qword_10040AEC8);
  }
  return result;
}

uint64_t sub_1001DFC88()
{
  return sub_100011DE4(&qword_10040AED0, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes, (uint64_t)&protocol conformance descriptor for NANAttribute.CustomDeviceInformation.CustomAttributes);
}

unint64_t sub_1001DFCB8()
{
  unint64_t result;

  result = qword_10040AED8;
  if (!qword_10040AED8)
  {
    result = swift_getWitnessTable("]u\t", &type metadata for NANAttribute.CustomDeviceInformation.PlatformType);
    atomic_store(result, (unint64_t *)&qword_10040AED8);
  }
  return result;
}

unint64_t sub_1001DFD00()
{
  unint64_t result;

  result = qword_10040AEE0;
  if (!qword_10040AEE0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.CustomDeviceInformation.Flags, &type metadata for NANAttribute.CustomDeviceInformation.Flags);
    atomic_store(result, (unint64_t *)&qword_10040AEE0);
  }
  return result;
}

unint64_t sub_1001DFD48()
{
  unint64_t result;

  result = qword_10040AEE8;
  if (!qword_10040AEE8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.CustomDeviceInformation.Flags, &type metadata for NANAttribute.CustomDeviceInformation.Flags);
    atomic_store(result, (unint64_t *)&qword_10040AEE8);
  }
  return result;
}

unint64_t sub_1001DFD90()
{
  unint64_t result;

  result = qword_10040AEF0;
  if (!qword_10040AEF0)
  {
    result = swift_getWitnessTable("Ur\t", &type metadata for NANAttribute.CustomDeviceInformation.Flags);
    atomic_store(result, (unint64_t *)&qword_10040AEF0);
  }
  return result;
}

unint64_t sub_1001DFDD8()
{
  unint64_t result;

  result = qword_10040AEF8;
  if (!qword_10040AEF8)
  {
    result = swift_getWitnessTable("-s\t", &type metadata for NANAttribute.CustomDeviceInformation.Flags);
    atomic_store(result, (unint64_t *)&qword_10040AEF8);
  }
  return result;
}

unint64_t sub_1001DFE20()
{
  unint64_t result;

  result = qword_10040AF00;
  if (!qword_10040AF00)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.CustomDeviceInformation.Version, &type metadata for NANAttribute.CustomDeviceInformation.Version);
    atomic_store(result, (unint64_t *)&qword_10040AF00);
  }
  return result;
}

uint64_t sub_1001DFE64()
{
  return sub_100011DE4(&qword_10040AF08, type metadata accessor for NANAttribute.CustomDeviceInformation, (uint64_t)&protocol conformance descriptor for NANAttribute.CustomDeviceInformation);
}

unint64_t sub_1001DFE94()
{
  unint64_t result;

  result = qword_10040AF10;
  if (!qword_10040AF10)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.AttributeType, &type metadata for NANAttribute.AttributeType);
    atomic_store(result, (unint64_t *)&qword_10040AF10);
  }
  return result;
}

uint64_t sub_1001DFED8()
{
  return sub_100011DE4(&qword_10040AF18, type metadata accessor for NANAttribute, (uint64_t)&protocol conformance descriptor for NANAttribute);
}

char *initializeBufferWithCopyOfBuffer for NANAttribute(char *a1, char *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned __int8 v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  int v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  _OWORD *v58;
  _OWORD *v59;
  unint64_t v60;
  __int128 v61;
  uint64_t v62;
  char *v63;
  char *v64;
  int *v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t *v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t *v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t *v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  unsigned int (*v119)(char *, uint64_t, uint64_t);
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  char *v124;
  int *v125;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v9 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = (char *)(v9 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload(a2, a3))
    {
      case 2u:
        v8 = *(_QWORD *)a2;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        swift_bridgeObjectRetain(v8);
        swift_storeEnumTagMultiPayload(a1, a3, 2);
        break;
      case 3u:
        v11 = *(_QWORD *)a2;
        v12 = *((_QWORD *)a2 + 1);
        sub_100031FEC(*(_QWORD *)a2, v12);
        *(_QWORD *)a1 = v11;
        *((_QWORD *)a1 + 1) = v12;
        a1[16] = a2[16];
        *(_WORD *)(a1 + 17) = *(_WORD *)(a2 + 17);
        *((_WORD *)a1 + 10) = *((_WORD *)a2 + 10);
        a1[22] = a2[22];
        v13 = *((_QWORD *)a2 + 3);
        *((_QWORD *)a1 + 3) = v13;
        v14 = a2[50];
        v15 = *((unsigned __int16 *)a2 + 24);
        swift_bridgeObjectRetain(v13);
        if (v14 == 255)
        {
          *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
          *(_DWORD *)(a1 + 47) = *(_DWORD *)(a2 + 47);
        }
        else
        {
          v76 = v15 & 0xFF00FFFF | (v14 << 16);
          v77 = *((_QWORD *)a2 + 4);
          v78 = *((_QWORD *)a2 + 5);
          sub_1001D7C70(v77, v78, v76, BYTE2(v76) & 1);
          *((_QWORD *)a1 + 4) = v77;
          *((_QWORD *)a1 + 5) = v78;
          *((_WORD *)a1 + 24) = v76;
          a1[50] = BYTE2(v76) & 1;
        }
        v79 = a2[56];
        if (v79 == 4)
        {
          *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
          *((_QWORD *)a1 + 9) = *((_QWORD *)a2 + 9);
        }
        else
        {
          a1[56] = v79;
          v88 = *((_QWORD *)a2 + 8);
          v87 = *((_QWORD *)a2 + 9);
          sub_100031FEC(v88, v87);
          *((_QWORD *)a1 + 8) = v88;
          *((_QWORD *)a1 + 9) = v87;
        }
        swift_storeEnumTagMultiPayload(a1, a3, 3);
        break;
      case 5u:
        *(_DWORD *)a1 = *(_DWORD *)a2;
        *((_WORD *)a1 + 2) = *((_WORD *)a2 + 2);
        *(_DWORD *)(a1 + 6) = *(_DWORD *)(a2 + 6);
        *((_WORD *)a1 + 5) = *((_WORD *)a2 + 5);
        a1[16] = a2[16];
        *(_WORD *)(a1 + 17) = *(_WORD *)(a2 + 17);
        v16 = *((_QWORD *)a2 + 3);
        v17 = *((_QWORD *)a2 + 4);
        sub_100031FEC(v16, v17);
        *((_QWORD *)a1 + 3) = v16;
        *((_QWORD *)a1 + 4) = v17;
        a1[40] = a2[40];
        swift_storeEnumTagMultiPayload(a1, a3, 5);
        break;
      case 6u:
        *a1 = *a2;
        *(_DWORD *)(a1 + 1) = *(_DWORD *)(a2 + 1);
        *(_WORD *)(a1 + 5) = *(_WORD *)(a2 + 5);
        a1[8] = a2[8];
        *(_WORD *)(a1 + 9) = *(_WORD *)(a2 + 9);
        v19 = *((_QWORD *)a2 + 2);
        v18 = *((_QWORD *)a2 + 3);
        sub_100031FEC(v19, v18);
        *((_QWORD *)a1 + 2) = v19;
        *((_QWORD *)a1 + 3) = v18;
        swift_storeEnumTagMultiPayload(a1, a3, 6);
        break;
      case 7u:
        *(_DWORD *)a1 = *(_DWORD *)a2;
        *((_WORD *)a1 + 2) = *((_WORD *)a2 + 2);
        *(_DWORD *)(a1 + 6) = *(_DWORD *)(a2 + 6);
        *((_WORD *)a1 + 5) = *((_WORD *)a2 + 5);
        a1[16] = a2[16];
        *(_WORD *)(a1 + 17) = *(_WORD *)(a2 + 17);
        v21 = *((_QWORD *)a2 + 3);
        v20 = *((_QWORD *)a2 + 4);
        sub_100031FEC(v21, v20);
        *((_QWORD *)a1 + 3) = v21;
        *((_QWORD *)a1 + 4) = v20;
        swift_storeEnumTagMultiPayload(a1, a3, 7);
        break;
      case 8u:
        *(_DWORD *)a1 = *(_DWORD *)a2;
        *((_WORD *)a1 + 2) = *((_WORD *)a2 + 2);
        a1[8] = a2[8];
        *(_WORD *)(a1 + 9) = *(_WORD *)(a2 + 9);
        v22 = *((_QWORD *)a2 + 2);
        v23 = *((_QWORD *)a2 + 3);
        sub_100031FEC(v22, v23);
        *((_QWORD *)a1 + 2) = v22;
        *((_QWORD *)a1 + 3) = v23;
        v25 = *((_QWORD *)a2 + 4);
        v24 = *((_QWORD *)a2 + 5);
        sub_100031FEC(v25, v24);
        *((_QWORD *)a1 + 4) = v25;
        *((_QWORD *)a1 + 5) = v24;
        swift_storeEnumTagMultiPayload(a1, a3, 8);
        break;
      case 9u:
        *a1 = *a2;
        *(_WORD *)(a1 + 1) = *(_WORD *)(a2 + 1);
        v27 = *((_QWORD *)a2 + 1);
        v26 = *((_QWORD *)a2 + 2);
        sub_100031FEC(v27, v26);
        *((_QWORD *)a1 + 1) = v27;
        *((_QWORD *)a1 + 2) = v26;
        swift_storeEnumTagMultiPayload(a1, a3, 9);
        break;
      case 0xAu:
        *a1 = *a2;
        v28 = *((_QWORD *)a2 + 1);
        *((_QWORD *)a1 + 1) = v28;
        swift_bridgeObjectRetain(v28);
        swift_storeEnumTagMultiPayload(a1, a3, 10);
        break;
      case 0xCu:
        *(_DWORD *)a1 = *(_DWORD *)a2;
        *((_WORD *)a1 + 2) = *((_WORD *)a2 + 2);
        v30 = *((_QWORD *)a2 + 1);
        v29 = *((_QWORD *)a2 + 2);
        sub_100031FEC(v30, v29);
        *((_QWORD *)a1 + 1) = v30;
        *((_QWORD *)a1 + 2) = v29;
        swift_storeEnumTagMultiPayload(a1, a3, 12);
        break;
      case 0xEu:
        *a1 = *a2;
        *((_WORD *)a1 + 1) = *((_WORD *)a2 + 1);
        *((_DWORD *)a1 + 1) = *((_DWORD *)a2 + 1);
        a1[8] = a2[8];
        *(_WORD *)(a1 + 9) = *(_WORD *)(a2 + 9);
        v31 = a2[16];
        if (v31 == 4)
        {
          *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
          *((_QWORD *)a1 + 4) = *((_QWORD *)a2 + 4);
        }
        else
        {
          a1[16] = v31;
          v81 = *((_QWORD *)a2 + 3);
          v80 = *((_QWORD *)a2 + 4);
          sub_100031FEC(v81, v80);
          *((_QWORD *)a1 + 3) = v81;
          *((_QWORD *)a1 + 4) = v80;
        }
        swift_storeEnumTagMultiPayload(a1, a3, 14);
        break;
      case 0x10u:
        *a1 = *a2;
        *(_WORD *)(a1 + 1) = *(_WORD *)(a2 + 1);
        *(_DWORD *)(a1 + 3) = *(_DWORD *)(a2 + 3);
        *(_WORD *)(a1 + 7) = *(_WORD *)(a2 + 7);
        *(_DWORD *)(a1 + 9) = *(_DWORD *)(a2 + 9);
        *((_DWORD *)a1 + 4) = *((_DWORD *)a2 + 4);
        *(_DWORD *)(a1 + 13) = *(_DWORD *)(a2 + 13);
        v32 = a2[24];
        if (v32 == 4)
        {
          *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
          *((_QWORD *)a1 + 5) = *((_QWORD *)a2 + 5);
        }
        else
        {
          a1[24] = v32;
          v83 = *((_QWORD *)a2 + 4);
          v82 = *((_QWORD *)a2 + 5);
          sub_100031FEC(v83, v82);
          *((_QWORD *)a1 + 4) = v83;
          *((_QWORD *)a1 + 5) = v82;
        }
        swift_storeEnumTagMultiPayload(a1, a3, 16);
        break;
      case 0x11u:
        *a1 = *a2;
        *((_WORD *)a1 + 1) = *((_WORD *)a2 + 1);
        v33 = *((_QWORD *)a2 + 1);
        *((_QWORD *)a1 + 1) = v33;
        swift_bridgeObjectRetain(v33);
        swift_storeEnumTagMultiPayload(a1, a3, 17);
        break;
      case 0x12u:
        *(_DWORD *)a1 = *(_DWORD *)a2;
        *((_WORD *)a1 + 2) = *((_WORD *)a2 + 2);
        a1[6] = a2[6];
        v34 = *((_QWORD *)a2 + 1);
        *((_QWORD *)a1 + 1) = v34;
        swift_bridgeObjectRetain(v34);
        swift_storeEnumTagMultiPayload(a1, a3, 18);
        break;
      case 0x13u:
        *(_DWORD *)a1 = *(_DWORD *)a2;
        *((_WORD *)a1 + 2) = *((_WORD *)a2 + 2);
        *((_QWORD *)a1 + 1) = *((_QWORD *)a2 + 1);
        a1[16] = a2[16];
        v35 = *((_QWORD *)a2 + 3);
        *((_QWORD *)a1 + 3) = v35;
        swift_bridgeObjectRetain(v35);
        swift_storeEnumTagMultiPayload(a1, a3, 19);
        break;
      case 0x17u:
        v36 = *((_DWORD *)a2 + 1);
        *(_DWORD *)a1 = *(_DWORD *)a2;
        *((_DWORD *)a1 + 1) = v36;
        a1[8] = a2[8];
        v37 = *((_QWORD *)a2 + 2);
        *((_QWORD *)a1 + 2) = v37;
        swift_bridgeObjectRetain(v37);
        swift_storeEnumTagMultiPayload(a1, a3, 23);
        break;
      case 0x18u:
        v38 = *(_QWORD *)a2;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        swift_bridgeObjectRetain(v38);
        swift_storeEnumTagMultiPayload(a1, a3, 24);
        break;
      case 0x19u:
        *(_WORD *)a1 = *(_WORD *)a2;
        v40 = *((_QWORD *)a2 + 1);
        v39 = *((_QWORD *)a2 + 2);
        sub_100031FEC(v40, v39);
        *((_QWORD *)a1 + 1) = v40;
        *((_QWORD *)a1 + 2) = v39;
        swift_storeEnumTagMultiPayload(a1, a3, 25);
        break;
      case 0x1Du:
        v41 = *((_DWORD *)a2 + 1);
        *(_DWORD *)a1 = *(_DWORD *)a2;
        *((_DWORD *)a1 + 1) = v41;
        a1[8] = a2[8];
        *(_DWORD *)(a1 + 10) = *(_DWORD *)(a2 + 10);
        v43 = *((_QWORD *)a2 + 2);
        v42 = *((_QWORD *)a2 + 3);
        sub_100031FEC(v43, v42);
        *((_QWORD *)a1 + 2) = v43;
        *((_QWORD *)a1 + 3) = v42;
        swift_storeEnumTagMultiPayload(a1, a3, 29);
        break;
      case 0x1Eu:
        *a1 = *a2;
        v44 = *((_QWORD *)a2 + 1);
        *((_QWORD *)a1 + 1) = v44;
        swift_bridgeObjectRetain(v44);
        swift_storeEnumTagMultiPayload(a1, a3, 30);
        break;
      case 0x1Fu:
        v45 = *(_QWORD *)a2;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        swift_bridgeObjectRetain(v45);
        swift_storeEnumTagMultiPayload(a1, a3, 31);
        break;
      case 0x20u:
        *a1 = *a2;
        v47 = *((_QWORD *)a2 + 1);
        v46 = *((_QWORD *)a2 + 2);
        sub_100031FEC(v47, v46);
        *((_QWORD *)a1 + 1) = v47;
        *((_QWORD *)a1 + 2) = v46;
        swift_storeEnumTagMultiPayload(a1, a3, 32);
        break;
      case 0x21u:
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *((_WORD *)a1 + 8) = *((_WORD *)a2 + 8);
        a1[18] = a2[18];
        v48 = *((_QWORD *)a2 + 3);
        *((_QWORD *)a1 + 3) = v48;
        swift_bridgeObjectRetain(v48);
        swift_storeEnumTagMultiPayload(a1, a3, 33);
        break;
      case 0x22u:
        v49 = *(_QWORD *)a2;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        swift_bridgeObjectRetain(v49);
        swift_storeEnumTagMultiPayload(a1, a3, 34);
        break;
      case 0x23u:
        v50 = *(_QWORD *)a2;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        swift_bridgeObjectRetain(v50);
        swift_storeEnumTagMultiPayload(a1, a3, 35);
        break;
      case 0x24u:
        *a1 = *a2;
        *(_WORD *)(a1 + 1) = *(_WORD *)(a2 + 1);
        *(_DWORD *)(a1 + 3) = *(_DWORD *)(a2 + 3);
        *(_WORD *)(a1 + 7) = *(_WORD *)(a2 + 7);
        *(_DWORD *)(a1 + 9) = *(_DWORD *)(a2 + 9);
        *((_DWORD *)a1 + 4) = *((_DWORD *)a2 + 4);
        v51 = (uint64_t *)(a2 + 24);
        *(_DWORD *)(a1 + 13) = *(_DWORD *)(a2 + 13);
        v52 = *((_QWORD *)a2 + 4);
        if (v52 >> 60 == 15)
        {
          *(_OWORD *)(a1 + 24) = *(_OWORD *)v51;
        }
        else
        {
          v84 = *v51;
          sub_100031FEC(*v51, *((_QWORD *)a2 + 4));
          *((_QWORD *)a1 + 3) = v84;
          *((_QWORD *)a1 + 4) = v52;
        }
        v85 = a2[40];
        if (v85 == 4)
        {
          *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
          *((_QWORD *)a1 + 7) = *((_QWORD *)a2 + 7);
        }
        else
        {
          a1[40] = v85;
          v90 = *((_QWORD *)a2 + 6);
          v89 = *((_QWORD *)a2 + 7);
          sub_100031FEC(v90, v89);
          *((_QWORD *)a1 + 6) = v90;
          *((_QWORD *)a1 + 7) = v89;
        }
        swift_storeEnumTagMultiPayload(a1, a3, 36);
        break;
      case 0x25u:
        v53 = *(_QWORD *)a2;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        swift_bridgeObjectRetain(v53);
        swift_storeEnumTagMultiPayload(a1, a3, 37);
        break;
      case 0x26u:
        v54 = *(_QWORD *)a2;
        v55 = *((_QWORD *)a2 + 1);
        sub_100031FEC(*(_QWORD *)a2, v55);
        *(_QWORD *)a1 = v54;
        *((_QWORD *)a1 + 1) = v55;
        v57 = *((_QWORD *)a2 + 2);
        v56 = *((_QWORD *)a2 + 3);
        sub_100031FEC(v57, v56);
        *((_QWORD *)a1 + 2) = v57;
        *((_QWORD *)a1 + 3) = v56;
        swift_storeEnumTagMultiPayload(a1, a3, 38);
        break;
      case 0x27u:
        *a1 = *a2;
        *(_WORD *)(a1 + 1) = *(_WORD *)(a2 + 1);
        v58 = a1 + 8;
        v59 = a2 + 8;
        v60 = *((_QWORD *)a2 + 4);
        if (v60 >> 60 == 15)
        {
          v61 = *(_OWORD *)(a2 + 24);
          *v58 = *v59;
          *(_OWORD *)(a1 + 24) = v61;
        }
        else
        {
          *(_QWORD *)v58 = *(_QWORD *)v59;
          a1[16] = a2[16];
          v86 = *((_QWORD *)a2 + 3);
          sub_100031FEC(v86, v60);
          *((_QWORD *)a1 + 3) = v86;
          *((_QWORD *)a1 + 4) = v60;
        }
        *((_WORD *)a1 + 20) = *((_WORD *)a2 + 20);
        swift_storeEnumTagMultiPayload(a1, a3, 39);
        break;
      case 0x28u:
        *(_WORD *)a1 = *(_WORD *)a2;
        *((_DWORD *)a1 + 1) = *((_DWORD *)a2 + 1);
        v62 = *(int *)(type metadata accessor for NANAttribute.CustomDeviceInformation(0) + 28);
        v63 = &a1[v62];
        v64 = &a2[v62];
        *v63 = a2[v62];
        *(_WORD *)(v63 + 1) = *(_WORD *)&a2[v62 + 1];
        v65 = (int *)type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
        v66 = v65[6];
        v67 = &v63[v66];
        v68 = &v64[v66];
        v69 = type metadata accessor for P256.KeyAgreement.PublicKey(0);
        v70 = *(_QWORD *)(v69 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v70 + 48))(v68, 1, v69))
        {
          v71 = sub_100012C44((uint64_t *)&unk_10040D200);
          memcpy(v67, v68, *(_QWORD *)(*(_QWORD *)(v71 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v70 + 16))(v67, v68, v69);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v70 + 56))(v67, 0, 1, v69);
        }
        v91 = v65[7];
        v92 = &v63[v91];
        v93 = (uint64_t *)&v64[v91];
        v94 = v93[1];
        if (v94 >> 60 == 15)
        {
          *(_OWORD *)v92 = *(_OWORD *)v93;
        }
        else
        {
          v95 = *v93;
          sub_100031FEC(*v93, v93[1]);
          *(_QWORD *)v92 = v95;
          *((_QWORD *)v92 + 1) = v94;
        }
        v96 = v65[8];
        v97 = &v63[v96];
        v98 = (uint64_t *)&v64[v96];
        v99 = v98[1];
        if (v99 >> 60 == 15)
        {
          *(_OWORD *)v97 = *(_OWORD *)v98;
        }
        else
        {
          v100 = *v98;
          sub_100031FEC(*v98, v98[1]);
          *(_QWORD *)v97 = v100;
          *((_QWORD *)v97 + 1) = v99;
        }
        v101 = v65[9];
        v102 = &v63[v101];
        v103 = (uint64_t *)&v64[v101];
        v104 = v103[1];
        if (v104 >> 60 == 15)
        {
          *(_OWORD *)v102 = *(_OWORD *)v103;
        }
        else
        {
          v105 = *v103;
          sub_100031FEC(*v103, v103[1]);
          *(_QWORD *)v102 = v105;
          *((_QWORD *)v102 + 1) = v104;
        }
        v106 = v65[10];
        v107 = &v63[v106];
        v108 = &v64[v106];
        v109 = type metadata accessor for UUID(0);
        v110 = *(_QWORD *)(v109 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v110 + 48))(v108, 1, v109))
        {
          v111 = sub_100012C44(&qword_10040E1F0);
          memcpy(v107, v108, *(_QWORD *)(*(_QWORD *)(v111 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v110 + 16))(v107, v108, v109);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v110 + 56))(v107, 0, 1, v109);
        }
        v112 = v65[11];
        v113 = *(_QWORD *)&v64[v112];
        *(_QWORD *)&v63[v112] = v113;
        v125 = v65;
        v114 = v65[12];
        v115 = &v63[v114];
        v116 = &v64[v114];
        v117 = type metadata accessor for NANInternetSharingStatistics.Requester(0);
        v118 = *(_QWORD *)(v117 - 8);
        v119 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v118 + 48);
        swift_bridgeObjectRetain(v113);
        if (v119(v116, 1, v117))
        {
          v120 = sub_100012C44((uint64_t *)&unk_10040DAB0);
          memcpy(v115, v116, *(_QWORD *)(*(_QWORD *)(v120 - 8) + 64));
        }
        else
        {
          v121 = type metadata accessor for DispatchTimeInterval(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v121 - 8) + 16))(v115, v116, v121);
          v115[*(int *)(v117 + 20)] = v116[*(int *)(v117 + 20)];
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v118 + 56))(v115, 0, 1, v117);
        }
        v122 = v125[13];
        v123 = &v63[v122];
        v124 = &v64[v122];
        *(_OWORD *)v123 = *(_OWORD *)v124;
        *(_OWORD *)(v123 + 9) = *(_OWORD *)(v124 + 9);
        swift_storeEnumTagMultiPayload(a1, a3, 40);
        break;
      case 0x29u:
        *(_WORD *)a1 = *(_WORD *)a2;
        a1[2] = a2[2];
        v73 = *((_QWORD *)a2 + 1);
        v72 = *((_QWORD *)a2 + 2);
        sub_100031FEC(v73, v72);
        *((_QWORD *)a1 + 1) = v73;
        *((_QWORD *)a1 + 2) = v72;
        swift_storeEnumTagMultiPayload(a1, a3, 41);
        break;
      case 0x2Au:
        *a1 = *a2;
        v75 = *((_QWORD *)a2 + 1);
        v74 = *((_QWORD *)a2 + 2);
        sub_100031FEC(v75, v74);
        *((_QWORD *)a1 + 1) = v75;
        *((_QWORD *)a1 + 2) = v74;
        swift_storeEnumTagMultiPayload(a1, a3, 42);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(v5 + 64));
        break;
    }
  }
  return a1;
}

void destroy for NANAttribute(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  switch(swift_getEnumCaseMultiPayload(a1, a2))
  {
    case 2u:
    case 0x18u:
    case 0x1Fu:
    case 0x22u:
    case 0x23u:
    case 0x25u:
      v3 = *(_QWORD *)a1;
      goto LABEL_16;
    case 3u:
      sub_10000E614(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
      swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
      if (*(unsigned __int8 *)(a1 + 50) != 255)
      {
        v6 = *(unsigned __int16 *)(a1 + 48) | (*(unsigned __int8 *)(a1 + 50) << 16);
        sub_100111BB0(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), v6, BYTE2(v6) & 1);
      }
      if (*(_BYTE *)(a1 + 56) == 4)
        return;
      v4 = *(_QWORD *)(a1 + 64);
      v5 = *(_QWORD *)(a1 + 72);
      break;
    case 5u:
    case 7u:
      goto LABEL_12;
    case 6u:
    case 0x1Du:
      goto LABEL_22;
    case 8u:
      sub_10000E614(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
      goto LABEL_14;
    case 9u:
    case 0xCu:
    case 0x19u:
    case 0x20u:
    case 0x29u:
    case 0x2Au:
      v4 = *(_QWORD *)(a1 + 8);
      v5 = *(_QWORD *)(a1 + 16);
      break;
    case 0xAu:
    case 0x11u:
    case 0x12u:
    case 0x1Eu:
      v3 = *(_QWORD *)(a1 + 8);
      goto LABEL_16;
    case 0xEu:
      if (*(_BYTE *)(a1 + 16) == 4)
        return;
LABEL_12:
      v4 = *(_QWORD *)(a1 + 24);
      v5 = *(_QWORD *)(a1 + 32);
      break;
    case 0x10u:
      if (*(_BYTE *)(a1 + 24) == 4)
        return;
LABEL_14:
      v4 = *(_QWORD *)(a1 + 32);
      v5 = *(_QWORD *)(a1 + 40);
      break;
    case 0x13u:
    case 0x21u:
      v3 = *(_QWORD *)(a1 + 24);
      goto LABEL_16;
    case 0x17u:
      v3 = *(_QWORD *)(a1 + 16);
LABEL_16:
      swift_bridgeObjectRelease(v3);
      return;
    case 0x24u:
      v7 = *(_QWORD *)(a1 + 32);
      if (v7 >> 60 != 15)
        sub_10000E614(*(_QWORD *)(a1 + 24), v7);
      if (*(_BYTE *)(a1 + 40) == 4)
        return;
      v4 = *(_QWORD *)(a1 + 48);
      v5 = *(_QWORD *)(a1 + 56);
      break;
    case 0x26u:
      sub_10000E614(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
LABEL_22:
      v4 = *(_QWORD *)(a1 + 16);
      v5 = *(_QWORD *)(a1 + 24);
      break;
    case 0x27u:
      v5 = *(_QWORD *)(a1 + 32);
      if (v5 >> 60 == 15)
        return;
      v4 = *(_QWORD *)(a1 + 24);
      break;
    case 0x28u:
      v8 = a1 + *(int *)(type metadata accessor for NANAttribute.CustomDeviceInformation(0) + 28);
      v9 = (int *)type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
      v10 = v8 + v9[6];
      v11 = type metadata accessor for P256.KeyAgreement.PublicKey(0);
      v12 = *(_QWORD *)(v11 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
        (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v10, v11);
      v13 = (uint64_t *)(v8 + v9[7]);
      v14 = v13[1];
      if (v14 >> 60 != 15)
        sub_10000E614(*v13, v14);
      v15 = (uint64_t *)(v8 + v9[8]);
      v16 = v15[1];
      if (v16 >> 60 != 15)
        sub_10000E614(*v15, v16);
      v17 = (uint64_t *)(v8 + v9[9]);
      v18 = v17[1];
      if (v18 >> 60 != 15)
        sub_10000E614(*v17, v18);
      v19 = v8 + v9[10];
      v20 = type metadata accessor for UUID(0);
      v21 = *(_QWORD *)(v20 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
        (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v19, v20);
      swift_bridgeObjectRelease(*(_QWORD *)(v8 + v9[11]));
      v22 = v8 + v9[12];
      v23 = type metadata accessor for NANInternetSharingStatistics.Requester(0);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 48))(v22, 1, v23))
      {
        v24 = type metadata accessor for DispatchTimeInterval(0);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 8))(v22, v24);
      }
      return;
    default:
      return;
  }
  sub_10000E614(v4, v5);
}

char *initializeWithCopy for NANAttribute(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned __int8 v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  int v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  _OWORD *v57;
  _OWORD *v58;
  unint64_t v59;
  __int128 v60;
  uint64_t v61;
  char *v62;
  char *v63;
  int *v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t *v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t *v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t *v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  unsigned int (*v118)(char *, uint64_t, uint64_t);
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  char *v123;
  int *v125;

  switch(swift_getEnumCaseMultiPayload(a2, a3))
  {
    case 2u:
      v6 = *(_QWORD *)a2;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      swift_bridgeObjectRetain(v6);
      v7 = a1;
      v8 = a3;
      v9 = 2;
      goto LABEL_73;
    case 3u:
      v10 = *(_QWORD *)a2;
      v11 = *((_QWORD *)a2 + 1);
      sub_100031FEC(*(_QWORD *)a2, v11);
      *(_QWORD *)a1 = v10;
      *((_QWORD *)a1 + 1) = v11;
      a1[16] = a2[16];
      *(_WORD *)(a1 + 17) = *(_WORD *)(a2 + 17);
      *((_WORD *)a1 + 10) = *((_WORD *)a2 + 10);
      a1[22] = a2[22];
      v12 = *((_QWORD *)a2 + 3);
      *((_QWORD *)a1 + 3) = v12;
      v13 = a2[50];
      v14 = *((unsigned __int16 *)a2 + 24);
      swift_bridgeObjectRetain(v12);
      if (v13 == 255)
      {
        *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
        *(_DWORD *)(a1 + 47) = *(_DWORD *)(a2 + 47);
      }
      else
      {
        v75 = v14 & 0xFF00FFFF | (v13 << 16);
        v76 = *((_QWORD *)a2 + 4);
        v77 = *((_QWORD *)a2 + 5);
        sub_1001D7C70(v76, v77, v75, BYTE2(v75) & 1);
        *((_QWORD *)a1 + 4) = v76;
        *((_QWORD *)a1 + 5) = v77;
        *((_WORD *)a1 + 24) = v75;
        a1[50] = BYTE2(v75) & 1;
      }
      v78 = a2[56];
      if (v78 == 4)
      {
        *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
        *((_QWORD *)a1 + 9) = *((_QWORD *)a2 + 9);
      }
      else
      {
        a1[56] = v78;
        v87 = *((_QWORD *)a2 + 8);
        v86 = *((_QWORD *)a2 + 9);
        sub_100031FEC(v87, v86);
        *((_QWORD *)a1 + 8) = v87;
        *((_QWORD *)a1 + 9) = v86;
      }
      v7 = a1;
      v8 = a3;
      v9 = 3;
      goto LABEL_73;
    case 5u:
      *(_DWORD *)a1 = *(_DWORD *)a2;
      *((_WORD *)a1 + 2) = *((_WORD *)a2 + 2);
      *(_DWORD *)(a1 + 6) = *(_DWORD *)(a2 + 6);
      *((_WORD *)a1 + 5) = *((_WORD *)a2 + 5);
      a1[16] = a2[16];
      *(_WORD *)(a1 + 17) = *(_WORD *)(a2 + 17);
      v15 = *((_QWORD *)a2 + 3);
      v16 = *((_QWORD *)a2 + 4);
      sub_100031FEC(v15, v16);
      *((_QWORD *)a1 + 3) = v15;
      *((_QWORD *)a1 + 4) = v16;
      a1[40] = a2[40];
      v7 = a1;
      v8 = a3;
      v9 = 5;
      goto LABEL_73;
    case 6u:
      *a1 = *a2;
      *(_DWORD *)(a1 + 1) = *(_DWORD *)(a2 + 1);
      *(_WORD *)(a1 + 5) = *(_WORD *)(a2 + 5);
      a1[8] = a2[8];
      *(_WORD *)(a1 + 9) = *(_WORD *)(a2 + 9);
      v18 = *((_QWORD *)a2 + 2);
      v17 = *((_QWORD *)a2 + 3);
      sub_100031FEC(v18, v17);
      *((_QWORD *)a1 + 2) = v18;
      *((_QWORD *)a1 + 3) = v17;
      v7 = a1;
      v8 = a3;
      v9 = 6;
      goto LABEL_73;
    case 7u:
      *(_DWORD *)a1 = *(_DWORD *)a2;
      *((_WORD *)a1 + 2) = *((_WORD *)a2 + 2);
      *(_DWORD *)(a1 + 6) = *(_DWORD *)(a2 + 6);
      *((_WORD *)a1 + 5) = *((_WORD *)a2 + 5);
      a1[16] = a2[16];
      *(_WORD *)(a1 + 17) = *(_WORD *)(a2 + 17);
      v20 = *((_QWORD *)a2 + 3);
      v19 = *((_QWORD *)a2 + 4);
      sub_100031FEC(v20, v19);
      *((_QWORD *)a1 + 3) = v20;
      *((_QWORD *)a1 + 4) = v19;
      v7 = a1;
      v8 = a3;
      v9 = 7;
      goto LABEL_73;
    case 8u:
      *(_DWORD *)a1 = *(_DWORD *)a2;
      *((_WORD *)a1 + 2) = *((_WORD *)a2 + 2);
      a1[8] = a2[8];
      *(_WORD *)(a1 + 9) = *(_WORD *)(a2 + 9);
      v21 = *((_QWORD *)a2 + 2);
      v22 = *((_QWORD *)a2 + 3);
      sub_100031FEC(v21, v22);
      *((_QWORD *)a1 + 2) = v21;
      *((_QWORD *)a1 + 3) = v22;
      v24 = *((_QWORD *)a2 + 4);
      v23 = *((_QWORD *)a2 + 5);
      sub_100031FEC(v24, v23);
      *((_QWORD *)a1 + 4) = v24;
      *((_QWORD *)a1 + 5) = v23;
      v7 = a1;
      v8 = a3;
      v9 = 8;
      goto LABEL_73;
    case 9u:
      *a1 = *a2;
      *(_WORD *)(a1 + 1) = *(_WORD *)(a2 + 1);
      v26 = *((_QWORD *)a2 + 1);
      v25 = *((_QWORD *)a2 + 2);
      sub_100031FEC(v26, v25);
      *((_QWORD *)a1 + 1) = v26;
      *((_QWORD *)a1 + 2) = v25;
      v7 = a1;
      v8 = a3;
      v9 = 9;
      goto LABEL_73;
    case 0xAu:
      *a1 = *a2;
      v27 = *((_QWORD *)a2 + 1);
      *((_QWORD *)a1 + 1) = v27;
      swift_bridgeObjectRetain(v27);
      v7 = a1;
      v8 = a3;
      v9 = 10;
      goto LABEL_73;
    case 0xCu:
      *(_DWORD *)a1 = *(_DWORD *)a2;
      *((_WORD *)a1 + 2) = *((_WORD *)a2 + 2);
      v29 = *((_QWORD *)a2 + 1);
      v28 = *((_QWORD *)a2 + 2);
      sub_100031FEC(v29, v28);
      *((_QWORD *)a1 + 1) = v29;
      *((_QWORD *)a1 + 2) = v28;
      v7 = a1;
      v8 = a3;
      v9 = 12;
      goto LABEL_73;
    case 0xEu:
      *a1 = *a2;
      *((_WORD *)a1 + 1) = *((_WORD *)a2 + 1);
      *((_DWORD *)a1 + 1) = *((_DWORD *)a2 + 1);
      a1[8] = a2[8];
      *(_WORD *)(a1 + 9) = *(_WORD *)(a2 + 9);
      v30 = a2[16];
      if (v30 == 4)
      {
        *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
        *((_QWORD *)a1 + 4) = *((_QWORD *)a2 + 4);
      }
      else
      {
        a1[16] = v30;
        v80 = *((_QWORD *)a2 + 3);
        v79 = *((_QWORD *)a2 + 4);
        sub_100031FEC(v80, v79);
        *((_QWORD *)a1 + 3) = v80;
        *((_QWORD *)a1 + 4) = v79;
      }
      v7 = a1;
      v8 = a3;
      v9 = 14;
      goto LABEL_73;
    case 0x10u:
      *a1 = *a2;
      *(_WORD *)(a1 + 1) = *(_WORD *)(a2 + 1);
      *(_DWORD *)(a1 + 3) = *(_DWORD *)(a2 + 3);
      *(_WORD *)(a1 + 7) = *(_WORD *)(a2 + 7);
      *(_DWORD *)(a1 + 9) = *(_DWORD *)(a2 + 9);
      *((_DWORD *)a1 + 4) = *((_DWORD *)a2 + 4);
      *(_DWORD *)(a1 + 13) = *(_DWORD *)(a2 + 13);
      v31 = a2[24];
      if (v31 == 4)
      {
        *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
        *((_QWORD *)a1 + 5) = *((_QWORD *)a2 + 5);
      }
      else
      {
        a1[24] = v31;
        v82 = *((_QWORD *)a2 + 4);
        v81 = *((_QWORD *)a2 + 5);
        sub_100031FEC(v82, v81);
        *((_QWORD *)a1 + 4) = v82;
        *((_QWORD *)a1 + 5) = v81;
      }
      v7 = a1;
      v8 = a3;
      v9 = 16;
      goto LABEL_73;
    case 0x11u:
      *a1 = *a2;
      *((_WORD *)a1 + 1) = *((_WORD *)a2 + 1);
      v32 = *((_QWORD *)a2 + 1);
      *((_QWORD *)a1 + 1) = v32;
      swift_bridgeObjectRetain(v32);
      v7 = a1;
      v8 = a3;
      v9 = 17;
      goto LABEL_73;
    case 0x12u:
      *(_DWORD *)a1 = *(_DWORD *)a2;
      *((_WORD *)a1 + 2) = *((_WORD *)a2 + 2);
      a1[6] = a2[6];
      v33 = *((_QWORD *)a2 + 1);
      *((_QWORD *)a1 + 1) = v33;
      swift_bridgeObjectRetain(v33);
      v7 = a1;
      v8 = a3;
      v9 = 18;
      goto LABEL_73;
    case 0x13u:
      *(_DWORD *)a1 = *(_DWORD *)a2;
      *((_WORD *)a1 + 2) = *((_WORD *)a2 + 2);
      *((_QWORD *)a1 + 1) = *((_QWORD *)a2 + 1);
      a1[16] = a2[16];
      v34 = *((_QWORD *)a2 + 3);
      *((_QWORD *)a1 + 3) = v34;
      swift_bridgeObjectRetain(v34);
      v7 = a1;
      v8 = a3;
      v9 = 19;
      goto LABEL_73;
    case 0x17u:
      v35 = *((_DWORD *)a2 + 1);
      *(_DWORD *)a1 = *(_DWORD *)a2;
      *((_DWORD *)a1 + 1) = v35;
      a1[8] = a2[8];
      v36 = *((_QWORD *)a2 + 2);
      *((_QWORD *)a1 + 2) = v36;
      swift_bridgeObjectRetain(v36);
      v7 = a1;
      v8 = a3;
      v9 = 23;
      goto LABEL_73;
    case 0x18u:
      v37 = *(_QWORD *)a2;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      swift_bridgeObjectRetain(v37);
      v7 = a1;
      v8 = a3;
      v9 = 24;
      goto LABEL_73;
    case 0x19u:
      *(_WORD *)a1 = *(_WORD *)a2;
      v39 = *((_QWORD *)a2 + 1);
      v38 = *((_QWORD *)a2 + 2);
      sub_100031FEC(v39, v38);
      *((_QWORD *)a1 + 1) = v39;
      *((_QWORD *)a1 + 2) = v38;
      v7 = a1;
      v8 = a3;
      v9 = 25;
      goto LABEL_73;
    case 0x1Du:
      v40 = *((_DWORD *)a2 + 1);
      *(_DWORD *)a1 = *(_DWORD *)a2;
      *((_DWORD *)a1 + 1) = v40;
      a1[8] = a2[8];
      *(_DWORD *)(a1 + 10) = *(_DWORD *)(a2 + 10);
      v42 = *((_QWORD *)a2 + 2);
      v41 = *((_QWORD *)a2 + 3);
      sub_100031FEC(v42, v41);
      *((_QWORD *)a1 + 2) = v42;
      *((_QWORD *)a1 + 3) = v41;
      v7 = a1;
      v8 = a3;
      v9 = 29;
      goto LABEL_73;
    case 0x1Eu:
      *a1 = *a2;
      v43 = *((_QWORD *)a2 + 1);
      *((_QWORD *)a1 + 1) = v43;
      swift_bridgeObjectRetain(v43);
      v7 = a1;
      v8 = a3;
      v9 = 30;
      goto LABEL_73;
    case 0x1Fu:
      v44 = *(_QWORD *)a2;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      swift_bridgeObjectRetain(v44);
      v7 = a1;
      v8 = a3;
      v9 = 31;
      goto LABEL_73;
    case 0x20u:
      *a1 = *a2;
      v46 = *((_QWORD *)a2 + 1);
      v45 = *((_QWORD *)a2 + 2);
      sub_100031FEC(v46, v45);
      *((_QWORD *)a1 + 1) = v46;
      *((_QWORD *)a1 + 2) = v45;
      v7 = a1;
      v8 = a3;
      v9 = 32;
      goto LABEL_73;
    case 0x21u:
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_WORD *)a1 + 8) = *((_WORD *)a2 + 8);
      a1[18] = a2[18];
      v47 = *((_QWORD *)a2 + 3);
      *((_QWORD *)a1 + 3) = v47;
      swift_bridgeObjectRetain(v47);
      v7 = a1;
      v8 = a3;
      v9 = 33;
      goto LABEL_73;
    case 0x22u:
      v48 = *(_QWORD *)a2;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      swift_bridgeObjectRetain(v48);
      v7 = a1;
      v8 = a3;
      v9 = 34;
      goto LABEL_73;
    case 0x23u:
      v49 = *(_QWORD *)a2;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      swift_bridgeObjectRetain(v49);
      v7 = a1;
      v8 = a3;
      v9 = 35;
      goto LABEL_73;
    case 0x24u:
      *a1 = *a2;
      *(_WORD *)(a1 + 1) = *(_WORD *)(a2 + 1);
      *(_DWORD *)(a1 + 3) = *(_DWORD *)(a2 + 3);
      *(_WORD *)(a1 + 7) = *(_WORD *)(a2 + 7);
      *(_DWORD *)(a1 + 9) = *(_DWORD *)(a2 + 9);
      *((_DWORD *)a1 + 4) = *((_DWORD *)a2 + 4);
      v50 = (uint64_t *)(a2 + 24);
      *(_DWORD *)(a1 + 13) = *(_DWORD *)(a2 + 13);
      v51 = *((_QWORD *)a2 + 4);
      if (v51 >> 60 == 15)
      {
        *(_OWORD *)(a1 + 24) = *(_OWORD *)v50;
      }
      else
      {
        v83 = *v50;
        sub_100031FEC(*v50, *((_QWORD *)a2 + 4));
        *((_QWORD *)a1 + 3) = v83;
        *((_QWORD *)a1 + 4) = v51;
      }
      v84 = a2[40];
      if (v84 == 4)
      {
        *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
        *((_QWORD *)a1 + 7) = *((_QWORD *)a2 + 7);
      }
      else
      {
        a1[40] = v84;
        v89 = *((_QWORD *)a2 + 6);
        v88 = *((_QWORD *)a2 + 7);
        sub_100031FEC(v89, v88);
        *((_QWORD *)a1 + 6) = v89;
        *((_QWORD *)a1 + 7) = v88;
      }
      v7 = a1;
      v8 = a3;
      v9 = 36;
      goto LABEL_73;
    case 0x25u:
      v52 = *(_QWORD *)a2;
      *(_QWORD *)a1 = *(_QWORD *)a2;
      swift_bridgeObjectRetain(v52);
      v7 = a1;
      v8 = a3;
      v9 = 37;
      goto LABEL_73;
    case 0x26u:
      v53 = *(_QWORD *)a2;
      v54 = *((_QWORD *)a2 + 1);
      sub_100031FEC(*(_QWORD *)a2, v54);
      *(_QWORD *)a1 = v53;
      *((_QWORD *)a1 + 1) = v54;
      v56 = *((_QWORD *)a2 + 2);
      v55 = *((_QWORD *)a2 + 3);
      sub_100031FEC(v56, v55);
      *((_QWORD *)a1 + 2) = v56;
      *((_QWORD *)a1 + 3) = v55;
      v7 = a1;
      v8 = a3;
      v9 = 38;
      goto LABEL_73;
    case 0x27u:
      *a1 = *a2;
      *(_WORD *)(a1 + 1) = *(_WORD *)(a2 + 1);
      v57 = a1 + 8;
      v58 = a2 + 8;
      v59 = *((_QWORD *)a2 + 4);
      if (v59 >> 60 == 15)
      {
        v60 = *(_OWORD *)(a2 + 24);
        *v57 = *v58;
        *(_OWORD *)(a1 + 24) = v60;
      }
      else
      {
        *(_QWORD *)v57 = *(_QWORD *)v58;
        a1[16] = a2[16];
        v85 = *((_QWORD *)a2 + 3);
        sub_100031FEC(v85, v59);
        *((_QWORD *)a1 + 3) = v85;
        *((_QWORD *)a1 + 4) = v59;
      }
      *((_WORD *)a1 + 20) = *((_WORD *)a2 + 20);
      v7 = a1;
      v8 = a3;
      v9 = 39;
      goto LABEL_73;
    case 0x28u:
      *(_WORD *)a1 = *(_WORD *)a2;
      *((_DWORD *)a1 + 1) = *((_DWORD *)a2 + 1);
      v61 = *(int *)(type metadata accessor for NANAttribute.CustomDeviceInformation(0) + 28);
      v62 = &a1[v61];
      v63 = &a2[v61];
      *v62 = a2[v61];
      *(_WORD *)(v62 + 1) = *(_WORD *)&a2[v61 + 1];
      v64 = (int *)type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
      v65 = v64[6];
      v66 = &v62[v65];
      v67 = &v63[v65];
      v68 = type metadata accessor for P256.KeyAgreement.PublicKey(0);
      v69 = *(_QWORD *)(v68 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v69 + 48))(v67, 1, v68))
      {
        v70 = sub_100012C44((uint64_t *)&unk_10040D200);
        memcpy(v66, v67, *(_QWORD *)(*(_QWORD *)(v70 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v69 + 16))(v66, v67, v68);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v69 + 56))(v66, 0, 1, v68);
      }
      v90 = v64[7];
      v91 = &v62[v90];
      v92 = (uint64_t *)&v63[v90];
      v93 = v92[1];
      if (v93 >> 60 == 15)
      {
        *(_OWORD *)v91 = *(_OWORD *)v92;
      }
      else
      {
        v94 = *v92;
        sub_100031FEC(*v92, v92[1]);
        *(_QWORD *)v91 = v94;
        *((_QWORD *)v91 + 1) = v93;
      }
      v95 = v64[8];
      v96 = &v62[v95];
      v97 = (uint64_t *)&v63[v95];
      v98 = v97[1];
      if (v98 >> 60 == 15)
      {
        *(_OWORD *)v96 = *(_OWORD *)v97;
      }
      else
      {
        v99 = *v97;
        sub_100031FEC(*v97, v97[1]);
        *(_QWORD *)v96 = v99;
        *((_QWORD *)v96 + 1) = v98;
      }
      v100 = v64[9];
      v101 = &v62[v100];
      v102 = (uint64_t *)&v63[v100];
      v103 = v102[1];
      if (v103 >> 60 == 15)
      {
        *(_OWORD *)v101 = *(_OWORD *)v102;
      }
      else
      {
        v104 = *v102;
        sub_100031FEC(*v102, v102[1]);
        *(_QWORD *)v101 = v104;
        *((_QWORD *)v101 + 1) = v103;
      }
      v105 = v64[10];
      v106 = &v62[v105];
      v107 = &v63[v105];
      v108 = type metadata accessor for UUID(0);
      v109 = *(_QWORD *)(v108 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v109 + 48))(v107, 1, v108))
      {
        v110 = sub_100012C44(&qword_10040E1F0);
        memcpy(v106, v107, *(_QWORD *)(*(_QWORD *)(v110 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v109 + 16))(v106, v107, v108);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v109 + 56))(v106, 0, 1, v108);
      }
      v111 = v64[11];
      v112 = *(_QWORD *)&v63[v111];
      *(_QWORD *)&v62[v111] = v112;
      v125 = v64;
      v113 = v64[12];
      v114 = &v62[v113];
      v115 = &v63[v113];
      v116 = type metadata accessor for NANInternetSharingStatistics.Requester(0);
      v117 = *(_QWORD *)(v116 - 8);
      v118 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v117 + 48);
      swift_bridgeObjectRetain(v112);
      if (v118(v115, 1, v116))
      {
        v119 = sub_100012C44((uint64_t *)&unk_10040DAB0);
        memcpy(v114, v115, *(_QWORD *)(*(_QWORD *)(v119 - 8) + 64));
      }
      else
      {
        v120 = type metadata accessor for DispatchTimeInterval(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v120 - 8) + 16))(v114, v115, v120);
        v114[*(int *)(v116 + 20)] = v115[*(int *)(v116 + 20)];
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v117 + 56))(v114, 0, 1, v116);
      }
      v121 = v125[13];
      v122 = &v62[v121];
      v123 = &v63[v121];
      *(_OWORD *)v122 = *(_OWORD *)v123;
      *(_OWORD *)(v122 + 9) = *(_OWORD *)(v123 + 9);
      v7 = a1;
      v8 = a3;
      v9 = 40;
      goto LABEL_73;
    case 0x29u:
      *(_WORD *)a1 = *(_WORD *)a2;
      a1[2] = a2[2];
      v72 = *((_QWORD *)a2 + 1);
      v71 = *((_QWORD *)a2 + 2);
      sub_100031FEC(v72, v71);
      *((_QWORD *)a1 + 1) = v72;
      *((_QWORD *)a1 + 2) = v71;
      v7 = a1;
      v8 = a3;
      v9 = 41;
      goto LABEL_73;
    case 0x2Au:
      *a1 = *a2;
      v74 = *((_QWORD *)a2 + 1);
      v73 = *((_QWORD *)a2 + 2);
      sub_100031FEC(v74, v73);
      *((_QWORD *)a1 + 1) = v74;
      *((_QWORD *)a1 + 2) = v73;
      v7 = a1;
      v8 = a3;
      v9 = 42;
LABEL_73:
      swift_storeEnumTagMultiPayload(v7, v8, v9);
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

char *assignWithCopy for NANAttribute(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  __int16 v12;
  uint64_t v13;
  unsigned __int8 v14;
  int v15;
  __int128 v16;
  int v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  int v21;
  unint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  unint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  unint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  __int128 v41;
  int v42;
  int v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  int v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  int v67;
  uint64_t *v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  _OWORD *v75;
  _OWORD *v76;
  __int128 v77;
  uint64_t v78;
  char *v79;
  char *v80;
  int *v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  __int16 v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  __int128 v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  __int128 v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t *v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t *v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  uint64_t *v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  unsigned int (*v140)(char *, uint64_t, uint64_t);
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  __int128 *v145;
  __int128 v146;
  int *v148;

  if (a1 != a2)
  {
    sub_100063824((uint64_t)a1, type metadata accessor for NANAttribute);
    switch(swift_getEnumCaseMultiPayload(a2, a3))
    {
      case 2u:
        v6 = *(_QWORD *)a2;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        swift_bridgeObjectRetain(v6);
        v7 = a1;
        v8 = a3;
        v9 = 2;
        goto LABEL_74;
      case 3u:
        v10 = *(_QWORD *)a2;
        v11 = *((_QWORD *)a2 + 1);
        sub_100031FEC(*(_QWORD *)a2, v11);
        *(_QWORD *)a1 = v10;
        *((_QWORD *)a1 + 1) = v11;
        a1[16] = a2[16];
        a1[17] = a2[17];
        a1[18] = a2[18];
        v12 = *((_WORD *)a2 + 10);
        a1[22] = a2[22];
        *((_WORD *)a1 + 10) = v12;
        v13 = *((_QWORD *)a2 + 3);
        *((_QWORD *)a1 + 3) = v13;
        v14 = a2[50];
        v15 = *((unsigned __int16 *)a2 + 24);
        swift_bridgeObjectRetain(v13);
        if (v14 == 255)
        {
          v16 = *((_OWORD *)a2 + 2);
          *(_DWORD *)(a1 + 47) = *(_DWORD *)(a2 + 47);
          *((_OWORD *)a1 + 2) = v16;
        }
        else
        {
          v93 = v15 & 0xFF00FFFF | (v14 << 16);
          v94 = *((_QWORD *)a2 + 4);
          v95 = *((_QWORD *)a2 + 5);
          sub_1001D7C70(v94, v95, v93, BYTE2(v93) & 1);
          *((_QWORD *)a1 + 4) = v94;
          *((_QWORD *)a1 + 5) = v95;
          *((_WORD *)a1 + 24) = v93;
          a1[50] = BYTE2(v93) & 1;
        }
        v96 = a2[56];
        if (v96 == 4)
        {
          v97 = *(_OWORD *)(a2 + 56);
          *((_QWORD *)a1 + 9) = *((_QWORD *)a2 + 9);
          *(_OWORD *)(a1 + 56) = v97;
        }
        else
        {
          a1[56] = v96;
          v109 = *((_QWORD *)a2 + 8);
          v108 = *((_QWORD *)a2 + 9);
          sub_100031FEC(v109, v108);
          *((_QWORD *)a1 + 8) = v109;
          *((_QWORD *)a1 + 9) = v108;
        }
        v7 = a1;
        v8 = a3;
        v9 = 3;
        goto LABEL_74;
      case 5u:
        v17 = *(_DWORD *)a2;
        *((_WORD *)a1 + 2) = *((_WORD *)a2 + 2);
        *(_DWORD *)a1 = v17;
        v18 = *(_DWORD *)(a2 + 6);
        *((_WORD *)a1 + 5) = *((_WORD *)a2 + 5);
        *(_DWORD *)(a1 + 6) = v18;
        a1[16] = a2[16];
        a1[17] = a2[17];
        a1[18] = a2[18];
        v19 = *((_QWORD *)a2 + 3);
        v20 = *((_QWORD *)a2 + 4);
        sub_100031FEC(v19, v20);
        *((_QWORD *)a1 + 3) = v19;
        *((_QWORD *)a1 + 4) = v20;
        a1[40] = a2[40];
        v7 = a1;
        v8 = a3;
        v9 = 5;
        goto LABEL_74;
      case 6u:
        *a1 = *a2;
        v21 = *(_DWORD *)(a2 + 1);
        *(_WORD *)(a1 + 5) = *(_WORD *)(a2 + 5);
        *(_DWORD *)(a1 + 1) = v21;
        a1[8] = a2[8];
        a1[9] = a2[9];
        a1[10] = a2[10];
        v23 = *((_QWORD *)a2 + 2);
        v22 = *((_QWORD *)a2 + 3);
        sub_100031FEC(v23, v22);
        *((_QWORD *)a1 + 2) = v23;
        *((_QWORD *)a1 + 3) = v22;
        v7 = a1;
        v8 = a3;
        v9 = 6;
        goto LABEL_74;
      case 7u:
        v24 = *(_DWORD *)a2;
        *((_WORD *)a1 + 2) = *((_WORD *)a2 + 2);
        *(_DWORD *)a1 = v24;
        v25 = *(_DWORD *)(a2 + 6);
        *((_WORD *)a1 + 5) = *((_WORD *)a2 + 5);
        *(_DWORD *)(a1 + 6) = v25;
        a1[16] = a2[16];
        a1[17] = a2[17];
        a1[18] = a2[18];
        v27 = *((_QWORD *)a2 + 3);
        v26 = *((_QWORD *)a2 + 4);
        sub_100031FEC(v27, v26);
        *((_QWORD *)a1 + 3) = v27;
        *((_QWORD *)a1 + 4) = v26;
        v7 = a1;
        v8 = a3;
        v9 = 7;
        goto LABEL_74;
      case 8u:
        v28 = *(_DWORD *)a2;
        *((_WORD *)a1 + 2) = *((_WORD *)a2 + 2);
        *(_DWORD *)a1 = v28;
        a1[8] = a2[8];
        a1[9] = a2[9];
        a1[10] = a2[10];
        v29 = *((_QWORD *)a2 + 2);
        v30 = *((_QWORD *)a2 + 3);
        sub_100031FEC(v29, v30);
        *((_QWORD *)a1 + 2) = v29;
        *((_QWORD *)a1 + 3) = v30;
        v32 = *((_QWORD *)a2 + 4);
        v31 = *((_QWORD *)a2 + 5);
        sub_100031FEC(v32, v31);
        *((_QWORD *)a1 + 4) = v32;
        *((_QWORD *)a1 + 5) = v31;
        v7 = a1;
        v8 = a3;
        v9 = 8;
        goto LABEL_74;
      case 9u:
        *a1 = *a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        v34 = *((_QWORD *)a2 + 1);
        v33 = *((_QWORD *)a2 + 2);
        sub_100031FEC(v34, v33);
        *((_QWORD *)a1 + 1) = v34;
        *((_QWORD *)a1 + 2) = v33;
        v7 = a1;
        v8 = a3;
        v9 = 9;
        goto LABEL_74;
      case 0xAu:
        *a1 = *a2;
        v35 = *((_QWORD *)a2 + 1);
        *((_QWORD *)a1 + 1) = v35;
        swift_bridgeObjectRetain(v35);
        v7 = a1;
        v8 = a3;
        v9 = 10;
        goto LABEL_74;
      case 0xCu:
        v36 = *(_DWORD *)a2;
        *((_WORD *)a1 + 2) = *((_WORD *)a2 + 2);
        *(_DWORD *)a1 = v36;
        v38 = *((_QWORD *)a2 + 1);
        v37 = *((_QWORD *)a2 + 2);
        sub_100031FEC(v38, v37);
        *((_QWORD *)a1 + 1) = v38;
        *((_QWORD *)a1 + 2) = v37;
        v7 = a1;
        v8 = a3;
        v9 = 12;
        goto LABEL_74;
      case 0xEu:
        *a1 = *a2;
        *((_WORD *)a1 + 1) = *((_WORD *)a2 + 1);
        v39 = *((_DWORD *)a2 + 1);
        a1[8] = a2[8];
        *((_DWORD *)a1 + 1) = v39;
        *(_WORD *)(a1 + 9) = *(_WORD *)(a2 + 9);
        v40 = a2[16];
        if (v40 == 4)
        {
          v41 = *((_OWORD *)a2 + 1);
          *((_QWORD *)a1 + 4) = *((_QWORD *)a2 + 4);
          *((_OWORD *)a1 + 1) = v41;
        }
        else
        {
          a1[16] = v40;
          v99 = *((_QWORD *)a2 + 3);
          v98 = *((_QWORD *)a2 + 4);
          sub_100031FEC(v99, v98);
          *((_QWORD *)a1 + 3) = v99;
          *((_QWORD *)a1 + 4) = v98;
        }
        v7 = a1;
        v8 = a3;
        v9 = 14;
        goto LABEL_74;
      case 0x10u:
        *a1 = *a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        v42 = *(_DWORD *)(a2 + 3);
        *(_WORD *)(a1 + 7) = *(_WORD *)(a2 + 7);
        *(_DWORD *)(a1 + 3) = v42;
        a1[9] = a2[9];
        a1[10] = a2[10];
        *(_WORD *)(a1 + 11) = *(_WORD *)(a2 + 11);
        v43 = *(_DWORD *)(a2 + 13);
        *((_DWORD *)a1 + 4) = *((_DWORD *)a2 + 4);
        *(_DWORD *)(a1 + 13) = v43;
        v44 = a2[24];
        if (v44 == 4)
        {
          v45 = *(_OWORD *)(a2 + 24);
          *((_QWORD *)a1 + 5) = *((_QWORD *)a2 + 5);
          *(_OWORD *)(a1 + 24) = v45;
        }
        else
        {
          a1[24] = v44;
          v101 = *((_QWORD *)a2 + 4);
          v100 = *((_QWORD *)a2 + 5);
          sub_100031FEC(v101, v100);
          *((_QWORD *)a1 + 4) = v101;
          *((_QWORD *)a1 + 5) = v100;
        }
        v7 = a1;
        v8 = a3;
        v9 = 16;
        goto LABEL_74;
      case 0x11u:
        *a1 = *a2;
        *((_WORD *)a1 + 1) = *((_WORD *)a2 + 1);
        v46 = *((_QWORD *)a2 + 1);
        *((_QWORD *)a1 + 1) = v46;
        swift_bridgeObjectRetain(v46);
        v7 = a1;
        v8 = a3;
        v9 = 17;
        goto LABEL_74;
      case 0x12u:
        v47 = *(_DWORD *)a2;
        *((_WORD *)a1 + 2) = *((_WORD *)a2 + 2);
        *(_DWORD *)a1 = v47;
        a1[6] = a2[6];
        v48 = *((_QWORD *)a2 + 1);
        *((_QWORD *)a1 + 1) = v48;
        swift_bridgeObjectRetain(v48);
        v7 = a1;
        v8 = a3;
        v9 = 18;
        goto LABEL_74;
      case 0x13u:
        *a1 = *a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        a1[3] = a2[3];
        *((_WORD *)a1 + 2) = *((_WORD *)a2 + 2);
        v49 = *((_QWORD *)a2 + 1);
        a1[16] = a2[16];
        *((_QWORD *)a1 + 1) = v49;
        v50 = *((_QWORD *)a2 + 3);
        *((_QWORD *)a1 + 3) = v50;
        swift_bridgeObjectRetain(v50);
        v7 = a1;
        v8 = a3;
        v9 = 19;
        goto LABEL_74;
      case 0x17u:
        *a1 = *a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        a1[3] = a2[3];
        v51 = *((_DWORD *)a2 + 1);
        a1[8] = a2[8];
        *((_DWORD *)a1 + 1) = v51;
        v52 = *((_QWORD *)a2 + 2);
        *((_QWORD *)a1 + 2) = v52;
        swift_bridgeObjectRetain(v52);
        v7 = a1;
        v8 = a3;
        v9 = 23;
        goto LABEL_74;
      case 0x18u:
        v53 = *(_QWORD *)a2;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        swift_bridgeObjectRetain(v53);
        v7 = a1;
        v8 = a3;
        v9 = 24;
        goto LABEL_74;
      case 0x19u:
        *(_WORD *)a1 = *(_WORD *)a2;
        v55 = *((_QWORD *)a2 + 1);
        v54 = *((_QWORD *)a2 + 2);
        sub_100031FEC(v55, v54);
        *((_QWORD *)a1 + 1) = v55;
        *((_QWORD *)a1 + 2) = v54;
        v7 = a1;
        v8 = a3;
        v9 = 25;
        goto LABEL_74;
      case 0x1Du:
        v56 = *(_DWORD *)a2;
        *((_WORD *)a1 + 2) = *((_WORD *)a2 + 2);
        *(_DWORD *)a1 = v56;
        LOWORD(v56) = *((_WORD *)a2 + 3);
        a1[8] = a2[8];
        *((_WORD *)a1 + 3) = v56;
        *(_DWORD *)(a1 + 10) = *(_DWORD *)(a2 + 10);
        v58 = *((_QWORD *)a2 + 2);
        v57 = *((_QWORD *)a2 + 3);
        sub_100031FEC(v58, v57);
        *((_QWORD *)a1 + 2) = v58;
        *((_QWORD *)a1 + 3) = v57;
        v7 = a1;
        v8 = a3;
        v9 = 29;
        goto LABEL_74;
      case 0x1Eu:
        *a1 = *a2;
        v59 = *((_QWORD *)a2 + 1);
        *((_QWORD *)a1 + 1) = v59;
        swift_bridgeObjectRetain(v59);
        v7 = a1;
        v8 = a3;
        v9 = 30;
        goto LABEL_74;
      case 0x1Fu:
        v60 = *(_QWORD *)a2;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        swift_bridgeObjectRetain(v60);
        v7 = a1;
        v8 = a3;
        v9 = 31;
        goto LABEL_74;
      case 0x20u:
        *a1 = *a2;
        v62 = *((_QWORD *)a2 + 1);
        v61 = *((_QWORD *)a2 + 2);
        sub_100031FEC(v62, v61);
        *((_QWORD *)a1 + 1) = v62;
        *((_QWORD *)a1 + 2) = v61;
        v7 = a1;
        v8 = a3;
        v9 = 32;
        goto LABEL_74;
      case 0x21u:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *((_QWORD *)a1 + 1) = *((_QWORD *)a2 + 1);
        *((_WORD *)a1 + 8) = *((_WORD *)a2 + 8);
        a1[18] = a2[18];
        v63 = *((_QWORD *)a2 + 3);
        *((_QWORD *)a1 + 3) = v63;
        swift_bridgeObjectRetain(v63);
        v7 = a1;
        v8 = a3;
        v9 = 33;
        goto LABEL_74;
      case 0x22u:
        v64 = *(_QWORD *)a2;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        swift_bridgeObjectRetain(v64);
        v7 = a1;
        v8 = a3;
        v9 = 34;
        goto LABEL_74;
      case 0x23u:
        v65 = *(_QWORD *)a2;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        swift_bridgeObjectRetain(v65);
        v7 = a1;
        v8 = a3;
        v9 = 35;
        goto LABEL_74;
      case 0x24u:
        *a1 = *a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        v66 = *(_DWORD *)(a2 + 3);
        *(_WORD *)(a1 + 7) = *(_WORD *)(a2 + 7);
        *(_DWORD *)(a1 + 3) = v66;
        a1[9] = a2[9];
        a1[10] = a2[10];
        *(_WORD *)(a1 + 11) = *(_WORD *)(a2 + 11);
        v67 = *(_DWORD *)(a2 + 13);
        *((_DWORD *)a1 + 4) = *((_DWORD *)a2 + 4);
        *(_DWORD *)(a1 + 13) = v67;
        v68 = (uint64_t *)(a2 + 24);
        v69 = *((_QWORD *)a2 + 4);
        if (v69 >> 60 == 15)
        {
          *(_OWORD *)(a1 + 24) = *(_OWORD *)v68;
        }
        else
        {
          v102 = *v68;
          sub_100031FEC(*v68, *((_QWORD *)a2 + 4));
          *((_QWORD *)a1 + 3) = v102;
          *((_QWORD *)a1 + 4) = v69;
        }
        v103 = a2[40];
        if (v103 == 4)
        {
          v104 = *(_OWORD *)(a2 + 40);
          *((_QWORD *)a1 + 7) = *((_QWORD *)a2 + 7);
          *(_OWORD *)(a1 + 40) = v104;
        }
        else
        {
          a1[40] = v103;
          v111 = *((_QWORD *)a2 + 6);
          v110 = *((_QWORD *)a2 + 7);
          sub_100031FEC(v111, v110);
          *((_QWORD *)a1 + 6) = v111;
          *((_QWORD *)a1 + 7) = v110;
        }
        v7 = a1;
        v8 = a3;
        v9 = 36;
        goto LABEL_74;
      case 0x25u:
        v70 = *(_QWORD *)a2;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        swift_bridgeObjectRetain(v70);
        v7 = a1;
        v8 = a3;
        v9 = 37;
        goto LABEL_74;
      case 0x26u:
        v71 = *(_QWORD *)a2;
        v72 = *((_QWORD *)a2 + 1);
        sub_100031FEC(*(_QWORD *)a2, v72);
        *(_QWORD *)a1 = v71;
        *((_QWORD *)a1 + 1) = v72;
        v74 = *((_QWORD *)a2 + 2);
        v73 = *((_QWORD *)a2 + 3);
        sub_100031FEC(v74, v73);
        *((_QWORD *)a1 + 2) = v74;
        *((_QWORD *)a1 + 3) = v73;
        v7 = a1;
        v8 = a3;
        v9 = 38;
        goto LABEL_74;
      case 0x27u:
        *a1 = *a2;
        a1[1] = a2[1];
        a1[2] = a2[2];
        v75 = a1 + 8;
        v76 = a2 + 8;
        if (*((_QWORD *)a2 + 4) >> 60 == 15)
        {
          v77 = *(_OWORD *)(a2 + 24);
          *v75 = *v76;
          *(_OWORD *)(a1 + 24) = v77;
        }
        else
        {
          v105 = *(_QWORD *)v76;
          a1[16] = a2[16];
          *(_QWORD *)v75 = v105;
          v106 = *((_QWORD *)a2 + 3);
          v107 = *((_QWORD *)a2 + 4);
          sub_100031FEC(v106, v107);
          *((_QWORD *)a1 + 3) = v106;
          *((_QWORD *)a1 + 4) = v107;
        }
        *((_WORD *)a1 + 20) = *((_WORD *)a2 + 20);
        v7 = a1;
        v8 = a3;
        v9 = 39;
        goto LABEL_74;
      case 0x28u:
        *a1 = *a2;
        a1[1] = a2[1];
        *((_DWORD *)a1 + 1) = *((_DWORD *)a2 + 1);
        v78 = *(int *)(type metadata accessor for NANAttribute.CustomDeviceInformation(0) + 28);
        v79 = &a1[v78];
        v80 = &a2[v78];
        *v79 = a2[v78];
        *(_WORD *)(v79 + 1) = *(_WORD *)&a2[v78 + 1];
        v81 = (int *)type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
        v82 = v81[6];
        v83 = &v79[v82];
        v84 = &v80[v82];
        v85 = type metadata accessor for P256.KeyAgreement.PublicKey(0);
        v86 = *(_QWORD *)(v85 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v86 + 48))(v84, 1, v85))
        {
          v87 = sub_100012C44((uint64_t *)&unk_10040D200);
          memcpy(v83, v84, *(_QWORD *)(*(_QWORD *)(v87 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v86 + 16))(v83, v84, v85);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v86 + 56))(v83, 0, 1, v85);
        }
        v112 = v81[7];
        v113 = &v79[v112];
        v114 = (uint64_t *)&v80[v112];
        v115 = v114[1];
        if (v115 >> 60 == 15)
        {
          *(_OWORD *)v113 = *(_OWORD *)v114;
        }
        else
        {
          v116 = *v114;
          sub_100031FEC(*v114, v114[1]);
          *(_QWORD *)v113 = v116;
          *((_QWORD *)v113 + 1) = v115;
        }
        v117 = v81[8];
        v118 = &v79[v117];
        v119 = (uint64_t *)&v80[v117];
        v120 = v119[1];
        if (v120 >> 60 == 15)
        {
          *(_OWORD *)v118 = *(_OWORD *)v119;
        }
        else
        {
          v121 = *v119;
          sub_100031FEC(*v119, v119[1]);
          *(_QWORD *)v118 = v121;
          *((_QWORD *)v118 + 1) = v120;
        }
        v122 = v81[9];
        v123 = &v79[v122];
        v124 = (uint64_t *)&v80[v122];
        v125 = v124[1];
        if (v125 >> 60 == 15)
        {
          *(_OWORD *)v123 = *(_OWORD *)v124;
        }
        else
        {
          v126 = *v124;
          sub_100031FEC(*v124, v124[1]);
          *(_QWORD *)v123 = v126;
          *((_QWORD *)v123 + 1) = v125;
        }
        v127 = v81[10];
        v128 = &v79[v127];
        v129 = &v80[v127];
        v130 = type metadata accessor for UUID(0);
        v131 = *(_QWORD *)(v130 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v131 + 48))(v129, 1, v130))
        {
          v132 = sub_100012C44(&qword_10040E1F0);
          memcpy(v128, v129, *(_QWORD *)(*(_QWORD *)(v132 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v131 + 16))(v128, v129, v130);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v131 + 56))(v128, 0, 1, v130);
        }
        v133 = v81[11];
        v134 = *(_QWORD *)&v80[v133];
        *(_QWORD *)&v79[v133] = v134;
        v148 = v81;
        v135 = v81[12];
        v136 = &v79[v135];
        v137 = &v80[v135];
        v138 = type metadata accessor for NANInternetSharingStatistics.Requester(0);
        v139 = *(_QWORD *)(v138 - 8);
        v140 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v139 + 48);
        swift_bridgeObjectRetain(v134);
        if (v140(v137, 1, v138))
        {
          v141 = sub_100012C44((uint64_t *)&unk_10040DAB0);
          memcpy(v136, v137, *(_QWORD *)(*(_QWORD *)(v141 - 8) + 64));
        }
        else
        {
          v142 = type metadata accessor for DispatchTimeInterval(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v142 - 8) + 16))(v136, v137, v142);
          v136[*(int *)(v138 + 20)] = v137[*(int *)(v138 + 20)];
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v139 + 56))(v136, 0, 1, v138);
        }
        v143 = v148[13];
        v144 = &v79[v143];
        v145 = (__int128 *)&v80[v143];
        v146 = *v145;
        *(_OWORD *)(v144 + 9) = *(__int128 *)((char *)v145 + 9);
        *(_OWORD *)v144 = v146;
        v7 = a1;
        v8 = a3;
        v9 = 40;
        goto LABEL_74;
      case 0x29u:
        v88 = *(_WORD *)a2;
        a1[2] = a2[2];
        *(_WORD *)a1 = v88;
        v90 = *((_QWORD *)a2 + 1);
        v89 = *((_QWORD *)a2 + 2);
        sub_100031FEC(v90, v89);
        *((_QWORD *)a1 + 1) = v90;
        *((_QWORD *)a1 + 2) = v89;
        v7 = a1;
        v8 = a3;
        v9 = 41;
        goto LABEL_74;
      case 0x2Au:
        *a1 = *a2;
        v92 = *((_QWORD *)a2 + 1);
        v91 = *((_QWORD *)a2 + 2);
        sub_100031FEC(v92, v91);
        *((_QWORD *)a1 + 1) = v92;
        *((_QWORD *)a1 + 2) = v91;
        v7 = a1;
        v8 = a3;
        v9 = 42;
LABEL_74:
        swift_storeEnumTagMultiPayload(v7, v8, v9);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

_DWORD *initializeWithTake for NANAttribute(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  int *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;

  if (swift_getEnumCaseMultiPayload(a2, a3) == 40)
  {
    *(_WORD *)a1 = *(_WORD *)a2;
    a1[1] = a2[1];
    v6 = *(int *)(type metadata accessor for NANAttribute.CustomDeviceInformation(0) + 28);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    *v7 = *((_BYTE *)a2 + v6);
    *(_WORD *)(v7 + 1) = *(_WORD *)((char *)a2 + v6 + 1);
    v9 = (int *)type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
    v10 = v9[6];
    v11 = &v7[v10];
    v12 = &v8[v10];
    v13 = type metadata accessor for P256.KeyAgreement.PublicKey(0);
    v14 = *(_QWORD *)(v13 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
    {
      v15 = sub_100012C44((uint64_t *)&unk_10040D200);
      memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v12, v13);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
    }
    *(_OWORD *)&v7[v9[7]] = *(_OWORD *)&v8[v9[7]];
    *(_OWORD *)&v7[v9[8]] = *(_OWORD *)&v8[v9[8]];
    *(_OWORD *)&v7[v9[9]] = *(_OWORD *)&v8[v9[9]];
    v16 = v9[10];
    v17 = &v7[v16];
    v18 = &v8[v16];
    v19 = type metadata accessor for UUID(0);
    v20 = *(_QWORD *)(v19 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
    {
      v21 = sub_100012C44(&qword_10040E1F0);
      memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v17, v18, v19);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
    }
    *(_QWORD *)&v7[v9[11]] = *(_QWORD *)&v8[v9[11]];
    v22 = v9[12];
    v23 = &v7[v22];
    v24 = &v8[v22];
    v25 = type metadata accessor for NANInternetSharingStatistics.Requester(0);
    v26 = *(_QWORD *)(v25 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
    {
      v27 = sub_100012C44((uint64_t *)&unk_10040DAB0);
      memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    }
    else
    {
      v28 = type metadata accessor for DispatchTimeInterval(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 32))(v23, v24, v28);
      v23[*(int *)(v25 + 20)] = v24[*(int *)(v25 + 20)];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
    }
    v29 = v9[13];
    v30 = &v7[v29];
    v31 = &v8[v29];
    *(_OWORD *)v30 = *(_OWORD *)v31;
    *(_OWORD *)(v30 + 9) = *(_OWORD *)(v31 + 9);
    swift_storeEnumTagMultiPayload(a1, a3, 40);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

_DWORD *assignWithTake for NANAttribute(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  int *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;

  if (a1 != a2)
  {
    sub_100063824((uint64_t)a1, type metadata accessor for NANAttribute);
    if (swift_getEnumCaseMultiPayload(a2, a3) == 40)
    {
      *(_WORD *)a1 = *(_WORD *)a2;
      a1[1] = a2[1];
      v6 = *(int *)(type metadata accessor for NANAttribute.CustomDeviceInformation(0) + 28);
      v7 = (char *)a1 + v6;
      v8 = (char *)a2 + v6;
      *v7 = *((_BYTE *)a2 + v6);
      *(_WORD *)(v7 + 1) = *(_WORD *)((char *)a2 + v6 + 1);
      v9 = (int *)type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
      v10 = v9[6];
      v11 = &v7[v10];
      v12 = &v8[v10];
      v13 = type metadata accessor for P256.KeyAgreement.PublicKey(0);
      v14 = *(_QWORD *)(v13 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
      {
        v15 = sub_100012C44((uint64_t *)&unk_10040D200);
        memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v12, v13);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
      }
      *(_OWORD *)&v7[v9[7]] = *(_OWORD *)&v8[v9[7]];
      *(_OWORD *)&v7[v9[8]] = *(_OWORD *)&v8[v9[8]];
      *(_OWORD *)&v7[v9[9]] = *(_OWORD *)&v8[v9[9]];
      v16 = v9[10];
      v17 = &v7[v16];
      v18 = &v8[v16];
      v19 = type metadata accessor for UUID(0);
      v20 = *(_QWORD *)(v19 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
      {
        v21 = sub_100012C44(&qword_10040E1F0);
        memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v17, v18, v19);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
      }
      *(_QWORD *)&v7[v9[11]] = *(_QWORD *)&v8[v9[11]];
      v22 = v9[12];
      v23 = &v7[v22];
      v24 = &v8[v22];
      v25 = type metadata accessor for NANInternetSharingStatistics.Requester(0);
      v26 = *(_QWORD *)(v25 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
      {
        v27 = sub_100012C44((uint64_t *)&unk_10040DAB0);
        memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
      }
      else
      {
        v28 = type metadata accessor for DispatchTimeInterval(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v28 - 8) + 32))(v23, v24, v28);
        v23[*(int *)(v25 + 20)] = v24[*(int *)(v25 + 20)];
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
      }
      v29 = v9[13];
      v30 = &v7[v29];
      v31 = &v8[v29];
      *(_OWORD *)v30 = *(_OWORD *)v31;
      *(_OWORD *)(v30 + 9) = *(_OWORD *)(v31 + 9);
      swift_storeEnumTagMultiPayload(a1, a3, 40);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_1001E2B00(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[43];

  v4[0] = &unk_100358E20;
  v4[1] = &unk_100358E38;
  v4[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[3] = &unk_100358E50;
  v4[4] = (char *)&value witness table for Builtin.Int16 + 64;
  v4[5] = &unk_100358E68;
  v4[6] = &unk_100358E80;
  v4[7] = &unk_100358E98;
  v4[8] = &unk_100358EB0;
  v4[9] = &unk_100358EC8;
  v4[10] = &unk_100358EE0;
  v4[11] = &unk_100358E20;
  v4[12] = &unk_100358EF8;
  v4[13] = &unk_100358F10;
  v4[14] = &unk_100358F28;
  v4[15] = &unk_100358F40;
  v4[16] = &unk_100358F58;
  v4[17] = &unk_100358EE0;
  v4[18] = &unk_100358EE0;
  v4[19] = &unk_100358F70;
  v4[20] = &unk_100358F88;
  v4[21] = &unk_100358FA0;
  v4[22] = &unk_100358FB8;
  v4[23] = &unk_100358FD0;
  v4[24] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[25] = &unk_100358EF8;
  v4[26] = &unk_100358FE8;
  v4[27] = &unk_100359000;
  v4[28] = &unk_100359018;
  v4[29] = &unk_100359030;
  v4[30] = &unk_100358EE0;
  v4[31] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[32] = &unk_100358EF8;
  v4[33] = &unk_100358F70;
  v4[34] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[35] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[36] = &unk_100359048;
  v4[37] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[38] = &unk_100359030;
  v4[39] = &unk_100359060;
  result = type metadata accessor for NANAttribute.CustomDeviceInformation(319);
  if (v3 <= 0x3F)
  {
    v4[40] = *(_QWORD *)(result - 8) + 64;
    v4[41] = &unk_100358EF8;
    v4[42] = &unk_100359078;
    swift_initEnumMetadataMultiPayload(a1, 256, 43, v4);
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for NANAttribute.MasterIndication(_WORD *a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 0xFFFF) <= 0xFFFEFFFF)
    v3 = 2;
  else
    v3 = 4;
  if ((a3 + 0xFFFF) < 0xFF0000)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (!a2)
    return ((uint64_t (*)(void))((char *)sub_1001E2D20 + 4 * byte_10035266F[v4]))();
  *a1 = a2 - 1;
  return ((uint64_t (*)(void))((char *)sub_1001E2D00 + 4 * byte_10035266A[v4]))();
}

uint64_t sub_1001E2D00(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 2) = v1;
  return result;
}

uint64_t sub_1001E2D20(uint64_t result)
{
  *(_BYTE *)(result + 2) = 0;
  return result;
}

uint64_t sub_1001E2D28(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_1001E2D30(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_1001E2D38(uint64_t result)
{
  *(_WORD *)(result + 2) = 0;
  return result;
}

uint64_t sub_1001E2D40(uint64_t result)
{
  *(_DWORD *)(result + 2) = 0;
  return result;
}

ValueMetadata *type metadata accessor for NANAttribute.MasterIndication()
{
  return &type metadata for NANAttribute.MasterIndication;
}

ValueMetadata *type metadata accessor for NANAttribute.Cluster()
{
  return &type metadata for NANAttribute.Cluster;
}

ValueMetadata *type metadata accessor for NANAttribute.ServiceIDList()
{
  return &type metadata for NANAttribute.ServiceIDList;
}

void destroy for NANAttribute.ServiceDescriptor(uint64_t a1)
{
  uint64_t v2;

  sub_10000E614(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  if (*(unsigned __int8 *)(a1 + 50) != 255)
  {
    v2 = *(unsigned __int16 *)(a1 + 48) | (*(unsigned __int8 *)(a1 + 50) << 16);
    sub_100111BB0(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), v2, BYTE2(v2) & 1);
  }
  if (*(_BYTE *)(a1 + 56) != 4)
    sub_10000E614(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72));
}

uint64_t initializeWithCopy for NANAttribute.ServiceDescriptor(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  sub_100031FEC(*(_QWORD *)a2, v5);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_WORD *)(a1 + 17) = *(_WORD *)(a2 + 17);
  *(_WORD *)(a1 + 20) = *(_WORD *)(a2 + 20);
  *(_BYTE *)(a1 + 22) = *(_BYTE *)(a2 + 22);
  v6 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  v7 = *(_BYTE *)(a2 + 50);
  v8 = *(unsigned __int16 *)(a2 + 48);
  swift_bridgeObjectRetain(v6);
  if (v7 == 255)
  {
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_DWORD *)(a1 + 47) = *(_DWORD *)(a2 + 47);
  }
  else
  {
    v9 = v8 & 0xFF00FFFF | (v7 << 16);
    v10 = *(_QWORD *)(a2 + 32);
    v11 = *(_QWORD *)(a2 + 40);
    sub_1001D7C70(v10, v11, v9, BYTE2(v9) & 1);
    *(_QWORD *)(a1 + 32) = v10;
    *(_QWORD *)(a1 + 40) = v11;
    *(_WORD *)(a1 + 48) = v9;
    *(_BYTE *)(a1 + 50) = BYTE2(v9) & 1;
  }
  v12 = *(unsigned __int8 *)(a2 + 56);
  if (v12 == 4)
  {
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  }
  else
  {
    *(_BYTE *)(a1 + 56) = v12;
    v14 = *(_QWORD *)(a2 + 64);
    v13 = *(_QWORD *)(a2 + 72);
    sub_100031FEC(v14, v13);
    *(_QWORD *)(a1 + 64) = v14;
    *(_QWORD *)(a1 + 72) = v13;
  }
  return a1;
}

uint64_t assignWithCopy for NANAttribute.ServiceDescriptor(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  __int16 v8;
  uint64_t v9;
  uint64_t v10;
  __int128 *v11;
  __int128 *v12;
  int v13;
  __int128 v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  uint64_t v23;
  __int128 *v24;
  uint64_t v25;
  __int128 *v26;
  __int128 v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  sub_100031FEC(*(_QWORD *)a2, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  sub_10000E614(v6, v7);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  *(_BYTE *)(a1 + 18) = *(_BYTE *)(a2 + 18);
  v8 = *(_WORD *)(a2 + 20);
  *(_BYTE *)(a1 + 22) = *(_BYTE *)(a2 + 22);
  *(_WORD *)(a1 + 20) = v8;
  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v9);
  v11 = (__int128 *)(a1 + 32);
  v12 = (__int128 *)(a2 + 32);
  v13 = *(unsigned __int16 *)(a2 + 48) | (*(unsigned __int8 *)(a2 + 50) << 16);
  if (*(unsigned __int8 *)(a1 + 50) == 255)
  {
    if (BYTE2(v13) == 255)
    {
      v14 = *v12;
      *(_DWORD *)(a1 + 47) = *(_DWORD *)(a2 + 47);
      *v11 = v14;
    }
    else
    {
      v16 = *(_QWORD *)(a2 + 32);
      v17 = *(_QWORD *)(a2 + 40);
      sub_1001D7C70(v16, v17, *(unsigned __int16 *)(a2 + 48) | (*(unsigned __int8 *)(a2 + 50) << 16), BYTE2(v13) & 1);
      *(_QWORD *)(a1 + 32) = v16;
      *(_QWORD *)(a1 + 40) = v17;
      *(_WORD *)(a1 + 48) = v13;
      *(_BYTE *)(a1 + 50) = BYTE2(v13) & 1;
    }
  }
  else if (BYTE2(v13) == 255)
  {
    sub_100033A84(a1 + 32, &qword_10040AFC8);
    v15 = *(_DWORD *)(a2 + 47);
    *v11 = *v12;
    *(_DWORD *)(a1 + 47) = v15;
  }
  else
  {
    v18 = *(_QWORD *)(a2 + 32);
    v19 = *(_QWORD *)(a2 + 40);
    sub_1001D7C70(v18, v19, *(unsigned __int16 *)(a2 + 48) | (*(unsigned __int8 *)(a2 + 50) << 16), BYTE2(v13) & 1);
    v20 = *(_QWORD *)(a1 + 32);
    v21 = *(_QWORD *)(a1 + 40);
    v22 = *(_BYTE *)(a1 + 50);
    *(_QWORD *)(a1 + 32) = v18;
    *(_QWORD *)(a1 + 40) = v19;
    v23 = *(unsigned __int16 *)(a1 + 48);
    *(_WORD *)(a1 + 48) = v13;
    *(_BYTE *)(a1 + 50) = BYTE2(v13) & 1;
    sub_100111BB0(v20, v21, v23, v22);
  }
  v24 = (__int128 *)(a1 + 56);
  v26 = (__int128 *)(a2 + 56);
  v25 = *(unsigned __int8 *)(a2 + 56);
  if (*(_BYTE *)(a1 + 56) == 4)
  {
    if (v25 == 4)
    {
      v27 = *v26;
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
      *v24 = v27;
    }
    else
    {
      *(_BYTE *)(a1 + 56) = v25;
      v30 = *(_QWORD *)(a2 + 64);
      v29 = *(_QWORD *)(a2 + 72);
      sub_100031FEC(v30, v29);
      *(_QWORD *)(a1 + 64) = v30;
      *(_QWORD *)(a1 + 72) = v29;
    }
  }
  else if (v25 == 4)
  {
    sub_100186E18(a1 + 56);
    v28 = *(_QWORD *)(a2 + 72);
    *v24 = *v26;
    *(_QWORD *)(a1 + 72) = v28;
  }
  else
  {
    *(_BYTE *)(a1 + 56) = v25;
    v32 = *(_QWORD *)(a2 + 64);
    v31 = *(_QWORD *)(a2 + 72);
    sub_100031FEC(v32, v31);
    v33 = *(_QWORD *)(a1 + 64);
    v34 = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(a1 + 64) = v32;
    *(_QWORD *)(a1 + 72) = v31;
    sub_10000E614(v33, v34);
  }
  return a1;
}

__n128 initializeWithTake for NANAttribute.ServiceDescriptor(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

uint64_t assignWithTake for NANAttribute.ServiceDescriptor(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;

  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_10000E614(v4, v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_WORD *)(a1 + 17) = *(_WORD *)(a2 + 17);
  *(_WORD *)(a1 + 20) = *(_WORD *)(a2 + 20);
  *(_BYTE *)(a1 + 22) = *(_BYTE *)(a2 + 22);
  v6 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease(v6);
  v7 = (_OWORD *)(a2 + 32);
  if (*(unsigned __int8 *)(a1 + 50) == 255)
    goto LABEL_4;
  v8 = *(unsigned __int16 *)(a2 + 48) | (*(unsigned __int8 *)(a2 + 50) << 16);
  if (HIWORD(v8) > 0xFEu)
  {
    sub_100033A84(a1 + 32, &qword_10040AFC8);
LABEL_4:
    *(_OWORD *)(a1 + 32) = *v7;
    *(_DWORD *)(a1 + 47) = *(_DWORD *)(a2 + 47);
    goto LABEL_6;
  }
  v9 = *(unsigned __int16 *)(a1 + 48) | (*(unsigned __int8 *)(a1 + 50) << 16);
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a1 + 32) = *v7;
  *(_WORD *)(a1 + 48) = v8;
  *(_BYTE *)(a1 + 50) = BYTE2(v8) & 1;
  sub_100111BB0(v10, v11, v9, BYTE2(v9) & 1);
LABEL_6:
  v12 = *(unsigned __int8 *)(a2 + 56);
  if (*(_BYTE *)(a1 + 56) != 4)
  {
    if (v12 != 4)
    {
      *(_BYTE *)(a1 + 56) = v12;
      v13 = *(_QWORD *)(a1 + 64);
      v14 = *(_QWORD *)(a1 + 72);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      sub_10000E614(v13, v14);
      return a1;
    }
    sub_100186E18(a1 + 56);
  }
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  return a1;
}

uint64_t getEnumTagSinglePayload for NANAttribute.ServiceDescriptor(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 80))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for NANAttribute.ServiceDescriptor(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 80) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 80) = 0;
    if (a2)
      *(_QWORD *)(result + 24) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for NANAttribute.ServiceDescriptor()
{
  return &type metadata for NANAttribute.ServiceDescriptor;
}

ValueMetadata *type metadata accessor for NANAttribute.ServiceDescriptor.Control()
{
  return &type metadata for NANAttribute.ServiceDescriptor.Control;
}

ValueMetadata *type metadata accessor for NANAttribute.ServiceDescriptor.Control.ControlType()
{
  return &type metadata for NANAttribute.ServiceDescriptor.Control.ControlType;
}

ValueMetadata *type metadata accessor for NANAttribute.ServiceDescriptor.ServiceResponseFilterControl()
{
  return &type metadata for NANAttribute.ServiceDescriptor.ServiceResponseFilterControl;
}

ValueMetadata *type metadata accessor for NANAttribute.ServiceDescriptor.ServiceResponseFilterControl.FilterType()
{
  return &type metadata for NANAttribute.ServiceDescriptor.ServiceResponseFilterControl.FilterType;
}

uint64_t initializeBufferWithCopyOfBuffer for NANAttribute.ServiceDescriptor.ServiceFilterControl(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = *a2;
  *(_QWORD *)a1 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t destroy for NANAttribute.ServiceDescriptor.ServiceFilterControl(_QWORD *a1)
{
  return swift_bridgeObjectRelease(*a1);
}

uint64_t *assignWithCopy for NANAttribute.ServiceDescriptor.ServiceFilterControl(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *((_BYTE *)a1 + 8) = *((_BYTE *)a2 + 8);
  return a1;
}

uint64_t *assignWithTake for NANAttribute.ServiceDescriptor.ServiceFilterControl(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v4);
  *((_BYTE *)a1 + 8) = *((_BYTE *)a2 + 8);
  return a1;
}

ValueMetadata *type metadata accessor for NANAttribute.ServiceDescriptor.ServiceFilterControl()
{
  return &type metadata for NANAttribute.ServiceDescriptor.ServiceFilterControl;
}

uint64_t destroy for NANAttribute.ServiceDescriptorExtension(uint64_t result)
{
  if (*(_BYTE *)(result + 16) != 4)
    return sub_10000E614(*(_QWORD *)(result + 24), *(_QWORD *)(result + 32));
  return result;
}

uint64_t initializeWithCopy for NANAttribute.ServiceDescriptorExtension(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_WORD *)(a1 + 2) = *(_WORD *)(a2 + 2);
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_WORD *)(a1 + 9) = *(_WORD *)(a2 + 9);
  v3 = *(unsigned __int8 *)(a2 + 16);
  if (v3 == 4)
  {
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  }
  else
  {
    *(_BYTE *)(a1 + 16) = v3;
    v4 = *(_QWORD *)(a2 + 24);
    v5 = *(_QWORD *)(a2 + 32);
    sub_100031FEC(v4, v5);
    *(_QWORD *)(a1 + 24) = v4;
    *(_QWORD *)(a1 + 32) = v5;
  }
  return a1;
}

uint64_t assignWithCopy for NANAttribute.ServiceDescriptorExtension(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  __int128 *v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_WORD *)(a1 + 2) = *(_WORD *)(a2 + 2);
  v3 = *(_DWORD *)(a2 + 4);
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_DWORD *)(a1 + 4) = v3;
  *(_WORD *)(a1 + 9) = *(_WORD *)(a2 + 9);
  v4 = a1 + 16;
  v6 = (__int128 *)(a2 + 16);
  v5 = *(unsigned __int8 *)(a2 + 16);
  if (*(_BYTE *)(a1 + 16) == 4)
  {
    if (v5 == 4)
    {
      v7 = *v6;
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      *(_OWORD *)v4 = v7;
    }
    else
    {
      *(_BYTE *)(a1 + 16) = v5;
      v9 = *(_QWORD *)(a2 + 24);
      v10 = *(_QWORD *)(a2 + 32);
      sub_100031FEC(v9, v10);
      *(_QWORD *)(a1 + 24) = v9;
      *(_QWORD *)(a1 + 32) = v10;
    }
  }
  else if (v5 == 4)
  {
    sub_100186E18(a1 + 16);
    v8 = *((_QWORD *)v6 + 2);
    *(_OWORD *)v4 = *v6;
    *(_QWORD *)(v4 + 16) = v8;
  }
  else
  {
    *(_BYTE *)(a1 + 16) = v5;
    v11 = *(_QWORD *)(a2 + 24);
    v12 = *(_QWORD *)(a2 + 32);
    sub_100031FEC(v11, v12);
    v13 = *(_QWORD *)(a1 + 24);
    v14 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 24) = v11;
    *(_QWORD *)(a1 + 32) = v12;
    sub_10000E614(v13, v14);
  }
  return a1;
}

uint64_t assignWithTake for NANAttribute.ServiceDescriptorExtension(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_WORD *)(a1 + 2) = *(_WORD *)(a2 + 2);
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_WORD *)(a1 + 9) = *(_WORD *)(a2 + 9);
  v3 = a1 + 16;
  v5 = a2 + 16;
  v4 = *(unsigned __int8 *)(a2 + 16);
  if (*(_BYTE *)(a1 + 16) != 4)
  {
    if (v4 != 4)
    {
      *(_BYTE *)(a1 + 16) = v4;
      v6 = *(_QWORD *)(a1 + 24);
      v7 = *(_QWORD *)(a1 + 32);
      *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
      sub_10000E614(v6, v7);
      return a1;
    }
    sub_100186E18(a1 + 16);
  }
  *(_OWORD *)v3 = *(_OWORD *)v5;
  *(_QWORD *)(v3 + 16) = *(_QWORD *)(v5 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for NANAttribute.ServiceDescriptorExtension(uint64_t a1, unsigned int a2)
{
  int v3;
  int v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFC && *(_BYTE *)(a1 + 40))
    return (*(_DWORD *)a1 + 252);
  if (*(unsigned __int8 *)(a1 + 16) <= 4u)
    v3 = 4;
  else
    v3 = *(unsigned __int8 *)(a1 + 16);
  v4 = v3 - 5;
  if (*(unsigned __int8 *)(a1 + 16) < 4u)
    v5 = -1;
  else
    v5 = v4;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for NANAttribute.ServiceDescriptorExtension(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 - 252;
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 40) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = a2 + 4;
  }
  return result;
}

ValueMetadata *type metadata accessor for NANAttribute.ServiceDescriptorExtension()
{
  return &type metadata for NANAttribute.ServiceDescriptorExtension;
}

ValueMetadata *type metadata accessor for NANAttribute.ServiceDescriptorExtension.Control()
{
  return &type metadata for NANAttribute.ServiceDescriptorExtension.Control;
}

ValueMetadata *type metadata accessor for NANAttribute.ServiceDescriptorExtension.RangeLimit()
{
  return &type metadata for NANAttribute.ServiceDescriptorExtension.RangeLimit;
}

ValueMetadata *type metadata accessor for NANAttribute.ConnectionCapability()
{
  return &type metadata for NANAttribute.ConnectionCapability;
}

uint64_t destroy for NANAttribute.WLANInfrastructure(uint64_t a1)
{
  return sub_10000E614(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32));
}

uint64_t initializeWithCopy for NANAttribute.WLANInfrastructure(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_WORD *)(a1 + 4) = *(_WORD *)(a2 + 4);
  *(_DWORD *)(a1 + 6) = *(_DWORD *)(a2 + 6);
  *(_WORD *)(a1 + 10) = *(_WORD *)(a2 + 10);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_WORD *)(a1 + 17) = *(_WORD *)(a2 + 17);
  v4 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 32);
  sub_100031FEC(v4, v5);
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = v5;
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  return a1;
}

uint64_t assignWithCopy for NANAttribute.WLANInfrastructure(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  *(_BYTE *)(a1 + 3) = *(_BYTE *)(a2 + 3);
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
  *(_BYTE *)(a1 + 5) = *(_BYTE *)(a2 + 5);
  *(_BYTE *)(a1 + 6) = *(_BYTE *)(a2 + 6);
  *(_BYTE *)(a1 + 7) = *(_BYTE *)(a2 + 7);
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_BYTE *)(a1 + 9) = *(_BYTE *)(a2 + 9);
  *(_BYTE *)(a1 + 10) = *(_BYTE *)(a2 + 10);
  *(_BYTE *)(a1 + 11) = *(_BYTE *)(a2 + 11);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  *(_BYTE *)(a1 + 18) = *(_BYTE *)(a2 + 18);
  v4 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 32);
  sub_100031FEC(v4, v5);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = v5;
  sub_10000E614(v6, v7);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  return a1;
}

uint64_t assignWithTake for NANAttribute.WLANInfrastructure(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_BYTE *)(a1 + 18) = *(_BYTE *)(a2 + 18);
  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(_QWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  sub_10000E614(v4, v5);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for NANAttribute.WLANInfrastructure(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 41))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 18);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for NANAttribute.WLANInfrastructure(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 40) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 41) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 41) = 0;
    if (a2)
      *(_BYTE *)(result + 18) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for NANAttribute.WLANInfrastructure()
{
  return &type metadata for NANAttribute.WLANInfrastructure;
}

ValueMetadata *type metadata accessor for NANAttribute.WLANInfrastructure.DeviceRole()
{
  return &type metadata for NANAttribute.WLANInfrastructure.DeviceRole;
}

uint64_t initializeWithCopy for NANAttribute.P2POperation(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_DWORD *)(a1 + 1) = *(_DWORD *)(a2 + 1);
  *(_WORD *)(a1 + 5) = *(_WORD *)(a2 + 5);
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_WORD *)(a1 + 9) = *(_WORD *)(a2 + 9);
  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  sub_100031FEC(v3, v4);
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = v4;
  return a1;
}

uint64_t assignWithCopy for NANAttribute.P2POperation(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  *(_BYTE *)(a1 + 3) = *(_BYTE *)(a2 + 3);
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
  *(_BYTE *)(a1 + 5) = *(_BYTE *)(a2 + 5);
  *(_BYTE *)(a1 + 6) = *(_BYTE *)(a2 + 6);
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_BYTE *)(a1 + 9) = *(_BYTE *)(a2 + 9);
  *(_BYTE *)(a1 + 10) = *(_BYTE *)(a2 + 10);
  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  sub_100031FEC(v3, v4);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = v4;
  sub_10000E614(v5, v6);
  return a1;
}

uint64_t assignWithTake for NANAttribute.P2POperation(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
  *(_WORD *)(a1 + 5) = *(_WORD *)(a2 + 5);
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  *(_BYTE *)(a1 + 10) = *(_BYTE *)(a2 + 10);
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  sub_10000E614(v3, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for NANAttribute.P2POperation(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 10);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for NANAttribute.P2POperation(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 32) = 0;
    if (a2)
      *(_BYTE *)(result + 10) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for NANAttribute.P2POperation()
{
  return &type metadata for NANAttribute.P2POperation;
}

ValueMetadata *type metadata accessor for NANAttribute.P2POperation.DeviceRole()
{
  return &type metadata for NANAttribute.P2POperation.DeviceRole;
}

uint64_t initializeWithCopy for NANAttribute.IBSS(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_WORD *)(a1 + 4) = *(_WORD *)(a2 + 4);
  *(_DWORD *)(a1 + 6) = *(_DWORD *)(a2 + 6);
  *(_WORD *)(a1 + 10) = *(_WORD *)(a2 + 10);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_WORD *)(a1 + 17) = *(_WORD *)(a2 + 17);
  v3 = *(_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 32);
  sub_100031FEC(v3, v4);
  *(_QWORD *)(a1 + 24) = v3;
  *(_QWORD *)(a1 + 32) = v4;
  return a1;
}

uint64_t assignWithCopy for NANAttribute.IBSS(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  *(_BYTE *)(a1 + 3) = *(_BYTE *)(a2 + 3);
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
  *(_BYTE *)(a1 + 5) = *(_BYTE *)(a2 + 5);
  *(_BYTE *)(a1 + 6) = *(_BYTE *)(a2 + 6);
  *(_BYTE *)(a1 + 7) = *(_BYTE *)(a2 + 7);
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_BYTE *)(a1 + 9) = *(_BYTE *)(a2 + 9);
  *(_BYTE *)(a1 + 10) = *(_BYTE *)(a2 + 10);
  *(_BYTE *)(a1 + 11) = *(_BYTE *)(a2 + 11);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  *(_BYTE *)(a1 + 18) = *(_BYTE *)(a2 + 18);
  v3 = *(_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 32);
  sub_100031FEC(v3, v4);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = v3;
  *(_QWORD *)(a1 + 32) = v4;
  sub_10000E614(v5, v6);
  return a1;
}

uint64_t assignWithTake for NANAttribute.IBSS(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_BYTE *)(a1 + 18) = *(_BYTE *)(a2 + 18);
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  sub_10000E614(v3, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for NANAttribute.IBSS(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 40))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 18);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for NANAttribute.IBSS(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 40) = 0;
    if (a2)
      *(_BYTE *)(result + 18) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for NANAttribute.IBSS()
{
  return &type metadata for NANAttribute.IBSS;
}

uint64_t destroy for NANAttribute.Mesh(uint64_t a1)
{
  sub_10000E614(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  return sub_10000E614(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
}

uint64_t initializeWithCopy for NANAttribute.Mesh(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_WORD *)(a1 + 4) = *(_WORD *)(a2 + 4);
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_WORD *)(a1 + 9) = *(_WORD *)(a2 + 9);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  sub_100031FEC(v4, v5);
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  v7 = *(_QWORD *)(a2 + 32);
  v6 = *(_QWORD *)(a2 + 40);
  sub_100031FEC(v7, v6);
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v6;
  return a1;
}

uint64_t assignWithCopy for NANAttribute.Mesh(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  *(_BYTE *)(a1 + 3) = *(_BYTE *)(a2 + 3);
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
  *(_BYTE *)(a1 + 5) = *(_BYTE *)(a2 + 5);
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_BYTE *)(a1 + 9) = *(_BYTE *)(a2 + 9);
  *(_BYTE *)(a1 + 10) = *(_BYTE *)(a2 + 10);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  sub_100031FEC(v4, v5);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  sub_10000E614(v6, v7);
  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  sub_100031FEC(v9, v8);
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = v9;
  *(_QWORD *)(a1 + 40) = v8;
  sub_10000E614(v10, v11);
  return a1;
}

uint64_t assignWithTake for NANAttribute.Mesh(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_WORD *)(a1 + 4) = *(_WORD *)(a2 + 4);
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  *(_BYTE *)(a1 + 10) = *(_BYTE *)(a2 + 10);
  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  sub_10000E614(v4, v5);
  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  sub_10000E614(v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for NANAttribute.Mesh(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 48))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 10);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for NANAttribute.Mesh(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 48) = 0;
    if (a2)
      *(_BYTE *)(result + 10) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for NANAttribute.Mesh()
{
  return &type metadata for NANAttribute.Mesh;
}

ValueMetadata *type metadata accessor for NANAttribute.FurtherServiceDiscovery()
{
  return &type metadata for NANAttribute.FurtherServiceDiscovery;
}

ValueMetadata *type metadata accessor for NANAttribute.FurtherAvailabilityMap()
{
  return &type metadata for NANAttribute.FurtherAvailabilityMap;
}

uint64_t sub_1001E4090(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_WORD *)(a1 + 4) = *(_WORD *)(a2 + 4);
  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  sub_100031FEC(v3, v4);
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  return a1;
}

uint64_t assignWithCopy for NANAttribute.Ranging(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  *(_BYTE *)(a1 + 3) = *(_BYTE *)(a2 + 3);
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
  *(_BYTE *)(a1 + 5) = *(_BYTE *)(a2 + 5);
  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  sub_100031FEC(v3, v4);
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  sub_10000E614(v5, v6);
  return a1;
}

uint64_t assignWithTake for NANAttribute.Ranging(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_WORD *)(a1 + 4) = *(_WORD *)(a2 + 4);
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  sub_10000E614(v3, v4);
  return a1;
}

ValueMetadata *type metadata accessor for NANAttribute.Ranging()
{
  return &type metadata for NANAttribute.Ranging;
}

ValueMetadata *type metadata accessor for NANAttribute.ClusterDiscovery()
{
  return &type metadata for NANAttribute.ClusterDiscovery;
}

uint64_t initializeBufferWithCopyOfBuffer for NANAttribute.DeviceCapability(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_DWORD *)(result + 7) = *(_DWORD *)((char *)a2 + 7);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for NANAttribute.DeviceCapability(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 11))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for NANAttribute.DeviceCapability(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_BYTE *)(result + 10) = 0;
    *(_WORD *)(result + 8) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 11) = v3;
  return result;
}

ValueMetadata *type metadata accessor for NANAttribute.DeviceCapability()
{
  return &type metadata for NANAttribute.DeviceCapability;
}

ValueMetadata *type metadata accessor for NANAttribute.DeviceCapability.CommittedDiscoveryWindowInformation()
{
  return &type metadata for NANAttribute.DeviceCapability.CommittedDiscoveryWindowInformation;
}

ValueMetadata *type metadata accessor for NANAttribute.DeviceCapability.OperationMode()
{
  return &type metadata for NANAttribute.DeviceCapability.OperationMode;
}

ValueMetadata *type metadata accessor for NANAttribute.DeviceCapability.AnntenaCount()
{
  return &type metadata for NANAttribute.DeviceCapability.AnntenaCount;
}

ValueMetadata *type metadata accessor for NANAttribute.DeviceCapability.Capabilities()
{
  return &type metadata for NANAttribute.DeviceCapability.Capabilities;
}

ValueMetadata *type metadata accessor for NANAttribute.DeviceCapabilityExtension()
{
  return &type metadata for NANAttribute.DeviceCapabilityExtension;
}

ValueMetadata *type metadata accessor for NANAttribute.DeviceCapabilityExtension.RegulatoryInformationForSixGHz()
{
  return &type metadata for NANAttribute.DeviceCapabilityExtension.RegulatoryInformationForSixGHz;
}

uint64_t destroy for NANAttribute.Datapath(uint64_t result)
{
  if (*(_BYTE *)(result + 24) != 4)
    return sub_10000E614(*(_QWORD *)(result + 32), *(_QWORD *)(result + 40));
  return result;
}

uint64_t initializeWithCopy for NANAttribute.Datapath(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_WORD *)(a1 + 1) = *(_WORD *)(a2 + 1);
  *(_DWORD *)(a1 + 3) = *(_DWORD *)(a2 + 3);
  *(_WORD *)(a1 + 7) = *(_WORD *)(a2 + 7);
  *(_DWORD *)(a1 + 9) = *(_DWORD *)(a2 + 9);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 13) = *(_DWORD *)(a2 + 13);
  v3 = *(unsigned __int8 *)(a2 + 24);
  if (v3 == 4)
  {
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  }
  else
  {
    *(_BYTE *)(a1 + 24) = v3;
    v4 = *(_QWORD *)(a2 + 32);
    v5 = *(_QWORD *)(a2 + 40);
    sub_100031FEC(v4, v5);
    *(_QWORD *)(a1 + 32) = v4;
    *(_QWORD *)(a1 + 40) = v5;
  }
  return a1;
}

uint64_t assignWithCopy for NANAttribute.Datapath(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  __int128 *v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  *(_BYTE *)(a1 + 3) = *(_BYTE *)(a2 + 3);
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
  *(_BYTE *)(a1 + 5) = *(_BYTE *)(a2 + 5);
  *(_BYTE *)(a1 + 6) = *(_BYTE *)(a2 + 6);
  *(_BYTE *)(a1 + 7) = *(_BYTE *)(a2 + 7);
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_BYTE *)(a1 + 9) = *(_BYTE *)(a2 + 9);
  *(_BYTE *)(a1 + 10) = *(_BYTE *)(a2 + 10);
  *(_WORD *)(a1 + 11) = *(_WORD *)(a2 + 11);
  v3 = *(_DWORD *)(a2 + 13);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 13) = v3;
  v4 = a1 + 24;
  v6 = (__int128 *)(a2 + 24);
  v5 = *(unsigned __int8 *)(a2 + 24);
  if (*(_BYTE *)(a1 + 24) == 4)
  {
    if (v5 == 4)
    {
      v7 = *v6;
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *(_OWORD *)v4 = v7;
    }
    else
    {
      *(_BYTE *)(a1 + 24) = v5;
      v9 = *(_QWORD *)(a2 + 32);
      v10 = *(_QWORD *)(a2 + 40);
      sub_100031FEC(v9, v10);
      *(_QWORD *)(a1 + 32) = v9;
      *(_QWORD *)(a1 + 40) = v10;
    }
  }
  else if (v5 == 4)
  {
    sub_100186E18(a1 + 24);
    v8 = *((_QWORD *)v6 + 2);
    *(_OWORD *)v4 = *v6;
    *(_QWORD *)(v4 + 16) = v8;
  }
  else
  {
    *(_BYTE *)(a1 + 24) = v5;
    v11 = *(_QWORD *)(a2 + 32);
    v12 = *(_QWORD *)(a2 + 40);
    sub_100031FEC(v11, v12);
    v13 = *(_QWORD *)(a1 + 32);
    v14 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 32) = v11;
    *(_QWORD *)(a1 + 40) = v12;
    sub_10000E614(v13, v14);
  }
  return a1;
}

uint64_t assignWithTake for NANAttribute.Datapath(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_DWORD *)(a1 + 9) = *(_DWORD *)(a2 + 9);
  *(_DWORD *)(a1 + 13) = *(_DWORD *)(a2 + 13);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  v3 = a1 + 24;
  v5 = a2 + 24;
  v4 = *(unsigned __int8 *)(a2 + 24);
  if (*(_BYTE *)(a1 + 24) != 4)
  {
    if (v4 != 4)
    {
      *(_BYTE *)(a1 + 24) = v4;
      v6 = *(_QWORD *)(a1 + 32);
      v7 = *(_QWORD *)(a1 + 40);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      sub_10000E614(v6, v7);
      return a1;
    }
    sub_100186E18(a1 + 24);
  }
  *(_OWORD *)v3 = *(_OWORD *)v5;
  *(_QWORD *)(v3 + 16) = *(_QWORD *)(v5 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for NANAttribute.Datapath(uint64_t a1, unsigned int a2)
{
  int v3;
  int v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFC && *(_BYTE *)(a1 + 48))
    return (*(_DWORD *)a1 + 252);
  if (*(unsigned __int8 *)(a1 + 24) <= 4u)
    v3 = 4;
  else
    v3 = *(unsigned __int8 *)(a1 + 24);
  v4 = v3 - 5;
  if (*(unsigned __int8 *)(a1 + 24) < 4u)
    v5 = -1;
  else
    v5 = v4;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for NANAttribute.Datapath(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 252;
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 48) = 0;
    if (a2)
      *(_BYTE *)(result + 24) = a2 + 4;
  }
  return result;
}

ValueMetadata *type metadata accessor for NANAttribute.Datapath()
{
  return &type metadata for NANAttribute.Datapath;
}

ValueMetadata *type metadata accessor for NANAttribute.Datapath.AttributeType()
{
  return &type metadata for NANAttribute.Datapath.AttributeType;
}

ValueMetadata *type metadata accessor for NANAttribute.Datapath.Status()
{
  return &type metadata for NANAttribute.Datapath.Status;
}

ValueMetadata *type metadata accessor for NANAttribute.Datapath.Control()
{
  return &type metadata for NANAttribute.Datapath.Control;
}

uint64_t destroy for NANAttribute.DatapathExtension(uint64_t result)
{
  uint64_t v1;
  unint64_t v2;

  v1 = result;
  v2 = *(_QWORD *)(result + 32);
  if (v2 >> 60 != 15)
    result = sub_10000E614(*(_QWORD *)(result + 24), v2);
  if (*(_BYTE *)(v1 + 40) != 4)
    return sub_10000E614(*(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56));
  return result;
}

uint64_t initializeWithCopy for NANAttribute.DatapathExtension(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_WORD *)(a1 + 1) = *(_WORD *)(a2 + 1);
  *(_DWORD *)(a1 + 3) = *(_DWORD *)(a2 + 3);
  *(_WORD *)(a1 + 7) = *(_WORD *)(a2 + 7);
  *(_DWORD *)(a1 + 9) = *(_DWORD *)(a2 + 9);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 13) = *(_DWORD *)(a2 + 13);
  v4 = (uint64_t *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 32);
  if (v5 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 24) = *(_OWORD *)v4;
  }
  else
  {
    v6 = *v4;
    sub_100031FEC(*v4, *(_QWORD *)(a2 + 32));
    *(_QWORD *)(a1 + 24) = v6;
    *(_QWORD *)(a1 + 32) = v5;
  }
  v7 = *(unsigned __int8 *)(a2 + 40);
  if (v7 == 4)
  {
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  }
  else
  {
    *(_BYTE *)(a1 + 40) = v7;
    v9 = *(_QWORD *)(a2 + 48);
    v8 = *(_QWORD *)(a2 + 56);
    sub_100031FEC(v9, v8);
    *(_QWORD *)(a1 + 48) = v9;
    *(_QWORD *)(a1 + 56) = v8;
  }
  return a1;
}

uint64_t assignWithCopy for NANAttribute.DatapathExtension(uint64_t a1, uint64_t a2)
{
  int v4;
  _OWORD *v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  __int128 *v12;
  uint64_t v13;
  __int128 *v14;
  __int128 v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  *(_BYTE *)(a1 + 3) = *(_BYTE *)(a2 + 3);
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
  *(_BYTE *)(a1 + 5) = *(_BYTE *)(a2 + 5);
  *(_BYTE *)(a1 + 6) = *(_BYTE *)(a2 + 6);
  *(_BYTE *)(a1 + 7) = *(_BYTE *)(a2 + 7);
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_BYTE *)(a1 + 9) = *(_BYTE *)(a2 + 9);
  *(_BYTE *)(a1 + 10) = *(_BYTE *)(a2 + 10);
  *(_WORD *)(a1 + 11) = *(_WORD *)(a2 + 11);
  v4 = *(_DWORD *)(a2 + 13);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 13) = v4;
  v5 = (_OWORD *)(a1 + 24);
  v6 = (uint64_t *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  if (*(_QWORD *)(a1 + 32) >> 60 == 15)
  {
    if (v7 >> 60 != 15)
    {
      v8 = *v6;
      sub_100031FEC(*v6, *(_QWORD *)(a2 + 32));
      *(_QWORD *)(a1 + 24) = v8;
      *(_QWORD *)(a1 + 32) = v7;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v7 >> 60 == 15)
  {
    sub_1001E48E4(a1 + 24);
LABEL_6:
    *v5 = *(_OWORD *)v6;
    goto LABEL_8;
  }
  v9 = *v6;
  sub_100031FEC(*v6, *(_QWORD *)(a2 + 32));
  v10 = *(_QWORD *)(a1 + 24);
  v11 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = v9;
  *(_QWORD *)(a1 + 32) = v7;
  sub_10000E614(v10, v11);
LABEL_8:
  v12 = (__int128 *)(a1 + 40);
  v14 = (__int128 *)(a2 + 40);
  v13 = *(unsigned __int8 *)(a2 + 40);
  if (*(_BYTE *)(a1 + 40) == 4)
  {
    if (v13 == 4)
    {
      v15 = *v14;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
      *v12 = v15;
    }
    else
    {
      *(_BYTE *)(a1 + 40) = v13;
      v18 = *(_QWORD *)(a2 + 48);
      v17 = *(_QWORD *)(a2 + 56);
      sub_100031FEC(v18, v17);
      *(_QWORD *)(a1 + 48) = v18;
      *(_QWORD *)(a1 + 56) = v17;
    }
  }
  else if (v13 == 4)
  {
    sub_100186E18(a1 + 40);
    v16 = *(_QWORD *)(a2 + 56);
    *v12 = *v14;
    *(_QWORD *)(a1 + 56) = v16;
  }
  else
  {
    *(_BYTE *)(a1 + 40) = v13;
    v20 = *(_QWORD *)(a2 + 48);
    v19 = *(_QWORD *)(a2 + 56);
    sub_100031FEC(v20, v19);
    v21 = *(_QWORD *)(a1 + 48);
    v22 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 48) = v20;
    *(_QWORD *)(a1 + 56) = v19;
    sub_10000E614(v21, v22);
  }
  return a1;
}

uint64_t sub_1001E48E4(uint64_t a1)
{
  destroy for NANServiceName.Hash(a1);
  return a1;
}

uint64_t assignWithTake for NANAttribute.DatapathExtension(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  _OWORD *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_DWORD *)(a1 + 9) = *(_DWORD *)(a2 + 9);
  *(_DWORD *)(a1 + 13) = *(_DWORD *)(a2 + 13);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  v4 = (_OWORD *)(a1 + 24);
  v5 = (_OWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a1 + 32);
  if (v6 >> 60 == 15)
    goto LABEL_4;
  v7 = *(_QWORD *)(a2 + 32);
  if (v7 >> 60 == 15)
  {
    sub_1001E48E4(a1 + 24);
LABEL_4:
    *v4 = *v5;
    goto LABEL_6;
  }
  v8 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)v5;
  *(_QWORD *)(a1 + 32) = v7;
  sub_10000E614(v8, v6);
LABEL_6:
  v9 = *(unsigned __int8 *)(a2 + 40);
  if (*(_BYTE *)(a1 + 40) != 4)
  {
    if (v9 != 4)
    {
      *(_BYTE *)(a1 + 40) = v9;
      v10 = *(_QWORD *)(a1 + 48);
      v11 = *(_QWORD *)(a1 + 56);
      *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
      sub_10000E614(v10, v11);
      return a1;
    }
    sub_100186E18(a1 + 40);
  }
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  return a1;
}

uint64_t getEnumTagSinglePayload for NANAttribute.DatapathExtension(uint64_t a1, unsigned int a2)
{
  int v3;
  int v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFC && *(_BYTE *)(a1 + 64))
    return (*(_DWORD *)a1 + 252);
  if (*(unsigned __int8 *)(a1 + 40) <= 4u)
    v3 = 4;
  else
    v3 = *(unsigned __int8 *)(a1 + 40);
  v4 = v3 - 5;
  if (*(unsigned __int8 *)(a1 + 40) < 4u)
    v5 = -1;
  else
    v5 = v4;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for NANAttribute.DatapathExtension(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 252;
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if (a3 >= 0xFC)
      *(_BYTE *)(result + 64) = 0;
    if (a2)
      *(_BYTE *)(result + 40) = a2 + 4;
  }
  return result;
}

ValueMetadata *type metadata accessor for NANAttribute.DatapathExtension()
{
  return &type metadata for NANAttribute.DatapathExtension;
}

ValueMetadata *type metadata accessor for NANAttribute.DatapathExtension.Control()
{
  return &type metadata for NANAttribute.DatapathExtension.Control;
}

ValueMetadata *type metadata accessor for NANAttribute.DatapathExtension.ServiceInfoType()
{
  return &type metadata for NANAttribute.DatapathExtension.ServiceInfoType;
}

uint64_t sub_1001E4AE4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_WORD *)(a1 + 2) = *(_WORD *)(a2 + 2);
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t assignWithCopy for NANAttribute.Availability(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_WORD *)(a1 + 2) = *(_WORD *)(a2 + 2);
  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t assignWithTake for NANAttribute.Availability(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_WORD *)(a1 + 2) = *(_WORD *)(a2 + 2);
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease(v3);
  return a1;
}

ValueMetadata *type metadata accessor for NANAttribute.Availability()
{
  return &type metadata for NANAttribute.Availability;
}

ValueMetadata *type metadata accessor for NANAttribute.Availability.Control()
{
  return &type metadata for NANAttribute.Availability.Control;
}

uint64_t sub_1001E4BCC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_WORD *)(a1 + 4) = *(_WORD *)(a2 + 4);
  *(_BYTE *)(a1 + 6) = *(_BYTE *)(a2 + 6);
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t assignWithCopy for NANAttribute.DataCluster(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  *(_BYTE *)(a1 + 3) = *(_BYTE *)(a2 + 3);
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
  *(_BYTE *)(a1 + 5) = *(_BYTE *)(a2 + 5);
  *(_BYTE *)(a1 + 6) = *(_BYTE *)(a2 + 6);
  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t assignWithTake for NANAttribute.DataCluster(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
  *(_WORD *)(a1 + 5) = *(_WORD *)(a2 + 5);
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease(v3);
  return a1;
}

ValueMetadata *type metadata accessor for NANAttribute.DataCluster()
{
  return &type metadata for NANAttribute.DataCluster;
}

ValueMetadata *type metadata accessor for NANAttribute.DataCluster.Control()
{
  return &type metadata for NANAttribute.DataCluster.Control;
}

uint64_t initializeWithCopy for NANAttribute.DeviceLink(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_WORD *)(a1 + 4) = *(_WORD *)(a2 + 4);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t assignWithCopy for NANAttribute.DeviceLink(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  *(_BYTE *)(a1 + 3) = *(_BYTE *)(a2 + 3);
  *(_WORD *)(a1 + 4) = *(_WORD *)(a2 + 4);
  v3 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  return a1;
}

uint64_t assignWithTake for NANAttribute.DeviceLink(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_WORD *)(a1 + 4) = *(_WORD *)(a2 + 4);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease(v3);
  return a1;
}

ValueMetadata *type metadata accessor for NANAttribute.DeviceLink()
{
  return &type metadata for NANAttribute.DeviceLink;
}

ValueMetadata *type metadata accessor for NANAttribute.DeviceLink.Control()
{
  return &type metadata for NANAttribute.DeviceLink.Control;
}

ValueMetadata *type metadata accessor for NANAttribute.DeviceLink.Control.SetupReason()
{
  return &type metadata for NANAttribute.DeviceLink.Control.SetupReason;
}

ValueMetadata *type metadata accessor for NANAttribute.DeviceLink.AttributeType()
{
  return &type metadata for NANAttribute.DeviceLink.AttributeType;
}

ValueMetadata *type metadata accessor for NANAttribute.DeviceLink.Status()
{
  return &type metadata for NANAttribute.DeviceLink.Status;
}

ValueMetadata *type metadata accessor for NANAttribute.DeviceLinkQoS()
{
  return &type metadata for NANAttribute.DeviceLinkQoS;
}

__n128 initializeWithCopy for NANAttribute.UnalignedSchedule(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 14) = *(_OWORD *)(a2 + 14);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for NANAttribute.UnalignedSchedule(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 30))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 29);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = (v3 ^ 0xFF) - 1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for NANAttribute.UnalignedSchedule(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_WORD *)(result + 28) = 0;
    *(_DWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 30) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 30) = 0;
    if (a2)
      *(_BYTE *)(result + 29) = ~(_BYTE)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for NANAttribute.UnalignedSchedule()
{
  return &type metadata for NANAttribute.UnalignedSchedule;
}

ValueMetadata *type metadata accessor for NANAttribute.UnalignedSchedule.UnalignedWindowOverwrite()
{
  return &type metadata for NANAttribute.UnalignedSchedule.UnalignedWindowOverwrite;
}

ValueMetadata *type metadata accessor for NANAttribute.UnalignedSchedule.UnalignedWindowControl()
{
  return &type metadata for NANAttribute.UnalignedSchedule.UnalignedWindowControl;
}

ValueMetadata *type metadata accessor for NANAttribute.UnalignedSchedule.UnalignedWindowControl.EntryType()
{
  return &type metadata for NANAttribute.UnalignedSchedule.UnalignedWindowControl.EntryType;
}

uint64_t initializeBufferWithCopyOfBuffer for NANAttribute.RangingInformation(uint64_t result, int *a2)
{
  int v2;

  v2 = *a2;
  *(_BYTE *)(result + 4) = *((_BYTE *)a2 + 4);
  *(_DWORD *)result = v2;
  return result;
}

ValueMetadata *type metadata accessor for NANAttribute.RangingInformation()
{
  return &type metadata for NANAttribute.RangingInformation;
}

ValueMetadata *type metadata accessor for NANAttribute.RangingInformation.LocationInformation()
{
  return &type metadata for NANAttribute.RangingInformation.LocationInformation;
}

uint64_t sub_1001E4F80(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;

  v3 = *(_DWORD *)(a2 + 4);
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = v3;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t assignWithCopy for NANAttribute.RangingSetup(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  *(_BYTE *)(a1 + 3) = *(_BYTE *)(a2 + 3);
  v3 = *(_DWORD *)(a2 + 4);
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_DWORD *)(a1 + 4) = v3;
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  return a1;
}

uint64_t assignWithTake for NANAttribute.RangingSetup(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;

  v3 = *(_DWORD *)(a2 + 4);
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = v3;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease(v4);
  return a1;
}

ValueMetadata *type metadata accessor for NANAttribute.RangingSetup()
{
  return &type metadata for NANAttribute.RangingSetup;
}

ValueMetadata *type metadata accessor for NANAttribute.RangingSetup.AttributeType()
{
  return &type metadata for NANAttribute.RangingSetup.AttributeType;
}

ValueMetadata *type metadata accessor for NANAttribute.RangingSetup.Status()
{
  return &type metadata for NANAttribute.RangingSetup.Status;
}

ValueMetadata *type metadata accessor for NANAttribute.RangingSetup.Control()
{
  return &type metadata for NANAttribute.RangingSetup.Control;
}

ValueMetadata *type metadata accessor for NANAttribute.RangingSetup.FineTimingMeasurementParameters()
{
  return &type metadata for NANAttribute.RangingSetup.FineTimingMeasurementParameters;
}

ValueMetadata *type metadata accessor for NANAttribute.ElementContainer()
{
  return &type metadata for NANAttribute.ElementContainer;
}

uint64_t getEnumTagSinglePayload for NANAttribute.ExtendedWLANInfrastructure(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 20))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 12);
  v4 = v3 >= 2;
  v5 = v3 - 2;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for NANAttribute.ExtendedWLANInfrastructure(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_DWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 20) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 20) = 0;
    if (a2)
      *(_BYTE *)(result + 12) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for NANAttribute.ExtendedWLANInfrastructure()
{
  return &type metadata for NANAttribute.ExtendedWLANInfrastructure;
}

ValueMetadata *type metadata accessor for NANAttribute.ExtendedP2POperation()
{
  return &type metadata for NANAttribute.ExtendedP2POperation;
}

ValueMetadata *type metadata accessor for NANAttribute.ExtendedIBSS()
{
  return &type metadata for NANAttribute.ExtendedIBSS;
}

uint64_t initializeWithCopy for NANAttribute.ExtendedMesh(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  unint64_t v5;

  v3 = *(_DWORD *)(a2 + 4);
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = v3;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_DWORD *)(a1 + 10) = *(_DWORD *)(a2 + 10);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  sub_100031FEC(v4, v5);
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  return a1;
}

uint64_t assignWithCopy for NANAttribute.ExtendedMesh(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  *(_BYTE *)(a1 + 3) = *(_BYTE *)(a2 + 3);
  *(_BYTE *)(a1 + 4) = *(_BYTE *)(a2 + 4);
  *(_BYTE *)(a1 + 5) = *(_BYTE *)(a2 + 5);
  *(_BYTE *)(a1 + 6) = *(_BYTE *)(a2 + 6);
  *(_BYTE *)(a1 + 7) = *(_BYTE *)(a2 + 7);
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_WORD *)(a1 + 10) = *(_WORD *)(a2 + 10);
  *(_WORD *)(a1 + 12) = *(_WORD *)(a2 + 12);
  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  sub_100031FEC(v3, v4);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = v4;
  sub_10000E614(v5, v6);
  return a1;
}

uint64_t assignWithTake for NANAttribute.ExtendedMesh(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_DWORD *)(a1 + 10) = *(_DWORD *)(a2 + 10);
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  sub_10000E614(v3, v4);
  return a1;
}

ValueMetadata *type metadata accessor for NANAttribute.ExtendedMesh()
{
  return &type metadata for NANAttribute.ExtendedMesh;
}

ValueMetadata *type metadata accessor for NANAttribute.FineTimingMeasurementRangeReport()
{
  return &type metadata for NANAttribute.FineTimingMeasurementRangeReport;
}

_QWORD *initializeBufferWithCopyOfBuffer for NANAttribute.FineTimingMeasurementRangeReport.Entry(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_QWORD *)((char *)result + 6) = *(uint64_t *)((char *)a2 + 6);
  *result = v2;
  return result;
}

ValueMetadata *type metadata accessor for NANAttribute.FineTimingMeasurementRangeReport.Entry()
{
  return &type metadata for NANAttribute.FineTimingMeasurementRangeReport.Entry;
}

ValueMetadata *type metadata accessor for NANAttribute.CipherSuiteInformation()
{
  return &type metadata for NANAttribute.CipherSuiteInformation;
}

ValueMetadata *type metadata accessor for NANAttribute.CipherSuiteInformation.Capabilities()
{
  return &type metadata for NANAttribute.CipherSuiteInformation.Capabilities;
}

ValueMetadata *type metadata accessor for NANAttribute.CipherSuiteInformation.Capabilities.ReplayCounters()
{
  return &type metadata for NANAttribute.CipherSuiteInformation.Capabilities.ReplayCounters;
}

ValueMetadata *type metadata accessor for NANAttribute.CipherSuiteInformation.Capabilities.GroupKeySupport()
{
  return &type metadata for NANAttribute.CipherSuiteInformation.Capabilities.GroupKeySupport;
}

ValueMetadata *type metadata accessor for NANAttribute.CipherSuiteInformation.Capabilities.BroadcastIntegrityProtocol()
{
  return &type metadata for NANAttribute.CipherSuiteInformation.Capabilities.BroadcastIntegrityProtocol;
}

uint64_t getEnumTagSinglePayload for NANAttribute.CipherSuiteInformation.CipherSuite(unsigned __int16 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF9)
    goto LABEL_17;
  if (a2 + 65287 <= 0xFFFEFFFF)
    v2 = 2;
  else
    v2 = 4;
  if (a2 + 65287 < 0xFF0000)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 16)) - 65287;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
      return (*a1 | (v4 << 16)) - 65287;
    }
    v4 = *((unsigned __int8 *)a1 + 2);
    if (*((_BYTE *)a1 + 2))
      return (*a1 | (v4 << 16)) - 65287;
  }
LABEL_17:
  v6 = *(unsigned __int8 *)a1;
  v7 = v6 >= 8;
  v8 = v6 - 8;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for NANAttribute.CipherSuiteInformation.CipherSuite(_WORD *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 65287 <= 0xFFFEFFFF)
    v3 = 2;
  else
    v3 = 4;
  if (a3 + 65287 < 0xFF0000)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_1001E5438 + 4 * byte_100352679[v4]))();
  *a1 = a2 - 249;
  return ((uint64_t (*)(void))((char *)sub_1001E546C + 4 * byte_100352674[v4]))();
}

uint64_t sub_1001E546C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 2) = v1;
  return result;
}

uint64_t sub_1001E5474(uint64_t result, int a2)
{
  *(_WORD *)(result + 2) = 0;
  if (a2)
    JUMPOUT(0x1001E547CLL);
  return result;
}

uint64_t sub_1001E5488(uint64_t result, int a2)
{
  *(_DWORD *)(result + 2) = 0;
  if (!a2)
    JUMPOUT(0x1001E5490);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_1001E5494(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_1001E549C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 2) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NANAttribute.CipherSuiteInformation.CipherSuite()
{
  return &type metadata for NANAttribute.CipherSuiteInformation.CipherSuite;
}

ValueMetadata *type metadata accessor for NANAttribute.SecurityContextInformation()
{
  return &type metadata for NANAttribute.SecurityContextInformation;
}

uint64_t assignWithCopy for NANAttribute.SecurityContextInformation.SecurityContextIdentifier(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  sub_100031FEC(v3, v4);
  v5 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  sub_10000E614(v5, v6);
  return a1;
}

ValueMetadata *type metadata accessor for NANAttribute.SecurityContextInformation.SecurityContextIdentifier()
{
  return &type metadata for NANAttribute.SecurityContextInformation.SecurityContextIdentifier;
}

ValueMetadata *type metadata accessor for NANAttribute.SecurityContextInformation.SecurityContextIdentifier.IdentifierType()
{
  return &type metadata for NANAttribute.SecurityContextInformation.SecurityContextIdentifier.IdentifierType;
}

ValueMetadata *type metadata accessor for NANAttribute.SharedKeyDescriptor()
{
  return &type metadata for NANAttribute.SharedKeyDescriptor;
}

uint64_t initializeWithCopy for NANAttribute.MulticastScheduleChange(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_BYTE *)(a1 + 18) = *(_BYTE *)(a2 + 18);
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t assignWithCopy for NANAttribute.MulticastScheduleChange(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_BYTE *)(a1 + 18) = *(_BYTE *)(a2 + 18);
  v3 = *(_QWORD *)(a2 + 24);
  v4 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t assignWithTake for NANAttribute.MulticastScheduleChange(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_BYTE *)(a1 + 18) = *(_BYTE *)(a2 + 18);
  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease(v3);
  return a1;
}

ValueMetadata *type metadata accessor for NANAttribute.MulticastScheduleChange()
{
  return &type metadata for NANAttribute.MulticastScheduleChange;
}

ValueMetadata *type metadata accessor for NANAttribute.MulticastScheduleChange.Control()
{
  return &type metadata for NANAttribute.MulticastScheduleChange.Control;
}

ValueMetadata *type metadata accessor for NANAttribute.PublicAvailability()
{
  return &type metadata for NANAttribute.PublicAvailability;
}

ValueMetadata *type metadata accessor for NANAttribute.PairingIdentityResolution()
{
  return &type metadata for NANAttribute.PairingIdentityResolution;
}

ValueMetadata *type metadata accessor for NANAttribute.PairingIdentityResolution.CipherVersion()
{
  return &type metadata for NANAttribute.PairingIdentityResolution.CipherVersion;
}

uint64_t destroy for NANAttribute.PairingBootstrapping(uint64_t result)
{
  unint64_t v1;

  v1 = *(_QWORD *)(result + 32);
  if (v1 >> 60 != 15)
    return sub_10000E614(*(_QWORD *)(result + 24), v1);
  return result;
}

uint64_t initializeWithCopy for NANAttribute.PairingBootstrapping(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  _OWORD *v5;
  unint64_t v6;
  __int128 v7;
  uint64_t v8;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_WORD *)(a1 + 1) = *(_WORD *)(a2 + 1);
  v4 = (_OWORD *)(a1 + 8);
  v5 = (_OWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 32);
  if (v6 >> 60 == 15)
  {
    v7 = *(_OWORD *)(a2 + 24);
    *v4 = *v5;
    *(_OWORD *)(a1 + 24) = v7;
  }
  else
  {
    *(_QWORD *)v4 = *(_QWORD *)v5;
    *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
    v8 = *(_QWORD *)(a2 + 24);
    sub_100031FEC(v8, v6);
    *(_QWORD *)(a1 + 24) = v8;
    *(_QWORD *)(a1 + 32) = v6;
  }
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  return a1;
}

uint64_t assignWithCopy for NANAttribute.PairingBootstrapping(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  _OWORD *v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  v4 = (_OWORD *)(a1 + 8);
  v5 = (_OWORD *)(a2 + 8);
  if (*(_QWORD *)(a1 + 32) >> 60 == 15)
  {
    if (*(_QWORD *)(a2 + 32) >> 60 == 15)
    {
      v6 = *(_OWORD *)(a2 + 24);
      *v4 = *v5;
      *(_OWORD *)(a1 + 24) = v6;
    }
    else
    {
      v8 = *(_QWORD *)v5;
      *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
      *(_QWORD *)v4 = v8;
      v9 = *(_QWORD *)(a2 + 24);
      v10 = *(_QWORD *)(a2 + 32);
      sub_100031FEC(v9, v10);
      *(_QWORD *)(a1 + 24) = v9;
      *(_QWORD *)(a1 + 32) = v10;
    }
  }
  else if (*(_QWORD *)(a2 + 32) >> 60 == 15)
  {
    sub_1001E581C(a1 + 8);
    v7 = v5[1];
    *v4 = *v5;
    v4[1] = v7;
  }
  else
  {
    v11 = *(_QWORD *)v5;
    *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
    *(_QWORD *)v4 = v11;
    v12 = *(_QWORD *)(a2 + 24);
    v13 = *(_QWORD *)(a2 + 32);
    sub_100031FEC(v12, v13);
    v14 = *(_QWORD *)(a1 + 24);
    v15 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 24) = v12;
    *(_QWORD *)(a1 + 32) = v13;
    sub_10000E614(v14, v15);
  }
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  return a1;
}

uint64_t sub_1001E581C(uint64_t a1)
{
  sub_10000E614(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  return a1;
}

uint64_t assignWithTake for NANAttribute.PairingBootstrapping(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __int128 v8;
  uint64_t v9;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_WORD *)(a1 + 1) = *(_WORD *)(a2 + 1);
  v4 = a1 + 8;
  v5 = a2 + 8;
  v6 = *(_QWORD *)(a1 + 32);
  if (v6 >> 60 != 15)
  {
    v7 = *(_QWORD *)(a2 + 32);
    if (v7 >> 60 != 15)
    {
      *(_QWORD *)v4 = *(_QWORD *)v5;
      *(_BYTE *)(a1 + 16) = *(_BYTE *)(v5 + 8);
      v9 = *(_QWORD *)(a1 + 24);
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 32) = v7;
      sub_10000E614(v9, v6);
      goto LABEL_6;
    }
    sub_1001E581C(a1 + 8);
  }
  v8 = *(_OWORD *)(v5 + 16);
  *(_OWORD *)v4 = *(_OWORD *)v5;
  *(_OWORD *)(v4 + 16) = v8;
LABEL_6:
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for NANAttribute.PairingBootstrapping(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xF3 && *(_BYTE *)(a1 + 42))
    return (*(_DWORD *)a1 + 243);
  v3 = *(unsigned __int8 *)(a1 + 2);
  v4 = v3 >= 0xE;
  v5 = v3 - 14;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for NANAttribute.PairingBootstrapping(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF2)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 40) = 0;
    *(_QWORD *)result = a2 - 243;
    if (a3 >= 0xF3)
      *(_BYTE *)(result + 42) = 1;
  }
  else
  {
    if (a3 >= 0xF3)
      *(_BYTE *)(result + 42) = 0;
    if (a2)
      *(_BYTE *)(result + 2) = a2 + 13;
  }
  return result;
}

ValueMetadata *type metadata accessor for NANAttribute.PairingBootstrapping()
{
  return &type metadata for NANAttribute.PairingBootstrapping;
}

ValueMetadata *type metadata accessor for NANAttribute.PairingBootstrapping.PairingType()
{
  return &type metadata for NANAttribute.PairingBootstrapping.PairingType;
}

ValueMetadata *type metadata accessor for NANAttribute.PairingBootstrapping.Status()
{
  return &type metadata for NANAttribute.PairingBootstrapping.Status;
}

ValueMetadata *type metadata accessor for NANAttribute.PairingBootstrapping.Method()
{
  return &type metadata for NANAttribute.PairingBootstrapping.Method;
}

uint64_t initializeWithCopy for NANAttribute.PairingBootstrapping.Comeback(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  sub_100031FEC(v3, v4);
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = v4;
  return a1;
}

uint64_t assignWithCopy for NANAttribute.PairingBootstrapping.Comeback(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v3 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)a1 = v3;
  v4 = a2[2];
  v5 = a2[3];
  sub_100031FEC(v4, v5);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  sub_10000E614(v6, v7);
  return a1;
}

uint64_t assignWithTake for NANAttribute.PairingBootstrapping.Comeback(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  sub_10000E614(v3, v4);
  return a1;
}

ValueMetadata *type metadata accessor for NANAttribute.PairingBootstrapping.Comeback()
{
  return &type metadata for NANAttribute.PairingBootstrapping.Comeback;
}

uint64_t sub_1001E5AB8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;

  *(_WORD *)a1 = *(_WORD *)a2;
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  sub_100031FEC(v3, v4);
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  return a1;
}

ValueMetadata *type metadata accessor for NANAttribute.VendorSpecific()
{
  return &type metadata for NANAttribute.VendorSpecific;
}

_QWORD *initializeBufferWithCopyOfBuffer for NANAttribute.CustomDeviceInformation(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  void *v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  const void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  const void *v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int (*v44)(const void *, uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _OWORD *v48;
  _OWORD *v49;

  v3 = (_QWORD *)a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v15 = *a2;
    *v3 = *a2;
    v3 = (_QWORD *)(v15 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(_WORD *)a1 = *(_WORD *)a2;
    *(_DWORD *)(a1 + 4) = *((_DWORD *)a2 + 1);
    v5 = *(int *)(a3 + 28);
    v6 = a1 + v5;
    v7 = (uint64_t)a2 + v5;
    *(_BYTE *)v6 = *((_BYTE *)a2 + v5);
    *(_WORD *)(v6 + 1) = *(_WORD *)((char *)a2 + v5 + 1);
    v8 = (int *)type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
    v9 = v8[6];
    v10 = (void *)(v6 + v9);
    v11 = (const void *)(v7 + v9);
    v12 = type metadata accessor for P256.KeyAgreement.PublicKey(0);
    v13 = *(_QWORD *)(v12 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
    {
      v14 = sub_100012C44((uint64_t *)&unk_10040D200);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v13 + 16))(v10, v11, v12);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
    }
    v16 = v8[7];
    v17 = v6 + v16;
    v18 = (uint64_t *)(v7 + v16);
    v19 = v18[1];
    if (v19 >> 60 == 15)
    {
      *(_OWORD *)v17 = *(_OWORD *)v18;
    }
    else
    {
      v20 = *v18;
      sub_100031FEC(*v18, v18[1]);
      *(_QWORD *)v17 = v20;
      *(_QWORD *)(v17 + 8) = v19;
    }
    v21 = v8[8];
    v22 = v6 + v21;
    v23 = (uint64_t *)(v7 + v21);
    v24 = v23[1];
    if (v24 >> 60 == 15)
    {
      *(_OWORD *)v22 = *(_OWORD *)v23;
    }
    else
    {
      v25 = *v23;
      sub_100031FEC(*v23, v23[1]);
      *(_QWORD *)v22 = v25;
      *(_QWORD *)(v22 + 8) = v24;
    }
    v26 = v8[9];
    v27 = v6 + v26;
    v28 = (uint64_t *)(v7 + v26);
    v29 = v28[1];
    if (v29 >> 60 == 15)
    {
      *(_OWORD *)v27 = *(_OWORD *)v28;
    }
    else
    {
      v30 = *v28;
      sub_100031FEC(*v28, v28[1]);
      *(_QWORD *)v27 = v30;
      *(_QWORD *)(v27 + 8) = v29;
    }
    v31 = v8[10];
    v32 = (void *)(v6 + v31);
    v33 = (const void *)(v7 + v31);
    v34 = type metadata accessor for UUID(0);
    v35 = *(_QWORD *)(v34 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34))
    {
      v36 = sub_100012C44(&qword_10040E1F0);
      memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v35 + 16))(v32, v33, v34);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
    }
    v37 = v8[11];
    v38 = *(_QWORD *)(v7 + v37);
    *(_QWORD *)(v6 + v37) = v38;
    v39 = v8[12];
    v40 = (void *)(v6 + v39);
    v41 = (const void *)(v7 + v39);
    v42 = type metadata accessor for NANInternetSharingStatistics.Requester(0);
    v43 = *(_QWORD *)(v42 - 8);
    v44 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v43 + 48);
    swift_bridgeObjectRetain(v38);
    if (v44(v41, 1, v42))
    {
      v45 = sub_100012C44((uint64_t *)&unk_10040DAB0);
      memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
    }
    else
    {
      v46 = type metadata accessor for DispatchTimeInterval(0);
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v46 - 8) + 16))(v40, v41, v46);
      *((_BYTE *)v40 + *(int *)(v42 + 20)) = *((_BYTE *)v41 + *(int *)(v42 + 20));
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v43 + 56))(v40, 0, 1, v42);
    }
    v47 = v8[13];
    v48 = (_OWORD *)(v6 + v47);
    v49 = (_OWORD *)(v7 + v47);
    *v48 = *v49;
    *(_OWORD *)((char *)v48 + 9) = *(_OWORD *)((char *)v49 + 9);
  }
  return v3;
}

uint64_t destroy for NANAttribute.CustomDeviceInformation(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;

  v2 = a1 + *(int *)(a2 + 28);
  v3 = (int *)type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
  v4 = v2 + v3[6];
  v5 = type metadata accessor for P256.KeyAgreement.PublicKey(0);
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  v7 = (uint64_t *)(v2 + v3[7]);
  v8 = v7[1];
  if (v8 >> 60 != 15)
    sub_10000E614(*v7, v8);
  v9 = (uint64_t *)(v2 + v3[8]);
  v10 = v9[1];
  if (v10 >> 60 != 15)
    sub_10000E614(*v9, v10);
  v11 = (uint64_t *)(v2 + v3[9]);
  v12 = v11[1];
  if (v12 >> 60 != 15)
    sub_10000E614(*v11, v12);
  v13 = v2 + v3[10];
  v14 = type metadata accessor for UUID(0);
  v15 = *(_QWORD *)(v14 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v13, v14);
  swift_bridgeObjectRelease(*(_QWORD *)(v2 + v3[11]));
  v16 = v2 + v3[12];
  v17 = type metadata accessor for NANInternetSharingStatistics.Requester(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 48))(v16, 1, v17);
  if (!(_DWORD)result)
  {
    v19 = type metadata accessor for DispatchTimeInterval(0);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(v16, v19);
  }
  return result;
}

uint64_t initializeWithCopy for NANAttribute.CustomDeviceInformation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  void *v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  const void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  const void *v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int (*v42)(const void *, uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _OWORD *v46;
  _OWORD *v47;

  *(_WORD *)a1 = *(_WORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  v4 = *(int *)(a3 + 28);
  v5 = a1 + v4;
  v6 = a2 + v4;
  *(_BYTE *)v5 = *(_BYTE *)(a2 + v4);
  *(_WORD *)(v5 + 1) = *(_WORD *)(a2 + v4 + 1);
  v7 = (int *)type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
  v8 = v7[6];
  v9 = (void *)(v5 + v8);
  v10 = (const void *)(v6 + v8);
  v11 = type metadata accessor for P256.KeyAgreement.PublicKey(0);
  v12 = *(_QWORD *)(v11 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    v13 = sub_100012C44((uint64_t *)&unk_10040D200);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v12 + 16))(v9, v10, v11);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  v14 = v7[7];
  v15 = v5 + v14;
  v16 = (uint64_t *)(v6 + v14);
  v17 = v16[1];
  if (v17 >> 60 == 15)
  {
    *(_OWORD *)v15 = *(_OWORD *)v16;
  }
  else
  {
    v18 = *v16;
    sub_100031FEC(*v16, v16[1]);
    *(_QWORD *)v15 = v18;
    *(_QWORD *)(v15 + 8) = v17;
  }
  v19 = v7[8];
  v20 = v5 + v19;
  v21 = (uint64_t *)(v6 + v19);
  v22 = v21[1];
  if (v22 >> 60 == 15)
  {
    *(_OWORD *)v20 = *(_OWORD *)v21;
  }
  else
  {
    v23 = *v21;
    sub_100031FEC(*v21, v21[1]);
    *(_QWORD *)v20 = v23;
    *(_QWORD *)(v20 + 8) = v22;
  }
  v24 = v7[9];
  v25 = v5 + v24;
  v26 = (uint64_t *)(v6 + v24);
  v27 = v26[1];
  if (v27 >> 60 == 15)
  {
    *(_OWORD *)v25 = *(_OWORD *)v26;
  }
  else
  {
    v28 = *v26;
    sub_100031FEC(*v26, v26[1]);
    *(_QWORD *)v25 = v28;
    *(_QWORD *)(v25 + 8) = v27;
  }
  v29 = v7[10];
  v30 = (void *)(v5 + v29);
  v31 = (const void *)(v6 + v29);
  v32 = type metadata accessor for UUID(0);
  v33 = *(_QWORD *)(v32 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32))
  {
    v34 = sub_100012C44(&qword_10040E1F0);
    memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v33 + 16))(v30, v31, v32);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v32);
  }
  v35 = v7[11];
  v36 = *(_QWORD *)(v6 + v35);
  *(_QWORD *)(v5 + v35) = v36;
  v37 = v7[12];
  v38 = (void *)(v5 + v37);
  v39 = (const void *)(v6 + v37);
  v40 = type metadata accessor for NANInternetSharingStatistics.Requester(0);
  v41 = *(_QWORD *)(v40 - 8);
  v42 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v41 + 48);
  swift_bridgeObjectRetain(v36);
  if (v42(v39, 1, v40))
  {
    v43 = sub_100012C44((uint64_t *)&unk_10040DAB0);
    memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
  }
  else
  {
    v44 = type metadata accessor for DispatchTimeInterval(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v44 - 8) + 16))(v38, v39, v44);
    *((_BYTE *)v38 + *(int *)(v40 + 20)) = *((_BYTE *)v39 + *(int *)(v40 + 20));
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v41 + 56))(v38, 0, 1, v40);
  }
  v45 = v7[13];
  v46 = (_OWORD *)(v5 + v45);
  v47 = (_OWORD *)(v6 + v45);
  *v46 = *v47;
  *(_OWORD *)((char *)v46 + 9) = *(_OWORD *)((char *)v47 + 9);
  return a1;
}

uint64_t assignWithCopy for NANAttribute.CustomDeviceInformation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(void *, uint64_t, uint64_t);
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  void *v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(void *, uint64_t, uint64_t);
  int v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _BYTE *v54;
  _BYTE *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t (*v58)(_BYTE *, uint64_t, uint64_t);
  int v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _OWORD *v64;
  __int128 *v65;
  __int128 v66;
  uint64_t v68;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  v4 = *(int *)(a3 + 28);
  v5 = a1 + v4;
  v6 = a2 + v4;
  *(_BYTE *)v5 = *(_BYTE *)(a2 + v4);
  *(_WORD *)(v5 + 1) = *(_WORD *)(a2 + v4 + 1);
  v7 = (int *)type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
  v8 = v7[6];
  v9 = (void *)(v5 + v8);
  v10 = (void *)(v6 + v8);
  v11 = type metadata accessor for P256.KeyAgreement.PublicKey(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v12 + 48);
  v14 = v13(v9, 1, v11);
  v15 = v13(v10, 1, v11);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(void *, void *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v15)
  {
    (*(void (**)(void *, uint64_t))(v12 + 8))(v9, v11);
LABEL_6:
    v16 = sub_100012C44((uint64_t *)&unk_10040D200);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v12 + 24))(v9, v10, v11);
LABEL_7:
  v17 = v7[7];
  v18 = (uint64_t *)(v5 + v17);
  v19 = (uint64_t *)(v6 + v17);
  v20 = *(_QWORD *)(v6 + v17 + 8);
  if (*(_QWORD *)(v5 + v17 + 8) >> 60 == 15)
  {
    if (v20 >> 60 != 15)
    {
      v21 = *v19;
      sub_100031FEC(v21, v20);
      *v18 = v21;
      v18[1] = v20;
      goto LABEL_14;
    }
    goto LABEL_12;
  }
  if (v20 >> 60 == 15)
  {
    sub_1001725AC((uint64_t)v18);
LABEL_12:
    *(_OWORD *)v18 = *(_OWORD *)v19;
    goto LABEL_14;
  }
  v22 = *v19;
  sub_100031FEC(v22, v20);
  v23 = *v18;
  v24 = v18[1];
  *v18 = v22;
  v18[1] = v20;
  sub_10000E614(v23, v24);
LABEL_14:
  v25 = v7[8];
  v26 = (uint64_t *)(v5 + v25);
  v27 = (uint64_t *)(v6 + v25);
  v28 = *(_QWORD *)(v6 + v25 + 8);
  if (*(_QWORD *)(v5 + v25 + 8) >> 60 == 15)
  {
    if (v28 >> 60 != 15)
    {
      v29 = *v27;
      sub_100031FEC(v29, v28);
      *v26 = v29;
      v26[1] = v28;
      goto LABEL_21;
    }
    goto LABEL_19;
  }
  if (v28 >> 60 == 15)
  {
    sub_1001725AC((uint64_t)v26);
LABEL_19:
    *(_OWORD *)v26 = *(_OWORD *)v27;
    goto LABEL_21;
  }
  v30 = *v27;
  sub_100031FEC(v30, v28);
  v31 = *v26;
  v32 = v26[1];
  *v26 = v30;
  v26[1] = v28;
  sub_10000E614(v31, v32);
LABEL_21:
  v33 = v7[9];
  v34 = (uint64_t *)(v5 + v33);
  v35 = (uint64_t *)(v6 + v33);
  v36 = *(_QWORD *)(v6 + v33 + 8);
  if (*(_QWORD *)(v5 + v33 + 8) >> 60 == 15)
  {
    if (v36 >> 60 != 15)
    {
      v37 = *v35;
      sub_100031FEC(v37, v36);
      *v34 = v37;
      v34[1] = v36;
      goto LABEL_28;
    }
    goto LABEL_26;
  }
  if (v36 >> 60 == 15)
  {
    sub_1001725AC((uint64_t)v34);
LABEL_26:
    *(_OWORD *)v34 = *(_OWORD *)v35;
    goto LABEL_28;
  }
  v38 = *v35;
  sub_100031FEC(v38, v36);
  v39 = *v34;
  v40 = v34[1];
  *v34 = v38;
  v34[1] = v36;
  sub_10000E614(v39, v40);
LABEL_28:
  v41 = v7[10];
  v42 = (void *)(v5 + v41);
  v43 = (void *)(v6 + v41);
  v44 = type metadata accessor for UUID(0);
  v45 = *(_QWORD *)(v44 - 8);
  v46 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v45 + 48);
  v47 = v46(v42, 1, v44);
  v48 = v46(v43, 1, v44);
  if (v47)
  {
    if (!v48)
    {
      (*(void (**)(void *, void *, uint64_t))(v45 + 16))(v42, v43, v44);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v45 + 56))(v42, 0, 1, v44);
      goto LABEL_34;
    }
    goto LABEL_33;
  }
  if (v48)
  {
    (*(void (**)(void *, uint64_t))(v45 + 8))(v42, v44);
LABEL_33:
    v49 = sub_100012C44(&qword_10040E1F0);
    memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
    goto LABEL_34;
  }
  (*(void (**)(void *, void *, uint64_t))(v45 + 24))(v42, v43, v44);
LABEL_34:
  v50 = v7[11];
  v51 = *(_QWORD *)(v6 + v50);
  v52 = *(_QWORD *)(v5 + v50);
  *(_QWORD *)(v5 + v50) = v51;
  swift_bridgeObjectRetain(v51);
  swift_bridgeObjectRelease(v52);
  v53 = v7[12];
  v54 = (_BYTE *)(v5 + v53);
  v55 = (_BYTE *)(v6 + v53);
  v56 = type metadata accessor for NANInternetSharingStatistics.Requester(0);
  v57 = *(_QWORD *)(v56 - 8);
  v58 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v57 + 48);
  v59 = v58(v54, 1, v56);
  v60 = v58(v55, 1, v56);
  if (!v59)
  {
    if (!v60)
    {
      v68 = type metadata accessor for DispatchTimeInterval(0);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v68 - 8) + 24))(v54, v55, v68);
      v54[*(int *)(v56 + 20)] = v55[*(int *)(v56 + 20)];
      goto LABEL_40;
    }
    sub_100063824((uint64_t)v54, type metadata accessor for NANInternetSharingStatistics.Requester);
    goto LABEL_39;
  }
  if (v60)
  {
LABEL_39:
    v62 = sub_100012C44((uint64_t *)&unk_10040DAB0);
    memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v62 - 8) + 64));
    goto LABEL_40;
  }
  v61 = type metadata accessor for DispatchTimeInterval(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v61 - 8) + 16))(v54, v55, v61);
  v54[*(int *)(v56 + 20)] = v55[*(int *)(v56 + 20)];
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v57 + 56))(v54, 0, 1, v56);
LABEL_40:
  v63 = v7[13];
  v64 = (_OWORD *)(v5 + v63);
  v65 = (__int128 *)(v6 + v63);
  v66 = *v65;
  *(_OWORD *)((char *)v64 + 9) = *(__int128 *)((char *)v65 + 9);
  *v64 = v66;
  return a1;
}

uint64_t initializeWithTake for NANAttribute.CustomDeviceInformation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  void *v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  const void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _OWORD *v28;
  _OWORD *v29;

  *(_WORD *)a1 = *(_WORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  v4 = *(int *)(a3 + 28);
  v5 = a1 + v4;
  v6 = a2 + v4;
  *(_BYTE *)v5 = *(_BYTE *)(a2 + v4);
  *(_WORD *)(v5 + 1) = *(_WORD *)(a2 + v4 + 1);
  v7 = (int *)type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
  v8 = v7[6];
  v9 = (void *)(v5 + v8);
  v10 = (const void *)(v6 + v8);
  v11 = type metadata accessor for P256.KeyAgreement.PublicKey(0);
  v12 = *(_QWORD *)(v11 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    v13 = sub_100012C44((uint64_t *)&unk_10040D200);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v12 + 32))(v9, v10, v11);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  *(_OWORD *)(v5 + v7[7]) = *(_OWORD *)(v6 + v7[7]);
  *(_OWORD *)(v5 + v7[8]) = *(_OWORD *)(v6 + v7[8]);
  *(_OWORD *)(v5 + v7[9]) = *(_OWORD *)(v6 + v7[9]);
  v14 = v7[10];
  v15 = (void *)(v5 + v14);
  v16 = (const void *)(v6 + v14);
  v17 = type metadata accessor for UUID(0);
  v18 = *(_QWORD *)(v17 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
  {
    v19 = sub_100012C44(&qword_10040E1F0);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v18 + 32))(v15, v16, v17);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
  }
  *(_QWORD *)(v5 + v7[11]) = *(_QWORD *)(v6 + v7[11]);
  v20 = v7[12];
  v21 = (void *)(v5 + v20);
  v22 = (const void *)(v6 + v20);
  v23 = type metadata accessor for NANInternetSharingStatistics.Requester(0);
  v24 = *(_QWORD *)(v23 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
  {
    v25 = sub_100012C44((uint64_t *)&unk_10040DAB0);
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
  }
  else
  {
    v26 = type metadata accessor for DispatchTimeInterval(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v26 - 8) + 32))(v21, v22, v26);
    *((_BYTE *)v21 + *(int *)(v23 + 20)) = *((_BYTE *)v22 + *(int *)(v23 + 20));
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
  }
  v27 = v7[13];
  v28 = (_OWORD *)(v5 + v27);
  v29 = (_OWORD *)(v6 + v27);
  *v28 = *v29;
  *(_OWORD *)((char *)v28 + 9) = *(_OWORD *)((char *)v29 + 9);
  return a1;
}

uint64_t assignWithTake for NANAttribute.CustomDeviceInformation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(void *, uint64_t, uint64_t);
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t (*v40)(void *, uint64_t, uint64_t);
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _BYTE *v47;
  _BYTE *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t (*v51)(_BYTE *, uint64_t, uint64_t);
  int v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _OWORD *v57;
  _OWORD *v58;
  uint64_t v60;

  *(_WORD *)a1 = *(_WORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  v4 = *(int *)(a3 + 28);
  v5 = a1 + v4;
  v6 = a2 + v4;
  *(_BYTE *)v5 = *(_BYTE *)(a2 + v4);
  *(_WORD *)(v5 + 1) = *(_WORD *)(a2 + v4 + 1);
  v7 = (int *)type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
  v8 = v7[6];
  v9 = (void *)(v5 + v8);
  v10 = (void *)(v6 + v8);
  v11 = type metadata accessor for P256.KeyAgreement.PublicKey(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v12 + 48);
  v14 = v13(v9, 1, v11);
  v15 = v13(v10, 1, v11);
  if (v14)
  {
    if (!v15)
    {
      (*(void (**)(void *, void *, uint64_t))(v12 + 32))(v9, v10, v11);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v15)
  {
    (*(void (**)(void *, uint64_t))(v12 + 8))(v9, v11);
LABEL_6:
    v16 = sub_100012C44((uint64_t *)&unk_10040D200);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v12 + 40))(v9, v10, v11);
LABEL_7:
  v17 = v7[7];
  v18 = v5 + v17;
  v19 = v6 + v17;
  v20 = *(_QWORD *)(v5 + v17 + 8);
  if (v20 >> 60 == 15)
  {
LABEL_10:
    *(_OWORD *)v18 = *(_OWORD *)v19;
    goto LABEL_12;
  }
  v21 = *(_QWORD *)(v19 + 8);
  if (v21 >> 60 == 15)
  {
    sub_1001725AC(v18);
    goto LABEL_10;
  }
  v22 = *(_QWORD *)v18;
  *(_QWORD *)v18 = *(_QWORD *)v19;
  *(_QWORD *)(v18 + 8) = v21;
  sub_10000E614(v22, v20);
LABEL_12:
  v23 = v7[8];
  v24 = v5 + v23;
  v25 = v6 + v23;
  v26 = *(_QWORD *)(v5 + v23 + 8);
  if (v26 >> 60 == 15)
  {
LABEL_15:
    *(_OWORD *)v24 = *(_OWORD *)v25;
    goto LABEL_17;
  }
  v27 = *(_QWORD *)(v25 + 8);
  if (v27 >> 60 == 15)
  {
    sub_1001725AC(v24);
    goto LABEL_15;
  }
  v28 = *(_QWORD *)v24;
  *(_QWORD *)v24 = *(_QWORD *)v25;
  *(_QWORD *)(v24 + 8) = v27;
  sub_10000E614(v28, v26);
LABEL_17:
  v29 = v7[9];
  v30 = v5 + v29;
  v31 = v6 + v29;
  v32 = *(_QWORD *)(v5 + v29 + 8);
  if (v32 >> 60 == 15)
  {
LABEL_20:
    *(_OWORD *)v30 = *(_OWORD *)v31;
    goto LABEL_22;
  }
  v33 = *(_QWORD *)(v31 + 8);
  if (v33 >> 60 == 15)
  {
    sub_1001725AC(v30);
    goto LABEL_20;
  }
  v34 = *(_QWORD *)v30;
  *(_QWORD *)v30 = *(_QWORD *)v31;
  *(_QWORD *)(v30 + 8) = v33;
  sub_10000E614(v34, v32);
LABEL_22:
  v35 = v7[10];
  v36 = (void *)(v5 + v35);
  v37 = (void *)(v6 + v35);
  v38 = type metadata accessor for UUID(0);
  v39 = *(_QWORD *)(v38 - 8);
  v40 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v39 + 48);
  v41 = v40(v36, 1, v38);
  v42 = v40(v37, 1, v38);
  if (v41)
  {
    if (!v42)
    {
      (*(void (**)(void *, void *, uint64_t))(v39 + 32))(v36, v37, v38);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v38);
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  if (v42)
  {
    (*(void (**)(void *, uint64_t))(v39 + 8))(v36, v38);
LABEL_27:
    v43 = sub_100012C44(&qword_10040E1F0);
    memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
    goto LABEL_28;
  }
  (*(void (**)(void *, void *, uint64_t))(v39 + 40))(v36, v37, v38);
LABEL_28:
  v44 = v7[11];
  v45 = *(_QWORD *)(v5 + v44);
  *(_QWORD *)(v5 + v44) = *(_QWORD *)(v6 + v44);
  swift_bridgeObjectRelease(v45);
  v46 = v7[12];
  v47 = (_BYTE *)(v5 + v46);
  v48 = (_BYTE *)(v6 + v46);
  v49 = type metadata accessor for NANInternetSharingStatistics.Requester(0);
  v50 = *(_QWORD *)(v49 - 8);
  v51 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v50 + 48);
  v52 = v51(v47, 1, v49);
  v53 = v51(v48, 1, v49);
  if (!v52)
  {
    if (!v53)
    {
      v60 = type metadata accessor for DispatchTimeInterval(0);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v60 - 8) + 40))(v47, v48, v60);
      v47[*(int *)(v49 + 20)] = v48[*(int *)(v49 + 20)];
      goto LABEL_34;
    }
    sub_100063824((uint64_t)v47, type metadata accessor for NANInternetSharingStatistics.Requester);
    goto LABEL_33;
  }
  if (v53)
  {
LABEL_33:
    v55 = sub_100012C44((uint64_t *)&unk_10040DAB0);
    memcpy(v47, v48, *(_QWORD *)(*(_QWORD *)(v55 - 8) + 64));
    goto LABEL_34;
  }
  v54 = type metadata accessor for DispatchTimeInterval(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v54 - 8) + 32))(v47, v48, v54);
  v47[*(int *)(v49 + 20)] = v48[*(int *)(v49 + 20)];
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v50 + 56))(v47, 0, 1, v49);
LABEL_34:
  v56 = v7[13];
  v57 = (_OWORD *)(v5 + v56);
  v58 = (_OWORD *)(v6 + v56);
  *v57 = *v58;
  *(_OWORD *)((char *)v57 + 9) = *(_OWORD *)((char *)v58 + 9);
  return a1;
}

uint64_t getEnumTagSinglePayload for NANAttribute.CustomDeviceInformation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001E6E08);
}

uint64_t sub_1001E6E08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  uint64_t v8;

  if ((_DWORD)a2 == 250)
  {
    v4 = *(unsigned __int8 *)(a1 + 1);
    if (v4 >= 6)
      return v4 - 5;
    else
      return 0;
  }
  else
  {
    v8 = type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 28), a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for NANAttribute.CustomDeviceInformation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001E6E88);
}

uint64_t sub_1001E6E88(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 250)
  {
    *(_BYTE *)(result + 1) = a2 + 5;
  }
  else
  {
    v7 = type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 28), a2, a2, v7);
  }
  return result;
}

uint64_t sub_1001E6EF8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = (char *)&value witness table for Builtin.Int8 + 64;
  v4[1] = &unk_100359688;
  v4[2] = (char *)&value witness table for Builtin.Int32 + 64;
  result = type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(319);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 4, v4, a1 + 16);
    return 0;
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for NANAttribute.CustomDeviceInformation.CustomAttributes(uint64_t a1, uint64_t *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  void *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int (*v42)(char *, uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _OWORD *v46;
  _OWORD *v47;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    *(_WORD *)(a1 + 1) = *(_WORD *)((char *)a2 + 1);
    v7 = a3[6];
    v8 = (void *)(a1 + v7);
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for P256.KeyAgreement.PublicKey(0);
    v11 = *(_QWORD *)(v10 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
    {
      v12 = sub_100012C44((uint64_t *)&unk_10040D200);
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
    }
    v14 = a3[7];
    v15 = (char *)v4 + v14;
    v16 = (uint64_t *)((char *)a2 + v14);
    v17 = v16[1];
    if (v17 >> 60 == 15)
    {
      *(_OWORD *)v15 = *(_OWORD *)v16;
    }
    else
    {
      v18 = *v16;
      sub_100031FEC(*v16, v16[1]);
      *(_QWORD *)v15 = v18;
      *((_QWORD *)v15 + 1) = v17;
    }
    v19 = a3[8];
    v20 = (char *)v4 + v19;
    v21 = (uint64_t *)((char *)a2 + v19);
    v22 = v21[1];
    if (v22 >> 60 == 15)
    {
      *(_OWORD *)v20 = *(_OWORD *)v21;
    }
    else
    {
      v23 = *v21;
      sub_100031FEC(*v21, v21[1]);
      *(_QWORD *)v20 = v23;
      *((_QWORD *)v20 + 1) = v22;
    }
    v24 = a3[9];
    v25 = (char *)v4 + v24;
    v26 = (uint64_t *)((char *)a2 + v24);
    v27 = v26[1];
    if (v27 >> 60 == 15)
    {
      *(_OWORD *)v25 = *(_OWORD *)v26;
    }
    else
    {
      v28 = *v26;
      sub_100031FEC(*v26, v26[1]);
      *(_QWORD *)v25 = v28;
      *((_QWORD *)v25 + 1) = v27;
    }
    v29 = a3[10];
    v30 = (char *)v4 + v29;
    v31 = (char *)a2 + v29;
    v32 = type metadata accessor for UUID(0);
    v33 = *(_QWORD *)(v32 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32))
    {
      v34 = sub_100012C44(&qword_10040E1F0);
      memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v33 + 16))(v30, v31, v32);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v32);
    }
    v35 = a3[11];
    v36 = a3[12];
    v37 = *(uint64_t *)((char *)a2 + v35);
    *(_QWORD *)((char *)v4 + v35) = v37;
    v38 = (char *)v4 + v36;
    v39 = (char *)a2 + v36;
    v40 = type metadata accessor for NANInternetSharingStatistics.Requester(0);
    v41 = *(_QWORD *)(v40 - 8);
    v42 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48);
    swift_bridgeObjectRetain(v37);
    if (v42(v39, 1, v40))
    {
      v43 = sub_100012C44((uint64_t *)&unk_10040DAB0);
      memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
    }
    else
    {
      v44 = type metadata accessor for DispatchTimeInterval(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v44 - 8) + 16))(v38, v39, v44);
      v38[*(int *)(v40 + 20)] = v39[*(int *)(v40 + 20)];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v41 + 56))(v38, 0, 1, v40);
    }
    v45 = a3[13];
    v46 = (_OWORD *)((char *)v4 + v45);
    v47 = (_OWORD *)((char *)a2 + v45);
    *v46 = *v47;
    *(_OWORD *)((char *)v46 + 9) = *(_OWORD *)((char *)v47 + 9);
  }
  return v4;
}

uint64_t destroy for NANAttribute.CustomDeviceInformation.CustomAttributes(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;

  v4 = a1 + a2[6];
  v5 = type metadata accessor for P256.KeyAgreement.PublicKey(0);
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  v7 = (uint64_t *)(a1 + a2[7]);
  v8 = v7[1];
  if (v8 >> 60 != 15)
    sub_10000E614(*v7, v8);
  v9 = (uint64_t *)(a1 + a2[8]);
  v10 = v9[1];
  if (v10 >> 60 != 15)
    sub_10000E614(*v9, v10);
  v11 = (uint64_t *)(a1 + a2[9]);
  v12 = v11[1];
  if (v12 >> 60 != 15)
    sub_10000E614(*v11, v12);
  v13 = a1 + a2[10];
  v14 = type metadata accessor for UUID(0);
  v15 = *(_QWORD *)(v14 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v13, v14);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[11]));
  v16 = a1 + a2[12];
  v17 = type metadata accessor for NANInternetSharingStatistics.Requester(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 48))(v16, 1, v17);
  if (!(_DWORD)result)
  {
    v19 = type metadata accessor for DispatchTimeInterval(0);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(v16, v19);
  }
  return result;
}

uint64_t initializeWithCopy for NANAttribute.CustomDeviceInformation.CustomAttributes(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  const void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  const void *v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int (*v40)(const void *, uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _OWORD *v44;
  _OWORD *v45;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_WORD *)(a1 + 1) = *(_WORD *)(a2 + 1);
  v6 = a3[6];
  v7 = (void *)(a1 + v6);
  v8 = (const void *)(a2 + v6);
  v9 = type metadata accessor for P256.KeyAgreement.PublicKey(0);
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    v11 = sub_100012C44((uint64_t *)&unk_10040D200);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 16))(v7, v8, v9);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v12 = a3[7];
  v13 = a1 + v12;
  v14 = (uint64_t *)(a2 + v12);
  v15 = v14[1];
  if (v15 >> 60 == 15)
  {
    *(_OWORD *)v13 = *(_OWORD *)v14;
  }
  else
  {
    v16 = *v14;
    sub_100031FEC(*v14, v14[1]);
    *(_QWORD *)v13 = v16;
    *(_QWORD *)(v13 + 8) = v15;
  }
  v17 = a3[8];
  v18 = a1 + v17;
  v19 = (uint64_t *)(a2 + v17);
  v20 = v19[1];
  if (v20 >> 60 == 15)
  {
    *(_OWORD *)v18 = *(_OWORD *)v19;
  }
  else
  {
    v21 = *v19;
    sub_100031FEC(*v19, v19[1]);
    *(_QWORD *)v18 = v21;
    *(_QWORD *)(v18 + 8) = v20;
  }
  v22 = a3[9];
  v23 = a1 + v22;
  v24 = (uint64_t *)(a2 + v22);
  v25 = v24[1];
  if (v25 >> 60 == 15)
  {
    *(_OWORD *)v23 = *(_OWORD *)v24;
  }
  else
  {
    v26 = *v24;
    sub_100031FEC(*v24, v24[1]);
    *(_QWORD *)v23 = v26;
    *(_QWORD *)(v23 + 8) = v25;
  }
  v27 = a3[10];
  v28 = (void *)(a1 + v27);
  v29 = (const void *)(a2 + v27);
  v30 = type metadata accessor for UUID(0);
  v31 = *(_QWORD *)(v30 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30))
  {
    v32 = sub_100012C44(&qword_10040E1F0);
    memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v31 + 16))(v28, v29, v30);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
  }
  v33 = a3[11];
  v34 = a3[12];
  v35 = *(_QWORD *)(a2 + v33);
  *(_QWORD *)(a1 + v33) = v35;
  v36 = (void *)(a1 + v34);
  v37 = (const void *)(a2 + v34);
  v38 = type metadata accessor for NANInternetSharingStatistics.Requester(0);
  v39 = *(_QWORD *)(v38 - 8);
  v40 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v39 + 48);
  swift_bridgeObjectRetain(v35);
  if (v40(v37, 1, v38))
  {
    v41 = sub_100012C44((uint64_t *)&unk_10040DAB0);
    memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
  }
  else
  {
    v42 = type metadata accessor for DispatchTimeInterval(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v42 - 8) + 16))(v36, v37, v42);
    *((_BYTE *)v36 + *(int *)(v38 + 20)) = *((_BYTE *)v37 + *(int *)(v38 + 20));
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v38);
  }
  v43 = a3[13];
  v44 = (_OWORD *)(a1 + v43);
  v45 = (_OWORD *)(a2 + v43);
  *v44 = *v45;
  *(_OWORD *)((char *)v44 + 9) = *(_OWORD *)((char *)v45 + 9);
  return a1;
}

uint64_t assignWithCopy for NANAttribute.CustomDeviceInformation.CustomAttributes(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(void *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  void *v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t (*v44)(void *, uint64_t, uint64_t);
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _BYTE *v52;
  _BYTE *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t (*v56)(_BYTE *, uint64_t, uint64_t);
  int v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _OWORD *v62;
  __int128 *v63;
  __int128 v64;
  uint64_t v66;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_WORD *)(a1 + 1) = *(_WORD *)(a2 + 1);
  v6 = a3[6];
  v7 = (void *)(a1 + v6);
  v8 = (void *)(a2 + v6);
  v9 = type metadata accessor for P256.KeyAgreement.PublicKey(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(void *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    v14 = sub_100012C44((uint64_t *)&unk_10040D200);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v10 + 24))(v7, v8, v9);
LABEL_7:
  v15 = a3[7];
  v16 = (uint64_t *)(a1 + v15);
  v17 = (uint64_t *)(a2 + v15);
  v18 = *(_QWORD *)(a2 + v15 + 8);
  if (*(_QWORD *)(a1 + v15 + 8) >> 60 == 15)
  {
    if (v18 >> 60 != 15)
    {
      v19 = *v17;
      sub_100031FEC(v19, v18);
      *v16 = v19;
      v16[1] = v18;
      goto LABEL_14;
    }
    goto LABEL_12;
  }
  if (v18 >> 60 == 15)
  {
    sub_1001725AC((uint64_t)v16);
LABEL_12:
    *(_OWORD *)v16 = *(_OWORD *)v17;
    goto LABEL_14;
  }
  v20 = *v17;
  sub_100031FEC(v20, v18);
  v21 = *v16;
  v22 = v16[1];
  *v16 = v20;
  v16[1] = v18;
  sub_10000E614(v21, v22);
LABEL_14:
  v23 = a3[8];
  v24 = (uint64_t *)(a1 + v23);
  v25 = (uint64_t *)(a2 + v23);
  v26 = *(_QWORD *)(a2 + v23 + 8);
  if (*(_QWORD *)(a1 + v23 + 8) >> 60 == 15)
  {
    if (v26 >> 60 != 15)
    {
      v27 = *v25;
      sub_100031FEC(v27, v26);
      *v24 = v27;
      v24[1] = v26;
      goto LABEL_21;
    }
    goto LABEL_19;
  }
  if (v26 >> 60 == 15)
  {
    sub_1001725AC((uint64_t)v24);
LABEL_19:
    *(_OWORD *)v24 = *(_OWORD *)v25;
    goto LABEL_21;
  }
  v28 = *v25;
  sub_100031FEC(v28, v26);
  v29 = *v24;
  v30 = v24[1];
  *v24 = v28;
  v24[1] = v26;
  sub_10000E614(v29, v30);
LABEL_21:
  v31 = a3[9];
  v32 = (uint64_t *)(a1 + v31);
  v33 = (uint64_t *)(a2 + v31);
  v34 = *(_QWORD *)(a2 + v31 + 8);
  if (*(_QWORD *)(a1 + v31 + 8) >> 60 == 15)
  {
    if (v34 >> 60 != 15)
    {
      v35 = *v33;
      sub_100031FEC(v35, v34);
      *v32 = v35;
      v32[1] = v34;
      goto LABEL_28;
    }
    goto LABEL_26;
  }
  if (v34 >> 60 == 15)
  {
    sub_1001725AC((uint64_t)v32);
LABEL_26:
    *(_OWORD *)v32 = *(_OWORD *)v33;
    goto LABEL_28;
  }
  v36 = *v33;
  sub_100031FEC(v36, v34);
  v37 = *v32;
  v38 = v32[1];
  *v32 = v36;
  v32[1] = v34;
  sub_10000E614(v37, v38);
LABEL_28:
  v39 = a3[10];
  v40 = (void *)(a1 + v39);
  v41 = (void *)(a2 + v39);
  v42 = type metadata accessor for UUID(0);
  v43 = *(_QWORD *)(v42 - 8);
  v44 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v43 + 48);
  v45 = v44(v40, 1, v42);
  v46 = v44(v41, 1, v42);
  if (v45)
  {
    if (!v46)
    {
      (*(void (**)(void *, void *, uint64_t))(v43 + 16))(v40, v41, v42);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v43 + 56))(v40, 0, 1, v42);
      goto LABEL_34;
    }
    goto LABEL_33;
  }
  if (v46)
  {
    (*(void (**)(void *, uint64_t))(v43 + 8))(v40, v42);
LABEL_33:
    v47 = sub_100012C44(&qword_10040E1F0);
    memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
    goto LABEL_34;
  }
  (*(void (**)(void *, void *, uint64_t))(v43 + 24))(v40, v41, v42);
LABEL_34:
  v48 = a3[11];
  v49 = *(_QWORD *)(a2 + v48);
  v50 = *(_QWORD *)(a1 + v48);
  *(_QWORD *)(a1 + v48) = v49;
  swift_bridgeObjectRetain(v49);
  swift_bridgeObjectRelease(v50);
  v51 = a3[12];
  v52 = (_BYTE *)(a1 + v51);
  v53 = (_BYTE *)(a2 + v51);
  v54 = type metadata accessor for NANInternetSharingStatistics.Requester(0);
  v55 = *(_QWORD *)(v54 - 8);
  v56 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v55 + 48);
  v57 = v56(v52, 1, v54);
  v58 = v56(v53, 1, v54);
  if (!v57)
  {
    if (!v58)
    {
      v66 = type metadata accessor for DispatchTimeInterval(0);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v66 - 8) + 24))(v52, v53, v66);
      v52[*(int *)(v54 + 20)] = v53[*(int *)(v54 + 20)];
      goto LABEL_40;
    }
    sub_100063824((uint64_t)v52, type metadata accessor for NANInternetSharingStatistics.Requester);
    goto LABEL_39;
  }
  if (v58)
  {
LABEL_39:
    v60 = sub_100012C44((uint64_t *)&unk_10040DAB0);
    memcpy(v52, v53, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
    goto LABEL_40;
  }
  v59 = type metadata accessor for DispatchTimeInterval(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v59 - 8) + 16))(v52, v53, v59);
  v52[*(int *)(v54 + 20)] = v53[*(int *)(v54 + 20)];
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v55 + 56))(v52, 0, 1, v54);
LABEL_40:
  v61 = a3[13];
  v62 = (_OWORD *)(a1 + v61);
  v63 = (__int128 *)(a2 + v61);
  v64 = *v63;
  *(_OWORD *)((char *)v62 + 9) = *(__int128 *)((char *)v63 + 9);
  *v62 = v64;
  return a1;
}

uint64_t initializeWithTake for NANAttribute.CustomDeviceInformation.CustomAttributes(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void *v7;
  const void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  const void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _OWORD *v27;
  _OWORD *v28;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_WORD *)(a1 + 1) = *(_WORD *)(a2 + 1);
  v6 = a3[6];
  v7 = (void *)(a1 + v6);
  v8 = (const void *)(a2 + v6);
  v9 = type metadata accessor for P256.KeyAgreement.PublicKey(0);
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    v11 = sub_100012C44((uint64_t *)&unk_10040D200);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v12 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  *(_OWORD *)(a1 + v12) = *(_OWORD *)(a2 + v12);
  v13 = a3[10];
  *(_OWORD *)(a1 + a3[9]) = *(_OWORD *)(a2 + a3[9]);
  v14 = (void *)(a1 + v13);
  v15 = (const void *)(a2 + v13);
  v16 = type metadata accessor for UUID(0);
  v17 = *(_QWORD *)(v16 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
  {
    v18 = sub_100012C44(&qword_10040E1F0);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v17 + 32))(v14, v15, v16);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  }
  v19 = a3[12];
  *(_QWORD *)(a1 + a3[11]) = *(_QWORD *)(a2 + a3[11]);
  v20 = (void *)(a1 + v19);
  v21 = (const void *)(a2 + v19);
  v22 = type metadata accessor for NANInternetSharingStatistics.Requester(0);
  v23 = *(_QWORD *)(v22 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
  {
    v24 = sub_100012C44((uint64_t *)&unk_10040DAB0);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
  }
  else
  {
    v25 = type metadata accessor for DispatchTimeInterval(0);
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v25 - 8) + 32))(v20, v21, v25);
    *((_BYTE *)v20 + *(int *)(v22 + 20)) = *((_BYTE *)v21 + *(int *)(v22 + 20));
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
  }
  v26 = a3[13];
  v27 = (_OWORD *)(a1 + v26);
  v28 = (_OWORD *)(a2 + v26);
  *v27 = *v28;
  *(_OWORD *)((char *)v27 + 9) = *(_OWORD *)((char *)v28 + 9);
  return a1;
}

uint64_t assignWithTake for NANAttribute.CustomDeviceInformation.CustomAttributes(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(void *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t (*v38)(void *, uint64_t, uint64_t);
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE *v45;
  _BYTE *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t (*v49)(_BYTE *, uint64_t, uint64_t);
  int v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _OWORD *v55;
  _OWORD *v56;
  uint64_t v58;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_WORD *)(a1 + 1) = *(_WORD *)(a2 + 1);
  v6 = a3[6];
  v7 = (void *)(a1 + v6);
  v8 = (void *)(a2 + v6);
  v9 = type metadata accessor for P256.KeyAgreement.PublicKey(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, void *, uint64_t))(v10 + 32))(v7, v8, v9);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(void *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    v14 = sub_100012C44((uint64_t *)&unk_10040D200);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v10 + 40))(v7, v8, v9);
LABEL_7:
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = *(_QWORD *)(a1 + v15 + 8);
  if (v18 >> 60 == 15)
  {
LABEL_10:
    *(_OWORD *)v16 = *(_OWORD *)v17;
    goto LABEL_12;
  }
  v19 = *(_QWORD *)(v17 + 8);
  if (v19 >> 60 == 15)
  {
    sub_1001725AC(v16);
    goto LABEL_10;
  }
  v20 = *(_QWORD *)v16;
  *(_QWORD *)v16 = *(_QWORD *)v17;
  *(_QWORD *)(v16 + 8) = v19;
  sub_10000E614(v20, v18);
LABEL_12:
  v21 = a3[8];
  v22 = a1 + v21;
  v23 = a2 + v21;
  v24 = *(_QWORD *)(a1 + v21 + 8);
  if (v24 >> 60 == 15)
  {
LABEL_15:
    *(_OWORD *)v22 = *(_OWORD *)v23;
    goto LABEL_17;
  }
  v25 = *(_QWORD *)(v23 + 8);
  if (v25 >> 60 == 15)
  {
    sub_1001725AC(v22);
    goto LABEL_15;
  }
  v26 = *(_QWORD *)v22;
  *(_QWORD *)v22 = *(_QWORD *)v23;
  *(_QWORD *)(v22 + 8) = v25;
  sub_10000E614(v26, v24);
LABEL_17:
  v27 = a3[9];
  v28 = a1 + v27;
  v29 = a2 + v27;
  v30 = *(_QWORD *)(a1 + v27 + 8);
  if (v30 >> 60 == 15)
  {
LABEL_20:
    *(_OWORD *)v28 = *(_OWORD *)v29;
    goto LABEL_22;
  }
  v31 = *(_QWORD *)(v29 + 8);
  if (v31 >> 60 == 15)
  {
    sub_1001725AC(v28);
    goto LABEL_20;
  }
  v32 = *(_QWORD *)v28;
  *(_QWORD *)v28 = *(_QWORD *)v29;
  *(_QWORD *)(v28 + 8) = v31;
  sub_10000E614(v32, v30);
LABEL_22:
  v33 = a3[10];
  v34 = (void *)(a1 + v33);
  v35 = (void *)(a2 + v33);
  v36 = type metadata accessor for UUID(0);
  v37 = *(_QWORD *)(v36 - 8);
  v38 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v37 + 48);
  v39 = v38(v34, 1, v36);
  v40 = v38(v35, 1, v36);
  if (v39)
  {
    if (!v40)
    {
      (*(void (**)(void *, void *, uint64_t))(v37 + 32))(v34, v35, v36);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v37 + 56))(v34, 0, 1, v36);
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  if (v40)
  {
    (*(void (**)(void *, uint64_t))(v37 + 8))(v34, v36);
LABEL_27:
    v41 = sub_100012C44(&qword_10040E1F0);
    memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
    goto LABEL_28;
  }
  (*(void (**)(void *, void *, uint64_t))(v37 + 40))(v34, v35, v36);
LABEL_28:
  v42 = a3[11];
  v43 = *(_QWORD *)(a1 + v42);
  *(_QWORD *)(a1 + v42) = *(_QWORD *)(a2 + v42);
  swift_bridgeObjectRelease(v43);
  v44 = a3[12];
  v45 = (_BYTE *)(a1 + v44);
  v46 = (_BYTE *)(a2 + v44);
  v47 = type metadata accessor for NANInternetSharingStatistics.Requester(0);
  v48 = *(_QWORD *)(v47 - 8);
  v49 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v48 + 48);
  v50 = v49(v45, 1, v47);
  v51 = v49(v46, 1, v47);
  if (!v50)
  {
    if (!v51)
    {
      v58 = type metadata accessor for DispatchTimeInterval(0);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v58 - 8) + 40))(v45, v46, v58);
      v45[*(int *)(v47 + 20)] = v46[*(int *)(v47 + 20)];
      goto LABEL_34;
    }
    sub_100063824((uint64_t)v45, type metadata accessor for NANInternetSharingStatistics.Requester);
    goto LABEL_33;
  }
  if (v51)
  {
LABEL_33:
    v53 = sub_100012C44((uint64_t *)&unk_10040DAB0);
    memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64));
    goto LABEL_34;
  }
  v52 = type metadata accessor for DispatchTimeInterval(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v52 - 8) + 32))(v45, v46, v52);
  v45[*(int *)(v47 + 20)] = v46[*(int *)(v47 + 20)];
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v48 + 56))(v45, 0, 1, v47);
LABEL_34:
  v54 = a3[13];
  v55 = (_OWORD *)(a1 + v54);
  v56 = (_OWORD *)(a2 + v54);
  *v55 = *v56;
  *(_OWORD *)((char *)v55 + 9) = *(_OWORD *)((char *)v56 + 9);
  return a1;
}

uint64_t getEnumTagSinglePayload for NANAttribute.CustomDeviceInformation.CustomAttributes(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001E81B4);
}

uint64_t sub_1001E81B4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v6 = sub_100012C44((uint64_t *)&unk_10040D200);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = a3[6];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v10 = sub_100012C44(&qword_10040E1F0);
  v7 = *(_QWORD *)(v10 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v10;
    v9 = a3[10];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v8 = sub_100012C44((uint64_t *)&unk_10040DAB0);
    v7 = *(_QWORD *)(v8 - 8);
    v9 = a3[12];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v11 = *(_QWORD *)(a1 + a3[11]);
  if (v11 >= 0xFFFFFFFF)
    LODWORD(v11) = -1;
  return (v11 + 1);
}

uint64_t storeEnumTagSinglePayload for NANAttribute.CustomDeviceInformation.CustomAttributes(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001E8294);
}

uint64_t sub_1001E8294(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  v8 = sub_100012C44((uint64_t *)&unk_10040D200);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = a4[6];
  }
  else
  {
    result = sub_100012C44(&qword_10040E1F0);
    v9 = *(_QWORD *)(result - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = result;
      v11 = a4[10];
    }
    else
    {
      if (a3 == 0x7FFFFFFF)
      {
        *(_QWORD *)(a1 + a4[11]) = (a2 - 1);
        return result;
      }
      v10 = sub_100012C44((uint64_t *)&unk_10040DAB0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = a4[12];
    }
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
}

void sub_1001E8364(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[10];

  v8[0] = (char *)&value witness table for Builtin.Int8 + 64;
  v8[1] = &unk_100358E20;
  sub_100061B98(319, &qword_10040B0D0, (uint64_t (*)(uint64_t))&type metadata accessor for P256.KeyAgreement.PublicKey);
  if (v3 <= 0x3F)
  {
    v8[2] = *(_QWORD *)(v2 - 8) + 64;
    v8[3] = &unk_1003596B8;
    v8[4] = &unk_1003596B8;
    v8[5] = &unk_1003596B8;
    sub_100061B98(319, (unint64_t *)&unk_10040B0D8, (uint64_t (*)(uint64_t))&type metadata accessor for UUID);
    if (v5 <= 0x3F)
    {
      v8[6] = *(_QWORD *)(v4 - 8) + 64;
      v8[7] = (char *)&value witness table for Builtin.BridgeObject + 64;
      sub_100061B98(319, qword_10040D950, type metadata accessor for NANInternetSharingStatistics.Requester);
      if (v7 <= 0x3F)
      {
        v8[8] = *(_QWORD *)(v6 - 8) + 64;
        v8[9] = &unk_1003596D0;
        swift_initStructMetadata(a1, 256, 10, v8, a1 + 16);
      }
    }
  }
}

ValueMetadata *type metadata accessor for NANAttribute.CustomDeviceInformation.PlatformType()
{
  return &type metadata for NANAttribute.CustomDeviceInformation.PlatformType;
}

ValueMetadata *type metadata accessor for NANAttribute.CustomDeviceInformation.Flags()
{
  return &type metadata for NANAttribute.CustomDeviceInformation.Flags;
}

ValueMetadata *type metadata accessor for NANAttribute.CustomDeviceInformation.Version()
{
  return &type metadata for NANAttribute.CustomDeviceInformation.Version;
}

uint64_t getEnumTagSinglePayload for NANAttribute.AttributeType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xD3)
    goto LABEL_17;
  if (a2 + 45 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 45) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 45;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 45;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 45;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x2E;
  v8 = v6 - 46;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for NANAttribute.AttributeType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 45 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 45) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xD3)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xD2)
    return ((uint64_t (*)(void))((char *)&loc_1001E8580 + 4 * byte_100352683[v4]))();
  *a1 = a2 + 45;
  return ((uint64_t (*)(void))((char *)sub_1001E85B4 + 4 * byte_10035267E[v4]))();
}

uint64_t sub_1001E85B4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001E85BC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001E85C4);
  return result;
}

uint64_t sub_1001E85D0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001E85D8);
  *(_BYTE *)result = a2 + 45;
  return result;
}

uint64_t sub_1001E85DC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001E85E4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NANAttribute.AttributeType()
{
  return &type metadata for NANAttribute.AttributeType;
}

ValueMetadata *type metadata accessor for NANAttribute.CustomDeviceInformation.CodingKeys()
{
  return &type metadata for NANAttribute.CustomDeviceInformation.CodingKeys;
}

ValueMetadata *type metadata accessor for NANAttribute.CustomDeviceInformation.Version.CodingKeys()
{
  return &type metadata for NANAttribute.CustomDeviceInformation.Version.CodingKeys;
}

ValueMetadata *type metadata accessor for NANAttribute.VendorSpecific.CodingKeys()
{
  return &type metadata for NANAttribute.VendorSpecific.CodingKeys;
}

ValueMetadata *type metadata accessor for NANAttribute.PairingIdentityResolution.CodingKeys()
{
  return &type metadata for NANAttribute.PairingIdentityResolution.CodingKeys;
}

ValueMetadata *type metadata accessor for NANAttribute.PublicAvailability.CodingKeys()
{
  return &type metadata for NANAttribute.PublicAvailability.CodingKeys;
}

ValueMetadata *type metadata accessor for NANAttribute.MulticastScheduleChange.CodingKeys()
{
  return &type metadata for NANAttribute.MulticastScheduleChange.CodingKeys;
}

ValueMetadata *type metadata accessor for NANAttribute.SharedKeyDescriptor.CodingKeys()
{
  return &type metadata for NANAttribute.SharedKeyDescriptor.CodingKeys;
}

ValueMetadata *type metadata accessor for NANAttribute.SecurityContextInformation.CodingKeys()
{
  return &type metadata for NANAttribute.SecurityContextInformation.CodingKeys;
}

ValueMetadata *type metadata accessor for NANAttribute.CipherSuiteInformation.CodingKeys()
{
  return &type metadata for NANAttribute.CipherSuiteInformation.CodingKeys;
}

ValueMetadata *type metadata accessor for NANAttribute.CipherSuiteInformation.CipherSuite.CodingKeys()
{
  return &type metadata for NANAttribute.CipherSuiteInformation.CipherSuite.CodingKeys;
}

ValueMetadata *type metadata accessor for NANAttribute.FineTimingMeasurementRangeReport.CodingKeys()
{
  return &type metadata for NANAttribute.FineTimingMeasurementRangeReport.CodingKeys;
}

uint64_t _s7CoreP2P12NANAttributeO23CustomDeviceInformationV12PlatformTypeOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_1001E86FC + 4 * byte_10035268D[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1001E8730 + 4 * byte_100352688[v4]))();
}

uint64_t sub_1001E8730(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001E8738(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001E8740);
  return result;
}

uint64_t sub_1001E874C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001E8754);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_1001E8758(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001E8760(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NANAttribute.FineTimingMeasurementRangeReport.Entry.CodingKeys()
{
  return &type metadata for NANAttribute.FineTimingMeasurementRangeReport.Entry.CodingKeys;
}

ValueMetadata *type metadata accessor for NANAttribute.ExtendedMesh.CodingKeys()
{
  return &type metadata for NANAttribute.ExtendedMesh.CodingKeys;
}

ValueMetadata *type metadata accessor for NANAttribute.ExtendedIBSS.CodingKeys()
{
  return &type metadata for NANAttribute.ExtendedIBSS.CodingKeys;
}

ValueMetadata *type metadata accessor for NANAttribute.ExtendedP2POperation.CodingKeys()
{
  return &type metadata for NANAttribute.ExtendedP2POperation.CodingKeys;
}

ValueMetadata *type metadata accessor for NANAttribute.ElementContainer.CodingKeys()
{
  return &type metadata for NANAttribute.ElementContainer.CodingKeys;
}

ValueMetadata *type metadata accessor for NANAttribute.DeviceLinkQoS.CodingKeys()
{
  return &type metadata for NANAttribute.DeviceLinkQoS.CodingKeys;
}

ValueMetadata *type metadata accessor for NANAttribute.DataCluster.CodingKeys()
{
  return &type metadata for NANAttribute.DataCluster.CodingKeys;
}

ValueMetadata *type metadata accessor for NANAttribute.Availability.CodingKeys()
{
  return &type metadata for NANAttribute.Availability.CodingKeys;
}

ValueMetadata *type metadata accessor for NANAttribute.DeviceCapabilityExtension.CodingKeys()
{
  return &type metadata for NANAttribute.DeviceCapabilityExtension.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for NANAttribute.DeviceCapability.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_1001E8848 + 4 * byte_100352697[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_1001E887C + 4 * byte_100352692[v4]))();
}

uint64_t sub_1001E887C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001E8884(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001E888CLL);
  return result;
}

uint64_t sub_1001E8898(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001E88A0);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_1001E88A4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001E88AC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NANAttribute.DeviceCapability.CodingKeys()
{
  return &type metadata for NANAttribute.DeviceCapability.CodingKeys;
}

ValueMetadata *type metadata accessor for NANAttribute.DeviceCapability.CommittedDiscoveryWindowInformation.CodingKeys()
{
  return &type metadata for NANAttribute.DeviceCapability.CommittedDiscoveryWindowInformation.CodingKeys;
}

ValueMetadata *type metadata accessor for NANAttribute.ClusterDiscovery.CodingKeys()
{
  return &type metadata for NANAttribute.ClusterDiscovery.CodingKeys;
}

ValueMetadata *type metadata accessor for NANAttribute.Ranging.CodingKeys()
{
  return &type metadata for NANAttribute.Ranging.CodingKeys;
}

ValueMetadata *type metadata accessor for NANAttribute.FurtherAvailabilityMap.CodingKeys()
{
  return &type metadata for NANAttribute.FurtherAvailabilityMap.CodingKeys;
}

ValueMetadata *type metadata accessor for NANAttribute.FurtherServiceDiscovery.CodingKeys()
{
  return &type metadata for NANAttribute.FurtherServiceDiscovery.CodingKeys;
}

ValueMetadata *type metadata accessor for NANAttribute.Mesh.CodingKeys()
{
  return &type metadata for NANAttribute.Mesh.CodingKeys;
}

ValueMetadata *type metadata accessor for NANAttribute.IBSS.CodingKeys()
{
  return &type metadata for NANAttribute.IBSS.CodingKeys;
}

ValueMetadata *type metadata accessor for NANAttribute.P2POperation.CodingKeys()
{
  return &type metadata for NANAttribute.P2POperation.CodingKeys;
}

uint64_t _s7CoreP2P12NANAttributeO17ServiceDescriptorV7ControlV11ControlTypeOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1001E8994 + 4 * byte_1003526A1[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1001E89C8 + 4 * byte_10035269C[v4]))();
}

uint64_t sub_1001E89C8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001E89D0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001E89D8);
  return result;
}

uint64_t sub_1001E89E4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001E89ECLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1001E89F0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001E89F8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NANAttribute.WLANInfrastructure.CodingKeys()
{
  return &type metadata for NANAttribute.WLANInfrastructure.CodingKeys;
}

ValueMetadata *type metadata accessor for NANAttribute.ServiceDescriptorExtension.RangeLimit.CodingKeys()
{
  return &type metadata for NANAttribute.ServiceDescriptorExtension.RangeLimit.CodingKeys;
}

uint64_t _s7CoreP2P12NANAttributeO25PairingIdentityResolutionV13CipherVersionOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1001E8A64 + 4 * byte_1003526A6[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1001E8A84 + 4 * byte_1003526AB[v4]))();
}

_BYTE *sub_1001E8A64(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1001E8A84(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1001E8A8C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1001E8A94(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1001E8A9C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1001E8AA4(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for NANAttribute.ServiceIDList.CodingKeys()
{
  return &type metadata for NANAttribute.ServiceIDList.CodingKeys;
}

uint64_t _s7CoreP2P12NANAttributeO8DatapathV6StatusOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1001E8B0C + 4 * byte_1003526B5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1001E8B40 + 4 * byte_1003526B0[v4]))();
}

uint64_t sub_1001E8B40(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001E8B48(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001E8B50);
  return result;
}

uint64_t sub_1001E8B5C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001E8B64);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1001E8B68(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001E8B70(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NANAttribute.Cluster.CodingKeys()
{
  return &type metadata for NANAttribute.Cluster.CodingKeys;
}

ValueMetadata *type metadata accessor for NANAttribute.MasterIndication.CodingKeys()
{
  return &type metadata for NANAttribute.MasterIndication.CodingKeys;
}

unint64_t sub_1001E8BA0()
{
  unint64_t result;

  result = qword_10040B128;
  if (!qword_10040B128)
  {
    result = swift_getWitnessTable(byte_1003597A0, &type metadata for NANAttribute.MasterIndication.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B128);
  }
  return result;
}

unint64_t sub_1001E8BE8()
{
  unint64_t result;

  result = qword_10040B130;
  if (!qword_10040B130)
  {
    result = swift_getWitnessTable(byte_100359858, &type metadata for NANAttribute.Cluster.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B130);
  }
  return result;
}

unint64_t sub_1001E8C30()
{
  unint64_t result;

  result = qword_10040B138;
  if (!qword_10040B138)
  {
    result = swift_getWitnessTable("Ac\t", &type metadata for NANAttribute.ServiceIDList.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B138);
  }
  return result;
}

unint64_t sub_1001E8C78()
{
  unint64_t result;

  result = qword_10040B140;
  if (!qword_10040B140)
  {
    result = swift_getWitnessTable(byte_1003599C8, &type metadata for NANAttribute.ServiceDescriptorExtension.RangeLimit.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B140);
  }
  return result;
}

unint64_t sub_1001E8CC0()
{
  unint64_t result;

  result = qword_10040B148;
  if (!qword_10040B148)
  {
    result = swift_getWitnessTable(byte_100359A80, &type metadata for NANAttribute.WLANInfrastructure.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B148);
  }
  return result;
}

unint64_t sub_1001E8D08()
{
  unint64_t result;

  result = qword_10040B150;
  if (!qword_10040B150)
  {
    result = swift_getWitnessTable(byte_100359B38, &type metadata for NANAttribute.P2POperation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B150);
  }
  return result;
}

unint64_t sub_1001E8D50()
{
  unint64_t result;

  result = qword_10040B158;
  if (!qword_10040B158)
  {
    atomic_store(result, (unint64_t *)&qword_10040B158);
  }
  return result;
}

unint64_t sub_1001E8D98()
{
  unint64_t result;

  result = qword_10040B160;
  if (!qword_10040B160)
  {
    result = swift_getWitnessTable(byte_100359CA8, &type metadata for NANAttribute.Mesh.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B160);
  }
  return result;
}

unint64_t sub_1001E8DE0()
{
  unint64_t result;

  result = qword_10040B168;
  if (!qword_10040B168)
  {
    result = swift_getWitnessTable(byte_100359D60, &type metadata for NANAttribute.FurtherServiceDiscovery.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B168);
  }
  return result;
}

unint64_t sub_1001E8E28()
{
  unint64_t result;

  result = qword_10040B170;
  if (!qword_10040B170)
  {
    result = swift_getWitnessTable("9^\t", &type metadata for NANAttribute.FurtherAvailabilityMap.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B170);
  }
  return result;
}

unint64_t sub_1001E8E70()
{
  unint64_t result;

  result = qword_10040B178;
  if (!qword_10040B178)
  {
    result = swift_getWitnessTable(byte_100359ED0, &type metadata for NANAttribute.Ranging.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B178);
  }
  return result;
}

unint64_t sub_1001E8EB8()
{
  unint64_t result;

  result = qword_10040B180;
  if (!qword_10040B180)
  {
    result = swift_getWitnessTable(byte_100359F88, &type metadata for NANAttribute.ClusterDiscovery.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B180);
  }
  return result;
}

unint64_t sub_1001E8F00()
{
  unint64_t result;

  result = qword_10040B188;
  if (!qword_10040B188)
  {
    result = swift_getWitnessTable(byte_10035A040, &type metadata for NANAttribute.DeviceCapability.CommittedDiscoveryWindowInformation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B188);
  }
  return result;
}

unint64_t sub_1001E8F48()
{
  unint64_t result;

  result = qword_10040B190;
  if (!qword_10040B190)
  {
    result = swift_getWitnessTable("Y[\t", &type metadata for NANAttribute.DeviceCapability.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B190);
  }
  return result;
}

unint64_t sub_1001E8F90()
{
  unint64_t result;

  result = qword_10040B198;
  if (!qword_10040B198)
  {
    result = swift_getWitnessTable(byte_10035A1B0, &type metadata for NANAttribute.DeviceCapabilityExtension.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B198);
  }
  return result;
}

unint64_t sub_1001E8FD8()
{
  unint64_t result;

  result = qword_10040B1A0;
  if (!qword_10040B1A0)
  {
    result = swift_getWitnessTable(byte_10035A268, &type metadata for NANAttribute.Availability.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B1A0);
  }
  return result;
}

unint64_t sub_1001E9020()
{
  unint64_t result;

  result = qword_10040B1A8;
  if (!qword_10040B1A8)
  {
    result = swift_getWitnessTable("1Y\t", &type metadata for NANAttribute.DataCluster.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B1A8);
  }
  return result;
}

unint64_t sub_1001E9068()
{
  unint64_t result;

  result = qword_10040B1B0;
  if (!qword_10040B1B0)
  {
    result = swift_getWitnessTable("yX\t", &type metadata for NANAttribute.DeviceLinkQoS.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B1B0);
  }
  return result;
}

unint64_t sub_1001E90B0()
{
  unint64_t result;

  result = qword_10040B1B8;
  if (!qword_10040B1B8)
  {
    result = swift_getWitnessTable(byte_10035A490, &type metadata for NANAttribute.ElementContainer.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B1B8);
  }
  return result;
}

unint64_t sub_1001E90F8()
{
  unint64_t result;

  result = qword_10040B1C0;
  if (!qword_10040B1C0)
  {
    result = swift_getWitnessTable("\tW\t", &type metadata for NANAttribute.ExtendedP2POperation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B1C0);
  }
  return result;
}

unint64_t sub_1001E9140()
{
  unint64_t result;

  result = qword_10040B1C8;
  if (!qword_10040B1C8)
  {
    result = swift_getWitnessTable("QV\t", &type metadata for NANAttribute.ExtendedIBSS.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B1C8);
  }
  return result;
}

unint64_t sub_1001E9188()
{
  unint64_t result;

  result = qword_10040B1D0;
  if (!qword_10040B1D0)
  {
    result = swift_getWitnessTable(byte_10035A6B8, &type metadata for NANAttribute.ExtendedMesh.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B1D0);
  }
  return result;
}

unint64_t sub_1001E91D0()
{
  unint64_t result;

  result = qword_10040B1D8;
  if (!qword_10040B1D8)
  {
    result = swift_getWitnessTable(byte_10035A770, &type metadata for NANAttribute.FineTimingMeasurementRangeReport.Entry.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B1D8);
  }
  return result;
}

unint64_t sub_1001E9218()
{
  unint64_t result;

  result = qword_10040B1E0;
  if (!qword_10040B1E0)
  {
    result = swift_getWitnessTable(")T\t", &type metadata for NANAttribute.FineTimingMeasurementRangeReport.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B1E0);
  }
  return result;
}

unint64_t sub_1001E9260()
{
  unint64_t result;

  result = qword_10040B1E8;
  if (!qword_10040B1E8)
  {
    result = swift_getWitnessTable("qS\t", &type metadata for NANAttribute.CipherSuiteInformation.CipherSuite.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B1E8);
  }
  return result;
}

unint64_t sub_1001E92A8()
{
  unint64_t result;

  result = qword_10040B1F0;
  if (!qword_10040B1F0)
  {
    result = swift_getWitnessTable(byte_10035A998, &type metadata for NANAttribute.CipherSuiteInformation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B1F0);
  }
  return result;
}

unint64_t sub_1001E92F0()
{
  unint64_t result;

  result = qword_10040B1F8;
  if (!qword_10040B1F8)
  {
    result = swift_getWitnessTable(byte_10035AA50, &type metadata for NANAttribute.SecurityContextInformation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B1F8);
  }
  return result;
}

unint64_t sub_1001E9338()
{
  unint64_t result;

  result = qword_10040B200;
  if (!qword_10040B200)
  {
    result = swift_getWitnessTable("IQ\t", &type metadata for NANAttribute.SharedKeyDescriptor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B200);
  }
  return result;
}

unint64_t sub_1001E9380()
{
  unint64_t result;

  result = qword_10040B208;
  if (!qword_10040B208)
  {
    result = swift_getWitnessTable(byte_10035ABC0, &type metadata for NANAttribute.MulticastScheduleChange.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B208);
  }
  return result;
}

unint64_t sub_1001E93C8()
{
  unint64_t result;

  result = qword_10040B210;
  if (!qword_10040B210)
  {
    result = swift_getWitnessTable(byte_10035AC78, &type metadata for NANAttribute.PublicAvailability.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B210);
  }
  return result;
}

unint64_t sub_1001E9410()
{
  unint64_t result;

  result = qword_10040B218;
  if (!qword_10040B218)
  {
    result = swift_getWitnessTable("!O\t", &type metadata for NANAttribute.PairingIdentityResolution.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B218);
  }
  return result;
}

unint64_t sub_1001E9458()
{
  unint64_t result;

  result = qword_10040B220;
  if (!qword_10040B220)
  {
    result = swift_getWitnessTable("iN\t", &type metadata for NANAttribute.VendorSpecific.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B220);
  }
  return result;
}

unint64_t sub_1001E94A0()
{
  unint64_t result;

  result = qword_10040B228;
  if (!qword_10040B228)
  {
    result = swift_getWitnessTable(byte_10035AEA0, &type metadata for NANAttribute.CustomDeviceInformation.Version.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B228);
  }
  return result;
}

unint64_t sub_1001E94E8()
{
  unint64_t result;

  result = qword_10040B230;
  if (!qword_10040B230)
  {
    result = swift_getWitnessTable(byte_10035AF58, &type metadata for NANAttribute.CustomDeviceInformation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B230);
  }
  return result;
}

unint64_t sub_1001E9530()
{
  unint64_t result;

  result = qword_10040B238;
  if (!qword_10040B238)
  {
    result = swift_getWitnessTable(byte_10035AEC8, &type metadata for NANAttribute.CustomDeviceInformation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B238);
  }
  return result;
}

unint64_t sub_1001E9578()
{
  unint64_t result;

  result = qword_10040B240;
  if (!qword_10040B240)
  {
    result = swift_getWitnessTable(byte_10035AEF0, &type metadata for NANAttribute.CustomDeviceInformation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B240);
  }
  return result;
}

unint64_t sub_1001E95C0()
{
  unint64_t result;

  result = qword_10040B248;
  if (!qword_10040B248)
  {
    result = swift_getWitnessTable(byte_10035AE10, &type metadata for NANAttribute.CustomDeviceInformation.Version.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B248);
  }
  return result;
}

unint64_t sub_1001E9608()
{
  unint64_t result;

  result = qword_10040B250;
  if (!qword_10040B250)
  {
    result = swift_getWitnessTable("9O\t", &type metadata for NANAttribute.CustomDeviceInformation.Version.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B250);
  }
  return result;
}

unint64_t sub_1001E9650()
{
  unint64_t result;

  result = qword_10040B258;
  if (!qword_10040B258)
  {
    result = swift_getWitnessTable("iP\t", &type metadata for NANAttribute.VendorSpecific.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B258);
  }
  return result;
}

unint64_t sub_1001E9698()
{
  unint64_t result;

  result = qword_10040B260;
  if (!qword_10040B260)
  {
    result = swift_getWitnessTable(byte_10035AD80, &type metadata for NANAttribute.VendorSpecific.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B260);
  }
  return result;
}

unint64_t sub_1001E96E0()
{
  unint64_t result;

  result = qword_10040B268;
  if (!qword_10040B268)
  {
    result = swift_getWitnessTable("!Q\t", &type metadata for NANAttribute.PairingIdentityResolution.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B268);
  }
  return result;
}

unint64_t sub_1001E9728()
{
  unint64_t result;

  result = qword_10040B270;
  if (!qword_10040B270)
  {
    result = swift_getWitnessTable(byte_10035ACC8, &type metadata for NANAttribute.PairingIdentityResolution.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B270);
  }
  return result;
}

unint64_t sub_1001E9770()
{
  unint64_t result;

  result = qword_10040B278;
  if (!qword_10040B278)
  {
    result = swift_getWitnessTable(byte_10035ABE8, &type metadata for NANAttribute.PublicAvailability.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B278);
  }
  return result;
}

unint64_t sub_1001E97B8()
{
  unint64_t result;

  result = qword_10040B280;
  if (!qword_10040B280)
  {
    result = swift_getWitnessTable("aQ\t", &type metadata for NANAttribute.PublicAvailability.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B280);
  }
  return result;
}

unint64_t sub_1001E9800()
{
  unint64_t result;

  result = qword_10040B288;
  if (!qword_10040B288)
  {
    result = swift_getWitnessTable(byte_10035AB30, &type metadata for NANAttribute.MulticastScheduleChange.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B288);
  }
  return result;
}

unint64_t sub_1001E9848()
{
  unint64_t result;

  result = qword_10040B290;
  if (!qword_10040B290)
  {
    result = swift_getWitnessTable(byte_10035AB58, &type metadata for NANAttribute.MulticastScheduleChange.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B290);
  }
  return result;
}

unint64_t sub_1001E9890()
{
  unint64_t result;

  result = qword_10040B298;
  if (!qword_10040B298)
  {
    result = swift_getWitnessTable("IS\t", &type metadata for NANAttribute.SharedKeyDescriptor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B298);
  }
  return result;
}

unint64_t sub_1001E98D8()
{
  unint64_t result;

  result = qword_10040B2A0;
  if (!qword_10040B2A0)
  {
    result = swift_getWitnessTable(byte_10035AAA0, &type metadata for NANAttribute.SharedKeyDescriptor.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B2A0);
  }
  return result;
}

unint64_t sub_1001E9920()
{
  unint64_t result;

  result = qword_10040B2A8;
  if (!qword_10040B2A8)
  {
    result = swift_getWitnessTable(byte_10035A9C0, &type metadata for NANAttribute.SecurityContextInformation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B2A8);
  }
  return result;
}

unint64_t sub_1001E9968()
{
  unint64_t result;

  result = qword_10040B2B0;
  if (!qword_10040B2B0)
  {
    result = swift_getWitnessTable(byte_10035A9E8, &type metadata for NANAttribute.SecurityContextInformation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B2B0);
  }
  return result;
}

unint64_t sub_1001E99B0()
{
  unint64_t result;

  result = qword_10040B2B8;
  if (!qword_10040B2B8)
  {
    result = swift_getWitnessTable(byte_10035A908, &type metadata for NANAttribute.CipherSuiteInformation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B2B8);
  }
  return result;
}

unint64_t sub_1001E99F8()
{
  unint64_t result;

  result = qword_10040B2C0;
  if (!qword_10040B2C0)
  {
    result = swift_getWitnessTable("AT\t", &type metadata for NANAttribute.CipherSuiteInformation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B2C0);
  }
  return result;
}

unint64_t sub_1001E9A40()
{
  unint64_t result;

  result = qword_10040B2C8;
  if (!qword_10040B2C8)
  {
    result = swift_getWitnessTable("qU\t", &type metadata for NANAttribute.CipherSuiteInformation.CipherSuite.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B2C8);
  }
  return result;
}

unint64_t sub_1001E9A88()
{
  unint64_t result;

  result = qword_10040B2D0;
  if (!qword_10040B2D0)
  {
    result = swift_getWitnessTable(byte_10035A878, &type metadata for NANAttribute.CipherSuiteInformation.CipherSuite.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B2D0);
  }
  return result;
}

unint64_t sub_1001E9AD0()
{
  unint64_t result;

  result = qword_10040B2D8;
  if (!qword_10040B2D8)
  {
    result = swift_getWitnessTable(")V\t", &type metadata for NANAttribute.FineTimingMeasurementRangeReport.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B2D8);
  }
  return result;
}

unint64_t sub_1001E9B18()
{
  unint64_t result;

  result = qword_10040B2E0;
  if (!qword_10040B2E0)
  {
    result = swift_getWitnessTable(byte_10035A7C0, &type metadata for NANAttribute.FineTimingMeasurementRangeReport.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B2E0);
  }
  return result;
}

unint64_t sub_1001E9B60()
{
  unint64_t result;

  result = qword_10040B2E8;
  if (!qword_10040B2E8)
  {
    result = swift_getWitnessTable(byte_10035A6E0, &type metadata for NANAttribute.FineTimingMeasurementRangeReport.Entry.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B2E8);
  }
  return result;
}

unint64_t sub_1001E9BA8()
{
  unint64_t result;

  result = qword_10040B2F0;
  if (!qword_10040B2F0)
  {
    result = swift_getWitnessTable("iV\t", &type metadata for NANAttribute.FineTimingMeasurementRangeReport.Entry.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B2F0);
  }
  return result;
}

unint64_t sub_1001E9BF0()
{
  unint64_t result;

  result = qword_10040B2F8;
  if (!qword_10040B2F8)
  {
    result = swift_getWitnessTable(byte_10035A628, &type metadata for NANAttribute.ExtendedMesh.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B2F8);
  }
  return result;
}

unint64_t sub_1001E9C38()
{
  unint64_t result;

  result = qword_10040B300;
  if (!qword_10040B300)
  {
    result = swift_getWitnessTable("!W\t", &type metadata for NANAttribute.ExtendedMesh.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B300);
  }
  return result;
}

unint64_t sub_1001E9C80()
{
  unint64_t result;

  result = qword_10040B308;
  if (!qword_10040B308)
  {
    result = swift_getWitnessTable("QX\t", &type metadata for NANAttribute.ExtendedIBSS.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B308);
  }
  return result;
}

unint64_t sub_1001E9CC8()
{
  unint64_t result;

  result = qword_10040B310;
  if (!qword_10040B310)
  {
    result = swift_getWitnessTable(byte_10035A598, &type metadata for NANAttribute.ExtendedIBSS.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B310);
  }
  return result;
}

unint64_t sub_1001E9D10()
{
  unint64_t result;

  result = qword_10040B318;
  if (!qword_10040B318)
  {
    result = swift_getWitnessTable("\tY\t", &type metadata for NANAttribute.ExtendedP2POperation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B318);
  }
  return result;
}

unint64_t sub_1001E9D58()
{
  unint64_t result;

  result = qword_10040B320;
  if (!qword_10040B320)
  {
    result = swift_getWitnessTable(byte_10035A4E0, &type metadata for NANAttribute.ExtendedP2POperation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B320);
  }
  return result;
}

unint64_t sub_1001E9DA0()
{
  unint64_t result;

  result = qword_10040B328;
  if (!qword_10040B328)
  {
    result = swift_getWitnessTable(byte_10035A400, &type metadata for NANAttribute.ElementContainer.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B328);
  }
  return result;
}

unint64_t sub_1001E9DE8()
{
  unint64_t result;

  result = qword_10040B330;
  if (!qword_10040B330)
  {
    result = swift_getWitnessTable("IY\t", &type metadata for NANAttribute.ElementContainer.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B330);
  }
  return result;
}

unint64_t sub_1001E9E30()
{
  unint64_t result;

  result = qword_10040B338;
  if (!qword_10040B338)
  {
    result = swift_getWitnessTable("yZ\t", &type metadata for NANAttribute.DeviceLinkQoS.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B338);
  }
  return result;
}

unint64_t sub_1001E9E78()
{
  unint64_t result;

  result = qword_10040B340;
  if (!qword_10040B340)
  {
    result = swift_getWitnessTable(byte_10035A370, &type metadata for NANAttribute.DeviceLinkQoS.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B340);
  }
  return result;
}

unint64_t sub_1001E9EC0()
{
  unint64_t result;

  result = qword_10040B348;
  if (!qword_10040B348)
  {
    result = swift_getWitnessTable("1[\t", &type metadata for NANAttribute.DataCluster.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B348);
  }
  return result;
}

unint64_t sub_1001E9F08()
{
  unint64_t result;

  result = qword_10040B350;
  if (!qword_10040B350)
  {
    result = swift_getWitnessTable(byte_10035A2B8, &type metadata for NANAttribute.DataCluster.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B350);
  }
  return result;
}

unint64_t sub_1001E9F50()
{
  unint64_t result;

  result = qword_10040B358;
  if (!qword_10040B358)
  {
    result = swift_getWitnessTable(byte_10035A1D8, &type metadata for NANAttribute.Availability.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B358);
  }
  return result;
}

unint64_t sub_1001E9F98()
{
  unint64_t result;

  result = qword_10040B360;
  if (!qword_10040B360)
  {
    result = swift_getWitnessTable("q[\t", &type metadata for NANAttribute.Availability.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B360);
  }
  return result;
}

unint64_t sub_1001E9FE0()
{
  unint64_t result;

  result = qword_10040B368;
  if (!qword_10040B368)
  {
    result = swift_getWitnessTable(byte_10035A120, &type metadata for NANAttribute.DeviceCapabilityExtension.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B368);
  }
  return result;
}

unint64_t sub_1001EA028()
{
  unint64_t result;

  result = qword_10040B370;
  if (!qword_10040B370)
  {
    result = swift_getWitnessTable(")\\\t", &type metadata for NANAttribute.DeviceCapabilityExtension.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B370);
  }
  return result;
}

unint64_t sub_1001EA070()
{
  unint64_t result;

  result = qword_10040B378;
  if (!qword_10040B378)
  {
    result = swift_getWitnessTable("Y]\t", &type metadata for NANAttribute.DeviceCapability.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B378);
  }
  return result;
}

unint64_t sub_1001EA0B8()
{
  unint64_t result;

  result = qword_10040B380;
  if (!qword_10040B380)
  {
    result = swift_getWitnessTable(byte_10035A090, &type metadata for NANAttribute.DeviceCapability.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B380);
  }
  return result;
}

unint64_t sub_1001EA100()
{
  unint64_t result;

  result = qword_10040B388;
  if (!qword_10040B388)
  {
    result = swift_getWitnessTable(byte_100359FB0, &type metadata for NANAttribute.DeviceCapability.CommittedDiscoveryWindowInformation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B388);
  }
  return result;
}

unint64_t sub_1001EA148()
{
  unint64_t result;

  result = qword_10040B390;
  if (!qword_10040B390)
  {
    result = swift_getWitnessTable(byte_100359FD8, &type metadata for NANAttribute.DeviceCapability.CommittedDiscoveryWindowInformation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B390);
  }
  return result;
}

unint64_t sub_1001EA190()
{
  unint64_t result;

  result = qword_10040B398;
  if (!qword_10040B398)
  {
    result = swift_getWitnessTable(byte_100359EF8, &type metadata for NANAttribute.ClusterDiscovery.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B398);
  }
  return result;
}

unint64_t sub_1001EA1D8()
{
  unint64_t result;

  result = qword_10040B3A0;
  if (!qword_10040B3A0)
  {
    result = swift_getWitnessTable("Q^\t", &type metadata for NANAttribute.ClusterDiscovery.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B3A0);
  }
  return result;
}

unint64_t sub_1001EA220()
{
  unint64_t result;

  result = qword_10040B3A8;
  if (!qword_10040B3A8)
  {
    result = swift_getWitnessTable(byte_100359E40, &type metadata for NANAttribute.Ranging.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B3A8);
  }
  return result;
}

unint64_t sub_1001EA268()
{
  unint64_t result;

  result = qword_10040B3B0;
  if (!qword_10040B3B0)
  {
    result = swift_getWitnessTable("\t_\t", &type metadata for NANAttribute.Ranging.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B3B0);
  }
  return result;
}

unint64_t sub_1001EA2B0()
{
  unint64_t result;

  result = qword_10040B3B8;
  if (!qword_10040B3B8)
  {
    atomic_store(result, (unint64_t *)&qword_10040B3B8);
  }
  return result;
}

unint64_t sub_1001EA2F8()
{
  unint64_t result;

  result = qword_10040B3C0;
  if (!qword_10040B3C0)
  {
    result = swift_getWitnessTable(byte_100359DB0, &type metadata for NANAttribute.FurtherAvailabilityMap.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B3C0);
  }
  return result;
}

unint64_t sub_1001EA340()
{
  unint64_t result;

  result = qword_10040B3C8;
  if (!qword_10040B3C8)
  {
    result = swift_getWitnessTable(byte_100359CD0, &type metadata for NANAttribute.FurtherServiceDiscovery.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B3C8);
  }
  return result;
}

unint64_t sub_1001EA388()
{
  unint64_t result;

  result = qword_10040B3D0;
  if (!qword_10040B3D0)
  {
    atomic_store(result, (unint64_t *)&qword_10040B3D0);
  }
  return result;
}

unint64_t sub_1001EA3D0()
{
  unint64_t result;

  result = qword_10040B3D8;
  if (!qword_10040B3D8)
  {
    result = swift_getWitnessTable(byte_100359C18, &type metadata for NANAttribute.Mesh.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B3D8);
  }
  return result;
}

unint64_t sub_1001EA418()
{
  unint64_t result;

  result = qword_10040B3E0;
  if (!qword_10040B3E0)
  {
    result = swift_getWitnessTable("1a\t", &type metadata for NANAttribute.Mesh.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B3E0);
  }
  return result;
}

unint64_t sub_1001EA460()
{
  unint64_t result;

  result = qword_10040B3E8;
  if (!qword_10040B3E8)
  {
    result = swift_getWitnessTable("ab\t", &type metadata for NANAttribute.IBSS.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B3E8);
  }
  return result;
}

unint64_t sub_1001EA4A8()
{
  unint64_t result;

  result = qword_10040B3F0;
  if (!qword_10040B3F0)
  {
    result = swift_getWitnessTable(byte_100359B88, &type metadata for NANAttribute.IBSS.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B3F0);
  }
  return result;
}

unint64_t sub_1001EA4F0()
{
  unint64_t result;

  result = qword_10040B3F8;
  if (!qword_10040B3F8)
  {
    result = swift_getWitnessTable(byte_100359AA8, &type metadata for NANAttribute.P2POperation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B3F8);
  }
  return result;
}

unint64_t sub_1001EA538()
{
  unint64_t result;

  result = qword_10040B400;
  if (!qword_10040B400)
  {
    result = swift_getWitnessTable(byte_100359AD0, &type metadata for NANAttribute.P2POperation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B400);
  }
  return result;
}

unint64_t sub_1001EA580()
{
  unint64_t result;

  result = qword_10040B408;
  if (!qword_10040B408)
  {
    result = swift_getWitnessTable(byte_1003599F0, &type metadata for NANAttribute.WLANInfrastructure.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B408);
  }
  return result;
}

unint64_t sub_1001EA5C8()
{
  unint64_t result;

  result = qword_10040B410;
  if (!qword_10040B410)
  {
    result = swift_getWitnessTable("Yc\t", &type metadata for NANAttribute.WLANInfrastructure.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B410);
  }
  return result;
}

unint64_t sub_1001EA610()
{
  unint64_t result;

  result = qword_10040B418;
  if (!qword_10040B418)
  {
    result = swift_getWitnessTable(byte_100359938, &type metadata for NANAttribute.ServiceDescriptorExtension.RangeLimit.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B418);
  }
  return result;
}

unint64_t sub_1001EA658()
{
  unint64_t result;

  result = qword_10040B420;
  if (!qword_10040B420)
  {
    result = swift_getWitnessTable(byte_100359960, &type metadata for NANAttribute.ServiceDescriptorExtension.RangeLimit.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B420);
  }
  return result;
}

unint64_t sub_1001EA6A0()
{
  unint64_t result;

  result = qword_10040B428;
  if (!qword_10040B428)
  {
    result = swift_getWitnessTable("Ae\t", &type metadata for NANAttribute.ServiceIDList.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B428);
  }
  return result;
}

unint64_t sub_1001EA6E8()
{
  unint64_t result;

  result = qword_10040B430;
  if (!qword_10040B430)
  {
    result = swift_getWitnessTable(byte_1003598A8, &type metadata for NANAttribute.ServiceIDList.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B430);
  }
  return result;
}

unint64_t sub_1001EA730()
{
  unint64_t result;

  result = qword_10040B438;
  if (!qword_10040B438)
  {
    result = swift_getWitnessTable(byte_1003597C8, &type metadata for NANAttribute.Cluster.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B438);
  }
  return result;
}

unint64_t sub_1001EA778()
{
  unint64_t result;

  result = qword_10040B440;
  if (!qword_10040B440)
  {
    result = swift_getWitnessTable(byte_1003597F0, &type metadata for NANAttribute.Cluster.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B440);
  }
  return result;
}

unint64_t sub_1001EA7C0()
{
  unint64_t result;

  result = qword_10040B448;
  if (!qword_10040B448)
  {
    result = swift_getWitnessTable(byte_100359710, &type metadata for NANAttribute.MasterIndication.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B448);
  }
  return result;
}

unint64_t sub_1001EA808()
{
  unint64_t result;

  result = qword_10040B450;
  if (!qword_10040B450)
  {
    result = swift_getWitnessTable("9f\t", &type metadata for NANAttribute.MasterIndication.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B450);
  }
  return result;
}

char *sub_1001EA84C(uint64_t a1, int64_t a2)
{
  _QWORD *v2;
  _QWORD *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  char *result;
  int64_t v11;
  uint64_t v12;
  size_t v13;
  char *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_23;
  }
  v4 = (_QWORD *)*v2;
  v5 = *(_QWORD *)(*v2 + 16);
  if (v5 < a2)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  result = (char *)swift_isUniquelyReferenced_nonNull_native(*v2);
  if ((_DWORD)result && v9 <= v4[3] >> 1)
  {
    if (!v8)
      goto LABEL_21;
  }
  else
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    result = (char *)sub_1000B1920(result, v11, 1, v4);
    v4 = result;
    if (!v8)
      goto LABEL_21;
  }
  v12 = v4[2];
  v13 = v12 - a2;
  if (__OFSUB__(v12, a2))
    goto LABEL_27;
  if ((v13 & 0x8000000000000000) == 0)
  {
    result = (char *)v4 + a1 + 32;
    v14 = (char *)v4 + a2 + 32;
    if (a1 != a2 || result >= &v14[v13])
      result = (char *)memmove(result, v14, v13);
    v15 = v4[2];
    v16 = __OFADD__(v15, v8);
    v17 = v15 + v8;
    if (!v16)
    {
      v4[2] = v17;
LABEL_21:
      *v2 = v4;
      return result;
    }
    goto LABEL_28;
  }
LABEL_29:
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_1001EA9A0(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;

  result = (uint64_t)_swiftEmptyArrayStorage;
  v30 = _swiftEmptyArrayStorage;
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
    return result;
  v4 = 0;
  v5 = a1 + 32;
  v27 = a1 + 32;
  v28 = *(_QWORD *)(a1 + 16);
  while (1)
  {
    v6 = *(_QWORD *)(v5 + 8 * v4);
    v7 = v30;
    v8 = v30[2];
    v9 = *(_QWORD *)(v6 + 16);
    swift_bridgeObjectRetain(v6);
    result = swift_bridgeObjectRetain(v30);
    if (v9 >= v8)
    {
      v10 = v30;
    }
    else
    {
      result = (uint64_t)sub_1001EA84C(v9, v8);
      v10 = v30;
      v8 = v30[2];
      v9 = *(_QWORD *)(v6 + 16);
    }
    v11 = !v8 || v9 == 0;
    if (!v11)
      break;
LABEL_20:
    if (v8 != v9)
      goto LABEL_31;
    if (!v8)
      goto LABEL_25;
    if (v10 != (_QWORD *)v6)
    {
      if (*((unsigned __int8 *)v10 + 32) != *(unsigned __int8 *)(v6 + 32))
        goto LABEL_31;
      if (v8 == 1)
        goto LABEL_25;
      if (*((unsigned __int8 *)v10 + 33) == *(unsigned __int8 *)(v6 + 33))
      {
        v17 = 34;
        while (2 - v8 + v17 != 34)
        {
          v18 = *((unsigned __int8 *)v10 + v17);
          v19 = *(unsigned __int8 *)(v6 + v17++);
          if (v18 != v19)
            goto LABEL_31;
        }
LABEL_25:
        swift_bridgeObjectRelease(v10);
      }
      else
      {
LABEL_31:
        swift_bridgeObjectRelease(v10);
        v20 = v30[2];
        v21 = *(_QWORD *)(v6 + 16);
        if (v20)
        {
          if (v21)
          {
            result = swift_isUniquelyReferenced_nonNull_native(v30);
            if ((result & 1) == 0)
            {
              result = (uint64_t)sub_1001A87B8(v30);
              v7 = (_QWORD *)result;
            }
            v22 = 0;
            v23 = *(_QWORD *)(v6 + 16);
            while ((v21 & ~(v21 >> 63)) != v22)
            {
              if (v22 == v23)
                goto LABEL_54;
              v24 = v7[2];
              if (v22 >= v24)
                goto LABEL_55;
              *((_BYTE *)v7 + v22 + 32) |= *(_BYTE *)(v6 + 32 + v22);
              v25 = v22 + 1;
              if (v25 != v20)
              {
                v26 = v25 - 1;
                if (v26 == v20 - 1)
                  goto LABEL_56;
                v22 = v26 + 1;
                if (v22 != v21)
                  continue;
              }
              v30 = v7;
              v21 = v23;
              if (v24 >= v23)
                goto LABEL_44;
              goto LABEL_43;
            }
            goto LABEL_53;
          }
        }
        else
        {
          v24 = 0;
          if (v21 > 0)
LABEL_43:
            sub_1001A88E8(v6, v6 + 32, v24, (2 * v21) | 1);
        }
      }
LABEL_44:
      swift_bridgeObjectRelease(v6);
      goto LABEL_45;
    }
    swift_bridgeObjectRelease_n(v6, 2);
LABEL_45:
    if (++v4 == v3)
      return (uint64_t)v30;
  }
  v29 = v4;
  v12 = 0;
  v13 = v9 - 1;
  v14 = v8 - 1;
  v15 = v9 & ~(v9 >> 63);
  while (v15 != v12)
  {
    if (v12 >= *(_QWORD *)(v6 + 16))
      goto LABEL_51;
    v16 = *(_BYTE *)(v6 + 32 + v12);
    result = swift_isUniquelyReferenced_nonNull_native(v10);
    if ((result & 1) == 0)
    {
      result = (uint64_t)sub_1001A87B8(v10);
      v10 = (_QWORD *)result;
    }
    v8 = v10[2];
    if (v12 >= v8)
      goto LABEL_52;
    *((_BYTE *)v10 + v12 + 32) &= v16;
    if (v14 != v12)
    {
      v11 = v13 == v12++;
      if (!v11)
        continue;
    }
    v9 = *(_QWORD *)(v6 + 16);
    v3 = v28;
    v4 = v29;
    v5 = v27;
    goto LABEL_20;
  }
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  __break(1u);
LABEL_54:
  __break(1u);
LABEL_55:
  __break(1u);
LABEL_56:
  __break(1u);
  return result;
}

uint64_t sub_1001EAC80(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;

  result = (uint64_t)_swiftEmptyArrayStorage;
  v27 = _swiftEmptyArrayStorage;
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
    return result;
  v4 = 0;
  v5 = a1 + 32;
  while (1)
  {
    v6 = *(_QWORD *)(v5 + 8 * v4);
    v7 = v27;
    v8 = v27[2];
    v9 = *(_QWORD *)(v6 + 16);
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v27);
    if (v9 >= v8)
    {
      v10 = v27;
      if (!v8)
      {
LABEL_27:
        if (!v9)
          goto LABEL_43;
        goto LABEL_28;
      }
    }
    else
    {
      sub_1001EA84C(v9, v8);
      v9 = *(_QWORD *)(v6 + 16);
      v10 = v27;
      v8 = v27[2];
      if (!v8)
        goto LABEL_27;
    }
    if (v9)
    {
      result = swift_isUniquelyReferenced_nonNull_native(v10);
      if ((result & 1) == 0)
      {
        result = (uint64_t)sub_1001A87B8(v10);
        v10 = (_QWORD *)result;
      }
      v11 = 0;
      v12 = *(_QWORD *)(v6 + 16);
      v13 = 32;
      v14 = 1;
      do
      {
        if (v13 - (v9 & ~(v9 >> 63)) == 32)
        {
          __break(1u);
LABEL_47:
          __break(1u);
LABEL_48:
          __break(1u);
LABEL_49:
          __break(1u);
          goto LABEL_50;
        }
        if (v11 == v12)
          goto LABEL_47;
        v15 = v10[2];
        if (v11 >= v15)
          goto LABEL_48;
        *((_BYTE *)v10 + v13) &= *(_BYTE *)(v6 + v13);
        if (v14 == v8)
          break;
        if (v11 == v8 - 1)
          goto LABEL_49;
        ++v11;
        ++v14;
        ++v13;
      }
      while (v11 != v9);
      if (v15 != v12)
        goto LABEL_28;
      if (v10 != (_QWORD *)v6)
      {
        if (*((unsigned __int8 *)v10 + 32) != *(unsigned __int8 *)(v6 + 32))
          goto LABEL_28;
        if (v15 != 1)
        {
          if (*((unsigned __int8 *)v10 + 33) != *(unsigned __int8 *)(v6 + 33))
            goto LABEL_28;
          v16 = 2 - v15;
          v17 = 34;
          while (v16 + v17 != 34)
          {
            v18 = *((unsigned __int8 *)v10 + v17);
            v19 = *(unsigned __int8 *)(v6 + v17++);
            if (v18 != v19)
              goto LABEL_28;
          }
        }
LABEL_43:
        swift_bridgeObjectRelease(v10);
        swift_bridgeObjectRelease(v6);
        goto LABEL_4;
      }
      goto LABEL_3;
    }
LABEL_28:
    swift_bridgeObjectRelease(v10);
    v20 = v27[2];
    v21 = *(_QWORD *)(v6 + 16);
    if (!v20)
    {
      swift_bridgeObjectRetain(v6);
      v24 = 0;
      if (v21 > 0)
LABEL_42:
        sub_1001A88E8(v6, v6 + 32, v24, (2 * v21) | 1);
      goto LABEL_3;
    }
    swift_bridgeObjectRetain(v6);
    if (v21)
      break;
LABEL_3:
    swift_bridgeObjectRelease_n(v6, 2);
LABEL_4:
    if (++v4 == v3)
      return (uint64_t)v27;
  }
  result = swift_isUniquelyReferenced_nonNull_native(v27);
  if ((result & 1) == 0)
  {
    result = (uint64_t)sub_1001A87B8(v27);
    v7 = (_QWORD *)result;
  }
  v22 = 0;
  v23 = *(_QWORD *)(v6 + 16);
  while ((v21 & ~(v21 >> 63)) != v22)
  {
    if (v22 == v23)
      goto LABEL_51;
    v24 = v7[2];
    if (v22 >= v24)
      goto LABEL_52;
    *((_BYTE *)v7 + v22 + 32) |= *(_BYTE *)(v6 + 32 + v22);
    v25 = v22 + 1;
    if (v25 != v20)
    {
      v26 = v25 - 1;
      if (v26 == v20 - 1)
        goto LABEL_53;
      v22 = v26 + 1;
      if (v22 != v21)
        continue;
    }
    v27 = v7;
    v21 = v23;
    if (v24 >= v23)
      goto LABEL_3;
    goto LABEL_42;
  }
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
LABEL_53:
  __break(1u);
  return result;
}

void sub_1001EAF68(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  BOOL v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  int v16;
  int v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;

  v26 = _swiftEmptyArrayStorage;
  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return;
  v2 = 0;
  v25 = a1 + 32;
  v24 = *(_QWORD *)(a1 + 16);
  while (1)
  {
    v4 = *(_QWORD *)(v25 + 8 * v2);
    v5 = v26;
    v6 = v26[2];
    v7 = *(_QWORD *)(v4 + 16);
    swift_bridgeObjectRetain(v4);
    swift_bridgeObjectRetain(v26);
    if (v7 >= v6)
    {
      v8 = v26;
    }
    else
    {
      sub_1001EA84C(v7, v6);
      v8 = v26;
      v6 = v26[2];
      v7 = *(_QWORD *)(v4 + 16);
    }
    v9 = !v6 || v7 == 0;
    if (!v9)
      break;
LABEL_23:
    if (v6 == v7)
    {
      if (!v6)
        goto LABEL_3;
      if (v8 == (_QWORD *)v4)
      {
        v3 = (_QWORD *)v4;
        goto LABEL_4;
      }
      if (*((unsigned __int8 *)v8 + 32) == *(unsigned __int8 *)(v4 + 32))
      {
        if (v6 == 1)
          goto LABEL_3;
        if (*((unsigned __int8 *)v8 + 33) == *(unsigned __int8 *)(v4 + 33))
        {
          v15 = 0;
          while (v6 - 2 != v15)
          {
            v16 = *((unsigned __int8 *)v8 + v15 + 34);
            v17 = *(unsigned __int8 *)(v4 + 34 + v15++);
            if (v16 != v17)
              goto LABEL_32;
          }
LABEL_3:
          v3 = v8;
LABEL_4:
          swift_bridgeObjectRelease(v3);
          goto LABEL_5;
        }
      }
    }
LABEL_32:
    swift_bridgeObjectRelease(v8);
    v18 = v26[2];
    if (v18)
    {
      v19 = *(_QWORD *)(v4 + 16);
      if (v19)
      {
        v20 = 0;
        v21 = v18 - 1;
        while ((v19 & ~(v19 >> 63)) != v20)
        {
          if (v20 >= *(_QWORD *)(v4 + 16))
            goto LABEL_51;
          v22 = *(_BYTE *)(v4 + 32 + v20);
          if ((swift_isUniquelyReferenced_nonNull_native(v5) & 1) == 0)
            v5 = sub_1001A87B8(v5);
          v18 = v5[2];
          if (v20 >= v18)
            goto LABEL_52;
          *((_BYTE *)v5 + v20 + 32) |= v22;
          if (v21 != v20 && v19 != ++v20)
            continue;
          v26 = v5;
          goto LABEL_43;
        }
        goto LABEL_50;
      }
    }
LABEL_43:
    v23 = *(_QWORD *)(v4 + 16);
    if (v18 < v23)
      sub_1001A88E8(v4, v4 + 32, v18, (2 * v23) | 1);
LABEL_5:
    ++v2;
    swift_bridgeObjectRelease(v4);
    if (v2 == v1)
      return;
  }
  v10 = 0;
  v11 = v7 - 1;
  v12 = v6 - 1;
  v13 = v7 & ~(v7 >> 63);
  while (v13 != v10)
  {
    if (v10 >= *(_QWORD *)(v4 + 16))
      goto LABEL_48;
    v14 = *(_BYTE *)(v4 + 32 + v10);
    if ((swift_isUniquelyReferenced_nonNull_native(v8) & 1) == 0)
      v8 = sub_1001A87B8(v8);
    v6 = v8[2];
    if (v10 >= v6)
      goto LABEL_49;
    *((_BYTE *)v8 + v10 + 32) &= v14;
    if (v12 != v10)
    {
      v9 = v11 == v10++;
      if (!v9)
        continue;
    }
    v7 = *(_QWORD *)(v4 + 16);
    v1 = v24;
    goto LABEL_23;
  }
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  __break(1u);
}

void sub_1001EB224(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  int v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;

  v27 = _swiftEmptyArrayStorage;
  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return;
  v2 = 0;
  v3 = a1 + 32;
  v26 = *(_QWORD *)(a1 + 16);
  while (1)
  {
    v5 = *(_QWORD *)(v3 + 8 * v2);
    v6 = v27;
    v7 = v27[2];
    v8 = *(_QWORD *)(v5 + 16);
    swift_bridgeObjectRetain(v5);
    swift_bridgeObjectRetain(v27);
    if (v8 >= v7)
    {
      v9 = v27;
      if (!v7)
      {
LABEL_28:
        if (!v8)
          goto LABEL_3;
        goto LABEL_29;
      }
    }
    else
    {
      sub_1001EA84C(v8, v7);
      v8 = *(_QWORD *)(v5 + 16);
      v9 = v27;
      v7 = v27[2];
      if (!v7)
        goto LABEL_28;
    }
    if (v8)
    {
      if ((swift_isUniquelyReferenced_nonNull_native(v9) & 1) == 0)
        v9 = sub_1001A87B8(v9);
      v10 = 0;
      v11 = *(_QWORD *)(v5 + 16);
      v12 = 32;
      v13 = 1;
      do
      {
        if (v12 - (v8 & ~(v8 >> 63)) == 32)
        {
          __break(1u);
LABEL_45:
          __break(1u);
LABEL_46:
          __break(1u);
LABEL_47:
          __break(1u);
          goto LABEL_48;
        }
        if (v10 == v11)
          goto LABEL_45;
        v14 = v9[2];
        if (v10 >= v14)
          goto LABEL_46;
        *((_BYTE *)v9 + v12) &= *(_BYTE *)(v5 + v12);
        if (v13 == v7)
          break;
        if (v10 == v7 - 1)
          goto LABEL_47;
        ++v10;
        ++v13;
        ++v12;
      }
      while (v10 != v8);
      if (v14 != v11)
        goto LABEL_29;
      if (v9 == (_QWORD *)v5)
      {
        v4 = (_QWORD *)v5;
        goto LABEL_4;
      }
      if (*((unsigned __int8 *)v9 + 32) != *(unsigned __int8 *)(v5 + 32))
        goto LABEL_29;
      if (v14 != 1)
      {
        if (*((unsigned __int8 *)v9 + 33) != *(unsigned __int8 *)(v5 + 33))
          goto LABEL_29;
        v15 = 0;
        v16 = v14 - 2;
        while (v16 != v15)
        {
          v17 = *((unsigned __int8 *)v9 + v15 + 34);
          v18 = *(unsigned __int8 *)(v5 + 34 + v15++);
          if (v17 != v18)
            goto LABEL_29;
        }
      }
LABEL_3:
      v4 = v9;
LABEL_4:
      swift_bridgeObjectRelease(v4);
      goto LABEL_5;
    }
LABEL_29:
    swift_bridgeObjectRelease(v9);
    v19 = v27[2];
    if (v19)
    {
      v20 = *(_QWORD *)(v5 + 16);
      if (v20)
        break;
    }
LABEL_40:
    v25 = *(_QWORD *)(v5 + 16);
    if (v19 < v25)
      sub_1001A88E8(v5, v5 + 32, v19, (2 * v25) | 1);
LABEL_5:
    ++v2;
    swift_bridgeObjectRelease(v5);
    if (v2 == v1)
      return;
  }
  v21 = v3;
  v22 = 0;
  v23 = v19 - 1;
  while ((v20 & ~(v20 >> 63)) != v22)
  {
    if (v22 >= *(_QWORD *)(v5 + 16))
      goto LABEL_49;
    v24 = *(_BYTE *)(v5 + 32 + v22);
    if ((swift_isUniquelyReferenced_nonNull_native(v6) & 1) == 0)
      v6 = sub_1001A87B8(v6);
    v19 = v6[2];
    if (v22 >= v19)
      goto LABEL_50;
    *((_BYTE *)v6 + v22 + 32) |= v24;
    if (v23 != v22 && v20 != ++v22)
      continue;
    v27 = v6;
    v3 = v21;
    v1 = v26;
    goto LABEL_40;
  }
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  __break(1u);
}

uint64_t sub_1001EB4E8(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  char v6;

  if (a1 == 0xD000000000000010)
  {
    v4 = 0x8000000100364D00;
    if (a2 == 0x8000000100364D00)
      goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x8000000100364D00, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (a1 == 0x61466D6F646E6172 && a2 == 0xEC000000726F7463)
  {
    swift_bridgeObjectRelease(0xEC000000726F7463);
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x61466D6F646E6172, 0xEC000000726F7463, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1001EB5EC(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v6;
  char v7;

  if (a1 == 0xD000000000000010)
  {
    v4 = 0x80000001003678B0;
    if (a2 == 0x80000001003678B0)
      goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x80000001003678B0, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (a1 == 0x746E756F43706F68 && a2 == 0xE800000000000000)
  {
    v6 = 0xE800000000000000;
LABEL_11:
    swift_bridgeObjectRelease(v6);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x746E756F43706F68, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v6 = a2;
    goto LABEL_11;
  }
  if (a1 == 0xD000000000000022 && a2 == 0x8000000100364AC0)
  {
    swift_bridgeObjectRelease(0x8000000100364AC0);
    return 2;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000022, 0x8000000100364AC0, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_1001EB738(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x6573736572646461 && a2 == 0xE900000000000073)
  {
    v5 = 0xE900000000000073;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6573736572646461, 0xE900000000000073, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6564756C636E69 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease(0xE700000000000000);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6564756C636E69, 0xE700000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1001EB834(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  char v6;

  if (a1 == 0xD000000000000011)
  {
    v4 = 0x80000001003678D0;
    if (a2 == 0x80000001003678D0)
      goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x80000001003678D0, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (a1 == 0xD000000000000010 && a2 == 0x80000001003678F0)
  {
    swift_bridgeObjectRelease(0x80000001003678F0);
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x80000001003678F0, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1001EB91C(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  char v8;

  if (a1 == 0xD000000000000010)
  {
    v4 = 0x8000000100367910;
    if (a2 == 0x8000000100367910)
      goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x8000000100367910, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (a1 == 0xD000000000000018 && a2 == 0x8000000100367930)
  {
    v6 = 0x8000000100367930;
LABEL_11:
    swift_bridgeObjectRelease(v6);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000018, 0x8000000100367930, a1, a2, 0) & 1) != 0)
  {
    v6 = a2;
    goto LABEL_11;
  }
  if (a1 == 0x6962616C69617661 && a2 == 0xEC0000007974696CLL)
  {
    v7 = 0xEC0000007974696CLL;
LABEL_17:
    swift_bridgeObjectRelease(v7);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6962616C69617661, 0xEC0000007974696CLL, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_17;
  }
  if (a1 == 1701605234 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease(0xE400000000000000);
    return 3;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(1701605234, 0xE400000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_1001EBAD4(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  char v8;

  if (a1 == 1701605234 && a2 == 0xE400000000000000)
  {
    v5 = 0xE400000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1701605234, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x657264644163616DLL && a2 == 0xEA00000000007373)
  {
    v7 = 0xEA00000000007373;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x657264644163616DLL, 0xEA00000000007373, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x6962616C69617661 && a2 == 0xEC0000007974696CLL)
  {
    swift_bridgeObjectRelease(0xEC0000007974696CLL);
    return 2;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6962616C69617661, 0xEC0000007974696CLL, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_1001EBC3C(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  char v8;

  if (a1 == 0x4953534273736269 && a2 == 0xE900000000000044)
  {
    v5 = 0xE900000000000044;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4953534273736269, 0xE900000000000044, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x657264644163616DLL && a2 == 0xEA00000000007373)
  {
    v7 = 0xEA00000000007373;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x657264644163616DLL, 0xEA00000000007373, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x6962616C69617661 && a2 == 0xEC0000007974696CLL)
  {
    swift_bridgeObjectRelease(0xEC0000007974696CLL);
    return 2;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6962616C69617661, 0xEC0000007974696CLL, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_1001EBDC0(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  char v8;

  if (a1 == 0x657264644163616DLL && a2 == 0xEA00000000007373)
  {
    v5 = 0xEA00000000007373;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x657264644163616DLL, 0xEA00000000007373, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6962616C69617661 && a2 == 0xEC0000007974696CLL)
  {
    v7 = 0xEC0000007974696CLL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6962616C69617661, 0xEC0000007974696CLL, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x44496873656DLL && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease(0xE600000000000000);
    return 2;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x44496873656DLL, 0xE600000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_1001EBF30(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x444970616DLL && a2 == 0xE500000000000000)
  {
    v5 = 0xE500000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x444970616DLL, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0xD000000000000013 && a2 == 0x8000000100367950)
  {
    swift_bridgeObjectRelease(0x8000000100367950);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, 0x8000000100367950, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1001EC014(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x657264644163616DLL && a2 == 0xEA00000000007373)
  {
    v5 = 0xEA00000000007373;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x657264644163616DLL, 0xEA00000000007373, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 1635017060 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease(0xE400000000000000);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(1635017060, 0xE400000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1001EC100(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  char v8;

  if (a1 == 0x4972657473756C63 && a2 == 0xE900000000000044)
  {
    v5 = 0xE900000000000044;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4972657473756C63, 0xE900000000000044, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x7366664F656D6974 && a2 == 0xEA00000000007465)
  {
    v7 = 0xEA00000000007465;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7366664F656D6974, 0xEA00000000007465, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0xD000000000000010 && a2 == 0x80000001003678B0)
  {
    swift_bridgeObjectRelease(0x80000001003678B0);
    return 2;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x80000001003678B0, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_1001EC268(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char v12;

  if (a1 == 0x444970616DLL && a2 == 0xE500000000000000)
  {
    v5 = 0xE500000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x444970616DLL, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0xD000000000000023 && a2 == 0x8000000100367970)
  {
    v7 = 0x8000000100367970;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000023, 0x8000000100367970, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x6574726F70707573 && a2 == 0xEE0073646E614264)
  {
    v8 = 0xEE0073646E614264;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6574726F70707573, 0xEE0073646E614264, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 1701080941 && a2 == 0xE400000000000000)
  {
    v9 = 0xE400000000000000;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1701080941, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_26;
  }
  if (a1 == 0xD000000000000010)
  {
    v10 = 0x80000001003679A0;
    if (a2 == 0x80000001003679A0)
      goto LABEL_31;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x80000001003679A0, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
LABEL_31:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if (a1 == 0xD000000000000024 && a2 == 0x80000001003679C0)
  {
    v11 = 0x80000001003679C0;
LABEL_37:
    swift_bridgeObjectRelease(v11);
    return 5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000024, 0x80000001003679C0, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
    goto LABEL_37;
  }
  if (a1 == 0x696C696261706163 && a2 == 0xEC00000073656974)
  {
    swift_bridgeObjectRelease(0xEC00000073656974);
    return 6;
  }
  else
  {
    v12 = _stringCompareWithSmolCheck(_:_:expecting:)(0x696C696261706163, 0xEC00000073656974, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v12 & 1) != 0)
      return 6;
    else
      return 7;
  }
}

uint64_t sub_1001EC558(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  char v8;

  if (a1 == 0x65636E6575716573 && a2 == 0xEA00000000004449)
  {
    v5 = 0xEA00000000004449;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x65636E6575716573, 0xEA00000000004449, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6C6F72746E6F63 && a2 == 0xE700000000000000)
  {
    v7 = 0xE700000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6C6F72746E6F63, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0xD000000000000013 && a2 == 0x8000000100367950)
  {
    swift_bridgeObjectRelease(0x8000000100367950);
    return 2;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, 0x8000000100367950, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_1001EC6B4(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  char v8;

  if (a1 == 0x4972657473756C63 && a2 == 0xE900000000000044)
  {
    v5 = 0xE900000000000044;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4972657473756C63, 0xE900000000000044, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6C6F72746E6F63 && a2 == 0xE700000000000000)
  {
    v7 = 0xE700000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6C6F72746E6F63, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x656C756465686373 && a2 == 0xEF73656972746E45)
  {
    swift_bridgeObjectRelease(0xEF73656972746E45);
    return 2;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x656C756465686373, 0xEF73656972746E45, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_1001EC838(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  char v6;

  if (a1 == 0xD000000000000010)
  {
    v4 = 0x80000001003679F0;
    if (a2 == 0x80000001003679F0)
      goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x80000001003679F0, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (a1 == 0x4C6D756D6978616DLL && a2 == 0xEE0079636E657461)
  {
    swift_bridgeObjectRelease(0xEE0079636E657461);
    return 1;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x4C6D756D6978616DLL, 0xEE0079636E657461, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1001EC948(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x73444970616DLL && a2 == 0xE600000000000000)
  {
    v5 = 0xE600000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x73444970616DLL, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 1635017060 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease(0xE400000000000000);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(1635017060, 0xE400000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1001ECA20(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char v9;

  if (a1 == 0xD000000000000010)
  {
    v4 = 0x8000000100367910;
    if (a2 == 0x8000000100367910)
      goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x8000000100367910, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (a1 == 0xD000000000000018 && a2 == 0x8000000100367930)
  {
    v6 = 0x8000000100367930;
LABEL_11:
    swift_bridgeObjectRelease(v6);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000018, 0x8000000100367930, a1, a2, 0) & 1) != 0)
  {
    v6 = a2;
    goto LABEL_11;
  }
  if (a1 == 1701605234 && a2 == 0xE400000000000000)
  {
    v7 = 0xE400000000000000;
LABEL_17:
    swift_bridgeObjectRelease(v7);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1701605234, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_17;
  }
  if (a1 == 0xD00000000000001BLL && a2 == 0x8000000100367A10)
  {
    v8 = 0x8000000100367A10;
LABEL_23:
    swift_bridgeObjectRelease(v8);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001BLL, 0x8000000100367A10, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_23;
  }
  if (a1 == 0xD000000000000011 && a2 == 0x8000000100367A30)
  {
    swift_bridgeObjectRelease(0x8000000100367A30);
    return 4;
  }
  else
  {
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x8000000100367A30, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v9 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t sub_1001ECC0C(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  char v9;

  if (a1 == 1701605234 && a2 == 0xE400000000000000)
  {
    v5 = 0xE400000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1701605234, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x657264644163616DLL && a2 == 0xEA00000000007373)
  {
    v7 = 0xEA00000000007373;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x657264644163616DLL, 0xEA00000000007373, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0xD00000000000001BLL)
  {
    v8 = 0x8000000100367A10;
    if (a2 == 0x8000000100367A10)
      goto LABEL_19;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001BLL, 0x8000000100367A10, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_19:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if (a1 == 0xD000000000000011 && a2 == 0x8000000100367A30)
  {
    swift_bridgeObjectRelease(0x8000000100367A30);
    return 3;
  }
  else
  {
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x8000000100367A30, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v9 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_1001ECDB8(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  char v9;

  if (a1 == 0x4953534273736269 && a2 == 0xE900000000000044)
  {
    v5 = 0xE900000000000044;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4953534273736269, 0xE900000000000044, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x657264644163616DLL && a2 == 0xEA00000000007373)
  {
    v7 = 0xEA00000000007373;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x657264644163616DLL, 0xEA00000000007373, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0xD00000000000001BLL)
  {
    v8 = 0x8000000100367A10;
    if (a2 == 0x8000000100367A10)
      goto LABEL_19;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001BLL, 0x8000000100367A10, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_19:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if (a1 == 0xD000000000000011 && a2 == 0x8000000100367A30)
  {
    swift_bridgeObjectRelease(0x8000000100367A30);
    return 3;
  }
  else
  {
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x8000000100367A30, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v9 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_1001ECF80(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  char v9;

  if (a1 == 0x657264644163616DLL && a2 == 0xEA00000000007373)
  {
    v5 = 0xEA00000000007373;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x657264644163616DLL, 0xEA00000000007373, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0xD00000000000001BLL)
  {
    v7 = 0x8000000100367A10;
    if (a2 == 0x8000000100367A10)
      goto LABEL_13;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001BLL, 0x8000000100367A10, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
LABEL_13:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if (a1 == 0xD000000000000011)
  {
    v8 = 0x8000000100367A30;
    if (a2 == 0x8000000100367A30)
      goto LABEL_18;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x8000000100367A30, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_18:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if (a1 == 0x44496873656DLL && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease(0xE600000000000000);
    return 3;
  }
  else
  {
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(0x44496873656DLL, 0xE600000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v9 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

uint64_t sub_1001ED130(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char v11;

  if (a1 == 0x6D69547472617473 && a2 == 0xE900000000000065)
  {
    v5 = 0xE900000000000065;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6D69547472617473, 0xE900000000000065, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6469737362 && a2 == 0xE500000000000000)
  {
    v7 = 0xE500000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6469737362, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x746E4565676E6172 && a2 == 0xEB00000000317972)
  {
    v8 = 0xEB00000000317972;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x746E4565676E6172, 0xEB00000000317972, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x746E4565676E6172 && a2 == 0xEB00000000327972)
  {
    v9 = 0xEB00000000327972;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x746E4565676E6172, 0xEB00000000327972, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_26;
  }
  if (a1 == 0x746E4565676E6172 && a2 == 0xEB00000000337972)
  {
    v10 = 0xEB00000000337972;
LABEL_32:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x746E4565676E6172, 0xEB00000000337972, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_32;
  }
  if (a1 == 0xD000000000000019 && a2 == 0x8000000100367A50)
  {
    swift_bridgeObjectRelease(0x8000000100367A50);
    return 5;
  }
  else
  {
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000019, 0x8000000100367A50, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v11 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

uint64_t sub_1001ED3A8(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x7553726568706963 && a2 == 0xEB00000000657469)
  {
    v5 = 0xEB00000000657469;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7553726568706963, 0xEB00000000657469, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x496873696C627570 && a2 == 0xE900000000000044)
  {
    swift_bridgeObjectRelease(0xE900000000000044);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x496873696C627570, 0xE900000000000044, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1001ED4BC(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x696C696261706163 && a2 == 0xEC00000073656974)
  {
    v5 = 0xEC00000073656974;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x696C696261706163, 0xEC00000073656974, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x7553726568706963 && a2 == 0xEC00000073657469)
  {
    swift_bridgeObjectRelease(0xEC00000073657469);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x7553726568706963, 0xEC00000073657469, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1001ED5C8(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 0xD000000000000012 && a2 == 0x8000000100367A70)
  {
    swift_bridgeObjectRelease(0x8000000100367A70);
    v3 = 0;
  }
  else
  {
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, 0x8000000100367A70, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    v3 = v4 ^ 1;
  }
  return v3 & 1;
}

uint64_t sub_1001ED64C(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x496873696C627570 && a2 == 0xE900000000000044)
  {
    v5 = 0xE900000000000044;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x496873696C627570, 0xE900000000000044, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 1635017060 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease(0xE400000000000000);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(1635017060, 0xE400000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1001ED738(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char v10;

  if (a1 == 0x444967736D6ELL && a2 == 0xE600000000000000)
  {
    v5 = 0xE600000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x444967736D6ELL, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0xD000000000000012)
  {
    v7 = 0x8000000100367A90;
    if (a2 == 0x8000000100367A90)
      goto LABEL_13;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, 0x8000000100367A90, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
LABEL_13:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if (a1 == 0x6C6F72746E6F63 && a2 == 0xE700000000000000)
  {
    v8 = 0xE700000000000000;
LABEL_19:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6C6F72746E6F63, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_19;
  }
  if (a1 == 0x6E6F73616572 && a2 == 0xE600000000000000)
  {
    v9 = 0xE600000000000000;
LABEL_25:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F73616572, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_25;
  }
  if (a1 == 0xD00000000000001ELL && a2 == 0x8000000100367AB0)
  {
    swift_bridgeObjectRelease(0x8000000100367AB0);
    return 4;
  }
  else
  {
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001ELL, 0x8000000100367AB0, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v10 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t sub_1001ED938(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;

  if (a1 == 0xD000000000000021 && a2 == 0x8000000100367AD0)
  {
    swift_bridgeObjectRelease(0x8000000100367AD0);
    v3 = 0;
  }
  else
  {
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000021, 0x8000000100367AD0, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    v3 = v4 ^ 1;
  }
  return v3 & 1;
}

uint64_t sub_1001ED9BC(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  char v8;

  if (a1 == 0x6556726568706963 && a2 == 0xED00006E6F697372)
  {
    v5 = 0xED00006E6F697372;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6556726568706963, 0xED00006E6F697372, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x65636E6F6ELL && a2 == 0xE500000000000000)
  {
    v7 = 0xE500000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x65636E6F6ELL, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 6775156 && a2 == 0xE300000000000000)
  {
    swift_bridgeObjectRelease(0xE300000000000000);
    return 2;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(6775156, 0xE300000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_1001EDB1C(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 6911343 && a2 == 0xE300000000000000)
  {
    v5 = 0xE300000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(6911343, 0xE300000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 1635017060 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease(0xE400000000000000);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(1635017060, 0xE400000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1001EDBEC(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  char v9;

  if (a1 == 0x6E6F6973726576 && a2 == 0xE700000000000000)
  {
    v5 = 0xE700000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F6973726576, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6D726F6674616C70 && a2 == 0xEC00000065707954)
  {
    v7 = 0xEC00000065707954;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6D726F6674616C70, 0xEC00000065707954, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x7367616C66 && a2 == 0xE500000000000000)
  {
    v8 = 0xE500000000000000;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7367616C66, 0xE500000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0xD000000000000010 && a2 == 0x8000000100367B00)
  {
    swift_bridgeObjectRelease(0x8000000100367B00);
    return 3;
  }
  else
  {
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x8000000100367B00, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v9 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

unint64_t sub_1001EDDB0()
{
  unint64_t result;

  result = qword_10040B458;
  if (!qword_10040B458)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.AttributeType, &type metadata for NANAttribute.AttributeType);
    atomic_store(result, (unint64_t *)&qword_10040B458);
  }
  return result;
}

unint64_t sub_1001EDDF4()
{
  unint64_t result;

  result = qword_10040B460;
  if (!qword_10040B460)
  {
    result = swift_getWitnessTable("Eu\t", &type metadata for NANAttribute.CustomDeviceInformation.PlatformType);
    atomic_store(result, (unint64_t *)&qword_10040B460);
  }
  return result;
}

unint64_t sub_1001EDE38()
{
  unint64_t result;

  result = qword_10040B468;
  if (!qword_10040B468)
  {
    result = swift_getWitnessTable("\r{\t", &type metadata for NANAttribute.PairingBootstrapping.Status);
    atomic_store(result, (unint64_t *)&qword_10040B468);
  }
  return result;
}

unint64_t sub_1001EDE7C()
{
  unint64_t result;

  result = qword_10040B470;
  if (!qword_10040B470)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.PairingBootstrapping.PairingType, &type metadata for NANAttribute.PairingBootstrapping.PairingType);
    atomic_store(result, (unint64_t *)&qword_10040B470);
  }
  return result;
}

unint64_t sub_1001EDEC0()
{
  unint64_t result;

  result = qword_10040B478;
  if (!qword_10040B478)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.PairingIdentityResolution.CipherVersion, &type metadata for NANAttribute.PairingIdentityResolution.CipherVersion);
    atomic_store(result, (unint64_t *)&qword_10040B478);
  }
  return result;
}

unint64_t sub_1001EDF04()
{
  unint64_t result;

  result = qword_10040B480;
  if (!qword_10040B480)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.SecurityContextInformation.SecurityContextIdentifier.IdentifierType, &type metadata for NANAttribute.SecurityContextInformation.SecurityContextIdentifier.IdentifierType);
    atomic_store(result, (unint64_t *)&qword_10040B480);
  }
  return result;
}

unint64_t sub_1001EDF48()
{
  unint64_t result;

  result = qword_10040B488;
  if (!qword_10040B488)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.RangingSetup.Status, &type metadata for NANAttribute.RangingSetup.Status);
    atomic_store(result, (unint64_t *)&qword_10040B488);
  }
  return result;
}

unint64_t sub_1001EDF8C()
{
  unint64_t result;

  result = qword_10040B490;
  if (!qword_10040B490)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.RangingSetup.AttributeType, &type metadata for NANAttribute.RangingSetup.AttributeType);
    atomic_store(result, (unint64_t *)&qword_10040B490);
  }
  return result;
}

unint64_t sub_1001EDFD0()
{
  unint64_t result;

  result = qword_10040B498;
  if (!qword_10040B498)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.DeviceLink.Status, &type metadata for NANAttribute.DeviceLink.Status);
    atomic_store(result, (unint64_t *)&qword_10040B498);
  }
  return result;
}

unint64_t sub_1001EE014()
{
  unint64_t result;

  result = qword_10040B4A0;
  if (!qword_10040B4A0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.DeviceLink.AttributeType, &type metadata for NANAttribute.DeviceLink.AttributeType);
    atomic_store(result, (unint64_t *)&qword_10040B4A0);
  }
  return result;
}

unint64_t sub_1001EE058()
{
  unint64_t result;

  result = qword_10040B4A8;
  if (!qword_10040B4A8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.DatapathExtension.ServiceInfoType, &type metadata for NANAttribute.DatapathExtension.ServiceInfoType);
    atomic_store(result, (unint64_t *)&qword_10040B4A8);
  }
  return result;
}

unint64_t sub_1001EE09C()
{
  unint64_t result;

  result = qword_10040B4B0;
  if (!qword_10040B4B0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.Datapath.Status, &type metadata for NANAttribute.Datapath.Status);
    atomic_store(result, (unint64_t *)&qword_10040B4B0);
  }
  return result;
}

unint64_t sub_1001EE0E0()
{
  unint64_t result;

  result = qword_10040B4B8;
  if (!qword_10040B4B8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.Datapath.AttributeType, &type metadata for NANAttribute.Datapath.AttributeType);
    atomic_store(result, (unint64_t *)&qword_10040B4B8);
  }
  return result;
}

uint64_t sub_1001EE124(unint64_t a1, unint64_t a2)
{
  uint64_t v2;

  return sub_1001AB210(a1, a2, *(_QWORD **)(v2 + 16), **(_QWORD **)(v2 + 24));
}

unint64_t sub_1001EE140()
{
  unint64_t result;

  result = qword_10040B4C0;
  if (!qword_10040B4C0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.DeviceCapabilityExtension.RegulatoryInformationForSixGHz, &type metadata for NANAttribute.DeviceCapabilityExtension.RegulatoryInformationForSixGHz);
    atomic_store(result, (unint64_t *)&qword_10040B4C0);
  }
  return result;
}

unint64_t sub_1001EE184()
{
  unint64_t result;

  result = qword_10040B4C8;
  if (!qword_10040B4C8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.WLANInfrastructure.DeviceRole, &type metadata for NANAttribute.WLANInfrastructure.DeviceRole);
    atomic_store(result, (unint64_t *)&qword_10040B4C8);
  }
  return result;
}

uint64_t sub_1001EE1C8(unint64_t a1, unint64_t a2)
{
  uint64_t v2;

  return sub_1001AB178(a1, a2, *(_QWORD **)(v2 + 16), **(_QWORD **)(v2 + 24));
}

unint64_t sub_1001EE1E4()
{
  unint64_t result;

  result = qword_10040B4F8;
  if (!qword_10040B4F8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANReasonCode, &type metadata for NANReasonCode);
    atomic_store(result, (unint64_t *)&qword_10040B4F8);
  }
  return result;
}

unint64_t sub_1001EE228()
{
  unint64_t result;

  result = qword_10040B500;
  if (!qword_10040B500)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.PairingBootstrapping.Method, &type metadata for NANAttribute.PairingBootstrapping.Method);
    atomic_store(result, (unint64_t *)&qword_10040B500);
  }
  return result;
}

unint64_t sub_1001EE26C()
{
  unint64_t result;

  result = qword_10040B508;
  if (!qword_10040B508)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.PairingIdentityResolution.CipherVersion, &type metadata for NANAttribute.PairingIdentityResolution.CipherVersion);
    atomic_store(result, (unint64_t *)&qword_10040B508);
  }
  return result;
}

unint64_t sub_1001EE2B0()
{
  unint64_t result;

  result = qword_10040B520;
  if (!qword_10040B520)
  {
    result = swift_getWitnessTable("\r#\n", &type metadata for NANScheduleEntry);
    atomic_store(result, (unint64_t *)&qword_10040B520);
  }
  return result;
}

unint64_t sub_1001EE2F4()
{
  unint64_t result;

  result = qword_10040B530;
  if (!qword_10040B530)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.MulticastScheduleChange.Control, &type metadata for NANAttribute.MulticastScheduleChange.Control);
    atomic_store(result, (unint64_t *)&qword_10040B530);
  }
  return result;
}

unint64_t sub_1001EE338()
{
  unint64_t result;

  result = qword_10040B550;
  if (!qword_10040B550)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.SecurityContextInformation.SecurityContextIdentifier, &type metadata for NANAttribute.SecurityContextInformation.SecurityContextIdentifier);
    atomic_store(result, (unint64_t *)&qword_10040B550);
  }
  return result;
}

unint64_t sub_1001EE37C()
{
  unint64_t result;

  result = qword_10040B560;
  if (!qword_10040B560)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.CipherSuiteInformation.Capabilities, &type metadata for NANAttribute.CipherSuiteInformation.Capabilities);
    atomic_store(result, (unint64_t *)&qword_10040B560);
  }
  return result;
}

unint64_t sub_1001EE3C0()
{
  unint64_t result;

  result = qword_10040B570;
  if (!qword_10040B570)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.CipherSuiteInformation.CipherSuite, &type metadata for NANAttribute.CipherSuiteInformation.CipherSuite);
    atomic_store(result, (unint64_t *)&qword_10040B570);
  }
  return result;
}

unint64_t sub_1001EE404()
{
  unint64_t result;

  result = qword_10040B580;
  if (!qword_10040B580)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANCipherSuite, &type metadata for NANCipherSuite);
    atomic_store(result, (unint64_t *)&qword_10040B580);
  }
  return result;
}

unint64_t sub_1001EE448()
{
  unint64_t result;

  result = qword_10040B588;
  if (!qword_10040B588)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.FineTimingMeasurementRangeReport.Entry, &type metadata for NANAttribute.FineTimingMeasurementRangeReport.Entry);
    atomic_store(result, (unint64_t *)&qword_10040B588);
  }
  return result;
}

unint64_t sub_1001EE48C()
{
  unint64_t result;

  result = qword_10040B5A0;
  if (!qword_10040B5A0)
  {
    result = swift_getWitnessTable("M \n", &type metadata for NonNANOperatingChannelInformation);
    atomic_store(result, (unint64_t *)&qword_10040B5A0);
  }
  return result;
}

unint64_t sub_1001EE4D0()
{
  unint64_t result;

  result = qword_10040B5A8;
  if (!qword_10040B5A8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NonNANBeaconInformation, &type metadata for NonNANBeaconInformation);
    atomic_store(result, (unint64_t *)&qword_10040B5A8);
  }
  return result;
}

unint64_t sub_1001EE514()
{
  unint64_t result;

  result = qword_10040B5C0;
  if (!qword_10040B5C0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.P2POperation.DeviceRole, &type metadata for NANAttribute.P2POperation.DeviceRole);
    atomic_store(result, (unint64_t *)&qword_10040B5C0);
  }
  return result;
}

unint64_t sub_1001EE558()
{
  unint64_t result;

  result = qword_10040B5D0;
  if (!qword_10040B5D0)
  {
    result = swift_getWitnessTable(byte_10035BBE0, &type metadata for NANAttribute.ExtendedWLANInfrastructure.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B5D0);
  }
  return result;
}

unint64_t sub_1001EE59C()
{
  unint64_t result;

  result = qword_10040B5D8;
  if (!qword_10040B5D8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.WLANInfrastructure.DeviceRole, &type metadata for NANAttribute.WLANInfrastructure.DeviceRole);
    atomic_store(result, (unint64_t *)&qword_10040B5D8);
  }
  return result;
}

unint64_t sub_1001EE5E0()
{
  unint64_t result;

  result = qword_10040B5E8;
  if (!qword_10040B5E8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANMapIDs, &type metadata for NANMapIDs);
    atomic_store(result, (unint64_t *)&qword_10040B5E8);
  }
  return result;
}

unint64_t sub_1001EE624()
{
  unint64_t result;

  result = qword_10040B5F8;
  if (!qword_10040B5F8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.RangingSetup.Control, &type metadata for NANAttribute.RangingSetup.Control);
    atomic_store(result, (unint64_t *)&qword_10040B5F8);
  }
  return result;
}

unint64_t sub_1001EE668()
{
  unint64_t result;

  result = qword_10040B610;
  if (!qword_10040B610)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.RangingSetup.FineTimingMeasurementParameters, &type metadata for NANAttribute.RangingSetup.FineTimingMeasurementParameters);
    atomic_store(result, (unint64_t *)&qword_10040B610);
  }
  return result;
}

unint64_t sub_1001EE6AC()
{
  unint64_t result;

  result = qword_10040B618;
  if (!qword_10040B618)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.RangingInformation.LocationInformation, &type metadata for NANAttribute.RangingInformation.LocationInformation);
    atomic_store(result, (unint64_t *)&qword_10040B618);
  }
  return result;
}

unint64_t sub_1001EE6F0()
{
  unint64_t result;

  result = qword_10040B620;
  if (!qword_10040B620)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.UnalignedSchedule.UnalignedWindowOverwrite, &type metadata for NANAttribute.UnalignedSchedule.UnalignedWindowOverwrite);
    atomic_store(result, (unint64_t *)&qword_10040B620);
  }
  return result;
}

unint64_t sub_1001EE734()
{
  unint64_t result;

  result = qword_10040B628;
  if (!qword_10040B628)
  {
    result = swift_getWitnessTable("͚\t", &type metadata for NANAttribute.UnalignedSchedule.UnalignedWindowControl);
    atomic_store(result, (unint64_t *)&qword_10040B628);
  }
  return result;
}

unint64_t sub_1001EE778()
{
  unint64_t result;

  result = qword_10040B640;
  if (!qword_10040B640)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.DeviceLink.Control, &type metadata for NANAttribute.DeviceLink.Control);
    atomic_store(result, (unint64_t *)&qword_10040B640);
  }
  return result;
}

unint64_t sub_1001EE7BC()
{
  unint64_t result;

  result = qword_10040B650;
  if (!qword_10040B650)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.DataCluster.Control, &type metadata for NANAttribute.DataCluster.Control);
    atomic_store(result, (unint64_t *)&qword_10040B650);
  }
  return result;
}

unint64_t sub_1001EE800()
{
  unint64_t result;

  result = qword_10040B660;
  if (!qword_10040B660)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.Availability.Control, &type metadata for NANAttribute.Availability.Control);
    atomic_store(result, (unint64_t *)&qword_10040B660);
  }
  return result;
}

unint64_t sub_1001EE844()
{
  unint64_t result;

  result = qword_10040B670;
  if (!qword_10040B670)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAvailabilityEntry, &type metadata for NANAvailabilityEntry);
    atomic_store(result, (unint64_t *)&qword_10040B670);
  }
  return result;
}

unint64_t sub_1001EE888()
{
  unint64_t result;

  result = qword_10040B680;
  if (!qword_10040B680)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.DatapathExtension.Control, &type metadata for NANAttribute.DatapathExtension.Control);
    atomic_store(result, (unint64_t *)&qword_10040B680);
  }
  return result;
}

unint64_t sub_1001EE8CC()
{
  unint64_t result;

  result = qword_10040B688;
  if (!qword_10040B688)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.Datapath.Control, &type metadata for NANAttribute.Datapath.Control);
    atomic_store(result, (unint64_t *)&qword_10040B688);
  }
  return result;
}

uint64_t sub_1001EE910(unint64_t a1, unint64_t a2)
{
  uint64_t v2;

  return sub_1001CF704(a1, a2, *(_QWORD **)(v2 + 16), *(_QWORD *)(v2 + 24));
}

unint64_t sub_1001EE918()
{
  unint64_t result;

  result = qword_10040B6A0;
  if (!qword_10040B6A0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.DeviceCapability.CommittedDiscoveryWindowInformation, &type metadata for NANAttribute.DeviceCapability.CommittedDiscoveryWindowInformation);
    atomic_store(result, (unint64_t *)&qword_10040B6A0);
  }
  return result;
}

unint64_t sub_1001EE95C()
{
  unint64_t result;

  result = qword_10040B6A8;
  if (!qword_10040B6A8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.DeviceCapability.OperationMode, &type metadata for NANAttribute.DeviceCapability.OperationMode);
    atomic_store(result, (unint64_t *)&qword_10040B6A8);
  }
  return result;
}

unint64_t sub_1001EE9A0()
{
  unint64_t result;

  result = qword_10040B6B0;
  if (!qword_10040B6B0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.DeviceCapability.AnntenaCount, &type metadata for NANAttribute.DeviceCapability.AnntenaCount);
    atomic_store(result, (unint64_t *)&qword_10040B6B0);
  }
  return result;
}

unint64_t sub_1001EE9E4()
{
  unint64_t result;

  result = qword_10040B6B8;
  if (!qword_10040B6B8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.DeviceCapability.Capabilities, &type metadata for NANAttribute.DeviceCapability.Capabilities);
    atomic_store(result, (unint64_t *)&qword_10040B6B8);
  }
  return result;
}

unint64_t sub_1001EEA28()
{
  unint64_t result;

  result = qword_10040B6C8;
  if (!qword_10040B6C8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANMasterRank, &type metadata for NANMasterRank);
    atomic_store(result, (unint64_t *)&qword_10040B6C8);
  }
  return result;
}

unint64_t sub_1001EEA6C()
{
  unint64_t result;

  result = qword_10040B6E8;
  if (!qword_10040B6E8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for DeprecatedNANAvailabilityEntry, &type metadata for DeprecatedNANAvailabilityEntry);
    atomic_store(result, (unint64_t *)&qword_10040B6E8);
  }
  return result;
}

unint64_t sub_1001EEAB0()
{
  unint64_t result;

  result = qword_10040B6F8;
  if (!qword_10040B6F8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for DeprecatedNANAvailability, &type metadata for DeprecatedNANAvailability);
    atomic_store(result, (unint64_t *)&qword_10040B6F8);
  }
  return result;
}

unint64_t sub_1001EEAF4()
{
  unint64_t result;

  result = qword_10040B720;
  if (!qword_10040B720)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.ServiceDescriptorExtension.Control, &type metadata for NANAttribute.ServiceDescriptorExtension.Control);
    atomic_store(result, (unint64_t *)&qword_10040B720);
  }
  return result;
}

unint64_t sub_1001EEB38()
{
  unint64_t result;

  result = qword_10040B728;
  if (!qword_10040B728)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.ServiceDescriptorExtension.RangeLimit, &type metadata for NANAttribute.ServiceDescriptorExtension.RangeLimit);
    atomic_store(result, (unint64_t *)&qword_10040B728);
  }
  return result;
}

unint64_t sub_1001EEB7C()
{
  unint64_t result;

  result = qword_10040B738;
  if (!qword_10040B738)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANServiceName.Hash, &type metadata for NANServiceName.Hash);
    atomic_store(result, (unint64_t *)&qword_10040B738);
  }
  return result;
}

unint64_t sub_1001EEBC0()
{
  unint64_t result;

  result = qword_10040B740;
  if (!qword_10040B740)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANAttribute.ServiceDescriptor.Control, &type metadata for NANAttribute.ServiceDescriptor.Control);
    atomic_store(result, (unint64_t *)&qword_10040B740);
  }
  return result;
}

unint64_t sub_1001EEC04()
{
  unint64_t result;

  result = qword_10040B758;
  if (!qword_10040B758)
  {
    result = swift_getWitnessTable("AB\t", &type metadata for NANAttribute.ServiceDescriptor.ServiceFilterControl.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B758);
  }
  return result;
}

uint64_t _s7CoreP2P12NANAttributeO18WLANInfrastructureV10DeviceRoleOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1001EEC94 + 4 * byte_1003526BF[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1001EECC8 + 4 * byte_1003526BA[v4]))();
}

uint64_t sub_1001EECC8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001EECD0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001EECD8);
  return result;
}

uint64_t sub_1001EECE4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001EECECLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1001EECF0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001EECF8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NANAttribute.ServiceDescriptor.ServiceFilterControl.CodingKeys()
{
  return &type metadata for NANAttribute.ServiceDescriptor.ServiceFilterControl.CodingKeys;
}

uint64_t _s7CoreP2P12NANAttributeO8DatapathV13AttributeTypeOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1001EED60 + 4 * byte_1003526C9[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1001EED94 + 4 * byte_1003526C4[v4]))();
}

uint64_t sub_1001EED94(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001EED9C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001EEDA4);
  return result;
}

uint64_t sub_1001EEDB0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001EEDB8);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1001EEDBC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001EEDC4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NANAttribute.ExtendedWLANInfrastructure.CodingKeys()
{
  return &type metadata for NANAttribute.ExtendedWLANInfrastructure.CodingKeys;
}

unint64_t sub_1001EEDE4()
{
  unint64_t result;

  result = qword_10040B780;
  if (!qword_10040B780)
  {
    result = swift_getWitnessTable(byte_10035BAB0, &type metadata for NANAttribute.ExtendedWLANInfrastructure.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B780);
  }
  return result;
}

unint64_t sub_1001EEE2C()
{
  unint64_t result;

  result = qword_10040B788;
  if (!qword_10040B788)
  {
    result = swift_getWitnessTable(byte_10035BB68, &type metadata for NANAttribute.ServiceDescriptor.ServiceFilterControl.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B788);
  }
  return result;
}

unint64_t sub_1001EEE74()
{
  unint64_t result;

  result = qword_10040B790;
  if (!qword_10040B790)
  {
    result = swift_getWitnessTable(byte_10035BAD8, &type metadata for NANAttribute.ServiceDescriptor.ServiceFilterControl.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B790);
  }
  return result;
}

unint64_t sub_1001EEEBC()
{
  unint64_t result;

  result = qword_10040B798;
  if (!qword_10040B798)
  {
    result = swift_getWitnessTable("qB\t", &type metadata for NANAttribute.ServiceDescriptor.ServiceFilterControl.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B798);
  }
  return result;
}

unint64_t sub_1001EEF04()
{
  unint64_t result;

  result = qword_10040B7A0;
  if (!qword_10040B7A0)
  {
    result = swift_getWitnessTable(byte_10035BA20, &type metadata for NANAttribute.ExtendedWLANInfrastructure.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B7A0);
  }
  return result;
}

unint64_t sub_1001EEF4C()
{
  unint64_t result;

  result = qword_10040B7A8;
  if (!qword_10040B7A8)
  {
    result = swift_getWitnessTable(")C\t", &type metadata for NANAttribute.ExtendedWLANInfrastructure.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10040B7A8);
  }
  return result;
}

uint64_t SymmetricKey.rawRepresentation.getter()
{
  return sub_1001EF068((uint64_t)sub_10006C85C, (void (*)(uint64_t *__return_ptr, uint64_t, _QWORD, _QWORD *))&SymmetricKey.withUnsafeBytes<A>(_:));
}

uint64_t HashedAuthenticationCode.rawRepresentation.getter(uint64_t a1)
{
  uint64_t v2;

  HashedAuthenticationCode.withUnsafeBytes<A>(_:)(&v2, sub_10006C85C, 0, a1, &type metadata for Data);
  return v2;
}

uint64_t SharedSecret.rawRepresentation.getter()
{
  return sub_1001EF068((uint64_t)sub_10006C85C, (void (*)(uint64_t *__return_ptr, uint64_t, _QWORD, _QWORD *))&SharedSecret.withUnsafeBytes<A>(_:));
}

uint64_t sub_1001EF068(uint64_t a1, void (*a2)(uint64_t *__return_ptr, uint64_t, _QWORD, _QWORD *))
{
  uint64_t v3;

  a2(&v3, a1, 0, &type metadata for Data);
  return v3;
}

uint64_t P256.KeyAgreement.PublicKey.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1001EF2B8(a1, (uint64_t (*)(_QWORD))&type metadata accessor for P256.KeyAgreement.PublicKey, (void (*)(__int128 *, _QWORD *, void *))&P256.KeyAgreement.PublicKey.init<A>(rawRepresentation:), a2);
}

uint64_t static P256.KeyAgreement.PublicKey.== infix(_:_:)(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char v7;
  char v8;

  v1 = P256.KeyAgreement.PublicKey.rawRepresentation.getter(a1);
  v3 = v2;
  v4 = P256.KeyAgreement.PublicKey.rawRepresentation.getter(v1);
  v6 = v5;
  _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(v1, v3);
  v8 = v7;
  sub_10000E614(v4, v6);
  sub_10000E614(v1, v3);
  return v8 & 1;
}

uint64_t P256.KeyAgreement.PublicKey.hash(into:)(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  __n128 v5;

  v2 = P256.KeyAgreement.PublicKey.rawRepresentation.getter(a1);
  v4 = v3;
  Data.hash(into:)(a1, v2, v3, v5);
  return sub_10000E614(v2, v4);
}

Swift::Int P256.KeyAgreement.PublicKey.hashValue.getter()
{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  __n128 v4;
  _QWORD v6[9];

  v0 = Hasher.init(_seed:)(v6);
  v1 = P256.KeyAgreement.PublicKey.rawRepresentation.getter(v0);
  v3 = v2;
  Data.hash(into:)(v6, v1, v2, v4);
  sub_10000E614(v1, v3);
  return Hasher._finalize()();
}

uint64_t sub_1001EF1F0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return P256.KeyAgreement.PublicKey.init(from:)(a1, a2);
}

Swift::Int sub_1001EF204()
{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  __n128 v4;
  _QWORD v6[9];

  v0 = Hasher.init(_seed:)(v6);
  v1 = P256.KeyAgreement.PublicKey.rawRepresentation.getter(v0);
  v3 = v2;
  Data.hash(into:)(v6, v1, v2, v4);
  sub_10000E614(v1, v3);
  return Hasher._finalize()();
}

uint64_t P256.Signing.PrivateKey.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1001EF2B8(a1, (uint64_t (*)(_QWORD))&type metadata accessor for P256.Signing.PrivateKey, (void (*)(__int128 *, _QWORD *, void *))&P256.Signing.PrivateKey.init<A>(rawRepresentation:), a2);
}

uint64_t sub_1001EF280@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return P256.Signing.PrivateKey.init(from:)(a1, a2);
}

uint64_t P256.Signing.PublicKey.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1001EF2B8(a1, (uint64_t (*)(_QWORD))&type metadata accessor for P256.Signing.PublicKey, (void (*)(__int128 *, _QWORD *, void *))&P256.Signing.PublicKey.init<A>(rawRepresentation:), a2);
}

uint64_t sub_1001EF2B8@<X0>(_QWORD *a1@<X0>, uint64_t (*a2)(_QWORD)@<X1>, void (*a3)(__int128 *, _QWORD *, void *)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(__int128 *, _QWORD *, void *);
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  _QWORD v23[3];
  uint64_t v24;
  uint64_t v25;
  void (*v26)(__int128 *, _QWORD *, void *);

  v26 = a3;
  v7 = a2(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin();
  v10 = (char *)&v19 - v9;
  v11 = a1[3];
  v12 = a1[4];
  sub_10003259C(a1, v11);
  dispatch thunk of Decoder.singleValueContainer()(v23, v11, v12);
  if (!v4)
  {
    v19 = v10;
    v20 = v8;
    v13 = v26;
    v14 = v24;
    v15 = v25;
    sub_10003259C(v23, v24);
    v16 = sub_10007BAC0();
    dispatch thunk of SingleValueDecodingContainer.decode<A>(_:)(&v22, &type metadata for Data, &type metadata for Data, v16, v14, v15);
    v21 = v22;
    v17 = v19;
    v13(&v21, &type metadata for Data, &protocol witness table for Data);
    sub_100014430(v23);
    (*(void (**)(uint64_t, char *, uint64_t))(v20 + 32))(a4, v17, v7);
  }
  return sub_100014430(a1);
}

uint64_t sub_1001EF424@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return P256.Signing.PublicKey.init(from:)(a1, a2);
}

uint64_t P256.Signing.ECDSASignature.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  __int128 v16;
  __int128 v17;
  _QWORD v18[3];
  uint64_t v19;
  uint64_t v20;

  v5 = type metadata accessor for P256.Signing.ECDSASignature(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin();
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10003259C(a1, v9);
  dispatch thunk of Decoder.singleValueContainer()(v18, v9, v10);
  if (!v2)
  {
    v11 = v19;
    v12 = v20;
    sub_10003259C(v18, v19);
    v13 = sub_10007BAC0();
    dispatch thunk of SingleValueDecodingContainer.decode<A>(_:)(&v17, &type metadata for Data, &type metadata for Data, v13, v11, v12);
    v16 = v17;
    v14 = sub_100068D00();
    P256.Signing.ECDSASignature.init<A>(rawRepresentation:)(&v16, &type metadata for Data, v14);
    sub_100014430(v18);
    (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(a2, v8, v5);
  }
  return sub_100014430(a1);
}

uint64_t sub_1001EF594@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return P256.Signing.ECDSASignature.init(from:)(a1, a2);
}

unint64_t sub_1001EF5AC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10040B7B0;
  if (!qword_10040B7B0)
  {
    v1 = type metadata accessor for P256.KeyAgreement.PublicKey(255);
    result = swift_getWitnessTable(protocol conformance descriptor for P256.KeyAgreement.PublicKey, v1);
    atomic_store(result, (unint64_t *)&qword_10040B7B0);
  }
  return result;
}

uint64_t NANManagementFrameType.init(frameType:frameSubtype:)(char a1, unsigned __int8 a2)
{
  uint64_t result;

  if (a1 == 19)
    return 14;
  if (a1 != 24)
    return 15;
  result = _s7CoreP2P21NANActionFrameSubtypeO8rawValueACSgs5UInt8V_tcfC_0(a2);
  if (result == 14)
    return 15;
  return result;
}

BOOL static NANManagementFrameType.__derived_enum_equals(_:_:)(char a1, char a2)
{
  if (a1 == 14)
    return a2 == 14;
  if (a2 == 14)
    return 0;
  return byte_10035C0B8[a1] == byte_10035C0B8[a2];
}

void *NANInformationElement.ouiType.unsafeMutableAddressor()
{
  return &static NANInformationElement.ouiType;
}

uint64_t NANManagementFrameType.init(from:)(_QWORD *a1)
{
  return sub_1001EFFAC(a1);
}

uint64_t NANManagementFrameType.encode(to:)(_QWORD *a1, unsigned __int8 a2)
{
  uint64_t v2;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[3];
  uint64_t v17;
  uint64_t v18;

  v4 = a2;
  v5 = a1[3];
  v6 = a1[4];
  sub_10003259C(a1, v5);
  dispatch thunk of Encoder.unkeyedContainer()(v16, v5, v6);
  v7 = v17;
  v8 = v18;
  sub_100034C68((uint64_t)v16, v17);
  if (v4 == 14)
  {
    v9 = 19;
    v10 = v7;
    v11 = v8;
LABEL_5:
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)(v9, v10, v11);
    return sub_100014430(v16);
  }
  dispatch thunk of UnkeyedEncodingContainer.encode(_:)(24, v7, v8);
  if (!v2)
  {
    v12 = (char)a2;
    v13 = v17;
    v14 = v18;
    sub_100034C68((uint64_t)v16, v17);
    v9 = byte_10035C0B8[v12];
    v10 = v13;
    v11 = v14;
    goto LABEL_5;
  }
  return sub_100014430(v16);
}

uint64_t NANActionFrameSubtype.rawValue.getter(char a1)
{
  return byte_10035C0B8[a1];
}

unint64_t NANManagementFrameType.description.getter(char a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::String v4;
  void *object;
  char v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a1 == 14)
    return 0xD000000000000011;
  v9 = v1;
  v10 = v2;
  v7 = 0x206E6F69746361;
  v8 = 0xE700000000000000;
  v6 = a1;
  v4._countAndFlagsBits = String.init<A>(describing:)(&v6, &type metadata for NANActionFrameSubtype);
  object = v4._object;
  String.append(_:)(v4);
  swift_bridgeObjectRelease(object);
  return v7;
}

void NANManagementFrameType.hash(into:)(uint64_t a1, char a2)
{
  if (a2 == 14)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(byte_10035C0B8[a2]);
  }
}

Swift::Int NANManagementFrameType.hashValue.getter(unsigned __int8 a1)
{
  int v2;
  _QWORD v4[9];

  v2 = a1;
  Hasher.init(_seed:)(v4);
  if (v2 == 14)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(byte_10035C0B8[(char)a1]);
  }
  return Hasher._finalize()();
}

Swift::Int sub_1001EF910()
{
  char *v0;
  uint64_t v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  if (v1 == 14)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(byte_10035C0B8[v1]);
  }
  return Hasher._finalize()();
}

void sub_1001EF97C()
{
  char *v0;
  uint64_t v1;

  v1 = *v0;
  if (v1 == 14)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(byte_10035C0B8[v1]);
  }
}

Swift::Int sub_1001EF9CC()
{
  char *v0;
  uint64_t v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  if (v1 == 14)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1uLL);
    Hasher._combine(_:)(byte_10035C0B8[v1]);
  }
  return Hasher._finalize()();
}

uint64_t sub_1001EFA34@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = sub_1001EFFAC(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_1001EFA5C(_QWORD *a1)
{
  unsigned __int8 *v1;

  return NANManagementFrameType.encode(to:)(a1, *v1);
}

unint64_t sub_1001EFA74()
{
  char *v0;

  return NANManagementFrameType.description.getter(*v0);
}

BOOL sub_1001EFA7C(char *a1, char *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  v3 = *a2;
  if (v2 == 14)
    return (_DWORD)v3 == 14;
  if ((_DWORD)v3 == 14)
    return 0;
  return byte_10035C0B8[v2] == byte_10035C0B8[v3];
}

BOOL sub_1001EFAC8(char *a1, char *a2)
{
  return byte_10035C0B8[*a1] == byte_10035C0B8[*a2];
}

uint64_t sub_1001EFAEC@<X0>(unsigned __int8 *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = _s7CoreP2P21NANActionFrameSubtypeO8rawValueACSgs5UInt8V_tcfC_0(*a1);
  *a2 = result;
  return result;
}

void sub_1001EFB14(_BYTE *a1@<X8>)
{
  char *v1;

  *a1 = byte_10035C0B8[*v1];
}

Swift::Int sub_1001EFB2C()
{
  char *v0;
  uint64_t v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(byte_10035C0B8[v1]);
  return Hasher._finalize()();
}

void sub_1001EFB78()
{
  char *v0;

  Hasher._combine(_:)(byte_10035C0B8[*v0]);
}

Swift::Int sub_1001EFBAC()
{
  char *v0;
  uint64_t v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(byte_10035C0B8[v1]);
  return Hasher._finalize()();
}

double NANInformationElement.hash(into:)(uint64_t a1, uint64_t a2)
{
  Swift::UInt v3;
  double result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_QWORD *)(a2 + 16);
  Hasher._combine(_:)(v3);
  if (v3)
  {
    v5 = *(_QWORD *)(type metadata accessor for NANAttribute(0) - 8);
    v6 = a2 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    v7 = *(_QWORD *)(v5 + 72);
    swift_bridgeObjectRetain(a2);
    do
    {
      NANAttribute.hash(into:)();
      v6 += v7;
      --v3;
    }
    while (v3);
    *(_QWORD *)&result = swift_bridgeObjectRelease(a2).n128_u64[0];
  }
  return result;
}

Swift::Int NANInformationElement.hashValue.getter(uint64_t a1)
{
  Swift::UInt v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[9];

  Hasher.init(_seed:)(v7);
  v2 = *(_QWORD *)(a1 + 16);
  Hasher._combine(_:)(v2);
  if (v2)
  {
    v3 = *(_QWORD *)(type metadata accessor for NANAttribute(0) - 8);
    v4 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v5 = *(_QWORD *)(v3 + 72);
    swift_bridgeObjectRetain(a1);
    do
    {
      NANAttribute.hash(into:)();
      v4 += v5;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease(a1);
  }
  return Hasher._finalize()();
}

Swift::Int sub_1001EFD24()
{
  uint64_t *v0;

  return NANInformationElement.hashValue.getter(*v0);
}

double sub_1001EFD2C(uint64_t a1)
{
  uint64_t *v1;

  return NANInformationElement.hash(into:)(a1, *v1);
}

Swift::Int sub_1001EFD34()
{
  uint64_t *v0;
  uint64_t v1;
  Swift::UInt v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[9];

  v1 = *v0;
  Hasher.init(_seed:)(v7);
  v2 = *(_QWORD *)(v1 + 16);
  Hasher._combine(_:)(v2);
  if (v2)
  {
    v3 = *(_QWORD *)(type metadata accessor for NANAttribute(0) - 8);
    v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v5 = *(_QWORD *)(v3 + 72);
    swift_bridgeObjectRetain(v1);
    do
    {
      NANAttribute.hash(into:)();
      v4 += v5;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease(v1);
  }
  return Hasher._finalize()();
}

uint64_t sub_1001EFDC8@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = NANInformationElement.init(from:)(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t NANInformationElement.init(from:)(_QWORD *a1)
{
  return sub_1001F0248(a1);
}

uint64_t sub_1001EFE04(_QWORD *a1)
{
  uint64_t *v1;

  return NANInformationElement.encode(to:)(a1, *v1);
}

uint64_t NANInformationElement.encode(to:)(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD v13[3];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = a1[3];
  v5 = a1[4];
  sub_10003259C(a1, v4);
  dispatch thunk of Encoder.unkeyedContainer()(v13, v4, v5);
  v6 = v14;
  v7 = v15;
  sub_100034C68((uint64_t)v13, v14);
  dispatch thunk of UnkeyedEncodingContainer.encode(_:)(19, v6, v7);
  if (!v2)
  {
    v16 = a2;
    v8 = v14;
    v9 = v15;
    sub_100034C68((uint64_t)v13, v14);
    v10 = sub_100012C44(&qword_100405C48);
    v11 = sub_1001A2A00();
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)(&v16, v10, v11, v8, v9);
  }
  return sub_100014430(v13);
}

uint64_t sub_1001EFEFC(uint64_t *a1, uint64_t *a2)
{
  return _s7CoreP2P21NANInformationElementV23__derived_struct_equalsySbAC_ACtFZ_0(*a1, *a2);
}

uint64_t _s7CoreP2P21NANActionFrameSubtypeO8rawValueACSgs5UInt8V_tcfC_0(unsigned __int8 a1)
{
  int v1;
  uint64_t result;

  v1 = a1;
  result = 1;
  switch(v1)
  {
    case 1:
      result = 0;
      break;
    case 2:
      return result;
    case 3:
      result = 2;
      break;
    case 4:
      result = 3;
      break;
    case 5:
      result = 4;
      break;
    case 6:
      result = 5;
      break;
    case 7:
      result = 6;
      break;
    case 8:
      result = 7;
      break;
    case 9:
      result = 8;
      break;
    case 10:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
      goto LABEL_5;
    case 11:
      result = 10;
      break;
    case 12:
      result = 11;
      break;
    case 13:
      result = 12;
      break;
    case 19:
      result = 9;
      break;
    default:
      if (v1 == 221)
        result = 13;
      else
LABEL_5:
        result = 14;
      break;
  }
  return result;
}

uint64_t sub_1001EFFAC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;
  Swift::String v13;
  Swift::String v14;
  void *object;
  Swift::String v16;
  Swift::String v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD v23[5];
  _QWORD v24[3];
  uint64_t v25;
  uint64_t v26;

  v3 = a1[3];
  v4 = a1[4];
  v5 = (uint64_t)sub_10003259C(a1, v3);
  dispatch thunk of Decoder.unkeyedContainer()(v24, v3, v4);
  if (v1)
    goto LABEL_4;
  v6 = v25;
  v7 = v26;
  sub_100034C68((uint64_t)v24, v25);
  v8 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)(v6, v7);
  if (v8 == 19)
  {
    v5 = 14;
    goto LABEL_12;
  }
  if (v8 == 24)
  {
    v10 = v25;
    v11 = v26;
    sub_100034C68((uint64_t)v24, v25);
    v12 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)(v10, v11);
    v5 = _s7CoreP2P21NANActionFrameSubtypeO8rawValueACSgs5UInt8V_tcfC_0(v12);
    if (v5 == 14)
    {
      sub_100031D80((uint64_t)v24, (uint64_t)v23);
      v21 = 0;
      v22 = 0xE000000000000000;
      _StringGuts.grow(_:)(61);
      v13._object = (void *)0x8000000100367B80;
      v13._countAndFlagsBits = 0xD000000000000030;
      String.append(_:)(v13);
      v14._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt8, &protocol witness table for UInt8);
      object = v14._object;
      String.append(_:)(v14);
      swift_bridgeObjectRelease(object);
      v16._countAndFlagsBits = 0x6570797462757320;
      v16._object = (void *)0xE900000000000020;
      String.append(_:)(v16);
      goto LABEL_14;
    }
LABEL_12:
    sub_100014430(v24);
    sub_100014430(a1);
    return v5;
  }
  sub_100031D80((uint64_t)v24, (uint64_t)v23);
  _StringGuts.grow(_:)(50);
  swift_bridgeObjectRelease(0xE000000000000000);
  v21 = 0xD000000000000030;
  v22 = 0x8000000100367B80;
LABEL_14:
  v17._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt8, &protocol witness table for UInt8);
  v18 = v17._object;
  String.append(_:)(v17);
  swift_bridgeObjectRelease(v18);
  v5 = v21;
  v19 = type metadata accessor for DecodingError(0);
  swift_allocError(v19, &protocol witness table for DecodingError, 0, 0);
  static DecodingError.dataCorruptedError(in:debugDescription:)(v23, v21, v22);
  swift_bridgeObjectRelease(v22);
  v20 = sub_100014430(v23);
  swift_willThrow(v20);
  sub_100014430(v24);
LABEL_4:
  sub_100014430(a1);
  return v5;
}

uint64_t sub_1001F0248(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[3];
  uint64_t v17;
  uint64_t v18;

  v3 = a1[3];
  v4 = a1[4];
  v5 = (uint64_t)sub_10003259C(a1, v3);
  dispatch thunk of Decoder.unkeyedContainer()(v16, v3, v4);
  if (!v1)
  {
    v6 = v17;
    v7 = v18;
    v5 = sub_100034C68((uint64_t)v16, v17);
    if (dispatch thunk of UnkeyedDecodingContainer.decode(_:)(v6, v7) == 19)
    {
      v8 = v17;
      v9 = v18;
      sub_100034C68((uint64_t)v16, v17);
      v10 = type metadata accessor for NANAttribute(0);
      v11 = sub_1001F06F8(&qword_100406700, protocol conformance descriptor for NANAttribute);
      v5 = UnkeyedDecodingContainer.inferredArrayDecode<A>()(v8, v10, v9, v11);
    }
    else
    {
      v12 = sub_100012C84();
      v13 = swift_allocError(&type metadata for WiFiError, v12, 0, 0);
      *(_OWORD *)v14 = xmmword_100337850;
      *(_BYTE *)(v14 + 16) = 2;
      swift_willThrow(v13);
    }
    sub_100014430(v16);
  }
  sub_100014430(a1);
  return v5;
}

unint64_t sub_1001F03AC()
{
  unint64_t result;

  result = qword_10040B7B8;
  if (!qword_10040B7B8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANManagementFrameType, &type metadata for NANManagementFrameType);
    atomic_store(result, (unint64_t *)&qword_10040B7B8);
  }
  return result;
}

unint64_t sub_1001F03F4()
{
  unint64_t result;

  result = qword_10040B7C0;
  if (!qword_10040B7C0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANActionFrameSubtype, &type metadata for NANActionFrameSubtype);
    atomic_store(result, (unint64_t *)&qword_10040B7C0);
  }
  return result;
}

unint64_t sub_1001F043C()
{
  unint64_t result;

  result = qword_10040B7C8;
  if (!qword_10040B7C8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANInformationElement, &type metadata for NANInformationElement);
    atomic_store(result, (unint64_t *)&qword_10040B7C8);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for NANManagementFrameType(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v6;
  BOOL v7;
  unsigned int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF2)
  {
    v6 = *a1;
    v7 = v6 >= 0xE;
    v8 = v6 - 14;
    if (!v7)
      v8 = -1;
    if (v8 + 1 >= 2)
      return v8;
    else
      return 0;
  }
  else
  {
    v2 = a2 + 14;
    if (a2 + 14 >= 0xFFFF00)
      v3 = 4;
    else
      v3 = 2;
    if (v2 >> 8 < 0xFF)
      v3 = 1;
    if (v2 >= 0x100)
      v4 = v3;
    else
      v4 = 0;
    return ((uint64_t (*)(void))((char *)&loc_1001F04D0 + 4 * byte_10035BE03[v4]))();
  }
}

uint64_t storeEnumTagSinglePayload for NANManagementFrameType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  unsigned int v3;
  int v4;
  uint64_t v5;

  v3 = a3 + 14;
  if (a3 + 14 >= 0xFFFF00)
    v4 = 4;
  else
    v4 = 2;
  if (v3 >> 8 < 0xFF)
    v4 = 1;
  if (v3 >= 0x100)
    LODWORD(v5) = v4;
  else
    LODWORD(v5) = 0;
  if (a3 >= 0xF2)
    v5 = v5;
  else
    v5 = 0;
  if (a2 <= 0xF1)
    return ((uint64_t (*)(void))((char *)&loc_1001F0578 + 4 * byte_10035BE0D[v5]))();
  *a1 = a2 + 14;
  return ((uint64_t (*)(void))((char *)sub_1001F05AC + 4 * byte_10035BE08[v5]))();
}

uint64_t sub_1001F05AC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001F05B4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001F05BCLL);
  return result;
}

uint64_t sub_1001F05C8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001F05D0);
  *(_BYTE *)result = a2 + 14;
  return result;
}

uint64_t sub_1001F05D4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001F05DC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001F05E8(unsigned __int8 *a1)
{
  unsigned int v1;

  v1 = *a1;
  if (v1 >= 0xE)
    return v1 - 13;
  else
    return 0;
}

_BYTE *sub_1001F05FC(_BYTE *result, int a2)
{
  if (a2)
    *result = a2 + 13;
  return result;
}

ValueMetadata *type metadata accessor for NANManagementFrameType()
{
  return &type metadata for NANManagementFrameType;
}

uint64_t storeEnumTagSinglePayload for NANActionFrameSubtype(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 13 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 13) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF3)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF2)
    return ((uint64_t (*)(void))((char *)&loc_1001F0668 + 4 * byte_10035BE17[v4]))();
  *a1 = a2 + 13;
  return ((uint64_t (*)(void))((char *)sub_1001F069C + 4 * byte_10035BE12[v4]))();
}

uint64_t sub_1001F069C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001F06A4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001F06ACLL);
  return result;
}

uint64_t sub_1001F06B8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001F06C0);
  *(_BYTE *)result = a2 + 13;
  return result;
}

uint64_t sub_1001F06C4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001F06CC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NANActionFrameSubtype()
{
  return &type metadata for NANActionFrameSubtype;
}

ValueMetadata *type metadata accessor for NANInformationElement()
{
  return &type metadata for NANInformationElement;
}

uint64_t sub_1001F06F8(unint64_t *a1, const char *a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for NANAttribute(255);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t *NANConstants.csaMatterServiceName.unsafeMutableAddressor()
{
  if (qword_100404208 != -1)
    swift_once(&qword_100404208, sub_1001F08D4);
  return &static NANConstants.csaMatterServiceName;
}

uint64_t sub_1001F0778(uint64_t a1)
{
  return sub_1001F0904(a1, 0x74656E7265746E69, 0xE800000000000000, &static NANConstants.internetSharingServiceName, &qword_100410610);
}

uint64_t *NANConstants.internetSharingServiceName.unsafeMutableAddressor()
{
  if (qword_1004041F8 != -1)
    swift_once(&qword_1004041F8, sub_1001F0778);
  return &static NANConstants.internetSharingServiceName;
}

uint64_t static NANConstants.internetSharingServiceName.getter()
{
  return sub_1001F0884(&qword_1004041F8, &static NANConstants.internetSharingServiceName, &qword_100410610);
}

uint64_t sub_1001F07FC(uint64_t a1)
{
  return sub_1001F0904(a1, 0xD000000000000012, 0x8000000100367BC0, &static NANConstants.airplayServiceName, &qword_100410620);
}

uint64_t *NANConstants.airplayServiceName.unsafeMutableAddressor()
{
  if (qword_100404200 != -1)
    swift_once(&qword_100404200, sub_1001F07FC);
  return &static NANConstants.airplayServiceName;
}

uint64_t static NANConstants.airplayServiceName.getter()
{
  return sub_1001F0884(&qword_100404200, &static NANConstants.airplayServiceName, &qword_100410620);
}

uint64_t sub_1001F0884(_QWORD *a1, uint64_t *a2, _QWORD *a3)
{
  uint64_t v5;

  if (*a1 != -1)
    swift_once();
  v5 = *a2;
  swift_bridgeObjectRetain(*a3);
  return v5;
}

uint64_t sub_1001F08D4(uint64_t a1)
{
  return sub_1001F0904(a1, 0x6372657474616D5FLL, 0xED00007064755F2ELL, &static NANConstants.csaMatterServiceName, &qword_100410630);
}

uint64_t sub_1001F0904(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t *a4, _QWORD *a5)
{
  uint64_t result;
  uint64_t v8;

  result = _s7CoreP2P14NANServiceNameVyACSgSScfC_0(a2, a3);
  if (v8)
  {
    *a4 = result;
    *a5 = v8;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t static NANConstants.csaMatterServiceName.getter()
{
  return sub_1001F0884(&qword_100404208, &static NANConstants.csaMatterServiceName, &qword_100410630);
}

uint64_t sub_1001F0960(uint64_t a1)
{
  return sub_1001F0B38(a1, static NANConstants.maximumServiceRetryRate, 2);
}

uint64_t NANConstants.maximumServiceRetryRate.unsafeMutableAddressor()
{
  return sub_1001F09D4(&qword_100404210, (uint64_t)static NANConstants.maximumServiceRetryRate, (uint64_t)sub_1001F0960);
}

uint64_t static NANConstants.maximumServiceRetryRate.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1001F0A30(&qword_100404210, (uint64_t)static NANConstants.maximumServiceRetryRate, (uint64_t)sub_1001F0960, a1);
}

uint64_t sub_1001F09A8(uint64_t a1)
{
  return sub_1001F0B38(a1, static NANConstants.serviceTerminateEventTimeout, 4);
}

uint64_t NANConstants.serviceTerminateEventTimeout.unsafeMutableAddressor()
{
  return sub_1001F09D4(&qword_100404218, (uint64_t)static NANConstants.serviceTerminateEventTimeout, (uint64_t)sub_1001F09A8);
}

uint64_t sub_1001F09D4(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  if (*a1 != -1)
    swift_once(a1, a3);
  v4 = type metadata accessor for DispatchTimeInterval(0);
  return sub_100014C44(v4, a2);
}

uint64_t static NANConstants.serviceTerminateEventTimeout.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1001F0A30(&qword_100404218, (uint64_t)static NANConstants.serviceTerminateEventTimeout, (uint64_t)sub_1001F09A8, a1);
}

uint64_t sub_1001F0A30@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;

  if (*a1 != -1)
    swift_once(a1, a3);
  v6 = type metadata accessor for DispatchTimeInterval(0);
  v7 = sub_100014C44(v6, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a4, v7, v6);
}

uint64_t sub_1001F0A98(uint64_t a1)
{
  return sub_1001F0B38(a1, static NANConstants.authenticationRequestTimeout, 8);
}

uint64_t NANConstants.authenticationRequestTimeout.unsafeMutableAddressor()
{
  return sub_1001F09D4(&qword_100404220, (uint64_t)static NANConstants.authenticationRequestTimeout, (uint64_t)sub_1001F0A98);
}

uint64_t static NANConstants.authenticationRequestTimeout.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1001F0A30(&qword_100404220, (uint64_t)static NANConstants.authenticationRequestTimeout, (uint64_t)sub_1001F0A98, a1);
}

uint64_t sub_1001F0AE0(uint64_t a1)
{
  return sub_1001F0B38(a1, static NANConstants.followUpTimeout, 7);
}

uint64_t NANConstants.followUpTimeout.unsafeMutableAddressor()
{
  return sub_1001F09D4(&qword_100404228, (uint64_t)static NANConstants.followUpTimeout, (uint64_t)sub_1001F0AE0);
}

uint64_t static NANConstants.followUpTimeout.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1001F0A30(&qword_100404228, (uint64_t)static NANConstants.followUpTimeout, (uint64_t)sub_1001F0AE0, a1);
}

uint64_t sub_1001F0B28(uint64_t a1)
{
  return sub_1001F0B38(a1, static NANConstants.keepAliveTimeout, 17);
}

uint64_t sub_1001F0B38(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;

  v5 = type metadata accessor for DispatchTimeInterval(0);
  sub_10001C964(v5, a2);
  *(_QWORD *)sub_100014C44(v5, (uint64_t)a2) = a3;
  return (*(uint64_t (**)(void))(*(_QWORD *)(v5 - 8) + 104))();
}

uint64_t NANConstants.keepAliveTimeout.unsafeMutableAddressor()
{
  return sub_1001F09D4(&qword_100404230, (uint64_t)static NANConstants.keepAliveTimeout, (uint64_t)sub_1001F0B28);
}

uint64_t static NANConstants.keepAliveTimeout.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1001F0A30(&qword_100404230, (uint64_t)static NANConstants.keepAliveTimeout, (uint64_t)sub_1001F0B28, a1);
}

ValueMetadata *type metadata accessor for NANConstants()
{
  return &type metadata for NANConstants;
}

void sub_1001F0BE4(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  uint64_t v10;
  size_t v11;
  char *v12;
  const char *v13;
  size_t v14;
  _QWORD v15[6];
  char __src[8];
  uint64_t v17;

  v15[2] = a3;
  v15[3] = a4;
  v15[4] = a5;
  v15[5] = a6;
  if ((a2 & 0x1000000000000000) != 0 || !(a2 & 0x2000000000000000 | a1 & 0x1000000000000000))
  {
    _StringGuts._slowWithCString<A>(_:)(a7, sub_10020A784, v15);
    goto LABEL_9;
  }
  if ((a2 & 0x2000000000000000) != 0)
  {
    *(_QWORD *)__src = a1;
    v17 = a2 & 0xFFFFFFFFFFFFFFLL;
    if (a3)
    {
      v14 = String.count.getter(a5, a6);
      strncpy(a3, __src, v14);
      swift_bridgeObjectRelease(a6);
      return;
    }
    __break(1u);
  }
  else
  {
    if ((a1 & 0x1000000000000000) != 0)
    {
      v10 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
    }
    else
    {
      v10 = _StringObject.sharedUTF8.getter(a1, a2);
      if (!v10)
      {
        if (a3)
        {
          v11 = String.count.getter(a5, a6);
          v12 = a3;
          v13 = 0;
          goto LABEL_8;
        }
        goto LABEL_18;
      }
    }
    if (a3)
    {
      v11 = String.count.getter(a5, a6);
      v12 = a3;
      v13 = (const char *)v10;
LABEL_8:
      strncpy(v12, v13, v11);
LABEL_9:
      swift_bridgeObjectRelease(a6);
      return;
    }
  }
  __break(1u);
LABEL_18:
  __break(1u);
}

void sub_1001F0D30(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  if ((a3 & 1) != 0)
    AppleDevice.setRequest(requestType:data:on:)(0xFFFFFFFFuLL, a1, a2, 0, a4, a5);
  else
    AppleDevice.getRequest(requestType:data:on:)(0xFFFFFFFFuLL, a1, a2, 0, a4, a5);
}

uint64_t BroadcomDevice<>.send(command:set:on:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if ((a3 & 1) != 0)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t))(a8 + 32))(0xFFFFFFFFLL, a1, a2, 0, a4, a5, a6);
  else
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t))(a8 + 24))(0xFFFFFFFFLL, a1, a2, 0, a4, a5, a6);
}

uint64_t sub_1001F0DC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t (*v15)(uint64_t, char *);
  uint64_t result;
  uint64_t v17;

  v11 = *(_QWORD *)(a5 - 8);
  v12 = __chkstk_darwin(a1);
  v14 = (char *)&v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = v15(v12, v14);
  if (v8)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(a8, v14, a5);
  return result;
}

void sub_1001F0E50(uint64_t (*a1)(_QWORD *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(_QWORD *);
  unint64_t v6;
  uint64_t *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v19;
  _QWORD v20[2];
  _QWORD *v21;

  v4 = a3;
  v19 = *(_QWORD *)(a3 + 16);
  if (v19)
  {
    v5 = a1;
    v6 = 0;
    v7 = (uint64_t *)(a3 + 40);
    v8 = _swiftEmptyArrayStorage;
    while (v6 < *(_QWORD *)(v4 + 16))
    {
      v10 = *(v7 - 1);
      v9 = *v7;
      v20[0] = v10;
      v20[1] = v9;
      swift_bridgeObjectRetain(v9);
      v11 = v5(v20);
      if (v3)
      {
        swift_release(v8);
        swift_bridgeObjectRelease(v4);
        v16 = v9;
        goto LABEL_15;
      }
      if ((v11 & 1) != 0)
      {
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v8);
        v21 = v8;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_100074EAC(0, v8[2] + 1, 1);
          v8 = v21;
        }
        v14 = v8[2];
        v13 = v8[3];
        if (v14 >= v13 >> 1)
        {
          sub_100074EAC(v13 > 1, v14 + 1, 1);
          v8 = v21;
        }
        v8[2] = v14 + 1;
        v15 = &v8[2 * v14];
        v15[4] = v10;
        v15[5] = v9;
        v4 = a3;
        v5 = a1;
      }
      else
      {
        swift_bridgeObjectRelease(v9);
      }
      ++v6;
      v7 += 2;
      if (v19 == v6)
        goto LABEL_13;
    }
    __break(1u);
  }
  else
  {
LABEL_13:
    v16 = v4;
LABEL_15:
    swift_bridgeObjectRelease(v16);
  }
}

void sub_1001F0FC0(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;

  type metadata accessor for P256.Signing.ECDSASignature(0);
  __chkstk_darwin();
  sub_100031FEC(a1, a2);
  sub_10001F11C((uint64_t)_swiftEmptyArrayStorage);
  v4 = type metadata accessor for BinaryDecoder();
  v5 = (_QWORD *)swift_allocObject(v4, 48, 7);
  v5[5] = &_swiftEmptyDictionarySingleton;
  v5[2] = a1;
  v5[3] = a2;
  __asm { BR              X10 }
}

uint64_t sub_1001F1090(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_QWORD *)(v7 + 32) = v5;
  swift_beginAccess(a1, v8 - 104, 1, 0);
  v9 = *(_QWORD *)(v7 + 40);
  *(_QWORD *)(v7 + 40) = v6;
  swift_bridgeObjectRelease(v9);
  *(_QWORD *)(v8 - 120) = &type metadata for BinaryDecoder.UnkeyedContainer;
  *(_QWORD *)(v8 - 112) = sub_10007BA38();
  *(_QWORD *)(v8 - 144) = v7;
  v10 = *(_QWORD *)sub_100034C68(v8 - 144, (uint64_t)&type metadata for BinaryDecoder.UnkeyedContainer);
  *(_QWORD *)(v8 - 160) = v4;
  *(_QWORD *)(v8 - 152) = sub_100011DE4((unint64_t *)&qword_100405BB8, (uint64_t (*)(uint64_t))type metadata accessor for BinaryDecoder, (uint64_t)protocol conformance descriptor for BinaryDecoder);
  *(_QWORD *)(v8 - 184) = v10;
  swift_retain();
  v11 = *(_QWORD *)(v8 - 72);
  P256.Signing.ECDSASignature.init(from:)((_QWORD *)(v8 - 184), v3);
  if (!v11)
  {
    v12 = *(_QWORD *)(v8 - 192);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 32))(v12, v3, v2);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v1 + 56))(v12, 0, 1, v2);
  }
  return sub_100014430((_QWORD *)(v8 - 144));
}

void sub_1001F1188(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v5 = a3 >> 62;
  sub_100031FEC(a2, a3);
  sub_10001F11C((uint64_t)_swiftEmptyArrayStorage);
  v6 = type metadata accessor for BinaryDecoder();
  v7 = (_QWORD *)swift_allocObject(v6, 48, 7);
  v7[5] = &_swiftEmptyDictionarySingleton;
  v7[2] = a2;
  v7[3] = a3;
  __asm { BR              X10 }
}

uint64_t sub_1001F1218(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[5];
  uint64_t v15;

  *(_QWORD *)(v4 + 32) = v5;
  swift_beginAccess(a1, &v15, 1, 0);
  v6 = *(_QWORD *)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v3;
  swift_bridgeObjectRelease(v6);
  v14[3] = &type metadata for BinaryDecoder.UnkeyedContainer;
  v14[4] = sub_10007BA38();
  v14[0] = v4;
  v7 = *(_QWORD *)sub_100034C68((uint64_t)v14, (uint64_t)&type metadata for BinaryDecoder.UnkeyedContainer);
  v12 = v2;
  v13 = sub_100011DE4((unint64_t *)&qword_100405BB8, (uint64_t (*)(uint64_t))type metadata accessor for BinaryDecoder, (uint64_t)protocol conformance descriptor for BinaryDecoder);
  v11 = v7;
  swift_retain();
  v8 = sub_10021C42C(&v11);
  if (v1)
    return sub_100014430(v14);
  v10 = v8 & 0xFFFFFFFFFFFFLL;
  sub_100014430(v14);
  return v10;
}

uint64_t sub_1001F12F8(unint64_t a1, unint64_t a2, _QWORD *a3, uint64_t a4)
{
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;
  char v7;
  uint64_t result;

  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (*(_QWORD *)(a4 + 16) <= a2)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v4 = a3;
  v5 = a1;
  v7 = *(_BYTE *)(a4 + a2 + 32);
  v6 = (_QWORD *)*a3;
  result = swift_isUniquelyReferenced_nonNull_native(*a3);
  *v4 = v6;
  if ((result & 1) != 0)
  {
    if ((v5 & 0x8000000000000000) == 0)
      goto LABEL_5;
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
LABEL_9:
  result = (uint64_t)sub_1001A87B8(v6);
  v6 = (_QWORD *)result;
  if ((v5 & 0x8000000000000000) != 0)
    goto LABEL_10;
LABEL_5:
  if (v6[2] > v5)
  {
    *((_BYTE *)v6 + v5 + 32) |= v7;
    *v4 = v6;
    return result;
  }
LABEL_11:
  __break(1u);
  return result;
}

void *BroadcomCapabilities.supportsExtendedMessage.unsafeMutableAddressor()
{
  return &static BroadcomCapabilities.supportsExtendedMessage;
}

uint64_t AppleBroadcomDriver.capabilities.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 72);
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + 72);
  }
  else
  {
    v2 = sub_1001F13F4();
    v3 = *(_QWORD *)(v0 + 72);
    *(_QWORD *)(v0 + 72) = v2;
    swift_bridgeObjectRetain(v2);
    swift_bridgeObjectRelease(v3);
    v1 = 0;
  }
  swift_bridgeObjectRetain(v1);
  return v2;
}

uint64_t sub_1001F13F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  char isUniquelyReferenced_nonNull_native;
  int64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  uint64_t *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t result;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  _BYTE v56[16];
  uint64_t *v57;
  uint64_t v58;
  __int128 v59;
  uint64_t *v60;
  _QWORD v61[3];
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;

  v0 = type metadata accessor for __DataStorage(0);
  swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  v62 = 0x40000000000;
  v63 = __DataStorage.init(length:)(1024) | 0x4000000000000000;
  v60 = &v64;
  sub_100208C74();
  v2 = v1;
  v4 = v3;
  v61[0] = 32;
  v61[1] = 0xE100000000000000;
  __chkstk_darwin();
  v57 = v61;
  swift_bridgeObjectRetain(v5);
  v6 = sub_100207AB0(0x7FFFFFFFFFFFFFFFLL, 1, sub_100209460, (uint64_t)v56, v2, v4);
  v58 = 0;
  swift_bridgeObjectRelease(v4);
  v7 = *(_QWORD *)(v6 + 16);
  v8 = _swiftEmptyArrayStorage;
  if (v7)
  {
    v9 = (_QWORD *)(v6 + 56);
    do
    {
      v14 = *(v9 - 3);
      if (!((*(v9 - 2) ^ v14) >> 14))
      {
        v59 = *((_OWORD *)v9 - 1);
        v15 = *v9;
        swift_bridgeObjectRetain(*v9);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v8);
        v61[0] = v8;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_1000751F8(0, v8[2] + 1, 1);
          v8 = (_QWORD *)v61[0];
        }
        v11 = v8[2];
        v10 = v8[3];
        v12 = v59;
        if (v11 >= v10 >> 1)
        {
          sub_1000751F8(v10 > 1, v11 + 1, 1);
          v12 = v59;
          v8 = (_QWORD *)v61[0];
        }
        v8[2] = v11 + 1;
        v13 = &v8[4 * v11];
        v13[4] = v14;
        *(_OWORD *)(v13 + 5) = v12;
        v13[7] = v15;
      }
      v9 += 4;
      --v7;
    }
    while (v7);
  }
  swift_bridgeObjectRelease(v6);
  v17 = v8[2];
  if (v17)
  {
    v61[0] = _swiftEmptyArrayStorage;
    sub_100074EAC(0, v17, 0);
    v18 = (_QWORD *)v61[0];
    v19 = v8 + 7;
    do
    {
      v20 = *(v19 - 3);
      v21 = *(v19 - 2);
      v22 = *(v19 - 1);
      v23 = *v19;
      swift_bridgeObjectRetain(*v19);
      v24 = static String._fromSubstring(_:)(v20, v21, v22, v23);
      v26 = v25;
      swift_bridgeObjectRelease(v23);
      v61[0] = v18;
      v28 = v18[2];
      v27 = v18[3];
      if (v28 >= v27 >> 1)
      {
        sub_100074EAC(v27 > 1, v28 + 1, 1);
        v18 = (_QWORD *)v61[0];
      }
      v18[2] = v28 + 1;
      v29 = &v18[2 * v28];
      v29[4] = v24;
      v29[5] = v26;
      v19 += 4;
      --v17;
    }
    while (v17);
    swift_release(v8);
  }
  else
  {
    swift_release(v8);
    v18 = _swiftEmptyArrayStorage;
  }
  __chkstk_darwin();
  v57 = &v64;
  sub_1001F0E50(sub_10020AA00, (uint64_t)v56, (uint64_t)v18);
  v31 = v30;
  v32 = *(_QWORD *)(v30 + 16);
  if (v32)
  {
    swift_bridgeObjectRetain(v30);
    *(_QWORD *)&v59 = v31;
    v33 = (_QWORD *)(v31 + 40);
    v34 = _swiftEmptyArrayStorage;
    while (1)
    {
      v35 = *(v33 - 1);
      v36 = *v33;
      v37 = v35 == 0x646E61626C617564 && v36 == 0xE800000000000000;
      if (v37
        || (_stringCompareWithSmolCheck(_:_:expecting:)(0x646E61626C617564, 0xE800000000000000, *(v33 - 1), *v33, 0) & 1) != 0)
      {
        break;
      }
      v42 = v35 == 7233902 && v36 == 0xE300000000000000;
      if (v42 || (_stringCompareWithSmolCheck(_:_:expecting:)(7233902, 0xE300000000000000, v35, v36, 0) & 1) != 0)
      {
        v38 = &static WiFiDriverCapabilities.supportsNAN;
        if (qword_100403EA8 != -1)
        {
          swift_once(&qword_100403EA8, sub_100069290);
          v38 = &static WiFiDriverCapabilities.supportsNAN;
        }
        goto LABEL_26;
      }
      if (v35 == 1818523489 && v36 == 0xE400000000000000
        || (_stringCompareWithSmolCheck(_:_:expecting:)(1818523489, 0xE400000000000000, v35, v36, 0) & 1) != 0)
      {
        v38 = &static WiFiDriverCapabilities.supportsAWDL;
        if (qword_100403EB0 != -1)
        {
          swift_once(&qword_100403EB0, sub_10006930C);
          v38 = &static WiFiDriverCapabilities.supportsAWDL;
        }
        goto LABEL_26;
      }
LABEL_31:
      v33 += 2;
      if (!--v32)
      {
        v31 = v59;
        swift_bridgeObjectRelease(v59);
        goto LABEL_46;
      }
    }
    v38 = &static WiFiDriverCapabilities.supportsSimultaneousDualBand;
    if (qword_100403EC0 != -1)
    {
      swift_once(&qword_100403EC0, sub_100069404);
      v38 = &static WiFiDriverCapabilities.supportsSimultaneousDualBand;
    }
LABEL_26:
    v39 = *v38;
    swift_bridgeObjectRetain(*v38);
    if ((swift_isUniquelyReferenced_nonNull_native(v34) & 1) == 0)
      v34 = sub_1000B30EC(0, v34[2] + 1, 1, v34);
    v41 = v34[2];
    v40 = v34[3];
    if (v41 >= v40 >> 1)
      v34 = sub_1000B30EC((_QWORD *)(v40 > 1), v41 + 1, 1, v34);
    v34[2] = v41 + 1;
    v34[v41 + 4] = v39;
    goto LABEL_31;
  }
  v34 = _swiftEmptyArrayStorage;
LABEL_46:
  swift_bridgeObjectRelease(v31);
  v61[0] = _swiftEmptyArrayStorage;
  v43 = v34[2];
  if (!v43)
  {
    swift_bridgeObjectRelease(v34);
LABEL_69:
    v55 = v61[0];
    sub_10000E614(v62, v63);
    return v55;
  }
  swift_bridgeObjectRetain(v34);
  v44 = 0;
  while (1)
  {
    v45 = v34[v44 + 4];
    v46 = (_QWORD *)v61[0];
    v47 = *(_QWORD *)(v61[0] + 16);
    v48 = *(_QWORD *)(v45 + 16);
    if (v47)
    {
      swift_bridgeObjectRetain(v45);
      if (!v48)
        goto LABEL_49;
      result = swift_isUniquelyReferenced_nonNull_native(v46);
      if ((result & 1) == 0)
      {
        result = (uint64_t)sub_1001A87B8(v46);
        v46 = (_QWORD *)result;
      }
      v50 = 0;
      v51 = *(_QWORD *)(v45 + 16);
      do
      {
        if (v48 == v50)
        {
          __break(1u);
LABEL_71:
          __break(1u);
LABEL_72:
          __break(1u);
LABEL_73:
          __break(1u);
          goto LABEL_74;
        }
        if (v50 == v51)
          goto LABEL_71;
        v52 = v46[2];
        if (v50 >= v52)
          goto LABEL_72;
        *((_BYTE *)v46 + v50 + 32) |= *(_BYTE *)(v45 + 32 + v50);
        v53 = v50 + 1;
        if (v53 == v47)
          break;
        v54 = v53 - 1;
        if (v54 == v47 - 1)
          goto LABEL_73;
        v50 = v54 + 1;
      }
      while (v50 != v48);
      v61[0] = v46;
      if (v52 >= v51)
        goto LABEL_49;
    }
    else
    {
      result = swift_bridgeObjectRetain(v45);
      v52 = 0;
      v51 = v48;
      if (!v48)
        goto LABEL_49;
    }
    if (v48 < v52)
      break;
    if (v51 < v48)
      goto LABEL_75;
    sub_1001A88E8(v45, v45 + 32, v52, (2 * v48) | 1);
LABEL_49:
    ++v44;
    swift_bridgeObjectRelease(v45);
    if (v44 == v43)
    {
      swift_bridgeObjectRelease_n(v34, 2);
      goto LABEL_69;
    }
  }
LABEL_74:
  __break(1u);
LABEL_75:
  __break(1u);
  return result;
}

uint64_t BroadcomDriver<>.loadCapabilities()(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  __int128 v19;
  _QWORD *v20;
  unint64_t v21;
  uint64_t v22;
  char isUniquelyReferenced_nonNull_native;
  int64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  uint64_t *v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  BOOL v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t result;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD v63[2];
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  _QWORD v76[3];
  uint64_t v77;
  unint64_t v78;

  v7 = type metadata accessor for __DataStorage(0);
  swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
  v77 = 0x40000000000;
  v78 = __DataStorage.init(length:)(1024) | 0x4000000000000000;
  v72 = a1;
  v73 = a2;
  v74 = a3;
  v75 = v3;
  sub_100208C74();
  v9 = v8;
  v11 = v10;
  v67 = a1;
  v68 = a2;
  v69 = a3;
  v70 = v75;
  v76[0] = 32;
  v76[1] = 0xE100000000000000;
  __chkstk_darwin();
  v64 = v76;
  swift_bridgeObjectRetain(v12);
  v13 = sub_100207AB0(0x7FFFFFFFFFFFFFFFLL, 1, sub_100209460, (uint64_t)v63, v9, v11);
  v66 = 0;
  swift_bridgeObjectRelease(v11);
  v14 = *(_QWORD *)(v13 + 16);
  v15 = _swiftEmptyArrayStorage;
  if (v14)
  {
    v16 = (_QWORD *)(v13 + 56);
    do
    {
      v21 = *(v16 - 3);
      if (!((*(v16 - 2) ^ v21) >> 14))
      {
        v71 = *((_OWORD *)v16 - 1);
        v22 = *v16;
        swift_bridgeObjectRetain(*v16);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v15);
        v76[0] = v15;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_1000751F8(0, v15[2] + 1, 1);
          v15 = (_QWORD *)v76[0];
        }
        v18 = v15[2];
        v17 = v15[3];
        v19 = v71;
        if (v18 >= v17 >> 1)
        {
          sub_1000751F8(v17 > 1, v18 + 1, 1);
          v19 = v71;
          v15 = (_QWORD *)v76[0];
        }
        v15[2] = v18 + 1;
        v20 = &v15[4 * v18];
        v20[4] = v21;
        *(_OWORD *)(v20 + 5) = v19;
        v20[7] = v22;
      }
      v16 += 4;
      --v14;
    }
    while (v14);
  }
  swift_bridgeObjectRelease(v13);
  v24 = v15[2];
  if (v24)
  {
    v76[0] = _swiftEmptyArrayStorage;
    sub_100074EAC(0, v24, 0);
    v25 = (_QWORD *)v76[0];
    v26 = v15 + 7;
    do
    {
      v27 = *(v26 - 3);
      v28 = *(v26 - 2);
      v30 = *(v26 - 1);
      v29 = *v26;
      swift_bridgeObjectRetain(*v26);
      v31 = static String._fromSubstring(_:)(v27, v28, v30, v29);
      v33 = v32;
      swift_bridgeObjectRelease(v29);
      v76[0] = v25;
      v35 = v25[2];
      v34 = v25[3];
      if (v35 >= v34 >> 1)
      {
        sub_100074EAC(v34 > 1, v35 + 1, 1);
        v25 = (_QWORD *)v76[0];
      }
      v25[2] = v35 + 1;
      v36 = &v25[2 * v35];
      v36[4] = v31;
      v36[5] = v33;
      v26 += 4;
      --v24;
    }
    while (v24);
    swift_release(v15);
  }
  else
  {
    swift_release(v15);
    v25 = _swiftEmptyArrayStorage;
  }
  __chkstk_darwin();
  v63[0] = v67;
  v63[1] = v68;
  v64 = v69;
  v65 = v70;
  sub_1001F0E50(sub_100209478, (uint64_t)&v62, (uint64_t)v25);
  *(_QWORD *)&v71 = v37;
  v38 = *(_QWORD *)(v37 + 16);
  if (v38)
  {
    v39 = (_QWORD *)(swift_bridgeObjectRetain(v71) + 40);
    v40 = _swiftEmptyArrayStorage;
    while (1)
    {
      v41 = *(v39 - 1);
      v42 = *v39;
      v43 = v41 == 0x646E61626C617564 && v42 == 0xE800000000000000;
      if (v43
        || (_stringCompareWithSmolCheck(_:_:expecting:)(0x646E61626C617564, 0xE800000000000000, *(v39 - 1), *v39, 0) & 1) != 0)
      {
        break;
      }
      v48 = v41 == 7233902 && v42 == 0xE300000000000000;
      if (v48 || (_stringCompareWithSmolCheck(_:_:expecting:)(7233902, 0xE300000000000000, v41, v42, 0) & 1) != 0)
      {
        v44 = &static WiFiDriverCapabilities.supportsNAN;
        if (qword_100403EA8 != -1)
        {
          swift_once(&qword_100403EA8, sub_100069290);
          v44 = &static WiFiDriverCapabilities.supportsNAN;
        }
        goto LABEL_26;
      }
      if (v41 == 1818523489 && v42 == 0xE400000000000000
        || (_stringCompareWithSmolCheck(_:_:expecting:)(1818523489, 0xE400000000000000, v41, v42, 0) & 1) != 0)
      {
        v44 = &static WiFiDriverCapabilities.supportsAWDL;
        if (qword_100403EB0 != -1)
        {
          swift_once(&qword_100403EB0, sub_10006930C);
          v44 = &static WiFiDriverCapabilities.supportsAWDL;
        }
        goto LABEL_26;
      }
LABEL_31:
      v39 += 2;
      if (!--v38)
      {
        swift_bridgeObjectRelease(v71);
        goto LABEL_46;
      }
    }
    v44 = &static WiFiDriverCapabilities.supportsSimultaneousDualBand;
    if (qword_100403EC0 != -1)
    {
      swift_once(&qword_100403EC0, sub_100069404);
      v44 = &static WiFiDriverCapabilities.supportsSimultaneousDualBand;
    }
LABEL_26:
    v45 = *v44;
    swift_bridgeObjectRetain(*v44);
    if ((swift_isUniquelyReferenced_nonNull_native(v40) & 1) == 0)
      v40 = sub_1000B30EC(0, v40[2] + 1, 1, v40);
    v47 = v40[2];
    v46 = v40[3];
    if (v47 >= v46 >> 1)
      v40 = sub_1000B30EC((_QWORD *)(v46 > 1), v47 + 1, 1, v40);
    v40[2] = v47 + 1;
    v40[v47 + 4] = v45;
    goto LABEL_31;
  }
  v40 = _swiftEmptyArrayStorage;
LABEL_46:
  swift_bridgeObjectRelease(v71);
  v76[0] = _swiftEmptyArrayStorage;
  v49 = v40[2];
  if (!v49)
  {
    swift_bridgeObjectRelease(v40);
LABEL_69:
    v61 = v76[0];
    sub_10000E614(v77, v78);
    return v61;
  }
  swift_bridgeObjectRetain(v40);
  v50 = 0;
  while (1)
  {
    v51 = v40[v50 + 4];
    v52 = (_QWORD *)v76[0];
    v53 = *(_QWORD *)(v76[0] + 16);
    v54 = *(_QWORD *)(v51 + 16);
    if (v53)
    {
      swift_bridgeObjectRetain(v51);
      if (!v54)
        goto LABEL_49;
      result = swift_isUniquelyReferenced_nonNull_native(v52);
      if ((result & 1) == 0)
      {
        result = (uint64_t)sub_1001A87B8(v52);
        v52 = (_QWORD *)result;
      }
      v56 = 0;
      v57 = *(_QWORD *)(v51 + 16);
      do
      {
        if (v54 == v56)
        {
          __break(1u);
LABEL_71:
          __break(1u);
LABEL_72:
          __break(1u);
LABEL_73:
          __break(1u);
          goto LABEL_74;
        }
        if (v56 == v57)
          goto LABEL_71;
        v58 = v52[2];
        if (v56 >= v58)
          goto LABEL_72;
        *((_BYTE *)v52 + v56 + 32) |= *(_BYTE *)(v51 + 32 + v56);
        v59 = v56 + 1;
        if (v59 == v53)
          break;
        v60 = v59 - 1;
        if (v60 == v53 - 1)
          goto LABEL_73;
        v56 = v60 + 1;
      }
      while (v56 != v54);
      v76[0] = v52;
      if (v58 >= v57)
        goto LABEL_49;
    }
    else
    {
      result = swift_bridgeObjectRetain(v51);
      v58 = 0;
      v57 = v54;
      if (!v54)
        goto LABEL_49;
    }
    if (v54 < v58)
      break;
    if (v57 < v54)
      goto LABEL_75;
    sub_1001A88E8(v51, v51 + 32, v58, (2 * v54) | 1);
LABEL_49:
    ++v50;
    swift_bridgeObjectRelease(v51);
    if (v50 == v49)
    {
      swift_bridgeObjectRelease_n(v40, 2);
      goto LABEL_69;
    }
  }
LABEL_74:
  __break(1u);
LABEL_75:
  __break(1u);
  return result;
}

uint64_t AppleBroadcomDriver.broadcomCapabilities.getter()
{
  uint64_t v0;
  _BYTE v2[24];

  swift_beginAccess(v0 + 80, v2, 0, 0);
  return *(_QWORD *)(v0 + 80);
}

uint64_t AppleBroadcomDriver.broadcomCapabilities.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  _BYTE v4[24];

  result = swift_beginAccess(v1 + 80, v4, 1, 0);
  *(_QWORD *)(v1 + 80) = a1;
  return result;
}

uint64_t (*AppleBroadcomDriver.broadcomCapabilities.modify(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + 80, a1, 33, 0);
  return j_j__swift_endAccess;
}

uint64_t AppleBroadcomDriver.logger.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtC7CoreP2P19AppleBroadcomDriver_logger;
  v4 = type metadata accessor for Logger(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

void AppleBroadcomDriver.__allocating_init(device:role:name:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  AppleBroadcomDriver.init(device:role:name:)(a1, a2, a3, a4);
}

void AppleBroadcomDriver.init(device:role:name:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  type metadata accessor for Logger(0);
  __chkstk_darwin();
  *(_QWORD *)(v4 + 80) = 0;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_QWORD *)(v4 + 40) = a1;
  *(_BYTE *)(v4 + 32) = a2;
  *(_QWORD *)(v4 + 16) = a3;
  *(_QWORD *)(v4 + 24) = a4;
  __asm { BR              X10 }
}

uint64_t sub_1001F2350()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  Logger.init(subsystem:category:)(0x6C7070612E6D6F63, 0xED00006E616E2E65, 0x726576697264, 0xE600000000000000);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v1 + OBJC_IVAR____TtC7CoreP2P19AppleBroadcomDriver_logger, v2, v0);
  return v1;
}

uint64_t AppleBroadcomDriver.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE v8[24];

  v1 = v0;
  swift_beginAccess(v0 + 48, v8, 33, 0);
  v2 = *(_QWORD *)(v0 + 64);
  if (v2)
  {
    v3 = *(_QWORD *)(v1 + 48);
    swift_unownedRetain(v3);
    swift_bridgeObjectRetain(v2);
    swift_unownedRelease(v3);
    swift_bridgeObjectRelease(v2);
    v4 = *(_QWORD *)(v1 + 48);
    swift_unownedRetainStrong(v4);
    AppleDevice.stopMonitoringEvents(on:)(*(Swift::String *)(v1 + 56));
    swift_release(v4);
  }
  swift_endAccess(v8);
  swift_bridgeObjectRelease(*(_QWORD *)(v1 + 24));
  swift_release(*(_QWORD *)(v1 + 40));
  sub_1000B53AC(*(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 64));
  swift_bridgeObjectRelease(*(_QWORD *)(v1 + 72));
  v5 = v1 + OBJC_IVAR____TtC7CoreP2P19AppleBroadcomDriver_logger;
  v6 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  return v1;
}

uint64_t AppleBroadcomDriver.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE v8[24];

  v1 = v0;
  swift_beginAccess(v0 + 48, v8, 33, 0);
  v2 = *(_QWORD *)(v0 + 64);
  if (v2)
  {
    v3 = *(_QWORD *)(v1 + 48);
    swift_unownedRetain(v3);
    swift_bridgeObjectRetain(v2);
    swift_unownedRelease(v3);
    swift_bridgeObjectRelease(v2);
    v4 = *(_QWORD *)(v1 + 48);
    swift_unownedRetainStrong(v4);
    AppleDevice.stopMonitoringEvents(on:)(*(Swift::String *)(v1 + 56));
    swift_release(v4);
  }
  swift_endAccess(v8);
  swift_bridgeObjectRelease(*(_QWORD *)(v1 + 24));
  swift_release(*(_QWORD *)(v1 + 40));
  sub_1000B53AC(*(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 64));
  swift_bridgeObjectRelease(*(_QWORD *)(v1 + 72));
  v5 = v1 + OBJC_IVAR____TtC7CoreP2P19AppleBroadcomDriver_logger;
  v6 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  return swift_deallocClassInstance(v1, *(unsigned int *)(*(_QWORD *)v1 + 48), *(unsigned __int16 *)(*(_QWORD *)v1 + 52));
}

uint64_t sub_1001F25B0()
{
  uint64_t *v0;
  uint64_t v1;
  _BYTE v3[24];

  v1 = *v0;
  swift_beginAccess(*v0 + 80, v3, 0, 0);
  return *(_QWORD *)(v1 + 80);
}

uint64_t sub_1001F25EC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t result;
  _BYTE v5[24];

  v3 = *v1;
  result = swift_beginAccess(v3 + 80, v5, 1, 0);
  *(_QWORD *)(v3 + 80) = a1;
  return result;
}

uint64_t (*sub_1001F262C(uint64_t a1))(_QWORD)
{
  _QWORD *v1;

  swift_beginAccess(*v1 + 80, a1, 33, 0);
  return j_j__swift_endAccess;
}

_QWORD *BroadcomDriver<>.awdlChannelSequence.getter()
{
  uint64_t v0;
  _QWORD *result;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  char *v6;
  _QWORD *v7;

  sub_100075000(0, 16, 0);
  v0 = 0;
  result = _swiftEmptyArrayStorage;
  v2 = _swiftEmptyArrayStorage[2];
  v3 = 8 * v2 + 32;
  do
  {
    v7 = result;
    v4 = result[3];
    v5 = v2 + 1;
    if (v2 >= v4 >> 1)
    {
      sub_100075000(v4 > 1, v2 + 1, 1);
      result = v7;
    }
    result[2] = v5;
    v6 = (char *)result + v3 + v0;
    *((_WORD *)v6 + 2) = 3;
    *(_DWORD *)v6 = 0;
    v0 += 8;
    v2 = v5;
  }
  while (v0 != 128);
  return result;
}

uint64_t sub_1001F2734()
{
  return sub_1001F2754();
}

uint64_t sub_1001F2754()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v1 = type metadata accessor for Data.Deallocator(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin();
  v4 = (char *)&v32 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = sub_10020515C(0x101u, 1);
  if (!v0)
  {
    sub_1001FE8E0();
    v7 = v6;
    v9 = v8;
    sub_100212DDC(v6, v8);
    v11 = v10;
    sub_10000E614(v7, v9);
    sub_10020526C(0x115u, v11 | 0xE5007F);
    sub_1001FE8E0();
    v13 = v12;
    v15 = v14;
    sub_1002137E0(v12, v14);
    v17 = v16;
    sub_10000E614(v13, v15);
    sub_10020537C(0x118u, v17 | 0x441);
    v18 = swift_slowAlloc(20, -1);
    *(_BYTE *)v18 = 1;
    *(_WORD *)(v18 + 2) = 16;
    *(_BYTE *)(v18 + 4) |= 0xE8u;
    *(_BYTE *)(v18 + 5) |= 7u;
    *(_BYTE *)(v18 + 6) |= 0xB0u;
    v19 = *(_BYTE *)(v18 + 8);
    *(_BYTE *)(v18 + 7) = -1;
    v20 = *(_BYTE *)(v18 + 9);
    *(_BYTE *)(v18 + 8) = v19 | 0x3F;
    *(_BYTE *)(v18 + 9) = v20 | 0x90;
    *(_BYTE *)(v18 + 10) |= 1u;
    v21 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, enum case for Data.Deallocator.none(_:), v1);
    v22 = Data.Deallocator._deallocator.getter(v21);
    v24 = v23;
    v25 = type metadata accessor for __DataStorage(0);
    swift_allocObject(v25, *(unsigned int *)(v25 + 48), *(unsigned __int16 *)(v25 + 52));
    swift_retain();
    v26 = __DataStorage.init(bytes:length:copy:deallocator:offset:)(v18, 20, 0, v22, v24, 0);
    swift_release(v24);
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    sub_1001FE8E0();
    sub_10000E614(v27, v28);
    sub_10000E614(0x1400000000, v26 | 0x4000000000000000);
    sub_10020526C(0x105u, 20);
    v29 = sub_100012C84();
    v30 = swift_allocError(&type metadata for WiFiError, v29, 0, 0);
    *(_OWORD *)v31 = xmmword_10033B180;
    *(_BYTE *)(v31 + 16) = 0;
    swift_willThrow(v30);
    return swift_slowDealloc(v18, -1, -1);
  }
  return result;
}

uint64_t BroadcomDriver<>.initializeNAN()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _DWORD v32[2];
  _DWORD v33[2];
  int v34;

  v7 = type metadata accessor for Data.Deallocator(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin();
  v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  LOBYTE(v33[0]) = 1;
  result = sub_1002057EC(257, (uint64_t)v33, a1, (uint64_t)&type metadata for UInt8, a2, a3);
  if (!v3)
  {
    sub_100205930(277, (uint64_t)&type metadata for UInt32, a1, (uint64_t)&type metadata for UInt32, a2, a3);
    v34 |= 0xE5007Fu;
    v33[0] = v34;
    sub_1002057EC(277, (uint64_t)v33, a1, (uint64_t)&type metadata for UInt32, a2, a3);
    type metadata accessor for wl_nan_cfg_ctrl2(0);
    v31 = v12;
    sub_100205930(280, v31, a1, v31, a2, a3);
    v32[1] = v33[1];
    v33[0] |= 0x441u;
    v32[0] = v33[0];
    sub_1002057EC(280, (uint64_t)v32, a1, v31, a2, a3);
    v13 = swift_slowAlloc(20, -1);
    v31 = v13;
    *(_BYTE *)v13 = 1;
    *(_WORD *)(v13 + 2) = 16;
    *(_BYTE *)(v13 + 4) |= 0xE8u;
    *(_BYTE *)(v13 + 5) |= 7u;
    *(_BYTE *)(v13 + 6) |= 0xB0u;
    v14 = *(_BYTE *)(v13 + 8);
    *(_BYTE *)(v13 + 7) = -1;
    v15 = *(_BYTE *)(v13 + 9);
    *(_BYTE *)(v13 + 8) = v14 | 0x3F;
    *(_BYTE *)(v13 + 9) = v15 | 0x90;
    *(_BYTE *)(v13 + 10) |= 1u;
    v16 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v8 + 104))(v10, enum case for Data.Deallocator.none(_:), v7);
    v17 = Data.Deallocator._deallocator.getter(v16);
    v29 = v18;
    v30 = v17;
    v19 = v18;
    v20 = type metadata accessor for __DataStorage(0);
    swift_allocObject(v20, *(unsigned int *)(v20 + 48), *(unsigned __int16 *)(v20 + 52));
    swift_retain();
    v21 = __DataStorage.init(bytes:length:copy:deallocator:offset:)(v31, 20, 0, v30, v19, 0);
    swift_release(v29);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    sub_1001FF3CC(7233902, 0xE300000000000000, 276, 0x1400000000, v21 | 0x4000000000000000, 1, a1, a2, *(_QWORD *)(a3 + 16));
    v22 = v31;
    sub_10000E614(v23, v24);
    sub_10000E614(0x1400000000, v21 | 0x4000000000000000);
    v32[0] = 20;
    sub_1002057EC(261, (uint64_t)v32, a1, (uint64_t)&type metadata for UInt32, a2, a3);
    v25 = sub_100012C84();
    v26 = swift_allocError(&type metadata for WiFiError, v25, 0, 0);
    *(_OWORD *)v27 = xmmword_10033B180;
    *(_BYTE *)(v27 + 16) = 0;
    swift_willThrow(v26);
    return swift_slowDealloc(v22, -1, -1);
  }
  return result;
}

BOOL sub_1001F2E48()
{
  return sub_1001F2E68();
}

BOOL sub_1001F2E68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  char v4;
  char v5;

  sub_1001FE8E0();
  v1 = v0;
  v3 = v2;
  sub_100212D4C(v0, v2);
  v5 = v4;
  sub_10000E614(v1, v3);
  return v5 == 1;
}

BOOL BroadcomDriver<>.nanState.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v4;

  sub_100205930(278, (uint64_t)&type metadata for UInt8, a1, (uint64_t)&type metadata for UInt8, a2, a3);
  return v4 == 1;
}

uint64_t sub_1001F2F5C(char a1)
{
  uint64_t *v1;
  uint64_t v2;
  char v4;
  char v5;

  v2 = *v1;
  v5 = a1 & 1;
  v4 = a1 & 1;
  return sub_100204B44((uint64_t)&v4, &v5, v2, 0x116u);
}

uint64_t BroadcomDriver<>.update(nanState:)(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v5;

  v5 = a1 & 1;
  return sub_100204A0C(278, (uint64_t)&v5, a2, (uint64_t)&type metadata for UInt8, a3, a4);
}

uint64_t sub_1001F3000()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_1001FE8E0();
  v1 = v0;
  v3 = v2;
  sub_10000E7B8(v0, v2);
  v5 = v4;
  sub_10000E614(v1, v3);
  return v5 & 0xFFFFFFFFFFFFLL;
}

unint64_t BroadcomDriver<>.clusterID.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unsigned int v8;
  unsigned __int8 v9;
  unsigned __int8 v10;

  type metadata accessor for ether_addr(0);
  sub_100205930(268, v6, a1, v6, a2, a3);
  return v8 | ((unint64_t)v9 << 32) | ((unint64_t)v10 << 40);
}

uint64_t sub_1001F3138(uint64_t a1)
{
  return sub_10020548C(0x10Cu, a1 & 0xFFFFFFFFFFFFLL);
}

uint64_t BroadcomDriver<>.update(clusterID:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  __int16 v9;
  char v10;
  char v11;
  char v12;
  char v13;

  v9 = a1;
  v10 = BYTE2(a1);
  v11 = BYTE3(a1);
  v12 = BYTE4(a1);
  v13 = BYTE5(a1);
  type metadata accessor for ether_addr(0);
  return sub_1002057EC(268, (uint64_t)&v9, a2, v7, a3, a4);
}

uint64_t sub_1001F31EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unsigned int v4;
  unsigned int v5;

  sub_1001FE8E0();
  v1 = v0;
  v3 = v2;
  sub_10021689C(v0, v2);
  v5 = v4;
  sub_10000E614(v1, v3);
  return bswap32(v5) >> 16;
}

uint64_t BroadcomDriver<>.electionMetric.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unsigned __int16 v8;

  type metadata accessor for wl_nan_election_metric_config(0);
  sub_100205930(514, v6, a1, v6, a2, a3);
  return __rev16(v8);
}

uint64_t sub_1001F330C(__int16 a1)
{
  uint64_t *v1;
  uint64_t v2;
  _BYTE v4[2];
  __int16 v5;
  int v6;

  v2 = *v1;
  HIBYTE(v6) = 0;
  LOBYTE(v6) = HIBYTE(a1);
  *(_WORD *)((char *)&v6 + 1) = a1;
  v4[0] = HIBYTE(a1);
  v4[1] = a1;
  v5 = 0;
  return sub_100204D34((uint64_t)v4, &v6, v2, 0x202u);
}

uint64_t BroadcomDriver<>.update(electionMetric:)(__int16 a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  char v9;
  __int16 v10;
  char v11;

  v11 = 0;
  v9 = HIBYTE(a1);
  v10 = a1;
  type metadata accessor for wl_nan_election_metric_config(0);
  return sub_100204A0C(514, (uint64_t)&v9, a2, v7, a3, a4);
}

uint64_t sub_1001F33F0()
{
  return sub_1001F3410();
}

uint64_t sub_1001F3410()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  __int16 v5;
  __int16 v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  int v9;
  int v10;

  sub_1001FE8E0();
  v1 = v0;
  v3 = v2;
  sub_1002169CC(v0, v2);
  v6 = v5;
  sub_10000E614(v1, v3);
  v7 = _s7CoreP2P18NANAwakeDWIntervalO8intervalACSgAA11NANTimeUnitV_tcfC_0(v6);
  if (v7 == 5)
    v8 = 0;
  else
    v8 = v7;
  v9 = _s7CoreP2P18NANAwakeDWIntervalO8intervalACSgAA11NANTimeUnitV_tcfC_0(HIBYTE(v6));
  if (v9 == 5)
    v10 = 0;
  else
    v10 = v9;
  return v8 | (v10 << 8);
}

uint64_t BroadcomDriver<>.dwAwakePeriods.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  int v9;
  int v10;
  unsigned __int8 v12;
  unsigned __int8 v13;

  type metadata accessor for wl_nan_awake_dws(0);
  sub_100205930(1026, v6, a1, v6, a2, a3);
  v7 = _s7CoreP2P18NANAwakeDWIntervalO8intervalACSgAA11NANTimeUnitV_tcfC_0(v12);
  if (v7 == 5)
    v8 = 0;
  else
    v8 = v7;
  v9 = _s7CoreP2P18NANAwakeDWIntervalO8intervalACSgAA11NANTimeUnitV_tcfC_0(v13);
  if (v9 == 5)
    v10 = 0;
  else
    v10 = v9;
  return v8 | (v10 << 8);
}

void sub_1001F357C(char a1)
{
  sub_1001F359C(a1);
}

void sub_1001F359C(char a1)
{
  __asm { BR              X12 }
}

uint64_t sub_1001F35C8(unsigned int a1)
{
  return sub_1002055BC(0x402u, *(_DWORD *)((char *)&unk_10035C630 + ((uint64_t)((unint64_t)(a1 >> 8) << 56) >> 54)) | 1u);
}

void BroadcomDriver<>.update(dwAwakePeriods:)(char a1)
{
  __asm { BR              X12 }
}

uint64_t sub_1001F3650(unsigned int a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE v6[2];
  __int16 v7;

  v6[0] = 1;
  v6[1] = 0x1008040100uLL >> ((a1 >> 5) & 0xF8);
  v7 = 0;
  type metadata accessor for wl_nan_awake_dws(0);
  return sub_1002057EC(1026, (uint64_t)v6, v3, v4, v2, v1);
}

BOOL sub_1001F36C8()
{
  return sub_1001F36EC();
}

BOOL sub_1001F36EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  char v4;
  char v5;

  sub_1001FE8E0();
  v1 = v0;
  v3 = v2;
  sub_100212D4C(v0, v2);
  v5 = v4;
  sub_10000E614(v1, v3);
  return v5 != 0;
}

BOOL BroadcomDriver<>.hostElection.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v4;

  sub_100205930(513, (uint64_t)&type metadata for UInt8, a1, (uint64_t)&type metadata for UInt8, a2, a3);
  return v4 != 0;
}

uint64_t sub_1001F37DC(char a1)
{
  return sub_10020537C(0x201u, a1 & 1);
}

uint64_t BroadcomDriver<>.update(hostElection:)(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;

  v5 = a1 & 1;
  return sub_1002057EC(513, (uint64_t)&v5, a2, (uint64_t)&type metadata for Int, a3, a4);
}

uint64_t sub_1001F3844(uint64_t a1)
{
  return sub_1001F3864(a1);
}

uint64_t sub_1001F3864(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  int *v18;
  unsigned __int8 *v19;
  uint64_t v20;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char v26;
  char v27;
  unsigned __int8 v28;
  unsigned __int8 v29;
  unsigned __int8 v30;
  char v31;
  unsigned __int8 v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  unint64_t v48;
  _QWORD v49[6];
  uint64_t v50;
  char *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  int *v57;
  uint64_t v58;
  _BYTE v59[24];
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;

  v4 = type metadata accessor for DispatchTimeInterval(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin();
  v7 = (char *)v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for SHA256Digest(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin();
  v53 = (char *)v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = type metadata accessor for SHA256(0);
  v52 = *(_QWORD *)(v54 - 8);
  __chkstk_darwin();
  v51 = (char *)v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = xmmword_10033A100;
  v64 = xmmword_10033A100;
  v12 = (int *)type metadata accessor for NANSubscribe.Configuration(0);
  v13 = (unsigned __int8 *)(a1 + v12[12]);
  v14 = *((_QWORD *)v13 + 1);
  v15 = *(_QWORD *)(v14 + 16);
  v55 = v1;
  v57 = v12;
  if (v15)
  {
    result = sub_100206168(*v13, v14);
    v58 = v2;
    if (!v2)
    {
      v50 = v9;
      __asm { BR              X10 }
    }
  }
  else
  {
    v18 = v12;
    v19 = (unsigned __int8 *)(a1 + v12[11]);
    v20 = *((_QWORD *)v19 + 1);
    if (!*(_QWORD *)(v20 + 16))
    {
      v49[3] = v4;
      v49[1] = v7;
      v22 = a1 + v12[14];
      v23 = *(unsigned __int16 *)(v22 + 16);
      v49[4] = a1;
      v49[2] = v5;
      v49[5] = v8;
      v50 = v9;
      if ((v23 & 0xFF00) == 0x200)
      {
        v58 = v2;
        v39 = NANSubscribe.Configuration.serviceInfo.getter();
        v41 = v40;
        v43 = v42;
        sub_100031FEC(v40, v42);
        v44 = sub_10001F11C((uint64_t)_swiftEmptyArrayStorage);
        v45 = type metadata accessor for BinaryEncoder();
        v46 = (uint64_t *)swift_allocObject(v45, 40, 7);
        *((_OWORD *)v46 + 1) = v56;
        v46[4] = v44;
        v62 = v45;
        v63 = sub_100011DE4((unint64_t *)&qword_100406278, (uint64_t (*)(uint64_t))type metadata accessor for BinaryEncoder, (uint64_t)protocol conformance descriptor for BinaryEncoder);
        v60 = (uint64_t)v46;
        sub_100031FEC(v41, v43);
        swift_retain();
        v47 = v58;
        NANServiceInfo.encode(to:)((uint64_t)&v60, v39, v41, v43);
        if (v47)
        {
          sub_100014430(&v60);
          sub_10000E614(v41, v43);
          sub_10000E614(v41, v43);
          swift_release(v46);
          swift_errorRelease(v47);
          sub_10000E614(v41, v43);
          __asm { BR              X13 }
        }
        sub_100014430(&v60);
        sub_10000E614(v41, v43);
        sub_10000E614(v41, v43);
        swift_beginAccess(v46 + 2, v59, 0, 0);
        v48 = v46[3];
        sub_100031FEC(v46[2], v48);
        swift_release(v46);
        sub_10000E614(v41, v43);
        __asm { BR              X9 }
      }
      v24 = *(_QWORD *)(v22 + 8);
      v25 = *(_QWORD *)v22;
      sub_100031FEC(*(_QWORD *)v22, v24);
      v26 = sub_1001AA370(1u, 0, 1);
      if (!v2)
      {
        v27 = v26;
        v28 = sub_1001AA35C((v23 >> 8) & 1, 1, 1);
        v29 = sub_1001AA370(v23, 2uLL, 2);
        if ((v28 & ~v27) != 0)
          v30 = v28;
        else
          v30 = 0;
        v31 = v30 | v27;
        if ((v29 & ~v31) != 0)
          v32 = v29;
        else
          v32 = 0;
        v33 = v32 | v31;
        v34 = sub_100012C44(&qword_100403E88);
        v35 = swift_allocObject(v34, 33, 7);
        *(_OWORD *)(v35 + 16) = xmmword_10033A110;
        *(_BYTE *)(v35 + 32) = v33;
        v36 = sub_1001068EC(v35);
        v38 = v37;
        swift_bridgeObjectRelease(v35);
        v60 = v36;
        v61 = v38;
        sub_1001297B4(v25, v24, v23);
        sub_100031FEC(v36, v38);
        sub_1000FBDAC(v25, v24);
        sub_1000B5F34(v25, v24, v23);
        sub_10000E614(v36, v38);
        __asm { BR              X10 }
      }
      swift_unexpectedError(v2, "CoreP2P/NANAttribute.swift", 26, 1);
      __break(1u);
      swift_unexpectedError(v2, "CoreP2P/NANAttribute.swift", 26, 1);
      __break(1u);
      swift_unexpectedError(v18, "CoreP2P/NANAttribute.swift", 26, 1);
      __break(1u);
      JUMPOUT(0x1001F4580);
    }
    sub_100206168(*v19, v20);
    v58 = v2;
    if (!v2)
    {
      v50 = v9;
      __asm { BR              X10 }
    }
    return sub_10000E614(v64, *((unint64_t *)&v64 + 1));
  }
  return result;
}

uint64_t BroadcomDriver<>.start(configuration:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  unsigned __int8 *v21;
  uint64_t v22;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char v27;
  char v28;
  uint64_t v29;
  unsigned __int8 v30;
  char v31;
  char v32;
  unsigned __int8 v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52[4];
  uint64_t v53;
  uint64_t v54;
  int *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  _BYTE v66[24];
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  __int128 v71;

  v57 = a3;
  v8 = type metadata accessor for DispatchTimeInterval(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin();
  v11 = (char *)v52 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for SHA256Digest(0);
  v62 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin();
  v60 = (char *)v52 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = type metadata accessor for SHA256(0);
  v59 = *(_QWORD *)(v61 - 8);
  __chkstk_darwin();
  v58 = (char *)v52 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = xmmword_10033A100;
  v71 = xmmword_10033A100;
  v15 = (int *)type metadata accessor for NANSubscribe.Configuration(0);
  v16 = (unsigned __int8 *)(a1 + v15[12]);
  v17 = *((_QWORD *)v16 + 1);
  v18 = *(_QWORD *)(v17 + 16);
  v63 = a2;
  if (v18)
  {
    result = sub_100206168(*v16, v17);
    v65 = v4;
    if (!v4)
    {
      v56 = v12;
      __asm { BR              X10 }
    }
  }
  else
  {
    v21 = (unsigned __int8 *)(a1 + v15[11]);
    v22 = *((_QWORD *)v21 + 1);
    if (!*(_QWORD *)(v22 + 16))
    {
      v56 = v12;
      v55 = v15;
      v24 = a1 + v15[14];
      v25 = *(unsigned __int16 *)(v24 + 16);
      v52[3] = a4;
      v52[2] = v9;
      if ((v25 & 0xFF00) == 0x200)
      {
        v65 = v4;
        v52[1] = (unint64_t)v11;
        v54 = v8;
        v53 = a1;
        v42 = NANSubscribe.Configuration.serviceInfo.getter();
        v44 = v43;
        v46 = v45;
        sub_100031FEC(v43, v45);
        v47 = sub_10001F11C((uint64_t)_swiftEmptyArrayStorage);
        v48 = type metadata accessor for BinaryEncoder();
        v49 = (uint64_t *)swift_allocObject(v48, 40, 7);
        *((_OWORD *)v49 + 1) = v64;
        v49[4] = v47;
        v69 = v48;
        v70 = sub_100011DE4((unint64_t *)&qword_100406278, (uint64_t (*)(uint64_t))type metadata accessor for BinaryEncoder, (uint64_t)protocol conformance descriptor for BinaryEncoder);
        v67 = (uint64_t)v49;
        sub_100031FEC(v44, v46);
        swift_retain();
        v50 = v65;
        NANServiceInfo.encode(to:)((uint64_t)&v67, v42, v44, v46);
        if (v50)
        {
          sub_100014430(&v67);
          sub_10000E614(v44, v46);
          sub_10000E614(v44, v46);
          swift_release(v49);
          swift_errorRelease(v50);
          sub_10000E614(v44, v46);
          __asm { BR              X13 }
        }
        sub_100014430(&v67);
        sub_10000E614(v44, v46);
        sub_10000E614(v44, v46);
        swift_beginAccess(v49 + 2, v66, 0, 0);
        v51 = v49[3];
        sub_100031FEC(v49[2], v51);
        swift_release(v49);
        sub_10000E614(v44, v46);
        __asm { BR              X9 }
      }
      v26 = *(_QWORD *)(v24 + 8);
      v53 = *(_QWORD *)v24;
      v52[0] = v26;
      sub_100031FEC(v53, v26);
      v27 = sub_1001AA370(1u, 0, 1);
      if (!v4)
      {
        v28 = v27;
        v29 = sub_1001AA35C((v25 >> 8) & 1, 1, 1);
        v30 = sub_1001AA370(v25, 2uLL, 2);
        v65 = 0;
        if ((v29 & ~v28) != 0)
          v31 = v29;
        else
          v31 = 0;
        v32 = v31 | v28;
        if ((v30 & ~v32) != 0)
          v33 = v30;
        else
          v33 = 0;
        v34 = v33 | v32;
        v35 = sub_100012C44(&qword_100403E88);
        v36 = swift_allocObject(v35, 33, 7);
        *(_OWORD *)(v36 + 16) = xmmword_10033A110;
        *(_BYTE *)(v36 + 32) = v34;
        v37 = sub_1001068EC(v36);
        v39 = v38;
        swift_bridgeObjectRelease(v36);
        v67 = v37;
        v68 = v39;
        v40 = v53;
        v41 = v52[0];
        sub_1001297B4(v53, v52[0], v25);
        sub_100031FEC(v37, v39);
        sub_1000FBDAC(v40, v41);
        sub_1000B5F34(v40, v41, v25);
        sub_10000E614(v37, v39);
        __asm { BR              X10 }
      }
      swift_unexpectedError(v4, "CoreP2P/NANAttribute.swift", 26, 1);
      __break(1u);
      swift_unexpectedError(v4, "CoreP2P/NANAttribute.swift", 26, 1);
      __break(1u);
      swift_unexpectedError(v65, "CoreP2P/NANAttribute.swift", 26, 1);
      __break(1u);
      JUMPOUT(0x1001F5394);
    }
    sub_100206168(*v21, v22);
    v65 = v4;
    if (!v4)
    {
      v56 = v12;
      __asm { BR              X10 }
    }
    return sub_10000E614(v71, *((unint64_t *)&v71 + 1));
  }
  return result;
}

uint64_t sub_1001F53E4(uint64_t a1)
{
  return sub_1001F5404(a1);
}

uint64_t sub_1001F5404(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  unint64_t v28;
  __int16 v29;
  int v30;
  __int16 v31;
  __int16 v32;
  _QWORD v34[7];
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  _BYTE v47[24];
  _QWORD __src[5];
  __int128 v49;

  v4 = type metadata accessor for DispatchTimeInterval(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin();
  v7 = (char *)v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for SHA256Digest(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin();
  v42 = (char *)v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for SHA256(0);
  v41 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin();
  v40 = (char *)v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = xmmword_10033A100;
  v46 = a1;
  v13 = *(_QWORD *)(a1 + 48);
  v14 = *(_QWORD *)(v13 + 16);
  v43 = v1;
  v44 = xmmword_10033A100;
  if (v14)
  {
    result = sub_100206168(*(unsigned __int8 *)(v46 + 40), v13);
    if (!v2)
    {
      v38 = v11;
      v39 = v9;
      __asm { BR              X10 }
    }
  }
  else
  {
    v17 = *(_QWORD *)(v46 + 64);
    if (!*(_QWORD *)(v17 + 16))
    {
      v45 = v2;
      v38 = v11;
      v39 = v9;
      v37 = v8;
      v34[4] = v7;
      v34[5] = v5;
      v34[6] = v4;
      v19 = NANPublish.Configuration.serviceInfo.getter();
      v21 = v20;
      v23 = v22;
      sub_100031FEC(v20, v22);
      v24 = sub_10001F11C((uint64_t)_swiftEmptyArrayStorage);
      v25 = type metadata accessor for BinaryEncoder();
      v26 = (uint64_t *)swift_allocObject(v25, 40, 7);
      *((_OWORD *)v26 + 1) = v44;
      v26[4] = v24;
      v36 = v25;
      __src[3] = v25;
      v35 = sub_100011DE4((unint64_t *)&qword_100406278, (uint64_t (*)(uint64_t))type metadata accessor for BinaryEncoder, (uint64_t)protocol conformance descriptor for BinaryEncoder);
      __src[4] = v35;
      __src[0] = v26;
      sub_100031FEC(v21, v23);
      swift_retain();
      v27 = v45;
      NANServiceInfo.encode(to:)((uint64_t)__src, v19, v21, v23);
      if (v27)
      {
        sub_100014430(__src);
        sub_10000E614(v21, v23);
        sub_10000E614(v21, v23);
        swift_release(v26);
        swift_errorRelease(v27);
        sub_10000E614(v21, v23);
        v45 = 0;
        if (*(_QWORD *)(*(_QWORD *)(v46 + *(int *)(type metadata accessor for NANPublish.Configuration(0) + 84) + 16)
                       + 16))
          v29 = 580;
        else
          v29 = 516;
        v30 = *(unsigned __int8 *)(v46 + 77);
        if ((v30 & 1) != 0)
          v31 = 3;
        else
          v31 = 1;
        if (v30 == 2)
          v32 = 0;
        else
          v32 = v31;
        LOWORD(__src[0]) = v29 | v32;
        sub_10021BD08(__src, 2);
        __asm { BR              X10 }
      }
      v45 = 0;
      sub_100014430(__src);
      sub_10000E614(v21, v23);
      sub_10000E614(v21, v23);
      swift_beginAccess(v26 + 2, v47, 0, 0);
      v28 = v26[3];
      sub_100031FEC(v26[2], v28);
      swift_release(v26);
      sub_10000E614(v21, v23);
      __asm { BR              X9 }
    }
    sub_100206168(*(unsigned __int8 *)(v46 + 56), v17);
    if (!v2)
    {
      v38 = v11;
      v39 = v9;
      __asm { BR              X10 }
    }
    return sub_10000E614(v49, *((unint64_t *)&v49 + 1));
  }
  return result;
}

uint64_t BroadcomDriver<>.start(configuration:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  __int16 v32;
  int v33;
  __int16 v34;
  __int16 v35;
  _QWORD v37[9];
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  _BYTE v52[24];
  _QWORD __src[5];
  __int128 v54;

  v42 = a4;
  v9 = type metadata accessor for DispatchTimeInterval(0);
  v49 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin();
  v11 = (char *)v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = type metadata accessor for SHA256Digest(0);
  v12 = *(_QWORD *)(v48 - 8);
  __chkstk_darwin();
  v46 = (char *)v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = type metadata accessor for SHA256(0);
  v45 = *(_QWORD *)(v47 - 8);
  __chkstk_darwin();
  v44 = (char *)v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = xmmword_10033A100;
  v15 = *(_QWORD *)(a1 + 48);
  v16 = *(_QWORD *)(v15 + 16);
  v43 = v4;
  v50 = a3;
  v51 = xmmword_10033A100;
  if (v16)
  {
    result = sub_100206168(*(unsigned __int8 *)(a1 + 40), v15);
    if (!v5)
    {
      v40 = v12;
      __asm { BR              X10 }
    }
  }
  else
  {
    v19 = *(_QWORD *)(a1 + 64);
    if (!*(_QWORD *)(v19 + 16))
    {
      v38 = v5;
      v40 = v12;
      v37[7] = v11;
      v39 = v9;
      v37[6] = a2;
      v41 = a1;
      v21 = NANPublish.Configuration.serviceInfo.getter();
      v23 = v22;
      v25 = v24;
      sub_100031FEC(v22, v24);
      v26 = sub_10001F11C((uint64_t)_swiftEmptyArrayStorage);
      v27 = type metadata accessor for BinaryEncoder();
      v28 = (uint64_t *)swift_allocObject(v27, 40, 7);
      *((_OWORD *)v28 + 1) = v51;
      v28[4] = v26;
      v37[8] = v27;
      __src[3] = v27;
      __src[4] = sub_100011DE4((unint64_t *)&qword_100406278, (uint64_t (*)(uint64_t))type metadata accessor for BinaryEncoder, (uint64_t)protocol conformance descriptor for BinaryEncoder);
      __src[0] = v28;
      sub_100031FEC(v23, v25);
      swift_retain();
      v29 = v38;
      NANServiceInfo.encode(to:)((uint64_t)__src, v21, v23, v25);
      if (v29)
      {
        sub_100014430(__src);
        sub_10000E614(v23, v25);
        sub_10000E614(v23, v25);
        swift_release(v28);
        swift_errorRelease(v29);
        sub_10000E614(v23, v25);
        v38 = 0;
        v30 = v41;
        if (*(_QWORD *)(*(_QWORD *)(v30 + *(int *)(type metadata accessor for NANPublish.Configuration(0) + 84) + 16)
                       + 16))
          v32 = 580;
        else
          v32 = 516;
        v33 = *(unsigned __int8 *)(v30 + 77);
        if ((v33 & 1) != 0)
          v34 = 3;
        else
          v34 = 1;
        if (v33 == 2)
          v35 = 0;
        else
          v35 = v34;
        LOWORD(__src[0]) = v35 | v32;
        sub_10021BD08(__src, 2);
        __asm { BR              X10 }
      }
      sub_100014430(__src);
      sub_10000E614(v23, v25);
      sub_10000E614(v23, v25);
      swift_beginAccess(v28 + 2, v52, 0, 0);
      v31 = v28[3];
      sub_100031FEC(v28[2], v31);
      swift_release(v28);
      sub_10000E614(v23, v25);
      __asm { BR              X9 }
    }
    sub_100206168(*(unsigned __int8 *)(a1 + 56), v19);
    if (!v5)
    {
      v40 = v12;
      __asm { BR              X10 }
    }
    return sub_10000E614(v54, *((unint64_t *)&v54 + 1));
  }
  return result;
}

void sub_1001F81C8(_BYTE *a1)
{
  sub_1001F81E8(a1);
}

void sub_1001F81E8(_BYTE *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[12];
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  type metadata accessor for SHA256Digest(0);
  __chkstk_darwin();
  v7[11] = (char *)v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7[10] = *(_QWORD *)(type metadata accessor for SHA256(0) - 8);
  __chkstk_darwin();
  v7[9] = (char *)v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = xmmword_10033A100;
  v10 = xmmword_10033A100;
  v11 = sub_100012C44(&qword_100403E88);
  v4 = swift_allocObject(v11, 33, 7);
  v8 = xmmword_10033A110;
  *(_OWORD *)(v4 + 16) = xmmword_10033A110;
  *(_BYTE *)(v4 + 32) = *a1;
  sub_1001068EC(v4);
  v6 = v5;
  swift_bridgeObjectRelease(v4);
  __asm { BR              X10 }
}

void BroadcomDriver<>.start(configuration:)(_BYTE *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[12];
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;

  v17 = a4;
  v12 = *(_QWORD *)(type metadata accessor for SHA256Digest(0) - 8);
  __chkstk_darwin();
  v10[11] = (char *)v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for SHA256(0);
  v10[10] = *(_QWORD *)(v11 - 8);
  __chkstk_darwin();
  v10[9] = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = xmmword_10033A100;
  v16 = xmmword_10033A100;
  v14 = sub_100012C44(&qword_100403E88);
  v7 = swift_allocObject(v14, 33, 7);
  v13 = xmmword_10033A110;
  *(_OWORD *)(v7 + 16) = xmmword_10033A110;
  *(_BYTE *)(v7 + 32) = *a1;
  sub_1001068EC(v7);
  v9 = v8;
  swift_bridgeObjectRelease(v7);
  __asm { BR              X10 }
}

uint64_t sub_1001FA22C(unsigned __int8 a1, uint64_t a2)
{
  return sub_10020537C(0x506u, a1 | (unint64_t)(a2 << 16));
}

uint64_t BroadcomDriver<>.terminate(datapathID:initiatorAddress:)(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  _BYTE v10[2];
  __int16 v11;
  char v12;
  char v13;
  char v14;
  char v15;

  v10[0] = a1;
  v10[1] = 0;
  v11 = a2;
  v12 = BYTE2(a2);
  v13 = BYTE3(a2);
  v14 = BYTE4(a2);
  v15 = BYTE5(a2);
  type metadata accessor for wl_nan_dp_end(0);
  return sub_1002057EC(1286, (uint64_t)v10, a3, v8, a4, a5);
}

uint64_t sub_1001FA2EC(char a1)
{
  return sub_10020515C(0x307u, a1);
}

uint64_t BroadcomDriver<>.terminate(subscribeID:)(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v5;

  v5 = a1;
  return sub_1002057EC(775, (uint64_t)&v5, a2, (uint64_t)&type metadata for UInt8, a3, a4);
}

uint64_t sub_1001FA350(char a1)
{
  return sub_10020515C(0x304u, a1);
}

uint64_t BroadcomDriver<>.terminate(publishID:)(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v5;

  v5 = a1;
  return sub_1002057EC(772, (uint64_t)&v5, a2, (uint64_t)&type metadata for UInt8, a3, a4);
}

void sub_1001FA3B4(uint64_t a1, unint64_t a2)
{
  sub_1001FA3D8(a1, a2);
}

void sub_1001FA3D8(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t inited;
  unsigned int v6;
  uint64_t v7;
  char v8;
  _BYTE v9[56];
  uint64_t KeyPath;

  KeyPath = swift_getKeyPath(&unk_10035C120);
  v4 = sub_100012C44(&qword_100406140);
  inited = swift_initStackObject(v4, v9);
  *(_DWORD *)(inited + 32) = 780;
  *(_OWORD *)(inited + 16) = xmmword_10033A110;
  *(_QWORD *)(inited + 40) = a1;
  *(_QWORD *)(inited + 48) = a2;
  sub_100031FEC(a1, a2);
  v6 = *(_DWORD *)(inited + 32);
  v7 = *(_QWORD *)(inited + 48);
  swift_bridgeObjectRetain(inited);
  if (v6 < 0x10000)
    __asm { BR              X10 }
  v8 = 2;
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, v8, 3455, 0);
  __break(1u);
  JUMPOUT(0x1001FA6CCLL);
}

void BroadcomDriver<>.transmit(followUp:for:to:with:)(uint64_t a1, unint64_t a2, char a3, uint64_t a4, char a5)
{
  uint64_t v7;
  uint64_t inited;
  unsigned int v9;
  uint64_t v10;
  _BYTE v11[60];
  __int16 v12;
  char v13;
  char v14;
  char v15;
  char v16;
  int v17;
  __int16 v18;
  uint64_t KeyPath;

  v11[58] = a3;
  v11[59] = a5;
  v12 = a4;
  v13 = BYTE2(a4);
  v14 = BYTE3(a4);
  v15 = BYTE4(a4);
  v16 = BYTE5(a4);
  v17 = 0;
  v18 = 0;
  KeyPath = swift_getKeyPath(&unk_10035C120);
  v7 = sub_100012C44(&qword_100406140);
  inited = swift_initStackObject(v7, v11);
  *(_DWORD *)(inited + 32) = 780;
  *(_OWORD *)(inited + 16) = xmmword_10033A110;
  *(_QWORD *)(inited + 40) = a1;
  *(_QWORD *)(inited + 48) = a2;
  sub_100031FEC(a1, a2);
  v9 = *(_DWORD *)(inited + 32);
  v10 = *(_QWORD *)(inited + 48);
  swift_bridgeObjectRetain(inited);
  if (!HIWORD(v9))
    __asm { BR              X10 }
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 3455, 0);
  __break(1u);
  JUMPOUT(0x1001FAA24);
}

uint64_t sub_1001FAA34(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  return sub_1001FAA78(a1, a2, a3, a4, a5 & 0xFFFFFFFFFFFFLL, a6 & 0xFFFFFFFFFFFFLL, a7 & 0xFFFFFFFFFFFFLL, a8, a9, a10, a11);
}

uint64_t sub_1001FAA78(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  unint64_t v24;
  _QWORD v25[17];
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[6];

  v25[14] = a5;
  v26 = a8;
  v25[15] = a6;
  v25[16] = a7;
  v15 = type metadata accessor for Data.Deallocator(0);
  v16 = *(_QWORD *)(v15 - 8);
  v27 = v15;
  v28 = v16;
  __chkstk_darwin();
  v18 = (char *)v25 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_10001F11C((uint64_t)_swiftEmptyArrayStorage);
  v20 = type metadata accessor for BinaryEncoder();
  v21 = (uint64_t *)swift_allocObject(v20, 40, 7);
  *((_OWORD *)v21 + 1) = xmmword_10033A100;
  v21[4] = v19;
  v30[3] = v20;
  v30[4] = sub_100011DE4((unint64_t *)&qword_100406278, (uint64_t (*)(uint64_t))type metadata accessor for BinaryEncoder, (uint64_t)protocol conformance descriptor for BinaryEncoder);
  v30[0] = v21;
  sub_100063D24(a2, a3, a4);
  swift_retain();
  v22 = v29;
  IEEE80211Frame.Management.ActionFrame.encode(to:)(v30, a1, a2, a3, a4);
  sub_100014430(v30);
  sub_1000632E8(a2, a3, a4);
  if (!v22)
  {
    v25[11] = v18;
    v29 = a11;
    swift_beginAccess(v21 + 2, v30, 0, 0);
    v24 = v21[3];
    sub_100031FEC(v21[2], v24);
    swift_release(v21);
    __asm { BR              X10 }
  }
  return swift_release(v21);
}

uint64_t BroadcomDriver<>.transmit(outOfBoundActionFrame:from:to:on:mapID:using:)(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v18;
  char *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t v25;
  _QWORD v26[13];
  int v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD v37[6];

  v33 = a8;
  v31 = a6;
  v32 = a7;
  v30 = a5;
  v35 = type metadata accessor for Data.Deallocator(0);
  v34 = *(_QWORD *)(v35 - 8);
  __chkstk_darwin();
  v19 = (char *)v26 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_10001F11C((uint64_t)_swiftEmptyArrayStorage);
  v21 = type metadata accessor for BinaryEncoder();
  v22 = (uint64_t *)swift_allocObject(v21, 40, 7);
  *((_OWORD *)v22 + 1) = xmmword_10033A100;
  v22[4] = v20;
  v37[3] = v21;
  v37[4] = sub_100011DE4((unint64_t *)&qword_100406278, (uint64_t (*)(uint64_t))type metadata accessor for BinaryEncoder, (uint64_t)protocol conformance descriptor for BinaryEncoder);
  v37[0] = v22;
  sub_100063D24(a2, a3, a4);
  swift_retain();
  v23 = v36;
  IEEE80211Frame.Management.ActionFrame.encode(to:)(v37, a1, a2, a3, a4);
  sub_100014430(v37);
  sub_1000632E8(a2, a3, a4);
  if (!v23)
  {
    v27 = a1;
    v28 = v19;
    v26[12] = a13;
    v26[10] = a14;
    v26[11] = a12;
    v29 = a11;
    swift_beginAccess(v22 + 2, v37, 0, 0);
    v25 = v22[3];
    sub_100031FEC(v22[2], v25);
    swift_release(v22);
    __asm { BR              X10 }
  }
  return swift_release(v22);
}

void sub_1001FBA3C(unsigned __int8 *a1)
{
  sub_1001FBA5C(a1);
}

void sub_1001FBA5C(unsigned __int8 *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[10];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;

  v2 = type metadata accessor for SHA256Digest(0);
  v16 = *(_QWORD *)(v2 - 8);
  v17 = v2;
  __chkstk_darwin();
  v14[9] = (char *)v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for SHA256(0);
  v14[8] = *(_QWORD *)(v15 - 8);
  __chkstk_darwin();
  v14[7] = (char *)v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = xmmword_10033A100;
  v5 = a1[8];
  v6 = a1[9];
  v7 = a1[10];
  v8 = a1[11];
  v9 = a1[12];
  v10 = a1[13];
  v18 = sub_100012C44(&qword_100403E88);
  v11 = swift_allocObject(v18, 38, 7);
  *(_OWORD *)(v11 + 16) = xmmword_10033B190;
  v23 = v6;
  v24 = v5;
  *(_BYTE *)(v11 + 32) = v5;
  *(_BYTE *)(v11 + 33) = v6;
  v21 = v8;
  v22 = v7;
  *(_BYTE *)(v11 + 34) = v7;
  *(_BYTE *)(v11 + 35) = v8;
  v19 = v10;
  v20 = v9;
  *(_BYTE *)(v11 + 36) = v9;
  *(_BYTE *)(v11 + 37) = v10;
  sub_1001068EC(v11);
  v13 = v12;
  swift_bridgeObjectRelease(v11);
  __asm { BR              X10 }
}

void BroadcomDriver<>.send(datapathResponse:)(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  int v10;
  unsigned __int8 v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[12];
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  __int128 v30;

  v22 = a4;
  v23 = a3;
  v29 = a2;
  v5 = type metadata accessor for SHA256Digest(0);
  v19 = *(_QWORD *)(v5 - 8);
  v20 = v5;
  __chkstk_darwin();
  v17[11] = (char *)v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for SHA256(0);
  v17[10] = *(_QWORD *)(v18 - 8);
  __chkstk_darwin();
  v17[9] = (char *)v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = xmmword_10033A100;
  v8 = a1[8];
  v9 = a1[9];
  v10 = a1[10];
  v11 = a1[11];
  v12 = a1[12];
  v13 = a1[13];
  v21 = sub_100012C44(&qword_100403E88);
  v14 = swift_allocObject(v21, 38, 7);
  *(_OWORD *)(v14 + 16) = xmmword_10033B190;
  v27 = v9;
  v28 = v8;
  *(_BYTE *)(v14 + 32) = v8;
  *(_BYTE *)(v14 + 33) = v9;
  v25 = v12;
  v26 = v10;
  *(_BYTE *)(v14 + 34) = v10;
  *(_BYTE *)(v14 + 35) = v11;
  *(_BYTE *)(v14 + 36) = v12;
  v24 = v13;
  *(_BYTE *)(v14 + 37) = v13;
  sub_1001068EC(v14);
  v16 = v15;
  swift_bridgeObjectRelease(v14);
  __asm { BR              X10 }
}

uint64_t sub_1001FD038(unint64_t a1)
{
  return sub_10020526C(0x50Eu, a1 | ((HIBYTE(a1) != 2) << 8));
}

uint64_t BroadcomDriver<>.send(datapathConfirmation:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  _BYTE v9[2];
  __int16 v10;

  v9[0] = a1;
  v9[1] = HIBYTE(a1) != 2;
  v10 = 0;
  type metadata accessor for wl_nan_dp_conf(0);
  return sub_1002057EC(1294, (uint64_t)v9, a2, v7, a3, a4);
}

uint64_t sub_1001FD0E8(uint64_t a1)
{
  return sub_1001FD108(a1);
}

uint64_t sub_1001FD108(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  __int16 v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  unint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  char v23;
  __int128 v24;

  v2 = v1;
  if (*(_QWORD *)(result + 16))
  {
    v15 = result + 32;
    swift_bridgeObjectRetain(result);
    v3 = *(_WORD *)(v15 + 2);
    v4 = *(_QWORD *)(v15 + 8);
    v24 = xmmword_10033A100;
    v5 = *(_QWORD *)(v4 + 16);
    if (v5)
    {
      swift_bridgeObjectRetain_n(v4, 3);
      v6 = (_BYTE *)(v4 + 80);
      v16 = v5;
      while (1)
      {
        v7 = *((_QWORD *)v6 - 5);
        v8 = *((_QWORD *)v6 - 4);
        v9 = *((_QWORD *)v6 - 3);
        v10 = *v6;
        v11 = *((_QWORD *)v6 - 1);
        v12 = *(v6 - 16);
        LOWORD(v17) = *((_WORD *)v6 - 24);
        v18 = v7;
        v19 = v8;
        v20 = v9;
        v21 = v12;
        v22 = v11;
        v23 = v10;
        sub_100063C28(v7, v8, v9);
        swift_bridgeObjectRetain(v11);
        sub_10020676C((uint64_t)&v24, (uint64_t)&v17);
        if (v2)
          break;
        v2 = 0;
        sub_1000634E8(v7, v8, v9);
        swift_bridgeObjectRelease(v11);
        v6 += 56;
        if (!--v5)
        {
          swift_bridgeObjectRelease_n(v4, 2);
          v13 = *((_QWORD *)&v24 + 1);
          v5 = v16;
          goto LABEL_8;
        }
      }
      sub_10000E614(v24, *((unint64_t *)&v24 + 1));
      sub_1000634E8(v7, v8, v9);
      swift_bridgeObjectRelease(v4);
      swift_bridgeObjectRelease(v11);
      __break(1u);
    }
    else
    {
      swift_bridgeObjectRetain(v4);
      v13 = 0xC000000000000000;
LABEL_8:
      v17 = 0;
      v18 = 0;
      v14 = sub_10007CCF8(0, 4, v3);
      if (v2)
      {
LABEL_20:
        swift_unexpectedError(v2, "CoreP2P/NANAttribute.swift", 26, 1);
        __break(1u);
        JUMPOUT(0x1001FD524);
      }
      BYTE4(v17) = v14 & 0xF;
      if (*(_QWORD *)(v4 + 16) <= 0xFFuLL)
      {
        BYTE6(v18) = *(_QWORD *)(v4 + 16);
        if ((v3 & 0x20) != 0)
          WORD1(v17) |= 8u;
        if ((v3 & 0x10) != 0)
          WORD1(v17) |= 9u;
        swift_bridgeObjectRelease(v4);
        if (!v5)
          WORD1(v17) |= 0x2000u;
        __asm { BR              X10 }
      }
    }
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 3455, 0);
    __break(1u);
    goto LABEL_20;
  }
  return result;
}

uint64_t BroadcomDriver<>.update(availability:)(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  __int16 v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  char v12;
  unint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  char v23;
  __int128 v24;

  v2 = v1;
  if (*(_QWORD *)(result + 16))
  {
    v15 = result + 32;
    swift_bridgeObjectRetain(result);
    v3 = *(_WORD *)(v15 + 2);
    v4 = *(_QWORD *)(v15 + 8);
    v24 = xmmword_10033A100;
    v5 = *(_QWORD *)(v4 + 16);
    if (v5)
    {
      swift_bridgeObjectRetain_n(v4, 3);
      v6 = (_BYTE *)(v4 + 80);
      v16 = v5;
      while (1)
      {
        v8 = *((_QWORD *)v6 - 5);
        v7 = *((_QWORD *)v6 - 4);
        v9 = *((_QWORD *)v6 - 3);
        v10 = *v6;
        v11 = *((_QWORD *)v6 - 1);
        v12 = *(v6 - 16);
        LOWORD(v17) = *((_WORD *)v6 - 24);
        v18 = v8;
        v19 = v7;
        v20 = v9;
        v21 = v12;
        v22 = v11;
        v23 = v10;
        sub_100063C28(v8, v7, v9);
        swift_bridgeObjectRetain(v11);
        sub_10020676C((uint64_t)&v24, (uint64_t)&v17);
        if (v2)
          break;
        v2 = 0;
        sub_1000634E8(v8, v7, v9);
        swift_bridgeObjectRelease(v11);
        v6 += 56;
        if (!--v5)
        {
          swift_bridgeObjectRelease_n(v4, 2);
          v13 = *((_QWORD *)&v24 + 1);
          v5 = v16;
          goto LABEL_8;
        }
      }
      sub_10000E614(v24, *((unint64_t *)&v24 + 1));
      sub_1000634E8(v8, v7, v9);
      swift_bridgeObjectRelease(v4);
      swift_bridgeObjectRelease(v11);
      __break(1u);
    }
    else
    {
      swift_bridgeObjectRetain(v4);
      v13 = 0xC000000000000000;
LABEL_8:
      v17 = 0;
      v18 = 0;
      v14 = sub_10007CCF8(0, 4, v3);
      if (v2)
      {
LABEL_20:
        swift_unexpectedError(v2, "CoreP2P/NANAttribute.swift", 26, 1);
        __break(1u);
        JUMPOUT(0x1001FD8E8);
      }
      BYTE4(v17) = v14 & 0xF;
      if (*(_QWORD *)(v4 + 16) <= 0xFFuLL)
      {
        BYTE6(v18) = *(_QWORD *)(v4 + 16);
        if ((v3 & 0x20) != 0)
          WORD1(v17) |= 8u;
        if ((v3 & 0x10) != 0)
          WORD1(v17) |= 9u;
        swift_bridgeObjectRelease(v4);
        if (!v5)
          WORD1(v17) |= 0x2000u;
        __asm { BR              X10 }
      }
    }
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 3455, 0);
    __break(1u);
    goto LABEL_20;
  }
  return result;
}

void sub_1001FD8F8(unint64_t a1, uint64_t a2)
{
  sub_1001FD918(a1, a2);
}

void sub_1001FD918(unint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  int v10;
  unint64_t v11;
  int64_t v12;

  sub_1001FE8E0();
  if (!v2)
  {
    v7 = v5;
    v8 = v6;
    sub_100212DDC(v5, v6);
    v10 = v9;
    sub_10000E614(v7, v8);
    sub_10020526C(0x115u, v10 & 0xFFEFFFFF | ((a2 != 0) << 20));
    if (a2)
      v11 = a1;
    else
      v11 = 100;
    if (v11 >= 0x10000)
    {
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 3455, 0);
      __break(1u);
      JUMPOUT(0x1001FE050);
    }
    sub_1002056DC(0x10Eu, v11);
    if (a2)
    {
      v12 = *(_QWORD *)(a2 + 16);
      if (v12)
      {
        sub_100075214(0, v12, 0);
        __asm { BR              X9 }
      }
    }
  }
}

uint64_t BroadcomDriver<>.update(discoveryBeaconTransmissionSchedule:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t result;
  unint64_t v12;
  int64_t v13;
  int v14;
  __int128 v15;

  result = sub_100205930(277, (uint64_t)&type metadata for UInt32, a3, (uint64_t)&type metadata for UInt32, a4, a5);
  if (!v5)
  {
    LODWORD(v15) = v14 & 0xFFEFFFFF | ((a2 != 0) << 20);
    sub_1002057EC(277, (uint64_t)&v15, a3, (uint64_t)&type metadata for UInt32, a4, a5);
    v12 = 100;
    if (a2)
      v12 = a1;
    if (v12 >= 0x10000)
    {
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 3455, 0);
      __break(1u);
      JUMPOUT(0x1001FE7E0);
    }
    LOWORD(v15) = v12;
    result = sub_1002057EC(270, (uint64_t)&v15, a3, (uint64_t)&type metadata for UInt16, a4, a5);
    if (a2)
    {
      v13 = *(_QWORD *)(a2 + 16);
      if (v13)
      {
        sub_100075214(0, v13, 0);
        __asm { BR              X9 }
      }
    }
  }
  return result;
}

void sub_1001FE810(uint64_t *a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;

  v10 = *a1;
  swift_allocObject(v5, *(unsigned int *)(v5 + 48), *(unsigned __int16 *)(v5 + 52));
  AppleBroadcomDriver.init(device:role:name:)(v10, a2, a3, a4);
  *a5 = v11;
}

uint64_t sub_1001FE878()
{
  return AppleBroadcomDriver.capabilities.getter();
}

uint64_t sub_1001FE898@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1 + OBJC_IVAR____TtC7CoreP2P19AppleBroadcomDriver_logger;
  v4 = type metadata accessor for Logger(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

void sub_1001FE8E0()
{
  uint64_t v1;

  v1 = type metadata accessor for Logger(0);
  __chkstk_darwin(v1);
  __asm { BR              X10 }
}

void sub_1001FE990(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t KeyPath;
  uint64_t v8;
  char v9;
  char v10;

  *(_QWORD *)(v5 - 128) = a1;
  Logger.init(subsystem:category:)(0x6C7070612E6D6F63, 0xED00006E616E2E65, 0x726576697264, 0xE600000000000000);
  v6 = String.count.getter(v4, v2);
  *(_QWORD *)(v5 - 96) = v6 + 1;
  if (__OFADD__(v6, 1))
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v5 - 160) = v1;
    KeyPath = swift_getKeyPath(&unk_10035C5F0);
    v8 = dispatch thunk of AnyKeyPath._storedInlineOffset.getter(KeyPath);
    v10 = v9;
    swift_release(KeyPath);
    if ((v10 & 1) != 0)
    {
      __break(1u);
      JUMPOUT(0x1001FF2F8);
    }
    if (!__OFADD__(*(_QWORD *)(v5 - 96), v8))
    {
      *(_QWORD *)(v5 - 168) = v8;
      __asm { BR              X10 }
    }
  }
  __break(1u);
  JUMPOUT(0x1001FF2B0);
}

void sub_1001FF3CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v10;
  char *v11;
  uint64_t AssociatedTypeWitness;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(_QWORD *)(a8 + 8), a7, &protocol requirements base descriptor for DeviceDriver, &associated type descriptor for DeviceDriver.Device);
  __chkstk_darwin(AssociatedTypeWitness);
  v10 = type metadata accessor for Logger(0);
  __chkstk_darwin(v10);
  v11 = (char *)&loc_1001FF4D4
      + dword_1001FFF14[(*(unsigned __int8 (**)(uint64_t, uint64_t))(a9 + 32))(a7, a9)];
  __asm { BR              X10 }
}

void sub_1001FF4E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t KeyPath;
  uint64_t v6;
  char v7;
  char v8;

  Logger.init(subsystem:category:)(0x6C7070612E6D6F63, 0xED00006E616E2E65, 0x726576697264, 0xE600000000000000);
  v4 = String.count.getter(*(_QWORD *)(v3 - 128), v0);
  *(_QWORD *)(v3 - 120) = v4 + 1;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v3 - 168) = v1;
    *(_QWORD *)(v3 - 144) = v0;
    KeyPath = swift_getKeyPath(&unk_10035C5F0);
    v6 = dispatch thunk of AnyKeyPath._storedInlineOffset.getter(KeyPath);
    v8 = v7;
    swift_release(KeyPath);
    if ((v8 & 1) != 0)
    {
      __break(1u);
      JUMPOUT(0x1001FFE84);
    }
    if (!__OFADD__(*(_QWORD *)(v3 - 120), v6))
    {
      *(_QWORD *)(v3 - 152) = v2;
      __asm { BR              X10 }
    }
  }
  __break(1u);
  JUMPOUT(0x1001FFE3CLL);
}

void sub_1001FFF58(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;

  v4 = v3;
  type metadata accessor for String.Encoding(0);
  __chkstk_darwin();
  v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = xmmword_10035C680;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, (char *)&v15 + 3);
  v10 = a3[5];
  v11 = a3[2];
  v12 = a3[3];
  swift_retain();
  swift_bridgeObjectRetain(v12);
  AppleDevice.getRequest(requestType:data:on:)(0xFFFFFFFFuLL, a1, a2, 0, v11, v12);
  if (v4)
  {
    swift_bridgeObjectRelease(0xE300000000000000);
    swift_release(v10);
    swift_bridgeObjectRelease(v12);
    return;
  }
  swift_bridgeObjectRelease(v12);
  swift_release(v10);
  if (a1)
  {
    v13 = a2 - a1 - 1;
    if (__OFSUB__(a2 - a1, 1))
    {
      __break(1u);
    }
    else if ((v13 & 0x8000000000000000) == 0 && v13 < a2 - a1)
    {
      UnsafeMutableRawBufferPointer.subscript.setter(0);
      swift_bridgeObjectRelease(0xE300000000000000);
      static String.Encoding.utf8.getter(v14);
      String.init(cString:encoding:)(a1, v9);
      return;
    }
  }
  __break(1u);
}

uint64_t sub_1002000CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t *a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t AssociatedTypeWitness;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t AssociatedConformanceWitness;
  uint64_t v22;
  uint64_t result;
  uint64_t *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t *v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;

  v33 = a6;
  v34 = a4;
  v11 = type metadata accessor for String.Encoding(0);
  __chkstk_darwin(v11);
  v32 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(a4 + 8);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v13, a3, &protocol requirements base descriptor for DeviceDriver, &associated type descriptor for DeviceDriver.Device);
  v15 = *(_QWORD *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  v17 = (char *)&v31 - v16;
  v35 = xmmword_10035C680;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, (char *)&v35 + 3);
  (*(void (**)(uint64_t, uint64_t))(v13 + 56))(a3, v13);
  v18 = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 40))(a3, a5);
  v20 = v19;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v34, a3, AssociatedTypeWitness, &protocol requirements base descriptor for BroadcomDriver, &associated conformance descriptor for BroadcomDriver.DeviceDriver.Device: BroadcomDevice);
  v22 = v36;
  (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness
                                                                                       + 16))(a1, a2, 0, v18, v20, AssociatedTypeWitness, AssociatedConformanceWitness);
  if (v22)
  {
    swift_bridgeObjectRelease(v20);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, AssociatedTypeWitness);
    return swift_bridgeObjectRelease(0xE300000000000000);
  }
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, AssociatedTypeWitness);
  result = swift_bridgeObjectRelease(v20);
  v25 = v32;
  v24 = v33;
  if (!a1)
    goto LABEL_15;
  v26 = a2 - a1 - 1;
  if (__OFSUB__(a2 - a1, 1))
  {
    __break(1u);
LABEL_15:
    __break(1u);
    return result;
  }
  if (v26 < 0 || v26 >= a2 - a1)
    goto LABEL_15;
  UnsafeMutableRawBufferPointer.subscript.setter(0);
  v27 = swift_bridgeObjectRelease(0xE300000000000000);
  static String.Encoding.utf8.getter(v27);
  result = String.init(cString:encoding:)(a1, v25);
  if (v28)
    v29 = result;
  else
    v29 = 0;
  v30 = 0xE000000000000000;
  if (v28)
    v30 = v28;
  *v24 = v29;
  v24[1] = v30;
  return result;
}

uint64_t sub_100200300(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  BOOL v7;
  void (*v8)(_BYTE *, _QWORD);
  _QWORD *v9;
  _BYTE v11[32];

  v6 = a1[1];
  v7 = *a1 == 0x7478655F747665 && v6 == 0xE700000000000000;
  if (!v7
    && (_stringCompareWithSmolCheck(_:_:expecting:)(0x7478655F747665, 0xE700000000000000, *a1, v6, 0) & 1) == 0)
  {
    return 1;
  }
  v8 = (void (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(a4 + 40))(v11, a3, a4);
  *v9 |= 1uLL;
  v8(v11, 0);
  return 0;
}

uint64_t sub_1002003BC@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = sub_10020957C(a1);
  if (!v2)
    *a2 = result;
  return result;
}

void static BroadcomDriver.parse(event:)(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD v8[98];

  v4 = type metadata accessor for Logger(0);
  v8[15] = *(_QWORD *)(v4 - 8);
  v8[16] = v4;
  __chkstk_darwin();
  v8[17] = (char *)v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  Logger.init(subsystem:category:)(0xD000000000000012, 0x8000000100360DF0, 0x726576697264, 0xE600000000000000);
  sub_100031FEC(a1, a2);
  sub_10001F11C((uint64_t)_swiftEmptyArrayStorage);
  v6 = type metadata accessor for BinaryDecoder();
  v7 = (_QWORD *)swift_allocObject(v6, 48, 7);
  v7[5] = &_swiftEmptyDictionarySingleton;
  v7[2] = a1;
  v7[3] = a2;
  v8[10] = a2;
  __asm { BR              X10 }
}

_QWORD *sub_1002004F0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint8x8_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  __int16 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  NSObject *v52;
  os_log_type_t v53;
  int v54;
  _DWORD *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint8_t *v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  BOOL v64;
  int v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  char v74;
  __int16 v75;
  BOOL v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  unint64_t v89;
  __int128 v90;
  __int128 v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  __int128 v98;
  char v99;
  int32x2_t v100;
  int32x2_t v101;
  char v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char v110;
  uint64_t *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint8x8_t v118;
  int v119;
  char v120;
  char v121;
  char v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint8x8_t v130;
  char v131;
  int v132;
  char v133;
  unsigned __int8 v134;
  char v135;
  uint64_t v136;
  _QWORD *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  _QWORD *KeyPath;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  __int128 v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  int8x16_t v158;
  uint64_t v159;
  uint64_t v160;
  _QWORD *v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  void *v173;
  uint64_t v174;
  int v175;
  int v176;
  int v177;
  int v178;
  unint64_t v179;
  unsigned int v180;
  __int16 v181;
  char v182;
  char v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  char v189;
  char v190;
  int32x2_t v191;
  char v192;
  char v193;
  int32x2_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  int8x8_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  void *v208;
  char v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  unsigned int v215;
  char v216;
  char v217;
  char v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  unint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  __int128 v231;
  __int128 v232;
  __int128 v233;
  __int128 v234;
  __int128 v235;
  char v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  unint64_t *v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  NSObject *v252;
  os_log_type_t v253;
  uint8_t *v254;
  unint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  NSObject *v259;
  os_log_type_t v260;
  uint64_t v261;
  uint64_t v262;
  unint64_t v263;
  uint64_t v264;
  uint64_t v265;
  unint64_t v266;
  uint64_t v267;
  unint64_t *v268;
  uint64_t v269;
  __n128 v270;
  uint64_t v271;
  unint64_t v272;
  int v273;
  char v274;
  char v275;
  char v276;
  char v277;
  uint64_t v278;
  NSObject *v279;
  os_log_type_t v280;
  uint8_t *v281;
  __int16 v282;
  __int16 v283;
  uint64_t v284;
  unint64_t *v285;
  uint64_t v286;
  char v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  void *v294;
  uint64_t v295;
  unint64_t v296;
  unint64_t v297;
  unint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  void *v304;

  *(_QWORD *)(v1 + 96) = v4;
  *(_QWORD *)(v5 + 32) = (int)v4;
  swift_beginAccess(a1, v8 - 136, 1, 0);
  v10 = *(_QWORD *)(v5 + 40);
  *(_QWORD *)(v5 + 40) = v2;
  swift_bridgeObjectRelease(v10);
  v11 = (_QWORD *)swift_allocObject(&unk_1003F0050, 56, 7);
  v11[5] = &type metadata for BinaryDecoder.UnkeyedContainer;
  v12 = sub_10007BA38();
  v11[6] = v12;
  v11[2] = v5;
  sub_100034C68((uint64_t)(v11 + 2), (uint64_t)&type metadata for BinaryDecoder.UnkeyedContainer);
  v13 = sub_10020A18C();
  swift_retain();
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)(&type metadata for BroadcomEventMessage, &type metadata for BroadcomEventMessage, v13, &type metadata for BinaryDecoder.UnkeyedContainer, v12);
  v33 = *(_DWORD *)(v1 + 336) - 100;
  if (v33 <= 0x3B && ((1 << v33) & 0xC00000000000001) != 0)
  {
    switch(*(_DWORD *)(v1 + 340))
    {
      case 5:
        *(_BYTE *)(v1 + 336) = 0;
        sub_1002040A0(778, v5);
        *(_QWORD *)(v1 + 64) = v143;
        *(_QWORD *)(v1 + 48) = v144 & 0xFF00000000;
        KeyPath = (_QWORD *)swift_getKeyPath(&unk_10035C240);
        v146 = swift_getKeyPath(&unk_10035C260);
        v147 = sub_1000CB6A4();
        v148 = v146;
        v149 = sub_100203570(v1 + 336, 778, KeyPath, v146, (uint64_t)v11, v7, v3, v147);
        swift_release(KeyPath);
        swift_release(v148);
        v150 = type metadata accessor for DriverEvent(0);
        v168 = v150;
        if (*(_QWORD *)(v1 + 48) == 0x300000000)
          v152 = 0;
        else
          v152 = *(_QWORD *)(v1 + 64);
        *(_QWORD *)&v151 = *(_QWORD *)(v1 + 336);
        *(_OWORD *)(v1 + 96) = v151;
        v153 = sub_100012C44(&qword_100405BD0);
        v154 = *(_QWORD *)(v168 - 8);
        v155 = *(_QWORD *)(v154 + 72);
        v156 = *(unsigned __int8 *)(v154 + 80);
        v157 = (v156 + 32) & ~v156;
        v31 = swift_allocObject(v153, v157 + v155, v156 | 7);
        *(_OWORD *)(v31 + 16) = xmmword_10033A110;
        v173 = (void *)(v31 + v157);
        v158 = *(int8x16_t *)(v1 + 96);
        v158.i64[1] = *(_QWORD *)(v1 + 96);
        *(int8x8_t *)(v1 + 336) = vqtbl1_s8(v158, (int8x8_t)0x706050403020001);
        *(_QWORD *)(v1 + 344) = v152;
        *(_QWORD *)(v1 + 352) = v149;
        sub_100063F54(v1 + 336);
        goto LABEL_55;
      case 6:
        *(_BYTE *)(v1 + 336) = 0;
        sub_1002040A0(776, v5);
        *(_QWORD *)(v1 + 64) = v159;
        *(_QWORD *)(v1 + 48) = v160 & 0xFF00000000;
        v161 = (_QWORD *)swift_getKeyPath(&unk_10035C200);
        v162 = swift_getKeyPath(&unk_10035C220);
        v163 = sub_1000CB6A4();
        v164 = v162;
        v200 = sub_100203570(v1 + 336, 776, v161, v162, (uint64_t)v11, v7, v3, v163);
        swift_release(v161);
        swift_release(v164);
        v168 = type metadata accessor for DriverEvent(0);
        if (*(_QWORD *)(v1 + 48) == 0x300000000)
          v201 = 0;
        else
          v201 = *(_QWORD *)(v1 + 64);
        v202 = *(int8x8_t *)(v1 + 336);
        v203 = sub_100012C44(&qword_100405BD0);
        v204 = *(_QWORD *)(v168 - 8);
        v205 = *(_QWORD *)(v204 + 72);
        v206 = *(unsigned __int8 *)(v204 + 80);
        v207 = (v206 + 32) & ~v206;
        v31 = swift_allocObject(v203, v207 + v205, v206 | 7);
        *(_OWORD *)(v31 + 16) = xmmword_10033A110;
        v173 = (void *)(v31 + v207);
        *(int8x8_t *)(v1 + 336) = vext_s8(v202, v202, 6uLL);
        *(_QWORD *)(v1 + 344) = v201;
        *(_QWORD *)(v1 + 352) = v200;
        sub_100063F48(v1 + 336);
        goto LABEL_55;
      case 7:
        type metadata accessor for wl_nan_ev_terminated(0);
        v35 = sub_1002022B8(775, v34, (uint64_t)v11, v7, v34);
        v36 = *(unsigned __int8 *)(v1 + 338);
        if ((*(_BYTE *)(v1 + 337) - 1) > 3u)
          v37 = 3;
        else
          v37 = qword_10035C648[(char)(*(_BYTE *)(v1 + 337) - 1)];
        v209 = *(_BYTE *)(v1 + 336);
        if (v36 == 1)
        {
          v246 = sub_100012C44(&qword_100405BD0);
          v168 = type metadata accessor for DriverEvent(0);
          v247 = *(_QWORD *)(v168 - 8);
          v248 = *(_QWORD *)(v247 + 72);
          v249 = *(unsigned __int8 *)(v247 + 80);
          v250 = (v249 + 32) & ~v249;
          v31 = swift_allocObject(v246, v250 + v248, v249 | 7);
          *(_OWORD *)(v31 + 16) = xmmword_10033A110;
          v48 = (void *)(v31 + v250);
          *(_BYTE *)(v1 + 336) = v209;
          *(_QWORD *)(v1 + 344) = v37;
          sub_100063E94(v1 + 336);
          goto LABEL_79;
        }
        if (!*(_BYTE *)(v1 + 338))
        {
          v210 = sub_100012C44(&qword_100405BD0);
          v168 = type metadata accessor for DriverEvent(0);
          v211 = *(_QWORD *)(v168 - 8);
          v212 = *(_QWORD *)(v211 + 72);
          v213 = *(unsigned __int8 *)(v211 + 80);
          v214 = (v213 + 32) & ~v213;
          v31 = swift_allocObject(v210, v214 + v212, v213 | 7);
          *(_OWORD *)(v31 + 16) = xmmword_10033A110;
          v48 = (void *)(v31 + v214);
          *(_BYTE *)(v1 + 336) = v209;
          *(_QWORD *)(v1 + 344) = v37;
          sub_100063E88(v1 + 336);
LABEL_79:
          sub_100063888((const void *)(v1 + 336), v48);
          v208 = v48;
          goto LABEL_80;
        }
        v252 = Logger.logObject.getter(v35);
        v253 = static os_log_type_t.error.getter(v252);
        if (os_log_type_enabled(v252, v253))
        {
          v254 = (uint8_t *)swift_slowAlloc(5, -1);
          *(_DWORD *)v254 = 16777472;
          *(_BYTE *)(v1 + 336) = v36;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 336, v1 + 337);
          _os_log_impl((void *)&_mh_execute_header, v252, v253, "Failed to convert %hhu into service type", v254, 5u);
          swift_slowDealloc(v254, -1, -1);
        }

        v255 = sub_100012C84();
        v256 = swift_allocError(&type metadata for WiFiError, v255, 0, 0);
        *(_OWORD *)v257 = xmmword_100337850;
        *(_BYTE *)(v257 + 16) = 2;
        swift_willThrow(v256);
        swift_release(v5);
        swift_release(v11);
        v14 = *(_QWORD *)(v1 + 80);
        v15 = *(_QWORD *)(v1 + 96);
LABEL_2:
        sub_100031FEC(v15, v14);
        swift_errorRetain(v256);
        sub_100031FEC(v15, v14);
        v16 = swift_errorRetain(v256);
        v17 = Logger.logObject.getter(v16);
        v18 = static os_log_type_t.error.getter(v17);
        if (os_log_type_enabled(v17, v18))
        {
          v19 = v256;
          v20 = swift_slowAlloc(22, -1);
          *(_QWORD *)(v1 + 80) = swift_slowAlloc(8, -1);
          v21 = swift_slowAlloc(32, -1);
          *(_QWORD *)(v1 + 96) = v21;
          *(_QWORD *)(v1 + 336) = v21;
          *(_DWORD *)v20 = 136315394;
          sub_100031FEC(v15, v14);
          sub_100032030(0, 0xE000000000000000, v15, v14);
          v23 = v22;
          v25 = v24;
          sub_10000E614(v15, v14);
          *(_QWORD *)(v1 + 144) = sub_100013CC8(v23, v25, (uint64_t *)(v1 + 336));
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 144, v1 + 152);
          swift_bridgeObjectRelease(v25);
          sub_10000E614(v15, v14);
          sub_10000E614(v15, v14);
          *(_WORD *)(v20 + 12) = 2112;
          swift_errorRetain(v19);
          v26 = _swift_stdlib_bridgeErrorToNSError(v19);
          *(_QWORD *)(v1 + 144) = v26;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 144, v1 + 152);
          v27 = *(uint64_t **)(v1 + 80);
          *v27 = v26;
          swift_errorRelease(v19);
          swift_errorRelease(v19);
          _os_log_impl((void *)&_mh_execute_header, v17, v18, "Failed to parse event %s: %@", (uint8_t *)v20, 0x16u);
          v28 = sub_100012C44(&qword_100404BB0);
          swift_arrayDestroy(v27, 1, v28);
          swift_slowDealloc(v27, -1, -1);
          v29 = *(_QWORD *)(v1 + 96);
          swift_arrayDestroy(v29, 1, &type metadata for Any[8]);
          swift_slowDealloc(v29, -1, -1);
          swift_slowDealloc(v20, -1, -1);

          v30 = v19;
        }
        else
        {

          sub_10000E614(v15, v14);
          sub_10000E614(v15, v14);
          swift_errorRelease(v256);
          swift_errorRelease(v256);
          v30 = v256;
        }
        swift_errorRelease(v30);
        (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v1 + 120) + 8))(*(_QWORD *)(v1 + 136), *(_QWORD *)(v1 + 128));
        return _swiftEmptyArrayStorage;
      case 8:
        *(_BYTE *)(v1 + 336) = 0;
        sub_1002040A0(777, v5);
        v38 = (_QWORD *)swift_getKeyPath(&unk_10035C1C0);
        v39 = swift_getKeyPath(&unk_10035C1E0);
        v40 = sub_1000CB6A4();
        v165 = sub_100203570(v1 + 144, 777, v38, v39, (uint64_t)v11, v7, v3, v40);
        swift_release(v38);
        swift_release(v39);
        v166 = *(char *)(v1 + 152);
        v167 = sub_100012C44(&qword_100405BD0);
        v168 = type metadata accessor for DriverEvent(0);
        v169 = *(_QWORD *)(v168 - 8);
        v170 = *(_QWORD *)(v169 + 72);
        v171 = *(unsigned __int8 *)(v169 + 80);
        v172 = (v171 + 32) & ~v171;
        v31 = swift_allocObject(v167, v172 + v170, v171 | 7);
        *(_OWORD *)(v31 + 16) = xmmword_10033A110;
        v173 = (void *)(v31 + v172);
        *(int8x8_t *)(v1 + 336) = vext_s8(*(int8x8_t *)(v1 + 144), *(int8x8_t *)(v1 + 144), 6uLL);
        *(_QWORD *)(v1 + 344) = v166;
        *(_QWORD *)(v1 + 352) = v165;
        sub_100063E7C(v1 + 336);
LABEL_55:
        sub_100063888((const void *)(v1 + 336), v173);
        v208 = v173;
        goto LABEL_80;
      case 0xA:
        type metadata accessor for wl_nan_conf_status(0);
        sub_1002022B8(261, v41, (uint64_t)v11, v7, v41);
        v42 = *(_WORD *)(v1 + 156);
        v43 = sub_100012C44(&qword_100405BD0);
        v168 = type metadata accessor for DriverEvent(0);
        v44 = *(_QWORD *)(v168 - 8);
        v45 = *(_QWORD *)(v44 + 72);
        v46 = *(unsigned __int8 *)(v44 + 80);
        v47 = (v46 + 32) & ~v46;
        v31 = swift_allocObject(v43, v47 + v45, v46 | 7);
        *(_OWORD *)(v31 + 16) = xmmword_10033A110;
        v48 = (void *)(v31 + v47);
        *(_DWORD *)(v1 + 336) = *(_DWORD *)(v1 + 152);
        *(_WORD *)(v1 + 340) = v42;
        sub_100063F6C(v1 + 336);
        goto LABEL_79;
      case 0x14:
        v49 = *(_QWORD *)(v1 + 96);
        v50 = *(_QWORD *)(v1 + 80);
        sub_100031FEC(v49, v50);
        v51 = sub_100031FEC(v49, v50);
        v52 = Logger.logObject.getter(v51);
        v53 = static os_log_type_t.default.getter();
        v54 = v53;
        if (os_log_type_enabled(v52, v53))
        {
          *(_QWORD *)(v1 + 64) = v52;
          v55 = (_DWORD *)swift_slowAlloc(12, -1);
          v56 = swift_slowAlloc(32, -1);
          *(_QWORD *)(v1 + 48) = v56;
          *(_QWORD *)(v1 + 336) = v56;
          *(_DWORD *)(v1 + 32) = v54;
          *v55 = 136315138;
          *(_QWORD *)(v1 + 16) = v55 + 1;
          *(_QWORD *)(v1 + 24) = v55;
          sub_100031FEC(v49, v50);
          sub_100032030(0, 0xE000000000000000, v49, v50);
          *(_QWORD *)(v1 + 8) = v57;
          v59 = v58;
          sub_10000E614(v49, v50);
          *(_QWORD *)(v1 + 144) = sub_100013CC8(*(_QWORD *)(v1 + 8), v59, (uint64_t *)(v1 + 336));
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 144, v1 + 152);
          swift_bridgeObjectRelease(v59);
          sub_10000E614(v49, v50);
          sub_10000E614(v49, v50);
          v60 = *(uint8_t **)(v1 + 24);
          _os_log_impl((void *)&_mh_execute_header, *(os_log_t *)(v1 + 64), (os_log_type_t)*(_DWORD *)(v1 + 32), "Got DP Indication: %s", v60, 0xCu);
          v61 = *(_QWORD *)(v1 + 48);
          swift_arrayDestroy(v61, 1, &type metadata for Any[8]);
          swift_slowDealloc(v61, -1, -1);
          swift_slowDealloc(v60, -1, -1);

        }
        else
        {

          sub_10000E614(v49, v50);
          sub_10000E614(v49, v50);
        }
        sub_100203DF0((uint64_t)v11, v7, v3, v1 + 336);
        v189 = *(_BYTE *)(v1 + 337);
        v190 = *(_BYTE *)(v1 + 338);
        v191 = *(int32x2_t *)(v1 + 340);
        *(_DWORD *)(v1 + 96) = *(unsigned __int8 *)(v1 + 344);
        *(_DWORD *)(v1 + 80) = *(unsigned __int8 *)(v1 + 345);
        v192 = *(_BYTE *)(v1 + 352);
        v193 = *(_BYTE *)(v1 + 353);
        v194 = *(int32x2_t *)(v1 + 354);
        *(_QWORD *)(v1 + 64) = *(_QWORD *)(v1 + 376);
        v195 = sub_100012C44(&qword_100405BD0);
        v168 = type metadata accessor for DriverEvent(0);
        v196 = *(_QWORD *)(v168 - 8);
        v197 = *(_QWORD *)(v196 + 72);
        v198 = *(unsigned __int8 *)(v196 + 80);
        v199 = (v198 + 32) & ~v198;
        v31 = swift_allocObject(v195, v199 + v197, v198 | 7);
        *(_OWORD *)(v31 + 16) = xmmword_10033A110;
        v48 = (void *)(v31 + v199);
        *(_BYTE *)(v1 + 336) = v189;
        *(_BYTE *)(v1 + 337) = v190;
        *(_BYTE *)(v1 + 338) = v192;
        *(_BYTE *)(v1 + 339) = v193;
        *(int32x2_t *)(v1 + 340) = vzip1_s32(v194, v191);
        *(_BYTE *)(v1 + 348) = *(_DWORD *)(v1 + 96);
        *(_BYTE *)(v1 + 349) = *(_DWORD *)(v1 + 80);
        *(_QWORD *)(v1 + 352) = *(_QWORD *)(v1 + 64);
        sub_100063F3C(v1 + 336);
        goto LABEL_79;
      case 0x15:
        type metadata accessor for wl_nan_ev_datapath_cmn(0);
        sub_1002022B8(1282, v62, (uint64_t)v11, v7, v62);
        v63 = *(unsigned __int8 *)(v1 + 336);
        *(_DWORD *)(v1 + 64) = *(unsigned __int8 *)(v1 + 337);
        *(_DWORD *)(v1 + 80) = *(unsigned __int16 *)(v1 + 344);
        *(_DWORD *)(v1 + 96) = *(unsigned __int16 *)(v1 + 350);
        v168 = type metadata accessor for DriverEvent(0);
        v64 = v63 == 1;
        v65 = *(_DWORD *)(v1 + 340);
        v66 = *(_DWORD *)(v1 + 346);
        v67 = sub_100012C44(&qword_100405BD0);
        v68 = *(_QWORD *)(v168 - 8);
        v69 = *(_QWORD *)(v68 + 72);
        v70 = *(unsigned __int8 *)(v68 + 80);
        v71 = (v70 + 32) & ~v70;
        v31 = swift_allocObject(v67, v71 + v69, v70 | 7);
        *(_OWORD *)(v31 + 16) = xmmword_10033A110;
        v48 = (void *)(v31 + v71);
        *(_BYTE *)(v1 + 336) = *(_DWORD *)(v1 + 64);
        *(_DWORD *)(v1 + 337) = v65;
        *(_WORD *)(v1 + 341) = *(_DWORD *)(v1 + 80);
        *(_BYTE *)(v1 + 343) = v64;
        *(_DWORD *)(v1 + 344) = v66;
        *(_WORD *)(v1 + 348) = *(_DWORD *)(v1 + 96);
        sub_100063F18(v1 + 336);
        goto LABEL_79;
      case 0x17:
        type metadata accessor for wl_nan_ev_datapath_cmn(0);
        sub_1002022B8(1282, v72, (uint64_t)v11, v7, v72);
        v73 = *(unsigned __int8 *)(v1 + 336);
        v74 = *(_BYTE *)(v1 + 337);
        v75 = *(_WORD *)(v1 + 344);
        v168 = type metadata accessor for DriverEvent(0);
        v76 = v73 == 1;
        v77 = *(_DWORD *)(v1 + 340);
        v78 = sub_100012C44(&qword_100405BD0);
        v79 = *(_QWORD *)(v168 - 8);
        v80 = *(_QWORD *)(v79 + 72);
        v81 = *(unsigned __int8 *)(v79 + 80);
        v82 = (v81 + 32) & ~v81;
        v31 = swift_allocObject(v78, v82 + v80, v81 | 7);
        *(_OWORD *)(v31 + 16) = xmmword_10033A110;
        v48 = (void *)(v31 + v82);
        *(_BYTE *)(v1 + 336) = v74;
        *(_DWORD *)(v1 + 337) = v77;
        *(_WORD *)(v1 + 341) = v75;
        *(_BYTE *)(v1 + 343) = v76;
        v83 = 2;
        goto LABEL_29;
      case 0x18:
        *(_BYTE *)(v1 + 336) = 1;
        sub_1002040A0(0x100000000, v5);
        *(_QWORD *)(v1 + 32) = v84;
        *(_QWORD *)(v1 + 48) = v85;
        *(_QWORD *)(v1 + 64) = v86;
        v87 = (_QWORD *)swift_getKeyPath(&unk_10035C160);
        v88 = swift_getKeyPath(&unk_10035C180);
        v89 = sub_1000CB6A4();
        sub_100203414(v8 - 168, v1 + 144, 1025, v87, v88, (uint64_t)sub_10020441C, 0, (uint64_t)v11, v7, (uint64_t)&type metadata for IEEE80211Frame, v3, v89);
        v224 = *(_QWORD *)(v1 + 48);
        *(_QWORD *)(v1 + 96) = v224 >> 40;
        swift_release(v87);
        swift_release(v88);
        v225 = *(_QWORD *)(v8 - 168);
        v226 = sub_100012C44(&qword_100405BD0);
        v168 = type metadata accessor for DriverEvent(0);
        v227 = *(_QWORD *)(v168 - 8);
        v228 = *(_QWORD *)(v227 + 72);
        v229 = *(unsigned __int8 *)(v227 + 80);
        v230 = (v229 + 32) & ~v229;
        v31 = swift_allocObject(v226, v230 + v228, v229 | 7);
        *(_OWORD *)(v31 + 16) = xmmword_10033A110;
        v48 = (void *)(v31 + v230);
        v231 = *(_OWORD *)(v1 + 288);
        *(_OWORD *)(v1 + 464) = *(_OWORD *)(v1 + 272);
        *(_OWORD *)(v1 + 480) = v231;
        *(_OWORD *)(v1 + 496) = *(_OWORD *)(v1 + 304);
        *(_OWORD *)(v1 + 505) = *(_OWORD *)(v6 + 169);
        v232 = *(_OWORD *)(v1 + 224);
        *(_OWORD *)(v1 + 400) = *(_OWORD *)(v1 + 208);
        *(_OWORD *)(v1 + 416) = v232;
        v233 = *(_OWORD *)(v1 + 256);
        *(_OWORD *)(v1 + 432) = *(_OWORD *)(v1 + 240);
        *(_OWORD *)(v1 + 448) = v233;
        v234 = *(_OWORD *)(v1 + 160);
        *(_OWORD *)(v1 + 336) = *(_OWORD *)(v1 + 144);
        *(_OWORD *)(v1 + 352) = v234;
        v235 = *(_OWORD *)(v1 + 192);
        *(_OWORD *)(v1 + 368) = *(_OWORD *)(v1 + 176);
        *(_OWORD *)(v1 + 384) = v235;
        *(_QWORD *)(v1 + 528) = *(_QWORD *)(v1 + 32);
        *(_DWORD *)(v1 + 536) = v224;
        *(_BYTE *)(v1 + 540) = BYTE4(v224);
        *(_BYTE *)(v1 + 541) = *(_QWORD *)(v1 + 96);
        *(_QWORD *)(v1 + 544) = *(_QWORD *)(v1 + 64);
        *(_QWORD *)(v1 + 552) = v225;
        sub_100063D44(v1 + 336);
        goto LABEL_79;
      case 0x19:
        sub_100203DF0((uint64_t)v11, v7, v3, v1 + 336);
        v90 = *(_OWORD *)(v1 + 337);
        *(_OWORD *)(v1 + 48) = *(_OWORD *)(v1 + 340);
        *(_OWORD *)(v1 + 64) = v90;
        *(_OWORD *)(v1 + 32) = *(_OWORD *)(v1 + 342);
        v91 = *(_OWORD *)(v1 + 346);
        *(_OWORD *)(v1 + 96) = v91;
        LODWORD(v91) = *(_DWORD *)(v1 + 354);
        *(uint16x8_t *)(v1 + 80) = vmovl_u8(*(uint8x8_t *)&v91);
        v92 = *(_QWORD *)(v1 + 376);
        v93 = sub_100012C44(&qword_100405BD0);
        v168 = type metadata accessor for DriverEvent(0);
        v94 = *(_QWORD *)(v168 - 8);
        v95 = *(_QWORD *)(v94 + 72);
        v96 = *(unsigned __int8 *)(v94 + 80);
        v97 = (v96 + 32) & ~v96;
        v31 = swift_allocObject(v93, v97 + v95, v96 | 7);
        *(_OWORD *)(v31 + 16) = xmmword_10033A110;
        v48 = (void *)(v31 + v97);
        *(_QWORD *)&v98 = vzip1q_s32((int32x4_t)vzip1q_s16(*(int16x8_t *)(v1 + 64), *(int16x8_t *)(v1 + 48)), *(int32x4_t *)(v1 + 32)).u64[0];
        *((_QWORD *)&v98 + 1) = *(_QWORD *)(v1 + 96);
        *(_OWORD *)(v1 + 336) = v98;
        *(_DWORD *)(v1 + 352) = vmovn_s16(*(int16x8_t *)(v1 + 80)).u32[0];
        *(_QWORD *)(v1 + 360) = v92;
        sub_100063F30(v1 + 336);
        goto LABEL_79;
      case 0x1A:
        sub_100203DF0((uint64_t)v11, v7, v3, v1 + 336);
        v99 = *(_BYTE *)(v1 + 337);
        *(_DWORD *)(v1 + 96) = *(unsigned __int8 *)(v1 + 340);
        *(_DWORD *)(v1 + 80) = *(unsigned __int8 *)(v1 + 341);
        v100 = *(int32x2_t *)(v1 + 342);
        v101 = *(int32x2_t *)(v1 + 352);
        v102 = *(_BYTE *)(v1 + 356);
        *(_DWORD *)(v1 + 64) = *(unsigned __int8 *)(v1 + 357);
        v103 = *(unsigned __int8 *)(v1 + 358);
        v104 = *(_QWORD *)(v1 + 376);
        v105 = sub_100012C44(&qword_100405BD0);
        v168 = type metadata accessor for DriverEvent(0);
        v106 = *(_QWORD *)(v168 - 8);
        v107 = *(_QWORD *)(v106 + 72);
        v108 = *(unsigned __int8 *)(v106 + 80);
        v109 = (v108 + 32) & ~v108;
        v31 = swift_allocObject(v105, v109 + v107, v108 | 7);
        *(_OWORD *)(v31 + 16) = xmmword_10033A110;
        v48 = (void *)(v31 + v109);
        v110 = v103 == 1;
        *(_BYTE *)(v1 + 336) = v99;
        if (v103 == 2)
          v110 = 2;
        *(_BYTE *)(v1 + 337) = v110;
        *(_BYTE *)(v1 + 338) = *(_DWORD *)(v1 + 96);
        *(_BYTE *)(v1 + 339) = *(_DWORD *)(v1 + 80);
        *(int32x2_t *)(v1 + 340) = vzip1_s32(v100, v101);
        *(_BYTE *)(v1 + 348) = v102;
        *(_BYTE *)(v1 + 349) = *(_DWORD *)(v1 + 64);
        *(_QWORD *)(v1 + 352) = v104;
        sub_100063F24(v1 + 336);
        goto LABEL_79;
      case 0x1F:
        *(_DWORD *)(v1 + 144) = 308;
        v111 = (uint64_t *)swift_getKeyPath(&unk_10035C1A0);
        type metadata accessor for wl_nan_cmd_xtlv_id(0);
        v113 = v112;
        v114 = sub_100011DE4(&qword_10040B7E0, (uint64_t (*)(uint64_t))type metadata accessor for wl_nan_cmd_xtlv_id, (uint64_t)&unk_100338E18);
        v115 = sub_1000CB6A4();
        v116 = sub_1000CB660();
        v174 = sub_100203928(v1 + 336, (char *)(v1 + 144), v111, (uint64_t)v11, v7, v113, v3, v114, v115, v116);
        swift_release(v111);
        v175 = *(unsigned __int8 *)(v1 + 336);
        v176 = *(unsigned __int8 *)(v1 + 340);
        if (v175 == 1)
          goto LABEL_72;
        v177 = *(unsigned __int8 *)(v1 + 337);
        if (*(_BYTE *)(v1 + 336))
        {
          if (v177 != 1)
          {
LABEL_85:
            swift_bridgeObjectRelease(v174);
            v259 = Logger.logObject.getter(v258);
            v260 = static os_log_type_t.error.getter(v259);
            if (os_log_type_enabled(v259, v260))
            {
              v261 = swift_slowAlloc(18, -1);
              v262 = swift_slowAlloc(32, -1);
              *(_QWORD *)(v1 + 336) = v262;
              *(_DWORD *)v261 = 16777986;
              *(_BYTE *)(v1 + 144) = v175;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 144, v1 + 145);
              *(_WORD *)(v261 + 5) = 256;
              *(_BYTE *)(v1 + 144) = v177;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 144, v1 + 145);
              *(_WORD *)(v261 + 8) = 2080;
              *(_QWORD *)(v1 + 144) = sub_100013CC8(0xD000000000000019, 0x8000000100367BE0, (uint64_t *)(v1 + 336));
              UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 144, v1 + 152);
              _os_log_impl((void *)&_mh_execute_header, v259, v260, "Failed to convert status: %hhu, reason: %hhu into %s", (uint8_t *)v261, 0x12u);
              swift_arrayDestroy(v262, 1, &type metadata for Any[8]);
              swift_slowDealloc(v262, -1, -1);
              swift_slowDealloc(v261, -1, -1);
            }

            v14 = *(_QWORD *)(v1 + 80);
            v15 = *(_QWORD *)(v1 + 96);
            v263 = sub_100012C84();
            v256 = swift_allocError(&type metadata for WiFiError, v263, 0, 0);
            *(_OWORD *)v264 = xmmword_100337850;
            *(_BYTE *)(v264 + 16) = 2;
            swift_willThrow(v256);
            swift_release(v11);
            swift_release(v5);
            goto LABEL_2;
          }
LABEL_72:
          v178 = 0;
        }
        else
        {
          v178 = v177 - 1;
          if ((v177 - 1) >= 4u)
            goto LABEL_85;
        }
        v243 = *(_QWORD *)(v174 + 16);
        if (!v243)
        {
LABEL_92:
          swift_release(v5);
          v270 = swift_bridgeObjectRelease(v174);
          break;
        }
        v244 = (unint64_t *)(v174 + 48);
        v245 = *(_QWORD *)(v174 + 16);
        while (*((_WORD *)v244 - 8) != 1284)
        {
          v244 += 3;
          if (!--v245)
          {
            v267 = 0;
            v268 = (unint64_t *)(v174 + 48);
            while (1)
            {
              v269 = v267 + 1;
              if (__OFADD__(v267, 1))
              {
                __break(1u);
LABEL_108:
                __break(1u);
                JUMPOUT(0x1002021F8);
              }
              if (*((_WORD *)v268 - 8) == 779)
                break;
              v268 += 3;
              ++v267;
              if (v269 == v243)
                goto LABEL_92;
            }
            v271 = *(v268 - 1);
            v272 = *v268;
            sub_100031FEC(v271, *v268);
            sub_10021363C(v271, v272);
            v283 = v282;
            sub_10000E614(v271, v272);
            v284 = 0;
            v285 = (unint64_t *)(v174 + 48);
            while (1)
            {
              v286 = v284 + 1;
              if (__OFADD__(v284, 1))
                goto LABEL_108;
              if (*((_WORD *)v285 - 8) == 787)
                break;
              v285 += 3;
              ++v284;
              if (v286 == v243)
                goto LABEL_92;
            }
            v295 = *(v285 - 1);
            v296 = *v285;
            sub_100031FEC(v295, *v285);
            swift_bridgeObjectRelease(v174);
            sub_1001F1188(787, v295, v296);
            v298 = v297;
            sub_10000E614(v295, v296);
            if ((v298 & 0x1000000000000) == 0)
            {
              *(_QWORD *)(v1 + 32) = v298 >> 8;
              *(_QWORD *)(v1 + 48) = v298 >> 16;
              *(_QWORD *)(v1 + 64) = v298 >> 24;
              *(_QWORD *)(v1 + 80) = HIDWORD(v298);
              *(_QWORD *)(v1 + 96) = v298 >> 40;
              v299 = sub_100012C44(&qword_100405BD0);
              v168 = type metadata accessor for DriverEvent(0);
              v300 = *(_QWORD *)(v168 - 8);
              v301 = *(_QWORD *)(v300 + 72);
              v302 = *(unsigned __int8 *)(v300 + 80);
              v303 = (v302 + 32) & ~v302;
              v31 = swift_allocObject(v299, v303 + v301, v302 | 7);
              *(_OWORD *)(v31 + 16) = xmmword_10033A110;
              v304 = (void *)(v31 + v303);
              *(_WORD *)(v1 + 336) = v283;
              *(_BYTE *)(v1 + 338) = v298;
              *(_BYTE *)(v1 + 339) = *(_QWORD *)(v1 + 32);
              *(_BYTE *)(v1 + 340) = *(_QWORD *)(v1 + 48);
              *(_BYTE *)(v1 + 341) = *(_QWORD *)(v1 + 64);
              *(_BYTE *)(v1 + 342) = *(_QWORD *)(v1 + 80);
              *(_BYTE *)(v1 + 343) = *(_QWORD *)(v1 + 96);
              *(_BYTE *)(v1 + 344) = v178;
              sub_100063E70(v1 + 336);
              sub_100063888((const void *)(v1 + 336), v304);
              v208 = v304;
LABEL_80:
              v251 = v168;
              goto LABEL_81;
            }
            goto LABEL_94;
          }
        }
        v265 = *(v244 - 1);
        v266 = *v244;
        sub_100031FEC(v265, *v244);
        sub_10021674C(v265, v266);
        v273 = v176;
        *(_DWORD *)(v1 + 96) = v178;
        swift_bridgeObjectRelease(v174);
        sub_10000E614(v265, v266);
        v274 = *(_BYTE *)(v1 + 336);
        v9.i32[0] = *(_DWORD *)(v1 + 338);
        v275 = *(_BYTE *)(v1 + 342);
        v276 = *(_BYTE *)(v1 + 343);
        v277 = v273;
        v278 = sub_10020A434(v273);
        if (v278 != 15)
        {
          v287 = v278;
          *(uint16x8_t *)(v1 + 80) = vmovl_u8(v9);
          v288 = sub_100012C44(&qword_100405BD0);
          v289 = type metadata accessor for DriverEvent(0);
          v290 = *(_QWORD *)(v289 - 8);
          v291 = *(_QWORD *)(v290 + 72);
          v292 = *(unsigned __int8 *)(v290 + 80);
          v293 = (v292 + 32) & ~v292;
          v31 = swift_allocObject(v288, v293 + v291, v292 | 7);
          *(_OWORD *)(v31 + 16) = xmmword_10033A110;
          v294 = (void *)(v31 + v293);
          *(_BYTE *)(v1 + 336) = v274;
          *(_DWORD *)(v1 + 337) = vmovn_s16(*(int16x8_t *)(v1 + 80)).u32[0];
          *(_BYTE *)(v1 + 341) = v275;
          *(_BYTE *)(v1 + 342) = v276;
          *(_BYTE *)(v1 + 343) = v287;
          *(_BYTE *)(v1 + 344) = *(_DWORD *)(v1 + 96);
          sub_10020A458(v1 + 336);
          sub_100063888((const void *)(v1 + 336), v294);
          v208 = v294;
          v251 = v289;
LABEL_81:
          swift_storeEnumTagMultiPayload(v208, v251, 0);
          swift_release(v5);
          (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v1 + 120) + 8))(*(_QWORD *)(v1 + 136), *(_QWORD *)(v1 + 128));
          swift_release(v11);
          return (_QWORD *)v31;
        }
        v279 = Logger.logObject.getter(v278);
        v280 = static os_log_type_t.error.getter(v279);
        if (os_log_type_enabled(v279, v280))
        {
          v281 = (uint8_t *)swift_slowAlloc(5, -1);
          *(_DWORD *)v281 = 16777472;
          *(_BYTE *)(v1 + 336) = v277;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 336, v1 + 337);
          _os_log_impl((void *)&_mh_execute_header, v279, v280, "Failed to convert %hhu into a management frame type", v281, 5u);
          swift_slowDealloc(v281, -1, -1);
        }
        swift_release(v5);

        break;
      case 0x29:
        type metadata accessor for wl_nan_ev_datapath_cmn(0);
        sub_1002022B8(1282, v117, (uint64_t)v11, v7, v117);
        if (*(_BYTE *)(v1 + 358) != 6)
          goto LABEL_94;
        v119 = *(unsigned __int8 *)(v1 + 336);
        v120 = *(_BYTE *)(v1 + 337);
        v118.i32[0] = *(_DWORD *)(v1 + 340);
        *(uint16x8_t *)(v1 + 96) = vmovl_u8(v118);
        v121 = *(_BYTE *)(v1 + 344);
        v122 = *(_BYTE *)(v1 + 345);
        v123 = sub_100012C44(&qword_100405BD0);
        v168 = type metadata accessor for DriverEvent(0);
        v124 = *(_QWORD *)(v168 - 8);
        v125 = *(_QWORD *)(v124 + 72);
        v126 = *(unsigned __int8 *)(v124 + 80);
        v127 = (v126 + 32) & ~v126;
        v31 = swift_allocObject(v123, v127 + v125, v126 | 7);
        *(_OWORD *)(v31 + 16) = xmmword_10033A110;
        v48 = (void *)(v31 + v127);
        *(_BYTE *)(v1 + 336) = v120;
        *(_DWORD *)(v1 + 337) = vmovn_s16(*(int16x8_t *)(v1 + 96)).u32[0];
        *(_BYTE *)(v1 + 341) = v121;
        *(_BYTE *)(v1 + 342) = v122;
        *(_BYTE *)(v1 + 343) = v119 == 1;
        v83 = 1;
LABEL_29:
        *(_QWORD *)(v1 + 344) = v83;
        sub_100063EAC(v1 + 336);
        goto LABEL_79;
      case 0x2C:
        type metadata accessor for wl_nan_host_assist_req(0);
        sub_1002022B8(1538, v128, (uint64_t)v11, v7, v128);
        v129 = *(_QWORD *)(v1 + 336);
        v130.i32[0] = *(_DWORD *)(v1 + 344);
        v131 = *(_BYTE *)(v1 + 348);
        v132 = *(unsigned __int8 *)(v1 + 350);
        v133 = *(_BYTE *)(v1 + 351);
        v134 = *(_BYTE *)(v1 + 349) - 1;
        *(uint16x8_t *)(v1 + 96) = vmovl_u8(v130);
        if (v134 > 0xFu)
          v135 = 15;
        else
          v135 = byte_10035C690[(char)v134];
        v215 = v132 - 1;
        if (v132 == 9)
          v216 = 8;
        else
          v216 = 9;
        if (v132 == 8)
          v217 = 7;
        else
          v217 = v216;
        if (v215 >= 7)
          v218 = v217;
        else
          v218 = v215;
        v219 = sub_100012C44(&qword_100405BD0);
        v168 = type metadata accessor for DriverEvent(0);
        v220 = *(_QWORD *)(v168 - 8);
        v221 = *(_QWORD *)(v220 + 72);
        v222 = *(unsigned __int8 *)(v220 + 80);
        v223 = (v222 + 32) & ~v222;
        v31 = swift_allocObject(v219, v223 + v221, v222 | 7);
        *(_OWORD *)(v31 + 16) = xmmword_10033A110;
        v48 = (void *)(v31 + v223);
        *(_BYTE *)(v1 + 336) = v131;
        *(_BYTE *)(v1 + 337) = v133;
        *(_QWORD *)(v1 + 338) = v129;
        *(_DWORD *)(v1 + 346) = vmovn_s16(*(int16x8_t *)(v1 + 96)).u32[0];
        *(_BYTE *)(v1 + 350) = v135;
        *(_BYTE *)(v1 + 351) = v218;
        sub_100063EA0(v1 + 336);
        goto LABEL_79;
      case 0x2F:
        type metadata accessor for wl_nan_event_oob_af_txs(0);
        sub_1002022B8(2051, v136, (uint64_t)v11, v7, v136);
        v179 = *(unsigned __int8 *)(v1 + 336);
        v180 = *(unsigned __int8 *)(v1 + 337);
        v181 = *(_WORD *)(v1 + 338);
        if (v179 <= 4)
          v182 = 0x302010004uLL >> (8 * v179);
        else
          v182 = 4;
        if (v180 <= 3)
          v183 = 0x2010003u >> (8 * v180);
        else
          v183 = 3;
        v184 = sub_100012C44(&qword_100405BD0);
        v168 = type metadata accessor for DriverEvent(0);
        v185 = *(_QWORD *)(v168 - 8);
        v186 = *(_QWORD *)(v185 + 72);
        v187 = *(unsigned __int8 *)(v185 + 80);
        v188 = (v187 + 32) & ~v187;
        v31 = swift_allocObject(v184, v188 + v186, v187 | 7);
        *(_OWORD *)(v31 + 16) = xmmword_10033A110;
        v48 = (void *)(v31 + v188);
        *(_WORD *)(v1 + 336) = v181;
        *(_BYTE *)(v1 + 338) = v182;
        *(_BYTE *)(v1 + 339) = v183;
        sub_100063910(v1 + 336);
        goto LABEL_79;
      case 0x30:
        *(_BYTE *)(v1 + 336) = 0;
        sub_1002040A0(2051, v5);
        *(_DWORD *)(v8 - 172) = 2051;
        v137 = (_QWORD *)swift_getKeyPath(&unk_10035C140);
        type metadata accessor for wl_nan_tlv(0);
        v139 = v138;
        v140 = sub_100011DE4(&qword_10040B7D8, (uint64_t (*)(uint64_t))type metadata accessor for wl_nan_tlv, (uint64_t)&unk_100338E50);
        v141 = sub_1000CB6A4();
        v142 = sub_1000CB660();
        sub_100202440(v8 - 168, v1 + 144, (char *)(v8 - 172), v137, 20, (uint64_t)sub_10020456C, 0, (uint64_t)v11, v7, v139, (uint64_t)&type metadata for IEEE80211Frame.Management.ActionFrame, v3, v140, v141, v142);
        swift_release(v137);
        v236 = *(_BYTE *)(v1 + 144);
        *(_OWORD *)(v1 + 96) = *(_OWORD *)(v1 + 152);
        v237 = *(_QWORD *)(v1 + 168);
        v238 = sub_100012C44(&qword_100405BD0);
        v168 = type metadata accessor for DriverEvent(0);
        v239 = *(_QWORD *)(v168 - 8);
        v240 = *(_QWORD *)(v239 + 72);
        v241 = *(unsigned __int8 *)(v239 + 80);
        v242 = (v241 + 32) & ~v241;
        v31 = swift_allocObject(v238, v242 + v240, v241 | 7);
        *(_OWORD *)(v31 + 16) = xmmword_10033A110;
        v48 = (void *)(v31 + v242);
        *(_QWORD *)(v1 + 336) = *(_QWORD *)(v8 - 168);
        *(_DWORD *)(v1 + 344) = *(_DWORD *)(v8 - 160);
        *(_BYTE *)(v1 + 352) = v236;
        *(_OWORD *)(v1 + 360) = *(_OWORD *)(v1 + 96);
        *(_QWORD *)(v1 + 376) = v237;
        sub_100063904(v1 + 336);
        goto LABEL_79;
      default:
        goto LABEL_94;
    }
  }
  else
  {
LABEL_94:
    swift_release(v5);
  }
  (*(void (**)(_QWORD, _QWORD, __n128))(*(_QWORD *)(v1 + 120) + 8))(*(_QWORD *)(v1 + 136), *(_QWORD *)(v1 + 128), v270);
  swift_release(v11);
  return _swiftEmptyArrayStorage;
}

uint64_t sub_1002022B8(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _WORD v20[16];
  uint64_t v21;
  unint64_t v22;
  int v23;

  v23 = a1;
  v8 = a3 + 16;
  v9 = sub_100012C44(&qword_1004068B8);
  swift_beginAccess(v8, v20, 33, 0);
  v11 = *(_QWORD *)(a3 + 40);
  v10 = *(_QWORD *)(a3 + 48);
  sub_100034C68(v8, v11);
  v12 = sub_100011770(&qword_10040B9A0, &qword_1004068B8, "%@\t");
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)(v9, v9, v12, v11, v10);
  result = swift_endAccess(v20);
  if (!v5)
  {
    v15 = v21;
    v14 = v22;
    if (v20[12] == v23)
    {
      v16 = sub_100011770(&qword_10040B9A8, &qword_1004068B8, protocol conformance descriptor for TypeLengthValue<A, B>);
      LengthValueHelper.load<A>(_:)(a5, v9, a5, v16);
    }
    else
    {
      v17 = sub_100012C84();
      v18 = swift_allocError(&type metadata for WiFiError, v17, 0, 0);
      *(_OWORD *)v19 = xmmword_100337850;
      *(_BYTE *)(v19 + 16) = 2;
      swift_willThrow(v18);
    }
    return sub_10000E614(v15, v14);
  }
  return result;
}

uint64_t sub_100202440(uint64_t a1, uint64_t a2, char *a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  char v53;
  void (*v54)(char *, uint64_t);
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  char v59;
  void (*v60)(char *, uint64_t);
  uint64_t v61;
  uint64_t v62;
  uint64_t AssociatedConformanceWitness;
  char *v64;
  uint64_t v65;
  char *v66;
  void (*v67)(char *, uint64_t);
  char *v68;
  unsigned __int16 v69;
  BOOL v70;
  char *v71;
  unsigned __int16 v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  int v78;
  unint64_t v79;
  uint64_t AssociatedTypeWitness;
  char *v81;
  char *v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  char *v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  char *v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  _QWORD v114[3];
  uint64_t v115;

  v85 = a7;
  v90 = a6;
  v92 = a5;
  v112 = a3;
  v91 = a2;
  v89 = a1;
  v104 = a4;
  v16 = *a4;
  v102 = *(_QWORD *)(a14 + 8);
  v17 = (uint64_t *)(v16 + class metadata base offset for KeyPath);
  v18 = *(_QWORD *)(v16 + class metadata base offset for KeyPath + 8);
  v83 = *(_QWORD *)(*(_QWORD *)(v102 + 24) + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v83, v18, &protocol requirements base descriptor for ExpressibleByIntegerLiteral);
  __chkstk_darwin();
  v82 = (char *)&v76 - v19;
  v101 = v18;
  v95 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin();
  v81 = (char *)&v76 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v84 = (char *)&v76 - v21;
  __chkstk_darwin();
  v87 = (char *)&v76 - v22;
  __chkstk_darwin();
  v93 = (char *)&v76 - v23;
  __chkstk_darwin();
  v88 = (char *)&v76 - v24;
  __chkstk_darwin();
  v86 = (char *)&v76 - v25;
  __chkstk_darwin();
  v94 = (char *)&v76 - v26;
  __chkstk_darwin();
  v105 = (char *)&v76 - v27;
  v100 = *v17;
  v96 = *(_QWORD *)(v100 - 8);
  v103 = *(_QWORD *)(v96 + 64);
  __chkstk_darwin();
  v106 = (char *)&v76 - v28;
  v109 = *(_QWORD *)(a15 + 8);
  v29 = *(_QWORD *)(*(_QWORD *)(v109 + 24) + 16);
  v110 = a13;
  v111 = a10;
  v30 = swift_getAssociatedTypeWitness(255, a13, a10, &protocol requirements base descriptor for RawRepresentable);
  v97 = v29;
  v99 = swift_getAssociatedTypeWitness(0, v29, v30, &protocol requirements base descriptor for ExpressibleByIntegerLiteral);
  __chkstk_darwin();
  v98 = (char *)&v76 - v31;
  v32 = swift_checkMetadataState(0, v30);
  v107 = *(_QWORD *)(v32 - 8);
  v108 = v32;
  __chkstk_darwin();
  v34 = (char *)&v76 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v36 = (char *)&v76 - v35;
  __chkstk_darwin();
  v38 = (char *)&v76 - v37;
  v39 = sub_100012C44(&qword_1004068B8);
  swift_beginAccess(a8 + 16, &v113, 33, 0);
  v40 = *(_QWORD *)(a8 + 40);
  v41 = *(_QWORD *)(a8 + 48);
  sub_100034C68(a8 + 16, v40);
  v42 = sub_100011770(&qword_10040B9A0, &qword_1004068B8, "%@\t");
  v43 = v115;
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)(v39, v39, v42, v40, v41);
  if (v43)
    return swift_endAccess(&v113);
  v77 = v34;
  v45 = v36;
  v46 = v107;
  swift_endAccess(&v113);
  v78 = LOWORD(v114[0]);
  v115 = v114[1];
  v79 = v114[2];
  dispatch thunk of RawRepresentable.rawValue.getter(v38, v111, v110);
  v47 = v108;
  v48 = v109;
  v49 = dispatch thunk of static BinaryInteger.isSigned.getter(v108, v109);
  v112 = v38;
  v50 = dispatch thunk of BinaryInteger.bitWidth.getter(v47, v48);
  if ((v49 & 1) == 0)
  {
    v56 = v46;
    if (v50 >= 17)
    {
      LOWORD(v114[0]) = v78;
      v57 = sub_1000B52C0();
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(v114, &type metadata for UInt16, v57, v47, v48);
      v58 = v112;
      v59 = dispatch thunk of static Equatable.== infix(_:_:)(v45, v112, v47, *(_QWORD *)(*(_QWORD *)(v48 + 16) + 8));
      v60 = *(void (**)(char *, uint64_t))(v56 + 8);
      v60(v45, v47);
      v60(v58, v47);
      v55 = v79;
      if ((v59 & 1) == 0)
        goto LABEL_17;
      goto LABEL_15;
    }
    v71 = v112;
    v72 = dispatch thunk of BinaryInteger._lowWord.getter(v47, v48);
    (*(void (**)(char *, uint64_t))(v46 + 8))(v71, v47);
    v70 = v78 == v72;
LABEL_13:
    v55 = v79;
    if (!v70)
      goto LABEL_17;
    goto LABEL_15;
  }
  if (v50 > 16)
  {
    LOWORD(v114[0]) = v78;
    v51 = sub_1000B52C0();
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(v114, &type metadata for UInt16, v51, v47, v48);
    v52 = v112;
    v53 = dispatch thunk of static Equatable.== infix(_:_:)(v45, v112, v47, *(_QWORD *)(*(_QWORD *)(v48 + 16) + 8));
    v54 = *(void (**)(char *, uint64_t))(v46 + 8);
    v54(v45, v47);
    v54(v52, v47);
    v55 = v79;
    if ((v53 & 1) == 0)
      goto LABEL_17;
LABEL_15:
    __asm { BR              X10 }
  }
  v111 = 0;
  v61 = v97;
  v62 = v99;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v97, v47, v99, &protocol requirements base descriptor for ExpressibleByIntegerLiteral, &associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
  v64 = v98;
  dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)(&unk_10033A248, 256, v62, AssociatedConformanceWitness);
  dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)(v64, v47, v61);
  v65 = v46;
  v66 = v112;
  LOBYTE(v61) = dispatch thunk of static Comparable.>= infix(_:_:)(v112, v45, v47, *(_QWORD *)(*(_QWORD *)(v48 + 32) + 8));
  v67 = *(void (**)(char *, uint64_t))(v65 + 8);
  v67(v45, v47);
  v68 = v77;
  (*(void (**)(char *, char *, uint64_t))(v65 + 16))(v77, v66, v47);
  if ((v61 & 1) != 0)
  {
    v69 = dispatch thunk of BinaryInteger._lowWord.getter(v47, v48);
    v67(v68, v47);
    v67(v66, v47);
    v70 = v78 == v69;
    goto LABEL_13;
  }
  v67(v68, v47);
  v67(v66, v47);
  v55 = v79;
LABEL_17:
  v73 = sub_100012C84();
  v74 = swift_allocError(&type metadata for WiFiError, v73, 0, 0);
  *(_OWORD *)v75 = xmmword_100337850;
  *(_BYTE *)(v75 + 16) = 2;
  swift_willThrow(v74);
  return sub_10000E614(v115, v55);
}

uint64_t sub_100202FD4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (BYTE6(v5) < v0)
  {
    v7 = sub_100012C84();
    v8 = swift_allocError(&type metadata for WiFiError, v7, 0, 0);
    *(_QWORD *)v9 = 0;
    *(_QWORD *)(v9 + 8) = 0;
    *(_BYTE *)(v9 + 16) = 2;
    swift_willThrow(v8);
    v10 = *(_QWORD *)(v6 - 72);
    sub_10000E614(v10, v5);
    sub_10000E614(v10, v5);
    (*(void (**)(_QWORD, uint64_t))(v2 + 8))(*(_QWORD *)(v6 - 192), v4);
    JUMPOUT(0x100202BF8);
  }
  v11 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v2 + 16))(v3, *(_QWORD *)(v6 - 192), v4);
  return ((uint64_t (*)(uint64_t))((char *)&loc_10020309C + dword_100203404[v1]))(v11);
}

void sub_1002030B4()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(void);
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  uint64_t v17;

  v7 = (int)*(_QWORD *)(v6 - 72);
  v8 = __OFADD__(v7, v4);
  v9 = v7 + v4;
  if (!v8)
  {
    v10 = v7 + v0;
    if (__OFADD__(v7, v0))
    {
      __break(1u);
    }
    else if (v10 >= v9)
    {
      v11 = Data._Representation.subscript.getter(v9, v10, *(_QWORD *)(v6 - 72), v5);
      v13 = v12;
      v14 = *(_QWORD *)(v6 - 152);
      v2();
      if (v14)
      {
        sub_10000E614(v11, v13);
        v15 = *(_QWORD *)(v6 - 72);
        sub_10000E614(v15, v5);
        sub_10000E614(v15, v5);
        v16 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 272) + 8);
        v16(v1, v3);
        v16(*(_QWORD *)(v6 - 192), v3);
      }
      else
      {
        (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(v6 - 272) + 8))(*(_QWORD *)(v6 - 192), v3);
        sub_10000E614(v11, v13);
        v17 = *(_QWORD *)(v6 - 72);
        sub_10000E614(v17, v5);
        sub_10000E614(v17, v5);
      }
      JUMPOUT(0x100202BF8);
    }
    __break(1u);
    JUMPOUT(0x1002033C8);
  }
  __break(1u);
  JUMPOUT(0x1002030C8);
}

void sub_10020316C()
{
  uint64_t v0;
  uint64_t v1;

  if (__OFADD__(*(_QWORD *)(*(_QWORD *)(v1 - 72) + 16), v0))
  {
    __break(1u);
    JUMPOUT(0x1002033D4);
  }
  JUMPOUT(0x10020317CLL);
}

uint64_t sub_100203414(uint64_t a1, uint64_t a2, int a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;

  v19 = dispatch thunk of AnyKeyPath._storedInlineOffset.getter(a1);
  if ((v20 & 1) != 0)
  {
    v26 = sub_100012C84();
    v27 = swift_allocError(&type metadata for WiFiError, v26, 0, 0);
    *(_OWORD *)v28 = xmmword_100337850;
    *(_BYTE *)(v28 + 16) = 2;
    return swift_willThrow(v27);
  }
  else
  {
    v21 = v19;
    v30 = a3;
    type metadata accessor for wl_nan_tlv(0);
    v29 = v22;
    v23 = sub_100011DE4(&qword_10040B7D8, (uint64_t (*)(uint64_t))type metadata accessor for wl_nan_tlv, (uint64_t)&unk_100338E50);
    v24 = sub_1000CB660();
    return sub_100202440(a1, a2, (char *)&v30, a4, v21, a6, a7, a8, a9, v29, a10, a11, v23, a12, v24);
  }
}

uint64_t sub_100203570(uint64_t a1, int a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;

  v17 = sub_100012C44(&qword_100405C48);
  result = sub_100203414(a1, (uint64_t)&v19, a2, a3, a4, (uint64_t)sub_100203620, 0, a5, a6, v17, a7, a8);
  if (!v8)
    return v19;
  return result;
}

void sub_100203620(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;

  type metadata accessor for NANAttribute(0);
  __chkstk_darwin();
  sub_100031FEC(a1, a2);
  sub_10001F11C((uint64_t)_swiftEmptyArrayStorage);
  v4 = type metadata accessor for BinaryDecoder();
  v5 = (_QWORD *)swift_allocObject(v4, 48, 7);
  v5[5] = &_swiftEmptyDictionarySingleton;
  v5[2] = a1;
  v5[3] = a2;
  __asm { BR              X10 }
}

uint64_t sub_1002036F0(uint64_t a1)
{
  int v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  unint64_t v7;
  uint64_t v8;

  v2[4] = v1;
  swift_beginAccess(a1, v4 - 104, 1, 0);
  v5 = v2[5];
  v2[5] = v3;
  v6 = swift_bridgeObjectRelease(v5);
  v8 = v2[2];
  v7 = v2[3];
  *(_QWORD *)(v4 - 152) = v8;
  *(_QWORD *)(v4 - 160) = v8 >> 32;
  *(_QWORD *)(v4 - 168) = _swiftEmptyArrayStorage;
  return ((uint64_t (*)(__n128))((char *)sub_100203774 + 4 * byte_10035C0FB[v7 >> 62]))(v6);
}

uint64_t sub_100203774@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;

  if (a1 >= *(_QWORD *)(v7 - 160))
  {
    result = swift_release(v2);
    **(_QWORD **)(v7 - 176) = *(_QWORD *)(v7 - 168);
    return result;
  }
  *(_QWORD *)(v7 - 120) = v4;
  *(_QWORD *)(v7 - 112) = sub_100011DE4((unint64_t *)&qword_100405BB8, v5, v6);
  *(_QWORD *)(v7 - 144) = v2;
  swift_retain();
  NANAttribute.init(from:)((_QWORD *)(v7 - 144), v3);
  if (!v1)
  {
    if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v7 - 168)) & 1) == 0)
      *(_QWORD *)(v7 - 168) = sub_1000B30D8(0, *(_QWORD *)(*(_QWORD *)(v7 - 168) + 16) + 1, 1, *(_QWORD *)(v7 - 168));
    v11 = *(_QWORD *)(v7 - 168);
    v13 = *(_QWORD *)(v11 + 16);
    v12 = *(_QWORD *)(v11 + 24);
    v14 = v13 + 1;
    if (v13 >= v12 >> 1)
    {
      *(_QWORD *)(v7 - 200) = v13;
      *(_QWORD *)(v7 - 192) = v14;
      v16 = sub_1000B30D8(v12 > 1, v13 + 1, 1, *(_QWORD *)(v7 - 168));
      v13 = *(_QWORD *)(v7 - 200);
      v14 = *(_QWORD *)(v7 - 192);
      *(_QWORD *)(v7 - 168) = v16;
    }
    v15 = *(_QWORD *)(v7 - 168);
    *(_QWORD *)(v15 + 16) = v14;
    sub_10020A860(v3, v15+ ((*(unsigned __int8 *)(*(_QWORD *)(v7 - 184) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v7 - 184) + 80))+ *(_QWORD *)(*(_QWORD *)(v7 - 184) + 72) * v13);
LABEL_15:
    JUMPOUT(0x10020375CLL);
  }
  *(_QWORD *)(v7 - 72) = v1;
  swift_errorRetain(v1);
  v8 = sub_100012C44((uint64_t *)&unk_10040C360);
  if ((swift_dynamicCast(v7 - 144, v7 - 72, v8, &type metadata for WiFiError, 0) & 1) != 0)
  {
    v9 = *(_QWORD *)(v7 - 144);
    v10 = *(unsigned __int8 *)(v7 - 128);
    if (v10 == 2)
    {
      if ((v9 & 1) != 0)
      {
        swift_errorRelease(v1);
        swift_errorRelease(*(_QWORD *)(v7 - 72));
        goto LABEL_15;
      }
    }
    else
    {
      sub_100013024(v9, *(_QWORD *)(v7 - 136), v10);
    }
  }
  swift_bridgeObjectRelease(*(_QWORD *)(v7 - 168));
  swift_errorRelease(*(_QWORD *)(v7 - 72));
  return swift_release(v2);
}

uint64_t sub_100203928(uint64_t a1, char *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t result;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v22;
  uint64_t v23;

  result = sub_1002039F0(a3);
  if ((v17 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    v18 = result;
    v19 = sub_100012C44(&qword_10040B990);
    result = sub_100202440(a1, (uint64_t)&v23, a2, a3, v18, (uint64_t)sub_100203A44, 0, a4, a5, a6, v19, a7, a8, a9, a10);
    if (!v22)
      return v23;
  }
  return result;
}

uint64_t sub_1002039F0(uint64_t *a1)
{
  uint64_t v1;
  uint64_t result;
  char v3;
  uint64_t v4;
  BOOL v5;

  v1 = *a1;
  result = dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
  if ((v3 & 1) == 0)
  {
    v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(class metadata base offset for KeyPath + v1 + 8) - 8) + 64);
    v5 = __OFADD__(result, v4);
    result += v4;
    if (v5)
      __break(1u);
  }
  return result;
}

void sub_100203A44(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v4 = sub_100012C44(&qword_10040B998);
  v5 = sub_100012C44(&qword_100404E78);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 72);
  v8 = *(unsigned __int8 *)(v6 + 80);
  v9 = (v8 + 32) & ~v8;
  v10 = swift_allocObject(v4, v9 + v7, v8 | 7);
  *(_OWORD *)(v10 + 16) = xmmword_10033A110;
  v11 = v10 + v9;
  v12 = v11 + *(int *)(v5 + 48);
  sub_100031FEC(a1, a2);
  if (qword_100403F38 != -1)
    swift_once(&qword_100403F38, sub_1000C8ACC);
  v13 = type metadata accessor for CodingUserInfoKey(0);
  v14 = sub_100014C44(v13, (uint64_t)static CodingUserInfoKey.fourByteAlignedValue);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v11, v14, v13);
  *(_QWORD *)(v12 + 24) = &type metadata for Bool;
  *(_BYTE *)v12 = 1;
  sub_10001F11C(v10);
  v15 = type metadata accessor for BinaryDecoder();
  v16 = (_QWORD *)swift_allocObject(v15, 48, 7);
  v16[5] = &_swiftEmptyDictionarySingleton;
  v16[2] = a1;
  v16[3] = a2;
  __asm { BR              X11 }
}

__n128 sub_100203DF0@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t *KeyPath;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  __n128 result;
  unsigned __int8 v17;
  char v18;
  unsigned __int16 v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  __n128 v27;
  __int128 v28;
  _OWORD v29[2];
  unsigned __int8 v30;
  char v31;
  unsigned __int16 v32;
  _DWORD v33[10];

  v33[0] = 1282;
  KeyPath = (uint64_t *)swift_getKeyPath(&unk_10035C610);
  type metadata accessor for wl_nan_tlv(0);
  v11 = v10;
  v12 = sub_100011DE4(&qword_10040B7D8, (uint64_t (*)(uint64_t))type metadata accessor for wl_nan_tlv, (uint64_t)&unk_100338E50);
  v13 = sub_1000CB6A4();
  v14 = sub_1000CB660();
  v15 = sub_100203928((uint64_t)v29, (char *)v33, KeyPath, a1, a2, v11, a3, v12, v13, v14);
  swift_release(KeyPath);
  if (!v4)
  {
    v17 = v30;
    v18 = v31;
    v19 = v32;
    v20 = *(_QWORD *)(v15 + 16);
    v27 = (__n128)v29[1];
    v28 = v29[0];
    if (v20)
    {
      v21 = (unint64_t *)(v15 + 48);
      do
      {
        if (*((_WORD *)v21 - 8) == 774)
        {
          v33[8] = v32;
          v33[9] = v30;
          v23 = *(v21 - 1);
          v22 = *v21;
          v24 = *v21 >> 62;
          sub_100031FEC(v23, *v21);
          swift_bridgeObjectRelease(v15);
          sub_100031FEC(v23, v22);
          sub_100031FEC(v23, v22);
          sub_10001F11C((uint64_t)_swiftEmptyArrayStorage);
          v25 = type metadata accessor for BinaryDecoder();
          v26 = (_QWORD *)swift_allocObject(v25, 48, 7);
          v26[5] = &_swiftEmptyDictionarySingleton;
          v26[2] = v23;
          v26[3] = v22;
          __asm { BR              X10 }
        }
        v21 += 3;
        --v20;
      }
      while (v20);
    }
    swift_bridgeObjectRelease(v15);
    result = v27;
    *(_OWORD *)a4 = v28;
    *(__n128 *)(a4 + 16) = v27;
    *(_BYTE *)(a4 + 32) = v17;
    *(_BYTE *)(a4 + 33) = v18;
    *(_WORD *)(a4 + 34) = v19;
    *(_QWORD *)(a4 + 40) = _swiftEmptyArrayStorage;
  }
  return result;
}

void sub_100203FCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  va_list va;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v19 = va_arg(va1, _QWORD);
  v21 = va_arg(va1, _QWORD);
  v22 = va_arg(va1, _QWORD);
  v23 = va_arg(va1, _QWORD);
  v24 = va_arg(va1, _QWORD);
  *(_QWORD *)(v11 + 32) = (int)v9;
  swift_beginAccess(a1, va1, 1, 0);
  v12 = *(_QWORD *)(v11 + 40);
  *(_QWORD *)(v11 + 40) = v10;
  swift_bridgeObjectRelease(v12);
  v24 = sub_100011DE4((unint64_t *)&qword_100405BB8, (uint64_t (*)(uint64_t))type metadata accessor for BinaryDecoder, (uint64_t)protocol conformance descriptor for BinaryDecoder);
  v19 = v11;
  sub_10016FA58((uint64_t *)va);
  v14 = v13;
  v16 = v15;
  v18 = v17;
  sub_10000E614(v9, v8);
  if (v7)
  {
    sub_10000E614(v9, v8);
    JUMPOUT(0x100203F18);
  }
  if ((v14 & 0xC0000000) != 0)
    sub_1000632E8(v14, v16, v18);
  sub_10000E614(v9, v8);
  JUMPOUT(0x100203EFCLL);
}

void sub_1002040A0(uint64_t a1, uint64_t a2)
{
  if (!__OFADD__(*(_QWORD *)(a2 + 32), 2))
    __asm { BR              X10 }
  __break(1u);
  JUMPOUT(0x1002043C0);
}

void sub_10020441C(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v4 = a2 >> 62;
  sub_100031FEC(a1, a2);
  sub_10001F11C((uint64_t)_swiftEmptyArrayStorage);
  v5 = type metadata accessor for BinaryDecoder();
  v6 = (_QWORD *)swift_allocObject(v5, 48, 7);
  v6[5] = &_swiftEmptyDictionarySingleton;
  v6[2] = a1;
  v6[3] = a2;
  __asm { BR              X10 }
}

uint64_t sub_1002044AC(uint64_t a1)
{
  _OWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t result;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD v18[10];
  _BYTE v19[25];

  *(_QWORD *)(v5 + 32) = v6;
  swift_beginAccess(a1, &v17, 1, 0);
  v7 = *(_QWORD *)(v5 + 40);
  *(_QWORD *)(v5 + 40) = v3;
  swift_bridgeObjectRelease(v7);
  v15 = v4;
  v16 = sub_100011DE4((unint64_t *)&qword_100405BB8, (uint64_t (*)(uint64_t))type metadata accessor for BinaryDecoder, (uint64_t)protocol conformance descriptor for BinaryDecoder);
  v14 = v5;
  result = sub_10016F15C(&v14, v18);
  if (!v2)
  {
    v9 = v18[9];
    v1[8] = v18[8];
    v1[9] = v9;
    v1[10] = *(_OWORD *)v19;
    *(_OWORD *)((char *)v1 + 169) = *(_OWORD *)&v19[9];
    v10 = v18[5];
    v1[4] = v18[4];
    v1[5] = v10;
    v11 = v18[7];
    v1[6] = v18[6];
    v1[7] = v11;
    v12 = v18[1];
    *v1 = v18[0];
    v1[1] = v12;
    v13 = v18[3];
    v1[2] = v18[2];
    v1[3] = v13;
  }
  return result;
}

void sub_10020456C(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v4 = a2 >> 62;
  sub_100031FEC(a1, a2);
  sub_10001F11C((uint64_t)_swiftEmptyArrayStorage);
  v5 = type metadata accessor for BinaryDecoder();
  v6 = (_QWORD *)swift_allocObject(v5, 48, 7);
  v6[5] = &_swiftEmptyDictionarySingleton;
  v6[2] = a1;
  v6[3] = a2;
  __asm { BR              X10 }
}

uint64_t sub_1002045F8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *(_QWORD *)(v5 + 32) = v6;
  swift_beginAccess(a1, &v15, 1, 0);
  v7 = *(_QWORD *)(v5 + 40);
  *(_QWORD *)(v5 + 40) = v3;
  swift_bridgeObjectRelease(v7);
  v13 = v4;
  v14 = sub_100011DE4((unint64_t *)&qword_100405BB8, (uint64_t (*)(uint64_t))type metadata accessor for BinaryDecoder, (uint64_t)protocol conformance descriptor for BinaryDecoder);
  v12 = v5;
  result = sub_10016FA58(&v12);
  if (!v2)
  {
    *(_BYTE *)v1 = result;
    *(_QWORD *)(v1 + 8) = v9;
    *(_QWORD *)(v1 + 16) = v10;
    *(_QWORD *)(v1 + 24) = v11;
  }
  return result;
}

void sub_100204684(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __asm { BR              X10 }
}

uint64_t sub_1002046DC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char __src, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;

  a10 = BYTE6(v16);
  v18 = sub_10021BD08(&__src, 2);
  v20 = v19;
  v21 = sub_10021BD08(&a10, 2);
  v23 = v22;
  a14 = v18;
  a15 = v20;
  sub_100031FEC(v18, v20);
  sub_1000FBDAC(v21, v23);
  sub_10000E614(v21, v23);
  sub_10000E614(v18, v20);
  v24 = a14;
  v25 = a15;
  a12 = a14;
  a13 = a15;
  sub_100031FEC(v15, v16);
  sub_100031FEC(v24, v25);
  sub_1000FBDAC(v15, v16);
  sub_10000E614(v15, v16);
  v26 = sub_10000E614(v24, v25);
  return ((uint64_t (*)(uint64_t))((char *)&loc_1002047D0 + dword_10020494C[v17]))(v26);
}

uint64_t sub_1002047E0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  if (((BYTE6(v1) + 3) & 0x10000) != 0)
  {
    __break(1u);
    JUMPOUT(0x100204914);
  }
  return ((uint64_t (*)(void))((char *)&loc_10020482C + dword_10020495C[a1]))();
}

uint64_t sub_10020483C()
{
  __int16 v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  if ((((v0 & 0xFFFC) - BYTE6(v1)) & 0xFFFF0000) != 0)
  {
    __break(1u);
    JUMPOUT(0x100204920);
  }
  v4 = sub_100106A00((unsigned __int16)((v0 & 0xFFFC) - BYTE6(v1)));
  v6 = v5;
  sub_100031FEC(v2, v3);
  sub_1000FBDAC(v4, v6);
  sub_10000E614(v4, v6);
  sub_10000E614(v2, v3);
  return v2;
}

void sub_10020496C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a1 >= 0x10000)
  {
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 3455, 0);
    __break(1u);
  }
  else
  {
    sub_1001FF3CC(7233902, 0xE300000000000000, a1, a2, a3, a4 & 1, a5, a6, *(_QWORD *)(a7 + 16));
  }
}

uint64_t sub_100204A0C(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  _BYTE v20[16];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;

  v13 = *(_QWORD *)(a4 - 8);
  __chkstk_darwin();
  v15 = (char *)&v18 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v13 + 16))(v15);
  v21 = a3;
  v22 = a4;
  v23 = a5;
  v24 = a6;
  v25 = a2;
  v26 = v6;
  v27 = a1;
  v16 = sub_100012C44((uint64_t *)&unk_10040C360);
  sub_1001F0DC4((uint64_t)v15, (uint64_t)sub_10020A8E0, (uint64_t)v20, a4, v16, (uint64_t)&type metadata for () + 8, (uint64_t)&protocol self-conformance witness table for Error, (uint64_t)&v19);
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, a4);
}

uint64_t sub_100204B44(uint64_t a1, _BYTE *a2, uint64_t a3, unsigned int a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t result;
  char v25;
  char v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;

  v28 = a2;
  v6 = type metadata accessor for Data.Deallocator(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin();
  v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v7 + 104))(v9, enum case for Data.Deallocator.none(_:), v6);
  v11 = Data.Deallocator._deallocator.getter(v10);
  v13 = v12;
  v14 = type metadata accessor for __DataStorage(0);
  swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
  swift_retain();
  v15 = __DataStorage.init(bytes:length:copy:deallocator:offset:)(a1, 1, 0, v11, v13, 0);
  v16 = sub_10000EB3C(v15, 1);
  v18 = v17;
  swift_release(v13);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  if (a4 >= 0x10000)
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 3455, 0);
    __break(1u);
  }
  else
  {
    v19 = v29;
    sub_1001FE8E0();
    v21 = v20;
    v23 = v22;
    result = sub_10000E614(v16, v18);
    if (!v19)
    {
      sub_100212D4C(v21, v23);
      v26 = v25;
      result = sub_10000E614(v21, v23);
      *v28 = v26;
    }
  }
  return result;
}

uint64_t sub_100204D34(uint64_t a1, _DWORD *a2, uint64_t a3, unsigned int a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t result;
  int v25;
  int v26;
  uint64_t v27;
  _DWORD *v28;
  uint64_t v29;

  v28 = a2;
  v6 = type metadata accessor for Data.Deallocator(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin();
  v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v7 + 104))(v9, enum case for Data.Deallocator.none(_:), v6);
  v11 = Data.Deallocator._deallocator.getter(v10);
  v13 = v12;
  v14 = type metadata accessor for __DataStorage(0);
  swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
  swift_retain();
  v15 = __DataStorage.init(bytes:length:copy:deallocator:offset:)(a1, 4, 0, v11, v13, 0);
  v16 = sub_10000EB3C(v15, 4);
  v18 = v17;
  swift_release(v13);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  if (a4 >= 0x10000)
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 3455, 0);
    __break(1u);
  }
  else
  {
    v19 = v29;
    sub_1001FE8E0();
    v21 = v20;
    v23 = v22;
    result = sub_10000E614(v16, v18);
    if (!v19)
    {
      sub_10021689C(v21, v23);
      v26 = v25;
      result = sub_10000E614(v21, v23);
      *v28 = v26;
    }
  }
  return result;
}

uint64_t sub_100204F34(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _QWORD *a9)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  void (*v27)(uint64_t, _QWORD);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t result;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v42 = a7;
  v43 = a8;
  v40 = a5;
  v41 = a3;
  v39 = a4;
  v38 = a2;
  v11 = type metadata accessor for Data.Deallocator(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin();
  v14 = (char *)&v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = *(_QWORD *)(a6 - 8);
  v15 = *(_QWORD *)(v37 + 64);
  __chkstk_darwin();
  v16 = (char *)&v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v12 + 104))(v14, enum case for Data.Deallocator.none(_:), v11);
  v18 = Data.Deallocator._deallocator.getter(v17);
  v20 = v19;
  if (v15)
  {
    v21 = v18;
    v22 = type metadata accessor for __DataStorage(0);
    swift_allocObject(v22, *(unsigned int *)(v22 + 48), *(unsigned __int16 *)(v22 + 52));
    swift_retain();
    v23 = __DataStorage.init(bytes:length:copy:deallocator:offset:)(a1, v15, 0, v21, v20, 0);
    v24 = sub_10000EB3C(v23, v15);
    v26 = v25;
    swift_release(v20);
  }
  else
  {
    v27 = (void (*)(uint64_t, _QWORD))Data.Deallocator._deallocator.getter(v18);
    v29 = v28;
    v27(a1, 0);
    swift_release(v20);
    swift_release(v29);
    v24 = 0;
    v26 = 0xC000000000000000;
  }
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  v30 = v44;
  sub_10020496C(v39, v24, v26, 1, v40, v42, v43);
  v32 = v31;
  v34 = v33;
  result = sub_10000E614(v24, v26);
  if (v30)
  {
    *a9 = v30;
  }
  else
  {
    Data.load<A>(as:)(a6);
    sub_10000E614(v32, v34);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v37 + 40))(v38, v16, a6);
  }
  return result;
}

uint64_t sub_10020515C(unsigned int a1, char a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t result;
  char v11;
  uint64_t v12;

  v11 = a2;
  v4 = sub_1000FADC0((uint64_t)&v11, (uint64_t)&v12);
  if (a1 >= 0x10000)
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 3455, 0);
    __break(1u);
  }
  else
  {
    v6 = v4;
    v7 = v5;
    sub_1001FE8E0();
    if (!v2)
      sub_10000E614(v8, v9);
    return sub_10000E614(v6, v7);
  }
  return result;
}

uint64_t sub_10020526C(unsigned int a1, int a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t result;
  int v11;
  uint64_t v12;

  v11 = a2;
  v4 = sub_1000FADC0((uint64_t)&v11, (uint64_t)&v12);
  if (a1 >= 0x10000)
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 3455, 0);
    __break(1u);
  }
  else
  {
    v6 = v4;
    v7 = v5;
    sub_1001FE8E0();
    if (!v2)
      sub_10000E614(v8, v9);
    return sub_10000E614(v6, v7);
  }
  return result;
}

uint64_t sub_10020537C(unsigned int a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;

  v11 = a2;
  v4 = sub_1000FADC0((uint64_t)&v11, (uint64_t)&v12);
  if (a1 >= 0x10000)
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 3455, 0);
    __break(1u);
  }
  else
  {
    v6 = v4;
    v7 = v5;
    sub_1001FE8E0();
    if (!v2)
      sub_10000E614(v8, v9);
    return sub_10000E614(v6, v7);
  }
  return result;
}

uint64_t sub_10020548C(unsigned int a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t result;
  __int16 v11;
  char v12;
  char v13;
  char v14;
  char v15;
  uint64_t v16;

  v11 = a2;
  v12 = BYTE2(a2);
  v13 = BYTE3(a2);
  v14 = BYTE4(a2);
  v15 = BYTE5(a2);
  v4 = sub_1000FADC0((uint64_t)&v11, (uint64_t)&v16);
  if (a1 >= 0x10000)
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 3455, 0);
    __break(1u);
  }
  else
  {
    v6 = v4;
    v7 = v5;
    sub_1001FE8E0();
    if (!v2)
      sub_10000E614(v8, v9);
    return sub_10000E614(v6, v7);
  }
  return result;
}

uint64_t sub_1002055BC(unsigned int a1, int a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t result;
  int v11;
  uint64_t v12;

  v11 = a2;
  v4 = sub_1000FADC0((uint64_t)&v11, (uint64_t)&v12);
  if (a1 >= 0x10000)
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 3455, 0);
    __break(1u);
  }
  else
  {
    v6 = v4;
    v7 = v5;
    sub_1001FE8E0();
    if (!v2)
      sub_10000E614(v8, v9);
    return sub_10000E614(v6, v7);
  }
  return result;
}

uint64_t sub_1002056DC(unsigned int a1, __int16 a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t result;
  __int16 v11;
  uint64_t v12;

  v11 = a2;
  v4 = sub_1000FADC0((uint64_t)&v11, (uint64_t)&v12);
  if (a1 >= 0x10000)
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 3455, 0);
    __break(1u);
  }
  else
  {
    v6 = v4;
    v7 = v5;
    sub_1001FE8E0();
    if (!v2)
      sub_10000E614(v8, v9);
    return sub_10000E614(v6, v7);
  }
  return result;
}

uint64_t sub_1002057EC(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  _QWORD v10[6];
  int v11;
  uint64_t v12;

  v10[2] = a3;
  v10[3] = a4;
  v10[4] = a5;
  v10[5] = a6;
  v11 = a1;
  v8 = sub_100012C44((uint64_t *)&unk_10040C360);
  return sub_100177494(a2, (uint64_t)sub_10020A914, (uint64_t)v10, a4, v8, (uint64_t)&type metadata for () + 8, (uint64_t)&protocol self-conformance witness table for Error, (uint64_t)&v12);
}

uint64_t sub_10020587C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _QWORD *a9)
{
  uint64_t v9;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t result;

  v14 = sub_1000FADC0(a1, a2);
  v16 = v15;
  sub_10020496C(a4, v14, v15, 1, a5, a7, a8);
  if (v9)
  {
    result = sub_10000E614(v14, v16);
    *a9 = v9;
  }
  else
  {
    sub_10000E614(v17, v18);
    return sub_10000E614(v14, v16);
  }
  return result;
}

uint64_t sub_100205930(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t result;

  v12 = sub_100106A00(*(_QWORD *)(*(_QWORD *)(a4 - 8) + 64));
  v14 = v13;
  sub_10020496C(a1, v12, v13, 0, a3, a5, a6);
  v16 = v15;
  v18 = v17;
  result = sub_10000E614(v12, v14);
  if (!v6)
  {
    Data.load<A>(as:)(a4);
    return sub_10000E614(v16, v18);
  }
  return result;
}

void sub_100205A08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  __int128 v6;

  if (a1)
  {
    v6 = *(_OWORD *)(a3 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a3;
    *(_OWORD *)(a1 + 16) = v6;
    *(_WORD *)(a1 + 32) = *(_WORD *)(a3 + 32);
    if (a4)
      __asm { BR              X11 }
    __asm { BR              X10 }
  }
  __break(1u);
  JUMPOUT(0x100205B64);
}

void sub_100205B84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a1)
  {
    *(_QWORD *)a1 = a3;
    *(_WORD *)(a1 + 8) = a4;
    *(_BYTE *)(a1 + 10) = BYTE2(a4);
    *(_BYTE *)(a1 + 11) = BYTE3(a4);
    *(_WORD *)(a1 + 12) = WORD2(a4);
    if (a5)
      __asm { BR              X11 }
    __asm { BR              X10 }
  }
  __break(1u);
  JUMPOUT(0x100205D28);
}

void sub_100205D48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a1)
  {
    *(_QWORD *)a1 = a3;
    *(_QWORD *)(a1 + 8) = a4;
    *(_QWORD *)(a1 + 16) = a5;
    *(_WORD *)(a1 + 24) = a6;
    *(_BYTE *)(a1 + 26) = BYTE2(a6);
    *(_BYTE *)(a1 + 27) = BYTE3(a6);
    *(_WORD *)(a1 + 28) = WORD2(a6);
    if (a7)
      __asm { BR              X11 }
    __asm { BR              X11 }
  }
  __break(1u);
  JUMPOUT(0x100205F4CLL);
}

void sub_100205F6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11;
  uint64_t v12;

  v11 = __chkstk_darwin();
  if (v11)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a9 - 8) + 24))(v11, v12, a9);
    if (a4)
      __asm { BR              X12 }
    __asm { BR              X10 }
  }
  __break(1u);
  JUMPOUT(0x100206148);
}

uint64_t sub_100206168(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a2 + 16))
  {
    swift_bridgeObjectRetain_n(a2, 2);
    __asm { BR              X8 }
  }
  return 0;
}

void sub_10020676C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  __int16 v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;
  unsigned __int8 *v15;
  int v16;
  const void **v17;
  _BYTE *v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unsigned __int8 *v29;
  int v30;
  int v31;
  int v32;
  const void **v33;
  _BYTE *v34;
  _BYTE *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _BYTE __dst[14];
  unsigned __int8 v49;
  uint64_t *v50;
  _BYTE *v51;
  void *v52;
  void *v53;
  _BYTE v54[24];
  uint64_t v55;
  uint64_t v56;
  __int16 v57;
  _BYTE v58[4];

  v3 = *(_WORD *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  v47 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 40);
  v7 = *(_BYTE *)(a2 + 48);
  v55 = 0;
  v56 = 0;
  if ((v3 & 2) != 0)
    v8 = 2;
  else
    v8 = v3 & 1;
  v9 = sub_10007CE78(3, 2, v3, v3 & 1);
  v10 = v2;
  if (v2)
    goto LABEL_43;
  v11 = _s7CoreP2P20NANAvailabilityEntryV15UsagePreferenceO8rawValueAESgSi_tcfC_0(v9);
  if (v11 == 4)
  {
    v43 = sub_100012C84();
    v44 = swift_allocError(&type metadata for WiFiError, v43, 0, 0);
    *(_OWORD *)v45 = xmmword_100337850;
    *(_BYTE *)(v45 + 16) = 2;
    v10 = v44;
    swift_willThrow(v44);
LABEL_43:
    swift_unexpectedError(v10, "CoreP2P/NANAvailability.swift", 29, 1);
    __break(1u);
    swift_unexpectedError(v8, "CoreP2P/NANAvailability.swift", 29, 1);
    __break(1u);
    goto LABEL_44;
  }
  v57 = v8 & 0xFCFF | ((((v11 & 0x30) >> 4) & 3) << 8);
  v12 = sub_10007CE78(8, 4, v3, (v11 & 0x30) >> 4);
  if (v12 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
LABEL_41:
    __break(1u);
  }
  if (v12 > 0x7FFFFFFF)
    goto LABEL_41;
  if ((v12 & 0xF000) != 0)
  {
LABEL_44:
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 3455, 0);
    __break(1u);
    return;
  }
  if (v5 >> 60 == 15)
  {
    HIBYTE(v56) = 0;
    v13 = v57;
    if ((v7 & 1) == 0)
    {
LABEL_11:
      v57 = v13 | 0x100;
      v14 = *(_QWORD *)(v6 + 16);
      if (!v14)
        return;
      v46 = v6;
      v15 = (unsigned __int8 *)(v6 + 32);
      swift_bridgeObjectRetain(v6);
      do
      {
        v16 = *v15++;
        swift_beginAccess(&v55, v54, 33, 0);
        HIDWORD(v55) = v16;
        v52 = &type metadata for UnsafeMutableRawBufferPointer;
        v53 = &protocol witness table for UnsafeMutableRawBufferPointer;
        v50 = &v55;
        v51 = v58;
        v17 = (const void **)sub_10003259C(&v50, (uint64_t)&type metadata for UnsafeMutableRawBufferPointer);
        v18 = *v17;
        if (*v17 && (v19 = v17[1], v20 = v19 - v18, v19 != v18))
        {
          if (v20 <= 14)
          {
            memset(__dst, 0, sizeof(__dst));
            v49 = (_BYTE)v19 - (_BYTE)v18;
            memcpy(__dst, v18, v19 - v18);
            v21 = *(_QWORD *)__dst;
            v22 = *(unsigned int *)&__dst[8] | ((unint64_t)__dst[12] << 32) | ((unint64_t)__dst[13] << 40) | ((unint64_t)v49 << 48);
          }
          else
          {
            v23 = type metadata accessor for __DataStorage(0);
            swift_allocObject(v23, *(unsigned int *)(v23 + 48), *(unsigned __int16 *)(v23 + 52));
            v24 = __DataStorage.init(bytes:length:)(v18, v20);
            v25 = v24;
            if ((unint64_t)v20 >= 0x7FFFFFFF)
            {
              v26 = type metadata accessor for Data.RangeReference(0);
              v21 = swift_allocObject(v26, 32, 7);
              *(_QWORD *)(v21 + 16) = 0;
              *(_QWORD *)(v21 + 24) = v20;
              v22 = v25 | 0x8000000000000000;
            }
            else
            {
              v21 = v20 << 32;
              v22 = v24 | 0x4000000000000000;
            }
          }
        }
        else
        {
          v21 = 0;
          v22 = 0xC000000000000000;
        }
        sub_100014430(&v50);
        Data.append(_:)(v21, v22);
        swift_endAccess(v54);
        sub_10000E614(v21, v22);
        if (v5 >> 60 != 15)
        {
          sub_100031FEC(v4, v5);
          Data.append(_:)(v4, v5);
          sub_1000634E8(v47, v4, v5);
        }
        --v14;
      }
      while (v14);
      goto LABEL_38;
    }
  }
  else
  {
    sub_100031FEC(v4, v5);
    sub_100206D40((uint64_t)&v55, v47, v5, v27);
    sub_1000634E8(v47, v4, v5);
    v13 = v57;
    if ((v7 & 1) == 0)
      goto LABEL_11;
  }
  v57 = v13 | 0x200;
  v28 = *(_QWORD *)(v6 + 16);
  if (!v28)
    return;
  swift_bridgeObjectRetain(v6);
  v46 = v6;
  v29 = (unsigned __int8 *)(v6 + 36);
  do
  {
    v30 = *(v29 - 4);
    v31 = *(v29 - 1);
    v32 = *v29;
    swift_beginAccess(&v55, v54, 33, 0);
    HIDWORD(v55) = v30 | (v31 << 16) | (v32 << 24);
    v52 = &type metadata for UnsafeMutableRawBufferPointer;
    v53 = &protocol witness table for UnsafeMutableRawBufferPointer;
    v50 = &v55;
    v51 = v58;
    v33 = (const void **)sub_10003259C(&v50, (uint64_t)&type metadata for UnsafeMutableRawBufferPointer);
    v34 = *v33;
    if (*v33 && (v35 = v33[1], v36 = v35 - v34, v35 != v34))
    {
      if (v36 <= 14)
      {
        memset(__dst, 0, sizeof(__dst));
        v49 = (_BYTE)v35 - (_BYTE)v34;
        memcpy(__dst, v34, v35 - v34);
        v37 = *(_QWORD *)__dst;
        v38 = *(unsigned int *)&__dst[8] | ((unint64_t)__dst[12] << 32) | ((unint64_t)__dst[13] << 40) | ((unint64_t)v49 << 48);
      }
      else
      {
        v39 = type metadata accessor for __DataStorage(0);
        swift_allocObject(v39, *(unsigned int *)(v39 + 48), *(unsigned __int16 *)(v39 + 52));
        v40 = __DataStorage.init(bytes:length:)(v34, v36);
        v41 = v40;
        if ((unint64_t)v36 >= 0x7FFFFFFF)
        {
          v42 = type metadata accessor for Data.RangeReference(0);
          v37 = swift_allocObject(v42, 32, 7);
          *(_QWORD *)(v37 + 16) = 0;
          *(_QWORD *)(v37 + 24) = v36;
          v38 = v41 | 0x8000000000000000;
        }
        else
        {
          v37 = v36 << 32;
          v38 = v40 | 0x4000000000000000;
        }
      }
    }
    else
    {
      v37 = 0;
      v38 = 0xC000000000000000;
    }
    sub_100014430(&v50);
    Data.append(_:)(v37, v38);
    swift_endAccess(v54);
    sub_10000E614(v37, v38);
    if (v5 >> 60 != 15)
    {
      sub_100031FEC(v4, v5);
      Data.append(_:)(v4, v5);
      sub_1000634E8(v47, v4, v5);
    }
    v29 += 10;
    --v28;
  }
  while (v28);
LABEL_38:
  swift_bridgeObjectRelease(v46);
}

void sub_100206D40(uint64_t a1@<X0>, __int16 a2@<W1>, unint64_t a3@<X3>, unint64_t a4@<X8>)
{
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char v10;

  v7 = sub_10007CA7C(6, 9, a2, a4);
  if ((v7 & 0x8000000000000000) != 0)
  {
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
  }
  else
  {
    if (v7 < 0x10000)
    {
      *(_WORD *)(a1 + 2) = v7;
      v8 = sub_10007CBAC(3uLL, 3, a2);
      v9 = a3 >> 62;
      v10 = _s7CoreP2P14IEEE80211FrameV10ManagementO14AuthenticationO0F9AlgorithmO8rawValueAISgs5UInt8V_tcfC_0(v8);
      if (v10 == 8)
      {
        *(_BYTE *)(a1 + 14) = 0;
        __asm { BR              X10 }
      }
      *(_BYTE *)(a1 + 14) = v10;
      __asm { BR              X10 }
    }
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 3455, 0);
  }
  __break(1u);
  swift_unexpectedError(0, "CoreP2P/NANAvailability.swift", 29, 1);
  __break(1u);
  JUMPOUT(0x100206FACLL);
}

uint64_t sub_100206FDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _QWORD *a9)
{
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t result;
  unint64_t v20;
  uint64_t v21;

  v14 = sub_1000FB37C(a1, a2);
  v16 = v15;
  v20 = v15;
  sub_100031FEC(v14, v15);
  sub_100031FEC(a4, a5);
  sub_1000FBDAC(a4, a5);
  sub_10000E614(a4, a5);
  sub_10000E614(v14, v16);
  sub_1001FF3CC(7233902, 0xE300000000000000, 274, v14, v20, 1, a6, a7, *(_QWORD *)(a8 + 16));
  if (v21)
  {
    result = sub_10000E614(v14, v20);
    *a9 = v21;
  }
  else
  {
    sub_10000E614(v17, v18);
    return sub_10000E614(v14, v20);
  }
  return result;
}

uint64_t sub_1002070F0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  __n128 v24;
  char v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  _QWORD v40[3];
  uint64_t v41;
  uint64_t v42;
  int v43;
  char v44;

  v5 = type metadata accessor for CodingUserInfoKey(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin();
  v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10003259C(a1, v9);
  dispatch thunk of Decoder.unkeyedContainer()(v40, v9, v10);
  if (v2)
    return sub_100014430(a1);
  v11 = v41;
  v12 = v42;
  sub_100034C68((uint64_t)v40, v41);
  UnkeyedDecodingContainer.inferredDecode<A>()(v11, (uint64_t)&type metadata for UInt8, v12, (uint64_t)&protocol witness table for UInt8);
  v43 = v38;
  v13 = v41;
  v14 = v42;
  sub_100034C68((uint64_t)v40, v41);
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)(&type metadata for UInt16, &type metadata for UInt16, &protocol witness table for UInt16, v13, v14);
  v15 = a2;
  v37 = (unsigned __int16)v38;
  v16 = a1[3];
  v17 = a1[4];
  sub_10003259C(a1, v16);
  v18 = dispatch thunk of Decoder.userInfo.getter(v16, v17);
  if (qword_100403F38 != -1)
    swift_once(&qword_100403F38, sub_1000C8ACC);
  v19 = sub_100014C44(v5, (uint64_t)static CodingUserInfoKey.fourByteAlignedValue);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v19, v5);
  v20 = v15;
  if (*(_QWORD *)(v18 + 16))
  {
    v21 = sub_10002DA48((uint64_t)v8);
    v22 = v37;
    if ((v23 & 1) != 0)
    {
      sub_100014450(*(_QWORD *)(v18 + 56) + 32 * v21, (uint64_t)&v38);
    }
    else
    {
      v38 = 0u;
      v39 = 0u;
    }
  }
  else
  {
    v38 = 0u;
    v39 = 0u;
    v22 = v37;
  }
  v24 = swift_bridgeObjectRelease(v18);
  (*(void (**)(char *, uint64_t, __n128))(v6 + 8))(v8, v5, v24);
  if (*((_QWORD *)&v39 + 1))
  {
    v25 = swift_dynamicCast(&v44, &v38, &type metadata for Any[8], &type metadata for Bool, 6);
    v26 = v43;
    if ((v25 & 1) != 0 && (v44 & 1) != 0)
    {
      v27 = v41;
      v28 = v42;
      sub_100034C68((uint64_t)v40, v41);
      UnkeyedDecodingContainer.decodeData(with:)(((_DWORD)v22 + 3) & 0x1FFFC, v27, v28);
      __asm { BR              X11 }
    }
  }
  else
  {
    sub_1000BE6AC((uint64_t)&v38);
    v26 = v43;
  }
  v30 = v41;
  v31 = v42;
  sub_100034C68((uint64_t)v40, v41);
  v32 = UnkeyedDecodingContainer.decodeData(with:)(v22, v30, v31);
  v34 = v33;
  sub_100014430(v40);
  *(_BYTE *)v20 = v26;
  *(_QWORD *)(v20 + 8) = v32;
  *(_QWORD *)(v20 + 16) = v34;
  sub_100031FEC(v32, v34);
  sub_100014430(a1);
  return sub_10000E614(v32, v34);
}

uint64_t sub_1002074C0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  __n128 v24;
  char v25;
  __int16 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  _QWORD v40[3];
  uint64_t v41;
  uint64_t v42;
  int v43;
  char v44;

  v5 = type metadata accessor for CodingUserInfoKey(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin();
  v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10003259C(a1, v9);
  dispatch thunk of Decoder.unkeyedContainer()(v40, v9, v10);
  if (v2)
    return sub_100014430(a1);
  v11 = v41;
  v12 = v42;
  sub_100034C68((uint64_t)v40, v41);
  UnkeyedDecodingContainer.inferredDecode<A>()(v11, (uint64_t)&type metadata for UInt16, v12, (uint64_t)&protocol witness table for UInt16);
  v43 = (unsigned __int16)v38;
  v13 = v41;
  v14 = v42;
  sub_100034C68((uint64_t)v40, v41);
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)(&type metadata for UInt16, &type metadata for UInt16, &protocol witness table for UInt16, v13, v14);
  v15 = a2;
  v37 = (unsigned __int16)v38;
  v16 = a1[3];
  v17 = a1[4];
  sub_10003259C(a1, v16);
  v18 = dispatch thunk of Decoder.userInfo.getter(v16, v17);
  if (qword_100403F38 != -1)
    swift_once(&qword_100403F38, sub_1000C8ACC);
  v19 = sub_100014C44(v5, (uint64_t)static CodingUserInfoKey.fourByteAlignedValue);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v19, v5);
  v20 = v15;
  if (*(_QWORD *)(v18 + 16))
  {
    v21 = sub_10002DA48((uint64_t)v8);
    v22 = v37;
    if ((v23 & 1) != 0)
    {
      sub_100014450(*(_QWORD *)(v18 + 56) + 32 * v21, (uint64_t)&v38);
    }
    else
    {
      v38 = 0u;
      v39 = 0u;
    }
  }
  else
  {
    v38 = 0u;
    v39 = 0u;
    v22 = v37;
  }
  v24 = swift_bridgeObjectRelease(v18);
  (*(void (**)(char *, uint64_t, __n128))(v6 + 8))(v8, v5, v24);
  if (*((_QWORD *)&v39 + 1))
  {
    v25 = swift_dynamicCast(&v44, &v38, &type metadata for Any[8], &type metadata for Bool, 6);
    v26 = v43;
    if ((v25 & 1) != 0 && (v44 & 1) != 0)
    {
      v27 = v41;
      v28 = v42;
      sub_100034C68((uint64_t)v40, v41);
      UnkeyedDecodingContainer.decodeData(with:)(((_DWORD)v22 + 3) & 0x1FFFC, v27, v28);
      __asm { BR              X11 }
    }
  }
  else
  {
    sub_1000BE6AC((uint64_t)&v38);
    v26 = v43;
  }
  v30 = v41;
  v31 = v42;
  sub_100034C68((uint64_t)v40, v41);
  v32 = UnkeyedDecodingContainer.decodeData(with:)(v22, v30, v31);
  v34 = v33;
  sub_100014430(v40);
  *(_WORD *)v20 = v26;
  *(_QWORD *)(v20 + 8) = v32;
  *(_QWORD *)(v20 + 16) = v34;
  sub_100031FEC(v32, v34);
  sub_100014430(a1);
  return sub_10000E614(v32, v34);
}

uint64_t sub_100207890(_QWORD *a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[3];
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[8];
  uint64_t v15;
  uint64_t v16;

  v14[0] = a2;
  v15 = a3;
  v16 = a4;
  v6 = a1[3];
  v7 = a1[4];
  sub_10003259C(a1, v6);
  dispatch thunk of Encoder.unkeyedContainer()(v11, v6, v7);
  v8 = v12;
  v9 = v13;
  sub_100034C68((uint64_t)v11, v12);
  dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)(v14, &type metadata for UInt8, &protocol witness table for UInt8, v8, v9);
  if (!v4)
    __asm { BR              X11 }
  return sub_100014430(v11);
}

uint64_t sub_100207A38(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;

  v5 = a1;
  v6 = a1 >> 16;
  v7 = (unsigned __int16)a1 >> 14;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    v13 = String.UTF16View.index(_:offsetBy:)(15, v6, a2);
    v14 = v13 + (v7 << 16);
    v15 = v13 & 0xFFFFFFFFFFFFFFFCLL | v5 & 3;
    v16 = v14 & 0xFFFFFFFFFFFF0000;
    if (!v7)
      v16 = v15;
    return v16 | 4;
  }
  else
  {
    v8 = String.UTF8View._foreignIndex(_:offsetBy:)(15, v6);
    v9 = v8 + (v7 << 16);
    v10 = v8 & 0xFFFFFFFFFFFFFFFCLL | v5 & 3;
    v11 = v9 & 0xFFFFFFFFFFFF0000;
    if (!v7)
      v11 = v10;
    return v11 | 8;
  }
}

uint64_t sub_100207AB0(uint64_t a1, char a2, uint64_t (*a3)(_QWORD *), uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  __n128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __n128 v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  uint64_t result;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56;
  unint64_t v57;
  _QWORD v59[4];

  v59[3] = a4;
  if (a1 < 0)
    goto LABEL_44;
  v10 = swift_allocObject(&unk_1003F0520, 24, 7);
  *(_QWORD *)(v10 + 16) = _swiftEmptyArrayStorage;
  v56 = swift_allocObject(&unk_1003F0548, 24, 7);
  *(_QWORD *)(v56 + 16) = 15;
  v11 = HIBYTE(a6) & 0xF;
  if (!a1 || ((a6 & 0x2000000000000000) != 0 ? (v12 = HIBYTE(a6) & 0xF) : (v12 = a5 & 0xFFFFFFFFFFFFLL), !v12))
  {
    if ((a6 & 0x2000000000000000) == 0)
      v11 = a5 & 0xFFFFFFFFFFFFLL;
    v35 = 7;
    if (((a6 >> 60) & ((a5 & 0x800000000000000) == 0)) != 0)
      v35 = 11;
    sub_100207F4C(v35 | (v11 << 16), v56, a2 & 1, v10, a5, a6);
    swift_bridgeObjectRelease(a6);
    v14 = *(_QWORD **)(v10 + 16);
    swift_bridgeObjectRetain(v14);
    swift_release(v10);
    v36 = v56;
LABEL_41:
    swift_release(v36);
    return (uint64_t)v14;
  }
  v51 = a1;
  v52 = v10;
  v13 = 7;
  if (((a6 >> 60) & ((a5 & 0x800000000000000) == 0)) != 0)
    v13 = 11;
  v50 = v13 | (v12 << 16);
  v57 = 4 * v12;
  v14 = _swiftEmptyArrayStorage;
  v15 = 15;
  v16 = 15;
  v17 = 15;
  while (1)
  {
    v18 = String.subscript.getter(v15, a5, a6);
    v20 = v19;
    v59[0] = v18;
    v59[1] = v19;
    v21 = a3(v59);
    if (v6)
    {
      swift_release(v52);
      swift_release(v56);
      swift_bridgeObjectRelease(v20);
      swift_bridgeObjectRelease(a6);
      return (uint64_t)v14;
    }
    v22 = v21;
    v23 = swift_bridgeObjectRelease(v20);
    if ((v22 & 1) != 0)
      break;
    v15 = String.index(after:)(v15, a5, a6, v23);
LABEL_11:
    if (v57 == v15 >> 14)
      goto LABEL_31;
  }
  if (v16 >> 14 == v15 >> 14 && (a2 & 1) != 0)
  {
    v15 = String.index(after:)(v15, a5, a6, v23);
    *(_QWORD *)(v56 + 16) = v15;
    v16 = v15;
    v17 = v15;
    goto LABEL_11;
  }
  if (v15 >> 14 < v16 >> 14)
    goto LABEL_43;
  v24 = String.subscript.getter(v16, v15, a5, a6);
  v53 = v25;
  v54 = v24;
  v27 = v26;
  v29 = v28;
  if ((swift_isUniquelyReferenced_nonNull_native(v14) & 1) == 0)
    v14 = sub_1000B31F8(0, v14[2] + 1, 1, v14);
  v32 = v14[2];
  v31 = v14[3];
  if (v32 >= v31 >> 1)
    v14 = sub_1000B31F8((_QWORD *)(v31 > 1), v32 + 1, 1, v14);
  v14[2] = v32 + 1;
  v33 = &v14[4 * v32];
  v33[4] = v54;
  v33[5] = v27;
  v33[6] = v29;
  v33[7] = v53;
  *(_QWORD *)(v52 + 16) = v14;
  v34 = String.index(after:)(v15, a5, a6, v30);
  v15 = v34;
  *(_QWORD *)(v56 + 16) = v34;
  if (v14[2] != v51)
  {
    v16 = v34;
    v17 = v34;
    goto LABEL_11;
  }
  v17 = v34;
  v16 = v34;
LABEL_31:
  if (v57 == v16 >> 14 && (a2 & 1) != 0)
  {
    swift_bridgeObjectRelease(a6);
    v37 = v52;
LABEL_40:
    swift_bridgeObjectRetain(v14);
    swift_release(v37);
    v36 = v56;
    goto LABEL_41;
  }
  if (v57 >= v17 >> 14)
  {
    v38 = String.subscript.getter(v17, v50, a5, a6);
    v40 = v39;
    v42 = v41;
    v44 = v43;
    swift_bridgeObjectRelease(a6);
    if ((swift_isUniquelyReferenced_nonNull_native(v14) & 1) == 0)
      v14 = sub_1000B31F8(0, v14[2] + 1, 1, v14);
    v46 = v14[2];
    v45 = v14[3];
    if (v46 >= v45 >> 1)
      v14 = sub_1000B31F8((_QWORD *)(v45 > 1), v46 + 1, 1, v14);
    v14[2] = v46 + 1;
    v47 = &v14[4 * v46];
    v47[4] = v38;
    v47[5] = v40;
    v47[6] = v42;
    v47[7] = v44;
    v37 = v52;
    *(_QWORD *)(v52 + 16) = v14;
    goto LABEL_40;
  }
LABEL_43:
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 754, 0);
  __break(1u);
LABEL_44:
  LOBYTE(v49) = 2;
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Must take zero or more splits", 29, 2, "Swift/Collection.swift", 22, v49, 1552, 0);
  __break(1u);
  return result;
}

uint64_t sub_100207F4C(unint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v7;
  int v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t result;

  v7 = *(_QWORD *)(a2 + 16);
  v8 = (v7 >> 14 == a1 >> 14) & a3;
  if (v8 == 1)
    return v8 ^ 1u;
  if (a1 >> 14 >= v7 >> 14)
  {
    v10 = String.subscript.getter(v7, a1, a5, a6);
    v12 = v11;
    v14 = v13;
    v16 = v15;
    v17 = *(_QWORD **)(a4 + 16);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v17);
    *(_QWORD *)(a4 + 16) = v17;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v17 = sub_1000B31F8(0, v17[2] + 1, 1, v17);
      *(_QWORD *)(a4 + 16) = v17;
    }
    v20 = v17[2];
    v19 = v17[3];
    if (v20 >= v19 >> 1)
    {
      v17 = sub_1000B31F8((_QWORD *)(v19 > 1), v20 + 1, 1, v17);
      *(_QWORD *)(a4 + 16) = v17;
    }
    v17[2] = v20 + 1;
    v21 = &v17[4 * v20];
    v21[4] = v10;
    v21[5] = v12;
    v21[6] = v14;
    v21[7] = v16;
    return v8 ^ 1u;
  }
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Range requires lowerBound <= upperBound", 39, 2, "Swift/Range.swift", 17, 2, 754, 0);
  __break(1u);
  return result;
}

void sub_1002080A4()
{
  __asm { BR              X11 }
}

_QWORD *sub_100208104@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *(*v3)(_QWORD **__return_ptr, uint64_t *, char *);
  uint64_t v4;
  _QWORD *result;
  unint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  _QWORD *v12;

  v7 = v4;
  LOWORD(v8) = a1;
  BYTE2(v8) = BYTE2(a1);
  HIBYTE(v8) = BYTE3(a1);
  v9 = BYTE4(a1);
  v10 = BYTE5(a1);
  v11 = BYTE6(a1);
  result = v3(&v12, &v7, (char *)&v7 + BYTE6(a1));
  if (!v2)
    result = v12;
  v6 = v8 | ((unint64_t)v9 << 32) | ((unint64_t)v10 << 40) | ((unint64_t)v11 << 48);
  *v1 = v7;
  v1[1] = v6;
  return result;
}

void sub_10020839C()
{
  __asm { BR              X11 }
}

_QWORD *sub_1002083FC@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *(*v3)(_QWORD **__return_ptr, uint64_t *, char *);
  uint64_t v4;
  _QWORD *result;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unsigned int v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  unsigned __int8 v12;

  v8 = v4;
  LOWORD(v9) = a1;
  BYTE2(v9) = BYTE2(a1);
  HIBYTE(v9) = BYTE3(a1);
  v10 = BYTE4(a1);
  v11 = BYTE5(a1);
  v12 = BYTE6(a1);
  result = v3(&v7, &v8, (char *)&v8 + BYTE6(a1));
  if (!v2)
    result = v7;
  v6 = v9 | ((unint64_t)v10 << 32) | ((unint64_t)v11 << 40) | ((unint64_t)v12 << 48);
  *v1 = v8;
  v1[1] = v6;
  return result;
}

void sub_10020868C(uint64_t a1)
{
  __asm { BR              X13 }
}

uint64_t sub_1002086F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&loc_10020873C
                                                            + *((int *)qword_100208A30 + (*(_QWORD *)(v3 + 8) >> 62))))(a1, a2, a3);
}

uint64_t sub_10020874C()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t result;
  uint64_t v5;
  unsigned int v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  unsigned __int8 v9;

  ((void (*)(uint64_t, _QWORD, uint64_t, unint64_t))Data.copyBytes(to:count:))(v2, BYTE6(v3), v0, v3);
  result = sub_10000E614(v0, v3);
  *v1 = v5;
  v1[1] = v6 | ((unint64_t)v7 << 32) | ((unint64_t)v8 << 40) | ((unint64_t)v9 << 48);
  return result;
}

void sub_100208A40()
{
  __asm { BR              X12 }
}

uint64_t sub_100208AA0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t (*v2)(uint64_t *, char *);
  _QWORD *v3;
  uint64_t result;
  unint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned __int8 v8;
  unsigned __int8 v9;
  unsigned __int8 v10;

  v6 = v1;
  LOWORD(v7) = a1;
  BYTE2(v7) = BYTE2(a1);
  HIBYTE(v7) = BYTE3(a1);
  v8 = BYTE4(a1);
  v9 = BYTE5(a1);
  v10 = BYTE6(a1);
  result = v2(&v6, (char *)&v6 + BYTE6(a1));
  v5 = v7 | ((unint64_t)v8 << 32) | ((unint64_t)v9 << 40) | ((unint64_t)v10 << 48);
  *v3 = v6;
  v3[1] = v5;
  return result;
}

void sub_100208C74()
{
  __asm { BR              X11 }
}

_QWORD *sub_100208CD4@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *(*v3)(_QWORD **__return_ptr, uint64_t *, char *);
  uint64_t v4;
  _QWORD *result;
  unint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  _QWORD *v12;

  v7 = v4;
  LOWORD(v8) = a1;
  BYTE2(v8) = BYTE2(a1);
  HIBYTE(v8) = BYTE3(a1);
  v9 = BYTE4(a1);
  v10 = BYTE5(a1);
  v11 = BYTE6(a1);
  result = v3(&v12, &v7, (char *)&v7 + BYTE6(a1));
  if (!v2)
    result = v12;
  v6 = v8 | ((unint64_t)v9 << 32) | ((unint64_t)v10 << 40) | ((unint64_t)v11 << 48);
  *v1 = v7;
  v1[1] = v6;
  return result;
}

void sub_100208F5C(int *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int16 v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;
  char v15;

  Data.InlineSlice.ensureUniqueReference()();
  v6 = *a1;
  if (a1[1] < (int)v6)
  {
    __break(1u);
  }
  else
  {
    v7 = __DataStorage._bytes.getter();
    if (!v7)
    {
      __break(1u);
      JUMPOUT(0x100209098);
    }
    v8 = v7;
    v9 = __DataStorage._offset.getter();
    if (!__OFSUB__(v6, v9))
    {
      v10 = v8 + v6 - v9;
      __DataStorage._length.getter();
      v11 = *(_WORD *)(a2 + 10);
      v12 = *(_WORD *)(a2 + 20);
      v13 = *(_QWORD *)(a2 + 12);
      v14 = *(_QWORD *)(a2 + 2);
      v15 = *(_BYTE *)(a2 + 22);
      *(_WORD *)v10 = *(_WORD *)a2;
      *(_QWORD *)(v10 + 2) = v14;
      *(_WORD *)(v10 + 10) = v11;
      *(_QWORD *)(v10 + 12) = v13;
      *(_WORD *)(v10 + 20) = v12;
      *(_BYTE *)(v10 + 22) = v15;
      __asm { BR              X10 }
    }
  }
  __break(1u);
  JUMPOUT(0x10020908CLL);
}

void sub_1002090A8(void (*a1)(uint64_t, uint64_t))
{
  int *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  Data.InlineSlice.ensureUniqueReference()();
  v3 = *v1;
  v4 = v1[1];
  if ((int)v4 < (int)v3)
  {
    __break(1u);
    goto LABEL_9;
  }
  v5 = __DataStorage._bytes.getter();
  if (!v5)
  {
LABEL_10:
    __break(1u);
    return;
  }
  v6 = v5;
  v7 = __DataStorage._offset.getter();
  v8 = v3 - v7;
  if (__OFSUB__(v3, v7))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v9 = v4 - v3;
  v10 = __DataStorage._length.getter();
  if (v10 >= v9)
    v11 = v9;
  else
    v11 = v10;
  a1(v6 + v8, v6 + v8 + v11);
}

char *sub_100209150(uint64_t a1, uint64_t a2, _QWORD *(*a3)(uint64_t *__return_ptr, char *, char *))
{
  uint64_t v3;
  char *result;
  char *v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  result = (char *)__DataStorage._bytes.getter();
  if (!result)
    goto LABEL_12;
  v8 = result;
  result = (char *)__DataStorage._offset.getter();
  v9 = a1 - (_QWORD)result;
  if (__OFSUB__(a1, result))
  {
    __break(1u);
    goto LABEL_11;
  }
  v10 = __OFSUB__(a2, a1);
  v11 = a2 - a1;
  if (v10)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    return result;
  }
  v12 = __DataStorage._length.getter();
  if (v12 >= v11)
    v13 = v11;
  else
    v13 = v12;
  result = (char *)a3(&v14, &v8[v9], &v8[v9 + v13]);
  if (!v3)
    return (char *)v14;
  return result;
}

char *sub_100209200(uint64_t a1, uint64_t a2, _QWORD *(*a3)(uint64_t *__return_ptr, char *, char *))
{
  uint64_t v3;
  char *result;
  char *v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  result = (char *)__DataStorage._bytes.getter();
  if (!result)
    goto LABEL_12;
  v8 = result;
  result = (char *)__DataStorage._offset.getter();
  v9 = a1 - (_QWORD)result;
  if (__OFSUB__(a1, result))
  {
    __break(1u);
    goto LABEL_11;
  }
  v10 = __OFSUB__(a2, a1);
  v11 = a2 - a1;
  if (v10)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    return result;
  }
  v12 = __DataStorage._length.getter();
  if (v12 >= v11)
    v13 = v11;
  else
    v13 = v12;
  result = (char *)a3(&v14, &v8[v9], &v8[v9 + v13]);
  if (!v3)
    return (char *)v14;
  return result;
}

char *sub_1002092AC(uint64_t a1, uint64_t a2, _QWORD *(*a3)(uint64_t *__return_ptr, char *, char *))
{
  uint64_t v3;
  char *result;
  char *v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  result = (char *)__DataStorage._bytes.getter();
  if (!result)
    goto LABEL_12;
  v8 = result;
  result = (char *)__DataStorage._offset.getter();
  v9 = a1 - (_QWORD)result;
  if (__OFSUB__(a1, result))
  {
    __break(1u);
    goto LABEL_11;
  }
  v10 = __OFSUB__(a2, a1);
  v11 = a2 - a1;
  if (v10)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    return result;
  }
  v12 = __DataStorage._length.getter();
  if (v12 >= v11)
    v13 = v11;
  else
    v13 = v12;
  result = (char *)a3(&v14, &v8[v9], &v8[v9 + v13]);
  if (!v3)
    return (char *)v14;
  return result;
}

uint64_t sub_100209354(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3();
}

uint64_t sub_100209374(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = __DataStorage._bytes.getter();
  v5 = result;
  if (result)
  {
    result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }
    v5 += a1 - result;
  }
  v6 = __OFSUB__(a2, a1);
  v7 = a2 - a1;
  if (v6)
  {
    __break(1u);
    goto LABEL_13;
  }
  v8 = __DataStorage._length.getter();
  if (v8 >= v7)
    v9 = v7;
  else
    v9 = v8;
  v10 = v5 + v9;
  if (v5)
    v11 = v10;
  else
    v11 = 0;
  return Data._Representation.append(contentsOf:)(v5, v11);
}

uint64_t sub_100209404(uint64_t a1, uint64_t a2)
{
  return Data._Representation.append(contentsOf:)(a1, a2);
}

uint64_t sub_10020942C(unint64_t a1, unint64_t a2, _QWORD *a3, uint64_t *a4)
{
  return sub_1001F12F8(a1, a2, a3, *a4);
}

uint64_t sub_100209444@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *v3;

  return sub_1002000CC(a1, a2, v3[2], v3[3], v3[4], a3);
}

uint64_t sub_100209460(uint64_t *a1)
{
  return sub_10020A9AC(a1) & 1;
}

uint64_t sub_100209478(_QWORD *a1)
{
  uint64_t *v1;

  return sub_100200300(a1, v1[5], v1[2], v1[3]) & 1;
}

uint64_t sub_100209498(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t result;
  _BYTE v6[24];

  v2 = a1[1];
  v3 = *a2;
  v4 = *a1 == 0x7478655F747665 && v2 == 0xE700000000000000;
  if (!v4
    && (_stringCompareWithSmolCheck(_:_:expecting:)(0x7478655F747665, 0xE700000000000000, *a1, v2, 0) & 1) == 0)
  {
    return 1;
  }
  swift_beginAccess(v3 + 80, v6, 1, 0);
  result = 0;
  *(_QWORD *)(v3 + 80) |= 1uLL;
  return result;
}

void sub_100209534(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  sub_100205D48(a1, a2, *(_QWORD *)a3, *(_QWORD *)(a3 + 8), *(_QWORD *)(a3 + 16), *(unsigned int *)(a3 + 24) | ((unint64_t)*(unsigned __int16 *)(a3 + 28) << 32), a4, a5, a6);
}

uint64_t sub_10020957C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v11;
  unsigned int v12;
  _QWORD v13[3];
  uint64_t v14;
  uint64_t v15;

  v3 = a1[3];
  v4 = a1[4];
  sub_10003259C(a1, v3);
  dispatch thunk of Decoder.unkeyedContainer()(v13, v3, v4);
  if (v1)
    return sub_100014430(a1);
  v5 = v14;
  v6 = v15;
  sub_100034C68((uint64_t)v13, v14);
  v7 = UnkeyedDecodingContainer.decodeData(with:)(48, v5, v6);
  v9 = v8;
  sub_100213080(v7, v8);
  sub_10000E614(v7, v9);
  sub_100014430(v13);
  sub_100014430(a1);
  return bswap64(v12 | ((unint64_t)v11 << 32));
}

void sub_100209674(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __asm { BR              X10 }
}

void sub_100209830(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[3];
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v26 = a7;
  v27 = a4;
  v23 = a6;
  v24 = a1;
  v28 = a3;
  v25 = a2;
  v21 = a9;
  v22 = a10;
  v30 = a11;
  v20 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a11 + 8) + 24) + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v20, a8, &protocol requirements base descriptor for ExpressibleByIntegerLiteral, &associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  v14 = __chkstk_darwin(AssociatedTypeWitness);
  v29 = *(_QWORD *)(a8 - 8);
  v15 = __chkstk_darwin(v14);
  v16 = __chkstk_darwin(v15);
  v19[2] = (char *)v19 - v17;
  v18 = __chkstk_darwin(v16);
  __chkstk_darwin(v18);
  __asm { BR              X9 }
}

uint64_t sub_10020997C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  void (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  unint64_t v18;
  char v19;
  void (*v20)(uint64_t, uint64_t);
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t AssociatedConformanceWitness;
  char v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t);
  void (*v28)(uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v37)(uint64_t, uint64_t);

  *(_QWORD *)(v10 - 120) = BYTE6(v2);
  *(_QWORD *)(v10 - 192) = v0;
  *(_QWORD *)(v10 - 184) = v2;
  dispatch thunk of static FixedWidthInteger.max.getter(v3, *(_QWORD *)(v10 - 72));
  if ((dispatch thunk of static BinaryInteger.isSigned.getter(v3, v1) & 1) != 0)
  {
    if (dispatch thunk of BinaryInteger.bitWidth.getter(v3, v1) < 64)
    {
      v11 = dispatch thunk of BinaryInteger._lowWord.getter(v3, v1);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 104) + 8))(v9, v3);
LABEL_19:
      v22 = v11 < *(_QWORD *)(v10 - 120);
LABEL_20:
      v17 = *(_QWORD *)(v10 - 112);
      if (v22)
        goto LABEL_22;
      goto LABEL_21;
    }
    *(_QWORD *)(v10 - 96) = *(_QWORD *)(v10 - 120);
    v18 = sub_100035EE0();
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(v10 - 96, &type metadata for Int, v18, v3, v1);
    v19 = dispatch thunk of static Comparable.< infix(_:_:)(v9, v8, v3, *(_QWORD *)(*(_QWORD *)(v1 + 32) + 8));
    v20 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 104) + 8);
    v20(v8, v3);
    goto LABEL_16;
  }
  *(_QWORD *)(v10 - 216) = v6;
  v12 = dispatch thunk of static BinaryInteger.isSigned.getter(v3, v1);
  v13 = dispatch thunk of BinaryInteger.bitWidth.getter(v3, v1);
  if ((v12 & 1) != 0)
  {
    if (v13 <= 64)
    {
      v23 = *(_QWORD *)(v10 - 200);
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v23, v3, v7, &protocol requirements base descriptor for ExpressibleByIntegerLiteral, &associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
      dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)(&unk_10033A248, 256, v7, AssociatedConformanceWitness);
      dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)(v5, v3, v23);
      v25 = dispatch thunk of static Comparable.< infix(_:_:)(v9, v8, v3, *(_QWORD *)(*(_QWORD *)(v1 + 32) + 8));
      v26 = *(_QWORD *)(v10 - 104);
      v27 = *(void (**)(uint64_t, uint64_t))(v26 + 8);
      v27(v8, v3);
      v28 = *(void (**)(uint64_t, uint64_t, uint64_t))(v26 + 16);
      v29 = *(_QWORD *)(v10 - 208);
      v28(v29, v9, v3);
      if ((v25 & 1) != 0)
      {
        v27(v29, v3);
        v27(v9, v3);
        goto LABEL_22;
      }
      v11 = dispatch thunk of BinaryInteger._lowWord.getter(v3, v1);
      v27(v29, v3);
      v27(v9, v3);
      goto LABEL_19;
    }
    *(_QWORD *)(v10 - 96) = *(_QWORD *)(v10 - 120);
    v14 = sub_100035EE0();
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(v10 - 96, &type metadata for Int, v14, v3, v1);
    v15 = dispatch thunk of static Comparable.< infix(_:_:)(v9, v8, v3, *(_QWORD *)(*(_QWORD *)(v1 + 32) + 8));
    v16 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 104) + 8);
    v16(v8, v3);
    v16(v9, v3);
    v17 = *(_QWORD *)(v10 - 112);
    if ((v15 & 1) != 0)
      goto LABEL_22;
  }
  else
  {
    if (v13 < 64)
    {
      v21 = dispatch thunk of BinaryInteger._lowWord.getter(v3, v1);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 104) + 8))(v9, v3);
      v22 = v21 < *(_QWORD *)(v10 - 120);
      goto LABEL_20;
    }
    v30 = *(_QWORD *)(v10 - 104);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v30 + 16))(v4, v9, v3);
    v31 = *(_QWORD *)(v10 - 120);
    *(_QWORD *)(v10 - 96) = v31;
    if (v31 > 0)
    {
      v32 = sub_100035EE0();
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(v10 - 96, &type metadata for Int, v32, v3, v1);
      v19 = dispatch thunk of static Comparable.< infix(_:_:)(v4, v8, v3, *(_QWORD *)(*(_QWORD *)(v1 + 32) + 8));
      v20 = *(void (**)(uint64_t, uint64_t))(v30 + 8);
      v20(v8, v3);
      v20(v4, v3);
LABEL_16:
      v20(v9, v3);
      v17 = *(_QWORD *)(v10 - 112);
      if ((v19 & 1) != 0)
        goto LABEL_22;
      goto LABEL_21;
    }
    v37 = *(void (**)(uint64_t, uint64_t))(v30 + 8);
    v37(v4, v3);
    v37(v9, v3);
    v17 = *(_QWORD *)(v10 - 112);
  }
LABEL_21:
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v10 - 136) - 8) + 64) >= v17)
    __asm { BR              X11 }
LABEL_22:
  v33 = sub_100012C84();
  v34 = swift_allocError(&type metadata for WiFiError, v33, 0, 0);
  *(_OWORD *)v35 = xmmword_10033B1E0;
  *(_BYTE *)(v35 + 16) = 0;
  return swift_willThrow(v34);
}

void sub_100209EB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  __asm { BR              X10 }
}

void sub_10020A0B8(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v16;
  uint64_t v17;
  char v18;

  v16 = *a2;
  v17 = sub_1002039F0(a2);
  if ((v18 & 1) != 0)
    __break(1u);
  else
    sub_100209830(a1, (uint64_t)a2, v17, a3, a4, a5, *(_QWORD *)(v16 + class metadata base offset for WritableKeyPath), *(_QWORD *)(v16 + class metadata base offset for WritableKeyPath + 8), a6, a7, a8);
}

uint64_t sub_10020A168()
{
  uint64_t v0;

  sub_100014430((_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 56, 7);
}

unint64_t sub_10020A18C()
{
  unint64_t result;

  result = qword_10040B7D0;
  if (!qword_10040B7D0)
  {
    result = swift_getWitnessTable(byte_10035C5C8, &type metadata for BroadcomEventMessage);
    atomic_store(result, (unint64_t *)&qword_10040B7D0);
  }
  return result;
}

void sub_10020A1D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __asm { BR              X10 }
}

uint64_t sub_10020A434(int a1)
{
  if ((a1 - 1) > 0x10)
    return 15;
  else
    return byte_10035C668[a1 - 1];
}

uint64_t sub_10020A458(uint64_t result)
{
  *(_BYTE *)(result + 361) = 4;
  return result;
}

unint64_t sub_10020A468()
{
  unint64_t result;

  result = qword_10040B7E8;
  if (!qword_10040B7E8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for BroadcomCapabilities, &type metadata for BroadcomCapabilities);
    atomic_store(result, (unint64_t *)&qword_10040B7E8);
  }
  return result;
}

unint64_t sub_10020A4B0()
{
  unint64_t result;

  result = qword_10040B7F0;
  if (!qword_10040B7F0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for BroadcomCapabilities, &type metadata for BroadcomCapabilities);
    atomic_store(result, (unint64_t *)&qword_10040B7F0);
  }
  return result;
}

unint64_t sub_10020A4F8()
{
  unint64_t result;

  result = qword_10040B7F8;
  if (!qword_10040B7F8)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for BroadcomCapabilities, &type metadata for BroadcomCapabilities);
    atomic_store(result, (unint64_t *)&qword_10040B7F8);
  }
  return result;
}

unint64_t sub_10020A540()
{
  unint64_t result;

  result = qword_10040B800;
  if (!qword_10040B800)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for BroadcomCapabilities, &type metadata for BroadcomCapabilities);
    atomic_store(result, (unint64_t *)&qword_10040B800);
  }
  return result;
}

uint64_t sub_10020A584()
{
  return sub_100011DE4(&qword_10040B808, type metadata accessor for AppleDevice, (uint64_t)&protocol conformance descriptor for AppleDevice);
}

uint64_t sub_10020A5B0(uint64_t a1)
{
  uint64_t result;

  result = sub_100011DE4(&qword_10040B840, type metadata accessor for AppleBroadcomDriver, (uint64_t)&protocol conformance descriptor for AppleBroadcomDriver);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t type metadata accessor for AppleBroadcomDriver(uint64_t a1)
{
  uint64_t result;

  result = qword_10040B8D8;
  if (!qword_10040B8D8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AppleBroadcomDriver);
  return result;
}

uint64_t sub_10020A628()
{
  return sub_100011770(&qword_10040B848, &qword_10040B850, "u<\n");
}

uint64_t sub_10020A654@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = AppleBroadcomDriver.capabilities.getter();
  *a1 = result;
  return result;
}

uint64_t sub_10020A67C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  v3 = *(_QWORD *)(*(_QWORD *)a2 + 72);
  *(_QWORD *)(*(_QWORD *)a2 + 72) = v2;
  swift_bridgeObjectRetain(v2);
  return swift_bridgeObjectRelease(v3);
}

ValueMetadata *type metadata accessor for BroadcomCapabilities()
{
  return &type metadata for BroadcomCapabilities;
}

uint64_t sub_10020A6BC()
{
  return type metadata accessor for AppleBroadcomDriver(0);
}

uint64_t sub_10020A6C4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[7];

  v4[0] = &unk_10035C548;
  v4[1] = &unk_10035C560;
  v4[2] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[3] = &unk_10035C578;
  v4[4] = &unk_10035C590;
  v4[5] = (char *)&value witness table for Builtin.Int64 + 64;
  result = type metadata accessor for Logger(319);
  if (v3 <= 0x3F)
  {
    v4[6] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 7, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for BroadcomEventMessage()
{
  return &type metadata for BroadcomEventMessage;
}

char *sub_10020A784(char *result)
{
  _QWORD *v1;
  char *v2;
  const char *v3;
  size_t v4;

  v2 = (char *)v1[2];
  if (v2)
  {
    v3 = result;
    v4 = String.count.getter(v1[4], v1[5]);
    return strncpy(v2, v3, v4);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_10020A7D4(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  sub_100209534(a1, a2, v2[2], v2[3], v2[4], v2[5]);
}

void sub_10020A7F4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_100205B84(a1, a2, **(_QWORD **)(v2 + 16), *(unsigned int *)(*(_QWORD *)(v2 + 16) + 8) | ((unint64_t)*(unsigned __int16 *)(*(_QWORD *)(v2 + 16) + 12) << 32), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40));
}

void sub_10020A824(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  _OWORD v8[2];
  __int16 v9;

  v4 = v2[2];
  v3 = v2[3];
  v5 = v2[4];
  v6 = v2[5];
  v7 = *(_OWORD *)(v4 + 16);
  v8[0] = *(_OWORD *)v4;
  v8[1] = v7;
  v9 = *(_WORD *)(v4 + 32);
  sub_100205A08(a1, a2, (uint64_t)v8, v3, v5, v6);
}

uint64_t sub_10020A860(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for NANAttribute(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_10020A8A4(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  sub_100205F6C(a1, a2, v2[8], v2[9], v2[10], v2[11], v2[12], v2[2], v2[3]);
}

uint64_t sub_10020A8E0(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;

  return sub_100204F34(a1, *(_QWORD *)(v2 + 48), *(_QWORD *)(v2 + 56), *(_DWORD *)(v2 + 64), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), a2);
}

uint64_t sub_10020A914(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;

  return sub_10020587C(a1, a2, *(_QWORD *)(v3 + 48), *(unsigned int *)(v3 + 56), *(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24), *(_QWORD *)(v3 + 32), *(_QWORD *)(v3 + 40), a3);
}

uint64_t sub_10020A948()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10020A96C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_10020A97C(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  sub_1001FFF58(a1, a2, **(_QWORD ***)(v3 + 16));
  if (!v4)
  {
    *a3 = v6;
    a3[1] = v7;
  }
}

uint64_t sub_10020A9AC(uint64_t *a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD **)(v1 + 16);
  v4 = *a1;
  v5 = a1[1];
  v6 = v3[1];
  if (v4 == *v3 && v5 == v6)
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *v3, v6, 0) & 1;
}

uint64_t sub_10020AA00(_QWORD *a1)
{
  uint64_t v1;

  return sub_100209498(a1, *(uint64_t **)(v1 + 16)) & 1;
}

uint64_t BroadcomDriver<>.elect(peer:)(uint64_t a1)
{
  return NANBitmap.Channel.operatingClass.getter(a1);
}

uint64_t String.init<A>(cStyleString:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[6];
  uint64_t v10;
  unint64_t v11;

  result = 0;
  if (*(uint64_t *)(*(_QWORD *)(a2 - 8) + 64) >= 2)
  {
    __chkstk_darwin();
    v9[2] = v5;
    v6 = sub_100012C44(&qword_10040A918);
    sub_100177494(a1, (uint64_t)sub_10020B4B4, (uint64_t)v9, a2, (uint64_t)&type metadata for Never, v6, (uint64_t)&protocol witness table for Never, v7);
    if (v11)
    {
      result = v10;
      v8 = HIBYTE(v11) & 0xF;
      if ((v11 & 0x2000000000000000) == 0)
        v8 = v10 & 0xFFFFFFFFFFFFLL;
      if (!v8)
      {
        swift_bridgeObjectRelease(v11);
        return 0;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t String.copy<A, B, C>(to:destinationField:lengthField:)(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v19;
  _QWORD *v20;

  v9 = *(_QWORD *)(class metadata base offset for WritableKeyPath + *a3 + 8);
  v10 = __chkstk_darwin();
  v12 = (char *)&v19 - v11;
  v20 = _sSS7CoreP2PE4copy2to16destinationFieldyxz_s15WritableKeyPathCyxq_Gtr0_lF_0(v10, v13, v14, v15);
  v16 = *(_QWORD *)(a6 + 8);
  v17 = sub_100035EE0();
  dispatch thunk of BinaryInteger.init<A>(_:)(&v20, &type metadata for Int, v17, v9, v16);
  return swift_setAtWritableKeyPath(a1, a3, v12);
}

uint64_t String.hexData.getter(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  Swift::String v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  __n128 v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  Swift::String v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  _QWORD *countAndFlagsBits;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  Swift::String v38;

  v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (v2)
  {
    v5._countAndFlagsBits = 30768;
    v5._object = (void *)0xE200000000000000;
    if (String.hasPrefix(_:)(v5))
    {
      swift_bridgeObjectRetain(a2);
      v6 = String.count.getter(30768, 0xE200000000000000);
      v7 = sub_10020B8DC(v6, a1, a2);
      v9 = v8;
      v11 = v10;
      v13 = v12;
      swift_bridgeObjectRelease(a2);
      v14 = static String._fromSubstring(_:)(v7, v9, v11, v13);
      v16 = v15;
      v17 = swift_bridgeObjectRelease(v13);
      v18 = String.hexData.getter(v14, v16, v17);
      v19 = v16;
LABEL_15:
      swift_bridgeObjectRelease(v19);
      return v18;
    }
    v38._countAndFlagsBits = a1;
    v38._object = (void *)a2;
    v36 = 58;
    v37 = 0xE100000000000000;
    v20 = sub_10001C920();
    if ((StringProtocol.contains<A>(_:)(&v36, &type metadata for String, &type metadata for String, v20, v20) & 1) != 0)
    {
      v21 = String.lowercased()();
      v38 = v21;
      v36 = 58;
      v37 = 0xE100000000000000;
      v22 = StringProtocol.components<A>(separatedBy:)(&v36, &type metadata for String, &type metadata for String, v20, v20);
      swift_bridgeObjectRelease(v21._object);
      v23 = *(_QWORD *)(v22 + 16);
      if (!v23)
      {
        countAndFlagsBits = _swiftEmptyArrayStorage;
LABEL_14:
        swift_bridgeObjectRelease(v22);
        v18 = sub_1001068EC((uint64_t)countAndFlagsBits);
        v19 = countAndFlagsBits;
        goto LABEL_15;
      }
      swift_bridgeObjectRetain(v22);
      v35 = v22;
      v24 = (unint64_t *)(v22 + 40);
      countAndFlagsBits = _swiftEmptyArrayStorage;
      while (1)
      {
        v26 = *(v24 - 1);
        v27 = *v24;
        swift_bridgeObjectRetain(*v24);
        sub_10020B59C(v26, v27);
        v29 = v28;
        if (*(_QWORD *)(v28 + 16) != 1)
          break;
        v24 += 2;
        v38._countAndFlagsBits = (uint64_t)countAndFlagsBits;
        swift_bridgeObjectRetain(countAndFlagsBits);
        sub_1001A7594(v29);
        swift_bridgeObjectRelease(countAndFlagsBits);
        swift_bridgeObjectRelease(v27);
        countAndFlagsBits = (_QWORD *)v38._countAndFlagsBits;
        if (!--v23)
        {
          v22 = v35;
          swift_bridgeObjectRelease(v35);
          goto LABEL_14;
        }
      }
      swift_bridgeObjectRelease(v28);
      v30 = sub_100012C84();
      v31 = swift_allocError(&type metadata for WiFiError, v30, 0, 0);
      *(_OWORD *)v32 = xmmword_100337850;
      *(_BYTE *)(v32 + 16) = 2;
      swift_willThrow(v31);
      swift_bridgeObjectRelease(v27);
      swift_bridgeObjectRelease_n(v35, 2);
      swift_bridgeObjectRelease(countAndFlagsBits);
      swift_errorRelease(v31);
    }
    String.nonSeparatedHexData.getter();
    return v33;
  }
  return 0;
}

uint64_t sub_10020AEB0()
{
  void *v0;
  uint64_t v1;
  uint64_t result;

  v0 = (void *)sub_100031BF4((uint64_t)&off_1003D49F0);
  v1 = sub_100012C44(&qword_10040B9B8);
  result = swift_arrayDestroy(&unk_1003D4A10, 16, v1);
  off_10040B9B0 = v0;
  return result;
}

uint64_t String.colonSeparatedHexData.getter()
{
  Swift::String v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  _QWORD *countAndFlagsBits;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[2];
  Swift::String v16;

  v0 = String.lowercased()();
  v16 = v0;
  v15[0] = 58;
  v15[1] = 0xE100000000000000;
  v1 = sub_10001C920();
  v2 = StringProtocol.components<A>(separatedBy:)(v15, &type metadata for String, &type metadata for String, v1, v1);
  swift_bridgeObjectRelease(v0._object);
  v3 = *(_QWORD *)(v2 + 16);
  if (v3)
  {
    swift_bridgeObjectRetain(v2);
    v4 = (unint64_t *)(v2 + 40);
    countAndFlagsBits = _swiftEmptyArrayStorage;
    while (1)
    {
      v6 = *(v4 - 1);
      v7 = *v4;
      swift_bridgeObjectRetain(*v4);
      sub_10020B59C(v6, v7);
      v9 = v8;
      if (*(_QWORD *)(v8 + 16) != 1)
        break;
      v4 += 2;
      v16._countAndFlagsBits = (uint64_t)countAndFlagsBits;
      swift_bridgeObjectRetain(countAndFlagsBits);
      sub_1001A7594(v9);
      swift_bridgeObjectRelease(countAndFlagsBits);
      swift_bridgeObjectRelease(v7);
      countAndFlagsBits = (_QWORD *)v16._countAndFlagsBits;
      if (!--v3)
      {
        swift_bridgeObjectRelease(v2);
        goto LABEL_8;
      }
    }
    swift_bridgeObjectRelease(v8);
    v11 = sub_100012C84();
    v12 = swift_allocError(&type metadata for WiFiError, v11, 0, 0);
    *(_OWORD *)v13 = xmmword_100337850;
    *(_BYTE *)(v13 + 16) = 2;
    swift_willThrow(v12);
    swift_bridgeObjectRelease(v7);
    swift_bridgeObjectRelease_n(v2, 2);
    swift_bridgeObjectRelease(countAndFlagsBits);
    swift_errorRelease(v12);
    return 0;
  }
  else
  {
    countAndFlagsBits = _swiftEmptyArrayStorage;
LABEL_8:
    swift_bridgeObjectRelease(v2);
    v10 = sub_1001068EC((uint64_t)countAndFlagsBits);
    swift_bridgeObjectRelease(countAndFlagsBits);
  }
  return v10;
}

void String.nonSeparatedHexData.getter()
{
  Swift::String v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  _QWORD *countAndFlagsBits;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[2];
  Swift::String v13;

  v0 = String.lowercased()();
  v13 = v0;
  v12[0] = 0;
  v12[1] = 0xE000000000000000;
  v1 = sub_10001C920();
  v2 = StringProtocol.components<A>(separatedBy:)(v12, &type metadata for String, &type metadata for String, v1, v1);
  swift_bridgeObjectRelease(v0._object);
  v3 = *(_QWORD *)(v2 + 16);
  if (v3)
  {
    swift_bridgeObjectRetain(v2);
    v4 = (unint64_t *)(v2 + 40);
    countAndFlagsBits = _swiftEmptyArrayStorage;
    do
    {
      v6 = *(v4 - 1);
      v7 = *v4;
      swift_bridgeObjectRetain(*v4);
      sub_10020B59C(v6, v7);
      v9 = v8;
      v4 += 2;
      v13._countAndFlagsBits = (uint64_t)countAndFlagsBits;
      swift_bridgeObjectRetain(countAndFlagsBits);
      sub_1001A7594(v9);
      swift_bridgeObjectRelease(countAndFlagsBits);
      swift_bridgeObjectRelease(v7);
      countAndFlagsBits = (_QWORD *)v13._countAndFlagsBits;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease(v2);
  }
  else
  {
    countAndFlagsBits = _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRelease(v2);
  sub_1001068EC((uint64_t)countAndFlagsBits);
  v11 = v10;
  swift_bridgeObjectRelease(countAndFlagsBits);
  __asm { BR              X10 }
}

uint64_t String.interfaceIdentifierData.getter()
{
  Swift::String v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  _QWORD *countAndFlagsBits;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[2];
  Swift::String v16;

  v0 = String.lowercased()();
  v16 = v0;
  v15[0] = 58;
  v15[1] = 0xE100000000000000;
  v1 = sub_10001C920();
  v2 = StringProtocol.components<A>(separatedBy:)(v15, &type metadata for String, &type metadata for String, v1, v1);
  swift_bridgeObjectRelease(v0._object);
  v3 = *(_QWORD *)(v2 + 16);
  if (v3)
  {
    swift_bridgeObjectRetain(v2);
    v4 = (unint64_t *)(v2 + 40);
    countAndFlagsBits = _swiftEmptyArrayStorage;
    while (1)
    {
      v6 = *(v4 - 1);
      v7 = *v4;
      swift_bridgeObjectRetain(*v4);
      sub_10020B59C(v6, v7);
      v9 = v8;
      if (*(_QWORD *)(v8 + 16) != 2)
        break;
      v4 += 2;
      v16._countAndFlagsBits = (uint64_t)countAndFlagsBits;
      swift_bridgeObjectRetain(countAndFlagsBits);
      sub_1001A7594(v9);
      swift_bridgeObjectRelease(countAndFlagsBits);
      swift_bridgeObjectRelease(v7);
      countAndFlagsBits = (_QWORD *)v16._countAndFlagsBits;
      if (!--v3)
      {
        swift_bridgeObjectRelease(v2);
        goto LABEL_8;
      }
    }
    swift_bridgeObjectRelease(v8);
    v11 = sub_100012C84();
    v12 = swift_allocError(&type metadata for WiFiError, v11, 0, 0);
    *(_OWORD *)v13 = xmmword_100337850;
    *(_BYTE *)(v13 + 16) = 2;
    swift_willThrow(v12);
    swift_bridgeObjectRelease(v7);
    swift_bridgeObjectRelease_n(v2, 2);
    swift_bridgeObjectRelease(countAndFlagsBits);
    swift_errorRelease(v12);
    return 0;
  }
  else
  {
    countAndFlagsBits = _swiftEmptyArrayStorage;
LABEL_8:
    swift_bridgeObjectRelease(v2);
    v10 = sub_1001068EC((uint64_t)countAndFlagsBits);
    swift_bridgeObjectRelease(countAndFlagsBits);
  }
  return v10;
}

_QWORD *_sSS7CoreP2PE4copy2to16destinationFieldyxz_s15WritableKeyPathCyxq_Gtr0_lF_0(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *result;
  _QWORD v6[6];

  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(class metadata base offset for WritableKeyPath + *a2 + 8) - 8) + 64);
  v6[2] = a1;
  v6[3] = a2;
  v6[4] = v4;
  result = sub_100047824((_QWORD *(*)(uint64_t *__return_ptr, _QWORD *))sub_10020B978, (uint64_t)v6, a3, a4);
  if ((uint64_t)result >= v4)
  {
    result = (_QWORD *)(v4 - 1);
    if (__OFSUB__(v4, 1))
      __break(1u);
  }
  return result;
}

uint64_t sub_10020B4B4@<X0>(uint64_t result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;

  if (result)
  {
    v4 = *(_QWORD *)(v2 + 16);
    v5 = __OFSUB__(v4, 1);
    v6 = v4 - 1;
    if (!v5)
    {
      *(_BYTE *)(result + v6) = 0;
      result = String.init(cString:)(result);
      *a2 = result;
      a2[1] = v7;
      return result;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_10020B4FC(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t (*v5)(_BYTE *, _QWORD);
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[4];
  _BYTE v10[32];

  v4 = *a3;
  v9[2] = a1;
  v9[3] = a4;
  v5 = (uint64_t (*)(_BYTE *, _QWORD))swift_modifyAtWritableKeyPath(v10, a2, a3);
  sub_100177494(v6, (uint64_t)sub_10020B994, (uint64_t)v9, *(_QWORD *)(class metadata base offset for WritableKeyPath + v4 + 8), (uint64_t)&type metadata for Never, (uint64_t)&type metadata for Int, (uint64_t)&protocol witness table for Never, v7);
  return v5(v10, 0);
}

void sub_10020B59C(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  char v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (v2)
  {
    v5 = 4 * v2;
    v6 = 7;
    if (((a2 >> 60) & ((a1 & 0x800000000000000) == 0)) != 0)
      v6 = 11;
    v40 = v6 | (v2 << 16);
    v7 = _swiftEmptyArrayStorage;
    v8 = 15;
    while (1)
    {
      v9 = String.index(_:offsetBy:limitedBy:)(v8, 1, v40, a1, a2);
      if ((v10 & 1) != 0)
        break;
      v11 = v9;
      if (v9 >> 14 == v5)
        break;
      if (qword_100404238 != -1)
        swift_once(&qword_100404238, sub_10020AEB0);
      v12 = off_10040B9B0;
      v13 = String.subscript.getter(v8, a1, a2);
      v15 = v14;
      if (!v12[2]
        || (v16 = sub_10002E06C(v13, v14), (v17 & 1) == 0)
        || (v18 = *(_BYTE *)(v12[7] + v16),
            swift_bridgeObjectRelease(v15),
            v19 = off_10040B9B0,
            v20 = String.subscript.getter(v11, a1, a2),
            v15 = v21,
            !v19[2])
        || (v22 = sub_10002E06C(v20, v21), (v23 & 1) == 0))
      {
        swift_bridgeObjectRelease(v7);
        v27 = (_QWORD *)v15;
LABEL_22:
        swift_bridgeObjectRelease(v27);
        v28 = sub_100012C84();
        v29 = swift_allocError(&type metadata for WiFiError, v28, 0, 0);
        *(_OWORD *)v30 = xmmword_100337850;
        *(_BYTE *)(v30 + 16) = 2;
        swift_willThrow(v29);
        return;
      }
      v24 = *(_BYTE *)(v19[7] + v22);
      swift_bridgeObjectRelease(v15);
      if ((swift_isUniquelyReferenced_nonNull_native(v7) & 1) == 0)
        v7 = sub_1000B1920(0, v7[2] + 1, 1, v7);
      v26 = v7[2];
      v25 = v7[3];
      if (v26 >= v25 >> 1)
        v7 = sub_1000B1920((_QWORD *)(v25 > 1), v26 + 1, 1, v7);
      v7[2] = v26 + 1;
      *((_BYTE *)v7 + v26 + 32) = v24 | (16 * v18);
      v8 = String.index(_:offsetBy:)(v8, 2, a1, a2);
      if (v5 == v8 >> 14)
        return;
    }
    if (String.count.getter(a1, a2) != 1)
    {
      v27 = v7;
      goto LABEL_22;
    }
    if (qword_100404238 != -1)
      swift_once(&qword_100404238, sub_10020AEB0);
    v31 = off_10040B9B0;
    swift_bridgeObjectRetain(a2);
    v32 = sub_1000FB724(a1, a2);
    v34 = v33;
    swift_bridgeObjectRelease(a2);
    if (v34)
    {
      swift_bridgeObjectRelease(v7);
      if (!v31[2] || (v35 = sub_10002E06C(v32, v34), (v36 & 1) == 0))
      {
        v27 = (_QWORD *)v34;
        goto LABEL_22;
      }
      v37 = *(_BYTE *)(v31[7] + v35);
      swift_bridgeObjectRelease(v34);
      v38 = sub_100012C44(&qword_100403E88);
      v39 = swift_allocObject(v38, 33, 7);
      *(_OWORD *)(v39 + 16) = xmmword_10033A110;
      *(_BYTE *)(v39 + 32) = v37;
    }
    else
    {
      __break(1u);
    }
  }
}

unint64_t sub_10020B8DC(unint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    if ((a3 & 0x2000000000000000) != 0)
      v5 = HIBYTE(a3) & 0xF;
    else
      v5 = a2 & 0xFFFFFFFFFFFFLL;
    v6 = 7;
    if (((a3 >> 60) & ((a2 & 0x800000000000000) == 0)) != 0)
      v6 = 11;
    v7 = v6 | (v5 << 16);
    result = String.index(_:offsetBy:limitedBy:)(15, result, v7, a2, a3);
    if ((v8 & 1) != 0)
      result = v7;
    if (4 * v5 >= result >> 14)
      return String.subscript.getter(result, v7, a2, a3);
  }
  __break(1u);
  return result;
}

uint64_t sub_10020B978(uint64_t a1)
{
  uint64_t v1;

  return sub_10020B4FC(a1, *(_QWORD *)(v1 + 16), *(uint64_t **)(v1 + 24), *(_QWORD *)(v1 + 32));
}

size_t sub_10020B994@<X0>(char *a1@<X0>, size_t *a2@<X8>)
{
  uint64_t v2;
  size_t result;

  result = strlcpy(a1, *(const char **)(v2 + 16), *(_QWORD *)(v2 + 24));
  *a2 = result;
  return result;
}

uint64_t Logger.init(subsystem:category:)(char a1, unsigned __int8 a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (a1)
  {
    v2 = 0x6C7070612E6D6F63;
    if (a1 == 1)
      v3 = 0xEE006C6477612E65;
    else
      v3 = 0xED00006E616E2E65;
  }
  else
  {
    v3 = 0x8000000100360DF0;
    v2 = 0xD000000000000012;
  }
  v4 = LogCategory.rawValue.getter(a2);
  return Logger.init(subsystem:category:)(v2, v3, v4, v5);
}

uint64_t LogSubsystem.rawValue.getter(char a1)
{
  if (a1)
    return 0x6C7070612E6D6F63;
  else
    return 0xD000000000000012;
}

uint64_t sub_10020BAEC(char *a1, unsigned __int8 *a2)
{
  return sub_10003C79C(*a1, *a2);
}

Swift::Int sub_10020BAF8()
{
  unsigned __int8 *v0;
  int v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  v1 = *v0;
  Hasher.init(_seed:)(v6);
  v2 = 0xEE006C6477612E65;
  if (v1 != 1)
    v2 = 0xED00006E616E2E65;
  if (v1)
    v3 = 0x6C7070612E6D6F63;
  else
    v3 = 0xD000000000000012;
  if (v1)
    v4 = v2;
  else
    v4 = 0x8000000100360DF0;
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_10020BBB4(uint64_t a1)
{
  _BYTE *v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = 0xEE006C6477612E65;
  if (*v1 != 1)
    v2 = 0xED00006E616E2E65;
  if (*v1)
    v3 = 0x6C7070612E6D6F63;
  else
    v3 = 0xD000000000000012;
  if (*v1)
    v4 = v2;
  else
    v4 = 0x8000000100360DF0;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v4);
}

Swift::Int sub_10020BC4C()
{
  unsigned __int8 *v0;
  int v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  v1 = *v0;
  Hasher.init(_seed:)(v6);
  v2 = 0xEE006C6477612E65;
  if (v1 != 1)
    v2 = 0xED00006E616E2E65;
  if (v1)
    v3 = 0x6C7070612E6D6F63;
  else
    v3 = 0xD000000000000012;
  if (v1)
    v4 = v2;
  else
    v4 = 0x8000000100360DF0;
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

unint64_t sub_10020BD04@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = _s7CoreP2P12LogSubsystemO8rawValueACSgSS_tcfC_0(*a1);
  *a2 = result;
  return result;
}

void sub_10020BD30(unint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;

  v2 = *v1;
  v3 = 0x8000000100360DF0;
  v4 = 0xEE006C6477612E65;
  if (v2 != 1)
    v4 = 0xED00006E616E2E65;
  v5 = v2 == 0;
  if (*v1)
    v6 = 0x6C7070612E6D6F63;
  else
    v6 = 0xD000000000000012;
  if (!v5)
    v3 = v4;
  *a1 = v6;
  a1[1] = v3;
}

_UNKNOWN **static LogCategory.allCases.getter()
{
  return &off_1003D7418;
}

uint64_t LogCategory.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10020BDE8 + 4 * byte_10035C6D0[a1]))(1953066601, 0xE400000000000000);
}

uint64_t sub_10020BDE8()
{
  return 1886221668;
}

uint64_t sub_10020BDF4()
{
  return 0x65696C4372657375;
}

uint64_t sub_10020BE14()
{
  return 0x726576697264;
}

uint64_t sub_10020BE28()
{
  return 0x656369766564;
}

uint64_t sub_10020BE3C()
{
  return 0x6361667265746E69;
}

uint64_t sub_10020BF20()
{
  return 0x6873696C627570;
}

unint64_t sub_10020BF38()
{
  return 0xD000000000000011;
}

uint64_t sub_10020C008()
{
  return 0x74656E7265746E69;
}

uint64_t sub_10020C02C()
{
  return 0x4D79617765746167;
}

uint64_t sub_10020C050()
{
  return 0x676E6974756F72;
}

unint64_t sub_10020C068()
{
  return 0xD000000000000010;
}

uint64_t sub_10020C088(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char v10;

  v2 = *a2;
  v3 = LogCategory.rawValue.getter(*a1);
  v5 = v4;
  v6 = LogCategory.rawValue.getter(v2);
  if (v3 == v6 && v5 == v7)
  {
    v10 = 1;
    v9 = v5;
  }
  else
  {
    v9 = v7;
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0);
  }
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v9);
  return v10 & 1;
}

uint64_t sub_10020C110@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = _s7CoreP2P11LogCategoryO8rawValueACSgSS_tcfC_0(*a1, a1[1]);
  *a2 = result;
  return result;
}

uint64_t sub_10020C13C@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = LogCategory.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void sub_10020C164(_QWORD *a1@<X8>)
{
  *a1 = &off_1003D7418;
}

Swift::Int sub_10020C174()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[9];

  v1 = *v0;
  Hasher.init(_seed:)(v6);
  v2 = LogCategory.rawValue.getter(v1);
  v4 = v3;
  String.hash(into:)(v6, v2, v3);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

double sub_10020C1D4(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  double result;

  v3 = LogCategory.rawValue.getter(*v1);
  v5 = v4;
  String.hash(into:)(a1, v3, v4);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v5).n128_u64[0];
  return result;
}

Swift::Int sub_10020C214()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[9];

  v1 = *v0;
  Hasher.init(_seed:)(v6);
  v2 = LogCategory.rawValue.getter(v1);
  v4 = v3;
  String.hash(into:)(v6, v2, v3);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_10020C270(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10020C6B8();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_10020C2CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10020C6B8();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t _s7CoreP2P11LogCategoryO8rawValueACSgSS_tcfC_0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = _findStringSwitchCaseWithCache(cases:string:cache:)(&off_1003D4CE8, a1, a2, &unk_100404248);
  swift_bridgeObjectRelease(a2);
  if (v3 >= 0x1B)
    return 27;
  else
    return v3;
}

unint64_t _s7CoreP2P12LogSubsystemO8rawValueACSgSS_tcfC_0(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1003D50E8, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 3)
    return 3;
  else
    return v3;
}

unint64_t sub_10020C3B4()
{
  unint64_t result;

  result = qword_10040B9C0;
  if (!qword_10040B9C0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for LogSubsystem, &type metadata for LogSubsystem);
    atomic_store(result, (unint64_t *)&qword_10040B9C0);
  }
  return result;
}

unint64_t sub_10020C3FC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10040B9C8;
  if (!qword_10040B9C8)
  {
    v1 = sub_100013C64(&qword_10040B9D0);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_10040B9C8);
  }
  return result;
}

unint64_t sub_10020C44C()
{
  unint64_t result;

  result = qword_10040B9D8;
  if (!qword_10040B9D8)
  {
    result = swift_getWitnessTable("Q@\t", &type metadata for LogCategory);
    atomic_store(result, (unint64_t *)&qword_10040B9D8);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for LogSubsystem(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_10020C4DC + 4 * byte_10035C6F0[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10020C510 + 4 * byte_10035C6EB[v4]))();
}

uint64_t sub_10020C510(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10020C518(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10020C520);
  return result;
}

uint64_t sub_10020C52C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10020C534);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_10020C538(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10020C540(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LogSubsystem()
{
  return &type metadata for LogSubsystem;
}

uint64_t getEnumTagSinglePayload for LogCategory(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xE6)
    goto LABEL_17;
  if (a2 + 26 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 26) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 26;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 26;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 26;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x1B;
  v8 = v6 - 27;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for LogCategory(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 26 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 26) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xE6)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xE5)
    return ((uint64_t (*)(void))((char *)&loc_10020C638 + 4 * byte_10035C6FA[v4]))();
  *a1 = a2 + 26;
  return ((uint64_t (*)(void))((char *)sub_10020C66C + 4 * byte_10035C6F5[v4]))();
}

uint64_t sub_10020C66C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10020C674(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10020C67CLL);
  return result;
}

uint64_t sub_10020C688(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10020C690);
  *(_BYTE *)result = a2 + 26;
  return result;
}

uint64_t sub_10020C694(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10020C69C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LogCategory()
{
  return &type metadata for LogCategory;
}

unint64_t sub_10020C6B8()
{
  unint64_t result;

  result = qword_10040B9E0;
  if (!qword_10040B9E0)
  {
    result = swift_getWitnessTable("a@\t", &type metadata for LogCategory);
    atomic_store(result, (unint64_t *)&qword_10040B9E0);
  }
  return result;
}

uint64_t LengthValueHelper.inferredLoad<A>()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v4 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 32))(a1, a3);
  v6 = v5;
  Data.load<A>(as:)(a2);
  return sub_10000E614(v4, v6);
}

void TypeLengthValue.length.getter(uint64_t a1)
{
  __asm { BR              X13 }
}

uint64_t sub_10020C7B8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;

  v2 = *(_QWORD *)(a1 + 24);
  v6 = BYTE6(v1);
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8);
  v4 = sub_100035EE0();
  return dispatch thunk of BinaryInteger.init<A>(_:)(&v6, &type metadata for Int, v4, v2, v3);
}

uint64_t TypeLengthValue.valueData()(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;

  v1 = sub_10020F518(a1);
  sub_100031FEC(v1, v2);
  return v1;
}

uint64_t LengthValue.valueData()(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;

  v1 = NANBitmap.Channel.operatingClass.getter(a1);
  sub_100031FEC(v1, v2);
  return v1;
}

void LengthValue.init(data:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[4];
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;

  v21 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a6 + 8) + 24) + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v21, a3, &protocol requirements base descriptor for ExpressibleByIntegerLiteral, &associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  v9 = __chkstk_darwin(AssociatedTypeWitness);
  v24 = *(_QWORD *)(a3 - 8);
  v10 = __chkstk_darwin(v9);
  v20[2] = (char *)v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v10);
  v13 = __chkstk_darwin(v12);
  v23 = (char *)v20 - v14;
  v15 = __chkstk_darwin(v13);
  v16 = __chkstk_darwin(v15);
  v22 = (char *)v20 - v17;
  v18 = __chkstk_darwin(v16);
  v19 = __chkstk_darwin(v18);
  __chkstk_darwin(v19);
  __asm { BR              X10 }
}

uint64_t sub_10020CA44(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t AssociatedConformanceWitness;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  *(_QWORD *)(v12 - 168) = v2;
  *(_QWORD *)(v12 - 184) = a1;
  *(_QWORD *)(v12 - 152) = v1;
  *(_QWORD *)(v12 - 120) = BYTE6(v4);
  *(_QWORD *)(v12 - 112) = v11;
  *(_QWORD *)(v12 - 104) = v4;
  dispatch thunk of static FixedWidthInteger.max.getter(v7, v10);
  v13 = dispatch thunk of static BinaryInteger.isSigned.getter(v7, v8);
  v14 = *(_QWORD *)(v12 - 96);
  v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16);
  v15(v3, v9, v7);
  if ((v13 & 1) == 0)
  {
    v17 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
    v18 = v3;
    goto LABEL_7;
  }
  v16 = dispatch thunk of BinaryInteger.bitWidth.getter(v7, v8);
  v17 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
  v17(v3, v7);
  if (v16 <= 64)
    goto LABEL_8;
  v15(v5, v9, v7);
  *(_QWORD *)(v12 - 72) = 0x8000000000000000;
  if ((dispatch thunk of static BinaryInteger.isSigned.getter(v7, v8) & 1) == 0)
  {
    v36 = dispatch thunk of static BinaryInteger.isSigned.getter(v7, v8);
    v37 = dispatch thunk of BinaryInteger.bitWidth.getter(v7, v8);
    if ((v36 & 1) != 0)
    {
      if (v37 <= 64)
        goto LABEL_31;
      goto LABEL_25;
    }
    if (v37 < 64)
      goto LABEL_29;
    v18 = v5;
LABEL_7:
    v17(v18, v7);
    goto LABEL_8;
  }
  if (dispatch thunk of BinaryInteger.bitWidth.getter(v7, v8) < 64)
  {
LABEL_29:
    v41 = dispatch thunk of BinaryInteger._lowWord.getter(v7, v8);
    v17(v5, v7);
    if (v41 >= *(_QWORD *)(v12 - 72))
      goto LABEL_8;
    goto LABEL_30;
  }
LABEL_25:
  v38 = sub_100035EE0();
  v39 = *(_QWORD *)(v12 - 144);
  dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(v12 - 72, &type metadata for Int, v38, v7, v8);
  v40 = dispatch thunk of static Comparable.< infix(_:_:)(v5, v39, v7, *(_QWORD *)(*(_QWORD *)(v8 + 32) + 8));
  v17(v39, v7);
  v17(v5, v7);
  if ((v40 & 1) == 0)
    goto LABEL_8;
  do
  {
LABEL_30:
    __break(1u);
LABEL_31:
    v42 = *(_QWORD *)(v12 - 184);
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(*(_QWORD *)(v12 - 160), v7, v42, &protocol requirements base descriptor for ExpressibleByIntegerLiteral, &associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
    dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)(&unk_10033A248, 256, v42, AssociatedConformanceWitness);
    v44 = *(_QWORD *)(v12 - 144);
    dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)(*(_QWORD *)(v12 - 168), v7, *(_QWORD *)(v12 - 160));
    LOBYTE(v42) = dispatch thunk of static Comparable.< infix(_:_:)(v5, v44, v7, *(_QWORD *)(*(_QWORD *)(v8 + 32) + 8));
    v17(v44, v7);
    v45 = *(_QWORD *)(v12 - 176);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 96) + 32))(v45, v5, v7);
    if ((v42 & 1) != 0)
    {
      v17(v45, v7);
      __break(1u);
      JUMPOUT(0x10020CF70);
    }
    v5 = *(_QWORD *)(v12 - 72);
    v46 = dispatch thunk of BinaryInteger._lowWord.getter(v7, v8);
    v47 = v45;
    v48 = v46;
    v17(v47, v7);
  }
  while (v48 < v5);
LABEL_8:
  v19 = dispatch thunk of BinaryInteger.bitWidth.getter(v7, v8);
  v15(v6, v9, v7);
  if (v19 < 65)
  {
    v27 = dispatch thunk of BinaryInteger.bitWidth.getter(v7, v8);
    v17(v6, v7);
    if (v27 != 64 || (dispatch thunk of static BinaryInteger.isSigned.getter(v7, v8) & 1) != 0)
      goto LABEL_20;
  }
  else
  {
    v17(v6, v7);
  }
  v20 = *(_QWORD *)(v12 - 128);
  v15(v20, v9, v7);
  *(_QWORD *)(v12 - 72) = 0x7FFFFFFFFFFFFFFFLL;
  v21 = dispatch thunk of static BinaryInteger.isSigned.getter(v7, v8);
  v22 = dispatch thunk of BinaryInteger.bitWidth.getter(v7, v8);
  if ((v21 & 1) != 0)
  {
    if (v22 > 64)
    {
      v23 = sub_100035EE0();
      v24 = *(_QWORD *)(v12 - 144);
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(v12 - 72, &type metadata for Int, v23, v7, v8);
      v25 = dispatch thunk of static Comparable.< infix(_:_:)(v24, v20, v7, *(_QWORD *)(*(_QWORD *)(v8 + 32) + 8));
      v17(v24, v7);
      v26 = v20;
      goto LABEL_19;
    }
LABEL_17:
    dispatch thunk of BinaryInteger._lowWord.getter(v7, v8);
    v17(v20, v7);
    goto LABEL_20;
  }
  if (v22 <= 63)
    goto LABEL_17;
  *(_QWORD *)(v12 - 88) = 0x7FFFFFFFFFFFFFFFLL;
  v28 = *(_QWORD *)(v12 - 144);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 96) + 32))(v28, v20, v7);
  v29 = sub_100035EE0();
  v30 = *(_QWORD *)(v12 - 152);
  dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(v12 - 88, &type metadata for Int, v29, v7, v8);
  v25 = dispatch thunk of static Comparable.< infix(_:_:)(v30, v28, v7, *(_QWORD *)(*(_QWORD *)(v8 + 32) + 8));
  v17(v30, v7);
  v26 = v28;
LABEL_19:
  v17(v26, v7);
  if ((v25 & 1) != 0)
  {
    __break(1u);
    JUMPOUT(0x10020CF58);
  }
LABEL_20:
  v31 = dispatch thunk of BinaryInteger._lowWord.getter(v7, v8);
  v17(v9, v7);
  if (*(_QWORD *)(v12 - 120) < v31)
    return *(_QWORD *)(v12 - 112);
  v33 = sub_100012C84();
  v34 = swift_allocError(&type metadata for WiFiError, v33, 0, 0);
  *(_QWORD *)v35 = 0;
  *(_QWORD *)(v35 + 8) = 0;
  *(_BYTE *)(v35 + 16) = 2;
  swift_willThrow(v34);
  return sub_10000E614(*(_QWORD *)(v12 - 112), *(_QWORD *)(v12 - 104));
}

void LengthValueHelper.parseForOptional<A>()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v0 = __chkstk_darwin();
  v2 = (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 32))(v0, v1);
  v4 = v3;
  sub_10001F11C((uint64_t)_swiftEmptyArrayStorage);
  v5 = type metadata accessor for BinaryDecoder();
  v6 = (_QWORD *)swift_allocObject(v5, 48, 7);
  v6[5] = &_swiftEmptyDictionarySingleton;
  v6[2] = v2;
  v6[3] = v4;
  __asm { BR              X11 }
}

uint64_t sub_10020D048(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)(v7 + 32) = v8;
  swift_beginAccess(a1, v9 - 104, 1, 0);
  v10 = *(_QWORD *)(v7 + 40);
  *(_QWORD *)(v7 + 40) = v2;
  swift_bridgeObjectRelease(v10);
  *(_QWORD *)(v9 - 120) = &type metadata for BinaryDecoder.UnkeyedContainer;
  *(_QWORD *)(v9 - 112) = sub_10007BA38();
  *(_QWORD *)(v9 - 144) = v7;
  sub_100034C68(v9 - 144, (uint64_t)&type metadata for BinaryDecoder.UnkeyedContainer);
  sub_1000C988C(v1, (uint64_t)v1, v5, v6);
  if (!v4)
  {
    v11 = *(_QWORD *)(v9 - 72);
    (*(void (**)(uint64_t, uint64_t, _QWORD *))(v3 + 32))(v11, v6, v1);
    (*(void (**)(uint64_t, _QWORD, uint64_t, _QWORD *))(v3 + 56))(v11, 0, 1, v1);
  }
  return sub_100014430((_QWORD *)(v9 - 144));
}

uint64_t LengthValueHelper.parse<A>()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  type metadata accessor for BinaryDecoder();
  v6 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 32))(a1, a3);
  v8 = v7;
  static BinaryDecoder.decode<A>(_:data:)(a2, v6, v7);
  return sub_10000E614(v6, v8);
}

void TypeLengthValue.init(type:data:)(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[3];
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v31 = a6;
  v32 = a7;
  v35 = a1;
  v36 = a3;
  v33 = a8;
  v29 = a10;
  v30 = a5;
  v28 = a9;
  v38 = a11;
  v26 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a11 + 8) + 24) + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v26, a4, &protocol requirements base descriptor for ExpressibleByIntegerLiteral, &associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  v14 = __chkstk_darwin(AssociatedTypeWitness);
  v37 = *(_QWORD *)(a4 - 8);
  v15 = __chkstk_darwin(v14);
  v25[1] = (char *)v25 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v15);
  v18 = __chkstk_darwin(v17);
  v34 = (char *)v25 - v19;
  v20 = __chkstk_darwin(v18);
  v21 = __chkstk_darwin(v20);
  v27 = (char *)v25 - v22;
  v23 = __chkstk_darwin(v21);
  v24 = __chkstk_darwin(v23);
  __chkstk_darwin(v24);
  __asm { BR              X10 }
}

uint64_t sub_10020D390(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t result;
  _QWORD *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t AssociatedConformanceWitness;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  *(_QWORD *)(v12 - 304) = v2;
  *(_QWORD *)(v12 - 320) = a1;
  *(_QWORD *)(v12 - 288) = v1;
  *(_QWORD *)(v12 - 208) = BYTE6(v6);
  *(_QWORD *)(v12 - 200) = v11;
  *(_QWORD *)(v12 - 192) = v6;
  *(_QWORD *)(v12 - 272) = v4;
  dispatch thunk of static FixedWidthInteger.max.getter(v10, *(_QWORD *)(v12 - 160));
  v13 = dispatch thunk of static BinaryInteger.isSigned.getter(v10, v8);
  v14 = *(_QWORD *)(v12 - 168);
  v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16);
  v15(v3, v9, v10);
  if ((v13 & 1) == 0)
  {
    v17 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
    v18 = v3;
    goto LABEL_7;
  }
  v16 = dispatch thunk of BinaryInteger.bitWidth.getter(v10, v8);
  v17 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
  v17(v3, v10);
  if (v16 <= 64)
    goto LABEL_8;
  v15(v7, v9, v10);
  *(_QWORD *)(v12 - 152) = 0x8000000000000000;
  if ((dispatch thunk of static BinaryInteger.isSigned.getter(v10, v8) & 1) == 0)
  {
    v43 = dispatch thunk of static BinaryInteger.isSigned.getter(v10, v8);
    v44 = dispatch thunk of BinaryInteger.bitWidth.getter(v10, v8);
    if ((v43 & 1) != 0)
    {
      if (v44 <= 64)
        goto LABEL_31;
      goto LABEL_25;
    }
    if (v44 < 64)
      goto LABEL_29;
    v18 = v7;
LABEL_7:
    v17(v18, v10);
    goto LABEL_8;
  }
  if (dispatch thunk of BinaryInteger.bitWidth.getter(v10, v8) < 64)
  {
LABEL_29:
    v48 = dispatch thunk of BinaryInteger._lowWord.getter(v10, v8);
    v17(v7, v10);
    if (v48 >= *(_QWORD *)(v12 - 152))
      goto LABEL_8;
    goto LABEL_30;
  }
LABEL_25:
  v45 = sub_100035EE0();
  v46 = *(_QWORD *)(v12 - 280);
  dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(v12 - 152, &type metadata for Int, v45, v10, v8);
  v47 = dispatch thunk of static Comparable.< infix(_:_:)(v7, v46, v10, *(_QWORD *)(*(_QWORD *)(v8 + 32) + 8));
  v17(v46, v10);
  v17(v7, v10);
  if ((v47 & 1) == 0)
    goto LABEL_8;
  do
  {
LABEL_30:
    __break(1u);
LABEL_31:
    v49 = *(_QWORD *)(v12 - 320);
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(*(_QWORD *)(v12 - 296), v10, v49, &protocol requirements base descriptor for ExpressibleByIntegerLiteral, &associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
    dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)(&unk_10033A248, 256, v49, AssociatedConformanceWitness);
    v51 = *(_QWORD *)(v12 - 280);
    dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)(*(_QWORD *)(v12 - 304), v10, *(_QWORD *)(v12 - 296));
    LOBYTE(v49) = dispatch thunk of static Comparable.< infix(_:_:)(v7, v51, v10, *(_QWORD *)(*(_QWORD *)(v8 + 32) + 8));
    v17(v51, v10);
    v52 = *(_QWORD *)(v12 - 312);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 168) + 32))(v52, v7, v10);
    if ((v49 & 1) != 0)
    {
      v17(v52, v10);
      __break(1u);
      JUMPOUT(0x10020D978);
    }
    v7 = *(_QWORD *)(v12 - 152);
    v53 = dispatch thunk of BinaryInteger._lowWord.getter(v10, v8);
    v54 = v52;
    v55 = v53;
    v17(v54, v10);
  }
  while (v55 < v7);
LABEL_8:
  v19 = dispatch thunk of BinaryInteger.bitWidth.getter(v10, v8);
  v15(v5, v9, v10);
  if (v19 < 65)
  {
    v27 = dispatch thunk of BinaryInteger.bitWidth.getter(v10, v8);
    v17(v5, v10);
    if (v27 != 64 || (dispatch thunk of static BinaryInteger.isSigned.getter(v10, v8) & 1) != 0)
      goto LABEL_20;
  }
  else
  {
    v17(v5, v10);
  }
  v20 = *(_QWORD *)(v12 - 216);
  v15(v20, v9, v10);
  *(_QWORD *)(v12 - 152) = 0x7FFFFFFFFFFFFFFFLL;
  v21 = dispatch thunk of static BinaryInteger.isSigned.getter(v10, v8);
  v22 = dispatch thunk of BinaryInteger.bitWidth.getter(v10, v8);
  if ((v21 & 1) != 0)
  {
    if (v22 > 64)
    {
      v23 = sub_100035EE0();
      v24 = *(_QWORD *)(v12 - 280);
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(v12 - 152, &type metadata for Int, v23, v10, v8);
      v25 = dispatch thunk of static Comparable.< infix(_:_:)(v24, v20, v10, *(_QWORD *)(*(_QWORD *)(v8 + 32) + 8));
      v17(v24, v10);
      v26 = v20;
      goto LABEL_19;
    }
LABEL_17:
    dispatch thunk of BinaryInteger._lowWord.getter(v10, v8);
    v17(v20, v10);
    goto LABEL_20;
  }
  if (v22 <= 63)
    goto LABEL_17;
  *(_QWORD *)(v12 - 72) = 0x7FFFFFFFFFFFFFFFLL;
  v28 = *(_QWORD *)(v12 - 280);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 168) + 32))(v28, v20, v10);
  v29 = sub_100035EE0();
  v30 = *(_QWORD *)(v12 - 288);
  dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(v12 - 72, &type metadata for Int, v29, v10, v8);
  v25 = dispatch thunk of static Comparable.< infix(_:_:)(v30, v28, v10, *(_QWORD *)(*(_QWORD *)(v8 + 32) + 8));
  v17(v30, v10);
  v26 = v28;
LABEL_19:
  v17(v26, v10);
  if ((v25 & 1) != 0)
  {
    __break(1u);
    JUMPOUT(0x10020D960);
  }
LABEL_20:
  v31 = dispatch thunk of BinaryInteger._lowWord.getter(v10, v8);
  v17(v9, v10);
  if (*(_QWORD *)(v12 - 208) >= v31)
  {
    v40 = sub_100012C84();
    v41 = swift_allocError(&type metadata for WiFiError, v40, 0, 0);
    *(_QWORD *)v42 = 0;
    *(_QWORD *)(v42 + 8) = 0;
    *(_BYTE *)(v42 + 16) = 2;
    swift_willThrow(v41);
    sub_10000E614(*(_QWORD *)(v12 - 200), *(_QWORD *)(v12 - 192));
    return (*(uint64_t (**)(_QWORD))(*(_QWORD *)(*(_QWORD *)(v12 - 176) - 8) + 8))(*(_QWORD *)(v12 - 184));
  }
  else
  {
    v32 = *(_QWORD *)(v12 - 176);
    v33 = *(_QWORD *)(v12 - 224);
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v32 - 8) + 32))(v33, *(_QWORD *)(v12 - 184), v32);
    *(_QWORD *)(v12 - 152) = v32;
    *(_QWORD *)(v12 - 144) = v10;
    v34 = *(_QWORD *)(v12 - 240);
    *(_QWORD *)(v12 - 136) = *(_QWORD *)(v12 - 248);
    *(_QWORD *)(v12 - 128) = v34;
    v35 = *(_QWORD *)(v12 - 264);
    *(_QWORD *)(v12 - 120) = *(_QWORD *)(v12 - 232);
    *(_QWORD *)(v12 - 112) = v35;
    v36 = *(_QWORD *)(v12 - 160);
    *(_QWORD *)(v12 - 104) = *(_QWORD *)(v12 - 256);
    *(_QWORD *)(v12 - 96) = v36;
    result = type metadata accessor for TypeLengthValue(0, v12 - 152);
    v38 = (_QWORD *)(v33 + *(int *)(result + 84));
    v39 = *(_QWORD *)(v12 - 192);
    *v38 = *(_QWORD *)(v12 - 200);
    v38[1] = v39;
  }
  return result;
}

uint64_t LengthValueHelper.load<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v5 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 32))(a2, a4);
  v7 = v6;
  Data.load<A>(as:)(a3);
  return sub_10000E614(v5, v7);
}

uint64_t TypeLengthValue.type.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t TypeLengthValue.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, char *a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(char *, char *, uint64_t);
  char *v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(char *, uint64_t);
  char *v53;
  char *v54;
  uint64_t v55;
  char *v56;
  char *v57;
  char *v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  char *v64;
  char *v65;
  unint64_t v66;
  char v67;
  char *i;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  char v82;
  __n128 v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t *v98;
  char v99;
  uint64_t v100;
  unint64_t v101;
  char *v102;
  char *v103;
  unint64_t v104;
  char *v105;
  char v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t AssociatedConformanceWitness;
  char *v111;
  char *v112;
  char *v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  uint64_t AssociatedTypeWitness;
  char *v123;
  uint64_t v124;
  char *v125;
  char *v126;
  uint64_t v127;
  char *v128;
  char *v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  char *v133;
  char *v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  char *v143;
  _QWORD *v144;
  __int128 v145;
  __int128 v146;
  _QWORD v147[3];
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;

  v142 = a8;
  v141 = a6;
  v144 = a1;
  v127 = a9;
  v136 = *(char **)(a10 + 8);
  v124 = *(_QWORD *)(*((_QWORD *)v136 + 3) + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v124, a3, &protocol requirements base descriptor for ExpressibleByIntegerLiteral);
  __chkstk_darwin();
  v121 = (char *)&v117 - v15;
  v131 = type metadata accessor for CodingUserInfoKey(0);
  v130 = *(_QWORD *)(v131 - 8);
  __chkstk_darwin();
  v129 = (char *)&v117 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v135 = *(_QWORD *)(a3 - 8);
  __chkstk_darwin();
  v123 = (char *)&v117 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v125 = (char *)&v117 - v18;
  __chkstk_darwin();
  v134 = (char *)&v117 - v19;
  __chkstk_darwin();
  v132 = (char *)&v117 - v20;
  __chkstk_darwin();
  v128 = (char *)&v117 - v21;
  __chkstk_darwin();
  v126 = (char *)&v117 - v22;
  __chkstk_darwin();
  v133 = (char *)&v117 - v23;
  __chkstk_darwin();
  v25 = (char *)&v117 - v24;
  v26 = *(_QWORD *)(a2 - 8);
  __chkstk_darwin();
  v137 = a3;
  v138 = (char *)&v117 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v139 = a4;
  v140 = a2;
  v147[0] = a2;
  v147[1] = a3;
  v147[2] = a4;
  v148 = a5;
  v149 = v141;
  v150 = a7;
  v141 = a7;
  v151 = v142;
  v152 = a10;
  v28 = v144;
  v29 = type metadata accessor for TypeLengthValue(0, (uint64_t)v147);
  v30 = *(_QWORD *)(v29 - 8);
  __chkstk_darwin();
  v32 = (char *)&v117 - v31;
  v33 = v28[3];
  v34 = v28[4];
  sub_10003259C(v28, v33);
  v35 = v143;
  dispatch thunk of Decoder.unkeyedContainer()(v147, v33, v34);
  if (v35)
    return sub_100014430(v28);
  v142 = v32;
  v143 = v25;
  v120 = v26;
  v119 = v30;
  v118 = v29;
  v36 = v148;
  v37 = v149;
  sub_100034C68((uint64_t)v147, v148);
  v38 = v138;
  v39 = v140;
  UnkeyedDecodingContainer.inferredDecode<A>()(v36, v140, v37, v139);
  (*(void (**)(char *, char *, uint64_t))(v120 + 32))(v142, v38, v39);
  v41 = v148;
  v42 = v149;
  sub_100034C68((uint64_t)v147, v148);
  v43 = v143;
  v44 = v137;
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)(v137, v137, v141, v41, v42);
  v141 = 0;
  v45 = v136;
  v46 = dispatch thunk of static BinaryInteger.isSigned.getter(v44, v136);
  v47 = v135;
  v48 = *(void (**)(char *, char *, uint64_t))(v135 + 16);
  v49 = v133;
  v48(v133, v43, v44);
  v50 = v44;
  if ((v46 & 1) == 0)
  {
    v52 = *(void (**)(char *, uint64_t))(v47 + 8);
    v52(v49, v44);
    v53 = v134;
    goto LABEL_10;
  }
  v51 = dispatch thunk of BinaryInteger.bitWidth.getter(v44, v45);
  v52 = *(void (**)(char *, uint64_t))(v47 + 8);
  v52(v49, v44);
  v53 = v134;
  if (v51 <= 64)
    goto LABEL_10;
  v54 = v126;
  v48(v126, v143, v44);
  *(_QWORD *)&v145 = 0x8000000000000000;
  if ((dispatch thunk of static BinaryInteger.isSigned.getter(v44, v45) & 1) == 0)
  {
    v99 = dispatch thunk of static BinaryInteger.isSigned.getter(v44, v45);
    v100 = dispatch thunk of BinaryInteger.bitWidth.getter(v44, v45);
    if ((v99 & 1) != 0)
    {
      if (v100 <= 64)
        goto LABEL_49;
      v101 = sub_100035EE0();
      v102 = v128;
      v50 = v137;
      v103 = v136;
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(&v145, &type metadata for Int, v101, v137, v136);
      LOBYTE(v103) = dispatch thunk of static Comparable.< infix(_:_:)(v54, v102, v50, *(_QWORD *)(*((_QWORD *)v103 + 4) + 8));
      v52(v102, v50);
      v52(v54, v50);
      if ((v103 & 1) == 0)
        goto LABEL_10;
      goto LABEL_48;
    }
    if (v100 >= 64)
    {
      v50 = v137;
      v52(v54, v137);
      goto LABEL_10;
    }
    v50 = v137;
    v55 = v137;
    v56 = v136;
    goto LABEL_47;
  }
  if (dispatch thunk of BinaryInteger.bitWidth.getter(v44, v45) < 64)
  {
    v55 = v44;
    v56 = v45;
LABEL_47:
    v107 = dispatch thunk of BinaryInteger._lowWord.getter(v55, v56);
    v52(v54, v50);
    if (v107 >= (uint64_t)v145)
      goto LABEL_10;
    goto LABEL_48;
  }
  v104 = sub_100035EE0();
  v105 = v128;
  dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(&v145, &type metadata for Int, v104, v44, v45);
  v106 = dispatch thunk of static Comparable.< infix(_:_:)(v54, v105, v44, *(_QWORD *)(*((_QWORD *)v45 + 4) + 8));
  v52(v105, v44);
  v52(v54, v44);
  if ((v106 & 1) == 0)
    goto LABEL_10;
  do
  {
LABEL_48:
    __break(1u);
LABEL_49:
    v108 = v124;
    v50 = v137;
    v109 = AssociatedTypeWitness;
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v124, v137, AssociatedTypeWitness, &protocol requirements base descriptor for ExpressibleByIntegerLiteral, &associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
    v111 = v121;
    dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)(&unk_10033A248, 256, v109, AssociatedConformanceWitness);
    v112 = v128;
    dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)(v111, v50, v108);
    v113 = v136;
    LOBYTE(v111) = dispatch thunk of static Comparable.< infix(_:_:)(v54, v112, v50, *(_QWORD *)(*((_QWORD *)v136 + 4) + 8));
    v52(v112, v50);
    v114 = v123;
    (*(void (**)(char *, char *, uint64_t))(v135 + 32))(v123, v54, v50);
    if ((v111 & 1) != 0)
    {
      v52(v114, v50);
      __break(1u);
      JUMPOUT(0x10020E680);
    }
    v115 = v145;
    v116 = dispatch thunk of BinaryInteger._lowWord.getter(v50, v113);
    v52(v114, v50);
  }
  while (v116 < v115);
LABEL_10:
  v57 = v143;
  v58 = v136;
  v59 = dispatch thunk of BinaryInteger.bitWidth.getter(v50, v136);
  v60 = v132;
  v48(v132, v57, v50);
  if (v59 < 65)
  {
    v61 = dispatch thunk of BinaryInteger.bitWidth.getter(v50, v58);
    v52(v60, v50);
    if (v61 != 64 || (dispatch thunk of static BinaryInteger.isSigned.getter(v50, v58) & 1) != 0)
      goto LABEL_22;
  }
  else
  {
    v52(v60, v50);
  }
  v48(v53, v143, v50);
  *(_QWORD *)&v145 = 0x7FFFFFFFFFFFFFFFLL;
  v62 = dispatch thunk of static BinaryInteger.isSigned.getter(v50, v58);
  v63 = dispatch thunk of BinaryInteger.bitWidth.getter(v50, v58);
  v64 = v58;
  if ((v62 & 1) == 0)
  {
    v58 = v128;
    if (v63 > 63)
      goto LABEL_20;
LABEL_18:
    v50 = v137;
    v69 = dispatch thunk of BinaryInteger._lowWord.getter(v137, v64);
    v52(v53, v50);
    v58 = v64;
    if ((uint64_t)v145 < v69)
      goto LABEL_19;
    goto LABEL_22;
  }
  v65 = v128;
  if (v63 <= 64)
    goto LABEL_18;
  v66 = sub_100035EE0();
  v50 = v137;
  dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(&v145, &type metadata for Int, v66, v137, v64);
  v67 = dispatch thunk of static Comparable.< infix(_:_:)(v65, v53, v50, *(_QWORD *)(*((_QWORD *)v64 + 4) + 8));
  v52(v65, v50);
  for (i = v53; ; i = v58)
  {
    v52(i, v50);
    v58 = v64;
    if ((v67 & 1) == 0)
      break;
LABEL_19:
    __break(1u);
LABEL_20:
    v153 = 0x7FFFFFFFFFFFFFFFLL;
    v50 = v137;
    (*(void (**)(char *, char *, uint64_t))(v135 + 32))(v58, v53, v137);
    v70 = sub_100035EE0();
    v53 = v125;
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(&v153, &type metadata for Int, v70, v50, v64);
    v67 = dispatch thunk of static Comparable.< infix(_:_:)(v53, v58, v50, *(_QWORD *)(*((_QWORD *)v64 + 4) + 8));
    v52(v53, v50);
  }
LABEL_22:
  v71 = v143;
  v72 = dispatch thunk of BinaryInteger._lowWord.getter(v50, v58);
  v52(v71, v50);
  v73 = v144[3];
  v74 = v144[4];
  sub_10003259C(v144, v73);
  v75 = dispatch thunk of Decoder.userInfo.getter(v73, v74);
  if (qword_100403F38 != -1)
    swift_once(&qword_100403F38, sub_1000C8ACC);
  v76 = v131;
  v77 = sub_100014C44(v131, (uint64_t)static CodingUserInfoKey.fourByteAlignedValue);
  v78 = v130;
  v79 = (uint64_t)v129;
  (*(void (**)(char *, uint64_t, uint64_t))(v130 + 16))(v129, v77, v76);
  v80 = v141;
  if (*(_QWORD *)(v75 + 16) && (v81 = sub_10002DA48(v79), (v82 & 1) != 0))
  {
    sub_100014450(*(_QWORD *)(v75 + 56) + 32 * v81, (uint64_t)&v145);
  }
  else
  {
    v145 = 0u;
    v146 = 0u;
  }
  v83 = swift_bridgeObjectRelease(v75);
  (*(void (**)(uint64_t, uint64_t, __n128))(v78 + 8))(v79, v76, v83);
  if (*((_QWORD *)&v146 + 1))
  {
    if ((swift_dynamicCast(&v153, &v145, &type metadata for Any[8], &type metadata for Bool, 6) & 1) != 0
      && v153 == 1)
    {
      if (__OFADD__(v72, 3))
      {
        __break(1u);
        JUMPOUT(0x10020E66CLL);
      }
      v84 = v148;
      v85 = v149;
      sub_100034C68((uint64_t)v147, v148);
      UnkeyedDecodingContainer.decodeData(with:)((v72 + 3) & 0xFFFFFFFFFFFFFFFCLL, v84, v85);
      v87 = v140;
      v88 = v142;
      v141 = v80;
      v89 = v120;
      if (!v80)
        __asm { BR              X11 }
      goto LABEL_36;
    }
  }
  else
  {
    sub_1000BE6AC((uint64_t)&v145);
  }
  v90 = v148;
  v91 = v149;
  sub_100034C68((uint64_t)v147, v148);
  v92 = UnkeyedDecodingContainer.decodeData(with:)(v72, v90, v91);
  v87 = v140;
  v88 = v142;
  v141 = v80;
  v89 = v120;
  if (v80)
  {
LABEL_36:
    sub_100014430(v147);
    sub_100014430(v144);
    return (*(uint64_t (**)(char *, uint64_t))(v89 + 8))(v88, v87);
  }
  v94 = v127;
  v95 = v118;
  v96 = v119;
  v97 = v142;
  v98 = (uint64_t *)&v142[*(int *)(v118 + 84)];
  *v98 = v92;
  v98[1] = v93;
  sub_100014430(v147);
  (*(void (**)(uint64_t, char *, uint64_t))(v96 + 16))(v94, v97, v95);
  sub_100014430(v144);
  return (*(uint64_t (**)(char *, uint64_t))(v96 + 8))(v97, v95);
}

uint64_t TypeLengthValue.encode(to:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  __int128 v20;
  _QWORD v21[3];
  uint64_t v22;
  uint64_t v23;

  v5 = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = (_QWORD *)__chkstk_darwin();
  v9 = (char *)&v21[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = v7[3];
  v11 = v7[4];
  sub_10003259C(v7, v10);
  dispatch thunk of Encoder.unkeyedContainer()(v21, v10, v11);
  v12 = v22;
  v13 = v23;
  sub_100034C68((uint64_t)v21, v22);
  dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)(v2, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 40), v12, v13);
  if (!v3)
  {
    TypeLengthValue.length.getter(a2);
    v14 = v22;
    v15 = v23;
    sub_100034C68((uint64_t)v21, v22);
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)(v9, v5, *(_QWORD *)(a2 + 64), v14, v15);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    v20 = *(_OWORD *)(v2 + *(int *)(a2 + 84));
    v16 = v22;
    v17 = v23;
    sub_100034C68((uint64_t)v21, v22);
    v18 = sub_100068570();
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)(&v20, &type metadata for Data, v18, v16, v17);
  }
  return sub_100014430(v21);
}

uint64_t sub_10020E818@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return TypeLengthValue.init(from:)(a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), *(_QWORD *)(a2 + 32), *(_QWORD *)(a2 + 40), *(_QWORD *)(a2 + 48), *(_QWORD *)(a2 + 56), *(char **)(a2 + 64), a3, *(_QWORD *)(a2 + 72));
}

uint64_t sub_10020E84C(uint64_t a1, uint64_t a2)
{
  return TypeLengthValue.encode(to:)(a1, a2);
}

void LengthValue.length.getter(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }
}

uint64_t sub_10020E8A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v10;

  v10 = BYTE6(a2);
  v7 = *(_QWORD *)(a6 + 8);
  v8 = sub_100035EE0();
  return dispatch thunk of BinaryInteger.init<A>(_:)(&v10, &type metadata for Int, v8, v6, v7);
}

_QWORD *LengthValue.init(from:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, char *, uint64_t);
  char *v34;
  char *v35;
  uint64_t v36;
  void (*v37)(char *, uint64_t);
  char *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  char *v49;
  unint64_t v50;
  char v51;
  char *i;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char v65;
  __n128 v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v74;
  uint64_t v75;
  unint64_t v76;
  char *v77;
  char v78;
  char *v79;
  uint64_t v80;
  uint64_t AssociatedConformanceWitness;
  char *v82;
  char *v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  BOOL v89;
  char *v90;
  char *v91;
  char *v92;
  char *v93;
  char *v94;
  uint64_t AssociatedTypeWitness;
  char *v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  __int128 v108;
  __int128 v109;
  _QWORD v110[3];
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;

  v104 = *(_QWORD *)(a5 + 8);
  v105 = a3;
  v97 = *(_QWORD *)(*(_QWORD *)(v104 + 24) + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v97, a2, &protocol requirements base descriptor for ExpressibleByIntegerLiteral);
  __chkstk_darwin();
  v94 = (char *)&v90 - v7;
  v99 = type metadata accessor for CodingUserInfoKey(0);
  v101 = *(_QWORD *)(v99 - 8);
  __chkstk_darwin();
  v100 = (char *)&v90 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v106 = a2;
  v102 = *(_QWORD *)(a2 - 8);
  __chkstk_darwin();
  v96 = (char *)&v90 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v98 = (char *)&v90 - v10;
  __chkstk_darwin();
  v12 = (char *)&v90 - v11;
  __chkstk_darwin();
  v14 = (char *)&v90 - v13;
  __chkstk_darwin();
  v16 = (char *)&v90 - v15;
  __chkstk_darwin();
  v18 = (char *)&v90 - v17;
  __chkstk_darwin();
  v20 = (char *)&v90 - v19;
  __chkstk_darwin();
  v103 = (char *)&v90 - v21;
  v23 = a1[3];
  v22 = a1[4];
  sub_10003259C(a1, v23);
  v24 = v107;
  dispatch thunk of Decoder.unkeyedContainer()(v110, v23, v22);
  if (v24)
    goto LABEL_35;
  v93 = v20;
  v90 = v18;
  v92 = v14;
  v91 = v16;
  v107 = v12;
  v25 = v104;
  v26 = a1;
  v27 = v111;
  v28 = v112;
  sub_100034C68((uint64_t)v110, v111);
  v29 = v103;
  v30 = v106;
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)(v106, v106, v105, v27, v28);
  v105 = 0;
  v31 = v25;
  LOBYTE(v27) = dispatch thunk of static BinaryInteger.isSigned.getter(v30, v25);
  v32 = v102;
  v33 = *(void (**)(char *, char *, uint64_t))(v102 + 16);
  v34 = v93;
  v33(v93, v29, v30);
  v35 = v29;
  if ((v27 & 1) == 0)
  {
    v37 = *(void (**)(char *, uint64_t))(v32 + 8);
    v37(v34, v30);
    v38 = v107;
    goto LABEL_8;
  }
  v36 = dispatch thunk of BinaryInteger.bitWidth.getter(v30, v31);
  v37 = *(void (**)(char *, uint64_t))(v32 + 8);
  v37(v34, v30);
  v38 = v107;
  if (v36 <= 64)
    goto LABEL_8;
  v39 = v90;
  v33(v90, v35, v30);
  *(_QWORD *)&v108 = 0x8000000000000000;
  if ((dispatch thunk of static BinaryInteger.isSigned.getter(v30, v31) & 1) != 0)
  {
    if (dispatch thunk of BinaryInteger.bitWidth.getter(v30, v31) < 64)
    {
      v40 = dispatch thunk of BinaryInteger._lowWord.getter(v30, v31);
      v41 = v39;
      v42 = v40;
      v43 = v41;
      goto LABEL_45;
    }
  }
  else
  {
    v74 = dispatch thunk of static BinaryInteger.isSigned.getter(v30, v31);
    v75 = dispatch thunk of BinaryInteger.bitWidth.getter(v30, v31);
    if ((v74 & 1) == 0)
    {
      if (v75 >= 64)
      {
        v37(v90, v30);
        goto LABEL_8;
      }
      v79 = v90;
      v42 = dispatch thunk of BinaryInteger._lowWord.getter(v30, v31);
      v43 = v79;
LABEL_45:
      v37(v43, v30);
      if (v42 >= (uint64_t)v108)
        goto LABEL_8;
      goto LABEL_46;
    }
    if (v75 <= 64)
      goto LABEL_47;
  }
  v76 = sub_100035EE0();
  v77 = v91;
  dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(&v108, &type metadata for Int, v76, v30, v31);
  v78 = dispatch thunk of static Comparable.< infix(_:_:)(v90, v77, v30, *(_QWORD *)(*(_QWORD *)(v31 + 32) + 8));
  v37(v77, v30);
  v37(v90, v30);
  if ((v78 & 1) == 0)
    goto LABEL_8;
  do
  {
LABEL_46:
    __break(1u);
LABEL_47:
    v80 = AssociatedTypeWitness;
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v97, v30, AssociatedTypeWitness, &protocol requirements base descriptor for ExpressibleByIntegerLiteral, &associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
    v82 = v94;
    dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)(&unk_10033A248, 256, v80, AssociatedConformanceWitness);
    v83 = v91;
    dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)(v82, v30, v97);
    v84 = v90;
    LODWORD(v97) = dispatch thunk of static Comparable.< infix(_:_:)(v90, v83, v30, *(_QWORD *)(*(_QWORD *)(v31 + 32) + 8));
    v37(v83, v30);
    v85 = v96;
    (*(void (**)(char *, char *, uint64_t))(v102 + 32))(v96, v84, v30);
    if ((v97 & 1) != 0)
    {
      v37(v85, v30);
      __break(1u);
      JUMPOUT(0x10020F2F8);
    }
    v86 = v31;
    v87 = v108;
    v88 = dispatch thunk of BinaryInteger._lowWord.getter(v30, v86);
    v37(v85, v30);
    v89 = v88 < v87;
    v31 = v86;
    v38 = v107;
  }
  while (v89);
LABEL_8:
  v44 = dispatch thunk of BinaryInteger.bitWidth.getter(v30, v31);
  v45 = v92;
  v33(v92, v35, v30);
  if (v44 < 65)
  {
    v46 = dispatch thunk of BinaryInteger.bitWidth.getter(v30, v31);
    v37(v45, v30);
    if (v46 != 64 || (dispatch thunk of static BinaryInteger.isSigned.getter(v30, v31) & 1) != 0)
      goto LABEL_20;
  }
  else
  {
    v37(v45, v30);
  }
  v33(v38, v35, v30);
  *(_QWORD *)&v108 = 0x7FFFFFFFFFFFFFFFLL;
  v47 = dispatch thunk of static BinaryInteger.isSigned.getter(v30, v31);
  v48 = dispatch thunk of BinaryInteger.bitWidth.getter(v30, v31);
  if ((v47 & 1) == 0)
  {
    v49 = v91;
    if (v48 > 63)
      goto LABEL_18;
LABEL_16:
    v53 = dispatch thunk of BinaryInteger._lowWord.getter(v30, v31);
    v37(v38, v30);
    if ((uint64_t)v108 < v53)
      goto LABEL_17;
    goto LABEL_20;
  }
  v49 = v91;
  if (v48 <= 64)
    goto LABEL_16;
  v50 = sub_100035EE0();
  dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(&v108, &type metadata for Int, v50, v30, v31);
  v51 = dispatch thunk of static Comparable.< infix(_:_:)(v49, v38, v30, *(_QWORD *)(*(_QWORD *)(v31 + 32) + 8));
  v37(v49, v30);
  for (i = v38; ; i = v49)
  {
    v37(i, v30);
    if ((v51 & 1) == 0)
      break;
LABEL_17:
    __break(1u);
LABEL_18:
    v113 = 0x7FFFFFFFFFFFFFFFLL;
    (*(void (**)(char *, char *, uint64_t))(v102 + 32))(v49, v38, v30);
    v54 = sub_100035EE0();
    v38 = v98;
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(&v113, &type metadata for Int, v54, v30, v31);
    v51 = dispatch thunk of static Comparable.< infix(_:_:)(v38, v49, v30, *(_QWORD *)(*(_QWORD *)(v31 + 32) + 8));
    v37(v38, v30);
  }
LABEL_20:
  v55 = dispatch thunk of BinaryInteger._lowWord.getter(v30, v31);
  v37(v35, v30);
  v56 = v26[3];
  v57 = v26[4];
  sub_10003259C(v26, v56);
  v58 = dispatch thunk of Decoder.userInfo.getter(v56, v57);
  if (qword_100403F38 != -1)
    swift_once(&qword_100403F38, sub_1000C8ACC);
  v59 = v99;
  v60 = sub_100014C44(v99, (uint64_t)static CodingUserInfoKey.fourByteAlignedValue);
  v62 = (uint64_t)v100;
  v61 = v101;
  (*(void (**)(char *, uint64_t, uint64_t))(v101 + 16))(v100, v60, v59);
  v63 = v105;
  if (*(_QWORD *)(v58 + 16) && (v64 = sub_10002DA48(v62), (v65 & 1) != 0))
  {
    sub_100014450(*(_QWORD *)(v58 + 56) + 32 * v64, (uint64_t)&v108);
  }
  else
  {
    v108 = 0u;
    v109 = 0u;
  }
  v66 = swift_bridgeObjectRelease(v58);
  (*(void (**)(uint64_t, uint64_t, __n128))(v61 + 8))(v62, v59, v66);
  if (!*((_QWORD *)&v109 + 1))
  {
    sub_1000BE6AC((uint64_t)&v108);
    goto LABEL_33;
  }
  if ((swift_dynamicCast(&v113, &v108, &type metadata for Any[8], &type metadata for Bool, 6) & 1) == 0
    || v113 != 1)
  {
LABEL_33:
    v70 = v111;
    v71 = v112;
    sub_100034C68((uint64_t)v110, v111);
    v72 = UnkeyedDecodingContainer.decodeData(with:)(v55, v70, v71);
    if (!v63)
    {
      a1 = (_QWORD *)v72;
      sub_100014430(v110);
      sub_100014430(v26);
      return a1;
    }
    goto LABEL_34;
  }
  if (__OFADD__(v55, 3))
  {
    __break(1u);
    JUMPOUT(0x10020F2E4);
  }
  v67 = v111;
  v68 = v112;
  sub_100034C68((uint64_t)v110, v111);
  UnkeyedDecodingContainer.decodeData(with:)((v55 + 3) & 0xFFFFFFFFFFFFFFFCLL, v67, v68);
  if (!v63)
    __asm { BR              X11 }
LABEL_34:
  sub_100014430(v110);
  a1 = v26;
LABEL_35:
  sub_100014430(a1);
  return a1;
}

uint64_t LengthValue.encode(to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[2];
  _QWORD v26[3];
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v24 = a6;
  v9 = *(_QWORD *)(a4 - 8);
  v10 = (_QWORD *)__chkstk_darwin();
  v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = v10[3];
  v13 = v10[4];
  sub_10003259C(v10, v14);
  dispatch thunk of Encoder.unkeyedContainer()(v26, v14, v13);
  v23 = a2;
  LengthValue.length.getter(a2, a3);
  v15 = v27;
  v16 = v28;
  sub_100034C68((uint64_t)v26, v27);
  v17 = v29;
  dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)(v12, a4, v24, v15, v16);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, a4);
  if (!v17)
  {
    v25[0] = v23;
    v25[1] = a3;
    v18 = v27;
    v19 = v28;
    sub_100034C68((uint64_t)v26, v27);
    v20 = sub_100068570();
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)(v25, &type metadata for Data, v20, v18, v19);
  }
  return sub_100014430(v26);
}

_QWORD *sub_10020F46C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  _QWORD *result;
  uint64_t v7;

  result = LengthValue.init(from:)(a1, a2[2], a2[3], a3, a2[5]);
  if (!v4)
  {
    *a4 = result;
    a4[1] = v7;
  }
  return result;
}

uint64_t sub_10020F4A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v5;

  return LengthValue.encode(to:)(a1, *v5, v5[1], *(_QWORD *)(a2 + 16), a5, *(_QWORD *)(a2 + 32));
}

void sub_10020F4C4()
{
  uint64_t *v0;

  LengthValue.length.getter(*v0, v0[1]);
}

uint64_t sub_10020F4D8()
{
  _QWORD *v0;
  uint64_t v1;
  unint64_t v2;

  v1 = NANBitmap.Channel.operatingClass.getter(*v0);
  sub_100031FEC(v1, v2);
  return v1;
}

uint64_t sub_10020F518(uint64_t a1)
{
  uint64_t v1;

  return *(_QWORD *)(v1 + *(int *)(a1 + 84));
}

uint64_t type metadata accessor for TypeLengthValue(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &nominal type descriptor for TypeLengthValue);
}

uint64_t sub_10020F534(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 72);
}

uint64_t sub_10020F53C(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 40);
}

uint64_t sub_10020F544(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 72);
}

uint64_t sub_10020F54C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_10035CA08;
    swift_initStructMetadata(a1, 0, 2, v4, a1 + 80);
    return 0;
  }
  return result;
}

uint64_t *sub_10020F5C0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    v9 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    v10 = (_QWORD *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    v11 = (uint64_t *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    v12 = *v11;
    v13 = v11[1];
    sub_100031FEC(*v11, v13);
    *v10 = v12;
    v10[1] = v13;
  }
  return v4;
}

uint64_t sub_10020F67C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;

  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  (*(void (**)(void))(v3 + 8))();
  v4 = (a1 + *(_QWORD *)(v3 + 64) + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_10000E614(*(_QWORD *)v4, *(_QWORD *)(v4 + 8));
}

uint64_t sub_10020F6BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (_QWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (uint64_t *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  v9 = *v8;
  v10 = v8[1];
  sub_100031FEC(*v8, v10);
  *v7 = v9;
  v7[1] = v10;
  return a1;
}

uint64_t sub_10020F724(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (uint64_t *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = (uint64_t *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  v9 = *v8;
  v10 = v8[1];
  sub_100031FEC(*v8, v10);
  v11 = *v7;
  v12 = v7[1];
  *v7 = v9;
  v7[1] = v10;
  sub_10000E614(v11, v12);
  return a1;
}

uint64_t sub_10020F794(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  *(_OWORD *)((*(_QWORD *)(v5 + 64) + 7 + a1) & 0xFFFFFFFFFFFFF8) = *(_OWORD *)((*(_QWORD *)(v5 + 64) + 7 + a2) & 0xFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_10020F7F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  v6 = *(_QWORD *)(v5 + 64) + 7;
  v7 = (uint64_t *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  v8 = *v7;
  v9 = v7[1];
  *(_OWORD *)v7 = *(_OWORD *)((v6 + a2) & 0xFFFFFFFFFFFFF8);
  sub_10000E614(v8, v9);
  return a1;
}

uint64_t sub_10020F854(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v12;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0xC)
    v6 = 12;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(_QWORD *)(v4 + 64);
  if (v6 >= a2)
  {
    if (v5 < 0xC)
    {
      v12 = *(_QWORD *)(((a1 + v7 + 7) & 0xFFFFFFFFFFFFF8) + 8) >> 60;
      if (((4 * (_DWORD)v12) & 0xC) != 0)
        return 16 - ((4 * (_DWORD)v12) & 0xC | (v12 >> 2));
      else
        return 0;
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    if (((((v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 16) & 0xFFFFFFF8) != 0)
      v8 = 2;
    else
      v8 = a2 - v6 + 1;
    if (v8 >= 0x10000)
      v9 = 4;
    else
      v9 = 2;
    if (v8 < 0x100)
      v9 = 1;
    if (v8 >= 2)
      v10 = v9;
    else
      v10 = 0;
    return ((uint64_t (*)(void))((char *)&loc_10020F8D0 + 4 * byte_10035C904[v10]))();
  }
}

void sub_10020F960(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;
  int v9;
  unsigned int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0xCu)
    v6 = 12;
  else
    v6 = *(_DWORD *)(v5 + 84);
  if (v6 >= a3)
  {
    v9 = 0;
    if (a2 <= v6)
      goto LABEL_17;
  }
  else
  {
    if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) == 0xFFFFFFF0)
      v7 = a3 - v6 + 1;
    else
      v7 = 2;
    if (v7 >= 0x10000)
      v8 = 4;
    else
      v8 = 2;
    if (v7 < 0x100)
      v8 = 1;
    if (v7 >= 2)
      v9 = v8;
    else
      v9 = 0;
    if (a2 <= v6)
LABEL_17:
      __asm { BR              X12 }
  }
  if (((*(_DWORD *)(v5 + 64) + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    v10 = ~v6 + a2;
    bzero(a1, ((*(_QWORD *)(v5 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
    *a1 = v10;
  }
  __asm { BR              X10 }
}

void sub_10020FA54()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
  JUMPOUT(0x10020FAD8);
}

void sub_10020FA5C(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x10020FA64);
  JUMPOUT(0x10020FAD8);
}

void sub_10020FAB4()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
  JUMPOUT(0x10020FAD8);
}

void sub_10020FABC()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
  JUMPOUT(0x10020FAD8);
}

uint64_t sub_10020FAC4(uint64_t a1, unsigned int a2, unsigned int a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_WORD *)(v7 + v8) = 0;
  if (!a2)
    goto LABEL_6;
  if (a3 < 0xC)
  {
    v4 = (_QWORD *)((v7 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    if (a2 > 0xC)
      JUMPOUT(0x10020FAD0);
    *v4 = 0;
    v4[1] = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
LABEL_6:
    JUMPOUT(0x10020FAD8);
  }
  return (*(uint64_t (**)(uint64_t))(v5 + 56))(v7);
}

uint64_t type metadata accessor for LengthValue(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &nominal type descriptor for LengthValue);
}

uint64_t RSSI.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  void (*v21)(char *, uint64_t, uint64_t);
  uint64_t v22;
  void (*v23)(char *, uint64_t);
  char *v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t result;
  char v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  char v41;
  uint64_t v42;
  uint64_t AssociatedConformanceWitness;
  char *v44;
  char v45;
  int64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  int64_t v57;

  v50 = *(_QWORD *)(*(_QWORD *)(a3 + 24) + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v50, a2, &protocol requirements base descriptor for ExpressibleByIntegerLiteral, &associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  __chkstk_darwin();
  v49 = (char *)&v48 - v7;
  v8 = *(_QWORD *)(a2 - 8);
  __chkstk_darwin();
  v48 = (char *)&v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v51 = (char *)&v48 - v10;
  __chkstk_darwin();
  v54 = (char *)&v48 - v11;
  __chkstk_darwin();
  v13 = (char *)&v48 - v12;
  __chkstk_darwin();
  v53 = (char *)&v48 - v14;
  __chkstk_darwin();
  v16 = (char *)&v48 - v15;
  __chkstk_darwin();
  v18 = (char *)&v48 - v17;
  __chkstk_darwin();
  v20 = (char *)&v48 - v19;
  v21 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v55 = (char *)a1;
  v21((char *)&v48 - v19, a1, a2);
  LOBYTE(a1) = dispatch thunk of static BinaryInteger.isSigned.getter(a2, a3);
  v21(v18, (uint64_t)v20, a2);
  v52 = v8;
  if ((a1 & 1) == 0)
  {
    v23 = *(void (**)(char *, uint64_t))(v8 + 8);
    v24 = v18;
    goto LABEL_7;
  }
  v22 = dispatch thunk of BinaryInteger.bitWidth.getter(a2, a3);
  v23 = *(void (**)(char *, uint64_t))(v8 + 8);
  v23(v18, a2);
  if (v22 <= 64)
    goto LABEL_8;
  v21(v16, (uint64_t)v20, a2);
  v57 = 0x8000000000000000;
  if ((dispatch thunk of static BinaryInteger.isSigned.getter(a2, a3) & 1) == 0)
  {
    v37 = dispatch thunk of static BinaryInteger.isSigned.getter(a2, a3);
    v38 = dispatch thunk of BinaryInteger.bitWidth.getter(a2, a3);
    if ((v37 & 1) != 0)
    {
      if (v38 <= 64)
        goto LABEL_29;
LABEL_23:
      v39 = sub_100035EE0();
      v40 = v53;
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(&v57, &type metadata for Int, v39, a2, a3);
      v41 = dispatch thunk of static Comparable.< infix(_:_:)(v16, v40, a2, *(_QWORD *)(*(_QWORD *)(a3 + 32) + 8));
      v23(v40, a2);
      v23(v16, a2);
      if ((v41 & 1) != 0)
        goto LABEL_28;
      goto LABEL_8;
    }
    if (v38 < 64)
      goto LABEL_27;
    v24 = v16;
LABEL_7:
    v23(v24, a2);
    goto LABEL_8;
  }
  if (dispatch thunk of BinaryInteger.bitWidth.getter(a2, a3) >= 64)
    goto LABEL_23;
LABEL_27:
  v42 = dispatch thunk of BinaryInteger._lowWord.getter(a2, a3);
  v23(v16, a2);
  if (v42 < v57)
  {
LABEL_28:
    do
    {
      __break(1u);
LABEL_29:
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v50, a2, AssociatedTypeWitness, &protocol requirements base descriptor for ExpressibleByIntegerLiteral, &associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
      dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)(&unk_10033A248, 256, AssociatedTypeWitness, AssociatedConformanceWitness);
      v44 = v53;
      dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)(v49, a2, v50);
      v45 = dispatch thunk of static Comparable.< infix(_:_:)(v16, v44, a2, *(_QWORD *)(*(_QWORD *)(a3 + 32) + 8));
      v23(v44, a2);
      AssociatedTypeWitness = (uint64_t)v48;
      (*(void (**)(char *, char *, uint64_t))(v52 + 32))(v48, v16, a2);
      if ((v45 & 1) != 0)
        goto LABEL_33;
      v46 = v57;
      v47 = dispatch thunk of BinaryInteger._lowWord.getter(a2, a3);
      v23((char *)AssociatedTypeWitness, a2);
    }
    while (v47 < v46);
  }
LABEL_8:
  v25 = dispatch thunk of BinaryInteger.bitWidth.getter(a2, a3);
  v21(v13, (uint64_t)v20, a2);
  if (v25 < 65)
  {
    v32 = dispatch thunk of BinaryInteger.bitWidth.getter(a2, a3);
    v23(v13, a2);
    if (v32 != 64 || (dispatch thunk of static BinaryInteger.isSigned.getter(a2, a3) & 1) != 0)
      goto LABEL_20;
  }
  else
  {
    v23(v13, a2);
  }
  AssociatedTypeWitness = (uint64_t)v54;
  v21(v54, (uint64_t)v20, a2);
  v57 = 0x7FFFFFFFFFFFFFFFLL;
  v26 = dispatch thunk of static BinaryInteger.isSigned.getter(a2, a3);
  v27 = dispatch thunk of BinaryInteger.bitWidth.getter(a2, a3);
  if ((v26 & 1) != 0)
  {
    if (v27 > 64)
    {
      v28 = sub_100035EE0();
      v29 = v53;
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(&v57, &type metadata for Int, v28, a2, a3);
      v30 = dispatch thunk of static Comparable.< infix(_:_:)(v29, AssociatedTypeWitness, a2, *(_QWORD *)(*(_QWORD *)(a3 + 32) + 8));
      v23(v29, a2);
      v31 = AssociatedTypeWitness;
      goto LABEL_19;
    }
LABEL_17:
    dispatch thunk of BinaryInteger._lowWord.getter(a2, a3);
    v23((char *)AssociatedTypeWitness, a2);
LABEL_20:
    v35 = dispatch thunk of BinaryInteger._lowWord.getter(a2, a3);
    v23(v20, a2);
    v23(v55, a2);
    return v35;
  }
  if (v27 <= 63)
    goto LABEL_17;
  v56 = 0x7FFFFFFFFFFFFFFFLL;
  v33 = v53;
  (*(void (**)(char *, uint64_t, uint64_t))(v52 + 32))(v53, AssociatedTypeWitness, a2);
  v34 = sub_100035EE0();
  AssociatedTypeWitness = (uint64_t)v51;
  dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(&v56, &type metadata for Int, v34, a2, a3);
  v30 = dispatch thunk of static Comparable.< infix(_:_:)(AssociatedTypeWitness, v33, a2, *(_QWORD *)(*(_QWORD *)(a3 + 32) + 8));
  v23((char *)AssociatedTypeWitness, a2);
  v31 = (uint64_t)v33;
LABEL_19:
  v23((char *)v31, a2);
  if ((v30 & 1) == 0)
    goto LABEL_20;
  __break(1u);
LABEL_33:
  result = ((uint64_t (*)(uint64_t, uint64_t))v23)(AssociatedTypeWitness, a2);
  __break(1u);
  return result;
}

void *RSSI.invalid.unsafeMutableAddressor()
{
  return &static RSSI.invalid;
}

BOOL static RSSI.< infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return a1 < a2;
}

void *RSSI.minimumDiscoveryThreshold.unsafeMutableAddressor()
{
  return &static RSSI.minimumDiscoveryThreshold;
}

uint64_t static RSSI.minimumDiscoveryThreshold.getter()
{
  return -75;
}

uint64_t RSSI.description.getter()
{
  Swift::String v0;
  uint64_t v2;

  v2 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v0._countAndFlagsBits = 1833067552;
  v0._object = (void *)0xE400000000000000;
  String.append(_:)(v0);
  return v2;
}

void RSSI.hash(into:)(int a1, Swift::UInt a2)
{
  Hasher._combine(_:)(a2);
}

Swift::Int RSSI.hashValue.getter(Swift::UInt a1)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(a1);
  return Hasher._finalize()();
}

unint64_t sub_10021020C()
{
  unint64_t result;

  result = qword_10040BB38;
  if (!qword_10040BB38)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for RSSI, &type metadata for RSSI);
    atomic_store(result, (unint64_t *)&qword_10040BB38);
  }
  return result;
}

BOOL sub_100210250(_QWORD *a1, _QWORD *a2)
{
  return *a1 < *a2;
}

BOOL sub_100210264(_QWORD *a1, _QWORD *a2)
{
  return *a2 >= *a1;
}

BOOL sub_100210278(_QWORD *a1, _QWORD *a2)
{
  return *a1 >= *a2;
}

BOOL sub_10021028C(_QWORD *a1, _QWORD *a2)
{
  return *a2 < *a1;
}

uint64_t sub_1002102A0()
{
  Swift::String v0;
  uint64_t v2;

  v2 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v0._countAndFlagsBits = 1833067552;
  v0._object = (void *)0xE400000000000000;
  String.append(_:)(v0);
  return v2;
}

ValueMetadata *type metadata accessor for RSSI()
{
  return &type metadata for RSSI;
}

_UNKNOWN **static NANBloomFilter.Index.allCases.getter()
{
  return &off_1003D7458;
}

uint64_t sub_100210330(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100210D70();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_10021038C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100210D70();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

void sub_1002103D8(_QWORD *a1@<X8>)
{
  *a1 = &off_1003D7480;
}

uint64_t NANBloomFilter.include.getter(uint64_t a1, uint64_t a2, unsigned int a3)
{
  return (a3 >> 8) & 1;
}

void NANBloomFilter.description.getter(uint64_t a1, uint64_t a2, __int16 a3)
{
  Swift::String v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  Swift::String v9;

  type metadata accessor for Data.Iterator(0);
  __chkstk_darwin();
  _StringGuts.grow(_:)(32);
  v5._countAndFlagsBits = 0x6946206D6F6F6C42;
  v5._object = (void *)0xEE00283C7265746CLL;
  String.append(_:)(v5);
  if ((a3 & 0x100) != 0)
    v6 = 2125385;
  else
    v6 = 0x206E4920746F4ELL;
  if ((a3 & 0x100) != 0)
    v7 = 0xE300000000000000;
  else
    v7 = 0xE700000000000000;
  v8 = v7;
  String.append(_:)(*(Swift::String *)&v6);
  swift_bridgeObjectRelease(v7);
  v9._countAndFlagsBits = 8250;
  v9._object = (void *)0xE200000000000000;
  String.append(_:)(v9);
  __asm { BR              X10 }
}

uint64_t sub_100210508()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  Swift::String v14;
  __n128 v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;

  sub_100031FEC(v3, v2);
  sub_100031FEC(v3, v2);
  ((void (*)(uint64_t, unint64_t, _QWORD))Data.Iterator.init(_:at:))(v3, v2, (int)v3);
  sub_10000E614(v3, v2);
  v5 = sub_100034AB4();
  ((void (*)(uint64_t, unint64_t))dispatch thunk of IteratorProtocol.next())(v0, v5);
  if ((*(_BYTE *)(v4 - 97) & 1) != 0)
  {
    v6 = 0;
    v7 = (void *)0xE000000000000000;
  }
  else
  {
    v6 = 0;
    v7 = (void *)0xE000000000000000;
    *(_OWORD *)(v4 - 144) = xmmword_10033A110;
    do
    {
      v8 = *(_BYTE *)(v4 - 98);
      v9 = sub_100012C44((uint64_t *)&unk_100404F10);
      v10 = swift_allocObject(v9, 72, 7);
      *(_OWORD *)(v10 + 16) = *(_OWORD *)(v4 - 144);
      *(_QWORD *)(v10 + 56) = &type metadata for UInt8;
      *(_QWORD *)(v10 + 64) = &protocol witness table for UInt8;
      *(_BYTE *)(v10 + 32) = v8;
      v11 = String.init(format:_:)(1479684133, 0xE400000000000000, v10);
      v13 = v12;
      *(_QWORD *)(v4 - 120) = v6;
      *(_QWORD *)(v4 - 112) = v7;
      swift_bridgeObjectRetain(v7);
      v14._countAndFlagsBits = v11;
      v14._object = v13;
      String.append(_:)(v14);
      swift_bridgeObjectRelease(v7);
      v15 = swift_bridgeObjectRelease(v13);
      v6 = *(_QWORD *)(v4 - 120);
      v7 = *(void **)(v4 - 112);
      ((void (*)(uint64_t, unint64_t, __n128))dispatch thunk of IteratorProtocol.next())(v0, v5, v15);
    }
    while (*(_BYTE *)(v4 - 97) != 1);
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 160) + 8))(v1, v0);
  v16._countAndFlagsBits = v6;
  v16._object = v7;
  String.append(_:)(v16);
  swift_bridgeObjectRelease(v7);
  v17._countAndFlagsBits = 0x3A7865646E69202CLL;
  v17._object = (void *)0xE900000000000020;
  String.append(_:)(v17);
  *(_BYTE *)(v4 - 120) = *(_DWORD *)(v4 - 148);
  _print_unlocked<A, B>(_:_:)(v4 - 120, v4 - 96, &type metadata for NANBloomFilter.Index, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v18._countAndFlagsBits = 62;
  v18._object = (void *)0xE100000000000000;
  String.append(_:)(v18);
  return *(_QWORD *)(v4 - 96);
}

void NANBloomFilter.hash(into:)(uint64_t a1, uint64_t a2, unint64_t a3, __int16 a4)
{
  __n128 v8;

  sub_100031FEC(a2, a3);
  Data.hash(into:)(a1, a2, a3, v8);
  sub_10000E614(a2, a3);
  Hasher._combine(_:)(a4);
  Hasher._combine(_:)(HIBYTE(a4) & 1);
}

uint64_t static NANBloomFilter.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2, __int16 a3, uint64_t a4, uint64_t a5, __int16 a6)
{
  unsigned __int8 v6;
  int v7;
  _BOOL4 v8;
  unsigned int v9;
  unsigned __int8 v10;

  v6 = a6;
  v7 = a3;
  v8 = (a3 & 0x100) == 0;
  v9 = a6 & 0x100;
  _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(a1, a2);
  return v10 & (v7 == v6) & (v8 ^ (v9 >> 8));
}

Swift::Int NANBloomFilter.hashValue.getter(uint64_t a1, unint64_t a2, __int16 a3)
{
  __n128 v6;
  _QWORD v8[9];

  Hasher.init(_seed:)(v8);
  sub_100031FEC(a1, a2);
  Data.hash(into:)(v8, a1, a2, v6);
  sub_10000E614(a1, a2);
  Hasher._combine(_:)(a3);
  Hasher._combine(_:)(HIBYTE(a3) & 1);
  return Hasher._finalize()();
}

Swift::Int sub_100210824()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  Swift::UInt8 v3;
  Swift::UInt8 v4;
  __n128 v5;
  _QWORD v7[9];

  v1 = *(_QWORD *)v0;
  v2 = *(_QWORD *)(v0 + 8);
  v3 = *(_BYTE *)(v0 + 17);
  v4 = *(_BYTE *)(v0 + 16);
  Hasher.init(_seed:)(v7);
  sub_100031FEC(v1, v2);
  Data.hash(into:)(v7, v1, v2, v5);
  sub_10000E614(v1, v2);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

void sub_1002108B4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  Swift::UInt8 v5;
  Swift::UInt8 v6;
  __n128 v7;

  v3 = *(_QWORD *)v1;
  v4 = *(_QWORD *)(v1 + 8);
  v5 = *(_BYTE *)(v1 + 17);
  v6 = *(_BYTE *)(v1 + 16);
  sub_100031FEC(v3, v4);
  Data.hash(into:)(a1, v3, v4, v7);
  sub_10000E614(v3, v4);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v5);
}

Swift::Int sub_100210928()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  Swift::UInt8 v3;
  Swift::UInt8 v4;
  __n128 v5;
  _QWORD v7[9];

  v1 = *(_QWORD *)v0;
  v2 = *(_QWORD *)(v0 + 8);
  v3 = *(_BYTE *)(v0 + 17);
  v4 = *(_BYTE *)(v0 + 16);
  Hasher.init(_seed:)(v7);
  sub_100031FEC(v1, v2);
  Data.hash(into:)(v7, v1, v2, v5);
  sub_10000E614(v1, v2);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

void sub_1002109B4()
{
  uint64_t v0;
  __int16 v1;

  if (*(_BYTE *)(v0 + 17))
    v1 = 256;
  else
    v1 = 0;
  NANBloomFilter.description.getter(*(_QWORD *)v0, *(_QWORD *)(v0 + 8), v1 | *(unsigned __int8 *)(v0 + 16));
}

uint64_t sub_1002109D4(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  int v5;
  unsigned __int8 v6;

  v2 = *(unsigned __int8 *)(a1 + 16);
  v3 = *(unsigned __int8 *)(a1 + 17);
  v4 = *(unsigned __int8 *)(a2 + 16);
  v5 = *(unsigned __int8 *)(a2 + 17);
  _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  return v6 & (v2 == v4) & (v3 ^ v5 ^ 1u);
}

unint64_t sub_100210A34()
{
  unint64_t result;

  result = qword_10040BB40;
  if (!qword_10040BB40)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANBloomFilter.Index, &type metadata for NANBloomFilter.Index);
    atomic_store(result, (unint64_t *)&qword_10040BB40);
  }
  return result;
}

unint64_t sub_100210A7C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10040BB48;
  if (!qword_10040BB48)
  {
    v1 = sub_100013C64(&qword_10040BB50);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_10040BB48);
  }
  return result;
}

unint64_t sub_100210ACC()
{
  unint64_t result;

  result = qword_10040BB58;
  if (!qword_10040BB58)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for NANBloomFilter, &type metadata for NANBloomFilter);
    atomic_store(result, (unint64_t *)&qword_10040BB58);
  }
  return result;
}

uint64_t sub_100210B14(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  sub_100031FEC(*(_QWORD *)a2, v5);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  return a1;
}

uint64_t assignWithCopy for NANBloomFilter(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  sub_100031FEC(*(_QWORD *)a2, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  sub_10000E614(v6, v7);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  return a1;
}

uint64_t assignWithTake for NANBloomFilter(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;

  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_10000E614(v4, v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  return a1;
}

uint64_t getEnumTagSinglePayload for NANBloomFilter(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 18))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 17);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for NANBloomFilter(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_WORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 18) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 18) = 0;
    if (a2)
      *(_BYTE *)(result + 17) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for NANBloomFilter()
{
  return &type metadata for NANBloomFilter;
}

uint64_t storeEnumTagSinglePayload for NANBloomFilter.Index(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_100210CF0 + 4 * byte_10035CB7D[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_100210D24 + 4 * byte_10035CB78[v4]))();
}

uint64_t sub_100210D24(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100210D2C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100210D34);
  return result;
}

uint64_t sub_100210D40(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100210D48);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_100210D4C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100210D54(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NANBloomFilter.Index()
{
  return &type metadata for NANBloomFilter.Index;
}

unint64_t sub_100210D70()
{
  unint64_t result;

  result = qword_10040BB60;
  if (!qword_10040BB60)
  {
    result = swift_getWitnessTable("}?\t", &type metadata for NANBloomFilter.Index);
    atomic_store(result, (unint64_t *)&qword_10040BB60);
  }
  return result;
}

uint64_t WiFiError.init(ioctlReturn:)(uint64_t result, uint64_t a2)
{
  if ((_DWORD)result == -1)
    LODWORD(result) = errno.getter(result, a2);
  return result;
}

uint64_t static WiFiError.securityErrorMessage(from:)(OSStatus a1)
{
  CFStringRef v1;
  __CFString *v2;
  uint64_t v3;

  v1 = SecCopyErrorMessageString(a1, 0);
  if (!v1)
    return 0x6E776F6E6B6E75;
  v2 = (__CFString *)v1;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);

  return v3;
}

char *static WiFiError.systemErrorMessage.getter(uint64_t a1, uint64_t a2)
{
  int v2;
  char *result;

  v2 = errno.getter(a1, a2);
  result = strerror(v2);
  if (result)
    return (char *)String.init(cString:)(result);
  __break(1u);
  return result;
}

uint64_t WiFiError.apiError.getter(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  return ((uint64_t (*)())((char *)sub_100210E8C + 4 * byte_10035CD58[a3]))();
}

void WiFiError.description.getter(uint64_t a1, uint64_t a2, char a3)
{
  __asm { BR              X10 }
}

uint64_t sub_100210F14(uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  unint64_t v18;
  char *v19;
  char *v20;
  void *v21;
  void *v22;
  int v23;
  const char *v24;
  int v25;
  const char *v26;
  Swift::String v27;
  Swift::String v28;

  if (!(_DWORD)v18)
  {
    v22 = (void *)0xE700000000000000;
    v18 = 0x73736563637553;
    goto LABEL_48;
  }
  if ((int)v18 >= 1)
  {
    v19 = strerror(v18);
    if (!v19)
    {
      __break(1u);
      JUMPOUT(0x100211414);
    }
    goto LABEL_4;
  }
  if ((int)v18 > -103)
  {
    if ((int)v18 > -101)
    {
      if ((_DWORD)v18 == -100)
      {
        v18 = 0xD000000000000021;
        v26 = "Invalid Authentication Parameters";
      }
      else
      {
        if ((_DWORD)v18 != -1)
        {
LABEL_55:
          v20 = _s7CoreP2P9WiFiErrorO06kernelE7Message4fromSSs5Int32V_tFZ_0(v18);
          goto LABEL_5;
        }
        v25 = errno.getter(a1, a2);
        v19 = strerror(v25);
        if (v19)
        {
LABEL_4:
          v20 = (char *)String.init(cString:)(v19);
LABEL_5:
          v18 = (unint64_t)v20;
          v22 = v21;
          goto LABEL_48;
        }
        __break(1u);
LABEL_17:
        v18 = 0xD000000000000015;
        v26 = "Cipher Suite Rejected";
      }
    }
    else
    {
      if ((_DWORD)v18 != -102)
      {
        v24 = "Invalid Open Parameters";
LABEL_53:
        v22 = (void *)((unint64_t)(v24 - 32) | 0x8000000000000000);
        v18 = 0xD000000000000017;
        goto LABEL_48;
      }
      v18 = 0xD00000000000001CLL;
      v26 = "Fatal Authentication Failure";
    }
LABEL_47:
    v22 = (void *)((unint64_t)(v26 - 32) | 0x8000000000000000);
    goto LABEL_48;
  }
  v23 = v18 + 3933;
  v18 = 0xD000000000000012;
  v22 = (void *)0x8000000100368090;
  switch(v23)
  {
    case 0:
      v22 = (void *)0xEF64657472617453;
      v18 = 0x20746F4E204D5446;
      break;
    case 1:
      v26 = "Peer Not Rangeable";
      goto LABEL_47;
    case 2:
      v22 = (void *)0xED0000726F727245;
      v18 = 0x20636972656E6547;
      break;
    case 3:
      v24 = "Operation Not Permitted";
      goto LABEL_53;
    case 4:
      v22 = (void *)0xEB00000000657275;
      v18 = 0x6C69614620435049;
      break;
    case 5:
      v18 = 0xD000000000000013;
      v26 = "Reference Not Bound";
      goto LABEL_47;
    case 6:
      v18 = 0xD000000000000027;
      v26 = "Station Unsupported PCO Transition Time";
      goto LABEL_47;
    case 7:
      v18 = 0xD000000000000024;
      v26 = "Station Unsupported 802.11n Features";
      goto LABEL_47;
    case 8:
      v26 = "Supplicant Timeout";
      goto LABEL_47;
    case 9:
      v22 = (void *)0xEB000000004B4D50;
      goto LABEL_51;
    case 10:
      goto LABEL_17;
    case 11:
      v18 = 0xD000000000000018;
      v26 = "Invalid RSN Capabilities";
      goto LABEL_47;
    case 12:
      v24 = "Unsupported RSN Version";
      goto LABEL_53;
    case 13:
      v22 = (void *)0xEC000000504D4B41;
      goto LABEL_51;
    case 14:
      v24 = "Invalid Pairwise Cipher";
      goto LABEL_53;
    case 15:
      v18 = 0xD000000000000014;
      v26 = "Invalid Group Cipher";
      goto LABEL_47;
    case 16:
      v22 = (void *)0xEA00000000004549;
      goto LABEL_51;
    case 17:
      v18 = 0xD000000000000015;
      v26 = "DSSS/OFDM Unsupported";
      goto LABEL_47;
    case 18:
      v18 = 0xD000000000000016;
      v26 = "Short Slot Unsupported";
      goto LABEL_47;
    case 19:
      v18 = 0xD000000000000014;
      v26 = "Unsupported Rate Set";
      goto LABEL_47;
    case 20:
      v22 = (void *)0xE700000000000000;
      v18 = 0x6C6C7546205041;
      break;
    case 21:
      v18 = 0xD000000000000011;
      v26 = "Challenge Failure";
      goto LABEL_47;
    case 22:
      v18 = 0xD000000000000026;
      v26 = "Invalid Authentication Sequence Number";
      goto LABEL_47;
    case 23:
      v18 = 0xD000000000000024;
      v26 = "Authentication Algorithm Unsupported";
      goto LABEL_47;
    case 24:
      v26 = "Association Denied";
      goto LABEL_47;
    case 25:
      v18 = 0xD000000000000014;
      v26 = "Reassociation Denied";
      goto LABEL_47;
    case 26:
      v18 = 0xD000000000000018;
      v26 = "Unsupported Capabilities";
      goto LABEL_47;
    case 27:
      v18 = 0xD000000000000013;
      v26 = "Unspecified failure";
      goto LABEL_47;
    case 28:
      v22 = (void *)0xE700000000000000;
      v18 = 0x74756F656D6954;
      break;
    case 29:
      v22 = (void *)0xEE0074616D726F46;
LABEL_51:
      v18 = 0x2064696C61766E49;
      break;
    case 30:
      v24 = "Operation Not Supported";
      goto LABEL_53;
    case 31:
      v22 = (void *)0xE700000000000000;
      v18 = 0x6E776F6E6B6E55;
      break;
    case 32:
      v18 = 0xD000000000000013;
      v26 = "Insufficient Memory";
      goto LABEL_47;
    case 33:
      break;
    default:
      goto LABEL_55;
  }
LABEL_48:
  _StringGuts.grow(_:)(20);
  swift_bridgeObjectRelease(0xE000000000000000);
  v27._countAndFlagsBits = v18;
  v27._object = v22;
  String.append(_:)(v27);
  swift_bridgeObjectRelease(v22);
  v28._countAndFlagsBits = 62;
  v28._object = (void *)0xE100000000000000;
  String.append(_:)(v28);
  return 0xD000000000000011;
}

void sub_1002114B0()
{
  uint64_t v0;

  WiFiError.description.getter(*(_QWORD *)v0, *(_QWORD *)(v0 + 8), *(_BYTE *)(v0 + 16));
}

uint64_t Error.apiError.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 - 8);
  __chkstk_darwin(a1);
  v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v2 + 16))(v4);
  if (swift_dynamicCast(&v7, v4, a1, &type metadata for WiFiError, 0))
    __asm { BR              X10 }
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, a1);
  return 7;
}

CoreP2P::ParsingError_optional __swiftcall ParsingError.init(rawValue:)(Swift::String rawValue)
{
  void *object;
  Swift::String v2;
  Swift::Int v3;
  CoreP2P::ParsingError_optional v4;

  object = rawValue._object;
  v2._countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1003D51A0, v2);
  swift_bridgeObjectRelease(object);
  if (v3 == 1)
    v4.value = CoreP2P_ParsingError_incorrectType;
  else
    v4.value = CoreP2P_ParsingError_unknownDefault;
  if (v3)
    return v4;
  else
    return 0;
}

uint64_t ParsingError.rawValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return 0x636572726F636E69;
  else
    return 0xD000000000000011;
}

uint64_t sub_100211670(char *a1, char *a2)
{
  return sub_10003C468(*a1, *a2);
}

Swift::Int sub_10021167C()
{
  unsigned __int8 *v0;
  int v1;
  unint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5);
  if (v1)
    v2 = 0x636572726F636E69;
  else
    v2 = 0xD000000000000011;
  if (v1)
    v3 = 0xED00006570795474;
  else
    v3 = 0x8000000100361330;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_10021170C(uint64_t a1)
{
  _BYTE *v1;
  unint64_t v2;
  unint64_t v3;

  if (*v1)
    v2 = 0x636572726F636E69;
  else
    v2 = 0xD000000000000011;
  if (*v1)
    v3 = 0xED00006570795474;
  else
    v3 = 0x8000000100361330;
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_100211778()
{
  unsigned __int8 *v0;
  int v1;
  unint64_t v2;
  unint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5);
  if (v1)
    v2 = 0x636572726F636E69;
  else
    v2 = 0xD000000000000011;
  if (v1)
    v3 = 0xED00006570795474;
  else
    v3 = 0x8000000100361330;
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_100211804@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  Swift::String v3;
  void *v4;
  Swift::Int v5;
  uint64_t result;
  char v7;

  v3._countAndFlagsBits = *a1;
  v4 = (void *)a1[1];
  v3._object = v4;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1003D51A0, v3);
  result = swift_bridgeObjectRelease(v4);
  if (v5 == 1)
    v7 = 1;
  else
    v7 = 2;
  if (!v5)
    v7 = 0;
  *a2 = v7;
  return result;
}

void sub_100211860(unint64_t *a1@<X8>)
{
  _BYTE *v1;
  unint64_t v2;
  unint64_t v3;

  v2 = 0xD000000000000011;
  if (*v1)
    v2 = 0x636572726F636E69;
  v3 = 0x8000000100361330;
  if (*v1)
    v3 = 0xED00006570795474;
  *a1 = v2;
  a1[1] = v3;
}

char *_s7CoreP2P9WiFiErrorO06kernelE7Message4fromSSs5Int32V_tFZ_0(mach_error_t a1)
{
  char *result;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Swift::String v5;
  void *object;
  Swift::String v7;
  Swift::String v8;

  result = mach_error_string(a1);
  if (result)
  {
    v2 = String.init(cString:)(result);
    v4 = v3;
    v5._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int32, &protocol witness table for Int32);
    object = v5._object;
    String.append(_:)(v5);
    swift_bridgeObjectRelease(object);
    v7._countAndFlagsBits = 93;
    v7._object = (void *)0xE100000000000000;
    String.append(_:)(v7);
    swift_bridgeObjectRetain(v4);
    v8._countAndFlagsBits = 91;
    v8._object = (void *)0xE100000000000000;
    String.append(_:)(v8);
    swift_bridgeObjectRelease(v4);
    swift_bridgeObjectRelease(0xE100000000000000);
    return (char *)v2;
  }
  else
  {
    __break(1u);
  }
  return result;
}

unint64_t sub_10021197C(int a1)
{
  unint64_t result;

  if (a1 < 0)
  {
    __break(1u);
    JUMPOUT(0x100211AC8);
  }
  result = 0x73736563637553;
  switch(a1)
  {
    case 0:
      return result;
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      result = 0x2064696C61766E49;
      break;
    case 7:
      result = 0x6874754120746F4ELL;
      break;
    case 8:
      result = 0x44206E6F6974704FLL;
      break;
    case 9:
      result = 0xD000000000000010;
      break;
    case 10:
      result = 0x706E49206C6C754ELL;
      break;
    default:
      result = 0x6E776F6E6B6E55;
      break;
  }
  return result;
}

unint64_t sub_100211AF8()
{
  unint64_t result;

  result = qword_10040BB68;
  if (!qword_10040BB68)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for ParsingError, &type metadata for ParsingError);
    atomic_store(result, (unint64_t *)&qword_10040BB68);
  }
  return result;
}

uint64_t sub_100211B3C(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >= 4)
    return swift_bridgeObjectRetain(a2);
  return result;
}

uint64_t assignWithCopy for WiFiError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  char v5;
  uint64_t v6;
  unint64_t v7;
  char v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_1000130D0(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  sub_100013024(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for WiFiError(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  unint64_t v5;
  char v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  sub_100013024(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for WiFiError(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFD && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 253);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 3)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for WiFiError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 253;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t sub_100211C74(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t sub_100211C7C(uint64_t result, char a2)
{
  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for WiFiError()
{
  return &type metadata for WiFiError;
}

uint64_t storeEnumTagSinglePayload for ParsingError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100211CE0 + 4 * byte_10035CD97[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100211D14 + 4 * byte_10035CD92[v4]))();
}

uint64_t sub_100211D14(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100211D1C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100211D24);
  return result;
}

uint64_t sub_100211D30(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100211D38);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100211D3C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100211D44(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ParsingError()
{
  return &type metadata for ParsingError;
}

unint64_t destroy for TestingError(uint64_t a1)
{
  unint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (result >= 0xFFFFFFFF)
    return swift_bridgeObjectRelease(result);
  return result;
}

uint64_t _s7CoreP2P12TestingErrorOwCP_0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 < 0xFFFFFFFF)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v3;
    swift_bridgeObjectRetain(v3);
  }
  return a1;
}

_QWORD *assignWithCopy for TestingError(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = a1[1];
  v5 = a2[1];
  if (v4 < 0xFFFFFFFF)
  {
    if (v5 >= 0xFFFFFFFF)
    {
      *a1 = *a2;
      v7 = a2[1];
      a1[1] = v7;
      swift_bridgeObjectRetain(v7);
      return a1;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  if (v5 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease(a1[1]);
    goto LABEL_7;
  }
  *a1 = *a2;
  v6 = a2[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t assignWithTake for TestingError(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4 < 0xFFFFFFFF)
    goto LABEL_5;
  v5 = *(_QWORD *)(a2 + 8);
  if (v5 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease(v4);
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v5;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for TestingError(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFC && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 2147483644);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 + 1;
  v5 = v3 - 3;
  if (v4 >= 5)
    return v5;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for TestingError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFB)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 2147483644;
    if (a3 >= 0x7FFFFFFC)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFC)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2 + 3;
  }
  return result;
}

uint64_t sub_100211F74(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

_QWORD *sub_100211F8C(_QWORD *result, int a2)
{
  if (a2 < 0)
  {
    *result = a2 ^ 0x80000000;
    result[1] = 0;
  }
  else if (a2)
  {
    result[1] = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for TestingError()
{
  return &type metadata for TestingError;
}

uint64_t AWDLWiFiDriver.version.getter()
{
  return 658;
}

uint64_t AWDLWiFiDriver.peerPreferredChannels.getter()
{
  return 0x300000000;
}

uint64_t AWDLWiFiDriver.statistics.getter@<X0>(uint64_t a1@<X8>)
{
  _BYTE v3[3720];

  sub_1000B5E04(v3);
  return sub_100063EB8((uint64_t)v3, a1, &qword_100406710);
}

uint64_t AWDLWiFiDriver.lowLatencyStatistics.getter@<X0>(uint64_t a1@<X8>)
{
  _OWORD v3[250];

  sub_1000B5E38(v3);
  return sub_100063EB8((uint64_t)v3, a1, &qword_100406718);
}

void WiFiMACAddress.wifiAddress.getter()
{
  void *v0;
  id v1;
  uint64_t v2;
  uint64_t v3;

  v1 = objc_msgSend(v0, "data");
  static Data._unconditionallyBridgeFromObjectiveC(_:)();
  v3 = v2;

  __asm { BR              X10 }
}

unint64_t sub_1002120B8()
{
  unint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  id v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  id v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  id v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;

  sub_10000E614(v2, v0);
  if (BYTE6(v0) == 6)
  {
    v4 = objc_msgSend(v1, *(SEL *)(v3 + 3208));
    v5 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v4);
    v7 = v6;

    LOBYTE(v4) = Data.subscript.getter(0, v5, v7);
    sub_10000E614(v5, v7);
    v8 = objc_msgSend(v1, *(SEL *)(v3 + 3208));
    v9 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v8);
    v11 = v10;

    LOBYTE(v8) = Data.subscript.getter(1, v9, v11);
    sub_10000E614(v9, v11);
    v12 = objc_msgSend(v1, *(SEL *)(v3 + 3208));
    v13 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v12);
    v15 = v14;

    LOBYTE(v12) = Data.subscript.getter(2, v13, v15);
    sub_10000E614(v13, v15);
    v16 = objc_msgSend(v1, *(SEL *)(v3 + 3208));
    v17 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v16);
    v19 = v18;

    LOBYTE(v16) = Data.subscript.getter(3, v17, v19);
    sub_10000E614(v17, v19);
    v20 = objc_msgSend(v1, *(SEL *)(v3 + 3208));
    v21 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v20);
    v23 = v22;

    LOBYTE(v20) = Data.subscript.getter(4, v21, v23);
    sub_10000E614(v21, v23);
    v24 = objc_msgSend(v1, *(SEL *)(v3 + 3208));
    v25 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v24);
    v27 = v26;

    LOBYTE(v24) = Data.subscript.getter(5, v25, v27);
    sub_10000E614(v25, v27);
    v28 = (unint64_t)v24 << 40;
    v29 = (unint64_t)v20 << 32;
    v30 = (unint64_t)v16 << 24;
    v31 = (unint64_t)v12 << 16;
    v32 = (unint64_t)v8 << 8;
    v33 = v4;
  }
  else
  {
    v33 = 0;
    v32 = 0;
    v31 = 0;
    v30 = 0;
    v29 = 0;
    v28 = 0;
  }
  return v32 | v33 | v31 | v30 | v29 | v28;
}

void WiFiAddress.ipv6LinkLocalAddress.getter(unint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;

  v1 = a1 >> 8;
  v2 = a1 >> 16;
  v3 = a1 >> 24;
  v4 = HIDWORD(a1);
  v5 = a1 >> 40;
  v6 = a1;
  v7 = type metadata accessor for __DataStorage(0);
  swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
  v39 = __DataStorage.init(length:)(16) | 0x4000000000000000;
  Data._Representation.subscript.setter(254, 0);
  Data._Representation.subscript.setter(128, 1);
  v38 = sub_100012C44(&qword_100403E88);
  v8 = swift_allocObject(v38, 38, 7);
  *(_OWORD *)(v8 + 16) = xmmword_10033B190;
  *(_BYTE *)(v8 + 32) = v6;
  *(_BYTE *)(v8 + 33) = v1;
  *(_BYTE *)(v8 + 34) = v2;
  *(_BYTE *)(v8 + 35) = v3;
  *(_BYTE *)(v8 + 36) = v4;
  *(_BYTE *)(v8 + 37) = v5;
  v9 = sub_1001068EC(v8);
  v11 = v10;
  swift_bridgeObjectRelease(v8);
  LODWORD(v8) = Data.subscript.getter(0, v9, v11);
  sub_10000E614(v9, v11);
  Data._Representation.subscript.setter(v8 ^ 2, 8);
  v12 = swift_allocObject(v38, 38, 7);
  *(_OWORD *)(v12 + 16) = xmmword_10033B190;
  *(_BYTE *)(v12 + 32) = v6;
  *(_BYTE *)(v12 + 33) = v1;
  v37 = v1;
  *(_BYTE *)(v12 + 34) = v2;
  *(_BYTE *)(v12 + 35) = v3;
  *(_BYTE *)(v12 + 36) = v4;
  *(_BYTE *)(v12 + 37) = v5;
  v13 = sub_1001068EC(v12);
  v15 = v14;
  swift_bridgeObjectRelease(v12);
  v16 = Data.subscript.getter(1, v13, v15);
  sub_10000E614(v13, v15);
  Data._Representation.subscript.setter(v16, 9);
  v17 = swift_allocObject(v38, 38, 7);
  *(_OWORD *)(v17 + 16) = xmmword_10033B190;
  *(_BYTE *)(v17 + 32) = v6;
  *(_BYTE *)(v17 + 33) = v1;
  *(_BYTE *)(v17 + 34) = v2;
  *(_BYTE *)(v17 + 35) = v3;
  LOBYTE(v1) = v3;
  *(_BYTE *)(v17 + 36) = v4;
  LOBYTE(v3) = v4;
  *(_BYTE *)(v17 + 37) = v5;
  LOBYTE(v4) = v5;
  v18 = sub_1001068EC(v17);
  v20 = v19;
  swift_bridgeObjectRelease(v17);
  v21 = Data.subscript.getter(2, v18, v20);
  sub_10000E614(v18, v20);
  Data._Representation.subscript.setter(v21, 10);
  Data._Representation.subscript.setter(255, 11);
  Data._Representation.subscript.setter(254, 12);
  v22 = swift_allocObject(v38, 38, 7);
  *(_OWORD *)(v22 + 16) = xmmword_10033B190;
  *(_BYTE *)(v22 + 32) = v6;
  *(_BYTE *)(v22 + 33) = v37;
  *(_BYTE *)(v22 + 34) = v2;
  *(_BYTE *)(v22 + 35) = v1;
  *(_BYTE *)(v22 + 36) = v3;
  *(_BYTE *)(v22 + 37) = v4;
  v23 = sub_1001068EC(v22);
  v25 = v24;
  swift_bridgeObjectRelease(v22);
  v26 = Data.subscript.getter(3, v23, v25);
  sub_10000E614(v23, v25);
  Data._Representation.subscript.setter(v26, 13);
  v27 = swift_allocObject(v38, 38, 7);
  *(_OWORD *)(v27 + 16) = xmmword_10033B190;
  *(_BYTE *)(v27 + 32) = v6;
  *(_BYTE *)(v27 + 33) = v37;
  *(_BYTE *)(v27 + 34) = v2;
  *(_BYTE *)(v27 + 35) = v1;
  *(_BYTE *)(v27 + 36) = v3;
  *(_BYTE *)(v27 + 37) = v4;
  v28 = sub_1001068EC(v27);
  v30 = v29;
  swift_bridgeObjectRelease(v27);
  v31 = Data.subscript.getter(4, v28, v30);
  sub_10000E614(v28, v30);
  Data._Representation.subscript.setter(v31, 14);
  v32 = swift_allocObject(v38, 38, 7);
  *(_OWORD *)(v32 + 16) = xmmword_10033B190;
  *(_BYTE *)(v32 + 32) = v6;
  *(_BYTE *)(v32 + 33) = v37;
  *(_BYTE *)(v32 + 34) = v2;
  *(_BYTE *)(v32 + 35) = v1;
  *(_BYTE *)(v32 + 36) = v3;
  *(_BYTE *)(v32 + 37) = v4;
  v33 = sub_1001068EC(v32);
  v35 = v34;
  swift_bridgeObjectRelease(v32);
  v36 = Data.subscript.getter(5, v33, v35);
  sub_10000E614(v33, v35);
  Data._Representation.subscript.setter(v36, 15);
  __asm { BR              X9 }
}

unint64_t sub_10021273C()
{
  unint64_t v0;
  int v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  unsigned __int8 v10;
  uint16x8_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64x2_t v15;
  int32x4_t v16;
  uint64x2_t v17;
  int32x4_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  __n128 v26;
  uint64_t v27;
  uint16x8_t v28;
  uint32x4_t v29;
  uint64x2_t v30;
  uint64x2_t v31;
  int8x16_t v32;
  _QWORD v34[4];
  uint16x8_t v35;
  int32x4_t v36;

  if (BYTE6(v2) < 0x10uLL)
  {
LABEL_16:
    sub_10000E614(v0, v2);
    __break(1u);
  }
  if (!v1)
  {
    v15 = (uint64x2_t)vdupq_n_s64(v0);
    v16 = vuzp1q_s32((int32x4_t)vshlq_u64(v15, (uint64x2_t)xmmword_10033B100), (int32x4_t)vshlq_u64(v15, (uint64x2_t)xmmword_10033B0F0));
    *(int16x4_t *)v16.i8 = vmovn_s32(v16);
    v36 = v16;
    v12 = v0 >> 40;
    v13 = HIWORD(v0);
    v14 = HIBYTE(v0);
    v17 = (uint64x2_t)vdupq_n_s64(v2);
    v18 = vuzp1q_s32((int32x4_t)vshlq_u64(v17, (uint64x2_t)xmmword_10033B100), (int32x4_t)vshlq_u64(v17, (uint64x2_t)xmmword_10033B0F0));
    *(int16x4_t *)v18.i8 = vmovn_s32(v18);
    v35 = (uint16x8_t)v18;
    v10 = v0;
    goto LABEL_12;
  }
  v34[3] = v34;
  if (v1 != 1)
  {
    v19 = *(_QWORD *)(v0 + 16);
    swift_retain();
    v20 = swift_retain();
    v21 = ((uint64_t (*)(uint64_t))__DataStorage._bytes.getter)(v20);
    if (!v21)
    {
LABEL_18:
      __DataStorage._length.getter();
      __break(1u);
      JUMPOUT(0x100212A10);
    }
    v22 = v21;
    v23 = __DataStorage._offset.getter();
    v24 = __OFSUB__(v19, v23);
    v25 = v19 - v23;
    if (!v24)
    {
      v26 = ((__n128 (*)(void))__DataStorage._length.getter)();
      v27 = v22 + v25;
      v10 = *(_BYTE *)(v22 + v25);
      v26.n128_u32[0] = *(_DWORD *)(v27 + 1);
      v28 = vmovl_u8((uint8x8_t)v26.n128_u64[0]);
      v36 = (int32x4_t)v28;
      LOBYTE(v12) = *(_BYTE *)(v27 + 5);
      LOBYTE(v13) = *(_BYTE *)(v27 + 6);
      v14 = *(unsigned __int8 *)(v27 + 7);
      v28.i32[0] = *(_DWORD *)(v27 + 9);
      v35 = vmovl_u8(*(uint8x8_t *)v28.i8);
      swift_release(v2 & 0x3FFFFFFFFFFFFFFFLL);
      swift_release(v0);
      goto LABEL_12;
    }
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if ((int)v0 > (uint64_t)v0 >> 32)
  {
    __break(1u);
    goto LABEL_14;
  }
  v3 = sub_100031FEC(v0, v2);
  v4 = ((uint64_t (*)(uint64_t))__DataStorage._bytes.getter)(v3);
  if (!v4)
  {
    __DataStorage._length.getter();
    __break(1u);
    goto LABEL_18;
  }
  v5 = v4;
  v6 = __DataStorage._offset.getter();
  v7 = (int)v0 - v6;
  if (__OFSUB__((int)v0, v6))
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v8 = ((__n128 (*)(void))__DataStorage._length.getter)();
  v9 = v5 + v7;
  v10 = *(_BYTE *)(v5 + v7);
  v8.n128_u32[0] = *(_DWORD *)(v9 + 1);
  v11 = vmovl_u8((uint8x8_t)v8.n128_u64[0]);
  v36 = (int32x4_t)v11;
  LOBYTE(v12) = *(_BYTE *)(v9 + 5);
  LOBYTE(v13) = *(_BYTE *)(v9 + 6);
  v14 = *(unsigned __int8 *)(v9 + 7);
  v11.i32[0] = *(_DWORD *)(v9 + 9);
  v35 = vmovl_u8(*(uint8x8_t *)v11.i8);
  sub_10000E614(v0, v2);
LABEL_12:
  sub_10000E614(v0, v2);
  sub_10000E614(v0, v2);
  v29 = vmovl_u16((uint16x4_t)(v36.i64[0] & 0xFF00FF00FF00FFLL));
  v30.i64[0] = v29.u32[0];
  v30.i64[1] = v29.u32[1];
  v31 = v30;
  v30.i64[0] = v29.u32[2];
  v30.i64[1] = v29.u32[3];
  v32 = vorrq_s8((int8x16_t)vshlq_u64(v31, (uint64x2_t)xmmword_10033B1D0), (int8x16_t)vshlq_u64(v30, (uint64x2_t)xmmword_10035CF80));
  return (*(_QWORD *)&vorr_s8(*(int8x8_t *)v32.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v32, v32, 8uLL)) | ((unint64_t)v12 << 40) | v10)
       + ((unint64_t)v13 << 48)
       + (v14 << 56);
}

unint64_t static WiFiAddress.randomLinkLocalAddress()()
{
  return sub_10021D0D8() & 0xFFFFFFFFFFFCLL | 2;
}

uint64_t WiFiAddress.init(_:)(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = sub_10000E38C(a1, a2);
  return v2 & 0xFFFFFFFFFFFFLL | ((HIWORD(v2) & 1) << 48);
}

void __swiftcall WiFiAddress.init(_:)(CoreP2P::WiFiAddress_optional *__return_ptr retstr, sockaddr_dl *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  int v7;

  v6 = v2;
  v7 = v3;
  v4 = sub_10021BD08((_BYTE *)&v6 + BYTE5(a2), BYTE6(a2));
  sub_10000E38C(v4, v5);
}

uint64_t WiFiAddress.data.getter(unint64_t a1)
{
  char v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = a1;
  v2 = a1 >> 8;
  v3 = a1 >> 16;
  v4 = a1 >> 24;
  v5 = HIDWORD(a1);
  v6 = a1 >> 40;
  v7 = sub_100012C44(&qword_100403E88);
  v8 = swift_allocObject(v7, 38, 7);
  *(_OWORD *)(v8 + 16) = xmmword_10033B190;
  *(_BYTE *)(v8 + 32) = v1;
  *(_BYTE *)(v8 + 33) = v2;
  *(_BYTE *)(v8 + 34) = v3;
  *(_BYTE *)(v8 + 35) = v4;
  *(_BYTE *)(v8 + 36) = v5;
  *(_BYTE *)(v8 + 37) = v6;
  v9 = sub_1001068EC(v8);
  swift_bridgeObjectRelease(v8);
  return v9;
}

void *WiFiAddress.size.unsafeMutableAddressor()
{
  return &static WiFiAddress.size;
}

void sub_100212BD4(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

void sub_100212C18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (BYTE6(a3) >= 0x10uLL)
  {
    __chkstk_darwin();
    sub_10021BDB4((uint64_t)&v10, v7, v8);
    if (v3)
    {
      swift_willThrow(v9);
      __break(1u);
      JUMPOUT(0x100212CF4);
    }
  }
  else
  {
    v4 = sub_100012C84();
    v5 = swift_allocError(&type metadata for WiFiError, v4, 0, 0);
    *(_QWORD *)v6 = 0;
    *(_QWORD *)(v6 + 8) = 0;
    *(_BYTE *)(v6 + 16) = 2;
    swift_willThrow(v5);
  }
}

void sub_100212D04(uint64_t a1, uint64_t a2)
{
  sub_100216394(a1, a2);
}

void sub_100212D4C(uint64_t a1, uint64_t a2)
{
  sub_100212E24(a1, a2);
}

void sub_100212D94(uint64_t a1, uint64_t a2)
{
  sub_100216264(a1, a2);
}

void sub_100212DDC(uint64_t a1, uint64_t a2)
{
  sub_100212F50(a1, a2);
}

void sub_100212E24(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

void sub_100212E68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (BYTE6(a3))
  {
    __chkstk_darwin();
    sub_10021C20C((uint64_t)&v10, v4, v5);
    if (!v3)
      return;
    swift_willThrow(v6);
    __break(1u);
  }
  v7 = sub_100012C84();
  v8 = swift_allocError(&type metadata for WiFiError, v7, 0, 0);
  *(_QWORD *)v9 = 0;
  *(_QWORD *)(v9 + 8) = 0;
  *(_BYTE *)(v9 + 16) = 2;
  swift_willThrow(v8);
}

void sub_100212F50(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

void sub_100212F94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (BYTE6(a3) >= 4uLL)
  {
    __chkstk_darwin();
    sub_10021CC84((uint64_t)&v10, v7, v8);
    if (v3)
    {
      swift_willThrow(v9);
      __break(1u);
      JUMPOUT(0x100213070);
    }
  }
  else
  {
    v4 = sub_100012C84();
    v5 = swift_allocError(&type metadata for WiFiError, v4, 0, 0);
    *(_QWORD *)v6 = 0;
    *(_QWORD *)(v6 + 8) = 0;
    *(_BYTE *)(v6 + 16) = 2;
    swift_willThrow(v5);
  }
}

void sub_100213080(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

void sub_1002130CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;

  if (BYTE6(a4) >= 0x30uLL)
  {
    __chkstk_darwin();
    sub_100216C18((uint64_t)&v17, 1, v10, v11);
    if (v5)
    {
      swift_willThrow(v12);
      __break(1u);
      JUMPOUT(0x1002131E0);
    }
    v13 = *(_DWORD *)(v6 - 68);
    v14 = *(_OWORD *)(v6 - 64);
    v15 = *(_QWORD *)(v6 - 48);
    v16 = *(_OWORD *)(v6 - 84);
    *(_DWORD *)v4 = *(_DWORD *)(v6 - 88);
    *(_OWORD *)(v4 + 4) = v16;
    *(_DWORD *)(v4 + 20) = v13;
    *(_OWORD *)(v4 + 24) = v14;
    *(_QWORD *)(v4 + 40) = v15;
  }
  else
  {
    v7 = sub_100012C84();
    v8 = swift_allocError(&type metadata for WiFiError, v7, 0, 0);
    *(_QWORD *)v9 = 0;
    *(_QWORD *)(v9 + 8) = 0;
    *(_BYTE *)(v9 + 16) = 2;
    swift_willThrow(v8);
  }
}

void sub_1002131F0(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

void sub_10021323C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _OWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (BYTE6(a4) >= 0x10uLL)
  {
    __chkstk_darwin();
    sub_100216E68((uint64_t)&v13, 1, v10, v11);
    if (v5)
    {
      swift_willThrow(v12);
      __break(1u);
      JUMPOUT(0x100213330);
    }
    *v4 = *(_OWORD *)(v6 - 64);
  }
  else
  {
    v7 = sub_100012C84();
    v8 = swift_allocError(&type metadata for WiFiError, v7, 0, 0);
    *(_QWORD *)v9 = 0;
    *(_QWORD *)(v9 + 8) = 0;
    *(_BYTE *)(v9 + 16) = 2;
    swift_willThrow(v8);
  }
}

void sub_100213340(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

void sub_10021338C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;

  if (BYTE6(a4) >= 0x48uLL)
  {
    __chkstk_darwin();
    sub_100217098((uint64_t)&v20, 1, v10, v11);
    if (v5)
    {
      swift_willThrow(v12);
      __break(1u);
      JUMPOUT(0x1002134B0);
    }
    v13 = *(_QWORD *)(v6 - 56);
    v14 = *(_OWORD *)(v6 - 100);
    v15 = *(_OWORD *)(v6 - 84);
    v16 = *(_QWORD *)(v6 - 68);
    v17 = *(_DWORD *)(v6 - 104);
    v18 = *(_DWORD *)(v6 - 48);
    v19 = *(_DWORD *)(v6 - 44);
    *(_QWORD *)v4 = *(_QWORD *)(v6 - 112);
    *(_DWORD *)(v4 + 8) = v17;
    *(_OWORD *)(v4 + 12) = v14;
    *(_OWORD *)(v4 + 28) = v15;
    *(_QWORD *)(v4 + 44) = v16;
    *(_QWORD *)(v4 + 56) = v13;
    *(_DWORD *)(v4 + 64) = v18;
    *(_DWORD *)(v4 + 68) = v19;
  }
  else
  {
    v7 = sub_100012C84();
    v8 = swift_allocError(&type metadata for WiFiError, v7, 0, 0);
    *(_QWORD *)v9 = 0;
    *(_QWORD *)(v9 + 8) = 0;
    *(_BYTE *)(v9 + 16) = 2;
    swift_willThrow(v8);
  }
}

void sub_1002134C0(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_100213504(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (BYTE6(a3) >= 3uLL)
  {
    __chkstk_darwin();
    sub_10021BFE4((uint64_t)&v11, v8, v9);
    if (v3)
    {
      swift_willThrow(v10);
      __break(1u);
      JUMPOUT(0x1002135E4);
    }
    return v10 & 0xFFFFFF;
  }
  else
  {
    v4 = sub_100012C84();
    v5 = swift_allocError(&type metadata for WiFiError, v4, 0, 0);
    *(_QWORD *)v6 = 0;
    *(_QWORD *)(v6 + 8) = 0;
    *(_BYTE *)(v6 + 16) = 2;
    return swift_willThrow(v5);
  }
}

void sub_1002135F4(uint64_t a1, uint64_t a2)
{
  sub_100213C7C(a1, a2);
}

void sub_10021363C(uint64_t a1, uint64_t a2)
{
  sub_1002145CC(a1, a2);
}

void sub_100213684(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

void sub_1002137E0(uint64_t a1, uint64_t a2)
{
  sub_100214094(a1, a2);
}

void sub_100213828(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

void sub_100213874(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int16 v13;
  int v14;
  int v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  int v21;
  uint64_t v22;

  if (BYTE6(a4) >= 0x68uLL)
  {
    __chkstk_darwin();
    sub_100217524((uint64_t)&v22, 1, v10, v11);
    if (v5)
    {
      swift_willThrow(v12);
      __break(1u);
      JUMPOUT(0x1002139B0);
    }
    v13 = *(_WORD *)(v6 - 132);
    v14 = *(_DWORD *)(v6 - 128);
    v15 = *(_DWORD *)(v6 - 60);
    v16 = *(_OWORD *)(v6 - 124);
    v17 = *(_OWORD *)(v6 - 108);
    v18 = *(_OWORD *)(v6 - 92);
    v19 = *(_OWORD *)(v6 - 76);
    v20 = *(_OWORD *)(v6 - 56);
    v21 = *(_DWORD *)(v6 - 136);
    *(_QWORD *)v4 = *(_QWORD *)(v6 - 144);
    *(_DWORD *)(v4 + 8) = v21;
    *(_WORD *)(v4 + 12) = v13;
    *(_DWORD *)(v4 + 16) = v14;
    *(_OWORD *)(v4 + 20) = v16;
    *(_OWORD *)(v4 + 36) = v17;
    *(_OWORD *)(v4 + 52) = v18;
    *(_OWORD *)(v4 + 68) = v19;
    *(_DWORD *)(v4 + 84) = v15;
    *(_OWORD *)(v4 + 88) = v20;
  }
  else
  {
    v7 = sub_100012C84();
    v8 = swift_allocError(&type metadata for WiFiError, v7, 0, 0);
    *(_QWORD *)v9 = 0;
    *(_QWORD *)(v9 + 8) = 0;
    *(_BYTE *)(v9 + 16) = 2;
    swift_willThrow(v8);
  }
}

void sub_1002139C0(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

void sub_100213A0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  int v14;
  uint64_t v15;

  if (BYTE6(a4) >= 0x18uLL)
  {
    __chkstk_darwin();
    sub_10021779C((uint64_t)&v15, 1, v10, v11);
    if (v5)
    {
      swift_willThrow(v12);
      __break(1u);
      JUMPOUT(0x100213B10);
    }
    v13 = *(_OWORD *)(v6 - 60);
    v14 = *(_DWORD *)(v6 - 44);
    *(_DWORD *)v4 = *(_DWORD *)(v6 - 64);
    *(_OWORD *)(v4 + 4) = v13;
    *(_DWORD *)(v4 + 20) = v14;
  }
  else
  {
    v7 = sub_100012C84();
    v8 = swift_allocError(&type metadata for WiFiError, v7, 0, 0);
    *(_QWORD *)v9 = 0;
    *(_QWORD *)(v9 + 8) = 0;
    *(_BYTE *)(v9 + 16) = 2;
    swift_willThrow(v8);
  }
}

void sub_100213B20(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

void sub_100213C7C(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

void sub_100213CC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (BYTE6(a3) >= 0xCuLL)
  {
    __chkstk_darwin();
    sub_10021CEA4((uint64_t)&v10, v7, v8);
    if (v3)
    {
      swift_willThrow(v9);
      __break(1u);
      JUMPOUT(0x100213D9CLL);
    }
  }
  else
  {
    v4 = sub_100012C84();
    v5 = swift_allocError(&type metadata for WiFiError, v4, 0, 0);
    *(_QWORD *)v6 = 0;
    *(_QWORD *)(v6 + 8) = 0;
    *(_BYTE *)(v6 + 16) = 2;
    swift_willThrow(v5);
  }
}

void sub_100213DAC(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

void sub_100213DF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;

  if (BYTE6(a4) >= 0xB8uLL)
  {
    __chkstk_darwin();
    sub_100217C00((uint64_t)&v18, 1, v10, v11);
    if (v5)
    {
      swift_willThrow(v12);
      __break(1u);
      JUMPOUT(0x100213F1CLL);
    }
    v13 = *(_OWORD *)(v6 - 80);
    *(_OWORD *)(v4 + 128) = *(_OWORD *)(v6 - 96);
    *(_OWORD *)(v4 + 144) = v13;
    *(_OWORD *)(v4 + 160) = *(_OWORD *)(v6 - 64);
    *(_QWORD *)(v4 + 176) = *(_QWORD *)(v6 - 48);
    v14 = *(_OWORD *)(v6 - 144);
    *(_OWORD *)(v4 + 64) = *(_OWORD *)(v6 - 160);
    *(_OWORD *)(v4 + 80) = v14;
    v15 = *(_OWORD *)(v6 - 112);
    *(_OWORD *)(v4 + 96) = *(_OWORD *)(v6 - 128);
    *(_OWORD *)(v4 + 112) = v15;
    v16 = *(_OWORD *)(v6 - 208);
    *(_OWORD *)v4 = *(_OWORD *)(v6 - 224);
    *(_OWORD *)(v4 + 16) = v16;
    v17 = *(_OWORD *)(v6 - 176);
    *(_OWORD *)(v4 + 32) = *(_OWORD *)(v6 - 192);
    *(_OWORD *)(v4 + 48) = v17;
  }
  else
  {
    v7 = sub_100012C84();
    v8 = swift_allocError(&type metadata for WiFiError, v7, 0, 0);
    *(_QWORD *)v9 = 0;
    *(_QWORD *)(v9 + 8) = 0;
    *(_BYTE *)(v9 + 16) = 2;
    swift_willThrow(v8);
  }
}

void sub_100213F2C(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

void sub_100213F78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;

  if (BYTE6(a4) >= 0x28uLL)
  {
    __chkstk_darwin();
    sub_100217E60((uint64_t)&v16, 1, v10, v11);
    if (v5)
    {
      swift_willThrow(v12);
      __break(1u);
      JUMPOUT(0x100214084);
    }
    v13 = *(_DWORD *)(v6 - 44);
    v14 = *(_OWORD *)(v6 - 76);
    v15 = *(_OWORD *)(v6 - 60);
    *(_DWORD *)v4 = *(_DWORD *)(v6 - 80);
    *(_OWORD *)(v4 + 4) = v14;
    *(_OWORD *)(v4 + 20) = v15;
    *(_DWORD *)(v4 + 36) = v13;
  }
  else
  {
    v7 = sub_100012C84();
    v8 = swift_allocError(&type metadata for WiFiError, v7, 0, 0);
    *(_QWORD *)v9 = 0;
    *(_QWORD *)(v9 + 8) = 0;
    *(_BYTE *)(v9 + 16) = 2;
    swift_willThrow(v8);
  }
}

void sub_100214094(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

void sub_1002140D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (BYTE6(a3) >= 8uLL)
  {
    __chkstk_darwin();
    sub_10021DA70((uint64_t)&v10, v7, v8);
    if (v3)
    {
      swift_willThrow(v9);
      __break(1u);
      JUMPOUT(0x1002141B4);
    }
  }
  else
  {
    v4 = sub_100012C84();
    v5 = swift_allocError(&type metadata for WiFiError, v4, 0, 0);
    *(_QWORD *)v6 = 0;
    *(_QWORD *)(v6 + 8) = 0;
    *(_BYTE *)(v6 + 16) = 2;
    swift_willThrow(v5);
  }
}

void sub_1002141C4(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

void sub_100214320(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

void sub_10021436C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  int v18;
  uint64_t v19;

  if (BYTE6(a4) >= 0x44uLL)
  {
    __chkstk_darwin();
    sub_1002182CC((uint64_t)&v19, 1, v10, v11);
    if (v5)
    {
      swift_willThrow(v12);
      __break(1u);
      JUMPOUT(0x100214488);
    }
    v13 = *(_DWORD *)(v6 - 92);
    v14 = *(_QWORD *)(v6 - 100);
    v15 = *(_OWORD *)(v6 - 88);
    v16 = *(_OWORD *)(v6 - 72);
    v17 = *(_OWORD *)(v6 - 56);
    v18 = *(_DWORD *)(v6 - 104);
    *(_DWORD *)v4 = *(_DWORD *)(v6 - 108);
    *(_DWORD *)(v4 + 4) = v18;
    *(_QWORD *)(v4 + 8) = v14;
    *(_DWORD *)(v4 + 16) = v13;
    *(_OWORD *)(v4 + 20) = v15;
    *(_OWORD *)(v4 + 36) = v16;
    *(_OWORD *)(v4 + 52) = v17;
  }
  else
  {
    v7 = sub_100012C84();
    v8 = swift_allocError(&type metadata for WiFiError, v7, 0, 0);
    *(_QWORD *)v9 = 0;
    *(_QWORD *)(v9 + 8) = 0;
    *(_BYTE *)(v9 + 16) = 2;
    swift_willThrow(v8);
  }
}

void sub_100214498(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

void sub_1002144DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (BYTE6(a3) >= 0x10uLL)
  {
    __chkstk_darwin();
    sub_10021CA50((uint64_t)&v10, v7, v8);
    if (v3)
    {
      swift_willThrow(v9);
      __break(1u);
      JUMPOUT(0x1002145BCLL);
    }
  }
  else
  {
    v4 = sub_100012C84();
    v5 = swift_allocError(&type metadata for WiFiError, v4, 0, 0);
    *(_QWORD *)v6 = 0;
    *(_QWORD *)(v6 + 8) = 0;
    *(_BYTE *)(v6 + 16) = 2;
    swift_willThrow(v5);
  }
}

void sub_1002145CC(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

void sub_100214610(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (BYTE6(a3) >= 2uLL)
  {
    __chkstk_darwin();
    sub_10021D850((uint64_t)&v10, v7, v8);
    if (v3)
    {
      swift_willThrow(v9);
      __break(1u);
      JUMPOUT(0x1002146ECLL);
    }
  }
  else
  {
    v4 = sub_100012C84();
    v5 = swift_allocError(&type metadata for WiFiError, v4, 0, 0);
    *(_QWORD *)v6 = 0;
    *(_QWORD *)(v6 + 8) = 0;
    *(_BYTE *)(v6 + 16) = 2;
    swift_willThrow(v5);
  }
}

void sub_1002146FC(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

void sub_100214748(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _OWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  if (BYTE6(a4) >= 0xD0uLL)
  {
    __chkstk_darwin();
    sub_100218524((uint64_t)&v19, 1, v10, v11);
    if (v5)
    {
      swift_willThrow(v12);
      __break(1u);
      JUMPOUT(0x100214884);
    }
    v13 = *(_OWORD *)(v6 - 72);
    v4[10] = *(_OWORD *)(v6 - 88);
    v4[11] = v13;
    v4[12] = *(_OWORD *)(v6 - 56);
    v14 = *(_OWORD *)(v6 - 136);
    v4[6] = *(_OWORD *)(v6 - 152);
    v4[7] = v14;
    v15 = *(_OWORD *)(v6 - 104);
    v4[8] = *(_OWORD *)(v6 - 120);
    v4[9] = v15;
    v16 = *(_OWORD *)(v6 - 200);
    v4[2] = *(_OWORD *)(v6 - 216);
    v4[3] = v16;
    v17 = *(_OWORD *)(v6 - 168);
    v4[4] = *(_OWORD *)(v6 - 184);
    v4[5] = v17;
    v18 = *(_OWORD *)(v6 - 232);
    *v4 = *(_OWORD *)(v6 - 248);
    v4[1] = v18;
  }
  else
  {
    v7 = sub_100012C84();
    v8 = swift_allocError(&type metadata for WiFiError, v7, 0, 0);
    *(_QWORD *)v9 = 0;
    *(_QWORD *)(v9 + 8) = 0;
    *(_BYTE *)(v9 + 16) = 2;
    swift_willThrow(v8);
  }
}

void sub_100214894(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

void sub_100214AA0(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

void sub_100214CAC(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

void sub_100214CF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  __int128 v14;
  uint64_t v15;

  if (BYTE6(a4) >= 0x24uLL)
  {
    __chkstk_darwin();
    sub_100218BCC((uint64_t)&v15, 1, v10, v11);
    if (v5)
    {
      swift_willThrow(v12);
      __break(1u);
      JUMPOUT(0x100214DF4);
    }
    v13 = *(_DWORD *)(v6 - 48);
    v14 = *(_OWORD *)(v6 - 64);
    *(_OWORD *)v4 = *(_OWORD *)(v6 - 80);
    *(_OWORD *)(v4 + 16) = v14;
    *(_DWORD *)(v4 + 32) = v13;
  }
  else
  {
    v7 = sub_100012C84();
    v8 = swift_allocError(&type metadata for WiFiError, v7, 0, 0);
    *(_QWORD *)v9 = 0;
    *(_QWORD *)(v9 + 8) = 0;
    *(_BYTE *)(v9 + 16) = 2;
    swift_willThrow(v8);
  }
}

void sub_100214E04(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

void sub_100214E50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int16 v13;
  char v14;
  int v15;
  int v16;
  __int16 v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;

  if (BYTE6(a4) >= 0x48uLL)
  {
    __chkstk_darwin();
    sub_100218E04((uint64_t)&v21, 1, v10, v11);
    if (v5)
    {
      swift_willThrow(v12);
      __break(1u);
      JUMPOUT(0x100214F74);
    }
    v13 = *(_WORD *)(v6 - 80);
    v14 = *(_BYTE *)(v6 - 78);
    v15 = *(_DWORD *)(v6 - 52);
    v16 = *(_DWORD *)(v6 - 48);
    v17 = *(_WORD *)(v6 - 44);
    v18 = *(_OWORD *)(v6 - 76);
    v19 = *(_QWORD *)(v6 - 60);
    v20 = *(_OWORD *)(v6 - 96);
    *(_OWORD *)v4 = *(_OWORD *)(v6 - 112);
    *(_OWORD *)(v4 + 16) = v20;
    *(_WORD *)(v4 + 32) = v13;
    *(_BYTE *)(v4 + 34) = v14;
    *(_OWORD *)(v4 + 36) = v18;
    *(_QWORD *)(v4 + 52) = v19;
    *(_DWORD *)(v4 + 60) = v15;
    *(_DWORD *)(v4 + 64) = v16;
    *(_WORD *)(v4 + 68) = v17;
  }
  else
  {
    v7 = sub_100012C84();
    v8 = swift_allocError(&type metadata for WiFiError, v7, 0, 0);
    *(_QWORD *)v9 = 0;
    *(_QWORD *)(v9 + 8) = 0;
    *(_BYTE *)(v9 + 16) = 2;
    swift_willThrow(v8);
  }
}

void sub_100214F84(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

void sub_1002150E0(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_100215124(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  __int16 v12;
  int v13;
  uint64_t v14;

  if (BYTE6(a3) >= 0xAuLL)
  {
    __chkstk_darwin();
    sub_10021C814((uint64_t)&v14, v9, v10);
    *(_QWORD *)(v4 - 40) = v11;
    *(_WORD *)(v4 - 32) = v12;
    if (v3)
    {
      swift_willThrow(v11);
      __break(1u);
      JUMPOUT(0x100215228);
    }
    v13 = *(_DWORD *)(v4 - 34);
    *(_WORD *)(v4 - 40) = v11;
    *(_DWORD *)(v4 - 38) = v11 >> 16;
    *(_DWORD *)(v4 - 34) = v13;
    return *(_QWORD *)(v4 - 40);
  }
  else
  {
    v5 = sub_100012C84();
    v6 = swift_allocError(&type metadata for WiFiError, v5, 0, 0);
    *(_QWORD *)v7 = 0;
    *(_QWORD *)(v7 + 8) = 0;
    *(_BYTE *)(v7 + 16) = 2;
    return swift_willThrow(v6);
  }
}

void sub_100215238(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

void sub_100215284(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;

  if (BYTE6(a4) >= 0x20uLL)
  {
    __chkstk_darwin();
    sub_100219288((uint64_t)&v16, 1, v10, v11);
    if (v5)
    {
      swift_willThrow(v12);
      __break(1u);
      JUMPOUT(0x100215390);
    }
    v13 = *(_BYTE *)(v6 - 64);
    v14 = *(_WORD *)(v6 - 52);
    v15 = *(_QWORD *)(v6 - 60);
    *(_OWORD *)v4 = *(_OWORD *)(v6 - 80);
    *(_BYTE *)(v4 + 16) = v13;
    *(_QWORD *)(v4 + 20) = v15;
    *(_WORD *)(v4 + 28) = v14;
  }
  else
  {
    v7 = sub_100012C84();
    v8 = swift_allocError(&type metadata for WiFiError, v7, 0, 0);
    *(_QWORD *)v9 = 0;
    *(_QWORD *)(v9 + 8) = 0;
    *(_BYTE *)(v9 + 16) = 2;
    swift_willThrow(v8);
  }
}

void sub_1002153A0(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

void sub_1002153EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;
  int v15;
  uint64_t v16;

  if (BYTE6(a4) >= 0x14uLL)
  {
    __chkstk_darwin();
    sub_1002194D0((uint64_t)&v16, 1, v10, v11);
    if (v5)
    {
      swift_willThrow(v12);
      __break(1u);
      JUMPOUT(0x1002154F8);
    }
    v13 = *(_WORD *)(v6 - 44);
    v14 = *(_QWORD *)(v6 - 56);
    v15 = *(_DWORD *)(v6 - 48);
    *(_WORD *)v4 = *(_WORD *)(v6 - 60);
    *(_QWORD *)(v4 + 4) = v14;
    *(_DWORD *)(v4 + 12) = v15;
    *(_WORD *)(v4 + 16) = v13;
  }
  else
  {
    v7 = sub_100012C84();
    v8 = swift_allocError(&type metadata for WiFiError, v7, 0, 0);
    *(_QWORD *)v9 = 0;
    *(_QWORD *)(v9 + 8) = 0;
    *(_BYTE *)(v9 + 16) = 2;
    swift_willThrow(v8);
  }
}

void sub_100215508(uint64_t a1, uint64_t a2)
{
  sub_100215FB4(a1, a2);
}

void sub_100215550(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

void sub_10021559C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;

  if (BYTE6(a4) >= 0x14uLL)
  {
    __chkstk_darwin();
    sub_100219718((uint64_t)&v14, 1, v10, v11);
    if (v5)
    {
      swift_willThrow(v12);
      __break(1u);
      JUMPOUT(0x100215698);
    }
    v13 = *(_DWORD *)(v6 - 48);
    *(_OWORD *)v4 = *(_OWORD *)(v6 - 64);
    *(_DWORD *)(v4 + 16) = v13;
  }
  else
  {
    v7 = sub_100012C84();
    v8 = swift_allocError(&type metadata for WiFiError, v7, 0, 0);
    *(_QWORD *)v9 = 0;
    *(_QWORD *)(v9 + 8) = 0;
    *(_BYTE *)(v9 + 16) = 2;
    swift_willThrow(v8);
  }
}

void sub_1002156A8(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

void sub_1002156F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  __int16 v14;
  __int128 v15;
  uint64_t v16;

  if (BYTE6(a4) >= 0x1CuLL)
  {
    __chkstk_darwin();
    sub_100219950((uint64_t)&v16, 1, v10, v11);
    if (v5)
    {
      swift_willThrow(v12);
      __break(1u);
      JUMPOUT(0x100215800);
    }
    v13 = *(_DWORD *)(v6 - 64);
    v14 = *(_WORD *)(v6 - 44);
    v15 = *(_OWORD *)(v6 - 60);
    *(_WORD *)v4 = *(_WORD *)(v6 - 68);
    *(_DWORD *)(v4 + 4) = v13;
    *(_OWORD *)(v4 + 8) = v15;
    *(_WORD *)(v4 + 24) = v14;
  }
  else
  {
    v7 = sub_100012C84();
    v8 = swift_allocError(&type metadata for WiFiError, v7, 0, 0);
    *(_QWORD *)v9 = 0;
    *(_QWORD *)(v9 + 8) = 0;
    *(_BYTE *)(v9 + 16) = 2;
    swift_willThrow(v8);
  }
}

void sub_100215810(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

void sub_100215A1C(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

void sub_100215A68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;

  if (BYTE6(a4) >= 0x10uLL)
  {
    __chkstk_darwin();
    sub_100219DBC((uint64_t)&v15, 1, v10, v11);
    if (v5)
    {
      swift_willThrow(v12);
      __break(1u);
      JUMPOUT(0x100215B64);
    }
    v14 = *(_DWORD *)(v6 - 48);
    v13 = *(_DWORD *)(v6 - 44);
    *(_QWORD *)v4 = *(_QWORD *)(v6 - 56);
    *(_DWORD *)(v4 + 8) = v14;
    *(_DWORD *)(v4 + 12) = v13;
  }
  else
  {
    v7 = sub_100012C84();
    v8 = swift_allocError(&type metadata for WiFiError, v7, 0, 0);
    *(_QWORD *)v9 = 0;
    *(_QWORD *)(v9 + 8) = 0;
    *(_BYTE *)(v9 + 16) = 2;
    swift_willThrow(v8);
  }
}

void sub_100215B74(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

void sub_100215BC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int16 v13;
  int v14;
  uint64_t v15;

  if (BYTE6(a4) >= 0x16uLL)
  {
    __chkstk_darwin();
    sub_100219FF4((uint64_t)&v15, 1, v10, v11);
    if (v5)
    {
      swift_willThrow(v12);
      __break(1u);
      JUMPOUT(0x100215CC4);
    }
    v13 = *(_WORD *)(v6 - 44);
    v14 = *(_DWORD *)(v6 - 48);
    *(_OWORD *)v4 = *(_OWORD *)(v6 - 64);
    *(_DWORD *)(v4 + 16) = v14;
    *(_WORD *)(v4 + 20) = v13;
  }
  else
  {
    v7 = sub_100012C84();
    v8 = swift_allocError(&type metadata for WiFiError, v7, 0, 0);
    *(_QWORD *)v9 = 0;
    *(_QWORD *)(v9 + 8) = 0;
    *(_BYTE *)(v9 + 16) = 2;
    swift_willThrow(v8);
  }
}

void sub_100215CD4(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

void sub_100215D20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int16 v13;
  char v14;
  __int16 v15;
  int v16;
  uint64_t v17;

  if (BYTE6(a4) >= 0x12uLL)
  {
    __chkstk_darwin();
    sub_10021A234((uint64_t)&v17, 1, v10, v11);
    if (v5)
    {
      swift_willThrow(v12);
      __break(1u);
      JUMPOUT(0x100215E34);
    }
    v13 = *(_WORD *)(v6 - 52);
    v14 = *(_BYTE *)(v6 - 50);
    v15 = *(_WORD *)(v6 - 48);
    v16 = *(_DWORD *)(v6 - 56);
    *(_QWORD *)v4 = *(_QWORD *)(v6 - 64);
    *(_DWORD *)(v4 + 8) = v16;
    *(_WORD *)(v4 + 12) = v13;
    *(_BYTE *)(v4 + 14) = v14;
    *(_WORD *)(v4 + 16) = v15;
  }
  else
  {
    v7 = sub_100012C84();
    v8 = swift_allocError(&type metadata for WiFiError, v7, 0, 0);
    *(_QWORD *)v9 = 0;
    *(_QWORD *)(v9 + 8) = 0;
    *(_BYTE *)(v9 + 16) = 2;
    swift_willThrow(v8);
  }
}

void sub_100215E44(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

void sub_100215E90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  int v14;
  __int16 v15;
  uint64_t v16;
  uint64_t v17;

  if (BYTE6(a4) >= 0x1CuLL)
  {
    __chkstk_darwin();
    sub_10021A484((uint64_t)&v17, 1, v10, v11);
    if (v5)
    {
      swift_willThrow(v12);
      __break(1u);
      JUMPOUT(0x100215FA4);
    }
    v13 = *(_BYTE *)(v6 - 64);
    v14 = *(_DWORD *)(v6 - 52);
    v15 = *(_WORD *)(v6 - 48);
    v16 = *(_QWORD *)(v6 - 60);
    *(_QWORD *)v4 = *(_QWORD *)(v6 - 72);
    *(_BYTE *)(v4 + 8) = v13;
    *(_QWORD *)(v4 + 12) = v16;
    *(_DWORD *)(v4 + 20) = v14;
    *(_WORD *)(v4 + 24) = v15;
  }
  else
  {
    v7 = sub_100012C84();
    v8 = swift_allocError(&type metadata for WiFiError, v7, 0, 0);
    *(_QWORD *)v9 = 0;
    *(_QWORD *)(v9 + 8) = 0;
    *(_BYTE *)(v9 + 16) = 2;
    swift_willThrow(v8);
  }
}

void sub_100215FB4(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

void sub_100216000(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  int v14;
  __int16 v15;
  uint64_t v16;
  uint64_t v17;

  if (BYTE6(a4) >= 0x1CuLL)
  {
    __chkstk_darwin();
    sub_10021A6D4((uint64_t)&v17, 1, v10, v11);
    if (v5)
    {
      swift_willThrow(v12);
      __break(1u);
      JUMPOUT(0x100216114);
    }
    v13 = *(_BYTE *)(v6 - 64);
    v14 = *(_DWORD *)(v6 - 52);
    v15 = *(_WORD *)(v6 - 48);
    v16 = *(_QWORD *)(v6 - 60);
    *(_QWORD *)v4 = *(_QWORD *)(v6 - 72);
    *(_BYTE *)(v4 + 8) = v13;
    *(_QWORD *)(v4 + 12) = v16;
    *(_DWORD *)(v4 + 20) = v14;
    *(_WORD *)(v4 + 24) = v15;
  }
  else
  {
    v7 = sub_100012C84();
    v8 = swift_allocError(&type metadata for WiFiError, v7, 0, 0);
    *(_QWORD *)v9 = 0;
    *(_QWORD *)(v9 + 8) = 0;
    *(_BYTE *)(v9 + 16) = 2;
    swift_willThrow(v8);
  }
}

void sub_100216124(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

void sub_100216168(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (BYTE6(a3) >= 0xCuLL)
  {
    __chkstk_darwin();
    sub_10021C5F0((uint64_t)&v10, v7, v8);
    if (v3)
    {
      swift_willThrow(v9);
      __break(1u);
      JUMPOUT(0x100216244);
    }
  }
  else
  {
    v4 = sub_100012C84();
    v5 = swift_allocError(&type metadata for WiFiError, v4, 0, 0);
    *(_QWORD *)v6 = 0;
    *(_QWORD *)(v6 + 8) = 0;
    *(_BYTE *)(v6 + 16) = 2;
    swift_willThrow(v5);
  }
}

void sub_100216264(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

void sub_1002162A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (BYTE6(a3) >= 8uLL)
  {
    __chkstk_darwin();
    sub_10021D410((uint64_t)&v10, v7, v8);
    if (v3)
    {
      swift_willThrow(v9);
      __break(1u);
      JUMPOUT(0x100216384);
    }
  }
  else
  {
    v4 = sub_100012C84();
    v5 = swift_allocError(&type metadata for WiFiError, v4, 0, 0);
    *(_QWORD *)v6 = 0;
    *(_QWORD *)(v6 + 8) = 0;
    *(_BYTE *)(v6 + 16) = 2;
    swift_willThrow(v5);
  }
}

void sub_100216394(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

void sub_1002163D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (BYTE6(a3) >= 2uLL)
  {
    __chkstk_darwin();
    sub_10021D1F0((uint64_t)&v10, v7, v8);
    if (v3)
    {
      swift_willThrow(v9);
      __break(1u);
      JUMPOUT(0x1002164B4);
    }
  }
  else
  {
    v4 = sub_100012C84();
    v5 = swift_allocError(&type metadata for WiFiError, v4, 0, 0);
    *(_QWORD *)v6 = 0;
    *(_QWORD *)(v6 + 8) = 0;
    *(_BYTE *)(v6 + 16) = 2;
    swift_willThrow(v5);
  }
}

void sub_1002164C4(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

void sub_100216510(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;

  if (BYTE6(a4) >= 0x18uLL)
  {
    __chkstk_darwin();
    sub_10021A924((uint64_t)&v16, 1, v10, v11);
    if (v5)
    {
      swift_willThrow(v12);
      __break(1u);
      JUMPOUT(0x10021660CLL);
    }
    v13 = *(_QWORD *)(v6 - 56);
    v14 = *(_DWORD *)(v6 - 48);
    v15 = *(_DWORD *)(v6 - 44);
    *(_QWORD *)v4 = *(_QWORD *)(v6 - 64);
    *(_QWORD *)(v4 + 8) = v13;
    *(_DWORD *)(v4 + 16) = v14;
    *(_DWORD *)(v4 + 20) = v15;
  }
  else
  {
    v7 = sub_100012C84();
    v8 = swift_allocError(&type metadata for WiFiError, v7, 0, 0);
    *(_QWORD *)v9 = 0;
    *(_QWORD *)(v9 + 8) = 0;
    *(_BYTE *)(v9 + 16) = 2;
    swift_willThrow(v8);
  }
}

void sub_10021661C(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

void sub_100216660(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (BYTE6(a3) >= 0x10uLL)
  {
    __chkstk_darwin();
    sub_10021D630((uint64_t)&v10, v7, v8);
    if (v3)
    {
      swift_willThrow(v9);
      __break(1u);
      JUMPOUT(0x10021673CLL);
    }
  }
  else
  {
    v4 = sub_100012C84();
    v5 = swift_allocError(&type metadata for WiFiError, v4, 0, 0);
    *(_QWORD *)v6 = 0;
    *(_QWORD *)(v6 + 8) = 0;
    *(_BYTE *)(v6 + 16) = 2;
    swift_willThrow(v5);
  }
}

void sub_10021674C(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

void sub_100216798(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (BYTE6(a4) >= 8uLL)
  {
    __chkstk_darwin();
    sub_10021AB64((uint64_t)&v13, 1, v10, v11);
    if (v5)
    {
      swift_willThrow(v12);
      __break(1u);
      JUMPOUT(0x10021688CLL);
    }
    *v4 = *(_QWORD *)(v6 - 48);
  }
  else
  {
    v7 = sub_100012C84();
    v8 = swift_allocError(&type metadata for WiFiError, v7, 0, 0);
    *(_QWORD *)v9 = 0;
    *(_QWORD *)(v9 + 8) = 0;
    *(_BYTE *)(v9 + 16) = 2;
    swift_willThrow(v8);
  }
}

void sub_10021689C(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

void sub_1002168E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (BYTE6(a3) >= 4uLL)
  {
    __chkstk_darwin();
    sub_10021DC90((uint64_t)&v10, v7, v8);
    if (v3)
    {
      swift_willThrow(v9);
      __break(1u);
      JUMPOUT(0x1002169BCLL);
    }
  }
  else
  {
    v4 = sub_100012C84();
    v5 = swift_allocError(&type metadata for WiFiError, v4, 0, 0);
    *(_QWORD *)v6 = 0;
    *(_QWORD *)(v6 + 8) = 0;
    *(_BYTE *)(v6 + 16) = 2;
    swift_willThrow(v5);
  }
}

void sub_1002169CC(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

void sub_100216A10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (BYTE6(a3) >= 4uLL)
  {
    __chkstk_darwin();
    sub_10021DEB0((uint64_t)&v10, v7, v8);
    if (v3)
    {
      swift_willThrow(v9);
      __break(1u);
      JUMPOUT(0x100216AECLL);
    }
  }
  else
  {
    v4 = sub_100012C84();
    v5 = swift_allocError(&type metadata for WiFiError, v4, 0, 0);
    *(_QWORD *)v6 = 0;
    *(_QWORD *)(v6 + 8) = 0;
    *(_BYTE *)(v6 + 16) = 2;
    swift_willThrow(v5);
  }
}

id WiFiAddress.apiAddress.getter(uint64_t a1)
{
  return objc_msgSend(objc_allocWithZone((Class)WiFiMACAddress), "initWithAddress:", a1 & 0xFFFFFFFFFFFFLL);
}

uint64_t WiFiAddress.description.getter(unint64_t a1)
{
  char v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = a1;
  v2 = a1 >> 8;
  v3 = a1 >> 16;
  v4 = a1 >> 24;
  v5 = HIDWORD(a1);
  v6 = a1 >> 40;
  v7 = sub_100012C44((uint64_t *)&unk_100404F10);
  v8 = swift_allocObject(v7, 272, 7);
  *(_OWORD *)(v8 + 16) = xmmword_10033B190;
  *(_QWORD *)(v8 + 56) = &type metadata for UInt8;
  *(_QWORD *)(v8 + 64) = &protocol witness table for UInt8;
  *(_BYTE *)(v8 + 32) = v1;
  *(_QWORD *)(v8 + 96) = &type metadata for UInt8;
  *(_QWORD *)(v8 + 104) = &protocol witness table for UInt8;
  *(_BYTE *)(v8 + 72) = v2;
  *(_QWORD *)(v8 + 136) = &type metadata for UInt8;
  *(_QWORD *)(v8 + 144) = &protocol witness table for UInt8;
  *(_BYTE *)(v8 + 112) = v3;
  *(_QWORD *)(v8 + 176) = &type metadata for UInt8;
  *(_QWORD *)(v8 + 184) = &protocol witness table for UInt8;
  *(_BYTE *)(v8 + 152) = v4;
  *(_QWORD *)(v8 + 216) = &type metadata for UInt8;
  *(_QWORD *)(v8 + 224) = &protocol witness table for UInt8;
  *(_BYTE *)(v8 + 192) = v5;
  *(_QWORD *)(v8 + 256) = &type metadata for UInt8;
  *(_QWORD *)(v8 + 264) = &protocol witness table for UInt8;
  *(_BYTE *)(v8 + 232) = v6;
  return String.init(format:_:)(0xD00000000000001DLL, 0x80000001003680D0, v8);
}

void __swiftcall WiFiAddress.init(_:_:_:_:_:_:)(CoreP2P::WiFiAddress *__return_ptr retstr, Swift::UInt8 a2, Swift::UInt8 a3, Swift::UInt8 a4, Swift::UInt8 a5, Swift::UInt8 a6, Swift::UInt8 a7)
{
  ;
}

void sub_100216C18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }
}

void *sub_100216C7C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t __src, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  _DWORD *v24;
  uint64_t v25;
  size_t v26;
  uint64_t v27;
  uint64_t v28;
  void *result;
  int v30;
  uint64_t v31;
  __int16 v32;
  char v33;
  char v34;
  char v35;
  char v36;

  v31 = v27;
  v32 = v28;
  v33 = BYTE2(v28);
  v34 = BYTE3(v28);
  v35 = BYTE4(v28);
  v36 = BYTE5(v28);
  if (!v24)
  {
    __break(1u);
    JUMPOUT(0x100216CECLL);
  }
  result = memcpy(v24, &v31, v26);
  v30 = v24[5];
  *(_DWORD *)v25 = *v24;
  *(_OWORD *)(v25 + 4) = *(_OWORD *)(v24 + 1);
  *(_DWORD *)(v25 + 20) = v30;
  *(_OWORD *)(v25 + 24) = *(_OWORD *)(v24 + 6);
  *(_QWORD *)(v25 + 40) = *((_QWORD *)v24 + 5);
  return result;
}

void sub_100216E68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }
}

void *sub_100216ECC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t __src, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  _OWORD *v24;
  _OWORD *v25;
  size_t v26;
  uint64_t v27;
  uint64_t v28;
  void *result;
  uint64_t v30;
  __int16 v31;
  char v32;
  char v33;
  char v34;
  char v35;

  v30 = v27;
  v31 = v28;
  v32 = BYTE2(v28);
  v33 = BYTE3(v28);
  v34 = BYTE4(v28);
  v35 = BYTE5(v28);
  if (!v24)
  {
    __break(1u);
    JUMPOUT(0x100216F3CLL);
  }
  result = memcpy(v24, &v30, v26);
  *v25 = *v24;
  return result;
}

void sub_100217098(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }
}

void *sub_1002170FC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t __src, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  _QWORD *v24;
  uint64_t v25;
  size_t v26;
  uint64_t v27;
  uint64_t v28;
  void *result;
  uint64_t v30;
  int v31;
  uint64_t v32;
  __int16 v33;
  char v34;
  char v35;
  char v36;
  char v37;

  v32 = v27;
  v33 = v28;
  v34 = BYTE2(v28);
  v35 = BYTE3(v28);
  v36 = BYTE4(v28);
  v37 = BYTE5(v28);
  if (!v24)
  {
    __break(1u);
    JUMPOUT(0x10021716CLL);
  }
  result = memcpy(v24, &v32, v26);
  v30 = v24[7];
  v31 = *((_DWORD *)v24 + 16);
  *(_QWORD *)v25 = *v24;
  *(_DWORD *)(v25 + 8) = *((_DWORD *)v24 + 2);
  *(_OWORD *)(v25 + 12) = *(_OWORD *)((char *)v24 + 12);
  *(_OWORD *)(v25 + 28) = *(_OWORD *)((char *)v24 + 28);
  *(_QWORD *)(v25 + 44) = *(_QWORD *)((char *)v24 + 44);
  *(_QWORD *)(v25 + 56) = v30;
  *(_DWORD *)(v25 + 64) = v31;
  *(_DWORD *)(v25 + 68) = *((_DWORD *)v24 + 17);
  return result;
}

void sub_100217300(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }
}

void *sub_10021735C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t __src, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  void *v22;
  void *v23;
  size_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  __int16 v29;
  char v30;
  char v31;
  char v32;
  char v33;

  v28 = v25;
  v29 = v26;
  v30 = BYTE2(v26);
  v31 = BYTE3(v26);
  v32 = BYTE4(v26);
  v33 = BYTE5(v26);
  if (!v22)
  {
    __break(1u);
    JUMPOUT(0x1002173CCLL);
  }
  memcpy(v22, &v28, v24);
  return memcpy(v23, v22, 0x193uLL);
}

void sub_100217524(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }
}

void *sub_100217588(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t __src, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  _QWORD *v24;
  uint64_t v25;
  size_t v26;
  uint64_t v27;
  uint64_t v28;
  void *result;
  __int16 v30;
  int v31;
  int v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  __int16 v39;
  char v40;
  char v41;
  char v42;
  char v43;

  v38 = v27;
  v39 = v28;
  v40 = BYTE2(v28);
  v41 = BYTE3(v28);
  v42 = BYTE4(v28);
  v43 = BYTE5(v28);
  if (!v24)
  {
    __break(1u);
    JUMPOUT(0x1002175F8);
  }
  result = memcpy(v24, &v38, v26);
  v30 = *((_WORD *)v24 + 6);
  v31 = *((_DWORD *)v24 + 4);
  v32 = *((_DWORD *)v24 + 21);
  v33 = *(_OWORD *)((char *)v24 + 20);
  v34 = *(_OWORD *)((char *)v24 + 36);
  v35 = *(_OWORD *)((char *)v24 + 52);
  v36 = *(_OWORD *)((char *)v24 + 68);
  v37 = *(_OWORD *)(v24 + 11);
  *(_QWORD *)v25 = *v24;
  *(_DWORD *)(v25 + 8) = *((_DWORD *)v24 + 2);
  *(_WORD *)(v25 + 12) = v30;
  *(_DWORD *)(v25 + 16) = v31;
  *(_OWORD *)(v25 + 20) = v33;
  *(_OWORD *)(v25 + 36) = v34;
  *(_OWORD *)(v25 + 52) = v35;
  *(_OWORD *)(v25 + 68) = v36;
  *(_DWORD *)(v25 + 84) = v32;
  *(_OWORD *)(v25 + 88) = v37;
  return result;
}

void sub_10021779C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }
}

void *sub_100217800(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t __src, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  _DWORD *v24;
  uint64_t v25;
  size_t v26;
  uint64_t v27;
  uint64_t v28;
  void *result;
  uint64_t v30;
  __int16 v31;
  char v32;
  char v33;
  char v34;
  char v35;

  v30 = v27;
  v31 = v28;
  v32 = BYTE2(v28);
  v33 = BYTE3(v28);
  v34 = BYTE4(v28);
  v35 = BYTE5(v28);
  if (!v24)
  {
    __break(1u);
    JUMPOUT(0x100217870);
  }
  result = memcpy(v24, &v30, v26);
  *(_DWORD *)v25 = *v24;
  *(_OWORD *)(v25 + 4) = *(_OWORD *)(v24 + 1);
  *(_DWORD *)(v25 + 20) = v24[5];
  return result;
}

void sub_1002179DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }
}

void *sub_100217A38(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t __src, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  void *v22;
  void *v23;
  size_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  __int16 v29;
  char v30;
  char v31;
  char v32;
  char v33;

  v28 = v25;
  v29 = v26;
  v30 = BYTE2(v26);
  v31 = BYTE3(v26);
  v32 = BYTE4(v26);
  v33 = BYTE5(v26);
  if (!v22)
  {
    __break(1u);
    JUMPOUT(0x100217AA8);
  }
  memcpy(v22, &v28, v24);
  return memcpy(v23, v22, 0x1CCuLL);
}

void sub_100217C00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }
}

void *sub_100217C64(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t __src, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  _OWORD *v24;
  uint64_t v25;
  size_t v26;
  uint64_t v27;
  uint64_t v28;
  void *result;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  __int16 v36;
  char v37;
  char v38;
  char v39;
  char v40;

  v35 = v27;
  v36 = v28;
  v37 = BYTE2(v28);
  v38 = BYTE3(v28);
  v39 = BYTE4(v28);
  v40 = BYTE5(v28);
  if (!v24)
  {
    __break(1u);
    JUMPOUT(0x100217CD4);
  }
  result = memcpy(v24, &v35, v26);
  v30 = v24[9];
  *(_OWORD *)(v25 + 128) = v24[8];
  *(_OWORD *)(v25 + 144) = v30;
  *(_OWORD *)(v25 + 160) = v24[10];
  *(_QWORD *)(v25 + 176) = *((_QWORD *)v24 + 22);
  v31 = v24[5];
  *(_OWORD *)(v25 + 64) = v24[4];
  *(_OWORD *)(v25 + 80) = v31;
  v32 = v24[7];
  *(_OWORD *)(v25 + 96) = v24[6];
  *(_OWORD *)(v25 + 112) = v32;
  v33 = v24[1];
  *(_OWORD *)v25 = *v24;
  *(_OWORD *)(v25 + 16) = v33;
  v34 = v24[3];
  *(_OWORD *)(v25 + 32) = v24[2];
  *(_OWORD *)(v25 + 48) = v34;
  return result;
}

void sub_100217E60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }
}

void *sub_100217EC4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t __src, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  _DWORD *v24;
  uint64_t v25;
  size_t v26;
  uint64_t v27;
  uint64_t v28;
  void *result;
  int v30;
  uint64_t v31;
  __int16 v32;
  char v33;
  char v34;
  char v35;
  char v36;

  v31 = v27;
  v32 = v28;
  v33 = BYTE2(v28);
  v34 = BYTE3(v28);
  v35 = BYTE4(v28);
  v36 = BYTE5(v28);
  if (!v24)
  {
    __break(1u);
    JUMPOUT(0x100217F34);
  }
  result = memcpy(v24, &v31, v26);
  v30 = v24[9];
  *(_DWORD *)v25 = *v24;
  *(_OWORD *)(v25 + 4) = *(_OWORD *)(v24 + 1);
  *(_OWORD *)(v25 + 20) = *(_OWORD *)(v24 + 5);
  *(_DWORD *)(v25 + 36) = v30;
  return result;
}

void sub_1002180A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }
}

void *sub_100218104(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t __src, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  void *v22;
  void *v23;
  size_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  __int16 v29;
  char v30;
  char v31;
  char v32;
  char v33;

  v28 = v25;
  v29 = v26;
  v30 = BYTE2(v26);
  v31 = BYTE3(v26);
  v32 = BYTE4(v26);
  v33 = BYTE5(v26);
  if (!v22)
  {
    __break(1u);
    JUMPOUT(0x100218174);
  }
  memcpy(v22, &v28, v24);
  return memcpy(v23, v22, 0x108uLL);
}

void sub_1002182CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }
}

void *sub_100218330(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t __src, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  _DWORD *v24;
  uint64_t v25;
  size_t v26;
  uint64_t v27;
  uint64_t v28;
  void *result;
  int v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  int v35;
  uint64_t v36;
  __int16 v37;
  char v38;
  char v39;
  char v40;
  char v41;

  v36 = v27;
  v37 = v28;
  v38 = BYTE2(v28);
  v39 = BYTE3(v28);
  v40 = BYTE4(v28);
  v41 = BYTE5(v28);
  if (!v24)
  {
    __break(1u);
    JUMPOUT(0x1002183A0);
  }
  result = memcpy(v24, &v36, v26);
  v30 = v24[4];
  v31 = *((_QWORD *)v24 + 1);
  v32 = *(_OWORD *)(v24 + 5);
  v33 = *(_OWORD *)(v24 + 9);
  v34 = *(_OWORD *)(v24 + 13);
  v35 = v24[1];
  *(_DWORD *)v25 = *v24;
  *(_DWORD *)(v25 + 4) = v35;
  *(_QWORD *)(v25 + 8) = v31;
  *(_DWORD *)(v25 + 16) = v30;
  *(_OWORD *)(v25 + 20) = v32;
  *(_OWORD *)(v25 + 36) = v33;
  *(_OWORD *)(v25 + 52) = v34;
  return result;
}

void sub_100218524(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }
}

void *sub_100218588(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t __src, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  _OWORD *v24;
  _OWORD *v25;
  size_t v26;
  uint64_t v27;
  uint64_t v28;
  void *result;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  __int16 v37;
  char v38;
  char v39;
  char v40;
  char v41;

  v36 = v27;
  v37 = v28;
  v38 = BYTE2(v28);
  v39 = BYTE3(v28);
  v40 = BYTE4(v28);
  v41 = BYTE5(v28);
  if (!v24)
  {
    __break(1u);
    JUMPOUT(0x1002185F8);
  }
  result = memcpy(v24, &v36, v26);
  v30 = v24[11];
  v25[10] = v24[10];
  v25[11] = v30;
  v25[12] = v24[12];
  v31 = v24[7];
  v25[6] = v24[6];
  v25[7] = v31;
  v32 = v24[9];
  v25[8] = v24[8];
  v25[9] = v32;
  v33 = v24[3];
  v25[2] = v24[2];
  v25[3] = v33;
  v34 = v24[5];
  v25[4] = v24[4];
  v25[5] = v34;
  v35 = v24[1];
  *v25 = *v24;
  v25[1] = v35;
  return result;
}

void sub_100218784(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }
}

void *sub_1002187E0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t __src, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  void *v22;
  void *v23;
  size_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  __int16 v29;
  char v30;
  char v31;
  char v32;
  char v33;

  v28 = v25;
  v29 = v26;
  v30 = BYTE2(v26);
  v31 = BYTE3(v26);
  v32 = BYTE4(v26);
  v33 = BYTE5(v26);
  if (!v22)
  {
    __break(1u);
    JUMPOUT(0x100218850);
  }
  memcpy(v22, &v28, v24);
  return memcpy(v23, v22, 0x640uLL);
}

void sub_1002189A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }
}

void *sub_100218A04(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t __src, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  void *v22;
  void *v23;
  size_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  __int16 v29;
  char v30;
  char v31;
  char v32;
  char v33;

  v28 = v25;
  v29 = v26;
  v30 = BYTE2(v26);
  v31 = BYTE3(v26);
  v32 = BYTE4(v26);
  v33 = BYTE5(v26);
  if (!v22)
  {
    __break(1u);
    JUMPOUT(0x100218A74);
  }
  memcpy(v22, &v28, v24);
  return memcpy(v23, v22, 0xF20uLL);
}

void sub_100218BCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }
}

void *sub_100218C30(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t __src, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  _OWORD *v24;
  uint64_t v25;
  size_t v26;
  uint64_t v27;
  uint64_t v28;
  void *result;
  int v30;
  __int128 v31;
  uint64_t v32;
  __int16 v33;
  char v34;
  char v35;
  char v36;
  char v37;

  v32 = v27;
  v33 = v28;
  v34 = BYTE2(v28);
  v35 = BYTE3(v28);
  v36 = BYTE4(v28);
  v37 = BYTE5(v28);
  if (!v24)
  {
    __break(1u);
    JUMPOUT(0x100218CA0);
  }
  result = memcpy(v24, &v32, v26);
  v30 = *((_DWORD *)v24 + 8);
  v31 = v24[1];
  *(_OWORD *)v25 = *v24;
  *(_OWORD *)(v25 + 16) = v31;
  *(_DWORD *)(v25 + 32) = v30;
  return result;
}

void sub_100218E04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }
}

void *sub_100218E68(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t __src, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  _OWORD *v24;
  uint64_t v25;
  size_t v26;
  uint64_t v27;
  uint64_t v28;
  void *result;
  __int16 v30;
  char v31;
  int v32;
  int v33;
  __int16 v34;
  __int128 v35;
  uint64_t v36;
  __int16 v37;
  char v38;
  char v39;
  char v40;
  char v41;

  v36 = v27;
  v37 = v28;
  v38 = BYTE2(v28);
  v39 = BYTE3(v28);
  v40 = BYTE4(v28);
  v41 = BYTE5(v28);
  if (!v24)
  {
    __break(1u);
    JUMPOUT(0x100218ED8);
  }
  result = memcpy(v24, &v36, v26);
  v30 = *((_WORD *)v24 + 16);
  v31 = *((_BYTE *)v24 + 34);
  v32 = *((_DWORD *)v24 + 15);
  v33 = *((_DWORD *)v24 + 16);
  v34 = *((_WORD *)v24 + 34);
  v35 = v24[1];
  *(_OWORD *)v25 = *v24;
  *(_OWORD *)(v25 + 16) = v35;
  *(_WORD *)(v25 + 32) = v30;
  *(_BYTE *)(v25 + 34) = v31;
  *(_OWORD *)(v25 + 36) = *(_OWORD *)((char *)v24 + 36);
  *(_QWORD *)(v25 + 52) = *(_QWORD *)((char *)v24 + 52);
  *(_DWORD *)(v25 + 60) = v32;
  *(_DWORD *)(v25 + 64) = v33;
  *(_WORD *)(v25 + 68) = v34;
  return result;
}

void sub_100219064(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }
}

void *sub_1002190C0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t __src, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  void *v22;
  void *v23;
  size_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  __int16 v29;
  char v30;
  char v31;
  char v32;
  char v33;

  v28 = v25;
  v29 = v26;
  v30 = BYTE2(v26);
  v31 = BYTE3(v26);
  v32 = BYTE4(v26);
  v33 = BYTE5(v26);
  if (!v22)
  {
    __break(1u);
    JUMPOUT(0x100219130);
  }
  memcpy(v22, &v28, v24);
  return memcpy(v23, v22, 0x3E1uLL);
}

void sub_100219288(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }
}

void *sub_1002192EC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t __src, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  _OWORD *v24;
  uint64_t v25;
  size_t v26;
  uint64_t v27;
  uint64_t v28;
  void *result;
  char v30;
  __int16 v31;
  uint64_t v32;
  __int16 v33;
  char v34;
  char v35;
  char v36;
  char v37;

  v32 = v27;
  v33 = v28;
  v34 = BYTE2(v28);
  v35 = BYTE3(v28);
  v36 = BYTE4(v28);
  v37 = BYTE5(v28);
  if (!v24)
  {
    __break(1u);
    JUMPOUT(0x10021935CLL);
  }
  result = memcpy(v24, &v32, v26);
  v30 = *((_BYTE *)v24 + 16);
  v31 = *((_WORD *)v24 + 14);
  *(_OWORD *)v25 = *v24;
  *(_BYTE *)(v25 + 16) = v30;
  *(_QWORD *)(v25 + 20) = *(_QWORD *)((char *)v24 + 20);
  *(_WORD *)(v25 + 28) = v31;
  return result;
}

void sub_1002194D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }
}

void *sub_100219534(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t __src, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  _WORD *v24;
  uint64_t v25;
  size_t v26;
  uint64_t v27;
  uint64_t v28;
  void *result;
  __int16 v30;
  uint64_t v31;
  __int16 v32;
  char v33;
  char v34;
  char v35;
  char v36;

  v31 = v27;
  v32 = v28;
  v33 = BYTE2(v28);
  v34 = BYTE3(v28);
  v35 = BYTE4(v28);
  v36 = BYTE5(v28);
  if (!v24)
  {
    __break(1u);
    JUMPOUT(0x1002195A4);
  }
  result = memcpy(v24, &v31, v26);
  v30 = v24[8];
  *(_WORD *)v25 = *v24;
  *(_QWORD *)(v25 + 4) = *(_QWORD *)(v24 + 2);
  *(_DWORD *)(v25 + 12) = *((_DWORD *)v24 + 3);
  *(_WORD *)(v25 + 16) = v30;
  return result;
}

void sub_100219718(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }
}

void *sub_10021977C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t __src, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  _DWORD *v24;
  uint64_t v25;
  size_t v26;
  uint64_t v27;
  uint64_t v28;
  void *result;
  int v30;
  uint64_t v31;
  __int16 v32;
  char v33;
  char v34;
  char v35;
  char v36;

  v31 = v27;
  v32 = v28;
  v33 = BYTE2(v28);
  v34 = BYTE3(v28);
  v35 = BYTE4(v28);
  v36 = BYTE5(v28);
  if (!v24)
  {
    __break(1u);
    JUMPOUT(0x1002197ECLL);
  }
  result = memcpy(v24, &v31, v26);
  v30 = v24[4];
  *(_OWORD *)v25 = *(_OWORD *)v24;
  *(_DWORD *)(v25 + 16) = v30;
  return result;
}

void sub_100219950(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }
}

void *sub_1002199B4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t __src, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  _WORD *v24;
  uint64_t v25;
  size_t v26;
  uint64_t v27;
  uint64_t v28;
  void *result;
  int v30;
  __int16 v31;
  uint64_t v32;
  __int16 v33;
  char v34;
  char v35;
  char v36;
  char v37;

  v32 = v27;
  v33 = v28;
  v34 = BYTE2(v28);
  v35 = BYTE3(v28);
  v36 = BYTE4(v28);
  v37 = BYTE5(v28);
  if (!v24)
  {
    __break(1u);
    JUMPOUT(0x100219A24);
  }
  result = memcpy(v24, &v32, v26);
  v30 = *((_DWORD *)v24 + 1);
  v31 = v24[12];
  *(_WORD *)v25 = *v24;
  *(_DWORD *)(v25 + 4) = v30;
  *(_OWORD *)(v25 + 8) = *(_OWORD *)(v24 + 4);
  *(_WORD *)(v25 + 24) = v31;
  return result;
}

void sub_100219B98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }
}

void *sub_100219BF4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t __src, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  void *v22;
  void *v23;
  size_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  __int16 v29;
  char v30;
  char v31;
  char v32;
  char v33;

  v28 = v25;
  v29 = v26;
  v30 = BYTE2(v26);
  v31 = BYTE3(v26);
  v32 = BYTE4(v26);
  v33 = BYTE5(v26);
  if (!v22)
  {
    __break(1u);
    JUMPOUT(0x100219C64);
  }
  memcpy(v22, &v28, v24);
  return memcpy(v23, v22, 0x820uLL);
}

void sub_100219DBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }
}

void *sub_100219E20(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t __src, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  _DWORD *v24;
  uint64_t v25;
  size_t v26;
  uint64_t v27;
  uint64_t v28;
  void *result;
  int v30;
  uint64_t v31;
  __int16 v32;
  char v33;
  char v34;
  char v35;
  char v36;

  v31 = v27;
  v32 = v28;
  v33 = BYTE2(v28);
  v34 = BYTE3(v28);
  v35 = BYTE4(v28);
  v36 = BYTE5(v28);
  if (!v24)
  {
    __break(1u);
    JUMPOUT(0x100219E90);
  }
  result = memcpy(v24, &v31, v26);
  *(_QWORD *)v25 = *(_QWORD *)v24;
  v30 = v24[3];
  *(_DWORD *)(v25 + 8) = v24[2];
  *(_DWORD *)(v25 + 12) = v30;
  return result;
}

void sub_100219FF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }
}

void *sub_10021A058(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t __src, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  _OWORD *v24;
  uint64_t v25;
  size_t v26;
  uint64_t v27;
  uint64_t v28;
  void *result;
  __int16 v30;
  uint64_t v31;
  __int16 v32;
  char v33;
  char v34;
  char v35;
  char v36;

  v31 = v27;
  v32 = v28;
  v33 = BYTE2(v28);
  v34 = BYTE3(v28);
  v35 = BYTE4(v28);
  v36 = BYTE5(v28);
  if (!v24)
  {
    __break(1u);
    JUMPOUT(0x10021A0C8);
  }
  result = memcpy(v24, &v31, v26);
  v30 = *((_WORD *)v24 + 10);
  *(_OWORD *)v25 = *v24;
  *(_DWORD *)(v25 + 16) = *((_DWORD *)v24 + 4);
  *(_WORD *)(v25 + 20) = v30;
  return result;
}

void sub_10021A234(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }
}

void *sub_10021A298(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t __src, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  _QWORD *v24;
  uint64_t v25;
  size_t v26;
  uint64_t v27;
  uint64_t v28;
  void *result;
  __int16 v30;
  char v31;
  __int16 v32;
  uint64_t v33;
  __int16 v34;
  char v35;
  char v36;
  char v37;
  char v38;

  v33 = v27;
  v34 = v28;
  v35 = BYTE2(v28);
  v36 = BYTE3(v28);
  v37 = BYTE4(v28);
  v38 = BYTE5(v28);
  if (!v24)
  {
    __break(1u);
    JUMPOUT(0x10021A308);
  }
  result = memcpy(v24, &v33, v26);
  v30 = *((_WORD *)v24 + 6);
  v31 = *((_BYTE *)v24 + 14);
  v32 = *((_WORD *)v24 + 8);
  *(_QWORD *)v25 = *v24;
  *(_DWORD *)(v25 + 8) = *((_DWORD *)v24 + 2);
  *(_WORD *)(v25 + 12) = v30;
  *(_BYTE *)(v25 + 14) = v31;
  *(_WORD *)(v25 + 16) = v32;
  return result;
}

void sub_10021A484(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }
}

void *sub_10021A4E8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t __src, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  _QWORD *v24;
  uint64_t v25;
  size_t v26;
  uint64_t v27;
  uint64_t v28;
  void *result;
  char v30;
  int v31;
  __int16 v32;
  uint64_t v33;
  __int16 v34;
  char v35;
  char v36;
  char v37;
  char v38;

  v33 = v27;
  v34 = v28;
  v35 = BYTE2(v28);
  v36 = BYTE3(v28);
  v37 = BYTE4(v28);
  v38 = BYTE5(v28);
  if (!v24)
  {
    __break(1u);
    JUMPOUT(0x10021A558);
  }
  result = memcpy(v24, &v33, v26);
  v30 = *((_BYTE *)v24 + 8);
  v31 = *((_DWORD *)v24 + 5);
  v32 = *((_WORD *)v24 + 12);
  *(_QWORD *)v25 = *v24;
  *(_BYTE *)(v25 + 8) = v30;
  *(_QWORD *)(v25 + 12) = *(_QWORD *)((char *)v24 + 12);
  *(_DWORD *)(v25 + 20) = v31;
  *(_WORD *)(v25 + 24) = v32;
  return result;
}

void sub_10021A6D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }
}

void *sub_10021A738(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t __src, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  _QWORD *v24;
  uint64_t v25;
  size_t v26;
  uint64_t v27;
  uint64_t v28;
  void *result;
  char v30;
  int v31;
  __int16 v32;
  uint64_t v33;
  __int16 v34;
  char v35;
  char v36;
  char v37;
  char v38;

  v33 = v27;
  v34 = v28;
  v35 = BYTE2(v28);
  v36 = BYTE3(v28);
  v37 = BYTE4(v28);
  v38 = BYTE5(v28);
  if (!v24)
  {
    __break(1u);
    JUMPOUT(0x10021A7A8);
  }
  result = memcpy(v24, &v33, v26);
  v30 = *((_BYTE *)v24 + 8);
  v31 = *((_DWORD *)v24 + 5);
  v32 = *((_WORD *)v24 + 12);
  *(_QWORD *)v25 = *v24;
  *(_BYTE *)(v25 + 8) = v30;
  *(_QWORD *)(v25 + 12) = *(_QWORD *)((char *)v24 + 12);
  *(_DWORD *)(v25 + 20) = v31;
  *(_WORD *)(v25 + 24) = v32;
  return result;
}

void sub_10021A924(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }
}

void *sub_10021A988(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t __src, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  _QWORD *v24;
  uint64_t v25;
  size_t v26;
  uint64_t v27;
  uint64_t v28;
  void *result;
  int v30;
  uint64_t v31;
  uint64_t v32;
  __int16 v33;
  char v34;
  char v35;
  char v36;
  char v37;

  v32 = v27;
  v33 = v28;
  v34 = BYTE2(v28);
  v35 = BYTE3(v28);
  v36 = BYTE4(v28);
  v37 = BYTE5(v28);
  if (!v24)
  {
    __break(1u);
    JUMPOUT(0x10021A9F8);
  }
  result = memcpy(v24, &v32, v26);
  v30 = *((_DWORD *)v24 + 4);
  v31 = v24[1];
  *(_QWORD *)v25 = *v24;
  *(_QWORD *)(v25 + 8) = v31;
  *(_DWORD *)(v25 + 16) = v30;
  *(_DWORD *)(v25 + 20) = *((_DWORD *)v24 + 5);
  return result;
}

void sub_10021AB64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }
}

void *sub_10021ABC8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t __src, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  _QWORD *v24;
  _QWORD *v25;
  size_t v26;
  uint64_t v27;
  uint64_t v28;
  void *result;
  uint64_t v30;
  __int16 v31;
  char v32;
  char v33;
  char v34;
  char v35;

  v30 = v27;
  v31 = v28;
  v32 = BYTE2(v28);
  v33 = BYTE3(v28);
  v34 = BYTE4(v28);
  v35 = BYTE5(v28);
  if (!v24)
  {
    __break(1u);
    JUMPOUT(0x10021AC38);
  }
  result = memcpy(v24, &v30, v26);
  *v25 = *v24;
  return result;
}

uint64_t sub_10021AD94()
{
  unsigned __int16 *v0;

  return WiFiAddress.description.getter(*v0 | ((unint64_t)*(unsigned int *)(v0 + 1) << 16));
}

uint64_t WiFiAddress.customMirror.getter@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD v18[2];
  _QWORD *v19;
  _BYTE v20[6];

  v2 = a1;
  v18[1] = a2;
  v3 = a1 >> 8;
  v4 = a1 >> 16;
  v5 = a1 >> 24;
  v6 = HIDWORD(a1);
  v7 = a1 >> 40;
  v8 = type metadata accessor for Mirror.AncestorRepresentation(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin();
  v11 = (char *)v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012C44((uint64_t *)&unk_1004085C0);
  __chkstk_darwin();
  v13 = (char *)v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20[0] = v2;
  v20[1] = v3;
  v20[2] = v4;
  v20[3] = v5;
  v20[4] = v6;
  v20[5] = v7;
  v19 = _swiftEmptyArrayStorage;
  v14 = type metadata accessor for Mirror.DisplayStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v13, 1, 1, v14);
  (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v11, enum case for Mirror.AncestorRepresentation.generated(_:), v8);
  v15 = sub_100012C44(&qword_100405B90);
  v16 = sub_1000687EC();
  return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)(v20, &v19, v13, v11, &type metadata for WiFiAddress, v15, v16);
}

uint64_t sub_10021AF10(uint64_t a1)
{
  int *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v13;
  int v14;
  __int16 v15;

  v3 = type metadata accessor for Mirror.AncestorRepresentation(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin();
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012C44((uint64_t *)&unk_1004085C0);
  __chkstk_darwin();
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  LOWORD(v7) = *((_WORD *)v1 + 2);
  v14 = *v1;
  v15 = v7;
  v13 = _swiftEmptyArrayStorage;
  v9 = type metadata accessor for Mirror.DisplayStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, enum case for Mirror.AncestorRepresentation.generated(_:), v3);
  v10 = sub_100012C44(&qword_100405B90);
  v11 = sub_1000687EC();
  return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)(&v14, &v13, v8, v6, a1, v10, v11);
}

BOOL static WiFiAddress.!= infix(_:_:)(uint64_t a1, uint64_t a2)
{
  __int16 v4;
  __int16 v5;

  LOBYTE(v5) = BYTE4(a1);
  HIBYTE(v5) = BYTE5(a1);
  LOBYTE(v4) = BYTE4(a2);
  HIBYTE(v4) = BYTE5(a2);
  return (_DWORD)a1 != (_DWORD)a2 || v5 != v4;
}

uint64_t static WiFiAddress.< infix(_:_:)(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v6;
  unsigned __int16 v7;
  unsigned int v8;
  unsigned __int16 v9;

  LOWORD(v8) = a1;
  BYTE2(v8) = BYTE2(a1);
  HIBYTE(v8) = BYTE3(a1);
  LOBYTE(v9) = BYTE4(a1);
  HIBYTE(v9) = BYTE5(a1);
  LOWORD(v6) = a2;
  BYTE2(v6) = BYTE2(a2);
  HIBYTE(v6) = BYTE3(a2);
  LOBYTE(v7) = BYTE4(a2);
  HIBYTE(v7) = BYTE5(a2);
  v2 = bswap32(v8);
  v3 = bswap32(v6);
  if (v2 == v3 && (v2 = bswap32(v9) >> 16, v3 = bswap32(v7) >> 16, v2 == v3))
  {
    v4 = 0;
  }
  else if (v2 < v3)
  {
    v4 = -1;
  }
  else
  {
    v4 = 1;
  }
  return v4 >> 31;
}

BOOL static WiFiAddress.> infix(_:_:)(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  unsigned int v3;
  int v4;
  unsigned int v6;
  unsigned __int16 v7;
  unsigned int v8;
  unsigned __int16 v9;

  LOWORD(v8) = a1;
  BYTE2(v8) = BYTE2(a1);
  HIBYTE(v8) = BYTE3(a1);
  LOBYTE(v9) = BYTE4(a1);
  HIBYTE(v9) = BYTE5(a1);
  LOWORD(v6) = a2;
  BYTE2(v6) = BYTE2(a2);
  HIBYTE(v6) = BYTE3(a2);
  LOBYTE(v7) = BYTE4(a2);
  HIBYTE(v7) = BYTE5(a2);
  v2 = bswap32(v8);
  v3 = bswap32(v6);
  if (v2 == v3 && (v2 = bswap32(v9) >> 16, v3 = bswap32(v7) >> 16, v2 == v3))
  {
    v4 = 0;
  }
  else if (v2 < v3)
  {
    v4 = -1;
  }
  else
  {
    v4 = 1;
  }
  return v4 > 0;
}

BOOL static WiFiAddress.<= infix(_:_:)(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  unsigned int v3;
  int v4;
  unsigned int v6;
  unsigned __int16 v7;
  unsigned int v8;
  unsigned __int16 v9;

  LOWORD(v8) = a1;
  BYTE2(v8) = BYTE2(a1);
  HIBYTE(v8) = BYTE3(a1);
  LOBYTE(v9) = BYTE4(a1);
  HIBYTE(v9) = BYTE5(a1);
  LOWORD(v6) = a2;
  BYTE2(v6) = BYTE2(a2);
  HIBYTE(v6) = BYTE3(a2);
  LOBYTE(v7) = BYTE4(a2);
  HIBYTE(v7) = BYTE5(a2);
  v2 = bswap32(v8);
  v3 = bswap32(v6);
  if (v2 == v3 && (v2 = bswap32(v9) >> 16, v3 = bswap32(v7) >> 16, v2 == v3))
  {
    v4 = 0;
  }
  else if (v2 < v3)
  {
    v4 = -1;
  }
  else
  {
    v4 = 1;
  }
  return v4 < 1;
}

BOOL static WiFiAddress.>= infix(_:_:)(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  unsigned int v3;
  int v4;
  unsigned int v6;
  unsigned __int16 v7;
  unsigned int v8;
  unsigned __int16 v9;

  LOWORD(v8) = a1;
  BYTE2(v8) = BYTE2(a1);
  HIBYTE(v8) = BYTE3(a1);
  LOBYTE(v9) = BYTE4(a1);
  HIBYTE(v9) = BYTE5(a1);
  LOWORD(v6) = a2;
  BYTE2(v6) = BYTE2(a2);
  HIBYTE(v6) = BYTE3(a2);
  LOBYTE(v7) = BYTE4(a2);
  HIBYTE(v7) = BYTE5(a2);
  v2 = bswap32(v8);
  v3 = bswap32(v6);
  if (v2 == v3 && (v2 = bswap32(v9) >> 16, v3 = bswap32(v7) >> 16, v2 == v3))
  {
    v4 = 0;
  }
  else if (v2 < v3)
  {
    v4 = -1;
  }
  else
  {
    v4 = 1;
  }
  return v4 >= 0;
}

uint64_t sub_10021B498(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;

  v2 = bswap32(*(_DWORD *)a1);
  v3 = bswap32(*(_DWORD *)a2);
  if (v2 == v3
    && (v2 = bswap32(*(unsigned __int16 *)(a1 + 4)) >> 16, v3 = bswap32(*(unsigned __int16 *)(a2 + 4)) >> 16, v2 == v3))
  {
    v4 = 0;
  }
  else if (v2 < v3)
  {
    v4 = -1;
  }
  else
  {
    v4 = 1;
  }
  return v4 >> 31;
}

BOOL sub_10021B54C(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  unsigned int v3;
  int v4;

  v2 = bswap32(*(_DWORD *)a1);
  v3 = bswap32(*(_DWORD *)a2);
  if (v2 == v3
    && (v2 = bswap32(*(unsigned __int16 *)(a1 + 4)) >> 16, v3 = bswap32(*(unsigned __int16 *)(a2 + 4)) >> 16, v2 == v3))
  {
    v4 = 0;
  }
  else if (v2 < v3)
  {
    v4 = -1;
  }
  else
  {
    v4 = 1;
  }
  return v4 < 1;
}

BOOL sub_10021B604(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  unsigned int v3;
  int v4;

  v2 = bswap32(*(_DWORD *)a1);
  v3 = bswap32(*(_DWORD *)a2);
  if (v2 == v3
    && (v2 = bswap32(*(unsigned __int16 *)(a1 + 4)) >> 16, v3 = bswap32(*(unsigned __int16 *)(a2 + 4)) >> 16, v2 == v3))
  {
    v4 = 0;
  }
  else if (v2 < v3)
  {
    v4 = -1;
  }
  else
  {
    v4 = 1;
  }
  return v4 >= 0;
}

BOOL sub_10021B6BC(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  unsigned int v3;
  int v4;

  v2 = bswap32(*(_DWORD *)a1);
  v3 = bswap32(*(_DWORD *)a2);
  if (v2 == v3
    && (v2 = bswap32(*(unsigned __int16 *)(a1 + 4)) >> 16, v3 = bswap32(*(unsigned __int16 *)(a2 + 4)) >> 16, v2 == v3))
  {
    v4 = 0;
  }
  else if (v2 < v3)
  {
    v4 = -1;
  }
  else
  {
    v4 = 1;
  }
  return v4 > 0;
}

uint64_t WiFiAddress.init(from:)(_QWORD *a1)
{
  return sub_10021C42C(a1) & 0xFFFFFFFFFFFFLL;
}

uint64_t WiFiAddress.encode(to:)(_QWORD *a1, unint64_t a2)
{
  char v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD v19[2];
  _QWORD v20[3];
  uint64_t v21;
  uint64_t v22;

  v2 = a2;
  v3 = a2 >> 8;
  v4 = a2 >> 16;
  v5 = a2 >> 24;
  v6 = HIDWORD(a2);
  v7 = a1[3];
  v8 = a1[4];
  v9 = a2 >> 40;
  sub_10003259C(a1, v7);
  dispatch thunk of Encoder.unkeyedContainer()(v20, v7, v8);
  v10 = sub_100012C44(&qword_100403E88);
  v11 = swift_allocObject(v10, 38, 7);
  *(_OWORD *)(v11 + 16) = xmmword_10033B190;
  *(_BYTE *)(v11 + 32) = v2;
  *(_BYTE *)(v11 + 33) = v3;
  *(_BYTE *)(v11 + 34) = v4;
  *(_BYTE *)(v11 + 35) = v5;
  *(_BYTE *)(v11 + 36) = v6;
  *(_BYTE *)(v11 + 37) = v9;
  v12 = sub_1001068EC(v11);
  v14 = v13;
  swift_bridgeObjectRelease(v11);
  v19[0] = v12;
  v19[1] = v14;
  v15 = v21;
  v16 = v22;
  sub_100034C68((uint64_t)v20, v21);
  v17 = sub_100068570();
  dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)(v19, &type metadata for Data, v17, v15, v16);
  sub_10000E614(v12, v14);
  return sub_100014430(v20);
}

uint64_t sub_10021B8B0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = sub_10021C42C(a1);
  if (!v2)
  {
    *(_WORD *)a2 = result;
    *(_BYTE *)(a2 + 2) = BYTE2(result);
    *(_BYTE *)(a2 + 3) = BYTE3(result);
    *(_BYTE *)(a2 + 4) = BYTE4(result);
    *(_BYTE *)(a2 + 5) = BYTE5(result);
  }
  return result;
}

uint64_t sub_10021B900(_QWORD *a1)
{
  unsigned __int16 *v1;

  return WiFiAddress.encode(to:)(a1, *v1 | ((unint64_t)*(unsigned int *)(v1 + 1) << 16));
}

Swift::Void __swiftcall WiFiAddress.makeLinkLocal()()
{
  _BYTE *v0;

  *v0 = *v0 & 0xFC | 2;
}

unint64_t static WiFiAddress.random()()
{
  return sub_10021D0D8() & 0xFFFFFFFFFFFFLL;
}

id WiFiAddress.apiAddress(with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v7;
  uint64_t v8;

  v7 = objc_allocWithZone((Class)WiFiMACAddress);
  v8 = a5 & 0xFFFFFFFFFFFFLL;
  if (a4 == 1)
    return objc_msgSend(v7, "initWithAddress:", v8);
  else
    return objc_msgSend(v7, "initWithAddress:ipv6Address:", v8);
}

id static WiFiMACAddress.randomLinkLocalAddress()()
{
  return objc_msgSend(objc_allocWithZone((Class)WiFiMACAddress), "initWithAddress:", sub_10021D0D8() & 0xFFFFFFFFFFFCLL | 2);
}

uint64_t WiFiMACAddress.ipv6LinkLocalAddressString.getter()
{
  void *v0;
  id v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  Swift::String v13;
  _QWORD v15[3];

  v1 = objc_msgSend(v0, "ipv6LinkLocalAddress");
  v2 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v1);
  v4 = v3;

  sub_100212BD4(v2, v4);
  v6 = v5;
  v8 = v7;
  sub_10000E614(v2, v4);
  v9 = (char *)swift_slowAlloc(46, -1);
  v15[0] = v6;
  v15[1] = v8;
  inet_ntop(30, v15, v9, 0x2Eu);
  v10 = String.init(cString:)(v9);
  v12 = v11;
  swift_slowDealloc(v9, -1, -1);
  v13._countAndFlagsBits = v10;
  v13._object = v12;
  String.append(_:)(v13);
  swift_bridgeObjectRelease(v12);
  return 0;
}

uint64_t sub_10021BB50()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t result;

  v0 = sub_1001068EC((uint64_t)&off_1003D74A8);
  v2 = v1;
  v3 = sub_1001068EC((uint64_t)&off_1003D74D0);
  v5 = v4;
  sub_100031FEC(v0, v2);
  sub_100031FEC(v3, v5);
  sub_1000FBDAC(v3, v5);
  sub_10000E614(v3, v5);
  sub_10000E614(v3, v5);
  sub_10000E614(v0, v2);
  result = sub_10000E38C(v0, v2);
  if ((result & 0x1000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    static WiFiAddress.defaultClusterID = result;
    byte_1004106BA = BYTE2(result);
    byte_1004106BB = BYTE3(result);
    byte_1004106BC = BYTE4(result);
    byte_1004106BD = BYTE5(result);
  }
  return result;
}

__int16 *WiFiAddress.defaultClusterID.unsafeMutableAddressor()
{
  if (qword_100404240 != -1)
    swift_once(&qword_100404240, sub_10021BB50);
  return &static WiFiAddress.defaultClusterID;
}

unint64_t static WiFiAddress.defaultClusterID.getter()
{
  if (qword_100404240 != -1)
    swift_once(&qword_100404240, sub_10021BB50);
  return (unsigned __int16)static WiFiAddress.defaultClusterID | ((unint64_t)*(unsigned int *)&byte_1004106BA << 16);
}

void *WiFiAddress.bonjourMulticastAddress.unsafeMutableAddressor()
{
  return &static WiFiAddress.bonjourMulticastAddress;
}

uint64_t static WiFiAddress.bonjourMulticastAddress.getter()
{
  return 0xFB0000803333;
}

void *WiFiAddress.multicastAddress.unsafeMutableAddressor()
{
  return &static WiFiAddress.multicastAddress;
}

uint64_t static WiFiAddress.multicastAddress.getter()
{
  return 0xFFFFFFFFFFFFLL;
}

uint64_t sub_10021BCF8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 16) = a2;
  *(_QWORD *)(result + 24) = 2 * a2;
  return result;
}

uint64_t sub_10021BD08(_BYTE *__src, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  if (!a2)
    return 0;
  if (a2 <= 14)
    return sub_10000EC20(__src, &__src[a2]);
  v4 = type metadata accessor for __DataStorage(0);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  __DataStorage.init(bytes:length:)(__src, a2);
  if ((unint64_t)a2 < 0x7FFFFFFF)
    return a2 << 32;
  v6 = type metadata accessor for Data.RangeReference(0);
  result = swift_allocObject(v6, 32, 7);
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = a2;
  return result;
}

void sub_10021BDB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __asm { BR              X10 }
}

uint64_t sub_10021BE10(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t __src, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  void *v22;
  size_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  __int16 v28;
  char v29;
  char v30;
  char v31;
  char v32;

  v27 = v24;
  v28 = v25;
  v29 = BYTE2(v25);
  v30 = BYTE3(v25);
  v31 = BYTE4(v25);
  v32 = BYTE5(v25);
  if (!v22)
  {
    __break(1u);
    JUMPOUT(0x10021BE80);
  }
  memcpy(v22, &v27, v23);
  return *(_QWORD *)v22;
}

void sub_10021BFE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __asm { BR              X10 }
}

uint64_t sub_10021C040(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t __src, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  unsigned __int8 *v22;
  size_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  __int16 v28;
  char v29;
  char v30;
  char v31;
  char v32;

  v27 = v24;
  v28 = v25;
  v29 = BYTE2(v25);
  v30 = BYTE3(v25);
  v31 = BYTE4(v25);
  v32 = BYTE5(v25);
  if (!v22)
  {
    __break(1u);
    JUMPOUT(0x10021C0B0);
  }
  memcpy(v22, &v27, v23);
  return *(unsigned __int16 *)v22 | (v22[2] << 16);
}

void sub_10021C20C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __asm { BR              X10 }
}

uint64_t sub_10021C268(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t __src, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  unsigned __int8 *v22;
  size_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  __int16 v28;
  char v29;
  char v30;
  char v31;
  char v32;

  v27 = v24;
  v28 = v25;
  v29 = BYTE2(v25);
  v30 = BYTE3(v25);
  v31 = BYTE4(v25);
  v32 = BYTE5(v25);
  if (!v22)
  {
    __break(1u);
    JUMPOUT(0x10021C2D8);
  }
  memcpy(v22, &v27, v23);
  return *v22;
}

uint64_t sub_10021C42C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[3];
  uint64_t v21;
  uint64_t v22;
  char *v23;

  v3 = a1[3];
  v4 = a1[4];
  sub_10003259C(a1, v3);
  dispatch thunk of Decoder.unkeyedContainer()(v20, v3, v4);
  if (!v1)
  {
    v5 = v21;
    v6 = v22;
    sub_100034C68((uint64_t)v20, v21);
    v7 = UnkeyedDecodingContainer.decodeData(with:)(6, v5, v6);
    v9 = v8;
    sub_100031FEC(v7, v8);
    v10 = sub_10000E38C(v7, v9);
    if ((v10 & 0x1000000000000) == 0)
    {
      v11 = v10;
      sub_10000E614(v7, v9);
      sub_100014430(v20);
      sub_100014430(a1);
      return v11 & 0xFFFFFFFFFFFFLL;
    }
    v13 = type metadata accessor for DecodingError(0);
    swift_allocError(v13, &protocol witness table for DecodingError, 0, 0);
    v15 = v14;
    v23 = (char *)v14 + *(int *)(sub_100012C44(&qword_100406000) + 48);
    *v15 = &type metadata for WiFiAddress;
    v17 = a1[3];
    v16 = a1[4];
    sub_10003259C(a1, v17);
    v18 = dispatch thunk of Decoder.codingPath.getter(v17, v16);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)(v18, 0xD000000000000030, 0x8000000100367B20, 0);
    v19 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v13 - 8) + 104))(v15, enum case for DecodingError.valueNotFound(_:), v13);
    swift_willThrow(v19);
    sub_10000E614(v7, v9);
    sub_100014430(v20);
  }
  return sub_100014430(a1);
}

void sub_10021C5F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __asm { BR              X10 }
}

uint64_t sub_10021C64C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t __src, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  void *v22;
  size_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  __int16 v28;
  char v29;
  char v30;
  char v31;
  char v32;

  v27 = v24;
  v28 = v25;
  v29 = BYTE2(v25);
  v30 = BYTE3(v25);
  v31 = BYTE4(v25);
  v32 = BYTE5(v25);
  if (!v22)
  {
    __break(1u);
    JUMPOUT(0x10021C6BCLL);
  }
  memcpy(v22, &v27, v23);
  return *(_QWORD *)v22;
}

void sub_10021C814(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __asm { BR              X10 }
}

uint64_t sub_10021C870(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t __src, __int16 a11, char a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  _WORD *v26;
  size_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  _BYTE v33[10];
  char v34;
  char v35;
  char v36;
  char v37;

  *(_QWORD *)v33 = v28;
  *(_WORD *)&v33[8] = v29;
  v34 = BYTE2(v29);
  v35 = BYTE3(v29);
  v36 = BYTE4(v29);
  v37 = BYTE5(v29);
  if (!v26)
  {
    __break(1u);
    JUMPOUT(0x10021C8E0);
  }
  memcpy(v26, v33, v27);
  v30 = *(_DWORD *)(v26 + 1);
  v31 = *(_DWORD *)(v26 + 3);
  *(_WORD *)v33 = *v26;
  *(_QWORD *)&v33[2] = __PAIR64__(v31, v30);
  return *(_QWORD *)v33;
}

void sub_10021CA50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __asm { BR              X10 }
}

uint64_t sub_10021CAAC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t __src, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  void *v22;
  size_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  __int16 v28;
  char v29;
  char v30;
  char v31;
  char v32;

  v27 = v24;
  v28 = v25;
  v29 = BYTE2(v25);
  v30 = BYTE3(v25);
  v31 = BYTE4(v25);
  v32 = BYTE5(v25);
  if (!v22)
  {
    __break(1u);
    JUMPOUT(0x10021CB1CLL);
  }
  memcpy(v22, &v27, v23);
  return *(_QWORD *)v22;
}

void sub_10021CC84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __asm { BR              X10 }
}

uint64_t sub_10021CCE0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t __src, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  unsigned int *v22;
  size_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  __int16 v28;
  char v29;
  char v30;
  char v31;
  char v32;

  v27 = v24;
  v28 = v25;
  v29 = BYTE2(v25);
  v30 = BYTE3(v25);
  v31 = BYTE4(v25);
  v32 = BYTE5(v25);
  if (!v22)
  {
    __break(1u);
    JUMPOUT(0x10021CD50);
  }
  memcpy(v22, &v27, v23);
  return *v22;
}

void sub_10021CEA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __asm { BR              X10 }
}

uint64_t sub_10021CF00(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t __src, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  void *v22;
  size_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  __int16 v28;
  char v29;
  char v30;
  char v31;
  char v32;

  v27 = v24;
  v28 = v25;
  v29 = BYTE2(v25);
  v30 = BYTE3(v25);
  v31 = BYTE4(v25);
  v32 = BYTE5(v25);
  if (!v22)
  {
    __break(1u);
    JUMPOUT(0x10021CF70);
  }
  memcpy(v22, &v27, v23);
  return *(_QWORD *)v22;
}

unint64_t sub_10021D0D8()
{
  uint64_t v0;
  unsigned __int8 v1;
  unsigned __int8 v2;
  int v3;
  unsigned __int8 v4;
  uint64_t v6;

  v6 = 0;
  swift_stdlib_random(&v6, 8);
  v0 = v6;
  v6 = 0;
  swift_stdlib_random(&v6, 8);
  v1 = v6;
  v6 = 0;
  swift_stdlib_random(&v6, 8);
  v2 = v6;
  v6 = 0;
  swift_stdlib_random(&v6, 8);
  v3 = v6;
  v6 = 0;
  swift_stdlib_random(&v6, 8);
  v4 = v6;
  v6 = 0;
  swift_stdlib_random(&v6, 8);
  return v0 & 0xFFFF0000FF0000FFLL | (unsigned __int16)(v1 << 8) | ((unint64_t)v2 << 16) & 0xFFFF0000FFFFFFFFLL | (v3 << 24) | ((unint64_t)v4 << 32) & 0xFFFF00FFFFFFFFFFLL | ((unint64_t)v6 << 40);
}

unint64_t sub_10021D19C()
{
  unint64_t result;

  result = qword_10040FAA0;
  if (!qword_10040FAA0)
  {
    result = swift_getWitnessTable(protocol conformance descriptor for WiFiAddress, &type metadata for WiFiAddress);
    atomic_store(result, (unint64_t *)&qword_10040FAA0);
  }
  return result;
}

ValueMetadata *type metadata accessor for WiFiAddress()
{
  return &type metadata for WiFiAddress;
}

void sub_10021D1F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __asm { BR              X10 }
}

uint64_t sub_10021D24C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t __src, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  unsigned __int16 *v22;
  size_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  __int16 v28;
  char v29;
  char v30;
  char v31;
  char v32;

  v27 = v24;
  v28 = v25;
  v29 = BYTE2(v25);
  v30 = BYTE3(v25);
  v31 = BYTE4(v25);
  v32 = BYTE5(v25);
  if (!v22)
  {
    __break(1u);
    JUMPOUT(0x10021D2BCLL);
  }
  memcpy(v22, &v27, v23);
  return *v22;
}

void sub_10021D410(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __asm { BR              X10 }
}

uint64_t sub_10021D46C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t __src, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  void *v22;
  size_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  __int16 v28;
  char v29;
  char v30;
  char v31;
  char v32;

  v27 = v24;
  v28 = v25;
  v29 = BYTE2(v25);
  v30 = BYTE3(v25);
  v31 = BYTE4(v25);
  v32 = BYTE5(v25);
  if (!v22)
  {
    __break(1u);
    JUMPOUT(0x10021D4DCLL);
  }
  memcpy(v22, &v27, v23);
  return *(_QWORD *)v22;
}

void sub_10021D630(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __asm { BR              X10 }
}

uint64_t sub_10021D68C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t __src, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  void *v22;
  size_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  __int16 v28;
  char v29;
  char v30;
  char v31;
  char v32;

  v27 = v24;
  v28 = v25;
  v29 = BYTE2(v25);
  v30 = BYTE3(v25);
  v31 = BYTE4(v25);
  v32 = BYTE5(v25);
  if (!v22)
  {
    __break(1u);
    JUMPOUT(0x10021D6FCLL);
  }
  memcpy(v22, &v27, v23);
  return *(_QWORD *)v22;
}

void sub_10021D850(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __asm { BR              X10 }
}

uint64_t sub_10021D8AC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t __src, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  unsigned __int16 *v22;
  size_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  __int16 v28;
  char v29;
  char v30;
  char v31;
  char v32;

  v27 = v24;
  v28 = v25;
  v29 = BYTE2(v25);
  v30 = BYTE3(v25);
  v31 = BYTE4(v25);
  v32 = BYTE5(v25);
  if (!v22)
  {
    __break(1u);
    JUMPOUT(0x10021D91CLL);
  }
  memcpy(v22, &v27, v23);
  return *v22;
}

void sub_10021DA70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __asm { BR              X10 }
}

uint64_t sub_10021DACC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t __src, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  void *v22;
  size_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  __int16 v28;
  char v29;
  char v30;
  char v31;
  char v32;

  v27 = v24;
  v28 = v25;
  v29 = BYTE2(v25);
  v30 = BYTE3(v25);
  v31 = BYTE4(v25);
  v32 = BYTE5(v25);
  if (!v22)
  {
    __break(1u);
    JUMPOUT(0x10021DB3CLL);
  }
  memcpy(v22, &v27, v23);
  return *(_QWORD *)v22;
}

void sub_10021DC90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __asm { BR              X10 }
}

uint64_t sub_10021DCEC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t __src, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  unsigned int *v22;
  size_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  __int16 v28;
  char v29;
  char v30;
  char v31;
  char v32;

  v27 = v24;
  v28 = v25;
  v29 = BYTE2(v25);
  v30 = BYTE3(v25);
  v31 = BYTE4(v25);
  v32 = BYTE5(v25);
  if (!v22)
  {
    __break(1u);
    JUMPOUT(0x10021DD5CLL);
  }
  memcpy(v22, &v27, v23);
  return *v22;
}

void sub_10021DEB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __asm { BR              X10 }
}

uint64_t sub_10021DF0C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t __src, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  unsigned int *v22;
  size_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  __int16 v28;
  char v29;
  char v30;
  char v31;
  char v32;

  v27 = v24;
  v28 = v25;
  v29 = BYTE2(v25);
  v30 = BYTE3(v25);
  v31 = BYTE4(v25);
  v32 = BYTE5(v25);
  if (!v22)
  {
    __break(1u);
    JUMPOUT(0x10021DF7CLL);
  }
  memcpy(v22, &v27, v23);
  return *v22;
}

unint64_t WiFiInterfaceRole.logSubsystem.getter(char a1)
{
  return 0x2020100uLL >> (8 * a1);
}

id WiFiInterfaceRole.queue.getter(unsigned __int8 a1)
{
  uint64_t *v1;

  if (a1 - 2 >= 2)
  {
    if (a1 == 1)
    {
      if (qword_100404100 != -1)
        swift_once(&qword_100404100, sub_10017DF28);
      v1 = &static OS_dispatch_queue.awdl;
    }
    else
    {
      if (qword_100404108 != -1)
        swift_once(&qword_100404108, sub_10017E140);
      v1 = &static OS_dispatch_queue.p2p;
    }
  }
  else
  {
    if (qword_1004040F8 != -1)
      swift_once(&qword_1004040F8, sub_10017DEE0);
    v1 = &static OS_dispatch_queue.nan;
  }
  return (id)*v1;
}

uint64_t WiFiInterfaceRole.bsdNamePrefix.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10021E1D4
                                                            + 4 * asc_10035D110[a1]))(28261, 0xE200000000000000);
}

uint64_t sub_10021E1D4()
{
  return 1818523489;
}

uint64_t sub_10021E1E4()
{
  return 7233902;
}

uint64_t sub_10021E1F4()
{
  return 29289;
}

uint64_t sub_10021E1FC()
{
  return 7826540;
}

uint64_t WiFiInterface.driver.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 88);
  v5 = (uint64_t)v1 + *(_QWORD *)(*v1 + 96);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v4, *(_QWORD *)(v3 + 80), &protocol requirements base descriptor for P2PControls, &associated type descriptor for P2PControls.Driver);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(a1, v5, AssociatedTypeWitness);
}

uint64_t WiFiInterface.interfaceName.getter()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v1 = (uint64_t *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 104));
  v2 = *v1;
  swift_bridgeObjectRetain(v1[1]);
  return v2;
}

uint64_t WiFiInterface.components.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;

  v3 = *v1;
  v4 = (uint64_t)v1 + *(_QWORD *)(*v1 + 112);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(_QWORD *)(v3 + 88), *(_QWORD *)(v3 + 80), &protocol requirements base descriptor for P2PControls, &associated type descriptor for P2PControls.Components);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 16))(a1, v4, AssociatedTypeWitness);
}

uint64_t WiFiInterface.preferences.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t (*v5)(uint64_t, uint64_t);
  uint64_t v6;

  v2 = *(_QWORD *)(*(_QWORD *)v0 + 80);
  v1 = *(_QWORD *)(*(_QWORD *)v0 + 88);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v1, v2, &protocol requirements base descriptor for P2PControls, &associated type descriptor for P2PControls.Components);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v1, v2, AssociatedTypeWitness, &protocol requirements base descriptor for P2PControls, &associated conformance descriptor for P2PControls.P2PControls.Components: P2PComponents);
  v5 = *(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 120);
  v6 = swift_checkMetadataState(0, AssociatedTypeWitness);
  return v5(v6, AssociatedConformanceWitness);
}

uint64_t WiFiInterface.capabilities.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t (*v5)(uint64_t, uint64_t);
  uint64_t v6;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 88);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 80);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v1, v2, &protocol requirements base descriptor for P2PControls, &associated type descriptor for P2PControls.Driver);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v1, v2, AssociatedTypeWitness, &protocol requirements base descriptor for P2PControls, &associated conformance descriptor for P2PControls.P2PControls.Driver: WiFiDriver);
  v5 = *(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 8);
  v6 = swift_checkMetadataState(0, AssociatedTypeWitness);
  return v5(v6, AssociatedConformanceWitness);
}

uint64_t WiFiInterface.linkState.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE v8[24];

  v1 = sub_100012C44((uint64_t *)&unk_10040FC80);
  __chkstk_darwin(v1);
  v3 = &v8[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v4 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 120);
  swift_beginAccess(v4, v8, 0, 0);
  sub_100033B48(v4, (uint64_t)v3, (uint64_t *)&unk_10040FC80);
  v5 = v3[*(int *)(v1 + 40)];
  sub_100033A84((uint64_t)v3, (uint64_t *)&unk_10040FC80);
  return v5;
}

uint64_t MutableDriverProperty.wrappedValue.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 16))(a2, v2 + *(int *)(a1 + 40));
}

uint64_t WiFiInterface.linkState.setter(char a1)
{
  uint64_t v1;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(char *);
  char v10;
  _BYTE v11[24];

  v3 = v1 + *(_QWORD *)(*(_QWORD *)v1 + 120);
  swift_beginAccess(v3, v11, 33, 0);
  v4 = a1 & 1;
  v10 = a1 & 1;
  v5 = sub_100012C44((uint64_t *)&unk_10040FC80);
  v6 = *(int *)(v5 + 40);
  if (((((a1 & 1) == 0) ^ *(unsigned __int8 *)(v3 + v6)) & 1) == 0)
  {
    v7 = v5;
    (*(void (**)(char *))(v3 + *(int *)(v5 + 48)))(&v10);
    (*(void (**)(char *))(v3 + *(int *)(v7 + 44)))(&v10);
    *(_BYTE *)(v3 + v6) = v4;
    v8 = *(void (**)(char *))(v3 + *(int *)(v7 + 56));
    if (v8)
      v8(&v10);
    sub_100225170(0, v4);
  }
  return swift_endAccess(v11);
}

uint64_t sub_10021E640(char a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  _BOOL4 v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  void (**v8)(char *);
  void (*v9)(char *);
  char v10;

  v2 = v1;
  v3 = a1 & 1;
  v10 = a1 & 1;
  v4 = (a1 & 1) == 0;
  result = sub_100012C44((uint64_t *)&unk_10040FC80);
  v6 = *(int *)(result + 40);
  if (((v4 ^ *(unsigned __int8 *)(v2 + v6)) & 1) == 0)
  {
    v7 = result;
    v8 = (void (**)(char *))(v2 + *(int *)(result + 48));
    if (*v8)
      (*v8)(&v10);
    (*(void (**)(char *))(v2 + *(int *)(v7 + 44)))(&v10);
    *(_BYTE *)(v2 + v6) = v3;
    v9 = *(void (**)(char *))(v2 + *(int *)(v7 + 56));
    if (v9)
      v9(&v10);
    return sub_100225170(0, v3);
  }
  return result;
}

uint64_t sub_10021E778(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t result;
  _BYTE *v10;
  uint64_t v12;
  void (**v13)(__int16 *);
  void (**v14)(__int16 *);
  unsigned __int16 v15;
  __int16 v16;
  char v17;
  char v18;
  char v19;
  char v20;

  v2 = v1;
  v16 = a1;
  v4 = a1 >> 8;
  v5 = a1 >> 16;
  v6 = a1 >> 24;
  v7 = HIDWORD(a1);
  v17 = BYTE2(a1);
  v18 = BYTE3(a1);
  v8 = a1 >> 40;
  v19 = BYTE4(a1);
  v20 = BYTE5(a1);
  result = sub_100012C44((uint64_t *)&unk_10040FC10);
  v10 = (_BYTE *)(v2 + *(int *)(result + 40));
  LOBYTE(v15) = v7;
  HIBYTE(v15) = v8;
  if (*(_DWORD *)v10 != (_DWORD)a1 || *((unsigned __int16 *)v10 + 2) != v15)
  {
    v12 = result;
    v13 = (void (**)(__int16 *))(v2 + *(int *)(result + 48));
    if (*v13)
      (*v13)(&v16);
    (*(void (**)(__int16 *))(v2 + *(int *)(v12 + 44)))(&v16);
    *v10 = a1;
    v10[1] = v4;
    v10[2] = v5;
    v10[3] = v6;
    v10[4] = v7;
    v10[5] = v8;
    v14 = (void (**)(__int16 *))(v2 + *(int *)(v12 + 56));
    if (*v14)
      (*v14)(&v16);
    return sub_1002257D8(0, a1 & 0xFFFFFFFFFFFFLL);
  }
  return result;
}

uint64_t sub_10021E990(unint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  void (**v7)(int *);
  void (**v8)(int *);
  int v9;
  char v10;

  v9 = a1;
  v3 = HIDWORD(a1) & 1;
  v10 = BYTE4(a1) & 1;
  result = sub_100012C44(&qword_10040BB70);
  v5 = result;
  v6 = v1 + *(int *)(result + 40);
  if ((*(_BYTE *)(v6 + 4) & 1) != 0)
  {
    if ((a1 & 0x100000000) != 0)
      return result;
  }
  else if ((a1 & 0x100000000) == 0 && *(_DWORD *)v6 == (_DWORD)a1)
  {
    return result;
  }
  v7 = (void (**)(int *))(v1 + *(int *)(result + 48));
  if (*v7)
    (*v7)(&v9);
  (*(void (**)(int *))(v1 + *(int *)(v5 + 44)))(&v9);
  *(_DWORD *)v6 = a1;
  *(_BYTE *)(v6 + 4) = v3;
  v8 = (void (**)(int *))(v1 + *(int *)(v5 + 56));
  if (*v8)
    (*v8)(&v9);
  return sub_100225EC8(0, a1 | (unint64_t)(v3 << 32));
}

uint64_t MutableDriverProperty.wrappedValue.setter(uint64_t a1, uint64_t a2)
{
  sub_10022A400(a1, a2);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))(a1);
}

void (*WiFiInterface.linkState.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 120);
  v3[4] = v4;
  v5 = v1 + v4;
  swift_beginAccess(v1 + v4, v3, 33, 0);
  v6 = sub_100012C44((uint64_t *)&unk_10040FC80);
  v3[5] = v6;
  v7 = *(int *)(v6 + 40);
  *((_BYTE *)v3 + 52) = *(_BYTE *)(v5 + v7);
  *((_DWORD *)v3 + 12) = v7;
  return sub_10021EBC0;
}

void sub_10021EBC0(uint64_t *a1, char a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (**v8)(_BYTE *);
  uint64_t v9;
  uint64_t v10;
  void (**v11)(_BYTE *);
  _BYTE v12[9];

  v2 = *a1;
  v3 = *(unsigned __int8 *)(*a1 + 52);
  if ((a2 & 1) != 0)
  {
    sub_10021E640(*(_BYTE *)(*a1 + 52));
  }
  else
  {
    v4 = *(int *)(v2 + 48);
    v6 = *(_QWORD *)(v2 + 24);
    v5 = *(_QWORD *)(v2 + 32);
    v12[0] = *(_BYTE *)(*a1 + 52);
    if (v3 != *(unsigned __int8 *)(v6 + v5 + v4))
    {
      v7 = *(_QWORD *)(v2 + 40);
      v8 = (void (**)(_BYTE *))(v6 + v5 + *(int *)(v7 + 48));
      if (*v8)
      {
        (*v8)(v12);
        v5 = *(_QWORD *)(v2 + 32);
        v7 = *(_QWORD *)(v2 + 40);
        v6 = *(_QWORD *)(v2 + 24);
      }
      (*(void (**)(_BYTE *))(v6 + v5 + *(int *)(v7 + 44)))(v12);
      v9 = *(_QWORD *)(v2 + 40);
      v10 = *(_QWORD *)(v2 + 24) + *(_QWORD *)(v2 + 32);
      *(_BYTE *)(v10 + *(int *)(v2 + 48)) = v3;
      v11 = (void (**)(_BYTE *))(v10 + *(int *)(v9 + 56));
      if (*v11)
        (*v11)(v12);
      sub_100225170(0, v3);
    }
  }
  swift_endAccess(v2);
  free((void *)v2);
}

uint64_t WiFiInterface.$linkState.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  v3 = v1 + *(_QWORD *)(*(_QWORD *)v1 + 120);
  swift_beginAccess(v3, v5, 0, 0);
  return sub_100033B48(v3, a1, (uint64_t *)&unk_10040FC80);
}

uint64_t WiFiInterface.$linkState.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE v8[24];

  sub_100012C44((uint64_t *)&unk_10040FC80);
  __chkstk_darwin();
  v4 = &v8[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  sub_100033B48(a1, (uint64_t)v4, (uint64_t *)&unk_10040FC80);
  v5 = v1 + *(_QWORD *)(*(_QWORD *)v1 + 120);
  swift_beginAccess(v5, v8, 33, 0);
  sub_100033A84(v5, (uint64_t *)&unk_10040FC80);
  sub_100063EB8((uint64_t)v4, v5, (uint64_t *)&unk_10040FC80);
  swift_endAccess(v8);
  return sub_100033A84(a1, (uint64_t *)&unk_10040FC80);
}

void (*WiFiInterface.$linkState.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  size_t v4;
  void *v5;
  uint64_t v6;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = *(_QWORD *)(*(_QWORD *)(sub_100012C44((uint64_t *)&unk_10040FC80) - 8) + 64);
  v3[4] = malloc(v4);
  v5 = malloc(v4);
  v3[5] = v5;
  v6 = v1 + *(_QWORD *)(*(_QWORD *)v1 + 120);
  swift_beginAccess(v6, v3, 0, 0);
  sub_100033B48(v6, (uint64_t)v5, (uint64_t *)&unk_10040FC80);
  return sub_10021EEE8;
}

void sub_10021EEE8(uint64_t a1, char a2)
{
  sub_10021F2BC(a1, a2, (void (*)(void *))WiFiInterface.$linkState.setter, (uint64_t *)&unk_10040FC80);
}

uint64_t WiFiInterface.macAddress.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v10[24];

  v1 = sub_100012C44((uint64_t *)&unk_10040FC10);
  __chkstk_darwin(v1);
  v3 = &v10[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v4 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 128);
  swift_beginAccess(v4, v10, 0, 0);
  sub_100033B48(v4, (uint64_t)v3, (uint64_t *)&unk_10040FC10);
  v5 = &v3[*(int *)(v1 + 40)];
  v6 = *(unsigned int *)(v5 + 2);
  v7 = *(unsigned __int16 *)v5;
  sub_100033A84((uint64_t)v3, (uint64_t *)&unk_10040FC10);
  return v7 | (v6 << 16);
}

uint64_t WiFiInterface.macAddress.setter(uint64_t a1)
{
  uint64_t v1;
  _BYTE v4[24];

  swift_beginAccess(v1 + *(_QWORD *)(*(_QWORD *)v1 + 128), v4, 33, 0);
  sub_10021E778(a1 & 0xFFFFFFFFFFFFLL);
  return swift_endAccess(v4);
}

void (*WiFiInterface.macAddress.modify(_QWORD *a1))(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 128);
  v3[4] = v4;
  v5 = v1 + v4;
  swift_beginAccess(v1 + v4, v3, 33, 0);
  v6 = v5 + *(int *)(sub_100012C44((uint64_t *)&unk_10040FC10) + 40);
  *((_DWORD *)v3 + 10) = *(_DWORD *)v6;
  *((_WORD *)v3 + 22) = *(_WORD *)(v6 + 4);
  return sub_10021F094;
}

void sub_10021F094(uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  sub_10021E778(*(unsigned __int16 *)(*(_QWORD *)a1 + 40) | ((unint64_t)*(unsigned int *)(*(_QWORD *)a1 + 42) << 16));
  swift_endAccess(v1);
  free(v1);
}

uint64_t WiFiInterface.$macAddress.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  v3 = v1 + *(_QWORD *)(*(_QWORD *)v1 + 128);
  swift_beginAccess(v3, v5, 0, 0);
  return sub_100033B48(v3, a1, (uint64_t *)&unk_10040FC10);
}

uint64_t WiFiInterface.$macAddress.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE v8[24];

  sub_100012C44((uint64_t *)&unk_10040FC10);
  __chkstk_darwin();
  v4 = &v8[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  sub_100033B48(a1, (uint64_t)v4, (uint64_t *)&unk_10040FC10);
  v5 = v1 + *(_QWORD *)(*(_QWORD *)v1 + 128);
  swift_beginAccess(v5, v8, 33, 0);
  sub_100033A84(v5, (uint64_t *)&unk_10040FC10);
  sub_100063EB8((uint64_t)v4, v5, (uint64_t *)&unk_10040FC10);
  swift_endAccess(v8);
  return sub_100033A84(a1, (uint64_t *)&unk_10040FC10);
}

void (*WiFiInterface.$macAddress.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  size_t v4;
  void *v5;
  uint64_t v6;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = *(_QWORD *)(*(_QWORD *)(sub_100012C44((uint64_t *)&unk_10040FC10) - 8) + 64);
  v3[4] = malloc(v4);
  v5 = malloc(v4);
  v3[5] = v5;
  v6 = v1 + *(_QWORD *)(*(_QWORD *)v1 + 128);
  swift_beginAccess(v6, v3, 0, 0);
  sub_100033B48(v6, (uint64_t)v5, (uint64_t *)&unk_10040FC10);
  return sub_10021F2A8;
}

void sub_10021F2A8(uint64_t a1, char a2)
{
  sub_10021F2BC(a1, a2, (void (*)(void *))WiFiInterface.$macAddress.setter, (uint64_t *)&unk_10040FC10);
}

void sub_10021F2BC(uint64_t a1, char a2, void (*a3)(void *), uint64_t *a4)
{
  void *v5;
  void *v6;
  void *v7;

  v5 = *(void **)a1;
  v6 = *(void **)(*(_QWORD *)a1 + 32);
  v7 = *(void **)(*(_QWORD *)a1 + 40);
  if ((a2 & 1) != 0)
  {
    sub_100033B48(*(_QWORD *)(*(_QWORD *)a1 + 40), (uint64_t)v6, a4);
    a3(v6);
    sub_100033A84((uint64_t)v7, a4);
  }
  else
  {
    a3(*(void **)(*(_QWORD *)a1 + 40));
  }
  free(v7);
  free(v6);
  free(v5);
}

unint64_t WiFiInterface.ipv4Address.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  _BYTE v9[24];

  v1 = sub_100012C44(&qword_10040BB70);
  __chkstk_darwin();
  v3 = &v9[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v4 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 136);
  swift_beginAccess(v4, v9, 0, 0);
  sub_100033B48(v4, (uint64_t)v3, &qword_10040BB70);
  v5 = &v3[*(int *)(v1 + 40)];
  v6 = *(unsigned int *)v5;
  LOBYTE(v1) = v5[4];
  sub_100033A84((uint64_t)v3, &qword_10040BB70);
  return v6 | ((unint64_t)v1 << 32);
}

uint64_t WiFiInterface.ipv4Address.setter(unint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (**v7)(int *);
  int v9;
  char v10;
  _BYTE v11[24];

  v3 = v1 + *(_QWORD *)(*(_QWORD *)v1 + 136);
  swift_beginAccess(v3, v11, 33, 0);
  v9 = a1;
  v10 = BYTE4(a1) & 1;
  v4 = sub_100012C44(&qword_10040BB70);
  v5 = v4;
  v6 = v3 + *(int *)(v4 + 40);
  if ((*(_BYTE *)(v6 + 4) & 1) != 0)
  {
    if ((a1 & 0x100000000) != 0)
      return swift_endAccess(v11);
  }
  else if ((a1 & 0x100000000) == 0 && *(_DWORD *)v6 == (_DWORD)a1)
  {
    return swift_endAccess(v11);
  }
  (*(void (**)(int *))(v3 + *(int *)(v4 + 48)))(&v9);
  (*(void (**)(int *))(v3 + *(int *)(v5 + 44)))(&v9);
  *(_DWORD *)v6 = a1;
  *(_BYTE *)(v6 + 4) = BYTE4(a1) & 1;
  v7 = (void (**)(int *))(v3 + *(int *)(v5 + 56));
  if (*v7)
    (*v7)(&v9);
  sub_100225EC8(0, a1 | ((HIDWORD(a1) & 1) << 32));
  return swift_endAccess(v11);
}

void (*WiFiInterface.ipv4Address.modify(_QWORD *a1))(uint64_t *a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = malloc(0x40uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 136);
  v3[4] = v4;
  v5 = v1 + v4;
  swift_beginAccess(v1 + v4, v3, 33, 0);
  v6 = sub_100012C44(&qword_10040BB70);
  v3[5] = v6;
  v7 = *(int *)(v6 + 40);
  *((_DWORD *)v3 + 12) = *(_DWORD *)(v5 + v7);
  v3 += 6;
  *((_DWORD *)v3 + 2) = v7;
  *((_BYTE *)v3 + 4) = *(_BYTE *)(v5 + v7 + 4);
  return sub_10021F604;
}

void sub_10021F604(uint64_t *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  void (**v10)(int *);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (**v14)(int *);
  int v15;
  char v16;
  char v17;

  v2 = *a1;
  v3 = *(unsigned int *)(*a1 + 48);
  v4 = *(unsigned __int8 *)(*a1 + 52);
  if ((a2 & 1) != 0)
  {
    LOBYTE(v15) = *(_BYTE *)(*a1 + 52);
    sub_10021E990(v3 | ((unint64_t)v4 << 32));
    goto LABEL_15;
  }
  v6 = *(_QWORD *)(v2 + 24);
  v5 = *(_QWORD *)(v2 + 32);
  v7 = v6 + v5 + *(int *)(v2 + 56);
  v15 = *(_DWORD *)(*a1 + 48);
  v16 = v4;
  if ((*(_BYTE *)(v7 + 4) & 1) != 0)
  {
    if (v4)
      goto LABEL_15;
  }
  else
  {
    if (*(_DWORD *)v7 == (_DWORD)v3)
      v8 = v4;
    else
      v8 = 1;
    if ((v8 & 1) == 0)
      goto LABEL_15;
  }
  v9 = *(_QWORD *)(v2 + 40);
  v10 = (void (**)(int *))(v6 + v5 + *(int *)(v9 + 48));
  if (*v10)
  {
    (*v10)(&v15);
    v5 = *(_QWORD *)(v2 + 32);
    v9 = *(_QWORD *)(v2 + 40);
    v6 = *(_QWORD *)(v2 + 24);
  }
  (*(void (**)(int *))(v6 + v5 + *(int *)(v9 + 44)))(&v15);
  v11 = *(_QWORD *)(v2 + 40);
  v12 = *(_QWORD *)(v2 + 24) + *(_QWORD *)(v2 + 32);
  v13 = v12 + *(int *)(v2 + 56);
  *(_DWORD *)v13 = v3;
  *(_BYTE *)(v13 + 4) = v4;
  v14 = (void (**)(int *))(v12 + *(int *)(v11 + 56));
  if (*v14)
    (*v14)(&v15);
  v17 = v4;
  sub_100225EC8(0, v3 | ((unint64_t)v4 << 32));
LABEL_15:
  swift_endAccess(v2);
  free((void *)v2);
}

uint64_t WiFiInterface.$ipv4Address.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  v3 = v1 + *(_QWORD *)(*(_QWORD *)v1 + 136);
  swift_beginAccess(v3, v5, 0, 0);
  return sub_100033B48(v3, a1, &qword_10040BB70);
}

uint64_t WiFiInterface.$ipv4Address.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE v8[24];

  sub_100012C44(&qword_10040BB70);
  __chkstk_darwin();
  v4 = &v8[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  sub_100033B48(a1, (uint64_t)v4, &qword_10040BB70);
  v5 = v1 + *(_QWORD *)(*(_QWORD *)v1 + 136);
  swift_beginAccess(v5, v8, 33, 0);
  sub_100033A84(v5, &qword_10040BB70);
  sub_100063EB8((uint64_t)v4, v5, &qword_10040BB70);
  swift_endAccess(v8);
  return sub_100033A84(a1, &qword_10040BB70);
}

void (*WiFiInterface.$ipv4Address.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  size_t v4;
  void *v5;
  uint64_t v6;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = *(_QWORD *)(*(_QWORD *)(sub_100012C44(&qword_10040BB70) - 8) + 64);
  v3[4] = malloc(v4);
  v5 = malloc(v4);
  v3[5] = v5;
  v6 = v1 + *(_QWORD *)(*(_QWORD *)v1 + 136);
  swift_beginAccess(v6, v3, 0, 0);
  sub_100033B48(v6, (uint64_t)v5, &qword_10040BB70);
  return sub_10021F974;
}

void sub_10021F974(uint64_t a1, char a2)
{
  sub_10021F2BC(a1, a2, (void (*)(void *))WiFiInterface.$ipv4Address.setter, &qword_10040BB70);
}

uint64_t WiFiInterface.ipv6Addresses.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE v8[24];

  v1 = sub_100012C44(&qword_10040BB78);
  __chkstk_darwin(v1);
  v3 = &v8[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v4 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 144);
  swift_beginAccess(v4, v8, 0, 0);
  sub_100033B48(v4, (uint64_t)v3, &qword_10040BB78);
  v5 = *(_QWORD *)&v3[*(int *)(v1 + 40)];
  swift_bridgeObjectRetain(v5);
  sub_100033A84((uint64_t)v3, &qword_10040BB78);
  return v5;
}

uint64_t WiFiInterface.ipv6Addresses.setter(uint64_t a1)
{
  uint64_t v1;
  _BYTE v4[24];

  swift_beginAccess(v1 + *(_QWORD *)(*(_QWORD *)v1 + 144), v4, 33, 0);
  sub_10022A298(a1);
  swift_endAccess(v4);
  return swift_bridgeObjectRelease(a1);
}

void (*WiFiInterface.ipv6Addresses.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[4] = v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 144);
  v3[5] = v4;
  v5 = v1 + v4;
  swift_beginAccess(v1 + v4, v3, 33, 0);
  v6 = *(_QWORD *)(v5 + *(int *)(sub_100012C44(&qword_10040BB78) + 40));
  v3[3] = v6;
  swift_bridgeObjectRetain(v6);
  return sub_10021FB24;
}

void sub_10021FB24(uint64_t a1, char a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD **)a1;
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  if ((a2 & 1) != 0)
  {
    v4 = swift_bridgeObjectRetain(v3);
    sub_10022A298(v4);
    swift_bridgeObjectRelease(v3);
    swift_bridgeObjectRelease(v2[3]);
    swift_endAccess(v2);
  }
  else
  {
    sub_10022A298(v3);
    swift_endAccess(v2);
    swift_bridgeObjectRelease(v3);
  }
  free(v2);
}

uint64_t WiFiInterface.$ipv6Addresses.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE v5[24];

  v3 = v1 + *(_QWORD *)(*(_QWORD *)v1 + 144);
  swift_beginAccess(v3, v5, 0, 0);
  return sub_100033B48(v3, a1, &qword_10040BB78);
}

uint64_t WiFiInterface.$ipv6Addresses.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE v8[24];

  sub_100012C44(&qword_10040BB78);
  __chkstk_darwin();
  v4 = &v8[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  sub_100033B48(a1, (uint64_t)v4, &qword_10040BB78);
  v5 = v1 + *(_QWORD *)(*(_QWORD *)v1 + 144);
  swift_beginAccess(v5, v8, 33, 0);
  sub_100033A84(v5, &qword_10040BB78);
  sub_100063EB8((uint64_t)v4, v5, &qword_10040BB78);
  swift_endAccess(v8);
  return sub_100033A84(a1, &qword_10040BB78);
}

void (*WiFiInterface.$ipv6Addresses.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  _QWORD *v3;
  size_t v4;
  void *v5;
  uint64_t v6;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[3] = v1;
  v4 = *(_QWORD *)(*(_QWORD *)(sub_100012C44(&qword_10040BB78) - 8) + 64);
  v3[4] = malloc(v4);
  v5 = malloc(v4);
  v3[5] = v5;
  v6 = v1 + *(_QWORD *)(*(_QWORD *)v1 + 144);
  swift_beginAccess(v6, v3, 0, 0);
  sub_100033B48(v6, (uint64_t)v5, &qword_10040BB78);
  return sub_10021FD64;
}

void sub_10021FD64(uint64_t a1, char a2)
{
  sub_10021F2BC(a1, a2, (void (*)(void *))WiFiInterface.$ipv6Addresses.setter, &qword_10040BB78);
}

uint64_t WiFiInterface.neighborDiscoveryTable.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE v8[24];

  v3 = *v1;
  v4 = (uint64_t)v1 + *(_QWORD *)(*v1 + 152);
  swift_beginAccess(v4, v8, 0, 0);
  v6 = type metadata accessor for WiFiInterface.NeighborDiscoveryTable(0, *(_QWORD *)(v3 + 80), *(_QWORD *)(v3 + 88), v5);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, v4, v6);
}

uint64_t WiFiInterface.neighborDiscoveryTable.setter(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE v8[24];

  v3 = *v1;
  v4 = (uint64_t)v1 + *(_QWORD *)(*v1 + 152);
  swift_beginAccess(v4, v8, 33, 0);
  v6 = type metadata accessor for WiFiInterface.NeighborDiscoveryTable(0, *(_QWORD *)(v3 + 80), *(_QWORD *)(v3 + 88), v5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(v4, a1, v6);
  return swift_endAccess(v8);
}

uint64_t (*WiFiInterface.neighborDiscoveryTable.modify(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + *(_QWORD *)(*(_QWORD *)v1 + 152), a1, 33, 0);
  return j__swift_endAccess;
}

uint64_t WiFiInterface.logger.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(_QWORD *)(*(_QWORD *)v1 + 160);
  v4 = type metadata accessor for Logger(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t *WiFiInterface.__allocating_init(driver:components:logger:)(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;

  swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
  return WiFiInterface.init(driver:components:logger:)(a1, a2, a3, v7);
}

uint64_t *WiFiInterface.init(driver:components:logger:)(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t AssociatedTypeWitness;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  void (*v41)(char *, uint64_t);
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint8_t *v48;
  uint8_t *v49;
  void (*v50)(uint64_t, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t (**AssociatedConformanceWitness)(_QWORD, _QWORD);
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(char *, uint64_t, uint64_t);
  void (*v67)(char *, uint64_t, uint64_t);
  char *v68;
  uint64_t v69;
  void (*v70)(char *, uint64_t);
  char *v71;
  uint64_t *v72;
  Swift::String v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t (*v77)(char);
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t *v82;
  Swift::String v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t (*v88)(uint64_t);
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t *v94;
  Swift::String v95;
  void (*v96)(char *, uint64_t, uint64_t);
  uint64_t (*v97)(uint64_t);
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t (*v101)(unint64_t);
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t *v108;
  uint64_t *v109;
  Swift::String v110;
  void (*v111)(uint64_t, uint64_t, uint64_t);
  uint64_t v112;
  uint64_t v113;
  uint64_t (*v114)(uint64_t);
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  void (*v120)(uint64_t, uint64_t, uint64_t);
  uint64_t *v121;
  void (*v122)(uint64_t *);
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  NSObject *v129;
  os_log_type_t v130;
  uint8_t *v131;
  uint64_t *v132;
  uint64_t v133;
  unint64_t v134;
  unint64_t v135;
  uint64_t *v137;
  uint64_t *v138;
  uint64_t **v139;
  void (*v140)(char *, char *, uint64_t);
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t (**v147)(_QWORD, _QWORD);
  void (*v148)(uint64_t, uint64_t, uint64_t);
  uint64_t v149;
  uint64_t *v150;
  char *v151;
  uint64_t *v152;
  char *v153;
  uint64_t *v154;
  char *v155;
  uint64_t *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  char *v160;
  uint64_t v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  char v169[8];
  uint64_t *v170;
  uint64_t *v171;

  v5 = v4;
  v167 = a3;
  v165 = a2;
  v7 = *(_QWORD *)(*v4 + 80);
  v8 = *(_QWORD *)(*v4 + 88);
  v9 = type metadata accessor for WiFiInterface.NeighborDiscoveryTable(0, v7, v8, a4);
  v158 = *(_QWORD *)(v9 - 8);
  v159 = v9;
  __chkstk_darwin(v9);
  v157 = (uint64_t)&v137 - v10;
  v11 = sub_100012C44(&qword_10040BB78);
  __chkstk_darwin(v11);
  v156 = (uint64_t *)((char *)&v137 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = sub_100012C44(&qword_10040BB70);
  __chkstk_darwin(v13);
  v154 = (uint64_t *)((char *)&v137 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = sub_100012C44((uint64_t *)&unk_10040FC10);
  __chkstk_darwin(v15);
  v152 = (uint64_t *)((char *)&v137 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v17 = sub_100012C44((uint64_t *)&unk_10040FC80);
  __chkstk_darwin(v17);
  v150 = (uint64_t *)((char *)&v137 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  v19 = type metadata accessor for Logger(0);
  v20 = *(_QWORD *)(v19 - 8);
  v163 = v19;
  v164 = v20;
  v21 = __chkstk_darwin(v19);
  v155 = (char *)&v137 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __chkstk_darwin(v21);
  v151 = (char *)&v137 - v24;
  __chkstk_darwin(v23);
  v26 = (char *)&v137 - v25;
  v27 = v8;
  v28 = v7;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v8, v7, &protocol requirements base descriptor for P2PControls, &associated type descriptor for P2PControls.Driver);
  v30 = type metadata accessor for Optional(0, AssociatedTypeWitness);
  v31 = *(_QWORD *)(v30 - 8);
  v32 = __chkstk_darwin(v30);
  v34 = (char *)&v137 - v33;
  v35 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v36 = __chkstk_darwin(v32);
  v153 = (char *)&v137 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v36);
  v160 = (char *)&v137 - v38;
  (*(void (**)(char *, char *, uint64_t))(v31 + 16))(v34, a1, v30);
  v161 = v35;
  v39 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v35 + 48))(v34, 1, AssociatedTypeWitness);
  v162 = a1;
  if (v39 == 1)
  {
    v40 = v164;
    v41 = *(void (**)(char *, uint64_t))(v31 + 8);
    v41(v34, v30);
    v42 = Logger.init(subsystem:category:)(0xD000000000000012, 0x8000000100360DF0, 0x6361667265746E69, 0xE900000000000065);
    v43 = Logger.logObject.getter(v42);
    v44 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v43, v44))
    {
      v45 = v27;
      v46 = v28;
      v47 = v30;
      v48 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v48 = 0;
      _os_log_impl((void *)&_mh_execute_header, v43, v44, "Unable to create WiFiInterface because no Driver was provided", v48, 2u);
      v49 = v48;
      v30 = v47;
      v28 = v46;
      v27 = v45;
      swift_slowDealloc(v49, -1, -1);
    }

    v50 = *(void (**)(uint64_t, uint64_t))(v40 + 8);
    v51 = v163;
    v50(v167, v163);
    v52 = swift_getAssociatedTypeWitness(0, v27, v28, &protocol requirements base descriptor for P2PControls, &associated type descriptor for P2PControls.Components);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 8))(v165, v52);
    v41(v162, v30);
    v50((uint64_t)v26, v51);
    v54 = type metadata accessor for WiFiInterface(0, v28, v27, v53);
    swift_deallocPartialClassInstance(v5, v54, *(unsigned int *)(*v5 + 48), *(unsigned __int16 *)(*v5 + 52));
    return 0;
  }
  else
  {
    v143 = v31;
    v144 = v30;
    v57 = v160;
    v56 = v161;
    (*(void (**)(char *, char *, uint64_t))(v161 + 32))(v160, v34, AssociatedTypeWitness);
    v58 = (char *)v5 + *(_QWORD *)(*v5 + 96);
    v140 = *(void (**)(char *, char *, uint64_t))(v56 + 16);
    v140(v58, v57, AssociatedTypeWitness);
    v59 = v27;
    v60 = v28;
    AssociatedConformanceWitness = (uint64_t (**)(_QWORD, _QWORD))swift_getAssociatedConformanceWitness(v27, v28, AssociatedTypeWitness, &protocol requirements base descriptor for P2PControls, &associated conformance descriptor for P2PControls.P2PControls.Driver: WiFiDriver);
    v62 = AssociatedConformanceWitness[5](AssociatedTypeWitness, AssociatedConformanceWitness);
    v63 = (uint64_t *)((char *)v5 + *(_QWORD *)(*v5 + 104));
    *v63 = v62;
    v63[1] = v64;
    v65 = v163;
    v66 = *(void (**)(char *, uint64_t, uint64_t))(v164 + 16);
    v66((char *)v5 + *(_QWORD *)(*v5 + 160), v167, v163);
    v67 = v66;
    v148 = (void (*)(uint64_t, uint64_t, uint64_t))v66;
    v68 = (char *)v5 + *(_QWORD *)(*v5 + 112);
    v69 = swift_getAssociatedTypeWitness(0, v59, v60, &protocol requirements base descriptor for P2PControls, &associated type descriptor for P2PControls.Components);
    v141 = *(_QWORD *)(v69 - 8);
    v70 = *(void (**)(char *, uint64_t))(v141 + 16);
    v142 = v69;
    v70(v68, v165);
    v71 = (char *)v5 + *(_QWORD *)(*v5 + 104);
    v72 = (uint64_t *)*((_QWORD *)v71 + 1);
    v170 = *(uint64_t **)v71;
    v171 = v72;
    swift_bridgeObjectRetain(v72);
    v73._countAndFlagsBits = 0x7473206B6E696C20;
    v73._object = (void *)0xEB00000000657461;
    String.append(_:)(v73);
    v138 = v170;
    v137 = v171;
    v74 = (uint64_t)v151;
    v67(v151, v167, v65);
    v75 = (uint64_t)v5 + *(_QWORD *)(*v5 + 96);
    LOBYTE(v68) = AssociatedConformanceWitness[6](AssociatedTypeWitness, AssociatedConformanceWitness);
    v76 = v60;
    v145 = v59;
    v77 = sub_100220C1C(v75, v60, v59);
    v166 = AssociatedTypeWitness;
    v79 = v78;
    v80 = swift_allocObject(&unk_1003F0F50, 32, 7);
    *(_QWORD *)(v80 + 16) = v77;
    *(_QWORD *)(v80 + 24) = v79;
    v81 = v150;
    sub_100220DB8((uint64_t)v138, (unint64_t)v137, v74, v68, 0, (void (*)(char *))sub_10022A5C8, (void (*)(char *))v80, sub_10022A200, v150, 0);
    sub_100063EB8((uint64_t)v81, (uint64_t)v5 + *(_QWORD *)(*v5 + 120), (uint64_t *)&unk_10040FC80);
    v82 = (uint64_t *)*((_QWORD *)v71 + 1);
    v170 = *(uint64_t **)v71;
    v171 = v82;
    swift_bridgeObjectRetain(v82);
    v83._countAndFlagsBits = 7234013692659060000;
    v83._object = (void *)0xEC00000073736572;
    String.append(_:)(v83);
    v150 = v170;
    v138 = v171;
    v84 = v163;
    v148(v74, v167, v163);
    v147 = AssociatedConformanceWitness;
    v85 = AssociatedConformanceWitness[8](v166, AssociatedConformanceWitness);
    v86 = sub_10021D0D8();
    v87 = v76;
    v149 = v76;
    v88 = sub_100223800(v75, v76, v59);
    v90 = v89;
    v91 = swift_allocObject(&unk_1003F0F78, 32, 7);
    *(_QWORD *)(v91 + 16) = v88;
    *(_QWORD *)(v91 + 24) = v90;
    v92 = v85 & 0xFFFFFFFFFFFFLL | ((HIWORD(v85) & 1) << 48);
    v93 = v152;
    sub_100221544((uint64_t)v150, (unint64_t)v138, v74, v92, v86 & 0xFFFFFFFFFFFCLL | 2, (void (*)(__int16 *))sub_10022A5EC, (void (*)(__int16 *))v91, (uint64_t (*)(__int16 *))sub_10022A1A8, v152, 0);
    sub_100063EB8((uint64_t)v93, (uint64_t)v5 + *(_QWORD *)(*v5 + 128), (uint64_t *)&unk_10040FC10);
    v139 = (uint64_t **)v71;
    v94 = (uint64_t *)*((_QWORD *)v71 + 1);
    v170 = *(uint64_t **)v71;
    v171 = v94;
    swift_bridgeObjectRetain(v94);
    v95._countAndFlagsBits = 0x6461203476504920;
    v95._object = (void *)0xED00007373657264;
    String.append(_:)(v95);
    v150 = v170;
    v138 = v171;
    v152 = v5;
    v96 = (void (*)(char *, uint64_t, uint64_t))v148;
    v148(v74, v167, v84);
    v97 = (uint64_t (*)(uint64_t))v147[10];
    v146 = v75;
    v98 = v97(v166);
    v99 = v75;
    v100 = v145;
    v101 = sub_10022399C(v99, v87, v145);
    v103 = v102;
    v104 = swift_allocObject(&unk_1003F0FA0, 32, 7);
    *(_QWORD *)(v104 + 16) = v101;
    *(_QWORD *)(v104 + 24) = v103;
    v105 = (uint64_t)v155;
    v55 = v152;
    v96(v155, v74, v84);
    LOBYTE(v170) = 0;
    v106 = v98 & (unint64_t)&_mh_execute_header & 0xFFFFFFFF00000000 | v98;
    v107 = v98 | ((HIDWORD(v98) & 1) << 32);
    v108 = v154;
    sub_1002225F8((uint64_t)v150, (unint64_t)v138, v105, v106, v107, (void (*)(int *))sub_10022A618, (void (*)(int *))v104, sub_100223B40, v154, 0);
    v164 = *(_QWORD *)(v164 + 8);
    ((void (*)(uint64_t, uint64_t))v164)(v74, v84);
    sub_100063EB8((uint64_t)v108, (uint64_t)v55 + *(_QWORD *)(*v55 + 136), &qword_10040BB70);
    v109 = v139[1];
    v170 = *v139;
    v171 = v109;
    swift_bridgeObjectRetain(v109);
    v110._countAndFlagsBits = 0x6461203676504920;
    v110._object = (void *)0xED00007373657264;
    String.append(_:)(v110);
    v154 = v170;
    v150 = v171;
    v96((char *)v74, v167, v84);
    v111 = (void (*)(uint64_t, uint64_t, uint64_t))v96;
    v112 = v146;
    v113 = ((uint64_t (*)(uint64_t))v147[12])(v166);
    v114 = sub_100223DBC(v112, v149, v100);
    v116 = v115;
    v117 = swift_allocObject(&unk_1003F0FC8, 32, 7);
    *(_QWORD *)(v117 + 16) = v114;
    *(_QWORD *)(v117 + 24) = v116;
    v118 = v84;
    v119 = v84;
    v120 = v111;
    v111(v105, v74, v119);
    swift_bridgeObjectRetain(v113);
    v121 = v156;
    v122 = (void (*)(uint64_t *))v117;
    v123 = v166;
    v124 = v167;
    sub_100221D90((uint64_t)v154, (unint64_t)v150, v105, v113, v113, (void (*)(uint64_t *))sub_10022A64C, v122, sub_10022A150, v156, 0);
    ((void (*)(uint64_t, uint64_t))v164)(v74, v118);
    sub_100063EB8((uint64_t)v121, (uint64_t)v55 + *(_QWORD *)(*v55 + 144), &qword_10040BB78);
    v125 = (uint64_t)v153;
    v140(v153, (char *)v146, v123);
    v126 = v118;
    v120(v74, v124, v118);
    v127 = v157;
    sub_100223F58(v125, v74, v149, v145, v157);
    (*(void (**)(char *, uint64_t, uint64_t))(v158 + 32))((char *)v55 + *(_QWORD *)(*v55 + 152), v127, v159);
    v128 = swift_retain(v55);
    v129 = Logger.logObject.getter(v128);
    v130 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v129, v130))
    {
      v131 = (uint8_t *)swift_slowAlloc(12, -1);
      v132 = (uint64_t *)swift_slowAlloc(32, -1);
      v170 = v132;
      *(_DWORD *)v131 = 136315138;
      v133 = WiFiInterface.description.getter();
      v135 = v134;
      v168 = sub_100013CC8(v133, v134, (uint64_t *)&v170);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v168, v169);
      swift_release(v55);
      swift_bridgeObjectRelease(v135);
      _os_log_impl((void *)&_mh_execute_header, v129, v130, "Created %s", v131, 0xCu);
      swift_arrayDestroy(v132, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v132, -1, -1);
      swift_slowDealloc(v131, -1, -1);

      ((void (*)(uint64_t, uint64_t))v164)(v124, v126);
      (*(void (**)(uint64_t, uint64_t))(v141 + 8))(v165, v142);
      (*(void (**)(char *, uint64_t))(v143 + 8))(v162, v144);
      (*(void (**)(char *, uint64_t))(v161 + 8))(v160, v166);
    }
    else
    {
      swift_release(v55);

      ((void (*)(uint64_t, uint64_t))v164)(v124, v126);
      (*(void (**)(uint64_t, uint64_t))(v141 + 8))(v165, v142);
      (*(void (**)(char *, uint64_t))(v143 + 8))(v162, v144);
      (*(void (**)(char *, uint64_t))(v161 + 8))(v160, v123);
    }
  }
  return v55;
}

uint64_t (*sub_100220C1C(uint64_t a1, uint64_t a2, uint64_t a3))(char a1)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a3, a2, &protocol requirements base descriptor for P2PControls, &associated type descriptor for P2PControls.Driver);
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v8 = *(_QWORD *)(v7 + 64);
  __chkstk_darwin(AssociatedTypeWitness);
  v10 = (char *)&v15 - v9;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v15 - v9, a1, AssociatedTypeWitness);
  v11 = *(unsigned __int8 *)(v7 + 80);
  v12 = (v11 + 32) & ~v11;
  v13 = swift_allocObject(&unk_1003F1658, v12 + v8, v11 | 7);
  *(_QWORD *)(v13 + 16) = a2;
  *(_QWORD *)(v13 + 24) = a3;
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v13 + v12, v10, AssociatedTypeWitness);
  return sub_10022D9B8;
}

uint64_t sub_100220D08(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = a1 & 1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, a4, a3, &protocol requirements base descriptor for P2PControls, &associated type descriptor for P2PControls.Driver);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a4, a3, AssociatedTypeWitness, &protocol requirements base descriptor for P2PControls, &associated conformance descriptor for P2PControls.P2PControls.Driver: WiFiDriver);
  v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 56);
  v10 = swift_checkMetadataState(0, AssociatedTypeWitness);
  return v9(v6, v10, AssociatedConformanceWitness);
}

uint64_t sub_100220DB8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unsigned __int8 a4@<W3>, char a5@<W4>, void (*a6)(char *)@<X5>, void (*a7)(char *)@<X6>, uint64_t (*a8)(_BYTE *)@<X7>, uint64_t *a9@<X8>, uint64_t a10)
{
  char v17;
  int *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  void (**v25)(char *);
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t (*v43)(_BYTE *);
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v49;
  uint64_t v50;
  _BYTE v51[16];
  char v52;

  v47 = a4;
  v17 = a5 & 1;
  v52 = a5 & 1;
  v18 = (int *)sub_100012C44((uint64_t *)&unk_10040FC80);
  v19 = (uint64_t *)((char *)a9 + v18[12]);
  *v19 = 0;
  v19[1] = 0;
  v20 = (uint64_t *)((char *)a9 + v18[13]);
  *v20 = 0;
  v20[1] = 0;
  v21 = (uint64_t *)((char *)a9 + v18[14]);
  *v21 = 0;
  v21[1] = 0;
  *a9 = a1;
  a9[1] = a2;
  v45 = a2;
  v22 = (char *)a9 + v18[9];
  v23 = type metadata accessor for Logger(0);
  v46 = *(_QWORD *)(v23 - 8);
  v44 = v23;
  (*(void (**)(char *, uint64_t))(v46 + 16))(v22, a3);
  v24 = (uint64_t *)((char *)a9 + v18[15]);
  v43 = a8;
  *v24 = a8;
  v24[1] = a10;
  v25 = (void (**)(char *))((char *)a9 + v18[11]);
  *v25 = a6;
  v25[1] = a7;
  if (v47 == 2)
  {
    *((_BYTE *)a9 + v18[10]) = v17;
    swift_retain(a10);
    swift_bridgeObjectRetain(v45);
    swift_retain(a7);
    a6(&v52);
    v51[0] = v17;
    swift_retain_n(a10, 2);
    v35 = swift_bridgeObjectRetain(v45);
    v36 = Logger.logObject.getter(v35);
    v37 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v36, v37))
    {
      v38 = swift_slowAlloc(22, -1);
      v39 = swift_slowAlloc(64, -1);
      v50 = v39;
      *(_DWORD *)v38 = 136315394;
      swift_bridgeObjectRetain(v45);
      v49 = sub_100013CC8(a1, v45, &v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50);
      swift_bridgeObjectRelease_n(v45, 3);
      *(_WORD *)(v38 + 12) = 2080;
      v40 = v43(v51);
      v42 = v41;
      v49 = sub_100013CC8(v40, v41, &v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50);
      swift_release_n(a10, 2);
      swift_bridgeObjectRelease(v42);
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "No initial value for %s set default to %s", (uint8_t *)v38, 0x16u);
      swift_arrayDestroy(v39, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v39, -1, -1);
      swift_slowDealloc(v38, -1, -1);

      swift_release(a7);
      swift_release(a10);
      return (*(uint64_t (**)(uint64_t, uint64_t))(v46 + 8))(a3, v44);
    }
    else
    {
      swift_bridgeObjectRelease_n(v45, 2);

      swift_release(a7);
      swift_release_n(a10, 3);
      return (*(uint64_t (**)(uint64_t, uint64_t))(v46 + 8))(a3, v44);
    }
  }
  else
  {
    *((_BYTE *)a9 + v18[10]) = a4 & 1;
    v51[0] = a4 & 1;
    swift_retain_n(a10, 3);
    swift_bridgeObjectRetain_n(v45, 2);
    v26 = swift_retain(a7);
    v27 = Logger.logObject.getter(v26);
    v28 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v27, v28))
    {
      v29 = swift_slowAlloc(22, -1);
      v30 = swift_slowAlloc(64, -1);
      v50 = v30;
      *(_DWORD *)v29 = 136315394;
      swift_bridgeObjectRetain(v45);
      v49 = sub_100013CC8(a1, v45, &v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50);
      swift_bridgeObjectRelease_n(v45, 3);
      *(_WORD *)(v29 + 12) = 2080;
      v31 = v43(v51);
      v33 = v32;
      v49 = sub_100013CC8(v31, v32, &v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50);
      swift_release_n(a10, 2);
      swift_bridgeObjectRelease(v33);
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "Initialized value for %s to %s", (uint8_t *)v29, 0x16u);
      swift_arrayDestroy(v30, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v30, -1, -1);
      swift_slowDealloc(v29, -1, -1);

      swift_release(a7);
      swift_release(a10);
      return (*(uint64_t (**)(uint64_t, uint64_t))(v46 + 8))(a3, v44);
    }
    else
    {
      swift_bridgeObjectRelease_n(v45, 2);

      swift_release(a7);
      swift_release_n(a10, 3);
      return (*(uint64_t (**)(uint64_t, uint64_t))(v46 + 8))(a3, v44);
    }
  }
}

uint64_t sub_100221544@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, void (*a6)(__int16 *)@<X5>, void (*a7)(__int16 *)@<X6>, uint64_t (*a8)(__int16 *)@<X7>, uint64_t *a9@<X8>, uint64_t (*a10)(__int16 *))
{
  char v12;
  int *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  uint64_t (**v24)(__int16 *);
  void (**v25)(__int16 *);
  char *v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(__int16 *);
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  void (*v37)(__int16 *);
  _BYTE *v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t (*v51)(__int16 *);
  os_log_type_t type[8];
  unint64_t v53;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __int16 v60;
  char v61;
  char v62;
  char v63;
  char v64;
  __int16 v65;
  char v66;
  char v67;
  char v68;
  char v69;

  v12 = a5;
  v65 = a5;
  *(_QWORD *)type = a5 >> 8;
  v53 = a5 >> 16;
  v66 = BYTE2(a5);
  v49 = a5 >> 24;
  v67 = BYTE3(a5);
  v48 = HIDWORD(a5);
  v68 = BYTE4(a5);
  v50 = a5 >> 40;
  v69 = BYTE5(a5);
  v18 = (int *)sub_100012C44((uint64_t *)&unk_10040FC10);
  v19 = (uint64_t *)((char *)a9 + v18[12]);
  *v19 = 0;
  v19[1] = 0;
  v20 = (uint64_t *)((char *)a9 + v18[13]);
  *v20 = 0;
  v20[1] = 0;
  v21 = (uint64_t *)((char *)a9 + v18[14]);
  *v21 = 0;
  v21[1] = 0;
  *a9 = a1;
  a9[1] = a2;
  v57 = a2;
  v22 = (char *)a9 + v18[9];
  v23 = type metadata accessor for Logger(0);
  v55 = *(_QWORD *)(v23 - 8);
  v56 = v23;
  (*(void (**)(char *, uint64_t))(v55 + 16))(v22, a3);
  v24 = (uint64_t (**)(__int16 *))((char *)a9 + v18[15]);
  v51 = a8;
  *v24 = a8;
  v24[1] = a10;
  v25 = (void (**)(__int16 *))((char *)a9 + v18[11]);
  *v25 = a6;
  v25[1] = a7;
  if ((a4 & 0x1000000000000) == 0)
  {
    v26 = (char *)a9 + v18[10];
    *(_WORD *)v26 = a4;
    v26[2] = BYTE2(a4);
    v26[3] = BYTE3(a4);
    v26[4] = BYTE4(a4);
    v26[5] = BYTE5(a4);
    v60 = a4;
    v61 = BYTE2(a4);
    v62 = BYTE3(a4);
    v63 = BYTE4(a4);
    v64 = BYTE5(a4);
    swift_retain_n(a10, 3);
    swift_bridgeObjectRetain_n(v57, 2);
    v27 = swift_retain(a7);
    v28 = Logger.logObject.getter(v27);
    v29 = static os_log_type_t.default.getter();
    v30 = a3;
    if (!os_log_type_enabled(v28, v29))
    {
      swift_bridgeObjectRelease_n(v57, 2);

      swift_release(a7);
      swift_release_n(a10, 3);
      return (*(uint64_t (**)(uint64_t, uint64_t))(v55 + 8))(a3, v56);
    }
    v31 = swift_slowAlloc(22, -1);
    v32 = swift_slowAlloc(64, -1);
    v59 = v32;
    *(_DWORD *)v31 = 136315394;
    swift_bridgeObjectRetain(v57);
    v58 = sub_100013CC8(a1, v57, &v59);
    v33 = a10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, &v59);
    swift_bridgeObjectRelease_n(v57, 3);
    *(_WORD *)(v31 + 12) = 2080;
    v34 = v51(&v60);
    v36 = v35;
    v58 = sub_100013CC8(v34, v35, &v59);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, &v59);
    swift_release_n(a10, 2);
    swift_bridgeObjectRelease(v36);
    _os_log_impl((void *)&_mh_execute_header, v28, v29, "Initialized value for %s to %s", (uint8_t *)v31, 0x16u);
    swift_arrayDestroy(v32, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v32, -1, -1);
    swift_slowDealloc(v31, -1, -1);

    v37 = a7;
    goto LABEL_8;
  }
  v38 = (char *)a9 + v18[10];
  *v38 = v12;
  v38[1] = type[0];
  v38[2] = v53;
  v38[3] = v49;
  v38[4] = v48;
  v38[5] = v50;
  swift_retain(a10);
  swift_bridgeObjectRetain(v57);
  swift_retain(a7);
  a6(&v65);
  LOBYTE(v60) = v12;
  HIBYTE(v60) = type[0];
  v61 = v53;
  v62 = v49;
  v63 = v48;
  v64 = v50;
  swift_retain_n(a10, 2);
  v39 = swift_bridgeObjectRetain(v57);
  v30 = a3;
  v40 = Logger.logObject.getter(v39);
  v41 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v40, v41))
  {
    v42 = swift_slowAlloc(22, -1);
    v43 = swift_slowAlloc(64, -1);
    v59 = v43;
    *(_DWORD *)v42 = 136315394;
    swift_bridgeObjectRetain(v57);
    v58 = sub_100013CC8(a1, v57, &v59);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, &v59);
    swift_bridgeObjectRelease_n(v57, 3);
    *(_WORD *)(v42 + 12) = 2080;
    v33 = a10;
    v44 = v51(&v60);
    v46 = v45;
    v58 = sub_100013CC8(v44, v45, &v59);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, &v59);
    swift_release_n(a10, 2);
    swift_bridgeObjectRelease(v46);
    _os_log_impl((void *)&_mh_execute_header, v40, v41, "No initial value for %s set default to %s", (uint8_t *)v42, 0x16u);
    swift_arrayDestroy(v43, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v43, -1, -1);
    swift_slowDealloc(v42, -1, -1);

    v37 = a7;
LABEL_8:
    swift_release(v37);
    swift_release(v33);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v55 + 8))(v30, v56);
  }
  swift_bridgeObjectRelease_n(v57, 2);

  swift_release(a7);
  swift_release_n(a10, 3);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v55 + 8))(a3, v56);
}

uint64_t sub_100221D90@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void (*a6)(uint64_t *)@<X5>, void (*a7)(uint64_t *)@<X6>, uint64_t (*a8)(_QWORD *)@<X7>, uint64_t *a9@<X8>, uint64_t a10)
{
  int *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  unint64_t v22;
  char *v23;
  _QWORD *v24;
  void (**v25)(uint64_t *);
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t (*v45)(_QWORD *);
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  _QWORD v51[2];
  uint64_t v52;

  v52 = a5;
  v18 = (int *)sub_100012C44(&qword_10040BB78);
  v19 = (uint64_t *)((char *)a9 + v18[12]);
  *v19 = 0;
  v19[1] = 0;
  v20 = (uint64_t *)((char *)a9 + v18[13]);
  *v20 = 0;
  v20[1] = 0;
  v21 = (uint64_t *)((char *)a9 + v18[14]);
  *v21 = 0;
  v21[1] = 0;
  v44 = a1;
  *a9 = a1;
  a9[1] = a2;
  v22 = a2;
  v23 = (char *)a9 + v18[9];
  v46 = type metadata accessor for Logger(0);
  v47 = *(_QWORD *)(v46 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v47 + 16))(v23, a3, v46);
  v24 = (uint64_t *)((char *)a9 + v18[15]);
  v45 = a8;
  *v24 = a8;
  v24[1] = a10;
  v25 = (void (**)(uint64_t *))((char *)a9 + v18[11]);
  *v25 = a6;
  v25[1] = a7;
  if (a4)
  {
    *(uint64_t *)((char *)a9 + v18[10]) = a4;
    v51[0] = a4;
    swift_bridgeObjectRetain_n(a4, 4);
    swift_retain_n(a10, 3);
    swift_bridgeObjectRetain_n(v22, 2);
    v26 = swift_retain(a7);
    v27 = Logger.logObject.getter(v26);
    v28 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v27, v28))
    {
      v29 = swift_slowAlloc(22, -1);
      v30 = swift_slowAlloc(64, -1);
      v50 = v30;
      *(_DWORD *)v29 = 136315394;
      swift_bridgeObjectRetain(v22);
      v49 = sub_100013CC8(v44, v22, &v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50);
      swift_bridgeObjectRelease_n(v22, 3);
      *(_WORD *)(v29 + 12) = 2080;
      v31 = v45(v51);
      v33 = v32;
      v49 = sub_100013CC8(v31, v32, &v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50);
      swift_bridgeObjectRelease(a4);
      swift_release_n(a10, 2);
      swift_bridgeObjectRelease(v33);
      swift_bridgeObjectRelease(v51[0]);
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "Initialized value for %s to %s", (uint8_t *)v29, 0x16u);
      swift_arrayDestroy(v30, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v30, -1, -1);
      swift_slowDealloc(v29, -1, -1);

      swift_release(a7);
      swift_release(a10);
      v34 = v52;
      swift_bridgeObjectRelease(a4);
      swift_bridgeObjectRelease(v34);
      (*(void (**)(uint64_t, uint64_t))(v47 + 8))(a3, v46);
      return swift_bridgeObjectRelease(a4);
    }
    else
    {
      swift_bridgeObjectRelease(a5);
      swift_bridgeObjectRelease_n(v22, 2);
      swift_bridgeObjectRelease_n(a4, 3);

      swift_release(a7);
      swift_release_n(a10, 3);
      (*(void (**)(uint64_t, uint64_t))(v47 + 8))(a3, v46);
      return swift_bridgeObjectRelease(a4);
    }
  }
  else
  {
    *(uint64_t *)((char *)a9 + v18[10]) = a5;
    swift_retain(a10);
    swift_bridgeObjectRetain(v22);
    swift_retain(a7);
    swift_bridgeObjectRetain(a5);
    a6(&v52);
    v51[0] = a5;
    swift_retain_n(a10, 2);
    swift_bridgeObjectRetain_n(a5, 2);
    v36 = swift_bridgeObjectRetain(v22);
    v37 = Logger.logObject.getter(v36);
    v38 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v37, v38))
    {
      v39 = swift_slowAlloc(22, -1);
      v40 = swift_slowAlloc(64, -1);
      v50 = v40;
      *(_DWORD *)v39 = 136315394;
      swift_bridgeObjectRetain(v22);
      v49 = sub_100013CC8(v44, v22, &v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50);
      swift_bridgeObjectRelease_n(v22, 3);
      *(_WORD *)(v39 + 12) = 2080;
      v41 = a8(v51);
      v43 = v42;
      v49 = sub_100013CC8(v41, v42, &v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50);
      swift_bridgeObjectRelease(a5);
      swift_release_n(a10, 2);
      swift_bridgeObjectRelease(v43);
      swift_bridgeObjectRelease(v51[0]);
      _os_log_impl((void *)&_mh_execute_header, v37, v38, "No initial value for %s set default to %s", (uint8_t *)v39, 0x16u);
      swift_arrayDestroy(v40, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v40, -1, -1);
      swift_slowDealloc(v39, -1, -1);

      swift_release(a7);
      swift_release(a10);
      swift_bridgeObjectRelease(v52);
      return (*(uint64_t (**)(uint64_t, uint64_t))(v47 + 8))(a3, v46);
    }
    else
    {
      swift_bridgeObjectRelease_n(v22, 2);
      swift_bridgeObjectRelease_n(a5, 3);

      swift_release(a7);
      swift_release_n(a10, 3);
      return (*(uint64_t (**)(uint64_t, uint64_t))(v47 + 8))(a3, v46);
    }
  }
}

uint64_t sub_1002225F8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, void (*a6)(int *)@<X5>, void (*a7)(int *)@<X6>, uint64_t (*a8)(int *)@<X7>, uint64_t *a9@<X8>, uint64_t (*a10)(int *))
{
  int v13;
  int *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  void (*v22)(int *);
  char *v23;
  uint64_t v24;
  uint64_t (**v25)(int *);
  void (**v26)(int *);
  char *v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char *v37;
  void (*v38)(int *);
  uint64_t (*v39)(int *);
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t type;
  uint64_t (*v50)(int *);
  unint64_t v51;
  uint64_t v52;
  uint64_t v54;
  uint64_t v55;
  int v56;
  char v57;
  int v58;
  char v59;

  v13 = a5;
  v58 = a5;
  v48 = HIDWORD(a5) & 1;
  v59 = BYTE4(a5) & 1;
  v18 = (int *)sub_100012C44(&qword_10040BB70);
  v19 = (uint64_t *)((char *)a9 + v18[12]);
  *v19 = 0;
  v19[1] = 0;
  v20 = (uint64_t *)((char *)a9 + v18[13]);
  *v20 = 0;
  v20[1] = 0;
  v21 = (uint64_t *)((char *)a9 + v18[14]);
  *v21 = 0;
  v21[1] = 0;
  type = a1;
  *a9 = a1;
  a9[1] = a2;
  v22 = a7;
  v51 = a2;
  v23 = (char *)a9 + v18[9];
  v24 = type metadata accessor for Logger(0);
  v52 = *(_QWORD *)(v24 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v52 + 16))(v23, a3, v24);
  v25 = (uint64_t (**)(int *))((char *)a9 + v18[15]);
  v50 = a8;
  *v25 = a8;
  v25[1] = a10;
  v26 = (void (**)(int *))((char *)a9 + v18[11]);
  *v26 = a6;
  v26[1] = v22;
  if ((a4 & 0x10000000000) == 0)
  {
    v27 = (char *)a9 + v18[10];
    *(_DWORD *)v27 = a4;
    v27[4] = BYTE4(a4) & 1;
    v56 = a4;
    v57 = BYTE4(a4) & 1;
    swift_retain_n(a10, 3);
    swift_bridgeObjectRetain_n(v51, 2);
    v28 = swift_retain(v22);
    v29 = Logger.logObject.getter(v28);
    v30 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v29, v30))
    {
      v31 = swift_slowAlloc(22, -1);
      v32 = swift_slowAlloc(64, -1);
      v55 = v32;
      *(_DWORD *)v31 = 136315394;
      swift_bridgeObjectRetain(v51);
      v54 = sub_100013CC8(type, v51, &v55);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, &v55);
      swift_bridgeObjectRelease_n(v51, 3);
      *(_WORD *)(v31 + 12) = 2080;
      v33 = v50(&v56);
      v35 = v34;
      v54 = sub_100013CC8(v33, v34, &v55);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, &v55);
      swift_release_n(a10, 2);
      swift_bridgeObjectRelease(v35);
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "Initialized value for %s to %s", (uint8_t *)v31, 0x16u);
      swift_arrayDestroy(v32, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v32, -1, -1);
      swift_slowDealloc(v31, -1, -1);

      swift_release(v22);
      swift_release(a10);
      return (*(uint64_t (**)(uint64_t, uint64_t))(v52 + 8))(a3, v24);
    }
    swift_bridgeObjectRelease_n(v51, 2);

    swift_release(v22);
    v39 = a10;
    goto LABEL_10;
  }
  v37 = (char *)a9 + v18[10];
  *(_DWORD *)v37 = v13;
  v37[4] = v48;
  swift_retain(a10);
  swift_bridgeObjectRetain(v51);
  swift_retain(v22);
  a6(&v58);
  v38 = v22;
  v56 = v13;
  v57 = v48;
  swift_retain_n(a10, 2);
  v40 = swift_bridgeObjectRetain(v51);
  v41 = Logger.logObject.getter(v40);
  v42 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v41, v42))
  {
    swift_bridgeObjectRelease_n(v51, 2);

    swift_release(v38);
    v39 = a10;
LABEL_10:
    swift_release_n(v39, 3);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v52 + 8))(a3, v24);
  }
  v43 = swift_slowAlloc(22, -1);
  v44 = swift_slowAlloc(64, -1);
  v55 = v44;
  *(_DWORD *)v43 = 136315394;
  swift_bridgeObjectRetain(v51);
  v54 = sub_100013CC8(type, v51, &v55);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, &v55);
  swift_bridgeObjectRelease_n(v51, 3);
  *(_WORD *)(v43 + 12) = 2080;
  v45 = a8(&v56);
  v47 = v46;
  v54 = sub_100013CC8(v45, v46, &v55);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, &v55);
  swift_release_n(a10, 2);
  swift_bridgeObjectRelease(v47);
  _os_log_impl((void *)&_mh_execute_header, v41, v42, "No initial value for %s set default to %s", (uint8_t *)v43, 0x16u);
  swift_arrayDestroy(v44, 2, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v44, -1, -1);
  swift_slowDealloc(v43, -1, -1);

  swift_release(v38);
  swift_release(a10);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v52 + 8))(a3, v24);
}

uint64_t MutableDriverProperty.init(name:logger:initialValue:defaultValue:updater:valueDescriber:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t (*a8)(char *)@<X7>, uint64_t *a9@<X8>, uint64_t (*a10)(char *), uint64_t a11, uint64_t a12)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (**v35)(char *);
  uint64_t v36;
  uint64_t (*v37)(char *);
  _QWORD *v38;
  void (*v39)(char *, uint64_t, uint64_t);
  uint64_t v40;
  unsigned int (*v41)(char *, uint64_t, uint64_t);
  char *v42;
  char *v43;
  void (*v44)(char *, uint64_t, uint64_t);
  char *v45;
  char *v46;
  uint64_t v47;
  void (*v48)(char *, char *, uint64_t);
  uint64_t (*v49)(char *);
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  NSObject *v53;
  uint64_t v54;
  os_log_type_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  void (*v64)(char *, uint64_t);
  uint64_t v65;
  char *v66;
  void (*v68)(char *, uint64_t);
  uint64_t v69;
  char *v70;
  unint64_t v71;
  uint64_t v72;
  NSObject *v73;
  os_log_type_t v74;
  _BOOL4 v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t (*v79)(char *);
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  void (*v83)(char *, uint64_t);
  uint64_t v84;
  uint64_t v85;
  void (*v86)(char *, uint64_t);
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t (*v102)(char *);
  uint64_t v103;
  uint64_t v104;
  uint64_t (*v105)(char *);
  uint64_t v106;
  uint64_t v107[3];

  v101 = a6;
  v102 = a8;
  v97 = a5;
  v98 = a3;
  v103 = a4;
  v105 = a10;
  v16 = type metadata accessor for Optional(0, a11);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin();
  v19 = (char *)&v88 - v18;
  v20 = *(_QWORD *)(a11 - 8);
  __chkstk_darwin();
  v91 = (char *)&v88 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v90 = (char *)&v88 - v22;
  __chkstk_darwin();
  v93 = (char *)&v88 - v23;
  __chkstk_darwin();
  v94 = (char *)&v88 - v24;
  v26 = (int *)type metadata accessor for MutableDriverProperty(0, a11, a12, v25);
  v27 = (uint64_t *)((char *)a9 + v26[12]);
  *v27 = 0;
  v27[1] = 0;
  v28 = (uint64_t *)((char *)a9 + v26[13]);
  *v28 = 0;
  v28[1] = 0;
  v29 = (uint64_t *)((char *)a9 + v26[14]);
  *v29 = 0;
  v29[1] = 0;
  v92 = a1;
  *a9 = a1;
  a9[1] = a2;
  v99 = a2;
  v30 = (char *)a9 + v26[9];
  v31 = type metadata accessor for Logger(0);
  v95 = *(_QWORD *)(v31 - 8);
  v96 = v31;
  v32 = v30;
  v33 = v98;
  v34 = a7;
  (*(void (**)(char *, uint64_t))(v95 + 16))(v32, v98);
  v35 = (uint64_t (**)(char *))((char *)a9 + v26[15]);
  v36 = v103;
  v37 = v105;
  *v35 = v102;
  v35[1] = v37;
  v38 = (uint64_t *)((char *)a9 + v26[11]);
  *v38 = v101;
  v38[1] = a7;
  v39 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 16);
  v100 = v16;
  v39(v19, v36, v16);
  v40 = v20;
  v41 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48);
  v104 = a11;
  if (v41(v19, 1, a11) == 1)
  {
    v42 = v90;
    v43 = *(char **)(v17 + 8);
    swift_bridgeObjectRetain(v99);
    swift_retain(v105);
    swift_retain(v34);
    v94 = v43;
    ((void (*)(char *, uint64_t))v43)(v19, v100);
    v44 = *(void (**)(char *, uint64_t, uint64_t))(v20 + 16);
    v45 = v97;
    v44((char *)a9 + v26[10], (uint64_t)v97, v104);
    ((void (*)(char *))v101)(v45);
    v88 = v20;
    v89 = v34;
    v70 = v42;
    v44(v42, (uint64_t)v45, v104);
    swift_retain_n(v105, 2);
    v71 = v99;
    v72 = swift_bridgeObjectRetain(v99);
    v73 = Logger.logObject.getter(v72);
    v74 = static os_log_type_t.default.getter();
    v75 = os_log_type_enabled(v73, v74);
    v76 = v103;
    if (v75)
    {
      v77 = swift_slowAlloc(22, -1);
      v78 = swift_slowAlloc(64, -1);
      v107[0] = v78;
      *(_DWORD *)v77 = 136315394;
      swift_bridgeObjectRetain(v71);
      v106 = sub_100013CC8(v92, v71, v107);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v106, v107);
      swift_bridgeObjectRelease_n(v71, 3);
      *(_WORD *)(v77 + 12) = 2080;
      v79 = v105;
      v80 = v102(v70);
      v82 = v81;
      v106 = sub_100013CC8(v80, v81, v107);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v106, v107);
      swift_release_n(v79, 2);
      swift_bridgeObjectRelease(v82);
      v83 = *(void (**)(char *, uint64_t))(v88 + 8);
      v84 = v76;
      v85 = v104;
      v83(v70, v104);
      _os_log_impl((void *)&_mh_execute_header, v73, v74, "No initial value for %s set default to %s", (uint8_t *)v77, 0x16u);
      swift_arrayDestroy(v78, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v78, -1, -1);
      swift_slowDealloc(v77, -1, -1);

      swift_release(v89);
      swift_release(v79);
      v83(v97, v85);
      ((void (*)(uint64_t, uint64_t))v94)(v84, v100);
      return (*(uint64_t (**)(uint64_t, uint64_t))(v95 + 8))(v98, v96);
    }
    else
    {

      swift_release(v89);
      swift_release_n(v105, 3);
      v86 = *(void (**)(char *, uint64_t))(v88 + 8);
      v87 = v104;
      v86(v70, v104);
      swift_bridgeObjectRelease_n(v71, 2);
      v86(v45, v87);
      ((void (*)(uint64_t, uint64_t))v94)(v76, v100);
      return (*(uint64_t (**)(uint64_t, uint64_t))(v95 + 8))(v33, v96);
    }
  }
  else
  {
    v101 = v17;
    v46 = v94;
    v47 = v104;
    (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v94, v19, v104);
    v48 = *(void (**)(char *, char *, uint64_t))(v20 + 16);
    v48((char *)a9 + v26[10], v46, v47);
    v48(v93, v46, v47);
    v49 = v105;
    swift_retain_n(v105, 3);
    v50 = v99;
    swift_bridgeObjectRetain_n(v99, 2);
    v51 = swift_retain(v34);
    v52 = v34;
    v53 = Logger.logObject.getter(v51);
    v54 = v33;
    v55 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v53, v55))
    {
      v56 = swift_slowAlloc(22, -1);
      v89 = v52;
      v57 = v56;
      v91 = (char *)swift_slowAlloc(64, -1);
      v107[0] = (uint64_t)v91;
      *(_DWORD *)v57 = 136315394;
      swift_bridgeObjectRetain(v50);
      v106 = sub_100013CC8(v92, v50, v107);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v106, v107);
      swift_bridgeObjectRelease_n(v50, 3);
      *(_WORD *)(v57 + 12) = 2080;
      v58 = v40;
      v59 = v54;
      v60 = v93;
      v61 = v102(v93);
      v63 = v62;
      v106 = sub_100013CC8(v61, v62, v107);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v106, v107);
      swift_release_n(v49, 2);
      swift_bridgeObjectRelease(v63);
      v64 = *(void (**)(char *, uint64_t))(v58 + 8);
      v65 = v104;
      v64(v60, v104);
      _os_log_impl((void *)&_mh_execute_header, v53, v55, "Initialized value for %s to %s", (uint8_t *)v57, 0x16u);
      v66 = v91;
      swift_arrayDestroy(v91, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v66, -1, -1);
      swift_slowDealloc(v57, -1, -1);

      swift_release(v89);
      swift_release(v49);
      v64(v97, v65);
      (*(void (**)(uint64_t, uint64_t))(v101 + 8))(v103, v100);
      (*(void (**)(uint64_t, uint64_t))(v95 + 8))(v59, v96);
      return ((uint64_t (*)(char *, uint64_t))v64)(v94, v65);
    }
    else
    {

      swift_release(v52);
      swift_release_n(v49, 3);
      v68 = *(void (**)(char *, uint64_t))(v40 + 8);
      v69 = v104;
      v68(v93, v104);
      swift_bridgeObjectRelease_n(v50, 2);
      v68(v97, v69);
      (*(void (**)(uint64_t, uint64_t))(v101 + 8))(v103, v100);
      (*(void (**)(uint64_t, uint64_t))(v95 + 8))(v54, v96);
      return ((uint64_t (*)(char *, uint64_t))v68)(v94, v69);
    }
  }
}

uint64_t (*sub_100223800(uint64_t a1, uint64_t a2, uint64_t a3))(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a3, a2, &protocol requirements base descriptor for P2PControls, &associated type descriptor for P2PControls.Driver);
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v8 = *(_QWORD *)(v7 + 64);
  __chkstk_darwin(AssociatedTypeWitness);
  v10 = (char *)&v15 - v9;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v15 - v9, a1, AssociatedTypeWitness);
  v11 = *(unsigned __int8 *)(v7 + 80);
  v12 = (v11 + 32) & ~v11;
  v13 = swift_allocObject(&unk_1003F1630, v12 + v8, v11 | 7);
  *(_QWORD *)(v13 + 16) = a2;
  *(_QWORD *)(v13 + 24) = a3;
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v13 + v12, v10, AssociatedTypeWitness);
  return sub_10022D940;
}

uint64_t sub_1002238EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, a4, a3, &protocol requirements base descriptor for P2PControls, &associated type descriptor for P2PControls.Driver);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a4, a3, AssociatedTypeWitness, &protocol requirements base descriptor for P2PControls, &associated conformance descriptor for P2PControls.P2PControls.Driver: WiFiDriver);
  v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 72);
  v10 = swift_checkMetadataState(0, AssociatedTypeWitness);
  return v9(a1 & 0xFFFFFFFFFFFFLL, v10, AssociatedConformanceWitness);
}

uint64_t (*sub_10022399C(uint64_t a1, uint64_t a2, uint64_t a3))(unint64_t a1)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a3, a2, &protocol requirements base descriptor for P2PControls, &associated type descriptor for P2PControls.Driver);
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v8 = *(_QWORD *)(v7 + 64);
  __chkstk_darwin(AssociatedTypeWitness);
  v10 = (char *)&v15 - v9;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v15 - v9, a1, AssociatedTypeWitness);
  v11 = *(unsigned __int8 *)(v7 + 80);
  v12 = (v11 + 32) & ~v11;
  v13 = swift_allocObject(&unk_1003F1608, v12 + v8, v11 | 7);
  *(_QWORD *)(v13 + 16) = a2;
  *(_QWORD *)(v13 + 24) = a3;
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v13 + v12, v10, AssociatedTypeWitness);
  return sub_10022D8B8;
}

uint64_t sub_100223A88(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, a4, a3, &protocol requirements base descriptor for P2PControls, &associated type descriptor for P2PControls.Driver);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a4, a3, AssociatedTypeWitness, &protocol requirements base descriptor for P2PControls, &associated conformance descriptor for P2PControls.P2PControls.Driver: WiFiDriver);
  v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 88);
  v10 = swift_checkMetadataState(0, AssociatedTypeWitness);
  return v9(a1 | ((HIDWORD(a1) & 1) << 32), v10, AssociatedConformanceWitness);
}

uint64_t sub_100223B40(int *a1)
{
  int v2;
  char *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  Swift::String v7;
  int v8;
  uint64_t v9;
  unint64_t v10;

  if ((a1[1] & 1) != 0)
    return 1701736302;
  v2 = *a1;
  v9 = 0;
  v10 = 0xE000000000000000;
  v3 = (char *)swift_slowAlloc(16, -1);
  v8 = v2;
  inet_ntop(2, &v8, v3, 0x10u);
  v4 = String.init(cString:)(v3);
  v6 = v5;
  swift_slowDealloc(v3, -1, -1);
  v7._countAndFlagsBits = v4;
  v7._object = v6;
  String.append(_:)(v7);
  swift_bridgeObjectRelease(v6);
  return v9;
}

uint64_t MutableDriverProperty.init(name:logger:initialValue:updater:valueDescriber:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t (*a7)(char *)@<X6>, uint64_t (*a8)(char *)@<X7>, uint64_t *a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  void (*v22)(char *, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t (*v28)(char *);
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(char *);

  v28 = a8;
  v29 = a5;
  v30 = a6;
  v31 = a7;
  v26 = a1;
  v27 = a2;
  v25 = a9;
  v24 = a11;
  v13 = *(_QWORD *)(a10 - 8);
  __chkstk_darwin();
  v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Optional(0, a10);
  __chkstk_darwin();
  v17 = (char *)&v24 - v16;
  v18 = type metadata accessor for Logger(0);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin();
  v21 = (char *)&v24 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v21, a3, v18);
  v22 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  v22(v17, a4, a10);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v17, 0, 1, a10);
  v22(v15, a4, a10);
  MutableDriverProperty.init(name:logger:initialValue:defaultValue:updater:valueDescriber:)(v26, v27, (uint64_t)v21, (uint64_t)v17, v15, v29, v30, v31, v25, v28, a10, v24);
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(a4, a10);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 8))(a3, v18);
}

uint64_t (*sub_100223DBC(uint64_t a1, uint64_t a2, uint64_t a3))(uint64_t a1)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a3, a2, &protocol requirements base descriptor for P2PControls, &associated type descriptor for P2PControls.Driver);
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v8 = *(_QWORD *)(v7 + 64);
  __chkstk_darwin(AssociatedTypeWitness);
  v10 = (char *)&v15 - v9;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v15 - v9, a1, AssociatedTypeWitness);
  v11 = *(unsigned __int8 *)(v7 + 80);
  v12 = (v11 + 32) & ~v11;
  v13 = swift_allocObject(&unk_1003F15E0, v12 + v8, v11 | 7);
  *(_QWORD *)(v13 + 16) = a2;
  *(_QWORD *)(v13 + 24) = a3;
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v13 + v12, v10, AssociatedTypeWitness);
  return sub_10022D840;
}

uint64_t sub_100223EA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, a4, a3, &protocol requirements base descriptor for P2PControls, &associated type descriptor for P2PControls.Driver);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a4, a3, AssociatedTypeWitness, &protocol requirements base descriptor for P2PControls, &associated conformance descriptor for P2PControls.P2PControls.Driver: WiFiDriver);
  v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 104);
  v10 = swift_checkMetadataState(0, AssociatedTypeWitness);
  return v9(a1, v10, AssociatedConformanceWitness);
}

uint64_t sub_100223F58@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t WitnessTable;
  uint64_t AssociatedTypeWitness;
  uint64_t v16;
  uint64_t v17;

  v10 = type metadata accessor for WiFiInterface.NeighborDiscoveryTable(0, a3, a4, a4);
  v11 = *(int *)(v10 + 36);
  v13 = type metadata accessor for WiFiInterface.NeighborDiscoveryTable.Entry(0, a3, a4, v12);
  WitnessTable = swift_getWitnessTable("\t?\t", v13);
  *(_QWORD *)(a5 + v11) = Dictionary.init()(v13, &type metadata for Int, WitnessTable);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a4, a3, &protocol requirements base descriptor for P2PControls, &associated type descriptor for P2PControls.Driver);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 32))(a5, a1, AssociatedTypeWitness);
  v16 = a5 + *(int *)(v10 + 40);
  v17 = type metadata accessor for Logger(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 32))(v16, a2, v17);
}

uint64_t WiFiInterface.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 88);
  v2 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 96);
  v3 = *(_QWORD *)(*(_QWORD *)v0 + 80);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v1, v3, &protocol requirements base descriptor for P2PControls);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(AssociatedTypeWitness - 8) + 8))(v2, AssociatedTypeWitness);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + *(_QWORD *)(*(_QWORD *)v0 + 104) + 8));
  v5 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 112);
  v6 = swift_getAssociatedTypeWitness(0, v1, v3, &protocol requirements base descriptor for P2PControls);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  sub_100033A84(v0 + *(_QWORD *)(*(_QWORD *)v0 + 120), (uint64_t *)&unk_10040FC80);
  sub_100033A84(v0 + *(_QWORD *)(*(_QWORD *)v0 + 128), (uint64_t *)&unk_10040FC10);
  sub_100033A84(v0 + *(_QWORD *)(*(_QWORD *)v0 + 136), &qword_10040BB70);
  sub_100033A84(v0 + *(_QWORD *)(*(_QWORD *)v0 + 144), &qword_10040BB78);
  v7 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 152);
  v9 = type metadata accessor for WiFiInterface.NeighborDiscoveryTable(0, v3, v1, v8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v7, v9);
  v10 = v0 + *(_QWORD *)(*(_QWORD *)v0 + 160);
  v11 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  return v0;
}

uint64_t WiFiInterface.__deallocating_deinit()
{
  uint64_t v0;

  WiFiInterface.deinit();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1002241EC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::UInt8 v4;
  Swift::UInt8 v5;
  Swift::UInt8 v6;
  Swift::UInt8 v7;
  Swift::UInt8 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  __n128 v14;
  __int128 v16;
  uint64_t v17;

  v2 = v1;
  v4 = *(_BYTE *)(v2 + 1);
  v5 = *(_BYTE *)(v2 + 2);
  v6 = *(_BYTE *)(v2 + 3);
  v7 = *(_BYTE *)(v2 + 4);
  v8 = *(_BYTE *)(v2 + 5);
  Hasher._combine(_:)(*(_BYTE *)v2);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  v16 = *(_OWORD *)(v2 + 8);
  v9 = *(_QWORD *)(v2 + 24);
  v10 = *(_QWORD *)(v2 + 32);
  swift_bridgeObjectRetain(v10);
  v11 = sub_1000FADC0((uint64_t)&v16, (uint64_t)&v17);
  v13 = v12;
  Data.hash(into:)(a1, v11, v12, v14);
  sub_10000E614(v11, v13);
  if (v10)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain(v10);
    String.hash(into:)(a1, v9, v10);
    sub_10022A6B0(v2);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return sub_10022A6B0(v2);
}

uint64_t sub_100224328(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a1 == *(_DWORD *)a2 && *(unsigned __int16 *)(a1 + 4) == *(unsigned __int16 *)(a2 + 4))
    return _s7CoreP2P11IPv6AddressV2eeoiySbAC_ACtFZ_0(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), *(_QWORD *)(a2 + 32));
  else
    return 0;
}

Swift::Int sub_1002243D0()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  sub_1002241EC((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int sub_100224414()
{
  return sub_1002243D0();
}

uint64_t sub_10022444C(uint64_t a1)
{
  return sub_1002241EC(a1);
}

Swift::Int sub_100224484()
{
  __int128 *v0;
  __int128 v1;
  _QWORD v3[9];
  __int128 v4;
  __int128 v5;
  uint64_t v6;

  Hasher.init(_seed:)(v3);
  v1 = v0[1];
  v4 = *v0;
  v5 = v1;
  v6 = *((_QWORD *)v0 + 4);
  sub_1002241EC((uint64_t)v3);
  return Hasher._finalize()();
}

uint64_t sub_1002244D8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  _OWORD v5[2];
  uint64_t v6;
  _OWORD v7[2];
  uint64_t v8;

  v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  v6 = *(_QWORD *)(a1 + 32);
  v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  v8 = *(_QWORD *)(a2 + 32);
  return sub_100224328((uint64_t)v5, (uint64_t)v7) & 1;
}

void WiFiInterface.NeighborDiscoveryTable.postPeerPresence(macAddress:ipv6Address:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  void (*v23)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char v46;
  uint64_t v47;
  _BOOL8 v48;
  Swift::Int v49;
  unint64_t v50;
  char v51;
  unint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  BOOL v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t WitnessTable;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  __int128 v70;
  uint64_t v71;
  uint64_t v72;
  _BYTE v73[32];
  uint64_t v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  uint64_t v78;

  v7 = v6;
  v63 = type metadata accessor for Logger(0);
  v62 = *(_QWORD *)(v63 - 8);
  __chkstk_darwin();
  v61 = (char *)&v60 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(a6 + 16);
  v15 = *(_QWORD *)(a6 + 24);
  LOWORD(v75) = a1;
  BYTE2(v75) = BYTE2(a1);
  BYTE3(v75) = BYTE3(a1);
  BYTE4(v75) = BYTE4(a1);
  BYTE5(v75) = BYTE5(a1);
  v64 = a3;
  v65 = a4;
  *((_QWORD *)&v75 + 1) = a2;
  *(_QWORD *)&v76 = a3;
  v68 = *(int *)(a6 + 36);
  v17 = *(_QWORD *)(v7 + v68);
  *((_QWORD *)&v76 + 1) = a4;
  v77 = a5;
  *(_OWORD *)v73 = v75;
  *(_OWORD *)&v73[16] = v76;
  v74 = a5;
  swift_bridgeObjectRetain(a5);
  sub_10022A67C((uint64_t)&v75);
  v19 = type metadata accessor for WiFiInterface.NeighborDiscoveryTable.Entry(0, v16, v15, v18);
  WitnessTable = swift_getWitnessTable("\t?\t", v19);
  Dictionary.subscript.getter(&v69, v73, v17, v19, &type metadata for Int, WitnessTable);
  sub_10022A6B0((uint64_t)&v75);
  if (v70 == 1)
  {
    v60 = v19;
    v20 = a1 & 0xFFFFFFFFFFFFLL;
    AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v15, v16, &protocol requirements base descriptor for P2PControls);
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v15, v16, AssociatedTypeWitness, &protocol requirements base descriptor for P2PControls, &associated conformance descriptor for P2PControls.P2PControls.Driver: WiFiDriver);
    v23 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness
                                                                                               + 136);
    v24 = swift_checkMetadataState(0, AssociatedTypeWitness);
    v25 = v67;
    v23(v20, a2, v64, v65, a5, v24, AssociatedConformanceWitness);
    if (v25)
    {
      sub_10022A6B0((uint64_t)&v75);
      return;
    }
    v67 = v20;
    v26 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 40))(v24, AssociatedConformanceWitness);
    v28 = v27;
    v29 = v62;
    v30 = v61;
    v31 = v63;
    (*(void (**)(char *, unint64_t, uint64_t))(v62 + 16))(v61, v7 + *(int *)(a6 + 40), v63);
    v32 = swift_bridgeObjectRetain(v28);
    v33 = Logger.logObject.getter(v32);
    v34 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v33, v34))
    {
      v35 = swift_slowAlloc(22, -1);
      v65 = v26;
      v36 = v35;
      v37 = swift_slowAlloc(64, -1);
      *(_QWORD *)v73 = v37;
      *(_DWORD *)v36 = 136315394;
      v38 = WiFiAddress.description.getter(v67);
      v40 = v39;
      v69 = sub_100013CC8(v38, v39, (uint64_t *)v73);
      v67 = v7;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v69, &v70);
      swift_bridgeObjectRelease(v40);
      *(_WORD *)(v36 + 12) = 2080;
      swift_bridgeObjectRetain(v28);
      v69 = sub_100013CC8(v65, v28, (uint64_t *)v73);
      v7 = v67;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v69, &v70);
      swift_bridgeObjectRelease_n(v28, 3);
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "Posted peer presence for %s on %s", (uint8_t *)v36, 0x16u);
      swift_arrayDestroy(v37, 2, &type metadata for Any[8]);
      swift_slowDealloc(v37, -1, -1);
      swift_slowDealloc(v36, -1, -1);

      (*(void (**)(char *, uint64_t))(v62 + 8))(v61, v63);
    }
    else
    {

      swift_bridgeObjectRelease_n(v28, 2);
      (*(void (**)(char *, uint64_t))(v29 + 8))(v30, v31);
    }
    v19 = v60;
  }
  *(_OWORD *)v73 = v75;
  *(_OWORD *)&v73[16] = v76;
  v74 = v77;
  v41 = v68;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v7 + v68));
  v69 = *(_QWORD *)(v7 + v41);
  v43 = v69;
  *(_QWORD *)(v7 + v41) = 0x8000000000000000;
  v44 = WitnessTable;
  v45 = sub_100229FF0((uint64_t)v73, v19, WitnessTable);
  v47 = *(_QWORD *)(v43 + 16);
  v48 = (v46 & 1) == 0;
  v49 = v47 + v48;
  if (__OFADD__(v47, v48))
  {
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v50 = v45;
  v51 = v46;
  type metadata accessor for _NativeDictionary(0, v19, &type metadata for Int, v44);
  if (!_NativeDictionary.ensureUnique(isUnique:capacity:)(isUniquelyReferenced_nonNull_native, v49))
  {
LABEL_13:
    v54 = v68;
    v55 = *(_QWORD *)(v7 + v68);
    *(_QWORD *)(v7 + v68) = v69;
    swift_bridgeObjectRelease(v55);
    v56 = *(_QWORD *)(v7 + v54);
    if ((v51 & 1) != 0)
    {
      swift_bridgeObjectRetain(v56);
    }
    else
    {
      v78 = 0;
      swift_bridgeObjectRetain(v56);
      LODWORD(v69) = *(_DWORD *)v73;
      WORD2(v69) = *(_WORD *)&v73[4];
      v70 = *(_OWORD *)&v73[8];
      v71 = *(_QWORD *)&v73[24];
      v72 = v74;
      swift_bridgeObjectRetain(v74);
      _NativeDictionary._insert(at:key:value:)(v50, &v69, &v78, v56, v19, &type metadata for Int, v44);
    }
    v19 = *(_QWORD *)(v56 + 56);
    swift_bridgeObjectRelease(v56);
    v57 = *(_QWORD *)(v19 + 8 * v50);
    v58 = __OFADD__(v57, 1);
    v59 = v57 + 1;
    if (!v58)
    {
      *(_QWORD *)(v19 + 8 * v50) = v59;
      swift_bridgeObjectRelease(v74);
      return;
    }
    goto LABEL_19;
  }
  v52 = sub_100229FF0((uint64_t)v73, v19, v44);
  if ((v51 & 1) == (v53 & 1))
  {
    v50 = v52;
    goto LABEL_13;
  }
LABEL_20:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v19);
  __break(1u);
}

uint64_t WiFiInterface.NeighborDiscoveryTable.postPeerAbsence(macAddress:ipv6Address:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t WitnessTable;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t (*v27)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  char v58[8];
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;

  v13 = type metadata accessor for Logger(0);
  v48 = *(_QWORD *)(v13 - 8);
  v49 = v13;
  __chkstk_darwin();
  v47 = (char *)&v46 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(_QWORD *)(a6 + 16);
  v16 = *(_QWORD *)(a6 + 24);
  LOWORD(v59) = a1;
  BYTE2(v59) = BYTE2(a1);
  BYTE3(v59) = BYTE3(a1);
  BYTE4(v59) = BYTE4(a1);
  BYTE5(v59) = BYTE5(a1);
  v50 = a2;
  v51 = a3;
  *((_QWORD *)&v59 + 1) = a2;
  *(_QWORD *)&v60 = a3;
  v52 = a4;
  v53 = v6;
  *((_QWORD *)&v60 + 1) = a4;
  v61 = a5;
  v17 = *(_QWORD *)(v6 + *(int *)(a6 + 36));
  v54 = v59;
  v55 = v60;
  v56 = a5;
  swift_bridgeObjectRetain(a5);
  sub_10022A67C((uint64_t)&v59);
  v19 = type metadata accessor for WiFiInterface.NeighborDiscoveryTable.Entry(0, v15, v16, v18);
  WitnessTable = swift_getWitnessTable("\t?\t", v19);
  Dictionary.subscript.getter(&v57, &v54, v17, v19, &type metadata for Int, WitnessTable);
  sub_10022A6B0((uint64_t)&v59);
  if (v58[0] == 1 || v57 < 1)
    return sub_10022A6B0((uint64_t)&v59);
  if (v57 == 1)
  {
    v23 = a1 & 0xFFFFFFFFFFFFLL;
    v54 = v59;
    v55 = v60;
    v56 = v61;
    v24 = type metadata accessor for Dictionary(0, v19, &type metadata for Int, WitnessTable);
    Dictionary.removeValue(forKey:)(&v57, &v54, v24);
    sub_10022A6B0((uint64_t)&v59);
    AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v16, v15, &protocol requirements base descriptor for P2PControls, &associated type descriptor for P2PControls.Driver);
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v16, v15, AssociatedTypeWitness, &protocol requirements base descriptor for P2PControls, &associated conformance descriptor for P2PControls.P2PControls.Driver: WiFiDriver);
    v27 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness
                                                                                                  + 144);
    v28 = swift_checkMetadataState(0, AssociatedTypeWitness);
    v29 = v53;
    v30 = v62;
    result = v27(v23, v50, v51, v52, a5, v28, AssociatedConformanceWitness);
    if (!v30)
    {
      v31 = v23;
      v62 = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 40))(v28, AssociatedConformanceWitness);
      v33 = v32;
      v34 = v29 + *(int *)(a6 + 40);
      v36 = v47;
      v35 = v48;
      v37 = v49;
      (*(void (**)(char *, uint64_t, uint64_t))(v48 + 16))(v47, v34, v49);
      v38 = swift_bridgeObjectRetain(v33);
      v39 = Logger.logObject.getter(v38);
      v40 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v39, v40))
      {
        v41 = swift_slowAlloc(22, -1);
        v42 = swift_slowAlloc(64, -1);
        *(_QWORD *)&v54 = v42;
        *(_DWORD *)v41 = 136315394;
        v43 = WiFiAddress.description.getter(v31);
        v45 = v44;
        v57 = sub_100013CC8(v43, v44, (uint64_t *)&v54);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, v58);
        swift_bridgeObjectRelease(v45);
        *(_WORD *)(v41 + 12) = 2080;
        swift_bridgeObjectRetain(v33);
        v57 = sub_100013CC8(v62, v33, (uint64_t *)&v54);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, v58);
        swift_bridgeObjectRelease_n(v33, 3);
        _os_log_impl((void *)&_mh_execute_header, v39, v40, "Posted peer absence for %s on %s", (uint8_t *)v41, 0x16u);
        swift_arrayDestroy(v42, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v42, -1, -1);
        swift_slowDealloc(v41, -1, -1);

        return (*(uint64_t (**)(char *, uint64_t))(v48 + 8))(v47, v49);
      }
      else
      {

        swift_bridgeObjectRelease_n(v33, 2);
        return (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v36, v37);
      }
    }
  }
  else
  {
    --v57;
    v58[0] = 0;
    v54 = v59;
    v55 = v60;
    v56 = v61;
    v21 = type metadata accessor for Dictionary(0, v19, &type metadata for Int, WitnessTable);
    return Dictionary.subscript.setter(&v57, &v54, v21);
  }
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> WiFiInterface.NeighborDiscoveryTable.clearAllPeerPresence()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t WitnessTable;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;

  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v0 + 24);
  v4 = type metadata accessor for WiFiInterface.NeighborDiscoveryTable.Entry(255, v2, v3, v1);
  WitnessTable = swift_getWitnessTable("\t?\t", v4);
  type metadata accessor for Dictionary(0, v4, &type metadata for Int, WitnessTable);
  Dictionary.removeAll(keepingCapacity:)(0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v3, v2, &protocol requirements base descriptor for P2PControls, &associated type descriptor for P2PControls.Driver);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v3, v2, AssociatedTypeWitness, &protocol requirements base descriptor for P2PControls, &associated conformance descriptor for P2PControls.P2PControls.Driver: WiFiDriver);
  v8 = *(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 152);
  v9 = swift_checkMetadataState(0, AssociatedTypeWitness);
  v8(v9, AssociatedConformanceWitness);
}

uint64_t MutableDriverProperty.willTryUpdatingProperty.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v2 = (uint64_t *)(v1 + *(int *)(a1 + 48));
  v3 = *v2;
  sub_1000339E4(*v2, v2[1]);
  return v3;
}

uint64_t MutableDriverProperty.willTryUpdatingProperty.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v6;
  uint64_t result;

  v6 = (uint64_t *)(v3 + *(int *)(a3 + 48));
  result = sub_100012318(*v6, v6[1]);
  *v6 = a1;
  v6[1] = a2;
  return result;
}

uint64_t (*MutableDriverProperty.willTryUpdatingProperty.modify())(_QWORD)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t MutableDriverProperty.failedToUpdateProperty.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v2 = (uint64_t *)(v1 + *(int *)(a1 + 52));
  v3 = *v2;
  sub_1000339E4(*v2, v2[1]);
  return v3;
}

uint64_t MutableDriverProperty.failedToUpdateProperty.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v6;
  uint64_t result;

  v6 = (uint64_t *)(v3 + *(int *)(a3 + 52));
  result = sub_100012318(*v6, v6[1]);
  *v6 = a1;
  v6[1] = a2;
  return result;
}

uint64_t (*MutableDriverProperty.failedToUpdateProperty.modify())(_QWORD)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t MutableDriverProperty.didUpdateProperty.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v2 = (uint64_t *)(v1 + *(int *)(a1 + 56));
  v3 = *v2;
  sub_1000339E4(*v2, v2[1]);
  return v3;
}

uint64_t MutableDriverProperty.didUpdateProperty.setter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v6;
  uint64_t result;

  v6 = (uint64_t *)(v3 + *(int *)(a3 + 56));
  result = sub_100012318(*v6, v6[1]);
  *v6 = a1;
  v6[1] = a2;
  return result;
}

uint64_t (*MutableDriverProperty.didUpdateProperty.modify())(_QWORD)
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t sub_100225170(uint64_t a1, char a2)
{
  uint64_t v2;
  char v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v57;
  uint64_t *v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;

  v4 = a2 & 1;
  v5 = (int *)sub_100012C44((uint64_t *)&unk_10040FC80);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v57 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v6);
  v11 = (uint64_t *)((char *)&v57 - v10);
  v12 = __chkstk_darwin(v9);
  v14 = (char *)&v57 - v13;
  v15 = __chkstk_darwin(v12);
  v17 = (char *)&v57 - v16;
  __chkstk_darwin(v15);
  v19 = (uint64_t *)((char *)&v57 - v18);
  v20 = type metadata accessor for Logger(0);
  v21 = __chkstk_darwin(v20);
  v23 = (char *)&v57 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __chkstk_darwin(v21);
  v62 = v27;
  v63 = v24;
  if (a1)
  {
    v28 = (char *)&v57 - v25;
    (*(void (**)(char *, uint64_t, uint64_t))(v27 + 16))((char *)&v57 - v25, v2 + v5[9], v26);
    sub_100033B48(v2, (uint64_t)v19, (uint64_t *)&unk_10040FC80);
    sub_100033B48(v2, (uint64_t)v17, (uint64_t *)&unk_10040FC80);
    v66 = v4;
    sub_100033B48(v2, (uint64_t)v14, (uint64_t *)&unk_10040FC80);
    swift_errorRetain(a1);
    swift_errorRetain(a1);
    v29 = swift_errorRetain(a1);
    v61 = (uint64_t)v28;
    v30 = Logger.logObject.getter(v29);
    v31 = static os_log_type_t.error.getter();
    v32 = v31;
    if (os_log_type_enabled(v30, v31))
    {
      v33 = swift_slowAlloc(42, -1);
      v58 = (uint64_t *)swift_slowAlloc(8, -1);
      v60 = swift_slowAlloc(96, -1);
      v65 = v60;
      *(_DWORD *)v33 = 136315906;
      v59 = v32;
      v34 = *v19;
      v35 = v19[1];
      swift_bridgeObjectRetain(v35);
      v64 = sub_100013CC8(v34, v35, &v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, &v65);
      swift_bridgeObjectRelease(v35);
      sub_100033A84((uint64_t)v19, (uint64_t *)&unk_10040FC80);
      *(_WORD *)(v33 + 12) = 2080;
      v36 = (*(uint64_t (**)(char *))&v17[v5[15]])(&v66);
      v38 = v37;
      v64 = sub_100013CC8(v36, v37, &v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, &v65);
      swift_bridgeObjectRelease(v38);
      sub_100033A84((uint64_t)v17, (uint64_t *)&unk_10040FC80);
      *(_WORD *)(v33 + 22) = 2080;
      v39 = (*(uint64_t (**)(char *))&v14[v5[15]])(&v14[v5[10]]);
      v41 = v40;
      v64 = sub_100013CC8(v39, v40, &v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, &v65);
      swift_bridgeObjectRelease(v41);
      sub_100033A84((uint64_t)v14, (uint64_t *)&unk_10040FC80);
      *(_WORD *)(v33 + 32) = 2112;
      swift_errorRetain(a1);
      v42 = _swift_stdlib_bridgeErrorToNSError(a1);
      v64 = v42;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, &v65);
      v43 = v58;
      *v58 = v42;
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, v30, (os_log_type_t)v59, "Failed to update %s to %s (from %s) because %@", (uint8_t *)v33, 0x2Au);
      v44 = sub_100012C44(&qword_100404BB0);
      swift_arrayDestroy(v43, 1, v44);
      swift_slowDealloc(v43, -1, -1);
      v45 = v60;
      swift_arrayDestroy(v60, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v45, -1, -1);
      swift_slowDealloc(v33, -1, -1);

      swift_errorRelease(a1);
    }
    else
    {
      swift_errorRelease(a1);
      sub_100033A84((uint64_t)v19, (uint64_t *)&unk_10040FC80);
      sub_100033A84((uint64_t)v17, (uint64_t *)&unk_10040FC80);
      sub_100033A84((uint64_t)v14, (uint64_t *)&unk_10040FC80);
      swift_errorRelease(a1);
      swift_errorRelease(a1);

    }
    return (*(uint64_t (**)(uint64_t, uint64_t))(v62 + 8))(v61, v63);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v27 + 16))(v23, v2 + v5[9], v26);
    sub_100033B48(v2, (uint64_t)v11, (uint64_t *)&unk_10040FC80);
    v46 = sub_100033B48(v2, (uint64_t)v8, (uint64_t *)&unk_10040FC80);
    v66 = v4;
    v47 = Logger.logObject.getter(v46);
    v48 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v47, v48))
    {
      v49 = swift_slowAlloc(22, -1);
      v61 = swift_slowAlloc(64, -1);
      v65 = v61;
      *(_DWORD *)v49 = 136315394;
      v51 = *v11;
      v50 = v11[1];
      swift_bridgeObjectRetain(v50);
      v64 = sub_100013CC8(v51, v50, &v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, &v65);
      swift_bridgeObjectRelease(v50);
      sub_100033A84((uint64_t)v11, (uint64_t *)&unk_10040FC80);
      *(_WORD *)(v49 + 12) = 2080;
      v52 = (*(uint64_t (**)(char *))&v8[v5[15]])(&v66);
      v54 = v53;
      v64 = sub_100013CC8(v52, v53, &v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, &v65);
      swift_bridgeObjectRelease(v54);
      sub_100033A84((uint64_t)v8, (uint64_t *)&unk_10040FC80);
      _os_log_impl((void *)&_mh_execute_header, v47, v48, "Successfully updated %s to %s", (uint8_t *)v49, 0x16u);
      v55 = v61;
      swift_arrayDestroy(v61, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v55, -1, -1);
      swift_slowDealloc(v49, -1, -1);
    }
    else
    {
      sub_100033A84((uint64_t)v11, (uint64_t *)&unk_10040FC80);
      sub_100033A84((uint64_t)v8, (uint64_t *)&unk_10040FC80);
    }

    return (*(uint64_t (**)(char *, uint64_t))(v62 + 8))(v23, v63);
  }
}

uint64_t sub_1002257D8(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint64_t v24;
  os_log_t v25;
  Class isa;
  Class v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  os_log_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  os_log_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __int16 v64;
  char v65;
  char v66;
  char v67;
  char v68;

  v3 = v2;
  v61 = sub_100012C44((uint64_t *)&unk_10040FC10);
  __chkstk_darwin();
  v7 = (char *)&v53 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v9 = (uint64_t *)((char *)&v53 - v8);
  __chkstk_darwin();
  v11 = (char *)&v53 - v10;
  __chkstk_darwin();
  v60 = (unint64_t)&v53 - v12;
  __chkstk_darwin();
  v59 = (os_log_t)((char *)&v53 - v13);
  type metadata accessor for Logger(0);
  __chkstk_darwin();
  v15 = (char *)&v53 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin();
  v20 = (char *)&v53 - v17;
  v57 = v19;
  v58 = v16;
  if (a1)
  {
    v56 = (char *)(a2 >> 40);
    (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))((char *)&v53 - v17, v3 + *(int *)(v61 + 36), v18);
    sub_100033B48(v3, (uint64_t)v59, (uint64_t *)&unk_10040FC10);
    sub_100033B48(v3, v60, (uint64_t *)&unk_10040FC10);
    v64 = a2;
    v65 = BYTE2(a2);
    v66 = BYTE3(a2);
    v67 = BYTE4(a2);
    v68 = (char)v56;
    sub_100033B48(v3, (uint64_t)v11, (uint64_t *)&unk_10040FC10);
    swift_errorRetain(a1);
    swift_errorRetain(a1);
    v21 = swift_errorRetain(a1);
    v56 = v20;
    v22 = Logger.logObject.getter(v21);
    v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      v24 = swift_slowAlloc(42, -1);
      v54 = (uint64_t *)swift_slowAlloc(8, -1);
      v55 = swift_slowAlloc(96, -1);
      v63 = v55;
      *(_DWORD *)v24 = 136315906;
      v25 = v59;
      isa = v59->isa;
      v27 = v59[1].isa;
      swift_bridgeObjectRetain(v27);
      v62 = sub_100013CC8((uint64_t)isa, (unint64_t)v27, &v63);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, &v63);
      swift_bridgeObjectRelease(v27);
      sub_100033A84((uint64_t)v25, (uint64_t *)&unk_10040FC10);
      *(_WORD *)(v24 + 12) = 2080;
      v59 = v22;
      v28 = (uint64_t)v11;
      v30 = v60;
      v29 = v61;
      v31 = (*(uint64_t (**)(__int16 *))(v60 + *(int *)(v61 + 60)))(&v64);
      v33 = v32;
      v62 = sub_100013CC8(v31, v32, &v63);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, &v63);
      swift_bridgeObjectRelease(v33);
      sub_100033A84(v30, (uint64_t *)&unk_10040FC10);
      *(_WORD *)(v24 + 22) = 2080;
      v34 = (*(uint64_t (**)(uint64_t))(v28 + *(int *)(v29 + 60)))(v28 + *(int *)(v29 + 40));
      v36 = v35;
      v62 = sub_100013CC8(v34, v35, &v63);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, &v63);
      swift_bridgeObjectRelease(v36);
      sub_100033A84(v28, (uint64_t *)&unk_10040FC10);
      *(_WORD *)(v24 + 32) = 2112;
      swift_errorRetain(a1);
      v37 = _swift_stdlib_bridgeErrorToNSError(a1);
      v62 = v37;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, &v63);
      v38 = v54;
      *v54 = v37;
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      v39 = v59;
      _os_log_impl((void *)&_mh_execute_header, v59, v23, "Failed to update %s to %s (from %s) because %@", (uint8_t *)v24, 0x2Au);
      v40 = sub_100012C44(&qword_100404BB0);
      swift_arrayDestroy(v38, 1, v40);
      swift_slowDealloc(v38, -1, -1);
      v41 = v55;
      swift_arrayDestroy(v55, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v41, -1, -1);
      swift_slowDealloc(v24, -1, -1);

      swift_errorRelease(a1);
    }
    else
    {
      swift_errorRelease(a1);
      sub_100033A84((uint64_t)v59, (uint64_t *)&unk_10040FC10);
      sub_100033A84(v60, (uint64_t *)&unk_10040FC10);
      sub_100033A84((uint64_t)v11, (uint64_t *)&unk_10040FC10);
      swift_errorRelease(a1);
      swift_errorRelease(a1);

    }
    return (*(uint64_t (**)(char *, uint64_t))(v57 + 8))(v56, v58);
  }
  else
  {
    v60 = a2 >> 40;
    (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v15, v3 + *(int *)(v61 + 36), v18);
    sub_100033B48(v3, (uint64_t)v9, (uint64_t *)&unk_10040FC10);
    v42 = sub_100033B48(v3, (uint64_t)v7, (uint64_t *)&unk_10040FC10);
    v64 = a2;
    v65 = BYTE2(a2);
    v66 = BYTE3(a2);
    v67 = BYTE4(a2);
    v68 = v60;
    v43 = Logger.logObject.getter(v42);
    v44 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v43, v44))
    {
      v45 = swift_slowAlloc(22, -1);
      v46 = swift_slowAlloc(64, -1);
      v63 = v46;
      *(_DWORD *)v45 = 136315394;
      v47 = *v9;
      v48 = v9[1];
      swift_bridgeObjectRetain(v48);
      v62 = sub_100013CC8(v47, v48, &v63);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, &v63);
      swift_bridgeObjectRelease(v48);
      sub_100033A84((uint64_t)v9, (uint64_t *)&unk_10040FC10);
      *(_WORD *)(v45 + 12) = 2080;
      v49 = (*(uint64_t (**)(__int16 *))&v7[*(int *)(v61 + 60)])(&v64);
      v51 = v50;
      v62 = sub_100013CC8(v49, v50, &v63);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, &v63);
      swift_bridgeObjectRelease(v51);
      sub_100033A84((uint64_t)v7, (uint64_t *)&unk_10040FC10);
      _os_log_impl((void *)&_mh_execute_header, v43, v44, "Successfully updated %s to %s", (uint8_t *)v45, 0x16u);
      swift_arrayDestroy(v46, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v46, -1, -1);
      swift_slowDealloc(v45, -1, -1);
    }
    else
    {
      sub_100033A84((uint64_t)v9, (uint64_t *)&unk_10040FC10);
      sub_100033A84((uint64_t)v7, (uint64_t *)&unk_10040FC10);
    }

    return (*(uint64_t (**)(char *, uint64_t))(v57 + 8))(v15, v58);
  }
}

uint64_t sub_100225EC8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  os_log_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v51;
  os_log_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  char v61;

  v5 = (int *)sub_100012C44(&qword_10040BB70);
  __chkstk_darwin();
  v7 = (char *)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v9 = (uint64_t *)((char *)&v51 - v8);
  __chkstk_darwin();
  v11 = (char *)&v51 - v10;
  __chkstk_darwin();
  v13 = (char *)&v51 - v12;
  __chkstk_darwin();
  v15 = (uint64_t *)((char *)&v51 - v14);
  type metadata accessor for Logger(0);
  __chkstk_darwin();
  v17 = (char *)&v51 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin();
  v56 = v21;
  v57 = v18;
  if (a1)
  {
    v22 = (char *)&v51 - v19;
    (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))((char *)&v51 - v19, v2 + v5[9], v20);
    sub_100033B48(v2, (uint64_t)v15, &qword_10040BB70);
    sub_100033B48(v2, (uint64_t)v13, &qword_10040BB70);
    v60 = a2;
    v61 = BYTE4(a2) & 1;
    sub_100033B48(v2, (uint64_t)v11, &qword_10040BB70);
    swift_errorRetain(a1);
    swift_errorRetain(a1);
    v23 = swift_errorRetain(a1);
    v55 = (uint64_t)v22;
    v24 = Logger.logObject.getter(v23);
    v25 = static os_log_type_t.error.getter(v24);
    if (os_log_type_enabled(v24, v25))
    {
      v26 = swift_slowAlloc(42, -1);
      v53 = (uint64_t *)swift_slowAlloc(8, -1);
      v54 = swift_slowAlloc(96, -1);
      v59 = v54;
      *(_DWORD *)v26 = 136315906;
      v52 = v24;
      v27 = *v15;
      v28 = v15[1];
      swift_bridgeObjectRetain(v28);
      v58 = sub_100013CC8(v27, v28, &v59);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, &v59);
      swift_bridgeObjectRelease(v28);
      sub_100033A84((uint64_t)v15, &qword_10040BB70);
      *(_WORD *)(v26 + 12) = 2080;
      v29 = (*(uint64_t (**)(int *))&v13[v5[15]])(&v60);
      v31 = v30;
      v58 = sub_100013CC8(v29, v30, &v59);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, &v59);
      swift_bridgeObjectRelease(v31);
      sub_100033A84((uint64_t)v13, &qword_10040BB70);
      *(_WORD *)(v26 + 22) = 2080;
      v32 = (*(uint64_t (**)(char *))&v11[v5[15]])(&v11[v5[10]]);
      v34 = v33;
      v58 = sub_100013CC8(v32, v33, &v59);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, &v59);
      swift_bridgeObjectRelease(v34);
      sub_100033A84((uint64_t)v11, &qword_10040BB70);
      *(_WORD *)(v26 + 32) = 2112;
      swift_errorRetain(a1);
      v35 = _swift_stdlib_bridgeErrorToNSError(a1);
      v58 = v35;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, &v59);
      v36 = v53;
      *v53 = v35;
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      v37 = v52;
      _os_log_impl((void *)&_mh_execute_header, v52, v25, "Failed to update %s to %s (from %s) because %@", (uint8_t *)v26, 0x2Au);
      v38 = sub_100012C44(&qword_100404BB0);
      swift_arrayDestroy(v36, 1, v38);
      swift_slowDealloc(v36, -1, -1);
      v39 = v54;
      swift_arrayDestroy(v54, 3, &type metadata for Any[8]);
      swift_slowDealloc(v39, -1, -1);
      swift_slowDealloc(v26, -1, -1);

      swift_errorRelease(a1);
    }
    else
    {
      swift_errorRelease(a1);
      sub_100033A84((uint64_t)v15, &qword_10040BB70);
      sub_100033A84((uint64_t)v13, &qword_10040BB70);
      sub_100033A84((uint64_t)v11, &qword_10040BB70);
      swift_errorRelease(a1);
      swift_errorRelease(a1);

    }
    return (*(uint64_t (**)(uint64_t, uint64_t))(v56 + 8))(v55, v57);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v17, v2 + v5[9], v20);
    sub_100033B48(v2, (uint64_t)v9, &qword_10040BB70);
    v40 = sub_100033B48(v2, (uint64_t)v7, &qword_10040BB70);
    v60 = a2;
    v61 = BYTE4(a2) & 1;
    v41 = Logger.logObject.getter(v40);
    v42 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v41, v42))
    {
      v43 = swift_slowAlloc(22, -1);
      v55 = swift_slowAlloc(64, -1);
      v59 = v55;
      *(_DWORD *)v43 = 136315394;
      v45 = *v9;
      v44 = v9[1];
      swift_bridgeObjectRetain(v44);
      v58 = sub_100013CC8(v45, v44, &v59);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, &v59);
      swift_bridgeObjectRelease(v44);
      sub_100033A84((uint64_t)v9, &qword_10040BB70);
      *(_WORD *)(v43 + 12) = 2080;
      v46 = (*(uint64_t (**)(int *))&v7[v5[15]])(&v60);
      v48 = v47;
      v58 = sub_100013CC8(v46, v47, &v59);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, &v59);
      swift_bridgeObjectRelease(v48);
      sub_100033A84((uint64_t)v7, &qword_10040BB70);
      _os_log_impl((void *)&_mh_execute_header, v41, v42, "Successfully updated %s to %s", (uint8_t *)v43, 0x16u);
      v49 = v55;
      swift_arrayDestroy(v55, 2, &type metadata for Any[8]);
      swift_slowDealloc(v49, -1, -1);
      swift_slowDealloc(v43, -1, -1);
    }
    else
    {
      sub_100033A84((uint64_t)v9, &qword_10040BB70);
      sub_100033A84((uint64_t)v7, &qword_10040BB70);
    }

    return (*(uint64_t (**)(char *, uint64_t))(v56 + 8))(v17, v57);
  }
}

uint64_t sub_100226544(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  os_log_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  NSObject *v48;
  os_log_type_t v49;
  int v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  os_log_t v59;
  uint64_t *v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;

  v5 = (int *)sub_100012C44(&qword_10040BB78);
  v6 = __chkstk_darwin(v5);
  v8 = (char *)&v59 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v6);
  v11 = (uint64_t *)((char *)&v59 - v10);
  v12 = __chkstk_darwin(v9);
  v14 = (char *)&v59 - v13;
  v15 = __chkstk_darwin(v12);
  v17 = (char *)&v59 - v16;
  __chkstk_darwin(v15);
  v19 = (uint64_t *)((char *)&v59 - v18);
  v20 = type metadata accessor for Logger(0);
  v21 = __chkstk_darwin(v20);
  v23 = (char *)&v59 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __chkstk_darwin(v21);
  v64 = v27;
  v65 = v24;
  if (a1)
  {
    v28 = (char *)&v59 - v25;
    (*(void (**)(char *, uint64_t, uint64_t))(v27 + 16))((char *)&v59 - v25, v2 + v5[9], v26);
    sub_100033B48(v2, (uint64_t)v19, &qword_10040BB78);
    sub_100033B48(v2, (uint64_t)v17, &qword_10040BB78);
    v68 = a2;
    sub_100033B48(v2, (uint64_t)v14, &qword_10040BB78);
    swift_errorRetain(a1);
    swift_errorRetain(a1);
    swift_bridgeObjectRetain(a2);
    swift_errorRetain(a1);
    v29 = swift_bridgeObjectRetain(a2);
    v63 = (uint64_t)v28;
    v30 = Logger.logObject.getter(v29);
    v31 = static os_log_type_t.error.getter();
    v32 = v31;
    if (os_log_type_enabled(v30, v31))
    {
      v33 = swift_slowAlloc(42, -1);
      v60 = (uint64_t *)swift_slowAlloc(8, -1);
      v62 = swift_slowAlloc(96, -1);
      v67 = v62;
      *(_DWORD *)v33 = 136315906;
      v61 = v32;
      v59 = v30;
      v34 = *v19;
      v35 = v19[1];
      swift_bridgeObjectRetain(v35);
      v66 = sub_100013CC8(v34, v35, &v67);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, &v67);
      swift_bridgeObjectRelease(v35);
      sub_100033A84((uint64_t)v19, &qword_10040BB78);
      *(_WORD *)(v33 + 12) = 2080;
      v36 = (*(uint64_t (**)(uint64_t *))&v17[v5[15]])(&v68);
      v38 = v37;
      v66 = sub_100013CC8(v36, v37, &v67);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, &v67);
      swift_bridgeObjectRelease(a2);
      swift_bridgeObjectRelease(v38);
      sub_100033A84((uint64_t)v17, &qword_10040BB78);
      swift_bridgeObjectRelease(v68);
      *(_WORD *)(v33 + 22) = 2080;
      v39 = (*(uint64_t (**)(char *))&v14[v5[15]])(&v14[v5[10]]);
      v41 = v40;
      v66 = sub_100013CC8(v39, v40, &v67);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, &v67);
      swift_bridgeObjectRelease(v41);
      sub_100033A84((uint64_t)v14, &qword_10040BB78);
      *(_WORD *)(v33 + 32) = 2112;
      swift_errorRetain(a1);
      v42 = _swift_stdlib_bridgeErrorToNSError(a1);
      v66 = v42;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, &v67);
      v43 = v60;
      *v60 = v42;
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      v44 = v59;
      _os_log_impl((void *)&_mh_execute_header, v59, (os_log_type_t)v61, "Failed to update %s to %s (from %s) because %@", (uint8_t *)v33, 0x2Au);
      v45 = sub_100012C44(&qword_100404BB0);
      swift_arrayDestroy(v43, 1, v45);
      swift_slowDealloc(v43, -1, -1);
      v46 = v62;
      swift_arrayDestroy(v62, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v46, -1, -1);
      swift_slowDealloc(v33, -1, -1);

      swift_errorRelease(a1);
    }
    else
    {
      swift_errorRelease(a1);
      sub_100033A84((uint64_t)v19, &qword_10040BB78);
      swift_bridgeObjectRelease(a2);
      sub_100033A84((uint64_t)v17, &qword_10040BB78);
      swift_bridgeObjectRelease(a2);
      sub_100033A84((uint64_t)v14, &qword_10040BB78);
      swift_errorRelease(a1);
      swift_errorRelease(a1);

    }
    return (*(uint64_t (**)(uint64_t, uint64_t))(v64 + 8))(v63, v65);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v27 + 16))(v23, v2 + v5[9], v26);
    sub_100033B48(v2, (uint64_t)v11, &qword_10040BB78);
    sub_100033B48(v2, (uint64_t)v8, &qword_10040BB78);
    v68 = a2;
    v47 = swift_bridgeObjectRetain_n(a2, 2);
    v48 = Logger.logObject.getter(v47);
    v49 = static os_log_type_t.default.getter();
    v50 = v49;
    if (os_log_type_enabled(v48, v49))
    {
      v51 = swift_slowAlloc(22, -1);
      v63 = swift_slowAlloc(64, -1);
      v67 = v63;
      *(_DWORD *)v51 = 136315394;
      LODWORD(v62) = v50;
      v53 = *v11;
      v52 = v11[1];
      swift_bridgeObjectRetain(v52);
      v66 = sub_100013CC8(v53, v52, &v67);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, &v67);
      swift_bridgeObjectRelease(v52);
      sub_100033A84((uint64_t)v11, &qword_10040BB78);
      *(_WORD *)(v51 + 12) = 2080;
      v54 = (*(uint64_t (**)(uint64_t *))&v8[v5[15]])(&v68);
      v56 = v55;
      v66 = sub_100013CC8(v54, v55, &v67);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, &v67);
      swift_bridgeObjectRelease(a2);
      swift_bridgeObjectRelease(v56);
      sub_100033A84((uint64_t)v8, &qword_10040BB78);
      swift_bridgeObjectRelease(v68);
      _os_log_impl((void *)&_mh_execute_header, v48, (os_log_type_t)v62, "Successfully updated %s to %s", (uint8_t *)v51, 0x16u);
      v57 = v63;
      swift_arrayDestroy(v63, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v57, -1, -1);
      swift_slowDealloc(v51, -1, -1);

    }
    else
    {
      sub_100033A84((uint64_t)v11, &qword_10040BB78);
      swift_bridgeObjectRelease(a2);
      sub_100033A84((uint64_t)v8, &qword_10040BB78);

      swift_bridgeObjectRelease(a2);
    }
    return (*(uint64_t (**)(char *, uint64_t))(v64 + 8))(v23, v65);
  }
}

uint64_t sub_100226C18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  void (*v27)(uint64_t *, uint64_t, uint64_t);
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t *, uint64_t);
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  os_log_t v45;
  uint64_t v46;
  char *v47;
  void (*v48)(uint64_t *, uint64_t, uint64_t);
  uint64_t v49;
  NSObject *v50;
  os_log_type_t v51;
  int v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  void (*v56)(uint64_t *, uint64_t);
  char *v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  void (*v62)(uint64_t *, uint64_t);
  void (*v64)(uint64_t *, uint64_t);
  uint64_t v65;
  uint64_t *v66;
  os_log_t v67;
  uint64_t *v68;
  int v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;

  v71 = a2;
  v76 = *(_QWORD *)(a3 + 16);
  v75 = *(_QWORD *)(v76 - 8);
  __chkstk_darwin();
  v70 = (char *)&v65 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v8 = (char *)&v65 - v7;
  v74 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin();
  v11 = (char *)&v65 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v13 = (uint64_t *)((char *)&v65 - v12);
  __chkstk_darwin();
  v15 = (char *)&v65 - v14;
  __chkstk_darwin();
  v17 = (char *)&v65 - v16;
  __chkstk_darwin();
  v19 = (uint64_t *)((char *)&v65 - v18);
  type metadata accessor for Logger(0);
  __chkstk_darwin();
  v21 = (char *)&v65 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __chkstk_darwin();
  v72 = v25;
  v73 = v22;
  if (a1)
  {
    v26 = (char *)&v65 - v23;
    (*(void (**)(char *, uint64_t, uint64_t))(v25 + 16))((char *)&v65 - v23, v3 + *(int *)(a3 + 36), v24);
    v27 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v74 + 16);
    v27(v19, v3, a3);
    v27((uint64_t *)v17, v3, a3);
    (*(void (**)(char *, uint64_t, uint64_t))(v75 + 16))(v8, v71, v76);
    v27((uint64_t *)v15, v3, a3);
    swift_errorRetain(a1);
    swift_errorRetain(a1);
    v28 = swift_errorRetain(a1);
    v71 = (uint64_t)v26;
    v29 = Logger.logObject.getter(v28);
    v30 = static os_log_type_t.error.getter(v29);
    v31 = v30;
    if (os_log_type_enabled(v29, v30))
    {
      v32 = swift_slowAlloc(42, -1);
      v68 = (uint64_t *)swift_slowAlloc(8, -1);
      v70 = (char *)swift_slowAlloc(96, -1);
      v78 = v70;
      *(_DWORD *)v32 = 136315906;
      v69 = v31;
      v67 = v29;
      v34 = *v19;
      v33 = v19[1];
      swift_bridgeObjectRetain(v33);
      v77 = sub_100013CC8(v34, v33, (uint64_t *)&v78);
      v66 = (uint64_t *)&v78;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v77, &v78);
      swift_bridgeObjectRelease(v33);
      v35 = *(void (**)(uint64_t *, uint64_t))(v74 + 8);
      v35(v19, a3);
      *(_WORD *)(v32 + 12) = 2080;
      v36 = (*(uint64_t (**)(char *))&v17[*(int *)(a3 + 60)])(v8);
      v38 = v37;
      v77 = sub_100013CC8(v36, v37, (uint64_t *)&v78);
      v39 = v66;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v77, v66);
      swift_bridgeObjectRelease(v38);
      v35((uint64_t *)v17, a3);
      (*(void (**)(char *, uint64_t))(v75 + 8))(v8, v76);
      *(_WORD *)(v32 + 22) = 2080;
      v40 = (*(uint64_t (**)(char *))&v15[*(int *)(a3 + 60)])(&v15[*(int *)(a3 + 40)]);
      v42 = v41;
      v77 = sub_100013CC8(v40, v41, (uint64_t *)&v78);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v77, v39);
      swift_bridgeObjectRelease(v42);
      v35((uint64_t *)v15, a3);
      *(_WORD *)(v32 + 32) = 2112;
      swift_errorRetain(a1);
      v43 = _swift_stdlib_bridgeErrorToNSError(a1);
      v77 = v43;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v77, v39);
      v44 = v68;
      *v68 = v43;
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      v45 = v67;
      _os_log_impl((void *)&_mh_execute_header, v67, (os_log_type_t)v69, "Failed to update %s to %s (from %s) because %@", (uint8_t *)v32, 0x2Au);
      v46 = sub_100012C44(&qword_100404BB0);
      swift_arrayDestroy(v44, 1, v46);
      swift_slowDealloc(v44, -1, -1);
      v47 = v70;
      swift_arrayDestroy(v70, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v47, -1, -1);
      swift_slowDealloc(v32, -1, -1);

      swift_errorRelease(a1);
    }
    else
    {
      swift_errorRelease(a1);
      v62 = *(void (**)(uint64_t *, uint64_t))(v74 + 8);
      v62(v19, a3);
      v62((uint64_t *)v17, a3);
      (*(void (**)(char *, uint64_t))(v75 + 8))(v8, v76);
      v62((uint64_t *)v15, a3);
      swift_errorRelease(a1);
      swift_errorRelease(a1);

    }
    return (*(uint64_t (**)(uint64_t, uint64_t))(v72 + 8))(v71, v73);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v25 + 16))(v21, v3 + *(int *)(a3 + 36), v24);
    v48 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v74 + 16);
    v48(v13, v3, a3);
    v48((uint64_t *)v11, v3, a3);
    v49 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v75 + 16))(v70, v71, v76);
    v50 = Logger.logObject.getter(v49);
    v51 = static os_log_type_t.default.getter();
    v52 = v51;
    if (os_log_type_enabled(v50, v51))
    {
      v53 = swift_slowAlloc(22, -1);
      v71 = swift_slowAlloc(64, -1);
      v78 = (char *)v71;
      *(_DWORD *)v53 = 136315394;
      v69 = v52;
      v55 = *v13;
      v54 = v13[1];
      swift_bridgeObjectRetain(v54);
      v77 = sub_100013CC8(v55, v54, (uint64_t *)&v78);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v77, &v78);
      swift_bridgeObjectRelease(v54);
      v56 = *(void (**)(uint64_t *, uint64_t))(v74 + 8);
      v56(v13, a3);
      *(_WORD *)(v53 + 12) = 2080;
      v57 = v70;
      v58 = (*(uint64_t (**)(char *))&v11[*(int *)(a3 + 60)])(v70);
      v60 = v59;
      v77 = sub_100013CC8(v58, v59, (uint64_t *)&v78);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v77, &v78);
      swift_bridgeObjectRelease(v60);
      v56((uint64_t *)v11, a3);
      (*(void (**)(char *, uint64_t))(v75 + 8))(v57, v76);
      _os_log_impl((void *)&_mh_execute_header, v50, (os_log_type_t)v69, "Successfully updated %s to %s", (uint8_t *)v53, 0x16u);
      v61 = v71;
      swift_arrayDestroy(v71, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v61, -1, -1);
      swift_slowDealloc(v53, -1, -1);
    }
    else
    {
      v64 = *(void (**)(uint64_t *, uint64_t))(v74 + 8);
      v64(v13, a3);
      v64((uint64_t *)v11, a3);
      (*(void (**)(char *, uint64_t))(v75 + 8))(v70, v76);
    }

    return (*(uint64_t (**)(char *, uint64_t))(v72 + 8))(v21, v73);
  }
}

void (*MutableDriverProperty.wrappedValue.modify(_QWORD *a1, uint64_t a2))(uint64_t *a1, char a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  void *v9;
  void (*v10)(void);

  v5 = malloc(0x38uLL);
  *a1 = v5;
  *v5 = a2;
  v5[1] = v2;
  v6 = *(_QWORD *)(a2 + 16);
  v5[2] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v5[3] = v7;
  v8 = *(_QWORD *)(v7 + 64);
  v5[4] = malloc(v8);
  v9 = malloc(v8);
  v10 = *(void (**)(void))(v7 + 16);
  v5[5] = v9;
  v5[6] = v10;
  v10();
  return sub_1002273D4;
}

void sub_1002273D4(uint64_t *a1, char a2)
{
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void *, uint64_t);
  uint64_t v9;
  uint64_t v10;

  v2 = *a1;
  if ((a2 & 1) != 0)
  {
    v3 = *(void **)(v2 + 40);
    v5 = *(_QWORD *)(v2 + 24);
    v4 = *(void **)(v2 + 32);
    v6 = *(_QWORD *)(v2 + 16);
    v7 = *(_QWORD *)v2;
    (*(void (**)(void *, void *, uint64_t))(v2 + 48))(v4, v3, v6);
    sub_10022A400((uint64_t)v4, v7);
    v8 = *(void (**)(void *, uint64_t))(v5 + 8);
    v8(v4, v6);
    v8(v3, v6);
  }
  else
  {
    v4 = *(void **)(v2 + 32);
    v3 = *(void **)(v2 + 40);
    v9 = *(_QWORD *)(v2 + 16);
    v10 = *(_QWORD *)(v2 + 24);
    sub_10022A400((uint64_t)v3, *(_QWORD *)v2);
    (*(void (**)(void *, uint64_t))(v10 + 8))(v3, v9);
  }
  free(v3);
  free(v4);
  free((void *)v2);
}

uint64_t MutableDriverProperty.updated(value:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v15;

  v5 = *(_QWORD *)(a2 + 16);
  v6 = type metadata accessor for Optional(0, v5);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v15 - v9;
  v11 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v8);
  v13 = (char *)&v15 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, a1, v6);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v10, 1, v5) == 1)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v2 + *(int *)(a2 + 40), v5);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v13, v10, v5);
  }
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 40))(v2 + *(int *)(a2 + 40), v13, v5);
}

Swift::Void __swiftcall MutableDriverProperty.restore()()
{
  int *v0;
  uint64_t v1;
  uint64_t v2;
  int *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void (*v13)(uint64_t *, uint64_t, int *);
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t *, int *);
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  void (*v27)(uint64_t *, int *);
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34[2];

  v2 = v1;
  v3 = v0;
  v4 = *((_QWORD *)v0 - 1);
  __chkstk_darwin();
  __chkstk_darwin();
  __chkstk_darwin();
  v6 = (char *)&v28 - v5;
  __chkstk_darwin();
  v8 = (uint64_t *)((char *)&v28 - v7);
  v9 = type metadata accessor for Logger(0);
  v31 = *(_QWORD *)(v9 - 8);
  v32 = v9;
  __chkstk_darwin();
  v30 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v12 = (char *)&v28 - v11;
  (*(void (**)(uint64_t))(v1 + v3[11]))(v1 + v3[10]);
  (*(void (**)(char *, uint64_t, uint64_t))(v31 + 16))(v12, v1 + v3[9], v32);
  v13 = *(void (**)(uint64_t *, uint64_t, int *))(v4 + 16);
  v13(v8, v2, v3);
  v14 = ((uint64_t (*)(char *, uint64_t, int *))v13)(v6, v2, v3);
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.default.getter();
  v17 = v16;
  if (os_log_type_enabled(v15, v16))
  {
    v18 = swift_slowAlloc(22, -1);
    LODWORD(v29) = v17;
    v19 = v18;
    v30 = (char *)swift_slowAlloc(64, -1);
    v34[0] = (uint64_t)v30;
    *(_DWORD *)v19 = 136315394;
    v21 = *v8;
    v20 = v8[1];
    swift_bridgeObjectRetain(v20);
    v33 = sub_100013CC8(v21, v20, v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, v34);
    swift_bridgeObjectRelease(v20);
    v22 = *(void (**)(uint64_t *, int *))(v4 + 8);
    v22(v8, v3);
    *(_WORD *)(v19 + 12) = 2080;
    v23 = (*(uint64_t (**)(char *))&v6[v3[15]])(&v6[v3[10]]);
    v25 = v24;
    v33 = sub_100013CC8(v23, v24, v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, v34);
    swift_bridgeObjectRelease(v25);
    v22((uint64_t *)v6, v3);
    _os_log_impl((void *)&_mh_execute_header, v15, (os_log_type_t)v29, "Successfully restored %s to %s after a reset", (uint8_t *)v19, 0x16u);
    v26 = v30;
    swift_arrayDestroy(v30, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v26, -1, -1);
    swift_slowDealloc(v19, -1, -1);
  }
  else
  {
    v27 = *(void (**)(uint64_t *, int *))(v4 + 8);
    v27(v8, v3);
    v27((uint64_t *)v6, v3);
  }

  (*(void (**)(char *, uint64_t))(v31 + 8))(v12, v32);
}

uint64_t (*ObservableWiFiProperty.projectedValue.modify(_QWORD *a1, uint64_t a2))()
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t v6;
  size_t v7;
  void *v8;
  void (*v9)(void);

  v5 = malloc(0x30uLL);
  *a1 = v5;
  *v5 = a2;
  v5[1] = v2;
  v6 = *(_QWORD *)(a2 - 8);
  v5[2] = v6;
  v7 = *(_QWORD *)(v6 + 64);
  v5[3] = malloc(v7);
  v8 = malloc(v7);
  v9 = *(void (**)(void))(v6 + 16);
  v5[4] = v8;
  v5[5] = v9;
  v9();
  return sub_100227C08;
}

uint64_t MutableDriverProperty.customMirror.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD v6[3];
  uint64_t v7;

  v2 = v1 + *(int *)(a1 + 40);
  v7 = *(_QWORD *)(a1 + 16);
  v3 = v7;
  v4 = sub_100033C24(v6);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(v4, v2, v3);
  return Mirror.init(reflecting:)(v6);
}

uint64_t MutableDriverProperty<>.description.getter(uint64_t a1, uint64_t a2)
{
  return dispatch thunk of CustomStringConvertible.description.getter(*(_QWORD *)(a1 + 16), a2);
}

uint64_t sub_100227C9C(uint64_t a1, uint64_t a2)
{
  return MutableDriverProperty<>.description.getter(a1, *(_QWORD *)(a2 - 8));
}

uint64_t MutableDriverProperty<>.debugDescription.getter(uint64_t a1)
{
  return dispatch thunk of CustomDebugStringConvertible.debugDescription.getter(*(_QWORD *)(a1 + 16));
}

uint64_t sub_100227CCC(uint64_t a1)
{
  return MutableDriverProperty<>.debugDescription.getter(a1);
}

uint64_t WiFiPropertyUpdateRegistration.id.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtC7CoreP2P30WiFiPropertyUpdateRegistration_id;
  v4 = type metadata accessor for UUID(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t WiFiPropertyUpdateRegistration.__allocating_init(cancellationHandler:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  _QWORD *v6;

  v5 = swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  UUID.init()();
  v6 = (_QWORD *)(v5 + OBJC_IVAR____TtC7CoreP2P30WiFiPropertyUpdateRegistration_cancellationHandler);
  *v6 = a1;
  v6[1] = a2;
  return v5;
}

uint64_t WiFiPropertyUpdateRegistration.init(cancellationHandler:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  UUID.init()();
  v5 = (_QWORD *)(v2 + OBJC_IVAR____TtC7CoreP2P30WiFiPropertyUpdateRegistration_cancellationHandler);
  *v5 = a1;
  v5[1] = a2;
  return v2;
}

uint64_t WiFiPropertyUpdateRegistration.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = v0;
  v2 = v0 + OBJC_IVAR____TtC7CoreP2P30WiFiPropertyUpdateRegistration_cancellationHandler;
  (*(void (**)(uint64_t))(v0 + OBJC_IVAR____TtC7CoreP2P30WiFiPropertyUpdateRegistration_cancellationHandler))(v0);
  v3 = v0 + OBJC_IVAR____TtC7CoreP2P30WiFiPropertyUpdateRegistration_id;
  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  swift_release(*(_QWORD *)(v2 + 8));
  return v1;
}

uint64_t WiFiPropertyUpdateRegistration.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = v0;
  v2 = v0 + OBJC_IVAR____TtC7CoreP2P30WiFiPropertyUpdateRegistration_cancellationHandler;
  (*(void (**)(uint64_t))(v0 + OBJC_IVAR____TtC7CoreP2P30WiFiPropertyUpdateRegistration_cancellationHandler))(v0);
  v3 = v0 + OBJC_IVAR____TtC7CoreP2P30WiFiPropertyUpdateRegistration_id;
  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  swift_release(*(_QWORD *)(v2 + 8));
  return swift_deallocClassInstance(v1, *(unsigned int *)(*(_QWORD *)v1 + 48), *(unsigned __int16 *)(*(_QWORD *)v1 + 52));
}

uint64_t WiFiPropertyUpdateRegistration.hash(into:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = type metadata accessor for UUID(0);
  v3 = sub_100011DE4(&qword_10040F670, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  return dispatch thunk of Hashable.hash(into:)(a1, v2, v3);
}

uint64_t static WiFiPropertyUpdateRegistration.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return static UUID.== infix(_:_:)(a1 + OBJC_IVAR____TtC7CoreP2P30WiFiPropertyUpdateRegistration_id, a2 + OBJC_IVAR____TtC7CoreP2P30WiFiPropertyUpdateRegistration_id);
}

Swift::Int WiFiPropertyUpdateRegistration.hashValue.getter()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD v3[9];

  Hasher.init(_seed:)(v3);
  v0 = type metadata accessor for UUID(0);
  v1 = sub_100011DE4(&qword_10040F670, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(v3, v0, v1);
  return Hasher._finalize()();
}

uint64_t sub_100227FA4@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1 + OBJC_IVAR____TtC7CoreP2P30WiFiPropertyUpdateRegistration_id;
  v4 = type metadata accessor for UUID(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

Swift::Int sub_100227FEC()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD v3[9];

  Hasher.init(_seed:)(v3);
  v0 = type metadata accessor for UUID(0);
  v1 = sub_100011DE4(&qword_10040F670, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(v3, v0, v1);
  return Hasher._finalize()();
}

uint64_t sub_100228068(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = type metadata accessor for UUID(0);
  v3 = sub_100011DE4(&qword_10040F670, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  return dispatch thunk of Hashable.hash(into:)(a1, v2, v3);
}

Swift::Int sub_1002280D4()
{
  uint64_t v0;
  _QWORD v2[9];

  Hasher.init(_seed:)(v2);
  (*(void (**)(_QWORD *))(**(_QWORD **)v0 + 104))(v2);
  return Hasher._finalize()();
}

uint64_t sub_100228118(_QWORD *a1, _QWORD *a2)
{
  return static UUID.== infix(_:_:)(*a1 + OBJC_IVAR____TtC7CoreP2P30WiFiPropertyUpdateRegistration_id, *a2 + OBJC_IVAR____TtC7CoreP2P30WiFiPropertyUpdateRegistration_id);
}

void sub_100228134()
{
  _swift_stdlib_reportUnimplementedInitializer("CoreP2P.Token", 13, "init(cancellationHandler:)", 26, 0);
  __break(1u);
}

uint64_t sub_100228160()
{
  uint64_t v0;

  return swift_release(*(_QWORD *)(v0 + qword_10040BEA8 + 8));
}

uint64_t sub_100228174()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = v0;
  v2 = v0 + OBJC_IVAR____TtC7CoreP2P30WiFiPropertyUpdateRegistration_cancellationHandler;
  (*(void (**)(uint64_t))(v0 + OBJC_IVAR____TtC7CoreP2P30WiFiPropertyUpdateRegistration_cancellationHandler))(v0);
  v3 = v0 + OBJC_IVAR____TtC7CoreP2P30WiFiPropertyUpdateRegistration_id;
  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  swift_release(*(_QWORD *)(v2 + 8));
  swift_release(*(_QWORD *)(v1 + qword_10040BEA8 + 8));
  return v1;
}

uint64_t sub_1002281F8()
{
  uint64_t v0;

  v0 = sub_100228174();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t *sub_100228218()
{
  uint64_t v0;

  swift_allocObject(v0, 24, 7);
  return sub_100228248();
}

uint64_t *sub_100228248()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *v0;
  v2 = type metadata accessor for UUID(0);
  v4 = type metadata accessor for ObservableWiFiProperty.TokenRegistrations.WeakToken(0, *(_QWORD *)(v1 + 80), *(_QWORD *)(v1 + 88), v3);
  v5 = sub_100011DE4(&qword_10040F670, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v0[2] = Dictionary.init()(v2, v4, v5);
  return v0;
}

uint64_t sub_1002282C0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (**v9)(char *);
  uint64_t v10;
  uint64_t (**v11)(char *);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  void (*v16)(uint64_t (**)(char *), uint64_t, uint64_t);
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t (**)(char *), uint64_t);
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  os_log_t v38;
  uint64_t v39;
  void (*v41)(uint64_t (**)(char *), uint64_t);
  _BYTE v42[4];
  int v43;
  os_log_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _BYTE v50[16];
  uint64_t v51;

  v3 = *(_QWORD *)(a1 - 8);
  v4 = __chkstk_darwin(a1);
  v6 = &v42[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = __chkstk_darwin(v4);
  v9 = (uint64_t (**)(char *))&v42[-v8];
  __chkstk_darwin(v7);
  v11 = (uint64_t (**)(char *))&v42[-v10];
  v12 = type metadata accessor for Logger(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12);
  v15 = &v42[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v13 + 16))(v15, v1 + *(int *)(a1 + 52), v12);
  v16 = *(void (**)(uint64_t (**)(char *), uint64_t, uint64_t))(v3 + 16);
  v16(v11, v1, a1);
  v16(v9, v1, a1);
  v17 = ((uint64_t (*)(_BYTE *, uint64_t, uint64_t))v16)(v6, v1, a1);
  v18 = Logger.logObject.getter(v17);
  v19 = static os_log_type_t.default.getter();
  v20 = v19;
  if (os_log_type_enabled(v18, v19))
  {
    v21 = swift_slowAlloc(32, -1);
    v47 = v12;
    v22 = v21;
    v45 = swift_slowAlloc(64, -1);
    v51 = v45;
    *(_DWORD *)v22 = 136315650;
    v44 = v18;
    v23 = (uint64_t *)((char *)v11 + *(int *)(a1 + 48));
    v46 = v13;
    v43 = v20;
    v25 = *v23;
    v24 = v23[1];
    swift_bridgeObjectRetain(v24);
    v49 = sub_100013CC8(v25, v24, &v51);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, v50);
    swift_bridgeObjectRelease(v24);
    v26 = *(void (**)(uint64_t (**)(char *), uint64_t))(v3 + 8);
    v26(v11, a1);
    *(_WORD *)(v22 + 12) = 2080;
    v27 = (*v9)((char *)v9 + *(int *)(a1 + 44));
    v29 = v28;
    v49 = sub_100013CC8(v27, v28, &v51);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, v50);
    swift_bridgeObjectRelease(v29);
    v26(v9, a1);
    *(_WORD *)(v22 + 22) = 2048;
    v30 = *((_QWORD *)v6 + 2);
    swift_beginAccess(v30 + 16, &v49, 0, 0);
    v31 = *(_QWORD *)(v30 + 16);
    v32 = type metadata accessor for UUID(0);
    v34 = type metadata accessor for ObservableWiFiProperty.TokenRegistrations.WeakToken(0, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), v33);
    v35 = sub_100011DE4(&qword_10040F670, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v36 = swift_bridgeObjectRetain(v31);
    v37 = Dictionary.count.getter(v36, v32, v34, v35);
    swift_bridgeObjectRelease(v31);
    v26((uint64_t (**)(char *))v6, a1);
    v48 = v37;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49);
    v38 = v44;
    _os_log_impl((void *)&_mh_execute_header, v44, (os_log_type_t)v43, "Updated %s to %s, will notify %ld observers", (uint8_t *)v22, 0x20u);
    v39 = v45;
    swift_arrayDestroy(v45, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v39, -1, -1);
    swift_slowDealloc(v22, -1, -1);

    return (*(uint64_t (**)(_BYTE *, uint64_t))(v46 + 8))(v15, v47);
  }
  else
  {
    v41 = *(void (**)(uint64_t (**)(char *), uint64_t))(v3 + 8);
    v41((uint64_t (**)(char *))v6, a1);
    v41(v11, a1);
    v41(v9, a1);

    return (*(uint64_t (**)(_BYTE *, uint64_t))(v13 + 8))(v15, v12);
  }
}

uint64_t ObservableWiFiProperty.name.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v2 = (uint64_t *)(v1 + *(int *)(a1 + 48));
  v3 = *v2;
  swift_bridgeObjectRetain(v2[1]);
  return v3;
}

uint64_t ObservableWiFiProperty.init(lock:defaultValue:name:logger:valueDescriber:)@<X0>(uint64_t (*a1)(char *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t (*a6)(char *)@<X5>, uint64_t (*a7)(char *)@<X6>, uint64_t a8@<X7>, uint64_t (**a9)(char *)@<X8>, uint64_t a10)
{
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int *v23;
  uint64_t *v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t (*v28)(char *);
  char *v29;
  void (*v30)(char *, uint64_t, uint64_t);
  uint64_t (*v31)(char *);
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  void (*v42)(char *, uint64_t);
  void (*v44)(char *, uint64_t);
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t (*v48)(char *);
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t (*v53)(char *);
  uint64_t (*v54)(char *);
  uint64_t v55;
  uint64_t v56;

  v47 = a4;
  v48 = a7;
  v54 = a6;
  v16 = *(_QWORD *)(a8 - 8);
  __chkstk_darwin();
  v18 = (char *)&v45 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for ObservableWiFiProperty.TokenRegistrations(0, v20, a10, v19);
  swift_allocObject(v21, 24, 7);
  a9[2] = (uint64_t (*)(char *))sub_100228248();
  a9[3] = a1;
  v23 = (int *)type metadata accessor for ObservableWiFiProperty(0, a8, a10, v22);
  v24 = (uint64_t *)((char *)a9 + v23[12]);
  v46 = a3;
  *v24 = a3;
  v25 = v47;
  v24[1] = v47;
  v26 = (char *)a9 + v23[13];
  v27 = type metadata accessor for Logger(0);
  v51 = *(_QWORD *)(v27 - 8);
  v52 = v27;
  (*(void (**)(char *, uint64_t))(v51 + 16))(v26, a5);
  v28 = v48;
  *a9 = v54;
  a9[1] = v28;
  v29 = (char *)a9 + v23[11];
  v50 = v16;
  v30 = *(void (**)(char *, uint64_t, uint64_t))(v16 + 16);
  v31 = v28;
  v30(v29, a2, a8);
  v49 = v18;
  v30(v18, a2, a8);
  swift_retain_n(v31, 3);
  swift_bridgeObjectRetain_n(v25, 2);
  v53 = a1;
  v32 = swift_retain(a1);
  v33 = Logger.logObject.getter(v32);
  v34 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v33, v34))
  {
    v35 = swift_slowAlloc(22, -1);
    v36 = swift_slowAlloc(64, -1);
    v45 = a2;
    v37 = v36;
    v56 = v36;
    *(_DWORD *)v35 = 136315394;
    swift_bridgeObjectRetain(v25);
    v55 = sub_100013CC8(v46, v25, &v56);
    v46 = a5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56);
    swift_bridgeObjectRelease_n(v25, 3);
    *(_WORD *)(v35 + 12) = 2080;
    v38 = v49;
    v39 = v54(v49);
    v41 = v40;
    v55 = sub_100013CC8(v39, v40, &v56);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56);
    swift_release_n(v31, 2);
    swift_bridgeObjectRelease(v41);
    v42 = *(void (**)(char *, uint64_t))(v50 + 8);
    v42(v38, a8);
    _os_log_impl((void *)&_mh_execute_header, v33, v34, "Initialized value for %s to %s", (uint8_t *)v35, 0x16u);
    swift_arrayDestroy(v37, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v37, -1, -1);
    swift_slowDealloc(v35, -1, -1);

    swift_release(v53);
    swift_release(v31);
    (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v46, v52);
    return ((uint64_t (*)(uint64_t, uint64_t))v42)(v45, a8);
  }
  else
  {

    swift_release(v53);
    swift_release_n(v31, 3);
    v44 = *(void (**)(char *, uint64_t))(v50 + 8);
    v44(v49, a8);
    swift_bridgeObjectRelease_n(v25, 2);
    (*(void (**)(uint64_t, uint64_t))(v51 + 8))(a5, v52);
    return ((uint64_t (*)(uint64_t, uint64_t))v44)(a2, a8);
  }
}

