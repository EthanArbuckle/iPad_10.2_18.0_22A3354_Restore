void destroy for DriverEvent(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int16 v25;
  void (*v26)(uint64_t, uint64_t);

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a1, a2);
  switch(EnumCaseMultiPayload)
  {
    case 2:
      sub_1000131C4(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40), *(_BYTE *)(a1 + 41));
      break;
    case 1:
      v4 = type metadata accessor for DriverEvent.AWDL(0);
      switch(swift_getEnumCaseMultiPayload(a1, v4))
      {
        case 1u:
          sub_1000632E8(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
          v5 = a1 + *(int *)(sub_100012C44(&qword_100405BB0) + 48);
          v6 = (int *)type metadata accessor for AWDLActionFrame.Header(0);
          v7 = v5 + v6[8];
          v8 = type metadata accessor for DispatchTimeInterval(0);
          v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8);
          v9(v7, v8);
          v9(v5 + v6[9], v8);
          v10 = *(_QWORD *)(v5 + v6[16]);
          goto LABEL_11;
        case 2u:
          swift_bridgeObjectRelease(*(_QWORD *)(a1 + 80));
          swift_bridgeObjectRelease(*(_QWORD *)(a1 + 88));
          swift_bridgeObjectRelease(*(_QWORD *)(a1 + 96));
          v10 = *(_QWORD *)(a1 + 104);
          goto LABEL_11;
        case 3u:
          v11 = type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0);
          v12 = a1 + *(int *)(v11 + 80);
          v13 = type metadata accessor for DispatchTimeInterval(0);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
          swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(v11 + 144) + 8));
          v14 = (_QWORD *)(a1 + *(int *)(type metadata accessor for AWDLStatistics.LowLatencyStatistics(0) + 20));
          swift_bridgeObjectRelease(v14[27]);
          swift_bridgeObjectRelease(v14[28]);
          swift_bridgeObjectRelease(v14[29]);
          swift_bridgeObjectRelease(v14[30]);
          swift_bridgeObjectRelease(v14[31]);
          swift_bridgeObjectRelease(v14[32]);
          swift_bridgeObjectRelease(v14[33]);
          swift_bridgeObjectRelease(v14[34]);
          swift_bridgeObjectRelease(v14[35]);
          swift_bridgeObjectRelease(v14[36]);
          swift_bridgeObjectRelease(v14[37]);
          swift_bridgeObjectRelease(v14[38]);
          swift_bridgeObjectRelease(v14[39]);
          swift_bridgeObjectRelease(v14[40]);
          swift_bridgeObjectRelease(v14[41]);
          swift_bridgeObjectRelease(v14[42]);
          swift_bridgeObjectRelease(v14[43]);
          v10 = v14[44];
LABEL_11:
          swift_bridgeObjectRelease(v10);
          break;
        case 6u:
          sub_10006156C(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
          break;
        case 8u:

          break;
        case 9u:
          v15 = type metadata accessor for DispatchTimeInterval(0);
          v26 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8);
          v26(a1, v15);
          v16 = a1 + *(int *)(type metadata accessor for AWDLIdleActivity(0) + 20);
          v26(v16, v15);
          break;
        default:
          return;
      }
      break;
    case 0:
      v25 = *(_WORD *)(a1 + 360);
      v23 = *(_OWORD *)(a1 + 320);
      v24 = *(_OWORD *)(a1 + 336);
      v21 = *(_OWORD *)(a1 + 288);
      v22 = *(_OWORD *)(a1 + 304);
      v19 = *(_OWORD *)(a1 + 256);
      v20 = *(_OWORD *)(a1 + 272);
      v17 = *(_OWORD *)(a1 + 224);
      v18 = *(_OWORD *)(a1 + 240);
      sub_100063114(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
        *(_QWORD *)(a1 + 152),
        *(_QWORD *)(a1 + 160),
        *(_QWORD *)(a1 + 168),
        *(_QWORD *)(a1 + 176),
        *(_QWORD *)(a1 + 184),
        *(_QWORD *)(a1 + 192),
        *(_QWORD *)(a1 + 200),
        *(_QWORD *)(a1 + 208),
        *(_QWORD *)(a1 + 216),
        v17,
        *((uint64_t *)&v17 + 1),
        v18,
        *((uint64_t *)&v18 + 1),
        v19,
        *((uint64_t *)&v19 + 1),
        v20,
        *((uint64_t *)&v20 + 1),
        v21,
        *((uint64_t *)&v21 + 1),
        v22,
        *((uint64_t *)&v22 + 1),
        v23,
        *((uint64_t *)&v23 + 1),
        v24,
        *((uint64_t *)&v24 + 1),
        *(_QWORD *)(a1 + 352),
        v25,
        SHIBYTE(v25));
      break;
  }
}

Swift::Int sub_100005774()
{
  Swift::UInt *v0;
  Swift::UInt v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_1000057B4()
{
  type metadata accessor for Logger(0);
  __chkstk_darwin();
  __asm { BR              X10 }
}

uint64_t sub_100005850()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  void *v10;
  int v11;
  uint64_t v12;
  NSObject *v13;
  NSObject *v14;
  os_log_type_t v15;
  int v16;
  NSObject *v17;
  _DWORD *v18;
  NSObject *v19;
  NSObject **v20;
  uint8_t *v21;
  uint64_t v22;
  NSObject *v23;
  int v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t result;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  *(_QWORD *)(v12 - 152) = v4;
  *(_QWORD *)(v12 - 136) = v3;
  *(_DWORD *)(v12 - 124) = v2;
  *(_QWORD *)(v12 - 120) = v1;
  *(_QWORD *)(v12 - 112) = v0;
  *(_DWORD *)(v12 - 140) = v11;
  Logger.init(subsystem:category:)(0xD000000000000012, 0x8000000100360DF0, 0x736E617254697073, 0xEF736E6F69746361);
  v13 = v10;
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.info.getter();
  v16 = v15;
  if (os_log_type_enabled(v14, v15))
  {
    *(_DWORD *)(v12 - 156) = v16;
    v17 = v13;
    v18 = (_DWORD *)swift_slowAlloc(12, -1);
    *(_QWORD *)(v12 - 176) = swift_slowAlloc(8, -1);
    *(_QWORD *)(v12 - 168) = v18;
    *v18 = 138412290;
    *(_QWORD *)(v12 - 184) = v18 + 1;
    *(_QWORD *)(v12 - 88) = v17;
    v19 = v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v12 - 88, v12 - 80);
    v20 = *(NSObject ***)(v12 - 176);
    *v20 = v17;

    v13 = v17;
    v21 = *(uint8_t **)(v12 - 168);
    _os_log_impl((void *)&_mh_execute_header, v14, (os_log_type_t)*(_DWORD *)(v12 - 156), "%@ activationInProgress ", v21, 0xCu);
    v22 = sub_100012C44(&qword_100404BB0);
    ((void (*)(NSObject **, uint64_t, uint64_t))swift_arrayDestroy)(v20, 1, v22);
    swift_slowDealloc(v20, -1, -1);
    swift_slowDealloc(v21, -1, -1);
  }
  else
  {

    v14 = v13;
  }

  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v9);
  v23 = v13;
  v24 = *(_DWORD *)(v12 - 140);
  sub_100013720(*(_QWORD *)(v12 - 104), *(_QWORD *)(v12 - 96));
  if ((swift_isUniquelyReferenced_nonNull_native(v8) & 1) == 0)
    v8 = sub_1002CCEEC(0, v8[2] + 1, 1, v8);
  v26 = v8[2];
  v25 = v8[3];
  if (v26 >= v25 >> 1)
    v8 = sub_1002CCEEC((_QWORD *)(v25 > 1), v26 + 1, 1, v8);
  result = 0;
  v8[2] = v26 + 1;
  v28 = &v8[4 * v26];
  v29 = *(_QWORD *)(v12 - 104);
  v28[4] = v23;
  v28[5] = v29;
  v28[6] = *(_QWORD *)(v12 - 96);
  *((_BYTE *)v28 + 56) = v24 & 1;
  v30 = *(_QWORD *)(v12 - 152);
  v31 = *(_QWORD *)(v12 - 112);
  *(_QWORD *)v6 = v8;
  *(_QWORD *)(v6 + 8) = v31;
  *(_QWORD *)(v6 + 16) = *(_QWORD *)(v12 - 136);
  *(_QWORD *)(v6 + 24) = v30;
  *(_QWORD *)(v6 + 32) = *(_QWORD *)(v12 - 120);
  *(_BYTE *)(v6 + 40) = *(_DWORD *)(v12 - 124);
  return result;
}

void sub_100005D68(Swift::UInt a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  _BYTE v13[24];

  v2 = v1;
  swift_beginAccess(v1 + *(_QWORD *)(*(_QWORD *)v1 + 520), v13, 33, 0);
  sub_100006308(a1);
  swift_endAccess(v13);
  switch(a1)
  {
    case 0xFuLL:
      return;
    case 0x10uLL:
      v4 = sub_100012C84();
      v5 = swift_allocError(&type metadata for WiFiError, v4, 0, 0);
      *(_OWORD *)v6 = xmmword_10033B150;
      *(_BYTE *)(v6 + 16) = 1;
      swift_willThrow(v5);
      return;
    case 0x11uLL:
      v7 = *(_QWORD *)(*(_QWORD *)v1 + 704);
      v8 = *(_QWORD *)(v1 + v7);
      swift_unownedRetainStrong(*(_QWORD *)(v2 + v7));
      sub_1002D6BEC(0);
      swift_release(v8);
      v9 = 17;
      goto LABEL_6;
    case 0x13uLL:
      v10 = *(_QWORD *)(*(_QWORD *)v1 + 704);
      v11 = *(_QWORD *)(v1 + v10);
      swift_unownedRetainStrong(*(_QWORD *)(v2 + v10));
      v12 = sub_1003332D0((uint64_t)&off_1003F1A18);
      sub_1002D63C0(0, (uint64_t)v12);
      swift_release(v11);
      swift_bridgeObjectRelease(v12);
      v9 = 19;
      goto LABEL_6;
    default:
      v9 = a1;
LABEL_6:
      sub_10000F174(v9, 0);
      return;
  }
}

Swift::Int sub_100005EC0(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  Swift::Int result;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100012C44((uint64_t *)&unk_100410230);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v3;
  v37 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = v7 + 64;
  result = swift_retain(v5);
  v15 = 0;
  while (1)
  {
    if (v11)
    {
      v21 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v22 = v21 | (v15 << 6);
      goto LABEL_34;
    }
    v23 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return result;
    }
    if (v23 >= v12)
      break;
    v24 = (_QWORD *)(v5 + 64);
    v25 = *(_QWORD *)(v37 + 8 * v23);
    ++v15;
    if (!v25)
    {
      v15 = v23 + 1;
      if (v23 + 1 >= v12)
        goto LABEL_36;
      v25 = *(_QWORD *)(v37 + 8 * v15);
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v12)
        {
LABEL_36:
          swift_release(v5);
          v3 = v36;
          if ((a2 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v25 = *(_QWORD *)(v37 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            v15 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_45;
            if (v15 >= v12)
              goto LABEL_36;
            v25 = *(_QWORD *)(v37 + 8 * v15);
            ++v26;
            if (v25)
              goto LABEL_33;
          }
        }
        v15 = v26;
      }
    }
LABEL_33:
    v11 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v15 << 6);
LABEL_34:
    v31 = 8 * v22;
    v32 = *(void **)(*(_QWORD *)(v5 + 48) + v31);
    v33 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + v31);
    if ((a2 & 1) == 0)
      v34 = v32;
    result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v8 + 40));
    v16 = -1 << *(_BYTE *)(v8 + 32);
    v17 = result & ~v16;
    v18 = v17 >> 6;
    if (((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6))) != 0)
    {
      v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v16) >> 6;
      do
      {
        if (++v18 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v29 = v18 == v28;
        if (v18 == v28)
          v18 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v13 + 8 * v18);
      }
      while (v30 == -1);
      v19 = __clz(__rbit64(~v30)) + (v18 << 6);
    }
    *(_QWORD *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
    v20 = 8 * v19;
    *(_QWORD *)(*(_QWORD *)(v8 + 48) + v20) = v32;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + v20) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v36;
  v24 = (_QWORD *)(v5 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v35 = 1 << *(_BYTE *)(v5 + 32);
  if (v35 >= 64)
    bzero(v24, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v35;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

void sub_10000618C(Swift::UInt a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  _BYTE v12[24];
  Swift::UInt v13;

  v3 = v1;
  switch(a1)
  {
    case 0xFuLL:
      goto LABEL_8;
    case 0x10uLL:
      v5 = sub_100012C84();
      v6 = swift_allocError(&type metadata for WiFiError, v5, 0, 0);
      *(_OWORD *)v7 = xmmword_10033B150;
      *(_BYTE *)(v7 + 16) = 1;
      swift_willThrow(v6);
      return;
    case 0x11uLL:
      sub_10000F174(17, 1u);
      if (v2)
        return;
      v8 = *(_QWORD *)(v1 + *(_QWORD *)(*(_QWORD *)v1 + 704));
      swift_unownedRetainStrong(*(_QWORD *)(v3 + *(_QWORD *)(*(_QWORD *)v3 + 704)));
      sub_1002D6BEC(1);
      swift_release(v8);
LABEL_8:
      swift_beginAccess(v3 + *(_QWORD *)(*(_QWORD *)v3 + 520), v12, 33, 0);
      sub_100006440(&v13, a1);
      swift_endAccess(v12);
      return;
    case 0x13uLL:
      v9 = *(_QWORD *)(*(_QWORD *)v1 + 704);
      v10 = *(_QWORD *)(v1 + v9);
      swift_unownedRetainStrong(*(_QWORD *)(v3 + v9));
      v11 = sub_1003332D0((uint64_t)&off_1003F19F0);
      sub_1002D63C0(1, (uint64_t)v11);
      swift_release(v10);
      swift_bridgeObjectRelease(v11);
      goto LABEL_8;
    default:
      sub_10000F174(a1, 1u);
      if (!v2)
        goto LABEL_8;
      return;
  }
}

uint64_t sub_100006308(Swift::UInt a1)
{
  _QWORD *v1;
  uint64_t v3;
  Swift::Int v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[9];

  v3 = *v1;
  Hasher.init(_seed:)(v14);
  Hasher._combine(_:)(a1);
  v4 = Hasher._finalize()();
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = v4 & ~v5;
  if (((*(_QWORD *)(v3 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
    return 0;
  v7 = *(_QWORD *)(v3 + 48);
  if (*(_QWORD *)(v7 + 8 * v6) != a1)
  {
    v8 = ~v5;
    do
    {
      v6 = (v6 + 1) & v8;
      if (((*(_QWORD *)(v3 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
        return 0;
    }
    while (*(_QWORD *)(v7 + 8 * v6) != a1);
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v1);
  v10 = *v1;
  v14[0] = *v1;
  *v1 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1002B506C();
    v10 = v14[0];
  }
  v11 = *(_QWORD *)(*(_QWORD *)(v10 + 48) + 8 * v6);
  sub_100013518(v6);
  v12 = *v1;
  *v1 = v14[0];
  swift_bridgeObjectRelease(v12);
  return v11;
}

uint64_t sub_10000642C@<X0>(const char *a1@<X0>, size_t *a2@<X8>)
{
  return sub_100064178(a1, a2);
}

uint64_t sub_100006440(Swift::UInt *a1, Swift::UInt a2)
{
  _QWORD *v2;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v13;
  _QWORD v14[9];

  v5 = *v2;
  Hasher.init(_seed:)(v14);
  Hasher._combine(_:)(a2);
  v6 = Hasher._finalize()();
  v7 = -1 << *(_BYTE *)(v5 + 32);
  v8 = v6 & ~v7;
  if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
  {
LABEL_7:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
    v14[0] = *v2;
    *v2 = 0x8000000000000000;
    sub_1000133CC(a2, v8, isUniquelyReferenced_nonNull_native);
    v13 = *v2;
    *v2 = v14[0];
    swift_bridgeObjectRelease(v13);
    result = 1;
    goto LABEL_8;
  }
  v9 = *(_QWORD *)(v5 + 48);
  if (*(_QWORD *)(v9 + 8 * v8) != a2)
  {
    v10 = ~v7;
    do
    {
      v8 = (v8 + 1) & v10;
      if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
        goto LABEL_7;
    }
    while (*(_QWORD *)(v9 + 8 * v8) != a2);
  }
  result = 0;
  a2 = *(_QWORD *)(*(_QWORD *)(*v2 + 48) + 8 * v8);
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t sub_10000655C(void *a1, int a2, uint64_t a3, void *aBlock, uint64_t a5, uint64_t a6, const char *a7, uint64_t (*a8)(uint64_t, _QWORD, uint64_t, uint64_t))
{
  void *v14;
  uint64_t v15;
  id v16;

  v14 = _Block_copy(aBlock);
  v15 = swift_allocObject(a5, 24, 7);
  *(_QWORD *)(v15 + 16) = v14;
  v16 = a1;
  sub_100242388(a3, a6, v15, a7, a8);

  return swift_release(v15);
}

uint64_t sub_1000065F4()
{
  uint64_t v0;
  uint64_t AssociatedTypeWitness;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 16), &protocol requirements base descriptor for P2PControls, &associated type descriptor for P2PControls.Driver);
  v2 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, AssociatedTypeWitness);
  return swift_deallocObject(v0, v5, v6);
}

void sub_100006668()
{
  __asm { BR              X10 }
}

uint64_t sub_1000066D4()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t result;
  _QWORD *v13;
  id v14;
  int v15;
  uint64_t v16;

  v14 = v0;
  v9 = v2;
  sub_100013720(v16, v2);
  if ((swift_isUniquelyReferenced_nonNull_native(v8) & 1) == 0)
    v8 = sub_1002CCEEC(0, v8[2] + 1, 1, v8);
  v11 = v8[2];
  v10 = v8[3];
  if (v11 >= v10 >> 1)
    v8 = sub_1002CCEEC((_QWORD *)(v10 > 1), v11 + 1, 1, v8);
  result = 0;
  v8[2] = v11 + 1;
  v13 = &v8[4 * v11];
  v13[4] = v14;
  v13[5] = v16;
  v13[6] = v9;
  *((_BYTE *)v13 + 56) = v15 != 0;
  *(_QWORD *)v3 = v1;
  *(_QWORD *)(v3 + 8) = v8;
  *(_QWORD *)(v3 + 16) = v6;
  *(_QWORD *)(v3 + 24) = v7;
  *(_QWORD *)(v3 + 32) = v5;
  *(_BYTE *)(v3 + 40) = v4;
  return result;
}

uint64_t sub_100006B04(_QWORD *a1, unint64_t a2, int a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = v3;
  result = swift_isUniquelyReferenced_nonNull_native(*v3);
  if ((result & 1) == 0)
  {
    v13 = *v3;
    *v3 = 0x8000000000000000;
    sub_10032C278();
    v9 = *v3;
    *v3 = v13;
    result = swift_bridgeObjectRelease(v9);
  }
  if ((a2 & 0x8000000000000000) != 0 || (v10 = *v3, 1 << *(_BYTE *)(*v4 + 32) <= (uint64_t)a2))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (((*(_QWORD *)(v10 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8) + 64) >> a2) & 1) == 0)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (*(_DWORD *)(v10 + 36) == a3)
  {
    *v4 = 0x8000000000000000;
    v11 = *(_QWORD *)(*(_QWORD *)(v10 + 48) + 8 * a2);
    *a1 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * a2);
    sub_10001321C(a2, v10);
    v12 = *v4;
    *v4 = v10;
    swift_bridgeObjectRelease(v12);
    return v11;
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t sub_100006BFC(Swift::UInt a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  _BOOL8 v21;
  Swift::Int v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  uint64_t result;
  __int128 v37;
  char isUnique;
  Swift::Bool isUniquea[16];
  uint64_t v40;
  _QWORD *v41;
  unint64_t v42;
  _OWORD v44[2];
  uint64_t v45;
  _BYTE v46[24];
  _QWORD v47[7];

  v7 = (_QWORD *)*v4;
  v8 = (_QWORD *)swift_allocObject(&unk_1003F32E8, 56, 7);
  v9 = v7[10];
  v8[2] = v9;
  v10 = v7[11];
  v8[3] = v10;
  v11 = v7[12];
  v8[4] = v11;
  v12 = v7[13];
  v8[5] = v12;
  v13 = v7[14];
  v8[6] = v13;
  v14 = swift_allocObject(&unk_1003F3310, 32, 7);
  *(_QWORD *)(v14 + 16) = a3;
  *(_QWORD *)(v14 + 24) = a4;
  v40 = v14;
  v15 = a4;
  v16 = (_QWORD *)((char *)v4 + qword_10040C558);
  swift_beginAccess((char *)v4 + qword_10040C558, v46, 33, 0);
  v17 = (_QWORD *)swift_allocObject(&unk_1003F3338, 72, 7);
  v17[2] = v9;
  v17[3] = v10;
  v17[4] = v11;
  v17[5] = v12;
  v17[6] = v13;
  v17[7] = sub_10001377C;
  v41 = v8;
  v17[8] = v8;
  swift_retain(v15);
  isUnique = swift_isUniquelyReferenced_nonNull_native(*v16);
  *(_QWORD *)&v44[0] = *v16;
  v18 = *(_QWORD *)&v44[0];
  *v16 = 0x8000000000000000;
  v42 = sub_1000121C0(a1);
  v20 = *(_QWORD *)(v18 + 16);
  v21 = (v19 & 1) == 0;
  v22 = v20 + v21;
  if (__OFADD__(v20, v21))
  {
    __break(1u);
LABEL_9:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v10);
    __break(1u);
    return result;
  }
  v23 = v19;
  type metadata accessor for WiFiP2PSPITransactionType(255);
  v47[0] = v9;
  v47[1] = v10;
  v10 = v24;
  v47[2] = v11;
  v47[3] = v12;
  v47[4] = v13;
  v25 = _s16P2PActivityStateOMa(255, (uint64_t)v47);
  v26 = sub_100011DE4(&qword_10040C9B8, (uint64_t (*)(uint64_t))type metadata accessor for WiFiP2PSPITransactionType, (uint64_t)&unk_10035DC80);
  type metadata accessor for _NativeDictionary(0, v10, v25, v26);
  if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUnique, v22))
  {
    v42 = sub_1000121C0(a1);
    if ((v23 & 1) != (v27 & 1))
      goto LABEL_9;
  }
  v28 = *v16;
  *v16 = *(_QWORD *)&v44[0];
  swift_bridgeObjectRelease(v28);
  v29 = *v16;
  v30 = *v16;
  if ((v23 & 1) != 0)
  {
    swift_bridgeObjectRetain(v30);
  }
  else
  {
    v31 = swift_bridgeObjectRetain(v30);
    v32 = v17[6];
    v37 = *((_OWORD *)v17 + 2);
    *(_OWORD *)isUniquea = *((_OWORD *)v17 + 1);
    ((void (*)(_QWORD *__return_ptr, uint64_t))v17[7])(v47, v31);
    v44[0] = *(_OWORD *)isUniquea;
    v44[1] = v37;
    v45 = v32;
    v33 = _s16P2PActivityStateOMa(0, (uint64_t)v44);
    (*(void (**)(_OWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v33 - 8) + 32))(v44, v47, v33);
    v47[0] = a1;
    _NativeDictionary._insert(at:key:value:)(v42, v47, v44, v29, v10, v25, v26);
  }
  swift_bridgeObjectRelease(v29);
  sub_100006668();
  v35 = v34;
  swift_endAccess(v46);
  swift_release(v40);
  sub_100011830(a1, v35);
  swift_release(v17);
  return swift_release(v41);
}

uint64_t sub_100006F0C(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v3 = swift_retain(v2);
  v1(v3);
  return swift_release(v2);
}

uint64_t sub_100006F38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD, uint64_t, uint64_t, uint64_t))
{
  uint64_t v4;

  return sub_100011EC0(*(_QWORD *)(v4 + 56), *(_QWORD *)(v4 + 64), *(unsigned __int8 *)(v4 + 72), *(_QWORD *)(v4 + 80), *(_BYTE *)(v4 + 88), *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), *(_QWORD *)(v4 + 32), *(_QWORD *)(v4 + 40), *(_QWORD *)(v4 + 48), a1, a2, a3, a4);
}

uint64_t sub_100006F8C(uint64_t (*a1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  uint64_t v1;

  return a1(*(_QWORD *)(v1 + 56), *(unsigned __int8 *)(v1 + 64), *(_QWORD *)(v1 + 72), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48));
}

uint64_t sub_100006FA8()
{
  return sub_100006F8C((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100010F5C);
}

uint64_t sub_100006FB4()
{
  uint64_t v0;

  return sub_1000123E8(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(unsigned __int8 *)(v0 + 72), *(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48));
}

uint64_t sub_100006FCC()
{
  return sub_100006F38((uint64_t)&unk_1003F29B0, (uint64_t)&unk_1003F29D8, (uint64_t)sub_100013778, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))sub_100012CC8);
}

uint64_t sub_100006FF0()
{
  return sub_100006F38((uint64_t)&unk_1003F2A50, (uint64_t)&unk_1003F2A78, (uint64_t)sub_100013778, (uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t))sub_100012DC8);
}

uint64_t sub_100007014(Swift::UInt a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  _BOOL8 v21;
  Swift::Int v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v35;
  uint64_t result;
  __int128 v37;
  char isUnique;
  Swift::Bool isUniquea[16];
  uint64_t v40;
  _QWORD *v41;
  unint64_t v42;
  _OWORD v44[2];
  uint64_t v45;
  _BYTE v46[24];
  _QWORD v47[7];

  v7 = (_QWORD *)*v4;
  v8 = (_QWORD *)swift_allocObject(&unk_1003F3248, 56, 7);
  v9 = v7[10];
  v8[2] = v9;
  v10 = v7[11];
  v8[3] = v10;
  v11 = v7[12];
  v8[4] = v11;
  v12 = v7[13];
  v8[5] = v12;
  v13 = v7[14];
  v8[6] = v13;
  v14 = swift_allocObject(&unk_1003F3270, 32, 7);
  *(_QWORD *)(v14 + 16) = a3;
  *(_QWORD *)(v14 + 24) = a4;
  v40 = v14;
  v15 = a4;
  v16 = (_QWORD *)((char *)v4 + qword_10040C558);
  swift_beginAccess((char *)v4 + qword_10040C558, v46, 33, 0);
  v17 = (_QWORD *)swift_allocObject(&unk_1003F3298, 72, 7);
  v17[2] = v9;
  v17[3] = v10;
  v17[4] = v11;
  v17[5] = v12;
  v17[6] = v13;
  v17[7] = sub_100013778;
  v41 = v8;
  v17[8] = v8;
  swift_retain(v15);
  isUnique = swift_isUniquelyReferenced_nonNull_native(*v16);
  *(_QWORD *)&v44[0] = *v16;
  v18 = *(_QWORD *)&v44[0];
  *v16 = 0x8000000000000000;
  v42 = sub_1000121C0(a1);
  v20 = *(_QWORD *)(v18 + 16);
  v21 = (v19 & 1) == 0;
  v22 = v20 + v21;
  if (__OFADD__(v20, v21))
  {
    __break(1u);
LABEL_9:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v10);
    __break(1u);
    return result;
  }
  v23 = v19;
  type metadata accessor for WiFiP2PSPITransactionType(255);
  v47[0] = v9;
  v47[1] = v10;
  v10 = v24;
  v47[2] = v11;
  v47[3] = v12;
  v47[4] = v13;
  v25 = _s16P2PActivityStateOMa(255, (uint64_t)v47);
  v26 = sub_100011DE4(&qword_10040C9B8, (uint64_t (*)(uint64_t))type metadata accessor for WiFiP2PSPITransactionType, (uint64_t)&unk_10035DC80);
  type metadata accessor for _NativeDictionary(0, v10, v25, v26);
  if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUnique, v22))
  {
    v42 = sub_1000121C0(a1);
    if ((v23 & 1) != (v27 & 1))
      goto LABEL_9;
  }
  v28 = *v16;
  *v16 = *(_QWORD *)&v44[0];
  swift_bridgeObjectRelease(v28);
  v29 = *v16;
  v30 = *v16;
  if ((v23 & 1) != 0)
  {
    swift_bridgeObjectRetain(v30);
  }
  else
  {
    v31 = swift_bridgeObjectRetain(v30);
    v32 = v17[6];
    v37 = *((_OWORD *)v17 + 2);
    *(_OWORD *)isUniquea = *((_OWORD *)v17 + 1);
    ((void (*)(_QWORD *__return_ptr, uint64_t))v17[7])(v47, v31);
    v44[0] = *(_OWORD *)isUniquea;
    v44[1] = v37;
    v45 = v32;
    v33 = _s16P2PActivityStateOMa(0, (uint64_t)v44);
    (*(void (**)(_OWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v33 - 8) + 32))(v44, v47, v33);
    v47[0] = a1;
    _NativeDictionary._insert(at:key:value:)(v42, v47, v44, v29, v10, v25, v26);
  }
  swift_bridgeObjectRelease(v29);
  sub_1000057B4();
  v35 = v34;
  swift_endAccess(v46);
  swift_release(v40);
  sub_100011830(a1, v35);
  swift_release(v17);
  return swift_release(v41);
}

uint64_t sub_100007324(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);

  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(a1 + 32);
  v7 = *(_QWORD *)(a1 + 40);
  swift_retain(v7);
  v8(a2, a3, a4);
  return swift_release(v7);
}

uint64_t sub_10000737C(unsigned int a1, _BYTE *a2, unsigned int a3)
{
  uint64_t v3;

  return sub_100007388(a1, a2, a3, *(uint64_t (**)(_QWORD, uint64_t, unint64_t))(v3 + 16), *(_QWORD *)(v3 + 24), *(void **)(v3 + 32), *(_QWORD *)(v3 + 40));
}

uint64_t sub_100007388(unsigned int a1, _BYTE *a2, unsigned int a3, uint64_t (*a4)(_QWORD, uint64_t, unint64_t), uint64_t a5, void *a6, uint64_t a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v13 = type metadata accessor for Data.Deallocator(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin();
  v16 = (char *)&v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a3 || !a2)
    return a4(a1, 0, 0xC000000000000000);
  if (a6)
  {
    v17 = a7 - (_QWORD)a6;
    v18 = a3;
    if (v17 >= a3)
    {
      memcpy(a6, a2, a3);
      v19 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v14 + 104))(v16, enum case for Data.Deallocator.none(_:), v13);
      v32 = Data.Deallocator._deallocator.getter(v19);
      v21 = v20;
      v22 = type metadata accessor for __DataStorage(0);
      swift_allocObject(v22, *(unsigned int *)(v22 + 48), *(unsigned __int16 *)(v22 + 52));
      swift_retain();
      v23 = __DataStorage.init(bytes:length:copy:deallocator:offset:)(a6, v18, 0, v32, v21, 0);
      v24 = sub_10000EB3C(v23, v18);
      v26 = v25;
      swift_release(v21);
      (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
      a4(a1, v24, v26);
      return sub_10000E614(v24, v26);
    }
  }
  else
  {
    v18 = a3;
  }
  v28 = sub_10021BD08(a2, v18);
  v30 = v29;
  a4(a1, v28, v29);
  return sub_10000E614(v28, v30);
}

double sub_10000756C(unint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;

  return sub_100008814(a1, a2, a3, *(void (**)(char *))(v3 + 16));
}

void sub_100007574(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  char *v5;
  _BYTE v6[384];

  sub_100012C44((uint64_t *)&unk_10040FC10);
  __chkstk_darwin();
  v2 = type metadata accessor for DriverEvent(0);
  __chkstk_darwin();
  __chkstk_darwin();
  v4 = &v6[-v3];
  sub_100007DA4(a1, (uint64_t)&v6[-v3]);
  v5 = (char *)sub_100007668 + 4 * byte_1003601E5[swift_getEnumCaseMultiPayload(v4, v2)];
  __asm { BR              X10 }
}

void sub_100007668()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  const void *v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  sub_100063888(v4, v0 + 1);
  sub_1002AAC18((uint64_t)(v0 + 1));
  sub_100007DA4(v3, v2);
  v5 = swift_retain();
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.error.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    v8 = swift_slowAlloc(22, -1);
    v9 = swift_slowAlloc(64, -1);
    v0[1] = v9;
    *(_DWORD *)v8 = 136315394;
    v10 = WiFiInterface.description.getter();
    v12 = v11;
    *v0 = sub_100013CC8(v10, v11, v0 + 1);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0, v0 + 1);
    swift_release(v1);
    swift_bridgeObjectRelease(v12);
    *(_WORD *)(v8 + 12) = 2080;
    DriverEvent.description.getter();
    v14 = v13;
    *v0 = sub_100013CC8(v15, v13, v0 + 1);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0, v0 + 1);
    swift_bridgeObjectRelease(v14);
    sub_1000F2DA4(v2);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "%s received an unexpected %s", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy(v9, 2, &type metadata for Any[8]);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

  }
  else
  {
    swift_release(v1);

    sub_1000F2DA4(v2);
  }
}

void sub_100007950()
{
  unsigned __int8 v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;
  uint64_t v7;

  v6 = v0;
  v7 = swift_bridgeObjectRetain(v1);
  sub_1002D3E74(v7);
  sub_1000131C4(v1, v2, v5, v4, v3, v6, 1);
  sub_1000131C4(v1, v2, v5, v4, v3, v6, 1);
  JUMPOUT(0x100007930);
}

void sub_1000079A8()
{
  int v0;

  sub_1002D46CC(v0);
  JUMPOUT(0x100007930);
}

void sub_1000079B8()
{
  uint64_t v0;

  sub_1002D4BF0(v0 & 0xFFFFFFFFFFFFLL);
  JUMPOUT(0x100007930);
}

void sub_1000079C8()
{
  unsigned __int8 v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;
  uint64_t v7;

  v6 = v0;
  v7 = swift_bridgeObjectRetain(v5);
  sub_1002D5394(v7, v2, v5);
  sub_1000131C4(v1, v2, v5, v4, v3, v6, 4);
  sub_1000131C4(v1, v2, v5, v4, v3, v6, 4);
  JUMPOUT(0x100007930);
}

void sub_100007A28()
{
  unsigned __int8 v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;

  v6 = v0;
  sub_1000087D0(v1, v2, v5, v4, v3, v0, 5);
  sub_1002D979C();
  sub_1000131C4(v1, v2, v5, v4, v3, v6, 5);
  sub_1000131C4(v1, v2, v5, v4, v3, v6, 5);
  JUMPOUT(0x100007930);
}

void sub_100007A98()
{
  int v0;

  sub_1002D58FC(v0);
  JUMPOUT(0x100007930);
}

void sub_100007AA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;

  v3 = *(_QWORD *)(v1 + 408);
  v2 = *(_QWORD *)(v1 + 416);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, *(_QWORD *)(v2 + 8), v3, &protocol requirements base descriptor for P2PControls, &associated type descriptor for P2PControls.Driver);
  v5 = *(_QWORD *)(swift_getAssociatedConformanceWitness(v2, v3, AssociatedTypeWitness, &protocol requirements base descriptor for InfrastructureController, &associated conformance descriptor for InfrastructureController.P2PControls.Driver: InfrastructureWiFiDriver)+ 8);
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 24);
  v7 = swift_checkMetadataState(0, AssociatedTypeWitness);
  v6(v0 & 0xFFFFFFFFFFFFLL, v7, v5);
  JUMPOUT(0x100007930);
}

void sub_100007B24(uint64_t a1)
{
  sub_1002D9850(a1);
  JUMPOUT(0x100007930);
}

void sub_100007B30()
{
  int v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  BOOL v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t (*v26)(uint64_t, uint64_t);
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(uint64_t, uint64_t);
  uint64_t v34;
  unsigned int v35;
  __int16 *v36;

  if (v6 | v3 | v2 | v5 | v4)
    v8 = 0;
  else
    v8 = v0 == 0;
  if (v8)
  {
    v23 = *(_QWORD *)(v7 + 408);
    v22 = *(_QWORD *)(v7 + 416);
    AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, *(_QWORD *)(v22 + 8), v23, &protocol requirements base descriptor for P2PControls, &associated type descriptor for P2PControls.Driver);
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v22, v23, AssociatedTypeWitness, &protocol requirements base descriptor for InfrastructureController, &associated conformance descriptor for InfrastructureController.P2PControls.Driver: InfrastructureWiFiDriver);
    v26 = *(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 64);
    v27 = swift_checkMetadataState(0, AssociatedTypeWitness);
    v28 = v26(v27, AssociatedConformanceWitness);
    sub_1002D215C(v28 & 1);
  }
  else
  {
    if (v0)
      v9 = 0;
    else
      v9 = v2 == 1;
    if (v9 && (v6 | v3 | v5 | v4) == 0)
    {
      v30 = *(_QWORD *)(v7 + 408);
      v29 = *(_QWORD *)(v7 + 416);
      v31 = swift_getAssociatedTypeWitness(255, *(_QWORD *)(v29 + 8), v30, &protocol requirements base descriptor for P2PControls, &associated type descriptor for P2PControls.Driver);
      v32 = swift_getAssociatedConformanceWitness(v29, v30, v31, &protocol requirements base descriptor for InfrastructureController, &associated conformance descriptor for InfrastructureController.P2PControls.Driver: InfrastructureWiFiDriver);
      v33 = *(uint64_t (**)(uint64_t, uint64_t))(v32 + 80);
      v34 = swift_checkMetadataState(0, v31);
      v35 = v33(v34, v32);
      if ((v35 & 0x10000) != 0)
      {
        v36 = CountryCode.unknown.unsafeMutableAddressor();
        LOBYTE(v35) = *(_BYTE *)v36;
        LOWORD(v36) = *((unsigned __int8 *)v36 + 1);
      }
      else
      {
        LODWORD(v36) = v35 >> 8;
      }
      sub_1002D2C8C(v35 | (unsigned __int16)((_WORD)v36 << 8));
    }
    else
    {
      v12 = *(_QWORD *)(v7 + 408);
      v11 = *(_QWORD *)(v7 + 416);
      v13 = swift_getAssociatedTypeWitness(255, *(_QWORD *)(v11 + 8), v12, &protocol requirements base descriptor for P2PControls, &associated type descriptor for P2PControls.Driver);
      v14 = swift_getAssociatedConformanceWitness(v11, v12, v13, &protocol requirements base descriptor for InfrastructureController, &associated conformance descriptor for InfrastructureController.P2PControls.Driver: InfrastructureWiFiDriver);
      v15 = *(uint64_t (**)(uint64_t, uint64_t))(v14 + 72);
      v16 = swift_checkMetadataState(0, v13);
      v17 = v15(v16, v14);
      sub_1002D22E0(v17, v19, v20, v18 & 0xFFFFFFFFFFFFLL);
      (*(void (**)(uint64_t))(*(_QWORD *)(v14 + 8) + 32))(v16);
      v21 = *(unsigned __int8 *)(v1 + *(_QWORD *)(*(_QWORD *)v1 + 592));
      if ((_DWORD)v21 != 3)
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 32))(v21, v16, v14);
    }
  }
  JUMPOUT(0x100007930);
}

uint64_t sub_100007D44(uint64_t result)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 40);
  v4 = *(_QWORD *)(v3 + 128);
  if (v4)
  {
    v5 = result & 0xFFFFFFFFFFFFLL;
    swift_retain(*(_QWORD *)(v3 + 128));
    sub_10000D7A4(v5, v2);
    return swift_release(v4);
  }
  return result;
}

uint64_t sub_100007DA4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DriverEvent(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t initializeWithCopy for DriverEvent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unsigned __int8 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  __int128 v42;
  int *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  void *v74;
  id v75;
  uint64_t v76;
  void (*v77)(uint64_t, uint64_t, uint64_t);
  uint64_t v78;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char v114;
  char v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;

  v3 = a3;
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  switch(EnumCaseMultiPayload)
  {
    case 2:
      v11 = *(_QWORD *)a2;
      v12 = *(_QWORD *)(a2 + 8);
      v13 = *(_QWORD *)(a2 + 16);
      v14 = *(_QWORD *)(a2 + 24);
      v15 = *(_QWORD *)(a2 + 32);
      v16 = *(_BYTE *)(a2 + 41);
      v17 = *(_BYTE *)(a2 + 40);
      sub_1000087D0(v11, v12, v13, v14, v15, v17, v16);
      *(_QWORD *)a1 = v11;
      *(_QWORD *)(a1 + 8) = v12;
      *(_QWORD *)(a1 + 16) = v13;
      *(_QWORD *)(a1 + 24) = v14;
      *(_QWORD *)(a1 + 32) = v15;
      *(_BYTE *)(a1 + 40) = v17;
      *(_BYTE *)(a1 + 41) = v16;
      v8 = a1;
      v9 = v3;
      v10 = 2;
      goto LABEL_17;
    case 1:
      v18 = type metadata accessor for DriverEvent.AWDL(0);
      switch(swift_getEnumCaseMultiPayload(a2, v18))
      {
        case 1u:
          *(_BYTE *)a1 = *(_BYTE *)a2;
          v19 = *(_QWORD *)(a2 + 8);
          v20 = *(_QWORD *)(a2 + 16);
          v21 = *(_QWORD *)(a2 + 24);
          sub_100063D24(v19, v20, v21);
          *(_QWORD *)(a1 + 8) = v19;
          *(_QWORD *)(a1 + 16) = v20;
          *(_QWORD *)(a1 + 24) = v21;
          v22 = *(int *)(sub_100012C44(&qword_100405BB0) + 48);
          v23 = a1 + v22;
          v24 = a2 + v22;
          *(_DWORD *)v23 = *(_DWORD *)(a2 + v22);
          *(_WORD *)(v23 + 4) = *(_WORD *)(a2 + v22 + 4);
          *(_DWORD *)(v23 + 6) = *(_DWORD *)(a2 + v22 + 6);
          *(_WORD *)(v23 + 10) = *(_WORD *)(a2 + v22 + 10);
          *(_DWORD *)(v23 + 12) = *(_DWORD *)(a2 + v22 + 12);
          *(_WORD *)(v23 + 16) = *(_WORD *)(a2 + v22 + 16);
          *(_DWORD *)(v23 + 20) = *(_DWORD *)(a2 + v22 + 20);
          v25 = (int *)type metadata accessor for AWDLActionFrame.Header(0);
          v26 = v25[8];
          v27 = v23 + v26;
          v28 = v24 + v26;
          v29 = type metadata accessor for DispatchTimeInterval(0);
          v30 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 16);
          v30(v27, v28, v29);
          v30(v23 + v25[9], v24 + v25[9], v29);
          *(_DWORD *)(v23 + v25[10]) = *(_DWORD *)(v24 + v25[10]);
          *(_DWORD *)(v23 + v25[11]) = *(_DWORD *)(v24 + v25[11]);
          *(_QWORD *)(v23 + v25[12]) = *(_QWORD *)(v24 + v25[12]);
          *(_DWORD *)(v23 + v25[13]) = *(_DWORD *)(v24 + v25[13]);
          *(_QWORD *)(v23 + v25[14]) = *(_QWORD *)(v24 + v25[14]);
          *(_DWORD *)(v23 + v25[15]) = *(_DWORD *)(v24 + v25[15]);
          v31 = v25[16];
          v32 = *(_QWORD *)(v24 + v31);
          *(_QWORD *)(v23 + v31) = v32;
          swift_bridgeObjectRetain(v32);
          v33 = a1;
          v34 = v18;
          v35 = 1;
          goto LABEL_15;
        case 2u:
          v36 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + 16) = v36;
          *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
          *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
          *(_BYTE *)(a1 + 42) = *(_BYTE *)(a2 + 42);
          *(_WORD *)(a1 + 43) = *(_WORD *)(a2 + 43);
          *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
          *(_BYTE *)(a1 + 52) = *(_BYTE *)(a2 + 52);
          *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
          *(_QWORD *)(a1 + 60) = *(_QWORD *)(a2 + 60);
          *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
          *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
          v37 = *(_QWORD *)(a2 + 80);
          v38 = *(_QWORD *)(a2 + 88);
          *(_QWORD *)(a1 + 80) = v37;
          *(_QWORD *)(a1 + 88) = v38;
          v40 = *(_QWORD *)(a2 + 96);
          v39 = *(_QWORD *)(a2 + 104);
          *(_QWORD *)(a1 + 96) = v40;
          *(_QWORD *)(a1 + 104) = v39;
          swift_bridgeObjectRetain(v37);
          swift_bridgeObjectRetain(v38);
          swift_bridgeObjectRetain(v40);
          swift_bridgeObjectRetain(v39);
          v33 = a1;
          v34 = v18;
          v35 = 2;
          goto LABEL_15;
        case 3u:
          *(_BYTE *)a1 = *(_BYTE *)a2;
          *(_WORD *)(a1 + 1) = *(_WORD *)(a2 + 1);
          *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
          *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
          *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
          *(_WORD *)(a1 + 36) = *(_WORD *)(a2 + 36);
          *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
          *(_WORD *)(a1 + 44) = *(_WORD *)(a2 + 44);
          v41 = *(_DWORD *)(a2 + 48);
          *(_WORD *)(a1 + 52) = *(_WORD *)(a2 + 52);
          *(_DWORD *)(a1 + 48) = v41;
          *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
          *(_WORD *)(a1 + 60) = *(_WORD *)(a2 + 60);
          v42 = *(_OWORD *)(a2 + 80);
          *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
          *(_OWORD *)(a1 + 80) = v42;
          *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
          *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
          v43 = (int *)type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0);
          v44 = v43[20];
          v45 = a1 + v44;
          v46 = a2 + v44;
          v47 = type metadata accessor for DispatchTimeInterval(0);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 16))(v45, v46, v47);
          *(_QWORD *)(a1 + v43[21]) = *(_QWORD *)(a2 + v43[21]);
          *(_QWORD *)(a1 + v43[22]) = *(_QWORD *)(a2 + v43[22]);
          *(_QWORD *)(a1 + v43[23]) = *(_QWORD *)(a2 + v43[23]);
          *(_QWORD *)(a1 + v43[24]) = *(_QWORD *)(a2 + v43[24]);
          *(_QWORD *)(a1 + v43[25]) = *(_QWORD *)(a2 + v43[25]);
          *(_QWORD *)(a1 + v43[26]) = *(_QWORD *)(a2 + v43[26]);
          *(_QWORD *)(a1 + v43[27]) = *(_QWORD *)(a2 + v43[27]);
          *(_QWORD *)(a1 + v43[28]) = *(_QWORD *)(a2 + v43[28]);
          *(_WORD *)(a1 + v43[29]) = *(_WORD *)(a2 + v43[29]);
          *(_BYTE *)(a1 + v43[30]) = *(_BYTE *)(a2 + v43[30]);
          *(_BYTE *)(a1 + v43[31]) = *(_BYTE *)(a2 + v43[31]);
          *(_BYTE *)(a1 + v43[32]) = *(_BYTE *)(a2 + v43[32]);
          *(_BYTE *)(a1 + v43[33]) = *(_BYTE *)(a2 + v43[33]);
          *(_BYTE *)(a1 + v43[34]) = *(_BYTE *)(a2 + v43[34]);
          *(_BYTE *)(a1 + v43[35]) = *(_BYTE *)(a2 + v43[35]);
          v48 = v43[36];
          v49 = (_QWORD *)(a1 + v48);
          v50 = (_QWORD *)(a2 + v48);
          v137 = v50[1];
          *v49 = *v50;
          v49[1] = v137;
          *(_BYTE *)(a1 + v43[37]) = *(_BYTE *)(a2 + v43[37]);
          *(_QWORD *)(a1 + v43[38]) = *(_QWORD *)(a2 + v43[38]);
          *(_QWORD *)(a1 + v43[39]) = *(_QWORD *)(a2 + v43[39]);
          *(_QWORD *)(a1 + v43[40]) = *(_QWORD *)(a2 + v43[40]);
          *(_QWORD *)(a1 + v43[41]) = *(_QWORD *)(a2 + v43[41]);
          v51 = *(int *)(type metadata accessor for AWDLStatistics.LowLatencyStatistics(0) + 20);
          v52 = a1 + v51;
          v53 = a2 + v51;
          v54 = *(_OWORD *)(v53 + 176);
          *(_OWORD *)(v52 + 160) = *(_OWORD *)(v53 + 160);
          *(_OWORD *)(v52 + 176) = v54;
          *(_OWORD *)(v52 + 192) = *(_OWORD *)(v53 + 192);
          v55 = *(_OWORD *)(v53 + 112);
          *(_OWORD *)(v52 + 96) = *(_OWORD *)(v53 + 96);
          *(_OWORD *)(v52 + 112) = v55;
          v56 = *(_OWORD *)(v53 + 144);
          *(_OWORD *)(v52 + 128) = *(_OWORD *)(v53 + 128);
          *(_OWORD *)(v52 + 144) = v56;
          v57 = *(_OWORD *)(v53 + 48);
          *(_OWORD *)(v52 + 32) = *(_OWORD *)(v53 + 32);
          *(_OWORD *)(v52 + 48) = v57;
          v58 = *(_OWORD *)(v53 + 80);
          *(_OWORD *)(v52 + 64) = *(_OWORD *)(v53 + 64);
          *(_OWORD *)(v52 + 80) = v58;
          v59 = *(_OWORD *)(v53 + 16);
          *(_OWORD *)v52 = *(_OWORD *)v53;
          *(_OWORD *)(v52 + 16) = v59;
          v60 = *(_QWORD *)(v53 + 216);
          *(_QWORD *)(v52 + 208) = *(_QWORD *)(v53 + 208);
          *(_QWORD *)(v52 + 216) = v60;
          v61 = *(_QWORD *)(v53 + 224);
          v62 = *(_QWORD *)(v53 + 232);
          *(_QWORD *)(v52 + 224) = v61;
          *(_QWORD *)(v52 + 232) = v62;
          v63 = *(_QWORD *)(v53 + 240);
          v64 = *(_QWORD *)(v53 + 248);
          *(_QWORD *)(v52 + 240) = v63;
          *(_QWORD *)(v52 + 248) = v64;
          v117 = v3;
          v66 = *(_QWORD *)(v53 + 256);
          v65 = *(_QWORD *)(v53 + 264);
          *(_QWORD *)(v52 + 256) = v66;
          *(_QWORD *)(v52 + 264) = v65;
          v67 = *(_QWORD *)(v53 + 272);
          v116 = *(_QWORD *)(v53 + 280);
          *(_QWORD *)(v52 + 272) = v67;
          *(_QWORD *)(v52 + 280) = v116;
          v119 = *(_QWORD *)(v53 + 288);
          v121 = *(_QWORD *)(v53 + 296);
          *(_QWORD *)(v52 + 288) = v119;
          *(_QWORD *)(v52 + 296) = v121;
          v123 = *(_QWORD *)(v53 + 304);
          v125 = *(_QWORD *)(v53 + 312);
          *(_QWORD *)(v52 + 304) = v123;
          *(_QWORD *)(v52 + 312) = v125;
          v127 = *(_QWORD *)(v53 + 320);
          v129 = *(_QWORD *)(v53 + 328);
          *(_QWORD *)(v52 + 320) = v127;
          *(_QWORD *)(v52 + 328) = v129;
          v131 = *(_QWORD *)(v53 + 336);
          v133 = *(_QWORD *)(v53 + 344);
          *(_QWORD *)(v52 + 336) = v131;
          *(_QWORD *)(v52 + 344) = v133;
          v135 = *(_QWORD *)(v53 + 352);
          *(_QWORD *)(v52 + 352) = v135;
          swift_bridgeObjectRetain(v137);
          swift_bridgeObjectRetain(v60);
          swift_bridgeObjectRetain(v61);
          swift_bridgeObjectRetain(v62);
          swift_bridgeObjectRetain(v63);
          swift_bridgeObjectRetain(v64);
          v68 = v66;
          v3 = v117;
          swift_bridgeObjectRetain(v68);
          swift_bridgeObjectRetain(v65);
          swift_bridgeObjectRetain(v67);
          swift_bridgeObjectRetain(v116);
          swift_bridgeObjectRetain(v119);
          swift_bridgeObjectRetain(v121);
          swift_bridgeObjectRetain(v123);
          swift_bridgeObjectRetain(v125);
          swift_bridgeObjectRetain(v127);
          swift_bridgeObjectRetain(v129);
          swift_bridgeObjectRetain(v131);
          swift_bridgeObjectRetain(v133);
          swift_bridgeObjectRetain(v135);
          v33 = a1;
          v34 = v18;
          v35 = 3;
          goto LABEL_15;
        case 6u:
          v69 = *(_QWORD *)a2;
          v70 = *(_QWORD *)(a2 + 8);
          v71 = *(_QWORD *)(a2 + 16);
          v72 = *(_QWORD *)(a2 + 24);
          v73 = *(_BYTE *)(a2 + 32);
          sub_100061540(v69, v70, v71, v72, v73);
          *(_QWORD *)a1 = v69;
          *(_QWORD *)(a1 + 8) = v70;
          *(_QWORD *)(a1 + 16) = v71;
          *(_QWORD *)(a1 + 24) = v72;
          *(_BYTE *)(a1 + 32) = v73;
          v33 = a1;
          v34 = v18;
          v35 = 6;
          goto LABEL_15;
        case 8u:
          v74 = *(void **)a2;
          *(_QWORD *)a1 = *(_QWORD *)a2;
          *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
          v75 = v74;
          v33 = a1;
          v34 = v18;
          v35 = 8;
          goto LABEL_15;
        case 9u:
          v76 = type metadata accessor for DispatchTimeInterval(0);
          v77 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v76 - 8) + 16);
          v77(a1, a2, v76);
          v78 = type metadata accessor for AWDLIdleActivity(0);
          v77(a1 + *(int *)(v78 + 20), a2 + *(int *)(v78 + 20), v76);
          v33 = a1;
          v34 = v18;
          v35 = 9;
LABEL_15:
          swift_storeEnumTagMultiPayload(v33, v34, v35);
          break;
        default:
          memcpy((void *)a1, (const void *)a2, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
          break;
      }
      v8 = a1;
      v9 = v3;
      v10 = 1;
      goto LABEL_17;
    case 0:
      v109 = *(_QWORD *)(a2 + 8);
      v110 = *(_QWORD *)a2;
      v107 = *(_QWORD *)(a2 + 24);
      v108 = *(_QWORD *)(a2 + 16);
      v106 = *(_QWORD *)(a2 + 32);
      v105 = *(_QWORD *)(a2 + 40);
      v104 = *(_QWORD *)(a2 + 48);
      v111 = *(_QWORD *)(a2 + 56);
      v134 = *(_QWORD *)(a2 + 80);
      v136 = *(_QWORD *)(a2 + 72);
      v130 = *(_QWORD *)(a2 + 96);
      v132 = *(_QWORD *)(a2 + 88);
      v126 = *(_QWORD *)(a2 + 112);
      v128 = *(_QWORD *)(a2 + 104);
      v122 = *(_QWORD *)(a2 + 128);
      v124 = *(_QWORD *)(a2 + 120);
      v118 = *(_QWORD *)(a2 + 144);
      v120 = *(_QWORD *)(a2 + 136);
      v80 = *(_QWORD *)(a2 + 152);
      v81 = *(_QWORD *)(a2 + 160);
      v82 = *(_QWORD *)(a2 + 168);
      v83 = *(_QWORD *)(a2 + 176);
      v84 = *(_QWORD *)(a2 + 184);
      v85 = *(_QWORD *)(a2 + 192);
      v86 = *(_QWORD *)(a2 + 200);
      v87 = *(_QWORD *)(a2 + 208);
      v88 = *(_QWORD *)(a2 + 216);
      v89 = *(_QWORD *)(a2 + 224);
      v90 = *(_QWORD *)(a2 + 232);
      v91 = *(_QWORD *)(a2 + 240);
      v92 = *(_QWORD *)(a2 + 248);
      v93 = *(_QWORD *)(a2 + 256);
      v94 = *(_QWORD *)(a2 + 264);
      v95 = *(_QWORD *)(a2 + 272);
      v96 = *(_QWORD *)(a2 + 280);
      v97 = *(_QWORD *)(a2 + 288);
      v98 = *(_QWORD *)(a2 + 296);
      v99 = *(_QWORD *)(a2 + 304);
      v100 = *(_QWORD *)(a2 + 312);
      v101 = *(_QWORD *)(a2 + 320);
      v102 = *(_QWORD *)(a2 + 328);
      v103 = *(_QWORD *)(a2 + 336);
      v112 = *(_QWORD *)(a2 + 344);
      v113 = *(_QWORD *)(a2 + 352);
      v114 = *(_BYTE *)(a2 + 360);
      v115 = *(_BYTE *)(a2 + 361);
      v7 = *(_QWORD *)(a2 + 64);
      sub_100112E60(v110, v109, v108, v107, v106, v105, v104, v111, v7, v136, v134, v132, v130, v128, v126, v124, v122, v120, v118,
        v80,
        v81,
        v82,
        v83,
        v84,
        v85,
        v86,
        v87,
        v88,
        v89,
        v90,
        v91,
        v92,
        v93,
        v94,
        v95,
        v96,
        v97,
        v98,
        v99,
        v100,
        v101,
        v102,
        v103,
        v112,
        v113,
        v114,
        v115);
      *(_QWORD *)a1 = v110;
      *(_QWORD *)(a1 + 8) = v109;
      *(_QWORD *)(a1 + 16) = v108;
      *(_QWORD *)(a1 + 24) = v107;
      *(_QWORD *)(a1 + 32) = v106;
      *(_QWORD *)(a1 + 40) = v105;
      *(_QWORD *)(a1 + 48) = v104;
      *(_QWORD *)(a1 + 56) = v111;
      *(_QWORD *)(a1 + 64) = v7;
      *(_QWORD *)(a1 + 72) = v136;
      *(_QWORD *)(a1 + 80) = v134;
      *(_QWORD *)(a1 + 88) = v132;
      *(_QWORD *)(a1 + 96) = v130;
      *(_QWORD *)(a1 + 104) = v128;
      *(_QWORD *)(a1 + 112) = v126;
      *(_QWORD *)(a1 + 120) = v124;
      *(_QWORD *)(a1 + 128) = v122;
      *(_QWORD *)(a1 + 136) = v120;
      *(_QWORD *)(a1 + 144) = v118;
      *(_QWORD *)(a1 + 152) = v80;
      *(_QWORD *)(a1 + 160) = v81;
      *(_QWORD *)(a1 + 168) = v82;
      *(_QWORD *)(a1 + 176) = v83;
      *(_QWORD *)(a1 + 184) = v84;
      *(_QWORD *)(a1 + 192) = v85;
      *(_QWORD *)(a1 + 200) = v86;
      *(_QWORD *)(a1 + 208) = v87;
      *(_QWORD *)(a1 + 216) = v88;
      *(_QWORD *)(a1 + 224) = v89;
      *(_QWORD *)(a1 + 232) = v90;
      *(_QWORD *)(a1 + 240) = v91;
      *(_QWORD *)(a1 + 248) = v92;
      *(_QWORD *)(a1 + 256) = v93;
      *(_QWORD *)(a1 + 264) = v94;
      *(_QWORD *)(a1 + 272) = v95;
      *(_QWORD *)(a1 + 280) = v96;
      *(_QWORD *)(a1 + 288) = v97;
      *(_QWORD *)(a1 + 296) = v98;
      *(_QWORD *)(a1 + 304) = v99;
      *(_QWORD *)(a1 + 312) = v100;
      *(_QWORD *)(a1 + 320) = v101;
      *(_QWORD *)(a1 + 328) = v102;
      *(_QWORD *)(a1 + 336) = v103;
      *(_QWORD *)(a1 + 344) = v112;
      *(_QWORD *)(a1 + 352) = v113;
      *(_BYTE *)(a1 + 360) = v114;
      *(_BYTE *)(a1 + 361) = v115;
      v8 = a1;
      v9 = v3;
      v10 = 0;
LABEL_17:
      swift_storeEnumTagMultiPayload(v8, v9, v10);
      return a1;
  }
  memcpy((void *)a1, (const void *)a2, *(_QWORD *)(*(_QWORD *)(v3 - 8) + 64));
  return a1;
}

uint64_t sub_1000087D0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int8 a6, char a7)
{
  switch(a7)
  {
    case 5:
      return sub_1000C5D18(a2, a3, a4, a5, a6);
    case 4:
      return swift_bridgeObjectRetain(a3);
    case 1:
      return swift_bridgeObjectRetain(result);
  }
  return result;
}

double sub_100008814(unint64_t a1, uint64_t a2, unint64_t a3, void (*a4)(char *))
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  double result;

  v5 = sub_100008A48(a1, a2, a3);
  v6 = v5[2];
  if (v6)
  {
    v7 = *(_QWORD *)(type metadata accessor for DriverEvent(0) - 8);
    v8 = (char *)v5 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
    v9 = *(_QWORD *)(v7 + 72);
    do
    {
      a4(v8);
      v8 += v9;
      --v6;
    }
    while (v6);
  }
  *(_QWORD *)&result = swift_bridgeObjectRelease(v5).n128_u64[0];
  return result;
}

uint64_t sub_100008890(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t v7;
  char *v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD v18[2];
  uint64_t v19;
  uint64_t v20;

  type metadata accessor for DriverEvent(0);
  __chkstk_darwin();
  v8 = (char *)v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100007DA4(a1, (uint64_t)v8);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v18[1] = a4;
    v12 = (uint8_t *)swift_slowAlloc(12, -1);
    v13 = swift_slowAlloc(32, -1);
    v20 = v13;
    *(_DWORD *)v12 = 136315138;
    DriverEvent.shortDescription.getter();
    v15 = v14;
    v19 = sub_100013CC8(v16, v14, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20);
    swift_bridgeObjectRelease(v15);
    sub_1000F2DA4((uint64_t)v8);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Received event %s", v12, 0xCu);
    swift_arrayDestroy(v13, 1, &type metadata for Any[8]);
    swift_slowDealloc(v13, -1, -1);
    swift_slowDealloc(v12, -1, -1);

    return a3(a1);
  }
  else
  {

    sub_1000F2DA4((uint64_t)v8);
    return a3(a1);
  }
}

_QWORD *sub_100008A48(unint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  __int16 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _BYTE *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  int v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  __int16 v148;
  __int16 v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  __int16 v158;
  unint64_t v159;
  char v160;
  __int16 v161;
  unint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unint64_t v168;
  uint64_t v169;
  unsigned int v170;
  unint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  _BYTE *v177;
  uint64_t v178;
  uint64_t v179;
  unint64_t v180;
  uint64_t v181;
  unint64_t v182;
  unsigned __int8 v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  void *v191;
  char v192;
  uint64_t KeyPath;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  unsigned int v198;
  uint64_t v199;
  unsigned int v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  void *v209;
  unint64_t v210;
  unint64_t v211;
  unint64_t v212;
  unint64_t v213;
  unsigned int v214;
  unint64_t v215;
  unsigned __int16 v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  void *v223;
  char v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  __int8 v228;
  unint64_t v229;
  unint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  void *v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  __int8 v243;
  unint64_t v244;
  unint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  unint64_t v254;
  int v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  char v261;
  uint64_t v262;
  int v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  char v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  __int8 v274;
  unint64_t v275;
  unint64_t v276;
  unint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  unint64_t v287;
  uint64_t v288;
  uint64_t v289;
  unint64_t v290;
  __int8 v291;
  __int8 v292;
  unint64_t v293;
  unint64_t v294;
  unint64_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  void *v302;
  void *v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  unint64_t v308;
  char v309;
  unint64_t v310;
  unint64_t v311;
  unint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  void *v319;
  uint64x2_t v320;
  uint64_t v321;
  unint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64x2_t v327;
  unsigned int v328;
  char v329;
  uint64_t v330;
  char v331;
  int8x8_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  void *v338;
  char v339;
  uint64_t v340;
  unint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t v347;
  void *v348;
  __int128 *v349;
  __int8 v350;
  uint64_t v351;
  unint64_t v352;
  unint64_t v353;
  unint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  void *v361;
  uint64_t v362;
  int v363;
  uint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  void *v374;
  uint64_t v375;
  uint64_t v376;
  unint64_t v377;
  unint64_t v378;
  unint64_t v379;
  unint64_t v380;
  uint64_t v381;
  uint64_t v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  int v389;
  unsigned __int8 v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  char v397;
  unsigned int v398;
  uint64_t v399;
  unint64_t v400;
  unint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  unsigned __int16 v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  void *v414;
  char v415;
  char v416;
  char v417;
  char v418;
  char v419;
  char v420;
  char v421;
  char v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  unint64_t v430;
  uint64_t v431;
  _OWORD *v432;
  __int128 v433;
  __int128 v434;
  __int128 v435;
  __int128 v436;
  uint64_t v437;
  unint64_t v438;
  int v439;
  __int16 v440;
  __int16 v441;
  unint64_t v442;
  uint64_t v443;
  unsigned int v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  void *v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t v456;
  unint64_t v457;
  unsigned __int16 v458;
  char v459;
  unint64_t v460;
  unsigned __int16 v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  unint64_t v469;
  uint64_t v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  unint64_t v475;
  uint64_t v476;
  uint64_t v477;
  _QWORD *v478;
  __int128 *v479;
  __int128 v480;
  uint64_t v481;
  unint64_t v482;
  unsigned int v483;
  char v484;
  unsigned int v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  uint64_t v490;
  uint64_t v491;
  _BYTE *v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  unsigned int v499;
  unsigned int v500;
  unsigned int v501;
  unsigned int v502;
  unsigned int v503;
  unsigned int v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  uint64_t v512;
  _QWORD *v513;
  _QWORD *v514;
  uint64_t v515;
  _BYTE *v516;
  uint64_t v517;
  uint64_t v518;
  unint64_t v519;
  uint64_t v520;
  uint64_t v521;
  char v522;
  char v523;
  _BYTE *v524;
  uint64_t v525;
  uint64_t v526;
  unint64_t v527;
  uint64_t v528;
  uint64_t v529;
  _BYTE *v530;
  uint64_t v531;
  uint64_t v532;
  unint64_t v533;
  uint64_t v534;
  uint64_t v535;
  int v536;
  char v537;
  char v538;
  unint64_t v539;
  unint64_t v540;
  NSString v541;
  char v542;
  NSString v543;
  char v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  char v561;
  uint64_t v562;
  uint64_t v563;
  uint64_t v564;
  uint64_t v565;
  uint64_t v566;
  unint64_t v567;
  char v568;
  unsigned int v569;
  uint64_t v570;
  unint64_t v571;
  unint64_t v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t v575;
  uint64_t v576;
  uint64_t v577;
  uint64_t v578;
  _QWORD *v579;
  uint64_t v580;
  uint64_t v581;
  void (*v582)(void);
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  uint64_t v586;
  uint64_t v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t v597;
  uint64_t v598;
  _QWORD *v599;
  _QWORD *v600;
  _OWORD *v601;
  _OWORD *v602;
  _OWORD *v603;
  _QWORD *v604;
  _OWORD *v605;
  _QWORD *v606;
  _OWORD *v607;
  _QWORD *v608;
  _QWORD *v609;
  _QWORD *v610;
  _QWORD *v611;
  uint64_t *v612;
  uint64_t v613;
  uint64_t v614;
  unint64_t v615;
  uint64_t v616;
  uint64_t v617;
  uint64_t v618;
  uint64_t v619;
  uint64_t v620;
  uint64_t v621;
  uint64_t v622;
  uint64_t v623;
  _BYTE *v624;
  uint64_t v625;
  NSObject *v626;
  os_log_type_t v627;
  uint64_t v628;
  uint64_t v629;
  unint64_t v630;
  uint64_t v631;
  uint64_t v632;
  unint64_t v633;
  unint64_t v634;
  uint64_t v635;
  uint64_t v636;
  char v637;
  uint64_t v638;
  uint64_t v639;
  char v640;
  uint64_t v641;
  unint64_t v642;
  uint64_t v643;
  uint64_t v644;
  uint64_t v645;
  uint64_t v646;
  uint64_t v647;
  uint64_t v648;
  uint64_t v649;
  Swift::String v650;
  void *object;
  Swift::String v652;
  Swift::String v653;
  void *v654;
  Swift::String v655;
  uint64_t v656;
  uint64_t v657;
  _QWORD *v658;
  _QWORD *v659;
  __int128 *v660;
  _OWORD *v661;
  _QWORD *v662;
  _QWORD *v663;
  _OWORD *v664;
  _OWORD *v665;
  _QWORD *v666;
  int v667;
  int v668;
  _QWORD *v669;
  uint64_t v670;
  _OWORD *v671;
  uint64_t v672;
  uint64_t v673;
  uint64_t v674;
  uint64_t v675;
  uint64_t v676;
  uint64_t v677;
  uint64_t v678;
  uint64_t v679;
  uint64_t v680;
  uint64_t v681;
  uint64_t v682;
  uint64_t v683;
  int v684;
  int v685;
  int v686;
  int v687;
  int v688;
  int v689;
  int v690;
  int v691;
  int v692;
  int v693;
  int v694;
  uint64_t v695;
  uint64_t v696;
  uint64_t v697;
  unint64_t v698;
  unint64_t v699;
  unint64_t v700;
  unint64_t v701;
  unint64_t v702;
  _QWORD *v703;
  int8x16_t v704;
  unint64_t v705;
  _BYTE *v706;
  unint64_t v707;
  uint64_t v708;
  __int128 v709;
  uint64_t v710;
  __int128 v711;
  uint64_t v712;
  __int128 v713;
  uint64_t v714;
  __int128 v715;
  uint64_t v716;
  __int128 v717;
  uint64_t v718;
  __int128 v719;
  uint64_t v720;
  __int128 v721;
  uint64_t v722;
  __int128 v723;
  uint64_t v724;
  __int128 v725;
  uint64_t v726;
  __int128 v727;
  uint64_t v728;
  __int128 v729;
  uint64_t v730;
  __int128 v731;
  uint64_t v732;
  __int128 v733;
  uint64_t v734;
  __int128 v735;
  uint64_t v736;
  __int128 v737;
  uint64_t v738;
  __int128 v739;
  uint64_t v740;
  __int128 v741;
  uint64_t v742;
  __int128 v743;
  uint64_t v744;
  __int128 v745;
  uint64_t v746;
  __int128 v747;
  uint64_t v748;
  __int128 v749;
  uint64_t v750;
  __int128 v751;
  uint64_t v752;
  __int128 v753;
  uint64_t v754;
  __int128 v755;
  uint64_t v756;
  __int128 v757;
  uint64_t v758;
  __int128 v759;
  uint64_t v760;
  __int128 v761;
  uint64_t v762;
  __int128 v763;
  uint64_t v764;
  __int128 v765;
  uint64_t v766;
  __int128 v767;
  uint64_t v768;
  __int128 v769;
  uint64_t v770;
  __int128 v771;
  uint64_t v772;
  __int128 v773;
  uint64_t v774;
  __int128 v775;
  uint64_t v776;
  __int128 v777;
  uint64_t v778;
  __int128 v779;
  uint64_t v780;
  __int128 v781;
  uint64_t v782;
  __int128 v783;
  uint64_t v784;
  __int128 v785;
  uint64_t v786;
  __int128 v787;
  uint64_t v788;
  __int128 v789;
  uint64_t v790;
  __int128 v791;
  uint64_t v792;
  __int128 v793;
  uint64_t v794;
  __int128 v795;
  uint64_t v796;
  __int128 v797;
  uint64_t v798;
  __int128 v799;
  uint64_t v800;
  __int128 v801;
  uint64_t v802;
  __int128 v803;
  uint64_t v804;
  __int128 v805;
  uint64_t v806;
  __int128 v807;
  uint64_t v808;
  __int128 v809;
  uint64_t v810;
  __int128 v811;
  uint64_t v812;
  __int128 v813;
  uint64_t v814;
  __int128 v815;
  uint64_t v816;
  __int128 v817;
  uint64_t v818;
  __int128 v819;
  uint64_t v820;
  __int128 v821;
  uint64_t v822;
  __int128 v823;
  uint64_t v824;
  __int128 v825;
  uint64_t v826;
  __int128 v827;
  uint64_t v828;
  __int128 v829;
  uint64_t v830;
  __int128 v831;
  uint64_t v832;
  __int128 v833;
  uint64_t v834;
  __int128 v835;
  uint64_t v836;
  __int128 v837;
  uint64_t v838;
  __int128 v839;
  uint64_t v840;
  __int128 v841;
  uint64_t v842;
  __int128 v843;
  uint64_t v844;
  __int128 v845;
  uint64_t v846;
  __int128 v847;
  uint64_t v848;
  __int128 v849;
  uint64_t v850;
  __int128 v851;
  uint64_t v852;
  __int128 v853;
  uint64_t v854;
  __int128 v855;
  uint64_t v856;
  __int128 v857;
  uint64_t v858;
  __int128 v859;
  uint64_t v860;
  __int128 v861;
  uint64_t v862;
  __int128 v863;
  uint64_t v864;
  __int128 v865;
  uint64_t v866;
  __int128 v867;
  uint64_t v868;
  __int128 v869;
  uint64_t v870;
  __int128 v871;
  uint64_t v872;
  __int128 v873;
  uint64_t v874;
  __int128 v875;
  uint64_t v876;
  __int128 v877;
  uint64_t v878;
  __int128 v879;
  uint64_t v880;
  __int128 v881;
  uint64_t v882;
  __int128 v883;
  uint64_t v884;
  __int128 v885;
  uint64_t v886;
  __int128 v887;
  uint64_t v888;
  __int128 v889;
  uint64_t v890;
  __int128 v891;
  uint64_t v892;
  __int128 v893;
  uint64_t v894;
  __int128 v895;
  uint64_t v896;
  __int128 v897;
  uint64_t v898;
  __int128 v899;
  uint64_t v900;
  __int128 v901;
  uint64_t v902;
  __int128 v903;
  uint64_t v904;
  __int128 v905;
  uint64_t v906;
  __int128 v907;
  uint64_t v908;
  __int128 v909;
  uint64_t v910;
  __int128 v911;
  uint64_t v912;
  __int128 v913;
  uint64_t v914;
  __int128 v915;
  uint64_t v916;
  __int128 v917;
  uint64_t v918;
  __int128 v919;
  uint64_t v920;
  __int128 v921;
  uint64_t v922;
  __int128 v923;
  uint64_t v924;
  __int128 v925;
  uint64_t v926;
  __int128 v927;
  uint64_t v928;
  __int128 v929;
  uint64_t v930;
  __int128 v931;
  uint64_t v932;
  __int128 v933;
  uint64_t v934;
  __int128 v935;
  uint64_t v936;
  __int128 v937;
  uint64_t v938;
  __int128 v939;
  uint64_t v940;
  __int128 v941;
  uint64_t v942;
  __int128 v943;
  uint64_t v944;
  __int128 v945;
  uint64_t v946;
  __int128 v947;
  uint64_t v948;
  __int128 v949;
  uint64_t v950;
  __int128 v951;
  uint64_t v952;
  __int128 v953;
  uint64_t v954;
  __int128 v955;
  uint64_t v956;
  __int128 v957;
  uint64_t v958;
  __int128 v959;
  uint64_t v960;
  __int128 v961;
  uint64_t v962;
  __int128 v963;
  uint64_t v964;
  __int128 v965;
  __int128 v966;
  __int128 v967;
  __int128 v968;
  __int128 v969;
  __int128 v970;
  __int128 v971;
  __int128 v972;
  __int128 v973;
  __int128 v974;
  __int128 v975;
  __int128 v976;
  __int128 v977;
  __int128 v978;
  __int128 v979;
  __int128 v980;
  uint64_t v981;
  uint64x2_t v982;
  unint64_t v983;
  unint64_t v984;
  _OWORD v985[10];
  _OWORD v986[230];
  _BYTE v987[1608];
  uint64_t v988;
  __int128 v989;
  uint64_t v990;
  _QWORD v991[3];
  __int128 v992;
  uint64_t v993;
  uint64_t v994;
  __int128 v995;
  uint64_t v996;
  uint64_t v997;
  __int128 v998;
  uint64_t v999;
  uint64_t v1000;
  __int128 v1001;
  uint64_t v1002;
  uint64_t v1003;
  __int128 v1004;
  uint64_t v1005;
  uint64_t v1006;
  __int128 v1007;
  uint64_t v1008;
  _QWORD v1009[3];
  __int128 v1010;
  uint64_t v1011;
  uint64_t v1012;
  __int128 v1013;
  uint64_t v1014;
  uint64_t v1015;
  __int128 v1016;
  uint64_t v1017;
  uint64_t v1018;
  __int128 v1019;
  uint64_t v1020;
  uint64_t v1021;
  __int128 v1022;
  uint64_t v1023;
  uint64_t v1024;
  __int128 v1025;
  uint64_t v1026;
  _QWORD v1027[3];
  __int128 v1028;
  uint64_t v1029;
  uint64_t v1030;
  _QWORD v1031[3];
  __int128 v1032;
  uint64_t v1033;
  uint64_t v1034;
  __int128 v1035;
  uint64_t v1036;
  uint64_t v1037;
  __int128 v1038;
  uint64_t v1039;
  uint64_t v1040;
  __int128 v1041;
  uint64_t v1042;
  uint64_t v1043;
  __int128 v1044;
  uint64_t v1045;
  __int128 v1046;
  uint64_t v1047;
  _QWORD v1048[3];
  __int128 v1049;
  uint64_t v1050;
  uint64_t v1051;
  __int128 v1052;
  uint64_t v1053;
  uint64_t v1054;
  __int128 v1055;
  uint64_t v1056;
  uint64_t v1057;
  __int128 v1058;
  uint64_t v1059;
  uint64_t v1060;
  __int128 v1061;
  uint64_t v1062;
  uint64_t v1063;
  __int128 v1064;
  uint64_t v1065;
  _QWORD v1066[3];
  __int128 v1067;
  uint64_t v1068;
  uint64_t v1069;
  __int128 v1070;
  uint64_t v1071;
  uint64_t v1072;
  __int128 v1073;
  uint64_t v1074;
  uint64_t v1075;
  __int128 v1076;
  uint64_t v1077;
  uint64_t v1078;
  __int128 v1079;
  uint64_t v1080;
  uint64_t v1081;
  __int128 v1082;
  uint64_t v1083;
  _QWORD v1084[3];
  __int128 v1085;
  uint64_t v1086;
  uint64_t v1087;
  __int128 v1088;
  uint64_t v1089;
  uint64_t v1090;
  __int128 v1091;
  uint64_t v1092;
  uint64_t v1093;
  __int128 v1094;
  uint64_t v1095;
  uint64_t v1096;
  __int128 v1097;
  uint64_t v1098;
  uint64_t v1099;
  __int128 v1100;
  uint64_t v1101;
  _QWORD v1102[3];
  __int128 v1103;
  uint64_t v1104;
  uint64_t v1105;
  __int128 v1106;
  uint64_t v1107;
  uint64_t v1108;
  __int128 v1109;
  uint64_t v1110;
  uint64_t v1111;
  _OWORD v1112[100];
  uint64_t v1113[200];
  _QWORD v1114[14];
  __int128 v1115;
  _BYTE v1116[32];
  __int128 v1117;
  __int128 v1118;
  __int128 v1119;
  __int128 v1120;

  v707 = a3;
  v708 = a2;
  v4 = type metadata accessor for DNSRecords.SRV(0);
  __chkstk_darwin();
  v6 = (char *)&v658 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v8 = (char *)&v658 - v7;
  sub_100012C44(&qword_100405BC8);
  __chkstk_darwin();
  v10 = (char *)&v658 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for AWDLStatistics.LowLatencyStatistics(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin();
  v14 = (char *)&v658 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Logger(0);
  __chkstk_darwin();
  v706 = (char *)&v658 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = _swiftEmptyArrayStorage;
  v705 = a1;
  switch(a1)
  {
    case 1uLL:
      v19 = sub_100012C44(&qword_100405BD0);
      v20 = type metadata accessor for DriverEvent(0);
      v21 = *(_QWORD *)(v20 - 8);
      v22 = *(_QWORD *)(v21 + 72);
      v23 = *(unsigned __int8 *)(v21 + 80);
      v24 = (v23 + 32) & ~v23;
      v25 = swift_allocObject(v19, v24 + v22, v23 | 7);
      *(_OWORD *)(v25 + 16) = xmmword_10033A110;
      v26 = v25 + v24;
      *(_OWORD *)v26 = 0u;
      *(_OWORD *)(v26 + 16) = 0u;
      *(_OWORD *)(v26 + 25) = 0u;
      goto LABEL_9;
    case 2uLL:
      v27 = sub_100012C44(&qword_100405BD0);
      v20 = type metadata accessor for DriverEvent(0);
      v28 = *(_QWORD *)(v20 - 8);
      v29 = *(_QWORD *)(v28 + 72);
      v30 = *(unsigned __int8 *)(v28 + 80);
      v31 = (v30 + 32) & ~v30;
      v25 = swift_allocObject(v27, v31 + v29, v30 | 7);
      *(_OWORD *)(v25 + 16) = xmmword_10033A110;
      v26 = v25 + v31;
      v32 = 2;
      goto LABEL_8;
    case 3uLL:
      v33 = sub_100012C44(&qword_100405BD0);
      v20 = type metadata accessor for DriverEvent(0);
      v34 = *(_QWORD *)(v20 - 8);
      v35 = *(_QWORD *)(v34 + 72);
      v36 = *(unsigned __int8 *)(v34 + 80);
      v37 = (v36 + 32) & ~v36;
      v25 = swift_allocObject(v33, v37 + v35, v36 | 7);
      *(_OWORD *)(v25 + 16) = xmmword_10033A110;
      v26 = v25 + v37;
      v32 = 3;
      goto LABEL_8;
    case 9uLL:
      v703 = v16;
      v704.i64[0] = v15;
      v38 = v707;
      v39 = v708;
      sub_100031FEC(v708, v707);
      sub_10005DCD0(v39, v38);
      sub_100063EB8((uint64_t)&v965, (uint64_t)&v982, &qword_100405BE0);
      sub_100063EB8((uint64_t)&v982, (uint64_t)v987, &qword_100405BE0);
      if (sub_1000636E8((uint64_t)v987) == 1)
        goto LABEL_178;
      memcpy(v1113, v987, 0x1CCuLL);
      v40 = sub_100012C44(&qword_100405BD0);
      v41 = type metadata accessor for DriverEvent(0);
      v42 = *(_QWORD *)(v41 - 8);
      v43 = *(_QWORD *)(v42 + 72);
      v44 = *(unsigned __int8 *)(v42 + 80);
      v45 = v38;
      v46 = (v44 + 32) & ~v44;
      v47 = swift_allocObject(v40, v46 + v43, v44 | 7);
      *(_OWORD *)(v47 + 16) = xmmword_10033A110;
      v48 = v47 + v46;
      *(_QWORD *)v48 = sub_1000ADA58() & 0xFFFFFFFFFFFFLL;
      *(_QWORD *)(v48 + 8) = v49;
      *(_QWORD *)(v48 + 16) = v51;
      *(_QWORD *)(v48 + 24) = v50;
      *(_QWORD *)(v48 + 32) = 0;
      v52 = 1024;
      goto LABEL_81;
    case 0xBuLL:
      v53 = sub_100012C44(&qword_100405BD0);
      v20 = type metadata accessor for DriverEvent(0);
      v54 = *(_QWORD *)(v20 - 8);
      v55 = *(_QWORD *)(v54 + 72);
      v56 = *(unsigned __int8 *)(v54 + 80);
      v57 = (v56 + 32) & ~v56;
      v25 = swift_allocObject(v53, v57 + v55, v56 | 7);
      *(_OWORD *)(v25 + 16) = xmmword_10033A110;
      v26 = v25 + v57;
      v32 = 1;
LABEL_8:
      *(_QWORD *)v26 = v32;
      *(_OWORD *)(v26 + 24) = 0u;
      *(_OWORD *)(v26 + 8) = 0u;
      *(_BYTE *)(v26 + 40) = 0;
LABEL_9:
      *(_BYTE *)(v26 + 41) = 10;
      v58 = v20;
      v59 = 2;
      goto LABEL_10;
    case 0x2EuLL:
      v60 = sub_100012C44(&qword_100405BD0);
      v61 = type metadata accessor for DriverEvent(0);
      v62 = *(_QWORD *)(v61 - 8);
      v63 = *(_QWORD *)(v62 + 72);
      v64 = *(unsigned __int8 *)(v62 + 80);
      v65 = (v64 + 32) & ~v64;
      v66 = swift_allocObject(v60, v65 + v63, v64 | 7);
      *(_OWORD *)(v66 + 16) = xmmword_10033A110;
      v67 = v66 + v65;
      v68 = type metadata accessor for DriverEvent.AWDL(0);
      v69 = v66 + v65;
      v70 = 10;
      goto LABEL_166;
    case 0x2FuLL:
      v703 = v16;
      v704.i64[0] = v15;
      v38 = v707;
      v39 = v708;
      sub_100031FEC(v708, v707);
      sub_10005D8D0(v39, v38);
      if ((v987[68] & 1) != 0)
        goto LABEL_178;
      if (*(_DWORD *)&v987[8] != 1)
        goto LABEL_181;
      v71 = v987[0];
      v706 = (_BYTE *)(*(_QWORD *)v987 >> 40);
      v72 = v987[4];
      v73 = *(_QWORD *)v987 >> 24;
      v74 = *(_QWORD *)v987 >> 16;
      v75 = *(_QWORD *)v987 >> 8;
      v76 = sub_100012C44(&qword_100405BD0);
      v77 = type metadata accessor for DriverEvent(0);
      v78 = *(_QWORD *)(v77 - 8);
      v79 = *(_QWORD *)(v78 + 72);
      v80 = *(unsigned __int8 *)(v78 + 80);
      v81 = (v80 + 32) & ~v80;
      v82 = swift_allocObject(v76, v81 + v79, v80 | 7);
      *(_OWORD *)(v82 + 16) = xmmword_10033A110;
      v83 = (_BYTE *)(v82 + v81);
      *v83 = v71;
      v83[1] = v75;
      v83[2] = v74;
      v83[3] = v73;
      v83[4] = v72;
      v83[5] = (_BYTE)v706;
      v84 = type metadata accessor for DriverEvent.AWDL(0);
      swift_storeEnumTagMultiPayload(v82 + v81, v84, 7);
      v85 = v82 + v81;
      v86 = v77;
      v87 = 1;
      goto LABEL_69;
    case 0x30uLL:
      v88 = (char *)&loc_100008FF4 + *((int *)qword_10003D8B8 + (v707 >> 62));
      v703 = v16;
      v704.i64[0] = v15;
      __asm { BR              X9 }
      return result;
    case 0x31uLL:
      v703 = v16;
      v704.i64[0] = v15;
      v38 = v707;
      v39 = v708;
      sub_100031FEC(v708, v707);
      sub_10005DC0C(v39, v38);
      if ((v89 & 0x100000000) != 0)
        goto LABEL_178;
      v90 = v89;
      v91 = v38;
      v92 = sub_100012C44(&qword_100405BD0);
      v93 = type metadata accessor for DriverEvent(0);
      v94 = *(_QWORD *)(v93 - 8);
      v95 = *(_QWORD *)(v94 + 72);
      v96 = *(unsigned __int8 *)(v94 + 80);
      v97 = (v96 + 32) & ~v96;
      v98 = swift_allocObject(v92, v97 + v95, v96 | 7);
      *(_OWORD *)(v98 + 16) = xmmword_10033A110;
      v99 = v98 + v97;
      *(_BYTE *)(v98 + v97) = v90 == 1;
      v100 = v93;
      v101 = 4;
      goto LABEL_153;
    case 0x37uLL:
      v703 = v16;
      v704.i64[0] = v15;
      v38 = v707;
      v39 = v708;
      sub_100031FEC(v708, v707);
      sub_10005DB30(v39, v38);
      sub_100063EB8((uint64_t)&v965, (uint64_t)&v982, &qword_100405BE8);
      sub_100063EB8((uint64_t)&v982, (uint64_t)v987, &qword_100405BE8);
      if (sub_100063704((uint64_t)v987) == 1 || !*(_DWORD *)&v987[8])
        goto LABEL_178;
      v102 = sub_100012C44(&qword_100405BD0);
      v103 = type metadata accessor for DriverEvent(0);
      v104 = *(_QWORD *)(v103 - 8);
      v105 = *(_QWORD *)(v104 + 72);
      v106 = *(unsigned __int8 *)(v104 + 80);
      v107 = v38;
      v108 = (v106 + 32) & ~v106;
      v109 = swift_allocObject(v102, v108 + v105, v106 | 7);
      *(_OWORD *)(v109 + 16) = xmmword_10033A110;
      *(_BYTE *)(v109 + v108) = 4;
      swift_storeEnumTagMultiPayload(v109 + v108, v103, 4);
      sub_10000E614(v39, v107);
      return (_QWORD *)v109;
    case 0x3BuLL:
      v110 = sub_100012C44(&qword_100405BD0);
      v111 = type metadata accessor for DriverEvent(0);
      v112 = *(_QWORD *)(v111 - 8);
      v113 = *(_QWORD *)(v112 + 72);
      v114 = *(unsigned __int8 *)(v112 + 80);
      v115 = (v114 + 32) & ~v114;
      v25 = swift_allocObject(v110, v115 + v113, v114 | 7);
      *(_OWORD *)(v25 + 16) = xmmword_10033A110;
      v26 = v25 + v115;
      v58 = v111;
      v59 = 5;
LABEL_10:
      swift_storeEnumTagMultiPayload(v26, v58, v59);
      return (_QWORD *)v25;
    case 0x41uLL:
      v116 = sub_100012C44(&qword_100405BD0);
      v61 = type metadata accessor for DriverEvent(0);
      v117 = *(_QWORD *)(v61 - 8);
      v118 = *(_QWORD *)(v117 + 72);
      v119 = *(unsigned __int8 *)(v117 + 80);
      v120 = (v119 + 32) & ~v119;
      v66 = swift_allocObject(v116, v120 + v118, v119 | 7);
      *(_OWORD *)(v66 + 16) = xmmword_10033A110;
      v67 = v66 + v120;
      v68 = type metadata accessor for DriverEvent.AWDL(0);
      v69 = v66 + v120;
      v70 = 12;
      goto LABEL_166;
    case 0x42uLL:
      v703 = v16;
      v704.i64[0] = v15;
      v38 = v707;
      v39 = v708;
      sub_100031FEC(v708, v707);
      sub_10005DDA4(v39, v38);
      if ((v987[24] & 1) != 0)
        goto LABEL_178;
      v121 = *(_QWORD *)&v987[16];
      v122 = *(_QWORD *)&v987[8];
      v123 = *(_QWORD *)v987;
      v124 = v38;
      v125 = sub_100012C44(&qword_100405BD0);
      v126 = type metadata accessor for DriverEvent(0);
      v127 = *(_QWORD *)(v126 - 8);
      v128 = *(_QWORD *)(v127 + 72);
      v129 = *(unsigned __int8 *)(v127 + 80);
      v130 = v39;
      v131 = v124;
      v132 = (v129 + 32) & ~v129;
      v98 = swift_allocObject(v125, v132 + v128, v129 | 7);
      *(_OWORD *)(v98 + 16) = xmmword_10033A110;
      v133 = v98 + v132;
      sub_1000ADBB4(v123, v122, v121, (uint64_t)v987);
      v134 = v987[40];
      *(_QWORD *)v133 = *(unsigned __int16 *)v987;
      *(_OWORD *)(v133 + 8) = *(_OWORD *)&v987[8];
      *(_OWORD *)(v133 + 24) = *(_OWORD *)&v987[24];
      *(_BYTE *)(v133 + 40) = v134;
      *(_BYTE *)(v133 + 41) = 5;
      v135 = v133;
      v136 = v126;
      v137 = 2;
      goto LABEL_90;
    case 0x43uLL:
      v138 = sub_100012C44(&qword_100405BD0);
      v61 = type metadata accessor for DriverEvent(0);
      v139 = *(_QWORD *)(v61 - 8);
      v140 = *(_QWORD *)(v139 + 72);
      v141 = *(unsigned __int8 *)(v139 + 80);
      v142 = (v141 + 32) & ~v141;
      v66 = swift_allocObject(v138, v142 + v140, v141 | 7);
      *(_OWORD *)(v66 + 16) = xmmword_10033A110;
      v67 = v66 + v142;
      *(_BYTE *)(v66 + v142) = 1;
      goto LABEL_27;
    case 0x44uLL:
      v143 = sub_100012C44(&qword_100405BD0);
      v61 = type metadata accessor for DriverEvent(0);
      v144 = *(_QWORD *)(v61 - 8);
      v145 = *(_QWORD *)(v144 + 72);
      v146 = *(unsigned __int8 *)(v144 + 80);
      v147 = (v146 + 32) & ~v146;
      v66 = swift_allocObject(v143, v147 + v145, v146 | 7);
      *(_OWORD *)(v66 + 16) = xmmword_10033A110;
      v67 = v66 + v147;
      *(_BYTE *)(v66 + v147) = 0;
LABEL_27:
      v68 = type metadata accessor for DriverEvent.AWDL(0);
      v69 = v67;
      v70 = 0;
      goto LABEL_166;
    case 0x4AuLL:
      v703 = v16;
      v704.i64[0] = v15;
      v38 = v707;
      v39 = v708;
      sub_100031FEC(v708, v707);
      sub_10005DE64(v39, v38);
      if ((v987[104] & 1) != 0)
        goto LABEL_178;
      v148 = *(_WORD *)&v987[4];
      v149 = *(_WORD *)v987;
      v150 = v38;
      v151 = sub_100012C44(&qword_100405BD0);
      v152 = type metadata accessor for DriverEvent(0);
      v153 = *(_QWORD *)(v152 - 8);
      v154 = *(_QWORD *)(v153 + 72);
      v155 = *(unsigned __int8 *)(v153 + 80);
      v156 = (v155 + 32) & ~v155;
      v98 = swift_allocObject(v151, v156 + v154, v155 | 7);
      *(_OWORD *)(v98 + 16) = xmmword_10033A110;
      v157 = v98 + v156;
      LOBYTE(v149) = sub_1000B5224(v149);
      *(_QWORD *)v157 = v149 | ((unint64_t)sub_1000B5248(v148) << 8);
      *(_OWORD *)(v157 + 8) = 0u;
      *(_OWORD *)(v157 + 24) = 0u;
      v158 = 1792;
      goto LABEL_34;
    case 0x4EuLL:
      v703 = v16;
      v704.i64[0] = v15;
      v38 = v707;
      v39 = v708;
      sub_100031FEC(v708, v707);
      sub_10005DF30(v39, v38);
      if ((v160 & 1) != 0)
        goto LABEL_178;
      v161 = v159;
      v162 = HIDWORD(v159);
      v150 = v38;
      v163 = sub_100012C44(&qword_100405BD0);
      v152 = type metadata accessor for DriverEvent(0);
      v164 = *(_QWORD *)(v152 - 8);
      v165 = *(_QWORD *)(v164 + 72);
      v166 = *(unsigned __int8 *)(v164 + 80);
      v167 = (v166 + 32) & ~v166;
      v98 = swift_allocObject(v163, v167 + v165, v166 | 7);
      *(_OWORD *)(v98 + 16) = xmmword_10033A110;
      v157 = v98 + v167;
      LOBYTE(v161) = sub_1000B5224(v161);
      *(_QWORD *)v157 = v161 | ((unint64_t)sub_1000B5248(v162) << 8);
      *(_OWORD *)(v157 + 8) = 0u;
      *(_OWORD *)(v157 + 24) = 0u;
      v158 = 1536;
      goto LABEL_34;
    case 0x52uLL:
      v703 = v16;
      v704.i64[0] = v15;
      v38 = v707;
      v39 = v708;
      sub_100031FEC(v708, v707);
      sub_10005E178(v39, v38);
      if ((v169 & 0x100000000) != 0)
        goto LABEL_178;
      v170 = v169;
      v171 = HIDWORD(v168);
      v150 = v38;
      v172 = sub_100012C44(&qword_100405BD0);
      v152 = type metadata accessor for DriverEvent(0);
      v173 = *(_QWORD *)(v152 - 8);
      v174 = *(_QWORD *)(v173 + 72);
      v175 = *(unsigned __int8 *)(v173 + 80);
      v176 = (v175 + 32) & ~v175;
      v98 = swift_allocObject(v172, v176 + v174, v175 | 7);
      *(_OWORD *)(v98 + 16) = xmmword_10033A110;
      v157 = v98 + v176;
      *(_QWORD *)v157 = sub_1000B388C(v171, v170) & 0xFFFFFFFFFFFFLL;
      *(_OWORD *)(v157 + 8) = 0u;
      *(_OWORD *)(v157 + 24) = 0u;
      v158 = 2048;
LABEL_34:
      *(_WORD *)(v157 + 40) = v158;
      v177 = (_BYTE *)v157;
      v178 = v152;
      v179 = 2;
      goto LABEL_196;
    case 0x5FuLL:
      v703 = v16;
      v704.i64[0] = v15;
      v38 = v707;
      v39 = v708;
      sub_100031FEC(v708, v707);
      sub_10005CE58(v39, v38);
      if ((v181 & 0x100000000) != 0)
        goto LABEL_178;
      v182 = v180;
      v183 = v181;
      v150 = v38;
      v184 = sub_100012C44(&qword_100405BD0);
      v185 = type metadata accessor for DriverEvent(0);
      v186 = *(_QWORD *)(v185 - 8);
      v187 = *(_QWORD *)(v186 + 72);
      v188 = *(unsigned __int8 *)(v186 + 80);
      v189 = (v188 + 32) & ~v188;
      v190 = swift_allocObject(v184, v189 + v187, v188 | 7);
      *(_OWORD *)(v190 + 16) = xmmword_10033A110;
      v191 = (void *)(v190 + v189);
      if ((_DWORD)v182 == 3)
      {
        v98 = v190;
        v192 = HIDWORD(v182) == 1;
      }
      else
      {
        v98 = v190;
        if ((_DWORD)v182 == 2)
        {
          v192 = 4;
        }
        else if ((_DWORD)v182 == 1)
        {
          v192 = 3;
        }
        else
        {
          v192 = 0;
        }
      }
      v987[0] = v192;
      *(_QWORD *)&v987[8] = v183;
      sub_100063F60((uint64_t)v987);
      goto LABEL_195;
    case 0x61uLL:
      v703 = v16;
      v704.i64[0] = v15;
      __asm { BR              X10 }
      return result;
    case 0x62uLL:
      v703 = v16;
      v704.i64[0] = v15;
      KeyPath = swift_getKeyPath(&unk_10033AED0);
      v194 = swift_getKeyPath(&unk_10033AEF0);
      v195 = v707;
      v39 = v708;
      sub_100031FEC(v708, v707);
      v196 = v195;
      sub_10005CA18(v195, (uint64_t)v987);
      swift_release(KeyPath);
      swift_release(v194);
      sub_100063EB8((uint64_t)v987, (uint64_t)&v965, &qword_100405C38);
      sub_100063EB8((uint64_t)&v965, (uint64_t)&v982, &qword_100405C38);
      if (sub_10006391C((uint64_t)&v982) == 1)
        goto LABEL_167;
      v197 = v982.i32[0];
      v198 = v982.u32[2];
      v199 = v983;
      v200 = v982.u32[3];
      v201 = HIDWORD(v983);
      v705 = v984;
      v202 = sub_100012C44(&qword_100405BD0);
      v203 = type metadata accessor for DriverEvent(0);
      v204 = *(_QWORD *)(v203 - 8);
      v205 = *(_QWORD *)(v204 + 72);
      v206 = *(unsigned __int8 *)(v204 + 80);
      v207 = (v206 + 32) & ~v206;
      v208 = swift_allocObject(v202, v207 + v205, v206 | 7);
      *(_OWORD *)(v208 + 16) = xmmword_10033A110;
      v706 = (_BYTE *)v208;
      v209 = (void *)(v208 + v207);
      sub_100063940((uint64_t)v985);
      v210 = sub_1000B388C(v198, v200);
      if ((v210 & 0xFF00000000) == 0x300000000)
      {
        if (qword_100404180 != -1)
          swift_once(&qword_100404180, sub_1001902EC);
        LODWORD(v210) = static Channel.nanPrimary;
        LOBYTE(v211) = byte_1004105A4;
        LOBYTE(v212) = byte_1004105A5;
        v213 = v707;
      }
      else
      {
        v211 = HIDWORD(v210);
        v212 = v210 >> 40;
        v213 = v707;
      }
      *(_OWORD *)&v987[128] = v985[8];
      *(_OWORD *)&v987[144] = v985[9];
      *(_OWORD *)&v987[160] = v986[0];
      *(_OWORD *)&v987[169] = *(_OWORD *)((char *)v986 + 9);
      *(_OWORD *)&v987[64] = v985[4];
      *(_OWORD *)&v987[80] = v985[5];
      *(_OWORD *)&v987[96] = v985[6];
      *(_OWORD *)&v987[112] = v985[7];
      *(_OWORD *)v987 = v985[0];
      *(_OWORD *)&v987[16] = v985[1];
      *(_OWORD *)&v987[32] = v985[2];
      *(_OWORD *)&v987[48] = v985[3];
      *(_QWORD *)&v987[192] = v197;
      *(_DWORD *)&v987[200] = v210;
      v987[204] = v211;
      v987[205] = v212;
      *(_QWORD *)&v987[208] = v199;
      *(_QWORD *)&v987[216] = v705 | (v201 << 32);
      sub_100063D44((uint64_t)v987);
      sub_100063888(v987, v209);
      swift_storeEnumTagMultiPayload(v209, v203, 0);
      sub_100063D50((uint64_t)&v965);
      v614 = v708;
      v615 = v213;
      goto LABEL_184;
    case 0x63uLL:
      v703 = v16;
      v704.i64[0] = v15;
      v38 = v707;
      v39 = v708;
      sub_100031FEC(v708, v707);
      sub_10005D180(v39, v38);
      if ((v983 & 0x100000000) != 0)
        goto LABEL_178;
      v214 = v983;
      v215 = v982.u64[1];
      v130 = v39;
      v131 = v38;
      v216 = v982.i16[0];
      v217 = sub_100012C44(&qword_100405BD0);
      v218 = type metadata accessor for DriverEvent(0);
      v219 = *(_QWORD *)(v218 - 8);
      v220 = *(_QWORD *)(v219 + 72);
      v221 = *(unsigned __int8 *)(v219 + 80);
      v222 = (v221 + 32) & ~v221;
      v98 = swift_allocObject(v217, v222 + v220, v221 | 7);
      *(_OWORD *)(v98 + 16) = xmmword_10033A110;
      v223 = (void *)(v98 + v222);
      *(_QWORD *)v987 = sub_1000AD0CC(v216, v215, v214);
      v987[8] = v224;
      sub_100063E70((uint64_t)v987);
      sub_100063888(v987, v223);
      v135 = (uint64_t)v223;
      goto LABEL_89;
    case 0x64uLL:
      v703 = v16;
      v704.i64[0] = v15;
      v225 = swift_getKeyPath(&unk_10033B050);
      v226 = swift_getKeyPath(&unk_10033B070);
      v45 = v707;
      v39 = v708;
      sub_100031FEC(v708, v707);
      sub_10005C598(v45, (uint64_t)&v982);
      swift_release(v225);
      swift_release(v226);
      v227 = *(_QWORD *)&v985[0];
      if (!*(_QWORD *)&v985[0])
        goto LABEL_98;
      v228 = v982.i8[0];
      v229 = (unint64_t)v982.i64[0] >> 8;
      v230 = (unint64_t)v982.i64[0] >> 16;
      v701 = (unint64_t)v982.i64[0] >> 24;
      v702 = HIDWORD(v982.i64[0]);
      v703 = (_QWORD *)((unint64_t)v982.i64[0] >> 40);
      v704.i64[0] = HIWORD(v982.i64[0]);
      v705 = HIBYTE(v982.i64[0]);
      v706 = (_BYTE *)v982.i8[8];
      v231 = sub_100012C44(&qword_100405BD0);
      v232 = type metadata accessor for DriverEvent(0);
      v233 = *(_QWORD *)(v232 - 8);
      v234 = *(_QWORD *)(v233 + 72);
      v235 = *(unsigned __int8 *)(v233 + 80);
      v236 = (v235 + 32) & ~v235;
      v237 = swift_allocObject(v231, v236 + v234, v235 | 7);
      *(_OWORD *)(v237 + 16) = xmmword_10033A110;
      v238 = (void *)(v237 + v236);
      v987[0] = v228;
      v987[1] = v229;
      v987[2] = v230;
      v987[3] = v701;
      v987[4] = v702;
      v987[5] = (_BYTE)v703;
      v987[6] = v704.i8[0];
      v987[7] = v705;
      *(_QWORD *)&v987[8] = v706;
      *(_QWORD *)&v987[16] = v227;
      sub_100063F54((uint64_t)v987);
      goto LABEL_58;
    case 0x66uLL:
      v703 = v16;
      v704.i64[0] = v15;
      v239 = swift_getKeyPath(&unk_10033B010);
      v240 = swift_getKeyPath(&unk_10033B030);
      v241 = v707;
      v39 = v708;
      sub_100031FEC(v708, v707);
      sub_10005B2A4(v241, (uint64_t)&v982);
      swift_release(v239);
      swift_release(v240);
      v242 = *(_QWORD *)&v985[0];
      if (!*(_QWORD *)&v985[0])
        goto LABEL_177;
      v243 = v982.i8[0];
      v244 = (unint64_t)v982.i64[0] >> 16;
      v701 = (unint64_t)v982.i64[0] >> 8;
      v702 = (unint64_t)v982.i64[0] >> 24;
      v703 = (_QWORD *)HIDWORD(v982.i64[0]);
      v704.i64[0] = (unint64_t)v982.i64[0] >> 40;
      v705 = HIWORD(v982.i64[0]);
      v706 = (_BYTE *)v982.i8[8];
      v245 = HIBYTE(v982.i64[0]);
      v246 = sub_100012C44(&qword_100405BD0);
      v247 = type metadata accessor for DriverEvent(0);
      v248 = *(_QWORD *)(v247 - 8);
      v249 = *(_QWORD *)(v248 + 72);
      v250 = *(unsigned __int8 *)(v248 + 80);
      v251 = (v250 + 32) & ~v250;
      v252 = swift_allocObject(v246, v251 + v249, v250 | 7);
      *(_OWORD *)(v252 + 16) = xmmword_10033A110;
      v987[0] = v243;
      v987[1] = v245;
      v987[2] = v701;
      v987[3] = v244;
      v987[4] = v702;
      v987[5] = (_BYTE)v703;
      v987[6] = v704.i8[0];
      v987[7] = v705;
      *(_QWORD *)&v987[8] = v706;
      *(_QWORD *)&v987[16] = v242;
      sub_100063F48((uint64_t)v987);
      sub_100063888(v987, (void *)(v252 + v251));
      swift_storeEnumTagMultiPayload(v252 + v251, v247, 0);
      v254 = v707;
      v253 = v708;
      goto LABEL_188;
    case 0x68uLL:
      v703 = v16;
      v704.i64[0] = v15;
      v38 = v707;
      v39 = v708;
      sub_100031FEC(v708, v707);
      sub_10005E0C0(v39, v38);
      if ((v255 & 0x10000) != 0)
        goto LABEL_178;
      v150 = v38;
      v256 = sub_100012C44(&qword_100405BD0);
      v185 = type metadata accessor for DriverEvent(0);
      v257 = *(_QWORD *)(v185 - 8);
      v258 = *(_QWORD *)(v257 + 72);
      v259 = *(unsigned __int8 *)(v257 + 80);
      v260 = (v259 + 32) & ~v259;
      v98 = swift_allocObject(v256, v260 + v258, v259 | 7);
      *(_OWORD *)(v98 + 16) = xmmword_10033A110;
      v191 = (void *)(v98 + v260);
      sub_1000AD09C();
      v987[0] = v261;
      *(_QWORD *)&v987[8] = v262;
      sub_100063E88((uint64_t)v987);
      goto LABEL_195;
    case 0x69uLL:
      v703 = v16;
      v704.i64[0] = v15;
      v38 = v707;
      v39 = v708;
      sub_100031FEC(v708, v707);
      sub_10005E0C0(v39, v38);
      if ((v263 & 0x10000) != 0)
        goto LABEL_178;
      v150 = v38;
      v264 = sub_100012C44(&qword_100405BD0);
      v185 = type metadata accessor for DriverEvent(0);
      v265 = *(_QWORD *)(v185 - 8);
      v266 = *(_QWORD *)(v265 + 72);
      v267 = *(unsigned __int8 *)(v265 + 80);
      v268 = (v267 + 32) & ~v267;
      v98 = swift_allocObject(v264, v268 + v266, v267 | 7);
      *(_OWORD *)(v98 + 16) = xmmword_10033A110;
      v191 = (void *)(v98 + v268);
      sub_1000AD09C();
      v987[0] = v269;
      *(_QWORD *)&v987[8] = v270;
      sub_100063E94((uint64_t)v987);
LABEL_195:
      sub_100063888(v987, v191);
      v177 = v191;
      v178 = v185;
      v179 = 0;
      goto LABEL_196;
    case 0x6AuLL:
      v703 = v16;
      v704.i64[0] = v15;
      v271 = swift_getKeyPath(&unk_10033AF10);
      v272 = swift_getKeyPath(&unk_10033AF30);
      v45 = v707;
      v39 = v708;
      sub_100031FEC(v708, v707);
      sub_10005C598(v45, (uint64_t)&v982);
      swift_release(v271);
      swift_release(v272);
      v273 = *(_QWORD *)&v985[0];
      if (!*(_QWORD *)&v985[0])
        goto LABEL_98;
      v274 = v982.i8[0];
      v275 = (unint64_t)v982.i64[0] >> 8;
      v276 = (unint64_t)v982.i64[0] >> 16;
      v277 = (unint64_t)v982.i64[0] >> 24;
      v702 = HIDWORD(v982.i64[0]);
      v703 = (_QWORD *)((unint64_t)v982.i64[0] >> 40);
      v704.i64[0] = HIWORD(v982.i64[0]);
      v705 = HIBYTE(v982.i64[0]);
      v706 = (_BYTE *)v982.i8[8];
      v278 = sub_100012C44(&qword_100405BD0);
      v232 = type metadata accessor for DriverEvent(0);
      v279 = *(_QWORD *)(v232 - 8);
      v280 = *(_QWORD *)(v279 + 72);
      v281 = *(unsigned __int8 *)(v279 + 80);
      v282 = (v281 + 32) & ~v281;
      v237 = swift_allocObject(v278, v282 + v280, v281 | 7);
      *(_OWORD *)(v237 + 16) = xmmword_10033A110;
      v238 = (void *)(v237 + v282);
      v987[0] = v274;
      v987[1] = v275;
      v987[2] = v276;
      v987[3] = v277;
      v987[4] = v702;
      v987[5] = (_BYTE)v703;
      v987[6] = v704.i8[0];
      v987[7] = v705;
      *(_QWORD *)&v987[8] = v706;
      *(_QWORD *)&v987[16] = v273;
      sub_100063E7C((uint64_t)v987);
LABEL_58:
      sub_100063888(v987, v238);
      v283 = (uint64_t)v238;
      v284 = v232;
      v285 = 0;
      goto LABEL_59;
    case 0x70uLL:
      v703 = v16;
      v704.i64[0] = v15;
      v288 = swift_getKeyPath(&unk_10033AFD0);
      v289 = swift_getKeyPath(&unk_10033AFF0);
      v241 = v707;
      v39 = v708;
      sub_100031FEC(v708, v707);
      sub_10005B720(v241, &v982);
      swift_release(v288);
      swift_release(v289);
      v290 = v984;
      if (!v984)
      {
LABEL_177:
        v38 = v241;
        goto LABEL_178;
      }
      v291 = v982.i8[8];
      v292 = v982.i8[0];
      v293 = (unint64_t)v982.i64[0] >> 8;
      v294 = (unint64_t)v982.i64[0] >> 24;
      v295 = HIDWORD(v982.i64[0]);
      v698 = (unint64_t)v982.i64[0] >> 40;
      v699 = HIWORD(v982.i64[0]);
      v700 = HIBYTE(v982.i64[0]);
      v701 = (unint64_t)v982.i64[1] >> 8;
      v702 = (unint64_t)v982.i64[1] >> 16;
      v703 = (_QWORD *)((unint64_t)v982.i64[1] >> 24);
      v704.i64[0] = HIDWORD(v982.i64[1]);
      v705 = (unint64_t)v982.i64[1] >> 40;
      v706 = (_BYTE *)HIWORD(v982.i64[1]);
      v296 = sub_100012C44(&qword_100405BD0);
      v297 = type metadata accessor for DriverEvent(0);
      v298 = *(_QWORD *)(v297 - 8);
      v299 = *(_QWORD *)(v298 + 72);
      v300 = *(unsigned __int8 *)(v298 + 80);
      v301 = (v300 + 32) & ~v300;
      v98 = swift_allocObject(v296, v301 + v299, v300 | 7);
      *(_OWORD *)(v98 + 16) = xmmword_10033A110;
      v302 = (void *)(v98 + v301);
      v987[0] = v292;
      v987[1] = v293;
      v987[2] = v294;
      v987[3] = v295;
      v987[4] = v698;
      v987[5] = v699;
      v987[6] = v700;
      v987[7] = v291;
      v987[8] = v701;
      v987[9] = v702;
      v987[10] = (_BYTE)v703;
      v987[11] = v704.i8[0];
      v987[12] = v705;
      v987[13] = (_BYTE)v706;
      *(_QWORD *)&v987[16] = v290;
      sub_100063F3C((uint64_t)v987);
      sub_100063888(v987, v302);
      v303 = v302;
      v304 = v297;
LABEL_189:
      swift_storeEnumTagMultiPayload(v303, v304, 0);
      v321 = v708;
LABEL_190:
      v322 = v707;
      goto LABEL_197;
    case 0x71uLL:
      v703 = v16;
      v704.i64[0] = v15;
      v305 = swift_getKeyPath(&unk_10033AF90);
      v306 = swift_getKeyPath(&unk_10033AFB0);
      v307 = v707;
      v39 = v708;
      sub_100031FEC(v708, v707);
      sub_10005BBD8(v307, &v982);
      swift_release(v305);
      swift_release(v306);
      v308 = v984;
      if (!v984)
      {
        v38 = v307;
        goto LABEL_178;
      }
      v309 = v983;
      v310 = v983 >> 8;
      v311 = v983 >> 16;
      v312 = v983 >> 24;
      v313 = sub_100012C44(&qword_100405BD0);
      v314 = type metadata accessor for DriverEvent(0);
      v315 = *(_QWORD *)(v314 - 8);
      v316 = *(_QWORD *)(v315 + 72);
      v317 = *(unsigned __int8 *)(v315 + 80);
      v318 = (v317 + 32) & ~v317;
      v98 = swift_allocObject(v313, v318 + v316, v317 | 7);
      *(_OWORD *)(v98 + 16) = xmmword_10033A110;
      v319 = (void *)(v98 + v318);
      v320 = (uint64x2_t)vdupq_lane_s64(v982.i64[0], 0);
      v987[0] = v982.i8[0];
      *(int8x8_t *)&v987[1] = vmovn_s16(vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v320, (uint64x2_t)xmmword_10033B100), (int32x4_t)vshlq_u64(v320, (uint64x2_t)xmmword_10033B0F0)), (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v320, (uint64x2_t)xmmword_10033B130), (int32x4_t)vshlq_u64(v982, (uint64x2_t)xmmword_10033B120))));
      v987[9] = v982.i8[15];
      v987[10] = v309;
      v987[11] = v310;
      v987[12] = v311;
      v987[13] = v312;
      *(_DWORD *)&v987[14] = v982.i32[2];
      *(_WORD *)&v987[18] = v982.i16[6];
      *(_QWORD *)&v987[24] = v308;
      sub_100063F30((uint64_t)v987);
      sub_100063888(v987, v319);
      swift_storeEnumTagMultiPayload(v319, v314, 0);
      v321 = v708;
      v322 = v307;
LABEL_197:
      sub_10000E614(v321, v322);
      return (_QWORD *)v98;
    case 0x72uLL:
      v703 = v16;
      v704.i64[0] = v15;
      v323 = swift_getKeyPath(&unk_10033AF50);
      v324 = swift_getKeyPath(&unk_10033AF70);
      v196 = v707;
      v39 = v708;
      sub_100031FEC(v708, v707);
      sub_10005C0F0(v196, v987);
      swift_release(v323);
      swift_release(v324);
      v325 = *(_QWORD *)&v987[16];
      if (!*(_QWORD *)&v987[16])
      {
LABEL_167:
        v38 = v196;
        goto LABEL_178;
      }
      v326 = type metadata accessor for DriverEvent(0);
      v704 = *(int8x16_t *)v987;
      v327 = (uint64x2_t)vdupq_laneq_s64(*(int64x2_t *)v987, 1);
      v328 = *(_DWORD *)v987;
      v329 = v987[1];
      v330 = *(_QWORD *)v987 >> 40;
      v331 = v987[6];
      v705 = v987[7];
      v706 = &v987[2];
      v332 = vmovn_s16(vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v327, (uint64x2_t)xmmword_10033B100), (int32x4_t)vshlq_u64(v327, (uint64x2_t)xmmword_10033B0F0)), (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64((uint64x2_t)vextq_s8(v704, v704, 8uLL), (uint64x2_t)xmmword_10033B110), (int32x4_t)vshlq_u64((uint64x2_t)vdupq_lane_s64(*(uint64_t *)v987, 0), (uint64x2_t)xmmword_10033B0F0))));
      v333 = sub_100012C44(&qword_100405BD0);
      v334 = *(_QWORD *)(v326 - 8);
      v335 = *(_QWORD *)(v334 + 72);
      v336 = *(unsigned __int8 *)(v334 + 80);
      v337 = (v336 + 32) & ~v336;
      v82 = swift_allocObject(v333, v337 + v335, v336 | 7);
      *(_OWORD *)(v82 + 16) = xmmword_10033A110;
      v338 = (void *)(v82 + v337);
      v987[0] = v328;
      *v706 = v704.i8[8];
      if (((v328 >> 8) & 0xFE) != 0)
        v339 = 2;
      else
        v339 = v329;
      v987[1] = v339;
      *(int8x8_t *)&v987[3] = v332;
      v987[11] = v330;
      v987[12] = v331;
      v987[13] = v705;
      *(_QWORD *)&v987[16] = v325;
      sub_100063F24((uint64_t)v987);
      sub_100063888(v987, v338);
      v85 = (uint64_t)v338;
      v86 = v326;
      v87 = 0;
LABEL_69:
      swift_storeEnumTagMultiPayload(v85, v86, v87);
      v341 = v707;
      v340 = v708;
LABEL_96:
      sub_10000E614(v340, v341);
      return (_QWORD *)v82;
    case 0x75uLL:
      v703 = v16;
      v704.i64[0] = v15;
      v45 = v707;
      v39 = v708;
      sub_100031FEC(v708, v707);
      sub_10005CF28(v39, v45);
      sub_100063EB8((uint64_t)&v965, (uint64_t)&v982, &qword_100405C40);
      sub_100063EB8((uint64_t)&v982, (uint64_t)v987, &qword_100405C40);
      if (sub_100063EFC((uint64_t)v987) == 1)
        goto LABEL_98;
      v342 = sub_100012C44(&qword_100405BD0);
      v343 = type metadata accessor for DriverEvent(0);
      v344 = *(_QWORD *)(v343 - 8);
      v345 = *(_QWORD *)(v344 + 72);
      v346 = *(unsigned __int8 *)(v344 + 80);
      v347 = (v346 + 32) & ~v346;
      v47 = swift_allocObject(v342, v347 + v345, v346 | 7);
      *(_OWORD *)(v47 + 16) = xmmword_10033A110;
      v348 = (void *)(v47 + v347);
      LOBYTE(v965) = v987[1];
      *(_DWORD *)((char *)&v965 + 1) = *(_DWORD *)&v987[3];
      *(_WORD *)((char *)&v965 + 5) = *(_WORD *)&v987[7];
      BYTE7(v965) = v987[0] == 1;
      DWORD2(v965) = *(_DWORD *)&v987[9];
      WORD6(v965) = *(_WORD *)&v987[13];
      sub_100063F18((uint64_t)&v965);
      v349 = &v965;
      goto LABEL_159;
    case 0x76uLL:
      v703 = v16;
      v704.i64[0] = v15;
      v38 = v707;
      v39 = v708;
      sub_100031FEC(v708, v707);
      sub_10005CFFC(v39, v38);
      if ((v984 & 0x100000000) != 0)
        goto LABEL_178;
      v350 = v982.i8[8];
      v351 = v982.i64[0];
      v352 = (unint64_t)v982.i64[1] >> 8;
      v353 = (unint64_t)v982.i64[1] >> 16;
      v354 = (unint64_t)v982.i64[1] >> 24;
      v705 = HIDWORD(v982.i64[1]);
      v706 = (_BYTE *)((unint64_t)v982.i64[1] >> 40);
      v355 = sub_100012C44(&qword_100405BD0);
      v356 = type metadata accessor for DriverEvent(0);
      v357 = *(_QWORD *)(v356 - 8);
      v358 = *(_QWORD *)(v357 + 72);
      v359 = *(unsigned __int8 *)(v357 + 80);
      v360 = (v359 + 32) & ~v359;
      v98 = swift_allocObject(v355, v360 + v358, v359 | 7);
      *(_OWORD *)(v98 + 16) = xmmword_10033A110;
      v361 = (void *)(v98 + v360);
      v362 = sub_1000AF594(HIDWORD(v351));
      v987[0] = v351;
      v987[1] = v350;
      v987[2] = v352;
      v987[3] = v353;
      v987[4] = v354;
      v987[5] = v705;
      *(_WORD *)&v987[6] = v706;
      *(_QWORD *)&v987[8] = v362;
      sub_100063EAC((uint64_t)v987);
      sub_100063888(v987, v361);
      v303 = v361;
      v304 = v356;
      goto LABEL_189;
    case 0x7AuLL:
      v703 = v16;
      v704.i64[0] = v15;
      v38 = v707;
      v39 = v708;
      sub_100031FEC(v708, v707);
      sub_10005D3EC(v39, v38);
      if ((v987[72] & 1) != 0)
        goto LABEL_178;
      v363 = *(_DWORD *)&v987[64];
      v364 = *(_QWORD *)&v987[56];
      v365 = *(_QWORD *)&v987[48];
      v366 = sub_100012C44(&qword_100405BD0);
      v367 = type metadata accessor for DriverEvent(0);
      v368 = *(_QWORD *)(v367 - 8);
      v369 = *(_QWORD *)(v368 + 72);
      v370 = *(unsigned __int8 *)(v368 + 80);
      v371 = (v370 + 32) & ~v370;
      v372 = swift_allocObject(v366, v371 + v369, v370 | 7);
      v373 = HIWORD(v363);
      *(_OWORD *)(v372 + 16) = xmmword_10033A110;
      v252 = v372;
      v374 = (void *)(v372 + v371);
      v375 = __ROR8__(v365, 32);
      v376 = __ROR8__(v364, 32);
      v377 = sub_100192784((unsigned __int16)v363);
      if ((v377 & 0xFF00000000) == 0x300000000)
      {
        if (qword_100404180 != -1)
          swift_once(&qword_100404180, sub_1001902EC);
        LODWORD(v377) = static Channel.nanPrimary;
        LOBYTE(v378) = byte_1004105A4;
        LOBYTE(v379) = byte_1004105A5;
        v380 = v707;
      }
      else
      {
        v378 = HIDWORD(v377);
        v379 = v377 >> 40;
        v380 = v707;
      }
      *(_QWORD *)v987 = v373;
      *(_QWORD *)&v987[8] = v375;
      *(_QWORD *)&v987[16] = v376;
      *(_DWORD *)&v987[24] = v377;
      v987[28] = v378;
      v987[29] = v379;
      sub_1000638DC((uint64_t)v987);
      sub_100063888(v987, v374);
      v471 = (uint64_t)v374;
      v472 = v367;
      v473 = 0;
      goto LABEL_187;
    case 0x7DuLL:
      v703 = v16;
      v704.i64[0] = v15;
      v38 = v707;
      v39 = v708;
      sub_100031FEC(v708, v707);
      sub_10005DFEC(v39, v38);
      sub_100063EB8((uint64_t)&v965, (uint64_t)&v982, &qword_100405BD8);
      sub_100063EB8((uint64_t)&v982, (uint64_t)v987, &qword_100405BD8);
      if (sub_1000636CC((uint64_t)v987) == 1)
        goto LABEL_178;
      memcpy(v1113, v987, 0x193uLL);
      v381 = sub_100012C44(&qword_100405BD0);
      v41 = type metadata accessor for DriverEvent(0);
      v382 = *(_QWORD *)(v41 - 8);
      v383 = *(_QWORD *)(v382 + 72);
      v384 = *(unsigned __int8 *)(v382 + 80);
      v45 = v38;
      v385 = (v384 + 32) & ~v384;
      v47 = swift_allocObject(v381, v385 + v383, v384 | 7);
      *(_OWORD *)(v47 + 16) = xmmword_10033A110;
      v48 = v47 + v385;
      *(_QWORD *)v48 = sub_1000ADDD8();
      *(_OWORD *)(v48 + 8) = 0u;
      *(_OWORD *)(v48 + 24) = 0u;
      v52 = 256;
LABEL_81:
      *(_WORD *)(v48 + 40) = v52;
      v386 = v48;
      v387 = v41;
      v388 = 2;
      goto LABEL_161;
    case 0x7EuLL:
      v703 = v16;
      v704.i64[0] = v15;
      v38 = v707;
      v39 = v708;
      sub_100031FEC(v708, v707);
      sub_10005E0C0(v39, v38);
      if ((v389 & 0x10000) != 0)
        goto LABEL_178;
      v390 = v389;
      v91 = v38;
      v391 = sub_100012C44(&qword_100405BD0);
      v392 = type metadata accessor for DriverEvent(0);
      v393 = *(_QWORD *)(v392 - 8);
      v394 = *(_QWORD *)(v393 + 72);
      v395 = *(unsigned __int8 *)(v393 + 80);
      v396 = (v395 + 32) & ~v395;
      v98 = swift_allocObject(v391, v396 + v394, v395 | 7);
      *(_OWORD *)(v98 + 16) = xmmword_10033A110;
      v99 = v98 + v396;
      *(_QWORD *)v99 = v390;
      *(_OWORD *)(v99 + 24) = 0u;
      *(_OWORD *)(v99 + 8) = 0u;
      *(_BYTE *)(v99 + 40) = 0;
      v397 = 2;
      goto LABEL_152;
    case 0x7FuLL:
      v703 = v16;
      v704.i64[0] = v15;
      v38 = v707;
      v39 = v708;
      sub_100031FEC(v708, v707);
      sub_10005E178(v39, v38);
      if ((v399 & 0x100000000) != 0)
        goto LABEL_178;
      v400 = sub_1000B388C(v398, v399);
      if ((v400 & 0xFF00000000) == 0x300000000)
        goto LABEL_178;
      v401 = v400;
      v91 = v38;
      v402 = sub_100012C44(&qword_100405BD0);
      v392 = type metadata accessor for DriverEvent(0);
      v403 = *(_QWORD *)(v392 - 8);
      v404 = *(_QWORD *)(v403 + 72);
      v405 = *(unsigned __int8 *)(v403 + 80);
      v406 = (v405 + 32) & ~v405;
      v98 = swift_allocObject(v402, v406 + v404, v405 | 7);
      *(_OWORD *)(v98 + 16) = xmmword_10033A110;
      v99 = v98 + v406;
      *(_QWORD *)v99 = v401 & 0xFFFFFFFFFFFFLL;
      *(_OWORD *)(v99 + 24) = 0u;
      *(_OWORD *)(v99 + 8) = 0u;
      *(_BYTE *)(v99 + 40) = 0;
      v397 = 3;
      goto LABEL_152;
    case 0x81uLL:
      v703 = v16;
      v704.i64[0] = v15;
      v38 = v707;
      v39 = v708;
      sub_100031FEC(v708, v707);
      sub_10005D0C0(v39, v38);
      if ((v983 & 0x100000000) != 0)
        goto LABEL_178;
      v407 = v982.i64[1];
      v130 = v39;
      v131 = v38;
      v408 = v982.i16[0];
      v409 = sub_100012C44(&qword_100405BD0);
      v218 = type metadata accessor for DriverEvent(0);
      v410 = *(_QWORD *)(v218 - 8);
      v411 = *(_QWORD *)(v410 + 72);
      v412 = *(unsigned __int8 *)(v410 + 80);
      v413 = (v412 + 32) & ~v412;
      v98 = swift_allocObject(v409, v413 + v411, v412 | 7);
      *(_OWORD *)(v98 + 16) = xmmword_10033A110;
      v414 = (void *)(v98 + v413);
      *(_QWORD *)v987 = sub_1000AD014(v408, v407);
      v987[8] = v415;
      v987[9] = v416;
      v987[10] = v417;
      v987[11] = v418;
      v987[12] = v419;
      v987[13] = v420;
      v987[14] = v421;
      v987[15] = v422;
      sub_100063EA0((uint64_t)v987);
      sub_100063888(v987, v414);
      v135 = (uint64_t)v414;
LABEL_89:
      v136 = v218;
      v137 = 0;
LABEL_90:
      swift_storeEnumTagMultiPayload(v135, v136, v137);
      v321 = v130;
      v322 = v131;
      goto LABEL_197;
    case 0x8EuLL:
      v703 = v16;
      v704.i64[0] = v15;
      v423 = v707;
      v424 = v708;
      sub_100031FEC(v708, v707);
      sub_10005D64C(v424, v423);
      sub_100063EB8((uint64_t)v1113, (uint64_t)&v965, &qword_100405C20);
      sub_100063EB8((uint64_t)&v965, (uint64_t)&v982, &qword_100405C20);
      if (sub_1000637C4((uint64_t)&v982) == 1)
      {
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v10, 1, 1, v11);
      }
      else
      {
        sub_100063EB8((uint64_t)&v965, (uint64_t)v1112, &qword_100405C20);
        memcpy(v987, v1112, 0x640uLL);
        sub_1000AD42C((uint64_t)v987, (uint64_t)v10);
      }
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
      {
        sub_100033A84((uint64_t)v10, &qword_100405BC8);
        v38 = v707;
        v39 = v708;
        goto LABEL_178;
      }
      sub_100033AC0((uint64_t)v10, (uint64_t)v14, type metadata accessor for AWDLStatistics.LowLatencyStatistics);
      v616 = sub_100012C44(&qword_100405BD0);
      v617 = type metadata accessor for DriverEvent(0);
      v618 = *(_QWORD *)(v617 - 8);
      v619 = *(_QWORD *)(v618 + 72);
      v620 = *(unsigned __int8 *)(v618 + 80);
      v621 = (v620 + 32) & ~v620;
      v98 = swift_allocObject(v616, v621 + v619, v620 | 7);
      *(_OWORD *)(v98 + 16) = xmmword_10033A110;
      v622 = v98 + v621;
      sub_1000637E0((uint64_t)v14, v622, type metadata accessor for AWDLStatistics.LowLatencyStatistics);
      v623 = type metadata accessor for DriverEvent.AWDL(0);
      swift_storeEnumTagMultiPayload(v622, v623, 3);
      swift_storeEnumTagMultiPayload(v622, v617, 1);
      sub_10000E614(v708, v707);
      sub_100063824((uint64_t)v14, type metadata accessor for AWDLStatistics.LowLatencyStatistics);
      return (_QWORD *)v98;
    case 0x95uLL:
      v703 = v16;
      v704.i64[0] = v15;
      v38 = v707;
      v39 = v708;
      sub_100031FEC(v708, v707);
      sub_10005D720(v39, v38);
      sub_100063EB8((uint64_t)v1113, (uint64_t)&v965, &qword_100405C10);
      sub_100063EB8((uint64_t)&v965, (uint64_t)&v982, &qword_100405C10);
      if (sub_1000637A8((uint64_t)&v982) == 1)
        goto LABEL_178;
      sub_100063EB8((uint64_t)&v965, (uint64_t)v1112, &qword_100405C10);
      *(_OWORD *)&v987[160] = v1112[10];
      *(_OWORD *)&v987[176] = v1112[11];
      *(_OWORD *)&v987[192] = v1112[12];
      *(_OWORD *)&v987[96] = v1112[6];
      *(_OWORD *)&v987[112] = v1112[7];
      *(_OWORD *)&v987[128] = v1112[8];
      *(_OWORD *)&v987[144] = v1112[9];
      *(_OWORD *)&v987[32] = v1112[2];
      *(_OWORD *)&v987[48] = v1112[3];
      *(_OWORD *)&v987[64] = v1112[4];
      *(_OWORD *)&v987[80] = v1112[5];
      *(_OWORD *)v987 = v1112[0];
      *(_OWORD *)&v987[16] = v1112[1];
      sub_1000B4AF8((uint64_t)v987, (uint64_t)v1114);
      sub_100063EB8((uint64_t)v1114, (uint64_t)&v1115, &qword_100405C18);
      if (!(_QWORD)v1119)
        goto LABEL_178;
      v425 = sub_100012C44(&qword_100405BD0);
      v426 = type metadata accessor for DriverEvent(0);
      v427 = *(_QWORD *)(v426 - 8);
      v428 = *(_QWORD *)(v427 + 72);
      v429 = *(unsigned __int8 *)(v427 + 80);
      v430 = v38;
      v431 = (v429 + 32) & ~v429;
      v82 = swift_allocObject(v425, v431 + v428, v429 | 7);
      *(_OWORD *)(v82 + 16) = xmmword_10033A110;
      v432 = (_OWORD *)(v82 + v431);
      v433 = *(_OWORD *)v1116;
      *v432 = v1115;
      v432[1] = v433;
      v434 = v1120;
      v435 = v1118;
      v432[5] = v1119;
      v432[6] = v434;
      v436 = v1117;
      v432[2] = *(_OWORD *)&v1116[16];
      v432[3] = v436;
      v432[4] = v435;
      v437 = type metadata accessor for DriverEvent.AWDL(0);
      swift_storeEnumTagMultiPayload(v82 + v431, v437, 2);
      swift_storeEnumTagMultiPayload(v82 + v431, v426, 1);
      v340 = v39;
      v341 = v430;
      goto LABEL_96;
    case 0x9DuLL:
      v703 = v16;
      v704.i64[0] = v15;
      v45 = v707;
      v39 = v708;
      sub_100031FEC(v708, v707);
      sub_10005D578(v39, v45);
      sub_100063EB8((uint64_t)&v965, (uint64_t)&v982, &qword_100405C28);
      sub_100063EB8((uint64_t)&v982, (uint64_t)v987, &qword_100405C28);
      if (sub_100063860((uint64_t)v987) == 1)
      {
LABEL_98:
        v38 = v45;
        goto LABEL_178;
      }
      v703 = v1102;
      v671 = v1084;
      v664 = v1048;
      v665 = v1066;
      v663 = v1027;
      v660 = (__int128 *)v1031;
      v661 = v1009;
      v658 = v991;
      v589 = sub_100012C44(&qword_100405BD0);
      v705 = type metadata accessor for DriverEvent(0);
      v590 = *(_QWORD *)(v705 - 8);
      v591 = *(_QWORD *)(v590 + 72);
      v592 = *(unsigned __int8 *)(v590 + 80);
      v593 = (v592 + 32) & ~v592;
      v594 = swift_allocObject(v589, v593 + v591, v592 | 7);
      v706 = (_BYTE *)v594;
      *(_OWORD *)(v594 + 16) = xmmword_10033A110;
      v704.i64[0] = v594 + v593;
      v693 = v987[4];
      v694 = *(_DWORD *)v987;
      v691 = v987[6];
      v692 = v987[5];
      v689 = v987[17];
      v690 = v987[16];
      v687 = v987[36];
      v688 = v987[18];
      v685 = v987[38];
      v686 = v987[37];
      v684 = *(_DWORD *)&v987[48];
      v682 = *(_QWORD *)&v987[64];
      v683 = *(_QWORD *)&v987[56];
      v680 = *(_QWORD *)&v987[80];
      v681 = *(_QWORD *)&v987[72];
      v678 = *(_QWORD *)&v987[96];
      v679 = *(_QWORD *)&v987[88];
      v701 = *(_QWORD *)&v987[112];
      v702 = *(_QWORD *)&v987[104];
      v699 = *(_QWORD *)&v987[128];
      v700 = *(_QWORD *)&v987[120];
      v697 = *(_QWORD *)&v987[144];
      v698 = *(_QWORD *)&v987[136];
      v695 = *(_QWORD *)&v987[160];
      v696 = *(_QWORD *)&v987[152];
      v946 = *(_QWORD *)&v987[288];
      v948 = *(_QWORD *)&v987[312];
      v950 = *(_QWORD *)&v987[336];
      v952 = *(_QWORD *)&v987[360];
      v954 = *(_QWORD *)&v987[384];
      v956 = *(_QWORD *)&v987[408];
      v958 = *(_QWORD *)&v987[432];
      v960 = *(_QWORD *)&v987[456];
      v676 = *(_QWORD *)&v987[168];
      v677 = *(_QWORD *)&v987[176];
      v947 = *(_OWORD *)&v987[296];
      v949 = *(_OWORD *)&v987[320];
      v951 = *(_OWORD *)&v987[344];
      v953 = *(_OWORD *)&v987[368];
      v955 = *(_OWORD *)&v987[392];
      v957 = *(_OWORD *)&v987[416];
      v959 = *(_OWORD *)&v987[440];
      v961 = *(_OWORD *)&v987[464];
      v963 = *(_OWORD *)&v987[488];
      v962 = *(_QWORD *)&v987[480];
      v964 = *(_QWORD *)&v987[504];
      v595 = *(_QWORD *)&v987[192];
      v945 = *(_OWORD *)&v987[272];
      v596 = *(_QWORD *)&v987[8];
      v597 = *(_QWORD *)&v987[20];
      v598 = *(_QWORD *)&v987[40];
      v674 = *(_QWORD *)&v987[264];
      v675 = *(_QWORD *)&v987[184];
      v670 = *(_QWORD *)&v987[200];
      v672 = *(_QWORD *)&v987[256];
      v673 = *(_QWORD *)&v987[216];
      v667 = *(_DWORD *)&v987[32];
      v668 = *(_DWORD *)&v987[28];
      v669 = sub_1000B07EC((uint64_t)&v945);
      v925 = *(_OWORD *)&v987[752];
      v927 = *(_OWORD *)&v987[776];
      v926 = *(_QWORD *)&v987[768];
      v928 = *(_QWORD *)&v987[792];
      v929 = *(_OWORD *)&v987[800];
      v931 = *(_OWORD *)&v987[824];
      v930 = *(_QWORD *)&v987[816];
      v932 = *(_QWORD *)&v987[840];
      v933 = *(_OWORD *)&v987[848];
      v935 = *(_OWORD *)&v987[872];
      v934 = *(_QWORD *)&v987[864];
      v936 = *(_QWORD *)&v987[888];
      v937 = *(_OWORD *)&v987[896];
      v939 = *(_OWORD *)&v987[920];
      v938 = *(_QWORD *)&v987[912];
      v940 = *(_QWORD *)&v987[936];
      v941 = *(_OWORD *)&v987[944];
      v943 = *(_OWORD *)&v987[968];
      v942 = *(_QWORD *)&v987[960];
      v944 = *(_QWORD *)&v987[984];
      v666 = sub_1000B07EC((uint64_t)&v925);
      v905 = *(_OWORD *)&v987[992];
      v907 = *(_OWORD *)&v987[1016];
      v906 = *(_QWORD *)&v987[1008];
      v908 = *(_QWORD *)&v987[1032];
      v909 = *(_OWORD *)&v987[1040];
      v911 = *(_OWORD *)&v987[1064];
      v910 = *(_QWORD *)&v987[1056];
      v912 = *(_QWORD *)&v987[1080];
      v913 = *(_OWORD *)&v987[1088];
      v915 = *(_OWORD *)&v987[1112];
      v914 = *(_QWORD *)&v987[1104];
      v916 = *(_QWORD *)&v987[1128];
      v917 = *(_OWORD *)&v987[1136];
      v919 = *(_OWORD *)&v987[1160];
      v918 = *(_QWORD *)&v987[1152];
      v920 = *(_QWORD *)&v987[1176];
      v921 = *(_OWORD *)&v987[1184];
      v923 = *(_OWORD *)&v987[1208];
      v922 = *(_QWORD *)&v987[1200];
      v924 = *(_QWORD *)&v987[1224];
      v599 = sub_1000B07EC((uint64_t)&v905);
      v885 = *(_OWORD *)&v987[1232];
      v887 = *(_OWORD *)&v987[1256];
      v886 = *(_QWORD *)&v987[1248];
      v888 = *(_QWORD *)&v987[1272];
      v889 = *(_OWORD *)&v987[1280];
      v891 = *(_OWORD *)&v987[1304];
      v890 = *(_QWORD *)&v987[1296];
      v892 = *(_QWORD *)&v987[1320];
      v893 = *(_OWORD *)&v987[1328];
      v895 = *(_OWORD *)&v987[1352];
      v894 = *(_QWORD *)&v987[1344];
      v896 = *(_QWORD *)&v987[1368];
      v897 = *(_OWORD *)&v987[1376];
      v899 = *(_OWORD *)&v987[1400];
      v898 = *(_QWORD *)&v987[1392];
      v900 = *(_QWORD *)&v987[1416];
      v901 = *(_OWORD *)&v987[1424];
      v903 = *(_OWORD *)&v987[1448];
      v902 = *(_QWORD *)&v987[1440];
      v904 = *(_QWORD *)&v987[1464];
      v600 = sub_1000B07EC((uint64_t)&v885);
      v865 = *(_OWORD *)&v987[1472];
      v867 = *(_OWORD *)&v987[1496];
      v866 = *(_QWORD *)&v987[1488];
      v868 = *(_QWORD *)&v987[1512];
      v869 = *(_OWORD *)&v987[1520];
      v871 = *(_OWORD *)&v987[1544];
      v870 = *(_QWORD *)&v987[1536];
      v872 = *(_QWORD *)&v987[1560];
      v873 = *(_OWORD *)&v987[1568];
      v875 = *(_OWORD *)&v987[1592];
      v874 = *(_QWORD *)&v987[1584];
      v876 = v988;
      v877 = v989;
      v601 = v658;
      v879 = *(_OWORD *)v658;
      v878 = v990;
      v880 = v991[2];
      v881 = v992;
      v883 = *((_OWORD *)v658 + 3);
      v882 = v993;
      v884 = v994;
      v662 = sub_1000B07EC((uint64_t)&v865);
      v845 = *v660;
      v847 = v1032;
      v846 = v1031[2];
      v848 = v1033;
      v849 = v660[3];
      v851 = v1035;
      v850 = v1034;
      v852 = v1036;
      v853 = v660[6];
      v855 = v1038;
      v854 = v1037;
      v856 = v1039;
      v857 = v660[9];
      v859 = v1041;
      v858 = v1040;
      v860 = v1042;
      v861 = v660[12];
      v863 = v1044;
      v862 = v1043;
      v864 = v1045;
      v660 = (__int128 *)sub_1000B07EC((uint64_t)&v845);
      v833 = v995;
      v835 = v601[6];
      v834 = v996;
      v836 = v997;
      v837 = v998;
      v839 = v601[9];
      v838 = v999;
      v840 = v1000;
      v841 = v1001;
      v843 = v601[12];
      v842 = v1002;
      v844 = v1003;
      v659 = sub_1000B0970(&v833);
      v815 = v1004;
      v817 = v601[15];
      v816 = v1005;
      v818 = v1006;
      v819 = v1007;
      v821 = *v661;
      v820 = v1008;
      v822 = v1009[2];
      v823 = v1010;
      v825 = v661[3];
      v824 = v1011;
      v826 = v1012;
      v827 = v1013;
      v602 = v661;
      v829 = v661[6];
      v828 = v1014;
      v830 = v1015;
      v831 = v1016;
      v832 = v1017;
      v658 = sub_1000B0BAC((uint64_t)&v815);
      v797 = v602[9];
      v799 = v1019;
      v798 = v1018;
      v800 = v1020;
      v801 = v602[12];
      v803 = v1022;
      v802 = v1021;
      v804 = v1023;
      v805 = v602[15];
      v807 = v1025;
      v806 = v1024;
      v808 = v1026;
      v809 = *(_OWORD *)v663;
      v811 = v1028;
      v810 = v1027[2];
      v812 = v1029;
      v813 = *((_OWORD *)v663 + 3);
      v814 = v1030;
      v663 = sub_1000B0BAC((uint64_t)&v797);
      v777 = v1046;
      v779 = *v664;
      v778 = v1047;
      v780 = v1048[2];
      v781 = v1049;
      v783 = v664[3];
      v782 = v1050;
      v784 = v1051;
      v785 = v1052;
      v787 = v664[6];
      v786 = v1053;
      v788 = v1054;
      v789 = v1055;
      v791 = v664[9];
      v790 = v1056;
      v792 = v1057;
      v793 = v1058;
      v603 = v664;
      v795 = v664[12];
      v794 = v1059;
      v796 = v1060;
      v604 = sub_1000B07EC((uint64_t)&v777);
      v757 = v1061;
      v759 = v603[15];
      v758 = v1062;
      v760 = v1063;
      v761 = v1064;
      v763 = *v665;
      v762 = v1065;
      v764 = v1066[2];
      v765 = v1067;
      v767 = v665[3];
      v766 = v1068;
      v768 = v1069;
      v769 = v1070;
      v771 = v665[6];
      v770 = v1071;
      v772 = v1072;
      v773 = v1073;
      v605 = v665;
      v775 = v665[9];
      v774 = v1074;
      v776 = v1075;
      v606 = sub_1000B07EC((uint64_t)&v757);
      v737 = v1076;
      v739 = v605[12];
      v738 = v1077;
      v740 = v1078;
      v741 = v1079;
      v743 = v605[15];
      v742 = v1080;
      v744 = v1081;
      v745 = v1082;
      v747 = *v671;
      v746 = v1083;
      v748 = v1084[2];
      v749 = v1085;
      v751 = v671[3];
      v750 = v1086;
      v752 = v1087;
      v753 = v1088;
      v607 = v671;
      v755 = v671[6];
      v754 = v1089;
      v756 = v1090;
      v608 = sub_1000B07EC((uint64_t)&v737);
      v717 = v1091;
      v719 = v607[9];
      v718 = v1092;
      v720 = v1093;
      v721 = v1094;
      v723 = v607[12];
      v722 = v1095;
      v724 = v1096;
      v725 = v1097;
      v727 = v607[15];
      v726 = v1098;
      v728 = v1099;
      v729 = v1100;
      v731 = *(_OWORD *)v703;
      v730 = v1101;
      v732 = v1102[2];
      v733 = v1103;
      v609 = v703;
      v735 = *((_OWORD *)v703 + 3);
      v734 = v1104;
      v736 = v1105;
      v610 = sub_1000B07EC((uint64_t)&v717);
      v709 = v1106;
      v710 = v1107;
      v711 = *((_OWORD *)v609 + 6);
      v712 = v1108;
      v713 = v1109;
      v714 = v1110;
      v715 = *((_OWORD *)v609 + 9);
      v716 = v1111;
      v611 = sub_1000B0D20(&v709);
      LODWORD(v1113[0]) = v694;
      BYTE4(v1113[0]) = v693;
      BYTE5(v1113[0]) = v692;
      BYTE6(v1113[0]) = v691;
      LOBYTE(v1113[2]) = v690;
      BYTE1(v1113[2]) = v689;
      WORD1(v1113[2]) = v688;
      HIDWORD(v1113[3]) = v668;
      LODWORD(v1113[4]) = v667;
      BYTE4(v1113[4]) = v687;
      BYTE5(v1113[4]) = v686;
      BYTE6(v1113[4]) = v685;
      LODWORD(v1113[6]) = v684;
      v1113[7] = v683;
      v1113[8] = v682;
      v1113[9] = v681;
      v1113[10] = v680;
      v1113[11] = v679;
      v1113[12] = v678;
      *(uint64_t *)((char *)&v1113[2] + 4) = v597;
      v1113[1] = v596;
      v1113[5] = v598;
      v1113[13] = v702;
      v1113[14] = v701;
      v1113[15] = v700;
      v1113[16] = v699;
      v1113[17] = v698;
      v1113[18] = v697;
      v1113[19] = v696;
      v1113[20] = v695;
      v1113[21] = v676;
      v1113[22] = v677;
      v1113[23] = v675;
      v1113[24] = v595;
      v1113[25] = v670;
      v1113[26] = v672;
      v1113[27] = v674;
      v1113[28] = v673;
      v1113[29] = (uint64_t)v669;
      v1113[30] = (uint64_t)v666;
      v1113[31] = (uint64_t)v599;
      v1113[32] = (uint64_t)v600;
      v1113[33] = (uint64_t)v662;
      v1113[34] = (uint64_t)v660;
      v1113[35] = (uint64_t)v659;
      v1113[36] = (uint64_t)v658;
      v1113[37] = (uint64_t)v663;
      v1113[38] = (uint64_t)v604;
      v1113[39] = (uint64_t)v606;
      v1113[40] = (uint64_t)v608;
      v1113[41] = (uint64_t)v610;
      v1113[42] = (uint64_t)v611;
      memset(&v1113[43], 0, 17);
      sub_10006387C((uint64_t)v1113);
      v612 = v1113;
      goto LABEL_174;
    case 0x9EuLL:
      v703 = v16;
      v704.i64[0] = v15;
      v38 = v707;
      v39 = v708;
      sub_100031FEC(v708, v707);
      sub_10005D240(v39, v38);
      if ((v439 & 0x10000) != 0)
        goto LABEL_178;
      v440 = v438;
      v441 = v439;
      v442 = v438 >> 16;
      v443 = v39;
      v444 = HIWORD(v438) | (v439 << 16);
      v445 = sub_100012C44(&qword_100405BD0);
      v446 = type metadata accessor for DriverEvent(0);
      v447 = *(_QWORD *)(v446 - 8);
      v448 = *(_QWORD *)(v447 + 72);
      v449 = *(unsigned __int8 *)(v447 + 80);
      v450 = (v449 + 32) & ~v449;
      v98 = swift_allocObject(v445, v450 + v448, v449 | 7);
      *(_OWORD *)(v98 + 16) = xmmword_10033A110;
      v451 = (void *)(v98 + v450);
      *(_WORD *)v987 = v440;
      *(_QWORD *)&v987[2] = __PAIR64__(v444, v442);
      *(_DWORD *)v987 = sub_1000AD0FC(*(unint64_t *)v987, v441);
      sub_100063910((uint64_t)v987);
      sub_100063888(v987, v451);
      swift_storeEnumTagMultiPayload(v451, v446, 0);
      v321 = v443;
      goto LABEL_190;
    case 0x9FuLL:
      v703 = v16;
      v704.i64[0] = v15;
      v38 = v707;
      v39 = v708;
      sub_100031FEC(v708, v707);
      sub_10005D318(v39, v38);
      sub_100063EB8((uint64_t)&v965, (uint64_t)&v982, &qword_100405C30);
      sub_100063EB8((uint64_t)&v982, (uint64_t)v987, &qword_100405C30);
      if (sub_1000638E8((uint64_t)v987) == 1)
        goto LABEL_178;
      memcpy(v1113, v987, 0x3E1uLL);
      v452 = sub_100012C44(&qword_100405BD0);
      v343 = type metadata accessor for DriverEvent(0);
      v453 = *(_QWORD *)(v343 - 8);
      v454 = *(_QWORD *)(v453 + 72);
      v455 = *(unsigned __int8 *)(v453 + 80);
      v45 = v38;
      v456 = (v455 + 32) & ~v455;
      v47 = swift_allocObject(v452, v456 + v454, v455 | 7);
      *(_OWORD *)(v47 + 16) = xmmword_10033A110;
      sub_1000AD144();
      *(_QWORD *)&v1112[0] = v1115;
      DWORD2(v1112[0]) = DWORD2(v1115);
      LOBYTE(v1112[1]) = v1116[0];
      *(_OWORD *)((char *)&v1112[1] + 8) = *(_OWORD *)&v1116[8];
      *((_QWORD *)&v1112[2] + 1) = *(_QWORD *)&v1116[24];
      sub_100063904((uint64_t)v1112);
      sub_100063888(v1112, (void *)(v47 + v456));
      v386 = v47 + v456;
      goto LABEL_160;
    case 0xACuLL:
      v703 = v16;
      v704.i64[0] = v15;
      v38 = v707;
      v39 = v708;
      sub_100031FEC(v708, v707);
      sub_10005D7FC(v39, v38);
      if ((v459 & 1) != 0)
        goto LABEL_178;
      v460 = v457;
      v461 = v458;
      v380 = v38;
      v462 = sub_100012C44(&qword_100405BD0);
      v463 = type metadata accessor for DriverEvent(0);
      v464 = *(_QWORD *)(v463 - 8);
      v465 = *(_QWORD *)(v464 + 72);
      v466 = *(unsigned __int8 *)(v464 + 80);
      v467 = (v466 + 32) & ~v466;
      v252 = swift_allocObject(v462, v467 + v465, v466 | 7);
      *(_OWORD *)(v252 + 16) = xmmword_10033A110;
      v468 = v252 + v467;
      v469 = sub_100192784(v461);
      *(_BYTE *)v468 = HIDWORD(v460) != 0;
      *(_DWORD *)(v468 + 4) = v469;
      *(_WORD *)(v468 + 8) = WORD2(v469);
      v470 = type metadata accessor for DriverEvent.AWDL(0);
      swift_storeEnumTagMultiPayload(v468, v470, 5);
      v471 = v468;
      v472 = v463;
      v473 = 1;
LABEL_187:
      swift_storeEnumTagMultiPayload(v471, v472, v473);
      v253 = v39;
      v254 = v380;
LABEL_188:
      sub_10000E614(v253, v254);
      return (_QWORD *)v252;
    case 0xB3uLL:
      v703 = v16;
      v704.i64[0] = v15;
      v474 = v707;
      v39 = v708;
      sub_100031FEC(v708, v707);
      v475 = v474;
      sub_10005D998(v39, v474);
      sub_100063EB8((uint64_t)&v965, (uint64_t)&v982, &qword_100405BF0);
      sub_100063EB8((uint64_t)&v982, (uint64_t)v987, &qword_100405BF0);
      if (sub_100063720((uint64_t)v987) == 1
        || (v476 = *(unsigned int *)&v987[4], *(_DWORD *)&v987[4] >= 0x100u))
      {
        v38 = v475;
      }
      else
      {
        v977 = *(_OWORD *)&v987[200];
        v978 = *(_OWORD *)&v987[216];
        v979 = *(_OWORD *)&v987[232];
        v980 = *(_OWORD *)&v987[248];
        v973 = *(_OWORD *)&v987[136];
        v974 = *(_OWORD *)&v987[152];
        v975 = *(_OWORD *)&v987[168];
        v976 = *(_OWORD *)&v987[184];
        v969 = *(_OWORD *)&v987[72];
        v970 = *(_OWORD *)&v987[88];
        v971 = *(_OWORD *)&v987[104];
        v972 = *(_OWORD *)&v987[120];
        v965 = *(_OWORD *)&v987[8];
        v966 = *(_OWORD *)&v987[24];
        v967 = *(_OWORD *)&v987[40];
        v968 = *(_OWORD *)&v987[56];
        v477 = sub_100012C44(&qword_100405BF8);
        *((_QWORD *)&v1112[1] + 1) = v477;
        *(_QWORD *)&v1112[2] = sub_10006373C();
        v478 = (_QWORD *)swift_allocObject(&unk_1003DE558, 48, 7);
        *(_QWORD *)&v1112[0] = v478;
        v478[2] = 0;
        v478[3] = v476;
        v478[4] = &v965;
        v478[5] = &v981;
        v479 = (__int128 *)sub_10003259C(v1112, v477);
        v480 = v479[1];
        v1115 = *v479;
        *(_OWORD *)v1116 = v480;
        Slice<>.withUnsafeBytes<A>(_:)(v1114, sub_100106424, 0, v477, &type metadata for Data._Representation, &protocol witness table for UnsafeRawBufferPointer);
        v481 = v1114[0];
        v482 = v1114[1];
        sub_100014430(v1112);
        static DNSRecords.createRecord(with:value:)(v481, v482, 0, 0xF000000000000000);
        sub_10000E614(v481, v482);
        v636 = sub_100012C44(&qword_100404B88);
        v637 = swift_dynamicCast(&v965, v1113, v636, &type metadata for DNSRecords.Identifier, 0);
        if ((v637 & 1) != 0)
        {
          v638 = *((_QWORD *)&v965 + 1);
          v639 = v965;
          v640 = v966;
LABEL_207:
          sub_100014430(v1113);
          v643 = sub_100012C44(&qword_100405BD0);
          v644 = type metadata accessor for DriverEvent(0);
          v645 = *(_QWORD *)(v644 - 8);
          v646 = *(_QWORD *)(v645 + 72);
          v647 = *(unsigned __int8 *)(v645 + 80);
          v648 = (v647 + 32) & ~v647;
          v237 = swift_allocObject(v643, v648 + v646, v647 | 7);
          *(_OWORD *)(v237 + 16) = xmmword_10033A110;
          v649 = v237 + v648;
          *(_QWORD *)&v965 = 0;
          *((_QWORD *)&v965 + 1) = 0xE000000000000000;
          _StringGuts.grow(_:)(35);
          swift_bridgeObjectRelease(*((_QWORD *)&v965 + 1));
          *(_QWORD *)&v965 = 0xD000000000000015;
          *((_QWORD *)&v965 + 1) = 0x8000000100363860;
          v650._countAndFlagsBits = v639;
          DNSRecords.Identifier.description.getter(v639, v638, v640);
          object = v650._object;
          String.append(_:)(v650);
          swift_bridgeObjectRelease(v638);
          swift_bridgeObjectRelease(object);
          v652._countAndFlagsBits = 0x2064656B61654C20;
          v652._object = (void *)0xE90000000000005BLL;
          String.append(_:)(v652);
          LODWORD(v1113[0]) = *(_DWORD *)v987;
          v653._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt32, &protocol witness table for UInt32);
          v654 = v653._object;
          String.append(_:)(v653);
          swift_bridgeObjectRelease(v654);
          v655._countAndFlagsBits = 93;
          v655._object = (void *)0xE100000000000000;
          String.append(_:)(v655);
          v656 = *((_QWORD *)&v965 + 1);
          *(_QWORD *)v649 = v965;
          *(_QWORD *)(v649 + 8) = v656;
          *(_QWORD *)(v649 + 16) = 0xD000000000000096;
          *(_QWORD *)(v649 + 24) = 0x8000000100363880;
          *(_BYTE *)(v649 + 32) = 1;
          v657 = type metadata accessor for DriverEvent.AWDL(0);
          swift_storeEnumTagMultiPayload(v237 + v648, v657, 6);
          v283 = v237 + v648;
          v284 = v644;
          v285 = 1;
LABEL_59:
          swift_storeEnumTagMultiPayload(v283, v284, v285);
          v287 = v707;
          v286 = v708;
LABEL_164:
          sub_10000E614(v286, v287);
          return (_QWORD *)v237;
        }
        if ((swift_dynamicCast(&v965, v1113, v636, &type metadata for DNSRecords.PTR, 0) & 1) != 0)
        {
          v638 = *((_QWORD *)&v966 + 1);
          v639 = v966;
          v640 = v967;
          swift_bridgeObjectRelease(*((_QWORD *)&v965 + 1));
          goto LABEL_207;
        }
        if (swift_dynamicCast(v8, v1113, v636, v4, 0))
        {
          sub_100033AC0((uint64_t)v8, (uint64_t)v6, type metadata accessor for DNSRecords.SRV);
          v639 = *((_QWORD *)v6 + 2);
          v638 = *((_QWORD *)v6 + 3);
          v640 = v6[32];
          swift_bridgeObjectRetain(v638);
          sub_100063824((uint64_t)v6, type metadata accessor for DNSRecords.SRV);
          goto LABEL_207;
        }
        if (swift_dynamicCast(&v965, v1113, v636, &type metadata for DNSRecords.TXT, 0))
        {
          v638 = *((_QWORD *)&v966 + 1);
          v639 = v966;
          v640 = v967;
          v641 = *((_QWORD *)&v967 + 1);
          v642 = v968;
          swift_bridgeObjectRelease(*((_QWORD *)&v965 + 1));
          sub_10000E614(v641, v642);
          goto LABEL_207;
        }
        sub_100014430(v1113);
        v38 = v707;
      }
LABEL_178:
      v624 = v706;
      Logger.init(subsystem:category:)(0xD000000000000012, 0x8000000100360DF0, 0x726576697264, 0xE600000000000000);
      sub_100031FEC(v39, v38);
      v625 = sub_100031FEC(v39, v38);
      v626 = Logger.logObject.getter(v625);
      v627 = static os_log_type_t.error.getter(v626);
      if (os_log_type_enabled(v626, v627))
      {
        v628 = swift_slowAlloc(22, -1);
        v629 = swift_slowAlloc(32, -1);
        v1113[0] = v629;
        *(_DWORD *)v628 = 134218242;
        *(_QWORD *)&v1112[0] = v705;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v1112, (char *)v1112 + 8);
        *(_WORD *)(v628 + 12) = 2080;
        sub_100031FEC(v708, v38);
        v630 = v38;
        sub_100032030(0, 0xE000000000000000, v708, v38);
        v632 = v631;
        v634 = v633;
        sub_10000E614(v708, v630);
        v635 = v632;
        v38 = v630;
        *(_QWORD *)&v1112[0] = sub_100013CC8(v635, v634, v1113);
        v39 = v708;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v1112, (char *)v1112 + 8);
        swift_bridgeObjectRelease(v634);
        sub_10000E614(v39, v630);
        sub_10000E614(v39, v630);
        _os_log_impl((void *)&_mh_execute_header, v626, v627, "Failed to parse event[%ld]: %s", (uint8_t *)v628, 0x16u);
        swift_arrayDestroy(v629, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v629, -1, -1);
        swift_slowDealloc(v628, -1, -1);

        ((void (*)(_BYTE *, uint64_t))v703[1])(v706, v704.i64[0]);
      }
      else
      {
        sub_10000E614(v39, v38);
        sub_10000E614(v39, v38);

        ((void (*)(_BYTE *, uint64_t))v703[1])(v624, v704.i64[0]);
      }
LABEL_181:
      sub_10000E614(v39, v38);
      return _swiftEmptyArrayStorage;
    case 0xB6uLL:
      v703 = v16;
      v704.i64[0] = v15;
      v38 = v707;
      v39 = v708;
      sub_100031FEC(v708, v707);
      sub_10005E0C0(v39, v38);
      if ((v483 & 0x10000) != 0)
        goto LABEL_178;
      v484 = v483;
      v485 = v483 >> 8;
      v150 = v38;
      v486 = sub_100012C44(&qword_100405BD0);
      v487 = type metadata accessor for DriverEvent(0);
      v488 = *(_QWORD *)(v487 - 8);
      v489 = *(_QWORD *)(v488 + 72);
      v490 = *(unsigned __int8 *)(v488 + 80);
      v491 = (v490 + 32) & ~v490;
      v98 = swift_allocObject(v486, v491 + v489, v490 | 7);
      *(_OWORD *)(v98 + 16) = xmmword_10033A110;
      v492 = (_BYTE *)(v98 + v491);
      *v492 = v484;
      v492[1] = v485;
      v493 = type metadata accessor for DriverEvent.AWDL(0);
      swift_storeEnumTagMultiPayload(v492, v493, 4);
      v177 = v492;
      v178 = v487;
      goto LABEL_149;
    case 0xC3uLL:
      v494 = sub_100012C44(&qword_100405BD0);
      v61 = type metadata accessor for DriverEvent(0);
      v495 = *(_QWORD *)(v61 - 8);
      v496 = *(_QWORD *)(v495 + 72);
      v497 = *(unsigned __int8 *)(v495 + 80);
      v498 = (v497 + 32) & ~v497;
      v66 = swift_allocObject(v494, v498 + v496, v497 | 7);
      *(_OWORD *)(v66 + 16) = xmmword_10033A110;
      v67 = v66 + v498;
      v68 = type metadata accessor for DriverEvent.AWDL(0);
      v69 = v66 + v498;
      v70 = 11;
      goto LABEL_166;
    case 0xC5uLL:
      v703 = v16;
      v704.i64[0] = v15;
      v38 = v707;
      v39 = v708;
      sub_100031FEC(v708, v707);
      sub_10005D4B4(v39, v38);
      if ((v987[36] & 1) != 0)
        goto LABEL_178;
      LODWORD(v703) = *(_DWORD *)&v987[32];
      v499 = *(_DWORD *)&v987[24];
      v500 = *(_DWORD *)&v987[16];
      v501 = *(_DWORD *)&v987[8];
      v502 = *(_DWORD *)&v987[12];
      v503 = *(_DWORD *)&v987[4];
      v504 = *(_DWORD *)&v987[20];
      v505 = HIDWORD(*(_QWORD *)&v987[24]);
      v506 = sub_100012C44(&qword_100405BD0);
      v705 = type metadata accessor for DriverEvent(0);
      v507 = *(_QWORD *)(v705 - 8);
      v508 = *(_QWORD *)(v507 + 72);
      v509 = *(unsigned __int8 *)(v507 + 80);
      v510 = (v509 + 32) & ~v509;
      v511 = swift_allocObject(v506, v510 + v508, v509 | 7);
      v706 = (_BYTE *)v511;
      *(_OWORD *)(v511 + 16) = xmmword_10033A110;
      v704.i64[0] = v511 + v510;
      v982.i64[0] = __PAIR64__(v501, v503);
      v982.i64[1] = __PAIR64__(v500, v502);
      v983 = __PAIR64__(v499, v504);
      v984 = __PAIR64__(v703, v505);
      if (qword_100404150 != -1)
        swift_once(&qword_100404150, sub_100190108);
      v512 = 0;
      v513 = _swiftEmptyArrayStorage;
      break;
    case 0xC8uLL:
      v703 = v16;
      v704.i64[0] = v15;
      v38 = v707;
      v39 = v708;
      sub_100031FEC(v708, v707);
      sub_10005DA6C(v39, v38);
      if ((v987[40] & 1) != 0)
        goto LABEL_178;
      v983 = *(_QWORD *)&v987[16];
      v984 = *(_QWORD *)&v987[24];
      *(_QWORD *)&v985[0] = *(_QWORD *)&v987[32];
      v982 = *(uint64x2_t *)v987;
      v541 = sub_1000B515C((uint64_t)&v982);
      if (!v541)
        goto LABEL_178;
      v543 = v541;
      v544 = v542;
      v150 = v38;
      v545 = sub_100012C44(&qword_100405BD0);
      v546 = type metadata accessor for DriverEvent(0);
      v547 = *(_QWORD *)(v546 - 8);
      v548 = *(_QWORD *)(v547 + 72);
      v549 = *(unsigned __int8 *)(v547 + 80);
      v550 = (v549 + 32) & ~v549;
      v98 = swift_allocObject(v545, v550 + v548, v549 | 7);
      *(_OWORD *)(v98 + 16) = xmmword_10033A110;
      v551 = v98 + v550;
      *(_QWORD *)v551 = v543;
      *(_BYTE *)(v551 + 8) = v544;
      v552 = type metadata accessor for DriverEvent.AWDL(0);
      swift_storeEnumTagMultiPayload(v551, v552, 8);
      v177 = (_BYTE *)v551;
      v178 = v546;
LABEL_149:
      v179 = 1;
LABEL_196:
      swift_storeEnumTagMultiPayload(v177, v178, v179);
      v321 = v39;
      v322 = v150;
      goto LABEL_197;
    case 0xD7uLL:
      v703 = v16;
      v704.i64[0] = v15;
      v38 = v707;
      v39 = v708;
      sub_100031FEC(v708, v707);
      sub_10000D6F8(v39, v38);
      if ((v553 & 0x1000000000000) != 0)
        goto LABEL_178;
      v554 = v553;
      v91 = v38;
      v555 = sub_100012C44(&qword_100405BD0);
      v392 = type metadata accessor for DriverEvent(0);
      v556 = *(_QWORD *)(v392 - 8);
      v557 = *(_QWORD *)(v556 + 72);
      v558 = *(unsigned __int8 *)(v556 + 80);
      v559 = (v558 + 32) & ~v558;
      v98 = swift_allocObject(v555, v559 + v557, v558 | 7);
      *(_OWORD *)(v98 + 16) = xmmword_10033A110;
      v99 = v98 + v559;
      *(_QWORD *)v99 = v554 & 0xFFFFFFFFFFFFLL;
      *(_OWORD *)(v99 + 24) = 0u;
      *(_OWORD *)(v99 + 8) = 0u;
      *(_BYTE *)(v99 + 40) = 0;
      v397 = 9;
LABEL_152:
      *(_BYTE *)(v99 + 41) = v397;
      v100 = v392;
      v101 = 2;
LABEL_153:
      swift_storeEnumTagMultiPayload(v99, v100, v101);
      v321 = v39;
      v322 = v91;
      goto LABEL_197;
    case 0xE1uLL:
      v703 = v16;
      v704.i64[0] = v15;
      v38 = v707;
      v39 = v708;
      sub_100031FEC(v708, v707);
      sub_10005DC0C(v39, v38);
      if ((v560 & 0x100000000) != 0)
        goto LABEL_178;
      v45 = v38;
      if (v560 >= 4)
        v561 = 1;
      else
        v561 = 0x2010001u >> (8 * v560);
      v562 = sub_100012C44(&qword_100405BD0);
      v343 = type metadata accessor for DriverEvent(0);
      v563 = *(_QWORD *)(v343 - 8);
      v564 = *(_QWORD *)(v563 + 72);
      v565 = *(unsigned __int8 *)(v563 + 80);
      v566 = (v565 + 32) & ~v565;
      v47 = swift_allocObject(v562, v566 + v564, v565 | 7);
      *(_OWORD *)(v47 + 16) = xmmword_10033A110;
      v348 = (void *)(v47 + v566);
      v987[0] = v561;
      sub_1000638C4((uint64_t)v987);
      v349 = (__int128 *)v987;
LABEL_159:
      sub_100063888(v349, v348);
      v386 = (uint64_t)v348;
LABEL_160:
      v387 = v343;
      v388 = 0;
LABEL_161:
      swift_storeEnumTagMultiPayload(v386, v387, v388);
      sub_10000E614(v39, v45);
      return (_QWORD *)v47;
    case 0xEAuLL:
      v703 = v16;
      v704.i64[0] = v15;
      v38 = v707;
      v39 = v708;
      sub_100031FEC(v708, v707);
      sub_10005DF30(v39, v38);
      if ((v568 & 1) != 0)
        goto LABEL_178;
      v569 = v567;
      v570 = v39;
      v571 = v38;
      v572 = HIDWORD(v567);
      v573 = sub_100012C44(&qword_100405BD0);
      v574 = type metadata accessor for DriverEvent(0);
      v575 = *(_QWORD *)(v574 - 8);
      v576 = *(_QWORD *)(v575 + 72);
      v577 = *(unsigned __int8 *)(v575 + 80);
      v578 = (v577 + 32) & ~v577;
      v237 = swift_allocObject(v573, v578 + v576, v577 | 7);
      *(_OWORD *)(v237 + 16) = xmmword_10033A110;
      v579 = (_QWORD *)(v237 + v578);
      *v579 = v569;
      v580 = enum case for DispatchTimeInterval.milliseconds(_:);
      v581 = type metadata accessor for DispatchTimeInterval(0);
      v582 = *(void (**)(void))(*(_QWORD *)(v581 - 8) + 104);
      ((void (*)(_QWORD *, uint64_t, uint64_t))v582)(v579, v580, v581);
      *(_QWORD *)((char *)v579 + *(int *)(type metadata accessor for AWDLIdleActivity(0) + 20)) = v572;
      v582();
      v583 = type metadata accessor for DriverEvent.AWDL(0);
      swift_storeEnumTagMultiPayload(v579, v583, 9);
      swift_storeEnumTagMultiPayload(v579, v574, 1);
      v286 = v570;
      v287 = v571;
      goto LABEL_164;
    case 0xEBuLL:
      v584 = sub_100012C44(&qword_100405BD0);
      v61 = type metadata accessor for DriverEvent(0);
      v585 = *(_QWORD *)(v61 - 8);
      v586 = *(_QWORD *)(v585 + 72);
      v587 = *(unsigned __int8 *)(v585 + 80);
      v588 = (v587 + 32) & ~v587;
      v66 = swift_allocObject(v584, v588 + v586, v587 | 7);
      *(_OWORD *)(v66 + 16) = xmmword_10033A110;
      v67 = v66 + v588;
      v68 = type metadata accessor for DriverEvent.AWDL(0);
      v69 = v66 + v588;
      v70 = 13;
LABEL_166:
      swift_storeEnumTagMultiPayload(v69, v68, v70);
      swift_storeEnumTagMultiPayload(v67, v61, 1);
      return (_QWORD *)v66;
    default:
      return result;
  }
  do
  {
    v515 = v982.u32[v512];
    v516 = off_100409F48;
    if (*((_QWORD *)off_100409F48 + 2))
    {
      v517 = static Hasher._hash(seed:bytes:count:)(*((_QWORD *)off_100409F48 + 5), v982.u32[v512], 4);
      v518 = -1 << v516[32];
      v519 = v517 & ~v518;
      if (((*(_QWORD *)&v516[((v519 >> 3) & 0xFFFFFFFFFFFFF8) + 56] >> v519) & 1) != 0)
      {
        v520 = *((_QWORD *)v516 + 6);
        if (*(_DWORD *)(v520 + 4 * v519) == (_DWORD)v515)
        {
LABEL_123:
          v522 = 0;
          v523 = 3;
LABEL_142:
          *(_DWORD *)v987 = v515;
          v987[4] = v522;
          v987[5] = v523;
          sub_10018FA04();
          v536 = *(_DWORD *)v987;
          v537 = v987[4];
          v538 = v987[5];
          if ((swift_isUniquelyReferenced_nonNull_native(v513) & 1) == 0)
            v513 = sub_1000B1E74(0, v513[2] + 1, 1, v513);
          v540 = v513[2];
          v539 = v513[3];
          if (v540 >= v539 >> 1)
            v513 = sub_1000B1E74((_QWORD *)(v539 > 1), v540 + 1, 1, v513);
          v513[2] = v540 + 1;
          v514 = &v513[v540];
          *((_DWORD *)v514 + 8) = v536;
          *((_BYTE *)v514 + 36) = v537;
          *((_BYTE *)v514 + 37) = v538;
          goto LABEL_116;
        }
        v521 = ~v518;
        while (1)
        {
          v519 = (v519 + 1) & v521;
          if (((*(_QWORD *)&v516[((v519 >> 3) & 0xFFFFFFFFFFFFF8) + 56] >> v519) & 1) == 0)
            break;
          if (*(_DWORD *)(v520 + 4 * v519) == (_DWORD)v515)
            goto LABEL_123;
        }
      }
    }
    if (qword_100404158 != -1)
      swift_once(&qword_100404158, sub_10019012C);
    v524 = off_100409F50;
    if (!*((_QWORD *)off_100409F50 + 2))
      goto LABEL_133;
    v525 = static Hasher._hash(seed:bytes:count:)(*((_QWORD *)off_100409F50 + 5), v515, 4);
    v526 = -1 << v524[32];
    v527 = v525 & ~v526;
    if (((*(_QWORD *)&v524[((v527 >> 3) & 0xFFFFFFFFFFFFF8) + 56] >> v527) & 1) == 0)
      goto LABEL_133;
    v528 = *((_QWORD *)v524 + 6);
    if (*(_DWORD *)(v528 + 4 * v527) == (_DWORD)v515)
    {
LABEL_132:
      v522 = 1;
      v523 = 4;
      goto LABEL_142;
    }
    v529 = ~v526;
    while (1)
    {
      v527 = (v527 + 1) & v529;
      if (((*(_QWORD *)&v524[((v527 >> 3) & 0xFFFFFFFFFFFFF8) + 56] >> v527) & 1) == 0)
        break;
      if (*(_DWORD *)(v528 + 4 * v527) == (_DWORD)v515)
        goto LABEL_132;
    }
LABEL_133:
    if (qword_100404160 != -1)
      swift_once(&qword_100404160, sub_100190150);
    v530 = off_100409F58;
    if (*((_QWORD *)off_100409F58 + 2))
    {
      v531 = static Hasher._hash(seed:bytes:count:)(*((_QWORD *)off_100409F58 + 5), v515, 4);
      v532 = -1 << v530[32];
      v533 = v531 & ~v532;
      if (((*(_QWORD *)&v530[((v533 >> 3) & 0xFFFFFFFFFFFFF8) + 56] >> v533) & 1) != 0)
      {
        v534 = *((_QWORD *)v530 + 6);
        if (*(_DWORD *)(v534 + 4 * v533) == (_DWORD)v515)
        {
LABEL_141:
          v522 = 2;
          v523 = 5;
          goto LABEL_142;
        }
        v535 = ~v532;
        while (1)
        {
          v533 = (v533 + 1) & v535;
          if (((*(_QWORD *)&v530[((v533 >> 3) & 0xFFFFFFFFFFFFF8) + 56] >> v533) & 1) == 0)
            break;
          if (*(_DWORD *)(v534 + 4 * v533) == (_DWORD)v515)
            goto LABEL_141;
        }
      }
    }
LABEL_116:
    ++v512;
  }
  while (v512 != 8);
  *(_QWORD *)v987 = v513;
  sub_1000638D0((uint64_t)v987);
  v612 = (uint64_t *)v987;
LABEL_174:
  v613 = v704.i64[0];
  sub_100063888(v612, (void *)v704.i64[0]);
  swift_storeEnumTagMultiPayload(v613, v705, 0);
  v615 = v707;
  v614 = v708;
LABEL_184:
  sub_10000E614(v614, v615);
  return v706;
}

uint64_t sub_10000D69C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata(a1, a3);
  return result;
}

uint64_t type metadata accessor for DriverEvent(uint64_t a1)
{
  return sub_10000D69C(a1, qword_100408008, (uint64_t)&nominal type descriptor for DriverEvent);
}

uint64_t type metadata accessor for AWDLStatistics.LowLatencyStatistics(uint64_t a1)
{
  return sub_10000D69C(a1, qword_1004091D0, (uint64_t)&nominal type descriptor for AWDLStatistics.LowLatencyStatistics);
}

void sub_10000D6F8(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }
}

unint64_t sub_10000D72C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;

  if (BYTE6(a2) == 6)
  {
    sub_10000E7B8(a1, a2);
    if (!v2)
    {
      v5 = 0;
      v4 = v3 & 0xFFFFFFFFFFFFLL;
      return v4 | ((unint64_t)v5 << 48);
    }
    swift_errorRelease(v2);
  }
  v4 = 0;
  v5 = 1;
  return v4 | ((unint64_t)v5 << 48);
}

uint64_t sub_10000D7A4(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v14;
  NSObject *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  unint64_t v26;
  uint64_t v27;
  int v28;
  char v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  char v48;
  char v49;
  char v50;
  __int16 v51;
  int v52;
  uint64_t v53;
  char v54;
  char v55;
  __int16 v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  _QWORD v61[5];
  uint64_t v62;
  uint64_t v63[3];
  char v64;
  uint64_t v65;
  _BYTE v66[32];

  v3 = v2;
  v6 = sub_100012C44(&qword_100405038);
  __chkstk_darwin(v6);
  v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for RoutingSocket(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v12 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100033B48(v3 + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_routingSocket, (uint64_t)v8, &qword_100405038);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100033A84((uint64_t)v8, &qword_100405038);
  sub_100033AC0((uint64_t)v8, (uint64_t)v12, type metadata accessor for RoutingSocket);
  RoutingSocket.ipAddress(for:)(a1 & 0xFFFFFFFFFFFFLL, (uint64_t)v61);
  v45 = v61[0];
  v44 = v61[1];
  v43 = v61[2];
  v42 = (void *)v61[3];
  sub_100062908((uint64_t)v61, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000628F8);
  v14 = sub_100062908((uint64_t)v61, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000628F8);
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v15, (os_log_type_t)v16))
  {
    v40 = v16;
    v17 = swift_slowAlloc(22, -1);
    v39 = swift_slowAlloc(64, -1);
    v46 = v39;
    *(_DWORD *)v17 = 136315394;
    v41 = a1 & 0xFFFFFFFFFFFFLL;
    v18 = WiFiAddress.description.getter(a1 & 0xFFFFFFFFFFFFLL);
    v20 = v19;
    v65 = sub_100013CC8(v18, v19, &v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, v66);
    swift_bridgeObjectRelease(v20);
    *(_WORD *)(v17 + 12) = 2080;
    sub_100063EB8((uint64_t)v61, (uint64_t)&v65, &qword_100405B20);
    if (v66[24] == 1)
    {
      v21 = v42;
      swift_bridgeObjectRetain(v42);
      v22 = IPv6Address.description.getter(v45, v44, v43, v21);
      v24 = v23;
      sub_100062908((uint64_t)v61, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000623AC);
    }
    else
    {
      v25 = (char *)swift_slowAlloc(16, -1);
      LODWORD(v62) = v45;
      inet_ntop(2, &v62, v25, 0x10u);
      v22 = String.init(cString:)(v25);
      v24 = v26;
      swift_slowDealloc(v25, -1, -1);
    }
    v62 = sub_100013CC8(v22, v24, &v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, v63);
    swift_bridgeObjectRelease(v24);
    sub_100062908((uint64_t)v61, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000623AC);
    sub_100062908((uint64_t)v61, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000623AC);
    _os_log_impl((void *)&_mh_execute_header, v15, (os_log_type_t)v40, "Infra peer (%s) has IP address %s", (uint8_t *)v17, 0x16u);
    v27 = v39;
    swift_arrayDestroy(v39, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v27, -1, -1);
    swift_slowDealloc(v17, -1, -1);

  }
  else
  {

    sub_100062908((uint64_t)v61, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000623AC);
    sub_100062908((uint64_t)v61, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000623AC);
  }
  sub_100063EB8((uint64_t)v61, (uint64_t)&v62, &qword_100405B20);
  if ((v64 & 1) != 0)
  {
    v28 = 0;
    v29 = 0;
    v30 = 0;
    v32 = v62;
    v31 = v63[0];
    v33 = 28;
    v34 = 30;
  }
  else
  {
    v32 = 0;
    v31 = 0;
    v34 = 0;
    v33 = 0;
    v30 = 16;
    v28 = v62;
    v29 = 2;
  }
  LODWORD(v46) = 1;
  WORD2(v46) = a1;
  BYTE6(v46) = BYTE2(a1);
  HIBYTE(v46) = BYTE3(a1);
  v47 = BYTE4(a1);
  v48 = BYTE5(a1);
  v49 = v30;
  v50 = v29;
  v51 = 0;
  v52 = v28;
  v53 = 0;
  v54 = v33;
  v55 = v34;
  v56 = 0;
  v57 = 0;
  v58 = v32;
  v59 = v31;
  v60 = 0;
  v35 = a2[5];
  v37 = a2[2];
  v36 = a2[3];
  swift_retain(v35);
  swift_bridgeObjectRetain(v36);
  AppleDevice.setRequest(requestType:data:on:)(0x1C3uLL, (uint64_t)&v46, (uint64_t)v61, 0, v37, v36);
  swift_bridgeObjectRelease(v36);
  swift_release(v35);
  sub_100063824((uint64_t)v12, type metadata accessor for RoutingSocket);
  return sub_100062908((uint64_t)v61, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000623AC);
}

void RoutingSocket.ipAddress(for:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  _QWORD *inited;
  int v6;
  unsigned __int16 *v7;
  unsigned __int16 *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  int64_t v12;
  size_t v13;
  uint64_t v14;
  int64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  int v21;
  char *v22;
  uint64_t v23;
  size_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  _BYTE __dst[14];
  unsigned __int8 v51;
  uint64_t v52;
  int v53;
  size_t v54;
  _BYTE v55[56];

  v4 = sub_100012C44(&qword_100406930);
  inited = (_QWORD *)swift_initStackObject(v4, v55);
  *((_OWORD *)inited + 1) = xmmword_10033B190;
  *((_OWORD *)inited + 2) = xmmword_10034D850;
  inited[6] = 0x40000000002;
  v54 = 0;
  v6 = sysctl((int *)inited + 8, 6u, 0, &v54, 0, 0);
  if (v6 < 0)
  {
    v34 = v6;
    v35 = swift_bridgeObjectRelease(inited);
    if (v34 == -1)
      v34 = errno.getter(v35, v36);
    v37 = sub_100012C84();
    v38 = swift_allocError(&type metadata for WiFiError, v37, 0, 0);
    *(_QWORD *)v39 = v34;
    *(_QWORD *)(v39 + 8) = 0;
    goto LABEL_38;
  }
  v7 = (unsigned __int16 *)malloc(v54);
  if (!v7)
  {
    swift_bridgeObjectRelease(inited);
    v40 = sub_100012C84();
    v38 = swift_allocError(&type metadata for WiFiError, v40, 0, 0);
    *(_OWORD *)v39 = xmmword_10033B1B0;
LABEL_38:
    *(_BYTE *)(v39 + 16) = 0;
    swift_willThrow(v38);
    return;
  }
  v8 = v7;
  if ((swift_isUniquelyReferenced_nonNull_native(inited) & 1) == 0)
    inited = sub_10000E66C(0, 6, 0, inited);
  v9 = sysctl((int *)inited + 8, 6u, v8, &v54, 0, 0);
  v10 = swift_bridgeObjectRelease(inited);
  if ((v9 & 0x80000000) != 0)
  {
    if (v9 == -1)
      v9 = errno.getter(v10, v11);
    v41 = sub_100012C84();
    v32 = swift_allocError(&type metadata for WiFiError, v41, 0, 0);
    *(_QWORD *)v42 = v9;
    *(_QWORD *)(v42 + 8) = 0;
    *(_BYTE *)(v42 + 16) = 0;
    goto LABEL_42;
  }
  v12 = v54;
  if (v54 < 0x5C || (v13 = *v8, v54 < v13))
  {
LABEL_33:
    v31 = sub_100012C84();
    v32 = swift_allocError(&type metadata for WiFiError, v31, 0, 0);
    *(_QWORD *)v33 = 0;
    *(_QWORD *)(v33 + 8) = 0;
    *(_BYTE *)(v33 + 16) = 2;
LABEL_42:
    swift_willThrow(v32);
    free(v8);
    return;
  }
  v46 = 0;
  v47 = 0;
  v48 = 1;
  v14 = 92;
  v15 = v13;
  do
  {
    if (v13 >= 0x6C)
    {
      v16 = v13 - 92;
      v17 = (char *)v8 + v14;
      v18 = *((unsigned __int8 *)v8 + v14);
      if (v16 >= v18 + 20)
      {
        v19 = __OFADD__(v14, v18);
        v20 = v14 + v18;
        if (v19)
          goto LABEL_47;
        v21 = v17[1];
        v22 = (char *)v8 + v20;
        v23 = *((unsigned __int8 *)v8 + v20 + 5);
        v24 = v22[6];
        v52 = *((_QWORD *)v22 + 1);
        v53 = *((_DWORD *)v22 + 4);
        v49 = v21;
        if ((_DWORD)v24)
        {
          v25 = (char *)&v52 + v23;
          if (v24 <= 0xE)
          {
            memset(__dst, 0, sizeof(__dst));
            v51 = v24;
            memcpy(__dst, (char *)&v52 + v23, v24);
            v28 = sub_10000E38C(*(uint64_t *)__dst, *(unsigned int *)&__dst[8] | ((unint64_t)__dst[12] << 32) | ((unint64_t)__dst[13] << 40) | ((unint64_t)v51 << 48));
            if ((v28 & 0x1000000000000) != 0)
              goto LABEL_28;
          }
          else
          {
            v26 = type metadata accessor for __DataStorage(0);
            swift_allocObject(v26, *(unsigned int *)(v26 + 48), *(unsigned __int16 *)(v26 + 52));
            v27 = __DataStorage.init(bytes:length:)(v25, v24);
            v28 = sub_10000E38C(v24 << 32, v27 | 0x4000000000000000);
            if ((v28 & 0x1000000000000) != 0)
              goto LABEL_28;
          }
        }
        else
        {
          v28 = sub_10000E38C(0, 0xC000000000000000);
          if ((v28 & 0x1000000000000) != 0)
            goto LABEL_28;
        }
        *(_DWORD *)__dst = v28;
        __dst[4] = BYTE4(v28);
        __dst[5] = BYTE5(v28);
        LOWORD(v52) = a1;
        BYTE2(v52) = BYTE2(a1);
        BYTE3(v52) = BYTE3(a1);
        BYTE4(v52) = BYTE4(a1);
        BYTE5(v52) = BYTE5(a1);
        if ((_DWORD)v28 == (_DWORD)v52 && *(unsigned __int16 *)&__dst[4] == WORD2(v52))
        {
          if (v49 == 30)
          {
            __chkstk_darwin(&v46);
            *(_OWORD *)((char *)&v46 - 20) = *(_OWORD *)(v17 + 12);
            *((_OWORD *)&v46 - 2) = *(_OWORD *)v17;
            v30 = *(&v46 - 2);
            v46 = *(&v46 - 3);
            v47 = v30;
            v48 = 0;
          }
          else if (v49 == 2)
          {
            v43 = 0;
            v44 = 0;
            v45 = *((unsigned int *)v17 + 1);
            goto LABEL_44;
          }
        }
      }
    }
LABEL_28:
    v14 = v15 + 92;
    if (__OFADD__(v15, 92))
    {
      __break(1u);
LABEL_46:
      __break(1u);
LABEL_47:
      __break(1u);
    }
    if (v12 < v14)
      break;
    v13 = *(unsigned __int16 *)((char *)v8 + v15);
    v19 = __OFADD__(v15, v13);
    v15 += v13;
    if (v19)
      goto LABEL_46;
  }
  while (v12 >= v15);
  if ((v48 & 1) != 0)
    goto LABEL_33;
  v44 = 1;
  v45 = v46;
  v43 = v47;
LABEL_44:
  free(v8);
  *(_QWORD *)a2 = v45;
  *(_QWORD *)(a2 + 8) = v43;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_BYTE *)(a2 + 32) = v44;
}

uint64_t sub_10000E38C(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    __asm { BR              X9 }
  return 0x1000000000000;
}

uint64_t sub_10000E614(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release(result);
  }
  return swift_release(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t sub_10000E658(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_10000E614(result, a2);
  return result;
}

_QWORD *sub_10000E66C(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_100012C44(&qword_100406930);
      v11 = (_QWORD *)swift_allocObject(v10, 4 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 29;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 2);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= (_QWORD *)((char *)a4 + 4 * v8 + 32))
          memmove(v14, a4 + 4, 4 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_1000B55BC(0, v8, (char *)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for DNSRecords.SRV(uint64_t a1)
{
  uint64_t result;

  result = qword_100407DC0;
  if (!qword_100407DC0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for DNSRecords.SRV);
  return result;
}

void sub_10000E7B8(uint64_t a1, uint64_t a2)
{
  sub_10000E800(a1, a2);
}

void sub_10000E800(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_10000E844(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (BYTE6(a3) >= 6uLL)
  {
    __chkstk_darwin(a1);
    sub_10000E924((uint64_t)&v11, v8, v9);
    if (v3)
    {
      result = swift_willThrow(v10);
      __break(1u);
    }
    else
    {
      return v10 & 0xFFFFFFFFFFFFLL;
    }
  }
  else
  {
    v4 = sub_100012C84();
    v5 = swift_allocError(&type metadata for WiFiError, v4, 0, 0);
    *(_QWORD *)v6 = 0;
    *(_QWORD *)(v6 + 8) = 0;
    *(_BYTE *)(v6 + 16) = 2;
    return swift_willThrow(v5);
  }
  return result;
}

void sub_10000E924(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __asm { BR              X10 }
}

unint64_t sub_10000E980(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t __src, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  unsigned __int16 *v22;
  size_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  __int16 v28;
  char v29;
  char v30;
  char v31;
  char v32;

  v27 = v24;
  v28 = v25;
  v29 = BYTE2(v25);
  v30 = BYTE3(v25);
  v31 = BYTE4(v25);
  v32 = BYTE5(v25);
  if (!v22)
  {
    __break(1u);
    JUMPOUT(0x10000E9F0);
  }
  memcpy(v22, &v27, v23);
  return *v22 | ((unint64_t)*(unsigned int *)(v22 + 1) << 16);
}

uint64_t sub_10000EB3C(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  uint64_t v10;

  v2 = result;
  if (!a2)
  {
    swift_release(result);
    return 0;
  }
  if (a2 > 14)
  {
    if ((unint64_t)a2 < 0x7FFFFFFF)
      return a2 << 32;
    v10 = type metadata accessor for Data.RangeReference(0);
    v4 = swift_allocObject(v10, 32, 7);
    *(_QWORD *)(v4 + 16) = 0;
    *(_QWORD *)(v4 + 24) = a2;
    return v4;
  }
  if (a2 < 0)
  {
    __break(1u);
  }
  else
  {
    v5 = (_BYTE *)__DataStorage._bytes.getter();
    if (!v5)
    {
LABEL_10:
      v6 = __DataStorage._length.getter();
      if (v6 >= a2)
        v7 = a2;
      else
        v7 = v6;
      v8 = &v5[v7];
      if (v5)
        v9 = v8;
      else
        v9 = 0;
      v4 = sub_10000EC20(v5, v9);
      swift_release(v2);
      return v4;
    }
    result = __DataStorage._offset.getter();
    if (!__OFSUB__(0, result))
    {
      v5 -= result;
      goto LABEL_10;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_10000EC20(_BYTE *__src, _BYTE *a2)
{
  unint64_t v2;
  _BYTE __dst[14];
  char v5;

  if (__src)
    v2 = a2 - __src;
  else
    v2 = 0;
  if ((v2 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
  }
  if (v2 > 0xFF)
    goto LABEL_11;
  memset(__dst, 0, sizeof(__dst));
  v5 = v2;
  if (__src && a2 != __src)
    memcpy(__dst, __src, a2 - __src);
  return *(_QWORD *)__dst;
}

uint64_t sub_10000ED34()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  Swift::String v5;
  Swift::String v6;
  uint64_t v7;
  unint64_t v8;
  Swift::String v9;
  void *object;
  Swift::String v11;

  _StringGuts.grow(_:)(17);
  swift_bridgeObjectRelease(0xE000000000000000);
  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC12wifip2pdCore10XPCSession_processName + 8);
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC12wifip2pdCore10XPCSession_processName);
    v3 = *(void **)(v0 + OBJC_IVAR____TtC12wifip2pdCore10XPCSession_processName + 8);
  }
  else
  {
    objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC12wifip2pdCore10XPCSession_connection), "processIdentifier");
    v2 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int32, &protocol witness table for Int32);
    v3 = v4;
    v1 = 0;
  }
  swift_bridgeObjectRetain(v1);
  v5._countAndFlagsBits = v2;
  v5._object = v3;
  String.append(_:)(v5);
  swift_bridgeObjectRelease(v3);
  v6._countAndFlagsBits = 32;
  v6._object = (void *)0xE100000000000000;
  String.append(_:)(v6);
  v7 = type metadata accessor for UUID(0);
  v8 = sub_10000EE78();
  v9._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v7, v8);
  object = v9._object;
  String.append(_:)(v9);
  swift_bridgeObjectRelease(object);
  v11._countAndFlagsBits = 93;
  v11._object = (void *)0xE100000000000000;
  String.append(_:)(v11);
  return 0x6973736553435058;
}

unint64_t sub_10000EE78()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10040D340;
  if (!qword_10040D340)
  {
    v1 = type metadata accessor for UUID(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for UUID, v1);
    atomic_store(result, (unint64_t *)&qword_10040D340);
  }
  return result;
}

unint64_t WiFiP2PSPITransactionType.description.getter(uint64_t a1)
{
  unint64_t result;
  Swift::String v3;
  void *object;
  Swift::String v5;

  result = 0x6B63696B65646953;
  switch(a1)
  {
    case 0:
      return result;
    case 1:
      result = 0xD000000000000010;
      break;
    case 2:
      result = 0x726F462053544143;
      break;
    case 3:
      result = 0x6361422053544143;
      break;
    case 4:
      result = 0xD000000000000013;
      break;
    case 5:
    case 9:
    case 18:
      result = 0xD000000000000011;
      break;
    case 6:
      result = 0x2079616C50726143;
      break;
    case 7:
      result = 0xD000000000000012;
      break;
    case 8:
      result = 0x7265666E6F435641;
      break;
    case 10:
      result = 0x4620657669746341;
      break;
    case 11:
      result = 0xD000000000000010;
      break;
    case 12:
      result = 0xD000000000000016;
      break;
    case 13:
      result = 0xD00000000000001ALL;
      break;
    case 14:
      result = 0xD00000000000001ALL;
      break;
    case 15:
      result = 0xD000000000000017;
      break;
    case 16:
      result = 0xD000000000000027;
      break;
    case 17:
      result = 0xD000000000000022;
      break;
    case 19:
      result = 0x6C5020616964654DLL;
      break;
    default:
      v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
      object = v3._object;
      String.append(_:)(v3);
      swift_bridgeObjectRelease(object);
      v5._countAndFlagsBits = 41;
      v5._object = (void *)0xE100000000000000;
      String.append(_:)(v5);
      result = 0x286E776F6E6B6E55;
      break;
  }
  return result;
}

void sub_10000F174(uint64_t a1, unsigned __int8 a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  void (*v9)(_QWORD, uint64_t, uint64_t);
  uint64_t v10;
  id v12;
  unsigned __int8 *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(id, unint64_t, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v4 = *v2;
  if (a1 == 9)
  {
    v6 = *(_QWORD *)(v4 + 408);
    v5 = *(_QWORD *)(v4 + 416);
    AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, *(_QWORD *)(v5 + 8), v6, &protocol requirements base descriptor for P2PControls, &associated type descriptor for P2PControls.Driver);
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v5, v6, AssociatedTypeWitness, &protocol requirements base descriptor for AWDLController, &associated conformance descriptor for AWDLController.P2PControls.Driver: AWDLWiFiDriver);
    v9 = *(void (**)(_QWORD, uint64_t, uint64_t))(AssociatedConformanceWitness + 112);
    v10 = swift_checkMetadataState(0, AssociatedTypeWitness);
    v9(a2 & 1, v10, AssociatedConformanceWitness);
  }
  else
  {
    v26 = (a1 == 17) & a2;
    v12 = WiFiP2PSPITransactionType.serviceIdentifier.getter(a1);
    v13 = (unsigned __int8 *)WiFiAddress.zero.unsafeMutableAddressor();
    v25 = *v13;
    v14 = v13[1];
    v15 = (unint64_t)*(unsigned int *)(v13 + 2) << 16;
    v16 = a1 - 1;
    v17 = 1;
    switch(v16)
    {
      case 0:
        break;
      case 1:
        v17 = 2;
        break;
      case 2:
        v17 = 3;
        break;
      case 3:
        v17 = 4;
        break;
      case 11:
        v17 = 5;
        break;
      case 17:
        v17 = 6;
        break;
      default:
        v17 = 0;
        break;
    }
    v20 = v4 + 408;
    v19 = *(_QWORD *)(v4 + 408);
    v18 = *(_QWORD *)(v20 + 8);
    v21 = swift_getAssociatedTypeWitness(255, *(_QWORD *)(v18 + 8), v19, &protocol requirements base descriptor for P2PControls, &associated type descriptor for P2PControls.Driver);
    v22 = swift_getAssociatedConformanceWitness(v18, v19, v21, &protocol requirements base descriptor for AWDLController, &associated conformance descriptor for AWDLController.P2PControls.Driver: AWDLWiFiDriver);
    v23 = *(void (**)(id, unint64_t, uint64_t, _QWORD, _QWORD, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))(v22 + 72);
    v24 = swift_checkMetadataState(0, v21);
    v23(v12, v25 | (v14 << 8) | v15, v17, 0, 0, v26, 0x1000000000000, a2 & 1, v24, v22);

  }
}

id WiFiP2PSPITransactionType.serviceIdentifier.getter(uint64_t a1)
{
  if ((unint64_t)(a1 - 5) > 0xC)
    return AWDLTrafficRegistrationServiceCentralizedAirTimeSchedulerPolicy;
  else
    return *(id *)*(&off_1003E5CF0 + a1 - 5);
}

uint64_t sub_10000F3B4(uint64_t a1, uint64_t a2, int a3, __int16 a4, unsigned __int16 a5, uint64_t a6, unint64_t a7, char a8)
{
  return sub_10000F3E4(a1, a2 & 0xFFFFFFFFFFFFLL, a3, a4, a5, a6, a7 & 0xFFFFFFFFFFFFLL | ((HIWORD(a7) & 1) << 48), a8);
}

uint64_t sub_10000F3E4(uint64_t a1, uint64_t a2, int a3, __int16 a4, unsigned __int16 a5, uint64_t a6, uint64_t a7, char a8)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t KeyPath;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v30;
  _BYTE v31[176];
  uint64_t v32;
  _BYTE v33[16];
  _BYTE *v34;
  uint64_t v35;
  uint64_t v36;
  _OWORD v37[11];
  uint64_t v38;
  _QWORD v39[3];

  *(_WORD *)&v31[8] = 0;
  memset(&v31[12], 0, 156);
  *(_QWORD *)v31 = 1;
  *(_DWORD *)&v31[168] = a8 & 1;
  *(_DWORD *)&v31[172] = sub_10000F6D4(a6);
  LOWORD(v32) = a4;
  *(_DWORD *)((char *)&v32 + 2) = a5;
  v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v16 = v15;
  KeyPath = swift_getKeyPath(&unk_10033F258);
  v34 = v31;
  v35 = KeyPath;
  v36 = 128;
  v18 = (uint64_t)sub_100047824((_QWORD *(*)(uint64_t *__return_ptr, _QWORD *))sub_10000642C, (uint64_t)v33, v14, v16);
  swift_bridgeObjectRelease(v16);
  swift_release(KeyPath);
  v19 = 127;
  if (v18 < 127)
    v19 = v18;
  if (v19 < 0)
    __break(1u);
  *(_DWORD *)&v31[12] = v19;
  *(_DWORD *)&v31[144] = a3;
  *(_WORD *)&v31[4] = a2;
  v31[6] = BYTE2(a2);
  v31[7] = BYTE3(a2);
  v31[8] = BYTE4(a2);
  v31[9] = BYTE5(a2);
  if ((a7 & 0x1000000000000) == 0)
  {
    v20 = sub_100012C44(&qword_100403E88);
    v21 = swift_allocObject(v20, 38, 7);
    *(_OWORD *)(v21 + 16) = xmmword_10033B190;
    *(_WORD *)(v21 + 32) = a7;
    *(_BYTE *)(v21 + 34) = BYTE2(a7);
    *(_BYTE *)(v21 + 35) = BYTE3(a7);
    *(_BYTE *)(v21 + 36) = BYTE4(a7);
    *(_BYTE *)(v21 + 37) = BYTE5(a7);
    v22 = sub_1001068EC(v21);
    v24 = v23;
    swift_bridgeObjectRelease(v21);
    *(_QWORD *)&v37[0] = v22;
    *((_QWORD *)&v37[0] + 1) = v24;
    v25 = sub_100068D00();
    DataProtocol.copyBytes(to:)(&v31[152], &v31[168], &type metadata for Data, v25);
    sub_10000E614(v22, v24);
  }
  v37[8] = *(_OWORD *)&v31[128];
  v37[9] = *(_OWORD *)&v31[144];
  v37[10] = *(_OWORD *)&v31[160];
  v38 = v32;
  v37[4] = *(_OWORD *)&v31[64];
  v37[5] = *(_OWORD *)&v31[80];
  v37[6] = *(_OWORD *)&v31[96];
  v37[7] = *(_OWORD *)&v31[112];
  v37[0] = *(_OWORD *)v31;
  v37[1] = *(_OWORD *)&v31[16];
  v37[2] = *(_OWORD *)&v31[32];
  v37[3] = *(_OWORD *)&v31[48];
  v26 = v30[5];
  v27 = v30[2];
  v28 = v30[3];
  swift_retain(v26);
  swift_bridgeObjectRetain(v28);
  AppleDevice.setRequest(requestType:data:on:)(0xA4uLL, (uint64_t)v37, (uint64_t)v39, 0, v27, v28);
  swift_bridgeObjectRelease(v28);
  return swift_release(v26);
}

uint64_t sub_10000F6D4(uint64_t a1)
{
  uint64_t v1;

  if ((a1 & 1) != 0)
  {
    if ((a1 & 2) != 0)
    {
      v1 = 10;
      if ((a1 & 0x100000000) != 0)
        goto LABEL_4;
    }
    else
    {
      v1 = 2;
      if ((a1 & 0x100000000) != 0)
        goto LABEL_4;
    }
  }
  else
  {
    if ((a1 & 2) == 0)
    {
      v1 = 0;
      if ((a1 & 0x100000000) == 0)
        goto LABEL_5;
      goto LABEL_4;
    }
    v1 = 8;
    if ((a1 & 0x100000000) != 0)
LABEL_4:
      v1 = v1 | 0x20;
  }
LABEL_5:
  if ((a1 & 0x80000000) == 0)
  {
    if ((a1 & 0x40000000) == 0)
      goto LABEL_7;
LABEL_14:
    v1 = v1 | 0x80;
    if ((a1 & 0x20000000) == 0)
      return v1;
    return v1 | 0x200;
  }
  v1 = v1 | 0x40;
  if ((a1 & 0x40000000) != 0)
    goto LABEL_14;
LABEL_7:
  if ((a1 & 0x20000000) != 0)
    return v1 | 0x200;
  return v1;
}

void *WiFiAddress.zero.unsafeMutableAddressor()
{
  return &static WiFiAddress.zero;
}

void AppleDevice.setRequest(requestType:data:on:)(unint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  sub_10000F79C(a1, a2, a3, a4, a5, a6, 263, (uint64_t (*)(_QWORD, _QWORD *))&_Apple80211RawSet);
}

void sub_10000F79C(unint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, int a7, uint64_t (*a8)(_QWORD, _QWORD *))
{
  uint64_t v8;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  os_unfair_lock_s *v19;
  unsigned int v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[2];
  uint64_t v29;
  int v30;
  uint64_t v31;
  _BYTE v32[24];

  v31 = 0;
  v28[1] = 0;
  v29 = 0;
  v28[0] = 0;
  v30 = 0;
  sub_10000FAF4((uint64_t)v28, a1, a2, a3, a4 & 1, a5, a6);
  if (a1 == 0xFFFFFFFF)
    HIDWORD(v29) = a7;
  v14 = *(_QWORD *)(v8 + 24);
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v14 + 16));
  swift_beginAccess(v8 + 32, v32, 32, 0);
  v15 = *(_QWORD *)(v8 + 32);
  if (!*(_QWORD *)(v15 + 16))
    goto LABEL_9;
  swift_bridgeObjectRetain(a6);
  v16 = sub_10000FA00(a5, a6);
  if ((v17 & 1) == 0)
  {
    swift_bridgeObjectRelease(a6);
LABEL_9:
    swift_endAccess(v32);
    v25 = sub_100012C84();
    v26 = swift_allocError(&type metadata for WiFiError, v25, 0, 0);
    *(_OWORD *)v27 = xmmword_10033B150;
    *(_BYTE *)(v27 + 16) = 1;
    swift_willThrow(v26);
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v14 + 16));
    return;
  }
  v18 = *(_QWORD *)(*(_QWORD *)(v15 + 56) + 8 * v16);
  swift_endAccess(v32);
  swift_retain(v18);
  swift_bridgeObjectRelease(a6);
  v19 = *(os_unfair_lock_s **)(v14 + 16);
  swift_retain(v18);
  os_unfair_lock_unlock(v19);
  v20 = a8(*(_QWORD *)(v18+ OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_reference), v28);
  if (v20)
  {
    v21 = v20;
    v22 = sub_100012C84();
    v23 = swift_allocError(&type metadata for WiFiError, v22, 0, 0);
    *(_QWORD *)v24 = v21;
    *(_QWORD *)(v24 + 8) = 0;
    *(_BYTE *)(v24 + 16) = 0;
    swift_willThrow(v23);
  }
  swift_release_n(v18, 2);
}

uint64_t sub_10000F988(uint64_t a1, uint64_t a2, void (*a3)(_QWORD *, uint64_t, uint64_t), uint64_t (*a4)(uint64_t, uint64_t, Swift::Int))
{
  Swift::Int v7;
  _QWORD v10[9];

  Hasher.init(_seed:)(v10);
  a3(v10, a1, a2);
  v7 = Hasher._finalize()();
  return a4(a1, a2, v7);
}

uint64_t sub_10000FA00(uint64_t a1, uint64_t a2)
{
  return sub_10000F988(a1, a2, (void (*)(_QWORD *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_10000FA14);
}

unint64_t sub_10000FA14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  _QWORD *v13;
  BOOL v14;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      v12 = ~v5;
      do
      {
        v6 = (v6 + 1) & v12;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v13 = (_QWORD *)(v9 + 16 * v6);
        v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

uint64_t sub_10000FAF4(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7)
{
  uint64_t KeyPath;
  uint64_t result;
  unint64_t v16;
  uint64_t v17;
  _BYTE v18[16];
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  KeyPath = swift_getKeyPath(&unk_10033AEB0);
  v19 = a1;
  v20 = KeyPath;
  v21 = 16;
  sub_100047824((_QWORD *(*)(uint64_t *__return_ptr, _QWORD *))sub_10000642C, (uint64_t)v18, a6, a7);
  result = swift_release(KeyPath);
  if ((a2 & 0x8000000000000000) != 0)
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
  }
  else
  {
    v16 = HIDWORD(a2);
    if (!HIDWORD(a2))
    {
      v17 = 0;
      *(_DWORD *)(a1 + 16) = a2;
      if ((a5 & 1) != 0 || !a3)
        goto LABEL_7;
      LODWORD(v16) = a4 - a3;
      if (a4 - a3 < (uint64_t)&_mh_execute_header)
      {
        v17 = a3;
LABEL_7:
        *(_DWORD *)(a1 + 24) = v16;
        *(_QWORD *)(a1 + 32) = v17;
        return result;
      }
    }
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 3455, 0);
  }
  __break(1u);
  return result;
}

uint64_t sub_10000FC44(uint64_t a1, unint64_t a2, uint64_t a3, int a4, _QWORD *a5)
{
  uint64_t *v5;
  unint64_t v6;
  uint64_t *v7;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int8 v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  id v25;
  void *v26;
  void (*v27)(id *);
  uint64_t v28;
  char v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t result;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned __int8 v54;
  uint64_t v55;
  uint64_t v56;
  unsigned __int8 v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  uint64_t v71;
  unint64_t v72;
  int v73;
  uint64_t v74;
  __int128 v75;
  __int128 v76;
  int v77;
  char v78;
  uint64_t v79;
  __int128 v80;
  __int128 v81;
  uint64_t v82;

  v70 = a5;
  v71 = a3;
  v74 = a1;
  v6 = v5[3];
  if (v6 >> 62 != 2)
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD00000000000003FLL, 0x8000000100368890, "wifip2pdCore/P2PActivityCoordinator.swift", 41, 2, 282, 0);
    __break(1u);
    return result;
  }
  v7 = v5;
  v9 = a2;
  v10 = v5[1];
  v69 = v5 + 1;
  v11 = *v5;
  v12 = v5[2];
  v13 = v7[4];
  v14 = ~(_BYTE)a2;
  v15 = *((unsigned __int8 *)v7 + 40);
  swift_bridgeObjectRetain_n(v11, 5);
  swift_bridgeObjectRetain_n(v10, 3);
  *(_QWORD *)&v76 = v13;
  v73 = v15;
  sub_100010D88(v11, v10, v12, v6, v13, v15);
  *(_QWORD *)&v75 = v12;
  v72 = v6;
  if (v14)
  {
    v16 = v74;
    sub_100010CE4(v74, v9);
    sub_100010CCC(v12, v6);
  }
  else
  {
    v16 = v12;
    v9 = v6;
  }
  sub_100010CE4(v16, v9);
  v17 = v76;
  v77 = v73;
  if ((_BYTE)a4 != 0xFF)
  {
    v17 = v71;
    sub_100010CE4(v71, a4);
    sub_100010CCC(v76, v73);
    v77 = a4;
  }
  if ((_BYTE)v9 == 0xFF)
  {
    v18 = v77;
    sub_100010CE4(v17, v77);
    swift_bridgeObjectRelease_n(v10, 2);
    swift_bridgeObjectRelease_n(v11, 4);
    v19 = v75;
LABEL_25:
    sub_100011E24(v11, v10, v19, v72, v76, v73);
    swift_bridgeObjectRelease(v10);
    swift_bridgeObjectRelease(v11);
    sub_100010CCC(v16, v9);
    sub_100010CCC(v17, v18);
    result = 0;
    *v7 = v11;
    v7[1] = v10;
    v7[2] = v16;
    v7[3] = v9 | 0x8000000000000000;
    v7[4] = v17;
    *((_BYTE *)v7 + 40) = v18;
    return result;
  }
  v18 = v77;
  v19 = v75;
  if ((_BYTE)v77 == 0xFF)
  {
    sub_100010D08(v16, v9 & 1);
    swift_bridgeObjectRelease_n(v10, 2);
    swift_bridgeObjectRelease_n(v11, 4);
    sub_100010CCC(v16, v9);
    goto LABEL_25;
  }
  sub_100010D08(v17, v77 & 1);
  v68 = v11;
  swift_bridgeObjectRelease(v11);
  v71 = v10;
  swift_bridgeObjectRelease(v10);
  v66 = v17;
  sub_100010CCC(v17, v77);
  v20 = v9 & v77;
  v21 = v16;
  if ((v9 & v77 & 1) == 0)
  {
    sub_100010CCC(v16, v9);
    v21 = 0;
  }
  v74 = v16;
  v67 = v9;
  v22 = *(_QWORD *)(v71 + 16);
  if (v22)
  {
    v23 = (char *)(v71 + 56);
    v24 = *(_QWORD *)(v71 + 16);
    do
    {
      v26 = (void *)*((_QWORD *)v23 - 3);
      v27 = (void (*)(id *))*((_QWORD *)v23 - 2);
      v28 = *((_QWORD *)v23 - 1);
      v29 = *v23;
      if ((v20 & 1) != 0)
      {
        v25 = v26;
        sub_100013720((uint64_t)v27, v28);
        sub_100010D08(v21, 1);
        sub_1002360B0(v21, v27, v28, v29);
        sub_100010CFC(v21, 1);

      }
      else
      {
        *(_QWORD *)&v80 = 0;
        v30 = v26;
        sub_100013720((uint64_t)v27, v28);
        v27((id *)&v80);

      }
      sub_100013728((uint64_t)v27, v28);
      v23 += 32;
      --v24;
    }
    while (v24);
  }
  v31 = v71;
  swift_bridgeObjectRelease(v71);
  v32 = v68;
  sub_100011E24(v68, v71, v75, v72, v76, v73);
  *v7 = 0;
  v7[1] = 0;
  v7[2] = 0;
  *(_OWORD *)(v7 + 3) = xmmword_10035E040;
  *((_BYTE *)v7 + 40) = 0;
  swift_bridgeObjectRelease(v31);
  swift_bridgeObjectRelease_n(v32, 2);
  if ((v20 & 1) == 0)
  {
    v41 = swift_bridgeObjectRelease(v32);
    *(_QWORD *)&v76 = &v65;
    v79 = v32;
    v78 = 0;
    __chkstk_darwin(v41);
    v42 = v70[3];
    v59 = v70[2];
    v60 = v42;
    v43 = v70[5];
    v61 = v70[4];
    v62 = v43;
    v63 = v70[6];
    v64 = v7;
    v44 = sub_100012C44(&qword_10040C9C8);
    *(_QWORD *)&v80 = v59;
    *((_QWORD *)&v80 + 1) = v42;
    *(_QWORD *)&v81 = v61;
    *((_QWORD *)&v81 + 1) = v43;
    v82 = v63;
    v45 = _s16P2PActivityStateO14ActionRequiredOMa(0, (uint64_t)&v80);
    v46 = sub_100011770((unint64_t *)&unk_10040C9D0, &qword_10040C9C8, (const char *)&protocol conformance descriptor for [A]);
    Sequence.reduce<A>(_:_:)(&v80, &v78, sub_10024A48C, &v58, v44, v45, v46);
    v47 = v79;
    swift_bridgeObjectRelease(v31);
    swift_bridgeObjectRelease(v32);
    swift_bridgeObjectRelease(v47);
    sub_100010CCC(v74, v67);
    sub_100010CCC(v66, v77);
    return v80;
  }
  if (v22)
  {
    v33 = v68;
    swift_bridgeObjectRelease(v68);
    *v7 = sub_100236F3C((uint64_t)_swiftEmptyArrayStorage);
    v34 = v69;
    *v69 = 0;
    v34[1] = 0;
    *(_OWORD *)(v7 + 3) = xmmword_10035E050;
    *((_BYTE *)v7 + 40) = 0;
    v35 = *(_QWORD *)(v33 + 16);
    if (v35)
    {
      v36 = *((_OWORD *)v70 + 1);
      v75 = *((_OWORD *)v70 + 2);
      v76 = v36;
      v37 = v70[6];
      swift_bridgeObjectRetain(v33);
      v38 = v33 + 56;
      do
      {
        v80 = v76;
        v81 = v75;
        v82 = v37;
        _s16P2PActivityStateOMa(0, (uint64_t)&v80);
        sub_1000057B4();
        v38 += 32;
        --v35;
      }
      while (v35);
      v39 = v68;
      swift_bridgeObjectRelease_n(v68, 2);
    }
    else
    {
      swift_bridgeObjectRelease(v33);
      v39 = v33;
    }
    v49 = v7[3];
    if (v49 >> 62 == 1)
    {
      v50 = *v7;
      v51 = v7[1];
      v52 = v7[2];
      v53 = v7[4];
      v54 = *((_BYTE *)v7 + 40);
      v55 = *(_QWORD *)(*v7 + 16);
      sub_100010CFC(v21, 1);
      if (!v55)
      {
        sub_100011E24(v50, v51, v52, v49, v53, v54);
        swift_bridgeObjectRelease(v71);
        swift_bridgeObjectRelease(v39);
        sub_100010CCC(v74, v67);
        sub_100010CCC(v66, v77);
        *v7 = (uint64_t)_swiftEmptyArrayStorage;
        v7[1] = (uint64_t)_swiftEmptyArrayStorage;
        *((_OWORD *)v7 + 1) = xmmword_10035E060;
        v7[4] = 0;
        *((_BYTE *)v7 + 40) = -1;
        return 2;
      }
    }
    else
    {
      sub_100010CFC(v21, 1);
    }
    swift_bridgeObjectRelease(v39);
    swift_bridgeObjectRelease(v71);
    v56 = v74;
    v57 = v67;
  }
  else
  {
    v48 = *(_QWORD *)(v68 + 16);
    swift_bridgeObjectRelease(v68);
    sub_100010CFC(v21, 1);
    swift_bridgeObjectRelease(v71);
    swift_bridgeObjectRelease(v68);
    if (v48)
    {
      sub_100010CCC(v74, v67);
      sub_100010CCC(v66, v77);
      *v7 = v68;
      v7[1] = (uint64_t)_swiftEmptyArrayStorage;
      *((_OWORD *)v7 + 1) = xmmword_10035E030;
      v7[4] = 0;
      *((_BYTE *)v7 + 40) = -1;
      return 1;
    }
    swift_bridgeObjectRelease(v68);
    v56 = v74;
    v57 = v67;
  }
  sub_100010CCC(v56, v57);
  sub_100010CCC(v66, v77);
  return 0;
}

uint64_t sub_1000103CC(uint64_t a1, unint64_t a2, uint64_t a3, int a4, _QWORD *a5)
{
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v12;
  int v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(_QWORD *@<X8>);
  void (*v20)(id *);
  uint64_t v21;
  char v22;
  id v23;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v25;
  uint64_t v26;
  _BOOL8 v27;
  uint64_t v28;
  uint64_t *v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  unsigned __int8 v38;
  uint64_t result;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  unint64_t v44;
  id v45;
  void *v46;
  void (*v47)(uint64_t **);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unsigned __int8 v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  Swift::String v69;
  uint64_t v70;
  uint64_t *v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  unint64_t v80;
  unint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  char v90;
  uint64_t *v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  char v96;
  _QWORD *v97;
  unint64_t v98;

  v87 = a3;
  v6 = v5[1];
  v82 = v5 + 1;
  v83 = a5;
  v7 = *v5;
  v8 = v5[2];
  v9 = v5[3];
  v10 = v5[4];
  LODWORD(v5) = *((unsigned __int8 *)v5 + 40);
  if (v9 >> 62)
    goto LABEL_49;
  v12 = a2;
  v14 = ~(_BYTE)a2;
  swift_bridgeObjectRetain_n(v6, 4);
  swift_bridgeObjectRetain_n(v7, 2);
  v89 = v10;
  sub_100010D88(v7, v6, v8, v9, v10, v5);
  v88 = (uint64_t *)v8;
  if (v14)
  {
    sub_100010CE4(a1, v12);
    sub_100010CCC(v8, v9);
  }
  else
  {
    a1 = v8;
    v12 = v9;
  }
  v86 = a1;
  sub_100010CE4(a1, v12);
  v15 = v89;
  v16 = v5;
  if ((_BYTE)a4 != 0xFF)
  {
    v15 = v87;
    sub_100010CE4(v87, a4);
    sub_100010CCC(v89, v5);
    LODWORD(v5) = a4;
  }
  if ((_BYTE)v12 == 0xFF)
  {
    sub_100010CE4(v15, v5);
    swift_bridgeObjectRelease(v7);
    swift_bridgeObjectRelease_n(v6, 3);
    sub_100011E24(v7, v6, (uint64_t)v88, v9, v89, v16);
    swift_bridgeObjectRelease(v6);
    swift_bridgeObjectRelease(v7);
    v38 = v5;
    v17 = v86;
LABEL_33:
    sub_100010CCC(v15, v38);
    result = 0;
    v40 = v85;
    *(_QWORD *)v85 = v7;
    *(_QWORD *)(v40 + 8) = v6;
    *(_QWORD *)(v40 + 16) = v17;
    *(_QWORD *)(v40 + 24) = v12;
    *(_QWORD *)(v40 + 32) = v15;
    *(_BYTE *)(v40 + 40) = (_BYTE)v5;
    return result;
  }
  v17 = v86;
  if ((_BYTE)v5 == 0xFF)
  {
    sub_100010D08(v86, v12 & 1);
    swift_bridgeObjectRelease(v7);
    swift_bridgeObjectRelease_n(v6, 3);
    sub_100010CCC(v86, v12);
    sub_100011E24(v7, v6, (uint64_t)v88, v9, v89, v16);
    swift_bridgeObjectRelease(v6);
    swift_bridgeObjectRelease(v7);
    sub_100010CCC(v86, v12);
    v38 = -1;
    goto LABEL_33;
  }
  sub_100010D08(v15, v5 & 1);
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(v6);
  sub_100010CCC(v15, v5);
  LODWORD(v9) = v12 & v5;
  v18 = v86;
  if ((v12 & v5 & 1) == 0)
  {
    sub_100010CCC(v86, v12);
    v18 = 0;
  }
  v78 = v15;
  v79 = (int)v5;
  v80 = v12;
  v81 = v6;
  v10 = *(_QWORD *)(v7 + 16);
  v87 = v18;
  v84 = v7;
  v19 = 0;
  if (!v10)
  {
    v5 = (uint64_t *)&_swiftEmptyDictionarySingleton;
LABEL_35:
    swift_bridgeObjectRelease(v84);
    v41 = v81;
    swift_bridgeObjectRelease(v81);
    if ((v9 & 1) != 0)
    {
      swift_bridgeObjectRelease(v81);
      v42 = *(_QWORD *)(v81 + 16);
      if (v42)
      {
        v43 = v5;
        swift_bridgeObjectRetain(v81);
        v44 = v81 + 56;
        do
        {
          v46 = *(void **)(v44 - 24);
          v47 = *(void (**)(uint64_t **))(v44 - 16);
          v48 = *(_QWORD *)(v44 - 8);
          v91 = 0;
          v45 = v46;
          sub_100013720((uint64_t)v47, v48);
          v47(&v91);

          sub_100013728((uint64_t)v47, v48);
          v44 += 32;
          --v42;
        }
        while (v42);
        swift_bridgeObjectRelease(v81);
        v5 = v43;
        v18 = v87;
      }
      sub_100010CFC(v18, 1);
      swift_bridgeObjectRelease(v81);
      swift_bridgeObjectRelease(v5);
      v67 = v85;
      sub_100011E24(*(_QWORD *)v85, *(_QWORD *)(v85 + 8), *(_QWORD *)(v85 + 16), *(_QWORD *)(v85 + 24), *(_QWORD *)(v85 + 32), *(_BYTE *)(v85 + 40));
      swift_bridgeObjectRelease(v81);
      swift_bridgeObjectRelease(v84);
      sub_100010CCC(v86, v80);
      sub_100010CCC(v78, v79);
      sub_100012318((uint64_t)v19, 0);
      result = 0;
      *(_QWORD *)v85 = 0;
      *(_QWORD *)(v67 + 8) = 0;
      *(_QWORD *)(v67 + 16) = 0;
      *(_OWORD *)(v67 + 24) = xmmword_10035E040;
      *(_BYTE *)(v67 + 40) = 0;
    }
    else
    {
      v49 = v5[2];
      swift_bridgeObjectRelease(v81);
      if (v49)
      {
        v50 = v85;
        v51 = (uint64_t)v5;
        v53 = *(_QWORD *)v85;
        v52 = *(_QWORD *)(v85 + 8);
        v54 = *(_QWORD *)(v85 + 16);
        v55 = *(_QWORD *)(v85 + 24);
        v56 = *(_QWORD *)(v85 + 32);
        v57 = *(_BYTE *)(v85 + 40);
        v58 = v51;
        v89 = v51;
        swift_bridgeObjectRetain(v51);
        v59 = sub_100011E24(v53, v52, v54, v55, v56, v57);
        v88 = &v77;
        *(_QWORD *)v85 = v58;
        v60 = v82;
        *v82 = 0;
        v60[1] = 0;
        *(_OWORD *)(v50 + 24) = xmmword_10035E050;
        *(_BYTE *)(v50 + 40) = 0;
        v97 = (_QWORD *)v41;
        v90 = 0;
        __chkstk_darwin(v59);
        v61 = v83[3];
        v71 = (uint64_t *)v83[2];
        v72 = v61;
        v62 = v83[5];
        v73 = v83[4];
        v74 = v62;
        v75 = v83[6];
        v76 = v50;
        v63 = sub_100012C44(&qword_10040C9C8);
        v91 = v71;
        v92 = v61;
        v93 = v73;
        v94 = v62;
        v95 = v75;
        v64 = _s16P2PActivityStateO14ActionRequiredOMa(0, (uint64_t)&v91);
        v65 = sub_100011770((unint64_t *)&unk_10040C9D0, &qword_10040C9C8, (const char *)&protocol conformance descriptor for [A]);
        Sequence.reduce<A>(_:_:)(&v91, &v90, sub_10024A470, &v70, v63, v64, v65);
        v66 = v97;
        swift_bridgeObjectRelease(v81);
        swift_bridgeObjectRelease(v84);
        swift_bridgeObjectRelease(v89);
        swift_bridgeObjectRelease(v66);
        sub_100010CCC(v86, v80);
        sub_100010CCC(v78, v79);
        sub_100012318((uint64_t)v19, 0);
        return v91;
      }
      else
      {
        swift_bridgeObjectRelease(v5);
        v68 = v85;
        sub_100011E24(*(_QWORD *)v85, *(_QWORD *)(v85 + 8), *(_QWORD *)(v85 + 16), *(_QWORD *)(v85 + 24), *(_QWORD *)(v85 + 32), *(_BYTE *)(v85 + 40));
        swift_bridgeObjectRelease(v81);
        swift_bridgeObjectRelease(v84);
        sub_100010CCC(v86, v80);
        sub_100010CCC(v78, v79);
        sub_100012318((uint64_t)v19, 0);
        *(_QWORD *)v85 = _swiftEmptyArrayStorage;
        *(_QWORD *)(v68 + 8) = v41;
        *(_OWORD *)(v68 + 16) = xmmword_10035E060;
        *(_QWORD *)(v68 + 32) = 0;
        *(_BYTE *)(v68 + 40) = -1;
        return 2;
      }
    }
    return result;
  }
  v7 += 56;
  v5 = (uint64_t *)&_swiftEmptyDictionarySingleton;
  LODWORD(v88) = v9;
  while (1)
  {
    v20 = *(void (**)(id *))(v7 - 16);
    v21 = *(_QWORD *)(v7 - 8);
    v22 = *(_BYTE *)v7;
    v23 = *(id *)(v7 - 24);
    v8 = (uint64_t)v23;
    if ((v9 & 1) != 0)
    {
      sub_100013720((uint64_t)v20, v21);
      sub_100010D08(v18, 1);
      sub_1002360B0(v18, v20, v21, v22);
      sub_100010CFC(v18, 1);

      sub_100013728((uint64_t)v20, v21);
      goto LABEL_14;
    }
    v9 = (unint64_t)v23;
    v89 = v21;
    sub_100013720((uint64_t)v20, v21);
    sub_100012318((uint64_t)v19, 0);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v5);
    v91 = v5;
    v6 = sub_100010E24(v9);
    v26 = v5[2];
    v27 = (v25 & 1) == 0;
    v28 = v26 + v27;
    if (__OFADD__(v26, v27))
      break;
    v8 = v25;
    if (v5[3] >= v28)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_10032C278();
        v5 = v91;
      }
    }
    else
    {
      sub_100005EC0(v28, isUniquelyReferenced_nonNull_native);
      isUniquelyReferenced_nonNull_native = type metadata accessor for XPCSession(0);
      LOBYTE(v5) = (_BYTE)v91;
      v29 = v91;
      v30 = sub_100010E24(v9);
      if ((v8 & 1) != (v31 & 1))
        goto LABEL_48;
      v6 = v30;
      v5 = v29;
      v18 = v87;
    }
    swift_bridgeObjectRelease(0x8000000000000000);
    if ((v8 & 1) != 0)
    {
      swift_bridgeObjectRetain(v5);
    }
    else
    {
      v5[(v6 >> 6) + 8] |= 1 << v6;
      v32 = 8 * v6;
      *(_QWORD *)(v5[6] + v32) = v9;
      *(_QWORD *)(v5[7] + v32) = 0;
      v33 = v5[2];
      v8 = v33 + 1;
      isUniquelyReferenced_nonNull_native = (uint64_t)v5;
      LOBYTE(v5) = __OFADD__(v33, 1);
      swift_bridgeObjectRetain(isUniquelyReferenced_nonNull_native);
      if ((v5 & 1) != 0)
        goto LABEL_47;
      *(_QWORD *)(isUniquelyReferenced_nonNull_native + 16) = v8;
      v34 = (id)v9;
      v5 = (uint64_t *)isUniquelyReferenced_nonNull_native;
    }
    v8 = v5[7];
    swift_bridgeObjectRelease(v5);
    v35 = *(_QWORD *)(v8 + 8 * v6);
    v36 = __OFADD__(v35, 1);
    v37 = v35 + 1;
    if (v36)
      goto LABEL_46;
    *(_QWORD *)(v8 + 8 * v6) = v37;

    v91 = 0;
    v20((id *)&v91);

    sub_100013728((uint64_t)v20, v89);
    v19 = sub_100074270;
    LOBYTE(v9) = (_BYTE)v88;
LABEL_14:
    v7 += 32;
    if (!--v10)
      goto LABEL_35;
  }
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(isUniquelyReferenced_nonNull_native);
  __break(1u);
LABEL_49:
  v91 = 0;
  v92 = 0xE000000000000000;
  _StringGuts.grow(_:)(63);
  v97 = v91;
  v98 = v92;
  v69._object = (void *)0x8000000100368850;
  v69._countAndFlagsBits = 0xD00000000000003DLL;
  String.append(_:)(v69);
  v91 = (uint64_t *)v7;
  v92 = v6;
  v93 = v8;
  v94 = v9;
  v95 = v10;
  v96 = (char)v5;
  DefaultStringInterpolation.appendInterpolation<A>(_:)(&v91, v83);
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, v97, v98, "wifip2pdCore/P2PActivityCoordinator.swift", 41, 2, 243, 0);
  __break(1u);
  return result;
}

uint64_t sub_100010CCC(uint64_t result, unsigned __int8 a2)
{
  if (a2 != 255)
    return sub_100010CFC(result, a2 & 1);
  return result;
}

uint64_t sub_100010CE4(uint64_t result, unsigned __int8 a2)
{
  if (a2 != 255)
    return sub_100010D08(result, a2 & 1);
  return result;
}

uint64_t sub_100010CFC(uint64_t a1, char a2)
{
  uint64_t result;

  if ((a2 & 1) != 0)
    return swift_errorRelease();
  return result;
}

uint64_t sub_100010D08(uint64_t a1, char a2)
{
  uint64_t result;

  if ((a2 & 1) != 0)
    return swift_errorRetain();
  return result;
}

uint64_t sub_100010D14(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  v8 = *(_BYTE *)(a2 + 40);
  sub_100010D88(*(_QWORD *)a2, v4, v5, v6, v7, v8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_BYTE *)(a1 + 40) = v8;
  return a1;
}

uint64_t sub_100010D88(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unsigned __int8 a6)
{
  unsigned __int8 v8;
  unint64_t v11;

  v8 = a4;
  v11 = a4 >> 62;
  if (a4 >> 62 == 2)
  {
LABEL_4:
    swift_bridgeObjectRetain(result);
    swift_bridgeObjectRetain(a2);
    sub_100010CE4(a3, v8);
    return sub_100010CE4(a5, a6);
  }
  if ((_DWORD)v11 != 1)
  {
    if ((_DWORD)v11)
      return result;
    goto LABEL_4;
  }
  return swift_bridgeObjectRetain(result);
}

unint64_t sub_100010E24(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  v2 = v1;
  v4 = NSObject._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
  return sub_100010E54(a1, v4);
}

unint64_t sub_100010E54(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t i;
  id v6;
  char v7;
  uint64_t v8;
  id v9;
  char v10;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  i = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
  {
    type metadata accessor for XPCSession(0);
    v6 = *(id *)(*(_QWORD *)(v2 + 48) + 8 * i);
    v7 = static NSObject.== infix(_:_:)();

    if ((v7 & 1) == 0)
    {
      v8 = ~v4;
      for (i = (i + 1) & v8; ((*(_QWORD *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v8)
      {
        v9 = *(id *)(*(_QWORD *)(v2 + 48) + 8 * i);
        v10 = static NSObject.== infix(_:_:)();

        if ((v10 & 1) != 0)
          break;
      }
    }
  }
  return i;
}

uint64_t sub_100010F5C(uint64_t a1, int a2, Swift::UInt a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  os_log_type_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _BYTE *v49;
  uint64_t v50;
  uint64_t v51;
  _BYTE v52[24];
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _BYTE *v64;
  Swift::UInt v65;
  _QWORD *v66;
  uint64_t aBlock[5];
  uint64_t v68;
  char v69[32];

  v62 = a6;
  v63 = a7;
  v60 = a4;
  v61 = a5;
  v65 = a3;
  v11 = type metadata accessor for DispatchWorkItemFlags(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin();
  v64 = &v52[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v14 = type metadata accessor for DispatchQoS(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin();
  v17 = &v52[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  swift_beginAccess(a1 + 16, v69, 0, 0);
  result = swift_weakLoadStrong(a1 + 16);
  if (result)
  {
    v19 = result;
    v54 = a1;
    v59 = a2;
    v20 = sub_100012328((uint64_t (*)(void))sub_100012370);
    v21 = v20;
    v57 = v12;
    v58 = v11;
    v56 = v14;
    v55 = v15;
    v53 = a8;
    if (a2 == 1)
    {
      if (v20)
      {
        sub_10000618C(v65);
        v20 = swift_release(v21);
      }
      v22 = Logger.logObject.getter(v20);
      v23 = static os_log_type_t.default.getter();
      if (!os_log_type_enabled(v22, v23))
        goto LABEL_12;
      v24 = (uint8_t *)swift_slowAlloc(12, -1);
      v25 = swift_slowAlloc(32, -1);
      aBlock[0] = v25;
      *(_DWORD *)v24 = 136315138;
      v26 = WiFiP2PSPITransactionType.description.getter(v65);
      v28 = v27;
      v66 = (_QWORD *)sub_100013CC8(v26, v27, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, aBlock);
      swift_bridgeObjectRelease(v28);
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Successfully activated transaction for AWDL: %s", v24, 0xCu);
      swift_arrayDestroy(v25, 1, (char *)&type metadata for Any + 8);
      v29 = v25;
    }
    else
    {
      if (v20)
      {
        sub_100005D68(v65);
        v20 = swift_release(v21);
      }
      v22 = Logger.logObject.getter(v20);
      v30 = static os_log_type_t.default.getter();
      if (!os_log_type_enabled(v22, v30))
        goto LABEL_12;
      v24 = (uint8_t *)swift_slowAlloc(12, -1);
      v31 = swift_slowAlloc(32, -1);
      aBlock[0] = v31;
      *(_DWORD *)v24 = 136315138;
      v32 = WiFiP2PSPITransactionType.description.getter(v65);
      v34 = v33;
      v66 = (_QWORD *)sub_100013CC8(v32, v33, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, aBlock);
      swift_bridgeObjectRelease(v34);
      _os_log_impl((void *)&_mh_execute_header, v22, v30, "Successfully deactivated transaction for AWDL: %s", v24, 0xCu);
      swift_arrayDestroy(v31, 1, (char *)&type metadata for Any + 8);
      v29 = v31;
    }
    swift_slowDealloc(v29, -1, -1);
    swift_slowDealloc(v24, -1, -1);
LABEL_12:

    v35 = v63;
    v36 = v59;
    v38 = v61;
    v37 = v62;
    v39 = v60;
    v40 = (void *)*OS_dispatch_queue.p2p.unsafeMutableAddressor();
    v41 = swift_allocObject(&unk_1003F2960, 89, 7);
    *(_QWORD *)(v41 + 16) = v39;
    *(_QWORD *)(v41 + 24) = v38;
    *(_QWORD *)(v41 + 32) = v37;
    *(_QWORD *)(v41 + 40) = v35;
    v42 = v54;
    *(_QWORD *)(v41 + 48) = v53;
    *(_QWORD *)(v41 + 56) = v42;
    *(_QWORD *)(v41 + 64) = v65;
    *(_BYTE *)(v41 + 72) = v36;
    *(_QWORD *)(v41 + 80) = 0;
    *(_BYTE *)(v41 + 88) = 0;
    aBlock[4] = (uint64_t)sub_100006FCC;
    v68 = v41;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_100006F0C;
    aBlock[3] = (uint64_t)&unk_1003F2978;
    v43 = _Block_copy(aBlock);
    v44 = v40;
    swift_retain(v42);
    v45 = sub_100010D08(0, 0);
    static DispatchQoS.unspecified.getter(v45);
    v66 = _swiftEmptyArrayStorage;
    v46 = sub_100011DE4((unint64_t *)&qword_100408710, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v47 = sub_100012C44((uint64_t *)&unk_100405070);
    v48 = sub_100011770((unint64_t *)&qword_100408720, (uint64_t *)&unk_100405070, (const char *)&protocol conformance descriptor for [A]);
    v49 = v64;
    v50 = v47;
    v51 = v58;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v66, v50, v48, v58, v46);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v17, v49, v43);
    _Block_release(v43);
    swift_release(v19);

    sub_100010CFC(0, 0);
    (*(void (**)(_BYTE *, uint64_t))(v57 + 8))(v49, v51);
    (*(void (**)(_BYTE *, uint64_t))(v55 + 8))(v17, v56);
    return swift_release(v68);
  }
  return result;
}

uint64_t sub_100011770(unint64_t *a1, uint64_t *a2, const char *a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_100013C64(a2);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000117B0(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_100013C64(a2);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for [A], v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t *OS_dispatch_queue.p2p.unsafeMutableAddressor()
{
  if (qword_100404108 != -1)
    swift_once(&qword_100404108, sub_10017E140);
  return &static OS_dispatch_queue.p2p;
}

unint64_t sub_100011830(Swift::UInt a1, int a2)
{
  _QWORD *v2;
  _QWORD *v3;
  int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  const void *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t);
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t result;
  char *v39;
  uint64_t v40;
  char v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unsigned __int8 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  Swift::UInt v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _OWORD v72[2];
  uint64_t v73;
  char v74[8];
  char v75[24];
  uint64_t aBlock;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;

  v3 = v2;
  v6 = a2;
  v7 = (_QWORD *)*v3;
  v8 = type metadata accessor for DispatchWorkItemFlags(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin();
  v11 = (char *)&v58 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for DispatchQoS(0);
  v12 = __chkstk_darwin();
  v15 = (char *)&v58 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v6)
  {
    v65 = v12;
    v64 = v13;
    v16 = (void *)*OS_dispatch_queue.nan.unsafeMutableAddressor();
    v17 = swift_allocObject(&unk_1003F2898, 24, 7);
    v66 = a2;
    v62 = v9;
    v18 = v17;
    swift_weakInit(v17 + 16, v3);
    v19 = swift_allocObject(&unk_1003F28C0, 73, 7);
    v71 = v7[10];
    *(_QWORD *)(v19 + 16) = v71;
    v70 = v7[11];
    *(_QWORD *)(v19 + 24) = v70;
    v69 = v7[12];
    *(_QWORD *)(v19 + 32) = v69;
    v68 = v7[13];
    *(_QWORD *)(v19 + 40) = v68;
    v67 = v7[14];
    *(_QWORD *)(v19 + 48) = v67;
    *(_QWORD *)(v19 + 56) = v18;
    *(_QWORD *)(v19 + 64) = a1;
    *(_BYTE *)(v19 + 72) = a2;
    v80 = (uint64_t)sub_100006FB4;
    v81 = v19;
    aBlock = (uint64_t)_NSConcreteStackBlock;
    v77 = 1107296256;
    v78 = (uint64_t)sub_100006F0C;
    v79 = (unint64_t)&unk_1003F28D8;
    v20 = _Block_copy(&aBlock);
    v63 = a1;
    v21 = v20;
    v22 = v16;
    v23 = swift_retain(v18);
    static DispatchQoS.unspecified.getter(v23);
    *(_QWORD *)&v72[0] = _swiftEmptyArrayStorage;
    v24 = sub_100011DE4((unint64_t *)&qword_100408710, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v61 = v24;
    v25 = sub_100012C44((uint64_t *)&unk_100405070);
    v60 = v25;
    v59 = sub_100011770((unint64_t *)&qword_100408720, (uint64_t *)&unk_100405070, (const char *)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(v72, v25, v59, v8, v24);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v15, v11, v21);
    _Block_release(v21);

    v62 = *(_QWORD *)(v62 + 8);
    ((void (*)(char *, uint64_t))v62)(v11, v8);
    v26 = *(void (**)(char *, uint64_t))(v64 + 8);
    v27 = v65;
    v26(v15, v65);
    v28 = v81;
    swift_release(v18);
    swift_release(v28);
    v29 = (void *)*OS_dispatch_queue.awdl.unsafeMutableAddressor();
    v30 = swift_allocObject(&unk_1003F2898, 24, 7);
    swift_weakInit(v30 + 16, v3);
    v31 = swift_allocObject(&unk_1003F2910, 80, 7);
    v32 = v70;
    *(_QWORD *)(v31 + 16) = v71;
    *(_QWORD *)(v31 + 24) = v32;
    v33 = v68;
    *(_QWORD *)(v31 + 32) = v69;
    *(_QWORD *)(v31 + 40) = v33;
    *(_QWORD *)(v31 + 48) = v67;
    *(_QWORD *)(v31 + 56) = v30;
    *(_BYTE *)(v31 + 64) = v66;
    *(_QWORD *)(v31 + 72) = v63;
    v80 = (uint64_t)sub_100006FA8;
    v81 = v31;
    aBlock = (uint64_t)_NSConcreteStackBlock;
    v77 = 1107296256;
    v78 = (uint64_t)sub_100006F0C;
    v79 = (unint64_t)&unk_1003F2928;
    v34 = _Block_copy(&aBlock);
    v35 = v29;
    v36 = swift_retain(v30);
    static DispatchQoS.unspecified.getter(v36);
    *(_QWORD *)&v72[0] = _swiftEmptyArrayStorage;
    dispatch thunk of SetAlgebra.init<A>(_:)(v72, v60, v59, v8, v61);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v15, v11, v34);
    _Block_release(v34);

    ((void (*)(char *, uint64_t))v62)(v11, v8);
    v26(v15, v27);
    v37 = v81;
    swift_release(v30);
    return swift_release(v37);
  }
  else
  {
    v39 = (char *)v3 + qword_10040C558;
    result = swift_beginAccess((char *)v3 + qword_10040C558, v75, 0, 0);
    v40 = *(_QWORD *)v39;
    if (*(_QWORD *)(*(_QWORD *)v39 + 16))
    {
      result = sub_1000121C0(a1);
      if ((v41 & 1) != 0)
      {
        v42 = result;
        v43 = *(unsigned int *)(v40 + 36);
        v44 = *(_QWORD *)v39;
        type metadata accessor for WiFiP2PSPITransactionType(0);
        v46 = v45;
        v47 = v7[14];
        swift_bridgeObjectRetain(v44);
        v48 = *((_OWORD *)v7 + 6);
        v72[0] = *((_OWORD *)v7 + 5);
        v72[1] = v48;
        v73 = v47;
        v49 = _s16P2PActivityStateOMa(0, (uint64_t)v72);
        v50 = sub_100011DE4(&qword_10040C9B8, (uint64_t (*)(uint64_t))type metadata accessor for WiFiP2PSPITransactionType, (uint64_t)&unk_10035DC80);
        Dictionary.subscript.getter(v74, &aBlock, v42, v43, 0, v44, v46, v49, v50);
        swift_bridgeObjectRelease(v44);
        v51 = aBlock;
        v52 = v77;
        v53 = v78;
        v54 = v79;
        v55 = v80;
        v56 = v81;
        if (v79 >> 62 == 3 && !(_BYTE)v81 && v79 == 0xC000000000000000 && !(v77 | aBlock | v78 | v80))
        {
          swift_beginAccess(v39, v72, 33, 0);
          v57 = type metadata accessor for Dictionary(0, v46, v49, v50);
          Dictionary.remove(at:)(v74, &aBlock, v42, v43, 0, v57);
          swift_endAccess(v72);
          v51 = aBlock;
          v52 = v77;
          v53 = v78;
          v54 = v79;
          v55 = v80;
          v56 = v81;
        }
        return sub_100011E24(v51, v52, v53, v54, v55, v56);
      }
    }
  }
  return result;
}

uint64_t sub_100011DE4(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100011E24(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unsigned __int8 a6)
{
  unsigned __int8 v8;
  unint64_t v11;

  v8 = a4;
  v11 = a4 >> 62;
  if (a4 >> 62 == 2)
  {
LABEL_4:
    swift_bridgeObjectRelease(result);
    swift_bridgeObjectRelease(a2);
    sub_100010CCC(a3, v8);
    return sub_100010CCC(a5, a6);
  }
  if ((_DWORD)v11 != 1)
  {
    if ((_DWORD)v11)
      return result;
    goto LABEL_4;
  }
  return swift_bridgeObjectRelease(result);
}

uint64_t sub_100011EC0(uint64_t a1, Swift::UInt a2, unsigned int a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t (*a14)(_QWORD, uint64_t, uint64_t, uint64_t))
{
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  _BOOL8 v30;
  Swift::Int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  Swift::UInt v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  char isUnique;
  Swift::Bool isUniquea[16];
  __int128 v50;
  unsigned int v51;
  uint64_t v52;
  unint64_t v53;
  Swift::UInt v54;
  _OWORD v55[2];
  uint64_t v56;
  _BYTE v57[24];
  char v58[24];
  _QWORD v59[7];

  v21 = a1 + 16;
  swift_beginAccess(a1 + 16, v58, 0, 0);
  result = swift_weakLoadStrong(v21);
  if (!result)
    return result;
  v23 = result;
  v51 = a3;
  v24 = (_QWORD *)swift_allocObject(a11, 56, 7);
  v24[2] = a6;
  v24[3] = a7;
  v24[4] = a8;
  v24[5] = a9;
  v24[6] = a10;
  v52 = v23;
  v25 = (_QWORD *)(v23 + qword_10040C558);
  swift_beginAccess(v23 + qword_10040C558, v57, 33, 0);
  v26 = (_QWORD *)swift_allocObject(a12, 72, 7);
  v26[2] = a6;
  v26[3] = a7;
  v26[4] = a8;
  v26[5] = a9;
  v26[6] = a10;
  v26[7] = a13;
  v26[8] = v24;
  isUnique = swift_isUniquelyReferenced_nonNull_native(*v25);
  v54 = a2;
  *(_QWORD *)&v55[0] = *v25;
  v27 = *(_QWORD *)&v55[0];
  *v25 = 0x8000000000000000;
  v53 = sub_1000121C0(a2);
  v28 = *(_QWORD *)(v27 + 16);
  v47 = v29;
  v30 = (v29 & 1) == 0;
  v31 = v28 + v30;
  if (__OFADD__(v28, v30))
  {
    __break(1u);
LABEL_11:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v46);
    __break(1u);
    return result;
  }
  type metadata accessor for WiFiP2PSPITransactionType(255);
  v33 = v32;
  v59[0] = a6;
  v59[1] = a7;
  v59[2] = a8;
  v59[3] = a9;
  v59[4] = a10;
  v34 = _s16P2PActivityStateOMa(255, (uint64_t)v59);
  v35 = sub_100011DE4(&qword_10040C9B8, (uint64_t (*)(uint64_t))type metadata accessor for WiFiP2PSPITransactionType, (uint64_t)&unk_10035DC80);
  v46 = v33;
  type metadata accessor for _NativeDictionary(0, v33, v34, v35);
  if (_NativeDictionary.ensureUnique(isUnique:capacity:)(isUnique, v31))
  {
    v53 = sub_1000121C0(v54);
    if ((v47 & 1) != (v36 & 1))
      goto LABEL_11;
  }
  v37 = a5 & 1;
  v38 = *v25;
  *v25 = *(_QWORD *)&v55[0];
  swift_bridgeObjectRelease(v38);
  v39 = *v25;
  v40 = *v25;
  if ((v47 & 1) != 0)
  {
    swift_bridgeObjectRetain(v40);
    v41 = v54;
  }
  else
  {
    v42 = swift_bridgeObjectRetain(v40);
    v43 = v26[6];
    *(_OWORD *)isUniquea = *((_OWORD *)v26 + 2);
    v50 = *((_OWORD *)v26 + 1);
    ((void (*)(_QWORD *__return_ptr, uint64_t))v26[7])(v59, v42);
    v55[0] = v50;
    v55[1] = *(_OWORD *)isUniquea;
    v56 = v43;
    v44 = _s16P2PActivityStateOMa(0, (uint64_t)v55);
    (*(void (**)(_OWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v44 - 8) + 32))(v55, v59, v44);
    v41 = v54;
    v59[0] = v54;
    _NativeDictionary._insert(at:key:value:)(v53, v59, v55, v39, v33, v34, v35);
  }
  swift_bridgeObjectRelease(v39);
  v45 = a14(v51, a4, v37, v34);
  swift_endAccess(v57);
  sub_100011830(v41, v45);
  swift_release(v26);
  swift_release(v24);
  return swift_release(v52);
}

unint64_t sub_1000121C0(Swift::UInt a1)
{
  Swift::Int v2;
  _QWORD v4[9];

  Hasher.init(_seed:)(v4);
  Hasher._combine(_:)(a1);
  v2 = Hasher._finalize()();
  return sub_100012218(a1, v2);
}

unint64_t sub_100012218(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(_QWORD *)(v7 + 8 * result) != a1)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (*(_QWORD *)(v7 + 8 * result) == a1)
          break;
      }
    }
  }
  return result;
}

void sub_1000122B4(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v5;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata(0, a3);
    if (!v5)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

void type metadata accessor for WiFiP2PSPITransactionType(uint64_t a1)
{
  sub_1000122B4(a1, (unint64_t *)&unk_10040C190, (uint64_t)&unk_1003D76A0);
}

uint64_t _s16P2PActivityStateOMa(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &_s16P2PActivityStateOMn);
}

uint64_t sub_100012318(uint64_t result, uint64_t a2)
{
  if (result)
    return swift_release(a2);
  return result;
}

uint64_t sub_100012328(uint64_t (*a1)(void))
{
  uint64_t v1;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;

  result = swift_weakLoadStrong(v1 + qword_100410700);
  if (result)
  {
    v4 = result;
    v5 = a1();
    swift_release(v4);
    return v5;
  }
  return result;
}

char *sub_100012370()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 160);
  v2 = *(_QWORD *)(v0 + v1);
  v3 = (char *)v2;
  if (v2 == 1)
  {
    v3 = sub_1002B7258();
    v4 = *(_QWORD *)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v3;
    swift_retain(v3);
    sub_1002BC2E4(v4);
  }
  sub_1000123D8(v2);
  return v3;
}

uint64_t sub_1000123D8(uint64_t result)
{
  if (result != 1)
    return swift_retain(result);
  return result;
}

uint64_t sub_1000123E8(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  void **v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  const char *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint64_t v42;
  uint64_t *v43;
  void **v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  void *v60;
  uint64_t v61;
  void *v62;
  id v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void **aBlock;
  unint64_t v88;
  uint64_t (*v89)(uint64_t);
  void *v90;
  uint64_t (*v91)();
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  char v95[32];

  v83 = a6;
  v84 = a7;
  v81 = a4;
  v82 = a5;
  v12 = type metadata accessor for DispatchWorkItemFlags(0);
  v13 = *(_QWORD *)(v12 - 8);
  v85 = v12;
  v86 = v13;
  __chkstk_darwin();
  v15 = (char *)&v71 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for DispatchQoS(0);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin();
  v19 = (char *)&v71 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess(a1 + 16, v95, 0, 0);
  result = swift_weakLoadStrong(a1 + 16);
  if (result)
  {
    v73 = a2;
    v78 = v16;
    v79 = v15;
    v77 = v17;
    v76 = v19;
    v75 = result;
    v74 = a8;
    v80 = a3;
    if (a2 == 16)
    {
      v21 = sub_100012328(sub_1002B6B64);
      v22 = v21;
      if (a3 == 1)
      {
        if (v21)
        {
          sub_1002EC174(16);
          v21 = swift_release(v22);
        }
        v23 = Logger.logObject.getter(v21);
        v24 = static os_log_type_t.default.getter();
        if (!os_log_type_enabled(v23, v24))
          goto LABEL_30;
        v25 = (uint8_t *)swift_slowAlloc(12, -1);
        v26 = (void **)swift_slowAlloc(32, -1);
        aBlock = v26;
        *(_DWORD *)v25 = 136315138;
        v27 = WiFiP2PSPITransactionType.description.getter(16);
        v29 = v28;
        v93 = (_QWORD *)sub_100013CC8(v27, v28, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v93, &v94);
        swift_bridgeObjectRelease(v29);
        v30 = "Successfully activated transaction for NAN: %s";
      }
      else
      {
        if (v21)
        {
          sub_1002EC1FC(16);
          v21 = swift_release(v22);
        }
        v23 = Logger.logObject.getter(v21);
        v24 = static os_log_type_t.default.getter();
        if (!os_log_type_enabled(v23, v24))
          goto LABEL_30;
        v25 = (uint8_t *)swift_slowAlloc(12, -1);
        v26 = (void **)swift_slowAlloc(32, -1);
        aBlock = v26;
        *(_DWORD *)v25 = 136315138;
        v57 = WiFiP2PSPITransactionType.description.getter(16);
        v59 = v58;
        v93 = (_QWORD *)sub_100013CC8(v57, v58, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v93, &v94);
        swift_bridgeObjectRelease(v59);
        v30 = "Successfully deactivated transaction for NAN: %s";
      }
      _os_log_impl((void *)&_mh_execute_header, v23, v24, v30, v25, 0xCu);
      swift_arrayDestroy(v26, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v26, -1, -1);
      swift_slowDealloc(v25, -1, -1);
LABEL_30:

      v32 = 0;
      v38 = 0;
      goto LABEL_31;
    }
    v31 = sub_100012C84();
    v32 = swift_allocError(&type metadata for WiFiError, v31, 0, 0);
    *(_OWORD *)v33 = xmmword_10033B150;
    *(_BYTE *)(v33 + 16) = 1;
    swift_willThrow(v32);
    v93 = (_QWORD *)v32;
    swift_errorRetain(v32);
    v34 = sub_100012C44((uint64_t *)&unk_10040C360);
    if (swift_dynamicCast(&aBlock, &v93, v34, &type metadata for WiFiError, 0))
    {
      if (v89 != 1)
      {
        v72 = a1;
        sub_100013024((uint64_t)aBlock, v88, (char)v89);
        goto LABEL_17;
      }
      if (aBlock == (void **)2)
      {
        swift_errorRelease(v32);
        v36 = sub_100012C84();
        v32 = swift_allocError(&type metadata for WiFiError, v36, 0, 0);
        *(_OWORD *)v37 = xmmword_10033B150;
        v38 = 1;
        *(_BYTE *)(v37 + 16) = 1;
        swift_errorRelease(v93);
LABEL_31:
        v54 = v83;
        v53 = v84;
        v47 = v73;
        v56 = v81;
        v55 = v82;
LABEL_32:
        v60 = (void *)*OS_dispatch_queue.p2p.unsafeMutableAddressor();
        v61 = swift_allocObject(&unk_1003F2A00, 89, 7);
        *(_QWORD *)(v61 + 16) = v56;
        *(_QWORD *)(v61 + 24) = v55;
        *(_QWORD *)(v61 + 32) = v54;
        *(_QWORD *)(v61 + 40) = v53;
        *(_QWORD *)(v61 + 48) = v74;
        *(_QWORD *)(v61 + 56) = a1;
        *(_QWORD *)(v61 + 64) = v47;
        *(_BYTE *)(v61 + 72) = v80;
        *(_QWORD *)(v61 + 80) = v32;
        *(_BYTE *)(v61 + 88) = v38;
        v91 = sub_100006FF0;
        v92 = v61;
        aBlock = _NSConcreteStackBlock;
        v88 = 1107296256;
        v89 = sub_100006F0C;
        v90 = &unk_1003F2A18;
        v62 = _Block_copy(&aBlock);
        v63 = v60;
        swift_retain(a1);
        v64 = sub_100010D08(v32, v38);
        v65 = v76;
        static DispatchQoS.unspecified.getter(v64);
        v93 = _swiftEmptyArrayStorage;
        v66 = sub_100011DE4((unint64_t *)&qword_100408710, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
        v67 = sub_100012C44((uint64_t *)&unk_100405070);
        v68 = sub_100011770((unint64_t *)&qword_100408720, (uint64_t *)&unk_100405070, (const char *)&protocol conformance descriptor for [A]);
        v69 = v79;
        v70 = v85;
        dispatch thunk of SetAlgebra.init<A>(_:)(&v93, v67, v68, v85, v66);
        OS_dispatch_queue.async(group:qos:flags:execute:)(0, v65, v69, v62);
        _Block_release(v62);
        swift_release(v75);

        sub_100010CFC(v32, v38);
        (*(void (**)(char *, uint64_t))(v86 + 8))(v69, v70);
        (*(void (**)(char *, uint64_t))(v77 + 8))(v65, v78);
        return swift_release(v92);
      }
    }
    v72 = a1;
LABEL_17:
    swift_errorRelease(v93);
    swift_errorRetain(v32);
    v39 = swift_errorRetain(v32);
    v40 = Logger.logObject.getter(v39);
    v41 = static os_log_type_t.error.getter(v40);
    if (os_log_type_enabled(v40, v41))
    {
      v42 = swift_slowAlloc(32, -1);
      v43 = (uint64_t *)swift_slowAlloc(8, -1);
      v44 = (void **)swift_slowAlloc(64, -1);
      aBlock = v44;
      *(_DWORD *)v42 = 136315650;
      if (a3 == 1)
        v45 = 0x6574617669746361;
      else
        v45 = 0x6176697463616564;
      if (a3 == 1)
        v46 = 0xE800000000000000;
      else
        v46 = 0xEA00000000006574;
      v93 = (_QWORD *)sub_100013CC8(v45, v46, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v93, &v94);
      swift_bridgeObjectRelease(v46);
      *(_WORD *)(v42 + 12) = 2080;
      v47 = v73;
      v48 = WiFiP2PSPITransactionType.description.getter(v73);
      v50 = v49;
      v93 = (_QWORD *)sub_100013CC8(v48, v49, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v93, &v94);
      swift_bridgeObjectRelease(v50);
      *(_WORD *)(v42 + 22) = 2112;
      swift_errorRetain(v32);
      v51 = _swift_stdlib_bridgeErrorToNSError(v32);
      v93 = (_QWORD *)v51;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v93, &v94);
      *v43 = v51;
      swift_errorRelease(v32);
      swift_errorRelease(v32);
      _os_log_impl((void *)&_mh_execute_header, v40, v41, "Failed to %s transaction %s because %@", (uint8_t *)v42, 0x20u);
      v52 = sub_100012C44(&qword_100404BB0);
      swift_arrayDestroy(v43, 1, v52);
      swift_slowDealloc(v43, -1, -1);
      swift_arrayDestroy(v44, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v44, -1, -1);
      swift_slowDealloc(v42, -1, -1);

      a1 = v72;
      v53 = v84;
    }
    else
    {

      swift_errorRelease(v32);
      swift_errorRelease(v32);
      a1 = v72;
      v53 = v84;
      v47 = v73;
    }
    v55 = v82;
    v54 = v83;
    v56 = v81;
    v38 = 1;
    goto LABEL_32;
  }
  return result;
}

uint64_t sub_100012C44(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContext2((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

unint64_t sub_100012C84()
{
  unint64_t result;

  result = qword_100405080;
  if (!qword_100405080)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for WiFiError, &type metadata for WiFiError);
    atomic_store(result, (unint64_t *)&qword_100405080);
  }
  return result;
}

uint64_t sub_100012CC8(uint64_t result, uint64_t a2, char a3, _QWORD *a4)
{
  uint64_t v4;
  unint64_t v5;
  BOOL v6;
  int v8;
  unint64_t v10;

  v5 = *(_QWORD *)(v4 + 24);
  if (v5 >> 62 == 3)
  {
    v6 = !*(_BYTE *)(v4 + 40) && v5 == 0xC000000000000000;
    if (v6 && (*(_QWORD *)(v4 + 16) | *(_QWORD *)(v4 + 32) | *(_QWORD *)(v4 + 8) | *(_QWORD *)v4) == 0)
      return 0;
  }
  v8 = result;
  if ((_BYTE)result)
  {
    v10 = a3 & 1;
    if (v8 == 1)
      return sub_1000103CC(a2, v10, 0, 255, a4);
    else
      return sub_10000FC44(a2, v10, 0, 255, a4);
  }
  return result;
}

uint64_t *OS_dispatch_queue.awdl.unsafeMutableAddressor()
{
  if (qword_100404100 != -1)
    swift_once(&qword_100404100, sub_10017DF28);
  return &static OS_dispatch_queue.awdl;
}

uint64_t *OS_dispatch_queue.nan.unsafeMutableAddressor()
{
  if (qword_1004040F8 != -1)
    swift_once(&qword_1004040F8, sub_10017DEE0);
  return &static OS_dispatch_queue.nan;
}

uint64_t sub_100012DC8(uint64_t result, uint64_t a2, char a3, _QWORD *a4)
{
  uint64_t v4;
  unint64_t v6;
  BOOL v7;
  int v9;

  v6 = *(_QWORD *)(v4 + 24);
  if (v6 >> 62 == 3)
  {
    v7 = !*(_BYTE *)(v4 + 40) && v6 == 0xC000000000000000;
    if (v7 && (*(_QWORD *)(v4 + 16) | *(_QWORD *)(v4 + 32) | *(_QWORD *)(v4 + 8) | *(_QWORD *)v4) == 0)
      return 0;
  }
  if ((_BYTE)result)
  {
    v9 = a3 & 1;
    if (result == 1)
      return sub_1000103CC(0, 0xFFuLL, a2, v9, a4);
    else
      return sub_10000FC44(0, 0xFFuLL, a2, v9, a4);
  }
  return result;
}

uint64_t sub_100012E4C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100012E54(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100012E5C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100012E64(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100012E6C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100012E74(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100012E7C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100012E84(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100012E8C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100012E94(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100012E9C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100012EA4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100012EAC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100012EB4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100012EBC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100012EC4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100012ECC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100012ED4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100012EDC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100012EE4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100012EF4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100012F04(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100012F14(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100012F24(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100012F34(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100012F44(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100012F54(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100012F64(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100012F74(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100012F84(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100012F94(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100012FA4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100012FB4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100012FC4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100012FD4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100012FE4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100012FF4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100013004(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t destroy for WiFiError(uint64_t a1)
{
  return sub_100013024(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t sub_100013024(uint64_t a1, unint64_t a2, char a3)
{
  if (a3 == 3)
    return sub_10007BB04(a1, a2);
  return a1;
}

uint64_t sub_100013038(_QWORD *a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD))(v1 + 16))(*a1);
}

uint64_t sub_10001305C(uint64_t a1)
{
  uint64_t v1;

  return sub_100013074(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_100013064()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 16) + 16))();
}

uint64_t sub_100013074(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, a1);
}

uint64_t _s7CoreP2P9WiFiErrorOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  char v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_1000130D0(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t sub_1000130D0(uint64_t a1, unint64_t a2, char a3)
{
  if (a3 == 3)
    return sub_100211B3C(a1, a2);
  return a1;
}

_BYTE *initializeBufferWithCopyOfBuffer for Bandwidth(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t sub_100013118(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a2 + 24);
  v3 = *(_QWORD *)(*(_QWORD *)(a2 + 16) - 8);
  v4 = *(_QWORD *)(v3 + 64);
  v5 = *(_QWORD *)(v2 - 8);
  if (*(_QWORD *)(v5 + 64) > v4)
    v4 = *(_QWORD *)(v5 + 64);
  v6 = *(unsigned __int8 *)(a1 + v4);
  if (v6 < 2)
  {
    if (v6 == 1)
      v3 = *(_QWORD *)(v2 - 8);
    return (*(uint64_t (**)(void))(v3 + 8))();
  }
  else
  {
    if (v4 <= 3)
      v7 = v4;
    else
      v7 = 4;
    return ((uint64_t (*)(void))((char *)&loc_100013164 + 4 * byte_10033A76D[v7]))();
  }
}

uint64_t sub_1000131C4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned __int8 a6, char a7)
{
  switch(a7)
  {
    case 5:
      return sub_100062394(a2, a3, a4, a5, a6);
    case 4:
      return swift_bridgeObjectRelease(a3);
    case 1:
      return swift_bridgeObjectRelease(result);
  }
  return result;
}

__n128 initializeWithTake for NANAttribute.WLANInfrastructure(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

void sub_10001321C(unint64_t a1, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  Swift::Int v10;
  id v11;
  Swift::Int v12;
  Swift::Int v13;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;

  v3 = a1;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (a1 + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    v8 = _HashTable.previousHole(before:)(a1, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        v10 = *(_QWORD *)(a2 + 40);
        v11 = *(id *)(*(_QWORD *)(a2 + 48) + 8 * v6);
        v12 = NSObject._rawHashValue(seed:)(v10);

        v13 = v12 & v7;
        if (v3 >= (uint64_t)v9)
        {
          if (v13 >= v9 && v3 >= v13)
          {
LABEL_16:
            v16 = *(_QWORD *)(a2 + 48);
            v17 = (_QWORD *)(v16 + 8 * v3);
            v18 = (_QWORD *)(v16 + 8 * v6);
            if (v3 != v6 || v17 >= v18 + 1)
              *v17 = *v18;
            v19 = *(_QWORD *)(a2 + 56);
            v20 = (_QWORD *)(v19 + 8 * v3);
            v21 = (_QWORD *)(v19 + 8 * v6);
            if (v3 != v6 || (v3 = v6, v20 >= v21 + 1))
            {
              *v20 = *v21;
              v3 = v6;
            }
          }
        }
        else if (v13 >= v9 || v3 >= v13)
        {
          goto LABEL_16;
        }
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v22 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v23 = *v22;
    v24 = (-1 << v3) - 1;
  }
  else
  {
    v22 = (uint64_t *)(v4 + 8 * (a1 >> 6));
    v24 = *v22;
    v23 = (-1 << a1) - 1;
  }
  *v22 = v24 & v23;
  v25 = *(_QWORD *)(a2 + 16);
  v26 = __OFSUB__(v25, 1);
  v27 = v25 - 1;
  if (v26)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v27;
    ++*(_DWORD *)(a2 + 36);
  }
}

uint64_t sub_1000133CC(uint64_t result, unint64_t a2, char a3)
{
  uint64_t *v3;
  Swift::UInt v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  _QWORD v17[9];

  v5 = result;
  v6 = *(_QWORD *)(*v3 + 16);
  v7 = *(_QWORD *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0)
    goto LABEL_14;
  v8 = v6 + 1;
  if ((a3 & 1) != 0)
  {
    sub_10032F2C4(v8);
  }
  else
  {
    if (v7 > v6)
    {
      result = (uint64_t)sub_1002B506C();
      goto LABEL_14;
    }
    sub_100330D4C(v8);
  }
  v9 = *v3;
  Hasher.init(_seed:)(v17);
  Hasher._combine(_:)(v5);
  result = Hasher._finalize()();
  v10 = -1 << *(_BYTE *)(v9 + 32);
  a2 = result & ~v10;
  if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) != 0)
  {
    v11 = *(_QWORD *)(v9 + 48);
    if (*(_QWORD *)(v11 + 8 * a2) == v5)
    {
LABEL_13:
      type metadata accessor for WiFiP2PSPITransactionType(0);
      result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      v12 = ~v10;
      while (1)
      {
        a2 = (a2 + 1) & v12;
        if (((*(_QWORD *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8)) >> a2) & 1) == 0)
          break;
        if (*(_QWORD *)(v11 + 8 * a2) == v5)
          goto LABEL_13;
      }
    }
  }
LABEL_14:
  v13 = *v3;
  *(_QWORD *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(_QWORD *)(*(_QWORD *)(v13 + 48) + 8 * a2) = v5;
  v14 = *(_QWORD *)(v13 + 16);
  v15 = __OFADD__(v14, 1);
  v16 = v14 + 1;
  if (v15)
    __break(1u);
  else
    *(_QWORD *)(v13 + 16) = v16;
  return result;
}

unint64_t sub_100013518(unint64_t result)
{
  _QWORD *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  Swift::UInt v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  _QWORD v18[9];

  v2 = result;
  v3 = *v1;
  v4 = *v1 + 56;
  v5 = -1 << *(_BYTE *)(*v1 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    swift_retain(*v1);
    v8 = _HashTable.previousHole(before:)(v2, v4, v7);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        v10 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v6);
        Hasher.init(_seed:)(v18);
        Hasher._combine(_:)(v10);
        v11 = Hasher._finalize()() & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v11 < v9)
            goto LABEL_5;
        }
        else if (v11 >= v9)
        {
          goto LABEL_11;
        }
        if (v2 >= (uint64_t)v11)
        {
LABEL_11:
          v12 = *(_QWORD *)(v3 + 48);
          v13 = (_QWORD *)(v12 + 8 * v2);
          v14 = (_QWORD *)(v12 + 8 * v6);
          if (v2 != v6 || (v2 = v6, v13 >= v14 + 1))
          {
            *v13 = *v14;
            v2 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(_QWORD *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    result = swift_release(v3);
  }
  else
  {
    *(_QWORD *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  v15 = *(_QWORD *)(v3 + 16);
  v16 = __OFSUB__(v15, 1);
  v17 = v15 - 1;
  if (v16)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v3 + 16) = v17;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

_QWORD *sub_1000136C0(_QWORD *result, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  void *v6;

  if (a2 < 0 || 1 << *(_BYTE *)(a5 + 32) <= a2)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(_QWORD *)(a5 + (((unint64_t)a2 >> 3) & 0xFFFFFFFFFFFFF8) + 64) >> a2) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a5 + 36) == a3)
  {
    v5 = 8 * a2;
    v6 = *(void **)(*(_QWORD *)(a5 + 48) + 8 * a2);
    *result = *(_QWORD *)(*(_QWORD *)(a5 + 56) + v5);
    return v6;
  }
LABEL_8:
  __break(1u);
  return result;
}

uint64_t sub_100013720(uint64_t a1, uint64_t a2)
{
  return swift_retain(a2);
}

uint64_t sub_100013728(uint64_t a1, uint64_t a2)
{
  return swift_release(a2);
}

uint64_t sub_100013730(void *a1, int a2, uint64_t a3, void *a4)
{
  return sub_10000655C(a1, a2, a3, a4, (uint64_t)&unk_1003F3608, (uint64_t)sub_10024BE40, "%@ is starting transaction: %s", (uint64_t (*)(uint64_t, _QWORD, uint64_t, uint64_t))sub_100007014);
}

uint64_t sub_100013754(void *a1, int a2, uint64_t a3, void *a4)
{
  return sub_10000655C(a1, a2, a3, a4, (uint64_t)&unk_1003F35E0, (uint64_t)sub_10001305C, "%@ is ending transaction: %s", (uint64_t (*)(uint64_t, _QWORD, uint64_t, uint64_t))sub_100006BFC);
}

double sub_10001377C@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  result = -2.0;
  *(_OWORD *)(a1 + 24) = xmmword_10035E040;
  *(_BYTE *)(a1 + 40) = 0;
  return result;
}

uint64_t _s16P2PActivityStateO14ActionRequiredOMa(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &_s16P2PActivityStateO14ActionRequiredOMn);
}

uint64_t type metadata accessor for XPCSession(uint64_t a1)
{
  return sub_10000D69C(a1, (uint64_t *)&unk_10040D278, (uint64_t)&nominal type descriptor for XPCSession);
}

int main(int argc, const char **argv, const char **envp)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void *v11;
  void *v12;
  id v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v18;
  _QWORD *v19;
  _QWORD aBlock[6];

  v3 = type metadata accessor for DispatchWorkItemFlags(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin();
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin();
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((static Sandbox.check()() & 1) != 0)
  {
    v11 = (void *)*OS_dispatch_queue.p2p.unsafeMutableAddressor();
    aBlock[4] = sub_10001393C;
    aBlock[5] = 0;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100006F0C;
    aBlock[3] = &unk_1003D2FC8;
    v12 = _Block_copy(aBlock);
    v13 = v11;
    static DispatchQoS.unspecified.getter(v13);
    v19 = _swiftEmptyArrayStorage;
    v14 = sub_100013BE0();
    v15 = sub_100012C44((uint64_t *)&unk_100405070);
    v16 = sub_100013C20();
    dispatch thunk of SetAlgebra.init<A>(_:)(&v19, v15, v16, v3, v14);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v10, v6, v12);
    _Block_release(v12);

    sub_1000144A0(*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8));
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    dispatch_main();
  }
  exit(1);
}

uint64_t sub_10001393C()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  void (__cdecl *v10)(const void *);
  IONotificationPortRef v11;
  IONotificationPortRef v12;
  uint64_t (*v13)(void (*)(), IONotificationPortRef);
  uint64_t v14;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  IONotificationPortRef v20;

  v0 = *(_QWORD *)(type metadata accessor for Logger(0) - 8);
  __chkstk_darwin();
  v1 = Logger.init(subsystem:category:)(0xD000000000000012, 0x8000000100360DF0, 1953066601, 0xE400000000000000);
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)sub_100014498(12);
    v5 = sub_100014498(32);
    *(_DWORD *)v4 = 136315138;
    v20 = (IONotificationPortRef)v5;
    v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(CFSTR("WiFiP2P-655.92 Aug 13 2024 20:08:31"));
    v8 = v7;
    v19 = sub_100013CC8(v6, v7, (uint64_t *)&v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20);
    swift_bridgeObjectRelease(v8);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "WiFiP2P version: %s", v4, 0xCu);
    swift_arrayDestroy(v5, 1, (char *)&type metadata for Any + 8);
    sub_10001448C(v5);
    sub_10001448C((uint64_t)v4);
  }

  v9 = type metadata accessor for AppleDevice(0);
  swift_allocObject(v9, *(unsigned int *)(v9 + 48), *(unsigned __int16 *)(v9 + 52));
  v20 = AppleDevice.init()();
  v10 = (void (__cdecl *)(const void *))sub_100012C44(&qword_100403E80);
  swift_allocObject(v10, 80, 7);
  v11 = (IONotificationPortRef)P2PMain.init(device:)((uint64_t)&v20);
  if (!v11)
  {
    v16 = Logger.logObject.getter(0);
    v17 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)sub_100014498(2);
      *(_WORD *)v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "WiFiP2P initialization failed", v18, 2u);
      sub_10001448C((uint64_t)v18);
    }

    exit(1);
  }
  v12 = v11;
  v20 = v11;
  AppleDevice.attachForDriverDiscovery<A>(_:)((uint64_t)&v20, v10, (CFStringRef (__cdecl *)(const void *))&protocol witness table for P2PMain<A>);
  v13 = *(uint64_t (**)(void (*)(), IONotificationPortRef))(*(_QWORD *)v12 + 184);
  swift_retain();
  v14 = v13(sub_100013CA8, v12);
  (*(void (**)(uint64_t))(*(_QWORD *)v12 + 208))(v14);
  swift_release(v12);
  return sub_1000144A0(*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8));
}

unint64_t sub_100013BE0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100408710;
  if (!qword_100408710)
  {
    v1 = type metadata accessor for DispatchWorkItemFlags(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for DispatchWorkItemFlags, v1);
    atomic_store(result, (unint64_t *)&qword_100408710);
  }
  return result;
}

unint64_t sub_100013C20()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100408720;
  if (!qword_100408720)
  {
    v1 = sub_100013C64((uint64_t *)&unk_100405070);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_100408720);
  }
  return result;
}

uint64_t sub_100013C64(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContextInMetadataState2(255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

void sub_100013CA8()
{
  AppleDevice.detachDriverDiscovery()();
}

uint64_t sub_100013CC8(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v12[3];
  void *ObjectType;

  v6 = sub_100013D98(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = (void *)swift_getObjectType(v6);
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      sub_100014450((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      sub_100014450((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain(a2);
  }
  sub_100014430(v12);
  return v7;
}

_QWORD *sub_100013D98(_QWORD *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  _QWORD *result;
  uint64_t v11;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0 && __dst && a3 - (uint64_t)__dst > (uint64_t)(HIBYTE(a6) & 0xF))
    {
      __src[0] = a5;
      __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
      sub_100013EEC((char *)__src, HIBYTE(a6) & 0xF, __dst);
      UnsafeMutableRawBufferPointer.subscript.setter(0);
      result = 0;
      *a1 = __dst;
      return result;
    }
    goto LABEL_11;
  }
  if ((a6 & 0x1000000000000000) != 0)
  {
LABEL_11:
    result = sub_100013FB0(a5, a6);
    *a1 = v11;
    return result;
  }
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
  }
  else
  {
    v8 = _StringObject.sharedUTF8.getter(a5, a6);
    if (!v8)
    {
      result = (_QWORD *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringTesting.swift", 25, 2, 151, 0);
      __break(1u);
      return result;
    }
  }
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return (_QWORD *)swift_unknownObjectRetain(a6 & 0xFFFFFFFFFFFFFFFLL);
}

void *sub_100013EEC(char *__src, size_t __n, char *__dst)
{
  void *result;

  if ((__n & 0x8000000000000000) != 0)
  {
    result = (void *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableRawPointer.initializeMemory with negative count", 60, 2, "Swift/UnsafeRawPointer.swift", 28, 2, 1170, 0);
  }
  else
  {
    if (&__dst[__n] <= __src || &__src[__n] <= __dst)
      return memcpy(__dst, __src, __n);
    result = (void *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableRawPointer.initializeMemory overlapping range", 58, 2, "Swift/UnsafeRawPointer.swift", 28, 2, 1173, 0);
  }
  __break(1u);
  return result;
}

_QWORD *sub_100013FB0(uint64_t a1, unint64_t a2)
{
  _QWORD *v2;
  unint64_t v3;
  unint64_t v4;

  v2 = sub_100014044(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
    v2 = sub_100014218(0, v2[2] + 1, 1, (uint64_t)v2);
  v4 = v2[2];
  v3 = v2[3];
  if (v4 >= v3 >> 1)
    v2 = sub_100014218((char *)(v3 > 1), v4 + 1, 1, (uint64_t)v2);
  v2[2] = v4 + 1;
  *((_BYTE *)v2 + v4 + 32) = 0;
  return v2;
}

_QWORD *sub_100014044(uint64_t a1, unint64_t a2)
{
  Swift::Int v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  char v8;
  _QWORD *result;
  int v10;

  if ((a2 & 0x1000000000000000) != 0)
  {
    v4 = String.UTF8View._foreignCount()();
    if (v4)
      goto LABEL_6;
    return _swiftEmptyArrayStorage;
  }
  if ((a2 & 0x2000000000000000) != 0)
    v4 = HIBYTE(a2) & 0xF;
  else
    v4 = a1 & 0xFFFFFFFFFFFFLL;
  if (!v4)
    return _swiftEmptyArrayStorage;
LABEL_6:
  v5 = sub_1000141B4(v4, 0);
  if (v4 < 0)
  {
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, 2, 71, 0);
    __break(1u);
    goto LABEL_14;
  }
  v6 = v5;
  v7 = _StringGuts.copyUTF8(into:)(v5 + 4, v4, a1, a2);
  if ((v8 & 1) != 0)
  {
LABEL_14:
    LOBYTE(v10) = 2;
    result = (_QWORD *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Insufficient space allocated to copy string contents", 52, 2, "Swift/StringUTF8View.swift", 26, v10, 430, 0);
    goto LABEL_15;
  }
  if (v7 == v4)
    return v6;
  result = (_QWORD *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "invalid Collection: less than 'count' elements in collection", 60, 2, "Swift/ContiguousArrayBuffer.swift", 33, 2, 1122, 0);
LABEL_15:
  __break(1u);
  return result;
}

_QWORD *sub_1000141B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  size_t v6;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return _swiftEmptyArrayStorage;
  v4 = sub_100012C44(&qword_100403E88);
  v5 = (_QWORD *)swift_allocObject(v4, v2 + 32, 7);
  v6 = j__malloc_size(v5);
  v5[2] = a1;
  v5[3] = 2 * v6 - 64;
  return v5;
}

char *sub_100014218(char *result, int64_t a2, char a3, uint64_t a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *(_QWORD *)(a4 + 24);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *(_QWORD *)(a4 + 16);
  if (v7 <= v8)
    v9 = *(_QWORD *)(a4 + 16);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100012C44(&qword_100403E88);
    v11 = (char *)swift_allocObject(v10, v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * v12 - 64;
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = (char *)(a4 + 32);
  if ((v5 & 1) != 0)
  {
    sub_1000143B0(v14, v8, v13);
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_1000142EC(v14, v8, v13);
  }
  swift_bridgeObjectRelease(a4);
  return v11;
}

void *sub_1000142EC(char *__src, size_t __n, char *__dst)
{
  void *result;

  if ((__n & 0x8000000000000000) != 0)
  {
    result = (void *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
  }
  else
  {
    if (&__dst[__n] <= __src || &__src[__n] <= __dst)
      return memcpy(__dst, __src, __n);
    result = (void *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  }
  __break(1u);
  return result;
}

char *sub_1000143B0(char *__src, size_t __len, char *__dst)
{
  char v4;

  if ((__len & 0x8000000000000000) != 0)
  {
    v4 = 2;
    __src = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v4, 1046, 0);
    __break(1u);
  }
  else if (__dst != __src || &__src[__len] <= __dst)
  {
    return (char *)memmove(__dst, __src, __len);
  }
  return __src;
}

uint64_t sub_100014430(_QWORD *a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1[3] - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release(*a1);
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_100014450(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_10001448C(uint64_t a1)
{
  return swift_slowDealloc(a1, -1, -1);
}

uint64_t sub_100014498(uint64_t a1)
{
  return swift_slowAlloc(a1, -1);
}

uint64_t sub_1000144A0@<X0>(uint64_t (*a1)(uint64_t, uint64_t)@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  return a1(v2, v1);
}

uint64_t NANDriverCapabilities.supportedBands.getter()
{
  _QWORD *v0;

  return swift_bridgeObjectRetain(*v0);
}

uint64_t IEEE80211InformationElement.ExtendedRSNCapability.rawValue.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease(*v1);
  *v1 = a1;
  return result;
}

uint64_t (*NANBitmap.Channel.operatingClass.modify())()
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t IEEE80211InformationElement.RSNCapability.pairwiseCipherSuites.getter()
{
  uint64_t v0;

  return swift_bridgeObjectRetain(*(_QWORD *)(v0 + 8));
}

uint64_t NANDiscoveryBeaconTransmissionSchedule.entries.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_bridgeObjectRelease(*(_QWORD *)(v1 + 8));
  *(_QWORD *)(v1 + 8) = a1;
  return result;
}

uint64_t (*NANBitmap.Time.bitmapData.modify())()
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t NANDriverCapabilities.mode.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t NANInternetSharingStatistics.submitted.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 16) = result;
  return result;
}

uint64_t (*NANBeacon.Metadata.rate.modify())()
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t NANDriverCapabilities.numberOfAntennas.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 17);
}

uint64_t NANDriverCapabilities.numberOfAntennas.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 17) = result;
  return result;
}

uint64_t (*NANDriverCapabilities.numberOfAntennas.modify())()
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t NANDriverCapabilities.maximumChannelSwitchTime.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for NANDriverCapabilities(0) + 32);
  v4 = type metadata accessor for DispatchTimeInterval(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t type metadata accessor for NANDriverCapabilities(uint64_t a1)
{
  uint64_t result;

  result = qword_100404328;
  if (!qword_100404328)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for NANDriverCapabilities);
  return result;
}

uint64_t NANDriverCapabilities.maximumChannelSwitchTime.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for NANDriverCapabilities(0) + 32);
  v4 = type metadata accessor for DispatchTimeInterval(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*NANDriverCapabilities.maximumChannelSwitchTime.modify())(_QWORD)
{
  type metadata accessor for NANDriverCapabilities(0);
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t NANDriverCapabilities.maximumPublisherCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for NANDriverCapabilities(0) + 36));
}

uint64_t NANDriverCapabilities.maximumPublisherCount.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for NANDriverCapabilities(0);
  *(_QWORD *)(v1 + *(int *)(result + 36)) = a1;
  return result;
}

uint64_t (*NANDriverCapabilities.maximumPublisherCount.modify())(_QWORD)
{
  type metadata accessor for NANDriverCapabilities(0);
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t NANDriverCapabilities.maximumSubscriberCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for NANDriverCapabilities(0) + 40));
}

uint64_t NANDriverCapabilities.maximumSubscriberCount.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for NANDriverCapabilities(0);
  *(_QWORD *)(v1 + *(int *)(result + 40)) = a1;
  return result;
}

uint64_t (*NANDriverCapabilities.maximumSubscriberCount.modify())(_QWORD)
{
  type metadata accessor for NANDriverCapabilities(0);
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t NANDriverCapabilities.maximumPeerEntries.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for NANDriverCapabilities(0) + 44));
}

uint64_t NANDriverCapabilities.maximumPeerEntries.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for NANDriverCapabilities(0);
  *(_QWORD *)(v1 + *(int *)(result + 44)) = a1;
  return result;
}

uint64_t (*NANDriverCapabilities.maximumPeerEntries.modify())(_QWORD)
{
  type metadata accessor for NANDriverCapabilities(0);
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t NANDriverCapabilities.maximumDatapathSessionCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for NANDriverCapabilities(0) + 48));
}

uint64_t NANDriverCapabilities.maximumDatapathSessionCount.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for NANDriverCapabilities(0);
  *(_QWORD *)(v1 + *(int *)(result + 48)) = a1;
  return result;
}

uint64_t (*NANDriverCapabilities.maximumDatapathSessionCount.modify())(_QWORD)
{
  type metadata accessor for NANDriverCapabilities(0);
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t NANDriverCapabilities.maximumAvailabilityMaps.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for NANDriverCapabilities(0) + 52));
}

uint64_t NANDriverCapabilities.maximumAvailabilityMaps.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for NANDriverCapabilities(0);
  *(_QWORD *)(v1 + *(int *)(result + 52)) = a1;
  return result;
}

uint64_t (*NANDriverCapabilities.maximumAvailabilityMaps.modify())(_QWORD)
{
  type metadata accessor for NANDriverCapabilities(0);
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t NANDriverCapabilities.maximumInterfacesSupported.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for NANDriverCapabilities(0) + 56));
}

uint64_t NANDriverCapabilities.maximumInterfacesSupported.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for NANDriverCapabilities(0);
  *(_QWORD *)(v1 + *(int *)(result + 56)) = a1;
  return result;
}

uint64_t (*NANDriverCapabilities.maximumInterfacesSupported.modify())(_QWORD)
{
  type metadata accessor for NANDriverCapabilities(0);
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t NANDriverCapabilities.unicastInsecureDatapathRestoreSupported.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for NANDriverCapabilities(0) + 60));
}

uint64_t NANDriverCapabilities.unicastInsecureDatapathRestoreSupported.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for NANDriverCapabilities(0);
  *(_BYTE *)(v1 + *(int *)(result + 60)) = a1;
  return result;
}

uint64_t (*NANDriverCapabilities.unicastInsecureDatapathRestoreSupported.modify())(_QWORD)
{
  type metadata accessor for NANDriverCapabilities(0);
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t NANDriverCapabilities.init(supportedBands:supportedCipherSuites:mode:numberOfAntennas:maximumChannelSwitchTime:maximumPublisherCount:maximumSubscriberCount:maximumPeerEntries:maximumDatapathSessionCount:maximumAvailabilityMaps:maximumInterfacesSupported:unicastInsecureDatapathRestoreSupported:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  int *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;

  *(_QWORD *)a9 = a1;
  *(_QWORD *)(a9 + 8) = a2;
  *(_BYTE *)(a9 + 16) = a3;
  *(_BYTE *)(a9 + 17) = a4;
  v17 = (int *)type metadata accessor for NANDriverCapabilities(0);
  v18 = a9 + v17[8];
  v19 = type metadata accessor for DispatchTimeInterval(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v18, a5, v19);
  *(_QWORD *)(a9 + v17[9]) = a6;
  *(_QWORD *)(a9 + v17[10]) = a7;
  *(_QWORD *)(a9 + v17[11]) = a8;
  *(_QWORD *)(a9 + v17[12]) = a10;
  *(_QWORD *)(a9 + v17[13]) = a11;
  *(_QWORD *)(a9 + v17[14]) = a12;
  *(_BYTE *)(a9 + v17[15]) = a13;
  return result;
}

uint64_t sub_100014A6C()
{
  int *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t inited;
  unsigned __int8 v4;
  char v5;
  unsigned __int8 v6;
  char v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  _BYTE v12[40];

  v0 = (int *)type metadata accessor for NANDriverCapabilities(0);
  sub_10001C964((uint64_t)v0, static NANDriverCapabilities.defaultCapabilities);
  v1 = sub_100014C44((uint64_t)v0, (uint64_t)static NANDriverCapabilities.defaultCapabilities);
  v2 = sub_100012C44(&qword_1004048C0);
  inited = swift_initStackObject(v2, v12);
  *(_QWORD *)(inited + 24) = 4;
  *(_BYTE *)(inited + 32) = sub_1001AA35C(1, 0, 4);
  v4 = sub_1001AA35C(1, 4, 4);
  *(_BYTE *)(inited + 33) = v4;
  v5 = *(_BYTE *)(inited + 32);
  if ((v4 & ~v5) != 0)
    v6 = v4;
  else
    v6 = 0;
  v7 = v6 | v5;
  swift_setDeallocating(inited);
  v8 = (_QWORD *)(v1 + v0[8]);
  *v8 = 1;
  v9 = enum case for DispatchTimeInterval.seconds(_:);
  v10 = type metadata accessor for DispatchTimeInterval(0);
  result = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 104))(v8, v9, v10);
  *(_QWORD *)v1 = &off_1003D3090;
  *(_QWORD *)(v1 + 8) = &off_1003D30B8;
  *(_BYTE *)(v1 + 16) = 1;
  *(_BYTE *)(v1 + 17) = v7;
  *(_QWORD *)(v1 + v0[9]) = 4;
  *(_QWORD *)(v1 + v0[10]) = 4;
  *(_QWORD *)(v1 + v0[11]) = 8;
  *(_QWORD *)(v1 + v0[12]) = 8;
  *(_QWORD *)(v1 + v0[13]) = 1;
  *(_QWORD *)(v1 + v0[14]) = 1;
  *(_BYTE *)(v1 + v0[15]) = 1;
  return result;
}

uint64_t NANDriverCapabilities.defaultCapabilities.unsafeMutableAddressor()
{
  uint64_t v0;

  if (qword_100403E90 != -1)
    swift_once(&qword_100403E90, sub_100014A6C);
  v0 = type metadata accessor for NANDriverCapabilities(0);
  return sub_100014C44(v0, (uint64_t)static NANDriverCapabilities.defaultCapabilities);
}

uint64_t sub_100014C44(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

uint64_t static NANDriverCapabilities.defaultCapabilities.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (qword_100403E90 != -1)
    swift_once(&qword_100403E90, sub_100014A6C);
  v2 = type metadata accessor for NANDriverCapabilities(0);
  v3 = sub_100014C44(v2, (uint64_t)static NANDriverCapabilities.defaultCapabilities);
  return sub_100014CB8(v3, a1);
}

uint64_t sub_100014CB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for NANDriverCapabilities(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t static NANBitmap.Band.tvWhiteSpaces.getter()
{
  return 1;
}

uint64_t static InfraStatistics.infraRealtimePacketThreshold.getter()
{
  return 5;
}

uint64_t NANWiFiDriver.generateStatisticsReport(for:)()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = sub_100012C84();
  v1 = swift_allocError(&type metadata for WiFiError, v0, 0, 0);
  *(_OWORD *)v2 = xmmword_100337830;
  *(_BYTE *)(v2 + 16) = 1;
  return swift_willThrow(v1);
}

uint64_t static UInt8.invalid.getter()
{
  return 0;
}

uint64_t DeviceDriver<>.startSharingInternet(from:to:useBridging:errorHandler:completionHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(void), uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t (*v22)(char *, uint64_t, uint64_t);
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint64_t v26;
  uint8_t *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  __n128 v31;
  uint64_t v32;
  uint8_t *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint8_t *v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(void);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v14 = *(_QWORD *)(a10 - 8);
  __chkstk_darwin();
  v16 = (char *)&v38 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v18 = (char *)&v38 - v17;
  v19 = type metadata accessor for Logger(0);
  v42 = *(_QWORD *)(v19 - 8);
  v43 = v19;
  __chkstk_darwin();
  v21 = (char *)&v38 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t))(*(_QWORD *)(a11 + 8) + 8))(a10);
  v22 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 16);
  v23 = v22(v18, v11, a10);
  v24 = Logger.logObject.getter(v23);
  v25 = static os_log_type_t.error.getter(v24);
  if (os_log_type_enabled(v24, v25))
  {
    v26 = swift_slowAlloc(12, -1);
    v41 = a6;
    v27 = (uint8_t *)v26;
    v39 = swift_slowAlloc(32, -1);
    v45 = v39;
    v40 = a7;
    *(_DWORD *)v27 = 136315138;
    v38 = v27 + 4;
    v22(v16, (uint64_t)v18, a10);
    v28 = String.init<A>(describing:)(v16, a10);
    v30 = v29;
    v44 = sub_100013CC8(v28, v29, &v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, &v45);
    v31 = swift_bridgeObjectRelease(v30);
    (*(void (**)(char *, uint64_t, __n128))(v14 + 8))(v18, a10, v31);
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "Unable to create a requester internet sharing policy because %s doesn't support it", v27, 0xCu);
    v32 = v39;
    swift_arrayDestroy(v39, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v32, -1, -1);
    v33 = v27;
    a6 = v41;
    swift_slowDealloc(v33, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v14 + 8))(v18, a10);
  }

  (*(void (**)(char *, uint64_t))(v42 + 8))(v21, v43);
  v34 = sub_100012C84();
  v35 = swift_allocError(&type metadata for WiFiError, v34, 0, 0);
  *(_OWORD *)v36 = xmmword_100337830;
  *(_BYTE *)(v36 + 16) = 1;
  a6();
  return swift_errorRelease(v35);
}

uint64_t DeviceDriver<>.startRequestingInternet(on:linkTestInterval:linkTestFaultHandler:errorHandler:completionHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(void), uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t (*v22)(char *, uint64_t, uint64_t);
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint64_t v26;
  uint8_t *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  __n128 v31;
  uint64_t v32;
  uint8_t *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint8_t *v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(void);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v14 = *(_QWORD *)(a10 - 8);
  __chkstk_darwin();
  v16 = (char *)&v38 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v18 = (char *)&v38 - v17;
  v19 = type metadata accessor for Logger(0);
  v42 = *(_QWORD *)(v19 - 8);
  v43 = v19;
  __chkstk_darwin();
  v21 = (char *)&v38 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t))(*(_QWORD *)(a11 + 8) + 8))(a10);
  v22 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 16);
  v23 = v22(v18, v11, a10);
  v24 = Logger.logObject.getter(v23);
  v25 = static os_log_type_t.error.getter(v24);
  if (os_log_type_enabled(v24, v25))
  {
    v26 = swift_slowAlloc(12, -1);
    v41 = a6;
    v27 = (uint8_t *)v26;
    v39 = swift_slowAlloc(32, -1);
    v45 = v39;
    v40 = a7;
    *(_DWORD *)v27 = 136315138;
    v38 = v27 + 4;
    v22(v16, (uint64_t)v18, a10);
    v28 = String.init<A>(describing:)(v16, a10);
    v30 = v29;
    v44 = sub_100013CC8(v28, v29, &v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, &v45);
    v31 = swift_bridgeObjectRelease(v30);
    (*(void (**)(char *, uint64_t, __n128))(v14 + 8))(v18, a10, v31);
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "Unable to create a provider internet sharing policy because %s doesn't support it", v27, 0xCu);
    v32 = v39;
    swift_arrayDestroy(v39, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v32, -1, -1);
    v33 = v27;
    a6 = v41;
    swift_slowDealloc(v33, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v14 + 8))(v18, a10);
  }

  (*(void (**)(char *, uint64_t))(v42 + 8))(v21, v43);
  v34 = sub_100012C84();
  v35 = swift_allocError(&type metadata for WiFiError, v34, 0, 0);
  *(_OWORD *)v36 = xmmword_100337830;
  *(_BYTE *)(v36 + 16) = 1;
  a6();
  return swift_errorRelease(v35);
}

{
  uint64_t v11;
  uint64_t v12;
  void (*v16)(uint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v24)(uint64_t, uint64_t, char);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t (**v31)(uint64_t, uint64_t, char);
  uint64_t v32;
  uint64_t v33;
  _QWORD v36[3];
  uint64_t v37;
  _QWORD v38[3];
  uint64_t v39;
  char v40[32];

  v12 = v11;
  v16 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a11 + 56);
  v16(v36, a10, a11);
  v17 = v36[0];
  v18 = v36[0] + 72;
  swift_beginAccess(v36[0] + 72, v40, 0, 0);
  sub_100033B48(v18, (uint64_t)v38, &qword_100405050);
  swift_release(v17);
  v19 = v39;
  sub_100033A84((uint64_t)v38, &qword_100405050);
  if (v19)
  {
    v20 = sub_100012C84();
    v21 = swift_allocError(&type metadata for WiFiError, v20, 0, 0);
    *(_OWORD *)v22 = xmmword_10033B1B0;
    *(_BYTE *)(v22 + 16) = 0;
    a6();
    return swift_errorRelease(v21);
  }
  else
  {
    v24 = (uint64_t (*)(uint64_t, uint64_t, char))swift_allocObject(&unk_1003DD888, 48, 7);
    *((_QWORD *)v24 + 2) = a6;
    *((_QWORD *)v24 + 3) = a7;
    *((_QWORD *)v24 + 4) = a8;
    *((_QWORD *)v24 + 5) = a9;
    v25 = type metadata accessor for AppleDevice.InternetSharingRequesterSession(0);
    v26 = swift_allocObject(v25, *(unsigned int *)(v25 + 48), *(unsigned __int16 *)(v25 + 52));
    swift_bridgeObjectRetain(a2);
    swift_retain();
    swift_retain();
    Logger.init(subsystem:category:)(0x6C7070612E6D6F63, 0xED00006E616E2E65, 0x74656E7265746E69, 0xEF676E6972616853);
    v27 = OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A31InternetSharingRequesterSession_networkConnectivityMonitor;
    v28 = type metadata accessor for AppleDevice.InternetSharingRequesterSession.NetworkConnectivityMonitor(0);
    swift_allocObject(v28, *(unsigned int *)(v28 + 48), *(unsigned __int16 *)(v28 + 52));
    *(_QWORD *)(v26 + v27) = sub_10004BF50();
    v29 = v26
        + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A31InternetSharingRequesterSession_state;
    *(_QWORD *)v29 = 0;
    *(_QWORD *)(v29 + 8) = 0;
    *(_BYTE *)(v29 + 16) = 2;
    v30 = (_QWORD *)(v26
                   + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A31InternetSharingRequesterSession_interface);
    *v30 = a1;
    v30[1] = a2;
    v31 = (uint64_t (**)(uint64_t, uint64_t, char))(v26
                                                          + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A31InternetSharingRequesterSession_stateUpdatedHandler);
    *v31 = sub_1000614D0;
    v31[1] = v24;
    v38[0] = v12;
    v16(&v37, a10, a11);
    v32 = v37;
    v39 = v25;
    v38[0] = v26;
    v33 = v37 + 72;
    swift_beginAccess(v37 + 72, v36, 33, 0);
    swift_retain();
    sub_10006298C((uint64_t)v38, v33, &qword_100405050);
    swift_endAccess(v36);
    swift_release(v32);
    sub_1000608E0();
    return swift_release(v26);
  }
}

uint64_t DeviceDriver<>.performLinkTest()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  __n128 v21;
  uint64_t v22;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v5 = *(_QWORD *)(a1 - 8);
  __chkstk_darwin();
  v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v9 = (char *)&v24 - v8;
  v10 = type metadata accessor for Logger(0);
  v27 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin();
  v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t))(*(_QWORD *)(a2 + 8) + 8))(a1);
  v13 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v14 = v13(v9, v2, a1);
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.error.getter(v15);
  if (os_log_type_enabled(v15, v16))
  {
    v17 = (uint8_t *)swift_slowAlloc(12, -1);
    v25 = swift_slowAlloc(32, -1);
    v29 = v25;
    v26 = v10;
    *(_DWORD *)v17 = 136315138;
    v24 = v17 + 4;
    v13(v7, (uint64_t)v9, a1);
    v18 = String.init<A>(describing:)(v7, a1);
    v20 = v19;
    v28 = sub_100013CC8(v18, v19, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29);
    v21 = swift_bridgeObjectRelease(v20);
    (*(void (**)(char *, uint64_t, __n128))(v5 + 8))(v9, a1, v21);
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Unable to perform a link test because %s doesn't support it", v17, 0xCu);
    v22 = v25;
    swift_arrayDestroy(v25, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v22, -1, -1);
    swift_slowDealloc(v17, -1, -1);

    return (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v12, v26);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v9, a1);

    return (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v12, v10);
  }
}

uint64_t variable initialization expression of OffloadedServices.browses(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000166C8();
  return Dictionary.init()(&type metadata for DNSRecords.Identifier, a1, v2);
}

void *variable initialization expression of InMemoryPreferenceStorage.storage()
{
  return &_swiftEmptyDictionarySingleton;
}

uint64_t variable initialization expression of OffloadedServices.advertises(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = sub_10001670C();
  return Dictionary.init()(&type metadata for DNSRecords.PTR, a2, v3);
}

uint64_t variable initialization expression of OffloadedServices.resolvers(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;

  v4 = sub_10001670C();
  return Dictionary.init()(&type metadata for DNSRecords.PTR, a3, v4);
}

uint64_t variable initialization expression of LockedPreferencesStorage.lock()
{
  uint64_t v0;
  uint64_t v1;
  _DWORD *v2;

  v0 = type metadata accessor for Lock();
  v1 = swift_allocObject(v0, 24, 7);
  v2 = (_DWORD *)swift_slowAlloc(4, -1);
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = 0;
  return v1;
}

void *variable initialization expression of NANMatchingFilter.matchingFilterList()
{
  return &_swiftEmptyArrayStorage;
}

id variable initialization expression of AppleDevice.infra()
{
  return objc_msgSend(objc_allocWithZone((Class)CWFInterface), "initWithServiceType:", 1);
}

uint64_t variable initialization expression of AppleDevice.coreWiFiQueue()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  _QWORD *v15;

  v0 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin();
  v3 = (char *)&v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin();
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for DispatchQoS(0);
  __chkstk_darwin();
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100016750();
  static DispatchQoS.unspecified.getter(v9);
  v15 = _swiftEmptyArrayStorage;
  v10 = sub_100011DE4((unint64_t *)&unk_10040FFC0, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v11 = sub_100012C44((uint64_t *)&unk_1004042C0);
  v12 = sub_10001678C();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v15, v11, v12, v4, v10);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v0);
  return OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000001BLL, 0x8000000100362900, v8, v6, v3, 0);
}

double variable initialization expression of AppleDevice.currentInternetSharingSession@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t variable initialization expression of NANBitmap.Band.Iterator.currentIndex()
{
  return 0;
}

uint64_t variable initialization expression of AppleDevice.keychain()
{
  uint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t *v8;

  result = kSecAttrViewHintHome;
  if (kSecAttrViewHintHome)
  {
    v1 = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecAttrViewHintHome);
    v3 = v2;
    v4 = type metadata accessor for AppleKeychain(0);
    v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
    Logger.init(subsystem:category:)(0x6C7070612E6D6F63, 0xED00006E616E2E65, 0xD000000000000011, 0x8000000100361270);
    *(_DWORD *)(v5 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_notificationToken) = -1;
    v6 = (_QWORD *)(v5 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_tokens);
    *v6 = &_swiftEmptySetSingleton;
    v6[1] = 0;
    *(_QWORD *)(v5 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_keychainMonitors) = &_swiftEmptyDictionarySingleton;
    v7 = (_QWORD *)(v5 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_keychainAccessGroup);
    *v7 = 0xD000000000000012;
    v7[1] = 0x8000000100360DF0;
    v8 = (uint64_t *)(v5 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_keychainView);
    *v8 = v1;
    v8[1] = v3;
    return v5;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t variable initialization expression of AppleDevice.preferencesStorage()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  _DWORD *v5;

  if (qword_100403F28 != -1)
    swift_once(&qword_100403F28, sub_1000BC658);
  v0 = (void *)static SCPreferencesRef.p2pPreferences;
  v1 = type metadata accessor for InMemoryPreferenceStorage();
  *(_QWORD *)(swift_allocObject(v1, 24, 7) + 16) = &_swiftEmptyDictionarySingleton;
  v2 = type metadata accessor for Lock();
  v3 = swift_allocObject(v2, 24, 7);
  v4 = v0;
  v5 = (_DWORD *)swift_slowAlloc(4, -1);
  *(_QWORD *)(v3 + 16) = v5;
  *v5 = 0;
  return v3;
}

double variable initialization expression of AppleDevice.interfaceDiscoverer@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)(a1 + 32) = 0;
  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t variable initialization expression of AppleDevice.logger()
{
  return Logger.init(subsystem:category:)(0xD000000000000012, 0x8000000100360DF0, 0x656369766564, 0xE600000000000000);
}

uint64_t variable initialization expression of IDPool.usedIDs(uint64_t a1, uint64_t a2)
{
  return Set.init()(a1, *(_QWORD *)(*(_QWORD *)(a2 + 8) + 16));
}

uint64_t variable initialization expression of LongTermPairingKeyStore.logger()
{
  return Logger.init(subsystem:category:)(0x6C7070612E6D6F63, 0xED00006E616E2E65, 0xD000000000000011, 0x8000000100361270);
}

uint64_t variable initialization expression of NANPMK.ID.data()
{
  uint64_t v0;
  _QWORD v2[2];

  v0 = type metadata accessor for __DataStorage(0);
  swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  v2[0] = 0x1000000000;
  v2[1] = __DataStorage.init(length:)(16);
  sub_1000167D8((int *)v2, 0);
  return v2[0];
}

CoreP2P::NANServiceName __swiftcall NANServiceName.init()()
{
  uint64_t v0;
  void *v1;
  CoreP2P::NANServiceName result;

  v0 = 0;
  v1 = (void *)0xE000000000000000;
  result.string._object = v1;
  result.string._countAndFlagsBits = v0;
  return result;
}

uint64_t static IEEE80211Frame.Header.FrameControl.moreFragments.getter()
{
  return 1024;
}

uint64_t variable initialization expression of IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters.comeback()
{
  return 0;
}

uint64_t variable initialization expression of AWDLPeer.arpa()
{
  return 0;
}

uint64_t variable initialization expression of AWDLActionFrame.RealtimeGroup.infrastructureChannel()
{
  return 0x300000000;
}

uint64_t variable initialization expression of CachedPreferenceStorage.cachedStorage()
{
  uint64_t v0;
  uint64_t result;

  v0 = type metadata accessor for InMemoryPreferenceStorage();
  result = swift_allocObject(v0, 24, 7);
  *(_QWORD *)(result + 16) = &_swiftEmptyDictionarySingleton;
  return result;
}

uint64_t variable initialization expression of InfraAssociationJoinStatus.SubstateInformation.setSSIDStatus()
{
  return 8704;
}

double variable initialization expression of InfraAssociationReadyEvent.ipAddress@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_BYTE *)(a1 + 32) = -1;
  return result;
}

uint64_t variable initialization expression of AWDLPeer.preferredChannels()
{
  return 0;
}

uint64_t variable initialization expression of AWDLActionFrame.DataPathState.unicastOptions()
{
  return 43;
}

uint64_t variable initialization expression of AWDLActionFrame.DataPathState.awdlOnSince@<X0>(uint64_t a1@<X8>)
{
  return sub_100015E34((uint64_t (*)(_QWORD))&type metadata accessor for DispatchTimeInterval, a1);
}

uint64_t variable initialization expression of AWDLPeer.logger()
{
  return Logger.init(subsystem:category:)(0x6C7070612E6D6F63, 0xEE006C6477612E65, 1919247728, 0xE400000000000000);
}

uint64_t variable initialization expression of AWDLPeer.lastUpdated()
{
  if (qword_100403F80 != -1)
    swift_once(&qword_100403F80, sub_10012AF3C);
  return (*(uint64_t (**)(void))(*(_QWORD *)algn_1004104A8 + 8))();
}

uint64_t variable initialization expression of AWDLPeer.deprecatedElectionParameter()
{
  return 0;
}

double variable initialization expression of AWDLPeer.electionParameter@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_BYTE *)(a1 + 48) = 1;
  return result;
}

uint64_t variable initialization expression of AWDLPeer.serviceParameter()
{
  return 0;
}

double variable initialization expression of AWDLPeer.synchronizationParameter@<D0>(_OWORD *a1@<X8>)
{
  double result;

  result = 0.0;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

uint64_t variable initialization expression of AWDLPeer.dataPathStateParameter@<X0>(uint64_t a1@<X8>)
{
  return sub_100015E34(type metadata accessor for AWDLActionFrame.DataPathState, a1);
}

double variable initialization expression of AWDLPeer.nanSynchronization@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)(a1 + 32) = 0;
  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_BYTE *)(a1 + 40) = 1;
  return result;
}

double variable initialization expression of AWDLPeer.realtimeGroup@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)a1 = xmmword_100337840;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  return result;
}

void *variable initialization expression of AWDLPeer.advertisedServiceIDPool()
{
  sub_100017198((uint64_t)&off_1003D7058);
  return &_swiftEmptySetSingleton;
}

void *variable initialization expression of AWDLPeer.advertisedServices()
{
  return &_swiftEmptySetSingleton;
}

uint64_t variable initialization expression of AWDLPeer.average2_4RSSI()
{
  return 0;
}

double variable initialization expression of AWDLPeer.AdvertisedService.advertisementInfo@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)(a1 + 48) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  return result;
}

uint64_t variable initialization expression of NANSubscribe.Configuration.bloomFilter()
{
  return 0;
}

uint64_t variable initialization expression of LongTermPairingKeys.PublicIdentity.lastModifiedDate@<X0>(uint64_t a1@<X8>)
{
  return sub_100015E34((uint64_t (*)(_QWORD))&type metadata accessor for Date, a1);
}

uint64_t variable initialization expression of AppleKeychain.notificationToken()
{
  return 0xFFFFFFFFLL;
}

void *variable initialization expression of InMemoryKeychain.tokens()
{
  return &_swiftEmptySetSingleton;
}

uint64_t static NANBitmap.Band.sub1GHzExcludingTVWhiteSpaces.getter()
{
  return 2;
}

double variable initialization expression of IEEE80211Frame.Management.Authentication.PASNRequest.vendorSpecific@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_BYTE *)(a1 + 48) = -1;
  return result;
}

uint64_t static NANBitmap.Band.ghz2_4.getter()
{
  return 4;
}

uint64_t variable initialization expression of RoutingSocket.logger()
{
  return Logger.init(subsystem:category:)(0xD000000000000012, 0x8000000100360DF0, 0x676E6974756F72, 0xE700000000000000);
}

uint64_t DNSRecord.valueData.getter()
{
  return 0;
}

double variable initialization expression of NANDatapath.Configuration.securityConfiguration@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_QWORD *)(a1 + 48) = 1;
  return result;
}

double variable initialization expression of NANDatapath.Configuration.internetSharingConfiguration@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)&result = 1;
  *(_OWORD *)(a1 + 24) = xmmword_100337850;
  return result;
}

double variable initialization expression of NANPublish.Configuration.internetSharingConfiguration@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)(a1 + 32) = 0;
  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_BYTE *)(a1 + 40) = -1;
  return result;
}

uint64_t variable initialization expression of NANPublish.Configuration.pairingBootstrappingMethod()
{
  return 0x10000;
}

uint64_t variable initialization expression of NANPublish.Configuration.multicastAddress()
{
  return 0x1000000000000;
}

uint64_t variable initialization expression of NANCoreAnalyticsMetrics.internetSharingStatistics()
{
  return 0;
}

uint64_t variable initialization expression of NANAttribute.ServiceDescriptor.serviceFilterControl()
{
  return 0;
}

uint64_t variable initialization expression of NANAttribute.Datapath.serviceInfo()
{
  return 4;
}

uint64_t variable initialization expression of NANAttribute.DeviceLink.peerID()
{
  return 256;
}

uint64_t variable initialization expression of NANAttribute.UnalignedSchedule.entry()
{
  return 0;
}

uint64_t variable initialization expression of NANAttribute.RangingSetup.fineTimingMeasurementParameters()
{
  return 0x100000000;
}

uint64_t variable initialization expression of NANAttribute.CustomDeviceInformation.CustomAttributes.publicKey@<X0>(uint64_t a1@<X8>)
{
  return sub_100015E34((uint64_t (*)(_QWORD))&type metadata accessor for P256.KeyAgreement.PublicKey, a1);
}

uint64_t variable initialization expression of NANAttribute.CustomDeviceInformation.CustomAttributes.keepAliveUUID@<X0>(uint64_t a1@<X8>)
{
  return sub_100015E34((uint64_t (*)(_QWORD))&type metadata accessor for UUID, a1);
}

uint64_t variable initialization expression of NANAttribute.CustomDeviceInformation.CustomAttributes.internetSharingStatistics@<X0>(uint64_t a1@<X8>)
{
  return sub_100015E34(type metadata accessor for NANInternetSharingStatistics.Requester, a1);
}

uint64_t sub_100015E34@<X0>(uint64_t (*a1)(_QWORD)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;

  v3 = a1(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(a2, 1, 1, v3);
}

uint64_t variable initialization expression of NANAttribute.CustomDeviceInformation.CustomAttributes.multicastLinkConditionResponse()
{
  return 0;
}

uint64_t variable initialization expression of WiFiInterface.NeighborDiscoveryTable.table(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t WitnessTable;

  v4 = type metadata accessor for WiFiInterface.NeighborDiscoveryTable.Entry(0, a1, a2, a4);
  WitnessTable = swift_getWitnessTable("\t?\t", v4);
  return Dictionary.init()(v4, &type metadata for Int, WitnessTable);
}

uint64_t *variable initialization expression of ObservableWiFiProperty.tokenRegistrations(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for ObservableWiFiProperty.TokenRegistrations(0, a1, a2, a4);
  return sub_100228218();
}

BOOL sub_100015F08(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

uint64_t sub_100015F1C(uint64_t a1)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_100338B9C, a1);
  return _CFObject.hashValue.getter(a1, WitnessTable);
}

uint64_t sub_100015F58(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_100338B9C, a2);
  return _CFObject.hash(into:)(a1, a2, WitnessTable);
}

Swift::Int sub_100015FA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100016510(a1, a2, a3, (uint64_t)&unk_100338B9C);
}

uint64_t sub_100015FAC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t WitnessTable;

  v4 = *a1;
  v5 = *a2;
  WitnessTable = swift_getWitnessTable(&unk_100339A30, a3);
  return static _CFObject.== infix(_:_:)(v4, v5, a3, WitnessTable);
}

uint64_t sub_100015FF8(uint64_t a1, uint64_t a2)
{
  return sub_10001614C(a1, a2, (uint64_t (*)(uint64_t))&String._bridgeToObjectiveC());
}

uint64_t sub_100016004(uint64_t a1, id *a2)
{
  uint64_t result;
  uint64_t v5;
  NSString v6;
  uint64_t v7;
  uint64_t v8;

  v7 = 0;
  v8 = 0;
  result = static String._forceBridgeFromObjectiveC(_:result:)(a1, &v7);
  v5 = v8;
  if (v8)
  {
    v6 = String._bridgeToObjectiveC()();
    result = swift_bridgeObjectRelease(v5);
  }
  else
  {
    v6 = 0;
  }
  *a2 = v6;
  return result;
}

uint64_t sub_100016078(uint64_t a1, id *a2)
{
  char v4;
  uint64_t v5;
  NSString v6;
  uint64_t v8;
  uint64_t v9;

  v8 = 0;
  v9 = 0;
  v4 = static String._conditionallyBridgeFromObjectiveC(_:result:)(a1, &v8);
  v5 = v9;
  if (v9)
  {
    v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v5);
  }
  else
  {
    v6 = 0;
  }
  *a2 = v6;
  return v4 & 1;
}

uint64_t sub_1000160F4@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  NSString v4;
  uint64_t result;

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  v3 = v2;
  v4 = String._bridgeToObjectiveC()();
  result = swift_bridgeObjectRelease(v3);
  *a1 = v4;
  return result;
}

_QWORD *sub_100016134@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t sub_100016140(uint64_t a1, uint64_t a2)
{
  return sub_10001614C(a1, a2, (uint64_t (*)(uint64_t))&String.hashValue.getter);
}

uint64_t sub_10001614C(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v3);
  v7 = v6;
  v8 = a3(v5);
  swift_bridgeObjectRelease(v7);
  return v8;
}

uint64_t sub_100016188(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  v5 = v4;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_1000161C8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  Swift::Int v4;
  _QWORD v6[9];

  v1 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v0);
  v3 = v2;
  Hasher.init(_seed:)(v6);
  String.hash(into:)(v6, v1, v3);
  v4 = Hasher._finalize()();
  swift_bridgeObjectRelease(v3);
  return v4;
}

Swift::Int sub_100016238()
{
  Swift::UInt *v0;
  Swift::UInt v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_10001627C()
{
  Swift::UInt *v0;

  Hasher._combine(_:)(*v0);
}

_QWORD *sub_1000162A4@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

void sub_1000162B4(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

uint64_t sub_1000162C0(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char v10;

  v2 = *a2;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*a1);
  v5 = v4;
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  if (v3 == v6 && v5 == v7)
  {
    v10 = 1;
    v9 = v5;
  }
  else
  {
    v9 = v7;
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0);
  }
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v9);
  return v10 & 1;
}

uint64_t sub_100016348@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  NSString v4;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = String._bridgeToObjectiveC()();
  result = swift_bridgeObjectRelease(v3);
  *a2 = v4;
  return result;
}

uint64_t sub_10001638C@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t result;
  uint64_t v4;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

_DWORD *sub_1000163B4@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = *result;
  *(_BYTE *)(a2 + 4) = 0;
  return result;
}

void sub_1000163C4(_DWORD *a1@<X8>)
{
  _DWORD *v1;

  *a1 = *v1;
}

BOOL sub_1000163D0(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

uint64_t sub_1000163E4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t WitnessTable;

  v4 = *a1;
  v5 = *a2;
  WitnessTable = swift_getWitnessTable(&unk_100338B9C, a3);
  return static _CFObject.== infix(_:_:)(v4, v5, a3, WitnessTable);
}

_QWORD *sub_100016430@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & *result;
  return result;
}

_QWORD *sub_100016444(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= *result;
  return result;
}

BOOL sub_100016458(_QWORD *a1)
{
  _QWORD *v1;

  return (*v1 & ~*a1) == 0;
}

BOOL sub_10001646C(_QWORD *a1)
{
  _QWORD *v1;

  return (*a1 & ~*v1) == 0;
}

uint64_t sub_100016480(uint64_t a1)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_100339A30, a1);
  return _CFObject.hashValue.getter(a1, WitnessTable);
}

uint64_t sub_1000164BC(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&unk_100339A30, a2);
  return _CFObject.hash(into:)(a1, a2, WitnessTable);
}

Swift::Int sub_100016504(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100016510(a1, a2, a3, (uint64_t)&unk_100339A30);
}

Swift::Int sub_100016510(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t WitnessTable;
  _QWORD v8[9];

  Hasher.init(_seed:)(v8);
  WitnessTable = swift_getWitnessTable(a4, a2);
  _CFObject.hash(into:)(v8, a2, WitnessTable);
  return Hasher._finalize()();
}

uint64_t sub_100016570(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_100011DE4(&qword_100404800, (uint64_t (*)(uint64_t))type metadata accessor for AWDLTrafficRegistrationService, (uint64_t)&unk_100338D20);
  v3 = sub_100011DE4(&qword_100404808, (uint64_t (*)(uint64_t))type metadata accessor for AWDLTrafficRegistrationService, (uint64_t)&unk_10035DC20);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_1000165F4(uint64_t (**a1)(uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*a1)(a2, a3, a4);
}

uint64_t BaseP2PControls.terminate(with:)(uint64_t (*a1)(void))
{
  return a1();
}

void sub_100016648(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = a4();
  v8 = v7;
  v9 = sub_100013CC8(v6, v7, a3);
  v10 = *a1 + 8;
  v11 = v9;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v11, &v12);
  swift_bridgeObjectRelease(v8);
  *a1 = v10;
}

_BYTE **sub_1000166B8(_BYTE **result, uint64_t a2, uint64_t a3, char a4)
{
  _BYTE *v4;

  v4 = *result;
  *v4 = a4;
  *result = v4 + 1;
  return result;
}

unint64_t sub_1000166C8()
{
  unint64_t result;

  result = qword_1004042A0;
  if (!qword_1004042A0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for DNSRecords.Identifier, &type metadata for DNSRecords.Identifier);
    atomic_store(result, (unint64_t *)&qword_1004042A0);
  }
  return result;
}

unint64_t sub_10001670C()
{
  unint64_t result;

  result = qword_10040D5A0;
  if (!qword_10040D5A0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for DNSRecords.PTR, &type metadata for DNSRecords.PTR);
    atomic_store(result, (unint64_t *)&qword_10040D5A0);
  }
  return result;
}

unint64_t sub_100016750()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1004042B0;
  if (!qword_1004042B0)
  {
    v1 = objc_opt_self(OS_dispatch_queue);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1004042B0);
  }
  return result;
}

unint64_t sub_10001678C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10040FFD0[0];
  if (!qword_10040FFD0[0])
  {
    v1 = sub_100013C64((uint64_t *)&unk_1004042C0);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for [A], v1);
    atomic_store(result, qword_10040FFD0);
  }
  return result;
}

void sub_1000167D8(int *a1, int a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  size_t v12;

  Data.InlineSlice.ensureUniqueReference()();
  v4 = *a1;
  v5 = a1[1];
  if ((int)v5 < (int)v4)
  {
    __break(1u);
    goto LABEL_9;
  }
  v6 = __DataStorage._bytes.getter();
  if (!v6)
  {
LABEL_10:
    __break(1u);
    return;
  }
  v7 = v6;
  v8 = __DataStorage._offset.getter();
  v9 = v4 - v8;
  if (__OFSUB__(v4, v8))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v10 = v5 - v4;
  v11 = __DataStorage._length.getter();
  if (v11 >= v10)
    v12 = v10;
  else
    v12 = v11;
  memset((void *)(v7 + v9), a2, v12);
}

uint64_t sub_100016858(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t result;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_100012C44((uint64_t *)&unk_1004048B0);
    v3 = static _SetStorage.allocate(capacity:)(v1);
    v4 = 0;
    v5 = v3 + 56;
    v6 = a1 + 32;
    v7 = *(_QWORD *)(v3 + 40);
    v8 = ~(-1 << *(_BYTE *)(v3 + 32));
    while (1)
    {
      v9 = *(_DWORD *)(v6 + 4 * v4);
      result = static Hasher._hash(seed:bytes:count:)(v7, v9, 4);
      v11 = result & v8;
      v12 = (result & (unint64_t)v8) >> 6;
      v13 = *(_QWORD *)(v5 + 8 * v12);
      v14 = 1 << (result & v8);
      v15 = *(_QWORD *)(v3 + 48);
      if ((v14 & v13) != 0)
      {
        while (*(_DWORD *)(v15 + 4 * v11) != v9)
        {
          v11 = (v11 + 1) & v8;
          v12 = v11 >> 6;
          v13 = *(_QWORD *)(v5 + 8 * (v11 >> 6));
          v14 = 1 << v11;
          if ((v13 & (1 << v11)) == 0)
            goto LABEL_7;
        }
      }
      else
      {
LABEL_7:
        *(_QWORD *)(v5 + 8 * v12) = v14 | v13;
        *(_DWORD *)(v15 + 4 * v11) = v9;
        v16 = *(_QWORD *)(v3 + 16);
        v17 = __OFADD__(v16, 1);
        v18 = v16 + 1;
        if (v17)
        {
          __break(1u);
          return result;
        }
        *(_QWORD *)(v3 + 16) = v18;
      }
      if (++v4 == v1)
        return v3;
    }
  }
  return (uint64_t)&_swiftEmptySetSingleton;
}

uint64_t sub_100016974(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t);
  uint64_t (*v30)(unint64_t, char *, uint64_t);
  uint64_t result;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  char *v35;
  void (*v36)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  void (*v39)(char *, char *, uint64_t);
  uint64_t v40;
  void (*v41)(char *, uint64_t, uint64_t);
  char *v42;

  v2 = type metadata accessor for Duration.UnitsFormatStyle.Unit(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v42 = (char *)&v35 - v7;
  v8 = sub_100012C44(&qword_100404870);
  __chkstk_darwin(v8);
  v10 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(a1 + 16);
  if (v11)
  {
    sub_100012C44(&qword_100404878);
    v12 = (_QWORD *)static _SetStorage.allocate(capacity:)(v11);
    v13 = 0;
    v14 = *(unsigned __int8 *)(v3 + 80);
    v37 = v11;
    v38 = a1 + ((v14 + 32) & ~v14);
    v15 = *(_QWORD *)(v3 + 72);
    v41 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    v16 = (char *)(v12 + 7);
    v35 = v10;
    v41(v10, v38, v2);
    while (1)
    {
      v36 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
      v36(v10, 0, 1, v2);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v10, 1, v2) == 1)
        break;
      v39 = *(void (**)(char *, char *, uint64_t))(v3 + 32);
      v40 = v13;
      v39(v42, v10, v2);
      v18 = v12[5];
      v19 = sub_100011DE4(&qword_100404880, (uint64_t (*)(uint64_t))&type metadata accessor for Duration.UnitsFormatStyle.Unit, (uint64_t)&protocol conformance descriptor for Duration.UnitsFormatStyle.Unit);
      v20 = dispatch thunk of Hashable._rawHashValue(seed:)(v18, v2, v19);
      v21 = ~(-1 << *((_BYTE *)v12 + 32));
      v22 = v20 & v21;
      v23 = (v20 & (unint64_t)v21) >> 6;
      v24 = *(_QWORD *)&v16[8 * v23];
      v25 = 1 << (v20 & v21);
      if ((v25 & v24) != 0)
      {
        do
        {
          v41(v6, v12[6] + v22 * v15, v2);
          v26 = sub_100011DE4(&qword_100404888, (uint64_t (*)(uint64_t))&type metadata accessor for Duration.UnitsFormatStyle.Unit, (uint64_t)&protocol conformance descriptor for Duration.UnitsFormatStyle.Unit);
          v27 = dispatch thunk of static Equatable.== infix(_:_:)(v6, v42, v2, v26);
          v28 = v3;
          v29 = *(void (**)(char *, uint64_t))(v3 + 8);
          v29(v6, v2);
          if ((v27 & 1) != 0)
          {
            v29(v42, v2);
            v3 = v28;
            v10 = v35;
            v17 = v40;
            goto LABEL_4;
          }
          v22 = (v22 + 1) & v21;
          v23 = v22 >> 6;
          v24 = *(_QWORD *)&v16[8 * (v22 >> 6)];
          v25 = 1 << v22;
          v3 = v28;
        }
        while ((v24 & (1 << v22)) != 0);
        v10 = v35;
      }
      v30 = (uint64_t (*)(unint64_t, char *, uint64_t))v39;
      v17 = v40;
      *(_QWORD *)&v16[8 * v23] = v25 | v24;
      result = v30(v12[6] + v22 * v15, v42, v2);
      v32 = v12[2];
      v33 = __OFADD__(v32, 1);
      v34 = v32 + 1;
      if (v33)
      {
        __break(1u);
        return result;
      }
      v12[2] = v34;
LABEL_4:
      v13 = v17 + 1;
      if (v13 == v37)
      {
        v36(v10, 1, 1, v2);
        return (uint64_t)v12;
      }
      v41(v10, v38 + v15 * v13, v2);
    }
  }
  else
  {
    v12 = &_swiftEmptySetSingleton;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v10, 1, 1, v2);
  }
  return (uint64_t)v12;
}

void *sub_100016C84(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  Swift::UInt v8;
  Swift::Int v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v21;
  _QWORD v22[9];

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return &_swiftEmptySetSingleton;
  sub_100012C44(&qword_1004048A8);
  v3 = static _SetStorage.allocate(capacity:)(v1);
  v4 = 0;
  v5 = v3 + 56;
  v6 = a1 + 32;
  v21 = v1;
  do
  {
    v7 = *(unsigned __int8 *)(v6 + v4);
    Hasher.init(_seed:)(v22);
    switch(v7)
    {
      case 2:
        v8 = 0;
        goto LABEL_11;
      case 3:
        v8 = 1;
        goto LABEL_11;
      case 4:
        v8 = 3;
        goto LABEL_11;
      case 5:
        v8 = 4;
        goto LABEL_11;
      case 6:
        v8 = 5;
LABEL_11:
        Hasher._combine(_:)(v8);
        break;
      default:
        Hasher._combine(_:)(2uLL);
        v1 = v21;
        Hasher._combine(_:)(v7 & 1);
        break;
    }
    v9 = Hasher._finalize()();
    v10 = -1 << *(_BYTE *)(v3 + 32);
    v11 = v9 & ~v10;
    v12 = v11 >> 6;
    v13 = *(_QWORD *)(v5 + 8 * (v11 >> 6));
    v14 = 1 << v11;
    v15 = *(_QWORD *)(v3 + 48);
    if (((1 << v11) & v13) != 0)
    {
      v16 = ~v10;
      while (2)
      {
        switch(*(_BYTE *)(v15 + v11))
        {
          case 2:
            if (v7 != 2)
              goto LABEL_15;
            break;
          case 3:
            if (v7 != 3)
              goto LABEL_15;
            break;
          case 4:
            if (v7 != 4)
              goto LABEL_15;
            break;
          case 5:
            if (v7 != 5)
              goto LABEL_15;
            break;
          case 6:
            if (v7 != 6)
              goto LABEL_15;
            break;
          default:
            if ((v7 - 2) < 5u || ((v7 ^ ((*(_BYTE *)(v15 + v11) & 1) == 0)) & 1) == 0)
            {
LABEL_15:
              v11 = (v11 + 1) & v16;
              v12 = v11 >> 6;
              v13 = *(_QWORD *)(v5 + 8 * (v11 >> 6));
              v14 = 1 << v11;
              if ((v13 & (1 << v11)) == 0)
                goto LABEL_28;
              continue;
            }
            break;
        }
        break;
      }
    }
    else
    {
LABEL_28:
      *(_QWORD *)(v5 + 8 * v12) = v14 | v13;
      *(_BYTE *)(v15 + v11) = v7;
      v17 = *(_QWORD *)(v3 + 16);
      v18 = __OFADD__(v17, 1);
      v19 = v17 + 1;
      if (v18)
      {
        __break(1u);
        JUMPOUT(0x100016EB0);
      }
      *(_QWORD *)(v3 + 16) = v19;
    }
    ++v4;
  }
  while (v4 != v1);
  return (void *)v3;
}

void sub_100016ED8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  Swift::String v10;
  uint64_t v11;
  Swift::Int v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD v37[2];
  _QWORD v38[9];

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_100012C44((uint64_t *)&unk_10040EAD0);
    v3 = static _SetStorage.allocate(capacity:)(v1);
    v4 = 0;
    v36 = v3 + 56;
    v30 = v1;
    v31 = a1 + 32;
    while (1)
    {
      v5 = (uint64_t *)(v31 + 24 * v4);
      v7 = *v5;
      v6 = v5[1];
      v8 = *((unsigned __int8 *)v5 + 16);
      v9 = *((unsigned __int8 *)v5 + 17);
      Hasher.init(_seed:)(v38);
      v10 = String.lowercased()();
      swift_bridgeObjectRetain(v6);
      String.hash(into:)(v38, v10._countAndFlagsBits, v10._object);
      swift_bridgeObjectRelease(v10._object);
      v11 = v8 ? 7365749 : 7365492;
      v35 = v11;
      String.hash(into:)(v38, v11, 0xE300000000000000);
      swift_bridgeObjectRelease(0xE300000000000000);
      v34 = v9;
      Hasher._combine(_:)(v9);
      v12 = Hasher._finalize()();
      v13 = -1 << *(_BYTE *)(v3 + 32);
      v14 = v12 & ~v13;
      v15 = v14 >> 6;
      v16 = *(_QWORD *)(v36 + 8 * (v14 >> 6));
      v17 = 1 << v14;
      if (((1 << v14) & v16) != 0)
        break;
LABEL_21:
      *(_QWORD *)(v36 + 8 * v15) = v17 | v16;
      v26 = *(_QWORD *)(v3 + 48) + 24 * v14;
      *(_QWORD *)v26 = v7;
      *(_QWORD *)(v26 + 8) = v6;
      *(_BYTE *)(v26 + 16) = v8;
      *(_BYTE *)(v26 + 17) = v34;
      v27 = *(_QWORD *)(v3 + 16);
      v28 = __OFADD__(v27, 1);
      v29 = v27 + 1;
      if (v28)
      {
        __break(1u);
        return;
      }
      *(_QWORD *)(v3 + 16) = v29;
LABEL_3:
      if (++v4 == v1)
        return;
    }
    v32 = v8;
    v33 = v4;
    v18 = ~v13;
    v19 = sub_10001C920();
    while (1)
    {
      v20 = *(_QWORD *)(v3 + 48) + 24 * v14;
      v21 = *(_QWORD *)(v20 + 8);
      v22 = *(unsigned __int8 *)(v20 + 16);
      v23 = *(unsigned __int8 *)(v20 + 17);
      v38[0] = *(_QWORD *)v20;
      v38[1] = v21;
      v37[0] = v7;
      v37[1] = v6;
      swift_bridgeObjectRetain(v21);
      if (StringProtocol.caseInsensitiveCompare<A>(_:)(v37, &type metadata for String, &type metadata for String, v19, v19))
      {
        swift_bridgeObjectRelease(v21);
      }
      else
      {
        if (v22)
          v24 = 7365749;
        else
          v24 = 7365492;
        if (v24 == v35)
        {
          swift_bridgeObjectRelease(v21);
          swift_bridgeObjectRelease_n(0xE300000000000000, 2);
LABEL_18:
          if (v23 == v34)
          {
            swift_bridgeObjectRelease(v6);
            v1 = v30;
            v4 = v33;
            goto LABEL_3;
          }
          goto LABEL_10;
        }
        v25 = _stringCompareWithSmolCheck(_:_:expecting:)(v24, 0xE300000000000000, v35, 0xE300000000000000, 0);
        swift_bridgeObjectRelease(v21);
        swift_bridgeObjectRelease_n(0xE300000000000000, 2);
        if ((v25 & 1) != 0)
          goto LABEL_18;
      }
LABEL_10:
      v14 = (v14 + 1) & v18;
      v15 = v14 >> 6;
      v16 = *(_QWORD *)(v36 + 8 * (v14 >> 6));
      v17 = 1 << v14;
      if ((v16 & (1 << v14)) == 0)
      {
        v1 = v30;
        v4 = v33;
        LOBYTE(v8) = v32;
        goto LABEL_21;
      }
    }
  }
}

uint64_t sub_100017198(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t result;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_100012C44((uint64_t *)&unk_100404890);
    v3 = static _SetStorage.allocate(capacity:)(v1);
    v4 = 0;
    v5 = v3 + 56;
    v6 = a1 + 32;
    v7 = *(_QWORD *)(v3 + 40);
    while (1)
    {
      v8 = *(unsigned __int8 *)(v6 + v4);
      result = static Hasher._hash(seed:bytes:count:)(v7, *(unsigned __int8 *)(v6 + v4), 1);
      v10 = -1 << *(_BYTE *)(v3 + 32);
      v11 = result & ~v10;
      v12 = v11 >> 6;
      v13 = *(_QWORD *)(v5 + 8 * (v11 >> 6));
      v14 = 1 << v11;
      v15 = *(_QWORD *)(v3 + 48);
      if (((1 << v11) & v13) != 0)
      {
        if (*(unsigned __int8 *)(v15 + v11) == v8)
          goto LABEL_3;
        v16 = ~v10;
        while (1)
        {
          v11 = (v11 + 1) & v16;
          v12 = v11 >> 6;
          v13 = *(_QWORD *)(v5 + 8 * (v11 >> 6));
          v14 = 1 << v11;
          if ((v13 & (1 << v11)) == 0)
            break;
          if (*(unsigned __int8 *)(v15 + v11) == v8)
            goto LABEL_3;
        }
      }
      *(_QWORD *)(v5 + 8 * v12) = v14 | v13;
      *(_BYTE *)(v15 + v11) = v8;
      v17 = *(_QWORD *)(v3 + 16);
      v18 = __OFADD__(v17, 1);
      v19 = v17 + 1;
      if (v18)
      {
        __break(1u);
        return result;
      }
      *(_QWORD *)(v3 + 16) = v19;
LABEL_3:
      if (++v4 == v1)
        return v3;
    }
  }
  return (uint64_t)&_swiftEmptySetSingleton;
}

uint64_t initializeBufferWithCopyOfBuffer for NANDriverCapabilities(uint64_t a1, uint64_t *a2, int *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = v4 + ((v3 + 16) & ~(unint64_t)v3);
    swift_retain(v4);
  }
  else
  {
    v7 = a1;
    v8 = a2[1];
    *(_QWORD *)(a1 + 8) = v8;
    *(_WORD *)(a1 + 16) = *((_WORD *)a2 + 8);
    v9 = a3[8];
    v10 = a1 + v9;
    v11 = (uint64_t)a2 + v9;
    v12 = type metadata accessor for DispatchTimeInterval(0);
    v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
    swift_bridgeObjectRetain(v4);
    swift_bridgeObjectRetain(v8);
    v13(v10, v11, v12);
    v14 = a3[10];
    *(_QWORD *)(v7 + a3[9]) = *(uint64_t *)((char *)a2 + a3[9]);
    *(_QWORD *)(v7 + v14) = *(uint64_t *)((char *)a2 + v14);
    v15 = a3[12];
    *(_QWORD *)(v7 + a3[11]) = *(uint64_t *)((char *)a2 + a3[11]);
    *(_QWORD *)(v7 + v15) = *(uint64_t *)((char *)a2 + v15);
    v16 = a3[14];
    *(_QWORD *)(v7 + a3[13]) = *(uint64_t *)((char *)a2 + a3[13]);
    *(_QWORD *)(v7 + v16) = *(uint64_t *)((char *)a2 + v16);
    *(_BYTE *)(v7 + a3[15]) = *((_BYTE *)a2 + a3[15]);
  }
  return v7;
}

uint64_t destroy for NANDriverCapabilities(_QWORD *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;

  swift_bridgeObjectRelease(*a1);
  swift_bridgeObjectRelease(a1[1]);
  v4 = (char *)a1 + *(int *)(a2 + 32);
  v5 = type metadata accessor for DispatchTimeInterval(0);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t initializeWithCopy for NANDriverCapabilities(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = *a2;
  v7 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v7;
  *(_WORD *)(a1 + 16) = *((_WORD *)a2 + 8);
  v8 = a3[8];
  v9 = a1 + v8;
  v10 = (uint64_t)a2 + v8;
  v11 = type metadata accessor for DispatchTimeInterval(0);
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  v12(v9, v10, v11);
  v13 = a3[10];
  *(_QWORD *)(a1 + a3[9]) = *(uint64_t *)((char *)a2 + a3[9]);
  *(_QWORD *)(a1 + v13) = *(uint64_t *)((char *)a2 + v13);
  v14 = a3[12];
  *(_QWORD *)(a1 + a3[11]) = *(uint64_t *)((char *)a2 + a3[11]);
  *(_QWORD *)(a1 + v14) = *(uint64_t *)((char *)a2 + v14);
  v15 = a3[14];
  *(_QWORD *)(a1 + a3[13]) = *(uint64_t *)((char *)a2 + a3[13]);
  *(_QWORD *)(a1 + v15) = *(uint64_t *)((char *)a2 + v15);
  *(_BYTE *)(a1 + a3[15]) = *((_BYTE *)a2 + a3[15]);
  return a1;
}

uint64_t *assignWithCopy for NANDriverCapabilities(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = *a2;
  v7 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = a2[1];
  v9 = a1[1];
  a1[1] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *((_BYTE *)a1 + 16) = *((_BYTE *)a2 + 16);
  *((_BYTE *)a1 + 17) = *((_BYTE *)a2 + 17);
  v10 = a3[8];
  v11 = (uint64_t)a1 + v10;
  v12 = (uint64_t)a2 + v10;
  v13 = type metadata accessor for DispatchTimeInterval(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 24))(v11, v12, v13);
  *(uint64_t *)((char *)a1 + a3[9]) = *(uint64_t *)((char *)a2 + a3[9]);
  *(uint64_t *)((char *)a1 + a3[10]) = *(uint64_t *)((char *)a2 + a3[10]);
  *(uint64_t *)((char *)a1 + a3[11]) = *(uint64_t *)((char *)a2 + a3[11]);
  *(uint64_t *)((char *)a1 + a3[12]) = *(uint64_t *)((char *)a2 + a3[12]);
  *(uint64_t *)((char *)a1 + a3[13]) = *(uint64_t *)((char *)a2 + a3[13]);
  *(uint64_t *)((char *)a1 + a3[14]) = *(uint64_t *)((char *)a2 + a3[14]);
  *((_BYTE *)a1 + a3[15]) = *((_BYTE *)a2 + a3[15]);
  return a1;
}

uint64_t initializeWithTake for NANDriverCapabilities(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  v6 = a3[8];
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for DispatchTimeInterval(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[10];
  *(_QWORD *)(a1 + a3[9]) = *(_QWORD *)(a2 + a3[9]);
  *(_QWORD *)(a1 + v10) = *(_QWORD *)(a2 + v10);
  v11 = a3[12];
  *(_QWORD *)(a1 + a3[11]) = *(_QWORD *)(a2 + a3[11]);
  *(_QWORD *)(a1 + v11) = *(_QWORD *)(a2 + v11);
  v12 = a3[14];
  *(_QWORD *)(a1 + a3[13]) = *(_QWORD *)(a2 + a3[13]);
  *(_QWORD *)(a1 + v12) = *(_QWORD *)(a2 + v12);
  *(_BYTE *)(a1 + a3[15]) = *(_BYTE *)(a2 + a3[15]);
  return a1;
}

uint64_t *assignWithTake for NANDriverCapabilities(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v6);
  v7 = a1[1];
  a1[1] = a2[1];
  swift_bridgeObjectRelease(v7);
  *((_WORD *)a1 + 8) = *((_WORD *)a2 + 8);
  v8 = a3[8];
  v9 = (uint64_t)a1 + v8;
  v10 = (uint64_t)a2 + v8;
  v11 = type metadata accessor for DispatchTimeInterval(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  v12 = a3[10];
  *(uint64_t *)((char *)a1 + a3[9]) = *(uint64_t *)((char *)a2 + a3[9]);
  *(uint64_t *)((char *)a1 + v12) = *(uint64_t *)((char *)a2 + v12);
  v13 = a3[12];
  *(uint64_t *)((char *)a1 + a3[11]) = *(uint64_t *)((char *)a2 + a3[11]);
  *(uint64_t *)((char *)a1 + v13) = *(uint64_t *)((char *)a2 + v13);
  v14 = a3[14];
  *(uint64_t *)((char *)a1 + a3[13]) = *(uint64_t *)((char *)a2 + a3[13]);
  *(uint64_t *)((char *)a1 + v14) = *(uint64_t *)((char *)a2 + v14);
  *((_BYTE *)a1 + a3[15]) = *((_BYTE *)a2 + a3[15]);
  return a1;
}

uint64_t getEnumTagSinglePayload for NANDriverCapabilities(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100017798);
}

uint64_t sub_100017798(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for DispatchTimeInterval(0);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 32)], a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for NANDriverCapabilities(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100017820);
}

char *sub_100017820(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for DispatchTimeInterval(0);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 32)], a2, a2, v7);
  }
  return result;
}

uint64_t sub_100017894(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[12];

  v4[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[2] = (char *)&value witness table for Builtin.Int8 + 64;
  v4[3] = (char *)&value witness table for Builtin.Int8 + 64;
  result = type metadata accessor for DispatchTimeInterval(319);
  if (v3 <= 0x3F)
  {
    v4[4] = *(_QWORD *)(result - 8) + 64;
    v4[5] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[6] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[7] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[8] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[9] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[10] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[11] = &unk_1003378A8;
    swift_initStructMetadata(a1, 256, 12, v4, a1 + 16);
    return 0;
  }
  return result;
}

__n128 initializeBufferWithCopyOfBuffer for NANAttribute.Cluster(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

void type metadata accessor for in6_addr(uint64_t a1)
{
  sub_1000122B4(a1, &qword_1004043E8, (uint64_t)&unk_1003D7600);
}

void type metadata accessor for in_addr(uint64_t a1)
{
  sub_1000122B4(a1, &qword_1004043F0, (uint64_t)&unk_1003D7628);
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
  sub_1000122B4(a1, &qword_1004043F8, (uint64_t)&unk_1003D7650);
}

void type metadata accessor for nw_path_status_t(uint64_t a1)
{
  sub_1000122B4(a1, (unint64_t *)&unk_100404400, (uint64_t)&unk_1003D7678);
}

void type metadata accessor for AWDLTrafficRegistrationService(uint64_t a1)
{
  sub_1000122B4(a1, (unint64_t *)&unk_100404410, (uint64_t)&unk_1003D76C0);
}

void type metadata accessor for WiFiAwareDataSessionLinkStatus(uint64_t a1)
{
  sub_1000122B4(a1, qword_10040C1A0, (uint64_t)&unk_1003D76E8);
}

void type metadata accessor for WiFiP2PInternetSharingPolicy(uint64_t a1)
{
  sub_1000122B4(a1, &qword_100404420, (uint64_t)&unk_1003D7708);
}

void type metadata accessor for WiFiAwareTerminationReason(uint64_t a1)
{
  sub_1000122B4(a1, &qword_100404428, (uint64_t)&unk_1003D7728);
}

void type metadata accessor for WiFiP2PError(uint64_t a1)
{
  sub_1000122B4(a1, &qword_100404430, (uint64_t)&unk_1003D7748);
}

void type metadata accessor for apple80211_virtual_if_role(uint64_t a1)
{
  sub_1000122B4(a1, &qword_100404438, (uint64_t)&unk_1003D7768);
}

void type metadata accessor for SCPreferences(uint64_t a1)
{
  sub_1000122B4(a1, &qword_100404440, (uint64_t)&unk_1003D7790);
}

__n128 sub_100017A28(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 44) = *(_OWORD *)(a2 + 44);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t sub_100017A44(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 60))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_100017A64(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 56) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 60) = v3;
  return result;
}

void type metadata accessor for wl_nan_conf_status(uint64_t a1)
{
  sub_1000122B4(a1, &qword_100404448, (uint64_t)&unk_1003D7818);
}

_QWORD *initializeBufferWithCopyOfBuffer for RadioResources.PreferredChannel(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

void type metadata accessor for wl_nan_ev_terminated(uint64_t a1)
{
  sub_1000122B4(a1, &qword_100404450, (uint64_t)&unk_1003D78D0);
}

uint64_t sub_100017AD4(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_DWORD *)(result + 8) = *((_DWORD *)a2 + 2);
  *(_QWORD *)result = v2;
  return result;
}

void type metadata accessor for wl_nan_event_disc_result(uint64_t a1)
{
  sub_1000122B4(a1, &qword_100404458, (uint64_t)&unk_1003D7960);
}

void type metadata accessor for wl_nan_event_replied(uint64_t a1)
{
  sub_1000122B4(a1, &qword_100404460, (uint64_t)&unk_1003D79F8);
}

uint64_t storeEnumTagSinglePayload for IEEE80211InformationElement.VeryHighThroughputCapability(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_DWORD *)(result + 8) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 12) = v3;
  return result;
}

void type metadata accessor for wl_nan_ev_receive(uint64_t a1)
{
  sub_1000122B4(a1, &qword_100404468, (uint64_t)&unk_1003D7A90);
}

void type metadata accessor for wl_nan_cmd_xtlv_id(uint64_t a1)
{
  sub_1000122B4(a1, &qword_100404470, (uint64_t)&unk_1003D7AD0);
}

_QWORD *sub_100017B64(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

void type metadata accessor for wl_nan_event_txs(uint64_t a1)
{
  sub_1000122B4(a1, &qword_100404478, (uint64_t)&unk_1003D7B50);
}

uint64_t initializeBufferWithCopyOfBuffer for IEEE80211InformationElement.VeryHighThroughputCapability(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_DWORD *)(result + 8) = *((_DWORD *)a2 + 2);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for IEEE80211InformationElement.VeryHighThroughputCapability(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 12))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

void type metadata accessor for wl_nan_ev_rx_bcn(uint64_t a1)
{
  sub_1000122B4(a1, &qword_100404480, (uint64_t)&unk_1003D7BE0);
}

__n128 sub_100017BCC(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t sub_100017BE0(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 36))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_100017C00(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_DWORD *)(result + 32) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 36) = v3;
  return result;
}

void type metadata accessor for wl_nan_ev_datapath_cmn(uint64_t a1)
{
  sub_1000122B4(a1, &qword_100404488, (uint64_t)&unk_1003D7C68);
}

__n128 sub_100017C44(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u16[0] = a2[1].n128_u16[0];
  *a1 = result;
  return result;
}

uint64_t sub_100017C58(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 18))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_100017C78(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_WORD *)(result + 16) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 18) = v3;
  return result;
}

void type metadata accessor for wl_nan_host_assist_req(uint64_t a1)
{
  sub_1000122B4(a1, &qword_100404490, (uint64_t)&unk_1003D7D18);
}

_DWORD *initializeBufferWithCopyOfBuffer for NANAttribute.ServiceDescriptorExtension.RangeLimit(_DWORD *result, _DWORD *a2)
{
  *result = *a2;
  return result;
}

void type metadata accessor for wl_nan_event_oob_af_txs(uint64_t a1)
{
  sub_1000122B4(a1, &qword_100404498, (uint64_t)&unk_1003D7DB0);
}

__n128 initializeBufferWithCopyOfBuffer for NANAttribute.ExtendedWLANInfrastructure(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u32[0] = a2[1].n128_u32[0];
  *a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for NANAttribute.ExtendedIBSS(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 20))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for NANAttribute.ExtendedIBSS(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_DWORD *)(result + 16) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 20) = v3;
  return result;
}

void type metadata accessor for wl_nan_event_oob_af_rx(uint64_t a1)
{
  sub_1000122B4(a1, &qword_1004044A0, (uint64_t)&unk_1003D7E38);
}

_DWORD *sub_100017D4C(_DWORD *result, _DWORD *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for NANAttribute.DeviceLinkQoS(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 4))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for NANAttribute.DeviceLinkQoS(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_DWORD *)result = a2 - 1;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 4) = v3;
  return result;
}

void type metadata accessor for wl_nan_dp_conf(uint64_t a1)
{
  sub_1000122B4(a1, &qword_1004044A8, (uint64_t)&unk_1003D7EC0);
}

__n128 sub_100017DB4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 14) = *(_OWORD *)(a2 + 14);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t sub_100017DC8(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 30))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_100017DE8(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_WORD *)(result + 28) = 0;
    *(_DWORD *)(result + 24) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 30) = v3;
  return result;
}

void type metadata accessor for wl_nan_dp_resp(uint64_t a1)
{
  sub_1000122B4(a1, &qword_1004044B0, (uint64_t)&unk_1003D7F48);
}

void type metadata accessor for wl_nan_tlv(uint64_t a1)
{
  sub_1000122B4(a1, &qword_1004044B8, (uint64_t)&unk_1003D7F90);
}

_QWORD *initializeBufferWithCopyOfBuffer for NANAttribute.ExtendedP2POperation(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_QWORD *)((char *)result + 6) = *(uint64_t *)((char *)a2 + 6);
  *result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for NANAttribute.ExtendedP2POperation(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 14))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for NANAttribute.FineTimingMeasurementRangeReport.Entry(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_WORD *)(result + 12) = 0;
    *(_DWORD *)(result + 8) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 14) = v3;
  return result;
}

void type metadata accessor for wl_nan_sd_transmit(uint64_t a1)
{
  sub_1000122B4(a1, &qword_1004044C0, (uint64_t)&unk_1003D8010);
}

_QWORD *initializeBufferWithCopyOfBuffer for NANMasterRank(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for NANMasterRank(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for NANMasterRank(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 8) = v3;
  return result;
}

void type metadata accessor for wl_nan_dp_end(uint64_t a1)
{
  sub_1000122B4(a1, &qword_1004044C8, (uint64_t)&unk_1003D80A8);
}

__n128 sub_100017F24(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t sub_100017F38(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 34))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_100017F58(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_WORD *)(result + 32) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 34) = v3;
  return result;
}

void type metadata accessor for wl_nan_dp_req(uint64_t a1)
{
  sub_1000122B4(a1, &qword_1004044D0, (uint64_t)&unk_1003D8130);
}

void type metadata accessor for wl_nan_awake_dws(uint64_t a1)
{
  sub_1000122B4(a1, &qword_1004044D8, (uint64_t)&unk_1003D81C8);
}

void type metadata accessor for wl_nan_election_metric_config(uint64_t a1)
{
  sub_1000122B4(a1, &qword_1004044E0, (uint64_t)&unk_1003D8250);
}

void type metadata accessor for wl_nan_cfg_ctrl2(uint64_t a1)
{
  sub_1000122B4(a1, &qword_1004044E8, (uint64_t)&unk_1003D82D8);
}

void type metadata accessor for CFString(uint64_t a1)
{
  sub_1000122B4(a1, &qword_1004044F0, (uint64_t)&unk_1003D8300);
}

void type metadata accessor for apple80211_awdl_ppp_done(uint64_t a1)
{
  sub_1000122B4(a1, &qword_1004044F8, (uint64_t)&unk_1003D8388);
}

void *sub_100018000(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x2720uLL);
}

uint64_t sub_100018008(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 10016))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_10001802C(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_OWORD *)(result + 9992) = 0u;
    *(_QWORD *)(result + 10008) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 8440) = 0u;
    *(_OWORD *)(result + 8424) = 0u;
    *(_OWORD *)(result + 8408) = 0u;
    *(_OWORD *)(result + 8392) = 0u;
    *(_OWORD *)(result + 8376) = 0u;
    *(_OWORD *)(result + 8360) = 0u;
    *(_OWORD *)(result + 8344) = 0u;
    *(_OWORD *)(result + 8328) = 0u;
    *(_OWORD *)(result + 8312) = 0u;
    *(_OWORD *)(result + 8296) = 0u;
    *(_OWORD *)(result + 8280) = 0u;
    *(_OWORD *)(result + 8264) = 0u;
    *(_OWORD *)(result + 8248) = 0u;
    *(_OWORD *)(result + 8232) = 0u;
    *(_OWORD *)(result + 8216) = 0u;
    *(_OWORD *)(result + 8200) = 0u;
    *(_OWORD *)(result + 4344) = 0u;
    *(_OWORD *)(result + 4328) = 0u;
    *(_OWORD *)(result + 4312) = 0u;
    *(_OWORD *)(result + 4296) = 0u;
    *(_OWORD *)(result + 4280) = 0u;
    *(_OWORD *)(result + 4264) = 0u;
    *(_OWORD *)(result + 4248) = 0u;
    *(_OWORD *)(result + 4232) = 0u;
    *(_OWORD *)(result + 4216) = 0u;
    *(_OWORD *)(result + 4200) = 0u;
    *(_OWORD *)(result + 4184) = 0u;
    *(_OWORD *)(result + 4168) = 0u;
    *(_OWORD *)(result + 4152) = 0u;
    *(_OWORD *)(result + 4136) = 0u;
    *(_OWORD *)(result + 4120) = 0u;
    *(_OWORD *)(result + 4104) = 0u;
    *(_OWORD *)(result + 4088) = 0u;
    *(_OWORD *)(result + 4072) = 0u;
    *(_OWORD *)(result + 4056) = 0u;
    *(_OWORD *)(result + 4040) = 0u;
    *(_OWORD *)(result + 4024) = 0u;
    *(_OWORD *)(result + 4008) = 0u;
    *(_OWORD *)(result + 3992) = 0u;
    *(_OWORD *)(result + 3976) = 0u;
    *(_OWORD *)(result + 3960) = 0u;
    *(_OWORD *)(result + 3944) = 0u;
    *(_OWORD *)(result + 3928) = 0u;
    *(_OWORD *)(result + 3912) = 0u;
    *(_OWORD *)(result + 3896) = 0u;
    *(_OWORD *)(result + 3880) = 0u;
    *(_OWORD *)(result + 3864) = 0u;
    *(_OWORD *)(result + 3848) = 0u;
    *(_OWORD *)(result + 3832) = 0u;
    *(_OWORD *)(result + 3816) = 0u;
    *(_OWORD *)(result + 3800) = 0u;
    *(_OWORD *)(result + 3784) = 0u;
    *(_OWORD *)(result + 3768) = 0u;
    *(_OWORD *)(result + 3752) = 0u;
    *(_OWORD *)(result + 3736) = 0u;
    *(_OWORD *)(result + 3720) = 0u;
    *(_OWORD *)(result + 3704) = 0u;
    *(_OWORD *)(result + 3688) = 0u;
    *(_OWORD *)(result + 3672) = 0u;
    *(_OWORD *)(result + 3656) = 0u;
    *(_OWORD *)(result + 3640) = 0u;
    *(_OWORD *)(result + 3624) = 0u;
    *(_OWORD *)(result + 3608) = 0u;
    *(_OWORD *)(result + 3592) = 0u;
    *(_OWORD *)(result + 3576) = 0u;
    *(_OWORD *)(result + 3560) = 0u;
    *(_OWORD *)(result + 3544) = 0u;
    *(_OWORD *)(result + 3528) = 0u;
    *(_OWORD *)(result + 3512) = 0u;
    *(_OWORD *)(result + 3496) = 0u;
    *(_OWORD *)(result + 3480) = 0u;
    *(_OWORD *)(result + 3464) = 0u;
    *(_OWORD *)(result + 3448) = 0u;
    *(_OWORD *)(result + 3432) = 0u;
    *(_OWORD *)(result + 3416) = 0u;
    *(_OWORD *)(result + 3400) = 0u;
    *(_OWORD *)(result + 3384) = 0u;
    *(_OWORD *)(result + 3368) = 0u;
    *(_OWORD *)(result + 3352) = 0u;
    *(_OWORD *)(result + 3336) = 0u;
    *(_OWORD *)(result + 3320) = 0u;
    *(_OWORD *)(result + 3304) = 0u;
    *(_OWORD *)(result + 3288) = 0u;
    *(_OWORD *)(result + 3272) = 0u;
    *(_OWORD *)(result + 3256) = 0u;
    *(_OWORD *)(result + 3240) = 0u;
    *(_OWORD *)(result + 3224) = 0u;
    *(_OWORD *)(result + 3208) = 0u;
    *(_OWORD *)(result + 3192) = 0u;
    *(_OWORD *)(result + 3176) = 0u;
    *(_OWORD *)(result + 3160) = 0u;
    *(_OWORD *)(result + 3144) = 0u;
    *(_OWORD *)(result + 3128) = 0u;
    *(_OWORD *)(result + 3112) = 0u;
    *(_OWORD *)(result + 3096) = 0u;
    *(_OWORD *)(result + 3080) = 0u;
    *(_OWORD *)(result + 3064) = 0u;
    *(_OWORD *)(result + 3048) = 0u;
    *(_OWORD *)(result + 3032) = 0u;
    *(_OWORD *)(result + 3016) = 0u;
    *(_OWORD *)(result + 3000) = 0u;
    *(_OWORD *)(result + 2984) = 0u;
    *(_OWORD *)(result + 2968) = 0u;
    *(_OWORD *)(result + 2952) = 0u;
    *(_OWORD *)(result + 2936) = 0u;
    *(_OWORD *)(result + 2920) = 0u;
    *(_OWORD *)(result + 2904) = 0u;
    *(_OWORD *)(result + 2888) = 0u;
    *(_OWORD *)(result + 2872) = 0u;
    *(_OWORD *)(result + 2856) = 0u;
    *(_OWORD *)(result + 2840) = 0u;
    *(_OWORD *)(result + 2824) = 0u;
    *(_OWORD *)(result + 2808) = 0u;
    *(_OWORD *)(result + 2792) = 0u;
    *(_OWORD *)(result + 2776) = 0u;
    *(_OWORD *)(result + 2760) = 0u;
    *(_OWORD *)(result + 2744) = 0u;
    *(_OWORD *)(result + 2728) = 0u;
    *(_OWORD *)(result + 2712) = 0u;
    *(_OWORD *)(result + 2696) = 0u;
    *(_OWORD *)(result + 2680) = 0u;
    *(_OWORD *)(result + 2664) = 0u;
    *(_OWORD *)(result + 2648) = 0u;
    *(_OWORD *)(result + 2632) = 0u;
    *(_OWORD *)(result + 2616) = 0u;
    *(_OWORD *)(result + 2600) = 0u;
    *(_OWORD *)(result + 2584) = 0u;
    *(_OWORD *)(result + 2568) = 0u;
    *(_OWORD *)(result + 2552) = 0u;
    *(_OWORD *)(result + 2536) = 0u;
    *(_OWORD *)(result + 2520) = 0u;
    *(_OWORD *)(result + 2504) = 0u;
    *(_OWORD *)(result + 2488) = 0u;
    *(_OWORD *)(result + 2472) = 0u;
    *(_OWORD *)(result + 2456) = 0u;
    *(_OWORD *)(result + 2440) = 0u;
    *(_OWORD *)(result + 2424) = 0u;
    *(_OWORD *)(result + 2408) = 0u;
    *(_OWORD *)(result + 2392) = 0u;
    *(_OWORD *)(result + 2376) = 0u;
    *(_OWORD *)(result + 2360) = 0u;
    *(_OWORD *)(result + 2344) = 0u;
    *(_OWORD *)(result + 2328) = 0u;
    *(_OWORD *)(result + 2312) = 0u;
    *(_OWORD *)(result + 2296) = 0u;
    *(_OWORD *)(result + 2280) = 0u;
    *(_OWORD *)(result + 2264) = 0u;
    *(_OWORD *)(result + 2248) = 0u;
    *(_OWORD *)(result + 2232) = 0u;
    *(_OWORD *)(result + 2216) = 0u;
    *(_OWORD *)(result + 2200) = 0u;
    *(_OWORD *)(result + 2184) = 0u;
    *(_OWORD *)(result + 2168) = 0u;
    *(_OWORD *)(result + 2152) = 0u;
    *(_OWORD *)(result + 2136) = 0u;
    *(_OWORD *)(result + 2120) = 0u;
    *(_OWORD *)(result + 2104) = 0u;
    *(_OWORD *)(result + 2088) = 0u;
    *(_OWORD *)(result + 2072) = 0u;
    *(_OWORD *)(result + 2056) = 0u;
    *(_OWORD *)(result + 2040) = 0u;
    *(_OWORD *)(result + 2024) = 0u;
    *(_OWORD *)(result + 2008) = 0u;
    *(_OWORD *)(result + 1992) = 0u;
    *(_OWORD *)(result + 1976) = 0u;
    *(_OWORD *)(result + 1960) = 0u;
    *(_OWORD *)(result + 1944) = 0u;
    *(_OWORD *)(result + 1928) = 0u;
    *(_OWORD *)(result + 1912) = 0u;
    *(_OWORD *)(result + 1896) = 0u;
    *(_OWORD *)(result + 1880) = 0u;
    *(_OWORD *)(result + 1864) = 0u;
    *(_OWORD *)(result + 1848) = 0u;
    *(_OWORD *)(result + 1832) = 0u;
    *(_OWORD *)(result + 1816) = 0u;
    *(_OWORD *)(result + 1800) = 0u;
    *(_OWORD *)(result + 1784) = 0u;
    *(_OWORD *)(result + 1768) = 0u;
    *(_OWORD *)(result + 1752) = 0u;
    *(_OWORD *)(result + 1736) = 0u;
    *(_OWORD *)(result + 1720) = 0u;
    *(_OWORD *)(result + 1704) = 0u;
    *(_OWORD *)(result + 1688) = 0u;
    *(_OWORD *)(result + 1672) = 0u;
    *(_OWORD *)(result + 1656) = 0u;
    *(_OWORD *)(result + 1640) = 0u;
    *(_OWORD *)(result + 1624) = 0u;
    *(_OWORD *)(result + 1608) = 0u;
    *(_OWORD *)(result + 1592) = 0u;
    *(_OWORD *)(result + 1576) = 0u;
    *(_OWORD *)(result + 1560) = 0u;
    *(_OWORD *)(result + 1544) = 0u;
    *(_OWORD *)(result + 1528) = 0u;
    *(_OWORD *)(result + 1512) = 0u;
    *(_OWORD *)(result + 1496) = 0u;
    *(_OWORD *)(result + 1480) = 0u;
    *(_OWORD *)(result + 1464) = 0u;
    *(_OWORD *)(result + 1448) = 0u;
    *(_OWORD *)(result + 1432) = 0u;
    *(_OWORD *)(result + 1416) = 0u;
    *(_OWORD *)(result + 1400) = 0u;
    *(_OWORD *)(result + 1384) = 0u;
    *(_OWORD *)(result + 1368) = 0u;
    *(_OWORD *)(result + 1352) = 0u;
    *(_OWORD *)(result + 1336) = 0u;
    *(_OWORD *)(result + 1320) = 0u;
    *(_OWORD *)(result + 1304) = 0u;
    *(_OWORD *)(result + 1288) = 0u;
    *(_OWORD *)(result + 1272) = 0u;
    *(_OWORD *)(result + 1256) = 0u;
    *(_OWORD *)(result + 1240) = 0u;
    *(_OWORD *)(result + 1224) = 0u;
    *(_OWORD *)(result + 1208) = 0u;
    *(_OWORD *)(result + 1192) = 0u;
    *(_OWORD *)(result + 1176) = 0u;
    *(_OWORD *)(result + 1160) = 0u;
    *(_OWORD *)(result + 1144) = 0u;
    *(_OWORD *)(result + 1128) = 0u;
    *(_OWORD *)(result + 1112) = 0u;
    *(_OWORD *)(result + 1096) = 0u;
    *(_OWORD *)(result + 1080) = 0u;
    *(_OWORD *)(result + 1064) = 0u;
    *(_OWORD *)(result + 1048) = 0u;
    *(_OWORD *)(result + 1032) = 0u;
    *(_OWORD *)(result + 8952) = 0u;
    *(_OWORD *)(result + 8936) = 0u;
    *(_OWORD *)(result + 8920) = 0u;
    *(_OWORD *)(result + 8904) = 0u;
    *(_OWORD *)(result + 8888) = 0u;
    *(_OWORD *)(result + 8872) = 0u;
    *(_OWORD *)(result + 8856) = 0u;
    *(_OWORD *)(result + 8712) = 0u;
    *(_OWORD *)(result + 8840) = 0u;
    *(_OWORD *)(result + 8824) = 0u;
    *(_OWORD *)(result + 8776) = 0u;
    *(_OWORD *)(result + 8760) = 0u;
    *(_OWORD *)(result + 8744) = 0u;
    *(_OWORD *)(result + 8728) = 0u;
    *(_OWORD *)(result + 8808) = 0u;
    *(_OWORD *)(result + 8792) = 0u;
    *(_OWORD *)(result + 9208) = 0u;
    *(_OWORD *)(result + 9192) = 0u;
    *(_OWORD *)(result + 9176) = 0u;
    *(_OWORD *)(result + 9160) = 0u;
    *(_OWORD *)(result + 9144) = 0u;
    *(_OWORD *)(result + 9128) = 0u;
    *(_OWORD *)(result + 9112) = 0u;
    *(_OWORD *)(result + 8968) = 0u;
    *(_OWORD *)(result + 9096) = 0u;
    *(_OWORD *)(result + 9080) = 0u;
    *(_OWORD *)(result + 9032) = 0u;
    *(_OWORD *)(result + 9016) = 0u;
    *(_OWORD *)(result + 9000) = 0u;
    *(_OWORD *)(result + 8984) = 0u;
    *(_OWORD *)(result + 9064) = 0u;
    *(_OWORD *)(result + 9048) = 0u;
    *(_OWORD *)(result + 9464) = 0u;
    *(_OWORD *)(result + 9448) = 0u;
    *(_OWORD *)(result + 9432) = 0u;
    *(_OWORD *)(result + 9416) = 0u;
    *(_OWORD *)(result + 9400) = 0u;
    *(_OWORD *)(result + 9384) = 0u;
    *(_OWORD *)(result + 9368) = 0u;
    *(_OWORD *)(result + 9224) = 0u;
    *(_OWORD *)(result + 9352) = 0u;
    *(_OWORD *)(result + 9336) = 0u;
    *(_OWORD *)(result + 9288) = 0u;
    *(_OWORD *)(result + 9272) = 0u;
    *(_OWORD *)(result + 9256) = 0u;
    *(_OWORD *)(result + 9240) = 0u;
    *(_OWORD *)(result + 9320) = 0u;
    *(_OWORD *)(result + 9304) = 0u;
    *(_OWORD *)(result + 9720) = 0u;
    *(_OWORD *)(result + 9704) = 0u;
    *(_OWORD *)(result + 9688) = 0u;
    *(_OWORD *)(result + 9672) = 0u;
    *(_OWORD *)(result + 9656) = 0u;
    *(_OWORD *)(result + 9640) = 0u;
    *(_OWORD *)(result + 9624) = 0u;
    *(_OWORD *)(result + 9480) = 0u;
    *(_OWORD *)(result + 9608) = 0u;
    *(_OWORD *)(result + 9592) = 0u;
    *(_OWORD *)(result + 9544) = 0u;
    *(_OWORD *)(result + 9528) = 0u;
    *(_OWORD *)(result + 9512) = 0u;
    *(_OWORD *)(result + 9496) = 0u;
    *(_OWORD *)(result + 9576) = 0u;
    *(_OWORD *)(result + 9560) = 0u;
    *(_OWORD *)(result + 9976) = 0u;
    *(_OWORD *)(result + 9960) = 0u;
    *(_OWORD *)(result + 9944) = 0u;
    *(_OWORD *)(result + 9928) = 0u;
    *(_OWORD *)(result + 9912) = 0u;
    *(_OWORD *)(result + 9896) = 0u;
    *(_OWORD *)(result + 9880) = 0u;
    *(_OWORD *)(result + 9736) = 0u;
    *(_OWORD *)(result + 9864) = 0u;
    *(_OWORD *)(result + 9816) = 0u;
    *(_OWORD *)(result + 9800) = 0u;
    *(_OWORD *)(result + 9784) = 0u;
    *(_OWORD *)(result + 9768) = 0u;
    *(_OWORD *)(result + 9752) = 0u;
    *(_OWORD *)(result + 9848) = 0u;
    *(_OWORD *)(result + 9832) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 760) = 0u;
    *(_OWORD *)(result + 744) = 0u;
    *(_OWORD *)(result + 728) = 0u;
    *(_OWORD *)(result + 712) = 0u;
    *(_OWORD *)(result + 696) = 0u;
    *(_OWORD *)(result + 680) = 0u;
    *(_OWORD *)(result + 664) = 0u;
    *(_OWORD *)(result + 552) = 0u;
    *(_OWORD *)(result + 536) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_OWORD *)(result + 648) = 0u;
    *(_OWORD *)(result + 632) = 0u;
    *(_OWORD *)(result + 616) = 0u;
    *(_OWORD *)(result + 600) = 0u;
    *(_OWORD *)(result + 584) = 0u;
    *(_OWORD *)(result + 568) = 0u;
    *(_OWORD *)(result + 1016) = 0u;
    *(_OWORD *)(result + 1000) = 0u;
    *(_OWORD *)(result + 984) = 0u;
    *(_OWORD *)(result + 968) = 0u;
    *(_OWORD *)(result + 952) = 0u;
    *(_OWORD *)(result + 936) = 0u;
    *(_OWORD *)(result + 920) = 0u;
    *(_OWORD *)(result + 824) = 0u;
    *(_OWORD *)(result + 808) = 0u;
    *(_OWORD *)(result + 792) = 0u;
    *(_OWORD *)(result + 776) = 0u;
    *(_OWORD *)(result + 904) = 0u;
    *(_OWORD *)(result + 888) = 0u;
    *(_OWORD *)(result + 872) = 0u;
    *(_OWORD *)(result + 856) = 0u;
    *(_OWORD *)(result + 840) = 0u;
    *(_OWORD *)(result + 8696) = 0u;
    *(_OWORD *)(result + 8680) = 0u;
    *(_OWORD *)(result + 8664) = 0u;
    *(_OWORD *)(result + 8648) = 0u;
    *(_OWORD *)(result + 8632) = 0u;
    *(_OWORD *)(result + 8616) = 0u;
    *(_OWORD *)(result + 8600) = 0u;
    *(_OWORD *)(result + 8584) = 0u;
    *(_OWORD *)(result + 8568) = 0u;
    *(_OWORD *)(result + 8552) = 0u;
    *(_OWORD *)(result + 8536) = 0u;
    *(_OWORD *)(result + 8520) = 0u;
    *(_OWORD *)(result + 8504) = 0u;
    *(_OWORD *)(result + 8488) = 0u;
    *(_OWORD *)(result + 8472) = 0u;
    *(_OWORD *)(result + 8456) = 0u;
    *(_OWORD *)(result + 8184) = 0u;
    *(_OWORD *)(result + 8168) = 0u;
    *(_OWORD *)(result + 8152) = 0u;
    *(_OWORD *)(result + 8136) = 0u;
    *(_OWORD *)(result + 8120) = 0u;
    *(_OWORD *)(result + 8104) = 0u;
    *(_OWORD *)(result + 8088) = 0u;
    *(_OWORD *)(result + 8072) = 0u;
    *(_OWORD *)(result + 8056) = 0u;
    *(_OWORD *)(result + 8040) = 0u;
    *(_OWORD *)(result + 8024) = 0u;
    *(_OWORD *)(result + 8008) = 0u;
    *(_OWORD *)(result + 7992) = 0u;
    *(_OWORD *)(result + 7976) = 0u;
    *(_OWORD *)(result + 7960) = 0u;
    *(_OWORD *)(result + 7944) = 0u;
    *(_OWORD *)(result + 7928) = 0u;
    *(_OWORD *)(result + 7912) = 0u;
    *(_OWORD *)(result + 7896) = 0u;
    *(_OWORD *)(result + 7880) = 0u;
    *(_OWORD *)(result + 7864) = 0u;
    *(_OWORD *)(result + 7848) = 0u;
    *(_OWORD *)(result + 7832) = 0u;
    *(_OWORD *)(result + 7816) = 0u;
    *(_OWORD *)(result + 7800) = 0u;
    *(_OWORD *)(result + 7784) = 0u;
    *(_OWORD *)(result + 7768) = 0u;
    *(_OWORD *)(result + 7752) = 0u;
    *(_OWORD *)(result + 7736) = 0u;
    *(_OWORD *)(result + 7720) = 0u;
    *(_OWORD *)(result + 7704) = 0u;
    *(_OWORD *)(result + 7688) = 0u;
    *(_OWORD *)(result + 7672) = 0u;
    *(_OWORD *)(result + 7656) = 0u;
    *(_OWORD *)(result + 7640) = 0u;
    *(_OWORD *)(result + 7624) = 0u;
    *(_OWORD *)(result + 7608) = 0u;
    *(_OWORD *)(result + 7592) = 0u;
    *(_OWORD *)(result + 7576) = 0u;
    *(_OWORD *)(result + 7560) = 0u;
    *(_OWORD *)(result + 7544) = 0u;
    *(_OWORD *)(result + 7528) = 0u;
    *(_OWORD *)(result + 7512) = 0u;
    *(_OWORD *)(result + 7496) = 0u;
    *(_OWORD *)(result + 7480) = 0u;
    *(_OWORD *)(result + 7464) = 0u;
    *(_OWORD *)(result + 7448) = 0u;
    *(_OWORD *)(result + 7432) = 0u;
    *(_OWORD *)(result + 7416) = 0u;
    *(_OWORD *)(result + 7400) = 0u;
    *(_OWORD *)(result + 7384) = 0u;
    *(_OWORD *)(result + 7368) = 0u;
    *(_OWORD *)(result + 7352) = 0u;
    *(_OWORD *)(result + 7336) = 0u;
    *(_OWORD *)(result + 7320) = 0u;
    *(_OWORD *)(result + 7304) = 0u;
    *(_OWORD *)(result + 7288) = 0u;
    *(_OWORD *)(result + 7272) = 0u;
    *(_OWORD *)(result + 7256) = 0u;
    *(_OWORD *)(result + 7240) = 0u;
    *(_OWORD *)(result + 7224) = 0u;
    *(_OWORD *)(result + 7208) = 0u;
    *(_OWORD *)(result + 7192) = 0u;
    *(_OWORD *)(result + 7176) = 0u;
    *(_OWORD *)(result + 7160) = 0u;
    *(_OWORD *)(result + 7144) = 0u;
    *(_OWORD *)(result + 7128) = 0u;
    *(_OWORD *)(result + 7112) = 0u;
    *(_OWORD *)(result + 7096) = 0u;
    *(_OWORD *)(result + 7080) = 0u;
    *(_OWORD *)(result + 7064) = 0u;
    *(_OWORD *)(result + 7048) = 0u;
    *(_OWORD *)(result + 7032) = 0u;
    *(_OWORD *)(result + 7016) = 0u;
    *(_OWORD *)(result + 7000) = 0u;
    *(_OWORD *)(result + 6984) = 0u;
    *(_OWORD *)(result + 6968) = 0u;
    *(_OWORD *)(result + 6952) = 0u;
    *(_OWORD *)(result + 6936) = 0u;
    *(_OWORD *)(result + 6920) = 0u;
    *(_OWORD *)(result + 6904) = 0u;
    *(_OWORD *)(result + 6888) = 0u;
    *(_OWORD *)(result + 6872) = 0u;
    *(_OWORD *)(result + 6856) = 0u;
    *(_OWORD *)(result + 6840) = 0u;
    *(_OWORD *)(result + 6824) = 0u;
    *(_OWORD *)(result + 6808) = 0u;
    *(_OWORD *)(result + 6792) = 0u;
    *(_OWORD *)(result + 6776) = 0u;
    *(_OWORD *)(result + 6760) = 0u;
    *(_OWORD *)(result + 6744) = 0u;
    *(_OWORD *)(result + 6728) = 0u;
    *(_OWORD *)(result + 6712) = 0u;
    *(_OWORD *)(result + 6696) = 0u;
    *(_OWORD *)(result + 6680) = 0u;
    *(_OWORD *)(result + 6664) = 0u;
    *(_OWORD *)(result + 6648) = 0u;
    *(_OWORD *)(result + 6632) = 0u;
    *(_OWORD *)(result + 6616) = 0u;
    *(_OWORD *)(result + 6600) = 0u;
    *(_OWORD *)(result + 6584) = 0u;
    *(_OWORD *)(result + 6568) = 0u;
    *(_OWORD *)(result + 6552) = 0u;
    *(_OWORD *)(result + 6536) = 0u;
    *(_OWORD *)(result + 6520) = 0u;
    *(_OWORD *)(result + 6504) = 0u;
    *(_OWORD *)(result + 6488) = 0u;
    *(_OWORD *)(result + 6472) = 0u;
    *(_OWORD *)(result + 6456) = 0u;
    *(_OWORD *)(result + 6440) = 0u;
    *(_OWORD *)(result + 6424) = 0u;
    *(_OWORD *)(result + 6408) = 0u;
    *(_OWORD *)(result + 6392) = 0u;
    *(_OWORD *)(result + 6376) = 0u;
    *(_OWORD *)(result + 6360) = 0u;
    *(_OWORD *)(result + 6344) = 0u;
    *(_OWORD *)(result + 6328) = 0u;
    *(_OWORD *)(result + 6312) = 0u;
    *(_OWORD *)(result + 6296) = 0u;
    *(_OWORD *)(result + 6280) = 0u;
    *(_OWORD *)(result + 6264) = 0u;
    *(_OWORD *)(result + 6248) = 0u;
    *(_OWORD *)(result + 6232) = 0u;
    *(_OWORD *)(result + 6216) = 0u;
    *(_OWORD *)(result + 6200) = 0u;
    *(_OWORD *)(result + 6184) = 0u;
    *(_OWORD *)(result + 6168) = 0u;
    *(_OWORD *)(result + 6152) = 0u;
    *(_OWORD *)(result + 6136) = 0u;
    *(_OWORD *)(result + 6120) = 0u;
    *(_OWORD *)(result + 6104) = 0u;
    *(_OWORD *)(result + 6088) = 0u;
    *(_OWORD *)(result + 6072) = 0u;
    *(_OWORD *)(result + 6056) = 0u;
    *(_OWORD *)(result + 6040) = 0u;
    *(_OWORD *)(result + 6024) = 0u;
    *(_OWORD *)(result + 6008) = 0u;
    *(_OWORD *)(result + 5992) = 0u;
    *(_OWORD *)(result + 5976) = 0u;
    *(_OWORD *)(result + 5960) = 0u;
    *(_OWORD *)(result + 5944) = 0u;
    *(_OWORD *)(result + 5928) = 0u;
    *(_OWORD *)(result + 5912) = 0u;
    *(_OWORD *)(result + 5896) = 0u;
    *(_OWORD *)(result + 5880) = 0u;
    *(_OWORD *)(result + 5864) = 0u;
    *(_OWORD *)(result + 5848) = 0u;
    *(_OWORD *)(result + 5832) = 0u;
    *(_OWORD *)(result + 5816) = 0u;
    *(_OWORD *)(result + 5800) = 0u;
    *(_OWORD *)(result + 5784) = 0u;
    *(_OWORD *)(result + 5768) = 0u;
    *(_OWORD *)(result + 5752) = 0u;
    *(_OWORD *)(result + 5736) = 0u;
    *(_OWORD *)(result + 5720) = 0u;
    *(_OWORD *)(result + 5704) = 0u;
    *(_OWORD *)(result + 5688) = 0u;
    *(_OWORD *)(result + 5672) = 0u;
    *(_OWORD *)(result + 5656) = 0u;
    *(_OWORD *)(result + 5640) = 0u;
    *(_OWORD *)(result + 5624) = 0u;
    *(_OWORD *)(result + 5608) = 0u;
    *(_OWORD *)(result + 5592) = 0u;
    *(_OWORD *)(result + 5576) = 0u;
    *(_OWORD *)(result + 5560) = 0u;
    *(_OWORD *)(result + 5544) = 0u;
    *(_OWORD *)(result + 5528) = 0u;
    *(_OWORD *)(result + 5512) = 0u;
    *(_OWORD *)(result + 5496) = 0u;
    *(_OWORD *)(result + 5480) = 0u;
    *(_OWORD *)(result + 5464) = 0u;
    *(_OWORD *)(result + 5448) = 0u;
    *(_OWORD *)(result + 5432) = 0u;
    *(_OWORD *)(result + 5416) = 0u;
    *(_OWORD *)(result + 5400) = 0u;
    *(_OWORD *)(result + 5384) = 0u;
    *(_OWORD *)(result + 5368) = 0u;
    *(_OWORD *)(result + 5352) = 0u;
    *(_OWORD *)(result + 5336) = 0u;
    *(_OWORD *)(result + 5320) = 0u;
    *(_OWORD *)(result + 5304) = 0u;
    *(_OWORD *)(result + 5288) = 0u;
    *(_OWORD *)(result + 5272) = 0u;
    *(_OWORD *)(result + 5256) = 0u;
    *(_OWORD *)(result + 5240) = 0u;
    *(_OWORD *)(result + 5224) = 0u;
    *(_OWORD *)(result + 5208) = 0u;
    *(_OWORD *)(result + 5192) = 0u;
    *(_OWORD *)(result + 5176) = 0u;
    *(_OWORD *)(result + 5160) = 0u;
    *(_OWORD *)(result + 5144) = 0u;
    *(_OWORD *)(result + 5128) = 0u;
    *(_OWORD *)(result + 5112) = 0u;
    *(_OWORD *)(result + 5096) = 0u;
    *(_OWORD *)(result + 5080) = 0u;
    *(_OWORD *)(result + 5064) = 0u;
    *(_OWORD *)(result + 5048) = 0u;
    *(_OWORD *)(result + 5032) = 0u;
    *(_OWORD *)(result + 5016) = 0u;
    *(_OWORD *)(result + 5000) = 0u;
    *(_OWORD *)(result + 4984) = 0u;
    *(_OWORD *)(result + 4968) = 0u;
    *(_OWORD *)(result + 4952) = 0u;
    *(_OWORD *)(result + 4936) = 0u;
    *(_OWORD *)(result + 4920) = 0u;
    *(_OWORD *)(result + 4904) = 0u;
    *(_OWORD *)(result + 4888) = 0u;
    *(_OWORD *)(result + 4872) = 0u;
    *(_OWORD *)(result + 4856) = 0u;
    *(_OWORD *)(result + 4840) = 0u;
    *(_OWORD *)(result + 4824) = 0u;
    *(_OWORD *)(result + 4808) = 0u;
    *(_OWORD *)(result + 4792) = 0u;
    *(_OWORD *)(result + 4776) = 0u;
    *(_OWORD *)(result + 4760) = 0u;
    *(_OWORD *)(result + 4744) = 0u;
    *(_OWORD *)(result + 4728) = 0u;
    *(_OWORD *)(result + 4712) = 0u;
    *(_OWORD *)(result + 4696) = 0u;
    *(_OWORD *)(result + 4680) = 0u;
    *(_OWORD *)(result + 4664) = 0u;
    *(_OWORD *)(result + 4648) = 0u;
    *(_OWORD *)(result + 4632) = 0u;
    *(_OWORD *)(result + 4616) = 0u;
    *(_OWORD *)(result + 4600) = 0u;
    *(_OWORD *)(result + 4584) = 0u;
    *(_OWORD *)(result + 4568) = 0u;
    *(_OWORD *)(result + 4552) = 0u;
    *(_OWORD *)(result + 4536) = 0u;
    *(_OWORD *)(result + 4520) = 0u;
    *(_OWORD *)(result + 4504) = 0u;
    *(_OWORD *)(result + 4488) = 0u;
    *(_OWORD *)(result + 4472) = 0u;
    *(_OWORD *)(result + 4456) = 0u;
    *(_OWORD *)(result + 4440) = 0u;
    *(_OWORD *)(result + 4424) = 0u;
    *(_OWORD *)(result + 4408) = 0u;
    *(_OWORD *)(result + 4392) = 0u;
    *(_OWORD *)(result + 4376) = 0u;
    *(_OWORD *)(result + 4360) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 10016) = v3;
  return result;
}

void type metadata accessor for apple80211_channels_info(uint64_t a1)
{
  sub_1000122B4(a1, &qword_100404500, (uint64_t)&unk_1003D8408);
}

__n128 sub_100018B2C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t storeEnumTagSinglePayload for NANAttribute.ClusterDiscovery(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 24) = v3;
  return result;
}

void type metadata accessor for apple80211_companion_skywalk_if_create(uint64_t a1)
{
  sub_1000122B4(a1, &qword_100404508, (uint64_t)&unk_1003D84D8);
}

__n128 sub_100018B80(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u32[0] = a2[1].n128_u32[0];
  *a1 = result;
  return result;
}

void type metadata accessor for apple80211_virt_if_delete_data(uint64_t a1)
{
  sub_1000122B4(a1, &qword_100404510, (uint64_t)&unk_1003D8560);
}

__n128 sub_100018BA8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t sub_100018BBC(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 64))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_100018BDC(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 64) = v3;
  return result;
}

void type metadata accessor for apple80211_nan_keep_alive_dp_identifer(uint64_t a1)
{
  sub_1000122B4(a1, &qword_100404518, (uint64_t)&unk_1003D85E0);
}

__n128 initializeWithTake for NANServiceInfo(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for NANAttribute.ClusterDiscovery(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

void type metadata accessor for histogramBin_s(uint64_t a1)
{
  sub_1000122B4(a1, &qword_100404520, (uint64_t)&unk_1003D8668);
}

void type metadata accessor for apple80211_nan_ir_status(uint64_t a1)
{
  sub_1000122B4(a1, &qword_100404528, (uint64_t)&unk_1003D86F0);
}

void type metadata accessor for apple80211_nan_ps_restriction(uint64_t a1)
{
  sub_1000122B4(a1, &qword_100404530, (uint64_t)&unk_1003D8778);
}

void type metadata accessor for apple80211_nan_dp_link_status(uint64_t a1)
{
  sub_1000122B4(a1, &qword_100404538, (uint64_t)&unk_1003D87F8);
}

__n128 sub_100018CB0(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  __int128 v7;
  __int128 v8;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  result = *(__n128 *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  v8 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v8;
  *(__n128 *)(a1 + 96) = result;
  *(_OWORD *)(a1 + 112) = v7;
  return result;
}

uint64_t sub_100018CDC(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 160))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_100018CFC(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 152) = 0;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 160) = v3;
  return result;
}

void type metadata accessor for apple80211_nan_forced_disc_beacon_transmission(uint64_t a1)
{
  sub_1000122B4(a1, &qword_100404540, (uint64_t)&unk_1003D8880);
}

void type metadata accessor for apple80211_nan_dp_confirm(uint64_t a1)
{
  sub_1000122B4(a1, &qword_100404548, (uint64_t)&unk_1003D8908);
}

void *sub_100018D78(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x880uLL);
}

uint64_t sub_100018D80(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 2176))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_100018DA0(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 2168) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 2152) = 0u;
    *(_OWORD *)(result + 2136) = 0u;
    *(_OWORD *)(result + 2120) = 0u;
    *(_OWORD *)(result + 2104) = 0u;
    *(_OWORD *)(result + 2088) = 0u;
    *(_OWORD *)(result + 2072) = 0u;
    *(_OWORD *)(result + 2056) = 0u;
    *(_OWORD *)(result + 2040) = 0u;
    *(_OWORD *)(result + 2024) = 0u;
    *(_OWORD *)(result + 2008) = 0u;
    *(_OWORD *)(result + 1992) = 0u;
    *(_OWORD *)(result + 1976) = 0u;
    *(_OWORD *)(result + 1960) = 0u;
    *(_OWORD *)(result + 1944) = 0u;
    *(_OWORD *)(result + 1928) = 0u;
    *(_OWORD *)(result + 1912) = 0u;
    *(_OWORD *)(result + 1896) = 0u;
    *(_OWORD *)(result + 1880) = 0u;
    *(_OWORD *)(result + 1864) = 0u;
    *(_OWORD *)(result + 1848) = 0u;
    *(_OWORD *)(result + 1832) = 0u;
    *(_OWORD *)(result + 1816) = 0u;
    *(_OWORD *)(result + 1800) = 0u;
    *(_OWORD *)(result + 1784) = 0u;
    *(_OWORD *)(result + 1768) = 0u;
    *(_OWORD *)(result + 1752) = 0u;
    *(_OWORD *)(result + 1736) = 0u;
    *(_OWORD *)(result + 1720) = 0u;
    *(_OWORD *)(result + 1704) = 0u;
    *(_OWORD *)(result + 1688) = 0u;
    *(_OWORD *)(result + 1672) = 0u;
    *(_OWORD *)(result + 1656) = 0u;
    *(_OWORD *)(result + 1640) = 0u;
    *(_OWORD *)(result + 1624) = 0u;
    *(_OWORD *)(result + 1608) = 0u;
    *(_OWORD *)(result + 1592) = 0u;
    *(_OWORD *)(result + 1576) = 0u;
    *(_OWORD *)(result + 1560) = 0u;
    *(_OWORD *)(result + 1544) = 0u;
    *(_OWORD *)(result + 1528) = 0u;
    *(_OWORD *)(result + 1512) = 0u;
    *(_OWORD *)(result + 1496) = 0u;
    *(_OWORD *)(result + 1480) = 0u;
    *(_OWORD *)(result + 1464) = 0u;
    *(_OWORD *)(result + 1448) = 0u;
    *(_OWORD *)(result + 1432) = 0u;
    *(_OWORD *)(result + 1416) = 0u;
    *(_OWORD *)(result + 1400) = 0u;
    *(_OWORD *)(result + 1384) = 0u;
    *(_OWORD *)(result + 1368) = 0u;
    *(_OWORD *)(result + 1352) = 0u;
    *(_OWORD *)(result + 1336) = 0u;
    *(_OWORD *)(result + 1320) = 0u;
    *(_OWORD *)(result + 1304) = 0u;
    *(_OWORD *)(result + 1288) = 0u;
    *(_OWORD *)(result + 1272) = 0u;
    *(_OWORD *)(result + 1256) = 0u;
    *(_OWORD *)(result + 1240) = 0u;
    *(_OWORD *)(result + 1224) = 0u;
    *(_OWORD *)(result + 1208) = 0u;
    *(_OWORD *)(result + 1192) = 0u;
    *(_OWORD *)(result + 1176) = 0u;
    *(_OWORD *)(result + 1160) = 0u;
    *(_OWORD *)(result + 1144) = 0u;
    *(_OWORD *)(result + 1128) = 0u;
    *(_OWORD *)(result + 1112) = 0u;
    *(_OWORD *)(result + 1096) = 0u;
    *(_OWORD *)(result + 1080) = 0u;
    *(_OWORD *)(result + 1064) = 0u;
    *(_OWORD *)(result + 1048) = 0u;
    *(_OWORD *)(result + 1032) = 0u;
    *(_OWORD *)(result + 1016) = 0u;
    *(_OWORD *)(result + 1000) = 0u;
    *(_OWORD *)(result + 984) = 0u;
    *(_OWORD *)(result + 968) = 0u;
    *(_OWORD *)(result + 952) = 0u;
    *(_OWORD *)(result + 936) = 0u;
    *(_OWORD *)(result + 920) = 0u;
    *(_OWORD *)(result + 904) = 0u;
    *(_OWORD *)(result + 888) = 0u;
    *(_OWORD *)(result + 872) = 0u;
    *(_OWORD *)(result + 856) = 0u;
    *(_OWORD *)(result + 840) = 0u;
    *(_OWORD *)(result + 824) = 0u;
    *(_OWORD *)(result + 808) = 0u;
    *(_OWORD *)(result + 792) = 0u;
    *(_OWORD *)(result + 776) = 0u;
    *(_OWORD *)(result + 760) = 0u;
    *(_OWORD *)(result + 744) = 0u;
    *(_OWORD *)(result + 728) = 0u;
    *(_OWORD *)(result + 712) = 0u;
    *(_OWORD *)(result + 696) = 0u;
    *(_OWORD *)(result + 680) = 0u;
    *(_OWORD *)(result + 664) = 0u;
    *(_OWORD *)(result + 648) = 0u;
    *(_OWORD *)(result + 632) = 0u;
    *(_OWORD *)(result + 616) = 0u;
    *(_OWORD *)(result + 600) = 0u;
    *(_OWORD *)(result + 584) = 0u;
    *(_OWORD *)(result + 568) = 0u;
    *(_OWORD *)(result + 552) = 0u;
    *(_OWORD *)(result + 536) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 2176) = v3;
  return result;
}

void type metadata accessor for apple80211_nan_dp_response(uint64_t a1)
{
  sub_1000122B4(a1, &qword_100404550, (uint64_t)&unk_1003D8990);
}

void *sub_100019020(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x3E5uLL);
}

uint64_t sub_100019028(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 997))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_100019048(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 984) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 996) = 0;
    *(_DWORD *)(result + 992) = 0;
    *(_OWORD *)(result + 968) = 0u;
    *(_OWORD *)(result + 952) = 0u;
    *(_OWORD *)(result + 936) = 0u;
    *(_OWORD *)(result + 920) = 0u;
    *(_OWORD *)(result + 904) = 0u;
    *(_OWORD *)(result + 888) = 0u;
    *(_OWORD *)(result + 872) = 0u;
    *(_OWORD *)(result + 856) = 0u;
    *(_OWORD *)(result + 840) = 0u;
    *(_OWORD *)(result + 824) = 0u;
    *(_OWORD *)(result + 808) = 0u;
    *(_OWORD *)(result + 792) = 0u;
    *(_OWORD *)(result + 776) = 0u;
    *(_OWORD *)(result + 760) = 0u;
    *(_OWORD *)(result + 744) = 0u;
    *(_OWORD *)(result + 728) = 0u;
    *(_OWORD *)(result + 712) = 0u;
    *(_OWORD *)(result + 696) = 0u;
    *(_OWORD *)(result + 680) = 0u;
    *(_OWORD *)(result + 664) = 0u;
    *(_OWORD *)(result + 648) = 0u;
    *(_OWORD *)(result + 632) = 0u;
    *(_OWORD *)(result + 616) = 0u;
    *(_OWORD *)(result + 600) = 0u;
    *(_OWORD *)(result + 584) = 0u;
    *(_OWORD *)(result + 568) = 0u;
    *(_OWORD *)(result + 552) = 0u;
    *(_OWORD *)(result + 536) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 997) = v3;
  return result;
}

void type metadata accessor for apple80211_nan_oob_act_frm_data(uint64_t a1)
{
  sub_1000122B4(a1, &qword_100404558, (uint64_t)&unk_1003D8A48);
}

void *sub_100019194(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x80CuLL);
}

uint64_t sub_10001919C(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 2060))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_1000191BC(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 2056) = 0;
    *(_OWORD *)(result + 2040) = 0u;
    *(_OWORD *)(result + 2024) = 0u;
    *(_OWORD *)(result + 2008) = 0u;
    *(_OWORD *)(result + 1992) = 0u;
    *(_OWORD *)(result + 1976) = 0u;
    *(_OWORD *)(result + 1960) = 0u;
    *(_OWORD *)(result + 1944) = 0u;
    *(_OWORD *)(result + 1928) = 0u;
    *(_OWORD *)(result + 1912) = 0u;
    *(_OWORD *)(result + 1896) = 0u;
    *(_OWORD *)(result + 1880) = 0u;
    *(_OWORD *)(result + 1864) = 0u;
    *(_OWORD *)(result + 1848) = 0u;
    *(_OWORD *)(result + 1832) = 0u;
    *(_OWORD *)(result + 1816) = 0u;
    *(_OWORD *)(result + 1800) = 0u;
    *(_OWORD *)(result + 1784) = 0u;
    *(_OWORD *)(result + 1768) = 0u;
    *(_OWORD *)(result + 1752) = 0u;
    *(_OWORD *)(result + 1736) = 0u;
    *(_OWORD *)(result + 1720) = 0u;
    *(_OWORD *)(result + 1704) = 0u;
    *(_OWORD *)(result + 1688) = 0u;
    *(_OWORD *)(result + 1672) = 0u;
    *(_OWORD *)(result + 1656) = 0u;
    *(_OWORD *)(result + 1640) = 0u;
    *(_OWORD *)(result + 1624) = 0u;
    *(_OWORD *)(result + 1608) = 0u;
    *(_OWORD *)(result + 1592) = 0u;
    *(_OWORD *)(result + 1576) = 0u;
    *(_OWORD *)(result + 1560) = 0u;
    *(_OWORD *)(result + 1544) = 0u;
    *(_OWORD *)(result + 1528) = 0u;
    *(_OWORD *)(result + 1512) = 0u;
    *(_OWORD *)(result + 1496) = 0u;
    *(_OWORD *)(result + 1480) = 0u;
    *(_OWORD *)(result + 1464) = 0u;
    *(_OWORD *)(result + 1448) = 0u;
    *(_OWORD *)(result + 1432) = 0u;
    *(_OWORD *)(result + 1416) = 0u;
    *(_OWORD *)(result + 1400) = 0u;
    *(_OWORD *)(result + 1384) = 0u;
    *(_OWORD *)(result + 1368) = 0u;
    *(_OWORD *)(result + 1352) = 0u;
    *(_OWORD *)(result + 1336) = 0u;
    *(_OWORD *)(result + 1320) = 0u;
    *(_OWORD *)(result + 1304) = 0u;
    *(_OWORD *)(result + 1288) = 0u;
    *(_OWORD *)(result + 1272) = 0u;
    *(_OWORD *)(result + 1256) = 0u;
    *(_OWORD *)(result + 1240) = 0u;
    *(_OWORD *)(result + 1224) = 0u;
    *(_OWORD *)(result + 1208) = 0u;
    *(_OWORD *)(result + 1192) = 0u;
    *(_OWORD *)(result + 1176) = 0u;
    *(_OWORD *)(result + 1160) = 0u;
    *(_OWORD *)(result + 1144) = 0u;
    *(_OWORD *)(result + 1128) = 0u;
    *(_OWORD *)(result + 1112) = 0u;
    *(_OWORD *)(result + 1096) = 0u;
    *(_OWORD *)(result + 1080) = 0u;
    *(_OWORD *)(result + 1064) = 0u;
    *(_OWORD *)(result + 1048) = 0u;
    *(_OWORD *)(result + 1032) = 0u;
    *(_OWORD *)(result + 1016) = 0u;
    *(_OWORD *)(result + 1000) = 0u;
    *(_OWORD *)(result + 984) = 0u;
    *(_OWORD *)(result + 968) = 0u;
    *(_OWORD *)(result + 952) = 0u;
    *(_OWORD *)(result + 936) = 0u;
    *(_OWORD *)(result + 920) = 0u;
    *(_OWORD *)(result + 904) = 0u;
    *(_OWORD *)(result + 888) = 0u;
    *(_OWORD *)(result + 872) = 0u;
    *(_OWORD *)(result + 856) = 0u;
    *(_OWORD *)(result + 840) = 0u;
    *(_OWORD *)(result + 824) = 0u;
    *(_OWORD *)(result + 808) = 0u;
    *(_OWORD *)(result + 792) = 0u;
    *(_OWORD *)(result + 776) = 0u;
    *(_OWORD *)(result + 760) = 0u;
    *(_OWORD *)(result + 744) = 0u;
    *(_OWORD *)(result + 728) = 0u;
    *(_OWORD *)(result + 712) = 0u;
    *(_OWORD *)(result + 696) = 0u;
    *(_OWORD *)(result + 680) = 0u;
    *(_OWORD *)(result + 664) = 0u;
    *(_OWORD *)(result + 648) = 0u;
    *(_OWORD *)(result + 632) = 0u;
    *(_OWORD *)(result + 616) = 0u;
    *(_OWORD *)(result + 600) = 0u;
    *(_OWORD *)(result + 584) = 0u;
    *(_OWORD *)(result + 568) = 0u;
    *(_OWORD *)(result + 552) = 0u;
    *(_OWORD *)(result + 536) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 2060) = v3;
  return result;
}

void type metadata accessor for apple80211_nan_follow_up_transmit_data(uint64_t a1)
{
  sub_1000122B4(a1, &qword_100404560, (uint64_t)&unk_1003D8AE8);
}

void type metadata accessor for apple80211_nan_cancel_publish_data(uint64_t a1)
{
  sub_1000122B4(a1, &qword_100404568, (uint64_t)&unk_1003D8B20);
}

void type metadata accessor for apple80211_nan_cancel_subscribe_data(uint64_t a1)
{
  sub_1000122B4(a1, &qword_100404570, (uint64_t)&unk_1003D8B48);
}

void type metadata accessor for apple80211_nan_dp_terminate(uint64_t a1)
{
  sub_1000122B4(a1, &qword_100404578, (uint64_t)&unk_1003D8BC8);
}

void *sub_100019458(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x868uLL);
}

uint64_t sub_100019460(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 2152))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_100019480(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 2120) = 0u;
    *(_OWORD *)(result + 2136) = 0u;
    *(_OWORD *)(result + 2104) = 0u;
    *(_OWORD *)(result + 2088) = 0u;
    *(_OWORD *)(result + 2072) = 0u;
    *(_OWORD *)(result + 2056) = 0u;
    *(_OWORD *)(result + 2040) = 0u;
    *(_OWORD *)(result + 2024) = 0u;
    *(_OWORD *)(result + 2008) = 0u;
    *(_OWORD *)(result + 1992) = 0u;
    *(_OWORD *)(result + 1976) = 0u;
    *(_OWORD *)(result + 1960) = 0u;
    *(_OWORD *)(result + 1944) = 0u;
    *(_OWORD *)(result + 1928) = 0u;
    *(_OWORD *)(result + 1912) = 0u;
    *(_OWORD *)(result + 1896) = 0u;
    *(_OWORD *)(result + 1880) = 0u;
    *(_OWORD *)(result + 1864) = 0u;
    *(_OWORD *)(result + 1848) = 0u;
    *(_OWORD *)(result + 1832) = 0u;
    *(_OWORD *)(result + 1816) = 0u;
    *(_OWORD *)(result + 1800) = 0u;
    *(_OWORD *)(result + 1784) = 0u;
    *(_OWORD *)(result + 1768) = 0u;
    *(_OWORD *)(result + 1752) = 0u;
    *(_OWORD *)(result + 1736) = 0u;
    *(_OWORD *)(result + 1720) = 0u;
    *(_OWORD *)(result + 1704) = 0u;
    *(_OWORD *)(result + 1688) = 0u;
    *(_OWORD *)(result + 1672) = 0u;
    *(_OWORD *)(result + 1656) = 0u;
    *(_OWORD *)(result + 1640) = 0u;
    *(_OWORD *)(result + 1624) = 0u;
    *(_OWORD *)(result + 1608) = 0u;
    *(_OWORD *)(result + 1592) = 0u;
    *(_OWORD *)(result + 1576) = 0u;
    *(_OWORD *)(result + 1560) = 0u;
    *(_OWORD *)(result + 1544) = 0u;
    *(_OWORD *)(result + 1528) = 0u;
    *(_OWORD *)(result + 1512) = 0u;
    *(_OWORD *)(result + 1496) = 0u;
    *(_OWORD *)(result + 1480) = 0u;
    *(_OWORD *)(result + 1464) = 0u;
    *(_OWORD *)(result + 1448) = 0u;
    *(_OWORD *)(result + 1432) = 0u;
    *(_OWORD *)(result + 1416) = 0u;
    *(_OWORD *)(result + 1400) = 0u;
    *(_OWORD *)(result + 1384) = 0u;
    *(_OWORD *)(result + 1368) = 0u;
    *(_OWORD *)(result + 1352) = 0u;
    *(_OWORD *)(result + 1336) = 0u;
    *(_OWORD *)(result + 1320) = 0u;
    *(_OWORD *)(result + 1304) = 0u;
    *(_OWORD *)(result + 1288) = 0u;
    *(_OWORD *)(result + 1272) = 0u;
    *(_OWORD *)(result + 1256) = 0u;
    *(_OWORD *)(result + 1240) = 0u;
    *(_OWORD *)(result + 1224) = 0u;
    *(_OWORD *)(result + 1208) = 0u;
    *(_OWORD *)(result + 1192) = 0u;
    *(_OWORD *)(result + 1176) = 0u;
    *(_OWORD *)(result + 1160) = 0u;
    *(_OWORD *)(result + 1144) = 0u;
    *(_OWORD *)(result + 1128) = 0u;
    *(_OWORD *)(result + 1112) = 0u;
    *(_OWORD *)(result + 1096) = 0u;
    *(_OWORD *)(result + 1080) = 0u;
    *(_OWORD *)(result + 1064) = 0u;
    *(_OWORD *)(result + 1048) = 0u;
    *(_OWORD *)(result + 1032) = 0u;
    *(_OWORD *)(result + 1016) = 0u;
    *(_OWORD *)(result + 1000) = 0u;
    *(_OWORD *)(result + 984) = 0u;
    *(_OWORD *)(result + 968) = 0u;
    *(_OWORD *)(result + 952) = 0u;
    *(_OWORD *)(result + 936) = 0u;
    *(_OWORD *)(result + 920) = 0u;
    *(_OWORD *)(result + 904) = 0u;
    *(_OWORD *)(result + 888) = 0u;
    *(_OWORD *)(result + 872) = 0u;
    *(_OWORD *)(result + 856) = 0u;
    *(_OWORD *)(result + 840) = 0u;
    *(_OWORD *)(result + 824) = 0u;
    *(_OWORD *)(result + 808) = 0u;
    *(_OWORD *)(result + 792) = 0u;
    *(_OWORD *)(result + 776) = 0u;
    *(_OWORD *)(result + 760) = 0u;
    *(_OWORD *)(result + 744) = 0u;
    *(_OWORD *)(result + 728) = 0u;
    *(_OWORD *)(result + 712) = 0u;
    *(_OWORD *)(result + 696) = 0u;
    *(_OWORD *)(result + 680) = 0u;
    *(_OWORD *)(result + 664) = 0u;
    *(_OWORD *)(result + 648) = 0u;
    *(_OWORD *)(result + 632) = 0u;
    *(_OWORD *)(result + 616) = 0u;
    *(_OWORD *)(result + 600) = 0u;
    *(_OWORD *)(result + 584) = 0u;
    *(_OWORD *)(result + 568) = 0u;
    *(_OWORD *)(result + 552) = 0u;
    *(_OWORD *)(result + 536) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 2152) = v3;
  return result;
}

void type metadata accessor for apple80211_nan_dp_request(uint64_t a1)
{
  sub_1000122B4(a1, &qword_100404580, (uint64_t)&unk_1003D8C58);
}

void *sub_1000196F8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x15C8uLL);
}

uint64_t sub_100019700(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 5576))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_100019724(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 4344) = 0u;
    *(_OWORD *)(result + 4328) = 0u;
    *(_OWORD *)(result + 4312) = 0u;
    *(_OWORD *)(result + 4296) = 0u;
    *(_OWORD *)(result + 4280) = 0u;
    *(_OWORD *)(result + 4264) = 0u;
    *(_OWORD *)(result + 4248) = 0u;
    *(_OWORD *)(result + 4232) = 0u;
    *(_OWORD *)(result + 4216) = 0u;
    *(_OWORD *)(result + 4200) = 0u;
    *(_OWORD *)(result + 4184) = 0u;
    *(_OWORD *)(result + 4168) = 0u;
    *(_OWORD *)(result + 4152) = 0u;
    *(_OWORD *)(result + 4136) = 0u;
    *(_OWORD *)(result + 4120) = 0u;
    *(_OWORD *)(result + 4104) = 0u;
    *(_OWORD *)(result + 4088) = 0u;
    *(_OWORD *)(result + 4072) = 0u;
    *(_OWORD *)(result + 4056) = 0u;
    *(_OWORD *)(result + 4040) = 0u;
    *(_OWORD *)(result + 4024) = 0u;
    *(_OWORD *)(result + 4008) = 0u;
    *(_OWORD *)(result + 3992) = 0u;
    *(_OWORD *)(result + 3976) = 0u;
    *(_OWORD *)(result + 3960) = 0u;
    *(_OWORD *)(result + 3944) = 0u;
    *(_OWORD *)(result + 3928) = 0u;
    *(_OWORD *)(result + 3912) = 0u;
    *(_OWORD *)(result + 3896) = 0u;
    *(_OWORD *)(result + 3880) = 0u;
    *(_OWORD *)(result + 3864) = 0u;
    *(_OWORD *)(result + 3848) = 0u;
    *(_OWORD *)(result + 3832) = 0u;
    *(_OWORD *)(result + 3816) = 0u;
    *(_OWORD *)(result + 3800) = 0u;
    *(_OWORD *)(result + 3784) = 0u;
    *(_OWORD *)(result + 3768) = 0u;
    *(_OWORD *)(result + 3752) = 0u;
    *(_OWORD *)(result + 3736) = 0u;
    *(_OWORD *)(result + 3720) = 0u;
    *(_OWORD *)(result + 3704) = 0u;
    *(_OWORD *)(result + 3688) = 0u;
    *(_OWORD *)(result + 3672) = 0u;
    *(_OWORD *)(result + 3656) = 0u;
    *(_OWORD *)(result + 3640) = 0u;
    *(_OWORD *)(result + 3624) = 0u;
    *(_OWORD *)(result + 3608) = 0u;
    *(_OWORD *)(result + 3592) = 0u;
    *(_OWORD *)(result + 3576) = 0u;
    *(_OWORD *)(result + 3560) = 0u;
    *(_OWORD *)(result + 3544) = 0u;
    *(_OWORD *)(result + 3528) = 0u;
    *(_OWORD *)(result + 3512) = 0u;
    *(_OWORD *)(result + 3496) = 0u;
    *(_OWORD *)(result + 3480) = 0u;
    *(_OWORD *)(result + 3464) = 0u;
    *(_OWORD *)(result + 3448) = 0u;
    *(_OWORD *)(result + 3432) = 0u;
    *(_OWORD *)(result + 3416) = 0u;
    *(_OWORD *)(result + 3400) = 0u;
    *(_OWORD *)(result + 3384) = 0u;
    *(_OWORD *)(result + 3368) = 0u;
    *(_OWORD *)(result + 3352) = 0u;
    *(_OWORD *)(result + 3336) = 0u;
    *(_OWORD *)(result + 3320) = 0u;
    *(_OWORD *)(result + 3304) = 0u;
    *(_OWORD *)(result + 3288) = 0u;
    *(_OWORD *)(result + 3272) = 0u;
    *(_OWORD *)(result + 3256) = 0u;
    *(_OWORD *)(result + 3240) = 0u;
    *(_OWORD *)(result + 3224) = 0u;
    *(_OWORD *)(result + 3208) = 0u;
    *(_OWORD *)(result + 3192) = 0u;
    *(_OWORD *)(result + 3176) = 0u;
    *(_OWORD *)(result + 3160) = 0u;
    *(_OWORD *)(result + 3144) = 0u;
    *(_OWORD *)(result + 3128) = 0u;
    *(_OWORD *)(result + 3112) = 0u;
    *(_OWORD *)(result + 3096) = 0u;
    *(_OWORD *)(result + 3080) = 0u;
    *(_OWORD *)(result + 3064) = 0u;
    *(_OWORD *)(result + 3048) = 0u;
    *(_OWORD *)(result + 3032) = 0u;
    *(_OWORD *)(result + 3016) = 0u;
    *(_OWORD *)(result + 3000) = 0u;
    *(_OWORD *)(result + 2984) = 0u;
    *(_OWORD *)(result + 2968) = 0u;
    *(_OWORD *)(result + 2952) = 0u;
    *(_OWORD *)(result + 2936) = 0u;
    *(_OWORD *)(result + 2920) = 0u;
    *(_OWORD *)(result + 2904) = 0u;
    *(_OWORD *)(result + 2888) = 0u;
    *(_OWORD *)(result + 2872) = 0u;
    *(_OWORD *)(result + 2856) = 0u;
    *(_OWORD *)(result + 2840) = 0u;
    *(_OWORD *)(result + 2824) = 0u;
    *(_OWORD *)(result + 2808) = 0u;
    *(_OWORD *)(result + 2792) = 0u;
    *(_OWORD *)(result + 2776) = 0u;
    *(_OWORD *)(result + 2760) = 0u;
    *(_OWORD *)(result + 2744) = 0u;
    *(_OWORD *)(result + 2728) = 0u;
    *(_OWORD *)(result + 2712) = 0u;
    *(_OWORD *)(result + 2696) = 0u;
    *(_OWORD *)(result + 2680) = 0u;
    *(_OWORD *)(result + 2664) = 0u;
    *(_OWORD *)(result + 2648) = 0u;
    *(_OWORD *)(result + 2632) = 0u;
    *(_OWORD *)(result + 2616) = 0u;
    *(_OWORD *)(result + 2600) = 0u;
    *(_OWORD *)(result + 2584) = 0u;
    *(_OWORD *)(result + 2568) = 0u;
    *(_OWORD *)(result + 2552) = 0u;
    *(_OWORD *)(result + 2536) = 0u;
    *(_OWORD *)(result + 2520) = 0u;
    *(_OWORD *)(result + 2504) = 0u;
    *(_OWORD *)(result + 2488) = 0u;
    *(_OWORD *)(result + 2472) = 0u;
    *(_OWORD *)(result + 2456) = 0u;
    *(_OWORD *)(result + 2440) = 0u;
    *(_OWORD *)(result + 2424) = 0u;
    *(_OWORD *)(result + 2408) = 0u;
    *(_OWORD *)(result + 2392) = 0u;
    *(_OWORD *)(result + 2376) = 0u;
    *(_OWORD *)(result + 2360) = 0u;
    *(_OWORD *)(result + 2344) = 0u;
    *(_OWORD *)(result + 2328) = 0u;
    *(_OWORD *)(result + 2312) = 0u;
    *(_OWORD *)(result + 2296) = 0u;
    *(_OWORD *)(result + 2280) = 0u;
    *(_OWORD *)(result + 2264) = 0u;
    *(_OWORD *)(result + 2248) = 0u;
    *(_OWORD *)(result + 2232) = 0u;
    *(_OWORD *)(result + 2216) = 0u;
    *(_OWORD *)(result + 2200) = 0u;
    *(_OWORD *)(result + 2184) = 0u;
    *(_OWORD *)(result + 2168) = 0u;
    *(_OWORD *)(result + 2152) = 0u;
    *(_OWORD *)(result + 2136) = 0u;
    *(_OWORD *)(result + 2120) = 0u;
    *(_OWORD *)(result + 2104) = 0u;
    *(_OWORD *)(result + 2088) = 0u;
    *(_OWORD *)(result + 2072) = 0u;
    *(_OWORD *)(result + 2056) = 0u;
    *(_OWORD *)(result + 2040) = 0u;
    *(_OWORD *)(result + 2024) = 0u;
    *(_OWORD *)(result + 2008) = 0u;
    *(_OWORD *)(result + 1992) = 0u;
    *(_OWORD *)(result + 1976) = 0u;
    *(_OWORD *)(result + 1960) = 0u;
    *(_OWORD *)(result + 1944) = 0u;
    *(_OWORD *)(result + 1928) = 0u;
    *(_OWORD *)(result + 1912) = 0u;
    *(_OWORD *)(result + 1896) = 0u;
    *(_OWORD *)(result + 1880) = 0u;
    *(_OWORD *)(result + 1864) = 0u;
    *(_OWORD *)(result + 1848) = 0u;
    *(_OWORD *)(result + 1832) = 0u;
    *(_OWORD *)(result + 1816) = 0u;
    *(_OWORD *)(result + 1800) = 0u;
    *(_OWORD *)(result + 1784) = 0u;
    *(_OWORD *)(result + 1768) = 0u;
    *(_OWORD *)(result + 1752) = 0u;
    *(_OWORD *)(result + 1736) = 0u;
    *(_OWORD *)(result + 1720) = 0u;
    *(_OWORD *)(result + 1704) = 0u;
    *(_OWORD *)(result + 1688) = 0u;
    *(_OWORD *)(result + 1672) = 0u;
    *(_OWORD *)(result + 1656) = 0u;
    *(_OWORD *)(result + 1640) = 0u;
    *(_OWORD *)(result + 1624) = 0u;
    *(_OWORD *)(result + 1608) = 0u;
    *(_OWORD *)(result + 1592) = 0u;
    *(_OWORD *)(result + 1576) = 0u;
    *(_OWORD *)(result + 1560) = 0u;
    *(_OWORD *)(result + 1544) = 0u;
    *(_OWORD *)(result + 1528) = 0u;
    *(_OWORD *)(result + 1512) = 0u;
    *(_OWORD *)(result + 1496) = 0u;
    *(_OWORD *)(result + 1480) = 0u;
    *(_OWORD *)(result + 1464) = 0u;
    *(_OWORD *)(result + 1448) = 0u;
    *(_OWORD *)(result + 1432) = 0u;
    *(_OWORD *)(result + 1416) = 0u;
    *(_OWORD *)(result + 1400) = 0u;
    *(_OWORD *)(result + 1384) = 0u;
    *(_OWORD *)(result + 1368) = 0u;
    *(_OWORD *)(result + 1352) = 0u;
    *(_OWORD *)(result + 1336) = 0u;
    *(_OWORD *)(result + 1320) = 0u;
    *(_OWORD *)(result + 1304) = 0u;
    *(_OWORD *)(result + 1288) = 0u;
    *(_OWORD *)(result + 1272) = 0u;
    *(_OWORD *)(result + 1256) = 0u;
    *(_OWORD *)(result + 1240) = 0u;
    *(_OWORD *)(result + 1224) = 0u;
    *(_OWORD *)(result + 1208) = 0u;
    *(_OWORD *)(result + 1192) = 0u;
    *(_OWORD *)(result + 1176) = 0u;
    *(_OWORD *)(result + 1160) = 0u;
    *(_OWORD *)(result + 1144) = 0u;
    *(_OWORD *)(result + 1128) = 0u;
    *(_OWORD *)(result + 1112) = 0u;
    *(_OWORD *)(result + 1096) = 0u;
    *(_OWORD *)(result + 1080) = 0u;
    *(_OWORD *)(result + 1064) = 0u;
    *(_OWORD *)(result + 1048) = 0u;
    *(_OWORD *)(result + 1032) = 0u;
    *(_OWORD *)(result + 1016) = 0u;
    *(_OWORD *)(result + 1000) = 0u;
    *(_OWORD *)(result + 984) = 0u;
    *(_OWORD *)(result + 968) = 0u;
    *(_OWORD *)(result + 952) = 0u;
    *(_OWORD *)(result + 936) = 0u;
    *(_OWORD *)(result + 920) = 0u;
    *(_OWORD *)(result + 904) = 0u;
    *(_OWORD *)(result + 888) = 0u;
    *(_OWORD *)(result + 872) = 0u;
    *(_OWORD *)(result + 856) = 0u;
    *(_OWORD *)(result + 840) = 0u;
    *(_OWORD *)(result + 824) = 0u;
    *(_OWORD *)(result + 808) = 0u;
    *(_OWORD *)(result + 792) = 0u;
    *(_OWORD *)(result + 776) = 0u;
    *(_OWORD *)(result + 760) = 0u;
    *(_OWORD *)(result + 744) = 0u;
    *(_OWORD *)(result + 728) = 0u;
    *(_OWORD *)(result + 712) = 0u;
    *(_OWORD *)(result + 696) = 0u;
    *(_OWORD *)(result + 680) = 0u;
    *(_OWORD *)(result + 664) = 0u;
    *(_OWORD *)(result + 648) = 0u;
    *(_OWORD *)(result + 632) = 0u;
    *(_OWORD *)(result + 616) = 0u;
    *(_OWORD *)(result + 600) = 0u;
    *(_OWORD *)(result + 584) = 0u;
    *(_OWORD *)(result + 568) = 0u;
    *(_OWORD *)(result + 552) = 0u;
    *(_OWORD *)(result + 536) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_OWORD *)(result + 5544) = 0u;
    *(_OWORD *)(result + 5528) = 0u;
    *(_OWORD *)(result + 5512) = 0u;
    *(_OWORD *)(result + 5560) = 0u;
    *(_OWORD *)(result + 5496) = 0u;
    *(_OWORD *)(result + 5480) = 0u;
    *(_OWORD *)(result + 5464) = 0u;
    *(_OWORD *)(result + 5448) = 0u;
    *(_OWORD *)(result + 5432) = 0u;
    *(_OWORD *)(result + 5416) = 0u;
    *(_OWORD *)(result + 5400) = 0u;
    *(_OWORD *)(result + 5384) = 0u;
    *(_OWORD *)(result + 5368) = 0u;
    *(_OWORD *)(result + 5352) = 0u;
    *(_OWORD *)(result + 5336) = 0u;
    *(_OWORD *)(result + 5320) = 0u;
    *(_OWORD *)(result + 5304) = 0u;
    *(_OWORD *)(result + 5288) = 0u;
    *(_OWORD *)(result + 5272) = 0u;
    *(_OWORD *)(result + 5256) = 0u;
    *(_OWORD *)(result + 5240) = 0u;
    *(_OWORD *)(result + 5224) = 0u;
    *(_OWORD *)(result + 5208) = 0u;
    *(_OWORD *)(result + 5192) = 0u;
    *(_OWORD *)(result + 5176) = 0u;
    *(_OWORD *)(result + 5160) = 0u;
    *(_OWORD *)(result + 5144) = 0u;
    *(_OWORD *)(result + 5128) = 0u;
    *(_OWORD *)(result + 5112) = 0u;
    *(_OWORD *)(result + 5096) = 0u;
    *(_OWORD *)(result + 5080) = 0u;
    *(_OWORD *)(result + 5064) = 0u;
    *(_OWORD *)(result + 5048) = 0u;
    *(_OWORD *)(result + 5032) = 0u;
    *(_OWORD *)(result + 5016) = 0u;
    *(_OWORD *)(result + 5000) = 0u;
    *(_OWORD *)(result + 4984) = 0u;
    *(_OWORD *)(result + 4968) = 0u;
    *(_OWORD *)(result + 4952) = 0u;
    *(_OWORD *)(result + 4936) = 0u;
    *(_OWORD *)(result + 4920) = 0u;
    *(_OWORD *)(result + 4904) = 0u;
    *(_OWORD *)(result + 4888) = 0u;
    *(_OWORD *)(result + 4872) = 0u;
    *(_OWORD *)(result + 4856) = 0u;
    *(_OWORD *)(result + 4840) = 0u;
    *(_OWORD *)(result + 4824) = 0u;
    *(_OWORD *)(result + 4808) = 0u;
    *(_OWORD *)(result + 4792) = 0u;
    *(_OWORD *)(result + 4776) = 0u;
    *(_OWORD *)(result + 4760) = 0u;
    *(_OWORD *)(result + 4744) = 0u;
    *(_OWORD *)(result + 4728) = 0u;
    *(_OWORD *)(result + 4712) = 0u;
    *(_OWORD *)(result + 4696) = 0u;
    *(_OWORD *)(result + 4680) = 0u;
    *(_OWORD *)(result + 4664) = 0u;
    *(_OWORD *)(result + 4648) = 0u;
    *(_OWORD *)(result + 4632) = 0u;
    *(_OWORD *)(result + 4616) = 0u;
    *(_OWORD *)(result + 4600) = 0u;
    *(_OWORD *)(result + 4584) = 0u;
    *(_OWORD *)(result + 4568) = 0u;
    *(_OWORD *)(result + 4552) = 0u;
    *(_OWORD *)(result + 4536) = 0u;
    *(_OWORD *)(result + 4520) = 0u;
    *(_OWORD *)(result + 4504) = 0u;
    *(_OWORD *)(result + 4488) = 0u;
    *(_OWORD *)(result + 4472) = 0u;
    *(_OWORD *)(result + 4456) = 0u;
    *(_OWORD *)(result + 4440) = 0u;
    *(_OWORD *)(result + 4424) = 0u;
    *(_OWORD *)(result + 4408) = 0u;
    *(_OWORD *)(result + 4392) = 0u;
    *(_OWORD *)(result + 4376) = 0u;
    *(_OWORD *)(result + 4360) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 5576) = v3;
  return result;
}

void type metadata accessor for apple80211_nan_publish_data(uint64_t a1)
{
  sub_1000122B4(a1, &qword_100404588, (uint64_t)&unk_1003D8D08);
}

void type metadata accessor for apple80211_nan_matching_filter(uint64_t a1)
{
  sub_1000122B4(a1, &qword_100404590, (uint64_t)&unk_1003D8DF0);
}

void *sub_100019D58(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0xE14uLL);
}

uint64_t sub_100019D60(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 3604))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_100019D80(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 3592) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 3600) = 0;
    *(_OWORD *)(result + 3576) = 0u;
    *(_OWORD *)(result + 3560) = 0u;
    *(_OWORD *)(result + 3544) = 0u;
    *(_OWORD *)(result + 3528) = 0u;
    *(_OWORD *)(result + 3512) = 0u;
    *(_OWORD *)(result + 3496) = 0u;
    *(_OWORD *)(result + 3480) = 0u;
    *(_OWORD *)(result + 3464) = 0u;
    *(_OWORD *)(result + 3448) = 0u;
    *(_OWORD *)(result + 3432) = 0u;
    *(_OWORD *)(result + 3416) = 0u;
    *(_OWORD *)(result + 3400) = 0u;
    *(_OWORD *)(result + 3384) = 0u;
    *(_OWORD *)(result + 3368) = 0u;
    *(_OWORD *)(result + 3352) = 0u;
    *(_OWORD *)(result + 3336) = 0u;
    *(_OWORD *)(result + 3320) = 0u;
    *(_OWORD *)(result + 3304) = 0u;
    *(_OWORD *)(result + 3288) = 0u;
    *(_OWORD *)(result + 3272) = 0u;
    *(_OWORD *)(result + 3256) = 0u;
    *(_OWORD *)(result + 3240) = 0u;
    *(_OWORD *)(result + 3224) = 0u;
    *(_OWORD *)(result + 3208) = 0u;
    *(_OWORD *)(result + 3192) = 0u;
    *(_OWORD *)(result + 3176) = 0u;
    *(_OWORD *)(result + 3160) = 0u;
    *(_OWORD *)(result + 3144) = 0u;
    *(_OWORD *)(result + 3128) = 0u;
    *(_OWORD *)(result + 3112) = 0u;
    *(_OWORD *)(result + 3096) = 0u;
    *(_OWORD *)(result + 3080) = 0u;
    *(_OWORD *)(result + 3064) = 0u;
    *(_OWORD *)(result + 3048) = 0u;
    *(_OWORD *)(result + 3032) = 0u;
    *(_OWORD *)(result + 3016) = 0u;
    *(_OWORD *)(result + 3000) = 0u;
    *(_OWORD *)(result + 2984) = 0u;
    *(_OWORD *)(result + 2968) = 0u;
    *(_OWORD *)(result + 2952) = 0u;
    *(_OWORD *)(result + 2936) = 0u;
    *(_OWORD *)(result + 2920) = 0u;
    *(_OWORD *)(result + 2904) = 0u;
    *(_OWORD *)(result + 2888) = 0u;
    *(_OWORD *)(result + 2872) = 0u;
    *(_OWORD *)(result + 2856) = 0u;
    *(_OWORD *)(result + 2840) = 0u;
    *(_OWORD *)(result + 2824) = 0u;
    *(_OWORD *)(result + 2808) = 0u;
    *(_OWORD *)(result + 2792) = 0u;
    *(_OWORD *)(result + 2776) = 0u;
    *(_OWORD *)(result + 2760) = 0u;
    *(_OWORD *)(result + 2744) = 0u;
    *(_OWORD *)(result + 2728) = 0u;
    *(_OWORD *)(result + 2712) = 0u;
    *(_OWORD *)(result + 2696) = 0u;
    *(_OWORD *)(result + 2680) = 0u;
    *(_OWORD *)(result + 2664) = 0u;
    *(_OWORD *)(result + 2648) = 0u;
    *(_OWORD *)(result + 2632) = 0u;
    *(_OWORD *)(result + 2616) = 0u;
    *(_OWORD *)(result + 2600) = 0u;
    *(_OWORD *)(result + 2584) = 0u;
    *(_OWORD *)(result + 2568) = 0u;
    *(_OWORD *)(result + 2552) = 0u;
    *(_OWORD *)(result + 2536) = 0u;
    *(_OWORD *)(result + 2520) = 0u;
    *(_OWORD *)(result + 2504) = 0u;
    *(_OWORD *)(result + 2488) = 0u;
    *(_OWORD *)(result + 2472) = 0u;
    *(_OWORD *)(result + 2456) = 0u;
    *(_OWORD *)(result + 2440) = 0u;
    *(_OWORD *)(result + 2424) = 0u;
    *(_OWORD *)(result + 2408) = 0u;
    *(_OWORD *)(result + 2392) = 0u;
    *(_OWORD *)(result + 2376) = 0u;
    *(_OWORD *)(result + 2360) = 0u;
    *(_OWORD *)(result + 2344) = 0u;
    *(_OWORD *)(result + 2328) = 0u;
    *(_OWORD *)(result + 2312) = 0u;
    *(_OWORD *)(result + 2296) = 0u;
    *(_OWORD *)(result + 2280) = 0u;
    *(_OWORD *)(result + 2264) = 0u;
    *(_OWORD *)(result + 2248) = 0u;
    *(_OWORD *)(result + 2232) = 0u;
    *(_OWORD *)(result + 2216) = 0u;
    *(_OWORD *)(result + 2200) = 0u;
    *(_OWORD *)(result + 2184) = 0u;
    *(_OWORD *)(result + 2168) = 0u;
    *(_OWORD *)(result + 2152) = 0u;
    *(_OWORD *)(result + 2136) = 0u;
    *(_OWORD *)(result + 2120) = 0u;
    *(_OWORD *)(result + 2104) = 0u;
    *(_OWORD *)(result + 2088) = 0u;
    *(_OWORD *)(result + 2072) = 0u;
    *(_OWORD *)(result + 2056) = 0u;
    *(_OWORD *)(result + 2040) = 0u;
    *(_OWORD *)(result + 2024) = 0u;
    *(_OWORD *)(result + 2008) = 0u;
    *(_OWORD *)(result + 1992) = 0u;
    *(_OWORD *)(result + 1976) = 0u;
    *(_OWORD *)(result + 1960) = 0u;
    *(_OWORD *)(result + 1944) = 0u;
    *(_OWORD *)(result + 1928) = 0u;
    *(_OWORD *)(result + 1912) = 0u;
    *(_OWORD *)(result + 1896) = 0u;
    *(_OWORD *)(result + 1880) = 0u;
    *(_OWORD *)(result + 1864) = 0u;
    *(_OWORD *)(result + 1848) = 0u;
    *(_OWORD *)(result + 1832) = 0u;
    *(_OWORD *)(result + 1816) = 0u;
    *(_OWORD *)(result + 1800) = 0u;
    *(_OWORD *)(result + 1784) = 0u;
    *(_OWORD *)(result + 1768) = 0u;
    *(_OWORD *)(result + 1752) = 0u;
    *(_OWORD *)(result + 1736) = 0u;
    *(_OWORD *)(result + 1720) = 0u;
    *(_OWORD *)(result + 1704) = 0u;
    *(_OWORD *)(result + 1688) = 0u;
    *(_OWORD *)(result + 1672) = 0u;
    *(_OWORD *)(result + 1656) = 0u;
    *(_OWORD *)(result + 1640) = 0u;
    *(_OWORD *)(result + 1624) = 0u;
    *(_OWORD *)(result + 1608) = 0u;
    *(_OWORD *)(result + 1592) = 0u;
    *(_OWORD *)(result + 1576) = 0u;
    *(_OWORD *)(result + 1560) = 0u;
    *(_OWORD *)(result + 1544) = 0u;
    *(_OWORD *)(result + 1528) = 0u;
    *(_OWORD *)(result + 1512) = 0u;
    *(_OWORD *)(result + 1496) = 0u;
    *(_OWORD *)(result + 1480) = 0u;
    *(_OWORD *)(result + 1464) = 0u;
    *(_OWORD *)(result + 1448) = 0u;
    *(_OWORD *)(result + 1432) = 0u;
    *(_OWORD *)(result + 1416) = 0u;
    *(_OWORD *)(result + 1400) = 0u;
    *(_OWORD *)(result + 1384) = 0u;
    *(_OWORD *)(result + 1368) = 0u;
    *(_OWORD *)(result + 1352) = 0u;
    *(_OWORD *)(result + 1336) = 0u;
    *(_OWORD *)(result + 1320) = 0u;
    *(_OWORD *)(result + 1304) = 0u;
    *(_OWORD *)(result + 1288) = 0u;
    *(_OWORD *)(result + 1272) = 0u;
    *(_OWORD *)(result + 1256) = 0u;
    *(_OWORD *)(result + 1240) = 0u;
    *(_OWORD *)(result + 1224) = 0u;
    *(_OWORD *)(result + 1208) = 0u;
    *(_OWORD *)(result + 1192) = 0u;
    *(_OWORD *)(result + 1176) = 0u;
    *(_OWORD *)(result + 1160) = 0u;
    *(_OWORD *)(result + 1144) = 0u;
    *(_OWORD *)(result + 1128) = 0u;
    *(_OWORD *)(result + 1112) = 0u;
    *(_OWORD *)(result + 1096) = 0u;
    *(_OWORD *)(result + 1080) = 0u;
    *(_OWORD *)(result + 1064) = 0u;
    *(_OWORD *)(result + 1048) = 0u;
    *(_OWORD *)(result + 1032) = 0u;
    *(_OWORD *)(result + 1016) = 0u;
    *(_OWORD *)(result + 1000) = 0u;
    *(_OWORD *)(result + 984) = 0u;
    *(_OWORD *)(result + 968) = 0u;
    *(_OWORD *)(result + 952) = 0u;
    *(_OWORD *)(result + 936) = 0u;
    *(_OWORD *)(result + 920) = 0u;
    *(_OWORD *)(result + 904) = 0u;
    *(_OWORD *)(result + 888) = 0u;
    *(_OWORD *)(result + 872) = 0u;
    *(_OWORD *)(result + 856) = 0u;
    *(_OWORD *)(result + 840) = 0u;
    *(_OWORD *)(result + 824) = 0u;
    *(_OWORD *)(result + 808) = 0u;
    *(_OWORD *)(result + 792) = 0u;
    *(_OWORD *)(result + 776) = 0u;
    *(_OWORD *)(result + 760) = 0u;
    *(_OWORD *)(result + 744) = 0u;
    *(_OWORD *)(result + 728) = 0u;
    *(_OWORD *)(result + 712) = 0u;
    *(_OWORD *)(result + 696) = 0u;
    *(_OWORD *)(result + 680) = 0u;
    *(_OWORD *)(result + 664) = 0u;
    *(_OWORD *)(result + 648) = 0u;
    *(_OWORD *)(result + 632) = 0u;
    *(_OWORD *)(result + 616) = 0u;
    *(_OWORD *)(result + 600) = 0u;
    *(_OWORD *)(result + 584) = 0u;
    *(_OWORD *)(result + 568) = 0u;
    *(_OWORD *)(result + 552) = 0u;
    *(_OWORD *)(result + 536) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 3604) = v3;
  return result;
}

void type metadata accessor for apple80211_nan_subscribe_data(uint64_t a1)
{
  sub_1000122B4(a1, &qword_100404598, (uint64_t)&unk_1003D8E70);
}

void *sub_10001A17C(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x102uLL);
}

uint64_t sub_10001A184(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 258))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_10001A1A4(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 248) = 0;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 256) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 258) = v3;
  return result;
}

void type metadata accessor for apple80211_nan_service_name(uint64_t a1)
{
  sub_1000122B4(a1, &qword_1004045A0, (uint64_t)&unk_1003D8F48);
}

__n128 initializeWithCopy for AWDLActionFrame.ElectionParameter(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for AWDLActionFrame.ElectionParameter(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 48))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for AWDLActionFrame.ElectionParameter(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 48) = v3;
  return result;
}

void type metadata accessor for apple80211_nan_role_cfg(uint64_t a1)
{
  sub_1000122B4(a1, &qword_1004045A8, (uint64_t)&unk_1003D8FC8);
}

void type metadata accessor for apple80211_nan_host_election(uint64_t a1)
{
  sub_1000122B4(a1, &qword_1004045B0, (uint64_t)&unk_1003D8FF0);
}

void type metadata accessor for apple80211_nan_secondary_master_channel(uint64_t a1)
{
  sub_1000122B4(a1, &qword_1004045B8, (uint64_t)&unk_1003D9018);
}

void type metadata accessor for apple80211_nan_primary_master_channel(uint64_t a1)
{
  sub_1000122B4(a1, &qword_1004045C0, (uint64_t)&unk_1003D9040);
}

_WORD *initializeBufferWithCopyOfBuffer for NANAttribute.MasterIndication(_WORD *result, _WORD *a2)
{
  *result = *a2;
  return result;
}

void type metadata accessor for apple80211_nan_dw_awake_period(uint64_t a1)
{
  sub_1000122B4(a1, &qword_1004045C8, (uint64_t)&unk_1003D90C0);
}

void type metadata accessor for apple80211_nan_random_factor(uint64_t a1)
{
  sub_1000122B4(a1, &qword_1004045D0, (uint64_t)&unk_1003D9140);
}

void type metadata accessor for apple80211_nan_master_pref(uint64_t a1)
{
  sub_1000122B4(a1, &qword_1004045D8, (uint64_t)&unk_1003D91C0);
}

uint64_t sub_10001A334(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_DWORD *)(result + 8) = *((_DWORD *)a2 + 2);
  *(_QWORD *)result = v2;
  return result;
}

void type metadata accessor for apple80211_nan_cluster_id(uint64_t a1)
{
  sub_1000122B4(a1, &qword_1004045E0, (uint64_t)&unk_1003D9240);
}

void type metadata accessor for apple80211_nan_enable(uint64_t a1)
{
  sub_1000122B4(a1, &qword_1004045E8, (uint64_t)&unk_1003D9268);
}

void type metadata accessor for apple80211_nan_device_capability(uint64_t a1)
{
  sub_1000122B4(a1, (unint64_t *)&unk_1004045F0, (uint64_t)&unk_1003D92E8);
}

void *sub_10001A384(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0xFA0uLL);
}

uint64_t sub_10001A38C(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 4000))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 8);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t sub_10001A3E0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 3992) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 3976) = 0u;
    *(_OWORD *)(result + 3960) = 0u;
    *(_OWORD *)(result + 3944) = 0u;
    *(_OWORD *)(result + 3928) = 0u;
    *(_OWORD *)(result + 3912) = 0u;
    *(_OWORD *)(result + 3896) = 0u;
    *(_OWORD *)(result + 3880) = 0u;
    *(_OWORD *)(result + 3864) = 0u;
    *(_OWORD *)(result + 3848) = 0u;
    *(_OWORD *)(result + 3832) = 0u;
    *(_OWORD *)(result + 3816) = 0u;
    *(_OWORD *)(result + 3800) = 0u;
    *(_OWORD *)(result + 3784) = 0u;
    *(_OWORD *)(result + 3768) = 0u;
    *(_OWORD *)(result + 3752) = 0u;
    *(_OWORD *)(result + 3736) = 0u;
    *(_OWORD *)(result + 3720) = 0u;
    *(_OWORD *)(result + 3704) = 0u;
    *(_OWORD *)(result + 3688) = 0u;
    *(_OWORD *)(result + 3672) = 0u;
    *(_OWORD *)(result + 3656) = 0u;
    *(_OWORD *)(result + 3640) = 0u;
    *(_OWORD *)(result + 3624) = 0u;
    *(_OWORD *)(result + 3608) = 0u;
    *(_OWORD *)(result + 3592) = 0u;
    *(_OWORD *)(result + 3576) = 0u;
    *(_OWORD *)(result + 3560) = 0u;
    *(_OWORD *)(result + 3544) = 0u;
    *(_OWORD *)(result + 3528) = 0u;
    *(_OWORD *)(result + 3512) = 0u;
    *(_OWORD *)(result + 3496) = 0u;
    *(_OWORD *)(result + 3480) = 0u;
    *(_OWORD *)(result + 3464) = 0u;
    *(_OWORD *)(result + 3448) = 0u;
    *(_OWORD *)(result + 3432) = 0u;
    *(_OWORD *)(result + 3416) = 0u;
    *(_OWORD *)(result + 3400) = 0u;
    *(_OWORD *)(result + 3384) = 0u;
    *(_OWORD *)(result + 3368) = 0u;
    *(_OWORD *)(result + 3352) = 0u;
    *(_OWORD *)(result + 3336) = 0u;
    *(_OWORD *)(result + 3320) = 0u;
    *(_OWORD *)(result + 3304) = 0u;
    *(_OWORD *)(result + 3288) = 0u;
    *(_OWORD *)(result + 3272) = 0u;
    *(_OWORD *)(result + 3256) = 0u;
    *(_OWORD *)(result + 3240) = 0u;
    *(_OWORD *)(result + 3224) = 0u;
    *(_OWORD *)(result + 3208) = 0u;
    *(_OWORD *)(result + 3192) = 0u;
    *(_OWORD *)(result + 3176) = 0u;
    *(_OWORD *)(result + 3160) = 0u;
    *(_OWORD *)(result + 3144) = 0u;
    *(_OWORD *)(result + 3128) = 0u;
    *(_OWORD *)(result + 3112) = 0u;
    *(_OWORD *)(result + 3096) = 0u;
    *(_OWORD *)(result + 3080) = 0u;
    *(_OWORD *)(result + 3064) = 0u;
    *(_OWORD *)(result + 3048) = 0u;
    *(_OWORD *)(result + 3032) = 0u;
    *(_OWORD *)(result + 3016) = 0u;
    *(_OWORD *)(result + 3000) = 0u;
    *(_OWORD *)(result + 2984) = 0u;
    *(_OWORD *)(result + 2968) = 0u;
    *(_OWORD *)(result + 2952) = 0u;
    *(_OWORD *)(result + 2936) = 0u;
    *(_OWORD *)(result + 2920) = 0u;
    *(_OWORD *)(result + 2904) = 0u;
    *(_OWORD *)(result + 2888) = 0u;
    *(_OWORD *)(result + 2872) = 0u;
    *(_OWORD *)(result + 2856) = 0u;
    *(_OWORD *)(result + 2840) = 0u;
    *(_OWORD *)(result + 2824) = 0u;
    *(_OWORD *)(result + 2808) = 0u;
    *(_OWORD *)(result + 2792) = 0u;
    *(_OWORD *)(result + 2776) = 0u;
    *(_OWORD *)(result + 2760) = 0u;
    *(_OWORD *)(result + 2744) = 0u;
    *(_OWORD *)(result + 2728) = 0u;
    *(_OWORD *)(result + 2712) = 0u;
    *(_OWORD *)(result + 2696) = 0u;
    *(_OWORD *)(result + 2680) = 0u;
    *(_OWORD *)(result + 2664) = 0u;
    *(_OWORD *)(result + 2648) = 0u;
    *(_OWORD *)(result + 2632) = 0u;
    *(_OWORD *)(result + 2616) = 0u;
    *(_OWORD *)(result + 2600) = 0u;
    *(_OWORD *)(result + 2584) = 0u;
    *(_OWORD *)(result + 2568) = 0u;
    *(_OWORD *)(result + 2552) = 0u;
    *(_OWORD *)(result + 2536) = 0u;
    *(_OWORD *)(result + 2520) = 0u;
    *(_OWORD *)(result + 2504) = 0u;
    *(_OWORD *)(result + 2488) = 0u;
    *(_OWORD *)(result + 2472) = 0u;
    *(_OWORD *)(result + 2456) = 0u;
    *(_OWORD *)(result + 2440) = 0u;
    *(_OWORD *)(result + 2424) = 0u;
    *(_OWORD *)(result + 2408) = 0u;
    *(_OWORD *)(result + 2392) = 0u;
    *(_OWORD *)(result + 2376) = 0u;
    *(_OWORD *)(result + 2360) = 0u;
    *(_OWORD *)(result + 2344) = 0u;
    *(_OWORD *)(result + 2328) = 0u;
    *(_OWORD *)(result + 2312) = 0u;
    *(_OWORD *)(result + 2296) = 0u;
    *(_OWORD *)(result + 2280) = 0u;
    *(_OWORD *)(result + 2264) = 0u;
    *(_OWORD *)(result + 2248) = 0u;
    *(_OWORD *)(result + 2232) = 0u;
    *(_OWORD *)(result + 2216) = 0u;
    *(_OWORD *)(result + 2200) = 0u;
    *(_OWORD *)(result + 2184) = 0u;
    *(_OWORD *)(result + 2168) = 0u;
    *(_OWORD *)(result + 2152) = 0u;
    *(_OWORD *)(result + 2136) = 0u;
    *(_OWORD *)(result + 2120) = 0u;
    *(_OWORD *)(result + 2104) = 0u;
    *(_OWORD *)(result + 2088) = 0u;
    *(_OWORD *)(result + 2072) = 0u;
    *(_OWORD *)(result + 2056) = 0u;
    *(_OWORD *)(result + 2040) = 0u;
    *(_OWORD *)(result + 2024) = 0u;
    *(_OWORD *)(result + 2008) = 0u;
    *(_OWORD *)(result + 1992) = 0u;
    *(_OWORD *)(result + 1976) = 0u;
    *(_OWORD *)(result + 1960) = 0u;
    *(_OWORD *)(result + 1944) = 0u;
    *(_OWORD *)(result + 1928) = 0u;
    *(_OWORD *)(result + 1912) = 0u;
    *(_OWORD *)(result + 1896) = 0u;
    *(_OWORD *)(result + 1880) = 0u;
    *(_OWORD *)(result + 1864) = 0u;
    *(_OWORD *)(result + 1848) = 0u;
    *(_OWORD *)(result + 1832) = 0u;
    *(_OWORD *)(result + 1816) = 0u;
    *(_OWORD *)(result + 1800) = 0u;
    *(_OWORD *)(result + 1784) = 0u;
    *(_OWORD *)(result + 1768) = 0u;
    *(_OWORD *)(result + 1752) = 0u;
    *(_OWORD *)(result + 1736) = 0u;
    *(_OWORD *)(result + 1720) = 0u;
    *(_OWORD *)(result + 1704) = 0u;
    *(_OWORD *)(result + 1688) = 0u;
    *(_OWORD *)(result + 1672) = 0u;
    *(_OWORD *)(result + 1656) = 0u;
    *(_OWORD *)(result + 1640) = 0u;
    *(_OWORD *)(result + 1624) = 0u;
    *(_OWORD *)(result + 1608) = 0u;
    *(_OWORD *)(result + 1592) = 0u;
    *(_OWORD *)(result + 1576) = 0u;
    *(_OWORD *)(result + 1560) = 0u;
    *(_OWORD *)(result + 1544) = 0u;
    *(_OWORD *)(result + 1528) = 0u;
    *(_OWORD *)(result + 1512) = 0u;
    *(_OWORD *)(result + 1496) = 0u;
    *(_OWORD *)(result + 1480) = 0u;
    *(_OWORD *)(result + 1464) = 0u;
    *(_OWORD *)(result + 1448) = 0u;
    *(_OWORD *)(result + 1432) = 0u;
    *(_OWORD *)(result + 1416) = 0u;
    *(_OWORD *)(result + 1400) = 0u;
    *(_OWORD *)(result + 1384) = 0u;
    *(_OWORD *)(result + 1368) = 0u;
    *(_OWORD *)(result + 1352) = 0u;
    *(_OWORD *)(result + 1336) = 0u;
    *(_OWORD *)(result + 1320) = 0u;
    *(_OWORD *)(result + 1304) = 0u;
    *(_OWORD *)(result + 1288) = 0u;
    *(_OWORD *)(result + 1272) = 0u;
    *(_OWORD *)(result + 1256) = 0u;
    *(_OWORD *)(result + 1240) = 0u;
    *(_OWORD *)(result + 1224) = 0u;
    *(_OWORD *)(result + 1208) = 0u;
    *(_OWORD *)(result + 1192) = 0u;
    *(_OWORD *)(result + 1176) = 0u;
    *(_OWORD *)(result + 1160) = 0u;
    *(_OWORD *)(result + 1144) = 0u;
    *(_OWORD *)(result + 1128) = 0u;
    *(_OWORD *)(result + 1112) = 0u;
    *(_OWORD *)(result + 1096) = 0u;
    *(_OWORD *)(result + 1080) = 0u;
    *(_OWORD *)(result + 1064) = 0u;
    *(_OWORD *)(result + 1048) = 0u;
    *(_OWORD *)(result + 1032) = 0u;
    *(_OWORD *)(result + 1016) = 0u;
    *(_OWORD *)(result + 1000) = 0u;
    *(_OWORD *)(result + 984) = 0u;
    *(_OWORD *)(result + 968) = 0u;
    *(_OWORD *)(result + 952) = 0u;
    *(_OWORD *)(result + 936) = 0u;
    *(_OWORD *)(result + 920) = 0u;
    *(_OWORD *)(result + 904) = 0u;
    *(_OWORD *)(result + 888) = 0u;
    *(_OWORD *)(result + 872) = 0u;
    *(_OWORD *)(result + 856) = 0u;
    *(_OWORD *)(result + 840) = 0u;
    *(_OWORD *)(result + 824) = 0u;
    *(_OWORD *)(result + 808) = 0u;
    *(_OWORD *)(result + 792) = 0u;
    *(_OWORD *)(result + 776) = 0u;
    *(_OWORD *)(result + 760) = 0u;
    *(_OWORD *)(result + 744) = 0u;
    *(_OWORD *)(result + 728) = 0u;
    *(_OWORD *)(result + 712) = 0u;
    *(_OWORD *)(result + 696) = 0u;
    *(_OWORD *)(result + 680) = 0u;
    *(_OWORD *)(result + 664) = 0u;
    *(_OWORD *)(result + 648) = 0u;
    *(_OWORD *)(result + 632) = 0u;
    *(_OWORD *)(result + 616) = 0u;
    *(_OWORD *)(result + 600) = 0u;
    *(_OWORD *)(result + 584) = 0u;
    *(_OWORD *)(result + 568) = 0u;
    *(_OWORD *)(result + 552) = 0u;
    *(_OWORD *)(result + 536) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 4000) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 4000) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = a2 + 1;
  }
  return result;
}

void type metadata accessor for apple80211_awdl_low_latency_statistics(uint64_t a1)
{
  sub_1000122B4(a1, (unint64_t *)&unk_10040C3F0, (uint64_t)&unk_1003D9390);
}

void *sub_10001A85C(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0xE80uLL);
}

uint64_t sub_10001A864(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 3712))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_10001A884(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 3704) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 3688) = 0u;
    *(_OWORD *)(result + 3672) = 0u;
    *(_OWORD *)(result + 3656) = 0u;
    *(_OWORD *)(result + 3640) = 0u;
    *(_OWORD *)(result + 3624) = 0u;
    *(_OWORD *)(result + 3608) = 0u;
    *(_OWORD *)(result + 3592) = 0u;
    *(_OWORD *)(result + 3576) = 0u;
    *(_OWORD *)(result + 3560) = 0u;
    *(_OWORD *)(result + 3544) = 0u;
    *(_OWORD *)(result + 3528) = 0u;
    *(_OWORD *)(result + 3512) = 0u;
    *(_OWORD *)(result + 3496) = 0u;
    *(_OWORD *)(result + 3480) = 0u;
    *(_OWORD *)(result + 3464) = 0u;
    *(_OWORD *)(result + 3448) = 0u;
    *(_OWORD *)(result + 3432) = 0u;
    *(_OWORD *)(result + 3416) = 0u;
    *(_OWORD *)(result + 3400) = 0u;
    *(_OWORD *)(result + 3384) = 0u;
    *(_OWORD *)(result + 3368) = 0u;
    *(_OWORD *)(result + 3352) = 0u;
    *(_OWORD *)(result + 3336) = 0u;
    *(_OWORD *)(result + 3320) = 0u;
    *(_OWORD *)(result + 3304) = 0u;
    *(_OWORD *)(result + 3288) = 0u;
    *(_OWORD *)(result + 3272) = 0u;
    *(_OWORD *)(result + 3256) = 0u;
    *(_OWORD *)(result + 3240) = 0u;
    *(_OWORD *)(result + 3224) = 0u;
    *(_OWORD *)(result + 3208) = 0u;
    *(_OWORD *)(result + 3192) = 0u;
    *(_OWORD *)(result + 3176) = 0u;
    *(_OWORD *)(result + 3160) = 0u;
    *(_OWORD *)(result + 3144) = 0u;
    *(_OWORD *)(result + 3128) = 0u;
    *(_OWORD *)(result + 3112) = 0u;
    *(_OWORD *)(result + 3096) = 0u;
    *(_OWORD *)(result + 3080) = 0u;
    *(_OWORD *)(result + 3064) = 0u;
    *(_OWORD *)(result + 3048) = 0u;
    *(_OWORD *)(result + 3032) = 0u;
    *(_OWORD *)(result + 3016) = 0u;
    *(_OWORD *)(result + 3000) = 0u;
    *(_OWORD *)(result + 2984) = 0u;
    *(_OWORD *)(result + 2968) = 0u;
    *(_OWORD *)(result + 2952) = 0u;
    *(_OWORD *)(result + 2936) = 0u;
    *(_OWORD *)(result + 2920) = 0u;
    *(_OWORD *)(result + 2904) = 0u;
    *(_OWORD *)(result + 2888) = 0u;
    *(_OWORD *)(result + 2872) = 0u;
    *(_OWORD *)(result + 2856) = 0u;
    *(_OWORD *)(result + 2840) = 0u;
    *(_OWORD *)(result + 2824) = 0u;
    *(_OWORD *)(result + 2808) = 0u;
    *(_OWORD *)(result + 2792) = 0u;
    *(_OWORD *)(result + 2776) = 0u;
    *(_OWORD *)(result + 2760) = 0u;
    *(_OWORD *)(result + 2744) = 0u;
    *(_OWORD *)(result + 2728) = 0u;
    *(_OWORD *)(result + 2712) = 0u;
    *(_OWORD *)(result + 2696) = 0u;
    *(_OWORD *)(result + 2680) = 0u;
    *(_OWORD *)(result + 2664) = 0u;
    *(_OWORD *)(result + 2648) = 0u;
    *(_OWORD *)(result + 2632) = 0u;
    *(_OWORD *)(result + 2616) = 0u;
    *(_OWORD *)(result + 2600) = 0u;
    *(_OWORD *)(result + 2584) = 0u;
    *(_OWORD *)(result + 2568) = 0u;
    *(_OWORD *)(result + 2552) = 0u;
    *(_OWORD *)(result + 2536) = 0u;
    *(_OWORD *)(result + 2520) = 0u;
    *(_OWORD *)(result + 2504) = 0u;
    *(_OWORD *)(result + 2488) = 0u;
    *(_OWORD *)(result + 2472) = 0u;
    *(_OWORD *)(result + 2456) = 0u;
    *(_OWORD *)(result + 2440) = 0u;
    *(_OWORD *)(result + 2424) = 0u;
    *(_OWORD *)(result + 2408) = 0u;
    *(_OWORD *)(result + 2392) = 0u;
    *(_OWORD *)(result + 2376) = 0u;
    *(_OWORD *)(result + 2360) = 0u;
    *(_OWORD *)(result + 2344) = 0u;
    *(_OWORD *)(result + 2328) = 0u;
    *(_OWORD *)(result + 2312) = 0u;
    *(_OWORD *)(result + 2296) = 0u;
    *(_OWORD *)(result + 2280) = 0u;
    *(_OWORD *)(result + 2264) = 0u;
    *(_OWORD *)(result + 2248) = 0u;
    *(_OWORD *)(result + 2232) = 0u;
    *(_OWORD *)(result + 2216) = 0u;
    *(_OWORD *)(result + 2200) = 0u;
    *(_OWORD *)(result + 2184) = 0u;
    *(_OWORD *)(result + 2168) = 0u;
    *(_OWORD *)(result + 2152) = 0u;
    *(_OWORD *)(result + 2136) = 0u;
    *(_OWORD *)(result + 2120) = 0u;
    *(_OWORD *)(result + 2104) = 0u;
    *(_OWORD *)(result + 2088) = 0u;
    *(_OWORD *)(result + 2072) = 0u;
    *(_OWORD *)(result + 2056) = 0u;
    *(_OWORD *)(result + 2040) = 0u;
    *(_OWORD *)(result + 2024) = 0u;
    *(_OWORD *)(result + 2008) = 0u;
    *(_OWORD *)(result + 1992) = 0u;
    *(_OWORD *)(result + 1976) = 0u;
    *(_OWORD *)(result + 1960) = 0u;
    *(_OWORD *)(result + 1944) = 0u;
    *(_OWORD *)(result + 1928) = 0u;
    *(_OWORD *)(result + 1912) = 0u;
    *(_OWORD *)(result + 1896) = 0u;
    *(_OWORD *)(result + 1880) = 0u;
    *(_OWORD *)(result + 1864) = 0u;
    *(_OWORD *)(result + 1848) = 0u;
    *(_OWORD *)(result + 1832) = 0u;
    *(_OWORD *)(result + 1816) = 0u;
    *(_OWORD *)(result + 1800) = 0u;
    *(_OWORD *)(result + 1784) = 0u;
    *(_OWORD *)(result + 1768) = 0u;
    *(_OWORD *)(result + 1752) = 0u;
    *(_OWORD *)(result + 1736) = 0u;
    *(_OWORD *)(result + 1720) = 0u;
    *(_OWORD *)(result + 1704) = 0u;
    *(_OWORD *)(result + 1688) = 0u;
    *(_OWORD *)(result + 1672) = 0u;
    *(_OWORD *)(result + 1656) = 0u;
    *(_OWORD *)(result + 1640) = 0u;
    *(_OWORD *)(result + 1624) = 0u;
    *(_OWORD *)(result + 1608) = 0u;
    *(_OWORD *)(result + 1592) = 0u;
    *(_OWORD *)(result + 1576) = 0u;
    *(_OWORD *)(result + 1560) = 0u;
    *(_OWORD *)(result + 1544) = 0u;
    *(_OWORD *)(result + 1528) = 0u;
    *(_OWORD *)(result + 1512) = 0u;
    *(_OWORD *)(result + 1496) = 0u;
    *(_OWORD *)(result + 1480) = 0u;
    *(_OWORD *)(result + 1464) = 0u;
    *(_OWORD *)(result + 1448) = 0u;
    *(_OWORD *)(result + 1432) = 0u;
    *(_OWORD *)(result + 1416) = 0u;
    *(_OWORD *)(result + 1400) = 0u;
    *(_OWORD *)(result + 1384) = 0u;
    *(_OWORD *)(result + 1368) = 0u;
    *(_OWORD *)(result + 1352) = 0u;
    *(_OWORD *)(result + 1336) = 0u;
    *(_OWORD *)(result + 1320) = 0u;
    *(_OWORD *)(result + 1304) = 0u;
    *(_OWORD *)(result + 1288) = 0u;
    *(_OWORD *)(result + 1272) = 0u;
    *(_OWORD *)(result + 1256) = 0u;
    *(_OWORD *)(result + 1240) = 0u;
    *(_OWORD *)(result + 1224) = 0u;
    *(_OWORD *)(result + 1208) = 0u;
    *(_OWORD *)(result + 1192) = 0u;
    *(_OWORD *)(result + 1176) = 0u;
    *(_OWORD *)(result + 1160) = 0u;
    *(_OWORD *)(result + 1144) = 0u;
    *(_OWORD *)(result + 1128) = 0u;
    *(_OWORD *)(result + 1112) = 0u;
    *(_OWORD *)(result + 1096) = 0u;
    *(_OWORD *)(result + 1080) = 0u;
    *(_OWORD *)(result + 1064) = 0u;
    *(_OWORD *)(result + 1048) = 0u;
    *(_OWORD *)(result + 1032) = 0u;
    *(_OWORD *)(result + 1016) = 0u;
    *(_OWORD *)(result + 1000) = 0u;
    *(_OWORD *)(result + 984) = 0u;
    *(_OWORD *)(result + 968) = 0u;
    *(_OWORD *)(result + 952) = 0u;
    *(_OWORD *)(result + 936) = 0u;
    *(_OWORD *)(result + 920) = 0u;
    *(_OWORD *)(result + 904) = 0u;
    *(_OWORD *)(result + 888) = 0u;
    *(_OWORD *)(result + 872) = 0u;
    *(_OWORD *)(result + 856) = 0u;
    *(_OWORD *)(result + 840) = 0u;
    *(_OWORD *)(result + 824) = 0u;
    *(_OWORD *)(result + 808) = 0u;
    *(_OWORD *)(result + 792) = 0u;
    *(_OWORD *)(result + 776) = 0u;
    *(_OWORD *)(result + 760) = 0u;
    *(_OWORD *)(result + 744) = 0u;
    *(_OWORD *)(result + 728) = 0u;
    *(_OWORD *)(result + 712) = 0u;
    *(_OWORD *)(result + 696) = 0u;
    *(_OWORD *)(result + 680) = 0u;
    *(_OWORD *)(result + 664) = 0u;
    *(_OWORD *)(result + 648) = 0u;
    *(_OWORD *)(result + 632) = 0u;
    *(_OWORD *)(result + 616) = 0u;
    *(_OWORD *)(result + 600) = 0u;
    *(_OWORD *)(result + 584) = 0u;
    *(_OWORD *)(result + 568) = 0u;
    *(_OWORD *)(result + 552) = 0u;
    *(_OWORD *)(result + 536) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 3712) = v3;
  return result;
}

void type metadata accessor for apple80211_awdl_statistics(uint64_t a1)
{
  sub_1000122B4(a1, &qword_100404600, (uint64_t)&unk_1003D9418);
}

__n128 sub_10001AC9C(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 28) = *(_OWORD *)(a2 + 28);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

void type metadata accessor for awdl_peer_advert_add(uint64_t a1)
{
  sub_1000122B4(a1, &qword_100404608, (uint64_t)&unk_1003D95A0);
}

void type metadata accessor for apple80211_peer_service_request(uint64_t a1)
{
  sub_1000122B4(a1, &qword_100404610, (uint64_t)&unk_1003D9660);
}

__n128 sub_10001ACD8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v2 = *(_OWORD *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  result = *(__n128 *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 80) = result;
  return result;
}

uint64_t sub_10001AD0C(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 136))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_10001AD2C(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 136) = v3;
  return result;
}

void type metadata accessor for apple80211_lte_restricted_channels(uint64_t a1)
{
  sub_1000122B4(a1, &qword_100404618, (uint64_t)&unk_1003D96F8);
}

void type metadata accessor for apple80211_awdl_social_time_slots(uint64_t a1)
{
  sub_1000122B4(a1, &qword_100404620, (uint64_t)&unk_1003D9780);
}

void type metadata accessor for apple80211_awdl_oper_mode(uint64_t a1)
{
  sub_1000122B4(a1, &qword_100404628, (uint64_t)&unk_1003D9800);
}

void type metadata accessor for apple80211_awdl_UMI_data(uint64_t a1)
{
  sub_1000122B4(a1, &qword_100404630, (uint64_t)&unk_1003D9880);
}

__n128 sub_10001ADC8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;
  __int128 v10;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  v5 = a2[4];
  v6 = a2[5];
  v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  result = (__n128)a2[8];
  v9 = a2[9];
  v10 = a2[10];
  *(_QWORD *)(a1 + 176) = *((_QWORD *)a2 + 22);
  *(_OWORD *)(a1 + 144) = v9;
  *(_OWORD *)(a1 + 160) = v10;
  *(__n128 *)(a1 + 128) = result;
  return result;
}

uint64_t sub_10001AE04(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 184) = v3;
  return result;
}

void type metadata accessor for apple80211_awdl_peer_traffic_registration(uint64_t a1)
{
  sub_1000122B4(a1, &qword_100404638, (uint64_t)&unk_1003D9908);
}

void *sub_10001AE70(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x190uLL);
}

uint64_t sub_10001AE78(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 400))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_10001AE98(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 392) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 400) = v3;
  return result;
}

void type metadata accessor for apple80211_awdl_sync_channel_sequence(uint64_t a1)
{
  sub_1000122B4(a1, &qword_100404640, (uint64_t)&unk_1003D99B0);
}

void type metadata accessor for apple80211_awdl_preferred_channels(uint64_t a1)
{
  sub_1000122B4(a1, &qword_100404648, (uint64_t)&unk_1003D9A50);
}

void type metadata accessor for apple80211_awdl_strategy(uint64_t a1)
{
  sub_1000122B4(a1, &qword_100404650, (uint64_t)&unk_1003D9AD8);
}

void type metadata accessor for apple80211_awdl_sync_enabled(uint64_t a1)
{
  sub_1000122B4(a1, &qword_100404658, (uint64_t)&unk_1003D9B60);
}

void type metadata accessor for apple80211_virtual_if_state(uint64_t a1)
{
  sub_1000122B4(a1, &qword_100404660, (uint64_t)&unk_1003D9BE8);
}

__n128 initializeWithTake for NANServiceName(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

void type metadata accessor for apple80211_userspace_p2p_options_t(uint64_t a1)
{
  sub_1000122B4(a1, &qword_100404668, (uint64_t)&unk_1003D9C70);
}

void type metadata accessor for apple80211_country_code_data(uint64_t a1)
{
  sub_1000122B4(a1, &qword_100404670, (uint64_t)&unk_1003D9CF0);
}

__n128 sub_10001AFC4(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  result = (__n128)a2[4];
  v6 = a2[5];
  v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 64) = result;
  *(_OWORD *)(a1 + 80) = v6;
  return result;
}

uint64_t sub_10001AFE8(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 128))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_10001B008(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 120) = 0;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 128) = v3;
  return result;
}

void type metadata accessor for in6_aliasreq(uint64_t a1)
{
  sub_1000122B4(a1, &qword_100404678, (uint64_t)&unk_1003D9D70);
}

void *sub_10001B068(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x120uLL);
}

uint64_t sub_10001B070(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 288))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_10001B090(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 280) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 288) = v3;
  return result;
}

void type metadata accessor for in6_ifreq(uint64_t a1)
{
  sub_1000122B4(a1, &qword_100404680, (uint64_t)&unk_1003D9E00);
}

__n128 initializeWithTake for NANAttribute.P2POperation(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t sub_10001B128(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 32) = v3;
  return result;
}

void type metadata accessor for ifreq(uint64_t a1)
{
  sub_1000122B4(a1, &qword_100404688, (uint64_t)&unk_1003D9E80);
}

uint64_t initializeBufferWithCopyOfBuffer for WiFiAddress(uint64_t result, int *a2)
{
  int v2;

  v2 = *a2;
  *(_WORD *)(result + 4) = *((_WORD *)a2 + 2);
  *(_DWORD *)result = v2;
  return result;
}

void type metadata accessor for apple80211_nan_cluster_changed_event_data(uint64_t a1)
{
  sub_1000122B4(a1, &qword_100404690, (uint64_t)&unk_1003D9F00);
}

void type metadata accessor for apple80211_nan_device_role_changed_event_data(uint64_t a1)
{
  sub_1000122B4(a1, &qword_100404698, (uint64_t)&unk_1003D9F80);
}

__n128 sub_10001B1A4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 12) = *(_OWORD *)(a2 + 12);
  *(__n128 *)a1 = result;
  return result;
}

void type metadata accessor for apple80211_nan_discovery_result_received_event_data(uint64_t a1)
{
  sub_1000122B4(a1, &qword_1004046A0, (uint64_t)&unk_1003DA008);
}

void type metadata accessor for apple80211_nan_publish_replied_private_event_data(uint64_t a1)
{
  sub_1000122B4(a1, &qword_1004046A8, (uint64_t)&unk_1003DA0A0);
}

__n128 sub_10001B1E0(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u16[0] = a2[1].n128_u16[0];
  *a1 = result;
  return result;
}

void type metadata accessor for apple80211_nan_dp_request_recvd_event_data(uint64_t a1)
{
  sub_1000122B4(a1, &qword_1004046B0, (uint64_t)&unk_1003DA138);
}

__n128 sub_10001B208(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_QWORD *)(a1 + 14) = *(_QWORD *)(a2 + 14);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t sub_10001B21C(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 22))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_10001B23C(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_WORD *)(result + 20) = 0;
    *(_DWORD *)(result + 16) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 22) = v3;
  return result;
}

void type metadata accessor for apple80211_nan_dp_resp_recvd_event_data(uint64_t a1)
{
  sub_1000122B4(a1, &qword_1004046B8, (uint64_t)&unk_1003DA1D0);
}

__n128 sub_10001B280(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t storeEnumTagSinglePayload for NANAttribute.Cluster(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 16) = v3;
  return result;
}

void type metadata accessor for apple80211_nan_dp_confirm_recvd_event_data(uint64_t a1)
{
  sub_1000122B4(a1, &qword_1004046C0, (uint64_t)&unk_1003DA268);
}

void *sub_10001B2C8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x820uLL);
}

uint64_t sub_10001B2D0(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 2080))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_10001B2F0(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 2072) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 2056) = 0u;
    *(_OWORD *)(result + 2040) = 0u;
    *(_OWORD *)(result + 2024) = 0u;
    *(_OWORD *)(result + 2008) = 0u;
    *(_OWORD *)(result + 1992) = 0u;
    *(_OWORD *)(result + 1976) = 0u;
    *(_OWORD *)(result + 1960) = 0u;
    *(_OWORD *)(result + 1944) = 0u;
    *(_OWORD *)(result + 1928) = 0u;
    *(_OWORD *)(result + 1912) = 0u;
    *(_OWORD *)(result + 1896) = 0u;
    *(_OWORD *)(result + 1880) = 0u;
    *(_OWORD *)(result + 1864) = 0u;
    *(_OWORD *)(result + 1848) = 0u;
    *(_OWORD *)(result + 1832) = 0u;
    *(_OWORD *)(result + 1816) = 0u;
    *(_OWORD *)(result + 1800) = 0u;
    *(_OWORD *)(result + 1784) = 0u;
    *(_OWORD *)(result + 1768) = 0u;
    *(_OWORD *)(result + 1752) = 0u;
    *(_OWORD *)(result + 1736) = 0u;
    *(_OWORD *)(result + 1720) = 0u;
    *(_OWORD *)(result + 1704) = 0u;
    *(_OWORD *)(result + 1688) = 0u;
    *(_OWORD *)(result + 1672) = 0u;
    *(_OWORD *)(result + 1656) = 0u;
    *(_OWORD *)(result + 1640) = 0u;
    *(_OWORD *)(result + 1624) = 0u;
    *(_OWORD *)(result + 1608) = 0u;
    *(_OWORD *)(result + 1592) = 0u;
    *(_OWORD *)(result + 1576) = 0u;
    *(_OWORD *)(result + 1560) = 0u;
    *(_OWORD *)(result + 1544) = 0u;
    *(_OWORD *)(result + 1528) = 0u;
    *(_OWORD *)(result + 1512) = 0u;
    *(_OWORD *)(result + 1496) = 0u;
    *(_OWORD *)(result + 1480) = 0u;
    *(_OWORD *)(result + 1464) = 0u;
    *(_OWORD *)(result + 1448) = 0u;
    *(_OWORD *)(result + 1432) = 0u;
    *(_OWORD *)(result + 1416) = 0u;
    *(_OWORD *)(result + 1400) = 0u;
    *(_OWORD *)(result + 1384) = 0u;
    *(_OWORD *)(result + 1368) = 0u;
    *(_OWORD *)(result + 1352) = 0u;
    *(_OWORD *)(result + 1336) = 0u;
    *(_OWORD *)(result + 1320) = 0u;
    *(_OWORD *)(result + 1304) = 0u;
    *(_OWORD *)(result + 1288) = 0u;
    *(_OWORD *)(result + 1272) = 0u;
    *(_OWORD *)(result + 1256) = 0u;
    *(_OWORD *)(result + 1240) = 0u;
    *(_OWORD *)(result + 1224) = 0u;
    *(_OWORD *)(result + 1208) = 0u;
    *(_OWORD *)(result + 1192) = 0u;
    *(_OWORD *)(result + 1176) = 0u;
    *(_OWORD *)(result + 1160) = 0u;
    *(_OWORD *)(result + 1144) = 0u;
    *(_OWORD *)(result + 1128) = 0u;
    *(_OWORD *)(result + 1112) = 0u;
    *(_OWORD *)(result + 1096) = 0u;
    *(_OWORD *)(result + 1080) = 0u;
    *(_OWORD *)(result + 1064) = 0u;
    *(_OWORD *)(result + 1048) = 0u;
    *(_OWORD *)(result + 1032) = 0u;
    *(_OWORD *)(result + 1016) = 0u;
    *(_OWORD *)(result + 1000) = 0u;
    *(_OWORD *)(result + 984) = 0u;
    *(_OWORD *)(result + 968) = 0u;
    *(_OWORD *)(result + 952) = 0u;
    *(_OWORD *)(result + 936) = 0u;
    *(_OWORD *)(result + 920) = 0u;
    *(_OWORD *)(result + 904) = 0u;
    *(_OWORD *)(result + 888) = 0u;
    *(_OWORD *)(result + 872) = 0u;
    *(_OWORD *)(result + 856) = 0u;
    *(_OWORD *)(result + 840) = 0u;
    *(_OWORD *)(result + 824) = 0u;
    *(_OWORD *)(result + 808) = 0u;
    *(_OWORD *)(result + 792) = 0u;
    *(_OWORD *)(result + 776) = 0u;
    *(_OWORD *)(result + 760) = 0u;
    *(_OWORD *)(result + 744) = 0u;
    *(_OWORD *)(result + 728) = 0u;
    *(_OWORD *)(result + 712) = 0u;
    *(_OWORD *)(result + 696) = 0u;
    *(_OWORD *)(result + 680) = 0u;
    *(_OWORD *)(result + 664) = 0u;
    *(_OWORD *)(result + 648) = 0u;
    *(_OWORD *)(result + 632) = 0u;
    *(_OWORD *)(result + 616) = 0u;
    *(_OWORD *)(result + 600) = 0u;
    *(_OWORD *)(result + 584) = 0u;
    *(_OWORD *)(result + 568) = 0u;
    *(_OWORD *)(result + 552) = 0u;
    *(_OWORD *)(result + 536) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 2080) = v3;
  return result;
}

void type metadata accessor for apple80211_nan_data_path_established_event_data(uint64_t a1)
{
  sub_1000122B4(a1, &qword_1004046C8, (uint64_t)&unk_1003DA2F8);
}

uint64_t initializeBufferWithCopyOfBuffer for NANAttribute.P2POperation(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain(v2);
  return v3;
}

uint64_t sub_10001B588(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 28))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_10001B5A8(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_DWORD *)(result + 24) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 28) = v3;
  return result;
}

void type metadata accessor for apple80211_nan_data_path_end_event_data(uint64_t a1)
{
  sub_1000122B4(a1, &qword_1004046D0, (uint64_t)&unk_1003DA390);
}

void type metadata accessor for apple80211_nan_dp_host_assist_event_data(uint64_t a1)
{
  sub_1000122B4(a1, &qword_1004046D8, (uint64_t)&unk_1003DA420);
}

void type metadata accessor for apple80211_nan_subscribe_terminated_event_data(uint64_t a1)
{
  sub_1000122B4(a1, &qword_1004046E0, (uint64_t)&unk_1003DA4B8);
}

void type metadata accessor for apple80211_nan_publish_terminated_event_data(uint64_t a1)
{
  sub_1000122B4(a1, &qword_1004046E8, (uint64_t)&unk_1003DA538);
}

void type metadata accessor for apple80211_nan_follow_up_received_event_data(uint64_t a1)
{
  sub_1000122B4(a1, &qword_1004046F0, (uint64_t)&unk_1003DA5B8);
}

void type metadata accessor for apple80211_nan_follow_up_tx_complete_event_data(uint64_t a1)
{
  sub_1000122B4(a1, &qword_1004046F8, (uint64_t)&unk_1003DA650);
}

__n128 sub_10001B650(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t sub_10001B65C(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

void type metadata accessor for apple80211_nan_beacon_recvd_event_data(uint64_t a1)
{
  sub_1000122B4(a1, &qword_100404700, (uint64_t)&unk_1003DA6E0);
}

uint64_t sub_10001B690(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_WORD *)(result + 8) = *((_WORD *)a2 + 4);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t sub_10001B6A4(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 10))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_10001B6C4(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_WORD *)(result + 8) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 10) = v3;
  return result;
}

void type metadata accessor for apple80211_nan_oob_act_frm_tx_status(uint64_t a1)
{
  sub_1000122B4(a1, &qword_100404708, (uint64_t)&unk_1003DA778);
}

void *sub_10001B704(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x3E1uLL);
}

uint64_t sub_10001B70C(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 993))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_10001B72C(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 984) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 968) = 0u;
    *(_BYTE *)(result + 992) = 0;
    *(_OWORD *)(result + 952) = 0u;
    *(_OWORD *)(result + 936) = 0u;
    *(_OWORD *)(result + 920) = 0u;
    *(_OWORD *)(result + 904) = 0u;
    *(_OWORD *)(result + 888) = 0u;
    *(_OWORD *)(result + 872) = 0u;
    *(_OWORD *)(result + 856) = 0u;
    *(_OWORD *)(result + 840) = 0u;
    *(_OWORD *)(result + 824) = 0u;
    *(_OWORD *)(result + 808) = 0u;
    *(_OWORD *)(result + 792) = 0u;
    *(_OWORD *)(result + 776) = 0u;
    *(_OWORD *)(result + 760) = 0u;
    *(_OWORD *)(result + 744) = 0u;
    *(_OWORD *)(result + 728) = 0u;
    *(_OWORD *)(result + 712) = 0u;
    *(_OWORD *)(result + 696) = 0u;
    *(_OWORD *)(result + 680) = 0u;
    *(_OWORD *)(result + 664) = 0u;
    *(_OWORD *)(result + 648) = 0u;
    *(_OWORD *)(result + 632) = 0u;
    *(_OWORD *)(result + 616) = 0u;
    *(_OWORD *)(result + 600) = 0u;
    *(_OWORD *)(result + 584) = 0u;
    *(_OWORD *)(result + 568) = 0u;
    *(_OWORD *)(result + 552) = 0u;
    *(_OWORD *)(result + 536) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 993) = v3;
  return result;
}

void type metadata accessor for apple80211_nan_oob_act_frm_rx_data(uint64_t a1)
{
  sub_1000122B4(a1, &qword_100404710, (uint64_t)&unk_1003DA800);
}

__n128 sub_10001B874(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t sub_10001B898(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 72))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_10001B8B8(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 72) = v3;
  return result;
}

void type metadata accessor for apple80211_nan_dw_start_event_data(uint64_t a1)
{
  sub_1000122B4(a1, &qword_100404718, (uint64_t)&unk_1003DA890);
}

__n128 sub_10001B908(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

void type metadata accessor for apple80211_nan_preferred_channels_changed_event(uint64_t a1)
{
  sub_1000122B4(a1, &qword_100404720, (uint64_t)&unk_1003DA928);
}

void type metadata accessor for apple80211_channel_band(uint64_t a1)
{
  sub_1000122B4(a1, &qword_100404728, (uint64_t)&unk_1003DA950);
}

void *sub_10001B944(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0xF20uLL);
}

uint64_t sub_10001B94C(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 3872))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 4);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t sub_10001B9A0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 3864) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 3848) = 0u;
    *(_OWORD *)(result + 3832) = 0u;
    *(_OWORD *)(result + 3816) = 0u;
    *(_OWORD *)(result + 3800) = 0u;
    *(_OWORD *)(result + 3784) = 0u;
    *(_OWORD *)(result + 3768) = 0u;
    *(_OWORD *)(result + 3752) = 0u;
    *(_OWORD *)(result + 3736) = 0u;
    *(_OWORD *)(result + 3720) = 0u;
    *(_OWORD *)(result + 3704) = 0u;
    *(_OWORD *)(result + 3688) = 0u;
    *(_OWORD *)(result + 3672) = 0u;
    *(_OWORD *)(result + 3656) = 0u;
    *(_OWORD *)(result + 3640) = 0u;
    *(_OWORD *)(result + 3624) = 0u;
    *(_OWORD *)(result + 3608) = 0u;
    *(_OWORD *)(result + 3592) = 0u;
    *(_OWORD *)(result + 3576) = 0u;
    *(_OWORD *)(result + 3560) = 0u;
    *(_OWORD *)(result + 3544) = 0u;
    *(_OWORD *)(result + 3528) = 0u;
    *(_OWORD *)(result + 3512) = 0u;
    *(_OWORD *)(result + 3496) = 0u;
    *(_OWORD *)(result + 3480) = 0u;
    *(_OWORD *)(result + 3464) = 0u;
    *(_OWORD *)(result + 3448) = 0u;
    *(_OWORD *)(result + 3432) = 0u;
    *(_OWORD *)(result + 3416) = 0u;
    *(_OWORD *)(result + 3400) = 0u;
    *(_OWORD *)(result + 3384) = 0u;
    *(_OWORD *)(result + 3368) = 0u;
    *(_OWORD *)(result + 3352) = 0u;
    *(_OWORD *)(result + 3336) = 0u;
    *(_OWORD *)(result + 3320) = 0u;
    *(_OWORD *)(result + 3304) = 0u;
    *(_OWORD *)(result + 3288) = 0u;
    *(_OWORD *)(result + 3272) = 0u;
    *(_OWORD *)(result + 3256) = 0u;
    *(_OWORD *)(result + 3240) = 0u;
    *(_OWORD *)(result + 3224) = 0u;
    *(_OWORD *)(result + 3208) = 0u;
    *(_OWORD *)(result + 3192) = 0u;
    *(_OWORD *)(result + 3176) = 0u;
    *(_OWORD *)(result + 3160) = 0u;
    *(_OWORD *)(result + 3144) = 0u;
    *(_OWORD *)(result + 3128) = 0u;
    *(_OWORD *)(result + 3112) = 0u;
    *(_OWORD *)(result + 3096) = 0u;
    *(_OWORD *)(result + 3080) = 0u;
    *(_OWORD *)(result + 3064) = 0u;
    *(_OWORD *)(result + 3048) = 0u;
    *(_OWORD *)(result + 3032) = 0u;
    *(_OWORD *)(result + 3016) = 0u;
    *(_OWORD *)(result + 3000) = 0u;
    *(_OWORD *)(result + 2984) = 0u;
    *(_OWORD *)(result + 2968) = 0u;
    *(_OWORD *)(result + 2952) = 0u;
    *(_OWORD *)(result + 2936) = 0u;
    *(_OWORD *)(result + 2920) = 0u;
    *(_OWORD *)(result + 2904) = 0u;
    *(_OWORD *)(result + 2888) = 0u;
    *(_OWORD *)(result + 2872) = 0u;
    *(_OWORD *)(result + 2856) = 0u;
    *(_OWORD *)(result + 2840) = 0u;
    *(_OWORD *)(result + 2824) = 0u;
    *(_OWORD *)(result + 2808) = 0u;
    *(_OWORD *)(result + 2792) = 0u;
    *(_OWORD *)(result + 2776) = 0u;
    *(_OWORD *)(result + 2760) = 0u;
    *(_OWORD *)(result + 2744) = 0u;
    *(_OWORD *)(result + 2728) = 0u;
    *(_OWORD *)(result + 2712) = 0u;
    *(_OWORD *)(result + 2696) = 0u;
    *(_OWORD *)(result + 2680) = 0u;
    *(_OWORD *)(result + 2664) = 0u;
    *(_OWORD *)(result + 2648) = 0u;
    *(_OWORD *)(result + 2632) = 0u;
    *(_OWORD *)(result + 2616) = 0u;
    *(_OWORD *)(result + 2600) = 0u;
    *(_OWORD *)(result + 2584) = 0u;
    *(_OWORD *)(result + 2568) = 0u;
    *(_OWORD *)(result + 2552) = 0u;
    *(_OWORD *)(result + 2536) = 0u;
    *(_OWORD *)(result + 2520) = 0u;
    *(_OWORD *)(result + 2504) = 0u;
    *(_OWORD *)(result + 2488) = 0u;
    *(_OWORD *)(result + 2472) = 0u;
    *(_OWORD *)(result + 2456) = 0u;
    *(_OWORD *)(result + 2440) = 0u;
    *(_OWORD *)(result + 2424) = 0u;
    *(_OWORD *)(result + 2408) = 0u;
    *(_OWORD *)(result + 2392) = 0u;
    *(_OWORD *)(result + 2376) = 0u;
    *(_OWORD *)(result + 2360) = 0u;
    *(_OWORD *)(result + 2344) = 0u;
    *(_OWORD *)(result + 2328) = 0u;
    *(_OWORD *)(result + 2312) = 0u;
    *(_OWORD *)(result + 2296) = 0u;
    *(_OWORD *)(result + 2280) = 0u;
    *(_OWORD *)(result + 2264) = 0u;
    *(_OWORD *)(result + 2248) = 0u;
    *(_OWORD *)(result + 2232) = 0u;
    *(_OWORD *)(result + 2216) = 0u;
    *(_OWORD *)(result + 2200) = 0u;
    *(_OWORD *)(result + 2184) = 0u;
    *(_OWORD *)(result + 2168) = 0u;
    *(_OWORD *)(result + 2152) = 0u;
    *(_OWORD *)(result + 2136) = 0u;
    *(_OWORD *)(result + 2120) = 0u;
    *(_OWORD *)(result + 2104) = 0u;
    *(_OWORD *)(result + 2088) = 0u;
    *(_OWORD *)(result + 2072) = 0u;
    *(_OWORD *)(result + 2056) = 0u;
    *(_OWORD *)(result + 2040) = 0u;
    *(_OWORD *)(result + 2024) = 0u;
    *(_OWORD *)(result + 2008) = 0u;
    *(_OWORD *)(result + 1992) = 0u;
    *(_OWORD *)(result + 1976) = 0u;
    *(_OWORD *)(result + 1960) = 0u;
    *(_OWORD *)(result + 1944) = 0u;
    *(_OWORD *)(result + 1928) = 0u;
    *(_OWORD *)(result + 1912) = 0u;
    *(_OWORD *)(result + 1896) = 0u;
    *(_OWORD *)(result + 1880) = 0u;
    *(_OWORD *)(result + 1864) = 0u;
    *(_OWORD *)(result + 1848) = 0u;
    *(_OWORD *)(result + 1832) = 0u;
    *(_OWORD *)(result + 1816) = 0u;
    *(_OWORD *)(result + 1800) = 0u;
    *(_OWORD *)(result + 1784) = 0u;
    *(_OWORD *)(result + 1768) = 0u;
    *(_OWORD *)(result + 1752) = 0u;
    *(_OWORD *)(result + 1736) = 0u;
    *(_OWORD *)(result + 1720) = 0u;
    *(_OWORD *)(result + 1704) = 0u;
    *(_OWORD *)(result + 1688) = 0u;
    *(_OWORD *)(result + 1672) = 0u;
    *(_OWORD *)(result + 1656) = 0u;
    *(_OWORD *)(result + 1640) = 0u;
    *(_OWORD *)(result + 1624) = 0u;
    *(_OWORD *)(result + 1608) = 0u;
    *(_OWORD *)(result + 1592) = 0u;
    *(_OWORD *)(result + 1576) = 0u;
    *(_OWORD *)(result + 1560) = 0u;
    *(_OWORD *)(result + 1544) = 0u;
    *(_OWORD *)(result + 1528) = 0u;
    *(_OWORD *)(result + 1512) = 0u;
    *(_OWORD *)(result + 1496) = 0u;
    *(_OWORD *)(result + 1480) = 0u;
    *(_OWORD *)(result + 1464) = 0u;
    *(_OWORD *)(result + 1448) = 0u;
    *(_OWORD *)(result + 1432) = 0u;
    *(_OWORD *)(result + 1416) = 0u;
    *(_OWORD *)(result + 1400) = 0u;
    *(_OWORD *)(result + 1384) = 0u;
    *(_OWORD *)(result + 1368) = 0u;
    *(_OWORD *)(result + 1352) = 0u;
    *(_OWORD *)(result + 1336) = 0u;
    *(_OWORD *)(result + 1320) = 0u;
    *(_OWORD *)(result + 1304) = 0u;
    *(_OWORD *)(result + 1288) = 0u;
    *(_OWORD *)(result + 1272) = 0u;
    *(_OWORD *)(result + 1256) = 0u;
    *(_OWORD *)(result + 1240) = 0u;
    *(_OWORD *)(result + 1224) = 0u;
    *(_OWORD *)(result + 1208) = 0u;
    *(_OWORD *)(result + 1192) = 0u;
    *(_OWORD *)(result + 1176) = 0u;
    *(_OWORD *)(result + 1160) = 0u;
    *(_OWORD *)(result + 1144) = 0u;
    *(_OWORD *)(result + 1128) = 0u;
    *(_OWORD *)(result + 1112) = 0u;
    *(_OWORD *)(result + 1096) = 0u;
    *(_OWORD *)(result + 1080) = 0u;
    *(_OWORD *)(result + 1064) = 0u;
    *(_OWORD *)(result + 1048) = 0u;
    *(_OWORD *)(result + 1032) = 0u;
    *(_OWORD *)(result + 1016) = 0u;
    *(_OWORD *)(result + 1000) = 0u;
    *(_OWORD *)(result + 984) = 0u;
    *(_OWORD *)(result + 968) = 0u;
    *(_OWORD *)(result + 952) = 0u;
    *(_OWORD *)(result + 936) = 0u;
    *(_OWORD *)(result + 920) = 0u;
    *(_OWORD *)(result + 904) = 0u;
    *(_OWORD *)(result + 888) = 0u;
    *(_OWORD *)(result + 872) = 0u;
    *(_OWORD *)(result + 856) = 0u;
    *(_OWORD *)(result + 840) = 0u;
    *(_OWORD *)(result + 824) = 0u;
    *(_OWORD *)(result + 808) = 0u;
    *(_OWORD *)(result + 792) = 0u;
    *(_OWORD *)(result + 776) = 0u;
    *(_OWORD *)(result + 760) = 0u;
    *(_OWORD *)(result + 744) = 0u;
    *(_OWORD *)(result + 728) = 0u;
    *(_OWORD *)(result + 712) = 0u;
    *(_OWORD *)(result + 696) = 0u;
    *(_OWORD *)(result + 680) = 0u;
    *(_OWORD *)(result + 664) = 0u;
    *(_OWORD *)(result + 648) = 0u;
    *(_OWORD *)(result + 632) = 0u;
    *(_OWORD *)(result + 616) = 0u;
    *(_OWORD *)(result + 600) = 0u;
    *(_OWORD *)(result + 584) = 0u;
    *(_OWORD *)(result + 568) = 0u;
    *(_OWORD *)(result + 552) = 0u;
    *(_OWORD *)(result + 536) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 3872) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 3872) = 0;
    if (a2)
      *(_BYTE *)(result + 4) = a2 + 1;
  }
  return result;
}

void type metadata accessor for apple80211_nan_low_latency_peer_statistics(uint64_t a1)
{
  sub_1000122B4(a1, &qword_100404730, (uint64_t)&unk_1003DA9D0);
}

void *sub_10001BDFC(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x640uLL);
}

uint64_t sub_10001BE04(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 1600))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 8);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t sub_10001BE58(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 1592) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 1576) = 0u;
    *(_OWORD *)(result + 1560) = 0u;
    *(_OWORD *)(result + 1544) = 0u;
    *(_OWORD *)(result + 1528) = 0u;
    *(_OWORD *)(result + 1512) = 0u;
    *(_OWORD *)(result + 1496) = 0u;
    *(_OWORD *)(result + 1480) = 0u;
    *(_OWORD *)(result + 1464) = 0u;
    *(_OWORD *)(result + 1448) = 0u;
    *(_OWORD *)(result + 1432) = 0u;
    *(_OWORD *)(result + 1416) = 0u;
    *(_OWORD *)(result + 1400) = 0u;
    *(_OWORD *)(result + 1384) = 0u;
    *(_OWORD *)(result + 1368) = 0u;
    *(_OWORD *)(result + 1352) = 0u;
    *(_OWORD *)(result + 1336) = 0u;
    *(_OWORD *)(result + 1320) = 0u;
    *(_OWORD *)(result + 1304) = 0u;
    *(_OWORD *)(result + 1288) = 0u;
    *(_OWORD *)(result + 1272) = 0u;
    *(_OWORD *)(result + 1256) = 0u;
    *(_OWORD *)(result + 1240) = 0u;
    *(_OWORD *)(result + 1224) = 0u;
    *(_OWORD *)(result + 1208) = 0u;
    *(_OWORD *)(result + 1192) = 0u;
    *(_OWORD *)(result + 1176) = 0u;
    *(_OWORD *)(result + 1160) = 0u;
    *(_OWORD *)(result + 1144) = 0u;
    *(_OWORD *)(result + 1128) = 0u;
    *(_OWORD *)(result + 1112) = 0u;
    *(_OWORD *)(result + 1096) = 0u;
    *(_OWORD *)(result + 1080) = 0u;
    *(_OWORD *)(result + 1064) = 0u;
    *(_OWORD *)(result + 1048) = 0u;
    *(_OWORD *)(result + 1032) = 0u;
    *(_OWORD *)(result + 1016) = 0u;
    *(_OWORD *)(result + 1000) = 0u;
    *(_OWORD *)(result + 984) = 0u;
    *(_OWORD *)(result + 968) = 0u;
    *(_OWORD *)(result + 952) = 0u;
    *(_OWORD *)(result + 936) = 0u;
    *(_OWORD *)(result + 920) = 0u;
    *(_OWORD *)(result + 904) = 0u;
    *(_OWORD *)(result + 888) = 0u;
    *(_OWORD *)(result + 872) = 0u;
    *(_OWORD *)(result + 856) = 0u;
    *(_OWORD *)(result + 840) = 0u;
    *(_OWORD *)(result + 824) = 0u;
    *(_OWORD *)(result + 808) = 0u;
    *(_OWORD *)(result + 792) = 0u;
    *(_OWORD *)(result + 776) = 0u;
    *(_OWORD *)(result + 760) = 0u;
    *(_OWORD *)(result + 744) = 0u;
    *(_OWORD *)(result + 728) = 0u;
    *(_OWORD *)(result + 712) = 0u;
    *(_OWORD *)(result + 696) = 0u;
    *(_OWORD *)(result + 680) = 0u;
    *(_OWORD *)(result + 664) = 0u;
    *(_OWORD *)(result + 648) = 0u;
    *(_OWORD *)(result + 632) = 0u;
    *(_OWORD *)(result + 616) = 0u;
    *(_OWORD *)(result + 600) = 0u;
    *(_OWORD *)(result + 584) = 0u;
    *(_OWORD *)(result + 568) = 0u;
    *(_OWORD *)(result + 552) = 0u;
    *(_OWORD *)(result + 536) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 1600) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 1600) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = a2 + 1;
  }
  return result;
}

void type metadata accessor for apple80211_awdl_low_latency_statistics_reduced(uint64_t a1)
{
  sub_1000122B4(a1, &qword_100404738, (uint64_t)&unk_1003DAA80);
}

__n128 sub_10001C058(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;
  __int128 v10;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v2 = *(_OWORD *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  v5 = *(_OWORD *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 96) = v6;
  result = *(__n128 *)(a2 + 144);
  v9 = *(_OWORD *)(a2 + 160);
  v10 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 192) = v10;
  *(__n128 *)(a1 + 144) = result;
  *(_OWORD *)(a1 + 160) = v9;
  return result;
}

uint64_t sub_10001C094(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 208))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 62);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t sub_10001C0E8(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 200) = 0;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 208) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 208) = 0;
    if (a2)
      *(_BYTE *)(result + 62) = a2 + 1;
  }
  return result;
}

void type metadata accessor for apple80211_p2p_airplay_statistics(uint64_t a1)
{
  sub_1000122B4(a1, &qword_100404740, (uint64_t)&unk_1003DAB08);
}

void type metadata accessor for apple80211_p2p_thread_coex_event(uint64_t a1)
{
  sub_1000122B4(a1, &qword_100404748, (uint64_t)&unk_1003DAC08);
}

void type metadata accessor for apple80211_hostap_state(uint64_t a1)
{
  sub_1000122B4(a1, &qword_100404750, (uint64_t)&unk_1003DAC88);
}

__n128 sub_10001C19C(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t sub_10001C1C0(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 68))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_10001C1E0(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 64) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 68) = v3;
  return result;
}

void type metadata accessor for apple80211_peer_presence_indication(uint64_t a1)
{
  sub_1000122B4(a1, &qword_100404758, (uint64_t)&unk_1003DAD18);
}

void *sub_10001C234(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x108uLL);
}

uint64_t sub_10001C23C(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 264))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_10001C25C(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 248) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 264) = v3;
  return result;
}

void type metadata accessor for apple80211_awdl_service_reg_soft_error_event(uint64_t a1)
{
  sub_1000122B4(a1, &qword_100404760, (uint64_t)&unk_1003DADA8);
}

void type metadata accessor for apple80211_idle_detect(uint64_t a1)
{
  sub_1000122B4(a1, &qword_100404768, (uint64_t)&unk_1003DAE30);
}

__n128 sub_10001C2F0(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t storeEnumTagSinglePayload for AWDLActionFrame.NANSynchronization(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 40) = v3;
  return result;
}

void type metadata accessor for apple80211_awdl_stats_p2p_failure(uint64_t a1)
{
  sub_1000122B4(a1, &qword_100404770, (uint64_t)&unk_1003DAEB0);
}

__n128 sub_10001C34C(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;
  __int128 v10;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  v5 = a2[4];
  v6 = a2[5];
  v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  result = (__n128)a2[8];
  v9 = a2[9];
  v10 = a2[10];
  *(_QWORD *)(a1 + 176) = *((_QWORD *)a2 + 22);
  *(_OWORD *)(a1 + 144) = v9;
  *(_OWORD *)(a1 + 160) = v10;
  *(__n128 *)(a1 + 128) = result;
  return result;
}

uint64_t sub_10001C388(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 184))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

void type metadata accessor for apple80211_driver_availability(uint64_t a1)
{
  sub_1000122B4(a1, &qword_100404778, (uint64_t)&unk_1003DAF38);
}

void type metadata accessor for apple80211_chip_reset(uint64_t a1)
{
  sub_1000122B4(a1, &qword_100404780, (uint64_t)&unk_1003DAF90);
}

void type metadata accessor for apple80211_nan_infra_assoc_start_event_data(uint64_t a1)
{
  sub_1000122B4(a1, &qword_100404788, (uint64_t)&unk_1003DB010);
}

void *sub_10001C3E4(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x1CCuLL);
}

uint64_t sub_10001C3EC(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 460))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_10001C40C(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 456) = 0;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 460) = v3;
  return result;
}

void type metadata accessor for apple80211_join_status(uint64_t a1)
{
  sub_1000122B4(a1, &qword_100404790, (uint64_t)&unk_1003DB090);
}

__n128 initializeBufferWithCopyOfBuffer for IEEE80211Frame.Header(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

void type metadata accessor for apple80211_assoc_ready(uint64_t a1)
{
  sub_1000122B4(a1, &qword_100404798, (uint64_t)&unk_1003DB120);
}

__n128 sub_10001C4EC(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  result = (__n128)a2[3];
  v5 = a2[4];
  v6 = a2[5];
  *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 12);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t sub_10001C518(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 104))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_10001C538(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 104) = v3;
  return result;
}

void type metadata accessor for apple80211_message_auth(uint64_t a1)
{
  sub_1000122B4(a1, &qword_1004047A0, (uint64_t)&unk_1003DB1A8);
}

void type metadata accessor for apple80211_message_assoc(uint64_t a1)
{
  sub_1000122B4(a1, &qword_1004047A8, (uint64_t)&unk_1003DB240);
}

void *sub_10001C5A4(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x193uLL);
}

uint64_t sub_10001C5AC(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 403))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_10001C5CC(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 392) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 402) = 0;
    *(_WORD *)(result + 400) = 0;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 403) = v3;
  return result;
}

void type metadata accessor for apple80211_infra_scan_start_event_data(uint64_t a1)
{
  sub_1000122B4(a1, &qword_1004047B0, (uint64_t)&unk_1003DB2C0);
}

uint64_t getEnumTagSinglePayload for NANAttribute.MasterIndication(unsigned __int16 *a1, int a2)
{
  int v2;
  int v3;
  int v4;

  if (!a2)
    return 0;
  if ((a2 + 0xFFFF) <= 0xFFFEFFFF)
    v2 = 2;
  else
    v2 = 4;
  if ((a2 + 0xFFFF) < 0xFF0000)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 16)) - 0xFFFF;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = a1[1];
      if (!a1[1])
        return 0;
      return (*a1 | (v4 << 16)) - 0xFFFF;
    }
    v4 = *((unsigned __int8 *)a1 + 2);
    if (*((_BYTE *)a1 + 2))
      return (*a1 | (v4 << 16)) - 0xFFFF;
  }
  return 0;
}

uint64_t sub_10001C6EC(_WORD *a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 0xFFFF) <= 0xFFFEFFFF)
    v3 = 2;
  else
    v3 = 4;
  if ((a3 + 0xFFFF) < 0xFF0000)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (!a2)
    return ((uint64_t (*)(void))((char *)sub_10001C764 + 4 * byte_100337875[v4]))();
  *a1 = a2 - 1;
  return ((uint64_t (*)(void))((char *)sub_10001C744 + 4 * byte_100337870[v4]))();
}

uint64_t sub_10001C744(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 2) = v1;
  return result;
}

uint64_t sub_10001C764(uint64_t result)
{
  *(_BYTE *)(result + 2) = 0;
  return result;
}

uint64_t sub_10001C76C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_10001C774(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_10001C77C(uint64_t result)
{
  *(_WORD *)(result + 2) = 0;
  return result;
}

uint64_t sub_10001C784(uint64_t result)
{
  *(_DWORD *)(result + 2) = 0;
  return result;
}

void type metadata accessor for apple80211_infra_scan_complete_event_data(uint64_t a1)
{
  sub_1000122B4(a1, &qword_1004047B8, (uint64_t)&unk_1003DB348);
}

void type metadata accessor for apple80211_channel(uint64_t a1)
{
  sub_1000122B4(a1, &qword_1004047C0, (uint64_t)&unk_1003DB3C8);
}

uint64_t getEnumTagSinglePayload for WiFiAddress(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 6))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for WiFiAddress(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_WORD *)(result + 4) = 0;
    *(_DWORD *)result = a2 - 1;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 6) = v3;
  return result;
}

void type metadata accessor for ether_addr(uint64_t a1)
{
  sub_1000122B4(a1, &qword_1004047C8, (uint64_t)&unk_1003DB450);
}

uint64_t sub_10001C818()
{
  return sub_100011DE4(&qword_1004047D0, (uint64_t (*)(uint64_t))type metadata accessor for CFString, (uint64_t)&unk_100338E88);
}

uint64_t sub_10001C844()
{
  return sub_100011DE4(&qword_1004047D8, (uint64_t (*)(uint64_t))type metadata accessor for WiFiAwareTerminationReason, (uint64_t)&unk_100338C78);
}

uint64_t sub_10001C870()
{
  return sub_100011DE4(&qword_1004047E0, (uint64_t (*)(uint64_t))type metadata accessor for AWDLTrafficRegistrationService, (uint64_t)&unk_100338CE0);
}

uint64_t sub_10001C89C()
{
  return sub_100011DE4(&qword_1004047E8, (uint64_t (*)(uint64_t))type metadata accessor for AWDLTrafficRegistrationService, (uint64_t)&unk_10035DBF0);
}

uint64_t sub_10001C8C8()
{
  return sub_100011DE4(&qword_1004047F0, (uint64_t (*)(uint64_t))type metadata accessor for AWDLTrafficRegistrationService, (uint64_t)&unk_10035DC50);
}

uint64_t sub_10001C8F4()
{
  return sub_100011DE4(&qword_1004047F8, (uint64_t (*)(uint64_t))type metadata accessor for CFString, (uint64_t)&unk_100338B70);
}

unint64_t sub_10001C920()
{
  unint64_t result;

  result = qword_1004048A0;
  if (!qword_1004048A0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_1004048A0);
  }
  return result;
}

uint64_t *sub_10001C964(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 - 8);
  if ((*(_DWORD *)(v3 + 80) & 0x20000) != 0)
  {
    v4 = swift_slowAlloc(*(_QWORD *)(v3 + 64), *(_DWORD *)(v3 + 80));
    *a2 = v4;
    return (uint64_t *)v4;
  }
  return a2;
}

uint64_t sub_10001C9A4(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 44))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_10001C9C4(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 40) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 44) = v3;
  return result;
}

void type metadata accessor for ifmediareq(uint64_t a1)
{
  sub_1000122B4(a1, &qword_1004048C8, (uint64_t)&unk_1003DB4D0);
}

__n128 initializeWithTake for NANAttribute.IBSS(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for AWDLActionFrame.NANSynchronization(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 40))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

void type metadata accessor for apple80211req(uint64_t a1)
{
  sub_1000122B4(a1, &qword_1004048D0, (uint64_t)&unk_1003DB568);
}

void type metadata accessor for SystemPowerChangeMessageType(uint64_t a1)
{
  sub_1000122B4(a1, &qword_1004048D8, (uint64_t)&unk_1003DB5A0);
}

__n128 initializeBufferWithCopyOfBuffer for NANDataHostAssistRequest(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

void type metadata accessor for sockaddr(uint64_t a1)
{
  sub_1000122B4(a1, &qword_1004048E0, (uint64_t)&unk_1003DB618);
}

void type metadata accessor for SCNetworkSet(uint64_t a1)
{
  sub_1000122B4(a1, &qword_1004048E8, (uint64_t)&unk_1003DB648);
}

void type metadata accessor for SCNetworkService(uint64_t a1)
{
  sub_1000122B4(a1, &qword_1004048F0, (uint64_t)&unk_1003DB678);
}

__n128 sub_10001CAB4(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t sub_10001CAD0(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 56))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_10001CAF0(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 56) = v3;
  return result;
}

void type metadata accessor for apple80211_infra_peer_address_data(uint64_t a1)
{
  sub_1000122B4(a1, &qword_1004048F8, (uint64_t)&unk_1003DB700);
}

void type metadata accessor for bcm_iov_batch_buf(uint64_t a1)
{
  sub_1000122B4(a1, &qword_100404900, (uint64_t)&unk_1003DB730);
}

void type metadata accessor for in6_addr.__Unnamed_union___u6_addr(uint64_t a1)
{
  sub_1000122B4(a1, &qword_100404908, (uint64_t)&unk_1003DB7B8);
}

void type metadata accessor for wl_tsf(uint64_t a1)
{
  sub_1000122B4(a1, &qword_100404910, (uint64_t)&unk_1003DB830);
}

void type metadata accessor for wl_nan_events(uint64_t a1)
{
  sub_1000122B4(a1, &qword_100404918, (uint64_t)&unk_1003DB858);
}

void type metadata accessor for wl_nan_ndl_qos(uint64_t a1)
{
  sub_1000122B4(a1, &qword_100404920, (uint64_t)&unk_1003DB8D8);
}

void type metadata accessor for wl_nan_dp_qos(uint64_t a1)
{
  sub_1000122B4(a1, &qword_100404928, (uint64_t)&unk_1003DB960);
}

void type metadata accessor for apple80211_companion_skywalk_if_create_code(uint64_t a1)
{
  sub_1000122B4(a1, &qword_100404930, (uint64_t)&unk_1003DB998);
}

_DWORD *initializeBufferWithCopyOfBuffer for NANPeerServiceIdentifier(_DWORD *result, int *a2)
{
  int v2;

  v2 = *a2;
  *(_DWORD *)((char *)result + 3) = *(int *)((char *)a2 + 3);
  *result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for NANPeerServiceIdentifier(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 7))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for NANPeerServiceIdentifier(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_BYTE *)(result + 6) = 0;
    *(_WORD *)(result + 4) = 0;
    *(_DWORD *)result = a2 - 1;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 7) = v3;
  return result;
}

void type metadata accessor for apple80211_nan_dp_identifier(uint64_t a1)
{
  sub_1000122B4(a1, &qword_100404938, (uint64_t)&unk_1003DBA18);
}

void type metadata accessor for histogramBin_s.__Unnamed_union___Anonymous_field2(uint64_t a1)
{
  sub_1000122B4(a1, &qword_100404940, (uint64_t)&unk_1003DBA40);
}

void type metadata accessor for apple80211_nan_ir_role(uint64_t a1)
{
  sub_1000122B4(a1, &qword_100404948, (uint64_t)&unk_1003DBA60);
}

void type metadata accessor for apple80211_disallow_nan_pwrsave_entities(uint64_t a1)
{
  sub_1000122B4(a1, &qword_100404950, (uint64_t)&unk_1003DBA88);
}

void type metadata accessor for apple80211_nan_dp_link_status_type(uint64_t a1)
{
  sub_1000122B4(a1, &qword_100404958, (uint64_t)&unk_1003DBAB0);
}

void type metadata accessor for apple80211_nan_forced_disc_beacon_transmission_reason(uint64_t a1)
{
  sub_1000122B4(a1, &qword_100404960, (uint64_t)&unk_1003DBAD8);
}

__n128 sub_10001CCA4(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  __int128 v7;
  __int128 v8;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  result = *(__n128 *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  v8 = *(_OWORD *)(a2 + 128);
  *(_WORD *)(a1 + 144) = *(_WORD *)(a2 + 144);
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  *(__n128 *)(a1 + 96) = result;
  return result;
}

uint64_t sub_10001CCD8(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 146))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_10001CCF8(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 136) = 0;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 144) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 146) = v3;
  return result;
}

void type metadata accessor for apple80211_nan_forced_disc_beacon_tx_availability(uint64_t a1)
{
  sub_1000122B4(a1, &qword_100404968, (uint64_t)&unk_1003DBB58);
}

void type metadata accessor for apple80211_nan_oob_action_frame_security_type(uint64_t a1)
{
  sub_1000122B4(a1, &qword_100404970, (uint64_t)&unk_1003DBB80);
}

void type metadata accessor for apple80211_nan_qos_requirements(uint64_t a1)
{
  sub_1000122B4(a1, &qword_100404978, (uint64_t)&unk_1003DBC00);
}

void type metadata accessor for apple80211_nan_sync_master(uint64_t a1)
{
  sub_1000122B4(a1, (unint64_t *)&unk_100404980, (uint64_t)&unk_1003DBC90);
}

void *sub_10001CD9C(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0xEE8uLL);
}

uint64_t sub_10001CDA4(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 3816))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_10001CDC4(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 3784) = 0u;
    *(_OWORD *)(result + 3800) = 0u;
    *(_OWORD *)(result + 3768) = 0u;
    *(_OWORD *)(result + 3752) = 0u;
    *(_OWORD *)(result + 3736) = 0u;
    *(_OWORD *)(result + 3720) = 0u;
    *(_OWORD *)(result + 3704) = 0u;
    *(_OWORD *)(result + 3688) = 0u;
    *(_OWORD *)(result + 3672) = 0u;
    *(_OWORD *)(result + 3656) = 0u;
    *(_OWORD *)(result + 3640) = 0u;
    *(_OWORD *)(result + 3624) = 0u;
    *(_OWORD *)(result + 3608) = 0u;
    *(_OWORD *)(result + 3592) = 0u;
    *(_OWORD *)(result + 3576) = 0u;
    *(_OWORD *)(result + 3560) = 0u;
    *(_OWORD *)(result + 3544) = 0u;
    *(_OWORD *)(result + 3528) = 0u;
    *(_OWORD *)(result + 3512) = 0u;
    *(_OWORD *)(result + 3496) = 0u;
    *(_OWORD *)(result + 3480) = 0u;
    *(_OWORD *)(result + 3464) = 0u;
    *(_OWORD *)(result + 3448) = 0u;
    *(_OWORD *)(result + 3432) = 0u;
    *(_OWORD *)(result + 3416) = 0u;
    *(_OWORD *)(result + 3400) = 0u;
    *(_OWORD *)(result + 3384) = 0u;
    *(_OWORD *)(result + 3368) = 0u;
    *(_OWORD *)(result + 3352) = 0u;
    *(_OWORD *)(result + 3336) = 0u;
    *(_OWORD *)(result + 3320) = 0u;
    *(_OWORD *)(result + 3304) = 0u;
    *(_OWORD *)(result + 3288) = 0u;
    *(_OWORD *)(result + 3272) = 0u;
    *(_OWORD *)(result + 3256) = 0u;
    *(_OWORD *)(result + 3240) = 0u;
    *(_OWORD *)(result + 3224) = 0u;
    *(_OWORD *)(result + 3208) = 0u;
    *(_OWORD *)(result + 3192) = 0u;
    *(_OWORD *)(result + 3176) = 0u;
    *(_OWORD *)(result + 3160) = 0u;
    *(_OWORD *)(result + 3144) = 0u;
    *(_OWORD *)(result + 3128) = 0u;
    *(_OWORD *)(result + 3112) = 0u;
    *(_OWORD *)(result + 3096) = 0u;
    *(_OWORD *)(result + 3080) = 0u;
    *(_OWORD *)(result + 3064) = 0u;
    *(_OWORD *)(result + 3048) = 0u;
    *(_OWORD *)(result + 3032) = 0u;
    *(_OWORD *)(result + 3016) = 0u;
    *(_OWORD *)(result + 3000) = 0u;
    *(_OWORD *)(result + 2984) = 0u;
    *(_OWORD *)(result + 2968) = 0u;
    *(_OWORD *)(result + 2952) = 0u;
    *(_OWORD *)(result + 2936) = 0u;
    *(_OWORD *)(result + 2920) = 0u;
    *(_OWORD *)(result + 2904) = 0u;
    *(_OWORD *)(result + 2888) = 0u;
    *(_OWORD *)(result + 2872) = 0u;
    *(_OWORD *)(result + 2856) = 0u;
    *(_OWORD *)(result + 2840) = 0u;
    *(_OWORD *)(result + 2824) = 0u;
    *(_OWORD *)(result + 2808) = 0u;
    *(_OWORD *)(result + 2792) = 0u;
    *(_OWORD *)(result + 2776) = 0u;
    *(_OWORD *)(result + 2760) = 0u;
    *(_OWORD *)(result + 2744) = 0u;
    *(_OWORD *)(result + 2728) = 0u;
    *(_OWORD *)(result + 2712) = 0u;
    *(_OWORD *)(result + 2696) = 0u;
    *(_OWORD *)(result + 2680) = 0u;
    *(_OWORD *)(result + 2664) = 0u;
    *(_OWORD *)(result + 2648) = 0u;
    *(_OWORD *)(result + 2632) = 0u;
    *(_OWORD *)(result + 2616) = 0u;
    *(_OWORD *)(result + 2600) = 0u;
    *(_OWORD *)(result + 2584) = 0u;
    *(_OWORD *)(result + 2568) = 0u;
    *(_OWORD *)(result + 2552) = 0u;
    *(_OWORD *)(result + 2536) = 0u;
    *(_OWORD *)(result + 2520) = 0u;
    *(_OWORD *)(result + 2504) = 0u;
    *(_OWORD *)(result + 2488) = 0u;
    *(_OWORD *)(result + 2472) = 0u;
    *(_OWORD *)(result + 2456) = 0u;
    *(_OWORD *)(result + 2440) = 0u;
    *(_OWORD *)(result + 2424) = 0u;
    *(_OWORD *)(result + 2408) = 0u;
    *(_OWORD *)(result + 2392) = 0u;
    *(_OWORD *)(result + 2376) = 0u;
    *(_OWORD *)(result + 2360) = 0u;
    *(_OWORD *)(result + 2344) = 0u;
    *(_OWORD *)(result + 2328) = 0u;
    *(_OWORD *)(result + 2312) = 0u;
    *(_OWORD *)(result + 2296) = 0u;
    *(_OWORD *)(result + 2280) = 0u;
    *(_OWORD *)(result + 2264) = 0u;
    *(_OWORD *)(result + 2248) = 0u;
    *(_OWORD *)(result + 2232) = 0u;
    *(_OWORD *)(result + 2216) = 0u;
    *(_OWORD *)(result + 2200) = 0u;
    *(_OWORD *)(result + 2184) = 0u;
    *(_OWORD *)(result + 2168) = 0u;
    *(_OWORD *)(result + 2152) = 0u;
    *(_OWORD *)(result + 2136) = 0u;
    *(_OWORD *)(result + 2120) = 0u;
    *(_OWORD *)(result + 2104) = 0u;
    *(_OWORD *)(result + 2088) = 0u;
    *(_OWORD *)(result + 2072) = 0u;
    *(_OWORD *)(result + 2056) = 0u;
    *(_OWORD *)(result + 2040) = 0u;
    *(_OWORD *)(result + 2024) = 0u;
    *(_OWORD *)(result + 2008) = 0u;
    *(_OWORD *)(result + 1992) = 0u;
    *(_OWORD *)(result + 1976) = 0u;
    *(_OWORD *)(result + 1960) = 0u;
    *(_OWORD *)(result + 1944) = 0u;
    *(_OWORD *)(result + 1928) = 0u;
    *(_OWORD *)(result + 1912) = 0u;
    *(_OWORD *)(result + 1896) = 0u;
    *(_OWORD *)(result + 1880) = 0u;
    *(_OWORD *)(result + 1864) = 0u;
    *(_OWORD *)(result + 1848) = 0u;
    *(_OWORD *)(result + 1832) = 0u;
    *(_OWORD *)(result + 1816) = 0u;
    *(_OWORD *)(result + 1800) = 0u;
    *(_OWORD *)(result + 1784) = 0u;
    *(_OWORD *)(result + 1768) = 0u;
    *(_OWORD *)(result + 1752) = 0u;
    *(_OWORD *)(result + 1736) = 0u;
    *(_OWORD *)(result + 1720) = 0u;
    *(_OWORD *)(result + 1704) = 0u;
    *(_OWORD *)(result + 1688) = 0u;
    *(_OWORD *)(result + 1672) = 0u;
    *(_OWORD *)(result + 1656) = 0u;
    *(_OWORD *)(result + 1640) = 0u;
    *(_OWORD *)(result + 1624) = 0u;
    *(_OWORD *)(result + 1608) = 0u;
    *(_OWORD *)(result + 1592) = 0u;
    *(_OWORD *)(result + 1576) = 0u;
    *(_OWORD *)(result + 1560) = 0u;
    *(_OWORD *)(result + 1544) = 0u;
    *(_OWORD *)(result + 1528) = 0u;
    *(_OWORD *)(result + 1512) = 0u;
    *(_OWORD *)(result + 1496) = 0u;
    *(_OWORD *)(result + 1480) = 0u;
    *(_OWORD *)(result + 1464) = 0u;
    *(_OWORD *)(result + 1448) = 0u;
    *(_OWORD *)(result + 1432) = 0u;
    *(_OWORD *)(result + 1416) = 0u;
    *(_OWORD *)(result + 1400) = 0u;
    *(_OWORD *)(result + 1384) = 0u;
    *(_OWORD *)(result + 1368) = 0u;
    *(_OWORD *)(result + 1352) = 0u;
    *(_OWORD *)(result + 1336) = 0u;
    *(_OWORD *)(result + 1320) = 0u;
    *(_OWORD *)(result + 1304) = 0u;
    *(_OWORD *)(result + 1288) = 0u;
    *(_OWORD *)(result + 1272) = 0u;
    *(_OWORD *)(result + 1256) = 0u;
    *(_OWORD *)(result + 1240) = 0u;
    *(_OWORD *)(result + 1224) = 0u;
    *(_OWORD *)(result + 1208) = 0u;
    *(_OWORD *)(result + 1192) = 0u;
    *(_OWORD *)(result + 1176) = 0u;
    *(_OWORD *)(result + 1160) = 0u;
    *(_OWORD *)(result + 1144) = 0u;
    *(_OWORD *)(result + 1128) = 0u;
    *(_OWORD *)(result + 1112) = 0u;
    *(_OWORD *)(result + 1096) = 0u;
    *(_OWORD *)(result + 1080) = 0u;
    *(_OWORD *)(result + 1064) = 0u;
    *(_OWORD *)(result + 1048) = 0u;
    *(_OWORD *)(result + 1032) = 0u;
    *(_OWORD *)(result + 1016) = 0u;
    *(_OWORD *)(result + 1000) = 0u;
    *(_OWORD *)(result + 984) = 0u;
    *(_OWORD *)(result + 968) = 0u;
    *(_OWORD *)(result + 952) = 0u;
    *(_OWORD *)(result + 936) = 0u;
    *(_OWORD *)(result + 920) = 0u;
    *(_OWORD *)(result + 904) = 0u;
    *(_OWORD *)(result + 888) = 0u;
    *(_OWORD *)(result + 872) = 0u;
    *(_OWORD *)(result + 856) = 0u;
    *(_OWORD *)(result + 840) = 0u;
    *(_OWORD *)(result + 824) = 0u;
    *(_OWORD *)(result + 808) = 0u;
    *(_OWORD *)(result + 792) = 0u;
    *(_OWORD *)(result + 776) = 0u;
    *(_OWORD *)(result + 760) = 0u;
    *(_OWORD *)(result + 744) = 0u;
    *(_OWORD *)(result + 728) = 0u;
    *(_OWORD *)(result + 712) = 0u;
    *(_OWORD *)(result + 696) = 0u;
    *(_OWORD *)(result + 680) = 0u;
    *(_OWORD *)(result + 664) = 0u;
    *(_OWORD *)(result + 648) = 0u;
    *(_OWORD *)(result + 632) = 0u;
    *(_OWORD *)(result + 616) = 0u;
    *(_OWORD *)(result + 600) = 0u;
    *(_OWORD *)(result + 584) = 0u;
    *(_OWORD *)(result + 568) = 0u;
    *(_OWORD *)(result + 552) = 0u;
    *(_OWORD *)(result + 536) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 3816) = v3;
  return result;
}

void type metadata accessor for apple80211_awdl_low_latency_traffic(uint64_t a1)
{
  sub_1000122B4(a1, &qword_10040C430, (uint64_t)&unk_1003DBD38);
}

void type metadata accessor for apple80211_awdl_d2d_migration_statistics(uint64_t a1)
{
  sub_1000122B4(a1, &qword_100404990, (uint64_t)&unk_1003DBDB8);
}

__n128 initializeWithTake for NANAttribute.Mesh(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

void type metadata accessor for apple80211_awdl_services(uint64_t a1)
{
  sub_1000122B4(a1, &qword_100404998, (uint64_t)&unk_1003DBE50);
}

void *sub_10001D230(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x188uLL);
}

uint64_t sub_10001D238(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 392))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_10001D258(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 392) = v3;
  return result;
}

void type metadata accessor for apple80211_awdl_srv_statistics(uint64_t a1)
{
  sub_1000122B4(a1, &qword_1004049A0, (uint64_t)&unk_1003DBEE0);
}

void type metadata accessor for apple80211_awdl_state_statistics(uint64_t a1)
{
  sub_1000122B4(a1, &qword_1004049A8, (uint64_t)&unk_1003DBF68);
}

void type metadata accessor for apple80211_awdl_info_ext(uint64_t a1)
{
  sub_1000122B4(a1, &qword_1004049B0, (uint64_t)&unk_1003DBF90);
}

void type metadata accessor for awdlStrategy(uint64_t a1)
{
  sub_1000122B4(a1, &qword_1004049B8, (uint64_t)&unk_1003DBFB8);
}

void type metadata accessor for in6_addrlifetime(uint64_t a1)
{
  sub_1000122B4(a1, &qword_1004049C0, (uint64_t)&unk_1003DC038);
}

void type metadata accessor for sockaddr_in6(uint64_t a1)
{
  sub_1000122B4(a1, &qword_1004049C8, (uint64_t)&unk_1003DC0C0);
}

void *sub_10001D360(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x110uLL);
}

uint64_t sub_10001D368(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 272))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_10001D388(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 264) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 272) = v3;
  return result;
}

void type metadata accessor for in6_ifreq.__Unnamed_union_ifr_ifru(uint64_t a1)
{
  sub_1000122B4(a1, &qword_1004049D0, (uint64_t)&unk_1003DC150);
}

void type metadata accessor for ifreq.__Unnamed_union_ifr_ifru(uint64_t a1)
{
  sub_1000122B4(a1, &qword_1004049D8, (uint64_t)&unk_1003DC1C8);
}

void type metadata accessor for apple80211_nan_device_state(uint64_t a1)
{
  sub_1000122B4(a1, &qword_1004049E0, (uint64_t)&unk_1003DC1E8);
}

void type metadata accessor for apple80211_nan_device_role(uint64_t a1)
{
  sub_1000122B4(a1, &qword_1004049E8, (uint64_t)&unk_1003DC210);
}

void *sub_10001D448(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x802uLL);
}

uint64_t sub_10001D450(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 2050))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_10001D470(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 2040) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 2024) = 0u;
    *(_OWORD *)(result + 2008) = 0u;
    *(_OWORD *)(result + 1992) = 0u;
    *(_OWORD *)(result + 1976) = 0u;
    *(_OWORD *)(result + 1960) = 0u;
    *(_OWORD *)(result + 1944) = 0u;
    *(_OWORD *)(result + 1928) = 0u;
    *(_OWORD *)(result + 1912) = 0u;
    *(_OWORD *)(result + 1896) = 0u;
    *(_OWORD *)(result + 1880) = 0u;
    *(_OWORD *)(result + 1864) = 0u;
    *(_OWORD *)(result + 1848) = 0u;
    *(_OWORD *)(result + 1832) = 0u;
    *(_OWORD *)(result + 1816) = 0u;
    *(_OWORD *)(result + 1800) = 0u;
    *(_OWORD *)(result + 1784) = 0u;
    *(_OWORD *)(result + 1768) = 0u;
    *(_OWORD *)(result + 1752) = 0u;
    *(_OWORD *)(result + 1736) = 0u;
    *(_OWORD *)(result + 1720) = 0u;
    *(_OWORD *)(result + 1704) = 0u;
    *(_OWORD *)(result + 1688) = 0u;
    *(_OWORD *)(result + 1672) = 0u;
    *(_OWORD *)(result + 1656) = 0u;
    *(_OWORD *)(result + 1640) = 0u;
    *(_OWORD *)(result + 1624) = 0u;
    *(_OWORD *)(result + 1608) = 0u;
    *(_OWORD *)(result + 1592) = 0u;
    *(_OWORD *)(result + 1576) = 0u;
    *(_OWORD *)(result + 1560) = 0u;
    *(_OWORD *)(result + 1544) = 0u;
    *(_OWORD *)(result + 1528) = 0u;
    *(_OWORD *)(result + 1512) = 0u;
    *(_OWORD *)(result + 1496) = 0u;
    *(_OWORD *)(result + 1480) = 0u;
    *(_OWORD *)(result + 1464) = 0u;
    *(_OWORD *)(result + 1448) = 0u;
    *(_OWORD *)(result + 1432) = 0u;
    *(_OWORD *)(result + 1416) = 0u;
    *(_OWORD *)(result + 1400) = 0u;
    *(_OWORD *)(result + 1384) = 0u;
    *(_OWORD *)(result + 1368) = 0u;
    *(_OWORD *)(result + 1352) = 0u;
    *(_OWORD *)(result + 1336) = 0u;
    *(_OWORD *)(result + 1320) = 0u;
    *(_OWORD *)(result + 1304) = 0u;
    *(_OWORD *)(result + 1288) = 0u;
    *(_OWORD *)(result + 1272) = 0u;
    *(_OWORD *)(result + 1256) = 0u;
    *(_OWORD *)(result + 1240) = 0u;
    *(_OWORD *)(result + 1224) = 0u;
    *(_OWORD *)(result + 1208) = 0u;
    *(_OWORD *)(result + 1192) = 0u;
    *(_OWORD *)(result + 1176) = 0u;
    *(_OWORD *)(result + 1160) = 0u;
    *(_OWORD *)(result + 1144) = 0u;
    *(_OWORD *)(result + 1128) = 0u;
    *(_OWORD *)(result + 1112) = 0u;
    *(_OWORD *)(result + 1096) = 0u;
    *(_OWORD *)(result + 1080) = 0u;
    *(_OWORD *)(result + 1064) = 0u;
    *(_OWORD *)(result + 1048) = 0u;
    *(_OWORD *)(result + 1032) = 0u;
    *(_OWORD *)(result + 1016) = 0u;
    *(_OWORD *)(result + 1000) = 0u;
    *(_OWORD *)(result + 984) = 0u;
    *(_OWORD *)(result + 968) = 0u;
    *(_OWORD *)(result + 952) = 0u;
    *(_OWORD *)(result + 936) = 0u;
    *(_OWORD *)(result + 920) = 0u;
    *(_OWORD *)(result + 904) = 0u;
    *(_OWORD *)(result + 888) = 0u;
    *(_OWORD *)(result + 872) = 0u;
    *(_OWORD *)(result + 856) = 0u;
    *(_OWORD *)(result + 840) = 0u;
    *(_OWORD *)(result + 824) = 0u;
    *(_OWORD *)(result + 808) = 0u;
    *(_OWORD *)(result + 792) = 0u;
    *(_OWORD *)(result + 776) = 0u;
    *(_OWORD *)(result + 760) = 0u;
    *(_OWORD *)(result + 744) = 0u;
    *(_OWORD *)(result + 728) = 0u;
    *(_OWORD *)(result + 712) = 0u;
    *(_OWORD *)(result + 696) = 0u;
    *(_OWORD *)(result + 680) = 0u;
    *(_OWORD *)(result + 664) = 0u;
    *(_OWORD *)(result + 648) = 0u;
    *(_OWORD *)(result + 632) = 0u;
    *(_OWORD *)(result + 616) = 0u;
    *(_OWORD *)(result + 600) = 0u;
    *(_OWORD *)(result + 584) = 0u;
    *(_OWORD *)(result + 568) = 0u;
    *(_OWORD *)(result + 552) = 0u;
    *(_OWORD *)(result + 536) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_WORD *)(result + 2048) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 2050) = v3;
  return result;
}

void type metadata accessor for apple80211_nan_service_info(uint64_t a1)
{
  sub_1000122B4(a1, &qword_1004049F0, (uint64_t)&unk_1003DC290);
}

void type metadata accessor for apple80211_nan_data_path_end_reason(uint64_t a1)
{
  sub_1000122B4(a1, &qword_1004049F8, (uint64_t)&unk_1003DC2B8);
}

void type metadata accessor for apple80211_nan_dp_host_assist_reason(uint64_t a1)
{
  sub_1000122B4(a1, &qword_100404A00, (uint64_t)&unk_1003DC2E0);
}

void type metadata accessor for apple80211_nan_oob_act_frm_tx_status_reason_code(uint64_t a1)
{
  sub_1000122B4(a1, &qword_100404A08, (uint64_t)&unk_1003DC308);
}

void type metadata accessor for apple80211_nan_oob_act_frm_tx_result(uint64_t a1)
{
  sub_1000122B4(a1, &qword_100404A10, (uint64_t)&unk_1003DC330);
}

void *sub_10001D720(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x3C2uLL);
}

uint64_t sub_10001D728(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 962))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_10001D748(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 952) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 936) = 0u;
    *(_OWORD *)(result + 920) = 0u;
    *(_OWORD *)(result + 904) = 0u;
    *(_WORD *)(result + 960) = 0;
    *(_OWORD *)(result + 888) = 0u;
    *(_OWORD *)(result + 872) = 0u;
    *(_OWORD *)(result + 856) = 0u;
    *(_OWORD *)(result + 840) = 0u;
    *(_OWORD *)(result + 824) = 0u;
    *(_OWORD *)(result + 808) = 0u;
    *(_OWORD *)(result + 792) = 0u;
    *(_OWORD *)(result + 776) = 0u;
    *(_OWORD *)(result + 760) = 0u;
    *(_OWORD *)(result + 744) = 0u;
    *(_OWORD *)(result + 728) = 0u;
    *(_OWORD *)(result + 712) = 0u;
    *(_OWORD *)(result + 696) = 0u;
    *(_OWORD *)(result + 680) = 0u;
    *(_OWORD *)(result + 664) = 0u;
    *(_OWORD *)(result + 648) = 0u;
    *(_OWORD *)(result + 632) = 0u;
    *(_OWORD *)(result + 616) = 0u;
    *(_OWORD *)(result + 600) = 0u;
    *(_OWORD *)(result + 584) = 0u;
    *(_OWORD *)(result + 568) = 0u;
    *(_OWORD *)(result + 552) = 0u;
    *(_OWORD *)(result + 536) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 962) = v3;
  return result;
}

void type metadata accessor for apple80211_nan_oob_act_frm_payload(uint64_t a1)
{
  sub_1000122B4(a1, &qword_100404A18, (uint64_t)&unk_1003DC3B0);
}

void type metadata accessor for apple80211_nan_device_info(uint64_t a1)
{
  sub_1000122B4(a1, &qword_100404A20, (uint64_t)&unk_1003DC430);
}

void *sub_10001D89C(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0xF00uLL);
}

uint64_t sub_10001D8A4(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 3840))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_10001D8C4(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 3832) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 3816) = 0u;
    *(_OWORD *)(result + 3800) = 0u;
    *(_OWORD *)(result + 3784) = 0u;
    *(_OWORD *)(result + 3768) = 0u;
    *(_OWORD *)(result + 3752) = 0u;
    *(_OWORD *)(result + 3736) = 0u;
    *(_OWORD *)(result + 3720) = 0u;
    *(_OWORD *)(result + 3704) = 0u;
    *(_OWORD *)(result + 3688) = 0u;
    *(_OWORD *)(result + 3672) = 0u;
    *(_OWORD *)(result + 3656) = 0u;
    *(_OWORD *)(result + 3640) = 0u;
    *(_OWORD *)(result + 3624) = 0u;
    *(_OWORD *)(result + 3608) = 0u;
    *(_OWORD *)(result + 3592) = 0u;
    *(_OWORD *)(result + 3576) = 0u;
    *(_OWORD *)(result + 3560) = 0u;
    *(_OWORD *)(result + 3544) = 0u;
    *(_OWORD *)(result + 3528) = 0u;
    *(_OWORD *)(result + 3512) = 0u;
    *(_OWORD *)(result + 3496) = 0u;
    *(_OWORD *)(result + 3480) = 0u;
    *(_OWORD *)(result + 3464) = 0u;
    *(_OWORD *)(result + 3448) = 0u;
    *(_OWORD *)(result + 3432) = 0u;
    *(_OWORD *)(result + 3416) = 0u;
    *(_OWORD *)(result + 3400) = 0u;
    *(_OWORD *)(result + 3384) = 0u;
    *(_OWORD *)(result + 3368) = 0u;
    *(_OWORD *)(result + 3352) = 0u;
    *(_OWORD *)(result + 3336) = 0u;
    *(_OWORD *)(result + 3320) = 0u;
    *(_OWORD *)(result + 3304) = 0u;
    *(_OWORD *)(result + 3288) = 0u;
    *(_OWORD *)(result + 3272) = 0u;
    *(_OWORD *)(result + 3256) = 0u;
    *(_OWORD *)(result + 3240) = 0u;
    *(_OWORD *)(result + 3224) = 0u;
    *(_OWORD *)(result + 3208) = 0u;
    *(_OWORD *)(result + 3192) = 0u;
    *(_OWORD *)(result + 3176) = 0u;
    *(_OWORD *)(result + 3160) = 0u;
    *(_OWORD *)(result + 3144) = 0u;
    *(_OWORD *)(result + 3128) = 0u;
    *(_OWORD *)(result + 3112) = 0u;
    *(_OWORD *)(result + 3096) = 0u;
    *(_OWORD *)(result + 3080) = 0u;
    *(_OWORD *)(result + 3064) = 0u;
    *(_OWORD *)(result + 3048) = 0u;
    *(_OWORD *)(result + 3032) = 0u;
    *(_OWORD *)(result + 3016) = 0u;
    *(_OWORD *)(result + 3000) = 0u;
    *(_OWORD *)(result + 2984) = 0u;
    *(_OWORD *)(result + 2968) = 0u;
    *(_OWORD *)(result + 2952) = 0u;
    *(_OWORD *)(result + 2936) = 0u;
    *(_OWORD *)(result + 2920) = 0u;
    *(_OWORD *)(result + 2904) = 0u;
    *(_OWORD *)(result + 2888) = 0u;
    *(_OWORD *)(result + 2872) = 0u;
    *(_OWORD *)(result + 2856) = 0u;
    *(_OWORD *)(result + 2840) = 0u;
    *(_OWORD *)(result + 2824) = 0u;
    *(_OWORD *)(result + 2808) = 0u;
    *(_OWORD *)(result + 2792) = 0u;
    *(_OWORD *)(result + 2776) = 0u;
    *(_OWORD *)(result + 2760) = 0u;
    *(_OWORD *)(result + 2744) = 0u;
    *(_OWORD *)(result + 2728) = 0u;
    *(_OWORD *)(result + 2712) = 0u;
    *(_OWORD *)(result + 2696) = 0u;
    *(_OWORD *)(result + 2680) = 0u;
    *(_OWORD *)(result + 2664) = 0u;
    *(_OWORD *)(result + 2648) = 0u;
    *(_OWORD *)(result + 2632) = 0u;
    *(_OWORD *)(result + 2616) = 0u;
    *(_OWORD *)(result + 2600) = 0u;
    *(_OWORD *)(result + 2584) = 0u;
    *(_OWORD *)(result + 2568) = 0u;
    *(_OWORD *)(result + 2552) = 0u;
    *(_OWORD *)(result + 2536) = 0u;
    *(_OWORD *)(result + 2520) = 0u;
    *(_OWORD *)(result + 2504) = 0u;
    *(_OWORD *)(result + 2488) = 0u;
    *(_OWORD *)(result + 2472) = 0u;
    *(_OWORD *)(result + 2456) = 0u;
    *(_OWORD *)(result + 2440) = 0u;
    *(_OWORD *)(result + 2424) = 0u;
    *(_OWORD *)(result + 2408) = 0u;
    *(_OWORD *)(result + 2392) = 0u;
    *(_OWORD *)(result + 2376) = 0u;
    *(_OWORD *)(result + 2360) = 0u;
    *(_OWORD *)(result + 2344) = 0u;
    *(_OWORD *)(result + 2328) = 0u;
    *(_OWORD *)(result + 2312) = 0u;
    *(_OWORD *)(result + 2296) = 0u;
    *(_OWORD *)(result + 2280) = 0u;
    *(_OWORD *)(result + 2264) = 0u;
    *(_OWORD *)(result + 2248) = 0u;
    *(_OWORD *)(result + 2232) = 0u;
    *(_OWORD *)(result + 2216) = 0u;
    *(_OWORD *)(result + 2200) = 0u;
    *(_OWORD *)(result + 2184) = 0u;
    *(_OWORD *)(result + 2168) = 0u;
    *(_OWORD *)(result + 2152) = 0u;
    *(_OWORD *)(result + 2136) = 0u;
    *(_OWORD *)(result + 2120) = 0u;
    *(_OWORD *)(result + 2104) = 0u;
    *(_OWORD *)(result + 2088) = 0u;
    *(_OWORD *)(result + 2072) = 0u;
    *(_OWORD *)(result + 2056) = 0u;
    *(_OWORD *)(result + 2040) = 0u;
    *(_OWORD *)(result + 2024) = 0u;
    *(_OWORD *)(result + 2008) = 0u;
    *(_OWORD *)(result + 1992) = 0u;
    *(_OWORD *)(result + 1976) = 0u;
    *(_OWORD *)(result + 1960) = 0u;
    *(_OWORD *)(result + 1944) = 0u;
    *(_OWORD *)(result + 1928) = 0u;
    *(_OWORD *)(result + 1912) = 0u;
    *(_OWORD *)(result + 1896) = 0u;
    *(_OWORD *)(result + 1880) = 0u;
    *(_OWORD *)(result + 1864) = 0u;
    *(_OWORD *)(result + 1848) = 0u;
    *(_OWORD *)(result + 1832) = 0u;
    *(_OWORD *)(result + 1816) = 0u;
    *(_OWORD *)(result + 1800) = 0u;
    *(_OWORD *)(result + 1784) = 0u;
    *(_OWORD *)(result + 1768) = 0u;
    *(_OWORD *)(result + 1752) = 0u;
    *(_OWORD *)(result + 1736) = 0u;
    *(_OWORD *)(result + 1720) = 0u;
    *(_OWORD *)(result + 1704) = 0u;
    *(_OWORD *)(result + 1688) = 0u;
    *(_OWORD *)(result + 1672) = 0u;
    *(_OWORD *)(result + 1656) = 0u;
    *(_OWORD *)(result + 1640) = 0u;
    *(_OWORD *)(result + 1624) = 0u;
    *(_OWORD *)(result + 1608) = 0u;
    *(_OWORD *)(result + 1592) = 0u;
    *(_OWORD *)(result + 1576) = 0u;
    *(_OWORD *)(result + 1560) = 0u;
    *(_OWORD *)(result + 1544) = 0u;
    *(_OWORD *)(result + 1528) = 0u;
    *(_OWORD *)(result + 1512) = 0u;
    *(_OWORD *)(result + 1496) = 0u;
    *(_OWORD *)(result + 1480) = 0u;
    *(_OWORD *)(result + 1464) = 0u;
    *(_OWORD *)(result + 1448) = 0u;
    *(_OWORD *)(result + 1432) = 0u;
    *(_OWORD *)(result + 1416) = 0u;
    *(_OWORD *)(result + 1400) = 0u;
    *(_OWORD *)(result + 1384) = 0u;
    *(_OWORD *)(result + 1368) = 0u;
    *(_OWORD *)(result + 1352) = 0u;
    *(_OWORD *)(result + 1336) = 0u;
    *(_OWORD *)(result + 1320) = 0u;
    *(_OWORD *)(result + 1304) = 0u;
    *(_OWORD *)(result + 1288) = 0u;
    *(_OWORD *)(result + 1272) = 0u;
    *(_OWORD *)(result + 1256) = 0u;
    *(_OWORD *)(result + 1240) = 0u;
    *(_OWORD *)(result + 1224) = 0u;
    *(_OWORD *)(result + 1208) = 0u;
    *(_OWORD *)(result + 1192) = 0u;
    *(_OWORD *)(result + 1176) = 0u;
    *(_OWORD *)(result + 1160) = 0u;
    *(_OWORD *)(result + 1144) = 0u;
    *(_OWORD *)(result + 1128) = 0u;
    *(_OWORD *)(result + 1112) = 0u;
    *(_OWORD *)(result + 1096) = 0u;
    *(_OWORD *)(result + 1080) = 0u;
    *(_OWORD *)(result + 1064) = 0u;
    *(_OWORD *)(result + 1048) = 0u;
    *(_OWORD *)(result + 1032) = 0u;
    *(_OWORD *)(result + 1016) = 0u;
    *(_OWORD *)(result + 1000) = 0u;
    *(_OWORD *)(result + 984) = 0u;
    *(_OWORD *)(result + 968) = 0u;
    *(_OWORD *)(result + 952) = 0u;
    *(_OWORD *)(result + 936) = 0u;
    *(_OWORD *)(result + 920) = 0u;
    *(_OWORD *)(result + 904) = 0u;
    *(_OWORD *)(result + 888) = 0u;
    *(_OWORD *)(result + 872) = 0u;
    *(_OWORD *)(result + 856) = 0u;
    *(_OWORD *)(result + 840) = 0u;
    *(_OWORD *)(result + 824) = 0u;
    *(_OWORD *)(result + 808) = 0u;
    *(_OWORD *)(result + 792) = 0u;
    *(_OWORD *)(result + 776) = 0u;
    *(_OWORD *)(result + 760) = 0u;
    *(_OWORD *)(result + 744) = 0u;
    *(_OWORD *)(result + 728) = 0u;
    *(_OWORD *)(result + 712) = 0u;
    *(_OWORD *)(result + 696) = 0u;
    *(_OWORD *)(result + 680) = 0u;
    *(_OWORD *)(result + 664) = 0u;
    *(_OWORD *)(result + 648) = 0u;
    *(_OWORD *)(result + 632) = 0u;
    *(_OWORD *)(result + 616) = 0u;
    *(_OWORD *)(result + 600) = 0u;
    *(_OWORD *)(result + 584) = 0u;
    *(_OWORD *)(result + 568) = 0u;
    *(_OWORD *)(result + 552) = 0u;
    *(_OWORD *)(result + 536) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 3840) = v3;
  return result;
}

void type metadata accessor for apple80211_nan_low_latency_peer_traffic_statistics(uint64_t a1)
{
  sub_1000122B4(a1, &qword_100404A28, (uint64_t)&unk_1003DC4F0);
}

void *sub_10001DCFC(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x588uLL);
}

uint64_t sub_10001DD04(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 1416))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_10001DD24(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 1384) = 0u;
    *(_OWORD *)(result + 1368) = 0u;
    *(_OWORD *)(result + 1352) = 0u;
    *(_OWORD *)(result + 1336) = 0u;
    *(_OWORD *)(result + 1320) = 0u;
    *(_OWORD *)(result + 1304) = 0u;
    *(_OWORD *)(result + 1288) = 0u;
    *(_OWORD *)(result + 1400) = 0u;
    *(_OWORD *)(result + 1272) = 0u;
    *(_OWORD *)(result + 1256) = 0u;
    *(_OWORD *)(result + 1240) = 0u;
    *(_OWORD *)(result + 1224) = 0u;
    *(_OWORD *)(result + 1208) = 0u;
    *(_OWORD *)(result + 1192) = 0u;
    *(_OWORD *)(result + 1176) = 0u;
    *(_OWORD *)(result + 1160) = 0u;
    *(_OWORD *)(result + 1144) = 0u;
    *(_OWORD *)(result + 1128) = 0u;
    *(_OWORD *)(result + 1112) = 0u;
    *(_OWORD *)(result + 1096) = 0u;
    *(_OWORD *)(result + 1080) = 0u;
    *(_OWORD *)(result + 1064) = 0u;
    *(_OWORD *)(result + 1048) = 0u;
    *(_OWORD *)(result + 1032) = 0u;
    *(_OWORD *)(result + 1016) = 0u;
    *(_OWORD *)(result + 1000) = 0u;
    *(_OWORD *)(result + 984) = 0u;
    *(_OWORD *)(result + 968) = 0u;
    *(_OWORD *)(result + 952) = 0u;
    *(_OWORD *)(result + 936) = 0u;
    *(_OWORD *)(result + 920) = 0u;
    *(_OWORD *)(result + 904) = 0u;
    *(_OWORD *)(result + 888) = 0u;
    *(_OWORD *)(result + 872) = 0u;
    *(_OWORD *)(result + 856) = 0u;
    *(_OWORD *)(result + 840) = 0u;
    *(_OWORD *)(result + 824) = 0u;
    *(_OWORD *)(result + 808) = 0u;
    *(_OWORD *)(result + 792) = 0u;
    *(_OWORD *)(result + 776) = 0u;
    *(_OWORD *)(result + 760) = 0u;
    *(_OWORD *)(result + 744) = 0u;
    *(_OWORD *)(result + 728) = 0u;
    *(_OWORD *)(result + 712) = 0u;
    *(_OWORD *)(result + 696) = 0u;
    *(_OWORD *)(result + 680) = 0u;
    *(_OWORD *)(result + 664) = 0u;
    *(_OWORD *)(result + 648) = 0u;
    *(_OWORD *)(result + 632) = 0u;
    *(_OWORD *)(result + 616) = 0u;
    *(_OWORD *)(result + 600) = 0u;
    *(_OWORD *)(result + 584) = 0u;
    *(_OWORD *)(result + 568) = 0u;
    *(_OWORD *)(result + 552) = 0u;
    *(_OWORD *)(result + 536) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 1416) = v3;
  return result;
}

void type metadata accessor for apple80211_awdl_low_latency_traffic_reduced(uint64_t a1)
{
  sub_1000122B4(a1, &qword_100404A30, (uint64_t)&unk_1003DC580);
}

__n128 sub_10001DED8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __n128 result;
  __int128 v8;
  __int128 v9;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  v4 = a2[3];
  v5 = a2[4];
  v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  result = (__n128)a2[7];
  v8 = a2[8];
  v9 = a2[10];
  *(_OWORD *)(a1 + 144) = a2[9];
  *(_OWORD *)(a1 + 160) = v9;
  *(__n128 *)(a1 + 112) = result;
  *(_OWORD *)(a1 + 128) = v8;
  return result;
}

uint64_t sub_10001DF0C(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && a1[176])
    return (*(_DWORD *)a1 + 255);
  v3 = *a1;
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t sub_10001DF60(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 168) = 0;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 176) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 176) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 1;
  }
  return result;
}

void type metadata accessor for apple80211_awdl_low_latency_configs(uint64_t a1)
{
  sub_1000122B4(a1, &qword_100404A38, (uint64_t)&unk_1003DC600);
}

void type metadata accessor for airplayStats_histogramBin(uint64_t a1)
{
  sub_1000122B4(a1, &qword_100404A40, (uint64_t)&unk_1003DC710);
}

void type metadata accessor for apple80211_p2p_airplay_statistics.__Unnamed_union_u(uint64_t a1)
{
  sub_1000122B4(a1, &qword_100404A48, (uint64_t)&unk_1003DC740);
}

void type metadata accessor for peerPresence(uint64_t a1)
{
  sub_1000122B4(a1, &qword_100404A50, (uint64_t)&unk_1003DC760);
}

void type metadata accessor for apple80211_awdl_stats_p2p_failure_reason(uint64_t a1)
{
  sub_1000122B4(a1, &qword_100404A58, (uint64_t)&unk_1003DC788);
}

void type metadata accessor for apple80211_chip_reset_state(uint64_t a1)
{
  sub_1000122B4(a1, &qword_100404A60, (uint64_t)&unk_1003DC7B0);
}

void type metadata accessor for apple80211_join_substate_info(uint64_t a1)
{
  sub_1000122B4(a1, &qword_100404A68, (uint64_t)&unk_1003DC830);
}

uint64_t sub_10001E05C()
{
  return sub_100011DE4(&qword_100404A70, (uint64_t (*)(uint64_t))type metadata accessor for SCNetworkService, (uint64_t)&unk_100339990);
}

uint64_t sub_10001E088()
{
  return sub_100011DE4(&qword_100404A78, (uint64_t (*)(uint64_t))type metadata accessor for SCNetworkService, (uint64_t)&unk_1003399B8);
}

uint64_t getEnumTagSinglePayload for NANAttribute.Cluster(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

void type metadata accessor for sockaddr_in(uint64_t a1)
{
  sub_1000122B4(a1, &qword_100404A80, (uint64_t)&unk_1003DC8D0);
}

__n128 sub_10001E0E8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

void type metadata accessor for apple80211_nan_forced_disc_beacon_tx_availability_params(uint64_t a1)
{
  sub_1000122B4(a1, &qword_100404A88, (uint64_t)&unk_1003DC960);
}

void type metadata accessor for apple80211_nan_data_qos_types(uint64_t a1)
{
  sub_1000122B4(a1, &qword_100404A90, (uint64_t)&unk_1003DC988);
}

void *sub_10001E134(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0xE10uLL);
}

uint64_t sub_10001E13C(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 3600))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_10001E15C(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 3592) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 3576) = 0u;
    *(_OWORD *)(result + 3560) = 0u;
    *(_OWORD *)(result + 3544) = 0u;
    *(_OWORD *)(result + 3528) = 0u;
    *(_OWORD *)(result + 3512) = 0u;
    *(_OWORD *)(result + 3496) = 0u;
    *(_OWORD *)(result + 3480) = 0u;
    *(_OWORD *)(result + 3464) = 0u;
    *(_OWORD *)(result + 3448) = 0u;
    *(_OWORD *)(result + 3432) = 0u;
    *(_OWORD *)(result + 3416) = 0u;
    *(_OWORD *)(result + 3400) = 0u;
    *(_OWORD *)(result + 3384) = 0u;
    *(_OWORD *)(result + 3368) = 0u;
    *(_OWORD *)(result + 3352) = 0u;
    *(_OWORD *)(result + 3336) = 0u;
    *(_OWORD *)(result + 3320) = 0u;
    *(_OWORD *)(result + 3304) = 0u;
    *(_OWORD *)(result + 3288) = 0u;
    *(_OWORD *)(result + 3272) = 0u;
    *(_OWORD *)(result + 3256) = 0u;
    *(_OWORD *)(result + 3240) = 0u;
    *(_OWORD *)(result + 3224) = 0u;
    *(_OWORD *)(result + 3208) = 0u;
    *(_OWORD *)(result + 3192) = 0u;
    *(_OWORD *)(result + 3176) = 0u;
    *(_OWORD *)(result + 3160) = 0u;
    *(_OWORD *)(result + 3144) = 0u;
    *(_OWORD *)(result + 3128) = 0u;
    *(_OWORD *)(result + 3112) = 0u;
    *(_OWORD *)(result + 3096) = 0u;
    *(_OWORD *)(result + 3080) = 0u;
    *(_OWORD *)(result + 3064) = 0u;
    *(_OWORD *)(result + 3048) = 0u;
    *(_OWORD *)(result + 3032) = 0u;
    *(_OWORD *)(result + 3016) = 0u;
    *(_OWORD *)(result + 3000) = 0u;
    *(_OWORD *)(result + 2984) = 0u;
    *(_OWORD *)(result + 2968) = 0u;
    *(_OWORD *)(result + 2952) = 0u;
    *(_OWORD *)(result + 2936) = 0u;
    *(_OWORD *)(result + 2920) = 0u;
    *(_OWORD *)(result + 2904) = 0u;
    *(_OWORD *)(result + 2888) = 0u;
    *(_OWORD *)(result + 2872) = 0u;
    *(_OWORD *)(result + 2856) = 0u;
    *(_OWORD *)(result + 2840) = 0u;
    *(_OWORD *)(result + 2824) = 0u;
    *(_OWORD *)(result + 2808) = 0u;
    *(_OWORD *)(result + 2792) = 0u;
    *(_OWORD *)(result + 2776) = 0u;
    *(_OWORD *)(result + 2760) = 0u;
    *(_OWORD *)(result + 2744) = 0u;
    *(_OWORD *)(result + 2728) = 0u;
    *(_OWORD *)(result + 2712) = 0u;
    *(_OWORD *)(result + 2696) = 0u;
    *(_OWORD *)(result + 2680) = 0u;
    *(_OWORD *)(result + 2664) = 0u;
    *(_OWORD *)(result + 2648) = 0u;
    *(_OWORD *)(result + 2632) = 0u;
    *(_OWORD *)(result + 2616) = 0u;
    *(_OWORD *)(result + 2600) = 0u;
    *(_OWORD *)(result + 2584) = 0u;
    *(_OWORD *)(result + 2568) = 0u;
    *(_OWORD *)(result + 2552) = 0u;
    *(_OWORD *)(result + 2536) = 0u;
    *(_OWORD *)(result + 2520) = 0u;
    *(_OWORD *)(result + 2504) = 0u;
    *(_OWORD *)(result + 2488) = 0u;
    *(_OWORD *)(result + 2472) = 0u;
    *(_OWORD *)(result + 2456) = 0u;
    *(_OWORD *)(result + 2440) = 0u;
    *(_OWORD *)(result + 2424) = 0u;
    *(_OWORD *)(result + 2408) = 0u;
    *(_OWORD *)(result + 2392) = 0u;
    *(_OWORD *)(result + 2376) = 0u;
    *(_OWORD *)(result + 2360) = 0u;
    *(_OWORD *)(result + 2344) = 0u;
    *(_OWORD *)(result + 2328) = 0u;
    *(_OWORD *)(result + 2312) = 0u;
    *(_OWORD *)(result + 2296) = 0u;
    *(_OWORD *)(result + 2280) = 0u;
    *(_OWORD *)(result + 2264) = 0u;
    *(_OWORD *)(result + 2248) = 0u;
    *(_OWORD *)(result + 2232) = 0u;
    *(_OWORD *)(result + 2216) = 0u;
    *(_OWORD *)(result + 2200) = 0u;
    *(_OWORD *)(result + 2184) = 0u;
    *(_OWORD *)(result + 2168) = 0u;
    *(_OWORD *)(result + 2152) = 0u;
    *(_OWORD *)(result + 2136) = 0u;
    *(_OWORD *)(result + 2120) = 0u;
    *(_OWORD *)(result + 2104) = 0u;
    *(_OWORD *)(result + 2088) = 0u;
    *(_OWORD *)(result + 2072) = 0u;
    *(_OWORD *)(result + 2056) = 0u;
    *(_OWORD *)(result + 2040) = 0u;
    *(_OWORD *)(result + 2024) = 0u;
    *(_OWORD *)(result + 2008) = 0u;
    *(_OWORD *)(result + 1992) = 0u;
    *(_OWORD *)(result + 1976) = 0u;
    *(_OWORD *)(result + 1960) = 0u;
    *(_OWORD *)(result + 1944) = 0u;
    *(_OWORD *)(result + 1928) = 0u;
    *(_OWORD *)(result + 1912) = 0u;
    *(_OWORD *)(result + 1896) = 0u;
    *(_OWORD *)(result + 1880) = 0u;
    *(_OWORD *)(result + 1864) = 0u;
    *(_OWORD *)(result + 1848) = 0u;
    *(_OWORD *)(result + 1832) = 0u;
    *(_OWORD *)(result + 1816) = 0u;
    *(_OWORD *)(result + 1800) = 0u;
    *(_OWORD *)(result + 1784) = 0u;
    *(_OWORD *)(result + 1768) = 0u;
    *(_OWORD *)(result + 1752) = 0u;
    *(_OWORD *)(result + 1736) = 0u;
    *(_OWORD *)(result + 1720) = 0u;
    *(_OWORD *)(result + 1704) = 0u;
    *(_OWORD *)(result + 1688) = 0u;
    *(_OWORD *)(result + 1672) = 0u;
    *(_OWORD *)(result + 1656) = 0u;
    *(_OWORD *)(result + 1640) = 0u;
    *(_OWORD *)(result + 1624) = 0u;
    *(_OWORD *)(result + 1608) = 0u;
    *(_OWORD *)(result + 1592) = 0u;
    *(_OWORD *)(result + 1576) = 0u;
    *(_OWORD *)(result + 1560) = 0u;
    *(_OWORD *)(result + 1544) = 0u;
    *(_OWORD *)(result + 1528) = 0u;
    *(_OWORD *)(result + 1512) = 0u;
    *(_OWORD *)(result + 1496) = 0u;
    *(_OWORD *)(result + 1480) = 0u;
    *(_OWORD *)(result + 1464) = 0u;
    *(_OWORD *)(result + 1448) = 0u;
    *(_OWORD *)(result + 1432) = 0u;
    *(_OWORD *)(result + 1416) = 0u;
    *(_OWORD *)(result + 1400) = 0u;
    *(_OWORD *)(result + 1384) = 0u;
    *(_OWORD *)(result + 1368) = 0u;
    *(_OWORD *)(result + 1352) = 0u;
    *(_OWORD *)(result + 1336) = 0u;
    *(_OWORD *)(result + 1320) = 0u;
    *(_OWORD *)(result + 1304) = 0u;
    *(_OWORD *)(result + 1288) = 0u;
    *(_OWORD *)(result + 1272) = 0u;
    *(_OWORD *)(result + 1256) = 0u;
    *(_OWORD *)(result + 1240) = 0u;
    *(_OWORD *)(result + 1224) = 0u;
    *(_OWORD *)(result + 1208) = 0u;
    *(_OWORD *)(result + 1192) = 0u;
    *(_OWORD *)(result + 1176) = 0u;
    *(_OWORD *)(result + 1160) = 0u;
    *(_OWORD *)(result + 1144) = 0u;
    *(_OWORD *)(result + 1128) = 0u;
    *(_OWORD *)(result + 1112) = 0u;
    *(_OWORD *)(result + 1096) = 0u;
    *(_OWORD *)(result + 1080) = 0u;
    *(_OWORD *)(result + 1064) = 0u;
    *(_OWORD *)(result + 1048) = 0u;
    *(_OWORD *)(result + 1032) = 0u;
    *(_OWORD *)(result + 1016) = 0u;
    *(_OWORD *)(result + 1000) = 0u;
    *(_OWORD *)(result + 984) = 0u;
    *(_OWORD *)(result + 968) = 0u;
    *(_OWORD *)(result + 952) = 0u;
    *(_OWORD *)(result + 936) = 0u;
    *(_OWORD *)(result + 920) = 0u;
    *(_OWORD *)(result + 904) = 0u;
    *(_OWORD *)(result + 888) = 0u;
    *(_OWORD *)(result + 872) = 0u;
    *(_OWORD *)(result + 856) = 0u;
    *(_OWORD *)(result + 840) = 0u;
    *(_OWORD *)(result + 824) = 0u;
    *(_OWORD *)(result + 808) = 0u;
    *(_OWORD *)(result + 792) = 0u;
    *(_OWORD *)(result + 776) = 0u;
    *(_OWORD *)(result + 760) = 0u;
    *(_OWORD *)(result + 744) = 0u;
    *(_OWORD *)(result + 728) = 0u;
    *(_OWORD *)(result + 712) = 0u;
    *(_OWORD *)(result + 696) = 0u;
    *(_OWORD *)(result + 680) = 0u;
    *(_OWORD *)(result + 664) = 0u;
    *(_OWORD *)(result + 648) = 0u;
    *(_OWORD *)(result + 632) = 0u;
    *(_OWORD *)(result + 616) = 0u;
    *(_OWORD *)(result + 600) = 0u;
    *(_OWORD *)(result + 584) = 0u;
    *(_OWORD *)(result + 568) = 0u;
    *(_OWORD *)(result + 552) = 0u;
    *(_OWORD *)(result + 536) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 3600) = v3;
  return result;
}

void type metadata accessor for apple80211_awdl_low_latency_traffic_histograms(uint64_t a1)
{
  sub_1000122B4(a1, &qword_100404A98, (uint64_t)&unk_1003DCA08);
}

void type metadata accessor for apple80211_awdl_srv_info(uint64_t a1)
{
  sub_1000122B4(a1, &qword_100404AA0, (uint64_t)&unk_1003DCAC8);
}

void *sub_10001E568(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x4B0uLL);
}

uint64_t sub_10001E570(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 1200))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_10001E590(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 1192) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 1176) = 0u;
    *(_OWORD *)(result + 1160) = 0u;
    *(_OWORD *)(result + 1144) = 0u;
    *(_OWORD *)(result + 1128) = 0u;
    *(_OWORD *)(result + 1112) = 0u;
    *(_OWORD *)(result + 1096) = 0u;
    *(_OWORD *)(result + 1080) = 0u;
    *(_OWORD *)(result + 1064) = 0u;
    *(_OWORD *)(result + 1048) = 0u;
    *(_OWORD *)(result + 1032) = 0u;
    *(_OWORD *)(result + 1016) = 0u;
    *(_OWORD *)(result + 1000) = 0u;
    *(_OWORD *)(result + 984) = 0u;
    *(_OWORD *)(result + 968) = 0u;
    *(_OWORD *)(result + 952) = 0u;
    *(_OWORD *)(result + 936) = 0u;
    *(_OWORD *)(result + 920) = 0u;
    *(_OWORD *)(result + 904) = 0u;
    *(_OWORD *)(result + 888) = 0u;
    *(_OWORD *)(result + 872) = 0u;
    *(_OWORD *)(result + 856) = 0u;
    *(_OWORD *)(result + 840) = 0u;
    *(_OWORD *)(result + 824) = 0u;
    *(_OWORD *)(result + 808) = 0u;
    *(_OWORD *)(result + 792) = 0u;
    *(_OWORD *)(result + 776) = 0u;
    *(_OWORD *)(result + 760) = 0u;
    *(_OWORD *)(result + 744) = 0u;
    *(_OWORD *)(result + 728) = 0u;
    *(_OWORD *)(result + 712) = 0u;
    *(_OWORD *)(result + 696) = 0u;
    *(_OWORD *)(result + 680) = 0u;
    *(_OWORD *)(result + 664) = 0u;
    *(_OWORD *)(result + 648) = 0u;
    *(_OWORD *)(result + 632) = 0u;
    *(_OWORD *)(result + 616) = 0u;
    *(_OWORD *)(result + 600) = 0u;
    *(_OWORD *)(result + 584) = 0u;
    *(_OWORD *)(result + 568) = 0u;
    *(_OWORD *)(result + 552) = 0u;
    *(_OWORD *)(result + 536) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 1200) = v3;
  return result;
}

void type metadata accessor for apple80211_awdl_low_latency_traffic_histograms_reduced(uint64_t a1)
{
  sub_1000122B4(a1, &qword_100404AA8, (uint64_t)&unk_1003DCB50);
}

__n128 initializeWithCopy for AWDLStatistics.LowLatencyStatistics.Traffic.Counts(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __n128 result;
  __int128 v10;
  __int128 v11;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  v8 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v8;
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  result = *(__n128 *)(a2 + 160);
  v10 = *(_OWORD *)(a2 + 176);
  v11 = *(_OWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 176) = v10;
  *(_OWORD *)(a1 + 192) = v11;
  *(__n128 *)(a1 + 160) = result;
  return result;
}

uint64_t getEnumTagSinglePayload for AWDLStatistics.LowLatencyStatistics.Traffic.Counts(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 216))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for AWDLStatistics.LowLatencyStatistics.Traffic.Counts(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 216) = v3;
  return result;
}

void type metadata accessor for apple80211_awdl_low_latency_traffic_counts(uint64_t a1)
{
  sub_1000122B4(a1, &qword_100404AB0, (uint64_t)&unk_1003DCC10);
}

__n128 sub_10001E7E4(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 62) = *(_QWORD *)(a2 + 62);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t sub_10001E808(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 70))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_10001E828(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 68) = 0;
    *(_DWORD *)(result + 64) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 70) = v3;
  return result;
}

void type metadata accessor for apple80211_nan_availability_time_bmap(uint64_t a1)
{
  sub_1000122B4(a1, &qword_100404AB8, (uint64_t)&unk_1003DCCF8);
}

uint64_t OffloadedServices.init()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v6 = sub_1000166C8();
  v7 = Dictionary.init()(&type metadata for DNSRecords.Identifier, a1, v6);
  v8 = sub_10001670C();
  Dictionary.init()(&type metadata for DNSRecords.PTR, a2, v8);
  Dictionary.init()(&type metadata for DNSRecords.PTR, a3, v8);
  return v7;
}

unint64_t BonjourOffload.peersToInvalidate()()
{
  return sub_10001E9E0((uint64_t)_swiftEmptyArrayStorage);
}

unint64_t sub_10001E9E0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t result;
  char v15;
  _BYTE *v16;
  _QWORD *v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v1 = a1;
  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100012C44((uint64_t *)&unk_100404F20);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(v1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(v1);
    return (unint64_t)v4;
  }
  v21 = v1;
  v22 = v3 + 64;
  v6 = (unsigned __int8 *)(v1 + 32);
  swift_retain();
  while (1)
  {
    v7 = *v6;
    v8 = v6[1];
    v9 = v6[2];
    v10 = v6[3];
    v11 = v6[4];
    v12 = v6[5];
    v23 = v5;
    v24 = *((_QWORD *)v6 + 1);
    v13 = *((_QWORD *)v6 + 2);
    swift_bridgeObjectRetain(v13);
    result = sub_10002D884(v7 | (v8 << 8) | (v9 << 16) | (v10 << 24) | (v11 << 32) | (v12 << 40));
    if ((v15 & 1) != 0)
      break;
    *(_QWORD *)(v22 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v16 = (_BYTE *)(v4[6] + 6 * result);
    *v16 = v7;
    v16[1] = v8;
    v16[2] = v9;
    v16[3] = v10;
    v16[4] = v11;
    v16[5] = v12;
    v17 = (_QWORD *)(v4[7] + 16 * result);
    *v17 = v24;
    v17[1] = v13;
    v18 = v4[2];
    v19 = __OFADD__(v18, 1);
    v20 = v18 + 1;
    if (v19)
      goto LABEL_11;
    v6 += 24;
    v4[2] = v20;
    v5 = v23 - 1;
    if (v23 == 1)
    {
      swift_release(v4);
      v1 = v21;
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10001EB54(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100012C44(&qword_100404F00);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v3;
  }
  swift_retain();
  v5 = (uint64_t *)(a1 + 56);
  while (1)
  {
    v6 = *(v5 - 3);
    v7 = *(v5 - 2);
    v8 = *(v5 - 1);
    v9 = *v5;
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v9);
    result = sub_10000F988(v6, v7, (void (*)(_QWORD *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_10000FA14);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v12 = (uint64_t *)(v3[6] + 16 * result);
    *v12 = v6;
    v12[1] = v7;
    v13 = (_QWORD *)(v3[7] + 16 * result);
    *v13 = v8;
    v13[1] = v9;
    v14 = v3[2];
    v15 = __OFADD__(v14, 1);
    v16 = v14 + 1;
    if (v15)
      goto LABEL_11;
    v5 += 4;
    v3[2] = v16;
    if (!--v4)
    {
      swift_release(v3);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10001EC98(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_100012C44(&qword_100404EC0);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  v6 = v3 + 64;
  v7 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_100033B48(v7, (uint64_t)&v14, &qword_100404EC8);
    v8 = v14;
    result = sub_10002DB98(v14);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(_QWORD *)(v4[6] + 8 * result) = v8;
    result = (unint64_t)sub_100033A2C(&v15, (_OWORD *)(v4[7] + 32 * result));
    v11 = v4[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v4[2] = v13;
    v7 += 40;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10001EDC4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    v16 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v16);
    return (unint64_t)v4;
  }
  sub_100012C44((uint64_t *)&unk_100410330);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
    goto LABEL_9;
  v6 = v3 + 64;
  v17 = a1;
  v7 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_100033B48(v7, (uint64_t)&v18, &qword_100404EE0);
    v8 = v18;
    v9 = v19;
    result = sub_10000F988(v18, v19, (void (*)(_QWORD *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_10000FA14);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v12 = (uint64_t *)(v4[6] + 16 * result);
    *v12 = v8;
    v12[1] = v9;
    result = (unint64_t)sub_100033A2C(&v20, (_OWORD *)(v4[7] + 32 * result));
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_12;
    v4[2] = v15;
    v7 += 48;
    if (!--v5)
    {
      swift_release(v4);
      v16 = v17;
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_10001EF14(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t result;
  char v20;
  unint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 *v32;
  unsigned __int8 *v33;
  uint64_t v34;

  v2 = sub_100012C44(&qword_100404E90);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin();
  v33 = (unsigned __int8 *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
    v7 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    v28 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v28);
    return (unint64_t)v7;
  }
  sub_100012C44(&qword_100404E98);
  v6 = static _DictionaryStorage.allocate(capacity:)(v5);
  v7 = (_QWORD *)v6;
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
    goto LABEL_9;
  v32 = &v33[*(int *)(v2 + 48)];
  v9 = *(unsigned __int8 *)(v3 + 80);
  v29 = a1;
  v10 = a1 + ((v9 + 32) & ~v9);
  v30 = *(_QWORD *)(v3 + 72);
  v31 = v6 + 64;
  swift_retain();
  while (1)
  {
    v34 = v8;
    v11 = v33;
    sub_100033B48(v10, (uint64_t)v33, &qword_100404E90);
    v12 = *v11;
    v13 = v11[1];
    v14 = v11[2];
    v15 = v11[3];
    v16 = v11[4];
    v17 = v11[5];
    v18 = v11[6];
    result = sub_10002D7B4(v12 | (v13 << 8) | (v14 << 16) | (v15 << 24) | (v16 << 32) | (v17 << 40) | (v18 << 48));
    if ((v20 & 1) != 0)
      break;
    v21 = result;
    *(_QWORD *)(v31 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v22 = (_BYTE *)(v7[6] - result + 8 * result);
    *v22 = v12;
    v22[1] = v13;
    v22[2] = v14;
    v22[3] = v15;
    v22[4] = v16;
    v22[5] = v17;
    v22[6] = v18;
    v23 = v7[7];
    v24 = type metadata accessor for NANInternetSharingStatistics.Requester(0);
    result = sub_100033AC0((uint64_t)v32, v23 + *(_QWORD *)(*(_QWORD *)(v24 - 8) + 72) * v21, type metadata accessor for NANInternetSharingStatistics.Requester);
    v25 = v7[2];
    v26 = __OFADD__(v25, 1);
    v27 = v25 + 1;
    if (v26)
      goto LABEL_12;
    v7[2] = v27;
    v10 += v30;
    v8 = v34 - 1;
    if (v34 == 1)
    {
      swift_release(v7);
      v28 = v29;
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_10001F11C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t result;
  char v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v2 = sub_100012C44(&qword_100404E78);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin();
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
    v8 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    v23 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v23);
    return (unint64_t)v8;
  }
  sub_100012C44((uint64_t *)&unk_100404E80);
  v7 = static _DictionaryStorage.allocate(capacity:)(v6);
  v8 = (_QWORD *)v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
    goto LABEL_9;
  v10 = &v5[*(int *)(v2 + 48)];
  v11 = v7 + 64;
  v12 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v25 = a1;
  v13 = a1 + v12;
  v14 = *(_QWORD *)(v3 + 72);
  swift_retain(v7);
  while (1)
  {
    sub_100033B48(v13, (uint64_t)v5, &qword_100404E78);
    result = sub_10002DA48((uint64_t)v5);
    if ((v16 & 1) != 0)
      break;
    v17 = result;
    *(_QWORD *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v18 = v8[6];
    v19 = type metadata accessor for CodingUserInfoKey(0);
    (*(void (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v19 - 8) + 32))(v18 + *(_QWORD *)(*(_QWORD *)(v19 - 8) + 72) * v17, v5, v19);
    result = (unint64_t)sub_100033A2C(v10, (_OWORD *)(v8[7] + 32 * v17));
    v20 = v8[2];
    v21 = __OFADD__(v20, 1);
    v22 = v20 + 1;
    if (v21)
      goto LABEL_12;
    v8[2] = v22;
    v13 += v14;
    if (!--v9)
    {
      swift_release(v8);
      v23 = v25;
      goto LABEL_10;
    }
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

uint64_t sub_10001F2B8(unint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  void (*v16)(unint64_t, unint64_t);
  uint64_t (*v18)(unint64_t, unint64_t);
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t AssociatedConformanceWitness;
  uint64_t v27;
  unint64_t v28;
  __n128 v29;
  uint64_t (*v30)(unint64_t, unint64_t, __n128);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __n128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  __n128 v48;
  char *v49;
  uint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  uint8_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t WitnessTable;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  __n128 v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t (*v71)(unint64_t, unint64_t);
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;

  v5 = type metadata accessor for Logger(0);
  v74 = *(_QWORD *)(v5 - 8);
  v75 = v5;
  __chkstk_darwin();
  v7 = (char *)&v70 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, a2, a1, &protocol requirements base descriptor for BonjourOffload);
  v9 = type metadata accessor for Optional(0, AssociatedTypeWitness);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin();
  v12 = (char *)&v70 - v11;
  v13 = *(_QWORD *)(AssociatedTypeWitness - 8);
  __chkstk_darwin();
  v15 = (char *)&v70 - v14;
  v16 = *(void (**)(unint64_t, unint64_t))(a2 + 64);
  v76 = a1;
  v77 = v2;
  v16(a1, a2);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v12, 1, AssociatedTypeWitness) == 1)
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  v72 = v7;
  v73 = v13;
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v15, v12, AssociatedTypeWitness);
  v18 = *(uint64_t (**)(unint64_t, unint64_t))(a2 + 40);
  v19 = v76;
  v20 = v18(v76, a2);
  v22 = v21;
  v24 = v23;
  swift_bridgeObjectRelease(v25);
  swift_bridgeObjectRelease(v22);
  swift_bridgeObjectRelease(v24);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a2, v19, AssociatedTypeWitness, &protocol requirements base descriptor for BonjourOffload, &associated conformance descriptor for BonjourOffload.BonjourOffload.DiscoveryEngine: BonjourOffloadDiscoveryEngine);
  v27 = swift_getAssociatedTypeWitness(0, AssociatedConformanceWitness, AssociatedTypeWitness, &protocol requirements base descriptor for BonjourOffloadDiscoveryEngine);
  v28 = sub_1000166C8();
  LOBYTE(v27) = Dictionary.isEmpty.getter(v20, &type metadata for DNSRecords.Identifier, v27, v28);
  v29 = swift_bridgeObjectRelease(v20);
  if ((v27 & 1) != 0)
  {
    v30 = (uint64_t (*)(unint64_t, unint64_t, __n128))v18;
    v31 = ((uint64_t (*)(unint64_t, unint64_t, __n128))v18)(v19, a2, v29);
    v33 = v32;
    v35 = v34;
    v37 = v36;
    swift_bridgeObjectRelease(v31);
    swift_bridgeObjectRelease(v35);
    swift_bridgeObjectRelease(v37);
    v38 = *(_QWORD *)(v33 + 16);
    v39 = swift_bridgeObjectRelease(v33);
    if (!v38)
    {
      v40 = v30(v19, a2, v39);
      v42 = v41;
      v44 = v43;
      swift_bridgeObjectRelease(v45);
      swift_bridgeObjectRelease(v42);
      swift_bridgeObjectRelease(v40);
      v46 = swift_getAssociatedTypeWitness(0, AssociatedConformanceWitness, AssociatedTypeWitness, &protocol requirements base descriptor for BonjourOffloadDiscoveryEngine);
      v47 = sub_10001670C();
      LOBYTE(v46) = Dictionary.isEmpty.getter(v44, &type metadata for DNSRecords.PTR, v46, v47);
      v48 = swift_bridgeObjectRelease(v44);
      if ((v46 & 1) != 0)
      {
        v70 = v47;
        v71 = (uint64_t (*)(unint64_t, unint64_t))v30;
        v78 = v77;
        v49 = v72;
        v50 = (*(uint64_t (**)(unint64_t, __n128))(*(_QWORD *)(a2 + 8) + 8))(v19, v48);
        v51 = Logger.logObject.getter(v50);
        v52 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v51, v52))
        {
          v53 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v53 = 0;
          _os_log_impl((void *)&_mh_execute_header, v51, v52, "Stopping all datapaths because client removed all other services", v53, 2u);
          swift_slowDealloc(v53, -1, -1);
        }

        (*(void (**)(char *, uint64_t))(v74 + 8))(v49, v75);
        v54 = v71(v19, a2);
        v56 = v55;
        v58 = v57;
        v60 = v59;
        v61 = swift_getAssociatedTypeWitness(0, AssociatedConformanceWitness, AssociatedTypeWitness, &protocol requirements base descriptor for BonjourOffloadDiscoveryEngine);
        swift_bridgeObjectRelease(v58);
        swift_bridgeObjectRelease(v56);
        swift_bridgeObjectRelease(v54);
        v78 = v60;
        v62 = type metadata accessor for Dictionary.Values(0, &type metadata for DNSRecords.PTR, v61, v70);
        WitnessTable = swift_getWitnessTable((const char *)&protocol conformance descriptor for [A : B].Values, v62);
        v64 = Array.init<A>(_:)(&v78, v61, v62, WitnessTable);
        v78 = v64;
        __chkstk_darwin();
        *(&v70 - 4) = v19;
        *(&v70 - 3) = a2;
        *(&v70 - 2) = (unint64_t)v15;
        v65 = type metadata accessor for Array(0, v61);
        v66 = swift_getWitnessTable((const char *)&protocol conformance descriptor for [A], v65);
        Sequence.forEach(_:)(sub_100033B8C, &v70 - 6, v65, v66);
        v67 = swift_bridgeObjectRelease(v64);
        v68 = v77;
        v69 = (*(uint64_t (**)(unint64_t, unint64_t, __n128))(a2 + 72))(v19, a2, v67);
        __chkstk_darwin();
        *(&v70 - 4) = v19;
        *(&v70 - 3) = a2;
        *(&v70 - 2) = v68;
        sub_10001F87C((void (*)(int *))sub_100033BA8, (uint64_t)(&v70 - 6), v69);
        swift_bridgeObjectRelease(v69);
      }
    }
  }
  return (*(uint64_t (**)(char *, uint64_t))(v73 + 8))(v15, AssociatedTypeWitness);
}

uint64_t sub_10001F7CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, a4, a3, &protocol requirements base descriptor for BonjourOffload, &associated type descriptor for BonjourOffload.DiscoveryEngine);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a4, a3, AssociatedTypeWitness, &protocol requirements base descriptor for BonjourOffload, &associated conformance descriptor for BonjourOffload.BonjourOffload.DiscoveryEngine: BonjourOffloadDiscoveryEngine);
  v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 120);
  v10 = swift_checkMetadataState(0, AssociatedTypeWitness);
  return v9(a1, v10, AssociatedConformanceWitness);
}

uint64_t sub_10001F87C(void (*a1)(int *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t i;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  __int16 v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  __int16 v24;
  uint64_t v25;
  uint64_t v26;

  v6 = a3 + 64;
  v7 = 1 << *(_BYTE *)(a3 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & *(_QWORD *)(a3 + 64);
  v10 = (unint64_t)(v7 + 63) >> 6;
  result = swift_bridgeObjectRetain(a3);
  v12 = 0;
  if (!v9)
    goto LABEL_5;
LABEL_4:
  v13 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  for (i = v13 | (v12 << 6); ; i = __clz(__rbit64(v16)) + (v12 << 6))
  {
    v18 = *(_QWORD *)(a3 + 48) + 6 * i;
    v19 = *(_WORD *)(v18 + 4);
    v20 = (uint64_t *)(*(_QWORD *)(a3 + 56) + 16 * i);
    v21 = *v20;
    v22 = v20[1];
    v23 = *(_DWORD *)v18;
    v24 = v19;
    v25 = v21;
    v26 = v22;
    swift_bridgeObjectRetain(v22);
    a1(&v23);
    if (v3)
    {
      swift_release(a3);
      return swift_bridgeObjectRelease(v22);
    }
    result = swift_bridgeObjectRelease(v22);
    if (v9)
      goto LABEL_4;
LABEL_5:
    if (__OFADD__(v12++, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v12 >= v10)
      return swift_release(a3);
    v16 = *(_QWORD *)(v6 + 8 * v12);
    if (!v16)
      break;
LABEL_17:
    v9 = (v16 - 1) & v16;
  }
  v17 = v12 + 1;
  if (v12 + 1 >= v10)
    return swift_release(a3);
  v16 = *(_QWORD *)(v6 + 8 * v17);
  if (v16)
    goto LABEL_16;
  v17 = v12 + 2;
  if (v12 + 2 >= v10)
    return swift_release(a3);
  v16 = *(_QWORD *)(v6 + 8 * v17);
  if (v16)
    goto LABEL_16;
  v17 = v12 + 3;
  if (v12 + 3 >= v10)
    return swift_release(a3);
  v16 = *(_QWORD *)(v6 + 8 * v17);
  if (v16)
    goto LABEL_16;
  v17 = v12 + 4;
  if (v12 + 4 >= v10)
    return swift_release(a3);
  v16 = *(_QWORD *)(v6 + 8 * v17);
  if (v16)
  {
LABEL_16:
    v12 = v17;
    goto LABEL_17;
  }
  while (1)
  {
    v12 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v12 >= v10)
      return swift_release(a3);
    v16 = *(_QWORD *)(v6 + 8 * v12);
    ++v17;
    if (v16)
      goto LABEL_17;
  }
LABEL_28:
  __break(1u);
  return result;
}

void sub_10001FA40(unsigned __int16 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  Class isa;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  Class v25;
  _QWORD v26[2];
  uint64_t v27;

  v7 = *((_QWORD *)a1 + 1);
  v6 = *((_QWORD *)a1 + 2);
  v8 = *a1 | ((unint64_t)*(unsigned int *)(a1 + 1) << 16);
  swift_bridgeObjectRetain(v6);
  WiFiAddress.ipv6LinkLocalAddress.getter(v8);
  v10 = v9;
  v12 = v11;
  v14 = v13;
  v15 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 32))(a3, a4);
  if (v15)
  {
    v16 = (void *)v15;
    DNSRecords.BrowseHost.keyData.getter(27, v7, v6);
    v18 = v17;
    v20 = v19;
    isa = Data._bridgeToObjectiveC()().super.isa;
    sub_10000E614(v18, v20);
    v26[0] = v10;
    v26[1] = v12;
    v22 = sub_1000FADC0((uint64_t)v26, (uint64_t)&v27);
    v24 = v23;
    v25 = Data._bridgeToObjectiveC()().super.isa;
    sub_10000E614(v22, v24);
    objc_msgSend(v16, "handleEventType:keyData:valueData:", 3, isa, v25);
    swift_bridgeObjectRelease(v6);

    swift_unknownObjectRelease(v16);
  }
  else
  {
    swift_bridgeObjectRelease(v6);
  }
  swift_bridgeObjectRelease(v14);
}

Swift::Void __swiftcall BonjourOffload.stopAllServices()()
{
  char *v0;
  char *v1;
  char *v2;
  char *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  void (*v16)(char *, char *);
  void (*v17)(char *, char *, uint64_t);
  char *v18;
  uint64_t (*v19)(char *, char *);
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __n128 v30;
  uint64_t (*v31)(char *, char *, __n128);
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  NSObject *v59;
  os_log_type_t v60;
  uint8_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t WitnessTable;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  __n128 v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  __n128 v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  __n128 v98;
  uint64_t (*v99)(_QWORD *, char *, char *, __n128);
  void (*v100)(_QWORD *, _QWORD);
  void (*v101)(_QWORD *, _QWORD);
  void (*v102)(_QWORD *, _QWORD);
  void (*v103)(_QWORD *, _QWORD, __n128);
  uint64_t v104;
  uint64_t v105;
  __n128 v106;
  char *v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  unint64_t v113;
  uint64_t v114;
  char *v115;
  char *v116;
  uint64_t AssociatedConformanceWitness;
  _QWORD v118[4];
  uint64_t v119;
  uint64_t v120;

  v3 = v1;
  v4 = v0;
  v5 = type metadata accessor for Logger(0);
  v113 = *(_QWORD *)(v5 - 8);
  v114 = v5;
  __chkstk_darwin();
  v7 = (char *)&v107 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v3, v4, &protocol requirements base descriptor for BonjourOffload);
  v9 = type metadata accessor for Optional(0, AssociatedTypeWitness);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin();
  v12 = (char *)&v107 - v11;
  v13 = *(_QWORD *)(AssociatedTypeWitness - 8);
  __chkstk_darwin();
  v15 = (char *)&v107 - v14;
  v16 = (void (*)(char *, char *))*((_QWORD *)v3 + 8);
  v115 = v2;
  v116 = v4;
  v16(v4, v3);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v12, 1, AssociatedTypeWitness) == 1)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }
  else
  {
    v107 = v7;
    v110 = v13;
    v17 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
    v18 = v15;
    v17(v15, v12, AssociatedTypeWitness);
    v19 = (uint64_t (*)(char *, char *))*((_QWORD *)v3 + 5);
    v20 = v115;
    v21 = v116;
    v22 = v19(v116, v3);
    v24 = v23;
    v26 = v25;
    swift_bridgeObjectRelease(v27);
    swift_bridgeObjectRelease(v24);
    swift_bridgeObjectRelease(v26);
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v3, v21, AssociatedTypeWitness, &protocol requirements base descriptor for BonjourOffload, &associated conformance descriptor for BonjourOffload.BonjourOffload.DiscoveryEngine: BonjourOffloadDiscoveryEngine);
    v28 = AssociatedTypeWitness;
    v29 = swift_getAssociatedTypeWitness(0, AssociatedConformanceWitness, AssociatedTypeWitness, &protocol requirements base descriptor for BonjourOffloadDiscoveryEngine);
    v108 = sub_1000166C8();
    v109 = v29;
    LOBYTE(v24) = Dictionary.isEmpty.getter(v22, &type metadata for DNSRecords.Identifier, v29, v108);
    v30 = swift_bridgeObjectRelease(v22);
    v31 = (uint64_t (*)(char *, char *, __n128))v19;
    v32 = v20;
    v33 = v21;
    if ((v24 & 1) == 0)
      goto LABEL_8;
    v34 = ((uint64_t (*)(char *, char *, __n128))v19)(v21, v3, v30);
    v36 = v35;
    v38 = v37;
    v40 = v39;
    swift_bridgeObjectRelease(v34);
    swift_bridgeObjectRelease(v38);
    swift_bridgeObjectRelease(v40);
    v41 = *(_QWORD *)(v36 + 16);
    v30 = swift_bridgeObjectRelease(v36);
    if (v41)
      goto LABEL_8;
    v42 = v31(v33, v3, v30);
    v44 = v43;
    v46 = v45;
    swift_bridgeObjectRelease(v47);
    swift_bridgeObjectRelease(v44);
    swift_bridgeObjectRelease(v42);
    v48 = swift_getAssociatedTypeWitness(0, AssociatedConformanceWitness, v28, &protocol requirements base descriptor for BonjourOffloadDiscoveryEngine);
    v49 = sub_10001670C();
    LOBYTE(v48) = Dictionary.isEmpty.getter(v46, &type metadata for DNSRecords.PTR, v48, v49);
    v30 = swift_bridgeObjectRelease(v46);
    if ((v48 & 1) == 0)
      goto LABEL_8;
    v50 = v31(v33, v3, v30);
    v52 = v51;
    v54 = v53;
    swift_bridgeObjectRelease(v55);
    swift_bridgeObjectRelease(v52);
    swift_bridgeObjectRelease(v50);
    v56 = swift_getAssociatedTypeWitness(0, AssociatedConformanceWitness, v28, &protocol requirements base descriptor for BonjourOffloadDiscoveryEngine);
    LOBYTE(v50) = Dictionary.isEmpty.getter(v54, &type metadata for DNSRecords.PTR, v56, v49);
    v30 = swift_bridgeObjectRelease(v54);
    if ((v50 & 1) != 0)
    {
      (*(void (**)(char *, uint64_t))(v110 + 8))(v18, v28);
    }
    else
    {
LABEL_8:
      v112 = v18;
      v118[0] = v32;
      v57 = v107;
      v58 = (*(uint64_t (**)(char *, __n128))(*((_QWORD *)v3 + 1) + 8))(v33, v30);
      v59 = Logger.logObject.getter(v58);
      v60 = static os_log_type_t.error.getter(v59);
      if (os_log_type_enabled(v59, v60))
      {
        v61 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v61 = 0;
        _os_log_impl((void *)&_mh_execute_header, v59, v60, "Clearing all services because client was invalidated", v61, 2u);
        swift_slowDealloc(v61, -1, -1);
      }

      (*(void (**)(char *, uint64_t))(v113 + 8))(v57, v114);
      v62 = ((uint64_t (*)(char *, char *))v31)(v33, v3);
      v64 = v63;
      v66 = v65;
      v68 = v67;
      v111 = v28;
      v69 = swift_getAssociatedTypeWitness(0, AssociatedConformanceWitness, v28, &protocol requirements base descriptor for BonjourOffloadDiscoveryEngine);
      v70 = sub_10001670C();
      v113 = v70;
      swift_bridgeObjectRelease(v66);
      swift_bridgeObjectRelease(v64);
      swift_bridgeObjectRelease(v62);
      v118[0] = v68;
      v71 = type metadata accessor for Dictionary.Values(0, &type metadata for DNSRecords.PTR, v69, v70);
      WitnessTable = swift_getWitnessTable((const char *)&protocol conformance descriptor for [A : B].Values, v71);
      v114 = v69;
      v73 = Array.init<A>(_:)(v118, v69, v71, WitnessTable);
      v118[0] = v73;
      __chkstk_darwin();
      *(&v107 - 4) = v33;
      *(&v107 - 3) = v3;
      v74 = v112;
      *(&v107 - 2) = v112;
      v75 = type metadata accessor for Array(0, v69);
      v76 = swift_getWitnessTable((const char *)&protocol conformance descriptor for [A], v75);
      Sequence.forEach(_:)(sub_100031D2C, &v107 - 6, v75, v76);
      v77 = swift_bridgeObjectRelease(v73);
      v78 = v31(v33, v3, v77);
      v80 = v79;
      v82 = v81;
      swift_bridgeObjectRelease(v83);
      swift_bridgeObjectRelease(v80);
      swift_bridgeObjectRelease(v82);
      v120 = v78;
      __chkstk_darwin();
      *(&v107 - 4) = v33;
      *(&v107 - 3) = v3;
      *(&v107 - 2) = v74;
      *(&v107 - 1) = v32;
      v84 = type metadata accessor for Dictionary(0, &type metadata for DNSRecords.Identifier, v109, v108);
      v85 = swift_getWitnessTable((const char *)&protocol conformance descriptor for [A : B], v84);
      Sequence.forEach(_:)(sub_100031D48, &v107 - 6, v84, v85);
      v86 = swift_bridgeObjectRelease(v120);
      v87 = v31(v33, v3, v86);
      v89 = v88;
      v91 = v90;
      swift_bridgeObjectRelease(v92);
      swift_bridgeObjectRelease(v89);
      swift_bridgeObjectRelease(v87);
      v119 = v91;
      __chkstk_darwin();
      *(&v107 - 4) = v33;
      *(&v107 - 3) = v3;
      *(&v107 - 2) = v93;
      *(&v107 - 1) = v32;
      v94 = swift_getAssociatedTypeWitness(255, AssociatedConformanceWitness, v111, &protocol requirements base descriptor for BonjourOffloadDiscoveryEngine);
      v95 = v113;
      v96 = type metadata accessor for Dictionary(0, &type metadata for DNSRecords.PTR, v94, v113);
      v97 = swift_getWitnessTable((const char *)&protocol conformance descriptor for [A : B], v96);
      Sequence.forEach(_:)(sub_100031D64, &v107 - 6, v96, v97);
      v98 = swift_bridgeObjectRelease(v119);
      v99 = (uint64_t (*)(_QWORD *, char *, char *, __n128))*((_QWORD *)v3 + 7);
      v100 = (void (*)(_QWORD *, _QWORD))v99(v118, v33, v3, v98);
      Dictionary.removeAll(keepingCapacity:)(0);
      v100(v118, 0);
      v101 = (void (*)(_QWORD *, _QWORD))((uint64_t (*)(_QWORD *, char *, char *))v99)(v118, v33, v3);
      Dictionary.removeAll(keepingCapacity:)(0);
      v101(v118, 0);
      v102 = (void (*)(_QWORD *, _QWORD))((uint64_t (*)(_QWORD *, char *, char *))v99)(v118, v33, v3);
      type metadata accessor for Dictionary(0, &type metadata for DNSRecords.PTR, v114, v95);
      Dictionary.removeAll(keepingCapacity:)(0);
      v102(v118, 0);
      v103 = (void (*)(_QWORD *, _QWORD, __n128))((uint64_t (*)(_QWORD *, char *, char *))v99)(v118, v33, v3);
      v105 = v104;
      v106 = swift_bridgeObjectRelease(*(_QWORD *)(v104 + 8));
      *(_QWORD *)(v105 + 8) = _swiftEmptyDictionarySingleton;
      v103(v118, 0, v106);
      (*(void (**)(char *, uint64_t))(v110 + 8))(v112, v111);
    }
  }
}

uint64_t sub_100020384(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, a4, a3, &protocol requirements base descriptor for BonjourOffload);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a4, a3, AssociatedTypeWitness, &protocol requirements base descriptor for BonjourOffload, &associated conformance descriptor for BonjourOffload.BonjourOffload.DiscoveryEngine: BonjourOffloadDiscoveryEngine);
  v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 112);
  v10 = swift_checkMetadataState(0, AssociatedTypeWitness);
  v11 = v9(a1, v10, AssociatedConformanceWitness);
  if (v11)
  {
    v12 = v11;
    v13 = type metadata accessor for BonjourResolver(0);
    v14 = swift_dynamicCastClass(v12, v13);
    if (v14)
    {
      v15 = *(_QWORD *)(v14 + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_delegate);
      *(_QWORD *)(v14 + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_delegate) = 0;
      swift_unknownObjectRelease(v12);
      v16 = v15;
    }
    else
    {
      v16 = v12;
    }
    swift_unknownObjectRelease(v16);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 120))(a1, v10, AssociatedConformanceWitness);
}

uint64_t sub_100020490(uint64_t *a1, uint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5)
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v10;
  uint64_t TupleTypeMetadata2;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;
  uint64_t v29;
  unint64_t v31[2];
  unint64_t v32;
  _QWORD v33[2];
  char v34;
  char v35;
  ValueMetadata *v36;
  _UNKNOWN **v37;

  v31[1] = a3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, a5, a4, &protocol requirements base descriptor for BonjourOffload);
  v32 = a5;
  v31[0] = a4;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a5, a4, AssociatedTypeWitness, &protocol requirements base descriptor for BonjourOffload, &associated conformance descriptor for BonjourOffload.BonjourOffload.DiscoveryEngine: BonjourOffloadDiscoveryEngine);
  v10 = swift_getAssociatedTypeWitness(255, AssociatedConformanceWitness, AssociatedTypeWitness, &protocol requirements base descriptor for BonjourOffloadDiscoveryEngine);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, &type metadata for DNSRecords.Identifier, v10, "key value ", 0);
  v12 = __chkstk_darwin();
  v14 = (char *)v31 - v13;
  v15 = (uint64_t)a1 + *(int *)(v12 + 48);
  v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 40);
  v17 = swift_checkMetadataState(0, AssociatedTypeWitness);
  v18 = v16(v15, v17, AssociatedConformanceWitness);
  if (v18)
  {
    v19 = v18;
    v20 = type metadata accessor for BonjourBrowser(0);
    v21 = swift_dynamicCastClass(v19, v20);
    if (v21)
    {
      v22 = *(_QWORD *)(v21 + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB14BonjourBrowser_delegate);
      *(_QWORD *)(v21 + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB14BonjourBrowser_delegate) = 0;
      swift_unknownObjectRelease(v19);
      v23 = v22;
    }
    else
    {
      v23 = v19;
    }
    swift_unknownObjectRelease(v23);
  }
  v24 = &v14[*(int *)(TupleTypeMetadata2 + 48)];
  v26 = *a1;
  v25 = a1[1];
  v27 = *((_BYTE *)a1 + 16);
  v28 = *((_BYTE *)a1 + 17);
  *(_QWORD *)v14 = v26;
  *((_QWORD *)v14 + 1) = v25;
  v14[16] = v27;
  v14[17] = v28;
  v29 = *(_QWORD *)(v10 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v29 + 16))(v24, v15, v10);
  v36 = &type metadata for DNSRecords.Identifier;
  v37 = &protocol witness table for DNSRecords.Identifier;
  v33[0] = v26;
  v33[1] = v25;
  v34 = v27;
  v35 = v28;
  swift_bridgeObjectRetain(v25);
  BonjourOffload.stopBrowsing(record:)((uint64_t)v33, v31[0], v32);
  sub_100014430(v33);
  return (*(uint64_t (**)(char *, uint64_t))(v29 + 8))(v24, v10);
}

uint64_t BonjourOffload.stopBrowsing(record:)(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  void (*v29)(unint64_t);
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  _BOOL4 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t (*v40)(unint64_t, unint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  os_log_t v60;
  uint64_t v61;
  void (*v62)(char *, _QWORD *);
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  int v66;
  int v67;
  unint64_t v68;
  uint64_t (*v69)(unint64_t, unint64_t);
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  __n128 v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  NSObject *v85;
  os_log_type_t v86;
  uint8_t *v87;
  uint64_t v88;
  char *v89;
  Swift::String v90;
  uint64_t v91;
  unint64_t v92;
  Swift::String v93;
  Swift::String v94;
  unint64_t v95;
  int v96;
  char *v97;
  int v98;
  unint64_t v99;
  unint64_t v100;
  char *v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  char *v106;
  char *v107;
  uint64_t v108;
  NSObject *v109;
  os_log_type_t v110;
  uint8_t *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  uint8_t *v117;
  os_log_t v118;
  uint64_t v119;
  uint64_t v120;
  void (*v121)(unint64_t, uint64_t);
  int v122;
  uint64_t v123;
  char *v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  char *v129;
  uint64_t v130;
  void (*v131)(char *, _QWORD *);
  char *v132;
  _QWORD *v133;
  char *v134;
  char *v135;
  uint64_t v136;
  unint64_t v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  _QWORD *v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  _QWORD *v147;
  uint64_t v148;
  char *v149;
  uint64_t v150[2];
  char v151;
  char v152;
  uint64_t v153;
  unint64_t v154;
  unsigned __int8 v155;
  unsigned __int8 v156;
  uint64_t v157;
  char *v158;
  char v159;
  char v160;
  uint64_t v161;
  uint64_t v162;
  char v163[8];

  v4 = v3;
  v148 = a1;
  sub_100012C44(&qword_100404B80);
  __chkstk_darwin();
  v125 = (char *)&v118 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, a3, a2, &protocol requirements base descriptor for BonjourOffload);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a3, a2, AssociatedTypeWitness, &protocol requirements base descriptor for BonjourOffload, &associated conformance descriptor for BonjourOffload.BonjourOffload.DiscoveryEngine: BonjourOffloadDiscoveryEngine);
  v10 = swift_getAssociatedTypeWitness(255, AssociatedConformanceWitness, AssociatedTypeWitness, &protocol requirements base descriptor for BonjourOffloadDiscoveryEngine);
  v127 = type metadata accessor for Optional(0, v10);
  v126 = *(_QWORD *)(v127 - 8);
  __chkstk_darwin();
  v124 = (char *)&v118 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v128 = (char *)&v118 - v12;
  v131 = (void (*)(char *, _QWORD *))v10;
  v130 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin();
  v129 = (char *)&v118 - v13;
  v144 = AssociatedConformanceWitness;
  v14 = swift_getAssociatedTypeWitness(255, AssociatedConformanceWitness, AssociatedTypeWitness, &protocol requirements base descriptor for BonjourOffloadDiscoveryEngine);
  v140 = type metadata accessor for Optional(0, v14);
  v139 = *(_QWORD *)(v140 - 8);
  __chkstk_darwin();
  v133 = (os_log_t *)((char *)&v118 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin();
  v141 = (os_log_t *)((char *)&v118 - v16);
  v146 = v14;
  v142 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin();
  v132 = (char *)&v118 - v17;
  v147 = (_QWORD *)type metadata accessor for Logger(0);
  v145 = *(v147 - 1);
  __chkstk_darwin();
  v135 = (char *)&v118 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v134 = (char *)&v118 - v19;
  __chkstk_darwin();
  v149 = (char *)&v118 - v20;
  v21 = type metadata accessor for Optional(0, AssociatedTypeWitness);
  v22 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin();
  v24 = (char *)&v118 - v23;
  v25 = *(_QWORD *)(AssociatedTypeWitness - 8);
  __chkstk_darwin();
  v27 = (char *)&v118 - v26;
  (*(void (**)(unint64_t, unint64_t))(a3 + 64))(a2, a3);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v24, 1, AssociatedTypeWitness) == 1)
    return (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v24, v21);
  (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v27, v24, AssociatedTypeWitness);
  v157 = v4;
  v29 = *(void (**)(unint64_t))(*(_QWORD *)(a3 + 8) + 8);
  v120 = *(_QWORD *)(a3 + 8);
  v29(a2);
  v30 = v148;
  sub_100031D80(v148, (uint64_t)&v157);
  v31 = swift_unknownObjectRetain_n(v4, 4);
  v32 = Logger.logObject.getter(v31);
  v33 = static os_log_type_t.info.getter();
  v122 = v33;
  v34 = os_log_type_enabled(v32, v33);
  v123 = AssociatedTypeWitness;
  v138 = v27;
  v136 = v25;
  v143 = a2;
  v137 = a3;
  v121 = (void (*)(unint64_t, uint64_t))v29;
  if (v34)
  {
    v35 = swift_slowAlloc(32, -1);
    v119 = swift_slowAlloc(32, -1);
    v153 = v119;
    *(_DWORD *)v35 = 136315650;
    v118 = v32;
    sub_100031D80((uint64_t)&v157, (uint64_t)&v162);
    v36 = sub_100012C44(&qword_100404B88);
    v37 = String.init<A>(describing:)(&v162, v36);
    v39 = v38;
    v162 = sub_100013CC8(v37, v38, &v153);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v162, v163);
    swift_bridgeObjectRelease(v39);
    sub_100014430(&v157);
    *(_WORD *)(v35 + 12) = 2048;
    v40 = *(uint64_t (**)(unint64_t, unint64_t))(a3 + 40);
    v41 = v40(a2, a3);
    v43 = v42;
    v45 = v44;
    swift_bridgeObjectRelease(v46);
    swift_bridgeObjectRelease(v43);
    swift_bridgeObjectRelease(v45);
    v47 = sub_1000166C8();
    v48 = Dictionary.count.getter(v41, &type metadata for DNSRecords.Identifier, v146, v47);
    swift_unknownObjectRelease(v4);
    swift_bridgeObjectRelease(v41);
    v162 = v48;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v162, v163);
    swift_unknownObjectRelease(v4);
    *(_WORD *)(v35 + 22) = 2048;
    v49 = v40(a2, a3);
    AssociatedTypeWitness = v123;
    v50 = v49;
    v52 = v51;
    v54 = v53;
    swift_bridgeObjectRelease(v55);
    swift_bridgeObjectRelease(v52);
    swift_bridgeObjectRelease(v50);
    v56 = swift_getAssociatedTypeWitness(0, v144, AssociatedTypeWitness, &protocol requirements base descriptor for BonjourOffloadDiscoveryEngine);
    v57 = sub_10001670C();
    v58 = Dictionary.count.getter(v54, &type metadata for DNSRecords.PTR, v56, v57);
    swift_unknownObjectRelease(v4);
    swift_bridgeObjectRelease(v54);
    v162 = v58;
    v59 = v148;
    v25 = v136;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v162, v163);
    swift_unknownObjectRelease(v4);
    v60 = v118;
    _os_log_impl((void *)&_mh_execute_header, v118, (os_log_type_t)v122, "Stopping browse for %s (browses: %ld, advertises: %ld)", (uint8_t *)v35, 0x20u);
    v61 = v119;
    swift_arrayDestroy(v119, 1, &type metadata for Any[8]);
    swift_slowDealloc(v61, -1, -1);
    swift_slowDealloc(v35, -1, -1);

  }
  else
  {
    v59 = v30;
    swift_unknownObjectRelease_n(v4, 2);
    sub_100014430(&v157);

    swift_unknownObjectRelease_n(v4, 2);
  }
  v62 = *(void (**)(char *, _QWORD *))(v145 + 8);
  v62(v149, v147);
  sub_100031D80(v59, (uint64_t)&v162);
  v63 = sub_100012C44(&qword_100404B88);
  if (!swift_dynamicCast(&v153, &v162, v63, &type metadata for DNSRecords.Identifier, 0))
  {
    v96 = swift_dynamicCast(&v157, &v162, v63, &type metadata for DNSRecords.Browse, 0);
    v97 = v138;
    if (v96)
      __asm { BR              X10 }
    v98 = swift_dynamicCast(&v157, &v162, v63, &type metadata for DNSRecords.BrowseHost, 0);
    v99 = v143;
    v100 = v137;
    if (v98)
      __asm { BR              X10 }
    if (swift_dynamicCast(&v157, &v162, v63, &type metadata for DNSRecords.ARPABrowse, 0))
    {
      swift_bridgeObjectRelease(v161);
    }
    else
    {
      v148 = v4;
      v157 = v4;
      v106 = v135;
      v121(v99, v120);
      v107 = v106;
      v108 = sub_100031D80(v59, (uint64_t)&v157);
      v109 = Logger.logObject.getter(v108);
      v110 = static os_log_type_t.error.getter(v109);
      if (os_log_type_enabled(v109, v110))
      {
        v111 = (uint8_t *)swift_slowAlloc(12, -1);
        v112 = swift_slowAlloc(32, -1);
        v131 = v62;
        v113 = v112;
        v150[0] = v112;
        *(_DWORD *)v111 = 136315138;
        sub_100031D80((uint64_t)&v157, (uint64_t)&v153);
        v114 = String.init<A>(describing:)(&v153, v63);
        v116 = v115;
        v153 = sub_100013CC8(v114, v115, v150);
        v97 = v138;
        v25 = v136;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v153, &v154);
        swift_bridgeObjectRelease(v116);
        sub_100014430(&v157);
        _os_log_impl((void *)&_mh_execute_header, v109, v110, "Failed to stop browsing for record %s", v111, 0xCu);
        swift_arrayDestroy(v113, 1, &type metadata for Any[8]);
        swift_slowDealloc(v113, -1, -1);
        v117 = v111;
        v100 = v137;
        swift_slowDealloc(v117, -1, -1);

        v99 = v143;
        v131(v135, v147);
      }
      else
      {
        sub_100014430(&v157);

        v62(v107, v147);
        v99 = v143;
      }
    }
    goto LABEL_25;
  }
  v131 = v62;
  v65 = v153;
  v64 = v154;
  v66 = v155;
  v67 = v156;
  v68 = v137;
  v69 = *(uint64_t (**)(unint64_t, unint64_t))(v137 + 40);
  swift_bridgeObjectRetain(v154);
  v70 = v69(v143, v68);
  v72 = v71;
  v148 = v4;
  v74 = v73;
  v76 = v75;
  v145 = v65;
  v157 = v65;
  v158 = (char *)v64;
  LODWORD(v135) = v66;
  v159 = v66;
  LODWORD(v130) = v67;
  v160 = v67;
  v77 = sub_1000166C8();
  v78 = v141;
  v79 = v146;
  Dictionary.subscript.getter(v141, &v157, v70, &type metadata for DNSRecords.Identifier, v146, v77);
  v149 = (char *)v64;
  swift_bridgeObjectRelease(v64);
  swift_bridgeObjectRelease(v76);
  swift_bridgeObjectRelease(v74);
  swift_bridgeObjectRelease(v72);
  v80 = swift_bridgeObjectRelease(v70);
  v81 = v142;
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t, __n128))(v142 + 48))(v78, 1, v79, v80) != 1)
  {
    v101 = v132;
    (*(void (**)(char *, _QWORD *, uint64_t))(v81 + 32))(v132, v78, v79);
    AssociatedTypeWitness = v123;
    (*(void (**)(char *, uint64_t))(v144 + 48))(v101, v123);
    v150[0] = v145;
    v150[1] = (uint64_t)v149;
    v151 = (char)v135;
    v152 = v130;
    v102 = v137;
    v103 = v143;
    v147 = (_QWORD *)(*(uint64_t (**)(uint64_t *, unint64_t, unint64_t))(v137 + 56))(&v157, v143, v137);
    v104 = type metadata accessor for Dictionary(0, &type metadata for DNSRecords.Identifier, v79, v77);
    v105 = v133;
    Dictionary.removeValue(forKey:)(v133, v150, v104);
    (*(void (**)(_QWORD *, uint64_t))(v139 + 8))(v105, v140);
    ((void (*)(uint64_t *, _QWORD))v147)(&v157, 0);
    (*(void (**)(char *, uint64_t))(v81 + 8))(v101, v79);
    swift_bridgeObjectRelease(v149);
    v25 = v136;
    v99 = v103;
    v100 = v102;
    v97 = v138;
LABEL_25:
    sub_100014430(&v162);
    sub_10001F2B8(v99, v100);
    return (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v97, AssociatedTypeWitness);
  }
  v82 = v145;
  (*(void (**)(_QWORD *, uint64_t))(v139 + 8))(v78, v140);
  v157 = v148;
  v83 = v134;
  v121(v143, v120);
  v84 = swift_bridgeObjectRetain(v149);
  v85 = Logger.logObject.getter(v84);
  v86 = static os_log_type_t.error.getter(v85);
  if (os_log_type_enabled(v85, v86))
  {
    v87 = (uint8_t *)swift_slowAlloc(12, -1);
    v88 = swift_slowAlloc(32, -1);
    v150[0] = v88;
    *(_DWORD *)v87 = 136315138;
    v89 = v149;
    v157 = v82;
    v158 = v149;
    swift_bridgeObjectRetain_n(v149, 2);
    v90._countAndFlagsBits = 24366;
    v90._object = (void *)0xE200000000000000;
    String.append(_:)(v90);
    if ((_DWORD)v135)
      v91 = 7365749;
    else
      v91 = 7365492;
    v92 = 0xE300000000000000;
    String.append(_:)(*(Swift::String *)&v91);
    swift_bridgeObjectRelease(0xE300000000000000);
    v93._countAndFlagsBits = 46;
    v93._object = (void *)0xE100000000000000;
    String.append(_:)(v93);
    v94._countAndFlagsBits = 0x6C61636F6CLL;
    v94._object = (void *)0xE500000000000000;
    String.append(_:)(v94);
    swift_bridgeObjectRelease(v89);
    v95 = (unint64_t)v158;
    v157 = sub_100013CC8(v157, (unint64_t)v158, v150);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v157, &v158);
    swift_bridgeObjectRelease_n(v89, 2);
    swift_bridgeObjectRelease(v95);
    _os_log_impl((void *)&_mh_execute_header, v85, v86, "Cannot find browse for %s when attempting to stop it", v87, 0xCu);
    swift_arrayDestroy(v88, 1, &type metadata for Any[8]);
    swift_slowDealloc(v88, -1, -1);
    swift_slowDealloc(v87, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(v149, 2);
  }

  v131(v83, v147);
  (*(void (**)(char *, uint64_t))(v136 + 8))(v138, v123);
  return sub_100014430(&v162);
}

void sub_1000215A8(uint64_t a1)
{
  swift_bridgeObjectRelease(a1);
  JUMPOUT(0x100021560);
}

void sub_1000215B0()
{
  uint64_t v0;
  uint64_t v1;

  swift_bridgeObjectRelease(v0);
  swift_bridgeObjectRelease(v1);
  JUMPOUT(0x100021560);
}

void sub_1000215E0()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  void (*v19)(uint64_t, _QWORD *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  __n128 v31;
  __n128 v32;

  v7 = *(unsigned __int8 *)(v6 - 136);
  v8 = *(_QWORD *)(v6 - 376);
  *(_QWORD *)(v6 - 280) = *(_QWORD *)(v8 + 40);
  v9 = v0;
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v1);
  *(_QWORD *)(v6 - 280) = (*(uint64_t (**)(_QWORD, uint64_t))(v6 - 280))(*(_QWORD *)(v6 - 328), v8);
  *(_QWORD *)(v6 - 288) = v10;
  *(_QWORD *)(v6 - 296) = v11;
  v13 = v12;
  *(_QWORD *)(v6 - 216) = v3;
  *(_QWORD *)(v6 - 208) = v5;
  *(_QWORD *)(v6 - 304) = v9;
  *(_QWORD *)(v6 - 200) = v9;
  *(_QWORD *)(v6 - 192) = v1;
  *(_DWORD *)(v6 - 312) = v7;
  *(_BYTE *)(v6 - 184) = v7;
  *(_BYTE *)(v6 - 183) = v2;
  v14 = sub_10001670C();
  v15 = *(_QWORD **)(v6 - 448);
  v16 = *(_QWORD *)(v6 - 424);
  *(_QWORD *)(v6 - 336) = v14;
  Dictionary.subscript.getter(v15, v6 - 216, v13, &type metadata for DNSRecords.PTR, v16, v14);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v13);
  swift_bridgeObjectRelease(*(_QWORD *)(v6 - 296));
  swift_bridgeObjectRelease(*(_QWORD *)(v6 - 288));
  v17 = swift_bridgeObjectRelease(*(_QWORD *)(v6 - 280));
  v18 = *(_QWORD *)(v6 - 432);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t, __n128))(v18 + 48))(v15, 1, v16, v17) == 1)
  {
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(v6 - 384) + 8))(*(_QWORD *)(v6 - 368), v4);
    swift_bridgeObjectRelease(v1);
    swift_bridgeObjectRelease(v5);
    JUMPOUT(0x100021520);
  }
  *(_QWORD *)(v6 - 280) = v3;
  v19 = *(void (**)(uint64_t, _QWORD *, uint64_t))(v18 + 32);
  v20 = *(_QWORD *)(v6 - 440);
  v19(v20, v15, v16);
  v21 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 320) + 112))(v20, v4);
  if (v21)
  {
    v22 = v21;
    v23 = type metadata accessor for BonjourResolver(0);
    v24 = swift_dynamicCastClass(v22, v23);
    if (v24)
    {
      v25 = v24 + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_srv;
      swift_beginAccess(v24 + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_srv, v6 - 240, 0, 0);
      v26 = v25;
      v27 = *(_QWORD *)(v6 - 472);
      sub_100033B48(v26, v27, &qword_100404B80);
      v28 = type metadata accessor for DNSRecords.SRV(0);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 48))(v27, 1, v28) == 1)
      {
        sub_100033A84(v27, &qword_100404B80);
        (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(v6 - 320) + 120))(*(_QWORD *)(v6 - 440), v4);
        *(_QWORD *)(v6 - 216) = *(_QWORD *)(v6 - 280);
        *(_QWORD *)(v6 - 208) = v5;
        *(_QWORD *)(v6 - 200) = *(_QWORD *)(v6 - 304);
        *(_QWORD *)(v6 - 192) = v1;
        *(_BYTE *)(v6 - 184) = *(_DWORD *)(v6 - 312);
        *(_BYTE *)(v6 - 183) = v2;
        *(_QWORD *)(v6 - 280) = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)(v6 - 376) + 56))(v6 - 272, *(_QWORD *)(v6 - 328), *(_QWORD *)(v6 - 376));
        v29 = type metadata accessor for Dictionary(0, &type metadata for DNSRecords.PTR, *(_QWORD *)(v6 - 424), *(_QWORD *)(v6 - 336));
        v30 = *(_QWORD **)(v6 - 480);
        Dictionary.removeValue(forKey:)(v30, v6 - 216, v29);
        swift_bridgeObjectRelease(v1);
        v31 = swift_bridgeObjectRelease(v5);
        (*(void (**)(_QWORD *, _QWORD, __n128))(*(_QWORD *)(v6 - 464) + 8))(v30, *(_QWORD *)(v6 - 456), v31);
        (*(void (**)(uint64_t, _QWORD))(v6 - 280))(v6 - 272, 0);
        swift_unknownObjectRelease(v22);
        (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v6 - 432) + 8))(*(_QWORD *)(v6 - 440), *(_QWORD *)(v6 - 424));
        JUMPOUT(0x100021560);
      }
      swift_bridgeObjectRelease(v1);
      swift_bridgeObjectRelease(v5);
      swift_unknownObjectRelease(v22);
      sub_100033A84(v27, &qword_100404B80);
LABEL_10:
      (*(void (**)(_QWORD, _QWORD, __n128))(*(_QWORD *)(v6 - 432) + 8))(*(_QWORD *)(v6 - 440), *(_QWORD *)(v6 - 424), v32);
      JUMPOUT(0x100021524);
    }
    swift_unknownObjectRelease(v22);
  }
  swift_bridgeObjectRelease(v1);
  v32 = swift_bridgeObjectRelease(v5);
  goto LABEL_10;
}

uint64_t sub_1000219D0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5)
{
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int16 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  _QWORD v49[3];
  ValueMetadata *v50;
  _UNKNOWN **v51;
  char v52[24];

  v47 = a3;
  sub_100012C44(&qword_100404B80);
  __chkstk_darwin();
  v9 = (char *)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DNSRecords.SRV(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin();
  v45 = (uint64_t)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, a5, a4, &protocol requirements base descriptor for BonjourOffload);
  v48 = a5;
  v46 = a4;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a5, a4, AssociatedTypeWitness, &protocol requirements base descriptor for BonjourOffload, &associated conformance descriptor for BonjourOffload.BonjourOffload.DiscoveryEngine: BonjourOffloadDiscoveryEngine);
  v15 = swift_getAssociatedTypeWitness(255, AssociatedConformanceWitness, AssociatedTypeWitness, &protocol requirements base descriptor for BonjourOffloadDiscoveryEngine);
  v16 = a1 + *(int *)(swift_getTupleTypeMetadata2(0, &type metadata for DNSRecords.PTR, v15, "key value ", 0) + 48);
  v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 72);
  v18 = swift_checkMetadataState(0, AssociatedTypeWitness);
  result = v17(v16, v18, AssociatedConformanceWitness);
  if (result)
  {
    v20 = result;
    v21 = type metadata accessor for BonjourAdvertiser(0);
    v22 = swift_dynamicCastClass(v20, v21);
    if (!v22)
      return swift_unknownObjectRelease(v20);
    v23 = v22;
    v24 = v22 + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_srvInfo;
    swift_beginAccess(v22 + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_srvInfo, v52, 0, 0);
    sub_100033B48(v24, (uint64_t)v9, &qword_100404B80);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
    {
      sub_100033A84((uint64_t)v9, &qword_100404B80);
    }
    else
    {
      v25 = v45;
      sub_100033AC0((uint64_t)v9, v45, type metadata accessor for DNSRecords.SRV);
      v50 = (ValueMetadata *)v10;
      v51 = &protocol witness table for DNSRecords.SRV;
      v26 = sub_100033C24(v49);
      sub_100032558(v25, (uint64_t)v26);
      BonjourOffload.stopAdvertising(record:)((unint64_t)v49, v46, v48);
      sub_100031F1C(v25);
      sub_100014430(v49);
    }
    v27 = (uint64_t *)(v23 + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_txtInfo);
    v28 = *(_QWORD *)(v23 + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_txtInfo + 8);
    if (v28)
    {
      v30 = v27[5];
      v29 = v27[6];
      v31 = v27[3];
      v32 = v27[4];
      v33 = v27[2];
      v34 = *v27;
      v44 = v32 >> 8;
      v45 = v34;
      v50 = &type metadata for DNSRecords.TXT;
      v51 = &protocol witness table for DNSRecords.TXT;
      v35 = swift_allocObject(&unk_1003DCF70, 72, 7);
      v49[0] = v35;
      *(_QWORD *)(v35 + 16) = v34;
      *(_QWORD *)(v35 + 24) = v28;
      *(_QWORD *)(v35 + 32) = v33;
      *(_QWORD *)(v35 + 40) = v31;
      *(_BYTE *)(v35 + 48) = v32 & 1;
      *(_BYTE *)(v35 + 49) = v44;
      *(_QWORD *)(v35 + 56) = v30;
      *(_QWORD *)(v35 + 64) = v29;
      swift_bridgeObjectRetain(v28);
      swift_bridgeObjectRetain(v31);
      sub_100031FEC(v30, v29);
      swift_bridgeObjectRetain(v28);
      swift_bridgeObjectRetain(v31);
      sub_100031FEC(v30, v29);
      BonjourOffload.stopAdvertising(record:)((unint64_t)v49, v46, v48);
      sub_100031E0C(v45, v28, v33, v31, v32, v30, v29);
      sub_100014430(v49);
    }
    v36 = v23 + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_service;
    v37 = *(_QWORD *)(v23 + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_service + 8);
    if (v37)
    {
      v38 = *(_WORD *)(v36 + 32);
      v40 = *(_QWORD *)(v36 + 16);
      v39 = *(_QWORD *)(v36 + 24);
      v41 = *(_QWORD *)v36;
      v50 = &type metadata for DNSRecords.PTR;
      v51 = &protocol witness table for DNSRecords.PTR;
      v42 = swift_allocObject(&unk_1003DCF48, 50, 7);
      v49[0] = v42;
      *(_QWORD *)(v42 + 16) = v41;
      *(_QWORD *)(v42 + 24) = v37;
      *(_QWORD *)(v42 + 32) = v40;
      *(_QWORD *)(v42 + 40) = v39;
      *(_BYTE *)(v42 + 48) = v38 & 1;
      *(_BYTE *)(v42 + 49) = HIBYTE(v38);
      swift_bridgeObjectRetain(v37);
      swift_bridgeObjectRetain(v39);
      BonjourOffload.stopAdvertising(record:)((unint64_t)v49, v46, v48);
      swift_unknownObjectRelease(v20);
      return sub_100014430(v49);
    }
    else
    {
      return swift_unknownObjectRelease(v20);
    }
  }
  return result;
}

uint64_t BonjourOffload.stopAdvertising(record:)(unint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t AssociatedTypeWitness;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(unint64_t, uint64_t);
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  int v42;
  _BOOL4 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t (*v51)(unint64_t, unint64_t);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  os_log_t v73;
  uint64_t v74;
  void (*v75)(uint64_t (*)(__int128 *, unint64_t, unint64_t), uint64_t);
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t (*v82)(__int128 *, unint64_t, unint64_t);
  unint64_t v83;
  void (*v84)(_OWORD *, _QWORD);
  unint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  void (*v89)(__int128 *, _QWORD);
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  char v96;
  uint64_t v97;
  uint64_t (*v98)(__int128 *, unint64_t, unint64_t);
  void (*v99)(__int128 *, _QWORD, __n128);
  unint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  __n128 v103;
  uint64_t v104;
  __int128 v105;
  uint64_t (*v106)(unint64_t, unint64_t);
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  char v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  void (*v119)(char *, _QWORD *, uint64_t);
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  unint64_t v140;
  void (*v141)(_OWORD *, _QWORD, __n128);
  unint64_t v142;
  uint64_t v143;
  _QWORD *v144;
  _QWORD *v145;
  uint64_t v146;
  __n128 v147;
  uint64_t v148;
  uint64_t (*v149)(unint64_t, unint64_t);
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  char v158;
  char *v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  __int128 v177;
  void (*v178)(__int128 *, _QWORD);
  uint64_t v179;
  uint64_t v180;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v182;
  uint64_t v183;
  _QWORD *v184;
  char *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  char *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  char *v201;
  void *v202;
  uint64_t v203;
  int v204;
  uint64_t v205;
  uint64_t v206;
  char *v207;
  char *v208;
  uint64_t v209;
  int v210;
  char *v211;
  void (*v212)(__int128 *, _QWORD);
  char *v213;
  char *v214;
  uint64_t (*v215)(__int128 *, unint64_t, unint64_t);
  uint64_t v216;
  NSObject *v217;
  os_log_type_t v218;
  uint8_t *v219;
  uint64_t v220;
  uint64_t v221;
  unint64_t v222;
  unint64_t v223;
  uint64_t (*v224)(__int128 *, unint64_t, unint64_t);
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  int v228;
  id v229;
  void (*v230)(__int128 *, _QWORD);
  char *v231;
  char *v232;
  _QWORD v233[2];
  os_log_t v234;
  int v235;
  uint64_t v236;
  uint64_t v237;
  void (*v238)(unint64_t, uint64_t);
  uint64_t (*v239)(__int128 *, unint64_t, unint64_t);
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  char *v243;
  char *v244;
  _QWORD *v245;
  char *v246;
  uint64_t v247;
  _QWORD *v248;
  uint64_t v249;
  uint64_t v250;
  char *v251;
  _QWORD *v252;
  uint64_t v253;
  char *v254;
  uint64_t v255;
  char *v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t AssociatedConformanceWitness;
  unint64_t v263;
  uint64_t (*v264)(__int128 *, unint64_t, unint64_t);
  unint64_t v265;
  unint64_t v266;
  uint64_t v267;
  _OWORD v268[2];
  __int128 v269;
  __int128 v270;
  __int16 v271;
  __int128 v272;
  __int128 v273;
  __int128 v274;
  __int128 v275;
  uint64_t v276[5];
  __int128 v277;
  __int128 v278;
  __int128 v279;
  __int128 v280;
  __int128 v281;

  v263 = a1;
  v5 = type metadata accessor for DNSRecords.SRV(0);
  v6 = *(_QWORD *)(v5 - 8);
  v257 = v5;
  v258 = v6;
  __chkstk_darwin();
  v256 = (char *)v233 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v253 = (uint64_t)v233 - v8;
  sub_100012C44(&qword_100404B80);
  __chkstk_darwin();
  v242 = (uint64_t)v233 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v243 = (char *)v233 - v10;
  __chkstk_darwin();
  v247 = (uint64_t)v233 - v11;
  v265 = a2;
  v266 = a3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, a3, a2, &protocol requirements base descriptor for BonjourOffload);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a3, a2, AssociatedTypeWitness, &protocol requirements base descriptor for BonjourOffload, &associated conformance descriptor for BonjourOffload.BonjourOffload.DiscoveryEngine: BonjourOffloadDiscoveryEngine);
  v13 = swift_getAssociatedTypeWitness(255, AssociatedConformanceWitness, AssociatedTypeWitness, &protocol requirements base descriptor for BonjourOffloadDiscoveryEngine);
  v14 = type metadata accessor for Optional(0, v13);
  v249 = *(_QWORD *)(v14 - 8);
  v250 = v14;
  __chkstk_darwin();
  v245 = (_QWORD *)((char *)v233 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin();
  v248 = (_QWORD *)((char *)v233 - v16);
  __chkstk_darwin();
  v252 = (_QWORD *)((char *)v233 - v17);
  v18 = *(_QWORD *)(v13 - 8);
  v259 = v13;
  v260 = v18;
  __chkstk_darwin();
  v244 = (char *)v233 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v246 = (char *)v233 - v20;
  __chkstk_darwin();
  v251 = (char *)v233 - v21;
  v255 = type metadata accessor for Logger(0);
  v22 = *(_QWORD *)(v255 - 8);
  __chkstk_darwin();
  v24 = (char *)v233 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v264 = (uint64_t (*)(__int128 *, unint64_t, unint64_t))((char *)v233 - v25);
  v26 = type metadata accessor for Optional(0, AssociatedTypeWitness);
  v27 = *(_QWORD *)(v26 - 8);
  __chkstk_darwin();
  v29 = (char *)v233 - v28;
  v30 = *(_QWORD *)(AssociatedTypeWitness - 8);
  __chkstk_darwin();
  v32 = (char *)v233 - v31;
  (*(void (**)(unint64_t))(v266 + 64))(v265);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v29, 1, AssociatedTypeWitness) == 1)
    return (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v29, v26);
  v239 = v24;
  v240 = v22;
  v241 = v30;
  (*(void (**)(char *, char *, uint64_t))(v30 + 32))(v32, v29, AssociatedTypeWitness);
  v34 = v267;
  *(_QWORD *)&v277 = v267;
  v35 = *(_QWORD *)(v266 + 8);
  v36 = *(void (**)(unint64_t, uint64_t))(v35 + 8);
  v37 = v265;
  v36(v265, v35);
  v38 = v263;
  sub_100031D80(v263, (uint64_t)&v277);
  v39 = swift_unknownObjectRetain_n(v34, 4);
  v40 = Logger.logObject.getter(v39);
  v41 = static os_log_type_t.info.getter();
  v42 = v41;
  v43 = os_log_type_enabled(v40, v41);
  v254 = v32;
  v261 = AssociatedTypeWitness;
  v238 = v36;
  if (v43)
  {
    v44 = swift_slowAlloc(32, -1);
    v236 = swift_slowAlloc(32, -1);
    v276[0] = v236;
    *(_DWORD *)v44 = 136315650;
    v235 = v42;
    v234 = v40;
    sub_100031D80((uint64_t)&v277, (uint64_t)&v272);
    v45 = sub_100012C44(&qword_100404B88);
    v46 = String.init<A>(describing:)(&v272, v45);
    v48 = v47;
    *(_QWORD *)&v272 = sub_100013CC8(v46, v47, v276);
    v237 = v35;
    v49 = v267;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v272, (char *)&v272 + 8);
    swift_bridgeObjectRelease(v48);
    sub_100014430(&v277);
    *(_WORD *)(v44 + 12) = 2048;
    v233[1] = v44 + 14;
    v50 = v266;
    v51 = *(uint64_t (**)(unint64_t, unint64_t))(v266 + 40);
    v52 = v51(v37, v266);
    v54 = v53;
    v56 = v55;
    swift_bridgeObjectRelease(v57);
    swift_bridgeObjectRelease(v54);
    swift_bridgeObjectRelease(v56);
    v58 = swift_getAssociatedTypeWitness(0, AssociatedConformanceWitness, v261, &protocol requirements base descriptor for BonjourOffloadDiscoveryEngine);
    v59 = sub_1000166C8();
    v60 = Dictionary.count.getter(v52, &type metadata for DNSRecords.Identifier, v58, v59);
    swift_unknownObjectRelease(v49);
    swift_bridgeObjectRelease(v52);
    *(_QWORD *)&v272 = v60;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v272, (char *)&v272 + 8);
    swift_unknownObjectRelease(v49);
    *(_WORD *)(v44 + 22) = 2048;
    v61 = v51(v37, v50);
    v63 = v62;
    v65 = v64;
    swift_bridgeObjectRelease(v66);
    swift_bridgeObjectRelease(v63);
    swift_bridgeObjectRelease(v61);
    v67 = sub_10001670C();
    v68 = v259;
    v69 = Dictionary.count.getter(v65, &type metadata for DNSRecords.PTR, v259, v67);
    swift_unknownObjectRelease(v49);
    v70 = v65;
    v38 = v263;
    v71 = v261;
    swift_bridgeObjectRelease(v70);
    *(_QWORD *)&v272 = v69;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v272, (char *)&v272 + 8);
    v72 = v49;
    v35 = v237;
    swift_unknownObjectRelease(v72);
    v73 = v234;
    _os_log_impl((void *)&_mh_execute_header, v234, (os_log_type_t)v235, "Stopping advertise for %s (browses: %ld, advertises: %ld)", (uint8_t *)v44, 0x20u);
    v74 = v236;
    swift_arrayDestroy(v236, 1, &type metadata for Any[8]);
    swift_slowDealloc(v74, -1, -1);
    swift_slowDealloc(v44, -1, -1);

    v75 = *(void (**)(uint64_t (*)(__int128 *, unint64_t, unint64_t), uint64_t))(v240 + 8);
    v75(v264, v255);
  }
  else
  {
    v71 = AssociatedTypeWitness;
    v76 = v267;
    swift_unknownObjectRelease_n(v267, 2);
    sub_100014430(&v277);

    swift_unknownObjectRelease_n(v76, 2);
    v75 = *(void (**)(uint64_t (*)(__int128 *, unint64_t, unint64_t), uint64_t))(v240 + 8);
    v75(v264, v255);
    v68 = v259;
  }
  v78 = v257;
  v77 = v258;
  v79 = (uint64_t)v256;
  sub_100031D80(v38, (uint64_t)v276);
  v80 = sub_100012C44(&qword_100404B88);
  if (!swift_dynamicCast(&v272, v276, v80, &type metadata for DNSRecords.PTR, 0))
  {
    v91 = v253;
    if (swift_dynamicCast(v253, v276, v80, v78, 0))
    {
      sub_100033AC0(v91, v79, type metadata accessor for DNSRecords.SRV);
      v92 = *(_QWORD *)(v79 + 8);
      v93 = *(_QWORD *)(v79 + 16);
      v94 = *(_QWORD *)(v79 + 24);
      v95 = *(_BYTE *)(v79 + 32);
      v96 = *(_BYTE *)(v79 + 33);
      *(_QWORD *)&v277 = *(_QWORD *)v79;
      *((_QWORD *)&v277 + 1) = v92;
      *(_QWORD *)&v278 = v93;
      *((_QWORD *)&v278 + 1) = v94;
      LOBYTE(v279) = v95;
      BYTE1(v279) = v96;
      v81 = v266;
      v97 = v79;
      v98 = *(uint64_t (**)(__int128 *, unint64_t, unint64_t))(v266 + 56);
      swift_bridgeObjectRetain(v92);
      swift_bridgeObjectRetain(v94);
      v83 = v265;
      v264 = v98;
      v99 = (void (*)(__int128 *, _QWORD, __n128))v98(&v272, v265, v81);
      v100 = sub_10001670C();
      v101 = type metadata accessor for Dictionary(0, &type metadata for DNSRecords.PTR, v68, v100);
      v102 = v248;
      Dictionary.removeValue(forKey:)(v248, &v277, v101);
      swift_bridgeObjectRelease(v94);
      v103 = swift_bridgeObjectRelease(v92);
      v99(&v272, 0, v103);
      v104 = v260;
      if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v260 + 48))(v102, 1, v68) == 1)
      {
        (*(void (**)(_QWORD *, uint64_t))(v249 + 8))(v102, v250);
        v105 = *(_OWORD *)(v97 + 16);
        v277 = *(_OWORD *)v97;
        v278 = v105;
        LOWORD(v279) = *(_WORD *)(v97 + 32);
        v268[0] = v277;
        v269 = v105;
        LOWORD(v270) = v279;
        v106 = *(uint64_t (**)(unint64_t, unint64_t))(v81 + 40);
        sub_100031ECC((uint64_t)v268);
        sub_100031ECC((uint64_t)&v269);
        v107 = v106(v83, v81);
        v109 = v108;
        v111 = v110;
        v113 = v112;
        if (*(_QWORD *)(v108 + 16) && (v114 = sub_10002D93C((uint64_t)&v277), (v115 & 1) != 0))
        {
          v116 = (char *)*(id *)(*(_QWORD *)(v109 + 56) + 8 * v114);
          swift_bridgeObjectRelease(v113);
          swift_bridgeObjectRelease(v111);
          swift_bridgeObjectRelease(v109);
          swift_bridgeObjectRelease(v107);
          sub_100031EF4((uint64_t)v268);
          sub_100031EF4((uint64_t)&v269);
          v117 = (uint64_t)v243;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v258 + 56))(v243, 1, 1, v257);
          v118 = (uint64_t)&v116[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_srvInfo];
          swift_beginAccess(&v116[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_srvInfo], &v272, 33, 0);
          sub_100031F58(v117, v118);
          swift_endAccess(&v272);

        }
        else
        {
          swift_bridgeObjectRelease(v113);
          swift_bridgeObjectRelease(v111);
          swift_bridgeObjectRelease(v109);
          swift_bridgeObjectRelease(v107);
          sub_100031EF4((uint64_t)v268);
          sub_100031EF4((uint64_t)&v269);
        }
        sub_100031F1C(v97);
        v90 = v261;
        goto LABEL_64;
      }
      v168 = v246;
      (*(void (**)(char *, _QWORD *, uint64_t))(v104 + 32))(v246, v102, v68);
      v169 = AssociatedConformanceWitness;
      v170 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(AssociatedConformanceWitness + 72))(v168, v261, AssociatedConformanceWitness);
      if (v170)
      {
        v171 = v170;
        v172 = type metadata accessor for BonjourAdvertiser(0);
        v173 = (char *)swift_dynamicCastClass(v171, v172);
        if (v173)
        {
          v174 = (uint64_t)v243;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v258 + 56))(v243, 1, 1, v257);
          v175 = (uint64_t)&v173[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_srvInfo];
          swift_beginAccess(&v173[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_srvInfo], &v277, 33, 0);
          swift_unknownObjectRetain(v171);
          sub_100031F58(v174, v175);
          swift_endAccess(&v277);
          swift_unknownObjectRelease(v171);
          if (*(_QWORD *)&v173[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_service
                              + 8]
            || *(_QWORD *)&v173[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_txtInfo
                              + 8])
          {
            v176 = (uint64_t)v256;
            v177 = *((_OWORD *)v256 + 1);
            v277 = *(_OWORD *)v256;
            v278 = v177;
            LOWORD(v279) = *((_WORD *)v256 + 16);
            v268[0] = v277;
            v269 = v177;
            LOWORD(v270) = v279;
            swift_unknownObjectRetain(v171);
            sub_100031ECC((uint64_t)v268);
            sub_100031ECC((uint64_t)&v269);
            v178 = (void (*)(__int128 *, _QWORD))v264(&v272, v83, v81);
            v180 = v179;
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v179 + 8));
            *(_QWORD *)&v281 = *(_QWORD *)(v180 + 8);
            *(_QWORD *)(v180 + 8) = 0x8000000000000000;
            sub_100030460((uint64_t)v173, (uint64_t)&v277, isUniquelyReferenced_nonNull_native);
            v182 = *(_QWORD *)(v180 + 8);
            *(_QWORD *)(v180 + 8) = v281;
            swift_bridgeObjectRelease(v182);
            sub_100031EF4((uint64_t)v268);
            sub_100031EF4((uint64_t)&v269);
            v178(&v272, 0);
            v183 = v259;
          }
          else
          {
            v183 = v259;
            v176 = (uint64_t)v256;
          }
          v168 = v246;
          goto LABEL_53;
        }
        swift_unknownObjectRelease(v171);
      }
      else
      {
        v173 = 0;
      }
      v183 = v259;
      v176 = (uint64_t)v256;
LABEL_53:
      v90 = v261;
      (*(void (**)(char *, uint64_t, uint64_t))(v169 + 80))(v168, v261, v169);

      (*(void (**)(char *, uint64_t))(v260 + 8))(v168, v183);
      sub_100031F1C(v176);
      goto LABEL_64;
    }
    if (!swift_dynamicCast(&v277, v276, v80, &type metadata for DNSRecords.TXT, 0))
    {
      if (swift_dynamicCast(&v272, v276, v80, &type metadata for DNSRecords.ARPA, 0))
      {
        v277 = v272;
        v278 = v273;
        v279 = v274;
        v280 = v275;
        (*(void (**)(__int128 *, uint64_t))(AssociatedConformanceWitness + 96))(&v277, v71);
        sub_100031DD8((uint64_t)&v277);
        v83 = v265;
        v81 = v266;
        v90 = v71;
      }
      else
      {
        v203 = v38;
        v204 = swift_dynamicCast(&v277, v276, v80, &type metadata for DNSRecords.AAAA, 0);
        v83 = v265;
        if (v204)
        {
          v205 = *((_QWORD *)&v280 + 1);
          swift_bridgeObjectRelease(v278);
          swift_bridgeObjectRelease(v205);
        }
        else
        {
          *(_QWORD *)&v277 = v267;
          v215 = (uint64_t (*)(__int128 *, unint64_t, unint64_t))v239;
          v238(v265, v35);
          v216 = sub_100031D80(v203, (uint64_t)&v277);
          v217 = Logger.logObject.getter(v216);
          v218 = static os_log_type_t.error.getter(v217);
          if (os_log_type_enabled(v217, v218))
          {
            v219 = (uint8_t *)swift_slowAlloc(12, -1);
            v220 = swift_slowAlloc(32, -1);
            *(_QWORD *)&v269 = v220;
            *(_DWORD *)v219 = 136315138;
            sub_100031D80((uint64_t)&v277, (uint64_t)&v272);
            v221 = String.init<A>(describing:)(&v272, v80);
            v223 = v222;
            *(_QWORD *)&v272 = sub_100013CC8(v221, v222, (uint64_t *)&v269);
            v83 = v265;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v272, (char *)&v272 + 8);
            swift_bridgeObjectRelease(v223);
            sub_100014430(&v277);
            _os_log_impl((void *)&_mh_execute_header, v217, v218, "Failed to stop advertising for record %s", v219, 0xCu);
            swift_arrayDestroy(v220, 1, &type metadata for Any[8]);
            swift_slowDealloc(v220, -1, -1);
            swift_slowDealloc(v219, -1, -1);

            v224 = (uint64_t (*)(__int128 *, unint64_t, unint64_t))v239;
          }
          else
          {
            sub_100014430(&v277);

            v224 = v215;
          }
          v75(v224, v255);
        }
        v81 = v266;
        v90 = v71;
      }
      goto LABEL_64;
    }
    v137 = *((_QWORD *)&v277 + 1);
    v138 = *((_QWORD *)&v278 + 1);
    v263 = v280;
    v264 = (uint64_t (*)(__int128 *, unint64_t, unint64_t))*((_QWORD *)&v279 + 1);
    v272 = v277;
    v273 = v278;
    LOWORD(v274) = v279;
    v269 = v277;
    v270 = v278;
    v271 = v279;
    v81 = v266;
    v139 = *(char **)(v266 + 56);
    swift_bridgeObjectRetain(*((_QWORD *)&v277 + 1));
    swift_bridgeObjectRetain(v138);
    v140 = v265;
    v256 = v139;
    v141 = (void (*)(_OWORD *, _QWORD, __n128))((uint64_t (*)(_OWORD *, unint64_t, unint64_t))v139)(v268, v265, v81);
    v142 = sub_10001670C();
    v143 = type metadata accessor for Dictionary(0, &type metadata for DNSRecords.PTR, v68, v142);
    v144 = v245;
    Dictionary.removeValue(forKey:)(v245, &v269, v143);
    v145 = v144;
    v146 = v137;
    swift_bridgeObjectRelease(v138);
    v147 = swift_bridgeObjectRelease(v137);
    v141(v268, 0, v147);
    v148 = v260;
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v260 + 48))(v145, 1, v68) == 1)
    {
      (*(void (**)(_QWORD *, uint64_t))(v249 + 8))(v145, v250);
      v149 = *(uint64_t (**)(unint64_t, unint64_t))(v81 + 40);
      swift_bridgeObjectRetain(v137);
      swift_bridgeObjectRetain(v138);
      v150 = v149(v140, v81);
      v152 = v151;
      v154 = v153;
      v156 = v155;
      if (*(_QWORD *)(v151 + 16) && (v157 = sub_10002D93C((uint64_t)&v272), (v158 & 1) != 0))
      {
        v159 = (char *)*(id *)(*(_QWORD *)(v152 + 56) + 8 * v157);
        swift_bridgeObjectRelease(v138);
        swift_bridgeObjectRelease(v137);
        swift_bridgeObjectRelease(v156);
        swift_bridgeObjectRelease(v154);
        swift_bridgeObjectRelease(v152);
        swift_bridgeObjectRelease(v150);
        v160 = &v159[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_txtInfo];
        v161 = *(_QWORD *)&v159[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_txtInfo];
        v162 = *(_QWORD *)&v159[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_txtInfo
                              + 8];
        v163 = *(_QWORD *)&v159[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_txtInfo
                              + 16];
        v164 = *(_QWORD *)&v159[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_txtInfo
                              + 24];
        v165 = *(_QWORD *)&v159[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_txtInfo
                              + 32];
        v166 = *(_QWORD *)&v159[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_txtInfo
                              + 40];
        v167 = *(_QWORD *)&v159[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_txtInfo
                              + 48];
        *(_OWORD *)v160 = 0u;
        *((_OWORD *)v160 + 1) = 0u;
        *((_OWORD *)v160 + 2) = 0u;
        *((_QWORD *)v160 + 6) = 0;
        sub_100031E0C(v161, v162, v163, v164, v165, v166, v167);
        swift_bridgeObjectRelease(v138);
        swift_bridgeObjectRelease(v137);
        sub_10000E614((uint64_t)v264, v263);

      }
      else
      {
        swift_bridgeObjectRelease(v156);
        swift_bridgeObjectRelease(v154);
        swift_bridgeObjectRelease(v152);
        swift_bridgeObjectRelease(v150);
        swift_bridgeObjectRelease_n(v138, 2);
        swift_bridgeObjectRelease_n(v137, 2);
        sub_10000E614((uint64_t)v264, v263);
      }
      v83 = v265;
      v81 = v266;
      v90 = v261;
      goto LABEL_64;
    }
    v184 = v145;
    v185 = v244;
    (*(void (**)(char *, _QWORD *, uint64_t))(v148 + 32))(v244, v184, v68);
    v186 = (*(uint64_t (**)(char *, uint64_t))(AssociatedConformanceWitness + 72))(v185, v261);
    if (v186)
    {
      v187 = v186;
      v188 = type metadata accessor for BonjourAdvertiser(0);
      v189 = swift_dynamicCastClass(v187, v188);
      if (v189)
      {
        v190 = v189 + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_txtInfo;
        v191 = *(_QWORD *)(v189 + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_txtInfo);
        v192 = *(_QWORD *)(v189
                         + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_txtInfo
                         + 8);
        v193 = *(_QWORD *)(v189
                         + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_txtInfo
                         + 16);
        v194 = *(_QWORD *)(v189
                         + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_txtInfo
                         + 24);
        v195 = (char *)v189;
        v196 = *(_QWORD *)(v189
                         + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_txtInfo
                         + 32);
        v255 = *(_QWORD *)(v189
                         + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_txtInfo
                         + 40);
        v253 = *(_QWORD *)(v189
                         + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_txtInfo
                         + 48);
        *(_OWORD *)v190 = 0u;
        *(_OWORD *)(v190 + 16) = 0u;
        *(_OWORD *)(v190 + 32) = 0u;
        *(_QWORD *)(v190 + 48) = 0;
        swift_unknownObjectRetain(v187);
        sub_100031E0C(v191, v192, v193, v194, v196, v255, v253);
        v197 = *(_QWORD *)&v195[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_service];
        v198 = *(_QWORD *)&v195[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_service
                              + 8];
        v200 = *(_QWORD *)&v195[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_service
                              + 16];
        v199 = *(_QWORD *)&v195[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_service
                              + 24];
        sub_100031E6C(v197, v198, v200, v199);
        swift_unknownObjectRelease(v187);
        if (v198)
        {
          sub_100031E9C(v197, v198, v200, v199);
          v81 = v266;
          v68 = v259;
          v201 = v244;
          v202 = v195;
LABEL_62:
          swift_bridgeObjectRetain(v146);
          swift_bridgeObjectRetain(v138);
          v229 = v202;
          v230 = (void (*)(__int128 *, _QWORD))((uint64_t (*)(__int128 *, unint64_t, unint64_t))v256)(&v269, v265, v81);
          sub_1000252E8((uint64_t)v202, (uint64_t)&v272);
          v230(&v269, 0);
          v148 = v260;
          goto LABEL_63;
        }
        v226 = (uint64_t)&v195[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_srvInfo];
        swift_beginAccess(&v195[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_srvInfo], v268, 0, 0);
        v227 = v226;
        v225 = v242;
        sub_100033B48(v227, v242, &qword_100404B80);
        v228 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v258 + 48))(v225, 1, v257);
        v81 = v266;
        v68 = v259;
        v148 = v260;
        v201 = v244;
        v202 = v195;
        if (v228 != 1)
        {
          sub_100033A84(v225, &qword_100404B80);
          goto LABEL_62;
        }
LABEL_59:
        sub_100033A84(v225, &qword_100404B80);
LABEL_63:
        v231 = v201;
        v232 = v201;
        v90 = v261;
        (*(void (**)(char *, uint64_t))(AssociatedConformanceWitness + 80))(v231, v261);
        swift_bridgeObjectRelease(v138);
        swift_bridgeObjectRelease(v146);
        sub_10000E614((uint64_t)v264, v263);

        (*(void (**)(char *, uint64_t))(v148 + 8))(v232, v68);
        v83 = v265;
        goto LABEL_64;
      }
      swift_unknownObjectRelease(v187);
    }
    v225 = v242;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v258 + 56))(v242, 1, 1, v78);
    v202 = 0;
    v201 = v244;
    goto LABEL_59;
  }
  v277 = v272;
  v278 = v273;
  LOWORD(v279) = v274;
  v269 = v272;
  v270 = v273;
  v271 = v274;
  v81 = v266;
  v82 = *(uint64_t (**)(__int128 *, unint64_t, unint64_t))(v266 + 56);
  v83 = v265;
  v84 = (void (*)(_OWORD *, _QWORD))v82(v268, v265, v266);
  v85 = sub_10001670C();
  v86 = type metadata accessor for Dictionary(0, &type metadata for DNSRecords.PTR, v68, v85);
  v87 = v252;
  Dictionary.removeValue(forKey:)(v252, &v269, v86);
  v84(v268, 0);
  v88 = v260;
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v260 + 48))(v87, 1, v68) != 1)
  {
    v119 = *(void (**)(char *, _QWORD *, uint64_t))(v88 + 32);
    v120 = v251;
    v119(v251, v87, v68);
    v121 = (*(uint64_t (**)(char *, uint64_t))(AssociatedConformanceWitness + 72))(v120, v261);
    if (v121)
    {
      v122 = v121;
      v123 = type metadata accessor for BonjourAdvertiser(0);
      v124 = swift_dynamicCastClass(v122, v123);
      if (v124)
      {
        v125 = (char *)v124;
        v126 = v124 + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_service;
        v127 = *(_QWORD *)(v124 + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_service);
        v128 = *(_QWORD *)(v124
                         + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_service
                         + 8);
        v129 = *(_QWORD *)(v124
                         + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_service
                         + 16);
        v130 = *(_QWORD *)(v124
                         + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_service
                         + 24);
        *(_OWORD *)v126 = 0u;
        *(_OWORD *)(v126 + 16) = 0u;
        *(_WORD *)(v126 + 32) = 0;
        swift_unknownObjectRetain(v122);
        sub_100031E9C(v127, v128, v129, v130);
        v131 = *(_QWORD *)&v125[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_txtInfo];
        v132 = *(_QWORD *)&v125[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_txtInfo
                              + 8];
        v133 = *(_QWORD *)&v125[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_txtInfo
                              + 16];
        v134 = *(_QWORD *)&v125[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_txtInfo
                              + 24];
        v135 = *(_QWORD *)&v125[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_txtInfo
                              + 32];
        v136 = *(_QWORD *)&v125[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_txtInfo
                              + 48];
        v264 = *(uint64_t (**)(__int128 *, unint64_t, unint64_t))&v125[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_txtInfo
                                                                                             + 40];
        sub_100031FA0(v131, v132, v133, v134, v135, (uint64_t)v264, v136);
        swift_unknownObjectRelease(v122);
        if (v132)
        {
          sub_100031E0C(v131, v132, v133, v134, v135, (uint64_t)v264, v136);
          v83 = v265;
          v81 = v266;
          v68 = v259;
LABEL_47:
          v207 = v251;
          v211 = v125;
          v212 = (void (*)(__int128 *, _QWORD))v82(&v269, v83, v81);
          sub_1000252E8((uint64_t)v125, (uint64_t)&v277);
          v212(&v269, 0);
          goto LABEL_48;
        }
        v208 = &v125[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_srvInfo];
        swift_beginAccess(&v125[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_srvInfo], v268, 0, 0);
        v209 = (uint64_t)v208;
        v206 = v247;
        sub_100033B48(v209, v247, &qword_100404B80);
        v210 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v258 + 48))(v206, 1, v257);
        v83 = v265;
        v81 = v266;
        v68 = v259;
        if (v210 != 1)
        {
          sub_100033A84(v206, &qword_100404B80);
          goto LABEL_47;
        }
LABEL_41:
        sub_100033A84(v206, &qword_100404B80);
        v281 = v277;
        sub_100031EF4((uint64_t)&v281);
        v269 = v278;
        LOWORD(v270) = v279;
        sub_100031EF4((uint64_t)&v269);
        v207 = v251;
LABEL_48:
        v213 = v207;
        v214 = v207;
        v90 = v261;
        (*(void (**)(char *, uint64_t))(AssociatedConformanceWitness + 80))(v213, v261);

        (*(void (**)(char *, uint64_t))(v260 + 8))(v214, v68);
        goto LABEL_64;
      }
      swift_unknownObjectRelease(v122);
    }
    v206 = v247;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v77 + 56))(v247, 1, 1, v78);
    v125 = 0;
    goto LABEL_41;
  }
  (*(void (**)(_QWORD *, uint64_t))(v249 + 8))(v87, v250);
  v89 = (void (*)(__int128 *, _QWORD))v82(&v269, v83, v81);

  v89(&v269, 0);
  v268[0] = v277;
  sub_100031EF4((uint64_t)v268);
  v269 = v278;
  LOWORD(v270) = v279;
  sub_100031EF4((uint64_t)&v269);
  v90 = v261;
LABEL_64:
  sub_100014430(v276);
  sub_10001F2B8(v83, v81);
  return (*(uint64_t (**)(char *, uint64_t))(v241 + 8))(v254, v90);
}

uint64_t BonjourOffload.record(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  id v10;
  void *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD v16[8];

  v4 = type metadata accessor for Logger(0);
  v16[4] = *(_QWORD *)(v4 - 8);
  v16[5] = v4;
  __chkstk_darwin();
  v16[7] = (char *)v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = objc_msgSend(a1, "serviceKey");
  v7 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v6);
  v9 = v8;

  v10 = objc_msgSend(a1, "serviceValue");
  if (v10)
  {
    v11 = v10;
    v12 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v10);
    v14 = v13;

  }
  else
  {
    v12 = 0;
    v14 = 0xF000000000000000;
  }
  v16[6] = a2;
  static DNSRecords.createRecord(with:value:)(v7, v9, v12, v14);
  sub_10000E658(v12, v14);
  return sub_10000E614(v7, v9);
}

uint64_t BonjourOffload.startBrowsing(record:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  void (*v32)(uint64_t, uint64_t);
  void (*v34)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v35;
  uint64_t v36;
  void (*v37)(uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  int v43;
  _BOOL4 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t (*v51)(uint64_t, uint64_t);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  os_log_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _BYTE *v74;
  uint64_t v75;
  __int128 v76;
  int v77;
  uint64_t v78;
  int v79;
  _BYTE *v80;
  objc_class *v81;
  char *v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void (*v88)(_QWORD, _QWORD, _QWORD, char *, uint64_t, uint64_t);
  char *v89;
  uint64_t v90;
  _BYTE *v91;
  uint64_t v92;
  NSObject *v93;
  os_log_type_t v94;
  uint8_t *v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  _BYTE *v101;
  void (*v102)(__int128 *, _QWORD);
  unint64_t v103;
  uint64_t v104;
  _BYTE v105[4];
  int v106;
  os_log_t v107;
  uint64_t v108;
  uint64_t v109;
  void (*v110)(uint64_t, uint64_t);
  uint64_t v111;
  _BYTE *v112;
  _BYTE *v113;
  _BYTE *v114;
  uint64_t v115;
  _BYTE *v116;
  _BYTE *v117;
  _BYTE *v118;
  uint64_t v119;
  uint64_t v120;
  _BYTE *v121;
  _BYTE *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  _BYTE *v126;
  uint64_t v127;
  _BYTE *v128;
  _BYTE *v129;
  uint64_t v130;
  _BYTE *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  _BYTE *v138;
  uint64_t v139;
  objc_super v140;
  uint64_t v141[8];
  __int128 v142;
  char v143;
  char v144;
  __int128 v145;
  _OWORD v146[2];
  uint64_t v147[5];
  __int128 v148;
  _OWORD v149[5];

  v139 = a2;
  v136 = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, a3, a2, &protocol requirements base descriptor for BonjourOffload);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a3, a2, AssociatedTypeWitness, &protocol requirements base descriptor for BonjourOffload, &associated conformance descriptor for BonjourOffload.BonjourOffload.DiscoveryEngine: BonjourOffloadDiscoveryEngine);
  v8 = swift_getAssociatedTypeWitness(255, AssociatedConformanceWitness, AssociatedTypeWitness, &protocol requirements base descriptor for BonjourOffloadDiscoveryEngine);
  v9 = type metadata accessor for Optional(0, v8);
  v119 = *(_QWORD *)(v9 - 8);
  v120 = v9;
  __chkstk_darwin();
  v118 = &v105[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin();
  v116 = &v105[-v11];
  v123 = v8;
  v115 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin();
  v112 = &v105[-v12];
  v132 = AssociatedConformanceWitness;
  v133 = swift_getAssociatedTypeWitness(255, AssociatedConformanceWitness, AssociatedTypeWitness, &protocol requirements base descriptor for BonjourOffloadDiscoveryEngine);
  v13 = type metadata accessor for Optional(0, v133);
  v124 = *(_QWORD *)(v13 - 8);
  v125 = v13;
  __chkstk_darwin();
  v122 = &v105[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin();
  v121 = &v105[-v15];
  __chkstk_darwin();
  v131 = &v105[-v16];
  v17 = type metadata accessor for Logger(0);
  v18 = *(_QWORD *)(v17 - 8);
  v134 = v17;
  v135 = v18;
  __chkstk_darwin();
  v126 = &v105[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin();
  v113 = &v105[-v20];
  __chkstk_darwin();
  v117 = &v105[-v21];
  __chkstk_darwin();
  v114 = &v105[-v22];
  __chkstk_darwin();
  v128 = &v105[-v23];
  __chkstk_darwin();
  v138 = &v105[-v24];
  v25 = type metadata accessor for Optional(0, AssociatedTypeWitness);
  v26 = *(_QWORD *)(v25 - 8);
  __chkstk_darwin();
  v28 = &v105[-v27];
  v29 = *(_QWORD *)(AssociatedTypeWitness - 8);
  __chkstk_darwin();
  v31 = &v105[-v30];
  v32 = *(void (**)(uint64_t, uint64_t))(a3 + 64);
  v137 = v3;
  v32(v139, a3);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v29 + 48))(v28, 1, AssociatedTypeWitness) == 1)
    return (*(uint64_t (**)(_BYTE *, uint64_t))(v26 + 8))(v28, v25);
  v111 = v29;
  v34 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v29 + 32);
  v129 = v31;
  v34(v31, v28, AssociatedTypeWitness);
  v35 = v137;
  *(_QWORD *)&v148 = v137;
  v36 = a3;
  v37 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a3 + 8) + 8);
  v38 = v139;
  v109 = *(_QWORD *)(a3 + 8);
  v110 = v37;
  ((void (*)(uint64_t))v37)(v139);
  v39 = v136;
  sub_100031D80(v136, (uint64_t)&v148);
  v40 = swift_unknownObjectRetain_n(v35, 4);
  v41 = Logger.logObject.getter(v40);
  v42 = static os_log_type_t.info.getter();
  v43 = v42;
  v44 = os_log_type_enabled(v41, v42);
  v130 = v36;
  v127 = AssociatedTypeWitness;
  if (v44)
  {
    v45 = swift_slowAlloc(32, -1);
    v108 = swift_slowAlloc(32, -1);
    v147[0] = v108;
    *(_DWORD *)v45 = 136315650;
    v107 = v41;
    sub_100031D80((uint64_t)&v148, (uint64_t)&v145);
    v46 = sub_100012C44(&qword_100404B88);
    v47 = String.init<A>(describing:)(&v145, v46);
    v49 = v48;
    *(_QWORD *)&v145 = sub_100013CC8(v47, v48, v147);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v145, (char *)&v145 + 8);
    swift_bridgeObjectRelease(v49);
    sub_100014430(&v148);
    *(_WORD *)(v45 + 12) = 2048;
    v106 = v43;
    v50 = v35;
    v51 = *(uint64_t (**)(uint64_t, uint64_t))(v36 + 40);
    v52 = v51(v38, v36);
    v54 = v53;
    v56 = v55;
    swift_bridgeObjectRelease(v57);
    swift_bridgeObjectRelease(v54);
    swift_bridgeObjectRelease(v56);
    v58 = sub_1000166C8();
    v59 = Dictionary.count.getter(v52, &type metadata for DNSRecords.Identifier, v133, v58);
    swift_unknownObjectRelease(v50);
    swift_bridgeObjectRelease(v52);
    *(_QWORD *)&v145 = v59;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v145, (char *)&v145 + 8);
    swift_unknownObjectRelease(v50);
    *(_WORD *)(v45 + 22) = 2048;
    v60 = v51(v38, v130);
    v35 = v50;
    v61 = v60;
    v63 = v62;
    v65 = v64;
    swift_bridgeObjectRelease(v66);
    swift_bridgeObjectRelease(v63);
    swift_bridgeObjectRelease(v61);
    v67 = swift_getAssociatedTypeWitness(0, v132, v127, &protocol requirements base descriptor for BonjourOffloadDiscoveryEngine);
    v68 = sub_10001670C();
    v69 = Dictionary.count.getter(v65, &type metadata for DNSRecords.PTR, v67, v68);
    swift_unknownObjectRelease(v50);
    swift_bridgeObjectRelease(v65);
    *(_QWORD *)&v145 = v69;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v145, (char *)&v145 + 8);
    swift_unknownObjectRelease(v50);
    v70 = v107;
    _os_log_impl((void *)&_mh_execute_header, v107, (os_log_type_t)v106, "Starting browse for %s (browses: %ld, advertises: %ld)", (uint8_t *)v45, 0x20u);
    v71 = v108;
    swift_arrayDestroy(v108, 1, &type metadata for Any[8]);
    swift_slowDealloc(v71, -1, -1);
    v72 = v45;
    v39 = v136;
    swift_slowDealloc(v72, -1, -1);

  }
  else
  {
    swift_unknownObjectRelease_n(v35, 2);
    sub_100014430(&v148);

    swift_unknownObjectRelease_n(v35, 2);
  }
  v73 = v134;
  v74 = *(_BYTE **)(v135 + 8);
  ((void (*)(_BYTE *, uint64_t))v74)(v138, v134);
  sub_100031D80(v39, (uint64_t)v147);
  v75 = sub_100012C44(&qword_100404B88);
  if (swift_dynamicCast(&v145, v147, v75, &type metadata for DNSRecords.Identifier, 0))
  {
    v76 = v145;
    v77 = LOBYTE(v146[0]);
    v138 = v74;
    v78 = v73;
    v79 = BYTE1(v146[0]);
    *(_QWORD *)&v148 = v35;
    swift_bridgeObjectRetain(*((_QWORD *)&v145 + 1));
    v80 = v128;
    v110(v139, v109);
    v81 = (objc_class *)type metadata accessor for BonjourBrowser(0);
    v82 = (char *)objc_allocWithZone(v81);
    *(_QWORD *)&v82[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB14BonjourBrowser_delegate] = 0;
    *(_QWORD *)&v82[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB14BonjourBrowser_discoveredPeers] = _swiftEmptyDictionarySingleton;
    v83 = &v82[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB14BonjourBrowser_service];
    *(_OWORD *)v83 = v76;
    v83[16] = v77;
    v83[17] = v79;
    (*(void (**)(char *, _BYTE *, uint64_t))(v135 + 16))(&v82[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB14BonjourBrowser_logger], v80, v78);
    v140.receiver = v82;
    v140.super_class = v81;
    v84 = (char *)objc_msgSendSuper2(&v140, "init");
    ((void (*)(_BYTE *, uint64_t))v138)(v80, v78);
    v85 = (*(uint64_t (**)(uint64_t))(v130 + 32))(v139);
    v86 = *(_QWORD *)&v84[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB14BonjourBrowser_delegate];
    *(_QWORD *)&v84[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB14BonjourBrowser_delegate] = v85;
    swift_unknownObjectRelease(v86);
    v87 = v132;
    v88 = *(void (**)(_QWORD, _QWORD, _QWORD, char *, uint64_t, uint64_t))(v132 + 32);
    LODWORD(v138) = v77;
    v89 = v84;
    v90 = v127;
    v88(v76, *((_QWORD *)&v76 + 1), v77 | (v79 << 8), v89, v127, v87);

    v100 = v133;
    v101 = v131;
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v133 - 8) + 56))(v131, 0, 1, v133);
    v142 = v76;
    v143 = (char)v138;
    v144 = v79;
    v102 = (void (*)(__int128 *, _QWORD))(*(uint64_t (**)(__int128 *, uint64_t))(v130 + 56))(&v148, v139);
    v103 = sub_1000166C8();
    v104 = type metadata accessor for Dictionary(0, &type metadata for DNSRecords.Identifier, v100, v103);
    Dictionary.subscript.setter(v101, &v142, v104);
    v102(&v148, 0);

    (*(void (**)(_BYTE *, uint64_t))(v111 + 8))(v129, v90);
  }
  else
  {
    if (swift_dynamicCast(&v145, v147, v75, &type metadata for DNSRecords.Browse, 0))
    {
      v148 = v145;
      v149[0] = v146[0];
      *(_OWORD *)((char *)v149 + 10) = *(_OWORD *)((char *)v146 + 10);
      __asm { BR              X10 }
    }
    if (swift_dynamicCast(&v145, v147, v75, &type metadata for DNSRecords.BrowseHost, 0))
      __asm { BR              X10 }
    if (swift_dynamicCast(&v145, v147, v75, &type metadata for DNSRecords.ARPABrowse, 0))
    {
      (*(void (**)(_BYTE *, uint64_t))(v111 + 8))(v129, v127);
      swift_bridgeObjectRelease(*((_QWORD *)&v146[0] + 1));
    }
    else
    {
      *(_QWORD *)&v145 = v35;
      v91 = v126;
      v110(v139, v109);
      v92 = sub_100031D80(v39, (uint64_t)&v145);
      v93 = Logger.logObject.getter(v92);
      v94 = static os_log_type_t.error.getter(v93);
      if (os_log_type_enabled(v93, v94))
      {
        v95 = (uint8_t *)swift_slowAlloc(12, -1);
        v96 = swift_slowAlloc(32, -1);
        v141[0] = v96;
        *(_DWORD *)v95 = 136315138;
        v138 = v74;
        sub_100031D80((uint64_t)&v145, (uint64_t)&v142);
        v97 = String.init<A>(describing:)(&v142, v75);
        v99 = v98;
        *(_QWORD *)&v142 = sub_100013CC8(v97, v98, v141);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v142, (char *)&v142 + 8);
        swift_bridgeObjectRelease(v99);
        sub_100014430(&v145);
        _os_log_impl((void *)&_mh_execute_header, v93, v94, "Failed to start browsing for record %s", v95, 0xCu);
        swift_arrayDestroy(v96, 1, &type metadata for Any[8]);
        swift_slowDealloc(v96, -1, -1);
        swift_slowDealloc(v95, -1, -1);

        ((void (*)(_BYTE *, uint64_t))v138)(v91, v134);
      }
      else
      {
        sub_100014430(&v145);

        ((void (*)(_BYTE *, uint64_t))v74)(v91, v73);
      }
      (*(void (**)(_BYTE *, uint64_t))(v111 + 8))(v129, v127);
    }
  }
  return sub_100014430(v147);
}

void sub_100024428()
{
  uint64_t v0;

  swift_bridgeObjectRelease(v0);
  JUMPOUT(0x1000243ECLL);
}

void sub_100024434()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int16 v8;
  __n128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  unint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  Swift::String v33;
  uint64_t v34;
  unint64_t v35;
  Swift::String v36;
  Swift::String v37;
  unint64_t v38;
  _QWORD v39[6];

  v5 = *(_QWORD *)(v4 - 168);
  v6 = *(_QWORD *)(v4 - 160);
  v7 = *(_OWORD *)(v1 + 112);
  *(_OWORD *)(v0 + 320) = v7;
  v8 = *(_WORD *)(v4 - 136);
  *(_WORD *)(v0 + 336) = v8;
  *(_QWORD *)(v0 + 232) = v5;
  *(_QWORD *)(v0 + 384) = v5;
  *(_QWORD *)(v0 + 392) = v6;
  *(_OWORD *)(v0 + 400) = v7;
  *(_WORD *)(v0 + 416) = v8;
  sub_1000322BC(v4 - 176);
  *(_QWORD *)(v0 + 240) = v6;
  v9 = swift_bridgeObjectRelease(v6);
  v10 = *(_QWORD *)(v0 + 192);
  v11 = *(_QWORD *)(v0 + 264);
  v12 = (*(uint64_t (**)(uint64_t, uint64_t, __n128))(v10 + 40))(v11, v10, v9);
  v14 = v13;
  v16 = v15;
  v18 = v17;
  *(_OWORD *)(v0 + 288) = *(_OWORD *)(v0 + 320);
  *(_WORD *)(v0 + 304) = *(_WORD *)(v0 + 336);
  v19 = sub_1000166C8();
  v20 = *(_QWORD **)(v0 + 120);
  Dictionary.subscript.getter(v20, v0 + 288, v12, &type metadata for DNSRecords.Identifier, *(_QWORD *)(v0 + 216), v19);
  swift_bridgeObjectRelease(v18);
  swift_bridgeObjectRelease(v16);
  swift_bridgeObjectRelease(v14);
  swift_bridgeObjectRelease(v12);
  sub_100031EF4(v0 + 320);
  __chkstk_darwin();
  v39[2] = v11;
  v39[3] = v10;
  v39[4] = *(_QWORD *)(v0 + 184);
  v21 = type metadata accessor for BonjourBrowser(0);
  v22 = *(_QWORD *)(v0 + 152);
  sub_100025664((void (*)(char *, char *))sub_100033C8C, (uint64_t)v39, (uint64_t)&type metadata for Never, v21, v23, v4 - 128);
  (*(void (**)(_QWORD *, uint64_t))(*(_QWORD *)(v0 + 144) + 8))(v20, v22);
  v24 = *(void **)(v4 - 128);
  if (v24)
  {
    sub_10002972C(v0 + 384);
    swift_bridgeObjectRelease(*(_QWORD *)(v0 + 240));
    sub_100031EF4(v0 + 320);

    JUMPOUT(0x1000243F8);
  }
  v25 = *(_QWORD *)(v0 + 240);
  *(_QWORD *)(v0 + 288) = v3;
  (*(void (**)(uint64_t, _QWORD))(v0 + 32))(v11, *(_QWORD *)(v0 + 24));
  sub_1000322BC(v4 - 176);
  sub_1000322BC(v4 - 176);
  v26 = sub_1000322BC(v4 - 176);
  v27 = Logger.logObject.getter(v26);
  v28 = static os_log_type_t.error.getter(v27);
  if (os_log_type_enabled(v27, v28))
  {
    v30 = *(_QWORD *)(v0 + 320);
    v29 = *(_QWORD *)(v0 + 328);
    v31 = swift_slowAlloc(22, -1);
    v32 = swift_slowAlloc(64, -1);
    *(_QWORD *)(v4 - 128) = v32;
    *(_DWORD *)v31 = 136315394;
    *(_QWORD *)(v0 + 288) = v30;
    *(_QWORD *)(v0 + 296) = v29;
    sub_100031ECC(v0 + 320);
    swift_bridgeObjectRetain(v29);
    v33._countAndFlagsBits = 24366;
    v33._object = (void *)0xE200000000000000;
    String.append(_:)(v33);
    if (*(_BYTE *)(v0 + 336))
      v34 = 7365749;
    else
      v34 = 7365492;
    *(_QWORD *)(v0 + 256) = v2;
    v35 = 0xE300000000000000;
    String.append(_:)(*(Swift::String *)&v34);
    swift_bridgeObjectRelease(0xE300000000000000);
    v36._countAndFlagsBits = 46;
    v36._object = (void *)0xE100000000000000;
    String.append(_:)(v36);
    v37._countAndFlagsBits = 0x6C61636F6CLL;
    v37._object = (void *)0xE500000000000000;
    String.append(_:)(v37);
    sub_100031EF4(v0 + 320);
    v38 = *(_QWORD *)(v0 + 296);
    *(_QWORD *)(v0 + 288) = sub_100013CC8(*(_QWORD *)(v0 + 288), v38, (uint64_t *)(v4 - 128));
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 288, v0 + 296);
    swift_bridgeObjectRelease(v38);
    sub_100032288(v4 - 176);
    sub_100032288(v4 - 176);
    *(_WORD *)(v31 + 12) = 2080;
    swift_bridgeObjectRetain(v25);
    *(_QWORD *)(v0 + 288) = sub_100013CC8(*(_QWORD *)(v0 + 232), v25, (uint64_t *)(v4 - 128));
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 288, v0 + 296);
    swift_bridgeObjectRelease(v25);
    sub_100032288(v4 - 176);
    sub_100032288(v4 - 176);
    _os_log_impl((void *)&_mh_execute_header, v27, v28, "Cannot find browse for %s when querying TXT record for %s", (uint8_t *)v31, 0x16u);
    swift_arrayDestroy(v32, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v32, -1, -1);
    swift_slowDealloc(v31, -1, -1);

    JUMPOUT(0x100024318);
  }
  sub_100032288(v4 - 176);
  sub_100032288(v4 - 176);
  sub_100032288(v4 - 176);
  sub_100032288(v4 - 176);

  JUMPOUT(0x1000243E8);
}

void sub_100025214(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  uint64_t v9;
  _OWORD v10[2];

  v4 = v3;
  if (*(_QWORD *)(a1 + 24))
  {
    sub_100033A2C((_OWORD *)a1, v10);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v9 = *v3;
    *v3 = 0x8000000000000000;
    sub_100030310(v10, a2, a3, isUniquelyReferenced_nonNull_native);
    v8 = *v3;
    *v4 = v9;
    swift_bridgeObjectRelease(a3);
    swift_bridgeObjectRelease(v8);
  }
  else
  {
    sub_100033A84(a1, &qword_100405050);
    sub_10002FC54(a2, a3, v10);
    swift_bridgeObjectRelease(a3);
    sub_100033A84((uint64_t)v10, &qword_100405050);
  }
}

void sub_1000252E8(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  __int128 v4;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  __int128 v10;
  __int16 v11;
  __int128 v12;

  v4 = *(_OWORD *)(a2 + 16);
  v12 = *(_OWORD *)a2;
  v10 = v4;
  v11 = *(_WORD *)(a2 + 32);
  if (a1)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
    v9 = *v2;
    *v2 = 0x8000000000000000;
    sub_100030460(a1, a2, isUniquelyReferenced_nonNull_native);
    v7 = *v2;
    *v2 = v9;
    swift_bridgeObjectRelease(v7);
    sub_100031EF4((uint64_t)&v12);
    sub_100031EF4((uint64_t)&v10);
  }
  else
  {
    v8 = (void *)sub_10002FD54(a2);
    sub_100031EF4((uint64_t)&v12);
    sub_100031EF4((uint64_t)&v10);

  }
}

uint64_t sub_1000253A8(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  _OWORD v10[2];

  if (*(_QWORD *)(a1 + 24))
  {
    sub_100033A2C((_OWORD *)a1, v10);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
    v9 = *v2;
    *v2 = 0x8000000000000000;
    sub_1000306D0(v10, a2, isUniquelyReferenced_nonNull_native);
    v5 = *v2;
    *v2 = v9;
    swift_bridgeObjectRelease(v5);
    v6 = type metadata accessor for CodingUserInfoKey(0);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(a2, v6);
  }
  else
  {
    sub_100033A84(a1, &qword_100405050);
    sub_10002FE28(a2, v10);
    v8 = type metadata accessor for CodingUserInfoKey(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(a2, v8);
    return sub_100033A84((uint64_t)v10, &qword_100405050);
  }
}

void sub_10002548C(uint64_t a1, char a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  __n128 v13;
  char v14;
  unint64_t v15;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v3 = v2;
  sub_100012C44(&qword_100404EE8);
  __chkstk_darwin();
  v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for NANGenericServiceProtocol.Attribute(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin();
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1, 1, v8) == 1)
  {
    sub_100033A84(a1, &qword_100404EE8);
    v12 = sub_10002D744(a2);
    if ((v14 & 1) != 0)
    {
      v15 = v12;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
      v17 = *v3;
      v23 = *v3;
      *v3 = 0x8000000000000000;
      if (!isUniquelyReferenced_nonNull_native)
      {
        sub_100146FF4();
        v17 = v23;
      }
      sub_100033AC0(*(_QWORD *)(v17 + 56) + *(_QWORD *)(v9 + 72) * v15, (uint64_t)v7, type metadata accessor for NANGenericServiceProtocol.Attribute);
      sub_100145FE4(v15, v17);
      v18 = *v3;
      *v3 = v17;
      v13 = swift_bridgeObjectRelease(v18);
      v19 = 0;
    }
    else
    {
      v19 = 1;
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v9 + 56))(v7, v19, 1, v8, v13);
    sub_100033A84((uint64_t)v7, &qword_100404EE8);
  }
  else
  {
    sub_100033AC0(a1, (uint64_t)v11, type metadata accessor for NANGenericServiceProtocol.Attribute);
    v20 = swift_isUniquelyReferenced_nonNull_native(*v3);
    v23 = *v3;
    *v3 = 0x8000000000000000;
    sub_100030E88((uint64_t)v11, a2, v20);
    v21 = *v3;
    *v3 = v23;
    swift_bridgeObjectRelease(v21);
  }
}

uint64_t sub_100025664@<X0>(void (*a1)(char *, char *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, char *);
  uint64_t v29;

  v26 = a5;
  v27 = a2;
  v28 = a1;
  v29 = a6;
  v9 = *(_QWORD *)(a3 - 8);
  v10 = ((uint64_t (*)(void))__chkstk_darwin)();
  v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD *)(v13 + 16);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v10);
  v18 = (char *)&v25 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  v20 = (char *)&v25 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v21 + 16))(v20, v22);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v20, 1, v14) == 1)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 56))(v29, 1, 1, a4);
  v25 = a3;
  v24 = v26;
  (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v18, v20, v14);
  v28(v18, v12);
  result = (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v18, v14);
  if (v6)
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v9 + 32))(v24, v12, v25);
  return result;
}

uint64_t sub_1000257FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, a3, a2, &protocol requirements base descriptor for BonjourOffload, &associated type descriptor for BonjourOffload.DiscoveryEngine);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a3, a2, AssociatedTypeWitness, &protocol requirements base descriptor for BonjourOffload, &associated conformance descriptor for BonjourOffload.BonjourOffload.DiscoveryEngine: BonjourOffloadDiscoveryEngine);
  v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 40);
  v11 = swift_checkMetadataState(0, AssociatedTypeWitness);
  result = v10(a1, v11, AssociatedConformanceWitness);
  if (result)
  {
    v13 = result;
    v14 = type metadata accessor for BonjourBrowser(0);
    result = swift_dynamicCastClass(v13, v14);
    if (result)
    {
      *a4 = result;
      return result;
    }
    result = swift_unknownObjectRelease(v13);
  }
  *a4 = 0;
  return result;
}

_BYTE *sub_1000258E4@<X0>(_BYTE *result@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  id v12;

  if (a2 < 0 || 1 << *(_BYTE *)(a4 + 32) <= a2)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(_QWORD *)(a4 + (((unint64_t)a2 >> 3) & 0xFFFFFFFFFFFFF8) + 64) >> a2) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a4 + 36) == a3)
  {
    v5 = *(_QWORD *)(a4 + 48) + 40 * a2;
    v7 = *(_QWORD *)v5;
    v6 = *(_QWORD *)(v5 + 8);
    v8 = *(_QWORD *)(v5 + 16);
    v9 = *(_QWORD *)(v5 + 24);
    v10 = *(_BYTE *)(v5 + 32);
    LOBYTE(v5) = *(_BYTE *)(v5 + 33);
    v11 = *(_QWORD *)(a4 + 56) + 16 * a2;
    v12 = *(id *)v11;
    LOBYTE(v11) = *(_BYTE *)(v11 + 8);
    *(_QWORD *)result = v12;
    result[8] = v11;
    *(_QWORD *)a5 = v7;
    *(_QWORD *)(a5 + 8) = v6;
    *(_QWORD *)(a5 + 16) = v8;
    *(_QWORD *)(a5 + 24) = v9;
    *(_BYTE *)(a5 + 32) = v10;
    *(_BYTE *)(a5 + 33) = v5;
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v9);
    return v12;
  }
LABEL_8:
  __break(1u);
  return result;
}

uint64_t sub_1000259A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t Strong;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  uint64_t (*v19)(_BYTE *, uint64_t, uint64_t);
  void (*v20)(_BYTE *, _QWORD);
  unint64_t v21;
  uint64_t v22;
  _BYTE v24[32];
  _OWORD v25[2];
  __int16 v26;
  _BYTE v27[24];
  __int128 v28;
  __int128 v29;
  __int16 v30;
  __int128 v31;
  __int128 v32;
  __int16 v33;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, a4, a3, &protocol requirements base descriptor for BonjourOffload, &associated type descriptor for BonjourOffload.DiscoveryEngine);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a4, a3, AssociatedTypeWitness, &protocol requirements base descriptor for BonjourOffload, &associated conformance descriptor for BonjourOffload.BonjourOffload.DiscoveryEngine: BonjourOffloadDiscoveryEngine);
  v10 = swift_getAssociatedTypeWitness(255, AssociatedConformanceWitness, AssociatedTypeWitness, &protocol requirements base descriptor for BonjourOffloadDiscoveryEngine, &associated type descriptor for BonjourOffloadDiscoveryEngine.DatapathIdentifier);
  v11 = type metadata accessor for Optional(0, v10);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin();
  v14 = &v24[-v13];
  a1 += 16;
  swift_beginAccess(a1, v27, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(a1);
  if (Strong)
  {
    v16 = Strong;
    v17 = *(_OWORD *)(a2 + 24);
    v28 = *(_OWORD *)(a2 + 8);
    v29 = v17;
    v30 = *(_WORD *)(a2 + 40);
    v33 = v30;
    v31 = *(_OWORD *)(a2 + 8);
    v32 = v17;
    v18 = *(_OWORD *)(a2 + 24);
    v25[0] = v31;
    v25[1] = v18;
    v26 = *(_WORD *)(a2 + 40);
    v19 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(a4 + 56);
    sub_1000322BC(a2);
    v20 = (void (*)(_BYTE *, _QWORD))v19(v24, a3, a4);
    v21 = sub_10001670C();
    v22 = type metadata accessor for Dictionary(0, &type metadata for DNSRecords.PTR, v10, v21);
    Dictionary.removeValue(forKey:)(v14, v25, v22);
    sub_100031EF4((uint64_t)&v31);
    sub_100031EF4((uint64_t)&v32);
    (*(void (**)(_QWORD *, uint64_t))(v12 + 8))(v14, v11);
    v20(v24, 0);
    return swift_unknownObjectRelease(v16);
  }
  else
  {
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v14, 1, 1, v10);
    return (*(uint64_t (**)(_QWORD *, uint64_t))(v12 + 8))(v14, v11);
  }
}

uint64_t sub_100025BA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  char *v13;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE v31[24];
  uint64_t v32;

  v32 = a4;
  sub_100012C44(&qword_100404B80);
  __chkstk_darwin();
  v13 = &v31[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, a8, a7, &protocol requirements base descriptor for BonjourOffload, &associated type descriptor for BonjourOffload.DiscoveryEngine);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a8, a7, AssociatedTypeWitness, &protocol requirements base descriptor for BonjourOffload, &associated conformance descriptor for BonjourOffload.BonjourOffload.DiscoveryEngine: BonjourOffloadDiscoveryEngine);
  v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 112);
  v17 = swift_checkMetadataState(0, AssociatedTypeWitness);
  v18 = v16(a1, v17, AssociatedConformanceWitness);
  if (!v18)
    goto LABEL_5;
  v19 = v18;
  v20 = type metadata accessor for BonjourResolver(0);
  v21 = swift_dynamicCastClass(v19, v20);
  if (!v21)
  {
    swift_unknownObjectRelease(v19);
    v24 = 0;
    return v24 & 1;
  }
  v22 = v21 + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_srv;
  swift_beginAccess(v21 + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_srv, v31, 0, 0);
  sub_100033B48(v22, (uint64_t)v13, &qword_100404B80);
  swift_unknownObjectRelease(v19);
  v23 = type metadata accessor for DNSRecords.SRV(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 48))(v13, 1, v23) == 1)
  {
    sub_100033A84((uint64_t)v13, &qword_100404B80);
LABEL_5:
    v24 = 0;
    return v24 & 1;
  }
  v25 = &v13[*(int *)(v23 + 24)];
  v27 = *(_QWORD *)v25;
  v26 = *((_QWORD *)v25 + 1);
  swift_bridgeObjectRetain(v26);
  sub_100031F1C((uint64_t)v13);
  if (v27 == v32 && v26 == a5)
  {
    swift_bridgeObjectRelease(a5);
    v24 = 1;
  }
  else
  {
    v24 = _stringCompareWithSmolCheck(_:_:expecting:)(v27, v26, v32, a5, 0);
    swift_bridgeObjectRelease(v26);
  }
  return v24 & 1;
}

uint64_t sub_100025DB4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t);
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, a3, a2, &protocol requirements base descriptor for BonjourOffload, &associated type descriptor for BonjourOffload.DiscoveryEngine);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a3, a2, AssociatedTypeWitness, &protocol requirements base descriptor for BonjourOffload, &associated conformance descriptor for BonjourOffload.BonjourOffload.DiscoveryEngine: BonjourOffloadDiscoveryEngine);
  v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 112);
  v11 = swift_checkMetadataState(0, AssociatedTypeWitness);
  result = v10(a1, v11, AssociatedConformanceWitness);
  if (result)
  {
    v13 = result;
    v14 = type metadata accessor for BonjourResolver(0);
    result = swift_dynamicCastClass(v13, v14);
    if (result)
    {
      *a4 = result;
      return result;
    }
    result = swift_unknownObjectRelease(v13);
  }
  *a4 = 0;
  return result;
}

uint64_t BonjourOffload.startAdvertising(record:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  int v40;
  _BOOL4 v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t (*v49)(uint64_t, uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  os_log_t v70;
  void (*v71)(char *, uint64_t);
  uint64_t v72;
  void (*v73)(char *, uint64_t);
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t (*v78)(uint64_t, uint64_t);
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  unint64_t v86;
  char v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  __int128 v95;
  uint64_t (*v96)(uint64_t, uint64_t);
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  char v105;
  char *v106;
  unint64_t v107;
  uint64_t v108;
  char *v109;
  objc_class *v110;
  char *v111;
  char *v112;
  char *v113;
  void (*v114)(char *, char *, uint64_t);
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  __int16 v118;
  __int16 v119;
  __int16 v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t (*v130)(uint64_t, uint64_t);
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  NSObject *v140;
  _QWORD *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  char v152;
  char *v153;
  uint64_t v154;
  uint64_t *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t (*v163)(__int128 *, uint64_t, uint64_t);
  void (*v164)(__int128 *, _QWORD);
  uint64_t v165;
  void (*v166)(__int128 *, __int128 *, uint64_t, char *, uint64_t, uint64_t);
  char *v167;
  char *v168;
  objc_class *v169;
  uint64_t v170;
  objc_class *v171;
  char *v172;
  char *v173;
  char *v174;
  void (*v175)(char *, uint64_t);
  void (*v176)(char *, char *, uint64_t);
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  char *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  __int16 v185;
  uint64_t *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  unint64_t v192;
  __int128 v193;
  uint64_t v194;
  uint64_t (*v195)(_OWORD *, uint64_t, uint64_t);
  uint64_t v196;
  uint64_t (*v197)(_OWORD *, uint64_t, uint64_t);
  uint64_t v198;
  unint64_t v199;
  void (*v200)(__int128 *, _QWORD);
  void *v201;
  uint64_t v202;
  void (*v203)(__int128 *, __int128 *, __int128 *, char *, uint64_t, uint64_t);
  char *v204;
  uint64_t v205;
  __int128 v206;
  uint64_t v207;
  uint64_t (*v208)(__int128 *, uint64_t, uint64_t);
  char *v209;
  void (*v210)(__int128 *, _QWORD);
  uint64_t v211;
  uint64_t v212;
  char v213;
  uint64_t v214;
  int v215;
  uint64_t v216;
  char *v217;
  uint64_t v218;
  uint64_t (*v219)(__int128 *, uint64_t, uint64_t);
  char *v220;
  void (*v221)(__int128 *, _QWORD);
  uint64_t v222;
  uint64_t v223;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v225;
  char *v226;
  char *v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  unint64_t v232;
  _QWORD *v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  unint64_t v240;
  char *v241;
  unint64_t v242;
  char *v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  char *v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  char *v252;
  uint64_t v253;
  void (*v254)(__int128 *, _QWORD);
  unint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  char *v259;
  objc_class *v260;
  char *v261;
  char *v262;
  char *v263;
  uint64_t v264;
  char *v265;
  uint64_t v266;
  unint64_t v267;
  unint64_t v268;
  char *v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  unint64_t v276;
  char *v277;
  unint64_t v278;
  char *v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  __int16 v285;
  char *v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t (*v289)(_OWORD *, uint64_t, uint64_t);
  void (*v290)(_OWORD *, _QWORD);
  uint64_t v291;
  uint64_t v292;
  char v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  char *v298;
  uint64_t v299;
  void (*v300)(_OWORD *, _QWORD);
  unint64_t v301;
  uint64_t v302;
  void (*v303)(char *, uint64_t);
  char *v304;
  uint64_t v305;
  NSObject *v306;
  os_log_type_t v307;
  uint8_t *v308;
  uint64_t v309;
  uint64_t v310;
  unint64_t v311;
  unint64_t v312;
  uint64_t v313;
  uint64_t (*v314)(__int128 *, uint64_t, uint64_t);
  uint64_t v315;
  void (*v316)(_OWORD *, _QWORD);
  void *v317;
  uint64_t v318;
  void (*v319)(__int128 *, __int128 *, uint64_t, char *, uint64_t, uint64_t);
  char *v320;
  char *v321;
  uint64_t v322;
  uint64_t v323;
  void (*v324)(__int128 *, _QWORD);
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  char *v328;
  int v329;
  os_log_t v330;
  void (*v331)(char *, uint64_t);
  uint64_t v332;
  void (*v333)(uint64_t);
  uint64_t v334;
  char *v335;
  uint64_t v336;
  uint64_t (*v337)(uint64_t, uint64_t);
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  char *v341;
  _QWORD *v342;
  unint64_t v343;
  uint64_t v344;
  char *v345;
  char *v346;
  uint64_t v347;
  uint64_t v348;
  char *v349;
  char *v350;
  uint64_t v351;
  uint64_t v352;
  __int128 *v353;
  uint64_t AssociatedConformanceWitness;
  unint64_t v355;
  uint64_t v356;
  uint64_t v357;
  unint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  char *v362;
  uint64_t v363;
  objc_super v364;
  objc_super v365;
  __int128 v366;
  __int16 v367;
  _OWORD v368[2];
  __int16 v369;
  __int128 v370;
  __int16 v371;
  objc_super v372;
  __int128 v373;
  __int128 v374;
  __int128 v375;
  __int128 v376;
  uint64_t v377[5];
  __int128 v378;
  __int128 v379;
  __int16 v380;
  __int128 v381;
  __int128 v382;
  __int16 v383;
  __int128 v384;
  __int128 v385;
  __int128 v386;
  __int128 v387;
  __int128 v388;
  __int128 v389;
  __int16 v390;
  __int128 v391;
  __int16 v392;
  _OWORD v393[2];

  v363 = a2;
  v360 = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, a3, a2, &protocol requirements base descriptor for BonjourOffload);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a3, a2, AssociatedTypeWitness, &protocol requirements base descriptor for BonjourOffload, &associated conformance descriptor for BonjourOffload.BonjourOffload.DiscoveryEngine: BonjourOffloadDiscoveryEngine);
  v348 = *(_QWORD *)(swift_getAssociatedTypeWitness(0, AssociatedConformanceWitness, AssociatedTypeWitness, &protocol requirements base descriptor for BonjourOffloadDiscoveryEngine)- 8);
  __chkstk_darwin();
  v341 = (char *)&v326 - v7;
  v352 = v8;
  v9 = type metadata accessor for Optional(0, v8);
  v339 = *(_QWORD *)(v9 - 8);
  v340 = v9;
  __chkstk_darwin();
  v335 = (char *)&v326 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v342 = (uint64_t *)((char *)&v326 - v11);
  __chkstk_darwin();
  v343 = (unint64_t)&v326 - v12;
  __chkstk_darwin();
  v346 = (char *)&v326 - v13;
  sub_100012C44(&qword_100404B80);
  __chkstk_darwin();
  v336 = (uint64_t)&v326 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v344 = (uint64_t)&v326 - v15;
  __chkstk_darwin();
  v349 = (char *)&v326 - v16;
  v17 = type metadata accessor for DNSRecords.SRV(0);
  v358 = *(_QWORD *)(v17 - 8);
  v359 = v17;
  __chkstk_darwin();
  v338 = (uint64_t)&v326 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v353 = (__int128 *)((char *)&v326 - v19);
  __chkstk_darwin();
  v355 = (unint64_t)&v326 - v20;
  __chkstk_darwin();
  v347 = (uint64_t)&v326 - v21;
  v361 = type metadata accessor for Logger(0);
  v356 = *(_QWORD *)(v361 - 8);
  __chkstk_darwin();
  v337 = (uint64_t (*)(uint64_t, uint64_t))((char *)&v326 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin();
  v350 = (char *)&v326 - v23;
  __chkstk_darwin();
  v362 = (char *)&v326 - v24;
  v25 = type metadata accessor for Optional(0, AssociatedTypeWitness);
  v26 = *(_QWORD *)(v25 - 8);
  __chkstk_darwin();
  v28 = (char *)&v326 - v27;
  v29 = *(_QWORD *)(AssociatedTypeWitness - 8);
  __chkstk_darwin();
  v31 = (char *)&v326 - v30;
  (*(void (**)(uint64_t, uint64_t))(a3 + 64))(v363, a3);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v28, 1, AssociatedTypeWitness) == 1)
    return (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v28, v25);
  (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v31, v28, AssociatedTypeWitness);
  v33 = v3;
  *(_QWORD *)&v384 = v3;
  v34 = *(_QWORD *)(a3 + 8);
  v333 = *(void (**)(uint64_t))(v34 + 8);
  v334 = v29;
  v35 = v363;
  v332 = v34;
  v333(v363);
  v36 = v360;
  sub_100031D80(v360, (uint64_t)&v384);
  v37 = swift_unknownObjectRetain_n(v3, 4);
  v38 = Logger.logObject.getter(v37);
  v39 = static os_log_type_t.info.getter();
  v40 = v39;
  v41 = os_log_type_enabled(v38, v39);
  v357 = a3;
  v351 = AssociatedTypeWitness;
  v345 = v31;
  if (v41)
  {
    v42 = a3;
    v43 = swift_slowAlloc(32, -1);
    v331 = (void (*)(char *, uint64_t))swift_slowAlloc(32, -1);
    v377[0] = (uint64_t)v331;
    *(_DWORD *)v43 = 136315650;
    v330 = v38;
    v44 = v33;
    sub_100031D80((uint64_t)&v384, (uint64_t)&v373);
    v45 = sub_100012C44(&qword_100404B88);
    v46 = String.init<A>(describing:)(&v373, v45);
    v329 = v40;
    v48 = v47;
    *(_QWORD *)&v373 = sub_100013CC8(v46, v47, v377);
    v328 = (char *)&v373 + 8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v373, (char *)&v373 + 8);
    swift_bridgeObjectRelease(v48);
    sub_100014430(&v384);
    *(_WORD *)(v43 + 12) = 2048;
    v327 = v43 + 14;
    v49 = *(uint64_t (**)(uint64_t, uint64_t))(v42 + 40);
    v50 = v49(v35, v42);
    v52 = v51;
    v54 = v53;
    swift_bridgeObjectRelease(v55);
    swift_bridgeObjectRelease(v52);
    swift_bridgeObjectRelease(v54);
    v56 = swift_getAssociatedTypeWitness(0, AssociatedConformanceWitness, v351, &protocol requirements base descriptor for BonjourOffloadDiscoveryEngine);
    v57 = sub_1000166C8();
    v58 = Dictionary.count.getter(v50, &type metadata for DNSRecords.Identifier, v56, v57);
    swift_unknownObjectRelease(v44);
    swift_bridgeObjectRelease(v50);
    *(_QWORD *)&v373 = v58;
    v59 = v328;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v373, v328);
    swift_unknownObjectRelease(v44);
    *(_WORD *)(v43 + 22) = 2048;
    v327 = v43 + 24;
    v60 = v49(v35, v42);
    v36 = v360;
    v61 = v60;
    v63 = v62;
    v65 = v64;
    swift_bridgeObjectRelease(v66);
    v67 = v63;
    v33 = v44;
    swift_bridgeObjectRelease(v67);
    swift_bridgeObjectRelease(v61);
    v68 = sub_10001670C();
    v69 = Dictionary.count.getter(v65, &type metadata for DNSRecords.PTR, v352, v68);
    swift_unknownObjectRelease(v44);
    swift_bridgeObjectRelease(v65);
    *(_QWORD *)&v373 = v69;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v373, v59);
    swift_unknownObjectRelease(v44);
    v70 = v330;
    _os_log_impl((void *)&_mh_execute_header, v330, (os_log_type_t)v329, "Starting advertise for %s (browses: %ld, advertises: %ld)", (uint8_t *)v43, 0x20u);
    v71 = v331;
    swift_arrayDestroy(v331, 1, &type metadata for Any[8]);
    swift_slowDealloc(v71, -1, -1);
    swift_slowDealloc(v43, -1, -1);

  }
  else
  {
    swift_unknownObjectRelease_n(v33, 2);
    sub_100014430(&v384);

    swift_unknownObjectRelease_n(v33, 2);
  }
  v72 = v356;
  v73 = *(void (**)(char *, uint64_t))(v356 + 8);
  v73(v362, v361);
  v74 = v355;
  sub_100031D80(v36, (uint64_t)v377);
  v75 = sub_100012C44(&qword_100404B88);
  if (swift_dynamicCast(&v388, v377, v75, &type metadata for DNSRecords.PTR, 0))
  {
    v373 = v388;
    v374 = v389;
    LOWORD(v375) = v390;
    v76 = *((_QWORD *)&v388 + 1);
    v353 = (__int128 *)v388;
    v355 = *((_QWORD *)&v389 + 1);
    v356 = v389;
    LODWORD(v344) = v390;
    LODWORD(v343) = HIBYTE(v390);
    v370 = v388;
    v366 = v389;
    v367 = v390;
    v77 = v357;
    v78 = *(uint64_t (**)(uint64_t, uint64_t))(v357 + 40);
    sub_100031ECC((uint64_t)&v370);
    sub_100031ECC((uint64_t)&v366);
    v362 = v33;
    v79 = v78(v363, v77);
    v81 = v80;
    v83 = v82;
    v342 = v84;
    v85 = *(_QWORD *)(v80 + 16);
    v360 = v76;
    if (v85 && (v86 = sub_10002D93C((uint64_t)&v373), (v87 & 1) != 0))
    {
      v88 = (char *)*(id *)(*(_QWORD *)(v81 + 56) + 8 * v86);
      v89 = v359;
    }
    else
    {
      *(_QWORD *)&v384 = v362;
      v109 = v350;
      ((void (*)(uint64_t, uint64_t))v333)(v363, v332);
      v110 = (objc_class *)type metadata accessor for BonjourAdvertiser(0);
      v111 = (char *)objc_allocWithZone(v110);
      v112 = &v111[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_service];
      *(_OWORD *)v112 = 0u;
      *((_OWORD *)v112 + 1) = 0u;
      *((_WORD *)v112 + 16) = 0;
      v113 = &v111[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_txtInfo];
      *((_QWORD *)v113 + 6) = 0;
      *((_OWORD *)v113 + 1) = 0u;
      *((_OWORD *)v113 + 2) = 0u;
      *(_OWORD *)v113 = 0u;
      v89 = v359;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v358 + 56))(&v111[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_srvInfo], 1, 1, v359);
      v114 = *(void (**)(char *, char *, uint64_t))(v72 + 16);
      v115 = v361;
      v114(&v111[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_logger], v109, v361);
      v364.receiver = v111;
      v364.super_class = v110;
      v88 = (char *)objc_msgSendSuper2(&v364, "init");
      v73(v109, v115);
    }
    v116 = (uint64_t)v349;
    v117 = (uint64_t)v353;
    v118 = v344;
    v119 = v343;
    swift_bridgeObjectRelease(v342);
    swift_bridgeObjectRelease(v83);
    swift_bridgeObjectRelease(v81);
    swift_bridgeObjectRelease(v79);
    sub_100031EF4((uint64_t)&v370);
    sub_100031EF4((uint64_t)&v366);
    v120 = v118 | (v119 << 8);
    v121 = &v88[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_service];
    v122 = *(_QWORD *)&v88[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_service];
    v123 = *(_QWORD *)&v88[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_service + 8];
    v124 = *(_QWORD *)&v88[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_service + 16];
    v125 = *(_QWORD *)&v88[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_service + 24];
    v126 = v360;
    *(_QWORD *)v121 = v117;
    *((_QWORD *)v121 + 1) = v126;
    v127 = v355;
    *((_QWORD *)v121 + 2) = v356;
    *((_QWORD *)v121 + 3) = v127;
    *((_WORD *)v121 + 16) = v120;
    sub_100031ECC((uint64_t)&v370);
    sub_100031ECC((uint64_t)&v366);
    sub_100031E9C(v122, v123, v124, v125);
    v128 = (uint64_t)&v88[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_srvInfo];
    swift_beginAccess(&v88[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_srvInfo], v368, 0, 0);
    sub_100033B48(v128, v116, &qword_100404B80);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v358 + 48))(v116, 1, v89) == 1)
    {
      sub_100033A84(v116, &qword_100404B80);
      v129 = v363;
LABEL_32:
      v218 = v357;
      v219 = *(uint64_t (**)(__int128 *, uint64_t, uint64_t))(v357 + 56);
      v220 = v88;
      v221 = (void (*)(__int128 *, _QWORD))v219(&v384, v129, v218);
      v223 = v222;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v222 + 8));
      *(_QWORD *)&v381 = *(_QWORD *)(v223 + 8);
      *(_QWORD *)(v223 + 8) = 0x8000000000000000;
      sub_100030460((uint64_t)v220, (uint64_t)&v373, isUniquelyReferenced_nonNull_native);
      v225 = *(_QWORD *)(v223 + 8);
      *(_QWORD *)(v223 + 8) = v381;
      swift_bridgeObjectRelease(v225);
      sub_100031EF4((uint64_t)&v370);
      sub_100031EF4((uint64_t)&v366);
      v221(&v384, 0);
LABEL_33:

LABEL_42:
      v303 = *(void (**)(char *, uint64_t))(v334 + 8);
      goto LABEL_43;
    }
    v154 = v347;
    sub_100033AC0(v116, v347, type metadata accessor for DNSRecords.SRV);
    v155 = (uint64_t *)&v88[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_txtInfo];
    v156 = *(_QWORD *)&v88[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_txtInfo + 8];
    v129 = v363;
    if (!v156)
    {
      sub_100031F1C(v154);
      goto LABEL_32;
    }
    v157 = *v155;
    v158 = v155[3];
    v159 = v155[4];
    v160 = v155[5];
    v161 = v155[6];
    v360 = v155[2];
    v361 = v157;
    *(_QWORD *)&v384 = v157;
    *((_QWORD *)&v384 + 1) = v156;
    *(_QWORD *)&v385 = v360;
    *((_QWORD *)&v385 + 1) = v158;
    v356 = v159;
    LOWORD(v386) = v159 & 0xFF01;
    *((_QWORD *)&v386 + 1) = v160;
    *(_QWORD *)&v387 = v161;
    v162 = v357;
    v163 = *(uint64_t (**)(__int128 *, uint64_t, uint64_t))(v357 + 56);
    swift_bridgeObjectRetain(v156);
    v359 = v158;
    swift_bridgeObjectRetain(v158);
    v358 = v161;
    sub_100031FEC(v160, v161);
    v164 = (void (*)(__int128 *, _QWORD))v163(&v381, v129, v162);

    v164(&v381, 0);
    v165 = AssociatedConformanceWitness;
    v166 = *(void (**)(__int128 *, __int128 *, uint64_t, char *, uint64_t, uint64_t))(AssociatedConformanceWitness
                                                                                            + 56);
    v167 = v88;
    v166(&v373, &v384, v154, v167, v351, v165);
    v250 = v348;
    v251 = v356;

    v252 = v346;
    v253 = v352;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v250 + 56))(v346, 0, 1, v352);
    v381 = v373;
    v382 = v374;
    v383 = v375;
    v254 = (void (*)(__int128 *, _QWORD))v163(&v378, v363, v357);
    v255 = sub_10001670C();
    v256 = type metadata accessor for Dictionary(0, &type metadata for DNSRecords.PTR, v253, v255);
    Dictionary.subscript.setter(v252, &v381, v256);
    v254(&v378, 0);
    sub_100031E0C(v361, v156, v360, v359, v251, v160, v358);

    v257 = v347;
LABEL_41:
    sub_100031F1C(v257);
    goto LABEL_42;
  }
  v90 = v36;
  v91 = swift_dynamicCast(v74, v377, v75, v359, 0);
  v92 = v357;
  if (v91)
  {
    v93 = v74;
    v94 = (uint64_t)v353;
    sub_100033AC0(v93, (uint64_t)v353, type metadata accessor for DNSRecords.SRV);
    v95 = *(_OWORD *)(v94 + 16);
    v373 = *(_OWORD *)v94;
    v374 = v95;
    LOWORD(v375) = *(_WORD *)(v94 + 32);
    v393[0] = v373;
    v370 = v95;
    v371 = v375;
    v96 = *(uint64_t (**)(uint64_t, uint64_t))(v92 + 40);
    sub_100031ECC((uint64_t)v393);
    sub_100031ECC((uint64_t)&v370);
    v362 = v33;
    v97 = v363;
    v98 = v96(v363, v92);
    v100 = v99;
    v102 = v101;
    v360 = v103;
    if (*(_QWORD *)(v99 + 16) && (v104 = sub_10002D93C((uint64_t)&v373), (v105 & 1) != 0))
    {
      v106 = (char *)*(id *)(*(_QWORD *)(v100 + 56) + 8 * v104);
      v107 = v358;
      v108 = v359;
    }
    else
    {
      *(_QWORD *)&v384 = v362;
      v168 = v350;
      ((void (*)(uint64_t, uint64_t))v333)(v97, v332);
      v169 = (objc_class *)type metadata accessor for BonjourAdvertiser(0);
      v356 = v102;
      v170 = v98;
      v171 = v169;
      v172 = (char *)objc_allocWithZone(v169);
      v173 = &v172[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_service];
      *(_OWORD *)v173 = 0u;
      *((_OWORD *)v173 + 1) = 0u;
      *((_WORD *)v173 + 16) = 0;
      v174 = &v172[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_txtInfo];
      *((_QWORD *)v174 + 6) = 0;
      *((_OWORD *)v174 + 1) = 0u;
      *((_OWORD *)v174 + 2) = 0u;
      *(_OWORD *)v174 = 0u;
      v107 = v358;
      v175 = v73;
      v108 = v359;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v358 + 56))(&v172[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_srvInfo], 1, 1, v359);
      v176 = *(void (**)(char *, char *, uint64_t))(v72 + 16);
      v177 = v361;
      v176(&v172[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_logger], v168, v361);
      v365.receiver = v172;
      v365.super_class = v171;
      v98 = v170;
      v102 = v356;
      v106 = (char *)objc_msgSendSuper2(&v365, "init");
      v175(v168, v177);
    }
    v178 = v344;
    swift_bridgeObjectRelease(v360);
    swift_bridgeObjectRelease(v102);
    swift_bridgeObjectRelease(v100);
    swift_bridgeObjectRelease(v98);
    sub_100031EF4((uint64_t)v393);
    sub_100031EF4((uint64_t)&v370);
    sub_100032558((uint64_t)v353, v178);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v107 + 56))(v178, 0, 1, v108);
    v179 = (uint64_t)&v106[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_srvInfo];
    swift_beginAccess(&v106[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_srvInfo], &v384, 33, 0);
    sub_100031F58(v178, v179);
    swift_endAccess(&v384);
    v180 = &v106[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_service];
    v181 = *(_QWORD *)&v106[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_service + 8];
    if (v181)
    {
      v182 = *(_QWORD *)v180;
      v183 = *((_QWORD *)v180 + 2);
      v184 = *((_QWORD *)v180 + 3);
      v185 = *((_WORD *)v180 + 16);
      *(_QWORD *)&v381 = *(_QWORD *)v180;
      *((_QWORD *)&v381 + 1) = v181;
      *(_QWORD *)&v382 = v183;
      *((_QWORD *)&v382 + 1) = v184;
      v383 = v185 & 0xFF01;
      v186 = (uint64_t *)&v106[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_txtInfo];
      v187 = *(_QWORD *)&v106[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_txtInfo
                            + 8];
      if (v187)
      {
        v188 = *v186;
        v189 = v186[2];
        v190 = v186[3];
        v191 = v186[4];
        v192 = v186[5];
        v355 = v186[6];
        *(_QWORD *)&v384 = v188;
        *((_QWORD *)&v384 + 1) = v187;
        *(_QWORD *)&v385 = v189;
        *((_QWORD *)&v385 + 1) = v190;
        LOWORD(v386) = v191 & 0xFF01;
        *((_QWORD *)&v386 + 1) = v192;
        *(_QWORD *)&v387 = v355;
        v193 = v353[1];
        v388 = *v353;
        v389 = v193;
        v390 = *((_WORD *)v353 + 16);
        v391 = v388;
        v366 = v193;
        v367 = v390;
        v194 = v357;
        v195 = *(uint64_t (**)(_OWORD *, uint64_t, uint64_t))(v357 + 56);
        sub_100031E6C(v182, v181, v183, v184);
        v360 = v189;
        v361 = v188;
        v356 = v187;
        v358 = v192;
        v359 = v190;
        v350 = (char *)v191;
        v196 = v191;
        v197 = v195;
        v198 = v192;
        v199 = v355;
        sub_100031FA0(v188, v187, v189, v190, v196, v198, v355);
        sub_100031ECC((uint64_t)&v391);
        sub_100031ECC((uint64_t)&v366);
        v200 = (void (*)(__int128 *, _QWORD))v195(&v378, v363, v194);
        v201 = (void *)sub_10002FD54((uint64_t)&v388);
        sub_100031EF4((uint64_t)&v391);
        sub_100031EF4((uint64_t)&v366);

        v200(&v378, 0);
        v202 = AssociatedConformanceWitness;
        v203 = *(void (**)(__int128 *, __int128 *, __int128 *, char *, uint64_t, uint64_t))(AssociatedConformanceWitness + 56);
        v204 = v106;
        v203(&v381, &v384, v353, v204, v351, v202);
        v295 = v334;
        v296 = v348;
        v297 = (uint64_t)v350;

        v298 = (char *)v343;
        v299 = v352;
        (*(void (**)(unint64_t, _QWORD, uint64_t, uint64_t))(v296 + 56))(v343, 0, 1, v352);
        v378 = v381;
        v379 = v382;
        v380 = v383;
        v300 = (void (*)(_OWORD *, _QWORD))v197(v368, v363, v357);
        v301 = sub_10001670C();
        v302 = type metadata accessor for Dictionary(0, &type metadata for DNSRecords.PTR, v299, v301);
        Dictionary.subscript.setter(v298, &v378, v302);
        v300(v368, 0);
        sub_100031E0C(v361, v356, v360, v359, v297, v358, v199);

        sub_100031F1C((uint64_t)v353);
        v303 = *(void (**)(char *, uint64_t))(v295 + 8);
LABEL_43:
        v248 = v345;
        v258 = v351;
LABEL_44:
        v303(v248, v258);
        return sub_100014430(v377);
      }
    }
    v205 = (uint64_t)v353;
    v206 = v353[1];
    v384 = *v353;
    v385 = v206;
    LOWORD(v386) = *((_WORD *)v353 + 16);
    v368[0] = v384;
    v378 = v206;
    LOWORD(v379) = v386;
    v207 = v357;
    v208 = *(uint64_t (**)(__int128 *, uint64_t, uint64_t))(v357 + 56);
    v209 = v106;
    sub_100031ECC((uint64_t)v368);
    sub_100031ECC((uint64_t)&v378);
    v210 = (void (*)(__int128 *, _QWORD))v208(&v388, v363, v207);
    v212 = v211;
    v213 = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v211 + 8));
    *(_QWORD *)&v366 = *(_QWORD *)(v212 + 8);
    *(_QWORD *)(v212 + 8) = 0x8000000000000000;
    sub_100030460((uint64_t)v209, (uint64_t)&v384, v213);
    v214 = *(_QWORD *)(v212 + 8);
    *(_QWORD *)(v212 + 8) = v366;
    swift_bridgeObjectRelease(v214);
    sub_100031EF4((uint64_t)v368);
    sub_100031EF4((uint64_t)&v378);
    v210(&v388, 0);

    v257 = v205;
    goto LABEL_41;
  }
  if (swift_dynamicCast(&v373, v377, v75, &type metadata for DNSRecords.TXT, 0))
  {
    v331 = v73;
    v384 = v373;
    v385 = v374;
    v386 = v375;
    v360 = *((_QWORD *)&v375 + 1);
    v346 = (char *)v376;
    *(_QWORD *)&v387 = v376;
    v349 = (char *)*((_QWORD *)&v373 + 1);
    v347 = v373;
    v355 = *((_QWORD *)&v374 + 1);
    v353 = (__int128 *)v374;
    v344 = v375;
    v343 = BYTE1(v375);
    v388 = v373;
    v389 = v374;
    v390 = v375;
    v383 = v375;
    v381 = v373;
    v382 = v374;
    v393[0] = v373;
    v392 = v375;
    v391 = v374;
    v130 = *(uint64_t (**)(uint64_t, uint64_t))(v92 + 40);
    sub_100031ECC((uint64_t)v393);
    sub_100031ECC((uint64_t)&v391);
    v131 = v33;
    v132 = v363;
    v337 = v130;
    v133 = v130(v363, v92);
    v135 = v134;
    v137 = v136;
    v139 = v138;
    v378 = v381;
    v379 = v382;
    v380 = v383;
    v140 = sub_10001670C();
    v141 = v342;
    v142 = v352;
    v330 = v140;
    Dictionary.subscript.getter(v342, &v378, v137, &type metadata for DNSRecords.PTR, v352, v140);
    swift_bridgeObjectRelease(v139);
    swift_bridgeObjectRelease(v137);
    swift_bridgeObjectRelease(v135);
    swift_bridgeObjectRelease(v133);
    sub_100031EF4((uint64_t)v393);
    sub_100031EF4((uint64_t)&v391);
    v143 = v348;
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v348 + 48))(v141, 1, v142) == 1)
    {
      (*(void (**)(_QWORD *, uint64_t))(v339 + 8))(v141, v340);
      sub_100031ECC((uint64_t)v393);
      sub_100031ECC((uint64_t)&v391);
      v362 = v131;
      v144 = v337(v132, v92);
      v146 = v145;
      v148 = v147;
      v150 = v149;
      if (*(_QWORD *)(v145 + 16) && (v151 = sub_10002D93C((uint64_t)&v381), (v152 & 1) != 0))
      {
        v153 = (char *)*(id *)(*(_QWORD *)(v146 + 56) + 8 * v151);
      }
      else
      {
        *(_QWORD *)&v378 = v362;
        v259 = v350;
        ((void (*)(uint64_t, uint64_t))v333)(v363, v332);
        v260 = (objc_class *)type metadata accessor for BonjourAdvertiser(0);
        v261 = (char *)objc_allocWithZone(v260);
        v262 = &v261[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_service];
        *(_OWORD *)v262 = 0u;
        *((_OWORD *)v262 + 1) = 0u;
        *((_WORD *)v262 + 16) = 0;
        v263 = &v261[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_txtInfo];
        *((_QWORD *)v263 + 6) = 0;
        *((_OWORD *)v263 + 1) = 0u;
        *((_OWORD *)v263 + 2) = 0u;
        *(_OWORD *)v263 = 0u;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v358 + 56))(&v261[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_srvInfo], 1, 1, v359);
        v264 = v361;
        (*(void (**)(char *, char *, uint64_t))(v356 + 16))(&v261[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_logger], v259, v361);
        v372.receiver = v261;
        v372.super_class = v260;
        v153 = (char *)objc_msgSendSuper2(&v372, "init");
        v331(v259, v264);
      }
      v265 = v346;
      v267 = v343;
      v266 = v344;
      swift_bridgeObjectRelease(v150);
      swift_bridgeObjectRelease(v148);
      swift_bridgeObjectRelease(v146);
      swift_bridgeObjectRelease(v144);
      sub_100031EF4((uint64_t)v393);
      sub_100031EF4((uint64_t)&v391);
      v268 = v266 | (v267 << 8);
      v269 = &v153[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_txtInfo];
      v270 = *(_QWORD *)&v153[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_txtInfo];
      v271 = *(_QWORD *)&v153[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_txtInfo
                            + 8];
      v272 = *(_QWORD *)&v153[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_txtInfo
                            + 16];
      v273 = *(_QWORD *)&v153[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_txtInfo
                            + 24];
      v274 = *(_QWORD *)&v153[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_txtInfo
                            + 32];
      v275 = *(_QWORD *)&v153[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_txtInfo
                            + 40];
      v276 = *(_QWORD *)&v153[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_txtInfo
                            + 48];
      v277 = v349;
      *(_QWORD *)v269 = v347;
      *((_QWORD *)v269 + 1) = v277;
      v278 = v355;
      *((_QWORD *)v269 + 2) = v353;
      *((_QWORD *)v269 + 3) = v278;
      *((_QWORD *)v269 + 4) = v268;
      *((_QWORD *)v269 + 5) = v360;
      *((_QWORD *)v269 + 6) = v265;
      sub_1000324C0(&v384);
      sub_100031E0C(v270, v271, v272, v273, v274, v275, v276);
      v279 = &v153[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_service];
      v280 = *(_QWORD *)&v153[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_service
                            + 8];
      v281 = v357;
      if (!v280)
        goto LABEL_51;
      v282 = *(_QWORD *)v279;
      v283 = *((_QWORD *)v279 + 2);
      v284 = *((_QWORD *)v279 + 3);
      v285 = *((_WORD *)v279 + 16);
      *(_QWORD *)&v378 = *(_QWORD *)v279;
      *((_QWORD *)&v378 + 1) = v280;
      *(_QWORD *)&v379 = v283;
      *((_QWORD *)&v379 + 1) = v284;
      v380 = v285 & 0xFF01;
      v286 = &v153[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_srvInfo];
      swift_beginAccess(&v153[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_srvInfo], &v370, 0, 0);
      v287 = (uint64_t)v286;
      v288 = v336;
      sub_100033B48(v287, v336, &qword_100404B80);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v358 + 48))(v288, 1, v359) == 1)
      {
        sub_100033A84(v288, &qword_100404B80);
LABEL_51:
        v289 = *(uint64_t (**)(_OWORD *, uint64_t, uint64_t))(v281 + 56);
        sub_100031ECC((uint64_t)v393);
        sub_100031ECC((uint64_t)&v391);
        v220 = v153;
        v290 = (void (*)(_OWORD *, _QWORD))v289(v368, v363, v281);
        v292 = v291;
        v293 = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v291 + 8));
        *(_QWORD *)&v366 = *(_QWORD *)(v292 + 8);
        *(_QWORD *)(v292 + 8) = 0x8000000000000000;
        sub_100030460((uint64_t)v220, (uint64_t)&v381, v293);
        v294 = *(_QWORD *)(v292 + 8);
        *(_QWORD *)(v292 + 8) = v366;
        swift_bridgeObjectRelease(v294);
        sub_100031EF4((uint64_t)v393);
        sub_100031EF4((uint64_t)&v391);
        v290(v368, 0);
        sub_10003250C(&v384);
        goto LABEL_33;
      }
      sub_100033AC0(v288, v338, type metadata accessor for DNSRecords.SRV);
      v313 = v281;
      v314 = *(uint64_t (**)(__int128 *, uint64_t, uint64_t))(v281 + 56);
      sub_100031ECC((uint64_t)v393);
      sub_100031ECC((uint64_t)&v391);
      sub_100031E6C(v282, v280, v283, v284);
      v315 = v363;
      v316 = (void (*)(_OWORD *, _QWORD))v314(v368, v363, v313);
      v317 = (void *)sub_10002FD54((uint64_t)&v381);
      sub_100031EF4((uint64_t)v393);
      sub_100031EF4((uint64_t)&v391);

      v316(v368, 0);
      v318 = AssociatedConformanceWitness;
      v319 = *(void (**)(__int128 *, __int128 *, uint64_t, char *, uint64_t, uint64_t))(AssociatedConformanceWitness
                                                                                              + 56);
      v320 = v153;
      v321 = v335;
      v216 = v351;
      v319(&v378, &v384, v338, v320, v351, v318);
      v322 = v334;

      v323 = v352;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v348 + 56))(v321, 0, 1, v352);
      v368[0] = v378;
      v368[1] = v379;
      v369 = v380;
      v324 = (void (*)(__int128 *, _QWORD))v314(&v366, v315, v357);
      v325 = type metadata accessor for Dictionary(0, &type metadata for DNSRecords.PTR, v323, v330);
      Dictionary.subscript.setter(v321, v368, v325);
      v324(&v366, 0);

      sub_10003250C(&v384);
      sub_100031F1C(v338);
      v303 = *(void (**)(char *, uint64_t))(v322 + 8);
      v248 = v345;
    }
    else
    {
      v226 = v341;
      (*(void (**)(char *, _QWORD *, uint64_t))(v143 + 32))(v341, v141, v142);
      v227 = v345;
      v216 = v351;
      v228 = (*(uint64_t (**)(char *, uint64_t))(AssociatedConformanceWitness + 72))(v226, v351);
      if (v228)
      {
        v229 = v228;
        v230 = type metadata accessor for BonjourAdvertiser(0);
        v231 = swift_dynamicCastClass(v229, v230);
        if (v231)
        {
          v232 = v344 | (v343 << 8);
          v233 = (_QWORD *)(v231
                          + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_txtInfo);
          v234 = *(_QWORD *)(v231
                           + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_txtInfo);
          v235 = *(_QWORD *)(v231
                           + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_txtInfo
                           + 8);
          v236 = *(_QWORD *)(v231
                           + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_txtInfo
                           + 16);
          v237 = *(_QWORD *)(v231
                           + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_txtInfo
                           + 24);
          v238 = *(_QWORD *)(v231
                           + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_txtInfo
                           + 32);
          v239 = *(_QWORD *)(v231
                           + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_txtInfo
                           + 40);
          v240 = *(_QWORD *)(v231
                           + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB17BonjourAdvertiser_txtInfo
                           + 48);
          v241 = v349;
          *v233 = v347;
          v233[1] = v241;
          v242 = v355;
          v233[2] = v353;
          v233[3] = v242;
          v233[4] = v232;
          v243 = v346;
          v233[5] = v360;
          v233[6] = v243;
          sub_1000324C0(&v384);
          v244 = v234;
          v143 = v348;
          v245 = v235;
          v246 = v236;
          v226 = v341;
          v247 = v238;
          v216 = v351;
          v142 = v352;
          sub_100031E0C(v244, v245, v246, v237, v247, v239, v240);
        }
        swift_unknownObjectRelease(v229);
      }
      (*(void (**)(char *, __int128 *, uint64_t))(AssociatedConformanceWitness + 64))(v226, &v384, v216);
      sub_10003250C(&v384);
      (*(void (**)(char *, uint64_t))(v143 + 8))(v226, v142);
      v303 = *(void (**)(char *, uint64_t))(v334 + 8);
      v248 = v227;
    }
LABEL_57:
    v258 = v216;
    goto LABEL_44;
  }
  v215 = swift_dynamicCast(&v373, v377, v75, &type metadata for DNSRecords.ARPA, 0);
  v216 = v351;
  v217 = v345;
  if (v215)
  {
    v384 = v373;
    v385 = v374;
    v386 = v375;
    v387 = v376;
    (*(void (**)(__int128 *, uint64_t))(AssociatedConformanceWitness + 88))(&v384, v351);
    sub_100031DD8((uint64_t)&v384);
LABEL_56:
    v303 = *(void (**)(char *, uint64_t))(v334 + 8);
    v248 = v217;
    goto LABEL_57;
  }
  if (!swift_dynamicCast(&v384, v377, v75, &type metadata for DNSRecords.AAAA, 0))
  {
    *(_QWORD *)&v384 = v33;
    v304 = (char *)v337;
    ((void (*)(uint64_t, uint64_t))v333)(v363, v332);
    v305 = sub_100031D80(v90, (uint64_t)&v384);
    v306 = Logger.logObject.getter(v305);
    v307 = static os_log_type_t.error.getter(v306);
    if (os_log_type_enabled(v306, v307))
    {
      v331 = v73;
      v308 = (uint8_t *)swift_slowAlloc(12, -1);
      v309 = swift_slowAlloc(32, -1);
      *(_QWORD *)&v388 = v309;
      *(_DWORD *)v308 = 136315138;
      sub_100031D80((uint64_t)&v384, (uint64_t)&v373);
      v310 = String.init<A>(describing:)(&v373, v75);
      v312 = v311;
      *(_QWORD *)&v373 = sub_100013CC8(v310, v311, (uint64_t *)&v388);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v373, (char *)&v373 + 8);
      swift_bridgeObjectRelease(v312);
      sub_100014430(&v384);
      _os_log_impl((void *)&_mh_execute_header, v306, v307, "Failed to start advertising for record %s", v308, 0xCu);
      swift_arrayDestroy(v309, 1, &type metadata for Any[8]);
      swift_slowDealloc(v309, -1, -1);
      swift_slowDealloc(v308, -1, -1);

      v331((char *)v337, v361);
      (*(void (**)(char *, uint64_t))(v334 + 8))(v345, v216);
      return sub_100014430(v377);
    }

    sub_100014430(&v384);
    v73(v304, v361);
    goto LABEL_56;
  }
  (*(void (**)(char *, uint64_t))(v334 + 8))(v217, v216);
  v249 = *((_QWORD *)&v387 + 1);
  swift_bridgeObjectRelease(v385);
  swift_bridgeObjectRelease(v249);
  return sub_100014430(v377);
}

uint64_t BonjourOffload.startResolving(record:)(uint64_t a1, uint64_t a2, void (**a3)(uint64_t, char *))
{
  uint64_t v3;
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  void (*v23)(char *, char *, uint64_t);
  void (*v24)(_QWORD);
  char *v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  _BOOL4 v30;
  void (**v31)(uint64_t, char *);
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  void (*v41)(uint64_t, char *);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (**v46)(uint64_t, char *);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  _BOOL8 v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  __int128 v78;
  uint64_t (**v79)();
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void (*v83)(__int128 *, _QWORD *, char *, uint64_t, uint64_t);
  char *v84;
  char *v85;
  id v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  NSObject *v90;
  os_log_type_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  Swift::String v99;
  void *object;
  Swift::String v101;
  Swift::String v102;
  void *v103;
  Swift::String v104;
  uint64_t v105;
  char *v106;
  char *v107;
  __int128 v108;
  uint64_t v109;
  NSObject *v110;
  os_log_type_t v111;
  uint64_t v112;
  uint64_t v113;
  Swift::String v114;
  uint64_t v115;
  unint64_t v116;
  Swift::String v117;
  Swift::String v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  void (*v123)(__int128 *, _QWORD);
  uint64_t v124;
  void (*v125)(uint64_t, char *);
  void (*v126)(uint64_t, _QWORD);
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  char *v132;
  _QWORD *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  _QWORD *v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  char *v143;
  char *v144;
  _QWORD *v145;
  uint64_t v146;
  _QWORD *v147;
  void *v148;
  __int128 v149;
  __int128 v150;
  __int16 v151;
  __int128 v152;
  __int128 v153;
  uint64_t v154;
  __int128 v155;
  __int128 v156;
  __int16 v157;
  __int128 v158;
  __int16 v159;
  __int128 v160;

  v5 = a2;
  v146 = a1;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, a3, a2, &protocol requirements base descriptor for BonjourOffload);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a3, v5, AssociatedTypeWitness, &protocol requirements base descriptor for BonjourOffload, &associated conformance descriptor for BonjourOffload.BonjourOffload.DiscoveryEngine: BonjourOffloadDiscoveryEngine);
  v136 = swift_getAssociatedTypeWitness(255, AssociatedConformanceWitness, AssociatedTypeWitness, &protocol requirements base descriptor for BonjourOffloadDiscoveryEngine);
  v135 = type metadata accessor for Optional(0, v136);
  v134 = *(_QWORD *)(v135 - 8);
  __chkstk_darwin();
  v132 = (char *)&v125 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v133 = (void (**)(uint64_t, char *))((char *)&v125 - v9);
  v131 = AssociatedConformanceWitness;
  v138 = swift_getAssociatedTypeWitness(255, AssociatedConformanceWitness, AssociatedTypeWitness, &protocol requirements base descriptor for BonjourOffloadDiscoveryEngine);
  v141 = type metadata accessor for Optional(0, v138);
  v140 = *(_QWORD *)(v141 - 8);
  __chkstk_darwin();
  v139 = (void (**)(uint64_t, char *))((char *)&v125 - v10);
  v147 = (_QWORD *)type metadata accessor for Logger(0);
  v145 = (_QWORD *)*(v147 - 1);
  __chkstk_darwin();
  v143 = (char *)&v125 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v137 = (char *)&v125 - v12;
  __chkstk_darwin();
  v130 = (char *)&v125 - v13;
  __chkstk_darwin();
  v144 = (char *)&v125 - v14;
  v15 = type metadata accessor for Optional(0, AssociatedTypeWitness);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin();
  v18 = (char *)&v125 - v17;
  v19 = *(_QWORD *)(AssociatedTypeWitness - 8);
  __chkstk_darwin();
  v21 = (char *)&v125 - v20;
  a3[8](v5, (char *)a3);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v18, 1, AssociatedTypeWitness) == 1)
    return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  v23 = *(void (**)(char *, char *, uint64_t))(v19 + 32);
  v142 = v21;
  v128 = AssociatedTypeWitness;
  v23(v21, v18, AssociatedTypeWitness);
  *(_QWORD *)&v155 = v3;
  v24 = (void (*)(_QWORD))*((_QWORD *)a3[1] + 1);
  v25 = v144;
  v125 = a3[1];
  v126 = (void (*)(uint64_t, _QWORD))v24;
  v24(v5);
  v26 = v146;
  v27 = sub_100031D80(v146, (uint64_t)&v155);
  v28 = Logger.logObject.getter(v27);
  v29 = static os_log_type_t.info.getter();
  v30 = os_log_type_enabled(v28, v29);
  v31 = a3;
  v127 = v19;
  v129 = v5;
  if (v30)
  {
    v32 = (uint8_t *)swift_slowAlloc(12, -1);
    v33 = swift_slowAlloc(32, -1);
    *(_QWORD *)&v149 = v33;
    *(_DWORD *)v32 = 136315138;
    sub_100031D80((uint64_t)&v155, (uint64_t)&v152);
    v34 = sub_100012C44(&qword_100404B88);
    v35 = String.init<A>(describing:)(&v152, v34);
    v37 = v36;
    *(_QWORD *)&v152 = sub_100013CC8(v35, v36, (uint64_t *)&v149);
    v31 = a3;
    v5 = v129;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v152, (char *)&v152 + 8);
    swift_bridgeObjectRelease(v37);
    sub_100014430(&v155);
    _os_log_impl((void *)&_mh_execute_header, v28, v29, "Starting resolve for %s", v32, 0xCu);
    swift_arrayDestroy(v33, 1, &type metadata for Any[8]);
    v38 = v33;
    v26 = v146;
    swift_slowDealloc(v38, -1, -1);
    swift_slowDealloc(v32, -1, -1);
  }
  else
  {
    sub_100014430(&v155);
  }

  v39 = (_QWORD *)v145[1];
  ((void (*)(char *, _QWORD *))v39)(v25, v147);
  sub_100031D80(v26, (uint64_t)&v155);
  v40 = sub_100012C44(&qword_100404B88);
  if (swift_dynamicCast(&v149, &v155, v40, &type metadata for DNSRecords.PTR, 6))
  {
    v145 = v39;
    v152 = v149;
    v153 = v150;
    LOWORD(v154) = v151;
    v158 = v150;
    v159 = v151;
    v41 = v31[5];
    v42 = *((_QWORD *)&v150 + 1);
    v143 = (char *)v150;
    swift_bridgeObjectRetain(*((_QWORD *)&v150 + 1));
    v146 = v3;
    v43 = ((uint64_t (*)(uint64_t, _QWORD))v41)(v5, v31);
    v45 = v44;
    v46 = v31;
    v48 = v47;
    v50 = v49;
    v155 = v158;
    LOWORD(v156) = v159;
    v51 = sub_1000166C8();
    v52 = v139;
    Dictionary.subscript.getter(v139, &v155, v43, &type metadata for DNSRecords.Identifier, v138, v51);
    swift_bridgeObjectRelease(v50);
    swift_bridgeObjectRelease(v48);
    swift_bridgeObjectRelease(v45);
    swift_bridgeObjectRelease(v43);
    sub_100031EF4((uint64_t)&v158);
    __chkstk_darwin();
    *(&v125 - 4) = (void (*)(uint64_t, char *))v5;
    *(&v125 - 3) = (void (*)(uint64_t, char *))v46;
    v144 = (char *)v46;
    *(&v125 - 2) = (void (*)(uint64_t, char *))v142;
    v53 = type metadata accessor for BonjourBrowser(0);
    v54 = v141;
    sub_100025664((void (*)(char *, char *))sub_100033C8C, (uint64_t)(&v125 - 6), (uint64_t)&type metadata for Never, v53, v55, (uint64_t)&v148);
    (*(void (**)(_QWORD *, uint64_t))(v140 + 8))(v52, v54);
    v56 = v148;
    if (v148 && (v57 = sub_100029D74((uint64_t)&v152), v56, v57))
    {
      v147 = (_QWORD *)v57;
      v160 = v152;
      sub_100031ECC((uint64_t)&v158);
      sub_100031ECC((uint64_t)&v160);
      v58 = v146;
      v59 = v129;
      v60 = v144;
      v61 = ((uint64_t (*)(uint64_t, char *))v41)(v129, v144);
      v63 = v62;
      v65 = v64;
      v67 = v66;
      v155 = v152;
      v156 = v153;
      v157 = v154;
      v68 = sub_10001670C();
      v69 = v133;
      v70 = v136;
      v145 = (_QWORD *)v68;
      Dictionary.subscript.getter(v133, &v155, v67, &type metadata for DNSRecords.PTR, v136, v68);
      swift_bridgeObjectRelease(v67);
      swift_bridgeObjectRelease(v65);
      swift_bridgeObjectRelease(v63);
      swift_bridgeObjectRelease(v61);
      sub_100031EF4((uint64_t)&v160);
      sub_100031EF4((uint64_t)&v158);
      v71 = *(char **)(v70 - 8);
      if ((*((unsigned int (**)(_QWORD *, uint64_t, uint64_t))v71 + 6))(v69, 1, v70) == 1)
      {
        v143 = v71;
        (*(void (**)(_QWORD *, uint64_t))(v134 + 8))(v69, v135);
        *(_QWORD *)&v155 = v58;
        sub_100031ECC((uint64_t)&v158);
        sub_100031ECC((uint64_t)&v160);
        v72 = (uint64_t)v130;
        v126(v59, v125);
        v73 = (char *)sub_100032324((uint64_t)&v152, v72);
        v74 = (*((uint64_t (**)(uint64_t, char *))v60 + 4))(v59, v60);
        v75 = *(_QWORD *)&v73[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_delegate];
        *(_QWORD *)&v73[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_delegate] = v74;
        swift_unknownObjectRelease(v75);
        v76 = swift_allocObject(&unk_1003DCDE0, 24, 7);
        swift_unknownObjectWeakInit(v76 + 16, v58);
        v77 = swift_allocObject(&unk_1003DCE30, 74, 7);
        v78 = v152;
        *(_OWORD *)(v77 + 56) = v153;
        *(_QWORD *)(v77 + 16) = v59;
        *(_QWORD *)(v77 + 24) = v60;
        *(_QWORD *)(v77 + 32) = v76;
        *(_WORD *)(v77 + 72) = v154;
        *(_OWORD *)(v77 + 40) = v78;
        v79 = (uint64_t (**)())&v73[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_terminationHandler];
        v80 = *(_QWORD *)&v73[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_terminationHandler];
        v81 = *(_QWORD *)&v73[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_terminationHandler
                            + 8];
        *v79 = sub_1000325F4;
        v79[1] = (uint64_t (*)())v77;
        sub_100031ECC((uint64_t)&v158);
        sub_100031ECC((uint64_t)&v160);
        sub_100012318(v80, v81);
        v82 = v131;
        v83 = *(void (**)(__int128 *, _QWORD *, char *, uint64_t, uint64_t))(v131 + 104);
        v84 = v73;
        v85 = v132;
        v86 = v147;
        v87 = v128;
        v83(&v152, v147, v84, v128, v82);
        v120 = v127;
        v121 = v143;

        v122 = v136;
        (*((void (**)(char *, _QWORD, uint64_t, uint64_t))v121 + 7))(v85, 0, 1, v136);
        v155 = v152;
        v156 = v153;
        v157 = v154;
        v123 = (void (*)(__int128 *, _QWORD))(*((uint64_t (**)(__int128 *, uint64_t))v144 + 7))(&v149, v129);
        v124 = type metadata accessor for Dictionary(0, &type metadata for DNSRecords.PTR, v122, v145);
        Dictionary.subscript.setter(v85, &v155, v124);
        v123(&v149, 0);

        return (*(uint64_t (**)(char *, uint64_t))(v120 + 8))(v142, v87);
      }

      sub_100031EF4((uint64_t)&v160);
      sub_100031EF4((uint64_t)&v158);
      (*(void (**)(_QWORD *, uint64_t))(v134 + 8))(v69, v135);
    }
    else
    {
      *(_QWORD *)&v155 = v146;
      v107 = v137;
      v126(v129, v125);
      v108 = v152;
      sub_100031ECC((uint64_t)&v158);
      swift_bridgeObjectRetain(*((_QWORD *)&v108 + 1));
      sub_100031ECC((uint64_t)&v158);
      swift_bridgeObjectRetain(*((_QWORD *)&v108 + 1));
      sub_100031ECC((uint64_t)&v158);
      v109 = swift_bridgeObjectRetain(*((_QWORD *)&v108 + 1));
      v110 = Logger.logObject.getter(v109);
      v111 = static os_log_type_t.error.getter(v110);
      if (os_log_type_enabled(v110, v111))
      {
        v112 = swift_slowAlloc(22, -1);
        v113 = swift_slowAlloc(64, -1);
        *(_QWORD *)&v149 = v113;
        *(_DWORD *)v112 = 136315394;
        swift_bridgeObjectRetain(*((_QWORD *)&v108 + 1));
        *(_QWORD *)&v155 = sub_100013CC8(v108, *((unint64_t *)&v108 + 1), (uint64_t *)&v149);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v155, (char *)&v155 + 8);
        swift_bridgeObjectRelease_n(*((_QWORD *)&v108 + 1), 2);
        sub_100031EF4((uint64_t)&v158);
        swift_bridgeObjectRelease(*((_QWORD *)&v108 + 1));
        sub_100031EF4((uint64_t)&v158);
        *(_WORD *)(v112 + 12) = 2080;
        *(_QWORD *)&v155 = v143;
        *((_QWORD *)&v155 + 1) = v42;
        sub_100031ECC((uint64_t)&v158);
        swift_bridgeObjectRetain(v42);
        v114._countAndFlagsBits = 24366;
        v114._object = (void *)0xE200000000000000;
        String.append(_:)(v114);
        if ((_BYTE)v159)
          v115 = 7365749;
        else
          v115 = 7365492;
        v116 = 0xE300000000000000;
        String.append(_:)(*(Swift::String *)&v115);
        swift_bridgeObjectRelease(0xE300000000000000);
        v117._countAndFlagsBits = 46;
        v117._object = (void *)0xE100000000000000;
        String.append(_:)(v117);
        v118._countAndFlagsBits = 0x6C61636F6CLL;
        v118._object = (void *)0xE500000000000000;
        String.append(_:)(v118);
        sub_100031EF4((uint64_t)&v158);
        v119 = *((_QWORD *)&v155 + 1);
        *(_QWORD *)&v155 = sub_100013CC8(v155, *((unint64_t *)&v155 + 1), (uint64_t *)&v149);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v155, (char *)&v155 + 8);
        swift_bridgeObjectRelease(*((_QWORD *)&v108 + 1));
        swift_bridgeObjectRelease(v119);
        sub_100031EF4((uint64_t)&v158);
        swift_bridgeObjectRelease(*((_QWORD *)&v108 + 1));
        sub_100031EF4((uint64_t)&v158);
        _os_log_impl((void *)&_mh_execute_header, v110, v111, "Cannot resolve %s because peer not discovered with %s", (uint8_t *)v112, 0x16u);
        swift_arrayDestroy(v113, 2, &type metadata for Any[8]);
        swift_slowDealloc(v113, -1, -1);
        swift_slowDealloc(v112, -1, -1);
      }
      else
      {
        swift_bridgeObjectRelease(*((_QWORD *)&v108 + 1));
        sub_100031EF4((uint64_t)&v158);
        swift_bridgeObjectRelease(*((_QWORD *)&v108 + 1));
        sub_100031EF4((uint64_t)&v158);
        swift_bridgeObjectRelease(*((_QWORD *)&v108 + 1));
        sub_100031EF4((uint64_t)&v158);
        swift_bridgeObjectRelease(*((_QWORD *)&v108 + 1));
        sub_100031EF4((uint64_t)&v158);
      }

      ((void (*)(char *, _QWORD *))v145)(v107, v147);
    }
    return (*(uint64_t (**)(char *, uint64_t))(v127 + 8))(v142, v128);
  }
  else
  {
    *(_QWORD *)&v155 = v3;
    v88 = v143;
    v126(v5, v125);
    sub_100031D80(v26, (uint64_t)&v155);
    v89 = sub_100031D80(v26, (uint64_t)&v152);
    v90 = Logger.logObject.getter(v89);
    v91 = static os_log_type_t.error.getter(v90);
    if (os_log_type_enabled(v90, v91))
    {
      v92 = swift_slowAlloc(22, -1);
      v93 = swift_slowAlloc(64, -1);
      *(_QWORD *)&v158 = v93;
      *(_DWORD *)v92 = 136315394;
      sub_100031D80((uint64_t)&v155, (uint64_t)&v149);
      v94 = String.init<A>(describing:)(&v149, v40);
      v96 = v95;
      *(_QWORD *)&v149 = sub_100013CC8(v94, v95, (uint64_t *)&v158);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v149, (char *)&v149 + 8);
      swift_bridgeObjectRelease(v96);
      sub_100014430(&v155);
      *(_WORD *)(v92 + 12) = 2080;
      v97 = *((_QWORD *)&v153 + 1);
      v98 = v154;
      sub_10003259C(&v152, *((uint64_t *)&v153 + 1));
      LOBYTE(v97) = (*(uint64_t (**)(uint64_t, uint64_t))(v98 + 24))(v97, v98);
      *(_QWORD *)&v149 = 39;
      *((_QWORD *)&v149 + 1) = 0xE100000000000000;
      v99._countAndFlagsBits = sub_100104E68(v97);
      object = v99._object;
      String.append(_:)(v99);
      swift_bridgeObjectRelease(object);
      v101._countAndFlagsBits = 91;
      v101._object = (void *)0xE100000000000000;
      String.append(_:)(v101);
      LOWORD(v160) = word_10033A072[(char)v97];
      v102._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt16, &protocol witness table for UInt16);
      v103 = v102._object;
      String.append(_:)(v102);
      swift_bridgeObjectRelease(v103);
      v104._countAndFlagsBits = 10077;
      v104._object = (void *)0xE200000000000000;
      String.append(_:)(v104);
      v105 = *((_QWORD *)&v149 + 1);
      *(_QWORD *)&v149 = sub_100013CC8(v149, *((unint64_t *)&v149 + 1), (uint64_t *)&v158);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v149, (char *)&v149 + 8);
      swift_bridgeObjectRelease(v105);
      sub_100014430(&v152);
      _os_log_impl((void *)&_mh_execute_header, v90, v91, "Cannot start resolve for record: %s [%s]", (uint8_t *)v92, 0x16u);
      swift_arrayDestroy(v93, 2, &type metadata for Any[8]);
      swift_slowDealloc(v93, -1, -1);
      swift_slowDealloc(v92, -1, -1);

      v106 = v143;
    }
    else
    {
      sub_100014430(&v155);
      sub_100014430(&v152);

      v106 = v88;
    }
    ((void (*)(char *, _QWORD *))v39)(v106, v147);
    return (*(uint64_t (**)(char *, uint64_t))(v127 + 8))(v142, v128);
  }
}

uint64_t sub_10002891C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t Strong;
  uint64_t v16;
  __int128 v17;
  void (*v18)(_BYTE *, _QWORD);
  unint64_t v19;
  uint64_t v20;
  _BYTE v22[32];
  _OWORD v23[2];
  __int16 v24;
  _BYTE v25[24];

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, a4, a3, &protocol requirements base descriptor for BonjourOffload);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a4, a3, AssociatedTypeWitness, &protocol requirements base descriptor for BonjourOffload, &associated conformance descriptor for BonjourOffload.BonjourOffload.DiscoveryEngine: BonjourOffloadDiscoveryEngine);
  v10 = swift_getAssociatedTypeWitness(255, AssociatedConformanceWitness, AssociatedTypeWitness, &protocol requirements base descriptor for BonjourOffloadDiscoveryEngine);
  v11 = type metadata accessor for Optional(0, v10);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin();
  v14 = &v22[-v13];
  a1 += 16;
  swift_beginAccess(a1, v25, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(a1);
  if (Strong)
  {
    v16 = Strong;
    v17 = *(_OWORD *)(a2 + 16);
    v23[0] = *(_OWORD *)a2;
    v23[1] = v17;
    v24 = *(_WORD *)(a2 + 32);
    v18 = (void (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(a4 + 56))(v22, a3, a4);
    v19 = sub_10001670C();
    v20 = type metadata accessor for Dictionary(0, &type metadata for DNSRecords.PTR, v10, v19);
    Dictionary.removeValue(forKey:)(v14, v23, v20);
    (*(void (**)(_QWORD *, uint64_t))(v12 + 8))(v14, v11);
    v18(v22, 0);
    return swift_unknownObjectRelease(v16);
  }
  else
  {
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v14, 1, 1, v10);
    return (*(uint64_t (**)(_QWORD *, uint64_t))(v12 + 8))(v14, v11);
  }
}

uint64_t BonjourOffload.stopResolving(record:)(uint64_t a1, unint64_t a2, unint64_t a3)
{
  uint64_t v5;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  void (*v21)(unint64_t, unint64_t);
  unint64_t v23;
  void (*v24)(unint64_t, uint64_t);
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  _BOOL4 v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  void (*v35)(char *, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  int v44;
  uint64_t (*v45)(unint64_t, unint64_t);
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  unint64_t v53;
  char *v54;
  uint64_t v55;
  __n128 v56;
  uint64_t v57;
  uint64_t (*v58)(char *, _QWORD);
  char *v59;
  uint64_t *v60;
  char *v61;
  uint64_t v62;
  NSObject *v63;
  os_log_type_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  Swift::String v72;
  void *object;
  Swift::String v74;
  Swift::String v75;
  void *v76;
  Swift::String v77;
  unint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  void (*v93)(uint64_t *, _QWORD);
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  void (*v97)(unint64_t, uint64_t);
  uint64_t v98;
  char *v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t AssociatedConformanceWitness;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  __int16 v118;
  uint64_t v119;
  unint64_t v120[4];
  uint64_t v121;
  uint64_t v122;
  _QWORD v123[2];
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char v130;
  char v131;
  uint64_t v132;
  uint64_t v133;

  v115 = a1;
  sub_100012C44(&qword_100404B80);
  __chkstk_darwin();
  v102 = (uint64_t)&v96 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, a3, a2, &protocol requirements base descriptor for BonjourOffload);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a3, a2, AssociatedTypeWitness, &protocol requirements base descriptor for BonjourOffload, &associated conformance descriptor for BonjourOffload.BonjourOffload.DiscoveryEngine: BonjourOffloadDiscoveryEngine);
  v7 = swift_getAssociatedTypeWitness(255, AssociatedConformanceWitness, AssociatedTypeWitness, &protocol requirements base descriptor for BonjourOffloadDiscoveryEngine);
  v107 = type metadata accessor for Optional(0, v7);
  v106 = *(_QWORD *)(v107 - 8);
  __chkstk_darwin();
  v101 = (uint64_t *)((char *)&v96 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin();
  v109 = (char *)&v96 - v9;
  v111 = v7;
  v110 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin();
  v108 = (char *)&v96 - v10;
  v113 = type metadata accessor for Logger(0);
  v112 = *(_QWORD *)(v113 - 8);
  __chkstk_darwin();
  v12 = (char *)&v96 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v114 = (char *)&v96 - v13;
  v14 = type metadata accessor for Optional(0, AssociatedTypeWitness);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin();
  v17 = (char *)&v96 - v16;
  v18 = *(_QWORD *)(AssociatedTypeWitness - 8);
  __chkstk_darwin();
  v20 = (char *)&v96 - v19;
  v21 = *(void (**)(unint64_t, unint64_t))(a3 + 64);
  v116 = a2;
  v21(a2, a3);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v17, 1, AssociatedTypeWitness) == 1)
    return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  v99 = v12;
  (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v20, v17, AssociatedTypeWitness);
  v126 = v117;
  v23 = a3;
  v24 = *(void (**)(unint64_t, uint64_t))(*(_QWORD *)(a3 + 8) + 8);
  v98 = *(_QWORD *)(a3 + 8);
  v97 = v24;
  ((void (*)(unint64_t))v24)(v116);
  v25 = sub_100031D80(v115, (uint64_t)&v126);
  v26 = Logger.logObject.getter(v25);
  v27 = static os_log_type_t.info.getter();
  v28 = os_log_type_enabled(v26, v27);
  v104 = AssociatedTypeWitness;
  v103 = v20;
  v100 = v18;
  if (v28)
  {
    v29 = (uint8_t *)swift_slowAlloc(12, -1);
    v30 = swift_slowAlloc(32, -1);
    v119 = v30;
    *(_DWORD *)v29 = 136315138;
    sub_100031D80((uint64_t)&v126, (uint64_t)&v122);
    v31 = sub_100012C44(&qword_100404B88);
    v32 = String.init<A>(describing:)(&v122, v31);
    v34 = v33;
    v122 = sub_100013CC8(v32, v33, &v119);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v122, v123);
    swift_bridgeObjectRelease(v34);
    sub_100014430(&v126);
    _os_log_impl((void *)&_mh_execute_header, v26, v27, "Stopping resolve for %s", v29, 0xCu);
    swift_arrayDestroy(v30, 1, &type metadata for Any[8]);
    swift_slowDealloc(v30, -1, -1);
    swift_slowDealloc(v29, -1, -1);
  }
  else
  {
    sub_100014430(&v126);
  }

  v35 = *(void (**)(char *, uint64_t))(v112 + 8);
  v36 = v113;
  v35(v114, v113);
  v37 = v115;
  sub_100031D80(v115, (uint64_t)&v126);
  v38 = sub_100012C44(&qword_100404B88);
  if (!swift_dynamicCast(&v122, &v126, v38, &type metadata for DNSRecords.PTR, 6))
  {
    v126 = v117;
    v61 = v99;
    v97(v116, v98);
    sub_100031D80(v37, (uint64_t)&v126);
    v62 = sub_100031D80(v37, (uint64_t)&v122);
    v63 = Logger.logObject.getter(v62);
    v64 = static os_log_type_t.error.getter(v63);
    if (os_log_type_enabled(v63, v64))
    {
      v65 = swift_slowAlloc(22, -1);
      v66 = swift_slowAlloc(64, -1);
      v121 = v66;
      *(_DWORD *)v65 = 136315394;
      sub_100031D80((uint64_t)&v126, (uint64_t)&v119);
      v67 = String.init<A>(describing:)(&v119, v38);
      v69 = v68;
      v119 = sub_100013CC8(v67, v68, &v121);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v119, v120);
      swift_bridgeObjectRelease(v69);
      sub_100014430(&v126);
      *(_WORD *)(v65 + 12) = 2080;
      v70 = v124;
      v71 = v125;
      sub_10003259C(&v122, v124);
      LOBYTE(v70) = (*(uint64_t (**)(uint64_t, uint64_t))(v71 + 24))(v70, v71);
      v119 = 39;
      v120[0] = 0xE100000000000000;
      v72._countAndFlagsBits = sub_100104E68(v70);
      object = v72._object;
      String.append(_:)(v72);
      swift_bridgeObjectRelease(object);
      v74._countAndFlagsBits = 91;
      v74._object = (void *)0xE100000000000000;
      String.append(_:)(v74);
      v118 = word_10033A072[(char)v70];
      v75._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt16, &protocol witness table for UInt16);
      v76 = v75._object;
      String.append(_:)(v75);
      swift_bridgeObjectRelease(v76);
      v77._countAndFlagsBits = 10077;
      v77._object = (void *)0xE200000000000000;
      String.append(_:)(v77);
      v78 = v120[0];
      v119 = sub_100013CC8(v119, v120[0], &v121);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v119, v120);
      swift_bridgeObjectRelease(v78);
      sub_100014430(&v122);
      _os_log_impl((void *)&_mh_execute_header, v63, v64, "Cannot stop resolve for record: %s [%s]", (uint8_t *)v65, 0x16u);
      swift_arrayDestroy(v66, 2, &type metadata for Any[8]);
      swift_slowDealloc(v66, -1, -1);
      swift_slowDealloc(v65, -1, -1);

      v79 = v99;
      v80 = v113;
    }
    else
    {

      sub_100014430(&v122);
      sub_100014430(&v126);
      v79 = v61;
      v80 = v36;
    }
    v35(v79, v80);
    goto LABEL_21;
  }
  v40 = v122;
  v39 = v123[0];
  v41 = v123[1];
  v42 = v124;
  v43 = v125;
  v44 = BYTE1(v125);
  v45 = *(uint64_t (**)(unint64_t, unint64_t))(v23 + 40);
  swift_bridgeObjectRetain(v123[0]);
  swift_bridgeObjectRetain(v42);
  v46 = v45(v116, v23);
  v114 = v47;
  v115 = v46;
  v49 = v48;
  v51 = v50;
  v113 = v40;
  v126 = v40;
  v127 = v39;
  v112 = v41;
  v128 = v41;
  v129 = v42;
  LODWORD(v99) = v43;
  v130 = v43;
  v52 = v44;
  v131 = v44;
  v53 = sub_10001670C();
  v54 = v109;
  v55 = v111;
  Dictionary.subscript.getter(v109, &v126, v51, &type metadata for DNSRecords.PTR, v111, v53);
  swift_bridgeObjectRelease(v42);
  swift_bridgeObjectRelease(v39);
  swift_bridgeObjectRelease(v51);
  swift_bridgeObjectRelease(v49);
  swift_bridgeObjectRelease(v114);
  v56 = swift_bridgeObjectRelease(v115);
  v57 = v110;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v110 + 48))(v54, 1, v55, v56) != 1)
  {
    v114 = (char *)v53;
    LODWORD(v115) = v52;
    v81 = v113;
    v82 = v116;
    v83 = v108;
    (*(void (**)(char *, char *, uint64_t))(v57 + 32))(v108, v54, v55);
    v84 = (*(uint64_t (**)(char *, uint64_t))(AssociatedConformanceWitness + 112))(v83, v104);
    if (v84)
    {
      v85 = v84;
      v86 = type metadata accessor for BonjourResolver(0);
      v87 = swift_dynamicCastClass(v85, v86);
      if (v87)
      {
        v88 = v87 + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_srv;
        swift_beginAccess(v87 + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_srv, &v119, 0, 0);
        v89 = v88;
        v83 = v108;
        v90 = v102;
        sub_100033B48(v89, v102, &qword_100404B80);
        v91 = type metadata accessor for DNSRecords.SRV(0);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v91 - 8) + 48))(v90, 1, v91) == 1)
        {
          sub_100033A84(v90, &qword_100404B80);
          (*(void (**)(char *, uint64_t))(AssociatedConformanceWitness + 120))(v83, v104);
          v126 = v81;
          v127 = v39;
          v128 = v112;
          v129 = v42;
          v130 = (char)v99;
          v131 = v115;
          v92 = v82;
          v93 = (void (*)(uint64_t *, _QWORD))(*(uint64_t (**)(uint64_t *, unint64_t, unint64_t))(v23 + 56))(&v122, v82, v23);
          v94 = type metadata accessor for Dictionary(0, &type metadata for DNSRecords.PTR, v55, v114);
          v95 = v101;
          Dictionary.removeValue(forKey:)(v101, &v126, v94);
          (*(void (**)(_QWORD *, uint64_t))(v106 + 8))(v95, v107);
          v93(&v122, 0);
          swift_bridgeObjectRelease(v42);
          swift_bridgeObjectRelease(v39);
          sub_10001F2B8(v92, v23);
          swift_unknownObjectRelease(v85);
          (*(void (**)(char *, uint64_t))(v57 + 8))(v108, v55);
LABEL_21:
          v58 = *(uint64_t (**)(char *, _QWORD))(v100 + 8);
          v59 = v103;
          v60 = &v132;
          return v58(v59, *(v60 - 32));
        }
        swift_bridgeObjectRelease(v42);
        swift_bridgeObjectRelease(v39);
        swift_unknownObjectRelease(v85);
        sub_100033A84(v90, &qword_100404B80);
LABEL_20:
        (*(void (**)(char *, uint64_t))(v57 + 8))(v83, v55);
        goto LABEL_21;
      }
      swift_unknownObjectRelease(v85);
    }
    swift_bridgeObjectRelease(v42);
    swift_bridgeObjectRelease(v39);
    goto LABEL_20;
  }
  (*(void (**)(char *, uint64_t))(v100 + 8))(v103, v104);
  swift_bridgeObjectRelease(v42);
  swift_bridgeObjectRelease(v39);
  v58 = *(uint64_t (**)(char *, _QWORD))(v106 + 8);
  v59 = v54;
  v60 = &v133;
  return v58(v59, *(v60 - 32));
}

Swift::Int sub_100029598()
{
  uint64_t v0;
  Swift::UInt8 v1;
  _QWORD v3[9];

  v1 = *(_BYTE *)(v0 + 8);
  Hasher.init(_seed:)(v3);
  NSObject.hash(into:)(v3);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_1000295F4(uint64_t a1)
{
  uint64_t v1;
  Swift::UInt8 v2;

  v2 = *(_BYTE *)(v1 + 8);
  NSObject.hash(into:)(a1);
  Hasher._combine(_:)(v2);
}

Swift::Int sub_100029634()
{
  uint64_t v0;
  Swift::UInt8 v1;
  _QWORD v3[9];

  v1 = *(_BYTE *)(v0 + 8);
  Hasher.init(_seed:)(v3);
  NSObject.hash(into:)(v3);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t sub_10002968C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;

  v2 = *a1;
  v3 = *((unsigned __int8 *)a1 + 8);
  v4 = *a2;
  v5 = *((unsigned __int8 *)a2 + 8);
  sub_100032C0C();
  return static NSObject.== infix(_:_:)(v2, v4) & ~(v3 ^ v5) & 1;
}

void *sub_1000296E4(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB14BonjourBrowser_discoveredPeers, a1, 33, 0);
  return &j__swift_endAccess;
}

void sub_10002972C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned __int8 v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t v13;
  char v14;
  double v15;
  id v16;
  void *v17;
  id v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  __int128 v42;
  Class isa;
  Class v44;
  void (*v45)(uint64_t *, _QWORD, __n128);
  uint64_t v46;
  void (*v47)(_QWORD *);
  __n128 v48;
  uint8_t *buf;
  uint64_t v50;
  os_log_type_t type;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  id v55;
  uint64_t v56;
  _BYTE v57[24];
  uint64_t v58[4];
  _BYTE v59[32];

  v2 = v1;
  v5 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_BYTE *)(a1 + 32);
  if (!sub_100106584(v5, v4, v7 | (*(unsigned __int8 *)(a1 + 33) << 8), *(_QWORD *)(v1 + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB14BonjourBrowser_service), *(_QWORD *)(v1 + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB14BonjourBrowser_service + 8), *(unsigned __int8 *)(v1+ OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB14BonjourBrowser_service+ 16) | (*(unsigned __int8 *)(v1+ OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB14BonjourBrowser_service+ 17) << 8)))
  {
    __break(1u);
    return;
  }
  v8 = *(_QWORD *)a1;
  v9 = (uint64_t *)(v1 + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB14BonjourBrowser_discoveredPeers);
  swift_beginAccess(v2 + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB14BonjourBrowser_discoveredPeers, v59, 0, 0);
  v10 = *v9;
  if (!*(_QWORD *)(v10 + 16))
    goto LABEL_10;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v10);
  v11 = sub_10002D93C(a1);
  if ((v12 & 1) == 0)
  {
    swift_bridgeObjectRelease(v4);
    swift_bridgeObjectRelease(v6);
    swift_bridgeObjectRelease(v10);
LABEL_10:
    swift_bridgeObjectRetain_n(v6, 2);
    v29 = swift_bridgeObjectRetain_n(v4, 2);
    v30 = Logger.logObject.getter(v29);
    v31 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v30, v31))
    {
      v32 = (uint8_t *)swift_slowAlloc(12, -1);
      v33 = swift_slowAlloc(32, -1);
      v58[0] = v33;
      *(_DWORD *)v32 = 136315138;
      swift_bridgeObjectRetain(v6);
      swift_bridgeObjectRetain(v4);
      v34 = DNSRecords.PTR.description.getter();
      v36 = v35;
      swift_bridgeObjectRelease(v4);
      swift_bridgeObjectRelease(v6);
      v56 = sub_100013CC8(v34, v36, v58);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, v57);
      swift_bridgeObjectRelease_n(v4, 2);
      swift_bridgeObjectRelease_n(v6, 2);
      swift_bridgeObjectRelease(v36);
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "Failed to query the TXT record for %s", v32, 0xCu);
      swift_arrayDestroy(v33, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v33, -1, -1);
      swift_slowDealloc(v32, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n(v4, 2);
      swift_bridgeObjectRelease_n(v6, 2);
    }

    return;
  }
  v13 = *(_QWORD *)(v10 + 56) + 16 * v11;
  v14 = *(_BYTE *)(v13 + 8);
  v55 = *(id *)v13;
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  *(_QWORD *)&v15 = swift_bridgeObjectRelease(v10).n128_u64[0];
  if ((v14 & 1) == 0)
  {
    v16 = objc_msgSend(v55, "serviceSpecificInfo", v15);
    if (v16)
    {
      v17 = v16;
      v18 = objc_msgSend(v16, "txtRecordData");

      if (v18)
      {
        v52 = v8;
        v19 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v18);
        v21 = v20;

        swift_bridgeObjectRetain_n(v6, 3);
        swift_bridgeObjectRetain_n(v4, 3);
        v53 = v19;
        v54 = v21;
        v22 = sub_100031FEC(v19, v21);
        v23 = Logger.logObject.getter(v22);
        v24 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v23, v24))
        {
          type = v24;
          v25 = (uint8_t *)swift_slowAlloc(12, -1);
          v50 = swift_slowAlloc(32, -1);
          v58[0] = v50;
          *(_DWORD *)v25 = 136315138;
          buf = v25;
          swift_bridgeObjectRetain(v6);
          swift_bridgeObjectRetain(v4);
          v26 = DNSRecords.PTR.description.getter();
          v28 = v27;
          swift_bridgeObjectRelease(v4);
          swift_bridgeObjectRelease(v6);
          v56 = sub_100013CC8(v26, v28, v58);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, v57);
          swift_bridgeObjectRelease_n(v4, 2);
          swift_bridgeObjectRelease_n(v6, 2);
          swift_bridgeObjectRelease(v28);
          _os_log_impl((void *)&_mh_execute_header, v23, type, "Providing TXT record for %s", buf, 0xCu);
          swift_arrayDestroy(v50, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v50, -1, -1);
          swift_slowDealloc(buf, -1, -1);
        }
        else
        {
          swift_bridgeObjectRelease_n(v4, 2);
          swift_bridgeObjectRelease_n(v6, 2);
        }

        v37 = *(void **)(v2 + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB14BonjourBrowser_delegate);
        if (v37)
        {
          *(_OWORD *)v58 = xmmword_10033A100;
          swift_unknownObjectRetain(v37);
          sub_100106CD0(v52, v6);
          sub_1000FF4F4(15, v5, v4, v7);
          v39 = v38;
          v41 = v40;
          sub_1000FBDAC(v38, v40);
          sub_10000E614(v39, v41);
          v42 = *(_OWORD *)v58;
          isa = Data._bridgeToObjectiveC()().super.isa;
          sub_10000E614(v42, *((unint64_t *)&v42 + 1));
          sub_100031FEC(v53, v54);
          v44 = Data._bridgeToObjectiveC()().super.isa;
          sub_10000E614(v53, v54);
          objc_msgSend(v37, "handleEventType:keyData:valueData:", 0, isa, v44);
          sub_10000E614(v53, v54);
          swift_bridgeObjectRelease(v4);
          swift_bridgeObjectRelease(v6);
          swift_unknownObjectRelease(v37);
          sub_10000E614(v53, v54);

        }
        else
        {
          sub_10000E614(v53, v54);
          swift_bridgeObjectRelease(v4);
          swift_bridgeObjectRelease(v6);
          sub_10000E614(v53, v54);
        }
      }
    }
  }
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v4);
  v45 = (void (*)(uint64_t *, _QWORD, __n128))sub_1000296E4((uint64_t)v58);
  v47 = sub_1001407E8(&v56, a1);
  if (*(_QWORD *)v46)
    *(_BYTE *)(v46 + 8) = 1;
  ((void (*)(uint64_t *, _QWORD))v47)(&v56, 0);
  swift_bridgeObjectRelease(v4);
  v48 = swift_bridgeObjectRelease(v6);
  v45(v58, 0, v48);

}

BOOL sub_100029D74(uint64_t a1)
{
  char *v1;
  char *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  _BOOL8 result;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  id v15;
  char *v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  Swift::String v20;
  uint64_t v21;
  unint64_t v22;
  Swift::String v23;
  Swift::String v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char v30[24];

  v2 = v1;
  v4 = *(_QWORD *)(a1 + 24);
  v6 = *(_QWORD *)&v2[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB14BonjourBrowser_service];
  v5 = *(_QWORD *)&v2[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB14BonjourBrowser_service + 8];
  v7 = v2[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB14BonjourBrowser_service + 16];
  result = sub_100106584(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(unsigned __int8 *)(a1 + 32) | (*(unsigned __int8 *)(a1 + 33) << 8), v6, v5, v7 | (v2[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB14BonjourBrowser_service+ 17] << 8));
  if (result)
  {
    v10 = *(_QWORD *)a1;
    v9 = *(_QWORD *)(a1 + 8);
    v11 = &v2[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB14BonjourBrowser_discoveredPeers];
    swift_beginAccess(&v2[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB14BonjourBrowser_discoveredPeers], v30, 0, 0);
    v12 = *(_QWORD *)v11;
    if (*(_QWORD *)(v12 + 16))
    {
      swift_bridgeObjectRetain(v9);
      swift_bridgeObjectRetain(v4);
      swift_bridgeObjectRetain(v12);
      v13 = sub_10002D93C(a1);
      if ((v14 & 1) != 0)
      {
        v15 = *(id *)(*(_QWORD *)(v12 + 56) + 16 * v13);
        swift_bridgeObjectRelease(v4);
        swift_bridgeObjectRelease(v9);
        swift_bridgeObjectRelease(v12);
        return (BOOL)v15;
      }
      swift_bridgeObjectRelease(v4);
      swift_bridgeObjectRelease(v9);
      swift_bridgeObjectRelease(v12);
    }
    swift_bridgeObjectRetain_n(v9, 2);
    swift_bridgeObjectRetain_n(v4, 2);
    v16 = v2;
    v17 = Logger.logObject.getter(v16);
    v18 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v17, v18))
    {
      v19 = swift_slowAlloc(22, -1);
      v26 = swift_slowAlloc(64, -1);
      v29 = v26;
      *(_DWORD *)v19 = 136315394;
      swift_bridgeObjectRetain(v9);
      v27 = sub_100013CC8(v10, v9, &v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, &v28);
      swift_bridgeObjectRelease_n(v4, 2);
      swift_bridgeObjectRelease_n(v9, 3);
      *(_WORD *)(v19 + 12) = 2080;
      v27 = v6;
      v28 = v5;
      swift_bridgeObjectRetain_n(v5, 2);
      v20._countAndFlagsBits = 24366;
      v20._object = (void *)0xE200000000000000;
      String.append(_:)(v20);
      if (v7)
        v21 = 7365749;
      else
        v21 = 7365492;
      v22 = 0xE300000000000000;
      String.append(_:)(*(Swift::String *)&v21);
      swift_bridgeObjectRelease(0xE300000000000000);
      v23._countAndFlagsBits = 46;
      v23._object = (void *)0xE100000000000000;
      String.append(_:)(v23);
      v24._countAndFlagsBits = 0x6C61636F6CLL;
      v24._object = (void *)0xE500000000000000;
      String.append(_:)(v24);
      swift_bridgeObjectRelease(v5);
      v25 = v28;
      v27 = sub_100013CC8(v27, v28, &v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, &v28);

      swift_bridgeObjectRelease(v25);
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Failed to query the discovery result for %s from %s", (uint8_t *)v19, 0x16u);
      swift_arrayDestroy(v26, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v26, -1, -1);
      swift_slowDealloc(v19, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n(v4, 2);
      swift_bridgeObjectRelease_n(v9, 2);
    }

    return 0;
  }
  __break(1u);
  return result;
}

void sub_10002A0CC(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  int64_t v8;
  unint64_t v9;
  id v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  int64_t v22;
  int v23;
  uint64_t v24;
  unsigned __int8 v25;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    v2 = a1;
    sub_100074EC8(0, v1, 0);
    v4 = sub_100031A00(v2);
    v5 = 0;
    v6 = v2 + 64;
    v21 = v2 + 80;
    v22 = v1;
    v23 = v3;
    v24 = v2 + 64;
    while ((v4 & 0x8000000000000000) == 0 && v4 < 1 << *(_BYTE *)(v2 + 32))
    {
      v9 = (unint64_t)v4 >> 6;
      if ((*(_QWORD *)(v6 + 8 * ((unint64_t)v4 >> 6)) & (1 << v4)) == 0)
        goto LABEL_23;
      if (*(_DWORD *)(v2 + 36) != v3)
        goto LABEL_24;
      v10 = *(id *)(*(_QWORD *)(v2 + 56) + 16 * v4);
      v25 = objc_msgSend(v10, "publishID");
      v11 = objc_msgSend(v10, "publisherAddress");

      v12 = v2;
      v14 = _swiftEmptyArrayStorage[2];
      v13 = _swiftEmptyArrayStorage[3];
      if (v14 >= v13 >> 1)
        sub_100074EC8(v13 > 1, v14 + 1, 1);
      _swiftEmptyArrayStorage[2] = v14 + 1;
      v15 = &_swiftEmptyArrayStorage[2 * v14];
      *((_BYTE *)v15 + 32) = v25;
      v15[5] = v11;
      v7 = 1 << *(_BYTE *)(v12 + 32);
      if (v4 >= v7)
        goto LABEL_25;
      v6 = v24;
      v16 = *(_QWORD *)(v24 + 8 * v9);
      if ((v16 & (1 << v4)) == 0)
        goto LABEL_26;
      v2 = v12;
      v3 = v23;
      if (*(_DWORD *)(v12 + 36) != v23)
        goto LABEL_27;
      v17 = v16 & (-2 << (v4 & 0x3F));
      if (v17)
      {
        v7 = __clz(__rbit64(v17)) | v4 & 0xFFFFFFFFFFFFFFC0;
        v8 = v22;
      }
      else
      {
        v18 = v9 + 1;
        v19 = (unint64_t)(v7 + 63) >> 6;
        v8 = v22;
        if (v9 + 1 < v19)
        {
          v20 = *(_QWORD *)(v24 + 8 * v18);
          if (v20)
          {
LABEL_20:
            v7 = __clz(__rbit64(v20)) + (v18 << 6);
          }
          else
          {
            while (v19 - 2 != v9)
            {
              v20 = *(_QWORD *)(v21 + 8 * v9++);
              if (v20)
              {
                v18 = v9 + 1;
                goto LABEL_20;
              }
            }
          }
        }
      }
      ++v5;
      v4 = v7;
      if (v5 == v8)
        return;
    }
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
  }
}

double sub_10002A344(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  id v4;
  double result;
  void *v6;
  id v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t *v15;
  id v16;
  id v17;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint8_t *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  NSData v34;
  uint64_t v35;
  unint64_t v36;
  Class isa;
  uint64_t v38;
  unint64_t v39;
  uint8_t *v40;
  uint64_t v41;
  char v42;
  void *v43;
  uint64_t v44;
  uint64_t v45[3];
  _QWORD v46[4];
  char v47;
  char v48;

  v2 = v1;
  v4 = objc_msgSend(a1, "serviceSpecificInfo");
  if (v4)
  {
    v6 = v4;
    v7 = objc_msgSend(v4, "instanceName");

    if (v7)
    {
      v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
      v10 = v9;

      v12 = *(_QWORD *)(v2 + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB14BonjourBrowser_service);
      v11 = *(_QWORD *)(v2 + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB14BonjourBrowser_service + 8);
      v13 = *(_BYTE *)(v2 + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB14BonjourBrowser_service + 16);
      v14 = *(_BYTE *)(v2 + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB14BonjourBrowser_service + 17);
      v46[0] = v8;
      v46[1] = v10;
      v46[2] = v12;
      v46[3] = v11;
      v42 = v13;
      v47 = v13;
      v48 = v14;
      v15 = (uint64_t *)(v2 + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB14BonjourBrowser_discoveredPeers);
      swift_beginAccess(v2 + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB14BonjourBrowser_discoveredPeers, v45, 33, 0);
      v16 = a1;
      swift_bridgeObjectRetain_n(v11, 2);
      v17 = v16;
      swift_bridgeObjectRetain(v10);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v15);
      v43 = v17;
      v44 = *v15;
      *v15 = 0x8000000000000000;
      sub_100030590((uint64_t)v17, 0, (uint64_t)v46, isUniquelyReferenced_nonNull_native);
      v19 = *v15;
      *v15 = v44;
      swift_bridgeObjectRelease(v11);
      swift_bridgeObjectRelease(v10);
      swift_bridgeObjectRelease(v19);
      swift_endAccess(v45);
      swift_bridgeObjectRetain_n(v11, 2);
      v20 = swift_bridgeObjectRetain_n(v10, 2);
      v21 = Logger.logObject.getter(v20);
      v22 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v21, v22))
      {
        v41 = v12;
        v23 = (uint8_t *)swift_slowAlloc(12, -1);
        v24 = swift_slowAlloc(32, -1);
        v45[0] = v24;
        *(_DWORD *)v23 = 136315138;
        v40 = v23 + 4;
        swift_bridgeObjectRetain(v11);
        swift_bridgeObjectRetain(v10);
        v25 = DNSRecords.PTR.description.getter();
        v27 = v26;
        swift_bridgeObjectRelease(v11);
        swift_bridgeObjectRelease(v10);
        v44 = sub_100013CC8(v25, v27, v45);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, v45);
        swift_bridgeObjectRelease_n(v11, 2);
        swift_bridgeObjectRelease_n(v10, 2);
        swift_bridgeObjectRelease(v27);
        _os_log_impl((void *)&_mh_execute_header, v21, v22, "Providing PTR record for %s", v23, 0xCu);
        swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v24, -1, -1);
        v28 = v23;
        v12 = v41;
        swift_slowDealloc(v28, -1, -1);
      }
      else
      {
        swift_bridgeObjectRelease_n(v11, 2);
        swift_bridgeObjectRelease_n(v10, 2);
      }

      v29 = *(void **)(v2 + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB14BonjourBrowser_delegate);
      if (v29)
      {
        swift_unknownObjectRetain(*(_QWORD *)(v2
                                            + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB14BonjourBrowser_delegate));
        sub_1000FF4F4(11, v12, v11, v42);
        v31 = v30;
        v33 = v32;
        v34.super.isa = Data._bridgeToObjectiveC()().super.isa;
        sub_10000E614(v31, v33);
        sub_100106CEC(v8, v10);
        if (v36 >> 60 == 15)
        {
          isa = 0;
        }
        else
        {
          v38 = v35;
          v39 = v36;
          isa = Data._bridgeToObjectiveC()().super.isa;
          sub_10000E658(v38, v39);
        }
        objc_msgSend(v29, "handleEventType:keyData:valueData:", 0, v34.super.isa, isa, v40);

        swift_unknownObjectRelease(v29);
      }
      sub_10002972C((uint64_t)v46);

      swift_bridgeObjectRelease(v11);
      *(_QWORD *)&result = swift_bridgeObjectRelease(v10).n128_u64[0];
    }
  }
  return result;
}

void sub_10002A764(unsigned __int8 a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 v14;
  unsigned __int8 v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  id v24;
  void *v25;
  id v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  Class isa;
  unint64_t v47;
  Class v48;
  uint64_t v49;
  NSObject *v50;
  os_log_type_t v51;
  uint8_t *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  NSData v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  double v67;
  Class v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unsigned __int8 v78;
  id v79;
  uint64_t v80;
  _BYTE v81[16];
  void *v82;
  __int128 v83;
  uint64_t v84;
  char v85[24];
  _QWORD v86[4];
  char v87;

  v3 = v2;
  v6 = (uint64_t *)(v2 + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB14BonjourBrowser_discoveredPeers);
  swift_beginAccess(v6, v85, 0, 0);
  v7 = *v6;
  v8 = a2;
  v9 = swift_bridgeObjectRetain(v7);
  sub_100032C78(v9, a1, (uint64_t)v8);
  v11 = v10;
  v13 = v12;
  v15 = v14;
  v16 = ~v14;
  swift_bridgeObjectRelease(v7);

  if (v16)
  {
    v78 = v15;
    sub_1000258E4(&v83, v11, v13, *v6, (uint64_t)v86);
    v17 = v86[1];
    v18 = v86[3];
    v74 = v86[2];
    v75 = v86[0];
    v73 = v87;

    sub_1000258E4(&v80, v11, v13, *v6, (uint64_t)&v83);
    v19 = *((_QWORD *)&v83 + 1);
    swift_bridgeObjectRelease(v84);
    swift_bridgeObjectRelease(v19);
    v79 = (id)v80;
    v20 = v81[0];
    swift_beginAccess(v6, &v80, 33, 0);
    sub_1000318C4((uint64_t)&v82, v11, v13, (uint64_t)&v83);
    v21 = *((_QWORD *)&v83 + 1);
    v22 = v84;
    v23 = v82;
    swift_endAccess(&v80);
    swift_bridgeObjectRelease(v22);
    swift_bridgeObjectRelease(v21);

    if (v20 == 1)
    {
      v24 = objc_msgSend(v79, "serviceSpecificInfo");
      if (v24)
      {
        v25 = v24;
        v26 = objc_msgSend(v24, "txtRecordData");

        if (v26)
        {
          v27 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v26);
          v29 = v28;

          v72 = v3;
          swift_bridgeObjectRetain_n(v17, 3);
          swift_bridgeObjectRetain_n(v18, 3);
          v70 = v29;
          v30 = sub_100031FEC(v27, v29);
          v31 = Logger.logObject.getter(v30);
          v32 = static os_log_type_t.info.getter();
          v71 = v27;
          if (os_log_type_enabled(v31, v32))
          {
            v33 = (uint8_t *)swift_slowAlloc(12, -1);
            v69 = swift_slowAlloc(32, -1);
            *(_QWORD *)&v83 = v69;
            *(_DWORD *)v33 = 136315138;
            swift_bridgeObjectRetain(v17);
            swift_bridgeObjectRetain(v18);
            v34 = DNSRecords.PTR.description.getter();
            v35 = v11;
            v37 = v36;
            swift_bridgeObjectRelease(v18);
            swift_bridgeObjectRelease(v17);
            v80 = sub_100013CC8(v34, v37, (uint64_t *)&v83);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v80, v81);
            swift_bridgeObjectRelease_n(v18, 2);
            swift_bridgeObjectRelease_n(v17, 2);
            v38 = v37;
            v11 = v35;
            swift_bridgeObjectRelease(v38);
            _os_log_impl((void *)&_mh_execute_header, v31, v32, "Removing TXT for %s", v33, 0xCu);
            swift_arrayDestroy(v69, 1, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v69, -1, -1);
            swift_slowDealloc(v33, -1, -1);
          }
          else
          {
            swift_bridgeObjectRelease_n(v18, 2);
            swift_bridgeObjectRelease_n(v17, 2);
          }

          v3 = v72;
          v39 = *(void **)(v72 + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB14BonjourBrowser_delegate);
          if (v39)
          {
            v83 = xmmword_10033A100;
            swift_unknownObjectRetain(v39);
            sub_100106CD0(v75, v17);
            sub_1000FF4F4(15, v74, v18, v73);
            v41 = v40;
            v43 = v42;
            sub_1000FBDAC(v40, v42);
            sub_10000E614(v41, v43);
            v45 = *((_QWORD *)&v83 + 1);
            v44 = v83;
            isa = Data._bridgeToObjectiveC()().super.isa;
            v47 = v45;
            v3 = v72;
            sub_10000E614(v44, v47);
            sub_100031FEC(v71, v70);
            v48 = Data._bridgeToObjectiveC()().super.isa;
            sub_10000E614(v71, v70);
            objc_msgSend(v39, "handleEventType:keyData:valueData:", 1, isa, v48);
            sub_10000E614(v71, v70);
            swift_bridgeObjectRelease(v18);
            swift_bridgeObjectRelease(v17);
            swift_unknownObjectRelease(v39);
            sub_10000E614(v71, v70);

          }
          else
          {
            sub_10000E614(v71, v70);
            swift_bridgeObjectRelease(v18);
            swift_bridgeObjectRelease(v17);
            sub_10000E614(v71, v70);
          }
        }
      }
    }
    v76 = v13;
    v77 = v11;
    swift_bridgeObjectRetain_n(v17, 2);
    v49 = swift_bridgeObjectRetain_n(v18, 2);
    v50 = Logger.logObject.getter(v49);
    v51 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v50, v51))
    {
      v52 = (uint8_t *)swift_slowAlloc(12, -1);
      v53 = swift_slowAlloc(32, -1);
      *(_QWORD *)&v83 = v53;
      *(_DWORD *)v52 = 136315138;
      swift_bridgeObjectRetain(v17);
      swift_bridgeObjectRetain(v18);
      v54 = DNSRecords.PTR.description.getter();
      v56 = v55;
      swift_bridgeObjectRelease(v18);
      swift_bridgeObjectRelease(v17);
      v80 = sub_100013CC8(v54, v56, (uint64_t *)&v83);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v80, v81);
      swift_bridgeObjectRelease_n(v18, 2);
      swift_bridgeObjectRelease_n(v17, 2);
      swift_bridgeObjectRelease(v56);
      _os_log_impl((void *)&_mh_execute_header, v50, v51, "Removing PTR for %s", v52, 0xCu);
      swift_arrayDestroy(v53, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v53, -1, -1);
      swift_slowDealloc(v52, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n(v18, 2);
      swift_bridgeObjectRelease_n(v17, 2);
    }

    v57 = *(void **)(v3 + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB14BonjourBrowser_delegate);
    if (v57)
    {
      swift_unknownObjectRetain(*(_QWORD *)(v3
                                          + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB14BonjourBrowser_delegate));
      sub_1000FF4F4(11, v74, v18, v73);
      v59 = v58;
      v61 = v60;
      v62.super.isa = Data._bridgeToObjectiveC()().super.isa;
      sub_10000E614(v59, v61);
      sub_100106CEC(v75, v17);
      v64 = v63;
      v66 = v65;
      swift_bridgeObjectRelease(v18);
      *(_QWORD *)&v67 = swift_bridgeObjectRelease(v17).n128_u64[0];
      if (v66 >> 60 == 15)
      {
        v68 = 0;
      }
      else
      {
        v68 = Data._bridgeToObjectiveC()().super.isa;
        sub_10000E658(v64, v66);
      }
      objc_msgSend(v57, "handleEventType:keyData:valueData:", 1, v62.super.isa, v68, v67);
      sub_100033A08(v77, v76, v78);

      swift_unknownObjectRelease(v57);
    }
    else
    {
      sub_100033A08(v77, v76, v78);

      swift_bridgeObjectRelease(v18);
      swift_bridgeObjectRelease(v17);
    }
  }
}

void sub_10002AF3C()
{
  uint64_t v0;
  void *v1;
  Class isa;
  Class v3;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB14BonjourBrowser_delegate);
  if (v1)
  {
    swift_unknownObjectRetain(*(_QWORD *)(v0
                                        + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB14BonjourBrowser_delegate));
    isa = Data._bridgeToObjectiveC()().super.isa;
    v3 = Data._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v1, "handleEventType:keyData:valueData:", 0, isa, v3);

    swift_unknownObjectRelease(v1);
  }
}

double sub_10002AFCC(void *a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  id v6;
  double result;
  void *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  id v25;
  id v26;
  id v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v32;
  unsigned int v33;
  unsigned int v34;
  id v35;
  id v36;
  unint64_t v37;
  id v38;
  void *v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  id v45;
  id v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  NSObject *v52;
  os_log_type_t v53;
  uint8_t *v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  char v58;
  char v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  __int128 v65;
  Class isa;
  Class v67;
  id v68;
  objc_class *v69;
  Class v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v75;
  _DWORD *v76;
  uint8_t *buf;
  uint64_t v78;
  NSObject *log;
  char loga;
  unint64_t v81;
  char v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  os_log_type_t type[4];
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD v95[4];
  char v96;
  char v97;
  __int128 v98;
  char v99[24];

  if (a1)
  {
    v3 = v2;
    v6 = objc_msgSend(a1, "instanceName");
    if (v6)
    {
      v8 = v6;
      v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
      v11 = v10;

      v13 = *(_QWORD *)(v3 + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB14BonjourBrowser_service);
      v12 = *(_QWORD *)(v3 + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB14BonjourBrowser_service + 8);
      v14 = *(_BYTE *)(v3 + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB14BonjourBrowser_service + 16);
      v15 = *(_BYTE *)(v3 + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB14BonjourBrowser_service + 17);
      v95[0] = v9;
      v95[1] = v11;
      v95[2] = v13;
      v95[3] = v12;
      v96 = v14;
      v97 = v15;
      v16 = (uint64_t *)(v3 + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB14BonjourBrowser_discoveredPeers);
      swift_beginAccess(v3 + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB14BonjourBrowser_discoveredPeers, v99, 0, 0);
      v17 = *v16;
      if (!*(_QWORD *)(*v16 + 16))
      {
        *(_QWORD *)&result = swift_bridgeObjectRelease(v11).n128_u64[0];
        return result;
      }
      swift_bridgeObjectRetain_n(v12, 2);
      swift_bridgeObjectRetain(v11);
      swift_bridgeObjectRetain(v17);
      v18 = sub_10002D93C((uint64_t)v95);
      if ((v19 & 1) == 0)
      {
        swift_bridgeObjectRelease_n(v12, 2);
        swift_bridgeObjectRelease_n(v11, 2);
        *(_QWORD *)&result = swift_bridgeObjectRelease(v17).n128_u64[0];
        return result;
      }
      v82 = v14;
      v83 = v9;
      v84 = v13;
      v85 = v16;
      v86 = v3;
      v88 = a2 >> 40;
      v91 = HIWORD(a2);
      v20 = HIDWORD(a2);
      v21 = a2 >> 24;
      v22 = a2 >> 16;
      v23 = a2 >> 8;
      v24 = *(_QWORD *)(v17 + 56) + 16 * v18;
      *(_DWORD *)type = *(unsigned __int8 *)(v24 + 8);
      v25 = *(id *)v24;
      swift_bridgeObjectRelease(v12);
      swift_bridgeObjectRelease(v11);
      swift_bridgeObjectRelease(v17);
      v26 = v25;
      v27 = objc_msgSend(v26, "publisherAddress");
      WiFiMACAddress.wifiAddress.getter();
      v28 = v11;
      v30 = v29;

      LODWORD(v98) = v30;
      BYTE4(v98) = BYTE4(v30);
      BYTE5(v98) = BYTE5(v30);
      LOBYTE(v94) = v23;
      BYTE1(v94) = v22;
      BYTE2(v94) = v21;
      BYTE3(v94) = v20;
      BYTE4(v94) = v88;
      BYTE5(v94) = v91;
      if ((_DWORD)v30 != (_DWORD)v94 || WORD2(v98) != WORD2(v94))
      {
        swift_bridgeObjectRelease(v12);
        swift_bridgeObjectRelease(v28);

LABEL_17:
LABEL_18:

        return result;
      }
      v81 = v12;
      v32 = v28;
      v33 = objc_msgSend(v26, "publishID");

      v34 = objc_msgSend(v26, "publishID");
      if (v33 != v34)
      {
        swift_bridgeObjectRelease(v81);
        swift_bridgeObjectRelease(v28);
        goto LABEL_17;
      }
      v35 = objc_msgSend(v26, "serviceSpecificInfo");

      if (v35 && (v36 = objc_msgSend(v35, "txtRecordData"), v35, v36))
      {
        v89 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v36);
        v92 = v37;

      }
      else
      {
        v89 = 0;
        v92 = 0xF000000000000000;
      }
      v38 = objc_msgSend(a1, "txtRecordData");
      if (v38)
      {
        v39 = v38;
        v40 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v38);
        v42 = v41;

        if (v92 >> 60 == 15)
        {
          v43 = v40;
          v44 = v28;
          if (v42 >> 60 == 15)
            goto LABEL_37;
          goto LABEL_29;
        }
        if (v42 >> 60 == 15)
        {
          v43 = v40;
          v44 = v28;
          goto LABEL_29;
        }
        sub_1000339F4(v89, v92);
        _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(v89, v92);
        loga = v59;
        sub_10000E658(v40, v42);
        sub_10000E658(v89, v92);
        sub_10000E658(v89, v92);
        v44 = v28;
        if ((loga & 1) == 0)
          goto LABEL_30;
      }
      else
      {
        v44 = v28;
        if (v92 >> 60 != 15)
        {
          v43 = 0;
          v42 = 0xF000000000000000;
LABEL_29:
          sub_10000E658(v89, v92);
          sub_10000E658(v43, v42);
LABEL_30:
          if (*(_DWORD *)type)
          {
            v45 = objc_msgSend(v26, "serviceSpecificInfo");

            if (v45)
            {
              v46 = objc_msgSend(v45, "txtRecordData");

              if (v46)
              {
                v47 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v46);
                v49 = v48;

                v50 = v86;
                swift_bridgeObjectRetain_n(v81, 3);
                swift_bridgeObjectRetain_n(v28, 3);
                v90 = v49;
                v93 = v47;
                v51 = sub_100031FEC(v47, v49);
                v52 = Logger.logObject.getter(v51);
                v53 = static os_log_type_t.info.getter();
                if (os_log_type_enabled(v52, v53))
                {
                  log = v52;
                  v54 = (uint8_t *)swift_slowAlloc(12, -1);
                  v78 = swift_slowAlloc(32, -1);
                  *(_QWORD *)&v98 = v78;
                  *(_DWORD *)v54 = 136315138;
                  v76 = v54 + 4;
                  buf = v54;
                  swift_bridgeObjectRetain(v81);
                  swift_bridgeObjectRetain(v28);
                  v55 = DNSRecords.PTR.description.getter();
                  v57 = v56;
                  swift_bridgeObjectRelease(v81);
                  swift_bridgeObjectRelease(v28);
                  v94 = sub_100013CC8(v55, v57, (uint64_t *)&v98);
                  v50 = v86;
                  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v94, v95);
                  swift_bridgeObjectRelease_n(v81, 2);
                  swift_bridgeObjectRelease_n(v28, 2);
                  swift_bridgeObjectRelease(v57);
                  _os_log_impl((void *)&_mh_execute_header, log, v53, "Removing TXT for %s", buf, 0xCu);
                  swift_arrayDestroy(v78, 1, (char *)&type metadata for Any + 8);
                  swift_slowDealloc(v78, -1, -1);
                  swift_slowDealloc(buf, -1, -1);

                }
                else
                {
                  swift_bridgeObjectRelease_n(v81, 2);
                  swift_bridgeObjectRelease_n(v28, 2);

                }
                v60 = *(void **)(v50
                               + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB14BonjourBrowser_delegate);
                if (v60)
                {
                  v98 = xmmword_10033A100;
                  swift_unknownObjectRetain(v60);
                  v44 = v28;
                  sub_100106CD0(v83, v28);
                  sub_1000FF4F4(15, v84, v81, v82);
                  v62 = v61;
                  v64 = v63;
                  sub_1000FBDAC(v61, v63);
                  sub_10000E614(v62, v64);
                  v65 = v98;
                  isa = Data._bridgeToObjectiveC()().super.isa;
                  sub_10000E614(v65, *((unint64_t *)&v65 + 1));
                  sub_100031FEC(v93, v90);
                  v67 = Data._bridgeToObjectiveC()().super.isa;
                  sub_10000E614(v93, v90);
                  objc_msgSend(v60, "handleEventType:keyData:valueData:", 1, isa, v67);
                  sub_10000E614(v93, v90);
                  swift_bridgeObjectRelease(v81);
                  swift_bridgeObjectRelease(v32);
                  swift_unknownObjectRelease(v60);
                  sub_10000E614(v93, v90);

                }
                else
                {
                  sub_10000E614(v93, v90);
                  swift_bridgeObjectRelease(v81);
                  v44 = v28;
                  swift_bridgeObjectRelease(v28);
                  sub_10000E614(v93, v90);
                }
                v58 = 0;
              }
              else
              {
                v58 = 1;
                v44 = v32;
              }
            }
            else
            {
              v58 = 1;
            }
          }
          else
          {

            v58 = 0;
          }
          v68 = objc_msgSend(v26, "serviceSpecificInfo", v76);

          if (v68)
          {
            v69 = (objc_class *)objc_msgSend(a1, "txtRecordData");
            v70 = v69;
            if (v69)
            {
              v71 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v69);
              v73 = v72;

              v70 = Data._bridgeToObjectiveC()().super.isa;
              v44 = v32;
              sub_10000E614(v71, v73);
            }
            objc_msgSend(v68, "setTxtRecordData:", v70);

          }
          swift_beginAccess(v85, &v98, 33, 0);
          swift_bridgeObjectRetain(v81);
          swift_bridgeObjectRetain(v44);
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v85);
          v94 = *v85;
          *v85 = 0x8000000000000000;
          sub_100030590((uint64_t)v26, v58, (uint64_t)v95, isUniquelyReferenced_nonNull_native);
          v75 = *v85;
          *v85 = v94;
          swift_bridgeObjectRelease(v81);
          swift_bridgeObjectRelease(v44);
          swift_bridgeObjectRelease(v75);
          swift_endAccess(&v98);
          sub_10002972C((uint64_t)v95);
          swift_bridgeObjectRelease(v81);
          swift_bridgeObjectRelease(v44);
          goto LABEL_18;
        }
      }
LABEL_37:
      swift_bridgeObjectRelease(v44);

      *(_QWORD *)&result = swift_bridgeObjectRelease(v81).n128_u64[0];
    }
  }
  return result;
}

id sub_10002B8F8()
{
  return sub_10002BA80(type metadata accessor for BonjourBrowser);
}

void sub_10002B978()
{
  sub_10002AF3C();
}

double sub_10002B998(void *a1, uint64_t a2)
{
  return sub_10002AFCC(a1, a2 & 0xFFFFFFFFFFFFFFLL);
}

id sub_10002BA74()
{
  return sub_10002BA80(type metadata accessor for BonjourAdvertiser);
}

id sub_10002BA80(uint64_t (*a1)(_QWORD))
{
  void *v1;
  objc_super v3;

  v3.receiver = v1;
  v3.super_class = (Class)a1(0);
  return objc_msgSendSuper2(&v3, "dealloc");
}

void sub_10002BB50()
{
  char *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  Class isa;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  Class v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  _QWORD v43[4];
  char v44;
  char v45;
  uint64_t v46[2];
  uint64_t v47;

  v1 = (uint64_t *)&v0[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_aaaa];
  v2 = *(_QWORD *)&v0[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_aaaa + 16];
  if (v2)
  {
    v4 = *v1;
    v3 = v1[1];
    v5 = v1[4];
    v7 = v1[5];
    v6 = v1[6];
    v8 = v1[7];
    v40 = v1[3];
    v41 = v0;
    v35 = v3;
    v36 = v4;
    v9 = v3;
    v10 = v2;
    v38 = v6;
    v39 = v5;
    v34 = v7;
    v37 = v8;
    v11 = sub_1000339B4(v4, v9, v2, v40, v5, v7, v6, v8);
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc(12, -1);
      v33 = swift_slowAlloc(32, -1);
      *(_DWORD *)v14 = 136315138;
      v46[0] = v33;
      v15 = *(_QWORD *)&v41[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_service + 8];
      v16 = *(_QWORD *)&v41[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_service + 16];
      v17 = *(_QWORD *)&v41[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_service + 24];
      v18 = v41[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_service + 32];
      v19 = v41[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_service + 33];
      v43[0] = *(_QWORD *)&v41[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_service];
      v43[1] = v15;
      v43[2] = v16;
      v43[3] = v17;
      v44 = v18;
      v45 = v19;
      swift_bridgeObjectRetain(v15);
      swift_bridgeObjectRetain(v17);
      v20 = DNSRecords.PTR.description.getter();
      v22 = v21;
      swift_bridgeObjectRelease(v17);
      swift_bridgeObjectRelease(v15);
      v42 = sub_100013CC8(v20, v22, v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, v43);

      swift_bridgeObjectRelease(v22);
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Providing AAAA record for %s", v14, 0xCu);
      swift_arrayDestroy(v33, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v33, -1, -1);
      swift_slowDealloc(v14, -1, -1);
    }
    else
    {

    }
    v23 = *(void **)&v41[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_delegate];
    if (v23)
    {
      swift_unknownObjectRetain(*(_QWORD *)&v41[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_delegate]);
      DNSRecords.BrowseHost.keyData.getter(v36, v35, v10);
      v25 = v24;
      v27 = v26;
      isa = Data._bridgeToObjectiveC()().super.isa;
      sub_10000E614(v25, v27);
      v46[0] = v39;
      v46[1] = v34;
      v29 = sub_1000FADC0((uint64_t)v46, (uint64_t)&v47);
      v31 = v30;
      sub_100032C48(v36, v35, v10, v40, v39, v34, v38, v37);
      v32 = Data._bridgeToObjectiveC()().super.isa;
      sub_10000E614(v29, v31);
      objc_msgSend(v23, "handleEventType:keyData:valueData:", 0, isa, v32);

      swift_unknownObjectRelease(v23);
    }
    else
    {
      sub_100032C48(v36, v35, v10, v40, v39, v34, v38, v8);
    }
    v41[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_providedAAAA] = 1;
  }
}

uint64_t sub_10002BEBC()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  __int128 v19;
  NSData v20;
  uint64_t v21;
  unint64_t v22;
  Class isa;
  uint64_t v24;
  unint64_t v25;
  __int128 v26;
  _BYTE v27[24];

  sub_100012C44(&qword_100404B80);
  __chkstk_darwin();
  v2 = &v27[-((v1 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v3 = type metadata accessor for DNSRecords.SRV(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin();
  v6 = &v27[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v7 = v0 + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_srv;
  swift_beginAccess(v0 + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_srv, v27, 0, 0);
  sub_100033B48(v7, (uint64_t)v2, &qword_100404B80);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v2, 1, v3) == 1)
    return sub_100033A84((uint64_t)v2, &qword_100404B80);
  sub_100033AC0((uint64_t)v2, (uint64_t)v6, type metadata accessor for DNSRecords.SRV);
  v9 = *(void **)(v0 + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_delegate);
  if (v9)
  {
    v10 = *(_QWORD *)v6;
    v11 = *((_QWORD *)v6 + 1);
    v12 = *((_QWORD *)v6 + 2);
    v13 = *((_QWORD *)v6 + 3);
    v14 = v6[32];
    v26 = xmmword_10033A100;
    swift_unknownObjectRetain(v9);
    sub_100106CD0(v10, v11);
    sub_1000FF4F4(32, v12, v13, v14);
    v16 = v15;
    v18 = v17;
    sub_1000FBDAC(v15, v17);
    sub_10000E614(v16, v18);
    v19 = v26;
    v20.super.isa = Data._bridgeToObjectiveC()().super.isa;
    sub_10000E614(v19, *((unint64_t *)&v19 + 1));
    DNSRecords.SRV.valueData.getter();
    if (v22 >> 60 == 15)
    {
      isa = 0;
    }
    else
    {
      v24 = v21;
      v25 = v22;
      isa = Data._bridgeToObjectiveC()().super.isa;
      sub_10000E658(v24, v25);
    }
    objc_msgSend(v9, "handleEventType:keyData:valueData:", 0, v20.super.isa, isa);
    swift_unknownObjectRelease(v9);

  }
  return sub_100031F1C((uint64_t)v6);
}

id sub_10002C16C(uint64_t a1, void *a2)
{
  void *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  id result;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int (*v21)(char *, uint64_t, uint64_t);
  char *v22;
  uint64_t v23;
  id v24;
  _BYTE *v25;
  NSObject *v26;
  os_log_type_t v27;
  int v28;
  _BOOL4 v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  char v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  os_log_t v45;
  uint64_t v46;
  int *v47;
  char *v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t *v55;
  unint64_t v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  __int128 v62;
  NSData v63;
  uint64_t v64;
  unint64_t v65;
  Class isa;
  uint64_t v67;
  uint64_t v68;
  uint64_t (*v69)(char *, uint64_t);
  uint64_t v70;
  unint64_t v71;
  void (*v72)(char *, char *, uint64_t);
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  os_log_t v88;
  int v89;
  uint64_t v90;
  void (*v91)(char *, uint64_t);
  unint64_t v92;
  void (*v93)(char *, char *, uint64_t);
  uint64_t v94;
  uint64_t v95;
  int *v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102[4];
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char v107;
  char v108;

  sub_100012C44(&qword_100404B80);
  __chkstk_darwin();
  v99 = (char *)&v88 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DNSRecords.SRV(0);
  v98 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin();
  v8 = (char *)&v88 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012C44(&qword_100404E70);
  __chkstk_darwin();
  v10 = (char *)&v88 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for NWEndpoint.Port(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin();
  v14 = (char *)&v88 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = (id)__chkstk_darwin();
  v100 = (char *)&v88 - v16;
  if (a2)
  {
    result = objc_msgSend(a2, "hostname");
    if (result)
    {
      v17 = result;
      v95 = a1;
      v96 = (int *)v6;
      v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
      v20 = v19;

      NWEndpoint.Port.init(rawValue:)(objc_msgSend(a2, "servicePort"));
      v21 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
      v97 = v11;
      if (v21(v10, 1, v11) == 1)
      {
        swift_bridgeObjectRelease(v20);
        return (id)sub_100033A84((uint64_t)v10, &qword_100404E70);
      }
      else
      {
        v94 = v18;
        v22 = v100;
        v23 = v97;
        (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v100, v10, v97);
        v93 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
        v93(v14, v22, v23);
        v24 = v2;
        swift_bridgeObjectRetain_n(v20, 2);
        v25 = v24;
        v26 = Logger.logObject.getter(v25);
        v27 = static os_log_type_t.info.getter();
        v28 = v27;
        v29 = os_log_type_enabled(v26, v27);
        v30 = &qword_100404000;
        v92 = v20;
        if (v29)
        {
          v31 = swift_slowAlloc(26, -1);
          v89 = v28;
          v32 = v31;
          v90 = swift_slowAlloc(64, -1);
          v102[0] = v90;
          *(_DWORD *)v32 = 136315650;
          v91 = (void (*)(char *, uint64_t))(v32 + 4);
          v33 = *(_QWORD *)&v25[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_service
                              + 8];
          v34 = *(_QWORD *)&v25[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_service
                              + 16];
          v35 = *(_QWORD *)&v25[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_service
                              + 24];
          v36 = v25[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_service + 32];
          v37 = v25[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_service + 33];
          v103 = *(_QWORD *)&v25[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_service];
          v104 = v33;
          v105 = v34;
          v106 = v35;
          v107 = v36;
          v108 = v37;
          swift_bridgeObjectRetain(v33);
          swift_bridgeObjectRetain(v35);
          v88 = v26;
          v38 = DNSRecords.PTR.description.getter();
          v40 = v39;
          swift_bridgeObjectRelease(v35);
          swift_bridgeObjectRelease(v33);
          v101 = sub_100013CC8(v38, v40, v102);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v101, v102);

          swift_bridgeObjectRelease(v40);
          *(_WORD *)(v32 + 12) = 2080;
          swift_bridgeObjectRetain(v20);
          v41 = v94;
          v101 = sub_100013CC8(v94, v20, v102);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v101, v102);
          v42 = v20;
          v43 = v41;
          v44 = swift_bridgeObjectRelease_n(v42, 3);
          *(_WORD *)(v32 + 22) = 512;
          LOWORD(v38) = NWEndpoint.Port.rawValue.getter(v44);
          v91 = *(void (**)(char *, uint64_t))(v12 + 8);
          v91(v14, v97);
          LOWORD(v101) = v38;
          v30 = &qword_100404000;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v101, (char *)&v101 + 2);
          v45 = v88;
          _os_log_impl((void *)&_mh_execute_header, v88, (os_log_type_t)v89, "Providing SRV record for %s %s:%hu", (uint8_t *)v32, 0x1Au);
          v46 = v90;
          swift_arrayDestroy(v90, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v46, -1, -1);
          swift_slowDealloc(v32, -1, -1);

          v47 = v96;
        }
        else
        {
          v91 = *(void (**)(char *, uint64_t))(v12 + 8);
          v91(v14, v97);
          swift_bridgeObjectRelease_n(v20, 2);

          v47 = v96;
          v43 = v94;
        }
        v48 = &v25[v30[438]];
        v50 = *(_QWORD *)v48;
        v49 = *((_QWORD *)v48 + 1);
        v52 = *((_QWORD *)v48 + 2);
        v51 = *((_QWORD *)v48 + 3);
        v53 = v48[32];
        v54 = v48[33];
        v93(&v8[v47[5]], v100, v97);
        *(_QWORD *)v8 = v50;
        *((_QWORD *)v8 + 1) = v49;
        *((_QWORD *)v8 + 2) = v52;
        *((_QWORD *)v8 + 3) = v51;
        v8[32] = v53;
        v8[33] = v54;
        v55 = (uint64_t *)&v8[v47[6]];
        *v55 = v43;
        v56 = v92;
        v55[1] = v92;
        *(_WORD *)&v8[v47[7]] = 0;
        *(_WORD *)&v8[v47[8]] = 0;
        v93 = (void (*)(char *, char *, uint64_t))v25;
        v57 = *(void **)&v25[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_delegate];
        if (v57)
        {
          *(_OWORD *)v102 = xmmword_10033A100;
          swift_unknownObjectRetain(v57);
          swift_bridgeObjectRetain(v56);
          swift_bridgeObjectRetain(v49);
          swift_bridgeObjectRetain(v51);
          sub_100106CD0(v50, v49);
          sub_1000FF4F4(32, v52, v51, v53);
          v59 = v58;
          v61 = v60;
          sub_1000FBDAC(v58, v60);
          sub_10000E614(v59, v61);
          v62 = *(_OWORD *)v102;
          v63.super.isa = Data._bridgeToObjectiveC()().super.isa;
          sub_10000E614(v62, *((unint64_t *)&v62 + 1));
          DNSRecords.SRV.valueData.getter();
          if (v65 >> 60 == 15)
          {
            isa = 0;
          }
          else
          {
            v70 = v64;
            v71 = v65;
            isa = Data._bridgeToObjectiveC()().super.isa;
            sub_10000E658(v70, v71);
          }
          v69 = (uint64_t (*)(char *, uint64_t))v91;
          objc_msgSend(v57, "handleEventType:keyData:valueData:", 0, v63.super.isa, isa);

          swift_unknownObjectRelease(v57);
          v67 = v98;
          v68 = (uint64_t)v99;
        }
        else
        {
          swift_bridgeObjectRetain(v56);
          swift_bridgeObjectRetain(v49);
          swift_bridgeObjectRetain(v51);
          v67 = v98;
          v68 = (uint64_t)v99;
          v69 = (uint64_t (*)(char *, uint64_t))v91;
        }
        sub_100032558((uint64_t)v8, v68);
        (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v67 + 56))(v68, 0, 1, v96);
        v72 = v93;
        v73 = (uint64_t)v93 + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_srv;
        swift_beginAccess((char *)v93 + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_srv, v102, 33, 0);
        sub_100031F58(v68, v73);
        swift_endAccess(v102);
        WiFiMACAddress.wifiAddress.getter();
        WiFiAddress.ipv6LinkLocalAddress.getter(v74 & 0xFFFFFFFFFFFFLL);
        v75 = (char *)v72 + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_aaaa;
        v76 = *(_QWORD *)((char *)v72
                        + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_aaaa);
        v77 = *(_QWORD *)((char *)v72
                        + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_aaaa
                        + 8);
        v78 = *(_QWORD *)((char *)v72
                        + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_aaaa
                        + 16);
        v79 = *(_QWORD *)((char *)v72
                        + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_aaaa
                        + 24);
        v80 = *(_QWORD *)((char *)v72
                        + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_aaaa
                        + 32);
        v81 = *(_QWORD *)((char *)v72
                        + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_aaaa
                        + 40);
        v82 = *(_QWORD *)((char *)v72
                        + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_aaaa
                        + 48);
        v83 = *(_QWORD *)((char *)v72
                        + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_aaaa
                        + 56);
        *(_QWORD *)v75 = 27;
        *((_QWORD *)v75 + 1) = v94;
        *((_QWORD *)v75 + 2) = v56;
        *((_QWORD *)v75 + 3) = v54;
        *((_QWORD *)v75 + 4) = v84;
        *((_QWORD *)v75 + 5) = v85;
        *((_QWORD *)v75 + 6) = v86;
        *((_QWORD *)v75 + 7) = v87;
        sub_100032C48(v76, v77, v78, v79, v80, v81, v82, v83);
        sub_10002BB50();
        sub_100031F1C((uint64_t)v8);
        return (id)v69(v100, v97);
      }
    }
  }
  return result;
}

id sub_10002C8CC(void *a1)
{
  char *v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  int v20;
  id result;
  char *v22;
  char *v23;
  void *v24;
  char *v25;
  NSObject *v26;
  os_log_type_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  char v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  os_log_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  __int128 v56;
  NSData v57;
  uint64_t v58;
  unint64_t v59;
  Class isa;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  void *v66;
  void *v67;
  id v68;
  uint64_t v69;
  uint64_t v70;
  void (*v71)(char *, uint64_t, uint64_t);
  char *v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  __int128 v76;
  uint64_t v77;
  void (*v78)(uint64_t, char *, uint64_t);
  __int128 v79;
  uint64_t *v80;
  char *v81;
  unint64_t v82;
  id v83;
  char *v84;
  uint64_t v85;
  NSObject *v86;
  os_log_type_t v87;
  _BOOL4 v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  void (*v97)(char *, uint64_t);
  char *v98;
  uint64_t v99;
  void *v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  unint64_t v104;
  char v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  __int128 v110;
  NSData v111;
  uint64_t v112;
  unint64_t v113;
  Class v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  os_log_t v119;
  int v120;
  uint64_t v121;
  char *v122;
  char *v123;
  char *v124;
  int *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  char *v132;
  void *v133;
  uint64_t v134;
  __int128 v135;
  char v136[24];
  __int128 v137;
  __int128 v138;
  __int16 v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char v144;
  char v145;
  __int128 v146;
  __int16 v147;
  __int128 v148;

  v2 = v1;
  v133 = a1;
  sub_100012C44(&qword_100404E70);
  __chkstk_darwin();
  v123 = (char *)&v119 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v130 = type metadata accessor for NWEndpoint.Port(0);
  v127 = *(_QWORD *)(v130 - 8);
  __chkstk_darwin();
  v131 = (char *)&v119 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v132 = (char *)&v119 - v5;
  sub_100012C44(&qword_100404B80);
  __chkstk_darwin();
  v7 = (char *)&v119 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v9 = (char *)&v119 - v8;
  v10 = (int *)type metadata accessor for DNSRecords.SRV(0);
  v11 = *((_QWORD *)v10 - 1);
  __chkstk_darwin();
  v126 = (uint64_t)&v119 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v14 = (char *)&v119 - v13;
  __chkstk_darwin();
  v16 = (char *)&v119 - v15;
  __chkstk_darwin();
  v18 = (char *)&v119 - v17;
  v19 = (uint64_t)&v2[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_srv];
  swift_beginAccess(&v2[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_srv], v136, 0, 0);
  v128 = v19;
  sub_100033B48(v19, (uint64_t)v9, &qword_100404B80);
  v129 = v11;
  v20 = (*(uint64_t (**)(char *, uint64_t, int *))(v11 + 48))(v9, 1, v10);
  v122 = v2;
  if (v20 == 1)
  {
    result = (id)sub_100033A84((uint64_t)v9, &qword_100404B80);
    v22 = v131;
    v23 = v132;
    v24 = v133;
    if (!v133)
      return result;
    goto LABEL_13;
  }
  v125 = v10;
  v124 = v7;
  sub_100033AC0((uint64_t)v9, (uint64_t)v18, type metadata accessor for DNSRecords.SRV);
  sub_100032558((uint64_t)v18, (uint64_t)v16);
  sub_100032558((uint64_t)v18, (uint64_t)v14);
  v25 = v2;
  v26 = Logger.logObject.getter(v25);
  v27 = static os_log_type_t.info.getter();
  v28 = v27;
  if (os_log_type_enabled(v26, v27))
  {
    v29 = swift_slowAlloc(26, -1);
    v120 = v28;
    v30 = v29;
    v121 = swift_slowAlloc(64, -1);
    *(_QWORD *)&v137 = v121;
    *(_DWORD *)v30 = 136315650;
    v31 = *(_QWORD *)&v25[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_service + 8];
    v32 = *(_QWORD *)&v25[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_service + 16];
    v33 = *(_QWORD *)&v25[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_service + 24];
    v34 = v25[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_service + 32];
    v35 = v25[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_service + 33];
    v140 = *(_QWORD *)&v25[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_service];
    v141 = v31;
    v142 = v32;
    v143 = v33;
    v144 = v34;
    v145 = v35;
    swift_bridgeObjectRetain(v31);
    swift_bridgeObjectRetain(v33);
    v119 = v26;
    v36 = DNSRecords.PTR.description.getter();
    v38 = v37;
    swift_bridgeObjectRelease(v33);
    swift_bridgeObjectRelease(v31);
    *(_QWORD *)&v135 = sub_100013CC8(v36, v38, (uint64_t *)&v137);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v135, (char *)&v135 + 8);

    swift_bridgeObjectRelease(v38);
    *(_WORD *)(v30 + 12) = 2080;
    v39 = (uint64_t *)&v16[v125[6]];
    v40 = *v39;
    v41 = v39[1];
    swift_bridgeObjectRetain(v41);
    v42 = v40;
    v23 = v132;
    *(_QWORD *)&v135 = sub_100013CC8(v42, v41, (uint64_t *)&v137);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v135, (char *)&v135 + 8);
    swift_bridgeObjectRelease(v41);
    v43 = sub_100031F1C((uint64_t)v16);
    *(_WORD *)(v30 + 22) = 512;
    LOWORD(v36) = NWEndpoint.Port.rawValue.getter(v43);
    sub_100031F1C((uint64_t)v14);
    LOWORD(v135) = v36;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v135, (char *)&v135 + 2);
    v44 = v119;
    _os_log_impl((void *)&_mh_execute_header, v119, (os_log_type_t)v120, "Removing SRV record for %s %s:%hu", (uint8_t *)v30, 0x1Au);
    v45 = v121;
    swift_arrayDestroy(v121, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v45, -1, -1);
    swift_slowDealloc(v30, -1, -1);

    v22 = v131;
  }
  else
  {
    sub_100031F1C((uint64_t)v14);

    sub_100031F1C((uint64_t)v16);
    v22 = v131;
    v23 = v132;
  }
  v24 = v133;
  v46 = *(void **)&v25[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_delegate];
  if (v46)
  {
    v47 = *(_QWORD *)v18;
    v48 = *((_QWORD *)v18 + 1);
    v49 = *((_QWORD *)v18 + 2);
    v50 = *((_QWORD *)v18 + 3);
    v51 = v18[32];
    v137 = xmmword_10033A100;
    swift_unknownObjectRetain(v46);
    sub_100106CD0(v47, v48);
    sub_1000FF4F4(32, v49, v50, v51);
    v53 = v52;
    v55 = v54;
    sub_1000FBDAC(v52, v54);
    sub_10000E614(v53, v55);
    v56 = v137;
    v57.super.isa = Data._bridgeToObjectiveC()().super.isa;
    sub_10000E614(v56, *((unint64_t *)&v56 + 1));
    DNSRecords.SRV.valueData.getter();
    if (v59 >> 60 == 15)
    {
      isa = 0;
    }
    else
    {
      v61 = v58;
      v62 = v59;
      isa = Data._bridgeToObjectiveC()().super.isa;
      sub_10000E658(v61, v62);
    }
    objc_msgSend(v46, "handleEventType:keyData:valueData:", 1, v57.super.isa, isa);

    swift_unknownObjectRelease(v46);
    v24 = v133;
  }
  v7 = v124;
  v10 = v125;
  (*(void (**)(char *, uint64_t, uint64_t, int *))(v129 + 56))(v124, 1, 1, v125);
  v63 = v128;
  swift_beginAccess(v128, &v137, 33, 0);
  sub_100031F58((uint64_t)v7, v63);
  swift_endAccess(&v137);
  result = (id)sub_100031F1C((uint64_t)v18);
  if (v24)
  {
LABEL_13:
    result = objc_msgSend(v24, "hostname");
    if (result)
    {
      v64 = result;
      v65 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
      v67 = v66;

      v68 = objc_msgSend(v24, "servicePort");
      v69 = (uint64_t)v123;
      NWEndpoint.Port.init(rawValue:)(v68);
      v70 = v127;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v127 + 48))(v69, 1, v130) == 1)
      {
        swift_bridgeObjectRelease(v67);
        return (id)sub_100033A84(v69, &qword_100404E70);
      }
      else
      {
        v71 = *(void (**)(char *, uint64_t, uint64_t))(v70 + 32);
        v133 = v67;
        v72 = v22;
        v73 = v65;
        v74 = v130;
        v71(v23, v69, v130);
        v75 = v122;
        v139 = *(_WORD *)&v122[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_service
                             + 32];
        v76 = *(_OWORD *)&v122[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_service
                             + 16];
        v137 = *(_OWORD *)&v122[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_service];
        v138 = v76;
        v148 = v137;
        v146 = v76;
        v147 = v139;
        v77 = v126;
        v78 = *(void (**)(uint64_t, char *, uint64_t))(v70 + 16);
        v78(v126 + v10[5], v23, v74);
        *(_WORD *)(v77 + 32) = v139;
        v79 = v138;
        *(_OWORD *)v77 = v137;
        *(_OWORD *)(v77 + 16) = v79;
        v80 = (uint64_t *)(v77 + v10[6]);
        v125 = (int *)v73;
        *v80 = v73;
        v81 = v72;
        v82 = (unint64_t)v133;
        v80[1] = (uint64_t)v133;
        *(_WORD *)(v77 + v10[7]) = 0;
        *(_WORD *)(v77 + v10[8]) = 0;
        v78((uint64_t)v81, v23, v74);
        v83 = v75;
        swift_bridgeObjectRetain_n(v82, 2);
        v84 = (char *)v83;
        sub_100031ECC((uint64_t)&v148);
        v85 = sub_100031ECC((uint64_t)&v146);
        v86 = Logger.logObject.getter(v85);
        v87 = static os_log_type_t.info.getter();
        v88 = os_log_type_enabled(v86, v87);
        v124 = v7;
        if (v88)
        {
          v89 = swift_slowAlloc(26, -1);
          v123 = (char *)swift_slowAlloc(64, -1);
          *(_QWORD *)&v135 = v123;
          *(_DWORD *)v89 = 136315650;
          sub_100031ECC((uint64_t)&v148);
          sub_100031ECC((uint64_t)&v146);
          v90 = DNSRecords.PTR.description.getter();
          v92 = v91;
          sub_100031EF4((uint64_t)&v148);
          sub_100031EF4((uint64_t)&v146);
          v134 = sub_100013CC8(v90, v92, (uint64_t *)&v135);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v134, &v135);

          v93 = v92;
          v94 = v130;
          swift_bridgeObjectRelease(v93);
          *(_WORD *)(v89 + 12) = 2080;
          swift_bridgeObjectRetain(v82);
          v134 = sub_100013CC8((uint64_t)v125, v82, (uint64_t *)&v135);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v134, &v135);
          v95 = swift_bridgeObjectRelease_n(v82, 3);
          *(_WORD *)(v89 + 22) = 512;
          v96 = v131;
          LOWORD(v90) = NWEndpoint.Port.rawValue.getter(v95);
          v97 = *(void (**)(char *, uint64_t))(v127 + 8);
          v97(v96, v94);
          LOWORD(v134) = v90;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v134, (char *)&v134 + 2);
          _os_log_impl((void *)&_mh_execute_header, v86, v87, "Providing SRV record for %s %s:%hu", (uint8_t *)v89, 0x1Au);
          v98 = v123;
          swift_arrayDestroy(v123, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v98, -1, -1);
          v99 = v89;
          v7 = v124;
          swift_slowDealloc(v99, -1, -1);
        }
        else
        {
          v97 = *(void (**)(char *, uint64_t))(v127 + 8);
          v97(v81, v130);
          swift_bridgeObjectRelease_n(v82, 2);

        }
        v100 = *(void **)&v84[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_delegate];
        if (v100)
        {
          v125 = v10;
          v101 = *(_QWORD *)v126;
          v102 = *(_QWORD *)(v126 + 8);
          v103 = *(_QWORD *)(v126 + 16);
          v104 = *(_QWORD *)(v126 + 24);
          v105 = *(_BYTE *)(v126 + 32);
          v135 = xmmword_10033A100;
          swift_unknownObjectRetain(v100);
          sub_100106CD0(v101, v102);
          sub_1000FF4F4(32, v103, v104, v105);
          v107 = v106;
          v109 = v108;
          sub_1000FBDAC(v106, v108);
          sub_10000E614(v107, v109);
          v110 = v135;
          v111.super.isa = Data._bridgeToObjectiveC()().super.isa;
          sub_10000E614(v110, *((unint64_t *)&v110 + 1));
          DNSRecords.SRV.valueData.getter();
          if (v113 >> 60 == 15)
          {
            v114 = 0;
          }
          else
          {
            v115 = v112;
            v116 = v113;
            v114 = Data._bridgeToObjectiveC()().super.isa;
            sub_10000E658(v115, v116);
          }
          objc_msgSend(v100, "handleEventType:keyData:valueData:", 0, v111.super.isa, v114);

          swift_unknownObjectRelease(v100);
          v7 = v124;
          v10 = v125;
        }
        v117 = v126;
        sub_100032558(v126, (uint64_t)v7);
        (*(void (**)(char *, _QWORD, uint64_t, int *))(v129 + 56))(v7, 0, 1, v10);
        v118 = v128;
        swift_beginAccess(v128, &v135, 33, 0);
        sub_100031F58((uint64_t)v7, v118);
        swift_endAccess(&v135);
        sub_100031F1C(v117);
        return (id)((uint64_t (*)(char *, uint64_t))v97)(v132, v130);
      }
    }
  }
  return result;
}

id sub_10002D5A4()
{
  return sub_10002BA80(type metadata accessor for BonjourResolver);
}

uint64_t sub_10002D66C@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = a1();
  *a2 = result;
  return result;
}

void sub_10002D694(uint64_t *a1, _QWORD **a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v6;
  void *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  v6 = a4();
  v7 = (void *)v6;
  v8 = *a1 + 8;
  if (v6)
    v10 = v6;
  else
    v10 = 0;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v10, &v11);
  *a1 = v8;
  v9 = *a2;
  if (*a2)
  {
    *v9 = v7;
    *a2 = v9 + 1;
  }
  else
  {

  }
}

unint64_t sub_10002D744(char a1)
{
  Swift::Int v2;
  _QWORD v4[9];

  Hasher.init(_seed:)(v4);
  Hasher._combine(_:)(0xDD06050403020100 >> (8 * a1));
  v2 = Hasher._finalize()();
  return sub_10002E080(a1, v2);
}

unint64_t sub_10002D7B4(unint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  Swift::Int v7;
  _QWORD v9[9];

  v2 = a1 >> 8;
  v3 = a1 >> 16;
  v4 = a1 >> 24;
  v5 = HIDWORD(a1);
  v6 = a1 >> 40;
  Hasher.init(_seed:)(v9);
  Hasher._combine(_:)(a1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(BYTE6(a1));
  v7 = Hasher._finalize()();
  return sub_10002E154(a1 & 0xFFFFFFFFFFFFFFLL, v7);
}

unint64_t sub_10002D884(unint64_t a1)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  Swift::Int v6;
  _QWORD v8[9];

  v2 = a1 >> 8;
  v3 = a1 >> 16;
  v4 = a1 >> 24;
  v5 = HIDWORD(a1);
  Hasher.init(_seed:)(v8);
  Hasher._combine(_:)(a1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(BYTE5(a1));
  v6 = Hasher._finalize()();
  return sub_10002E268(a1 & 0xFFFFFFFFFFFFLL, v6);
}

unint64_t sub_10002D93C(uint64_t a1)
{
  Swift::String v2;
  uint64_t v3;
  Swift::String v4;
  uint64_t v5;
  Swift::Int v6;
  _QWORD v8[9];
  __int128 v9;
  Swift::UInt8 v10[16];

  Hasher.init(_seed:)(v8);
  v2 = String.lowercased()();
  String.hash(into:)(v8, v2._countAndFlagsBits, v2._object);
  swift_bridgeObjectRelease(v2._object);
  v9 = *(_OWORD *)(a1 + 16);
  *(_WORD *)v10 = *(_WORD *)(a1 + 32);
  v3 = *((_QWORD *)&v9 + 1);
  v4 = String.lowercased()();
  swift_bridgeObjectRetain(v3);
  String.hash(into:)(v8, v4._countAndFlagsBits, v4._object);
  swift_bridgeObjectRelease(v4._object);
  if (v10[0])
    v5 = 7365749;
  else
    v5 = 7365492;
  String.hash(into:)(v8, v5, 0xE300000000000000);
  swift_bridgeObjectRelease(0xE300000000000000);
  Hasher._combine(_:)(v10[1]);
  sub_100031EF4((uint64_t)&v9);
  v6 = Hasher._finalize()();
  return sub_10002E368((__int128 *)a1, v6);
}

unint64_t sub_10002DA48(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = v1;
  v4 = *(_QWORD *)(v2 + 40);
  v5 = type metadata accessor for CodingUserInfoKey(0);
  v6 = dispatch thunk of Hashable._rawHashValue(seed:)(v4, v5, &protocol witness table for CodingUserInfoKey);
  return sub_10002E564(a1, v6);
}

void sub_10002DA98(char a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2);
  __asm { BR              X10 }
}

uint64_t sub_10002DAFC()
{
  uint64_t v0;
  Swift::Int v1;
  uint64_t v3;

  String.hash(into:)(&v3, 1818523489, 0xE400000000000000);
  swift_bridgeObjectRelease(0xE400000000000000);
  v1 = Hasher._finalize()();
  return sub_10002E68C(v0, v1);
}

unint64_t sub_10002DB98(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Swift::Int v5;
  _QWORD v7[9];

  Hasher.init(_seed:)(v7);
  type metadata accessor for CFString(0);
  v3 = v2;
  v4 = sub_100011DE4(&qword_100404EB8, (uint64_t (*)(uint64_t))type metadata accessor for CFString, (uint64_t)&unk_100338B9C);
  _CFObject.hash(into:)(v7, v3, v4);
  v5 = Hasher._finalize()();
  return sub_10002E8C4(a1, v5);
}

unint64_t sub_10002DC20(uint64_t a1, uint64_t a2)
{
  Swift::String v4;
  Swift::Int v5;
  _QWORD v7[9];

  Hasher.init(_seed:)(v7);
  v4 = String.lowercased()();
  String.hash(into:)(v7, v4._countAndFlagsBits, v4._object);
  swift_bridgeObjectRelease(v4._object);
  v5 = Hasher._finalize()();
  return sub_10002EA04(a1, a2, v5);
}

unint64_t sub_10002DCA0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = v1;
  v4 = *(_QWORD *)(v2 + 40);
  v5 = type metadata accessor for UUID(0);
  v6 = sub_100011DE4(&qword_10040F670, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v7 = dispatch thunk of Hashable._rawHashValue(seed:)(v4, v5, v6);
  return sub_10002EB94(a1, v7);
}

unint64_t sub_10002DD0C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = static Hasher._hash(seed:_:)(*(_QWORD *)(v1 + 40), a1);
  return sub_100012218(a1, v3);
}

unint64_t sub_10002DD3C(char a1)
{
  char v2;
  uint64_t v3;
  unint64_t v4;
  Swift::Int v5;
  _QWORD v7[9];

  Hasher.init(_seed:)(v7);
  v2 = a1 & 1;
  if ((a1 & 1) != 0)
    v3 = 0x64657463656A6572;
  else
    v3 = 0x6553657669746361;
  if ((a1 & 1) != 0)
    v4 = 0xEF65636976726553;
  else
    v4 = 0xED00006563697672;
  String.hash(into:)(v7, v3, v4);
  swift_bridgeObjectRelease(v4);
  v5 = Hasher._finalize()();
  return sub_10002ECD4(v2, v5);
}

uint64_t sub_10002DDE8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  sub_1001A9E1C(*(_QWORD *)(v1 + 40), a1);
  return sub_10002EE30(a1, v3);
}

unint64_t sub_10002DE18(unsigned __int8 a1)
{
  uint64_t v2;
  unint64_t v3;
  Swift::Int v4;
  _QWORD v6[9];

  Hasher.init(_seed:)(v6);
  if (a1)
  {
    if (a1 == 1)
      v2 = 0x616974696E497369;
    else
      v2 = 0x6E6F697461727564;
    if (a1 == 1)
      v3 = 0xEB00000000726F74;
    else
      v3 = 0xE800000000000000;
  }
  else
  {
    v3 = 0xE700000000000000;
    v2 = 0x65636976726573;
  }
  String.hash(into:)(v6, v2, v3);
  swift_bridgeObjectRelease(v3);
  v4 = Hasher._finalize()();
  return sub_10002F0B0(a1, v4);
}

unint64_t sub_10002DED4(char a1)
{
  char v2;
  uint64_t v3;
  unint64_t v4;
  Swift::Int v5;
  _QWORD v7[9];

  Hasher.init(_seed:)(v7);
  v2 = a1 & 1;
  if ((a1 & 1) != 0)
    v3 = 0x6E6F73616572;
  else
    v3 = 0x65636976726573;
  if ((a1 & 1) != 0)
    v4 = 0xE600000000000000;
  else
    v4 = 0xE700000000000000;
  String.hash(into:)(v7, v3, v4);
  swift_bridgeObjectRelease(v4);
  v5 = Hasher._finalize()();
  return sub_10002F260(v2, v5);
}

uint64_t sub_10002DF64(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Swift::Int v5;
  _QWORD v7[9];

  Hasher.init(_seed:)(v7);
  v2 = sub_100158B88(a1);
  v4 = v3;
  String.hash(into:)(v7, v2, v3);
  swift_bridgeObjectRelease(v4);
  v5 = Hasher._finalize()();
  return sub_10002F39C(a1, v5);
}

unint64_t sub_10002DFD8(uint64_t a1)
{
  return sub_10002DFE4(a1, (uint64_t (*)(uint64_t))sub_100194468);
}

unint64_t sub_10002DFE4(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::Int v7;
  _QWORD v9[9];

  Hasher.init(_seed:)(v9);
  v4 = a2(a1);
  v6 = v5;
  String.hash(into:)(v9, v4, v5);
  swift_bridgeObjectRelease(v6);
  v7 = Hasher._finalize()();
  return sub_10002FAD4(a1, v7, a2);
}

uint64_t sub_10002E06C(uint64_t a1, uint64_t a2)
{
  return sub_10000F988(a1, a2, (void (*)(_QWORD *, uint64_t, uint64_t))&Character.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_10000FA14);
}

unint64_t sub_10002E080(char a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  int v7;
  uint64_t v8;
  uint64_t v9;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = (0xDD06050403020100 >> (8 * a1));
    v8 = *(_QWORD *)(v2 + 48);
    if ((0xDD06050403020100 >> (8 * *(_BYTE *)(v8 + result))) != v7)
    {
      v9 = ~v5;
      for (result = (result + 1) & v9;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v9)
      {
        if ((0xDD06050403020100 >> (8 * *(_BYTE *)(v8 + result))) == v7)
          break;
      }
    }
  }
  return result;
}

unint64_t sub_10002E154(unint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t result;
  int v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v17;
  unsigned __int16 v18;

  v4 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v6 = a1;
    v7 = ~v4;
    v8 = HIWORD(a1);
    v9 = a1 >> 40;
    v10 = *(_QWORD *)(v2 + 48);
    v11 = HIDWORD(a1);
    v12 = a1 >> 24;
    v13 = a1 >> 16;
    v14 = a1 >> 8;
    do
    {
      if (*(unsigned __int8 *)(v10 - result + 8 * result) == v6)
      {
        v15 = v10 - result + 8 * result;
        LOBYTE(v17) = v14;
        BYTE1(v17) = v13;
        BYTE2(v17) = v12;
        HIBYTE(v17) = v11;
        LOBYTE(v18) = v9;
        HIBYTE(v18) = v8;
        if (*(_DWORD *)(v15 + 1) == v17 && *(unsigned __int16 *)(v15 + 5) == v18)
          break;
      }
      result = (result + 1) & v7;
    }
    while (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0);
  }
  return result;
}

unint64_t sub_10002E268(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  int v7;
  unsigned __int16 v8;

  v4 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v6 = ~v4;
    do
    {
      LOWORD(v7) = a1;
      BYTE2(v7) = BYTE2(a1);
      HIBYTE(v7) = BYTE3(a1);
      LOBYTE(v8) = BYTE4(a1);
      HIBYTE(v8) = BYTE5(a1);
      if (!(*(_DWORD *)(*(_QWORD *)(v2 + 48) + 6 * result) ^ v7 | *(unsigned __int16 *)(*(_QWORD *)(v2 + 48)
                                                                                       + 6 * result
                                                                                       + 4) ^ v8))
        break;
      result = (result + 1) & v6;
    }
    while (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0);
  }
  return result;
}

unint64_t sub_10002E368(__int128 *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  __int128 *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  __int128 *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  int v19;
  __int128 *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v5 = a1;
    v21 = ~v3;
    v20 = a1 + 1;
    v19 = *((unsigned __int8 *)a1 + 33);
    v6 = sub_10001C920();
    do
    {
      v7 = *(_QWORD *)(v23 + 48) + 40 * v4;
      v8 = *(_QWORD *)(v7 + 8);
      v9 = *(_QWORD *)(v7 + 16);
      v10 = *(_QWORD *)(v7 + 24);
      v11 = *(unsigned __int8 *)(v7 + 32);
      v12 = *(unsigned __int8 *)(v7 + 33);
      v25 = *(_QWORD *)v7;
      v26 = v8;
      v13 = v5;
      v24 = *v5;
      swift_bridgeObjectRetain(v8);
      swift_bridgeObjectRetain(v10);
      if (StringProtocol.caseInsensitiveCompare<A>(_:)(&v24, &type metadata for String, &type metadata for String, v6, v6)|| (v24 = *v20, v14 = *((_BYTE *)v5 + 32), v25 = v9, v26 = v10, StringProtocol.caseInsensitiveCompare<A>(_:)(&v24, &type metadata for String, &type metadata for String, v6, v6)))
      {
        swift_bridgeObjectRelease(v10);
        swift_bridgeObjectRelease(v8);
      }
      else
      {
        if (v11)
          v15 = 7365749;
        else
          v15 = 7365492;
        if ((v14 & 1) != 0)
          v16 = 7365749;
        else
          v16 = 7365492;
        if (v15 == v16)
        {
          swift_bridgeObjectRelease(v10);
          swift_bridgeObjectRelease(v8);
          swift_bridgeObjectRelease_n(0xE300000000000000, 2);
        }
        else
        {
          v17 = _stringCompareWithSmolCheck(_:_:expecting:)(v15, 0xE300000000000000, v16, 0xE300000000000000, 0);
          swift_bridgeObjectRelease(v10);
          swift_bridgeObjectRelease(v8);
          swift_bridgeObjectRelease_n(0xE300000000000000, 2);
          if ((v17 & 1) == 0)
            goto LABEL_4;
        }
        if (v12 == v19)
          return v4;
      }
LABEL_4:
      v4 = (v4 + 1) & v21;
      v5 = v13;
    }
    while (((*(_QWORD *)(v22 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

unint64_t sub_10002E564(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, unint64_t, uint64_t);
  char v14;
  uint64_t v16;
  uint64_t v17;

  v3 = v2;
  v17 = a1;
  v5 = type metadata accessor for CodingUserInfoKey(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = -1 << *(_BYTE *)(v3 + 32);
  v10 = a2 & ~v9;
  if (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = ~v9;
    v12 = *(_QWORD *)(v6 + 72);
    v13 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    do
    {
      v13(v8, *(_QWORD *)(v3 + 48) + v12 * v10, v5);
      v14 = dispatch thunk of static Equatable.== infix(_:_:)(v8, v17, v5, &protocol witness table for CodingUserInfoKey);
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      if ((v14 & 1) != 0)
        break;
      v10 = (v10 + 1) & v11;
    }
    while (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
  }
  return v10;
}

uint64_t sub_10002E68C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;

  v3 = a2 & ~(-1 << *(_BYTE *)(v2 + 32));
  if (((*(_QWORD *)(v2 + 64 + ((v3 >> 3) & 0xFFFFFFFFFFFFF8)) >> v3) & 1) != 0)
    __asm { BR              X9 }
  return a2 & ~(-1 << *(_BYTE *)(v2 + 32));
}

unint64_t sub_10002E8C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t i;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  id v12;
  char v13;
  uint64_t v14;
  id v15;
  char v16;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  i = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
  {
    v6 = v2;
    type metadata accessor for CFString(0);
    v9 = v8;
    v10 = *(void **)(*(_QWORD *)(v6 + 48) + 8 * i);
    v11 = sub_100011DE4(&qword_100404EB8, (uint64_t (*)(uint64_t))type metadata accessor for CFString, (uint64_t)&unk_100338B9C);
    v12 = v10;
    v13 = static _CFObject.== infix(_:_:)(v12, a1, v9, v11);

    if ((v13 & 1) == 0)
    {
      v14 = ~v4;
      for (i = (i + 1) & v14; ((*(_QWORD *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v14)
      {
        v15 = *(id *)(*(_QWORD *)(v6 + 48) + 8 * i);
        v16 = static _CFObject.== infix(_:_:)(v15, a1, v9, v11);

        if ((v16 & 1) != 0)
          break;
      }
    }
  }
  return i;
}

unint64_t sub_10002EA04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  Swift::String v7;
  void *object;
  Swift::String v9;
  char v11;
  uint64_t v12;
  Swift::String v13;
  Swift::String v14;
  char v16;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v7 = String.lowercased()();
    object = v7._object;
    v9 = String.lowercased()();
    if (v7._countAndFlagsBits == v9._countAndFlagsBits && v7._object == v9._object)
    {
LABEL_16:
      swift_bridgeObjectRelease_n(object, 2);
      return v6;
    }
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)(v7._countAndFlagsBits, v7._object, v9._countAndFlagsBits, v9._object, 0);
    swift_bridgeObjectRelease(v7._object);
    swift_bridgeObjectRelease(v9._object);
    if ((v11 & 1) == 0)
    {
      v12 = ~v5;
      v6 = (v6 + 1) & v12;
      if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
      {
        while (1)
        {
          v13 = String.lowercased()();
          object = v13._object;
          v14 = String.lowercased()();
          if (v13._countAndFlagsBits == v14._countAndFlagsBits && v13._object == v14._object)
            break;
          v16 = _stringCompareWithSmolCheck(_:_:expecting:)(v13._countAndFlagsBits, v13._object, v14._countAndFlagsBits, v14._object, 0);
          swift_bridgeObjectRelease(v13._object);
          swift_bridgeObjectRelease(v14._object);
          if ((v16 & 1) == 0)
          {
            v6 = (v6 + 1) & v12;
            if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
              continue;
          }
          return v6;
        }
        goto LABEL_16;
      }
    }
  }
  return v6;
}

unint64_t sub_10002EB94(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, unint64_t, uint64_t);
  uint64_t v14;
  char v15;
  uint64_t v17;
  uint64_t v18;

  v3 = v2;
  v18 = a1;
  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin();
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = -1 << *(_BYTE *)(v3 + 32);
  v10 = a2 & ~v9;
  if (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
  {
    v11 = ~v9;
    v12 = *(_QWORD *)(v6 + 72);
    v13 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    do
    {
      v13(v8, *(_QWORD *)(v3 + 48) + v12 * v10, v5);
      v14 = sub_100011DE4(&qword_100404EB0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v15 = dispatch thunk of static Equatable.== infix(_:_:)(v8, v18, v5, v14);
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      if ((v15 & 1) != 0)
        break;
      v10 = (v10 + 1) & v11;
    }
    while (((*(_QWORD *)(v3 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
  }
  return v10;
}

unint64_t sub_10002ECD4(char a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v11;

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v5 = ~v3;
    if ((a1 & 1) != 0)
      v6 = 0x64657463656A6572;
    else
      v6 = 0x6553657669746361;
    if ((a1 & 1) != 0)
      v7 = 0xEF65636976726553;
    else
      v7 = 0xED00006563697672;
    while (1)
    {
      v8 = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v4) ? 0x64657463656A6572 : 0x6553657669746361;
      v9 = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v4) ? 0xEF65636976726553 : 0xED00006563697672;
      if (v8 == v6 && v9 == v7)
        break;
      v11 = _stringCompareWithSmolCheck(_:_:expecting:)(v8, v9, v6, v7, 0);
      swift_bridgeObjectRelease(v9);
      swift_bridgeObjectRelease(v7);
      if ((v11 & 1) == 0)
      {
        v4 = (v4 + 1) & v5;
        if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
          continue;
      }
      return v4;
    }
    swift_bridgeObjectRelease_n(v7, 2);
  }
  return v4;
}

uint64_t sub_10002EE30(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;

  v3 = a2 & ~(-1 << *(_BYTE *)(v2 + 32));
  if (((*(_QWORD *)(v2 + 64 + ((v3 >> 3) & 0xFFFFFFFFFFFFF8)) >> v3) & 1) != 0)
    __asm { BR              X9 }
  return a2 & ~(-1 << *(_BYTE *)(v2 + 32));
}

unint64_t sub_10002F0B0(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  unint64_t v11;
  char v12;

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v6 = ~v3;
    while (1)
    {
      if (*(_BYTE *)(*(_QWORD *)(v2 + 48) + v4))
      {
        if (*(_BYTE *)(*(_QWORD *)(v2 + 48) + v4) == 1)
        {
          v7 = 0x616974696E497369;
          v8 = 0xEB00000000726F74;
          v9 = a1;
          if (!a1)
            goto LABEL_17;
        }
        else
        {
          v8 = 0xE800000000000000;
          v7 = 0x6E6F697461727564;
          v9 = a1;
          if (!a1)
          {
LABEL_17:
            v11 = 0xE700000000000000;
            v10 = 0x65636976726573;
            if (v7 != 0x65636976726573)
              goto LABEL_19;
            goto LABEL_18;
          }
        }
      }
      else
      {
        v8 = 0xE700000000000000;
        v7 = 0x65636976726573;
        v9 = a1;
        if (!a1)
          goto LABEL_17;
      }
      if (v9 == 1)
        v10 = 0x616974696E497369;
      else
        v10 = 0x6E6F697461727564;
      if (v9 == 1)
        v11 = 0xEB00000000726F74;
      else
        v11 = 0xE800000000000000;
      if (v7 != v10)
        goto LABEL_19;
LABEL_18:
      if (v8 == v11)
      {
        swift_bridgeObjectRelease_n(v8, 2);
        return v4;
      }
LABEL_19:
      v12 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v8, v10, v11, 0);
      swift_bridgeObjectRelease(v8);
      swift_bridgeObjectRelease(v11);
      if ((v12 & 1) == 0)
      {
        v4 = (v4 + 1) & v6;
        if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
          continue;
      }
      return v4;
    }
  }
  return v4;
}

unint64_t sub_10002F260(char a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v11;

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v5 = ~v3;
    if ((a1 & 1) != 0)
      v6 = 0x6E6F73616572;
    else
      v6 = 0x65636976726573;
    if ((a1 & 1) != 0)
      v7 = 0xE600000000000000;
    else
      v7 = 0xE700000000000000;
    while (1)
    {
      v8 = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v4) ? 0x6E6F73616572 : 0x65636976726573;
      v9 = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v4) ? 0xE600000000000000 : 0xE700000000000000;
      if (v8 == v6 && v9 == v7)
        break;
      v11 = _stringCompareWithSmolCheck(_:_:expecting:)(v8, v9, v6, v7, 0);
      swift_bridgeObjectRelease(v9);
      swift_bridgeObjectRelease(v7);
      if ((v11 & 1) == 0)
      {
        v4 = (v4 + 1) & v5;
        if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
          continue;
      }
      return v4;
    }
    swift_bridgeObjectRelease_n(v7, 2);
  }
  return v4;
}

uint64_t sub_10002F39C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;

  v3 = a2 & ~(-1 << *(_BYTE *)(v2 + 32));
  if (((*(_QWORD *)(v2 + 64 + ((v3 >> 3) & 0xFFFFFFFFFFFFF8)) >> v3) & 1) != 0)
    __asm { BR              X9 }
  return a2 & ~(-1 << *(_BYTE *)(v2 + 32));
}

unint64_t sub_10002FAD4(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  char v24;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a2 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = a3(*(unsigned __int8 *)(*(_QWORD *)(v3 + 48) + v6));
    v11 = v10;
    v12 = a3(a1);
    if (v9 == v12 && v11 == v13)
    {
LABEL_16:
      swift_bridgeObjectRelease_n(v11, 2);
      return v6;
    }
    v15 = v13;
    v16 = _stringCompareWithSmolCheck(_:_:expecting:)(v9, v11, v12, v13, 0);
    swift_bridgeObjectRelease(v11);
    swift_bridgeObjectRelease(v15);
    if ((v16 & 1) == 0)
    {
      v17 = ~v5;
      v6 = (v6 + 1) & v17;
      if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
      {
        while (1)
        {
          v18 = a3(*(unsigned __int8 *)(*(_QWORD *)(v3 + 48) + v6));
          v11 = v19;
          v20 = a3(a1);
          if (v18 == v20 && v11 == v21)
            break;
          v23 = v21;
          v24 = _stringCompareWithSmolCheck(_:_:expecting:)(v18, v11, v20, v21, 0);
          swift_bridgeObjectRelease(v11);
          swift_bridgeObjectRelease(v23);
          if ((v24 & 1) == 0)
          {
            v6 = (v6 + 1) & v17;
            if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
              continue;
          }
          return v6;
        }
        goto LABEL_16;
      }
    }
  }
  return v6;
}

double sub_10002FC54@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  unint64_t v9;
  char v10;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  uint64_t v13;
  double result;
  uint64_t v15;

  v4 = v3;
  v8 = *v4;
  swift_bridgeObjectRetain(*v4);
  v9 = sub_10000F988(a1, a2, (void (*)(_QWORD *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_10000FA14);
  LOBYTE(a2) = v10;
  swift_bridgeObjectRelease(v8);
  if ((a2 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
    v12 = *v4;
    v15 = *v4;
    *v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_100146A48();
      v12 = v15;
    }
    swift_bridgeObjectRelease(*(_QWORD *)(*(_QWORD *)(v12 + 48) + 16 * v9 + 8));
    sub_100033A2C((_OWORD *)(*(_QWORD *)(v12 + 56) + 32 * v9), a3);
    sub_100144D14(v9, v12);
    v13 = *v4;
    *v4 = v12;
    *(_QWORD *)&result = swift_bridgeObjectRelease(v13).n128_u64[0];
  }
  else
  {
    result = 0.0;
    *a3 = 0u;
    a3[1] = 0u;
  }
  return result;
}

uint64_t sub_10002FD54(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  unint64_t v5;
  char v6;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v2 = v1;
  v4 = *v2;
  swift_bridgeObjectRetain(*v2);
  v5 = sub_10002D93C(a1);
  LOBYTE(a1) = v6;
  swift_bridgeObjectRelease(v4);
  if ((a1 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  v8 = *v2;
  v14 = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_100146C2C();
    v8 = v14;
  }
  v9 = *(_QWORD *)(v8 + 48) + 40 * v5;
  v10 = *(_QWORD *)(v9 + 8);
  swift_bridgeObjectRelease(*(_QWORD *)(v9 + 24));
  swift_bridgeObjectRelease(v10);
  v11 = *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v5);
  sub_100144EE8(v5, v8);
  v12 = *v2;
  *v2 = v8;
  swift_bridgeObjectRelease(v12);
  return v11;
}

double sub_10002FE28@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  unint64_t v7;
  char v8;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double result;
  uint64_t v15;

  v3 = v2;
  v6 = *v3;
  swift_bridgeObjectRetain(*v3);
  v7 = sub_10002DA48(a1);
  LOBYTE(a1) = v8;
  swift_bridgeObjectRelease(v6);
  if ((a1 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v10 = *v3;
    v15 = *v3;
    *v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_10014721C();
      v10 = v15;
    }
    v11 = *(_QWORD *)(v10 + 48);
    v12 = type metadata accessor for CodingUserInfoKey(0);
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11 + *(_QWORD *)(*(_QWORD *)(v12 - 8) + 72) * v7, v12);
    sub_100033A2C((_OWORD *)(*(_QWORD *)(v10 + 56) + 32 * v7), a2);
    sub_1001454A0(v7, v10);
    v13 = *v3;
    *v3 = v10;
    *(_QWORD *)&result = swift_bridgeObjectRelease(v13).n128_u64[0];
  }
  else
  {
    result = 0.0;
    *a2 = 0u;
    a2[1] = 0u;
  }
  return result;
}

uint64_t sub_10002FF24(char a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char v7;
  char v8;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v2 = v1;
  v4 = *v2;
  swift_bridgeObjectRetain(*v2);
  sub_10002DA98(a1);
  v6 = v5;
  v8 = v7;
  swift_bridgeObjectRelease(v4);
  if ((v8 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  v10 = *v2;
  v14 = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_100147458();
    v10 = v14;
  }
  v11 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 24 * v6);
  sub_100145724(v6, v10);
  v12 = *v2;
  *v2 = v10;
  swift_bridgeObjectRelease(v12);
  return v11;
}

uint64_t sub_10002FFFC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  unint64_t v7;
  char v8;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;

  v3 = v2;
  v6 = *v3;
  swift_bridgeObjectRetain(*v3);
  v7 = sub_10002DCA0(a1);
  LOBYTE(a1) = v8;
  swift_bridgeObjectRelease(v6);
  if ((a1 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    v10 = *v3;
    v21 = *v3;
    *v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_100147BD4();
      v10 = v21;
    }
    v11 = *(_QWORD *)(v10 + 48);
    v12 = type metadata accessor for UUID(0);
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11 + *(_QWORD *)(*(_QWORD *)(v12 - 8) + 72) * v7, v12);
    v13 = *(_QWORD *)(v10 + 56);
    v14 = type metadata accessor for LongTermPairingKeys.PublicIdentity(0);
    v15 = *(_QWORD *)(v14 - 8);
    sub_100033AC0(v13 + *(_QWORD *)(v15 + 72) * v7, a2, type metadata accessor for LongTermPairingKeys.PublicIdentity);
    sub_100145B7C(v7, v10);
    v16 = *v3;
    *v3 = v10;
    v17 = swift_bridgeObjectRelease(v16);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t, __n128))(v15 + 56))(a2, 0, 1, v14, v17);
  }
  else
  {
    v19 = type metadata accessor for LongTermPairingKeys.PublicIdentity(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v19 - 8) + 56))(a2, 1, 1, v19, v20);
  }
}

uint64_t sub_100030138(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  unint64_t v3;
  char v4;
  unint64_t v5;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v2 = v1;
  v3 = sub_10002DD0C(a1);
  if ((v4 & 1) == 0)
    return 0;
  v5 = v3;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v1);
  v7 = *v1;
  v11 = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_100147E9C();
    v7 = v11;
  }
  v8 = *(_QWORD *)(*(_QWORD *)(v7 + 56) + 16 * v5);
  sub_100145E50(v5, v7);
  v9 = *v2;
  *v2 = v7;
  swift_bridgeObjectRelease(v9);
  return v8;
}

uint64_t sub_1000301E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  unint64_t v9;
  char v10;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;

  v4 = v3;
  v8 = *v4;
  swift_bridgeObjectRetain(*v4);
  v9 = sub_10002DC20(a1, a2);
  LOBYTE(a2) = v10;
  swift_bridgeObjectRelease(v8);
  if ((a2 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
    v12 = *v4;
    v21 = *v4;
    *v4 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      sub_100147988();
      v12 = v21;
    }
    swift_bridgeObjectRelease(*(_QWORD *)(*(_QWORD *)(v12 + 48) + 16 * v9 + 8));
    v13 = *(_QWORD *)(v12 + 56);
    v14 = sub_100012C44((uint64_t *)&unk_100404EA0);
    v15 = *(_QWORD *)(v14 - 8);
    sub_100033A3C(v13 + *(_QWORD *)(v15 + 72) * v9, a3);
    sub_1001461D8(v9, v12);
    v16 = *v4;
    *v4 = v12;
    v17 = swift_bridgeObjectRelease(v16);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t, __n128))(v15 + 56))(a3, 0, 1, v14, v17);
  }
  else
  {
    v19 = sub_100012C44((uint64_t *)&unk_100404EA0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v19 - 8) + 56))(a3, 1, 1, v19, v20);
  }
}

_OWORD *sub_100030310(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  _OWORD *result;
  uint64_t v21;
  char v22;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = sub_10000F988(a2, a3, (void (*)(_QWORD *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_10000FA14);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = (_QWORD *)(v18[7] + 32 * v12);
        sub_100014430(v19);
        return sub_100033A2C(a1, v19);
      }
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_100146A48();
      goto LABEL_7;
    }
    sub_1001410B4(v15, a4 & 1);
    v21 = sub_10000F988(a2, a3, (void (*)(_QWORD *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_10000FA14);
    if ((v16 & 1) == (v22 & 1))
    {
      v12 = v21;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_10014869C(v12, a2, a3, a1, v18);
      return (_OWORD *)swift_bridgeObjectRetain(a3);
    }
  }
  result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

void sub_100030460(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  __int128 v20;
  __int128 v21;
  __int16 v22;
  __int128 v23;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = sub_10002D93C(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_14;
  }
  v14 = v9;
  v15 = v8[3];
  if (v15 >= v13 && (a3 & 1) != 0)
  {
LABEL_7:
    v16 = *v4;
    if ((v14 & 1) != 0)
    {
LABEL_8:
      v17 = v16[7];

      *(_QWORD *)(v17 + 8 * v10) = a1;
      return;
    }
    goto LABEL_11;
  }
  if (v15 >= v13 && (a3 & 1) == 0)
  {
    sub_100146C2C();
    goto LABEL_7;
  }
  sub_1001413B0(v13, a3 & 1);
  v18 = sub_10002D93C(a2);
  if ((v14 & 1) != (v19 & 1))
  {
LABEL_14:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for DNSRecords.PTR);
    __break(1u);
    return;
  }
  v10 = v18;
  v16 = *v4;
  if ((v14 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  v20 = *(_OWORD *)(a2 + 16);
  v23 = *(_OWORD *)a2;
  v21 = v20;
  v22 = *(_WORD *)(a2 + 32);
  sub_100148704(v10, a2, a1, v16);
  sub_100031ECC((uint64_t)&v23);
  sub_100031ECC((uint64_t)&v21);
}

void sub_100030590(uint64_t a1, char a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  __int128 v22;
  __int128 v23;
  __int16 v24;
  __int128 v25;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = sub_10002D93C(a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
    goto LABEL_14;
  }
  v16 = v11;
  v17 = v10[3];
  if (v17 >= v15 && (a4 & 1) != 0)
  {
LABEL_7:
    v18 = *v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      v19 = v18[7] + 16 * v12;

      *(_QWORD *)v19 = a1;
      *(_BYTE *)(v19 + 8) = a2 & 1;
      return;
    }
    goto LABEL_11;
  }
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    sub_100146E08();
    goto LABEL_7;
  }
  sub_1001415E8(v15, a4 & 1);
  v20 = sub_10002D93C(a3);
  if ((v16 & 1) != (v21 & 1))
  {
LABEL_14:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for DNSRecords.PTR);
    __break(1u);
    return;
  }
  v12 = v20;
  v18 = *v5;
  if ((v16 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  v22 = *(_OWORD *)(a3 + 16);
  v25 = *(_OWORD *)a3;
  v23 = v22;
  v24 = *(_WORD *)(a3 + 32);
  sub_10014875C(v12, a3, a1, a2 & 1, v18);
  sub_100031ECC((uint64_t)&v25);
  sub_100031ECC((uint64_t)&v23);
}

_OWORD *sub_1000306D0(_OWORD *a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _OWORD *result;
  unint64_t v23;
  char v24;
  uint64_t v25;

  v4 = (_QWORD **)v3;
  v8 = type metadata accessor for CodingUserInfoKey(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin();
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (_QWORD *)*v3;
  v14 = sub_10002DA48(a2);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
  }
  else
  {
    v18 = v13;
    v19 = v12[3];
    if (v19 >= v17 && (a3 & 1) != 0)
    {
LABEL_7:
      v20 = *v4;
      if ((v18 & 1) != 0)
      {
LABEL_8:
        v21 = (_QWORD *)(v20[7] + 32 * v14);
        sub_100014430(v21);
        return sub_100033A2C(a1, v21);
      }
      goto LABEL_11;
    }
    if (v19 >= v17 && (a3 & 1) == 0)
    {
      sub_10014721C();
      goto LABEL_7;
    }
    sub_100141B94(v17, a3 & 1);
    v23 = sub_10002DA48(a2);
    if ((v18 & 1) == (v24 & 1))
    {
      v14 = v23;
      v20 = *v4;
      if ((v18 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
      return sub_1001487BC(v14, (uint64_t)v11, a1, v20);
    }
  }
  result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
  __break(1u);
  return result;
}

void sub_10003084C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5)
{
  _QWORD *v5;
  _QWORD **v6;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;

  v6 = (_QWORD **)v5;
  v12 = (_QWORD *)*v5;
  sub_10002DA98(a4);
  v15 = v14;
  v16 = v12[2];
  v17 = (v13 & 1) == 0;
  v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
  }
  else
  {
    v19 = v13;
    v20 = v12[3];
    if (v20 >= v18 && (a5 & 1) != 0)
    {
LABEL_7:
      v21 = *v6;
      if ((v19 & 1) != 0)
      {
LABEL_8:
        v22 = v21[7] + 24 * v15;
        v23 = *(_QWORD *)(v22 + 16);

        swift_bridgeObjectRelease(v23);
        *(_QWORD *)v22 = a1;
        *(_QWORD *)(v22 + 8) = a2;
        *(_QWORD *)(v22 + 16) = a3;
        return;
      }
      goto LABEL_11;
    }
    if (v20 >= v18 && (a5 & 1) == 0)
    {
      sub_100147458();
      goto LABEL_7;
    }
    sub_100141F18(v18, a5 & 1);
    sub_10002DA98(a4);
    if ((v19 & 1) == (v25 & 1))
    {
      v15 = v24;
      v21 = *v6;
      if ((v19 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_10014885C(v15, a4, a1, a2, a3, v21);
      return;
    }
  }
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for WiFiInterfaceRole);
  __break(1u);
}

uint64_t sub_100030990(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  char v22;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = sub_10000F988(a2, a3, (void (*)(_QWORD *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_10000FA14);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = v18[7];
        result = swift_release(*(_QWORD *)(v19 + 8 * v12));
        *(_QWORD *)(v19 + 8 * v12) = a1;
        return result;
      }
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_100147610();
      goto LABEL_7;
    }
    sub_1001422E8(v15, a4 & 1);
    v21 = sub_10000F988(a2, a3, (void (*)(_QWORD *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_10000FA14);
    if ((v16 & 1) == (v22 & 1))
    {
      v12 = v21;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_1001488AC(v12, a2, a3, a1, v18);
      return swift_bridgeObjectRetain(a3);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

_OWORD *sub_100030ADC(_OWORD *a1, void *a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v7;
  char v8;
  unint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _OWORD *result;
  unint64_t v18;
  char v19;
  uint64_t v20;

  v4 = (_QWORD **)v3;
  v7 = (_QWORD *)*v3;
  v9 = sub_10002DB98((uint64_t)a2);
  v10 = v7[2];
  v11 = (v8 & 1) == 0;
  v12 = v10 + v11;
  if (__OFADD__(v10, v11))
  {
    __break(1u);
  }
  else
  {
    v13 = v8;
    v14 = v7[3];
    if (v14 >= v12 && (a3 & 1) != 0)
    {
LABEL_7:
      v15 = *v4;
      if ((v13 & 1) != 0)
      {
LABEL_8:
        v16 = (_QWORD *)(v15[7] + 32 * v9);
        sub_100014430(v16);
        return sub_100033A2C(a1, v16);
      }
      goto LABEL_11;
    }
    if (v14 >= v12 && (a3 & 1) == 0)
    {
      sub_1001477C4();
      goto LABEL_7;
    }
    sub_1001425FC(v12, a3 & 1);
    v18 = sub_10002DB98((uint64_t)a2);
    if ((v13 & 1) == (v19 & 1))
    {
      v9 = v18;
      v15 = *v4;
      if ((v13 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_1001488B0(v9, (uint64_t)a2, a1, v15);
      return a2;
    }
  }
  type metadata accessor for CFString(0);
  result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v20);
  __break(1u);
  return result;
}

uint64_t sub_100030BFC(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  unint64_t v24;
  char v25;
  uint64_t v26;

  v4 = (_QWORD **)v3;
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin();
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (_QWORD *)*v3;
  v14 = sub_10002DCA0(a2);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_14;
  }
  v18 = v13;
  v19 = v12[3];
  if (v19 >= v17 && (a3 & 1) != 0)
  {
LABEL_7:
    v20 = *v4;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      v21 = v20[7];
      v22 = type metadata accessor for LongTermPairingKeys.PublicIdentity(0);
      return sub_100033B04(a1, v21 + *(_QWORD *)(*(_QWORD *)(v22 - 8) + 72) * v14, type metadata accessor for LongTermPairingKeys.PublicIdentity);
    }
    goto LABEL_11;
  }
  if (v19 >= v17 && (a3 & 1) == 0)
  {
    sub_100147BD4();
    goto LABEL_7;
  }
  sub_100142FE0(v17, a3 & 1);
  v24 = sub_10002DCA0(a2);
  if ((v18 & 1) != (v25 & 1))
  {
LABEL_14:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v8);
    __break(1u);
    return result;
  }
  v14 = v24;
  v20 = *v4;
  if ((v18 & 1) != 0)
    goto LABEL_8;
LABEL_11:
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  return sub_1001489B0(v14, (uint64_t)v11, a1, v20);
}

uint64_t sub_100030D6C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t result;
  unint64_t v21;
  char v22;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = sub_10002DD0C(a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = (uint64_t *)(v18[7] + 16 * v12);
        result = swift_release(v19[1]);
        *v19 = a1;
        v19[1] = a2;
        return result;
      }
      return sub_100148A68(v12, a3, a1, a2, v18);
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_100147E9C();
      goto LABEL_7;
    }
    sub_1001433FC(v15, a4 & 1);
    v21 = sub_10002DD0C(a3);
    if ((v16 & 1) == (v22 & 1))
    {
      v12 = v21;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
      return sub_100148A68(v12, a3, a1, a2, v18);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for UInt64);
  __break(1u);
  return result;
}

uint64_t sub_100030E88(uint64_t a1, char a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  unint64_t v20;
  char v21;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = sub_10002D744(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        v17 = v16[7];
        v18 = type metadata accessor for NANGenericServiceProtocol.Attribute(0);
        return sub_100033B04(a1, v17 + *(_QWORD *)(*(_QWORD *)(v18 - 8) + 72) * v10, type metadata accessor for NANGenericServiceProtocol.Attribute);
      }
      return sub_100148AB0(v10, a2, a1, v16);
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_100146FF4();
      goto LABEL_7;
    }
    sub_100141840(v13, a3 & 1);
    v20 = sub_10002D744(a2);
    if ((v14 & 1) == (v21 & 1))
    {
      v10 = v20;
      v16 = *v4;
      if ((v14 & 1) != 0)
        goto LABEL_8;
      return sub_100148AB0(v10, a2, a1, v16);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for NANGenericServiceProtocol.AttributeID);
  __break(1u);
  return result;
}

_OWORD *sub_100030FB0(_OWORD *a1, char a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  char v7;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _OWORD *result;
  unint64_t v19;
  char v20;

  v4 = (_QWORD **)v3;
  v7 = a2 & 1;
  v8 = (_QWORD *)*v3;
  v10 = sub_10002DD3C(a2 & 1);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        v17 = (_QWORD *)(v16[7] + 32 * v10);
        sub_100014430(v17);
        return sub_100033A2C(a1, v17);
      }
      return sub_100148B3C(v10, v7, a1, v16);
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_100148494();
      goto LABEL_7;
    }
    sub_100143C64(v13, a3 & 1);
    v19 = sub_10002DD3C(v7);
    if ((v14 & 1) == (v20 & 1))
    {
      v10 = v19;
      v16 = *v4;
      if ((v14 & 1) != 0)
        goto LABEL_8;
      return sub_100148B3C(v10, v7, a1, v16);
    }
  }
  result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for AWDLStatistics.ServiceRejection.Key);
  __break(1u);
  return result;
}

_OWORD *sub_1000310C8(_OWORD *a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _OWORD *result;
  uint64_t v19;
  char v20;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = sub_10002DDE8(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        v17 = (_QWORD *)(v16[7] + 32 * v10);
        sub_100014430(v17);
        return sub_100033A2C(a1, v17);
      }
      return sub_100148B40(v10, a2, a1, v16);
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_1001484A0();
      goto LABEL_7;
    }
    sub_100143FA4(v13, a3 & 1);
    v19 = sub_10002DDE8(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      v10 = v19;
      v16 = *v4;
      if ((v14 & 1) != 0)
        goto LABEL_8;
      return sub_100148B40(v10, a2, a1, v16);
    }
  }
  result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for AWDLStatistics.TrafficRegistrationStart.Key);
  __break(1u);
  return result;
}

_OWORD *sub_1000311E0(_OWORD *a1, char a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _OWORD *result;
  unint64_t v19;
  char v20;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = sub_10002DE18(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        v17 = (_QWORD *)(v16[7] + 32 * v10);
        sub_100014430(v17);
        return sub_100033A2C(a1, v17);
      }
      return sub_100148B40(v10, a2, a1, v16);
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_1001484AC();
      goto LABEL_7;
    }
    sub_100144364(v13, a3 & 1);
    v19 = sub_10002DE18(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      v10 = v19;
      v16 = *v4;
      if ((v14 & 1) != 0)
        goto LABEL_8;
      return sub_100148B40(v10, a2, a1, v16);
    }
  }
  result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for AWDLStatistics.TrafficRegistrationStop.Key);
  __break(1u);
  return result;
}

_OWORD *sub_1000312F8(_OWORD *a1, char a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  char v7;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _OWORD *result;
  unint64_t v19;
  char v20;

  v4 = (_QWORD **)v3;
  v7 = a2 & 1;
  v8 = (_QWORD *)*v3;
  v10 = sub_10002DED4(a2 & 1);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        v17 = (_QWORD *)(v16[7] + 32 * v10);
        sub_100014430(v17);
        return sub_100033A2C(a1, v17);
      }
      return sub_100148B3C(v10, v7, a1, v16);
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_1001484B8();
      goto LABEL_7;
    }
    sub_1001446B0(v13, a3 & 1);
    v19 = sub_10002DED4(v7);
    if ((v14 & 1) == (v20 & 1))
    {
      v10 = v19;
      v16 = *v4;
      if ((v14 & 1) != 0)
        goto LABEL_8;
      return sub_100148B3C(v10, v7, a1, v16);
    }
  }
  result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for AWDLStatistics.Failure.Key);
  __break(1u);
  return result;
}

_OWORD *sub_100031410(_OWORD *a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _OWORD *result;
  unint64_t v19;
  char v20;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = sub_10002DFE4(a2, (uint64_t (*)(uint64_t))sub_100157B4C);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        v17 = (_QWORD *)(v16[7] + 32 * v10);
        sub_100014430(v17);
        return sub_100033A2C(a1, v17);
      }
      return sub_100148B40(v10, a2, a1, v16);
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_100148678();
      goto LABEL_7;
    }
    sub_1001449D4(v13, a3 & 1);
    v19 = sub_10002DFE4(a2, (uint64_t (*)(uint64_t))sub_100157B4C);
    if ((v14 & 1) == (v20 & 1))
    {
      v10 = v19;
      v16 = *v4;
      if ((v14 & 1) != 0)
        goto LABEL_8;
      return sub_100148B40(v10, a2, a1, v16);
    }
  }
  result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for AWDLStatistics.LowLatencyStatistics.Key);
  __break(1u);
  return result;
}

_OWORD *sub_100031538(_OWORD *a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _OWORD *result;
  uint64_t v19;
  char v20;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = sub_10002DF64(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        v17 = (_QWORD *)(v16[7] + 32 * v10);
        sub_100014430(v17);
        return sub_100033A2C(a1, v17);
      }
      return sub_100148B40(v10, a2, a1, v16);
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_100148684();
      goto LABEL_7;
    }
    sub_1001449E8(v13, a3 & 1);
    v19 = sub_10002DF64(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      v10 = v19;
      v16 = *v4;
      if ((v14 & 1) != 0)
        goto LABEL_8;
      return sub_100148B40(v10, a2, a1, v16);
    }
  }
  result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for AWDLStatistics.AirPlayStatistics.Key);
  __break(1u);
  return result;
}

_OWORD *sub_100031650(_OWORD *a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _OWORD *result;
  unint64_t v19;
  char v20;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = sub_10002DFE4(a2, (uint64_t (*)(uint64_t))sub_100194468);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        v17 = (_QWORD *)(v16[7] + 32 * v10);
        sub_100014430(v17);
        return sub_100033A2C(a1, v17);
      }
      return sub_100148B40(v10, a2, a1, v16);
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_100148690();
      goto LABEL_7;
    }
    sub_1001449FC(v13, a3 & 1);
    v19 = sub_10002DFE4(a2, (uint64_t (*)(uint64_t))sub_100194468);
    if ((v14 & 1) == (v20 & 1))
    {
      v10 = v19;
      v16 = *v4;
      if ((v14 & 1) != 0)
        goto LABEL_8;
      return sub_100148B40(v10, a2, a1, v16);
    }
  }
  result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for NANCoreAnalyticsMetrics.Key);
  __break(1u);
  return result;
}

void sub_100031778(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  char v21;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = sub_10000F988(a2, a3, (void (*)(_QWORD *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_10000FA14);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = v18[7];

        *(_QWORD *)(v19 + 8 * v12) = a1;
        return;
      }
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_1001482E4();
      goto LABEL_7;
    }
    sub_100143958(v15, a4 & 1);
    v20 = sub_10000F988(a2, a3, (void (*)(_QWORD *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_10000FA14);
    if ((v16 & 1) == (v21 & 1))
    {
      v12 = v20;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_1001488AC(v12, a2, a3, a1, v18);
      swift_bridgeObjectRetain(a3);
      return;
    }
  }
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
}

void sub_1000318C4(uint64_t a1@<X0>, unint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;

  v5 = v4;
  if ((swift_isUniquelyReferenced_nonNull_native(*v4) & 1) == 0)
  {
    v21 = *v4;
    *v4 = 0x8000000000000000;
    sub_100146E08();
    v10 = *v4;
    *v4 = v21;
    swift_bridgeObjectRelease(v10);
  }
  if ((a2 & 0x8000000000000000) != 0 || (v11 = *v4, 1 << *(_BYTE *)(*v5 + 32) <= (uint64_t)a2))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (((*(_QWORD *)(v11 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8) + 64) >> a2) & 1) == 0)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (*(_DWORD *)(v11 + 36) == a3)
  {
    *v5 = 0x8000000000000000;
    v12 = *(_QWORD *)(v11 + 48) + 40 * a2;
    v20 = *(_OWORD *)v12;
    v13 = *(_QWORD *)(v12 + 16);
    v14 = *(_QWORD *)(v12 + 24);
    v15 = *(_BYTE *)(v12 + 32);
    v16 = *(_BYTE *)(v12 + 33);
    v17 = *(_QWORD *)(v11 + 56) + 16 * a2;
    v18 = *(_QWORD *)v17;
    LOBYTE(v17) = *(_BYTE *)(v17 + 8);
    *(_QWORD *)a1 = v18;
    *(_BYTE *)(a1 + 8) = v17;
    sub_1001451C0(a2, v11);
    v19 = *v5;
    *v5 = v11;
    swift_bridgeObjectRelease(v19);
    *(_OWORD *)a4 = v20;
    *(_QWORD *)(a4 + 16) = v13;
    *(_QWORD *)(a4 + 24) = v14;
    *(_BYTE *)(a4 + 32) = v15;
    *(_BYTE *)(a4 + 33) = v16;
    return;
  }
LABEL_10:
  __break(1u);
}

uint64_t sub_100031A00(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2)
    v7 = 2;
  v8 = v7 - 2;
  v9 = (unint64_t *)(a1 + 80);
  v2 = 64;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

unint64_t sub_100031A88(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  unint64_t result;
  char v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;

  v2 = sub_100012C44(&qword_100404EF0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin();
  v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 16);
  if (v6)
  {
    sub_100012C44(&qword_100404EF8);
    v7 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v6);
    v8 = (uint64_t)&v5[*(int *)(v2 + 48)];
    v9 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v10 = *(_QWORD *)(v3 + 72);
    while (1)
    {
      sub_100033B48(v9, (uint64_t)v5, &qword_100404EF0);
      v11 = *v5;
      result = sub_10002D744(*v5);
      if ((v13 & 1) != 0)
        break;
      v14 = result;
      *(_QWORD *)((char *)v7 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(_BYTE *)(v7[6] + result) = v11;
      v15 = v7[7];
      v16 = type metadata accessor for NANGenericServiceProtocol.Attribute(0);
      result = sub_100033AC0(v8, v15 + *(_QWORD *)(*(_QWORD *)(v16 - 8) + 72) * v14, type metadata accessor for NANGenericServiceProtocol.Attribute);
      v17 = v7[2];
      v18 = __OFADD__(v17, 1);
      v19 = v17 + 1;
      if (v18)
        goto LABEL_10;
      v7[2] = v19;
      v9 += v10;
      if (!--v6)
        return (unint64_t)v7;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return (unint64_t)_swiftEmptyDictionarySingleton;
  }
  return result;
}

unint64_t sub_100031BF4(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  unint64_t result;
  char v8;
  _BYTE *v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  char v16;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (unint64_t)&_swiftEmptyDictionarySingleton;
  sub_100012C44((uint64_t *)&unk_100404ED0);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v1);
  v5 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  v6 = *(_BYTE *)(a1 + 48);
  result = sub_10000F988(v5, v4, (void (*)(_QWORD *, uint64_t, uint64_t))&Character.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_10000FA14);
  if ((v8 & 1) != 0)
  {
LABEL_7:
    __break(1u);
LABEL_8:
    swift_bridgeObjectRetain(v4);
    return (unint64_t)v3;
  }
  v9 = (_BYTE *)(a1 + 72);
  while (1)
  {
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = (uint64_t *)(v3[6] + 16 * result);
    *v10 = v5;
    v10[1] = v4;
    *(_BYTE *)(v3[7] + result) = v6;
    v11 = v3[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      break;
    v3[2] = v13;
    if (!--v1)
      goto LABEL_8;
    v14 = v9 + 24;
    v5 = *((_QWORD *)v9 - 2);
    v15 = *((_QWORD *)v9 - 1);
    v6 = *v9;
    swift_bridgeObjectRetain(v4);
    result = sub_10000F988(v5, v15, (void (*)(_QWORD *, uint64_t, uint64_t))&Character.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_10000FA14);
    v9 = v14;
    v4 = v15;
    if ((v16 & 1) != 0)
      goto LABEL_7;
  }
  __break(1u);
  return result;
}

uint64_t sub_100031D2C(uint64_t a1)
{
  uint64_t *v1;

  return sub_100020384(a1, v1[4], v1[2], v1[3]);
}

uint64_t sub_100031D48(uint64_t *a1)
{
  uint64_t v1;

  return sub_100020490(a1, *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_100031D64(uint64_t a1)
{
  uint64_t v1;

  return sub_1000219D0(a1, *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_100031D80(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t type metadata accessor for BonjourResolver(uint64_t a1)
{
  return sub_10000D69C(a1, (uint64_t *)&unk_100404E50, (uint64_t)&nominal type descriptor for BonjourResolver);
}

uint64_t sub_100031DD8(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 56);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
  swift_bridgeObjectRelease(v2);
  return a1;
}

uint64_t sub_100031E0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(a4);
    return sub_10000E614(a6, a7);
  }
  return result;
}

uint64_t type metadata accessor for BonjourAdvertiser(uint64_t a1)
{
  return sub_10000D69C(a1, (uint64_t *)&unk_100404D90, (uint64_t)&nominal type descriptor for BonjourAdvertiser);
}

uint64_t sub_100031E6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRetain(a2);
    return swift_bridgeObjectRetain(a4);
  }
  return result;
}

uint64_t sub_100031E9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease(a2);
    return swift_bridgeObjectRelease(a4);
  }
  return result;
}

uint64_t sub_100031ECC(uint64_t a1)
{
  swift_bridgeObjectRetain(*(_QWORD *)(a1 + 8));
  return a1;
}

uint64_t sub_100031EF4(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  return a1;
}

uint64_t sub_100031F1C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for DNSRecords.SRV(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100031F58(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100012C44(&qword_100404B80);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_100031FA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRetain(a4);
    return sub_100031FEC(a6, a7);
  }
  return result;
}

uint64_t sub_100031FEC(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain(result);
  }
  return swift_retain(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

void sub_100032030(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for Data.Iterator(0);
  __chkstk_darwin();
  __asm { BR              X10 }
}

uint64_t sub_1000320C0()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  Swift::String v14;
  __n128 v15;

  sub_100031FEC(v5, v0);
  sub_100031FEC(v5, v0);
  swift_bridgeObjectRetain(v1);
  ((void (*)(uint64_t, unint64_t, _QWORD))Data.Iterator.init(_:at:))(v5, v0, (int)v5);
  sub_10000E614(v5, v0);
  v7 = sub_100011DE4((unint64_t *)&qword_100404F08, (uint64_t (*)(uint64_t))&type metadata accessor for Data.Iterator, (uint64_t)&protocol conformance descriptor for Data.Iterator);
  ((void (*)(uint64_t, uint64_t))dispatch thunk of IteratorProtocol.next())(v2, v7);
  if ((*(_BYTE *)(v6 - 65) & 1) == 0)
  {
    *(_OWORD *)(v6 - 112) = xmmword_10033A110;
    do
    {
      v8 = *(_BYTE *)(v6 - 66);
      v9 = sub_100012C44((uint64_t *)&unk_100404F10);
      v10 = swift_allocObject(v9, 72, 7);
      *(_OWORD *)(v10 + 16) = *(_OWORD *)(v6 - 112);
      *(_QWORD *)(v10 + 56) = &type metadata for UInt8;
      *(_QWORD *)(v10 + 64) = &protocol witness table for UInt8;
      *(_BYTE *)(v10 + 32) = v8;
      v11 = String.init(format:_:)(1479684133, 0xE400000000000000, v10);
      v13 = v12;
      *(_QWORD *)(v6 - 96) = v3;
      *(_QWORD *)(v6 - 88) = v1;
      swift_bridgeObjectRetain(v1);
      v14._countAndFlagsBits = v11;
      v14._object = v13;
      String.append(_:)(v14);
      swift_bridgeObjectRelease(v1);
      v15 = swift_bridgeObjectRelease(v13);
      v3 = *(_QWORD *)(v6 - 96);
      v1 = *(_QWORD *)(v6 - 88);
      ((void (*)(uint64_t, uint64_t, __n128))dispatch thunk of IteratorProtocol.next())(v2, v7, v15);
    }
    while (*(_BYTE *)(v6 - 65) != 1);
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 128) + 8))(v4, v2);
  return v3;
}

uint64_t sub_10003223C(uint64_t a1)
{
  uint64_t v1;

  return sub_100025BA0(a1, *(_QWORD *)(v1 + 32), *(unsigned __int8 *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56), *(unsigned __int8 *)(v1 + 64), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24)) & 1;
}

uint64_t sub_100032268@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_100025DB4(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

uint64_t sub_100032288(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 32));
  swift_bridgeObjectRelease(v2);
  return a1;
}

uint64_t sub_1000322BC(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 32);
  swift_bridgeObjectRetain(*(_QWORD *)(a1 + 16));
  swift_bridgeObjectRetain(v2);
  return a1;
}

uint64_t sub_1000322F0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_1000257FC(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

uint64_t type metadata accessor for BonjourBrowser(uint64_t a1)
{
  return sub_10000D69C(a1, (uint64_t *)&unk_100404CF8, (uint64_t)&nominal type descriptor for BonjourBrowser);
}

id sub_100032324(uint64_t a1, uint64_t a2)
{
  objc_class *v4;
  _BYTE *v5;
  char *v6;
  uint64_t v7;
  _OWORD *v8;
  _QWORD *v9;
  char *v10;
  __int128 v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  objc_super v17;

  v4 = (objc_class *)type metadata accessor for BonjourResolver(0);
  v5 = objc_allocWithZone(v4);
  v6 = &v5[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_srv];
  v7 = type metadata accessor for DNSRecords.SRV(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  v8 = &v5[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_aaaa];
  *v8 = 0u;
  v8[1] = 0u;
  v8[2] = 0u;
  v8[3] = 0u;
  v5[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_providedAAAA] = 0;
  *(_QWORD *)&v5[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_delegate] = 0;
  v9 = &v5[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_terminationHandler];
  *v9 = 0;
  v9[1] = 0;
  v10 = &v5[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_service];
  v11 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)v10 = *(_OWORD *)a1;
  *((_OWORD *)v10 + 1) = v11;
  *((_WORD *)v10 + 16) = *(_WORD *)(a1 + 32);
  v12 = &v5[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_logger];
  v13 = type metadata accessor for Logger(0);
  v14 = *(_QWORD *)(v13 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v12, a2, v13);
  v17.receiver = v5;
  v17.super_class = v4;
  v15 = objc_msgSendSuper2(&v17, "init");
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(a2, v13);
  return v15;
}

uint64_t sub_100032458()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10003247C()
{
  _QWORD *v0;

  swift_release(v0[4]);
  swift_bridgeObjectRelease(v0[7]);
  swift_bridgeObjectRelease(v0[9]);
  return swift_deallocObject(v0, 82, 7);
}

uint64_t sub_1000324B0()
{
  uint64_t *v0;

  return sub_1000259A4(v0[4], (uint64_t)(v0 + 5), v0[2], v0[3]);
}

_QWORD *sub_1000324C0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v2 = a1[3];
  v3 = a1[5];
  v4 = a1[6];
  swift_bridgeObjectRetain(a1[1]);
  swift_bridgeObjectRetain(v2);
  sub_100031FEC(v3, v4);
  return a1;
}

_QWORD *sub_10003250C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v2 = a1[1];
  v3 = a1[5];
  v4 = a1[6];
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(v2);
  sub_10000E614(v3, v4);
  return a1;
}

uint64_t sub_100032558(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DNSRecords.SRV(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

_QWORD *sub_10003259C(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

uint64_t sub_1000325C0()
{
  _QWORD *v0;

  swift_release(v0[4]);
  swift_bridgeObjectRelease(v0[6]);
  swift_bridgeObjectRelease(v0[8]);
  return swift_deallocObject(v0, 74, 7);
}

uint64_t sub_1000325F4()
{
  uint64_t *v0;

  return sub_10002891C(v0[4], (uint64_t)(v0 + 5), v0[2], v0[3]);
}

uint64_t sub_100032604(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 40);
}

uint64_t destroy for AWDLStatistics.AirPlayStatistics.Histograms(_QWORD *a1)
{
  swift_bridgeObjectRelease(*a1);
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[2]);
  return swift_bridgeObjectRelease(a1[3]);
}

uint64_t *initializeWithCopy for AWDLStatistics.AirPlayStatistics.Histograms(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[2];
  v6 = a2[3];
  a1[2] = v5;
  a1[3] = v6;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  return a1;
}

uint64_t *assignWithCopy for AWDLStatistics.AirPlayStatistics.Histograms(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = a2[2];
  v9 = a1[2];
  a1[2] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  v10 = a2[3];
  v11 = a1[3];
  a1[3] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  return a1;
}

_QWORD *assignWithTake for AWDLStatistics.AirPlayStatistics.Histograms(_QWORD *a1, _OWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease(*a1);
  v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(a1[2]);
  v5 = a1[3];
  *((_OWORD *)a1 + 1) = a2[1];
  swift_bridgeObjectRelease(v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for AWDLStatistics.AirPlayStatistics.Histograms(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AWDLStatistics.AirPlayStatistics.Histograms(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t type metadata accessor for OffloadedServices(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100033C60(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for OffloadedServices);
}

uint64_t sub_10003280C()
{
  return type metadata accessor for BonjourBrowser(0);
}

uint64_t sub_100032814(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = &unk_100339EF0;
  v4[1] = &unk_100339F08;
  result = type metadata accessor for Logger(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    v4[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
    result = swift_updateClassMetadata2(a1, 256, 4, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_1000328A0()
{
  return type metadata accessor for BonjourAdvertiser(0);
}

void sub_1000328A8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[4];

  v2 = type metadata accessor for Logger(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    v6[1] = "\"";
    v6[2] = &unk_100339F60;
    sub_100032944(319);
    if (v5 <= 0x3F)
    {
      v6[3] = *(_QWORD *)(v4 - 8) + 64;
      swift_updateClassMetadata2(a1, 256, 4, v6, a1 + 80);
    }
  }
}

void sub_100032944(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100404DA0)
  {
    v2 = type metadata accessor for DNSRecords.SRV(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100404DA0);
  }
}

uint64_t sub_100032998()
{
  return type metadata accessor for BonjourResolver(0);
}

void sub_1000329A0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[7];

  v2 = type metadata accessor for Logger(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    v6[1] = "\"";
    sub_100032944(319);
    if (v5 <= 0x3F)
    {
      v6[2] = *(_QWORD *)(v4 - 8) + 64;
      v6[3] = &unk_100339FA0;
      v6[4] = &unk_100339FB8;
      v6[5] = &unk_100339F08;
      v6[6] = &unk_100339FD0;
      swift_updateClassMetadata2(a1, 256, 7, v6, a1 + 80);
    }
  }
}

uint64_t initializeBufferWithCopyOfBuffer for BonjourBrowser.DiscoveredPeer(uint64_t a1, uint64_t a2)
{
  void *v3;
  id v4;

  v3 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v4 = v3;
  return a1;
}

void destroy for BonjourBrowser.DiscoveredPeer(id *a1)
{

}

uint64_t assignWithCopy for BonjourBrowser.DiscoveredPeer(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  return a1;
}

uint64_t initializeWithTake for NANAttribute.ServiceDescriptor.ServiceFilterControl(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t assignWithTake for BonjourBrowser.DiscoveredPeer(uint64_t a1, uint64_t a2)
{
  void *v4;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for NANAttribute.ServiceDescriptor.ServiceFilterControl(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 9))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NANAttribute.ServiceDescriptor.ServiceFilterControl(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 9) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for BonjourBrowser.DiscoveredPeer()
{
  return &type metadata for BonjourBrowser.DiscoveredPeer;
}

unint64_t sub_100032BC8()
{
  unint64_t result;

  result = qword_100404E60;
  if (!qword_100404E60)
  {
    result = swift_getWitnessTable(&unk_100339FF8, &type metadata for BonjourBrowser.DiscoveredPeer);
    atomic_store(result, (unint64_t *)&qword_100404E60);
  }
  return result;
}

unint64_t sub_100032C0C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100405BC0;
  if (!qword_100405BC0)
  {
    v1 = objc_opt_self(NSObject);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100405BC0);
  }
  return result;
}

uint64_t sub_100032C48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;

  if (a3)
  {
    swift_bridgeObjectRelease(a3);
    return swift_bridgeObjectRelease(a8);
  }
  return result;
}

void sub_100032C78(uint64_t a1, unsigned __int8 a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;
  id v19;
  char v20;
  char v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unsigned __int8 v28;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;

  v4 = a1;
  v5 = sub_10007788C(a1);
  if ((v7 & 1) != 0)
    goto LABEL_34;
  if (*(_DWORD *)(v4 + 36) != v6)
    goto LABEL_33;
  v8 = v5;
  v9 = 1 << *(_BYTE *)(v4 + 32);
  if (v5 != v9)
  {
    v10 = v4 + 64;
    v30 = v6;
    v31 = v6;
    v27 = v4 + 88;
    v11 = v6;
    v28 = a2;
    v33 = v4;
    v32 = v4 + 64;
    do
    {
      if (v8 < 0 || v8 >= v9)
      {
        __break(1u);
LABEL_29:
        __break(1u);
LABEL_30:
        __break(1u);
LABEL_31:
        __break(1u);
LABEL_32:
        __break(1u);
LABEL_33:
        __break(1u);
LABEL_34:
        __break(1u);
        return;
      }
      if (v6 != v11)
        goto LABEL_29;
      v13 = (unint64_t)v8 >> 6;
      if ((*(_QWORD *)(v10 + 8 * ((unint64_t)v8 >> 6)) & (1 << v8)) == 0)
        goto LABEL_29;
      v14 = *(_QWORD *)(v4 + 48) + 40 * v8;
      v15 = *(_QWORD *)(v14 + 8);
      v16 = *(_QWORD *)(v14 + 24);
      v17 = *(void **)(*(_QWORD *)(v4 + 56) + 16 * v8);
      swift_bridgeObjectRetain(v15);
      swift_bridgeObjectRetain(v16);
      v18 = v17;
      if (objc_msgSend(v18, "publishID") == a2)
      {
        sub_100032C0C();
        v19 = objc_msgSend(v18, "publisherAddress");
        v20 = static NSObject.== infix(_:_:)(v19, a3);

        swift_bridgeObjectRelease(v16);
        swift_bridgeObjectRelease(v15);

        a2 = v28;
        if ((v20 & 1) != 0)
          return;
      }
      else
      {

        swift_bridgeObjectRelease(v16);
        swift_bridgeObjectRelease(v15);
      }
      v4 = v33;
      v21 = *(_BYTE *)(v33 + 32);
      v12 = 1 << v21;
      if (v8 >= 1 << v21)
        goto LABEL_30;
      v10 = v32;
      v22 = *(_QWORD *)(v32 + 8 * v13);
      if ((v22 & (1 << v8)) == 0)
        goto LABEL_31;
      v6 = v31;
      if (*(_DWORD *)(v33 + 36) != v31)
        goto LABEL_32;
      v23 = v22 & (-2 << (v8 & 0x3F));
      if (v23)
      {
        v12 = __clz(__rbit64(v23)) | v8 & 0xFFFFFFFFFFFFFFC0;
      }
      else
      {
        v24 = v13 + 1;
        v25 = (v12 + 63) >> 6;
        if (v13 + 1 < v25)
        {
          v26 = *(_QWORD *)(v32 + 8 * v24);
          if (!v26)
          {
            v24 = v13 + 2;
            if (v13 + 2 >= v25)
              goto LABEL_7;
            v26 = *(_QWORD *)(v32 + 8 * v24);
            if (!v26)
            {
              while (v25 - 3 != v13)
              {
                v26 = *(_QWORD *)(v27 + 8 * v13++);
                if (v26)
                {
                  v24 = v13 + 2;
                  goto LABEL_22;
                }
              }
              goto LABEL_7;
            }
          }
LABEL_22:
          v12 = __clz(__rbit64(v26)) + (v24 << 6);
        }
      }
LABEL_7:
      v9 = 1 << v21;
      v8 = v12;
      v11 = v30;
    }
    while (v12 != v9);
  }
}

double sub_100032F14()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id *v7;
  unsigned __int8 v8;
  id v9;
  double result;
  _BYTE v11[24];

  v1 = (_QWORD *)(v0 + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB14BonjourBrowser_discoveredPeers);
  swift_beginAccess(v0 + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB14BonjourBrowser_discoveredPeers, v11, 0, 0);
  v2 = *v1;
  v3 = swift_bridgeObjectRetain(*v1);
  sub_10002A0CC(v3);
  v5 = v4;
  swift_bridgeObjectRelease(v2);
  v6 = *(_QWORD *)(v5 + 16);
  if (v6)
  {
    swift_bridgeObjectRetain(v5);
    v7 = (id *)(v5 + 40);
    do
    {
      v8 = *((_BYTE *)v7 - 8);
      v9 = *v7;
      sub_10002A764(v8, v9);

      v7 += 2;
      --v6;
    }
    while (v6);
    swift_bridgeObjectRelease(v5);
  }
  *(_QWORD *)&result = swift_bridgeObjectRelease(v5).n128_u64[0];
  return result;
}

uint64_t sub_100032FD8()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  NSObject *v15;
  os_log_type_t v16;
  int v17;
  _BOOL4 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  os_log_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  __int128 v46;
  NSData v47;
  uint64_t v48;
  unint64_t v49;
  Class isa;
  uint64_t v51;
  unint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  NSObject *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  NSObject *v63;
  os_log_type_t v64;
  _BOOL4 v65;
  uint8_t *v66;
  os_log_t v67;
  Class v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  char v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  os_log_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  Class v90;
  Class v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t *v102;
  void (*v103)(uint64_t);
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD v109[2];
  Class v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  os_log_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  _QWORD v125[4];
  char v126;
  char v127;
  os_log_t v128;
  uint64_t v129;
  uint64_t v130;
  char v131[24];
  __int128 v132;
  uint64_t v133;
  uint64_t v134;
  char v135;
  char v136;

  v1 = v0;
  sub_100012C44(&qword_100404B80);
  __chkstk_darwin();
  v123 = (char *)v109 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v4 = (char *)v109 - v3;
  v5 = type metadata accessor for DNSRecords.SRV(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin();
  v8 = (char *)v109 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v10 = (char *)v109 - v9;
  __chkstk_darwin();
  v12 = (char *)v109 - v11;
  v13 = (uint64_t)&v1[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_srv];
  swift_beginAccess(&v1[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_srv], v131, 0, 0);
  sub_100033B48(v13, (uint64_t)v4, &qword_100404B80);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    sub_100033A84((uint64_t)v4, &qword_100404B80);
  }
  else
  {
    v120 = v6;
    sub_100033AC0((uint64_t)v4, (uint64_t)v12, type metadata accessor for DNSRecords.SRV);
    sub_100032558((uint64_t)v12, (uint64_t)v10);
    sub_100032558((uint64_t)v12, (uint64_t)v8);
    v14 = v1;
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.info.getter();
    v17 = v16;
    v18 = os_log_type_enabled(v15, v16);
    v122 = v5;
    v121 = v13;
    if (v18)
    {
      v19 = swift_slowAlloc(26, -1);
      LODWORD(v118) = v17;
      v20 = v19;
      v119 = swift_slowAlloc(64, -1);
      *(_QWORD *)&v132 = v119;
      *(_DWORD *)v20 = 136315650;
      v116 = v20 + 4;
      v21 = *(_QWORD *)&v14[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_service + 8];
      v22 = *(_QWORD *)&v14[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_service + 16];
      v23 = *(_QWORD *)&v14[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_service + 24];
      v24 = v14[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_service + 32];
      v25 = v14[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_service + 33];
      v125[0] = *(_QWORD *)&v14[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_service];
      v125[1] = v21;
      v125[2] = v22;
      v125[3] = v23;
      v126 = v24;
      v127 = v25;
      swift_bridgeObjectRetain(v21);
      swift_bridgeObjectRetain(v23);
      v117 = v15;
      v26 = DNSRecords.PTR.description.getter();
      v28 = v27;
      swift_bridgeObjectRelease(v23);
      swift_bridgeObjectRelease(v21);
      v128 = (os_log_t)sub_100013CC8(v26, v28, (uint64_t *)&v132);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v128, &v129);

      swift_bridgeObjectRelease(v28);
      *(_WORD *)(v20 + 12) = 2080;
      v29 = (uint64_t *)&v10[*(int *)(v122 + 24)];
      v30 = *v29;
      v31 = v29[1];
      swift_bridgeObjectRetain(v31);
      v32 = v30;
      v5 = v122;
      v128 = (os_log_t)sub_100013CC8(v32, v31, (uint64_t *)&v132);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v128, &v129);
      swift_bridgeObjectRelease(v31);
      v33 = sub_100031F1C((uint64_t)v10);
      *(_WORD *)(v20 + 22) = 512;
      LOWORD(v26) = NWEndpoint.Port.rawValue.getter(v33);
      sub_100031F1C((uint64_t)v8);
      LOWORD(v128) = v26;
      v13 = v121;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v128, (char *)&v128 + 2);
      v34 = v117;
      _os_log_impl((void *)&_mh_execute_header, v117, (os_log_type_t)v118, "Removing SRV for %s %s:%hu", (uint8_t *)v20, 0x1Au);
      v35 = v119;
      swift_arrayDestroy(v119, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v35, -1, -1);
      swift_slowDealloc(v20, -1, -1);

    }
    else
    {
      sub_100031F1C((uint64_t)v8);

      sub_100031F1C((uint64_t)v10);
    }
    v36 = *(void **)&v14[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_delegate];
    if (v36)
    {
      v37 = *(_QWORD *)v12;
      v38 = *((_QWORD *)v12 + 1);
      v39 = *((_QWORD *)v12 + 2);
      v40 = *((_QWORD *)v12 + 3);
      v41 = v12[32];
      v132 = xmmword_10033A100;
      swift_unknownObjectRetain(v36);
      sub_100106CD0(v37, v38);
      sub_1000FF4F4(32, v39, v40, v41);
      v43 = v42;
      v45 = v44;
      sub_1000FBDAC(v42, v44);
      sub_10000E614(v43, v45);
      v46 = v132;
      v47.super.isa = Data._bridgeToObjectiveC()().super.isa;
      sub_10000E614(v46, *((unint64_t *)&v46 + 1));
      DNSRecords.SRV.valueData.getter();
      if (v49 >> 60 == 15)
      {
        isa = 0;
      }
      else
      {
        v51 = v48;
        v52 = v49;
        isa = Data._bridgeToObjectiveC()().super.isa;
        sub_10000E658(v51, v52);
      }
      objc_msgSend(v36, "handleEventType:keyData:valueData:", 1, v47.super.isa, isa);
      swift_unknownObjectRelease(v36);

      v5 = v122;
      v13 = v121;
    }
    sub_100031F1C((uint64_t)v12);
    v6 = v120;
  }
  if (v1[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_providedAAAA] == 1)
  {
    v53 = (uint64_t *)&v1[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_aaaa];
    v119 = *(_QWORD *)&v1[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_aaaa + 16];
    if (v119)
    {
      v120 = v6;
      v55 = *v53;
      v54 = v53[1];
      v56 = v53[3];
      v57 = v53[4];
      v58 = v53[5];
      v59 = v53[6];
      v60 = v1;
      v61 = v53[7];
      v113 = v60;
      v110 = v60;
      v112 = v55;
      v111 = v54;
      v118 = v56;
      v117 = v57;
      v115 = v58;
      v116 = v59;
      v114 = v61;
      v62 = sub_1000339B4(v55, v54, v119, v56, (uint64_t)v57, v58, v59, v61);
      v63 = Logger.logObject.getter(v62);
      v64 = static os_log_type_t.info.getter();
      v65 = os_log_type_enabled(v63, v64);
      v122 = v5;
      v121 = v13;
      if (v65)
      {
        v66 = (uint8_t *)swift_slowAlloc(12, -1);
        v67 = (os_log_t)swift_slowAlloc(32, -1);
        *(_DWORD *)v66 = 136315138;
        v128 = v67;
        v109[1] = v66 + 4;
        v68 = v110;
        v69 = *(_QWORD *)((char *)v110
                        + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_service
                        + 8);
        v70 = *(_QWORD *)((char *)v110
                        + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_service
                        + 16);
        v71 = *(_QWORD *)((char *)v110
                        + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_service
                        + 24);
        v72 = *((_BYTE *)v110
              + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_service
              + 32);
        v73 = *((_BYTE *)v110
              + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_service
              + 33);
        *(_QWORD *)&v132 = *(_QWORD *)((char *)v110
                                     + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_service);
        *((_QWORD *)&v132 + 1) = v69;
        v133 = v70;
        v134 = v71;
        v135 = v72;
        v136 = v73;
        swift_bridgeObjectRetain(v69);
        swift_bridgeObjectRetain(v71);
        v74 = DNSRecords.PTR.description.getter();
        v76 = v75;
        swift_bridgeObjectRelease(v71);
        swift_bridgeObjectRelease(v69);
        v124 = sub_100013CC8(v74, v76, (uint64_t *)&v128);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v124, v125);

        swift_bridgeObjectRelease(v76);
        _os_log_impl((void *)&_mh_execute_header, v63, v64, "Removing AAAA for %s", v66, 0xCu);
        swift_arrayDestroy(v67, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v67, -1, -1);
        swift_slowDealloc(v66, -1, -1);
      }
      else
      {
        v68 = v110;

      }
      v77 = *(void **)((char *)v68
                     + OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_delegate);
      v6 = v120;
      v1 = v113;
      if (v77)
      {
        swift_unknownObjectRetain(v77);
        v78 = v112;
        v79 = v111;
        v80 = v118;
        DNSRecords.BrowseHost.keyData.getter(v112, v111, v119);
        v82 = v81;
        v84 = v83;
        v110 = Data._bridgeToObjectiveC()().super.isa;
        sub_10000E614(v82, v84);
        v85 = v115;
        v86 = v117;
        v128 = v117;
        v129 = v115;
        v87 = sub_1000FADC0((uint64_t)&v128, (uint64_t)&v130);
        v89 = v88;
        sub_100032C48(v78, v79, v119, v80, (uint64_t)v86, v85, v116, v114);
        v90 = Data._bridgeToObjectiveC()().super.isa;
        sub_10000E614(v87, v89);
        v91 = v110;
        objc_msgSend(v77, "handleEventType:keyData:valueData:", 1, v110, v90);

        swift_unknownObjectRelease(v77);
      }
      else
      {
        sub_100032C48(v112, v111, v119, v118, (uint64_t)v117, v115, v116, v114);
      }
      v5 = v122;
      v13 = v121;
    }
  }
  v92 = &v1[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_aaaa];
  v93 = *(_QWORD *)&v1[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_aaaa];
  v94 = *(_QWORD *)&v1[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_aaaa + 8];
  v95 = *(_QWORD *)&v1[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_aaaa + 16];
  v96 = *(_QWORD *)&v1[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_aaaa + 24];
  v97 = *(_QWORD *)&v1[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_aaaa + 32];
  v98 = *(_QWORD *)&v1[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_aaaa + 40];
  v99 = *(_QWORD *)&v1[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_aaaa + 48];
  v100 = *(_QWORD *)&v1[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_aaaa + 56];
  *(_OWORD *)v92 = 0u;
  *((_OWORD *)v92 + 1) = 0u;
  *((_OWORD *)v92 + 2) = 0u;
  *((_OWORD *)v92 + 3) = 0u;
  sub_100032C48(v93, v94, v95, v96, v97, v98, v99, v100);
  v101 = (uint64_t)v123;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v123, 1, 1, v5);
  swift_beginAccess(v13, &v128, 33, 0);
  sub_100031F58(v101, v13);
  swift_endAccess(&v128);
  v102 = (uint64_t *)&v1[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_terminationHandler];
  v103 = *(void (**)(uint64_t))&v1[OBJC_IVAR____TtC7CoreP2PP33_CC695AB9131387273B9CBC7793DE05AB15BonjourResolver_terminationHandler];
  if (v103)
  {
    v104 = v102[1];
    v105 = swift_retain();
    v103(v105);
    sub_100012318((uint64_t)v103, v104);
    v106 = *v102;
  }
  else
  {
    v106 = 0;
  }
  v107 = v102[1];
  *v102 = 0;
  v102[1] = 0;
  return sub_100012318(v106, v107);
}

uint64_t sub_1000339B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;

  if (a3)
  {
    swift_bridgeObjectRetain(a8);
    return swift_bridgeObjectRetain(a3);
  }
  return result;
}

uint64_t sub_1000339E4(uint64_t result, uint64_t a2)
{
  if (result)
    return swift_retain(a2);
  return result;
}

uint64_t sub_1000339F4(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_100031FEC(result, a2);
  return result;
}

uint64_t sub_100033A08(uint64_t result, uint64_t a2, unsigned __int8 a3)
{
  if (a3 != 255)
    return sub_100033A20(result, a2, a3 & 1);
  return result;
}

uint64_t sub_100033A20(uint64_t result, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_bridgeObjectRelease(result);
  return result;
}

_OWORD *sub_100033A2C(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_100033A3C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100012C44((uint64_t *)&unk_100404EA0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100033A84(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = sub_100012C44(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100033AC0(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_100033B04(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t sub_100033B48(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_100012C44(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100033B8C(uint64_t a1)
{
  uint64_t *v1;

  return sub_10001F7CC(a1, v1[4], v1[2], v1[3]);
}

void sub_100033BA8(unsigned __int16 *a1)
{
  uint64_t *v1;

  sub_10001FA40(a1, v1[4], v1[2], v1[3]);
}

uint64_t sub_100033BC4()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 50, 7);
}

uint64_t sub_100033BF0()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[5]);
  sub_10000E614(v0[7], v0[8]);
  return swift_deallocObject(v0, 72, 7);
}

_QWORD *sub_100033C24(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (_QWORD *)v2;
  }
  return v1;
}

uint64_t sub_100033C60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return swift_getGenericMetadata(a1, v6, a5);
}

uint64_t sub_100033C8C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1000322F0(a1, a2);
}

void *OUI.size.unsafeMutableAddressor()
{
  return &static OUI.size;
}

uint64_t static OUI.size.getter()
{
  return 3;
}

uint64_t OUI.init(data:)(unsigned __int8 a1, unsigned __int8 a2, unsigned __int8 a3)
{
  return (unsigned __int16)(a2 << 8) | (a3 << 16) | a1;
}

void *OUI.wifiAlliance.unsafeMutableAddressor()
{
  return &static OUI.wifiAlliance;
}

uint64_t static OUI.wifiAlliance.getter()
{
  return 10121040;
}

void *OUI.apple.unsafeMutableAddressor()
{
  return &static OUI.apple;
}

uint64_t static OUI.apple.getter()
{
  return 15865600;
}

void *OUI.ieee80211.unsafeMutableAddressor()
{
  return &static OUI.ieee80211;
}

uint64_t static OUI.ieee80211.getter()
{
  return 11276032;
}

uint64_t OUI.hash(into:)(uint64_t a1, unsigned int a2)
{
  char v2;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  __n128 v11;

  v2 = a2;
  v4 = a2 >> 8;
  v5 = HIWORD(a2);
  v6 = sub_100012C44(&qword_100403E88);
  v7 = swift_allocObject(v6, 35, 7);
  *(_OWORD *)(v7 + 16) = xmmword_10033A120;
  *(_BYTE *)(v7 + 32) = v2;
  *(_BYTE *)(v7 + 33) = v4;
  *(_BYTE *)(v7 + 34) = v5;
  v8 = sub_1001068EC(v7);
  v10 = v9;
  v11 = swift_bridgeObjectRelease(v7);
  Data.hash(into:)(a1, v8, v10, v11);
  return sub_10000E614(v8, v10);
}

uint64_t static OUI.== infix(_:_:)(int a1, int a2)
{
  return sub_1000349A4(a1 & 0xFFFFFF, a2 & 0xFFFFFF);
}

uint64_t OUI.description.getter(unsigned int a1)
{
  char v1;
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v1 = a1;
  v2 = a1 >> 8;
  v3 = HIWORD(a1);
  type metadata accessor for Data.Iterator(0);
  __chkstk_darwin();
  v4 = sub_100012C44(&qword_100403E88);
  v5 = swift_allocObject(v4, 35, 7);
  *(_OWORD *)(v5 + 16) = xmmword_10033A120;
  *(_BYTE *)(v5 + 32) = v1;
  *(_BYTE *)(v5 + 33) = v2;
  v6 = v3;
  *(_BYTE *)(v5 + 34) = v3;
  v7 = sub_1001068EC(v5);
  v9 = v8;
  swift_bridgeObjectRelease(v5);
  v10 = sub_1001068EC((uint64_t)&off_1003D6948);
  v12 = v11;
  _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(v7, v9);
  v14 = v13;
  sub_10000E614(v10, v12);
  sub_10000E614(v7, v9);
  if ((v14 & 1) == 0)
  {
    v15 = swift_allocObject(v4, 35, 7);
    *(_OWORD *)(v15 + 16) = xmmword_10033A120;
    *(_BYTE *)(v15 + 32) = v1;
    *(_BYTE *)(v15 + 33) = v2;
    *(_BYTE *)(v15 + 34) = v6;
    sub_1001068EC(v15);
    v17 = v16;
    swift_bridgeObjectRelease(v15);
    __asm { BR              X10 }
  }
  return 0x696C6C4169466957;
}

Swift::Int OUI.hashValue.getter(unsigned int a1)
{
  char v1;
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  __n128 v9;
  _QWORD v11[9];

  v1 = a1;
  v2 = a1 >> 8;
  v3 = HIWORD(a1);
  Hasher.init(_seed:)(v11);
  v4 = sub_100012C44(&qword_100403E88);
  v5 = swift_allocObject(v4, 35, 7);
  *(_OWORD *)(v5 + 16) = xmmword_10033A120;
  *(_BYTE *)(v5 + 32) = v1;
  *(_BYTE *)(v5 + 33) = v2;
  *(_BYTE *)(v5 + 34) = v3;
  v6 = sub_1001068EC(v5);
  v8 = v7;
  v9 = swift_bridgeObjectRelease(v5);
  Data.hash(into:)(v11, v6, v8, v9);
  sub_10000E614(v6, v8);
  return Hasher._finalize()();
}

Swift::Int sub_100034160()
{
  __int16 *v0;
  __int16 v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __n128 v8;
  _QWORD v10[9];

  v1 = *v0;
  v2 = *((_BYTE *)v0 + 2);
  Hasher.init(_seed:)(v10);
  v3 = sub_100012C44(&qword_100403E88);
  v4 = swift_allocObject(v3, 35, 7);
  *(_OWORD *)(v4 + 16) = xmmword_10033A120;
  *(_WORD *)(v4 + 32) = v1;
  *(_BYTE *)(v4 + 34) = v2;
  v5 = sub_1001068EC(v4);
  v7 = v6;
  v8 = swift_bridgeObjectRelease(v4);
  Data.hash(into:)(v10, v5, v7, v8);
  sub_10000E614(v5, v7);
  return Hasher._finalize()();
}

uint64_t sub_100034204(uint64_t a1)
{
  __int16 *v1;
  __int16 v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  __n128 v10;

  v3 = *v1;
  v4 = *((_BYTE *)v1 + 2);
  v5 = sub_100012C44(&qword_100403E88);
  v6 = swift_allocObject(v5, 35, 7);
  *(_OWORD *)(v6 + 16) = xmmword_10033A120;
  *(_WORD *)(v6 + 32) = v3;
  *(_BYTE *)(v6 + 34) = v4;
  v7 = sub_1001068EC(v6);
  v9 = v8;
  v10 = swift_bridgeObjectRelease(v6);
  Data.hash(into:)(a1, v7, v9, v10);
  return sub_10000E614(v7, v9);
}

Swift::Int sub_10003428C()
{
  __int16 *v0;
  __int16 v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  __n128 v8;
  _QWORD v10[9];

  v1 = *v0;
  v2 = *((_BYTE *)v0 + 2);
  Hasher.init(_seed:)(v10);
  v3 = sub_100012C44(&qword_100403E88);
  v4 = swift_allocObject(v3, 35, 7);
  *(_OWORD *)(v4 + 16) = xmmword_10033A120;
  *(_WORD *)(v4 + 32) = v1;
  *(_BYTE *)(v4 + 34) = v2;
  v5 = sub_1001068EC(v4);
  v7 = v6;
  v8 = swift_bridgeObjectRelease(v4);
  Data.hash(into:)(v10, v5, v7, v8);
  sub_10000E614(v5, v7);
  return Hasher._finalize()();
}

uint64_t sub_10003432C()
{
  unsigned __int16 *v0;

  return OUI.description.getter(*v0 | (*((unsigned __int8 *)v0 + 2) << 16));
}

uint64_t sub_10003433C(unsigned __int16 *a1, unsigned __int16 *a2)
{
  return sub_1000349A4(*a1 | (*((unsigned __int8 *)a1 + 2) << 16), *a2 | (*((unsigned __int8 *)a2 + 2) << 16));
}

uint64_t OUI.init(from:)(_QWORD *a1)
{
  return sub_100034AFC(a1) & 0xFFFFFF;
}

uint64_t OUI.encode(to:)(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[3];
  uint64_t v14;
  uint64_t v15;

  v4 = a1[3];
  v5 = a1[4];
  sub_10003259C(a1, v4);
  dispatch thunk of Encoder.unkeyedContainer()(v13, v4, v5);
  v6 = v14;
  v7 = v15;
  sub_100034C68((uint64_t)v13, v14);
  dispatch thunk of UnkeyedEncodingContainer.encode(_:)(a2, v6, v7);
  if (!v2)
  {
    v8 = v14;
    v9 = v15;
    sub_100034C68((uint64_t)v13, v14);
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)(a2 >> 8, v8, v9);
    v10 = v14;
    v11 = v15;
    sub_100034C68((uint64_t)v13, v14);
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)(WORD1(a2), v10, v11);
  }
  return sub_100014430(v13);
}

uint64_t sub_10003446C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = sub_100034AFC(a1);
  if (!v2)
  {
    *(_WORD *)a2 = result;
    *(_BYTE *)(a2 + 2) = BYTE2(result);
  }
  return result;
}

uint64_t sub_1000344A4(_QWORD *a1)
{
  unsigned __int8 *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[3];
  uint64_t v16;
  uint64_t v17;

  v3 = v1[1];
  v4 = v1[2];
  v5 = *v1;
  v6 = a1[3];
  v7 = a1[4];
  sub_10003259C(a1, v6);
  dispatch thunk of Encoder.unkeyedContainer()(v15, v6, v7);
  v8 = v16;
  v9 = v17;
  sub_100034C68((uint64_t)v15, v16);
  dispatch thunk of UnkeyedEncodingContainer.encode(_:)(v5, v8, v9);
  if (!v2)
  {
    v10 = v16;
    v11 = v17;
    sub_100034C68((uint64_t)v15, v16);
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)(v3, v10, v11);
    v12 = v16;
    v13 = v17;
    sub_100034C68((uint64_t)v15, v16);
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)(v4, v12, v13);
  }
  return sub_100014430(v15);
}

uint64_t sub_1000345A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  char v5;
  char v7;
  uint64_t v8;
  __int16 v9;
  char v10;
  char v11;
  char v12;
  char v13;

  v8 = a1;
  v9 = a2;
  v10 = BYTE2(a2);
  v11 = BYTE3(a2);
  v12 = BYTE4(a2);
  v13 = BYTE5(a2);
  sub_10008B734((uint64_t)&v8, (uint64_t)&v8 + BYTE6(a2), a3, a4);
  if (!v4)
    v5 = v7;
  return v5 & 1;
}

uint64_t sub_100034678(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;

  result = __DataStorage._bytes.getter();
  v11 = result;
  if (result)
  {
    result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_15:
      __break(1u);
      return result;
    }
    v11 += a1 - result;
  }
  v12 = __OFSUB__(a2, a1);
  v13 = a2 - a1;
  if (v12)
  {
    __break(1u);
    goto LABEL_15;
  }
  v14 = __DataStorage._length.getter();
  if (v14 >= v13)
    v15 = v13;
  else
    v15 = v14;
  v16 = v11 + v15;
  if (v11)
    v17 = v16;
  else
    v17 = 0;
  sub_10008B734(v11, v17, a4, a5);
  if (!v5)
    v18 = v19;
  return v18 & 1;
}

void _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }
}

uint64_t sub_100034778()
{
  unint64_t v0;

  return ((uint64_t (*)(void))((char *)&loc_1000347AC + dword_100034984[v0 >> 62]))();
}

uint64_t sub_1000347BC@<X0>(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  if (v1 == BYTE6(v2))
  {
    if (v1 >= 1)
      __asm { BR              X10 }
    v3 = 1;
  }
  else
  {
    v3 = 0;
  }
  return v3 & 1;
}

uint64_t sub_1000349A4(unsigned int a1, unsigned int a2)
{
  char v2;
  char v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char v17;

  v2 = a2;
  v3 = a1;
  v4 = a1 >> 8;
  v5 = HIWORD(a1);
  v6 = a2 >> 8;
  v7 = HIWORD(a2);
  v8 = sub_100012C44(&qword_100403E88);
  v9 = swift_allocObject(v8, 35, 7);
  *(_OWORD *)(v9 + 16) = xmmword_10033A120;
  *(_BYTE *)(v9 + 32) = v3;
  *(_BYTE *)(v9 + 33) = v4;
  *(_BYTE *)(v9 + 34) = v5;
  v10 = sub_1001068EC(v9);
  v12 = v11;
  swift_bridgeObjectRelease(v9);
  v13 = swift_allocObject(v8, 35, 7);
  *(_OWORD *)(v13 + 16) = xmmword_10033A120;
  *(_BYTE *)(v13 + 32) = v2;
  *(_BYTE *)(v13 + 33) = v6;
  *(_BYTE *)(v13 + 34) = v7;
  v14 = sub_1001068EC(v13);
  v16 = v15;
  swift_bridgeObjectRelease(v13);
  _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(v10, v12);
  LOBYTE(v13) = v17;
  sub_10000E614(v14, v16);
  sub_10000E614(v10, v12);
  return v13 & 1;
}

unint64_t sub_100034AB4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100404F08;
  if (!qword_100404F08)
  {
    v1 = type metadata accessor for Data.Iterator(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for Data.Iterator, v1);
    atomic_store(result, (unint64_t *)&qword_100404F08);
  }
  return result;
}

uint64_t sub_100034AFC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v12;
  unsigned __int8 v13;
  unsigned __int8 v14;
  _QWORD v15[3];
  uint64_t v16;
  uint64_t v17;

  v3 = a1[3];
  v4 = a1[4];
  sub_10003259C(a1, v3);
  dispatch thunk of Decoder.unkeyedContainer()(v15, v3, v4);
  if (v1)
    return sub_100014430(a1);
  v5 = v16;
  v6 = v17;
  sub_100034C68((uint64_t)v15, v16);
  UnkeyedDecodingContainer.inferredDecode<A>()(v5, (uint64_t)&type metadata for UInt8, v6, (uint64_t)&protocol witness table for UInt8);
  v7 = v16;
  v8 = v17;
  sub_100034C68((uint64_t)v15, v16);
  UnkeyedDecodingContainer.inferredDecode<A>()(v7, (uint64_t)&type metadata for UInt8, v8, (uint64_t)&protocol witness table for UInt8);
  v9 = v16;
  v10 = v17;
  sub_100034C68((uint64_t)v15, v16);
  UnkeyedDecodingContainer.inferredDecode<A>()(v9, (uint64_t)&type metadata for UInt8, v10, (uint64_t)&protocol witness table for UInt8);
  sub_100014430(v15);
  sub_100014430(a1);
  return v14 | (v13 << 8) | (v12 << 16);
}

uint64_t sub_100034C68(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

unint64_t sub_100034C94()
{
  unint64_t result;

  result = qword_100404F30;
  if (!qword_100404F30)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for OUI, &type metadata for OUI);
    atomic_store(result, (unint64_t *)&qword_100404F30);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for NonNANOperatingChannelInformation(uint64_t result, __int16 *a2)
{
  __int16 v2;

  v2 = *a2;
  *(_BYTE *)(result + 2) = *((_BYTE *)a2 + 2);
  *(_WORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for NonNANOperatingChannelInformation(unsigned __int16 *a1, int a2)
{
  int v2;

  if (a2)
  {
    if ((a2 + 0x1FFFFFF) >> 24)
    {
      v2 = *((unsigned __int8 *)a1 + 3);
      if (*((_BYTE *)a1 + 3))
        return (*a1 | (*((unsigned __int8 *)a1 + 2) << 16) | (v2 << 24)) - 0xFFFFFF;
    }
    else
    {
      v2 = *(unsigned __int16 *)((char *)a1 + 3);
      if (*(unsigned __int16 *)((char *)a1 + 3))
        return (*a1 | (*((unsigned __int8 *)a1 + 2) << 16) | (v2 << 24)) - 0xFFFFFF;
    }
  }
  return 0;
}

uint64_t storeEnumTagSinglePayload for NonNANOperatingChannelInformation(uint64_t result, int a2, int a3)
{
  int v3;
  unsigned int v4;

  if ((a3 + 0x1FFFFFF) >> 24)
    v3 = 1;
  else
    v3 = 2;
  if (!a3)
    v3 = 0;
  if (a2)
  {
    *(_WORD *)result = a2 - 1;
    *(_BYTE *)(result + 2) = (a2 - 1) >> 16;
    if (v3)
    {
      v4 = ((a2 - 1) >> 24) + 1;
      if (v3 == 2)
        *(_WORD *)(result + 3) = v4;
      else
        *(_BYTE *)(result + 3) = v4;
    }
  }
  else if (v3)
  {
    if (v3 == 2)
      *(_WORD *)(result + 3) = 0;
    else
      *(_BYTE *)(result + 3) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for OUI()
{
  return &type metadata for OUI;
}

uint64_t sub_100034DB8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t AssociatedConformanceWitness;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  uint64_t v23;
  _QWORD v25[2];
  uint64_t v26;
  uint64_t v27;

  v25[0] = a1;
  v27 = a4;
  v26 = *(_QWORD *)(a3 + 8);
  v5 = *(_QWORD *)(v26 + 24);
  v6 = *(_QWORD *)(v5 + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v6, a2, &protocol requirements base descriptor for ExpressibleByIntegerLiteral, &associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  v8 = __chkstk_darwin(AssociatedTypeWitness);
  v10 = (char *)v25 - v9;
  v11 = *(_QWORD *)(a2 - 8);
  v12 = __chkstk_darwin(v8);
  v14 = (char *)v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v12);
  v17 = (char *)v25 - v16;
  __chkstk_darwin(v15);
  v19 = (char *)v25 - v18;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v6, a2, AssociatedTypeWitness, &protocol requirements base descriptor for ExpressibleByIntegerLiteral, &associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
  dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)(&qword_10033A240, 512, AssociatedTypeWitness, AssociatedConformanceWitness);
  dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)(v10, a2, v6);
  v21 = *(_QWORD *)(v5 + 8);
  dispatch thunk of static AdditiveArithmetic.- infix(_:_:)(v25[0], v17, a2, v21);
  v22 = *(void (**)(char *, uint64_t))(v11 + 8);
  v22(v17, a2);
  dispatch thunk of static AdditiveArithmetic.+ infix(_:_:)(v25[1], v19, a2, v21);
  v23 = v26;
  dispatch thunk of static BinaryInteger.~ prefix(_:)(v19, a2, v26);
  dispatch thunk of static BinaryInteger.& infix(_:_:)(v17, v14, a2, v23);
  v22(v14, a2);
  v22(v17, a2);
  return ((uint64_t (*)(char *, uint64_t))v22)(v19, a2);
}

uint64_t FixedWidthInteger.fourByteAligned.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  char *v13;
  uint64_t AssociatedConformanceWitness;
  uint64_t v16;

  v6 = *(_QWORD *)(a1 - 8);
  __chkstk_darwin();
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v9 + 8) + 24) + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v10, a1, &protocol requirements base descriptor for ExpressibleByIntegerLiteral, &associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  __chkstk_darwin();
  v13 = (char *)&v16 - v12;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v10, a1, AssociatedTypeWitness, &protocol requirements base descriptor for ExpressibleByIntegerLiteral, &associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
  dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)(&unk_10033A238, 1024, AssociatedTypeWitness, AssociatedConformanceWitness);
  dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)(v13, a1, v10);
  sub_100034DB8((uint64_t)v8, a1, a2, a3);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, a1);
}

uint64_t static FixedWidthInteger.random.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  void (*v28)(char *, char *, uint64_t);
  char *v29;
  void (*v30)(char *, char *, uint64_t);
  void (*v31)(char *, uint64_t);
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t TupleTypeMetadata2;
  uint64_t v41;
  uint64_t v42;

  v41 = a3;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, a1, a1, "lower upper ", 0);
  v5 = __chkstk_darwin(TupleTypeMetadata2);
  v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v5);
  v10 = (char *)&v36 - v9;
  v38 = *(_QWORD *)(a1 - 8);
  v11 = __chkstk_darwin(v8);
  v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  v15 = (char *)&v36 - v14;
  v16 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 32) + 8);
  v17 = type metadata accessor for ClosedRange(0, a1, v16);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = __chkstk_darwin(v17);
  v21 = (char *)&v36 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  v39 = (char *)&v36 - v22;
  dispatch thunk of static FixedWidthInteger.min.getter(a1, a2);
  v42 = a2;
  dispatch thunk of static FixedWidthInteger.max.getter(a1, a2);
  result = dispatch thunk of static Comparable.<= infix(_:_:)(v15, v13, a1, v16);
  if ((result & 1) != 0)
  {
    v36 = v17;
    v37 = v18;
    v24 = TupleTypeMetadata2;
    v25 = &v10[*(int *)(TupleTypeMetadata2 + 48)];
    v26 = v21;
    v27 = v38;
    v28 = *(void (**)(char *, char *, uint64_t))(v38 + 32);
    v28(v10, v15, a1);
    v28(v25, v13, a1);
    v29 = &v7[*(int *)(v24 + 48)];
    v30 = *(void (**)(char *, char *, uint64_t))(v27 + 16);
    v30(v7, v10, a1);
    v30(v29, v25, a1);
    v28(v26, v7, a1);
    v31 = *(void (**)(char *, uint64_t))(v27 + 8);
    v31(v29, a1);
    v32 = &v7[*(int *)(v24 + 48)];
    v28(v7, v10, a1);
    v28(v32, v25, a1);
    v33 = v36;
    v28(&v26[*(int *)(v36 + 36)], v32, a1);
    v31(v7, a1);
    v34 = v37;
    v35 = v39;
    (*(void (**)(char *, char *, uint64_t))(v37 + 32))(v39, v26, v33);
    static FixedWidthInteger.random(in:)(v35, a1, v42);
    return (*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v35, v33);
  }
  else
  {
    __break(1u);
  }
  return result;
}

double FixedWidthInteger.init(bitOffsets:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  uint64_t i;
  Swift::UInt v7;
  double result;

  dispatch thunk of static AdditiveArithmetic.zero.getter(a4, a2, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 8) + 24) + 8));
  v5 = *(_QWORD *)(a1 + 16);
  if (v5)
  {
    swift_bridgeObjectRetain(a1);
    for (i = 0; i != v5; ++i)
    {
      v7 = *(_QWORD *)(a1 + 8 * i + 32);
      FixedWidthInteger.set(bitOffset:)(v7);
    }
    swift_bridgeObjectRelease(a1);
  }
  *(_QWORD *)&result = swift_bridgeObjectRelease(a1).n128_u64[0];
  return result;
}

Swift::Void __swiftcall FixedWidthInteger.set(bitOffset:)(Swift::UInt bitOffset)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  int64_t v15;
  uint64_t AssociatedConformanceWitness;
  unint64_t v17;
  void (*v18)(char *, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  Swift::UInt v22;

  v3 = v2;
  v4 = v1;
  v6 = *(_QWORD *)(v2 + 8);
  v7 = *(_QWORD *)(*(_QWORD *)(v6 + 24) + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v7, v1, &protocol requirements base descriptor for ExpressibleByIntegerLiteral);
  __chkstk_darwin();
  v10 = (char *)&v19 - v9;
  v20 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin();
  v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v14 = (char *)&v19 - v13;
  v15 = dispatch thunk of static FixedWidthInteger.bitWidth.getter(v4, v3);
  if (v15 < 1 || v15 <= bitOffset)
  {
    __break(1u);
  }
  else
  {
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v7, v4, AssociatedTypeWitness, &protocol requirements base descriptor for ExpressibleByIntegerLiteral, &associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
    dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)(&qword_10033A240, 512, AssociatedTypeWitness, AssociatedConformanceWitness);
    dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)(v10, v4, v7);
    v22 = bitOffset;
    v17 = sub_100035630();
    dispatch thunk of static BinaryInteger.<< infix<A>(_:_:)(v12, &v22, &type metadata for UInt, v17, v4, v6);
    v18 = *(void (**)(char *, uint64_t))(v20 + 8);
    v18(v12, v4);
    dispatch thunk of static BinaryInteger.|= infix(_:_:)(v21, v14, v4, v6);
    v18(v14, v4);
  }
}

unint64_t sub_100035630()
{
  unint64_t result;

  result = qword_100404F38;
  if (!qword_100404F38)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for UInt, &type metadata for UInt);
    atomic_store(result, (unint64_t *)&qword_100404F38);
  }
  return result;
}

Swift::Void __swiftcall FixedWidthInteger.clear(bitOffset:)(Swift::UInt bitOffset)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  Swift::UInt v17;
  uint64_t v18;
  uint64_t AssociatedConformanceWitness;
  unint64_t v20;
  void (*v21)(char *, uint64_t);
  _QWORD v22[2];
  Swift::UInt v23;
  Swift::UInt v24;

  v23 = bitOffset;
  v3 = v2;
  v4 = v1;
  v5 = *(_QWORD *)(v2 + 8);
  v6 = *(_QWORD *)(*(_QWORD *)(v5 + 24) + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v6, v1, &protocol requirements base descriptor for ExpressibleByIntegerLiteral);
  __chkstk_darwin();
  v9 = (char *)v22 - v8;
  v22[0] = *(_QWORD *)(v4 - 8);
  __chkstk_darwin();
  v11 = (char *)v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v13 = (char *)v22 - v12;
  __chkstk_darwin();
  v15 = (char *)v22 - v14;
  v16 = v3;
  v17 = v23;
  v18 = dispatch thunk of static FixedWidthInteger.bitWidth.getter(v4, v16);
  if (v18 < 1 || v18 <= v17)
  {
    __break(1u);
  }
  else
  {
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v6, v4, AssociatedTypeWitness, &protocol requirements base descriptor for ExpressibleByIntegerLiteral, &associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
    dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)(&qword_10033A240, 512, AssociatedTypeWitness, AssociatedConformanceWitness);
    dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)(v9, v4, v6);
    v24 = v17;
    v20 = sub_100035630();
    dispatch thunk of static BinaryInteger.<< infix<A>(_:_:)(v11, &v24, &type metadata for UInt, v20, v4, v5);
    v21 = *(void (**)(char *, uint64_t))(v22[0] + 8);
    v21(v11, v4);
    dispatch thunk of static BinaryInteger.~ prefix(_:)(v13, v4, v5);
    v21(v13, v4);
    dispatch thunk of static BinaryInteger.&= infix(_:_:)(v22[1], v15, v4, v5);
    v21(v15, v4);
  }
}

unint64_t FixedWidthInteger.bytesRequiredToRepresentBitOffset.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  void (*v20)(char *, uint64_t, uint64_t);
  char v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  char v28;
  unint64_t result;
  uint64_t v30;
  uint64_t AssociatedConformanceWitness;
  char *v32;
  char *v33;
  char v34;
  int64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  char v43;
  char *v44;
  uint64_t v45;
  char *v46;
  unint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(uint64_t, uint64_t);
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  char *v56;
  char *v57;
  char *v58;
  uint64_t v59;
  int64_t v60;

  v4 = *(_QWORD *)(a2 + 8);
  v55 = *(_QWORD *)(*(_QWORD *)(v4 + 24) + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v55, a1, &protocol requirements base descriptor for ExpressibleByIntegerLiteral);
  __chkstk_darwin();
  v53 = (char *)&v51 - v6;
  v7 = *(_QWORD *)(a1 - 8);
  __chkstk_darwin();
  v54 = (char *)&v51 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v56 = (char *)&v51 - v9;
  __chkstk_darwin();
  v58 = (char *)&v51 - v10;
  __chkstk_darwin();
  v12 = (char *)&v51 - v11;
  __chkstk_darwin();
  v57 = (char *)&v51 - v13;
  __chkstk_darwin();
  v15 = (char *)&v51 - v14;
  __chkstk_darwin();
  v17 = (uint64_t)&v51 - v16;
  __chkstk_darwin();
  v19 = (char *)&v51 - v18;
  v20 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v20((char *)&v51 - v18, v2, a1);
  v21 = dispatch thunk of static BinaryInteger.isSigned.getter(a1, v4);
  v20((char *)v17, (uint64_t)v19, a1);
  if ((v21 & 1) == 0)
  {
    v23 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
    v23(v17, a1);
    v24 = v7;
    goto LABEL_18;
  }
  v22 = dispatch thunk of BinaryInteger.bitWidth.getter(a1, v4);
  v51 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v52 = v7;
  v51(v17, a1);
  if (v22 <= 64)
  {
    v23 = v51;
    v24 = v52;
    goto LABEL_18;
  }
  v20(v15, (uint64_t)v19, a1);
  v60 = 0x8000000000000000;
  if ((dispatch thunk of static BinaryInteger.isSigned.getter(a1, v4) & 1) != 0)
  {
    if (dispatch thunk of BinaryInteger.bitWidth.getter(a1, v4) < 64)
    {
LABEL_14:
      v30 = dispatch thunk of BinaryInteger._lowWord.getter(a1, v4);
      v23 = v51;
      result = ((uint64_t (*)(char *, uint64_t))v51)(v15, a1);
      v24 = v52;
      if (v30 < v60)
        goto LABEL_37;
      goto LABEL_18;
    }
LABEL_10:
    v26 = sub_100035EE0();
    v27 = v57;
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(&v60, &type metadata for Int, v26, a1, v4);
    v28 = dispatch thunk of static Comparable.< infix(_:_:)(v15, v27, a1, *(_QWORD *)(*(_QWORD *)(v4 + 32) + 8));
    v23 = v51;
    v51((uint64_t)v27, a1);
    result = ((uint64_t (*)(char *, uint64_t))v23)(v15, a1);
    v24 = v52;
    if ((v28 & 1) != 0)
      goto LABEL_37;
    goto LABEL_18;
  }
  v17 = dispatch thunk of static BinaryInteger.isSigned.getter(a1, v4);
  v25 = dispatch thunk of BinaryInteger.bitWidth.getter(a1, v4);
  if ((v17 & 1) == 0)
  {
    if (v25 >= 64)
    {
      v23 = v51;
      v51((uint64_t)v15, a1);
      v24 = v52;
      goto LABEL_18;
    }
    goto LABEL_14;
  }
  if (v25 > 64)
    goto LABEL_10;
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v55, a1, AssociatedTypeWitness, &protocol requirements base descriptor for ExpressibleByIntegerLiteral, &associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
  v32 = v53;
  dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)(&unk_10033A248, 256, AssociatedTypeWitness, AssociatedConformanceWitness);
  v33 = v57;
  dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)(v32, a1, v55);
  v34 = dispatch thunk of static Comparable.< infix(_:_:)(v15, v33, a1, *(_QWORD *)(*(_QWORD *)(v4 + 32) + 8));
  v23 = v51;
  v51((uint64_t)v33, a1);
  v17 = (uint64_t)v54;
  (*(void (**)(char *, char *, uint64_t))(v52 + 32))(v54, v15, a1);
  if ((v34 & 1) != 0)
  {
LABEL_36:
    result = ((uint64_t (*)(uint64_t, uint64_t))v23)(v17, a1);
    goto LABEL_37;
  }
  v35 = v60;
  v36 = dispatch thunk of BinaryInteger._lowWord.getter(a1, v4);
  result = ((uint64_t (*)(uint64_t, uint64_t))v23)(v17, a1);
  v24 = v52;
  if (v36 < v35)
  {
LABEL_37:
    __break(1u);
    return result;
  }
LABEL_18:
  v37 = dispatch thunk of BinaryInteger.bitWidth.getter(a1, v4);
  v20(v12, (uint64_t)v19, a1);
  if (v37 < 65)
  {
    v45 = dispatch thunk of BinaryInteger.bitWidth.getter(a1, v4);
    v23((uint64_t)v12, a1);
    if (v45 != 64 || (dispatch thunk of static BinaryInteger.isSigned.getter(a1, v4) & 1) != 0)
      goto LABEL_30;
  }
  else
  {
    v23((uint64_t)v12, a1);
  }
  v38 = v58;
  v20(v58, (uint64_t)v19, a1);
  v60 = 0x7FFFFFFFFFFFFFFFLL;
  v39 = dispatch thunk of static BinaryInteger.isSigned.getter(a1, v4);
  v40 = dispatch thunk of BinaryInteger.bitWidth.getter(a1, v4);
  if ((v39 & 1) != 0)
  {
    if (v40 > 64)
    {
      v41 = sub_100035EE0();
      v42 = v57;
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(&v60, &type metadata for Int, v41, a1, v4);
      v43 = dispatch thunk of static Comparable.< infix(_:_:)(v42, v38, a1, *(_QWORD *)(*(_QWORD *)(v4 + 32) + 8));
      v23((uint64_t)v42, a1);
      v44 = v38;
      goto LABEL_29;
    }
LABEL_27:
    dispatch thunk of BinaryInteger._lowWord.getter(a1, v4);
    v23((uint64_t)v38, a1);
    goto LABEL_30;
  }
  if (v40 <= 63)
    goto LABEL_27;
  v59 = 0x7FFFFFFFFFFFFFFFLL;
  v46 = v57;
  (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v57, v38, a1);
  v47 = sub_100035EE0();
  v48 = v56;
  dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(&v59, &type metadata for Int, v47, a1, v4);
  v43 = dispatch thunk of static Comparable.< infix(_:_:)(v48, v46, a1, *(_QWORD *)(*(_QWORD *)(v4 + 32) + 8));
  v23((uint64_t)v48, a1);
  v44 = v46;
LABEL_29:
  v23((uint64_t)v44, a1);
  if ((v43 & 1) != 0)
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
LABEL_30:
  v49 = dispatch thunk of BinaryInteger._lowWord.getter(a1, v4);
  v23((uint64_t)v19, a1);
  v50 = v49 + 7;
  if (__OFADD__(v49, 7))
  {
    __break(1u);
    goto LABEL_35;
  }
  if (v50 < 0)
    v50 = v49 + 14;
  return v50 & 0xFFFFFFFFFFFFFFF8;
}

unint64_t sub_100035EE0()
{
  unint64_t result;

  result = qword_100404F40;
  if (!qword_100404F40)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Int, &type metadata for Int);
    atomic_store(result, (unint64_t *)&qword_100404F40);
  }
  return result;
}

uint64_t FixedWidthInteger.retryText.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  Swift::String v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t AssociatedConformanceWitness;
  char v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  char v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;

  v3 = v2;
  v5 = *(_QWORD **)(a2 + 8);
  v6 = *(_QWORD *)(v5[3] + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v6, a1, &protocol requirements base descriptor for ExpressibleByIntegerLiteral, &associated type descriptor for ExpressibleByIntegerLiteral.IntegerLiteralType);
  __chkstk_darwin();
  v9 = (char *)&v31 - v8;
  v10 = *(_QWORD *)(a1 - 8);
  __chkstk_darwin();
  v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v14 = (char *)&v31 - v13;
  v33 = 0;
  v34 = 0xE000000000000000;
  DefaultStringInterpolation.appendInterpolation<A>(_:)(v2, a1, v5[1]);
  v15._countAndFlagsBits = 32;
  v15._object = (void *)0xE100000000000000;
  String.append(_:)(v15);
  if ((dispatch thunk of static BinaryInteger.isSigned.getter(a1, v5) & 1) != 0)
  {
    if (dispatch thunk of BinaryInteger.bitWidth.getter(a1, v5) >= 64)
    {
      v32 = 1;
      v24 = sub_100035EE0();
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(&v32, &type metadata for Int, v24, a1, v5);
      v23 = dispatch thunk of static Equatable.== infix(_:_:)(v2, v14, a1, *(_QWORD *)(v5[2] + 8));
      (*(void (**)(char *, uint64_t))(v10 + 8))(v14, a1);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v14, v2, a1);
    v16 = dispatch thunk of BinaryInteger._lowWord.getter(a1, v5);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v14, a1);
    goto LABEL_11;
  }
  v31 = v10;
  v17 = dispatch thunk of static BinaryInteger.isSigned.getter(a1, v5);
  v18 = dispatch thunk of BinaryInteger.bitWidth.getter(a1, v5);
  if ((v17 & 1) == 0)
  {
    if (v18 < 64)
    {
      v25 = v31;
      (*(void (**)(char *, uint64_t, uint64_t))(v31 + 16))(v14, v2, a1);
      v16 = dispatch thunk of BinaryInteger._lowWord.getter(a1, v5);
      (*(void (**)(char *, uint64_t))(v25 + 8))(v14, a1);
LABEL_11:
      v23 = v16 == 1;
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v18 > 64)
  {
LABEL_12:
    v32 = 1;
    v26 = sub_100035EE0();
    dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(&v32, &type metadata for Int, v26, a1, v5);
    v23 = dispatch thunk of static Equatable.== infix(_:_:)(v2, v14, a1, *(_QWORD *)(v5[2] + 8));
    (*(void (**)(char *, uint64_t))(v31 + 8))(v14, a1);
    goto LABEL_13;
  }
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v6, a1, AssociatedTypeWitness, &protocol requirements base descriptor for ExpressibleByIntegerLiteral, &associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
  dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)(&unk_10033A248, 256, AssociatedTypeWitness, AssociatedConformanceWitness);
  dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)(v9, a1, v6);
  v20 = dispatch thunk of static Comparable.>= infix(_:_:)(v2, v14, a1, *(_QWORD *)(v5[4] + 8));
  v21 = v31;
  v22 = *(void (**)(char *, uint64_t))(v31 + 8);
  v22(v14, a1);
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v12, v3, a1);
  v23 = (v20 & 1) != 0 && dispatch thunk of BinaryInteger._lowWord.getter(a1, v5) == 1;
  v22(v12, a1);
LABEL_13:
  if ((v23 & 1) != 0)
    v27 = 0x7972746572;
  else
    v27 = 0x73656972746572;
  if ((v23 & 1) != 0)
    v28 = 0xE500000000000000;
  else
    v28 = 0xE700000000000000;
  v29 = v28;
  String.append(_:)(*(Swift::String *)&v27);
  swift_bridgeObjectRelease(v28);
  return v33;
}

uint64_t UnsafeMutablePointer<A>.set<A>(bit:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  void (*v28)(char *, uint64_t, uint64_t);
  uint64_t v29;
  void (*v30)(char *, uint64_t);
  char *v31;
  char *v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  char v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  unint64_t v43;
  char v44;
  char *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  char *v52;
  char v53;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  uint64_t v57;
  char v58;
  char *v59;
  uint64_t v60;
  char *v61;
  unint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t result;
  uint64_t v66;
  char v67;
  uint64_t v68;
  unint64_t v69;
  char *v70;
  char v71;
  uint64_t v72;
  unint64_t v73;
  char *v74;
  char v75;
  unint64_t v76;
  char *v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  int64_t v83;
  uint64_t v84;
  uint64_t AssociatedConformanceWitness;
  char *v86;
  char *v87;
  char *v88;
  int64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t AssociatedTypeWitness;
  char *v93;
  uint64_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  char *v103;
  char *v104;
  char *v105;
  uint64_t v106;
  int64_t v107;

  v99 = a2;
  v6 = *(_QWORD *)(a4 + 8);
  v94 = *(_QWORD *)(*(_QWORD *)(v6 + 24) + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v94, a3, &protocol requirements base descriptor for ExpressibleByIntegerLiteral);
  __chkstk_darwin();
  v93 = (char *)&v90 - v7;
  v8 = *(_QWORD *)(a3 - 8);
  __chkstk_darwin();
  v91 = (char *)&v90 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v103 = (char *)&v90 - v10;
  __chkstk_darwin();
  v100 = (char *)&v90 - v11;
  __chkstk_darwin();
  v96 = (char *)&v90 - v12;
  __chkstk_darwin();
  v14 = (char *)&v90 - v13;
  __chkstk_darwin();
  v95 = (char *)&v90 - v15;
  __chkstk_darwin();
  v101 = (char *)&v90 - v16;
  __chkstk_darwin();
  v104 = (char *)&v90 - v17;
  __chkstk_darwin();
  v105 = (char *)&v90 - v18;
  __chkstk_darwin();
  v20 = (uint64_t)&v90 - v19;
  __chkstk_darwin();
  v98 = (char *)&v90 - v21;
  __chkstk_darwin();
  v23 = (uint64_t)&v90 - v22;
  __chkstk_darwin();
  v25 = (char *)&v90 - v24;
  __chkstk_darwin();
  v27 = (char *)&v90 - v26;
  v28 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v102 = a1;
  v28((char *)&v90 - v26, a1, a3);
  LOBYTE(a1) = dispatch thunk of static BinaryInteger.isSigned.getter(a3, v6);
  v28(v25, (uint64_t)v27, a3);
  v97 = v8;
  if ((a1 & 1) == 0)
  {
    v30 = *(void (**)(char *, uint64_t))(v8 + 8);
    v31 = v25;
LABEL_7:
    v30(v31, a3);
    goto LABEL_8;
  }
  v29 = dispatch thunk of BinaryInteger.bitWidth.getter(a3, v6);
  v30 = *(void (**)(char *, uint64_t))(v8 + 8);
  v30(v25, a3);
  if (v29 <= 64)
  {
LABEL_8:
    v32 = v105;
    goto LABEL_9;
  }
  v28((char *)v23, (uint64_t)v27, a3);
  v107 = 0x8000000000000000;
  if ((dispatch thunk of static BinaryInteger.isSigned.getter(a3, v6) & 1) == 0)
  {
    v67 = dispatch thunk of static BinaryInteger.isSigned.getter(a3, v6);
    v68 = dispatch thunk of BinaryInteger.bitWidth.getter(a3, v6);
    if ((v67 & 1) != 0)
    {
      if (v68 <= 64)
        goto LABEL_63;
LABEL_46:
      v69 = sub_100035EE0();
      v70 = v98;
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(&v107, &type metadata for Int, v69, a3, v6);
      v57 = dispatch thunk of static Comparable.< infix(_:_:)(v23, v70, a3, *(_QWORD *)(*(_QWORD *)(v6 + 32) + 8));
      v30(v70, a3);
      v30((char *)v23, a3);
      v32 = v105;
      if ((v57 & 1) == 0)
        goto LABEL_9;
LABEL_71:
      __break(1u);
LABEL_72:
      v30((char *)v57, a3);
      __break(1u);
      goto LABEL_73;
    }
    if (v68 < 64)
      goto LABEL_54;
    v31 = (char *)v23;
    goto LABEL_7;
  }
  if (dispatch thunk of BinaryInteger.bitWidth.getter(a3, v6) >= 64)
    goto LABEL_46;
LABEL_54:
  v57 = dispatch thunk of BinaryInteger._lowWord.getter(a3, v6);
  v30((char *)v23, a3);
  v32 = v105;
  if (v57 < v107)
    goto LABEL_71;
  while (1)
  {
LABEL_9:
    v33 = dispatch thunk of BinaryInteger.bitWidth.getter(a3, v6);
    v28((char *)v20, (uint64_t)v27, a3);
    if (v33 < 65)
    {
      v40 = dispatch thunk of BinaryInteger.bitWidth.getter(a3, v6);
      v30((char *)v20, a3);
      if (v40 != 64 || (dispatch thunk of static BinaryInteger.isSigned.getter(a3, v6) & 1) != 0)
        goto LABEL_22;
    }
    else
    {
      v30((char *)v20, a3);
    }
    v28(v32, (uint64_t)v27, a3);
    v107 = 0x7FFFFFFFFFFFFFFFLL;
    v34 = dispatch thunk of static BinaryInteger.isSigned.getter(a3, v6);
    v35 = dispatch thunk of BinaryInteger.bitWidth.getter(a3, v6);
    if ((v34 & 1) != 0)
    {
      if (v35 > 64)
      {
        v36 = sub_100035EE0();
        v37 = v98;
        dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(&v107, &type metadata for Int, v36, a3, v6);
        v38 = dispatch thunk of static Comparable.< infix(_:_:)(v37, v32, a3, *(_QWORD *)(*(_QWORD *)(v6 + 32) + 8));
        v30(v37, a3);
        v39 = v32;
        goto LABEL_21;
      }
LABEL_18:
      v41 = dispatch thunk of BinaryInteger._lowWord.getter(a3, v6);
      v30(v32, a3);
      if (v107 >= v41)
        goto LABEL_22;
      goto LABEL_19;
    }
    if (v35 <= 63)
      goto LABEL_18;
    while (1)
    {
      v106 = 0x7FFFFFFFFFFFFFFFLL;
      v42 = v98;
      (*(void (**)(char *, char *, uint64_t))(v97 + 32))(v98, v32, a3);
      v43 = sub_100035EE0();
      v32 = v95;
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(&v106, &type metadata for Int, v43, a3, v6);
      v38 = dispatch thunk of static Comparable.< infix(_:_:)(v32, v42, a3, *(_QWORD *)(*(_QWORD *)(v6 + 32) + 8));
      v30(v32, a3);
      v39 = v42;
LABEL_21:
      v30(v39, a3);
      if ((v38 & 1) == 0)
        break;
LABEL_19:
      __break(1u);
    }
LABEL_22:
    v23 = dispatch thunk of BinaryInteger._lowWord.getter(a3, v6);
    v30(v27, a3);
    v14 = v104;
    v28(v104, v102, a3);
    v44 = dispatch thunk of static BinaryInteger.isSigned.getter(a3, v6);
    v45 = v101;
    v28(v101, (uint64_t)v14, a3);
    if ((v44 & 1) == 0)
    {
      v30(v45, a3);
      v27 = v103;
      goto LABEL_28;
    }
    v46 = dispatch thunk of BinaryInteger.bitWidth.getter(a3, v6);
    v30(v45, a3);
    v27 = v103;
    if (v46 <= 64)
      goto LABEL_28;
    v47 = v96;
    v28(v96, (uint64_t)v14, a3);
    v107 = 0x8000000000000000;
    if ((dispatch thunk of static BinaryInteger.isSigned.getter(a3, v6) & 1) != 0)
    {
      if (dispatch thunk of BinaryInteger.bitWidth.getter(a3, v6) >= 64)
      {
        v76 = sub_100035EE0();
        v77 = v98;
        dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(&v107, &type metadata for Int, v76, a3, v6);
        v78 = v47;
        v20 = dispatch thunk of static Comparable.< infix(_:_:)(v47, v77, a3, *(_QWORD *)(*(_QWORD *)(v6 + 32) + 8));
        v30(v77, a3);
        v30(v78, a3);
        if ((v20 & 1) == 0)
          goto LABEL_28;
        goto LABEL_62;
      }
      v48 = dispatch thunk of BinaryInteger._lowWord.getter(a3, v6);
      v49 = v47;
      v20 = v48;
      v50 = v49;
      goto LABEL_61;
    }
    v71 = dispatch thunk of static BinaryInteger.isSigned.getter(a3, v6);
    v72 = dispatch thunk of BinaryInteger.bitWidth.getter(a3, v6);
    if ((v71 & 1) == 0)
      break;
    if (v72 <= 64)
    {
      v84 = AssociatedTypeWitness;
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v94, a3, AssociatedTypeWitness, &protocol requirements base descriptor for ExpressibleByIntegerLiteral, &associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
      v86 = v93;
      dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)(&unk_10033A248, 256, v84, AssociatedConformanceWitness);
      v87 = v98;
      dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)(v86, a3, v94);
      v88 = v96;
      LODWORD(v105) = dispatch thunk of static Comparable.< infix(_:_:)(v96, v87, a3, *(_QWORD *)(*(_QWORD *)(v6 + 32) + 8));
      v30(v87, a3);
      v57 = (uint64_t)v91;
      (*(void (**)(char *, char *, uint64_t))(v97 + 32))(v91, v88, a3);
      if ((v105 & 1) != 0)
        goto LABEL_72;
      v89 = v107;
      v20 = dispatch thunk of BinaryInteger._lowWord.getter(a3, v6);
      v30((char *)v57, a3);
      if (v20 >= v89)
        goto LABEL_28;
    }
    else
    {
      v73 = sub_100035EE0();
      v74 = v98;
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(&v107, &type metadata for Int, v73, a3, v6);
      v20 = (uint64_t)v96;
      v75 = dispatch thunk of static Comparable.< infix(_:_:)(v96, v74, a3, *(_QWORD *)(*(_QWORD *)(v6 + 32) + 8));
      v30(v74, a3);
      v30((char *)v20, a3);
      if ((v75 & 1) == 0)
        goto LABEL_28;
    }
LABEL_62:
    __break(1u);
LABEL_63:
    v80 = AssociatedTypeWitness;
    v81 = swift_getAssociatedConformanceWitness(v94, a3, AssociatedTypeWitness, &protocol requirements base descriptor for ExpressibleByIntegerLiteral, &associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
    dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)(&unk_10033A248, 256, v80, v81);
    v82 = v98;
    dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)(v93, a3, v94);
    v57 = dispatch thunk of static Comparable.< infix(_:_:)(v23, v82, a3, *(_QWORD *)(*(_QWORD *)(v6 + 32) + 8));
    v30(v82, a3);
    (*(void (**)(char *, uint64_t, uint64_t))(v97 + 32))(v14, v23, a3);
    if ((v57 & 1) != 0)
      goto LABEL_70;
    v83 = v107;
    v57 = dispatch thunk of BinaryInteger._lowWord.getter(a3, v6);
    v30(v14, a3);
    v32 = v105;
    if (v57 < v83)
      goto LABEL_71;
  }
  if (v72 < 64)
  {
    v79 = v96;
    v20 = dispatch thunk of BinaryInteger._lowWord.getter(a3, v6);
    v50 = v79;
LABEL_61:
    v30(v50, a3);
    if (v20 >= v107)
      goto LABEL_28;
    goto LABEL_62;
  }
  v30(v96, a3);
LABEL_28:
  v51 = dispatch thunk of BinaryInteger.bitWidth.getter(a3, v6);
  v52 = v100;
  v28(v100, (uint64_t)v14, a3);
  if (v51 >= 65)
  {
    v30(v52, a3);
    goto LABEL_30;
  }
  v60 = dispatch thunk of BinaryInteger.bitWidth.getter(a3, v6);
  v30(v52, a3);
  if (v60 == 64 && (dispatch thunk of static BinaryInteger.isSigned.getter(a3, v6) & 1) == 0)
  {
LABEL_30:
    v28(v27, (uint64_t)v14, a3);
    v107 = 0x7FFFFFFFFFFFFFFFLL;
    v53 = dispatch thunk of static BinaryInteger.isSigned.getter(a3, v6);
    v54 = dispatch thunk of BinaryInteger.bitWidth.getter(a3, v6);
    if ((v53 & 1) != 0)
    {
      if (v54 > 64)
      {
        v55 = sub_100035EE0();
        v56 = v98;
        v57 = a3;
        dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(&v107, &type metadata for Int, v55, a3, v6);
        v58 = dispatch thunk of static Comparable.< infix(_:_:)(v56, v27, a3, *(_QWORD *)(*(_QWORD *)(v6 + 32) + 8));
        v30(v56, a3);
        v59 = v27;
LABEL_39:
        v30(v59, a3);
        if ((v58 & 1) == 0)
          goto LABEL_40;
        __break(1u);
LABEL_70:
        v30(v14, a3);
        goto LABEL_71;
      }
    }
    else if (v54 > 63)
    {
      v106 = 0x7FFFFFFFFFFFFFFFLL;
      v61 = v98;
      (*(void (**)(char *, char *, uint64_t))(v97 + 32))(v98, v27, a3);
      v62 = sub_100035EE0();
      v63 = v95;
      v57 = a3;
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(&v106, &type metadata for Int, v62, a3, v6);
      v58 = dispatch thunk of static Comparable.< infix(_:_:)(v63, v61, a3, *(_QWORD *)(*(_QWORD *)(v6 + 32) + 8));
      v30(v63, a3);
      v59 = v61;
      goto LABEL_39;
    }
    dispatch thunk of BinaryInteger._lowWord.getter(a3, v6);
    v30(v27, a3);
  }
LABEL_40:
  v64 = dispatch thunk of BinaryInteger._lowWord.getter(a3, v6);
  result = ((uint64_t (*)(char *, uint64_t))v30)(v14, a3);
  v66 = v64 & 7;
  if (v64 <= 0)
    v66 = -(-v64 & 7);
  if ((v66 & 0x8000000000000000) == 0)
  {
    *(_BYTE *)(v99 + v23 / 8) |= 1 << v66;
    return result;
  }
LABEL_73:
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
  __break(1u);
  return result;
}

uint64_t UnsafeMutablePointer<A>.clear<A>(bit:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  void (*v28)(char *, uint64_t, uint64_t);
  uint64_t v29;
  void (*v30)(char *, uint64_t);
  char *v31;
  char *v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  char v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  unint64_t v43;
  char v44;
  char *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  char *v52;
  char v53;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  uint64_t v57;
  char v58;
  char *v59;
  uint64_t v60;
  char *v61;
  unint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t result;
  uint64_t v66;
  char v67;
  uint64_t v68;
  unint64_t v69;
  char *v70;
  char v71;
  uint64_t v72;
  unint64_t v73;
  char *v74;
  char v75;
  unint64_t v76;
  char *v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  int64_t v83;
  uint64_t v84;
  uint64_t AssociatedConformanceWitness;
  char *v86;
  char *v87;
  char *v88;
  int64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t AssociatedTypeWitness;
  char *v93;
  uint64_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  char *v103;
  char *v104;
  char *v105;
  uint64_t v106;
  int64_t v107;

  v99 = a2;
  v6 = *(_QWORD *)(a4 + 8);
  v94 = *(_QWORD *)(*(_QWORD *)(v6 + 24) + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v94, a3, &protocol requirements base descriptor for ExpressibleByIntegerLiteral);
  __chkstk_darwin();
  v93 = (char *)&v90 - v7;
  v8 = *(_QWORD *)(a3 - 8);
  __chkstk_darwin();
  v91 = (char *)&v90 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v103 = (char *)&v90 - v10;
  __chkstk_darwin();
  v100 = (char *)&v90 - v11;
  __chkstk_darwin();
  v96 = (char *)&v90 - v12;
  __chkstk_darwin();
  v14 = (char *)&v90 - v13;
  __chkstk_darwin();
  v95 = (char *)&v90 - v15;
  __chkstk_darwin();
  v101 = (char *)&v90 - v16;
  __chkstk_darwin();
  v104 = (char *)&v90 - v17;
  __chkstk_darwin();
  v105 = (char *)&v90 - v18;
  __chkstk_darwin();
  v20 = (uint64_t)&v90 - v19;
  __chkstk_darwin();
  v98 = (char *)&v90 - v21;
  __chkstk_darwin();
  v23 = (uint64_t)&v90 - v22;
  __chkstk_darwin();
  v25 = (char *)&v90 - v24;
  __chkstk_darwin();
  v27 = (char *)&v90 - v26;
  v28 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v102 = a1;
  v28((char *)&v90 - v26, a1, a3);
  LOBYTE(a1) = dispatch thunk of static BinaryInteger.isSigned.getter(a3, v6);
  v28(v25, (uint64_t)v27, a3);
  v97 = v8;
  if ((a1 & 1) == 0)
  {
    v30 = *(void (**)(char *, uint64_t))(v8 + 8);
    v31 = v25;
LABEL_7:
    v30(v31, a3);
    goto LABEL_8;
  }
  v29 = dispatch thunk of BinaryInteger.bitWidth.getter(a3, v6);
  v30 = *(void (**)(char *, uint64_t))(v8 + 8);
  v30(v25, a3);
  if (v29 <= 64)
  {
LABEL_8:
    v32 = v105;
    goto LABEL_9;
  }
  v28((char *)v23, (uint64_t)v27, a3);
  v107 = 0x8000000000000000;
  if ((dispatch thunk of static BinaryInteger.isSigned.getter(a3, v6) & 1) == 0)
  {
    v67 = dispatch thunk of static BinaryInteger.isSigned.getter(a3, v6);
    v68 = dispatch thunk of BinaryInteger.bitWidth.getter(a3, v6);
    if ((v67 & 1) != 0)
    {
      if (v68 <= 64)
        goto LABEL_63;
LABEL_46:
      v69 = sub_100035EE0();
      v70 = v98;
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(&v107, &type metadata for Int, v69, a3, v6);
      v57 = dispatch thunk of static Comparable.< infix(_:_:)(v23, v70, a3, *(_QWORD *)(*(_QWORD *)(v6 + 32) + 8));
      v30(v70, a3);
      v30((char *)v23, a3);
      v32 = v105;
      if ((v57 & 1) == 0)
        goto LABEL_9;
LABEL_71:
      __break(1u);
LABEL_72:
      v30((char *)v57, a3);
      __break(1u);
      goto LABEL_73;
    }
    if (v68 < 64)
      goto LABEL_54;
    v31 = (char *)v23;
    goto LABEL_7;
  }
  if (dispatch thunk of BinaryInteger.bitWidth.getter(a3, v6) >= 64)
    goto LABEL_46;
LABEL_54:
  v57 = dispatch thunk of BinaryInteger._lowWord.getter(a3, v6);
  v30((char *)v23, a3);
  v32 = v105;
  if (v57 < v107)
    goto LABEL_71;
  while (1)
  {
LABEL_9:
    v33 = dispatch thunk of BinaryInteger.bitWidth.getter(a3, v6);
    v28((char *)v20, (uint64_t)v27, a3);
    if (v33 < 65)
    {
      v40 = dispatch thunk of BinaryInteger.bitWidth.getter(a3, v6);
      v30((char *)v20, a3);
      if (v40 != 64 || (dispatch thunk of static BinaryInteger.isSigned.getter(a3, v6) & 1) != 0)
        goto LABEL_22;
    }
    else
    {
      v30((char *)v20, a3);
    }
    v28(v32, (uint64_t)v27, a3);
    v107 = 0x7FFFFFFFFFFFFFFFLL;
    v34 = dispatch thunk of static BinaryInteger.isSigned.getter(a3, v6);
    v35 = dispatch thunk of BinaryInteger.bitWidth.getter(a3, v6);
    if ((v34 & 1) != 0)
    {
      if (v35 > 64)
      {
        v36 = sub_100035EE0();
        v37 = v98;
        dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(&v107, &type metadata for Int, v36, a3, v6);
        v38 = dispatch thunk of static Comparable.< infix(_:_:)(v37, v32, a3, *(_QWORD *)(*(_QWORD *)(v6 + 32) + 8));
        v30(v37, a3);
        v39 = v32;
        goto LABEL_21;
      }
LABEL_18:
      v41 = dispatch thunk of BinaryInteger._lowWord.getter(a3, v6);
      v30(v32, a3);
      if (v107 >= v41)
        goto LABEL_22;
      goto LABEL_19;
    }
    if (v35 <= 63)
      goto LABEL_18;
    while (1)
    {
      v106 = 0x7FFFFFFFFFFFFFFFLL;
      v42 = v98;
      (*(void (**)(char *, char *, uint64_t))(v97 + 32))(v98, v32, a3);
      v43 = sub_100035EE0();
      v32 = v95;
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(&v106, &type metadata for Int, v43, a3, v6);
      v38 = dispatch thunk of static Comparable.< infix(_:_:)(v32, v42, a3, *(_QWORD *)(*(_QWORD *)(v6 + 32) + 8));
      v30(v32, a3);
      v39 = v42;
LABEL_21:
      v30(v39, a3);
      if ((v38 & 1) == 0)
        break;
LABEL_19:
      __break(1u);
    }
LABEL_22:
    v23 = dispatch thunk of BinaryInteger._lowWord.getter(a3, v6);
    v30(v27, a3);
    v14 = v104;
    v28(v104, v102, a3);
    v44 = dispatch thunk of static BinaryInteger.isSigned.getter(a3, v6);
    v45 = v101;
    v28(v101, (uint64_t)v14, a3);
    if ((v44 & 1) == 0)
    {
      v30(v45, a3);
      v27 = v103;
      goto LABEL_28;
    }
    v46 = dispatch thunk of BinaryInteger.bitWidth.getter(a3, v6);
    v30(v45, a3);
    v27 = v103;
    if (v46 <= 64)
      goto LABEL_28;
    v47 = v96;
    v28(v96, (uint64_t)v14, a3);
    v107 = 0x8000000000000000;
    if ((dispatch thunk of static BinaryInteger.isSigned.getter(a3, v6) & 1) != 0)
    {
      if (dispatch thunk of BinaryInteger.bitWidth.getter(a3, v6) >= 64)
      {
        v76 = sub_100035EE0();
        v77 = v98;
        dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(&v107, &type metadata for Int, v76, a3, v6);
        v78 = v47;
        v20 = dispatch thunk of static Comparable.< infix(_:_:)(v47, v77, a3, *(_QWORD *)(*(_QWORD *)(v6 + 32) + 8));
        v30(v77, a3);
        v30(v78, a3);
        if ((v20 & 1) == 0)
          goto LABEL_28;
        goto LABEL_62;
      }
      v48 = dispatch thunk of BinaryInteger._lowWord.getter(a3, v6);
      v49 = v47;
      v20 = v48;
      v50 = v49;
      goto LABEL_61;
    }
    v71 = dispatch thunk of static BinaryInteger.isSigned.getter(a3, v6);
    v72 = dispatch thunk of BinaryInteger.bitWidth.getter(a3, v6);
    if ((v71 & 1) == 0)
      break;
    if (v72 <= 64)
    {
      v84 = AssociatedTypeWitness;
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v94, a3, AssociatedTypeWitness, &protocol requirements base descriptor for ExpressibleByIntegerLiteral, &associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
      v86 = v93;
      dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)(&unk_10033A248, 256, v84, AssociatedConformanceWitness);
      v87 = v98;
      dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)(v86, a3, v94);
      v88 = v96;
      LODWORD(v105) = dispatch thunk of static Comparable.< infix(_:_:)(v96, v87, a3, *(_QWORD *)(*(_QWORD *)(v6 + 32) + 8));
      v30(v87, a3);
      v57 = (uint64_t)v91;
      (*(void (**)(char *, char *, uint64_t))(v97 + 32))(v91, v88, a3);
      if ((v105 & 1) != 0)
        goto LABEL_72;
      v89 = v107;
      v20 = dispatch thunk of BinaryInteger._lowWord.getter(a3, v6);
      v30((char *)v57, a3);
      if (v20 >= v89)
        goto LABEL_28;
    }
    else
    {
      v73 = sub_100035EE0();
      v74 = v98;
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(&v107, &type metadata for Int, v73, a3, v6);
      v20 = (uint64_t)v96;
      v75 = dispatch thunk of static Comparable.< infix(_:_:)(v96, v74, a3, *(_QWORD *)(*(_QWORD *)(v6 + 32) + 8));
      v30(v74, a3);
      v30((char *)v20, a3);
      if ((v75 & 1) == 0)
        goto LABEL_28;
    }
LABEL_62:
    __break(1u);
LABEL_63:
    v80 = AssociatedTypeWitness;
    v81 = swift_getAssociatedConformanceWitness(v94, a3, AssociatedTypeWitness, &protocol requirements base descriptor for ExpressibleByIntegerLiteral, &associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
    dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)(&unk_10033A248, 256, v80, v81);
    v82 = v98;
    dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)(v93, a3, v94);
    v57 = dispatch thunk of static Comparable.< infix(_:_:)(v23, v82, a3, *(_QWORD *)(*(_QWORD *)(v6 + 32) + 8));
    v30(v82, a3);
    (*(void (**)(char *, uint64_t, uint64_t))(v97 + 32))(v14, v23, a3);
    if ((v57 & 1) != 0)
      goto LABEL_70;
    v83 = v107;
    v57 = dispatch thunk of BinaryInteger._lowWord.getter(a3, v6);
    v30(v14, a3);
    v32 = v105;
    if (v57 < v83)
      goto LABEL_71;
  }
  if (v72 < 64)
  {
    v79 = v96;
    v20 = dispatch thunk of BinaryInteger._lowWord.getter(a3, v6);
    v50 = v79;
LABEL_61:
    v30(v50, a3);
    if (v20 >= v107)
      goto LABEL_28;
    goto LABEL_62;
  }
  v30(v96, a3);
LABEL_28:
  v51 = dispatch thunk of BinaryInteger.bitWidth.getter(a3, v6);
  v52 = v100;
  v28(v100, (uint64_t)v14, a3);
  if (v51 >= 65)
  {
    v30(v52, a3);
    goto LABEL_30;
  }
  v60 = dispatch thunk of BinaryInteger.bitWidth.getter(a3, v6);
  v30(v52, a3);
  if (v60 == 64 && (dispatch thunk of static BinaryInteger.isSigned.getter(a3, v6) & 1) == 0)
  {
LABEL_30:
    v28(v27, (uint64_t)v14, a3);
    v107 = 0x7FFFFFFFFFFFFFFFLL;
    v53 = dispatch thunk of static BinaryInteger.isSigned.getter(a3, v6);
    v54 = dispatch thunk of BinaryInteger.bitWidth.getter(a3, v6);
    if ((v53 & 1) != 0)
    {
      if (v54 > 64)
      {
        v55 = sub_100035EE0();
        v56 = v98;
        v57 = a3;
        dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(&v107, &type metadata for Int, v55, a3, v6);
        v58 = dispatch thunk of static Comparable.< infix(_:_:)(v56, v27, a3, *(_QWORD *)(*(_QWORD *)(v6 + 32) + 8));
        v30(v56, a3);
        v59 = v27;
LABEL_39:
        v30(v59, a3);
        if ((v58 & 1) == 0)
          goto LABEL_40;
        __break(1u);
LABEL_70:
        v30(v14, a3);
        goto LABEL_71;
      }
    }
    else if (v54 > 63)
    {
      v106 = 0x7FFFFFFFFFFFFFFFLL;
      v61 = v98;
      (*(void (**)(char *, char *, uint64_t))(v97 + 32))(v98, v27, a3);
      v62 = sub_100035EE0();
      v63 = v95;
      v57 = a3;
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(&v106, &type metadata for Int, v62, a3, v6);
      v58 = dispatch thunk of static Comparable.< infix(_:_:)(v63, v61, a3, *(_QWORD *)(*(_QWORD *)(v6 + 32) + 8));
      v30(v63, a3);
      v59 = v61;
      goto LABEL_39;
    }
    dispatch thunk of BinaryInteger._lowWord.getter(a3, v6);
    v30(v27, a3);
  }
LABEL_40:
  v64 = dispatch thunk of BinaryInteger._lowWord.getter(a3, v6);
  result = ((uint64_t (*)(char *, uint64_t))v30)(v14, a3);
  v66 = v64 & 7;
  if (v64 <= 0)
    v66 = -(-v64 & 7);
  if ((v66 & 0x8000000000000000) == 0)
  {
    *(_BYTE *)(v99 + v23 / 8) &= (-1 << v66) - 1;
    return result;
  }
LABEL_73:
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
  __break(1u);
  return result;
}

uint64_t UnsafePointer<A>.contains<A>(bit:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  void (*v28)(char *, uint64_t, uint64_t);
  uint64_t v29;
  void (*v30)(char *, uint64_t);
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  char v39;
  char *v40;
  uint64_t v41;
  char *v42;
  unint64_t v43;
  char v44;
  char *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  char *v52;
  char v53;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  uint64_t v57;
  char v58;
  char *v59;
  uint64_t v60;
  char *v61;
  unint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t result;
  char v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  char v72;
  uint64_t v73;
  unint64_t v74;
  char *v75;
  char v76;
  unint64_t v77;
  char *v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  int64_t v84;
  uint64_t v85;
  uint64_t AssociatedConformanceWitness;
  char *v87;
  char *v88;
  char *v89;
  int64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t AssociatedTypeWitness;
  char *v94;
  uint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  char *v104;
  char *v105;
  char *v106;
  uint64_t v107;
  int64_t v108;

  v100 = a2;
  v6 = *(_QWORD *)(a4 + 8);
  v95 = *(_QWORD *)(*(_QWORD *)(v6 + 24) + 16);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v95, a3, &protocol requirements base descriptor for ExpressibleByIntegerLiteral);
  __chkstk_darwin();
  v94 = (char *)&v91 - v7;
  v8 = *(_QWORD *)(a3 - 8);
  __chkstk_darwin();
  v92 = (char *)&v91 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v104 = (char *)&v91 - v10;
  __chkstk_darwin();
  v101 = (char *)&v91 - v11;
  __chkstk_darwin();
  v97 = (char *)&v91 - v12;
  __chkstk_darwin();
  v14 = (char *)&v91 - v13;
  __chkstk_darwin();
  v96 = (char *)&v91 - v15;
  __chkstk_darwin();
  v102 = (char *)&v91 - v16;
  __chkstk_darwin();
  v105 = (char *)&v91 - v17;
  __chkstk_darwin();
  v106 = (char *)&v91 - v18;
  __chkstk_darwin();
  v20 = (uint64_t)&v91 - v19;
  __chkstk_darwin();
  v99 = (char *)&v91 - v21;
  __chkstk_darwin();
  v23 = (uint64_t)&v91 - v22;
  __chkstk_darwin();
  v25 = (char *)&v91 - v24;
  __chkstk_darwin();
  v27 = (char *)&v91 - v26;
  v28 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v103 = a1;
  v28((char *)&v91 - v26, a1, a3);
  LOBYTE(a1) = dispatch thunk of static BinaryInteger.isSigned.getter(a3, v6);
  v28(v25, (uint64_t)v27, a3);
  v98 = v8;
  if ((a1 & 1) == 0)
  {
    v30 = *(void (**)(char *, uint64_t))(v8 + 8);
    v31 = v25;
LABEL_7:
    v30(v31, a3);
    goto LABEL_8;
  }
  v29 = dispatch thunk of BinaryInteger.bitWidth.getter(a3, v6);
  v30 = *(void (**)(char *, uint64_t))(v8 + 8);
  v30(v25, a3);
  if (v29 <= 64)
  {
LABEL_8:
    v32 = v106;
    goto LABEL_9;
  }
  v28((char *)v23, (uint64_t)v27, a3);
  v108 = 0x8000000000000000;
  if ((dispatch thunk of static BinaryInteger.isSigned.getter(a3, v6) & 1) == 0)
  {
    v68 = dispatch thunk of static BinaryInteger.isSigned.getter(a3, v6);
    v69 = dispatch thunk of BinaryInteger.bitWidth.getter(a3, v6);
    if ((v68 & 1) != 0)
    {
      if (v69 <= 64)
        goto LABEL_64;
LABEL_47:
      v70 = sub_100035EE0();
      v71 = v99;
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(&v108, &type metadata for Int, v70, a3, v6);
      v57 = dispatch thunk of static Comparable.< infix(_:_:)(v23, v71, a3, *(_QWORD *)(*(_QWORD *)(v6 + 32) + 8));
      v30(v71, a3);
      v30((char *)v23, a3);
      v32 = v106;
      if ((v57 & 1) == 0)
        goto LABEL_9;
      goto LABEL_72;
    }
    if (v69 < 64)
      goto LABEL_55;
    v31 = (char *)v23;
    goto LABEL_7;
  }
  if (dispatch thunk of BinaryInteger.bitWidth.getter(a3, v6) >= 64)
    goto LABEL_47;
LABEL_55:
  v57 = dispatch thunk of BinaryInteger._lowWord.getter(a3, v6);
  v30((char *)v23, a3);
  v32 = v106;
  if (v57 < v108)
    goto LABEL_72;
  while (1)
  {
LABEL_9:
    v33 = dispatch thunk of BinaryInteger.bitWidth.getter(a3, v6);
    v28((char *)v20, (uint64_t)v27, a3);
    if (v33 < 65)
    {
      v34 = dispatch thunk of BinaryInteger.bitWidth.getter(a3, v6);
      v30((char *)v20, a3);
      if (v34 != 64 || (dispatch thunk of static BinaryInteger.isSigned.getter(a3, v6) & 1) != 0)
        goto LABEL_21;
    }
    else
    {
      v30((char *)v20, a3);
    }
    v28(v32, (uint64_t)v27, a3);
    v108 = 0x7FFFFFFFFFFFFFFFLL;
    v35 = dispatch thunk of static BinaryInteger.isSigned.getter(a3, v6);
    v36 = dispatch thunk of BinaryInteger.bitWidth.getter(a3, v6);
    if ((v35 & 1) != 0)
    {
      if (v36 > 64)
      {
        v37 = sub_100035EE0();
        v38 = v99;
        dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(&v108, &type metadata for Int, v37, a3, v6);
        v39 = dispatch thunk of static Comparable.< infix(_:_:)(v38, v32, a3, *(_QWORD *)(*(_QWORD *)(v6 + 32) + 8));
        v30(v38, a3);
        v40 = v32;
        goto LABEL_20;
      }
LABEL_17:
      v41 = dispatch thunk of BinaryInteger._lowWord.getter(a3, v6);
      v30(v32, a3);
      if (v108 >= v41)
        goto LABEL_21;
      goto LABEL_18;
    }
    if (v36 <= 63)
      goto LABEL_17;
    while (1)
    {
      v107 = 0x7FFFFFFFFFFFFFFFLL;
      v42 = v99;
      (*(void (**)(char *, char *, uint64_t))(v98 + 32))(v99, v32, a3);
      v43 = sub_100035EE0();
      v32 = v96;
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(&v107, &type metadata for Int, v43, a3, v6);
      v39 = dispatch thunk of static Comparable.< infix(_:_:)(v32, v42, a3, *(_QWORD *)(*(_QWORD *)(v6 + 32) + 8));
      v30(v32, a3);
      v40 = v42;
LABEL_20:
      v30(v40, a3);
      if ((v39 & 1) == 0)
        break;
LABEL_18:
      __break(1u);
    }
LABEL_21:
    v23 = dispatch thunk of BinaryInteger._lowWord.getter(a3, v6);
    v30(v27, a3);
    v14 = v105;
    v28(v105, v103, a3);
    v44 = dispatch thunk of static BinaryInteger.isSigned.getter(a3, v6);
    v45 = v102;
    v28(v102, (uint64_t)v14, a3);
    if ((v44 & 1) == 0)
    {
      v30(v45, a3);
      v27 = v104;
      goto LABEL_27;
    }
    v46 = dispatch thunk of BinaryInteger.bitWidth.getter(a3, v6);
    v30(v45, a3);
    v27 = v104;
    if (v46 <= 64)
      goto LABEL_27;
    v47 = v97;
    v28(v97, (uint64_t)v14, a3);
    v108 = 0x8000000000000000;
    if ((dispatch thunk of static BinaryInteger.isSigned.getter(a3, v6) & 1) != 0)
    {
      if (dispatch thunk of BinaryInteger.bitWidth.getter(a3, v6) >= 64)
      {
        v77 = sub_100035EE0();
        v78 = v99;
        dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(&v108, &type metadata for Int, v77, a3, v6);
        v79 = v47;
        v20 = dispatch thunk of static Comparable.< infix(_:_:)(v47, v78, a3, *(_QWORD *)(*(_QWORD *)(v6 + 32) + 8));
        v30(v78, a3);
        v30(v79, a3);
        if ((v20 & 1) == 0)
          goto LABEL_27;
        goto LABEL_63;
      }
      v48 = dispatch thunk of BinaryInteger._lowWord.getter(a3, v6);
      v49 = v47;
      v20 = v48;
      v50 = v49;
      goto LABEL_62;
    }
    v72 = dispatch thunk of static BinaryInteger.isSigned.getter(a3, v6);
    v73 = dispatch thunk of BinaryInteger.bitWidth.getter(a3, v6);
    if ((v72 & 1) == 0)
      break;
    if (v73 <= 64)
    {
      v85 = AssociatedTypeWitness;
      AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v95, a3, AssociatedTypeWitness, &protocol requirements base descriptor for ExpressibleByIntegerLiteral, &associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
      v87 = v94;
      dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)(&unk_10033A248, 256, v85, AssociatedConformanceWitness);
      v88 = v99;
      dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)(v87, a3, v95);
      v89 = v97;
      LODWORD(v106) = dispatch thunk of static Comparable.< infix(_:_:)(v97, v88, a3, *(_QWORD *)(*(_QWORD *)(v6 + 32) + 8));
      v30(v88, a3);
      v57 = (uint64_t)v92;
      (*(void (**)(char *, char *, uint64_t))(v98 + 32))(v92, v89, a3);
      if ((v106 & 1) != 0)
        goto LABEL_73;
      v90 = v108;
      v20 = dispatch thunk of BinaryInteger._lowWord.getter(a3, v6);
      v30((char *)v57, a3);
      if (v20 >= v90)
        goto LABEL_27;
    }
    else
    {
      v74 = sub_100035EE0();
      v75 = v99;
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(&v108, &type metadata for Int, v74, a3, v6);
      v20 = (uint64_t)v97;
      v76 = dispatch thunk of static Comparable.< infix(_:_:)(v97, v75, a3, *(_QWORD *)(*(_QWORD *)(v6 + 32) + 8));
      v30(v75, a3);
      v30((char *)v20, a3);
      if ((v76 & 1) == 0)
        goto LABEL_27;
    }
LABEL_63:
    __break(1u);
LABEL_64:
    v81 = AssociatedTypeWitness;
    v82 = swift_getAssociatedConformanceWitness(v95, a3, AssociatedTypeWitness, &protocol requirements base descriptor for ExpressibleByIntegerLiteral, &associated conformance descriptor for ExpressibleByIntegerLiteral.ExpressibleByIntegerLiteral.IntegerLiteralType: _ExpressibleByBuiltinIntegerLiteral);
    dispatch thunk of _ExpressibleByBuiltinIntegerLiteral.init(_builtinIntegerLiteral:)(&unk_10033A248, 256, v81, v82);
    v83 = v99;
    dispatch thunk of ExpressibleByIntegerLiteral.init(integerLiteral:)(v94, a3, v95);
    v57 = dispatch thunk of static Comparable.< infix(_:_:)(v23, v83, a3, *(_QWORD *)(*(_QWORD *)(v6 + 32) + 8));
    v30(v83, a3);
    (*(void (**)(char *, uint64_t, uint64_t))(v98 + 32))(v14, v23, a3);
    if ((v57 & 1) != 0)
      goto LABEL_71;
    v84 = v108;
    v57 = dispatch thunk of BinaryInteger._lowWord.getter(a3, v6);
    v30(v14, a3);
    v32 = v106;
    if (v57 < v84)
      goto LABEL_72;
  }
  if (v73 < 64)
  {
    v80 = v97;
    v20 = dispatch thunk of BinaryInteger._lowWord.getter(a3, v6);
    v50 = v80;
LABEL_62:
    v30(v50, a3);
    if (v20 >= v108)
      goto LABEL_27;
    goto LABEL_63;
  }
  v30(v97, a3);
LABEL_27:
  v51 = dispatch thunk of BinaryInteger.bitWidth.getter(a3, v6);
  v52 = v101;
  v28(v101, (uint64_t)v14, a3);
  if (v51 >= 65)
  {
    v30(v52, a3);
    goto LABEL_29;
  }
  v60 = dispatch thunk of BinaryInteger.bitWidth.getter(a3, v6);
  v30(v52, a3);
  if (v60 != 64 || (dispatch thunk of static BinaryInteger.isSigned.getter(a3, v6) & 1) != 0)
  {
LABEL_39:
    v64 = dispatch thunk of BinaryInteger._lowWord.getter(a3, v6);
    v30(v14, a3);
    v65 = v64 & 7;
    if (v64 <= 0)
      v65 = -(-v64 & 7);
    if (v65 >= 0)
      v66 = 1 << v65;
    else
      v66 = 0;
    return (v66 & (*(unsigned __int8 *)(v100 + v23 / 8) ^ 0xFF)) == 0;
  }
LABEL_29:
  v28(v27, (uint64_t)v14, a3);
  v108 = 0x7FFFFFFFFFFFFFFFLL;
  v53 = dispatch thunk of static BinaryInteger.isSigned.getter(a3, v6);
  v54 = dispatch thunk of BinaryInteger.bitWidth.getter(a3, v6);
  if ((v53 & 1) != 0)
  {
    if (v54 > 64)
    {
      v55 = sub_100035EE0();
      v56 = v99;
      v57 = a3;
      dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(&v108, &type metadata for Int, v55, a3, v6);
      v58 = dispatch thunk of static Comparable.< infix(_:_:)(v56, v27, a3, *(_QWORD *)(*(_QWORD *)(v6 + 32) + 8));
      v30(v56, a3);
      v59 = v27;
      goto LABEL_38;
    }
LABEL_36:
    dispatch thunk of BinaryInteger._lowWord.getter(a3, v6);
    v30(v27, a3);
    goto LABEL_39;
  }
  if (v54 <= 63)
    goto LABEL_36;
  v107 = 0x7FFFFFFFFFFFFFFFLL;
  v61 = v99;
  (*(void (**)(char *, char *, uint64_t))(v98 + 32))(v99, v27, a3);
  v62 = sub_100035EE0();
  v63 = v96;
  v57 = a3;
  dispatch thunk of BinaryInteger.init<A>(truncatingIfNeeded:)(&v107, &type metadata for Int, v62, a3, v6);
  v58 = dispatch thunk of static Comparable.< infix(_:_:)(v63, v61, a3, *(_QWORD *)(*(_QWORD *)(v6 + 32) + 8));
  v30(v63, a3);
  v59 = v61;
LABEL_38:
  v30(v59, a3);
  if ((v58 & 1) == 0)
    goto LABEL_39;
  __break(1u);
LABEL_71:
  v30(v14, a3);
LABEL_72:
  __break(1u);
LABEL_73:
  result = ((uint64_t (*)(uint64_t, uint64_t))v30)(v57, a3);
  __break(1u);
  return result;
}

uint64_t NANServiceConfiguration.description.getter(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t MetatypeMetadata;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  Swift::String v12;
  uint64_t v13;
  void *v14;
  Swift::String v15;
  uint64_t v17;
  unint64_t v18;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a2, a1, &protocol requirements base descriptor for NANServiceConfiguration, &associated type descriptor for NANServiceConfiguration.Identifier);
  v5 = *(_QWORD *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  v7 = (char *)&v17 - v6;
  v17 = a1;
  MetatypeMetadata = swift_getMetatypeMetadata(a1);
  v9 = String.init<A>(describing:)(&v17, MetatypeMetadata);
  v11 = v10;
  v17 = 0;
  v18 = 0xE000000000000000;
  v12._countAndFlagsBits = 32;
  v12._object = (void *)0xE100000000000000;
  String.append(_:)(v12);
  (*(void (**)(uint64_t, uint64_t))(a2 + 56))(a1, a2);
  DefaultStringInterpolation.appendInterpolation<A>(_:)(v7, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, AssociatedTypeWitness);
  v13 = v17;
  v14 = (void *)v18;
  v17 = v9;
  v18 = v11;
  swift_bridgeObjectRetain(v11);
  v15._countAndFlagsBits = v13;
  v15._object = v14;
  String.append(_:)(v15);
  swift_bridgeObjectRelease(v11);
  swift_bridgeObjectRelease(v14);
  return v17;
}

uint64_t NANDiscoveryServiceConfiguration.identifier.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a2 + 8) + 40))();
}

void NANService.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t AssociatedConformanceWitness;
  uint64_t v10;

  v3 = a3;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a3, a2, &protocol requirements base descriptor for NANService, &associated type descriptor for NANService.Configuration);
  v6 = *(_QWORD *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  v8 = (char *)&v10 - v7;
  (*(void (**)(uint64_t, uint64_t))(v3 + 64))(a2, v3);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v3, a2, AssociatedTypeWitness, &protocol requirements base descriptor for NANService, &associated conformance descriptor for NANService.NANService.Configuration: NANServiceConfiguration);
  LOBYTE(v3) = (*(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 40))(AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, AssociatedTypeWitness);
  Hasher._combine(_:)(v3);
}

BOOL static NANService.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  _BYTE *v12;
  void (*v13)(uint64_t, uint64_t);
  uint64_t AssociatedConformanceWitness;
  uint64_t (*v15)(uint64_t, uint64_t);
  void (*v16)(_BYTE *, uint64_t);
  _BYTE v18[4];
  int v19;
  uint64_t v20;

  v4 = a4;
  v20 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a4, a3, &protocol requirements base descriptor for NANService, &associated type descriptor for NANService.Configuration);
  v7 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v8 = __chkstk_darwin(AssociatedTypeWitness);
  v10 = &v18[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v8);
  v12 = &v18[-v11];
  v13 = *(void (**)(uint64_t, uint64_t))(v4 + 64);
  v13(a3, v4);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v4, a3, AssociatedTypeWitness, &protocol requirements base descriptor for NANService, &associated conformance descriptor for NANService.NANService.Configuration: NANServiceConfiguration);
  v15 = *(uint64_t (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 40);
  LOBYTE(v19) = v15(AssociatedTypeWitness, AssociatedConformanceWitness);
  v19 = v19;
  v16 = *(void (**)(_BYTE *, uint64_t))(v7 + 8);
  v16(v12, AssociatedTypeWitness);
  v13(a3, v4);
  LOBYTE(v4) = v15(AssociatedTypeWitness, AssociatedConformanceWitness);
  v16(v10, AssociatedTypeWitness);
  return v19 == v4;
}

uint64_t NANBitmap.Channel.operatingClass.setter(uint64_t result)
{
  _BYTE *v1;

  *v1 = result;
  return result;
}

uint64_t NANDataManagementFrameTransferCompleteEvent.initiatorDataAddress.getter(unint64_t a1)
{
  return (a1 >> 8) & 0xFFFFFFFFFFFFLL;
}

uint64_t NANPeerServiceIdentifier.peerAddress.setter(uint64_t result)
{
  uint64_t v1;

  *(_WORD *)(v1 + 1) = result;
  *(_BYTE *)(v1 + 3) = BYTE2(result);
  *(_BYTE *)(v1 + 4) = BYTE3(result);
  *(_BYTE *)(v1 + 5) = BYTE4(result);
  *(_BYTE *)(v1 + 6) = BYTE5(result);
  return result;
}

uint64_t (*NonNANOperatingChannelInformation.channelNumber.modify())()
{
  return NANBitmap.Channel.operatingClass.getter;
}

void __swiftcall NANPeerServiceIdentifier.init(instanceID:peerAddress:)(CoreP2P::NANPeerServiceIdentifier *__return_ptr retstr, Swift::UInt8 instanceID, CoreP2P::WiFiAddress *peerAddress)
{
  ;
}

uint64_t NANPeerServiceIdentifier.description.getter(unint64_t a1)
{
  Swift::String v1;
  Swift::String v2;
  void *object;
  Swift::String v4;
  uint64_t v6;

  v6 = WiFiAddress.description.getter((a1 >> 8) & 0xFFFFFFFFFFFFLL);
  v1._countAndFlagsBits = 91;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  v2._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt8, &protocol witness table for UInt8);
  object = v2._object;
  String.append(_:)(v2);
  swift_bridgeObjectRelease(object);
  v4._countAndFlagsBits = 93;
  v4._object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  return v6;
}

void NANPeerServiceIdentifier.hash(into:)(int a1, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v2 = a2 >> 8;
  v3 = a2 >> 16;
  v4 = a2 >> 24;
  v5 = HIDWORD(a2);
  v6 = a2 >> 40;
  v7 = HIWORD(a2);
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
}

BOOL static NANPeerServiceIdentifier.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2)
{
  int v4;
  __int16 v5;
  int v6;
  __int16 v7;

  if (a1 != a2)
    return 0;
  LOBYTE(v6) = BYTE1(a1);
  BYTE1(v6) = BYTE2(a1);
  BYTE2(v6) = BYTE3(a1);
  HIBYTE(v6) = BYTE4(a1);
  LOBYTE(v7) = BYTE5(a1);
  HIBYTE(v7) = BYTE6(a1);
  LOBYTE(v4) = BYTE1(a2);
  BYTE1(v4) = BYTE2(a2);
  BYTE2(v4) = BYTE3(a2);
  HIBYTE(v4) = BYTE4(a2);
  LOBYTE(v5) = BYTE5(a2);
  HIBYTE(v5) = BYTE6(a2);
  return v6 == v4 && v7 == v5;
}

BOOL sub_100038DA0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

Swift::Int sub_100038DB8()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_100038DFC()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int sub_100038E24()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t sub_100038E64()
{
  _BYTE *v0;

  if (*v0)
    return 0x7264644172656570;
  else
    return 0x65636E6174736E69;
}

uint64_t sub_100038EAC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10003A504(a1, a2);
  *a3 = result;
  return result;
}

void sub_100038ED0(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_100038EDC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100039BF0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100038F04(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100039BF0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NANPeerServiceIdentifier.encode(to:)(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v14;
  char v15;
  _BYTE v16[6];
  char v17;

  v5 = sub_100012C44(&qword_100404F48);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin();
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10003259C(a1, v9);
  v11 = sub_100039BF0();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for NANPeerServiceIdentifier.CodingKeys, &type metadata for NANPeerServiceIdentifier.CodingKeys, v11, v9, v10);
  v17 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(a2, &v17, v5);
  if (!v2)
  {
    v16[0] = BYTE1(a2);
    v16[1] = BYTE2(a2);
    v16[2] = BYTE3(a2);
    v16[3] = BYTE4(a2);
    v16[4] = BYTE5(a2);
    v16[5] = BYTE6(a2);
    v15 = 1;
    v12 = sub_100039C34();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v16, &v15, v5, &type metadata for WiFiAddress, v12);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

Swift::Int NANPeerServiceIdentifier.hashValue.getter(unint64_t a1)
{
  Swift::UInt8 v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD v9[9];

  v1 = a1;
  v2 = a1 >> 8;
  v3 = a1 >> 16;
  v4 = a1 >> 24;
  v5 = HIDWORD(a1);
  v6 = a1 >> 40;
  v7 = HIWORD(a1);
  Hasher.init(_seed:)(v9);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  return Hasher._finalize()();
}

uint64_t NANPeerServiceIdentifier.init(from:)(_QWORD *a1)
{
  return sub_100039C78(a1) & 0xFFFFFFFFFFFFFFLL;
}

Swift::Int sub_100039154()
{
  Swift::UInt8 *v0;
  Swift::UInt8 v1;
  Swift::UInt8 v2;
  Swift::UInt8 v3;
  Swift::UInt8 v4;
  Swift::UInt8 v5;
  Swift::UInt8 v6;
  Swift::UInt8 v7;
  _QWORD v9[9];

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  v4 = v0[3];
  v5 = v0[4];
  v6 = v0[5];
  v7 = v0[6];
  Hasher.init(_seed:)(v9);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  return Hasher._finalize()();
}

void sub_100039210()
{
  Swift::UInt8 *v0;
  Swift::UInt8 v1;
  Swift::UInt8 v2;
  Swift::UInt8 v3;
  Swift::UInt8 v4;
  Swift::UInt8 v5;
  Swift::UInt8 v6;

  v1 = v0[1];
  v2 = v0[2];
  v3 = v0[3];
  v4 = v0[4];
  v5 = v0[5];
  v6 = v0[6];
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
}

Swift::Int sub_100039298()
{
  Swift::UInt8 *v0;
  Swift::UInt8 v1;
  Swift::UInt8 v2;
  Swift::UInt8 v3;
  Swift::UInt8 v4;
  Swift::UInt8 v5;
  Swift::UInt8 v6;
  Swift::UInt8 v7;
  _QWORD v9[9];

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  v4 = v0[3];
  v5 = v0[4];
  v6 = v0[5];
  v7 = v0[6];
  Hasher.init(_seed:)(v9);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  return Hasher._finalize()();
}

uint64_t sub_100039350()
{
  uint64_t v0;
  Swift::String v1;
  Swift::String v2;
  void *object;
  Swift::String v4;
  uint64_t v6;

  v6 = WiFiAddress.description.getter(*(unsigned __int16 *)(v0 + 1) | ((unint64_t)*(unsigned int *)(v0 + 3) << 16));
  v1._countAndFlagsBits = 91;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  v2._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt8, &protocol witness table for UInt8);
  object = v2._object;
  String.append(_:)(v2);
  swift_bridgeObjectRelease(object);
  v4._countAndFlagsBits = 93;
  v4._object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  return v6;
}

uint64_t sub_1000393DC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = sub_100039C78(a1);
  if (!v2)
  {
    *(_WORD *)a2 = result;
    *(_BYTE *)(a2 + 2) = BYTE2(result);
    *(_BYTE *)(a2 + 3) = BYTE3(result);
    *(_BYTE *)(a2 + 4) = BYTE4(result);
    *(_BYTE *)(a2 + 5) = BYTE5(result);
    *(_BYTE *)(a2 + 6) = BYTE6(result);
  }
  return result;
}

uint64_t sub_100039434(_QWORD *a1)
{
  unsigned __int16 *v1;

  return NANPeerServiceIdentifier.encode(to:)(a1, *v1 | ((unint64_t)*((unsigned __int8 *)v1 + 2) << 16) | ((unint64_t)*(unsigned int *)((char *)v1 + 3) << 24));
}

BOOL sub_10003945C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 != *a2)
    return 0;
  return *(_DWORD *)(a1 + 1) == *(_DWORD *)(a2 + 1) && *(unsigned __int16 *)(a1 + 5) == *(unsigned __int16 *)(a2 + 5);
}

void InternetSharingActivity.Role.hash(into:)(uint64_t a1, __int16 a2)
{
  Swift::UInt8 v2;

  if ((a2 & 0x100) != 0)
  {
    Hasher._combine(_:)(1uLL);
  }
  else
  {
    v2 = a2;
    Hasher._combine(_:)(0);
    Hasher._combine(_:)(v2);
  }
}

BOOL static InternetSharingActivity.Role.__derived_enum_equals(_:_:)(__int16 a1, __int16 a2)
{
  if ((a1 & 0x100) == 0)
  {
    if ((a2 & 0x100) == 0)
      return a1 == a2;
    return 0;
  }
  return (a2 & 0x100) != 0;
}

Swift::Int InternetSharingActivity.Role.hashValue.getter(__int16 a1)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3);
  if ((a1 & 0x100) != 0)
  {
    Hasher._combine(_:)(1uLL);
  }
  else
  {
    Hasher._combine(_:)(0);
    Hasher._combine(_:)(a1);
  }
  return Hasher._finalize()();
}

Swift::Int sub_1000395A8()
{
  Swift::UInt8 *v0;
  Swift::UInt8 v1;
  Swift::UInt8 v2;
  _QWORD v4[9];

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)(v4);
  if ((v2 & 1) != 0)
  {
    Hasher._combine(_:)(1uLL);
  }
  else
  {
    Hasher._combine(_:)(0);
    Hasher._combine(_:)(v1);
  }
  return Hasher._finalize()();
}

void sub_100039610()
{
  Swift::UInt8 *v0;
  Swift::UInt8 v1;

  if ((v0[1] & 1) != 0)
  {
    Hasher._combine(_:)(1uLL);
  }
  else
  {
    v1 = *v0;
    Hasher._combine(_:)(0);
    Hasher._combine(_:)(v1);
  }
}

Swift::Int sub_100039658()
{
  Swift::UInt8 *v0;
  Swift::UInt8 v1;
  Swift::UInt8 v2;
  _QWORD v4[9];

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)(v4);
  if ((v2 & 1) != 0)
  {
    Hasher._combine(_:)(1uLL);
  }
  else
  {
    Hasher._combine(_:)(0);
    Hasher._combine(_:)(v1);
  }
  return Hasher._finalize()();
}

uint64_t sub_1000396BC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v3;
  uint64_t result;

  v3 = a1[1];
  result = a2[1];
  if ((v3 & 1) == 0)
    return (*a1 == *a2) & ~(_DWORD)result;
  return result;
}

uint64_t InternetSharingActivity.role.getter(__int16 a1)
{
  return a1 & 0x1FF;
}

uint64_t DeprecatedNANAvailability.repeats.getter(unsigned int a1)
{
  return HIWORD(a1) & 1;
}

uint64_t InternetSharingActivity.init(role:active:)(__int16 a1, char a2)
{
  int v2;

  if ((a2 & 1) != 0)
    v2 = 0x10000;
  else
    v2 = 0;
  return v2 & 0xFFFFFE00 | a1 & 0x100 | a1;
}

void InternetSharingActivity.hash(into:)(uint64_t a1, int a2)
{
  if ((a2 & 0x100) != 0)
  {
    Hasher._combine(_:)(1uLL);
  }
  else
  {
    Hasher._combine(_:)(0);
    Hasher._combine(_:)(a2);
  }
  Hasher._combine(_:)(BYTE2(a2) & 1);
}

uint64_t static InternetSharingActivity.__derived_struct_equals(_:_:)(int a1, int a2)
{
  uint64_t result;

  if ((a1 & 0x100) != 0)
  {
    if ((a2 & 0x100) == 0)
      return 0;
    return ((a1 & 0x10000) == 0) ^ ((a2 & 0x10000u) >> 16);
  }
  result = 0;
  if ((a2 & 0x100) == 0 && a1 == a2)
    return ((a1 & 0x10000) == 0) ^ ((a2 & 0x10000u) >> 16);
  return result;
}

Swift::Int InternetSharingActivity.hashValue.getter(int a1)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3);
  if ((a1 & 0x100) != 0)
  {
    Hasher._combine(_:)(1uLL);
  }
  else
  {
    Hasher._combine(_:)(0);
    Hasher._combine(_:)(a1);
  }
  Hasher._combine(_:)(BYTE2(a1) & 1);
  return Hasher._finalize()();
}

Swift::Int sub_100039814()
{
  Swift::UInt8 *v0;
  Swift::UInt8 v1;
  Swift::UInt8 v2;
  Swift::UInt8 v3;
  _QWORD v5[9];

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  Hasher.init(_seed:)(v5);
  if ((v2 & 1) != 0)
  {
    Hasher._combine(_:)(1uLL);
  }
  else
  {
    Hasher._combine(_:)(0);
    Hasher._combine(_:)(v1);
  }
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

void sub_100039890()
{
  Swift::UInt8 *v0;
  Swift::UInt8 v1;
  Swift::UInt8 v2;

  v1 = v0[2];
  if ((v0[1] & 1) != 0)
  {
    Hasher._combine(_:)(1uLL);
  }
  else
  {
    v2 = *v0;
    Hasher._combine(_:)(0);
    Hasher._combine(_:)(v2);
  }
  Hasher._combine(_:)(v1);
}

Swift::Int sub_1000398EC()
{
  Swift::UInt8 *v0;
  Swift::UInt8 v1;
  Swift::UInt8 v2;
  Swift::UInt8 v3;
  _QWORD v5[9];

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  Hasher.init(_seed:)(v5);
  if ((v2 & 1) != 0)
  {
    Hasher._combine(_:)(1uLL);
  }
  else
  {
    Hasher._combine(_:)(0);
    Hasher._combine(_:)(v1);
  }
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

uint64_t sub_100039964(unsigned __int8 *a1, unsigned __int8 *a2)
{
  char v2;

  v2 = a2[1];
  if ((a1[1] & 1) != 0)
  {
    if (!a2[1])
      return 0;
  }
  else
  {
    if (*a1 != *a2)
      v2 = 1;
    if ((v2 & 1) != 0)
      return 0;
  }
  return a1[2] ^ a2[2] ^ 1u;
}

unint64_t MulticastServiceType.rawValue.getter()
{
  return 0xD000000000000012;
}

BOOL MulticastServiceType.init(rawValue:)(Swift::String string)
{
  void *object;
  Swift::String v2;
  Swift::Int v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1003D6A88, v2);
  swift_bridgeObjectRelease(object);
  return v3 != 0;
}

Swift::Int sub_100039A0C()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  String.hash(into:)(v1, 0xD000000000000012, 0x8000000100362060);
  return Hasher._finalize()();
}

uint64_t sub_100039A60(uint64_t a1)
{
  return String.hash(into:)(a1, 0xD000000000000012, 0x8000000100362060);
}

Swift::Int sub_100039A7C()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  String.hash(into:)(v1, 0xD000000000000012, 0x8000000100362060);
  return Hasher._finalize()();
}

uint64_t sub_100039ACC@<X0>(uint64_t *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::String v3;
  void *v4;
  Swift::Int v5;
  uint64_t result;

  v3._countAndFlagsBits = *a1;
  v4 = (void *)a1[1];
  v3._object = v4;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1003D62B8, v3);
  result = swift_bridgeObjectRelease(v4);
  *a2 = v5 != 0;
  return result;
}

void sub_100039B1C(_QWORD *a1@<X8>)
{
  *a1 = 0xD000000000000012;
  a1[1] = 0x8000000100362060;
}

uint64_t sub_100039B3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10003A618();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_100039B98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10003A618();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

void sub_100039BE4(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

unint64_t sub_100039BF0()
{
  unint64_t result;

  result = qword_100404F50;
  if (!qword_100404F50)
  {
    result = swift_getWitnessTable(&unk_10033A718, &type metadata for NANPeerServiceIdentifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100404F50);
  }
  return result;
}

unint64_t sub_100039C34()
{
  unint64_t result;

  result = qword_100404F58;
  if (!qword_100404F58)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for WiFiAddress, &type metadata for WiFiAddress);
    atomic_store(result, (unint64_t *)&qword_100404F58);
  }
  return result;
}

uint64_t sub_100039C78(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unsigned __int8 v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  char v17;
  uint64_t v18;

  v3 = sub_100012C44(&qword_100404FA0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin();
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  sub_10003259C(a1, v7);
  v9 = sub_100039BF0();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for NANPeerServiceIdentifier.CodingKeys, &type metadata for NANPeerServiceIdentifier.CodingKeys, v9, v7, v8);
  if (v1)
    return sub_100014430(a1);
  BYTE6(v18) = 0;
  v10 = KeyedDecodingContainer.decode(_:forKey:)((char *)&v18 + 6, v3);
  v17 = 1;
  v11 = sub_10003A65C();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v18, &type metadata for WiFiAddress, &v17, v3, &type metadata for WiFiAddress, v11);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  v12 = v18;
  v13 = BYTE1(v18);
  v14 = *(unsigned int *)((char *)&v18 + 2);
  sub_100014430(a1);
  return v10 | (unint64_t)(v12 << 8) | (v13 << 16) | (v14 << 24);
}

unint64_t sub_100039DF4()
{
  unint64_t result;

  result = qword_100404F60;
  if (!qword_100404F60)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for NANPeerServiceIdentifier, &type metadata for NANPeerServiceIdentifier);
    atomic_store(result, (unint64_t *)&qword_100404F60);
  }
  return result;
}

unint64_t sub_100039E3C()
{
  unint64_t result;

  result = qword_100404F68;
  if (!qword_100404F68)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for InternetSharingActivity.Role, &type metadata for InternetSharingActivity.Role);
    atomic_store(result, (unint64_t *)&qword_100404F68);
  }
  return result;
}

unint64_t sub_100039E84()
{
  unint64_t result;

  result = qword_100404F70;
  if (!qword_100404F70)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for InternetSharingActivity, &type metadata for InternetSharingActivity);
    atomic_store(result, (unint64_t *)&qword_100404F70);
  }
  return result;
}

unint64_t sub_100039ECC()
{
  unint64_t result;

  result = qword_100404F78;
  if (!qword_100404F78)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for MulticastServiceType, &type metadata for MulticastServiceType);
    atomic_store(result, (unint64_t *)&qword_100404F78);
  }
  return result;
}

ValueMetadata *type metadata accessor for NANPeerServiceIdentifier()
{
  return &type metadata for NANPeerServiceIdentifier;
}

uint64_t getEnumTagSinglePayload for InternetSharingActivity(unsigned __int16 *a1, unsigned int a2)
{
  int v2;
  unsigned int v4;
  BOOL v5;
  int v6;

  if (!a2)
    return 0;
  if (a2 >= 0xFF)
  {
    if ((a2 + 33554177) >> 24)
    {
      v2 = *((unsigned __int8 *)a1 + 3);
      if (*((_BYTE *)a1 + 3))
        return (*a1 | (*((unsigned __int8 *)a1 + 2) << 16) | (v2 << 24)) - 16776961;
    }
    else
    {
      v2 = *(unsigned __int16 *)((char *)a1 + 3);
      if (*(unsigned __int16 *)((char *)a1 + 3))
        return (*a1 | (*((unsigned __int8 *)a1 + 2) << 16) | (v2 << 24)) - 16776961;
    }
  }
  v4 = *((unsigned __int8 *)a1 + 2);
  v5 = v4 >= 2;
  v6 = (v4 + 2147483646) & 0x7FFFFFFF;
  if (!v5)
    v6 = -1;
  return (v6 + 1);
}

uint64_t storeEnumTagSinglePayload for InternetSharingActivity(uint64_t result, unsigned int a2, unsigned int a3)
{
  int v3;
  unsigned int v4;

  if ((a3 + 33554177) >> 24)
    v3 = 1;
  else
    v3 = 2;
  if (a3 <= 0xFE)
    v3 = 0;
  if (a2 > 0xFE)
  {
    *(_WORD *)result = a2 - 255;
    *(_BYTE *)(result + 2) = (a2 - 255) >> 16;
    if (v3)
    {
      v4 = ((a2 - 255) >> 24) + 1;
      if (v3 == 2)
        *(_WORD *)(result + 3) = v4;
      else
        *(_BYTE *)(result + 3) = v4;
    }
  }
  else
  {
    if (!v3)
      goto LABEL_10;
    if (v3 == 2)
    {
      *(_WORD *)(result + 3) = 0;
LABEL_10:
      if (!a2)
        return result;
LABEL_16:
      *(_BYTE *)(result + 2) = a2 + 1;
      return result;
    }
    *(_BYTE *)(result + 3) = 0;
    if (a2)
      goto LABEL_16;
  }
  return result;
}

ValueMetadata *type metadata accessor for InternetSharingActivity()
{
  return &type metadata for InternetSharingActivity;
}

uint64_t getEnumTagSinglePayload for InternetSharingActivity.Role(uint64_t a1, int a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;

  if (!a2)
    return 0;
  v2 = a2 + 0xFFFF;
  if ((a2 + 0xFFFF) <= 0xFFFEFFFF)
    v3 = 2;
  else
    v3 = 4;
  if (v2 < 0xFF0000)
    v3 = 1;
  if (v2 >= 0x10000)
    v4 = v3;
  else
    v4 = 0;
  return ((uint64_t (*)(void))((char *)&loc_10003A084 + 4 * byte_10033A260[v4]))();
}

uint64_t sub_10003A09C(unsigned __int16 *a1)
{
  uint64_t v1;

  v1 = a1[1];
  if (a1[1])
    return (*a1 | ((_DWORD)v1 << 16)) - 0xFFFF;
  return v1;
}

void sub_10003A0A8(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 2))
    JUMPOUT(0x10003A0B0);
  JUMPOUT(0x10003A0C0);
}

uint64_t storeEnumTagSinglePayload for InternetSharingActivity.Role(_WORD *a1, int a2, int a3)
{
  unsigned int v3;
  int v4;
  uint64_t v5;

  v3 = a3 + 0xFFFF;
  if ((a3 + 0xFFFF) <= 0xFFFEFFFF)
    v4 = 2;
  else
    v4 = 4;
  if (v3 < 0xFF0000)
    v4 = 1;
  if (v3 >= 0x10000)
    LODWORD(v5) = v4;
  else
    LODWORD(v5) = 0;
  if (a3)
    v5 = v5;
  else
    v5 = 0;
  if (!a2)
    return ((uint64_t (*)(void))((char *)sub_10003A14C + 4 * byte_10033A26A[v5]))();
  *a1 = a2 - 1;
  return ((uint64_t (*)(void))((char *)sub_10003A12C + 4 * byte_10033A265[v5]))();
}

uint64_t sub_10003A12C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 2) = v1;
  return result;
}

uint64_t sub_10003A14C(uint64_t result)
{
  *(_BYTE *)(result + 2) = 0;
  return result;
}

uint64_t sub_10003A154(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_10003A15C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_10003A164(uint64_t result)
{
  *(_WORD *)(result + 2) = 0;
  return result;
}

uint64_t sub_10003A16C(uint64_t result)
{
  *(_DWORD *)(result + 2) = 0;
  return result;
}

uint64_t sub_10003A178(unsigned __int8 *a1)
{
  if (a1[1])
    return (*a1 | (a1[1] << 8)) - 255;
  else
    return 0;
}

_BYTE *sub_10003A198(_BYTE *result, int a2)
{
  if (a2)
  {
    *result = a2 - 1;
    result[1] = ((unsigned __int16)(a2 - 1) >> 8) + 1;
  }
  else
  {
    result[1] = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for InternetSharingActivity.Role()
{
  return &type metadata for InternetSharingActivity.Role;
}

uint64_t getEnumTagSinglePayload for MulticastServiceType(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t storeEnumTagSinglePayload for MulticastServiceType(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_10003A260 + 4 * byte_10033A26F[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_10003A280 + 4 * byte_10033A274[v4]))();
}

_BYTE *sub_10003A260(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_10003A280(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10003A288(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10003A290(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10003A298(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10003A2A0(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for MulticastServiceType()
{
  return &type metadata for MulticastServiceType;
}

uint64_t getEnumTagSinglePayload for Layer3Protocol(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for NANPeerServiceIdentifier.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10003A398 + 4 * byte_10033A27E[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10003A3CC + 4 * byte_10033A279[v4]))();
}

uint64_t sub_10003A3CC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003A3D4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10003A3DCLL);
  return result;
}

uint64_t sub_10003A3E8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10003A3F0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_10003A3F4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003A3FC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003A408(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_10003A410(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for NANPeerServiceIdentifier.CodingKeys()
{
  return &type metadata for NANPeerServiceIdentifier.CodingKeys;
}

unint64_t sub_10003A430()
{
  unint64_t result;

  result = qword_100404F80;
  if (!qword_100404F80)
  {
    result = swift_getWitnessTable(&unk_10033A6F0, &type metadata for NANPeerServiceIdentifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100404F80);
  }
  return result;
}

unint64_t sub_10003A478()
{
  unint64_t result;

  result = qword_100404F88;
  if (!qword_100404F88)
  {
    result = swift_getWitnessTable(&unk_10033A660, &type metadata for NANPeerServiceIdentifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100404F88);
  }
  return result;
}

unint64_t sub_10003A4C0()
{
  unint64_t result;

  result = qword_100404F90;
  if (!qword_100404F90)
  {
    result = swift_getWitnessTable(&unk_10033A688, &type metadata for NANPeerServiceIdentifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100404F90);
  }
  return result;
}

uint64_t sub_10003A504(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x65636E6174736E69 && a2 == 0xEA00000000004449)
  {
    v5 = 0xEA00000000004449;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x65636E6174736E69, 0xEA00000000004449, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x7264644172656570 && a2 == 0xEB00000000737365)
  {
    swift_bridgeObjectRelease(0xEB00000000737365);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x7264644172656570, 0xEB00000000737365, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

unint64_t sub_10003A618()
{
  unint64_t result;

  result = qword_100404F98;
  if (!qword_100404F98)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for MulticastServiceType, &type metadata for MulticastServiceType);
    atomic_store(result, (unint64_t *)&qword_100404F98);
  }
  return result;
}

unint64_t sub_10003A65C()
{
  unint64_t result;

  result = qword_100404FA8[0];
  if (!qword_100404FA8[0])
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for WiFiAddress, &type metadata for WiFiAddress);
    atomic_store(result, qword_100404FA8);
  }
  return result;
}

uint64_t Either<>.description.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;

  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(a1);
  v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(v8 + 16);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v8);
  v15 = (char *)&v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v17 = (char *)&v22 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v17, v19, a1);
  if (swift_getEnumCaseMultiPayload(v17, a1) == 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v10, v17, v6);
    v20 = dispatch thunk of CustomStringConvertible.description.getter(v6, a3);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v15, v17, v11);
    v20 = dispatch thunk of CustomStringConvertible.description.getter(v11, a2);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  }
  return v20;
}

uint64_t sub_10003A820(uint64_t a1, uint64_t a2)
{
  return Either<>.description.getter(a1, *(_QWORD *)(a2 - 8), *(_QWORD *)(a2 - 16));
}

uint64_t Either.customMirror.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v16;
  _QWORD v17[3];
  uint64_t v18;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin();
  v6 = (char *)v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(v4 + 16);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin();
  v10 = (char *)v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v12 = (char *)v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v13 + 16))(v12);
  if (swift_getEnumCaseMultiPayload(v12, a1) == 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v6, v12, v2);
    v18 = v2;
    v14 = sub_100033C24(v17);
    (*(void (**)(_QWORD *, char *, uint64_t))(v3 + 16))(v14, v6, v2);
    Mirror.init(reflecting:)(v17);
    return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v12, v7);
    v18 = v7;
    v16 = sub_100033C24(v17);
    (*(void (**)(_QWORD *, char *, uint64_t))(v8 + 16))(v16, v10, v7);
    Mirror.init(reflecting:)(v17);
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
}

uint64_t static Either<>.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t TupleTypeMetadata2;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  void (*v27)(char *, uint64_t, uint64_t);
  uint64_t v28;
  void (*v29)(char *, char *, uint64_t);
  char *v30;
  char *v31;
  char v32;
  void (*v33)(char *, uint64_t);
  uint64_t v34;
  void (*v35)(char *, char *, uint64_t);
  char *v36;
  char *v37;
  void (*v38)(char *, uint64_t);
  uint64_t v40;
  char *v41;
  char *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v45 = a5;
  v46 = a6;
  v50 = a1;
  v51 = a2;
  v48 = *(_QWORD *)(a4 - 8);
  __chkstk_darwin();
  v44 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v43 = (char *)&v40 - v9;
  v47 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin();
  v42 = (char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v41 = (char *)&v40 - v12;
  v15 = type metadata accessor for Either(0, v13, v14, v14);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin();
  v18 = (char *)&v40 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v20 = (char *)&v40 - v19;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, v15, v15, 0, 0);
  v22 = *(_QWORD *)(TupleTypeMetadata2 - 8);
  v23 = __chkstk_darwin();
  v25 = (char *)&v40 - v24;
  v26 = (char *)&v40 + *(int *)(v23 + 48) - v24;
  v49 = v16;
  v27 = *(void (**)(char *, uint64_t, uint64_t))(v16 + 16);
  v27((char *)&v40 - v24, v50, v15);
  v27(v26, v51, v15);
  if (swift_getEnumCaseMultiPayload(v25, v15) == 1)
  {
    v27(v18, (uint64_t)v25, v15);
    if (swift_getEnumCaseMultiPayload(v26, v15) == 1)
    {
      v28 = v48;
      v29 = *(void (**)(char *, char *, uint64_t))(v48 + 32);
      v30 = v43;
      v29(v43, v18, a4);
      v31 = v44;
      v29(v44, v26, a4);
      v32 = dispatch thunk of static Equatable.== infix(_:_:)(v30, v31, a4, v46);
      v33 = *(void (**)(char *, uint64_t))(v28 + 8);
      v33(v31, a4);
      v33(v30, a4);
LABEL_9:
      v22 = v49;
      goto LABEL_10;
    }
    (*(void (**)(char *, uint64_t))(v48 + 8))(v18, a4);
  }
  else
  {
    v27(v20, (uint64_t)v25, v15);
    if (swift_getEnumCaseMultiPayload(v26, v15) != 1)
    {
      v34 = v47;
      v35 = *(void (**)(char *, char *, uint64_t))(v47 + 32);
      v36 = v41;
      v35(v41, v20, a3);
      v37 = v42;
      v35(v42, v26, a3);
      v32 = dispatch thunk of static Equatable.== infix(_:_:)(v36, v37, a3, v45);
      v38 = *(void (**)(char *, uint64_t))(v34 + 8);
      v38(v37, a3);
      v38(v36, a3);
      goto LABEL_9;
    }
    (*(void (**)(char *, uint64_t))(v47 + 8))(v20, a3);
  }
  v32 = 0;
  v15 = TupleTypeMetadata2;
LABEL_10:
  (*(void (**)(char *, uint64_t))(v22 + 8))(v25, v15);
  return v32 & 1;
}

uint64_t sub_10003AD04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static Either<>.== infix(_:_:)(a1, a2, *(_QWORD *)(a3 + 16), *(_QWORD *)(a3 + 24), *(_QWORD *)(a4 - 8), *(_QWORD *)(a4 - 16));
}

uint64_t Either<>.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;

  v24 = a4;
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(a1);
  v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(v12 + 16);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v9);
  v17 = (char *)&v23 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  v19 = (char *)&v23 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v19, v21, a2);
  if (swift_getEnumCaseMultiPayload(v19, a2) == 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v11, v19, v7);
    dispatch thunk of Hashable.hash(into:)(a1, v7, v24);
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v17, v19, v13);
    dispatch thunk of Hashable.hash(into:)(a1, v13, a3);
    return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v17, v13);
  }
}

Swift::Int Either<>.hashValue.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v7[9];

  Hasher.init(_seed:)(v7);
  Either<>.hash(into:)((uint64_t)v7, a1, a2, a3);
  return Hasher._finalize()();
}

Swift::Int sub_10003AEE4(uint64_t a1, uint64_t a2)
{
  return Either<>.hashValue.getter(a1, *(_QWORD *)(a2 - 8), *(_QWORD *)(a2 - 16));
}

uint64_t sub_10003AEF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Either<>.hash(into:)(a1, a2, *(_QWORD *)(a3 - 8), *(_QWORD *)(a3 - 16));
}

Swift::Int sub_10003AEFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[9];

  v5 = *(_QWORD *)(a3 - 16);
  v4 = *(_QWORD *)(a3 - 8);
  Hasher.init(_seed:)(v7);
  Either<>.hash(into:)((uint64_t)v7, a2, v4, v5);
  return Hasher._finalize()();
}

uint64_t type metadata accessor for Either(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100033C60(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Either);
}

uint64_t sub_10003AF5C(uint64_t a1)
{
  return swift_getWitnessTable(&protocol conformance descriptor for <> Either<A, B>, a1);
}

uint64_t sub_10003AF98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 24);
}

uint64_t sub_10003AFA0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[2];

  result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 24));
    if (v4 <= 0x3F)
    {
      v5[1] = *(_QWORD *)(result - 8) + 64;
      swift_initEnumMetadataMultiPayload(a1, 0, 2, v5);
      return 0;
    }
  }
  return result;
}

uint64_t *sub_10003B028(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;

  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 24) - 8);
  if (*(_QWORD *)(v5 + 64) <= *(_QWORD *)(v4 + 64))
    v6 = *(_QWORD *)(v4 + 64);
  else
    v6 = *(_QWORD *)(v5 + 64);
  v7 = (*(_BYTE *)(v5 + 80) | *(_BYTE *)(v4 + 80));
  if (v7 <= 7
    && (unint64_t)(v6 + 1) <= 0x18
    && ((*(_DWORD *)(v5 + 80) | *(_DWORD *)(v4 + 80)) & 0x100000) == 0)
  {
    v11 = *((unsigned __int8 *)a2 + v6);
    if (v11 >= 2)
    {
      if (v6 <= 3)
        v12 = v6;
      else
        v12 = 4;
      __asm { BR              X15 }
    }
    if (v11 == 1)
    {
      (*(void (**)(uint64_t *))(v5 + 16))(a1);
      *((_BYTE *)v3 + v6) = 1;
    }
    else
    {
      (*(void (**)(uint64_t *))(v4 + 16))(a1);
      *((_BYTE *)v3 + v6) = 0;
    }
  }
  else
  {
    v10 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v10 + ((v7 + 16) & ~v7));
    swift_retain(v10);
  }
  return v3;
}

uint64_t sub_10003B154(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  BOOL v10;

  v4 = *(_QWORD *)(a3 + 24);
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v4 - 8);
  if (*(_QWORD *)(v6 + 64) <= *(_QWORD *)(v5 + 64))
    v7 = *(_QWORD *)(v5 + 64);
  else
    v7 = *(_QWORD *)(v6 + 64);
  v8 = *(unsigned __int8 *)(a2 + v7);
  if (v8 >= 2)
  {
    if (v7 <= 3)
      v9 = v7;
    else
      v9 = 4;
    __asm { BR              X16 }
  }
  v10 = v8 == 1;
  if (v8 == 1)
    v5 = *(_QWORD *)(v4 - 8);
  (*(void (**)(uint64_t))(v5 + 16))(a1);
  *(_BYTE *)(a1 + v7) = v10;
  return a1;
}

uint64_t sub_10003B228(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(a3 + 24);
    v7 = *(_QWORD *)(v5 - 8);
    v8 = *(_QWORD *)(v6 - 8);
    if (*(_QWORD *)(v8 + 64) <= *(_QWORD *)(v7 + 64))
      v9 = *(_QWORD *)(v7 + 64);
    else
      v9 = *(_QWORD *)(v8 + 64);
    v10 = *(unsigned __int8 *)(a1 + v9);
    if (v10 >= 2)
    {
      if (v9 <= 3)
        v11 = v9;
      else
        v11 = 4;
      __asm { BR              X12 }
    }
    if (v10 == 1)
      v12 = *(_QWORD *)(v6 - 8);
    else
      v12 = *(_QWORD *)(v5 - 8);
    if (v10 == 1)
      v13 = *(_QWORD *)(a3 + 24);
    else
      v13 = *(_QWORD *)(a3 + 16);
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(a1, v13);
    v14 = *(unsigned __int8 *)(a2 + v9);
    if (v14 >= 2)
    {
      if (v9 <= 3)
        v15 = v9;
      else
        v15 = 4;
      __asm { BR              X12 }
    }
    v16 = v14 == 1;
    if (v14 == 1)
      v17 = v8;
    else
      v17 = v7;
    if (v14 == 1)
      v18 = v6;
    else
      v18 = v5;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(a1, a2, v18);
    *(_BYTE *)(a1 + v9) = v16;
  }
  return a1;
}

uint64_t sub_10003B3A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  BOOL v10;

  v4 = *(_QWORD *)(a3 + 24);
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v4 - 8);
  if (*(_QWORD *)(v6 + 64) <= *(_QWORD *)(v5 + 64))
    v7 = *(_QWORD *)(v5 + 64);
  else
    v7 = *(_QWORD *)(v6 + 64);
  v8 = *(unsigned __int8 *)(a2 + v7);
  if (v8 >= 2)
  {
    if (v7 <= 3)
      v9 = v7;
    else
      v9 = 4;
    __asm { BR              X16 }
  }
  v10 = v8 == 1;
  if (v8 == 1)
    v5 = *(_QWORD *)(v4 - 8);
  (*(void (**)(uint64_t))(v5 + 32))(a1);
  *(_BYTE *)(a1 + v7) = v10;
  return a1;
}

uint64_t sub_10003B478(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;

  if (a1 != a2)
  {
    v5 = *(_QWORD *)(a3 + 16);
    v6 = *(_QWORD *)(a3 + 24);
    v7 = *(_QWORD *)(v5 - 8);
    v8 = *(_QWORD *)(v6 - 8);
    if (*(_QWORD *)(v8 + 64) <= *(_QWORD *)(v7 + 64))
      v9 = *(_QWORD *)(v7 + 64);
    else
      v9 = *(_QWORD *)(v8 + 64);
    v10 = *(unsigned __int8 *)(a1 + v9);
    if (v10 >= 2)
    {
      if (v9 <= 3)
        v11 = v9;
      else
        v11 = 4;
      __asm { BR              X12 }
    }
    if (v10 == 1)
      v12 = *(_QWORD *)(v6 - 8);
    else
      v12 = *(_QWORD *)(v5 - 8);
    if (v10 == 1)
      v13 = *(_QWORD *)(a3 + 24);
    else
      v13 = *(_QWORD *)(a3 + 16);
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(a1, v13);
    v14 = *(unsigned __int8 *)(a2 + v9);
    if (v14 >= 2)
    {
      if (v9 <= 3)
        v15 = v9;
      else
        v15 = 4;
      __asm { BR              X12 }
    }
    v16 = v14 == 1;
    if (v14 == 1)
      v17 = v8;
    else
      v17 = v7;
    if (v14 == 1)
      v18 = v6;
    else
      v18 = v5;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 32))(a1, a2, v18);
    *(_BYTE *)(a1 + v9) = v16;
  }
  return a1;
}

uint64_t sub_10003B5F4(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  char v5;
  int v6;
  unsigned int v8;
  int v9;
  unsigned int v10;

  v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 64);
  if (v3 <= *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64))
    v3 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_21;
  v4 = v3 + 1;
  v5 = 8 * (v3 + 1);
  if ((v3 + 1) <= 3)
  {
    v8 = ((a2 + ~(-1 << v5) - 254) >> v5) + 1;
    if (HIWORD(v8))
    {
      v6 = *(_DWORD *)(a1 + v4);
      if (!v6)
        goto LABEL_21;
      goto LABEL_14;
    }
    if (v8 > 0xFF)
    {
      v6 = *(unsigned __int16 *)(a1 + v4);
      if (!*(_WORD *)(a1 + v4))
        goto LABEL_21;
      goto LABEL_14;
    }
    if (v8 < 2)
    {
LABEL_21:
      v10 = *(unsigned __int8 *)(a1 + v3);
      if (v10 >= 2)
        return (v10 ^ 0xFF) + 1;
      else
        return 0;
    }
  }
  v6 = *(unsigned __int8 *)(a1 + v4);
  if (!*(_BYTE *)(a1 + v4))
    goto LABEL_21;
LABEL_14:
  v9 = (v6 - 1) << v5;
  if (v4 > 3)
    v9 = 0;
  if (!(_DWORD)v4)
    return (v9 + 255);
  if (v4 > 3)
    LODWORD(v4) = 4;
  return ((uint64_t (*)(void))((char *)&loc_10003B6BC + 4 * byte_10033A790[(v4 - 1)]))();
}

void sub_10003B708(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5;
  size_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;

  v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 16) - 8) + 64);
  if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 24) - 8) + 64) > v5)
    v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a4 + 24) - 8) + 64);
  v6 = v5 + 1;
  if (a3 < 0xFF)
  {
    v7 = 0;
  }
  else if (v6 <= 3)
  {
    v9 = ((a3 + ~(-1 << (8 * v6)) - 254) >> (8 * v6)) + 1;
    if (HIWORD(v9))
    {
      v7 = &dword_100000004;
    }
    else if (v9 >= 0x100)
    {
      v7 = 2;
    }
    else
    {
      v7 = v9 > 1;
    }
  }
  else
  {
    v7 = &_mh_execute_header.magic + 1;
  }
  if (a2 <= 0xFE)
    __asm { BR              X11 }
  v8 = a2 - 255;
  if (v6 < 4)
  {
    if ((_DWORD)v5 != -1)
    {
      v10 = v8 & ~(-1 << (8 * v6));
      bzero(a1, v6);
      if ((_DWORD)v6 == 3)
      {
        *a1 = v10;
        *((_BYTE *)a1 + 2) = BYTE2(v10);
      }
      else if ((_DWORD)v6 == 2)
      {
        *a1 = v10;
      }
      else
      {
        *(_BYTE *)a1 = v10;
      }
    }
  }
  else
  {
    bzero(a1, v5 + 1);
    *(_DWORD *)a1 = v8;
  }
  __asm { BR              X10 }
}

uint64_t sub_10003B8B4(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) - 8) + 64);
  if (v2 <= *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64))
    v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 64);
  if (*(unsigned __int8 *)(a1 + v2) < 2u)
    return *(unsigned __int8 *)(a1 + v2);
  if (v2 <= 3)
    v3 = v2;
  else
    v3 = 4;
  return ((uint64_t (*)(void))((char *)&loc_10003B900 + 4 * byte_10033A79E[v3]))();
}

void sub_10003B948(_BYTE *a1, unsigned int a2, uint64_t a3)
{
  unint64_t v4;
  size_t v5;
  unsigned int v6;
  unsigned int v7;
  int v8;

  if (a2 > 1)
  {
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 64) <= *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16)
                                                                                              - 8)
                                                                                  + 64))
      v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
    else
      v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 64);
    v6 = a2 - 2;
    if (v5 < 4)
    {
      v7 = v6 >> (8 * v5);
      v8 = v6 & ~(-1 << (8 * v5));
      a1[v5] = v7 + 2;
      bzero(a1, v5);
      if ((_DWORD)v5 == 3)
      {
        *(_WORD *)a1 = v8;
        a1[2] = BYTE2(v8);
      }
      else if ((_DWORD)v5 == 2)
      {
        *(_WORD *)a1 = v8;
      }
      else
      {
        *a1 = v8;
      }
    }
    else
    {
      a1[v5] = 2;
      bzero(a1, v5);
      *(_DWORD *)a1 = v6;
    }
  }
  else
  {
    v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 24) - 8) + 64);
    if (v4 <= *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64))
      v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 16) - 8) + 64);
    a1[v4] = a2;
  }
}

uint64_t sub_10003BA30(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x64656C62616E65;
  else
    v3 = 0x64656C6261736964;
  if (v2)
    v4 = 0xE800000000000000;
  else
    v4 = 0xE700000000000000;
  if ((a2 & 1) != 0)
    v5 = 0x64656C62616E65;
  else
    v5 = 0x64656C6261736964;
  if ((a2 & 1) != 0)
    v6 = 0xE700000000000000;
  else
    v6 = 0xE800000000000000;
  if (v3 == v5 && v4 == v6)
  {
    v7 = 1;
    v6 = v4;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0);
  }
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

uint64_t sub_10003BAD4(unsigned __int8 a1, unsigned __int8 a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unint64_t v5;
  int v6;
  unint64_t v7;
  char v8;

  v2 = 6710895;
  v3 = a1;
  if (a1)
  {
    if (a1 == 1)
      v4 = 0x6775626564;
    else
      v4 = 0x61427963696C6F70;
    if (v3 == 1)
      v5 = 0xE500000000000000;
    else
      v5 = 0xEB00000000646573;
    v6 = a2;
    if (a2)
    {
LABEL_9:
      if (v6 == 1)
        v2 = 0x6775626564;
      else
        v2 = 0x61427963696C6F70;
      if (v6 == 1)
        v7 = 0xE500000000000000;
      else
        v7 = 0xEB00000000646573;
      if (v4 != v2)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v5 = 0xE300000000000000;
    v4 = 6710895;
    v6 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE300000000000000;
  if (v4 != 6710895)
  {
LABEL_21:
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, v2, v7, 0);
    goto LABEL_22;
  }
LABEL_19:
  if (v5 != v7)
    goto LABEL_21;
  v8 = 1;
  v7 = v5;
LABEL_22:
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v7);
  return v8 & 1;
}

uint64_t sub_10003BBEC(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x757145746F4E7874;
  else
    v3 = 0x526C617571457874;
  if (v2)
    v4 = 0xE900000000000078;
  else
    v4 = 0xEC00000078526C61;
  if ((a2 & 1) != 0)
    v5 = 0x757145746F4E7874;
  else
    v5 = 0x526C617571457874;
  if ((a2 & 1) != 0)
    v6 = 0xEC00000078526C61;
  else
    v6 = 0xE900000000000078;
  if (v3 == v5 && v4 == v6)
  {
    v7 = 1;
    v6 = v4;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0);
  }
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

void sub_10003BCA0(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_10003BCE0(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_10003BD44 + 4 * byte_10033A8C5[a2]))(6647407);
}

uint64_t sub_10003BD44(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 6647407 && v1 == 0xE300000000000000)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 6647407, 0xE300000000000000, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xE300000000000000);
  return v2 & 1;
}

uint64_t sub_10003BDF0(char a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  if ((a1 & 1) != 0)
    v2 = 7365749;
  else
    v2 = 7365492;
  if ((a2 & 1) != 0)
    v3 = 7365749;
  else
    v3 = 7365492;
  if (v2 == v3)
    v4 = 1;
  else
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)(v2, 0xE300000000000000, v3, 0xE300000000000000, 0);
  swift_bridgeObjectRelease_n(0xE300000000000000, 2);
  return v4 & 1;
}

uint64_t sub_10003BE58(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  char v8;

  v2 = 0xEC0000006F727465;
  v3 = 0x526E496B63757473;
  v4 = a1;
  if (a1)
  {
    if (a1 == 1)
      v5 = 0x536E496B63757473;
    else
      v5 = 0xD000000000000014;
    if (v4 == 1)
      v6 = 0xEB000000006E6163;
    else
      v6 = 0x8000000100361CF0;
    v7 = a2;
    if (!a2)
      goto LABEL_15;
    goto LABEL_9;
  }
  v5 = 0x526E496B63757473;
  v6 = 0xEC0000006F727465;
  v7 = a2;
  if (a2)
  {
LABEL_9:
    if (v7 == 1)
      v3 = 0x536E496B63757473;
    else
      v3 = 0xD000000000000014;
    if (v7 == 1)
      v2 = 0xEB000000006E6163;
    else
      v2 = 0x8000000100361CF0;
  }
LABEL_15:
  if (v5 == v3 && v6 == v2)
  {
    v8 = 1;
    v2 = v6;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v6, v3, v2, 0);
  }
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v2);
  return v8 & 1;
}

uint64_t sub_10003BF88(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x6E6F73616572;
  else
    v3 = 0x65636976726573;
  if (v2)
    v4 = 0xE700000000000000;
  else
    v4 = 0xE600000000000000;
  if ((a2 & 1) != 0)
    v5 = 0x6E6F73616572;
  else
    v5 = 0x65636976726573;
  if ((a2 & 1) != 0)
    v6 = 0xE600000000000000;
  else
    v6 = 0xE700000000000000;
  if (v3 == v5 && v4 == v6)
  {
    v7 = 1;
    v6 = v4;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0);
  }
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

void sub_10003C028(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_10003C078(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_10003C120 + 4 * byte_10033A8D1[a2]))(0x6172666E49796DLL);
}

uint64_t sub_10003C120(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  if (a1 == 0x6172666E49796DLL && v1 == v2)
  {
    v3 = 1;
    v2 = v1;
  }
  else
  {
    v3 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0x6172666E49796DLL, v2, 0);
  }
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v2);
  return v3 & 1;
}

uint64_t sub_10003C220(unsigned __int8 a1, unsigned __int8 a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unint64_t v5;
  int v6;
  unint64_t v7;
  char v8;

  v2 = 0x65636976726573;
  v3 = a1;
  if (a1)
  {
    if (a1 == 1)
      v4 = 0x616974696E497369;
    else
      v4 = 0x6E6F697461727564;
    if (v3 == 1)
      v5 = 0xEB00000000726F74;
    else
      v5 = 0xE800000000000000;
    v6 = a2;
    if (a2)
    {
LABEL_9:
      if (v6 == 1)
        v2 = 0x616974696E497369;
      else
        v2 = 0x6E6F697461727564;
      if (v6 == 1)
        v7 = 0xEB00000000726F74;
      else
        v7 = 0xE800000000000000;
      if (v4 != v2)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v5 = 0xE700000000000000;
    v4 = 0x65636976726573;
    v6 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE700000000000000;
  if (v4 != 0x65636976726573)
  {
LABEL_21:
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, v2, v7, 0);
    goto LABEL_22;
  }
LABEL_19:
  if (v5 != v7)
    goto LABEL_21;
  v8 = 1;
  v7 = v5;
LABEL_22:
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v7);
  return v8 & 1;
}

uint64_t sub_10003C348(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x64657463656A6572;
  else
    v3 = 0x6553657669746361;
  if (v2)
    v4 = 0xED00006563697672;
  else
    v4 = 0xEF65636976726553;
  if ((a2 & 1) != 0)
    v5 = 0x64657463656A6572;
  else
    v5 = 0x6553657669746361;
  if ((a2 & 1) != 0)
    v6 = 0xEF65636976726553;
  else
    v6 = 0xED00006563697672;
  if (v3 == v5 && v4 == v6)
  {
    v7 = 1;
    v6 = v4;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0);
  }
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

uint64_t sub_10003C404(char a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  v2 = qword_10033B0B0[a1];
  v3 = qword_10033B0B0[a2];
  if (v2 == v3)
    v4 = 1;
  else
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)(v2, 0xE200000000000000, v3, 0xE200000000000000, 0);
  swift_bridgeObjectRelease_n(0xE200000000000000, 2);
  return v4 & 1;
}

uint64_t sub_10003C468(char a1, char a2)
{
  BOOL v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x636572726F636E69;
  else
    v3 = 0xD000000000000011;
  if (v2)
    v4 = 0x8000000100361330;
  else
    v4 = 0xED00006570795474;
  if ((a2 & 1) != 0)
    v5 = 0x636572726F636E69;
  else
    v5 = 0xD000000000000011;
  if ((a2 & 1) != 0)
    v6 = 0xED00006570795474;
  else
    v6 = 0x8000000100361330;
  if (v3 == v5 && v4 == v6)
  {
    v7 = 1;
    v6 = v4;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0);
  }
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

uint64_t sub_10003C51C(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x657669746361;
  else
    v3 = 0x65766973736170;
  if (v2)
    v4 = 0xE700000000000000;
  else
    v4 = 0xE600000000000000;
  if ((a2 & 1) != 0)
    v5 = 0x657669746361;
  else
    v5 = 0x65766973736170;
  if ((a2 & 1) != 0)
    v6 = 0xE600000000000000;
  else
    v6 = 0xE700000000000000;
  if (v3 == v5 && v4 == v6)
  {
    v7 = 1;
    v6 = v4;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0);
  }
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

void sub_10003C5BC(char a1)
{
  __asm { BR              X12 }
}

uint64_t sub_10003C608(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_10003C6B0 + 4 * byte_10033A8DD[a2]))(0xD000000000000010);
}

uint64_t sub_10003C6B0(uint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  char v3;

  v2 = 0x8000000100361FA0;
  if (a1 == 0xD000000000000010 && v1 == 0x8000000100361FA0)
  {
    v3 = 1;
    v2 = v1;
  }
  else
  {
    v3 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 0xD000000000000010, 0x8000000100361FA0, 0);
  }
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v2);
  return v3 & 1;
}

uint64_t sub_10003C79C(char a1, unsigned __int8 a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  int v6;
  char v7;

  v2 = 0xD000000000000012;
  v3 = 0x8000000100360DF0;
  if (a1)
  {
    if (a1 == 1)
      v4 = 0xEE006C6477612E65;
    else
      v4 = 0xED00006E616E2E65;
    v5 = 0x6C7070612E6D6F63;
    v6 = a2;
    if (!a2)
      goto LABEL_10;
    goto LABEL_6;
  }
  v5 = 0xD000000000000012;
  v4 = 0x8000000100360DF0;
  v6 = a2;
  if (a2)
  {
LABEL_6:
    if (v6 == 1)
      v3 = 0xEE006C6477612E65;
    else
      v3 = 0xED00006E616E2E65;
    v2 = 0x6C7070612E6D6F63;
  }
LABEL_10:
  if (v5 == v2 && v4 == v3)
  {
    v7 = 1;
    v3 = v4;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v4, v2, v3, 0);
  }
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v3);
  return v7 & 1;
}

uint64_t sub_10003C8B0(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 1735617902;
  else
    v3 = 7365742;
  if (v2)
    v4 = 0xE300000000000000;
  else
    v4 = 0xE400000000000000;
  if ((a2 & 1) != 0)
    v5 = 1735617902;
  else
    v5 = 7365742;
  if ((a2 & 1) != 0)
    v6 = 0xE400000000000000;
  else
    v6 = 0xE300000000000000;
  if (v3 == v5 && v4 == v6)
  {
    v7 = 1;
    v6 = v4;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0);
  }
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

uint64_t sub_10003C948(unsigned __int8 a1, unsigned __int8 a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  unint64_t v5;
  int v6;
  unint64_t v7;
  char v8;

  v2 = 0x6576697470616461;
  v3 = a1;
  if (a1)
  {
    if (a1 == 1)
      v4 = 0x656D69746C616572;
    else
      v4 = 0x6E6574614C776F6CLL;
    if (v3 == 1)
      v5 = 0xE800000000000000;
    else
      v5 = 0xEA00000000007963;
    v6 = a2;
    if (a2)
    {
LABEL_9:
      if (v6 == 1)
        v2 = 0x656D69746C616572;
      else
        v2 = 0x6E6574614C776F6CLL;
      if (v6 == 1)
        v7 = 0xE800000000000000;
      else
        v7 = 0xEA00000000007963;
      if (v4 != v2)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v5 = 0xE800000000000000;
    v4 = 0x6576697470616461;
    v6 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE800000000000000;
  if (v4 != 0x6576697470616461)
  {
LABEL_21:
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, v2, v7, 0);
    goto LABEL_22;
  }
LABEL_19:
  if (v5 != v7)
    goto LABEL_21;
  v8 = 1;
  v7 = v5;
LABEL_22:
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v7);
  return v8 & 1;
}

void sub_10003CA68(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_10003CAD4(uint64_t a1, unsigned __int8 a2)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_10003CB54 + 4 * byte_10033A8E7[a2]))(1818523489);
}

uint64_t sub_10003CB54(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 1818523489 && v1 == 0xE400000000000000)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, v1, 1818523489, 0xE400000000000000, 0);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(0xE400000000000000);
  return v2 & 1;
}

uint64_t sub_10003CC20(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 7561575;
  else
    v3 = 0x7055776F6C6C6F66;
  if (v2)
    v4 = 0xE800000000000000;
  else
    v4 = 0xE300000000000000;
  if ((a2 & 1) != 0)
    v5 = 7561575;
  else
    v5 = 0x7055776F6C6C6F66;
  if ((a2 & 1) != 0)
    v6 = 0xE300000000000000;
  else
    v6 = 0xE800000000000000;
  if (v3 == v5 && v4 == v6)
  {
    v7 = 1;
    v6 = v4;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0);
  }
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

uint64_t sub_10003CCBC(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x73616369746C756DLL;
  else
    v3 = 0x74736163696E75;
  if (v2)
    v4 = 0xE700000000000000;
  else
    v4 = 0xE900000000000074;
  if ((a2 & 1) != 0)
    v5 = 0x73616369746C756DLL;
  else
    v5 = 0x74736163696E75;
  if ((a2 & 1) != 0)
    v6 = 0xE900000000000074;
  else
    v6 = 0xE700000000000000;
  if (v3 == v5 && v4 == v6)
  {
    v7 = 1;
    v6 = v4;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0);
  }
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

uint64_t sub_10003CD64(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x614D6F54796E616DLL;
  else
    v3 = 0x6E614D6F54656E6FLL;
  if (v2)
    v4 = 0xE900000000000079;
  else
    v4 = 0xEA0000000000796ELL;
  if ((a2 & 1) != 0)
    v5 = 0x614D6F54796E616DLL;
  else
    v5 = 0x6E614D6F54656E6FLL;
  if ((a2 & 1) != 0)
    v6 = 0xEA0000000000796ELL;
  else
    v6 = 0xE900000000000079;
  if (v3 == v5 && v4 == v6)
  {
    v7 = 1;
    v6 = v4;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0);
  }
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

uint64_t sub_10003CE10(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 0x65746963696C6F73;
  else
    v3 = 1701736302;
  if (v2)
    v4 = 0xE400000000000000;
  else
    v4 = 0xEB00000000785464;
  if ((a2 & 1) != 0)
    v5 = 0x65746963696C6F73;
  else
    v5 = 1701736302;
  if ((a2 & 1) != 0)
    v6 = 0xEB00000000785464;
  else
    v6 = 0xE400000000000000;
  if (v3 == v5 && v4 == v6)
  {
    v7 = 1;
    v6 = v4;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, v5, v6, 0);
  }
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v6);
  return v7 & 1;
}

uint64_t sub_10003CEB4(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2;
  unint64_t v3;
  int v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  char v8;

  v2 = 0xEB00000000646574;
  v3 = 0x6963696C6F736E75;
  v4 = a1;
  if (a1)
  {
    if (a1 == 1)
      v5 = 0x65746963696C6F73;
    else
      v5 = 0xD000000000000017;
    if (v4 == 1)
      v6 = 0xE900000000000064;
    else
      v6 = 0x8000000100361130;
    v7 = a2;
    if (!a2)
      goto LABEL_15;
    goto LABEL_9;
  }
  v5 = 0x6963696C6F736E75;
  v6 = 0xEB00000000646574;
  v7 = a2;
  if (a2)
  {
LABEL_9:
    if (v7 == 1)
      v3 = 0x65746963696C6F73;
    else
      v3 = 0xD000000000000017;
    if (v7 == 1)
      v2 = 0xE900000000000064;
    else
      v2 = 0x8000000100361130;
  }
LABEL_15:
  if (v5 == v3 && v6 == v2)
  {
    v8 = 1;
    v2 = v6;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v6, v3, v2, 0);
  }
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v2);
  return v8 & 1;
}

void *sub_10003CFDC(char a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  void *v6;
  id v7;

  if (!*(_QWORD *)(a2 + 16))
    return 0;
  sub_10002DA98(a1);
  if ((v4 & 1) == 0)
    return 0;
  v5 = *(_QWORD *)(a2 + 56) + 24 * v3;
  v6 = *(void **)v5;
  swift_bridgeObjectRetain(*(_QWORD *)(v5 + 16));
  v7 = v6;
  return v6;
}

uint64_t sub_10003D04C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  NSString v18;
  __n128 v19;
  uint64_t v21;

  type metadata accessor for Logger(0);
  __chkstk_darwin();
  v8 = (_QWORD *)(v5
                + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_parentInterfaceName);
  *v8 = 0;
  v8[1] = 0;
  v9 = (_QWORD *)(v5
                + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_eventHandler);
  *v9 = 0;
  v9[1] = 0;
  v10 = v5 + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_eventBuffer;
  *(_QWORD *)v10 = 0;
  *(_QWORD *)(v10 + 8) = 0;
  *(_BYTE *)(v10 + 16) = 1;
  v21 = 0;
  v11 = Apple80211Open(&v21);
  if (v11 || (v17 = v21) == 0)
  {
    swift_bridgeObjectRelease(a2);
  }
  else
  {
    v18 = String._bridgeToObjectiveC()();
    v19 = swift_bridgeObjectRelease(a2);
    v11 = Apple80211BindToInterfaceWithService(v17, a4, v18, 0, v19);

    if (!v11)
    {
      *(_DWORD *)(v5
                + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_service) = a4;
      *(_BYTE *)(v5 + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_role) = a5;
      __asm { BR              X10 }
    }
    Apple80211Close(v17);
  }
  v12 = sub_100012C84();
  v13 = swift_allocError(&type metadata for WiFiError, v12, 0, 0);
  *(_QWORD *)v14 = v11;
  *(_QWORD *)(v14 + 8) = 0;
  *(_BYTE *)(v14 + 16) = 0;
  swift_willThrow(v13);
  swift_bridgeObjectRelease(*(_QWORD *)(v5
                                      + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_parentInterfaceName
                                      + 8));
  sub_100012318(*(_QWORD *)(v5+ OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_eventHandler), *(_QWORD *)(v5+ OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_eventHandler+ 8));
  v15 = type metadata accessor for AppleDevice.InterfaceHandle(0);
  swift_deallocPartialClassInstance(v5, v15, *(unsigned int *)(*(_QWORD *)v5 + 48), *(unsigned __int16 *)(*(_QWORD *)v5 + 52));
  return v5;
}

uint64_t sub_10003D3D8()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  v1 = (uint64_t *)(v0
                 + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_eventHandler);
  v2 = *(_QWORD *)(v0
                 + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_eventHandler);
  if (v2)
  {
    v7 = *(_QWORD *)(v0
                   + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_eventHandler
                   + 8);
    v8 = swift_allocObject(&unk_1003DDBF8, 32, 7);
    *(_QWORD *)(v8 + 16) = v2;
    *(_QWORD *)(v8 + 24) = v7;
    sub_1000339E4(v2, v7);
    result = sub_100012318((uint64_t)sub_1000623F4, v8);
    __break(1u);
  }
  else
  {
    sub_1000339E4(0, *(_QWORD *)(v0+ OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_eventHandler+ 8));
    sub_100012318(0, 0);
    IOObjectRelease(*(_DWORD *)(v0
                              + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_service));
    Apple80211Close(*(_QWORD *)(v0
                              + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_reference));
    v3 = (_QWORD *)(v0
                  + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_eventBuffer);
    if ((*(_BYTE *)(v0
                   + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_eventBuffer
                   + 16) & 1) == 0)
    {
      if (*v3)
        swift_slowDealloc(*v3, -1, -1);
    }
    v4 = v0 + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_logger;
    v5 = type metadata accessor for Logger(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
    swift_bridgeObjectRelease(*(_QWORD *)(v0
                                        + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_parentInterfaceName
                                        + 8));
    sub_100012318(*v1, v1[1]);
    objc_release(*(id *)(v0
                       + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_queue));
    return v0;
  }
  return result;
}

uint64_t sub_10003D500()
{
  return sub_100050F48(sub_10003D3D8);
}

void sub_10003D8E8(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  id v11;
  id v12;
  id v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[4];

  v3 = v2;
  v6 = type metadata accessor for DispatchPredicate(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin();
  v9 = (_QWORD *)((char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_queue;
  if (a1)
  {
    v11 = *(id *)(v3 + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_queue);
    v12 = a1;
  }
  else
  {
    v11 = objc_retain(*(id *)(v3
                            + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_queue));
    v12 = v11;
  }
  *(_QWORD *)(v3 + v10) = v12;
  v13 = a1;

  v14 = *(void **)(v3 + v10);
  *v9 = v14;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v7 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v6);
  v15 = v14;
  LOBYTE(v14) = _dispatchPreconditionTest(_:)(v9);
  (*(void (**)(_QWORD *, uint64_t))(v7 + 8))(v9, v6);
  if ((v14 & 1) != 0)
  {
    v18[3] = a2;
    v16 = v3 + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_eventBuffer;
    if ((*(_BYTE *)(v3
                   + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_eventBuffer
                   + 16) & 1) == 0)
    {
      if (*(_QWORD *)v16)
        swift_slowDealloc(*(_QWORD *)v16, -1, -1);
    }
    v17 = swift_slowAlloc(2048, -1);
    *(_QWORD *)v16 = v17;
    *(_QWORD *)(v16 + 8) = v17 + 2048;
    *(_BYTE *)(v16 + 16) = 0;
    __asm { BR              X10 }
  }
  __break(1u);
  JUMPOUT(0x10003DE84);
}

uint64_t sub_10003DF70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10003DF98(a1, a2, a3, a4, (uint64_t)&unk_1003DE4F8, (uint64_t (*)(uint64_t, uint64_t, void *))&Apple80211RawEventMonitoringInit);
}

uint64_t sub_10003DF84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10003DF98(a1, a2, a3, a4, (uint64_t)&unk_1003DE520, (uint64_t (*)(uint64_t, uint64_t, void *))&Apple80211RawP2PEventMonitoringInit);
}

uint64_t sub_10003DF98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t, uint64_t, void *))
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[5];
  uint64_t v14;

  if (a3)
  {
    v13[4] = a3;
    v14 = a4;
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 1107296256;
    v13[2] = sub_100007324;
    v13[3] = a5;
    v9 = _Block_copy(v13);
    v10 = v14;
    swift_retain();
    swift_release(v10);
  }
  else
  {
    v9 = 0;
  }
  v11 = a6(a1, a2, v9);
  _Block_release(v9);
  return v11;
}

uint64_t sub_10003E04C(void (*a1)(_BYTE *), uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  _QWORD *v13;
  void *v14;
  id v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v3 = v2;
  v6 = type metadata accessor for DriverEvent(0);
  __chkstk_darwin();
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchPredicate(0);
  v10 = *(_QWORD *)(v9 - 8);
  result = __chkstk_darwin();
  v13 = (uint64_t *)((char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (a1)
  {
    v14 = *(void **)(v3
                   + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_queue);
    *v13 = v14;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v10 + 104))(v13, enum case for DispatchPredicate.onQueue(_:), v9);
    sub_1000339E4((uint64_t)a1, a2);
    v15 = v14;
    LOBYTE(v14) = _dispatchPreconditionTest(_:)(v13);
    (*(void (**)(_QWORD *, uint64_t))(v10 + 8))(v13, v9);
    if ((v14 & 1) == 0)
    {
      __break(1u);
      JUMPOUT(0x10003E3F4);
    }
    v16 = swift_allocObject(&unk_1003DDBD0, 32, 7);
    *(_QWORD *)(v16 + 16) = a1;
    *(_QWORD *)(v16 + 24) = a2;
    swift_retain();
    sub_10003D8E8(0, (uint64_t)sub_10006462C);
    swift_release(v16);
    v17 = (_QWORD *)(v3
                   + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_eventHandler);
    v18 = *(_QWORD *)(v3
                    + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_eventHandler);
    v19 = *(_QWORD *)(v3
                    + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_eventHandler
                    + 8);
    *v17 = a1;
    v17[1] = a2;
    swift_retain();
    sub_100012318(v18, v19);
    *v8 = 3;
    swift_storeEnumTagMultiPayload(v8, v6, 4);
    a1(v8);
    sub_100012318((uint64_t)a1, a2);
    return sub_100063824((uint64_t)v8, type metadata accessor for DriverEvent);
  }
  return result;
}

void sub_10003E408()
{
  _QWORD *v0;
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  String.hash(into:)(v1, *v0, v0[1]);
  __asm { BR              X10 }
}

Swift::Int sub_10003E470()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE v4[120];

  String.hash(into:)(v4, 1818523489, 0xE400000000000000);
  swift_bridgeObjectRelease(0xE400000000000000);
  v1 = *(_QWORD *)(v0 + 32);
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + 24);
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain(v1);
    String.hash(into:)(v4, v2, v1);
    swift_bridgeObjectRelease(v1);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

void sub_10003E54C()
{
  sub_10003E408();
}

void sub_10003E58C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(unsigned __int8 *)(v1 + 16);
  String.hash(into:)(a1, *(_QWORD *)v1, *(_QWORD *)(v1 + 8));
  __asm { BR              X9 }
}

void sub_10003E5EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  String.hash(into:)(v2, 1818523489, 0xE400000000000000);
  swift_bridgeObjectRelease(0xE400000000000000);
  if (v0)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain(v0);
    String.hash(into:)(v2, v1, v0);
    swift_bridgeObjectRelease(v0);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

void sub_10003E6C4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v4[9];

  v1 = *v0;
  v2 = v0[1];
  v3 = *((unsigned __int8 *)v0 + 16);
  Hasher.init(_seed:)(v4);
  String.hash(into:)(v4, v1, v2);
  __asm { BR              X9 }
}

Swift::Int sub_10003E738()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[136];

  String.hash(into:)(v3, 1818523489, 0xE400000000000000);
  swift_bridgeObjectRelease(0xE400000000000000);
  if (v0)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain(v0);
    String.hash(into:)(v3, v1, v0);
    swift_bridgeObjectRelease(v0);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

uint64_t sub_10003E80C(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[4];
  uint64_t v8;
  _OWORD v9[4];
  uint64_t v10;

  v2 = *(_OWORD *)(a1 + 48);
  v7[2] = *(_OWORD *)(a1 + 32);
  v7[3] = v2;
  v8 = *(_QWORD *)(a1 + 64);
  v3 = *(_OWORD *)(a1 + 16);
  v7[0] = *(_OWORD *)a1;
  v7[1] = v3;
  v4 = *(_OWORD *)(a2 + 48);
  v9[2] = *(_OWORD *)(a2 + 32);
  v9[3] = v4;
  v10 = *(_QWORD *)(a2 + 64);
  v5 = *(_OWORD *)(a2 + 16);
  v9[0] = *(_OWORD *)a2;
  v9[1] = v5;
  return sub_10005EA2C((uint64_t *)v7, v9) & 1;
}

id sub_10003E864()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  NSString v4;
  void *v5;
  id v6;

  v1 = *(void **)(v0 + 64);
  v2 = v1;
  if (v1 == (void *)1)
  {
    v3 = objc_allocWithZone((Class)WiFiSoftError);
    v4 = String._bridgeToObjectiveC()();
    v2 = objc_msgSend(v3, "initWithName:", v4);

    v5 = *(void **)(v0 + 64);
    *(_QWORD *)(v0 + 64) = v2;
    v6 = v2;
    sub_10005E884(v5);
  }
  sub_100062B74(v1);
  return v2;
}

unint64_t AppleDevice.machServiceName.getter()
{
  return 0xD000000000000012;
}

uint64_t AppleDevice.keychain.getter()
{
  uint64_t v0;

  return swift_retain(*(_QWORD *)(v0 + 184));
}

uint64_t AppleDevice.preferencesStorage.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  id v4;

  v1 = v0[24];
  v2 = v0[25];
  v3 = (void *)v0[26];
  swift_retain(v1);
  swift_retain(v2);
  v4 = v3;
  return v1;
}

IONotificationPortRef AppleDevice.__allocating_init()()
{
  uint64_t v0;

  swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  return AppleDevice.init()();
}

IONotificationPortRef AppleDevice.init()()
{
  io_iterator_t *v0;
  io_iterator_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  _DWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  IONotificationPortRef result;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  _DWORD *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  IONotificationPort *v48;
  unint64_t v49;
  Class isa;
  IONotificationPort *v51;
  const __CFDictionary *v52;
  const __CFDictionary *v53;
  kern_return_t v54;
  void *v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  id v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  id v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  _QWORD *v94;
  void **aBlock;
  uint64_t v96;
  void *v97;
  void *v98;
  void *v99;
  uint64_t v100;

  v1 = v0;
  v88 = *(_QWORD *)v0;
  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v82 = *(_QWORD *)(v2 - 8);
  v83 = v2;
  __chkstk_darwin();
  v81 = (char *)&v76 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Logger(0);
  v89 = *(_QWORD *)(v4 - 8);
  v90 = v4;
  __chkstk_darwin();
  v77 = v5;
  v78 = (char *)&v76 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012C44(&qword_100405038);
  __chkstk_darwin();
  v87 = (uint64_t)&v76 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for RoutingSocket(0);
  v85 = *(_QWORD *)(v7 - 8);
  v86 = v7;
  __chkstk_darwin();
  v84 = (uint64_t)&v76 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v92 = *(_QWORD *)(v9 - 8);
  v93 = (char *)v9;
  __chkstk_darwin();
  v11 = (char *)&v76 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin();
  v14 = (char *)&v76 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v80 = type metadata accessor for DispatchQoS(0);
  v79 = *(_QWORD *)(v80 - 8);
  __chkstk_darwin();
  v16 = (char *)&v76 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v91 = type metadata accessor for Lock();
  v17 = swift_allocObject(v91, 24, 7);
  v18 = (_DWORD *)swift_slowAlloc(4, -1);
  *(_QWORD *)(v17 + 16) = v18;
  *v18 = 0;
  *((_QWORD *)v1 + 3) = v17;
  *((_QWORD *)v1 + 4) = &_swiftEmptyDictionarySingleton;
  *((_QWORD *)v1 + 5) = _swiftEmptyArrayStorage;
  *((_QWORD *)v1 + 6) = objc_msgSend(objc_allocWithZone((Class)CWFInterface), "initWithServiceType:", 1);
  v19 = sub_1000644C8(0, (unint64_t *)&qword_1004042B0, OS_dispatch_queue_ptr);
  static DispatchQoS.unspecified.getter(v19);
  aBlock = (void **)_swiftEmptyArrayStorage;
  v20 = sub_100011DE4((unint64_t *)&unk_10040FFC0, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v21 = sub_100012C44((uint64_t *)&unk_1004042C0);
  v22 = sub_100011770(qword_10040FFD0, (uint64_t *)&unk_1004042C0, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v21, v22, v12, v20);
  (*(void (**)(char *, _QWORD, char *))(v92 + 104))(v11, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v93);
  v93 = v16;
  v23 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000001BLL, 0x8000000100362900, v16, v14, v11, 0);
  *((_QWORD *)v1 + 19) = 0;
  *((_QWORD *)v1 + 7) = v23;
  *((_QWORD *)v1 + 8) = 1;
  *(_OWORD *)(v1 + 18) = 0u;
  *(_OWORD *)(v1 + 22) = 0u;
  *(_OWORD *)(v1 + 26) = 0u;
  *(_OWORD *)(v1 + 30) = 0u;
  *((_QWORD *)v1 + 17) = 0;
  *((_QWORD *)v1 + 20) = 0;
  *((_QWORD *)v1 + 21) = 0;
  *((_QWORD *)v1 + 22) = &_swiftEmptyDictionarySingleton;
  result = (IONotificationPortRef)kSecAttrViewHintHome;
  if (kSecAttrViewHintHome)
  {
    v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(kSecAttrViewHintHome);
    v27 = v26;
    v28 = type metadata accessor for AppleKeychain(0);
    v29 = swift_allocObject(v28, *(unsigned int *)(v28 + 48), *(unsigned __int16 *)(v28 + 52));
    Logger.init(subsystem:category:)(0x6C7070612E6D6F63, 0xED00006E616E2E65, 0xD000000000000011, 0x8000000100361270);
    *(_DWORD *)(v29 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_notificationToken) = -1;
    v30 = (_QWORD *)(v29 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_tokens);
    *v30 = &_swiftEmptySetSingleton;
    v30[1] = 0;
    *(_QWORD *)(v29 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_keychainMonitors) = &_swiftEmptyDictionarySingleton;
    v31 = (_QWORD *)(v29 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_keychainAccessGroup);
    *v31 = 0xD000000000000012;
    v31[1] = 0x8000000100360DF0;
    v32 = (uint64_t *)(v29 + OBJC_IVAR____TtC7CoreP2P13AppleKeychain_keychainView);
    *v32 = v25;
    v32[1] = v27;
    *((_QWORD *)v1 + 23) = v29;
    if (qword_100403F28 != -1)
      swift_once(&qword_100403F28, sub_1000BC658);
    v33 = (void *)static SCPreferencesRef.p2pPreferences;
    v34 = type metadata accessor for InMemoryPreferenceStorage();
    v35 = swift_allocObject(v34, 24, 7);
    *(_QWORD *)(v35 + 16) = &_swiftEmptyDictionarySingleton;
    v36 = swift_allocObject(v91, 24, 7);
    v37 = v33;
    v38 = (_DWORD *)swift_slowAlloc(4, -1);
    *(_QWORD *)(v36 + 16) = v38;
    *v38 = 0;
    *((_QWORD *)v1 + 24) = v36;
    *((_QWORD *)v1 + 25) = v35;
    *((_QWORD *)v1 + 26) = v37;
    v39 = (uint64_t)v1 + OBJC_IVAR____TtC7CoreP2P11AppleDevice_interfaceDiscoverer;
    *(_QWORD *)(v39 + 32) = 0;
    *(_OWORD *)v39 = 0u;
    *(_OWORD *)(v39 + 16) = 0u;
    v40 = (char *)v1 + OBJC_IVAR____TtC7CoreP2P11AppleDevice_logger;
    Logger.init(subsystem:category:)(0xD000000000000012, 0x8000000100360DF0, 0x656369766564, 0xE600000000000000);
    v41 = type metadata accessor for Socket();
    swift_allocObject(v41, 20, 7);
    v42 = Socket.init(domain:type:proto:)(2, 2, 0);
    if (!v42)
      goto LABEL_7;
    v43 = v42;
    v44 = v87;
    RoutingSocket.init()(v87);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v85 + 48))(v44, 1, v86) == 1)
    {
      swift_release(v43);
      sub_100033A84(v44, &qword_100405038);
LABEL_7:
      swift_release(*((_QWORD *)v1 + 3));
      swift_bridgeObjectRelease(*((_QWORD *)v1 + 4));
      swift_bridgeObjectRelease(*((_QWORD *)v1 + 5));

      sub_10005E884(*((id *)v1 + 8));
      sub_100033A84((uint64_t)(v1 + 18), &qword_100405050);

      swift_release(*((_QWORD *)v1 + 15));
      swift_release(*((_QWORD *)v1 + 16));

      swift_bridgeObjectRelease(*((_QWORD *)v1 + 22));
      swift_release(*((_QWORD *)v1 + 23));
      v45 = *((_QWORD *)v1 + 24);
      v46 = *((_QWORD *)v1 + 25);

      swift_release(v46);
      swift_release(v45);
      sub_100033A84(v39, &qword_100405058);
      (*(void (**)(char *, uint64_t))(v89 + 8))(v40, v90);
      swift_deallocPartialClassInstance(v1, v88, *(unsigned int *)(*(_QWORD *)v1 + 48), *(unsigned __int16 *)(*(_QWORD *)v1 + 52));
      return 0;
    }
    v47 = v84;
    sub_100033AC0(v44, v84, type metadata accessor for RoutingSocket);
    *((_QWORD *)v1 + 2) = v43;
    sub_1000637E0(v47, (uint64_t)v1 + OBJC_IVAR____TtC7CoreP2P11AppleDevice_neighborDiscoveryRoutingSocket, type metadata accessor for RoutingSocket);
    swift_retain();
    result = IONotificationPortCreate(kIOMainPortDefault);
    if (result)
    {
      v48 = result;
      *((_QWORD *)v1 + 18) = result;
      if (qword_100404108 != -1)
        swift_once(&qword_100404108, sub_10017E140);
      IONotificationPortSetDispatchQueue(v48, (dispatch_queue_t)static OS_dispatch_queue.p2p);
      v49 = sub_10001EB54((uint64_t)&off_1003D6B58);
      isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v49);
      v51 = (IONotificationPort *)*((_QWORD *)v1 + 18);
      swift_beginAccess(v1 + 38, &aBlock, 33, 0);
      v52 = isa;
      LODWORD(isa) = IOServiceAddMatchingNotification(v51, "IOServiceMatched", v52, (IOServiceMatchingCallback)sub_1000410B8, v1, v1 + 38);
      swift_endAccess(&aBlock);
      if (!(_DWORD)isa)
      {
        swift_beginAccess(v1 + 39, &aBlock, 33, 0);
        v53 = v52;
        v54 = IOServiceAddMatchingNotification(v51, "IOServiceTerminate", v53, (IOServiceMatchingCallback)sub_100041A78, v1, v1 + 39);
        swift_endAccess(&aBlock);
        if (!v54)
        {
          v55 = (void *)*((_QWORD *)v1 + 6);
          objc_msgSend(v55, "setTargetQueue:", *((_QWORD *)v1 + 7));
          v56 = swift_allocObject(&unk_1003DD518, 24, 7);
          swift_weakInit(v56 + 16, v1);
          v99 = sub_10005E8B8;
          v100 = v56;
          aBlock = _NSConcreteStackBlock;
          v96 = 1107296256;
          v97 = sub_1000420F4;
          v98 = &unk_1003DD530;
          v57 = _Block_copy(&aBlock);
          v58 = v100;
          v59 = v55;
          swift_release(v58);
          objc_msgSend(v59, "setEventHandler:", v57);
          _Block_release(v57);

          v60 = (void *)*((_QWORD *)v1 + 6);
          objc_msgSend(v60, "activate");
          v92 = *((_QWORD *)v1 + 7);
          v62 = v89;
          v61 = v90;
          v63 = v78;
          (*(void (**)(char *, uint64_t, uint64_t))(v89 + 16))(v78, (uint64_t)v1 + OBJC_IVAR____TtC7CoreP2P11AppleDevice_logger, v90);
          v64 = *(unsigned __int8 *)(v62 + 80);
          v65 = (v64 + 24) & ~v64;
          v66 = swift_allocObject(&unk_1003DD568, v65 + v77, v64 | 7);
          *(_QWORD *)(v66 + 16) = v60;
          (*(void (**)(uint64_t, char *, uint64_t))(v62 + 32))(v66 + v65, v63, v61);
          v99 = sub_10005E934;
          v100 = v66;
          aBlock = _NSConcreteStackBlock;
          v96 = 1107296256;
          v97 = sub_100006F0C;
          v98 = &unk_1003DD580;
          v67 = _Block_copy(&aBlock);
          v68 = v60;
          v69 = v93;
          static DispatchQoS.unspecified.getter(v68);
          v94 = _swiftEmptyArrayStorage;
          v70 = sub_100011DE4((unint64_t *)&qword_100408710, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
          v71 = sub_100012C44((uint64_t *)&unk_100405070);
          v72 = sub_100011770((unint64_t *)&qword_100408720, (uint64_t *)&unk_100405070, (const char *)&protocol conformance descriptor for [A]);
          v73 = v81;
          v74 = v71;
          v75 = v83;
          dispatch thunk of SetAlgebra.init<A>(_:)(&v94, v74, v72, v83, v70);
          OS_dispatch_queue.async(group:qos:flags:execute:)(0, v69, v73, v67);
          _Block_release(v67);
          swift_release(v43);

          (*(void (**)(char *, uint64_t))(v82 + 8))(v73, v75);
          (*(void (**)(char *, uint64_t))(v79 + 8))(v69, v80);
          sub_100063824(v84, type metadata accessor for RoutingSocket);
          swift_release(v100);
          return (IONotificationPortRef)v1;
        }
      }
      sub_100063824(v47, type metadata accessor for RoutingSocket);
      swift_release(v1);

      swift_release(v43);
      return 0;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

void sub_10003F448(io_iterator_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  io_object_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  __n128 v14;
  __CFString *v15;
  CFTypeRef CFProperty;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  io_object_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint64_t v34;
  void **v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  int v39;
  uint64_t v40;
  uint64_t KeyPath;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  os_log_type_t v48;
  uint64_t v49;
  void **v50;
  void **v51;
  char *v52;
  uint64_t v53;
  os_log_type_t v54;
  _BOOL4 v55;
  uint64_t v56;
  __CFString *v57;
  CFTypeRef v58;
  uint64_t v59;
  uint64_t v60;
  __CFString *v61;
  _QWORD *v62;
  int v63;
  uint64_t v64;
  unint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  NSObject *v73;
  os_log_type_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  NSObject *v78;
  os_log_type_t v79;
  BOOL v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v91;
  void **v92;
  void **v93;
  void **v94;
  uint64_t v95;
  _QWORD *v96;
  unint64_t v97;
  uint64_t v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  unint64_t v102;
  unint64_t v103;
  char v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  uint64_t v111;
  __int128 v112;
  __int128 v113;
  void (*v114)(uint64_t, char *, uint64_t);
  unint64_t *v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  const void *v124;
  char *v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  __int128 v129;
  uint64_t v130;
  __int128 v131;
  __int128 v132;
  uint64_t v133;
  __int128 v134;
  __int128 v135;
  void *v136;
  _QWORD *v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  _QWORD *v146;
  unint64_t v147;
  unint64_t v148;
  uint64_t v149;
  _QWORD *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  void *v154;
  uint64_t v155;
  uint64_t v156;
  char v157;
  unint64_t v158;
  uint64_t v159;
  NSObject *v160;
  os_log_type_t v161;
  uint8_t *v162;
  void **v163;
  _OWORD *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  void **v168;
  void *v169;
  uint64_t v170;
  void **v171;
  int v172;
  NSObject *v173;
  unint64_t v174;
  unint64_t v175;
  unint64_t v176;
  uint64_t v177;
  unint64_t v178;
  __n128 v179;
  __n128 v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t *v183;
  char *v184;
  unint64_t v185;
  unint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  char *v190;
  uint64_t v191;
  uint64_t v192;
  char *v193;
  uint64_t v194;
  uint64_t v195;
  char *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  __n128 v200;
  unint64_t v201;
  unsigned int v202;
  _QWORD *v203;
  uint64_t v204;
  char *v205;
  uint64_t v206;
  io_iterator_t v207;
  CFAllocatorRef v208;
  _QWORD *v209;
  void **v210;
  uint64_t v211;
  uint64_t (*v212)(uint64_t);
  void *v213;
  void *v214;
  uint64_t v215;
  CFTypeRef v216[5];
  _QWORD *v217;
  uint64_t v218;
  _OWORD v219[3];
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  uint64_t v227;
  __int128 v228;
  _BYTE v229[32];
  __int128 v230;
  uint64_t v231;

  v2 = (uint64_t)v1;
  v197 = *v1;
  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v194 = *(_QWORD *)(v4 - 8);
  v195 = v4;
  __chkstk_darwin();
  v193 = (char *)&v167 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v191 = *(_QWORD *)(v6 - 8);
  v192 = v6;
  __chkstk_darwin();
  v190 = (char *)&v167 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Logger(0);
  v188 = *(_QWORD *)(v8 - 8);
  v189 = v8;
  v9 = *(_QWORD *)(v188 + 64);
  __chkstk_darwin();
  v196 = (char *)&v167 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v198 = *(_QWORD *)(v2 + 24);
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v198 + 16));
  v207 = a1;
  v10 = IOIteratorNext(a1);
  if (v10)
  {
    LODWORD(v11) = v10;
    v206 = v2 + OBJC_IVAR____TtC7CoreP2P11AppleDevice_logger;
    v12 = (_QWORD *)(v2 + 40);
    v13 = v2 + OBJC_IVAR____TtC7CoreP2P11AppleDevice_interfaceDiscoverer;
    v203 = (_QWORD *)(v2 + 32);
    swift_beginAccess(v2 + 32, &v222, 0, 0);
    swift_beginAccess(v2 + 40, &v221, 0, 0);
    v177 = v13;
    v14 = swift_beginAccess(v13, &v220, 0, 0);
    v204 = 0;
    v183 = &v218;
    v208 = kCFAllocatorDefault;
    v181 = v9 + 7;
    v205 = (char *)&type metadata for Swift.AnyObject + 8;
    v14.n128_u64[0] = 136315138;
    v200 = v14;
    v186 = 0x8000000100363920;
    v184 = (char *)&type metadata for Any + 8;
    v185 = 0x8000000100363940;
    v182 = 0x6E6574614C776F6CLL;
    v14.n128_u64[0] = 136315394;
    v179 = v14;
    v14.n128_u64[0] = 136315650;
    v180 = v14;
    v176 = (unint64_t)"WiFi-Aware Discovery+Data";
    v178 = 0x8000000100363980;
    v174 = (unint64_t)"IO80211InterfaceRole";
    v175 = 0x8000000100363960;
    v199 = v2;
    v209 = (_QWORD *)(v2 + 40);
    do
    {
      v15 = (__CFString *)String._bridgeToObjectiveC()();
      CFProperty = IORegistryEntryCreateCFProperty(v11, v15, v208, 0);

      if (!CFProperty
        || (*(_QWORD *)&v219[0] = CFProperty,
            v17 = swift_dynamicCast(&v210, v219, v205, &type metadata for String, 6),
            (v17 & 1) == 0))
      {
        v37 = Logger.logObject.getter(v17);
        v38 = static os_log_type_t.error.getter(v37);
        if (os_log_type_enabled(v37, v38))
        {
          v39 = v11;
          v11 = swift_slowAlloc(2, -1);
          *(_WORD *)v11 = 0;
          _os_log_impl((void *)&_mh_execute_header, v37, v38, "Matched a service but unable to query its interface name", (uint8_t *)v11, 2u);
          v40 = v11;
          LODWORD(v11) = v39;
          goto LABEL_27;
        }
LABEL_4:

        goto LABEL_5;
      }
      v18 = (uint64_t)v210;
      v19 = v211;
      v20 = *v203;
      if (*(_QWORD *)(*v203 + 16))
      {
        swift_bridgeObjectRetain(*v203);
        v21 = v18;
        v22 = sub_10000FA00(v18, v19);
        if ((v23 & 1) != 0)
        {
          v24 = v22;
          v25 = v11;
          v26 = *(_DWORD *)(v20 + 36);
          swift_bridgeObjectRelease(v20);
          if (v24 < 0)
            goto LABEL_123;
          v27 = *v203;
          if (v24 >= 1 << *(_BYTE *)(*v203 + 32))
            goto LABEL_123;
          if (((*(_QWORD *)(v27 + (((unint64_t)v24 >> 3) & 0xFFFFFFFFFFFFF8) + 64) >> v24) & 1) == 0)
            goto LABEL_124;
          if (v26 == *(_DWORD *)(v27 + 36))
          {
            v28 = *(_QWORD *)(*(_QWORD *)(v27 + 56) + 8 * v24);
            v29 = OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_service;
            v30 = *(_DWORD *)(v28
                            + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_service);
            *(_DWORD *)(v28
                      + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_service) = v25;
            swift_retain();
            IOObjectRelease(v30);
            IOObjectRetain(*(_DWORD *)(v28 + v29));
            swift_release(v28);
            v31 = swift_bridgeObjectRetain(v19);
            v32 = Logger.logObject.getter(v31);
            v33 = static os_log_type_t.info.getter();
            if (os_log_type_enabled(v32, v33))
            {
              v34 = swift_slowAlloc(12, -1);
              v35 = (void **)swift_slowAlloc(32, -1);
              v210 = v35;
              *(_DWORD *)v34 = v200.n128_u32[0];
              swift_bridgeObjectRetain(v19);
              *(_QWORD *)(v34 + 4) = sub_100013CC8(v21, v19, (uint64_t *)&v210);
              swift_bridgeObjectRelease_n(v19, 3);
              _os_log_impl((void *)&_mh_execute_header, v32, v33, "Already discovered %s", (uint8_t *)v34, 0xCu);
              swift_arrayDestroy(v35, 1, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v35, -1, -1);
              v36 = v34;
              v2 = v199;
              swift_slowDealloc(v36, -1, -1);
            }
            else
            {
              swift_bridgeObjectRelease_n(v19, 2);
            }

            LODWORD(v11) = v25;
            goto LABEL_5;
          }
          goto LABEL_125;
        }
        swift_bridgeObjectRelease(v20);
      }
      v202 = v11;
      memset(v219, 0, 44);
      KeyPath = swift_getKeyPath(&unk_10033B090);
      v42 = __chkstk_darwin();
      v164 = v219;
      v165 = v42;
      v166 = 16;
      v201 = v18;
      v43 = v204;
      sub_100047824((_QWORD *(*)(uint64_t *__return_ptr, _QWORD *))sub_10000642C, (uint64_t)(&v167 - 6), v18, v19);
      v204 = v43;
      swift_release(KeyPath);
      v44 = *(unsigned int *)(*(_QWORD *)(v2 + 16) + 16);
      v45 = sub_10033428C(0);
      if (ioctl(_:_:_:)(v44, v45, v219) || (v219[1] & 0xE0) != 0x80)
      {
        v53 = swift_bridgeObjectRetain(v19);
        v37 = Logger.logObject.getter(v53);
        v54 = static os_log_type_t.info.getter();
        v55 = os_log_type_enabled(v37, v54);
        LODWORD(v11) = v202;
        if (v55)
        {
          v49 = swift_slowAlloc(12, -1);
          v50 = (void **)swift_slowAlloc(32, -1);
          v210 = v50;
          *(_DWORD *)v49 = v200.n128_u32[0];
          swift_bridgeObjectRetain(v19);
          *(_QWORD *)(v49 + 4) = sub_100013CC8(v201, v19, (uint64_t *)&v210);
          swift_bridgeObjectRelease_n(v19, 3);
          _os_log_impl((void *)&_mh_execute_header, v37, v54, "Ignoring %s because its not a WiFi interface", (uint8_t *)v49, 0xCu);
          v52 = (char *)&type metadata for Any + 8;
          v51 = v50;
LABEL_26:
          swift_arrayDestroy(v51, 1, v52);
          swift_slowDealloc(v50, -1, -1);
          v40 = v49;
LABEL_27:
          swift_slowDealloc(v40, -1, -1);
          goto LABEL_4;
        }
LABEL_3:
        swift_bridgeObjectRelease_n(v19, 2);
        goto LABEL_4;
      }
      sub_100011DE4(&qword_1004050B8, type metadata accessor for AppleDevice, (uint64_t)&protocol conformance descriptor for AppleDevice);
      v46 = v204;
      static ApplePlatform.withInterface<A>(_:matchingFamily:_:)((uint64_t)&type metadata for UInt32, (uint64_t)&v210);
      v204 = v46;
      v11 = v202;
      if ((BYTE4(v210) & 1) != 0)
      {
        v47 = swift_bridgeObjectRetain(v19);
        v37 = Logger.logObject.getter(v47);
        v48 = static os_log_type_t.error.getter(v37);
        if (os_log_type_enabled(v37, v48))
        {
          v49 = swift_slowAlloc(12, -1);
          v50 = (void **)swift_slowAlloc(32, -1);
          v210 = v50;
          *(_DWORD *)v49 = v200.n128_u32[0];
          swift_bridgeObjectRetain(v19);
          *(_QWORD *)(v49 + 4) = sub_100013CC8(v201, v19, (uint64_t *)&v210);
          swift_bridgeObjectRelease_n(v19, 3);
          _os_log_impl((void *)&_mh_execute_header, v37, v48, "Ignoring %s because no interface index found", (uint8_t *)v49, 0xCu);
          v51 = v50;
          v52 = v184;
          goto LABEL_26;
        }
        goto LABEL_3;
      }
      v187 = v19;
      v56 = v210;
      v57 = (__CFString *)String._bridgeToObjectiveC()();
      v58 = IORegistryEntryCreateCFProperty(v11, v57, v208, 0);

      if (v58
        && (v216[0] = v58,
            (swift_dynamicCast(&v217, v216, (char *)&type metadata for Swift.AnyObject + 8, &type metadata for String, 6) & 1) != 0))
      {
        v59 = (uint64_t)v217;
        v60 = v218;
        if (!v218)
          goto LABEL_116;
      }
      else
      {
        v61 = (__CFString *)String._bridgeToObjectiveC()();
        v62 = IORegistryEntryCreateCFProperty(v11, v61, v208, 0);

        if (!v62)
          goto LABEL_116;
        v217 = v62;
        v63 = swift_dynamicCast(&v210, &v217, (char *)&type metadata for Swift.AnyObject + 8, &type metadata for String, 6);
        v60 = v63 ? v211 : 0;
        v59 = v63 ? (uint64_t)v210 : 0;
        if (!v60)
          goto LABEL_116;
      }
      if (v59 == 0x7274736172666E49 && v60 == 0xEE00657275746375)
      {
        v172 = 0;
        v64 = 0x7274736172666E69;
      }
      else
      {
        if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7274736172666E49, 0xEE00657275746375, v59, v60, 0) & 1) == 0)
        {
          if (v59 == 0x6B6E694C726941 && v60 == 0xE700000000000000
            || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6B6E694C726941, 0xE700000000000000, v59, v60, 0) & 1) != 0)
          {
            v172 = 1;
            v65 = 0xE400000000000000;
            v64 = 1818523489;
          }
          else
          {
            v65 = 0xED0000746E656D65;
            v64 = 0x67616E614D6E616ELL;
            if (v59 == 0xD000000000000014 && v60 == v178
              || (_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014, v176 | 0x8000000000000000, v59, v60, 0) & 1) != 0|| v59 == 0xD000000000000019 && v60 == v175|| (_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000019, v174 | 0x8000000000000000, v59, v60, 0) & 1) != 0)
            {
              v172 = 2;
            }
            else
            {
              v64 = 0x617461446E616ELL;
              if ((v59 != 0x6177412D69466957 || v60 != 0xEF61746144206572)
                && (_stringCompareWithSmolCheck(_:_:expecting:)(0x6177412D69466957, 0xEF61746144206572, v59, v60, 0) & 1) == 0)
              {
                if (v59 == 0x6E6574614C776F4CLL && v60 == 0xEA00000000007963
                  || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6E6574614C776F4CLL, 0xEA00000000007963, v59, v60, 0) & 1) != 0)
                {
                  swift_bridgeObjectRelease(v60);
                  swift_bridgeObjectRelease(0xEA00000000007963);
                  v172 = 4;
LABEL_60:
                  v2 = v199;
                  v67 = v187;
                  sub_100042718(v199, v172, v201, v187);
                  swift_bridgeObjectRelease(v67);
                  goto LABEL_5;
                }
                if (v59 == 0x504174666F53 && v60 == 0xE600000000000000)
                {
                  swift_bridgeObjectRelease(v187);
                  swift_bridgeObjectRelease(0xE600000000000000);
                  v2 = v199;
                  LODWORD(v11) = v202;
                  v12 = v209;
                  goto LABEL_5;
                }
                v157 = _stringCompareWithSmolCheck(_:_:expecting:)(0x504174666F53, 0xE600000000000000, v59, v60, 0);
                swift_bridgeObjectRelease(v60);
                LODWORD(v11) = v202;
                v12 = v209;
                if ((v157 & 1) != 0)
                {
                  swift_bridgeObjectRelease(v187);
                  v2 = v199;
                  goto LABEL_5;
                }
LABEL_116:
                v158 = v187;
                v159 = swift_bridgeObjectRetain(v187);
                v160 = Logger.logObject.getter(v159);
                v161 = static os_log_type_t.error.getter(v160);
                if (os_log_type_enabled(v160, v161))
                {
                  v162 = (uint8_t *)swift_slowAlloc(12, -1);
                  v163 = (void **)swift_slowAlloc(32, -1);
                  v210 = v163;
                  *(_DWORD *)v162 = v200.n128_u32[0];
                  swift_bridgeObjectRetain(v158);
                  v217 = (_QWORD *)sub_100013CC8(v201, v158, (uint64_t *)&v210);
                  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v217, v183);
                  swift_bridgeObjectRelease_n(v158, 3);
                  _os_log_impl((void *)&_mh_execute_header, v160, v161, "Unable to find role for interface: %s", v162, 0xCu);
                  swift_arrayDestroy(v163, 1, (char *)&type metadata for Any + 8);
                  swift_slowDealloc(v163, -1, -1);
                  swift_slowDealloc(v162, -1, -1);
                }
                else
                {
                  swift_bridgeObjectRelease_n(v158, 2);
                }

                v2 = v199;
                goto LABEL_5;
              }
              v172 = 3;
              v65 = 0xE700000000000000;
            }
          }
          goto LABEL_59;
        }
        v172 = 0;
        v64 = 0x7274736172666E69;
      }
      v65 = 0xEE00657275746375;
LABEL_59:
      swift_bridgeObjectRelease(v60);
      v66 = _stringCompareWithSmolCheck(_:_:expecting:)(v64, v65, v182, 0xEA00000000007963, 0);
      swift_bridgeObjectRelease(v65);
      if ((v66 & 1) != 0)
        goto LABEL_60;
      v68 = type metadata accessor for AppleDevice.InterfaceHandle(0);
      swift_allocObject(v68, *(unsigned int *)(v68 + 48), *(unsigned __int16 *)(v68 + 52));
      v69 = v187;
      swift_bridgeObjectRetain(v187);
      v70 = v204;
      v71 = sub_10003D04C(v201, v69, v56, v11, v172);
      if (v70)
      {
        swift_bridgeObjectRetain(v69);
        swift_errorRetain(v70);
        swift_bridgeObjectRetain(v69);
        v72 = swift_errorRetain(v70);
        v73 = Logger.logObject.getter(v72);
        v74 = static os_log_type_t.error.getter(v73);
        if (os_log_type_enabled(v73, v74))
        {
          v173 = v73;
          v75 = swift_slowAlloc(32, -1);
          v170 = swift_slowAlloc(8, -1);
          v171 = (void **)swift_slowAlloc(64, -1);
          v210 = v171;
          *(_DWORD *)v75 = v180.n128_u32[0];
          swift_bridgeObjectRetain(v69);
          v217 = (_QWORD *)sub_100013CC8(v201, v69, (uint64_t *)&v210);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v217, v183);
          swift_bridgeObjectRelease_n(v69, 3);
          *(_WORD *)(v75 + 12) = 2080;
          __asm { BR              X9 }
        }
        swift_errorRelease(v70);
        swift_bridgeObjectRelease_n(v69, 2);

        swift_errorRelease(v70);
        swift_errorRelease(v70);
        v2 = v199;
        sub_100042718(v199, v172, v201, v69);
        swift_bridgeObjectRelease(v69);
        v204 = 0;
        goto LABEL_5;
      }
      v76 = v71;
      swift_bridgeObjectRetain_n(v69, 2);
      v77 = swift_retain();
      v78 = Logger.logObject.getter(v77);
      v79 = static os_log_type_t.default.getter();
      v80 = os_log_type_enabled(v78, v79);
      v81 = v69;
      v167 = v76;
      v204 = 0;
      if (v80)
      {
        v82 = swift_slowAlloc(22, -1);
        v210 = (void **)swift_slowAlloc(64, -1);
        *(_DWORD *)v82 = v179.n128_u32[0];
        swift_bridgeObjectRetain(v69);
        v217 = (_QWORD *)sub_100013CC8(v201, v69, (uint64_t *)&v210);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v217, v183);
        swift_bridgeObjectRelease_n(v69, 3);
        *(_WORD *)(v82 + 12) = 2080;
        __asm { BR              X9 }
      }
      swift_bridgeObjectRelease_n(v69, 2);

      v214 = 0;
      v211 = 0;
      v212 = 0;
      v210 = 0;
      LODWORD(v213) = 0;
      v83 = swift_slowAlloc(16, -1);
      v84 = v201;
      sub_10000FAF4((uint64_t)&v210, 0x61uLL, v83, v83 + 16, 0, v201, v81);
      if (!Apple80211RawGet(*(_QWORD *)(v76+ OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_reference), &v210))
      {
        v85 = String.init(cString:)(v83);
        v86 = (uint64_t *)(v76
                        + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_parentInterfaceName);
        v87 = *(_QWORD *)(v76
                        + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_parentInterfaceName
                        + 8);
        *v86 = v85;
        v86[1] = v88;
        swift_bridgeObjectRelease(v87);
      }
      swift_slowDealloc(v83, -1, -1);
      v89 = v203;
      swift_beginAccess(v203, &v210, 33, 0);
      swift_bridgeObjectRetain(v81);
      swift_retain();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v89);
      v217 = (_QWORD *)*v89;
      *v89 = 0x8000000000000000;
      sub_100030990(v76, v84, v81, isUniquelyReferenced_nonNull_native);
      v91 = *v89;
      *v89 = v217;
      swift_bridgeObjectRelease(v81);
      swift_bridgeObjectRelease(v91);
      swift_endAccess(&v210);
      v92 = *(void ***)(*v12 + 16);
      if (!v92)
      {
        swift_release(v76);
LABEL_90:
        __asm { BR              X9 }
      }
      v93 = 0;
      v94 = 0;
      LODWORD(v173) = 1;
      v95 = 32;
      v96 = _swiftEmptyArrayStorage;
      v97 = v201;
      v168 = v92;
      do
      {
        if ((unint64_t)v94 >= *(_QWORD *)(*v12 + 16))
          goto LABEL_126;
        v98 = *v12 + v95;
        v228 = *(_OWORD *)v98;
        v99 = *(_OWORD *)(v98 + 16);
        v100 = *(_OWORD *)(v98 + 32);
        v101 = *(_OWORD *)(v98 + 48);
        v231 = *(_QWORD *)(v98 + 64);
        *(_OWORD *)&v229[16] = v100;
        v230 = v101;
        *(_OWORD *)v229 = v99;
        if (v228 == __PAIR128__(v81, v97)
          || (_stringCompareWithSmolCheck(_:_:expecting:)(v228, *((_QWORD *)&v228 + 1), v97, v81, 0) & 1) != 0)
        {
          sub_1000642C4(&v228);
          LODWORD(v173) = 0;
          v93 = v94;
LABEL_75:
          if ((swift_isUniquelyReferenced_nonNull_native(v96) & 1) == 0)
            v96 = sub_1000B1F80(0, v96[2] + 1, 1, v96);
          v103 = v96[2];
          v102 = v96[3];
          if (v103 >= v102 >> 1)
            v96 = sub_1000B1F80((_QWORD *)(v102 > 1), v103 + 1, 1, v96);
          v96[2] = v103 + 1;
          v96[v103 + 4] = v94;
          sub_100064320((uint64_t)&v228);
LABEL_80:
          v97 = v201;
          goto LABEL_81;
        }
        if (!*(_QWORD *)&v229[16])
          goto LABEL_80;
        if (*(_OWORD *)&v229[8] == __PAIR128__(v81, v201)
          || (v104 = _stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)&v229[8], *(_QWORD *)&v229[16], v201, v81, 0), v97 = v201, (v104 & 1) != 0))
        {
          v170 = *(_QWORD *)&v229[24];
          v171 = v93;
          v105 = v188;
          v106 = v189;
          (*(void (**)(char *, uint64_t, uint64_t))(v188 + 16))(v196, v206, v189);
          v107 = *(unsigned __int8 *)(v105 + 80);
          v108 = (v107 + 88) & ~v107;
          v109 = (v181 + v108) & 0xFFFFFFFFFFFFFFF8;
          v110 = (v109 + 23) & 0xFFFFFFFFFFFFFFF8;
          v111 = swift_allocObject(&unk_1003DE620, v110 + 8, v107 | 7);
          v112 = v230;
          *(_OWORD *)(v111 + 48) = *(_OWORD *)&v229[16];
          *(_OWORD *)(v111 + 64) = v112;
          *(_QWORD *)(v111 + 80) = v231;
          v113 = *(_OWORD *)v229;
          *(_OWORD *)(v111 + 16) = v228;
          *(_OWORD *)(v111 + 32) = v113;
          v114 = *(void (**)(uint64_t, char *, uint64_t))(v105 + 32);
          v92 = v168;
          v114(v111 + v108, v196, v106);
          v115 = (unint64_t *)(v111 + v109);
          v116 = v187;
          *v115 = v201;
          v115[1] = v116;
          *(_QWORD *)(v111 + v110) = v199;
          v214 = sub_100064440;
          v215 = v111;
          v210 = _NSConcreteStackBlock;
          v211 = 1107296256;
          v212 = sub_100006F0C;
          v213 = &unk_1003DE638;
          v169 = _Block_copy(&v210);
          sub_1000642C4(&v228);
          swift_bridgeObjectRetain(v187);
          sub_1000642C4(&v228);
          v117 = swift_retain();
          v118 = v190;
          static DispatchQoS.unspecified.getter(v117);
          v217 = _swiftEmptyArrayStorage;
          v119 = sub_100011DE4((unint64_t *)&qword_100408710, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
          v120 = sub_100012C44((uint64_t *)&unk_100405070);
          v121 = sub_100011770((unint64_t *)&qword_100408720, (uint64_t *)&unk_100405070, (const char *)&protocol conformance descriptor for [A]);
          v122 = v193;
          v123 = v195;
          dispatch thunk of SetAlgebra.init<A>(_:)(&v217, v120, v121, v195, v119);
          v124 = v169;
          OS_dispatch_queue.async(group:qos:flags:execute:)(0, v118, v122, v169);
          _Block_release(v124);
          v125 = v122;
          v93 = v171;
          v126 = v123;
          v81 = v187;
          (*(void (**)(char *, uint64_t))(v194 + 8))(v125, v126);
          v127 = v118;
          v12 = v209;
          (*(void (**)(char *, uint64_t))(v191 + 8))(v127, v192);
          swift_release(v215);
          goto LABEL_75;
        }
LABEL_81:
        v94 = (void **)((char *)v94 + 1);
        v95 += 72;
      }
      while (v92 != v94);
      if ((v173 & 1) != 0)
      {
        swift_release(v167);
        goto LABEL_90;
      }
      if (((unint64_t)v93 & 0x8000000000000000) != 0)
        goto LABEL_127;
      if ((unint64_t)v93 >= *(_QWORD *)(*v12 + 16))
        goto LABEL_128;
      v128 = *v12 + 72 * (_QWORD)v93;
      v129 = *(_OWORD *)(v128 + 80);
      v130 = *(_QWORD *)(v128 + 96);
      v131 = *(_OWORD *)(v128 + 48);
      v225 = *(_OWORD *)(v128 + 64);
      v132 = *(_OWORD *)(v128 + 32);
      v227 = v130;
      v226 = v129;
      v223 = v132;
      v224 = v131;
      v133 = swift_allocObject(&unk_1003DE5D0, 96, 7);
      v134 = v223;
      *(_OWORD *)(v133 + 40) = v224;
      v135 = v226;
      *(_OWORD *)(v133 + 56) = v225;
      *(_OWORD *)(v133 + 72) = v135;
      *(_QWORD *)(v133 + 16) = v167;
      *(_QWORD *)(v133 + 88) = v227;
      *(_OWORD *)(v133 + 24) = v134;
      v214 = sub_10006429C;
      v215 = v133;
      v210 = _NSConcreteStackBlock;
      v211 = 1107296256;
      v212 = sub_100006F0C;
      v213 = &unk_1003DE5E8;
      v136 = _Block_copy(&v210);
      sub_1000642C4(&v223);
      v137 = sub_1000642C4(&v223);
      v138 = v190;
      static DispatchQoS.unspecified.getter(v137);
      v217 = _swiftEmptyArrayStorage;
      v139 = sub_100011DE4((unint64_t *)&qword_100408710, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v140 = sub_100012C44((uint64_t *)&unk_100405070);
      v141 = sub_100011770((unint64_t *)&qword_100408720, (uint64_t *)&unk_100405070, (const char *)&protocol conformance descriptor for [A]);
      v142 = v193;
      v143 = v195;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v217, v140, v141, v195, v139);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v138, v142, v136);
      _Block_release(v136);
      sub_100064320((uint64_t)&v223);
      (*(void (**)(char *, uint64_t))(v194 + 8))(v142, v143);
      (*(void (**)(char *, uint64_t))(v191 + 8))(v138, v192);
      swift_release(v215);
      v144 = v96[2];
      if (!v144)
        goto LABEL_102;
      swift_bridgeObjectRetain(v96);
      while (2)
      {
        if (v144 > v96[2])
        {
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
        }
        v145 = v96[v144 + 3];
        swift_beginAccess(v12, &v210, 33, 0);
        v146 = (_QWORD *)*v12;
        if ((swift_isUniquelyReferenced_nonNull_native(*v12) & 1) == 0)
          v146 = sub_1001A87A4(v146);
        v147 = v146[2];
        if (v145 >= v147)
          goto LABEL_122;
        v148 = v147 - 1;
        v149 = v147 - 1 - v145;
        if (v149 < 0)
        {
          LOBYTE(v164) = 2;
          _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, (_DWORD)v164, 1046, 0);
          __break(1u);
          JUMPOUT(0x100041088);
        }
        --v144;
        v150 = &v146[9 * v145];
        v152 = v150[11];
        v151 = v150[12];
        v153 = v150[8];
        v154 = (void *)v150[9];
        v155 = v150[5];
        memmove(v150 + 4, v150 + 13, 72 * v149);
        v146[2] = v148;
        v12 = v209;
        *v209 = v146;
        swift_endAccess(&v210);

        swift_bridgeObjectRelease(v155);
        swift_bridgeObjectRelease(v153);
        sub_100012318(v152, v151);
        if (v144)
          continue;
        break;
      }
      swift_bridgeObjectRelease(v96);
LABEL_102:
      swift_release(v167);
      swift_bridgeObjectRelease(v96);
      v2 = v199;
      v156 = v187;
      sub_100042718(v199, v172, v201, v187);
      swift_bridgeObjectRelease(v156);
      LODWORD(v11) = v202;
LABEL_5:
      IOObjectRelease(v11);
      LODWORD(v11) = IOIteratorNext(v207);
    }
    while ((_DWORD)v11);
  }
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v198 + 16));
}

uint64_t sub_1000410B8(uint64_t a1, uint64_t a2)
{
  return sub_100041A84(a1, a2, (void (*)(uint64_t))sub_10003F448);
}

void sub_1000410C4(io_iterator_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  io_object_t v5;
  __int128 v6;
  io_registry_entry_t v7;
  uint64_t *v8;
  char *v9;
  __CFString *v10;
  _QWORD *CFProperty;
  uint64_t v12;
  unint64_t v13;
  void **v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  void **v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  char v26;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __CFString *v31;
  _QWORD *v32;
  void **v33;
  unint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint64_t v40;
  void **v41;
  uint64_t v42;
  void *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD **v47;
  _QWORD *v48;
  id v49;
  char v50;
  unint64_t v51;
  unint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  void *v57;
  id v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD v67[2];
  char *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t *v75;
  char *v76;
  io_iterator_t v77;
  _QWORD *v78;
  uint64_t v79;
  __int128 v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  void **v86;
  char *v87;
  CFAllocatorRef v88;
  void **aBlock;
  unint64_t v90;
  uint64_t (*v91)(uint64_t);
  void *v92;
  uint64_t (*v93)();
  uint64_t v94;
  _QWORD *v95;

  v73 = type metadata accessor for DispatchWorkItemFlags(0);
  v72 = *(_QWORD *)(v73 - 8);
  __chkstk_darwin();
  v71 = (char *)v67 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = type metadata accessor for DispatchQoS(0);
  v69 = *(_QWORD *)(v70 - 8);
  __chkstk_darwin();
  v68 = (char *)v67 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v67[0] = v1[3];
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v67[0] + 16));
  v5 = IOIteratorNext(a1);
  if (v5)
  {
    v7 = v5;
    v67[1] = 0;
    v8 = v1 + 4;
    v78 = v1 + 5;
    v9 = (char *)&type metadata for Swift.AnyObject + 8;
    v88 = kCFAllocatorDefault;
    *(_QWORD *)&v6 = 136315138;
    v80 = v6;
    v74 = (char *)&type metadata for Any + 8;
    v77 = a1;
    v76 = (char *)v1 + OBJC_IVAR____TtC7CoreP2P11AppleDevice_logger;
    v75 = v1 + 4;
    v87 = (char *)&type metadata for Swift.AnyObject + 8;
    do
    {
      v10 = (__CFString *)String._bridgeToObjectiveC()();
      CFProperty = IORegistryEntryCreateCFProperty(v7, v10, v88, 0);

      if (CFProperty
        && (v95 = CFProperty, v12 = swift_dynamicCast(&aBlock, &v95, v9, &type metadata for String, 6), (v12 & 1) != 0))
      {
        v14 = aBlock;
        v13 = v90;
        v15 = swift_bridgeObjectRetain_n(v90, 2);
        v16 = Logger.logObject.getter(v15);
        v17 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v16, v17))
        {
          v18 = swift_slowAlloc(12, -1);
          v19 = (void **)swift_slowAlloc(32, -1);
          aBlock = v19;
          *(_DWORD *)v18 = v80;
          swift_bridgeObjectRetain(v13);
          *(_QWORD *)(v18 + 4) = sub_100013CC8((uint64_t)v14, v13, (uint64_t *)&aBlock);
          swift_bridgeObjectRelease_n(v13, 3);
          _os_log_impl((void *)&_mh_execute_header, v16, v17, "Removed interface %s", (uint8_t *)v18, 0xCu);
          swift_arrayDestroy(v19, 1, v74);
          swift_slowDealloc(v19, -1, -1);
          swift_slowDealloc(v18, -1, -1);
        }
        else
        {
          swift_bridgeObjectRelease_n(v13, 2);
        }

        swift_beginAccess(v8, &aBlock, 33, 0);
        v23 = *v8;
        swift_bridgeObjectRetain(*v8);
        v24 = sub_10000FA00((uint64_t)v14, v13);
        v26 = v25;
        swift_bridgeObjectRelease(v23);
        if ((v26 & 1) != 0)
        {
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v8);
          v28 = *v8;
          v95 = (_QWORD *)*v8;
          *v8 = 0x8000000000000000;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            sub_100147610();
            v28 = (uint64_t)v95;
          }
          swift_bridgeObjectRelease(*(_QWORD *)(*(_QWORD *)(v28 + 48) + 16 * v24 + 8));
          v29 = *(_QWORD *)(*(_QWORD *)(v28 + 56) + 8 * v24);
          sub_1001459A8(v24, v28);
          v30 = *v8;
          *v8 = v28;
          swift_bridgeObjectRelease(v30);
          swift_endAccess(&aBlock);
          v31 = (__CFString *)String._bridgeToObjectiveC()();
          v32 = IORegistryEntryCreateCFProperty(v7, v31, v88, 0);

          v86 = v14;
          if (v32)
          {
            v95 = v32;
            if ((swift_dynamicCast(&aBlock, &v95, (char *)&type metadata for Swift.AnyObject + 8, &type metadata for Data, 6) & 1) != 0)
            {
              v33 = aBlock;
              v34 = v90;
              sub_100031FEC((uint64_t)aBlock, v90);
              sub_10001F11C((uint64_t)_swiftEmptyArrayStorage);
              v35 = type metadata accessor for BinaryDecoder();
              v36 = (_QWORD *)swift_allocObject(v35, 48, 7);
              v36[5] = &_swiftEmptyDictionarySingleton;
              v36[2] = v33;
              v36[3] = v34;
              __asm { BR              X9 }
            }
          }
          v82 = 0;
          v81 = 1;
          v84 = *(unsigned __int8 *)(v29
                                   + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_role);
          v42 = *(_QWORD *)(v29
                          + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_parentInterfaceName
                          + 8);
          v83 = *(_QWORD *)(v29
                          + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_parentInterfaceName);
          v79 = OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_queue;
          v43 = *(void **)(v29
                         + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_queue);
          v85 = v29;
          v44 = (_QWORD *)(v29
                         + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_eventHandler);
          v45 = *(_QWORD *)(v29
                          + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_eventHandler);
          v46 = *(_QWORD *)(v29
                          + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_eventHandler
                          + 8);
          v47 = (_QWORD **)v78;
          swift_beginAccess(v78, &aBlock, 33, 0);
          v48 = *v47;
          swift_bridgeObjectRetain(v42);
          v49 = v43;
          sub_1000339E4(v45, v46);
          v50 = swift_isUniquelyReferenced_nonNull_native(v48);
          *v47 = v48;
          if ((v50 & 1) == 0)
          {
            v48 = sub_1000B208C(0, v48[2] + 1, 1, v48);
            *v78 = v48;
          }
          v52 = v48[2];
          v51 = v48[3];
          if (v52 >= v51 >> 1)
          {
            v48 = sub_1000B208C((_QWORD *)(v51 > 1), v52 + 1, 1, v48);
            *v78 = v48;
          }
          v48[2] = v52 + 1;
          v53 = &v48[9 * v52];
          v53[4] = v86;
          v53[5] = v13;
          *((_BYTE *)v53 + 48) = v84;
          v54 = v82;
          v53[7] = v83;
          v53[8] = v42;
          v53[9] = v49;
          *((_WORD *)v53 + 42) = WORD2(v54);
          *((_DWORD *)v53 + 20) = v54;
          *((_BYTE *)v53 + 86) = v81;
          v53[11] = v45;
          v53[12] = v46;
          swift_endAccess(&aBlock);
          if (*v44)
          {
            v55 = v85;
            v56 = *(void **)(v85 + v79);
            v93 = sub_1000636A0;
            v94 = v85;
            aBlock = _NSConcreteStackBlock;
            v90 = 1107296256;
            v91 = sub_100006F0C;
            v92 = &unk_1003DE4A8;
            v57 = _Block_copy(&aBlock);
            v58 = v56;
            v59 = swift_retain();
            v60 = v68;
            static DispatchQoS.unspecified.getter(v59);
            v95 = _swiftEmptyArrayStorage;
            v61 = sub_100011DE4((unint64_t *)&qword_100408710, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
            v62 = sub_100012C44((uint64_t *)&unk_100405070);
            v63 = sub_100011770((unint64_t *)&qword_100408720, (uint64_t *)&unk_100405070, (const char *)&protocol conformance descriptor for [A]);
            v64 = v71;
            v65 = v73;
            dispatch thunk of SetAlgebra.init<A>(_:)(&v95, v62, v63, v73, v61);
            OS_dispatch_queue.async(group:qos:flags:execute:)(0, v60, v64, v57);
            _Block_release(v57);
            swift_release(v55);

            (*(void (**)(char *, uint64_t))(v72 + 8))(v64, v65);
            (*(void (**)(char *, uint64_t))(v69 + 8))(v60, v70);
            v66 = v94;
          }
          else
          {
            v66 = v85;
          }
          swift_release(v66);
          a1 = v77;
          v8 = v75;
        }
        else
        {
          swift_endAccess(&aBlock);
          v37 = swift_bridgeObjectRetain(v13);
          v38 = Logger.logObject.getter(v37);
          v39 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v38, v39))
          {
            v40 = swift_slowAlloc(12, -1);
            v41 = (void **)swift_slowAlloc(32, -1);
            aBlock = v41;
            *(_DWORD *)v40 = v80;
            swift_bridgeObjectRetain(v13);
            *(_QWORD *)(v40 + 4) = sub_100013CC8((uint64_t)v14, v13, (uint64_t *)&aBlock);
            swift_bridgeObjectRelease_n(v13, 3);
            _os_log_impl((void *)&_mh_execute_header, v38, v39, "No handle found for %s", (uint8_t *)v40, 0xCu);
            swift_arrayDestroy(v41, 1, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v41, -1, -1);
            swift_slowDealloc(v40, -1, -1);
          }
          else
          {
            swift_bridgeObjectRelease_n(v13, 2);
          }

        }
        v9 = v87;
      }
      else
      {
        v20 = Logger.logObject.getter(v12);
        v21 = static os_log_type_t.error.getter(v20);
        if (os_log_type_enabled(v20, v21))
        {
          v22 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v22 = 0;
          _os_log_impl((void *)&_mh_execute_header, v20, v21, "Unable to query interface name from service that was removed", v22, 2u);
          swift_slowDealloc(v22, -1, -1);
        }

      }
      IOObjectRelease(v7);
      v7 = IOIteratorNext(a1);
    }
    while (v7);
  }
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v67[0] + 16));
}

uint64_t sub_100041A78(uint64_t a1, uint64_t a2)
{
  return sub_100041A84(a1, a2, (void (*)(uint64_t))sub_1000410C4);
}

uint64_t sub_100041A84(uint64_t result, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t v5;

  if (result)
  {
    v5 = result;
    swift_retain(result);
    a3(a2);
    return swift_release(v5);
  }
  return result;
}

uint64_t sub_100041AC8(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  _QWORD *v19;
  _QWORD aBlock[5];
  uint64_t v21;

  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin();
  v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin();
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100404108 != -1)
    swift_once(&qword_100404108, sub_10017E140);
  v18 = static OS_dispatch_queue.p2p;
  v12 = swift_allocObject(&unk_1003DE670, 32, 7);
  *(_QWORD *)(v12 + 16) = a2;
  *(_QWORD *)(v12 + 24) = a1;
  aBlock[4] = sub_1000644C0;
  v21 = v12;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100006F0C;
  aBlock[3] = &unk_1003DE688;
  v13 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter(a1);
  v19 = _swiftEmptyArrayStorage;
  v14 = sub_100011DE4((unint64_t *)&qword_100408710, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v15 = sub_100012C44((uint64_t *)&unk_100405070);
  v16 = sub_100011770((unint64_t *)&qword_100408720, (uint64_t *)&unk_100405070, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v19, v15, v16, v4, v14);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v11, v7, v13);
  _Block_release(v13);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  return swift_release(v21);
}

uint64_t sub_100041CE8(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  _BYTE v6[24];

  v3 = a1 + 16;
  swift_beginAccess(a1 + 16, v6, 0, 0);
  result = swift_weakLoadStrong(v3);
  if (result)
  {
    v5 = result;
    sub_100041D44(a2);
    return swift_release(v5);
  }
  return result;
}

void sub_100041D44(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  id v12;
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  id v22;
  id v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *);
  uint64_t v35;
  id v36;
  __int128 v37;
  __int128 v38;

  v2 = v1;
  v4 = type metadata accessor for DriverEvent(0);
  __chkstk_darwin();
  v6 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchPredicate(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin();
  v10 = (uint64_t *)((char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100404108 != -1)
    swift_once(&qword_100404108, sub_10017E140);
  v11 = static OS_dispatch_queue.p2p;
  *v10 = static OS_dispatch_queue.p2p;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v8 + 104))(v10, enum case for DispatchPredicate.onQueue(_:), v7);
  v12 = (id)v11;
  LOBYTE(v11) = _dispatchPreconditionTest(_:)(v10);
  (*(void (**)(_QWORD *, uint64_t))(v8 + 8))(v10, v7);
  if ((v11 & 1) == 0)
  {
    __break(1u);
    return;
  }
  if (objc_msgSend(a1, "type") == (id)12)
  {
    v13 = objc_msgSend(a1, "info");
    if (v13)
    {
      v14 = v13;
      v15 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v13, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);

      v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(CWFEventAutoJoinStatusKey);
      v18 = v17;
      if (*(_QWORD *)(v15 + 16) && (v19 = sub_10000FA00(v16, v17), (v20 & 1) != 0))
      {
        sub_100014450(*(_QWORD *)(v15 + 56) + 32 * v19, (uint64_t)&v37);
      }
      else
      {
        v37 = 0u;
        v38 = 0u;
      }
      swift_bridgeObjectRelease(v15);
      swift_bridgeObjectRelease(v18);
      if (*((_QWORD *)&v38 + 1))
      {
        v21 = sub_1000644C8(0, (unint64_t *)&unk_100405C60, CWFAutoJoinStatus_ptr);
        if ((swift_dynamicCast(&v36, &v37, (char *)&type metadata for Any + 8, v21, 6) & 1) == 0)
          return;
        v22 = v36;
        v23 = objc_msgSend(v36, "interfaceName");
        if (!v23)
          goto LABEL_22;
        v24 = v23;
        v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
        v27 = v26;

        v28 = *(_QWORD *)(v2 + 24);
        os_unfair_lock_lock(*(os_unfair_lock_t *)(v28 + 16));
        swift_beginAccess(v2 + 32, &v37, 32, 0);
        v29 = *(_QWORD *)(v2 + 32);
        if (*(_QWORD *)(v29 + 16))
        {
          swift_bridgeObjectRetain(v27);
          v30 = sub_10000FA00(v25, v27);
          if ((v31 & 1) != 0)
          {
            v32 = *(_QWORD *)(*(_QWORD *)(v29 + 56) + 8 * v30);
            swift_endAccess(&v37);
            swift_retain();
            swift_bridgeObjectRelease_n(v27, 2);
            v34 = *(void (**)(char *))(v32
                                                + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_eventHandler);
            v33 = *(_QWORD *)(v32
                            + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_eventHandler
                            + 8);
            sub_1000339E4((uint64_t)v34, v33);
            swift_release(v32);
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v28 + 16));
            if (v34)
            {
              swift_retain();
              *(_QWORD *)v6 = objc_msgSend(v22, "state") == 0;
              *(_OWORD *)(v6 + 8) = 0u;
              *(_OWORD *)(v6 + 24) = 0u;
              *((_WORD *)v6 + 20) = 0;
              swift_storeEnumTagMultiPayload(v6, v4, 2);
              v34(v6);

              sub_100012318((uint64_t)v34, v33);
              sub_100012318((uint64_t)v34, v33);
              sub_100063824((uint64_t)v6, type metadata accessor for DriverEvent);
              return;
            }
            goto LABEL_22;
          }
          swift_endAccess(&v37);
          swift_bridgeObjectRelease(v27);
        }
        else
        {
          swift_endAccess(&v37);
        }
        swift_bridgeObjectRelease(v27);
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v28 + 16));
LABEL_22:

        return;
      }
    }
    else
    {
      v37 = 0u;
      v38 = 0u;
    }
    sub_100033A84((uint64_t)&v37, &qword_100405050);
  }
}

void sub_1000420F4(uint64_t a1, void *a2)
{
  uint64_t v3;
  void (*v4)(void);
  id v5;

  v4 = *(void (**)(void))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = a2;
  v4();
  swift_release(v3);

}

void sub_100042144(void *a1)
{
  id v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  _QWORD *v9;
  void *v10;
  uint64_t v11;
  id v12;
  id v13;
  uint64_t v14;

  v13 = 0;
  if (objc_msgSend(a1, "startMonitoringEventType:error:", 12, &v13))
  {
    v1 = v13;
  }
  else
  {
    v12 = v13;
    v2 = v13;
    v3 = _convertNSErrorToError(_:)(v12);

    swift_willThrow(v4);
    swift_errorRetain(v3);
    v5 = swift_errorRetain(v3);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.error.getter(v6);
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc(12, -1);
      v9 = (_QWORD *)swift_slowAlloc(8, -1);
      *(_DWORD *)v8 = 138412290;
      swift_errorRetain(v3);
      v10 = (void *)_swift_stdlib_bridgeErrorToNSError(v3);
      v13 = v10;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, &v14);
      *v9 = v10;
      swift_errorRelease(v3);
      swift_errorRelease(v3);
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Failed to monitor for autjoin status changed event: %@", v8, 0xCu);
      v11 = sub_100012C44(&qword_100404BB0);
      swift_arrayDestroy(v9, 1, v11);
      swift_slowDealloc(v9, -1, -1);
      swift_slowDealloc(v8, -1, -1);
      swift_errorRelease(v3);

    }
    else
    {
      swift_errorRelease(v3);

      swift_errorRelease(v3);
      swift_errorRelease(v3);
    }
  }
}

uint64_t AppleDevice.deinit()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  _BYTE v8[24];

  IONotificationPortDestroy(*(IONotificationPortRef *)(v0 + 144));
  swift_beginAccess(v0 + 152, v8, 0, 0);
  IOObjectRelease(*(_DWORD *)(v0 + 152));
  swift_beginAccess(v0 + 156, &v7, 0, 0);
  IOObjectRelease(*(_DWORD *)(v0 + 156));
  v1 = *(void **)(v0 + 48);
  objc_msgSend(v1, "stopMonitoringEventType:", 12);
  objc_msgSend(v1, "invalidate");
  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));

  sub_10005E884(*(id *)(v0 + 64));
  sub_100033A84(v0 + 72, &qword_100405050);

  swift_release(*(_QWORD *)(v0 + 120));
  swift_release(*(_QWORD *)(v0 + 128));

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 176));
  swift_release(*(_QWORD *)(v0 + 184));
  v2 = *(_QWORD *)(v0 + 192);
  v3 = *(_QWORD *)(v0 + 200);

  swift_release(v3);
  swift_release(v2);
  sub_100063824(v0 + OBJC_IVAR____TtC7CoreP2P11AppleDevice_neighborDiscoveryRoutingSocket, type metadata accessor for RoutingSocket);
  sub_100033A84(v0 + OBJC_IVAR____TtC7CoreP2P11AppleDevice_interfaceDiscoverer, &qword_100405058);
  v4 = v0 + OBJC_IVAR____TtC7CoreP2P11AppleDevice_logger;
  v5 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  return v0;
}

uint64_t AppleDevice.__deallocating_deinit()
{
  uint64_t v0;

  AppleDevice.deinit();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

void AppleDevice.send(request:data:)(unsigned int a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  os_unfair_lock_s *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  os_unfair_lock_s *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v5 = *(_QWORD *)(v2 + 24);
  v6 = *(os_unfair_lock_s **)(v5 + 16);
  os_unfair_lock_lock(v6);
  v7 = *(unsigned int *)(*(_QWORD *)(v2 + 16) + 16);
  v8 = sub_10033428C(a1);
  v9 = ioctl(_:_:_:)(v7, v8, a2);
  if ((_DWORD)v9 == -1)
  {
    LODWORD(v9) = errno.getter(v9, v10);
    goto LABEL_5;
  }
  if ((_DWORD)v9)
  {
LABEL_5:
    v12 = v9;
    v13 = sub_100012C84();
    v14 = swift_allocError(&type metadata for WiFiError, v13, 0, 0);
    *(_QWORD *)v15 = v12;
    *(_QWORD *)(v15 + 8) = 0;
    *(_BYTE *)(v15 + 16) = 0;
    swift_willThrow(v14);
    v11 = *(os_unfair_lock_s **)(v5 + 16);
    goto LABEL_6;
  }
  v11 = v6;
LABEL_6:
  os_unfair_lock_unlock(v11);
}

uint64_t sub_1000425C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  _BYTE v4[8];
  uint64_t v5;

  sub_100063EB8(a1 + 24, (uint64_t)v4, &qword_100405BA0);
  result = sub_100063EB8((uint64_t)v4, (uint64_t)&v5, &qword_100405BA0);
  if (v5)
  {
    *(_DWORD *)a2 = *(unsigned __int16 *)(v5 + 2);
    *(_BYTE *)(a2 + 4) = 0;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void static ApplePlatform.withInterface<A>(_:matchingFamily:_:)(uint64_t a1@<X6>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;

  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 - 8) + 56))(a2, 1, 1, a1);
  static ApplePlatform.enumerateInterfaceAddresses(_:)((uint64_t (*)(__int128 *))sub_10005E964);
  if (v5)
  {
    v4 = type metadata accessor for Optional(0, a1);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a2, v4);
  }
}

void sub_100042718(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  id v17;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v19;
  uint64_t v20;
  _BYTE v21[24];

  v8 = (_QWORD *)(a1 + 176);
  swift_beginAccess(a1 + 176, v21, 32, 0);
  v9 = *(_QWORD *)(a1 + 176);
  if (*(_QWORD *)(v9 + 16) && (sub_10002DA98(a2), (v11 & 1) != 0))
  {
    v12 = *(_QWORD *)(v9 + 56) + 24 * v10;
    v13 = *(void **)v12;
    v14 = *(_QWORD *)(v12 + 8);
    v15 = *(_QWORD *)(v12 + 16);
    swift_endAccess(v21);
    swift_bridgeObjectRetain(v15);
    v16 = v13;
    sub_10005ECA4(v13, v14, v15);
    swift_beginAccess(v8, v21, 33, 0);
    v17 = v16;
    swift_bridgeObjectRetain(a4);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v8);
    v20 = *v8;
    *v8 = 0x8000000000000000;
    sub_10003084C((uint64_t)v17, a3, a4, a2, isUniquelyReferenced_nonNull_native);
    v19 = *v8;
    *v8 = v20;
    swift_bridgeObjectRelease(v19);
    swift_endAccess(v21);
    while (OS_dispatch_semaphore.signal()())
      ;

  }
  else
  {
    swift_endAccess(v21);
  }
}

void sub_10004285C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  Swift::String v21;
  Swift::String_optional v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34[3];

  if ((*(_BYTE *)(a1 + 54) & 1) != 0)
  {
    v10 = sub_10021D0D8();
    v11 = HIDWORD(v10);
    LOBYTE(v12) = v10 & 0xFC | 2;
    v31 = v10 >> 16;
    v32 = v10 >> 8;
    v30 = v10 >> 24;
    v13 = v10 >> 40;
  }
  else
  {
    LODWORD(v11) = *(unsigned __int16 *)(a1 + 52);
    v12 = *(unsigned int *)(a1 + 48);
    v14 = v12 & 0xFFFF0000FFFFFFFFLL | ((unint64_t)*(unsigned __int16 *)(a1 + 52) << 32);
    LODWORD(v13) = v11 >> 8;
    v31 = v14 >> 16;
    v32 = v14 >> 8;
    v30 = v14 >> 24;
  }
  sub_1000642C4((_QWORD *)a1);
  sub_1000642C4((_QWORD *)a1);
  sub_1000642C4((_QWORD *)a1);
  swift_bridgeObjectRetain(a4);
  sub_1000642C4((_QWORD *)a1);
  v15 = swift_bridgeObjectRetain(a4);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = swift_slowAlloc(42, -1);
    v34[0] = swift_slowAlloc(128, -1);
    *(_DWORD *)v18 = 136315906;
    v20 = *(_QWORD *)a1;
    v19 = *(_QWORD *)(a1 + 8);
    swift_bridgeObjectRetain(v19);
    v33 = sub_100013CC8(v20, v19, v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, v34);
    swift_bridgeObjectRelease(v19);
    sub_100064320(a1);
    sub_100064320(a1);
    *(_WORD *)(v18 + 12) = 2080;
    __asm { BR              X10 }
  }

  sub_100064320(a1);
  sub_100064320(a1);
  sub_100064320(a1);
  sub_100064320(a1);
  swift_bridgeObjectRelease_n(a4, 2);
  v21._countAndFlagsBits = a3;
  v21._object = a4;
  v22 = AppleDevice.findOrCreateInterface(for:on:with:)((CoreP2P::WiFiInterfaceRole)*(_BYTE *)(a1 + 16), v21, (CoreP2P::WiFiAddress *)(((unint64_t)v11 << 32) | ((unint64_t)v13 << 40) | ((unint64_t)v30 << 24) | ((unint64_t)v31 << 16) | ((unint64_t)v32 << 8) | v12));
  if (v22.value._object)
  {
    v23 = *(_QWORD *)(a5 + 24);
    os_unfair_lock_lock(*(os_unfair_lock_t *)(v23 + 16));
    swift_beginAccess(a5 + 32, v34, 32, 0);
    v24 = *(_QWORD *)(a5 + 32);
    if (*(_QWORD *)(v24 + 16))
    {
      swift_bridgeObjectRetain(v22.value._object);
      v25 = sub_10000FA00(v22.value._countAndFlagsBits, (uint64_t)v22.value._object);
      if ((v26 & 1) != 0)
      {
        v27 = *(_QWORD *)(*(_QWORD *)(v24 + 56) + 8 * v25);
        swift_endAccess(v34);
        swift_retain();
        swift_bridgeObjectRelease_n(v22.value._object, 2);
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v23 + 16));
        sub_10003E04C(*(void (**)(_BYTE *))(a1 + 56), *(_QWORD *)(a1 + 64));
        swift_release(v27);
        return;
      }
      swift_bridgeObjectRelease(v22.value._object);
    }
    swift_endAccess(v34);
    swift_bridgeObjectRelease(v22.value._object);
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v23 + 16));
    v29 = 0x80000001003639A0;
    v28 = 0xD000000000000010;
  }
  else
  {
    v28 = 0x6E6F697461657263;
    v29 = 0xEF64656C69616620;
  }
  sub_100042D74(v28, v29, a2, a1, a5);
}

void sub_100042D74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  os_unfair_lock_s *v14;
  _QWORD *v15;
  _QWORD *v16;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25[3];

  sub_1000642C4((_QWORD *)a4);
  sub_1000642C4((_QWORD *)a4);
  sub_1000642C4((_QWORD *)a4);
  swift_bridgeObjectRetain(a2);
  sub_1000642C4((_QWORD *)a4);
  v8 = swift_bridgeObjectRetain(a2);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.error.getter(v9);
  if (os_log_type_enabled(v9, v10))
  {
    v11 = swift_slowAlloc(32, -1);
    v25[0] = swift_slowAlloc(96, -1);
    *(_DWORD *)v11 = 136315650;
    v13 = *(_QWORD *)a4;
    v12 = *(_QWORD *)(a4 + 8);
    swift_bridgeObjectRetain(v12);
    v24 = sub_100013CC8(v13, v12, v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, v25);
    swift_bridgeObjectRelease(v12);
    sub_100064320(a4);
    sub_100064320(a4);
    *(_WORD *)(v11 + 12) = 2080;
    __asm { BR              X10 }
  }

  sub_100064320(a4);
  sub_100064320(a4);
  sub_100064320(a4);
  sub_100064320(a4);
  swift_bridgeObjectRelease_n(a2, 2);
  v14 = *(os_unfair_lock_s **)(*(_QWORD *)(a5 + 24) + 16);
  os_unfair_lock_lock(v14);
  v15 = (_QWORD *)(a5 + 40);
  swift_beginAccess(a5 + 40, v25, 33, 0);
  v16 = *(_QWORD **)(a5 + 40);
  sub_1000642C4((_QWORD *)a4);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v16);
  *(_QWORD *)(a5 + 40) = v16;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v16 = sub_1000B208C(0, v16[2] + 1, 1, v16);
    *v15 = v16;
  }
  v19 = v16[2];
  v18 = v16[3];
  if (v19 >= v18 >> 1)
  {
    v16 = sub_1000B208C((_QWORD *)(v18 > 1), v19 + 1, 1, v16);
    *v15 = v16;
  }
  v16[2] = v19 + 1;
  v20 = &v16[9 * v19];
  *((_OWORD *)v20 + 2) = *(_OWORD *)a4;
  v21 = *(_OWORD *)(a4 + 16);
  v22 = *(_OWORD *)(a4 + 32);
  v23 = *(_OWORD *)(a4 + 48);
  v20[12] = *(_QWORD *)(a4 + 64);
  *((_OWORD *)v20 + 4) = v22;
  *((_OWORD *)v20 + 5) = v23;
  *((_OWORD *)v20 + 3) = v21;
  swift_endAccess(v25);
  os_unfair_lock_unlock(v14);
}

Swift::String_optional __swiftcall AppleDevice.findOrCreateInterface(for:on:with:)(CoreP2P::WiFiInterfaceRole a1, Swift::String on, CoreP2P::WiFiAddress *with)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  void (*v36)(char *, uint64_t);
  char *v37;
  uint64_t v38;
  dispatch_semaphore_t v39;
  uint64_t v40;
  NSObject *v41;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v43;
  void *object;
  char v45;
  Swift::String_optional result;
  _QWORD v47[2];
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  int64_t v60;
  Swift::String v61;
  _QWORD v62[3];
  uint64_t v63;
  char v64[8];

  v47[1] = with;
  v61 = on;
  v4 = a1;
  v57 = type metadata accessor for DispatchTimeInterval(0);
  v55 = *(_QWORD *)(v57 - 8);
  __chkstk_darwin();
  v54 = (char *)v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = type metadata accessor for DispatchTime(0);
  v53 = *(_QWORD *)(v58 - 8);
  __chkstk_darwin();
  v52 = (char *)v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v56 = (char *)v47 - v7;
  v50 = *(_QWORD *)(v3 + 24);
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v50 + 16));
  v48 = v3 + 32;
  swift_beginAccess(v3 + 32, v64, 0, 0);
  v51 = v3;
  v8 = *(_QWORD *)(v3 + 32);
  v9 = *(_QWORD *)(v8 + 64);
  v59 = (_QWORD *)(v8 + 64);
  v10 = 1 << *(_BYTE *)(v8 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & v9;
  v60 = (unint64_t)(v10 + 63) >> 6;
  swift_bridgeObjectRetain_n(v8, 2);
  v49 = v4;
  if (v12)
  {
    v13 = __clz(__rbit64(v12));
    goto LABEL_22;
  }
  if (v60 > 1)
  {
    v14 = v59[1];
    v15 = 1;
    if (v14)
      goto LABEL_21;
    v15 = 2;
    if (v60 <= 2)
      goto LABEL_23;
    v14 = v59[2];
    if (v14)
      goto LABEL_21;
    v15 = 3;
    if (v60 <= 3)
      goto LABEL_23;
    v14 = v59[3];
    if (v14)
      goto LABEL_21;
    v15 = 4;
    if (v60 <= 4)
      goto LABEL_23;
    v14 = v59[4];
    if (v14)
      goto LABEL_21;
    v15 = 5;
    if (v60 <= 5)
      goto LABEL_23;
    v14 = v59[5];
    if (v14)
    {
LABEL_21:
      v13 = __clz(__rbit64(v14)) + (v15 << 6);
LABEL_22:
      __asm { BR              X9 }
    }
    v16 = 6;
    if (v60 > 6)
    {
      v14 = v59[6];
      if (v14)
      {
        v15 = 6;
        goto LABEL_21;
      }
      while (1)
      {
        v15 = v16 + 1;
        if (__OFADD__(v16, 1))
        {
          __break(1u);
          JUMPOUT(0x100044E6CLL);
        }
        if (v15 >= v60)
          break;
        v14 = v59[v15];
        ++v16;
        if (v14)
          goto LABEL_21;
      }
    }
  }
LABEL_23:
  swift_release(v8);
  swift_bridgeObjectRelease(v8);
  v17 = v49;
  v18 = v50;
  if (v49 == 4)
  {
    v19 = v51;
    v20 = (uint64_t *)(v51 + 176);
    swift_beginAccess(v51 + 176, v62, 32, 0);
    v21 = *(_QWORD *)(v19 + 176);
    if (*(_QWORD *)(v21 + 16))
    {
      v22 = enum case for DispatchTimeInterval.seconds(_:);
      v23 = v54;
      do
      {
        sub_10002DA98(4);
        if ((v25 & 1) == 0)
          break;
        v26 = *(_QWORD *)(v21 + 56) + 24 * v24;
        v27 = *(void **)v26;
        v28 = *(_QWORD *)(v26 + 8);
        v29 = *(_QWORD *)(v26 + 16);
        swift_endAccess(v62);
        swift_bridgeObjectRetain(v29);
        v30 = v27;
        sub_10005ECA4(v27, v28, v29);
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v18 + 16));
        v31 = v18;
        v32 = v52;
        static DispatchTime.now()();
        *v23 = 30;
        v33 = v55;
        v34 = v57;
        (*(void (**)(_QWORD *, uint64_t, uint64_t))(v55 + 104))(v23, v22, v57);
        v35 = v56;
        + infix(_:_:)(v32, v23);
        (*(void (**)(_QWORD *, uint64_t))(v33 + 8))(v23, v34);
        v36 = *(void (**)(char *, uint64_t))(v53 + 8);
        v37 = v32;
        v18 = v31;
        v38 = v58;
        v36(v37, v58);
        OS_dispatch_semaphore.wait(timeout:)(v35);
        v36(v35, v38);
        os_unfair_lock_lock(*(os_unfair_lock_t *)(v31 + 16));

        swift_beginAccess(v20, v62, 32, 0);
        v21 = *v20;
      }
      while (*(_QWORD *)(*v20 + 16));
    }
    swift_endAccess(v62);
    v17 = v49;
  }
  v39 = dispatch_semaphore_create(0);
  v40 = v51;
  swift_beginAccess(v51 + 176, v62, 33, 0);
  v41 = v39;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v40 + 176));
  v63 = *(_QWORD *)(v40 + 176);
  *(_QWORD *)(v40 + 176) = 0x8000000000000000;
  sub_10003084C((uint64_t)v41, 0, 0, v17, isUniquelyReferenced_nonNull_native);
  v43 = *(_QWORD *)(v40 + 176);
  *(_QWORD *)(v40 + 176) = v63;
  swift_bridgeObjectRelease(v43);
  swift_endAccess(v62);
  swift_beginAccess(v48, v62, 32, 0);
  if (*(_QWORD *)(*(_QWORD *)(v40 + 32) + 16))
  {
    object = v61._object;
    swift_bridgeObjectRetain(v61._object);
    sub_10000FA00(v61._countAndFlagsBits, (uint64_t)object);
    if ((v45 & 1) != 0)
      swift_retain();
    swift_bridgeObjectRelease(object);
  }
  swift_endAccess(v62);
  __asm { BR              X10 }
  return result;
}

uint64_t sub_100044F24(_QWORD *a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t *, uint64_t, _UNKNOWN **, uint64_t, _UNKNOWN **, _UNKNOWN **, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v17;

  v9 = a1[3];
  v10 = a1[4];
  sub_10003259C(a1, v9);
  v11 = type metadata accessor for AppleIO80211Driver(0);
  swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
  swift_retain();
  swift_bridgeObjectRetain(a5);
  AppleIO80211Driver.init(device:role:name:)(a2, a3, a4, a5);
  v13 = v12;
  v17 = v12;
  v14 = *(void (**)(uint64_t *, uint64_t, _UNKNOWN **, uint64_t, _UNKNOWN **, _UNKNOWN **, uint64_t, uint64_t))(v10 + 8);
  v15 = sub_100011DE4((unint64_t *)&unk_100405C50, type metadata accessor for AppleIO80211Driver, (uint64_t)&protocol conformance descriptor for AppleIO80211Driver);
  v14(&v17, v11, &protocol witness table for AppleIO80211Driver, v15, &protocol witness table for AppleIO80211Driver, &protocol witness table for AppleIO80211Driver, v9, v10);
  return swift_release(v13);
}

uint64_t sub_100045030(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;

  v16 = 0;
  swift_bridgeObjectRetain(a2);
  swift_retain();
  v5 = sub_10005ED18(a1, a2, &v16);
  v7 = v6;
  swift_bridgeObjectRelease(a2);
  swift_release(v2);
  if (v7)
  {
    swift_bridgeObjectRetain_n(a2, 2);
    v8 = swift_bridgeObjectRetain(v7);
    v9 = Logger.logObject.getter(v8);
    v10 = static os_log_type_t.error.getter(v9);
    if (os_log_type_enabled(v9, v10))
    {
      v11 = swift_slowAlloc(22, -1);
      v12 = swift_slowAlloc(64, -1);
      v15 = v12;
      *(_DWORD *)v11 = 136315394;
      swift_bridgeObjectRetain(v7);
      v14 = sub_100013CC8(v5, v7, &v15);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, &v15);
      swift_bridgeObjectRelease_n(v7, 3);
      *(_WORD *)(v11 + 12) = 2080;
      swift_bridgeObjectRetain(a2);
      v14 = sub_100013CC8(a1, a2, &v15);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, &v15);
      swift_bridgeObjectRelease_n(a2, 3);
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "%s when removing %s from legacy preferences", (uint8_t *)v11, 0x16u);
      swift_arrayDestroy(v12, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v12, -1, -1);
      swift_slowDealloc(v11, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n(a2, 2);
      swift_bridgeObjectRelease_n(v7, 2);
    }

  }
  return v16;
}

void sub_10004523C(void *a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  os_log_type_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *oslog;
  uint64_t v12;
  uint64_t v13;

  swift_bridgeObjectRetain(a2);
  v4 = sub_10005EFB4(a1, a2);
  v6 = v5;
  swift_bridgeObjectRelease(a2);
  if (v6)
  {
    swift_bridgeObjectRetain_n(a2, 2);
    v7 = swift_bridgeObjectRetain(v6);
    oslog = Logger.logObject.getter(v7);
    v8 = static os_log_type_t.error.getter(oslog);
    if (os_log_type_enabled(oslog, v8))
    {
      v9 = swift_slowAlloc(22, -1);
      v10 = swift_slowAlloc(64, -1);
      v13 = v10;
      *(_DWORD *)v9 = 136315394;
      swift_bridgeObjectRetain(v6);
      v12 = sub_100013CC8(v4, v6, &v13);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v12, &v13);
      swift_bridgeObjectRelease_n(v6, 3);
      *(_WORD *)(v9 + 12) = 2080;
      swift_bridgeObjectRetain(a2);
      v12 = sub_100013CC8((uint64_t)a1, a2, &v13);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v12, &v13);
      swift_bridgeObjectRelease_n(a2, 3);
      _os_log_impl((void *)&_mh_execute_header, oslog, v8, "%s when configuring DHCP networking for %s", (uint8_t *)v9, 0x16u);
      swift_arrayDestroy(v10, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v10, -1, -1);
      swift_slowDealloc(v9, -1, -1);

    }
    else
    {
      swift_bridgeObjectRelease_n(a2, 2);
      swift_bridgeObjectRelease_n(v6, 2);

    }
  }
}

uint64_t sub_100045440(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t *v9;
  void (*v10)(_BYTE *);
  uint64_t v11;
  void *v12;
  id v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin();
  v5 = (uint64_t *)((char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for DriverEvent(0);
  __chkstk_darwin();
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (uint64_t *)(a1
                 + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_eventHandler);
  v10 = *(void (**)(_BYTE *))(a1
                                       + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_eventHandler);
  if (v10)
  {
    v11 = v9[1];
    *v8 = 2;
    swift_storeEnumTagMultiPayload(v8, v6, 4);
    swift_retain();
    v10(v8);
    sub_100012318((uint64_t)v10, v11);
    sub_100063824((uint64_t)v8, type metadata accessor for DriverEvent);
  }
  v12 = *(void **)(a1 + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_queue);
  *v5 = v12;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v2);
  v13 = v12;
  LOBYTE(v12) = _dispatchPreconditionTest(_:)(v5);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v3 + 8))(v5, v2);
  if ((v12 & 1) != 0)
  {
    Apple80211EventMonitoringHalt(*(_QWORD *)(a1
                                            + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_reference));
    v15 = *v9;
    v16 = v9[1];
    *v9 = 0;
    v9[1] = 0;
    return sub_100012318(v15, v16);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void AppleDevice.startMonitoringEvents(on:eventHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  os_unfair_lock_s *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE v24[24];

  v6 = v5;
  v11 = *(_QWORD *)(v4 + 24);
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v11 + 16));
  swift_beginAccess(v4 + 32, v24, 32, 0);
  v12 = *(_QWORD *)(v4 + 32);
  if (!*(_QWORD *)(v12 + 16))
    goto LABEL_6;
  swift_bridgeObjectRetain(a2);
  v13 = sub_10000FA00(a1, a2);
  if ((v14 & 1) == 0)
  {
    swift_bridgeObjectRelease(a2);
LABEL_6:
    swift_endAccess(v24);
    v18 = sub_100012C84();
    v19 = swift_allocError(&type metadata for WiFiError, v18, 0, 0);
    *(_OWORD *)v20 = xmmword_10033B140;
    *(_BYTE *)(v20 + 16) = 0;
    swift_willThrow(v19);
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v11 + 16));
    return;
  }
  v15 = *(_QWORD *)(*(_QWORD *)(v12 + 56) + 8 * v13);
  swift_endAccess(v24);
  swift_retain();
  swift_bridgeObjectRelease(a2);
  v16 = *(os_unfair_lock_s **)(v11 + 16);
  swift_retain();
  os_unfair_lock_unlock(v16);
  v17 = swift_allocObject(&unk_1003DD5B8, 32, 7);
  *(_QWORD *)(v17 + 16) = a3;
  *(_QWORD *)(v17 + 24) = a4;
  swift_retain();
  sub_10003D8E8(0, (uint64_t)sub_10000756C);
  if (v6)
  {
    swift_release_n(v15, 2);
    swift_release(v17);
  }
  else
  {
    swift_release(v17);
    v21 = (_QWORD *)(v15
                   + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_eventHandler);
    v22 = *(_QWORD *)(v15
                    + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_eventHandler);
    v23 = *(_QWORD *)(v15
                    + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_eventHandler
                    + 8);
    *v21 = a3;
    v21[1] = a4;
    swift_retain();
    sub_100012318(v22, v23);
    swift_release_n(v15, 2);
  }
}

void AppleDevice.startMonitoringEvents(on:customQueue:eventHandler:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  os_unfair_lock_s *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE v18[24];

  v9 = *(_QWORD *)(v4 + 24);
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v9 + 16));
  swift_beginAccess(v4 + 32, v18, 32, 0);
  v10 = *(_QWORD *)(v4 + 32);
  if (*(_QWORD *)(v10 + 16))
  {
    swift_bridgeObjectRetain(a2);
    v11 = sub_10000FA00(a1, a2);
    if ((v12 & 1) != 0)
    {
      v13 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * v11);
      swift_endAccess(v18);
      swift_retain();
      swift_bridgeObjectRelease(a2);
      v14 = *(os_unfair_lock_s **)(v9 + 16);
      swift_retain();
      os_unfair_lock_unlock(v14);
      sub_10003D8E8(a3, a4);
      swift_release_n(v13, 2);
      return;
    }
    swift_bridgeObjectRelease(a2);
  }
  swift_endAccess(v18);
  v15 = sub_100012C84();
  v16 = swift_allocError(&type metadata for WiFiError, v15, 0, 0);
  *(_OWORD *)v17 = xmmword_10033B140;
  *(_BYTE *)(v17 + 16) = 0;
  swift_willThrow(v16);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v9 + 16));
}

Swift::Void __swiftcall AppleDevice.stopMonitoringEvents(on:)(Swift::String on)
{
  uint64_t v1;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD aBlock[5];
  uint64_t v33;

  object = on._object;
  countAndFlagsBits = on._countAndFlagsBits;
  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin();
  v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin();
  v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(v1 + 24);
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v12 + 16));
  swift_beginAccess(v1 + 32, aBlock, 32, 0);
  v13 = *(_QWORD *)(v1 + 32);
  if (*(_QWORD *)(v13 + 16))
  {
    swift_bridgeObjectRetain(object);
    v14 = sub_10000FA00(countAndFlagsBits, (uint64_t)object);
    if ((v15 & 1) != 0)
    {
      v16 = *(_QWORD *)(*(_QWORD *)(v13 + 56) + 8 * v14);
      swift_retain();
    }
    else
    {
      v16 = 0;
    }
    swift_bridgeObjectRelease(object);
  }
  else
  {
    v16 = 0;
  }
  swift_endAccess(aBlock);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v12 + 16));
  if (v16)
  {
    v17 = *(void **)(v16
                   + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_queue);
    v18 = swift_allocObject(&unk_1003DD5E0, 24, 7);
    *(_QWORD *)(v18 + 16) = v16;
    aBlock[4] = sub_10005ECF4;
    v33 = v18;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100006F0C;
    aBlock[3] = &unk_1003DD5F8;
    v19 = _Block_copy(aBlock);
    v20 = v17;
    v21 = swift_retain();
    static DispatchQoS.unspecified.getter(v21);
    v31 = _swiftEmptyArrayStorage;
    v22 = sub_100011DE4((unint64_t *)&qword_100408710, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v30 = v8;
    v23 = v5;
    v24 = v22;
    v25 = sub_100012C44((uint64_t *)&unk_100405070);
    v29 = v9;
    v26 = v25;
    v27 = sub_100011770((unint64_t *)&qword_100408720, (uint64_t *)&unk_100405070, (const char *)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v31, v26, v27, v4, v24);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v11, v7, v19);
    _Block_release(v19);
    swift_release(v16);

    (*(void (**)(char *, uint64_t))(v23 + 8))(v7, v4);
    (*(void (**)(char *, uint64_t))(v29 + 8))(v11, v30);
    swift_release(v33);
  }
}

uint64_t sub_100045B38(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  id v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  result = __chkstk_darwin();
  v6 = (uint64_t *)((char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (a1)
  {
    v7 = *(void **)(a1
                  + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_queue);
    *v6 = v7;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v2);
    v8 = v7;
    LOBYTE(v7) = _dispatchPreconditionTest(_:)(v6);
    result = (*(uint64_t (**)(_QWORD *, uint64_t))(v3 + 8))(v6, v2);
    if ((v7 & 1) != 0)
    {
      Apple80211EventMonitoringHalt(*(_QWORD *)(a1
                                              + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_reference));
      v9 = (_QWORD *)(a1
                    + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_eventHandler);
      v10 = *(_QWORD *)(a1
                      + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_eventHandler);
      v11 = *(_QWORD *)(a1
                      + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_eventHandler
                      + 8);
      *v9 = 0;
      v9[1] = 0;
      return sub_100012318(v10, v11);
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

void AppleDevice.getRequest(requestType:data:on:)(unint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  sub_10000F79C(a1, a2, a3, a4, a5, a6, 262, (uint64_t (*)(_QWORD, _QWORD *))&_Apple80211RawGet);
}

uint64_t AppleDevice.loadCapabilities(on:)(uint64_t a1, uint64_t a2)
{
  _BYTE v3[23];
  char v4;

  memset(v3, 0, sizeof(v3));
  AppleDevice.getRequest(requestType:data:on:)(0xCuLL, (uint64_t)&v3[4], (uint64_t)&v4, 0, a1, a2);
  return *(_QWORD *)v3;
}

void AppleDevice.attachForDriverDiscovery<A>(_:)(uint64_t a1, void (__cdecl *a2)(const void *), CFStringRef (__cdecl *a3)(const void *))
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  os_unfair_lock_s *v12;
  const __SCPreferences *v13;
  io_connect_t v14;
  IONotificationPort *v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  _BYTE v19[24];
  SCPreferencesContext context;

  v4 = v3;
  context.release = a2;
  context.copyDescription = a3;
  v7 = sub_100033C24(&context);
  (*(void (**)(_QWORD *, uint64_t, void (__cdecl *)(const void *)))(*((_QWORD *)a2 - 1) + 16))(v7, a1, a2);
  v8 = v4 + OBJC_IVAR____TtC7CoreP2P11AppleDevice_interfaceDiscoverer;
  swift_beginAccess(v4 + OBJC_IVAR____TtC7CoreP2P11AppleDevice_interfaceDiscoverer, v19, 33, 0);
  sub_10006298C((uint64_t)&context, v8, &qword_100405058);
  swift_endAccess(v19);
  v9 = *(_QWORD *)(v4 + 192);
  v10 = *(_QWORD *)(v4 + 200);
  v11 = *(void **)(v4 + 208);
  v12 = *(os_unfair_lock_s **)(v9 + 16);
  swift_retain();
  swift_retain();
  v13 = v11;
  os_unfair_lock_lock(v12);
  context.version = 0;
  context.info = (void *)v4;
  context.retain = (const void *(__cdecl *)(const void *))j__swift_unknownObjectRetain;
  context.release = (void (__cdecl *)(const void *))j__swift_unknownObjectRelease;
  context.copyDescription = (CFStringRef (__cdecl *)(const void *))sub_1000461D0;
  SCPreferencesSetCallback(v13, (SCPreferencesCallBack)sub_100046254, &context);
  if (qword_100404108 != -1)
    swift_once(&qword_100404108, sub_10017E140);
  SCPreferencesSetDispatchQueue(v13, (dispatch_queue_t)static OS_dispatch_queue.p2p);
  os_unfair_lock_unlock(v12);

  swift_release(v10);
  swift_release(v9);
  if (!*(_DWORD *)(v4 + 172))
  {
    swift_beginAccess(v4 + 160, &context, 33, 0);
    swift_beginAccess(v4 + 168, v19, 33, 0);
    v14 = IORegisterForSystemPower((void *)v4, (IONotificationPortRef *)(v4 + 160), (IOServiceInterestCallback)sub_100046584, (io_object_t *)(v4 + 168));
    swift_endAccess(v19);
    swift_endAccess(&context);
    *(_DWORD *)(v4 + 172) = v14;
    v15 = *(IONotificationPort **)(v4 + 160);
    if (v15)
    {
      IONotificationPortSetDispatchQueue(v15, (dispatch_queue_t)static OS_dispatch_queue.p2p);
    }
    else
    {
      v16 = Logger.logObject.getter(0);
      v17 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v16, v17))
      {
        v18 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v18 = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, v17, "Failed to monitor for system power notifications", v18, 2u);
        swift_slowDealloc(v18, -1, -1);
      }

    }
  }
  swift_beginAccess(v4 + 152, &context, 0, 0);
  sub_10003F448(*(_DWORD *)(v4 + 152));
  swift_beginAccess(v4 + 156, v19, 0, 0);
  sub_1000410C4(*(_DWORD *)(v4 + 156));
}

NSString sub_1000461D0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  NSString v4;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v7 = 0;
  v8 = 0xE000000000000000;
  v6 = swift_retain();
  v2 = type metadata accessor for AppleDevice(0);
  _print_unlocked<A, B>(_:_:)(&v6, &v7, v2, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  swift_release(a1);
  v3 = v8;
  v4 = String._bridgeToObjectiveC()();

  swift_bridgeObjectRelease(v3);
  return v4;
}

void sub_100046254(void *a1, uint64_t a2, _QWORD *a3)
{
  const __SCPreferences *v4;

  v4 = a1;
  sub_10005F238(v4, a3);

}

uint64_t sub_10004628C(void (*a1)(uint64_t), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7, uint64_t a8)
{
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD aBlock[5];
  uint64_t v34;

  v28 = a8;
  v14 = type metadata accessor for DispatchWorkItemFlags(0);
  v31 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin();
  v16 = (char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for DispatchQoS(0);
  v29 = *(_QWORD *)(v17 - 8);
  v30 = v17;
  __chkstk_darwin();
  v19 = (char *)&v27 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  a1(a3);
  if (qword_100404108 != -1)
    swift_once(&qword_100404108, sub_10017E140);
  v20 = swift_allocObject(&unk_1003DE468, 48, 7);
  *(_QWORD *)(v20 + 16) = a4;
  *(_QWORD *)(v20 + 24) = a5;
  *(_DWORD *)(v20 + 32) = a6;
  *(_DWORD *)(v20 + 36) = a7;
  *(_QWORD *)(v20 + 40) = v28;
  aBlock[4] = sub_100063690;
  v34 = v20;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100006F0C;
  aBlock[3] = &unk_1003DE480;
  v21 = _Block_copy(aBlock);
  swift_retain();
  v22 = swift_retain();
  static DispatchQoS.unspecified.getter(v22);
  v32 = _swiftEmptyArrayStorage;
  v23 = sub_100011DE4((unint64_t *)&qword_100408710, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v24 = sub_100012C44((uint64_t *)&unk_100405070);
  v25 = sub_100011770((unint64_t *)&qword_100408720, (uint64_t *)&unk_100405070, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v32, v24, v25, v14, v23);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v19, v16, v21);
  _Block_release(v21);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v16, v14);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v19, v30);
  return swift_release(v34);
}

uint64_t sub_1000464E4(uint64_t a1, uint64_t a2, int a3, io_connect_t a4, intptr_t a5)
{
  _QWORD *v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  _BYTE v16[24];

  v10 = (_QWORD *)(a1 + 16);
  result = swift_beginAccess(a1 + 16, v16, 1, 0);
  v12 = *(_QWORD *)(a1 + 16);
  v13 = v12 + 1;
  if (__OFADD__(v12, 1))
  {
    __break(1u);
  }
  else
  {
    *v10 = v13;
    result = swift_beginAccess(a2 + 16, &v15, 0, 0);
    if (*(_QWORD *)(a2 + 16) == v13 && a3 == 2)
      return IOAllowPowerChange(a4, a5);
  }
  return result;
}

uint64_t sub_100046584(uint64_t a1, uint64_t a2, int a3, intptr_t a4)
{
  return sub_10005F2FC(a1, a3, a4);
}

Swift::Void __swiftcall AppleDevice.detachDriverDiscovery()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  io_object_t v8;
  IONotificationPort *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  os_unfair_lock_s *v13;
  const __SCPreferences *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD aBlock[5];
  uint64_t v23;
  _BYTE v24[24];
  _BYTE v25[24];

  v1 = type metadata accessor for DispatchWorkItemFlags(0);
  v20 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin();
  v3 = (char *)&v20 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DispatchQoS(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin();
  v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess(v0 + 168, v25, 1, 0);
  if (*(_DWORD *)(v0 + 168))
  {
    swift_beginAccess(v0 + 168, aBlock, 33, 0);
    IODeregisterForSystemPower((io_object_t *)(v0 + 168));
    swift_endAccess(aBlock);
  }
  v8 = *(_DWORD *)(v0 + 172);
  if (v8)
    IOObjectRelease(v8);
  swift_beginAccess(v0 + 160, v24, 1, 0);
  v9 = *(IONotificationPort **)(v0 + 160);
  if (v9)
    IONotificationPortDestroy(v9);
  *(_QWORD *)(v0 + 160) = 0;
  *(_QWORD *)(v0 + 168) = 0;
  v10 = *(_QWORD *)(v0 + 192);
  v11 = *(_QWORD *)(v0 + 200);
  v12 = *(void **)(v0 + 208);
  v13 = *(os_unfair_lock_s **)(v10 + 16);
  swift_retain();
  swift_retain();
  v14 = v12;
  os_unfair_lock_lock(v13);
  SCPreferencesSetDispatchQueue(v14, 0);
  SCPreferencesSetCallback(v14, 0, 0);
  os_unfair_lock_unlock(v13);

  swift_release(v11);
  swift_release(v10);
  if (qword_100404108 != -1)
    swift_once(&qword_100404108, sub_10017E140);
  aBlock[4] = sub_10005ECFC;
  v23 = v0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100006F0C;
  aBlock[3] = &unk_1003DD620;
  v15 = _Block_copy(aBlock);
  v16 = swift_retain();
  static DispatchQoS.unspecified.getter(v16);
  v21 = _swiftEmptyArrayStorage;
  v17 = sub_100011DE4((unint64_t *)&qword_100408710, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v18 = sub_100012C44((uint64_t *)&unk_100405070);
  v19 = sub_100011770((unint64_t *)&qword_100408720, (uint64_t *)&unk_100405070, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v21, v18, v19, v1, v17);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v7, v3, v15);
  _Block_release(v15);
  (*(void (**)(char *, uint64_t))(v20 + 8))(v3, v1);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  swift_release(v23);
}

uint64_t sub_10004686C(uint64_t a1)
{
  uint64_t v1;
  _BYTE v3[24];
  _OWORD v4[2];
  uint64_t v5;

  v5 = 0;
  memset(v4, 0, sizeof(v4));
  v1 = a1 + OBJC_IVAR____TtC7CoreP2P11AppleDevice_interfaceDiscoverer;
  swift_beginAccess(a1 + OBJC_IVAR____TtC7CoreP2P11AppleDevice_interfaceDiscoverer, v3, 33, 0);
  sub_10006298C((uint64_t)v4, v1, &qword_100405058);
  return swift_endAccess(v3);
}

uint64_t sub_1000468D4(uint64_t a1, uint64_t *a2, unint64_t a3, unint64_t a4)
{
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t result;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38[16];
  uint64_t v39[3];
  int v40;
  uint64_t v41;

  if (!a1)
  {
    v20 = swift_bridgeObjectRetain_n(a3, 2);
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.error.getter(v21);
    if (os_log_type_enabled(v21, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc(12, -1);
      v24 = swift_slowAlloc(32, -1);
      v39[0] = v24;
      *(_DWORD *)v23 = 136315138;
      swift_bridgeObjectRetain(a3);
      v35 = sub_100013CC8((uint64_t)a2, a3, v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, &v36);
      swift_bridgeObjectRelease_n(a3, 3);
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Failed to create low latency interface because parent %s was not found", v23, 0xCu);
      swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v24, -1, -1);
      swift_slowDealloc(v23, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n(a3, 2);
    }

    v29 = sub_100012C84();
    v30 = swift_allocError(&type metadata for WiFiError, v29, 0, 0);
    *(_OWORD *)v31 = xmmword_10033B180;
    *(_BYTE *)(v31 + 16) = 0;
    swift_willThrow(v30);
    return (uint64_t)a2;
  }
  v36 = 0;
  v37 = 0;
  if ((a4 & 0x8000000000000000) != 0)
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
  }
  else
  {
    if (!HIDWORD(a4))
    {
      v35 = a4 | 0x100000000;
      v41 = 0;
      memset(v39, 0, sizeof(v39));
      v40 = 0;
      swift_retain();
      sub_10000FAF4((uint64_t)v39, 0x125uLL, (uint64_t)&v35, (uint64_t)v38, 0, (uint64_t)a2, a3);
      v7 = Apple80211RawSet(*(_QWORD *)(a1+ OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_reference), v39);
      if (v7)
      {
        v8 = v7;
        v9 = sub_100012C84();
        v10 = swift_allocError(&type metadata for WiFiError, v9, 0, 0);
        *(_QWORD *)v11 = v8;
        *(_QWORD *)(v11 + 8) = 0;
        *(_BYTE *)(v11 + 16) = 0;
        swift_willThrow(v10);
        swift_bridgeObjectRetain(a3);
        swift_errorRetain(v10);
        swift_bridgeObjectRetain(a3);
        v12 = swift_errorRetain(v10);
        v13 = Logger.logObject.getter(v12);
        v14 = static os_log_type_t.error.getter(v13);
        if (os_log_type_enabled(v13, v14))
        {
          v15 = swift_slowAlloc(22, -1);
          v16 = (uint64_t *)swift_slowAlloc(8, -1);
          v33 = swift_slowAlloc(32, -1);
          *(_QWORD *)v38 = v33;
          *(_DWORD *)v15 = 136315394;
          swift_bridgeObjectRetain(a3);
          v34 = sub_100013CC8((uint64_t)a2, a3, (uint64_t *)v38);
          a2 = &v35;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35);
          swift_bridgeObjectRelease_n(a3, 3);
          *(_WORD *)(v15 + 12) = 2112;
          swift_errorRetain(v10);
          v17 = _swift_stdlib_bridgeErrorToNSError(v10);
          v34 = v17;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35);
          *v16 = v17;
          swift_errorRelease(v10);
          swift_errorRelease(v10);
          _os_log_impl((void *)&_mh_execute_header, v13, v14, "Failed to create low latency interface for %s because %@", (uint8_t *)v15, 0x16u);
          v18 = sub_100012C44(&qword_100404BB0);
          swift_arrayDestroy(v16, 1, v18);
          swift_slowDealloc(v16, -1, -1);
          swift_arrayDestroy(v33, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v33, -1, -1);
          swift_slowDealloc(v15, -1, -1);

        }
        else
        {
          swift_bridgeObjectRelease_n(a3, 2);

          swift_errorRelease(v10);
          v19 = swift_errorRelease(v10);
        }
        swift_willThrow(v19);
        swift_release(a1);
      }
      else
      {
        HIBYTE(v37) = 0;
        v25 = String.init(cString:)(&v36);
        v27 = v26;
        v28 = HIBYTE(v26) & 0xF;
        if ((v26 & 0x2000000000000000) == 0)
          v28 = v25 & 0xFFFFFFFFFFFFLL;
        if (!v28
          || (a2 = (uint64_t *)v25,
              sub_100011DE4(&qword_1004050B8, type metadata accessor for AppleDevice, (uint64_t)&protocol conformance descriptor for AppleDevice), static ApplePlatform.withInterface<A>(_:matchingFamily:_:)((uint64_t)&type metadata for Bool, (uint64_t)v38), v38[0] == 2)|| (v38[0] & 1) == 0)
        {
          swift_bridgeObjectRelease(v27);
          __asm { BR              X10 }
        }
        swift_release(a1);
      }
      return (uint64_t)a2;
    }
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 3455, 0);
  }
  __break(1u);
  return result;
}

uint64_t sub_1000470A4(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, unsigned int a7, unint64_t a8)
{
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  _DWORD *v25;
  _BOOL8 v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  _DWORD *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t result;
  unint64_t v39;
  int v42;
  __int16 v43;
  char v44;
  char v45;
  char v46;
  char v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  _BYTE v51[23];
  char v52;
  __int128 v53;
  uint64_t v54;
  int v55;
  uint64_t v56;

  if (a2)
  {
    memset(v51, 0, sizeof(v51));
    v56 = 0;
    v54 = 0;
    v53 = 0uLL;
    v55 = 0;
    swift_retain();
    sub_10000FAF4((uint64_t)&v53, 0xCuLL, (uint64_t)&v51[4], (uint64_t)&v52, 0, a3, a4);
    v15 = *(_QWORD *)(a2
                    + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_reference);
    v16 = Apple80211RawGet(v15, &v53);
    if (v16)
    {
      v17 = v16;
      v18 = sub_100012C84();
      v19 = swift_allocError(&type metadata for WiFiError, v18, 0, 0);
      *(_QWORD *)v20 = v17;
      *(_QWORD *)(v20 + 8) = 0;
      *(_BYTE *)(v20 + 16) = 0;
      swift_willThrow(v19);
      v21 = a2;
      return swift_release(v21);
    }
    v53 = *(_OWORD *)&v51[4];
    LOWORD(v54) = *(_WORD *)&v51[20];
    BYTE2(v54) = v51[22];
    v26 = sub_100095C54(a7, (uint64_t)&v53);
    if (!v26)
    {
      v32 = Logger.logObject.getter(v26);
      v33 = static os_log_type_t.error.getter(v32);
      if (os_log_type_enabled(v32, v33))
      {
        v34 = (_DWORD *)swift_slowAlloc(12, -1);
        *(_QWORD *)&v53 = swift_slowAlloc(32, -1);
        *v34 = 136315138;
        __asm { BR              X10 }
      }

      v39 = sub_100012C84();
      v30 = swift_allocError(&type metadata for WiFiError, v39, 0, 0);
      *(_OWORD *)v31 = xmmword_10033B180;
      goto LABEL_15;
    }
    v49 = 0;
    v50 = 0;
    if ((a8 & 0x8000000000000000) != 0)
    {
      result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
    }
    else
    {
      if (!HIDWORD(a8))
      {
        v42 = a8;
        v48 = a6;
        v43 = a5;
        v44 = BYTE2(a5);
        v45 = BYTE3(a5);
        v46 = BYTE4(a5);
        v47 = BYTE5(a5);
        v56 = 0;
        v54 = 0;
        v53 = 0uLL;
        v55 = 0;
        sub_10000FAF4((uint64_t)&v53, 0x5EuLL, (uint64_t)&v42, (uint64_t)v51, 0, a3, a4);
        v27 = Apple80211RawSet(v15, &v53);
        if (!v27)
        {
LABEL_16:
          v21 = a2;
          return swift_release(v21);
        }
        v28 = v27;
        v29 = sub_100012C84();
        v30 = swift_allocError(&type metadata for WiFiError, v29, 0, 0);
        *(_QWORD *)v31 = v28;
        *(_QWORD *)(v31 + 8) = 0;
LABEL_15:
        *(_BYTE *)(v31 + 16) = 0;
        swift_willThrow(v30);
        goto LABEL_16;
      }
      result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 3455, 0);
    }
    __break(1u);
  }
  else
  {
    v22 = swift_bridgeObjectRetain_n(a4, 2);
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.error.getter(v23);
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (_DWORD *)swift_slowAlloc(22, -1);
      *(_QWORD *)&v53 = swift_slowAlloc(64, -1);
      *v25 = 136315394;
      __asm { BR              X10 }
    }
    swift_bridgeObjectRelease_n(a4, 2);

    v35 = sub_100012C84();
    v36 = swift_allocError(&type metadata for WiFiError, v35, 0, 0);
    *(_OWORD *)v37 = xmmword_10033B180;
    *(_BYTE *)(v37 + 16) = 0;
    return swift_willThrow(v36);
  }
  return result;
}

BOOL sub_100047744(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v4;
  int v5;
  _BYTE v6[8];
  uint64_t v7;

  sub_100063EB8(a1 + 24, (uint64_t)v6, &qword_100405BA0);
  sub_100063EB8((uint64_t)v6, (uint64_t)&v7, &qword_100405BA0);
  if (!v7)
    __break(1u);
  v4 = *(_QWORD *)(v7 + 8);
  v5 = *(_DWORD *)(v7 + 16);
  v1 = sub_10021BD08((_BYTE *)&v4 + *(unsigned __int8 *)(v7 + 5), *(unsigned __int8 *)(v7 + 6));
  return (sub_10000E38C(v1, v2) & 0x1000000000000) == 0;
}

BOOL sub_1000477F4@<W0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  _BOOL8 result;

  result = sub_100047744(a1);
  *a2 = result;
  return result;
}

_QWORD *sub_100047824(_QWORD *(*a1)(uint64_t *__return_ptr, _QWORD *), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;
  _QWORD v9[2];
  uint64_t v10;

  if ((a4 & 0x1000000000000000) != 0 || !(a4 & 0x2000000000000000 | a3 & 0x1000000000000000))
  {
    result = _StringGuts._slowWithCString<A>(_:)(&v10, a1, a2);
    if (!v4)
      return (_QWORD *)v10;
  }
  else if ((a4 & 0x2000000000000000) != 0)
  {
    v9[0] = a3;
    v9[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    result = a1(&v8, v9);
    if (!v4)
      return (_QWORD *)v8;
  }
  else
  {
    if ((a3 & 0x1000000000000000) != 0)
      v6 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
    else
      v6 = _StringObject.sharedUTF8.getter(a3, a4);
    result = a1(v9, (_QWORD *)v6);
    if (!v4)
      return (_QWORD *)v9[0];
  }
  return result;
}

_QWORD *sub_1000478FC(_QWORD *(*a1)(unsigned int *__return_ptr, _QWORD *), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD *result;
  unsigned int v8;
  _QWORD v9[2];
  uint64_t v10;

  if ((a4 & 0x1000000000000000) != 0 || !(a4 & 0x2000000000000000 | a3 & 0x1000000000000000))
  {
    result = _StringGuts._slowWithCString<A>(_:)(&v10, a1, a2);
    if (!v4)
      return (_QWORD *)v10;
  }
  else if ((a4 & 0x2000000000000000) != 0)
  {
    v9[0] = a3;
    v9[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    result = a1(&v8, v9);
    if (!v4)
      return (_QWORD *)v8;
  }
  else
  {
    if ((a3 & 0x1000000000000000) != 0)
      v6 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
    else
      v6 = _StringObject.sharedUTF8.getter(a3, a4);
    result = a1((unsigned int *)v9, (_QWORD *)v6);
    if (!v4)
      return (_QWORD *)LODWORD(v9[0]);
  }
  return result;
}

uint64_t sub_1000479D4@<X0>(char *__dst@<X2>, uint64_t result@<X0>, uint64_t a3@<X1>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _QWORD v9[4];
  char __source[8];
  uint64_t v11;

  v6 = a3;
  v7 = result;
  v9[2] = __dst;
  v9[3] = a4;
  if ((a3 & 0x1000000000000000) != 0 || !(a3 & 0x2000000000000000 | result & 0x1000000000000000))
    return (uint64_t)_StringGuts._slowWithCString<A>(_:)(a5, sub_100062C1C, v9);
  if ((a3 & 0x2000000000000000) != 0)
    goto LABEL_8;
  if ((result & 0x1000000000000000) != 0)
  {
    v8 = (char *)((a3 & 0xFFFFFFFFFFFFFFFLL) + 32);
LABEL_6:
    if (__dst)
      return strlcpy(__dst, v8, 0x10uLL);
    __break(1u);
LABEL_8:
    *(_QWORD *)__source = v7;
    v11 = v6 & 0xFFFFFFFFFFFFFFLL;
    if (__dst)
    {
      v8 = __source;
      return strlcpy(__dst, v8, 0x10uLL);
    }
    goto LABEL_14;
  }
  result = _StringObject.sharedUTF8.getter(result, a3);
  v8 = (char *)result;
  if (result)
    goto LABEL_6;
  __break(1u);
LABEL_14:
  __break(1u);
  return result;
}

_QWORD *sub_100047AAC@<X0>(uint64_t (*a1)(_QWORD *)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  _QWORD *v6;
  _QWORD v8[2];

  if ((a4 & 0x1000000000000000) != 0 || !(a4 & 0x2000000000000000 | a3 & 0x1000000000000000))
    return _StringGuts._slowWithCString<A>(_:)(a5, a1, a2);
  if ((a4 & 0x2000000000000000) != 0)
  {
    v8[0] = a3;
    v8[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    v6 = v8;
  }
  else if ((a3 & 0x1000000000000000) != 0)
  {
    v6 = (_QWORD *)((a4 & 0xFFFFFFFFFFFFFFFLL) + 32);
  }
  else
  {
    v6 = (_QWORD *)_StringObject.sharedUTF8.getter(a3, a4);
  }
  return (_QWORD *)a1(v6);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> AppleDevice.neighborDiscoveryTableClear(on:)(Swift::String on)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t object;
  uint64_t countAndFlagsBits;
  uint64_t v5;
  unint64_t v6;
  unsigned __int8 v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  unsigned int v12;
  const char *v13;
  unsigned int v14;
  char v15[8];
  uint64_t v16;
  unsigned int v17;
  unsigned __int16 v18;
  unsigned __int8 v19;

  v2 = v1;
  object = (uint64_t)on._object;
  countAndFlagsBits = on._countAndFlagsBits;
  v5 = *(_QWORD *)(v1 + 24);
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v5 + 16));
  sub_100011DE4(&qword_1004050B8, type metadata accessor for AppleDevice, (uint64_t)&protocol conformance descriptor for AppleDevice);
  static ApplePlatform.withInterface<A>(_:matchingFamily:_:)((uint64_t)&type metadata for WiFiAddress, (uint64_t)&v17);
  v6 = v17 | ((unint64_t)v18 << 32);
  v7 = v19;
  swift_beginAccess(v1 + 32, v15, 32, 0);
  v8 = *(_QWORD *)(v1 + 32);
  if (*(_QWORD *)(v8 + 16))
  {
    swift_bridgeObjectRetain(object);
    v9 = sub_10000FA00(countAndFlagsBits, object);
    if ((v10 & 1) != 0)
    {
      v11 = *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v9);
      swift_endAccess(v15);
      swift_retain();
      swift_bridgeObjectRelease(object);
      v12 = *(_DWORD *)(v11
                      + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_interfaceIndex);
      swift_release(v11);
      goto LABEL_12;
    }
    swift_bridgeObjectRelease(object);
  }
  swift_endAccess(v15);
  if ((object & 0x1000000000000000) != 0
    || !(object & 0x2000000000000000 | countAndFlagsBits & 0x1000000000000000))
  {
    _StringGuts._slowWithCString<A>(_:)(&v14, sub_100047DEC, 0);
    v12 = v14;
  }
  else if ((object & 0x2000000000000000) != 0)
  {
    *(_QWORD *)v15 = countAndFlagsBits;
    v16 = object & 0xFFFFFFFFFFFFFFLL;
    v12 = if_nametoindex(v15);
  }
  else
  {
    if ((countAndFlagsBits & 0x1000000000000000) != 0)
      v13 = (const char *)((object & 0xFFFFFFFFFFFFFFFLL) + 32);
    else
      v13 = (const char *)_StringObject.sharedUTF8.getter(countAndFlagsBits, object);
    sub_100047DEC(v13, v15);
    v12 = *(_DWORD *)v15;
  }
LABEL_12:
  swift_beginAccess(v2 + OBJC_IVAR____TtC7CoreP2P11AppleDevice_neighborDiscoveryRoutingSocket, v15, 33, 0);
  LOBYTE(v14) = v7;
  sub_10017B044(v6 & 0xFFFFFFFFFFFFLL | ((unint64_t)v7 << 48), v12);
  swift_endAccess(v15);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v5 + 16));
}

uint64_t sub_100047DA4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100051D38(a1, a2);
}

uint64_t sub_100047DEC@<X0>(const char *a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t result;

  result = if_nametoindex(a1);
  *a2 = result;
  return result;
}

void AppleDevice.neighborDiscoveryTableUpdate(macAddress:ipv6Address:on:command:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned int a8)
{
  sub_10005FC48(a1 & 0xFFFFFFFFFFFFLL, a2, a3, a6, a7, a8);
}

CFArrayRef sub_100047E3C(const __SCPreferences *a1, uint64_t a2, unint64_t a3, unsigned __int8 *a4)
{
  CFArrayRef result;
  CFArrayRef v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  const __SCNetworkSet *v14;
  const __SCNetworkSet *v15;
  CFArrayRef v17;
  CFArrayRef v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  const __SCNetworkService *v23;
  const __SCNetworkService *v24;
  const __SCNetworkInterface *v25;
  const __SCNetworkInterface *v26;
  __CFString *v27;
  NSString v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unsigned __int8 *v45;
  NSObject *log;
  SCNetworkSetRef set;
  unint64_t v49;

  result = SCNetworkSetCopyAll(a1);
  if (result)
  {
    v7 = result;
    v49 = 0;
    type metadata accessor for SCNetworkSet(0);
    static Array._conditionallyBridgeFromObjectiveC(_:result:)(v7, &v49, v8);

    v9 = v49;
    if (v49)
    {
      v10 = v49 & 0xFFFFFFFFFFFFFF8;
      if (v49 >> 62)
        goto LABEL_44;
      v11 = *(_QWORD *)((v49 & 0xFFFFFFFFFFFFFF8) + 0x10);
      while (v11)
      {
        v12 = a3;
        a3 = 0;
        v13 = v9 & 0xC000000000000001;
        v43 = v9 + 32;
        v45 = a4;
        v41 = v10;
        v42 = v9;
        v39 = v9 & 0xC000000000000001;
        v40 = v11;
        while (1)
        {
          if (v13)
          {
            v14 = (const __SCNetworkSet *)specialized _ArrayBuffer._getElementSlowPath(_:)(a3, v9);
          }
          else
          {
            if (a3 >= *(_QWORD *)(v10 + 16))
              goto LABEL_42;
            v14 = (const __SCNetworkSet *)*(id *)(v43 + 8 * a3);
          }
          v15 = v14;
          if (__OFADD__(a3++, 1))
          {
            __break(1u);
LABEL_42:
            __break(1u);
            goto LABEL_43;
          }
          v17 = SCNetworkSetCopyServices(v14);
          if (!v17
            || (v18 = v17,
                v49 = 0,
                type metadata accessor for SCNetworkService(0),
                static Array._conditionallyBridgeFromObjectiveC(_:result:)(v18, &v49, v19),
                v18,
                (v20 = v49) == 0))
          {

            goto LABEL_7;
          }
          set = v15;
          if (!(v49 >> 62))
          {
            v21 = *(_QWORD *)((v49 & 0xFFFFFFFFFFFFFF8) + 0x10);
            if (v21)
              break;
            goto LABEL_39;
          }
          v37 = (v49 & 0x8000000000000000) == 0 ? v49 & 0xFFFFFFFFFFFFFF8 : v49;
          swift_bridgeObjectRetain(v49);
          v21 = _CocoaArrayWrapper.endIndex.getter(v37);
          swift_bridgeObjectRelease(v20);
          if (v21)
            break;
LABEL_39:

          swift_bridgeObjectRelease(v20);
LABEL_7:
          if (a3 == v11)
            goto LABEL_48;
        }
        if (v21 >= 1)
        {
          v44 = a3;
          v22 = 0;
          while (1)
          {
            if ((v20 & 0xC000000000000001) != 0)
              v23 = (const __SCNetworkService *)specialized _ArrayBuffer._getElementSlowPath(_:)(v22, v20);
            else
              v23 = (const __SCNetworkService *)*(id *)(v20 + 8 * v22 + 32);
            v24 = v23;
            v25 = SCNetworkServiceGetInterface(v23);
            if (v25)
            {
              v26 = v25;
              v27 = (id)SCNetworkInterfaceGetBSDName(v25);

              if (v27)
              {
                v28 = String._bridgeToObjectiveC()();
                v29 = CFEqual(v28, v27);

                if (v29)
                {
                  if ((*a4 & 1) == 0)
                  {
                    v30 = swift_bridgeObjectRetain_n(v12, 2);
                    v31 = v12;
                    v32 = Logger.logObject.getter(v30);
                    v33 = static os_log_type_t.default.getter();
                    if (os_log_type_enabled(v32, v33))
                    {
                      v34 = swift_slowAlloc(12, -1);
                      log = v32;
                      v35 = swift_slowAlloc(32, -1);
                      v49 = v35;
                      *(_DWORD *)v34 = 136315138;
                      swift_bridgeObjectRetain(v31);
                      *(_QWORD *)(v34 + 4) = sub_100013CC8(a2, v31, (uint64_t *)&v49);
                      swift_bridgeObjectRelease_n(v31, 3);
                      _os_log_impl((void *)&_mh_execute_header, log, v33, "Removing %s from legacy preferences", (uint8_t *)v34, 0xCu);
                      swift_arrayDestroy(v35, 1, (char *)&type metadata for Any + 8);
                      swift_slowDealloc(v35, -1, -1);
                      v36 = v34;
                      a4 = v45;
                      swift_slowDealloc(v36, -1, -1);

                    }
                    else
                    {
                      swift_bridgeObjectRelease_n(v31, 2);

                    }
                    v12 = v31;
                  }
                  SCNetworkSetRemoveService(set, v24);

                  *a4 = 1;
                  goto LABEL_21;
                }

              }
            }

LABEL_21:
            if (v21 == ++v22)
            {

              swift_bridgeObjectRelease(v20);
              v10 = v41;
              v9 = v42;
              v13 = v39;
              v11 = v40;
              a3 = v44;
              goto LABEL_7;
            }
          }
        }
LABEL_43:
        __break(1u);
LABEL_44:
        if (v9 >= 0)
          v38 = v10;
        else
          v38 = v9;
        swift_bridgeObjectRetain(v9);
        v11 = _CocoaArrayWrapper.endIndex.getter(v38);
        swift_bridgeObjectRelease(v9);
      }
LABEL_48:
      swift_bridgeObjectRelease(v9);
      return (CFArrayRef)*a4;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_100048250(const __SCPreferences *a1, id a2, uint64_t a3)
{
  NSString v6;
  void *v7;
  SCNetworkSetRef v8;
  void *v9;
  CFArrayRef v10;
  CFArrayRef v11;
  uint64_t v12;
  uint64_t v13;
  id *v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  unint64_t v18;
  const __SCNetworkService *v19;
  BOOL v20;
  const __SCNetworkInterface *v21;
  const __SCNetworkInterface *v22;
  const __SCNetworkInterface *v23;
  Swift::String v24;
  void *v26;
  id v27;
  SCNetworkProtocolRef v28;
  const __SCNetworkProtocol *v29;
  SCNetworkProtocolRef v30;
  const __SCNetworkProtocol *v31;
  const __CFDictionary *v32;
  const __CFDictionary *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __CFString *v40;
  const __CFString *v41;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v43;
  const __CFDictionary *isa;
  int v45;
  SCNetworkProtocolRef v46;
  const __SCNetworkProtocol *v47;
  SCNetworkProtocolRef v48;
  const __SCNetworkProtocol *v49;
  const __CFDictionary *v50;
  const __CFDictionary *v51;
  unint64_t v52;
  __CFString *v53;
  const __CFString *v54;
  char v55;
  const __CFDictionary *v56;
  int v57;
  CFArrayRef v58;
  CFArrayRef v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  const __SCNetworkSet *v64;
  CFArrayRef v65;
  CFArrayRef v66;
  uint64_t v67;
  id v68;
  void *v69;
  char v70;
  const __SCNetworkInterface *v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  char v75;
  char v76;
  char v77;
  uint64_t v78;
  Swift::String v79;
  uint64_t v80;
  const __SCNetworkProtocol *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  SCNetworkProtocolRef protocol;
  const __SCPreferences *prefs;
  SCPreferencesRef prefsa;
  uint64_t v89;
  void *v90;
  unint64_t v91;
  void *v92;
  void *v93;
  _OWORD v94[2];
  __int128 v95;
  uint64_t v96;

  v6 = String._bridgeToObjectiveC()();
  v7 = (void *)_SCNetworkInterfaceCreateWithBSDName(kCFAllocatorDefault, v6, 0xFFFFFFFFLL);

  if (!v7)
  {
    _StringGuts.grow(_:)(42);
    swift_bridgeObjectRelease(0xE000000000000000);
    *(_QWORD *)&v95 = 0xD000000000000028;
    *((_QWORD *)&v95 + 1) = 0x8000000100363570;
    v24._countAndFlagsBits = (uint64_t)a2;
    v24._object = (void *)a3;
    String.append(_:)(v24);
    return 0;
  }
  v8 = SCNetworkSetCopyCurrent(a1);
  if (!v8)
  {

    return 0;
  }
  v9 = v8;
  if (!SCNetworkSetEstablishDefaultInterfaceConfiguration(v8, v7) && SCError())
  {

    return 0;
  }
  v10 = SCNetworkServiceCopyAll(a1);
  if (!v10
    || (v11 = v10,
        *(_QWORD *)&v95 = 0,
        type metadata accessor for SCNetworkService(0),
        v13 = v12,
        static Array._conditionallyBridgeFromObjectiveC(_:result:)(v11, &v95, v12),
        v11,
        (v14 = (id *)v95) == 0))
  {

    return 0;
  }
  v90 = (void *)a3;
  v15 = v95 & 0xFFFFFFFFFFFFFF8;
  if ((unint64_t)v95 >> 62)
  {
    if ((uint64_t)v95 >= 0)
      a3 = v95 & 0xFFFFFFFFFFFFFF8;
    else
      a3 = v95;
    swift_bridgeObjectRetain(v95);
    v16 = _CocoaArrayWrapper.endIndex.getter(a3);
    swift_bridgeObjectRelease(v14);
    if (v16)
      goto LABEL_8;
LABEL_108:
    swift_bridgeObjectRelease(v14);
LABEL_109:
    *(_QWORD *)&v95 = 0;
    *((_QWORD *)&v95 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(37);
    swift_bridgeObjectRelease(*((_QWORD *)&v95 + 1));
    *(_QWORD *)&v95 = 0xD000000000000023;
    *((_QWORD *)&v95 + 1) = 0x80000001003635D0;
    v79._countAndFlagsBits = (uint64_t)a2;
    v79._object = v90;
    String.append(_:)(v79);

    return 0;
  }
  v16 = *(_QWORD *)((v95 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v16)
    goto LABEL_108;
LABEL_8:
  prefs = a1;
  v89 = v13;
  v92 = v9;
  v17 = 0;
  v18 = 0;
  v9 = (void *)((unint64_t)v14 & 0xC000000000000001);
  while (1)
  {
    if (v9)
    {
      v19 = (const __SCNetworkService *)specialized _ArrayBuffer._getElementSlowPath(_:)(v18, v14);
    }
    else
    {
      if (v18 >= *(_QWORD *)(((unint64_t)v14 & 0xFFFFFFFFFFFFFF8) + 0x10))
        goto LABEL_102;
      v19 = (const __SCNetworkService *)v14[v18 + 4];
    }
    a3 = (uint64_t)v19;
    v20 = __OFADD__(v18++, 1);
    if (v20)
    {
      __break(1u);
LABEL_102:
      __break(1u);
LABEL_103:

      swift_bridgeObjectRelease(v15);
      return 0;
    }
    if (v17)
      goto LABEL_10;
    v21 = SCNetworkServiceGetInterface(v19);
    if (v21)
      break;
LABEL_9:
    v17 = 0;
LABEL_10:

    if (v18 == v16)
    {
      swift_bridgeObjectRelease(v14);
      v9 = v92;
      if (v17)
      {
        a2 = v17;
        v26 = v17;
        goto LABEL_31;
      }
      goto LABEL_109;
    }
  }
  v22 = v21;
  if (!CFEqual(v21, v7))
  {
    while (1)
    {
      v23 = v22;
      v22 = SCNetworkInterfaceGetInterface(v22);

      if (!v22)
        goto LABEL_9;
      if (CFEqual(v22, v7))
      {
        v17 = (id)a3;
        a3 = (uint64_t)v22;
        goto LABEL_10;
      }
    }
  }
  swift_bridgeObjectRelease(v14);

  a2 = (id)a3;
  v26 = 0;
  v17 = (id)a3;
  v9 = v92;
LABEL_31:
  v27 = v26;
  v28 = SCNetworkServiceCopyProtocol((SCNetworkServiceRef)a2, kSCNetworkProtocolTypeIPv4);
  v29 = v28;
  if (v28)
  {
LABEL_34:
    v93 = v17;
    v31 = v28;
    v32 = SCNetworkProtocolGetConfiguration(v29);
    if (!v32)
      goto LABEL_36;
    v33 = v32;
    *(_QWORD *)&v95 = 0;
    type metadata accessor for CFString(0);
    v35 = v34;
    v36 = sub_100011DE4(&qword_1004047D0, (uint64_t (*)(uint64_t))type metadata accessor for CFString, (uint64_t)&unk_100338E88);
    static Dictionary._conditionallyBridgeFromObjectiveC(_:result:)(v33, &v95, v35, (char *)&type metadata for Any + 8, v36);

    v37 = v95;
    if (!(_QWORD)v95)
LABEL_36:
      v37 = sub_10001EC98((uint64_t)_swiftEmptyArrayStorage);
    type metadata accessor for CFString(0);
    v39 = v38;
    v96 = v38;
    *(_QWORD *)&v95 = kSCValNetIPv4ConfigMethodDHCP;
    sub_100033A2C(&v95, v94);
    v40 = (id)kSCPropNetIPv4ConfigMethod;
    v41 = (id)kSCValNetIPv4ConfigMethodDHCP;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v37);
    sub_100030ADC(v94, v40, isUniquelyReferenced_nonNull_native);

    swift_bridgeObjectRelease(0x8000000000000000);
    v43 = sub_100011DE4(&qword_1004047D0, (uint64_t (*)(uint64_t))type metadata accessor for CFString, (uint64_t)&unk_100338E88);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v37);
    v45 = SCNetworkProtocolSetConfiguration(v29, isa);

    if (v45)
    {
      v46 = SCNetworkServiceCopyProtocol((SCNetworkServiceRef)a2, kSCNetworkProtocolTypeIPv6);
      v47 = v46;
      if (v46)
        goto LABEL_41;
      SCNetworkServiceAddProtocolType((SCNetworkServiceRef)a2, kSCNetworkProtocolTypeIPv6);
      v48 = SCNetworkServiceCopyProtocol((SCNetworkServiceRef)a2, kSCNetworkProtocolTypeIPv6);
      if (v48)
      {
        v47 = v48;
LABEL_41:
        protocol = v47;
        v49 = v46;
        v50 = SCNetworkProtocolGetConfiguration(v47);
        if (!v50
          || (v51 = v50,
              *(_QWORD *)&v95 = 0,
              static Dictionary._conditionallyBridgeFromObjectiveC(_:result:)(v50, &v95, v39, (char *)&type metadata for Any + 8, v43), v51, (v52 = v95) == 0))
        {
          v52 = sub_10001EC98((uint64_t)_swiftEmptyArrayStorage);
        }
        v96 = v39;
        *(_QWORD *)&v95 = kSCValNetIPv6ConfigMethodAutomatic;
        sub_100033A2C(&v95, v94);
        v53 = (id)kSCPropNetIPv6ConfigMethod;
        v54 = (id)kSCValNetIPv6ConfigMethodAutomatic;
        v55 = swift_isUniquelyReferenced_nonNull_native(v52);
        sub_100030ADC(v94, v53, v55);

        swift_bridgeObjectRelease(0x8000000000000000);
        v56 = Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v52);
        a3 = (uint64_t)v47;
        v57 = SCNetworkProtocolSetConfiguration(v47, v56);

        if (!v57)
          goto LABEL_99;
        v17 = v93;
        if (!SCNetworkServiceSetEnabled((SCNetworkServiceRef)a2, 0)
          || (v58 = SCNetworkSetCopyAll(prefs)) == 0
          || (v59 = v58,
              *(_QWORD *)&v95 = 0,
              type metadata accessor for SCNetworkSet(0),
              static Array._conditionallyBridgeFromObjectiveC(_:result:)(v59, &v95, v60),
              v59,
              (v15 = v95) == 0))
        {
LABEL_99:

          return 0;
        }
        v61 = v95 & 0xFFFFFFFFFFFFFF8;
        v81 = v29;
        if ((unint64_t)v95 >> 62)
          goto LABEL_114;
        v62 = *(_QWORD *)((v95 & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (!v62)
        {
LABEL_118:

          swift_bridgeObjectRelease(v15);
          return 1;
        }
LABEL_50:
        v63 = 0;
        v91 = v15 & 0xC000000000000001;
        v82 = v15;
        v83 = v15 + 32;
        v84 = v61;
        prefsa = (SCPreferencesRef)v62;
        while (1)
        {
          if (v91)
          {
            v64 = (const __SCNetworkSet *)specialized _ArrayBuffer._getElementSlowPath(_:)(v63, v15);
          }
          else
          {
            if (v63 >= *(_QWORD *)(v61 + 16))
              goto LABEL_111;
            v64 = (const __SCNetworkSet *)*(id *)(v83 + 8 * v63);
          }
          v9 = v64;
          v20 = __OFADD__(v63++, 1);
          if (v20)
          {
            __break(1u);
LABEL_111:
            __break(1u);
LABEL_112:
            __break(1u);
            goto LABEL_113;
          }
          v65 = SCNetworkSetCopyServices(v64);
          if (v65)
          {
            v66 = v65;
            *(_QWORD *)&v95 = 0;
            static Array._conditionallyBridgeFromObjectiveC(_:result:)(v65, &v95, v89);

            v67 = v95;
            if (!(_QWORD)v95)
            {

              goto LABEL_94;
            }
            if ((unint64_t)v95 >> 62)
            {
              if ((uint64_t)v95 >= 0)
                v78 = v95 & 0xFFFFFFFFFFFFFF8;
              else
                v78 = v95;
              swift_bridgeObjectRetain(v95);
              v61 = _CocoaArrayWrapper.endIndex.getter(v78);
              if (!v61)
              {
LABEL_92:

                swift_bridgeObjectRelease_n(v67, 2);
LABEL_93:
                v61 = v84;
LABEL_94:
                v62 = (uint64_t)prefsa;
                goto LABEL_52;
              }
            }
            else
            {
              v61 = *(_QWORD *)((v95 & 0xFFFFFFFFFFFFFF8) + 0x10);
              swift_bridgeObjectRetain(v95);
              if (!v61)
                goto LABEL_92;
            }
            if ((v67 & 0xC000000000000001) != 0)
              v68 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v67);
            else
              v68 = *(id *)(v67 + 32);
            v69 = v68;
            v85 = sub_100011DE4(&qword_100405B98, (uint64_t (*)(uint64_t))type metadata accessor for SCNetworkService, (uint64_t)&unk_100339A30);
            v70 = static _CFObject.== infix(_:_:)(v69, a2, v89, v85);

            if ((v70 & 1) == 0)
            {
              if (v61 == 1)
                goto LABEL_71;
              if ((v67 & 0xC000000000000001) != 0)
              {
                v72 = specialized _ArrayBuffer._getElementSlowPath(_:)(1, v67);
                v73 = static _CFObject.== infix(_:_:)(v72, a2, v89, v85);
                swift_unknownObjectRelease(v72);
                if ((v73 & 1) == 0)
                {
                  if (v61 != 2)
                  {
                    a3 = 2;
                    do
                    {
                      v74 = specialized _ArrayBuffer._getElementSlowPath(_:)(a3, v67);
                      v17 = (id)(a3 + 1);
                      if (__OFADD__(a3, 1))
                        goto LABEL_112;
                      v15 = v74;
                      v75 = static _CFObject.== infix(_:_:)(v74, a2, v89, v85);
                      swift_unknownObjectRelease(v15);
                      if ((v75 & 1) != 0)
                        goto LABEL_65;
                      ++a3;
                    }
                    while (v17 != (id)v61);
                  }
LABEL_71:

                  swift_bridgeObjectRelease_n(v67, 2);
                  v17 = v93;
                  a3 = (uint64_t)protocol;
                  v15 = v82;
                  goto LABEL_93;
                }
              }
              else
              {
                v17 = *(id *)(v67 + 40);
                v76 = static _CFObject.== infix(_:_:)(v17, a2, v89, v85);

                if ((v76 & 1) == 0)
                {
                  if (v61 != 2)
                  {
                    a3 = 6;
                    while (1)
                    {
                      v15 = a3 - 3;
                      if (__OFADD__(a3 - 4, 1))
                        break;
                      v17 = *(id *)(v67 + 8 * a3);
                      v77 = static _CFObject.== infix(_:_:)(v17, a2, v89, v85);

                      if ((v77 & 1) != 0)
                        goto LABEL_65;
                      ++a3;
                      if (v15 == v61)
                        goto LABEL_71;
                    }
LABEL_113:
                    __break(1u);
LABEL_114:
                    if (v15 >= 0)
                      v80 = v61;
                    else
                      v80 = v15;
                    swift_bridgeObjectRetain(v15);
                    v62 = _CocoaArrayWrapper.endIndex.getter(v80);
                    swift_bridgeObjectRelease(v15);
                    if (!v62)
                      goto LABEL_118;
                    goto LABEL_50;
                  }
                  goto LABEL_71;
                }
              }
            }
LABEL_65:
            swift_bridgeObjectRelease_n(v67, 2);
            v71 = SCNetworkServiceGetInterface((SCNetworkServiceRef)a2);
            v61 = v84;
            if (!v71)
            {

              v17 = v93;
              a3 = (uint64_t)protocol;
              v15 = v82;
              goto LABEL_94;
            }
            v14 = (id *)v71;
            v17 = v93;
            a3 = (uint64_t)protocol;
            v62 = (uint64_t)prefsa;
            v15 = v82;
            if (!SCNetworkSetContainsInterface((SCNetworkSetRef)v9, v71)
              && !SCNetworkSetAddService((SCNetworkSetRef)v9, (SCNetworkServiceRef)a2))
            {
              goto LABEL_103;
            }

          }
          else
          {

          }
LABEL_52:
          v9 = v92;
          if (v63 == v62)
            goto LABEL_118;
        }
      }
    }

    return 0;
  }
  SCNetworkServiceAddProtocolType((SCNetworkServiceRef)a2, kSCNetworkProtocolTypeIPv4);
  v30 = SCNetworkServiceCopyProtocol((SCNetworkServiceRef)a2, kSCNetworkProtocolTypeIPv4);
  if (v30)
  {
    v29 = v30;
    goto LABEL_34;
  }

  return 0;
}

void sub_100048E10(unsigned int a1, uint64_t a2)
{
  AppleDevice.send(request:data:)(a1, a2);
}

void sub_100048E30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned int a8)
{
  sub_10005FC48(a1 & 0xFFFFFFFFFFFFLL, a2, a3, a6, a7, a8);
}

void sub_100048E60(uint64_t a1, uint64_t a2)
{
  AppleDevice.neighborDiscoveryTableClear(on:)(*(Swift::String *)&a1);
}

void sub_100048E80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  AppleDevice.startMonitoringEvents(on:eventHandler:)(a1, a2, a3, a4);
}

void sub_100048EA0(uint64_t a1, uint64_t a2)
{
  AppleDevice.stopMonitoringEvents(on:)(*(Swift::String *)&a1);
}

uint64_t sub_100048EC0(uint64_t a1, uint64_t a2)
{
  return AppleDevice.loadCapabilities(on:)(a1, a2);
}

void sub_100048EEC(unint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  AppleDevice.getRequest(requestType:data:on:)(a1, a2, a3, a4 & 1, a5, a6);
}

void sub_100048F10(unint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  AppleDevice.setRequest(requestType:data:on:)(a1, a2, a3, a4 & 1, a5, a6);
}

id sub_100048F34@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v5;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 192);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 200);
  v5 = *(id *)(*(_QWORD *)v1 + 208);
  *a1 = v2;
  a1[1] = v3;
  a1[2] = v5;
  swift_retain(v2);
  swift_retain(v3);
  return v5;
}

uint64_t sub_100048F7C@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 184);
  *a1 = v2;
  return swift_retain(v2);
}

uint64_t sub_100048F8C(CoreP2P::WiFiInterfaceRole a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return AppleDevice.findOrCreateInterface(for:on:with:)(a1, *(Swift::String *)&a2, (CoreP2P::WiFiAddress *)(a4 & 0xFFFFFFFFFFFFLL)).value._countAndFlagsBits;
}

uint64_t sub_100048FB0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v13;
  uint64_t v14;

  v3 = type metadata accessor for Mirror.AncestorRepresentation(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin();
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012C44((uint64_t *)&unk_1004085C0);
  __chkstk_darwin();
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *v1;
  v13 = _swiftEmptyArrayStorage;
  v9 = type metadata accessor for Mirror.DisplayStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, enum case for Mirror.AncestorRepresentation.generated(_:), v3);
  swift_retain();
  v10 = sub_100012C44(&qword_100405B90);
  v11 = sub_100011770((unint64_t *)&qword_10040C3E0, &qword_100405B90, (const char *)&protocol conformance descriptor for [A]);
  return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)(&v14, &v13, v8, v6, a1, v10, v11);
}

void static ApplePlatform.enumerateInterfaceAddresses(_:)(uint64_t (*a1)(__int128 *))
{
  uint64_t v1;
  ifaddrs *v3;
  ifaddrs *v4;
  unsigned int ifa_flags;
  unsigned __int8 v6;
  __int128 v7;
  ifaddrs *v8;
  __int128 v9;
  unsigned int v10;
  __int128 v11;
  __int128 v12;

  v8 = 0;
  if (!getifaddrs(&v8))
  {
    v3 = v8;
    if (v8)
    {
      v4 = v8;
      do
      {
        ifa_flags = v4->ifa_flags;
        v7 = *(_OWORD *)&v4->ifa_next;
        v9 = *(_OWORD *)&v4->ifa_next;
        v10 = ifa_flags;
        v11 = *(_OWORD *)&v4->ifa_addr;
        v12 = *(_OWORD *)&v4->ifa_dstaddr;
        v6 = a1(&v9);
        if (v1)
          break;
        v4 = (ifaddrs *)v7;
      }
      while ((v6 & ((_QWORD)v7 != 0)) == 1);
    }
    freeifaddrs(v3);
  }
}

uint64_t sub_1000491E8(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, void (*a6)(uint64_t), _BOOL8 a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  char v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BOOL8 v29;
  void (*v30)(uint64_t);
  int v31;
  char v32[8];
  char v33[8];
  uint64_t v34;
  uint64_t v35;

  v29 = a7;
  v30 = a6;
  v31 = a4;
  v27 = a5;
  v28 = a9;
  v13 = type metadata accessor for Optional(0, a9);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin();
  v16 = (char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v18 = (char *)&v27 - v17;
  sub_100063EB8(a1 + 8, (uint64_t)v33, &qword_100405BA8);
  sub_100063EB8((uint64_t)v33, (uint64_t)&v34, &qword_100405BA8);
  result = v34;
  if (v34)
  {
    v20 = String.init(cString:)(v34);
    if (v20 == a2 && v21 == a3)
    {
      swift_bridgeObjectRelease(a3);
    }
    else
    {
      v23 = v21;
      v24 = _stringCompareWithSmolCheck(_:_:expecting:)(v20, v21, a2, a3, 0);
      swift_bridgeObjectRelease(v23);
      if ((v24 & 1) == 0)
        return 1;
    }
    sub_100063EB8(a1 + 24, (uint64_t)v32, &qword_100405BA0);
    result = sub_100063EB8((uint64_t)v32, (uint64_t)&v35, &qword_100405BA0);
    if (v35)
    {
      if (*(unsigned __int8 *)(v35 + 1) == v31)
      {
        v25 = v29;
        v30(a1);
        if (!v9)
        {
          v26 = v27;
          (*(void (**)(uint64_t, char *, uint64_t))(v14 + 40))(v27, v18, v13);
          (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, v26, v13);
          v25 = (*(unsigned int (**)(char *, uint64_t))(*(_QWORD *)(v28 - 8) + 48))(v16, 1) == 1;
          (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
        }
        return v25;
      }
      return 1;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t static ApplePlatform.withInterface<A>(_:matchingAllInFamily:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;

  v9 = Array.init()(a7);
  static ApplePlatform.enumerateInterfaceAddresses(_:)((uint64_t (*)(__int128 *))sub_10005FE6C);
  if (v7)
    swift_bridgeObjectRelease(v9);
  return v9;
}

uint64_t sub_10004949C(uint64_t a1, uint64_t a2, uint64_t a3, int a4, void (*a5)(uint64_t), uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t);
  int v32;
  char v33[8];
  char v34[8];
  uint64_t v35;
  uint64_t v36;

  v29 = a7;
  v30 = a6;
  v31 = a5;
  v32 = a4;
  v28 = type metadata accessor for Optional(0, a9);
  v26 = *(_QWORD *)(v28 - 8);
  __chkstk_darwin();
  v14 = (char *)&v26 - v13;
  v15 = *(_QWORD *)(a9 - 8);
  __chkstk_darwin();
  v27 = (char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v18 = (char *)&v26 - v17;
  sub_100063EB8(a1 + 8, (uint64_t)v34, &qword_100405BA8);
  sub_100063EB8((uint64_t)v34, (uint64_t)&v35, &qword_100405BA8);
  result = v35;
  if (v35)
  {
    v20 = String.init(cString:)(v35);
    v22 = v21;
    if (v20 == a2 && v21 == a3)
    {
      swift_bridgeObjectRelease(a3);
    }
    else
    {
      v23 = _stringCompareWithSmolCheck(_:_:expecting:)(v20, v21, a2, a3, 0);
      swift_bridgeObjectRelease(v22);
      if ((v23 & 1) == 0)
        return 1;
    }
    sub_100063EB8(a1 + 24, (uint64_t)v33, &qword_100405BA0);
    result = sub_100063EB8((uint64_t)v33, (uint64_t)&v36, &qword_100405BA0);
    if (v36)
    {
      if (*(unsigned __int8 *)(v36 + 1) == v32)
      {
        v31(a1);
        if (!v9)
        {
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v14, 1, a9) == 1)
          {
            (*(void (**)(char *, uint64_t))(v26 + 8))(v14, v28);
          }
          else
          {
            (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v18, v14, a9);
            v24 = v27;
            (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v27, v18, a9);
            v25 = type metadata accessor for Array(0, a9);
            Array.append(_:)(v24, v25);
            (*(void (**)(char *, uint64_t))(v15 + 8))(v18, a9);
          }
        }
      }
      return 1;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t AppleDevice.NetworkPathMonitor.__allocating_init(evaluator:queue:updatedHandler:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;

  v9 = swift_allocObject(v4, 24, 7);
  AppleDevice.NetworkPathMonitor.init(evaluator:queue:updatedHandler:)(a1, a2, a3, a4);
  return v9;
}

uint64_t AppleDevice.NetworkPathMonitor.init(evaluator:queue:updatedHandler:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[5];
  uint64_t v17;

  *(_QWORD *)(v4 + 16) = a1;
  v9 = swift_allocObject(&unk_1003DD658, 32, 7);
  *(_QWORD *)(v9 + 16) = a3;
  *(_QWORD *)(v9 + 24) = a4;
  v16[4] = sub_10005FEA8;
  v17 = v9;
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 1107296256;
  v16[2] = sub_1000498B0;
  v16[3] = &unk_1003DD670;
  v10 = _Block_copy(v16);
  v11 = v17;
  swift_unknownObjectRetain_n(a1, 2);
  v12 = a2;
  swift_retain();
  swift_release(v11);
  nw_path_evaluator_set_update_handler(a1, v12, v10);
  _Block_release(v10);
  swift_unknownObjectRelease(a1);

  v13 = *(_QWORD *)(v4 + 16);
  v14 = swift_unknownObjectRetain(v13);
  nw_path_evaluator_start(v14);
  swift_unknownObjectRelease(v13);
  swift_unknownObjectRelease(a1);

  swift_release(a4);
  return v4;
}

uint64_t sub_100049870(uint64_t result, void (*a2)(uint64_t))
{
  uint64_t v3;
  uint64_t v4;

  if (result)
  {
    v3 = result;
    v4 = swift_unknownObjectRetain(result);
    a2(v4);
    return swift_unknownObjectRelease(v3);
  }
  return result;
}

uint64_t sub_1000498B0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void (*v4)(uint64_t);
  uint64_t v5;

  v4 = *(void (**)(uint64_t))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = swift_unknownObjectRetain(a2);
  v4(v5);
  swift_release(v3);
  return swift_unknownObjectRelease(a2);
}

uint64_t AppleDevice.NetworkPathMonitor.deinit()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  nw_path_evaluator_cancel(v1);
  swift_unknownObjectRelease(v1);
  return v0;
}

uint64_t AppleDevice.NetworkPathMonitor.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  nw_path_evaluator_cancel(v1);
  swift_unknownObjectRelease(v1);
  return swift_deallocClassInstance(v0, 24, 7);
}

uint64_t AppleDevice.NetworkPathMonitor.path.getter()
{
  uint64_t v0;
  uint64_t result;

  result = nw_path_evaluator_copy_path(*(_QWORD *)(v0 + 16));
  if (!result)
    __break(1u);
  return result;
}

uint64_t static AppleDevice.NetworkPathMonitor.statusDescription(from:)(int a1)
{
  uint64_t result;

  result = 0x64696C61766E69;
  switch(a1)
  {
    case 0:
      return result;
    case 1:
      result = 0x6569667369746173;
      break;
    case 2:
      result = 0x6673697461736E75;
      break;
    case 3:
      result = 0x6169667369746173;
      break;
    default:
      result = 0x6E776F6E6B6E75;
      break;
  }
  return result;
}

uint64_t sub_100049A30()
{
  uint64_t v0;

  if (!*(_BYTE *)(v0 + 16))
    return 0x6E696469766F7250;
  if (*(_BYTE *)(v0 + 16) == 1)
    return 0x676E696764697242;
  if (*(_OWORD *)v0 == 0)
    return 1701602377;
  return 0x74616E696D726554;
}

uint64_t sub_100049ABC(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _OWORD *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  void (*v29)(uint64_t, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t type;
  os_log_type_t typea;
  os_log_type_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v4 = v3;
  sub_100061DD0(a1, a2, a3);
  swift_retain();
  sub_100061DD0(a1, a2, a3);
  v8 = swift_retain();
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.default.getter();
  v11 = (_QWORD *)&unk_100405000;
  if (os_log_type_enabled(v9, v10))
  {
    v36 = v10;
    v12 = swift_slowAlloc(22, -1);
    type = swift_slowAlloc(64, -1);
    v39 = type;
    *(_DWORD *)v12 = 136315394;
    if (a3)
    {
      if (a3 == 1)
      {
        v13 = 0x676E696764697242;
        v14 = 0xEF64656C69614620;
      }
      else
      {
        if (a1 | a2)
          v13 = 0x74616E696D726554;
        else
          v13 = 1701602377;
        if (a1 | a2)
          v14 = 0xEA00000000006465;
        else
          v14 = 0xE400000000000000;
      }
    }
    else
    {
      v13 = 0x6E696469766F7250;
      v14 = 0xE900000000000067;
    }
    v38 = sub_100013CC8(v13, v14, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39);
    swift_bridgeObjectRelease(v14);
    sub_100061DF8(a1, a2, a3);
    sub_100061DF8(a1, a2, a3);
    *(_WORD *)(v12 + 12) = 2080;
    v11 = &unk_100405000;
    v15 = (_OWORD *)(v3
                   + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A30InternetSharingProviderSession_state);
    if (*(_BYTE *)(v3
                  + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A30InternetSharingProviderSession_state
                  + 16))
    {
      if (*(_BYTE *)(v3
                    + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A30InternetSharingProviderSession_state
                    + 16) == 1)
      {
        v16 = 0x676E696764697242;
        v17 = 0xEF64656C69614620;
      }
      else
      {
        if (*v15 == 0)
          v16 = 1701602377;
        else
          v16 = 0x74616E696D726554;
        if (*v15 == 0)
          v17 = 0xE400000000000000;
        else
          v17 = 0xEA00000000006465;
      }
    }
    else
    {
      v17 = 0xE900000000000067;
      v16 = 0x6E696469766F7250;
    }
    v38 = sub_100013CC8(v16, v17, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39);
    swift_release_n(v3, 2);
    swift_bridgeObjectRelease(v17);
    _os_log_impl((void *)&_mh_execute_header, v9, v36, "Provider state changed: %s -> %s", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy(type, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(type, -1, -1);
    swift_slowDealloc(v12, -1, -1);

  }
  else
  {

    sub_100061DF8(a1, a2, a3);
    sub_100061DF8(a1, a2, a3);
    swift_release_n(v3, 2);
  }
  v18 = v3 + v11[38];
  if (*(_BYTE *)(v18 + 16) == 1)
  {
    v20 = *(_QWORD *)v18;
    v19 = *(_QWORD *)(v18 + 8);
    swift_retain_n(v3, 3);
    sub_100061DD0(v20, v19, 1);
    swift_retain();
    v21 = sub_100061DD0(v20, v19, 1);
    v22 = Logger.logObject.getter(v21);
    v23 = static os_log_type_t.error.getter(v22);
    if (os_log_type_enabled(v22, v23))
    {
      typea = v23;
      v24 = swift_slowAlloc(32, -1);
      v37 = swift_slowAlloc(96, -1);
      v39 = v37;
      *(_DWORD *)v24 = 136315650;
      v25 = *(_QWORD *)(v4
                      + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A30InternetSharingProviderSession_sourceInterface);
      v26 = *(_QWORD *)(v4
                      + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A30InternetSharingProviderSession_sourceInterface
                      + 8);
      swift_bridgeObjectRetain(v26);
      v38 = sub_100013CC8(v25, v26, &v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39);
      swift_release_n(v4, 2);
      swift_bridgeObjectRelease(v26);
      *(_WORD *)(v24 + 12) = 2080;
      v28 = *(_QWORD *)(v4
                      + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A30InternetSharingProviderSession_destinationInterface);
      v27 = *(_QWORD *)(v4
                      + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A30InternetSharingProviderSession_destinationInterface
                      + 8);
      swift_bridgeObjectRetain(v27);
      v38 = sub_100013CC8(v28, v27, &v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39);
      swift_release_n(v4, 2);
      swift_bridgeObjectRelease(v27);
      *(_WORD *)(v24 + 22) = 2080;
      swift_bridgeObjectRetain(v19);
      v38 = sub_100013CC8(v20, v19, &v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39);
      sub_100061DF8(v20, v19, 1);
      sub_100061DF8(v20, v19, 1);
      swift_bridgeObjectRelease(v19);
      _os_log_impl((void *)&_mh_execute_header, v22, typea, "Provider bridging failed from %s to %s because %s", (uint8_t *)v24, 0x20u);
      swift_arrayDestroy(v37, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v37, -1, -1);
      swift_slowDealloc(v24, -1, -1);

    }
    else
    {
      swift_release_n(v4, 4);

      sub_100061DF8(v20, v19, 1);
      sub_100061DF8(v20, v19, 1);
    }
  }
  v29 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4
                                                         + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A30InternetSharingProviderSession_stateUpdatedHandler);
  v30 = *(_QWORD *)v18;
  v31 = *(_QWORD *)(v18 + 8);
  v32 = *(unsigned __int8 *)(v18 + 16);
  sub_100061DD0(*(_QWORD *)v18, v31, *(_BYTE *)(v18 + 16));
  v29(v30, v31, v32);
  return sub_100061DF8(v30, v31, v32);
}

uint64_t sub_10004A088(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;

  v10 = v9;
  v43 = a7;
  v44 = a8;
  v40 = a5;
  v38 = a3;
  v39 = a4;
  v36 = a1;
  v37 = a2;
  v41 = a9;
  v42 = a6;
  v35 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v11 = *(_QWORD *)(v35 - 8);
  __chkstk_darwin();
  v13 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin();
  v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for DispatchQoS(0);
  __chkstk_darwin();
  v18 = (char *)&v34 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  Logger.init(subsystem:category:)(0x6C7070612E6D6F63, 0xED00006E616E2E65, 0x74656E7265746E69, 0xEF676E6972616853);
  v19 = v10
      + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A30InternetSharingProviderSession_state;
  *(_QWORD *)v19 = 0;
  *(_QWORD *)(v19 + 8) = 0;
  *(_BYTE *)(v19 + 16) = 2;
  v34 = OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A30InternetSharingProviderSession_internetSharingQueue;
  v20 = sub_1000644C8(0, (unint64_t *)&qword_1004042B0, OS_dispatch_queue_ptr);
  static DispatchQoS.unspecified.getter(v20);
  v45 = _swiftEmptyArrayStorage;
  v21 = sub_100011DE4((unint64_t *)&unk_10040FFC0, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v22 = sub_100012C44((uint64_t *)&unk_1004042C0);
  v23 = sub_100011770(qword_10040FFD0, (uint64_t *)&unk_1004042C0, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v45, v22, v23, v14, v21);
  (*(void (**)(char *, _QWORD, uint64_t))(v11 + 104))(v13, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v35);
  v24 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000019, 0x80000001003637D0, v18, v16, v13, 0);
  *(_QWORD *)(v10 + v34) = v24;
  v25 = (_QWORD *)(v10
                 + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A30InternetSharingProviderSession_sourceInterface);
  v26 = v37;
  *v25 = v36;
  v25[1] = v26;
  v27 = (_QWORD *)(v10
                 + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A30InternetSharingProviderSession_destinationInterface);
  v28 = v39;
  *v27 = v38;
  v27[1] = v28;
  *(_BYTE *)(v10
           + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A30InternetSharingProviderSession_bridgedMode) = v40;
  v29 = (_QWORD *)(v10
                 + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A30InternetSharingProviderSession_infraInterfaceName);
  v30 = v43;
  *v29 = v42;
  v29[1] = v30;
  v31 = (_QWORD *)(v10
                 + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A30InternetSharingProviderSession_stateUpdatedHandler);
  v32 = v41;
  *v31 = v44;
  v31[1] = v32;
  return v10;
}

uint64_t sub_10004A360(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;

  v2 = v1;
  v3 = v1
     + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A30InternetSharingProviderSession_state;
  if (!*(_BYTE *)(v1
                 + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A30InternetSharingProviderSession_state
                 + 16))
  {
    v4 = Logger.logObject.getter(a1);
    v5 = static os_log_type_t.error.getter(v4);
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Internet sharing provider session will automatically terminate because it was released", v6, 2u);
      swift_slowDealloc(v6, -1, -1);
    }

    sub_10004A4B4();
  }
  v7 = v2
     + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A30InternetSharingProviderSession_logger;
  v8 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  swift_bridgeObjectRelease(*(_QWORD *)(v2
                                      + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A30InternetSharingProviderSession_sourceInterface
                                      + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v2
                                      + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A30InternetSharingProviderSession_destinationInterface
                                      + 8));
  swift_release(*(_QWORD *)(v2
                          + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A30InternetSharingProviderSession_stateUpdatedHandler
                          + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v2
                                      + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A30InternetSharingProviderSession_infraInterfaceName
                                      + 8));
  sub_100061DF8(*(_QWORD *)v3, *(_QWORD *)(v3 + 8), *(_BYTE *)(v3 + 16));
  objc_release(*(id *)(v2
                     + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A30InternetSharingProviderSession_internetSharingQueue));
  return v2;
}

void sub_10004A4B4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  os_log_type_t v11;
  uint8_t *v12;
  NSObject *oslog;

  v1 = (_QWORD *)(v0
                + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A30InternetSharingProviderSession_state);
  if (!*(_BYTE *)(v0
                 + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A30InternetSharingProviderSession_state
                 + 16))
  {
    v2 = *v1;
    v3 = _NETRBClientStopService(*v1);
    if ((v3 & 1) == 0)
    {
      v4 = Logger.logObject.getter(v3);
      v5 = static os_log_type_t.error.getter(v4);
      if (os_log_type_enabled(v4, v5))
      {
        v6 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v6 = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, v5, "Failed to stop netrb client service", v6, 2u);
        swift_slowDealloc(v6, -1, -1);
      }

    }
    v7 = _NETRBClientDestroy(v2);
    if ((_DWORD)v7)
    {
      v8 = *v1;
      v9 = v1[1];
      *(_OWORD *)v1 = xmmword_100337850;
      v10 = *((_BYTE *)v1 + 16);
      *((_BYTE *)v1 + 16) = 2;
      sub_100061DD0(v8, v9, v10);
      sub_100061DF8(v8, v9, v10);
      sub_100049ABC(v8, v9, v10);
      sub_100061DF8(v8, v9, v10);
    }
    else
    {
      oslog = Logger.logObject.getter(v7);
      v11 = static os_log_type_t.error.getter(oslog);
      if (os_log_type_enabled(oslog, v11))
      {
        v12 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v12 = 0;
        _os_log_impl((void *)&_mh_execute_header, oslog, v11, "Failed to destroy netrb client", v12, 2u);
        swift_slowDealloc(v12, -1, -1);
      }

    }
  }
}

uint64_t sub_10004A694()
{
  return sub_100050F48((uint64_t (*)(void))sub_10004A360);
}

void sub_10004A6A0()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  dispatch_semaphore_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  void *v20;
  _QWORD *v21;
  NSObject *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  xpc_object_t empty;
  const char *v27;
  uint64_t v28;
  void *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  NSObject *v34;
  os_log_type_t v35;
  _BOOL4 v36;
  uint8_t *v37;
  xpc_object_t v38;
  char *v39;
  uint64_t v40;
  uint64_t started;
  int v42;
  char *v43;
  char *v44;
  void (*v45)(char *, uint64_t);
  uint64_t v46;
  NSObject *v47;
  uint64_t v48;
  uint64_t v49;
  NSObject *v50;
  os_log_type_t v51;
  uint8_t *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  int v56;
  uint8_t *v57;
  uint8_t *v58;
  xpc_object_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  void (*v64)(char *, uint64_t);
  uint64_t v65;
  uint64_t v66;
  void (*v67)(char *, uint64_t);
  uint64_t v68;
  _BYTE *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  NSObject *v75;
  os_log_type_t v76;
  uint64_t v77;
  unint64_t v78;
  os_log_t v79;
  uint64_t v80;
  _BYTE *v81;
  uint64_t v82;
  void *v83;
  Swift::String v84;
  unint64_t v85;
  __n128 v86;
  uint64_t interface_names;
  unsigned int v88;
  uint64_t v89;
  NSObject *v90;
  __n128 v91;
  uint64_t v92;
  char v93;
  uint64_t v94;
  uint64_t v95;
  NSObject *v96;
  BOOL v97;
  char *v98;
  uint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  NSObject *v104;
  os_log_type_t v105;
  _BOOL4 v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  os_log_t v110;
  uint64_t v111;
  NSObject *v112;
  os_log_type_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  uint64_t v118;
  NSObject *v119;
  NSObject *v120;
  NSObject *v121;
  int v122;
  os_log_t v123;
  uint64_t v124;
  uint64_t v125;
  char v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char v130;
  uint64_t v131;
  uint64_t v132;
  os_log_type_t v133;
  uint8_t *v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  __n128 v138;
  NSObject *v139;
  uint64_t v140;
  os_log_t v141;
  int v142;
  unint64_t v143;
  uint64_t v144;
  unint64_t v145;
  char *v146;
  NSObject *v147;
  uint64_t v148;
  uint64_t v149;
  NSObject *v150;
  xpc_object_t v151;
  uint64_t v152;
  _BYTE *v153;
  char *v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  _QWORD *v160;
  uint64_t v161;
  char v162[32];
  uint64_t v163;
  uint64_t v164;
  unint64_t v165;
  os_log_t v166;
  NSObject *v167;
  uint64_t aBlock[3];
  _QWORD v169[2];
  _QWORD *v170;

  type metadata accessor for String.Encoding(0);
  __chkstk_darwin();
  v2 = (char *)&v136 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for DispatchTime(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin();
  v6 = (char *)&v136 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v8 = (char *)&v136 - v7;
  type metadata accessor for DispatchTimeInterval(0);
  __chkstk_darwin();
  v10 = (char *)&v136 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin();
  v14 = v0
      + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A30InternetSharingProviderSession_state;
  if (*(_BYTE *)(v0
                + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A30InternetSharingProviderSession_state
                + 16) != 2
    || *(_OWORD *)v14 != 0)
  {
    return;
  }
  v154 = v6;
  v155 = v8;
  v156 = v3;
  v160 = (uint64_t *)((char *)&v136 - v12);
  v161 = v13;
  v159 = v11;
  v15 = swift_allocObject(&unk_1003DE2B0, 17, 7);
  *(_BYTE *)(v15 + 16) = 0;
  v153 = (_BYTE *)(v15 + 16);
  v16 = dispatch_semaphore_create(0);
  v17 = *(_QWORD *)(v0
                  + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A30InternetSharingProviderSession_internetSharingQueue);
  v18 = swift_allocObject(&unk_1003DE2D8, 24, 7);
  swift_weakInit(v18 + 16, v0);
  v19 = (_QWORD *)swift_allocObject(&unk_1003DE300, 40, 7);
  v19[2] = v18;
  v19[3] = v15;
  v19[4] = v16;
  v169[1] = sub_100062C10;
  v170 = v19;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_10004BD0C;
  v169[0] = &unk_1003DE318;
  v20 = _Block_copy(aBlock);
  v21 = v170;
  swift_retain();
  v22 = v16;
  swift_release(v21);
  v23 = _NETRBClientCreate(v17, v20, 0);
  _Block_release(v20);
  if (!v23)
  {
    sub_10004BD70(0xD00000000000001DLL, 0x8000000100363700);
    v55 = v15;
LABEL_15:
    swift_release(v55);

    return;
  }
  v157 = v15;
  v158 = v0;
  if (!_NETRBClientSetGlobalServiceState(v23, 1023))
  {
    _NETRBClientDestroy(v23);
    sub_10004BD70(0xD000000000000025, 0x8000000100363720);
    v55 = v157;
    goto LABEL_15;
  }
  v152 = v23;
  v150 = v22;
  v25 = v159;
  v24 = v160;
  *v160 = 2;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v161 + 104))(v24, enum case for DispatchTimeInterval.seconds(_:), v25);
  empty = xpc_dictionary_create_empty();
  v27 = (const char *)netrbClientInterfaceName;
  v28 = v158;
  if (!netrbClientInterfaceName)
  {
    __break(1u);
    goto LABEL_89;
  }
  v29 = empty;
  v30 = *(_QWORD *)(v158
                  + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A30InternetSharingProviderSession_destinationInterface
                  + 8);
  v144 = *(_QWORD *)(v158
                   + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A30InternetSharingProviderSession_destinationInterface);
  v145 = v30;
  v31 = String.utf8CString.getter();
  v151 = v29;
  xpc_dictionary_set_string(v29, v27, (const char *)(v31 + 32));
  v32 = swift_release(v31);
  v166 = 0;
  v167 = 0;
  v33 = *(unsigned __int8 *)(v28
                           + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A30InternetSharingProviderSession_bridgedMode);
  v149 = v28
       + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A30InternetSharingProviderSession_logger;
  v34 = Logger.logObject.getter(v32);
  v35 = static os_log_type_t.default.getter();
  v36 = os_log_type_enabled(v34, v35);
  if (v33 != 1)
  {
    if (v36)
    {
      v56 = v33;
      v57 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v57 = 0;
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "Starting in internet sharing mode", v57, 2u);
      v58 = v57;
      v33 = v56;
      swift_slowDealloc(v58, -1, -1);
    }

    if (netrbClientDeviceType)
    {
      v59 = v151;
      xpc_dictionary_set_uint64(v151, netrbClientDeviceType, 6uLL);
      LODWORD(v59) = _NETRBClientStartService(v152, 0, 201, 302, v59);
      v60 = v161;
      v61 = (*(uint64_t (**)(char *, _QWORD *, uint64_t))(v161 + 16))(v10, v24, v25);
      if ((_DWORD)v59)
      {
        v142 = v33;
        v62 = v154;
        static DispatchTime.now()(v61);
        v63 = v155;
        + infix(_:_:)(v62, v10);
        v64 = *(void (**)(char *, uint64_t))(v4 + 8);
        v65 = v156;
        v64(v62, v156);
        v66 = OS_dispatch_semaphore.wait(timeout:)(v63) & 1;
        v64(v63, v65);
        LOBYTE(v66) = static DispatchTimeoutResult.== infix(_:_:)(v66, 1);
        v67 = *(void (**)(char *, uint64_t))(v60 + 8);
        v67(v10, v25);
        if ((v66 & 1) != 0)
        {
          v24 = v160;
        }
        else
        {
          v81 = v153;
          swift_beginAccess(v153, aBlock, 0, 0);
          v24 = v160;
          if ((*v81 & 1) != 0)
          {
LABEL_62:
            v110 = v166;
            v109 = (unint64_t)v167;
            swift_bridgeObjectRetain_n(v167, 2);
            v111 = swift_retain_n(v28, 4);
            v112 = Logger.logObject.getter(v111);
            v113 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v112, v113))
            {
              v114 = (uint64_t)v110;
              v115 = swift_slowAlloc(22, -1);
              v158 = swift_slowAlloc(64, -1);
              v164 = v158;
              *(_DWORD *)v115 = 136315394;
              v116 = v145;
              swift_bridgeObjectRetain(v145);
              v163 = sub_100013CC8(v144, v116, &v164);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v163, &v164);
              swift_release_n(v28, 2);
              swift_bridgeObjectRelease(v116);
              *(_WORD *)(v115 + 12) = 2080;
              if (v109)
              {
                v117 = v109;
              }
              else
              {
                v114 = *(_QWORD *)(v28
                                 + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A30InternetSharingProviderSession_sourceInterface);
                v117 = *(_QWORD *)(v28
                                 + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A30InternetSharingProviderSession_sourceInterface
                                 + 8);
                swift_bridgeObjectRetain(v117);
              }
              swift_bridgeObjectRetain(v109);
              v163 = sub_100013CC8(v114, v117, &v164);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v163, &v164);
              swift_release_n(v28, 2);
              swift_bridgeObjectRelease_n(v109, 2);
              swift_bridgeObjectRelease(v117);
              _os_log_impl((void *)&_mh_execute_header, v112, v113, "Configured infra relay bridge with internal interface %s external interface %s", (uint8_t *)v115, 0x16u);
              v118 = v158;
              swift_arrayDestroy(v158, 2, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v118, -1, -1);
              swift_slowDealloc(v115, -1, -1);

              v25 = v159;
            }
            else
            {
              swift_bridgeObjectRelease_n(v109, 2);
              swift_release_n(v28, 4);

            }
            v120 = *(NSObject **)(v28
                                + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A30InternetSharingProviderSession_infraInterfaceName);
            v119 = *(NSObject **)(v28
                                + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A30InternetSharingProviderSession_infraInterfaceName
                                + 8);
            swift_beginAccess(&v166, &v164, 0, 0);
            v121 = v167;
            v122 = v142;
            if (v167)
            {
              v123 = v166;
            }
            else
            {
              v123 = *(os_log_t *)(v28
                                 + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A30InternetSharingProviderSession_sourceInterface);
              v121 = *(NSObject **)(v28
                                  + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A30InternetSharingProviderSession_sourceInterface
                                  + 8);
              swift_bridgeObjectRetain(v121);
            }
            v124 = v122 ^ 1u;
            if (v120 == v123 && v119 == v121)
            {
              swift_bridgeObjectRelease(v119);
              v125 = 0;
            }
            else
            {
              v126 = _stringCompareWithSmolCheck(_:_:expecting:)(v120, v119, v123, v121, 0);
              swift_bridgeObjectRelease(v121);
              v125 = 256;
              if ((v126 & 1) != 0)
                v125 = 0;
            }
            v127 = v125 | v124;
            v128 = *(_QWORD *)v14;
            v129 = *(_QWORD *)(v14 + 8);
            *(_QWORD *)v14 = v152;
            *(_QWORD *)(v14 + 8) = v127;
            v130 = *(_BYTE *)(v14 + 16);
            *(_BYTE *)(v14 + 16) = 0;
            sub_100061DD0(v128, v129, v130);
            sub_100061DF8(v128, v129, v130);
            sub_100049ABC(v128, v129, v130);
            sub_100061DF8(v128, v129, v130);

            swift_unknownObjectRelease(v151);
            (*(void (**)(_QWORD *, uint64_t))(v161 + 8))(v160, v25);
            goto LABEL_77;
          }
        }
      }
      else
      {
        v67 = *(void (**)(char *, uint64_t))(v60 + 8);
        v67(v10, v25);
      }
      swift_bridgeObjectRelease(v167);
      _NETRBClientDestroy(v152);
      v164 = 0;
      v165 = 0xE000000000000000;
      _StringGuts.grow(_:)(40);
      swift_bridgeObjectRelease(v165);
      v164 = 0xD000000000000026;
      v165 = 0x8000000100363750;
      v82 = *(_QWORD *)(v28
                      + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A30InternetSharingProviderSession_sourceInterface);
      v83 = *(void **)(v28
                     + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A30InternetSharingProviderSession_sourceInterface
                     + 8);
      swift_bridgeObjectRetain(v83);
      v84._countAndFlagsBits = v82;
      v84._object = v83;
      String.append(_:)(v84);
      swift_bridgeObjectRelease(v83);
      v85 = v165;
      sub_10004BD70(v164, v165);

      swift_unknownObjectRelease(v151);
      v86 = swift_bridgeObjectRelease(v85);
      ((void (*)(_QWORD *, uint64_t, __n128))v67)(v24, v25, v86);
LABEL_77:
      v131 = v157;
      goto LABEL_86;
    }
LABEL_90:
    __break(1u);
    return;
  }
  if (v36)
  {
    v37 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v37 = 0;
    _os_log_impl((void *)&_mh_execute_header, v34, v35, "Starting in bridged mode", v37, 2u);
    swift_slowDealloc(v37, -1, -1);
  }

  if (!netrbClientDeviceType)
  {
LABEL_89:
    __break(1u);
    goto LABEL_90;
  }
  v38 = v151;
  xpc_dictionary_set_uint64(v151, netrbClientDeviceType, 2uLL);
  v39 = (char *)swift_slowAlloc(16, -1);
  v40 = *(_QWORD *)(v28
                  + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A30InternetSharingProviderSession_sourceInterface
                  + 8);
  v147 = *(NSObject **)(v28
                      + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A30InternetSharingProviderSession_sourceInterface);
  v143 = v40;
  sub_1000479D4(v39, (uint64_t)v147, v40, 16, v169);
  v146 = v39;
  started = _NETRBClientStartService(v152, v39, 204, 300, v38);
  v42 = started;
  v43 = v154;
  static DispatchTime.now()(started);
  v44 = v155;
  + infix(_:_:)(v43, v24);
  v45 = *(void (**)(char *, uint64_t))(v4 + 8);
  v46 = v156;
  v45(v43, v156);
  v47 = v150;
  v48 = OS_dispatch_semaphore.wait(timeout:)(v44) & 1;
  v45(v44, v46);
  if ((static DispatchTimeoutResult.== infix(_:_:)(v48, 1) & 1) != 0)
  {
    v49 = swift_retain_n(v28, 2);
    v50 = Logger.logObject.getter(v49);
    v51 = static os_log_type_t.error.getter(v50);
    if (os_log_type_enabled(v50, v51))
    {
      v52 = (uint8_t *)swift_slowAlloc(12, -1);
      v53 = swift_slowAlloc(32, -1);
      aBlock[0] = v53;
      *(_DWORD *)v52 = 136315138;
      v54 = v143;
      swift_bridgeObjectRetain(v143);
      v164 = sub_100013CC8((uint64_t)v147, v54, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v164, &v165);
      swift_release_n(v28, 2);
      swift_bridgeObjectRelease(v54);
      _os_log_impl((void *)&_mh_execute_header, v50, v51, "Timed out while waiting to start the netrb service for %s", v52, 0xCu);
      swift_arrayDestroy(v53, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v53, -1, -1);
      swift_slowDealloc(v52, -1, -1);
    }
    else
    {
      swift_release_n(v28, 2);
    }

    v71 = v157;
    goto LABEL_84;
  }
  v142 = 1;
  v68 = v161;
  if (v42)
  {
    v69 = v153;
    swift_beginAccess(v153, v162, 0, 0);
    if ((*v69 & 1) != 0)
    {
LABEL_61:
      swift_slowDealloc(v146, -1, -1);
      v28 = v158;
      v25 = v159;
      goto LABEL_62;
    }
  }
  v70 = nwi_state_copy();
  v71 = v157;
  v72 = v158;
  if (!v70)
    goto LABEL_85;
  v73 = v70;
  v74 = swift_retain_n(v158, 2);
  v75 = Logger.logObject.getter(v74);
  v76 = static os_log_type_t.error.getter(v75);
  if (os_log_type_enabled(v75, v76))
  {
    v77 = swift_slowAlloc(12, -1);
    v141 = v75;
    v75 = v77;
    v148 = swift_slowAlloc(32, -1);
    aBlock[0] = v148;
    LODWORD(v75->isa) = 136315138;
    v78 = v143;
    swift_bridgeObjectRetain(v143);
    v164 = sub_100013CC8((uint64_t)v147, v78, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v164, &v165);
    swift_release_n(v72, 2);
    swift_bridgeObjectRelease(v78);
    v79 = v141;
    _os_log_impl((void *)&_mh_execute_header, v141, v76, "Failed to start the netrb service for %s", (uint8_t *)v75, 0xCu);
    v80 = v148;
    swift_arrayDestroy(v148, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v80, -1, -1);
    swift_slowDealloc(v75, -1, -1);

  }
  else
  {
    swift_release_n(v72, 2);

    v78 = v143;
  }
  interface_names = nwi_state_get_interface_names(v73, 0, 0);
  v148 = swift_slowAlloc(8 * interface_names, -1);
  v88 = nwi_state_get_interface_names(v73, v148, interface_names);
  if (!v88)
    goto LABEL_83;
  v89 = v88;
  v91 = swift_beginAccess(v153, aBlock, 0, 0);
  v92 = 0;
  v93 = 0;
  v94 = 8 * v89;
  v95 = 8 * v89 - 8;
  v91.n128_u64[0] = 136315138;
  v138 = v91;
  v137 = (char *)&type metadata for Any + 8;
  v140 = v73;
  while (1)
  {
    if ((v93 & 1) != 0)
    {
      if (v95 == v92)
        goto LABEL_60;
LABEL_40:
      v93 = 1;
      goto LABEL_37;
    }
    v89 = *(_QWORD *)(v148 + v92);
    if (v89)
    {
      static String.Encoding.utf8.getter(v90);
      v90 = String.init(cString:encoding:)(v89, v2);
      if (v96)
        break;
    }
    if (v95 == v92)
      goto LABEL_83;
LABEL_36:
    v93 = 0;
LABEL_37:
    v92 += 8;
    if (v94 == v92)
    {
      __break(1u);
      goto LABEL_81;
    }
  }
  v75 = v96;
  v97 = v90 == v147 && v96 == v78;
  if (v97 || (v141 = v90, (_stringCompareWithSmolCheck(_:_:expecting:)(v90, v96, v147, v78, 0) & 1) != 0))
  {
    swift_bridgeObjectRelease(v75);
    if (v95 == v92)
      goto LABEL_83;
    goto LABEL_36;
  }
  v98 = v146;
  strlcpy(v146, (const char *)v89, 0x10uLL);
  v99 = _NETRBClientStartService(v152, v98, 204, 300, v151);
  if (!(_DWORD)v99)
  {
LABEL_55:
    v103 = swift_bridgeObjectRetain(v75);
    v104 = Logger.logObject.getter(v103);
    v105 = static os_log_type_t.error.getter(v104);
    v89 = v105;
    v139 = v104;
    v106 = os_log_type_enabled(v104, v105);
    v73 = v140;
    if (v106)
    {
      v107 = swift_slowAlloc(12, -1);
      v136 = swift_slowAlloc(32, -1);
      v164 = v136;
      *(_DWORD *)v107 = v138.n128_u32[0];
      swift_bridgeObjectRetain(v75);
      *(_QWORD *)(v107 + 4) = sub_100013CC8((uint64_t)v141, (unint64_t)v75, &v164);
      swift_bridgeObjectRelease_n(v75, 3);
      v75 = v139;
      _os_log_impl((void *)&_mh_execute_header, v139, (os_log_type_t)v89, "Failed to start the netrb service for %s", (uint8_t *)v107, 0xCu);
      v89 = v136;
      swift_arrayDestroy(v136, 1, v137);
      swift_slowDealloc(v89, -1, -1);
      v108 = v107;
      v73 = v140;
      swift_slowDealloc(v108, -1, -1);

      if (v95 == v92)
        goto LABEL_83;
    }
    else
    {
      swift_bridgeObjectRelease_n(v75, 2);

      if (v95 == v92)
        goto LABEL_83;
    }
    goto LABEL_36;
  }
  v100 = v154;
  static DispatchTime.now()(v99);
  v101 = v155;
  + infix(_:_:)(v100, v160);
  v102 = v156;
  v45(v100, v156);
  v89 = OS_dispatch_semaphore.wait(timeout:)(v101) & 1;
  v45(v101, v102);
  if ((static DispatchTimeoutResult.== infix(_:_:)(v89, 1) & 1) == 0)
  {
    v78 = v143;
    if ((*v153 & 1) != 0)
    {
      swift_bridgeObjectRelease(v167);
      v166 = v141;
      v167 = v75;
      v73 = v140;
      if (v95 == v92)
      {
LABEL_60:
        swift_slowDealloc(v148, -1, -1);
        nwi_state_release(v73);
        goto LABEL_61;
      }
      goto LABEL_40;
    }
    goto LABEL_55;
  }
  v132 = swift_bridgeObjectRetain(v75);
  v89 = Logger.logObject.getter(v132);
  v133 = static os_log_type_t.error.getter(v89);
  if (os_log_type_enabled((os_log_t)v89, v133))
  {
    v134 = (uint8_t *)swift_slowAlloc(12, -1);
    v135 = swift_slowAlloc(32, -1);
    v164 = v135;
    *(_DWORD *)v134 = v138.n128_u32[0];
    swift_bridgeObjectRetain(v75);
    v163 = sub_100013CC8((uint64_t)v141, (unint64_t)v75, &v164);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v163, &v164);
    swift_bridgeObjectRelease_n(v75, 3);
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)v89, v133, "Timed out while waiting to start the netrb service for %s", v134, 0xCu);
    swift_arrayDestroy(v135, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v135, -1, -1);
    swift_slowDealloc(v134, -1, -1);
    goto LABEL_82;
  }
LABEL_81:
  swift_bridgeObjectRelease_n(v75, 2);
LABEL_82:

  v73 = v140;
LABEL_83:
  swift_slowDealloc(v148, -1, -1);
  nwi_state_release(v73);
  v71 = v157;
LABEL_84:
  v68 = v161;
  v47 = v150;
LABEL_85:
  swift_bridgeObjectRelease(v167);
  _NETRBClientDestroy(v152);
  sub_10004BD70(0xD00000000000004ALL, 0x8000000100363780);
  swift_slowDealloc(v146, -1, -1);

  swift_unknownObjectRelease(v151);
  (*(void (**)(_QWORD *, uint64_t))(v68 + 8))(v160, v159);
  v131 = v71;
LABEL_86:
  swift_release(v131);
}

uint64_t sub_10004B95C(int a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t Strong;
  uint64_t v9;
  void *v10;
  xpc_type_t type;
  uint64_t result;
  BOOL *v13;
  xpc_object_t v14;
  void *v15;
  xpc_type_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  void *v20;
  uint64_t value;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint8_t *v26;
  uint64_t v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE v37[24];
  _BYTE v38[24];

  v7 = a3 + 16;
  swift_beginAccess(a3 + 16, v38, 0, 0);
  Strong = swift_weakLoadStrong(v7);
  if (!Strong)
    return 0;
  v9 = Strong;
  if (!a2)
    goto LABEL_10;
  v10 = (void *)swift_unknownObjectRetain(a2);
  type = xpc_get_type(v10);
  result = XPC_TYPE_DICTIONARY.getter();
  if (type != (xpc_type_t)result || a1 != 1001)
  {
    swift_unknownObjectRelease(a2);
LABEL_10:
    swift_release(v9);
    return 0;
  }
  if (netrbClientNotificationKey)
  {
    v13 = (BOOL *)(a4 + 16);
    v14 = xpc_dictionary_get_value(a2, netrbClientNotificationKey);
    if (!v14)
    {
      v17 = Logger.logObject.getter(0);
      v18 = static os_log_type_t.error.getter(v17);
      if (os_log_type_enabled(v17, v18))
      {
        v19 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v19 = 0;
        _os_log_impl((void *)&_mh_execute_header, v17, v18, "Failed to get value from NETRB client", v19, 2u);
        swift_slowDealloc(v19, -1, -1);
      }

      swift_beginAccess(v13, v37, 1, 0);
      *v13 = 0;
      OS_dispatch_semaphore.signal()();
      swift_release(v9);
      v20 = a2;
      goto LABEL_23;
    }
    v15 = v14;
    v16 = xpc_get_type(v14);
    if (v16 == (xpc_type_t)XPC_TYPE_UINT64.getter())
    {
      value = xpc_uint64_get_value(v15);
      swift_beginAccess(v13, v37, 1, 0);
      *v13 = value == 5002;
      if (value == 5002)
      {
        v23 = Logger.logObject.getter(v22);
        v24 = static os_log_type_t.default.getter();
        if (!os_log_type_enabled(v23, v24))
        {
LABEL_22:

          OS_dispatch_semaphore.signal()();
          swift_release(v9);
          swift_unknownObjectRelease(a2);
          v20 = v15;
LABEL_23:
          swift_unknownObjectRelease(v20);
          return 0;
        }
        v25 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v25 = 0;
        _os_log_impl((void *)&_mh_execute_header, v23, v24, "Successfully configured infra relay bridge service", v25, 2u);
        v26 = v25;
LABEL_20:
        swift_slowDealloc(v26, -1, -1);
        goto LABEL_22;
      }
    }
    else
    {
      swift_beginAccess(v13, v37, 1, 0);
      *v13 = 0;
    }
    v27 = swift_unknownObjectRetain_n(v15, 2);
    v23 = Logger.logObject.getter(v27);
    v28 = static os_log_type_t.error.getter(v23);
    if (!os_log_type_enabled(v23, v28))
    {
      swift_unknownObjectRelease_n(v15, 2);
      goto LABEL_22;
    }
    v29 = (uint8_t *)swift_slowAlloc(12, -1);
    v30 = swift_slowAlloc(32, -1);
    v36 = v30;
    *(_DWORD *)v29 = 136315138;
    v31 = xpc_copy_description(v15);
    v32 = String.init(cString:)(v31);
    v34 = v33;
    v35 = sub_100013CC8(v32, v33, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, &v36);
    swift_unknownObjectRelease_n(v15, 2);
    swift_bridgeObjectRelease(v34);
    _os_log_impl((void *)&_mh_execute_header, v23, v28, "Failed to start infra relay bridge service with error %s", v29, 0xCu);
    swift_arrayDestroy(v30, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v30, -1, -1);
    v26 = v29;
    goto LABEL_20;
  }
  __break(1u);
  return result;
}

uint64_t sub_10004BD0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t);
  uint64_t v7;

  v6 = *(uint64_t (**)(uint64_t, uint64_t))(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  swift_retain(v5);
  swift_unknownObjectRetain(a3);
  v7 = v6(a2, a3);
  swift_release(v5);
  swift_unknownObjectRelease(a3);
  return v7;
}

uint64_t sub_10004BD70(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v16;
  uint64_t v17;

  v3 = v2;
  v6 = swift_bridgeObjectRetain_n(a2, 2);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.error.getter(v7);
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc(12, -1);
    v10 = swift_slowAlloc(32, -1);
    v17 = v10;
    *(_DWORD *)v9 = 136315138;
    swift_bridgeObjectRetain(a2);
    v16 = sub_100013CC8(a1, a2, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v16, &v17);
    swift_bridgeObjectRelease_n(a2, 3);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Tearing down infra relay bridge because: %s", v9, 0xCu);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(a2, 2);
  }

  sub_10004A4B4();
  v11 = v3
      + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A30InternetSharingProviderSession_state;
  v12 = *(_QWORD *)(v3
                  + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A30InternetSharingProviderSession_state);
  v13 = *(_QWORD *)(v3
                  + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A30InternetSharingProviderSession_state
                  + 8);
  *(_QWORD *)v11 = a1;
  *(_QWORD *)(v11 + 8) = a2;
  v14 = *(_BYTE *)(v11 + 16);
  *(_BYTE *)(v11 + 16) = 1;
  swift_bridgeObjectRetain(a2);
  sub_100061DD0(v12, v13, v14);
  sub_100061DF8(v12, v13, v14);
  sub_100049ABC(v12, v13, v14);
  return sub_100061DF8(v12, v13, v14);
}

uint64_t sub_10004BF50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[2];
  uint64_t v16;
  _QWORD *v17;

  v1 = v0;
  v16 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v2 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin();
  v4 = (char *)v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin();
  v7 = (char *)v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for DispatchQoS(0);
  __chkstk_darwin();
  v9 = (char *)v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15[1] = sub_1000644C8(0, (unint64_t *)&qword_1004042B0, OS_dispatch_queue_ptr);
  if (qword_1004040F8 != -1)
    swift_once(&qword_1004040F8, sub_10017DEE0);
  v10 = static OS_dispatch_queue.nan;
  static DispatchQoS.unspecified.getter((id)static OS_dispatch_queue.nan);
  v17 = _swiftEmptyArrayStorage;
  v11 = sub_100011DE4((unint64_t *)&unk_10040FFC0, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v12 = sub_100012C44((uint64_t *)&unk_1004042C0);
  v13 = sub_100011770(qword_10040FFD0, (uint64_t *)&unk_1004042C0, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v17, v12, v13, v5, v11);
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v16);
  *(_QWORD *)(v1 + 16) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000023, 0x80000001003636B0, v9, v7, v4, v10);
  *(_QWORD *)(v1 + 24) = 0;
  *(_DWORD *)(v1 + 32) = 2;
  *(_QWORD *)(v1 + 40) = NANBitmap.Channel.operatingClass.getter;
  *(_QWORD *)(v1 + 48) = 0;
  Logger.init(subsystem:category:)(0xD000000000000012, 0x8000000100360DF0, 0x74656E7265746E69, 0xEF676E6972616853);
  return v1;
}

uint64_t sub_10004C1BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  if (*(_QWORD *)(v0 + 24))
    sub_10004D1F4();

  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 48));
  v1 = v0
     + OBJC_IVAR____TtCCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A31InternetSharingRequesterSession26NetworkConnectivityMonitor_logger;
  v2 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

void sub_10004C230(NSObject *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  os_log_type_t v8;
  uint8_t *v9;
  os_log_type_t v10;
  uint8_t *v11;
  NSObject *v12;
  NSObject *v13;
  uint64_t evaluator_for_endpoint;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  NSObject *v25;
  nw_path_status_t status;
  uint64_t v27;
  void (*v28)(BOOL);
  NSObject *oslog;
  nw_interface_t interface[3];

  v3 = v2;
  v6 = *(_QWORD *)(v2 + 24);
  v7 = Logger.logObject.getter(a1);
  oslog = v7;
  if (v6)
  {
    v8 = static os_log_type_t.error.getter(v7);
    if (os_log_type_enabled(oslog, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v8, "Already monitoring network path status", v9, 2u);
      swift_slowDealloc(v9, -1, -1);
    }

    return;
  }
  v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v10, "Start monitoring network path status", v11, 2u);
    swift_slowDealloc(v11, -1, -1);
  }

  v12 = nw_parameters_create();
  if ((a2 & 0x1000000000000000) != 0 || !(a2 & 0x2000000000000000 | (unint64_t)a1 & 0x1000000000000000))
  {
    sub_100012C44(&qword_100405B18);
    _StringGuts._slowWithCString<A>(_:)(interface, sub_10004C554, 0);
    v13 = interface[0];
  }
  else if ((a2 & 0x2000000000000000) != 0)
  {
    interface[0] = a1;
    interface[1] = (nw_interface_t)(a2 & 0xFFFFFFFFFFFFFFLL);
    v13 = nw_interface_create_with_name(interface);
  }
  else
  {
    if (((unint64_t)a1 & 0x1000000000000000) == 0)
      _StringObject.sharedUTF8.getter(a1, a2);
    sub_10004C554((uint64_t *)interface);
    v13 = interface[0];
  }
  nw_parameters_require_interface(v12, v13);
  swift_unknownObjectRelease(v13);
  evaluator_for_endpoint = nw_path_create_evaluator_for_endpoint(0, v12);
  if (!evaluator_for_endpoint)
  {
    __break(1u);
    goto LABEL_24;
  }
  v15 = evaluator_for_endpoint;
  v16 = *(void **)(v3 + 16);
  v17 = swift_allocObject(&unk_1003DDB80, 24, 7);
  swift_weakInit(v17 + 16, v3);
  v18 = (_QWORD *)swift_allocObject(&unk_1003DDBA8, 40, 7);
  v18[2] = v17;
  v18[3] = a1;
  v18[4] = a2;
  v19 = type metadata accessor for AppleDevice.NetworkPathMonitor();
  v20 = swift_allocObject(v19, 24, 7);
  v21 = v16;
  swift_bridgeObjectRetain(a2);
  AppleDevice.NetworkPathMonitor.init(evaluator:queue:updatedHandler:)(v15, v21, (uint64_t)sub_1000623E8, (uint64_t)v18);
  v22 = *(_QWORD *)(v3 + 24);
  *(_QWORD *)(v3 + 24) = v20;
  swift_release(v22);
  v23 = *(_QWORD *)(v3 + 24);
  if (!v23)
  {
    status = nw_path_status_invalid;
    goto LABEL_19;
  }
  v24 = nw_path_evaluator_copy_path(*(_QWORD *)(v23 + 16));
  if (!v24)
  {
LABEL_24:
    __break(1u);
    return;
  }
  v25 = v24;
  status = nw_path_get_status(v24);
  swift_unknownObjectRelease(v25);
LABEL_19:
  if (status != *(_DWORD *)(v3 + 32))
  {
    *(_DWORD *)(v3 + 32) = status;
    v28 = *(void (**)(BOOL))(v3 + 40);
    v27 = *(_QWORD *)(v3 + 48);
    swift_retain();
    v28(status == nw_path_status_satisfied);
    swift_release(v27);
  }
  swift_unknownObjectRelease(v12);
}

uint64_t sub_10004C554@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = nw_interface_create_with_name();
  *a1 = result;
  return result;
}

void sub_10004C580(NSObject *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v7;
  uint64_t Strong;
  uint64_t v9;
  ifaddrs *v10;
  ifaddrs *v11;
  char *ifa_name;
  sockaddr *ifa_addr;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  char v18;
  _QWORD *v19;
  ifaddrs *v20;
  ifaddrs *v21;
  _QWORD *v22;
  char *v23;
  sockaddr *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  char *v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  int v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  NSObject *v57;
  os_log_type_t v58;
  uint8_t *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  NSObject *v64;
  os_log_type_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  nw_path_status_t v75;
  uint64_t v76;
  void (*v77)(_BOOL8);
  _BOOL8 v78;
  void *v79;
  NSString v80;
  void *v81;
  NSString v82;
  void *v83;
  NSString v84;
  void *v85;
  ifaddrs *v86;
  uint64_t v87;
  int v88;
  int v89;
  uint64_t v90;
  _BYTE v91[4];
  nw_path_status_t status;
  char v93[24];
  uint64_t v94;
  ifaddrs *v95[3];
  char v96[24];

  v7 = a2 + 16;
  swift_beginAccess(a2 + 16, v96, 0, 0);
  Strong = swift_weakLoadStrong(v7);
  if (!Strong)
    return;
  v9 = Strong;
  status = nw_path_get_status(a1);
  v95[0] = 0;
  swift_bridgeObjectRetain(a4);
  if (getifaddrs(v95))
  {
    v88 = 1;
    v89 = 0;
    goto LABEL_20;
  }
  v10 = v95[0];
  if (v95[0])
  {
    v11 = v95[0];
    do
    {
      ifa_name = v11->ifa_name;
      if (!ifa_name)
        goto LABEL_103;
      ifa_addr = v11->ifa_addr;
      v11 = v11->ifa_next;
      v14 = String.init(cString:)(ifa_name);
      if (v14 == a3 && v15 == a4)
      {
        swift_bridgeObjectRelease(a4);
      }
      else
      {
        v17 = v15;
        v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v14, v15, a3, a4, 0);
        swift_bridgeObjectRelease(v17);
        if ((v18 & 1) == 0)
          continue;
      }
      if (!ifa_addr)
        goto LABEL_104;
      if (ifa_addr->sa_family == 2)
      {
        v88 = 0;
        v89 = *(_DWORD *)&ifa_addr->sa_data[2];
        goto LABEL_19;
      }
    }
    while (v11);
  }
  v88 = 1;
  v89 = 0;
LABEL_19:
  freeifaddrs(v10);
LABEL_20:
  swift_bridgeObjectRelease(a4);
  v95[0] = 0;
  swift_bridgeObjectRetain(a4);
  if (getifaddrs(v95))
  {
    v19 = _swiftEmptyArrayStorage;
    goto LABEL_42;
  }
  v20 = v95[0];
  if (v95[0])
  {
    v19 = _swiftEmptyArrayStorage;
    v21 = v95[0];
    while (1)
    {
      v23 = v21->ifa_name;
      if (!v23)
      {
        __break(1u);
LABEL_102:
        __break(1u);
LABEL_103:
        __break(1u);
LABEL_104:
        __break(1u);
      }
      v24 = v21->ifa_addr;
      v21 = v21->ifa_next;
      v25 = String.init(cString:)(v23);
      if (v25 == a3 && v26 == a4)
      {
        swift_bridgeObjectRelease(a4);
      }
      else
      {
        v28 = v26;
        v29 = _stringCompareWithSmolCheck(_:_:expecting:)(v25, v26, a3, a4, 0);
        swift_bridgeObjectRelease(v28);
        if ((v29 & 1) == 0)
          goto LABEL_25;
      }
      if (!v24)
        goto LABEL_102;
      if (v24->sa_family == 30)
      {
        v32 = &v24->sa_data[6];
        v31 = *(_QWORD *)&v24->sa_data[6];
        v30 = *((_QWORD *)v32 + 1);
        if ((swift_isUniquelyReferenced_nonNull_native(v19) & 1) == 0)
          v19 = sub_1000B21B4(0, v19[2] + 1, 1, v19);
        v34 = v19[2];
        v33 = v19[3];
        if (v34 >= v33 >> 1)
          v19 = sub_1000B21B4((_QWORD *)(v33 > 1), v34 + 1, 1, v19);
        v19[2] = v34 + 1;
        v22 = &v19[4 * v34];
        v22[4] = v31;
        v22[5] = v30;
        v22[6] = 0;
        v22[7] = 0;
      }
LABEL_25:
      if (!v21)
        goto LABEL_41;
    }
  }
  v19 = _swiftEmptyArrayStorage;
LABEL_41:
  freeifaddrs(v20);
LABEL_42:
  swift_bridgeObjectRelease(a4);
  v35 = swift_bridgeObjectRetain_n(v19, 2);
  v36 = Logger.logObject.getter(v35);
  v37 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v36, v37))
  {
    v38 = swift_slowAlloc(32, -1);
    v86 = (ifaddrs *)swift_slowAlloc(96, -1);
    v95[0] = v86;
    *(_DWORD *)v38 = 136315650;
    swift_beginAccess(&status, v93, 0, 0);
    v87 = v9;
    v39 = 0xE700000000000000;
    v40 = 0x64696C61766E69;
    switch(status)
    {
      case nw_path_status_invalid:
        break;
      case nw_path_status_satisfied:
        v40 = 0x6569667369746173;
        v39 = 0xE900000000000064;
        break;
      case nw_path_status_unsatisfied:
        v40 = 0x6673697461736E75;
        v41 = 6579561;
        goto LABEL_49;
      case nw_path_status_satisfiable:
        v40 = 0x6169667369746173;
        v41 = 6646882;
LABEL_49:
        v39 = v41 & 0xFFFFFFFFFFFFLL | 0xEB00000000000000;
        break;
      default:
        v40 = 0x6E776F6E6B6E75;
        break;
    }
    v94 = sub_100013CC8(v40, v39, (uint64_t *)v95);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v94, v95);
    swift_bridgeObjectRelease(v39);
    *(_WORD *)(v38 + 12) = 2080;
    if (v88)
      v42 = 0;
    else
      v42 = v89;
    v43 = (char *)swift_slowAlloc(16, -1);
    LODWORD(v94) = v42;
    inet_ntop(2, &v94, v43, 0x10u);
    v44 = String.init(cString:)(v43);
    v46 = v45;
    swift_slowDealloc(v43, -1, -1);
    v94 = sub_100013CC8(v44, v46, (uint64_t *)v95);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v94, v95);
    swift_bridgeObjectRelease(v46);
    *(_WORD *)(v38 + 22) = 2080;
    v47 = swift_bridgeObjectRetain(v19);
    v48 = Array.description.getter(v47, &type metadata for IPv6Address);
    v50 = v49;
    swift_bridgeObjectRelease(v19);
    v94 = sub_100013CC8(v48, v50, (uint64_t *)v95);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v94, v95);
    swift_bridgeObjectRelease_n(v19, 2);
    swift_bridgeObjectRelease(v50);
    _os_log_impl((void *)&_mh_execute_header, v36, v37, "Path became %s with ipv4: %s, ipv6: %s", (uint8_t *)v38, 0x20u);
    swift_arrayDestroy(v86, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v86, -1, -1);
    swift_slowDealloc(v38, -1, -1);

    v9 = v87;
  }
  else
  {
    swift_bridgeObjectRelease_n(v19, 2);

  }
  swift_beginAccess(&status, v95, 1, 0);
  v51 = status;
  if (status == nw_path_status_satisfied)
  {
    v52 = v88;
    if ((unsigned __int16)v89 == 65193)
      v52 = 1;
    if ((v52 & 1) != 0)
    {
      v53 = v19[2];
      if (!v53)
      {
LABEL_63:
        swift_bridgeObjectRelease(v19);
        v51 = 2;
        status = nw_path_status_unsatisfied;
        goto LABEL_66;
      }
      v54 = 4;
      while (1)
      {
        v55 = v19[v54];
        if (v55 != 254 || (v55 & 0xC000) != 0x8000)
          break;
        v54 += 4;
        if (!--v53)
          goto LABEL_63;
      }
    }
    swift_bridgeObjectRelease(v19);
    v51 = 1;
  }
  else
  {
    swift_bridgeObjectRelease(v19);
  }
LABEL_66:
  if (*(_DWORD *)(v9 + 32) == v51)
  {
    v56 = swift_retain_n(v9, 2);
    v57 = Logger.logObject.getter(v56);
    v58 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v57, v58))
    {
      v59 = (uint8_t *)swift_slowAlloc(12, -1);
      v60 = swift_slowAlloc(32, -1);
      v94 = v60;
      *(_DWORD *)v59 = 136315138;
      v61 = 0xE700000000000000;
      v62 = 0x64696C61766E69;
      switch(*(_DWORD *)(v9 + 32))
      {
        case 0:
          break;
        case 1:
          v62 = 0x6569667369746173;
          v61 = 0xE900000000000064;
          break;
        case 2:
          v62 = 0x6673697461736E75;
          v70 = 6579561;
          goto LABEL_78;
        case 3:
          v62 = 0x6169667369746173;
          v70 = 6646882;
LABEL_78:
          v61 = v70 & 0xFFFFFFFFFFFFLL | 0xEB00000000000000;
          break;
        default:
          v62 = 0x6E776F6E6B6E75;
          break;
      }
      v90 = sub_100013CC8(v62, v61, &v94);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v90, v91);
      swift_release_n(v9, 2);
      swift_bridgeObjectRelease(v61);
      _os_log_impl((void *)&_mh_execute_header, v57, v58, "Ignoring path status update when %s", v59, 0xCu);
      swift_arrayDestroy(v60, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v60, -1, -1);
      swift_slowDealloc(v59, -1, -1);
      swift_release(v9);
    }
    else
    {
      swift_release_n(v9, 3);
    }

  }
  else
  {
    swift_bridgeObjectRetain_n(a4, 2);
    v63 = swift_retain_n(v9, 2);
    v64 = Logger.logObject.getter(v63);
    v65 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v64, v65))
    {
      v66 = swift_slowAlloc(32, -1);
      v67 = swift_slowAlloc(96, -1);
      v94 = v67;
      *(_DWORD *)v66 = 136315650;
      swift_bridgeObjectRetain(a4);
      v90 = sub_100013CC8(a3, a4, &v94);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v90, v91);
      swift_bridgeObjectRelease_n(a4, 3);
      *(_WORD *)(v66 + 12) = 2080;
      v68 = 0xE700000000000000;
      v69 = 0x64696C61766E69;
      switch(*(_DWORD *)(v9 + 32))
      {
        case 0:
          break;
        case 1:
          v69 = 0x6569667369746173;
          v68 = 0xE900000000000064;
          break;
        case 2:
          v69 = 0x6673697461736E75;
          v71 = 6579561;
          goto LABEL_84;
        case 3:
          v69 = 0x6169667369746173;
          v71 = 6646882;
LABEL_84:
          v68 = v71 & 0xFFFFFFFFFFFFLL | 0xEB00000000000000;
          break;
        default:
          v69 = 0x6E776F6E6B6E75;
          break;
      }
      v90 = sub_100013CC8(v69, v68, &v94);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v90, v91);
      swift_release_n(v9, 2);
      swift_bridgeObjectRelease(v68);
      *(_WORD *)(v66 + 22) = 2080;
      v72 = 0xE700000000000000;
      v73 = 0x64696C61766E69;
      switch(v51)
      {
        case 0:
          break;
        case 1:
          v73 = 0x6569667369746173;
          v72 = 0xE900000000000064;
          break;
        case 2:
          v73 = 0x6673697461736E75;
          v74 = 6579561;
          goto LABEL_90;
        case 3:
          v73 = 0x6169667369746173;
          v74 = 6646882;
LABEL_90:
          v72 = v74 & 0xFFFFFFFFFFFFLL | 0xEB00000000000000;
          break;
        default:
          v73 = 0x6E776F6E6B6E75;
          break;
      }
      v90 = sub_100013CC8(v73, v72, &v94);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v90, v91);
      swift_bridgeObjectRelease(v72);
      _os_log_impl((void *)&_mh_execute_header, v64, v65, "Network path status on %s changed from %s to %s", (uint8_t *)v66, 0x20u);
      swift_arrayDestroy(v67, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v67, -1, -1);
      swift_slowDealloc(v66, -1, -1);
    }
    else
    {
      swift_release_n(v9, 2);
      swift_bridgeObjectRelease_n(a4, 2);
    }

    v75 = status;
    *(_DWORD *)(v9 + 32) = status;
    v77 = *(void (**)(_BOOL8))(v9 + 40);
    v76 = *(_QWORD *)(v9 + 48);
    v78 = v75 == nw_path_status_satisfied;
    swift_retain();
    v77(v78);
    swift_release(v76);
    if (*(_DWORD *)(v9 + 32) == 1)
    {
      if (qword_100403E98 != -1)
        swift_once(&qword_100403E98, sub_10004D444);
      v79 = (void *)qword_100405030;
      v80 = String._bridgeToObjectiveC()();
      objc_msgSend(v79, "setLinkEvent:isInvoluntary:linkChangeReason:linkChangeSubreason:withNetworkDetails:forInterface:", 1, 1, 0, 0, 0, v80);

      v81 = (void *)qword_100405030;
      v82 = String._bridgeToObjectiveC()();
      objc_msgSend(v81, "notifyInterfaceRankingState:forInterface:", 1, v82);
    }
    else
    {
      if (qword_100403E98 != -1)
        swift_once(&qword_100403E98, sub_10004D444);
      v83 = (void *)qword_100405030;
      v84 = String._bridgeToObjectiveC()();
      objc_msgSend(v83, "notifyInterfaceRankingState:forInterface:", 0, v84);

      v85 = (void *)qword_100405030;
      v82 = String._bridgeToObjectiveC()();
      objc_msgSend(v85, "setLinkEvent:isInvoluntary:linkChangeReason:linkChangeSubreason:withNetworkDetails:forInterface:", 0, 1, 0, 0, 0, v82);
    }

    swift_release(v9);
  }
}

void sub_10004D1F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  os_log_type_t v6;
  uint8_t *v7;
  NSObject *oslog;

  v1 = v0;
  v2 = *(_QWORD *)(v0 + 24);
  oslog = Logger.logObject.getter();
  if (v2)
  {
    v3 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(oslog, v3))
    {
      v4 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v3, "Stop monitoring network path status", v4, 2u);
      swift_slowDealloc(v4, -1, -1);
    }

    *(_DWORD *)(v1 + 32) = 2;
    v5 = *(_QWORD *)(v1 + 24);
    *(_QWORD *)(v1 + 24) = 0;
    swift_release(v5);
  }
  else
  {
    v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v6, "Already stopped monitoring network path status", v7, 2u);
      swift_slowDealloc(v7, -1, -1);
    }

  }
}

uint64_t sub_10004D32C(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4;
  unint64_t v5;
  Swift::String v6;
  uint64_t v7;

  if (a3)
  {
    if (a3 == 1)
    {
      return 0x6961462050434844;
    }
    else if (a1 | a2)
    {
      return 0x74616E696D726554;
    }
    else
    {
      return 0x72756769666E6F43;
    }
  }
  else
  {
    v4 = 0x6569667369746153;
    if ((a1 & 1) != 0)
    {
      v5 = 0xE900000000000064;
    }
    else
    {
      v4 = 0x6673697461736E55;
      v5 = 0xEB00000000646569;
    }
    v7 = v4;
    swift_bridgeObjectRetain(v5);
    v6._object = (void *)0xEA00000000007265;
    v6._countAndFlagsBits = 0x7473657571655220;
    String.append(_:)(v6);
    swift_bridgeObjectRelease(v5);
    return v7;
  }
}

uint64_t sub_10004D438()
{
  uint64_t v0;

  return sub_10004D32C(*(_QWORD *)v0, *(_QWORD *)(v0 + 8), *(_BYTE *)(v0 + 16));
}

id sub_10004D444()
{
  id result;

  result = objc_msgSend((id)objc_opt_self(WiFiUsageMonitor), "sharedInstance");
  qword_100405030 = (uint64_t)result;
  return result;
}

uint64_t sub_10004D47C(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  Swift::String v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  Swift::String v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(uint64_t, uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v4 = v3;
  sub_100061DD0(a1, a2, a3);
  swift_retain();
  sub_100061DD0(a1, a2, a3);
  v8 = swift_retain();
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.default.getter();
  v11 = (_QWORD *)&unk_100405000;
  if (os_log_type_enabled(v9, v10))
  {
    v12 = swift_slowAlloc(22, -1);
    v13 = swift_slowAlloc(64, -1);
    v47 = v13;
    *(_DWORD *)v12 = 136315394;
    if (a3)
    {
      if (a3 == 1)
      {
        v14 = 0xEB0000000064656CLL;
        v15 = 0x6961462050434844;
      }
      else
      {
        if (a1 | a2)
          v15 = 0x74616E696D726554;
        else
          v15 = 0x72756769666E6F43;
        if (a1 | a2)
          v14 = 0xEA00000000006465;
        else
          v14 = 0xEB00000000676E69;
      }
    }
    else
    {
      v16 = 0x6569667369746153;
      if ((a1 & 1) != 0)
      {
        v17 = 0xE900000000000064;
      }
      else
      {
        v16 = 0x6673697461736E55;
        v17 = 0xEB00000000646569;
      }
      v45 = v16;
      v46 = v17;
      swift_bridgeObjectRetain(v17);
      v18._object = (void *)0xEA00000000007265;
      v18._countAndFlagsBits = 0x7473657571655220;
      String.append(_:)(v18);
      swift_bridgeObjectRelease(v17);
      v15 = v45;
      v14 = v17;
    }
    v45 = sub_100013CC8(v15, v14, &v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, &v46);
    swift_bridgeObjectRelease(v14);
    sub_100061DF8(a1, a2, a3);
    sub_100061DF8(a1, a2, a3);
    *(_WORD *)(v12 + 12) = 2080;
    if (*(_BYTE *)(v4
                  + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A31InternetSharingRequesterSession_state
                  + 16))
    {
      if (*(_BYTE *)(v4
                    + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A31InternetSharingRequesterSession_state
                    + 16) == 1)
      {
        v19 = 0xEB0000000064656CLL;
        v20 = 0x6961462050434844;
      }
      else
      {
        if (*(_OWORD *)(v4
                       + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A31InternetSharingRequesterSession_state) == 0)
          v20 = 0x72756769666E6F43;
        else
          v20 = 0x74616E696D726554;
        if (*(_OWORD *)(v4
                       + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A31InternetSharingRequesterSession_state) == 0)
          v19 = 0xEB00000000676E69;
        else
          v19 = 0xEA00000000006465;
      }
    }
    else
    {
      v21 = 0x6569667369746153;
      if ((*(_QWORD *)(v4
                      + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A31InternetSharingRequesterSession_state) & 1) != 0)
      {
        v22 = 0xE900000000000064;
      }
      else
      {
        v21 = 0x6673697461736E55;
        v22 = 0xEB00000000646569;
      }
      v45 = v21;
      v46 = v22;
      swift_bridgeObjectRetain(v22);
      v23._object = (void *)0xEA00000000007265;
      v23._countAndFlagsBits = 0x7473657571655220;
      String.append(_:)(v23);
      swift_bridgeObjectRelease(v22);
      v20 = v45;
      v19 = v46;
    }
    v45 = sub_100013CC8(v20, v19, &v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, &v46);
    swift_release_n(v4, 2);
    swift_bridgeObjectRelease(v19);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Requester state changed: %s -> %s", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy(v13, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1, -1);
    swift_slowDealloc(v12, -1, -1);

    v11 = &unk_100405000;
  }
  else
  {

    sub_100061DF8(a1, a2, a3);
    sub_100061DF8(a1, a2, a3);
    swift_release_n(v3, 2);
  }
  v24 = v4 + v11[42];
  if (*(_BYTE *)(v24 + 16) == 1)
  {
    v26 = *(_QWORD *)v24;
    v25 = *(_QWORD *)(v24 + 8);
    swift_retain();
    sub_100061DD0(v26, v25, 1);
    swift_retain();
    v27 = sub_100061DD0(v26, v25, 1);
    v28 = Logger.logObject.getter(v27);
    v29 = static os_log_type_t.error.getter(v28);
    v30 = &unk_100405000;
    if (os_log_type_enabled(v28, v29))
    {
      v31 = swift_slowAlloc(22, -1);
      v44 = swift_slowAlloc(64, -1);
      v45 = v44;
      *(_DWORD *)v31 = 136315394;
      v32 = *(_QWORD *)(v4
                      + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A31InternetSharingRequesterSession_interface);
      v33 = *(_QWORD *)(v4
                      + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A31InternetSharingRequesterSession_interface
                      + 8);
      swift_bridgeObjectRetain(v33);
      v47 = sub_100013CC8(v32, v33, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48);
      swift_release_n(v4, 2);
      swift_bridgeObjectRelease(v33);
      *(_WORD *)(v31 + 12) = 2080;
      swift_bridgeObjectRetain(v25);
      v47 = sub_100013CC8(v26, v25, &v45);
      v30 = (_QWORD *)&unk_100405000;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48);
      sub_100061DF8(v26, v25, 1);
      sub_100061DF8(v26, v25, 1);
      swift_bridgeObjectRelease(v25);
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "Requester DHCP failed on %s because %s", (uint8_t *)v31, 0x16u);
      swift_arrayDestroy(v44, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v44, -1, -1);
      swift_slowDealloc(v31, -1, -1);

    }
    else
    {
      swift_release_n(v4, 2);

      sub_100061DF8(v26, v25, 1);
      sub_100061DF8(v26, v25, 1);
    }
    v34 = (unint64_t *)(v4 + v30[43]);
    v35 = *v34;
    v36 = v34[1];
    swift_bridgeObjectRetain(v36);
    sub_10005FF14(v35, v36, 0);
    v38 = v37;
    swift_bridgeObjectRelease(v36);
    if (v38)
      swift_bridgeObjectRelease(v38);
  }
  v39 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4
                                                         + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A31InternetSharingRequesterSession_stateUpdatedHandler);
  v40 = *(_QWORD *)v24;
  v41 = *(_QWORD *)(v24 + 8);
  v42 = *(unsigned __int8 *)(v24 + 16);
  sub_100061DD0(*(_QWORD *)v24, v41, *(_BYTE *)(v24 + 16));
  v39(v40, v41, v42);
  return sub_100061DF8(v40, v41, v42);
}

uint64_t sub_10004DB08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;

  v1 = v0;
  v2 = v0
     + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A31InternetSharingRequesterSession_state;
  if (!*(_BYTE *)(v0
                 + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A31InternetSharingRequesterSession_state
                 + 16))
  {
    sub_10004D1F4();
    v3 = *(_QWORD *)(v0
                   + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A31InternetSharingRequesterSession_interface);
    v4 = *(_QWORD *)(v1
                   + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A31InternetSharingRequesterSession_interface
                   + 8);
    swift_bridgeObjectRetain(v4);
    sub_10005FF14(v3, v4, 0);
    v6 = v5;
    swift_bridgeObjectRelease(v4);
    if (v6)
      swift_bridgeObjectRelease(v6);
    v7 = *(_QWORD *)v2;
    v8 = *(_QWORD *)(v2 + 8);
    *(_OWORD *)v2 = xmmword_100337850;
    v9 = *(_BYTE *)(v2 + 16);
    *(_BYTE *)(v2 + 16) = 2;
    sub_100061DD0(v7, v8, v9);
    sub_100061DF8(v7, v8, v9);
    sub_10004D47C(v7, v8, v9);
    sub_100061DF8(v7, v8, v9);
  }
  v10 = v1
      + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A31InternetSharingRequesterSession_logger;
  v11 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  swift_bridgeObjectRelease(*(_QWORD *)(v1
                                      + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A31InternetSharingRequesterSession_interface
                                      + 8));
  swift_release(*(_QWORD *)(v1
                          + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A31InternetSharingRequesterSession_stateUpdatedHandler
                          + 8));
  swift_release(*(_QWORD *)(v1
                          + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A31InternetSharingRequesterSession_networkConnectivityMonitor));
  sub_100061DF8(*(_QWORD *)v2, *(_QWORD *)(v2 + 8), *(_BYTE *)(v2 + 16));
  return v1;
}

uint64_t sub_10004DC68()
{
  return sub_100050F48(sub_10004DB08);
}

uint64_t sub_10004DC74(const __SCPreferences *a1, unint64_t a2, unint64_t a3, char a4)
{
  SCNetworkInterfaceRef v4;
  uint64_t v5;
  NSString v9;
  void *v10;
  CFArrayRef v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const __SCNetworkService *v18;
  BOOL v19;
  const __SCNetworkInterface *v20;
  SCNetworkInterfaceRef v21;
  Swift::String v23;
  void *v24;
  id v25;
  CFArrayRef v26;
  CFArrayRef v27;
  uint64_t v28;
  uint64_t v29;
  const __SCNetworkSet *v30;
  CFArrayRef v31;
  CFArrayRef v32;
  unint64_t v33;
  id v34;
  void *v35;
  char v36;
  const __SCNetworkInterface *v37;
  char v38;
  uint64_t v39;
  char v40;
  char v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  Swift::String v47;
  Swift::String v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  const __SCNetworkService *service;
  const __SCPreferences *prefs;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;

  LOBYTE(v5) = a4;
  v9 = String._bridgeToObjectiveC()();
  v10 = (void *)_SCNetworkInterfaceCreateWithBSDName(kCFAllocatorDefault, v9, 0xFFFFFFFFLL);

  if (!v10)
  {
    _StringGuts.grow(_:)(42);
    swift_bridgeObjectRelease(0xE000000000000000);
    v60 = 0xD000000000000028;
    v61 = 0x8000000100363570;
    v23._countAndFlagsBits = a2;
    v23._object = (void *)a3;
    String.append(_:)(v23);
    return 0;
  }
  v11 = SCNetworkServiceCopyAll(a1);
  if (!v11
    || (v12 = v11,
        v60 = 0,
        type metadata accessor for SCNetworkService(0),
        v14 = v13,
        static Array._conditionallyBridgeFromObjectiveC(_:result:)(v12, &v60, v13),
        v12,
        (v15 = v60) == 0))
  {

    return 0;
  }
  prefs = a1;
  v16 = v60 & 0xFFFFFFFFFFFFFF8;
  if (v60 >> 62)
  {
LABEL_88:
    if (v15 >= 0)
      v12 = (void *)v16;
    else
      v12 = (void *)v15;
    swift_bridgeObjectRetain(v15);
    v17 = _CocoaArrayWrapper.endIndex.getter(v12);
    swift_bridgeObjectRelease(v15);
    if (v17)
      goto LABEL_6;
LABEL_92:
    swift_bridgeObjectRelease(v15);
LABEL_93:
    v60 = 0;
    v61 = 0xE000000000000000;
    _StringGuts.grow(_:)(37);
    swift_bridgeObjectRelease(v61);
    v60 = 0xD000000000000023;
    v61 = 0x80000001003635D0;
    v48._countAndFlagsBits = a2;
    v48._object = (void *)a3;
    String.append(_:)(v48);

    return 0;
  }
  v17 = *(_QWORD *)((v60 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v17)
    goto LABEL_92;
LABEL_6:
  v55 = a2;
  v53 = v5;
  v59 = v14;
  v14 = 0;
  a2 = 0;
  while (1)
  {
    if ((v15 & 0xC000000000000001) != 0)
    {
      v18 = (const __SCNetworkService *)specialized _ArrayBuffer._getElementSlowPath(_:)(a2, v15);
    }
    else
    {
      if (a2 >= *(_QWORD *)(v16 + 16))
        goto LABEL_85;
      v18 = (const __SCNetworkService *)*(id *)(v15 + 32 + 8 * a2);
    }
    v12 = v18;
    v19 = __OFADD__(a2++, 1);
    if (v19)
    {
      __break(1u);
LABEL_85:
      __break(1u);
LABEL_86:

      swift_bridgeObjectRelease(v16);
      return 0;
    }
    if (v14)
      goto LABEL_8;
    v20 = SCNetworkServiceGetInterface(v18);
    if (v20)
      break;
LABEL_7:
    v14 = 0;
LABEL_8:

    if (a2 == v17)
    {
      swift_bridgeObjectRelease(v15);
      a2 = v55;
      if (v14)
      {
        a2 = v14;
        v24 = (void *)v14;
        goto LABEL_25;
      }
      goto LABEL_93;
    }
  }
  v4 = v20;
  if (!CFEqual(v20, v10))
  {
    while (1)
    {
      v21 = v4;
      v4 = SCNetworkInterfaceGetInterface(v4);

      if (!v4)
        goto LABEL_7;
      if (CFEqual(v4, v10))
      {
        v14 = (uint64_t)v12;
        v12 = v4;
        goto LABEL_8;
      }
    }
  }
  swift_bridgeObjectRelease(v15);

  a2 = v12;
  v24 = 0;
  v14 = (uint64_t)v12;
LABEL_25:
  v25 = v24;
  v5 = v59;
  if (!SCNetworkServiceSetEnabled((SCNetworkServiceRef)a2, v53 & 1))
  {
    v60 = 0;
    v61 = 0xE000000000000000;
    _StringGuts.grow(_:)(24);
    swift_bridgeObjectRelease(v61);
    v60 = 0x742064656C696146;
    v61 = 0xEA0000000000206FLL;
    if ((v53 & 1) != 0)
      v44 = 0x656C62616E65;
    else
      v44 = 0x656C6261736964;
    if ((v53 & 1) != 0)
      v45 = 0xE600000000000000;
    else
      v45 = 0xE700000000000000;
    v46 = v45;
    String.append(_:)(*(Swift::String *)&v44);
    swift_bridgeObjectRelease(v45);
    v47._countAndFlagsBits = 0x6563697672657320;
    v47._object = (void *)0xEC00000074657320;
    String.append(_:)(v47);

    return 0;
  }
  v26 = SCNetworkSetCopyAll(prefs);
  if (!v26
    || (v27 = v26,
        v60 = 0,
        type metadata accessor for SCNetworkSet(0),
        static Array._conditionallyBridgeFromObjectiveC(_:result:)(v27, &v60, v28),
        v27,
        (v16 = v60) == 0))
  {

    return 0;
  }
  v29 = v60 & 0xFFFFFFFFFFFFFF8;
  if (v60 >> 62)
    goto LABEL_98;
  v15 = *(_QWORD *)((v60 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v15)
  {
LABEL_30:
    a3 = 0;
    service = (const __SCNetworkService *)a2;
    prefs = (const __SCPreferences *)(v16 & 0xC000000000000001);
    v50 = v14;
    v51 = v16 + 32;
    v52 = v29;
    v54 = v16;
    v56 = v15;
    do
    {
      if (prefs)
      {
        v30 = (const __SCNetworkSet *)specialized _ArrayBuffer._getElementSlowPath(_:)(a3, v16);
      }
      else
      {
        if (a3 >= *(_QWORD *)(v29 + 16))
        {
          __break(1u);
LABEL_96:
          __break(1u);
          goto LABEL_97;
        }
        v30 = (const __SCNetworkSet *)*(id *)(v51 + 8 * a3);
      }
      v4 = v30;
      v19 = __OFADD__(a3++, 1);
      if (v19)
      {
        __break(1u);
        goto LABEL_88;
      }
      v31 = SCNetworkSetCopyServices(v30);
      if (v31)
      {
        v32 = v31;
        v60 = 0;
        static Array._conditionallyBridgeFromObjectiveC(_:result:)(v31, &v60, v5);

        v33 = v60;
        if (!v60)
        {

          goto LABEL_74;
        }
        if (v60 >> 62)
        {
          if ((v60 & 0x8000000000000000) == 0)
            v43 = v60 & 0xFFFFFFFFFFFFFF8;
          else
            v43 = v60;
          swift_bridgeObjectRetain(v60);
          v29 = _CocoaArrayWrapper.endIndex.getter(v43);
          if (!v29)
          {
LABEL_72:

            swift_bridgeObjectRelease_n(v33, 2);
LABEL_73:
            v29 = v52;
            v16 = v54;
LABEL_74:
            v15 = v56;
            continue;
          }
        }
        else
        {
          v29 = *(_QWORD *)((v60 & 0xFFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain(v60);
          if (!v29)
            goto LABEL_72;
        }
        if ((v33 & 0xC000000000000001) != 0)
          v34 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v33);
        else
          v34 = *(id *)(v33 + 32);
        v35 = v34;
        a2 = sub_100011DE4(&qword_100405B98, (uint64_t (*)(uint64_t))type metadata accessor for SCNetworkService, (uint64_t)&unk_100339A30);
        v36 = static _CFObject.== infix(_:_:)(v35, service, v5, a2);

        if ((v36 & 1) == 0)
        {
          if (v29 == 1)
            goto LABEL_51;
          if ((v33 & 0xC000000000000001) != 0)
          {
            v16 = specialized _ArrayBuffer._getElementSlowPath(_:)(1, v33);
            v38 = static _CFObject.== infix(_:_:)(v16, service, v59, a2);
            swift_unknownObjectRelease(v16);
            if ((v38 & 1) == 0)
            {
              if (v29 != 2)
              {
                v14 = 2;
                do
                {
                  v39 = specialized _ArrayBuffer._getElementSlowPath(_:)(v14, v33);
                  v5 = v14 + 1;
                  if (__OFADD__(v14, 1))
                    goto LABEL_96;
                  v16 = v39;
                  v40 = static _CFObject.== infix(_:_:)(v39, service, v59, a2);
                  swift_unknownObjectRelease(v16);
                  if ((v40 & 1) != 0)
                    goto LABEL_45;
                  ++v14;
                }
                while (v5 != v29);
              }
LABEL_51:

              swift_bridgeObjectRelease_n(v33, 2);
              v5 = v59;
              v14 = v50;
              a2 = (unint64_t)service;
              goto LABEL_73;
            }
          }
          else
          {
            v16 = (uint64_t)*(id *)(v33 + 40);
            v41 = static _CFObject.== infix(_:_:)(v16, service, v59, a2);

            if ((v41 & 1) == 0)
            {
              if (v29 != 2)
              {
                v14 = 6;
                while (1)
                {
                  v5 = v14 - 3;
                  if (__OFADD__(v14 - 4, 1))
                    break;
                  v16 = (uint64_t)*(id *)(v33 + 8 * v14);
                  v42 = static _CFObject.== infix(_:_:)(v16, service, v59, a2);

                  if ((v42 & 1) != 0)
                    goto LABEL_45;
                  ++v14;
                  if (v5 == v29)
                    goto LABEL_51;
                }
LABEL_97:
                __break(1u);
LABEL_98:
                if (v16 >= 0)
                  v49 = v29;
                else
                  v49 = v16;
                swift_bridgeObjectRetain(v16);
                v15 = _CocoaArrayWrapper.endIndex.getter(v49);
                swift_bridgeObjectRelease(v16);
                if (!v15)
                  break;
                goto LABEL_30;
              }
              goto LABEL_51;
            }
          }
        }
LABEL_45:
        swift_bridgeObjectRelease_n(v33, 2);
        a2 = (unint64_t)service;
        v37 = SCNetworkServiceGetInterface(service);
        v14 = v50;
        v29 = v52;
        v16 = v54;
        if (!v37)
        {

          v5 = v59;
          goto LABEL_74;
        }
        v12 = v37;
        v5 = v59;
        v15 = v56;
        if (!SCNetworkSetContainsInterface(v4, v37) && !SCNetworkSetAddService(v4, service))
          goto LABEL_86;

      }
      else
      {

      }
    }
    while (a3 != v15);
  }

  swift_bridgeObjectRelease(v16);
  return 1;
}

uint64_t sub_10004E42C(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  _BYTE v8[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v8, 0, 0);
  result = swift_weakLoadStrong(v1);
  if (result)
  {
    v3 = result;
    v4 = result
       + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A31InternetSharingRequesterSession_state;
    v5 = *(_QWORD *)(result
                   + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A31InternetSharingRequesterSession_state);
    if (*(_BYTE *)(result
                  + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A31InternetSharingRequesterSession_state
                  + 16))
      v6 = 0;
    else
      v6 = (*(_QWORD *)(result
                      + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A31InternetSharingRequesterSession_state) & 1) == 0;
    if (v6)
    {
      v7 = *(_QWORD *)(v4 + 8);
      *(_QWORD *)v4 = 0xD00000000000002DLL;
      *(_QWORD *)(v4 + 8) = 0x8000000100363680;
      *(_BYTE *)(v4 + 16) = 1;
      sub_100061DF8(v5, v7, 0);
      sub_10004D47C(v5, v7, 0);
    }
    return swift_release(v3);
  }
  return result;
}

uint64_t sub_10004E4F0(char a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  _BYTE v19[24];

  v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v19, 0, 0);
  result = swift_weakLoadStrong(v3);
  if (result)
  {
    v5 = result;
    v6 = result
       + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A31InternetSharingRequesterSession_state;
    if (!*(_BYTE *)(result
                   + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A31InternetSharingRequesterSession_state
                   + 16))
    {
      v7 = *(_QWORD *)v6;
      if ((*(_QWORD *)v6 & 1) != 0)
      {
        if ((a1 & 1) == 0)
        {
          sub_10004D1F4();
          v9 = *(_QWORD *)(v5
                         + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A31InternetSharingRequesterSession_interface);
          v10 = *(_QWORD *)(v5
                          + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A31InternetSharingRequesterSession_interface
                          + 8);
          swift_bridgeObjectRetain(v10);
          sub_10005FF14(v9, v10, 0);
          v12 = v11;
          swift_bridgeObjectRelease(v10);
          if (v12)
            swift_bridgeObjectRelease(v12);
          v13 = *(_QWORD *)v6;
          v14 = *(_QWORD *)(v6 + 8);
          *(_OWORD *)v6 = xmmword_100337850;
          v15 = *(_BYTE *)(v6 + 16);
          *(_BYTE *)(v6 + 16) = 2;
          sub_100061DD0(v13, v14, v15);
          sub_100061DF8(v13, v14, v15);
          sub_10004D47C(v13, v14, v15);
          sub_100061DF8(v13, v14, v15);
          v16 = *(_QWORD *)v6;
          v17 = *(_QWORD *)(v6 + 8);
          *(_QWORD *)v6 = 0xD000000000000018;
          *(_QWORD *)(v6 + 8) = 0x8000000100363660;
          v18 = *(_BYTE *)(v6 + 16);
          *(_BYTE *)(v6 + 16) = 1;
          sub_100061DD0(v16, v17, v18);
          sub_100061DF8(v16, v17, v18);
          sub_10004D47C(v16, v17, v18);
          sub_100061DF8(v16, v17, v18);
        }
      }
      else if ((a1 & 1) != 0)
      {
        v8 = *(_QWORD *)(v6 + 8);
        *(_OWORD *)v6 = xmmword_100337850;
        *(_BYTE *)(v6 + 16) = 0;
        sub_100061DF8(v7, v8, 0);
        sub_10004D47C(v7, v8, 0);
      }
    }
    return swift_release(v5);
  }
  return result;
}

uint64_t sub_10004E6D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t result;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31[3];

  v6 = v3;
  Logger.init(subsystem:category:)(0xD000000000000012, 0x8000000100360DF0, 0x4D79617765746167, 0xEE00726F74696E6FLL);
  v8 = OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_monitor;
  *(_QWORD *)(v3 + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_monitor) = 0;
  RoutingSocket.init()(v3 + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_routingSocket);
  v9 = v3
     + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_lastGatewayIPAddress;
  *(_OWORD *)v9 = 0u;
  *(_OWORD *)(v9 + 16) = 0u;
  *(_BYTE *)(v9 + 32) = -1;
  v10 = v3
      + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_lastGatewayAddress;
  *(_WORD *)(v10 + 4) = 0;
  *(_DWORD *)v10 = 0;
  *(_BYTE *)(v10 + 6) = 1;
  v11 = v3
      + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_lastGatewayUpdate;
  v12 = type metadata accessor for DispatchTime(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
  v13 = nw_parameters_create();
  v14 = *(_QWORD *)(a1 + 16);
  v15 = *(_QWORD *)(a1 + 24);
  v30 = a3;
  if ((v15 & 0x1000000000000000) != 0 || !(v15 & 0x2000000000000000 | v14 & 0x1000000000000000))
  {
    swift_bridgeObjectRetain(v15);
    sub_100012C44(&qword_100405B18);
    _StringGuts._slowWithCString<A>(_:)(v31, sub_10004C554, 0);
    swift_bridgeObjectRelease(v15);
    v16 = v31[0];
  }
  else if ((v15 & 0x2000000000000000) != 0)
  {
    v31[0] = *(_QWORD *)(a1 + 16);
    v31[1] = v15 & 0xFFFFFFFFFFFFFFLL;
    swift_bridgeObjectRetain(v15);
    v16 = nw_interface_create_with_name(v31);
    swift_bridgeObjectRelease(v15);
  }
  else
  {
    if ((v14 & 0x1000000000000000) == 0)
      _StringObject.sharedUTF8.getter(v14, v15);
    swift_bridgeObjectRetain(v15);
    sub_10004C554(v31);
    v16 = v31[0];
    swift_bridgeObjectRelease(v15);
  }
  nw_parameters_require_interface(v13, v16);
  v17 = swift_unknownObjectRelease(v16);
  v18 = Logger.logObject.getter(v17);
  v19 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v18, v19))
  {
    v20 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v20 = 0;
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Start monitoring network path for gateway address updates", v20, 2u);
    swift_slowDealloc(v20, -1, -1);
  }

  result = nw_path_create_evaluator_for_endpoint(0, v13);
  if (result)
  {
    v22 = result;
    if (qword_100404108 != -1)
      swift_once(&qword_100404108, sub_10017E140);
    v23 = (void *)static OS_dispatch_queue.p2p;
    v24 = swift_allocObject(&unk_1003DDC98, 24, 7);
    swift_weakInit(v24 + 16, v6);
    v25 = swift_allocObject(a2, 32, 7);
    *(_QWORD *)(v25 + 16) = v24;
    *(_QWORD *)(v25 + 24) = a1;
    v26 = type metadata accessor for AppleDevice.NetworkPathMonitor();
    v27 = swift_allocObject(v26, 24, 7);
    swift_retain();
    v28 = v23;
    swift_retain();
    AppleDevice.NetworkPathMonitor.init(evaluator:queue:updatedHandler:)(v22, v28, v30, v25);
    swift_release(v24);
    swift_release(a1);
    swift_unknownObjectRelease(v13);
    v29 = *(_QWORD *)(v6 + v8);
    *(_QWORD *)(v6 + v8) = v27;
    swift_release(v29);
    return v6;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10004EA6C(NSObject *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t aBlock[5];
  uint64_t v23;
  char v24[24];

  v5 = a2 + 16;
  swift_beginAccess(a2 + 16, v24, 0, 0);
  result = swift_weakLoadStrong(v5);
  if (result)
  {
    v7 = result;
    v8 = swift_retain_n(a3, 2);
    v9 = Logger.logObject.getter(v8);
    v10 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc(12, -1);
      v20 = a1;
      v12 = swift_slowAlloc(32, -1);
      aBlock[0] = v12;
      *(_DWORD *)v11 = 136315138;
      v14 = *(_QWORD *)(a3 + 16);
      v13 = *(_QWORD *)(a3 + 24);
      swift_bridgeObjectRetain(v13);
      v21 = sub_100013CC8(v14, v13, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, aBlock);
      swift_release_n(a3, 2);
      swift_bridgeObjectRelease(v13);
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Network path for interface %s was updated", v11, 0xCu);
      swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
      v15 = v12;
      a1 = v20;
      swift_slowDealloc(v15, -1, -1);
      swift_slowDealloc(v11, -1, -1);
    }
    else
    {
      swift_release_n(a3, 2);
    }

    v16 = swift_allocObject(&unk_1003DDFE0, 32, 7);
    *(_QWORD *)(v16 + 16) = v7;
    *(_QWORD *)(v16 + 24) = a3;
    v17 = swift_allocObject(&unk_1003DE008, 32, 7);
    *(_QWORD *)(v17 + 16) = sub_100062A44;
    *(_QWORD *)(v17 + 24) = v16;
    aBlock[4] = (uint64_t)sub_1000646E4;
    v23 = v17;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_100050DD4;
    aBlock[3] = (uint64_t)&unk_1003DE020;
    v18 = _Block_copy(aBlock);
    v19 = v23;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_release(v19);
    nw_path_enumerate_gateways(a1, v18);
    swift_release(v7);
    _Block_release(v18);
    LOBYTE(v18) = swift_isEscapingClosureAtFileLocation(v17, "", 78, 1710, 38, 1);
    swift_release(v16);
    result = swift_release(v17);
    if ((v18 & 1) != 0)
      __break(1u);
  }
  return result;
}

uint64_t sub_10004ED14(NSObject *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  NSObject *v20;
  uint64_t v21;
  uint64_t aBlock[5];
  uint64_t v23;
  char v24[24];

  v5 = a2 + 16;
  swift_beginAccess(a2 + 16, v24, 0, 0);
  result = swift_weakLoadStrong(v5);
  if (result)
  {
    v7 = result;
    v8 = swift_retain_n(a3, 2);
    v9 = Logger.logObject.getter(v8);
    v10 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc(12, -1);
      v20 = a1;
      v12 = swift_slowAlloc(32, -1);
      aBlock[0] = v12;
      *(_DWORD *)v11 = 136315138;
      v14 = *(_QWORD *)(a3 + 16);
      v13 = *(_QWORD *)(a3 + 24);
      swift_bridgeObjectRetain(v13);
      v21 = sub_100013CC8(v14, v13, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, aBlock);
      swift_release_n(a3, 2);
      swift_bridgeObjectRelease(v13);
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Network path for interface %s was updated", v11, 0xCu);
      swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
      v15 = v12;
      a1 = v20;
      swift_slowDealloc(v15, -1, -1);
      swift_slowDealloc(v11, -1, -1);
    }
    else
    {
      swift_release_n(a3, 2);
    }

    v16 = swift_allocObject(&unk_1003DDCE8, 32, 7);
    *(_QWORD *)(v16 + 16) = v7;
    *(_QWORD *)(v16 + 24) = a3;
    v17 = swift_allocObject(&unk_1003DDD10, 32, 7);
    *(_QWORD *)(v17 + 16) = sub_100064628;
    *(_QWORD *)(v17 + 24) = v16;
    aBlock[4] = (uint64_t)sub_100062968;
    v23 = v17;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_100050DD4;
    aBlock[3] = (uint64_t)&unk_1003DDD28;
    v18 = _Block_copy(aBlock);
    v19 = v23;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_release(v19);
    nw_path_enumerate_gateways(a1, v18);
    swift_release(v7);
    _Block_release(v18);
    LOBYTE(v18) = swift_isEscapingClosureAtFileLocation(v17, "", 78, 1710, 38, 1);
    swift_release(v16);
    result = swift_release(v17);
    if ((v18 & 1) != 0)
      __break(1u);
  }
  return result;
}

uint64_t sub_10004EFBC(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t (*v17)(char *, uint64_t, uint64_t);
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  __n128 v27;
  char *v28;
  uint64_t v29;
  uint8_t *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  char isEscapingClosureAtFileLocation;
  uint8_t *v40;
  uint8_t *v41;
  uint64_t v42;
  uint64_t (*v43)(char *, uint64_t, uint64_t);
  NSObject *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t aBlock[5];
  uint64_t v50;
  char v51[24];

  v9 = *(_QWORD *)(a4 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin();
  __chkstk_darwin();
  v12 = (char *)&v40 - v11;
  v14 = v13 + 16;
  swift_beginAccess(v13 + 16, v51, 0, 0);
  result = swift_weakLoadStrong(v14);
  if (result)
  {
    v16 = result;
    v46 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
    v47 = a5;
    v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 16);
    v45 = a3;
    v18 = v17(v12, a3, a4);
    v19 = Logger.logObject.getter(v18);
    v20 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v19, v20))
    {
      v21 = swift_slowAlloc(12, -1);
      v44 = a1;
      v22 = (uint8_t *)v21;
      v42 = swift_slowAlloc(32, -1);
      aBlock[0] = v42;
      v43 = v17;
      *(_DWORD *)v22 = 136315138;
      v40 = v22 + 4;
      v41 = v22;
      v23 = v47;
      v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v47 + 16) + 40))(a4);
      v26 = v25;
      v48 = sub_100013CC8(v24, v25, aBlock);
      v17 = v43;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, aBlock);
      v27 = swift_bridgeObjectRelease(v26);
      v28 = v12;
      v29 = v23;
      (*(void (**)(char *, uint64_t, __n128))(v9 + 8))(v28, a4, v27);
      v30 = v41;
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Network path for interface %s was updated", v41, 0xCu);
      v31 = v42;
      swift_arrayDestroy(v42, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v31, -1, -1);
      a1 = v44;
      swift_slowDealloc(v30, -1, -1);

    }
    else
    {

      (*(void (**)(char *, uint64_t))(v9 + 8))(v12, a4);
      v29 = v47;
    }
    v32 = v46;
    v17(v46, v45, a4);
    v33 = *(unsigned __int8 *)(v9 + 80);
    v34 = (v33 + 40) & ~v33;
    v35 = (char *)swift_allocObject(&unk_1003DE378, v34 + v10, v33 | 7);
    *((_QWORD *)v35 + 2) = a4;
    *((_QWORD *)v35 + 3) = v29;
    *((_QWORD *)v35 + 4) = v16;
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(&v35[v34], v32, a4);
    v36 = swift_allocObject(&unk_1003DE3A0, 32, 7);
    *(_QWORD *)(v36 + 16) = sub_100062CE8;
    *(_QWORD *)(v36 + 24) = v35;
    aBlock[4] = (uint64_t)sub_1000646E4;
    v50 = v36;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_100050DD4;
    aBlock[3] = (uint64_t)&unk_1003DE3B8;
    v37 = _Block_copy(aBlock);
    v38 = v50;
    swift_retain();
    swift_retain();
    swift_release(v38);
    nw_path_enumerate_gateways(a1, v37);
    swift_release(v16);
    _Block_release(v37);
    isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v36, "", 78, 1710, 38, 1);
    swift_release(v35);
    result = swift_release(v36);
    if ((isEscapingClosureAtFileLocation & 1) != 0)
      __break(1u);
  }
  return result;
}

uint64_t sub_10004F320(NSObject *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  const sockaddr *address;
  uint64_t v24;
  int v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  char *v29;
  uint64_t *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  void (*v37)(char *, uint64_t, uint64_t);
  uint64_t v38;
  char v39;
  void (*v40)(char *, uint64_t);
  unsigned __int8 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  int v50;
  unint64_t v51;
  uint64_t v52;
  unsigned int *v53;
  uint64_t v54;
  uint64_t v55;
  int8x16_t v56;
  uint64x2_t v57;
  int16x8_t v58;
  NSObject *v60;
  os_log_type_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  void (*v73)(char *, uint64_t);
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  BOOL v84;
  NSObject *v85;
  os_log_type_t v86;
  uint8_t *v87;
  uint8_t *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unsigned __int8 v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  void (*v102)(char *, uint64_t);
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  _QWORD *v109;
  char *v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  unint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  void (*v118)(char *, uint64_t);
  char v119;
  char v120;
  int v121;
  int v122;
  __int128 v123;
  __int128 v124;
  int v125;
  _BYTE v126[24];
  _QWORD v127[4];
  char v128;

  v109 = a3;
  sub_100012C44(&qword_100405038);
  __chkstk_darwin();
  v115 = (char *)&v97 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for RoutingSocket(0);
  v113 = *(_QWORD *)(v6 - 8);
  v114 = v6;
  __chkstk_darwin();
  v111 = (uint64_t)&v97 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchTimeInterval(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin();
  v11 = (char *)&v97 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v13 = (char *)&v97 - v12;
  __chkstk_darwin();
  v110 = (char *)&v97 - v14;
  sub_100012C44(&qword_100405B10);
  __chkstk_darwin();
  v108 = (char *)&v97 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v17 = (char *)&v97 - v16;
  v18 = type metadata accessor for DispatchTime(0);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin();
  v21 = (char *)&v97 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v112 = (char *)&v97 - v22;
  address = nw_endpoint_get_address(a1);
  if (address->sa_family != 2)
  {
    v26 = Logger.logObject.getter(address);
    v27 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v26, v27))
    {
      v28 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v28 = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "Currently support gateway IP address translation for IPv4 only", v28, 2u);
      swift_slowDealloc(v28, -1, -1);
    }

    return 0;
  }
  v105 = *(unsigned int *)&address->sa_data[2];
  v127[0] = v105;
  memset(&v127[1], 0, 24);
  v128 = 0;
  v24 = a2
      + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_lastGatewayUpdate;
  swift_beginAccess(a2 + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_lastGatewayUpdate, v126, 0, 0);
  v104 = v24;
  sub_100033B48(v24, (uint64_t)v17, &qword_100405B10);
  v25 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18);
  v106 = v19;
  if (v25 != 1)
  {
    v29 = v112;
    (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v112, v17, v18);
    v30 = (uint64_t *)(a2
                    + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_lastGatewayIPAddress);
    v31 = *(unsigned __int8 *)(a2
                             + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_lastGatewayIPAddress
                             + 32);
    if (v31 == 255)
    {
      (*(void (**)(char *, uint64_t))(v19 + 8))(v29, v18);
      goto LABEL_16;
    }
    v107 = v18;
    v32 = *v30;
    v33 = v30[1];
    v34 = v30[2];
    v35 = v30[3];
    LODWORD(v103) = v31;
    v101 = v32;
    v100 = v33;
    v99 = v34;
    v98 = v35;
    sub_1000628F8(v32, v33, v34, v35, v31 & 1);
    if (qword_100403F80 != -1)
      swift_once(&qword_100403F80, sub_10012AF3C);
    (*(void (**)(void))(*(_QWORD *)algn_1004104A8 + 8))();
    v36 = v110;
    DispatchTime.distance(to:)(v21);
    v102 = *(void (**)(char *, uint64_t))(v106 + 8);
    v102(v21, v107);
    *(_QWORD *)v13 = 300;
    v37 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 104);
    v37(v13, enum case for DispatchTimeInterval.seconds(_:), v8);
    v38 = enum case for DispatchTimeInterval.never(_:);
    v37(v11, enum case for DispatchTimeInterval.never(_:), v8);
    v39 = static DispatchTimeInterval.== infix(_:_:)(v36, v11);
    v40 = *(void (**)(char *, uint64_t))(v9 + 8);
    v40(v11, v8);
    if ((v39 & 1) != 0)
    {
      v40(v13, v8);
      v40(v36, v8);
      v18 = v107;
      v41 = v103;
LABEL_12:
      sub_100062394(v101, v100, v99, v98, v41);
      v42 = (uint64_t)v115;
LABEL_13:
      v102(v29, v18);
      goto LABEL_17;
    }
    v37(v11, v38, v8);
    v80 = static DispatchTimeInterval.== infix(_:_:)(v13, v11);
    v40(v11, v8);
    if ((v80 & 1) != 0)
    {
      v40(v13, v8);
      v81 = ((uint64_t (*)(char *, uint64_t))v40)(v36, v8);
      v18 = v107;
      v41 = v103;
      if ((v103 & 1) != 0)
        goto LABEL_12;
    }
    else
    {
      v82 = sub_10017C64C();
      v83 = sub_10017C64C();
      v40(v13, v8);
      v81 = ((uint64_t (*)(char *, uint64_t))v40)(v36, v8);
      v84 = v82 < v83;
      v18 = v107;
      v41 = v103;
      if (!v84 || (v103 & 1) != 0)
        goto LABEL_12;
    }
    v42 = (uint64_t)v115;
    if ((_DWORD)v105 == (_DWORD)v101)
    {
      v85 = Logger.logObject.getter(v81);
      v86 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v85, v86))
      {
        v87 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v87 = 0;
        _os_log_impl((void *)&_mh_execute_header, v85, v86, "Skip updating gateway IP address", v87, 2u);
        v88 = v87;
        v29 = v112;
        swift_slowDealloc(v88, -1, -1);
      }

      v102(v29, v107);
      return 0;
    }
    goto LABEL_13;
  }
  sub_100033A84((uint64_t)v17, &qword_100405B10);
LABEL_16:
  v42 = (uint64_t)v115;
LABEL_17:
  sub_100033B48(a2 + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_routingSocket, v42, &qword_100405038);
  if ((*(unsigned int (**)(uint64_t, uint64_t, unint64_t))(v113 + 48))(v42, 1, v114) == 1)
  {
    sub_100033A84(v42, &qword_100405038);
    return 0;
  }
  v107 = v18;
  v43 = a2;
  v44 = v111;
  sub_100033AC0(v42, v111, type metadata accessor for RoutingSocket);
  v45 = RoutingSocket.macAddress(for:)((uint64_t)v127);
  v46 = sub_100063824(v44, type metadata accessor for RoutingSocket);
  if ((v45 & 0x1000000000000) != 0)
    return 0;
  v47 = a2
      + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_lastGatewayIPAddress;
  v48 = v45 >> 40;
  v49 = HIDWORD(v45);
  v50 = *(unsigned __int8 *)(a2
                           + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_lastGatewayIPAddress
                           + 32);
  v51 = v45 >> 24;
  v52 = v106;
  if (v50 == 255)
    goto LABEL_28;
  if ((v50 & 1) != 0)
    goto LABEL_28;
  if ((_DWORD)v105 != *(_DWORD *)v47)
    goto LABEL_28;
  v53 = (unsigned int *)(v43
                       + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_lastGatewayAddress);
  if ((*(_BYTE *)(v43
                 + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_lastGatewayAddress
                 + 6) & 1) != 0)
    goto LABEL_28;
  v54 = *((unsigned __int16 *)v53 + 2);
  v55 = *v53;
  LOWORD(v118) = v45;
  BYTE2(v118) = BYTE2(v45);
  BYTE3(v118) = BYTE3(v45);
  BYTE4(v118) = BYTE4(v45);
  BYTE5(v118) = BYTE5(v45);
  LOBYTE(v116) = v55;
  v56.i64[0] = 0xFFFFFFFFFFFFLL;
  v56.i64[1] = 0xFFFFFFFFFFFFLL;
  v57 = (uint64x2_t)vandq_s8((int8x16_t)vdupq_n_s64(v55 | (unint64_t)(v54 << 32)), v56);
  v58 = (int16x8_t)vshlq_u64(v57, (uint64x2_t)xmmword_10033B100);
  *(int32x2_t *)v57.i8 = vmovn_s64((int64x2_t)vshlq_u64(v57, (uint64x2_t)xmmword_10033B0F0));
  *(int32x2_t *)v58.i8 = vmovn_s64((int64x2_t)v58);
  v58.i16[1] = v58.i16[2];
  v58.i16[2] = v57.i16[0];
  v58.i16[3] = v57.i16[2];
  *(_DWORD *)((char *)&v116 + 1) = vmovn_s16(v58).u32[0];
  BYTE5(v116) = BYTE1(v54);
  if ((_DWORD)v118 != (_DWORD)v116 || WORD2(v118) != WORD2(v116))
  {
LABEL_28:
    v114 = v45 >> 8;
    v115 = (char *)(v45 >> 16);
    v113 = v43 + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_logger;
    v60 = Logger.logObject.getter(v46);
    v61 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v60, v61))
    {
      v62 = swift_slowAlloc(22, -1);
      v103 = v45 >> 24;
      v51 = v62;
      v102 = (void (*)(char *, uint64_t))swift_slowAlloc(64, -1);
      v118 = v102;
      *(_DWORD *)v51 = 136315394;
      v101 = v51 + 4;
      v63 = (char *)swift_slowAlloc(16, -1);
      v111 = v47;
      v64 = v63;
      LODWORD(v116) = v105;
      inet_ntop(2, &v116, v63, 0x10u);
      v65 = String.init(cString:)(v64);
      v112 = (char *)HIDWORD(v45);
      v66 = v52;
      v67 = v65;
      v110 = (char *)(v45 >> 40);
      v48 = v68;
      swift_slowDealloc(v64, -1, -1);
      v69 = v67;
      v52 = v66;
      v116 = sub_100013CC8(v69, v48, (uint64_t *)&v118);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v116, &v117);
      swift_bridgeObjectRelease(v48);
      *(_WORD *)(v51 + 12) = 2080;
      v70 = WiFiAddress.description.getter(v45 & 0xFFFFFFFFFFFFLL);
      v49 = v71;
      v116 = sub_100013CC8(v70, v71, (uint64_t *)&v118);
      v47 = v111;
      LOBYTE(v48) = (_BYTE)v110;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v116, &v117);
      v72 = v49;
      LOWORD(v49) = (_WORD)v112;
      swift_bridgeObjectRelease(v72);
      _os_log_impl((void *)&_mh_execute_header, v60, v61, "Gateway (%s) has MAC address %s", (uint8_t *)v51, 0x16u);
      v73 = v102;
      swift_arrayDestroy(v102, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v73, -1, -1);
      v74 = v51;
      LOBYTE(v51) = v103;
      swift_slowDealloc(v74, -1, -1);
    }

    LODWORD(v118) = 1;
    BYTE4(v118) = v45;
    BYTE5(v118) = v114;
    BYTE6(v118) = (_BYTE)v115;
    HIBYTE(v118) = v51;
    v119 = v49;
    v120 = v48;
    v121 = 528;
    v122 = v105;
    v123 = 0u;
    v124 = 0u;
    v125 = 0;
    v75 = v109[5];
    v76 = v109[2];
    v77 = v109[3];
    swift_retain();
    swift_bridgeObjectRetain(v77);
    AppleDevice.setRequest(requestType:data:on:)(0x1C2uLL, (uint64_t)&v118, (uint64_t)v126, 0, v76, v77);
    swift_bridgeObjectRelease(v77);
    swift_release(v75);
  }
  if (qword_100403F80 != -1)
    swift_once(&qword_100403F80, sub_10012AF3C);
  v89 = (uint64_t)v108;
  (*(void (**)(void))(*(_QWORD *)algn_1004104A8 + 8))();
  v78 = 1;
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v52 + 56))(v89, 0, 1, v107);
  v90 = v104;
  swift_beginAccess(v104, &v118, 33, 0);
  sub_10006298C(v89, v90, &qword_100405B10);
  swift_endAccess(&v118);
  v91 = *(_QWORD *)v47;
  v92 = *(_QWORD *)(v47 + 8);
  v93 = *(_QWORD *)(v47 + 16);
  v94 = *(_QWORD *)(v47 + 24);
  *(_QWORD *)v47 = v105;
  *(_QWORD *)(v47 + 8) = 0;
  *(_QWORD *)(v47 + 16) = 0;
  *(_QWORD *)(v47 + 24) = 0;
  v95 = *(_BYTE *)(v47 + 32);
  *(_BYTE *)(v47 + 32) = 0;
  sub_100062394(v91, v92, v93, v94, v95);
  v96 = v43
      + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_lastGatewayAddress;
  *(_WORD *)(v96 + 4) = v49;
  *(_DWORD *)v96 = v45;
  *(_BYTE *)(v96 + 6) = 0;
  return v78;
}

uint64_t sub_1000500D4(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  const sockaddr *address;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  char *v30;
  uint64_t *v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  void (*v38)(char *, uint64_t, uint64_t);
  uint64_t v39;
  char v40;
  void (*v41)(char *, uint64_t);
  unsigned __int8 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  int v51;
  unsigned int *v52;
  uint64_t v53;
  uint64_t v54;
  int8x16_t v55;
  uint64x2_t v56;
  int16x8_t v57;
  uint64_t v59;
  NSObject *v60;
  os_log_type_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  BOOL v80;
  NSObject *v81;
  os_log_type_t v82;
  uint8_t *v83;
  uint8_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unsigned __int8 v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void (*v98)(char *, uint64_t);
  int v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116[3];
  char v117[24];
  _QWORD v118[4];
  char v119;

  v107 = a5;
  v106 = a4;
  v105 = a3;
  sub_100012C44(&qword_100405038);
  __chkstk_darwin();
  v113 = (char *)&v93 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for RoutingSocket(0);
  v111 = *(_QWORD *)(v8 - 8);
  v112 = v8;
  __chkstk_darwin();
  v109 = (uint64_t)&v93 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchTimeInterval(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin();
  v13 = (char *)&v93 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v15 = (char *)&v93 - v14;
  __chkstk_darwin();
  v108 = (char *)&v93 - v16;
  sub_100012C44(&qword_100405B10);
  __chkstk_darwin();
  v104 = (char *)&v93 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v19 = (char *)&v93 - v18;
  v20 = type metadata accessor for DispatchTime(0);
  v21 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin();
  v23 = (char *)&v93 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v110 = (char *)&v93 - v24;
  address = nw_endpoint_get_address(a1);
  if (address->sa_family != 2)
  {
    v27 = Logger.logObject.getter(address);
    v28 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v27, v28))
    {
      v29 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v29 = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "Currently support gateway IP address translation for IPv4 only", v29, 2u);
      swift_slowDealloc(v29, -1, -1);
    }

    return 0;
  }
  v102 = *(unsigned int *)&address->sa_data[2];
  v118[0] = v102;
  memset(&v118[1], 0, 24);
  v119 = 0;
  v26 = a2
      + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_lastGatewayUpdate;
  swift_beginAccess(a2 + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_lastGatewayUpdate, v117, 0, 0);
  v101 = v26;
  sub_100033B48(v26, (uint64_t)v19, &qword_100405B10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20) != 1)
  {
    v30 = v110;
    (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v110, v19, v20);
    v31 = (uint64_t *)(a2
                    + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_lastGatewayIPAddress);
    v32 = *(unsigned __int8 *)(a2
                             + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_lastGatewayIPAddress
                             + 32);
    if (v32 == 255)
    {
      (*(void (**)(char *, uint64_t))(v21 + 8))(v30, v20);
      goto LABEL_14;
    }
    v100 = v21;
    v103 = v20;
    v33 = *v31;
    v34 = v31[1];
    v35 = v31[2];
    v36 = v31[3];
    v99 = v32;
    v97 = v33;
    v96 = v34;
    v95 = v35;
    v94 = v36;
    sub_1000628F8(v33, v34, v35, v36, v32 & 1);
    if (qword_100403F80 != -1)
      swift_once(&qword_100403F80, sub_10012AF3C);
    (*(void (**)(void))(*(_QWORD *)algn_1004104A8 + 8))();
    v37 = v108;
    DispatchTime.distance(to:)(v23);
    v98 = *(void (**)(char *, uint64_t))(v100 + 8);
    v98(v23, v103);
    *(_QWORD *)v15 = 300;
    v38 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 104);
    v38(v15, enum case for DispatchTimeInterval.seconds(_:), v10);
    v39 = enum case for DispatchTimeInterval.never(_:);
    v38(v13, enum case for DispatchTimeInterval.never(_:), v10);
    v40 = static DispatchTimeInterval.== infix(_:_:)(v37, v13);
    v41 = *(void (**)(char *, uint64_t))(v11 + 8);
    v41(v13, v10);
    if ((v40 & 1) != 0)
    {
      v41(v15, v10);
      v41(v37, v10);
      v20 = v103;
      v42 = v99;
LABEL_11:
      sub_100062394(v97, v96, v95, v94, v42);
      v21 = v100;
      v43 = (uint64_t)v113;
LABEL_12:
      v98(v30, v20);
      goto LABEL_15;
    }
    v38(v13, v39, v10);
    v76 = static DispatchTimeInterval.== infix(_:_:)(v15, v13);
    v41(v13, v10);
    if ((v76 & 1) != 0)
    {
      v41(v15, v10);
      v77 = ((uint64_t (*)(char *, uint64_t))v41)(v37, v10);
      v20 = v103;
      v42 = v99;
      if ((v99 & 1) != 0)
        goto LABEL_11;
    }
    else
    {
      v78 = sub_10017C64C();
      v79 = sub_10017C64C();
      v41(v15, v10);
      v77 = ((uint64_t (*)(char *, uint64_t))v41)(v37, v10);
      v80 = v78 < v79;
      v20 = v103;
      v42 = v99;
      if (!v80 || (v99 & 1) != 0)
        goto LABEL_11;
    }
    v21 = v100;
    v43 = (uint64_t)v113;
    if ((_DWORD)v102 == (_DWORD)v97)
    {
      v81 = Logger.logObject.getter(v77);
      v82 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v81, v82))
      {
        v83 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v83 = 0;
        _os_log_impl((void *)&_mh_execute_header, v81, v82, "Skip updating gateway IP address", v83, 2u);
        v84 = v83;
        v30 = v110;
        swift_slowDealloc(v84, -1, -1);
      }

      v98(v30, v103);
      return 0;
    }
    goto LABEL_12;
  }
  sub_100033A84((uint64_t)v19, &qword_100405B10);
LABEL_14:
  v43 = (uint64_t)v113;
LABEL_15:
  sub_100033B48(a2 + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_routingSocket, v43, &qword_100405038);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v111 + 48))(v43, 1, v112) == 1)
  {
    sub_100033A84(v43, &qword_100405038);
    return 0;
  }
  v103 = v20;
  v44 = a2;
  v45 = v109;
  sub_100033AC0(v43, v109, type metadata accessor for RoutingSocket);
  v48 = RoutingSocket.macAddress(for:)((uint64_t)v118);
  v49 = sub_100063824(v45, type metadata accessor for RoutingSocket);
  if ((v48 & 0x1000000000000) != 0)
    return 0;
  v50 = (char *)(a2
               + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_lastGatewayIPAddress);
  v51 = *(unsigned __int8 *)(a2
                           + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_lastGatewayIPAddress
                           + 32);
  if (v51 == 255)
    goto LABEL_30;
  if ((v51 & 1) != 0)
    goto LABEL_30;
  if ((_DWORD)v102 != *(_DWORD *)v50)
    goto LABEL_30;
  v52 = (unsigned int *)(a2
                       + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_lastGatewayAddress);
  if ((*(_BYTE *)(a2
                 + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_lastGatewayAddress
                 + 6) & 1) != 0)
    goto LABEL_30;
  v53 = *((unsigned __int16 *)v52 + 2);
  v54 = *v52;
  LOWORD(v116[0]) = v48;
  BYTE2(v116[0]) = BYTE2(v48);
  BYTE3(v116[0]) = BYTE3(v48);
  BYTE4(v116[0]) = BYTE4(v48);
  BYTE5(v116[0]) = BYTE5(v48);
  LOBYTE(v114) = v54;
  v55.i64[0] = 0xFFFFFFFFFFFFLL;
  v55.i64[1] = 0xFFFFFFFFFFFFLL;
  v56 = (uint64x2_t)vandq_s8((int8x16_t)vdupq_n_s64(v54 | (unint64_t)(v53 << 32)), v55);
  v57 = (int16x8_t)vshlq_u64(v56, (uint64x2_t)xmmword_10033B100);
  *(int32x2_t *)v56.i8 = vmovn_s64((int64x2_t)vshlq_u64(v56, (uint64x2_t)xmmword_10033B0F0));
  *(int32x2_t *)v57.i8 = vmovn_s64((int64x2_t)v57);
  v57.i16[1] = v57.i16[2];
  v57.i16[2] = v56.i16[0];
  v57.i16[3] = v56.i16[2];
  *(_DWORD *)((char *)&v114 + 1) = vmovn_s16(v57).u32[0];
  BYTE5(v114) = BYTE1(v53);
  if (LODWORD(v116[0]) != (_DWORD)v114 || WORD2(v116[0]) != WORD2(v114))
  {
LABEL_30:
    v59 = a2 + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_logger;
    v60 = Logger.logObject.getter(v49);
    v61 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v60, v61))
    {
      v62 = swift_slowAlloc(22, -1);
      v111 = swift_slowAlloc(64, -1);
      v116[0] = v111;
      *(_DWORD *)v62 = 136315394;
      v63 = (char *)swift_slowAlloc(16, -1);
      v100 = v21;
      v64 = v63;
      LODWORD(v114) = v102;
      inet_ntop(2, &v114, v63, 0x10u);
      v65 = String.init(cString:)(v64);
      v112 = v59;
      v113 = v50;
      v66 = v48;
      v67 = v65;
      v69 = v68;
      swift_slowDealloc(v64, -1, -1);
      v114 = sub_100013CC8(v67, v69, v116);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v114, &v115);
      swift_bridgeObjectRelease(v69);
      *(_WORD *)(v62 + 12) = 2080;
      v70 = v66 & 0xFFFFFFFFFFFFLL;
      v71 = WiFiAddress.description.getter(v66 & 0xFFFFFFFFFFFFLL);
      v73 = v72;
      v114 = sub_100013CC8(v71, v72, v116);
      v21 = v100;
      v48 = v66;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v114, &v115);
      v74 = v73;
      v50 = v113;
      swift_bridgeObjectRelease(v74);
      _os_log_impl((void *)&_mh_execute_header, v60, v61, "Gateway (%s) has MAC address %s", (uint8_t *)v62, 0x16u);
      v75 = v111;
      swift_arrayDestroy(v111, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v75, -1, -1);
      swift_slowDealloc(v62, -1, -1);

    }
    else
    {

      v70 = v48 & 0xFFFFFFFFFFFFLL;
    }
    (*(void (**)(uint64_t, _QWORD *, uint64_t))(v107 + 120))(v70, v118, v106);
  }
  if (qword_100403F80 != -1)
    swift_once(&qword_100403F80, sub_10012AF3C);
  v85 = (uint64_t)v104;
  (*(void (**)(void))(*(_QWORD *)algn_1004104A8 + 8))();
  v46 = 1;
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v21 + 56))(v85, 0, 1, v103);
  v86 = v101;
  swift_beginAccess(v101, v116, 33, 0);
  sub_10006298C(v85, v86, &qword_100405B10);
  swift_endAccess(v116);
  v87 = *(_QWORD *)v50;
  v88 = *((_QWORD *)v50 + 1);
  v89 = *((_QWORD *)v50 + 2);
  v90 = *((_QWORD *)v50 + 3);
  *(_QWORD *)v50 = v102;
  *((_QWORD *)v50 + 1) = 0;
  *((_QWORD *)v50 + 2) = 0;
  *((_QWORD *)v50 + 3) = 0;
  v91 = v50[32];
  v50[32] = 0;
  sub_100062394(v87, v88, v89, v90, v91);
  v92 = v44
      + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_lastGatewayAddress;
  *(_WORD *)(v92 + 4) = WORD2(v48);
  *(_DWORD *)v92 = v48;
  *(_BYTE *)(v92 + 6) = 0;
  return v46;
}

uint64_t sub_100050DD4(uint64_t a1, uint64_t a2)
{
  uint64_t (*v3)(uint64_t);
  char v4;

  v3 = *(uint64_t (**)(uint64_t))(a1 + 32);
  swift_unknownObjectRetain(a2);
  v4 = v3(a2);
  swift_unknownObjectRelease(a2);
  return v4 & 1;
}

uint64_t sub_100050E1C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;

  v2 = v1;
  v3 = v1 + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_logger;
  v4 = Logger.logObject.getter(a1);
  v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Stop monitoring network path for gateway address updates", v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }

  v7 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v3, v7);
  swift_release(*(_QWORD *)(v2
                          + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_monitor));
  sub_100033A84(v2 + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_routingSocket, &qword_100405038);
  sub_100062394(*(_QWORD *)(v2+ OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_lastGatewayIPAddress), *(_QWORD *)(v2+ OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_lastGatewayIPAddress+ 8), *(_QWORD *)(v2+ OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_lastGatewayIPAddress+ 16), *(_QWORD *)(v2+ OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_lastGatewayIPAddress+ 24), *(_BYTE *)(v2+ OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_lastGatewayIPAddress+ 32));
  sub_100033A84(v2 + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_lastGatewayUpdate, &qword_100405B10);
  return v2;
}

uint64_t sub_100050F3C()
{
  return sub_100050F48((uint64_t (*)(void))sub_100050E1C);
}

uint64_t sub_100050F48(uint64_t (*a1)(void))
{
  uint64_t v1;

  v1 = a1();
  return swift_deallocClassInstance(v1, *(unsigned int *)(*(_QWORD *)v1 + 48), *(unsigned __int16 *)(*(_QWORD *)v1 + 52));
}

uint64_t sub_100050F68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t result;
  uint64_t v17;
  _BYTE v19[24];

  v1 = v0;
  sub_100012C44(&qword_100405B10);
  v2 = __chkstk_darwin();
  v4 = &v19[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = Logger.logObject.getter(v2);
  v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Resetting gateway IP address", v7, 2u);
    swift_slowDealloc(v7, -1, -1);
  }

  v8 = type metadata accessor for DispatchTime(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v4, 1, 1, v8);
  v9 = v1 + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_lastGatewayUpdate;
  swift_beginAccess(v1 + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_lastGatewayUpdate, v19, 33, 0);
  sub_10006298C((uint64_t)v4, v9, &qword_100405B10);
  swift_endAccess(v19);
  v10 = v1
      + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_lastGatewayIPAddress;
  v11 = *(_QWORD *)(v1
                  + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_lastGatewayIPAddress);
  v12 = *(_QWORD *)(v1
                  + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_lastGatewayIPAddress
                  + 8);
  v13 = *(_QWORD *)(v1
                  + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_lastGatewayIPAddress
                  + 16);
  v14 = *(_QWORD *)(v1
                  + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_lastGatewayIPAddress
                  + 24);
  *(_OWORD *)v10 = 0u;
  *(_OWORD *)(v10 + 16) = 0u;
  v15 = *(_BYTE *)(v10 + 32);
  *(_BYTE *)(v10 + 32) = -1;
  result = sub_100062394(v11, v12, v13, v14, v15);
  v17 = v1
      + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_lastGatewayAddress;
  *(_WORD *)(v17 + 4) = 0;
  *(_DWORD *)v17 = 0;
  *(_BYTE *)(v17 + 6) = 1;
  return result;
}

uint64_t sub_1000510F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v16;
  uint64_t v17;
  NSObject *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  unint64_t v29;
  os_log_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  os_log_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD v44[5];
  uint64_t v45;
  _BYTE v46[32];

  v5 = v4;
  sub_100012C44(&qword_100405038);
  __chkstk_darwin();
  v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for RoutingSocket(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin();
  v14 = (char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100033B48(v5 + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_routingSocket, (uint64_t)v10, &qword_100405038);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
    return sub_100033A84((uint64_t)v10, &qword_100405038);
  sub_100033AC0((uint64_t)v10, (uint64_t)v14, type metadata accessor for RoutingSocket);
  v16 = a1 & 0xFFFFFFFFFFFFLL;
  RoutingSocket.ipAddress(for:)(a1 & 0xFFFFFFFFFFFFLL, (uint64_t)v44);
  v39 = v44[1];
  v40 = v44[0];
  v37 = (void *)v44[3];
  v38 = v44[2];
  sub_100062908((uint64_t)v44, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000628F8);
  v17 = sub_100062908((uint64_t)v44, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000628F8);
  v18 = Logger.logObject.getter(v17);
  v19 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v18, (os_log_type_t)v19))
  {
    v34 = v19;
    v35 = v18;
    v36 = a3;
    v20 = swift_slowAlloc(22, -1);
    v33 = swift_slowAlloc(64, -1);
    v43 = v33;
    *(_DWORD *)v20 = 136315394;
    v21 = WiFiAddress.description.getter(v16);
    v23 = v22;
    v45 = sub_100013CC8(v21, v22, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, v46);
    swift_bridgeObjectRelease(v23);
    *(_WORD *)(v20 + 12) = 2080;
    sub_100063EB8((uint64_t)v44, (uint64_t)&v45, &qword_100405B20);
    if (v46[24] == 1)
    {
      v24 = v37;
      swift_bridgeObjectRetain(v37);
      v25 = IPv6Address.description.getter(v40, v39, v38, v24);
      v27 = v26;
      sub_100062908((uint64_t)v44, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000623AC);
    }
    else
    {
      v28 = (char *)swift_slowAlloc(16, -1);
      LODWORD(v41) = v40;
      inet_ntop(2, &v41, v28, 0x10u);
      v25 = String.init(cString:)(v28);
      v27 = v29;
      swift_slowDealloc(v28, -1, -1);
    }
    v41 = sub_100013CC8(v25, v27, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42);
    swift_bridgeObjectRelease(v27);
    sub_100062908((uint64_t)v44, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000623AC);
    sub_100062908((uint64_t)v44, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000623AC);
    v30 = v35;
    _os_log_impl((void *)&_mh_execute_header, v35, (os_log_type_t)v34, "Infra peer (%s) has IP address %s", (uint8_t *)v20, 0x16u);
    v31 = v33;
    swift_arrayDestroy(v33, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v31, -1, -1);
    swift_slowDealloc(v20, -1, -1);

    a3 = v36;
  }
  else
  {

    sub_100062908((uint64_t)v44, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000623AC);
    sub_100062908((uint64_t)v44, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000623AC);
  }
  (*(void (**)(unint64_t, _QWORD *, uint64_t, uint64_t))(a4 + 128))(v16, v44, a3, a4);
  sub_100063824((uint64_t)v14, type metadata accessor for RoutingSocket);
  return sub_100062908((uint64_t)v44, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000623AC);
}

uint64_t static DeviceDriver<>.interfaceName(for:)(unsigned int a1)
{
  char *v2;
  uint64_t v3;

  v2 = (char *)swift_slowAlloc(16, -1);
  if (if_indextoname(a1, v2))
    v3 = String.init(cString:)(v2);
  else
    v3 = 0;
  swift_slowDealloc(v2, -1, -1);
  return v3;
}

uint64_t DeviceDriver<>.linkState.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v8;

  swift_getAssociatedTypeWitness(0, a2, a1, &protocol requirements base descriptor for DeviceDriver);
  (*(void (**)(uint64_t, uint64_t))(a3 + 40))(a1, a3);
  v6 = v5;
  static ApplePlatform.withInterface<A>(_:matchingFamily:_:)((uint64_t)&type metadata for WiFiInterfaceLinkState, (uint64_t)&v8);
  swift_bridgeObjectRelease(v6);
  return v8;
}

uint64_t sub_100051820@<X0>(uint64_t result@<X0>, BOOL *a2@<X8>)
{
  *a2 = (~*(_DWORD *)(result + 16) & 0x41) == 0;
  return result;
}

uint64_t sub_100051838(__int16 a1, _QWORD *(*a2)(uint64_t *__return_ptr, _QWORD *))
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t KeyPath;
  __int16 v8;
  ifaddrs *v9;
  ifaddrs *v10;
  char *ifa_name;
  sockaddr *ifa_addr;
  unsigned int ifa_flags;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  char v18;
  int v19;
  uint64_t v20;
  __int16 v22;
  _BYTE v23[16];
  __int128 *v24;
  uint64_t v25;
  uint64_t v26;
  ifaddrs *v27;
  __int128 v28;
  __int128 v29;

  v28 = 0u;
  v29 = 0u;
  v6 = v2[2];
  v5 = v2[3];
  KeyPath = swift_getKeyPath(&unk_10033A970);
  v24 = &v28;
  v25 = KeyPath;
  v26 = 16;
  swift_bridgeObjectRetain(v5);
  sub_100047824(a2, (uint64_t)v23, v6, v5);
  swift_bridgeObjectRelease(v5);
  swift_release(KeyPath);
  v27 = 0;
  swift_bridgeObjectRetain(v5);
  if (getifaddrs(&v27))
  {
    swift_bridgeObjectRelease(v5);
    v8 = 0;
    goto LABEL_22;
  }
  v22 = a1;
  v9 = v27;
  if (!v27)
  {
    LOWORD(ifa_flags) = 0;
    v19 = 1;
    goto LABEL_19;
  }
  v10 = v27;
  do
  {
    ifa_name = v10->ifa_name;
    if (!ifa_name)
    {
      __break(1u);
LABEL_24:
      __break(1u);
    }
    ifa_addr = v10->ifa_addr;
    ifa_flags = v10->ifa_flags;
    v10 = v10->ifa_next;
    v14 = String.init(cString:)(ifa_name);
    if (v14 == v6 && v15 == v5)
    {
      swift_bridgeObjectRelease(v5);
    }
    else
    {
      v17 = v15;
      v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v14, v15, v6, v5, 0);
      swift_bridgeObjectRelease(v17);
      if ((v18 & 1) == 0)
        continue;
    }
    if (!ifa_addr)
      goto LABEL_24;
    if (ifa_addr->sa_family == 18)
    {
      v19 = 0;
      goto LABEL_19;
    }
  }
  while (v10);
  LOWORD(ifa_flags) = 0;
  v19 = 1;
LABEL_19:
  freeifaddrs(v9);
  swift_bridgeObjectRelease(v5);
  v8 = ifa_flags & 0xFFBE;
  if (v19)
    v8 = 0;
  a1 = v22;
LABEL_22:
  LOWORD(v29) = v8 | ((__int16)(a1 << 15) >> 15) & 0x41;
  v20 = v2[5];
  swift_retain();
  AppleDevice.send(request:data:)(1u, (uint64_t)&v28);
  return swift_release(v20);
}

uint64_t DeviceDriver<>.update(linkState:)(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v8;
  char *v9;
  uint64_t (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t KeyPath;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  __int16 v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  char v27;
  _BYTE v28[16];
  __int128 *v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;

  v22 = a5;
  v23 = a3;
  v24 = a1 << 31 >> 31;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a3, a2, &protocol requirements base descriptor for DeviceDriver);
  v25 = *(_QWORD *)(AssociatedTypeWitness - 8);
  __chkstk_darwin();
  v9 = (char *)&v21 - v8;
  v32 = 0u;
  v33 = 0u;
  v10 = *(uint64_t (**)(uint64_t, uint64_t))(a4 + 40);
  v11 = v10(a2, a4);
  v13 = v12;
  KeyPath = swift_getKeyPath(&unk_10033A970);
  v29 = &v32;
  v30 = KeyPath;
  v31 = 16;
  sub_100047824((_QWORD *(*)(uint64_t *__return_ptr, _QWORD *))sub_10000642C, (uint64_t)v28, v11, v13);
  swift_bridgeObjectRelease(v13);
  swift_release(KeyPath);
  v10(a2, a4);
  v16 = v15;
  v17 = v22;
  static ApplePlatform.withInterface<A>(_:matchingFamily:_:)((uint64_t)&type metadata for UInt32, (uint64_t)&v26);
  v18 = swift_bridgeObjectRelease(v16);
  v19 = v26 & 0xFFBE;
  if (v27)
    v19 = 0;
  LOWORD(v33) = v19 | v24 & 0x41;
  (*(void (**)(uint64_t, __n128))(v23 + 56))(a2, v18);
  (*(void (**)(uint64_t, __int128 *, uint64_t, uint64_t))(v17 + 16))(1, &v32, AssociatedTypeWitness, v17);
  return (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v9, AssociatedTypeWitness);
}

uint64_t sub_100051C64@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = *(_DWORD *)(result + 16);
  *(_BYTE *)(a2 + 4) = 0;
  return result;
}

unint64_t DeviceDriver<>.macAddress.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v8;
  unsigned __int16 v9;
  unsigned __int8 v10;

  swift_getAssociatedTypeWitness(0, a2, a1, &protocol requirements base descriptor for DeviceDriver);
  (*(void (**)(uint64_t, uint64_t))(a3 + 40))(a1, a3);
  v6 = v5;
  static ApplePlatform.withInterface<A>(_:matchingFamily:_:)((uint64_t)&type metadata for WiFiAddress, (uint64_t)&v8);
  swift_bridgeObjectRelease(v6);
  return v8 | ((unint64_t)v9 << 32) | ((unint64_t)v10 << 48);
}

uint64_t sub_100051D38@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t result;
  uint64_t v8;
  int v9;
  _BYTE v10[8];
  uint64_t v11;

  sub_100063EB8(a1 + 24, (uint64_t)v10, &qword_100405BA0);
  sub_100063EB8((uint64_t)v10, (uint64_t)&v11, &qword_100405BA0);
  if (!v11)
    __break(1u);
  v3 = *(unsigned __int8 *)(v11 + 5);
  v4 = *(unsigned __int8 *)(v11 + 6);
  v8 = *(_QWORD *)(v11 + 8);
  v9 = *(_DWORD *)(v11 + 16);
  v5 = sub_10021BD08((_BYTE *)&v8 + v3, v4);
  result = sub_10000E38C(v5, v6);
  *(_DWORD *)a2 = result;
  *(_WORD *)(a2 + 4) = WORD2(result);
  *(_BYTE *)(a2 + 6) = BYTE6(result) & 1;
  return result;
}

uint64_t sub_100051E08(unint64_t a1, _QWORD *(*a2)(uint64_t *__return_ptr, _QWORD *))
{
  _QWORD *v2;
  char v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t KeyPath;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  __int128 v26;
  _BYTE v27[16];
  __int128 *v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  int8x16x4_t v33;

  v4 = a1;
  v5 = a1 >> 8;
  v22 = a1 >> 16;
  v23 = a1 >> 24;
  v24 = HIDWORD(a1);
  v25 = a1 >> 40;
  v31 = 0u;
  v32 = 0u;
  v6 = v2[2];
  v7 = v2[3];
  KeyPath = swift_getKeyPath(&unk_10033A970);
  v28 = &v31;
  v29 = KeyPath;
  v30 = 16;
  swift_bridgeObjectRetain(v7);
  sub_100047824(a2, (uint64_t)v27, v6, v7);
  swift_bridgeObjectRelease(v7);
  swift_release(KeyPath);
  v26 = v32;
  v9 = sub_100012C44(&qword_100403E88);
  v10 = swift_allocObject(v9, 38, 7);
  *(_OWORD *)(v10 + 16) = xmmword_10033B190;
  *(_BYTE *)(v10 + 32) = v4;
  *(_BYTE *)(v10 + 33) = v5;
  *(_BYTE *)(v10 + 34) = v22;
  *(_BYTE *)(v10 + 35) = v23;
  *(_BYTE *)(v10 + 36) = v24;
  *(_BYTE *)(v10 + 37) = v25;
  v11 = sub_1001068EC(v10);
  v13 = v12;
  swift_bridgeObjectRelease(v10);
  sub_10005248C(v11, v13, (uint64_t)&v26 + 2);
  sub_10000E614(v11, v13);
  v33.val[0].i64[1] = *((_QWORD *)&v26 + 1);
  BYTE1(v32) = BYTE1(v26);
  v33.val[1] = (int8x16_t)vdupq_laneq_s64((int64x2_t)v26, 1);
  HIWORD(v32) = HIWORD(v26);
  LOBYTE(v32) = 6;
  LODWORD(v14) = *(_DWORD *)((char *)&v26 + 2);
  WORD2(v14) = WORD3(v26);
  BYTE6(v14) = v33.val[1].i8[0];
  HIBYTE(v14) = BYTE9(v26);
  *(_QWORD *)((char *)&v32 + 2) = v14;
  v33.val[3].i64[0] = *((_QWORD *)&v26 + 1) >> 40;
  v33.val[2].i64[0] = HIDWORD(*((_QWORD *)&v26 + 1));
  v33.val[1].i64[0] = *((_QWORD *)&v26 + 1) >> 24;
  v33.val[0].i64[0] = *((_QWORD *)&v26 + 1) >> 16;
  v33.val[0] = vqtbl4q_s8(v33, (int8x16_t)xmmword_10033B1A0);
  *(_DWORD *)((char *)&v32 + 10) = vmovn_s16((int16x8_t)v33.val[0]).u32[0];
  v15 = *((_QWORD *)&v32 + 1);
  v16 = HIWORD(*((_QWORD *)&v32 + 1));
  v17 = HIBYTE(*((_QWORD *)&v32 + 1));
  v18 = v32 >> 48;
  v19 = v32 >> 40;
  BYTE1(v32) = 18;
  v33.val[0].i16[0] = WORD1(v32);
  v33.val[0].i8[2] = BYTE4(v32);
  v33.val[0].i8[3] = v19;
  v33.val[0].i8[4] = v18;
  *(__int16 *)((char *)&v33.val[0].i16[2] + 1) = *(_WORD *)((char *)&v32 + 7);
  v33.val[0].i8[7] = BYTE9(v32);
  *(_QWORD *)((char *)&v32 + 2) = v33.val[0].i64[0];
  v33.val[3].i64[0] = v15 >> 40;
  v33.val[2].i64[0] = HIDWORD(v15);
  v33.val[1].i64[0] = v15 >> 24;
  v33.val[0].i64[0] = v15 >> 16;
  *(_DWORD *)((char *)&v32 + 10) = vmovn_s16((int16x8_t)vqtbl4q_s8(v33, (int8x16_t)xmmword_10033B1A0)).u32[0];
  BYTE14(v32) = v16;
  HIBYTE(v32) = v17;
  v20 = v2[5];
  swift_retain();
  AppleDevice.send(request:data:)(2u, (uint64_t)&v31);
  return swift_release(v20);
}

uint64_t DeviceDriver<>.update(macAddress:)(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  char v8;
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t KeyPath;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  _BYTE v37[16];
  __int128 *v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  int8x16x4_t v43;

  v35 = a5;
  v33 = a3;
  v8 = a1;
  v26 = a1 >> 8;
  v27 = a1 >> 16;
  v28 = a1 >> 24;
  v29 = HIDWORD(a1);
  v30 = a1 >> 40;
  v32 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a3, a2, &protocol requirements base descriptor for DeviceDriver);
  v34 = *(_QWORD *)(AssociatedTypeWitness - 8);
  __chkstk_darwin();
  v11 = (char *)&v26 - v10;
  v41 = 0u;
  v42 = 0u;
  v12 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 40))(a2, a4);
  v14 = v13;
  KeyPath = swift_getKeyPath(&unk_10033A970);
  v38 = &v41;
  v39 = KeyPath;
  v40 = 16;
  sub_100047824((_QWORD *(*)(uint64_t *__return_ptr, _QWORD *))sub_10000642C, (uint64_t)v37, v12, v14);
  v31 = v5;
  swift_bridgeObjectRelease(v14);
  swift_release(KeyPath);
  v36 = v42;
  v16 = sub_100012C44(&qword_100403E88);
  v17 = swift_allocObject(v16, 38, 7);
  *(_OWORD *)(v17 + 16) = xmmword_10033B190;
  *(_BYTE *)(v17 + 32) = v8;
  *(_BYTE *)(v17 + 33) = v26;
  *(_BYTE *)(v17 + 34) = v27;
  *(_BYTE *)(v17 + 35) = v28;
  *(_BYTE *)(v17 + 36) = v29;
  *(_BYTE *)(v17 + 37) = v30;
  v18 = sub_1001068EC(v17);
  v20 = v19;
  swift_bridgeObjectRelease(v17);
  sub_10005248C(v18, v20, (uint64_t)&v36 + 2);
  sub_10000E614(v18, v20);
  v43.val[0].i64[1] = *((_QWORD *)&v36 + 1);
  BYTE1(v42) = BYTE1(v36);
  v43.val[1] = (int8x16_t)vdupq_laneq_s64((int64x2_t)v36, 1);
  HIWORD(v42) = HIWORD(v36);
  LOBYTE(v42) = 6;
  LODWORD(v21) = *(_DWORD *)((char *)&v36 + 2);
  WORD2(v21) = WORD3(v36);
  BYTE6(v21) = v43.val[1].i8[0];
  HIBYTE(v21) = BYTE9(v36);
  *(_QWORD *)((char *)&v42 + 2) = v21;
  v43.val[3].i64[0] = *((_QWORD *)&v36 + 1) >> 40;
  v43.val[2].i64[0] = HIDWORD(*((_QWORD *)&v36 + 1));
  v43.val[1].i64[0] = *((_QWORD *)&v36 + 1) >> 24;
  v43.val[0].i64[0] = *((_QWORD *)&v36 + 1) >> 16;
  v43.val[0] = vqtbl4q_s8(v43, (int8x16_t)xmmword_10033B1A0);
  *(_DWORD *)((char *)&v42 + 10) = vmovn_s16((int16x8_t)v43.val[0]).u32[0];
  v22 = v42 >> 48;
  v23 = v42 >> 40;
  v24 = v42;
  BYTE1(v42) = 18;
  v43.val[0].i16[0] = WORD1(v24);
  v43.val[0].i8[2] = BYTE4(v24);
  v43.val[0].i8[3] = v23;
  v43.val[0].i8[4] = v22;
  v43.val[0].i8[5] = BYTE7(v24);
  v43.val[0].i16[3] = WORD4(v42);
  *(_QWORD *)((char *)&v42 + 2) = v43.val[0].i64[0];
  v43.val[3].i64[0] = *((_QWORD *)&v24 + 1) >> 40;
  v43.val[2].i64[0] = HIDWORD(*((_QWORD *)&v24 + 1));
  v43.val[1].i64[0] = *((_QWORD *)&v24 + 1) >> 24;
  v43.val[0].i64[0] = *((_QWORD *)&v24 + 1) >> 16;
  *(_DWORD *)((char *)&v42 + 10) = vmovn_s16((int16x8_t)vqtbl4q_s8(v43, (int8x16_t)xmmword_10033B1A0)).u32[0];
  HIWORD(v42) = HIWORD(v24);
  (*(void (**)(uint64_t))(v33 + 56))(v32);
  (*(void (**)(uint64_t, __int128 *, uint64_t))(v35 + 16))(2, &v41, AssociatedTypeWitness);
  return (*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v11, AssociatedTypeWitness);
}

void sub_10005248C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
    __asm { BR              X10 }
}

unint64_t DeviceDriver<>.ipv4Address.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v8;
  unsigned __int8 v9;

  swift_getAssociatedTypeWitness(0, a2, a1, &protocol requirements base descriptor for DeviceDriver);
  (*(void (**)(uint64_t, uint64_t))(a3 + 40))(a1, a3);
  v6 = v5;
  static ApplePlatform.withInterface<A>(_:matchingFamily:_:)((uint64_t)&type metadata for IPv4Address, (uint64_t)&v8);
  swift_bridgeObjectRelease(v6);
  return v8 | ((unint64_t)v9 << 32);
}

uint64_t sub_100052788@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  _BYTE v4[8];
  uint64_t v5;

  sub_100063EB8(a1 + 24, (uint64_t)v4, &qword_100405BA0);
  result = sub_100063EB8((uint64_t)v4, (uint64_t)&v5, &qword_100405BA0);
  if (v5)
  {
    *(_DWORD *)a2 = *(_DWORD *)(v5 + 4);
    *(_BYTE *)(a2 + 4) = 0;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000527FC(uint64_t a1, _QWORD *(*a2)(uint64_t *__return_ptr, _QWORD *))
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t KeyPath;
  unsigned int v8;
  uint64_t v9;
  _QWORD v11[6];
  __int128 v12;
  __int128 v13;

  v12 = 0u;
  v13 = 0u;
  v5 = v2[2];
  v6 = v2[3];
  KeyPath = swift_getKeyPath(&unk_10033A970);
  v11[2] = &v12;
  v11[3] = KeyPath;
  v11[4] = 16;
  swift_bridgeObjectRetain(v6);
  sub_100047824(a2, (uint64_t)v11, v5, v6);
  swift_bridgeObjectRelease(v6);
  swift_release(KeyPath);
  if ((a1 & 0x100000000) != 0)
  {
    v8 = 4;
  }
  else
  {
    LODWORD(v13) = 528;
    WORD2(v13) = a1;
    BYTE6(v13) = BYTE2(a1);
    BYTE7(v13) = BYTE3(a1);
    *((_QWORD *)&v13 + 1) = 0;
    v8 = 3;
  }
  v9 = v2[5];
  swift_retain();
  AppleDevice.send(request:data:)(v8, (uint64_t)&v12);
  return swift_release(v9);
}

uint64_t DeviceDriver<>.update(ipv4Address:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t KeyPath;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v21[16];
  __int128 *v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;

  v20 = a5;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a3, a2, &protocol requirements base descriptor for DeviceDriver);
  v19 = *(_QWORD *)(AssociatedTypeWitness - 8);
  __chkstk_darwin();
  v11 = (char *)&v18 - v10;
  v25 = 0u;
  v26 = 0u;
  v12 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 40))(a2, a4);
  v14 = v13;
  KeyPath = swift_getKeyPath(&unk_10033A970);
  v22 = &v25;
  v23 = KeyPath;
  v24 = 16;
  sub_100047824((_QWORD *(*)(uint64_t *__return_ptr, _QWORD *))sub_10000642C, (uint64_t)v21, v12, v14);
  swift_bridgeObjectRelease(v14);
  swift_release(KeyPath);
  if ((a1 & 0x100000000) != 0)
  {
    v16 = 4;
  }
  else
  {
    LODWORD(v26) = 528;
    WORD2(v26) = a1;
    BYTE6(v26) = BYTE2(a1);
    BYTE7(v26) = BYTE3(a1);
    *((_QWORD *)&v26 + 1) = 0;
    v16 = 3;
  }
  (*(void (**)(uint64_t, uint64_t))(a3 + 56))(a2, a3);
  (*(void (**)(uint64_t, __int128 *, uint64_t))(v20 + 16))(v16, &v25, AssociatedTypeWitness);
  return (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v11, AssociatedTypeWitness);
}

uint64_t DeviceDriver<>.ipv6Addresses.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a2, a1, &protocol requirements base descriptor for DeviceDriver);
  v6 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 40))(a1, a3);
  v8 = v7;
  v9 = static ApplePlatform.withInterface<A>(_:matchingAllInFamily:_:)(v6, v7, 30, (uint64_t)sub_100052BAC, 0, AssociatedTypeWitness, (uint64_t)&type metadata for IPv6Address);
  swift_bridgeObjectRelease(v8);
  return v9;
}

uint64_t sub_100052BAC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;
  _BYTE v5[8];
  uint64_t v6;

  sub_100063EB8(a1 + 24, (uint64_t)v5, &qword_100405BA0);
  result = sub_100063EB8((uint64_t)v5, (uint64_t)&v6, &qword_100405BA0);
  if (v6)
  {
    v4 = *(_QWORD *)(v6 + 16);
    *a2 = *(_QWORD *)(v6 + 8);
    a2[1] = v4;
    a2[2] = 0;
    a2[3] = 0;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100052C20(unint64_t a1, unsigned int a2, _QWORD *(*a3)(uint64_t *__return_ptr, _QWORD *))
{
  _QWORD *v3;
  char v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t KeyPath;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  __int128 v22;
  _BYTE v23[16];
  __int128 *v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;

  v5 = a1;
  v6 = a1 >> 8;
  v7 = a1 >> 16;
  v18 = a1 >> 24;
  v19 = HIDWORD(a1);
  v20 = a1 >> 40;
  v27 = 0u;
  v28 = 0u;
  v8 = v3[2];
  v9 = v3[3];
  KeyPath = swift_getKeyPath(&unk_10033A970);
  v24 = &v27;
  v25 = KeyPath;
  v26 = 16;
  swift_bridgeObjectRetain(v9);
  sub_100047824(a3, (uint64_t)v23, v8, v9);
  swift_bridgeObjectRelease(v9);
  swift_release(KeyPath);
  WORD1(v22) = WORD1(v28);
  BYTE5(v22) = BYTE5(v28);
  *(_QWORD *)((char *)&v22 + 7) = *(_QWORD *)((char *)&v28 + 7);
  HIBYTE(v22) = HIBYTE(v28);
  LOWORD(v22) = 4628;
  BYTE4(v22) = 6;
  BYTE6(v22) = 6;
  v11 = sub_100012C44(&qword_100403E88);
  v12 = swift_allocObject(v11, 38, 7);
  *(_OWORD *)(v12 + 16) = xmmword_10033B190;
  *(_BYTE *)(v12 + 32) = v5;
  *(_BYTE *)(v12 + 33) = v6;
  *(_BYTE *)(v12 + 34) = v7;
  *(_BYTE *)(v12 + 35) = v18;
  *(_BYTE *)(v12 + 36) = v19;
  *(_BYTE *)(v12 + 37) = v20;
  v13 = sub_1001068EC(v12);
  v15 = v14;
  swift_bridgeObjectRelease(v12);
  sub_10005248C(v13, v15, (uint64_t)&v22 + 8);
  sub_10000E614(v13, v15);
  v28 = v22;
  v16 = v3[5];
  swift_retain();
  AppleDevice.send(request:data:)(a2, (uint64_t)&v27);
  return swift_release(v16);
}

uint64_t sub_100052E50(unint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  char v10;
  uint64_t AssociatedTypeWitness;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t KeyPath;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  __int128 v36;
  char v37[16];
  __int128 *v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;

  v34 = a6;
  v35 = a2;
  v10 = a1;
  v27 = a1 >> 8;
  v28 = a1 >> 16;
  v29 = a1 >> 24;
  v30 = HIDWORD(a1);
  v31 = a1 >> 40;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a4, a3, &protocol requirements base descriptor for DeviceDriver);
  v12 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v32 = AssociatedTypeWitness;
  v33 = v12;
  __chkstk_darwin();
  v14 = (char *)&v26 - v13;
  v41 = 0u;
  v42 = 0u;
  v15 = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 40))(a3, a5);
  v17 = v16;
  KeyPath = swift_getKeyPath(&unk_10033A970);
  v38 = &v41;
  v39 = KeyPath;
  v40 = 16;
  sub_100047824((_QWORD *(*)(uint64_t *__return_ptr, _QWORD *))sub_10000642C, (uint64_t)v37, v15, v17);
  v26 = v6;
  swift_bridgeObjectRelease(v17);
  swift_release(KeyPath);
  WORD1(v36) = WORD1(v42);
  BYTE5(v36) = BYTE5(v42);
  *(_QWORD *)((char *)&v36 + 7) = *(_QWORD *)((char *)&v42 + 7);
  HIBYTE(v36) = HIBYTE(v42);
  LOWORD(v36) = 4628;
  BYTE4(v36) = 6;
  BYTE6(v36) = 6;
  v19 = sub_100012C44(&qword_100403E88);
  v20 = swift_allocObject(v19, 38, 7);
  *(_OWORD *)(v20 + 16) = xmmword_10033B190;
  *(_BYTE *)(v20 + 32) = v10;
  *(_BYTE *)(v20 + 33) = v27;
  *(_BYTE *)(v20 + 34) = v28;
  *(_BYTE *)(v20 + 35) = v29;
  *(_BYTE *)(v20 + 36) = v30;
  *(_BYTE *)(v20 + 37) = v31;
  v21 = sub_1001068EC(v20);
  v23 = v22;
  swift_bridgeObjectRelease(v20);
  v24 = v32;
  sub_10005248C(v21, v23, (uint64_t)&v36 + 8);
  sub_10000E614(v21, v23);
  v42 = v36;
  (*(void (**)(uint64_t, uint64_t))(a4 + 56))(a3, a4);
  (*(void (**)(_QWORD, __int128 *, uint64_t))(v34 + 16))(v35, &v41, v24);
  return (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v14, v24);
}

uint64_t DeviceDriver<>.addMulticastAddress(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_100053158(a1, a2, a3, a4, a5, 7u);
}

uint64_t DeviceDriver<>.removeMulticastAddress(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_100053158(a1, a2, a3, a4, a5, 8u);
}

uint64_t sub_100053158(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6)
{
  return sub_100052E50(a1 & 0xFFFFFFFFFFFFLL, a6, a2, a3, a4, a5);
}

uint64_t DeviceDriver<>.postPeerPresence(macAddress:ipv6Address:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_1000531E0(a1, a2, a3, a4, a5, a6, a7, a8, a9, 1u);
}

uint64_t DeviceDriver<>.postPeerAbsence(macAddress:ipv6Address:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_1000531E0(a1, a2, a3, a4, a5, a6, a7, a8, a9, 2u);
}

uint64_t sub_1000531E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned int a10)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;

  v26 = a4;
  v27 = a5;
  v23 = a2;
  v24 = a3;
  v25 = a10;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a7, a6, &protocol requirements base descriptor for DeviceDriver, &associated type descriptor for DeviceDriver.Device);
  v15 = *(_QWORD *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  v17 = (char *)&v22 - v16;
  (*(void (**)(uint64_t, uint64_t))(a7 + 56))(a6, a7);
  v18 = (*(uint64_t (**)(uint64_t, uint64_t))(a8 + 40))(a6, a8);
  v20 = v19;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))(a9 + 24))(a1 & 0xFFFFFFFFFFFFLL, v23, v24, v26, v27, v18, v19, v25, AssociatedTypeWitness, a9);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, AssociatedTypeWitness);
  return swift_bridgeObjectRelease(v20);
}

uint64_t DeviceDriver<>.clearAllPeerPresence()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a2, a1, &protocol requirements base descriptor for DeviceDriver, &associated type descriptor for DeviceDriver.Device);
  v9 = *(_QWORD *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  v11 = (char *)&v16 - v10;
  (*(void (**)(uint64_t, uint64_t))(a2 + 56))(a1, a2);
  v12 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 40))(a1, a3);
  v14 = v13;
  (*(void (**)(uint64_t))(a4 + 32))(v12);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, AssociatedTypeWitness);
  return swift_bridgeObjectRelease(v14);
}

uint64_t sub_100053404(_QWORD *a1, _QWORD *(*a2)(uint64_t *__return_ptr, _QWORD *), _QWORD *(*a3)(uint64_t *__return_ptr, _QWORD *))
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t KeyPath;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE v35[16];
  __int128 *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *(*v40)(uint64_t *__return_ptr, _QWORD *);
  _QWORD *v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  _BYTE v51[296];

  v6 = v3;
  v8 = type metadata accessor for Socket();
  swift_initStackObject(v8, &v42);
  v9 = Socket.init(domain:type:proto:)(30, 2, 0);
  if (!v9)
  {
    v26 = errno.getter(0, v10);
    v27 = sub_100012C84();
    v28 = swift_allocError(&type metadata for WiFiError, v27, 0, 0);
    *(_QWORD *)v29 = v26;
    *(_QWORD *)(v29 + 8) = 0;
    *(_BYTE *)(v29 + 16) = 0;
    return swift_willThrow(v28);
  }
  v11 = v9;
  v40 = a3;
  v41 = a1;
  memset(v51, 0, 288);
  v13 = *(_QWORD *)(v6 + 16);
  v12 = *(_QWORD *)(v6 + 24);
  KeyPath = swift_getKeyPath(&unk_10033A990);
  v36 = (__int128 *)v51;
  v37 = __chkstk_darwin();
  v38 = 16;
  swift_bridgeObjectRetain(v12);
  v39 = v13;
  sub_100047824(a2, (uint64_t)v35, v13, v12);
  swift_bridgeObjectRelease(v12);
  swift_release(KeyPath);
  v15 = *((unsigned int *)v11 + 4);
  v16 = sub_10033428C(6u);
  v17 = ioctl(_:_:_:)(v15, v16, v51);
  if ((_DWORD)v17 == -1)
    goto LABEL_9;
  if ((_DWORD)v17)
  {
LABEL_10:
    v31 = v17;
    v32 = sub_100012C84();
    v33 = swift_allocError(&type metadata for WiFiError, v32, 0, 0);
    *(_QWORD *)v34 = v31;
    *(_QWORD *)(v34 + 8) = 0;
    *(_BYTE *)(v34 + 16) = 0;
    swift_willThrow(v33);
    return swift_release(v11);
  }
  if (!v41[2])
    return swift_release(v11);
  v19 = v41[4];
  v20 = v41[5];
  v21 = v41[7];
  v50 = 0u;
  v48 = 0u;
  v49 = 0u;
  v46 = 0u;
  v47 = 0u;
  v44 = 0u;
  v45 = 0u;
  v43 = 0u;
  v22 = swift_getKeyPath(&unk_10033A9B0);
  v23 = __chkstk_darwin();
  v36 = &v43;
  v37 = v23;
  v38 = 16;
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRetain(v12);
  sub_100047824(v40, (uint64_t)v35, v39, v12);
  swift_bridgeObjectRelease(v21);
  swift_bridgeObjectRelease(v12);
  swift_release(v22);
  LOWORD(v44) = 7708;
  *((_QWORD *)&v44 + 1) = v19;
  *(_QWORD *)&v45 = v20;
  v24 = *((unsigned int *)v11 + 4);
  v25 = sub_10033428C(5u);
  v17 = ioctl(_:_:_:)(v24, v25, &v43);
  if ((_DWORD)v17 == -1)
  {
LABEL_9:
    LODWORD(v17) = errno.getter(v17, v18);
    goto LABEL_10;
  }
  if ((_DWORD)v17)
    goto LABEL_10;
  return swift_release(v11);
}

uint64_t DeviceDriver<>.update(ipv6Addresses:)(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t KeyPath;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE v39[16];
  __int128 *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t (*v44)(uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  _BYTE v57[296];

  v8 = type metadata accessor for Socket();
  swift_initStackObject(v8, &v48);
  v9 = Socket.init(domain:type:proto:)(30, 2, 0);
  if (!v9)
  {
    v30 = errno.getter(0, v10);
    v31 = sub_100012C84();
    v32 = swift_allocError(&type metadata for WiFiError, v31, 0, 0);
    *(_QWORD *)v33 = v30;
    *(_QWORD *)(v33 + 8) = 0;
    *(_BYTE *)(v33 + 16) = 0;
    return swift_willThrow(v32);
  }
  v11 = v9;
  v47 = a1;
  memset(v57, 0, 288);
  v12 = *(uint64_t (**)(uint64_t, uint64_t))(a4 + 40);
  v45 = a2;
  v46 = v4;
  v44 = v12;
  v13 = v12(a2, a4);
  v15 = v14;
  KeyPath = swift_getKeyPath(&unk_10033A990);
  v40 = (__int128 *)v57;
  v41 = __chkstk_darwin();
  v42 = 16;
  sub_100047824((_QWORD *(*)(uint64_t *__return_ptr, _QWORD *))sub_10000642C, (uint64_t)v39, v13, v15);
  swift_bridgeObjectRelease(v15);
  swift_release(KeyPath);
  v17 = *((unsigned int *)v11 + 4);
  v18 = sub_10033428C(6u);
  v19 = ioctl(_:_:_:)(v17, v18, v57);
  if ((_DWORD)v19 == -1)
    goto LABEL_9;
  if ((_DWORD)v19)
  {
LABEL_10:
    v35 = v19;
    v36 = sub_100012C84();
    v37 = swift_allocError(&type metadata for WiFiError, v36, 0, 0);
    *(_QWORD *)v38 = v35;
    *(_QWORD *)(v38 + 8) = 0;
    *(_BYTE *)(v38 + 16) = 0;
    swift_willThrow(v37);
    return swift_release(v11);
  }
  if (!v47[2])
    return swift_release(v11);
  v21 = v47[5];
  v43 = v47[4];
  v22 = v47[7];
  v56 = 0u;
  v54 = 0u;
  v55 = 0u;
  v52 = 0u;
  v53 = 0u;
  v50 = 0u;
  v51 = 0u;
  v49 = 0u;
  swift_bridgeObjectRetain(v22);
  v23 = v44(v45, a4);
  v25 = v24;
  v26 = swift_getKeyPath(&unk_10033A9B0);
  v27 = __chkstk_darwin();
  v40 = &v49;
  v41 = v27;
  v42 = 16;
  sub_100047824((_QWORD *(*)(uint64_t *__return_ptr, _QWORD *))sub_10000642C, (uint64_t)v39, v23, v25);
  swift_bridgeObjectRelease(v22);
  swift_bridgeObjectRelease(v25);
  swift_release(v26);
  LOWORD(v50) = 7708;
  *((_QWORD *)&v50 + 1) = v43;
  *(_QWORD *)&v51 = v21;
  v28 = *((unsigned int *)v11 + 4);
  v29 = sub_10033428C(5u);
  v19 = ioctl(_:_:_:)(v28, v29, &v49);
  if ((_DWORD)v19 == -1)
  {
LABEL_9:
    LODWORD(v19) = errno.getter(v19, v20);
    goto LABEL_10;
  }
  if ((_DWORD)v19)
    goto LABEL_10;
  return swift_release(v11);
}

BOOL sub_100053A14()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BOOL8 result;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  int v8;
  BOOL v9;
  uint64_t v10;
  _QWORD v11[2];
  uint64_t v12;

  v10 = 0;
  v11[0] = 0;
  v11[1] = 0;
  v1 = v0[5];
  v2 = v0[2];
  v3 = v0[3];
  swift_retain();
  swift_bridgeObjectRetain(v3);
  AppleDevice.getRequest(requestType:data:on:)(0x13uLL, (uint64_t)&v10, (uint64_t)&v12, 0, v2, v3);
  swift_bridgeObjectRelease(v3);
  swift_release(v1);
  if (HIDWORD(v10) >= 4)
    v5 = 4;
  else
    v5 = HIDWORD(v10);
  if (!(_DWORD)v5)
    return 0;
  if (LODWORD(v11[0]))
    return 1;
  if ((_DWORD)v5 == 1)
    return 0;
  v6 = v5 - 2;
  v7 = (int *)v11 + 1;
  do
  {
    v8 = *v7++;
    result = v8 != 0;
    if (v8)
      v9 = 1;
    else
      v9 = v6 == 0;
    --v6;
  }
  while (!v9);
  return result;
}

BOOL DeviceDriver<>.powerOn.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  int v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[2];
  uint64_t v14;

  v12 = 0;
  v13[0] = 0;
  v13[1] = 0;
  sub_10005431C((uint64_t)&v12, (uint64_t)&v14, v4, a1, a2, a3, a4, &v11, 19);
  if (HIDWORD(v12) >= 4)
    v6 = 4;
  else
    v6 = HIDWORD(v12);
  if (!(_DWORD)v6)
    return 0;
  if (LODWORD(v13[0]))
    return 1;
  if ((_DWORD)v6 == 1)
    return 0;
  v7 = v6 - 2;
  v8 = (int *)v13 + 1;
  do
  {
    v9 = *v8++;
    result = v9 != 0;
    if (v9)
      v10 = 1;
    else
      v10 = v7 == 0;
    --v7;
  }
  while (!v10);
  return result;
}

uint64_t sub_100053C24()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  __int16 v15;
  __int16 v16;

  v1 = v0;
  v15 = 0;
  v14 = 0;
  v2 = v0[5];
  v4 = v1[2];
  v3 = v1[3];
  swift_retain();
  swift_bridgeObjectRetain(v3);
  AppleDevice.getRequest(requestType:data:on:)(9uLL, (uint64_t)&v14, (uint64_t)&v16, 0, v4, v3);
  swift_bridgeObjectRelease(v3);
  swift_release(v2);
  __chkstk_darwin();
  v6 = sub_100053FDC(&v9, (uint64_t)&v10, v1);
  v8 = v7;
  v11 = 0;
  v12 = 0;
  swift_retain();
  swift_bridgeObjectRetain(v3);
  AppleDevice.getRequest(requestType:data:on:)(4uLL, (uint64_t)&v11, (uint64_t)&v13, 0, v4, v3);
  swift_bridgeObjectRelease(v3);
  swift_release(v2);
  if ((sub_1000B388C(v12, HIDWORD(v12)) & 0xFF00000000) == 0x300000000)
  {
    swift_bridgeObjectRelease(v8);
    return 0;
  }
  return v6;
}

uint64_t DeviceDriver<>.wifiNetwork.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13[4];
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  __int16 v19;
  __int16 v20;

  v5 = v4;
  v19 = 0;
  v18 = 0;
  sub_10005431C((uint64_t)&v18, (uint64_t)&v20, v4, a1, a2, a3, a4, &v15, v13[2]);
  __chkstk_darwin();
  sub_100054118(v13, (uint64_t)&v14, a1, a2, a3, a4, &v15);
  v11 = v15;
  v10 = v16;
  v15 = 0;
  v16 = 0;
  sub_10005431C((uint64_t)&v15, (uint64_t)&v17, v5, a1, a2, a3, a4, &v14, 4);
  if ((sub_1000B388C(v16, HIDWORD(v16)) & 0xFF00000000) == 0x300000000)
  {
    swift_bridgeObjectRelease(v10);
    return 0;
  }
  return v11;
}

uint64_t sub_100053FDC(void *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v4 = v3;
  type metadata accessor for String.Encoding(0);
  result = __chkstk_darwin();
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a1)
    goto LABEL_11;
  v11 = a2 - (_QWORD)a1;
  bzero(a1, a2 - (_QWORD)a1);
  v12 = a3[5];
  v13 = a3[2];
  v14 = a3[3];
  swift_retain();
  swift_bridgeObjectRetain(v14);
  AppleDevice.getRequest(requestType:data:on:)(1uLL, (uint64_t)a1, a2, 0, v13, v14);
  swift_bridgeObjectRelease(v14);
  result = swift_release(v12);
  if (v4)
    return result;
  v15 = v11 - 1;
  if (__OFSUB__(v11, 1))
  {
    __break(1u);
LABEL_10:
    __break(1u);
LABEL_11:
    __break(1u);
    return result;
  }
  if (v15 < 0 || v15 >= v11)
    goto LABEL_10;
  v16 = UnsafeMutableRawBufferPointer.subscript.setter(0);
  static String.Encoding.utf8.getter(v16);
  result = String.init(cString:encoding:)(a1, v10);
  if (!v17)
    return 0;
  return result;
}

uint64_t sub_100054118@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t *a7@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t AssociatedTypeWitness;
  uint64_t result;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t *v29;
  char *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v33 = a6;
  v31 = a7;
  v12 = type metadata accessor for String.Encoding(0);
  __chkstk_darwin(v12);
  v30 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a4, a3, &protocol requirements base descriptor for DeviceDriver, &associated type descriptor for DeviceDriver.Device);
  v32 = *(_QWORD *)(AssociatedTypeWitness - 8);
  result = __chkstk_darwin(AssociatedTypeWitness);
  v17 = (char *)&v30 - v16;
  if (!a1)
    goto LABEL_16;
  v18 = a2 - (_QWORD)a1;
  bzero(a1, a2 - (_QWORD)a1);
  (*(void (**)(uint64_t, uint64_t))(a4 + 56))(a3, a4);
  v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a5 + 16) + 40))(a3);
  v21 = v20;
  v22 = v34;
  (*(void (**)(uint64_t, void *, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 + 8) + 24))(1, a1, a2, 0, v19, v20, AssociatedTypeWitness);
  if (v22)
  {
    (*(void (**)(char *, uint64_t))(v32 + 8))(v17, AssociatedTypeWitness);
    return swift_bridgeObjectRelease(v21);
  }
  (*(void (**)(char *, uint64_t))(v32 + 8))(v17, AssociatedTypeWitness);
  result = swift_bridgeObjectRelease(v21);
  v23 = v18 - 1;
  if (__OFSUB__(v18, 1))
  {
    __break(1u);
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
    return result;
  }
  if (v23 < 0 || v23 >= v18)
    goto LABEL_15;
  v24 = UnsafeMutableRawBufferPointer.subscript.setter(0);
  v25 = v30;
  static String.Encoding.utf8.getter(v24);
  result = String.init(cString:encoding:)(a1, v25);
  if (v26)
    v27 = result;
  else
    v27 = 0;
  v28 = 0xE000000000000000;
  if (v26)
    v28 = v26;
  v29 = v31;
  *v31 = v27;
  v29[1] = v28;
  return result;
}

uint64_t sub_10005431C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, _QWORD *a8, uint64_t a9)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v23 = a8;
  v24 = a7;
  v25 = a2;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a5, a4, &protocol requirements base descriptor for DeviceDriver, &associated type descriptor for DeviceDriver.Device);
  v14 = *(_QWORD *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness);
  v16 = (char *)&v22 - v15;
  (*(void (**)(uint64_t, uint64_t))(a5 + 56))(a4, a5);
  v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a6 + 16) + 40))(a4);
  v19 = v18;
  v20 = v26;
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 + 8) + 24))(a9, a1, v25, 0, v17, v18, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, AssociatedTypeWitness);
  result = swift_bridgeObjectRelease(v19);
  if (v20)
    *v23 = v20;
  return result;
}

uint64_t DeviceDriver<>.disassociate(with:)(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100056148(a1, a2, a3, a4, (uint64_t)&unk_1003DD6A8, (uint64_t)sub_10005FEB0, (uint64_t)&unk_1003DD6C0);
}

uint64_t DeviceDriver<>.disableAutoJoin()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000548E4(a1, a2, a3, (uint64_t)sub_10005FED4, (uint64_t)&unk_1003DD6E8);
}

void sub_1000544A0(uint64_t a1)
{
  id v2;
  void *v3;
  unsigned int v4;
  id v5;
  void *v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  _QWORD *v15;
  void *v16;
  uint64_t v17;
  id v18;
  uint64_t v19;

  if (!*(_QWORD *)(a1 + 104))
  {
    v2 = objc_msgSend((id)objc_opt_self(CWFActivity), "activityWithType:reason:", 6, 0);
    v3 = *(void **)(a1 + 48);
    v18 = 0;
    v4 = objc_msgSend(v3, "beginActivity:error:", v2, &v18);
    v5 = v18;
    if (v4)
    {
      v6 = *(void **)(a1 + 104);
      *(_QWORD *)(a1 + 104) = v2;
      v7 = v5;

    }
    else
    {
      v8 = v18;
      v9 = _convertNSErrorToError(_:)(v5);

      swift_willThrow(v10);
      swift_errorRetain(v9);
      v11 = swift_errorRetain(v9);
      v12 = Logger.logObject.getter(v11);
      v13 = static os_log_type_t.error.getter(v12);
      if (os_log_type_enabled(v12, v13))
      {
        v14 = (uint8_t *)swift_slowAlloc(12, -1);
        v15 = (_QWORD *)swift_slowAlloc(8, -1);
        *(_DWORD *)v14 = 138412290;
        swift_errorRetain(v9);
        v16 = (void *)_swift_stdlib_bridgeErrorToNSError(v9);
        v18 = v16;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19);
        *v15 = v16;
        swift_errorRelease(v9);
        swift_errorRelease(v9);
        _os_log_impl((void *)&_mh_execute_header, v12, v13, "Failed to disable auto join: %@", v14, 0xCu);
        v17 = sub_100012C44(&qword_100404BB0);
        swift_arrayDestroy(v15, 1, v17);
        swift_slowDealloc(v15, -1, -1);
        swift_slowDealloc(v14, -1, -1);

        swift_errorRelease(v9);
      }
      else
      {

        swift_errorRelease(v9);
        swift_errorRelease(v9);
        swift_errorRelease(v9);
      }
    }
  }
}

uint64_t sub_1000546E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD aBlock[5];
  uint64_t v24;

  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v21 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin();
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for DispatchQoS(0);
  v8 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin();
  v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(v2 + 40);
  v12 = *(void **)(v11 + 56);
  aBlock[4] = a1;
  v24 = v11;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100006F0C;
  aBlock[3] = a2;
  v13 = _Block_copy(aBlock);
  swift_retain_n(v11, 2);
  v14 = v12;
  static DispatchQoS.unspecified.getter(v14);
  v22 = _swiftEmptyArrayStorage;
  v15 = sub_100011DE4((unint64_t *)&qword_100408710, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v16 = sub_100012C44((uint64_t *)&unk_100405070);
  v17 = sub_100011770((unint64_t *)&qword_100408720, (uint64_t *)&unk_100405070, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v22, v16, v17, v5, v15);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v10, v7, v13);
  _Block_release(v13);
  swift_release(v11);

  (*(void (**)(char *, uint64_t))(v21 + 8))(v7, v5);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v20);
  return swift_release(v24);
}

uint64_t DeviceDriver<>.reenableAutoJoin()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000548E4(a1, a2, a3, (uint64_t)sub_10005FEDC, (uint64_t)&unk_1003DD710);
}

uint64_t sub_1000548E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  void (*v14)(uint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t v15;
  id v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD aBlock[5];
  uint64_t v30;
  uint64_t v31;

  v24 = a5;
  v8 = type metadata accessor for DispatchWorkItemFlags(0);
  v27 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin();
  v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS(0);
  v25 = *(_QWORD *)(v11 - 8);
  v26 = v11;
  __chkstk_darwin();
  v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a2 + 56);
  v14(&v31, a1, a2);
  v15 = v31;
  v16 = *(id *)(v31 + 56);
  swift_release(v15);
  v14(aBlock, a1, a2);
  v17 = aBlock[0];
  aBlock[4] = a4;
  v30 = aBlock[0];
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100006F0C;
  aBlock[3] = v24;
  v18 = _Block_copy(aBlock);
  v19 = swift_retain();
  static DispatchQoS.unspecified.getter(v19);
  v28 = _swiftEmptyArrayStorage;
  v20 = sub_100011DE4((unint64_t *)&qword_100408710, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v21 = sub_100012C44((uint64_t *)&unk_100405070);
  v22 = sub_100011770((unint64_t *)&qword_100408720, (uint64_t *)&unk_100405070, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v28, v21, v22, v8, v20);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v13, v10, v18);
  _Block_release(v18);
  swift_release(v17);

  (*(void (**)(char *, uint64_t))(v27 + 8))(v10, v8);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v13, v26);
  return swift_release(v30);
}

void sub_100054B00(uint64_t a1)
{
  void *v2;

  if (*(_QWORD *)(a1 + 104))
  {
    objc_msgSend(*(id *)(a1 + 48), "endActivity:");
    v2 = *(void **)(a1 + 104);
    *(_QWORD *)(a1 + 104) = 0;

  }
}

uint64_t sub_100054B48(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v4;
  unint64_t v5;
  uint64_t aBlock;

  type metadata accessor for DispatchWorkItemFlags(0);
  __chkstk_darwin();
  type metadata accessor for DispatchQoS(0);
  result = __chkstk_darwin();
  if (*(_QWORD *)(a2 + 16))
  {
    Hasher.init(_seed:)(&aBlock);
    String.hash(into:)(&aBlock, 0x617461446E616ELL, 0xE700000000000000);
    result = Hasher._finalize()();
    v4 = result & ~(-1 << *(_BYTE *)(a2 + 32));
    if (((*(_QWORD *)(a2 + 56 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
      __asm { BR              X9 }
    if (*(_QWORD *)(a2 + 16))
    {
      Hasher.init(_seed:)(&aBlock);
      String.hash(into:)(&aBlock, 0x7274736172666E69, 0xEE00657275746375);
      result = Hasher._finalize()();
      v5 = result & ~(-1 << *(_BYTE *)(a2 + 32));
      if (((*(_QWORD *)(a2 + 56 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
        __asm { BR              X9 }
    }
  }
  return result;
}

uint64_t DeviceDriver<>.updateLinkRecoveryDisabled(_:interfaces:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  unint64_t v4;
  unint64_t v5;
  uint64_t aBlock;

  type metadata accessor for DispatchWorkItemFlags(0);
  __chkstk_darwin();
  type metadata accessor for DispatchQoS(0);
  result = __chkstk_darwin();
  if (*(_QWORD *)(a2 + 16))
  {
    Hasher.init(_seed:)(&aBlock);
    String.hash(into:)(&aBlock, 0x617461446E616ELL, 0xE700000000000000);
    result = Hasher._finalize()();
    v4 = result & ~(-1 << *(_BYTE *)(a2 + 32));
    if (((*(_QWORD *)(a2 + 56 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
      __asm { BR              X9 }
    if (*(_QWORD *)(a2 + 16))
    {
      Hasher.init(_seed:)(&aBlock);
      String.hash(into:)(&aBlock, 0x7274736172666E69, 0xEE00657275746375);
      result = Hasher._finalize()();
      v5 = result & ~(-1 << *(_BYTE *)(a2 + 32));
      if (((*(_QWORD *)(a2 + 56 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
        __asm { BR              X9 }
    }
  }
  return result;
}

void sub_100055590(char a1, uint64_t a2)
{
  uint64_t v3;
  id v4;
  void *v5;
  unsigned int v6;
  id v7;
  void *v8;
  id v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  _QWORD *v18;
  void *v19;
  uint64_t v20;
  id v21;
  uint64_t v22;

  v3 = *(_QWORD *)(a2 + 136);
  if ((a1 & 1) != 0)
  {
    if (!v3)
    {
      v4 = objc_msgSend((id)objc_opt_self(CWFActivity), "activityWithType:reason:", 12, 0);
      v5 = *(void **)(a2 + 48);
      v21 = 0;
      v6 = objc_msgSend(v5, "beginActivity:error:", v4, &v21);
      v7 = v21;
      if (v6)
      {
        v8 = *(void **)(a2 + 136);
        *(_QWORD *)(a2 + 136) = v4;
        v9 = v7;

      }
      else
      {
        v11 = v21;
        v12 = _convertNSErrorToError(_:)(v7);

        swift_willThrow(v13);
        swift_errorRetain(v12);
        v14 = swift_errorRetain(v12);
        v15 = Logger.logObject.getter(v14);
        v16 = static os_log_type_t.error.getter(v15);
        if (os_log_type_enabled(v15, v16))
        {
          v17 = (uint8_t *)swift_slowAlloc(12, -1);
          v18 = (_QWORD *)swift_slowAlloc(8, -1);
          *(_DWORD *)v17 = 138412290;
          swift_errorRetain(v12);
          v19 = (void *)_swift_stdlib_bridgeErrorToNSError(v12);
          v21 = v19;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22);
          *v18 = v19;
          swift_errorRelease(v12);
          swift_errorRelease(v12);
          _os_log_impl((void *)&_mh_execute_header, v15, v16, "Failed to update link recovery disabled: %@", v17, 0xCu);
          v20 = sub_100012C44(&qword_100404BB0);
          swift_arrayDestroy(v18, 1, v20);
          swift_slowDealloc(v18, -1, -1);
          swift_slowDealloc(v17, -1, -1);

          swift_errorRelease(v12);
        }
        else
        {

          swift_errorRelease(v12);
          swift_errorRelease(v12);
          swift_errorRelease(v12);
        }
      }
    }
  }
  else if (v3)
  {
    objc_msgSend(*(id *)(a2 + 48), "endActivity:");
    v10 = *(void **)(a2 + 136);
    *(_QWORD *)(a2 + 136) = 0;

  }
}

uint64_t sub_100055830(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD aBlock[5];
  uint64_t v29;

  v9 = type metadata accessor for DispatchWorkItemFlags(0);
  v26 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin();
  v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = type metadata accessor for DispatchQoS(0);
  v12 = *(_QWORD *)(v25 - 8);
  __chkstk_darwin();
  v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(_QWORD *)(v4 + 40);
  v16 = *(void **)(v15 + 56);
  v17 = swift_allocObject(a2, 32, 7);
  *(_BYTE *)(v17 + 16) = a1;
  *(_QWORD *)(v17 + 24) = v15;
  aBlock[4] = a3;
  v29 = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100006F0C;
  aBlock[3] = a4;
  v18 = _Block_copy(aBlock);
  swift_retain_n(v15, 2);
  v19 = v16;
  static DispatchQoS.unspecified.getter(v19);
  v27 = _swiftEmptyArrayStorage;
  v20 = sub_100011DE4((unint64_t *)&qword_100408710, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v21 = sub_100012C44((uint64_t *)&unk_100405070);
  v22 = sub_100011770((unint64_t *)&qword_100408720, (uint64_t *)&unk_100405070, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v27, v21, v22, v9, v20);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v14, v11, v18);
  _Block_release(v18);
  swift_release(v15);

  (*(void (**)(char *, uint64_t))(v26 + 8))(v11, v9);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v25);
  return swift_release(v29);
}

uint64_t DeviceDriver<>.update(isAirPlayingOverInfrastructure:)(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void (*v12)(uint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD aBlock[5];
  uint64_t v29;
  uint64_t v30;

  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v26 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin();
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  v24 = *(_QWORD *)(v9 - 8);
  v25 = v9;
  __chkstk_darwin();
  v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a3 + 56);
  v12(&v30, a2, a3);
  v13 = v30;
  v14 = *(id *)(v30 + 56);
  swift_release(v13);
  v12(aBlock, a2, a3);
  v15 = aBlock[0];
  v16 = swift_allocObject(&unk_1003DD798, 32, 7);
  *(_BYTE *)(v16 + 16) = a1;
  *(_QWORD *)(v16 + 24) = v15;
  aBlock[4] = sub_10005FEF0;
  v29 = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100006F0C;
  aBlock[3] = &unk_1003DD7B0;
  v17 = _Block_copy(aBlock);
  v18 = swift_retain();
  static DispatchQoS.unspecified.getter(v18);
  v27 = _swiftEmptyArrayStorage;
  v19 = sub_100011DE4((unint64_t *)&qword_100408710, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v20 = sub_100012C44((uint64_t *)&unk_100405070);
  v21 = sub_100011770((unint64_t *)&qword_100408720, (uint64_t *)&unk_100405070, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v27, v20, v21, v6, v19);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v11, v8, v17);
  _Block_release(v17);
  swift_release(v15);

  (*(void (**)(char *, uint64_t))(v26 + 8))(v8, v6);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v11, v25);
  return swift_release(v29);
}

void sub_100055C74(char a1, uint64_t a2)
{
  uint64_t v3;
  NSString v4;
  id v5;
  void *v6;
  unsigned int v7;
  id v8;
  void *v9;
  id v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  _QWORD *v19;
  void *v20;
  uint64_t v21;
  id v22;
  uint64_t v23;

  v3 = *(_QWORD *)(a2 + 112);
  if ((a1 & 1) != 0)
  {
    if (!v3)
    {
      v4 = String._bridgeToObjectiveC()();
      v5 = objc_msgSend((id)objc_opt_self(CWFActivity), "activityWithType:reason:", 8, v4);

      v6 = *(void **)(a2 + 48);
      v22 = 0;
      v7 = objc_msgSend(v6, "beginActivity:error:", v5, &v22);
      v8 = v22;
      if (v7)
      {
        v9 = *(void **)(a2 + 112);
        *(_QWORD *)(a2 + 112) = v5;
        v10 = v8;

      }
      else
      {
        v12 = v22;
        v13 = _convertNSErrorToError(_:)(v8);

        swift_willThrow(v14);
        swift_errorRetain(v13);
        v15 = swift_errorRetain(v13);
        v16 = Logger.logObject.getter(v15);
        v17 = static os_log_type_t.error.getter(v16);
        if (os_log_type_enabled(v16, v17))
        {
          v18 = (uint8_t *)swift_slowAlloc(12, -1);
          v19 = (_QWORD *)swift_slowAlloc(8, -1);
          *(_DWORD *)v18 = 138412290;
          swift_errorRetain(v13);
          v20 = (void *)_swift_stdlib_bridgeErrorToNSError(v13);
          v22 = v20;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23);
          *v19 = v20;
          swift_errorRelease(v13);
          swift_errorRelease(v13);
          _os_log_impl((void *)&_mh_execute_header, v16, v17, "Failed to begin AirPlay over Infrastructure CWFActivity: %@", v18, 0xCu);
          v21 = sub_100012C44(&qword_100404BB0);
          swift_arrayDestroy(v19, 1, v21);
          swift_slowDealloc(v19, -1, -1);
          swift_slowDealloc(v18, -1, -1);
          swift_errorRelease(v13);

        }
        else
        {
          swift_errorRelease(v13);

          swift_errorRelease(v13);
          swift_errorRelease(v13);
        }
      }
    }
  }
  else if (v3)
  {
    objc_msgSend(*(id *)(a2 + 48), "endActivity:");
    v11 = *(void **)(a2 + 112);
    *(_QWORD *)(a2 + 112) = 0;

  }
}

uint64_t sub_100055F28(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD aBlock[5];
  uint64_t v29;

  v9 = type metadata accessor for DispatchWorkItemFlags(0);
  v26 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin();
  v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = type metadata accessor for DispatchQoS(0);
  v12 = *(_QWORD *)(v25 - 8);
  __chkstk_darwin();
  v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(_QWORD *)(v4 + 40);
  v16 = *(void **)(v15 + 56);
  v17 = swift_allocObject(a2, 25, 7);
  *(_QWORD *)(v17 + 16) = v15;
  *(_BYTE *)(v17 + 24) = a1;
  aBlock[4] = a3;
  v29 = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100006F0C;
  aBlock[3] = a4;
  v18 = _Block_copy(aBlock);
  swift_retain_n(v15, 2);
  v19 = v16;
  static DispatchQoS.unspecified.getter(v19);
  v27 = _swiftEmptyArrayStorage;
  v20 = sub_100011DE4((unint64_t *)&qword_100408710, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v21 = sub_100012C44((uint64_t *)&unk_100405070);
  v22 = sub_100011770((unint64_t *)&qword_100408720, (uint64_t *)&unk_100405070, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v27, v21, v22, v9, v20);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v14, v11, v18);
  _Block_release(v18);
  swift_release(v15);

  (*(void (**)(char *, uint64_t))(v26 + 8))(v11, v9);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v25);
  return swift_release(v29);
}

uint64_t DeviceDriver<>.updateSoftAPBand(_:)(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100056148(a1, a2, a3, a4, (uint64_t)&unk_1003DD7E8, (uint64_t)sub_10005FEFC, (uint64_t)&unk_1003DD800);
}

uint64_t sub_100056148(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  void (*v16)(uint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE v27[4];
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD aBlock[5];
  uint64_t v36;
  uint64_t v37;

  v29 = a6;
  v30 = a7;
  v28 = a1;
  v10 = type metadata accessor for DispatchWorkItemFlags(0);
  v33 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin();
  v12 = &v27[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = type metadata accessor for DispatchQoS(0);
  v31 = *(_QWORD *)(v13 - 8);
  v32 = v13;
  __chkstk_darwin();
  v15 = &v27[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v16 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a3 + 56);
  v16(&v37, a2, a3);
  v17 = v37;
  v18 = *(id *)(v37 + 56);
  swift_release(v17);
  v16(aBlock, a2, a3);
  v19 = aBlock[0];
  v20 = swift_allocObject(a5, 25, 7);
  *(_QWORD *)(v20 + 16) = v19;
  *(_BYTE *)(v20 + 24) = v28;
  aBlock[4] = v29;
  v36 = v20;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100006F0C;
  aBlock[3] = v30;
  v21 = _Block_copy(aBlock);
  v22 = swift_retain();
  static DispatchQoS.unspecified.getter(v22);
  v34 = _swiftEmptyArrayStorage;
  v23 = sub_100011DE4((unint64_t *)&qword_100408710, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v24 = sub_100012C44((uint64_t *)&unk_100405070);
  v25 = sub_100011770((unint64_t *)&qword_100408720, (uint64_t *)&unk_100405070, (const char *)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v34, v24, v25, v10, v23);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v15, v12, v21);
  _Block_release(v21);
  swift_release(v19);

  (*(void (**)(_BYTE *, uint64_t))(v33 + 8))(v12, v10);
  (*(void (**)(_BYTE *, uint64_t))(v31 + 8))(v15, v32);
  return swift_release(v36);
}

uint64_t sub_100056388(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;

  v3 = *(_QWORD *)(v2 + 40);
  v4 = *(_QWORD *)(v3 + 128);
  if (v4)
  {
    swift_retain();
    v5 = v4;
    v6 = v4;
  }
  else
  {
    v9 = type metadata accessor for AppleDevice.GatewayMonitor(0);
    swift_allocObject(v9, *(unsigned int *)(v9 + 48), *(unsigned __int16 *)(v9 + 52));
    swift_retain();
    v10 = swift_retain();
    v6 = sub_10004E6D4(v10, a1, a2);
    v5 = *(_QWORD *)(v3 + 128);
  }
  *(_QWORD *)(v3 + 128) = v6;
  swift_retain();
  swift_release(v3);
  return swift_release(v5);
}

uint64_t DeviceDriver<>.startGatewayMonitor()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  void (*v8)(uint64_t *__return_ptr);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = v3;
  v8 = *(void (**)(uint64_t *__return_ptr))(a2 + 56);
  v8(&v17);
  v9 = v17;
  v15 = v3;
  ((void (*)(uint64_t *__return_ptr, uint64_t, uint64_t))v8)(&v16, a1, a2);
  v10 = v16;
  v11 = *(_QWORD *)(v16 + 128);
  swift_retain();
  swift_release(v10);
  if (!v11)
  {
    v12 = type metadata accessor for AppleDevice.GatewayMonitor(0);
    v15 = v4;
    swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    v11 = sub_100061090((uint64_t)&v15, a1, a3);
  }
  v13 = *(_QWORD *)(v9 + 128);
  *(_QWORD *)(v9 + 128) = v11;
  swift_release(v9);
  return swift_release(v13);
}

uint64_t DeviceDriver<>.stopGatewayMonitor()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  (*(void (**)(uint64_t *__return_ptr))(a2 + 56))(&v5);
  v2 = v5;
  v3 = *(_QWORD *)(v5 + 128);
  *(_QWORD *)(v5 + 128) = 0;
  swift_release(v2);
  return swift_release(v3);
}

uint64_t DeviceDriver<>.resolveIPForPeer(macAddress:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  v5 = v4;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a3 + 56))(&v14, a2, a3);
  v9 = v14;
  v10 = *(_QWORD *)(v14 + 128);
  if (v10)
  {
    swift_retain();
    swift_release(v9);
    v13 = v5;
    sub_1000510F4(a1 & 0xFFFFFFFFFFFFLL, (uint64_t)&v13, a2, a4);
    v11 = v10;
  }
  else
  {
    v11 = v14;
  }
  return swift_release(v11);
}

uint64_t DeviceDriver<>.resetGatewayIPAddress()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  (*(void (**)(uint64_t *__return_ptr))(a2 + 56))(&v5);
  v2 = v5;
  v3 = *(_QWORD *)(v5 + 128);
  if (v3)
  {
    swift_retain();
    swift_release(v2);
    sub_100050F68();
    v2 = v3;
  }
  return swift_release(v2);
}

uint64_t sub_100056654(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  NSObject *v22;
  NSObject *v23;
  const char *name;
  uint64_t v25;

  v5 = *(_QWORD *)(v4 + 40);
  v6 = *(_QWORD *)(v5 + 120);
  if (!v6)
  {
    v11 = swift_retain();
    result = nw_path_create_default_evaluator(v11);
    if (!result)
      goto LABEL_14;
    v13 = result;
    if (qword_100404108 != -1)
      swift_once(&qword_100404108, sub_10017E140);
    v14 = (void *)static OS_dispatch_queue.p2p;
    v15 = swift_allocObject(a3, 32, 7);
    *(_QWORD *)(v15 + 16) = a1;
    *(_QWORD *)(v15 + 24) = a2;
    v16 = type metadata accessor for AppleDevice.NetworkPathMonitor();
    v17 = swift_allocObject(v16, 24, 7);
    v18 = v14;
    swift_retain();
    AppleDevice.NetworkPathMonitor.init(evaluator:queue:updatedHandler:)(v13, v18, a4, v15);
    v19 = *(_QWORD *)(v5 + 120);
    *(_QWORD *)(v5 + 120) = v17;
    swift_release(v5);
    swift_release(v19);
    v6 = *(_QWORD *)(v5 + 120);
    if (!v6)
      return 0;
  }
  v20 = *(_QWORD *)(v6 + 16);
  swift_retain();
  result = nw_path_evaluator_copy_path(v20);
  if (result)
  {
    v21 = result;
    swift_release(v6);
    if (nw_path_get_status(v21) == nw_path_status_satisfied)
    {
      v22 = nw_path_copy_interface(v21);
      if (v22)
      {
        v23 = v22;
        name = nw_interface_get_name(v22);
        v25 = String.init(cString:)(name);
        swift_unknownObjectRelease(v21);
        swift_unknownObjectRelease(v23);
        return v25;
      }
    }
    swift_unknownObjectRelease(v21);
    return 0;
  }
  __break(1u);
LABEL_14:
  __break(1u);
  return result;
}

uint64_t DeviceDriver<>.monitorSystemDefaultPath(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void (*v8)(uint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  NSObject *v23;
  NSObject *v24;
  const char *name;
  uint64_t v26;

  v8 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a4 + 56);
  v8(&v26, a3, a4);
  v9 = *(_QWORD *)(v26 + 120);
  swift_release(v26);
  if (!v9)
  {
    v10 = ((_QWORD *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))v8)(&v26, a3, a4);
    v11 = v26;
    result = nw_path_create_default_evaluator(v10);
    if (!result)
      goto LABEL_15;
    v13 = result;
    if (qword_100404108 != -1)
      swift_once(&qword_100404108, sub_10017E140);
    v14 = (void *)static OS_dispatch_queue.p2p;
    v15 = swift_allocObject(&unk_1003DD838, 32, 7);
    *(_QWORD *)(v15 + 16) = a1;
    *(_QWORD *)(v15 + 24) = a2;
    v16 = type metadata accessor for AppleDevice.NetworkPathMonitor();
    v17 = swift_allocObject(v16, 24, 7);
    v18 = v14;
    swift_retain();
    AppleDevice.NetworkPathMonitor.init(evaluator:queue:updatedHandler:)(v13, v18, (uint64_t)sub_100061480, v15);
    v19 = *(_QWORD *)(v11 + 120);
    *(_QWORD *)(v11 + 120) = v17;
    swift_release(v11);
    swift_release(v19);
  }
  v8(&v26, a3, a4);
  v20 = v26;
  v21 = *(_QWORD *)(v26 + 120);
  if (!v21)
  {
    swift_release(v26);
    return v21;
  }
  swift_retain();
  swift_release(v20);
  result = nw_path_evaluator_copy_path(*(_QWORD *)(v21 + 16));
  if (result)
  {
    v22 = result;
    swift_release(v21);
    if (nw_path_get_status(v22) == nw_path_status_satisfied && (v23 = nw_path_copy_interface(v22)) != 0)
    {
      v24 = v23;
      name = nw_interface_get_name(v23);
      v21 = String.init(cString:)(name);
      swift_unknownObjectRelease(v22);
      swift_unknownObjectRelease(v24);
    }
    else
    {
      swift_unknownObjectRelease(v22);
      return 0;
    }
    return v21;
  }
  __break(1u);
LABEL_15:
  __break(1u);
  return result;
}

uint64_t sub_1000569F0(NSObject *a1, void (*a2)(_QWORD))
{
  NSObject *v4;
  NSObject *v5;
  const char *name;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (nw_path_get_status(a1) != nw_path_status_satisfied)
    return ((uint64_t (*)(_QWORD, _QWORD))a2)(0, 0);
  v4 = nw_path_copy_interface(a1);
  if (!v4)
    return ((uint64_t (*)(_QWORD, _QWORD))a2)(0, 0);
  v5 = v4;
  name = nw_interface_get_name(v4);
  v7 = String.init(cString:)(name);
  v9 = v8;
  a2(v7);
  swift_unknownObjectRelease(v5);
  return swift_bridgeObjectRelease(v9);
}

uint64_t DeviceDriver<>.stopMonitoringSystemDefaultPath()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  (*(void (**)(uint64_t *__return_ptr))(a2 + 56))(&v5);
  v2 = v5;
  v3 = *(_QWORD *)(v5 + 120);
  *(_QWORD *)(v5 + 120) = 0;
  swift_release(v2);
  return swift_release(v3);
}

uint64_t sub_100056ABC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, void (*a6)(void), uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  _QWORD *v11;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  os_unfair_lock_s *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(void);
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE v46[24];
  _QWORD v47[3];
  uint64_t v48;
  char v49[32];

  v17 = v11[5];
  swift_beginAccess(v17 + 72, v49, 0, 0);
  sub_100033B48(v17 + 72, (uint64_t)v47, &qword_100405050);
  v18 = v48;
  sub_100033A84((uint64_t)v47, &qword_100405050);
  if (v18)
  {
    v19 = sub_100012C84();
    v20 = swift_allocError(&type metadata for WiFiError, v19, 0, 0);
    *(_OWORD *)v21 = xmmword_10033B1B0;
    *(_BYTE *)(v21 + 16) = 0;
    a6();
    return swift_errorRelease(v20);
  }
  else
  {
    v40 = a1;
    v41 = a3;
    v42 = a4;
    v23 = v11[2];
    v24 = v11[3];
    v25 = *(_QWORD *)(v17 + 24);
    v26 = *(os_unfair_lock_s **)(v25 + 16);
    swift_retain();
    swift_bridgeObjectRetain(v24);
    os_unfair_lock_lock(v26);
    swift_beginAccess(v17 + 32, v47, 32, 0);
    v27 = *(_QWORD *)(v17 + 32);
    if (*(_QWORD *)(v27 + 16))
    {
      swift_bridgeObjectRetain(v24);
      v28 = sub_10000FA00(v23, v24);
      v29 = a7;
      v30 = v17 + 72;
      v31 = a6;
      if ((v32 & 1) != 0)
      {
        v33 = *(_QWORD *)(*(_QWORD *)(v27 + 56) + 8 * v28);
        swift_endAccess(v47);
        swift_retain();
        swift_bridgeObjectRelease(v24);
        v34 = *(_QWORD *)(v33
                        + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_parentInterfaceName);
        v35 = *(_QWORD *)(v33
                        + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_parentInterfaceName
                        + 8);
        swift_bridgeObjectRetain(v35);
        swift_release(v33);
      }
      else
      {
        swift_endAccess(v47);
        swift_bridgeObjectRelease(v24);
        v34 = 0;
        v35 = 0;
      }
    }
    else
    {
      swift_endAccess(v47);
      v34 = 0;
      v35 = 0;
      v29 = a7;
      v30 = v17 + 72;
      v31 = a6;
    }
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v25 + 16));
    swift_release(v17);
    swift_bridgeObjectRelease(v24);
    if (v35)
      v36 = v34;
    else
      v36 = 0;
    if (!v35)
      v35 = 0xE000000000000000;
    v37 = (_QWORD *)swift_allocObject(a10, 48, 7);
    v37[2] = v31;
    v37[3] = v29;
    v37[4] = a8;
    v37[5] = a9;
    v38 = type metadata accessor for AppleDevice.InternetSharingProviderSession(0);
    swift_allocObject(v38, *(unsigned int *)(v38 + 48), *(unsigned __int16 *)(v38 + 52));
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain(v42);
    swift_bridgeObjectRetain(a2);
    v39 = sub_10004A088(v40, a2, v41, v42, a5 & 1, v36, v35, a11, (uint64_t)v37);
    v48 = v38;
    v47[0] = v39;
    swift_beginAccess(v30, v46, 33, 0);
    swift_retain();
    swift_retain();
    sub_10006298C((uint64_t)v47, v30, &qword_100405050);
    swift_endAccess(v46);
    swift_release(v17);
    sub_10004A6A0();
    return swift_release(v39);
  }
}

uint64_t DeviceDriver<>.startSharingInternet(from:to:useBridging:errorHandler:completionHandler:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, void (*a6)(void), uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  void (*v17)(uint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD v51[3];
  uint64_t v52;
  _QWORD v53[3];
  uint64_t v54;
  char v55[32];

  v13 = v12;
  v17 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a11 + 56);
  v17(v51, a10, a11);
  v18 = v51[0];
  v19 = v51[0] + 72;
  swift_beginAccess(v51[0] + 72, v55, 0, 0);
  sub_100033B48(v19, (uint64_t)v53, &qword_100405050);
  swift_release(v18);
  v20 = v54;
  sub_100033A84((uint64_t)v53, &qword_100405050);
  if (v20)
  {
    v21 = sub_100012C84();
    v22 = swift_allocError(&type metadata for WiFiError, v21, 0, 0);
    *(_OWORD *)v23 = xmmword_10033B1B0;
    *(_BYTE *)(v23 + 16) = 0;
    a6();
    return swift_errorRelease(v22);
  }
  else
  {
    v44 = a1;
    v45 = a7;
    v53[0] = v13;
    v17(v51, a10, a11);
    v25 = v51[0];
    v53[0] = v13;
    v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a12 + 16) + 40))(a10);
    v28 = v27;
    v29 = *(_QWORD *)(v25 + 24);
    os_unfair_lock_lock(*(os_unfair_lock_t *)(v29 + 16));
    swift_beginAccess(v25 + 32, v53, 32, 0);
    v30 = *(_QWORD *)(v25 + 32);
    if (*(_QWORD *)(v30 + 16))
    {
      swift_bridgeObjectRetain(v28);
      v31 = sub_10000FA00(v26, v28);
      v32 = a11;
      if ((v33 & 1) != 0)
      {
        v34 = *(_QWORD *)(*(_QWORD *)(v30 + 56) + 8 * v31);
        swift_endAccess(v53);
        swift_retain();
        swift_bridgeObjectRelease(v28);
        v35 = *(_QWORD *)(v34
                        + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_parentInterfaceName);
        v36 = *(_QWORD *)(v34
                        + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_parentInterfaceName
                        + 8);
        swift_bridgeObjectRetain(v36);
        swift_release(v34);
      }
      else
      {
        swift_endAccess(v53);
        swift_bridgeObjectRelease(v28);
        v35 = 0;
        v36 = 0;
      }
    }
    else
    {
      swift_endAccess(v53);
      v35 = 0;
      v36 = 0;
      v32 = a11;
    }
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v29 + 16));
    swift_release(v25);
    swift_bridgeObjectRelease(v28);
    if (v36)
      v37 = v35;
    else
      v37 = 0;
    if (v36)
      v38 = v36;
    else
      v38 = 0xE000000000000000;
    v39 = (_QWORD *)swift_allocObject(&unk_1003DD860, 48, 7);
    v39[2] = a6;
    v39[3] = v45;
    v39[4] = a8;
    v39[5] = a9;
    v40 = type metadata accessor for AppleDevice.InternetSharingProviderSession(0);
    swift_allocObject(v40, *(unsigned int *)(v40 + 48), *(unsigned __int16 *)(v40 + 52));
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain(a4);
    swift_bridgeObjectRetain(a2);
    v41 = sub_10004A088(v44, a2, a3, a4, a5 & 1, v37, v38, (uint64_t)sub_1000614AC, (uint64_t)v39);
    v53[0] = v13;
    v17(&v52, a10, v32);
    v42 = v52;
    v54 = v40;
    v53[0] = v41;
    v43 = v52 + 72;
    swift_beginAccess(v52 + 72, v51, 33, 0);
    swift_retain();
    sub_10006298C((uint64_t)v53, v43, &qword_100405050);
    swift_endAccess(v51);
    swift_release(v42);
    sub_10004A6A0();
    return swift_release(v41);
  }
}

void sub_100057148(uint64_t a1, __int16 a2, char a3, void (*a4)(void), uint64_t a5, void (*a6)(_QWORD))
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (a3)
  {
    if (a3 == 1)
    {
      v7 = sub_100012C84();
      v8 = swift_allocError(&type metadata for WiFiError, v7, 0, 0);
      *(_OWORD *)v9 = xmmword_10033B140;
      *(_BYTE *)(v9 + 16) = 0;
      a4();
      swift_errorRelease(v8);
    }
  }
  else
  {
    a6(a2 & 0x101);
  }
}

uint64_t sub_1000571D8(unint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v9[24];
  _BYTE v10[24];
  uint64_t v11;

  v3 = *(_QWORD *)(v1 + 40) + 72;
  swift_beginAccess(v3, v9, 0, 0);
  sub_100033B48(v3, (uint64_t)v10, &qword_100405050);
  if (!v11)
    return sub_100033A84((uint64_t)v10, &qword_100405050);
  v4 = type metadata accessor for AppleDevice.InternetSharingProviderSession(0);
  result = swift_dynamicCast(&v8, v10, (char *)&type metadata for Any + 8, v4, 6);
  if ((result & 1) != 0)
  {
    v6 = v8;
    if (*(_BYTE *)(v8
                  + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A30InternetSharingProviderSession_state
                  + 16))
      return swift_release(v6);
    if (*(_BYTE *)(v8
                  + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A30InternetSharingProviderSession_bridgedMode))
      v7 = 2;
    else
      v7 = 6;
    if ((a1 & 0x8000000000000000) != 0)
    {
      result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
    }
    else
    {
      if (!HIDWORD(a1))
      {
        _NETRBClientSetHostCount(*(_QWORD *)(v8+ OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A30InternetSharingProviderSession_state), v7, a1);
        return swift_release(v6);
      }
      result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 3455, 0);
    }
    __break(1u);
  }
  return result;
}

uint64_t DeviceDriver<>.updateInternetSharingRequesterCount(_:)(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[3];
  uint64_t v12;
  _BYTE v13[24];
  uint64_t v14;

  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a3 + 56))(&v12, a2, a3);
  v4 = v12;
  v5 = v12 + 72;
  swift_beginAccess(v12 + 72, v11, 0, 0);
  sub_100033B48(v5, (uint64_t)v13, &qword_100405050);
  swift_release(v4);
  if (!v14)
    return sub_100033A84((uint64_t)v13, &qword_100405050);
  v6 = type metadata accessor for AppleDevice.InternetSharingProviderSession(0);
  result = swift_dynamicCast(&v10, v13, (char *)&type metadata for Any + 8, v6, 6);
  if ((result & 1) != 0)
  {
    v8 = v10;
    if (*(_BYTE *)(v10
                  + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A30InternetSharingProviderSession_state
                  + 16))
      return swift_release(v8);
    if (*(_BYTE *)(v10
                  + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A30InternetSharingProviderSession_bridgedMode))
      v9 = 2;
    else
      v9 = 6;
    if ((a1 & 0x8000000000000000) != 0)
    {
      result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
    }
    else
    {
      if (!HIDWORD(a1))
      {
        _NETRBClientSetHostCount(*(_QWORD *)(v10+ OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A30InternetSharingProviderSession_state), v9, a1);
        return swift_release(v8);
      }
      result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 3455, 0);
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_1000574E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[3];
  _BYTE v6[24];
  __int128 v7;
  __int128 v8;

  v1 = *(_QWORD *)(v0 + 40);
  swift_beginAccess(v1 + 72, v6, 0, 0);
  sub_100033B48(v1 + 72, (uint64_t)&v7, &qword_100405050);
  if (*((_QWORD *)&v8 + 1))
  {
    v2 = type metadata accessor for AppleDevice.InternetSharingProviderSession(0);
    if ((swift_dynamicCast(v5, &v7, (char *)&type metadata for Any + 8, v2, 6) & 1) != 0)
    {
      v3 = v5[0];
      sub_10004A4B4();
      swift_release(v3);
    }
  }
  else
  {
    sub_100033A84((uint64_t)&v7, &qword_100405050);
  }
  v7 = 0u;
  v8 = 0u;
  swift_beginAccess(v1 + 72, v5, 33, 0);
  swift_retain();
  sub_10006298C((uint64_t)&v7, v1 + 72, &qword_100405050);
  swift_endAccess(v5);
  return swift_release(v1);
}

uint64_t DeviceDriver<>.stopSharingInternet()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void (*v6)(uint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[3];
  uint64_t v15;
  _QWORD v16[3];
  __int128 v17;
  __int128 v18;

  v3 = v2;
  v6 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a2 + 56);
  ((void (*)(_QWORD *__return_ptr))v6)(v14);
  v7 = v14[0];
  v8 = v14[0] + 72;
  swift_beginAccess(v14[0] + 72, v16, 0, 0);
  sub_100033B48(v8, (uint64_t)&v17, &qword_100405050);
  swift_release(v7);
  if (*((_QWORD *)&v18 + 1))
  {
    v9 = type metadata accessor for AppleDevice.InternetSharingProviderSession(0);
    if ((swift_dynamicCast(&v15, &v17, (char *)&type metadata for Any + 8, v9, 6) & 1) != 0)
    {
      v10 = v15;
      sub_10004A4B4();
      swift_release(v10);
    }
  }
  else
  {
    sub_100033A84((uint64_t)&v17, &qword_100405050);
  }
  *(_QWORD *)&v17 = v3;
  v6(&v15, a1, a2);
  v11 = v15;
  v12 = v15 + 72;
  v17 = 0u;
  v18 = 0u;
  swift_beginAccess(v15 + 72, v14, 33, 0);
  sub_10006298C((uint64_t)&v17, v12, &qword_100405050);
  swift_endAccess(v14);
  return swift_release(v11);
}

uint64_t sub_1000579C8(uint64_t result, uint64_t a2, char a3, void (*a4)(void), uint64_t a5, uint64_t (*a6)(void))
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (a3)
  {
    if (a3 == 1)
    {
      v7 = sub_100012C84();
      v8 = swift_allocError(&type metadata for WiFiError, v7, 0, 0);
      *(_OWORD *)v9 = xmmword_10033B140;
      *(_BYTE *)(v9 + 16) = 0;
      a4();
      return swift_errorRelease(v8);
    }
  }
  else if ((result & 1) != 0)
  {
    return a6();
  }
  return result;
}

uint64_t sub_100057A54()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  _QWORD v13[3];
  _BYTE v14[24];
  __int128 v15;
  __int128 v16;

  v1 = *(_QWORD *)(v0 + 40);
  swift_beginAccess(v1 + 72, v14, 0, 0);
  sub_100033B48(v1 + 72, (uint64_t)&v15, &qword_100405050);
  if (*((_QWORD *)&v16 + 1))
  {
    v2 = type metadata accessor for AppleDevice.InternetSharingRequesterSession(0);
    if ((swift_dynamicCast(v13, &v15, (char *)&type metadata for Any + 8, v2, 6) & 1) != 0)
    {
      v3 = v13[0];
      v4 = v13[0]
         + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A31InternetSharingRequesterSession_state;
      if (!*(_BYTE *)(v13[0]
                     + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A31InternetSharingRequesterSession_state
                     + 16))
      {
        sub_10004D1F4();
        v5 = *(_QWORD *)(v3
                       + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A31InternetSharingRequesterSession_interface);
        v6 = *(_QWORD *)(v3
                       + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A31InternetSharingRequesterSession_interface
                       + 8);
        swift_bridgeObjectRetain(v6);
        sub_10005FF14(v5, v6, 0);
        v8 = v7;
        swift_bridgeObjectRelease(v6);
        if (v8)
          swift_bridgeObjectRelease(v8);
        v9 = *(_QWORD *)v4;
        v10 = *(_QWORD *)(v4 + 8);
        *(_OWORD *)v4 = xmmword_100337850;
        v11 = *(_BYTE *)(v4 + 16);
        *(_BYTE *)(v4 + 16) = 2;
        sub_100061DD0(v9, v10, v11);
        sub_100061DF8(v9, v10, v11);
        sub_10004D47C(v9, v10, v11);
        sub_100061DF8(v9, v10, v11);
      }
      swift_release(v3);
    }
  }
  else
  {
    sub_100033A84((uint64_t)&v15, &qword_100405050);
  }
  v15 = 0u;
  v16 = 0u;
  swift_beginAccess(v1 + 72, v13, 33, 0);
  swift_retain();
  sub_10006298C((uint64_t)&v15, v1 + 72, &qword_100405050);
  swift_endAccess(v13);
  return swift_release(v1);
}

uint64_t DeviceDriver<>.stopRequestingInternet()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void (*v6)(uint64_t *__return_ptr, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v22[3];
  uint64_t v23;
  _QWORD v24[3];
  __int128 v25;
  __int128 v26;

  v3 = v2;
  v6 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a2 + 56);
  ((void (*)(_QWORD *__return_ptr))v6)(v22);
  v7 = v22[0];
  v8 = v22[0] + 72;
  swift_beginAccess(v22[0] + 72, v24, 0, 0);
  sub_100033B48(v8, (uint64_t)&v25, &qword_100405050);
  swift_release(v7);
  if (*((_QWORD *)&v26 + 1))
  {
    v9 = type metadata accessor for AppleDevice.InternetSharingRequesterSession(0);
    if ((swift_dynamicCast(&v23, &v25, (char *)&type metadata for Any + 8, v9, 6) & 1) != 0)
    {
      v10 = v23;
      v11 = v23
          + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A31InternetSharingRequesterSession_state;
      if (!*(_BYTE *)(v23
                     + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A31InternetSharingRequesterSession_state
                     + 16))
      {
        sub_10004D1F4();
        v12 = *(_QWORD *)(v10
                        + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A31InternetSharingRequesterSession_interface);
        v13 = *(_QWORD *)(v10
                        + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A31InternetSharingRequesterSession_interface
                        + 8);
        swift_bridgeObjectRetain(v13);
        sub_10005FF14(v12, v13, 0);
        v15 = v14;
        swift_bridgeObjectRelease(v13);
        if (v15)
          swift_bridgeObjectRelease(v15);
        v16 = *(_QWORD *)v11;
        v17 = *(_QWORD *)(v11 + 8);
        *(_OWORD *)v11 = xmmword_100337850;
        v18 = *(_BYTE *)(v11 + 16);
        *(_BYTE *)(v11 + 16) = 2;
        sub_100061DD0(v16, v17, v18);
        sub_100061DF8(v16, v17, v18);
        sub_10004D47C(v16, v17, v18);
        sub_100061DF8(v16, v17, v18);
      }
      swift_release(v10);
    }
  }
  else
  {
    sub_100033A84((uint64_t)&v25, &qword_100405050);
  }
  *(_QWORD *)&v25 = v3;
  v6(&v23, a1, a2);
  v19 = v23;
  v20 = v23 + 72;
  v25 = 0u;
  v26 = 0u;
  swift_beginAccess(v23 + 72, v22, 33, 0);
  sub_10006298C((uint64_t)&v25, v20, &qword_100405050);
  swift_endAccess(v22);
  return swift_release(v19);
}

void sub_100057E2C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  NSString v6;
  uint64_t v7;
  _BYTE v8[24];
  _BYTE v9[24];
  uint64_t v10;

  v1 = *(_QWORD *)(v0 + 40) + 72;
  swift_beginAccess(v1, v8, 0, 0);
  sub_100033B48(v1, (uint64_t)v9, &qword_100405050);
  if (v10)
  {
    v2 = type metadata accessor for AppleDevice.InternetSharingRequesterSession(0);
    if ((swift_dynamicCast(&v7, v9, (char *)&type metadata for Any + 8, v2, 6) & 1) != 0)
    {
      v3 = v7;
      if (qword_100403E98 != -1)
        swift_once(&qword_100403E98, sub_10004D444);
      v4 = (void *)qword_100405030;
      v5 = objc_msgSend(objc_allocWithZone((Class)WiFiUsageLQMUserSample), "init");
      v6 = String._bridgeToObjectiveC()();
      objc_msgSend(v4, "updateLinkQuality:forInterface:supportsLinkRecommendations:", v5, v6, 0);
      swift_release(v3);

    }
  }
  else
  {
    sub_100033A84((uint64_t)v9, &qword_100405050);
  }
}

void DeviceDriver<>.performLinkTest()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;
  NSString v8;
  uint64_t v9;
  _QWORD v10[3];
  uint64_t v11;
  _BYTE v12[24];
  uint64_t v13;

  (*(void (**)(uint64_t *__return_ptr))(a2 + 56))(&v11);
  v2 = v11;
  v3 = v11 + 72;
  swift_beginAccess(v11 + 72, v10, 0, 0);
  sub_100033B48(v3, (uint64_t)v12, &qword_100405050);
  swift_release(v2);
  if (v13)
  {
    v4 = type metadata accessor for AppleDevice.InternetSharingRequesterSession(0);
    if ((swift_dynamicCast(&v9, v12, (char *)&type metadata for Any + 8, v4, 6) & 1) != 0)
    {
      v5 = v9;
      if (qword_100403E98 != -1)
        swift_once(&qword_100403E98, sub_10004D444);
      v6 = (void *)qword_100405030;
      v7 = objc_msgSend(objc_allocWithZone((Class)WiFiUsageLQMUserSample), "init");
      v8 = String._bridgeToObjectiveC()();
      objc_msgSend(v6, "updateLinkQuality:forInterface:supportsLinkRecommendations:", v7, v8, 0);
      swift_release(v5);

    }
  }
  else
  {
    sub_100033A84((uint64_t)v12, &qword_100405050);
  }
}

uint64_t sub_1000580B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(void);
  id v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  void *v24;
  Swift::String v25;
  unint64_t v26;
  NSString v27;
  uint64_t v28;
  uint64_t inited;
  Swift::String v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __n128 v54;
  __n128 v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  NSObject *v68;
  os_log_type_t v69;
  uint8_t *v70;
  void **v71;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  NSURL *v77;
  void *v78;
  void *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  void *v87;
  void *v88;
  id v89;
  id v90;
  void (*v91)(void);
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  id v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  void **v108;
  unint64_t v109;
  uint64_t (*v110)(uint64_t, uint64_t, void *);
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char v115[8];
  uint64_t v116;
  uint64_t v117;
  void *v118;
  uint64_t v119;
  uint64_t v120;
  char v121;
  uint64_t v122;
  uint64_t v123;

  v99 = a3;
  v100 = a4;
  v98 = a2;
  sub_100061504(a1, (uint64_t)v115);
  v7 = v116;
  sub_100012C44(&qword_100405168);
  __chkstk_darwin();
  v9 = (char *)&v91 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for URL(0);
  v103 = *(_QWORD *)(v10 - 8);
  v104 = v10;
  __chkstk_darwin();
  v101 = (char *)&v91 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Logger(0);
  v13 = *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64);
  __chkstk_darwin();
  v97 = (char *)&v91 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v14 = *(_QWORD *)(v4 + 40);
  v106 = v16;
  v107 = (char *)&v91 - v15;
  v17 = *(void (**)(void))(v16 + 16);
  v17();
  swift_retain();
  v18 = sub_10003E864();
  v19 = v14;
  v20 = v18;
  swift_release(v19);
  if (!v20)
  {
    v63 = sub_100012C84();
    v64 = swift_allocError(&type metadata for WiFiError, v63, 0, 0);
    *(_OWORD *)v65 = xmmword_10033B180;
    *(_BYTE *)(v65 + 16) = 0;
    swift_willThrow(v64);
LABEL_14:
    v59 = v106;
    return (*(uint64_t (**)(char *, uint64_t))(v59 + 8))(v107, v12);
  }
  sub_100061504(a1, (uint64_t)&v117);
  v105 = v5;
  v102 = v118;
  v96 = v117;
  if ((v121 & 1) == 0)
  {
    v95 = v20;
    v66 = swift_bridgeObjectRetain_n(v7, 2);
    v67 = v107;
    v68 = Logger.logObject.getter(v66);
    v69 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v68, v69))
    {
      v70 = (uint8_t *)swift_slowAlloc(12, -1);
      v71 = (void **)swift_slowAlloc(32, -1);
      v108 = v71;
      v93 = v12;
      *(_DWORD *)v70 = 136315138;
      swift_bridgeObjectRetain(v7);
      v122 = sub_100013CC8(v96, (unint64_t)v102, (uint64_t *)&v108);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v122, &v123);
      sub_100062908(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10006156C);
      sub_100062908(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10006156C);
      swift_bridgeObjectRelease(v7);
      _os_log_impl((void *)&_mh_execute_header, v68, v69, "Would have displayed %s on HUD", v70, 0xCu);
      swift_arrayDestroy(v71, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v71, -1, -1);
      swift_slowDealloc(v70, -1, -1);

      return (*(uint64_t (**)(char *, uint64_t))(v106 + 8))(v107, v93);
    }
    else
    {

      sub_100062908(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10006156C);
      sub_100062908(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10006156C);

      return (*(uint64_t (**)(char *, uint64_t))(v106 + 8))(v67, v12);
    }
  }
  v21 = v120;
  v91 = v17;
  v92 = v119;
  v108 = 0;
  v109 = 0xE000000000000000;
  v22 = v118;
  v23 = v117;
  swift_bridgeObjectRetain(v118);
  v94 = v21;
  swift_bridgeObjectRetain(v21);
  v24 = v20;
  _StringGuts.grow(_:)(25);
  swift_bridgeObjectRelease(v109);
  v108 = (void **)0xD000000000000017;
  v109 = 0x8000000100362C90;
  v25._countAndFlagsBits = v23;
  v25._object = v22;
  String.append(_:)(v25);
  v26 = v109;
  v27 = String._bridgeToObjectiveC()();
  LOBYTE(v26) = objc_msgSend(v24, "askToLaunchTapToRadarWithMessage:", v27, swift_bridgeObjectRelease(v26).n128_f64[0]);

  if ((v26 & 1) == 0)
  {
    swift_bridgeObjectRelease(v94);
    swift_bridgeObjectRelease(v102);
    v73 = sub_100012C84();
    v74 = swift_allocError(&type metadata for WiFiError, v73, 0, 0);
    *(_OWORD *)v75 = xmmword_10033B1C0;
    *(_BYTE *)(v75 + 16) = 0;
    swift_willThrow(v74);

    goto LABEL_14;
  }
  v95 = v24;
  v28 = sub_100012C44(&qword_100405170);
  inited = swift_initStackObject(v28, &v114);
  *(_OWORD *)(inited + 16) = xmmword_10033B1D0;
  v93 = v12;
  *(_QWORD *)(inited + 32) = 0x656C746954;
  *(_QWORD *)(inited + 40) = 0xE500000000000000;
  v108 = 0;
  v109 = 0xE000000000000000;
  _StringGuts.grow(_:)(22);
  swift_bridgeObjectRelease(v109);
  v108 = (void **)0xD000000000000014;
  v109 = 0x8000000100362CB0;
  v30._countAndFlagsBits = v96;
  v30._object = v102;
  String.append(_:)(v30);
  v31 = v109;
  *(_QWORD *)(inited + 48) = v108;
  *(_QWORD *)(inited + 56) = v31;
  *(_QWORD *)(inited + 64) = 0x676169446F747541;
  *(_QWORD *)(inited + 72) = 0xEF73636974736F6ELL;
  *(_QWORD *)(inited + 80) = 0x656E6F6870;
  *(_QWORD *)(inited + 88) = 0xE500000000000000;
  *(_QWORD *)(inited + 96) = 0x7470697263736544;
  *(_QWORD *)(inited + 104) = 0xEB000000006E6F69;
  v32 = v94;
  *(_QWORD *)(inited + 112) = v92;
  *(_QWORD *)(inited + 120) = v32;
  *(_QWORD *)(inited + 128) = 0x6E656E6F706D6F43;
  *(_QWORD *)(inited + 136) = 0xEB00000000444974;
  *(_QWORD *)(inited + 144) = 0x313433373535;
  *(_QWORD *)(inited + 152) = 0xE600000000000000;
  strcpy((char *)(inited + 160), "ComponentName");
  *(_WORD *)(inited + 174) = -4864;
  *(_QWORD *)(inited + 176) = 0x5032502069466957;
  *(_QWORD *)(inited + 184) = 0xE800000000000000;
  *(_QWORD *)(inited + 192) = 0xD000000000000010;
  *(_QWORD *)(inited + 200) = 0x8000000100362CD0;
  *(_QWORD *)(inited + 208) = 5459817;
  *(_QWORD *)(inited + 216) = 0xE300000000000000;
  strcpy((char *)(inited + 224), "Classification");
  *(_BYTE *)(inited + 239) = -18;
  *(_QWORD *)(inited + 240) = 0x2073756F69726553;
  *(_QWORD *)(inited + 248) = 0xEB00000000677542;
  *(_QWORD *)(inited + 256) = 0xD000000000000014;
  *(_QWORD *)(inited + 264) = 0x8000000100362CF0;
  *(_QWORD *)(inited + 272) = 0xD000000000000023;
  *(_QWORD *)(inited + 280) = 0x8000000100362D10;
  v33 = sub_10001EB54(inited);
  v34 = v105;
  sub_1000592F8(v33);
  v36 = v35;
  swift_bridgeObjectRelease(v33);
  v37 = sub_1000596B4(0xD000000000000013, 0x8000000100362D40, v36);
  v39 = v38;
  v105 = v34;
  swift_bridgeObjectRelease(v36);
  v40 = HIBYTE(v39) & 0xF;
  if ((v39 & 0x2000000000000000) == 0)
    v40 = v37;
  v41 = 7;
  if (((v39 >> 60) & ((v37 & 0x800000000000000) == 0)) != 0)
    v41 = 11;
  v42 = String.index(before:)(v41 | (v40 << 16), v37, v39);
  v43 = String.subscript.getter(15, v42, v37, v39);
  v45 = v44;
  v47 = v46;
  v49 = v48;
  swift_bridgeObjectRelease(v39);
  v50 = static String._fromSubstring(_:)(v43, v45, v47, v49);
  v52 = v51;
  v53 = v49;
  v12 = v93;
  v54 = swift_bridgeObjectRelease(v53);
  URL.init(string:)(v50, v52, v54);
  v55 = swift_bridgeObjectRelease(v52);
  v57 = v103;
  v56 = v104;
  v58 = (*(uint64_t (**)(char *, uint64_t, uint64_t, __n128))(v103 + 48))(v9, 1, v104, v55);
  v59 = v106;
  if (v58 == 1)
  {
    swift_bridgeObjectRelease(v102);
    sub_100033A84((uint64_t)v9, &qword_100405168);
    v60 = sub_100012C84();
    v61 = swift_allocError(&type metadata for WiFiError, v60, 0, 0);
    *(_OWORD *)v62 = xmmword_10033B1E0;
    *(_BYTE *)(v62 + 16) = 0;
    swift_willThrow(v61);

    return (*(uint64_t (**)(char *, uint64_t))(v59 + 8))(v107, v12);
  }
  v76 = v101;
  (*(void (**)(char *, char *, uint64_t))(v57 + 32))(v101, v9, v56);
  URL._bridgeToObjectiveC()(v77);
  v79 = v78;
  v80 = v97;
  ((void (*)(char *, char *, uint64_t))v91)(v97, v107, v12);
  v81 = *(unsigned __int8 *)(v59 + 80);
  v82 = (v81 + 16) & ~v81;
  v83 = (v13 + v82 + 7) & 0xFFFFFFFFFFFFFFF8;
  v84 = v12;
  v85 = swift_allocObject(v98, v83 + 16, v81 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v59 + 32))(v85 + v82, v80, v84);
  v86 = (_QWORD *)(v85 + v83);
  v87 = v102;
  *v86 = v96;
  v86[1] = v87;
  v112 = v99;
  v113 = v85;
  v108 = _NSConcreteStackBlock;
  v109 = 1107296256;
  v110 = sub_100059CBC;
  v111 = v100;
  v88 = _Block_copy(&v108);
  swift_release(v113);
  v89 = v95;
  v90 = objc_msgSend(v95, "tapToRadarWithURL:completionHandler:", v79, v88);
  _Block_release(v88);

  (*(void (**)(char *, uint64_t))(v103 + 8))(v76, v104);
  return (*(uint64_t (**)(char *, uint64_t))(v59 + 8))(v107, v84);
}

uint64_t DeviceDriver<>.report(softError:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  void (*v14)(void ***__return_ptr, uint64_t, uint64_t);
  void **v15;
  void (*v16)(char *, char *, uint64_t);
  void **v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  Swift::String v23;
  unint64_t v24;
  NSString v25;
  void *v26;
  uint64_t v27;
  void *v28;
  uint64_t inited;
  Swift::String v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __n128 v51;
  id v52;
  __n128 v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void (*v64)(char *, char *, uint64_t);
  uint64_t v65;
  NSObject *v66;
  char *v67;
  os_log_type_t v68;
  uint64_t v69;
  uint8_t *v70;
  void **v71;
  void **v72;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void (*v77)(void);
  NSURL *v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  unint64_t v86;
  void *v87;
  id v88;
  void *v89;
  id v90;
  uint64_t v91;
  char *v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  char *v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  void (*v101)(char *, char *, uint64_t);
  void *v102;
  uint64_t v103;
  uint64_t v104;
  void **v105;
  unint64_t v106;
  uint64_t (*v107)(uint64_t, uint64_t, void *);
  void *v108;
  uint64_t (*v109)();
  uint64_t v110;
  uint64_t v111;
  char v112[8];
  void (*v113)(char *, char *, uint64_t);
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char v118;
  uint64_t v119;
  uint64_t v120;

  v102 = (void *)a1;
  sub_100061504(a1, (uint64_t)v112);
  v101 = v113;
  sub_100012C44(&qword_100405168);
  __chkstk_darwin();
  v97 = (char *)&v91 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for URL(0);
  v99 = *(_QWORD *)(v7 - 8);
  v100 = v7;
  __chkstk_darwin();
  v98 = (char *)&v91 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Logger(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin();
  v95 = v11;
  v96 = (char *)&v91 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v13 = (char *)&v91 - v12;
  v14 = *(void (**)(void ***__return_ptr, uint64_t, uint64_t))(a4 + 56);
  v14(&v105, a2, a4);
  v15 = v105;
  v103 = v10;
  v104 = v9;
  v16 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
  v16(v13, (char *)v105 + OBJC_IVAR____TtC7CoreP2P11AppleDevice_logger, v9);
  swift_release(v15);
  v14(&v105, a2, a4);
  v17 = v105;
  v18 = (char *)sub_10003E864();
  swift_release(v17);
  if (!v18)
  {
    v61 = sub_100012C84();
    v62 = swift_allocError(&type metadata for WiFiError, v61, 0, 0);
    *(_OWORD *)v63 = xmmword_10033B180;
    *(_BYTE *)(v63 + 16) = 0;
    swift_willThrow(v62);
LABEL_14:
    v57 = v103;
    v56 = v104;
    return (*(uint64_t (**)(char *, uint64_t))(v57 + 8))(v13, v56);
  }
  v19 = (uint64_t)v102;
  sub_100061504((uint64_t)v102, (uint64_t)&v114);
  v20 = v114;
  v21 = (void *)v115;
  if (v118 != 1)
  {
    v93 = v115;
    sub_100062908(v19, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100061540);
    v64 = v101;
    v65 = swift_bridgeObjectRetain(v101);
    v66 = Logger.logObject.getter(v65);
    v67 = v13;
    v68 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v66, v68))
    {
      v97 = v18;
      v69 = swift_slowAlloc(12, -1);
      v94 = v20;
      v70 = (uint8_t *)v69;
      v71 = (void **)swift_slowAlloc(32, -1);
      v92 = v67;
      v72 = v71;
      v105 = v71;
      *(_DWORD *)v70 = 136315138;
      swift_bridgeObjectRetain(v64);
      v119 = sub_100013CC8(v94, v93, (uint64_t *)&v105);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v119, &v120);
      sub_100062908(v19, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10006156C);
      sub_100062908(v19, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10006156C);
      swift_bridgeObjectRelease(v64);
      _os_log_impl((void *)&_mh_execute_header, v66, v68, "Would have displayed %s on HUD", v70, 0xCu);
      swift_arrayDestroy(v72, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v72, -1, -1);
      swift_slowDealloc(v70, -1, -1);

      return (*(uint64_t (**)(char *, uint64_t))(v103 + 8))(v92, v104);
    }
    else
    {

      sub_100062908(v19, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10006156C);
      sub_100062908(v19, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10006156C);

      return (*(uint64_t (**)(char *, uint64_t))(v103 + 8))(v67, v104);
    }
  }
  v101 = v16;
  v22 = v117;
  v102 = (void *)v116;
  v105 = 0;
  v106 = 0xE000000000000000;
  swift_bridgeObjectRetain(v115);
  swift_bridgeObjectRetain(v22);
  _StringGuts.grow(_:)(25);
  swift_bridgeObjectRelease(v106);
  v105 = (void **)0xD000000000000017;
  v106 = 0x8000000100362C90;
  v23._countAndFlagsBits = v20;
  v23._object = v21;
  String.append(_:)(v23);
  v24 = v106;
  v25 = String._bridgeToObjectiveC()();
  v94 = v20;
  v26 = v25;
  LODWORD(v24) = objc_msgSend(v18, "askToLaunchTapToRadarWithMessage:", v25, swift_bridgeObjectRelease(v24).n128_f64[0]);

  if (!(_DWORD)v24)
  {
    swift_bridgeObjectRelease(v22);
    swift_bridgeObjectRelease(v21);
    v74 = sub_100012C84();
    v75 = swift_allocError(&type metadata for WiFiError, v74, 0, 0);
    *(_OWORD *)v76 = xmmword_10033B1C0;
    *(_BYTE *)(v76 + 16) = 0;
    swift_willThrow(v75);

    goto LABEL_14;
  }
  v27 = sub_100012C44(&qword_100405170);
  v28 = v21;
  inited = swift_initStackObject(v27, &v111);
  *(_OWORD *)(inited + 16) = xmmword_10033B1D0;
  *(_QWORD *)(inited + 32) = 0x656C746954;
  *(_QWORD *)(inited + 40) = 0xE500000000000000;
  v105 = 0;
  v106 = 0xE000000000000000;
  _StringGuts.grow(_:)(22);
  swift_bridgeObjectRelease(v106);
  v105 = (void **)0xD000000000000014;
  v106 = 0x8000000100362CB0;
  v30._countAndFlagsBits = v94;
  v93 = (unint64_t)v28;
  v30._object = v28;
  String.append(_:)(v30);
  v31 = v106;
  *(_QWORD *)(inited + 48) = v105;
  *(_QWORD *)(inited + 56) = v31;
  *(_QWORD *)(inited + 64) = 0x676169446F747541;
  *(_QWORD *)(inited + 72) = 0xEF73636974736F6ELL;
  *(_QWORD *)(inited + 80) = 0x656E6F6870;
  *(_QWORD *)(inited + 88) = 0xE500000000000000;
  *(_QWORD *)(inited + 96) = 0x7470697263736544;
  *(_QWORD *)(inited + 104) = 0xEB000000006E6F69;
  *(_QWORD *)(inited + 112) = v102;
  *(_QWORD *)(inited + 120) = v22;
  *(_QWORD *)(inited + 128) = 0x6E656E6F706D6F43;
  *(_QWORD *)(inited + 136) = 0xEB00000000444974;
  *(_QWORD *)(inited + 144) = 0x313433373535;
  *(_QWORD *)(inited + 152) = 0xE600000000000000;
  strcpy((char *)(inited + 160), "ComponentName");
  *(_WORD *)(inited + 174) = -4864;
  *(_QWORD *)(inited + 176) = 0x5032502069466957;
  *(_QWORD *)(inited + 184) = 0xE800000000000000;
  *(_QWORD *)(inited + 192) = 0xD000000000000010;
  *(_QWORD *)(inited + 200) = 0x8000000100362CD0;
  *(_QWORD *)(inited + 208) = 5459817;
  *(_QWORD *)(inited + 216) = 0xE300000000000000;
  strcpy((char *)(inited + 224), "Classification");
  *(_BYTE *)(inited + 239) = -18;
  *(_QWORD *)(inited + 240) = 0x2073756F69726553;
  *(_QWORD *)(inited + 248) = 0xEB00000000677542;
  *(_QWORD *)(inited + 256) = 0xD000000000000014;
  *(_QWORD *)(inited + 264) = 0x8000000100362CF0;
  *(_QWORD *)(inited + 272) = 0xD000000000000023;
  *(_QWORD *)(inited + 280) = 0x8000000100362D10;
  v32 = sub_10001EB54(inited);
  sub_1000592F8(v32);
  v34 = v33;
  swift_bridgeObjectRelease(v32);
  v35 = sub_1000596B4(0xD000000000000013, 0x8000000100362D40, v34);
  v37 = v36;
  swift_bridgeObjectRelease(v34);
  v38 = HIBYTE(v37) & 0xF;
  if ((v37 & 0x2000000000000000) == 0)
    v38 = v35;
  v39 = 7;
  if (((v37 >> 60) & ((v35 & 0x800000000000000) == 0)) != 0)
    v39 = 11;
  v40 = String.index(before:)(v39 | (v38 << 16), v35, v37);
  v41 = String.subscript.getter(15, v40, v35, v37);
  v43 = v42;
  v45 = v44;
  v47 = v46;
  swift_bridgeObjectRelease(v37);
  v48 = static String._fromSubstring(_:)(v41, v43, v45, v47);
  v50 = v49;
  v51 = swift_bridgeObjectRelease(v47);
  v52 = v97;
  URL.init(string:)(v48, v50, v51);
  v53 = swift_bridgeObjectRelease(v50);
  v54 = v99;
  v55 = (*(uint64_t (**)(id, uint64_t, uint64_t, __n128))(v99 + 48))(v52, 1, v100, v53);
  v57 = v103;
  v56 = v104;
  if (v55 == 1)
  {
    swift_bridgeObjectRelease(v93);
    sub_100033A84((uint64_t)v52, &qword_100405168);
    v58 = sub_100012C84();
    v59 = swift_allocError(&type metadata for WiFiError, v58, 0, 0);
    *(_OWORD *)v60 = xmmword_10033B1E0;
    *(_BYTE *)(v60 + 16) = 0;
    swift_willThrow(v59);

    return (*(uint64_t (**)(char *, uint64_t))(v57 + 8))(v13, v56);
  }
  v77 = *(void (**)(void))(v54 + 32);
  v92 = v13;
  v77();
  URL._bridgeToObjectiveC()(v78);
  v102 = (void *)v79;
  v80 = v96;
  v101(v96, v92, v56);
  v81 = *(unsigned __int8 *)(v57 + 80);
  v82 = (v81 + 16) & ~v81;
  v97 = v18;
  v83 = (v95 + v82 + 7) & 0xFFFFFFFFFFFFFFF8;
  v84 = swift_allocObject(&unk_1003DD8B0, v83 + 16, v81 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v57 + 32))(v84 + v82, v80, v56);
  v85 = (_QWORD *)(v84 + v83);
  v86 = v93;
  *v85 = v94;
  v85[1] = v86;
  v109 = sub_1000615AC;
  v110 = v84;
  v105 = _NSConcreteStackBlock;
  v106 = 1107296256;
  v107 = sub_100059CBC;
  v108 = &unk_1003DD8C8;
  v87 = _Block_copy(&v105);
  swift_release(v110);
  v88 = v97;
  v89 = v102;
  v90 = objc_msgSend(v97, "tapToRadarWithURL:completionHandler:", v102, v87);
  _Block_release(v87);

  (*(void (**)(char *, uint64_t))(v99 + 8))(v98, v100);
  return (*(uint64_t (**)(char *, uint64_t))(v57 + 8))(v92, v56);
}

void sub_1000592F8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  int64_t v25;
  unint64_t v26;
  Swift::Int v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  BOOL v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t *v40;
  _QWORD v41[2];
  _QWORD *v42;
  int64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int64_t v47;
  _QWORD v48[9];
  _QWORD *v49;

  v2 = type metadata accessor for CharacterSet(0);
  v45 = *(_QWORD *)(v2 - 8);
  v46 = v2;
  __chkstk_darwin();
  v4 = (char *)v41 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(_QWORD *)(a1 + 64);
  v44 = a1 + 64;
  v42 = &_swiftEmptyDictionarySingleton;
  v49 = &_swiftEmptyDictionarySingleton;
  v6 = -1 << *(_BYTE *)(a1 + 32);
  if (-v6 < 64)
    v7 = ~(-1 << -(char)v6);
  else
    v7 = -1;
  v8 = v7 & v5;
  v41[1] = -1 << *(_BYTE *)(a1 + 32);
  v43 = (unint64_t)(63 - v6) >> 6;
  swift_bridgeObjectRetain(a1);
  v47 = 0;
  if (!v8)
    goto LABEL_8;
LABEL_5:
  v9 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  v10 = v9 | (v47 << 6);
  while (1)
  {
    v11 = 16 * v10;
    v12 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v10);
    v14 = *v12;
    v13 = v12[1];
    v15 = (_QWORD *)(*(_QWORD *)(a1 + 56) + v11);
    v16 = v15[1];
    v48[0] = *v15;
    v48[1] = v16;
    swift_bridgeObjectRetain(v13);
    v17 = swift_bridgeObjectRetain(v16);
    static CharacterSet.urlQueryAllowed.getter(v17);
    v18 = sub_10001C920();
    v19 = StringProtocol.addingPercentEncoding(withAllowedCharacters:)(v4, &type metadata for String, v18);
    v21 = v20;
    (*(void (**)(char *, uint64_t))(v45 + 8))(v4, v46);
    if (v21)
    {
      v26 = v42[2];
      if (v42[3] <= v26)
        sub_10014291C(v26 + 1, 1);
      v42 = v49;
      Hasher.init(_seed:)(v48);
      String.hash(into:)(v48, v14, v13);
      v27 = Hasher._finalize()();
      v28 = (char *)(v42 + 8);
      v29 = -1 << *((_BYTE *)v42 + 32);
      v30 = v27 & ~v29;
      v31 = v30 >> 6;
      if (((-1 << v30) & ~v42[(v30 >> 6) + 8]) == 0)
      {
        v33 = 0;
        v34 = (unint64_t)(63 - v29) >> 6;
        while (++v31 != v34 || (v33 & 1) == 0)
        {
          v35 = v31 == v34;
          if (v31 == v34)
            v31 = 0;
          v33 |= v35;
          v36 = *(_QWORD *)&v28[8 * v31];
          if (v36 != -1)
          {
            v32 = __clz(__rbit64(~v36)) + (v31 << 6);
            goto LABEL_36;
          }
        }
        goto LABEL_40;
      }
      v32 = __clz(__rbit64((-1 << v30) & ~*(_QWORD *)&v28[8 * (v30 >> 6)])) | v30 & 0x7FFFFFFFFFFFFFC0;
LABEL_36:
      *(_QWORD *)&v28[(v32 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v32;
      v37 = v42;
      v38 = 16 * v32;
      v39 = (_QWORD *)(v42[6] + v38);
      *v39 = v14;
      v39[1] = v13;
      v40 = (uint64_t *)(v37[7] + v38);
      *v40 = v19;
      v40[1] = v21;
      ++v37[2];
      swift_bridgeObjectRelease(v16);
      if (v8)
        goto LABEL_5;
    }
    else
    {
      swift_bridgeObjectRelease(v16);
      swift_bridgeObjectRelease(v13);
      if (v8)
        goto LABEL_5;
    }
LABEL_8:
    v22 = v47 + 1;
    if (__OFADD__(v47, 1))
    {
      __break(1u);
LABEL_40:
      __break(1u);
      goto LABEL_41;
    }
    if (v22 >= v43)
      goto LABEL_38;
    v23 = *(_QWORD *)(v44 + 8 * v22);
    v24 = v47 + 1;
    if (!v23)
    {
      v24 = v47 + 2;
      if (v47 + 2 >= v43)
        goto LABEL_38;
      v23 = *(_QWORD *)(v44 + 8 * v24);
      if (!v23)
      {
        v24 = v47 + 3;
        if (v47 + 3 >= v43)
          goto LABEL_38;
        v23 = *(_QWORD *)(v44 + 8 * v24);
        if (!v23)
        {
          v24 = v47 + 4;
          if (v47 + 4 >= v43)
            goto LABEL_38;
          v23 = *(_QWORD *)(v44 + 8 * v24);
          if (!v23)
            break;
        }
      }
    }
LABEL_23:
    v8 = (v23 - 1) & v23;
    v10 = __clz(__rbit64(v23)) + (v24 << 6);
    v47 = v24;
  }
  v25 = v47 + 5;
  if (v47 + 5 >= v43)
  {
LABEL_38:
    sub_100062B6C(a1);
    return;
  }
  v23 = *(_QWORD *)(v44 + 8 * v25);
  if (v23)
  {
    v24 = v47 + 5;
    goto LABEL_23;
  }
  while (1)
  {
    v24 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v24 >= v43)
      goto LABEL_38;
    v23 = *(_QWORD *)(v44 + 8 * v24);
    ++v25;
    if (v23)
      goto LABEL_23;
  }
LABEL_41:
  __break(1u);
}

uint64_t sub_1000596B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t result;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  void *v16;
  uint64_t *v17;
  void *v18;
  uint64_t v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  int64_t v28;

  v6 = 1 << *(_BYTE *)(a3 + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(a3 + 64);
  v28 = (unint64_t)(v6 + 63) >> 6;
  swift_bridgeObjectRetain(a2);
  result = swift_bridgeObjectRetain(a3);
  v10 = 0;
  while (1)
  {
    if (v8)
    {
      v11 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v12 = v11 | (v10 << 6);
      goto LABEL_5;
    }
    v24 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v24 >= v28)
      goto LABEL_23;
    v25 = *(_QWORD *)(v27 + 8 * v24);
    ++v10;
    if (!v25)
    {
      v10 = v24 + 1;
      if (v24 + 1 >= v28)
        goto LABEL_23;
      v25 = *(_QWORD *)(v27 + 8 * v10);
      if (!v25)
      {
        v10 = v24 + 2;
        if (v24 + 2 >= v28)
          goto LABEL_23;
        v25 = *(_QWORD *)(v27 + 8 * v10);
        if (!v25)
        {
          v10 = v24 + 3;
          if (v24 + 3 >= v28)
            goto LABEL_23;
          v25 = *(_QWORD *)(v27 + 8 * v10);
          if (!v25)
            break;
        }
      }
    }
LABEL_22:
    v8 = (v25 - 1) & v25;
    v12 = __clz(__rbit64(v25)) + (v10 << 6);
LABEL_5:
    v13 = 16 * v12;
    v14 = (uint64_t *)(*(_QWORD *)(a3 + 48) + v13);
    v15 = *v14;
    v16 = (void *)v14[1];
    v17 = (uint64_t *)(*(_QWORD *)(a3 + 56) + v13);
    v19 = *v17;
    v18 = (void *)v17[1];
    swift_bridgeObjectRetain(v16);
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(a2);
    v20._countAndFlagsBits = v15;
    v20._object = v16;
    String.append(_:)(v20);
    swift_bridgeObjectRetain(a2);
    v21._countAndFlagsBits = 61;
    v21._object = (void *)0xE100000000000000;
    String.append(_:)(v21);
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRetain(a2);
    v22._countAndFlagsBits = v19;
    v22._object = v18;
    String.append(_:)(v22);
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRetain(a2);
    v23._countAndFlagsBits = 38;
    v23._object = (void *)0xE100000000000000;
    String.append(_:)(v23);
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(v18);
    swift_bridgeObjectRelease(v16);
    result = swift_bridgeObjectRelease(a2);
  }
  v26 = v24 + 4;
  if (v26 >= v28)
  {
LABEL_23:
    swift_release(a3);
    return a1;
  }
  v25 = *(_QWORD *)(v27 + 8 * v26);
  if (v25)
  {
    v10 = v26;
    goto LABEL_22;
  }
  while (1)
  {
    v10 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v10 >= v28)
      goto LABEL_23;
    v25 = *(_QWORD *)(v27 + 8 * v10);
    ++v26;
    if (v25)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

void sub_100059934(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  NSObject *oslog;
  uint64_t v21;
  uint64_t v22;

  if (a2)
  {
    swift_errorRetain(a2);
    swift_bridgeObjectRetain(a5);
    swift_errorRetain(a2);
    swift_bridgeObjectRetain(a5);
    v8 = swift_errorRetain(a2);
    v9 = Logger.logObject.getter(v8);
    v10 = static os_log_type_t.error.getter(v9);
    if (os_log_type_enabled(v9, v10))
    {
      v11 = swift_slowAlloc(22, -1);
      v12 = (uint64_t *)swift_slowAlloc(8, -1);
      v13 = swift_slowAlloc(32, -1);
      v22 = v13;
      *(_DWORD *)v11 = 136315394;
      swift_bridgeObjectRetain(a5);
      v21 = sub_100013CC8(a4, a5, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22);
      swift_bridgeObjectRelease_n(a5, 3);
      *(_WORD *)(v11 + 12) = 2112;
      swift_errorRetain(a2);
      v14 = _swift_stdlib_bridgeErrorToNSError(a2);
      v21 = v14;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22);
      *v12 = v14;
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Failed to create tap to radar %s because %@", (uint8_t *)v11, 0x16u);
      v15 = sub_100012C44(&qword_100404BB0);
      swift_arrayDestroy(v12, 1, v15);
      swift_slowDealloc(v12, -1, -1);
      swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v13, -1, -1);
      swift_slowDealloc(v11, -1, -1);
      swift_errorRelease(a2);

    }
    else
    {
      swift_errorRelease(a2);
      swift_bridgeObjectRelease_n(a5, 2);

      swift_errorRelease(a2);
      swift_errorRelease(a2);
    }
  }
  else
  {
    v16 = swift_bridgeObjectRetain_n(a5, 2);
    oslog = Logger.logObject.getter(v16);
    v17 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(oslog, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc(12, -1);
      v19 = swift_slowAlloc(32, -1);
      v22 = v19;
      *(_DWORD *)v18 = 136315138;
      swift_bridgeObjectRetain(a5);
      v21 = sub_100013CC8(a4, a5, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22);
      swift_bridgeObjectRelease_n(a5, 3);
      _os_log_impl((void *)&_mh_execute_header, oslog, v17, "Created tap to radar: %s", v18, 0xCu);
      swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v19, -1, -1);
      swift_slowDealloc(v18, -1, -1);

    }
    else
    {
      swift_bridgeObjectRelease_n(a5, 2);

    }
  }
}

uint64_t sub_100059CBC(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  void (*v5)(uint64_t, void *);
  uint64_t v6;
  id v7;

  v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  if (a2)
    v6 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(a2, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
  else
    v6 = 0;
  swift_retain(v4);
  v7 = a3;
  v5(v6, a3);
  swift_release(v4);

  return swift_bridgeObjectRelease(v6);
}

uint64_t AppleDevice.EventSource.init(driver:eventHandler:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t, uint64_t);
  __n128 v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v25;
  _QWORD v26[4];
  uint64_t Strong;

  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(a5 + 56))(v26, a4, a5);
  v14 = v26[0];
  swift_unknownObjectUnownedInit(a8, v26[0]);
  swift_unknownObjectRelease(v14);
  v22 = a6;
  v15 = (*(uint64_t (**)(uint64_t, uint64_t))(a6 + 40))(a4, a6);
  v17 = v16;
  *(_QWORD *)(a8 + 8) = v15;
  *(_QWORD *)(a8 + 16) = v16;
  Strong = swift_unknownObjectUnownedLoadStrong(a8);
  v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(a7 + 40);
  swift_getAssociatedTypeWitness(0, a5, a4, &protocol requirements base descriptor for DeviceDriver);
  swift_bridgeObjectRetain(v17);
  v18(v15, v17, a2);
  swift_release(a3);
  v19 = swift_bridgeObjectRelease(v17);
  (*(void (**)(uint64_t, uint64_t, __n128))(*(_QWORD *)(a4 - 8) + 8))(a1, a4, v19);
  if (!v25)
    return swift_unknownObjectRelease(Strong);
  swift_unknownObjectRelease(Strong);
  v26[0] = a4;
  v26[1] = a5;
  v26[2] = v22;
  v26[3] = a7;
  v20 = type metadata accessor for AppleDevice.EventSource(0, (uint64_t)v26);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(a8, v20);
}

Swift::Void __swiftcall AppleDevice.EventSource.stop()()
{
  _QWORD *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t Strong;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t AssociatedTypeWitness;
  _BYTE v10[24];

  v2 = v0;
  v3 = *(v0 - 1);
  (*(void (**)(_BYTE *))(v3 + 16))(v10);
  Strong = swift_unknownObjectUnownedLoadStrong(v10);
  (*(void (**)(_BYTE *, _QWORD *))(v3 + 8))(v10, v2);
  v5 = *(_QWORD *)(v1 + 8);
  v6 = *(_QWORD *)(v1 + 16);
  v7 = v2[5];
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 48);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, v2[3], v2[2], &protocol requirements base descriptor for DeviceDriver, &associated type descriptor for DeviceDriver.Device);
  v8(v5, v6, AssociatedTypeWitness, v7);
  swift_unknownObjectRelease(Strong);
}

uint64_t sub_100059FB0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  return AppleDevice.EventSource.init(driver:eventHandler:)(a1, a2, a3, a4[2], a4[3], a4[4], a4[5], a5);
}

uint64_t sub_100059FD4(uint64_t a1)
{
  uint64_t WitnessTable;

  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for AppleDevice.EventSource<A>, a1);
  return Device.customMirror.getter(a1, WitnessTable);
}

uint64_t sub_10005A018(char a1)
{
  return sub_100055F28(a1, (uint64_t)&unk_1003DE1E8, (uint64_t)sub_10005FEB0, (uint64_t)&unk_1003DE200);
}

uint64_t sub_10005A050()
{
  return sub_1000546E8((uint64_t)sub_10005FED4, (uint64_t)&unk_1003DE1B0);
}

uint64_t sub_10005A080()
{
  return sub_1000546E8((uint64_t)sub_10005FEDC, (uint64_t)&unk_1003DE188);
}

uint64_t sub_10005A0B0(uint64_t a1, uint64_t a2)
{
  return sub_100054B48(a1, a2);
}

BOOL sub_10005A0E8()
{
  return sub_100053A14();
}

uint64_t sub_10005A110(char a1)
{
  return sub_100055830(a1, (uint64_t)&unk_1003DE0F8, (uint64_t)sub_100064514, (uint64_t)&unk_1003DE110);
}

uint64_t sub_10005A148(char a1)
{
  return sub_100055F28(a1, (uint64_t)&unk_1003DE0A8, (uint64_t)sub_10005FEFC, (uint64_t)&unk_1003DE0C0);
}

uint64_t sub_10005A180(uint64_t a1)
{
  return sub_1000580B0(a1, (uint64_t)&unk_1003DE058, (uint64_t)sub_1000615AC, (uint64_t)&unk_1003DE070);
}

uint64_t sub_10005A1BC(char a1)
{
  return sub_100051838(a1 & 1, (_QWORD *(*)(uint64_t *__return_ptr, _QWORD *))sub_10000642C);
}

uint64_t sub_10005A1EC(uint64_t a1)
{
  return sub_100051E08(a1 & 0xFFFFFFFFFFFFLL, (_QWORD *(*)(uint64_t *__return_ptr, _QWORD *))sub_10000642C);
}

uint64_t sub_10005A21C(unint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10005E578(a1, a2, a3, (_QWORD *(*)(uint64_t *__return_ptr, _QWORD *))sub_10000642C);
}

uint64_t sub_10005A23C(_QWORD *a1)
{
  return sub_100053404(a1, (_QWORD *(*)(uint64_t *__return_ptr, _QWORD *))sub_10000642C, (_QWORD *(*)(uint64_t *__return_ptr, _QWORD *))sub_10000642C);
}

uint64_t sub_10005A26C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10005E638(a1, a2, a3, 7u, (_QWORD *(*)(uint64_t *__return_ptr, _QWORD *))sub_10000642C);
}

uint64_t sub_10005A28C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10005E638(a1, a2, a3, 8u, (_QWORD *(*)(uint64_t *__return_ptr, _QWORD *))sub_10000642C);
}

uint64_t sub_10005A2AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_10005E67C(a1, a2, a3, a4, a5, a6, a7, 2u);
}

uint64_t sub_10005A2C4()
{
  return sub_10005E70C();
}

uint64_t sub_10005A2DC()
{
  return sub_100056388((uint64_t)&unk_1003DDFB8, (uint64_t)sub_100062A34);
}

uint64_t sub_10005A30C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 40);
  v2 = *(_QWORD *)(v1 + 128);
  *(_QWORD *)(v1 + 128) = 0;
  return swift_release(v2);
}

uint64_t sub_10005A324(uint64_t a1, uint64_t a2)
{
  return sub_100056654(a1, a2, (uint64_t)&unk_1003DDF90, (uint64_t)sub_1000646E0);
}

uint64_t sub_10005A354()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 40);
  v2 = *(_QWORD *)(v1 + 120);
  *(_QWORD *)(v1 + 120) = 0;
  return swift_release(v2);
}

uint64_t sub_10005A368(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, void (*a6)(void), uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_100056ABC(a1, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t)&unk_1003DDF68, (uint64_t)sub_100064510);
}

uint64_t sub_10005A3AC(unint64_t a1)
{
  return sub_1000571D8(a1);
}

uint64_t sub_10005A3CC()
{
  return sub_1000574E4();
}

uint64_t sub_10005A3EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(void), uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_100062414(a1, a2, a3, a6, a7, a8, a9);
}

uint64_t sub_10005A41C()
{
  return sub_100057A54();
}

void sub_10005A43C()
{
  sub_100057E2C();
}

uint64_t sub_10005A45C(unint64_t a1, uint64_t a2)
{
  return sub_10005A4A4(a1, a2);
}

uint64_t sub_10005A4A4(unint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _OWORD v9[3];
  uint64_t v10;
  uint64_t v11;

  v4 = *(_OWORD *)(a2 + 16);
  v9[0] = *(_OWORD *)a2;
  v9[1] = v4;
  v9[2] = *(_OWORD *)(a2 + 32);
  v10 = *(_QWORD *)(a2 + 48);
  v5 = v2[5];
  v6 = v2[2];
  v7 = v2[3];
  swift_retain();
  swift_bridgeObjectRetain(v7);
  AppleDevice.setRequest(requestType:data:on:)(a1, (uint64_t)v9, (uint64_t)&v11, 0, v6, v7);
  swift_bridgeObjectRelease(v7);
  return swift_release(v5);
}

uint64_t sub_10005A574(unint64_t a1, uint64_t a2)
{
  return sub_10005B044(a1, a2);
}

uint64_t sub_10005A5BC(unint64_t a1, int a2, uint64_t a3)
{
  return sub_10005B118(a1, a2, a3);
}

uint64_t sub_10005A604(unint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  return sub_10005B1D8(a1, a2, a3, a4);
}

uint64_t sub_10005A64C(unint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  __int16 v10;
  char v11;
  char v12;
  char v13;
  char v14;
  uint64_t v15;

  v9 = a2;
  v10 = a3;
  v11 = BYTE2(a3);
  v12 = BYTE3(a3);
  v13 = BYTE4(a3);
  v14 = BYTE5(a3);
  v5 = v3[5];
  v6 = v3[2];
  v7 = v3[3];
  swift_retain();
  swift_bridgeObjectRetain(v7);
  AppleDevice.setRequest(requestType:data:on:)(a1, (uint64_t)&v9, (uint64_t)&v15, 0, v6, v7);
  swift_bridgeObjectRelease(v7);
  return swift_release(v5);
}

uint64_t sub_10005A738(unint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;

  v8 = a2;
  v4 = v2[5];
  v5 = v2[2];
  v6 = v2[3];
  swift_retain();
  swift_bridgeObjectRetain(v6);
  AppleDevice.setRequest(requestType:data:on:)(a1, (uint64_t)&v8, (uint64_t)&v9, 0, v5, v6);
  swift_bridgeObjectRelease(v6);
  return swift_release(v4);
}

uint64_t sub_10005A7F4(unint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v8;
  char v9;
  uint64_t v10;

  v8 = a2;
  v9 = BYTE4(a2);
  v4 = v2[5];
  v5 = v2[2];
  v6 = v2[3];
  swift_retain();
  swift_bridgeObjectRetain(v6);
  AppleDevice.setRequest(requestType:data:on:)(a1, (uint64_t)&v8, (uint64_t)&v10, 0, v5, v6);
  swift_bridgeObjectRelease(v6);
  return swift_release(v4);
}

uint64_t sub_10005A8B8(unint64_t a1, char a2)
{
  return sub_10005AB14(a1, a2);
}

uint64_t sub_10005A900(unint64_t a1, uint64_t a2, int a3)
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  int v10;
  uint64_t v11;

  v9 = a2;
  v10 = a3;
  v5 = v3[5];
  v6 = v3[2];
  v7 = v3[3];
  swift_retain();
  swift_bridgeObjectRetain(v7);
  AppleDevice.setRequest(requestType:data:on:)(a1, (uint64_t)&v9, (uint64_t)&v11, 0, v6, v7);
  swift_bridgeObjectRelease(v7);
  return swift_release(v5);
}

uint64_t sub_10005AA10(unint64_t a1, __int16 a2)
{
  return sub_10005AA58(a1, a2);
}

uint64_t sub_10005AA58(unint64_t a1, __int16 a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int16 v8;
  uint64_t v9;

  v8 = a2;
  v4 = v2[5];
  v5 = v2[2];
  v6 = v2[3];
  swift_retain();
  swift_bridgeObjectRetain(v6);
  AppleDevice.setRequest(requestType:data:on:)(a1, (uint64_t)&v8, (uint64_t)&v9, 0, v5, v6);
  swift_bridgeObjectRelease(v6);
  return swift_release(v4);
}

uint64_t sub_10005AB14(unint64_t a1, char a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;
  uint64_t v9;

  v8 = a2;
  v4 = v2[5];
  v5 = v2[2];
  v6 = v2[3];
  swift_retain();
  swift_bridgeObjectRetain(v6);
  AppleDevice.setRequest(requestType:data:on:)(a1, (uint64_t)&v8, (uint64_t)&v9, 0, v5, v6);
  swift_bridgeObjectRelease(v6);
  return swift_release(v4);
}

uint64_t sub_10005ABD0(unint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int16 v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;

  v10 = a2;
  v11 = HIDWORD(a2);
  v12 = a3;
  v13 = a4;
  v6 = v4[5];
  v7 = v4[2];
  v8 = v4[3];
  swift_retain();
  swift_bridgeObjectRetain(v8);
  AppleDevice.setRequest(requestType:data:on:)(a1, (uint64_t)&v10, (uint64_t)&v14, 0, v7, v8);
  swift_bridgeObjectRelease(v8);
  return swift_release(v6);
}

uint64_t sub_10005ACF4(unint64_t a1, const void *a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE __dst[2060];
  uint64_t v9;

  memcpy(__dst, a2, sizeof(__dst));
  v4 = v2[5];
  v5 = v2[2];
  v6 = v2[3];
  swift_retain();
  swift_bridgeObjectRetain(v6);
  AppleDevice.setRequest(requestType:data:on:)(a1, (uint64_t)__dst, (uint64_t)&v9, 0, v5, v6);
  swift_bridgeObjectRelease(v6);
  return swift_release(v4);
}

uint64_t sub_10005ADC8(unint64_t a1, uint64_t a2, int a3)
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int16 v9;
  char v10;
  char v11;
  char v12;
  char v13;
  char v14;
  int v15;
  uint64_t v16;

  v9 = a2;
  v10 = BYTE2(a2);
  v11 = BYTE3(a2);
  v12 = BYTE4(a2);
  v13 = BYTE5(a2);
  v14 = BYTE6(a2);
  v15 = a3;
  v5 = v3[5];
  v6 = v3[2];
  v7 = v3[3];
  swift_retain();
  swift_bridgeObjectRetain(v7);
  AppleDevice.setRequest(requestType:data:on:)(a1, (uint64_t)&v9, (uint64_t)&v16, 0, v6, v7);
  swift_bridgeObjectRelease(v7);
  return swift_release(v5);
}

uint64_t sub_10005AEB8(unint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE v8[4];
  int v9;
  uint64_t v10;

  v8[0] = a2;
  v9 = HIDWORD(a2);
  v4 = v2[5];
  v5 = v2[2];
  v6 = v2[3];
  swift_retain();
  swift_bridgeObjectRetain(v6);
  AppleDevice.setRequest(requestType:data:on:)(a1, (uint64_t)v8, (uint64_t)&v10, 0, v5, v6);
  swift_bridgeObjectRelease(v6);
  return swift_release(v4);
}

uint64_t sub_10005AF7C(unint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v9[4];
  int v10;
  char v11;
  uint64_t v12;

  v9[0] = a2;
  v10 = HIDWORD(a2);
  v11 = a3;
  v5 = v3[5];
  v6 = v3[2];
  v7 = v3[3];
  swift_retain();
  swift_bridgeObjectRetain(v7);
  AppleDevice.setRequest(requestType:data:on:)(a1, (uint64_t)v9, (uint64_t)&v12, 0, v6, v7);
  swift_bridgeObjectRelease(v7);
  return swift_release(v5);
}

uint64_t sub_10005B044(unint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v8;
  char v9;
  char v10;
  char v11;
  uint64_t v12;

  v8 = a2;
  v9 = BYTE4(a2);
  v10 = BYTE5(a2);
  v11 = BYTE6(a2);
  v4 = v2[5];
  v5 = v2[2];
  v6 = v2[3];
  swift_retain();
  swift_bridgeObjectRetain(v6);
  AppleDevice.setRequest(requestType:data:on:)(a1, (uint64_t)&v8, (uint64_t)&v12, 0, v5, v6);
  swift_bridgeObjectRelease(v6);
  return swift_release(v4);
}

uint64_t sub_10005B118(unint64_t a1, int a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v9;
  uint64_t v10;
  uint64_t v11;

  v9 = a2;
  v10 = a3;
  v5 = v3[5];
  v6 = v3[2];
  v7 = v3[3];
  swift_retain();
  swift_bridgeObjectRetain(v7);
  AppleDevice.setRequest(requestType:data:on:)(a1, (uint64_t)&v9, (uint64_t)&v11, 0, v6, v7);
  swift_bridgeObjectRelease(v7);
  return swift_release(v5);
}

uint64_t sub_10005B1D8(unint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[2];
  int v11;
  uint64_t v12;

  v10[0] = a2;
  v10[1] = a3;
  v11 = a4;
  v6 = v4[5];
  v7 = v4[2];
  v8 = v4[3];
  swift_retain();
  swift_bridgeObjectRetain(v8);
  AppleDevice.setRequest(requestType:data:on:)(a1, (uint64_t)v10, (uint64_t)&v12, 0, v7, v8);
  swift_bridgeObjectRelease(v8);
  return swift_release(v6);
}

double sub_10005B2A4@<D0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  char v4;
  double result;

  dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
  if ((v4 & 1) == 0)
    __asm { BR              X9 }
  *(_QWORD *)(a2 + 32) = 0;
  result = 0.0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  return result;
}

uint64_t sub_10005B4F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;

  swift_getAtKeyPath(&a17, v21 - 116, v17);
  if ((unsigned __int16)a17 != BYTE6(v18))
    JUMPOUT(0x10005B39CLL);
  sub_100031FEC(v19, v18);
  sub_10001F11C((uint64_t)_swiftEmptyArrayStorage);
  v22 = type metadata accessor for BinaryDecoder();
  v23 = (_QWORD *)swift_allocObject(v22, 48, 7);
  v23[5] = &_swiftEmptyDictionarySingleton;
  v23[2] = v19;
  v23[3] = v18;
  return ((uint64_t (*)(_QWORD *))((char *)&loc_10005B59C + *((int *)qword_10005B710 + v20)))(v23 + 5);
}

double sub_10005B720@<D0>(uint64_t a1@<X3>, _OWORD *a2@<X8>)
{
  char v4;
  double result;

  dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
  if ((v4 & 1) == 0)
    __asm { BR              X9 }
  result = 0.0;
  *a2 = 0u;
  a2[1] = 0u;
  return result;
}

uint64_t sub_10005B994(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;

  swift_getAtKeyPath(&a22, v26 - 106, v22);
  if ((unsigned __int16)a22 != BYTE6(v23))
    JUMPOUT(0x10005B818);
  sub_100031FEC(v24, v23);
  sub_10001F11C((uint64_t)_swiftEmptyArrayStorage);
  v27 = type metadata accessor for BinaryDecoder();
  v28 = (_QWORD *)swift_allocObject(v27, 48, 7);
  v28[5] = &_swiftEmptyDictionarySingleton;
  v28[2] = v24;
  v28[3] = v23;
  return ((uint64_t (*)(_QWORD *))((char *)&loc_10005BA38 + *((int *)qword_10005BBC8 + v25)))(v28 + 5);
}

double sub_10005BBD8@<D0>(uint64_t a1@<X3>, _OWORD *a2@<X8>)
{
  char v4;
  double result;

  dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
  if ((v4 & 1) == 0)
    __asm { BR              X9 }
  result = 0.0;
  *a2 = 0u;
  a2[1] = 0u;
  return result;
}

uint64_t sub_10005BE84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;

  swift_getAtKeyPath(&a28, v32 - 110, v28);
  if ((unsigned __int16)a28 != BYTE6(v29))
    JUMPOUT(0x10005BCD0);
  sub_100031FEC(v30, v29);
  sub_10001F11C((uint64_t)_swiftEmptyArrayStorage);
  v33 = type metadata accessor for BinaryDecoder();
  v34 = (_QWORD *)swift_allocObject(v33, 48, 7);
  v34[5] = &_swiftEmptyDictionarySingleton;
  v34[2] = v30;
  v34[3] = v29;
  return ((uint64_t (*)(_QWORD *))((char *)&loc_10005BF28 + *((int *)qword_10005C0E0 + v31)))(v34 + 5);
}

uint64_t sub_10005C0F0@<X0>(uint64_t a1@<X3>, _QWORD *a2@<X8>)
{
  uint64_t result;
  char v5;

  result = dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
  if ((v5 & 1) == 0)
    __asm { BR              X9 }
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  return result;
}

uint64_t sub_10005C35C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;

  swift_getAtKeyPath(&a21, v25 - 104, v21);
  if ((unsigned __int16)a21 != BYTE6(v22))
    JUMPOUT(0x10005C1E8);
  sub_100031FEC(v23, v22);
  sub_10001F11C((uint64_t)_swiftEmptyArrayStorage);
  v26 = type metadata accessor for BinaryDecoder();
  v27 = (_QWORD *)swift_allocObject(v26, 48, 7);
  v27[5] = &_swiftEmptyDictionarySingleton;
  v27[2] = v23;
  v27[3] = v22;
  return ((uint64_t (*)(_QWORD *))((char *)&loc_10005C400 + *((int *)qword_10005C588 + v24)))(v27 + 5);
}

double sub_10005C598@<D0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  char v4;
  double result;

  dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
  if ((v4 & 1) == 0)
    __asm { BR              X9 }
  *(_QWORD *)(a2 + 32) = 0;
  result = 0.0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  return result;
}

uint64_t sub_10005C7F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;

  swift_getAtKeyPath(&a17, v21 - 116, v17);
  if ((unsigned __int16)a17 != BYTE6(v18))
    JUMPOUT(0x10005C694);
  sub_100031FEC(v19, v18);
  sub_10001F11C((uint64_t)_swiftEmptyArrayStorage);
  v22 = type metadata accessor for BinaryDecoder();
  v23 = (_QWORD *)swift_allocObject(v22, 48, 7);
  v23[5] = &_swiftEmptyDictionarySingleton;
  v23[2] = v19;
  v23[3] = v18;
  return ((uint64_t (*)(_QWORD *))((char *)&loc_10005C894 + *((int *)qword_10005CA08 + v20)))(v23 + 5);
}

uint64_t sub_10005CA18@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  char v4;
  _BYTE v6[224];

  dispatch thunk of AnyKeyPath._storedInlineOffset.getter();
  if ((v4 & 1) == 0)
    __asm { BR              X9 }
  sub_100063FA8((uint64_t)v6);
  return sub_100063EB8((uint64_t)v6, a2, &qword_100405C38);
}

uint64_t sub_10005CC50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  _QWORD *v31;

  swift_getAtKeyPath(&a26, &a22, v27);
  if ((unsigned __int16)a26 != BYTE6(v26))
    JUMPOUT(0x10005CB14);
  sub_100031FEC(v28, v26);
  sub_10001F11C((uint64_t)_swiftEmptyArrayStorage);
  v30 = type metadata accessor for BinaryDecoder();
  v31 = (_QWORD *)swift_allocObject(v30, 48, 7);
  v31[5] = &_swiftEmptyDictionarySingleton;
  v31[2] = v28;
  v31[3] = v26;
  return ((uint64_t (*)(_QWORD *))((char *)&loc_10005CCFC + *((int *)qword_10005CE48 + v29)))(v31 + 5);
}

void sub_10005CE58(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }
}

uint64_t sub_10005CE90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;

  if (BYTE6(a2) == 12)
  {
    sub_100216124(a1, a2);
    if (!a3)
      return v4;
    swift_errorRelease(a3);
  }
  return 0;
}

void sub_10005CF28(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

void sub_10005CFFC(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

void sub_10005D030(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (BYTE6(a2) == 28)
  {
    sub_1002156A8(a1, a2);
    *(_BYTE *)(v2 + 28) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 0;
    *(_QWORD *)(v2 + 8) = 0;
    *(_DWORD *)(v2 + 24) = 0;
    *(_QWORD *)(v2 + 16) = 0;
    *(_BYTE *)(v2 + 28) = 1;
  }
}

void sub_10005D0C0(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

void sub_10005D0F4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (BYTE6(a2) == 20)
  {
    sub_100215550(a1, a2);
    *(_BYTE *)(v2 + 20) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 0;
    *(_QWORD *)(v2 + 8) = 0;
    *(_DWORD *)(v2 + 16) = 0;
    *(_BYTE *)(v2 + 20) = 1;
  }
}

void sub_10005D180(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

void sub_10005D1B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (BYTE6(a2) == 20)
  {
    sub_1002153A0(a1, a2);
    *(_BYTE *)(v2 + 20) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 0;
    *(_QWORD *)(v2 + 8) = 0;
    *(_DWORD *)(v2 + 16) = 0;
    *(_BYTE *)(v2 + 20) = 1;
  }
}

void sub_10005D240(uint64_t a1, uint64_t a2)
{
  __asm { BR              X13 }
}

unint64_t sub_10005D278@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;

  if (BYTE6(a2) == 10)
  {
    sub_1002150E0(a1, a2);
    if (!a3)
      return v4 & 0xFFFFFFFFFFFFLL | ((unint64_t)HIWORD(v4) << 48);
    swift_errorRelease(a3);
  }
  return 0;
}

void sub_10005D318(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

void sub_10005D3EC(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

void sub_10005D420(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (BYTE6(a2) == 72)
  {
    sub_100214E04(a1, a2);
    *(_BYTE *)(v2 + 72) = 0;
  }
  else
  {
    *(_QWORD *)(v2 + 64) = 0;
    *(_OWORD *)(v2 + 32) = 0u;
    *(_OWORD *)(v2 + 48) = 0u;
    *(_OWORD *)v2 = 0u;
    *(_OWORD *)(v2 + 16) = 0u;
    *(_BYTE *)(v2 + 72) = 1;
  }
}

void sub_10005D4B4(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

void sub_10005D4E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (BYTE6(a2) == 36)
  {
    sub_100214CAC(a1, a2);
    *(_BYTE *)(v2 + 36) = 0;
  }
  else
  {
    *(_DWORD *)(v2 + 32) = 0;
    *(_OWORD *)v2 = 0u;
    *(_OWORD *)(v2 + 16) = 0u;
    *(_BYTE *)(v2 + 36) = 1;
  }
}

void sub_10005D578(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

void sub_10005D64C(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

void sub_10005D720(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_10005D754(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE v4[256];

  if (BYTE6(a2) == 208)
  {
    sub_1002146FC(a1, a2);
    return NANBitmap.Channel.operatingClass.getter(v2);
  }
  else
  {
    sub_100064030((uint64_t)v4);
    return sub_100063EB8((uint64_t)v4, v2, &qword_100405C10);
  }
}

void sub_10005D7FC(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_10005D834(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;

  if (BYTE6(a2) != 16)
    return 0;
  sub_100214498(a1, a2);
  if (!a4)
    return v5;
  swift_errorRelease(a4);
  return 0;
}

void sub_10005D8D0(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

void sub_10005D904(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (BYTE6(a2) == 68)
  {
    sub_100214320(a1, a2);
    *(_BYTE *)(v2 + 68) = 0;
  }
  else
  {
    *(_DWORD *)(v2 + 64) = 0;
    *(_OWORD *)(v2 + 32) = 0u;
    *(_OWORD *)(v2 + 48) = 0u;
    *(_OWORD *)v2 = 0u;
    *(_OWORD *)(v2 + 16) = 0u;
    *(_BYTE *)(v2 + 68) = 1;
  }
}

void sub_10005D998(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

void sub_10005DA6C(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

void sub_10005DAA0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (BYTE6(a2) == 40)
  {
    sub_100213F2C(a1, a2);
    *(_BYTE *)(v2 + 40) = 0;
  }
  else
  {
    *(_QWORD *)(v2 + 32) = 0;
    *(_OWORD *)v2 = 0u;
    *(_OWORD *)(v2 + 16) = 0u;
    *(_BYTE *)(v2 + 40) = 1;
  }
}

void sub_10005DB30(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_10005DB64(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE v4[240];

  if (BYTE6(a2) == 184)
  {
    sub_100213DAC(a1, a2);
    return sub_1000640C4(v2);
  }
  else
  {
    sub_100064098((uint64_t)v4);
    return sub_100063EB8((uint64_t)v4, v2, &qword_100405BE8);
  }
}

void sub_10005DC0C(uint64_t a1, uint64_t a2)
{
  __asm { BR              X12 }
}

unint64_t sub_10005DC40(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  unsigned int v4;
  unsigned __int8 v5;

  if (BYTE6(a2) == 4)
  {
    v4 = a3();
    v5 = 0;
  }
  else
  {
    v4 = 0;
    v5 = 1;
  }
  return v4 | ((unint64_t)v5 << 32);
}

void sub_10005DCD0(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

void sub_10005DDA4(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

void sub_10005DDD8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (BYTE6(a2) == 24)
  {
    sub_1002139C0(a1, a2);
    *(_BYTE *)(v2 + 24) = 0;
  }
  else
  {
    *(_QWORD *)v2 = 0;
    *(_QWORD *)(v2 + 8) = 0;
    *(_QWORD *)(v2 + 16) = 0;
    *(_BYTE *)(v2 + 24) = 1;
  }
}

void sub_10005DE64(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

void sub_10005DE98(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  if (BYTE6(a2) == 104)
  {
    sub_100213828(a1, a2);
    *(_BYTE *)(v2 + 104) = 0;
  }
  else
  {
    *(_QWORD *)(v2 + 96) = 0;
    *(_OWORD *)(v2 + 64) = 0u;
    *(_OWORD *)(v2 + 80) = 0u;
    *(_OWORD *)(v2 + 32) = 0u;
    *(_OWORD *)(v2 + 48) = 0u;
    *(_OWORD *)v2 = 0u;
    *(_OWORD *)(v2 + 16) = 0u;
    *(_BYTE *)(v2 + 104) = 1;
  }
}

void sub_10005DF30(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }
}

uint64_t sub_10005DF64(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t v5;

  if (BYTE6(a2) == 8)
  {
    v5 = a3();
    if (!a4)
      return v5;
    ((void (*)(uint64_t))swift_errorRelease)(a4);
  }
  return 0;
}

void sub_10005DFEC(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

void sub_10005E0C0(uint64_t a1, uint64_t a2)
{
  __asm { BR              X12 }
}

uint64_t sub_10005E0F4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  unsigned __int16 v3;
  int v5;
  int v6;

  if (BYTE6(a2) == 2)
  {
    v3 = a3();
    v5 = 0;
    v6 = v3;
  }
  else
  {
    v6 = 0;
    v5 = 1;
  }
  return v6 | (v5 << 16);
}

void sub_10005E178(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }
}

uint64_t sub_10005E1B0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t v5;

  if (BYTE6(a2) == 12)
  {
    v5 = a3();
    if (!a4)
      return v5;
    ((void (*)(uint64_t))swift_errorRelease)(a4);
  }
  return 0;
}

uint64_t sub_10005E258(char a1)
{
  return sub_100055F28(a1, (uint64_t)&unk_1003DDEF0, (uint64_t)sub_10005FEB0, (uint64_t)&unk_1003DDF08);
}

uint64_t sub_10005E290()
{
  return sub_1000546E8((uint64_t)sub_10005FED4, (uint64_t)&unk_1003DDEB8);
}

uint64_t sub_10005E2C0()
{
  return sub_1000546E8((uint64_t)sub_10005FEDC, (uint64_t)&unk_1003DDE90);
}

uint64_t sub_10005E2F0(uint64_t a1, uint64_t a2)
{
  return sub_100054B48(a1, a2);
}

uint64_t sub_10005E328()
{
  return sub_100053C24();
}

uint64_t sub_10005E34C(char a1)
{
  return sub_100055830(a1, (uint64_t)&unk_1003DDE00, (uint64_t)sub_100064514, (uint64_t)&unk_1003DDE18);
}

uint64_t sub_10005E384(char a1)
{
  return sub_100055F28(a1, (uint64_t)&unk_1003DDDB0, (uint64_t)sub_10005FEFC, (uint64_t)&unk_1003DDDC8);
}

uint64_t sub_10005E3BC(uint64_t a1)
{
  return sub_1000580B0(a1, (uint64_t)&unk_1003DDD60, (uint64_t)sub_1000615AC, (uint64_t)&unk_1003DDD78);
}

uint64_t sub_10005E3F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unsigned __int8 v4;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 16);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 24);
  v4 = 2;
  swift_bridgeObjectRetain(v2);
  sub_100060594(v1, v2, 0x12u, &v4, (void (*)(unsigned __int8 *__return_ptr, ifaddrs **))sub_100051820);
  swift_bridgeObjectRelease(v2);
  return v4;
}

unint64_t sub_10005E464()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unsigned int v4;
  unsigned __int16 v5;
  unsigned __int8 v6;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 16);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 24);
  v5 = 0;
  v4 = 0;
  v6 = 1;
  swift_bridgeObjectRetain(v2);
  sub_100060730(v1, v2, 0x12u, (uint64_t)&v4, (void (*)(uint64_t *__return_ptr, ifaddrs **))sub_100047DA4);
  swift_bridgeObjectRelease(v2);
  return v4 | ((unint64_t)v5 << 32) | ((unint64_t)v6 << 48);
}

unint64_t sub_10005E4F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unsigned int v4;
  unsigned __int8 v5;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 16);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 24);
  v4 = 0;
  v5 = 1;
  swift_bridgeObjectRetain(v2);
  sub_1000601A0(v1, v2, 2u, (uint64_t)&v4, (void (*)(uint64_t *__return_ptr, ifaddrs **))sub_100052788);
  swift_bridgeObjectRelease(v2);
  return v4 | ((unint64_t)v5 << 32);
}

uint64_t sub_10005E578(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *(*a4)(uint64_t *__return_ptr, _QWORD *))
{
  return sub_1000527FC(a1 | ((HIDWORD(a1) & 1) << 32), a4);
}

_QWORD *sub_10005E5A8()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;

  v1 = *v0;
  v3 = *(_QWORD *)(*v0 + 16);
  v2 = *(_QWORD *)(v1 + 24);
  v5 = _swiftEmptyArrayStorage;
  swift_bridgeObjectRetain_n(v2, 2);
  sub_100060344(v3, v2, 0x1Eu, (void (*)(_QWORD *__return_ptr, ifaddrs **, __n128))sub_100052BAC, 0, &v5);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v2);
  return v5;
}

uint64_t sub_10005E638(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, _QWORD *(*a5)(uint64_t *__return_ptr, _QWORD *))
{
  return sub_100052C20(a1 & 0xFFFFFFFFFFFFLL, a4, a5);
}

uint64_t sub_10005E664(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_10005E67C(a1, a2, a3, a4, a5, a6, a7, 1u);
}

uint64_t sub_10005E67C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned int a8)
{
  uint64_t *v8;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v12 = *v8;
  v13 = *(_QWORD *)(*v8 + 40);
  v14 = *(_QWORD *)(v12 + 16);
  v15 = *(_QWORD *)(v12 + 24);
  v16 = a1 & 0xFFFFFFFFFFFFLL;
  swift_retain();
  swift_bridgeObjectRetain(v15);
  sub_10005FC48(v16, a2, a3, v14, v15, a8);
  swift_bridgeObjectRelease(v15);
  return swift_release(v13);
}

uint64_t sub_10005E70C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  Swift::String v5;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 40);
  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(void **)(v1 + 24);
  swift_retain();
  swift_bridgeObjectRetain(v4);
  v5._countAndFlagsBits = v3;
  v5._object = v4;
  AppleDevice.neighborDiscoveryTableClear(on:)(v5);
  swift_bridgeObjectRelease(v4);
  return swift_release(v2);
}

uint64_t sub_10005E76C()
{
  return sub_100056388((uint64_t)&unk_1003DDCC0, (uint64_t)sub_100062948);
}

uint64_t sub_10005E79C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  v1 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v0 + 40) + 128);
  if (v1)
  {
    swift_retain();
    sub_100050F68();
    return swift_release(v1);
  }
  return result;
}

uint64_t sub_10005E7E0(uint64_t a1, uint64_t a2)
{
  return sub_100056654(a1, a2, (uint64_t)&unk_1003DDC70, (uint64_t)sub_1000646E0);
}

uint64_t sub_10005E810(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, void (*a6)(void), uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_100056ABC(a1, a2, a3, a4, a5, a6, a7, a8, a9, (uint64_t)&unk_1003DDC48, (uint64_t)sub_100064510);
}

uint64_t sub_10005E854(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(void), uint64_t a7, uint64_t a8, uint64_t a9)
{
  return sub_100062670(a1, a2, a3, a6, a7, a8, a9);
}

void sub_10005E884(id a1)
{
  if (a1 != (id)1)

}

uint64_t sub_10005E894()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10005E8B8(void *a1)
{
  uint64_t v1;

  return sub_100041AC8(a1, v1);
}

uint64_t sub_10005E8C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for Logger(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

void sub_10005E934()
{
  uint64_t v0;

  type metadata accessor for Logger(0);
  sub_100042144(*(void **)(v0 + 16));
}

uint64_t sub_10005E964(uint64_t a1)
{
  uint64_t v1;

  return sub_1000491E8(a1, *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(unsigned __int8 *)(v1 + 56), *(_QWORD *)(v1 + 64), *(void (**)(uint64_t))(v1 + 72), *(_QWORD *)(v1 + 80), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24)) & 1;
}

_QWORD *sub_10005E9A0(uint64_t a1, uint64_t a2, _QWORD *(*a3)(uint64_t *__return_ptr))
{
  uint64_t v3;
  _QWORD *result;
  uint64_t v5;

  if (a1)
  {
    result = a3(&v5);
    if (!v3)
      return (_QWORD *)v5;
  }
  else
  {
    result = ((_QWORD *(*)(uint64_t *__return_ptr, _QWORD, _QWORD))a3)((uint64_t *)((char *)&v5 + 4), 0, 0);
    if (!v3)
      return (_QWORD *)HIDWORD(v5);
  }
  return result;
}

_QWORD *sub_10005E9F0@<X0>(_QWORD *(*a1)(uint64_t *__return_ptr)@<X2>, _DWORD *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v5;

  result = a1(&v5);
  if (!v2)
    *a2 = v5;
  return result;
}

uint64_t sub_10005EA2C(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char v8;
  uint64_t result;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = *a1;
  v5 = a1[1];
  v6 = a2[1];
  v7 = v4 == *a2 && v5 == v6;
  if (v7 || (v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *a2, v6, 0), result = 0, (v8 & 1) != 0))
  {
    sub_10003CA68(*((_BYTE *)a1 + 16));
    if ((v10 & 1) != 0)
    {
      v11 = a1[4];
      v12 = a2[4];
      result = (v11 | v12) == 0;
      if (v11 && v12)
      {
        v13 = a1[3];
        v14 = a2[3];
        if (v13 == v14 && v11 == v12)
          return 1;
        else
          return _stringCompareWithSmolCheck(_:_:expecting:)(v13, v11, v14, v12, 0);
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_10005EAD8(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if (a1 != a2)
  {
    if (a2 >= a1)
    {
      if (a1 < a2)
        __asm { BR              X8 }
      __break(1u);
    }
    __break(1u);
    JUMPOUT(0x10005EC90);
  }
  return 0;
}

void *sub_10005ECA4(void *result, uint64_t a2, uint64_t a3)
{
  if (result)
  {

    return (void *)swift_bridgeObjectRelease(a3);
  }
  return result;
}

uint64_t sub_10005ECD0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10005ECF4()
{
  uint64_t v0;

  return sub_100045B38(*(_QWORD *)(v0 + 16));
}

uint64_t sub_10005ECFC()
{
  uint64_t v0;

  return sub_10004686C(v0);
}

uint64_t type metadata accessor for AppleDevice(uint64_t a1)
{
  return sub_10000D69C(a1, qword_100405238, (uint64_t)&nominal type descriptor for AppleDevice);
}

unint64_t sub_10005ED18(uint64_t a1, unint64_t a2, unsigned __int8 *a3)
{
  __CFString *v6;
  SCPreferencesRef v7;
  unsigned __int8 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  const char *v15;
  Swift::String v16;
  void *v17;
  uint64_t v18;
  Swift::String v19;
  int v20;
  const char *v21;
  Swift::String v22;
  void *object;
  void *v24;
  int v25;
  const char *v26;
  Swift::String v27;
  void *v28;
  const char *v30;
  uint64_t v31;
  unint64_t v32;

  v6 = (__CFString *)String._bridgeToObjectiveC()();
  v7 = SCPreferencesCreateWithAuthorization(kCFAllocatorDefault, v6, 0, 0);

  if (!v7)
  {
    v32 = 0;
    _StringGuts.grow(_:)(70);
    v19._countAndFlagsBits = 0xD000000000000044;
    v19._object = (void *)0x8000000100363470;
    String.append(_:)(v19);
    v20 = SCError();
    v21 = SCErrorString(v20);
    v22._countAndFlagsBits = String.init(cString:)(v21);
    object = v22._object;
    String.append(_:)(v22);
    v24 = object;
LABEL_8:
    swift_bridgeObjectRelease(v24);
    return v32;
  }
  if (!SCPreferencesLock(v7, 1u))
  {
    _StringGuts.grow(_:)(49);
    swift_bridgeObjectRelease(0xE000000000000000);
    v32 = 0xD00000000000002FLL;
    v25 = SCError();
    v26 = SCErrorString(v25);
    v27._countAndFlagsBits = String.init(cString:)(v26);
    v28 = v27._object;
    String.append(_:)(v27);

    v24 = v28;
    goto LABEL_8;
  }
  v8 = sub_100047E3C(v7, a1, a2, a3);
  if (!v10)
  {
    if ((v8 & 1) != 0)
    {
      if (SCPreferencesCommitChanges(v7))
      {
        if (SCPreferencesApplyChanges(v7))
          goto LABEL_13;
        v31 = 0;
        _StringGuts.grow(_:)(51);
        v12 = 0xD000000000000031;
        v30 = "Failed to apply SCPreferences changes with error ";
      }
      else
      {
        v31 = 0;
        _StringGuts.grow(_:)(52);
        v12 = 0xD000000000000032;
        v30 = "Failed to commit SCPreferences changes with error ";
      }
      v13 = (unint64_t)(v30 - 32) | 0x8000000000000000;
      goto LABEL_5;
    }
LABEL_13:
    SCPreferencesUnlock(v7);

    return 0;
  }
  v11 = v9;
  _StringGuts.grow(_:)(16);
  swift_bridgeObjectRelease(0xE000000000000000);
  v31 = v11;
  v12 = 0x7265206874697720;
  v13 = 0xEC00000020726F72;
LABEL_5:
  String.append(_:)(*(Swift::String *)&v12);
  v14 = SCError();
  v15 = SCErrorString(v14);
  v16._countAndFlagsBits = String.init(cString:)(v15);
  v17 = v16._object;
  String.append(_:)(v16);
  swift_bridgeObjectRelease(v17);
  v18 = v31;
  SCPreferencesUnlock(v7);

  return v18;
}

unint64_t sub_10005EFB4(void *a1, uint64_t a2)
{
  __CFString *v4;
  SCPreferencesRef v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  const char *v13;
  Swift::String v14;
  void *v15;
  uint64_t v16;
  Swift::String v17;
  int v18;
  const char *v19;
  Swift::String v20;
  void *object;
  void *v22;
  int v23;
  const char *v24;
  Swift::String v25;
  void *v26;
  const char *v28;
  uint64_t v29;
  unint64_t v30;

  v4 = (__CFString *)String._bridgeToObjectiveC()();
  v5 = SCPreferencesCreateWithAuthorization(kCFAllocatorDefault, v4, 0, 0);

  if (!v5)
  {
    v30 = 0;
    _StringGuts.grow(_:)(70);
    v17._countAndFlagsBits = 0xD000000000000044;
    v17._object = (void *)0x8000000100363470;
    String.append(_:)(v17);
    v18 = SCError();
    v19 = SCErrorString(v18);
    v20._countAndFlagsBits = String.init(cString:)(v19);
    object = v20._object;
    String.append(_:)(v20);
    v22 = object;
LABEL_8:
    swift_bridgeObjectRelease(v22);
    return v30;
  }
  if (!SCPreferencesLock(v5, 1u))
  {
    _StringGuts.grow(_:)(49);
    swift_bridgeObjectRelease(0xE000000000000000);
    v30 = 0xD00000000000002FLL;
    v23 = SCError();
    v24 = SCErrorString(v23);
    v25._countAndFlagsBits = String.init(cString:)(v24);
    v26 = v25._object;
    String.append(_:)(v25);

    v22 = v26;
    goto LABEL_8;
  }
  v6 = sub_100048250(v5, a1, a2);
  if (!v8)
  {
    if ((v6 & 1) != 0)
    {
      if (SCPreferencesCommitChanges(v5))
      {
        if (SCPreferencesApplyChanges(v5))
          goto LABEL_13;
        v29 = 0;
        _StringGuts.grow(_:)(51);
        v10 = 0xD000000000000031;
        v28 = "Failed to apply SCPreferences changes with error ";
      }
      else
      {
        v29 = 0;
        _StringGuts.grow(_:)(52);
        v10 = 0xD000000000000032;
        v28 = "Failed to commit SCPreferences changes with error ";
      }
      v11 = (unint64_t)(v28 - 32) | 0x8000000000000000;
      goto LABEL_5;
    }
LABEL_13:
    SCPreferencesUnlock(v5);

    return 0;
  }
  v9 = v7;
  _StringGuts.grow(_:)(16);
  swift_bridgeObjectRelease(0xE000000000000000);
  v29 = v9;
  v10 = 0x7265206874697720;
  v11 = 0xEC00000020726F72;
LABEL_5:
  String.append(_:)(*(Swift::String *)&v10);
  v12 = SCError();
  v13 = SCErrorString(v12);
  v14._countAndFlagsBits = String.init(cString:)(v13);
  v15 = v14._object;
  String.append(_:)(v14);
  swift_bridgeObjectRelease(v15);
  v16 = v29;
  SCPreferencesUnlock(v5);

  return v16;
}

uint64_t sub_10005F238(const __SCPreferences *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  os_unfair_lock_s *v7;
  id v8;
  uint64_t v9;
  _BYTE v11[24];

  SCPreferencesLock(a1, 1u);
  SCPreferencesSynchronize(a1);
  if (a2)
  {
    v4 = a2[24];
    v5 = a2[25];
    v6 = (void *)a2[26];
    v7 = *(os_unfair_lock_s **)(v4 + 16);
    swift_retain(v4);
    swift_retain(v5);
    v8 = v6;
    os_unfair_lock_lock(v7);
    swift_beginAccess(v5 + 16, v11, 1, 0);
    v9 = *(_QWORD *)(v5 + 16);
    *(_QWORD *)(v5 + 16) = &_swiftEmptyDictionarySingleton;
    swift_bridgeObjectRelease(v9);
    os_unfair_lock_unlock(v7);

    swift_release(v5);
    swift_release(v4);
  }
  return SCPreferencesUnlock(a1);
}

uint64_t sub_10005F2FC(uint64_t a1, int a2, intptr_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  char *v12;
  uint64_t result;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  _BOOL4 v25;
  uint8_t *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  int64_t v39;
  unint64_t v40;
  int64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  _DWORD *v53;
  io_connect_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  _QWORD *v67;
  int64_t v68;
  uint64_t v69;
  uint64_t v70;
  io_connect_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  intptr_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  id v84;
  uint64_t v85;
  uint64_t v86;
  int64_t v87;
  _QWORD *v88;
  uint64_t aBlock[5];
  uint64_t v90;
  char v91[8];
  uint64_t v92;
  char v93[8];

  v80 = a3;
  LODWORD(v3) = a2;
  v79 = type metadata accessor for DispatchWorkItemFlags(0);
  v78 = *(_QWORD *)(v79 - 8);
  __chkstk_darwin();
  v77 = (char *)&v62 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = type metadata accessor for DispatchQoS(0);
  v75 = *(_QWORD *)(v76 - 8);
  __chkstk_darwin();
  v74 = (char *)&v62 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DriverEvent(0);
  v73 = *(_QWORD *)(v6 - 8);
  v7 = *(_QWORD *)(v73 + 64);
  __chkstk_darwin();
  v72 = (uint64_t)&v62 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v9 = (uint64_t)&v62 - v8;
  __chkstk_darwin();
  v81 = (char *)&v62 - v10;
  v11 = (_BYTE *)type metadata accessor for DispatchPredicate(0);
  v12 = (char *)*((_QWORD *)v11 - 1);
  result = __chkstk_darwin();
  v15 = (uint64_t *)((char *)&v62 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (result)
  {
    v16 = qword_100404108;
    v63 = result;
    swift_retain();
    if (v16 != -1)
LABEL_40:
      swift_once(&qword_100404108, sub_10017E140);
    v17 = static OS_dispatch_queue.p2p;
    *v15 = static OS_dispatch_queue.p2p;
    (*((void (**)(_QWORD *, _QWORD, _BYTE *))v12 + 13))(v15, enum case for DispatchPredicate.onQueue(_:), v11);
    v18 = (id)v17;
    LOBYTE(v17) = _dispatchPreconditionTest(_:)(v15);
    (*((void (**)(_QWORD *, _BYTE *))v12 + 1))(v15, v11);
    if ((v17 & 1) == 0)
    {
      __break(1u);
      goto LABEL_42;
    }
    v15 = (_QWORD *)sub_1003342AC(v3);
    v19 = 0;
    v20 = v63;
    v71 = *(_DWORD *)(v63 + 172);
    switch((int)v63)
    {
      case 0:
        return swift_release(v20);
      case 1:
        v21 = v63;
        IOAllowPowerChange(v71, v80);
        v20 = v21;
        return swift_release(v20);
      case 2:
        goto LABEL_9;
      case 3:
        v19 = 1;
LABEL_9:
        v11 = v81;
        *v81 = v19;
        swift_storeEnumTagMultiPayload(v11, v6, 3);
        v22 = sub_1000637E0((uint64_t)v11, v9, type metadata accessor for DriverEvent);
        v23 = Logger.logObject.getter(v22);
        v24 = static os_log_type_t.default.getter();
        v25 = os_log_type_enabled(v23, v24);
        v66 = (int)v15;
        if (v25)
        {
          v26 = (uint8_t *)swift_slowAlloc(12, -1);
          v11 = (_BYTE *)swift_slowAlloc(32, -1);
          aBlock[0] = (uint64_t)v11;
          *(_DWORD *)v26 = 136315138;
          v15 = v26 + 12;
          DriverEvent.description.getter();
          v28 = v27;
          v92 = sub_100013CC8(v29, v27, aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v92, v93);
          swift_bridgeObjectRelease(v28);
          sub_100063824(v9, type metadata accessor for DriverEvent);
          _os_log_impl((void *)&_mh_execute_header, v23, v24, "%s", v26, 0xCu);
          swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v11, -1, -1);
          swift_slowDealloc(v26, -1, -1);

        }
        else
        {

          sub_100063824(v9, type metadata accessor for DriverEvent);
        }
        v30 = v63;
        os_unfair_lock_lock(*(os_unfair_lock_t *)(*(_QWORD *)(v63 + 24) + 16));
        v31 = swift_allocObject(&unk_1003DE3F0, 24, 7);
        v70 = v31;
        *(_QWORD *)(v31 + 16) = 0;
        v6 = v31 + 16;
        v69 = swift_allocObject(&unk_1003DE3F0, 24, 7);
        *(_QWORD *)(v69 + 16) = 0;
        swift_beginAccess(v30 + 32, &v92, 0, 0);
        v32 = *(_QWORD *)(v30 + 32);
        v33 = *(_QWORD *)(v32 + 64);
        v64 = v32 + 64;
        v3 = 1 << *(_BYTE *)(v32 + 32);
        v34 = -1;
        if (v3 < 64)
          v34 = ~(-1 << v3);
        v9 = v34 & v33;
        v82 = v32;
        swift_bridgeObjectRetain(v32);
        v67 = (_QWORD *)v6;
        swift_beginAccess(v6, v91, 1, 0);
        v35 = 0;
        v68 = (unint64_t)(v3 + 63) >> 6;
        v65 = v7 + 7;
        v36 = v70;
        break;
      default:
        v20 = v63;
        return swift_release(v20);
    }
    while (1)
    {
      if (v9)
      {
        v37 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v38 = v37 | (v35 << 6);
      }
      else
      {
        v39 = v35 + 1;
        if (__OFADD__(v35, 1))
          goto LABEL_39;
        if (v39 >= v68)
        {
LABEL_36:
          swift_release(v69);
          swift_release(v82);
          swift_release(v70);
          v61 = v63;
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(*(_QWORD *)(v63 + 24) + 16));
          swift_release(v61);
          return sub_100063824((uint64_t)v81, type metadata accessor for DriverEvent);
        }
        v40 = *(_QWORD *)(v64 + 8 * v39);
        ++v35;
        if (!v40)
        {
          v35 = v39 + 1;
          if (v39 + 1 >= v68)
            goto LABEL_36;
          v40 = *(_QWORD *)(v64 + 8 * v35);
          if (!v40)
          {
            v35 = v39 + 2;
            if (v39 + 2 >= v68)
              goto LABEL_36;
            v40 = *(_QWORD *)(v64 + 8 * v35);
            if (!v40)
            {
              v35 = v39 + 3;
              if (v39 + 3 >= v68)
                goto LABEL_36;
              v40 = *(_QWORD *)(v64 + 8 * v35);
              if (!v40)
              {
                v41 = v39 + 4;
                if (v41 >= v68)
                  goto LABEL_36;
                v40 = *(_QWORD *)(v64 + 8 * v41);
                if (!v40)
                {
                  while (1)
                  {
                    v35 = v41 + 1;
                    if (__OFADD__(v41, 1))
                      break;
                    if (v35 >= v68)
                      goto LABEL_36;
                    v40 = *(_QWORD *)(v64 + 8 * v35);
                    ++v41;
                    if (v40)
                      goto LABEL_32;
                  }
LABEL_42:
                  __break(1u);
                  JUMPOUT(0x10005FC38);
                }
                v35 = v41;
              }
            }
          }
        }
LABEL_32:
        v9 = (v40 - 1) & v40;
        v38 = __clz(__rbit64(v40)) + (v35 << 6);
      }
      v42 = *(_QWORD *)(*(_QWORD *)(v82 + 56) + 8 * v38);
      v7 = *(_QWORD *)(v42
                     + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_eventHandler);
      if (v7)
      {
        if (__OFADD__(*v67, 1))
        {
          __break(1u);
LABEL_39:
          __break(1u);
          goto LABEL_40;
        }
        v43 = *(_QWORD *)(v42
                        + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_eventHandler
                        + 8);
        *(_QWORD *)(v36 + 16) = *v67 + 1;
        v44 = *(void **)(v42
                       + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_queue);
        v83 = v42;
        v84 = v44;
        v86 = v9;
        v45 = v72;
        v87 = v35;
        sub_1000637E0((uint64_t)v81, v72, type metadata accessor for DriverEvent);
        v46 = *(unsigned __int8 *)(v73 + 80);
        v47 = (v46 + 32) & ~v46;
        v48 = (v65 + v47) & 0xFFFFFFFFFFFFFFF8;
        v49 = (v48 + 15) & 0xFFFFFFFFFFFFFFF8;
        v50 = (v49 + 11) & 0xFFFFFFFFFFFFFFF8;
        v51 = (v50 + 15) & 0xFFFFFFFFFFFFFFF8;
        v52 = swift_allocObject(&unk_1003DE418, v51 + 8, v46 | 7);
        *(_QWORD *)(v52 + 16) = v7;
        *(_QWORD *)(v52 + 24) = v43;
        sub_100033AC0(v45, v52 + v47, type metadata accessor for DriverEvent);
        *(_QWORD *)(v52 + v48) = v69;
        *(_QWORD *)(v52 + v49) = v36;
        v53 = (_DWORD *)(v52 + v50);
        v54 = v71;
        *v53 = v66;
        v53[1] = v54;
        *(_QWORD *)(v52 + v51) = v80;
        aBlock[4] = (uint64_t)sub_1000635E4;
        v90 = v52;
        aBlock[0] = (uint64_t)_NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        aBlock[2] = (uint64_t)sub_100006F0C;
        aBlock[3] = (uint64_t)&unk_1003DE430;
        v11 = _Block_copy(aBlock);
        v85 = v43;
        sub_1000339E4(v7, v43);
        sub_1000339E4(v7, v43);
        v55 = v83;
        swift_retain();
        v15 = v84;
        swift_retain();
        v56 = swift_retain();
        v57 = v74;
        static DispatchQoS.unspecified.getter(v56);
        v88 = _swiftEmptyArrayStorage;
        v58 = sub_100011DE4((unint64_t *)&qword_100408710, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
        v3 = sub_100012C44((uint64_t *)&unk_100405070);
        v59 = sub_100011770((unint64_t *)&qword_100408720, (uint64_t *)&unk_100405070, (const char *)&protocol conformance descriptor for [A]);
        v12 = v77;
        v6 = v79;
        dispatch thunk of SetAlgebra.init<A>(_:)(&v88, v3, v59, v79, v58);
        LODWORD(v3) = (_DWORD)v15;
        OS_dispatch_queue.async(group:qos:flags:execute:)(0, v57, v12, v11);
        _Block_release(v11);
        swift_release(v55);

        sub_100012318(v7, v85);
        (*(void (**)(char *, uint64_t))(v78 + 8))(v12, v6);
        v60 = v57;
        v9 = v86;
        (*(void (**)(char *, uint64_t))(v75 + 8))(v60, v76);
        swift_release(v90);
        v35 = v87;
      }
    }
  }
  return result;
}

void sub_10005FC48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  unsigned int v19;
  const char *v20;
  char v21[8];
  uint64_t v22;
  uint64_t v23;

  v7 = v6;
  v14 = *(_QWORD *)(v6 + 24);
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v14 + 16));
  swift_beginAccess(v6 + 32, v21, 32, 0);
  v15 = *(_QWORD *)(v6 + 32);
  if (*(_QWORD *)(v15 + 16))
  {
    swift_bridgeObjectRetain(a5);
    v16 = sub_10000FA00(a4, a5);
    if ((v17 & 1) != 0)
    {
      v18 = *(_QWORD *)(*(_QWORD *)(v15 + 56) + 8 * v16);
      swift_endAccess(v21);
      swift_retain();
      swift_bridgeObjectRelease(a5);
      v19 = *(_DWORD *)(v18
                      + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A15InterfaceHandle_interfaceIndex);
      swift_release(v18);
      goto LABEL_12;
    }
    swift_bridgeObjectRelease(a5);
  }
  swift_endAccess(v21);
  if ((a5 & 0x1000000000000000) != 0 || !(a5 & 0x2000000000000000 | a4 & 0x1000000000000000))
  {
    _StringGuts._slowWithCString<A>(_:)(&v23, sub_100064530, 0);
    v19 = v23;
  }
  else if ((a5 & 0x2000000000000000) != 0)
  {
    *(_QWORD *)v21 = a4;
    v22 = a5 & 0xFFFFFFFFFFFFFFLL;
    v19 = if_nametoindex(v21);
  }
  else
  {
    if ((a4 & 0x1000000000000000) != 0)
      v20 = (const char *)((a5 & 0xFFFFFFFFFFFFFFFLL) + 32);
    else
      v20 = (const char *)_StringObject.sharedUTF8.getter(a4, a5);
    sub_100047DEC(v20, v21);
    v19 = *(_DWORD *)v21;
  }
LABEL_12:
  swift_beginAccess(v7 + OBJC_IVAR____TtC7CoreP2P11AppleDevice_neighborDiscoveryRoutingSocket, v21, 33, 0);
  sub_10017B9DC(a1 & 0xFFFFFFFFFFFFLL, a2, a3, v19, a6);
  swift_endAccess(v21);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v14 + 16));
}

uint64_t sub_10005FE6C(uint64_t a1)
{
  uint64_t v1;

  return sub_10004949C(a1, *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(unsigned __int8 *)(v1 + 56), *(void (**)(uint64_t))(v1 + 64), *(_QWORD *)(v1 + 72), *(_QWORD *)(v1 + 80), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24)) & 1;
}

uint64_t sub_10005FEA8(uint64_t a1)
{
  uint64_t v1;

  return sub_100049870(a1, *(void (**)(uint64_t))(v1 + 16));
}

id sub_10005FEB0()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(*(_QWORD *)(v0 + 16) + 48), "disassociateWithReason:", qword_10033B0D0[*(char *)(v0 + 24)]);
}

void sub_10005FED4()
{
  uint64_t v0;

  sub_1000544A0(v0);
}

void sub_10005FEDC()
{
  uint64_t v0;

  sub_100054B00(v0);
}

void sub_10005FEE4()
{
  uint64_t v0;

  sub_100055590(*(_BYTE *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

void sub_10005FEF0()
{
  uint64_t v0;

  sub_100055C74(*(_BYTE *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t type metadata accessor for AppleDevice.GatewayMonitor(uint64_t a1)
{
  return sub_10000D69C(a1, (uint64_t *)&unk_1004059C8, (uint64_t)&nominal type descriptor for AppleDevice.GatewayMonitor);
}

unint64_t sub_10005FF14(unint64_t a1, unint64_t a2, char a3)
{
  __CFString *v6;
  SCPreferencesRef v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  const char *v15;
  Swift::String v16;
  void *v17;
  uint64_t v18;
  Swift::String v19;
  int v20;
  const char *v21;
  Swift::String v22;
  void *object;
  void *v24;
  int v25;
  const char *v26;
  Swift::String v27;
  void *v28;
  const char *v30;
  uint64_t v31;
  unint64_t v32;

  v6 = (__CFString *)String._bridgeToObjectiveC()();
  v7 = SCPreferencesCreateWithAuthorization(kCFAllocatorDefault, v6, 0, 0);

  if (!v7)
  {
    v32 = 0;
    _StringGuts.grow(_:)(70);
    v19._countAndFlagsBits = 0xD000000000000044;
    v19._object = (void *)0x8000000100363470;
    String.append(_:)(v19);
    v20 = SCError();
    v21 = SCErrorString(v20);
    v22._countAndFlagsBits = String.init(cString:)(v21);
    object = v22._object;
    String.append(_:)(v22);
    v24 = object;
LABEL_8:
    swift_bridgeObjectRelease(v24);
    return v32;
  }
  if (!SCPreferencesLock(v7, 1u))
  {
    _StringGuts.grow(_:)(49);
    swift_bridgeObjectRelease(0xE000000000000000);
    v32 = 0xD00000000000002FLL;
    v25 = SCError();
    v26 = SCErrorString(v25);
    v27._countAndFlagsBits = String.init(cString:)(v26);
    v28 = v27._object;
    String.append(_:)(v27);

    v24 = v28;
    goto LABEL_8;
  }
  v8 = sub_10004DC74(v7, a1, a2, a3 & 1);
  if (!v10)
  {
    if ((v8 & 1) != 0)
    {
      if (SCPreferencesCommitChanges(v7))
      {
        if (SCPreferencesApplyChanges(v7))
          goto LABEL_13;
        v31 = 0;
        _StringGuts.grow(_:)(51);
        v12 = 0xD000000000000031;
        v30 = "Failed to apply SCPreferences changes with error ";
      }
      else
      {
        v31 = 0;
        _StringGuts.grow(_:)(52);
        v12 = 0xD000000000000032;
        v30 = "Failed to commit SCPreferences changes with error ";
      }
      v13 = (unint64_t)(v30 - 32) | 0x8000000000000000;
      goto LABEL_5;
    }
LABEL_13:
    SCPreferencesUnlock(v7);

    return 0;
  }
  v11 = v9;
  _StringGuts.grow(_:)(16);
  swift_bridgeObjectRelease(0xE000000000000000);
  v31 = v11;
  v12 = 0x7265206874697720;
  v13 = 0xEC00000020726F72;
LABEL_5:
  String.append(_:)(*(Swift::String *)&v12);
  v14 = SCError();
  v15 = SCErrorString(v14);
  v16._countAndFlagsBits = String.init(cString:)(v15);
  v17 = v16._object;
  String.append(_:)(v16);
  swift_bridgeObjectRelease(v17);
  v18 = v31;
  SCPreferencesUnlock(v7);

  return v18;
}

void sub_1000601A0(uint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, ifaddrs **))
{
  uint64_t v5;
  unsigned int ifa_flags;
  char *ifa_name;
  ifaddrs *ifa_next;
  __int128 v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  int v21;
  unsigned int v22;
  __int128 v23;
  __int128 v24;
  ifaddrs *v25;
  ifaddrs *v26;
  uint64_t v27;
  void (*v28)(uint64_t *__return_ptr, ifaddrs **);
  uint64_t v29;
  ifaddrs *v30;
  ifaddrs *v31;
  char *v32;
  unsigned int v33;
  __int128 v34;
  __int128 v35;

  v30 = 0;
  if (!getifaddrs(&v30))
  {
    v26 = v30;
    if (v30)
    {
      v27 = a4;
      v28 = a5;
      ifa_flags = v30->ifa_flags;
      ifa_next = v30->ifa_next;
      ifa_name = v30->ifa_name;
      v31 = v30->ifa_next;
      v32 = ifa_name;
      v33 = ifa_flags;
      v14 = *(_OWORD *)&v30->ifa_addr;
      v34 = v14;
      v35 = *(_OWORD *)&v30->ifa_dstaddr;
      if (ifa_name)
      {
        v15 = a3;
        v16 = v14;
        while (1)
        {
          v17 = String.init(cString:)(ifa_name);
          v19 = v18;
          if (v17 == a1 && v18 == a2)
            break;
          v20 = _stringCompareWithSmolCheck(_:_:expecting:)(v17, v18, a1, a2, 0);
          swift_bridgeObjectRelease(v19);
          if ((v20 & 1) != 0)
            goto LABEL_9;
LABEL_13:
          if (!ifa_next)
            goto LABEL_16;
          v22 = ifa_next->ifa_flags;
          v23 = *(_OWORD *)&ifa_next->ifa_addr;
          v24 = *(_OWORD *)&ifa_next->ifa_dstaddr;
          v25 = ifa_next;
          ifa_next = ifa_next->ifa_next;
          ifa_name = v25->ifa_name;
          v31 = ifa_next;
          v32 = ifa_name;
          v33 = v22;
          v34 = v23;
          v35 = v24;
          v16 = v23;
          if (!ifa_name)
            goto LABEL_15;
        }
        swift_bridgeObjectRelease(a2);
LABEL_9:
        if (!v16)
          __break(1u);
        if (*(unsigned __int8 *)(v16 + 1) == v15)
        {
          v28(&v29, &v31);
          if (v5)
            goto LABEL_16;
          v21 = BYTE4(v29);
          *(_DWORD *)v27 = v29;
          *(_BYTE *)(v27 + 4) = v21;
          if (v21 != 1)
            goto LABEL_16;
        }
        goto LABEL_13;
      }
LABEL_15:
      __break(1u);
    }
LABEL_16:
    freeifaddrs(v26);
  }
}

void sub_100060344(uint64_t a1, uint64_t a2, unsigned __int8 a3, void (*a4)(_QWORD *__return_ptr, ifaddrs **, __n128), uint64_t a5, _QWORD *a6)
{
  uint64_t v6;
  ifaddrs *v12;
  unsigned int ifa_flags;
  char *ifa_name;
  ifaddrs *ifa_next;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  char v22;
  uint64_t v23;
  _QWORD *v24;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  unsigned int v29;
  __int128 v30;
  __int128 v31;
  ifaddrs *v32;
  ifaddrs *v33;
  ifaddrs *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(_QWORD *__return_ptr, ifaddrs **, __n128);
  int v40;
  _QWORD v41[3];
  uint64_t v42;
  ifaddrs *v43;
  ifaddrs *v44;
  char *v45;
  unsigned int v46;
  __int128 v47;
  __int128 v48;

  v43 = 0;
  if (getifaddrs(&v43))
    return;
  v12 = v43;
  if (!v43)
  {
LABEL_22:
    v33 = v12;
    goto LABEL_23;
  }
  v39 = a4;
  ifa_flags = v43->ifa_flags;
  ifa_next = v43->ifa_next;
  ifa_name = v43->ifa_name;
  v44 = v43->ifa_next;
  v45 = ifa_name;
  v46 = ifa_flags;
  v16 = *(_OWORD *)&v43->ifa_addr;
  v47 = v16;
  v34 = v43;
  v48 = *(_OWORD *)&v43->ifa_dstaddr;
  if (!ifa_name)
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
  }
  v40 = a3;
  v17 = v16;
  v35 = a6;
  while (1)
  {
    v18 = String.init(cString:)(ifa_name);
    v20 = v19;
    if (v18 == a1 && v19 == a2)
    {
      v21 = swift_bridgeObjectRelease(a2);
    }
    else
    {
      v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v18, v19, a1, a2, 0);
      v21 = swift_bridgeObjectRelease(v20);
      if ((v22 & 1) == 0)
        goto LABEL_18;
    }
    if (!v17)
      goto LABEL_27;
    if (*(unsigned __int8 *)(v17 + 1) == v40)
      break;
LABEL_18:
    if (!ifa_next)
    {
      v12 = v34;
      goto LABEL_22;
    }
    v29 = ifa_next->ifa_flags;
    v30 = *(_OWORD *)&ifa_next->ifa_addr;
    v31 = *(_OWORD *)&ifa_next->ifa_dstaddr;
    v32 = ifa_next;
    ifa_next = ifa_next->ifa_next;
    ifa_name = v32->ifa_name;
    v44 = ifa_next;
    v45 = ifa_name;
    v46 = v29;
    v47 = v30;
    v48 = v31;
    v17 = v30;
    if (!ifa_name)
      goto LABEL_26;
  }
  v39(v41, &v44, v21);
  if (!v6)
  {
    v23 = v42;
    if (v42 != 1)
    {
      v37 = v41[0];
      v38 = v41[2];
      v36 = v41[1];
      v24 = (_QWORD *)*a6;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a6);
      *a6 = v24;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v24 = sub_1000B21B4(0, v24[2] + 1, 1, v24);
        *a6 = v24;
      }
      v27 = v24[2];
      v26 = v24[3];
      if (v27 >= v26 >> 1)
      {
        v24 = sub_1000B21B4((_QWORD *)(v26 > 1), v27 + 1, 1, v24);
        *v35 = v24;
      }
      v24[2] = v27 + 1;
      v28 = &v24[4 * v27];
      a6 = v35;
      v28[4] = v37;
      v28[5] = v36;
      v28[6] = v38;
      v28[7] = v23;
    }
    goto LABEL_18;
  }
  v33 = v34;
LABEL_23:
  freeifaddrs(v33);
}

void sub_100060594(uint64_t a1, uint64_t a2, unsigned __int8 a3, unsigned __int8 *a4, void (*a5)(unsigned __int8 *__return_ptr, ifaddrs **))
{
  uint64_t v5;
  unsigned int ifa_flags;
  char *ifa_name;
  ifaddrs *ifa_next;
  __int128 v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  int v21;
  unsigned int v22;
  __int128 v23;
  __int128 v24;
  ifaddrs *v25;
  ifaddrs *v26;
  unsigned __int8 *v27;
  void (*v28)(unsigned __int8 *__return_ptr, ifaddrs **);
  unsigned __int8 v29;
  ifaddrs *v30;
  ifaddrs *v31;
  char *v32;
  unsigned int v33;
  __int128 v34;
  __int128 v35;

  v30 = 0;
  if (!getifaddrs(&v30))
  {
    v26 = v30;
    if (v30)
    {
      v27 = a4;
      v28 = a5;
      ifa_flags = v30->ifa_flags;
      ifa_next = v30->ifa_next;
      ifa_name = v30->ifa_name;
      v31 = v30->ifa_next;
      v32 = ifa_name;
      v33 = ifa_flags;
      v14 = *(_OWORD *)&v30->ifa_addr;
      v34 = v14;
      v35 = *(_OWORD *)&v30->ifa_dstaddr;
      if (ifa_name)
      {
        v15 = a3;
        v16 = v14;
        while (1)
        {
          v17 = String.init(cString:)(ifa_name);
          v19 = v18;
          if (v17 == a1 && v18 == a2)
            break;
          v20 = _stringCompareWithSmolCheck(_:_:expecting:)(v17, v18, a1, a2, 0);
          swift_bridgeObjectRelease(v19);
          if ((v20 & 1) != 0)
            goto LABEL_9;
LABEL_13:
          if (!ifa_next)
            goto LABEL_16;
          v22 = ifa_next->ifa_flags;
          v23 = *(_OWORD *)&ifa_next->ifa_addr;
          v24 = *(_OWORD *)&ifa_next->ifa_dstaddr;
          v25 = ifa_next;
          ifa_next = ifa_next->ifa_next;
          ifa_name = v25->ifa_name;
          v31 = ifa_next;
          v32 = ifa_name;
          v33 = v22;
          v34 = v23;
          v35 = v24;
          v16 = v23;
          if (!ifa_name)
            goto LABEL_15;
        }
        swift_bridgeObjectRelease(a2);
LABEL_9:
        if (!v16)
          __break(1u);
        if (*(unsigned __int8 *)(v16 + 1) == v15)
        {
          v28(&v29, &v31);
          if (v5)
            goto LABEL_16;
          v21 = v29;
          *v27 = v29;
          if (v21 != 2)
            goto LABEL_16;
        }
        goto LABEL_13;
      }
LABEL_15:
      __break(1u);
    }
LABEL_16:
    freeifaddrs(v26);
  }
}

void sub_100060730(uint64_t a1, uint64_t a2, unsigned __int8 a3, uint64_t a4, void (*a5)(uint64_t *__return_ptr, ifaddrs **))
{
  uint64_t v5;
  unsigned int ifa_flags;
  char *ifa_name;
  ifaddrs *ifa_next;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  int v20;
  int v21;
  unsigned int v22;
  __int128 v23;
  __int128 v24;
  ifaddrs *v25;
  ifaddrs *v26;
  void (*v27)(uint64_t *__return_ptr, ifaddrs **);
  int v28;
  uint64_t v29;
  ifaddrs *v30;
  ifaddrs *v31;
  char *v32;
  unsigned int v33;
  __int128 v34;
  __int128 v35;

  v30 = 0;
  if (!getifaddrs(&v30))
  {
    v26 = v30;
    if (v30)
    {
      v27 = a5;
      ifa_flags = v30->ifa_flags;
      ifa_next = v30->ifa_next;
      ifa_name = v30->ifa_name;
      v31 = v30->ifa_next;
      v32 = ifa_name;
      v33 = ifa_flags;
      v14 = *(_OWORD *)&v30->ifa_addr;
      v34 = v14;
      v35 = *(_OWORD *)&v30->ifa_dstaddr;
      if (ifa_name)
      {
        v28 = a3;
        v15 = v14;
        while (1)
        {
          v16 = String.init(cString:)(ifa_name);
          v18 = v17;
          if (v16 == a1 && v17 == a2)
            break;
          v19 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v17, a1, a2, 0);
          swift_bridgeObjectRelease(v18);
          if ((v19 & 1) != 0)
            goto LABEL_9;
LABEL_13:
          if (!ifa_next)
            goto LABEL_16;
          v22 = ifa_next->ifa_flags;
          v23 = *(_OWORD *)&ifa_next->ifa_addr;
          v24 = *(_OWORD *)&ifa_next->ifa_dstaddr;
          v25 = ifa_next;
          ifa_next = ifa_next->ifa_next;
          ifa_name = v25->ifa_name;
          v31 = ifa_next;
          v32 = ifa_name;
          v33 = v22;
          v34 = v23;
          v35 = v24;
          v15 = v23;
          if (!ifa_name)
            goto LABEL_15;
        }
        swift_bridgeObjectRelease(a2);
LABEL_9:
        if (!v15)
          __break(1u);
        if (*(unsigned __int8 *)(v15 + 1) == v28)
        {
          v27(&v29, &v31);
          if (v5)
            goto LABEL_16;
          v20 = v29;
          v21 = BYTE6(v29);
          *(_WORD *)(a4 + 4) = WORD2(v29);
          *(_DWORD *)a4 = v20;
          *(_BYTE *)(a4 + 6) = v21;
          if (v21 != 1)
            goto LABEL_16;
        }
        goto LABEL_13;
      }
LABEL_15:
      __break(1u);
    }
LABEL_16:
    freeifaddrs(v26);
  }
}

void sub_1000608E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t *v8;
  uint64_t v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  void (*v22)(unint64_t *, _QWORD, unint64_t);
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  unint64_t v34;
  Swift::String v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  unint64_t *v55;
  uint64_t v56;
  unint64_t v57;
  id v58;
  os_log_t v59[3];
  uint64_t v60[3];
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;

  v1 = v0;
  type metadata accessor for DispatchTimeInterval(0);
  __chkstk_darwin();
  __chkstk_darwin();
  __chkstk_darwin();
  v2 = __chkstk_darwin();
  v8 = (unint64_t *)(v0
                          + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A31InternetSharingRequesterSession_state);
  if (*(_BYTE *)(v0
                + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A31InternetSharingRequesterSession_state
                + 16) != 2
    || *(_OWORD *)v8 != 0)
  {
    v9 = swift_retain_n(v0, 2);
    v59[0] = (os_log_t)Logger.logObject.getter(v9);
    v10 = static os_log_type_t.error.getter(v59[0]);
    if (os_log_type_enabled(v59[0], v10))
    {
      v11 = (uint8_t *)swift_slowAlloc(12, -1);
      v12 = swift_slowAlloc(32, -1);
      v60[0] = v12;
      *(_DWORD *)v11 = 136315138;
      if (*((_BYTE *)v8 + 16))
      {
        if (*((_BYTE *)v8 + 16) == 1)
        {
          v13 = 0xEB0000000064656CLL;
          v14 = 0x6961462050434844;
        }
        else
        {
          if (*(_OWORD *)v8 == 0)
            v14 = 0x72756769666E6F43;
          else
            v14 = 0x74616E696D726554;
          if (*(_OWORD *)v8 == 0)
            v13 = 0xEB00000000676E69;
          else
            v13 = 0xEA00000000006465;
        }
      }
      else
      {
        v33 = 0x6569667369746153;
        if ((*v8 & 1) != 0)
        {
          v34 = 0xE900000000000064;
        }
        else
        {
          v33 = 0x6673697461736E55;
          v34 = 0xEB00000000646569;
        }
        v61 = v33;
        v62 = v34;
        swift_bridgeObjectRetain(v34);
        v35._object = (void *)0xEA00000000007265;
        v35._countAndFlagsBits = 0x7473657571655220;
        String.append(_:)(v35);
        swift_bridgeObjectRelease(v34);
        v14 = v61;
        v13 = v34;
      }
      v61 = sub_100013CC8(v14, v13, v60);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v61, &v62);
      swift_release_n(v1, 2);
      swift_bridgeObjectRelease(v13);
      _os_log_impl((void *)&_mh_execute_header, v59[0], v10, "Unable to start internet sharing requester because in %s", v11, 0xCu);
      swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v12, -1, -1);
      swift_slowDealloc(v11, -1, -1);

    }
    else
    {
      swift_release_n(v0, 2);

    }
    return;
  }
  v53 = v6;
  v54 = v3;
  v52 = v7;
  v55 = (unint64_t *)((char *)&v51 - v4);
  v56 = v5;
  v57 = v2;
  v63 = 0;
  v16 = *(_QWORD *)(v0
                  + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A31InternetSharingRequesterSession_interface);
  v15 = *(_QWORD *)(v0
                  + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A31InternetSharingRequesterSession_interface
                  + 8);
  swift_bridgeObjectRetain(v15);
  v17 = sub_10005FF14(v16, v15, 1);
  v19 = v18;
  swift_bridgeObjectRelease(v15);
  v20 = OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A31InternetSharingRequesterSession_logger;
  v21 = swift_beginAccess(&v63, &v61, 1, 0);
  if (v19)
  {
    v22 = (void (*)(unint64_t *, _QWORD, unint64_t))(v1 + v20);
    v21.n128_u64[0] = 136315394;
    *(__n128 *)v59 = v21;
    v58 = (char *)&type metadata for Any + 8;
    while (1)
    {
      sub_100061DF8(v17, v19, 1);
      v23 = v63 + 1;
      if (__OFADD__(v63, 1))
        break;
      ++v63;
      v24 = swift_retain_n(v1, 2);
      v25 = Logger.logObject.getter(v24);
      v26 = static os_log_type_t.error.getter(v25);
      if (os_log_type_enabled(v25, v26))
      {
        v27 = v16;
        v28 = swift_slowAlloc(22, -1);
        v29 = swift_slowAlloc(32, -1);
        v60[0] = v29;
        *(_DWORD *)v28 = v59[0];
        swift_bridgeObjectRetain(v15);
        *(_QWORD *)(v28 + 4) = sub_100013CC8(v27, v15, v60);
        swift_release_n(v1, 2);
        swift_bridgeObjectRelease(v15);
        *(_WORD *)(v28 + 12) = 2048;
        v23 = v63;
        *(_QWORD *)(v28 + 14) = v63;
        _os_log_impl((void *)&_mh_execute_header, v25, v26, "Failed to start DHCP on %s, retry %ld", (uint8_t *)v28, 0x16u);
        swift_arrayDestroy(v29, 1, v58);
        swift_slowDealloc(v29, -1, -1);
        v30 = v28;
        v16 = v27;
        swift_slowDealloc(v30, -1, -1);
      }
      else
      {
        swift_release_n(v1, 2);
      }

      swift_bridgeObjectRetain(v15);
      v17 = sub_10005FF14(v16, v15, 1);
      v19 = v31;
      swift_bridgeObjectRelease(v15);
      v32 = v19 != 0;
      if (!v19)
        v17 = 0;
      if (v23 > 4 || !v19)
        goto LABEL_31;
    }
    __break(1u);
    goto LABEL_36;
  }
  v17 = 0;
  v32 = 0;
LABEL_31:
  v36 = *v8;
  v37 = v8[1];
  *v8 = v17;
  v8[1] = v19;
  v38 = *((_BYTE *)v8 + 16);
  *((_BYTE *)v8 + 16) = v32;
  sub_100061DD0(v36, v37, v38);
  sub_100061DF8(v36, v37, v38);
  sub_10004D47C(v36, v37, v38);
  sub_100061DF8(v36, v37, v38);
  if (!*((_BYTE *)v8 + 16))
  {
    v59[0] = (os_log_t)v16;
    v8 = v55;
    v19 = v56;
    *v55 = 15;
    v22 = *(void (**)(unint64_t *, _QWORD, unint64_t))(v19 + 104);
    v17 = v57;
    v22(v8, enum case for DispatchTimeInterval.seconds(_:), v57);
    if (qword_1004040F8 == -1)
    {
LABEL_33:
      v58 = (id)static OS_dispatch_queue.nan;
      v39 = swift_allocObject(&unk_1003DE238, 24, 7);
      swift_weakInit(v39 + 16, v1);
      v40 = swift_allocObject(&unk_1003DE260, 24, 7);
      *(_QWORD *)(v40 + 16) = 0;
      (*(void (**)(uint64_t, unint64_t *, unint64_t))(v19 + 16))(v54, v8, v17);
      v41 = (_QWORD *)swift_allocObject(&unk_1003DE288, 40, 7);
      v41[2] = sub_100062B84;
      v41[3] = v39;
      v41[4] = v40;
      v42 = v52;
      v22((unint64_t *)v52, enum case for DispatchTimeInterval.never(_:), v17);
      v43 = (uint64_t)v53;
      *v53 = 100;
      v22((unint64_t *)v43, enum case for DispatchTimeInterval.milliseconds(_:), v17);
      v44 = type metadata accessor for P2PTimer(0);
      swift_allocObject(v44, *(unsigned int *)(v44 + 48), *(unsigned __int16 *)(v44 + 52));
      swift_retain_n(v39, 2);
      v45 = v58;
      swift_retain();
      v46 = sub_10012B6F8(v54, v45, v42, v43, (uint64_t)sub_100062BB8, (uint64_t)v41);

      swift_release(v41);
      swift_beginAccess(v40 + 16, v60, 1, 0);
      v47 = *(_QWORD *)(v40 + 16);
      *(_QWORD *)(v40 + 16) = v46;
      swift_release(v39);
      swift_release(v40);
      swift_release(v47);
      (*(void (**)(unint64_t *, unint64_t))(v56 + 8))(v55, v57);
      swift_release(v39);
      v48 = *(_QWORD *)(v1
                      + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A31InternetSharingRequesterSession_networkConnectivityMonitor);
      v49 = swift_allocObject(&unk_1003DE238, 24, 7);
      swift_weakInit(v49 + 16, v1);
      v50 = *(_QWORD *)(v48 + 48);
      *(_QWORD *)(v48 + 40) = sub_100062BC4;
      *(_QWORD *)(v48 + 48) = v49;
      swift_release(v50);
      sub_10004C230(v59[0], v15);
      return;
    }
LABEL_36:
    swift_once(&qword_1004040F8, sub_10017DEE0);
    goto LABEL_33;
  }
}

uint64_t sub_100061090(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  uint64_t (*v17)(uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  nw_interface_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t result;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42[3];
  nw_interface_t v43;

  v4 = v3;
  v8 = *(_QWORD *)(a2 - 8);
  __chkstk_darwin();
  v39 = v9;
  v10 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  Logger.init(subsystem:category:)(0xD000000000000012, 0x8000000100360DF0, 0x4D79617765746167, 0xEE00726F74696E6FLL);
  v11 = OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_monitor;
  *(_QWORD *)(v3 + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_monitor) = 0;
  RoutingSocket.init()(v3 + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_routingSocket);
  v12 = v3
      + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_lastGatewayIPAddress;
  *(_OWORD *)v12 = 0u;
  *(_OWORD *)(v12 + 16) = 0u;
  *(_BYTE *)(v12 + 32) = -1;
  v13 = v3
      + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_lastGatewayAddress;
  *(_WORD *)(v13 + 4) = 0;
  *(_DWORD *)v13 = 0;
  *(_BYTE *)(v13 + 6) = 1;
  v14 = v3
      + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A14GatewayMonitor_lastGatewayUpdate;
  v15 = type metadata accessor for DispatchTime(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v14, 1, 1, v15);
  v16 = nw_parameters_create();
  v40 = a3;
  v17 = *(uint64_t (**)(uint64_t))(*(_QWORD *)(a3 + 16) + 40);
  v38 = a1;
  v18 = v17(a2);
  v20 = v19;
  v41 = v11;
  if ((v19 & 0x1000000000000000) != 0 || !(v19 & 0x2000000000000000 | v18 & 0x1000000000000000))
  {
    sub_100012C44(&qword_100405B18);
    _StringGuts._slowWithCString<A>(_:)(&v43, sub_10004C554, 0);
LABEL_7:
    swift_bridgeObjectRelease(v20);
    goto LABEL_9;
  }
  if ((v19 & 0x2000000000000000) == 0)
  {
    if ((v18 & 0x1000000000000000) == 0)
      _StringObject.sharedUTF8.getter(v18, v19);
    sub_10004C554(v42);
    v43 = (nw_interface_t)v42[0];
    goto LABEL_7;
  }
  v42[0] = v18;
  v42[1] = v19 & 0xFFFFFFFFFFFFFFLL;
  v43 = (nw_interface_t)nw_interface_create_with_name(v42);
  swift_bridgeObjectRelease(v20);
LABEL_9:
  v21 = v43;
  nw_parameters_require_interface(v16, v43);
  v22 = swift_unknownObjectRelease(v21);
  v23 = Logger.logObject.getter(v22);
  v24 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v23, v24))
  {
    v25 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v25 = 0;
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "Start monitoring network path for gateway address updates", v25, 2u);
    swift_slowDealloc(v25, -1, -1);
  }

  result = nw_path_create_evaluator_for_endpoint(0, v16);
  if (result)
  {
    v27 = result;
    if (qword_100404108 != -1)
      swift_once(&qword_100404108, sub_10017E140);
    v28 = (void *)static OS_dispatch_queue.p2p;
    v29 = swift_allocObject(&unk_1003DDC98, 24, 7);
    swift_weakInit(v29 + 16, v4);
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v38, a2);
    v30 = *(unsigned __int8 *)(v8 + 80);
    v31 = (v30 + 40) & ~v30;
    v32 = (char *)swift_allocObject(&unk_1003DE350, v31 + v39, v30 | 7);
    v33 = v40;
    *((_QWORD *)v32 + 2) = a2;
    *((_QWORD *)v32 + 3) = v33;
    *((_QWORD *)v32 + 4) = v29;
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(&v32[v31], v10, a2);
    v34 = type metadata accessor for AppleDevice.NetworkPathMonitor();
    v35 = swift_allocObject(v34, 24, 7);
    v36 = v28;
    swift_retain();
    AppleDevice.NetworkPathMonitor.init(evaluator:queue:updatedHandler:)(v27, v36, (uint64_t)sub_100062C58, (uint64_t)v32);
    swift_release(v29);
    swift_unknownObjectRelease(v16);
    v37 = *(_QWORD *)(v4 + v41);
    *(_QWORD *)(v4 + v41) = v35;
    swift_release(v37);
    return v4;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100061480(NSObject *a1)
{
  uint64_t v1;

  return sub_1000569F0(a1, *(void (**)(_QWORD))(v1 + 16));
}

uint64_t type metadata accessor for AppleDevice.NetworkPathMonitor()
{
  return objc_opt_self(_TtCC7CoreP2P11AppleDevice18NetworkPathMonitor);
}

void sub_1000614AC(uint64_t a1, __int16 a2, char a3)
{
  uint64_t v3;

  sub_100057148(a1, a2, a3, *(void (**)(void))(v3 + 16), *(_QWORD *)(v3 + 24), *(void (**)(_QWORD))(v3 + 32));
}

uint64_t type metadata accessor for AppleDevice.InternetSharingProviderSession(uint64_t a1)
{
  return sub_10000D69C(a1, qword_1004056A8, (uint64_t)&nominal type descriptor for AppleDevice.InternetSharingProviderSession);
}

uint64_t sub_1000614D0(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;

  return sub_1000579C8(a1, a2, a3, *(void (**)(void))(v3 + 16), *(_QWORD *)(v3 + 24), *(uint64_t (**)(void))(v3 + 32));
}

uint64_t type metadata accessor for AppleDevice.InternetSharingRequesterSession(uint64_t a1)
{
  return sub_10000D69C(a1, qword_100405790, (uint64_t)&nominal type descriptor for AppleDevice.InternetSharingRequesterSession);
}

uint64_t type metadata accessor for AppleDevice.InternetSharingRequesterSession.NetworkConnectivityMonitor(uint64_t a1)
{
  return sub_10000D69C(a1, qword_100405868, (uint64_t)&nominal type descriptor for AppleDevice.InternetSharingRequesterSession.NetworkConnectivityMonitor);
}

uint64_t sub_100061504(uint64_t a1, uint64_t a2)
{
  initializeWithTake for AWDLSoftErrorReport(a2, a1);
  return a2;
}

uint64_t sub_100061540(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;

  v5 = a2;
  if ((a5 & 1) != 0)
  {
    swift_bridgeObjectRetain(a2);
    v5 = a4;
  }
  return swift_bridgeObjectRetain(v5);
}

uint64_t sub_10006156C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t result;

  result = swift_bridgeObjectRelease(a2);
  if ((a5 & 1) != 0)
    return swift_bridgeObjectRelease(a4);
  return result;
}

uint64_t type metadata accessor for AppleDevice.EventSource(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &nominal type descriptor for AppleDevice.EventSource);
}

uint64_t sub_1000615BC(uint64_t a1)
{
  uint64_t result;

  result = sub_100011DE4(&qword_100405178, type metadata accessor for AppleDevice, (uint64_t)&protocol conformance descriptor for AppleDevice);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000615F8(uint64_t a1)
{
  uint64_t result;

  result = sub_100011DE4(&qword_100405180, type metadata accessor for AppleDevice, (uint64_t)&protocol conformance descriptor for AppleDevice);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

_UNKNOWN **sub_100061634()
{
  return &protocol witness table for AppleKeychain;
}

_UNKNOWN **sub_100061640()
{
  return &protocol witness table for LockedPreferencesStorage<A>;
}

uint64_t sub_10006164C(uint64_t a1)
{
  uint64_t result;

  result = sub_100011DE4(&qword_1004051D8, type metadata accessor for AppleDevice, (uint64_t)&protocol conformance descriptor for AppleDevice);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_100061688(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 24);
}

uint64_t sub_100061690(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = swift_getWitnessTable(&protocol conformance descriptor for AppleDevice.EventSource<A>, a2);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000616BC()
{
  return type metadata accessor for AppleDevice(0);
}

uint64_t sub_1000616C4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[25];

  v5[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  v5[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  v5[4] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v5[5] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v5[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v5[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v5[6] = "\b";
  v5[7] = &unk_10033ABA0;
  v5[8] = &unk_10033ABB8;
  v5[9] = &unk_10033ABB8;
  v5[10] = &unk_10033ABB8;
  v5[11] = &unk_10033ABB8;
  v5[12] = &unk_10033ABB8;
  v5[13] = (char *)&value witness table for Builtin.RawPointer + 64;
  v5[14] = (char *)&value witness table for Builtin.Int32 + 64;
  v5[15] = (char *)&value witness table for Builtin.Int32 + 64;
  v5[16] = (char *)&value witness table for Builtin.Int64 + 64;
  v5[17] = (char *)&value witness table for Builtin.Int32 + 64;
  v5[18] = (char *)&value witness table for Builtin.Int32 + 64;
  v5[19] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v5[20] = (char *)&value witness table for Builtin.NativeObject + 64;
  v5[21] = &unk_10033ABD0;
  result = type metadata accessor for RoutingSocket(319);
  if (v3 <= 0x3F)
  {
    v5[22] = *(_QWORD *)(result - 8) + 64;
    v5[23] = &unk_10033ABE8;
    result = type metadata accessor for Logger(319);
    if (v4 <= 0x3F)
    {
      v5[24] = *(_QWORD *)(result - 8) + 64;
      return swift_updateClassMetadata2(a1, 256, 25, v5, a1 + 80);
    }
  }
  return result;
}

uint64_t sub_1000617E4()
{
  return type metadata accessor for AppleDevice.InterfaceHandle(0);
}

uint64_t type metadata accessor for AppleDevice.InterfaceHandle(uint64_t a1)
{
  return sub_10000D69C(a1, qword_1004053C0, (uint64_t)&nominal type descriptor for AppleDevice.InterfaceHandle);
}

uint64_t sub_100061800(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[9];

  result = type metadata accessor for Logger(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.RawPointer + 64;
    v4[2] = (char *)&value witness table for Builtin.Int32 + 64;
    v4[3] = (char *)&value witness table for Builtin.Int32 + 64;
    v4[4] = &unk_10033AC10;
    v4[5] = &unk_10033AC28;
    v4[6] = &unk_10033AC28;
    v4[7] = &unk_10033AC40;
    v4[8] = (char *)&value witness table for Builtin.UnknownObject + 64;
    result = swift_updateClassMetadata2(a1, 256, 9, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_1000618B8()
{
  return type metadata accessor for AppleDevice.InternetSharingProviderSession(0);
}

uint64_t sub_1000618C0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[8];

  result = type metadata accessor for Logger(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_10033ACA0;
    v4[2] = &unk_10033ACA0;
    v4[3] = (char *)&value witness table for () + 64;
    v4[4] = &unk_10033ACA0;
    v4[5] = &unk_10033ACB8;
    v4[6] = &unk_10033ACD0;
    v4[7] = (char *)&value witness table for Builtin.UnknownObject + 64;
    result = swift_updateClassMetadata2(a1, 256, 8, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_100061968()
{
  return type metadata accessor for AppleDevice.InternetSharingRequesterSession(0);
}

uint64_t sub_100061970(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[5];

  result = type metadata accessor for Logger(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_10033ACA0;
    v4[2] = (char *)&value witness table for () + 64;
    v4[3] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[4] = &unk_10033ACD0;
    result = swift_updateClassMetadata2(a1, 256, 5, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_100061A0C()
{
  return type metadata accessor for AppleDevice.InternetSharingRequesterSession.NetworkConnectivityMonitor(0);
}

uint64_t sub_100061A14(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[5];

  v4[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[1] = &unk_10033ABB8;
  v4[2] = (char *)&value witness table for Builtin.Int32 + 64;
  v4[3] = (char *)&value witness table for () + 64;
  result = type metadata accessor for Logger(319);
  if (v3 <= 0x3F)
  {
    v4[4] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 5, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_100061AB4()
{
  return type metadata accessor for AppleDevice.GatewayMonitor(0);
}

void sub_100061ABC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[6];

  v2 = type metadata accessor for Logger(319);
  if (v3 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(v2 - 8) + 64;
    v8[1] = &unk_10033ABB8;
    sub_100061B98(319, &qword_1004059D8, type metadata accessor for RoutingSocket);
    if (v5 <= 0x3F)
    {
      v8[2] = *(_QWORD *)(v4 - 8) + 64;
      v8[3] = "!";
      v8[4] = L"\a";
      sub_100061B98(319, (unint64_t *)&qword_1004059E0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchTime);
      if (v7 <= 0x3F)
      {
        v8[5] = *(_QWORD *)(v6 - 8) + 64;
        swift_updateClassMetadata2(a1, 256, 6, v8, a1 + 80);
      }
    }
  }
}

void sub_100061B98(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    v5 = a3(255);
    v6 = type metadata accessor for Optional(a1, v5);
    if (!v7)
      atomic_store(v6, a2);
  }
}

uint64_t sub_100061BE4(uint64_t a1)
{
  swift_unknownObjectUnownedDestroy();
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
}

uint64_t sub_100061C08(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  swift_unknownObjectUnownedCopyInit();
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t sub_100061C3C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(swift_unknownObjectUnownedCopyAssign() + 8) = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  return a1;
}

__n128 sub_100061C84(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __n128 result;

  v3 = swift_unknownObjectUnownedTakeInit();
  result = *(__n128 *)(a2 + 8);
  *(__n128 *)(v3 + 8) = result;
  return result;
}

uint64_t sub_100061CAC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = swift_unknownObjectUnownedTakeAssign();
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(v4 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v5;
  swift_bridgeObjectRelease(v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for NANAttribute.RangingSetup(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NANAttribute.RangingSetup(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for AppleDevice.InternetSharingRequesterSession.State(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return sub_100061E10(a1, a2, a3, (void (*)(_QWORD, uint64_t, uint64_t))sub_100064500);
}

uint64_t *assignWithCopy for AppleDevice.InternetSharingRequesterSession.State(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_100061E6C(a1, a2, a3, (void (*)(_QWORD, uint64_t, uint64_t))sub_100064500, (void (*)(uint64_t, uint64_t, uint64_t))sub_100064504);
}

__n128 initializeWithTake for NANAvailabilityEntry.BandChannelEntries(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t *assignWithTake for AppleDevice.InternetSharingRequesterSession.State(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return sub_100061ED8(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))sub_100064504);
}

ValueMetadata *type metadata accessor for AppleDevice.InternetSharingRequesterSession.State()
{
  return &type metadata for AppleDevice.InternetSharingRequesterSession.State;
}

uint64_t initializeBufferWithCopyOfBuffer for AppleDevice.InternetSharingProviderSession.State(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return sub_100061E10(a1, a2, a3, (void (*)(_QWORD, uint64_t, uint64_t))sub_100061DD0);
}

uint64_t sub_100061DD0(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if (a3 == 1)
    return swift_bridgeObjectRetain(a2);
  return result;
}

uint64_t destroy for AppleDevice.InternetSharingProviderSession.State(uint64_t a1)
{
  return sub_100061DF8(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t sub_100061DF8(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if (a3 == 1)
    return swift_bridgeObjectRelease(a2);
  return result;
}

uint64_t sub_100061E10(uint64_t a1, uint64_t *a2, uint64_t a3, void (*a4)(_QWORD, uint64_t, uint64_t))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *a2;
  v6 = a2[1];
  v7 = *((unsigned __int8 *)a2 + 16);
  a4(*a2, v6, v7);
  *(_QWORD *)a1 = v5;
  *(_QWORD *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 16) = v7;
  return a1;
}

uint64_t *assignWithCopy for AppleDevice.InternetSharingProviderSession.State(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_100061E6C(a1, a2, a3, (void (*)(_QWORD, uint64_t, uint64_t))sub_100061DD0, (void (*)(uint64_t, uint64_t, uint64_t))sub_100061DF8);
}

uint64_t *sub_100061E6C(uint64_t *a1, uint64_t *a2, uint64_t a3, void (*a4)(_QWORD, uint64_t, uint64_t), void (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v7 = *a2;
  v8 = a2[1];
  v9 = *((unsigned __int8 *)a2 + 16);
  a4(*a2, v8, v9);
  v10 = *a1;
  v11 = a1[1];
  *a1 = v7;
  a1[1] = v8;
  v12 = *((unsigned __int8 *)a1 + 16);
  *((_BYTE *)a1 + 16) = v9;
  a5(v10, v11, v12);
  return a1;
}

uint64_t *assignWithTake for AppleDevice.InternetSharingProviderSession.State(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return sub_100061ED8(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))sub_100061DF8);
}

uint64_t *sub_100061ED8(uint64_t *a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t))
{
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_BYTE *)(a2 + 16);
  v6 = *a1;
  v7 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v8 = *((unsigned __int8 *)a1 + 16);
  *((_BYTE *)a1 + 16) = v5;
  a4(v6, v7, v8);
  return a1;
}

uint64_t _s7CoreP2P11AppleDeviceC30InternetSharingProviderSessionC5StateOwet_0(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 2)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t _s7CoreP2P11AppleDeviceC30InternetSharingProviderSessionC5StateOwst_0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 254;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t sub_100061FA8(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 1u)
    return *(unsigned __int8 *)(a1 + 16);
  else
    return (*(_DWORD *)a1 + 2);
}

uint64_t sub_100061FC0(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(_QWORD *)result = a2 - 2;
    *(_QWORD *)(result + 8) = 0;
    LOBYTE(a2) = 2;
  }
  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for AppleDevice.InternetSharingProviderSession.State()
{
  return &type metadata for AppleDevice.InternetSharingProviderSession.State;
}

void destroy for AppleDevice.RemovedInterfaceHandle(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 32));

  if (*(_QWORD *)(a1 + 56))
    swift_release(*(_QWORD *)(a1 + 64));
}

uint64_t initializeWithCopy for AppleDevice.RemovedInterfaceHandle(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  _OWORD *v8;
  id v9;
  uint64_t v10;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v5;
  v6 = *(void **)(a2 + 40);
  *(_QWORD *)(a1 + 40) = v6;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 51) = *(_DWORD *)(a2 + 51);
  v8 = (_OWORD *)(a2 + 56);
  v7 = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  v9 = v6;
  if (v7)
  {
    v10 = *(_QWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 56) = v7;
    *(_QWORD *)(a1 + 64) = v10;
    swift_retain(v10);
  }
  else
  {
    *(_OWORD *)(a1 + 56) = *v8;
  }
  return a1;
}

uint64_t assignWithCopy for AppleDevice.RemovedInterfaceHandle(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  id v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = *(void **)(a2 + 40);
  v9 = *(void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v8;
  v10 = v8;

  v11 = *(_DWORD *)(a2 + 48);
  v12 = *(_QWORD *)(a1 + 56);
  *(_DWORD *)(a1 + 51) = *(_DWORD *)(a2 + 51);
  *(_DWORD *)(a1 + 48) = v11;
  v13 = *(_QWORD *)(a2 + 56);
  if (!v12)
  {
    if (v13)
    {
      v16 = *(_QWORD *)(a2 + 64);
      *(_QWORD *)(a1 + 56) = v13;
      *(_QWORD *)(a1 + 64) = v16;
      swift_retain(v16);
      return a1;
    }
LABEL_7:
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    return a1;
  }
  if (!v13)
  {
    swift_release(*(_QWORD *)(a1 + 64));
    goto LABEL_7;
  }
  v14 = *(_QWORD *)(a2 + 64);
  v15 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 56) = v13;
  *(_QWORD *)(a1 + 64) = v14;
  swift_retain(v14);
  swift_release(v15);
  return a1;
}

__n128 initializeWithTake for AppleDevice.RemovedInterfaceHandle(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for AppleDevice.RemovedInterfaceHandle(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 32));
  v6 = *(void **)(a1 + 40);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);

  v7 = *(_QWORD *)(a2 + 56);
  v8 = *(_QWORD *)(a1 + 56);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 51) = *(_DWORD *)(a2 + 51);
  if (!v8)
  {
    if (v7)
    {
      v11 = *(_QWORD *)(a2 + 64);
      *(_QWORD *)(a1 + 56) = v7;
      *(_QWORD *)(a1 + 64) = v11;
      return a1;
    }
LABEL_7:
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    return a1;
  }
  if (!v7)
  {
    swift_release(*(_QWORD *)(a1 + 64));
    goto LABEL_7;
  }
  v9 = *(_QWORD *)(a2 + 64);
  v10 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 56) = v7;
  *(_QWORD *)(a1 + 64) = v9;
  swift_release(v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for AppleDevice.RemovedInterfaceHandle(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 72))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AppleDevice.RemovedInterfaceHandle(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 72) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 72) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AppleDevice.RemovedInterfaceHandle()
{
  return &type metadata for AppleDevice.RemovedInterfaceHandle;
}

unint64_t sub_100062350()
{
  unint64_t result;

  result = qword_100405B08;
  if (!qword_100405B08)
  {
    result = swift_getWitnessTable("\t9\n", &type metadata for AppleDevice.RemovedInterfaceHandle);
    atomic_store(result, (unint64_t *)&qword_100405B08);
  }
  return result;
}

uint64_t sub_100062394(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  if (a5 != 255)
    return sub_1000623AC(result, a2, a3, a4, a5 & 1);
  return result;
}

uint64_t sub_1000623AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t result;

  if ((a5 & 1) != 0)
    return swift_bridgeObjectRelease(a4);
  return result;
}

uint64_t sub_1000623BC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

void sub_1000623E8(NSObject *a1)
{
  uint64_t v1;

  sub_10004C580(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_1000623F4()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_100062414(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v20)(uint64_t, uint64_t, char);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t (**v27)(uint64_t, uint64_t, char);
  _BYTE v28[24];
  _QWORD v29[3];
  uint64_t v30;
  char v31[24];

  v14 = *(_QWORD *)(v7 + 40);
  swift_beginAccess(v14 + 72, v31, 0, 0);
  sub_100033B48(v14 + 72, (uint64_t)v29, &qword_100405050);
  v15 = v30;
  sub_100033A84((uint64_t)v29, &qword_100405050);
  if (v15)
  {
    v16 = sub_100012C84();
    v17 = swift_allocError(&type metadata for WiFiError, v16, 0, 0);
    *(_OWORD *)v18 = xmmword_10033B1B0;
    *(_BYTE *)(v18 + 16) = 0;
    a4();
    return swift_errorRelease(v17);
  }
  else
  {
    v20 = (uint64_t (*)(uint64_t, uint64_t, char))swift_allocObject(&unk_1003DDF40, 48, 7);
    *((_QWORD *)v20 + 2) = a4;
    *((_QWORD *)v20 + 3) = a5;
    *((_QWORD *)v20 + 4) = a6;
    *((_QWORD *)v20 + 5) = a7;
    v21 = type metadata accessor for AppleDevice.InternetSharingRequesterSession(0);
    v22 = swift_allocObject(v21, *(unsigned int *)(v21 + 48), *(unsigned __int16 *)(v21 + 52));
    swift_bridgeObjectRetain(a2);
    swift_retain();
    swift_retain();
    Logger.init(subsystem:category:)(0x6C7070612E6D6F63, 0xED00006E616E2E65, 0x74656E7265746E69, 0xEF676E6972616853);
    v23 = OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A31InternetSharingRequesterSession_networkConnectivityMonitor;
    v24 = type metadata accessor for AppleDevice.InternetSharingRequesterSession.NetworkConnectivityMonitor(0);
    swift_allocObject(v24, *(unsigned int *)(v24 + 48), *(unsigned __int16 *)(v24 + 52));
    *(_QWORD *)(v22 + v23) = sub_10004BF50();
    v25 = v22
        + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A31InternetSharingRequesterSession_state;
    *(_QWORD *)v25 = 0;
    *(_QWORD *)(v25 + 8) = 0;
    *(_BYTE *)(v25 + 16) = 2;
    v26 = (_QWORD *)(v22
                   + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A31InternetSharingRequesterSession_interface);
    *v26 = a1;
    v26[1] = a2;
    v27 = (uint64_t (**)(uint64_t, uint64_t, char))(v22
                                                          + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A31InternetSharingRequesterSession_stateUpdatedHandler);
    *v27 = sub_10006450C;
    v27[1] = v20;
    v30 = v21;
    v29[0] = v22;
    swift_beginAccess(v14 + 72, v28, 33, 0);
    swift_retain();
    swift_retain();
    sub_10006298C((uint64_t)v29, v14 + 72, &qword_100405050);
    swift_endAccess(v28);
    swift_release(v14);
    sub_1000608E0();
    return swift_release(v22);
  }
}

uint64_t sub_100062670(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v20)(uint64_t, uint64_t, char);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t (**v27)(uint64_t, uint64_t, char);
  _BYTE v28[24];
  _QWORD v29[3];
  uint64_t v30;
  char v31[24];

  v14 = *(_QWORD *)(v7 + 40);
  swift_beginAccess(v14 + 72, v31, 0, 0);
  sub_100033B48(v14 + 72, (uint64_t)v29, &qword_100405050);
  v15 = v30;
  sub_100033A84((uint64_t)v29, &qword_100405050);
  if (v15)
  {
    v16 = sub_100012C84();
    v17 = swift_allocError(&type metadata for WiFiError, v16, 0, 0);
    *(_OWORD *)v18 = xmmword_10033B1B0;
    *(_BYTE *)(v18 + 16) = 0;
    a4();
    return swift_errorRelease(v17);
  }
  else
  {
    v20 = (uint64_t (*)(uint64_t, uint64_t, char))swift_allocObject(&unk_1003DDC20, 48, 7);
    *((_QWORD *)v20 + 2) = a4;
    *((_QWORD *)v20 + 3) = a5;
    *((_QWORD *)v20 + 4) = a6;
    *((_QWORD *)v20 + 5) = a7;
    v21 = type metadata accessor for AppleDevice.InternetSharingRequesterSession(0);
    v22 = swift_allocObject(v21, *(unsigned int *)(v21 + 48), *(unsigned __int16 *)(v21 + 52));
    swift_bridgeObjectRetain(a2);
    swift_retain();
    swift_retain();
    Logger.init(subsystem:category:)(0x6C7070612E6D6F63, 0xED00006E616E2E65, 0x74656E7265746E69, 0xEF676E6972616853);
    v23 = OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A31InternetSharingRequesterSession_networkConnectivityMonitor;
    v24 = type metadata accessor for AppleDevice.InternetSharingRequesterSession.NetworkConnectivityMonitor(0);
    swift_allocObject(v24, *(unsigned int *)(v24 + 48), *(unsigned __int16 *)(v24 + 52));
    *(_QWORD *)(v22 + v23) = sub_10004BF50();
    v25 = v22
        + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A31InternetSharingRequesterSession_state;
    *(_QWORD *)v25 = 0;
    *(_QWORD *)(v25 + 8) = 0;
    *(_BYTE *)(v25 + 16) = 2;
    v26 = (_QWORD *)(v22
                   + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A31InternetSharingRequesterSession_interface);
    *v26 = a1;
    v26[1] = a2;
    v27 = (uint64_t (**)(uint64_t, uint64_t, char))(v22
                                                          + OBJC_IVAR____TtCC7CoreP2P11AppleDeviceP33_31FB922BC8C13D419BA8418A9FE51E1A31InternetSharingRequesterSession_stateUpdatedHandler);
    *v27 = sub_10006450C;
    v27[1] = v20;
    v30 = v21;
    v29[0] = v22;
    swift_beginAccess(v14 + 72, v28, 33, 0);
    swift_retain();
    swift_retain();
    sub_10006298C((uint64_t)v29, v14 + 72, &qword_100405050);
    swift_endAccess(v28);
    swift_release(v14);
    sub_1000608E0();
    return swift_release(v22);
  }
}

uint64_t sub_1000628D4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000628F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t result;

  if ((a5 & 1) != 0)
    return swift_bridgeObjectRetain(a4);
  return result;
}

uint64_t sub_100062908(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(unsigned __int8 *)(a1 + 32));
  return a1;
}

uint64_t sub_100062940()
{
  return sub_100063658(32);
}

uint64_t sub_100062948(NSObject *a1)
{
  uint64_t v1;

  return sub_10004ED14(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_100062950()
{
  return sub_100063658(32);
}

uint64_t sub_100062958()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100062968()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))() & 1;
}

uint64_t sub_10006298C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_100012C44(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t sub_1000629D4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 25, 7);
}

uint64_t sub_100062A00()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100062A2C()
{
  return sub_100063658(32);
}

uint64_t sub_100062A34(NSObject *a1)
{
  uint64_t v1;

  return sub_10004EA6C(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_100062A3C()
{
  return sub_100063658(32);
}

uint64_t sub_100062A44(NSObject *a1)
{
  uint64_t v1;

  return sub_10004F320(a1, *(_QWORD *)(v1 + 16), *(_QWORD **)(v1 + 24)) & 1;
}

uint64_t sub_100062A60()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100062A74()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for Logger(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v6 + 8));
  return swift_deallocObject(v0, v6 + 16, v5);
}

void sub_100062AEC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v5 = *(_QWORD *)(type metadata accessor for Logger(0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = v2 + ((*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  sub_100059934(a1, a2, v2 + v6, *(_QWORD *)v7, *(_QWORD *)(v7 + 8));
}

id sub_100062B50()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(*(_QWORD *)(v0 + 16) + 48), "updateSoftAPBand:", *(unsigned __int8 *)(v0 + 24) + 1);
}

uint64_t sub_100062B6C(uint64_t a1)
{
  return swift_release(a1 & 0x7FFFFFFFFFFFFFFFLL);
}

id sub_100062B74(id result)
{
  if (result != (id)1)
    return result;
  return result;
}

uint64_t sub_100062B84()
{
  uint64_t v0;

  return sub_10004E42C(v0);
}

uint64_t sub_100062B8C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100062BB8()
{
  uint64_t v0;

  return sub_10012B25C(*(void (**)(void))(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_100062BC4(char a1)
{
  uint64_t v1;

  return sub_10004E4F0(a1, v1);
}

uint64_t sub_100062BCC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100062BDC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));

  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100062C10(int a1, void *a2)
{
  uint64_t v2;

  return sub_10004B95C(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

char *sub_100062C1C(char *__source)
{
  uint64_t v1;
  char *result;

  result = *(char **)(v1 + 16);
  if (result)
    return (char *)strlcpy(result, __source, 0x10uLL);
  __break(1u);
  return result;
}

uint64_t sub_100062C58(NSObject *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = v1[2];
  v3 = *(unsigned __int8 *)(*(_QWORD *)(v2 - 8) + 80);
  return sub_10004EFBC(a1, v1[4], (uint64_t)v1 + ((v3 + 40) & ~v3), v2, v1[3]);
}

uint64_t sub_100062C7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release(*(_QWORD *)(v0 + 32));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100062CE8(NSObject *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = v1[2];
  v3 = *(unsigned __int8 *)(*(_QWORD *)(v2 - 8) + 80);
  return sub_1000500D4(a1, v1[4], (uint64_t)v1 + ((v3 + 40) & ~v3), v2, v1[3]);
}

uint64_t sub_100062D08()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void *sub_100062D18(void *__src, size_t __len)
{
  uint64_t v2;

  if (__src)
  {
    if ((__len & 0x8000000000000000) != 0)
    {
      __src = (void *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableRawPointer.copyMemory with negative count", 54, 2, "Swift/UnsafeRawPointer.swift", 28, 2, 1549, 0);
      __break(1u);
    }
    else
    {
      return memmove(*(void **)(v2 + 40), __src, __len);
    }
  }
  return __src;
}

uint64_t sub_100062D98()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100062DA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int EnumCaseMultiPayload;
  unint64_t v8;
  unint64_t v9;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t);
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int16 v32;

  v1 = type metadata accessor for DriverEvent(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release(*(_QWORD *)(v0 + 24));
  v6 = v0 + v4;
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v0 + v4, v1);
  switch(EnumCaseMultiPayload)
  {
    case 2:
      sub_1000131C4(*(_QWORD *)v6, *(_QWORD *)(v6 + 8), *(_QWORD *)(v6 + 16), *(_QWORD *)(v6 + 24), *(_QWORD *)(v6 + 32), *(_BYTE *)(v6 + 40), *(_BYTE *)(v6 + 41));
      break;
    case 1:
      v11 = type metadata accessor for DriverEvent.AWDL(0);
      switch(swift_getEnumCaseMultiPayload(v0 + v4, v11))
      {
        case 1u:
          sub_1000632E8(*(_QWORD *)(v6 + 8), *(_QWORD *)(v6 + 16), *(_QWORD *)(v6 + 24));
          v12 = v6 + *(int *)(sub_100012C44(&qword_100405BB0) + 48);
          v13 = (int *)type metadata accessor for AWDLActionFrame.Header(0);
          v14 = v12 + v13[8];
          v15 = type metadata accessor for DispatchTimeInterval(0);
          v16 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8);
          v16(v14, v15);
          v16(v12 + v13[9], v15);
          swift_bridgeObjectRelease(*(_QWORD *)(v12 + v13[16]));
          break;
        case 2u:
          swift_bridgeObjectRelease(*(_QWORD *)(v6 + 80));
          swift_bridgeObjectRelease(*(_QWORD *)(v6 + 88));
          swift_bridgeObjectRelease(*(_QWORD *)(v6 + 96));
          swift_bridgeObjectRelease(*(_QWORD *)(v6 + 104));
          break;
        case 3u:
          v17 = type metadata accessor for AWDLStatistics.LowLatencyStatistics.Configuration(0);
          v18 = v6 + *(int *)(v17 + 80);
          v19 = type metadata accessor for DispatchTimeInterval(0);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 8))(v18, v19);
          swift_bridgeObjectRelease(*(_QWORD *)(v6 + *(int *)(v17 + 144) + 8));
          v20 = (_QWORD *)(v6 + *(int *)(type metadata accessor for AWDLStatistics.LowLatencyStatistics(0) + 20));
          swift_bridgeObjectRelease(v20[27]);
          swift_bridgeObjectRelease(v20[28]);
          swift_bridgeObjectRelease(v20[29]);
          swift_bridgeObjectRelease(v20[30]);
          swift_bridgeObjectRelease(v20[31]);
          swift_bridgeObjectRelease(v20[32]);
          swift_bridgeObjectRelease(v20[33]);
          swift_bridgeObjectRelease(v20[34]);
          swift_bridgeObjectRelease(v20[35]);
          swift_bridgeObjectRelease(v20[36]);
          swift_bridgeObjectRelease(v20[37]);
          swift_bridgeObjectRelease(v20[38]);
          swift_bridgeObjectRelease(v20[39]);
          swift_bridgeObjectRelease(v20[40]);
          swift_bridgeObjectRelease(v20[41]);
          swift_bridgeObjectRelease(v20[42]);
          swift_bridgeObjectRelease(v20[43]);
          swift_bridgeObjectRelease(v20[44]);
          break;
        case 6u:
          sub_10006156C(*(_QWORD *)v6, *(_QWORD *)(v6 + 8), *(_QWORD *)(v6 + 16), *(_QWORD *)(v6 + 24), *(_BYTE *)(v6 + 32));
          break;
        case 8u:

          break;
        case 9u:
          v21 = type metadata accessor for DispatchTimeInterval(0);
          v22 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 8);
          v22(v0 + v4, v21);
          v23 = type metadata accessor for AWDLIdleActivity(0);
          v22(v6 + *(int *)(v23 + 20), v21);
          break;
        default:
          goto LABEL_6;
      }
      break;
    case 0:
      v32 = *(_WORD *)(v6 + 360);
      v30 = *(_OWORD *)(v6 + 320);
      v31 = *(_OWORD *)(v6 + 336);
      v28 = *(_OWORD *)(v6 + 288);
      v29 = *(_OWORD *)(v6 + 304);
      v26 = *(_OWORD *)(v6 + 256);
      v27 = *(_OWORD *)(v6 + 272);
      v24 = *(_OWORD *)(v6 + 224);
      v25 = *(_OWORD *)(v6 + 240);
      sub_100063114(*(_QWORD *)v6, *(_QWORD *)(v6 + 8), *(_QWORD *)(v6 + 16), *(_QWORD *)(v6 + 24), *(_QWORD *)(v6 + 32), *(_QWORD *)(v6 + 40), *(_QWORD *)(v6 + 48), *(_QWORD *)(v6 + 56), *(_QWORD *)(v6 + 64), *(_QWORD *)(v6 + 72), *(_QWORD *)(v6 + 80), *(_QWORD *)(v6 + 88), *(_QWORD *)(v6 + 96), *(_QWORD *)(v6 + 104), *(_QWORD *)(v6 + 112), *(_QWORD *)(v6 + 120), *(_QWORD *)(v6 + 128), *(_QWORD *)(v6 + 136), *(_QWORD *)(v6 + 144),
        *(_QWORD *)(v6 + 152),
        *(_QWORD *)(v6 + 160),
        *(_QWORD *)(v6 + 168),
        *(_QWORD *)(v6 + 176),
        *(_QWORD *)(v6 + 184),
        *(_QWORD *)(v6 + 192),
        *(_QWORD *)(v6 + 200),
        *(_QWORD *)(v6 + 208),
        *(_QWORD *)(v6 + 216),
        v24,
        *((uint64_t *)&v24 + 1),
        v25,
        *((uint64_t *)&v25 + 1),
        v26,
        *((uint64_t *)&v26 + 1),
        v27,
        *((uint64_t *)&v27 + 1),
        v28,
        *((uint64_t *)&v28 + 1),
        v29,
        *((uint64_t *)&v29 + 1),
        v30,
        *((uint64_t *)&v30 + 1),
        v31,
        *((uint64_t *)&v31 + 1),
        *(_QWORD *)(v6 + 352),
        v32,
        SHIBYTE(v32));
      break;
  }
LABEL_6:
  v8 = (v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v9 = (v8 + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_release(*(_QWORD *)(v0 + v8));
  swift_release(*(_QWORD *)(v0 + v9));
  return swift_deallocObject(v0, ((((v9 + 11) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8, v3 | 7);
}

uint64_t sub_100063114(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46,char a47)
{
  uint64_t v47;

  switch(a47)
  {
    case 2:
    case 3:
    case 5:
    case 7:
    case 13:
      result = a3;
      goto LABEL_3;
    case 6:
      result = a4;
      goto LABEL_3;
    case 16:
      return sub_1000632E8(a4, a5, a6);
    case 18:
      LOBYTE(v47) = a24;
      return sub_1000639BC(a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22,
               a23,
               v47,
               (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100063308);
    case 19:
      swift_bridgeObjectRelease(a30);
      swift_bridgeObjectRelease(a31);
      swift_bridgeObjectRelease(a32);
      swift_bridgeObjectRelease(a33);
      swift_bridgeObjectRelease(a34);
      swift_bridgeObjectRelease(a35);
      swift_bridgeObjectRelease(a36);
      swift_bridgeObjectRelease(a37);
      swift_bridgeObjectRelease(a38);
      swift_bridgeObjectRelease(a39);
      swift_bridgeObjectRelease(a40);
      swift_bridgeObjectRelease(a41);
      swift_bridgeObjectRelease(a42);
      swift_bridgeObjectRelease(a43);
      result = a45;
      goto LABEL_3;
    case 20:
LABEL_3:
      result = swift_bridgeObjectRelease(result);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1000632E8(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result >> 30)
  {
    if (result >> 30 != 1)
      return result;
    a2 = a3;
  }
  return swift_bridgeObjectRelease(a2);
}

uint64_t sub_100063308(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t a11, unint64_t a12, uint64_t a13, unint64_t a14, uint64_t a15, unint64_t a16, unint64_t a17, uint64_t a18, uint64_t a19, unint64_t a20,char a21)
{
  uint64_t v21;

  v21 = (a12 >> 60) & 3;
  switch((_DWORD)v21)
  {
    case 2:
      return sub_1000632E8(a2, a3, a4);
    case 1:
      return sub_1000633AC(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12 & 0xCFFFFFFFFFFFFFFFLL, a13, a14, a15, a16, a17, a18, a19,
               a20,
               a21);
    case 0:
      return swift_bridgeObjectRelease(a3);
  }
  return result;
}

uint64_t sub_1000633AC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t a11, unint64_t a12, uint64_t a13, unint64_t a14, uint64_t a15, unint64_t a16, unint64_t a17, uint64_t a18, uint64_t a19, unint64_t a20,char a21)
{
  uint64_t result;

  if (a12 >> 62 == 2)
  {
    sub_1000634E8(a2, a3, a4);
    return sub_10000E658(a6, a7);
  }
  else if ((a12 >> 62) <= 1)
  {
    swift_bridgeObjectRelease(a3);
    swift_bridgeObjectRelease(a4);
    swift_bridgeObjectRelease(a6);
    swift_bridgeObjectRelease(a8);
    sub_1000634E8(a9, a10, a11);
    sub_10000E658(a13, a14);
    return sub_100063504(a15, a16, a17, a18, a19, a20, a21);
  }
  return result;
}

uint64_t sub_1000634E8(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;

  if (a3 >> 60 != 15)
    return sub_10000E614(a2, a3);
  return result;
}

uint64_t sub_100063504(uint64_t result, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, char a7)
{
  if (a7 != -1)
    return sub_100063518(result, a2, a3, a4, a5, a6, a7);
  return result;
}

uint64_t sub_100063518(uint64_t result, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, char a7)
{
  switch(a7)
  {
    case 0:
      swift_bridgeObjectRelease(a2);
      swift_bridgeObjectRelease(a3);
      result = a5;
      return swift_bridgeObjectRelease(result);
    case 1:
    case 7:
      return swift_bridgeObjectRelease(result);
    case 2:
    case 8:
      result = a2;
      a2 = a3;
      goto LABEL_6;
    case 3:
      sub_10000E614(a2, a3);
      result = a4;
      a2 = a5;
      goto LABEL_6;
    case 5:
      sub_1000634E8(result, a2, a3);
      return sub_10000E658(a5, a6);
    case 6:
LABEL_6:
      result = sub_10000E614(result, a2);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1000635E4()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v1 = *(_QWORD *)(type metadata accessor for DriverEvent(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  v4 = (v3 + 15) & 0xFFFFFFFFFFFFFFF8;
  return sub_10004628C(*(void (**)(uint64_t))(v0 + 16), *(_QWORD *)(v0 + 24), v0 + v2, *(_QWORD *)(v0 + v3), *(_QWORD *)(v0 + v4), *(_DWORD *)(v0 + ((v4 + 11) & 0xFFFFFFFFFFFFFFF8)), *(_DWORD *)(v0 + ((v4 + 11) & 0xFFFFFFFFFFFFFFF8) + 4), *(_QWORD *)(v0 + ((((v4 + 11) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_100063650()
{
  return sub_100063658(48);
}

uint64_t sub_100063658(uint64_t a1)
{
  uint64_t v1;

  swift_release(*(_QWORD *)(v1 + 16));
  swift_release(*(_QWORD *)(v1 + 24));
  return swift_deallocObject(v1, a1, 7);
}

uint64_t sub_100063690()
{
  uint64_t v0;

  return sub_1000464E4(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_DWORD *)(v0 + 32), *(_DWORD *)(v0 + 36), *(_QWORD *)(v0 + 40));
}

uint64_t sub_1000636A0()
{
  uint64_t v0;

  return sub_100045440(v0);
}

uint64_t sub_1000636A8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000636CC(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 403))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_1000636E8(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 460))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_100063704(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 184))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_100063720(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 264))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

unint64_t sub_10006373C()
{
  unint64_t result;
  uint64_t v1;
  void *v2;

  result = qword_100405C00;
  if (!qword_100405C00)
  {
    v1 = sub_100013C64(&qword_100405BF8);
    v2 = &protocol witness table for UnsafeRawBufferPointer;
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <> Slice<A>, v1, &v2);
    atomic_store(result, (unint64_t *)&qword_100405C00);
  }
  return result;
}

uint64_t sub_100063798()
{
  uint64_t v0;

  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000637A8(uint64_t a1)
{
  unsigned int v1;
  BOOL v2;
  int v3;

  v1 = *(unsigned __int8 *)(a1 + 62);
  v2 = v1 >= 2;
  v3 = (v1 + 2147483646) & 0x7FFFFFFF;
  if (v2)
    return (v3 + 1);
  else
    return 0;
}

uint64_t sub_1000637C4(uint64_t a1)
{
  unsigned int v1;
  BOOL v2;
  int v3;

  v1 = *(unsigned __int8 *)(a1 + 8);
  v2 = v1 >= 2;
  v3 = (v1 + 2147483646) & 0x7FFFFFFF;
  if (v2)
    return (v3 + 1);
  else
    return 0;
}

uint64_t sub_1000637E0(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100063824(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100063860(uint64_t a1)
{
  unsigned int v1;
  BOOL v2;
  int v3;

  v1 = *(unsigned __int8 *)(a1 + 4);
  v2 = v1 >= 2;
  v3 = (v1 + 2147483646) & 0x7FFFFFFF;
  if (v2)
    return (v3 + 1);
  else
    return 0;
}

uint64_t sub_10006387C(uint64_t result)
{
  *(_BYTE *)(result + 361) = 19;
  return result;
}

void *sub_100063888(const void *a1, void *a2)
{
  initializeWithTake for DriverEvent.NAN(a2, a1);
  return a2;
}

uint64_t sub_1000638C4(uint64_t result)
{
  *(_BYTE *)(result + 361) = 21;
  return result;
}

uint64_t sub_1000638D0(uint64_t result)
{
  *(_BYTE *)(result + 361) = 20;
  return result;
}

uint64_t sub_1000638DC(uint64_t result)
{
  *(_BYTE *)(result + 361) = 17;
  return result;
}

uint64_t sub_1000638E8(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 993))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_100063904(uint64_t result)
{
  *(_BYTE *)(result + 361) = 16;
  return result;
}

uint64_t sub_100063910(uint64_t result)
{
  *(_BYTE *)(result + 361) = 15;
  return result;
}

uint64_t sub_10006391C(uint64_t a1)
{
  unsigned int v1;
  int v2;

  v1 = *(_DWORD *)(a1 + 90);
  v2 = -4 - v1;
  if ((int)(-4 - v1) < 0)
    v2 = -1;
  if (v1 > 0x80000000)
    return (v2 + 1);
  else
    return 0;
}

uint64_t sub_100063940(uint64_t a1)
{
  uint64_t v3;

  LOBYTE(v3) = *(_BYTE *)(a1 + 184);
  sub_1000639BC(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144), *(_QWORD *)(a1 + 152), *(_QWORD *)(a1 + 160), *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    v3,
    (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100063A48);
  return a1;
}

uint64_t sub_1000639BC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t (*a22)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  BOOL v22;

  v22 = a5 >> 16 == 4294967293 || a5 >> 17 == 0x7FFFFFFF;
  if (!v22 || (a12 & 0x3FFFFFFFFFFFFFFELL) != 0)
    return a22(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
  return result;
}

uint64_t sub_100063A48(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t a11, unint64_t a12, uint64_t a13, unint64_t a14, uint64_t a15, unint64_t a16, unint64_t a17, uint64_t a18, uint64_t a19, unint64_t a20,char a21)
{
  uint64_t v21;

  v21 = (a12 >> 60) & 3;
  switch((_DWORD)v21)
  {
    case 2:
      return sub_100063D24(a2, a3, a4);
    case 1:
      return sub_100063AEC(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12 & 0xCFFFFFFFFFFFFFFFLL, a13, a14, a15, a16, a17, a18, a19,
               a20,
               a21);
    case 0:
      return swift_bridgeObjectRetain(a3);
  }
  return result;
}

uint64_t sub_100063AEC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t a11, unint64_t a12, uint64_t a13, unint64_t a14, uint64_t a15, unint64_t a16, unint64_t a17, uint64_t a18, uint64_t a19, unint64_t a20,char a21)
{
  uint64_t result;

  if (a12 >> 62 == 2)
  {
    sub_100063C28(a2, a3, a4);
    return sub_1000339F4(a6, a7);
  }
  else if ((a12 >> 62) <= 1)
  {
    swift_bridgeObjectRetain(a3);
    swift_bridgeObjectRetain(a4);
    swift_bridgeObjectRetain(a6);
    swift_bridgeObjectRetain(a8);
    sub_100063C28(a9, a10, a11);
    sub_1000339F4(a13, a14);
    return sub_100063C44(a15, a16, a17, a18, a19, a20, a21);
  }
  return result;
}

uint64_t sub_100063C28(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;

  if (a3 >> 60 != 15)
    return sub_100031FEC(a2, a3);
  return result;
}

uint64_t sub_100063C44(uint64_t result, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, char a7)
{
  if (a7 != -1)
    return sub_100063C58(result, a2, a3, a4, a5, a6, a7);
  return result;
}

uint64_t sub_100063C58(uint64_t result, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, char a7)
{
  switch(a7)
  {
    case 0:
      swift_bridgeObjectRetain(a2);
      swift_bridgeObjectRetain(a3);
      result = a5;
      return swift_bridgeObjectRetain(result);
    case 1:
    case 7:
      return swift_bridgeObjectRetain(result);
    case 2:
    case 8:
      result = a2;
      a2 = a3;
      goto LABEL_6;
    case 3:
      sub_100031FEC(a2, a3);
      result = a4;
      a2 = a5;
      goto LABEL_6;
    case 5:
      sub_100063C28(result, a2, a3);
      return sub_1000339F4(a5, a6);
    case 6:
LABEL_6:
      result = sub_100031FEC(result, a2);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100063D24(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result >> 30)
  {
    if (result >> 30 != 1)
      return result;
    a2 = a3;
  }
  return swift_bridgeObjectRetain(a2);
}

uint64_t sub_100063D44(uint64_t result)
{
  *(_BYTE *)(result + 361) = 18;
  return result;
}

uint64_t sub_100063D50(uint64_t a1)
{
  sub_100063DC8(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    *(_QWORD *)(a1 + 184),
    *(_QWORD *)(a1 + 192),
    *(_QWORD *)(a1 + 200),
    *(_QWORD *)(a1 + 208),
    *(_BYTE *)(a1 + 216));
  return a1;
}

uint64_t sub_100063DC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  uint64_t result;
  uint64_t v29;

  if (a12 >> 16 != 4294967292 || (a19 & 0x3FFFFFFFFFFFFFFELL) != 0)
  {
    LOBYTE(v29) = a28;
    return sub_1000639BC(a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25, a26,
             a27,
             v29,
             (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100063308);
  }
  return result;
}

uint64_t sub_100063E70(uint64_t result)
{
  *(_BYTE *)(result + 361) = 14;
  return result;
}

uint64_t sub_100063E7C(uint64_t result)
{
  *(_BYTE *)(result + 361) = 13;
  return result;
}

uint64_t sub_100063E88(uint64_t result)
{
  *(_BYTE *)(result + 361) = 12;
  return result;
}

uint64_t sub_100063E94(uint64_t result)
{
  *(_BYTE *)(result + 361) = 11;
  return result;
}

uint64_t sub_100063EA0(uint64_t result)
{
  *(_BYTE *)(result + 361) = 10;
  return result;
}

uint64_t sub_100063EAC(uint64_t result)
{
  *(_BYTE *)(result + 361) = 9;
  return result;
}

uint64_t sub_100063EB8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_100012C44(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_100063EFC(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 2080))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_100063F18(uint64_t result)
{
  *(_BYTE *)(result + 361) = 8;
  return result;
}

uint64_t sub_100063F24(uint64_t result)
{
  *(_BYTE *)(result + 361) = 7;
  return result;
}

uint64_t sub_100063F30(uint64_t result)
{
  *(_BYTE *)(result + 361) = 6;
  return result;
}

uint64_t sub_100063F3C(uint64_t result)
{
  *(_BYTE *)(result + 361) = 5;
  return result;
}

uint64_t sub_100063F48(uint64_t result)
{
  *(_BYTE *)(result + 361) = 3;
  return result;
}

uint64_t sub_100063F54(uint64_t result)
{
  *(_BYTE *)(result + 361) = 2;
  return result;
}

uint64_t sub_100063F60(uint64_t result)
{
  *(_BYTE *)(result + 361) = 1;
  return result;
}

uint64_t sub_100063F6C(uint64_t result)
{
  *(_BYTE *)(result + 361) = 0;
  return result;
}

void sub_100063F74(_BYTE *a1)
{
  bzero(a1, 0x820uLL);
  a1[2080] = 1;
}

uint64_t sub_100063FA0(uint64_t result)
{
  *(_BYTE *)(result + 2080) = 0;
  return result;
}

double sub_100063FA8(uint64_t a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0xFFFFFFFC0000;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 201) = 0u;
  return result;
}

void sub_100063FD8(_BYTE *a1)
{
  bzero(a1, 0x3E1uLL);
  a1[993] = 1;
}

uint64_t sub_100064004(uint64_t result)
{
  *(_BYTE *)(result + 993) = 0;
  return result;
}

void sub_10006400C(_QWORD *a1)
{
  *a1 = 0x200000000;
  bzero(a1 + 1, 0xF18uLL);
}

void sub_10006401C(_OWORD *a1)
{
  *a1 = xmmword_10033B1F0;
  bzero(a1 + 1, 0x630uLL);
}

double sub_100064030(uint64_t a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0x2000000000000;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  return result;
}

double sub_10006405C(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 256) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_BYTE *)(a1 + 264) = 1;
  return result;
}

uint64_t sub_100064090(uint64_t result)
{
  *(_BYTE *)(result + 264) = 0;
  return result;
}

double sub_100064098(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 176) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_BYTE *)(a1 + 184) = 1;
  return result;
}

uint64_t sub_1000640C4(uint64_t result)
{
  *(_BYTE *)(result + 184) = 0;
  return result;
}

double sub_1000640CC(uint64_t a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 444) = 0u;
  *(_BYTE *)(a1 + 460) = 1;
  return result;
}

uint64_t sub_10006411C(uint64_t result)
{
  *(_BYTE *)(result + 460) = 0;
  return result;
}

double sub_100064124(uint64_t a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 399) = 0;
  *(_BYTE *)(a1 + 403) = 1;
  return result;
}

uint64_t sub_100064170(uint64_t result)
{
  *(_BYTE *)(result + 403) = 0;
  return result;
}

uint64_t sub_100064178@<X0>(const char *a1@<X0>, size_t *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  uint64_t (*v8)(_BYTE *, _QWORD);
  char *v9;
  size_t v10;
  uint64_t result;
  _BYTE v12[32];

  v5 = v2[2];
  v6 = v2[3];
  v7 = v2[4];
  v8 = (uint64_t (*)(_BYTE *, _QWORD))swift_modifyAtWritableKeyPath(v12, v5, v6);
  v10 = strlcpy(v9, a1, v7);
  result = v8(v12, 0);
  *a2 = v10;
  return result;
}

uint64_t sub_1000641F0(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_100064208()
{
  _QWORD *v0;

  sub_100014430(v0 + 2);
  swift_release(v0[7]);
  swift_bridgeObjectRelease(v0[10]);
  return swift_deallocObject(v0, 88, 7);
}

uint64_t sub_10006423C()
{
  uint64_t v0;

  return sub_100044F24((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 56), *(_BYTE *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80));
}

uint64_t sub_100064250()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 56));

  if (*(_QWORD *)(v0 + 80))
    swift_release(*(_QWORD *)(v0 + 88));
  return swift_deallocObject(v0, 96, 7);
}

uint64_t sub_10006429C()
{
  uint64_t v0;

  return sub_10003E04C(*(void (**)(_BYTE *))(v0 + 80), *(_QWORD *)(v0 + 88));
}

_QWORD *sub_1000642C4(_QWORD *a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  id v6;

  v2 = a1[1];
  v3 = (void *)a1[5];
  v4 = a1[7];
  v5 = a1[8];
  swift_bridgeObjectRetain(a1[4]);
  v6 = v3;
  swift_bridgeObjectRetain(v2);
  sub_1000339E4(v4, v5);
  return a1;
}

uint64_t sub_100064320(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 56);
  v5 = *(_QWORD *)(a1 + 64);

  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  sub_100012318(v4, v5);
  return a1;
}

uint64_t sub_10006437C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v1 = type metadata accessor for Logger(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v2 + 64);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));

  if (*(_QWORD *)(v0 + 72))
    swift_release(*(_QWORD *)(v0 + 80));
  v5 = (v3 + 88) & ~v3;
  v6 = (v4 + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 23) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v5, v1);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v6 + 8));
  swift_release(*(_QWORD *)(v0 + v7));
  return swift_deallocObject(v0, v7 + 8, v3 | 7);
}

void sub_100064440()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(type metadata accessor for Logger(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 88) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_10004285C(v0 + 16, v0 + v2, *(_QWORD *)(v0 + v3), *(void **)(v0 + v3 + 8), *(_QWORD *)(v0 + ((v3 + 23) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_100064494()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000644C0()
{
  uint64_t v0;

  return sub_100041CE8(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_1000644C8(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v5;

  result = *a2;
  if (!*a2)
  {
    v5 = objc_opt_self(*a3);
    result = swift_getObjCClassMetadata(v5);
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_100064530@<X0>(const char *a1@<X0>, _DWORD *a2@<X8>)
{
  return sub_100047DEC(a1, a2);
}

uint64_t IDPool.init()(uint64_t a1, uint64_t a2)
{
  return Set.init()(a1, *(_QWORD *)(*(_QWORD *)(a2 + 8) + 16));
}

uint64_t IDPool.init(ignoring:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return Set.init()(a2, *(_QWORD *)(*(_QWORD *)(a3 + 8) + 16));
}

uint64_t IDPool.availableID()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t WitnessTable;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t result;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  void (*v41)(char *, char *, uint64_t);
  char *v42;
  char *v43;
  uint64_t v44;
  void (*v45)(char *, char *, uint64_t);
  char *v46;
  void (*v47)(char *, uint64_t);
  char *v48;
  char *v49;
  char *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  void (*v64)(char *, uint64_t);
  uint64_t v65;
  char *v66;
  uint64_t v67;
  char *v68;
  void (*v69)(char *, char *, uint64_t);
  char *v70;
  char *v71;
  char *v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  char *v79;
  void (*v80)(char *, char *, uint64_t);
  char *v81;
  char *v82;
  uint64_t v83;
  char *v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  char *i;
  uint64_t v90;
  char *v91;
  char *v92;
  char *v93;
  char *v94;
  uint64_t v95;
  char *v96;
  uint64_t TupleTypeMetadata2;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;

  v83 = a2;
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a1 + 24);
  v95 = *(_QWORD *)(v3 + 8);
  v4 = *(_QWORD *)(v95 + 32);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v4, v2, &protocol requirements base descriptor for Strideable, &associated type descriptor for Strideable.Stride);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v3, v2, AssociatedTypeWitness, &protocol requirements base descriptor for FixedWidthInteger, &associated conformance descriptor for FixedWidthInteger.Strideable.Stride: SignedInteger);
  v7 = type metadata accessor for ClosedRange<>.Index(0, v2, v4, AssociatedConformanceWitness);
  v98 = *(_QWORD *)(v7 - 8);
  v99 = v7;
  v8 = __chkstk_darwin(v7);
  v96 = (char *)&v80 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  v11 = (char *)&v80 - v10;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, v2, v2, "lower upper ", 0);
  v12 = __chkstk_darwin(TupleTypeMetadata2);
  v84 = (char *)&v80 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v12);
  v91 = (char *)&v80 - v15;
  v101 = *(_QWORD *)(v2 - 8);
  v16 = __chkstk_darwin(v14);
  v94 = (char *)&v80 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v16);
  v93 = (char *)&v80 - v19;
  v20 = __chkstk_darwin(v18);
  v92 = (char *)&v80 - v21;
  v22 = __chkstk_darwin(v20);
  v24 = (char *)&v80 - v23;
  __chkstk_darwin(v22);
  v26 = (char *)&v80 - v25;
  v27 = *(_QWORD *)(v4 + 8);
  v28 = type metadata accessor for ClosedRange(0, v2, v27);
  v90 = *(_QWORD *)(v28 - 8);
  v29 = __chkstk_darwin(v28);
  v85 = (char *)&v80 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v29);
  i = (char *)&v80 - v31;
  v100 = v4;
  v107 = v4;
  v108 = AssociatedConformanceWitness;
  v104 = AssociatedConformanceWitness;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <> ClosedRange<A>, v28);
  v105 = v28;
  v88 = type metadata accessor for IndexingIterator(0, v28, WitnessTable);
  v87 = *(_QWORD *)(v88 - 8);
  v33 = __chkstk_darwin(v88);
  v86 = (char *)&v80 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v33);
  v106 = (char *)&v80 - v35;
  dispatch thunk of static FixedWidthInteger.min.getter(v2, v3);
  dispatch thunk of static FixedWidthInteger.max.getter(v2, v3);
  result = dispatch thunk of static Comparable.<= infix(_:_:)(v26, v24, v2, v27);
  if ((result & 1) == 0)
  {
    __break(1u);
LABEL_15:
    __break(1u);
    return result;
  }
  v37 = TupleTypeMetadata2;
  v38 = v91;
  v39 = &v91[*(int *)(TupleTypeMetadata2 + 48)];
  v40 = v101;
  v41 = *(void (**)(char *, char *, uint64_t))(v101 + 32);
  v81 = v26;
  v41(v91, v26, v2);
  v82 = v24;
  v41(v39, v24, v2);
  v42 = v84;
  v43 = &v84[*(int *)(v37 + 48)];
  v44 = v105;
  v45 = *(void (**)(char *, char *, uint64_t))(v40 + 16);
  v45(v84, v38, v2);
  v80 = v45;
  v45(v43, v39, v2);
  v46 = v85;
  v41(v85, v42, v2);
  v47 = *(void (**)(char *, uint64_t))(v40 + 8);
  v47(v43, v2);
  v48 = &v42[*(int *)(TupleTypeMetadata2 + 48)];
  v41(v42, v38, v2);
  v41(v48, v39, v2);
  v49 = &v46[*(int *)(v44 + 36)];
  TupleTypeMetadata2 = (uint64_t)v41;
  v41(v49, v48, v2);
  v91 = (char *)v47;
  v47(v42, v2);
  v50 = i;
  v51 = v90;
  (*(void (**)(char *, char *, uint64_t))(v90 + 32))(i, v46, v44);
  v52 = v86;
  (*(void (**)(char *, char *, uint64_t))(v51 + 16))(v86, v50, v44);
  v53 = v104;
  ClosedRange<>.startIndex.getter(v44, v100, v104);
  (*(void (**)(char *, uint64_t))(v51 + 8))(v50, v44);
  v54 = v88;
  v55 = &v52[*(int *)(v88 + 36)];
  v56 = v98;
  v90 = *(_QWORD *)(v98 + 32);
  ((void (*)(char *, char *, uint64_t))v90)(v55, v11, v99);
  v57 = v106;
  (*(void (**)(char *, char *, uint64_t))(v87 + 32))(v106, v52, v54);
  v58 = &v57[*(int *)(v54 + 36)];
  v59 = v44;
  v60 = v53;
  v103 = v11;
  for (i = v58; ; v58 = i)
  {
    v62 = v100;
    ClosedRange<>.endIndex.getter(v59, v100, v60);
    v63 = static ClosedRange<>.Index.== infix(_:_:)(v58, v11, v2, v62, v60);
    v64 = *(void (**)(char *, uint64_t))(v56 + 8);
    v65 = v99;
    v64(v11, v99);
    if ((v63 & 1) != 0)
    {
      (*(void (**)(char *, uint64_t))(v87 + 8))(v106, v88);
      v75 = 1;
      v76 = v83;
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v101 + 56))(v76, v75, 1, v2);
    }
    v66 = v96;
    (*(void (**)(char *, char *, uint64_t))(v56 + 16))(v96, v58, v65);
    result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v101 + 48))(v66, 1, v2);
    if ((_DWORD)result == 1)
      goto LABEL_15;
    v67 = v65;
    v68 = v93;
    v69 = (void (*)(char *, char *, uint64_t))TupleTypeMetadata2;
    ((void (*)(char *, char *, uint64_t))TupleTypeMetadata2)(v93, v66, v2);
    v70 = v92;
    v69(v92, v68, v2);
    v71 = v103;
    ClosedRange<>.index(after:)(v58, v105, v62, v104);
    v64(v58, v67);
    ((void (*)(char *, char *, uint64_t))v90)(v58, v71, v67);
    v72 = v94;
    v69(v94, v70, v2);
    v73 = v102[1];
    if (!v73)
      break;
    swift_bridgeObjectRetain(v102[1]);
    v61 = *(_QWORD *)(v95 + 16);
    v74 = Set.contains(_:)(v72, v73, v2, v61);
    swift_bridgeObjectRelease(v73);
    v56 = v98;
    if ((v74 & 1) == 0)
      goto LABEL_4;
LABEL_5:
    ((void (*)(char *, uint64_t))v91)(v72, v2);
    v11 = v103;
    v60 = v104;
    v59 = v105;
  }
  v61 = *(_QWORD *)(v95 + 16);
  v56 = v98;
LABEL_4:
  if ((Set.contains(_:)(v72, *v102, v2, v61) & 1) != 0)
    goto LABEL_5;
  v77 = v82;
  v80(v82, v72, v2);
  v78 = type metadata accessor for Set(0, v2, v61);
  v79 = v81;
  Set.insert(_:)(v81, v77, v78);
  ((void (*)(char *, uint64_t))v91)(v79, v2);
  (*(void (**)(char *, uint64_t))(v87 + 8))(v106, v88);
  v76 = v83;
  ((void (*)(uint64_t, char *, uint64_t))TupleTypeMetadata2)(v83, v72, v2);
  v75 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v101 + 56))(v76, v75, 1, v2);
}

uint64_t IDPool.giveBack(id:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;

  v4 = *(_QWORD *)(a2 + 16);
  v5 = type metadata accessor for Optional(0, v4);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v11 - v7;
  v9 = type metadata accessor for Set(0, v4, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a2 + 24) + 8) + 16));
  Set.remove(_:)(a1, v9);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t IDPool.description.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  char *v27;
  uint64_t v28;
  char *v29;
  void (*v30)(char *, char *, uint64_t);
  char *v31;
  void (*v32)(char *, char *, uint64_t);
  void (*v33)(char *, uint64_t);
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t WitnessTable;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  Swift::String v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t TupleTypeMetadata2;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;

  v61 = a1;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(0, a3, a3, "lower upper ", 0);
  v7 = __chkstk_darwin(TupleTypeMetadata2);
  v55 = (char *)&v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v52 - v10;
  v12 = *(_QWORD **)(a3 - 8);
  v13 = __chkstk_darwin(v9);
  v15 = (char *)&v52 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  v17 = (char *)&v52 - v16;
  v62 = a4;
  v18 = *(_QWORD *)(a4 + 8);
  v58 = *(_QWORD *)(v18 + 32);
  v19 = *(_QWORD *)(v58 + 8);
  v20 = type metadata accessor for ClosedRange(0, a3, v19);
  v59 = *(_QWORD *)(v20 - 8);
  v21 = __chkstk_darwin(v20);
  v23 = (char *)&v52 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  v57 = (char *)&v52 - v24;
  v60 = v18;
  if (a2)
    v54 = Set.count.getter(a2, a3, *(_QWORD *)(v18 + 16));
  else
    v54 = 0;
  v25 = v62;
  dispatch thunk of static FixedWidthInteger.min.getter(a3, v62);
  dispatch thunk of static FixedWidthInteger.max.getter(a3, v25);
  result = dispatch thunk of static Comparable.<= infix(_:_:)(v17, v15, a3, v19);
  if ((result & 1) == 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  v53 = v20;
  v27 = v55;
  v28 = TupleTypeMetadata2;
  v29 = &v11[*(int *)(TupleTypeMetadata2 + 48)];
  v30 = (void (*)(char *, char *, uint64_t))v12[4];
  v30(v11, v17, a3);
  v30(v29, v15, a3);
  v31 = &v27[*(int *)(v28 + 48)];
  v32 = (void (*)(char *, char *, uint64_t))v12[2];
  v32(v27, v11, a3);
  v32(v31, v29, a3);
  v30(v23, v27, a3);
  v33 = (void (*)(char *, uint64_t))v12[1];
  v33(v31, a3);
  v34 = &v27[*(int *)(v28 + 48)];
  v30(v27, v11, a3);
  v30(v34, v29, a3);
  v35 = v53;
  v30(&v23[*(int *)(v53 + 36)], v34, a3);
  v33(v27, a3);
  v36 = v59;
  v37 = v57;
  v38 = v23;
  v39 = v35;
  (*(void (**)(char *, char *, uint64_t))(v59 + 32))(v57, v38, v35);
  v40 = v58;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(255, v58, a3, &protocol requirements base descriptor for Strideable, &associated type descriptor for Strideable.Stride);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(v62, a3, AssociatedTypeWitness, &protocol requirements base descriptor for FixedWidthInteger, &associated conformance descriptor for FixedWidthInteger.Strideable.Stride: SignedInteger);
  v66 = v40;
  v67 = AssociatedConformanceWitness;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <> ClosedRange<A>, v39);
  v44 = Collection.count.getter(v39, WitnessTable);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v37, v39);
  result = Set.count.getter(v61, a3, *(_QWORD *)(v60 + 16));
  v45 = v44 - result;
  if (__OFSUB__(v44, result))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v46 = v45 - v54;
  if (!__OFSUB__(v45, v54))
  {
    v64 = 0;
    v65 = 0xE000000000000000;
    _StringGuts.grow(_:)(16);
    v47 = v65;
    v63 = v46;
    v48 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    v50 = v49;
    swift_bridgeObjectRelease(v47);
    v64 = v48;
    v65 = v50;
    v51._countAndFlagsBits = 0x62616C6961766120;
    v51._object = (void *)0xEE0073444920656CLL;
    String.append(_:)(v51);
    return v64;
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t IDPool.customMirror.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  Swift::String v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v25[2];
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[2];

  v25[0] = a5;
  v9 = type metadata accessor for Mirror.AncestorRepresentation(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin();
  v12 = (char *)v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012C44((uint64_t *)&unk_1004085C0);
  __chkstk_darwin();
  v14 = (char *)v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28[0] = a1;
  v28[1] = a2;
  v15 = sub_100012C44(qword_100405C70);
  v16 = swift_allocObject(v15, 80, 7);
  *(_OWORD *)(v16 + 16) = xmmword_10033A110;
  *(_QWORD *)(v16 + 32) = 1684370293;
  *(_QWORD *)(v16 + 40) = 0xE400000000000000;
  v17 = *(_QWORD *)(*(_QWORD *)(a4 + 8) + 16);
  swift_bridgeObjectRetain(a1);
  swift_bridgeObjectRetain(a2);
  if (Set.count.getter(a1, a3, v17) <= 10)
  {
    v20 = (void *)type metadata accessor for Set(0, a3, v17);
    swift_bridgeObjectRetain(a1);
  }
  else
  {
    v25[1] = Set.count.getter(a1, a3, v17);
    v26 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    v27 = v18;
    v19._countAndFlagsBits = 0x657375206E6920;
    v19._object = (void *)0xE700000000000000;
    String.append(_:)(v19);
    a1 = v26;
    *(_QWORD *)(v16 + 56) = v27;
    v20 = &type metadata for String;
  }
  *(_QWORD *)(v16 + 72) = v20;
  *(_QWORD *)(v16 + 48) = a1;
  v21 = type metadata accessor for Mirror.DisplayStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v14, 1, 1, v21);
  v23 = type metadata accessor for IDPool(0, a3, a4, v22);
  (*(void (**)(char *, _QWORD, uint64_t))(v10 + 104))(v12, enum case for Mirror.AncestorRepresentation.generated(_:), v9);
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)(v28, v16, v14, v12, v23);
}

uint64_t sub_100065590(uint64_t a1)
{
  uint64_t *v1;

  return IDPool.description.getter(*v1, v1[1], *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
}

uint64_t sub_1000655A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return IDPool.customMirror.getter(*v2, v2[1], *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
}

uint64_t type metadata accessor for IDPool(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100033C60(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for IDPool);
}

uint64_t sub_1000655C0(_QWORD *a1)
{
  swift_bridgeObjectRelease(*a1);
  return swift_bridgeObjectRelease(a1[1]);
}

uint64_t *sub_1000655E8(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t *sub_10006561C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = a1[1];
  v7 = a2[1];
  a1[1] = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v6);
  return a1;
}

_QWORD *sub_100065678(_QWORD *a1, _OWORD *a2)
{
  uint64_t v4;

  swift_bridgeObjectRelease(*a1);
  v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for AWDLStatistics.ServiceRejection(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AWDLStatistics.ServiceRejection(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t LongTermPairingKeyStore.__allocating_init(keychain:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
  v4 = *(_QWORD *)v3;
  Logger.init(subsystem:category:)(0x6C7070612E6D6F63, 0xED00006E616E2E65, 0xD000000000000011, 0x8000000100361270);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v4 + 80) - 8) + 32))(v3 + *(_QWORD *)(*(_QWORD *)v3 + 104), a1);
  return v3;
}

uint64_t *LongTermPairingKeyStore.init(keychain:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  Logger.init(subsystem:category:)(0x6C7070612E6D6F63, 0xED00006E616E2E65, 0xD000000000000011, 0x8000000100361270);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(v3 + 80) - 8) + 32))((uint64_t)v1 + *(_QWORD *)(*v1 + 104), a1);
  return v1;
}

uint64_t sub_100065874(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  char v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  Swift::String v13;
  Swift::String v14;
  const char *v15;
  Swift::String v16;
  Swift::String v17;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;

  v6 = sub_100130DE0(v3 + *(_QWORD *)(*(_QWORD *)v3 + 104), a2, (uint64_t)a3, *(_QWORD *)(*(_QWORD *)v3 + 80), *(_QWORD *)(*(_QWORD *)v3 + 88));
  v7 = swift_bridgeObjectRetain_n(a3, 2);
  v8 = Logger.logObject.getter(v7);
  v9 = v8;
  if ((v6 & 1) == 0)
  {
    v10 = static os_log_type_t.error.getter(v8);
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc(12, -1);
      v12 = swift_slowAlloc(32, -1);
      *(_DWORD *)v11 = 136315138;
      v20 = 0xE100000000000000;
      v21 = v12;
      swift_bridgeObjectRetain(a3);
      v16._countAndFlagsBits = a2;
      v16._object = a3;
      String.append(_:)(v16);
      v17._countAndFlagsBits = 39;
      v17._object = (void *)0xE100000000000000;
      String.append(_:)(v17);
      swift_bridgeObjectRelease(a3);
      v19 = sub_100013CC8(39, 0xE100000000000000, &v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20);
      swift_bridgeObjectRelease_n(a3, 2);
      swift_bridgeObjectRelease(0xE100000000000000);
      v15 = "Failed to install new pairing keys for %s";
      goto LABEL_6;
    }
LABEL_7:
    swift_bridgeObjectRelease_n(a3, 2);
    goto LABEL_8;
  }
  v10 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v9, v10))
    goto LABEL_7;
  v11 = (uint8_t *)swift_slowAlloc(12, -1);
  v12 = swift_slowAlloc(32, -1);
  *(_DWORD *)v11 = 136315138;
  v20 = 0xE100000000000000;
  v21 = v12;
  swift_bridgeObjectRetain(a3);
  v13._countAndFlagsBits = a2;
  v13._object = a3;
  String.append(_:)(v13);
  v14._countAndFlagsBits = 39;
  v14._object = (void *)0xE100000000000000;
  String.append(_:)(v14);
  swift_bridgeObjectRelease(a3);
  v19 = sub_100013CC8(39, 0xE100000000000000, &v21);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20);
  swift_bridgeObjectRelease_n(a3, 2);
  swift_bridgeObjectRelease(0xE100000000000000);
  v15 = "Installed new pairing keys for %s";
LABEL_6:
  _os_log_impl((void *)&_mh_execute_header, v9, v10, v15, v11, 0xCu);
  swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v12, -1, -1);
  swift_slowDealloc(v11, -1, -1);
LABEL_8:

  return v6 & 1;
}

Swift::Void __swiftcall LongTermPairingKeyStore.installNewKeysToKeychainIfNecessary(for:)(CoreP2P::NANServiceName a1)
{
  uint64_t *object;
  void (*countAndFlagsBits)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  char *v4;
  uint64_t v5;

  object = (uint64_t *)a1.string._object;
  countAndFlagsBits = (void (*)(uint64_t, uint64_t, uint64_t))a1.string._countAndFlagsBits;
  sub_100012C44(&qword_10040D210);
  __chkstk_darwin();
  v4 = (char *)&v5 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  LongTermPairingKeyStore.keys(for:installingNewKeysIfNecessary:)(countAndFlagsBits, object, 1, (uint64_t)v4);
  sub_10006639C((uint64_t)v4);
}

uint64_t LongTermPairingKeyStore.keys(for:installingNewKeysIfNecessary:)@<X0>(void (*a1)(uint64_t, uint64_t, uint64_t)@<X0>, uint64_t *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  void (*v26)(uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t (*v39)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v40;
  _QWORD v41[2];
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  char *v50;
  _QWORD *v51;
  int v52;
  void (*v53)(uint64_t, uint64_t, uint64_t);
  _OWORD v54[2];
  uint64_t v55;

  v5 = v4;
  v52 = a3;
  v53 = a1;
  v8 = (_QWORD *)*v4;
  v45 = type metadata accessor for SymmetricKeySize(0);
  v43 = *(_QWORD *)(v45 - 8);
  __chkstk_darwin();
  v47 = (char *)v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = type metadata accessor for UUID(0);
  v44 = *(_QWORD *)(v46 - 8);
  __chkstk_darwin();
  v42 = (char *)v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41[1] = type metadata accessor for LongTermPairingKeys.PrivateIdentity(0);
  __chkstk_darwin();
  v50 = (char *)v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for LongTermPairingKeys(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin();
  v48 = (char *)v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v49 = (uint64_t)v41 - v15;
  v16 = v8[10];
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin();
  v19 = (char *)v41 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012C44(&qword_10040D210);
  __chkstk_darwin();
  v21 = (char *)v41 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = v8[13];
  v51 = v5;
  (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v19, (char *)v5 + v22, v16);
  v23 = v8[11];
  swift_bridgeObjectRetain(a2);
  v24 = (uint64_t)v19;
  v25 = a2;
  v26 = v53;
  sub_100131044(v24, v53, v25, v16, v23, (uint64_t)v21);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v21, 1, v12) == 1)
  {
    v27 = sub_10006639C((uint64_t)v21);
    if ((v52 & 1) != 0)
    {
      v28 = v42;
      UUID.init()(v27);
      v29 = a4;
      if (qword_1004040D0 != -1)
        swift_once(&qword_1004040D0, sub_100131CB8);
      v30 = v45;
      v31 = sub_100014C44(v45, (uint64_t)qword_1004087B8);
      v32 = v47;
      (*(void (**)(char *, uint64_t, uint64_t))(v43 + 16))(v47, v31, v30);
      type metadata accessor for LongTermPairingKeys.Identity(0);
      v33 = (uint64_t)v50;
      SymmetricKey.init(size:)(v32);
      (*(void (**)(uint64_t, char *, uint64_t))(v44 + 32))(v33, v28, v46);
      P256.Signing.PrivateKey.init(compactRepresentable:)(1);
      v34 = (uint64_t)v48;
      Logger.init(subsystem:category:)(0x6C7070612E6D6F63, 0xED00006E616E2E65, 0xD000000000000011, 0x8000000100361270);
      sub_1000663DC(v33, v34 + *(int *)(v12 + 20));
      v35 = type metadata accessor for LongTermPairingKeys.PairedDevices();
      memset(v54, 0, sizeof(v54));
      v55 = 0;
      swift_allocObject(v35, 112, 7);
      v36 = sub_100135E58(0, 0, (uint64_t)v54);
      sub_100063824(v33, type metadata accessor for LongTermPairingKeys.PrivateIdentity);
      *(_QWORD *)(v34 + *(int *)(v12 + 24)) = v36;
      v37 = v49;
      sub_100066420(v34, v49);
      LOBYTE(v36) = sub_100065874(v37, (uint64_t)v26, v25);
      sub_100063824(v37, type metadata accessor for LongTermPairingKeys);
      if ((v36 & 1) != 0)
        return LongTermPairingKeyStore.keys(for:installingNewKeysIfNecessary:)(v26, v25, 0);
      v39 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56);
      v40 = v29;
    }
    else
    {
      v39 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56);
      v40 = a4;
    }
    return v39(v40, 1, 1, v12);
  }
  else
  {
    sub_100066420((uint64_t)v21, a4);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v13 + 56))(a4, 0, 1, v12);
  }
}

uint64_t LongTermPairingKeyStore.customMirror.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v12;
  _QWORD *v13;

  v1 = *v0;
  type metadata accessor for Mirror.AncestorRepresentation(0);
  __chkstk_darwin();
  v3 = (char *)&v12 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012C44((uint64_t *)&unk_1004085C0);
  __chkstk_darwin();
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = v0;
  v12 = _swiftEmptyArrayStorage;
  v6 = type metadata accessor for Mirror.DisplayStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
  v8 = type metadata accessor for LongTermPairingKeyStore(0, *(_QWORD *)(v1 + 80), *(_QWORD *)(v1 + 88), v7);
  v9 = sub_100012C44(&qword_100405B90);
  v10 = sub_100066494((unint64_t *)&qword_10040C3E0, &qword_100405B90);
  sub_1000F2538((uint64_t)v3);
  swift_retain();
  return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)(&v13, &v12, v5, v3, v8, v9, v10);
}

uint64_t *LongTermPairingKeyStore.deinit()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *v0;
  v2 = (uint64_t)v0 + qword_100410358;
  v3 = type metadata accessor for Logger(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
  (*(void (**)(uint64_t))(*(_QWORD *)(*(_QWORD *)(v1 + 80) - 8) + 8))((uint64_t)v0 + *(_QWORD *)(*v0 + 104));
  return v0;
}

uint64_t LongTermPairingKeyStore.__deallocating_deinit()
{
  uint64_t v0;

  LongTermPairingKeyStore.deinit();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1000661C8()
{
  return LongTermPairingKeyStore.customMirror.getter();
}

BOOL LongTermPairingKeys.AuthenticationType.init(apiAuthenticationType:)(uint64_t a1)
{
  return a1 != 1;
}

BOOL LongTermPairingKeys.AuthenticationType.init(rawValue:)(Swift::String string)
{
  void *object;
  Swift::String v2;
  Swift::Int v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1003D6C00, v2);
  swift_bridgeObjectRelease(object);
  return v3 != 0;
}

_UNKNOWN **static LongTermPairingKeys.AuthenticationType.allCases.getter()
{
  return &off_1003D6C38;
}

uint64_t LongTermPairingKeys.AuthenticationType.rawValue.getter()
{
  return 0x6E6961686379656BLL;
}

uint64_t sub_10006625C@<X0>(uint64_t *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::String v3;
  void *v4;
  Swift::Int v5;
  uint64_t result;

  v3._countAndFlagsBits = *a1;
  v4 = (void *)a1[1];
  v3._object = v4;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1003D6280, v3);
  result = swift_bridgeObjectRelease(v4);
  *a2 = v5 != 0;
  return result;
}

void sub_1000662AC(_QWORD *a1@<X8>)
{
  *a1 = 0x6E6961686379656BLL;
  a1[1] = 0xE800000000000000;
}

void sub_1000662C8(_QWORD *a1@<X8>)
{
  *a1 = &off_1003D6C60;
}

Swift::Int sub_1000662D8()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  String.hash(into:)(v1, 0x6E6961686379656BLL, 0xE800000000000000);
  return Hasher._finalize()();
}

uint64_t sub_100066328(uint64_t a1)
{
  return String.hash(into:)(a1, 0x6E6961686379656BLL, 0xE800000000000000);
}

Swift::Int sub_100066340()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  String.hash(into:)(v1, 0x6E6961686379656BLL, 0xE800000000000000);
  return Hasher._finalize()();
}

uint64_t Optional<A>.attributeFilter.getter(char a1)
{
  if ((a1 & 1) != 0)
    return 3;
  else
    return 2;
}

uint64_t sub_10006639C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100012C44(&qword_10040D210);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000663DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for LongTermPairingKeys.PrivateIdentity(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100066420(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for LongTermPairingKeys(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for LongTermPairingKeyStore(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100033C60(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for LongTermPairingKeyStore);
}

uint64_t sub_100066470()
{
  return sub_100066494(&qword_100405CF8, &qword_100405D00);
}

uint64_t sub_100066494(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_100013C64(a2);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for [A], v4);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1000664D8()
{
  unint64_t result;

  result = qword_100405D08[0];
  if (!qword_100405D08[0])
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for LongTermPairingKeys.AuthenticationType, &type metadata for LongTermPairingKeys.AuthenticationType);
    atomic_store(result, qword_100405D08);
  }
  return result;
}

uint64_t sub_100066520(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[2];

  result = type metadata accessor for Logger(319);
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 80));
    if (v4 <= 0x3F)
    {
      v5[1] = *(_QWORD *)(result - 8) + 64;
      result = swift_initClassMetadata2(a1, 0, 2, v5, a1 + 96);
      if (!result)
        return 0;
    }
  }
  return result;
}

uint64_t _s18AuthenticationTypeOwst(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1000665EC + 4 * byte_10033B2A0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_10006660C + 4 * byte_10033B2A5[v4]))();
}

_BYTE *sub_1000665EC(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_10006660C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100066614(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10006661C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100066624(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10006662C(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for LongTermPairingKeys.AuthenticationType()
{
  return &type metadata for LongTermPairingKeys.AuthenticationType;
}

uint64_t Lock.__allocating_init()()
{
  uint64_t v0;
  uint64_t v1;
  _DWORD *v2;

  v1 = swift_allocObject(v0, 24, 7);
  v2 = (_DWORD *)swift_slowAlloc(4, -1);
  *(_QWORD *)(v1 + 16) = v2;
  *v2 = 0;
  return v1;
}

Swift::Void __swiftcall Lock.lock()()
{
  uint64_t v0;

  os_unfair_lock_lock(*(os_unfair_lock_t *)(v0 + 16));
}

Swift::Void __swiftcall Lock.unlock()()
{
  uint64_t v0;

  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v0 + 16));
}

uint64_t Lock.init()()
{
  uint64_t v0;
  _DWORD *v1;

  v1 = (_DWORD *)swift_slowAlloc(4, -1);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = 0;
  return v0;
}

uint64_t Lock.deinit()
{
  uint64_t v0;

  swift_slowDealloc(*(_QWORD *)(v0 + 16), -1, -1);
  return v0;
}

uint64_t Lock.__deallocating_deinit()
{
  uint64_t v0;

  swift_slowDealloc(*(_QWORD *)(v0 + 16), -1, -1);
  return swift_deallocClassInstance(v0, 24, 7);
}

Swift::Bool __swiftcall Lock.tryLock()()
{
  uint64_t v0;

  return os_unfair_lock_trylock(*(os_unfair_lock_t *)(v0 + 16));
}

uint64_t type metadata accessor for Lock()
{
  return objc_opt_self(_TtC7CoreP2P4Lock);
}

BOOL sub_100066750(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_100066764@<X0>(unsigned __int8 *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = _s7CoreP2P13NANReasonCodeO8rawValueACSgs5UInt8V_tcfC_0(*a1);
  *a2 = result;
  return result;
}

Swift::Int sub_10006678C()
{
  Swift::UInt8 *v0;
  Swift::UInt8 v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_1000667D0()
{
  Swift::UInt8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int sub_1000667F8()
{
  Swift::UInt8 *v0;
  Swift::UInt8 v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t sub_100066838(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100066C44();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_100066894(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100066C44();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t NANReasonCode.description.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100066914 + 4 * aY_6[a1]))(0x6465767265736572, 0xE800000000000000);
}

uint64_t sub_100066914()
{
  return 0x6669636570736E75;
}

unint64_t sub_100066934()
{
  return 0xD000000000000013;
}

uint64_t sub_100066A7C()
{
  unsigned __int8 *v0;

  return NANReasonCode.description.getter(*v0);
}

uint64_t _s7CoreP2P13NANReasonCodeO8rawValueACSgs5UInt8V_tcfC_0(uint64_t result)
{
  if (result >= 0xEu)
    return 14;
  else
    return result;
}

unint64_t sub_100066A9C()
{
  unint64_t result;

  result = qword_100405E30;
  if (!qword_100405E30)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for NANReasonCode, &type metadata for NANReasonCode);
    atomic_store(result, (unint64_t *)&qword_100405E30);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for NANReasonCode(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF3)
    goto LABEL_17;
  if (a2 + 13 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 13) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 13;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 13;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 13;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xE;
  v8 = v6 - 14;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for NANReasonCode(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 13 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 13) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF3)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF2)
    return ((uint64_t (*)(void))((char *)&loc_100066BBC + 4 * byte_10033B42B[v4]))();
  *a1 = a2 + 13;
  return ((uint64_t (*)(void))((char *)sub_100066BF0 + 4 * byte_10033B426[v4]))();
}

uint64_t sub_100066BF0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100066BF8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100066C00);
  return result;
}

uint64_t sub_100066C0C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100066C14);
  *(_BYTE *)result = a2 + 13;
  return result;
}

uint64_t sub_100066C18(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100066C20(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_100066C2C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for NANReasonCode()
{
  return &type metadata for NANReasonCode;
}

unint64_t sub_100066C44()
{
  unint64_t result;

  result = qword_100405E38;
  if (!qword_100405E38)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for NANReasonCode, &type metadata for NANReasonCode);
    atomic_store(result, (unint64_t *)&qword_100405E38);
  }
  return result;
}

void *NANPMK.length.unsafeMutableAddressor()
{
  return &static NANPMK.length;
}

uint64_t static NANBitmap.Band.ghz_60.getter()
{
  return 32;
}

uint64_t NANPMK.init(pmk:)(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    __asm { BR              X10 }
  return 0;
}

uint64_t NANPMK.init(from:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[3];
  uint64_t v10;
  uint64_t v11;

  v3 = a1[3];
  v4 = a1[4];
  v5 = (uint64_t)sub_10003259C(a1, v3);
  dispatch thunk of Decoder.unkeyedContainer()(v9, v3, v4);
  if (!v1)
  {
    v6 = v10;
    v7 = v11;
    sub_100034C68((uint64_t)v9, v10);
    v5 = UnkeyedDecodingContainer.decodeData(with:)(32, v6, v7);
    sub_100014430(v9);
  }
  sub_100014430(a1);
  return v5;
}

uint64_t static NANPMK.zero.getter()
{
  uint64_t v0;

  v0 = type metadata accessor for __DataStorage(0);
  swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  __DataStorage.init(length:)(32);
  return 0x2000000000;
}

void sub_100066E3C()
{
  Hasher._combine(_:)(0);
}

uint64_t sub_100066E64()
{
  return 1635017060;
}

void sub_100066E78(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_100066E84(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10006852C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100066EAC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10006852C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NANPMK.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_100068260(a1, a2, a3, &qword_100405E50, (uint64_t (*)(void))sub_10006852C, (uint64_t)&type metadata for NANPMK.CodingKeys);
}

uint64_t sub_100066F10@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  _QWORD v13[3];
  uint64_t v14;
  uint64_t v15;

  v5 = a1[3];
  v6 = a1[4];
  sub_10003259C(a1, v5);
  dispatch thunk of Decoder.unkeyedContainer()(v13, v5, v6);
  if (v2)
    return sub_100014430(a1);
  v7 = v14;
  v8 = v15;
  sub_100034C68((uint64_t)v13, v14);
  v9 = UnkeyedDecodingContainer.decodeData(with:)(32, v7, v8);
  v11 = v10;
  sub_100014430(v13);
  result = sub_100014430(a1);
  *a2 = v9;
  a2[1] = v11;
  return result;
}

uint64_t sub_100066FE0(_QWORD *a1)
{
  uint64_t *v1;

  return NANPMK.encode(to:)(a1, *v1, v1[1]);
}

uint64_t sub_100066FF8()
{
  uint64_t result;
  uint64_t v1;

  result = sub_1000FAE78(0x204B4D50204E414ELL, 0xEC000000656D614ELL);
  qword_100405E40 = result;
  *(_QWORD *)algn_100405E48 = v1;
  return result;
}

uint64_t NANPMK.pmkid(for:initiatorAddress:responderAddress:serviceName:)(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  int v7;
  unint64_t v8;
  unint64_t v9;

  v7 = 1 << a1;
  v8 = a2 & 0xFFFFFFFFFFFFLL;
  v9 = a3 & 0xFFFFFFFFFFFFLL;
  if ((v7 & 0x55) != 0)
    return sub_10006706C(v8, v9, a4, a5, a6, a7);
  else
    return sub_100067588(v8, v9, a4, a5, a6, a7);
}

uint64_t sub_10006706C(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  Swift::String v31;
  _QWORD *v32;
  __n128 v33;
  char *v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v44;
  unint64_t v45;
  __int128 v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD v68[3];
  __int128 v69;
  __int128 v70;

  v63 = a5;
  v64 = a6;
  v54 = a4;
  v52 = a3;
  v8 = type metadata accessor for SymmetricKey(0);
  v66 = *(_QWORD *)(v8 - 8);
  v67 = v8;
  __chkstk_darwin();
  v65 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for SHA256Digest(0);
  v57 = *(_QWORD *)(v10 - 8);
  v58 = v10;
  __chkstk_darwin();
  v56 = (char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = type metadata accessor for SHA256(0);
  v55 = *(_QWORD *)(v59 - 8);
  __chkstk_darwin();
  v53 = (char *)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100012C44(&qword_100405EB8);
  v61 = *(_QWORD *)(v13 - 8);
  v62 = v13;
  __chkstk_darwin();
  v60 = (char *)&v44 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100403EA0 != -1)
    swift_once(&qword_100403EA0, sub_100066FF8);
  v51 = a2 >> 40;
  v50 = HIDWORD(a2);
  v49 = a2 >> 24;
  v48 = a2 >> 16;
  v47 = a2 >> 8;
  v45 = a1 >> 40;
  v15 = qword_100405E40;
  v16 = *(_QWORD *)algn_100405E48;
  v17 = sub_100012C44(&qword_100403E88);
  v18 = swift_allocObject(v17, 38, 7);
  v46 = xmmword_10033B190;
  *(_OWORD *)(v18 + 16) = xmmword_10033B190;
  *(_WORD *)(v18 + 32) = a1;
  *(_BYTE *)(v18 + 34) = BYTE2(a1);
  *(_BYTE *)(v18 + 35) = BYTE3(a1);
  *(_BYTE *)(v18 + 36) = BYTE4(a1);
  *(_BYTE *)(v18 + 37) = v45;
  sub_100031FEC(v15, v16);
  v19 = sub_1001068EC(v18);
  v21 = v20;
  swift_bridgeObjectRelease(v18);
  *(_QWORD *)&v70 = v15;
  *((_QWORD *)&v70 + 1) = v16;
  sub_100031FEC(v15, v16);
  sub_1000FBDAC(v19, v21);
  sub_10000E614(v19, v21);
  sub_10000E614(v15, v16);
  v22 = v70;
  v23 = swift_allocObject(v17, 38, 7);
  *(_OWORD *)(v23 + 16) = v46;
  *(_BYTE *)(v23 + 32) = a2;
  *(_BYTE *)(v23 + 33) = v47;
  *(_BYTE *)(v23 + 34) = v48;
  *(_BYTE *)(v23 + 35) = v49;
  *(_BYTE *)(v23 + 36) = v50;
  *(_BYTE *)(v23 + 37) = v51;
  v24 = sub_1001068EC(v23);
  v26 = v25;
  swift_bridgeObjectRelease(v23);
  v69 = v22;
  sub_100031FEC(v22, *((unint64_t *)&v22 + 1));
  sub_1000FBDAC(v24, v26);
  sub_10000E614(v24, v26);
  sub_10000E614(v22, *((unint64_t *)&v22 + 1));
  v27 = v69;
  v28 = v54;
  v29 = swift_bridgeObjectRetain(v54);
  v30 = (uint64_t)v53;
  SHA256.init()(v29);
  v31 = String.lowercased()();
  swift_bridgeObjectRelease(v28);
  swift_bridgeObjectRetain(v31._object);
  sub_10017550C(v31._countAndFlagsBits, (uint64_t)v31._object, v30, v31._countAndFlagsBits, (uint64_t)v31._object, v32);
  v33 = swift_bridgeObjectRelease(v31._object);
  v34 = v56;
  SHA256.finalize()(v33);
  SHA256Digest.withUnsafeBytes<A>(_:)(&v70, sub_100175E14, 0, &type metadata for Data);
  (*(void (**)(char *, uint64_t))(v57 + 8))(v34, v58);
  v35 = v70;
  v36 = v30;
  v37 = v59;
  (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v36, v59);
  v70 = v27;
  sub_100031FEC(v27, *((unint64_t *)&v27 + 1));
  sub_1000FBDAC(v35, *((uint64_t *)&v35 + 1));
  sub_10000E614(v35, *((unint64_t *)&v35 + 1));
  sub_10000E614(v27, *((unint64_t *)&v27 + 1));
  v69 = v70;
  v68[0] = v63;
  v68[1] = v64;
  sub_100031FEC(v63, v64);
  v38 = v65;
  SymmetricKey.init<A>(data:)(v68, &type metadata for Data, &protocol witness table for Data);
  v39 = sub_100011DE4(&qword_100405EC0, (uint64_t (*)(uint64_t))&type metadata accessor for SHA256, (uint64_t)&protocol conformance descriptor for SHA256);
  v40 = sub_100068D00();
  v41 = v60;
  static HMAC.authenticationCode<A>(for:using:)(&v69, v38, v37, &type metadata for Data, v39, v40);
  (*(void (**)(char *, uint64_t))(v66 + 8))(v38, v67);
  sub_10000E614(v69, *((unint64_t *)&v69 + 1));
  v42 = v62;
  HashedAuthenticationCode.withUnsafeBytes<A>(_:)(&v70, sub_100067AB0, 0, v62, &type metadata for NANPMK.ID);
  (*(void (**)(char *, uint64_t))(v61 + 8))(v41, v42);
  return v70;
}

uint64_t sub_100067588(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  Swift::String v30;
  _QWORD *v31;
  __n128 v32;
  char *v33;
  __int128 v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v42;
  unint64_t v43;
  __int128 v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD v66[3];
  __int128 v67;
  __int128 v68;

  v60 = a5;
  v61 = a6;
  v52 = a4;
  v50 = a3;
  v8 = type metadata accessor for SymmetricKey(0);
  v64 = *(_QWORD *)(v8 - 8);
  v65 = v8;
  __chkstk_darwin();
  v63 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for SHA256Digest(0);
  v56 = *(_QWORD *)(v10 - 8);
  v57 = v10;
  __chkstk_darwin();
  v54 = (char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = type metadata accessor for SHA256(0);
  v53 = *(_QWORD *)(v55 - 8);
  __chkstk_darwin();
  v51 = (char *)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = sub_100012C44(&qword_100405ED0);
  v59 = *(_QWORD *)(v62 - 8);
  __chkstk_darwin();
  v58 = (char *)&v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100403EA0 != -1)
    swift_once(&qword_100403EA0, sub_100066FF8);
  v49 = a2 >> 40;
  v48 = HIDWORD(a2);
  v47 = a2 >> 24;
  v46 = a2 >> 16;
  v45 = a2 >> 8;
  v43 = a1 >> 40;
  v14 = qword_100405E40;
  v15 = *(_QWORD *)algn_100405E48;
  v16 = sub_100012C44(&qword_100403E88);
  v17 = swift_allocObject(v16, 38, 7);
  v44 = xmmword_10033B190;
  *(_OWORD *)(v17 + 16) = xmmword_10033B190;
  *(_WORD *)(v17 + 32) = a1;
  *(_BYTE *)(v17 + 34) = BYTE2(a1);
  *(_BYTE *)(v17 + 35) = BYTE3(a1);
  *(_BYTE *)(v17 + 36) = BYTE4(a1);
  *(_BYTE *)(v17 + 37) = v43;
  sub_100031FEC(v14, v15);
  v18 = sub_1001068EC(v17);
  v20 = v19;
  swift_bridgeObjectRelease(v17);
  *(_QWORD *)&v68 = v14;
  *((_QWORD *)&v68 + 1) = v15;
  sub_100031FEC(v14, v15);
  sub_1000FBDAC(v18, v20);
  sub_10000E614(v18, v20);
  sub_10000E614(v14, v15);
  v21 = v68;
  v22 = swift_allocObject(v16, 38, 7);
  *(_OWORD *)(v22 + 16) = v44;
  *(_BYTE *)(v22 + 32) = a2;
  *(_BYTE *)(v22 + 33) = v45;
  *(_BYTE *)(v22 + 34) = v46;
  *(_BYTE *)(v22 + 35) = v47;
  *(_BYTE *)(v22 + 36) = v48;
  *(_BYTE *)(v22 + 37) = v49;
  v23 = sub_1001068EC(v22);
  v25 = v24;
  swift_bridgeObjectRelease(v22);
  v67 = v21;
  sub_100031FEC(v21, *((unint64_t *)&v21 + 1));
  sub_1000FBDAC(v23, v25);
  sub_10000E614(v23, v25);
  sub_10000E614(v21, *((unint64_t *)&v21 + 1));
  v26 = v67;
  v27 = v52;
  v28 = swift_bridgeObjectRetain(v52);
  v29 = (uint64_t)v51;
  SHA256.init()(v28);
  v30 = String.lowercased()();
  swift_bridgeObjectRelease(v27);
  swift_bridgeObjectRetain(v30._object);
  sub_10017550C(v30._countAndFlagsBits, (uint64_t)v30._object, v29, v30._countAndFlagsBits, (uint64_t)v30._object, v31);
  v32 = swift_bridgeObjectRelease(v30._object);
  v33 = v54;
  SHA256.finalize()(v32);
  SHA256Digest.withUnsafeBytes<A>(_:)(&v68, sub_100175E14, 0, &type metadata for Data);
  (*(void (**)(char *, uint64_t))(v56 + 8))(v33, v57);
  v34 = v68;
  (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v29, v55);
  v68 = v26;
  sub_100031FEC(v26, *((unint64_t *)&v26 + 1));
  sub_1000FBDAC(v34, *((uint64_t *)&v34 + 1));
  sub_10000E614(v34, *((unint64_t *)&v34 + 1));
  sub_10000E614(v26, *((unint64_t *)&v26 + 1));
  v67 = v68;
  v66[0] = v60;
  v66[1] = v61;
  sub_100031FEC(v60, v61);
  v35 = v63;
  SymmetricKey.init<A>(data:)(v66, &type metadata for Data, &protocol witness table for Data);
  v36 = type metadata accessor for SHA384(0);
  v37 = sub_100011DE4(&qword_100405ED8, (uint64_t (*)(uint64_t))&type metadata accessor for SHA384, (uint64_t)&protocol conformance descriptor for SHA384);
  v38 = sub_100068D00();
  v39 = v58;
  static HMAC.authenticationCode<A>(for:using:)(&v67, v35, v36, &type metadata for Data, v37, v38);
  (*(void (**)(char *, uint64_t))(v64 + 8))(v35, v65);
  sub_10000E614(v67, *((unint64_t *)&v67 + 1));
  v40 = v62;
  HashedAuthenticationCode.withUnsafeBytes<A>(_:)(&v68, sub_100067AB0, 0, v62, &type metadata for NANPMK.ID);
  (*(void (**)(char *, uint64_t))(v59 + 8))(v39, v40);
  return v68;
}

void sub_100067AB0(_BYTE *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  if (a1)
  {
    v3 = sub_10021BD08(a1, 16);
    _s7CoreP2P6NANPMKV2IDVyAESg10Foundation4DataVcfC_0(v3, v4);
    if (v6 >> 60 != 15)
    {
      *a2 = v5;
      a2[1] = v6;
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

void *NANPMK.ID.length.unsafeMutableAddressor()
{
  return &static NANPMK.ID.length;
}

void NANPMK.description.getter(uint64_t a1, uint64_t a2)
{
  type metadata accessor for Data.Iterator(0);
  __chkstk_darwin();
  __asm { BR              X10 }
}

uint64_t sub_100067BA4()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  Swift::String v14;
  __n128 v15;
  Swift::String v16;
  Swift::String v17;

  sub_100031FEC(v3, v1);
  sub_100031FEC(v3, v1);
  ((void (*)(uint64_t, unint64_t, _QWORD))Data.Iterator.init(_:at:))(v3, v1, (int)v3);
  sub_10000E614(v3, v1);
  v5 = sub_100011DE4((unint64_t *)&qword_100404F08, (uint64_t (*)(uint64_t))&type metadata accessor for Data.Iterator, (uint64_t)&protocol conformance descriptor for Data.Iterator);
  ((void (*)(uint64_t, uint64_t))dispatch thunk of IteratorProtocol.next())(v0, v5);
  if ((*(_BYTE *)(v4 - 97) & 1) != 0)
  {
    v6 = 0;
    v7 = (void *)0xE000000000000000;
  }
  else
  {
    v6 = 0;
    v7 = (void *)0xE000000000000000;
    *(_OWORD *)(v4 - 144) = xmmword_10033A110;
    do
    {
      v8 = *(_BYTE *)(v4 - 98);
      v9 = sub_100012C44((uint64_t *)&unk_100404F10);
      v10 = swift_allocObject(v9, 72, 7);
      *(_OWORD *)(v10 + 16) = *(_OWORD *)(v4 - 144);
      *(_QWORD *)(v10 + 56) = &type metadata for UInt8;
      *(_QWORD *)(v10 + 64) = &protocol witness table for UInt8;
      *(_BYTE *)(v10 + 32) = v8;
      v11 = String.init(format:_:)(1479684133, 0xE400000000000000, v10);
      v13 = v12;
      *(_QWORD *)(v4 - 120) = v6;
      *(_QWORD *)(v4 - 112) = v7;
      swift_bridgeObjectRetain(v7);
      v14._countAndFlagsBits = v11;
      v14._object = v13;
      String.append(_:)(v14);
      swift_bridgeObjectRelease(v7);
      v15 = swift_bridgeObjectRelease(v13);
      v6 = *(_QWORD *)(v4 - 120);
      v7 = *(void **)(v4 - 112);
      ((void (*)(uint64_t, uint64_t, __n128))dispatch thunk of IteratorProtocol.next())(v0, v5, v15);
    }
    while (*(_BYTE *)(v4 - 97) != 1);
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 152) + 8))(v2, v0);
  v16._countAndFlagsBits = v6;
  v16._object = v7;
  String.append(_:)(v16);
  swift_bridgeObjectRelease(v7);
  v17._countAndFlagsBits = 34;
  v17._object = (void *)0xE100000000000000;
  String.append(_:)(v17);
  return *(_QWORD *)(v4 - 96);
}

uint64_t NANPMK.customMirror.getter(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  _QWORD *v15;
  _QWORD v16[2];

  v4 = type metadata accessor for Mirror.AncestorRepresentation(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin();
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012C44((uint64_t *)&unk_1004085C0);
  __chkstk_darwin();
  v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16[0] = a1;
  v16[1] = a2;
  v15 = _swiftEmptyArrayStorage;
  v10 = type metadata accessor for Mirror.DisplayStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for Mirror.AncestorRepresentation.generated(_:), v4);
  sub_100031FEC(a1, a2);
  v11 = sub_100012C44(&qword_100405B90);
  v12 = sub_1000687EC();
  return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)(v16, &v15, v9, v7, &type metadata for NANPMK, v11, v12);
}

void sub_100067E94()
{
  uint64_t *v0;

  NANPMK.description.getter(*v0, v0[1]);
}

uint64_t sub_100067E9C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v15;
  _QWORD *v16;
  _QWORD v17[2];

  v3 = type metadata accessor for Mirror.AncestorRepresentation(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin();
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012C44((uint64_t *)&unk_1004085C0);
  __chkstk_darwin();
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *v1;
  v9 = v1[1];
  v17[0] = v10;
  v17[1] = v9;
  v16 = _swiftEmptyArrayStorage;
  v11 = type metadata accessor for Mirror.DisplayStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v8, 1, 1, v11);
  (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, enum case for Mirror.AncestorRepresentation.generated(_:), v3);
  sub_100031FEC(v10, v9);
  v12 = sub_100012C44(&qword_100405B90);
  v13 = sub_1000687EC();
  return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)(v17, &v16, v8, v6, a1, v12, v13);
}

uint64_t static NANBitmap.Band.ghz_4_9_to_5_0.getter()
{
  return 16;
}

uint64_t NANPMK.ID.data.getter(uint64_t a1, unint64_t a2)
{
  sub_100031FEC(a1, a2);
  return a1;
}

uint64_t NANPMK.ID.init(from:)(_QWORD *a1)
{
  return sub_1000685B4(a1);
}

uint64_t NANPMK.ID.description.getter(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  sub_100031FEC(a1, a2);
  sub_100032030(0, 0xE000000000000000, a1, a2);
  v5 = v4;
  sub_10000E614(a1, a2);
  return v5;
}

uint64_t IEEE80211InformationElement.MessageIntegrityCode.hash(into:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  __n128 v6;

  sub_100031FEC(a2, a3);
  Data.hash(into:)(a1, a2, a3, v6);
  return sub_10000E614(a2, a3);
}

Swift::Int sub_1000680E4()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

Swift::Int sub_100068124()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

uint64_t sub_100068160@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v6;
  uint64_t result;
  char v8;

  if (a1 == 1635017060 && a2 == 0xE400000000000000)
  {
    result = swift_bridgeObjectRelease(0xE400000000000000);
    v8 = 0;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(1635017060, 0xE400000000000000, a1, a2, 0);
    result = swift_bridgeObjectRelease(a2);
    v8 = v6 ^ 1;
  }
  *a3 = v8 & 1;
  return result;
}

uint64_t sub_1000681E4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100068838();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10006820C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100068838();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NANPMK.ID.encode(to:)(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_100068260(a1, a2, a3, &qword_100405E68, (uint64_t (*)(void))sub_100068838, (uint64_t)&type metadata for NANPMK.ID.CodingKeys);
}

uint64_t sub_100068260(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t (*a5)(void), uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v21 = a3;
  v10 = sub_100012C44(a4);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin();
  v13 = (char *)&v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = a1[3];
  v14 = a1[4];
  sub_10003259C(a1, v15);
  v16 = a5();
  dispatch thunk of Encoder.container<A>(keyedBy:)(a6, a6, v16, v15, v14);
  v22[0] = a2;
  v22[1] = v21;
  v17 = sub_100068570();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v22, v18, v10, &type metadata for Data, v17);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
}

Swift::Int IEEE80211InformationElement.MessageIntegrityCode.hashValue.getter(uint64_t a1, unint64_t a2)
{
  __n128 v4;
  _QWORD v6[9];

  Hasher.init(_seed:)(v6);
  sub_100031FEC(a1, a2);
  Data.hash(into:)(v6, a1, a2, v4);
  sub_10000E614(a1, a2);
  return Hasher._finalize()();
}

Swift::Int sub_1000683D0()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  __n128 v3;
  _QWORD v5[9];

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)(v5);
  sub_100031FEC(v1, v2);
  Data.hash(into:)(v5, v1, v2, v3);
  sub_10000E614(v1, v2);
  return Hasher._finalize()();
}

uint64_t sub_100068430(uint64_t a1)
{
  uint64_t *v1;
  unint64_t v3;
  uint64_t v4;
  __n128 v5;

  v4 = *v1;
  v3 = v1[1];
  sub_100031FEC(v4, v3);
  Data.hash(into:)(a1, v4, v3, v5);
  return sub_10000E614(v4, v3);
}

Swift::Int sub_10006847C()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  __n128 v3;
  _QWORD v5[9];

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)(v5);
  sub_100031FEC(v1, v2);
  Data.hash(into:)(v5, v1, v2, v3);
  sub_10000E614(v1, v2);
  return Hasher._finalize()();
}

uint64_t sub_1000684D8@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;

  result = sub_1000685B4(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t sub_100068500(_QWORD *a1)
{
  uint64_t *v1;

  return NANPMK.ID.encode(to:)(a1, *v1, v1[1]);
}

void sub_100068518(uint64_t *a1)
{
  _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(*a1, a1[1]);
}

unint64_t sub_10006852C()
{
  unint64_t result;

  result = qword_100405E58;
  if (!qword_100405E58)
  {
    result = swift_getWitnessTable(&unk_10033B91C, &type metadata for NANPMK.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100405E58);
  }
  return result;
}

unint64_t sub_100068570()
{
  unint64_t result;

  result = qword_100405E60;
  if (!qword_100405E60)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&qword_100405E60);
  }
  return result;
}

uint64_t sub_1000685B4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v3 = type metadata accessor for __DataStorage(0);
  swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
  v13 = 0x1000000000;
  v14 = __DataStorage.init(length:)(16);
  sub_1000167D8((int *)&v13, 0);
  v4 = v14;
  v5 = a1[3];
  v6 = a1[4];
  v7 = (uint64_t)sub_10003259C(a1, v5);
  dispatch thunk of Decoder.unkeyedContainer()(&v13, v5, v6);
  if (v1)
  {
    sub_100014430(a1);
    swift_release(v4);
  }
  else
  {
    v8 = v15;
    v9 = v16;
    sub_100034C68((uint64_t)&v13, v15);
    v7 = UnkeyedDecodingContainer.decodeData(with:)(16, v8, v9);
    v12 = v11;
    sub_100031FEC(v7, v11);
    swift_release(v4);
    sub_100014430(&v13);
    sub_100014430(a1);
    sub_10000E614(v7, v12);
  }
  return v7;
}

void _s7CoreP2P6NANPMKV2IDVyAESg10Foundation4DataVcfC_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD v4[2];

  v3 = type metadata accessor for __DataStorage(0);
  swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
  v4[0] = 0x1000000000;
  v4[1] = __DataStorage.init(length:)(16);
  sub_1000167D8((int *)v4, 0);
  __asm { BR              X10 }
}

uint64_t sub_10006876C()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;

  if (BYTE6(v0) != 16)
  {
    sub_10000E614(v2, v0);
    v2 = 0;
  }
  swift_release(v1);
  return v2;
}

unint64_t sub_1000687EC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10040C3E0;
  if (!qword_10040C3E0)
  {
    v1 = sub_100013C64(&qword_100405B90);
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_10040C3E0);
  }
  return result;
}

unint64_t sub_100068838()
{
  unint64_t result;

  result = qword_100405E70;
  if (!qword_100405E70)
  {
    result = swift_getWitnessTable(&unk_10033B8CC, &type metadata for NANPMK.ID.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100405E70);
  }
  return result;
}

unint64_t sub_100068880()
{
  unint64_t result;

  result = qword_100405E78;
  if (!qword_100405E78)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for NANPMK, &type metadata for NANPMK);
    atomic_store(result, (unint64_t *)&qword_100405E78);
  }
  return result;
}

unint64_t sub_1000688C8()
{
  unint64_t result;

  result = qword_100405E80;
  if (!qword_100405E80)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for NANPMK.ID, &type metadata for NANPMK.ID);
    atomic_store(result, (unint64_t *)&qword_100405E80);
  }
  return result;
}

ValueMetadata *type metadata accessor for NANPMK()
{
  return &type metadata for NANPMK;
}

uint64_t *initializeBufferWithCopyOfBuffer for NANServiceName.Hash(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;

  v3 = *a2;
  v4 = a2[1];
  sub_100031FEC(*a2, v4);
  *a1 = v3;
  a1[1] = v4;
  return a1;
}

uint64_t destroy for NANServiceName.Hash(uint64_t a1)
{
  return sub_10000E614(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
}

uint64_t *assignWithCopy for NANServiceName.Hash(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v3 = *a2;
  v4 = a2[1];
  sub_100031FEC(*a2, v4);
  v5 = *a1;
  v6 = a1[1];
  *a1 = v3;
  a1[1] = v4;
  sub_10000E614(v5, v6);
  return a1;
}

uint64_t *assignWithTake for NANServiceName.Hash(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3;
  unint64_t v4;

  v3 = *a1;
  v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_10000E614(v3, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for NANServiceName.Hash(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xD && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 13);
  v3 = (((*(_QWORD *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(_QWORD *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for NANServiceName.Hash(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(_QWORD *)result = a2 - 13;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xD)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0xD)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NANPMK.ID()
{
  return &type metadata for NANPMK.ID;
}

ValueMetadata *type metadata accessor for NANPMK.ID.CodingKeys()
{
  return &type metadata for NANPMK.ID.CodingKeys;
}

uint64_t _s7CoreP2P6NANPMKV2IDV10CodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_100068AF4 + 4 * byte_10033B564[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_100068B14 + 4 * byte_10033B569[v4]))();
}

_BYTE *sub_100068AF4(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_100068B14(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100068B1C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100068B24(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100068B2C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100068B34(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for NANPMK.CodingKeys()
{
  return &type metadata for NANPMK.CodingKeys;
}

unint64_t sub_100068B54()
{
  unint64_t result;

  result = qword_100405E88;
  if (!qword_100405E88)
  {
    result = swift_getWitnessTable(&unk_10033B7EC, &type metadata for NANPMK.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100405E88);
  }
  return result;
}

unint64_t sub_100068B9C()
{
  unint64_t result;

  result = qword_100405E90;
  if (!qword_100405E90)
  {
    result = swift_getWitnessTable(&unk_10033B8A4, &type metadata for NANPMK.ID.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100405E90);
  }
  return result;
}

unint64_t sub_100068BE4()
{
  unint64_t result;

  result = qword_100405E98;
  if (!qword_100405E98)
  {
    result = swift_getWitnessTable(&unk_10033B814, &type metadata for NANPMK.ID.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100405E98);
  }
  return result;
}

unint64_t sub_100068C2C()
{
  unint64_t result;

  result = qword_100405EA0;
  if (!qword_100405EA0)
  {
    result = swift_getWitnessTable(&unk_10033B83C, &type metadata for NANPMK.ID.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100405EA0);
  }
  return result;
}

unint64_t sub_100068C74()
{
  unint64_t result;

  result = qword_100405EA8;
  if (!qword_100405EA8)
  {
    result = swift_getWitnessTable("\r6\n", &type metadata for NANPMK.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100405EA8);
  }
  return result;
}

unint64_t sub_100068CBC()
{
  unint64_t result;

  result = qword_100405EB0;
  if (!qword_100405EB0)
  {
    result = swift_getWitnessTable(&unk_10033B784, &type metadata for NANPMK.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100405EB0);
  }
  return result;
}

unint64_t sub_100068D00()
{
  unint64_t result;

  result = qword_100405EC8;
  if (!qword_100405EC8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&qword_100405EC8);
  }
  return result;
}

void sub_100068D64(_QWORD *a1@<X8>)
{
  *a1 = &_swiftEmptyArrayStorage;
}

uint64_t sub_100068D78@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_100068DEC(a1, (void (*)(uint64_t))sub_10009B5DC, a2);
}

void sub_100068D84(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *a1;
  v5 = *v2;
  v6 = *v2;
  swift_bridgeObjectRetain(*v2);
  sub_1001AA108(v4);
  swift_bridgeObjectRelease(v5);
  *a2 = v6;
}

uint64_t sub_100068DE0@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_100068DEC(a1, (void (*)(uint64_t))sub_1001AA1B4, a2);
}

uint64_t sub_100068DEC@<X0>(uint64_t *a1@<X0>, void (*a2)(uint64_t)@<X3>, _QWORD *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  v6 = *a1;
  v7 = *v3;
  v9 = *v3;
  swift_bridgeObjectRetain(*v3);
  a2(v6);
  swift_bridgeObjectRelease(v6);
  result = swift_bridgeObjectRelease(v7);
  *a3 = v9;
  return result;
}

BOOL sub_100068E5C(uint64_t *a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v9;

  v4 = *a2;
  v9 = *v2;
  swift_bridgeObjectRetain(*v2);
  sub_1001AA108(v4);
  v5 = v9;
  v6 = sub_1000851D0(v9, v4);
  if ((v6 & 1) == 0)
  {
    swift_bridgeObjectRelease(v9);
    v7 = swift_bridgeObjectRetain(v4);
    sub_10009B5DC(v7);
    v5 = v4;
  }
  *a1 = v5;
  swift_bridgeObjectRelease(v4);
  return (v6 & 1) == 0;
}

uint64_t sub_100068EF8@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = sub_1001AA014(*a1);
  *a2 = result;
  return result;
}

void sub_100068F20(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;

  v4 = *a1;
  v7 = *v2;
  swift_bridgeObjectRetain(*v2);
  sub_1001AA108(v4);
  v5 = v7;
  sub_10009B5DC(v4);
  v6 = sub_1000851D0(v7, _swiftEmptyArrayStorage);
  swift_bridgeObjectRelease(v4);
  if ((v6 & 1) != 0)
  {
    swift_bridgeObjectRelease(v7);
    v5 = 0;
  }
  *a2 = v5;
}

double sub_100068FB4(uint64_t *a1)
{
  uint64_t v1;
  double result;

  v1 = *a1;
  sub_10009B5DC(*a1);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v1).n128_u64[0];
  return result;
}

uint64_t sub_100068FDC(uint64_t *a1)
{
  return sub_1001AA108(*a1);
}

double sub_100068FE4(uint64_t *a1)
{
  uint64_t v1;
  double result;

  v1 = *a1;
  sub_1001AA1B4(*a1);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v1).n128_u64[0];
  return result;
}

void sub_10006900C(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *a1;
  v5 = *v2;
  v6 = *v2;
  swift_bridgeObjectRetain_n(*v2, 2);
  sub_1001AA1B4(v4);
  sub_1001AA108(v6);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v6);
  *a2 = v5;
}

uint64_t sub_100069088(uint64_t *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v6;

  v2 = *a1;
  v3 = *v1;
  v6 = *v1;
  swift_bridgeObjectRetain(*v1);
  sub_1001AA108(v2);
  v4 = sub_1000851D0(v6, v3);
  swift_bridgeObjectRelease(v6);
  return v4 & 1;
}

uint64_t sub_1000690F0(uint64_t *a1)
{
  _QWORD *v1;
  uint64_t v2;
  char v3;
  uint64_t v5;

  v2 = *a1;
  v5 = *v1;
  swift_bridgeObjectRetain(*v1);
  sub_1001AA108(v2);
  v3 = sub_1000851D0(v5, _swiftEmptyArrayStorage);
  swift_bridgeObjectRelease(v5);
  return v3 & 1;
}

uint64_t sub_100069150(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v2 = *a1;
  v3 = *v1;
  v5 = *a1;
  swift_bridgeObjectRetain(*a1);
  sub_1001AA108(v3);
  LOBYTE(v2) = sub_1000851D0(v5, v2);
  swift_bridgeObjectRelease(v5);
  return v2 & 1;
}

uint64_t sub_1000691B8()
{
  _QWORD *v0;

  return sub_1000851D0(*v0, &_swiftEmptyArrayStorage);
}

uint64_t sub_1000691C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return SetAlgebra.init<A>(_:)(a1, a4, a2, a5, a3);
}

double sub_1000691E0(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;
  double result;
  uint64_t v4;

  v2 = *a1;
  v4 = *v1;
  swift_bridgeObjectRetain(*v1);
  sub_1001AA1B4(v2);
  sub_1001AA108(v4);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v4).n128_u64[0];
  return result;
}

uint64_t sub_10006923C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *a1 = *v1;
  return swift_bridgeObjectRetain(v2);
}

uint64_t sub_100069248(_QWORD *a1, _QWORD *a2)
{
  return sub_1000851D0(*a1, *a2);
}

void sub_100069254(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;

  v4 = sub_1001EA9A0(a1);
  swift_bridgeObjectRelease(a1);
  *a2 = v4;
}

uint64_t sub_100069290()
{
  uint64_t result;

  result = sub_1001AA1C0(0);
  static WiFiDriverCapabilities.supportsNAN = result;
  return result;
}

uint64_t *WiFiDriverCapabilities.supportsNAN.unsafeMutableAddressor()
{
  if (qword_100403EA8 != -1)
    swift_once(&qword_100403EA8, sub_100069290);
  return &static WiFiDriverCapabilities.supportsNAN;
}

uint64_t static WiFiDriverCapabilities.supportsNAN.getter()
{
  return sub_10006998C(&qword_100403EA8, &static WiFiDriverCapabilities.supportsNAN);
}

uint64_t sub_10006930C()
{
  uint64_t result;

  result = sub_1001AA1C0(1);
  static WiFiDriverCapabilities.supportsAWDL = result;
  return result;
}

uint64_t *WiFiDriverCapabilities.supportsAWDL.unsafeMutableAddressor()
{
  if (qword_100403EB0 != -1)
    swift_once(&qword_100403EB0, sub_10006930C);
  return &static WiFiDriverCapabilities.supportsAWDL;
}

uint64_t static WiFiDriverCapabilities.supportsAWDL.getter()
{
  return sub_10006998C(&qword_100403EB0, &static WiFiDriverCapabilities.supportsAWDL);
}

uint64_t sub_100069388()
{
  uint64_t result;

  result = sub_1001AA1C0(2);
  static WiFiDriverCapabilities.supportsDualBand = result;
  return result;
}

uint64_t *WiFiDriverCapabilities.supportsDualBand.unsafeMutableAddressor()
{
  if (qword_100403EB8 != -1)
    swift_once(&qword_100403EB8, sub_100069388);
  return &static WiFiDriverCapabilities.supportsDualBand;
}

uint64_t static WiFiDriverCapabilities.supportsDualBand.getter()
{
  return sub_10006998C(&qword_100403EB8, &static WiFiDriverCapabilities.supportsDualBand);
}

uint64_t sub_100069404()
{
  uint64_t result;

  result = sub_1001AA1C0(3);
  static WiFiDriverCapabilities.supportsSimultaneousDualBand = result;
  return result;
}

uint64_t *WiFiDriverCapabilities.supportsSimultaneousDualBand.unsafeMutableAddressor()
{
  if (qword_100403EC0 != -1)
    swift_once(&qword_100403EC0, sub_100069404);
  return &static WiFiDriverCapabilities.supportsSimultaneousDualBand;
}

uint64_t static WiFiDriverCapabilities.supportsSimultaneousDualBand.getter()
{
  return sub_10006998C(&qword_100403EC0, &static WiFiDriverCapabilities.supportsSimultaneousDualBand);
}

uint64_t sub_100069480()
{
  uint64_t result;

  result = sub_1001AA1C0(4);
  static WiFiDriverCapabilities.supportsAWDLSoloMode = result;
  return result;
}

uint64_t *WiFiDriverCapabilities.supportsAWDLSoloMode.unsafeMutableAddressor()
{
  if (qword_100403EC8 != -1)
    swift_once(&qword_100403EC8, sub_100069480);
  return &static WiFiDriverCapabilities.supportsAWDLSoloMode;
}

uint64_t static WiFiDriverCapabilities.supportsAWDLSoloMode.getter()
{
  return sub_10006998C(&qword_100403EC8, &static WiFiDriverCapabilities.supportsAWDLSoloMode);
}

uint64_t sub_1000694FC()
{
  uint64_t result;

  result = sub_1001AA1C0(5);
  static WiFiDriverCapabilities.isClmRestricted = result;
  return result;
}

uint64_t *WiFiDriverCapabilities.isClmRestricted.unsafeMutableAddressor()
{
  if (qword_100403ED0 != -1)
    swift_once(&qword_100403ED0, sub_1000694FC);
  return &static WiFiDriverCapabilities.isClmRestricted;
}

uint64_t static WiFiDriverCapabilities.isClmRestricted.getter()
{
  return sub_10006998C(&qword_100403ED0, &static WiFiDriverCapabilities.isClmRestricted);
}

uint64_t sub_100069578()
{
  uint64_t result;

  result = sub_1001AA1C0(6);
  static WiFiDriverCapabilities.peerCountryCodeLearningCapable = result;
  return result;
}

uint64_t *WiFiDriverCapabilities.peerCountryCodeLearningCapable.unsafeMutableAddressor()
{
  if (qword_100403ED8 != -1)
    swift_once(&qword_100403ED8, sub_100069578);
  return &static WiFiDriverCapabilities.peerCountryCodeLearningCapable;
}

uint64_t static WiFiDriverCapabilities.peerCountryCodeLearningCapable.getter()
{
  return sub_10006998C(&qword_100403ED8, &static WiFiDriverCapabilities.peerCountryCodeLearningCapable);
}

uint64_t sub_1000695F4()
{
  uint64_t result;

  result = sub_1001AA1C0(7);
  static WiFiDriverCapabilities.supportsDFSProxy = result;
  return result;
}

uint64_t *WiFiDriverCapabilities.supportsDFSProxy.unsafeMutableAddressor()
{
  if (qword_100403EE0 != -1)
    swift_once(&qword_100403EE0, sub_1000695F4);
  return &static WiFiDriverCapabilities.supportsDFSProxy;
}

uint64_t static WiFiDriverCapabilities.supportsDFSProxy.getter()
{
  return sub_10006998C(&qword_100403EE0, &static WiFiDriverCapabilities.supportsDFSProxy);
}

uint64_t sub_100069670()
{
  uint64_t v0;
  uint64_t inited;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;

  v0 = sub_100012C44(&qword_100405F08);
  inited = swift_initStackObject(v0, &v19);
  *(_OWORD *)(inited + 16) = xmmword_10033B1D0;
  if (qword_100403EA8 != -1)
    swift_once(&qword_100403EA8, sub_100069290);
  v2 = static WiFiDriverCapabilities.supportsNAN;
  *(_QWORD *)(inited + 32) = static WiFiDriverCapabilities.supportsNAN;
  v3 = qword_100403EB0;
  swift_bridgeObjectRetain(v2);
  if (v3 != -1)
    swift_once(&qword_100403EB0, sub_10006930C);
  v4 = static WiFiDriverCapabilities.supportsAWDL;
  *(_QWORD *)(inited + 40) = static WiFiDriverCapabilities.supportsAWDL;
  v5 = qword_100403EB8;
  swift_bridgeObjectRetain(v4);
  if (v5 != -1)
    swift_once(&qword_100403EB8, sub_100069388);
  v6 = static WiFiDriverCapabilities.supportsDualBand;
  *(_QWORD *)(inited + 48) = static WiFiDriverCapabilities.supportsDualBand;
  v7 = qword_100403EC0;
  swift_bridgeObjectRetain(v6);
  if (v7 != -1)
    swift_once(&qword_100403EC0, sub_100069404);
  v8 = static WiFiDriverCapabilities.supportsSimultaneousDualBand;
  *(_QWORD *)(inited + 56) = static WiFiDriverCapabilities.supportsSimultaneousDualBand;
  v9 = qword_100403EC8;
  swift_bridgeObjectRetain(v8);
  if (v9 != -1)
    swift_once(&qword_100403EC8, sub_100069480);
  v10 = static WiFiDriverCapabilities.supportsAWDLSoloMode;
  *(_QWORD *)(inited + 64) = static WiFiDriverCapabilities.supportsAWDLSoloMode;
  v11 = qword_100403ED0;
  swift_bridgeObjectRetain(v10);
  if (v11 != -1)
    swift_once(&qword_100403ED0, sub_1000694FC);
  v12 = static WiFiDriverCapabilities.isClmRestricted;
  *(_QWORD *)(inited + 72) = static WiFiDriverCapabilities.isClmRestricted;
  v13 = qword_100403ED8;
  swift_bridgeObjectRetain(v12);
  if (v13 != -1)
    swift_once(&qword_100403ED8, sub_100069578);
  v14 = static WiFiDriverCapabilities.peerCountryCodeLearningCapable;
  *(_QWORD *)(inited + 80) = static WiFiDriverCapabilities.peerCountryCodeLearningCapable;
  v15 = qword_100403EE0;
  swift_bridgeObjectRetain(v14);
  if (v15 != -1)
    swift_once(&qword_100403EE0, sub_1000695F4);
  v16 = static WiFiDriverCapabilities.supportsDFSProxy;
  *(_QWORD *)(inited + 88) = static WiFiDriverCapabilities.supportsDFSProxy;
  swift_bridgeObjectRetain(v16);
  v17 = sub_1001EAC80(inited);
  swift_setDeallocating(inited);
  result = swift_arrayDestroy(inited + 32, 8, &type metadata for WiFiDriverCapabilities);
  static WiFiDriverCapabilities.all = v17;
  return result;
}

uint64_t *WiFiDriverCapabilities.all.unsafeMutableAddressor()
{
  if (qword_100403EE8 != -1)
    swift_once(&qword_100403EE8, sub_100069670);
  return &static WiFiDriverCapabilities.all;
}

uint64_t static WiFiDriverCapabilities.all.getter()
{
  return sub_10006998C(&qword_100403EE8, &static WiFiDriverCapabilities.all);
}

uint64_t sub_10006990C()
{
  uint64_t result;

  result = sub_1001EAC80((uint64_t)_swiftEmptyArrayStorage);
  static WiFiDriverCapabilities.none = result;
  return result;
}

uint64_t *WiFiDriverCapabilities.none.unsafeMutableAddressor()
{
  if (qword_100403EF0 != -1)
    swift_once(&qword_100403EF0, sub_10006990C);
  return &static WiFiDriverCapabilities.none;
}

uint64_t static WiFiDriverCapabilities.none.getter()
{
  return sub_10006998C(&qword_100403EF0, &static WiFiDriverCapabilities.none);
}

uint64_t sub_10006998C(_QWORD *a1, _QWORD *a2)
{
  if (*a1 != -1)
    swift_once();
  return swift_bridgeObjectRetain(*a2);
}

unint64_t sub_1000699C4(uint64_t a1)
{
  unint64_t result;

  result = sub_1000699E8();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000699E8()
{
  unint64_t result;

  result = qword_100405EE0;
  if (!qword_100405EE0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for WiFiDriverCapabilities, &type metadata for WiFiDriverCapabilities);
    atomic_store(result, (unint64_t *)&qword_100405EE0);
  }
  return result;
}

unint64_t sub_100069A30()
{
  unint64_t result;

  result = qword_100405EE8;
  if (!qword_100405EE8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for WiFiDriverCapabilities, &type metadata for WiFiDriverCapabilities);
    atomic_store(result, (unint64_t *)&qword_100405EE8);
  }
  return result;
}

unint64_t sub_100069A78()
{
  unint64_t result;

  result = qword_100405EF0;
  if (!qword_100405EF0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for WiFiDriverCapabilities, &type metadata for WiFiDriverCapabilities);
    atomic_store(result, (unint64_t *)&qword_100405EF0);
  }
  return result;
}

unint64_t sub_100069AC0()
{
  unint64_t result;

  result = qword_100405EF8;
  if (!qword_100405EF8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for WiFiDriverCapabilities, &type metadata for WiFiDriverCapabilities);
    atomic_store(result, (unint64_t *)&qword_100405EF8);
  }
  return result;
}

unint64_t sub_100069B08()
{
  unint64_t result;

  result = qword_100405F00;
  if (!qword_100405F00)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for WiFiDriverCapabilities, &type metadata for WiFiDriverCapabilities);
    atomic_store(result, (unint64_t *)&qword_100405F00);
  }
  return result;
}

ValueMetadata *type metadata accessor for WiFiDriverCapabilities()
{
  return &type metadata for WiFiDriverCapabilities;
}

uint64_t IEEE80211Status.description.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100069B98 + 4 * word_10033BB40[a1]))(0x6673736563637553, 0xEA00000000006C75);
}

unint64_t sub_100069B98()
{
  return 0xD000000000000013;
}

uint64_t sub_10006A014()
{
  return 0x697420656E696F4ALL;
}

uint64_t sub_10006A038()
{
  return 0x6F72726520564349;
}

uint64_t sub_10006A054()
{
  return 0x6F6261206E696F4ALL;
}

uint64_t sub_10006A074()
{
  return 0x736572206E696F4ALL;
}

uint64_t sub_10006A08C()
{
  return 0x616C696176616E55;
}

uint64_t IEEE80211Status.rawValue.getter(char a1)
{
  return word_10033BF3C[a1];
}

BOOL sub_10006A0C4(char *a1, char *a2)
{
  return word_10033BF3C[*a1] == word_10033BF3C[*a2];
}

uint64_t sub_10006A0E8@<X0>(unsigned __int16 *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = _s7CoreP2P15IEEE80211StatusO8rawValueACSgs6UInt16V_tcfC_0(*a1);
  *a2 = result;
  return result;
}

void sub_10006A110(_WORD *a1@<X8>)
{
  char *v1;

  *a1 = word_10033BF3C[*v1];
}

uint64_t sub_10006A128()
{
  unsigned __int8 *v0;

  return IEEE80211Status.description.getter(*v0);
}

Swift::Int sub_10006A130()
{
  char *v0;
  uint64_t v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(word_10033BF3C[v1]);
  return Hasher._finalize()();
}

void sub_10006A17C()
{
  char *v0;

  Hasher._combine(_:)(word_10033BF3C[*v0]);
}

Swift::Int sub_10006A1B0()
{
  char *v0;
  uint64_t v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(word_10033BF3C[v1]);
  return Hasher._finalize()();
}

uint64_t sub_10006A1F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10006B22C();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_10006A254(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10006B22C();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t IEEE80211Reason.description.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10006A2D8 + 4 * byte_10033BBAC[a1]))(0x6673736563637553, 0xEA00000000006C75);
}

uint64_t sub_10006A2D8()
{
  return 0x6669636570736E55;
}

unint64_t sub_10006A2FC()
{
  return 0xD00000000000001ELL;
}

uint64_t IEEE80211Reason.rawValue.getter(char a1)
{
  return word_10033BFA8[a1];
}

BOOL sub_10006A64C(char *a1, char *a2)
{
  return word_10033BFA8[*a1] == word_10033BFA8[*a2];
}

uint64_t sub_10006A670@<X0>(unsigned __int16 *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = _s7CoreP2P15IEEE80211ReasonO8rawValueACSgs6UInt16V_tcfC_0(*a1);
  *a2 = result;
  return result;
}

void sub_10006A698(_WORD *a1@<X8>)
{
  char *v1;

  *a1 = word_10033BFA8[*v1];
}

uint64_t sub_10006A6B0()
{
  unsigned __int8 *v0;

  return IEEE80211Reason.description.getter(*v0);
}

Swift::Int sub_10006A6B8()
{
  char *v0;
  uint64_t v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(word_10033BFA8[v1]);
  return Hasher._finalize()();
}

void sub_10006A704()
{
  char *v0;

  Hasher._combine(_:)(word_10033BFA8[*v0]);
}

Swift::Int sub_10006A738()
{
  char *v0;
  uint64_t v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(word_10033BFA8[v1]);
  return Hasher._finalize()();
}

uint64_t sub_10006A780(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10006B1E8();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_10006A7DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10006B1E8();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t AWDLThreadCoexistenceEvent.realTimeTrafficStarted.getter(__int16 a1)
{
  return HIBYTE(a1);
}

uint64_t NonNANOperatingChannelInformation.channelNumber.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 1) = result;
  return result;
}

CoreP2P::AWDLThreadCoexistenceEvent __swiftcall AWDLThreadCoexistenceEvent.init(channelSequenceWith2GHz:realTimeTrafficStarted:)(Swift::UInt8 channelSequenceWith2GHz, Swift::UInt8 realTimeTrafficStarted)
{
  return (CoreP2P::AWDLThreadCoexistenceEvent)(channelSequenceWith2GHz | (realTimeTrafficStarted << 8));
}

void IEEE80211StatusAndReason.hash(into:)(uint64_t a1, unsigned int a2)
{
  unsigned int v2;

  v2 = a2 >> 8;
  Hasher._combine(_:)(word_10033BF3C[(char)a2]);
  Hasher._combine(_:)(word_10033BFA8[(char)v2]);
}

BOOL static IEEE80211StatusAndReason.__derived_struct_equals(_:_:)(unsigned int a1, unsigned int a2)
{
  return word_10033BF3C[(char)a1] == word_10033BF3C[(char)a2]
      && *(unsigned __int16 *)((char *)word_10033BFA8 + ((uint64_t)((unint64_t)(a1 >> 8) << 56) >> 55)) == *(unsigned __int16 *)((char *)word_10033BFA8 + ((uint64_t)((unint64_t)(a2 >> 8) << 56) >> 55));
}

Swift::Int IEEE80211StatusAndReason.hashValue.getter(unsigned int a1)
{
  char v1;
  unsigned int v2;
  _QWORD v4[9];

  v1 = a1;
  v2 = a1 >> 8;
  Hasher.init(_seed:)(v4);
  Hasher._combine(_:)(word_10033BF3C[v1]);
  Hasher._combine(_:)(word_10033BFA8[(char)v2]);
  return Hasher._finalize()();
}

Swift::Int sub_10006A950()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[9];

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)(v4);
  Hasher._combine(_:)(word_10033BF3C[v1]);
  Hasher._combine(_:)(word_10033BFA8[v2]);
  return Hasher._finalize()();
}

void sub_10006A9BC()
{
  char *v0;
  uint64_t v1;

  v1 = v0[1];
  Hasher._combine(_:)(word_10033BF3C[*v0]);
  Hasher._combine(_:)(word_10033BFA8[v1]);
}

Swift::Int sub_10006AA0C()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[9];

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)(v4);
  Hasher._combine(_:)(word_10033BF3C[v1]);
  Hasher._combine(_:)(word_10033BFA8[v2]);
  return Hasher._finalize()();
}

BOOL sub_10006AA74(char *a1, char *a2)
{
  return word_10033BF3C[*a1] == word_10033BF3C[*a2] && word_10033BFA8[a1[1]] == word_10033BFA8[a2[1]];
}

uint64_t _s7CoreP2P15IEEE80211ReasonO8rawValueACSgs6UInt16V_tcfC_0(unsigned __int16 a1)
{
  if (a1 > 0x2Du)
    return 34;
  else
    return byte_10033BFEC[(__int16)a1];
}

uint64_t _s7CoreP2P15IEEE80211StatusO8rawValueACSgs6UInt16V_tcfC_0(unsigned __int16 a1)
{
  int v1;
  uint64_t result;

  v1 = a1;
  result = 1;
  switch(v1)
  {
    case 0:
      result = 0;
      break;
    case 1:
      return result;
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 29:
    case 31:
    case 32:
    case 36:
    case 38:
    case 39:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
LABEL_7:
      result = 54;
      break;
    case 10:
      result = 2;
      break;
    case 11:
      result = 3;
      break;
    case 12:
      result = 4;
      break;
    case 13:
      result = 5;
      break;
    case 14:
      result = 6;
      break;
    case 15:
      result = 7;
      break;
    case 16:
      result = 8;
      break;
    case 17:
      result = 9;
      break;
    case 18:
      result = 10;
      break;
    case 25:
      result = 11;
      break;
    case 26:
      result = 12;
      break;
    case 27:
      result = 13;
      break;
    case 28:
      result = 14;
      break;
    case 30:
      result = 15;
      break;
    case 33:
      result = 16;
      break;
    case 34:
      result = 17;
      break;
    case 35:
      result = 18;
      break;
    case 37:
      result = 19;
      break;
    case 40:
      result = 20;
      break;
    case 41:
      result = 21;
      break;
    case 42:
      result = 22;
      break;
    case 43:
      result = 23;
      break;
    case 44:
      result = 24;
      break;
    case 45:
      result = 25;
      break;
    case 46:
      result = 26;
      break;
    case 59:
      result = 27;
      break;
    case 60:
      result = 28;
      break;
    case 61:
      result = 29;
      break;
    case 62:
      result = 30;
      break;
    case 63:
      result = 31;
      break;
    case 64:
      result = 32;
      break;
    case 65:
      result = 33;
      break;
    case 66:
      result = 34;
      break;
    case 67:
      result = 35;
      break;
    case 68:
      result = 36;
      break;
    case 82:
      result = 37;
      break;
    case 83:
      result = 38;
      break;
    case 92:
      result = 39;
      break;
    case 93:
      result = 40;
      break;
    case 99:
      result = 41;
      break;
    default:
      switch(v1)
      {
        case 1000:
          result = 42;
          break;
        case 1001:
          result = 43;
          break;
        case 1002:
          result = 44;
          break;
        case 1003:
          result = 45;
          break;
        case 1004:
          result = 46;
          break;
        case 1005:
          result = 47;
          break;
        case 1006:
          result = 48;
          break;
        case 1007:
          result = 49;
          break;
        case 1008:
          result = 50;
          break;
        case 1009:
          result = 51;
          break;
        case 1010:
          result = 52;
          break;
        default:
          if (v1 != 0xFFFF)
            goto LABEL_7;
          result = 53;
          break;
      }
      break;
  }
  return result;
}

unint64_t sub_10006ACFC()
{
  unint64_t result;

  result = qword_100405F10;
  if (!qword_100405F10)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for IEEE80211Status, &type metadata for IEEE80211Status);
    atomic_store(result, (unint64_t *)&qword_100405F10);
  }
  return result;
}

unint64_t sub_10006AD44()
{
  unint64_t result;

  result = qword_100405F18;
  if (!qword_100405F18)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for IEEE80211Reason, &type metadata for IEEE80211Reason);
    atomic_store(result, (unint64_t *)&qword_100405F18);
  }
  return result;
}

unint64_t sub_10006AD8C()
{
  unint64_t result;

  result = qword_100405F20;
  if (!qword_100405F20)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for IEEE80211StatusAndReason, &type metadata for IEEE80211StatusAndReason);
    atomic_store(result, (unint64_t *)&qword_100405F20);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for IEEE80211Status(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xCB)
    goto LABEL_17;
  if (a2 + 53 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 53) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 53;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 53;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 53;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x36;
  v8 = v6 - 54;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for IEEE80211Status(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 53 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 53) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xCB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xCA)
    return ((uint64_t (*)(void))((char *)&loc_10006AEAC + 4 * byte_10033BC42[v4]))();
  *a1 = a2 + 53;
  return ((uint64_t (*)(void))((char *)sub_10006AEE0 + 4 * byte_10033BC3D[v4]))();
}

uint64_t sub_10006AEE0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10006AEE8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10006AEF0);
  return result;
}

uint64_t sub_10006AEFC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10006AF04);
  *(_BYTE *)result = a2 + 53;
  return result;
}

uint64_t sub_10006AF08(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10006AF10(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for IEEE80211Status()
{
  return &type metadata for IEEE80211Status;
}

uint64_t getEnumTagSinglePayload for IEEE80211Reason(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xDF)
    goto LABEL_17;
  if (a2 + 33 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 33) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 33;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 33;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 33;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x22;
  v8 = v6 - 34;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for IEEE80211Reason(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 33 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 33) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xDF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xDE)
    return ((uint64_t (*)(void))((char *)&loc_10006B008 + 4 * byte_10033BC4C[v4]))();
  *a1 = a2 + 33;
  return ((uint64_t (*)(void))((char *)sub_10006B03C + 4 * byte_10033BC47[v4]))();
}

uint64_t sub_10006B03C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10006B044(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10006B04CLL);
  return result;
}

uint64_t sub_10006B058(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10006B060);
  *(_BYTE *)result = a2 + 33;
  return result;
}

uint64_t sub_10006B064(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10006B06C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for IEEE80211Reason()
{
  return &type metadata for IEEE80211Reason;
}

uint64_t getEnumTagSinglePayload for IEEE80211StatusAndReason(unsigned __int16 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xDF)
    goto LABEL_17;
  if (a2 + 65313 <= 0xFFFEFFFF)
    v2 = 2;
  else
    v2 = 4;
  if (a2 + 65313 < 0xFF0000)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 16)) - 65313;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
      return (*a1 | (v4 << 16)) - 65313;
    }
    v4 = *((unsigned __int8 *)a1 + 2);
    if (*((_BYTE *)a1 + 2))
      return (*a1 | (v4 << 16)) - 65313;
  }
LABEL_17:
  v6 = *((unsigned __int8 *)a1 + 1);
  v7 = v6 >= 0x22;
  v8 = v6 - 34;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for IEEE80211StatusAndReason(_WORD *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 65313 <= 0xFFFEFFFF)
    v3 = 2;
  else
    v3 = 4;
  if (a3 + 65313 < 0xFF0000)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xDF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xDE)
    return ((uint64_t (*)(void))((char *)&loc_10006B168 + 4 * byte_10033BC56[v4]))();
  *a1 = a2 - 223;
  return ((uint64_t (*)(void))((char *)sub_10006B19C + 4 * byte_10033BC51[v4]))();
}

uint64_t sub_10006B19C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 2) = v1;
  return result;
}

uint64_t sub_10006B1A4(uint64_t result, int a2)
{
  *(_WORD *)(result + 2) = 0;
  if (a2)
    JUMPOUT(0x10006B1ACLL);
  return result;
}

uint64_t sub_10006B1B8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 2) = 0;
  if (!a2)
    JUMPOUT(0x10006B1C0);
  *(_BYTE *)(result + 1) = a2 + 33;
  return result;
}

uint64_t sub_10006B1C4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_10006B1CC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 2) = v1;
  return result;
}

ValueMetadata *type metadata accessor for IEEE80211StatusAndReason()
{
  return &type metadata for IEEE80211StatusAndReason;
}

unint64_t sub_10006B1E8()
{
  unint64_t result;

  result = qword_100405F28;
  if (!qword_100405F28)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for IEEE80211Reason, &type metadata for IEEE80211Reason);
    atomic_store(result, (unint64_t *)&qword_100405F28);
  }
  return result;
}

unint64_t sub_10006B22C()
{
  unint64_t result;

  result = qword_100405F30;
  if (!qword_100405F30)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for IEEE80211Status, &type metadata for IEEE80211Status);
    atomic_store(result, (unint64_t *)&qword_100405F30);
  }
  return result;
}

void sub_10006B278(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[4];
  _QWORD v12[2];
  _QWORD __src[2];

  v11[2] = a3;
  v11[3] = a4;
  if ((a2 & 0x1000000000000000) != 0 || !(a2 & 0x2000000000000000 | a1 & 0x1000000000000000))
  {
    type metadata accessor for SymmetricKey(0);
    _StringGuts._slowWithCString<A>(_:)(a5, sub_10006CAB8, v11);
LABEL_7:
    swift_bridgeObjectRelease(a4);
    return;
  }
  if ((a2 & 0x2000000000000000) == 0)
  {
    if ((a1 & 0x1000000000000000) != 0)
      v8 = (_BYTE *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
    else
      v8 = (_BYTE *)_StringObject.sharedUTF8.getter(a1, a2);
    sub_10006C7EC(v8, a3, a4);
    goto LABEL_7;
  }
  __src[0] = a1;
  __src[1] = a2 & 0xFFFFFFFFFFFFFFLL;
  v9 = String.count.getter(a3, a4);
  v12[0] = sub_10021BD08(__src, v9);
  v12[1] = v10;
  SymmetricKey.init<A>(data:)(v12, &type metadata for Data, &protocol witness table for Data);
  swift_bridgeObjectRelease(a4);
}

uint64_t NANServiceName.string.getter(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRetain(a2);
  return a1;
}

CoreP2P::NANPassphrase __swiftcall NANPassphrase.init(_:)(CoreP2P::NANPassphrase result)
{
  uint64_t v1;

  v1 = HIBYTE(result.string._object) & 0xF;
  if (((uint64_t)result.string._object & 0x2000000000000000) == 0)
    v1 = result.string._countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  if (!v1)
    __break(1u);
  return result;
}

uint64_t NANPassphrase.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_bridgeObjectRetain(a3);
  String.hash(into:)(a1, a2, a3);
  return swift_bridgeObjectRelease(a3);
}

uint64_t static NANPassphrase.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1 == a3 && a2 == a4)
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a3, a4, 0);
}

Swift::Int NANPassphrase.hashValue.getter(uint64_t a1, uint64_t a2)
{
  _QWORD v5[9];

  Hasher.init(_seed:)(v5);
  swift_bridgeObjectRetain(a2);
  String.hash(into:)(v5, a1, a2);
  swift_bridgeObjectRelease(a2);
  return Hasher._finalize()();
}

Swift::Int sub_10006B4C0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[9];

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)(v4);
  swift_bridgeObjectRetain(v2);
  String.hash(into:)(v4, v1, v2);
  swift_bridgeObjectRelease(v2);
  return Hasher._finalize()();
}

uint64_t sub_10006B518(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;

  v4 = *v1;
  v3 = v1[1];
  swift_bridgeObjectRetain(v3);
  String.hash(into:)(a1, v4, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_10006B55C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[9];

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)(v4);
  swift_bridgeObjectRetain(v2);
  String.hash(into:)(v4, v1, v2);
  swift_bridgeObjectRelease(v2);
  return Hasher._finalize()();
}

uint64_t sub_10006B5B0(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *a1;
  v5 = a1[1];
  v6 = a2[1];
  if (v4 == *a2 && v5 == v6)
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *a2, v6, 0);
}

uint64_t NANPassphrase.description.getter(uint64_t a1, void *a2)
{
  Swift::String v4;
  Swift::String v5;
  _QWORD v7[2];

  _StringGuts.grow(_:)(16);
  swift_bridgeObjectRelease(0xE000000000000000);
  strcpy((char *)v7, "Passphrase: \"");
  swift_bridgeObjectRetain(a2);
  v4._countAndFlagsBits = a1;
  v4._object = a2;
  String.append(_:)(v4);
  swift_bridgeObjectRelease(a2);
  v5._countAndFlagsBits = 34;
  v5._object = (void *)0xE100000000000000;
  String.append(_:)(v5);
  return v7[0];
}

uint64_t NANPassphrase.customMirror.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  _QWORD *v15;
  _QWORD v16[2];

  v4 = type metadata accessor for Mirror.AncestorRepresentation(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin();
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012C44((uint64_t *)&unk_1004085C0);
  __chkstk_darwin();
  v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16[0] = a1;
  v16[1] = a2;
  v15 = _swiftEmptyArrayStorage;
  v10 = type metadata accessor for Mirror.DisplayStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for Mirror.AncestorRepresentation.generated(_:), v4);
  swift_bridgeObjectRetain(a2);
  v11 = sub_100012C44(&qword_100405B90);
  v12 = sub_1000687EC();
  return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)(v16, &v15, v9, v7, &type metadata for NANPassphrase, v11, v12);
}

uint64_t sub_10006B7CC()
{
  uint64_t *v0;
  uint64_t v1;
  void *v2;
  Swift::String v3;
  Swift::String v4;
  _QWORD v6[2];

  v1 = *v0;
  v2 = (void *)v0[1];
  _StringGuts.grow(_:)(16);
  swift_bridgeObjectRelease(0xE000000000000000);
  strcpy((char *)v6, "Passphrase: \"");
  swift_bridgeObjectRetain(v2);
  v3._countAndFlagsBits = v1;
  v3._object = v2;
  String.append(_:)(v3);
  swift_bridgeObjectRelease(v2);
  v4._countAndFlagsBits = 34;
  v4._object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  return v6[0];
}

uint64_t sub_10006B86C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v15;
  _QWORD *v16;
  _QWORD v17[2];

  v3 = type metadata accessor for Mirror.AncestorRepresentation(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin();
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012C44((uint64_t *)&unk_1004085C0);
  __chkstk_darwin();
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v1;
  v10 = v1[1];
  v17[0] = v9;
  v17[1] = v10;
  v16 = _swiftEmptyArrayStorage;
  v11 = type metadata accessor for Mirror.DisplayStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v8, 1, 1, v11);
  (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, enum case for Mirror.AncestorRepresentation.generated(_:), v3);
  swift_bridgeObjectRetain(v10);
  v12 = sub_100012C44(&qword_100405B90);
  v13 = sub_1000687EC();
  return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)(v17, &v16, v8, v6, a1, v12, v13);
}

uint64_t NANPassphrase.pmk(for:serviceName:publisherAddress:)(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  Swift::String v17;
  _QWORD *v18;
  __n128 v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[3];

  v26 = a5;
  v27 = a6;
  v25 = a4;
  v8 = type metadata accessor for SHA256Digest(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin();
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for SHA256(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin();
  v15 = (char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = swift_bridgeObjectRetain(a3);
  SHA256.init()(v16);
  v17 = String.lowercased()();
  swift_bridgeObjectRelease(a3);
  swift_bridgeObjectRetain(v17._object);
  sub_10017550C(v17._countAndFlagsBits, (uint64_t)v17._object, (uint64_t)v15, v17._countAndFlagsBits, (uint64_t)v17._object, v18);
  v19 = swift_bridgeObjectRelease(v17._object);
  SHA256.finalize()(v19);
  SHA256Digest.withUnsafeBytes<A>(_:)(v28, sub_100175E14, 0, &type metadata for Data);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  v20 = v28[0];
  v21 = v28[1];
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  if (((1 << a1) & 0x55) != 0)
    sub_10006BCA0(v26, v27, a1, v20, v21, v25 & 0xFFFFFFFFFFFFLL, &qword_100405EB8, (uint64_t)&off_1003D6C88, (uint64_t (*)(uint64_t))&type metadata accessor for SHA256, &qword_100405EC0, (uint64_t)&protocol conformance descriptor for SHA256);
  else
    sub_10006BCA0(v26, v27, a1, v20, v21, v25 & 0xFFFFFFFFFFFFLL, &qword_100405ED0, (uint64_t)&off_1003D6CB0, (uint64_t (*)(uint64_t))&type metadata accessor for SHA384, &qword_100405ED8, (uint64_t)&protocol conformance descriptor for SHA384);
  v23 = v22;
  sub_10000E614(v20, v21);
  return v23;
}

void NANPassphrase.pmk(for:serviceNameHash:publisherAddress:)(char a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v7;

  v7 = a4 & 0xFFFFFFFFFFFFLL;
  if (((1 << a1) & 0x55) != 0)
    sub_10006BCA0(a5, a6, a1, a2, a3, v7, &qword_100405EB8, (uint64_t)&off_1003D6C88, (uint64_t (*)(uint64_t))&type metadata accessor for SHA256, &qword_100405EC0, (uint64_t)&protocol conformance descriptor for SHA256);
  else
    sub_10006BCA0(a5, a6, a1, a2, a3, v7, &qword_100405ED0, (uint64_t)&off_1003D6CB0, (uint64_t (*)(uint64_t))&type metadata accessor for SHA384, &qword_100405ED8, (uint64_t)&protocol conformance descriptor for SHA384);
}

void sub_10006BCA0(uint64_t a1, uint64_t a2, char a3, uint64_t a4, unint64_t a5, unint64_t a6, uint64_t *a7, uint64_t a8, uint64_t (*a9)(uint64_t), unint64_t *a10, uint64_t a11)
{
  char v11;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t (*v38)(uint64_t);
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  uint64_t v47;
  _QWORD v48[2];
  uint64_t v49;
  void (*v50)(char *, uint64_t);
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  __int128 v63;
  uint64_t (*v64)(uint64_t);
  unint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;

  *(_QWORD *)&v63 = a8;
  v11 = a6;
  v65 = a10;
  v66 = a11;
  v64 = a9;
  v58 = a6 >> 8;
  v59 = a6 >> 16;
  v60 = a6 >> 24;
  v61 = HIDWORD(a6);
  v62 = a6 >> 40;
  v56 = sub_100012C44(a7);
  v67 = *(_QWORD *)(v56 - 8);
  __chkstk_darwin();
  v55 = (char *)v48 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = type metadata accessor for SymmetricKey(0);
  v48[1] = *(_QWORD *)(v49 - 8);
  __chkstk_darwin();
  v19 = (_QWORD *)((char *)v48 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  swift_bridgeObjectRetain(a2);
  sub_10006B278(a1, a2, a1, a2, v19);
  v20 = sub_100012C44(&qword_100403E88);
  v21 = swift_allocObject(v20, 34, 7);
  *(_OWORD *)(v21 + 16) = xmmword_10033C020;
  *(_BYTE *)(v21 + 32) = 0;
  *(_BYTE *)(v21 + 33) = a3 + 1;
  v22 = sub_1001068EC(v21);
  v24 = v23;
  swift_bridgeObjectRelease(v21);
  v70 = v22;
  v71 = v24;
  sub_100031FEC(a4, a5);
  sub_100031FEC(v22, v24);
  sub_1000FBDAC(a4, a5);
  sub_10000E614(a4, a5);
  sub_10000E614(v22, v24);
  v25 = v70;
  v26 = v71;
  v27 = swift_allocObject(v20, 38, 7);
  *(_OWORD *)(v27 + 16) = xmmword_10033B190;
  *(_BYTE *)(v27 + 32) = v11;
  *(_BYTE *)(v27 + 33) = v58;
  *(_BYTE *)(v27 + 34) = v59;
  *(_BYTE *)(v27 + 35) = v60;
  *(_BYTE *)(v27 + 36) = v61;
  *(_BYTE *)(v27 + 37) = v62;
  v28 = sub_1001068EC(v27);
  v30 = v29;
  swift_bridgeObjectRelease(v27);
  v68 = v25;
  v69 = v26;
  sub_100031FEC(v25, v26);
  sub_1000FBDAC(v28, v30);
  sub_10000E614(v28, v30);
  sub_10000E614(v25, v26);
  v31 = v68;
  v32 = v69;
  v33 = sub_1001068EC(v63);
  v35 = v34;
  v70 = v31;
  v71 = v32;
  sub_100031FEC(v31, v32);
  sub_1000FBDAC(v33, v35);
  sub_10000E614(v33, v35);
  sub_10000E614(v31, v32);
  v36 = v70;
  v37 = v71;
  v68 = v70;
  v69 = v71;
  v38 = v64;
  v39 = v64(0);
  v40 = sub_100011DE4(v65, v38, v66);
  v41 = sub_100068D00();
  v42 = v55;
  v54 = v19;
  v53 = v39;
  v52 = v40;
  v51 = v41;
  static HMAC.authenticationCode<A>(for:using:)(&v68, v19, v39, &type metadata for Data, v40, v41);
  sub_10000E614(v36, v37);
  v43 = v56;
  HashedAuthenticationCode.withUnsafeBytes<A>(_:)(&v70, sub_10006C85C, 0, v56, &type metadata for Data);
  v50 = *(void (**)(char *, uint64_t))(v67 + 8);
  v50(v42, v43);
  v44 = v70;
  v62 = v71;
  sub_100031FEC(v70, v71);
  v63 = xmmword_10033A100;
  v57 = 2;
  v45 = v62;
  v68 = v44;
  v69 = v62;
  v46 = v55;
  static HMAC.authenticationCode<A>(for:using:)(&v68, v54, v53, &type metadata for Data, v52, v51);
  v47 = v56;
  HashedAuthenticationCode.withUnsafeBytes<A>(_:)(&v68, sub_10006C85C, 0, v56, &type metadata for Data);
  v58 = 0;
  v50(v46, v47);
  sub_10000E614(v44, v45);
  v62 = v69;
  __asm { BR              X8 }
}

uint64_t sub_10006C0F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(v2 - 200);
  v4 = BYTE6(v3);
  if (!BYTE6(v3))
    JUMPOUT(0x10006C02CLL);
  v5 = *(_QWORD *)(v2 - 200);
  *(_QWORD *)(v2 - 152) = v4;
  *(_QWORD *)(v2 - 144) = v5 & 0x3FFFFFFFFFFFFFFFLL;
  *(_QWORD *)(v2 - 224) = v1 >> 32;
  *(_QWORD *)(v2 - 216) = BYTE6(v5);
  *(_QWORD *)(v2 - 208) = (int)v1;
  *(_QWORD *)(v2 - 168) = v0;
  *(_QWORD *)(v2 - 160) = v1;
  if (v4 <= 0)
  {
    __break(1u);
    JUMPOUT(0x10006C72CLL);
  }
  return ((uint64_t (*)(void))((char *)&loc_10006C184 + dword_10006C7CC[*(_QWORD *)(v2 - 104) >> 62]))();
}

uint64_t sub_10006C678()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (BYTE6(v1) != 32)
  {
    sub_10000E614(v0, v1);
    __break(1u);
  }
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v3 - 312) + 8))(*(_QWORD *)(v3 - 264), *(_QWORD *)(v3 - 304));
  sub_10000E614(v2, *(_QWORD *)(v3 - 200));
  sub_10000E614(*(_QWORD *)(v3 - 112), *(_QWORD *)(v3 - 104));
  return v0;
}

uint64_t sub_10006C7EC(_BYTE *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];

  v4 = String.count.getter(a2, a3);
  v7[0] = sub_10021BD08(a1, v4);
  v7[1] = v5;
  return SymmetricKey.init<A>(data:)(v7, &type metadata for Data, &protocol witness table for Data);
}

uint64_t sub_10006C85C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_10006C870(a1, a2, a3);
}

uint64_t sub_10006C870@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[5];

  v14[3] = &type metadata for UnsafeRawBufferPointer;
  v14[4] = &protocol witness table for UnsafeRawBufferPointer;
  v14[0] = a1;
  v14[1] = a2;
  v4 = sub_10003259C(v14, (uint64_t)&type metadata for UnsafeRawBufferPointer);
  v5 = (_BYTE *)*v4;
  if (*v4 && (v6 = (_BYTE *)v4[1], v7 = v6 - v5, v6 != v5))
  {
    if (v7 <= 14)
    {
      v8 = sub_10000EC20(v5, v6);
      v9 = v12 & 0xFFFFFFFFFFFFFFLL;
    }
    else if ((unint64_t)v7 >= 0x7FFFFFFF)
    {
      v8 = sub_1001067F4((uint64_t)v5, (uint64_t)v6);
      v9 = v13 | 0x8000000000000000;
    }
    else
    {
      v8 = sub_10010686C((uint64_t)v5, (uint64_t)v6);
      v9 = v11 | 0x4000000000000000;
    }
  }
  else
  {
    v8 = 0;
    v9 = 0xC000000000000000;
  }
  result = sub_100014430(v14);
  *a3 = v8;
  a3[1] = v9;
  return result;
}

unint64_t sub_10006C93C()
{
  unint64_t result;

  result = qword_100405F38;
  if (!qword_100405F38)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for NANPassphrase, &type metadata for NANPassphrase);
    atomic_store(result, (unint64_t *)&qword_100405F38);
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for NANServiceName(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t destroy for NANServiceName(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
}

_QWORD *assignWithCopy for NANServiceName(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = *a2;
  v3 = a2[1];
  v4 = a1[1];
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

_QWORD *assignWithTake for NANServiceName(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  v4 = a1[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for NANServiceName(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NANServiceName(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for NANPassphrase()
{
  return &type metadata for NANPassphrase;
}

uint64_t sub_10006CAB8(_BYTE *a1)
{
  uint64_t v1;

  return sub_10006C7EC(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t RadioResources.SymbolicChannel.Resolver.infraChannel.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3 & 0xFFFFFFFFFFFFLL;
}

uint64_t NANDiscoveryWindowStartEvent.channel.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a4 & 0xFFFFFFFFFFFFLL;
}

uint64_t WiFiNetwork.description.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  Swift::String v4;
  void *object;
  Swift::String v6;
  _QWORD v8[2];

  strcpy((char *)v8, "WiFiNetwork[");
  v4._countAndFlagsBits = Channel.description.getter(a4 & 0xFFFFFFFFFFFFLL);
  object = v4._object;
  String.append(_:)(v4);
  swift_bridgeObjectRelease(object);
  v6._countAndFlagsBits = 93;
  v6._object = (void *)0xE100000000000000;
  String.append(_:)(v6);
  return v8[0];
}

void WiFiNetwork.hash(into:)(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5)
{
  Swift::UInt8 v6;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  Swift::UInt v15;

  v6 = a4;
  v10 = a4 >> 8;
  v11 = a4 >> 16;
  v12 = a4 >> 24;
  v13 = HIDWORD(a4);
  v14 = a4 >> 40;
  swift_bridgeObjectRetain(a3);
  String.hash(into:)(a1, a2, a3);
  swift_bridgeObjectRelease(a3);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(v11);
  Hasher._combine(_:)(v12);
  Hasher._combine(_:)(v13);
  Hasher._combine(_:)(v14);
  Hasher._combine(_:)(a5);
  Hasher._combine(_:)(0x801004u >> ((a5 >> 29) & 0xF8));
  switch(BYTE5(a5))
  {
    case 2:
      v15 = 0;
      goto LABEL_8;
    case 3:
      v15 = 1;
      goto LABEL_8;
    case 4:
      v15 = 3;
      goto LABEL_8;
    case 5:
      v15 = 4;
      goto LABEL_8;
    case 6:
      v15 = 5;
LABEL_8:
      Hasher._combine(_:)(v15);
      break;
    default:
      Hasher._combine(_:)(2uLL);
      Hasher._combine(_:)(BYTE5(a5) & 1);
      break;
  }
}

uint64_t static WiFiNetwork.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_10006D6BC(a1, a2, a3 & 0xFFFFFFFFFFFFLL, a4 & 0xFFFFFFFFFFFFLL, a5, a6, a7 & 0xFFFFFFFFFFFFLL, a8 & 0xFFFFFFFFFFFFLL);
}

Swift::Int WiFiNetwork.hashValue.getter(uint64_t a1, uint64_t a2, unint64_t a3, unint64_t a4)
{
  Swift::UInt8 v5;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  Swift::UInt v13;
  _QWORD v15[9];

  v5 = a3;
  v8 = a3 >> 8;
  v9 = a3 >> 16;
  v10 = a3 >> 24;
  v11 = HIDWORD(a3);
  v12 = a3 >> 40;
  Hasher.init(_seed:)(v15);
  swift_bridgeObjectRetain(a2);
  String.hash(into:)(v15, a1, a2);
  swift_bridgeObjectRelease(a2);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  Hasher._combine(_:)(v11);
  Hasher._combine(_:)(v12);
  Hasher._combine(_:)(a4);
  Hasher._combine(_:)(0x801004u >> ((a4 >> 29) & 0xF8));
  switch(BYTE5(a4))
  {
    case 2:
      v13 = 0;
      goto LABEL_8;
    case 3:
      v13 = 1;
      goto LABEL_8;
    case 4:
      v13 = 3;
      goto LABEL_8;
    case 5:
      v13 = 4;
      goto LABEL_8;
    case 6:
      v13 = 5;
LABEL_8:
      Hasher._combine(_:)(v13);
      break;
    default:
      Hasher._combine(_:)(2uLL);
      Hasher._combine(_:)(BYTE5(a4) & 1);
      break;
  }
  return Hasher._finalize()();
}

Swift::Int sub_10006CE30()
{
  uint64_t v0;

  return WiFiNetwork.hashValue.getter(*(_QWORD *)v0, *(_QWORD *)(v0 + 8), *(unsigned int *)(v0 + 16) | ((unint64_t)*(unsigned __int8 *)(v0 + 20) << 32) | ((unint64_t)*(unsigned __int8 *)(v0 + 21) << 40), *(unsigned int *)(v0 + 24) | ((unint64_t)*(unsigned __int8 *)(v0 + 28) << 32) | ((unint64_t)*(unsigned __int8 *)(v0 + 29) << 40));
}

void sub_10006CE60(uint64_t a1)
{
  uint64_t v1;

  WiFiNetwork.hash(into:)(a1, *(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(unsigned int *)(v1 + 16) | ((unint64_t)*(unsigned __int8 *)(v1 + 20) << 32) | ((unint64_t)*(unsigned __int8 *)(v1 + 21) << 40), *(unsigned int *)(v1 + 24) | ((unint64_t)*(unsigned __int8 *)(v1 + 28) << 32) | ((unint64_t)*(unsigned __int8 *)(v1 + 29) << 40));
}

Swift::Int sub_10006CE90()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  Swift::UInt32 v3;
  Swift::UInt8 v4;
  Swift::UInt8 v5;
  Swift::UInt8 v6;
  Swift::UInt8 v7;
  Swift::UInt8 v8;
  Swift::UInt8 v9;
  Swift::UInt v10;
  char v12;
  int v13;
  _QWORD v14[9];

  v1 = *v0;
  v2 = v0[1];
  v3 = *((_DWORD *)v0 + 6);
  v12 = *((_BYTE *)v0 + 28);
  v13 = *((unsigned __int8 *)v0 + 29);
  v4 = *((_BYTE *)v0 + 16);
  v5 = *((_BYTE *)v0 + 17);
  v6 = *((_BYTE *)v0 + 18);
  v7 = *((_BYTE *)v0 + 19);
  v8 = *((_BYTE *)v0 + 20);
  v9 = *((_BYTE *)v0 + 21);
  Hasher.init(_seed:)(v14);
  swift_bridgeObjectRetain(v2);
  String.hash(into:)(v14, v1, v2);
  swift_bridgeObjectRelease(v2);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(0x801004u >> (8 * v12));
  switch(v13)
  {
    case 2:
      v10 = 0;
      goto LABEL_8;
    case 3:
      v10 = 1;
      goto LABEL_8;
    case 4:
      v10 = 3;
      goto LABEL_8;
    case 5:
      v10 = 4;
      goto LABEL_8;
    case 6:
      v10 = 5;
LABEL_8:
      Hasher._combine(_:)(v10);
      break;
    default:
      Hasher._combine(_:)(2uLL);
      Hasher._combine(_:)(v13 & 1);
      break;
  }
  return Hasher._finalize()();
}

uint64_t sub_10006D024()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  Swift::String v4;
  void *object;
  Swift::String v6;
  _QWORD v8[2];

  v1 = *(unsigned int *)(v0 + 24);
  v2 = *(unsigned __int8 *)(v0 + 28);
  v3 = *(unsigned __int8 *)(v0 + 29);
  strcpy((char *)v8, "WiFiNetwork[");
  v4._countAndFlagsBits = Channel.description.getter(v1 | (v2 << 32) | (v3 << 40));
  object = v4._object;
  String.append(_:)(v4);
  swift_bridgeObjectRelease(object);
  v6._countAndFlagsBits = 93;
  v6._object = (void *)0xE100000000000000;
  String.append(_:)(v6);
  return v8[0];
}

uint64_t sub_10006D0A4(uint64_t a1, uint64_t a2)
{
  return sub_10006D6BC(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(unsigned int *)(a1 + 16) | ((unint64_t)*(unsigned __int8 *)(a1 + 20) << 32) | ((unint64_t)*(unsigned __int8 *)(a1 + 21) << 40), *(unsigned int *)(a1 + 24) | ((unint64_t)*(unsigned __int8 *)(a1 + 28) << 32) | ((unint64_t)*(unsigned __int8 *)(a1 + 29) << 40), *(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(unsigned int *)(a2 + 16) | ((unint64_t)*(unsigned __int8 *)(a2 + 20) << 32) | ((unint64_t)*(unsigned __int8 *)(a2 + 21) << 40), *(unsigned int *)(a2 + 24) | ((unint64_t)*(unsigned __int8 *)(a2 + 28) << 32) | ((unint64_t)*(unsigned __int8 *)(a2 + 29) << 40));
}

BOOL static NANInternetSharingStatistics.Status.__derived_enum_equals(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void NANInternetSharingStatistics.Status.hash(into:)(uint64_t a1, char a2)
{
  Hasher._combine(_:)(a2 & 1);
}

Swift::Int NANInternetSharingStatistics.Status.hashValue.getter(char a1)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(a1 & 1);
  return Hasher._finalize()();
}

BOOL static AWDLPeer.Reachability.__derived_enum_equals(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void AWDLPeer.Reachability.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
  Hasher._combine(_:)(a2);
}

unint64_t sub_10006D1BC()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0xD000000000000012;
  if (*v0 != 1)
    v1 = 0x6669636570736E75;
  if (*v0)
    return v1;
  else
    return 0xD00000000000001ALL;
}

uint64_t sub_10006D224@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10006E52C(a1, a2);
  *a3 = result;
  return result;
}

void sub_10006D248(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_10006D254(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10006D88C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10006D27C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10006D88C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10006D2A4@<X0>(uint64_t a1@<X1>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = swift_bridgeObjectRelease(a1);
  *a2 = 1;
  return result;
}

uint64_t sub_10006D2D0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10006D958();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10006D2F8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10006D958();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10006D320(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10006D914();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10006D348(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10006D914();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10006D370(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10006D8D0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10006D398(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10006D8D0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t InfrastructureDisableReason.encode(to:)(_QWORD *a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  char v31;
  char v32;
  char v33;

  v30 = a2;
  v3 = sub_100012C44(&qword_100405F40);
  v27 = *(_QWORD *)(v3 - 8);
  v28 = v3;
  __chkstk_darwin();
  v26 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100012C44(&qword_100405F48);
  v24 = *(_QWORD *)(v5 - 8);
  v25 = v5;
  __chkstk_darwin();
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100012C44(&qword_100405F50);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin();
  v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100012C44(&qword_100405F58);
  v29 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin();
  v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = a1[3];
  v15 = a1[4];
  sub_10003259C(a1, v16);
  v17 = sub_10006D88C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for InfrastructureDisableReason.CodingKeys, &type metadata for InfrastructureDisableReason.CodingKeys, v17, v16, v15);
  if ((_BYTE)v30)
  {
    if (v30 == 1)
    {
      v32 = 1;
      v18 = sub_10006D914();
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for InfrastructureDisableReason.LowLatencyRequiredCodingKeys, &v32, v12, &type metadata for InfrastructureDisableReason.LowLatencyRequiredCodingKeys, v18);
      (*(void (**)(char *, uint64_t))(v24 + 8))(v7, v25);
    }
    else
    {
      v33 = 2;
      v20 = sub_10006D8D0();
      v21 = v26;
      KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for InfrastructureDisableReason.UnspecifiedCodingKeys, &v33, v12, &type metadata for InfrastructureDisableReason.UnspecifiedCodingKeys, v20);
      (*(void (**)(char *, uint64_t))(v27 + 8))(v21, v28);
    }
  }
  else
  {
    v31 = 0;
    v19 = sub_10006D958();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for InfrastructureDisableReason.InfrastructureRelayEnabledCodingKeys, &v31, v12, &type metadata for InfrastructureDisableReason.InfrastructureRelayEnabledCodingKeys, v19);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v29 + 8))(v14, v12);
}

Swift::Int AWDLPeer.Reachability.hashValue.getter(unsigned __int8 a1)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(a1);
  return Hasher._finalize()();
}

_QWORD *InfrastructureDisableReason.init(from:)(_QWORD *a1)
{
  return sub_10006D99C(a1);
}

_QWORD *sub_10006D67C@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  _QWORD *result;

  result = sub_10006D99C(a1);
  if (!v2)
    *a2 = (_BYTE)result;
  return result;
}

uint64_t sub_10006D6A4(_QWORD *a1)
{
  unsigned __int8 *v1;

  return InfrastructureDisableReason.encode(to:)(a1, *v1);
}

uint64_t sub_10006D6BC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8)
{
  char v12;
  uint64_t result;
  BOOL v14;
  int v15;
  __int16 v16;
  int v17;
  __int16 v18;

  if (a1 == a5 && a2 == a6
    || (v12 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a5, a6, 0), result = 0, (v12 & 1) != 0))
  {
    LOWORD(v17) = a3;
    BYTE2(v17) = BYTE2(a3);
    HIBYTE(v17) = BYTE3(a3);
    LOBYTE(v18) = BYTE4(a3);
    HIBYTE(v18) = BYTE5(a3);
    LOWORD(v15) = a7;
    BYTE2(v15) = BYTE2(a7);
    HIBYTE(v15) = BYTE3(a7);
    LOBYTE(v16) = BYTE4(a7);
    HIBYTE(v16) = BYTE5(a7);
    v14 = v17 == v15 && v18 == v16;
    if (v14
      && (_DWORD)a4 == (_DWORD)a8
      && ((0x801004u >> ((a4 >> 29) & 0xF8)) & 0xFFC) == ((0x801004u >> ((a8 >> 29) & 0xF8)) & 0xFFC))
    {
      switch(BYTE5(a4))
      {
        case 2:
          if (BYTE5(a8) != 2)
            return 0;
          break;
        case 3:
          if (BYTE5(a8) != 3)
            return 0;
          break;
        case 4:
          if (BYTE5(a8) != 4)
            return 0;
          break;
        case 5:
          if (BYTE5(a8) != 5)
            return 0;
          break;
        case 6:
          if (BYTE5(a8) != 6)
            return 0;
          break;
        default:
          if (BYTE5(a8) - 2 < 5 || ((a4 & 0x10000000000) == 0) == ((a8 >> 40) & 1))
            return 0;
          break;
      }
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

unint64_t sub_10006D88C()
{
  unint64_t result;

  result = qword_100405F60;
  if (!qword_100405F60)
  {
    result = swift_getWitnessTable(&unk_10033C690, &type metadata for InfrastructureDisableReason.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100405F60);
  }
  return result;
}

unint64_t sub_10006D8D0()
{
  unint64_t result;

  result = qword_100405F68;
  if (!qword_100405F68)
  {
    result = swift_getWitnessTable(&unk_10033C640, &type metadata for InfrastructureDisableReason.UnspecifiedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100405F68);
  }
  return result;
}

unint64_t sub_10006D914()
{
  unint64_t result;

  result = qword_100405F70;
  if (!qword_100405F70)
  {
    result = swift_getWitnessTable(&unk_10033C5F0, &type metadata for InfrastructureDisableReason.LowLatencyRequiredCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100405F70);
  }
  return result;
}

unint64_t sub_10006D958()
{
  unint64_t result;

  result = qword_100405F78;
  if (!qword_100405F78)
  {
    result = swift_getWitnessTable(&unk_10033C5A0, &type metadata for InfrastructureDisableReason.InfrastructureRelayEnabledCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100405F78);
  }
  return result;
}

_QWORD *sub_10006D99C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  __n128 v28;
  unint64_t v30;
  unint64_t v31;
  __n128 v32;
  __n128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  _QWORD *v43;
  char v44;
  char v45;
  char v46;

  v40 = sub_100012C44(&qword_100405FE0);
  v38 = *(_QWORD *)(v40 - 8);
  __chkstk_darwin();
  v42 = (char *)&v34 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = sub_100012C44(&qword_100405FE8);
  v36 = *(_QWORD *)(v39 - 8);
  __chkstk_darwin();
  v41 = (char *)&v34 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = sub_100012C44(&qword_100405FF0);
  v4 = *(_QWORD *)(v37 - 8);
  __chkstk_darwin();
  v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100012C44(&qword_100405FF8);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin();
  v10 = (uint64_t *)((char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = a1[3];
  v12 = a1[4];
  sub_10003259C(a1, v11);
  v13 = sub_10006D88C();
  v14 = v43;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for InfrastructureDisableReason.CodingKeys, &type metadata for InfrastructureDisableReason.CodingKeys, v13, v11, v12);
  if (v14)
    goto LABEL_7;
  v34 = v4;
  v35 = v8;
  v15 = v42;
  v43 = a1;
  v16 = v10;
  v17 = KeyedDecodingContainer.allKeys.getter(v7);
  v18 = v17;
  v19 = v7;
  if (*(_QWORD *)(v17 + 16) != 1)
  {
    v23 = v17;
    v24 = type metadata accessor for DecodingError(0);
    swift_allocError(v24, &protocol witness table for DecodingError, 0, 0);
    v10 = v25;
    sub_100012C44(&qword_100406000);
    *v10 = &type metadata for InfrastructureDisableReason;
    v26 = KeyedDecodingContainer.codingPath.getter(v19);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)(v26, 0xD00000000000002BLL, 0x80000001003644E0, 0);
    v27 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v24 - 8) + 104))(v10, enum case for DecodingError.typeMismatch(_:), v24);
    swift_willThrow(v27);
    v28 = swift_bridgeObjectRelease(v23);
    (*(void (**)(_QWORD *, uint64_t, __n128))(v35 + 8))(v16, v19, v28);
    a1 = v43;
LABEL_7:
    sub_100014430(a1);
    return v10;
  }
  v10 = (_QWORD *)*(unsigned __int8 *)(v17 + 32);
  if (*(_BYTE *)(v17 + 32))
  {
    if ((_DWORD)v10 == 1)
    {
      v45 = 1;
      v20 = sub_10006D914();
      v21 = v41;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for InfrastructureDisableReason.LowLatencyRequiredCodingKeys, &v45, v7, &type metadata for InfrastructureDisableReason.LowLatencyRequiredCodingKeys, v20);
      v22 = v35;
      (*(void (**)(char *, uint64_t))(v36 + 8))(v21, v39);
    }
    else
    {
      v46 = 2;
      v31 = sub_10006D8D0();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for InfrastructureDisableReason.UnspecifiedCodingKeys, &v46, v7, &type metadata for InfrastructureDisableReason.UnspecifiedCodingKeys, v31);
      v22 = v35;
      (*(void (**)(char *, uint64_t))(v38 + 8))(v15, v40);
    }
    v33 = swift_bridgeObjectRelease(v18);
    (*(void (**)(_QWORD *, uint64_t, __n128))(v22 + 8))(v16, v19, v33);
  }
  else
  {
    v44 = 0;
    v30 = sub_10006D958();
    KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(&type metadata for InfrastructureDisableReason.InfrastructureRelayEnabledCodingKeys, &v44, v7, &type metadata for InfrastructureDisableReason.InfrastructureRelayEnabledCodingKeys, v30);
    (*(void (**)(char *, uint64_t))(v34 + 8))(v6, v37);
    v32 = swift_bridgeObjectRelease(v18);
    (*(void (**)(_QWORD *, uint64_t, __n128))(v35 + 8))(v16, v7, v32);
  }
  sub_100014430(v43);
  return v10;
}

unint64_t sub_10006DD78()
{
  unint64_t result;

  result = qword_100405F80;
  if (!qword_100405F80)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for WiFiNetwork, &type metadata for WiFiNetwork);
    atomic_store(result, (unint64_t *)&qword_100405F80);
  }
  return result;
}

unint64_t sub_10006DDC0()
{
  unint64_t result;

  result = qword_100405F88;
  if (!qword_100405F88)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for AutoJoinState, &type metadata for AutoJoinState);
    atomic_store(result, (unint64_t *)&qword_100405F88);
  }
  return result;
}

unint64_t sub_10006DE08()
{
  unint64_t result;

  result = qword_100405F90;
  if (!qword_100405F90)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for InfrastructureDisableReason, &type metadata for InfrastructureDisableReason);
    atomic_store(result, (unint64_t *)&qword_100405F90);
  }
  return result;
}

uint64_t initializeWithCopy for WiFiNetwork(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_WORD *)(a1 + 20) = *(_WORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_WORD *)(a1 + 28) = *(_WORD *)(a2 + 28);
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t assignWithCopy for WiFiNetwork(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  *(_BYTE *)(a1 + 18) = *(_BYTE *)(a2 + 18);
  *(_BYTE *)(a1 + 19) = *(_BYTE *)(a2 + 19);
  *(_BYTE *)(a1 + 20) = *(_BYTE *)(a2 + 20);
  *(_BYTE *)(a1 + 21) = *(_BYTE *)(a2 + 21);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 28) = *(_BYTE *)(a2 + 28);
  *(_BYTE *)(a1 + 29) = *(_BYTE *)(a2 + 29);
  return a1;
}

__n128 initializeWithCopy for NANDiscoveryWindowStartEvent(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 14) = *(_OWORD *)(a2 + 14);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for WiFiNetwork(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_WORD *)(a1 + 20) = *(_WORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_WORD *)(a1 + 28) = *(_WORD *)(a2 + 28);
  return a1;
}

uint64_t getEnumTagSinglePayload for WiFiNetwork(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 30))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for WiFiNetwork(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_WORD *)(result + 28) = 0;
    *(_DWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 30) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 30) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for WiFiNetwork()
{
  return &type metadata for WiFiNetwork;
}

uint64_t storeEnumTagSinglePayload for AutoJoinState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10006E080 + 4 * byte_10033C119[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10006E0B4 + 4 * byte_10033C114[v4]))();
}

uint64_t sub_10006E0B4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10006E0BC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10006E0C4);
  return result;
}

uint64_t sub_10006E0D0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10006E0D8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_10006E0DC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10006E0E4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AutoJoinState()
{
  return &type metadata for AutoJoinState;
}

ValueMetadata *type metadata accessor for InfrastructureDisableReason()
{
  return &type metadata for InfrastructureDisableReason;
}

uint64_t getEnumTagSinglePayload for NonNANOperatingChannelInformation.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s7CoreP2P27InfrastructureDisableReasonOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_10006E1F4 + 4 * byte_10033C123[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10006E228 + 4 * byte_10033C11E[v4]))();
}

uint64_t sub_10006E228(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10006E230(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10006E238);
  return result;
}

uint64_t sub_10006E244(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10006E24CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_10006E250(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10006E258(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for InfrastructureDisableReason.CodingKeys()
{
  return &type metadata for InfrastructureDisableReason.CodingKeys;
}

ValueMetadata *type metadata accessor for InfrastructureDisableReason.InfrastructureRelayEnabledCodingKeys()
{
  return &type metadata for InfrastructureDisableReason.InfrastructureRelayEnabledCodingKeys;
}

ValueMetadata *type metadata accessor for InfrastructureDisableReason.LowLatencyRequiredCodingKeys()
{
  return &type metadata for InfrastructureDisableReason.LowLatencyRequiredCodingKeys;
}

ValueMetadata *type metadata accessor for InfrastructureDisableReason.UnspecifiedCodingKeys()
{
  return &type metadata for InfrastructureDisableReason.UnspecifiedCodingKeys;
}

unint64_t sub_10006E2A8()
{
  unint64_t result;

  result = qword_100405F98;
  if (!qword_100405F98)
  {
    result = swift_getWitnessTable(&unk_10033C578, &type metadata for InfrastructureDisableReason.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100405F98);
  }
  return result;
}

unint64_t sub_10006E2F0()
{
  unint64_t result;

  result = qword_100405FA0;
  if (!qword_100405FA0)
  {
    result = swift_getWitnessTable(&unk_10033C498, &type metadata for InfrastructureDisableReason.InfrastructureRelayEnabledCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100405FA0);
  }
  return result;
}

unint64_t sub_10006E338()
{
  unint64_t result;

  result = qword_100405FA8;
  if (!qword_100405FA8)
  {
    result = swift_getWitnessTable(&unk_10033C4C0, &type metadata for InfrastructureDisableReason.InfrastructureRelayEnabledCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100405FA8);
  }
  return result;
}

unint64_t sub_10006E380()
{
  unint64_t result;

  result = qword_100405FB0;
  if (!qword_100405FB0)
  {
    result = swift_getWitnessTable(&unk_10033C448, &type metadata for InfrastructureDisableReason.LowLatencyRequiredCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100405FB0);
  }
  return result;
}

unint64_t sub_10006E3C8()
{
  unint64_t result;

  result = qword_100405FB8;
  if (!qword_100405FB8)
  {
    result = swift_getWitnessTable(&unk_10033C470, &type metadata for InfrastructureDisableReason.LowLatencyRequiredCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100405FB8);
  }
  return result;
}

unint64_t sub_10006E410()
{
  unint64_t result;

  result = qword_100405FC0;
  if (!qword_100405FC0)
  {
    result = swift_getWitnessTable("11\n", &type metadata for InfrastructureDisableReason.UnspecifiedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100405FC0);
  }
  return result;
}

unint64_t sub_10006E458()
{
  unint64_t result;

  result = qword_100405FC8;
  if (!qword_100405FC8)
  {
    result = swift_getWitnessTable(&unk_10033C420, &type metadata for InfrastructureDisableReason.UnspecifiedCodingKeys);
    atomic_store(result, (unint64_t *)&qword_100405FC8);
  }
  return result;
}

unint64_t sub_10006E4A0()
{
  unint64_t result;

  result = qword_100405FD0;
  if (!qword_100405FD0)
  {
    result = swift_getWitnessTable(&unk_10033C4E8, &type metadata for InfrastructureDisableReason.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100405FD0);
  }
  return result;
}

unint64_t sub_10006E4E8()
{
  unint64_t result;

  result = qword_100405FD8;
  if (!qword_100405FD8)
  {
    result = swift_getWitnessTable(&unk_10033C510, &type metadata for InfrastructureDisableReason.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100405FD8);
  }
  return result;
}

uint64_t sub_10006E52C(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v6;
  char v7;

  if (a1 == 0xD00000000000001ALL)
  {
    v4 = 0x80000001003644A0;
    if (a2 == 0x80000001003644A0)
      goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001ALL, 0x80000001003644A0, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (a1 == 0xD000000000000012)
  {
    v6 = 0x80000001003644C0;
    if (a2 == 0x80000001003644C0)
      goto LABEL_10;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, 0x80000001003644C0, a1, a2, 0) & 1) != 0)
  {
    v6 = a2;
LABEL_10:
    swift_bridgeObjectRelease(v6);
    return 1;
  }
  if (a1 == 0x6669636570736E75 && a2 == 0xEB00000000646569)
  {
    swift_bridgeObjectRelease(0xEB00000000646569);
    return 2;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6669636570736E75, 0xEB00000000646569, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_10006E698(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t result;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v27 = a3;
  v26 = a2;
  v25 = sub_100012C44(&qword_100406008);
  __chkstk_darwin();
  v6 = (unsigned __int8 *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v8 = (char *)&v23 - v7;
  v9 = *(_QWORD *)(a1 + 64);
  v23 = a1 + 64;
  v10 = 1 << *(_BYTE *)(a1 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & v9;
  v24 = (unint64_t)(v10 + 63) >> 6;
  result = swift_bridgeObjectRetain(a1);
  v14 = 0;
  while (v12)
  {
    v15 = __clz(__rbit64(v12));
    v12 &= v12 - 1;
    v16 = v15 | (v14 << 6);
LABEL_5:
    v17 = *(_QWORD *)(a1 + 56);
    v18 = *(_BYTE *)(*(_QWORD *)(a1 + 48) + v16);
    v19 = type metadata accessor for NANGenericServiceProtocol.Attribute(0);
    sub_1000637E0(v17 + *(_QWORD *)(*(_QWORD *)(v19 - 8) + 72) * v16, (uint64_t)&v8[*(int *)(v25 + 48)], type metadata accessor for NANGenericServiceProtocol.Attribute);
    *v8 = v18;
    sub_100063EB8((uint64_t)v8, (uint64_t)v6, &qword_100406008);
    sub_100074544(v6, v26, v27);
    result = sub_100033A84((uint64_t)v6, &qword_100406008);
    if (v3)
      return swift_release(a1);
  }
  if (__OFADD__(v14++, 1))
  {
    __break(1u);
    goto LABEL_26;
  }
  if (v14 >= v24)
    return swift_release(a1);
  v21 = *(_QWORD *)(v23 + 8 * v14);
  if (v21)
  {
LABEL_19:
    v12 = (v21 - 1) & v21;
    v16 = __clz(__rbit64(v21)) + (v14 << 6);
    goto LABEL_5;
  }
  v22 = v14 + 1;
  if (v14 + 1 >= v24)
    return swift_release(a1);
  v21 = *(_QWORD *)(v23 + 8 * v22);
  if (v21)
    goto LABEL_18;
  v22 = v14 + 2;
  if (v14 + 2 >= v24)
    return swift_release(a1);
  v21 = *(_QWORD *)(v23 + 8 * v22);
  if (v21)
    goto LABEL_18;
  v22 = v14 + 3;
  if (v14 + 3 >= v24)
    return swift_release(a1);
  v21 = *(_QWORD *)(v23 + 8 * v22);
  if (v21)
    goto LABEL_18;
  v22 = v14 + 4;
  if (v14 + 4 >= v24)
    return swift_release(a1);
  v21 = *(_QWORD *)(v23 + 8 * v22);
  if (v21)
  {
LABEL_18:
    v14 = v22;
    goto LABEL_19;
  }
  while (1)
  {
    v14 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v14 >= v24)
      return swift_release(a1);
    v21 = *(_QWORD *)(v23 + 8 * v14);
    ++v22;
    if (v21)
      goto LABEL_19;
  }
LABEL_26:
  __break(1u);
  return result;
}

void *NANGenericServiceProtocol.AttributeFilter.all.unsafeMutableAddressor()
{
  return &static NANGenericServiceProtocol.AttributeFilter.all;
}

void *NANGenericServiceProtocol.AttributeFilter.customAttributes.unsafeMutableAddressor()
{
  return &static NANGenericServiceProtocol.AttributeFilter.customAttributes;
}

void sub_10006E918(uint64_t a1)
{
  char *v2;

  type metadata accessor for NANGenericServiceProtocol.Attribute(0);
  __chkstk_darwin();
  __chkstk_darwin();
  type metadata accessor for String.Encoding(0);
  __chkstk_darwin();
  sub_100012C44(&qword_100404E70);
  __chkstk_darwin();
  type metadata accessor for NWEndpoint.Port(0);
  __chkstk_darwin();
  v2 = (char *)&loc_10006EA54 + *((int *)qword_10006F0E8 + sub_100078B0C(a1));
  __asm { BR              X10 }
}

uint64_t sub_10006EA64()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;

  v6 = *(_QWORD *)(v5 - 72);
  v7 = *(_QWORD *)(v5 - 168);
  sub_100212D04(v6, v0);
  if (v7)
  {
    v9 = v6;
  }
  else
  {
    NWEndpoint.Port.init(rawValue:)(v8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) != 1)
    {
      sub_10000E614(*(_QWORD *)(v5 - 72), v0);
      v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32);
      v13(v4, v3, v1);
      v14 = *(_QWORD *)(v5 - 176);
      v13(v14, v4, v1);
      return swift_storeEnumTagMultiPayload(v14, *(_QWORD *)(v5 - 184), 0);
    }
    sub_100033A84(v3, &qword_100404E70);
    v10 = sub_100012C84();
    v11 = swift_allocError(&type metadata for WiFiError, v10, 0, 0);
    *(_OWORD *)v12 = xmmword_100337850;
    *(_BYTE *)(v12 + 16) = 2;
    swift_willThrow(v11);
    v9 = *(_QWORD *)(v5 - 72);
  }
  return sub_10000E614(v9, v0);
}

void sub_10006F13C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t (*v5)(_QWORD);
  char *v6;
  uint64_t v7;

  v1 = v0;
  v2 = type metadata accessor for NANGenericServiceProtocol.Attribute(0);
  __chkstk_darwin();
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000637E0(v1, (uint64_t)v4, v5);
  v6 = (char *)sub_10006F1C8 + 4 * byte_10033C6F0[swift_getEnumCaseMultiPayload(v4, v2)];
  __asm { BR              X10 }
}

uint64_t sub_10006F1C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_10000E614(*(_QWORD *)v1, *(_QWORD *)(v1 + 8));
  v2 = type metadata accessor for NWEndpoint.Port(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v0, 1, 1, v2);
}

void sub_10006F228()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = type metadata accessor for NWEndpoint.Port(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 32))(v0, v1, v2);
  JUMPOUT(0x10006F210);
}

void sub_10006F264()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t (*v4)(_QWORD);
  char *v5;
  uint64_t v6;

  v1 = type metadata accessor for NANGenericServiceProtocol.Attribute(0);
  __chkstk_darwin();
  v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000637E0(v0, (uint64_t)v3, v4);
  v5 = (char *)sub_10006F2E8 + 4 * byte_10033C6F9[swift_getEnumCaseMultiPayload(v3, v1)];
  __asm { BR              X10 }
}

uint64_t sub_10006F2E8()
{
  uint64_t v0;

  sub_10000E614(*(_QWORD *)v0, *(_QWORD *)(v0 + 8));
  return 2;
}

void sub_10006F328()
{
  JUMPOUT(0x10006F314);
}

void sub_10006F330()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t (*v4)(_QWORD);
  char *v5;
  uint64_t v6;

  v1 = type metadata accessor for NANGenericServiceProtocol.Attribute(0);
  __chkstk_darwin();
  v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000637E0(v0, (uint64_t)v3, v4);
  v5 = (char *)sub_10006F3C0 + 4 * byte_10033C702[swift_getEnumCaseMultiPayload(v3, v1)];
  __asm { BR              X10 }
}

uint64_t sub_10006F3C0()
{
  uint64_t v0;

  sub_10000E614(*(_QWORD *)v0, *(_QWORD *)(v0 + 8));
  return 0;
}

void sub_10006F40C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t (*v4)(_QWORD);
  char *v5;
  uint64_t v6;

  v1 = type metadata accessor for NANGenericServiceProtocol.Attribute(0);
  __chkstk_darwin();
  v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000637E0(v0, (uint64_t)v3, v4);
  v5 = (char *)sub_10006F49C + 4 * byte_10033C70B[swift_getEnumCaseMultiPayload(v3, v1)];
  __asm { BR              X10 }
}

uint64_t sub_10006F49C()
{
  uint64_t v0;

  sub_10000E614(*(_QWORD *)v0, *(_QWORD *)(v0 + 8));
  return 0;
}

void sub_10006F4E0()
{
  JUMPOUT(0x10006F4CCLL);
}

void sub_10006F4E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t (*v5)(_QWORD);
  char *v6;
  uint64_t v7;

  v1 = v0;
  v2 = type metadata accessor for NANGenericServiceProtocol.Attribute(0);
  __chkstk_darwin();
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000637E0(v1, (uint64_t)v4, v5);
  v6 = (char *)sub_10006F580 + 4 * byte_10033C714[swift_getEnumCaseMultiPayload(v4, v2)];
  __asm { BR              X10 }
}

void sub_10006F580()
{
  _OWORD *v0;
  _OWORD *v1;

  *v0 = *v1;
}

void sub_10006F5C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t (*v5)(_QWORD);
  char *v6;
  uint64_t v7;

  v1 = v0;
  v2 = type metadata accessor for NANGenericServiceProtocol.Attribute(0);
  __chkstk_darwin();
  v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000637E0(v1, (uint64_t)v4, v5);
  v6 = (char *)sub_10006F654 + 4 * byte_10033C71D[swift_getEnumCaseMultiPayload(v4, v2)];
  __asm { BR              X10 }
}

uint64_t sub_10006F654()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_10000E614(*(_QWORD *)v1, *(_QWORD *)(v1 + 8));
  v2 = type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v0, 1, 1, v2);
}

void sub_10006F6B4()
{
  uint64_t v0;
  uint64_t v1;

  sub_100033AC0(v1, v0, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
  type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
  JUMPOUT(0x10006F698);
}

void sub_10006F6E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t (*v4)(_QWORD);
  char *v5;
  uint64_t v6;

  type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
  __chkstk_darwin();
  type metadata accessor for NWEndpoint.Port(0);
  __chkstk_darwin();
  v1 = type metadata accessor for NANGenericServiceProtocol.Attribute(0);
  __chkstk_darwin();
  v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000637E0(v0, (uint64_t)v3, v4);
  v5 = (char *)sub_10006F7F4 + 4 * byte_10033C726[swift_getEnumCaseMultiPayload(v3, v1)];
  __asm { BR              X10 }
}

uint64_t sub_10006F7F4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *v0;
  v3 = v0[1];
  sub_100031FEC(*v0, v3);
  sub_100032030(0, 0xE000000000000000, v2, v3);
  v5 = v4;
  v7 = v6;
  sub_10000E614(v2, v3);
  *(_QWORD *)(v1 - 88) = &type metadata for String;
  *(_QWORD *)(v1 - 112) = v5;
  *(_QWORD *)(v1 - 104) = v7;
  Mirror.init(reflecting:)(v1 - 112);
  return sub_10000E614(v2, v3);
}

void sub_10006F9C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t (*v4)(_QWORD);
  char *v5;
  uint64_t v6;

  type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
  __chkstk_darwin();
  type metadata accessor for NWEndpoint.Port(0);
  __chkstk_darwin();
  v1 = type metadata accessor for NANGenericServiceProtocol.Attribute(0);
  __chkstk_darwin();
  v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000637E0(v0, (uint64_t)v3, v4);
  v5 = (char *)sub_10006FAC8 + 4 * byte_10033C72F[swift_getEnumCaseMultiPayload(v3, v1)];
  __asm { BR              X10 }
}

uint64_t sub_10006FAC8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v2, v3, v0);
  Hasher._combine(_:)(0);
  v5 = sub_100011DE4(&qword_100406108, (uint64_t (*)(uint64_t))&type metadata accessor for NWEndpoint.Port, (uint64_t)&protocol conformance descriptor for NWEndpoint.Port);
  dispatch thunk of Hashable.hash(into:)(v1, v0, v5);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v2, v0);
}

Swift::Int sub_10006FCE8()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  sub_10006F9C8();
  return Hasher._finalize()();
}

Swift::Int sub_10006FD28()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  sub_10006F9C8();
  return Hasher._finalize()();
}

uint64_t sub_10006FD68(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10006FD94 + 4 * byte_10033C738[a1]))(1953656656, 0xE400000000000000);
}

unint64_t sub_10006FD94()
{
  return 0xD000000000000012;
}

uint64_t sub_10006FDB0()
{
  return 0x2065636976726553;
}

uint64_t sub_10006FDD0()
{
  return 0x65636E6174736E49;
}

uint64_t sub_10006FDF4()
{
  return 0x666E492074786554;
}

uint64_t sub_10006FE10()
{
  return 1145656661;
}

uint64_t sub_10006FE1C()
{
  return 1651469378;
}

uint64_t sub_10006FE28()
{
  return 0x5320726F646E6556;
}

BOOL sub_10006FE4C(_BYTE *a1, _BYTE *a2)
{
  return (0xDD06050403020100 >> (8 * *a1)) == (0xDD06050403020100 >> (8 * *a2));
}

uint64_t sub_10006FE88@<X0>(unsigned __int8 *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_100078B0C(*a1);
  *a2 = result;
  return result;
}

void sub_10006FEB0(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = 0xDD06050403020100 >> (8 * *v1);
}

Swift::Int sub_10006FED4()
{
  char *v0;
  char v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(0xDD06050403020100 >> (8 * v1));
  return Hasher._finalize()();
}

void sub_10006FF2C()
{
  _BYTE *v0;

  Hasher._combine(_:)(0xDD06050403020100 >> (8 * *v0));
}

Swift::Int sub_10006FF6C()
{
  char *v0;
  char v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(0xDD06050403020100 >> (8 * v1));
  return Hasher._finalize()();
}

uint64_t sub_10006FFC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10007B934();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_10007001C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10007B934();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_100070068(uint64_t a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v13;
  char v14;

  v3 = type metadata accessor for Mirror.AncestorRepresentation(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin();
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012C44((uint64_t *)&unk_1004085C0);
  __chkstk_darwin();
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *v1;
  v13 = _swiftEmptyArrayStorage;
  v9 = type metadata accessor for Mirror.DisplayStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, enum case for Mirror.AncestorRepresentation.generated(_:), v3);
  v10 = sub_100012C44(&qword_100405B90);
  v11 = sub_100011770((unint64_t *)&qword_10040C3E0, &qword_100405B90, (const char *)&protocol conformance descriptor for [A]);
  return Mirror.init<A, B>(_:children:displayStyle:ancestorRepresentation:)(&v14, &v13, v8, v6, a1, v10, v11);
}

uint64_t sub_1000701BC()
{
  unsigned __int8 *v0;

  return sub_10006FD68(*v0);
}

BOOL NANGenericServiceProtocol.isEmpty.getter(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16) == 0;
}

CoreP2P::NANGenericServiceProtocol __swiftcall NANGenericServiceProtocol.init()()
{
  return (CoreP2P::NANGenericServiceProtocol)sub_100031A88((uint64_t)_swiftEmptyArrayStorage);
}

uint64_t NANGenericServiceProtocol.port.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  char v10;
  uint64_t v12;
  uint64_t v13;

  v4 = *(_QWORD *)(type metadata accessor for NANGenericServiceProtocol.Attribute(0) - 8);
  __chkstk_darwin();
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v8 = (char *)&v13 - v7;
  if (*(_QWORD *)(a1 + 16) && (v9 = sub_10002D744(0), (v10 & 1) != 0))
  {
    sub_1000637E0(*(_QWORD *)(a1 + 56) + *(_QWORD *)(v4 + 72) * v9, (uint64_t)v6, type metadata accessor for NANGenericServiceProtocol.Attribute);
    sub_100033AC0((uint64_t)v6, (uint64_t)v8, type metadata accessor for NANGenericServiceProtocol.Attribute);
    sub_10006F13C();
    return sub_100063824((uint64_t)v8, type metadata accessor for NANGenericServiceProtocol.Attribute);
  }
  else
  {
    v12 = type metadata accessor for NWEndpoint.Port(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(a2, 1, 1, v12);
  }
}

uint64_t NANGenericServiceProtocol.port.setter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v2 = type metadata accessor for NWEndpoint.Port(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin();
  v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012C44(&qword_100404E70);
  __chkstk_darwin();
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012C44(&qword_100404EE8);
  __chkstk_darwin();
  v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v11 = (char *)&v15 - v10;
  sub_100033B48(a1, (uint64_t)v7, &qword_100404E70);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v7, 1, v2) == 1)
  {
    v12 = type metadata accessor for NANGenericServiceProtocol.Attribute(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v7, v2);
    (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v11, v5, v2);
    v13 = type metadata accessor for NANGenericServiceProtocol.Attribute(0);
    swift_storeEnumTagMultiPayload(v11, v13, 0);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v11, 0, 1, v13);
  }
  sub_100033B48((uint64_t)v11, (uint64_t)v9, &qword_100404EE8);
  sub_10002548C((uint64_t)v9, 0);
  sub_100033A84(a1, &qword_100404E70);
  return sub_100033A84((uint64_t)v11, &qword_100404EE8);
}

void (*NANGenericServiceProtocol.port.modify(uint64_t **a1))(uint64_t a1, char a2)
{
  uint64_t *v1;
  size_t v3;
  uint64_t *v4;

  *a1 = v1;
  v3 = *(_QWORD *)(*(_QWORD *)(sub_100012C44(&qword_100404E70) - 8) + 64);
  a1[1] = (uint64_t *)malloc(v3);
  v4 = (uint64_t *)malloc(v3);
  a1[2] = v4;
  NANGenericServiceProtocol.port.getter(*v1, (uint64_t)v4);
  return sub_100070570;
}

void sub_100070570(uint64_t a1, char a2)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 8);
  v3 = *(void **)(a1 + 16);
  if ((a2 & 1) != 0)
  {
    sub_100033B48(*(_QWORD *)(a1 + 16), (uint64_t)v2, &qword_100404E70);
    NANGenericServiceProtocol.port.setter((uint64_t)v2);
    sub_100033A84((uint64_t)v3, &qword_100404E70);
  }
  else
  {
    NANGenericServiceProtocol.port.setter(*(_QWORD *)(a1 + 16));
  }
  free(v3);
  free(v2);
}

uint64_t NANGenericServiceProtocol.transportProtocol.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v2 = *(_QWORD *)(type metadata accessor for NANGenericServiceProtocol.Attribute(0) - 8);
  __chkstk_darwin();
  v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v6 = (char *)&v12 - v5;
  if (!*(_QWORD *)(a1 + 16))
    return 2;
  v7 = sub_10002D744(1);
  if ((v8 & 1) == 0)
    return 2;
  sub_1000637E0(*(_QWORD *)(a1 + 56) + *(_QWORD *)(v2 + 72) * v7, (uint64_t)v4, type metadata accessor for NANGenericServiceProtocol.Attribute);
  sub_100033AC0((uint64_t)v4, (uint64_t)v6, type metadata accessor for NANGenericServiceProtocol.Attribute);
  sub_10006F264();
  v10 = v9;
  sub_100063824((uint64_t)v6, type metadata accessor for NANGenericServiceProtocol.Attribute);
  return v10;
}

uint64_t NANGenericServiceProtocol.transportProtocol.setter(unsigned __int8 a1)
{
  int v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v2 = a1;
  sub_100012C44(&qword_100404EE8);
  __chkstk_darwin();
  v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v6 = (char *)&v10 - v5;
  if (v2 == 2)
  {
    v7 = type metadata accessor for NANGenericServiceProtocol.Attribute(0);
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  }
  else
  {
    *v6 = a1 & 1;
    v8 = type metadata accessor for NANGenericServiceProtocol.Attribute(0);
    swift_storeEnumTagMultiPayload(v6, v8, 1);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v6, 0, 1, v8);
  }
  sub_100033B48((uint64_t)v6, (uint64_t)v4, &qword_100404EE8);
  sub_10002548C((uint64_t)v4, 1);
  return sub_100033A84((uint64_t)v6, &qword_100404EE8);
}

void (*NANGenericServiceProtocol.transportProtocol.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t *v1;
  _QWORD *v3;
  size_t v4;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = *(_QWORD *)(*(_QWORD *)(sub_100012C44(&qword_100404EE8) - 8) + 64);
  v3[1] = malloc(v4);
  v3[2] = malloc(v4);
  v3[3] = malloc(v4);
  *((_BYTE *)v3 + 32) = NANGenericServiceProtocol.transportProtocol.getter(*v1);
  return sub_10007086C;
}

void sub_10007086C(uint64_t a1, char a2)
{
  _QWORD *v2;
  int v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;

  v2 = *(_QWORD **)a1;
  v3 = *(unsigned __int8 *)(*(_QWORD *)a1 + 32);
  if ((a2 & 1) != 0)
  {
    v4 = (_BYTE *)v2[1];
    if (v3 == 2)
    {
      v5 = type metadata accessor for NANGenericServiceProtocol.Attribute(0);
      (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
    }
    else
    {
      *v4 = v3 & 1;
      v8 = type metadata accessor for NANGenericServiceProtocol.Attribute(0);
      swift_storeEnumTagMultiPayload(v4, v8, 1);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v4, 0, 1, v8);
    }
    v9 = (void *)v2[2];
    v10 = (void *)v2[3];
    v11 = v2[1];
    sub_100033B48(v11, (uint64_t)v9, &qword_100404EE8);
    sub_10002548C((uint64_t)v9, 1);
    v12 = (void *)v11;
  }
  else
  {
    v6 = (_BYTE *)v2[3];
    if (v3 == 2)
    {
      v7 = type metadata accessor for NANGenericServiceProtocol.Attribute(0);
      (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
    }
    else
    {
      *v6 = v3 & 1;
      v13 = type metadata accessor for NANGenericServiceProtocol.Attribute(0);
      swift_storeEnumTagMultiPayload(v6, v13, 1);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v6, 0, 1, v13);
    }
    v9 = (void *)v2[2];
    v11 = v2[3];
    v12 = (void *)v2[1];
    sub_100033B48(v11, (uint64_t)v9, &qword_100404EE8);
    sub_10002548C((uint64_t)v9, 1);
    v10 = (void *)v11;
  }
  sub_100033A84(v11, &qword_100404EE8);
  free(v10);
  free(v9);
  free(v12);
  free(v2);
}

uint64_t NANGenericServiceProtocol.serviceName.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v2 = *(_QWORD *)(type metadata accessor for NANGenericServiceProtocol.Attribute(0) - 8);
  __chkstk_darwin();
  v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v6 = (char *)&v12 - v5;
  if (!*(_QWORD *)(a1 + 16))
    return 0;
  v7 = sub_10002D744(2);
  if ((v8 & 1) == 0)
    return 0;
  sub_1000637E0(*(_QWORD *)(a1 + 56) + *(_QWORD *)(v2 + 72) * v7, (uint64_t)v4, type metadata accessor for NANGenericServiceProtocol.Attribute);
  sub_100033AC0((uint64_t)v4, (uint64_t)v6, type metadata accessor for NANGenericServiceProtocol.Attribute);
  sub_10006F330();
  v10 = v9;
  sub_100063824((uint64_t)v6, type metadata accessor for NANGenericServiceProtocol.Attribute);
  return v10;
}

uint64_t NANGenericServiceProtocol.serviceName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  sub_100012C44(&qword_100404EE8);
  __chkstk_darwin();
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v7 = (uint64_t *)((char *)&v11 - v6);
  if (a2)
  {
    *v7 = a1;
    v7[1] = a2;
    v8 = type metadata accessor for NANGenericServiceProtocol.Attribute(0);
    swift_storeEnumTagMultiPayload(v7, v8, 2);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 0, 1, v8);
  }
  else
  {
    v9 = type metadata accessor for NANGenericServiceProtocol.Attribute(0);
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v7, 1, 1, v9);
  }
  sub_100033B48((uint64_t)v7, (uint64_t)v5, &qword_100404EE8);
  sub_10002548C((uint64_t)v5, 2);
  return sub_100033A84((uint64_t)v7, &qword_100404EE8);
}

void (*NANGenericServiceProtocol.serviceName.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t *v1;
  _QWORD *v3;
  size_t v4;
  uint64_t v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[2] = v1;
  v4 = *(_QWORD *)(*(_QWORD *)(sub_100012C44(&qword_100404EE8) - 8) + 64);
  v3[3] = malloc(v4);
  v3[4] = malloc(v4);
  v3[5] = malloc(v4);
  *v3 = NANGenericServiceProtocol.serviceName.getter(*v1);
  v3[1] = v5;
  return sub_100070C9C;
}

void sub_100070C9C(uint64_t a1, char a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;

  v2 = *(_QWORD **)a1;
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  if ((a2 & 1) != 0)
  {
    v4 = (_QWORD *)v2[3];
    if (v3)
    {
      *v4 = *v2;
      v4[1] = v3;
      v5 = type metadata accessor for NANGenericServiceProtocol.Attribute(0);
      swift_storeEnumTagMultiPayload(v4, v5, 2);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 0, 1, v5);
    }
    else
    {
      v8 = type metadata accessor for NANGenericServiceProtocol.Attribute(0);
      (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v4, 1, 1, v8);
    }
    v10 = (void *)v2[4];
    v9 = (void *)v2[5];
    v11 = (void *)v2[3];
    sub_100033B48((uint64_t)v11, (uint64_t)v10, &qword_100404EE8);
    swift_bridgeObjectRetain(v3);
    sub_10002548C((uint64_t)v10, 2);
    sub_100033A84((uint64_t)v11, &qword_100404EE8);
    swift_bridgeObjectRelease(v2[1]);
  }
  else
  {
    v6 = (_QWORD *)v2[5];
    if (v3)
    {
      *v6 = *v2;
      v6[1] = v3;
      v7 = type metadata accessor for NANGenericServiceProtocol.Attribute(0);
      swift_storeEnumTagMultiPayload(v6, v7, 2);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 0, 1, v7);
    }
    else
    {
      v12 = type metadata accessor for NANGenericServiceProtocol.Attribute(0);
      (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v6, 1, 1, v12);
    }
    v10 = (void *)v2[4];
    v9 = (void *)v2[5];
    v11 = (void *)v2[3];
    sub_100033B48((uint64_t)v9, (uint64_t)v10, &qword_100404EE8);
    sub_10002548C((uint64_t)v10, 2);
    sub_100033A84((uint64_t)v9, &qword_100404EE8);
  }
  free(v9);
  free(v10);
  free(v11);
  free(v2);
}

uint64_t NANGenericServiceProtocol.instanceName.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v2 = *(_QWORD *)(type metadata accessor for NANGenericServiceProtocol.Attribute(0) - 8);
  __chkstk_darwin();
  v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v6 = (char *)&v12 - v5;
  if (!*(_QWORD *)(a1 + 16))
    return 0;
  v7 = sub_10002D744(3);
  if ((v8 & 1) == 0)
    return 0;
  sub_1000637E0(*(_QWORD *)(a1 + 56) + *(_QWORD *)(v2 + 72) * v7, (uint64_t)v4, type metadata accessor for NANGenericServiceProtocol.Attribute);
  sub_100033AC0((uint64_t)v4, (uint64_t)v6, type metadata accessor for NANGenericServiceProtocol.Attribute);
  sub_10006F40C();
  v10 = v9;
  sub_100063824((uint64_t)v6, type metadata accessor for NANGenericServiceProtocol.Attribute);
  return v10;
}

uint64_t NANGenericServiceProtocol.instanceName.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  sub_100012C44(&qword_100404EE8);
  __chkstk_darwin();
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v7 = (uint64_t *)((char *)&v11 - v6);
  if (a2)
  {
    *v7 = a1;
    v7[1] = a2;
    v8 = type metadata accessor for NANGenericServiceProtocol.Attribute(0);
    swift_storeEnumTagMultiPayload(v7, v8, 3);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 0, 1, v8);
  }
  else
  {
    v9 = type metadata accessor for NANGenericServiceProtocol.Attribute(0);
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v7, 1, 1, v9);
  }
  sub_100033B48((uint64_t)v7, (uint64_t)v5, &qword_100404EE8);
  sub_10002548C((uint64_t)v5, 3);
  return sub_100033A84((uint64_t)v7, &qword_100404EE8);
}

void (*NANGenericServiceProtocol.instanceName.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t *v1;
  _QWORD *v3;
  size_t v4;
  uint64_t v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[2] = v1;
  v4 = *(_QWORD *)(*(_QWORD *)(sub_100012C44(&qword_100404EE8) - 8) + 64);
  v3[3] = malloc(v4);
  v3[4] = malloc(v4);
  v3[5] = malloc(v4);
  *v3 = NANGenericServiceProtocol.instanceName.getter(*v1);
  v3[1] = v5;
  return sub_1000710E0;
}

void sub_1000710E0(uint64_t a1, char a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;

  v2 = *(_QWORD **)a1;
  v3 = *(_QWORD *)(*(_QWORD *)a1 + 8);
  if ((a2 & 1) != 0)
  {
    v4 = (_QWORD *)v2[3];
    if (v3)
    {
      *v4 = *v2;
      v4[1] = v3;
      v5 = type metadata accessor for NANGenericServiceProtocol.Attribute(0);
      swift_storeEnumTagMultiPayload(v4, v5, 3);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 0, 1, v5);
    }
    else
    {
      v8 = type metadata accessor for NANGenericServiceProtocol.Attribute(0);
      (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v4, 1, 1, v8);
    }
    v10 = (void *)v2[4];
    v9 = (void *)v2[5];
    v11 = (void *)v2[3];
    sub_100033B48((uint64_t)v11, (uint64_t)v10, &qword_100404EE8);
    swift_bridgeObjectRetain(v3);
    sub_10002548C((uint64_t)v10, 3);
    sub_100033A84((uint64_t)v11, &qword_100404EE8);
    swift_bridgeObjectRelease(v2[1]);
  }
  else
  {
    v6 = (_QWORD *)v2[5];
    if (v3)
    {
      *v6 = *v2;
      v6[1] = v3;
      v7 = type metadata accessor for NANGenericServiceProtocol.Attribute(0);
      swift_storeEnumTagMultiPayload(v6, v7, 3);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 0, 1, v7);
    }
    else
    {
      v12 = type metadata accessor for NANGenericServiceProtocol.Attribute(0);
      (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v6, 1, 1, v12);
    }
    v10 = (void *)v2[4];
    v9 = (void *)v2[5];
    v11 = (void *)v2[3];
    sub_100033B48((uint64_t)v9, (uint64_t)v10, &qword_100404EE8);
    sub_10002548C((uint64_t)v10, 3);
    sub_100033A84((uint64_t)v9, &qword_100404EE8);
  }
  free(v9);
  free(v10);
  free(v11);
  free(v2);
}

uint64_t NANGenericServiceProtocol.textInfo.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  unint64_t v7;
  char v8;
  uint64_t v10;

  v2 = *(_QWORD *)(type metadata accessor for NANGenericServiceProtocol.Attribute(0) - 8);
  __chkstk_darwin();
  v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v6 = (char *)&v10 - v5;
  if (!*(_QWORD *)(a1 + 16))
    return 0;
  v7 = sub_10002D744(4);
  if ((v8 & 1) == 0)
    return 0;
  sub_1000637E0(*(_QWORD *)(a1 + 56) + *(_QWORD *)(v2 + 72) * v7, (uint64_t)v4, type metadata accessor for NANGenericServiceProtocol.Attribute);
  sub_100033AC0((uint64_t)v4, (uint64_t)v6, type metadata accessor for NANGenericServiceProtocol.Attribute);
  sub_10006F4E8();
  sub_100063824((uint64_t)v6, type metadata accessor for NANGenericServiceProtocol.Attribute);
  return v10;
}

uint64_t NANGenericServiceProtocol.textInfo.setter(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  sub_100012C44(&qword_100404EE8);
  __chkstk_darwin();
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v7 = (uint64_t *)((char *)&v11 - v6);
  if (a2 >> 60 == 15)
  {
    v8 = type metadata accessor for NANGenericServiceProtocol.Attribute(0);
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
  }
  else
  {
    *v7 = a1;
    v7[1] = a2;
    v9 = type metadata accessor for NANGenericServiceProtocol.Attribute(0);
    swift_storeEnumTagMultiPayload(v7, v9, 4);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v7, 0, 1, v9);
  }
  sub_100033B48((uint64_t)v7, (uint64_t)v5, &qword_100404EE8);
  sub_10002548C((uint64_t)v5, 4);
  return sub_100033A84((uint64_t)v7, &qword_100404EE8);
}

void (*NANGenericServiceProtocol.textInfo.modify(_QWORD *a1))(uint64_t **a1, char a2)
{
  uint64_t *v1;
  _QWORD *v3;
  size_t v4;
  uint64_t v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[2] = v1;
  v4 = *(_QWORD *)(*(_QWORD *)(sub_100012C44(&qword_100404EE8) - 8) + 64);
  v3[3] = malloc(v4);
  v3[4] = malloc(v4);
  v3[5] = malloc(v4);
  *v3 = NANGenericServiceProtocol.textInfo.getter(*v1);
  v3[1] = v5;
  return sub_100071528;
}

void sub_100071528(uint64_t **a1, char a2)
{
  uint64_t *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;

  v2 = *a1;
  if ((a2 & 1) != 0)
  {
    v3 = *v2;
    v4 = v2[1];
    v5 = (uint64_t *)v2[3];
    if (v4 >> 60 == 15)
    {
      v6 = type metadata accessor for NANGenericServiceProtocol.Attribute(0);
      (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
    }
    else
    {
      *v5 = v3;
      v5[1] = v4;
      v10 = type metadata accessor for NANGenericServiceProtocol.Attribute(0);
      swift_storeEnumTagMultiPayload(v5, v10, 4);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v5, 0, 1, v10);
    }
    v12 = (void *)v2[4];
    v11 = (void *)v2[5];
    v13 = (void *)v2[3];
    sub_100033B48((uint64_t)v13, (uint64_t)v12, &qword_100404EE8);
    sub_1000339F4(v3, v4);
    sub_10002548C((uint64_t)v12, 4);
    sub_100033A84((uint64_t)v13, &qword_100404EE8);
    sub_10000E658(*v2, v2[1]);
  }
  else
  {
    v7 = v2[1];
    v8 = (uint64_t *)v2[5];
    if (v7 >> 60 == 15)
    {
      v9 = type metadata accessor for NANGenericServiceProtocol.Attribute(0);
      (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
    }
    else
    {
      *v8 = *v2;
      v8[1] = v7;
      v14 = type metadata accessor for NANGenericServiceProtocol.Attribute(0);
      swift_storeEnumTagMultiPayload(v8, v14, 4);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v8, 0, 1, v14);
    }
    v12 = (void *)v2[4];
    v11 = (void *)v2[5];
    v13 = (void *)v2[3];
    sub_100033B48((uint64_t)v11, (uint64_t)v12, &qword_100404EE8);
    sub_10002548C((uint64_t)v12, 4);
    sub_100033A84((uint64_t)v11, &qword_100404EE8);
  }
  free(v11);
  free(v12);
  free(v13);
  free(v2);
}

uint64_t NANGenericServiceProtocol.blob.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  unint64_t v7;
  char v8;
  uint64_t v10;

  v2 = *(_QWORD *)(type metadata accessor for NANGenericServiceProtocol.Attribute(0) - 8);
  __chkstk_darwin();
  v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v6 = (char *)&v10 - v5;
  if (!*(_QWORD *)(a1 + 16))
    return 0;
  v7 = sub_10002D744(6);
  if ((v8 & 1) == 0)
    return 0;
  sub_1000637E0(*(_QWORD *)(a1 + 56) + *(_QWORD *)(v2 + 72) * v7, (uint64_t)v4, type metadata accessor for NANGenericServiceProtocol.Attribute);
  sub_100033AC0((uint64_t)v4, (uint64_t)v6, type metadata accessor for NANGenericServiceProtocol.Attribute);
  sub_10006F4E8();
  sub_100063824((uint64_t)v6, type metadata accessor for NANGenericServiceProtocol.Attribute);
  return v10;
}

uint64_t NANGenericServiceProtocol.blob.setter(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  sub_100012C44(&qword_100404EE8);
  __chkstk_darwin();
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v7 = (uint64_t *)((char *)&v11 - v6);
  if (a2 >> 60 == 15)
  {
    v8 = type metadata accessor for NANGenericServiceProtocol.Attribute(0);
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
  }
  else
  {
    *v7 = a1;
    v7[1] = a2;
    v9 = type metadata accessor for NANGenericServiceProtocol.Attribute(0);
    swift_storeEnumTagMultiPayload(v7, v9, 6);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v7, 0, 1, v9);
  }
  sub_100033B48((uint64_t)v7, (uint64_t)v5, &qword_100404EE8);
  sub_10002548C((uint64_t)v5, 6);
  return sub_100033A84((uint64_t)v7, &qword_100404EE8);
}

void (*NANGenericServiceProtocol.blob.modify(_QWORD *a1))(uint64_t **a1, char a2)
{
  uint64_t *v1;
  _QWORD *v3;
  size_t v4;
  uint64_t v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[2] = v1;
  v4 = *(_QWORD *)(*(_QWORD *)(sub_100012C44(&qword_100404EE8) - 8) + 64);
  v3[3] = malloc(v4);
  v3[4] = malloc(v4);
  v3[5] = malloc(v4);
  *v3 = NANGenericServiceProtocol.blob.getter(*v1);
  v3[1] = v5;
  return sub_100071984;
}

void sub_100071984(uint64_t **a1, char a2)
{
  uint64_t *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;

  v2 = *a1;
  if ((a2 & 1) != 0)
  {
    v3 = *v2;
    v4 = v2[1];
    v5 = (uint64_t *)v2[3];
    if (v4 >> 60 == 15)
    {
      v6 = type metadata accessor for NANGenericServiceProtocol.Attribute(0);
      (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
    }
    else
    {
      *v5 = v3;
      v5[1] = v4;
      v10 = type metadata accessor for NANGenericServiceProtocol.Attribute(0);
      swift_storeEnumTagMultiPayload(v5, v10, 6);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v5, 0, 1, v10);
    }
    v12 = (void *)v2[4];
    v11 = (void *)v2[5];
    v13 = (void *)v2[3];
    sub_100033B48((uint64_t)v13, (uint64_t)v12, &qword_100404EE8);
    sub_1000339F4(v3, v4);
    sub_10002548C((uint64_t)v12, 6);
    sub_100033A84((uint64_t)v13, &qword_100404EE8);
    sub_10000E658(*v2, v2[1]);
  }
  else
  {
    v7 = v2[1];
    v8 = (uint64_t *)v2[5];
    if (v7 >> 60 == 15)
    {
      v9 = type metadata accessor for NANGenericServiceProtocol.Attribute(0);
      (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
    }
    else
    {
      *v8 = *v2;
      v8[1] = v7;
      v14 = type metadata accessor for NANGenericServiceProtocol.Attribute(0);
      swift_storeEnumTagMultiPayload(v8, v14, 6);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v8, 0, 1, v14);
    }
    v12 = (void *)v2[4];
    v11 = (void *)v2[5];
    v13 = (void *)v2[3];
    sub_100033B48((uint64_t)v11, (uint64_t)v12, &qword_100404EE8);
    sub_10002548C((uint64_t)v12, 6);
    sub_100033A84((uint64_t)v11, &qword_100404EE8);
  }
  free(v11);
  free(v12);
  free(v13);
  free(v2);
}

uint64_t NANGenericServiceProtocol.uuid.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  unint64_t v7;
  char v8;
  uint64_t v10;

  v2 = *(_QWORD *)(type metadata accessor for NANGenericServiceProtocol.Attribute(0) - 8);
  __chkstk_darwin();
  v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v6 = (char *)&v10 - v5;
  if (!*(_QWORD *)(a1 + 16))
    return 0;
  v7 = sub_10002D744(5);
  if ((v8 & 1) == 0)
    return 0;
  sub_1000637E0(*(_QWORD *)(a1 + 56) + *(_QWORD *)(v2 + 72) * v7, (uint64_t)v4, type metadata accessor for NANGenericServiceProtocol.Attribute);
  sub_100033AC0((uint64_t)v4, (uint64_t)v6, type metadata accessor for NANGenericServiceProtocol.Attribute);
  sub_10006F4E8();
  sub_100063824((uint64_t)v6, type metadata accessor for NANGenericServiceProtocol.Attribute);
  return v10;
}

uint64_t NANGenericServiceProtocol.uuid.setter(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  sub_100012C44(&qword_100404EE8);
  __chkstk_darwin();
  v5 = (char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v7 = (uint64_t *)((char *)&v11 - v6);
  if (a2 >> 60 == 15)
  {
    v8 = type metadata accessor for NANGenericServiceProtocol.Attribute(0);
    (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
  }
  else
  {
    *v7 = a1;
    v7[1] = a2;
    v9 = type metadata accessor for NANGenericServiceProtocol.Attribute(0);
    swift_storeEnumTagMultiPayload(v7, v9, 5);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v7, 0, 1, v9);
  }
  sub_100033B48((uint64_t)v7, (uint64_t)v5, &qword_100404EE8);
  sub_10002548C((uint64_t)v5, 5);
  return sub_100033A84((uint64_t)v7, &qword_100404EE8);
}

void (*NANGenericServiceProtocol.uuid.modify(_QWORD *a1))(uint64_t **a1, char a2)
{
  uint64_t *v1;
  _QWORD *v3;
  size_t v4;
  uint64_t v5;

  v3 = malloc(0x30uLL);
  *a1 = v3;
  v3[2] = v1;
  v4 = *(_QWORD *)(*(_QWORD *)(sub_100012C44(&qword_100404EE8) - 8) + 64);
  v3[3] = malloc(v4);
  v3[4] = malloc(v4);
  v3[5] = malloc(v4);
  *v3 = NANGenericServiceProtocol.uuid.getter(*v1);
  v3[1] = v5;
  return sub_100071DE0;
}

void sub_100071DE0(uint64_t **a1, char a2)
{
  uint64_t *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;

  v2 = *a1;
  if ((a2 & 1) != 0)
  {
    v3 = *v2;
    v4 = v2[1];
    v5 = (uint64_t *)v2[3];
    if (v4 >> 60 == 15)
    {
      v6 = type metadata accessor for NANGenericServiceProtocol.Attribute(0);
      (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
    }
    else
    {
      *v5 = v3;
      v5[1] = v4;
      v10 = type metadata accessor for NANGenericServiceProtocol.Attribute(0);
      swift_storeEnumTagMultiPayload(v5, v10, 5);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v5, 0, 1, v10);
    }
    v12 = (void *)v2[4];
    v11 = (void *)v2[5];
    v13 = (void *)v2[3];
    sub_100033B48((uint64_t)v13, (uint64_t)v12, &qword_100404EE8);
    sub_1000339F4(v3, v4);
    sub_10002548C((uint64_t)v12, 5);
    sub_100033A84((uint64_t)v13, &qword_100404EE8);
    sub_10000E658(*v2, v2[1]);
  }
  else
  {
    v7 = v2[1];
    v8 = (uint64_t *)v2[5];
    if (v7 >> 60 == 15)
    {
      v9 = type metadata accessor for NANGenericServiceProtocol.Attribute(0);
      (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
    }
    else
    {
      *v8 = *v2;
      v8[1] = v7;
      v14 = type metadata accessor for NANGenericServiceProtocol.Attribute(0);
      swift_storeEnumTagMultiPayload(v8, v14, 5);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v8, 0, 1, v14);
    }
    v12 = (void *)v2[4];
    v11 = (void *)v2[5];
    v13 = (void *)v2[3];
    sub_100033B48((uint64_t)v11, (uint64_t)v12, &qword_100404EE8);
    sub_10002548C((uint64_t)v12, 5);
    sub_100033A84((uint64_t)v11, &qword_100404EE8);
  }
  free(v11);
  free(v12);
  free(v13);
  free(v2);
}

uint64_t sub_100071FA8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  char v12;
  int *v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v4 = *(_QWORD *)(type metadata accessor for NANGenericServiceProtocol.Attribute(0) - 8);
  __chkstk_darwin();
  v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v8 = (char *)&v22 - v7;
  sub_100012C44(&qword_100406288);
  __chkstk_darwin();
  v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)(a1 + 16) && (v11 = sub_10002D744(7), (v12 & 1) != 0))
  {
    sub_1000637E0(*(_QWORD *)(a1 + 56) + *(_QWORD *)(v4 + 72) * v11, (uint64_t)v6, type metadata accessor for NANGenericServiceProtocol.Attribute);
    sub_100033AC0((uint64_t)v6, (uint64_t)v8, type metadata accessor for NANGenericServiceProtocol.Attribute);
    sub_10006F5C8();
    sub_100063824((uint64_t)v8, type metadata accessor for NANGenericServiceProtocol.Attribute);
    v13 = (int *)type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(*((_QWORD *)v13 - 1) + 48))(v10, 1, v13) != 1)
      return sub_100033AC0((uint64_t)v10, a2, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
  }
  else
  {
    v13 = (int *)type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
    (*(void (**)(char *, uint64_t, uint64_t, int *))(*((_QWORD *)v13 - 1) + 56))(v10, 1, 1, v13);
  }
  *(_WORD *)a2 = 0;
  *(_BYTE *)(a2 + 2) = 1;
  type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
  v15 = a2 + v13[6];
  v16 = type metadata accessor for P256.KeyAgreement.PublicKey(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v15, 1, 1, v16);
  *(_OWORD *)(a2 + v13[7]) = xmmword_10033C6E0;
  *(_OWORD *)(a2 + v13[8]) = xmmword_10033C6E0;
  *(_OWORD *)(a2 + v13[9]) = xmmword_10033C6E0;
  v17 = a2 + v13[10];
  v18 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v17, 1, 1, v18);
  *(_QWORD *)(a2 + v13[11]) = _swiftEmptyArrayStorage;
  v19 = a2 + v13[12];
  v20 = type metadata accessor for NANInternetSharingStatistics.Requester(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v19, 1, 1, v20);
  v21 = a2 + v13[13];
  *(_QWORD *)v21 = 0;
  *(_QWORD *)(v21 + 8) = 0;
  *(_QWORD *)(v21 + 16) = 0;
  *(_BYTE *)(v21 + 24) = 1;
  return sub_100033A84((uint64_t)v10, &qword_100406288);
}

uint64_t sub_100072218(char a1)
{
  uint64_t *v1;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v11;

  sub_100012C44(&qword_100404EE8);
  __chkstk_darwin();
  v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v6 = (char *)&v11 - v5;
  type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
  __chkstk_darwin();
  v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100071FA8(*v1, (uint64_t)v8);
  *v8 = a1;
  sub_1000637E0((uint64_t)v8, (uint64_t)v6, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
  v9 = type metadata accessor for NANGenericServiceProtocol.Attribute(0);
  swift_storeEnumTagMultiPayload(v6, v9, 7);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v6, 0, 1, v9);
  sub_100033B48((uint64_t)v6, (uint64_t)v4, &qword_100404EE8);
  sub_10002548C((uint64_t)v4, 7);
  sub_100063824((uint64_t)v8, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
  return sub_100033A84((uint64_t)v6, &qword_100404EE8);
}

uint64_t sub_100072370(int a1, char a2)
{
  uint64_t *v2;
  uint64_t v5;
  unsigned __int8 *v6;
  int v7;
  char v8;
  char v9;
  char v10;
  char v11;
  char v12;
  uint64_t v14;

  type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
  __chkstk_darwin();
  v6 = (unsigned __int8 *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100071FA8(*v2, (uint64_t)v6);
  v7 = *v6;
  sub_100063824((uint64_t)v6, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
  if ((v7 & a1) != 0)
    v8 = ~(_BYTE)a1;
  else
    v8 = -1;
  v9 = v8 & v7;
  if ((v7 & a1) == a1)
    v10 = 0;
  else
    v10 = a1;
  v11 = v10 | v7;
  if ((a2 & 1) != 0)
    v12 = v11;
  else
    v12 = v9;
  return sub_100072218(v12);
}

uint64_t NANGenericServiceProtocol.furtherServiceDiscoveryFollowUp.getter(uint64_t a1)
{
  uint64_t v2;
  unsigned __int8 *v3;
  uint64_t v5;

  type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
  __chkstk_darwin();
  v3 = (unsigned __int8 *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100071FA8(a1, (uint64_t)v3);
  LODWORD(a1) = *v3;
  sub_100063824((uint64_t)v3, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
  return (a1 >> 2) & 1;
}

uint64_t NANGenericServiceProtocol.furtherServiceDiscoveryFollowUp.setter(char a1)
{
  return sub_100072370(4, a1);
}

void (*NANGenericServiceProtocol.furtherServiceDiscoveryFollowUp.modify(uint64_t a1))(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  char *v4;
  char v5;

  *(_QWORD *)a1 = v1;
  v3 = type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
  v4 = (char *)malloc(*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64));
  *(_QWORD *)(a1 + 8) = v4;
  sub_100071FA8(*v1, (uint64_t)v4);
  v5 = *v4;
  sub_100063824((uint64_t)v4, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
  *(_BYTE *)(a1 + 16) = (v5 & 4) != 0;
  return sub_100072534;
}

void sub_100072534(uint64_t a1)
{
  void *v1;

  v1 = *(void **)(a1 + 8);
  sub_100072370(4, *(_BYTE *)(a1 + 16));
  free(v1);
}

uint64_t NANGenericServiceProtocol.datapathSubscribeID.getter(uint64_t a1)
{
  uint64_t v2;
  char *v3;
  int v4;
  uint64_t v6;

  type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
  __chkstk_darwin();
  v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100071FA8(a1, (uint64_t)v3);
  LODWORD(a1) = v3[1];
  v4 = v3[2];
  sub_100063824((uint64_t)v3, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
  return a1 | (v4 << 8);
}

uint64_t NANGenericServiceProtocol.datapathSubscribeID.setter(__int16 a1)
{
  uint64_t *v1;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;

  sub_100012C44(&qword_100404EE8);
  __chkstk_darwin();
  v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v6 = (char *)&v11 - v5;
  type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
  __chkstk_darwin();
  v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100071FA8(*v1, (uint64_t)v8);
  v8[1] = a1;
  v8[2] = HIBYTE(a1) & 1;
  sub_1000637E0((uint64_t)v8, (uint64_t)v6, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
  v9 = type metadata accessor for NANGenericServiceProtocol.Attribute(0);
  swift_storeEnumTagMultiPayload(v6, v9, 7);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v6, 0, 1, v9);
  sub_100033B48((uint64_t)v6, (uint64_t)v4, &qword_100404EE8);
  sub_10002548C((uint64_t)v4, 7);
  sub_100063824((uint64_t)v8, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
  return sub_100033A84((uint64_t)v6, &qword_100404EE8);
}

void (*NANGenericServiceProtocol.datapathSubscribeID.modify(_QWORD *a1))(uint64_t ***a1)
{
  uint64_t *v1;
  _QWORD *v3;
  size_t v4;
  uint64_t v5;
  _BYTE *v6;
  char v7;
  char v8;

  v3 = malloc(0x28uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = *(_QWORD *)(*(_QWORD *)(sub_100012C44(&qword_100404EE8) - 8) + 64);
  v3[1] = malloc(v4);
  v3[2] = malloc(v4);
  v5 = type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
  v6 = malloc(*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64));
  v3[3] = v6;
  sub_100071FA8(*v1, (uint64_t)v6);
  v7 = v6[1];
  v8 = v6[2];
  sub_100063824((uint64_t)v6, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
  *((_BYTE *)v3 + 32) = v7;
  *((_BYTE *)v3 + 33) = v8;
  return sub_100072810;
}

void sub_100072810(uint64_t ***a1)
{
  uint64_t **v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  char v5;
  char v6;
  uint64_t v7;

  v1 = *a1;
  v2 = (*a1)[2];
  v3 = (*a1)[3];
  v4 = (*a1)[1];
  v5 = *((_BYTE *)*a1 + 32);
  v6 = *((_BYTE *)*a1 + 33);
  sub_100071FA8(***a1, (uint64_t)v3);
  *((_BYTE *)v3 + 1) = v5;
  *((_BYTE *)v3 + 2) = v6;
  sub_1000637E0((uint64_t)v3, (uint64_t)v2, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
  v7 = type metadata accessor for NANGenericServiceProtocol.Attribute(0);
  swift_storeEnumTagMultiPayload(v2, v7, 7);
  (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v2, 0, 1, v7);
  sub_100033B48((uint64_t)v2, (uint64_t)v4, &qword_100404EE8);
  sub_10002548C((uint64_t)v4, 7);
  sub_100063824((uint64_t)v3, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
  sub_100033A84((uint64_t)v2, &qword_100404EE8);
  free(v3);
  free(v2);
  free(v4);
  free(v1);
}

uint64_t NANGenericServiceProtocol.publicKey.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  v4 = type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
  __chkstk_darwin();
  v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100071FA8(a1, (uint64_t)v6);
  sub_100033B48((uint64_t)&v6[*(int *)(v4 + 24)], a2, (uint64_t *)&unk_10040D200);
  return sub_100063824((uint64_t)v6, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
}

uint64_t NANGenericServiceProtocol.publicKey.setter(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v12;

  sub_100012C44(&qword_100404EE8);
  __chkstk_darwin();
  v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v6 = (char *)&v12 - v5;
  v7 = type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
  __chkstk_darwin();
  v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100071FA8(*v1, (uint64_t)v9);
  sub_100078AC4(a1, (uint64_t)&v9[*(int *)(v7 + 24)]);
  sub_1000637E0((uint64_t)v9, (uint64_t)v6, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
  v10 = type metadata accessor for NANGenericServiceProtocol.Attribute(0);
  swift_storeEnumTagMultiPayload(v6, v10, 7);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v6, 0, 1, v10);
  sub_100033B48((uint64_t)v6, (uint64_t)v4, &qword_100404EE8);
  sub_10002548C((uint64_t)v4, 7);
  sub_100063824((uint64_t)v9, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
  sub_100033A84((uint64_t)v6, &qword_100404EE8);
  return sub_100033A84(a1, (uint64_t *)&unk_10040D200);
}

void (*NANGenericServiceProtocol.publicKey.modify(_QWORD *a1))(uint64_t ***a1, char a2)
{
  uint64_t *v1;
  _QWORD *v3;
  size_t v4;
  uint64_t v5;
  void *v6;
  size_t v7;
  void *v8;

  v3 = malloc(0x38uLL);
  *a1 = v3;
  *v3 = v1;
  v4 = *(_QWORD *)(*(_QWORD *)(sub_100012C44(&qword_100404EE8) - 8) + 64);
  v3[1] = malloc(v4);
  v3[2] = malloc(v4);
  v5 = type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
  v3[3] = v5;
  v6 = malloc(*(_QWORD *)(*(_QWORD *)(v5 - 8) + 64));
  v3[4] = v6;
  v7 = *(_QWORD *)(*(_QWORD *)(sub_100012C44((uint64_t *)&unk_10040D200) - 8) + 64);
  v3[5] = malloc(v7);
  v8 = malloc(v7);
  v3[6] = v8;
  sub_100071FA8(*v1, (uint64_t)v6);
  sub_100033B48((uint64_t)v6 + *(int *)(v5 + 24), (uint64_t)v8, (uint64_t *)&unk_10040D200);
  sub_100063824((uint64_t)v6, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
  return sub_100072C38;
}

void sub_100072C38(uint64_t ***a1, char a2)
{
  uint64_t **v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;

  v2 = *a1;
  v3 = (*a1)[5];
  v4 = (*a1)[6];
  v6 = (*a1)[3];
  v5 = (*a1)[4];
  v7 = (*a1)[1];
  v8 = (*a1)[2];
  v9 = **a1;
  if ((a2 & 1) != 0)
  {
    sub_100033B48((uint64_t)(*a1)[6], (uint64_t)v3, (uint64_t *)&unk_10040D200);
    sub_100071FA8(*v9, (uint64_t)v5);
    sub_100078AC4((uint64_t)v3, (uint64_t)v5 + *((int *)v6 + 6));
    sub_1000637E0((uint64_t)v5, (uint64_t)v8, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
    v10 = type metadata accessor for NANGenericServiceProtocol.Attribute(0);
    swift_storeEnumTagMultiPayload(v8, v10, 7);
    (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v8, 0, 1, v10);
    sub_100033B48((uint64_t)v8, (uint64_t)v7, &qword_100404EE8);
    sub_10002548C((uint64_t)v7, 7);
    sub_100063824((uint64_t)v5, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
    sub_100033A84((uint64_t)v8, &qword_100404EE8);
    v11 = (uint64_t)v3;
    v12 = (uint64_t *)&unk_10040D200;
  }
  else
  {
    sub_100071FA8(*v9, (uint64_t)v5);
    sub_100078AC4((uint64_t)v4, (uint64_t)v5 + *((int *)v6 + 6));
    sub_1000637E0((uint64_t)v5, (uint64_t)v8, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
    v13 = type metadata accessor for NANGenericServiceProtocol.Attribute(0);
    swift_storeEnumTagMultiPayload(v8, v13, 7);
    (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v8, 0, 1, v13);
    sub_100033B48((uint64_t)v8, (uint64_t)v7, &qword_100404EE8);
    sub_10002548C((uint64_t)v7, 7);
    sub_100063824((uint64_t)v5, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
    v11 = (uint64_t)v8;
    v12 = &qword_100404EE8;
  }
  sub_100033A84(v11, v12);
  sub_100033A84((uint64_t)v4, (uint64_t *)&unk_10040D200);
  free(v4);
  free(v3);
  free(v5);
  free(v8);
  free(v7);
  free(v2);
}

uint64_t NANGenericServiceProtocol.publisherAuthenticationToken.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v8;

  v2 = type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
  __chkstk_darwin();
  v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100071FA8(a1, (uint64_t)v4);
  v5 = &v4[*(int *)(v2 + 28)];
  v6 = *(_QWORD *)v5;
  sub_1000339F4(*(_QWORD *)v5, *((_QWORD *)v5 + 1));
  sub_100063824((uint64_t)v4, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
  return v6;
}

uint64_t NANGenericServiceProtocol.publisherAuthenticationToken.setter(uint64_t a1, unint64_t a2)
{
  sub_1000796C0(a1, a2);
  return sub_10000E658(a1, a2);
}

void (*NANGenericServiceProtocol.publisherAuthenticationToken.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  uint64_t *v1;
  uint64_t v3;
  char *v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;

  a1[2] = (uint64_t)v1;
  v3 = type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
  v4 = (char *)malloc(*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64));
  a1[3] = (uint64_t)v4;
  sub_100071FA8(*v1, (uint64_t)v4);
  v5 = (uint64_t *)&v4[*(int *)(v3 + 28)];
  v6 = *v5;
  v7 = v5[1];
  sub_1000339F4(*v5, v7);
  sub_100063824((uint64_t)v4, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
  *a1 = v6;
  a1[1] = v7;
  return sub_100072FA4;
}

void sub_100072FA4(uint64_t *a1, char a2)
{
  sub_1000732A0(a1, a2, (void (*)(uint64_t, unint64_t))sub_1000796C0);
}

uint64_t NANGenericServiceProtocol.encryptedSignature.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v8;

  v2 = type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
  __chkstk_darwin();
  v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100071FA8(a1, (uint64_t)v4);
  v5 = &v4[*(int *)(v2 + 32)];
  v6 = *(_QWORD *)v5;
  sub_1000339F4(*(_QWORD *)v5, *((_QWORD *)v5 + 1));
  sub_100063824((uint64_t)v4, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
  return v6;
}

uint64_t NANGenericServiceProtocol.encryptedSignature.setter(uint64_t a1, unint64_t a2)
{
  sub_100079848(a1, a2);
  return sub_10000E658(a1, a2);
}

void (*NANGenericServiceProtocol.encryptedSignature.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  uint64_t *v1;
  uint64_t v3;
  char *v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;

  a1[2] = (uint64_t)v1;
  v3 = type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
  v4 = (char *)malloc(*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64));
  a1[3] = (uint64_t)v4;
  sub_100071FA8(*v1, (uint64_t)v4);
  v5 = (uint64_t *)&v4[*(int *)(v3 + 32)];
  v6 = *v5;
  v7 = v5[1];
  sub_1000339F4(*v5, v7);
  sub_100063824((uint64_t)v4, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
  *a1 = v6;
  a1[1] = v7;
  return sub_10007311C;
}

void sub_10007311C(uint64_t *a1, char a2)
{
  sub_1000732A0(a1, a2, (void (*)(uint64_t, unint64_t))sub_100079848);
}

uint64_t NANGenericServiceProtocol.encryptedExtraServiceSpecificInfo.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v8;

  v2 = type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
  __chkstk_darwin();
  v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100071FA8(a1, (uint64_t)v4);
  v5 = &v4[*(int *)(v2 + 36)];
  v6 = *(_QWORD *)v5;
  sub_1000339F4(*(_QWORD *)v5, *((_QWORD *)v5 + 1));
  sub_100063824((uint64_t)v4, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
  return v6;
}

uint64_t NANGenericServiceProtocol.encryptedExtraServiceSpecificInfo.setter(uint64_t a1, unint64_t a2)
{
  sub_1000799D0(a1, a2);
  return sub_10000E658(a1, a2);
}

void (*NANGenericServiceProtocol.encryptedExtraServiceSpecificInfo.modify(uint64_t *a1))(uint64_t *a1, char a2)
{
  uint64_t *v1;
  uint64_t v3;
  char *v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;

  a1[2] = (uint64_t)v1;
  v3 = type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
  v4 = (char *)malloc(*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64));
  a1[3] = (uint64_t)v4;
  sub_100071FA8(*v1, (uint64_t)v4);
  v5 = (uint64_t *)&v4[*(int *)(v3 + 36)];
  v6 = *v5;
  v7 = v5[1];
  sub_1000339F4(*v5, v7);
  sub_100063824((uint64_t)v4, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
  *a1 = v6;
  a1[1] = v7;
  return sub_100073294;
}

void sub_100073294(uint64_t *a1, char a2)
{
  sub_1000732A0(a1, a2, (void (*)(uint64_t, unint64_t))sub_1000799D0);
}

void sub_1000732A0(uint64_t *a1, char a2, void (*a3)(uint64_t, unint64_t))
{
  uint64_t v4;
  unint64_t v5;
  void *v6;
  uint64_t v7;

  v4 = *a1;
  v5 = a1[1];
  v6 = (void *)a1[3];
  v7 = *a1;
  if ((a2 & 1) != 0)
  {
    sub_1000339F4(v7, v5);
    a3(v4, v5);
    sub_10000E658(v4, v5);
  }
  else
  {
    a3(v7, v5);
  }
  sub_10000E658(v4, v5);
  free(v6);
}

unint64_t NANGenericServiceProtocol.vendorSpecificData.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned __int16 *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  char v11;
  uint64_t v13;

  v2 = type metadata accessor for NANGenericServiceProtocol.Attribute(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin();
  v5 = (unsigned __int16 *)((char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin();
  v7 = (char *)&v13 - v6;
  __chkstk_darwin();
  v9 = (char *)&v13 - v8;
  if (*(_QWORD *)(a1 + 16))
  {
    v10 = sub_10002D744(7);
    if ((v11 & 1) != 0)
    {
      sub_1000637E0(*(_QWORD *)(a1 + 56) + *(_QWORD *)(v3 + 72) * v10, (uint64_t)v7, type metadata accessor for NANGenericServiceProtocol.Attribute);
      sub_100033AC0((uint64_t)v7, (uint64_t)v9, type metadata accessor for NANGenericServiceProtocol.Attribute);
      sub_100033AC0((uint64_t)v9, (uint64_t)v5, type metadata accessor for NANGenericServiceProtocol.Attribute);
      if (swift_getEnumCaseMultiPayload(v5, v2) == 8)
        return *v5 | ((unint64_t)*((unsigned __int8 *)v5 + 2) << 16);
      sub_100063824((uint64_t)v5, type metadata accessor for NANGenericServiceProtocol.Attribute);
    }
  }
  return 0;
}

uint64_t NANGenericServiceProtocol.description.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  _QWORD *v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  int64_t v15;
  int64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  _BYTE *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;

  v54 = sub_100012C44(&qword_100406008);
  __chkstk_darwin();
  v53 = (char *)&v45 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v52 = (uint64_t)&v45 - v3;
  __chkstk_darwin();
  v51 = (char *)&v45 - v4;
  __chkstk_darwin();
  v50 = (char *)&v45 - v5;
  v6 = *(_QWORD *)(a1 + 16);
  v7 = _swiftEmptyArrayStorage;
  if (v6)
  {
    v56 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain(a1);
    sub_100074EAC(0, v6, 0);
    result = sub_100031A00(a1);
    v10 = result;
    v11 = 0;
    v12 = a1 + 64;
    v14 = v13 & 1;
    v45 = a1 + 80;
    v46 = v6;
    v48 = a1 + 64;
    v49 = a1;
    v47 = v9;
    while ((v14 & 1) == 0)
    {
      if (v10 < 0 || v10 >= 1 << *(_BYTE *)(a1 + 32))
      {
        __break(1u);
LABEL_27:
        __break(1u);
LABEL_28:
        __break(1u);
LABEL_29:
        __break(1u);
LABEL_30:
        __break(1u);
LABEL_31:
        __break(1u);
        break;
      }
      v18 = (unint64_t)v10 >> 6;
      if ((*(_QWORD *)(v12 + 8 * ((unint64_t)v10 >> 6)) & (1 << v10)) == 0)
        goto LABEL_27;
      if (*(_DWORD *)(a1 + 36) != (_DWORD)v9)
        goto LABEL_28;
      v55 = v11;
      v19 = v54;
      v20 = v50;
      v21 = (uint64_t)&v50[*(int *)(v54 + 48)];
      v22 = *(_QWORD *)(a1 + 48);
      v23 = *(_QWORD *)(a1 + 56);
      v24 = *(_BYTE *)(v22 + v10);
      v25 = type metadata accessor for NANGenericServiceProtocol.Attribute(0);
      sub_1000637E0(v23 + *(_QWORD *)(*(_QWORD *)(v25 - 8) + 72) * v10, v21, type metadata accessor for NANGenericServiceProtocol.Attribute);
      *v20 = v24;
      v26 = v51;
      *v51 = v24;
      sub_1000637E0(v21, (uint64_t)&v26[*(int *)(v19 + 48)], type metadata accessor for NANGenericServiceProtocol.Attribute);
      v27 = (uint64_t)v26;
      v28 = v52;
      sub_100063EB8(v27, v52, &qword_100406008);
      sub_100033A84((uint64_t)v20, &qword_100406008);
      v29 = *(int *)(v19 + 48);
      v30 = &v53[v29];
      sub_1000637E0(v28 + v29, (uint64_t)&v53[v29], type metadata accessor for NANGenericServiceProtocol.Attribute);
      v31 = String.init<A>(describing:)(v30, v25);
      v33 = v32;
      sub_100033A84(v28, &qword_100406008);
      v7 = v56;
      result = swift_isUniquelyReferenced_nonNull_native(v56);
      if ((result & 1) == 0)
      {
        result = sub_100074EAC(0, v7[2] + 1, 1);
        v7 = v56;
      }
      v35 = v7[2];
      v34 = v7[3];
      if (v35 >= v34 >> 1)
      {
        result = sub_100074EAC(v34 > 1, v35 + 1, 1);
        v7 = v56;
      }
      v7[2] = v35 + 1;
      v36 = &v7[2 * v35];
      v36[4] = v31;
      v36[5] = v33;
      a1 = v49;
      v15 = 1 << *(_BYTE *)(v49 + 32);
      if (v10 >= v15)
        goto LABEL_29;
      v12 = v48;
      v37 = *(_QWORD *)(v48 + 8 * v18);
      if ((v37 & (1 << v10)) == 0)
        goto LABEL_30;
      LODWORD(v9) = v47;
      if (*(_DWORD *)(v49 + 36) != (_DWORD)v47)
        goto LABEL_31;
      v38 = v37 & (-2 << (v10 & 0x3F));
      if (v38)
      {
        v15 = __clz(__rbit64(v38)) | v10 & 0xFFFFFFFFFFFFFFC0;
        v16 = v46;
        v17 = v55;
      }
      else
      {
        v39 = v18 + 1;
        v40 = (unint64_t)(v15 + 63) >> 6;
        v16 = v46;
        v17 = v55;
        if (v18 + 1 < v40)
        {
          v41 = *(_QWORD *)(v48 + 8 * v39);
          if (v41)
          {
LABEL_23:
            v15 = __clz(__rbit64(v41)) + (v39 << 6);
          }
          else
          {
            while (v40 - 2 != v18)
            {
              v41 = *(_QWORD *)(v45 + 8 * v18++);
              if (v41)
              {
                v39 = v18 + 1;
                goto LABEL_23;
              }
            }
          }
        }
      }
      v14 = 0;
      v11 = v17 + 1;
      v10 = v15;
      if (v11 == v16)
      {
        swift_bridgeObjectRelease(v49);
        goto LABEL_25;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_25:
    v56 = v7;
    v42 = sub_100012C44((uint64_t *)&unk_1004102C0);
    v43 = sub_100011770(&qword_10040FCA0, (uint64_t *)&unk_1004102C0, (const char *)&protocol conformance descriptor for [A]);
    v44 = BidirectionalCollection<>.joined(separator:)(8236, 0xE200000000000000, v42, v43);
    swift_bridgeObjectRelease(v7);
    return v44;
  }
  return result;
}

uint64_t NANGenericServiceProtocol.customMirror.getter(uint64_t a1)
{
  _QWORD v3[4];

  v3[3] = sub_100012C44(&qword_100406010);
  v3[0] = a1;
  swift_bridgeObjectRetain(a1);
  return Mirror.init(reflecting:)(v3);
}

double NANGenericServiceProtocol.hash(into:)(__int128 *a1, uint64_t a2)
{
  double result;

  swift_bridgeObjectRetain(a2);
  sub_100077EC8(a1, a2);
  *(_QWORD *)&result = swift_bridgeObjectRelease(a2).n128_u64[0];
  return result;
}

uint64_t sub_1000738DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t result;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  _BOOL8 v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  char v34;
  char v35;
  char v36;
  int64_t v37;
  uint64_t v38;
  int64_t v39;
  uint64_t v40;
  int64_t v41;
  uint64_t v42;

  v42 = *(_QWORD *)(type metadata accessor for NANGenericServiceProtocol.Attribute(0) - 8);
  __chkstk_darwin();
  v5 = (char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v7 = (char *)&v37 - v6;
  sub_100012C44(&qword_100406280);
  __chkstk_darwin();
  v9 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = __chkstk_darwin();
  v12 = (char *)&v37 - v11;
  if (a1 == a2)
    return 1;
  if (*(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v40 = a1;
  v41 = 0;
  v15 = *(_QWORD *)(a1 + 64);
  v14 = a1 + 64;
  v13 = v15;
  v16 = 1 << *(_BYTE *)(v14 - 32);
  v17 = -1;
  if (v16 < 64)
    v17 = ~(-1 << v16);
  v18 = v17 & v13;
  v38 = v14;
  v39 = (unint64_t)(v16 + 63) >> 6;
  v37 = v39 - 1;
  while (1)
  {
    if (v18)
    {
      v19 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      v20 = v19 | (v41 << 6);
LABEL_8:
      v21 = *(_BYTE *)(*(_QWORD *)(v40 + 48) + v20);
      v22 = *(_QWORD *)(v40 + 56) + *(_QWORD *)(v42 + 72) * v20;
      v23 = sub_100012C44(&qword_100406008);
      sub_1000637E0(v22, (uint64_t)&v9[*(int *)(v23 + 48)], type metadata accessor for NANGenericServiceProtocol.Attribute);
      *v9 = v21;
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v9, 0, 1, v23);
      goto LABEL_27;
    }
    v24 = v41 + 1;
    if (__OFADD__(v41, 1))
    {
      __break(1u);
      goto LABEL_36;
    }
    if (v24 < v39)
    {
      v25 = *(_QWORD *)(v38 + 8 * v24);
      if (v25)
        goto LABEL_12;
      v26 = v41 + 2;
      ++v41;
      if (v24 + 1 < v39)
      {
        v25 = *(_QWORD *)(v38 + 8 * v26);
        if (v25)
          goto LABEL_15;
        v41 = v24 + 1;
        if (v24 + 2 < v39)
        {
          v25 = *(_QWORD *)(v38 + 8 * (v24 + 2));
          if (v25)
          {
            v24 += 2;
            goto LABEL_12;
          }
          v26 = v24 + 3;
          v41 = v24 + 2;
          if (v24 + 3 < v39)
            break;
        }
      }
    }
LABEL_26:
    v27 = sub_100012C44(&qword_100406008);
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v9, 1, 1, v27);
    v18 = 0;
LABEL_27:
    sub_100063EB8((uint64_t)v9, (uint64_t)v12, &qword_100406280);
    v28 = sub_100012C44(&qword_100406008);
    v29 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 48))(v12, 1, v28);
    v30 = v29 == 1;
    if (v29 == 1)
      return v30;
    v31 = (uint64_t)&v12[*(int *)(v28 + 48)];
    v32 = *v12;
    sub_100033AC0(v31, (uint64_t)v7, type metadata accessor for NANGenericServiceProtocol.Attribute);
    v33 = sub_10002D744(v32);
    if ((v34 & 1) == 0)
    {
      sub_100063824((uint64_t)v7, type metadata accessor for NANGenericServiceProtocol.Attribute);
      return 0;
    }
    sub_1000637E0(*(_QWORD *)(a2 + 56) + *(_QWORD *)(v42 + 72) * v33, (uint64_t)v5, type metadata accessor for NANGenericServiceProtocol.Attribute);
    sub_100078244((uint64_t)v5, (uint64_t)v7);
    v36 = v35;
    sub_100063824((uint64_t)v5, type metadata accessor for NANGenericServiceProtocol.Attribute);
    result = sub_100063824((uint64_t)v7, type metadata accessor for NANGenericServiceProtocol.Attribute);
    if ((v36 & 1) == 0)
      return v30;
  }
  v25 = *(_QWORD *)(v38 + 8 * v26);
  if (v25)
  {
LABEL_15:
    v24 = v26;
LABEL_12:
    v18 = (v25 - 1) & v25;
    v20 = __clz(__rbit64(v25)) + (v24 << 6);
    v41 = v24;
    goto LABEL_8;
  }
  while (1)
  {
    v24 = v26 + 1;
    if (__OFADD__(v26, 1))
      break;
    if (v24 >= v39)
    {
      v41 = v37;
      goto LABEL_26;
    }
    v25 = *(_QWORD *)(v38 + 8 * v24);
    ++v26;
    if (v25)
      goto LABEL_12;
  }
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_100073C98(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unsigned __int16 *v21;
  unint64_t v22;
  uint64_t v23;
  __int16 v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int64_t v29;
  unint64_t v30;
  int64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  _BOOL8 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  uint64_t v43;
  int v44;
  int v45;
  int64_t v46;
  uint64_t v47;
  int64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  int64_t v54;
  unsigned __int16 *v55;

  v53 = type metadata accessor for NANInternetSharingStatistics.Requester(0);
  v4 = *(_QWORD *)(v53 - 8);
  __chkstk_darwin();
  v6 = (char *)&v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v8 = (char *)&v46 - v7;
  sub_100012C44(&qword_1004061A0);
  __chkstk_darwin();
  v10 = (char *)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = __chkstk_darwin();
  v55 = (unsigned __int16 *)((char *)&v46 - v12);
  if (a1 == a2)
    return 1;
  if (*(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v54 = 0;
  v50 = a1;
  v51 = v4;
  v15 = *(_QWORD *)(a1 + 64);
  v14 = a1 + 64;
  v13 = v15;
  v16 = 1 << *(_BYTE *)(v14 - 32);
  v17 = -1;
  if (v16 < 64)
    v17 = ~(-1 << v16);
  v18 = v17 & v13;
  v47 = v14;
  v48 = (unint64_t)(v16 + 63) >> 6;
  v46 = v48 - 1;
  v19 = (uint64_t)v6;
  v49 = v6;
  v52 = v8;
  while (1)
  {
    if (v18)
    {
      v20 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      v21 = v55;
      v22 = v20 | (v54 << 6);
LABEL_8:
      v23 = *(_QWORD *)(v50 + 48) - v22 + 8 * v22;
      v24 = *(_WORD *)(v23 + 4);
      v25 = *(_BYTE *)(v23 + 6);
      v26 = *(_QWORD *)(v50 + 56) + *(_QWORD *)(v4 + 72) * v22;
      v27 = sub_100012C44(&qword_1004061A8);
      LODWORD(v23) = *(_DWORD *)v23;
      sub_1000637E0(v26, (uint64_t)&v10[*(int *)(v27 + 48)], type metadata accessor for NANInternetSharingStatistics.Requester);
      *(_DWORD *)v10 = v23;
      *((_WORD *)v10 + 2) = v24;
      v10[6] = v25;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v10, 0, 1, v27);
      v28 = (uint64_t)v49;
      goto LABEL_27;
    }
    v21 = v55;
    v29 = v54 + 1;
    if (__OFADD__(v54, 1))
    {
      __break(1u);
      goto LABEL_38;
    }
    v28 = v19;
    if (v29 < v48)
    {
      v30 = *(_QWORD *)(v47 + 8 * v29);
      if (v30)
        goto LABEL_12;
      v31 = v54 + 2;
      ++v54;
      if (v29 + 1 < v48)
      {
        v30 = *(_QWORD *)(v47 + 8 * v31);
        if (v30)
          goto LABEL_15;
        v54 = v29 + 1;
        if (v29 + 2 < v48)
        {
          v30 = *(_QWORD *)(v47 + 8 * (v29 + 2));
          if (v30)
          {
            v29 += 2;
            goto LABEL_12;
          }
          v31 = v29 + 3;
          v54 = v29 + 2;
          if (v29 + 3 < v48)
            break;
        }
      }
    }
LABEL_26:
    v32 = sub_100012C44(&qword_1004061A8);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v10, 1, 1, v32);
    v18 = 0;
LABEL_27:
    sub_100063EB8((uint64_t)v10, (uint64_t)v21, &qword_1004061A0);
    v33 = sub_100012C44(&qword_1004061A8);
    v34 = (*(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 48))(v21, 1, v33);
    v35 = v34 == 1;
    if (v34 == 1)
      return v35;
    v19 = v28;
    v36 = (uint64_t)v21 + *(int *)(v33 + 48);
    v37 = *((unsigned __int8 *)v21 + 2);
    v38 = *(unsigned int *)((char *)v21 + 3);
    v39 = *v21;
    v40 = (uint64_t)v52;
    sub_100033AC0(v36, (uint64_t)v52, type metadata accessor for NANInternetSharingStatistics.Requester);
    v41 = sub_10002D7B4(v39 | (v37 << 16) | (v38 << 24));
    if ((v42 & 1) == 0)
      goto LABEL_34;
    v4 = v51;
    sub_1000637E0(*(_QWORD *)(a2 + 56) + *(_QWORD *)(v51 + 72) * v41, v19, type metadata accessor for NANInternetSharingStatistics.Requester);
    if ((static DispatchTimeInterval.== infix(_:_:)(v19, v40) & 1) == 0)
    {
      sub_100063824(v19, type metadata accessor for NANInternetSharingStatistics.Requester);
LABEL_34:
      sub_100063824(v40, type metadata accessor for NANInternetSharingStatistics.Requester);
      return 0;
    }
    v43 = *(int *)(v53 + 20);
    v44 = *(unsigned __int8 *)(v19 + v43);
    v45 = *(unsigned __int8 *)(v40 + v43);
    sub_100063824(v19, type metadata accessor for NANInternetSharingStatistics.Requester);
    result = sub_100063824(v40, type metadata accessor for NANInternetSharingStatistics.Requester);
    if (v44 != v45)
      return v35;
  }
  v30 = *(_QWORD *)(v47 + 8 * v31);
  if (v30)
  {
LABEL_15:
    v29 = v31;
LABEL_12:
    v18 = (v30 - 1) & v30;
    v22 = __clz(__rbit64(v30)) + (v29 << 6);
    v54 = v29;
    goto LABEL_8;
  }
  while (1)
  {
    v29 = v31 + 1;
    if (__OFADD__(v31, 1))
      break;
    if (v29 >= v48)
    {
      v54 = v46;
      goto LABEL_26;
    }
    v30 = *(_QWORD *)(v47 + 8 * v29);
    ++v31;
    if (v30)
      goto LABEL_12;
  }
LABEL_38:
  __break(1u);
  return result;
}

Swift::Int NANGenericServiceProtocol.hashValue.getter(uint64_t a1)
{
  __int128 v3[4];

  Hasher.init(_seed:)(v3);
  swift_bridgeObjectRetain(a1);
  sub_100077EC8(v3, a1);
  swift_bridgeObjectRelease(a1);
  return Hasher._finalize()();
}

uint64_t sub_10007411C()
{
  uint64_t *v0;

  return NANGenericServiceProtocol.description.getter(*v0);
}

uint64_t sub_100074124()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD v3[4];

  v1 = *v0;
  v3[3] = sub_100012C44(&qword_100406010);
  v3[0] = v1;
  swift_bridgeObjectRetain(v1);
  return Mirror.init(reflecting:)(v3);
}

Swift::Int sub_100074174()
{
  uint64_t *v0;
  uint64_t v1;
  __int128 v3[4];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  swift_bridgeObjectRetain(v1);
  sub_100077EC8(v3, v1);
  swift_bridgeObjectRelease(v1);
  return Hasher._finalize()();
}

double sub_1000741C8(__int128 *a1)
{
  uint64_t *v1;
  uint64_t v3;
  double result;

  v3 = *v1;
  swift_bridgeObjectRetain(v3);
  sub_100077EC8(a1, v3);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v3).n128_u64[0];
  return result;
}

Swift::Int sub_100074200()
{
  uint64_t *v0;
  uint64_t v1;
  __int128 v3[4];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  swift_bridgeObjectRetain(v1);
  sub_100077EC8(v3, v1);
  swift_bridgeObjectRelease(v1);
  return Hasher._finalize()();
}

uint64_t sub_100074250(uint64_t *a1, uint64_t *a2)
{
  return sub_1000738DC(*a1, *a2);
}

uint64_t NANBeacon.Metadata.rssi.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

void *NANGenericServiceProtocol.AttributeFilter.standardizedAttributes.unsafeMutableAddressor()
{
  return &static NANGenericServiceProtocol.AttributeFilter.standardizedAttributes;
}

void sub_100074270(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

_QWORD *sub_100074278@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 | *result;
  return result;
}

_QWORD *sub_10007428C@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 ^ *result;
  return result;
}

BOOL sub_1000742A0(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = *v2 & *a2;
  if (v4 != *a2)
    *v2 |= v3;
  *a1 = v3;
  return v4 != v3;
}

_QWORD *sub_1000742D0@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;

  v3 = *v2 & *result;
  if (v3)
    *v2 &= ~*result;
  *(_QWORD *)a2 = v3;
  *(_BYTE *)(a2 + 8) = v3 == 0;
  return result;
}

uint64_t *sub_1000742FC@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *result;
  v4 = *v2;
  *v2 |= *result;
  v5 = v4 & v3;
  *(_QWORD *)a2 = v5;
  *(_BYTE *)(a2 + 8) = v5 == 0;
  return result;
}

_QWORD *sub_100074320(_QWORD *result)
{
  _QWORD *v1;

  *v1 |= *result;
  return result;
}

_QWORD *sub_100074334(_QWORD *result)
{
  _QWORD *v1;

  *v1 ^= *result;
  return result;
}

_QWORD *sub_100074348@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_10007435C(_QWORD *a1)
{
  _QWORD *v1;

  return (*v1 & *a1) == 0;
}

BOOL sub_100074370()
{
  _QWORD *v0;

  return *v0 == 0;
}

_QWORD *sub_100074380(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= ~*result;
  return result;
}

uint64_t sub_100074394@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = sub_1001A4AC4();
  result = swift_bridgeObjectRelease(a1);
  *a2 = v4;
  return result;
}

void NANGenericServiceProtocol.packetData(for:)(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v8[32];
  _QWORD v9[5];

  v4 = sub_10001F11C((uint64_t)_swiftEmptyArrayStorage);
  v5 = type metadata accessor for BinaryEncoder();
  v6 = swift_allocObject(v5, 40, 7);
  *(_OWORD *)(v6 + 16) = xmmword_10033A100;
  *(_QWORD *)(v6 + 32) = v4;
  v9[3] = &type metadata for BinaryEncoder.UnkeyedContainer;
  v9[4] = sub_100079B58();
  v9[0] = v6;
  swift_retain();
  v7 = swift_bridgeObjectRetain(a2);
  sub_10006E698(v7, a1, (uint64_t)v9);
  swift_bridgeObjectRelease(a2);
  swift_beginAccess(v6 + 16, v8, 0, 0);
  __asm { BR              X10 }
}

uint64_t sub_100074544(unsigned __int8 *a1, char a2, uint64_t a3)
{
  _BYTE *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t result;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  _BYTE *v17;
  unsigned int v18;
  uint64_t v19;
  unsigned __int16 *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unsigned int v24;
  char v25;
  uint64_t v26;
  int EnumCaseMultiPayload;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  _BYTE *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;

  v34 = a3;
  type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
  __chkstk_darwin();
  v32 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for NWEndpoint.Port(0);
  __chkstk_darwin();
  v7 = type metadata accessor for NANGenericServiceProtocol.Attribute(0);
  __chkstk_darwin();
  v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012C44(&qword_100406008);
  __chkstk_darwin();
  v33 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v12 = (char *)&v30 - v11;
  result = __chkstk_darwin();
  v15 = a1;
  v17 = (char *)&v30 - v16;
  if ((a2 & 1) != 0 && *a1 < 7u)
  {
LABEL_10:
    v35 = v14;
    v28 = *(int *)(v14 + 48);
    v31 = v15;
    sub_1000637E0((uint64_t)&v15[v28], (uint64_t)v9, type metadata accessor for NANGenericServiceProtocol.Attribute);
    v29 = (char *)&loc_1000747F8 + dword_100074E0C[swift_getEnumCaseMultiPayload(v9, v7)];
    __asm { BR              X10 }
  }
  if ((a2 & 2) != 0)
  {
    v18 = *a1;
    if (v18 >= 7)
    {
      v31 = v3;
      v35 = v14;
      v19 = *(int *)(v14 + 48);
      v20 = (unsigned __int16 *)&v17[v19];
      v21 = (uint64_t)&a1[v19];
      *v17 = v18;
      sub_1000637E0((uint64_t)&a1[v19], (uint64_t)&v17[v19], type metadata accessor for NANGenericServiceProtocol.Attribute);
      if (swift_getEnumCaseMultiPayload(v20, v7) == 8)
      {
        LODWORD(v30) = *((unsigned __int8 *)v20 + 2);
        v22 = *((_QWORD *)v20 + 1);
        v23 = *((_QWORD *)v20 + 2);
        v24 = *v20;
        sub_10000E614(v22, v23);
        v25 = sub_1000349A4(0xF21700u, v24 | ((_DWORD)v30 << 16));
        v15 = a1;
        v14 = v35;
        if ((v25 & 1) != 0)
          goto LABEL_10;
      }
      else
      {
        sub_100063824((uint64_t)v20, type metadata accessor for NANGenericServiceProtocol.Attribute);
        v15 = a1;
        v14 = v35;
      }
      v26 = (uint64_t)&v12[*(int *)(v14 + 48)];
      *v12 = *v15;
      sub_1000637E0(v21, v26, type metadata accessor for NANGenericServiceProtocol.Attribute);
      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v26, v7);
      result = sub_100063824(v26, type metadata accessor for NANGenericServiceProtocol.Attribute);
      v14 = v35;
      v15 = a1;
      if (EnumCaseMultiPayload == 7)
        goto LABEL_10;
    }
  }
  return result;
}

void *NANGenericServiceProtocol.init(from:)(_QWORD *a1)
{
  return sub_100079414(a1);
}

void *sub_100074E68@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  void *result;

  result = sub_100079414(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_100074E90(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_100075230(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_100074EAC(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1000753B8(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_100074EC8(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_100075520(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_100074EE4(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1000756A8(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_100074F00(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_100076520(a1, a2, a3, *v3, &qword_1004061F0);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_100074F24(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_100075968(a1, a2, a3, *v3, &qword_100403E88);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_100074F48(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_100075800(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_100074F64(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_100075968(a1, a2, a3, *v3, &qword_100406190);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_100074F88(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_100075968(a1, a2, a3, *v3, &qword_100406198);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_100074FAC(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_100075AB0(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_100074FC8(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_100075C98(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_100074FE4(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_100075E00(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_100075000(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_100076520(a1, a2, a3, *v3, &qword_100406150);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_100075024(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_100075F4C(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_100075040(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1000760B4(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_10007505C(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_100076210(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_100075078(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_10007638C(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_100075094(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1000767D0(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1000750B0(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_10007692C(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1000750CC(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_100076AA8(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_1000750E8(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_100076C1C(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_100075104(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1000773A0(a1, a2, a3, (_QWORD *)*v3, &qword_1004061D8, (uint64_t (*)(_QWORD))&type metadata accessor for SymmetricKey);
  *v3 = result;
  return result;
}

uint64_t sub_100075130(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1000773A0(a1, a2, a3, (_QWORD *)*v3, &qword_100406128, type metadata accessor for LongTermPairingKeys.PublicIdentity);
  *v3 = result;
  return result;
}

uint64_t sub_10007515C(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_100076D78(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_100075178(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_100076F00(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_100075194(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_100077058(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_1000751B0(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1000771FC(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_1000751CC(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1000773A0(a1, a2, a3, (_QWORD *)*v3, &qword_10040D570, type metadata accessor for NANAttribute);
  *v3 = result;
  return result;
}

uint64_t sub_1000751F8(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_100077580(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_100075214(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_1000776E8(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_100075230(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100012C44(&qword_100406218);
    v11 = (_QWORD *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    v11[2] = v8;
    v11[3] = 2 * (v13 >> 4);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  v14 = (unint64_t)(v11 + 4);
  v15 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= v15 + 16 * v8)
      memmove(v11 + 4, a4 + 4, 16 * v8);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v15 >= v14 + 16 * v8 || v14 >= v15 + 16 * v8)
  {
    sub_100012C44(&qword_100406220);
    swift_arrayInitWithCopy(v11 + 4);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1000753B8(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100012C44((uint64_t *)&unk_10040CB00);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[16 * v8] || v14 >= &v15[16 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100075520(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100012C44(&qword_100406130);
    v11 = (_QWORD *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    v11[2] = v8;
    v11[3] = 2 * (v13 >> 4);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  v14 = (unint64_t)(v11 + 4);
  v15 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= v15 + 16 * v8)
      memmove(v11 + 4, a4 + 4, 16 * v8);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v15 >= v14 + 16 * v8 || v14 >= v15 + 16 * v8)
  {
    sub_100012C44(&qword_100406138);
    swift_arrayInitWithCopy(v11 + 4);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1000756A8(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  size_t v16;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100012C44(&qword_100406170);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  v16 = 16 * v8;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[v16])
      memmove(v14, v15, v16);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[v16] || v14 >= &v15[v16])
  {
    memcpy(v14, v15, v16);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100075800(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100012C44(&qword_100406188);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[16 * v8] || v14 >= &v15[16 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100075968(char a1, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  unint64_t v7;
  int64_t v8;
  int64_t v9;
  int64_t v10;
  uint64_t v11;
  char *v12;
  size_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v7 = *((_QWORD *)a4 + 3);
    v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v8 = a2;
    }
  }
  else
  {
    v8 = a2;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (v8 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = v8;
  if (v10)
  {
    v11 = sub_100012C44(a5);
    v12 = (char *)swift_allocObject(v11, v10 + 32, 7);
    v13 = j__malloc_size(v12);
    *((_QWORD *)v12 + 2) = v9;
    *((_QWORD *)v12 + 3) = 2 * v13 - 64;
  }
  else
  {
    v12 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v12 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v12 != a4 || v14 >= &v15[v9])
      memmove(v14, v15, v9);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v15 >= &v14[v9] || v14 >= &v15[v9])
  {
    memcpy(v14, v15, v9);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v12;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100075AB0(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  size_t v16;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (!v9)
  {
    v15 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v10 = sub_100012C44(&qword_100406270);
  v11 = *(_QWORD *)(sub_100012C44(&qword_100404EE8) - 8);
  v12 = *(_QWORD *)(v11 + 72);
  v13 = *(unsigned __int8 *)(v11 + 80);
  v14 = (v13 + 32) & ~v13;
  v15 = (_QWORD *)swift_allocObject(v10, v14 + v12 * v9, v13 | 7);
  v16 = j__malloc_size(v15);
  if (!v12)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v16 - v14 == 0x8000000000000000 && v12 == -1)
    goto LABEL_34;
  v15[2] = v8;
  v15[3] = 2 * ((uint64_t)(v16 - v14) / v12);
LABEL_19:
  v18 = sub_100012C44(&qword_100404EE8);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v21 = (char *)v15 + v20;
  v22 = (char *)a4 + v20;
  if ((a1 & 1) != 0)
  {
    if (v15 < a4 || v21 >= &v22[*(_QWORD *)(v19 + 72) * v8])
    {
      swift_arrayInitWithTakeFrontToBack(v21, v22, v8, v18);
    }
    else if (v15 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  v23 = *(_QWORD *)(v19 + 72) * v8;
  v24 = &v21[v23];
  v25 = (unint64_t)&v22[v23];
  if (v22 >= v24 || (unint64_t)v21 >= v25)
  {
    swift_arrayInitWithCopy(v21);
LABEL_32:
    swift_release(a4);
    return (uint64_t)v15;
  }
LABEL_36:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100075C98(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  size_t v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100012C44(&qword_10040F010);
    v11 = (char *)swift_allocObject(v10, 10 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 10);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  v15 = 10 * v8;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v15])
      memmove(v13, v14, v15);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[v15] || v13 >= &v14[v15])
  {
    memcpy(v13, v14, v15);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100075E00(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100012C44(&qword_100406228);
    v11 = (char *)swift_allocObject(v10, v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * v12 - 64;
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v8])
      memmove(v13, v14, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[v8] || v13 >= &v14[v8])
  {
    memcpy(v13, v14, v8);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100075F4C(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100012C44(&qword_1004061E0);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[16 * v8] || v14 >= &v15[16 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1000760B4(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100012C44(&qword_1004061C0);
    v11 = (char *)swift_allocObject(v10, 8 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 25;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 3);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[8 * v8])
      memmove(v14, v15, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[8 * v8] || v14 >= &v15[8 * v8])
  {
    memcpy(v14, v15, 8 * v8);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100076210(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100012C44(&qword_100406298);
    v11 = (char *)swift_allocObject(v10, 14 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 14);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[14 * v8])
      memmove(v13, v14, 14 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[14 * v8] || v13 >= &v14[14 * v8])
  {
    memcpy(v13, v14, 14 * v8);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10007638C(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100012C44(&qword_100406178);
    v11 = (_QWORD *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    v11[2] = v8;
    v11[3] = 2 * (v13 >> 4);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  v14 = (unint64_t)(v11 + 4);
  v15 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= v15 + 16 * v8)
      memmove(v11 + 4, a4 + 4, 16 * v8);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v15 >= v14 + 16 * v8 || v14 >= v15 + 16 * v8)
  {
    sub_100012C44(&qword_100406180);
    swift_arrayInitWithCopy(v11 + 4);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100076514(char a1, int64_t a2, char a3, char *a4)
{
  return sub_100076520(a1, a2, a3, a4, &qword_100406210);
}

uint64_t sub_100076520(char a1, int64_t a2, char a3, char *a4, uint64_t *a5)
{
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  size_t v17;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v7 = *((_QWORD *)a4 + 3);
    v8 = v7 >> 1;
    if ((uint64_t)(v7 >> 1) < a2)
    {
      if (v8 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v7 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v8 = a2;
    }
  }
  else
  {
    v8 = a2;
  }
  v9 = *((_QWORD *)a4 + 2);
  if (v8 <= v9)
    v10 = *((_QWORD *)a4 + 2);
  else
    v10 = v8;
  if (v10)
  {
    v11 = sub_100012C44(a5);
    v12 = (char *)swift_allocObject(v11, 8 * v10 + 32, 7);
    v13 = j__malloc_size(v12);
    v14 = v13 - 32;
    if (v13 < 32)
      v14 = v13 - 25;
    *((_QWORD *)v12 + 2) = v9;
    *((_QWORD *)v12 + 3) = 2 * (v14 >> 3);
  }
  else
  {
    v12 = (char *)_swiftEmptyArrayStorage;
  }
  v15 = v12 + 32;
  v16 = a4 + 32;
  v17 = 8 * v9;
  if ((a1 & 1) != 0)
  {
    if (v12 != a4 || v15 >= &v16[v17])
      memmove(v15, v16, v17);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v16 >= &v15[v17] || v15 >= &v16[v17])
  {
    memcpy(v15, v16, v17);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v12;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100076674(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100012C44(&qword_100406208);
    v11 = (char *)swift_allocObject(v10, 32 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 1;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 5);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[32 * v8])
      memmove(v14, v15, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[32 * v8] || v14 >= &v15[32 * v8])
  {
    memcpy(v14, v15, 32 * v8);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1000767D0(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100012C44(&qword_100406290);
    v11 = (char *)swift_allocObject(v10, 4 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 29;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 2);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[4 * v8])
      memmove(v14, v15, 4 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[4 * v8] || v14 >= &v15[4 * v8])
  {
    memcpy(v14, v15, 4 * v8);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10007692C(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100012C44(&qword_1004061F8);
    v11 = (char *)swift_allocObject(v10, 7 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 7);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[8 * v8 - v8])
      memmove(v13, v14, 7 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[7 * v8] || v13 >= &v14[7 * v8])
  {
    memcpy(v13, v14, 7 * v8);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100076AA8(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100012C44(&qword_100406200);
    v11 = (char *)swift_allocObject(v10, 34 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 34);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[34 * v8])
      memmove(v13, v14, 34 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[34 * v8] || v13 >= &v14[34 * v8])
  {
    memcpy(v13, v14, 34 * v8);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100076C1C(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100012C44(&qword_1004061E8);
    v11 = (char *)swift_allocObject(v10, 8 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 25;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 3);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[8 * v8])
      memmove(v14, v15, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[8 * v8] || v14 >= &v15[8 * v8])
  {
    memcpy(v14, v15, 8 * v8);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100076D78(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100012C44(&qword_1004061D0);
    v11 = (_QWORD *)swift_allocObject(v10, 8 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 25;
    v11[2] = v8;
    v11[3] = 2 * (v13 >> 3);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  v14 = (unint64_t)(v11 + 4);
  v15 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= v15 + 8 * v8)
      memmove(v11 + 4, a4 + 4, 8 * v8);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v15 >= v14 + 8 * v8 || v14 >= v15 + 8 * v8)
  {
    sub_100012C44((uint64_t *)&unk_10040D330);
    swift_arrayInitWithCopy(v11 + 4);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100076F00(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  int64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100012C44(&qword_1004061C8);
    v11 = (char *)swift_allocObject(v10, 2 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 31;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = v13 & 0xFFFFFFFFFFFFFFFELL;
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[2 * v8])
      memmove(v14, v15, 2 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[2 * v8] || v14 >= &v15[2 * v8])
  {
    memcpy(v14, v15, 2 * v8);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100077058(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100012C44(&qword_1004061B0);
    v11 = (_QWORD *)swift_allocObject(v10, 24 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v11[2] = v8;
    v11[3] = 2 * ((uint64_t)(v12 - 32) / 24);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  v13 = (unint64_t)(v11 + 4);
  v14 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= v14 + 24 * v8)
      memmove(v11 + 4, a4 + 4, 24 * v8);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v14 >= v13 + 24 * v8 || v13 >= v14 + 24 * v8)
  {
    sub_100012C44(&qword_1004061B8);
    swift_arrayInitWithCopy(v11 + 4);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1000771FC(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100012C44(&qword_100406160);
    v11 = (_QWORD *)swift_allocObject(v10, 48 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v11[2] = v8;
    v11[3] = 2 * ((uint64_t)(v12 - 32) / 48);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  v13 = (unint64_t)(v11 + 4);
  v14 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= v14 + 48 * v8)
      memmove(v11 + 4, a4 + 4, 48 * v8);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v14 >= v13 + 48 * v8 || v13 >= v14 + 48 * v8)
  {
    sub_100012C44(&qword_100406168);
    swift_arrayInitWithCopy(v11 + 4);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1000773A0(char a1, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t (*a6)(_QWORD))
{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  size_t v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  unint64_t v28;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (!v12)
  {
    v18 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v13 = sub_100012C44(a5);
  v14 = *(_QWORD *)(a6(0) - 8);
  v15 = *(_QWORD *)(v14 + 72);
  v16 = *(unsigned __int8 *)(v14 + 80);
  v17 = (v16 + 32) & ~v16;
  v18 = (_QWORD *)swift_allocObject(v13, v17 + v15 * v12, v16 | 7);
  v19 = j__malloc_size(v18);
  if (!v15)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v19 - v17 == 0x8000000000000000 && v15 == -1)
    goto LABEL_34;
  v18[2] = v11;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v15);
LABEL_19:
  v21 = a6(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = (*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
  v24 = (char *)v18 + v23;
  v25 = (char *)a4 + v23;
  if ((a1 & 1) != 0)
  {
    if (v18 < a4 || v24 >= &v25[*(_QWORD *)(v22 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack(v24, v25, v11, v21);
    }
    else if (v18 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  v26 = *(_QWORD *)(v22 + 72) * v11;
  v27 = &v24[v26];
  v28 = (unint64_t)&v25[v26];
  if (v25 >= v27 || (unint64_t)v24 >= v28)
  {
    swift_arrayInitWithCopy(v24);
LABEL_32:
    swift_release(a4);
    return (uint64_t)v18;
  }
LABEL_36:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100077580(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100012C44(&qword_100406158);
    v11 = (char *)swift_allocObject(v10, 32 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 1;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 5);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[32 * v8])
      memmove(v14, v15, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[32 * v8] || v14 >= &v15[32 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1000776E8(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100012C44(&qword_100406140);
    v11 = (_QWORD *)swift_allocObject(v10, 24 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v11[2] = v8;
    v11[3] = 2 * ((uint64_t)(v12 - 32) / 24);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  v13 = (unint64_t)(v11 + 4);
  v14 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= v14 + 24 * v8)
      memmove(v11 + 4, a4 + 4, 24 * v8);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v14 >= v13 + 24 * v8 || v13 >= v14 + 24 * v8)
  {
    sub_100012C44(&qword_100406148);
    swift_arrayInitWithCopy(v11 + 4);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

void sub_100077890(__int128 *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  Swift::UInt8 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  Swift::UInt v16;
  uint64_t v17;
  uint64_t v18;
  Swift::UInt64 v19;
  BOOL v20;
  BOOL v21;
  unint64_t v22;
  Swift::UInt64 v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  __int16 v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  int64_t v31;
  unint64_t v32;
  int64_t v33;
  int64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  Swift::UInt8 v38;
  uint64_t v39;
  Swift::UInt8 v40;
  uint64_t *v41;
  Swift::UInt8 v42;
  Swift::UInt8 v43;
  Swift::UInt8 v44;
  Swift::UInt8 v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  Swift::UInt8 v50;
  Swift::UInt8 v51;
  Swift::UInt8 v52;
  uint64_t v53;
  int v54;
  unint64_t v55;
  uint64_t v56;
  int64_t v57;
  int v58;
  int v59;
  int v60;
  uint64_t v61;
  int v62;
  int64_t v63;
  uint64_t v64;
  uint64_t v65;
  Swift::UInt8 *v66;
  char *v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  __int128 *v71;
  int64_t v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  Swift::UInt v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  uint64_t v81;

  v71 = a1;
  v3 = type metadata accessor for DispatchTimeInterval(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin();
  v6 = (uint64_t *)((char *)&v56 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v70 = type metadata accessor for NANInternetSharingStatistics.Requester(0);
  v64 = *(_QWORD *)(v70 - 8);
  __chkstk_darwin();
  v75 = (uint64_t)&v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012C44(&qword_1004061A0);
  __chkstk_darwin();
  v9 = (char *)&v56 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v11 = (Swift::UInt8 *)&v56 - v10;
  v12 = *(_QWORD *)(a2 + 64);
  v61 = a2 + 64;
  v13 = 1 << *(_BYTE *)(a2 + 32);
  v14 = -1;
  if (v13 < 64)
    v14 = ~(-1 << v13);
  v15 = v14 & v12;
  v68 = enum case for DispatchTimeInterval.seconds(_:);
  v62 = enum case for DispatchTimeInterval.milliseconds(_:);
  v60 = enum case for DispatchTimeInterval.microseconds(_:);
  v59 = enum case for DispatchTimeInterval.nanoseconds(_:);
  v58 = enum case for DispatchTimeInterval.never(_:);
  v63 = (unint64_t)(v13 + 63) >> 6;
  v57 = v63 - 1;
  v65 = a2;
  swift_bridgeObjectRetain(a2);
  v16 = 0;
  v72 = 0;
  v69 = v4;
  v66 = v11;
  v67 = v9;
  while (1)
  {
    v76 = v16;
    if (v15)
    {
      v74 = (v15 - 1) & v15;
      v25 = __clz(__rbit64(v15)) | (v72 << 6);
      goto LABEL_14;
    }
    v31 = v72 + 1;
    if (__OFADD__(v72, 1))
    {
      __break(1u);
      goto LABEL_48;
    }
    if (v31 < v63)
    {
      v32 = *(_QWORD *)(v61 + 8 * v31);
      if (v32)
        goto LABEL_18;
      v33 = v72 + 2;
      ++v72;
      if (v31 + 1 < v63)
      {
        v32 = *(_QWORD *)(v61 + 8 * v33);
        if (v32)
        {
          ++v31;
          goto LABEL_18;
        }
        v34 = v31 + 2;
        v72 = v31 + 1;
        if (v31 + 2 < v63)
          break;
      }
    }
LABEL_30:
    v35 = sub_100012C44(&qword_1004061A8);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(v9, 1, 1, v35);
    v74 = 0;
LABEL_31:
    sub_100063EB8((uint64_t)v9, (uint64_t)v11, &qword_1004061A0);
    v36 = sub_100012C44(&qword_1004061A8);
    if ((*(unsigned int (**)(Swift::UInt8 *, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 48))(v11, 1, v36) == 1)
    {
      swift_release(v65);
      Hasher._combine(_:)(v76);
      return;
    }
    v37 = (uint64_t)&v11[*(int *)(v36 + 48)];
    v38 = *v11;
    v39 = v3;
    v40 = v11[1];
    v41 = v6;
    v42 = v11[2];
    v43 = v11[3];
    v44 = v11[4];
    v45 = v11[5];
    v73 = v11[6];
    v46 = v75;
    sub_100033AC0(v37, v75, type metadata accessor for NANInternetSharingStatistics.Requester);
    v47 = *((_QWORD *)v71 + 8);
    v48 = v71[1];
    v77 = *v71;
    v78 = v48;
    v49 = v71[3];
    v79 = v71[2];
    v80 = v49;
    v81 = v47;
    Hasher._combine(_:)(v38);
    v50 = v40;
    v3 = v39;
    Hasher._combine(_:)(v50);
    v51 = v42;
    v6 = v41;
    Hasher._combine(_:)(v51);
    Hasher._combine(_:)(v43);
    Hasher._combine(_:)(v44);
    v52 = v45;
    v53 = v69;
    Hasher._combine(_:)(v52);
    Hasher._combine(_:)(v73);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v53 + 16))(v41, v46, v39);
    v54 = (*(uint64_t (**)(uint64_t *, uint64_t))(v53 + 88))(v41, v39);
    if (v54 == v68)
    {
      (*(void (**)(uint64_t *, uint64_t))(v53 + 96))(v41, v39);
      v17 = *v41;
      v18 = 1000000000;
LABEL_5:
      v19 = v17 * v18;
      v20 = (unsigned __int128)(v17 * (__int128)v18) >> 64 != (v17 * v18) >> 63;
      v21 = v17 <= 0;
      v22 = 0x7FFFFFFFFFFFFFFFLL;
      if (v21)
        v22 = 0x8000000000000000;
      if (v20)
        v23 = v22;
      else
        v23 = v19;
      v11 = v66;
      v9 = v67;
      goto LABEL_11;
    }
    if (v54 == v62)
    {
      (*(void (**)(uint64_t *, uint64_t))(v53 + 96))(v41, v39);
      v17 = *v41;
      v18 = 1000000;
      goto LABEL_5;
    }
    v11 = v66;
    v9 = v67;
    if (v54 == v60)
    {
      (*(void (**)(uint64_t *, uint64_t))(v53 + 96))(v41, v3);
      v55 = 0x7FFFFFFFFFFFFFFFLL;
      if (*v41 <= 0)
        v55 = 0x8000000000000000;
      if ((unsigned __int128)(*v41 * (__int128)1000) >> 64 == (1000 * *v41) >> 63)
        v23 = 1000 * *v41;
      else
        v23 = v55;
    }
    else if (v54 == v59)
    {
      (*(void (**)(uint64_t *, uint64_t))(v53 + 96))(v41, v3);
      v23 = *v41;
    }
    else
    {
      if (v54 != v58)
        (*(void (**)(uint64_t *, uint64_t))(v53 + 8))(v41, v3);
      v23 = 0x7FFFFFFFFFFFFFFFLL;
    }
LABEL_11:
    Hasher._combine(_:)(v23);
    v24 = v75;
    Hasher._combine(_:)(*(_BYTE *)(v75 + *(int *)(v70 + 20)));
    sub_100063824(v24, type metadata accessor for NANInternetSharingStatistics.Requester);
    v16 = Hasher._finalize()() ^ v76;
    v15 = v74;
  }
  v32 = *(_QWORD *)(v61 + 8 * v34);
  if (v32)
  {
    v31 += 2;
LABEL_18:
    v74 = (v32 - 1) & v32;
    v25 = __clz(__rbit64(v32)) + (v31 << 6);
    v72 = v31;
LABEL_14:
    v26 = *(_QWORD *)(v65 + 48) - v25 + 8 * v25;
    v27 = *(_WORD *)(v26 + 4);
    v28 = *(_BYTE *)(v26 + 6);
    v29 = *(_QWORD *)(v65 + 56) + *(_QWORD *)(v64 + 72) * v25;
    v30 = sub_100012C44(&qword_1004061A8);
    LODWORD(v26) = *(_DWORD *)v26;
    sub_1000637E0(v29, (uint64_t)&v9[*(int *)(v30 + 48)], type metadata accessor for NANInternetSharingStatistics.Requester);
    *(_DWORD *)v9 = v26;
    *((_WORD *)v9 + 2) = v27;
    v9[6] = v28;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v9, 0, 1, v30);
    goto LABEL_31;
  }
  while (1)
  {
    v31 = v34 + 1;
    if (__OFADD__(v34, 1))
      break;
    if (v31 >= v63)
    {
      v72 = v57;
      goto LABEL_30;
    }
    v32 = *(_QWORD *)(v61 + 8 * v31);
    ++v34;
    if (v32)
      goto LABEL_18;
  }
LABEL_48:
  __break(1u);
}

void sub_100077EC8(__int128 *a1, uint64_t a2)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  Swift::UInt v14;
  uint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  void (*v22)(_BYTE *, _QWORD, uint64_t, uint64_t);
  uint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  int64_t v35;
  uint64_t v36;
  int64_t v37;
  uint64_t v38;
  uint64_t v39;
  int64_t v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;

  v38 = *(_QWORD *)(type metadata accessor for NANGenericServiceProtocol.Attribute(0) - 8);
  __chkstk_darwin();
  v5 = (char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100012C44(&qword_100406280);
  __chkstk_darwin();
  v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v9 = (char *)&v35 - v8;
  v10 = *(_QWORD *)(a2 + 64);
  v36 = a2 + 64;
  v11 = 1 << *(_BYTE *)(a2 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & v10;
  v37 = (unint64_t)(v11 + 63) >> 6;
  v35 = v37 - 1;
  v39 = a2;
  swift_bridgeObjectRetain(a2);
  v14 = 0;
  v40 = 0;
  v15 = (uint64_t *)&unk_100406008;
  if (!v13)
    goto LABEL_6;
LABEL_4:
  v16 = __clz(__rbit64(v13));
  v13 &= v13 - 1;
  v17 = v16 | (v40 << 6);
LABEL_5:
  v18 = *(_BYTE *)(*(_QWORD *)(v39 + 48) + v17);
  v19 = *(_QWORD *)(v39 + 56) + *(_QWORD *)(v38 + 72) * v17;
  v20 = v15;
  v21 = sub_100012C44(v15);
  sub_1000637E0(v19, (uint64_t)&v7[*(int *)(v21 + 48)], type metadata accessor for NANGenericServiceProtocol.Attribute);
  *v7 = v18;
  v22 = *(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56);
  v23 = v21;
  v15 = v20;
  v22(v7, 0, 1, v23);
  while (1)
  {
    sub_100063EB8((uint64_t)v7, (uint64_t)v9, &qword_100406280);
    v29 = sub_100012C44(v15);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 48))(v9, 1, v29) == 1)
    {
      swift_release(v39);
      Hasher._combine(_:)(v14);
      return;
    }
    v30 = (uint64_t)&v9[*(int *)(v29 + 48)];
    v31 = *v9;
    sub_100033AC0(v30, (uint64_t)v5, type metadata accessor for NANGenericServiceProtocol.Attribute);
    v32 = *((_QWORD *)a1 + 8);
    v33 = a1[1];
    v41 = *a1;
    v42 = v33;
    v34 = a1[3];
    v43 = a1[2];
    v44 = v34;
    v45 = v32;
    Hasher._combine(_:)(0xDD06050403020100 >> (8 * v31));
    sub_10006F9C8();
    sub_100063824((uint64_t)v5, type metadata accessor for NANGenericServiceProtocol.Attribute);
    v14 ^= Hasher._finalize()();
    if (v13)
      goto LABEL_4;
LABEL_6:
    v24 = v40 + 1;
    if (__OFADD__(v40, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v24 < v37)
    {
      v25 = *(_QWORD *)(v36 + 8 * v24);
      if (v25)
        goto LABEL_9;
      v26 = v40 + 2;
      ++v40;
      if (v24 + 1 < v37)
      {
        v25 = *(_QWORD *)(v36 + 8 * v26);
        if (v25)
        {
          ++v24;
LABEL_9:
          v13 = (v25 - 1) & v25;
          v17 = __clz(__rbit64(v25)) + (v24 << 6);
          v40 = v24;
          goto LABEL_5;
        }
        v27 = v24 + 2;
        v40 = v24 + 1;
        if (v24 + 2 < v37)
          break;
      }
    }
LABEL_21:
    v28 = sub_100012C44(v15);
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v7, 1, 1, v28);
    v13 = 0;
  }
  v25 = *(_QWORD *)(v36 + 8 * v27);
  if (v25)
  {
    v24 += 2;
    goto LABEL_9;
  }
  while (1)
  {
    v24 = v27 + 1;
    if (__OFADD__(v27, 1))
      break;
    if (v24 >= v37)
    {
      v40 = v35;
      goto LABEL_21;
    }
    v25 = *(_QWORD *)(v36 + 8 * v24);
    ++v27;
    if (v25)
      goto LABEL_9;
  }
LABEL_27:
  __break(1u);
}

void sub_100078244(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  _QWORD v13[6];
  uint64_t v14;
  char *v15;

  v15 = (char *)a2;
  v14 = a1;
  type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
  __chkstk_darwin();
  v13[1] = (char *)v13 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for NWEndpoint.Port(0);
  v13[3] = *(_QWORD *)(v3 - 8);
  v13[4] = v3;
  __chkstk_darwin();
  v13[0] = (char *)v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for NANGenericServiceProtocol.Attribute(0);
  __chkstk_darwin();
  v13[2] = (char *)v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v13[5] = (char *)v13 - v7;
  __chkstk_darwin();
  __chkstk_darwin();
  __chkstk_darwin();
  __chkstk_darwin();
  __chkstk_darwin();
  __chkstk_darwin();
  __chkstk_darwin();
  sub_100012C44(&qword_100406118);
  v8 = __chkstk_darwin();
  v10 = (char *)v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (uint64_t)&v10[*(int *)(v8 + 48)];
  sub_1000637E0(v14, (uint64_t)v10, type metadata accessor for NANGenericServiceProtocol.Attribute);
  sub_1000637E0((uint64_t)v15, v11, type metadata accessor for NANGenericServiceProtocol.Attribute);
  v15 = v10;
  v12 = (char *)sub_100078494 + 4 * byte_10033C744[swift_getEnumCaseMultiPayload(v10, v5)];
  __asm { BR              X10 }
}

BOOL sub_100078494()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);

  v4 = *(_QWORD *)(v3 - 96);
  sub_1000637E0(v4, v0, type metadata accessor for NANGenericServiceProtocol.Attribute);
  if (swift_getEnumCaseMultiPayload(v2, v1))
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v3 - 136) + 8))(v0, *(_QWORD *)(v3 - 128));
    sub_100033A84(v4, &qword_100406118);
    return 0;
  }
  else
  {
    v7 = *(_QWORD *)(v3 - 136);
    v6 = *(_QWORD *)(v3 - 128);
    v8 = *(_QWORD *)(v3 - 160);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(v8, v2, v6);
    v9 = sub_100011DE4(&qword_100406120, (uint64_t (*)(uint64_t))&type metadata accessor for NWEndpoint.Port, (uint64_t)&protocol conformance descriptor for NWEndpoint.Port);
    dispatch thunk of RawRepresentable.rawValue.getter((_QWORD *)(v3 - 82), v6, v9);
    dispatch thunk of RawRepresentable.rawValue.getter((_QWORD *)(v3 - 84), v6, v9);
    v5 = *(unsigned __int16 *)(v3 - 82) == *(unsigned __int16 *)(v3 - 84);
    v10 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
    v10(v8, v6);
    v10(v0, v6);
    sub_100063824(v4, type metadata accessor for NANGenericServiceProtocol.Attribute);
  }
  return v5;
}

uint64_t type metadata accessor for NANGenericServiceProtocol.Attribute(uint64_t a1)
{
  uint64_t result;

  result = qword_1004060B8;
  if (!qword_1004060B8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for NANGenericServiceProtocol.Attribute);
  return result;
}

uint64_t sub_100078AC4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100012C44((uint64_t *)&unk_10040D200);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_100078B0C(uint64_t result)
{
  unsigned int v1;

  if (result == 221)
    v1 = 7;
  else
    v1 = 8;
  if (result >= 7u)
    return v1;
  else
    return result;
}

void sub_100078B2C(uint64_t a1, char a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  _QWORD *v19;
  char v20;
  unint64_t v21;
  uint64_t v22;
  _BOOL8 v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  char v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t (*v35)(uint64_t);
  uint64_t v36;
  char *v37;
  char v38;
  uint64_t v39;
  uint64_t (*v40)(uint64_t);
  _QWORD *v41;
  char v42;
  unint64_t v43;
  uint64_t v44;
  _BOOL8 v45;
  uint64_t v46;
  char v47;
  unint64_t v48;
  char v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v61 = *(_QWORD *)(type metadata accessor for NANGenericServiceProtocol.Attribute(0) - 8);
  __chkstk_darwin();
  v57 = (uint64_t)&v53 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v9 = (char *)&v53 - v8;
  sub_100012C44(&qword_100404EF0);
  v10 = __chkstk_darwin();
  v13 = (char *)&v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD *)(a1 + 16);
  if (v14)
  {
    v55 = v3;
    v56 = a1;
    v15 = (uint64_t)&v13[*(int *)(v10 + 48)];
    v54 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
    v16 = a1 + v54;
    v60 = *(_QWORD *)(v11 + 72);
    swift_bridgeObjectRetain(a1);
    sub_100033B48(v16, (uint64_t)v13, &qword_100404EF0);
    v58 = v13;
    v59 = v15;
    v17 = *v13;
    v18 = (uint64_t)v9;
    sub_100033AC0(v15, (uint64_t)v9, type metadata accessor for NANGenericServiceProtocol.Attribute);
    v19 = (_QWORD *)*a3;
    v21 = sub_10002D744(v17);
    v22 = v19[2];
    v23 = (v20 & 1) == 0;
    v24 = v22 + v23;
    if (__OFADD__(v22, v23))
    {
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }
    v25 = v20;
    if (v19[3] < v24)
    {
      sub_100141840(v24, a2 & 1);
      v26 = sub_10002D744(v17);
      if ((v25 & 1) != (v27 & 1))
      {
LABEL_28:
        KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for NANGenericServiceProtocol.AttributeID);
        __break(1u);
        return;
      }
      v21 = v26;
      v28 = (_QWORD *)*a3;
      if ((v25 & 1) == 0)
        goto LABEL_12;
LABEL_9:
      v29 = v57;
      sub_100033AC0((uint64_t)v9, v57, type metadata accessor for NANGenericServiceProtocol.Attribute);
      sub_10007B9F4(v29, v28[7] + *(_QWORD *)(v61 + 72) * v21);
      v30 = v14 - 1;
      if (v14 == 1)
      {
LABEL_14:
        swift_bridgeObjectRelease(v56);
        return;
      }
LABEL_16:
      v34 = v56 + v60 + v54;
      v35 = type metadata accessor for NANGenericServiceProtocol.Attribute;
      while (1)
      {
        v37 = v58;
        sub_100033B48(v34, (uint64_t)v58, &qword_100404EF0);
        v38 = *v37;
        v39 = (uint64_t)v9;
        v40 = v35;
        sub_100033AC0(v59, v39, v35);
        v41 = (_QWORD *)*a3;
        v43 = sub_10002D744(v38);
        v44 = v41[2];
        v45 = (v42 & 1) == 0;
        v46 = v44 + v45;
        if (__OFADD__(v44, v45))
          goto LABEL_26;
        v47 = v42;
        if (v41[3] < v46)
        {
          sub_100141840(v46, 1);
          v48 = sub_10002D744(v38);
          if ((v47 & 1) != (v49 & 1))
            goto LABEL_28;
          v43 = v48;
        }
        v50 = (_QWORD *)*a3;
        if ((v47 & 1) != 0)
        {
          v36 = v57;
          v35 = v40;
          sub_100033AC0(v18, v57, v40);
          sub_10007B9F4(v36, v50[7] + *(_QWORD *)(v61 + 72) * v43);
        }
        else
        {
          v50[(v43 >> 6) + 8] |= 1 << v43;
          *(_BYTE *)(v50[6] + v43) = v38;
          v35 = v40;
          sub_100033AC0(v18, v50[7] + *(_QWORD *)(v61 + 72) * v43, v40);
          v51 = v50[2];
          v32 = __OFADD__(v51, 1);
          v52 = v51 + 1;
          if (v32)
            goto LABEL_27;
          v50[2] = v52;
        }
        v34 += v60;
        --v30;
        v9 = (char *)v18;
        if (!v30)
          goto LABEL_14;
      }
    }
    if ((a2 & 1) != 0)
    {
      v28 = (_QWORD *)*a3;
      if ((v20 & 1) != 0)
        goto LABEL_9;
    }
    else
    {
      sub_100146FF4();
      v28 = (_QWORD *)*a3;
      if ((v25 & 1) != 0)
        goto LABEL_9;
    }
LABEL_12:
    v28[(v21 >> 6) + 8] |= 1 << v21;
    *(_BYTE *)(v28[6] + v21) = v17;
    sub_100033AC0((uint64_t)v9, v28[7] + *(_QWORD *)(v61 + 72) * v21, type metadata accessor for NANGenericServiceProtocol.Attribute);
    v31 = v28[2];
    v32 = __OFADD__(v31, 1);
    v33 = v31 + 1;
    if (v32)
    {
LABEL_27:
      __break(1u);
      goto LABEL_28;
    }
    v28[2] = v33;
    v30 = v14 - 1;
    if (v14 == 1)
      goto LABEL_14;
    goto LABEL_16;
  }
}

void *sub_100078F20(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;

  v2 = type metadata accessor for NANGenericServiceProtocol.Attribute(0);
  v38 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin();
  v33 = (uint64_t)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v37 = (uint64_t)&v29 - v4;
  sub_100012C44(&qword_100406250);
  __chkstk_darwin();
  v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100012C44(&qword_100404EF0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin();
  v36 = (uint64_t)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v32 = (uint64_t)&v29 - v10;
  sub_100012C44(&qword_100404EE8);
  __chkstk_darwin();
  v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v15 = (char *)&v29 - v14;
  v16 = *(_QWORD *)(a1 + 16);
  if (v16)
  {
    v17 = a1 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
    v35 = *(_QWORD *)(v13 + 72);
    v30 = a1;
    swift_bridgeObjectRetain(a1);
    v18 = _swiftEmptyArrayStorage;
    v31 = v2;
    do
    {
      sub_100033B48(v17, (uint64_t)v15, &qword_100404EE8);
      sub_100033B48((uint64_t)v15, (uint64_t)v12, &qword_100404EE8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v12, 1, v2) != 1)
      {
        v34 = v18;
        v19 = v37;
        sub_100033AC0((uint64_t)v12, v37, type metadata accessor for NANGenericServiceProtocol.Attribute);
        v20 = v19;
        v21 = v33;
        sub_1000637E0(v20, v33, type metadata accessor for NANGenericServiceProtocol.Attribute);
        v22 = (char *)&loc_1000791A8 + 4 * byte_10033C74D[swift_getEnumCaseMultiPayload(v21, v2)];
        __asm { BR              X10 }
      }
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, 1, 1, v7);
      sub_100033A84((uint64_t)v15, &qword_100404EE8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
      {
        sub_100033A84((uint64_t)v6, &qword_100406250);
      }
      else
      {
        v23 = v32;
        sub_100063EB8((uint64_t)v6, v32, &qword_100404EF0);
        sub_100063EB8(v23, v36, &qword_100404EF0);
        if ((swift_isUniquelyReferenced_nonNull_native(v18) & 1) == 0)
          v18 = (_QWORD *)sub_1000B1B44(0, v18[2] + 1, 1, (unint64_t)v18);
        v25 = v18[2];
        v24 = v18[3];
        if (v25 >= v24 >> 1)
          v18 = (_QWORD *)sub_1000B1B44(v24 > 1, v25 + 1, 1, (unint64_t)v18);
        v18[2] = v25 + 1;
        sub_100063EB8(v36, (uint64_t)v18+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(_QWORD *)(v8 + 72) * v25, &qword_100404EF0);
        v2 = v31;
      }
      v17 += v35;
      --v16;
    }
    while (v16);
    swift_bridgeObjectRelease_n(v30, 2);
    v26 = v18[2];
    if (v26)
      goto LABEL_14;
LABEL_16:
    v27 = &_swiftEmptyDictionarySingleton;
    goto LABEL_17;
  }
  swift_bridgeObjectRelease(a1);
  v18 = _swiftEmptyArrayStorage;
  v26 = _swiftEmptyArrayStorage[2];
  if (!v26)
    goto LABEL_16;
LABEL_14:
  sub_100012C44(&qword_100404EF8);
  v27 = (void *)static _DictionaryStorage.allocate(capacity:)(v26);
LABEL_17:
  v39 = v27;
  sub_100078B2C((uint64_t)v18, 1, &v39);
  swift_bridgeObjectRelease(v18);
  return v39;
}

void *sub_100079414(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  int64_t v15;
  _QWORD *v16;
  unint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD v27[3];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v3 = *(_QWORD *)(sub_100012C44(&qword_100404EE8) - 8);
  __chkstk_darwin();
  v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = a1[3];
  v7 = a1[4];
  v8 = sub_10003259C(a1, v6);
  dispatch thunk of Decoder.unkeyedContainer()(v27, v6, v7);
  if (v1)
  {
    sub_100014430(a1);
  }
  else
  {
    v9 = sub_100012C44(&qword_100406230);
    v10 = v28;
    v11 = v29;
    sub_100034C68((uint64_t)v27, v28);
    v12 = sub_10007B978();
    dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)(v9, v9, v12, v10, v11);
    v14 = v30;
    v15 = *(_QWORD *)(v30 + 16);
    if (v15)
    {
      v25 = a1;
      v26 = _swiftEmptyArrayStorage;
      sub_100074FAC(0, v15, 0);
      v16 = v26;
      v24 = v14;
      v17 = (unint64_t *)(v14 + 48);
      do
      {
        v18 = *(v17 - 1);
        v19 = *v17;
        v20 = *((unsigned __int8 *)v17 - 16);
        sub_100031FEC(v18, *v17);
        sub_100031FEC(v18, v19);
        sub_10006E918(v20);
        v21 = type metadata accessor for NANGenericServiceProtocol.Attribute(0);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v5, 0, 1, v21);
        sub_10000E614(v18, v19);
        v26 = v16;
        v23 = v16[2];
        v22 = v16[3];
        if (v23 >= v22 >> 1)
        {
          sub_100074FAC(v22 > 1, v23 + 1, 1);
          v16 = v26;
        }
        v17 += 3;
        v16[2] = v23 + 1;
        sub_100063EB8((uint64_t)v5, (uint64_t)v16+ ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(_QWORD *)(v3 + 72) * v23, &qword_100404EE8);
        --v15;
      }
      while (v15);
      swift_bridgeObjectRelease(v24);
      a1 = v25;
    }
    else
    {
      swift_bridgeObjectRelease(v30);
      v16 = _swiftEmptyArrayStorage;
    }
    v8 = sub_100078F20((uint64_t)v16);
    sub_100014430(v27);
    sub_100014430(a1);
  }
  return v8;
}

uint64_t sub_1000796C0(uint64_t a1, unint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;

  sub_100012C44(&qword_100404EE8);
  __chkstk_darwin();
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v8 = (char *)&v16 - v7;
  v9 = type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
  __chkstk_darwin();
  v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *v2;
  sub_1000339F4(a1, a2);
  sub_100071FA8(v12, (uint64_t)v11);
  v13 = &v11[*(int *)(v9 + 28)];
  sub_10000E658(*(_QWORD *)v13, *((_QWORD *)v13 + 1));
  *(_QWORD *)v13 = a1;
  *((_QWORD *)v13 + 1) = a2;
  sub_1000637E0((uint64_t)v11, (uint64_t)v8, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
  v14 = type metadata accessor for NANGenericServiceProtocol.Attribute(0);
  swift_storeEnumTagMultiPayload(v8, v14, 7);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v8, 0, 1, v14);
  sub_100033B48((uint64_t)v8, (uint64_t)v6, &qword_100404EE8);
  sub_10002548C((uint64_t)v6, 7);
  sub_100063824((uint64_t)v11, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
  return sub_100033A84((uint64_t)v8, &qword_100404EE8);
}

uint64_t sub_100079848(uint64_t a1, unint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;

  sub_100012C44(&qword_100404EE8);
  __chkstk_darwin();
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v8 = (char *)&v16 - v7;
  v9 = type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
  __chkstk_darwin();
  v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *v2;
  sub_1000339F4(a1, a2);
  sub_100071FA8(v12, (uint64_t)v11);
  v13 = &v11[*(int *)(v9 + 32)];
  sub_10000E658(*(_QWORD *)v13, *((_QWORD *)v13 + 1));
  *(_QWORD *)v13 = a1;
  *((_QWORD *)v13 + 1) = a2;
  sub_1000637E0((uint64_t)v11, (uint64_t)v8, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
  v14 = type metadata accessor for NANGenericServiceProtocol.Attribute(0);
  swift_storeEnumTagMultiPayload(v8, v14, 7);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v8, 0, 1, v14);
  sub_100033B48((uint64_t)v8, (uint64_t)v6, &qword_100404EE8);
  sub_10002548C((uint64_t)v6, 7);
  sub_100063824((uint64_t)v11, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
  return sub_100033A84((uint64_t)v8, &qword_100404EE8);
}

uint64_t sub_1000799D0(uint64_t a1, unint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v16;

  sub_100012C44(&qword_100404EE8);
  __chkstk_darwin();
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v8 = (char *)&v16 - v7;
  v9 = type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
  __chkstk_darwin();
  v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *v2;
  sub_1000339F4(a1, a2);
  sub_100071FA8(v12, (uint64_t)v11);
  v13 = &v11[*(int *)(v9 + 36)];
  sub_10000E658(*(_QWORD *)v13, *((_QWORD *)v13 + 1));
  *(_QWORD *)v13 = a1;
  *((_QWORD *)v13 + 1) = a2;
  sub_1000637E0((uint64_t)v11, (uint64_t)v8, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
  v14 = type metadata accessor for NANGenericServiceProtocol.Attribute(0);
  swift_storeEnumTagMultiPayload(v8, v14, 7);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v8, 0, 1, v14);
  sub_100033B48((uint64_t)v8, (uint64_t)v6, &qword_100404EE8);
  sub_10002548C((uint64_t)v6, 7);
  sub_100063824((uint64_t)v11, type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes);
  return sub_100033A84((uint64_t)v8, &qword_100404EE8);
}

unint64_t sub_100079B58()
{
  unint64_t result;

  result = qword_100406018;
  if (!qword_100406018)
  {
    result = swift_getWitnessTable(&unk_10034D6E4, &type metadata for BinaryEncoder.UnkeyedContainer);
    atomic_store(result, (unint64_t *)&qword_100406018);
  }
  return result;
}

void _s7CoreP2P25NANGenericServiceProtocolVyACSg10Foundation4DataVcfC_0(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;

  sub_100012C44(&qword_100404EE8);
  __chkstk_darwin();
  sub_100031FEC(a1, a2);
  sub_10001F11C((uint64_t)_swiftEmptyArrayStorage);
  v4 = type metadata accessor for BinaryDecoder();
  v5 = (_QWORD *)swift_allocObject(v4, 48, 7);
  v5[5] = &_swiftEmptyDictionarySingleton;
  v5[2] = a1;
  v5[3] = a2;
  __asm { BR              X9 }
}

uint64_t sub_100079C6C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  unint64_t v7;
  uint64_t v8;

  *(_QWORD *)(v4 - 224) = v3;
  v2[4] = (int)v3;
  swift_beginAccess(a1, v4 - 112, 1, 0);
  v5 = v2[5];
  v2[5] = v1;
  v6 = swift_bridgeObjectRelease(v5);
  v8 = v2[2];
  v7 = v2[3];
  *(_QWORD *)(v4 - 192) = v8;
  *(_QWORD *)(v4 - 200) = v8 >> 32;
  *(_QWORD *)(v4 - 208) = _swiftEmptyArrayStorage;
  return ((uint64_t (*)(__n128))((char *)sub_100079CF4 + 4 * byte_10033C75A[v7 >> 62]))(v6);
}

void *sub_100079CF4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  int64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  void *v32;

  if (a1 < *(_QWORD *)(v8 - 200))
  {
    *(_QWORD *)(v8 - 160) = v5;
    *(_QWORD *)(v8 - 152) = sub_100011DE4((unint64_t *)&qword_100405BB8, (uint64_t (*)(uint64_t))type metadata accessor for BinaryDecoder, v7);
    *(_QWORD *)(v8 - 184) = v2;
    swift_retain();
    sub_1002070F0((_QWORD *)(v8 - 184), v8 - 144);
    if (v3)
    {
      *(_QWORD *)(v8 - 144) = v3;
      swift_errorRetain(v3);
      v9 = sub_100012C44((uint64_t *)&unk_10040C360);
      if ((swift_dynamicCast(v8 - 184, v8 - 144, v9, v1, 0) & 1) != 0)
      {
        v10 = *(_QWORD *)(v8 - 184);
        v11 = *(unsigned __int8 *)(v8 - 168);
        if (v11 == 2)
        {
          if ((v10 & 1) != 0)
          {
            swift_errorRelease(v3);
            swift_errorRelease(*(_QWORD *)(v8 - 144));
            goto LABEL_28;
          }
        }
        else
        {
          sub_100013024(v10, *(_QWORD *)(v8 - 176), v11);
        }
      }
      swift_bridgeObjectRelease(*(_QWORD *)(v8 - 208));
      swift_errorRelease(*(_QWORD *)(v8 - 144));
      swift_release(v2);
      sub_10000E614(*(_QWORD *)(v8 - 224), *(_QWORD *)(v8 - 216));
      swift_errorRelease(v3);
      return 0;
    }
    *(_DWORD *)(v8 - 228) = *(unsigned __int8 *)(v8 - 144);
    v12 = *(_QWORD *)(v8 - 136);
    *(_QWORD *)(v8 - 248) = *(_QWORD *)(v8 - 128);
    *(_QWORD *)(v8 - 240) = v12;
    if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v8 - 208)) & 1) != 0)
      v13 = *(_QWORD **)(v8 - 208);
    else
      v13 = sub_1000B24F4(0, *(_QWORD *)(*(_QWORD *)(v8 - 208) + 16) + 1, 1, *(_QWORD **)(v8 - 208));
    v15 = v13[2];
    v14 = v13[3];
    v16 = v15 + 1;
    if (v15 >= v14 >> 1)
    {
      *(_QWORD *)(v8 - 208) = v16;
      *(_QWORD *)(v8 - 256) = v15;
      v19 = sub_1000B24F4((_QWORD *)(v14 > 1), v15 + 1, 1, v13);
      v16 = *(_QWORD *)(v8 - 208);
      v15 = *(_QWORD *)(v8 - 256);
      v13 = v19;
    }
    v13[2] = v16;
    *(_QWORD *)(v8 - 208) = v13;
    v17 = &v13[3 * v15];
    *((_BYTE *)v17 + 32) = *(_DWORD *)(v8 - 228);
    v18 = *(_QWORD *)(v8 - 248);
    v17[5] = *(_QWORD *)(v8 - 240);
    v17[6] = v18;
LABEL_28:
    JUMPOUT(0x100079CDCLL);
  }
  swift_release(v2);
  v20 = *(_QWORD *)(v8 - 208);
  v21 = *(_QWORD *)(v20 + 16);
  if (v21)
  {
    *(_QWORD *)(v8 - 184) = _swiftEmptyArrayStorage;
    v22 = v20;
    sub_100074FAC(0, v21, 0);
    v23 = *(_QWORD **)(v8 - 184);
    v24 = (unint64_t *)(v22 + 48);
    do
    {
      v25 = *(v24 - 1);
      v26 = *v24;
      v27 = *((unsigned __int8 *)v24 - 16);
      sub_100031FEC(v25, *v24);
      sub_100031FEC(v25, v26);
      sub_10006E918(v27);
      if (v3)
      {
        swift_errorRelease(v3);
        v28 = type metadata accessor for NANGenericServiceProtocol.Attribute(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v4, 1, 1, v28);
        v3 = 0;
      }
      else
      {
        v29 = type metadata accessor for NANGenericServiceProtocol.Attribute(0);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v4, 0, 1, v29);
      }
      sub_10000E614(v25, v26);
      *(_QWORD *)(v8 - 184) = v23;
      v31 = v23[2];
      v30 = v23[3];
      if (v31 >= v30 >> 1)
      {
        sub_100074FAC(v30 > 1, v31 + 1, 1);
        v23 = *(_QWORD **)(v8 - 184);
      }
      v24 += 3;
      v23[2] = v31 + 1;
      sub_100063EB8(v4, (uint64_t)v23+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(_QWORD *)(v6 + 72) * v31, &qword_100404EE8);
      --v21;
    }
    while (v21);
    swift_bridgeObjectRelease(*(_QWORD *)(v8 - 208));
  }
  else
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v8 - 208));
    v23 = _swiftEmptyArrayStorage;
  }
  v32 = sub_100078F20((uint64_t)v23);
  sub_10000E614(*(_QWORD *)(v8 - 224), *(_QWORD *)(v8 - 216));
  return v32;
}

unint64_t sub_10007A040()
{
  unint64_t result;

  result = qword_100406020;
  if (!qword_100406020)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for NANGenericServiceProtocol, &type metadata for NANGenericServiceProtocol);
    atomic_store(result, (unint64_t *)&qword_100406020);
  }
  return result;
}

unint64_t sub_10007A088()
{
  unint64_t result;

  result = qword_100406028;
  if (!qword_100406028)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for NANGenericServiceProtocol.AttributeFilter, &type metadata for NANGenericServiceProtocol.AttributeFilter);
    atomic_store(result, (unint64_t *)&qword_100406028);
  }
  return result;
}

unint64_t sub_10007A0D0()
{
  unint64_t result;

  result = qword_100406030;
  if (!qword_100406030)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for NANGenericServiceProtocol.AttributeFilter, &type metadata for NANGenericServiceProtocol.AttributeFilter);
    atomic_store(result, (unint64_t *)&qword_100406030);
  }
  return result;
}

unint64_t sub_10007A118()
{
  unint64_t result;

  result = qword_100406038;
  if (!qword_100406038)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for NANGenericServiceProtocol.AttributeFilter, &type metadata for NANGenericServiceProtocol.AttributeFilter);
    atomic_store(result, (unint64_t *)&qword_100406038);
  }
  return result;
}

unint64_t sub_10007A160()
{
  unint64_t result;

  result = qword_100406040;
  if (!qword_100406040)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for NANGenericServiceProtocol.AttributeFilter, &type metadata for NANGenericServiceProtocol.AttributeFilter);
    atomic_store(result, (unint64_t *)&qword_100406040);
  }
  return result;
}

ValueMetadata *type metadata accessor for NANGenericServiceProtocol()
{
  return &type metadata for NANGenericServiceProtocol;
}

ValueMetadata *type metadata accessor for NANGenericServiceProtocol.AttributeFilter()
{
  return &type metadata for NANGenericServiceProtocol.AttributeFilter;
}

uint64_t getEnumTagSinglePayload for NANCipherSuite(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF9)
    goto LABEL_17;
  if (a2 + 7 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 7) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 7;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 7;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 7;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 8;
  v8 = v6 - 8;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for NANGenericServiceProtocol.AttributeID(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 7 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 7) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF9)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF8)
    return ((uint64_t (*)(void))((char *)&loc_10007A2A0 + 4 * byte_10033C763[v4]))();
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_10007A2D4 + 4 * byte_10033C75E[v4]))();
}

uint64_t sub_10007A2D4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10007A2DC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10007A2E4);
  return result;
}

uint64_t sub_10007A2F0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10007A2F8);
  *(_BYTE *)result = a2 + 7;
  return result;
}

uint64_t sub_10007A2FC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10007A304(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NANGenericServiceProtocol.AttributeID()
{
  return &type metadata for NANGenericServiceProtocol.AttributeID;
}

char *sub_10007A320(char *a1, char *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int (*v56)(char *, uint64_t, uint64_t);
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v9 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = (char *)(v9 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload(a2, a3))
    {
      case 0u:
        v8 = type metadata accessor for NWEndpoint.Port(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
        swift_storeEnumTagMultiPayload(a1, a3, 0);
        break;
      case 2u:
        v11 = *((_QWORD *)a2 + 1);
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *((_QWORD *)a1 + 1) = v11;
        swift_bridgeObjectRetain(v11);
        swift_storeEnumTagMultiPayload(a1, a3, 2);
        break;
      case 3u:
        v12 = *((_QWORD *)a2 + 1);
        *(_QWORD *)a1 = *(_QWORD *)a2;
        *((_QWORD *)a1 + 1) = v12;
        swift_bridgeObjectRetain(v12);
        swift_storeEnumTagMultiPayload(a1, a3, 3);
        break;
      case 4u:
        v14 = *(_QWORD *)a2;
        v13 = *((_QWORD *)a2 + 1);
        sub_100031FEC(v14, v13);
        *(_QWORD *)a1 = v14;
        *((_QWORD *)a1 + 1) = v13;
        swift_storeEnumTagMultiPayload(a1, a3, 4);
        break;
      case 5u:
        v16 = *(_QWORD *)a2;
        v15 = *((_QWORD *)a2 + 1);
        sub_100031FEC(v16, v15);
        *(_QWORD *)a1 = v16;
        *((_QWORD *)a1 + 1) = v15;
        swift_storeEnumTagMultiPayload(a1, a3, 5);
        break;
      case 6u:
        v18 = *(_QWORD *)a2;
        v17 = *((_QWORD *)a2 + 1);
        sub_100031FEC(v18, v17);
        *(_QWORD *)a1 = v18;
        *((_QWORD *)a1 + 1) = v17;
        swift_storeEnumTagMultiPayload(a1, a3, 6);
        break;
      case 7u:
        *a1 = *a2;
        *(_WORD *)(a1 + 1) = *(_WORD *)(a2 + 1);
        v19 = (int *)type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
        v20 = v19[6];
        v21 = &a1[v20];
        v22 = &a2[v20];
        v23 = type metadata accessor for P256.KeyAgreement.PublicKey(0);
        v24 = *(_QWORD *)(v23 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
        {
          v25 = sub_100012C44((uint64_t *)&unk_10040D200);
          memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v21, v22, v23);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
        }
        v28 = v19[7];
        v29 = &a1[v28];
        v30 = &a2[v28];
        v31 = *((_QWORD *)v30 + 1);
        if (v31 >> 60 == 15)
        {
          *(_OWORD *)v29 = *(_OWORD *)v30;
        }
        else
        {
          v32 = *(_QWORD *)v30;
          sub_100031FEC(*(_QWORD *)v30, *((_QWORD *)v30 + 1));
          *(_QWORD *)v29 = v32;
          *((_QWORD *)v29 + 1) = v31;
        }
        v33 = v19[8];
        v34 = &a1[v33];
        v35 = &a2[v33];
        v36 = *((_QWORD *)v35 + 1);
        if (v36 >> 60 == 15)
        {
          *(_OWORD *)v34 = *(_OWORD *)v35;
        }
        else
        {
          v37 = *(_QWORD *)v35;
          sub_100031FEC(*(_QWORD *)v35, *((_QWORD *)v35 + 1));
          *(_QWORD *)v34 = v37;
          *((_QWORD *)v34 + 1) = v36;
        }
        v38 = v19[9];
        v39 = &a1[v38];
        v40 = &a2[v38];
        v41 = *((_QWORD *)v40 + 1);
        if (v41 >> 60 == 15)
        {
          *(_OWORD *)v39 = *(_OWORD *)v40;
        }
        else
        {
          v42 = *(_QWORD *)v40;
          sub_100031FEC(*(_QWORD *)v40, *((_QWORD *)v40 + 1));
          *(_QWORD *)v39 = v42;
          *((_QWORD *)v39 + 1) = v41;
        }
        v43 = v19[10];
        v44 = &a1[v43];
        v45 = &a2[v43];
        v46 = type metadata accessor for UUID(0);
        v47 = *(_QWORD *)(v46 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v47 + 48))(v45, 1, v46))
        {
          v48 = sub_100012C44(&qword_10040E1F0);
          memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v47 + 16))(v44, v45, v46);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v47 + 56))(v44, 0, 1, v46);
        }
        v49 = v19[11];
        v50 = *(_QWORD *)&a2[v49];
        *(_QWORD *)&a1[v49] = v50;
        v51 = v19[12];
        v52 = &a1[v51];
        v53 = &a2[v51];
        v54 = type metadata accessor for NANInternetSharingStatistics.Requester(0);
        v55 = *(_QWORD *)(v54 - 8);
        v56 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v55 + 48);
        swift_bridgeObjectRetain(v50);
        if (v56(v53, 1, v54))
        {
          v57 = sub_100012C44((uint64_t *)&unk_10040DAB0);
          memcpy(v52, v53, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
        }
        else
        {
          v58 = type metadata accessor for DispatchTimeInterval(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v58 - 8) + 16))(v52, v53, v58);
          v52[*(int *)(v54 + 20)] = v53[*(int *)(v54 + 20)];
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v55 + 56))(v52, 0, 1, v54);
        }
        v59 = v19[13];
        v60 = &a1[v59];
        v61 = &a2[v59];
        *(_OWORD *)v60 = *(_OWORD *)v61;
        *(_OWORD *)(v60 + 9) = *(_OWORD *)(v61 + 9);
        swift_storeEnumTagMultiPayload(a1, a3, 7);
        break;
      case 8u:
        *(_WORD *)a1 = *(_WORD *)a2;
        a1[2] = a2[2];
        v27 = *((_QWORD *)a2 + 1);
        v26 = *((_QWORD *)a2 + 2);
        sub_100031FEC(v27, v26);
        *((_QWORD *)a1 + 1) = v27;
        *((_QWORD *)a1 + 2) = v26;
        swift_storeEnumTagMultiPayload(a1, a3, 8);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(v5 + 64));
        break;
    }
  }
  return a1;
}

void sub_10007A7B0(uint64_t *a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  int *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v2 = a1;
  switch(swift_getEnumCaseMultiPayload(a1, a2))
  {
    case 0u:
      v5 = type metadata accessor for NWEndpoint.Port(0);
      goto LABEL_20;
    case 2u:
    case 3u:
      swift_bridgeObjectRelease(v2[1]);
      return;
    case 4u:
    case 5u:
    case 6u:
      v3 = *v2;
      v4 = v2[1];
      goto LABEL_18;
    case 7u:
      v6 = (int *)type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
      v7 = (char *)v2 + v6[6];
      v8 = type metadata accessor for P256.KeyAgreement.PublicKey(0);
      v9 = *(_QWORD *)(v8 - 8);
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8))
        (*(void (**)(char *, uint64_t))(v9 + 8))(v7, v8);
      v10 = (uint64_t *)((char *)v2 + v6[7]);
      v11 = v10[1];
      if (v11 >> 60 != 15)
        sub_10000E614(*v10, v11);
      v12 = (uint64_t *)((char *)v2 + v6[8]);
      v13 = v12[1];
      if (v13 >> 60 != 15)
        sub_10000E614(*v12, v13);
      v14 = (uint64_t *)((char *)v2 + v6[9]);
      v15 = v14[1];
      if (v15 >> 60 != 15)
        sub_10000E614(*v14, v15);
      v16 = (char *)v2 + v6[10];
      v17 = type metadata accessor for UUID(0);
      v18 = *(_QWORD *)(v17 - 8);
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
        (*(void (**)(char *, uint64_t))(v18 + 8))(v16, v17);
      swift_bridgeObjectRelease(*(uint64_t *)((char *)v2 + v6[11]));
      v2 = (uint64_t *)((char *)v2 + v6[12]);
      v19 = type metadata accessor for NANInternetSharingStatistics.Requester(0);
      if (!(*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 48))(v2, 1, v19))
      {
        v5 = type metadata accessor for DispatchTimeInterval(0);
LABEL_20:
        (*(void (**)(uint64_t *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v2, v5);
      }
      return;
    case 8u:
      v3 = v2[1];
      v4 = v2[2];
LABEL_18:
      sub_10000E614(v3, v4);
      break;
    default:
      return;
  }
}

char *sub_10007A998(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int (*v55)(char *, uint64_t, uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;

  switch(swift_getEnumCaseMultiPayload(a2, a3))
  {
    case 0u:
      v6 = type metadata accessor for NWEndpoint.Port(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
      v7 = a1;
      v8 = a3;
      v9 = 0;
      goto LABEL_29;
    case 2u:
      v10 = *((_QWORD *)a2 + 1);
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *((_QWORD *)a1 + 1) = v10;
      swift_bridgeObjectRetain(v10);
      v7 = a1;
      v8 = a3;
      v9 = 2;
      goto LABEL_29;
    case 3u:
      v11 = *((_QWORD *)a2 + 1);
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *((_QWORD *)a1 + 1) = v11;
      swift_bridgeObjectRetain(v11);
      v7 = a1;
      v8 = a3;
      v9 = 3;
      goto LABEL_29;
    case 4u:
      v13 = *(_QWORD *)a2;
      v12 = *((_QWORD *)a2 + 1);
      sub_100031FEC(v13, v12);
      *(_QWORD *)a1 = v13;
      *((_QWORD *)a1 + 1) = v12;
      v7 = a1;
      v8 = a3;
      v9 = 4;
      goto LABEL_29;
    case 5u:
      v15 = *(_QWORD *)a2;
      v14 = *((_QWORD *)a2 + 1);
      sub_100031FEC(v15, v14);
      *(_QWORD *)a1 = v15;
      *((_QWORD *)a1 + 1) = v14;
      v7 = a1;
      v8 = a3;
      v9 = 5;
      goto LABEL_29;
    case 6u:
      v17 = *(_QWORD *)a2;
      v16 = *((_QWORD *)a2 + 1);
      sub_100031FEC(v17, v16);
      *(_QWORD *)a1 = v17;
      *((_QWORD *)a1 + 1) = v16;
      v7 = a1;
      v8 = a3;
      v9 = 6;
      goto LABEL_29;
    case 7u:
      *a1 = *a2;
      *(_WORD *)(a1 + 1) = *(_WORD *)(a2 + 1);
      v18 = (int *)type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
      v19 = v18[6];
      v20 = &a1[v19];
      v21 = &a2[v19];
      v22 = type metadata accessor for P256.KeyAgreement.PublicKey(0);
      v23 = *(_QWORD *)(v22 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
      {
        v24 = sub_100012C44((uint64_t *)&unk_10040D200);
        memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v20, v21, v22);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
      }
      v27 = v18[7];
      v28 = &a1[v27];
      v29 = &a2[v27];
      v30 = *((_QWORD *)v29 + 1);
      if (v30 >> 60 == 15)
      {
        *(_OWORD *)v28 = *(_OWORD *)v29;
      }
      else
      {
        v31 = *(_QWORD *)v29;
        sub_100031FEC(*(_QWORD *)v29, *((_QWORD *)v29 + 1));
        *(_QWORD *)v28 = v31;
        *((_QWORD *)v28 + 1) = v30;
      }
      v32 = v18[8];
      v33 = &a1[v32];
      v34 = &a2[v32];
      v35 = *((_QWORD *)v34 + 1);
      if (v35 >> 60 == 15)
      {
        *(_OWORD *)v33 = *(_OWORD *)v34;
      }
      else
      {
        v36 = *(_QWORD *)v34;
        sub_100031FEC(*(_QWORD *)v34, *((_QWORD *)v34 + 1));
        *(_QWORD *)v33 = v36;
        *((_QWORD *)v33 + 1) = v35;
      }
      v37 = v18[9];
      v38 = &a1[v37];
      v39 = &a2[v37];
      v40 = *((_QWORD *)v39 + 1);
      if (v40 >> 60 == 15)
      {
        *(_OWORD *)v38 = *(_OWORD *)v39;
      }
      else
      {
        v41 = *(_QWORD *)v39;
        sub_100031FEC(*(_QWORD *)v39, *((_QWORD *)v39 + 1));
        *(_QWORD *)v38 = v41;
        *((_QWORD *)v38 + 1) = v40;
      }
      v42 = v18[10];
      v43 = &a1[v42];
      v44 = &a2[v42];
      v45 = type metadata accessor for UUID(0);
      v46 = *(_QWORD *)(v45 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v46 + 48))(v44, 1, v45))
      {
        v47 = sub_100012C44(&qword_10040E1F0);
        memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v46 + 16))(v43, v44, v45);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v46 + 56))(v43, 0, 1, v45);
      }
      v48 = v18[11];
      v49 = *(_QWORD *)&a2[v48];
      *(_QWORD *)&a1[v48] = v49;
      v50 = v18[12];
      v51 = &a1[v50];
      v52 = &a2[v50];
      v53 = type metadata accessor for NANInternetSharingStatistics.Requester(0);
      v54 = *(_QWORD *)(v53 - 8);
      v55 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v54 + 48);
      swift_bridgeObjectRetain(v49);
      if (v55(v52, 1, v53))
      {
        v56 = sub_100012C44((uint64_t *)&unk_10040DAB0);
        memcpy(v51, v52, *(_QWORD *)(*(_QWORD *)(v56 - 8) + 64));
      }
      else
      {
        v57 = type metadata accessor for DispatchTimeInterval(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v57 - 8) + 16))(v51, v52, v57);
        v51[*(int *)(v53 + 20)] = v52[*(int *)(v53 + 20)];
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v54 + 56))(v51, 0, 1, v53);
      }
      v58 = v18[13];
      v59 = &a1[v58];
      v60 = &a2[v58];
      *(_OWORD *)v59 = *(_OWORD *)v60;
      *(_OWORD *)(v59 + 9) = *(_OWORD *)(v60 + 9);
      v7 = a1;
      v8 = a3;
      v9 = 7;
      goto LABEL_29;
    case 8u:
      *(_WORD *)a1 = *(_WORD *)a2;
      a1[2] = a2[2];
      v26 = *((_QWORD *)a2 + 1);
      v25 = *((_QWORD *)a2 + 2);
      sub_100031FEC(v26, v25);
      *((_QWORD *)a1 + 1) = v26;
      *((_QWORD *)a1 + 2) = v25;
      v7 = a1;
      v8 = a3;
      v9 = 8;
LABEL_29:
      swift_storeEnumTagMultiPayload(v7, v8, v9);
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

char *sub_10007ADE4(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int16 v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int (*v56)(char *, uint64_t, uint64_t);
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  __int128 v62;

  if (a1 != a2)
  {
    sub_100063824((uint64_t)a1, type metadata accessor for NANGenericServiceProtocol.Attribute);
    switch(swift_getEnumCaseMultiPayload(a2, a3))
    {
      case 0u:
        v6 = type metadata accessor for NWEndpoint.Port(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
        v7 = a1;
        v8 = a3;
        v9 = 0;
        goto LABEL_30;
      case 2u:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        v10 = *((_QWORD *)a2 + 1);
        *((_QWORD *)a1 + 1) = v10;
        swift_bridgeObjectRetain(v10);
        v7 = a1;
        v8 = a3;
        v9 = 2;
        goto LABEL_30;
      case 3u:
        *(_QWORD *)a1 = *(_QWORD *)a2;
        v11 = *((_QWORD *)a2 + 1);
        *((_QWORD *)a1 + 1) = v11;
        swift_bridgeObjectRetain(v11);
        v7 = a1;
        v8 = a3;
        v9 = 3;
        goto LABEL_30;
      case 4u:
        v13 = *(_QWORD *)a2;
        v12 = *((_QWORD *)a2 + 1);
        sub_100031FEC(v13, v12);
        *(_QWORD *)a1 = v13;
        *((_QWORD *)a1 + 1) = v12;
        v7 = a1;
        v8 = a3;
        v9 = 4;
        goto LABEL_30;
      case 5u:
        v15 = *(_QWORD *)a2;
        v14 = *((_QWORD *)a2 + 1);
        sub_100031FEC(v15, v14);
        *(_QWORD *)a1 = v15;
        *((_QWORD *)a1 + 1) = v14;
        v7 = a1;
        v8 = a3;
        v9 = 5;
        goto LABEL_30;
      case 6u:
        v17 = *(_QWORD *)a2;
        v16 = *((_QWORD *)a2 + 1);
        sub_100031FEC(v17, v16);
        *(_QWORD *)a1 = v17;
        *((_QWORD *)a1 + 1) = v16;
        v7 = a1;
        v8 = a3;
        v9 = 6;
        goto LABEL_30;
      case 7u:
        *a1 = *a2;
        *(_WORD *)(a1 + 1) = *(_WORD *)(a2 + 1);
        v18 = (int *)type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
        v19 = v18[6];
        v20 = &a1[v19];
        v21 = &a2[v19];
        v22 = type metadata accessor for P256.KeyAgreement.PublicKey(0);
        v23 = *(_QWORD *)(v22 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
        {
          v24 = sub_100012C44((uint64_t *)&unk_10040D200);
          memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v20, v21, v22);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
        }
        v28 = v18[7];
        v29 = &a1[v28];
        v30 = &a2[v28];
        v31 = *((_QWORD *)v30 + 1);
        if (v31 >> 60 == 15)
        {
          *(_OWORD *)v29 = *(_OWORD *)v30;
        }
        else
        {
          v32 = *(_QWORD *)v30;
          sub_100031FEC(*(_QWORD *)v30, *((_QWORD *)v30 + 1));
          *(_QWORD *)v29 = v32;
          *((_QWORD *)v29 + 1) = v31;
        }
        v33 = v18[8];
        v34 = &a1[v33];
        v35 = &a2[v33];
        v36 = *((_QWORD *)v35 + 1);
        if (v36 >> 60 == 15)
        {
          *(_OWORD *)v34 = *(_OWORD *)v35;
        }
        else
        {
          v37 = *(_QWORD *)v35;
          sub_100031FEC(*(_QWORD *)v35, *((_QWORD *)v35 + 1));
          *(_QWORD *)v34 = v37;
          *((_QWORD *)v34 + 1) = v36;
        }
        v38 = v18[9];
        v39 = &a1[v38];
        v40 = &a2[v38];
        v41 = *((_QWORD *)v40 + 1);
        if (v41 >> 60 == 15)
        {
          *(_OWORD *)v39 = *(_OWORD *)v40;
        }
        else
        {
          v42 = *(_QWORD *)v40;
          sub_100031FEC(*(_QWORD *)v40, *((_QWORD *)v40 + 1));
          *(_QWORD *)v39 = v42;
          *((_QWORD *)v39 + 1) = v41;
        }
        v43 = v18[10];
        v44 = &a1[v43];
        v45 = &a2[v43];
        v46 = type metadata accessor for UUID(0);
        v47 = *(_QWORD *)(v46 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v47 + 48))(v45, 1, v46))
        {
          v48 = sub_100012C44(&qword_10040E1F0);
          memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v47 + 16))(v44, v45, v46);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v47 + 56))(v44, 0, 1, v46);
        }
        v49 = v18[11];
        v50 = *(_QWORD *)&a2[v49];
        *(_QWORD *)&a1[v49] = v50;
        v51 = v18[12];
        v52 = &a1[v51];
        v53 = &a2[v51];
        v54 = type metadata accessor for NANInternetSharingStatistics.Requester(0);
        v55 = *(_QWORD *)(v54 - 8);
        v56 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v55 + 48);
        swift_bridgeObjectRetain(v50);
        if (v56(v53, 1, v54))
        {
          v57 = sub_100012C44((uint64_t *)&unk_10040DAB0);
          memcpy(v52, v53, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
        }
        else
        {
          v58 = type metadata accessor for DispatchTimeInterval(0);
          (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v58 - 8) + 16))(v52, v53, v58);
          v52[*(int *)(v54 + 20)] = v53[*(int *)(v54 + 20)];
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v55 + 56))(v52, 0, 1, v54);
        }
        v59 = v18[13];
        v60 = &a1[v59];
        v61 = &a2[v59];
        v62 = *(_OWORD *)v61;
        *(_OWORD *)(v60 + 9) = *(_OWORD *)(v61 + 9);
        *(_OWORD *)v60 = v62;
        v7 = a1;
        v8 = a3;
        v9 = 7;
        goto LABEL_30;
      case 8u:
        v25 = *(_WORD *)a2;
        a1[2] = a2[2];
        *(_WORD *)a1 = v25;
        v27 = *((_QWORD *)a2 + 1);
        v26 = *((_QWORD *)a2 + 2);
        sub_100031FEC(v27, v26);
        *((_QWORD *)a1 + 1) = v27;
        *((_QWORD *)a1 + 2) = v26;
        v7 = a1;
        v8 = a3;
        v9 = 8;
LABEL_30:
        swift_storeEnumTagMultiPayload(v7, v8, v9);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

char *sub_10007B258(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  if (EnumCaseMultiPayload == 7)
  {
    *a1 = *a2;
    *(_WORD *)(a1 + 1) = *(_WORD *)(a2 + 1);
    v11 = (int *)type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
    v12 = v11[6];
    v13 = &a1[v12];
    v14 = &a2[v12];
    v15 = type metadata accessor for P256.KeyAgreement.PublicKey(0);
    v16 = *(_QWORD *)(v15 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
    {
      v17 = sub_100012C44((uint64_t *)&unk_10040D200);
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v13, v14, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
    }
    *(_OWORD *)&a1[v11[7]] = *(_OWORD *)&a2[v11[7]];
    *(_OWORD *)&a1[v11[8]] = *(_OWORD *)&a2[v11[8]];
    *(_OWORD *)&a1[v11[9]] = *(_OWORD *)&a2[v11[9]];
    v18 = v11[10];
    v19 = &a1[v18];
    v20 = &a2[v18];
    v21 = type metadata accessor for UUID(0);
    v22 = *(_QWORD *)(v21 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
    {
      v23 = sub_100012C44(&qword_10040E1F0);
      memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v19, v20, v21);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
    }
    *(_QWORD *)&a1[v11[11]] = *(_QWORD *)&a2[v11[11]];
    v24 = v11[12];
    v25 = &a1[v24];
    v26 = &a2[v24];
    v27 = type metadata accessor for NANInternetSharingStatistics.Requester(0);
    v28 = *(_QWORD *)(v27 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
    {
      v29 = sub_100012C44((uint64_t *)&unk_10040DAB0);
      memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    }
    else
    {
      v30 = type metadata accessor for DispatchTimeInterval(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v30 - 8) + 32))(v25, v26, v30);
      v25[*(int *)(v27 + 20)] = v26[*(int *)(v27 + 20)];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
    }
    v31 = v11[13];
    v32 = &a1[v31];
    v33 = &a2[v31];
    *(_OWORD *)v32 = *(_OWORD *)v33;
    *(_OWORD *)(v32 + 9) = *(_OWORD *)(v33 + 9);
    v8 = a1;
    v9 = a3;
    v10 = 7;
    goto LABEL_15;
  }
  if (!EnumCaseMultiPayload)
  {
    v7 = type metadata accessor for NWEndpoint.Port(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    v8 = a1;
    v9 = a3;
    v10 = 0;
LABEL_15:
    swift_storeEnumTagMultiPayload(v8, v9, v10);
    return a1;
  }
  memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  return a1;
}

char *sub_10007B514(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;

  if (a1 != a2)
  {
    sub_100063824((uint64_t)a1, type metadata accessor for NANGenericServiceProtocol.Attribute);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 7)
    {
      *a1 = *a2;
      *(_WORD *)(a1 + 1) = *(_WORD *)(a2 + 1);
      v11 = (int *)type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(0);
      v12 = v11[6];
      v13 = &a1[v12];
      v14 = &a2[v12];
      v15 = type metadata accessor for P256.KeyAgreement.PublicKey(0);
      v16 = *(_QWORD *)(v15 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
      {
        v17 = sub_100012C44((uint64_t *)&unk_10040D200);
        memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v13, v14, v15);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
      }
      *(_OWORD *)&a1[v11[7]] = *(_OWORD *)&a2[v11[7]];
      *(_OWORD *)&a1[v11[8]] = *(_OWORD *)&a2[v11[8]];
      *(_OWORD *)&a1[v11[9]] = *(_OWORD *)&a2[v11[9]];
      v18 = v11[10];
      v19 = &a1[v18];
      v20 = &a2[v18];
      v21 = type metadata accessor for UUID(0);
      v22 = *(_QWORD *)(v21 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
      {
        v23 = sub_100012C44(&qword_10040E1F0);
        memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v19, v20, v21);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
      }
      *(_QWORD *)&a1[v11[11]] = *(_QWORD *)&a2[v11[11]];
      v24 = v11[12];
      v25 = &a1[v24];
      v26 = &a2[v24];
      v27 = type metadata accessor for NANInternetSharingStatistics.Requester(0);
      v28 = *(_QWORD *)(v27 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
      {
        v29 = sub_100012C44((uint64_t *)&unk_10040DAB0);
        memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
      }
      else
      {
        v30 = type metadata accessor for DispatchTimeInterval(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v30 - 8) + 32))(v25, v26, v30);
        v25[*(int *)(v27 + 20)] = v26[*(int *)(v27 + 20)];
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
      }
      v31 = v11[13];
      v32 = &a1[v31];
      v33 = &a2[v31];
      *(_OWORD *)v32 = *(_OWORD *)v33;
      *(_OWORD *)(v32 + 9) = *(_OWORD *)(v33 + 9);
      v8 = a1;
      v9 = a3;
      v10 = 7;
      goto LABEL_16;
    }
    if (!EnumCaseMultiPayload)
    {
      v7 = type metadata accessor for NWEndpoint.Port(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      v8 = a1;
      v9 = a3;
      v10 = 0;
LABEL_16:
      swift_storeEnumTagMultiPayload(v8, v9, v10);
      return a1;
    }
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for NANAttribute(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a3 - 8) + 48))();
}

uint64_t storeEnumTagSinglePayload for NANAttribute(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a4 - 8) + 56))();
}

uint64_t sub_10007B804(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_storeEnumTagMultiPayload(a1, a3, a2);
}

uint64_t sub_10007B814(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[9];

  result = type metadata accessor for NWEndpoint.Port(319);
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    v5[1] = &unk_10033CA60;
    v5[2] = &unk_10033CA78;
    v5[3] = &unk_10033CA78;
    v5[4] = &unk_10033CA90;
    v5[5] = &unk_10033CA90;
    v5[6] = &unk_10033CA90;
    result = type metadata accessor for NANAttribute.CustomDeviceInformation.CustomAttributes(319);
    if (v4 <= 0x3F)
    {
      v5[7] = *(_QWORD *)(result - 8) + 64;
      v5[8] = &unk_10033CAA8;
      swift_initEnumMetadataMultiPayload(a1, 256, 9, v5);
      return 0;
    }
  }
  return result;
}

uint64_t sub_10007B8C0()
{
  return sub_100011DE4(&qword_1004060F0, type metadata accessor for NANGenericServiceProtocol.Attribute, (uint64_t)&unk_10033CAC0);
}

unint64_t sub_10007B8F0()
{
  unint64_t result;

  result = qword_1004060F8;
  if (!qword_1004060F8)
  {
    result = swift_getWitnessTable(&unk_10033CC68, &type metadata for NANGenericServiceProtocol.AttributeID);
    atomic_store(result, (unint64_t *)&qword_1004060F8);
  }
  return result;
}

unint64_t sub_10007B934()
{
  unint64_t result;

  result = qword_100406100;
  if (!qword_100406100)
  {
    result = swift_getWitnessTable(&unk_10033CC30, &type metadata for NANGenericServiceProtocol.AttributeID);
    atomic_store(result, (unint64_t *)&qword_100406100);
  }
  return result;
}

unint64_t sub_10007B978()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;

  result = qword_100406238;
  if (!qword_100406238)
  {
    v1 = sub_100013C64(&qword_100406230);
    v2 = sub_100011770(&qword_100406240, &qword_100406248, "%@\t");
    result = swift_getWitnessTable((const char *)&protocol conformance descriptor for <A> [A], v1, &v2);
    atomic_store(result, (unint64_t *)&qword_100406238);
  }
  return result;
}

uint64_t sub_10007B9F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for NANGenericServiceProtocol.Attribute(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

unint64_t sub_10007BA38()
{
  unint64_t result;

  result = qword_100406258;
  if (!qword_100406258)
  {
    result = swift_getWitnessTable(&unk_100340F9C, &type metadata for BinaryDecoder.UnkeyedContainer);
    atomic_store(result, (unint64_t *)&qword_100406258);
  }
  return result;
}

unint64_t sub_10007BA7C()
{
  unint64_t result;

  result = qword_100406260;
  if (!qword_100406260)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for OUI, &type metadata for OUI);
    atomic_store(result, (unint64_t *)&qword_100406260);
  }
  return result;
}

unint64_t sub_10007BAC0()
{
  unint64_t result;

  result = qword_100406268;
  if (!qword_100406268)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&qword_100406268);
  }
  return result;
}

uint64_t sub_10007BB04(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >= 4)
    return swift_bridgeObjectRelease(a2);
  return result;
}

char *sub_10007BB1C(char *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  char *v6;
  int64_t i;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char v15;

  v13 = result;
  v4 = a2 - (_QWORD)result;
  if (__OFSUB__(a2, result))
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (!v4)
    return (char *)_swiftEmptyArrayStorage;
  result = (char *)sub_100074FE4(0, v4 & ~(v4 >> 63), 0);
  if ((v4 & 0x8000000000000000) == 0)
  {
    v6 = (char *)a2;
    if (a2 <= (uint64_t)v13)
      v6 = v13;
    for (i = v6 - v13; ; --i)
    {
      v8 = *(_QWORD *)(a3 + 24);
      v9 = *(_QWORD *)(a3 + 32);
      sub_100034C68(a3, v8);
      v10 = sub_1000959E8();
      result = (char *)UnkeyedDecodingContainer.inferredDecode<A>()(v8, (uint64_t)&type metadata for NANBitmap.Band, v9, v10);
      if (v3)
      {
        swift_release(_swiftEmptyArrayStorage);
        return (char *)_swiftEmptyArrayStorage;
      }
      v12 = _swiftEmptyArrayStorage[2];
      v11 = _swiftEmptyArrayStorage[3];
      if (v12 >= v11 >> 1)
        result = (char *)sub_100074FE4(v11 > 1, v12 + 1, 1);
      _swiftEmptyArrayStorage[2] = v12 + 1;
      *((_BYTE *)&_swiftEmptyArrayStorage[4] + v12) = v15;
      if (a2 < (uint64_t)v13)
        break;
      if (!i)
        goto LABEL_17;
      if (!--v4)
        return (char *)_swiftEmptyArrayStorage;
    }
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
LABEL_19:
  __break(1u);
  return result;
}

char *sub_10007BC7C(char *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  __int16 v11;
  char v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *v17;
  char v19;
  __int16 v20;
  char v21;
  __int16 v22;
  char v23;

  v17 = result;
  v4 = a2 - (_QWORD)result;
  if (__OFSUB__(a2, result))
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v5 = v3;
  if (!v4)
    return (char *)_swiftEmptyArrayStorage;
  result = (char *)sub_100074FC8(0, v4 & ~(v4 >> 63), 0);
  if ((v4 & 0x8000000000000000) == 0)
  {
    v6 = (char *)a2;
    if (a2 <= (uint64_t)v17)
      v6 = v17;
    v7 = v6 - v17;
    while (1)
    {
      v8 = *(_QWORD *)(a3 + 24);
      v9 = *(_QWORD *)(a3 + 32);
      sub_100034C68(a3, v8);
      v10 = sub_100095A2C();
      result = (char *)UnkeyedDecodingContainer.inferredDecode<A>()(v8, (uint64_t)&type metadata for NANBitmap.Channel, v9, v10);
      if (v5)
      {
        swift_release(_swiftEmptyArrayStorage);
        return (char *)_swiftEmptyArrayStorage;
      }
      v11 = v22;
      v12 = v23;
      v14 = _swiftEmptyArrayStorage[2];
      v13 = _swiftEmptyArrayStorage[3];
      if (v14 >= v13 >> 1)
      {
        result = (char *)sub_100074FC8(v13 > 1, v14 + 1, 1);
        v12 = v23;
        v11 = v22;
      }
      _swiftEmptyArrayStorage[2] = v14 + 1;
      v15 = (char *)_swiftEmptyArrayStorage + 10 * v14;
      v15[32] = v19;
      *((_WORD *)v15 + 17) = v20;
      v15[36] = v21;
      *((_WORD *)v15 + 19) = v11;
      v15[40] = v12;
      if (a2 < (uint64_t)v17)
        break;
      if (!v7)
        goto LABEL_17;
      --v7;
      --v4;
      v5 = 0;
      if (!v4)
        return (char *)_swiftEmptyArrayStorage;
    }
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
LABEL_19:
  __break(1u);
  return result;
}

void *NANBitmap.Band.tvWhiteSpaces.unsafeMutableAddressor()
{
  return &static NANBitmap.Band.tvWhiteSpaces;
}

void *NANBitmap.Band.sub1GHzExcludingTVWhiteSpaces.unsafeMutableAddressor()
{
  return &static NANBitmap.Band.sub1GHzExcludingTVWhiteSpaces;
}

void *NANBitmap.Band.ghz2_4.unsafeMutableAddressor()
{
  return &static NANBitmap.Band.ghz2_4;
}

void *NANBitmap.Band.ghz3_6.unsafeMutableAddressor()
{
  return &static NANBitmap.Band.ghz3_6;
}

uint64_t static NANBitmap.Band.ghz3_6.getter()
{
  return 8;
}

void *NANBitmap.Band.ghz_4_9_to_5_0.unsafeMutableAddressor()
{
  return &static NANBitmap.Band.ghz_4_9_to_5_0;
}

void *NANBitmap.Band.ghz_60.unsafeMutableAddressor()
{
  return &static NANBitmap.Band.ghz_60;
}

void *NANBitmap.Band.ghz_45.unsafeMutableAddressor()
{
  return &static NANBitmap.Band.ghz_45;
}

uint64_t static NANBitmap.Band.ghz_45.getter()
{
  return 64;
}

void *NANBitmap.Band.ghz_6.unsafeMutableAddressor()
{
  return &static NANBitmap.Band.ghz_6;
}

uint64_t static NANBitmap.Band.ghz_6.getter()
{
  return 128;
}

void *NANBitmap.Band.all.unsafeMutableAddressor()
{
  return &static NANBitmap.Band.all;
}

uint64_t static NANBitmap.Band.all.getter()
{
  return 255;
}

CoreP2P::NANBitmap::Band_optional __swiftcall NANBitmap.Band.Iterator.next()()
{
  unsigned __int8 *v0;
  uint64_t v1;
  unsigned __int8 v2;
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  int v10;
  int v11;

  v1 = *((_QWORD *)v0 + 1);
  if (v1 <= 7)
  {
    if (v1 >= -8)
    {
      v10 = *v0;
      v8 = 8;
      v3 = *((_QWORD *)v0 + 1);
      if (v1 < 0)
        goto LABEL_23;
LABEL_19:
      if (v3 > 7)
      {
        v2 = 0;
LABEL_16:
        *((_QWORD *)v0 + 1) = v8 + 1;
        return (CoreP2P::NANBitmap::Band_optional)(v2 | ((v1 > 7) << 8));
      }
      v11 = 1 << v3;
      while ((v11 & ~v10) != 0)
      {
        *((_QWORD *)v0 + 1) = ++v3;
        if ((v3 & 0x8000000000000000) == 0)
          goto LABEL_19;
LABEL_23:
        v11 = 0;
        if (v3 <= 0xFFFFFFFFFFFFFFF8)
        {
          v2 = 0;
          v8 = -8;
          goto LABEL_16;
        }
      }
    }
    else
    {
      v3 = *((_QWORD *)v0 + 1);
    }
    v4 = v3 - 9;
    v5 = 1 << v3;
    v6 = -8;
    if (v3 > 0xFFFFFFFFFFFFFFF8)
      v6 = v3;
    if ((v3 & 0x8000000000000000) != 0)
      LOBYTE(v5) = 0;
    else
      v6 = v3;
    v7 = __CFADD__(v4, 18);
    if (v4 <= 0xFFFFFFFFFFFFFFEELL)
      v8 = v3;
    else
      v8 = v6;
    if (v3 != -9 && v7)
      v2 = v5;
    else
      v2 = 0;
    goto LABEL_16;
  }
  v2 = 0;
  return (CoreP2P::NANBitmap::Band_optional)(v2 | ((v1 > 7) << 8));
}

CoreP2P::NANBitmap::Band_optional sub_10007BF6C@<W0>(Swift::UInt8 *a1@<X8>)
{
  CoreP2P::NANBitmap::Band_optional result;

  result = NANBitmap.Band.Iterator.next()();
  *a1 = result.value.rawValue;
  a1[1] = result.is_nil;
  return result;
}

CoreP2P::NANBitmap::Band::Iterator __swiftcall NANBitmap.Band.makeIterator()()
{
  Swift::Int v0;
  CoreP2P::NANBitmap::Band::Iterator result;

  v0 = 0;
  result.currentIndex = v0;
  return result;
}

uint64_t NANBitmap.Band.bands.getter(uint64_t result)
{
  uint64_t v1;
  int v2;
  _QWORD *v3;
  int v4;
  uint64_t v5;
  unsigned __int8 v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t v12;
  char v13;
  unint64_t v14;
  unint64_t v15;

  v1 = 0;
  v2 = result;
  v3 = _swiftEmptyArrayStorage;
  while (v1 >= -8)
  {
    while (v1 < 0)
    {
      v4 = 0;
      if ((unint64_t)v1 <= 0xFFFFFFFFFFFFFFF8)
      {
        v6 = 0;
        v1 = -7;
        if (__OFADD__(-8, 1))
          goto LABEL_49;
        goto LABEL_34;
      }
LABEL_8:
      if ((v4 & ~v2) == 0)
        goto LABEL_16;
      v5 = v1 + 1;
      if (__OFADD__(v1, 1))
      {
        __break(1u);
        goto LABEL_49;
      }
      ++v1;
      if ((unint64_t)(v5 - 9) < 0xFFFFFFFFFFFFFFEFLL)
      {
        v1 = v5;
        goto LABEL_16;
      }
    }
    if ((unint64_t)v1 < 8)
    {
      v4 = 1 << v1;
      goto LABEL_8;
    }
    v6 = 0;
    v1 = 9;
    if (__OFADD__(8, 1))
      goto LABEL_49;
LABEL_34:
    switch(v6)
    {
      case 4u:
        v13 = 0;
LABEL_40:
        result = swift_isUniquelyReferenced_nonNull_native(v3);
        if ((result & 1) == 0)
        {
          result = (uint64_t)sub_1000B2618(0, v3[2] + 1, 1, v3);
          v3 = (_QWORD *)result;
        }
        v15 = v3[2];
        v14 = v3[3];
        if (v15 >= v14 >> 1)
        {
          result = (uint64_t)sub_1000B2618((_QWORD *)(v14 > 1), v15 + 1, 1, v3);
          v3 = (_QWORD *)result;
        }
        v3[2] = v15 + 1;
        *((_BYTE *)v3 + v15 + 32) = v13;
        break;
      case 0x80u:
        v13 = 2;
        goto LABEL_40;
      case 0x10u:
        v13 = 1;
        goto LABEL_40;
    }
    if (v1 >= 8)
      return (uint64_t)v3;
  }
LABEL_16:
  v7 = v1 - 9;
  v8 = 1 << v1;
  if ((unint64_t)v1 <= 7)
    v9 = v1;
  else
    v9 = 8;
  if ((unint64_t)v1 > 7)
    LOBYTE(v8) = 0;
  if ((unint64_t)v1 <= 0xFFFFFFFFFFFFFFF8)
    v10 = -8;
  else
    v10 = v1;
  if (v1 >= 0)
  {
    v11 = v8;
  }
  else
  {
    v9 = v10;
    v11 = 0;
  }
  if (v7 <= 0xFFFFFFFFFFFFFFEELL)
    v12 = v1;
  else
    v12 = v9;
  if (v7 <= 0xFFFFFFFFFFFFFFEELL)
    v6 = 0;
  else
    v6 = v11;
  v1 = v12 + 1;
  if (!__OFADD__(v12, 1))
    goto LABEL_34;
LABEL_49:
  __break(1u);
  return result;
}

uint64_t sub_10007C15C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100092C58();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_10007C1B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100092C58();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

void sub_10007C204(uint64_t a1@<X8>)
{
  _BYTE *v1;

  *(_BYTE *)a1 = *v1;
  *(_QWORD *)(a1 + 8) = 0;
}

uint64_t sub_10007C214()
{
  unsigned __int8 *v0;

  return sub_10008B9E0(*v0);
}

uint64_t sub_10007C21C(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  unsigned __int8 *v3;

  return sub_100180928(a1, a2, a3, *v3);
}

uint64_t sub_10007C224(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return Sequence.withContiguousStorageIfAvailable<A>(_:)(a1, a2, a4, a3);
}

void sub_10007C244(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_10007C24C@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  char v4;
  uint64_t result;

  v4 = sub_1001A4AC8();
  result = swift_bridgeObjectRelease(a1);
  *a2 = v4;
  return result;
}

unint64_t NANBitmap.Channel.channelBitmap.getter(unint64_t a1)
{
  return a1 >> 16;
}

uint64_t NANBitmap.Channel.channelBitmap.setter(uint64_t result)
{
  uint64_t v1;

  *(_WORD *)(v1 + 2) = result;
  return result;
}

uint64_t (*NANBitmap.Channel.channelBitmap.modify())()
{
  return NANBitmap.Channel.operatingClass.getter;
}

unint64_t NANBitmap.Channel.primaryChannelBitmap.getter(unint64_t a1)
{
  return HIDWORD(a1);
}

uint64_t NANBitmap.Channel.primaryChannelBitmap.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 4) = result;
  return result;
}

uint64_t (*NANBitmap.Channel.primaryChannelBitmap.modify())()
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t NANBitmap.Channel.auxiliaryChannelBitmap.getter(uint64_t a1, char a2)
{
  return HIWORD(a1) | ((a2 & 1) << 16);
}

uint64_t NANBitmap.Channel.auxiliaryChannelBitmap.setter(uint64_t result)
{
  uint64_t v1;

  *(_WORD *)(v1 + 6) = result;
  *(_BYTE *)(v1 + 8) = BYTE2(result) & 1;
  return result;
}

uint64_t (*NANBitmap.Channel.auxiliaryChannelBitmap.modify())()
{
  return NANBitmap.Channel.operatingClass.getter;
}

CoreP2P::NANBitmap::Channel __swiftcall NANBitmap.Channel.init(operatingClass:channelBitmap:primaryChannelBitmap:auxiliaryChannelBitmap:)(Swift::UInt8 operatingClass, Swift::UInt16 channelBitmap, Swift::UInt8 primaryChannelBitmap, Swift::UInt16_optional auxiliaryChannelBitmap)
{
  unint64_t v4;
  Swift::Bool is_nil;
  CoreP2P::NANBitmap::Channel result;

  v4 = operatingClass | ((unint64_t)channelBitmap << 16) | ((unint64_t)primaryChannelBitmap << 32) | (*(_QWORD *)&auxiliaryChannelBitmap.value << 48);
  is_nil = auxiliaryChannelBitmap.is_nil;
  result.operatingClass = v4;
  result.gap1 = BYTE1(v4);
  result.channelBitmap = WORD1(v4);
  result.primaryChannelBitmap = BYTE4(v4);
  result.gap5 = BYTE5(v4);
  result.auxiliaryChannelBitmap.value = HIWORD(v4);
  result.auxiliaryChannelBitmap.is_nil = is_nil;
  return result;
}

void NANBitmap.Channel.hash(into:)(int a1, unint64_t a2, char a3)
{
  Swift::UInt16 v4;
  unint64_t v5;
  unint64_t v6;

  v4 = HIWORD(a2);
  v5 = a2 >> 16;
  v6 = HIDWORD(a2);
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  if ((a3 & 1) != 0)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v4);
  }
}

uint64_t static NANBitmap.Channel.__derived_struct_equals(_:_:)(unint64_t a1, char a2, unint64_t a3, char a4)
{
  uint64_t result;

  result = 0;
  if (a1 == a3 && ((a1 >> 16) & 0xFFFFFF) == ((a3 >> 16) & 0xFFFFFF))
  {
    if ((a2 & 1) != 0)
    {
      if ((a4 & 1) != 0)
        return 1;
    }
    else if (HIWORD(a1) == HIWORD(a3) && (a4 & 1) == 0)
    {
      return 1;
    }
    return 0;
  }
  return result;
}

uint64_t sub_10007C3F8()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10007C434 + 4 * byte_10033CC90[*v0]))(0x6E6974617265706FLL, 0xEE007373616C4367);
}

uint64_t sub_10007C434()
{
  return 0x426C656E6E616863;
}

unint64_t sub_10007C458()
{
  return 0xD000000000000014;
}

unint64_t sub_10007C474()
{
  return 0xD000000000000016;
}

uint64_t sub_10007C494@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10009229C(a1, a2);
  *a3 = result;
  return result;
}

void sub_10007C4B8(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

uint64_t sub_10007C4C4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10008B99C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10007C4EC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10008B99C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NANBitmap.Channel.encode(to:)(_QWORD *a1, unint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v15;
  char v16;
  char v17;
  char v18;
  char v19;

  v7 = sub_100012C44(&qword_1004062A0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin();
  v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a1[3];
  v12 = a1[4];
  sub_10003259C(a1, v11);
  v13 = sub_10008B99C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for NANBitmap.Channel.CodingKeys, &type metadata for NANBitmap.Channel.CodingKeys, v13, v11, v12);
  v19 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(a2, &v19, v7);
  if (!v3)
  {
    v18 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(a2 >> 16, &v18, v7);
    v17 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(HIDWORD(a2), &v17, v7);
    v16 = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(HIWORD(a2) | ((a3 & 1) << 16), &v16, v7);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

Swift::Int NANBitmap.Channel.hashValue.getter(unint64_t a1, char a2)
{
  unint64_t v4;
  unint64_t v5;
  _QWORD v7[9];

  v4 = a1 >> 16;
  v5 = HIDWORD(a1);
  Hasher.init(_seed:)(v7);
  Hasher._combine(_:)(a1);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  if ((a2 & 1) != 0)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(HIWORD(a1));
  }
  return Hasher._finalize()();
}

Swift::Int sub_10007C72C()
{
  uint64_t v0;
  Swift::UInt16 v1;
  int v2;
  Swift::UInt8 v3;
  Swift::UInt16 v4;
  Swift::UInt8 v5;
  _QWORD v7[9];

  v1 = *(_WORD *)(v0 + 6);
  v2 = *(unsigned __int8 *)(v0 + 8);
  v3 = *(_BYTE *)v0;
  v4 = *(_WORD *)(v0 + 2);
  v5 = *(_BYTE *)(v0 + 4);
  Hasher.init(_seed:)(v7);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  if (v2 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1);
  }
  return Hasher._finalize()();
}

void sub_10007C7D4()
{
  uint64_t v0;
  Swift::UInt16 v1;
  int v2;
  Swift::UInt16 v3;
  Swift::UInt8 v4;

  v1 = *(_WORD *)(v0 + 6);
  v2 = *(unsigned __int8 *)(v0 + 8);
  v3 = *(_WORD *)(v0 + 2);
  v4 = *(_BYTE *)(v0 + 4);
  Hasher._combine(_:)(*(_BYTE *)v0);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  if (v2 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1);
  }
}

Swift::Int sub_10007C850()
{
  uint64_t v0;
  Swift::UInt16 v1;
  int v2;
  Swift::UInt8 v3;
  Swift::UInt16 v4;
  Swift::UInt8 v5;
  _QWORD v7[9];

  v1 = *(_WORD *)(v0 + 6);
  v2 = *(unsigned __int8 *)(v0 + 8);
  v3 = *(_BYTE *)v0;
  v4 = *(_WORD *)(v0 + 2);
  v5 = *(_BYTE *)(v0 + 4);
  Hasher.init(_seed:)(v7);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  if (v2 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v1);
  }
  return Hasher._finalize()();
}

uint64_t sub_10007C8F4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v5;

  result = sub_1000910FC(a1);
  if (!v2)
  {
    *(_BYTE *)a2 = result;
    *(_WORD *)(a2 + 2) = WORD1(result);
    *(_BYTE *)(a2 + 4) = BYTE4(result);
    *(_WORD *)(a2 + 6) = HIWORD(result);
    *(_BYTE *)(a2 + 8) = v5 & 1;
  }
  return result;
}

unint64_t NANBitmap.Channel.init(from:)(_QWORD *a1)
{
  return sub_1000910FC(a1) & 0xFFFF00FFFFFF00FFLL;
}

uint64_t sub_10007C96C(_QWORD *a1)
{
  unsigned __int8 *v1;

  return NANBitmap.Channel.encode(to:)(a1, *v1 | ((unint64_t)*((unsigned __int16 *)v1 + 1) << 16) | ((unint64_t)v1[4] << 32) | ((unint64_t)*((unsigned __int16 *)v1 + 3) << 48), v1[8]);
}

uint64_t sub_10007C9A8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  char v5;

  if (*a1 != *a2 || *((unsigned __int16 *)a1 + 1) != *((unsigned __int16 *)a2 + 1) || a1[4] != a2[4])
    return 0;
  v5 = a2[8];
  if ((a1[8] & 1) != 0)
  {
    if (a2[8])
      return 1;
  }
  else
  {
    if (*((unsigned __int16 *)a1 + 3) != *((unsigned __int16 *)a2 + 3))
      v5 = 1;
    if ((v5 & 1) == 0)
      return 1;
  }
  return 0;
}

uint64_t NANBitmap.Time.control.setter(uint64_t result)
{
  _WORD *v1;

  *v1 = result;
  return result;
}

uint64_t NANBitmap.Time.Control.bitDuration.getter(char a1)
{
  return _s7CoreP2P19NANIntervalDurationO8rawValueACSgs5UInt8V_tcfC_0(a1 & 7);
}

uint64_t NANBitmap.Time.Control.period.getter(__int16 a1)
{
  unint64_t v1;
  uint64_t result;

  v1 = sub_10007CBAC(3uLL, 3, a1);
  result = _s7CoreP2P14IEEE80211FrameV10ManagementO14AuthenticationO0F9AlgorithmO8rawValueAISgs5UInt8V_tcfC_0(v1);
  if (result == 8)
    return 0;
  return result;
}

uint64_t NANBitmap.Time.Control.rawStartOffset.getter(unsigned int a1)
{
  return (a1 >> 6) & 0x1FF;
}

uint64_t sub_10007CA7C@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, __int16 a3@<W2>, unint64_t a4@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  if (__OFADD__(result, a2))
  {
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    if (a4 <= 0xFFFFFFFFFFFFFFC0)
      return 0;
    return (unint64_t)(unsigned __int16)(a3 & (result >> -(char)a4)) << -(char)a4;
  }
  if (result + a2 > 16)
  {
    v4 = sub_100012C84();
    v5 = swift_allocError(&type metadata for WiFiError, v4, 0, 0);
    *(_QWORD *)v6 = 0;
    *(_QWORD *)(v6 + 8) = 0;
    *(_BYTE *)(v6 + 16) = 2;
    return swift_willThrow(v5);
  }
  if (a2 < 0)
    goto LABEL_23;
  a4 = result;
  if (a2)
  {
    result = 0;
    v7 = 0;
    while (1)
    {
      if (v7 <= 0x3F)
        result |= 1 << v7;
      if (a2 - 1 == v7)
        break;
      if (a2 == ++v7)
      {
        __break(1u);
        break;
      }
    }
    if (a4 - 65 < 0xFFFFFFFFFFFFFF7FLL)
      return 0;
    if ((a4 & 0x8000000000000000) == 0)
    {
      if (a4 >= 0x40)
        return 0;
      return (unsigned __int16)(a3 & (result << a4)) >> a4;
    }
    goto LABEL_24;
  }
  if ((unint64_t)(result - 65) < 0xFFFFFFFFFFFFFF7FLL)
    return 0;
  result = 0;
  if ((a4 & 0x8000000000000000) == 0)
  {
    if (a4 >= 0x40)
      return result;
    return (unsigned __int16)(a3 & (result << a4)) >> a4;
  }
  if (a4 > 0xFFFFFFFFFFFFFFC0)
    return (unint64_t)(unsigned __int16)(a3 & (result >> -(char)a4)) << -(char)a4;
  return result;
}

unint64_t sub_10007CBAC(unint64_t result, uint64_t a2, __int16 a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  if (__OFADD__(result, a2))
  {
    __break(1u);
    goto LABEL_24;
  }
  if ((uint64_t)(result + a2) > 16)
  {
    v4 = sub_100012C84();
    v5 = swift_allocError(&type metadata for WiFiError, v4, 0, 0);
    *(_QWORD *)v6 = 0;
    *(_QWORD *)(v6 + 8) = 0;
    *(_BYTE *)(v6 + 16) = 2;
    swift_willThrow(v5);
    return v7;
  }
  if (a2 < 0)
    goto LABEL_25;
  if (a2)
  {
    v3 = 0;
    v8 = 0;
    while (1)
    {
      if (v8 <= 0x3F)
        v3 |= 1 << v8;
      if (a2 - 1 == v8)
        break;
      if (a2 == ++v8)
      {
        __break(1u);
        break;
      }
    }
    if (result - 65 < 0xFFFFFFFFFFFFFF7FLL)
      return 0;
    if ((result & 0x8000000000000000) != 0)
      goto LABEL_26;
    if (result >= 0x40)
      return 0;
LABEL_20:
    v7 = (unsigned __int16)(a3 & (v3 << result)) >> result;
    while (v7 > 0xFF)
    {
LABEL_24:
      __break(1u);
LABEL_25:
      __break(1u);
LABEL_26:
      if (result <= 0xFFFFFFFFFFFFFFC0)
        return 0;
LABEL_29:
      v3 = (unsigned __int16)(a3 & (v3 >> -(char)result));
      v7 = v3 << -(char)result;
      if ((v7 & 0x8000000000000000) != 0)
      {
        __break(1u);
        return result;
      }
    }
    return v7;
  }
  if (result - 65 < 0xFFFFFFFFFFFFFF7FLL)
    return 0;
  if ((result & 0x8000000000000000) != 0)
  {
    v3 = 0;
    v7 = 0;
    if (result > 0xFFFFFFFFFFFFFFC0)
      goto LABEL_29;
    return v7;
  }
  v7 = 0;
  v3 = 0;
  if (result < 0x40)
    goto LABEL_20;
  return v7;
}

unint64_t sub_10007CCF8(unint64_t a1, uint64_t a2, __int16 a3)
{
  return sub_10007CD34(a1, a2, a3);
}

unint64_t sub_10007CD0C(unint64_t a1, uint64_t a2, char a3)
{
  return sub_10007D230(a1, a2, a3);
}

uint64_t sub_10007CD20@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, unint64_t a4@<X8>)
{
  return sub_10007CFBC(a1, a2, a3, a4);
}

unint64_t sub_10007CD34(unint64_t result, uint64_t a2, __int16 a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  if (__OFADD__(result, a2))
  {
    __break(1u);
    goto LABEL_24;
  }
  if ((uint64_t)(result + a2) > 16)
  {
    v4 = sub_100012C84();
    v5 = swift_allocError(&type metadata for WiFiError, v4, 0, 0);
    *(_QWORD *)v6 = 0;
    *(_QWORD *)(v6 + 8) = 0;
    *(_BYTE *)(v6 + 16) = 2;
    swift_willThrow(v5);
    return v7;
  }
  if (a2 < 0)
    goto LABEL_25;
  if (a2)
  {
    v3 = 0;
    v8 = 0;
    while (1)
    {
      if (v8 < 0x40)
        v3 |= 1 << v8;
      if (a2 - 1 == v8)
        break;
      if (a2 == ++v8)
      {
        __break(1u);
        break;
      }
    }
    if (result - 65 < 0xFFFFFFFFFFFFFF7FLL)
      return 0;
    if ((result & 0x8000000000000000) != 0)
      goto LABEL_26;
    if (result >= 0x40)
      return 0;
LABEL_20:
    v7 = (unsigned __int16)(a3 & (v3 << result)) >> result;
    while (v7 > 0xFF)
    {
LABEL_24:
      __break(1u);
LABEL_25:
      __break(1u);
LABEL_26:
      if (result <= 0xFFFFFFFFFFFFFFC0)
        return 0;
LABEL_29:
      v3 = (unsigned __int16)(a3 & (v3 >> -(char)result));
      v7 = v3 << -(char)result;
      if ((v7 & 0x8000000000000000) != 0)
      {
        __break(1u);
        return result;
      }
    }
    return v7;
  }
  if (result - 65 < 0xFFFFFFFFFFFFFF7FLL)
    return 0;
  v7 = 0;
  v3 = 0;
  if ((result & 0x8000000000000000) != 0)
  {
    if (result > 0xFFFFFFFFFFFFFFC0)
      goto LABEL_29;
    return v7;
  }
  if (result < 0x40)
    goto LABEL_20;
  return v7;
}

uint64_t sub_10007CE78@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int16 a3@<W2>, unint64_t a4@<X8>)
{
  return sub_10007CE8C(a1, a2, a3, a4);
}

uint64_t sub_10007CE8C@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, __int16 a3@<W2>, unint64_t a4@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  if (__OFADD__(result, a2))
  {
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    if (a4 <= 0xFFFFFFFFFFFFFFC0)
      return 0;
    return (unint64_t)(unsigned __int16)(a3 & (result >> -(char)a4)) << -(char)a4;
  }
  if (result + a2 > 16)
  {
    v4 = sub_100012C84();
    v5 = swift_allocError(&type metadata for WiFiError, v4, 0, 0);
    *(_QWORD *)v6 = 0;
    *(_QWORD *)(v6 + 8) = 0;
    *(_BYTE *)(v6 + 16) = 2;
    return swift_willThrow(v5);
  }
  if (a2 < 0)
    goto LABEL_23;
  a4 = result;
  if (a2)
  {
    result = 0;
    v7 = 0;
    while (1)
    {
      if (v7 < 0x40)
        result |= 1 << v7;
      if (a2 - 1 == v7)
        break;
      if (a2 == ++v7)
      {
        __break(1u);
        break;
      }
    }
    if (a4 - 65 < 0xFFFFFFFFFFFFFF7FLL)
      return 0;
    if ((a4 & 0x8000000000000000) == 0)
    {
      if (a4 >= 0x40)
        return 0;
      return (unsigned __int16)(a3 & (result << a4)) >> a4;
    }
    goto LABEL_24;
  }
  if ((unint64_t)(result - 65) < 0xFFFFFFFFFFFFFF7FLL)
    return 0;
  result = 0;
  if ((a4 & 0x8000000000000000) == 0)
  {
    if (a4 >= 0x40)
      return result;
    return (unsigned __int16)(a3 & (result << a4)) >> a4;
  }
  if (a4 > 0xFFFFFFFFFFFFFFC0)
    return (unint64_t)(unsigned __int16)(a3 & (result >> -(char)a4)) << -(char)a4;
  return result;
}

uint64_t sub_10007CFBC@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, char a3@<W2>, unint64_t a4@<X8>)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  if (__OFADD__(result, a2))
  {
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    if (a4 <= 0xFFFFFFFFFFFFFFC0)
      return 0;
    return (unint64_t)(a3 & (result >> -(char)a4)) << -(char)a4;
  }
  if (result + a2 > 8)
  {
    v4 = sub_100012C84();
    v5 = swift_allocError(&type metadata for WiFiError, v4, 0, 0);
    *(_QWORD *)v6 = 0;
    *(_QWORD *)(v6 + 8) = 0;
    *(_BYTE *)(v6 + 16) = 2;
    return swift_willThrow(v5);
  }
  if (a2 < 0)
    goto LABEL_23;
  a4 = result;
  if (a2)
  {
    result = 0;
    v7 = 0;
    while (1)
    {
      if (v7 < 0x40)
        result |= 1 << v7;
      if (a2 - 1 == v7)
        break;
      if (a2 == ++v7)
      {
        __break(1u);
        break;
      }
    }
    if (a4 - 65 < 0xFFFFFFFFFFFFFF7FLL)
      return 0;
    if ((a4 & 0x8000000000000000) == 0)
    {
      if (a4 >= 0x40)
        return 0;
      return (a3 & (result << a4)) >> a4;
    }
    goto LABEL_24;
  }
  if ((unint64_t)(result - 65) < 0xFFFFFFFFFFFFFF7FLL)
    return 0;
  result = 0;
  if ((a4 & 0x8000000000000000) == 0)
  {
    if (a4 >= 0x40)
      return result;
    return (a3 & (result << a4)) >> a4;
  }
  if (a4 > 0xFFFFFFFFFFFFFFC0)
    return (unint64_t)(a3 & (result >> -(char)a4)) << -(char)a4;
  return result;
}

unint64_t sub_10007D0EC(unint64_t result, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (__OFADD__(result, a2))
  {
    __break(1u);
    goto LABEL_24;
  }
  if ((uint64_t)(result + a2) > 32)
  {
    v4 = sub_100012C84();
    v5 = swift_allocError(&type metadata for WiFiError, v4, 0, 0);
    *(_QWORD *)v6 = 0;
    *(_QWORD *)(v6 + 8) = 0;
    *(_BYTE *)(v6 + 16) = 2;
    swift_willThrow(v5);
    return v7;
  }
  if (a2 < 0)
    goto LABEL_25;
  if (a2)
  {
    v3 = 0;
    v8 = 0;
    while (1)
    {
      if (v8 < 0x40)
        v3 |= 1 << v8;
      if (a2 - 1 == v8)
        break;
      if (a2 == ++v8)
      {
        __break(1u);
        break;
      }
    }
    if (result - 65 < 0xFFFFFFFFFFFFFF7FLL)
      return 0;
    if ((result & 0x8000000000000000) != 0)
      goto LABEL_26;
    if (result >= 0x40)
      return 0;
LABEL_20:
    v9 = v3 << result;
    v3 = a3;
    v7 = (v9 & a3) >> result;
    while (v7 > 0xFF)
    {
LABEL_24:
      __break(1u);
LABEL_25:
      __break(1u);
LABEL_26:
      if (result <= 0xFFFFFFFFFFFFFFC0)
        return 0;
LABEL_29:
      v3 = (v3 >> -(char)result) & a3;
      v7 = v3 << -(char)result;
      if ((v7 & 0x8000000000000000) != 0)
      {
        __break(1u);
        return result;
      }
    }
    return v7;
  }
  if (result - 65 < 0xFFFFFFFFFFFFFF7FLL)
    return 0;
  v7 = 0;
  v3 = 0;
  if ((result & 0x8000000000000000) != 0)
  {
    if (result > 0xFFFFFFFFFFFFFFC0)
      goto LABEL_29;
    return v7;
  }
  if (result < 0x40)
    goto LABEL_20;
  return v7;
}

unint64_t sub_10007D230(unint64_t result, uint64_t a2, char a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  if (__OFADD__(result, a2))
  {
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    if (result <= 0xFFFFFFFFFFFFFFC0)
      return 0;
    goto LABEL_27;
  }
  if ((uint64_t)(result + a2) > 8)
  {
    v4 = sub_100012C84();
    v5 = swift_allocError(&type metadata for WiFiError, v4, 0, 0);
    *(_QWORD *)v6 = 0;
    *(_QWORD *)(v6 + 8) = 0;
    *(_BYTE *)(v6 + 16) = 2;
    swift_willThrow(v5);
    return v7;
  }
  if (a2 < 0)
    goto LABEL_23;
  if (a2)
  {
    v3 = 0;
    v8 = 0;
    while (1)
    {
      if (v8 < 0x40)
        v3 |= 1 << v8;
      if (a2 - 1 == v8)
        break;
      if (a2 == ++v8)
      {
        __break(1u);
        break;
      }
    }
    if (result - 65 < 0xFFFFFFFFFFFFFF7FLL)
      return 0;
    if ((result & 0x8000000000000000) == 0)
    {
      if (result >= 0x40)
        return 0;
      return (a3 & (v3 << result)) >> result;
    }
    goto LABEL_24;
  }
  if (result - 65 < 0xFFFFFFFFFFFFFF7FLL)
    return 0;
  v7 = 0;
  v3 = 0;
  if ((result & 0x8000000000000000) == 0)
  {
    if (result >= 0x40)
      return v7;
    return (a3 & (v3 << result)) >> result;
  }
  if (result <= 0xFFFFFFFFFFFFFFC0)
    return v7;
LABEL_27:
  v7 = (unint64_t)(a3 & (v3 >> -(char)result)) << -(char)result;
  if ((v7 & 0x8000000000000000) != 0)
    __break(1u);
  if (v7 <= 0xFF)
    return v7;
  __break(1u);
  return result;
}

unint64_t NANBitmap.Time.Control.startOffset.getter(unsigned int a1)
{
  unint64_t v1;
  unint64_t result;

  v1 = (a1 >> 6) & 0x1FF;
  result = NANIntervalDuration.timeUnits.getter(0);
  if (is_mul_ok(v1, result))
    result *= v1;
  else
    __break(1u);
  return result;
}

CoreP2P::NANBitmap::Time::Control __swiftcall NANBitmap.Time.Control.init(bitDuration:period:startOffset:)(CoreP2P::NANIntervalDuration bitDuration, CoreP2P::NANTimeUnit::SchedulePeriod period, CoreP2P::NANTimeUnit startOffset)
{
  uint64_t v3;
  unint64_t v7;
  Swift::UInt64 v8;
  __int16 v9;
  unsigned __int16 v10;
  unsigned __int16 v11;
  unsigned __int16 v12;
  __int16 v13;
  unsigned __int16 v14;
  CoreP2P::NANBitmap::Time::Control result;

  v7 = NANIntervalDuration.timeUnits.getter(0);
  if (!v7)
  {
    __break(1u);
    goto LABEL_12;
  }
  if ((startOffset.rawValue & 0xF) != 0)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v8 = startOffset.rawValue / v7;
  if (v8 > 0x1FF)
  {
LABEL_13:
    __break(1u);
    swift_unexpectedError(v3, "CoreP2P/NANAvailability.swift", 29, 1);
    __break(1u);
    swift_unexpectedError(v3, "CoreP2P/NANAvailability.swift", 29, 1);
    __break(1u);
    result.rawValue = swift_unexpectedError(v3, "CoreP2P/NANAvailability.swift", 29, 1);
    __break(1u);
    return result;
  }
  v9 = sub_1001AA384(bitDuration, 0, 3);
  v10 = sub_1001AA384(period, 3uLL, 3);
  v11 = sub_1001AA398(v8, 6uLL, 9);
  if ((v10 & (unsigned __int16)~v9) != 0)
    v12 = v10;
  else
    v12 = 0;
  v13 = v12 | v9;
  if ((v11 & (unsigned __int16)~v13) != 0)
    v14 = v11;
  else
    v14 = 0;
  return (CoreP2P::NANBitmap::Time::Control)(v14 | v13);
}

CoreP2P::NANBitmap::Time::Control __swiftcall NANBitmap.Time.Control.offset(by:)(CoreP2P::NANTimeUnit by)
{
  unsigned int v1;
  unsigned int v2;
  unsigned __int8 v4;
  unsigned __int8 v5;
  unint64_t v6;
  unsigned __int8 v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  Swift::UInt64 v11;
  unint64_t v12;
  unint64_t v13;
  __int16 v14;
  unsigned __int16 v15;
  unsigned __int16 v16;
  unsigned __int16 v17;
  __int16 v18;
  unsigned __int16 v19;
  CoreP2P::NANBitmap::Time::Control result;

  v2 = v1;
  v4 = _s7CoreP2P19NANIntervalDurationO8rawValueACSgs5UInt8V_tcfC_0(v1 & 7);
  if (v4 == 4)
    v5 = 0;
  else
    v5 = v4;
  v6 = sub_10007CBAC(3uLL, 3, v2);
  v7 = _s7CoreP2P14IEEE80211FrameV10ManagementO14AuthenticationO0F9AlgorithmO8rawValueAISgs5UInt8V_tcfC_0(v6);
  if (v7 == 8)
    v7 = 0;
  v8 = (v2 >> 6) & 0x1FF;
  v9 = NANIntervalDuration.timeUnits.getter(0);
  if (!is_mul_ok(v8, v9))
  {
    __break(1u);
    goto LABEL_19;
  }
  v10 = __CFADD__(v8 * v9, by.rawValue);
  v11 = v8 * v9 + by.rawValue;
  if (v10)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v12 = NANIntervalDuration.timeUnits.getter(0);
  if (!v12)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  if ((v11 & 0xF) != 0)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v13 = v11 / v12;
  if (v13 > 0x1FF)
  {
LABEL_22:
    __break(1u);
    swift_unexpectedError(0, "CoreP2P/NANAvailability.swift", 29, 1);
    __break(1u);
    swift_unexpectedError(0, "CoreP2P/NANAvailability.swift", 29, 1);
    __break(1u);
    result.rawValue = swift_unexpectedError(0, "CoreP2P/NANAvailability.swift", 29, 1);
    __break(1u);
    return result;
  }
  v14 = sub_1001AA384(v5, 0, 3);
  v15 = sub_1001AA384(v7, 3uLL, 3);
  v16 = sub_1001AA398(v13, 6uLL, 9);
  if ((v15 & (unsigned __int16)~v14) != 0)
    v17 = v15;
  else
    v17 = 0;
  v18 = v17 | v14;
  if ((v16 & (unsigned __int16)~v18) != 0)
    v19 = v16;
  else
    v19 = 0;
  return (CoreP2P::NANBitmap::Time::Control)(v19 | v18);
}

unint64_t sub_10007D67C(uint64_t a1)
{
  return sub_10007D6F8(a1, 4u, &static NANBitmap.Time.Control.availability);
}

_WORD *NANBitmap.Time.Control.availability.unsafeMutableAddressor()
{
  if (qword_100403EF8 != -1)
    swift_once(&qword_100403EF8, sub_10007D67C);
  return &static NANBitmap.Time.Control.availability;
}

uint64_t static NANBitmap.Time.Control.availability.getter()
{
  return sub_10007D860(&qword_100403EF8, &static NANBitmap.Time.Control.availability);
}

unint64_t sub_10007D6E8(uint64_t a1)
{
  return sub_10007D6F8(a1, 3u, &static NANBitmap.Time.Control.perDiscoveryWindow);
}

unint64_t sub_10007D6F8(uint64_t a1, unsigned __int8 a2, _WORD *a3)
{
  uint64_t v3;
  __int16 v6;
  unsigned __int16 v7;
  unint64_t result;
  unsigned __int16 v9;
  __int16 v10;
  __int16 v11;

  if (NANIntervalDuration.timeUnits.getter(0))
  {
    v6 = sub_1001AA384(0, 0, 3);
    v7 = sub_1001AA384(a2, 3uLL, 3);
    result = sub_1001AA398(0, 6uLL, 9);
    if ((v7 & (unsigned __int16)~v6) != 0)
      v9 = v7;
    else
      v9 = 0;
    v10 = v9 | v6;
    if (((unsigned __int16)result & (unsigned __int16)~v10) != 0)
      v11 = result;
    else
      v11 = 0;
    *a3 = v11 | v10;
  }
  else
  {
    __break(1u);
    swift_unexpectedError(v3, "CoreP2P/NANAvailability.swift", 29, 1, 118);
    __break(1u);
    swift_unexpectedError(v3, "CoreP2P/NANAvailability.swift", 29, 1, 119);
    __break(1u);
    result = swift_unexpectedError(v3, "CoreP2P/NANAvailability.swift", 29, 1, 120);
    __break(1u);
  }
  return result;
}

__int16 *NANBitmap.Time.Control.perDiscoveryWindow.unsafeMutableAddressor()
{
  if (qword_100403F00 != -1)
    swift_once(&qword_100403F00, sub_10007D6E8);
  return &static NANBitmap.Time.Control.perDiscoveryWindow;
}

uint64_t static NANBitmap.Time.Control.perDiscoveryWindow.getter()
{
  return sub_10007D860(&qword_100403F00, (unsigned __int16 *)&static NANBitmap.Time.Control.perDiscoveryWindow);
}

uint64_t sub_10007D860(_QWORD *a1, unsigned __int16 *a2)
{
  if (*a1 != -1)
    swift_once();
  return *a2;
}

uint64_t sub_10007D8A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100092E08();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_10007D8FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100092E08();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

void sub_10007D948(_WORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_10007D950@<X0>(uint64_t a1@<X0>, _WORD *a2@<X8>)
{
  __int16 v4;
  uint64_t result;

  v4 = sub_1001A4ACC();
  result = swift_bridgeObjectRelease(a1);
  *a2 = v4;
  return result;
}

uint64_t NANBitmap.Time.bitmapData.getter(uint64_t a1, uint64_t a2, unint64_t a3)
{
  sub_100031FEC(a2, a3);
  return a2;
}

uint64_t NANBitmap.Time.init(from:)(_QWORD *a1)
{
  return sub_100091430(a1);
}

uint64_t NANBitmap.Time.encode(to:)(_QWORD *a1, __int16 a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v22[2];
  _QWORD v23[3];
  uint64_t v24;
  uint64_t v25;

  v8 = a1[3];
  v9 = a1[4];
  sub_10003259C(a1, v8);
  dispatch thunk of Encoder.unkeyedContainer()(v23, v8, v9);
  LOWORD(v22[0]) = a2;
  v10 = v24;
  v11 = v25;
  sub_100034C68((uint64_t)v23, v24);
  v12 = sub_100091588();
  dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)(v22, &type metadata for NANBitmap.Time.Control, v12, v10, v11);
  if (!v4)
  {
    sub_100031FEC(a3, a4);
    sub_10007DB34(a3, a4);
    v15 = v13;
    v16 = v14;
    v22[0] = v13;
    v22[1] = v14;
    v17 = v24;
    v18 = v25;
    sub_100034C68((uint64_t)v23, v24);
    v19 = sub_100012C44(&qword_100406180);
    v20 = sub_100011770(&qword_1004062B8, &qword_100406180, protocol conformance descriptor for LengthValue<A>);
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)(v22, v19, v20, v17, v18);
    sub_10000E614(v15, v16);
  }
  return sub_100014430(v23);
}

void sub_10007DB34(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_10007DB6C()
{
  unint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (BYTE6(v0) == 255)
  {
    v2 = sub_100012C84();
    v3 = swift_allocError(&type metadata for WiFiError, v2, 0, 0);
    *(_QWORD *)v4 = 0;
    *(_QWORD *)(v4 + 8) = 0;
    *(_BYTE *)(v4 + 16) = 2;
    swift_willThrow(v3);
    sub_10000E614(v1, v0);
  }
  return v1;
}

void sub_10007DC10(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t NANBitmap.Time.description.getter(int a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  Swift::String v22;
  void *object;
  __int128 v24;
  unint64_t v25;
  unint64_t v26;
  __int128 v27;
  char *v28;
  _BYTE v29[8];
  _QWORD v30[3];

  type metadata accessor for Data.Iterator(0);
  __chkstk_darwin();
  v28 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100031FEC(a2, a3);
  v7 = sub_10008EEF8(a1, a2, a3);
  v9 = v7;
  v11 = v10;
  v30[0] = 0;
  v30[1] = 0xE000000000000000;
  if (v7 == v10)
    return 0;
  v13 = v8;
  v14 = v7 >> 7;
  v28 = (char *)HIBYTE(v8);
  v26 = v8 >> 40;
  *(_QWORD *)&v27 = HIWORD(v8);
  v25 = HIDWORD(v8);
  v24 = xmmword_10033A110;
  v15 = v8 >> 24;
  v16 = v8 >> 16;
  v17 = v8 >> 8;
  do
  {
    v29[0] = v13;
    v29[1] = v17;
    v29[2] = v16;
    v29[3] = v15;
    v29[4] = v25;
    v29[5] = v26;
    v29[6] = v27;
    v29[7] = (_BYTE)v28;
    v18 = v9 + 128;
    if (v9 >= 0xFFFFFFFFFFFFFF80)
    {
      __break(1u);
      __break(1u);
      __break(1u);
      JUMPOUT(0x10007E154);
    }
    v19 = v29[v14];
    v20 = sub_100012C44((uint64_t *)&unk_100404F10);
    v21 = swift_allocObject(v20, 72, 7);
    *(_OWORD *)(v21 + 16) = v24;
    *(_QWORD *)(v21 + 56) = &type metadata for UInt8;
    *(_QWORD *)(v21 + 64) = &protocol witness table for UInt8;
    *(_BYTE *)(v21 + 32) = v19;
    v22._countAndFlagsBits = String.init(format:_:)(1479684133, 0xE400000000000000, v21);
    object = v22._object;
    String.append(_:)(v22);
    swift_bridgeObjectRelease(object);
    v9 += 128;
    ++v14;
  }
  while (v18 != v11);
  return v30[0];
}

uint64_t TimeBitmap.init(bitmap:)(int a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  result = sub_10008EEF8(a1, a2, a3);
  if (v3)
    return v5;
  return result;
}

uint64_t NANBitmap.Time.hash(into:)(uint64_t a1, Swift::UInt16 a2, uint64_t a3, unint64_t a4)
{
  __n128 v7;

  Hasher._combine(_:)(a2);
  sub_100031FEC(a3, a4);
  Data.hash(into:)(a1, a3, a4, v7);
  return sub_10000E614(a3, a4);
}

void static NANBitmap.Time.__derived_struct_equals(_:_:)(__int16 a1, uint64_t a2, uint64_t a3, __int16 a4)
{
  if (a1 == a4)
    _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(a2, a3);
}

Swift::Int NANBitmap.Time.hashValue.getter(Swift::UInt16 a1, uint64_t a2, unint64_t a3)
{
  __n128 v6;
  _QWORD v8[9];

  Hasher.init(_seed:)(v8);
  Hasher._combine(_:)(a1);
  sub_100031FEC(a2, a3);
  Data.hash(into:)(v8, a2, a3, v6);
  sub_10000E614(a2, a3);
  return Hasher._finalize()();
}

Swift::Int sub_10007E284()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  Swift::UInt16 v3;
  __n128 v4;
  _QWORD v6[9];

  v1 = *(_QWORD *)(v0 + 8);
  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_WORD *)v0;
  Hasher.init(_seed:)(v6);
  Hasher._combine(_:)(v3);
  sub_100031FEC(v1, v2);
  Data.hash(into:)(v6, v1, v2, v4);
  sub_10000E614(v1, v2);
  return Hasher._finalize()();
}

uint64_t sub_10007E2FC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  __n128 v5;

  v3 = *(_QWORD *)(v1 + 8);
  v4 = *(_QWORD *)(v1 + 16);
  Hasher._combine(_:)(*(_WORD *)v1);
  sub_100031FEC(v3, v4);
  Data.hash(into:)(a1, v3, v4, v5);
  return sub_10000E614(v3, v4);
}

Swift::Int sub_10007E354()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  Swift::UInt16 v3;
  __n128 v4;
  _QWORD v6[9];

  v1 = *(_QWORD *)(v0 + 8);
  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_WORD *)v0;
  Hasher.init(_seed:)(v6);
  Hasher._combine(_:)(v3);
  sub_100031FEC(v1, v2);
  Data.hash(into:)(v6, v1, v2, v4);
  sub_10000E614(v1, v2);
  return Hasher._finalize()();
}

uint64_t sub_10007E3C8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  result = sub_100091430(a1);
  if (!v2)
  {
    *(_WORD *)a2 = result;
    *(_QWORD *)(a2 + 8) = v5;
    *(_QWORD *)(a2 + 16) = v6;
  }
  return result;
}

uint64_t sub_10007E3F4(_QWORD *a1)
{
  uint64_t v1;

  return NANBitmap.Time.encode(to:)(a1, *(_WORD *)v1, *(_QWORD *)(v1 + 8), *(_QWORD *)(v1 + 16));
}

uint64_t sub_10007E410()
{
  unsigned __int16 *v0;

  return NANBitmap.Time.description.getter(*v0, *((_QWORD *)v0 + 1), *((_QWORD *)v0 + 2));
}

void sub_10007E41C(unsigned __int16 *a1, unsigned __int16 *a2)
{
  if (*a1 == *a2)
    _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(*((_QWORD *)a1 + 1), *((_QWORD *)a1 + 2));
}

void *TimeBitmap.bitDuration.unsafeMutableAddressor()
{
  return &static TimeBitmap.bitDuration;
}

uint64_t TimeBitmap.slotsView.setter(uint64_t result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  *v3 = result;
  v3[1] = a2;
  v3[2] = a3;
  return result;
}

uint64_t TimeBitmap.init()()
{
  return 0;
}

void *TimeBitmap.zero.unsafeMutableAddressor()
{
  return &static TimeBitmap.zero;
}

void *TimeBitmap.Slot.FF.unsafeMutableAddressor()
{
  return &static TimeBitmap.Slot.FF;
}

void *TimeBitmap.all.unsafeMutableAddressor()
{
  return &static TimeBitmap.all;
}

uint64_t static TimeBitmap.all.getter()
{
  return 0;
}

uint64_t _s7CoreP2P10TimeBitmapVyA2C4SlotV_A7EtcfC_0()
{
  return 0;
}

uint64_t TimeBitmap.formUnion(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10007E6FC(a1, a2, a3, TimeBitmap.SlotsView.formUnion(_:));
}

int8x8_t TimeBitmap.SlotsView.formUnion(_:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  int8x8_t *v3;
  uint64x2_t v4;
  int32x2_t v5;
  int8x8_t result;

  v4 = (uint64x2_t)vdupq_n_s64(a3);
  v5.i32[0] = a3;
  v5.i32[1] = a3 >> 8;
  result = vorr_s8(v3[2], vmovn_s16(vuzp1q_s16((int16x8_t)vmovn_hight_s64(v5, (int64x2_t)vshlq_u64(v4, (uint64x2_t)xmmword_10033F000)), (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v4, (uint64x2_t)xmmword_10033F010), (int32x4_t)vshlq_u64(v4, (uint64x2_t)xmmword_10033F020)))));
  v3[2] = result;
  return result;
}

uint64_t TimeBitmap.formIntersection(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10007E6FC(a1, a2, a3, TimeBitmap.SlotsView.formIntersection(_:));
}

int8x8_t TimeBitmap.SlotsView.formIntersection(_:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  int8x8_t *v3;
  uint64x2_t v4;
  int32x2_t v5;
  int8x8_t result;

  v4 = (uint64x2_t)vdupq_n_s64(a3);
  v5.i32[0] = a3;
  v5.i32[1] = a3 >> 8;
  result = vand_s8(v3[2], vmovn_s16(vuzp1q_s16((int16x8_t)vmovn_hight_s64(v5, (int64x2_t)vshlq_u64(v4, (uint64x2_t)xmmword_10033F000)), (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v4, (uint64x2_t)xmmword_10033F010), (int32x4_t)vshlq_u64(v4, (uint64x2_t)xmmword_10033F020)))));
  v3[2] = result;
  return result;
}

uint64_t TimeBitmap.formSymmetricDifference(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10007E6FC(a1, a2, a3, TimeBitmap.SlotsView.formSymmetricDifference(_:));
}

int8x8_t TimeBitmap.SlotsView.formSymmetricDifference(_:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  int8x8_t *v3;
  uint64x2_t v4;
  int32x2_t v5;
  int8x8_t result;

  v4 = (uint64x2_t)vdupq_n_s64(a3);
  v5.i32[0] = a3;
  v5.i32[1] = a3 >> 8;
  result = veor_s8(v3[2], vmovn_s16(vuzp1q_s16((int16x8_t)vmovn_hight_s64(v5, (int64x2_t)vshlq_u64(v4, (uint64x2_t)xmmword_10033F000)), (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v4, (uint64x2_t)xmmword_10033F010), (int32x4_t)vshlq_u64(v4, (uint64x2_t)xmmword_10033F020)))));
  v3[2] = result;
  return result;
}

uint64_t TimeBitmap.subtract(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10007E6FC(a1, a2, a3, TimeBitmap.SlotsView.subtract(_:));
}

int8x8_t TimeBitmap.SlotsView.subtract(_:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  int8x8_t *v3;
  uint64x2_t v4;
  int32x2_t v5;
  int8x8_t result;

  v4 = (uint64x2_t)vdupq_n_s64(a3);
  v5.i32[0] = a3;
  v5.i32[1] = a3 >> 8;
  result = vbic_s8(v3[2], vmovn_s16(vuzp1q_s16((int16x8_t)vmovn_hight_s64(v5, (int64x2_t)vshlq_u64(v4, (uint64x2_t)xmmword_10033F000)), (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v4, (uint64x2_t)xmmword_10033F010), (int32x4_t)vshlq_u64(v4, (uint64x2_t)xmmword_10033F020)))));
  v3[2] = result;
  return result;
}

Swift::Void __swiftcall TimeBitmap.SlotsView.invert()()
{
  unint64_t *v0;
  unint64_t v1;
  unint64_t v2;
  _QWORD *v3;
  unint64_t i;
  unint64_t v5;
  uint64_t v6;

  v1 = *v0;
  v2 = v0[1];
  if (*v0 != v2)
  {
    v3 = v0 + 2;
    for (i = v1 >> 7; ; ++i)
    {
      v5 = v1 + 128;
      if (v1 >= 0xFFFFFFFFFFFFFF80)
        break;
      v6 = *v3;
      *((_BYTE *)v3 + i) = ~*((_BYTE *)&v6 + i);
      v1 += 128;
      if (v5 == v2)
        return;
    }
    __break(1u);
  }
}

uint64_t TimeBitmap.union(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a4;
}

uint64_t TimeBitmap.intersection(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a4;
}

uint64_t TimeBitmap.symmetricDifference(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a4;
}

uint64_t TimeBitmap.subtracting(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a4;
}

unint64_t TimeBitmap.inverted()(unint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t i;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v7 = a3;
  if (result != a2)
  {
    v3 = result >> 7;
    for (i = result; ; i += 128)
    {
      v5 = i + 128;
      if (i >= 0xFFFFFFFFFFFFFF80)
        break;
      v6 = v7;
      *((_BYTE *)&v7 + v3) = ~*((_BYTE *)&v6 + v3);
      ++v3;
      if (v5 == a2)
        return result;
    }
    __break(1u);
  }
  return result;
}

unint64_t TimeBitmap.subscript.getter(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t result;
  unsigned int v6;
  uint64_t v7;

  v7 = a4;
  result = NANIntervalDuration.timeUnits.getter(0);
  if (!result)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((a1 / result) & 0x8000000000000000) != 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  v6 = *((unsigned __int8 *)&v7 + ((a1 / result) >> 3));
  result = NANIntervalDuration.timeUnits.getter(0);
  if (!result)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (((a1 / result) & 0x8000000000000000) == 0)
    return (v6 >> ((a1 / result) & 7)) & 1;
LABEL_9:
  __break(1u);
  return result;
}

unint64_t TimeBitmap.SlotsView.subscript.getter(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t result;
  uint64_t v6;

  v6 = a4;
  result = NANIntervalDuration.timeUnits.getter(0);
  if (result)
  {
    if (((a1 / result) & 0x8000000000000000) == 0)
      return *((unsigned __int8 *)&v6 + ((a1 / result) >> 3));
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

unint64_t TimeBitmap.subscript.setter(uint64_t a1, unint64_t a2)
{
  return sub_100092490(a2);
}

uint64_t TimeBitmap.SlotsView.subscript.setter(uint64_t result, unint64_t a2)
{
  uint64_t v2;

  *(_BYTE *)(v2 + (a2 >> 7) + 16) = result;
  return result;
}

unint64_t (*TimeBitmap.subscript.modify(uint64_t a1, unint64_t a2, uint64_t a3))(unint64_t *a1)
{
  uint64_t v3;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = TimeBitmap.subscript.getter(a2, a2, a3, *(_QWORD *)(v3 + 16)) & 1;
  return sub_10007E9A4;
}

unint64_t sub_10007E9A4(unint64_t *a1)
{
  return sub_100092490(*a1);
}

CoreP2P::NANTimeUnit __swiftcall TimeBitmap.index(after:)(CoreP2P::NANTimeUnit after)
{
  BOOL v1;
  CoreP2P::NANTimeUnit result;

  v1 = __CFADD__(after.rawValue, 16);
  result.rawValue = after.rawValue + 16;
  if (v1)
    __break(1u);
  return result;
}

CoreP2P::NANTimeUnit __swiftcall TimeBitmap.index(before:)(CoreP2P::NANTimeUnit before)
{
  BOOL v1;
  CoreP2P::NANTimeUnit result;

  v1 = before.rawValue >= 0x10;
  result.rawValue = before.rawValue - 16;
  if (!v1)
    __break(1u);
  return result;
}

CoreP2P::NANTimeUnit __swiftcall TimeBitmap.index(_:offsetBy:)(CoreP2P::NANTimeUnit _, Swift::Int offsetBy)
{
  BOOL v2;
  CoreP2P::NANTimeUnit result;

  if (offsetBy < 0)
    goto LABEL_7;
  if ((unint64_t)offsetBy >> 60)
  {
    __break(1u);
    goto LABEL_6;
  }
  v2 = __CFADD__(_.rawValue, 16 * offsetBy);
  result.rawValue = _.rawValue + 16 * offsetBy;
  if (v2)
  {
LABEL_6:
    __break(1u);
LABEL_7:
    result.rawValue = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
    __break(1u);
  }
  return result;
}

Swift::Int __swiftcall TimeBitmap.distance(from:to:)(Swift::Int from, CoreP2P::NANTimeUnit to)
{
  if (to.rawValue >= from)
    return (to.rawValue - from) >> 4;
  __break(1u);
  return from;
}

uint64_t NANDataManagementFrameTransferCompleteEvent.status.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

void TimeBitmap.description.getter(unint64_t a1, uint64_t a2, unint64_t a3)
{
  char v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  Swift::String v14;
  void *object;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _BYTE v20[8];
  uint64_t v21;
  unint64_t v22;

  v21 = 0;
  v22 = 0xE000000000000000;
  if (a1 != a2)
  {
    v3 = a3;
    v4 = a1;
    v5 = a1 >> 7;
    v17 = HIWORD(a3);
    v18 = HIBYTE(a3);
    v16 = a3 >> 40;
    v6 = HIDWORD(a3);
    v7 = a3 >> 24;
    v8 = a3 >> 16;
    v9 = a3 >> 8;
    while (1)
    {
      v20[0] = v3;
      v20[1] = v9;
      v20[2] = v8;
      v20[3] = v7;
      v20[4] = v6;
      v20[5] = v16;
      v20[6] = v17;
      v20[7] = v18;
      v10 = v4 + 128;
      if (v4 >= 0xFFFFFFFFFFFFFF80)
        break;
      v11 = v20[v5];
      v12 = sub_100012C44((uint64_t *)&unk_100404F10);
      v13 = swift_allocObject(v12, 72, 7);
      *(_OWORD *)(v13 + 16) = xmmword_10033A110;
      *(_QWORD *)(v13 + 56) = &type metadata for UInt8;
      *(_QWORD *)(v13 + 64) = &protocol witness table for UInt8;
      *(_BYTE *)(v13 + 32) = v11;
      v14._countAndFlagsBits = String.init(format:_:)(1479684133, 0xE400000000000000, v13);
      object = v14._object;
      String.append(_:)(v14);
      swift_bridgeObjectRelease(object);
      v4 += 128;
      ++v5;
      if (v10 == a2)
        return;
    }
    __break(1u);
  }
}

void *TimeBitmap.Slot.OO.unsafeMutableAddressor()
{
  return &static TimeBitmap.Slot.OO;
}

void *TimeBitmap.Slot.FO.unsafeMutableAddressor()
{
  return &static TimeBitmap.Slot.FO;
}

uint64_t static TimeBitmap.Slot.FO.getter()
{
  return 240;
}

void *TimeBitmap.Slot.OF.unsafeMutableAddressor()
{
  return &static TimeBitmap.Slot.OF;
}

uint64_t static NANDiscoveryWindowIndex.last.getter()
{
  return 15;
}

Swift::Void __swiftcall TimeBitmap.Slot.setBit(_:)(Swift::UInt8 a1)
{
  _BYTE *v1;

  if (a1 > 7u)
    __break(1u);
  else
    *v1 |= 1 << a1;
}

Swift::Void __swiftcall TimeBitmap.Slot.clearBit(_:)(Swift::UInt8 a1)
{
  _BYTE *v1;

  if (a1 > 7u)
    __break(1u);
  else
    *v1 &= (-1 << a1) - 1;
}

void InfraScanCompleteEvent.hash(into:)(int a1, Swift::UInt8 a2)
{
  Hasher._combine(_:)(a2);
}

Swift::Int InfraScanCompleteEvent.hashValue.getter(Swift::UInt8 a1)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(a1);
  return Hasher._finalize()();
}

unint64_t TimeBitmap.SlotsView.subscript.modify(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t result;
  uint64_t v6;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = v2;
  v6 = *(_QWORD *)(v2 + 16);
  result = NANIntervalDuration.timeUnits.getter(0);
  if (result)
  {
    if (((a2 / result) & 0x8000000000000000) == 0)
    {
      *(_BYTE *)(a1 + 16) = *((_BYTE *)&v6 + ((a2 / result) >> 3));
      return (unint64_t)sub_10007ED30;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_10007ED30(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(result + 8) + (*(_QWORD *)result >> 7) + 16) = *(_BYTE *)(result + 16);
  return result;
}

CoreP2P::NANTimeUnit __swiftcall TimeBitmap.SlotsView.index(after:)(CoreP2P::NANTimeUnit after)
{
  BOOL v1;
  CoreP2P::NANTimeUnit result;

  v1 = __CFADD__(after.rawValue, 128);
  result.rawValue = after.rawValue + 128;
  if (v1)
    __break(1u);
  return result;
}

CoreP2P::NANTimeUnit __swiftcall TimeBitmap.SlotsView.index(_:offsetBy:)(CoreP2P::NANTimeUnit _, Swift::Int offsetBy)
{
  BOOL v2;
  CoreP2P::NANTimeUnit result;

  if (offsetBy < 0)
    goto LABEL_7;
  if ((unint64_t)offsetBy >> 57)
  {
    __break(1u);
    goto LABEL_6;
  }
  v2 = __CFADD__(_.rawValue, offsetBy << 7);
  result.rawValue = _.rawValue + (offsetBy << 7);
  if (v2)
  {
LABEL_6:
    __break(1u);
LABEL_7:
    result.rawValue = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
    __break(1u);
  }
  return result;
}

CoreP2P::NANTimeUnit __swiftcall TimeBitmap.SlotsView.index(before:)(CoreP2P::NANTimeUnit before)
{
  BOOL v1;
  CoreP2P::NANTimeUnit result;

  v1 = before.rawValue >= 0x80;
  result.rawValue = before.rawValue - 128;
  if (!v1)
    __break(1u);
  return result;
}

Swift::Int __swiftcall TimeBitmap.SlotsView.distance(from:to:)(Swift::Int from, CoreP2P::NANTimeUnit to)
{
  if (to.rawValue >= from)
    return (to.rawValue - from) >> 7;
  __break(1u);
  return from;
}

BOOL static TimeBitmap.SlotsView.== infix(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return a3 == a6;
}

void TimeBitmap.SlotsView.hash(into:)(int a1, int a2, int a3, unint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v4 = a4 >> 8;
  v5 = a4 >> 16;
  v6 = a4 >> 24;
  v7 = HIDWORD(a4);
  v8 = a4 >> 40;
  v9 = HIWORD(a4);
  v10 = HIBYTE(a4);
  Hasher._combine(_:)(a4);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
}

BOOL TimeBitmap.SlotsView.isEmpty.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3 == 0;
}

Swift::Int TimeBitmap.hashValue.getter(uint64_t a1, uint64_t a2, unint64_t a3)
{
  Swift::UInt8 v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD v12[9];

  v3 = a3;
  v4 = a3 >> 8;
  v5 = a3 >> 16;
  v6 = a3 >> 24;
  v7 = HIDWORD(a3);
  v8 = a3 >> 40;
  v9 = HIWORD(a3);
  v10 = HIBYTE(a3);
  Hasher.init(_seed:)(v12);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v9);
  Hasher._combine(_:)(v10);
  return Hasher._finalize()();
}

uint64_t sub_10007EFEC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  return sub_10007F640(a1, a2, a3, sub_10009253C, a4);
}

Swift::Int sub_10007EFFC()
{
  _BYTE *v0;
  Swift::UInt8 v1;
  Swift::UInt8 v2;
  Swift::UInt8 v3;
  Swift::UInt8 v4;
  Swift::UInt8 v5;
  Swift::UInt8 v6;
  Swift::UInt8 v7;
  Swift::UInt8 v8;
  _QWORD v10[9];

  v1 = v0[16];
  v2 = v0[17];
  v3 = v0[18];
  v4 = v0[19];
  v5 = v0[20];
  v6 = v0[21];
  v7 = v0[22];
  v8 = v0[23];
  Hasher.init(_seed:)(v10);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  return Hasher._finalize()();
}

void sub_10007F0D0()
{
  Swift::UInt8 *v0;
  Swift::UInt8 v1;
  Swift::UInt8 v2;
  Swift::UInt8 v3;
  Swift::UInt8 v4;
  Swift::UInt8 v5;
  Swift::UInt8 v6;
  Swift::UInt8 v7;

  v1 = v0[17];
  v2 = v0[18];
  v3 = v0[19];
  v4 = v0[20];
  v5 = v0[21];
  v6 = v0[22];
  v7 = v0[23];
  Hasher._combine(_:)(v0[16]);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
}

Swift::Int sub_10007F16C()
{
  _BYTE *v0;
  Swift::UInt8 v1;
  Swift::UInt8 v2;
  Swift::UInt8 v3;
  Swift::UInt8 v4;
  Swift::UInt8 v5;
  Swift::UInt8 v6;
  Swift::UInt8 v7;
  Swift::UInt8 v8;
  _QWORD v10[9];

  v1 = v0[16];
  v2 = v0[17];
  v3 = v0[18];
  v4 = v0[19];
  v5 = v0[20];
  v6 = v0[21];
  v7 = v0[22];
  v8 = v0[23];
  Hasher.init(_seed:)(v10);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  return Hasher._finalize()();
}

_QWORD *sub_10007F23C@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  if (*result < 0x80uLL)
    __break(1u);
  else
    *a2 = *result - 128;
  return result;
}

_QWORD *sub_10007F254(_QWORD *result)
{
  if (*result < 0x80uLL)
    __break(1u);
  else
    *result -= 128;
  return result;
}

BOOL sub_10007F26C(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16);
}

void sub_10007F2C0(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_QWORD *)(v1 + 8);
}

unint64_t sub_10007F2CC(_BYTE *a1, unint64_t *a2)
{
  uint64_t v2;
  unint64_t v4;
  unint64_t result;
  uint64_t v6;

  v4 = *a2;
  v6 = *(_QWORD *)(v2 + 16);
  result = NANIntervalDuration.timeUnits.getter(0);
  if (result)
  {
    if (((v4 / result) & 0x8000000000000000) == 0)
    {
      *a1 = *((_BYTE *)&v6 + ((v4 / result) >> 3));
      return (unint64_t)NANBitmap.Channel.operatingClass.getter;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

unint64_t *sub_10007F33C@<X0>(unint64_t *result@<X0>, unint64_t *a2@<X8>)
{
  unint64_t *v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v3 = *v2;
  v4 = v2[1];
  if (v4 < *v2)
  {
    __break(1u);
    goto LABEL_6;
  }
  v5 = *result;
  if (*result < v3)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  v6 = result[1];
  if (v4 >= v6)
  {
    v7 = v2[2];
    a2[2] = v3;
    a2[3] = v4;
    a2[4] = v7;
    *a2 = v5;
    a2[1] = v6;
    return result;
  }
LABEL_7:
  __break(1u);
  return result;
}

double sub_10007F380@<D0>(uint64_t a1@<X8>)
{
  double *v1;
  uint64_t v2;
  uint64_t v3;
  double result;

  v2 = *(_QWORD *)v1;
  v3 = *((_QWORD *)v1 + 1);
  *(double *)a1 = *v1;
  *(_QWORD *)(a1 + 8) = v3;
  result = v1[2];
  *(double *)(a1 + 16) = result;
  *(_QWORD *)(a1 + 24) = v2;
  *(_QWORD *)(a1 + 32) = v3;
  return result;
}

BOOL sub_10007F398()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16) == 0;
}

void sub_10007F3EC(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_WORD *)(a1 + 8) = 256;
}

_QWORD *sub_10007F3FC@<X0>(_QWORD *result@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  if ((a2 & 0x8000000000000000) == 0)
  {
    if (a2 >> 57)
    {
      __break(1u);
    }
    else if (!__CFADD__(*result, a2 << 7))
    {
      *a3 = *result + (a2 << 7);
      return result;
    }
    __break(1u);
  }
  result = (_QWORD *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
  __break(1u);
  return result;
}

_QWORD *sub_10007F480(_QWORD *result, _QWORD *a2)
{
  if (*a2 >= *result)
    return (_QWORD *)((*a2 - *result) >> 7);
  __break(1u);
  return result;
}

_QWORD *sub_10007F4A8@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  if (*result >= 0xFFFFFFFFFFFFFF80)
    __break(1u);
  else
    *a2 = *result + 128;
  return result;
}

_QWORD *sub_10007F4C0(_QWORD *result)
{
  if (*result >= 0xFFFFFFFFFFFFFF80)
    __break(1u);
  else
    *result += 128;
  return result;
}

__n128 sub_10007F4D8@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  __n128 result;

  result = *v1;
  *a1 = *v1;
  a1[1].n128_u64[0] = v1[1].n128_u64[0];
  a1[1].n128_u64[1] = result.n128_u64[0];
  return result;
}

unint64_t sub_10007F4EC()
{
  _QWORD *v0;
  unint64_t v1;
  unint64_t result;

  v1 = v0[1];
  if (v1 >= *v0)
    return (v1 - *v0) >> 7;
  __break(1u);
  return result;
}

_QWORD *sub_10007F504()
{
  uint64_t v0;

  return sub_10008C480(*(_QWORD **)v0, *(_QWORD *)(v0 + 8), *(_QWORD *)(v0 + 16));
}

unint64_t sub_10007F510(unint64_t a1, _BYTE *a2, uint64_t a3)
{
  unint64_t *v3;

  return sub_10008BCC4(a1, a2, a3, *v3, v3[1], v3[2]);
}

uint64_t sub_10007F520@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  return sub_10007F640(a1, a2, a3, sub_1000925EC, a4);
}

void sub_10007F530()
{
  uint64_t v0;

  TimeBitmap.description.getter(*(_QWORD *)v0, *(_QWORD *)(v0 + 8), *(_QWORD *)(v0 + 16));
}

_QWORD *sub_10007F53C@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  if (*result < 0x10uLL)
    __break(1u);
  else
    *a2 = *result - 16;
  return result;
}

_QWORD *sub_10007F554(_QWORD *result)
{
  if (*result < 0x10uLL)
    __break(1u);
  else
    *result -= 16;
  return result;
}

uint64_t (*sub_10007F56C(_BYTE *a1, unint64_t *a2, uint64_t a3))(_QWORD)
{
  uint64_t v3;

  *a1 = TimeBitmap.subscript.getter(*a2, (uint64_t)a2, a3, *(_QWORD *)(v3 + 16)) & 1;
  return NANBitmap.Channel.operatingClass.getter;
}

BOOL sub_10007F5A8()
{
  _QWORD *v0;

  return *v0 == v0[1];
}

_QWORD *sub_10007F5BC@<X0>(_QWORD *result@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  if ((a2 & 0x8000000000000000) == 0)
  {
    if (a2 >> 60)
    {
      __break(1u);
    }
    else if (!__CFADD__(*result, 16 * a2))
    {
      *a3 = *result + 16 * a2;
      return result;
    }
    __break(1u);
  }
  result = (_QWORD *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
  __break(1u);
  return result;
}

uint64_t sub_10007F640@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t (*a4)(_QWORD, uint64_t, _QWORD)@<X5>, uint64_t a5@<X8>)
{
  uint64_t result;
  char v7;

  result = a4(*a1, a2, *a3);
  *(_QWORD *)a5 = result;
  *(_BYTE *)(a5 + 8) = v7 & 1;
  return result;
}

_QWORD *sub_10007F674(_QWORD *result, _QWORD *a2)
{
  if (*a2 >= *result)
    return (_QWORD *)((*a2 - *result) >> 4);
  __break(1u);
  return result;
}

_QWORD *sub_10007F690(_QWORD *result, _QWORD *a2)
{
  if (*result < *a2 || *result >= a2[1])
    __break(1u);
  return result;
}

_QWORD *sub_10007F6AC(_QWORD *result, _QWORD *a2)
{
  if (*result < *a2 || a2[1] < *result)
    __break(1u);
  return result;
}

_QWORD *sub_10007F6C8(_QWORD *result, _QWORD *a2)
{
  if (*result < *a2 || a2[1] < result[1])
    __break(1u);
  return result;
}

_QWORD *sub_10007F6E4@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  if (*result >= 0xFFFFFFFFFFFFFFF0)
    __break(1u);
  else
    *a2 = *result + 16;
  return result;
}

_QWORD *sub_10007F6FC(_QWORD *result)
{
  if (*result >= 0xFFFFFFFFFFFFFFF0)
    __break(1u);
  else
    *result += 16;
  return result;
}

unint64_t sub_10007F714()
{
  _QWORD *v0;
  unint64_t v1;
  unint64_t result;

  v1 = v0[1];
  if (v1 >= *v0)
    return (v1 - *v0) >> 4;
  __break(1u);
  return result;
}

unint64_t *sub_10007F72C()
{
  uint64_t v0;

  return sub_10008C538(*(unint64_t **)v0, *(_QWORD *)(v0 + 8), *(_QWORD *)(v0 + 16));
}

unint64_t *sub_10007F738(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  unint64_t *v3;

  return sub_10008BBA0(a1, a2, a3, *v3, v3[1], v3[2]);
}

uint64_t sub_10007F744(char a1)
{
  __int16 v1;
  __int16 v2;
  __int16 v4;
  uint64_t v5;

  v1 = 2 * (a1 & 1);
  if ((a1 & 2) != 0)
    v1 |= 0xCu;
  if ((a1 & 4) != 0)
    v1 |= 0x28u;
  if ((a1 & 8) != 0)
    v1 |= 0x8Cu;
  if ((a1 & 0x10) != 0)
    v1 |= 0x210u;
  if ((a1 & 0x20) != 0)
    v1 |= 0x814u;
  if ((a1 & 0x40) != 0)
    v1 |= 0x2018u;
  if (a1 >= 0)
    v2 = v1;
  else
    v2 = v1 | 0x801C;
  v4 = v2;
  return sub_1000FADC0((uint64_t)&v4, (uint64_t)&v5);
}

uint64_t sub_10007F810(char a1)
{
  int v1;
  int v2;
  int v4;
  uint64_t v5;

  v1 = 2 * (a1 & 1);
  if ((a1 & 2) != 0)
    v1 |= 0x30u;
  if ((a1 & 4) != 0)
    v1 |= 0x220u;
  if ((a1 & 8) != 0)
    v1 |= 0x2030u;
  if ((a1 & 0x10) != 0)
    v1 |= 0x20040u;
  if ((a1 & 0x20) != 0)
    v1 |= 0x200050u;
  if ((a1 & 0x40) != 0)
    v1 |= 0x2000060u;
  if (a1 >= 0)
    v2 = v1;
  else
    v2 = v1 | 0x20000070;
  v4 = v2;
  return sub_1000FADC0((uint64_t)&v4, (uint64_t)&v5);
}

uint64_t sub_10007F8EC(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v1 = 2 * (a1 & 1u);
  if ((a1 & 2) != 0)
    v1 |= 0x300uLL;
  if ((a1 & 4) != 0)
    v1 |= 0x20200uLL;
  if ((a1 & 8) != 0)
    v1 |= 0x2000300uLL;
  if ((a1 & 0x10) != 0)
    v1 |= 0x200000400uLL;
  if ((a1 & 0x20) != 0)
    v1 |= 0x20000000500uLL;
  if ((a1 & 0x40) != 0)
    v1 |= 0x2000000000600uLL;
  if (a1 >= 0)
    v2 = v1;
  else
    v2 = v1 | 0x200000000000700;
  v4 = v2;
  return sub_1000FADC0((uint64_t)&v4, (uint64_t)&v5);
}

uint64_t TimeBitmap.nanBitmap.getter(unint64_t a1, unint64_t a2, unint64_t a3)
{
  unint64_t v3;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  BOOL v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  int v31;
  int v32;
  int v33;
  uint64_t result;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  int v41;
  unint64_t v42;
  __int16 v43;
  char v44;
  char v45;
  char v46;
  char v47;
  char v48;
  char v49;
  _QWORD *v50;

  v7 = a1;
  v8 = a1;
  if (a1 != a2)
  {
    v9 = a1 >> 7;
    v7 = a1;
    while (1)
    {
      v50 = (_QWORD *)a3;
      if (*((_BYTE *)&v50 + v9))
        break;
      v10 = v7 + 128;
      if (v7 >= 0xFFFFFFFFFFFFFF80)
      {
LABEL_39:
        __break(1u);
        goto LABEL_40;
      }
      v7 += 128;
      ++v9;
      if (v10 == a2)
      {
        v7 = a2;
        break;
      }
    }
    v11 = a2;
    while (1)
    {
      v12 = v11 >= 0x80;
      v11 -= 128;
      if (!v12)
      {
        __break(1u);
        goto LABEL_39;
      }
      v50 = (_QWORD *)a3;
      if (*((_BYTE *)&v50 + (v11 >> 7)))
        break;
      if (v11 == a1)
      {
        v8 = a1;
        goto LABEL_14;
      }
    }
    v8 = v11 + 128;
    if (v11 >= 0xFFFFFFFFFFFFFF80)
      goto LABEL_49;
  }
LABEL_14:
  v3 = v7 - a1;
  if (v7 < a1)
    goto LABEL_42;
  v42 = v8;
  v13 = NANIntervalDuration.timeUnits.getter(0);
  if (!v13)
  {
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  if ((v3 & 0xF) != 0)
  {
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  v14 = v3 / v13;
  if (v3 / v13 > 0x1FF)
  {
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
  v3 = 0;
  v15 = sub_1001AA384(0, 0, 3);
  v16 = sub_1001AA384(4u, 3uLL, 3);
  v17 = sub_1001AA398(v14, 6uLL, 9);
  v18 = v17;
  v19 = v42 - v7;
  if (v42 > v7)
  {
    if (a2 < a1)
    {
LABEL_46:
      __break(1u);
      goto LABEL_47;
    }
    if (v7 < a1)
    {
LABEL_47:
      __break(1u);
      goto LABEL_48;
    }
    if (v42 > a2)
    {
LABEL_48:
      __break(1u);
LABEL_49:
      __break(1u);
      swift_unexpectedError(v3, "CoreP2P/NANAvailability.swift", 29, 1, 118);
      __break(1u);
      swift_unexpectedError(v3, "CoreP2P/NANAvailability.swift", 29, 1, 119);
      __break(1u);
      result = swift_unexpectedError(v3, "CoreP2P/NANAvailability.swift", 29, 1, 120);
      __break(1u);
      return result;
    }
    v20 = _swiftEmptyArrayStorage;
    if (v19 >= 0x80)
    {
      v40 = v17;
      v41 = v15;
      v3 = v19 >> 7;
      v50 = _swiftEmptyArrayStorage;
      sub_100074F24(0, v19 >> 7, 0);
      v21 = v42;
      v20 = v50;
      v22 = v7 >> 7;
      v23 = HIBYTE(a3);
      v24 = HIWORD(a3);
      v25 = a3 >> 40;
      v26 = HIDWORD(a3);
      v27 = a3 >> 24;
      while (v7 < v21)
      {
        v43 = a3;
        v44 = BYTE2(a3);
        v45 = v27;
        v46 = v26;
        v47 = v25;
        v48 = v24;
        v49 = v23;
        v29 = v20[2];
        v28 = v20[3];
        v30 = *((_BYTE *)&v43 + v22);
        v50 = v20;
        if (v29 >= v28 >> 1)
        {
          v38 = v24;
          v39 = v23;
          v36 = v26;
          v37 = v25;
          v35 = v27;
          sub_100074F24(v28 > 1, v29 + 1, 1);
          v27 = v35;
          v26 = v36;
          v25 = v37;
          v24 = v38;
          v23 = v39;
          v21 = v42;
          v20 = v50;
        }
        v20[2] = v29 + 1;
        *((_BYTE *)v20 + v29 + 32) = v30;
        if (v7 >= 0xFFFFFFFFFFFFFF80)
          goto LABEL_41;
        ++v22;
        v7 += 128;
        if (!--v3)
        {
          v15 = v41;
          v18 = v40;
          goto LABEL_31;
        }
      }
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      goto LABEL_43;
    }
LABEL_31:
    sub_1001068EC((uint64_t)v20);
    swift_bridgeObjectRelease(v20);
  }
  if (((unsigned __int16)v16 & (unsigned __int16)~(_WORD)v15) != 0)
    v31 = v16;
  else
    v31 = 0;
  v32 = v31 | v15;
  if (((unsigned __int16)v18 & (unsigned __int16)~(_WORD)v32) != 0)
    v33 = v18;
  else
    v33 = 0;
  return v33 | v32;
}

uint64_t TimeBitmap.init(period:repeating:)(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v6;
  int v7;
  int v8;
  int v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unint64_t v14;
  int v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t result;
  int v23;

  if (!NANIntervalDuration.timeUnits.getter(0))
  {
    __break(1u);
    goto LABEL_18;
  }
  v6 = sub_1001AA384(0, 0, 3);
  if (v2)
  {
LABEL_18:
    swift_unexpectedError(v2, "CoreP2P/NANAvailability.swift", 29, 1);
    __break(1u);
    swift_unexpectedError(v2, "CoreP2P/NANAvailability.swift", 29, 1);
    __break(1u);
    result = swift_unexpectedError(v3, "CoreP2P/NANAvailability.swift", 29, 1);
    __break(1u);
    return result;
  }
  v7 = v6;
  v8 = sub_1001AA384(a1, 3uLL, 3);
  v9 = sub_1001AA398(0, 6uLL, 9);
  v10 = *(_QWORD *)(a2 + 16);
  if (v10)
  {
    v23 = v7;
    sub_100074F24(0, v10, 0);
    v11 = 0;
    v12 = _swiftEmptyArrayStorage[2];
    do
    {
      v13 = *(_BYTE *)(a2 + v11 + 32);
      v14 = _swiftEmptyArrayStorage[3];
      if (v12 + v11 >= v14 >> 1)
        sub_100074F24(v14 > 1, v12 + v11 + 1, 1);
      _swiftEmptyArrayStorage[2] = v12 + v11 + 1;
      *((_BYTE *)&_swiftEmptyArrayStorage[4] + v12 + v11++) = v13;
    }
    while (v10 != v11);
    swift_bridgeObjectRelease(a2);
    v7 = v23;
  }
  else
  {
    swift_bridgeObjectRelease(a2);
  }
  if (((unsigned __int16)v8 & (unsigned __int16)~(_WORD)v7) != 0)
    v15 = v8;
  else
    v15 = 0;
  v16 = v15 | v7;
  if (((unsigned __int16)v9 & (unsigned __int16)~(_WORD)v16) != 0)
    v17 = v9;
  else
    v17 = 0;
  v18 = v17 | v16;
  v19 = sub_1001068EC((uint64_t)_swiftEmptyArrayStorage);
  v21 = v20;
  swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
  return sub_10008EEF8(v18, v19, v21);
}

uint64_t sub_10007FFA4()
{
  uint64_t result;
  uint64_t v1;
  __int16 v2;
  char v3;
  char v4;
  char v5;
  char v6;
  char v7;
  char v8;

  result = _s7CoreP2P10TimeBitmapV14repeatingPerDWyA2C4SlotV_A3FtFZ_0(240, 0, 0, 0);
  static TimeBitmap.primaryDiscoveryWindow = result;
  unk_1004103C0 = v1;
  LOWORD(qword_1004103C8) = v2;
  BYTE2(qword_1004103C8) = v3;
  BYTE3(qword_1004103C8) = v4;
  BYTE4(qword_1004103C8) = v5;
  BYTE5(qword_1004103C8) = v6;
  BYTE6(qword_1004103C8) = v7;
  HIBYTE(qword_1004103C8) = v8;
  return result;
}

uint64_t *TimeBitmap.primaryDiscoveryWindow.unsafeMutableAddressor()
{
  if (qword_100403F08 != -1)
    swift_once(&qword_100403F08, sub_10007FFA4);
  return &static TimeBitmap.primaryDiscoveryWindow;
}

uint64_t static TimeBitmap.primaryDiscoveryWindow.getter()
{
  if (qword_100403F08 != -1)
    swift_once(&qword_100403F08, sub_10007FFA4);
  return static TimeBitmap.primaryDiscoveryWindow;
}

uint64_t sub_100080098()
{
  uint64_t result;
  uint64_t v1;
  __int16 v2;
  char v3;
  char v4;
  char v5;
  char v6;
  char v7;
  char v8;

  result = _s7CoreP2P10TimeBitmapV14repeatingPerDWyA2C4SlotV_A3FtFZ_0(0, 240, 0, 0);
  static TimeBitmap.secondaryDiscoveryWindow = result;
  *(_QWORD *)algn_1004103D8 = v1;
  LOWORD(qword_1004103E0) = v2;
  BYTE2(qword_1004103E0) = v3;
  BYTE3(qword_1004103E0) = v4;
  BYTE4(qword_1004103E0) = v5;
  BYTE5(qword_1004103E0) = v6;
  BYTE6(qword_1004103E0) = v7;
  HIBYTE(qword_1004103E0) = v8;
  return result;
}

uint64_t *TimeBitmap.secondaryDiscoveryWindow.unsafeMutableAddressor()
{
  if (qword_100403F10 != -1)
    swift_once(&qword_100403F10, sub_100080098);
  return &static TimeBitmap.secondaryDiscoveryWindow;
}

uint64_t static TimeBitmap.secondaryDiscoveryWindow.getter()
{
  if (qword_100403F10 != -1)
    swift_once(&qword_100403F10, sub_100080098);
  return static TimeBitmap.secondaryDiscoveryWindow;
}

void *TimeBitmap.twoGHzOutOfBoundActionFrameBitmap.unsafeMutableAddressor()
{
  return &static TimeBitmap.twoGHzOutOfBoundActionFrameBitmap;
}

uint64_t static TimeBitmap.twoGHzOutOfBoundActionFrameBitmap.getter()
{
  return 0;
}

void *TimeBitmap.fiveGHzOutOfBoundActionFrameBitmap.unsafeMutableAddressor()
{
  return &static TimeBitmap.fiveGHzOutOfBoundActionFrameBitmap;
}

uint64_t static TimeBitmap.fiveGHzOutOfBoundActionFrameBitmap.getter()
{
  return 0;
}

BOOL static InfrastructureQualityOfService.< infix(_:_:)(unsigned __int8 a1, unsigned __int8 a2)
{
  return a1 < a2;
}

uint64_t NANAvailabilityEntry.UsagePreference.rawValue.getter(uint64_t result)
{
  return result;
}

_UNKNOWN **static NANAvailabilityEntry.UsagePreference.allCases.getter()
{
  return &off_1003D6CD8;
}

unint64_t sub_1000801EC@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = _s7CoreP2P20NANAvailabilityEntryV15UsagePreferenceO8rawValueAESgSi_tcfC_0(*a1);
  *a2 = result;
  return result;
}

void sub_100080214(_QWORD *a1@<X8>)
{
  unsigned __int8 *v1;

  *a1 = *v1;
}

void sub_100080220(_QWORD *a1@<X8>)
{
  *a1 = &off_1003D6D00;
}

BOOL sub_100080230(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 < *a2;
}

BOOL sub_100080244(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a2 >= *a1;
}

BOOL sub_100080258(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 >= *a2;
}

BOOL sub_10008026C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a2 < *a1;
}

void *NANAvailabilityEntry.Control.committed.unsafeMutableAddressor()
{
  return &static NANAvailabilityEntry.Control.committed;
}

void *NANAvailabilityEntry.Control.potential.unsafeMutableAddressor()
{
  return &static NANAvailabilityEntry.Control.potential;
}

void *NANAvailabilityEntry.Control.conditional.unsafeMutableAddressor()
{
  return &static NANAvailabilityEntry.Control.conditional;
}

uint64_t NANAvailabilityEntry.Control.usagePreference.getter(unsigned int a1)
{
  return (a1 >> 3) & 3;
}

double NANAvailabilityEntry.Control.utilization.getter(unsigned int a1)
{
  return (double)((a1 >> 5) & 3) * 0.2;
}

uint64_t NANAvailabilityEntry.Control.rxNSS.getter(unsigned int a1)
{
  return (a1 >> 8) & 0xF;
}

uint64_t NANAvailabilityEntry.Control.init(from:)(_QWORD *a1)
{
  return sub_100090D20(a1);
}

CoreP2P::NANAvailabilityEntry::Control __swiftcall NANAvailabilityEntry.Control.init(entryType:usagePreference:)(CoreP2P::NANAvailabilityEntry::Control entryType, CoreP2P::NANAvailabilityEntry::UsagePreference usagePreference)
{
  return (CoreP2P::NANAvailabilityEntry::Control)(entryType.rawValue | (8 * usagePreference));
}

_WORD *sub_1000802EC@<X0>(_WORD *result@<X0>, _WORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

Swift::Int sub_1000802F8()
{
  Swift::UInt16 *v0;
  Swift::UInt16 v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_10008033C()
{
  Swift::UInt16 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int sub_100080364()
{
  Swift::UInt16 *v0;
  Swift::UInt16 v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t sub_1000803A4@<X0>(_QWORD *a1@<X0>, _WORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = sub_100090D20(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_1000803CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100093648();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

_WORD *sub_100080418@<X0>(_WORD *result@<X0>, _WORD *a2@<X8>)
{
  _WORD *v2;

  *a2 = *v2 | *result;
  return result;
}

_WORD *sub_10008042C@<X0>(_WORD *result@<X0>, _WORD *a2@<X8>)
{
  _WORD *v2;

  *a2 = *v2 & *result;
  return result;
}

_WORD *sub_100080440@<X0>(_WORD *result@<X0>, _WORD *a2@<X8>)
{
  _WORD *v2;

  *a2 = *v2 ^ *result;
  return result;
}

BOOL sub_100080454(_WORD *a1, unsigned __int16 *a2)
{
  _WORD *v2;
  int v3;
  int v4;

  v3 = *a2;
  v4 = (unsigned __int16)*v2;
  if ((v4 & v3) != v3)
    *v2 = v4 | v3;
  *a1 = v3;
  return (v4 & v3) != v3;
}

unsigned __int16 *sub_100080484@<X0>(unsigned __int16 *result@<X0>, uint64_t a2@<X8>)
{
  _WORD *v2;
  int v3;
  int v4;
  int v5;

  v3 = *result;
  v4 = (unsigned __int16)*v2;
  v5 = v4 & v3;
  if ((v4 & v3) != 0)
    *v2 = v4 & ~(_WORD)v3;
  *(_WORD *)a2 = v5;
  *(_BYTE *)(a2 + 2) = v5 == 0;
  return result;
}

unsigned __int16 *sub_1000804B0@<X0>(unsigned __int16 *result@<X0>, uint64_t a2@<X8>)
{
  _WORD *v2;
  int v3;
  int v4;
  int v5;

  v3 = *result;
  v4 = (unsigned __int16)*v2;
  *v2 = v4 | v3;
  v5 = v4 & v3;
  *(_WORD *)a2 = v5;
  *(_BYTE *)(a2 + 2) = v5 == 0;
  return result;
}

_WORD *sub_1000804D4(_WORD *result)
{
  _WORD *v1;

  *v1 |= *result;
  return result;
}

_WORD *sub_1000804E8(_WORD *result)
{
  _WORD *v1;

  *v1 &= *result;
  return result;
}

_WORD *sub_1000804FC(_WORD *result)
{
  _WORD *v1;

  *v1 ^= *result;
  return result;
}

_WORD *sub_100080510@<X0>(_WORD *result@<X0>, _WORD *a2@<X8>)
{
  _WORD *v2;

  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_100080524(unsigned __int16 *a1)
{
  unsigned __int16 *v1;

  return (*v1 & ~*a1) == 0;
}

BOOL sub_100080538(_WORD *a1)
{
  _WORD *v1;

  return (unsigned __int16)(*v1 & *a1) == 0;
}

BOOL sub_10008054C(unsigned __int16 *a1)
{
  unsigned __int16 *v1;

  return (*a1 & ~*v1) == 0;
}

BOOL sub_100080560()
{
  _WORD *v0;

  return *v0 == 0;
}

_WORD *sub_100080570(_WORD *result)
{
  _WORD *v1;

  *v1 &= ~*result;
  return result;
}

_WORD *sub_100080584@<X0>(_WORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_WORD *)a2 = *result;
  *(_BYTE *)(a2 + 2) = 0;
  return result;
}

void sub_100080594(_WORD *a1@<X8>)
{
  _WORD *v1;

  *a1 = *v1;
}

BOOL sub_1000805A0(unsigned __int16 *a1, unsigned __int16 *a2)
{
  return *a1 == *a2;
}

CoreP2P::WiFiInterfaceLinkState_optional __swiftcall WiFiInterfaceLinkState.init(rawValue:)(Swift::UInt8 rawValue)
{
  CoreP2P::WiFiInterfaceLinkState_optional v1;

  if (rawValue == 1)
    v1.value = CoreP2P_WiFiInterfaceLinkState_linkUp;
  else
    v1.value = CoreP2P_WiFiInterfaceLinkState_unknownDefault;
  if (rawValue)
    return v1;
  else
    return 0;
}

uint64_t AWDLSoftAPChannelChangedEvent.enabled.getter(char a1)
{
  return a1 & 1;
}

_BYTE *sub_1000805D8@<X0>(_BYTE *result@<X0>, char *a2@<X8>)
{
  char v2;
  char v3;

  if (*result == 1)
    v2 = 1;
  else
    v2 = 2;
  if (*result)
    v3 = v2;
  else
    v3 = 0;
  *a2 = v3;
  return result;
}

uint64_t NANAvailabilityEntry.BandChannelEntries.Control.entriesType.setter(char a1)
{
  _BYTE *v1;
  uint64_t result;
  unint64_t v3;
  char v4;

  result = a1 & 1;
  v3 = *v1;
  if ((v3 & 1) != 0)
  {
    if ((_DWORD)result)
      return result;
    goto LABEL_5;
  }
  if ((_DWORD)result)
  {
LABEL_5:
    v4 = sub_1001AA370(result, 0, 1);
    result = sub_1001AA35C(v3 >> 4, 4, 4);
    *v1 = v4 | v3 & 2 | result;
  }
  return result;
}

void *NANAvailabilityEntry.BandChannelEntries.Control.nonContiguousBandwidth.unsafeMutableAddressor()
{
  return &static NANAvailabilityEntry.BandChannelEntries.Control.nonContiguousBandwidth;
}

uint64_t NANAvailabilityEntry.BandChannelEntries.Control.numberOfEntries.getter(unsigned __int8 a1)
{
  return a1 >> 4;
}

CoreP2P::NANAvailabilityEntry::BandChannelEntries::Control_optional __swiftcall NANAvailabilityEntry.BandChannelEntries.Control.init(entriesType:nonContiguousBandwidth:numberOfEntries:)(CoreP2P::NANAvailabilityEntry::BandChannelEntries::Control::EntriesType entriesType, Swift::Bool nonContiguousBandwidth, Swift::Int numberOfEntries)
{
  char v5;
  char v6;
  unsigned __int8 v7;
  __int16 v8;
  char v10;

  if (numberOfEntries > 15)
  {
    v7 = 0;
    v8 = 1;
  }
  else
  {
    v5 = sub_1001AA370(entriesType & 1, 0, 1);
    v6 = sub_1001AA35C(numberOfEntries, 4, 4);
    v8 = 0;
    if (nonContiguousBandwidth)
      v10 = 2;
    else
      v10 = 0;
    v7 = v5 | v10 | v6;
  }
  return (CoreP2P::NANAvailabilityEntry::BandChannelEntries::Control_optional)(v7 | (unsigned __int16)(v8 << 8));
}

uint64_t (*NANAvailabilityEntry.BandChannelEntries.Control.entriesType.modify(uint64_t a1))(uint64_t a1, char a2)
{
  _BYTE *v1;

  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = *v1 & 1;
  return sub_10008075C;
}

uint64_t sub_10008075C(uint64_t a1, char a2)
{
  _BYTE *v2;
  uint64_t result;
  unint64_t v4;
  char v5;

  v2 = *(_BYTE **)a1;
  result = *(unsigned __int8 *)(a1 + 8);
  v4 = *v2;
  if ((a2 & 1) != 0)
  {
    if ((v4 & 1) != 0)
    {
      if ((result & 1) != 0)
        return result;
    }
    else if ((result & 1) == 0)
    {
      return result;
    }
    v5 = sub_1001AA370(result, 0, 1);
    result = sub_1001AA35C(v4 >> 4, 4, 4);
LABEL_12:
    *v2 = v5 | v4 & 2 | result;
    return result;
  }
  if ((v4 & 1) != 0)
  {
    if ((result & 1) != 0)
      return result;
    goto LABEL_11;
  }
  if ((_DWORD)result)
  {
LABEL_11:
    v5 = sub_1001AA370(result, 0, 1);
    result = sub_1001AA35C(v4 >> 4, 4, 4);
    goto LABEL_12;
  }
  return result;
}

void *NANAvailabilityEntry.BandChannelEntries.Control.maximumNumberOfEntries.unsafeMutableAddressor()
{
  return &static NANAvailabilityEntry.BandChannelEntries.Control.maximumNumberOfEntries;
}

uint64_t NANAvailabilityEntry.BandChannelEntries.Control.numberOfEntries.setter(uint64_t result)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  char v6;

  v3 = *v1;
  if (result != v3 >> 4)
  {
    v4 = result;
    if ((v3 & 1) != 0)
    {
      if (result > 15)
        goto LABEL_10;
      v5 = 1;
    }
    else
    {
      if (result > 15)
      {
        __break(1u);
LABEL_10:
        __break(1u);
        result = swift_errorRelease(v2);
        __break(1u);
        return result;
      }
      v5 = 0;
    }
    v6 = sub_1001AA370(v5, 0, 1);
    result = sub_1001AA35C(v4, 4, 4);
    *v1 = v6 | result | v3 & 2;
  }
  return result;
}

uint64_t (*NANAvailabilityEntry.BandChannelEntries.Control.numberOfEntries.modify(unint64_t *a1))(uint64_t result, char a2)
{
  unsigned __int8 *v1;

  *a1 = (unint64_t)*v1 >> 4;
  a1[1] = (unint64_t)v1;
  return sub_10008090C;
}

uint64_t sub_10008090C(uint64_t result, char a2)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  unint64_t v5;
  unsigned __int8 v6;
  char v7;

  v3 = *(_QWORD *)result;
  v4 = *(_BYTE **)(result + 8);
  v5 = *v4;
  if ((a2 & 1) != 0)
  {
    if (*(_QWORD *)result == v5 >> 4)
      return result;
    if ((v5 & 1) != 0)
    {
      if (v3 > 15)
      {
LABEL_18:
        __break(1u);
        goto LABEL_19;
      }
      v6 = 1;
    }
    else
    {
      if (v3 > 15)
      {
        __break(1u);
LABEL_17:
        __break(1u);
        goto LABEL_18;
      }
      v6 = 0;
    }
  }
  else
  {
    if (*(_QWORD *)result == v5 >> 4)
      return result;
    if ((v5 & 1) != 0)
    {
      if (v3 > 15)
      {
LABEL_19:
        __break(1u);
        result = swift_errorRelease(v2);
        __break(1u);
        return result;
      }
      v6 = 1;
    }
    else
    {
      if (v3 > 15)
        goto LABEL_17;
      v6 = 0;
    }
  }
  v7 = sub_1001AA370(v6, 0, 1);
  result = sub_1001AA35C(v3, 4, 4);
  *v4 = v7 | result | v5 & 2;
  return result;
}

CoreP2P::NANAvailabilityEntry::BandChannelEntries::Control __swiftcall NANAvailabilityEntry.BandChannelEntries.Control.init(entriesType:)(CoreP2P::NANAvailabilityEntry::BandChannelEntries::Control::EntriesType entriesType)
{
  char v1;

  v1 = sub_1001AA370(entriesType & 1, 0, 1);
  return (CoreP2P::NANAvailabilityEntry::BandChannelEntries::Control)(sub_1001AA35C(1, 4, 4) | v1);
}

_BYTE *sub_100080A90@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t sub_100080A9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1000937B0();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_100080AF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1000937B0();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

_BYTE *sub_100080B44@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *v2;

  *a2 = *v2 | *result;
  return result;
}

_BYTE *sub_100080B58@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *v2;

  *a2 = *v2 & *result;
  return result;
}

_BYTE *sub_100080B6C@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *v2;

  *a2 = *v2 ^ *result;
  return result;
}

BOOL sub_100080B80(_BYTE *a1, unsigned __int8 *a2)
{
  _BYTE *v2;
  int v3;
  int v4;

  v3 = *a2;
  v4 = *v2;
  if ((v4 & v3) != v3)
    *v2 = v4 | v3;
  *a1 = v3;
  return (v4 & v3) != v3;
}

unsigned __int8 *sub_100080BB0@<X0>(unsigned __int8 *result@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *v2;
  int v3;
  int v4;
  int v5;

  v3 = *result;
  v4 = *v2;
  v5 = v4 & v3;
  if ((v4 & v3) != 0)
    *v2 = v4 & ~(_BYTE)v3;
  *a2 = v5;
  a2[1] = v5 == 0;
  return result;
}

unsigned __int8 *sub_100080BDC@<X0>(unsigned __int8 *result@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *v2;
  int v3;
  int v4;
  int v5;

  v3 = *result;
  v4 = *v2;
  *v2 = v4 | v3;
  v5 = v4 & v3;
  *a2 = v5;
  a2[1] = v5 == 0;
  return result;
}

_BYTE *sub_100080C00(_BYTE *result)
{
  _BYTE *v1;

  *v1 |= *result;
  return result;
}

_BYTE *sub_100080C14(_BYTE *result)
{
  _BYTE *v1;

  *v1 &= *result;
  return result;
}

_BYTE *sub_100080C28(_BYTE *result)
{
  _BYTE *v1;

  *v1 ^= *result;
  return result;
}

_BYTE *sub_100080C3C@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  _BYTE *v2;

  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_100080C50(unsigned __int8 *a1)
{
  unsigned __int8 *v1;

  return (*v1 & ~*a1) == 0;
}

BOOL sub_100080C64(_BYTE *a1)
{
  _BYTE *v1;

  return (*v1 & *a1) == 0;
}

BOOL sub_100080C78(unsigned __int8 *a1)
{
  unsigned __int8 *v1;

  return (*a1 & ~*v1) == 0;
}

BOOL sub_100080C8C()
{
  _BYTE *v0;

  return *v0 == 0;
}

_BYTE *sub_100080C9C(_BYTE *result)
{
  _BYTE *v1;

  *v1 &= ~*result;
  return result;
}

unsigned __int8 *sub_100080CB0@<X0>(unsigned __int8 *result@<X0>, _WORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t sub_100080CC0()
{
  unsigned __int8 *v0;
  uint64_t v1;
  unsigned __int8 v2;
  unint64_t v3;
  char v4;
  unint64_t v5;
  uint64_t result;
  unsigned __int8 v7;
  char v8;
  char v9;

  v1 = *((_QWORD *)v0 + 1);
  v2 = v0[16];
  v3 = *v0;
  swift_bridgeObjectRetain(v1);
  if ((v2 & 1) != 0)
  {
    if ((v3 & 1) == 0)
    {
      v4 = sub_1001AA370(1u, 0, 1);
      LOBYTE(v3) = v4 | v3 & 2 | sub_1001AA35C(v3 >> 4, 4, 4);
      *v0 = v3;
    }
    v5 = *(_QWORD *)(v1 + 16);
    result = swift_bridgeObjectRelease(v1);
    if (v5 != v3 >> 4)
    {
      if ((v3 & 1) != 0)
      {
        if (v5 <= 0xF)
        {
          v7 = 1;
          goto LABEL_18;
        }
        goto LABEL_22;
      }
      if (v5 <= 0xF)
      {
        v7 = 0;
LABEL_18:
        v9 = sub_1001AA370(v7, 0, 1);
        result = sub_1001AA35C(v5, 4, 4);
        *v0 = v9 | v3 & 2 | result;
        return result;
      }
      __break(1u);
LABEL_21:
      __break(1u);
LABEL_22:
      __break(1u);
      goto LABEL_23;
    }
  }
  else
  {
    if ((v3 & 1) != 0)
    {
      v8 = sub_1001AA370(0, 0, 1);
      LOBYTE(v3) = v8 | v3 & 2 | sub_1001AA35C(v3 >> 4, 4, 4);
      *v0 = v3;
    }
    v5 = *(_QWORD *)(v1 + 16);
    result = swift_bridgeObjectRelease(v1);
    if (v5 != v3 >> 4)
    {
      if ((v3 & 1) != 0)
      {
        if (v5 <= 0xF)
        {
          v7 = 1;
          goto LABEL_18;
        }
LABEL_23:
        __break(1u);
        swift_errorRelease(0);
        __break(1u);
        swift_errorRelease(0);
        __break(1u);
        result = swift_errorRelease(0);
        __break(1u);
        return result;
      }
      if (v5 <= 0xF)
      {
        v7 = 0;
        goto LABEL_18;
      }
      goto LABEL_21;
    }
  }
  return result;
}

uint64_t NANAvailabilityEntry.BandChannelEntries.entries.getter(uint64_t a1, uint64_t a2)
{
  return swift_bridgeObjectRetain(a2);
}

uint64_t NANAvailabilityEntry.BandChannelEntries.entries.setter(uint64_t a1, char a2)
{
  uint64_t v2;

  swift_bridgeObjectRelease(*(_QWORD *)(v2 + 8));
  *(_QWORD *)(v2 + 8) = a1;
  *(_BYTE *)(v2 + 16) = a2 & 1;
  return sub_100080CC0();
}

uint64_t (*NANAvailabilityEntry.BandChannelEntries.entries.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *a1 = v1;
  return sub_100080F0C;
}

uint64_t sub_100080F0C(uint64_t a1, char a2)
{
  uint64_t result;

  if ((a2 & 1) == 0)
    return sub_100080CC0();
  return result;
}

Swift::Void __swiftcall NANAvailabilityEntry.BandChannelEntries.add(channel:)(CoreP2P::NANBitmap::Channel channel)
{
  uint64_t v1;
  Swift::Bool is_nil;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  char *v9;

  if (*(_BYTE *)(v1 + 16) == 1)
  {
    is_nil = channel.auxiliaryChannelBitmap.is_nil;
    v3 = *(_QWORD *)&channel.operatingClass;
    v4 = *(_QWORD **)(v1 + 8);
    v5 = swift_bridgeObjectRetain(v4);
    v6 = v4;
    if ((swift_isUniquelyReferenced_nonNull_native(v5) & 1) == 0)
      v6 = sub_1000B2718(0, v4[2] + 1, 1, v4);
    v8 = v6[2];
    v7 = v6[3];
    if (v8 >= v7 >> 1)
      v6 = sub_1000B2718((_QWORD *)(v7 > 1), v8 + 1, 1, v6);
    v6[2] = v8 + 1;
    v9 = (char *)v6 + 10 * v8;
    v9[32] = v3;
    *((_WORD *)v9 + 17) = WORD1(v3);
    v9[36] = BYTE4(v3);
    *((_WORD *)v9 + 19) = HIWORD(v3);
    v9[40] = is_nil;
    swift_bridgeObjectRelease(v4);
    *(_QWORD *)(v1 + 8) = v6;
    *(_BYTE *)(v1 + 16) = 1;
    sub_100080CC0();
  }
}

void NANAvailabilityEntry.BandChannelEntries.hash(into:)(uint64_t a1, Swift::UInt8 a2, uint64_t a3, char a4)
{
  Swift::UInt v7;
  Swift::UInt8 *v8;
  Swift::UInt8 v9;

  Hasher._combine(_:)(a2);
  if ((a4 & 1) != 0)
  {
    sub_10008E3BC(a1, a3);
  }
  else
  {
    v7 = *(_QWORD *)(a3 + 16);
    Hasher._combine(_:)(v7);
    if (v7)
    {
      v8 = (Swift::UInt8 *)(a3 + 32);
      do
      {
        v9 = *v8++;
        Hasher._combine(_:)(v9);
        --v7;
      }
      while (v7);
    }
  }
}

uint64_t static NANAvailabilityEntry.BandChannelEntries.__derived_struct_equals(_:_:)(char a1, uint64_t a2, char a3, char a4, uint64_t a5, char a6)
{
  if (a1 != a4)
    return 0;
  if ((a3 & 1) != 0)
  {
    if ((a6 & 1) != 0 && (sub_100085C70(a2, a5) & 1) != 0)
      return 1;
  }
  else if ((a6 & 1) == 0 && sub_100085D28(a2, a5))
  {
    return 1;
  }
  return 0;
}

Swift::Int NANAvailabilityEntry.BandChannelEntries.hashValue.getter(Swift::UInt8 a1, uint64_t a2, char a3)
{
  Swift::UInt v6;
  Swift::UInt8 *v7;
  Swift::UInt8 v8;
  _QWORD v10[9];

  Hasher.init(_seed:)(v10);
  Hasher._combine(_:)(a1);
  if ((a3 & 1) != 0)
  {
    sub_10008E3BC((uint64_t)v10, a2);
  }
  else
  {
    v6 = *(_QWORD *)(a2 + 16);
    Hasher._combine(_:)(v6);
    if (v6)
    {
      v7 = (Swift::UInt8 *)(a2 + 32);
      do
      {
        v8 = *v7++;
        Hasher._combine(_:)(v8);
        --v6;
      }
      while (v6);
    }
  }
  return Hasher._finalize()();
}

Swift::Int sub_1000811AC()
{
  uint64_t v0;

  return NANAvailabilityEntry.BandChannelEntries.hashValue.getter(*(_BYTE *)v0, *(_QWORD *)(v0 + 8), *(_BYTE *)(v0 + 16));
}

void sub_1000811BC(uint64_t a1)
{
  uint64_t v1;

  NANAvailabilityEntry.BandChannelEntries.hash(into:)(a1, *(_BYTE *)v1, *(_QWORD *)(v1 + 8), *(_BYTE *)(v1 + 16));
}

Swift::Int sub_1000811CC()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  Swift::UInt8 v3;
  Swift::UInt v4;
  Swift::UInt8 *v5;
  Swift::UInt8 v6;
  _QWORD v8[9];

  v1 = *(_QWORD *)(v0 + 8);
  v2 = *(_BYTE *)(v0 + 16);
  v3 = *(_BYTE *)v0;
  Hasher.init(_seed:)(v8);
  Hasher._combine(_:)(v3);
  if ((v2 & 1) != 0)
  {
    sub_10008E3BC((uint64_t)v8, v1);
  }
  else
  {
    v4 = *(_QWORD *)(v1 + 16);
    Hasher._combine(_:)(v4);
    if (v4)
    {
      v5 = (Swift::UInt8 *)(v1 + 32);
      do
      {
        v6 = *v5++;
        Hasher._combine(_:)(v6);
        --v4;
      }
      while (v4);
    }
  }
  return Hasher._finalize()();
}

uint64_t sub_10008125C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  char v6;

  result = sub_100091ED8(a1);
  if (!v2)
  {
    *(_BYTE *)a2 = result;
    *(_QWORD *)(a2 + 8) = v5;
    *(_BYTE *)(a2 + 16) = v6 & 1;
  }
  return result;
}

uint64_t NANAvailabilityEntry.BandChannelEntries.init(from:)(_QWORD *a1)
{
  return sub_100091ED8(a1);
}

uint64_t sub_1000812B0(_QWORD *a1)
{
  uint64_t v1;

  return NANAvailabilityEntry.BandChannelEntries.encode(to:)(a1, *(_BYTE *)v1, *(_QWORD *)(v1 + 8), *(_BYTE *)(v1 + 16));
}

uint64_t NANAvailabilityEntry.BandChannelEntries.encode(to:)(_QWORD *a1, char a2, uint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t (*v18)();
  uint64_t v19;
  _QWORD v21[3];
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v8 = a1[3];
  v9 = a1[4];
  sub_10003259C(a1, v8);
  dispatch thunk of Encoder.unkeyedContainer()(v21, v8, v9);
  LOBYTE(v24) = a2;
  v10 = v22;
  v11 = v23;
  sub_100034C68((uint64_t)v21, v22);
  v12 = sub_100092884();
  dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)(&v24, &type metadata for NANAvailabilityEntry.BandChannelEntries.Control, v12, v10, v11);
  if (!v4)
  {
    if ((a4 & 1) != 0)
    {
      v24 = a3;
      v13 = v22;
      v14 = v23;
      sub_100034C68((uint64_t)v21, v22);
      v15 = &qword_1004062C8;
      v16 = sub_100012C44(&qword_1004062C8);
      v17 = (unint64_t *)&unk_1004062D0;
      v18 = sub_1000928C8;
    }
    else
    {
      v24 = a3;
      v13 = v22;
      v14 = v23;
      sub_100034C68((uint64_t)v21, v22);
      v15 = &qword_1004062E0;
      v16 = sub_100012C44(&qword_1004062E0);
      v17 = (unint64_t *)&unk_1004062E8;
      v18 = sub_10009290C;
    }
    v19 = sub_1000934A0(v17, v15, (uint64_t (*)(void))v18, (const char *)&protocol conformance descriptor for <A> [A]);
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)(&v24, v16, v19, v13, v14);
  }
  return sub_100014430(v21);
}

uint64_t sub_100081438(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;

  if (*a1 == *a2)
  {
    v4 = *((_QWORD *)a1 + 1);
    v5 = *((_QWORD *)a2 + 1);
    v6 = a2[16];
    if ((a1[16] & 1) != 0)
    {
      if (v6 && (sub_100085C70(v4, v5) & 1) != 0)
        return 1;
    }
    else if ((v6 & 1) == 0 && sub_100085D28(v4, v5))
    {
      return 1;
    }
  }
  return 0;
}

uint64_t IEEE80211InformationElement.RSNCapability.version.getter()
{
  unsigned __int16 *v0;

  return *v0;
}

uint64_t NANAvailabilityEntry.timeBitmap.getter()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[1];
  sub_100063C28(v1, v0[2], v0[3]);
  return v1;
}

uint64_t NANAvailabilityEntry.timeBitmap.setter(uint64_t a1, uint64_t a2, unint64_t a3)
{
  __int16 *v3;
  uint64_t result;
  __int16 v8;
  __int16 v9;

  result = sub_1000634E8(*((_QWORD *)v3 + 1), *((_QWORD *)v3 + 2), *((_QWORD *)v3 + 3));
  *((_QWORD *)v3 + 1) = a1;
  *((_QWORD *)v3 + 2) = a2;
  *((_QWORD *)v3 + 3) = a3;
  v8 = *v3;
  if (a3 >> 60 == 15)
  {
    if ((*v3 & 0x1000) == 0)
      return result;
    v9 = v8 & 0xEFFF;
  }
  else
  {
    if ((*v3 & 0x1000) != 0)
      return result;
    v9 = v8 | 0x1000;
  }
  *v3 = v9;
  return result;
}

__int16 **(*NANAvailabilityEntry.timeBitmap.modify(_QWORD *a1))(__int16 **result, char a2)
{
  uint64_t v1;

  *a1 = v1;
  return sub_100081568;
}

__int16 **sub_100081568(__int16 **result, char a2)
{
  __int16 *v2;
  __int16 v3;

  if ((a2 & 1) == 0)
  {
    v2 = *result;
    v3 = **result;
    if (*((_QWORD *)*result + 3) >> 60 == 15)
    {
      if ((**result & 0x1000) != 0)
        *v2 = v3 & 0xEFFF;
    }
    else if ((**result & 0x1000) == 0)
    {
      *v2 = v3 | 0x1000;
    }
  }
  return result;
}

uint64_t NANAvailabilityEntry.bandChannelEntries.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 40);
  v2 = *(unsigned __int8 *)(v0 + 32);
  swift_bridgeObjectRetain(v1);
  return v2;
}

uint64_t NANAvailabilityEntry.bandChannelEntries.setter(char a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t result;

  result = swift_bridgeObjectRelease(*(_QWORD *)(v3 + 40));
  *(_BYTE *)(v3 + 32) = a1;
  *(_QWORD *)(v3 + 40) = a2;
  *(_BYTE *)(v3 + 48) = a3 & 1;
  return result;
}

uint64_t (*IEEE80211InformationElement.PreAssociationSecurityNegotiationParameters.ephemeralPublicKey.modify())()
{
  return NANBitmap.Channel.operatingClass.getter;
}

uint64_t NANAvailabilityEntry.init(control:timeBitmap:bandChannelEntries:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, char a7@<W6>, uint64_t a8@<X8>)
{
  *(_WORD *)a8 = result & 0xEFFF | ((a4 >> 60 != 15) << 12);
  *(_QWORD *)(a8 + 8) = a2;
  *(_QWORD *)(a8 + 16) = a3;
  *(_QWORD *)(a8 + 24) = a4;
  *(_BYTE *)(a8 + 32) = a5;
  *(_QWORD *)(a8 + 40) = a6;
  *(_BYTE *)(a8 + 48) = a7 & 1;
  return result;
}

double static NANAvailabilityEntry.potentialEntry(on:with:)@<D0>(uint64_t a1@<X0>, char a2@<W1>, unsigned __int8 a3@<W2>, uint64_t a4@<X8>)
{
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  double result;

  v8 = sub_1001AA370(1u, 0, 1);
  v9 = sub_1001AA35C(1, 4, 4) | v8;
  v10 = sub_100012C44(&qword_10040F010);
  v11 = swift_allocObject(v10, 42, 7);
  *(_QWORD *)&result = 1;
  *(_OWORD *)(v11 + 16) = xmmword_10033A110;
  *(_BYTE *)(v11 + 32) = a1;
  *(_WORD *)(v11 + 34) = WORD1(a1);
  *(_BYTE *)(v11 + 36) = BYTE4(a1);
  *(_WORD *)(v11 + 38) = HIWORD(a1);
  *(_BYTE *)(v11 + 40) = a2 & 1;
  *(_WORD *)a4 = (8 * a3) | 2;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)(a4 + 24) = 0xF000000000000000;
  *(_BYTE *)(a4 + 32) = v9;
  *(_QWORD *)(a4 + 40) = v11;
  *(_BYTE *)(a4 + 48) = 1;
  return result;
}

uint64_t static NANAvailabilityEntry.committedEntry(on:for:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, unsigned __int16 a3@<W2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X8>)
{
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;

  v12 = sub_1001AA370(1u, 0, 1);
  v13 = sub_1001AA35C(1, 4, 4) | v12;
  v14 = sub_100012C44(&qword_10040F010);
  v15 = swift_allocObject(v14, 42, 7);
  *(_OWORD *)(v15 + 16) = xmmword_10033A110;
  *(_BYTE *)(v15 + 32) = a1;
  *(_WORD *)(v15 + 34) = WORD1(a1);
  *(_BYTE *)(v15 + 36) = BYTE4(a1);
  *(_WORD *)(v15 + 38) = HIWORD(a1);
  *(_BYTE *)(v15 + 40) = a2 & 1;
  result = sub_100031FEC(a4, a5);
  *(_WORD *)a6 = 4097;
  *(_QWORD *)(a6 + 8) = a3;
  *(_QWORD *)(a6 + 16) = a4;
  *(_QWORD *)(a6 + 24) = a5;
  *(_BYTE *)(a6 + 32) = v13;
  *(_QWORD *)(a6 + 40) = v15;
  *(_BYTE *)(a6 + 48) = 1;
  return result;
}

void NANAvailabilityEntry.hash(into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  char v9;
  Swift::UInt v10;
  Swift::UInt8 *v11;
  Swift::UInt8 v12;

  v2 = v1;
  Hasher._combine(_:)(*(_WORD *)v2);
  v4 = *(_QWORD *)(v2 + 24);
  if (v4 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    v6 = *(_QWORD *)(v2 + 8);
    v5 = *(_QWORD *)(v2 + 16);
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v6);
    sub_100031FEC(v5, v4);
    Data.hash(into:)(a1, v5, v4, v7);
    sub_1000634E8(v6, v5, v4);
  }
  v8 = *(_QWORD *)(v2 + 40);
  v9 = *(_BYTE *)(v2 + 48);
  Hasher._combine(_:)(*(_BYTE *)(v2 + 32));
  if ((v9 & 1) != 0)
  {
    sub_10008E3BC(a1, v8);
  }
  else
  {
    v10 = *(_QWORD *)(v8 + 16);
    Hasher._combine(_:)(v10);
    if (v10)
    {
      v11 = (Swift::UInt8 *)(v8 + 32);
      do
      {
        v12 = *v11++;
        Hasher._combine(_:)(v12);
        --v10;
      }
      while (v10);
    }
  }
}

Swift::Int NANAvailabilityEntry.hashValue.getter()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  NANAvailabilityEntry.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int sub_1000819B4()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  NANAvailabilityEntry.hash(into:)((uint64_t)v1);
  return Hasher._finalize()();
}

double NANAvailabilityEntry.init(from:)@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  __int128 v7;
  char v8;

  sub_100091D9C(a1, (uint64_t)v6);
  if (!v2)
  {
    v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    result = *(double *)&v7;
    *(_OWORD *)(a2 + 32) = v7;
    *(_BYTE *)(a2 + 48) = v8;
  }
  return result;
}

uint64_t sub_100081A38(_QWORD *a1)
{
  return NANAvailabilityEntry.encode(to:)(a1);
}

uint64_t NANAvailabilityEntry.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  char v16;
  _WORD v17[12];
  _QWORD v18[3];
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[5];
  _BYTE v22[24];

  v3 = v1;
  v4 = a1[3];
  v5 = a1[4];
  sub_10003259C(a1, v4);
  dispatch thunk of Encoder.unkeyedContainer()(v21, v4, v5);
  v6 = sub_10001F11C((uint64_t)_swiftEmptyArrayStorage);
  v7 = type metadata accessor for BinaryEncoder();
  v8 = swift_allocObject(v7, 40, 7);
  *(_OWORD *)(v8 + 16) = xmmword_10033A100;
  *(_QWORD *)(v8 + 32) = v6;
  v17[0] = *(_WORD *)v3;
  v19 = v7;
  v9 = sub_100011DE4((unint64_t *)&qword_100406278, (uint64_t (*)(uint64_t))type metadata accessor for BinaryEncoder, (uint64_t)protocol conformance descriptor for BinaryEncoder);
  v20 = v9;
  v18[0] = v8;
  v10 = sub_100092950();
  swift_retain();
  dispatch thunk of Encodable.encode(to:)(v18, &type metadata for NANAvailabilityEntry.Control, v10);
  if (!v2)
  {
    sub_100014430(v18);
    sub_100092994(v3 + 8, (uint64_t)v22);
    v19 = v7;
    v20 = v9;
    v18[0] = v8;
    sub_100092994((uint64_t)v22, (uint64_t)v17);
    swift_retain();
    sub_1000929DC((uint64_t)v22);
    v11 = sub_100012C44(&qword_100406300);
    v12 = sub_100092A08();
    Optional<A>.encode(to:)(v18, v11, v12);
    sub_100014430(v18);
    sub_100092A4C((uint64_t)v22);
    v14 = *(_QWORD *)(v3 + 40);
    v15 = *(unsigned __int8 *)(v3 + 48);
    v16 = *(_BYTE *)(v3 + 32);
    v19 = v7;
    v20 = v9;
    v18[0] = v8;
    swift_retain();
    swift_bridgeObjectRetain(v14);
    NANAvailabilityEntry.BandChannelEntries.encode(to:)(v18, v16, v14, v15);
    sub_100014430(v18);
    swift_bridgeObjectRelease(v14);
    swift_beginAccess(v8 + 16, v18, 0, 0);
    __asm { BR              X12 }
  }
  sub_100014430(v18);
  swift_release(v8);
  return sub_100014430(v21);
}

void sub_100081CB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, __int128 a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;

  v27 = BYTE6(v24);
  v28 = a23;
  v29 = a24;
  sub_100034C68((uint64_t)&a20, a23);
  dispatch thunk of UnkeyedEncodingContainer.encode(_:)(v27, v28, v29);
  if (!v26)
  {
    a13 = *(_OWORD *)(v25 + 16);
    v30 = a23;
    v31 = a24;
    sub_100034C68((uint64_t)&a20, a23);
    v32 = sub_100068570();
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)(&a13, &type metadata for Data, v32, v30, v31);
  }
  JUMPOUT(0x100081B70);
}

uint64_t sub_100081E04(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  _OWORD v5[3];
  char v6;
  _OWORD v7[3];
  char v8;

  v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  v5[2] = *(_OWORD *)(a1 + 32);
  v6 = *(_BYTE *)(a1 + 48);
  v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  v7[2] = *(_OWORD *)(a2 + 32);
  v8 = *(_BYTE *)(a2 + 48);
  return _s7CoreP2P20NANAvailabilityEntryV23__derived_struct_equalsySbAC_ACtFZ_0((unsigned __int16 *)v5, (unsigned __int16 *)v7) & 1;
}

uint64_t NANAttribute.Availability.description.getter(unsigned int a1, unint64_t a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;

  v4 = a1 & 0xFFFF00FF;
  swift_bridgeObjectRetain(a2);
  v5 = sub_100090A10(a2, v4, a2);
  swift_bridgeObjectRelease(a2);
  v6 = sub_100012C44((uint64_t *)&unk_1004102C0);
  v7 = sub_100011770(&qword_10040FCA0, (uint64_t *)&unk_1004102C0, (const char *)&protocol conformance descriptor for [A]);
  v8 = BidirectionalCollection<>.joined(separator:)(32, 0xE100000000000000, v6, v7);
  v10 = v9;
  swift_bridgeObjectRelease(v5);
  v11 = HIWORD(a1) & 0xF;
  if (v11 == 1)
  {
    v12 = 0xE900000000000079;
    v13 = 0x7261646E6F636573;
  }
  else if (v11)
  {
    v13 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt8, &protocol witness table for UInt8);
    v12 = v14;
  }
  else
  {
    v12 = 0xE700000000000000;
    v13 = 0x7972616D697270;
  }
  v15 = v12;
  String.append(_:)(*(Swift::String *)&v13);
  swift_bridgeObjectRelease(v12);
  v16._countAndFlagsBits = 8250;
  v16._object = (void *)0xE200000000000000;
  String.append(_:)(v16);
  v17._countAndFlagsBits = v8;
  v17._object = v10;
  String.append(_:)(v17);
  swift_bridgeObjectRelease(v10);
  v18._countAndFlagsBits = 93;
  v18._object = (void *)0xE100000000000000;
  String.append(_:)(v18);
  return 91;
}

void sub_100082008(unsigned __int16 *a1@<X0>, int a2@<W1>, unint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unsigned int v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v18;
  uint64_t v19;
  Swift::String v20;
  void *object;
  Swift::String v22;
  Swift::String v23;
  void *v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  int64_t v28;
  _QWORD *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unsigned __int8 v34;
  unint64_t v35;
  int v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  void *v51;
  Swift::String v52;
  Swift::String v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  ValueMetadata *v64;
  _QWORD *v65;

  v57 = a4;
  v7 = type metadata accessor for Mirror(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin();
  v10 = (char *)&v55 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *a1;
  v12 = *((_QWORD *)a1 + 5);
  if ((v11 & 7) != 2)
  {
    v13 = (v11 & 7) != 1 || *((_BYTE *)a1 + 48) == 0;
    if (!v13 && *(_QWORD *)(v12 + 16) == 1)
    {
      v14 = *((_QWORD *)a1 + 1);
      v56 = *((_QWORD *)a1 + 2);
      v15 = *((_QWORD *)a1 + 3);
      v16 = NANBitmap.Channel.channel.getter(*(unsigned __int8 *)(v12 + 32) | ((unint64_t)*(unsigned __int16 *)(v12 + 34) << 16) | ((unint64_t)*(unsigned __int8 *)(v12 + 36) << 32) | ((unint64_t)*(unsigned __int16 *)(v12 + 38) << 48));
      if ((v16 & 0xFF00000000) != 0x300000000 && v15 >> 60 != 15)
      {
        v18 = v16;
        v62 = 60;
        v63 = 0xE100000000000000;
        v19 = v56;
        sub_100063C28(v14, v56, v15);
        v20._countAndFlagsBits = Channel.description.getter(v18 & 0xFFFFFFFFFFFFLL);
        object = v20._object;
        String.append(_:)(v20);
        swift_bridgeObjectRelease(object);
        v22._countAndFlagsBits = 8250;
        v22._object = (void *)0xE200000000000000;
        String.append(_:)(v22);
        v23._countAndFlagsBits = NANBitmap.Time.description.getter(v14, v19, v15);
        v24 = v23._object;
        String.append(_:)(v23);
        swift_bridgeObjectRelease(v24);
        v25._countAndFlagsBits = 62;
        v25._object = (void *)0xE100000000000000;
        String.append(_:)(v25);
        sub_1000634E8(v14, v19, v15);
LABEL_30:
        v44 = v62;
        v46 = v63;
        goto LABEL_31;
      }
    }
LABEL_28:
    LOBYTE(v62) = a2;
    WORD1(v62) = HIWORD(a2);
    v64 = &type metadata for NANAttribute.Availability;
    v63 = a3;
    swift_bridgeObjectRetain(a3);
    v43 = Mirror.init(reflecting:)(&v62);
    v44 = Mirror.description.getter(v43);
    v46 = v45;
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
LABEL_31:
    v54 = v57;
    *v57 = v44;
    v54[1] = v46;
    return;
  }
  if (!*((_BYTE *)a1 + 48))
    goto LABEL_28;
  v62 = 0;
  v63 = 0xE000000000000000;
  v26._countAndFlagsBits = 60;
  v26._object = (void *)0xE100000000000000;
  String.append(_:)(v26);
  if (!v58)
  {
    LOBYTE(v60) = (v11 >> 3) & 3;
    _print_unlocked<A, B>(_:_:)(&v60, &v62, &type metadata for NANAvailabilityEntry.UsagePreference, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v27._countAndFlagsBits = 8250;
    v27._object = (void *)0xE200000000000000;
    String.append(_:)(v27);
    v28 = *(_QWORD *)(v12 + 16);
    v29 = _swiftEmptyArrayStorage;
    if (v28)
    {
      v65 = _swiftEmptyArrayStorage;
      sub_100074EAC(0, v28, 0);
      v29 = v65;
      v30 = v12 + 40;
      do
      {
        a3 = a3 & 0xFF000000FF00 | *(unsigned __int8 *)(v30 - 8) | ((unint64_t)*(unsigned __int16 *)(v30 - 6) << 16) | ((unint64_t)*(unsigned __int8 *)(v30 - 4) << 32) | ((unint64_t)*(unsigned __int16 *)(v30 - 2) << 48);
        v31 = NANBitmap.Channel.channel.getter(a3);
        if ((v31 & 0xFF00000000) == 0x300000000)
        {
          v32 = 0xE100000000000000;
          v33 = 48;
        }
        else
        {
          v34 = BYTE5(v31);
          v59 = v31;
          v60 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt32, &protocol witness table for UInt32);
          v61 = v35;
          v36 = v34 - 2;
          v37 = 0;
          v38 = 0xE000000000000000;
          switch(v36)
          {
            case 0:
            case 1:
              break;
            case 2:
              v38 = 0xE200000000000000;
              v37 = 11051;
              break;
            case 3:
              v38 = 0xE200000000000000;
              v37 = 30840;
              break;
            case 4:
              v38 = 0xE200000000000000;
              v37 = 31097;
              break;
            default:
              v37 = 45;
              v38 = 0xE100000000000000;
              break;
          }
          v39 = v38;
          String.append(_:)(*(Swift::String *)&v37);
          swift_bridgeObjectRelease(v38);
          v33 = v60;
          v32 = v61;
        }
        v65 = v29;
        v41 = v29[2];
        v40 = v29[3];
        if (v41 >= v40 >> 1)
        {
          sub_100074EAC(v40 > 1, v41 + 1, 1);
          v29 = v65;
        }
        v29[2] = v41 + 1;
        v42 = &v29[2 * v41];
        v42[4] = v33;
        v42[5] = v32;
        v30 += 10;
        --v28;
      }
      while (v28);
    }
    v60 = (uint64_t)v29;
    v47 = sub_100012C44((uint64_t *)&unk_1004102C0);
    v48 = sub_100011770(&qword_10040FCA0, (uint64_t *)&unk_1004102C0, (const char *)&protocol conformance descriptor for [A]);
    v49 = BidirectionalCollection<>.joined(separator:)(8236, 0xE200000000000000, v47, v48);
    v51 = v50;
    swift_bridgeObjectRelease(v29);
    v52._countAndFlagsBits = v49;
    v52._object = v51;
    String.append(_:)(v52);
    swift_bridgeObjectRelease(v51);
    v53._countAndFlagsBits = 62;
    v53._object = (void *)0xE100000000000000;
    String.append(_:)(v53);
    goto LABEL_30;
  }
  swift_unexpectedError(v58, "CoreP2P/NANAvailability.swift", 29, 1);
  __break(1u);
}

uint64_t sub_100082460()
{
  unsigned __int8 *v0;

  return NANAttribute.Availability.description.getter(*v0 | (*((unsigned __int16 *)v0 + 1) << 16), *((_QWORD *)v0 + 1));
}

_QWORD *static Array<A>.potentialAvailability(using:supportsSimultaneousDualBand:for:)(char a1, char a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  char v12;
  _QWORD **v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  unint64_t v17;
  __int16 v18;
  unint64_t v19;
  _QWORD *v20;
  __int16 v21;
  _QWORD *v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  __int16 v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;

  v33 = _swiftEmptyArrayStorage;
  v34 = _swiftEmptyArrayStorage;
  swift_bridgeObjectRetain(a3);
  v8 = sub_10008C7C4(a3);
  swift_bridgeObjectRelease(a3);
  v32 = v8;
  sub_10008CB0C((uint64_t *)&v32, sub_1000F5F8C, sub_10008CB84);
  v9 = (uint64_t)v32;
  v10 = v32[2];
  if (v10)
  {
    v11 = (unsigned __int8 *)v32 + 38;
    do
    {
      v15 = *(v11 - 2);
      v16 = *v11;
      v17 = sub_100192B90(*(unsigned int *)(v11 - 6) | (unint64_t)(v15 << 32) | ((unint64_t)*(v11 - 1) << 40));
      if ((v18 & 0x100) == 0)
      {
        v19 = v17 & 0xFFFF00FFFFFF00FFLL;
        if ((a2 & 1) != 0 && (_DWORD)v15)
        {
          v4 = v19 | v4 & 0xFF000000FF00;
          v12 = v18 & 1;
          v13 = &v33;
          v14 = v4;
        }
        else
        {
          v3 = v19 | v3 & 0xFF000000FF00;
          v12 = v18 & 1;
          v13 = &v34;
          v14 = v3;
        }
        sub_100082714(v14, v12, v16, (uint64_t)v13);
      }
      v11 += 8;
      --v10;
    }
    while (v10);
    swift_release(v9);
    v20 = v34;
    if (v34[2])
      goto LABEL_11;
LABEL_15:
    swift_bridgeObjectRelease(v20);
    v22 = _swiftEmptyArrayStorage;
    goto LABEL_16;
  }
  swift_release(v32);
  v20 = _swiftEmptyArrayStorage;
  if (!_swiftEmptyArrayStorage[2])
    goto LABEL_15;
LABEL_11:
  v21 = sub_1001AA384(0, 0, 4) | 0x20;
  v22 = sub_1000B2958(0, 1, 1, _swiftEmptyArrayStorage);
  v24 = v22[2];
  v23 = v22[3];
  if (v24 >= v23 >> 1)
    v22 = sub_1000B2958((_QWORD *)(v23 > 1), v24 + 1, 1, v22);
  v22[2] = v24 + 1;
  v25 = &v22[2 * v24];
  *((_BYTE *)v25 + 32) = a1;
  *((_WORD *)v25 + 17) = v21;
  v25[5] = v20;
LABEL_16:
  v26 = v33;
  if (v33[2])
  {
    v27 = sub_1001AA384(1u, 0, 4) | 0x20;
    if ((swift_isUniquelyReferenced_nonNull_native(v22) & 1) == 0)
      v22 = sub_1000B2958(0, v22[2] + 1, 1, v22);
    v29 = v22[2];
    v28 = v22[3];
    if (v29 >= v28 >> 1)
      v22 = sub_1000B2958((_QWORD *)(v28 > 1), v29 + 1, 1, v22);
    v22[2] = v29 + 1;
    v30 = &v22[2 * v29];
    *((_BYTE *)v30 + 32) = a1;
    *((_WORD *)v30 + 17) = v27;
    v30[5] = v26;
  }
  else
  {
    swift_bridgeObjectRelease(v33);
  }
  return v22;
}

uint64_t sub_100082714(uint64_t a1, char a2, unsigned __int8 a3, uint64_t a4)
{
  _QWORD *v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;

  v5 = *(_QWORD **)a4;
  if (*(_QWORD *)(*(_QWORD *)a4 + 16))
    __asm { BR              X12 }
  v6 = sub_1001AA370(1u, 0, 1);
  v7 = sub_1001AA35C(1, 4, 4);
  v8 = sub_100012C44(&qword_10040F010);
  v9 = swift_allocObject(v8, 42, 7);
  *(_OWORD *)(v9 + 16) = xmmword_10033A110;
  *(_BYTE *)(v9 + 32) = a1;
  *(_WORD *)(v9 + 34) = WORD1(a1);
  *(_BYTE *)(v9 + 36) = BYTE4(a1);
  *(_WORD *)(v9 + 38) = HIWORD(a1);
  *(_BYTE *)(v9 + 40) = a2 & 1;
  result = swift_isUniquelyReferenced_nonNull_native(v5);
  if ((result & 1) == 0)
  {
    result = (uint64_t)sub_1000B2834(0, v5[2] + 1, 1, v5);
    v5 = (_QWORD *)result;
  }
  v12 = v5[2];
  v11 = v5[3];
  if (v12 >= v11 >> 1)
  {
    result = (uint64_t)sub_1000B2834((_QWORD *)(v11 > 1), v12 + 1, 1, v5);
    v5 = (_QWORD *)result;
  }
  v5[2] = v12 + 1;
  v13 = &v5[7 * v12];
  *((_WORD *)v13 + 16) = (8 * a3) | 2;
  v13[5] = 0;
  v13[6] = 0;
  v13[7] = 0xF000000000000000;
  *((_BYTE *)v13 + 64) = v7 | v6;
  v13[9] = v9;
  *((_BYTE *)v13 + 80) = 1;
  *(_QWORD *)a4 = v5;
  return result;
}

void *NANMapID.primary.unsafeMutableAddressor()
{
  return &static NANMapID.primary;
}

void *NANMapID.secondary.unsafeMutableAddressor()
{
  return &static NANMapID.secondary;
}

_QWORD *static Array<A>.committedAvailability(using:supportsSimultaneousDualBand:for:)(char a1, char a2, uint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  __int16 v19;
  unsigned __int16 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  char v39;
  __int16 v40;
  _QWORD *v41;
  unint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  __int16 v46;
  unint64_t v47;
  unint64_t v48;
  _QWORD *v49;
  uint64_t v51;
  char v52;
  _QWORD *v54;
  _QWORD *v55;
  unint64_t v56;
  char v57;
  unint64_t v58;
  unint64_t v59;
  unsigned __int16 v60;
  uint64_t v61;
  _QWORD *v62;

  swift_bridgeObjectRetain(a3);
  v5 = sub_10008C8A8(a3);
  swift_bridgeObjectRelease(a3);
  v62 = v5;
  sub_10008CB0C((uint64_t *)&v62, sub_1000F5FA0, (uint64_t (*)(_QWORD *))sub_10008D294);
  v52 = a1;
  v6 = v62[2];
  v51 = (uint64_t)v62;
  if (v6)
  {
    v7 = (unsigned __int8 *)v62 + 63;
    v54 = _swiftEmptyArrayStorage;
    v55 = _swiftEmptyArrayStorage;
    do
    {
      v9 = *(v7 - 27);
      v59 = *(_QWORD *)(v7 - 23);
      v61 = v6;
      v58 = *(_QWORD *)(v7 - 15);
      v10 = *(v7 - 7);
      v11 = *(v7 - 6);
      v12 = *(v7 - 5);
      v13 = *(v7 - 4);
      v14 = *(v7 - 3);
      v15 = *(v7 - 2);
      v16 = *(v7 - 1);
      v17 = *v7;
      v18 = sub_100192B90((v9 << 32) | ((unint64_t)*(v7 - 26) << 40) | *(unsigned int *)(v7 - 31));
      if ((v19 & 0x100) != 0)
      {
        v8 = v61;
      }
      else
      {
        v56 = v18;
        v57 = v19;
        v20 = TimeBitmap.nanBitmap.getter(v59, v58, v10 | (v11 << 8) | (v12 << 16) | (v13 << 24) | (v14 << 32) | (v15 << 40) | (v16 << 48) | (v17 << 56));
        v22 = v21;
        v24 = v23;
        v25 = sub_1001AA370(1u, 0, 1);
        v60 = v20;
        if ((a2 & 1) != 0 && (_DWORD)v9)
        {
          v26 = v25;
          v27 = v24;
          v28 = sub_1001AA35C(1, 4, 4);
          v29 = sub_100012C44(&qword_10040F010);
          v30 = swift_allocObject(v29, 42, 7);
          *(_OWORD *)(v30 + 16) = xmmword_10033A110;
          *(_BYTE *)(v30 + 32) = v56;
          *(_WORD *)(v30 + 34) = WORD1(v56);
          *(_BYTE *)(v30 + 36) = BYTE4(v56);
          *(_WORD *)(v30 + 38) = HIWORD(v56);
          *(_BYTE *)(v30 + 40) = v57 & 1;
          v31 = v22;
          if ((swift_isUniquelyReferenced_nonNull_native(v54) & 1) != 0)
            v32 = v54;
          else
            v32 = sub_1000B2834(0, v54[2] + 1, 1, v54);
          v8 = v61;
          v34 = v32[2];
          v33 = v32[3];
          v35 = v34 + 1;
          if (v34 >= v33 >> 1)
            v32 = sub_1000B2834((_QWORD *)(v33 > 1), v34 + 1, 1, v32);
          v54 = v32;
        }
        else
        {
          v26 = v25;
          v28 = sub_1001AA35C(1, 4, 4);
          v36 = sub_100012C44(&qword_10040F010);
          v30 = swift_allocObject(v36, 42, 7);
          *(_OWORD *)(v30 + 16) = xmmword_10033A110;
          *(_BYTE *)(v30 + 32) = v56;
          *(_WORD *)(v30 + 34) = WORD1(v56);
          *(_BYTE *)(v30 + 36) = BYTE4(v56);
          *(_WORD *)(v30 + 38) = HIWORD(v56);
          *(_BYTE *)(v30 + 40) = v57 & 1;
          v31 = v22;
          if ((swift_isUniquelyReferenced_nonNull_native(v55) & 1) != 0)
            v32 = v55;
          else
            v32 = sub_1000B2834(0, v55[2] + 1, 1, v55);
          v8 = v61;
          v27 = v24;
          v34 = v32[2];
          v37 = v32[3];
          v35 = v34 + 1;
          if (v34 >= v37 >> 1)
            v32 = sub_1000B2834((_QWORD *)(v37 > 1), v34 + 1, 1, v32);
          v55 = v32;
        }
        v32[2] = v35;
        v38 = &v32[7 * v34];
        *((_WORD *)v38 + 16) = 4097;
        v38[5] = v60;
        v38[6] = v31;
        v38[7] = v27;
        *((_BYTE *)v38 + 64) = v28 | v26;
        v38[9] = v30;
        *((_BYTE *)v38 + 80) = 1;
      }
      v7 += 32;
      v6 = v8 - 1;
    }
    while (v6);
  }
  else
  {
    v54 = _swiftEmptyArrayStorage;
    v55 = _swiftEmptyArrayStorage;
  }
  swift_release(v51);
  if (v55[2])
  {
    v39 = v52;
    v40 = sub_1001AA384(0, 0, 4) | 0x10;
    v41 = sub_1000B2958(0, 1, 1, _swiftEmptyArrayStorage);
    v43 = v41[2];
    v42 = v41[3];
    if (v43 >= v42 >> 1)
      v41 = sub_1000B2958((_QWORD *)(v42 > 1), v43 + 1, 1, v41);
    v41[2] = v43 + 1;
    v44 = &v41[2 * v43];
    *((_BYTE *)v44 + 32) = v52;
    *((_WORD *)v44 + 17) = v40;
    v45 = v54;
    v44[5] = v55;
    if (v54[2])
      goto LABEL_26;
LABEL_32:
    swift_bridgeObjectRelease(v45);
    return v41;
  }
  swift_bridgeObjectRelease(v55);
  v41 = _swiftEmptyArrayStorage;
  v39 = v52;
  v45 = v54;
  if (!v54[2])
    goto LABEL_32;
LABEL_26:
  v46 = sub_1001AA384(1u, 0, 4) | 0x10;
  if ((swift_isUniquelyReferenced_nonNull_native(v41) & 1) == 0)
    v41 = sub_1000B2958(0, v41[2] + 1, 1, v41);
  v48 = v41[2];
  v47 = v41[3];
  if (v48 >= v47 >> 1)
    v41 = sub_1000B2958((_QWORD *)(v47 > 1), v48 + 1, 1, v41);
  v41[2] = v48 + 1;
  v49 = &v41[2 * v48];
  *((_BYTE *)v49 + 32) = v39;
  *((_WORD *)v49 + 17) = v46;
  v49[5] = v54;
  return v41;
}

uint64_t NANScheduleEntry.timeBitmap.getter(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  sub_100031FEC(a3, a4);
  return a2;
}

uint64_t NANScheduleEntry.timeBitmap.setter(__int16 a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t result;

  result = sub_10000E614(*(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24));
  *(_WORD *)(v3 + 8) = a1;
  *(_QWORD *)(v3 + 16) = a2;
  *(_QWORD *)(v3 + 24) = a3;
  return result;
}

uint64_t NANScheduleEntry.hash(into:)(uint64_t a1, Swift::UInt8 a2, Swift::UInt16 a3, uint64_t a4, unint64_t a5)
{
  __n128 v9;

  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(a3);
  sub_100031FEC(a4, a5);
  Data.hash(into:)(a1, a4, a5, v9);
  return sub_10000E614(a4, a5);
}

BOOL static NANScheduleEntry.__derived_struct_equals(_:_:)(char a1, __int16 a2, uint64_t a3, uint64_t a4, char a5, __int16 a6)
{
  char v6;
  _BOOL8 result;

  result = 0;
  if (a1 == a5 && a2 == a6)
  {
    _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(a3, a4);
    if ((v6 & 1) != 0)
      return 1;
  }
  return result;
}

uint64_t sub_10008316C()
{
  _BYTE *v0;

  if (*v0)
    return 0x6D746942656D6974;
  else
    return 0x444970616DLL;
}

uint64_t sub_1000831A8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10009510C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000831CC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100092A78();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000831F4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100092A78();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NANScheduleEntry.encode(to:)(_QWORD *a1, char a2, __int16 a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int16 v22;
  uint64_t v23;
  uint64_t v24;
  char v25;

  v20 = a4;
  v21 = a5;
  v9 = sub_100012C44(&qword_100406310);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin();
  v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1[3];
  v13 = a1[4];
  sub_10003259C(a1, v14);
  v15 = sub_100092A78();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for NANScheduleEntry.CodingKeys, &type metadata for NANScheduleEntry.CodingKeys, v15, v14, v13);
  LOBYTE(v22) = a2;
  v25 = 0;
  v16 = sub_100092ABC();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v22, &v25, v9, &type metadata for NANMapID, v16);
  if (!v5)
  {
    v22 = a3;
    v23 = v20;
    v24 = v21;
    v25 = 1;
    v17 = sub_100092A08();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v22, &v25, v9, &type metadata for NANBitmap.Time, v17);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

Swift::Int NANScheduleEntry.hashValue.getter(Swift::UInt8 a1, Swift::UInt16 a2, uint64_t a3, unint64_t a4)
{
  __n128 v8;
  _QWORD v10[9];

  Hasher.init(_seed:)(v10);
  Hasher._combine(_:)(a1);
  Hasher._combine(_:)(a2);
  sub_100031FEC(a3, a4);
  Data.hash(into:)(v10, a3, a4, v8);
  sub_10000E614(a3, a4);
  return Hasher._finalize()();
}

uint64_t NANScheduleEntry.init(from:)(_QWORD *a1)
{
  return sub_100090B94(a1);
}

Swift::Int sub_100083428()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  Swift::UInt8 v3;
  Swift::UInt16 v4;
  __n128 v5;
  _QWORD v7[9];

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24);
  v3 = *(_BYTE *)v0;
  v4 = *(_WORD *)(v0 + 8);
  Hasher.init(_seed:)(v7);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  sub_100031FEC(v1, v2);
  Data.hash(into:)(v7, v1, v2, v5);
  sub_10000E614(v1, v2);
  return Hasher._finalize()();
}

uint64_t sub_1000834B8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  Swift::UInt16 v5;
  __n128 v6;

  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 24);
  v5 = *(_WORD *)(v1 + 8);
  Hasher._combine(_:)(*(_BYTE *)v1);
  Hasher._combine(_:)(v5);
  sub_100031FEC(v3, v4);
  Data.hash(into:)(a1, v3, v4, v6);
  return sub_10000E614(v3, v4);
}

Swift::Int sub_100083524()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  Swift::UInt8 v3;
  Swift::UInt16 v4;
  __n128 v5;
  _QWORD v7[9];

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24);
  v3 = *(_BYTE *)v0;
  v4 = *(_WORD *)(v0 + 8);
  Hasher.init(_seed:)(v7);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  sub_100031FEC(v1, v2);
  Data.hash(into:)(v7, v1, v2, v5);
  sub_10000E614(v1, v2);
  return Hasher._finalize()();
}

uint64_t sub_1000835B0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  __int16 v5;
  uint64_t v6;
  uint64_t v7;

  result = sub_100090B94(a1);
  if (!v2)
  {
    *(_BYTE *)a2 = result;
    *(_WORD *)(a2 + 8) = v5;
    *(_QWORD *)(a2 + 16) = v6;
    *(_QWORD *)(a2 + 24) = v7;
  }
  return result;
}

uint64_t sub_1000835E0(_QWORD *a1)
{
  uint64_t v1;

  return NANScheduleEntry.encode(to:)(a1, *(_BYTE *)v1, *(_WORD *)(v1 + 8), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

BOOL sub_100083600(unsigned __int8 *a1, unsigned __int8 *a2)
{
  char v2;
  _BOOL8 result;

  result = 0;
  if (*a1 == *a2 && *((unsigned __int16 *)a1 + 4) == *((unsigned __int16 *)a2 + 4))
  {
    _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(*((_QWORD *)a1 + 2), *((_QWORD *)a1 + 3));
    if ((v2 & 1) != 0)
      return 1;
  }
  return result;
}

uint64_t NANMapIDs.init(rawValue:)(unsigned int a1)
{
  unsigned __int8 v1;
  int v2;

  v1 = a1 & 1;
  if ((a1 & 1) != 0)
    v2 = 0;
  else
    v2 = (a1 >> 1) & 0xF;
  return v2 & 0xFFFF00FF | (v1 << 8);
}

CoreP2P::NANMapID __swiftcall NANMapID.init(rawValue:)(Swift::UInt8 rawValue)
{
  return (CoreP2P::NANMapID)(rawValue & 0xF);
}

_QWORD *NANMapIDs.init(decoder:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned __int8 v10;
  int v11;
  _QWORD v12[3];
  uint64_t v13;
  uint64_t v14;

  v3 = a1[3];
  v4 = a1[4];
  v5 = sub_10003259C(a1, v3);
  dispatch thunk of Decoder.singleValueContainer()(v12, v3, v4);
  if (v1)
  {
    sub_100014430(a1);
  }
  else
  {
    v6 = v13;
    v7 = v14;
    sub_10003259C(v12, v13);
    v8 = dispatch thunk of SingleValueDecodingContainer.decode(_:)(v6, v7);
    v10 = v8 & 1;
    if ((v8 & 1) != 0)
      v11 = 0;
    else
      v11 = (v8 >> 1) & 0xF;
    sub_100014430(v12);
    sub_100014430(a1);
    return (_QWORD *)(v11 & 0xFFFF00FF | (v10 << 8));
  }
  return v5;
}

uint64_t NANMapIDs.encode(to:)(_QWORD *a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[3];
  uint64_t v10;
  uint64_t v11;

  v3 = a1[3];
  v4 = a1[4];
  sub_10003259C(a1, v3);
  dispatch thunk of Encoder.singleValueContainer()(v9, v3, v4);
  if ((a2 & 0x100) != 0)
    v5 = 1;
  else
    v5 = (2 * a2);
  v6 = v10;
  v7 = v11;
  sub_100034C68((uint64_t)v9, v10);
  dispatch thunk of SingleValueEncodingContainer.encode(_:)(v5, v6, v7);
  return sub_100014430(v9);
}

uint64_t NANMapIDs.rawValue.getter(int a1)
{
  if ((a1 & 0x100) != 0)
    return 1;
  else
    return (2 * a1);
}

unsigned __int8 *sub_1000837F8@<X0>(unsigned __int8 *result@<X0>, uint64_t a2@<X8>)
{
  unsigned int v2;
  int v3;
  int v4;

  v2 = *result;
  v3 = (v2 >> 1) & 0xF;
  v4 = v2 & 1;
  if (v4)
    LOWORD(v3) = 0;
  *(_WORD *)a2 = v3 | ((_WORD)v4 << 8);
  *(_BYTE *)(a2 + 2) = 0;
  return result;
}

void sub_100083818(char *a1@<X8>)
{
  _BYTE *v1;
  char v2;

  if (v1[1])
    v2 = 1;
  else
    v2 = 2 * *v1;
  *a1 = v2;
}

Swift::Int sub_100083834()
{
  char *v0;
  char v1;
  int v2;
  Swift::UInt8 v3;
  _QWORD v5[9];

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)(v5);
  if (v2)
    v3 = 1;
  else
    v3 = 2 * v1;
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

void sub_100083884()
{
  _BYTE *v0;
  Swift::UInt8 v1;

  if (v0[1])
    v1 = 1;
  else
    v1 = 2 * *v0;
  Hasher._combine(_:)(v1);
}

Swift::Int sub_1000838BC()
{
  char *v0;
  char v1;
  int v2;
  Swift::UInt8 v3;
  _QWORD v5[9];

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)(v5);
  if (v2)
    v3 = 1;
  else
    v3 = 2 * v1;
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

uint64_t sub_100083908(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1000956C4();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_100083964(_QWORD *a1)
{
  unsigned __int8 *v1;
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v10[3];
  uint64_t v11;
  uint64_t v12;

  v2 = *v1;
  v3 = v1[1];
  v4 = a1[3];
  v5 = a1[4];
  sub_10003259C(a1, v4);
  dispatch thunk of Encoder.singleValueContainer()(v10, v4, v5);
  if (v3)
    v6 = 1;
  else
    v6 = (2 * v2);
  v7 = v11;
  v8 = v12;
  sub_100034C68((uint64_t)v10, v11);
  dispatch thunk of SingleValueEncodingContainer.encode(_:)(v6, v7, v8);
  return sub_100014430(v10);
}

uint64_t sub_100083A08(_BYTE *a1, _BYTE *a2)
{
  char v2;

  if (a1[1])
    v2 = a2[1];
  else
    v2 = (((*a1 ^ *a2) & 0x7F) == 0) & ~a2[1];
  return v2 & 1;
}

uint64_t NANMapID.init(decoder:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[3];
  uint64_t v10;
  uint64_t v11;

  v3 = a1[3];
  v4 = a1[4];
  v5 = (uint64_t)sub_10003259C(a1, v3);
  dispatch thunk of Decoder.singleValueContainer()(v9, v3, v4);
  if (!v1)
  {
    v6 = v10;
    v7 = v11;
    sub_10003259C(v9, v10);
    v5 = dispatch thunk of SingleValueDecodingContainer.decode(_:)(v6, v7) & 0xF;
    sub_100014430(v9);
  }
  sub_100014430(a1);
  return v5;
}

uint64_t NANMapID.description.getter(char a1)
{
  if (!a1)
    return 0x7972616D697270;
  if (a1 == 1)
    return 0x7261646E6F636573;
  return dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt8, &protocol witness table for UInt8);
}

uint64_t sub_100083B78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100095680();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_100083BD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100095680();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

_BYTE *sub_100083C20@<X0>(_BYTE *result@<X0>, _WORD *a2@<X8>)
{
  *a2 = *result & 0xF;
  return result;
}

uint64_t sub_100083C34()
{
  _BYTE *v0;

  if (*v0 == 1)
    return 0x7261646E6F636573;
  if (*v0)
    return dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt8, &protocol witness table for UInt8);
  return 0x7972616D697270;
}

uint64_t NonNANOperatingChannelInformation.channelNumber.getter(unsigned int a1)
{
  return a1 >> 8;
}

uint64_t NonNANOperatingChannelInformation.channelCenterFrequency.getter(unsigned int a1)
{
  return HIWORD(a1);
}

uint64_t NonNANOperatingChannelInformation.channelCenterFrequency.setter(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 2) = result;
  return result;
}

unint64_t NonNANOperatingChannelInformation.channel.getter(__int16 a1)
{
  return sub_100192784(HIBYTE(a1)) & 0xFFFFFFFFFFFFLL;
}

void NonNANOperatingChannelInformation.hash(into:)(int a1, unsigned int a2)
{
  unsigned int v2;
  unsigned int v3;

  v2 = a2 >> 8;
  v3 = HIWORD(a2);
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
}

BOOL static NonNANOperatingChannelInformation.__derived_struct_equals(_:_:)(int a1, int a2)
{
  return (a1 & 0xFFFFFF) == (a2 & 0xFFFFFF);
}

unint64_t sub_100083D40()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0x4E6C656E6E616863;
  if (*v0 != 1)
    v1 = 0xD000000000000016;
  if (*v0)
    return v1;
  else
    return 0xD000000000000014;
}

uint64_t sub_100083DAC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100095200(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100083DD0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100092B00();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100083DF8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100092B00();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NonNANOperatingChannelInformation.encode(to:)(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;
  char v14;
  char v15;
  char v16;

  v5 = sub_100012C44(&qword_100406328);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin();
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10003259C(a1, v9);
  v11 = sub_100092B00();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for NonNANOperatingChannelInformation.CodingKeys, &type metadata for NonNANOperatingChannelInformation.CodingKeys, v11, v9, v10);
  v16 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(a2, &v16, v5);
  if (!v2)
  {
    v15 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(a2 >> 8, &v15, v5);
    v14 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(WORD1(a2), &v14, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

Swift::Int NonNANOperatingChannelInformation.hashValue.getter(unsigned int a1)
{
  Swift::UInt8 v1;
  unsigned int v2;
  unsigned int v3;
  _QWORD v5[9];

  v1 = a1;
  v2 = a1 >> 8;
  v3 = HIWORD(a1);
  Hasher.init(_seed:)(v5);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

uint64_t NonNANOperatingChannelInformation.init(from:)(_QWORD *a1)
{
  return sub_100090F80(a1) & 0xFFFFFF;
}

Swift::Int sub_100083FE0()
{
  Swift::UInt8 *v0;
  Swift::UInt8 v1;
  Swift::UInt8 v2;
  Swift::UInt8 v3;
  _QWORD v5[9];

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  Hasher.init(_seed:)(v5);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

void sub_10008404C()
{
  Swift::UInt8 *v0;
  Swift::UInt8 v1;
  Swift::UInt8 v2;

  v1 = v0[1];
  v2 = v0[2];
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
}

Swift::Int sub_100084094()
{
  Swift::UInt8 *v0;
  Swift::UInt8 v1;
  Swift::UInt8 v2;
  Swift::UInt8 v3;
  _QWORD v5[9];

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  Hasher.init(_seed:)(v5);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

uint64_t sub_1000840FC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = sub_100090F80(a1);
  if (!v2)
  {
    *(_WORD *)a2 = result;
    *(_BYTE *)(a2 + 2) = BYTE2(result);
  }
  return result;
}

uint64_t sub_100084134(_QWORD *a1)
{
  unsigned __int16 *v1;

  return NonNANOperatingChannelInformation.encode(to:)(a1, *v1 | (*((unsigned __int8 *)v1 + 2) << 16));
}

BOOL sub_100084154(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2];
}

CoreP2P::NonNANBeaconInformation __swiftcall NonNANBeaconInformation.init(targetBeaconTransmissionTimeOffset:beaconInterval:)(Swift::UInt16 targetBeaconTransmissionTimeOffset, Swift::UInt16 beaconInterval)
{
  return (CoreP2P::NonNANBeaconInformation)(targetBeaconTransmissionTimeOffset | (beaconInterval << 16));
}

void NonNANBeaconInformation.hash(into:)(int a1, unsigned int a2)
{
  unsigned int v2;

  v2 = HIWORD(a2);
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(v2);
}

BOOL static NonNANBeaconInformation.__derived_struct_equals(_:_:)(int a1, int a2)
{
  return a1 == a2;
}

unint64_t sub_1000841D0()
{
  _BYTE *v0;

  if (*v0)
    return 0xD000000000000011;
  else
    return 0xD000000000000022;
}

uint64_t sub_100084210@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100095370(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100084234(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100092B44();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10008425C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100092B44();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NonNANBeaconInformation.encode(to:)(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v13;
  char v14;
  char v15;

  v5 = sub_100012C44(&qword_100406338);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin();
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10003259C(a1, v9);
  v11 = sub_100092B44();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for NonNANBeaconInformation.CodingKeys, &type metadata for NonNANBeaconInformation.CodingKeys, v11, v9, v10);
  v15 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(a2, &v15, v5);
  if (!v2)
  {
    v14 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(WORD1(a2), &v14, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

Swift::Int NonNANBeaconInformation.hashValue.getter(unsigned int a1)
{
  Swift::UInt16 v1;
  unsigned int v2;
  _QWORD v4[9];

  v1 = a1;
  v2 = HIWORD(a1);
  Hasher.init(_seed:)(v4);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t NonNANBeaconInformation.init(from:)(_QWORD *a1)
{
  return sub_100090E30(a1);
}

Swift::Int sub_100084408()
{
  Swift::UInt16 *v0;
  Swift::UInt16 v1;
  Swift::UInt16 v2;
  _QWORD v4[9];

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)(v4);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void sub_100084464()
{
  Swift::UInt16 *v0;
  Swift::UInt16 v1;

  v1 = v0[1];
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
}

Swift::Int sub_1000844A0()
{
  Swift::UInt16 *v0;
  Swift::UInt16 v1;
  Swift::UInt16 v2;
  _QWORD v4[9];

  v1 = *v0;
  v2 = v0[1];
  Hasher.init(_seed:)(v4);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t sub_1000844F8@<X0>(_QWORD *a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = sub_100090E30(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_100084520(_QWORD *a1)
{
  unsigned int *v1;

  return NonNANBeaconInformation.encode(to:)(a1, *v1);
}

uint64_t sub_100084538(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100094D68();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_100084594(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_100094D68();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t IEEE80211InformationElement.HighThroughputCapability.mcs.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  result = sub_10000E614(*(_QWORD *)(v2 + 8), *(_QWORD *)(v2 + 16));
  *(_QWORD *)(v2 + 8) = a1;
  *(_QWORD *)(v2 + 16) = a2;
  return result;
}

uint64_t DeprecatedNANAvailability.init(from:)(_QWORD *a1)
{
  return sub_10009184C(a1) & 0x1FFFF;
}

uint64_t DeprecatedNANAvailability.encode(to:)(_QWORD *a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  unsigned __int8 v12;
  unsigned __int8 v13;
  unsigned __int8 v14;
  char v15;
  unsigned __int8 v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD v24[2];
  _QWORD v25[3];
  uint64_t v26;
  uint64_t v27;

  v8 = a1[3];
  v9 = a1[4];
  sub_10003259C(a1, v8);
  dispatch thunk of Encoder.unkeyedContainer()(v25, v8, v9);
  v10 = sub_1001AA370(a2, 0, 4);
  if (!v4)
  {
    v11 = v10;
    v12 = sub_1001AA370(BYTE1(a2), 4uLL, 2);
    v13 = sub_1001AA35C(HIWORD(a2) & 1, 6, 1);
    if ((v12 & ~v11) != 0)
      v14 = v12;
    else
      v14 = 0;
    v15 = v14 | v11;
    if ((v13 & ~v15) != 0)
      v16 = v13;
    else
      v16 = 0;
    LOBYTE(v24[0]) = v16 | v15;
    v17 = v26;
    v18 = v27;
    sub_100034C68((uint64_t)v25, v26);
    v19 = sub_100092B88();
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)(v24, &type metadata for DeprecatedNANAvailability.AvailabilityControl, v19, v17, v18);
    v24[0] = a3;
    v24[1] = a4;
    v20 = v26;
    v21 = v27;
    sub_100034C68((uint64_t)v25, v26);
    v22 = sub_100068570();
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)(v24, &type metadata for Data, v22, v20, v21);
  }
  return sub_100014430(v25);
}

uint64_t DeprecatedNANAvailability.hash(into:)(uint64_t a1, unsigned int a2, uint64_t a3, unint64_t a4)
{
  char v6;
  unsigned int v8;
  __n128 v9;

  v6 = BYTE2(a2);
  v8 = a2 >> 8;
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(v8);
  Hasher._combine(_:)(v6 & 1);
  sub_100031FEC(a3, a4);
  Data.hash(into:)(a1, a3, a4, v9);
  return sub_10000E614(a3, a4);
}

void static DeprecatedNANAvailability.__derived_struct_equals(_:_:)(int a1, uint64_t a2, uint64_t a3, int a4)
{
  if ((unsigned __int16)a1 == (unsigned __int16)a4 && ((a1 ^ a4) & 0x10000) == 0)
    _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(a2, a3);
}

Swift::Int DeprecatedNANAvailability.hashValue.getter(unsigned int a1, uint64_t a2, unint64_t a3)
{
  unsigned int v6;
  __n128 v7;
  _QWORD v9[9];

  v6 = a1 >> 8;
  Hasher.init(_seed:)(v9);
  Hasher._combine(_:)(a1);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(BYTE2(a1) & 1);
  sub_100031FEC(a2, a3);
  Data.hash(into:)(v9, a2, a3, v7);
  sub_10000E614(a2, a3);
  return Hasher._finalize()();
}

Swift::Int sub_1000848FC()
{
  uint64_t v0;
  Swift::UInt8 v1;
  uint64_t v2;
  unint64_t v3;
  Swift::UInt8 v4;
  Swift::UInt8 v5;
  __n128 v6;
  _QWORD v8[9];

  v1 = *(_BYTE *)(v0 + 2);
  v2 = *(_QWORD *)(v0 + 8);
  v3 = *(_QWORD *)(v0 + 16);
  v4 = *(_BYTE *)v0;
  v5 = *(_BYTE *)(v0 + 1);
  Hasher.init(_seed:)(v8);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v1);
  sub_100031FEC(v2, v3);
  Data.hash(into:)(v8, v2, v3, v6);
  sub_10000E614(v2, v3);
  return Hasher._finalize()();
}

uint64_t sub_10008499C(uint64_t a1)
{
  uint64_t v1;
  Swift::UInt8 v3;
  uint64_t v4;
  unint64_t v5;
  Swift::UInt8 v6;
  __n128 v7;

  v3 = *(_BYTE *)(v1 + 2);
  v4 = *(_QWORD *)(v1 + 8);
  v5 = *(_QWORD *)(v1 + 16);
  v6 = *(_BYTE *)(v1 + 1);
  Hasher._combine(_:)(*(_BYTE *)v1);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v3);
  sub_100031FEC(v4, v5);
  Data.hash(into:)(a1, v4, v5, v7);
  return sub_10000E614(v4, v5);
}

Swift::Int sub_100084A14()
{
  uint64_t v0;
  Swift::UInt8 v1;
  uint64_t v2;
  unint64_t v3;
  Swift::UInt8 v4;
  Swift::UInt8 v5;
  __n128 v6;
  _QWORD v8[9];

  v1 = *(_BYTE *)(v0 + 2);
  v2 = *(_QWORD *)(v0 + 8);
  v3 = *(_QWORD *)(v0 + 16);
  v4 = *(_BYTE *)v0;
  v5 = *(_BYTE *)(v0 + 1);
  Hasher.init(_seed:)(v8);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v1);
  sub_100031FEC(v2, v3);
  Data.hash(into:)(v8, v2, v3, v6);
  sub_10000E614(v2, v3);
  return Hasher._finalize()();
}

uint64_t sub_100084AB0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  result = sub_10009184C(a1);
  if (!v2)
  {
    *(_WORD *)a2 = result;
    *(_BYTE *)(a2 + 2) = BYTE2(result) & 1;
    *(_QWORD *)(a2 + 8) = v5;
    *(_QWORD *)(a2 + 16) = v6;
  }
  return result;
}

uint64_t sub_100084AEC(_QWORD *a1)
{
  unsigned __int16 *v1;
  int v2;

  if (*((_BYTE *)v1 + 2))
    v2 = 0x10000;
  else
    v2 = 0;
  return DeprecatedNANAvailability.encode(to:)(a1, *v1 | v2, *((_QWORD *)v1 + 1), *((_QWORD *)v1 + 2));
}

void sub_100084B1C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1] && ((a1[2] ^ a2[2]) & 1) == 0)
    _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(*((_QWORD *)a1 + 1), *((_QWORD *)a1 + 2));
}

uint64_t DeprecatedNANAvailabilityEntry.init(from:)(_QWORD *a1)
{
  return sub_1000915CC(a1) & 0xFFFFFF;
}

uint64_t DeprecatedNANAvailabilityEntry.hash(into:)(uint64_t a1, unsigned int a2, uint64_t a3, unint64_t a4)
{
  unsigned int v7;
  unsigned int v8;
  __n128 v9;

  v7 = a2 >> 8;
  v8 = HIWORD(a2);
  Hasher._combine(_:)(a2);
  Hasher._combine(_:)(v7);
  Hasher._combine(_:)(v8);
  sub_100031FEC(a3, a4);
  Data.hash(into:)(a1, a3, a4, v9);
  return sub_10000E614(a3, a4);
}

void static DeprecatedNANAvailabilityEntry.__derived_struct_equals(_:_:)(int a1, uint64_t a2, uint64_t a3, int a4)
{
  if ((a1 & 0xFFFFFF) == (a4 & 0xFFFFFF))
    _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(a2, a3);
}

uint64_t sub_100084C28()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100084C58 + 4 * byte_10033CC99[*v0]))(0x6C6F72746E6F63, 0xE700000000000000);
}

uint64_t sub_100084C58()
{
  return 0x6E6974617265706FLL;
}

uint64_t sub_100084C7C()
{
  return 0x4E6C656E6E616863;
}

uint64_t sub_100084CA0()
{
  return 0x6962616C69617661;
}

uint64_t sub_100084CC4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10009545C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100084CE8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100092BCC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100084D10(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100092BCC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t DeprecatedNANAvailabilityEntry.encode(to:)(_QWORD *a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[2];
  char v23;

  v21 = a4;
  v8 = sub_100012C44(&qword_100406350);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin();
  v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v13 = a1[4];
  sub_10003259C(a1, v12);
  v14 = sub_100092BCC();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for DeprecatedNANAvailabilityEntry.CodingKeys, &type metadata for DeprecatedNANAvailabilityEntry.CodingKeys, v14, v12, v13);
  LOBYTE(v22[0]) = a2;
  v23 = 0;
  v15 = sub_100092C10();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v22, &v23, v8, &type metadata for NANIntervalDuration, v15);
  if (!v4)
  {
    v16 = a3;
    v17 = v21;
    LOBYTE(v22[0]) = 1;
    KeyedEncodingContainer.encode(_:forKey:)(a2 >> 8, v22, v8);
    LOBYTE(v22[0]) = 2;
    KeyedEncodingContainer.encode(_:forKey:)(HIWORD(a2), v22, v8);
    v22[0] = v16;
    v22[1] = v17;
    v23 = 3;
    v18 = sub_100068570();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v22, &v23, v8, &type metadata for Data, v18);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

Swift::Int DeprecatedNANAvailabilityEntry.hashValue.getter(unsigned int a1, uint64_t a2, unint64_t a3)
{
  Swift::UInt8 v5;
  unsigned int v6;
  unsigned int v7;
  __n128 v8;
  _QWORD v10[9];

  v5 = a1;
  v6 = a1 >> 8;
  v7 = HIWORD(a1);
  Hasher.init(_seed:)(v10);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  Hasher._combine(_:)(v7);
  sub_100031FEC(a2, a3);
  Data.hash(into:)(v10, a2, a3, v8);
  sub_10000E614(a2, a3);
  return Hasher._finalize()();
}

Swift::Int sub_100084F80()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  Swift::UInt8 v3;
  Swift::UInt8 v4;
  Swift::UInt8 v5;
  __n128 v6;
  _QWORD v8[9];

  v1 = *(_QWORD *)(v0 + 8);
  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_BYTE *)v0;
  v4 = *(_BYTE *)(v0 + 1);
  v5 = *(_BYTE *)(v0 + 2);
  Hasher.init(_seed:)(v8);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  sub_100031FEC(v1, v2);
  Data.hash(into:)(v8, v1, v2, v6);
  sub_10000E614(v1, v2);
  return Hasher._finalize()();
}

uint64_t sub_100085020(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  Swift::UInt8 v5;
  Swift::UInt8 v6;
  __n128 v7;

  v3 = *(_QWORD *)(v1 + 8);
  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_BYTE *)(v1 + 1);
  v6 = *(_BYTE *)(v1 + 2);
  Hasher._combine(_:)(*(_BYTE *)v1);
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  sub_100031FEC(v3, v4);
  Data.hash(into:)(a1, v3, v4, v7);
  return sub_10000E614(v3, v4);
}

Swift::Int sub_100085098()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  Swift::UInt8 v3;
  Swift::UInt8 v4;
  Swift::UInt8 v5;
  __n128 v6;
  _QWORD v8[9];

  v1 = *(_QWORD *)(v0 + 8);
  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_BYTE *)v0;
  v4 = *(_BYTE *)(v0 + 1);
  v5 = *(_BYTE *)(v0 + 2);
  Hasher.init(_seed:)(v8);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  sub_100031FEC(v1, v2);
  Data.hash(into:)(v8, v1, v2, v6);
  sub_10000E614(v1, v2);
  return Hasher._finalize()();
}

uint64_t sub_100085134@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  result = sub_1000915CC(a1);
  if (!v2)
  {
    *(_WORD *)a2 = result;
    *(_BYTE *)(a2 + 2) = BYTE2(result);
    *(_QWORD *)(a2 + 8) = v5;
    *(_QWORD *)(a2 + 16) = v6;
  }
  return result;
}

uint64_t sub_100085170(_QWORD *a1)
{
  unsigned __int16 *v1;

  return DeprecatedNANAvailabilityEntry.encode(to:)(a1, *v1 | (*((unsigned __int8 *)v1 + 2) << 16), *((_QWORD *)v1 + 1), *((_QWORD *)v1 + 2));
}

void sub_100085194(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2])
    _s7CoreP2P6NANPMKV23__derived_struct_equalsySbAC_ACtFZ_0(*((_QWORD *)a1 + 1), *((_QWORD *)a1 + 2));
}

BOOL sub_1000851D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int *v3;
  int *v4;
  uint64_t v5;
  _BOOL8 result;
  int v7;
  int v8;
  int v9;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  if (*(_DWORD *)(a1 + 32) != *(_DWORD *)(a2 + 32))
    return 0;
  v3 = (int *)(a1 + 36);
  v4 = (int *)(a2 + 36);
  v5 = v2 - 1;
  do
  {
    result = v5 == 0;
    if (!v5)
      break;
    v8 = *v3++;
    v7 = v8;
    v9 = *v4++;
    --v5;
  }
  while (v7 == v9);
  return result;
}

uint64_t _s7CoreP2P12NANAttributeO18PublicAvailabilityV23__derived_struct_equalsySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2 && a1 != a2)
  {
    if (*(unsigned __int8 *)(a1 + 32) == *(unsigned __int8 *)(a2 + 32)
      && *(unsigned __int16 *)(a1 + 40) == *(unsigned __int16 *)(a2 + 40))
    {
      __asm { BR              X10 }
    }
    return 0;
  }
  return 1;
}

uint64_t sub_100085C70(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  char v7;
  int v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2 && a1 != a2)
  {
    if (*(unsigned __int8 *)(a1 + 32) == *(unsigned __int8 *)(a2 + 32)
      && *(unsigned __int16 *)(a1 + 34) == *(unsigned __int16 *)(a2 + 34)
      && *(unsigned __int8 *)(a1 + 36) == *(unsigned __int8 *)(a2 + 36))
    {
      v5 = (unsigned __int8 *)(a2 + 46);
      v6 = (unsigned __int8 *)(a1 + 46);
      do
      {
        v7 = *(v5 - 6);
        if ((*(v6 - 6) & 1) != 0)
        {
          if (!*(v5 - 6))
            return 0;
        }
        else
        {
          if (*((unsigned __int16 *)v6 - 4) != *((unsigned __int16 *)v5 - 4))
            v7 = 1;
          if ((v7 & 1) != 0)
            return 0;
        }
        if (!--v2)
          return 1;
        v8 = *(v5 - 4);
        v9 = *((unsigned __int16 *)v5 - 1);
        v11 = *v5;
        v5 += 10;
        v10 = v11;
        v12 = *v6;
        v13 = *((unsigned __int16 *)v6 - 1);
        v14 = *(v6 - 4);
        v6 += 10;
      }
      while (v14 == v8 && v13 == v9 && v12 == v10);
    }
    return 0;
  }
  return 1;
}

BOOL sub_100085D28(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  uint64_t v5;
  _BOOL8 result;
  int v7;
  int v8;
  int v9;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  if (*(unsigned __int8 *)(a1 + 32) != *(unsigned __int8 *)(a2 + 32))
    return 0;
  v3 = (unsigned __int8 *)(a1 + 33);
  v4 = (unsigned __int8 *)(a2 + 33);
  v5 = v2 - 1;
  do
  {
    result = v5 == 0;
    if (!v5)
      break;
    v8 = *v3++;
    v7 = v8;
    v9 = *v4++;
    --v5;
  }
  while (v7 == v9);
  return result;
}

uint64_t sub_100085D94(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 *i;
  int v5;
  int v6;
  int v7;
  uint64_t result;
  char v15;
  unsigned __int8 v16;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2 && a1 != a2)
  {
    if (*(_DWORD *)(a1 + 32) == *(_DWORD *)(a2 + 32)
      && ((0x801004u >> (8 * *(_BYTE *)(a1 + 36))) & 0xFFC) == ((0x801004u >> (8 * *(_BYTE *)(a2 + 36))) & 0xFFC))
    {
      v3 = a1 + 37;
      for (i = (unsigned __int8 *)(a2 + 37); ; i += 8)
      {
        v5 = *i;
        v6 = i[1];
        v7 = *(unsigned __int8 *)(v3 + 1);
        switch(*(_BYTE *)v3)
        {
          case 2:
            if (v5 != 2 || v7 != v6)
              return 0;
            break;
          case 3:
            if (v5 != 3 || v7 != v6)
              return 0;
            break;
          case 4:
            if (v5 != 4 || v7 != v6)
              return 0;
            break;
          case 5:
            if (v5 != 5 || v7 != v6)
              return 0;
            break;
          case 6:
            if (v5 != 6 || v7 != v6)
              return 0;
            break;
          default:
            if ((v5 - 2) < 5)
              return 0;
            if (((*(_BYTE *)v3 & 1) == 0) == (v5 & 1) || v7 != v6)
              return 0;
            break;
        }
        if (!--v2)
          break;
        if (*(_DWORD *)(v3 + 3) != *(_DWORD *)(i + 3))
          return 0;
        result = 0;
        v15 = *(_BYTE *)(v3 + 7);
        v3 += 8;
        v16 = i[7];
        if ((0x801004u >> (8 * v15)) != (0x801004u >> (8 * v16)))
          return result;
      }
      return 1;
    }
    return 0;
  }
  return 1;
}

uint64_t _s7CoreP2P15AWDLActionFrameV28AWDLChannelSequenceParameterV23__derived_struct_equalsySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int *v3;
  unsigned int *i;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2 && a1 != a2)
  {
    v3 = (unsigned int *)(a1 + 32);
    for (i = (unsigned int *)(a2 + 32); ; i += 2)
    {
      v5 = *v3 | ((unint64_t)*((unsigned __int16 *)v3 + 2) << 32);
      v6 = *i | ((unint64_t)*((unsigned __int16 *)i + 2) << 32);
      v7 = v6 & 0xFF00000000;
      if ((v5 & 0xFF00000000) != 0x300000000)
        break;
      if (v7 != 0x300000000)
        return 0;
LABEL_6:
      v3 += 2;
      if (!--v2)
        return 1;
    }
    if (v7 != 0x300000000
      && *v3 == *i
      && (0x801004u >> ((v5 >> 29) & 0xF8)) == (0x801004u >> ((v6 >> 29) & 0xF8)))
    {
      v8 = v6 >> 40;
      switch(v5 >> 40)
      {
        case 2uLL:
          if ((_DWORD)v8 != 2)
            return 0;
          goto LABEL_6;
        case 3uLL:
          if ((_DWORD)v8 != 3)
            return 0;
          goto LABEL_6;
        case 4uLL:
          if ((_DWORD)v8 != 4)
            return 0;
          goto LABEL_6;
        case 5uLL:
          if ((_DWORD)v8 != 5)
            return 0;
          goto LABEL_6;
        case 6uLL:
          if ((_DWORD)v8 != 6)
            return 0;
          goto LABEL_6;
        default:
          if ((v8 - 2) < 5 || ((v5 & 0x10000000000) == 0) == ((v6 >> 40) & 1))
            return 0;
          goto LABEL_6;
      }
    }
    return 0;
  }
  return 1;
}

BOOL _s7CoreP2P15AWDLActionFrameV12SyncTreePathV23__derived_struct_equalsySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  _BOOL8 result;
  BOOL v9;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  v3 = v2 - 1;
  v4 = a1 + 37;
  v5 = a2 + 37;
  do
  {
    v6 = *(_DWORD *)(v4 - 5) ^ *(_DWORD *)(v5 - 5) | *(unsigned __int16 *)(v4 - 1) ^ *(unsigned __int16 *)(v5 - 1);
    result = v6 == 0;
    v9 = v3-- != 0;
    if (v6)
      break;
    v4 += 6;
    v5 += 6;
  }
  while (v9);
  return result;
}

uint64_t sub_1000860FC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2)
  {
    if (a1 != a2)
      __asm { BR              X8 }
  }
  return 1;
}

uint64_t _s7CoreP2P12NANAttributeO13ServiceIDListV23__derived_struct_equalsySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  return sub_100089324(a1, a2);
}

uint64_t sub_100086A54(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2 && a1 != a2)
  {
    if (*(unsigned __int8 *)(a1 + 32) == *(unsigned __int8 *)(a2 + 32)
      && *(unsigned __int8 *)(a1 + 33) == *(unsigned __int8 *)(a2 + 33)
      && *(unsigned __int8 *)(a1 + 34) == *(unsigned __int8 *)(a2 + 34))
    {
      __asm { BR              X10 }
    }
    return 0;
  }
  return 1;
}

uint64_t sub_100087490(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  unsigned __int16 *v6;
  unsigned __int16 *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  int v27;
  int v28;
  uint64_t v29;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 == *(_QWORD *)(a2 + 16))
  {
    if (!v2 || a1 == a2)
      return 1;
    v3 = 0;
    v23 = a2 + 32;
    v24 = a1 + 32;
    v22 = *(_QWORD *)(a1 + 16);
    while (1)
    {
      v6 = (unsigned __int16 *)(v24 + 56 * v3);
      v7 = (unsigned __int16 *)(v23 + 56 * v3);
      if (*v6 != *v7)
        return 0;
      v9 = *((_QWORD *)v6 + 1);
      v8 = *((_QWORD *)v6 + 2);
      v10 = *((_QWORD *)v6 + 3);
      v11 = *((_QWORD *)v6 + 5);
      v12 = *((_QWORD *)v7 + 1);
      v13 = *((_QWORD *)v7 + 2);
      v14 = *((_QWORD *)v7 + 3);
      v5 = *((_QWORD *)v7 + 5);
      v29 = v12;
      v25 = *((_BYTE *)v7 + 48);
      v26 = *((_BYTE *)v6 + 48);
      v27 = *((unsigned __int8 *)v7 + 32);
      v28 = *((unsigned __int8 *)v6 + 32);
      if (v10 >> 60 != 15)
        break;
      if (v14 >> 60 != 15)
        goto LABEL_34;
      sub_100063C28(v9, v8, v10);
      swift_bridgeObjectRetain(v11);
      sub_100063C28(v12, v13, v14);
      swift_bridgeObjectRetain(v5);
      if (v28 != v27)
      {
        v21 = v12;
        goto LABEL_33;
      }
      if ((v26 & 1) != 0)
      {
        if ((v25 & 1) == 0)
          goto LABEL_31;
        v15 = sub_100085C70(v11, v5);
        sub_1000634E8(v29, v13, v14);
        swift_bridgeObjectRelease(v5);
        sub_1000634E8(v9, v8, v10);
        swift_bridgeObjectRelease(v11);
        if ((v15 & 1) == 0)
          return 0;
      }
      else
      {
        if ((v25 & 1) != 0 || (v16 = *(_QWORD *)(v11 + 16), v16 != *(_QWORD *)(v5 + 16)))
        {
LABEL_31:
          v21 = v12;
LABEL_33:
          sub_1000634E8(v21, v13, v14);
          swift_bridgeObjectRelease(v5);
          sub_1000634E8(v9, v8, v10);
          swift_bridgeObjectRelease(v11);
          return 0;
        }
        if (v16)
        {
          if (v11 == v5)
          {
            v5 = v11;
          }
          else
          {
            if (*(unsigned __int8 *)(v11 + 32) != *(unsigned __int8 *)(v5 + 32))
              goto LABEL_31;
            if (v16 != 1)
            {
              if (*(unsigned __int8 *)(v11 + 33) != *(unsigned __int8 *)(v5 + 33))
                goto LABEL_31;
              v17 = 2 - v16;
              v18 = 34;
              while (v17 + v18 != 34)
              {
                v19 = *(unsigned __int8 *)(v11 + v18);
                v20 = *(unsigned __int8 *)(v5 + v18++);
                if (v19 != v20)
                  goto LABEL_31;
              }
            }
          }
        }
        sub_1000634E8(v12, v13, v14);
        swift_bridgeObjectRelease(v5);
        sub_1000634E8(v9, v8, v10);
        swift_bridgeObjectRelease(v11);
      }
      ++v3;
      result = 1;
      if (v3 == v22)
        return result;
    }
    if (v14 >> 60 == 15)
    {
LABEL_34:
      sub_100063C28(v9, v8, v10);
      sub_100063C28(v12, v13, v14);
      sub_1000634E8(v9, v8, v10);
      sub_1000634E8(v12, v13, v14);
    }
    else if ((unsigned __int16)*((_QWORD *)v6 + 1) == (unsigned __int16)v12)
    {
      __asm { BR              X8 }
    }
  }
  return 0;
}

uint64_t _s7CoreP2P12NANAttributeO32FineTimingMeasurementRangeReportV23__derived_struct_equalsySbAE_AEtFZ_0(uint64_t a1, uint64_t a2, uint8x8_t a3, uint8x8_t a4)
{
  uint64_t v4;
  uint64_t i;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL4 v10;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v4 && a1 != a2)
  {
    for (i = 0; ; i += 16)
    {
      v6 = a1 + i;
      v7 = a2 + i;
      if (*(_DWORD *)(a1 + i + 32) != *(_DWORD *)(a2 + i + 32))
        break;
      v8 = 0;
      v10 = *(_DWORD *)(v6 + 36) != *(_DWORD *)(v7 + 36)
         || *(unsigned __int16 *)(v6 + 40) != *(unsigned __int16 *)(v7 + 40);
      a3.i32[0] = *(_DWORD *)(v6 + 42);
      a4.i32[0] = *(_DWORD *)(v7 + 42);
      a4 = (uint8x8_t)vmovl_u8(a4).u64[0];
      a3 = (uint8x8_t)vcltz_s16(vshl_n_s16(vceq_s16((int16x4_t)*(_OWORD *)&vmovl_u8(a3), (int16x4_t)a4), 0xFuLL));
      if ((vminv_u16((uint16x4_t)a3) & 1) == 0 || v10)
        return v8;
      if (!--v4)
        return 1;
    }
    return 0;
  }
  return 1;
}

BOOL sub_100088318(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 result;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  int v7;
  int v8;
  int v9;
  int v10;
  int v11;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  if (*(unsigned __int8 *)(a1 + 32) != *(unsigned __int8 *)(a2 + 32)
    || *(unsigned __int8 *)(a1 + 33) != *(unsigned __int8 *)(a2 + 33))
  {
    return 0;
  }
  v5 = (unsigned __int8 *)(a2 + 35);
  v6 = (unsigned __int8 *)(a1 + 35);
  do
  {
    result = --v2 == 0;
    if (!v2)
      break;
    v7 = *(v5 - 1);
    v9 = *v5;
    v5 += 2;
    v8 = v9;
    v10 = *v6;
    v11 = *(v6 - 1);
    v6 += 2;
  }
  while (v11 == v7 && v10 == v8);
  return result;
}

uint64_t _s7CoreP2P12NANAttributeO26SecurityContextInformationV23__derived_struct_equalsySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2 && a1 != a2)
  {
    if (*(unsigned __int8 *)(a1 + 32) == *(unsigned __int8 *)(a2 + 32)
      && *(unsigned __int8 *)(a1 + 33) == *(unsigned __int8 *)(a2 + 33))
    {
      __asm { BR              X10 }
    }
    return 0;
  }
  return 1;
}

uint64_t sub_100088DC8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t i;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 == *(_QWORD *)(a2 + 16))
  {
    if (!v2 || a1 == a2)
      return 1;
    v3 = a2 + 38;
    for (i = a1 + 38; *(unsigned __int8 *)(i - 6) == *(unsigned __int8 *)(v3 - 6); i += 7)
    {
      if (*(_DWORD *)(i - 5) != *(_DWORD *)(v3 - 5) || *(unsigned __int16 *)(i - 1) != *(unsigned __int16 *)(v3 - 1))
        break;
      v3 += 7;
      if (!--v2)
        return 1;
    }
  }
  return 0;
}

uint64_t sub_100088E80(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  __int16 v5;
  __int16 v6;
  __int16 v7;
  __int16 v8;
  __int16 v9;
  __int16 v10;
  __int16 v11;
  __int16 v12;
  int v14;
  int v15;
  int v16;
  int v17;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2 && a1 != a2)
  {
    for (i = 0; ; i += 14)
    {
      v5 = *(_WORD *)(a1 + i + 38);
      v6 = *(_WORD *)(a1 + i + 40);
      v7 = *(_WORD *)(a1 + i + 42);
      v8 = *(_WORD *)(a1 + i + 44);
      v9 = *(_WORD *)(a2 + i + 38);
      v10 = *(_WORD *)(a2 + i + 40);
      v11 = *(_WORD *)(a2 + i + 42);
      v12 = *(_WORD *)(a2 + i + 44);
      if (*(_DWORD *)(a1 + i + 32) != *(_DWORD *)(a2 + i + 32)
        || *(unsigned __int16 *)(a1 + i + 36) != *(unsigned __int16 *)(a2 + i + 36))
      {
        break;
      }
      v14 = v9 & 0xFF00;
      if ((v5 & 0xFF00) == 0x2200)
      {
        if (v14 != 8704)
          return 0;
      }
      else if (v14 == 8704
             || word_10033EF4C[(char)v5] != word_10033EF4C[(char)v9]
             || *(unsigned __int16 *)((char *)&unk_10033EFB8 + (((uint64_t)v5 >> 7) & 0xFFFFFFFFFFFFFELL)) != *(unsigned __int16 *)((char *)&unk_10033EFB8 + (((uint64_t)v9 >> 7) & 0xFFFFFFFFFFFFFELL)))
      {
        return 0;
      }
      v15 = v10 & 0xFF00;
      if ((v6 & 0xFF00) == 0x2200)
      {
        if (v15 != 8704)
          return 0;
      }
      else if (v15 == 8704
             || word_10033EF4C[(char)v6] != word_10033EF4C[(char)v10]
             || *(unsigned __int16 *)((char *)&unk_10033EFB8 + (((uint64_t)v6 >> 7) & 0xFFFFFFFFFFFFFELL)) != *(unsigned __int16 *)((char *)&unk_10033EFB8 + (((uint64_t)v10 >> 7) & 0xFFFFFFFFFFFFFELL)))
      {
        return 0;
      }
      v16 = v11 & 0xFF00;
      if ((v7 & 0xFF00) == 0x2200)
      {
        if (v16 != 8704)
          return 0;
      }
      else if (v16 == 8704
             || word_10033EF4C[(char)v7] != word_10033EF4C[(char)v11]
             || *(unsigned __int16 *)((char *)&unk_10033EFB8 + (((uint64_t)v7 >> 7) & 0xFFFFFFFFFFFFFELL)) != *(unsigned __int16 *)((char *)&unk_10033EFB8 + (((uint64_t)v11 >> 7) & 0xFFFFFFFFFFFFFELL)))
      {
        return 0;
      }
      v17 = v12 & 0xFF00;
      if ((v8 & 0xFF00) == 0x2200)
      {
        if (v17 != 8704)
          return 0;
      }
      else if (v17 == 8704
             || word_10033EF4C[(char)v8] != word_10033EF4C[(char)v12]
             || *(unsigned __int16 *)((char *)&unk_10033EFB8 + (((uint64_t)v8 >> 7) & 0xFFFFFFFFFFFFFELL)) != *(unsigned __int16 *)((char *)&unk_10033EFB8 + (((uint64_t)v12 >> 7) & 0xFFFFFFFFFFFFFELL)))
      {
        return 0;
      }
      v4 = 1;
      if (!--v2)
        return v4;
    }
    return 0;
  }
  return 1;
}

uint64_t _s7CoreP2P19InfraScanStartEventV23__derived_struct_equalsySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 *i;
  int v5;
  uint64_t result;
  int v7;
  unsigned int v8;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2 && a1 != a2)
  {
    if (*(_DWORD *)(a1 + 32) == *(_DWORD *)(a2 + 32)
      && ((0x801004u >> (8 * *(_BYTE *)(a1 + 36))) & 0xFFC) == ((0x801004u >> (8 * *(_BYTE *)(a2 + 36))) & 0xFFC))
    {
      v3 = a1 + 37;
      for (i = (unsigned __int8 *)(a2 + 37); ; i += 8)
      {
        v5 = *i;
        switch(*(_BYTE *)v3)
        {
          case 2:
            if (v5 != 2)
              return 0;
            break;
          case 3:
            if (v5 != 3)
              return 0;
            break;
          case 4:
            if (v5 != 4)
              return 0;
            break;
          case 5:
            if (v5 != 5)
              return 0;
            break;
          case 6:
            if (v5 != 6)
              return 0;
            break;
          default:
            if ((v5 - 2) < 5 || ((((*(_BYTE *)v3 & 1) == 0) ^ v5) & 1) == 0)
              return 0;
            break;
        }
        if (!--v2)
          break;
        if (*(_DWORD *)(v3 + 3) != *(_DWORD *)(i + 3))
          return 0;
        result = 0;
        v7 = (0x801004u >> (8 * *(_BYTE *)(v3 + 7)));
        v8 = 0x801004u >> (8 * i[7]);
        v3 += 8;
        if (v7 != v8)
          return result;
      }
      return 1;
    }
    return 0;
  }
  return 1;
}

BOOL sub_100089220(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double *v3;
  double *v4;
  uint64_t v5;
  _BOOL8 result;
  double v7;
  double v8;
  double v9;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  if (*(double *)(a1 + 32) != *(double *)(a2 + 32))
    return 0;
  v3 = (double *)(a1 + 40);
  v4 = (double *)(a2 + 40);
  v5 = v2 - 1;
  do
  {
    result = v5 == 0;
    if (!v5)
      break;
    v7 = *v3++;
    v8 = v7;
    v9 = *v4++;
    --v5;
  }
  while (v8 == v9);
  return result;
}

uint64_t _s7CoreP2P21NANInformationElementV23__derived_struct_equalsySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  return sub_100089D38(a1, a2, (void (*)(_QWORD))type metadata accessor for NANAttribute, (uint64_t (*)(char *, char *))_s7CoreP2P12NANAttributeO21__derived_enum_equalsySbAC_ACtFZ_0);
}

BOOL sub_1000892A0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char *v3;
  char *v4;
  uint64_t v5;
  _BOOL8 result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  if (byte_10033EF3E[*(char *)(a1 + 32)] != byte_10033EF3E[*(char *)(a2 + 32)])
    return 0;
  v3 = (char *)(a1 + 33);
  v4 = (char *)(a2 + 33);
  v5 = v2 - 1;
  do
  {
    result = v5 == 0;
    if (!v5)
      break;
    v8 = *v3++;
    v7 = v8;
    v9 = *v4++;
    --v5;
  }
  while (byte_10033EF3E[v7] == byte_10033EF3E[v9]);
  return result;
}

uint64_t sub_100089324(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2)
  {
    if (a1 != a2)
      __asm { BR              X8 }
  }
  return 1;
}

uint64_t sub_100089C38(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  char v7;
  BOOL v9;
  _BYTE v11[56];
  _BYTE v12[56];

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 == *(_QWORD *)(a2 + 16))
  {
    if (!v2 || a1 == a2)
    {
      v7 = 1;
    }
    else
    {
      v3 = a1 + 32;
      v4 = a2 + 32;
      v5 = v2 - 1;
      do
      {
        sub_100095708(v3, (uint64_t)v11);
        sub_100095708(v4, (uint64_t)v12);
        sub_100095744((uint64_t)v11, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100063C58);
        sub_100095744((uint64_t)v12, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100063C58);
        static IEEE80211InformationElement.__derived_enum_equals(_:_:)((uint64_t)v11);
        v7 = v6;
        sub_100095744((uint64_t)v12, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100063518);
        sub_100095744((uint64_t)v11, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100063518);
        v9 = v5-- != 0;
        if ((v7 & 1) == 0)
          break;
        v4 += 56;
        v3 += 56;
      }
      while (v9);
    }
  }
  else
  {
    v7 = 0;
  }
  return v7 & 1;
}

uint64_t sub_100089D24(uint64_t a1, uint64_t a2)
{
  return sub_100089D38(a1, a2, (void (*)(_QWORD))type metadata accessor for AWDLActionFrame.AWDLAttribute, (uint64_t (*)(char *, char *))_s7CoreP2P15AWDLActionFrameV13AWDLAttributeO21__derived_enum_equalsySbAE_AEtFZ_0);
}

uint64_t sub_100089D38(uint64_t a1, uint64_t a2, void (*a3)(_QWORD), uint64_t (*a4)(char *, char *))
{
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  BOOL v19;
  uint64_t v21;

  a3(0);
  __chkstk_darwin();
  v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin();
  v12 = (char *)&v21 - v11;
  v13 = *(_QWORD *)(a1 + 16);
  if (v13 == *(_QWORD *)(a2 + 16))
  {
    if (!v13 || a1 == a2)
    {
      v17 = 1;
    }
    else
    {
      v14 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
      v15 = *(_QWORD *)(v10 + 72);
      v16 = v13 - 1;
      do
      {
        sub_1000637E0(a1 + v14, (uint64_t)v12, (uint64_t (*)(_QWORD))a3);
        sub_1000637E0(a2 + v14, (uint64_t)v9, (uint64_t (*)(_QWORD))a3);
        v17 = a4(v12, v9);
        sub_100063824((uint64_t)v9, (uint64_t (*)(_QWORD))a3);
        sub_100063824((uint64_t)v12, (uint64_t (*)(_QWORD))a3);
        v19 = v16-- != 0;
        if ((v17 & 1) == 0)
          break;
        v14 += v15;
      }
      while (v19);
    }
  }
  else
  {
    v17 = 0;
  }
  return v17 & 1;
}

uint64_t sub_100089E74(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 == *(_QWORD *)(a2 + 16))
  {
    if (!v2 || a1 == a2)
      return 1;
    if (*(unsigned __int8 *)(a1 + 32) == *(unsigned __int8 *)(a2 + 32))
      __asm { BR              X10 }
  }
  return 0;
}

uint64_t sub_10008B5D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t *i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  v3 = (_QWORD *)(a2 + 56);
  for (i = (uint64_t *)(a1 + 56); ; i += 4)
  {
    v6 = *(i - 1);
    v5 = *i;
    v8 = *(v3 - 1);
    v7 = *v3;
    v15 = *(i - 3);
    v16 = *(i - 2);
    v13 = *(v3 - 3);
    v14 = *(v3 - 2);
    swift_bridgeObjectRetain(*v3);
    swift_bridgeObjectRetain(v5);
    if (v15 != v13 || v16 != v14)
    {
      swift_bridgeObjectRelease(v5);
LABEL_20:
      v12 = v7;
      goto LABEL_22;
    }
    if (v5)
      break;
    if (v7)
      goto LABEL_20;
LABEL_6:
    v3 += 4;
    if (!--v2)
      return 1;
  }
  if (v7)
  {
    if (v6 == v8 && v5 == v7)
    {
      swift_bridgeObjectRelease(v5);
      swift_bridgeObjectRelease(v7);
    }
    else
    {
      v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v6, v5, v8, v7, 0);
      swift_bridgeObjectRelease(v5);
      swift_bridgeObjectRelease(v7);
      if ((v10 & 1) == 0)
        return 0;
    }
    goto LABEL_6;
  }
  v12 = v5;
LABEL_22:
  swift_bridgeObjectRelease(v12);
  return 0;
}

void sub_10008B734(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }
}

uint64_t sub_10008B794(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, __int16 a10, char __s2, char a12, char a13, char a14, char a15, char a16, char a17, char a18, char a19, char a20,char a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  BOOL *v37;
  const void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t result;
  uint64_t v42;
  __int16 v43;
  char v44;
  char v45;
  char v46;
  char v47;

  v42 = v39;
  v43 = v40;
  v44 = BYTE2(v40);
  v45 = BYTE3(v40);
  v46 = BYTE4(v40);
  v47 = BYTE5(v40);
  if (!v38)
  {
    __break(1u);
    JUMPOUT(0x10008B978);
  }
  result = memcmp(v38, &v42, BYTE6(v40));
  *v37 = (_DWORD)result == 0;
  return result;
}

unint64_t sub_10008B99C()
{
  unint64_t result;

  result = qword_1004062A8;
  if (!qword_1004062A8)
  {
    result = swift_getWitnessTable(&unk_10033EEEC, &type metadata for NANBitmap.Channel.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1004062A8);
  }
  return result;
}

uint64_t sub_10008B9E0(uint64_t result)
{
  uint64_t v1;
  size_t v2;
  char *v3;
  char *v4;
  int v5;
  BOOL v6;
  int v7;
  uint64_t v8;
  BOOL v9;
  char v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  size_t v16;
  char *v17;
  size_t v18;
  char *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;

  v1 = 0;
  v2 = 0;
  v3 = (char *)_swiftEmptyArrayStorage;
  v4 = (char *)&_swiftEmptyArrayStorage[4];
  v5 = result;
  do
  {
    if (v1 < -8)
    {
LABEL_14:
      if ((unint64_t)v1 >= 9)
        v10 = 0;
      else
        v10 = 1 << v1;
      v6 = __OFADD__(v1++, 1);
      if (!v6)
        goto LABEL_18;
LABEL_34:
      __break(1u);
      break;
    }
    while (v1 < 0)
    {
      v7 = 0;
      v9 = __OFADD__(v1, 8);
      if ((unint64_t)v1 <= 0xFFFFFFFFFFFFFFF8)
      {
        v10 = 0;
        v1 = -7;
        if (v9)
          goto LABEL_34;
        goto LABEL_18;
      }
LABEL_6:
      if ((v7 & ~v5) == 0)
        goto LABEL_14;
      v8 = v1 + 1;
      if (__OFADD__(v1, 1))
      {
        __break(1u);
        goto LABEL_40;
      }
      ++v1;
      if ((unint64_t)(v8 - 9) < 0xFFFFFFFFFFFFFFEFLL)
      {
        v1 = v8;
        goto LABEL_14;
      }
    }
    v6 = __OFSUB__(v1, 8);
    if ((unint64_t)v1 < 8)
    {
      v7 = 1 << v1;
      goto LABEL_6;
    }
    v10 = 0;
    v1 = 9;
    if (v6)
      goto LABEL_34;
LABEL_18:
    if (!v2)
    {
      v11 = *((_QWORD *)v3 + 3);
      if ((uint64_t)((v11 >> 1) + 0x4000000000000000) >= 0)
      {
        v12 = v11 & 0xFFFFFFFFFFFFFFFELL;
        if (v12 <= 1)
          v13 = 1;
        else
          v13 = v12;
        v14 = sub_100012C44(&qword_100406228);
        v15 = (char *)swift_allocObject(v14, v13 + 32, 7);
        v16 = 2 * j__malloc_size(v15) - 64;
        *((_QWORD *)v15 + 2) = v13;
        *((_QWORD *)v15 + 3) = v16;
        v17 = v15 + 32;
        v18 = *((_QWORD *)v3 + 3) >> 1;
        if (*((_QWORD *)v3 + 2))
        {
          v19 = v3 + 32;
          if (v15 != v3 || v17 >= &v19[v18])
            memmove(v15 + 32, v19, v18);
          *((_QWORD *)v3 + 2) = 0;
        }
        v4 = &v17[v18];
        v2 = (v16 >> 1) - v18;
        result = swift_release(v3);
        v3 = v15;
        goto LABEL_29;
      }
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
      return result;
    }
LABEL_29:
    v6 = __OFSUB__(v2--, 1);
    if (v6)
    {
LABEL_40:
      __break(1u);
      goto LABEL_41;
    }
    *v4++ = v10;
  }
  while (v1 < 8);
  v20 = *((_QWORD *)v3 + 3);
  if (v20 >= 2)
  {
    v21 = v20 >> 1;
    v6 = __OFSUB__(v21, v2);
    v22 = v21 - v2;
    if (v6)
      goto LABEL_42;
    *((_QWORD *)v3 + 2) = v22;
  }
  return (uint64_t)v3;
}

unint64_t *sub_10008BBA0(unint64_t *result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unsigned int v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;

  if (!a2)
  {
LABEL_5:
    a3 = 0;
    goto LABEL_6;
  }
  if (!a3)
  {
LABEL_6:
    v7 = a4;
LABEL_7:
    *result = a4;
    result[1] = a5;
    result[2] = a6;
    result[3] = v7;
    return (unint64_t *)a3;
  }
  if ((a3 & 0x8000000000000000) == 0)
  {
    if (a4 != a5)
    {
      v12 = a6;
      v8 = a4 + 16;
      if (a4 >= 0xFFFFFFFFFFFFFFF0)
      {
LABEL_14:
        __break(1u);
LABEL_15:
        a3 = v6 + 1;
        v7 = a5;
      }
      else
      {
        v6 = 0;
        v9 = *((unsigned __int8 *)&v12 + (a4 >> 7));
        v7 = a4;
        while (1)
        {
          v10 = (v7 >> 4) & 7;
          v7 = v8;
          *(_BYTE *)(a2 + v6) = (v9 >> v10) & 1;
          if (a3 - 1 == v6)
            break;
          if (v8 == a5)
            goto LABEL_15;
          v12 = a6;
          ++v6;
          v9 = *((unsigned __int8 *)&v12 + (v8 >> 7));
          v11 = __CFADD__(v8, 16);
          v8 += 16;
          if (v11)
            goto LABEL_14;
        }
      }
      goto LABEL_7;
    }
    goto LABEL_5;
  }
  __break(1u);
  return result;
}

unint64_t sub_10008BCC4(unint64_t result, _BYTE *a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6)
{
  char v6;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;

  v6 = a6;
  v9 = result;
  v10 = HIBYTE(a6);
  v11 = HIWORD(a6);
  v12 = a6 >> 40;
  v13 = HIDWORD(a6);
  v14 = a6 >> 24;
  v15 = a6 >> 16;
  v16 = a6 >> 8;
  if (!a2)
    goto LABEL_5;
  if (!a3)
  {
LABEL_6:
    v17 = a4;
LABEL_7:
    *(_QWORD *)v9 = a4;
    *(_QWORD *)(v9 + 8) = a5;
    *(_BYTE *)(v9 + 16) = v6;
    *(_BYTE *)(v9 + 17) = v16;
    *(_BYTE *)(v9 + 18) = v15;
    *(_BYTE *)(v9 + 19) = v14;
    *(_BYTE *)(v9 + 20) = v13;
    *(_BYTE *)(v9 + 21) = v12;
    *(_BYTE *)(v9 + 22) = v11;
    *(_BYTE *)(v9 + 23) = v10;
    *(_QWORD *)(v9 + 24) = v17;
    return a3;
  }
  if (a3 < 0)
    goto LABEL_21;
  if (a4 == a5)
  {
LABEL_5:
    a3 = 0;
    goto LABEL_6;
  }
  v24 = HIBYTE(a6);
  v25 = a3;
  v26 = a6;
  v23 = HIWORD(a6);
  result = NANIntervalDuration.timeUnits.getter(0);
  if (!result)
    goto LABEL_22;
  a3 = v25;
  if (((a4 / result) & 0x8000000000000000) != 0)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v17 = a4 + 128;
  LOBYTE(v11) = v23;
  LOBYTE(v10) = v24;
  if (a4 < 0xFFFFFFFFFFFFFF80)
  {
    *a2 = *((_BYTE *)&v26 + ((a4 / result) >> 3));
    v19 = v25 - 1;
    if (v25 == 1)
      goto LABEL_7;
    v20 = 0;
    v21 = (char *)&v26 + (v17 >> 7);
    while (v19 != v20)
    {
      if (a5 == v17)
      {
        a3 = v20 + 1;
        v17 = a5;
        goto LABEL_7;
      }
      LOBYTE(v26) = v6;
      BYTE1(v26) = v16;
      BYTE2(v26) = v15;
      BYTE3(v26) = v14;
      BYTE4(v26) = v13;
      BYTE5(v26) = v12;
      BYTE6(v26) = v23;
      HIBYTE(v26) = v24;
      v22 = v17 + 128;
      if (v17 >= 0xFFFFFFFFFFFFFF80)
        goto LABEL_20;
      a2[v20 + 1] = v21[v20];
      ++v20;
      v17 += 128;
      if (v19 == v20)
      {
        v17 = v22;
        goto LABEL_7;
      }
    }
    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
LABEL_24:
  __break(1u);
  return result;
}

uint64_t sub_10008BE6C(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t result;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;

  v8 = *(_QWORD *)(type metadata accessor for LongTermPairingKeys.PublicIdentity(0) - 8);
  __chkstk_darwin();
  v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = __chkstk_darwin();
  v13 = (char *)&v27 - v12;
  v15 = a4 + 64;
  v14 = *(_QWORD *)(a4 + 64);
  v30 = -1 << *(_BYTE *)(a4 + 32);
  if (-v30 < 64)
    v16 = ~(-1 << -(char)v30);
  else
    v16 = -1;
  v17 = v16 & v14;
  if (!a2)
  {
    v18 = 0;
    a3 = 0;
LABEL_34:
    v26 = ~v30;
    *a1 = a4;
    a1[1] = v15;
    a1[2] = v26;
    a1[3] = v18;
    a1[4] = v17;
    return a3;
  }
  if (!a3)
  {
    v18 = 0;
    goto LABEL_34;
  }
  if (a3 < 0)
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  v29 = a1;
  v18 = 0;
  v19 = 0;
  v31 = a4 + 64;
  v32 = (unint64_t)(63 - v30) >> 6;
  v28 = v32 - 1;
  if (!v17)
    goto LABEL_9;
LABEL_8:
  v20 = __clz(__rbit64(v17));
  v17 &= v17 - 1;
  v21 = v20 | (v18 << 6);
  while (1)
  {
    ++v19;
    v25 = *(_QWORD *)(v8 + 72);
    sub_1000637E0(*(_QWORD *)(a4 + 56) + v25 * v21, (uint64_t)v10, type metadata accessor for LongTermPairingKeys.PublicIdentity);
    sub_100095780((uint64_t)v10, (uint64_t)v13);
    result = sub_100095780((uint64_t)v13, a2);
    if (v19 == a3)
      goto LABEL_33;
    a2 += v25;
    if (v17)
      goto LABEL_8;
LABEL_9:
    v22 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
      __break(1u);
      goto LABEL_41;
    }
    if (v22 >= v32)
    {
      v17 = 0;
      a3 = v19;
LABEL_33:
      a1 = v29;
      v15 = v31;
      goto LABEL_34;
    }
    v15 = v31;
    v23 = *(_QWORD *)(v31 + 8 * v22);
    if (!v23)
      break;
LABEL_18:
    v17 = (v23 - 1) & v23;
    v21 = __clz(__rbit64(v23)) + (v22 << 6);
    v18 = v22;
  }
  v18 += 2;
  if (v22 + 1 >= v32)
  {
    v17 = 0;
    v18 = v22;
LABEL_39:
    a3 = v19;
    a1 = v29;
    goto LABEL_34;
  }
  v23 = *(_QWORD *)(v31 + 8 * v18);
  if (v23)
    goto LABEL_14;
  v24 = v22 + 2;
  if (v22 + 2 >= v32)
    goto LABEL_36;
  v23 = *(_QWORD *)(v31 + 8 * v24);
  if (v23)
    goto LABEL_17;
  v18 = v22 + 3;
  if (v22 + 3 >= v32)
  {
    v17 = 0;
    v18 = v22 + 2;
    goto LABEL_39;
  }
  v23 = *(_QWORD *)(v31 + 8 * v18);
  if (v23)
  {
LABEL_14:
    v22 = v18;
    goto LABEL_18;
  }
  v24 = v22 + 4;
  if (v22 + 4 >= v32)
  {
LABEL_36:
    v17 = 0;
    goto LABEL_39;
  }
  v23 = *(_QWORD *)(v31 + 8 * v24);
  if (v23)
  {
LABEL_17:
    v22 = v24;
    goto LABEL_18;
  }
  while (1)
  {
    v22 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v22 >= v32)
    {
      v17 = 0;
      v18 = v28;
      goto LABEL_39;
    }
    v23 = *(_QWORD *)(v31 + 8 * v22);
    ++v24;
    if (v23)
      goto LABEL_18;
  }
LABEL_42:
  __break(1u);
  return result;
}

_QWORD *sub_10008C118(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  char v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;

  v4 = a4 + 64;
  v5 = -1;
  v6 = -1 << *(_BYTE *)(a4 + 32);
  if (-v6 < 64)
    v5 = ~(-1 << -(char)v6);
  v7 = v5 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v8 = 0;
    a3 = 0;
LABEL_35:
    *result = a4;
    result[1] = v4;
    result[2] = ~v6;
    result[3] = v8;
    result[4] = v7;
    return (_QWORD *)a3;
  }
  if (!a3)
  {
    v8 = 0;
    goto LABEL_35;
  }
  if (a3 < 0)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  v8 = 0;
  v9 = 0;
  v10 = (unint64_t)(63 - v6) >> 6;
  while (v7)
  {
    v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    v12 = v11 | (v8 << 6);
LABEL_8:
    ++v9;
    v13 = *(_QWORD *)(a4 + 48) + 8 * v12;
    v14 = *(_DWORD *)v13;
    v15 = *(_BYTE *)(*(_QWORD *)(a4 + 56) + v12);
    LOWORD(v13) = *(_WORD *)(v13 + 4);
    *(_DWORD *)a2 = v14;
    *(_WORD *)(a2 + 4) = v13;
    *(_BYTE *)(a2 + 6) = v15;
    a2 += 8;
    if (v9 == a3)
      goto LABEL_35;
  }
  v16 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_37;
  }
  if (v16 >= v10)
    goto LABEL_30;
  v17 = *(_QWORD *)(v4 + 8 * v16);
  if (v17)
    goto LABEL_19;
  v8 += 2;
  if (v16 + 1 >= v10)
  {
    v7 = 0;
    v8 = v16;
    goto LABEL_34;
  }
  v17 = *(_QWORD *)(v4 + 8 * v8);
  if (v17)
  {
LABEL_15:
    v16 = v8;
LABEL_19:
    v19 = __clz(__rbit64(v17));
    v7 = (v17 - 1) & v17;
    v12 = v19 + (v16 << 6);
    v8 = v16;
    goto LABEL_8;
  }
  v18 = v16 + 2;
  if (v16 + 2 >= v10)
    goto LABEL_30;
  v17 = *(_QWORD *)(v4 + 8 * v18);
  if (v17)
  {
LABEL_18:
    v16 = v18;
    goto LABEL_19;
  }
  v8 = v16 + 3;
  if (v16 + 3 >= v10)
  {
    v7 = 0;
    v8 = v16 + 2;
    goto LABEL_34;
  }
  v17 = *(_QWORD *)(v4 + 8 * v8);
  if (v17)
    goto LABEL_15;
  v18 = v16 + 4;
  if (v16 + 4 >= v10)
  {
LABEL_30:
    v7 = 0;
LABEL_34:
    a3 = v9;
    goto LABEL_35;
  }
  v17 = *(_QWORD *)(v4 + 8 * v18);
  if (v17)
    goto LABEL_18;
  while (1)
  {
    v16 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v16 >= v10)
    {
      v7 = 0;
      v8 = v10 - 1;
      goto LABEL_34;
    }
    v17 = *(_QWORD *)(v4 + 8 * v16);
    ++v18;
    if (v17)
      goto LABEL_19;
  }
LABEL_38:
  __break(1u);
  return result;
}

