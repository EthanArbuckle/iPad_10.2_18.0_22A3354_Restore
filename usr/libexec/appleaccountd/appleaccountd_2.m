uint64_t sub_10012939C(void *a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  void (*v18)(_BYTE *, uint64_t);
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _BYTE v30[12];
  int v31;
  uint64_t v32;
  uint64_t v33;

  v32 = a3;
  v33 = a4;
  v31 = a2;
  v5 = type metadata accessor for URL(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v9 = __chkstk_darwin(v5, v8);
  v11 = __chkstk_darwin(v9, v10);
  v13 = &v30[-v12];
  __chkstk_darwin(v11, v14);
  v16 = &v30[-v15];
  if (qword_10028AE58 != -1)
    swift_once(&qword_10028AE58, sub_1000C8A74);
  v17 = qword_1002A8B00;
  type metadata accessor for LocalCache();
  sub_10000840C();
  URL.appendingPathComponent(_:isDirectory:)(0xD000000000000015, 0x800000010020A520, 1);
  v18 = *(void (**)(_BYTE *, uint64_t))(v6 + 8);
  v18(&v30[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)], v5);
  v19 = objc_msgSend(a1, "recordName");
  v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
  v22 = v21;

  URL.appendingPathComponent(_:)(v20);
  swift_bridgeObjectRelease(v22);
  v18(v13, v5);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v6 + 16))(v13, v16, v5);
  v23 = *(unsigned __int8 *)(v6 + 80);
  v24 = (v23 + 32) & ~v23;
  v25 = (v7 + v24 + 7) & 0xFFFFFFFFFFFFFFF8;
  v26 = swift_allocObject(&unk_100268B30, v25 + 16, v23 | 7);
  *(_BYTE *)(v26 + 16) = v31 & 1;
  *(_QWORD *)(v26 + 24) = v17;
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v6 + 32))(v26 + v24, v13, v5);
  v27 = (_QWORD *)(v26 + v25);
  v28 = v33;
  *v27 = v32;
  v27[1] = v28;
  swift_retain(v17);
  swift_retain(v28);
  sub_1001255E8((uint64_t)v16, (uint64_t)sub_10012A760, v26, (uint64_t)&unk_100268B58, (uint64_t)sub_10012A81C, (uint64_t)&unk_100268B70);
  swift_release(v26);
  return ((uint64_t (*)(_BYTE *, uint64_t))v18)(v16, v5);
}

uint64_t sub_1001295F0(void *a1, uint64_t a2, unint64_t a3, char a4)
{
  id v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  id v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  os_log_type_t type;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  if (qword_10028ADC0 != -1)
    swift_once(&qword_10028ADC0, sub_100046D04);
  v37 = type metadata accessor for Logger(0);
  sub_100005288(v37, (uint64_t)qword_1002A89C0);
  swift_bridgeObjectRetain_n(a3, 2);
  v8 = a1;
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v9, v10))
  {
    type = v10;
    v11 = swift_slowAlloc(22, -1);
    v36 = swift_slowAlloc(64, -1);
    v39 = v36;
    *(_DWORD *)v11 = 136315394;
    swift_bridgeObjectRetain(a3);
    v38 = sub_1001DEF4C(a2, a3, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39);
    swift_bridgeObjectRelease_n(a3, 3);
    *(_WORD *)(v11 + 12) = 2080;
    v12 = objc_msgSend(v8, "recordName");
    v13 = a4;
    v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
    v15 = a2;
    v17 = v16;

    v18 = v14;
    a4 = v13;
    v38 = sub_1001DEF4C(v18, v17, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39);

    v19 = v17;
    a2 = v15;
    swift_bridgeObjectRelease(v19);
    _os_log_impl((void *)&_mh_execute_header, v9, type, "Deleting record %s %s", (uint8_t *)v11, 0x16u);
    swift_arrayDestroy(v36, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v36, -1, -1);
    swift_slowDealloc(v11, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a3, 2);
  }
  v20 = (_QWORD *)swift_allocObject(&unk_1002686D0, 40, 7);
  v20[2] = a2;
  v20[3] = a3;
  v20[4] = v8;
  if (a2 == 0xD000000000000017 && a3 == 0x8000000100209FC0
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000017, 0x8000000100209FC0, a2, a3, 0) & 1) != 0)
  {
    swift_bridgeObjectRetain(a3);
    sub_100127E98(v8, a4 & 1, (uint64_t)sub_10012A2C4, (uint64_t)v20);
LABEL_10:
    swift_release(v20);
    return 0;
  }
  if (a2 == 0x6169646F74737543 && a3 == 0xEF64726F6365526ELL
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x6169646F74737543, 0xEF64726F6365526ELL, a2, a3, 0) & 1) != 0)
  {
    swift_bridgeObjectRetain(a3);
    sub_1001280EC(v8, a4 & 1, (uint64_t)sub_10012A2C4, (uint64_t)v20);
    goto LABEL_10;
  }
  if (a2 == 0xD00000000000001BLL && a3 == 0x800000010020A490
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001BLL, 0x800000010020A490, a2, a3, 0) & 1) != 0)
  {
    swift_bridgeObjectRetain(a3);
    sub_100128348(v8, a4 & 1, (uint64_t)sub_10012A2C4, (uint64_t)v20);
    goto LABEL_10;
  }
  if (a2 == 0xD000000000000015 && a3 == 0x800000010020A450
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015, 0x800000010020A450, a2, a3, 0) & 1) != 0)
  {
    swift_bridgeObjectRetain(a3);
    sub_10012859C(v8, a4 & 1, (uint64_t)sub_10012A2C4, (uint64_t)v20);
    goto LABEL_10;
  }
  if (a2 == 0xD00000000000001BLL && a3 == 0x800000010020A4B0
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001BLL, 0x800000010020A4B0, a2, a3, 0) & 1) != 0)
  {
    swift_bridgeObjectRetain(a3);
    sub_1001287F0(v8, a4 & 1, (uint64_t)sub_10012A2C4, (uint64_t)v20);
    goto LABEL_10;
  }
  if (a2 == 0xD000000000000020 && a3 == 0x80000001002094E0
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000020, 0x80000001002094E0, a2, a3, 0) & 1) != 0)
  {
    swift_bridgeObjectRetain(a3);
    sub_100128A44(v8, a4 & 1, (uint64_t)sub_10012A2C4, (uint64_t)v20);
    goto LABEL_10;
  }
  if (a2 == 0xD000000000000024 && a3 == 0x800000010020A4D0
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000024, 0x800000010020A4D0, a2, a3, 0) & 1) != 0)
  {
    swift_bridgeObjectRetain(a3);
    sub_100128C98(v8, a4 & 1, (uint64_t)sub_10012A2C4, (uint64_t)v20);
    goto LABEL_10;
  }
  if (a2 == 0xD00000000000001FLL && a3 == 0x800000010020A500
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001FLL, 0x800000010020A500, a2, a3, 0) & 1) != 0)
  {
    swift_bridgeObjectRetain(a3);
    sub_100128EEC(v8, a4 & 1, (uint64_t)sub_10012A2C4, (uint64_t)v20);
    goto LABEL_10;
  }
  v22 = a3;
  v23 = a2;
  if (a2 == 0x797469746E656449 && v22 == 0xEE0064726F636552
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0x797469746E656449, 0xEE0064726F636552, a2, v22, 0) & 1) != 0)
  {
    swift_bridgeObjectRetain(v22);
    sub_100129140(v8, a4 & 1, (uint64_t)sub_10012A2C4, (uint64_t)v20);
    goto LABEL_10;
  }
  if (a2 == 0xD000000000000015 && v22 == 0x800000010020A520
    || (_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015, 0x800000010020A520, a2, v22, 0) & 1) != 0)
  {
    swift_bridgeObjectRetain(v22);
    sub_10012939C(v8, a4 & 1, (uint64_t)sub_10012A2C4, (uint64_t)v20);
    goto LABEL_10;
  }
  v24 = qword_10028ADB8;
  swift_bridgeObjectRetain(v22);
  v25 = v8;
  if (v24 != -1)
    swift_once(&qword_10028ADB8, sub_100046CE4);
  sub_100005288(v37, (uint64_t)qword_1002A89A8);
  v26 = swift_bridgeObjectRetain_n(v22, 2);
  v27 = Logger.logObject.getter(v26);
  v28 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v27, v28))
  {
    v29 = (uint8_t *)swift_slowAlloc(12, -1);
    v30 = swift_slowAlloc(32, -1);
    v39 = v30;
    *(_DWORD *)v29 = 136315138;
    swift_bridgeObjectRetain(v22);
    v38 = sub_1001DEF4C(v23, v22, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39);
    swift_bridgeObjectRelease_n(v22, 3);
    _os_log_impl((void *)&_mh_execute_header, v27, v28, "Unrecognized record type cannot be deleted: %s)", v29, 0xCu);
    swift_arrayDestroy(v30, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v30, -1, -1);
    swift_slowDealloc(v29, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v22, 2);
  }
  type metadata accessor for AACustodianError(0);
  v32 = v31;
  v38 = -7003;
  v33 = sub_100005014((uint64_t)&_swiftEmptyArrayStorage);
  v34 = sub_100005150((unint64_t *)&qword_10028B640, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianError, (uint64_t)&unk_100218378);
  _BridgedStoredNSError.init(_:userInfo:)(&v39, &v38, v33, v32, v34);
  swift_release(v20);
  return v39;
}

void sub_100129E84(void *a1, uint64_t a2)
{
  id v4;
  void *v5;
  id v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  _QWORD *v21;
  id v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  unint64_t *v26;
  char v27;
  uint64_t v28;
  unint64_t v29;
  id v30;
  uint64_t v31;
  id v32;
  id v33;
  uint64_t v34;
  void *v35;

  v4 = objc_msgSend(a1, "container");
  if (v4)
  {
    v5 = v4;
    v6 = objc_msgSend(v4, "containerID");

    v7 = objc_msgSend(v6, "containerIdentifier");
    v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
    v10 = v9;

    if (qword_10028AF58 != -1)
      swift_once(&qword_10028AF58, sub_1001FE1C4);
    v11 = sub_1001FD394(v8, v10, (_QWORD *)qword_1002A8CF0);
    swift_bridgeObjectRelease(v10);
    if (qword_10028ADC0 != -1)
      swift_once(&qword_10028ADC0, sub_100046D04);
    v12 = type metadata accessor for Logger(0);
    sub_100005288(v12, (uint64_t)qword_1002A89C0);
    swift_bridgeObjectRetain(a2);
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v16 = 134217984;
      v33 = *(id *)(a2 + 16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, &v34);
      swift_bridgeObjectRelease(a2);
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "CloudKitSyncManager processing %ld deleted records", v16, 0xCu);
      swift_slowDealloc(v16, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease(a2);
    }
    v24 = &_swiftEmptySetSingleton;
    v35 = &_swiftEmptySetSingleton;
    v25 = *(_QWORD *)(a2 + 16);
    if (v25)
    {
      swift_bridgeObjectRetain(a2);
      v26 = (unint64_t *)(a2 + 48);
      v27 = v11 & 1;
      do
      {
        v28 = *(v26 - 1);
        v29 = *v26;
        v30 = (id)*(v26 - 2);
        swift_bridgeObjectRetain(v29);
        v31 = sub_1001295F0(v30, v28, v29, v27);
        swift_errorRelease(v31);
        if (v31)
        {
          swift_bridgeObjectRelease(v29);

        }
        else
        {
          sub_1001F3A5C((uint64_t *)&v33, v28, v29);

          swift_bridgeObjectRelease(v34);
        }
        v26 += 3;
        --v25;
      }
      while (v25);
      swift_bridgeObjectRelease(a2);
      v24 = v35;
    }
    swift_bridgeObjectRelease(v24);
  }
  else
  {
    if (qword_10028ADB8 != -1)
      swift_once(&qword_10028ADB8, sub_100046CE4);
    v17 = type metadata accessor for Logger(0);
    sub_100005288(v17, (uint64_t)qword_1002A89A8);
    v32 = a1;
    v18 = Logger.logObject.getter(v32);
    v19 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v18, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc(12, -1);
      v21 = (_QWORD *)swift_slowAlloc(8, -1);
      *(_DWORD *)v20 = 138412290;
      v33 = v32;
      v22 = v32;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, &v34);
      *v21 = v32;

      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Failed to obtain containerID from database for recordsDeleted: %@", v20, 0xCu);
      v23 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v21, 1, v23);
      swift_slowDealloc(v21, -1, -1);
      swift_slowDealloc(v20, -1, -1);

    }
    else
    {

    }
  }
}

uint64_t sub_10012A298()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));

  return swift_deallocObject(v0, 40, 7);
}

void sub_10012A2C4(uint64_t a1, char a2)
{
  uint64_t v2;

  sub_100122AC0(a1, a2 & 1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(void **)(v2 + 32));
}

uint64_t sub_10012A2D8(uint64_t a1)
{
  return sub_10012A784(a1, (uint64_t)type metadata accessor for CustodianshipInfoRecord, (uint64_t)&unk_10028D640, (uint64_t)&unk_1002929A0, (uint64_t (*)(uint64_t, _QWORD, _QWORD, unint64_t, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t))sub_1001242E4);
}

uint64_t sub_10012A300()
{
  return sub_10012A840(&qword_1002929A0, type metadata accessor for CustodianshipInfoRecord, (unint64_t *)&unk_100291860, (uint64_t)&unk_10021CBA8);
}

void *sub_10012A324(char a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if ((a1 & 1) != 0)
  {
    if (qword_10028AF38 != -1)
      swift_once(&qword_10028AF38, sub_1001FDEA4);
    swift_bridgeObjectRetain(qword_1002A8CD0);
    sub_1001FD0E4(v2);
    if ((a1 & 2) == 0)
    {
LABEL_3:
      if ((a1 & 4) == 0)
        return &_swiftEmptyArrayStorage;
      goto LABEL_11;
    }
  }
  else if ((a1 & 2) == 0)
  {
    goto LABEL_3;
  }
  if (qword_10028AF40 != -1)
    swift_once(&qword_10028AF40, sub_1001FDF60);
  swift_bridgeObjectRetain(qword_1002A8CD8);
  sub_1001FD0E4(v3);
  if ((a1 & 4) != 0)
  {
LABEL_11:
    if (qword_10028AF48 != -1)
      swift_once(&qword_10028AF48, sub_1001FE01C);
    swift_bridgeObjectRetain(qword_1002A8CE0);
    sub_1001FD0E4(v4);
  }
  return &_swiftEmptyArrayStorage;
}

uint64_t sub_10012A428(uint64_t a1)
{
  return sub_10012A634(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, unint64_t, _QWORD, _QWORD))sub_100124F8C);
}

uint64_t sub_10012A438()
{
  return sub_10012A840(&qword_1002929A8, type metadata accessor for CustodianRecord, (unint64_t *)&unk_10028F090, (uint64_t)&unk_10021B188);
}

uint64_t sub_10012A460(uint64_t a1)
{
  return sub_10012A784(a1, (uint64_t)type metadata accessor for CustodianRecoveryInfoRecord, (uint64_t)&unk_10028D5E0, (uint64_t)&unk_1002929B0, (uint64_t (*)(uint64_t, _QWORD, _QWORD, unint64_t, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t))sub_100124938);
}

uint64_t sub_10012A488()
{
  return sub_10012A840(&qword_1002929B0, type metadata accessor for CustodianRecoveryInfoRecord, (unint64_t *)&unk_100299960, (uint64_t)&unk_100222ABC);
}

uint64_t sub_10012A4B0(uint64_t a1)
{
  return sub_10012A784(a1, (uint64_t)type metadata accessor for CustodianHealthRecord, (uint64_t)&unk_10028D5B0, (uint64_t)&unk_1002929B8, (uint64_t (*)(uint64_t, _QWORD, _QWORD, unint64_t, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t))sub_1001242E4);
}

uint64_t sub_10012A4D8()
{
  return sub_10012A840(&qword_1002929B8, type metadata accessor for CustodianHealthRecord, (unint64_t *)&unk_100294B50, (uint64_t)&unk_10021ED1C);
}

uint64_t sub_10012A500(uint64_t a1)
{
  return sub_10012A634(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, unint64_t, _QWORD, _QWORD))sub_100123C88);
}

uint64_t sub_10012A510()
{
  return sub_10012A840(&qword_100290E08, type metadata accessor for InheritanceInvitationRecord, (unint64_t *)&unk_100299C60, (uint64_t)&unk_100222F00);
}

uint64_t sub_10012A538(uint64_t a1)
{
  return sub_10012A784(a1, (uint64_t)type metadata accessor for BeneficiaryInfoRecord, (uint64_t)&unk_10028D650, (uint64_t)&unk_1002929C0, (uint64_t (*)(uint64_t, _QWORD, _QWORD, unint64_t, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t))sub_100124938);
}

uint64_t sub_10012A560()
{
  return sub_10012A840(&qword_1002929C0, type metadata accessor for BeneficiaryInfoRecord, &qword_10028BB80, (uint64_t)&unk_100218F08);
}

uint64_t sub_10012A588(uint64_t a1)
{
  return sub_10012A784(a1, (uint64_t)type metadata accessor for BeneficiaryManifestRecord, (uint64_t)&unk_1002929D0, (uint64_t)&unk_1002929C8, (uint64_t (*)(uint64_t, _QWORD, _QWORD, unint64_t, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t))sub_100123634);
}

uint64_t sub_10012A5B0()
{
  return sub_10012A840(&qword_1002929C8, type metadata accessor for BeneficiaryManifestRecord, (unint64_t *)&unk_10028DA70, (uint64_t)&unk_10021A5F8);
}

uint64_t sub_10012A5D8(uint64_t a1)
{
  return sub_10012A784(a1, (uint64_t)type metadata accessor for BenefactorInfoRecord, (uint64_t)&unk_10028D648, (uint64_t)&unk_1002929D8, (uint64_t (*)(uint64_t, _QWORD, _QWORD, unint64_t, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t))sub_1001242E4);
}

uint64_t sub_10012A600()
{
  return sub_10012A840(&qword_1002929D8, type metadata accessor for BenefactorInfoRecord, (unint64_t *)&unk_100294E90, (uint64_t)&unk_10021F290);
}

uint64_t sub_10012A628(uint64_t a1)
{
  return sub_10012A634(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, unint64_t, _QWORD, _QWORD))sub_100122FD8);
}

uint64_t sub_10012A634(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD, _QWORD, unint64_t, _QWORD, _QWORD))
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;

  v4 = *(_QWORD *)(type metadata accessor for URL(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = (_QWORD *)(v2 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  return a2(a1, *(unsigned __int8 *)(v2 + 16), *(_QWORD *)(v2 + 24), v2 + v5, *v6, v6[1]);
}

uint64_t sub_10012A6A4()
{
  return sub_10012A840(&qword_1002929E0, type metadata accessor for IdentityRecord, (unint64_t *)&unk_10028DBF0, (uint64_t)&unk_10021A830);
}

uint64_t sub_10012A6CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for URL(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release(*(_QWORD *)(v0 + 24));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v6 + 8));
  return swift_deallocObject(v0, v6 + 16, v5);
}

uint64_t sub_10012A760(uint64_t a1)
{
  return sub_10012A784(a1, (uint64_t)type metadata accessor for IdentityServiceRecord, (uint64_t)&unk_10028EA60, (uint64_t)&unk_1002929E8, (uint64_t (*)(uint64_t, _QWORD, _QWORD, unint64_t, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t))sub_100123634);
}

uint64_t sub_10012A784(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, _QWORD, _QWORD, unint64_t, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t))
{
  uint64_t v5;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;

  v11 = *(_QWORD *)(type metadata accessor for URL(0) - 8);
  v12 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  v13 = (_QWORD *)(v5 + ((*(_QWORD *)(v11 + 64) + v12 + 7) & 0xFFFFFFFFFFFFFFF8));
  return a5(a1, *(unsigned __int8 *)(v5 + 16), *(_QWORD *)(v5 + 24), v5 + v12, *v13, v13[1], a2, a3, a4);
}

uint64_t sub_10012A81C()
{
  return sub_10012A840(&qword_1002929E8, type metadata accessor for IdentityServiceRecord, (unint64_t *)&unk_100291AD0, (uint64_t)&unk_10021CF08);
}

uint64_t sub_10012A840(uint64_t *a1, uint64_t (*a2)(uint64_t), unint64_t *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v9 = *(_QWORD *)(type metadata accessor for URL(0) - 8);
  v10 = (*(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v11 = (*(_QWORD *)(v9 + 64) + v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_100125870(v4 + v10, *(void (**)(char *))(v4 + v11), *(_QWORD *)(v4 + v11 + 8), *(_QWORD *)(v4 + ((v11 + 23) & 0xFFFFFFFFFFFFF8)), a1, a2, a3, a4);
}

uint64_t sub_10012A8CC()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);

  v1 = (int *)type metadata accessor for IdentityServiceRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  v7 = v0 + v4;
  v8 = type metadata accessor for UUID(0);
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8);
  v9(v7, v8);
  v9(v7 + v1[5], v8);
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[6] + 8));
  sub_10000F494(*(_QWORD *)(v7 + v1[7]), *(_QWORD *)(v7 + v1[7] + 8));
  return swift_deallocObject(v0, v5, v6);
}

void sub_10012A984(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for IdentityServiceRecord(0) - 8) + 80);
  sub_100121248(a1, v1 + ((v3 + 16) & ~v3), type metadata accessor for IdentityServiceRecord, &qword_10028D628, 0xD000000000000015, 0x800000010020A520);
}

uint64_t sub_10012A9EC()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t *v9;
  unint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  unint64_t v14;

  v1 = (int *)type metadata accessor for IdentityRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v0 + v4;
  v7 = type metadata accessor for UUID(0);
  v8 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8);
  v8(v0 + v4, v7);
  v8(v0 + v4 + v1[5], v7);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[7] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[8] + 8));
  v9 = (uint64_t *)(v0 + v4 + v1[9]);
  v10 = v9[1];
  if (v10 >> 60 != 15)
    sub_10000F494(*v9, v10);
  v11 = (uint64_t *)(v6 + v1[10]);
  v12 = v11[1];
  if (v12 >> 60 != 15)
    sub_10000F494(*v11, v12);
  v13 = (uint64_t *)(v6 + v1[11]);
  v14 = v13[1];
  if (v14 >> 60 != 15)
    sub_10000F494(*v13, v14);

  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[14] + 8));
  sub_10000F494(*(_QWORD *)(v6 + v1[15]), *(_QWORD *)(v6 + v1[15] + 8));
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

void sub_10012AB4C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for IdentityRecord(0) - 8) + 80);
  sub_100121248(a1, v1 + ((v3 + 16) & ~v3), type metadata accessor for IdentityRecord, &qword_10028D618, 0x797469746E656449, 0xEE0064726F636552);
}

uint64_t sub_10012ABBC()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;

  v1 = (int *)type metadata accessor for InheritanceHealthRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  v7 = v0 + v4;
  v8 = type metadata accessor for UUID(0);
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8);
  v9(v7, v8);
  v10 = v7 + v1[5];
  v11 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  sub_10000F494(*(_QWORD *)(v7 + v1[6]), *(_QWORD *)(v7 + v1[6] + 8));
  v9(v7 + v1[7], v8);
  sub_10000F494(*(_QWORD *)(v7 + v1[8]), *(_QWORD *)(v7 + v1[8] + 8));
  return swift_deallocObject(v0, v5, v6);
}

void sub_10012AC98(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for InheritanceHealthRecord(0) - 8) + 80);
  sub_100121714(a1, v1 + ((v3 + 16) & ~v3), type metadata accessor for InheritanceHealthRecord, (uint64_t *)&unk_100295390, 0xD000000000000017, 0x800000010020A430);
}

uint64_t sub_10012AD00()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);

  v1 = (int *)type metadata accessor for BenefactorInfoRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  v7 = v0 + v4;
  v8 = type metadata accessor for UUID(0);
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8);
  v9(v7, v8);
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[5] + 8));
  v9(v7 + v1[7], v8);
  sub_10000F494(*(_QWORD *)(v7 + v1[8]), *(_QWORD *)(v7 + v1[8] + 8));
  return swift_deallocObject(v0, v5, v6);
}

void sub_10012ADB8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for BenefactorInfoRecord(0) - 8) + 80);
  sub_100121714(a1, v1 + ((v3 + 16) & ~v3), type metadata accessor for BenefactorInfoRecord, (uint64_t *)&unk_10028FA40, 0xD000000000000014, 0x800000010020A560);
}

uint64_t sub_10012AE20()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);

  v1 = (int *)type metadata accessor for BeneficiaryManifestRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  v7 = v0 + v4;
  v8 = type metadata accessor for UUID(0);
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8);
  v9(v7, v8);
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[5]));
  v9(v7 + v1[6], v8);
  sub_10000F494(*(_QWORD *)(v7 + v1[7]), *(_QWORD *)(v7 + v1[7] + 8));
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10012AED4(uint64_t a1)
{
  return sub_10012B114(a1, type metadata accessor for BeneficiaryManifestRecord, (uint64_t (*)(uint64_t, uint64_t))sub_100121BF0);
}

uint64_t sub_10012AEE8()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;

  v1 = (int *)type metadata accessor for BeneficiaryInfoRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v0 + v4;
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v0 + v4, v7);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[5] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[6] + 8));
  sub_10000F494(*(_QWORD *)(v6 + v1[7]), *(_QWORD *)(v6 + v1[7] + 8));
  v9(v0 + v4 + v1[8], v7);
  sub_10000F494(*(_QWORD *)(v6 + v1[9]), *(_QWORD *)(v6 + v1[9] + 8));
  v10 = v0 + v4 + v1[11];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v10, 1, v7))
    v9(v10, v7);
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[12] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[14] + 8));
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_10012B014(uint64_t a1)
{
  return sub_10012B114(a1, type metadata accessor for BeneficiaryInfoRecord, (uint64_t (*)(uint64_t, uint64_t))sub_1001220E0);
}

uint64_t sub_10012B028()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);

  v1 = (int *)type metadata accessor for InheritanceInvitationRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  v7 = v0 + v4;
  v8 = type metadata accessor for UUID(0);
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8);
  v9(v7, v8);
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[5] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[7] + 8));
  v9(v7 + v1[9], v8);
  sub_10000F494(*(_QWORD *)(v7 + v1[10]), *(_QWORD *)(v7 + v1[10] + 8));
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10012B100(uint64_t a1)
{
  return sub_10012B114(a1, type metadata accessor for InheritanceInvitationRecord, (uint64_t (*)(uint64_t, uint64_t))sub_1001225D0);
}

uint64_t sub_10012B114(uint64_t a1, uint64_t (*a2)(_QWORD), uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v3;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(a2(0) - 8) + 80);
  return a3(a1, v3 + ((v5 + 16) & ~v5));
}

uint64_t sub_10012B160()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  unint64_t v11;

  v1 = (int *)type metadata accessor for CustodianHealthRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = type metadata accessor for UUID(0);
  v7 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8);
  v7(v0 + v4, v6);
  v7(v0 + v4 + v1[5], v6);
  v8 = v0 + v4 + v1[6];
  v9 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  v10 = (uint64_t *)(v0 + v4 + v1[7]);
  v11 = v10[1];
  if (v11 >> 60 != 15)
    sub_10000F494(*v10, v11);
  sub_10000F494(*(_QWORD *)(v0 + v4 + v1[8]), *(_QWORD *)(v0 + v4 + v1[8] + 8));
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

void sub_10012B24C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for CustodianHealthRecord(0) - 8) + 80);
  sub_100121248(a1, v1 + ((v3 + 16) & ~v3), type metadata accessor for CustodianHealthRecord, &qword_10028D5B8, 0xD000000000000015, 0x800000010020A450);
}

uint64_t sub_10012B2B4()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;

  v1 = (int *)type metadata accessor for CustodianRecoveryInfoRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v0 + v4;
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v0 + v4, v7);
  v9(v0 + v4 + v1[5], v7);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[6] + 8));
  sub_10000F494(*(_QWORD *)(v6 + v1[7]), *(_QWORD *)(v6 + v1[7] + 8));
  v10 = (uint64_t *)(v0 + v4 + v1[8]);
  v11 = v10[1];
  if (v11 >> 60 != 15)
    sub_10000F494(*v10, v11);
  sub_10000F494(*(_QWORD *)(v6 + v1[9]), *(_QWORD *)(v6 + v1[9] + 8));
  v12 = v6 + v1[11];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v12, 1, v7))
    v9(v12, v7);
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[12] + 8));
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

void sub_10012B3E0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for CustodianRecoveryInfoRecord(0) - 8) + 80);
  sub_100121248(a1, v1 + ((v3 + 16) & ~v3), type metadata accessor for CustodianRecoveryInfoRecord, &qword_100293AB0, 0xD00000000000001BLL, 0x800000010020A490);
}

uint64_t sub_10012B448()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;

  v1 = (int *)type metadata accessor for CustodianRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v0 + v4;
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v0 + v4, v7);
  v9(v0 + v4 + v1[5], v7);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[7] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[8] + 8));
  v10 = (uint64_t *)(v0 + v4 + v1[10]);
  v11 = v10[1];
  if (v11 >> 60 != 15)
    sub_10000F494(*v10, v11);
  sub_10000F494(*(_QWORD *)(v6 + v1[11]), *(_QWORD *)(v6 + v1[11] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[13] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[14] + 8));
  v12 = v6 + v1[16];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v12, 1, v7))
    v9(v12, v7);
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

void sub_10012B58C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for CustodianRecord(0) - 8) + 80);
  sub_100121248(a1, v1 + ((v3 + 16) & ~v3), type metadata accessor for CustodianRecord, &qword_10028D5D0, 0x6169646F74737543, 0xEF64726F6365526ELL);
}

uint64_t sub_10012B5FC()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);

  v1 = (int *)type metadata accessor for CustodianshipInfoRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  v7 = v0 + v4;
  v8 = type metadata accessor for UUID(0);
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8);
  v9(v7, v8);
  v9(v7 + v1[5], v8);
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[6] + 8));
  sub_10000F494(*(_QWORD *)(v7 + v1[8]), *(_QWORD *)(v7 + v1[8] + 8));
  return swift_deallocObject(v0, v5, v6);
}

void sub_10012B6B4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for CustodianshipInfoRecord(0) - 8) + 80);
  sub_100121248(a1, v1 + ((v3 + 16) & ~v3), type metadata accessor for CustodianshipInfoRecord, &qword_10028C450, 0xD000000000000017, 0x8000000100209FC0);
}

uint64_t sub_10012B71C()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10012B740()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10012B774()
{
  uint64_t *v0;

  return sub_100120CCC(v0[2], v0[3], v0[4], v0[5]);
}

uint64_t sub_10012B780()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));

  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 56, 7);
}

void sub_10012B7BC(uint64_t a1)
{
  uint64_t v1;

  sub_10012058C(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(NSObject **)(v1 + 48));
}

uint64_t sub_10012B7CC()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_bridgeObjectRelease(v0[4]);
  swift_errorRelease(v0[5]);
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10012B800()
{
  uint64_t *v0;

  return sub_100120C14(v0[2], v0[3], v0[4], v0[5]);
}

uint64_t sub_10012B80C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10012B838()
{
  uint64_t v0;

  return sub_100120EC0(*(_QWORD *)(v0 + 16), *(uint64_t (**)(BOOL))(v0 + 24));
}

uint64_t sub_10012B844()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10012B868(char a1)
{
  uint64_t v1;

  return sub_10011F004(a1, *(uint64_t (**)(_QWORD))(v1 + 16));
}

uint64_t sub_10012B870()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for Date(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 50) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

void sub_10012B8EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int16 v3;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for Date(0) - 8) + 80);
  v2 = (v1 + 50) & ~v1;
  if (*(_BYTE *)(v0 + 49))
    v3 = 256;
  else
    v3 = 0;
  sub_10011F12C(*(_QWORD **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), v3 | *(unsigned __int8 *)(v0 + 48), v0 + v2);
}

uint64_t sub_10012B938()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10012B948(unsigned __int8 *a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD))(v1 + 16))(*a1);
}

uint64_t sub_10012B96C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_10012B980(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  __int16 v7;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for Date(0) - 8) + 80);
  v6 = (v5 + 48) & ~v5;
  if (*(_BYTE *)(v2 + 33))
    v7 = 256;
  else
    v7 = 0;
  return sub_10011F684(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), v7 | *(unsigned __int8 *)(v2 + 32), *(_QWORD *)(v2 + 40), v2 + v6);
}

uint64_t sub_10012B9EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for Date(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10012BA68(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for Date(0) - 8) + 80);
  return sub_10011F9A4(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), v2 + ((v5 + 32) & ~v5));
}

uint64_t sub_10012BABC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for Date(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 48) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 40));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

void sub_10012BB38()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for Date(0) - 8) + 80);
  sub_10011FB6C(*(_QWORD **)(v0 + 16), *(_BYTE **)(v0 + 24), *(void (**)(uint64_t))(v0 + 32), *(_QWORD *)(v0 + 40), v0 + ((v1 + 48) & ~v1));
}

uint64_t sub_10012BB6C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10012BB7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for Date(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

void sub_10012BBF8(char a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for Date(0) - 8) + 80);
  sub_10011F7A0(a1, *(_QWORD *)(v1 + 16), *(void (**)(uint64_t))(v1 + 24), *(_QWORD *)(v1 + 32), v1 + ((v3 + 40) & ~v3));
}

uint64_t storeEnumTagSinglePayload for CloudSyncType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10012BC88 + 4 * byte_10021D585[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10012BCBC + 4 * byte_10021D580[v4]))();
}

uint64_t sub_10012BCBC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10012BCC4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10012BCCCLL);
  return result;
}

uint64_t sub_10012BCD8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10012BCE0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_10012BCE4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10012BCEC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CloudSyncType()
{
  return &type metadata for CloudSyncType;
}

unint64_t sub_10012BD0C()
{
  unint64_t result;

  result = qword_100292A00;
  if (!qword_100292A00)
  {
    result = swift_getWitnessTable(&unk_10021D6C0, &type metadata for CloudSyncType);
    atomic_store(result, (unint64_t *)&qword_100292A00);
  }
  return result;
}

NSValue_optional __swiftcall value(for:)(Swift::String a1)
{
  _QWORD *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 *v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 *v29;
  unsigned int v30;
  uint64_t v31;
  char v32;
  _QWORD v33[2];
  Swift::String v34;
  NSValue_optional result;

  v34 = a1;
  v33[0] = 44;
  v33[1] = 0xE100000000000000;
  v4 = sub_10006B00C();
  v5 = (_QWORD *)StringProtocol.components<A>(separatedBy:)(v33, &type metadata for String, &type metadata for String, v4, v4);
  if (!v5[2])
  {
    __break(1u);
LABEL_62:
    swift_bridgeObjectRetain(v3);
    v10 = (uint64_t)sub_10012C5D0(v2, v3, 10);
    LOBYTE(v2) = v32;
    v5 = (_QWORD *)swift_bridgeObjectRelease(v3);
    goto LABEL_35;
  }
  v1 = v5;
  v2 = v5[4];
  v3 = v5[5];
  v6 = HIBYTE(v3) & 0xF;
  v7 = v2 & 0xFFFFFFFFFFFFLL;
  if ((v3 & 0x2000000000000000) != 0)
    v8 = HIBYTE(v3) & 0xF;
  else
    v8 = v2 & 0xFFFFFFFFFFFFLL;
  if (!v8)
    goto LABEL_43;
  if ((v3 & 0x1000000000000000) != 0)
    goto LABEL_62;
  if ((v3 & 0x2000000000000000) == 0)
  {
    if ((v2 & 0x1000000000000000) != 0)
      v9 = (unsigned __int8 *)((v3 & 0xFFFFFFFFFFFFFFFLL) + 32);
    else
      v9 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v5[4], v3);
    v5 = sub_10012C6B4(v9, v7, 10);
    v10 = (uint64_t)v5;
    LOBYTE(v2) = v7 & 1;
    goto LABEL_35;
  }
  v34._countAndFlagsBits = v5[4];
  v34._object = (void *)(v3 & 0xFFFFFFFFFFFFFFLL);
  if (v2 == 43)
  {
    if (!v6)
    {
LABEL_67:
      __break(1u);
      goto LABEL_68;
    }
    if (v6 == 1 || (BYTE1(v2) - 48) > 9u)
      goto LABEL_32;
    v10 = (BYTE1(v2) - 48);
    if (v6 == 2)
      goto LABEL_34;
    if ((BYTE2(v2) - 48) <= 9u)
    {
      v10 = 10 * (BYTE1(v2) - 48) + (BYTE2(v2) - 48);
      v11 = v6 - 3;
      if (v11)
      {
        v12 = (unsigned __int8 *)&v34._countAndFlagsBits + 3;
        while (1)
        {
          v13 = *v12 - 48;
          if (v13 > 9)
            goto LABEL_32;
          v14 = 10 * v10;
          if ((unsigned __int128)(v10 * (__int128)10) >> 64 != (10 * v10) >> 63)
            goto LABEL_32;
          v10 = v14 + v13;
          if (__OFADD__(v14, v13))
            goto LABEL_32;
          LOBYTE(v2) = 0;
          ++v12;
          if (!--v11)
            goto LABEL_35;
        }
      }
      goto LABEL_34;
    }
    goto LABEL_32;
  }
  if (v2 != 45)
  {
    if (v6 && (v2 - 48) <= 9u)
    {
      v10 = (v2 - 48);
      if (v6 == 1)
        goto LABEL_34;
      if ((BYTE1(v2) - 48) <= 9u)
      {
        v10 = 10 * (v2 - 48) + (BYTE1(v2) - 48);
        v24 = v6 - 2;
        if (v24)
        {
          v25 = (unsigned __int8 *)&v34._countAndFlagsBits + 2;
          while (1)
          {
            v26 = *v25 - 48;
            if (v26 > 9)
              goto LABEL_32;
            v27 = 10 * v10;
            if ((unsigned __int128)(v10 * (__int128)10) >> 64 != (10 * v10) >> 63)
              goto LABEL_32;
            v10 = v27 + v26;
            if (__OFADD__(v27, v26))
              goto LABEL_32;
            LOBYTE(v2) = 0;
            ++v25;
            if (!--v24)
              goto LABEL_35;
          }
        }
        goto LABEL_34;
      }
    }
LABEL_32:
    v10 = 0;
    LOBYTE(v2) = 1;
    goto LABEL_35;
  }
  if (!v6)
  {
LABEL_66:
    __break(1u);
    goto LABEL_67;
  }
  if (v6 == 1 || (BYTE1(v2) - 48) > 9u)
    goto LABEL_32;
  if (v6 != 2)
  {
    if ((BYTE2(v2) - 48) <= 9u)
    {
      v10 = -10 * (BYTE1(v2) - 48) - (BYTE2(v2) - 48);
      v28 = v6 - 3;
      if (v28)
      {
        v29 = (unsigned __int8 *)&v34._countAndFlagsBits + 3;
        while (1)
        {
          v30 = *v29 - 48;
          if (v30 > 9)
            goto LABEL_32;
          v31 = 10 * v10;
          if ((unsigned __int128)(v10 * (__int128)10) >> 64 != (10 * v10) >> 63)
            goto LABEL_32;
          v10 = v31 - v30;
          if (__OFSUB__(v31, v30))
            goto LABEL_32;
          LOBYTE(v2) = 0;
          ++v29;
          if (!--v28)
            goto LABEL_35;
        }
      }
LABEL_34:
      LOBYTE(v2) = 0;
      goto LABEL_35;
    }
    goto LABEL_32;
  }
  LOBYTE(v2) = 0;
  v10 = -(uint64_t)(BYTE1(v2) - 48);
LABEL_35:
  if ((v2 & 1) != 0)
    goto LABEL_43;
  if (v1[2] < 2uLL)
  {
    __break(1u);
    goto LABEL_65;
  }
  v15 = v1[6];
  v16 = v1[7];
  swift_bridgeObjectRetain(v16);
  v5 = (_QWORD *)sub_10012C1C0(v15, v16);
  if ((v7 & 1) != 0)
  {
LABEL_43:
    swift_bridgeObjectRelease(v1);
    goto LABEL_44;
  }
  if (v1[2] < 3uLL)
  {
LABEL_65:
    __break(1u);
    goto LABEL_66;
  }
  v17 = (uint64_t)v5;
  v18 = v1[8];
  v19 = v1[9];
  swift_bridgeObjectRetain(v19);
  v5 = (_QWORD *)sub_10012C1C0(v18, v19);
  if ((v7 & 1) != 0)
    goto LABEL_43;
  if (v1[2] < 4uLL)
  {
LABEL_68:
    __break(1u);
    goto LABEL_69;
  }
  v20 = (uint64_t)v5;
  v21 = v1[10];
  v22 = v1[11];
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRelease(v1);
  v23 = sub_10012C1C0(v21, v22);
  if ((v7 & 1) != 0)
  {
LABEL_44:
    v5 = 0;
    goto LABEL_69;
  }
  v5 = objc_msgSend((id)objc_opt_self(NSValue), "valueWithRect:", (double)v10, (double)v17, (double)v20, (double)v23);
LABEL_69:
  result.is_nil = v7;
  result.value.super.isa = (Class)v5;
  return result;
}

uint64_t sub_10012C1C0(uint64_t result, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  unsigned int v20;
  uint64_t v21;
  char v22;
  _QWORD v23[3];

  v3 = HIBYTE(a2) & 0xF;
  v4 = result & 0xFFFFFFFFFFFFLL;
  if ((a2 & 0x2000000000000000) != 0)
    v5 = v3;
  else
    v5 = result & 0xFFFFFFFFFFFFLL;
  if (!v5)
  {
    swift_bridgeObjectRelease(a2);
    return 0;
  }
  if ((a2 & 0x1000000000000000) == 0)
  {
    if ((a2 & 0x2000000000000000) == 0)
    {
      if ((result & 0x1000000000000000) != 0)
        v6 = (unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 32);
      else
        v6 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(result, a2);
      v7 = (uint64_t)sub_10012C6B4(v6, v4, 10);
      v9 = v8 & 1;
      goto LABEL_37;
    }
    v23[0] = result;
    v23[1] = a2 & 0xFFFFFFFFFFFFFFLL;
    if (result == 43)
    {
      if (!v3)
        goto LABEL_50;
      if (v3 == 1 || (BYTE1(result) - 48) > 9u)
        goto LABEL_34;
      v7 = (BYTE1(result) - 48);
      v14 = v3 - 2;
      if (v14)
      {
        v15 = (unsigned __int8 *)v23 + 2;
        while (1)
        {
          v16 = *v15 - 48;
          if (v16 > 9)
            goto LABEL_34;
          v17 = 10 * v7;
          if ((unsigned __int128)(v7 * (__int128)10) >> 64 != (10 * v7) >> 63)
            goto LABEL_34;
          v7 = v17 + v16;
          if (__OFADD__(v17, v16))
            goto LABEL_34;
          v9 = 0;
          ++v15;
          if (!--v14)
            goto LABEL_37;
        }
      }
    }
    else
    {
      if (result == 45)
      {
        if (v3)
        {
          if (v3 != 1 && (BYTE1(result) - 48) <= 9u)
          {
            v7 = -(uint64_t)(BYTE1(result) - 48);
            v10 = v3 - 2;
            if (v10)
            {
              v11 = (unsigned __int8 *)v23 + 2;
              while (1)
              {
                v12 = *v11 - 48;
                if (v12 > 9)
                  goto LABEL_34;
                v13 = 10 * v7;
                if ((unsigned __int128)(v7 * (__int128)10) >> 64 != (10 * v7) >> 63)
                  goto LABEL_34;
                v7 = v13 - v12;
                if (__OFSUB__(v13, v12))
                  goto LABEL_34;
                v9 = 0;
                ++v11;
                if (!--v10)
                  goto LABEL_37;
              }
            }
            goto LABEL_36;
          }
LABEL_34:
          v7 = 0;
          v9 = 1;
          goto LABEL_37;
        }
        __break(1u);
LABEL_50:
        __break(1u);
        return result;
      }
      if (!v3 || (result - 48) > 9u)
        goto LABEL_34;
      v7 = (result - 48);
      v18 = v3 - 1;
      if (v18)
      {
        v19 = (unsigned __int8 *)v23 + 1;
        while (1)
        {
          v20 = *v19 - 48;
          if (v20 > 9)
            goto LABEL_34;
          v21 = 10 * v7;
          if ((unsigned __int128)(v7 * (__int128)10) >> 64 != (10 * v7) >> 63)
            goto LABEL_34;
          v7 = v21 + v20;
          if (__OFADD__(v21, v20))
            goto LABEL_34;
          v9 = 0;
          ++v19;
          if (!--v18)
            goto LABEL_37;
        }
      }
    }
LABEL_36:
    v9 = 0;
    goto LABEL_37;
  }
  v7 = (uint64_t)sub_10012C5D0(result, a2, 10);
  v9 = v22;
LABEL_37:
  swift_bridgeObjectRelease(a2);
  if ((v9 & 1) != 0)
    return 0;
  else
    return v7;
}

Swift::String __swiftcall value(for:)(CGRect a1)
{
  double height;
  double width;
  double y;
  double x;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  Swift::String result;

  height = a1.size.height;
  width = a1.size.width;
  y = a1.origin.y;
  x = a1.origin.x;
  v5 = sub_1000080B4(&qword_100290F10);
  v6 = swift_allocObject(v5, 192, 7);
  *(_OWORD *)(v6 + 16) = xmmword_10021D6F0;
  if ((~*(_QWORD *)&x & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_15;
  }
  if (x <= -9.22337204e18)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (x >= 9.22337204e18)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  *(_QWORD *)(v6 + 56) = &type metadata for Int;
  *(_QWORD *)(v6 + 64) = &protocol witness table for Int;
  *(_QWORD *)(v6 + 32) = (uint64_t)x;
  if ((~*(_QWORD *)&y & 0x7FF0000000000000) == 0)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if (y <= -9.22337204e18)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (y >= 9.22337204e18)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  *(_QWORD *)(v6 + 96) = &type metadata for Int;
  *(_QWORD *)(v6 + 104) = &protocol witness table for Int;
  *(_QWORD *)(v6 + 72) = (uint64_t)y;
  if ((~*(_QWORD *)&width & 0x7FF0000000000000) == 0)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  if (width <= -9.22337204e18)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  if (width >= 9.22337204e18)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  *(_QWORD *)(v6 + 136) = &type metadata for Int;
  *(_QWORD *)(v6 + 144) = &protocol witness table for Int;
  *(_QWORD *)(v6 + 112) = (uint64_t)width;
  if ((~*(_QWORD *)&height & 0x7FF0000000000000) == 0)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  if (height <= -9.22337204e18)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  if (height >= 9.22337204e18)
  {
LABEL_25:
    __break(1u);
    goto _$s13appleaccountd5value3forSSSo6CGRectV_tF;
  }
  *(_QWORD *)(v6 + 176) = &type metadata for Int;
  *(_QWORD *)(v6 + 184) = &protocol witness table for Int;
  *(_QWORD *)(v6 + 152) = (uint64_t)height;
  v6 = String.init(format:_:)(0x2C756C252C756C25, 0xEF756C252C756C25, v6);
_$s13appleaccountd5value3forSSSo6CGRectV_tF:
  result._object = v7;
  result._countAndFlagsBits = v6;
  return result;
}

unsigned __int8 *sub_10012C5BC(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  return sub_10012C6B4(a1, a2, a3);
}

unsigned __int8 *sub_10012C5D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned __int8 *v13;
  uint64_t v15;
  uint64_t v16;

  v15 = a1;
  v16 = a2;
  v4 = swift_bridgeObjectRetain(a2);
  v5 = String.init<A>(_:)(&v15, &type metadata for String, &protocol witness table for String, &protocol witness table for String, v4);
  v7 = v5;
  v8 = v6;
  if ((v6 & 0x1000000000000000) == 0)
  {
    if ((v6 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    v10 = HIBYTE(v8) & 0xF;
    v15 = v7;
    v16 = v8 & 0xFFFFFFFFFFFFFFLL;
    v9 = (unsigned __int8 *)&v15;
    goto LABEL_7;
  }
  v7 = sub_10012C930(v5, v6);
  v12 = v11;
  swift_bridgeObjectRelease(v8);
  v8 = v12;
  if ((v12 & 0x2000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v7 & 0x1000000000000000) != 0)
  {
    v9 = (unsigned __int8 *)((v8 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v10 = v7 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v9 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v7, v8);
  }
LABEL_7:
  v13 = sub_10012C6B4(v9, v10, a3);
  swift_bridgeObjectRelease(v8);
  return v13;
}

unsigned __int8 *sub_10012C6B4(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  uint64_t v9;
  unsigned __int8 *i;
  unsigned int v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  unsigned __int8 *v18;
  unsigned int v19;
  char v20;
  uint64_t v21;
  unsigned __int8 v22;
  unsigned __int8 v23;
  unsigned __int8 v24;
  uint64_t v25;
  unsigned int v26;
  char v27;
  uint64_t v28;

  v3 = a2;
  v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        v5 = a2 - 1;
        if (a2 != 1)
        {
          v6 = a3 + 48;
          v7 = a3 + 55;
          v8 = a3 + 87;
          if (a3 > 10)
          {
            v6 = 58;
          }
          else
          {
            v8 = 97;
            v7 = 65;
          }
          if (result)
          {
            v9 = 0;
            for (i = result + 1; ; ++i)
            {
              v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  if (v11 < 0x61 || v11 >= v8)
                    return 0;
                  v12 = -87;
                }
                else
                {
                  v12 = -55;
                }
              }
              else
              {
                v12 = -48;
              }
              v13 = v9 * a3;
              if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63)
                return 0;
              v9 = v13 - (v11 + v12);
              if (__OFSUB__(v13, (v11 + v12)))
                return 0;
              if (!--v5)
                return (unsigned __int8 *)v9;
            }
          }
          return 0;
        }
        return 0;
      }
      __break(1u);
      goto LABEL_65;
    }
    if (a2)
    {
      v22 = a3 + 48;
      v23 = a3 + 55;
      v24 = a3 + 87;
      if (a3 > 10)
      {
        v22 = 58;
      }
      else
      {
        v24 = 97;
        v23 = 65;
      }
      if (result)
      {
        v25 = 0;
        do
        {
          v26 = *result;
          if (v26 < 0x30 || v26 >= v22)
          {
            if (v26 < 0x41 || v26 >= v23)
            {
              if (v26 < 0x61 || v26 >= v24)
                return 0;
              v27 = -87;
            }
            else
            {
              v27 = -55;
            }
          }
          else
          {
            v27 = -48;
          }
          v28 = v25 * a3;
          if ((unsigned __int128)(v25 * (__int128)a3) >> 64 != (v25 * a3) >> 63)
            return 0;
          v25 = v28 + (v26 + v27);
          if (__OFADD__(v28, (v26 + v27)))
            return 0;
          ++result;
          --v3;
        }
        while (v3);
        return (unsigned __int8 *)(v28 + (v26 + v27));
      }
      return 0;
    }
    return 0;
  }
  if (a2 < 1)
  {
LABEL_65:
    __break(1u);
    return result;
  }
  v14 = a2 - 1;
  if (a2 == 1)
    return 0;
  v15 = a3 + 48;
  v16 = a3 + 55;
  v17 = a3 + 87;
  if (a3 > 10)
  {
    v15 = 58;
  }
  else
  {
    v17 = 97;
    v16 = 65;
  }
  if (!result)
    return 0;
  v9 = 0;
  v18 = result + 1;
  do
  {
    v19 = *v18;
    if (v19 < 0x30 || v19 >= v15)
    {
      if (v19 < 0x41 || v19 >= v16)
      {
        if (v19 < 0x61 || v19 >= v17)
          return 0;
        v20 = -87;
      }
      else
      {
        v20 = -55;
      }
    }
    else
    {
      v20 = -48;
    }
    v21 = v9 * a3;
    if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63)
      return 0;
    v9 = v21 + (v19 + v20);
    if (__OFADD__(v21, (v19 + v20)))
      return 0;
    ++v18;
    --v14;
  }
  while (v14);
  return (unsigned __int8 *)v9;
}

uint64_t sub_10012C930(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v2 = a1;
  v3 = 7;
  if (((a2 >> 60) & ((a1 & 0x800000000000000) == 0)) != 0)
    v3 = 11;
  v4 = String.subscript.getter(15, v3 | (v2 << 16), a1, a2);
  v6 = v5;
  v9 = sub_10012C9AC(v4, v7, v8, v5);
  swift_bridgeObjectRelease(v6);
  return v9;
}

uint64_t sub_10012C9AC(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v5;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[5];

  v5 = a3;
  if ((a4 & 0x1000000000000000) != 0)
  {
    v12 = sub_10012CAF0(a1, a2, a3, a4);
    if (v12)
    {
      v9 = v12;
      v8 = (unint64_t)sub_1001DF3DC(v12, 0);
      v5 = sub_10012CBDC((unint64_t)v15, v8 + 32, v9, a1, a2, v5, a4);
      v13 = v15[3];
      swift_bridgeObjectRetain(a4);
      swift_bridgeObjectRelease(v13);
      if (v5 != v9)
      {
        __break(1u);
        goto LABEL_11;
      }
    }
    else
    {
      v8 = (unint64_t)_swiftEmptyArrayStorage;
    }
    v14 = static String._uncheckedFromUTF8(_:)(v8 + 32, *(_QWORD *)(v8 + 16));
    swift_release(v8);
    return v14;
  }
  else
  {
    v8 = a1 >> 16;
    v9 = a2 >> 16;
    if ((a4 & 0x2000000000000000) == 0)
    {
      if ((a3 & 0x1000000000000000) != 0)
      {
        v10 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
LABEL_5:
        v10 += v8;
        return static String._uncheckedFromUTF8(_:)(v10, v9 - v8);
      }
LABEL_11:
      v10 = _StringObject.sharedUTF8.getter(v5, a4);
      if (!v10)
        return static String._uncheckedFromUTF8(_:)(v10, v9 - v8);
      goto LABEL_5;
    }
    v15[0] = a3;
    v15[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    return static String._uncheckedFromUTF8(_:)((char *)v15 + v8, v9 - v8);
  }
}

unint64_t sub_10012CAF0(unint64_t result, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v7 = result;
  v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0)
    LOBYTE(v8) = 1;
  v9 = 4 << v8;
  if ((result & 0xC) == 4 << v8)
  {
    result = sub_1001B02C0(result, a3, a4);
    v7 = result;
  }
  if ((a2 & 0xC) == v9)
  {
    result = sub_1001B02C0(a2, a3, a4);
    a2 = result;
    if ((a4 & 0x1000000000000000) == 0)
      return (a2 >> 16) - (v7 >> 16);
  }
  else if ((a4 & 0x1000000000000000) == 0)
  {
    return (a2 >> 16) - (v7 >> 16);
  }
  v10 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0)
    v10 = a3 & 0xFFFFFFFFFFFFLL;
  if (v10 < v7 >> 16)
  {
    __break(1u);
  }
  else if (v10 >= a2 >> 16)
  {
    return String.UTF8View._foreignDistance(from:to:)(v7, a2, a3, a4);
  }
  __break(1u);
  return result;
}

unint64_t sub_10012CBDC(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v26;
  unint64_t v27;
  _QWORD v28[2];

  v9 = (_QWORD *)result;
  if (!a2)
    goto LABEL_5;
  if (!a3)
  {
    v12 = a4;
    v11 = 0;
    goto LABEL_33;
  }
  if (a3 < 0)
    goto LABEL_36;
  v10 = a5 >> 14;
  v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    v11 = 0;
    v12 = a4;
LABEL_33:
    *v9 = a4;
    v9[1] = a5;
    v9[2] = a6;
    v9[3] = a7;
    v9[4] = v12;
    return v11;
  }
  v11 = 0;
  v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000) == 0)
    LOBYTE(v14) = 1;
  v15 = 4 << v14;
  v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000) == 0)
    v16 = a6 & 0xFFFFFFFFFFFFLL;
  v23 = v16;
  v26 = a3 - 1;
  v12 = a4;
  while (1)
  {
    v17 = v12 & 0xC;
    result = v12;
    if (v17 == v15)
      result = sub_1001B02C0(v12, a6, a7);
    if (result >> 14 < v27 || result >> 14 >= v10)
      break;
    if ((a7 & 0x1000000000000000) != 0)
    {
      result = String.UTF8View._foreignSubscript(position:)();
      v19 = result;
      if (v17 != v15)
        goto LABEL_23;
    }
    else
    {
      v18 = result >> 16;
      if ((a7 & 0x2000000000000000) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        v19 = *((_BYTE *)v28 + v18);
        if (v17 != v15)
          goto LABEL_23;
      }
      else
      {
        result = v21;
        if ((a6 & 0x1000000000000000) == 0)
          result = _StringObject.sharedUTF8.getter(a6, a7);
        v19 = *(_BYTE *)(result + v18);
        if (v17 != v15)
        {
LABEL_23:
          if ((a7 & 0x1000000000000000) == 0)
            goto LABEL_24;
          goto LABEL_27;
        }
      }
    }
    result = sub_1001B02C0(v12, a6, a7);
    v12 = result;
    if ((a7 & 0x1000000000000000) == 0)
    {
LABEL_24:
      v12 = (v12 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_29;
    }
LABEL_27:
    if (v23 <= v12 >> 16)
      goto LABEL_35;
    v12 = String.UTF8View._foreignIndex(after:)(v12, a6, a7);
LABEL_29:
    *(_BYTE *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      v11 = a3;
      goto LABEL_33;
    }
    ++v11;
    if (v10 == v12 >> 14)
      goto LABEL_33;
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_10012CDEC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  unsigned int (*v26)(char *, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  int *v38;
  char *v39;
  void (*v40)(uint64_t, char *, uint64_t);
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  _QWORD *v59;
  void (*v61)(char *, uint64_t);
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void (*v69)(char *, char *, uint64_t);
  uint64_t v70;
  char *v71;
  char *v72;

  v6 = sub_1000080B4((uint64_t *)&unk_1002904F0);
  v8 = __chkstk_darwin(v6, v7);
  v10 = (char *)&v63 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8, v11);
  v13 = (char *)&v63 - v12;
  v14 = type metadata accessor for UUID(0);
  v15 = *(_QWORD *)(v14 - 8);
  v17 = __chkstk_darwin(v14, v16);
  v71 = (char *)&v63 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __chkstk_darwin(v17, v19);
  v72 = (char *)&v63 - v21;
  __chkstk_darwin(v20, v22);
  v24 = (char *)&v63 - v23;
  v25 = type metadata accessor for CustodianRecoveryData(0);
  sub_1000144EC((uint64_t)a2 + *(int *)(v25 + 28), (uint64_t)v13);
  v26 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48);
  if (v26(v13, 1, v14) == 1)
  {
    sub_100028388((uint64_t)a2, type metadata accessor for CustodianRecoveryData);
    sub_100028388(a1, type metadata accessor for CustodianRecoveryKeys);
    sub_100013AAC((uint64_t)v13);
  }
  else
  {
    v69 = *(void (**)(char *, char *, uint64_t))(v15 + 32);
    v69(v24, v13, v14);
    v27 = a2[3];
    if (v27)
    {
      v70 = a3;
      v28 = a2[2];
      swift_bridgeObjectRetain(v27);
      UUID.init(uuidString:)(v28, v27);
      swift_bridgeObjectRelease(v27);
      if (v26(v10, 1, v14) == 1)
      {
        sub_100028388((uint64_t)a2, type metadata accessor for CustodianRecoveryData);
        sub_100028388(a1, type metadata accessor for CustodianRecoveryKeys);
        (*(void (**)(char *, uint64_t))(v15 + 8))(v24, v14);
        sub_100013AAC((uint64_t)v10);
      }
      else
      {
        v29 = v72;
        v69(v72, v10, v14);
        v30 = a2[1];
        v31 = v70;
        v32 = (uint64_t *)a1;
        if (v30)
        {
          v33 = (uint64_t *)((char *)a2 + *(int *)(v25 + 32));
          v34 = v33[1];
          if (v34)
          {
            v35 = *a2;
            v67 = *v33;
            v68 = v35;
            swift_bridgeObjectRetain(v30);
            swift_bridgeObjectRetain(v34);
            v36 = v71;
            UUID.init()(v37);
            sub_100028388((uint64_t)a2, type metadata accessor for CustodianRecoveryData);
            v38 = (int *)type metadata accessor for CustodianRecoverySessionRecord(0);
            v39 = v24;
            v40 = (void (*)(uint64_t, char *, uint64_t))v69;
            v69((char *)(v31 + v38[5]), v39, v14);
            v40(v31 + v38[6], v72, v14);
            v41 = v32[2];
            v42 = v32;
            v43 = v32[3];
            v44 = *v42;
            v45 = v42[1];
            v63 = v41;
            v64 = v45;
            v72 = (char *)v42[4];
            v46 = v42[5];
            v65 = v44;
            v66 = v46;
            v47 = v31;
            v48 = type metadata accessor for CustodianRecoveryKeys(0);
            sub_10012DFF4((uint64_t)v42 + *(int *)(v48 + 28), v47 + v38[12]);
            v49 = (uint64_t *)((char *)v42 + *(int *)(v48 + 32));
            v50 = *v49;
            v51 = v49[1];
            v40(v47, v36, v14);
            v52 = (_QWORD *)(v47 + v38[7]);
            *v52 = v68;
            v52[1] = v30;
            v53 = (_QWORD *)(v47 + v38[8]);
            *v53 = v67;
            v53[1] = v34;
            v54 = (_QWORD *)(v47 + v38[9]);
            *v54 = v63;
            v54[1] = v43;
            v55 = (_QWORD *)(v47 + v38[10]);
            v56 = v64;
            *v55 = v65;
            v55[1] = v56;
            v57 = (_QWORD *)(v47 + v38[11]);
            v58 = v66;
            *v57 = v72;
            v57[1] = v58;
            v59 = (_QWORD *)(v47 + v38[13]);
            *v59 = v50;
            v59[1] = v51;
            return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, int *))(*((_QWORD *)v38 - 1) + 56))(v47, 0, 1, v38);
          }
          sub_100028388((uint64_t)a2, type metadata accessor for CustodianRecoveryData);
          sub_100028388(a1, type metadata accessor for CustodianRecoveryKeys);
          v61 = *(void (**)(char *, uint64_t))(v15 + 8);
          v61(v72, v14);
        }
        else
        {
          sub_100028388((uint64_t)a2, type metadata accessor for CustodianRecoveryData);
          sub_100028388(a1, type metadata accessor for CustodianRecoveryKeys);
          v61 = *(void (**)(char *, uint64_t))(v15 + 8);
          v61(v29, v14);
        }
        v61(v24, v14);
      }
      a3 = v70;
    }
    else
    {
      sub_100028388((uint64_t)a2, type metadata accessor for CustodianRecoveryData);
      sub_100028388(a1, type metadata accessor for CustodianRecoveryKeys);
      (*(void (**)(char *, uint64_t))(v15 + 8))(v24, v14);
    }
  }
  v62 = type metadata accessor for CustodianRecoverySessionRecord(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v62 - 8) + 56))(a3, 1, 1, v62);
}

uint64_t sub_10012D258(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10012D28C + 4 * byte_10021D700[a1]))(0x444964726F636572, 0xE800000000000000);
}

uint64_t sub_10012D28C()
{
  return 0x6169646F74737563;
}

uint64_t sub_10012D2AC()
{
  return 0x646F74737543746FLL;
}

uint64_t sub_10012D2D0()
{
  return 0x4449656B617073;
}

unint64_t sub_10012D2E8()
{
  return 0xD000000000000011;
}

uint64_t sub_10012D304()
{
  return 0x6E614872656E776FLL;
}

uint64_t sub_10012D324()
{
  return 0x737574617473;
}

uint64_t sub_10012D338()
{
  return 0x5264657070617277;
}

unint64_t sub_10012D354()
{
  return 0xD000000000000016;
}

uint64_t sub_10012D38C()
{
  return 0x5064657070617277;
}

uint64_t sub_10012D3AC()
{
  unsigned __int8 *v0;

  return sub_10012D258(*v0);
}

uint64_t sub_10012D3B4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10012EEA8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10012D3D8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10012DF6C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10012D400(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10012DF6C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10012D428@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  void (*v28)(void);
  char *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(void);
  char *v66;
  uint64_t v67;
  char *v68;
  _QWORD *v69;
  char *v70;
  _QWORD *v71;
  char *v72;
  uint64_t v73;
  char *v74;
  int *v75;
  uint64_t v76;
  __int128 v77;
  char v78;

  v67 = a2;
  v3 = sub_1000080B4((uint64_t *)&unk_1002904F0);
  __chkstk_darwin(v3, v4);
  v66 = (char *)&v63 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  v9 = __chkstk_darwin(v6, v8);
  v68 = (char *)&v63 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v9, v11);
  v14 = (uint64_t *)((char *)&v63 - v13);
  __chkstk_darwin(v12, v15);
  v69 = (uint64_t *)((char *)&v63 - v16);
  v17 = sub_1000080B4(&qword_100292A08);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17, v19);
  v21 = (char *)&v63 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for CustodianRecoverySessionRecord(0);
  v24 = __chkstk_darwin(v22, v23);
  v26 = (char *)&v63 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = *(int *)(v24 + 48);
  v76 = v7;
  v28 = *(void (**)(void))(v7 + 56);
  v72 = &v26[v27];
  v28();
  v74 = v26;
  v75 = (int *)v22;
  v29 = &v26[*(int *)(v22 + 52)];
  *(_QWORD *)v29 = 0;
  *((_QWORD *)v29 + 1) = 0;
  v70 = v29;
  v71 = a1;
  v30 = a1[3];
  v31 = a1[4];
  sub_10000732C(a1, v30);
  v32 = sub_10012DF6C();
  v33 = v73;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for CustodianRecoverySessionRecord.CodingKeys, &type metadata for CustodianRecoverySessionRecord.CodingKeys, v32, v30, v31);
  if (v33)
  {
    v36 = v70;
    sub_100006F58(v71);
    sub_100013AAC((uint64_t)v72);
    return swift_bridgeObjectRelease(*((_QWORD *)v36 + 1));
  }
  else
  {
    v34 = v68;
    v65 = v28;
    v73 = v18;
    LOBYTE(v77) = 0;
    v35 = sub_100005150((unint64_t *)&unk_10028BBB0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v69, v6, &v77, v17, v6, v35);
    v37 = (uint64_t)v74;
    v38 = v69;
    v69 = *(_QWORD **)(v76 + 32);
    ((void (*)(char *, _QWORD *, uint64_t))v69)(v74, v38, v6);
    LOBYTE(v77) = 1;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v14, v6, &v77, v17, v6, v35);
    ((void (*)(uint64_t, _QWORD *, uint64_t))v69)(v37 + v75[5], v14, v6);
    LOBYTE(v77) = 3;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v34, v6, &v77, v17, v6, v35);
    v39 = v37;
    v64 = v35;
    ((void (*)(uint64_t, _QWORD *, uint64_t))v69)(v37 + v75[6], v34, v6);
    LOBYTE(v77) = 4;
    v40 = KeyedDecodingContainer.decode(_:forKey:)(&v77, v17);
    v41 = v17;
    v42 = v75;
    v43 = (uint64_t *)(v39 + v75[7]);
    *v43 = v40;
    v43[1] = v44;
    LOBYTE(v77) = 5;
    v45 = KeyedDecodingContainer.decode(_:forKey:)(&v77, v41);
    v46 = (uint64_t *)(v39 + v42[8]);
    *v46 = v45;
    v46[1] = v47;
    v78 = 8;
    v48 = v39;
    v49 = sub_10000F40C();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v77, &type metadata for Data, &v78, v41, &type metadata for Data, v49);
    *(_OWORD *)(v48 + v42[10]) = v77;
    v78 = 7;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&type metadata for Data, &v78, v41, &type metadata for Data, v49);
    *(_OWORD *)(v48 + v42[9]) = v77;
    LOBYTE(v77) = 9;
    v50 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v77, v41);
    v51 = (uint64_t *)(v48 + v42[11]);
    *v51 = v50;
    v51[1] = v52;
    LOBYTE(v77) = 2;
    v53 = (uint64_t)v66;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v6, &v77, v41, v6, v64);
    v54 = v21;
    v55 = v67;
    v56 = (uint64_t *)v70;
    v57 = v73;
    sub_100013AEC(v53, (uint64_t)v72);
    LOBYTE(v77) = 10;
    v58 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v77, v41);
    v60 = v59;
    (*(void (**)(char *, uint64_t))(v57 + 8))(v54, v41);
    swift_bridgeObjectRelease(v56[1]);
    *v56 = v58;
    v56[1] = v60;
    v61 = (uint64_t)v74;
    sub_10012DFB0((uint64_t)v74, v55);
    sub_100006F58(v71);
    return sub_100028388(v61, type metadata accessor for CustodianRecoverySessionRecord);
  }
}

uint64_t sub_10012DB94(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  unint64_t v33;
  __int128 v34;
  char v35;

  v3 = v1;
  v5 = sub_1000080B4(&qword_100292A18);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a1[3];
  v11 = a1[4];
  sub_10000732C(a1, v10);
  v12 = sub_10012DF6C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for CustodianRecoverySessionRecord.CodingKeys, &type metadata for CustodianRecoverySessionRecord.CodingKeys, v12, v10, v11);
  LOBYTE(v34) = 0;
  v13 = type metadata accessor for UUID(0);
  v14 = sub_100005150((unint64_t *)&unk_10028DC20, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v3, &v34, v5, v13, v14);
  if (!v2)
  {
    v15 = (int *)type metadata accessor for CustodianRecoverySessionRecord(0);
    v16 = v3 + v15[5];
    LOBYTE(v34) = 1;
    KeyedEncodingContainer.encode<A>(_:forKey:)(v16, &v34, v5, v13, v14);
    v17 = v3 + v15[6];
    LOBYTE(v34) = 3;
    KeyedEncodingContainer.encode<A>(_:forKey:)(v17, &v34, v5, v13, v14);
    v18 = (uint64_t *)(v3 + v15[7]);
    v19 = *v18;
    v20 = v18[1];
    LOBYTE(v34) = 4;
    KeyedEncodingContainer.encode(_:forKey:)(v19, v20, &v34, v5);
    v21 = (uint64_t *)(v3 + v15[8]);
    v22 = *v21;
    v23 = v21[1];
    LOBYTE(v34) = 5;
    KeyedEncodingContainer.encode(_:forKey:)(v22, v23, &v34, v5);
    v34 = *(_OWORD *)(v3 + v15[10]);
    v35 = 8;
    v33 = sub_10000F4D8();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v34, &v35, v5, &type metadata for Data, v33);
    v34 = *(_OWORD *)(v3 + v15[9]);
    v35 = 7;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v34, &v35, v5, &type metadata for Data, v33);
    v24 = (uint64_t *)(v3 + v15[11]);
    v25 = *v24;
    v26 = v24[1];
    LOBYTE(v34) = 9;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v25, v26, &v34, v5);
    v27 = v3 + v15[12];
    LOBYTE(v34) = 2;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v27, &v34, v5, v13, v14);
    v28 = (uint64_t *)(v3 + v15[13]);
    v29 = *v28;
    v30 = v28[1];
    LOBYTE(v34) = 10;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v29, v30, &v34, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

uint64_t sub_10012DEAC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10012D428(a1, a2);
}

uint64_t sub_10012DEC0(_QWORD *a1)
{
  return sub_10012DB94(a1);
}

uint64_t sub_10012DED4(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_100005150((unint64_t *)&unk_10028F340, type metadata accessor for CustodianRecoverySessionRecord, (uint64_t)&unk_10021D740);
  result = sub_100005150(&qword_10028D638, type metadata accessor for CustodianRecoverySessionRecord, (uint64_t)&unk_10021D718);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t type metadata accessor for CustodianRecoverySessionRecord(uint64_t a1)
{
  uint64_t result;

  result = qword_100292A78;
  if (!qword_100292A78)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CustodianRecoverySessionRecord);
  return result;
}

unint64_t sub_10012DF6C()
{
  unint64_t result;

  result = qword_100292A10;
  if (!qword_100292A10)
  {
    result = swift_getWitnessTable(&unk_10021D8E8, &type metadata for CustodianRecoverySessionRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100292A10);
  }
  return result;
}

uint64_t sub_10012DFB0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CustodianRecoverySessionRecord(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10012DFF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000080B4((uint64_t *)&unk_1002904F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t storeEnumTagSinglePayload for CustodianRecoverySessionRecord.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 10 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 10) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF6)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF5)
    return ((uint64_t (*)(void))((char *)&loc_10012E088 + 4 * byte_10021D710[v4]))();
  *a1 = a2 + 10;
  return ((uint64_t (*)(void))((char *)sub_10012E0BC + 4 * byte_10021D70B[v4]))();
}

uint64_t sub_10012E0BC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10012E0C4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10012E0CCLL);
  return result;
}

uint64_t sub_10012E0D8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10012E0E0);
  *(_BYTE *)result = a2 + 10;
  return result;
}

uint64_t sub_10012E0E4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10012E0EC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CustodianRecoverySessionRecord.CodingKeys()
{
  return &type metadata for CustodianRecoverySessionRecord.CodingKeys;
}

uint64_t *sub_10012E108(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  unsigned int (*v36)(char *, uint64_t, uint64_t, __n128);
  __n128 v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v22 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v22 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v22);
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    v8 = *(_QWORD *)(v7 - 8);
    v9 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16);
    v9(a1, a2, v7);
    v9((uint64_t *)((char *)a1 + a3[5]), (uint64_t *)((char *)a2 + a3[5]), v7);
    v9((uint64_t *)((char *)a1 + a3[6]), (uint64_t *)((char *)a2 + a3[6]), v7);
    v10 = a3[7];
    v11 = a3[8];
    v12 = (uint64_t *)((char *)a1 + v10);
    v13 = (uint64_t *)((char *)a2 + v10);
    v14 = v13[1];
    *v12 = *v13;
    v12[1] = v14;
    v15 = (uint64_t *)((char *)a1 + v11);
    v16 = (uint64_t *)((char *)a2 + v11);
    v17 = v16[1];
    *v15 = *v16;
    v15[1] = v17;
    v18 = a3[9];
    v19 = (char *)a1 + v18;
    v20 = (uint64_t *)((char *)a2 + v18);
    v21 = *(uint64_t *)((char *)a2 + v18 + 8);
    swift_bridgeObjectRetain(v14);
    swift_bridgeObjectRetain(v17);
    if (v21 >> 60 == 15)
    {
      *(_OWORD *)v19 = *(_OWORD *)v20;
    }
    else
    {
      v23 = *v20;
      sub_10000F450(*v20, v21);
      *(_QWORD *)v19 = v23;
      *((_QWORD *)v19 + 1) = v21;
    }
    v24 = a3[10];
    v25 = (uint64_t *)((char *)a1 + v24);
    v26 = (uint64_t *)((char *)a2 + v24);
    v27 = *v26;
    v28 = v26[1];
    sub_10000F450(*v26, v28);
    *v25 = v27;
    v25[1] = v28;
    v29 = a3[11];
    v30 = a3[12];
    v31 = (uint64_t *)((char *)a1 + v29);
    v32 = (uint64_t *)((char *)a2 + v29);
    v33 = v32[1];
    *v31 = *v32;
    v31[1] = v33;
    v34 = (char *)a1 + v30;
    v35 = (char *)a2 + v30;
    v36 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v8 + 48);
    v37 = swift_bridgeObjectRetain(v33);
    if (v36(v35, 1, v7, v37))
    {
      v38 = sub_1000080B4((uint64_t *)&unk_1002904F0);
      memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
    }
    else
    {
      v9((uint64_t *)v34, (uint64_t *)v35, v7);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v34, 0, 1, v7);
    }
    v39 = a3[13];
    v40 = (uint64_t *)((char *)a1 + v39);
    v41 = (uint64_t *)((char *)a2 + v39);
    v42 = v41[1];
    *v40 = *v41;
    v40[1] = v42;
    swift_bridgeObjectRetain(v42);
  }
  return a1;
}

uint64_t sub_10012E2F0(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t);
  uint64_t *v7;
  unint64_t v8;
  uint64_t v9;

  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v6(a1, v4);
  v6(a1 + a2[5], v4);
  v6(a1 + a2[6], v4);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[7] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[8] + 8));
  v7 = (uint64_t *)(a1 + a2[9]);
  v8 = v7[1];
  if (v8 >> 60 != 15)
    sub_10000F494(*v7, v8);
  sub_10000F494(*(_QWORD *)(a1 + a2[10]), *(_QWORD *)(a1 + a2[10] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[11] + 8));
  v9 = a1 + a2[12];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v9, 1, v4))
    v6(v9, v4);
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[13] + 8));
}

uint64_t sub_10012E3F8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  void *v32;
  const void *v33;
  unsigned int (*v34)(const void *, uint64_t, uint64_t, __n128);
  __n128 v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
  v8(a1, a2, v6);
  v8(a1 + a3[5], a2 + a3[5], v6);
  v8(a1 + a3[6], a2 + a3[6], v6);
  v9 = a3[7];
  v10 = a3[8];
  v11 = (_QWORD *)(a1 + v9);
  v12 = (_QWORD *)(a2 + v9);
  v13 = v12[1];
  *v11 = *v12;
  v11[1] = v13;
  v14 = (_QWORD *)(a1 + v10);
  v15 = (_QWORD *)(a2 + v10);
  v16 = v15[1];
  *v14 = *v15;
  v14[1] = v16;
  v17 = a3[9];
  v18 = a1 + v17;
  v19 = (uint64_t *)(a2 + v17);
  v20 = *(_QWORD *)(a2 + v17 + 8);
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v16);
  if (v20 >> 60 == 15)
  {
    *(_OWORD *)v18 = *(_OWORD *)v19;
  }
  else
  {
    v21 = *v19;
    sub_10000F450(*v19, v20);
    *(_QWORD *)v18 = v21;
    *(_QWORD *)(v18 + 8) = v20;
  }
  v22 = a3[10];
  v23 = (uint64_t *)(a1 + v22);
  v24 = (uint64_t *)(a2 + v22);
  v25 = *v24;
  v26 = v24[1];
  sub_10000F450(*v24, v26);
  *v23 = v25;
  v23[1] = v26;
  v27 = a3[11];
  v28 = a3[12];
  v29 = (_QWORD *)(a1 + v27);
  v30 = (_QWORD *)(a2 + v27);
  v31 = v30[1];
  *v29 = *v30;
  v29[1] = v31;
  v32 = (void *)(a1 + v28);
  v33 = (const void *)(a2 + v28);
  v34 = *(unsigned int (**)(const void *, uint64_t, uint64_t, __n128))(v7 + 48);
  v35 = swift_bridgeObjectRetain(v31);
  if (v34(v33, 1, v6, v35))
  {
    v36 = sub_1000080B4((uint64_t *)&unk_1002904F0);
    memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
  }
  else
  {
    v8((uint64_t)v32, (uint64_t)v33, v6);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v32, 0, 1, v6);
  }
  v37 = a3[13];
  v38 = (_QWORD *)(a1 + v37);
  v39 = (_QWORD *)(a2 + v37);
  v40 = v39[1];
  *v38 = *v39;
  v38[1] = v40;
  swift_bridgeObjectRetain(v40);
  return a1;
}

uint64_t sub_10012E5B4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  const void *v41;
  uint64_t (*v42)(uint64_t, uint64_t, uint64_t);
  int v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24);
  v8(a1, a2, v6);
  v8(a1 + a3[5], a2 + a3[5], v6);
  v8(a1 + a3[6], a2 + a3[6], v6);
  v9 = a3[7];
  v10 = (_QWORD *)(a1 + v9);
  v11 = (_QWORD *)(a2 + v9);
  *v10 = *v11;
  v12 = v11[1];
  v13 = v10[1];
  v10[1] = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  v14 = a3[8];
  v15 = (_QWORD *)(a1 + v14);
  v16 = (_QWORD *)(a2 + v14);
  *v15 = *v16;
  v17 = v16[1];
  v18 = v15[1];
  v15[1] = v17;
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRelease(v18);
  v19 = a3[9];
  v20 = (uint64_t *)(a1 + v19);
  v21 = (uint64_t *)(a2 + v19);
  v22 = *(_QWORD *)(a2 + v19 + 8);
  if (*(_QWORD *)(a1 + v19 + 8) >> 60 == 15)
  {
    if (v22 >> 60 != 15)
    {
      v23 = *v21;
      sub_10000F450(v23, v22);
      *v20 = v23;
      v20[1] = v22;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v22 >> 60 == 15)
  {
    sub_100071D90((uint64_t)v20);
LABEL_6:
    *(_OWORD *)v20 = *(_OWORD *)v21;
    goto LABEL_8;
  }
  v24 = *v21;
  sub_10000F450(v24, v22);
  v25 = *v20;
  v26 = v20[1];
  *v20 = v24;
  v20[1] = v22;
  sub_10000F494(v25, v26);
LABEL_8:
  v27 = a3[10];
  v28 = (uint64_t *)(a1 + v27);
  v29 = (uint64_t *)(a2 + v27);
  v30 = *v29;
  v31 = v29[1];
  sub_10000F450(*v29, v31);
  v32 = *v28;
  v33 = v28[1];
  *v28 = v30;
  v28[1] = v31;
  sub_10000F494(v32, v33);
  v34 = a3[11];
  v35 = (_QWORD *)(a1 + v34);
  v36 = (_QWORD *)(a2 + v34);
  *v35 = *v36;
  v37 = v36[1];
  v38 = v35[1];
  v35[1] = v37;
  swift_bridgeObjectRetain(v37);
  swift_bridgeObjectRelease(v38);
  v39 = a3[12];
  v40 = (void *)(a1 + v39);
  v41 = (const void *)(a2 + v39);
  v42 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  LODWORD(v28) = v42(a1 + v39, 1, v6);
  v43 = v42((uint64_t)v41, 1, v6);
  if (!(_DWORD)v28)
  {
    if (!v43)
    {
      v8((uint64_t)v40, (uint64_t)v41, v6);
      goto LABEL_14;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(v40, v6);
    goto LABEL_13;
  }
  if (v43)
  {
LABEL_13:
    v44 = sub_1000080B4((uint64_t *)&unk_1002904F0);
    memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
    goto LABEL_14;
  }
  (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(v40, v41, v6);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v40, 0, 1, v6);
LABEL_14:
  v45 = a3[13];
  v46 = (_QWORD *)(a1 + v45);
  v47 = (_QWORD *)(a2 + v45);
  *v46 = *v47;
  v48 = v47[1];
  v49 = v46[1];
  v46[1] = v48;
  swift_bridgeObjectRetain(v48);
  swift_bridgeObjectRelease(v49);
  return a1;
}

char *sub_10012E854(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void *, const void *, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 32);
  v8(a1, a2, v6);
  v8(&a1[a3[5]], &a2[a3[5]], v6);
  v8(&a1[a3[6]], &a2[a3[6]], v6);
  v9 = a3[8];
  *(_OWORD *)&a1[a3[7]] = *(_OWORD *)&a2[a3[7]];
  *(_OWORD *)&a1[v9] = *(_OWORD *)&a2[v9];
  v10 = a3[10];
  *(_OWORD *)&a1[a3[9]] = *(_OWORD *)&a2[a3[9]];
  *(_OWORD *)&a1[v10] = *(_OWORD *)&a2[v10];
  v11 = a3[12];
  *(_OWORD *)&a1[a3[11]] = *(_OWORD *)&a2[a3[11]];
  v12 = &a1[v11];
  v13 = &a2[v11];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(&a2[v11], 1, v6))
  {
    v14 = sub_1000080B4((uint64_t *)&unk_1002904F0);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    v8(v12, v13, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v12, 0, 1, v6);
  }
  *(_OWORD *)&a1[a3[13]] = *(_OWORD *)&a2[a3[13]];
  return a1;
}

char *sub_10012E98C(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void *, const void *, uint64_t);
  uint64_t v9;
  char *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t (*v39)(const void *, uint64_t, uint64_t);
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 40);
  v8(a1, a2, v6);
  v8(&a1[a3[5]], &a2[a3[5]], v6);
  v8(&a1[a3[6]], &a2[a3[6]], v6);
  v9 = a3[7];
  v10 = &a1[v9];
  v11 = (uint64_t *)&a2[v9];
  v13 = *v11;
  v12 = v11[1];
  v14 = *((_QWORD *)v10 + 1);
  *(_QWORD *)v10 = v13;
  *((_QWORD *)v10 + 1) = v12;
  swift_bridgeObjectRelease(v14);
  v15 = a3[8];
  v16 = &a1[v15];
  v17 = (uint64_t *)&a2[v15];
  v19 = *v17;
  v18 = v17[1];
  v20 = *((_QWORD *)v16 + 1);
  *(_QWORD *)v16 = v19;
  *((_QWORD *)v16 + 1) = v18;
  swift_bridgeObjectRelease(v20);
  v21 = a3[9];
  v22 = (uint64_t)&a1[v21];
  v23 = &a2[v21];
  v24 = *(_QWORD *)&a1[v21 + 8];
  if (v24 >> 60 == 15)
    goto LABEL_4;
  v25 = *((_QWORD *)v23 + 1);
  if (v25 >> 60 == 15)
  {
    sub_100071D90(v22);
LABEL_4:
    *(_OWORD *)v22 = *(_OWORD *)v23;
    goto LABEL_6;
  }
  v26 = *(_QWORD *)v22;
  *(_QWORD *)v22 = *(_QWORD *)v23;
  *(_QWORD *)(v22 + 8) = v25;
  sub_10000F494(v26, v24);
LABEL_6:
  v27 = a3[10];
  v28 = *(_QWORD *)&a1[v27];
  v29 = *(_QWORD *)&a1[v27 + 8];
  *(_OWORD *)&a1[v27] = *(_OWORD *)&a2[v27];
  sub_10000F494(v28, v29);
  v30 = a3[11];
  v31 = &a1[v30];
  v32 = (uint64_t *)&a2[v30];
  v34 = *v32;
  v33 = v32[1];
  v35 = *((_QWORD *)v31 + 1);
  *(_QWORD *)v31 = v34;
  *((_QWORD *)v31 + 1) = v33;
  swift_bridgeObjectRelease(v35);
  v36 = a3[12];
  v37 = &a1[v36];
  v38 = &a2[v36];
  v39 = *(uint64_t (**)(const void *, uint64_t, uint64_t))(v7 + 48);
  v40 = v39(&a1[v36], 1, v6);
  v41 = v39(v38, 1, v6);
  if (!v40)
  {
    if (!v41)
    {
      v8(v37, v38, v6);
      goto LABEL_12;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v37, v6);
    goto LABEL_11;
  }
  if (v41)
  {
LABEL_11:
    v42 = sub_1000080B4((uint64_t *)&unk_1002904F0);
    memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
    goto LABEL_12;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v37, v38, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v37, 0, 1, v6);
LABEL_12:
  v43 = a3[13];
  v44 = &a1[v43];
  v45 = (uint64_t *)&a2[v43];
  v47 = *v45;
  v46 = v45[1];
  v48 = *((_QWORD *)v44 + 1);
  *(_QWORD *)v44 = v47;
  *((_QWORD *)v44 + 1) = v46;
  swift_bridgeObjectRelease(v48);
  return a1;
}

uint64_t sub_10012EBAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10012EBB8);
}

uint64_t sub_10012EBB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  unint64_t v11;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v8 = sub_1000080B4((uint64_t *)&unk_1002904F0);
    v10 = a1 + *(int *)(a3 + 48);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
    return v9(v10, a2, v8);
  }
  v11 = *(_QWORD *)(a1 + *(int *)(a3 + 28) + 8);
  if (v11 >= 0xFFFFFFFF)
    LODWORD(v11) = -1;
  return (v11 + 1);
}

uint64_t sub_10012EC68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10012EC74);
}

uint64_t sub_10012EC74(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  result = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + *(int *)(a4 + 28) + 8) = (a2 - 1);
      return result;
    }
    v10 = sub_1000080B4((uint64_t *)&unk_1002904F0);
    v12 = a1 + *(int *)(a4 + 48);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_10012ED20(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[10];

  v2 = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    v6[1] = v6[0];
    v6[2] = v6[0];
    v6[3] = &unk_10021D7D0;
    v6[4] = &unk_10021D7D0;
    v6[5] = &unk_10021D7E8;
    v6[6] = &unk_10021D800;
    v6[7] = &unk_10021D818;
    sub_100015374(319);
    if (v5 <= 0x3F)
    {
      v6[8] = *(_QWORD *)(v4 - 8) + 64;
      v6[9] = &unk_10021D818;
      swift_initStructMetadata(a1, 256, 10, v6, a1 + 16);
    }
  }
}

unint64_t sub_10012EDD4()
{
  unint64_t result;

  result = qword_100292AD0;
  if (!qword_100292AD0)
  {
    result = swift_getWitnessTable(&unk_10021D8C0, &type metadata for CustodianRecoverySessionRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100292AD0);
  }
  return result;
}

unint64_t sub_10012EE1C()
{
  unint64_t result;

  result = qword_100292AD8;
  if (!qword_100292AD8)
  {
    result = swift_getWitnessTable(&unk_10021D830, &type metadata for CustodianRecoverySessionRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100292AD8);
  }
  return result;
}

unint64_t sub_10012EE64()
{
  unint64_t result;

  result = qword_100292AE0;
  if (!qword_100292AE0)
  {
    result = swift_getWitnessTable(&unk_10021D858, &type metadata for CustodianRecoverySessionRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100292AE0);
  }
  return result;
}

uint64_t sub_10012EEA8(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char v16;

  if (a1 == 0x444964726F636572 && a2 == 0xE800000000000000)
  {
    v5 = 0xE800000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x444964726F636572, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6169646F74737563 && a2 == 0xEB0000000044496ELL)
  {
    v7 = 0xEB0000000044496ELL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6169646F74737563, 0xEB0000000044496ELL, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x646F74737543746FLL && a2 == 0xED000044496E6169)
  {
    v8 = 0xED000044496E6169;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x646F74737543746FLL, 0xED000044496E6169, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x4449656B617073 && a2 == 0xE700000000000000)
  {
    v9 = 0xE700000000000000;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4449656B617073, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_26;
  }
  if (a1 == 0xD000000000000011)
  {
    v10 = 0x800000010020C520;
    if (a2 == 0x800000010020C520)
      goto LABEL_31;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x800000010020C520, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
LABEL_31:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if (a1 == 0x6E614872656E776FLL && a2 == 0xEB00000000656C64)
  {
    v11 = 0xEB00000000656C64;
LABEL_37:
    swift_bridgeObjectRelease(v11);
    return 5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E614872656E776FLL, 0xEB00000000656C64, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
    goto LABEL_37;
  }
  if (a1 == 0x737574617473 && a2 == 0xE600000000000000)
  {
    v12 = 0xE600000000000000;
LABEL_43:
    swift_bridgeObjectRelease(v12);
    return 6;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x737574617473, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
    goto LABEL_43;
  }
  if (a1 == 0x5264657070617277 && a2 == 0xEA0000000000434BLL)
  {
    v13 = 0xEA0000000000434BLL;
LABEL_49:
    swift_bridgeObjectRelease(v13);
    return 7;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x5264657070617277, 0xEA0000000000434BLL, a1, a2, 0) & 1) != 0)
  {
    v13 = a2;
    goto LABEL_49;
  }
  if (a1 == 0x5064657070617277 && a2 == 0xEB00000000434B52)
  {
    v14 = 0xEB00000000434B52;
LABEL_55:
    swift_bridgeObjectRelease(v14);
    return 8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x5064657070617277, 0xEB00000000434B52, a1, a2, 0) & 1) != 0)
  {
    v14 = a2;
    goto LABEL_55;
  }
  if (a1 == 0xD000000000000016 && a2 == 0x800000010020D280)
  {
    v15 = 0x800000010020D280;
LABEL_61:
    swift_bridgeObjectRelease(v15);
    return 9;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000016, 0x800000010020D280, a1, a2, 0) & 1) != 0)
  {
    v15 = a2;
    goto LABEL_61;
  }
  if (a1 == 0xD000000000000012 && a2 == 0x800000010020AC10)
  {
    swift_bridgeObjectRelease(0x800000010020AC10);
    return 10;
  }
  else
  {
    v16 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, 0x800000010020AC10, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v16 & 1) != 0)
      return 10;
    else
      return 11;
  }
}

uint64_t sub_10012F374(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD v33[2];
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v35 = a5;
  v36 = a6;
  v37 = a4;
  v38 = a2;
  v39 = a3;
  v8 = type metadata accessor for InheritanceInvitationResponseMessage(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin(v8, v11);
  v12 = (char *)v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for UUID(0);
  v14 = *(_QWORD *)(v13 - 8);
  v34 = v13;
  __chkstk_darwin(v13, v15);
  v17 = (char *)v33 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v14 + 16))(v17, a1 + *(int *)(v8 + 20));
  v33[1] = sub_10000732C((_QWORD *)(v6 + 16), *(_QWORD *)(v6 + 40));
  v18 = swift_allocObject(&unk_1002692F8, 24, 7);
  swift_weakInit(v18 + 16, v6);
  sub_10012FFE8(a1, (uint64_t)v12);
  v19 = *(unsigned __int8 *)(v9 + 80);
  v20 = (v19 + 16) & ~v19;
  v21 = (v10 + v20 + 7) & 0xFFFFFFFFFFFFFFF8;
  v22 = (v21 + 23) & 0xFFFFFFFFFFFFFFF8;
  v23 = (v22 + 15) & 0xFFFFFFFFFFFFFFF8;
  v24 = (v23 + 15) & 0xFFFFFFFFFFFFFFF8;
  v25 = swift_allocObject(&unk_100269320, v24 + 16, v19 | 7);
  sub_10003B730((uint64_t)v12, v25 + v20, type metadata accessor for InheritanceInvitationResponseMessage);
  v26 = (uint64_t *)(v25 + v21);
  v27 = v35;
  v28 = v36;
  *v26 = v35;
  v26[1] = v28;
  *(_QWORD *)(v25 + v22) = v18;
  v29 = v38;
  *(_QWORD *)(v25 + v23) = v37;
  v30 = (_QWORD *)(v25 + v24);
  v31 = v39;
  *v30 = v29;
  v30[1] = v31;
  sub_10000E1C0(v27, v28);
  swift_retain(v18);
  swift_bridgeObjectRetain(v31);
  sub_1000C8F4C((uint64_t)v17, (uint64_t)sub_1001300F0, v25);
  swift_release(v25);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v34);
  return swift_release(v18);
}

uint64_t sub_10012F55C(uint64_t a1, uint64_t a2, void (*a3)(_QWORD), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  uint64_t Strong;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(uint64_t, char *, uint64_t (*)(uint64_t), uint64_t, uint64_t, uint64_t);
  uint64_t (*v54)(uint64_t);
  void (*v55)(uint64_t);
  uint64_t v57;
  uint64_t v58;
  NSObject *v59;
  os_log_type_t v60;
  uint8_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  NSObject *v77;
  os_log_type_t v78;
  _BOOL4 v79;
  void (*v80)(_QWORD);
  uint8_t *v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void (*v89)(_QWORD);
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _BYTE v94[24];

  v86 = a7;
  v87 = a8;
  v85 = a6;
  v88 = a4;
  v89 = a3;
  v11 = type metadata accessor for InheritanceInvitationResponseMessage(0);
  v84 = *(_QWORD *)(v11 - 8);
  v12 = *(_QWORD *)(v84 + 64);
  __chkstk_darwin(v11, v13);
  v14 = (char *)&v82 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for InheritanceInvitationRecord(0);
  __chkstk_darwin(v15, v16);
  v18 = (char *)&v82 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_1000080B4((uint64_t *)&unk_10028FA70);
  __chkstk_darwin(v19, v20);
  v22 = (uint64_t *)((char *)&v82 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10013016C(a1, (uint64_t)v22);
  if (swift_getEnumCaseMultiPayload(v22, v19) != 1)
  {
    sub_10003B730((uint64_t)v22, (uint64_t)v18, type metadata accessor for InheritanceInvitationRecord);
    if (*(_BYTE *)(a2 + *(int *)(v11 + 24)) == 1)
    {
      if (*(_QWORD *)&v18[*(int *)(v15 + 32)] == 1)
      {
        if (qword_10028ADD0 != -1)
          swift_once(&qword_10028ADD0, sub_100046D50);
        v32 = type metadata accessor for Logger(0);
        v33 = sub_100005288(v32, (uint64_t)qword_1002A89F0);
        v34 = Logger.logObject.getter(v33);
        v35 = static os_log_type_t.info.getter(v34);
        if (os_log_type_enabled(v34, v35))
        {
          v36 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v36 = 0;
          _os_log_impl((void *)&_mh_execute_header, v34, v35, "The invitation was accepted.", v36, 2u);
          swift_slowDealloc(v36, -1, -1);
        }

        swift_beginAccess(a5 + 16, v94, 0, 0);
        Strong = swift_weakLoadStrong(a5 + 16);
        if (Strong)
        {
          v38 = Strong;
          sub_100006CA4(Strong + 56, (uint64_t)&v90);
          swift_release(v38);
          v39 = v92;
          v40 = v93;
          v83 = sub_10000732C(&v90, v92);
          sub_10012FFE8(a2, (uint64_t)&v82 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
          v41 = *(unsigned __int8 *)(v84 + 80);
          v42 = a5;
          v43 = (v41 + 32) & ~v41;
          v44 = (v12 + v43 + 7) & 0xFFFFFFFFFFFFFFF8;
          v45 = (v44 + 23) & 0xFFFFFFFFFFFFFFF8;
          v46 = swift_allocObject(&unk_100269370, v45 + 16, v41 | 7);
          v47 = v85;
          *(_QWORD *)(v46 + 16) = v42;
          *(_QWORD *)(v46 + 24) = v47;
          sub_10003B730((uint64_t)v14, v46 + v43, type metadata accessor for InheritanceInvitationResponseMessage);
          v48 = (_QWORD *)(v46 + v44);
          v49 = v87;
          *v48 = v86;
          v48[1] = v49;
          v50 = (_QWORD *)(v46 + v45);
          v51 = v88;
          v52 = (uint64_t)v89;
          *v50 = v89;
          v50[1] = v51;
          v53 = *(void (**)(uint64_t, char *, uint64_t (*)(uint64_t), uint64_t, uint64_t, uint64_t))(v40 + 8);
          swift_retain(v42);
          swift_bridgeObjectRetain(v49);
          sub_10000E1C0(v52, v51);
          v54 = sub_1001302BC;
LABEL_24:
          v53(a2, v18, v54, v46, v39, v40);
          swift_release(v46);
          sub_1001301C4((uint64_t)v18);
          return sub_100006F58(&v90);
        }
      }
      else
      {
        if (qword_10028ADD0 != -1)
          swift_once(&qword_10028ADD0, sub_100046D50);
        v75 = type metadata accessor for Logger(0);
        v76 = sub_100005288(v75, (uint64_t)qword_1002A89F0);
        v77 = Logger.logObject.getter(v76);
        v78 = static os_log_type_t.info.getter(v77);
        v79 = os_log_type_enabled(v77, v78);
        v80 = v89;
        if (v79)
        {
          v81 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v81 = 0;
          _os_log_impl((void *)&_mh_execute_header, v77, v78, "LCInvite: The invitation was not pending. Must have been accepted or declined already. Returning without accepting.", v81, 2u);
          swift_slowDealloc(v81, -1, -1);
        }

        if (v80)
          v80(0);
      }
    }
    else
    {
      if (qword_10028ADD0 != -1)
        swift_once(&qword_10028ADD0, sub_100046D50);
      v57 = type metadata accessor for Logger(0);
      v58 = sub_100005288(v57, (uint64_t)qword_1002A89F0);
      v59 = Logger.logObject.getter(v58);
      v60 = static os_log_type_t.info.getter(v59);
      if (os_log_type_enabled(v59, v60))
      {
        v61 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v61 = 0;
        _os_log_impl((void *)&_mh_execute_header, v59, v60, "The invitation was declined.", v61, 2u);
        swift_slowDealloc(v61, -1, -1);
      }

      swift_beginAccess(a5 + 16, v94, 0, 0);
      v62 = swift_weakLoadStrong(a5 + 16);
      if (v62)
      {
        v63 = v62;
        sub_100006CA4(v62 + 96, (uint64_t)&v90);
        swift_release(v63);
        v39 = v92;
        v40 = v93;
        v83 = sub_10000732C(&v90, v92);
        sub_10012FFE8(a2, (uint64_t)&v82 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
        v64 = *(unsigned __int8 *)(v84 + 80);
        v65 = a5;
        v66 = (v64 + 32) & ~v64;
        v67 = (v12 + v66 + 7) & 0xFFFFFFFFFFFFFFF8;
        v68 = (v67 + 23) & 0xFFFFFFFFFFFFFFF8;
        v46 = swift_allocObject(&unk_100269348, v68 + 16, v64 | 7);
        v69 = v85;
        *(_QWORD *)(v46 + 16) = v65;
        *(_QWORD *)(v46 + 24) = v69;
        sub_10003B730((uint64_t)v14, v46 + v66, type metadata accessor for InheritanceInvitationResponseMessage);
        v70 = (_QWORD *)(v46 + v67);
        v71 = v87;
        *v70 = v86;
        v70[1] = v71;
        v72 = (_QWORD *)(v46 + v68);
        v73 = v88;
        v74 = (uint64_t)v89;
        *v72 = v89;
        v72[1] = v73;
        v53 = *(void (**)(uint64_t, char *, uint64_t (*)(uint64_t), uint64_t, uint64_t, uint64_t))(v40 + 8);
        swift_retain(v65);
        swift_bridgeObjectRetain(v71);
        sub_10000E1C0(v74, v73);
        v54 = sub_1001301B8;
        goto LABEL_24;
      }
    }
    return sub_1001301C4((uint64_t)v18);
  }
  v23 = *v22;
  if (qword_10028ADD0 != -1)
    swift_once(&qword_10028ADD0, sub_100046D50);
  v24 = type metadata accessor for Logger(0);
  sub_100005288(v24, (uint64_t)qword_1002A89F0);
  v25 = swift_errorRetain(v23);
  v26 = Logger.logObject.getter(v25);
  v27 = static os_log_type_t.error.getter(v26);
  if (os_log_type_enabled(v26, v27))
  {
    v28 = (uint8_t *)swift_slowAlloc(12, -1);
    v29 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v28 = 138412290;
    v30 = _convertErrorToNSError(_:)(v23);
    v90 = v30;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v90, &v91);
    *v29 = v30;
    swift_errorRelease(v23);
    _os_log_impl((void *)&_mh_execute_header, v26, v27, "Error processing invitation %@", v28, 0xCu);
    v31 = sub_1000080B4((uint64_t *)&unk_10028BC20);
    swift_arrayDestroy(v29, 1, v31);
    swift_slowDealloc(v29, -1, -1);
    swift_slowDealloc(v28, -1, -1);
  }
  else
  {
    swift_errorRelease(v23);
  }

  v55 = v89;
  if (v89)
  {
    swift_errorRetain(v23);
    v55(v23);
    swift_errorRelease(v23);
  }
  return swift_errorRelease(v23);
}

uint64_t sub_10012FC70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(uint64_t), uint64_t a8, const char *a9)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v33[2];
  _BYTE v34[8];
  _QWORD v35[2];
  _BYTE v36[8];
  _BYTE v37[24];
  uint64_t v38;
  _BYTE v39[16];

  v14 = a2 + 16;
  if (qword_10028ADD0 != -1)
    swift_once(&qword_10028ADD0, sub_100046D50);
  v15 = type metadata accessor for Logger(0);
  sub_100005288(v15, (uint64_t)qword_1002A89F0);
  swift_errorRetain(a1);
  v16 = swift_errorRetain(a1);
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.info.getter(v17);
  if (os_log_type_enabled(v17, v18))
  {
    v30 = a6;
    v19 = (uint8_t *)swift_slowAlloc(12, -1);
    v20 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v19 = 138412290;
    if (a1)
    {
      swift_errorRetain(a1);
      v21 = _swift_stdlib_bridgeErrorToNSError(a1);
      v38 = v21;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, v39);
    }
    else
    {
      v38 = 0;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, v39);
      v21 = 0;
    }
    *v20 = v21;
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    _os_log_impl((void *)&_mh_execute_header, v17, v18, a9, v19, 0xCu);
    v22 = sub_1000080B4((uint64_t *)&unk_10028BC20);
    swift_arrayDestroy(v20, 1, v22);
    swift_slowDealloc(v20, -1, -1);
    swift_slowDealloc(v19, -1, -1);

    a6 = v30;
  }
  else
  {
    swift_errorRelease(a1);
    swift_errorRelease(a1);

  }
  swift_beginAccess(v14, &v38, 0, 0);
  result = swift_weakLoadStrong(v14);
  if (!result)
    goto LABEL_19;
  v24 = result;
  if (!a1)
    goto LABEL_18;
  swift_getErrorValue(a1, v36, v35);
  v25 = v35[1];
  swift_errorRetain(a1);
  if ((sub_10015D36C(v25) & 1) == 0
    || (swift_getErrorValue(a1, v34, v33), (v26 = (void *)sub_10015D168(v33[1])) == 0))
  {
    swift_errorRelease(a1);
LABEL_18:
    result = swift_release(v24);
    goto LABEL_19;
  }
  v27 = v26;
  v28 = sub_10015D1F8(v26);

  swift_errorRelease(a1);
  result = swift_release(v24);
  if (v28 && a3 <= 1)
  {
    swift_beginAccess(v14, v37, 0, 0);
    result = swift_weakLoadStrong(v14);
    if (result)
    {
      v29 = result;
      sub_10012F374(a4, a5, a6, a3 + 1, a7, a8);
      return swift_release(v29);
    }
    return result;
  }
LABEL_19:
  if (a7)
    return a7(a1);
  return result;
}

uint64_t type metadata accessor for InheritanceInvitationResponseHandler()
{
  return objc_opt_self(_TtC13appleaccountd36InheritanceInvitationResponseHandler);
}

uint64_t sub_10012FFC4()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10012FFE8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for InheritanceInvitationResponseMessage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10013002C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v1 = type metadata accessor for InheritanceInvitationResponseMessage(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = v0 + *(int *)(v1 + 20) + v4;
  v7 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  if (*(_QWORD *)(v0 + v5))
    swift_release(*(_QWORD *)(v0 + v5 + 8));
  v8 = (v5 + 23) & 0xFFFFFFFFFFFFFFF8;
  v9 = (((v8 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_release(*(_QWORD *)(v0 + v8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v9 + 8));
  return swift_deallocObject(v0, v9 + 16, v3 | 7);
}

uint64_t sub_1001300F0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v3 = *(_QWORD *)(type metadata accessor for InheritanceInvitationResponseMessage(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = (v5 + 23) & 0xFFFFFFFFFFFFFFF8;
  return sub_10012F55C(a1, v1 + v4, *(void (**)(_QWORD))(v1 + v5), *(_QWORD *)(v1 + v5 + 8), *(_QWORD *)(v1 + v6), *(_QWORD *)(v1 + ((v6 + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v1 + ((((v6 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v1 + ((((v6 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_10013016C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000080B4((uint64_t *)&unk_10028FA70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001301B8(uint64_t a1)
{
  return sub_1001302C8(a1, "Completed processing declined status change. Error: %@");
}

uint64_t sub_1001301C4(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for InheritanceInvitationRecord(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100130204()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = type metadata accessor for InheritanceInvitationResponseMessage(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = (v5 + 23) & 0xFFFFFFFFFFFFFFF8;
  swift_release(*(_QWORD *)(v0 + 16));
  v7 = v0 + *(int *)(v1 + 20) + v4;
  v8 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v5 + 8));
  if (*(_QWORD *)(v0 + v6))
    swift_release(*(_QWORD *)(v0 + v6 + 8));
  return swift_deallocObject(v0, v6 + 16, v3 | 7);
}

uint64_t sub_1001302BC(uint64_t a1)
{
  return sub_1001302C8(a1, "Completed processing accepted status change. Error: %@");
}

uint64_t sub_1001302C8(uint64_t a1, const char *a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v5 = *(_QWORD *)(type metadata accessor for InheritanceInvitationResponseMessage(0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = (*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_10012FC70(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), v2 + v6, *(_QWORD *)(v2 + v7), *(_QWORD *)(v2 + v7 + 8), *(uint64_t (**)(uint64_t))(v2 + ((v7 + 23) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v2 + ((v7 + 23) & 0xFFFFFFFFFFFFFFF8) + 8), a2);
}

uint64_t sub_10013034C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  void (*v30)(char *, uint64_t);
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t result;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47[3];

  v43 = a6;
  v13 = type metadata accessor for UUID(0);
  v45 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13, v14);
  v16 = (char *)&v38 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = a5 + 16;
  if (qword_10028ADC8 != -1)
    swift_once(&qword_10028ADC8, sub_100046D2C);
  v17 = type metadata accessor for Logger(0);
  sub_100005288(v17, (uint64_t)qword_1002A89D8);
  v18 = swift_retain_n(a4, 2);
  v19 = Logger.logObject.getter(v18);
  v20 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v19, v20))
  {
    v21 = swift_slowAlloc(22, -1);
    v42 = a7;
    v22 = v21;
    v23 = swift_slowAlloc(32, -1);
    v41 = a3;
    v39 = v23;
    v47[0] = v23;
    *(_DWORD *)v22 = 136315394;
    v38 = v22 + 4;
    v24 = a1;
    v25 = v45;
    (*(void (**)(char *, uint64_t, uint64_t))(v45 + 16))(v16, a4 + OBJC_IVAR____TtC13appleaccountd26CustodianInvitationMessage_custodianID, v13);
    v26 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v27 = dispatch thunk of CustomStringConvertible.description.getter(v13, v26);
    v40 = a2;
    v29 = v28;
    v30 = *(void (**)(char *, uint64_t))(v25 + 8);
    a1 = v24;
    v30(v16, v13);
    v46 = sub_1001DEF4C(v27, v29, v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, v47);
    swift_release_n(a4, 2);
    v31 = v29;
    a2 = v40;
    swift_bridgeObjectRelease(v31);
    *(_WORD *)(v22 + 12) = 2048;
    v46 = v24;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, v47);
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "Custodian %s saving invitation status: %ld", (uint8_t *)v22, 0x16u);
    v32 = v39;
    swift_arrayDestroy(v39, 1, (char *)&type metadata for Any + 8);
    a3 = v41;
    swift_slowDealloc(v32, -1, -1);
    v33 = v22;
    a7 = v42;
    swift_slowDealloc(v33, -1, -1);

  }
  else
  {

    swift_release_n(a4, 2);
  }
  v34 = v44;
  swift_beginAccess(v44, v47, 0, 0);
  result = swift_weakLoadStrong(v34);
  if (result)
  {
    v36 = result;
    v37 = v45;
    (*(void (**)(char *, uint64_t, uint64_t))(v45 + 16))(v16, a4 + OBJC_IVAR____TtC13appleaccountd26CustodianInvitationMessage_custodianID, v13);
    sub_100130674((uint64_t)v16, v43, a7, a1, a2, a3);
    swift_release(v36);
    return (*(uint64_t (**)(char *, uint64_t))(v37 + 8))(v16, v13);
  }
  return result;
}

void sub_100130674(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t, uint64_t);
  char *v24;
  void (*v25)(char *, uint64_t, __n128);
  __n128 v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD aBlock[5];
  uint64_t v43;

  v40 = a5;
  v41 = a6;
  v37 = a2;
  v38 = a4;
  v8 = (int *)type metadata accessor for CustodianshipInfoRecord(0);
  __chkstk_darwin(v8, v9);
  v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for UUID(0);
  v13 = *(_QWORD *)(v12 - 8);
  v15 = __chkstk_darwin(v12, v14);
  v17 = (char *)&v36 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15, v18);
  v20 = (char *)&v36 - v19;
  v21 = swift_allocBox(v8);
  v36 = v22;
  v23 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  v23(v20, a1, v12);
  v23(v17, a1, v12);
  v23(&v11[v8[5]], (uint64_t)v20, v12);
  v24 = &v11[v8[6]];
  *(_QWORD *)v24 = v37;
  *((_QWORD *)v24 + 1) = a3;
  *(_QWORD *)&v11[v8[7]] = v38;
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v11, v17, v12);
  v25 = *(void (**)(char *, uint64_t, __n128))(v13 + 8);
  v26 = swift_bridgeObjectRetain(a3);
  v25(v20, v12, v26);
  *(_OWORD *)&v11[v8[8]] = xmmword_100218E90;
  v11[v8[9]] = 1;
  sub_100027FA4((uint64_t)v11, v36);
  v27 = swift_allocObject(&unk_1002693A8, 24, 7);
  swift_weakInit(v27 + 16, v39);
  v28 = (_QWORD *)swift_allocObject(&unk_100269448, 48, 7);
  v28[2] = v21;
  v28[3] = v27;
  v30 = v40;
  v29 = v41;
  v28[4] = v40;
  v28[5] = v29;
  v31 = qword_10028AF00;
  swift_retain(v21);
  swift_retain(v27);
  swift_unknownObjectRetain(v30);
  if (v31 != -1)
    swift_once(&qword_10028AF00, sub_1001FD458);
  if (qword_10028AF10 != -1)
    swift_once(&qword_10028AF10, sub_1001FDD8C);
  v32 = sub_1001FD4C0(qword_1002A8C80, *(unint64_t *)algn_1002A8C88);
  v33 = swift_allocObject(&unk_100269470, 32, 7);
  *(_QWORD *)(v33 + 16) = sub_1001330F4;
  *(_QWORD *)(v33 + 24) = v28;
  aBlock[4] = sub_1000D0E44;
  v43 = v33;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100043E24;
  aBlock[3] = &unk_100269488;
  v34 = _Block_copy(aBlock);
  v35 = v43;
  swift_retain(v28);
  swift_release(v35);
  objc_msgSend(v32, "accountInfoWithCompletionHandler:", v34);
  _Block_release(v34);
  swift_release(v21);
  swift_release(v27);
  swift_release(v28);

}

uint64_t sub_100130988()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;

  sub_100006F58(v0 + 2);
  sub_100006F58(v0 + 7);
  sub_100006F58(v0 + 12);
  sub_100006F58(v0 + 17);
  v1 = (char *)v0 + OBJC_IVAR____TtC13appleaccountd23DaemonInvitationHandler__analyticsEventFactory;
  v2 = sub_1000080B4((uint64_t *)&unk_10028E7D0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

uint64_t sub_1001309FC()
{
  return type metadata accessor for DaemonInvitationHandler(0);
}

uint64_t type metadata accessor for DaemonInvitationHandler(uint64_t a1)
{
  uint64_t result;

  result = qword_100292BE0;
  if (!qword_100292BE0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for DaemonInvitationHandler);
  return result;
}

void sub_100130A40(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[5];

  v4[0] = "(";
  v4[1] = "(";
  v4[2] = "(";
  v4[3] = "(";
  sub_100130ABC(319);
  if (v3 <= 0x3F)
  {
    v4[4] = *(_QWORD *)(v2 - 8) + 64;
    swift_updateClassMetadata2(a1, 256, 5, v4, a1 + 80);
  }
}

void sub_100130ABC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100293820)
  {
    v2 = sub_10000D908((uint64_t *)&unk_10028C900);
    v3 = type metadata accessor for Dependency(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100293820);
  }
}

void sub_100130B14(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void (*a9)(uint64_t, uint64_t, uint64_t), uint64_t a10)
{
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v28;
  uint64_t Strong;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  void (*v36)(uint64_t, uint64_t, uint64_t (*)(uint64_t, char), _QWORD *, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  _QWORD *v42;
  NSObject *v43;
  os_log_type_t v44;
  uint8_t *v45;
  uint64_t ObjectType;
  uint64_t v47;
  void (*v48)(uint64_t *, _QWORD);
  _QWORD *v49;
  _QWORD *v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD v58[3];

  if ((a2 & 1) == 0)
  {
    if ((a1 & 1) != 0)
    {
      v28 = a3 + 16;
      swift_beginAccess(a3 + 16, v58, 0, 0);
      Strong = swift_weakLoadStrong(v28);
      if (Strong)
      {
        v30 = Strong;
        sub_100006CA4(Strong + 56, (uint64_t)&v54);
        v31 = v56;
        v32 = v57;
        sub_10000732C(&v54, v56);
        v33 = (_QWORD *)swift_allocObject(&unk_100269420, 48, 7);
        v34 = a8;
        v35 = v33;
        v33[2] = a7;
        v33[3] = v34;
        v33[4] = a9;
        v33[5] = a10;
        v36 = *(void (**)(uint64_t, uint64_t, uint64_t (*)(uint64_t, char), _QWORD *, uint64_t, uint64_t))(v32 + 8);
        swift_unknownObjectRetain(a7);
        swift_retain(a10);
        v36(a4, a5, sub_1001330B4, v35, v31, v32);
        swift_release(v35);
        sub_100006F58(&v54);
        swift_release(v30);
      }
    }
    else
    {
      if (qword_10028ADC8 != -1)
        swift_once(&qword_10028ADC8, sub_100046D2C);
      v13 = type metadata accessor for Logger(0);
      v14 = sub_100005288(v13, (uint64_t)qword_1002A89D8);
      v15 = Logger.logObject.getter(v14);
      v16 = static os_log_type_t.error.getter(v15);
      if (os_log_type_enabled(v15, v16))
      {
        v17 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v17 = 0;
        _os_log_impl((void *)&_mh_execute_header, v15, v16, "Account is ineligible for custodian auto-acceptance as a result of no manatee availability", v17, 2u);
        swift_slowDealloc(v17, -1, -1);
      }

      *(_BYTE *)(a7 + qword_1002981C8) = 8;
      a9(1, a7, a8);
    }
    return;
  }
  swift_errorRetain(a1);
  if (qword_10028ADC8 != -1)
    swift_once(&qword_10028ADC8, sub_100046D2C);
  v18 = type metadata accessor for Logger(0);
  sub_100005288(v18, (uint64_t)qword_1002A89D8);
  v19 = swift_errorRetain(a1);
  v20 = Logger.logObject.getter(v19);
  v21 = static os_log_type_t.error.getter(v20);
  if (os_log_type_enabled(v20, v21))
  {
    v22 = (uint8_t *)swift_slowAlloc(12, -1);
    v23 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v22 = 138412290;
    v24 = _convertErrorToNSError(_:)(a1);
    v54 = v24;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, &v55);
    *v23 = v24;
    sub_10006AEB4(a1, 1);
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "Something went wrong while validating account: %@", v22, 0xCu);
    v25 = sub_1000080B4((uint64_t *)&unk_10028BC20);
    swift_arrayDestroy(v23, 1, v25);
    swift_slowDealloc(v23, -1, -1);
    swift_slowDealloc(v22, -1, -1);
  }
  else
  {
    sub_10006AEB4(a1, 1);
  }

  v54 = a1;
  swift_errorRetain(a1);
  v37 = sub_1000080B4(&qword_10028E850);
  type metadata accessor for AACustodianError(0);
  v39 = v38;
  if ((swift_dynamicCast(v58, &v54, v37, v38, 6) & 1) != 0)
  {
    v40 = (void *)v58[0];
    v41 = sub_100005150((unint64_t *)&qword_10028B640, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianError, (uint64_t)&unk_100218378);
    v42 = _BridgedStoredNSError.code.getter(&v54, v39, v41);
    if (v54 == -7012)
    {
      v43 = Logger.logObject.getter(v42);
      v44 = static os_log_type_t.error.getter(v43);
      if (os_log_type_enabled(v43, v44))
      {
        v45 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v45 = 0;
        _os_log_impl((void *)&_mh_execute_header, v43, v44, "This account is ineligible to be a custodian, marking as ineligible.", v45, 2u);
        swift_slowDealloc(v45, -1, -1);
      }

      *(_BYTE *)(a7 + qword_1002981C8) = 7;
      a9(5, a7, a8);
      sub_10006AEB4(a1, 1);

      return;
    }

  }
  ObjectType = swift_getObjectType(a7);
  *(_BYTE *)(a7 + qword_1002981C8) = 6;
  v47 = _convertErrorToNSError(_:)(a1);
  v48 = (void (*)(uint64_t *, _QWORD))(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(a8 + 72))(&v54, ObjectType, a8);
  v50 = v49;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v48);
  v52 = *(_QWORD *)((*v50 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v51 = *(_QWORD *)((*v50 & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v52 >= v51 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v51 > 1, v52 + 1, 1);
  v53 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v52, v47);
  specialized Array._endMutation()(v53);
  v48(&v54, 0);
  a9(1, a7, a8);
  sub_10006AEB4(a1, 1);
}

uint64_t sub_100131084(uint64_t a1, char a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD, _QWORD, _QWORD))
{
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  void (*v20)(_QWORD, _QWORD, _QWORD);
  uint64_t v21;
  uint64_t v22;
  uint64_t ObjectType;
  uint64_t v25;
  void (*v26)(uint64_t *, _QWORD);
  _QWORD *v27;
  _QWORD *v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;

  if ((a2 & 1) != 0)
  {
    swift_errorRetain(a1);
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v15 = type metadata accessor for Logger(0);
    sub_100005288(v15, (uint64_t)qword_1002A89D8);
    v16 = swift_errorRetain(a1);
    v17 = Logger.logObject.getter(v16);
    v18 = static os_log_type_t.error.getter(v17);
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc(12, -1);
      v32 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v19 = 138412290;
      v33 = _convertErrorToNSError(_:)(a1);
      v20 = a5;
      v21 = v33;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, &v34);
      *v32 = v21;
      a5 = v20;
      sub_10006AEB4(a1, 1);
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Failed to fetch family circle: %@", v19, 0xCu);
      v22 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v32, 1, v22);
      swift_slowDealloc(v32, -1, -1);
      swift_slowDealloc(v19, -1, -1);
    }
    else
    {
      sub_10006AEB4(a1, 1);
    }

    ObjectType = swift_getObjectType(a3);
    *(_BYTE *)(a3 + qword_1002981C8) = 6;
    v25 = _convertErrorToNSError(_:)(a1);
    v26 = (void (*)(uint64_t *, _QWORD))(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(a4 + 72))(&v33, ObjectType, a4);
    v28 = v27;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v26);
    v30 = *(_QWORD *)((*v28 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v29 = *(_QWORD *)((*v28 & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v30 >= v29 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v29 > 1, v30 + 1, 1);
    v31 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v30, v25);
    specialized Array._endMutation()(v31);
    v26(&v33, 0);
    a5(1, a3, a4);
    return sub_10006AEB4(a1, 1);
  }
  else
  {
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v9 = type metadata accessor for Logger(0);
    v10 = sub_100005288(v9, (uint64_t)qword_1002A89D8);
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Family circle fetch successful.", v13, 2u);
      swift_slowDealloc(v13, -1, -1);
    }

    if ((a1 & 1) != 0)
    {
      *(_BYTE *)(a3 + qword_1002981C8) = 0;
      v14 = 2;
    }
    else
    {
      *(_BYTE *)(a3 + qword_1002981C8) = 5;
      v14 = 1;
    }
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))a5)(v14, a3, a4);
  }
}

uint64_t sub_1001313F8(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  uint8_t *v43;
  int v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(char *, char *, uint64_t);
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  NSObject *v60;
  os_log_type_t v61;
  uint8_t *v62;
  uint64_t result;
  uint64_t v64;
  uint64_t v65;
  uint8_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _BYTE v73[24];
  int v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78[4];

  v69 = a5;
  v70 = a6;
  v72 = a4;
  v9 = (int *)type metadata accessor for CustodianshipInfoRecord(0);
  v11 = __chkstk_darwin(v9, v10);
  v68 = (uint64_t)&v66 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v11, v13);
  v16 = (char *)&v66 - v15;
  v18 = __chkstk_darwin(v14, v17);
  v20 = (char *)&v66 - v19;
  __chkstk_darwin(v18, v21);
  v71 = (uint64_t)&v66 - v22;
  v23 = swift_projectBox(a3);
  if ((a2 & 1) != 0)
  {
    swift_errorRetain(a1);
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v29 = type metadata accessor for Logger(0);
    sub_100005288(v29, (uint64_t)qword_1002A89D8);
    swift_errorRetain(a1);
    v30 = swift_errorRetain(a1);
    v31 = Logger.logObject.getter(v30);
    v32 = static os_log_type_t.error.getter(v31);
    if (os_log_type_enabled(v31, v32))
    {
      v33 = (uint8_t *)swift_slowAlloc(12, -1);
      v67 = swift_slowAlloc(32, -1);
      v78[0] = v67;
      *(_DWORD *)v33 = 136315138;
      v66 = v33 + 4;
      v76 = a1;
      swift_errorRetain(a1);
      v34 = sub_1000080B4(&qword_10028E850);
      v35 = String.init<A>(describing:)(&v76, v34);
      v37 = v36;
      v76 = sub_1001DEF4C(v35, v36, v78);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &v77);
      swift_bridgeObjectRelease(v37);
      sub_10006AEB4(a1, 1);
      sub_10006AEB4(a1, 1);
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "Manatee status check failed: %s", v33, 0xCu);
      v38 = v67;
      swift_arrayDestroy(v67, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v38, -1, -1);
      swift_slowDealloc(v33, -1, -1);

      sub_10006AEB4(a1, 1);
    }
    else
    {
      sub_10006AEB4(a1, 1);
      sub_10006AEB4(a1, 1);
      swift_errorRelease(a1);

    }
    goto LABEL_18;
  }
  if ((a1 & 1) == 0)
  {
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v24 = type metadata accessor for Logger(0);
    v25 = sub_100005288(v24, (uint64_t)qword_1002A89D8);
    v26 = Logger.logObject.getter(v25);
    v27 = static os_log_type_t.error.getter(v26);
    if (os_log_type_enabled(v26, v27))
    {
      v28 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v28 = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "Manatee is not available to save custodianship with E2E encryption", v28, 2u);
      swift_slowDealloc(v28, -1, -1);
    }

LABEL_18:
    v44 = 0;
    goto LABEL_19;
  }
  if (qword_10028ADC8 != -1)
    swift_once(&qword_10028ADC8, sub_100046D2C);
  v39 = type metadata accessor for Logger(0);
  v40 = sub_100005288(v39, (uint64_t)qword_1002A89D8);
  v41 = Logger.logObject.getter(v40);
  v42 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v41, v42))
  {
    v43 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v43 = 0;
    _os_log_impl((void *)&_mh_execute_header, v41, v42, "Manatee is available to save custodianship with E2E encryption", v43, 2u);
    swift_slowDealloc(v43, -1, -1);
  }

  v44 = 1;
LABEL_19:
  swift_beginAccess(v23, v78, 0, 0);
  sub_1000433A0(v23, (uint64_t)v20);
  v45 = (uint64_t *)(v23 + v9[6]);
  v47 = *v45;
  v46 = v45[1];
  v48 = *(_QWORD *)(v23 + v9[7]);
  v49 = type metadata accessor for UUID(0);
  v50 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v49 - 8) + 16);
  v50(v16, v20, v49);
  v50(&v16[v9[5]], &v20[v9[5]], v49);
  v51 = v9[8];
  if (v44 == v20[v9[9]])
  {
    v52 = *(_QWORD *)&v20[v51];
    v53 = *(_QWORD *)&v20[v51 + 8];
    v54 = (uint64_t *)&v16[v51];
    *v54 = v52;
    v54[1] = v53;
    sub_10000F450(v52, v53);
  }
  else
  {
    *(_OWORD *)&v16[v51] = xmmword_100218E90;
  }
  v55 = v72 + 16;
  v56 = &v16[v9[6]];
  *(_QWORD *)v56 = v47;
  *((_QWORD *)v56 + 1) = v46;
  *(_QWORD *)&v16[v9[7]] = v48;
  swift_bridgeObjectRetain(v46);
  sub_10006BD98((uint64_t)v20);
  v16[v9[9]] = v44;
  v57 = v71;
  sub_100027FA4((uint64_t)v16, v71);
  swift_beginAccess(v23, &v76, 1, 0);
  sub_100133124(v57, v23);
  if (qword_10028ADC8 != -1)
    swift_once(&qword_10028ADC8, sub_100046D2C);
  v58 = type metadata accessor for Logger(0);
  v59 = sub_100005288(v58, (uint64_t)qword_1002A89D8);
  v60 = Logger.logObject.getter(v59);
  v61 = static os_log_type_t.debug.getter(v60);
  if (os_log_type_enabled(v60, v61))
  {
    v62 = (uint8_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v62 = 67109120;
    v74 = v44;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, &v75);
    _os_log_impl((void *)&_mh_execute_header, v60, v61, "Saving CustodianshipInfoRecord in manatee? %{BOOL}d", v62, 8u);
    swift_slowDealloc(v62, -1, -1);
  }

  swift_beginAccess(v55, &v74, 0, 0);
  result = swift_weakLoadStrong(v55);
  if (result)
  {
    v64 = result;
    swift_beginAccess(v23, v73, 0, 0);
    v65 = v68;
    sub_1000433A0(v23, v68);
    sub_100131A40(v65, v69, v70);
    swift_release(v64);
    return sub_10006BD98(v65);
  }
  return result;
}

uint64_t sub_100131A40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41[5];

  v4 = v3;
  v8 = type metadata accessor for CustodianshipInfoRecord(0);
  v38 = *(_QWORD *)(v8 - 8);
  v9 = *(_QWORD *)(v38 + 64);
  v11 = __chkstk_darwin(v8, v10);
  v39 = (uint64_t)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11, v12);
  v14 = (char *)&v34 - v13;
  if (qword_10028ADC8 != -1)
    swift_once(&qword_10028ADC8, sub_100046D2C);
  v15 = type metadata accessor for Logger(0);
  sub_100005288(v15, (uint64_t)qword_1002A89D8);
  v16 = sub_1000433A0(a1, (uint64_t)v14);
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v17, v18))
  {
    v19 = swift_slowAlloc(12, -1);
    v37 = a1;
    v20 = (uint8_t *)v19;
    v21 = swift_slowAlloc(32, -1);
    v35 = v4;
    v22 = v21;
    v36 = a3;
    *(_DWORD *)v20 = 136315138;
    v23 = v14[*(int *)(v8 + 36)];
    v41[0] = v21;
    if (v23)
      v24 = 1702195828;
    else
      v24 = 0x65736C6166;
    if (v23)
      v25 = 0xE400000000000000;
    else
      v25 = 0xE500000000000000;
    v40 = sub_1001DEF4C(v24, v25, v41);
    a3 = v36;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, v41);
    swift_bridgeObjectRelease(v25);
    sub_10006BD98((uint64_t)v14);
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Manatee status is %s for record being saved.", v20, 0xCu);
    swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
    v26 = v22;
    v4 = v35;
    swift_slowDealloc(v26, -1, -1);
    v27 = v20;
    a1 = v37;
    swift_slowDealloc(v27, -1, -1);
  }
  else
  {
    sub_10006BD98((uint64_t)v14);
  }

  sub_100006CA4(v4 + 96, (uint64_t)v41);
  sub_10000732C(v41, v41[3]);
  v28 = swift_allocObject(&unk_1002693A8, 24, 7);
  swift_weakInit(v28 + 16, v4);
  v29 = v39;
  sub_1000433A0(a1, v39);
  v30 = *(unsigned __int8 *)(v38 + 80);
  v31 = (v30 + 40) & ~v30;
  v32 = (_QWORD *)swift_allocObject(&unk_1002694C0, v31 + v9, v30 | 7);
  v32[2] = v28;
  v32[3] = a2;
  v32[4] = a3;
  sub_100027FA4(v29, (uint64_t)v32 + v31);
  swift_unknownObjectRetain(a2);
  sub_1001E5A68(a1, (uint64_t)sub_100133230, (uint64_t)v32);
  swift_release(v32);
  return sub_100006F58(v41);
}

void sub_100131D44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t Strong;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  void *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint8_t *v39;
  uint8_t *v40;
  uint64_t v41;
  void *v42;
  uint8_t *v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  _BYTE v50[24];

  v10 = (int *)type metadata accessor for CustodianshipInfoRecord(0);
  __chkstk_darwin(v10, v11);
  v13 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_1000080B4(&qword_10028C450);
  __chkstk_darwin(v14, v15);
  v17 = (uint64_t *)((char *)&v45 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  a2 += 16;
  swift_beginAccess(a2, v50, 0, 0);
  Strong = swift_weakLoadStrong(a2);
  if (Strong)
  {
    v19 = Strong;
    sub_100027F5C(a1, (uint64_t)v17);
    if (swift_getEnumCaseMultiPayload(v17, v14) == 1)
    {
      v20 = *v17;
      if (qword_10028ADC8 != -1)
        swift_once(&qword_10028ADC8, sub_100046D2C);
      v21 = type metadata accessor for Logger(0);
      sub_100005288(v21, (uint64_t)qword_1002A89D8);
      v22 = swift_errorRetain(v20);
      v23 = Logger.logObject.getter(v22);
      v24 = static os_log_type_t.error.getter(v23);
      if (os_log_type_enabled(v23, v24))
      {
        v25 = (uint8_t *)swift_slowAlloc(12, -1);
        v26 = (uint64_t *)swift_slowAlloc(8, -1);
        *(_DWORD *)v25 = 138412290;
        v27 = _convertErrorToNSError(_:)(v20);
        v49 = (void *)v27;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, v50);
        *v26 = v27;
        swift_errorRelease(v20);
        _os_log_impl((void *)&_mh_execute_header, v23, v24, "Unable to persist invitation: %@", v25, 0xCu);
        v28 = sub_1000080B4((uint64_t *)&unk_10028BC20);
        swift_arrayDestroy(v26, 1, v28);
        swift_slowDealloc(v26, -1, -1);
        swift_slowDealloc(v25, -1, -1);
      }
      else
      {
        swift_errorRelease(v20);
      }

      v44 = (void *)_convertErrorToNSError(_:)(v20);
      sub_1001D2A60(0, v44);

      swift_release(v19);
      swift_errorRelease(v20);
    }
    else
    {
      if (qword_10028ADC8 != -1)
        swift_once(&qword_10028ADC8, sub_100046D2C);
      v35 = type metadata accessor for Logger(0);
      sub_100005288(v35, (uint64_t)qword_1002A89D8);
      v36 = sub_1000433A0(a5, (uint64_t)v13);
      v37 = Logger.logObject.getter(v36);
      v38 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v37, v38))
      {
        v45 = a5;
        v39 = (uint8_t *)swift_slowAlloc(12, -1);
        v46 = a4;
        v40 = v39;
        v47 = a3;
        *(_DWORD *)v39 = 134217984;
        v41 = v19;
        v42 = *(void **)&v13[v10[7]];
        sub_10006BD98((uint64_t)v13);
        v49 = v42;
        v19 = v41;
        a5 = v45;
        a3 = v47;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, v50);
        _os_log_impl((void *)&_mh_execute_header, v37, v38, "Saved invitation status: %ld.", v40, 0xCu);
        v43 = v40;
        a4 = v46;
        swift_slowDealloc(v43, -1, -1);
      }
      else
      {
        sub_10006BD98((uint64_t)v13);
      }

      if (*(_QWORD *)(a5 + v10[7]) == 2)
      {
        objc_msgSend((id)objc_opt_self(AATrustedContactNotificationPublisher), "postRecoveryContactChangedNotification");
        sub_1001321EC(a5 + v10[5], *(_QWORD *)(a5 + v10[6]), *(_QWORD *)(a5 + v10[6] + 8), a3, a4);
      }
      else
      {
        sub_1001D2A60(1, 0);
      }
      swift_release(v19);
      sub_10006BDD4((uint64_t)v17);
    }
  }
  else
  {
    type metadata accessor for AACustodianError(0);
    v30 = v29;
    v48 = -7022;
    v31 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
    v32 = sub_100005150((unint64_t *)&qword_10028B640, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianError, (uint64_t)&unk_100218378);
    _BridgedStoredNSError.init(_:userInfo:)(&v49, &v48, v31, v30, v32);
    v33 = v49;
    v34 = (void *)_convertErrorToNSError(_:)(v49);

    sub_1001D2A60(0, v34);
  }
}

uint64_t sub_1001321EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  id v14;
  Class isa;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  NSString v21;
  id v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  __n128 v28;
  os_log_type_t v29;
  _BOOL4 v30;
  uint64_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  _BOOL4 v37;
  uint8_t *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  uint8_t *v47;
  uint64_t v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;

  v6 = v5;
  v49 = a5;
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  v13 = (char *)&v49 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = objc_allocWithZone((Class)AACustodianInvitationResponseContext);
  isa = UUID._bridgeToObjectiveC()().super.isa;
  v16 = objc_msgSend(v14, "initWithCustodianID:didAccept:", isa, 1, v49);

  sub_10000732C((_QWORD *)(v6 + 16), *(_QWORD *)(v6 + 40));
  v51 = a4;
  swift_unknownObjectRetain(a4);
  v17 = objc_msgSend(v16, "custodianID");
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v17);

  v50 = v16;
  LOBYTE(v17) = objc_msgSend(v16, "isAccepted");
  v18 = type metadata accessor for CustodianInvitationResponseMessage(0);
  v19 = swift_allocObject(v18, *(unsigned int *)(v18 + 48), *(unsigned __int16 *)(v18 + 52));
  *(_BYTE *)(v19 + 16) = 1;
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(v19 + OBJC_IVAR____TtC13appleaccountd34CustodianInvitationResponseMessage_custodianID, v13, v9);
  *(_BYTE *)(v19 + OBJC_IVAR____TtC13appleaccountd34CustodianInvitationResponseMessage_accepted) = (_BYTE)v17;
  v20 = objc_allocWithZone((Class)AAMessagingDestination);
  swift_bridgeObjectRetain(a3);
  v21 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a3);
  v22 = objc_msgSend(v20, "initWithHandle:", v21);

  if (v22)
  {
    v23 = qword_10028ADB0;
    v24 = v22;
    if (v23 != -1)
      swift_once(&qword_10028ADB0, sub_100046CC8);
    v25 = type metadata accessor for Logger(0);
    v26 = sub_100005288(v25, (uint64_t)qword_1002A8990);
    v27 = Logger.logObject.getter(v26);
    v29 = static os_log_type_t.default.getter(v28);
    v30 = os_log_type_enabled(v27, v29);
    v31 = v51;
    if (v30)
    {
      v32 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v32 = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, v29, "Destination is valid!", v32, 2u);
      swift_slowDealloc(v32, -1, -1);
    }

    sub_1001B2728(v19, v24);
    sub_1001D2A60(1, 0);
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v44 = sub_100005288(v25, (uint64_t)qword_1002A89D8);
    v45 = Logger.logObject.getter(v44);
    v46 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v45, v46))
    {
      v47 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v47 = 0;
      _os_log_impl((void *)&_mh_execute_header, v45, v46, "Invitation response sent.", v47, 2u);
      swift_slowDealloc(v47, -1, -1);
    }
    swift_release(v19);

  }
  else
  {
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v33 = type metadata accessor for Logger(0);
    v34 = sub_100005288(v33, (uint64_t)qword_1002A89D8);
    v35 = Logger.logObject.getter(v34);
    v36 = static os_log_type_t.error.getter(v35);
    v37 = os_log_type_enabled(v35, v36);
    v31 = v51;
    if (v37)
    {
      v38 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v38 = 0;
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "Unable to generate destination from handle.", v38, 2u);
      swift_slowDealloc(v38, -1, -1);
    }

    type metadata accessor for AACustodianError(0);
    v40 = v39;
    v52 = -7004;
    v41 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
    v42 = sub_100005150((unint64_t *)&qword_10028B640, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianError, (uint64_t)&unk_100218378);
    _BridgedStoredNSError.init(_:userInfo:)(&v53, &v52, v41, v40, v42);
    v43 = v53;
    sub_1001326D8((uint64_t)v53);

    swift_release(v19);
  }
  return swift_unknownObjectRelease(v31);
}

void sub_1001326D8(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  os_log_type_t v12;
  uint8_t *v13;
  NSObject *oslog;
  uint64_t v15;
  uint64_t v16;

  if (a1)
  {
    v2 = (void *)_convertErrorToNSError(_:)(a1);
    sub_1001D2A60(0, v2);

    swift_errorRetain(a1);
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v3 = type metadata accessor for Logger(0);
    sub_100005288(v3, (uint64_t)qword_1002A89D8);
    v4 = swift_errorRetain(a1);
    oslog = Logger.logObject.getter(v4);
    v5 = static os_log_type_t.error.getter(oslog);
    if (os_log_type_enabled(oslog, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc(12, -1);
      v7 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v6 = 138412290;
      v8 = _convertErrorToNSError(_:)(a1);
      v15 = v8;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16);
      *v7 = v8;
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, oslog, v5, "Failed to send invitation result message: %@", v6, 0xCu);
      v9 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v7, 1, v9);
      swift_slowDealloc(v7, -1, -1);
      swift_slowDealloc(v6, -1, -1);

      swift_errorRelease(a1);
      return;
    }
    swift_errorRelease(a1);
    swift_errorRelease(a1);
  }
  else
  {
    sub_1001D2A60(1, 0);
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v10 = type metadata accessor for Logger(0);
    v11 = sub_100005288(v10, (uint64_t)qword_1002A89D8);
    oslog = Logger.logObject.getter(v11);
    v12 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(oslog, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v12, "Invitation response sent.", v13, 2u);
      swift_slowDealloc(v13, -1, -1);
    }
  }

}

uint64_t sub_100132968(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  void (*v29)(char *, uint64_t);
  unint64_t v30;
  uint64_t v31;
  os_log_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  char *v37;
  void (*v38)(char *, uint64_t, uint64_t);
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t *v53;
  void *v54;
  uint64_t (**v55)(uint64_t, uint64_t, uint64_t);
  uint64_t v56;
  char *v57;
  id v58;
  uint64_t v60;
  os_log_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76[6];

  v70 = a2;
  v74 = a3;
  v4 = sub_1000080B4((uint64_t *)&unk_10028E7D0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (char *)&v60 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71 = type metadata accessor for UUID(0);
  v73 = *(_QWORD *)(v71 - 8);
  v10 = __chkstk_darwin(v71, v9);
  v67 = v11;
  v68 = (char *)&v60 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10, v12);
  v72 = (char *)&v60 - v13;
  if (qword_10028ADC8 != -1)
    swift_once(&qword_10028ADC8, sub_100046D2C);
  v14 = type metadata accessor for Logger(0);
  sub_100005288(v14, (uint64_t)qword_1002A89D8);
  swift_retain_n(a1, 2);
  v15 = swift_bridgeObjectRetain_n(v74, 2);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.info.getter();
  v18 = v17;
  if (os_log_type_enabled(v16, v17))
  {
    v19 = swift_slowAlloc(22, -1);
    LODWORD(v63) = v18;
    v20 = v19;
    v62 = swift_slowAlloc(64, -1);
    v76[0] = v62;
    *(_DWORD *)v20 = 136315394;
    v60 = v20 + 4;
    v61 = v16;
    v65 = v8;
    v21 = v72;
    v22 = v73;
    v23 = v71;
    (*(void (**)(char *, uint64_t, uint64_t))(v73 + 16))(v72, a1 + OBJC_IVAR____TtC13appleaccountd26CustodianInvitationMessage_custodianID, v71);
    v24 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v25 = dispatch thunk of CustomStringConvertible.description.getter(v23, v24);
    v66 = v4;
    v26 = a1;
    v28 = v27;
    v29 = *(void (**)(char *, uint64_t))(v22 + 8);
    v30 = v74;
    v31 = v70;
    v8 = v65;
    v29(v21, v23);
    v75 = sub_1001DEF4C(v25, v28, v76);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, v76);
    swift_release_n(v26, 2);
    swift_bridgeObjectRelease(v28);
    *(_WORD *)(v20 + 12) = 2080;
    swift_bridgeObjectRetain(v30);
    v75 = sub_1001DEF4C(v31, v30, v76);
    a1 = v26;
    v4 = v66;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, v76);
    swift_bridgeObjectRelease_n(v30, 3);
    v32 = v61;
    _os_log_impl((void *)&_mh_execute_header, v61, (os_log_type_t)v63, "Received invitation to Custodian %s from %s", (uint8_t *)v20, 0x16u);
    v33 = v62;
    swift_arrayDestroy(v62, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v33, -1, -1);
    swift_slowDealloc(v20, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v74, 2);
    swift_release_n(a1, 2);
  }
  v34 = v69;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v69 + OBJC_IVAR____TtC13appleaccountd23DaemonInvitationHandler__analyticsEventFactory, v4);
  Dependency.wrappedValue.getter(v76, v4);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  v35 = objc_allocWithZone((Class)type metadata accessor for CustodianInvitationActionAnalyticsEvent(0));
  v66 = sub_1001D2980();
  sub_100006F58(v76);
  v37 = v72;
  v36 = v73;
  v38 = *(void (**)(char *, uint64_t, uint64_t))(v73 + 16);
  v39 = v71;
  v38(v72, a1 + OBJC_IVAR____TtC13appleaccountd26CustodianInvitationMessage_custodianID, v71);
  v64 = a1;
  v40 = swift_allocObject(&unk_1002693A8, 24, 7);
  v65 = (char *)v40;
  swift_weakInit(v40 + 16, v34);
  v41 = (_QWORD *)swift_allocObject(&unk_1002693D0, 48, 7);
  v62 = (uint64_t)v41;
  v41[2] = a1;
  v41[3] = v40;
  v42 = v70;
  v43 = v74;
  v41[4] = v70;
  v41[5] = v43;
  sub_100006CA4(v34 + 136, (uint64_t)v76);
  v63 = sub_10000732C(v76, v76[3]);
  v44 = swift_allocObject(&unk_1002693A8, 24, 7);
  swift_weakInit(v44 + 16, v34);
  v45 = v68;
  v38(v68, (uint64_t)v37, v39);
  v46 = *(unsigned __int8 *)(v36 + 80);
  v47 = (v46 + 40) & ~v46;
  v48 = (v67 + v47 + 7) & 0xFFFFFFFFFFFFFFF8;
  v49 = (v48 + 23) & 0xFFFFFFFFFFFFFFF8;
  v50 = (char *)swift_allocObject(&unk_1002693F8, v49 + 16, v46 | 7);
  *((_QWORD *)v50 + 2) = v44;
  *((_QWORD *)v50 + 3) = v42;
  *((_QWORD *)v50 + 4) = v43;
  v51 = v45;
  v52 = v39;
  (*(void (**)(char *, char *, uint64_t))(v36 + 32))(&v50[v47], v51, v39);
  v53 = (uint64_t *)&v50[v48];
  v54 = (void *)v66;
  *v53 = v66;
  v53[1] = (uint64_t)&off_10026EE30;
  v55 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))&v50[v49];
  v56 = v62;
  *v55 = sub_100132F44;
  v55[1] = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v56;
  swift_bridgeObjectRetain_n(v43, 2);
  swift_retain(v64);
  v57 = v65;
  swift_retain(v65);
  swift_retain(v44);
  v58 = v54;
  swift_retain(v56);
  sub_1001BA6A8((void (*)(_QWORD, uint64_t))sub_100132FFC, (uint64_t)v50);
  swift_release(v44);
  swift_release(v50);
  sub_100006F58(v76);

  swift_release(v56);
  (*(void (**)(char *, uint64_t))(v73 + 8))(v72, v52);
  return swift_release(v57);
}

uint64_t sub_100132EEC()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100132F10()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[3]);
  swift_bridgeObjectRelease(v0[5]);
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100132F44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;

  return sub_10013034C(a1, a2, a3, v3[2], v3[3], v3[4], v3[5]);
}

uint64_t sub_100132F50()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 23) & 0xFFFFFFFFFFFFFFF8;
  swift_release(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_unknownObjectRelease(*(_QWORD *)(v0 + v6));
  swift_release(*(_QWORD *)(v0 + v7 + 8));
  return swift_deallocObject(v0, v7 + 16, v5);
}

void sub_100132FFC(uint64_t a1, char a2)
{
  uint64_t *v2;
  char v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v4 = a2 & 1;
  v5 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = (*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_100130B14(a1, v4, v2[2], v2[3], v2[4], (uint64_t)v2 + v6, *(uint64_t *)((char *)v2 + v7), *(uint64_t *)((char *)v2 + v7 + 8), *(void (**)(uint64_t, uint64_t, uint64_t))((char *)v2 + ((v7 + 23) & 0xFFFFFFFFFFFFFFF8)), *(uint64_t *)((char *)v2 + ((v7 + 23) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_100133088()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1001330B4(uint64_t a1, char a2)
{
  return sub_1000B9CE8(a1, a2, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100131084);
}

uint64_t sub_1001330C0()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[3]);
  swift_unknownObjectRelease(v0[4]);
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1001330F4(uint64_t a1, char a2)
{
  return sub_1000B9CE8(a1, a2, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1001313F8);
}

uint64_t sub_100133100()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100133124(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CustodianshipInfoRecord(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_100133168()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);

  v1 = (int *)type metadata accessor for CustodianshipInfoRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release(*(_QWORD *)(v0 + 16));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 24));
  v7 = v0 + v4;
  v8 = type metadata accessor for UUID(0);
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8);
  v9(v7, v8);
  v9(v7 + v1[5], v8);
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[6] + 8));
  sub_10000F494(*(_QWORD *)(v7 + v1[8]), *(_QWORD *)(v7 + v1[8] + 8));
  return swift_deallocObject(v0, v5, v6);
}

void sub_100133230(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for CustodianshipInfoRecord(0) - 8) + 80);
  sub_100131D44(a1, v1[2], v1[3], v1[4], (uint64_t)v1 + ((v3 + 40) & ~v3));
}

unint64_t sub_100133274()
{
  uint64_t v0;
  uint64_t inited;
  NSString *v2;
  unint64_t result;
  _BYTE v4[72];

  v0 = sub_1000080B4(&qword_100292DF0);
  inited = swift_initStackObject(v0, v4);
  *(_OWORD *)(inited + 16) = xmmword_100218E30;
  *(_QWORD *)(inited + 64) = &type metadata for Int;
  *(_QWORD *)(inited + 32) = NSFilePosixPermissions;
  *(_QWORD *)(inited + 40) = 508;
  v2 = NSFilePosixPermissions;
  result = sub_100016770(inited);
  static NSFileManager.daemonAgentDirectoryAttributes = result;
  return result;
}

uint64_t *NSFileManager.daemonAgentDirectoryAttributes.unsafeMutableAddressor()
{
  if (qword_10028AE98 != -1)
    swift_once(&qword_10028AE98, sub_100133274);
  return &static NSFileManager.daemonAgentDirectoryAttributes;
}

double static NSFileManager.daemonAgentDirectoryAttributes.getter()
{
  double result;
  _BYTE v1[24];

  if (qword_10028AE98 != -1)
    swift_once(&qword_10028AE98, sub_100133274);
  swift_beginAccess(&static NSFileManager.daemonAgentDirectoryAttributes, v1, 0, 0);
  *(_QWORD *)&result = swift_bridgeObjectRetain(static NSFileManager.daemonAgentDirectoryAttributes).n128_u64[0];
  return result;
}

uint64_t static NSFileManager.daemonAgentDirectoryAttributes.setter(uint64_t a1)
{
  uint64_t v2;
  _BYTE v4[24];

  if (qword_10028AE98 != -1)
    swift_once(&qword_10028AE98, sub_100133274);
  swift_beginAccess(&static NSFileManager.daemonAgentDirectoryAttributes, v4, 1, 0);
  v2 = static NSFileManager.daemonAgentDirectoryAttributes;
  static NSFileManager.daemonAgentDirectoryAttributes = a1;
  return swift_bridgeObjectRelease(v2);
}

uint64_t (*static NSFileManager.daemonAgentDirectoryAttributes.modify(uint64_t a1))(_QWORD)
{
  if (qword_10028AE98 != -1)
    swift_once(&qword_10028AE98, sub_100133274);
  swift_beginAccess(&static NSFileManager.daemonAgentDirectoryAttributes, a1, 33, 0);
  return j__swift_endAccess;
}

id static NSFileManager.removeDirectory(url:)()
{
  id v0;
  NSURL *v1;
  void *v2;
  void *v3;
  unsigned int v4;
  id v5;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  id v21;
  id v22;
  id v23;

  v0 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  URL._bridgeToObjectiveC()(v1);
  v3 = v2;
  v23 = 0;
  v4 = objc_msgSend(v0, "removeItemAtURL:error:", v2, &v23);

  v5 = v23;
  if (v4)
    return v23;
  v7 = v23;
  v8 = (void *)_convertNSErrorToError(_:)(v5);

  swift_willThrow(v9);
  v23 = v8;
  swift_errorRetain(v8);
  v10 = sub_1000080B4(&qword_10028E850);
  v11 = sub_10004973C();
  if (!swift_dynamicCast(&v22, &v23, v10, v11, 0))
    return (id)swift_errorRelease(v23);
  swift_errorRelease(v8);
  v12 = v22;
  v13 = objc_msgSend(v22, "domain");
  v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
  v16 = v15;

  v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSCocoaErrorDomain);
  v19 = v18;
  if (v17 == v14 && v18 == v16)
  {
    swift_bridgeObjectRelease_n(v16, 2);
    goto LABEL_8;
  }
  v20 = _stringCompareWithSmolCheck(_:_:expecting:)(v17, v18, v14, v16, 0);
  swift_bridgeObjectRelease(v16);
  v21 = (id)swift_bridgeObjectRelease(v19);
  if ((v20 & 1) != 0)
  {
LABEL_8:
    v21 = objc_msgSend(v12, "code");
    if (v21 == (id)4)
    {

      return (id)swift_errorRelease(v23);
    }
  }
  swift_willThrow(v21);
  return (id)swift_errorRelease(v23);
}

void static NSFileManager.emptyDirectory(url:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  void *v15;
  id v16;
  void *v17;
  uint64_t v18;
  id v19;
  int v20;
  void (*v21)(char *, uint64_t, uint64_t, uint64_t);
  NSURL *v22;
  void *v23;
  void *v24;
  unsigned __int8 v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  id v34;
  _QWORD v35[3];
  uint64_t v36;

  v2 = type metadata accessor for URL(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1000080B4((uint64_t *)&unk_10028DC30);
  __chkstk_darwin(v7, v8);
  v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for NSFastEnumerationIterator(0);
  v32 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11, v12);
  v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = (void *)objc_opt_self(NSFileManager);
  v33 = objc_msgSend(v15, "defaultManager");
  v16 = objc_msgSend(v15, "defaultManager");
  v17 = (void *)NSFileManager.enumerator(at:includingPropertiesForKeys:options:errorHandler:)(a1, 0, 1, 0, 0);

  if (v17)
  {
    v30 = v17;
    v31 = v11;
    v18 = NSEnumerator.makeIterator()();
    NSFastEnumerationIterator.next()(v35, v18);
    while (v36)
    {
      v20 = swift_dynamicCast(v10, v35, (char *)&type metadata for Any + 8, v2, 6);
      v21 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
      if (v20)
      {
        v21(v10, 0, 1, v2);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v10, 1, v2) != 1)
        {
          (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v6, v10, v2);
          URL._bridgeToObjectiveC()(v22);
          v24 = v23;
          (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
          v34 = 0;
          v25 = objc_msgSend(v33, "removeItemAtURL:error:", v24, &v34);

          v19 = v34;
          if ((v25 & 1) == 0)
          {
            v26 = v19;
            v27 = _convertNSErrorToError(_:)(v19);

            swift_willThrow(v28);
            v19 = (id)swift_errorRelease(v27);
          }
          goto LABEL_6;
        }
      }
      else
      {
        v21(v10, 1, 1, v2);
      }
      v19 = (id)sub_10009E0DC((uint64_t)v10);
LABEL_6:
      NSFastEnumerationIterator.next()(v35, v19);
    }
    (*(void (**)(char *, uint64_t))(v32 + 8))(v14, v31);

  }
  else
  {

  }
}

uint64_t NSFileManager.flatEnumerator(at:includingPropertiesForKeys:)(uint64_t a1, uint64_t a2)
{
  id v4;
  uint64_t v5;

  v4 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  v5 = NSFileManager.enumerator(at:includingPropertiesForKeys:options:errorHandler:)(a1, a2, 1, 0, 0);

  return v5;
}

_QWORD *static NSFileManager.shallowContents(of:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  void *v15;
  id v16;
  id v17;
  void *v18;
  uint64_t v19;
  _QWORD *v20;
  int v21;
  void (*v22)(char *, uint64_t, uint64_t, uint64_t);
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  unint64_t v30;
  void (*v31)(char *, char *, uint64_t);
  char *v32;
  _QWORD v33[3];
  uint64_t v34;

  v2 = type metadata accessor for URL(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v32 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1000080B4((uint64_t *)&unk_10028DC30);
  __chkstk_darwin(v6, v7);
  v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for NSFastEnumerationIterator(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = (void *)objc_opt_self(NSFileManager);
  v16 = objc_msgSend(v15, "defaultManager");
  v17 = objc_msgSend(v15, "defaultManager");
  v18 = (void *)NSFileManager.enumerator(at:includingPropertiesForKeys:options:errorHandler:)(a1, 0, 1, 0, 0);

  if (!v18)
    return _swiftEmptyArrayStorage;
  v19 = NSEnumerator.makeIterator()();
  NSFastEnumerationIterator.next()(v33, v19);
  if (v34)
  {
    v20 = _swiftEmptyArrayStorage;
    while (1)
    {
      v21 = swift_dynamicCast(v9, v33, (char *)&type metadata for Any + 8, v2, 6);
      v22 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
      if (v21)
      {
        v22(v9, 0, 1, v2);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v9, 1, v2) != 1)
        {
          v31 = *(void (**)(char *, char *, uint64_t))(v3 + 32);
          v31(v32, v9, v2);
          if ((swift_isUniquelyReferenced_nonNull_native(v20) & 1) == 0)
            v20 = (_QWORD *)sub_100133FE0(0, v20[2] + 1, 1, (unint64_t)v20, &qword_100292DE8, (uint64_t (*)(_QWORD))&type metadata accessor for URL);
          v24 = v20[2];
          v23 = v20[3];
          v25 = v24 + 1;
          if (v24 >= v23 >> 1)
          {
            v30 = v24 + 1;
            v27 = sub_100133FE0(v23 > 1, v24 + 1, 1, (unint64_t)v20, &qword_100292DE8, (uint64_t (*)(_QWORD))&type metadata accessor for URL);
            v25 = v30;
            v20 = (_QWORD *)v27;
          }
          v20[2] = v25;
          v26 = ((uint64_t (*)(char *, char *, uint64_t))v31)((char *)v20+ ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(_QWORD *)(v3 + 72) * v24, v32, v2);
          goto LABEL_13;
        }
      }
      else
      {
        v22(v9, 1, 1, v2);
      }
      v26 = sub_10009E0DC((uint64_t)v9);
LABEL_13:
      NSFastEnumerationIterator.next()(v33, v26);
      if (!v34)
        goto LABEL_17;
    }
  }
  v20 = _swiftEmptyArrayStorage;
LABEL_17:
  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);

  return v20;
}

uint64_t NSFileManager.deepEnumerator(at:includingPropertiesForKeys:)(uint64_t a1, uint64_t a2)
{
  id v4;
  uint64_t v5;

  v4 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  v5 = NSFileManager.enumerator(at:includingPropertiesForKeys:options:errorHandler:)(a1, a2, 0, 0, 0);

  return v5;
}

_QWORD *sub_100133D78(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_1000080B4(&qword_10028BB48);
      v11 = (_QWORD *)swift_allocObject(v10, 40 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 40);
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[5 * v8 + 4])
          memmove(v13, a4 + 4, 40 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_100134870(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

char *sub_100133E98(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *((_QWORD *)a4 + 3);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *((_QWORD *)a4 + 2);
    if (v7 <= v8)
      v9 = *((_QWORD *)a4 + 2);
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_1000080B4(&qword_100292D38);
      v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 17;
      *((_QWORD *)v11 + 2) = v8;
      *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
      v14 = v11 + 32;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = (char *)&_swiftEmptyArrayStorage;
      v14 = (char *)&_swiftEmptyArrayStorage + 32;
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[16 * v8 + 32])
          memmove(v14, a4 + 32, 16 * v8);
        *((_QWORD *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    sub_10013497C(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

char *sub_100133FA4(char *a1, int64_t a2, char a3, char *a4)
{
  return sub_100134620(a1, a2, a3, a4, &qword_100292D78, &qword_100292D80);
}

uint64_t sub_100133FB8(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100133FE0(a1, a2, a3, a4, &qword_100292D30, type metadata accessor for CustodianshipInfoRecord);
}

uint64_t sub_100133FCC(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100133FE0(a1, a2, a3, a4, &qword_100292DC0, type metadata accessor for BenefactorInfoRecord);
}

uint64_t sub_100133FE0(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t (*a6)(_QWORD))
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  size_t v19;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = *(_QWORD *)(a4 + 24);
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
LABEL_29:
        result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division by zero", 16, 2, "Swift/IntegerTypes.swift", 24, 2, 14377, 0);
LABEL_31:
        __break(1u);
        return result;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = *(_QWORD *)(a4 + 16);
  if (v10 <= v11)
    v12 = *(_QWORD *)(a4 + 16);
  else
    v12 = v10;
  if (!v12)
  {
    v18 = &_swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v13 = sub_1000080B4(a5);
  v14 = *(_QWORD *)(a6(0) - 8);
  v15 = *(_QWORD *)(v14 + 72);
  v16 = *(unsigned __int8 *)(v14 + 80);
  v17 = (v16 + 32) & ~v16;
  v18 = (_QWORD *)swift_allocObject(v13, v17 + v15 * v12, v16 | 7);
  v19 = j__malloc_size(v18);
  if (!v15)
    goto LABEL_29;
  if (v19 - v17 == 0x8000000000000000 && v15 == -1)
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Division results in an overflow", 31, 2, "Swift/IntegerTypes.swift", 24, 2, 14384, 0);
    goto LABEL_31;
  }
  v18[2] = v11;
  v18[3] = 2 * ((uint64_t)(v19 - v17) / v15);
LABEL_19:
  v21 = *(_QWORD *)(a6(0) - 8);
  v22 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
  v23 = (unint64_t)v18 + v22;
  if ((a1 & 1) != 0)
  {
    v24 = a4 + v22;
    if ((unint64_t)v18 < a4 || v23 >= v24 + *(_QWORD *)(v21 + 72) * v11)
    {
      swift_arrayInitWithTakeFrontToBack((char *)v18 + v22, v24);
    }
    else if (v18 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront((char *)v18 + v22, v24);
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_100134FF8(0, v11, v23, a4, a6);
  }
  swift_bridgeObjectRelease(a4);
  return (uint64_t)v18;
}

uint64_t sub_1001341EC(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100133FE0(a1, a2, a3, a4, &qword_100292DC8, type metadata accessor for BeneficiaryInfoRecord);
}

uint64_t sub_100134200(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100133FE0(a1, a2, a3, a4, &qword_100292D28, type metadata accessor for CustodianRecord);
}

uint64_t sub_100134214(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100133FE0(a1, a2, a3, a4, &qword_100292D60, type metadata accessor for CustodianRecoveryInfoRecord);
}

uint64_t sub_100134228(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100133FE0(a1, a2, a3, a4, &qword_100292D58, type metadata accessor for CustodianHealthRecord);
}

uint64_t sub_10013423C(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100133FE0(a1, a2, a3, a4, &qword_100292D68, (uint64_t (*)(_QWORD))&type metadata accessor for UUID);
}

uint64_t sub_100134250(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100133FE0(a1, a2, a3, a4, &qword_100292D50, type metadata accessor for CustodianRecoverySessionRecord);
}

uint64_t sub_100134264(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100133FE0(a1, a2, a3, a4, &qword_100292DB8, type metadata accessor for InheritanceHealthRecord);
}

uint64_t sub_100134278(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100133FE0(a1, a2, a3, a4, &qword_100292DD0, type metadata accessor for InheritanceInvitationRecord);
}

char *sub_10013428C(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *((_QWORD *)a4 + 3);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *((_QWORD *)a4 + 2);
    if (v7 <= v8)
      v9 = *((_QWORD *)a4 + 2);
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_1000080B4(&qword_100292D20);
      v11 = (char *)swift_allocObject(v10, 8 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 25;
      *((_QWORD *)v11 + 2) = v8;
      *((_QWORD *)v11 + 3) = 2 * (v13 >> 3);
      v14 = v11 + 32;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = (char *)&_swiftEmptyArrayStorage;
      v14 = (char *)&_swiftEmptyArrayStorage + 32;
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[8 * v8 + 32])
          memmove(v14, a4 + 32, 8 * v8);
        *((_QWORD *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    sub_100134A6C(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

uint64_t sub_100134398(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100133FE0(a1, a2, a3, a4, &qword_100292DD8, type metadata accessor for IdentityRecord);
}

uint64_t sub_1001343AC(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_100133FE0(a1, a2, a3, a4, &qword_100292DE0, type metadata accessor for IdentityServiceRecord);
}

_QWORD *sub_1001343C0(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  size_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_1000080B4(&qword_100292D70);
      v11 = (_QWORD *)swift_allocObject(v10, 72 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v11[2] = v8;
      v11[3] = 2 * ((uint64_t)(v12 - 32) / 72);
      v13 = v11 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[9 * v8 + 4])
          memmove(v13, a4 + 4, 72 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v13 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_100134B74(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

char *sub_1001344E8(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *((_QWORD *)a4 + 3);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *((_QWORD *)a4 + 2);
    if (v7 <= v8)
      v9 = *((_QWORD *)a4 + 2);
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_1000080B4(&qword_100292D40);
      v11 = (char *)swift_allocObject(v10, 24 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      *((_QWORD *)v11 + 2) = v8;
      *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 24);
      v13 = v11 + 32;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[24 * v8 + 32])
          memmove(v13, a4 + 32, 24 * v8);
        *((_QWORD *)a4 + 2) = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = (char *)&_swiftEmptyArrayStorage;
      v13 = (char *)&_swiftEmptyArrayStorage + 32;
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_100134C68(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

char *sub_10013460C(char *a1, int64_t a2, char a3, char *a4)
{
  return sub_100134620(a1, a2, a3, a4, &qword_100292DB0, &qword_100292D90);
}

char *sub_100134620(char *result, int64_t a2, char a3, char *a4, uint64_t *a5, uint64_t *a6)
{
  char v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int64_t v15;
  uint64_t v16;
  char *v17;

  v8 = (char)result;
  if ((a3 & 1) == 0)
  {
    v10 = a2;
    goto LABEL_8;
  }
  v9 = *((_QWORD *)a4 + 3);
  v10 = v9 >> 1;
  if ((uint64_t)(v9 >> 1) >= a2)
    goto LABEL_8;
  if (v10 + 0x4000000000000000 >= 0)
  {
    v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v10 = a2;
LABEL_8:
    v11 = *((_QWORD *)a4 + 2);
    if (v10 <= v11)
      v12 = *((_QWORD *)a4 + 2);
    else
      v12 = v10;
    if (v12)
    {
      v13 = sub_1000080B4(a5);
      v14 = (char *)swift_allocObject(v13, 16 * v12 + 32, 7);
      v15 = j__malloc_size(v14);
      v16 = v15 - 32;
      if (v15 < 32)
        v16 = v15 - 17;
      *((_QWORD *)v14 + 2) = v11;
      *((_QWORD *)v14 + 3) = 2 * (v16 >> 4);
      v17 = v14 + 32;
      if ((v8 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v14 = (char *)&_swiftEmptyArrayStorage;
      v17 = (char *)&_swiftEmptyArrayStorage + 32;
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v14 != a4 || v17 >= &a4[16 * v11 + 32])
          memmove(v17, a4 + 32, 16 * v11);
        *((_QWORD *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    sub_100135110(0, v11, (unint64_t)v17, (uint64_t)a4, a6);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v14;
  }
  __break(1u);
  return result;
}

char *sub_100134738(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *((_QWORD *)a4 + 3);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *((_QWORD *)a4 + 2);
    if (v7 <= v8)
      v9 = *((_QWORD *)a4 + 2);
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_1000080B4(&qword_100292DA0);
      v11 = (char *)swift_allocObject(v10, 24 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      *((_QWORD *)v11 + 2) = v8;
      *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 24);
      v13 = v11 + 32;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v11 != a4 || v13 >= &a4[24 * v8 + 32])
          memmove(v13, a4 + 32, 24 * v8);
        *((_QWORD *)a4 + 2) = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v11 = (char *)&_swiftEmptyArrayStorage;
      v13 = (char *)&_swiftEmptyArrayStorage + 32;
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_100134D74(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

char *sub_10013485C(char *a1, int64_t a2, char a3, char *a4)
{
  return sub_100134620(a1, a2, a3, a4, &qword_100292D88, &qword_100292D90);
}

uint64_t sub_100134870(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v6 = a4 + 40 * a1 + 32;
  v7 = a3 + 40 * v4;
  if (v6 >= v7 || v6 + 40 * v4 <= a3)
  {
    sub_1000080B4(&qword_100292D98);
    swift_arrayInitWithCopy(a3);
    return v7;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_10013497C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_100134A6C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v6 = a4 + 8 * a1 + 32;
    v7 = a3 + 8 * v4;
    if (v6 >= v7 || v6 + 8 * v4 <= a3)
    {
      sub_1000080B4(&qword_10028E850);
      swift_arrayInitWithCopy(a3);
      return v7;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_100134B74(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v5 = a4 + 72 * a1 + 32;
  v6 = a3 + 72 * v4;
  if (v5 >= v6 || v5 + 72 * v4 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v6;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100134C68(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v6 = a4 + 24 * a1 + 32;
  v7 = a3 + 24 * v4;
  if (v6 >= v7 || v6 + 24 * v4 <= a3)
  {
    sub_1000080B4(&qword_100292D48);
    swift_arrayInitWithCopy(a3);
    return v7;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100134D74(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v6;
  unint64_t v7;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v4 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v6 = a4 + 24 * a1 + 32;
  v7 = a3 + 24 * v4;
  if (v6 >= v7 || v6 + 24 * v4 <= a3)
  {
    sub_1000080B4(&qword_100292DA8);
    swift_arrayInitWithCopy(a3);
    return v7;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t _sSo13NSFileManagerC13appleaccountdE26createDirectoryIfNecessary3url10attributesSb10Foundation3URLV_SDySo0A12AttributeKeyaypGSgtFZ_0(uint64_t a1, Class isa)
{
  id v3;
  uint64_t v4;
  uint64_t v5;
  NSString v6;
  unsigned int v7;
  NSURL *v8;
  void *v9;
  void *v10;
  unsigned int v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  id v18;
  char v19;

  v3 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  v19 = 0;
  URL.path.getter();
  v5 = v4;
  v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v5);
  v7 = objc_msgSend(v3, "fileExistsAtPath:isDirectory:", v6, &v19);

  if (!v7)
  {
    URL._bridgeToObjectiveC()(v8);
    v10 = v9;
    if (isa)
    {
      type metadata accessor for FileAttributeKey(0);
      sub_100135214();
      isa = Dictionary._bridgeToObjectiveC()().super.isa;
    }
    v18 = 0;
    v11 = objc_msgSend(v3, "createDirectoryAtURL:withIntermediateDirectories:attributes:error:", v10, 1, isa, &v18);

    v12 = v18;
    if (!v11)
    {
      v14 = v18;
      v15 = _convertNSErrorToError(_:)(v12);

      swift_willThrow(v16);
      swift_errorRelease(v15);
      return v7 ^ 1;
    }
    v13 = v18;
  }

  return v7 ^ 1;
}

uint64_t sub_100134FF8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v5 < 0)
  {
LABEL_9:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
    goto LABEL_11;
  }
  v9 = *(_QWORD *)(a5(0) - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = *(_QWORD *)(v9 + 72);
  v12 = a4 + ((v10 + 32) & ~v10) + v11 * a1;
  v13 = v11 * v5;
  v14 = a3 + v13;
  v15 = v12 + v13;
  if (v12 >= v14 || v15 <= a3)
  {
    swift_arrayInitWithCopy(a3);
    return v14;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_100135110(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  unint64_t v7;
  unint64_t v8;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v5 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v7 = a4 + 16 * a1 + 32;
    v8 = a3 + 16 * v5;
    if (v7 >= v8 || v7 + 16 * v5 <= a3)
    {
      sub_1000080B4(a5);
      swift_arrayInitWithCopy(a3);
      return v8;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

unint64_t sub_100135214()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10028B6B8;
  if (!qword_10028B6B8)
  {
    type metadata accessor for FileAttributeKey(255);
    result = swift_getWitnessTable(&unk_100217EB0, v1);
    atomic_store(result, (unint64_t *)&qword_10028B6B8);
  }
  return result;
}

uint64_t type metadata accessor for AnalyticsRTCReporter()
{
  return objc_opt_self(_TtC13appleaccountd20AnalyticsRTCReporter);
}

uint64_t type metadata accessor for CustodianHealthCheckAnalyticsEvent(uint64_t a1)
{
  uint64_t result;

  result = qword_100292EE0;
  if (!qword_100292EE0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CustodianHealthCheckAnalyticsEvent);
  return result;
}

void sub_1001352B8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD v5[10];

  v2 = qword_1002A8B68;
  v5[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v5[1] = "\t";
  v5[2] = &unk_10021DBB0;
  v5[3] = &unk_10021DBB0;
  v5[4] = (char *)&value witness table for Builtin.Int64 + 64;
  v5[5] = &unk_10021DBC8;
  v5[6] = "\t";
  v5[7] = &unk_10021DBC8;
  v5[8] = &unk_10021DBC8;
  sub_1000AAD84(319);
  if (v4 <= 0x3F)
  {
    v5[9] = *(_QWORD *)(v3 - 8) + 64;
    swift_initClassMetadata2(a1, 0, 10, v5, a1 + v2);
  }
}

uint64_t sub_100135370(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1001353AC
                                                                     + 4 * a5[a1]))(0xD000000000000012, 0x800000010020D660);
}

uint64_t sub_1001353AC()
{
  return 0x6D75736B63656863;
}

uint64_t sub_1001353D0()
{
  return 0x4B52436B63656863;
}

uint64_t sub_10013541C()
{
  return 0x697373694D636B72;
}

unint64_t sub_100135440()
{
  return 0xD000000000000010;
}

uint64_t sub_1001354A0(uint64_t a1, char a2)
{
  _BYTE *v2;
  _QWORD *v5;
  char *v6;
  _QWORD *v7;
  _QWORD *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;

  *(_QWORD *)&v2[qword_100292E90] = _swiftEmptyArrayStorage;
  v2[qword_100292EA0] = 0;
  v2[qword_100292EA8] = 0;
  *(_QWORD *)&v2[qword_100292EB0] = -1;
  v5 = &v2[qword_100292EB8];
  *v5 = 0;
  v5[1] = 0;
  v6 = &v2[qword_100292EC0];
  *(_QWORD *)v6 = 0;
  v6[8] = 1;
  v7 = &v2[qword_100292EC8];
  *v7 = 0;
  v7[1] = 0;
  v8 = &v2[qword_100292ED0];
  *v8 = 0;
  v8[1] = 0;
  v9 = v2;
  v10 = sub_1000080B4((uint64_t *)&unk_10028F448);
  Dependency.init(dependencyId:config:)(0, 0, 0, v10);
  v11 = &v9[qword_100292E98];
  *(_QWORD *)v11 = a1;
  v11[8] = a2 & 1;

  v12 = sub_10006A7EC((uint64_t)_swiftEmptyArrayStorage);
  return AAFTimedAnalyticsEvent.init(eventName:initialData:)(0xD00000000000002BLL, 0x800000010020D550, v12);
}

void sub_1001355D0(char a1, unsigned __int8 a2)
{
  uint64_t v2;
  SEL *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v8;
  char **v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  id v13;
  uint64_t v14;
  SEL *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  NSString v21;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v23;
  Class isa;
  char v25;
  unint64_t v26;
  Class v27;
  char v28;
  unint64_t v29;
  Class v30;
  char v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSString v35;
  char v36;
  unint64_t v37;
  Class v38;
  char v39;
  unint64_t v40;
  uint64_t v41;
  NSString v42;
  char v43;
  unint64_t v44;
  Class v45;
  char v46;
  unint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  id v50;
  void *v51;
  Class v52;
  char v53;
  unint64_t v54;
  id v55;
  uint64_t v56;
  char v57;
  unint64_t v58;
  id v59;
  void *v60;
  Class v61;
  char v62;
  unint64_t v63;
  id v64;
  uint64_t v65;
  char v66;
  unint64_t v67;
  id v68;
  void *v69;
  Class v70;
  char v71;
  unint64_t v72;
  id v73;
  uint64_t v74;
  char v75;
  unint64_t v76;
  id v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89[4];
  _QWORD v90[5];
  unint64_t v91;

  v5 = v2;
  v8 = sub_1000080B4(&qword_10028F658);
  v9 = *(char ***)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v12 = (char *)&v87 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (objc_msgSend((id)objc_opt_self(AADeviceInfo), "isInternalBuild"))
  {
    v13 = objc_msgSend((id)objc_opt_self(NSProcessInfo), "processInfo");
    v3 = (SEL *)objc_msgSend(v13, "environment");

    v14 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v3, &type metadata for String, &type metadata for String, &protocol witness table for String);
    if (*(_QWORD *)(v14 + 16))
    {
      sub_10010A9E0(0xD00000000000001BLL, 0x800000010020AFA0);
      v3 = v15;
      swift_bridgeObjectRelease(v14);
      if ((v3 & 1) != 0)
        return;
    }
    else
    {
      swift_bridgeObjectRelease(v14);
    }
  }
  ((void (*)(char *, uint64_t, uint64_t))v9[2])(v12, v5 + qword_100292ED8, v8);
  Dependency.wrappedValue.getter(v90, v8);
  ((void (*)(char *, uint64_t))v9[1])(v12, v8);
  v16 = *sub_10000732C(v90, v90[3]);
  v17 = sub_1000080B4(&qword_10028F8B8);
  OS_dispatch_queue.sync<A>(execute:)(v89, sub_1000AAE2C, v16, v17);
  v18 = v89[0];
  sub_1001CE0B4(v89[0]);
  v20 = v19;
  swift_bridgeObjectRelease(v18);
  v91 = v20;
  sub_100006F58(v90);
  v21 = String._bridgeToObjectiveC()();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v91);
  v90[0] = v91;
  v91 = 0x8000000000000000;
  sub_10001FC90((uint64_t)v21, 0x6E6F6973726576, 0xE700000000000000, isUniquelyReferenced_nonNull_native);
  v23 = v91;
  v91 = v90[0];
  swift_bridgeObjectRelease(v23);
  isa = Bool._bridgeToObjectiveC()().super.super.isa;
  v25 = swift_isUniquelyReferenced_nonNull_native(v91);
  v90[0] = v91;
  v91 = 0x8000000000000000;
  sub_10001FC90((uint64_t)isa, 0x6961706552646964, 0xE900000000000072, v25);
  v26 = v91;
  v91 = v90[0];
  swift_bridgeObjectRelease(v26);
  v27 = Bool._bridgeToObjectiveC()().super.super.isa;
  v28 = swift_isUniquelyReferenced_nonNull_native(v91);
  v90[0] = v91;
  v91 = 0x8000000000000000;
  sub_10001FC90((uint64_t)v27, 0xD000000000000013, 0x800000010020D500, v28);
  v29 = v91;
  v91 = v90[0];
  swift_bridgeObjectRelease(v29);
  v30 = Int._bridgeToObjectiveC()().super.super.isa;
  v31 = swift_isUniquelyReferenced_nonNull_native(v91);
  v90[0] = v91;
  v91 = 0x8000000000000000;
  sub_10001FC90((uint64_t)v30, 0xD000000000000018, 0x800000010020D520, v31);
  v32 = v91;
  v91 = v90[0];
  swift_bridgeObjectRelease(v32);
  sub_100135370(a2);
  v34 = v33;
  v35 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v34);
  v36 = swift_isUniquelyReferenced_nonNull_native(v91);
  v90[0] = v91;
  v91 = 0x8000000000000000;
  sub_10001FC90((uint64_t)v35, 0x6E6F73616572, 0xE600000000000000, v36);
  v37 = v91;
  v91 = v90[0];
  swift_bridgeObjectRelease(v37);
  if ((*(_BYTE *)(v5 + qword_100292E98 + 8) & 1) != 0)
  {

  }
  else
  {
    v38 = Int._bridgeToObjectiveC()().super.super.isa;
    v39 = swift_isUniquelyReferenced_nonNull_native(v91);
    v90[0] = v91;
    v91 = 0x8000000000000000;
    sub_10001FC90((uint64_t)v38, 0xD000000000000012, 0x800000010020B690, v39);
    v40 = v91;
    v91 = v90[0];
    swift_bridgeObjectRelease(v40);
  }
  v41 = *(_QWORD *)(v5 + qword_100292EB8 + 8);
  if (v41)
  {
    swift_bridgeObjectRetain(*(_QWORD *)(v5 + qword_100292EB8 + 8));
    v42 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v41);
    v43 = swift_isUniquelyReferenced_nonNull_native(v91);
    v90[0] = v91;
    v91 = 0x8000000000000000;
    sub_10001FC90((uint64_t)v42, 0x646C6975426B7263, 0xEF6E6F6973726556, v43);
    v44 = v91;
    v91 = v90[0];
    swift_bridgeObjectRelease(v44);
  }
  else
  {

  }
  if ((*(_BYTE *)(v5 + qword_100292EC0 + 8) & 1) != 0)
  {

  }
  else
  {
    v45 = UInt._bridgeToObjectiveC()().super.super.isa;
    v46 = swift_isUniquelyReferenced_nonNull_native(v91);
    v90[0] = v91;
    v91 = 0x8000000000000000;
    sub_10001FC90((uint64_t)v45, 0x6F43726961706572, 0xEB00000000746E75, v46);
    v47 = v91;
    v91 = v90[0];
    swift_bridgeObjectRelease(v47);
  }
  v48 = (uint64_t *)(v5 + qword_100292E90);
  swift_beginAccess(v5 + qword_100292E90, v90, 0, 0);
  v49 = *v48;
  if ((unint64_t)*v48 >> 62)
  {
    if (v49 < 0)
      v79 = *v48;
    else
      v79 = v49 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*v48);
    v80 = _CocoaArrayWrapper.endIndex.getter(v79);
    swift_bridgeObjectRelease(v49);
    v49 = *v48;
    if (v80 < 2)
      goto LABEL_34;
  }
  else if (*(uint64_t *)((v49 & 0xFFFFFFFFFFFFF8) + 0x10) < 2)
  {
    goto LABEL_34;
  }
  if ((v49 & 0xC000000000000001) != 0)
    goto LABEL_54;
  if (*(_QWORD *)((v49 & 0xFFFFFFFFFFFFF8) + 0x10) < 2uLL)
  {
    __break(1u);
    goto LABEL_56;
  }
  v50 = *(id *)(v49 + 40);
  while (1)
  {
    v51 = (void *)sub_1001FE9A0();

    v3 = (SEL *)&off_100287000;
    objc_msgSend(v51, "code");
    v52 = Int._bridgeToObjectiveC()().super.super.isa;
    swift_beginAccess(&v91, v89, 33, 0);
    v53 = swift_isUniquelyReferenced_nonNull_native(v91);
    v88 = v91;
    v4 = 0x8000000000000000;
    v91 = 0x8000000000000000;
    sub_10001FC90((uint64_t)v52, 0xD000000000000014, 0x800000010020B7F0, v53);
    v54 = v91;
    v91 = v88;
    swift_bridgeObjectRelease(v54);
    swift_endAccess(v89);
    v9 = &off_100287000;
    v55 = objc_msgSend(v51, "domain");
    if (!v55)
      goto LABEL_70;
    v56 = (uint64_t)v55;
    swift_beginAccess(&v91, v89, 33, 0);
    v57 = swift_isUniquelyReferenced_nonNull_native(v91);
    v88 = v91;
    v91 = 0x8000000000000000;
    sub_10001FC90(v56, 0xD000000000000016, 0x800000010020B810, v57);
    v58 = v91;
    v91 = v88;
    swift_bridgeObjectRelease(v58);
    swift_endAccess(v89);

    v49 = *v48;
    if ((unint64_t)*v48 >> 62)
    {
LABEL_56:
      if (v49 < 0)
        v83 = v49;
      else
        v83 = v49 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v49);
      v84 = _CocoaArrayWrapper.endIndex.getter(v83);
      swift_bridgeObjectRelease(v49);
      v49 = *v48;
      if (v84 < 3)
        goto LABEL_34;
    }
    else if (*(uint64_t *)((v49 & 0xFFFFFFFFFFFFF8) + 0x10) < 3)
    {
      goto LABEL_34;
    }
    if ((v49 & 0xC000000000000001) != 0)
    {
      swift_bridgeObjectRetain(v49);
      v59 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(2, v49);
      swift_bridgeObjectRelease(v49);
    }
    else
    {
      if (*(_QWORD *)((v49 & 0xFFFFFFFFFFFFF8) + 0x10) < 3uLL)
      {
        __break(1u);
        goto LABEL_63;
      }
      v59 = *(id *)(v49 + 48);
    }
    v60 = (void *)sub_1001FE9A0();

    objc_msgSend(v60, v3[285]);
    v61 = Int._bridgeToObjectiveC()().super.super.isa;
    swift_beginAccess(&v91, v89, 33, 0);
    v62 = swift_isUniquelyReferenced_nonNull_native(v91);
    v88 = v91;
    v91 = v4;
    sub_10001FC90((uint64_t)v61, 0xD000000000000014, 0x800000010020B830, v62);
    v63 = v91;
    v91 = v88;
    swift_bridgeObjectRelease(v63);
    swift_endAccess(v89);
    v64 = objc_msgSend(v60, v9[286]);
    if (!v64)
      goto LABEL_71;
    v65 = (uint64_t)v64;
    swift_beginAccess(&v91, v89, 33, 0);
    v66 = swift_isUniquelyReferenced_nonNull_native(v91);
    v88 = v91;
    v91 = v4;
    sub_10001FC90(v65, 0xD000000000000016, 0x800000010020B850, v66);
    v67 = v91;
    v91 = v88;
    swift_bridgeObjectRelease(v67);
    swift_endAccess(v89);

    v49 = *v48;
    if (!((unint64_t)*v48 >> 62))
    {
      if (*(uint64_t *)((v49 & 0xFFFFFFFFFFFFF8) + 0x10) < 4)
        goto LABEL_34;
      goto LABEL_29;
    }
LABEL_63:
    if (v49 < 0)
      v85 = v49;
    else
      v85 = v49 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v49);
    v86 = _CocoaArrayWrapper.endIndex.getter(v85);
    swift_bridgeObjectRelease(v49);
    v49 = *v48;
    if (v86 < 4)
      goto LABEL_34;
LABEL_29:
    if ((v49 & 0xC000000000000001) != 0)
    {
      swift_bridgeObjectRetain(v49);
      v68 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(3, v49);
      swift_bridgeObjectRelease(v49);
      goto LABEL_32;
    }
    if (*(_QWORD *)((v49 & 0xFFFFFFFFFFFFF8) + 0x10) < 4uLL)
      break;
    v68 = *(id *)(v49 + 56);
LABEL_32:
    v69 = (void *)sub_1001FE9A0();

    objc_msgSend(v69, v3[285]);
    v70 = Int._bridgeToObjectiveC()().super.super.isa;
    swift_beginAccess(&v91, v89, 33, 0);
    v71 = swift_isUniquelyReferenced_nonNull_native(v91);
    v88 = v91;
    v91 = 0x8000000000000000;
    sub_10001FC90((uint64_t)v70, 0xD000000000000014, 0x800000010020B870, v71);
    v72 = v91;
    v91 = v88;
    swift_bridgeObjectRelease(v72);
    swift_endAccess(v89);
    v73 = objc_msgSend(v69, v9[286]);
    if (!v73)
      goto LABEL_72;
    v74 = (uint64_t)v73;
    swift_beginAccess(&v91, v89, 33, 0);
    v75 = swift_isUniquelyReferenced_nonNull_native(v91);
    v88 = v91;
    v91 = 0x8000000000000000;
    sub_10001FC90(v74, 0xD000000000000016, 0x800000010020B890, v75);
    v76 = v91;
    v91 = v88;
    swift_bridgeObjectRelease(v76);
    swift_endAccess(v89);

    v49 = *v48;
LABEL_34:
    if ((unint64_t)v49 >> 62)
    {
      if (v49 < 0)
        v81 = v49;
      else
        v81 = v49 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v49);
      v48 = (uint64_t *)_CocoaArrayWrapper.endIndex.getter(v81);
      if (!v48)
      {
LABEL_49:
        swift_bridgeObjectRelease(v49);
        goto LABEL_50;
      }
    }
    else
    {
      v48 = *(uint64_t **)((v49 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(v49);
      if (!v48)
        goto LABEL_49;
    }
    if ((v49 & 0xC000000000000001) != 0)
    {
      v77 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v49);
      goto LABEL_39;
    }
    if (*(_QWORD *)((v49 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      v77 = *(id *)(v49 + 32);
LABEL_39:
      v78 = v77;
      swift_bridgeObjectRelease(v49);
      v48 = (uint64_t *)sub_1001FE9A0();

LABEL_50:
      swift_beginAccess(&v91, v89, 0, 0);
      v82 = v91;
      swift_bridgeObjectRetain(v91);
      dispatch thunk of AAFTimedAnalyticsEvent.completeEvent(withSuccess:error:additionalData:)(a1 & 1, v48, v82);
      swift_bridgeObjectRelease(v82);

      swift_bridgeObjectRelease(v91);
      return;
    }
    __break(1u);
LABEL_54:
    swift_bridgeObjectRetain(v49);
    v50 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(1, v49);
    swift_bridgeObjectRelease(v49);
  }
  __break(1u);
LABEL_70:
  __break(1u);
LABEL_71:
  __break(1u);
LABEL_72:
  __break(1u);
}

void sub_100136194()
{
  _swift_stdlib_reportUnimplementedInitializer("appleaccountd.CustodianHealthCheckAnalyticsEvent", 48, "init(eventName:initialData:)", 28, 0);
  __break(1u);
}

uint64_t sub_1001361C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + qword_100292E90));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + qword_100292EB8 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + qword_100292EC8 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + qword_100292ED0 + 8));
  v1 = v0 + qword_100292ED8;
  v2 = sub_1000080B4(&qword_10028F658);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
}

id sub_10013624C()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CustodianHealthCheckAnalyticsEvent(0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_100136280(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + qword_100292E90));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + qword_100292EB8 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + qword_100292EC8 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + qword_100292ED0 + 8));
  v2 = a1 + qword_100292ED8;
  v3 = sub_1000080B4(&qword_10028F658);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
}

uint64_t sub_100136310()
{
  return type metadata accessor for CustodianHealthCheckAnalyticsEvent(0);
}

uint64_t (*sub_100136318(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + qword_100292E90, a1, 33, 0);
  return j__swift_endAccess;
}

uint64_t sub_10013635C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  unint64_t v7;
  char v8;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v3 = v2;
  v6 = *v3;
  swift_bridgeObjectRetain(*v3);
  v7 = sub_10010A9E0(a1, a2);
  LOBYTE(a2) = v8;
  swift_bridgeObjectRelease(v6);
  if ((a2 & 1) == 0)
    return 0;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  v10 = *v3;
  v14 = *v3;
  *v3 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_100020978();
    v10 = v14;
  }
  swift_bridgeObjectRelease(*(_QWORD *)(*(_QWORD *)(v10 + 48) + 16 * v7 + 8));
  v11 = *(_QWORD *)(*(_QWORD *)(v10 + 56) + 8 * v7);
  sub_100136428(v7, v10);
  v12 = *v3;
  *v3 = v10;
  swift_bridgeObjectRelease(v12);
  return v11;
}

unint64_t sub_100136428(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  Swift::Int v12;
  unint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  _QWORD v26[9];

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v9 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * v6);
        v10 = *v9;
        v11 = v9[1];
        Hasher.init(_seed:)(v26);
        swift_bridgeObjectRetain(v11);
        String.hash(into:)(v26, v10, v11);
        v12 = Hasher._finalize()();
        result = swift_bridgeObjectRelease(v11);
        v13 = v12 & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v13 < v8)
            goto LABEL_5;
        }
        else if (v13 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v13)
        {
LABEL_11:
          v14 = *(_QWORD *)(a2 + 48);
          v15 = (_OWORD *)(v14 + 16 * v3);
          v16 = (_OWORD *)(v14 + 16 * v6);
          if (v3 != v6 || v15 >= v16 + 1)
            *v15 = *v16;
          v17 = *(_QWORD *)(a2 + 56);
          v18 = (_QWORD *)(v17 + 8 * v3);
          v19 = (_QWORD *)(v17 + 8 * v6);
          if (v3 != v6 || (v3 = v6, v18 >= v19 + 1))
          {
            *v18 = *v19;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v20 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v21 = *v20;
    v22 = (-1 << v3) - 1;
  }
  else
  {
    v20 = (uint64_t *)(v4 + 8 * (result >> 6));
    v22 = *v20;
    v21 = (-1 << result) - 1;
  }
  *v20 = v22 & v21;
  v23 = *(_QWORD *)(a2 + 16);
  v24 = __OFSUB__(v23, 1);
  v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v25;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

uint64_t sub_1001365FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v30[2];
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  _QWORD aBlock[5];
  uint64_t v36;

  v30[0] = a2;
  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v33 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v7);
  v9 = (char *)v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS(0);
  v31 = *(_QWORD *)(v10 - 8);
  v32 = v10;
  __chkstk_darwin(v10, v11);
  v13 = (char *)v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for URL(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(_QWORD *)(v15 + 64);
  __chkstk_darwin(v14, v17);
  v18 = (char *)v30 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30[1] = *(_QWORD *)(v3 + 32);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v18, a1, v14);
  v19 = *(unsigned __int8 *)(v15 + 80);
  v20 = (v19 + 16) & ~v19;
  v21 = (v16 + v20 + 7) & 0xFFFFFFFFFFFFFFF8;
  v22 = swift_allocObject(&unk_100269620, v21 + 16, v19 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(v22 + v20, v18, v14);
  v23 = (_QWORD *)(v22 + v21);
  *v23 = v30[0];
  v23[1] = a3;
  aBlock[4] = sub_100137514;
  v36 = v22;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000051D0;
  aBlock[3] = &unk_100269638;
  v24 = _Block_copy(aBlock);
  v25 = swift_retain(a3);
  static DispatchQoS.unspecified.getter(v25);
  v34 = &_swiftEmptyArrayStorage;
  v26 = sub_100005150((unint64_t *)&qword_10028CD20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v27 = sub_1000080B4((uint64_t *)&unk_100295A00);
  v28 = sub_1000077A0((unint64_t *)&qword_10028CD30, (uint64_t *)&unk_100295A00);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v34, v27, v28, v6, v26);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v13, v9, v24);
  _Block_release(v24);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v9, v6);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v13, v32);
  return swift_release(v36);
}

uint64_t sub_100136870(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  id v9;
  NSURL *v10;
  void *v11;
  void *v12;
  unsigned int v13;
  id v14;
  id v15;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  os_log_t v35;
  uint64_t *v36;
  void *v37;
  uint64_t (*v38)(uint64_t, _QWORD);
  uint64_t v39;
  uint64_t v40;
  id v41;

  v4 = type metadata accessor for URL(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  URL._bridgeToObjectiveC()(v10);
  v12 = v11;
  v41 = 0;
  v13 = objc_msgSend(v9, "removeItemAtURL:error:", v11, &v41);

  v14 = v41;
  if (v13)
  {
    v15 = v41;
    return a2(1, 0);
  }
  else
  {
    v17 = v41;
    v18 = _convertNSErrorToError(_:)(v14);

    swift_willThrow(v19);
    if (qword_10028ADE8 != -1)
      swift_once(&qword_10028ADE8, sub_100046DC4);
    v20 = type metadata accessor for Logger(0);
    sub_100005288(v20, (uint64_t)qword_1002A8A38);
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, a1, v4);
    swift_errorRetain(v18);
    v21 = swift_errorRetain(v18);
    v22 = Logger.logObject.getter(v21);
    v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      v24 = swift_slowAlloc(22, -1);
      v38 = a2;
      v25 = v24;
      v36 = (uint64_t *)swift_slowAlloc(8, -1);
      v37 = (void *)swift_slowAlloc(32, -1);
      v41 = v37;
      *(_DWORD *)v25 = 136315394;
      v35 = v22;
      v26 = sub_100005150((unint64_t *)&qword_10028F3B0, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
      v27 = dispatch thunk of CustomStringConvertible.description.getter(v4, v26);
      v29 = v28;
      v39 = sub_1001DEF4C(v27, v28, (uint64_t *)&v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40);
      swift_bridgeObjectRelease(v29);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
      *(_WORD *)(v25 + 12) = 2112;
      v30 = _convertErrorToNSError(_:)(v18);
      v39 = v30;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40);
      v31 = v36;
      *v36 = v30;
      swift_errorRelease(v18);
      swift_errorRelease(v18);
      v22 = v35;
      _os_log_impl((void *)&_mh_execute_header, v35, v23, "Error deleting record at %s from LocalCache: %@", (uint8_t *)v25, 0x16u);
      v32 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v31, 1, v32);
      swift_slowDealloc(v31, -1, -1);
      v33 = v37;
      swift_arrayDestroy(v37, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v33, -1, -1);
      v34 = v25;
      a2 = v38;
      swift_slowDealloc(v34, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
      swift_errorRelease(v18);
      swift_errorRelease(v18);
    }

    swift_errorRetain(v18);
    a2(v18, 1);
    swift_errorRelease(v18);
    return swift_errorRelease(v18);
  }
}

uint64_t sub_100136C2C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));

  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocClassInstance(v0, 48, 7);
}

_QWORD *sub_100136C68()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  void *v23;

  v22 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v1 = *(_QWORD *)(v22 - 8);
  __chkstk_darwin(v22, v2);
  v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v5, v6);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v9, v10);
  v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for JSONEncoder(0);
  swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
  v0[2] = JSONEncoder.init()();
  v14 = type metadata accessor for JSONDecoder(0);
  v15 = swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
  v0[3] = JSONDecoder.init()(v15);
  v16 = sub_100007764();
  static DispatchQoS.unspecified.getter(v16);
  v23 = &_swiftEmptyArrayStorage;
  v17 = sub_100005150((unint64_t *)&qword_10028C6D0, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v18 = sub_1000080B4(&qword_10028B9F0);
  v19 = sub_1000077A0((unint64_t *)&qword_10028C6E0, &qword_10028B9F0);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v23, v18, v19, v5, v17);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v4, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v22);
  v0[4] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000023, 0x800000010020D760, v12, v8, v4, 0);
  v20 = type metadata accessor for DataCryptor(0);
  swift_allocObject(v20, *(unsigned int *)(v20 + 48), *(unsigned __int16 *)(v20 + 52));
  v0[5] = sub_1001A7AE4(0xD000000000000017, 0x800000010020D740, 0x614364726F636572, 0xEB00000000656863);
  return v0;
}

uint64_t sub_100136EC4(void (*a1)(uint64_t))
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  NSString v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  id v17;
  NSURL *v18;
  void *v19;
  void *v20;
  unsigned int v21;
  id v22;
  id v23;
  id v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  _QWORD *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  uint64_t v36;

  v2 = type metadata accessor for URL(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for LocalCache();
  sub_10000840C();
  v7 = (void *)objc_opt_self(NSFileManager);
  v8 = objc_msgSend(v7, "defaultManager");
  URL.path.getter();
  v10 = v9;
  v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v10);
  LODWORD(v10) = objc_msgSend(v8, "fileExistsAtPath:", v11);

  if ((_DWORD)v10)
  {
    if (qword_10028ADE8 != -1)
      swift_once(&qword_10028ADE8, sub_100046DC4);
    v12 = type metadata accessor for Logger(0);
    v13 = sub_100005288(v12, (uint64_t)qword_1002A8A38);
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Removing the storage container…", v16, 2u);
      swift_slowDealloc(v16, -1, -1);
    }

    v17 = objc_msgSend(v7, "defaultManager");
    URL._bridgeToObjectiveC()(v18);
    v20 = v19;
    v35 = 0;
    v21 = objc_msgSend(v17, "removeItemAtURL:error:", v19, &v35);

    v22 = v35;
    if (v21)
    {
      v23 = v35;
      goto LABEL_8;
    }
    v25 = v35;
    v26 = _convertNSErrorToError(_:)(v22);

    swift_willThrow();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
    v27 = swift_errorRetain(v26);
    v28 = Logger.logObject.getter(v27);
    v29 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v28, v29))
    {
      v30 = (uint8_t *)swift_slowAlloc(12, -1);
      v31 = (_QWORD *)swift_slowAlloc(8, -1);
      *(_DWORD *)v30 = 138412290;
      v32 = (void *)_convertErrorToNSError(_:)(v26);
      v35 = v32;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, &v36);
      *v31 = v32;
      swift_errorRelease(v26);
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "Error removing the storage container:\n%@", v30, 0xCu);
      v33 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v31, 1, v33);
      swift_slowDealloc(v31, -1, -1);
      swift_slowDealloc(v30, -1, -1);

      if (!a1)
        return swift_errorRelease(v26);
    }
    else
    {
      swift_errorRelease(v26);

      if (!a1)
        return swift_errorRelease(v26);
    }
    swift_errorRetain(v26);
    a1(v26);
    swift_errorRelease(v26);
    return swift_errorRelease(v26);
  }
LABEL_8:
  if (a1)
    a1(0);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v2);
}

void sub_10013729C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  id v13;
  unint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;

  v2 = type metadata accessor for CryptoKitError(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = a1;
  swift_errorRetain(a1);
  v7 = sub_1000080B4(&qword_10028E850);
  if ((swift_dynamicCast((char *)&v17 + 7, &v18, v7, &type metadata for CryptoError, 6) & 1) == 0)
  {
    v18 = a1;
    swift_errorRetain(a1);
    if (!swift_dynamicCast(v6, &v18, v7, v2, 6))
      return;
    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  }
  if (qword_10028ADE8 != -1)
    swift_once(&qword_10028ADE8, sub_100046DC4);
  v8 = type metadata accessor for Logger(0);
  v9 = sub_100005288(v8, (uint64_t)qword_1002A8A38);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Error was of type CryptoError, wiping local records", v12, 2u);
    swift_slowDealloc(v12, -1, -1);
  }

  sub_100136EC4(0);
  v13 = objc_allocWithZone((Class)type metadata accessor for CustodianMigrationAnalyticsEvent(0));
  v14 = sub_10006A7EC((uint64_t)&_swiftEmptyArrayStorage);
  v15 = (void *)AAFTimedAnalyticsEvent.init(eventName:initialData:)(0xD000000000000029, 0x800000010020CC30, v14);
  v16 = (void *)_convertErrorToNSError(_:)(a1);
  sub_1001FEAFC(1, v16);

}

uint64_t sub_10013749C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for URL(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v6 + 8));
  return swift_deallocObject(v0, v6 + 16, v5);
}

uint64_t sub_100137514()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(type metadata accessor for URL(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  return sub_100136870(v0 + v2, *(uint64_t (**)(uint64_t, _QWORD))(v0 + ((*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t sub_100137558(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  _QWORD *v28;
  char *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  char v36;
  char v37;
  char v38;
  uint64_t v39;

  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = sub_1000080B4(&qword_100293170);
  v9 = *(_QWORD *)(v33 - 8);
  __chkstk_darwin(v33, v10);
  v34 = v1;
  v35 = a1;
  *(_BYTE *)(v1 + OBJC_IVAR____TtC13appleaccountd29FinalizeCustodianSetupMessage_skipHealthCheckOnSuccess) = 0;
  v13 = a1[3];
  v12 = a1[4];
  v14 = a1;
  v15 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000732C(v14, v13);
  v16 = sub_100137C64();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for FinalizeCustodianSetupMessage.CodingKeys, &type metadata for FinalizeCustodianSetupMessage.CodingKeys, v16, v13, v12);
  if (v2)
  {
    v24 = v34;
    v21 = v35;
    v22 = type metadata accessor for FinalizeCustodianSetupMessage(0);
    swift_deallocPartialClassInstance(v24, v22, *(unsigned int *)(*(_QWORD *)v24 + 48), *(unsigned __int16 *)(*(_QWORD *)v24 + 52));
    v31 = v21;
  }
  else
  {
    v17 = v5;
    v18 = v9;
    v38 = 0;
    v19 = sub_100025C9C();
    v20 = v33;
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v39, &type metadata for MessageType, &v38, v33, &type metadata for MessageType, v19);
    v24 = v34;
    *(_BYTE *)(v34 + 16) = v39;
    v37 = 1;
    v25 = sub_100005190((unint64_t *)&unk_10028BBB0, (uint64_t)&protocol conformance descriptor for UUID);
    v26 = v15;
    v27 = v8;
    v28 = v8;
    v29 = v26;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v28, v4, &v37, v20, v4, v25);
    (*(void (**)(uint64_t, char *, uint64_t))(v17 + 32))(v24 + OBJC_IVAR____TtC13appleaccountd29FinalizeCustodianSetupMessage_custodianID, v27, v4);
    v30 = OBJC_IVAR____TtC13appleaccountd29FinalizeCustodianSetupMessage_skipHealthCheckOnSuccess;
    *(_BYTE *)(v24 + OBJC_IVAR____TtC13appleaccountd29FinalizeCustodianSetupMessage_skipHealthCheckOnSuccess) = 0;
    v36 = 2;
    LOBYTE(v26) = KeyedDecodingContainer.decode(_:forKey:)(&v36, v20);
    (*(void (**)(char *, uint64_t))(v18 + 8))(v29, v20);
    *(_BYTE *)(v24 + v30) = v26 & 1;
    v31 = v35;
  }
  sub_100006F58(v31);
  return v24;
}

uint64_t sub_1001377FC()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0x6169646F74737563;
  if (*v0 != 1)
    v1 = 0xD000000000000018;
  if (*v0)
    return v1;
  else
    return 1701869940;
}

uint64_t sub_10013785C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100137E4C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100137880(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100137C64();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001378A8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100137C64();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001378D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC13appleaccountd29FinalizeCustodianSetupMessage_custodianID;
  v2 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_100137920()
{
  return type metadata accessor for FinalizeCustodianSetupMessage(0);
}

uint64_t type metadata accessor for FinalizeCustodianSetupMessage(uint64_t a1)
{
  uint64_t result;

  result = qword_100293098;
  if (!qword_100293098)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for FinalizeCustodianSetupMessage);
  return result;
}

uint64_t sub_100137964(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = &unk_10021DCE0;
  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    v4[2] = &unk_10021DCF8;
    result = swift_updateClassMetadata2(a1, 256, 3, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_1001379E4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;
  char v28;
  char v29;

  v3 = v1;
  v5 = type metadata accessor for UUID(0);
  v24 = *(_QWORD *)(v5 - 8);
  v25 = v5;
  __chkstk_darwin(v5, v6);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1000080B4(&qword_100293180);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1[3];
  v15 = a1[4];
  sub_10000732C(a1, v14);
  v16 = sub_100137C64();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for FinalizeCustodianSetupMessage.CodingKeys, &type metadata for FinalizeCustodianSetupMessage.CodingKeys, v16, v14, v15);
  v29 = *(_BYTE *)(v3 + 16);
  v28 = 0;
  v17 = sub_100025CE0();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v29, &v28, v9, &type metadata for MessageType, v17);
  if (v2)
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  v19 = v10;
  v21 = v24;
  v20 = v25;
  (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))(v8, v3 + OBJC_IVAR____TtC13appleaccountd29FinalizeCustodianSetupMessage_custodianID, v25);
  v27 = 1;
  v22 = sub_100005190((unint64_t *)&unk_10028DC20, (uint64_t)&protocol conformance descriptor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v8, &v27, v9, v20, v22);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v8, v20);
  v23 = *(unsigned __int8 *)(v3 + OBJC_IVAR____TtC13appleaccountd29FinalizeCustodianSetupMessage_skipHealthCheckOnSuccess);
  v26 = 2;
  KeyedEncodingContainer.encode(_:forKey:)(v23, &v26, v9);
  return (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v13, v9);
}

uint64_t sub_100137BEC@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v5 = type metadata accessor for FinalizeCustodianSetupMessage(0);
  v6 = swift_allocObject(v5, *(unsigned int *)(v5 + 48), *(unsigned __int16 *)(v5 + 52));
  result = sub_100137558(a1);
  if (!v2)
    *a2 = v6;
  return result;
}

uint64_t sub_100137C44(_QWORD *a1)
{
  return sub_1001379E4(a1);
}

unint64_t sub_100137C64()
{
  unint64_t result;

  result = qword_100293178;
  if (!qword_100293178)
  {
    result = swift_getWitnessTable(&unk_10021DE24, &type metadata for FinalizeCustodianSetupMessage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100293178);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for FinalizeCustodianSetupMessage.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_100137CF4 + 4 * byte_10021DC95[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_100137D28 + 4 * byte_10021DC90[v4]))();
}

uint64_t sub_100137D28(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100137D30(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100137D38);
  return result;
}

uint64_t sub_100137D44(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100137D4CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_100137D50(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100137D58(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FinalizeCustodianSetupMessage.CodingKeys()
{
  return &type metadata for FinalizeCustodianSetupMessage.CodingKeys;
}

unint64_t sub_100137D78()
{
  unint64_t result;

  result = qword_100293188;
  if (!qword_100293188)
  {
    result = swift_getWitnessTable(&unk_10021DDFC, &type metadata for FinalizeCustodianSetupMessage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100293188);
  }
  return result;
}

unint64_t sub_100137DC0()
{
  unint64_t result;

  result = qword_100293190;
  if (!qword_100293190)
  {
    result = swift_getWitnessTable(&unk_10021DD6C, &type metadata for FinalizeCustodianSetupMessage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100293190);
  }
  return result;
}

unint64_t sub_100137E08()
{
  unint64_t result;

  result = qword_100293198;
  if (!qword_100293198)
  {
    result = swift_getWitnessTable(&unk_10021DD94, &type metadata for FinalizeCustodianSetupMessage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100293198);
  }
  return result;
}

uint64_t sub_100137E4C(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  char v8;

  if (a1 == 1701869940 && a2 == 0xE400000000000000)
  {
    v5 = 0xE400000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1701869940, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6169646F74737563 && a2 == 0xEB0000000044496ELL)
  {
    v7 = 0xEB0000000044496ELL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6169646F74737563, 0xEB0000000044496ELL, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0xD000000000000018 && a2 == 0x800000010020D7D0)
  {
    swift_bridgeObjectRelease(0x800000010020D7D0);
    return 2;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000018, 0x800000010020D7D0, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t type metadata accessor for CDPContextProvider()
{
  return objc_opt_self(_TtC13appleaccountd18CDPContextProvider);
}

uint64_t sub_100137FC4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_allocObject(&unk_1002697D0, 40, 7);
  v5[2] = v2;
  v5[3] = a1;
  v5[4] = a2;
  swift_retain(v2);
  swift_retain(a2);
  sub_10019F2A4((uint64_t)sub_100138168, (uint64_t)v5);
  return swift_release(v5);
}

uint64_t sub_100138030(uint64_t a1, char a2, uint64_t a3, void (*a4)(uint64_t, uint64_t), uint64_t a5)
{
  _QWORD *v9;

  if ((a2 & 1) != 0)
  {
    swift_errorRetain(a1);
    a4(a1, 1);
    return sub_1000057B0(a1, 1);
  }
  else
  {
    sub_10000732C((_QWORD *)(a3 + 56), *(_QWORD *)(a3 + 80));
    v9 = (_QWORD *)swift_allocObject(&unk_1002697F8, 48, 7);
    v9[2] = a3;
    v9[3] = a1;
    v9[4] = a4;
    v9[5] = a5;
    swift_retain(a3);
    sub_1000057BC(a1, 0);
    swift_retain(a5);
    sub_100006A8C((uint64_t)sub_1001384C8, (uint64_t)v9);
    return swift_release(v9);
  }
}

uint64_t sub_100138114()
{
  uint64_t v0;

  return sub_100006F58((_QWORD *)(v0 + 56));
}

uint64_t type metadata accessor for InheritanceFamilyManager()
{
  return objc_opt_self(_TtC13appleaccountd24InheritanceFamilyManager);
}

uint64_t sub_10013813C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100138168(uint64_t a1, char a2)
{
  uint64_t v2;

  return sub_100138030(a1, a2 & 1, *(_QWORD *)(v2 + 16), *(void (**)(uint64_t, uint64_t))(v2 + 24), *(_QWORD *)(v2 + 32));
}

uint64_t sub_100138178(uint64_t a1, char a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t))
{
  unint64_t v8;
  _QWORD *v9;

  if ((a2 & 1) != 0)
  {
    swift_errorRetain(a1);
    a5(a1, 1);
    return sub_1000057B0(a1, 1);
  }
  else
  {
    sub_1000057BC(a1, 0);
    swift_bridgeObjectRetain(a4);
    v9 = sub_10013823C(v8, a1);
    sub_1000057B0(a1, 0);
    swift_bridgeObjectRelease(a4);
    a5((uint64_t)v9, 0);
    return swift_bridgeObjectRelease(v9);
  }
}

_QWORD *sub_10013823C(unint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t i;
  unint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  id v34;

  v3 = a1;
  if (a1 >> 62)
    goto LABEL_28;
  for (i = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10); i; i = _CocoaArrayWrapper.endIndex.getter(v26))
  {
    v5 = 0;
    v31 = v3 & 0xFFFFFFFFFFFFFF8;
    v32 = v3 & 0xC000000000000001;
    v29 = a2;
    v30 = v3 + 32;
    v27 = i;
    v28 = v3;
    while (1)
    {
      if (v32)
      {
        v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v5, v3);
        goto LABEL_10;
      }
      if (v5 >= *(_QWORD *)(v31 + 16))
        break;
      v6 = *(id *)(v30 + 8 * v5);
LABEL_10:
      v34 = v6;
      if (__OFADD__(v5++, 1))
        goto LABEL_27;
      v10 = *(_QWORD *)(a2 + 16);
      if (!v10)
      {
LABEL_5:
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v6);
        v7 = _swiftEmptyArrayStorage[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v7);
        v8 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v7, v34);
        specialized ContiguousArray._endMutation()(v8);
        goto LABEL_6;
      }
      v33 = v5;
      v11 = type metadata accessor for BeneficiaryInfoRecord(0);
      v12 = *(_QWORD *)(v11 - 8);
      v13 = a2 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
      v14 = *(_QWORD *)(v12 + 72);
      swift_bridgeObjectRetain(a2);
      while (1)
      {
        v15 = (uint64_t *)(v13 + *(int *)(v11 + 20));
        v16 = *v15;
        v17 = v15[1];
        v18 = objc_msgSend(v34, "handle", swift_bridgeObjectRetain(v17).n128_f64[0]);
        v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
        v21 = v20;

        if (!v17)
        {
          swift_bridgeObjectRelease(v21);
          goto LABEL_14;
        }
        if (v16 == v19 && v17 == v21)
          break;
        v23 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v17, v19, v21, 0);
        swift_bridgeObjectRelease(v17);
        swift_bridgeObjectRelease(v21);
        if ((v23 & 1) != 0)
        {

          a2 = v29;
          v24 = v29;
          goto LABEL_23;
        }
LABEL_14:
        v13 += v14;
        if (!--v10)
        {
          a2 = v29;
          v6 = (id)swift_bridgeObjectRelease(v29);
          i = v27;
          v3 = v28;
          v5 = v33;
          goto LABEL_5;
        }
      }

      a2 = v29;
      swift_bridgeObjectRelease(v29);
      swift_bridgeObjectRelease(v17);
      v24 = v21;
LABEL_23:
      swift_bridgeObjectRelease(v24);
      i = v27;
      v3 = v28;
      v5 = v33;
LABEL_6:
      if (v5 == i)
        return _swiftEmptyArrayStorage;
    }
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    if (v3 < 0)
      v26 = v3;
    else
      v26 = v3 & 0xFFFFFFFFFFFFFF8;
  }
  return _swiftEmptyArrayStorage;
}

uint64_t sub_100138494()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_bridgeObjectRelease(v0[3]);
  swift_release(v0[5]);
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1001384C8(uint64_t a1, char a2)
{
  uint64_t v2;

  return sub_100138178(a1, a2 & 1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(void (**)(uint64_t, uint64_t))(v2 + 32));
}

uint64_t sub_1001384D8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1001D21C8(*a1, *a2);
}

Swift::Int sub_1001384E4()
{
  unsigned __int8 *v0;
  int v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[9];

  v1 = *v0;
  Hasher.init(_seed:)(v7);
  v2 = 0xE800000000000000;
  v3 = 0x6465766F72707061;
  if (v1 != 1)
  {
    v3 = 0x6E776F6E6B6E75;
    v2 = 0xE700000000000000;
  }
  if (v1)
    v4 = v3;
  else
    v4 = 0x64657469766E69;
  if (v1)
    v5 = v2;
  else
    v5 = 0xE700000000000000;
  String.hash(into:)(v7, v4, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

uint64_t sub_100138584(uint64_t a1)
{
  _BYTE *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = 0xE800000000000000;
  v3 = 0x6465766F72707061;
  if (*v1 != 1)
  {
    v3 = 0x6E776F6E6B6E75;
    v2 = 0xE700000000000000;
  }
  if (*v1)
    v4 = v3;
  else
    v4 = 0x64657469766E69;
  if (*v1)
    v5 = v2;
  else
    v5 = 0xE700000000000000;
  String.hash(into:)(a1, v4, v5);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_100138600()
{
  unsigned __int8 *v0;
  int v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[9];

  v1 = *v0;
  Hasher.init(_seed:)(v7);
  v2 = 0xE800000000000000;
  v3 = 0x6465766F72707061;
  if (v1 != 1)
  {
    v3 = 0x6E776F6E6B6E75;
    v2 = 0xE700000000000000;
  }
  if (v1)
    v4 = v3;
  else
    v4 = 0x64657469766E69;
  if (v1)
    v5 = v2;
  else
    v5 = 0xE700000000000000;
  String.hash(into:)(v7, v4, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

unint64_t sub_10013869C@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_10013B068(*a1);
  *a2 = result;
  return result;
}

void sub_1001386C8(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE700000000000000;
  v4 = 0xE800000000000000;
  v5 = 0x6465766F72707061;
  if (v2 != 1)
  {
    v5 = 0x6E776F6E6B6E75;
    v4 = 0xE700000000000000;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x64657469766E69;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_100138728(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  _QWORD *v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v23[2];
  uint64_t v24;
  _QWORD *v25;
  _QWORD aBlock[5];
  _QWORD *v27;

  v7 = type metadata accessor for DispatchWorkItemFlags(0);
  v24 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7, v8);
  v10 = (char *)v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11, v13);
  v15 = (char *)v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23[1] = *(_QWORD *)(v3 + 32);
  v16 = (_QWORD *)swift_allocObject(&unk_100269A38, 48, 7);
  v16[2] = v3;
  v16[3] = a2;
  v16[4] = a3;
  v16[5] = a1;
  aBlock[4] = sub_10013C400;
  v27 = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000051D0;
  aBlock[3] = &unk_100269A50;
  v17 = _Block_copy(aBlock);
  swift_retain(v3);
  v18 = swift_retain(a3);
  static DispatchQoS.unspecified.getter(v18);
  v25 = _swiftEmptyArrayStorage;
  v19 = sub_100005150((unint64_t *)&qword_10028CD20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v20 = sub_1000080B4((uint64_t *)&unk_100295A00);
  v21 = sub_1000077A0((unint64_t *)&qword_10028CD30, (uint64_t *)&unk_100295A00);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v25, v20, v21, v7, v19);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v15, v10, v17);
  _Block_release(v17);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v10, v7);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  return swift_release(v27);
}

void sub_10013892C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t (*v8)(uint64_t (*)(uint64_t), uint64_t);
  objc_class *v9;
  _BYTE *v10;
  uint64_t (**v11)(uint64_t (*)(uint64_t), uint64_t);
  id v12;
  void *v13;
  objc_super v14;

  v8 = (uint64_t (*)(uint64_t (*)(uint64_t), uint64_t))swift_allocObject(&unk_100269A88, 48, 7);
  *((_QWORD *)v8 + 2) = a1;
  *((_QWORD *)v8 + 3) = a2;
  *((_QWORD *)v8 + 4) = a3;
  *((_QWORD *)v8 + 5) = a4;
  v9 = (objc_class *)type metadata accessor for AsyncOperation();
  v10 = objc_allocWithZone(v9);
  v10[OBJC_IVAR____TtC13appleaccountd14AsyncOperation_state] = 0;
  v11 = (uint64_t (**)(uint64_t (*)(uint64_t), uint64_t))&v10[OBJC_IVAR____TtC13appleaccountd14AsyncOperation_workBlock];
  *v11 = sub_10013C410;
  v11[1] = v8;
  v14.receiver = v10;
  v14.super_class = v9;
  swift_retain(a1);
  swift_retain(a3);
  v12 = objc_msgSendSuper2(&v14, "init");
  v13 = v12;
  if (*(_QWORD *)(a1 + OBJC_IVAR____TtC13appleaccountd38DaemonCustodianIdMSConfirmationHandler_fetchUserInfoOperation))
    objc_msgSend(v12, "addDependency:", v14.receiver, v14.super_class);
  objc_msgSend(*(id *)(a1 + 24), "addOperation:", v13, v14.receiver, v14.super_class);

}

uint64_t sub_100138A24(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t), uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  _QWORD v25[5];

  v10 = sub_1000080B4(&qword_10028FA50);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  v14 = (char *)&v25[-1] - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(_QWORD *)(a3 + 16);
  if (v15)
  {
    v16 = *(_QWORD *)(v15 + 16);
    if (v16)
    {
      v17 = v16 - a6;
      if (!__OFSUB__(v16, a6))
        goto LABEL_14;
      __break(1u);
    }
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v14, a3 + OBJC_IVAR____TtC13appleaccountd38DaemonCustodianIdMSConfirmationHandler__accountStore, v10);
  Dependency.wrappedValue.getter(v25, v10);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  sub_10000732C(v25, v25[3]);
  v18 = sub_100046610();
  if (v18)
  {
    v19 = (uint64_t)v18;
    sub_100006F58(v25);
    v20 = sub_10013B2A0(v19);
    result = swift_bridgeObjectRelease(v19);
    if (!v20)
      goto LABEL_12;
    v22 = v20[2];
    swift_bridgeObjectRelease(v20);
    v17 = v22 - a6;
    if (!__OFSUB__(v22, a6))
      goto LABEL_14;
    __break(1u);
  }
  result = sub_100006F58(v25);
LABEL_12:
  if (a6 != 0x8000000000000000)
  {
    v17 = -a6;
LABEL_14:
    v23 = a4(v17);
    return a1(v23);
  }
  __break(1u);
  return result;
}

BOOL sub_100138B90(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  _QWORD v24[5];

  v2 = v1;
  v4 = sub_1000080B4(&qword_10028FA50);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (char *)&v24[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v2 + OBJC_IVAR____TtC13appleaccountd38DaemonCustodianIdMSConfirmationHandler__accountStore, v4);
  Dependency.wrappedValue.getter(v24, v4);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  sub_10000732C(v24, v24[3]);
  v9 = sub_100046610();
  if (!v9)
  {
    sub_100006F58(v24);
    goto LABEL_6;
  }
  v10 = (uint64_t)v9;
  sub_100006F58(v24);
  v11 = sub_10013B2A0(v10);
  swift_bridgeObjectRelease(v10);
  if (!v11)
  {
LABEL_6:
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v18 = type metadata accessor for Logger(0);
    v19 = sub_100005288(v18, (uint64_t)qword_1002A8A08);
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.error.getter(v20);
    if (os_log_type_enabled(v20, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v22 = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Custodian Infos is not found on accountStore", v22, 2u);
      swift_slowDealloc(v22, -1, -1);
    }

    return 0;
  }
  v12 = *(_QWORD *)(v2 + 16);
  *(_QWORD *)(v2 + 16) = v11;
  swift_bridgeObjectRelease(v12);
  v13 = *(_QWORD *)(v2 + 16);
  if (v13)
  {
    swift_bridgeObjectRetain(*(_QWORD *)(v2 + 16));
    swift_bridgeObjectRetain(a1);
    v15 = sub_10013AD38(v14, v13);
    swift_bridgeObjectRelease(v13);
    v16 = *(_QWORD *)(v15 + 16);
    swift_bridgeObjectRelease(v15);
    return v16 == 0;
  }
  return 0;
}

uint64_t sub_100138D84()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  _QWORD *v18;
  _QWORD aBlock[5];
  uint64_t v20;

  v1 = type metadata accessor for DispatchWorkItemFlags(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *(_QWORD *)(v0 + 32);
  aBlock[4] = sub_10013C388;
  v20 = v0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000051D0;
  aBlock[3] = &unk_1002699D8;
  v11 = _Block_copy(aBlock);
  v12 = swift_retain(v0);
  static DispatchQoS.unspecified.getter(v12);
  v18 = _swiftEmptyArrayStorage;
  v13 = sub_100005150((unint64_t *)&qword_10028CD20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v14 = sub_1000080B4((uint64_t *)&unk_100295A00);
  v15 = sub_1000077A0((unint64_t *)&qword_10028CD30, (uint64_t *)&unk_100295A00);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v18, v14, v15, v1, v13);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v10, v5, v11);
  _Block_release(v11);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  return swift_release(v20);
}

void sub_100138F50(uint64_t a1)
{
  uint64_t v1;
  objc_class *v3;
  _BYTE *v4;
  void (**v5)(void (*)(void), uint64_t);
  id v6;
  void *v7;
  id v8;
  objc_super v9;

  v1 = OBJC_IVAR____TtC13appleaccountd38DaemonCustodianIdMSConfirmationHandler_fetchUserInfoOperation;
  if (!*(_QWORD *)(a1 + OBJC_IVAR____TtC13appleaccountd38DaemonCustodianIdMSConfirmationHandler_fetchUserInfoOperation))
  {
    v3 = (objc_class *)type metadata accessor for AsyncOperation();
    v4 = objc_allocWithZone(v3);
    v4[OBJC_IVAR____TtC13appleaccountd14AsyncOperation_state] = 0;
    v5 = (void (**)(void (*)(void), uint64_t))&v4[OBJC_IVAR____TtC13appleaccountd14AsyncOperation_workBlock];
    *v5 = sub_10013C390;
    v5[1] = (void (*)(void (*)(void), uint64_t))a1;
    v9.receiver = v4;
    v9.super_class = v3;
    swift_retain(a1);
    v6 = objc_msgSendSuper2(&v9, "init");
    v7 = *(void **)(a1 + v1);
    *(_QWORD *)(a1 + v1) = v6;
    v8 = v6;

    objc_msgSend(*(id *)(a1 + 24), "addOperation:", v8, v9.receiver, v9.super_class);
  }
}

void sub_10013900C(void (*a1)(void), uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  _QWORD *v16;
  id v17;
  void *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  void *v33;
  _QWORD v35[5];

  v6 = sub_1000080B4(&qword_100293528);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  v10 = (char *)&v35[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1000080B4(&qword_10028FA50);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11, v13);
  v15 = (char *)&v35[-1] - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = (_QWORD *)swift_allocObject(&unk_100269A10, 40, 7);
  v16[2] = a1;
  v16[3] = a2;
  v16[4] = a3;
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, a3 + OBJC_IVAR____TtC13appleaccountd38DaemonCustodianIdMSConfirmationHandler__accountStore, v11);
  swift_retain(a3);
  swift_retain(a2);
  Dependency.wrappedValue.getter(v35, v11);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  v17 = objc_msgSend(*(id *)(*sub_10000732C(v35, v35[3]) + 16), "aa_primaryAppleAccount");
  if (v17
    && (v18 = v17, v19 = objc_msgSend(v17, "aa_altDSID"), v18, v19))
  {
    v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
    v22 = v21;

    sub_100006F58(v35);
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v23 = type metadata accessor for Logger(0);
    v24 = sub_100005288(v23, (uint64_t)qword_1002A8A08);
    v25 = Logger.logObject.getter(v24);
    v26 = static os_log_type_t.error.getter(v25);
    if (os_log_type_enabled(v25, v26))
    {
      v27 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v27 = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Starting Fetch User Information in confirmation handler", v27, 2u);
      swift_slowDealloc(v27, -1, -1);
    }

    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, a3 + OBJC_IVAR____TtC13appleaccountd38DaemonCustodianIdMSConfirmationHandler__authController, v6);
    Dependency.wrappedValue.getter(v35, v6);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    swift_retain(a3);
    swift_retain(v16);
    sub_100182244(v20, v22, sub_10013C3C4, (uint64_t)v16, a3);
    swift_release(a3);
    swift_bridgeObjectRelease(v22);
    swift_release_n(v16, 2);
    sub_100006F58(v35);
  }
  else
  {
    sub_100006F58(v35);
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v28 = type metadata accessor for Logger(0);
    v29 = sub_100005288(v28, (uint64_t)qword_1002A8A08);
    v30 = Logger.logObject.getter(v29);
    v31 = static os_log_type_t.error.getter(v30);
    if (os_log_type_enabled(v30, v31))
    {
      v32 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v32 = 0;
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "altDSID missing", v32, 2u);
      swift_slowDealloc(v32, -1, -1);
    }

    a1();
    v33 = *(void **)(a3 + OBJC_IVAR____TtC13appleaccountd38DaemonCustodianIdMSConfirmationHandler_fetchUserInfoOperation);
    *(_QWORD *)(a3 + OBJC_IVAR____TtC13appleaccountd38DaemonCustodianIdMSConfirmationHandler_fetchUserInfoOperation) = 0;
    swift_release(v16);

  }
}

void sub_1001393B8(void *a1, uint64_t a2, void (*a3)(void), uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _UNKNOWN **v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint8_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  void *v28;
  uint64_t v29;
  uint8_t *v30;
  uint8_t *v31;
  id v32;
  id v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  void *v42;
  uint64_t v43;
  _QWORD *v44;
  _UNKNOWN **v45;
  uint64_t v46;
  id v47;
  Class isa;
  id v49;
  uint64_t v50;
  Class v51;
  uint64_t v52;
  uint64_t v53;
  NSObject *v54;
  __n128 v55;
  os_log_type_t v56;
  uint8_t *v57;
  uint64_t v58;
  uint64_t v59;
  NSObject *v60;
  os_log_type_t v61;
  uint8_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  NSObject *v66;
  os_log_type_t v67;
  uint8_t *v68;
  uint64_t v69;
  uint64_t v70;
  NSObject *v71;
  os_log_type_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  NSObject *v86;
  __n128 v87;
  os_log_type_t v88;
  uint8_t *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void (*v93)(void);
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  void *v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106[4];

  v103 = a5;
  v9 = sub_1000080B4(&qword_10028FA50);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  v102 = (char *)&v98 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = &off_10028A000;
  if (a2)
  {
    swift_errorRetain(a2);
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v14 = type metadata accessor for Logger(0);
    sub_100005288(v14, (uint64_t)qword_1002A8A08);
    swift_errorRetain(a2);
    v15 = swift_errorRetain(a2);
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.error.getter(v16);
    if (os_log_type_enabled(v16, v17))
    {
      v101 = v9;
      v18 = swift_slowAlloc(12, -1);
      v100 = v10;
      v19 = (uint8_t *)v18;
      v20 = (uint64_t *)swift_slowAlloc(8, -1);
      v99 = a1;
      *(_DWORD *)v19 = 138412290;
      swift_errorRetain(a2);
      v21 = _swift_stdlib_bridgeErrorToNSError(a2);
      v105 = v21;
      v13 = &off_10028A000;
      a1 = v99;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v105, v106);
      *v20 = v21;
      v9 = v101;
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Fetching User Information finished with error: %@", v19, 0xCu);
      v22 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v20, 1, v22);
      swift_slowDealloc(v20, -1, -1);
      v23 = v19;
      v10 = v100;
      swift_slowDealloc(v23, -1, -1);

      swift_errorRelease(a2);
      if (!a1)
        goto LABEL_22;
    }
    else
    {
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      swift_errorRelease(a2);

      if (!a1)
        goto LABEL_22;
    }
  }
  else
  {
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v24 = type metadata accessor for Logger(0);
    v25 = sub_100005288(v24, (uint64_t)qword_1002A8A08);
    v26 = Logger.logObject.getter(v25);
    v27 = static os_log_type_t.debug.getter(v26);
    if (os_log_type_enabled(v26, v27))
    {
      v28 = a1;
      v29 = v10;
      v30 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v30 = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "Fetching User Information finished successfully.", v30, 2u);
      v31 = v30;
      v10 = v29;
      a1 = v28;
      swift_slowDealloc(v31, -1, -1);
    }

    if (!a1)
      goto LABEL_22;
  }
  v32 = a1;
  if (objc_msgSend(v32, "respondsToSelector:", Selector.init(_:)(0x6169646F74737563, 0xEE00736F666E496ELL)))
  {
    v33 = objc_msgSend(v32, "custodianInfos");
    if (!v33
      || (v34 = v33,
          v35 = sub_1000080B4(&qword_10028C088),
          v36 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v34, v35),
          v34,
          v37 = sub_10013B2A0(v36),
          swift_bridgeObjectRelease(v36),
          !v37))
    {
      if (v13[443] != (_UNKNOWN *)-1)
        swift_once(&qword_10028ADD8, sub_100046D78);
      v58 = type metadata accessor for Logger(0);
      v59 = sub_100005288(v58, (uint64_t)qword_1002A8A08);
      v60 = Logger.logObject.getter(v59);
      v61 = static os_log_type_t.error.getter(v60);
      if (os_log_type_enabled(v60, v61))
      {
        v62 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v62 = 0;
        _os_log_impl((void *)&_mh_execute_header, v60, v61, "User information did not return any custodian statuses", v62, 2u);
        swift_slowDealloc(v62, -1, -1);
      }

      goto LABEL_49;
    }
    v38 = v103;
    v39 = *(_QWORD *)(v103 + 16);
    *(_QWORD *)(v103 + 16) = v37;
    swift_bridgeObjectRetain(v37);
    swift_bridgeObjectRelease(v39);
    v40 = v38 + OBJC_IVAR____TtC13appleaccountd38DaemonCustodianIdMSConfirmationHandler__accountStore;
    v41 = v102;
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v102, v40, v9);
    Dependency.wrappedValue.getter(&v105, v9);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v41, v9);
    sub_10000732C(&v105, v106[2]);
    v42 = sub_100046610();
    if (v42)
    {
      v43 = (uint64_t)v42;
      sub_100006F58(&v105);
      v44 = sub_10013B2A0(v43);
      swift_bridgeObjectRelease(v43);
      if (v44)
      {
        v45 = v13;
        v102 = (char *)a3;
        v103 = a4;
        v46 = sub_1001CE354((uint64_t)v44);
        v47 = objc_allocWithZone((Class)NSDictionary);
        isa = Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v46);
        v49 = objc_msgSend(v47, "initWithDictionary:", isa);

        v50 = sub_1001CE354((uint64_t)v37);
        v51 = Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v50);
        LOBYTE(v50) = objc_msgSend(v49, "isEqualToDictionary:", v51);

        if ((v50 & 1) != 0)
        {
          swift_bridgeObjectRelease(v44);
          a3 = (void (*)(void))v102;
          a4 = v103;
        }
        else
        {
          if (v13[443] != (_UNKNOWN *)-1)
            swift_once(&qword_10028ADD8, sub_100046D78);
          v69 = type metadata accessor for Logger(0);
          sub_100005288(v69, (uint64_t)qword_1002A8A08);
          swift_bridgeObjectRetain_n(v37, 2);
          swift_bridgeObjectRetain(v44);
          v71 = Logger.logObject.getter(v70);
          v72 = static os_log_type_t.error.getter(v71);
          if (os_log_type_enabled(v71, v72))
          {
            v73 = swift_slowAlloc(22, -1);
            v101 = swift_slowAlloc(64, -1);
            v105 = v101;
            *(_DWORD *)v73 = 136315394;
            swift_bridgeObjectRetain(v44);
            v75 = Dictionary.description.getter(v74, &type metadata for String, &type metadata for CustodianIdMSStatus, &protocol witness table for String);
            v77 = v76;
            swift_bridgeObjectRelease(v44);
            v104 = sub_1001DEF4C(v75, v77, &v105);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v104, &v105);
            swift_bridgeObjectRelease_n(v44, 2);
            swift_bridgeObjectRelease(v77);
            *(_WORD *)(v73 + 12) = 2080;
            swift_bridgeObjectRetain(v37);
            v79 = Dictionary.description.getter(v78, &type metadata for String, &type metadata for CustodianIdMSStatus, &protocol witness table for String);
            v81 = v80;
            swift_bridgeObjectRelease(v37);
            v104 = sub_1001DEF4C(v79, v81, &v105);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v104, &v105);
            swift_bridgeObjectRelease_n(v37, 2);
            swift_bridgeObjectRelease(v81);
            _os_log_impl((void *)&_mh_execute_header, v71, v72, "Statuses from AccountStore %s does not match statuses from fetchUserInfo api %s", (uint8_t *)v73, 0x16u);
            v82 = v101;
            swift_arrayDestroy(v101, 2, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v82, -1, -1);
            v83 = v73;
            v13 = v45;
            swift_slowDealloc(v83, -1, -1);

          }
          else
          {

            swift_bridgeObjectRelease_n(v37, 2);
            swift_bridgeObjectRelease_n(v44, 2);
          }
          a3 = (void (*)(void))v102;
          a4 = v103;
        }
LABEL_44:
        if (v13[443] != (_UNKNOWN *)-1)
          swift_once(&qword_10028ADD8, sub_100046D78);
        v84 = type metadata accessor for Logger(0);
        sub_100005288(v84, (uint64_t)qword_1002A8A08);
        swift_bridgeObjectRetain(v37);
        v86 = Logger.logObject.getter(v85);
        v88 = static os_log_type_t.default.getter(v87);
        if (os_log_type_enabled(v86, v88))
        {
          v89 = (uint8_t *)swift_slowAlloc(12, -1);
          v90 = swift_slowAlloc(32, -1);
          v103 = a4;
          v91 = v90;
          v105 = v90;
          *(_DWORD *)v89 = 136315138;
          v102 = (char *)(v89 + 4);
          swift_bridgeObjectRetain(v37);
          v93 = a3;
          v94 = Dictionary.description.getter(v92, &type metadata for String, &type metadata for CustodianIdMSStatus, &protocol witness table for String);
          v96 = v95;
          swift_bridgeObjectRelease(v37);
          v97 = v94;
          a3 = v93;
          v104 = sub_1001DEF4C(v97, v96, &v105);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v104, &v105);
          swift_bridgeObjectRelease_n(v37, 2);
          swift_bridgeObjectRelease(v96);
          _os_log_impl((void *)&_mh_execute_header, v86, v88, "Fetched custodian IdMS statuses: %s", v89, 0xCu);
          swift_arrayDestroy(v91, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v91, -1, -1);
          swift_slowDealloc(v89, -1, -1);

        }
        else
        {

          v63 = swift_bridgeObjectRelease_n(v37, 2);
        }
LABEL_49:
        ((void (*)(uint64_t))a3)(v63);

        return;
      }
    }
    else
    {
      sub_100006F58(&v105);
    }
    if (v13[443] != (_UNKNOWN *)-1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v64 = type metadata accessor for Logger(0);
    v65 = sub_100005288(v64, (uint64_t)qword_1002A8A08);
    v66 = Logger.logObject.getter(v65);
    v67 = static os_log_type_t.error.getter(v66);
    if (os_log_type_enabled(v66, v67))
    {
      v68 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v68 = 0;
      _os_log_impl((void *)&_mh_execute_header, v66, v67, "Statuses from AccountStore is nil after fetchUserInfo call", v68, 2u);
      swift_slowDealloc(v68, -1, -1);
    }

    goto LABEL_44;
  }

LABEL_22:
  if (v13[443] != (_UNKNOWN *)-1)
    swift_once(&qword_10028ADD8, sub_100046D78);
  v52 = type metadata accessor for Logger(0);
  v53 = sub_100005288(v52, (uint64_t)qword_1002A8A08);
  v54 = Logger.logObject.getter(v53);
  v56 = static os_log_type_t.default.getter(v55);
  if (os_log_type_enabled(v54, v56))
  {
    v57 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v57 = 0;
    _os_log_impl((void *)&_mh_execute_header, v54, v56, "custodianInfos spi not found on AKUserInformation", v57, 2u);
    swift_slowDealloc(v57, -1, -1);
  }

  a3();
}

uint64_t sub_100139EB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD aBlock[5];
  uint64_t v40;

  v4 = v3;
  v32 = a2;
  v33 = a3;
  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v37 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v7);
  v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS(0);
  v35 = *(_QWORD *)(v10 - 8);
  v36 = v10;
  __chkstk_darwin(v10, v11);
  v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for UUID(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(_QWORD *)(v15 + 64);
  __chkstk_darwin(v14, v17);
  v18 = (char *)&v31 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = *(_QWORD *)(v4 + 32);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v18, a1, v14);
  v19 = *(unsigned __int8 *)(v15 + 80);
  v20 = (v19 + 24) & ~v19;
  v21 = (v16 + v20 + 7) & 0xFFFFFFFFFFFFFFF8;
  v22 = swift_allocObject(&unk_100269920, v21 + 16, v19 | 7);
  *(_QWORD *)(v22 + 16) = v4;
  (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(v22 + v20, v18, v14);
  v23 = (_QWORD *)(v22 + v21);
  v24 = v33;
  *v23 = v32;
  v23[1] = v24;
  aBlock[4] = sub_10013B158;
  v40 = v22;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000051D0;
  aBlock[3] = &unk_100269938;
  v25 = _Block_copy(aBlock);
  swift_retain(v4);
  v26 = swift_retain(v24);
  static DispatchQoS.unspecified.getter(v26);
  v38 = _swiftEmptyArrayStorage;
  v27 = sub_100005150((unint64_t *)&qword_10028CD20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v28 = sub_1000080B4((uint64_t *)&unk_100295A00);
  v29 = sub_1000077A0((unint64_t *)&qword_10028CD30, (uint64_t *)&unk_100295A00);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v38, v28, v29, v6, v27);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v13, v9, v25);
  _Block_release(v25);
  (*(void (**)(char *, uint64_t))(v37 + 8))(v9, v6);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v13, v36);
  return swift_release(v40);
}

void sub_10013A138(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  objc_class *v18;
  _BYTE *v19;
  uint64_t (**v20)(void *, uint64_t);
  id v21;
  void *v22;
  objc_super v23;

  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin(v8, v11);
  v12 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, a2, v8);
  v13 = *(unsigned __int8 *)(v9 + 80);
  v14 = (v13 + 24) & ~v13;
  v15 = (v10 + v14 + 7) & 0xFFFFFFFFFFFFFFF8;
  v16 = swift_allocObject(&unk_100269970, v15 + 16, v13 | 7);
  *(_QWORD *)(v16 + 16) = a1;
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v16 + v14, v12, v8);
  v17 = (_QWORD *)(v16 + v15);
  *v17 = a3;
  v17[1] = a4;
  v18 = (objc_class *)type metadata accessor for AsyncOperation();
  v19 = objc_allocWithZone(v18);
  v19[OBJC_IVAR____TtC13appleaccountd14AsyncOperation_state] = 0;
  v20 = (uint64_t (**)(void *, uint64_t))&v19[OBJC_IVAR____TtC13appleaccountd14AsyncOperation_workBlock];
  *v20 = sub_10013B238;
  v20[1] = (uint64_t (*)(void *, uint64_t))v16;
  v23.receiver = v19;
  v23.super_class = v18;
  swift_retain(a1);
  swift_retain(a4);
  v21 = objc_msgSendSuper2(&v23, "init");
  v22 = v21;
  if (*(_QWORD *)(a1 + OBJC_IVAR____TtC13appleaccountd38DaemonCustodianIdMSConfirmationHandler_fetchUserInfoOperation))
    objc_msgSend(v21, "addDependency:");
  objc_msgSend(*(id *)(a1 + 24), "addOperation:", v22);

}

uint64_t sub_10013A2BC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(char *, uint64_t, uint64_t), uint64_t a6)
{
  swift_retain(a6);
  swift_retain(a2);
  sub_10013BA78(a4, a3, a5, a6, a1, a2);
  swift_release(a6);
  return swift_release(a2);
}

uint64_t sub_10013A334(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v5 = sub_1000080B4(&qword_100293518);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  __chkstk_darwin(v5, v8);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v5);
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = (v9 + 16) & ~v9;
  v11 = swift_allocObject(&unk_1002698F8, v10 + v7, v9 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(v11 + v10, (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
  sub_100139EB8(a3, (uint64_t)sub_10013B114, v11);
  return swift_release(v11);
}

uint64_t sub_10013A418(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  if (a1)
  {
    v4 = a1;
    swift_errorRetain(a1);
    v1 = sub_1000080B4(&qword_100293518);
    return CheckedContinuation.resume(throwing:)(&v4, v1);
  }
  else
  {
    v3 = sub_1000080B4(&qword_100293518);
    return CheckedContinuation.resume(returning:)(v3, v3);
  }
}

uint64_t sub_10013A478(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD), uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  os_log_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  __n128 v34;
  os_log_type_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  os_log_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t (*v46)(_QWORD);
  uint64_t v47;
  uint64_t v48;

  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v11 = __chkstk_darwin(v8, v10);
  v13 = (char *)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11, v14);
  v16 = (char *)&v43 - v15;
  if (a1)
  {
    swift_errorRetain(a1);
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v17 = type metadata accessor for Logger(0);
    sub_100005288(v17, (uint64_t)qword_1002A8A08);
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v13, a2, v8);
    swift_errorRetain(a1);
    v18 = swift_errorRetain(a1);
    v19 = Logger.logObject.getter(v18);
    v20 = static os_log_type_t.error.getter(v19);
    if (os_log_type_enabled(v19, v20))
    {
      v21 = swift_slowAlloc(22, -1);
      v44 = (uint64_t *)swift_slowAlloc(8, -1);
      v22 = swift_slowAlloc(32, -1);
      v45 = v22;
      v48 = v22;
      *(_DWORD *)v21 = 136315394;
      v46 = a3;
      v43 = v19;
      v23 = UUID.uuidString.getter(v22);
      v25 = v24;
      v47 = sub_1001DEF4C(v23, v24, &v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48);
      swift_bridgeObjectRelease(v25);
      (*(void (**)(char *, uint64_t))(v9 + 8))(v13, v8);
      *(_WORD *)(v21 + 12) = 2112;
      swift_errorRetain(a1);
      v26 = _swift_stdlib_bridgeErrorToNSError(a1);
      v47 = v26;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48);
      v27 = v44;
      *v44 = v26;
      a3 = v46;
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      v28 = v43;
      _os_log_impl((void *)&_mh_execute_header, v43, v20, "Custodian %s Setup finalization finished with error: %@", (uint8_t *)v21, 0x16u);
      v29 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v27, 1, v29);
      swift_slowDealloc(v27, -1, -1);
      v30 = v45;
      swift_arrayDestroy(v45, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v30, -1, -1);
      swift_slowDealloc(v21, -1, -1);

      swift_errorRelease(a1);
    }
    else
    {
      swift_errorRelease(a1);
      (*(void (**)(char *, uint64_t))(v9 + 8))(v13, v8);
      swift_errorRelease(a1);
      swift_errorRelease(a1);

    }
  }
  else
  {
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v31 = type metadata accessor for Logger(0);
    sub_100005288(v31, (uint64_t)qword_1002A8A08);
    v32 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 16))(v16, a2, v8);
    v33 = Logger.logObject.getter(v32);
    v35 = static os_log_type_t.default.getter(v34);
    if (os_log_type_enabled(v33, v35))
    {
      v36 = (uint8_t *)swift_slowAlloc(12, -1);
      v37 = swift_slowAlloc(32, -1);
      v45 = a4;
      v38 = v37;
      v48 = v37;
      v46 = a3;
      *(_DWORD *)v36 = 136315138;
      v44 = (uint64_t *)(v36 + 4);
      v39 = UUID.uuidString.getter(v37);
      v41 = v40;
      v47 = sub_1001DEF4C(v39, v40, &v48);
      a3 = v46;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48);
      swift_bridgeObjectRelease(v41);
      (*(void (**)(char *, uint64_t))(v9 + 8))(v16, v8);
      _os_log_impl((void *)&_mh_execute_header, v33, v35, "Custodian %s Setup finalization finished Successfully", v36, 0xCu);
      swift_arrayDestroy(v38, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v38, -1, -1);
      swift_slowDealloc(v36, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v9 + 8))(v16, v8);
    }

  }
  return a3(a1);
}

unint64_t sub_10013A8FC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t result;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  uint64_t v16;
  Swift::String v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  Swift::String v23;
  unint64_t v24;
  char v25;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  Swift::String v31[2];
  uint64_t v32;

  v4 = type metadata accessor for CharacterSet(0);
  v5 = *(_QWORD *)(v4 - 8);
  result = __chkstk_darwin(v4, v6);
  v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *a2;
  if (*(_QWORD *)(v10 + 16))
  {
    result = sub_10010A9E0(0x6169646F74737563, 0xED0000646975556ELL);
    if ((v11 & 1) != 0)
    {
      sub_1000244B0(*(_QWORD *)(v10 + 56) + 32 * result, (uint64_t)v31);
      result = swift_dynamicCast(&v29, v31, (char *)&type metadata for Any + 8, &type metadata for String, 6);
      if ((result & 1) != 0)
      {
        v12 = v30;
        if (*(_QWORD *)(v10 + 16)
          && (v13 = v29, v14 = sub_10010A9E0(0x737574617473, 0xE600000000000000), (v15 & 1) != 0)
          && (sub_1000244B0(*(_QWORD *)(v10 + 56) + 32 * v14, (uint64_t)v31),
              (swift_dynamicCast(&v29, v31, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) != 0))
        {
          v16 = v30;
          v17 = String.lowercased()();
          v32 = v13;
          v18 = swift_bridgeObjectRelease(v16);
          v31[0] = v17;
          static CharacterSet.whitespacesAndNewlines.getter(v18);
          v19 = sub_10006B00C();
          v20 = StringProtocol.trimmingCharacters(in:)(v9, &type metadata for String, v19);
          v22 = v21;
          (*(void (**)(char *, uint64_t))(v5 + 8))(v9, v4);
          swift_bridgeObjectRelease(v17._object);
          v23._countAndFlagsBits = v20;
          v23._object = v22;
          v24 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10025E678, v23);
          swift_bridgeObjectRelease(v22);
          if (v24 >= 3)
            v25 = 2;
          else
            v25 = v24;
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a1);
          v31[0]._countAndFlagsBits = *a1;
          *a1 = 0x8000000000000000;
          sub_10001FE00(v25, v32, v12, isUniquelyReferenced_nonNull_native);
          v27 = *a1;
          *a1 = v31[0]._countAndFlagsBits;
          swift_bridgeObjectRelease(v12);
          v28 = v27;
        }
        else
        {
          v28 = v12;
        }
        return swift_bridgeObjectRelease(v28);
      }
    }
  }
  return result;
}

uint64_t sub_10013AB30()
{
  return type metadata accessor for DaemonCustodianIdMSConfirmationHandler(0);
}

void sub_10013AB38(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[7];

  v8[0] = "\b";
  v8[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v8[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
  sub_100017464(319, &qword_100293350, &qword_100293358);
  if (v3 <= 0x3F)
  {
    v8[3] = *(_QWORD *)(v2 - 8) + 64;
    sub_100017464(319, (unint64_t *)&unk_100293360, &qword_100297770);
    if (v5 <= 0x3F)
    {
      v8[4] = *(_QWORD *)(v4 - 8) + 64;
      sub_100017464(319, (unint64_t *)&qword_100293810, &qword_10028C860);
      if (v7 <= 0x3F)
      {
        v8[5] = *(_QWORD *)(v6 - 8) + 64;
        v8[6] = "\b";
        swift_updateClassMetadata2(a1, 256, 7, v8, a1 + 80);
      }
    }
  }
}

uint64_t storeEnumTagSinglePayload for CustodianIdMSStatus(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_10013AC70 + 4 * byte_10021DF25[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10013ACA4 + 4 * asc_10021DF20[v4]))();
}

uint64_t sub_10013ACA4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10013ACAC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10013ACB4);
  return result;
}

uint64_t sub_10013ACC0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10013ACC8);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_10013ACCC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10013ACD4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CustodianIdMSStatus()
{
  return &type metadata for CustodianIdMSStatus;
}

unint64_t sub_10013ACF4()
{
  unint64_t result;

  result = qword_100293510;
  if (!qword_100293510)
  {
    result = swift_getWitnessTable(&unk_10021E04C, &type metadata for CustodianIdMSStatus);
    atomic_store(result, (unint64_t *)&qword_100293510);
  }
  return result;
}

uint64_t sub_10013AD38(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(char *, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  int v25;
  uint64_t v26;
  char *v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char *v39;

  v38 = a2;
  v3 = sub_1000080B4((uint64_t *)&unk_1002904F0);
  __chkstk_darwin(v3, v4);
  v35 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  v9 = __chkstk_darwin(v6, v8);
  v36 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = __chkstk_darwin(v9, v11);
  v37 = (char *)&v31 - v13;
  v39 = (char *)_swiftEmptyArrayStorage;
  v34 = *(_QWORD *)(a1 + 16);
  if (v34)
  {
    v14 = 0;
    v32 = a1;
    v15 = (uint64_t)v35;
    while (1)
    {
      if (v14 >= *(_QWORD *)(a1 + 16))
      {
        __break(1u);
        return result;
      }
      v16 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
      v17 = *(_QWORD *)(v7 + 72);
      (*(void (**)(uint64_t, unint64_t, uint64_t))(v7 + 16))(v15, a1 + v16 + v17 * v14, v6);
      v33 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56);
      v33(v15, 0, 1, v6);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v15, 1, v6) == 1)
        goto LABEL_24;
      v18 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 32);
      v19 = v18(v37, v15, v6);
      v20 = UUID.uuidString.getter(v19);
      v22 = v21;
      if (!*(_QWORD *)(v38 + 16) || (v23 = sub_10010A9E0(v20, v21), (v24 & 1) == 0))
      {
        swift_bridgeObjectRelease(v22);
LABEL_14:
        v18(v36, (uint64_t)v37, v6);
        v27 = v39;
        if ((swift_isUniquelyReferenced_nonNull_native(v39) & 1) == 0)
        {
          sub_1001D4BFC(0, *((_QWORD *)v27 + 2) + 1, 1);
          v27 = v39;
        }
        v29 = *((_QWORD *)v27 + 2);
        v28 = *((_QWORD *)v27 + 3);
        if (v29 >= v28 >> 1)
        {
          sub_1001D4BFC(v28 > 1, v29 + 1, 1);
          v27 = v39;
        }
        *((_QWORD *)v27 + 2) = v29 + 1;
        result = v18(&v27[v16 + v29 * v17], (uint64_t)v36, v6);
        v39 = v27;
        a1 = v32;
        goto LABEL_5;
      }
      v25 = *(unsigned __int8 *)(*(_QWORD *)(v38 + 56) + v23);
      swift_bridgeObjectRelease(v22);
      if (v25)
      {
        if (v25 == 1)
        {
          swift_bridgeObjectRelease(0xE800000000000000);
          goto LABEL_4;
        }
        v26 = 0x6E776F6E6B6E75;
      }
      else
      {
        v26 = 0x64657469766E69;
      }
      v30 = _stringCompareWithSmolCheck(_:_:expecting:)(v26, 0xE700000000000000, 0x6465766F72707061, 0xE800000000000000, 0);
      swift_bridgeObjectRelease(0xE700000000000000);
      if ((v30 & 1) == 0)
        goto LABEL_14;
LABEL_4:
      result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v37, v6);
LABEL_5:
      ++v14;
      v15 = (uint64_t)v35;
      if (v34 == v14)
      {
        v33((uint64_t)v35, 1, 1, v6);
        goto LABEL_24;
      }
    }
  }
  v15 = (uint64_t)v35;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v35, 1, 1, v6);
LABEL_24:
  swift_bridgeObjectRelease(a1);
  sub_100013AAC(v15);
  return (uint64_t)v39;
}

unint64_t sub_10013B068(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10025E678, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 3)
    return 3;
  else
    return v3;
}

uint64_t sub_10013B0B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = sub_1000080B4(&qword_100293518);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10013B114(uint64_t a1)
{
  sub_1000080B4(&qword_100293518);
  return sub_10013A418(a1);
}

void sub_10013B158()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t *v3;

  v1 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (uint64_t *)(v0 + ((*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8));
  sub_10013A138(*(_QWORD *)(v0 + 16), v0 + v2, *v3, v3[1]);
}

uint64_t sub_10013B1A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v6 + 8));
  return swift_deallocObject(v0, v6 + 16, v5);
}

uint64_t sub_10013B238(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v5 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = v2 + ((*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  return sub_10013A2BC(a1, a2, *(_QWORD *)(v2 + 16), v2 + v6, *(uint64_t (**)(char *, uint64_t, uint64_t))v7, *(_QWORD *)(v7 + 8));
}

_QWORD *sub_10013B2A0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  __n128 v9;
  os_log_type_t v10;
  uint8_t *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v18;
  _QWORD *v19;

  v1 = &_swiftEmptyDictionarySingleton;
  v19 = &_swiftEmptyDictionarySingleton;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    swift_bridgeObjectRetain(a1);
    for (i = 0; i != v2; ++i)
    {
      v5 = *(_QWORD *)(a1 + 8 * i + 32);
      v18 = v5;
      swift_bridgeObjectRetain(v5);
      sub_10013A8FC((uint64_t *)&v19, &v18);
      swift_bridgeObjectRelease(v5);
    }
    swift_bridgeObjectRelease(a1);
    v1 = v19;
  }
  if (qword_10028ADD8 != -1)
    swift_once(&qword_10028ADD8, sub_100046D78);
  v6 = type metadata accessor for Logger(0);
  sub_100005288(v6, (uint64_t)qword_1002A8A08);
  v7 = swift_bridgeObjectRetain_n(v1, 2);
  v8 = Logger.logObject.getter(v7);
  v10 = static os_log_type_t.default.getter(v9);
  if (os_log_type_enabled(v8, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc(12, -1);
    v12 = (_QWORD *)swift_slowAlloc(32, -1);
    v19 = v12;
    *(_DWORD *)v11 = 136315138;
    swift_bridgeObjectRetain(v1);
    v14 = Dictionary.description.getter(v13, &type metadata for String, &type metadata for CustodianIdMSStatus, &protocol witness table for String);
    v16 = v15;
    swift_bridgeObjectRelease(v1);
    v18 = sub_1001DEF4C(v14, v16, (uint64_t *)&v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19);
    swift_bridgeObjectRelease_n(v1, 2);
    swift_bridgeObjectRelease(v16);
    _os_log_impl((void *)&_mh_execute_header, v8, v10, "Extracted Custodian statuses: %s", v11, 0xCu);
    swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v11, -1, -1);

    if (!v1[2])
      goto LABEL_11;
  }
  else
  {

    swift_bridgeObjectRelease_n(v1, 2);
    if (!v1[2])
    {
LABEL_11:
      swift_bridgeObjectRelease(v1);
      return 0;
    }
  }
  return v1;
}

void sub_10013B518(uint64_t a1, uint64_t a2, uint64_t (*a3)(char *, uint64_t, uint64_t), uint64_t a4, void *a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t (*v25)();
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  __n128 v31;
  os_log_type_t v32;
  BOOL v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(char *, uint64_t, uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(uint64_t, char *, uint64_t);
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t (**v60)();
  uint64_t (*v61)();
  void *v62;
  uint64_t (*v63)();
  uint64_t (*v64)(char *, uint64_t, uint64_t);
  void *v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76[3];
  uint64_t v77;

  v73 = a1;
  v11 = sub_1000080B4(&qword_100293520);
  v68 = *(_QWORD *)(v11 - 8);
  v69 = v11;
  __chkstk_darwin(v11, v12);
  v67 = (char *)&v63 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v74 = type metadata accessor for UUID(0);
  v72 = *(_QWORD *)(v74 - 8);
  v15 = __chkstk_darwin(v74, v14);
  v70 = v16;
  v71 = (char *)&v63 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15, v17);
  v19 = (char *)&v63 - v18;
  v20 = sub_1000080B4(&qword_10028FA50);
  v21 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20, v22);
  v24 = (char *)&v63 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = (uint64_t (*)())swift_allocObject(&unk_100269998, 48, 7);
  v64 = a3;
  v65 = a5;
  *((_QWORD *)v25 + 2) = a3;
  *((_QWORD *)v25 + 3) = a4;
  *((_QWORD *)v25 + 4) = a5;
  *((_QWORD *)v25 + 5) = a6;
  v66 = a2;
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v24, a2 + OBJC_IVAR____TtC13appleaccountd38DaemonCustodianIdMSConfirmationHandler__accountStore, v20);
  swift_retain(a4);
  swift_retain(a6);
  Dependency.wrappedValue.getter(v76, v20);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v24, v20);
  v26 = objc_msgSend(*(id *)(*sub_10000732C(v76, v77) + 16), "aa_primaryAppleAccount");
  sub_100006F58(v76);
  if (v26)
  {
    v65 = v26;
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v27 = type metadata accessor for Logger(0);
    sub_100005288(v27, (uint64_t)qword_1002A8A08);
    v28 = v72;
    v64 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v72 + 16);
    v29 = v64(v19, v73, v74);
    v30 = Logger.logObject.getter(v29);
    v32 = static os_log_type_t.default.getter(v31);
    v33 = os_log_type_enabled(v30, v32);
    v63 = v25;
    if (v33)
    {
      v34 = (uint8_t *)swift_slowAlloc(12, -1);
      v35 = swift_slowAlloc(32, -1);
      v76[0] = v35;
      *(_DWORD *)v34 = 136315138;
      v36 = UUID.uuidString.getter(v35);
      v38 = v37;
      v75 = sub_1001DEF4C(v36, v37, v76);
      v28 = v72;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, v76);
      swift_bridgeObjectRelease(v38);
      (*(void (**)(char *, uint64_t))(v28 + 8))(v19, v74);
      _os_log_impl((void *)&_mh_execute_header, v30, v32, "Custodian %s Calling setup finalization", v34, 0xCu);
      swift_arrayDestroy(v35, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v35, -1, -1);
      swift_slowDealloc(v34, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v28 + 8))(v19, v74);
    }

    v45 = v71;
    v47 = v73;
    v46 = v74;
    v48 = (void (*)(char *, uint64_t, uint64_t))v64;
    v64(v71, v73, v74);
    v49 = type metadata accessor for FinalizeCustodianSetupMessage(0);
    v50 = swift_allocObject(v49, *(unsigned int *)(v49 + 48), *(unsigned __int16 *)(v49 + 52));
    *(_BYTE *)(v50 + OBJC_IVAR____TtC13appleaccountd29FinalizeCustodianSetupMessage_skipHealthCheckOnSuccess) = 0;
    *(_BYTE *)(v50 + 16) = 3;
    v51 = v28;
    v52 = *(void (**)(uint64_t, char *, uint64_t))(v28 + 32);
    v52(v50 + OBJC_IVAR____TtC13appleaccountd29FinalizeCustodianSetupMessage_custodianID, v45, v46);
    *(_BYTE *)(v50 + OBJC_IVAR____TtC13appleaccountd29FinalizeCustodianSetupMessage_skipHealthCheckOnSuccess) = 1;
    v53 = v67;
    v55 = v68;
    v54 = v69;
    (*(void (**)(char *, uint64_t, uint64_t))(v68 + 16))(v67, v66 + OBJC_IVAR____TtC13appleaccountd38DaemonCustodianIdMSConfirmationHandler__setupFinalizationHandler, v69);
    Dependency.wrappedValue.getter(v76, v54);
    (*(void (**)(char *, uint64_t))(v55 + 8))(v53, v54);
    sub_10000732C(v76, v77);
    v48(v45, v47, v46);
    v56 = *(unsigned __int8 *)(v51 + 80);
    v57 = (v56 + 16) & ~v56;
    v58 = (v70 + v57 + 7) & 0xFFFFFFFFFFFFFFF8;
    v59 = swift_allocObject(&unk_1002699C0, v58 + 16, v56 | 7);
    v52(v59 + v57, v45, v46);
    v60 = (uint64_t (**)())(v59 + v58);
    v61 = v63;
    *v60 = sub_1000FE258;
    v60[1] = v61;
    swift_retain(v61);
    v62 = v65;
    sub_1000EA5D4(v50, v65, (uint64_t)sub_10013C334, v59);
    swift_release(v59);
    swift_release(v50);

    sub_100006F58(v76);
    swift_release(v61);
  }
  else
  {
    type metadata accessor for AACustodianError(0);
    v40 = v39;
    v75 = -7008;
    v41 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
    v42 = sub_100005150((unint64_t *)&qword_10028B640, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianError, (uint64_t)&unk_100218378);
    _BridgedStoredNSError.init(_:userInfo:)(v76, &v75, v41, v40, v42);
    v43 = (void *)v76[0];
    v44 = ((uint64_t (*)(uint64_t))v64)(v76[0]);
    ((void (*)(uint64_t))v65)(v44);
    swift_release(v25);

  }
}

void sub_10013BA78(uint64_t a1, uint64_t a2, uint64_t (*a3)(char *, uint64_t, uint64_t), uint64_t a4, void *a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  __n128 v34;
  os_log_type_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  NSObject *v50;
  os_log_type_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  NSObject *v65;
  os_log_type_t v66;
  uint64_t v67;
  uint8_t *v68;
  uint8_t *v69;
  uint64_t v70;
  uint64_t v71;
  id v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  __n128 v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  void (*v83)(uint64_t);
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  uint64_t v89;
  uint64_t (*v90)(char *, uint64_t, uint64_t);
  uint64_t v91;
  uint64_t v92;
  void *v93;

  v90 = a3;
  v91 = a4;
  v89 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v89 - 8);
  v12 = __chkstk_darwin(v89, v11);
  v14 = (char *)&v86 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v12, v15);
  v18 = (char *)&v86 - v17;
  __chkstk_darwin(v16, v19);
  v21 = (char *)&v86 - v20;
  v22 = *(_QWORD *)(a2 + 16);
  if (v22)
  {
    v88 = a5;
    swift_retain(v91);
    swift_retain(a6);
    swift_bridgeObjectRetain(v22);
    v24 = UUID.uuidString.getter(v23);
    v26 = v25;
    if (*(_QWORD *)(v22 + 16))
    {
      v27 = sub_10010A9E0(v24, v25);
      if ((v28 & 1) != 0)
      {
        v29 = *(unsigned __int8 *)(*(_QWORD *)(v22 + 56) + v27);
        swift_bridgeObjectRelease(v26);
        swift_bridgeObjectRelease(v22);
        if (!v29)
        {
          v75 = v91;
          swift_retain(v91);
          swift_retain(a6);
          sub_10013B518(a1, a2, v90, v75, v88, a6);
          swift_release_n(v75, 2);
          swift_release_n(a6, 2);
          return;
        }
        if (v29 == 1)
        {
          if (qword_10028ADD8 != -1)
            swift_once(&qword_10028ADD8, sub_100046D78);
          v30 = type metadata accessor for Logger(0);
          sub_100005288(v30, (uint64_t)qword_1002A8A08);
          v31 = v89;
          v32 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 16))(v18, a1, v89);
          v33 = Logger.logObject.getter(v32);
          v35 = static os_log_type_t.default.getter(v34);
          if (!os_log_type_enabled(v33, v35))
          {
            (*(void (**)(char *, uint64_t))(v10 + 8))(v18, v31);
            goto LABEL_29;
          }
          v36 = (uint8_t *)swift_slowAlloc(12, -1);
          v37 = swift_slowAlloc(32, -1);
          v93 = (void *)v37;
          v87 = a6;
          *(_DWORD *)v36 = 136315138;
          v38 = UUID.uuidString.getter(v37);
          v40 = v39;
          v92 = sub_1001DEF4C(v38, v39, (uint64_t *)&v93);
          a6 = v87;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v92, &v93);
          swift_bridgeObjectRelease(v40);
          (*(void (**)(char *, uint64_t))(v10 + 8))(v18, v31);
          v41 = "Custodian %s is already known to IdMS and accepted";
        }
        else
        {
          if (qword_10028ADD8 != -1)
            swift_once(&qword_10028ADD8, sub_100046D78);
          v76 = type metadata accessor for Logger(0);
          sub_100005288(v76, (uint64_t)qword_1002A8A08);
          v77 = v89;
          v78 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 16))(v14, a1, v89);
          v33 = Logger.logObject.getter(v78);
          v35 = static os_log_type_t.default.getter(v79);
          if (!os_log_type_enabled(v33, v35))
          {
            (*(void (**)(char *, uint64_t))(v10 + 8))(v14, v77);
            goto LABEL_29;
          }
          v36 = (uint8_t *)swift_slowAlloc(12, -1);
          v37 = swift_slowAlloc(32, -1);
          v93 = (void *)v37;
          *(_DWORD *)v36 = 136315138;
          v80 = UUID.uuidString.getter(v37);
          v82 = v81;
          v92 = sub_1001DEF4C(v80, v81, (uint64_t *)&v93);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v92, &v93);
          swift_bridgeObjectRelease(v82);
          (*(void (**)(char *, uint64_t))(v10 + 8))(v14, v89);
          v41 = "Custodian %s IdMS status is unknown, Investigate.";
        }
        _os_log_impl((void *)&_mh_execute_header, v33, v35, v41, v36, 0xCu);
        swift_arrayDestroy(v37, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v37, -1, -1);
        swift_slowDealloc(v36, -1, -1);
LABEL_29:

        v83 = (void (*)(uint64_t))v88;
        v84 = v91;
        v85 = ((uint64_t (*)(_QWORD))v90)(0);
        v83(v85);
        swift_release(a6);
        swift_release(v84);
        return;
      }
    }
    swift_bridgeObjectRelease(v26);
    swift_bridgeObjectRelease(v22);
    type metadata accessor for AACustodianError(0);
    v43 = v42;
    v92 = -7018;
    v44 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
    v45 = sub_100005150((unint64_t *)&qword_10028B640, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianError, (uint64_t)&unk_100218378);
    _BridgedStoredNSError.init(_:userInfo:)(&v93, &v92, v44, v43, v45);
    v46 = v93;
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v47 = type metadata accessor for Logger(0);
    sub_100005288(v47, (uint64_t)qword_1002A8A08);
    v48 = v89;
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v21, a1, v89);
    v49 = v46;
    v50 = Logger.logObject.getter(v49);
    v51 = static os_log_type_t.error.getter(v50);
    if (os_log_type_enabled(v50, v51))
    {
      v52 = swift_slowAlloc(22, -1);
      v53 = (uint64_t *)swift_slowAlloc(8, -1);
      v54 = swift_slowAlloc(32, -1);
      v86 = v54;
      v93 = (void *)v54;
      *(_DWORD *)v52 = 136315394;
      v87 = a6;
      v55 = UUID.uuidString.getter(v54);
      v57 = v56;
      v92 = sub_1001DEF4C(v55, v56, (uint64_t *)&v93);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v92, &v93);
      swift_bridgeObjectRelease(v57);
      (*(void (**)(char *, uint64_t))(v10 + 8))(v21, v89);
      *(_WORD *)(v52 + 12) = 2112;
      v58 = v49;
      v59 = _swift_stdlib_bridgeErrorToNSError(v58);
      v92 = v59;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v92, &v93);
      *v53 = v59;

      a6 = v87;
      _os_log_impl((void *)&_mh_execute_header, v50, v51, "Custodian %s not found on IdMS: %@", (uint8_t *)v52, 0x16u);
      v60 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v53, 1, v60);
      swift_slowDealloc(v53, -1, -1);
      v61 = v86;
      swift_arrayDestroy(v86, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v61, -1, -1);
      swift_slowDealloc(v52, -1, -1);

    }
    else
    {
      (*(void (**)(char *, uint64_t))(v10 + 8))(v21, v48);

    }
    v72 = v49;
    v73 = v91;
    v74 = ((uint64_t (*)(id))v90)(v49);
    ((void (*)(uint64_t))v88)(v74);
    swift_release(a6);
    swift_release(v73);

  }
  else
  {
    v62 = qword_10028ADD8;
    swift_retain(v91);
    swift_retain(a6);
    if (v62 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v63 = type metadata accessor for Logger(0);
    v64 = sub_100005288(v63, (uint64_t)qword_1002A8A08);
    v65 = Logger.logObject.getter(v64);
    v66 = static os_log_type_t.error.getter(v65);
    if (os_log_type_enabled(v65, v66))
    {
      v67 = a6;
      v68 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v68 = 0;
      _os_log_impl((void *)&_mh_execute_header, v65, v66, "No Custodian statuses found on IdMS", v68, 2u);
      v69 = v68;
      a6 = v67;
      swift_slowDealloc(v69, -1, -1);
    }

    v70 = v91;
    v71 = ((uint64_t (*)(_QWORD))v90)(0);
    ((void (*)(uint64_t))a5)(v71);
    swift_release(a6);
    swift_release(v70);
  }
}

uint64_t sub_10013C290()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10013C2BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v6 + 8));
  return swift_deallocObject(v0, v6 + 16, v5);
}

uint64_t sub_10013C334(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = v1 + ((*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8);
  return sub_10013A478(a1, v1 + v4, *(uint64_t (**)(_QWORD))v5, *(_QWORD *)(v5 + 8));
}

void sub_10013C388()
{
  uint64_t v0;

  sub_100138F50(v0);
}

void sub_10013C390(void (*a1)(void), uint64_t a2)
{
  uint64_t v2;

  sub_10013900C(a1, a2, v2);
}

uint64_t sub_10013C398()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

void sub_10013C3C4()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(v0 + 32);
  (*(void (**)(void))(v0 + 16))();
  v2 = *(void **)(v1 + OBJC_IVAR____TtC13appleaccountd38DaemonCustodianIdMSConfirmationHandler_fetchUserInfoOperation);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC13appleaccountd38DaemonCustodianIdMSConfirmationHandler_fetchUserInfoOperation) = 0;

}

void sub_10013C400()
{
  uint64_t *v0;

  sub_10013892C(v0[2], v0[3], v0[4], v0[5]);
}

uint64_t sub_10013C410(uint64_t (*a1)(uint64_t), uint64_t a2)
{
  uint64_t v2;

  return sub_100138A24(a1, a2, *(_QWORD *)(v2 + 16), *(uint64_t (**)(uint64_t))(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40));
}

uint64_t type metadata accessor for CreateAAIdentityActivity()
{
  return objc_opt_self(_TtC13appleaccountd24CreateAAIdentityActivity);
}

uint64_t sub_10013C44C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10013C474 + 4 * byte_10021E0D0[*v0]))(1701869940, 0xE400000000000000);
}

uint64_t sub_10013C474()
{
  return 0x6169646F74737563;
}

uint64_t sub_10013C494()
{
  return 0x666E496572616873;
}

uint64_t sub_10013C4B0()
{
  return 0x657A696C616E6966;
}

uint64_t sub_10013C4D4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10013D64C(a1, a2);
  *a3 = result;
  return result;
}

void sub_10013C4F8(_BYTE *a1@<X8>)
{
  *a1 = 4;
}

uint64_t sub_10013C504(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10013CD24();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10013C52C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10013CD24();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10013C554()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC13appleaccountd12ShareMessage_custodianID;
  v2 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  sub_1000EA11C(v0 + OBJC_IVAR____TtC13appleaccountd12ShareMessage_shareInfo);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_10013C5B4()
{
  return type metadata accessor for ShareMessage(0);
}

uint64_t type metadata accessor for ShareMessage(uint64_t a1)
{
  return sub_100004C78(a1, qword_1002935F8, (uint64_t)&nominal type descriptor for ShareMessage);
}

uint64_t sub_10013C5D0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[4];

  v5[0] = &unk_10021E108;
  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v5[1] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for CloudShareInfo(319);
    if (v4 <= 0x3F)
    {
      v5[2] = *(_QWORD *)(result - 8) + 64;
      v5[3] = &unk_10021E120;
      result = swift_updateClassMetadata2(a1, 256, 4, v5, a1 + 80);
      if (!result)
        return 0;
    }
  }
  return result;
}

uint64_t sub_10013C66C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char v33;
  char v34;
  char v35;
  char v36;

  v2 = v1;
  v28 = type metadata accessor for CloudShareInfo(0);
  __chkstk_darwin(v28, v4);
  v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v29 = v7;
  v30 = v8;
  __chkstk_darwin(v7, v9);
  v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1000080B4(&qword_100293700);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12, v14);
  v16 = (char *)&v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = a1[3];
  v17 = a1[4];
  sub_10000732C(a1, v18);
  v19 = sub_10013CD24();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ShareMessage.CodingKeys, &type metadata for ShareMessage.CodingKeys, v19, v18, v17);
  v36 = *(_BYTE *)(v2 + 16);
  v35 = 0;
  v20 = sub_100025CE0();
  v21 = v31;
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v36, &v35, v12, &type metadata for MessageType, v20);
  if (v21)
    return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v16, v12);
  v23 = v13;
  v24 = v29;
  (*(void (**)(char *, uint64_t, uint64_t))(v30 + 16))(v11, v2 + OBJC_IVAR____TtC13appleaccountd12ShareMessage_custodianID, v29);
  v34 = 1;
  v25 = sub_100005150((unint64_t *)&unk_10028DC20, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v11, &v34, v12, v24, v25);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v11, v24);
  sub_1000EA0D8(v2 + OBJC_IVAR____TtC13appleaccountd12ShareMessage_shareInfo, (uint64_t)v6);
  v33 = 2;
  v26 = sub_100005150(&qword_100290780, type metadata accessor for CloudShareInfo, (uint64_t)&unk_10021E638);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v6, &v33, v12, v28, v26);
  sub_1000EA11C((uint64_t)v6);
  v27 = *(unsigned __int8 *)OBJC_IVAR____TtC13appleaccountd12ShareMessage_finalizeSetup;
  v32 = 3;
  KeyedEncodingContainer.encode(_:forKey:)(v27, &v32, v12);
  return (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v16, v12);
}

uint64_t sub_10013C928(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  char v42;
  char v43;
  char v44;
  uint64_t v45;

  v35 = type metadata accessor for CloudShareInfo(0);
  __chkstk_darwin(v35, v2);
  v4 = (uint64_t *)((char *)&v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = sub_1000080B4(&qword_1002936F0);
  v10 = *(_QWORD *)(v37 - 8);
  __chkstk_darwin(v37, v11);
  v13 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1[3];
  v15 = a1[4];
  v38 = a1;
  sub_10000732C(a1, v14);
  v16 = sub_10013CD24();
  v36 = v13;
  v17 = v40;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ShareMessage.CodingKeys, &type metadata for ShareMessage.CodingKeys, v16, v14, v15);
  if (v17)
  {
    v27 = v39;
    v24 = v38;
    v25 = type metadata accessor for ShareMessage(0);
    swift_deallocPartialClassInstance(v27, v25, *(unsigned int *)(*(_QWORD *)v27 + 48), *(unsigned __int16 *)(*(_QWORD *)v27 + 52));
    v32 = v24;
  }
  else
  {
    v18 = v9;
    v19 = v35;
    v34 = v4;
    v20 = v10;
    v40 = v6;
    v44 = 0;
    v21 = sub_100025C9C();
    v22 = v36;
    v23 = v37;
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v45, &type metadata for MessageType, &v44, v37, &type metadata for MessageType, v21);
    v27 = v39;
    *(_BYTE *)(v39 + 16) = v45;
    v43 = 1;
    v28 = sub_100005150((unint64_t *)&unk_10028BBB0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v18, v5, &v43, v23, v5, v28);
    (*(void (**)(uint64_t, _QWORD *, uint64_t))(v40 + 32))(v27 + OBJC_IVAR____TtC13appleaccountd12ShareMessage_custodianID, v18, v5);
    v42 = 2;
    v29 = sub_100005150(&qword_100290770, type metadata accessor for CloudShareInfo, (uint64_t)&unk_10021E660);
    v30 = v34;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v34, v19, &v42, v23, v19, v29);
    sub_1000C8698((uint64_t)v30, v27 + OBJC_IVAR____TtC13appleaccountd12ShareMessage_shareInfo);
    v41 = 3;
    v31 = v37;
    LOBYTE(v19) = KeyedDecodingContainer.decode(_:forKey:)(&v41, v37);
    (*(void (**)(char *, uint64_t))(v20 + 8))(v22, v31);
    *(_BYTE *)(v27 + OBJC_IVAR____TtC13appleaccountd12ShareMessage_finalizeSetup) = v19 & 1;
    v32 = v38;
  }
  sub_100006F58(v32);
  return v27;
}

uint64_t sub_10013CCAC@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v5 = type metadata accessor for ShareMessage(0);
  v6 = swift_allocObject(v5, *(unsigned int *)(v5 + 48), *(unsigned __int16 *)(v5 + 52));
  result = sub_10013C928(a1);
  if (!v2)
    *a2 = v6;
  return result;
}

uint64_t sub_10013CD04(_QWORD *a1)
{
  return sub_10013C66C(a1);
}

unint64_t sub_10013CD24()
{
  unint64_t result;

  result = qword_1002936F8;
  if (!qword_1002936F8)
  {
    result = swift_getWitnessTable(&unk_10021E268, &type metadata for ShareMessage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002936F8);
  }
  return result;
}

_QWORD *sub_10013CD68(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;
  uint64_t v21;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v21 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v21 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v21);
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for URL(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = type metadata accessor for CloudShareInfo(0);
    v13 = *(int *)(v12 + 20);
    v14 = &v9[v13];
    v15 = &v10[v13];
    v17 = *(_QWORD *)v15;
    v16 = *((_QWORD *)v15 + 1);
    *(_QWORD *)v14 = v17;
    *((_QWORD *)v14 + 1) = v16;
    v18 = *(int *)(v12 + 24);
    v19 = *(void **)&v10[v18];
    *(_QWORD *)&v9[v18] = v19;
    *((_BYTE *)a1 + *(int *)(a3 + 24)) = *((_BYTE *)a2 + *(int *)(a3 + 24));
    swift_bridgeObjectRetain(v16);
    v20 = v19;
  }
  return a1;
}

void sub_10013CE58(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  v6 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = type metadata accessor for CloudShareInfo(0);
  swift_bridgeObjectRelease(*(_QWORD *)(v5 + *(int *)(v7 + 20) + 8));

}

uint64_t sub_10013CEDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  id v19;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  v11 = type metadata accessor for CloudShareInfo(0);
  v12 = *(int *)(v11 + 20);
  v13 = (_QWORD *)(v8 + v12);
  v14 = (uint64_t *)(v9 + v12);
  v16 = *v14;
  v15 = v14[1];
  *v13 = v16;
  v13[1] = v15;
  v17 = *(int *)(v11 + 24);
  v18 = *(void **)(v9 + v17);
  *(_QWORD *)(v8 + v17) = v18;
  *(_BYTE *)(a1 + *(int *)(a3 + 24)) = *(_BYTE *)(a2 + *(int *)(a3 + 24));
  swift_bridgeObjectRetain(v15);
  v19 = v18;
  return a1;
}

uint64_t sub_10013CFA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  id v20;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  v11 = type metadata accessor for CloudShareInfo(0);
  v12 = *(int *)(v11 + 20);
  v13 = (_QWORD *)(v8 + v12);
  v14 = (_QWORD *)(v9 + v12);
  *v13 = *v14;
  v15 = v14[1];
  v16 = v13[1];
  v13[1] = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16);
  v17 = *(int *)(v11 + 24);
  v18 = *(void **)(v8 + v17);
  v19 = *(void **)(v9 + v17);
  *(_QWORD *)(v8 + v17) = v19;
  v20 = v19;

  *(_BYTE *)(a1 + *(int *)(a3 + 24)) = *(_BYTE *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_10013D088(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = type metadata accessor for CloudShareInfo(0);
  *(_OWORD *)(v8 + *(int *)(v11 + 20)) = *(_OWORD *)(v9 + *(int *)(v11 + 20));
  *(_QWORD *)(v8 + *(int *)(v11 + 24)) = *(_QWORD *)(v9 + *(int *)(v11 + 24));
  *(_BYTE *)(a1 + *(int *)(a3 + 24)) = *(_BYTE *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_10013D138(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = type metadata accessor for CloudShareInfo(0);
  v12 = *(int *)(v11 + 20);
  v13 = (_QWORD *)(v8 + v12);
  v14 = (uint64_t *)(v9 + v12);
  v16 = *v14;
  v15 = v14[1];
  v17 = v13[1];
  *v13 = v16;
  v13[1] = v15;
  swift_bridgeObjectRelease(v17);
  v18 = *(int *)(v11 + 24);
  v19 = *(void **)(v8 + v18);
  *(_QWORD *)(v8 + v18) = *(_QWORD *)(v9 + v18);

  *(_BYTE *)(a1 + *(int *)(a3 + 24)) = *(_BYTE *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_10013D204(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10013D210);
}

uint64_t sub_10013D210(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v14;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = type metadata accessor for CloudShareInfo(0);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 24));
  if (v14 >= 2)
    return ((v14 + 2147483646) & 0x7FFFFFFF) + 1;
  else
    return 0;
}

uint64_t sub_10013D2C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10013D2D4);
}

uint64_t sub_10013D2D4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  result = type metadata accessor for CloudShareInfo(0);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  *(_BYTE *)(a1 + *(int *)(a4 + 24)) = a2 + 1;
  return result;
}

uint64_t type metadata accessor for ShareMessageContext(uint64_t a1)
{
  return sub_100004C78(a1, qword_100293760, (uint64_t)&nominal type descriptor for ShareMessageContext);
}

uint64_t sub_10013D38C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[3];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for CloudShareInfo(319);
    if (v4 <= 0x3F)
    {
      v5[1] = *(_QWORD *)(result - 8) + 64;
      v5[2] = &unk_10021E120;
      swift_initStructMetadata(a1, 256, 3, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ShareMessage.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_17;
  if (a2 + 3 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 3) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 3;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 3;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 3;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v8 = v6 - 4;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ShareMessage.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_10013D4F4 + 4 * byte_10021E0D9[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_10013D528 + 4 * byte_10021E0D4[v4]))();
}

uint64_t sub_10013D528(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10013D530(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10013D538);
  return result;
}

uint64_t sub_10013D544(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10013D54CLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_10013D550(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10013D558(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ShareMessage.CodingKeys()
{
  return &type metadata for ShareMessage.CodingKeys;
}

unint64_t sub_10013D578()
{
  unint64_t result;

  result = qword_1002937A0;
  if (!qword_1002937A0)
  {
    result = swift_getWitnessTable(&unk_10021E240, &type metadata for ShareMessage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002937A0);
  }
  return result;
}

unint64_t sub_10013D5C0()
{
  unint64_t result;

  result = qword_1002937A8;
  if (!qword_1002937A8)
  {
    result = swift_getWitnessTable(&unk_10021E1B0, &type metadata for ShareMessage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002937A8);
  }
  return result;
}

unint64_t sub_10013D608()
{
  unint64_t result;

  result = qword_1002937B0;
  if (!qword_1002937B0)
  {
    result = swift_getWitnessTable(&unk_10021E1D8, &type metadata for ShareMessage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002937B0);
  }
  return result;
}

uint64_t sub_10013D64C(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  char v9;

  if (a1 == 1701869940 && a2 == 0xE400000000000000)
  {
    v5 = 0xE400000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1701869940, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6169646F74737563 && a2 == 0xEB0000000044496ELL)
  {
    v7 = 0xEB0000000044496ELL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6169646F74737563, 0xEB0000000044496ELL, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x666E496572616873 && a2 == 0xE90000000000006FLL)
  {
    v8 = 0xE90000000000006FLL;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x666E496572616873, 0xE90000000000006FLL, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x657A696C616E6966 && a2 == 0xED00007075746553)
  {
    swift_bridgeObjectRelease(0xED00007075746553);
    return 3;
  }
  else
  {
    v9 = _stringCompareWithSmolCheck(_:_:expecting:)(0x657A696C616E6966, 0xED00007075746553, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v9 & 1) != 0)
      return 3;
    else
      return 4;
  }
}

void sub_10013D83C(uint64_t (*a1)(uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  int64_t v27;
  char v28;
  int64_t v29;
  int64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[5];
  uint64_t v34;

  v4 = v3;
  v5 = a3;
  if ((a3 & 0xC000000000000001) != 0)
  {
    if (a3 < 0)
      v7 = a3;
    else
      v7 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v8 = __CocoaSet.makeIterator()(v7);
    v9 = type metadata accessor for CustodianRecoverySession(0);
    v10 = sub_100005150((unint64_t *)&unk_100293A70, type metadata accessor for CustodianRecoverySession, (uint64_t)&unk_10021CAF0);
    v11 = Set.Iterator.init(_cocoa:)(v33, v8, v9, v10);
    v5 = v33[0];
    v31 = v33[1];
    v12 = v33[2];
    v13 = v33[3];
    v14 = v33[4];
  }
  else
  {
    v15 = -1 << *(_BYTE *)(a3 + 32);
    v31 = a3 + 56;
    v16 = ~v15;
    v17 = -v15;
    if (v17 < 64)
      v18 = ~(-1 << v17);
    else
      v18 = -1;
    v14 = v18 & *(_QWORD *)(a3 + 56);
    swift_bridgeObjectRetain(a3);
    v12 = v16;
    v13 = 0;
  }
  v30 = (unint64_t)(v12 + 64) >> 6;
  if ((v5 & 0x8000000000000000) == 0)
    goto LABEL_14;
LABEL_11:
  v19 = __CocoaSet.Iterator.next()(v11);
  if (!v19)
    goto LABEL_39;
  v20 = v19;
  v32 = v19;
  v21 = type metadata accessor for CustodianRecoverySession(0);
  swift_unknownObjectRetain(v20);
  swift_dynamicCast(&v34, &v32, (char *)&type metadata for Swift.AnyObject + 8, v21, 7);
  v22 = v34;
  swift_unknownObjectRelease(v20);
  v23 = v13;
  v24 = v14;
  if (!v22)
    goto LABEL_39;
  while (1)
  {
    v34 = v22;
    v28 = a1(&v34);
    if (v4)
    {
      swift_release(v22);
      goto LABEL_39;
    }
    if ((v28 & 1) != 0)
      goto LABEL_39;
    v11 = (_QWORD *)swift_release(v22);
    v13 = v23;
    v14 = v24;
    if (v5 < 0)
      goto LABEL_11;
LABEL_14:
    if (!v14)
      break;
    v24 = (v14 - 1) & v14;
    v25 = __clz(__rbit64(v14)) | (v13 << 6);
    v23 = v13;
LABEL_27:
    v22 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v25);
    swift_retain(v22);
    if (!v22)
      goto LABEL_39;
  }
  v23 = v13 + 1;
  if (__OFADD__(v13, 1))
  {
    __break(1u);
    return;
  }
  if (v23 >= v30)
    goto LABEL_39;
  v26 = *(_QWORD *)(v31 + 8 * v23);
  if (v26)
  {
LABEL_26:
    v24 = (v26 - 1) & v26;
    v25 = __clz(__rbit64(v26)) + (v23 << 6);
    goto LABEL_27;
  }
  v27 = v13 + 2;
  if (v13 + 2 >= v30)
    goto LABEL_39;
  v26 = *(_QWORD *)(v31 + 8 * v27);
  if (v26)
    goto LABEL_25;
  v27 = v13 + 3;
  if (v13 + 3 >= v30)
    goto LABEL_39;
  v26 = *(_QWORD *)(v31 + 8 * v27);
  if (v26)
    goto LABEL_25;
  v27 = v13 + 4;
  if (v13 + 4 >= v30)
    goto LABEL_39;
  v26 = *(_QWORD *)(v31 + 8 * v27);
  if (v26)
  {
LABEL_25:
    v23 = v27;
    goto LABEL_26;
  }
  v23 = v13 + 5;
  if (v13 + 5 >= v30)
    goto LABEL_39;
  v26 = *(_QWORD *)(v31 + 8 * v23);
  if (v26)
    goto LABEL_26;
  v29 = v13 + 6;
  while (v30 != v29)
  {
    v26 = *(_QWORD *)(v31 + 8 * v29++);
    if (v26)
    {
      v23 = v29 - 1;
      goto LABEL_26;
    }
  }
LABEL_39:
  sub_100149DEC(v5);
}

uint64_t sub_10013DB54(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  void (*v5)(uint64_t, void *);
  uint64_t v6;
  id v7;

  v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  if (a2)
    v6 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(a2, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
  else
    v6 = 0;
  swift_retain(v4);
  v7 = a3;
  v5(v6, a3);
  swift_release(v4);

  return swift_bridgeObjectRelease(v6);
}

uint64_t sub_10013DBE8(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, void *);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;

  v5 = *(void (**)(uint64_t, uint64_t, void *))(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  if (a2)
  {
    v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
    v8 = v7;
  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
  swift_retain(v4);
  v9 = a3;
  v5(v6, v8, a3);
  swift_release(v4);

  return swift_bridgeObjectRelease(v8);
}

void sub_10013DC68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  NSString v6;
  uint64_t v7;
  id v8;

  if (!a2)
  {
    v6 = 0;
    if (a3)
      goto LABEL_3;
LABEL_5:
    v7 = 0;
    goto LABEL_6;
  }
  v6 = String._bridgeToObjectiveC()();
  if (!a3)
    goto LABEL_5;
LABEL_3:
  v7 = _convertErrorToNSError(_:)(a3);
LABEL_6:
  v8 = (id)v7;
  (*(void (**)(uint64_t, NSString))(a4 + 16))(a4, v6);

}

uint64_t sub_10013DCE0(__int128 *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)(v1 + 16) = 0;
  v3 = sub_1000080B4(&qword_10028C860);
  Dependency.init(dependencyId:config:)(0, 0, 0, v3);
  v4 = sub_1000080B4((uint64_t *)&unk_10028C900);
  Dependency.init(dependencyId:config:)(0, 0, 0, v4);
  v5 = sub_1000080B4((uint64_t *)&unk_10028C910);
  Dependency.init(dependencyId:config:)(0, 0, 0, v5);
  sub_10003A190(a1, v1 + 24);
  sub_10003A190((__int128 *)((char *)a1 + 120), v1 + 64);
  sub_10003A190(a1 + 5, v1 + 104);
  sub_10003A190((__int128 *)((char *)a1 + 40), v1 + 144);
  *(_OWORD *)(v1 + 184) = a1[10];
  sub_10003A190(a1 + 11, v1 + 200);
  return v1;
}

void sub_10013DDE0(char a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = type metadata accessor for CustodianRecoveryData(0);
  v4 = __chkstk_darwin(v2, v3);
  v6 = __chkstk_darwin(v4, v5);
  v8 = __chkstk_darwin(v6, v7);
  v10 = __chkstk_darwin(v8, v9);
  __chkstk_darwin(v10, v11);
  __asm { BR              X10 }
}

uint64_t sub_10013DED0()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  _BOOL4 v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  const char *v27;
  unint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t ObjectType;
  void (*v35)(uint64_t, _QWORD);
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  void *v45;
  void **v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  NSObject *v52;
  __n128 v53;
  os_log_type_t v54;
  uint8_t *v55;

  *(_QWORD *)(v6 - 184) = v0;
  if (qword_10028ADC8 != -1)
    swift_once(&qword_10028ADC8, sub_100046D2C);
  v7 = type metadata accessor for Logger(0);
  v8 = sub_100005288(v7, (uint64_t)qword_1002A89D8);
  *(_QWORD *)(v6 - 168) = v1;
  v9 = sub_100027FE8(v1, v3, type metadata accessor for CustodianRecoveryData);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.debug.getter(v10);
  v12 = os_log_type_enabled(v10, v11);
  *(_QWORD *)(v6 - 176) = v4;
  if (v12)
  {
    *(_QWORD *)(v6 - 192) = v8;
    v13 = swift_slowAlloc(22, -1);
    v14 = swift_slowAlloc(64, -1);
    *(_QWORD *)(v6 - 160) = v14;
    *(_DWORD *)v13 = 136315394;
    v15 = 0x8000000100209210;
    v16 = 0x6E6946656B617073;
    if (v2 == 2)
      v16 = 0xD000000000000011;
    else
      v15 = 0xEA00000000006C61;
    if (v2 == 1)
      v17 = 0xD000000000000015;
    else
      v17 = v16;
    if (v2 == 1)
      v18 = 0x80000001002091F0;
    else
      v18 = v15;
    *(_QWORD *)(v6 - 112) = sub_1001DEF4C(v17, v18, (uint64_t *)(v6 - 160));
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v6 - 112, v6 - 104);
    swift_bridgeObjectRelease(v18);
    *(_WORD *)(v13 + 12) = 2080;
    v19 = sub_1000E3D40();
    v21 = v20;
    *(_QWORD *)(v6 - 112) = sub_1001DEF4C(v19, v20, (uint64_t *)(v6 - 160));
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v6 - 112, v6 - 104);
    swift_bridgeObjectRelease(v21);
    sub_100028388(v3, type metadata accessor for CustodianRecoveryData);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Received %s push with data: %s", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy(v14, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1, -1);
    swift_slowDealloc(v13, -1, -1);

    v4 = *(_QWORD *)(v6 - 176);
  }
  else
  {
    sub_100028388(v3, type metadata accessor for CustodianRecoveryData);

  }
  result = sub_1001476C0(*(_QWORD *)(v6 - 168));
  if (result)
  {
    v24 = result;
    v25 = v23;
    sub_100149E34(result, v23, v2);
    v26 = 0xD000000000000011;
    if (v2 == 1)
    {
      v26 = 0xD000000000000015;
      v27 = "spakeGenCustodianKeys";
    }
    else
    {
      if (v2 != 2)
      {
        v30 = swift_bridgeObjectRelease(0xEA00000000006C61);
LABEL_26:
        v52 = Logger.logObject.getter(v30);
        v54 = static os_log_type_t.default.getter(v53);
        if (os_log_type_enabled(v52, v54))
        {
          v55 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v55 = 0;
          _os_log_impl((void *)&_mh_execute_header, v52, v54, "Message verified Code entered on Owner device is correct!!!, Getting RKC + PRKC + otCustodianID", v55, 2u);
          swift_slowDealloc(v55, -1, -1);
        }

        sub_10014049C(v24, v25);
        return swift_unknownObjectRelease(v24);
      }
      v27 = "spakeGenOwnerKeys";
    }
    v28 = (unint64_t)(v27 - 32) | 0x8000000000000000;
    v29 = _stringCompareWithSmolCheck(_:_:expecting:)(v26, v28, 0x6E6946656B617073, 0xEA00000000006C61, 0);
    v30 = swift_bridgeObjectRelease(v28);
    if ((v29 & 1) == 0)
    {
      v31 = sub_10014A7A8(v24, v25, v2);
      v33 = v32;
      ObjectType = swift_getObjectType(v24);
      v35 = (void (*)(uint64_t, _QWORD))(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v25 + 48))(v6 - 160, ObjectType, v25);
      v37 = (uint64_t *)(v36 + *(int *)(v5 + 44));
      v38 = *v37;
      v39 = v37[1];
      *v37 = v31;
      v37[1] = v33;
      sub_1000144D8(v38, v39);
      v35(v6 - 160, 0);
      if ((v2 & 0xFC) != 0)
        v40 = 5;
      else
        v40 = (v2 + 1);
      v41 = v24 + OBJC_IVAR____TtC13appleaccountd24CustodianRecoverySession_recoveryData;
      swift_beginAccess(v24 + OBJC_IVAR____TtC13appleaccountd24CustodianRecoverySession_recoveryData, v6 - 112, 0, 0);
      v42 = v41;
      v43 = *(_QWORD *)(v6 - 184);
      sub_100027FE8(v42, v43, type metadata accessor for CustodianRecoveryData);
      sub_10014873C(v43, v40);
      v45 = v44;
      sub_100028388(v43, type metadata accessor for CustodianRecoveryData);
      v46 = (void **)sub_10000732C((_QWORD *)(v4 + 24), *(_QWORD *)(v4 + 48));
      v47 = swift_allocObject(&unk_10026A068, 32, 7);
      *(_QWORD *)(v47 + 16) = 0;
      *(_QWORD *)(v47 + 24) = 0;
      v48 = *v46;
      v49 = swift_allocObject(&unk_10026A090, 32, 7);
      *(_QWORD *)(v49 + 16) = sub_10014C2A4;
      *(_QWORD *)(v49 + 24) = v47;
      *(_QWORD *)(v6 - 128) = sub_10014C29C;
      *(_QWORD *)(v6 - 120) = v49;
      *(_QWORD *)(v6 - 160) = _NSConcreteStackBlock;
      *(_QWORD *)(v6 - 152) = 1107296256;
      *(_QWORD *)(v6 - 144) = sub_100045BC0;
      *(_QWORD *)(v6 - 136) = &unk_10026A0A8;
      v50 = _Block_copy((const void *)(v6 - 160));
      v51 = *(_QWORD *)(v6 - 120);
      swift_retain(v47);
      swift_release(v51);
      objc_msgSend(v48, "startCustodianRecoveryTransactionWithContext:completion:", v45, v50);
      _Block_release(v50);
      swift_unknownObjectRelease(v24);

      return swift_release(v47);
    }
    goto LABEL_26;
  }
  return result;
}

void sub_10013E9D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  uint64_t v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t *v24;
  uint64_t v25;
  os_log_type_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *log;
  uint64_t v36;
  uint64_t v38;
  __int128 v39;

  v14 = a2;
  if (a1)
  {
    swift_errorRetain(a1);
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v16 = type metadata accessor for Logger(0);
    sub_100005288(v16, (uint64_t)qword_1002A89D8);
    v17 = swift_errorRetain(a1);
    v18 = Logger.logObject.getter(v17);
    v19 = static os_log_type_t.error.getter(v18);
    if (os_log_type_enabled(v18, v19))
    {
      log = v18;
      v36 = a3;
      v20 = a4;
      v21 = a5;
      v22 = v19;
      v23 = (uint8_t *)swift_slowAlloc(12, -1);
      v24 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v23 = 138412290;
      v25 = _convertErrorToNSError(_:)(a1);
      *(_QWORD *)&v39 = v25;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, (char *)&v39 + 8);
      *v24 = v25;
      swift_errorRelease(a1);
      v26 = v22;
      a5 = v21;
      a4 = v20;
      a3 = v36;
      _os_log_impl((void *)&_mh_execute_header, log, v26, "Failed to get configuration with error: %@, starting session with default values", v23, 0xCu);
      v27 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v24, 1, v27);
      swift_slowDealloc(v24, -1, -1);
      swift_slowDealloc(v23, -1, -1);

      swift_errorRelease(a1);
    }
    else
    {
      swift_errorRelease(a1);
      swift_errorRelease(a1);

    }
    v14 = a2;
  }
  v28 = *(_QWORD *)(v14 + 16);
  if (v28)
  {
    swift_bridgeObjectRetain(v14);
    v38 = a7;
    v29 = a8;
    v30 = 0;
    do
    {
      v31 = v14 + 16 * v30++;
      v39 = *(_OWORD *)(v31 + 32);
      v32 = v14;
      v33 = v39;
      swift_unknownObjectRetain(v39);
      sub_10013EC5C((uint64_t *)&v39, a3, a4, a5, a6, v38, v29);
      v34 = v33;
      v14 = v32;
      swift_unknownObjectRelease(v34);
    }
    while (v28 != v30);
    swift_bridgeObjectRelease(v32);
  }
}

uint64_t sub_10013EC5C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint8_t *v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t Strong;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  id v37;
  NSObject *v38;
  os_log_type_t v39;
  uint8_t *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD v60[3];
  void *v61[3];
  _BYTE v62[24];
  _BYTE v63[24];
  _BYTE v64[24];

  v58 = a7;
  v59 = a5;
  v12 = type metadata accessor for CustodianRecoveryData(0);
  __chkstk_darwin(v12, v13);
  v15 = (char *)&v55 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *a1;
  v17 = a4 + 16;
  if (qword_10028ADC8 != -1)
    swift_once(&qword_10028ADC8, sub_100046D2C);
  v18 = type metadata accessor for Logger(0);
  v57 = sub_100005288(v18, (uint64_t)qword_1002A89D8);
  v19 = Logger.logObject.getter(v57);
  v20 = static os_log_type_t.debug.getter(v19);
  if (os_log_type_enabled(v19, v20))
  {
    v21 = v17;
    v22 = a3;
    v23 = v15;
    v24 = a2;
    v25 = a6;
    v26 = v16;
    v27 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v27 = 0;
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "Generating new session with completion and code", v27, 2u);
    v28 = v27;
    v16 = v26;
    a6 = v25;
    a2 = v24;
    v15 = v23;
    a3 = v22;
    v17 = v21;
    swift_slowDealloc(v28, -1, -1);
  }

  v29 = v16 + OBJC_IVAR____TtC13appleaccountd24CustodianRecoverySession_recoveryData;
  swift_beginAccess(v16 + OBJC_IVAR____TtC13appleaccountd24CustodianRecoverySession_recoveryData, v64, 0, 0);
  sub_100027FE8(v29, (uint64_t)v15, type metadata accessor for CustodianRecoveryData);
  v30 = *((_QWORD *)v15 + 5);
  swift_bridgeObjectRetain(a3);
  swift_bridgeObjectRelease(v30);
  *((_QWORD *)v15 + 4) = a2;
  *((_QWORD *)v15 + 5) = a3;
  swift_beginAccess(v17, v63, 0, 0);
  Strong = swift_weakLoadStrong(v17);
  if (Strong)
  {
    v32 = Strong;
    v33 = *(_QWORD *)(Strong + 184);
    swift_unknownObjectRetain(v33);
    swift_release(v32);
    swift_beginAccess(v17, v62, 0, 0);
    v34 = swift_weakLoadStrong(v17);
    v56 = v16;
    if (v34)
    {
      v35 = v34;
      v36 = *(void **)(v34 + 16);
      v37 = v36;
      swift_release(v35);
    }
    else
    {
      v36 = 0;
    }
    type metadata accessor for AACustodianRecoveryError(0);
    v42 = v41;
    v60[0] = -9001;
    v43 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
    v44 = sub_100005150(&qword_10028B590, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianRecoveryError, (uint64_t)&unk_100217FF4);
    _BridgedStoredNSError.init(_:userInfo:)(v61, v60, v43, v42, v44);
    v45 = v61[0];
    v46 = sub_10000C834(v36, (uint64_t)v15, v59, a6, v61[0]);
    v48 = v47;
    swift_unknownObjectRelease(v33);

    swift_beginAccess(v17, v61, 0, 0);
    v49 = swift_weakLoadStrong(v17);
    if (v49)
    {
      v50 = v49;
      v51 = *(_QWORD *)(v49 + 184);
      swift_unknownObjectRetain(v51);
      swift_release(v50);
      sub_10000D134(v56 + OBJC_IVAR____TtC13appleaccountd24CustodianRecoverySession_sessionID, v58, 0);
      swift_unknownObjectRelease(v51);
    }
    swift_beginAccess(v17, v60, 0, 0);
    v52 = swift_weakLoadStrong(v17);
    if (v52)
    {
      v53 = v52;
      sub_10013F428(v46, v48);
      swift_release(v53);
    }
    swift_unknownObjectRelease(v46);
  }
  else
  {
    v38 = Logger.logObject.getter(0);
    v39 = static os_log_type_t.error.getter(v38);
    if (os_log_type_enabled(v38, v39))
    {
      v40 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v40 = 0;
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "Unexpectedly found nil while unwrapping self...", v40, 2u);
      swift_slowDealloc(v40, -1, -1);
    }

  }
  return sub_100028388((uint64_t)v15, type metadata accessor for CustodianRecoveryData);
}

void sub_10013F05C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t ObjectType;
  void (*v20)(_BYTE *, _QWORD);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  os_log_type_t v29;
  uint8_t *v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  os_log_t oslog;
  NSObject *osloga;
  _BYTE v36[40];
  _BYTE v37[24];

  v2 = a1[1];
  if (v2)
  {
    v3 = v1;
    v5 = *a1;
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v6 = type metadata accessor for Logger(0);
    v7 = sub_100005288(v6, (uint64_t)qword_1002A89D8);
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.debug.getter(v8);
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Looking for existing sessions to start code verification", v10, 2u);
      swift_slowDealloc(v10, -1, -1);
    }

    v11 = *(_QWORD *)(v3 + 184);
    os_unfair_lock_lock(*(os_unfair_lock_t *)(v11 + 32));
    swift_beginAccess(v11 + 16, v37, 0, 0);
    v12 = *(_QWORD *)(v11 + 16);
    swift_bridgeObjectRetain(v2);
    swift_bridgeObjectRetain(v12);
    v14 = sub_100148400(v13, v5, v2);
    swift_bridgeObjectRelease(v2);
    v15 = sub_10002AD8C(v14);
    swift_bridgeObjectRelease(v14);
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v11 + 32));
    v17 = v15[2];
    if (v17)
    {
      swift_bridgeObjectRetain(v15);
      oslog = (os_log_t)v15;
      v18 = v15 + 5;
      do
      {
        v21 = *(v18 - 1);
        v22 = *v18;
        v23 = swift_unknownObjectRetain(v21);
        v24 = Logger.logObject.getter(v23);
        v25 = static os_log_type_t.debug.getter(v24);
        if (os_log_type_enabled(v24, v25))
        {
          v26 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v26 = 0;
          _os_log_impl((void *)&_mh_execute_header, v24, v25, "Updating session with incoming data from IdMS", v26, 2u);
          swift_slowDealloc(v26, -1, -1);
        }

        ObjectType = swift_getObjectType(v21);
        v20 = (void (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v22 + 48))(v36, ObjectType, v22);
        sub_1000E2D20(a1);
        v20(v36, 0);
        sub_10013F428(v21, v22);
        swift_unknownObjectRelease(v21);
        v18 += 2;
        --v17;
      }
      while (v17);
      swift_bridgeObjectRelease_n(oslog, 2);
    }
    else
    {
      v31 = Logger.logObject.getter(v16);
      v32 = static os_log_type_t.debug.getter(v31);
      if (os_log_type_enabled(v31, v32))
      {
        v33 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v33 = 0;
        _os_log_impl((void *)&_mh_execute_header, v31, v32, "Found no active sessions for recovery. Starting a session and waiting for user to enter a code...", v33, 2u);
        swift_slowDealloc(v33, -1, -1);
      }

      sub_10013FF54((uint64_t)a1);
      swift_bridgeObjectRelease(v15);
    }
  }
  else
  {
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v27 = type metadata accessor for Logger(0);
    v28 = sub_100005288(v27, (uint64_t)qword_1002A89D8);
    osloga = Logger.logObject.getter(v28);
    v29 = static os_log_type_t.error.getter(osloga);
    if (os_log_type_enabled(osloga, v29))
    {
      v30 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v30 = 0;
      _os_log_impl((void *)&_mh_execute_header, osloga, v29, "No recovery session id in the incoming RecoveryData, unable to proceed...", v30, 2u);
      swift_slowDealloc(v30, -1, -1);
    }

  }
}

uint64_t sub_10013F428(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t ObjectType;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  __n128 v30;
  os_log_type_t v31;
  NSObject *v32;
  os_log_type_t v33;
  _BOOL4 v34;
  uint64_t v35;
  NSObject *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  uint8_t *v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  NSObject *v55;
  NSObject *v56;
  uint64_t v57;
  uint64_t (*v58)(uint64_t *, uint64_t, uint64_t);
  uint64_t v59;
  void (*v60)(uint64_t *, _QWORD);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void (*v71)(uint64_t *, _QWORD);
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  void *v77;
  void *v78;
  void **v79;
  uint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  NSObject *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t aBlock[5];
  uint64_t v103;
  _BYTE v104[32];
  uint64_t v105;
  _BYTE v106[32];
  char v107[24];

  v3 = v2;
  v101 = a2;
  v5 = type metadata accessor for CustodianRecoveryData(0);
  v7 = __chkstk_darwin(v5, v6);
  v9 = (char *)&v87 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7, v10);
  v12 = (uint64_t *)((char *)&v87 - v11);
  ObjectType = swift_getObjectType(a1);
  v14 = a1 + OBJC_IVAR____TtC13appleaccountd24CustodianRecoverySession_recoveryData;
  swift_beginAccess(a1 + OBJC_IVAR____TtC13appleaccountd24CustodianRecoverySession_recoveryData, v107, 0, 0);
  sub_100027FE8(v14, (uint64_t)v12, type metadata accessor for CustodianRecoveryData);
  v15 = v12[5];
  if (!v15)
  {
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v39 = type metadata accessor for Logger(0);
    v40 = sub_100005288(v39, (uint64_t)qword_1002A89D8);
    v41 = Logger.logObject.getter(v40);
    v42 = static os_log_type_t.error.getter(v41);
    if (os_log_type_enabled(v41, v42))
    {
      v43 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v43 = 0;
      _os_log_impl((void *)&_mh_execute_header, v41, v42, "Stored session did not contain a recovery code, nothing to do here...", v43, 2u);
      swift_slowDealloc(v43, -1, -1);
    }

    goto LABEL_21;
  }
  v16 = v12[1];
  if (!v16)
  {
LABEL_14:
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v44 = type metadata accessor for Logger(0);
    v45 = sub_100005288(v44, (uint64_t)qword_1002A89D8);
    v46 = Logger.logObject.getter(v45);
    v47 = static os_log_type_t.error.getter(v46);
    if (os_log_type_enabled(v46, v47))
    {
      v48 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v48 = 0;
      _os_log_impl((void *)&_mh_execute_header, v46, v47, "AAData malformed in session, Nothing to do here...", v48, 2u);
      swift_slowDealloc(v48, -1, -1);
    }

    type metadata accessor for AACustodianRecoveryError(0);
    v50 = v49;
    v105 = -9004;
    v51 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
    v52 = sub_100005150(&qword_10028B590, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianRecoveryError, (uint64_t)&unk_100217FF4);
    _BridgedStoredNSError.init(_:userInfo:)(aBlock, &v105, v51, v50, v52);
    v53 = (void *)aBlock[0];
    sub_1001466E8(a1, v101, aBlock[0], 0);

LABEL_21:
    v86 = (uint64_t)v12;
    return sub_100028388(v86, type metadata accessor for CustodianRecoveryData);
  }
  v95 = ObjectType;
  v89 = v5;
  v90 = v9;
  v17 = v12[4];
  v96 = *v12;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRetain(v16);
  v18 = sub_1001498F8((uint64_t)v12);
  v100 = v21;
  if (!v19)
  {
    swift_bridgeObjectRelease(v16);
    swift_bridgeObjectRelease(v15);
    goto LABEL_14;
  }
  v22 = v18;
  v23 = v19;
  v24 = v20;
  v94 = v17;
  v97 = a1;
  if (qword_10028ADC8 != -1)
    swift_once(&qword_10028ADC8, sub_100046D2C);
  v25 = type metadata accessor for Logger(0);
  v26 = sub_100005288(v25, (uint64_t)qword_1002A89D8);
  v27 = v100;
  sub_10014BDDC(v22, v23, v100, v24);
  swift_bridgeObjectRetain(v16);
  v28 = sub_10014BDDC(v22, v23, v27, v24);
  v91 = v26;
  v29 = Logger.logObject.getter(v28);
  v31 = static os_log_type_t.default.getter(v30);
  v93 = v29;
  v32 = v29;
  v33 = v31;
  v34 = os_log_type_enabled(v32, v31);
  v98 = v24;
  v99 = v3;
  if (v34)
  {
    v35 = swift_slowAlloc(22, -1);
    v88 = swift_slowAlloc(64, -1);
    aBlock[0] = v88;
    *(_DWORD *)v35 = 136315394;
    swift_bridgeObjectRetain(v16);
    v105 = sub_1001DEF4C(v96, v16, aBlock);
    v27 = v100;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v105, v106);
    swift_bridgeObjectRelease_n(v16, 3);
    *(_WORD *)(v35 + 12) = 2080;
    swift_bridgeObjectRetain(v23);
    v105 = sub_1001DEF4C(v22, v23, aBlock);
    v24 = v98;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v105, v106);
    swift_bridgeObjectRelease(v23);
    sub_100149DB4(v22, v23, v27, v24);
    sub_100149DB4(v22, v23, v27, v24);
    v36 = v93;
    _os_log_impl((void *)&_mh_execute_header, v93, v33, "Verifying custodian message session with RecoveryID: %s, SpakeID: %s", (uint8_t *)v35, 0x16u);
    v37 = v88;
    swift_arrayDestroy(v88, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v37, -1, -1);
    v38 = v99;
    swift_slowDealloc(v35, -1, -1);

  }
  else
  {
    swift_bridgeObjectRelease_n(v16, 2);
    sub_100149DB4(v22, v23, v27, v24);
    sub_100149DB4(v22, v23, v27, v24);

    v38 = v3;
  }
  swift_bridgeObjectRetain(v23);
  sub_10000F450(v27, v24);
  sub_10000F494(v27, v24);
  v96 = v22;
  v54 = sub_1001AEE10(v22, v23);
  v56 = v55;
  sub_10000732C((_QWORD *)(v38 + 200), *(_QWORD *)(v38 + 224));
  sub_1001A63B0(v54, (unint64_t)v56, v15, &v105);
  v92 = v23;
  v94 = v54;
  v93 = v56;
  swift_bridgeObjectRelease(v15);
  swift_bridgeObjectRetain(v23);
  sub_10000F450(v27, v24);
  sub_10000F494(v27, v24);
  v57 = v101;
  v58 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v101 + 48);
  v59 = v97;
  v60 = (void (*)(uint64_t *, _QWORD))v58(aBlock, v95, v101);
  v62 = *(_QWORD *)(v61 + 24);
  *(_QWORD *)(v61 + 16) = v96;
  *(_QWORD *)(v61 + 24) = v23;
  swift_bridgeObjectRelease(v62);
  v60(aBlock, 0);
  sub_100006CA4((uint64_t)&v105, (uint64_t)aBlock);
  v63 = v59 + OBJC_IVAR____TtC13appleaccountd24CustodianRecoverySession_verifier;
  swift_beginAccess(v59 + OBJC_IVAR____TtC13appleaccountd24CustodianRecoverySession_verifier, v104, 33, 0);
  sub_10014BA58((uint64_t)aBlock, v63);
  swift_endAccess(v104);
  sub_100149E34(v59, v57, 0);
  v65 = v99;
  v66 = sub_10014A7A8(v59, v101, 0);
  v67 = v94;
  v68 = v66;
  v70 = v69;
  v71 = (void (*)(uint64_t *, _QWORD))v58(aBlock, v95, v101);
  v73 = (uint64_t *)(v72 + *(int *)(v89 + 44));
  v74 = *v73;
  v75 = v73[1];
  *v73 = v68;
  v73[1] = v70;
  sub_1000144D8(v74, v75);
  v71(aBlock, 0);
  v76 = (uint64_t)v90;
  sub_100027FE8(v14, (uint64_t)v90, type metadata accessor for CustodianRecoveryData);
  sub_10014873C(v76, 1);
  v78 = v77;
  sub_100028388(v76, type metadata accessor for CustodianRecoveryData);
  v79 = (void **)sub_10000732C((_QWORD *)(v65 + 24), *(_QWORD *)(v65 + 48));
  v80 = swift_allocObject(&unk_100269FF0, 32, 7);
  *(_QWORD *)(v80 + 16) = 0;
  *(_QWORD *)(v80 + 24) = 0;
  v81 = *v79;
  v82 = swift_allocObject(&unk_10026A018, 32, 7);
  *(_QWORD *)(v82 + 16) = sub_10014C2A4;
  *(_QWORD *)(v82 + 24) = v80;
  aBlock[4] = (uint64_t)sub_10014C29C;
  v103 = v82;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_100045BC0;
  aBlock[3] = (uint64_t)&unk_10026A030;
  v83 = v67;
  v84 = _Block_copy(aBlock);
  v85 = v103;
  swift_retain(v80);
  swift_release(v85);
  objc_msgSend(v81, "startCustodianRecoveryTransactionWithContext:completion:", v78, v84);
  _Block_release(v84);

  swift_release(v80);
  sub_10000F494(v83, (unint64_t)v93);
  sub_100149DB4(v96, v92, v100, v98);
  sub_100006F58(&v105);
  v86 = (uint64_t)v12;
  return sub_100028388(v86, type metadata accessor for CustodianRecoveryData);
}

uint64_t sub_10013FF54(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  void **v18;
  uint64_t v19;
  _QWORD *v20;
  void *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  _QWORD aBlock[5];
  uint64_t v27;

  v2 = v1;
  v4 = type metadata accessor for CustodianRecoveryData(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v8 = __chkstk_darwin(v4, v7);
  v9 = (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8, v10);
  v12 = (char *)aBlock - v11;
  v13 = swift_allocObject(&unk_100269DC0, 24, 7);
  swift_weakInit(v13 + 16, v2);
  sub_100027FE8(a1, (uint64_t)v12, type metadata accessor for CustodianRecoveryData);
  sub_100027FE8((uint64_t)v12, (uint64_t)v9, type metadata accessor for CustodianRecoveryData);
  v14 = *(unsigned __int8 *)(v5 + 80);
  v15 = (v14 + 24) & ~v14;
  v16 = swift_allocObject(&unk_100269F50, v15 + v6, v14 | 7);
  *(_QWORD *)(v16 + 16) = v13;
  sub_10003B730((uint64_t)v12, v16 + v15, type metadata accessor for CustodianRecoveryData);
  if (v2[2])
  {
    swift_retain_n(v13, 2);
    sub_1001401E4(0, v13, (uint64_t)v9);
    swift_release(v13);
    v17 = (_QWORD *)v16;
  }
  else
  {
    v18 = (void **)sub_10000732C(v2 + 3, v2[6]);
    v19 = swift_allocObject(&unk_100269DC0, 24, 7);
    swift_weakInit(v19 + 16, v2);
    v20 = (_QWORD *)swift_allocObject(&unk_100269F78, 40, 7);
    v20[2] = v19;
    v20[3] = sub_10014BF78;
    v20[4] = v16;
    v21 = *v18;
    v22 = swift_allocObject(&unk_100269FA0, 32, 7);
    *(_QWORD *)(v22 + 16) = sub_10014BFBC;
    *(_QWORD *)(v22 + 24) = v20;
    aBlock[4] = sub_1000867D4;
    v27 = v22;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_10013DB54;
    aBlock[3] = &unk_100269FB8;
    v23 = _Block_copy(aBlock);
    v24 = v27;
    swift_retain_n(v13, 2);
    swift_retain(v19);
    swift_retain(v16);
    swift_retain(v20);
    swift_release(v24);
    objc_msgSend(v21, "fetchCustodianRecoveryCodeConfigurationWithCompletion:", v23);
    _Block_release(v23);
    swift_release(v13);
    swift_release(v16);
    swift_release(v19);
    v17 = v20;
  }
  swift_release(v17);
  sub_100028388((uint64_t)v9, type metadata accessor for CustodianRecoveryData);
  return swift_release(v13);
}

void sub_1001401E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t Strong;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  _BYTE v29[24];
  uint64_t v30;
  uint64_t v31;

  v4 = a2 + 16;
  if (a1)
  {
    swift_errorRetain(a1);
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v6 = type metadata accessor for Logger(0);
    sub_100005288(v6, (uint64_t)qword_1002A89D8);
    v7 = swift_errorRetain(a1);
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.error.getter(v8);
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc(12, -1);
      v11 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v10 = 138412290;
      v12 = _convertErrorToNSError(_:)(a1);
      v30 = v12;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31);
      *v11 = v12;
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Failed to get configuration with error: %@, starting session with default values", v10, 0xCu);
      v13 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v11, 1, v13);
      swift_slowDealloc(v11, -1, -1);
      swift_slowDealloc(v10, -1, -1);

      swift_errorRelease(a1);
    }
    else
    {
      swift_errorRelease(a1);
      swift_errorRelease(a1);

    }
  }
  swift_beginAccess(v4, &v30, 0, 0);
  Strong = swift_weakLoadStrong(v4);
  if (Strong)
  {
    v15 = Strong;
    v16 = *(_QWORD *)(Strong + 184);
    swift_unknownObjectRetain(v16);
    swift_release(v15);
    swift_beginAccess(v4, v29, 0, 0);
    v17 = swift_weakLoadStrong(v4);
    if (v17)
    {
      v18 = v17;
      v19 = *(void **)(v17 + 16);
      v20 = v19;
      swift_release(v18);
    }
    else
    {
      v19 = 0;
    }
    type metadata accessor for AACustodianRecoveryError(0);
    v22 = v21;
    v27 = -9001;
    v23 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
    v24 = sub_100005150(&qword_10028B590, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianRecoveryError, (uint64_t)&unk_100217FF4);
    _BridgedStoredNSError.init(_:userInfo:)(&v28, &v27, v23, v22, v24);
    v25 = v28;
    v26 = sub_10000C834(v19, a3, 0, 0, v28);
    swift_unknownObjectRelease(v16);

    swift_unknownObjectRelease(v26);
  }
}

void sub_10014049C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t *v27;
  __int128 *v28;
  void (*v29)(uint64_t, __int128 *, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __n128 v35;
  uint64_t v36;
  __n128 v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  _BOOL4 v53;
  uint64_t v54;
  uint8_t *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  void (*v62)(char *, char *, uint64_t);
  _QWORD *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72[24];
  __int128 v73;
  uint64_t v74;
  uint64_t v75[5];
  char v76[32];

  v69 = a2;
  v3 = sub_1000080B4((uint64_t *)&unk_1002904F0);
  __chkstk_darwin(v3, v4);
  v6 = (__int128 *)((char *)&v61 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  v11 = __chkstk_darwin(v7, v10);
  v64 = (char *)&v61 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11, v12);
  v68 = (uint64_t)&v61 - v13;
  v14 = type metadata accessor for CustodianRecoveryData(0);
  v16 = __chkstk_darwin(v14, v15);
  v18 = (char *)&v61 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16, v19);
  v21 = (char *)&v61 - v20;
  v71 = a1;
  v22 = a1 + OBJC_IVAR____TtC13appleaccountd24CustodianRecoverySession_recoveryData;
  swift_beginAccess(v22, v76, 0, 0);
  sub_100027FE8(v22, (uint64_t)v21, type metadata accessor for CustodianRecoveryData);
  v65 = sub_1001498F8((uint64_t)v21);
  v24 = v23;
  v66 = v25;
  v67 = v26;
  sub_100028388((uint64_t)v21, type metadata accessor for CustodianRecoveryData);
  if (v24)
  {
    sub_100027FE8(v22, (uint64_t)v18, type metadata accessor for CustodianRecoveryData);
    sub_100024A20((uint64_t)&v18[*(int *)(v14 + 28)], (uint64_t)v6, (uint64_t *)&unk_1002904F0);
    sub_100028388((uint64_t)v18, type metadata accessor for CustodianRecoveryData);
    if ((*(unsigned int (**)(__int128 *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
    {
      sub_100149DB4(v65, v24, v66, v67);
      v27 = (uint64_t *)&unk_1002904F0;
      v28 = v6;
    }
    else
    {
      v29 = *(void (**)(uint64_t, __int128 *, uint64_t))(v8 + 32);
      v30 = v68;
      v29(v68, v6, v7);
      v31 = v71;
      v32 = v71 + OBJC_IVAR____TtC13appleaccountd24CustodianRecoverySession_verifier;
      swift_beginAccess(v71 + OBJC_IVAR____TtC13appleaccountd24CustodianRecoverySession_verifier, v72, 0, 0);
      sub_100024A20(v32, (uint64_t)&v73, (uint64_t *)&unk_100291850);
      if (v74)
      {
        sub_10003A190(&v73, (uint64_t)v75);
        v33 = v70;
        v63 = sub_10000732C((_QWORD *)(v70 + 64), *(_QWORD *)(v70 + 88));
        v34 = swift_unownedRetainStrong(v33);
        v36 = swift_unownedRetain(v34, v35);
        v38 = swift_unownedRetain(v36, v37);
        swift_release(v38);
        v39 = v64;
        (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v64, v30, v7);
        sub_100006CA4((uint64_t)v75, (uint64_t)&v73);
        v40 = *(unsigned __int8 *)(v8 + 80);
        v62 = (void (*)(char *, char *, uint64_t))v29;
        v41 = (v40 + 40) & ~v40;
        v42 = (v9 + v41 + 7) & 0xFFFFFFFFFFFFFFF8;
        v43 = (v42 + 47) & 0xFFFFFFFFFFFFFFF8;
        v44 = (char *)swift_allocObject(&unk_100269EB0, v43 + 32, v40 | 7);
        *((_QWORD *)v44 + 2) = v33;
        *((_QWORD *)v44 + 3) = v31;
        *((_QWORD *)v44 + 4) = v69;
        v62(&v44[v41], v39, v7);
        sub_10003A190(&v73, (uint64_t)&v44[v42]);
        v45 = &v44[v43];
        v46 = v65;
        *(_QWORD *)v45 = v65;
        *((_QWORD *)v45 + 1) = v24;
        v47 = v66;
        v48 = v67;
        *((_QWORD *)v45 + 2) = v66;
        *((_QWORD *)v45 + 3) = v48;
        swift_unknownObjectRetain(v71);
        sub_10014BDDC(v46, v24, v47, v48);
        sub_1001BF594(v68, (uint64_t)sub_10014BD60, (uint64_t)v44);
        swift_release(v44);
        sub_100149DB4(v46, v24, v47, v48);
        swift_unownedRelease(v33);
        sub_100006F58(v75);
        (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v68, v7);
        return;
      }
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v30, v7);
      sub_100149DB4(v65, v24, v66, v67);
      v27 = (uint64_t *)&unk_100291850;
      v28 = &v73;
    }
    sub_100004934((uint64_t)v28, v27);
  }
  if (qword_10028ADC8 != -1)
    swift_once(&qword_10028ADC8, sub_100046D2C);
  v49 = type metadata accessor for Logger(0);
  v50 = sub_100005288(v49, (uint64_t)qword_1002A89D8);
  v51 = Logger.logObject.getter(v50);
  v52 = static os_log_type_t.error.getter(v51);
  v53 = os_log_type_enabled(v51, v52);
  v54 = v71;
  if (v53)
  {
    v55 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v55 = 0;
    _os_log_impl((void *)&_mh_execute_header, v51, v52, "Session missing information, Nothing to do here...", v55, 2u);
    swift_slowDealloc(v55, -1, -1);
  }

  type metadata accessor for AACustodianRecoveryError(0);
  v57 = v56;
  *(_QWORD *)&v73 = -9004;
  v58 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
  v59 = sub_100005150(&qword_10028B590, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianRecoveryError, (uint64_t)&unk_100217FF4);
  _BridgedStoredNSError.init(_:userInfo:)(v75, &v73, v58, v57, v59);
  v60 = (void *)v75[0];
  sub_1001466E8(v54, v69, v75[0], 3);

}

uint64_t sub_1001409F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  int *v25;
  uint64_t v26;
  uint64_t v27;
  void **v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  void ***v39;
  void **v40;
  uint64_t v41;
  uint64_t *v42;
  _UNKNOWN **v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  __n128 v50;
  os_log_type_t v51;
  uint64_t v52;
  uint8_t *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint8_t *v58;
  void **v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  void **v64;
  uint64_t v66;
  NSObject *v67;
  os_log_type_t v68;
  uint8_t *v69;
  uint64_t *v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  NSObject *v88;
  os_log_type_t v89;
  uint8_t *v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  void **v95;
  uint64_t v96;
  _QWORD *v97;
  uint8_t *v98;
  uint8_t *v99;
  uint64_t v100;
  Swift::String v101;
  uint64_t v102;
  uint64_t inited;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t (*v110)(void ***, uint64_t, uint64_t);
  uint64_t v111;
  void (*v112)(void ***, _QWORD);
  uint64_t v113;
  uint64_t v114;
  uint64_t *v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  void (*v119)(void ***, _QWORD);
  uint64_t v120;
  uint64_t *v121;
  uint64_t v122;
  unint64_t v123;
  __n128 v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  void (*v128)(void ***, _QWORD);
  uint64_t v129;
  _QWORD *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  void *v135;
  void *v136;
  void **v137;
  uint64_t v138;
  void *v139;
  uint64_t v140;
  void *v141;
  uint64_t v142;
  const void *v143;
  uint64_t v144;
  uint64_t v145;
  NSObject *v146;
  os_log_type_t v147;
  uint8_t *v149;
  id v150;
  uint64_t v151;
  void **v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  NSString v156;
  uint64_t v157;
  Class isa;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  NSString v162;
  unint64_t v163;
  uint64_t v164;
  uint64_t v165;
  id v166;
  uint64_t v167;
  unint64_t v168;
  uint64_t ObjectType;
  uint8_t *v170;
  os_log_t v171;
  void **v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  char *v177;
  uint64_t v178;
  _QWORD *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t *v184;
  uint64_t v185;
  void **aBlock;
  _QWORD v187[4];
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  char v191[32];

  v174 = a8;
  v173 = a7;
  v179 = a6;
  v183 = a4;
  v185 = a3;
  v11 = sub_1000080B4((uint64_t *)&unk_1002904F0);
  __chkstk_darwin(v11, v12);
  v177 = (char *)&v167 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v178 = type metadata accessor for CustodianRecoveryData(0);
  v15 = __chkstk_darwin(v178, v14);
  v176 = (uint64_t)&v167 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15, v17);
  v175 = (uint64_t)&v167 - v18;
  v19 = type metadata accessor for CustodianRecoveryKeys(0);
  __chkstk_darwin(v19, v20);
  v184 = (uint64_t *)((char *)&v167 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  v181 = type metadata accessor for UUID(0);
  v180 = *(_QWORD *)(v181 - 8);
  __chkstk_darwin(v181, v22);
  v24 = (char *)&v167 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = (int *)type metadata accessor for CustodianRecoveryInfoRecord(0);
  __chkstk_darwin(v25, v26);
  v28 = (void **)((char *)&v167 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0));
  v29 = sub_1000080B4(&qword_100293AB0);
  __chkstk_darwin(v29, v30);
  v32 = (uint64_t *)((char *)&v167 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100024A20(a1, (uint64_t)v32, &qword_100293AB0);
  if (swift_getEnumCaseMultiPayload(v32, v29) == 1)
  {
    v33 = *v32;
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v34 = type metadata accessor for Logger(0);
    sub_100005288(v34, (uint64_t)qword_1002A89D8);
    v35 = swift_errorRetain(v33);
    v36 = Logger.logObject.getter(v35);
    v37 = static os_log_type_t.error.getter(v36);
    if (os_log_type_enabled(v36, v37))
    {
      v38 = (uint8_t *)swift_slowAlloc(12, -1);
      v39 = (void ***)swift_slowAlloc(8, -1);
      *(_DWORD *)v38 = 138412290;
      v40 = (void **)_convertErrorToNSError(_:)(v33);
      aBlock = v40;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v187);
      *v39 = v40;
      swift_errorRelease(v33);
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "Failed to fetch recovery records with error: %@", v38, 0xCu);
      v41 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v39, 1, v41);
      swift_slowDealloc(v39, -1, -1);
      swift_slowDealloc(v38, -1, -1);
    }
    else
    {
      swift_errorRelease(v33);
    }

    swift_unownedRetainStrong(a2);
    type metadata accessor for AACustodianRecoveryError(0);
    v61 = v60;
    v189 = -9004;
    v62 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
    v63 = sub_100005150(&qword_10028B590, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianRecoveryError, (uint64_t)&unk_100217FF4);
    _BridgedStoredNSError.init(_:userInfo:)(&aBlock, &v189, v62, v61, v63);
    v64 = aBlock;
    sub_1001466E8(v185, v183, (uint64_t)aBlock, 3);
    swift_errorRelease(v33);

    return swift_release(a2);
  }
  else
  {
    v182 = a2;
    sub_10003B730((uint64_t)v32, (uint64_t)v28, type metadata accessor for CustodianRecoveryInfoRecord);
    v42 = (uint64_t *)((char *)v28 + v25[8]);
    v43 = &off_10028A000;
    if ((unint64_t)v42[1] >> 60 == 15)
    {
      v44 = v181;
      if (qword_10028ADC8 != -1)
        swift_once(&qword_10028ADC8, sub_100046D2C);
      v45 = type metadata accessor for Logger(0);
      sub_100005288(v45, (uint64_t)qword_1002A89D8);
      v46 = v180;
      v47 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v180 + 16))(v24, a5, v44);
      v48 = v44;
      v49 = Logger.logObject.getter(v47);
      v51 = static os_log_type_t.default.getter(v50);
      if (os_log_type_enabled(v49, v51))
      {
        v171 = v49;
        v52 = v48;
        v53 = (uint8_t *)swift_slowAlloc(12, -1);
        v172 = (void **)swift_slowAlloc(32, -1);
        aBlock = v172;
        v170 = v53;
        *(_DWORD *)v53 = 136315138;
        ObjectType = (uint64_t)(v53 + 4);
        v54 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v55 = dispatch thunk of CustomStringConvertible.description.getter(v48, v54);
        v57 = v56;
        v189 = sub_1001DEF4C(v55, v56, (uint64_t *)&aBlock);
        v43 = &off_10028A000;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v189, &v190);
        swift_bridgeObjectRelease(v57);
        (*(void (**)(char *, uint64_t))(v46 + 8))(v24, v52);
        v49 = v171;
        v58 = v170;
        _os_log_impl((void *)&_mh_execute_header, v171, v51, "Records do not contain recoveryKey for this UUID: %s, likely non-CDP account", v170, 0xCu);
        v59 = v172;
        swift_arrayDestroy(v172, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v59, -1, -1);
        swift_slowDealloc(v58, -1, -1);
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v46 + 8))(v24, v48);
      }

    }
    if (v43[441] != (_UNKNOWN *)-1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v66 = type metadata accessor for Logger(0);
    v171 = (os_log_t)sub_100005288(v66, (uint64_t)qword_1002A89D8);
    v67 = Logger.logObject.getter(v171);
    v68 = static os_log_type_t.debug.getter(v67);
    if (os_log_type_enabled(v67, v68))
    {
      v69 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v69 = 0;
      _os_log_impl((void *)&_mh_execute_header, v67, v68, "Creating Message with RKC + PRKC + otCustodianID for owner device", v69, 2u);
      swift_slowDealloc(v69, -1, -1);
    }

    v70 = (uint64_t *)((char *)v28 + v25[7]);
    v71 = *v70;
    v72 = v70[1];
    v73 = *v42;
    v74 = v42[1];
    v75 = v184;
    sub_100024A20((uint64_t)v28 + v25[11], (uint64_t)v184 + *(int *)(v19 + 28), (uint64_t *)&unk_1002904F0);
    v76 = v25[12];
    v172 = v28;
    v77 = (char *)v28 + v76;
    v78 = *(_QWORD *)v77;
    v79 = *((_QWORD *)v77 + 1);
    *v75 = v71;
    v75[1] = v72;
    v75[2] = v73;
    v75[3] = v74;
    v75[4] = 0;
    v75[5] = 0;
    v80 = (uint64_t *)((char *)v75 + *(int *)(v19 + 32));
    *v80 = v78;
    v80[1] = v79;
    v81 = v182;
    swift_unownedRetainStrong(v182);
    sub_10000F450(v71, v72);
    sub_100014534(v73, v74);
    swift_bridgeObjectRetain(v79);
    swift_release(v81);
    v82 = sub_1000DED78((uint64_t)v75);
    if (v83 >> 60 == 15)
    {
      v88 = Logger.logObject.getter(v82);
      v89 = static os_log_type_t.error.getter(v88);
      if (os_log_type_enabled(v88, v89))
      {
        v90 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v90 = 0;
        _os_log_impl((void *)&_mh_execute_header, v88, v89, "failed encoding message with Keys", v90, 2u);
        swift_slowDealloc(v90, -1, -1);
      }

      swift_unownedRetainStrong(v81);
      type metadata accessor for AACustodianRecoveryError(0);
      v92 = v91;
      v189 = -9004;
      v93 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
      v94 = sub_100005150(&qword_10028B590, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianRecoveryError, (uint64_t)&unk_100217FF4);
      _BridgedStoredNSError.init(_:userInfo:)(&aBlock, &v189, v93, v92, v94);
      v95 = aBlock;
      sub_1001466E8(v185, v183, (uint64_t)aBlock, 3);
      swift_release(v81);

      sub_100028388((uint64_t)v184, type metadata accessor for CustodianRecoveryKeys);
      v96 = (uint64_t)v172;
    }
    else
    {
      v84 = v82;
      v85 = v83;
      v86 = v179[3];
      v87 = v179[4];
      sub_10000732C(v179, v86);
      v97 = (_QWORD *)(*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t))(v87 + 56))(v84, v85, v86, v87);
      v99 = v98;
      v167 = v84;
      v168 = v85;
      ObjectType = swift_getObjectType(v185);
      v100 = v182;
      swift_unownedRetainStrong(v182);
      v179 = v97;
      v170 = v99;
      v101 = Data.base64EncodedString(options:)(0);
      v102 = sub_1000080B4(&qword_10028BB68);
      inited = swift_initStackObject(v102, v191);
      *(_OWORD *)(inited + 16) = xmmword_100219130;
      strcpy((char *)(inited + 32), "spakeMessage");
      *(_BYTE *)(inited + 45) = 0;
      *(_WORD *)(inited + 46) = -5120;
      *(Swift::String *)(inited + 48) = v101;
      *(_QWORD *)(inited + 72) = &type metadata for String;
      strcpy((char *)(inited + 80), "spakeSessionId");
      *(_QWORD *)(inited + 120) = &type metadata for String;
      v104 = v173;
      *(_BYTE *)(inited + 95) = -18;
      *(_QWORD *)(inited + 96) = v104;
      v105 = v174;
      *(_QWORD *)(inited + 104) = v174;
      swift_bridgeObjectRetain(v101._object);
      swift_bridgeObjectRetain(v105);
      v106 = sub_100015894(inited);
      v107 = sub_1001CCDFC(v106);
      swift_bridgeObjectRelease(v106);
      v174 = sub_1000C3D78(v107);
      v173 = v108;
      swift_release(v100);
      swift_bridgeObjectRelease(v101._object);
      v109 = v183;
      v110 = *(uint64_t (**)(void ***, uint64_t, uint64_t))(v183 + 48);
      v111 = ObjectType;
      v112 = (void (*)(void ***, _QWORD))v110(&aBlock, ObjectType, v183);
      v113 = v178;
      v115 = (uint64_t *)(v114 + *(int *)(v178 + 44));
      v116 = *v115;
      v117 = v115[1];
      v118 = v173;
      *v115 = v174;
      v115[1] = v118;
      sub_1000144D8(v116, v117);
      v112(&aBlock, 0);
      sub_10000F450(v71, v72);
      v119 = (void (*)(void ***, _QWORD))v110(&aBlock, v111, v109);
      v121 = (uint64_t *)(v120 + *(int *)(v113 + 40));
      v122 = *v121;
      v123 = v121[1];
      *v121 = v71;
      v121[1] = v72;
      sub_1000144D8(v122, v123);
      v119(&aBlock, 0);
      v124 = swift_bridgeObjectRetain(v79);
      v125 = v185;
      v126 = v109;
      v127 = v113;
      v128 = (void (*)(void ***, _QWORD))((uint64_t (*)(void ***, uint64_t, uint64_t, __n128))v110)(&aBlock, v111, v126, v124);
      v130 = (_QWORD *)(v129 + *(int *)(v113 + 64));
      v131 = v130[1];
      *v130 = v78;
      v130[1] = v79;
      swift_bridgeObjectRelease(v131);
      v128(&aBlock, 0);
      v132 = v182;
      swift_unownedRetainStrong(v182);
      v133 = v125 + OBJC_IVAR____TtC13appleaccountd24CustodianRecoverySession_recoveryData;
      swift_beginAccess(v125 + OBJC_IVAR____TtC13appleaccountd24CustodianRecoverySession_recoveryData, &v189, 0, 0);
      v134 = v175;
      sub_100027FE8(v133, v175, type metadata accessor for CustodianRecoveryData);
      sub_10014873C(v134, 4);
      v136 = v135;
      sub_100028388(v134, type metadata accessor for CustodianRecoveryData);
      v137 = (void **)sub_10000732C((_QWORD *)(v132 + 24), *(_QWORD *)(v132 + 48));
      v138 = swift_allocObject(&unk_100269ED8, 32, 7);
      *(_QWORD *)(v138 + 16) = 0;
      *(_QWORD *)(v138 + 24) = 0;
      v139 = *v137;
      v140 = swift_allocObject(&unk_100269F00, 32, 7);
      *(_QWORD *)(v140 + 16) = sub_10014C2A4;
      *(_QWORD *)(v140 + 24) = v138;
      v187[3] = sub_10014C29C;
      v188 = v140;
      aBlock = _NSConcreteStackBlock;
      v187[0] = 1107296256;
      v187[1] = sub_100045BC0;
      v187[2] = &unk_100269F18;
      v141 = _Block_copy(&aBlock);
      v142 = v188;
      swift_retain(v138);
      swift_release(v142);
      objc_msgSend(v139, "startCustodianRecoveryTransactionWithContext:completion:", v136, v141);
      v143 = v141;
      v144 = v132;
      _Block_release(v143);
      swift_release(v132);

      v145 = swift_release(v138);
      v146 = Logger.logObject.getter(v145);
      v147 = static os_log_type_t.debug.getter(v146);
      if (os_log_type_enabled(v146, v147))
      {
        v149 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v149 = 0;
        _os_log_impl((void *)&_mh_execute_header, v146, v147, "Spake session for custodian device complete! Terminating session", v149, 2u);
        swift_slowDealloc(v149, -1, -1);
      }

      v150 = objc_msgSend(objc_allocWithZone((Class)AACustodianRecoveryRequestContext), "init");
      v151 = *(_QWORD *)(v133 + 8);
      v152 = v172;
      v153 = (uint64_t)v177;
      v154 = v181;
      v155 = v180;
      if (v151)
      {
        swift_bridgeObjectRetain(*(_QWORD *)(v133 + 8));
        v156 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v151);
      }
      else
      {
        v156 = 0;
      }
      objc_msgSend(v150, "setRecoverySessionID:", v156);

      v157 = v176;
      sub_100027FE8(v133, v176, type metadata accessor for CustodianRecoveryData);
      sub_100024A20(v157 + *(int *)(v127 + 28), v153, (uint64_t *)&unk_1002904F0);
      sub_100028388(v157, type metadata accessor for CustodianRecoveryData);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v155 + 48))(v153, 1, v154) == 1)
      {
        isa = 0;
      }
      else
      {
        isa = UUID._bridgeToObjectiveC()().super.isa;
        (*(void (**)(uint64_t, uint64_t))(v155 + 8))(v153, v154);
      }
      v159 = v167;
      objc_msgSend(v150, "setCustodianUUID:", isa);

      v160 = v133 + *(int *)(v127 + 64);
      v161 = *(_QWORD *)(v160 + 8);
      if (v161)
      {
        swift_bridgeObjectRetain(*(_QWORD *)(v160 + 8));
        v162 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v161);
      }
      else
      {
        v162 = 0;
      }
      v163 = v168;
      objc_msgSend(v150, "setRecordBuildVersion:", v162);

      swift_unownedRetainStrong(v144);
      v164 = *(_QWORD *)(v144 + 184);
      swift_unknownObjectRetain(v164);
      swift_release(v144);
      v165 = v185 + OBJC_IVAR____TtC13appleaccountd24CustodianRecoverySession_sessionID;
      v166 = v150;
      sub_10000D134(v165, (uint64_t)v150, 0);
      sub_1000144D8(v159, v163);
      swift_unknownObjectRelease(v164);

      sub_10000F494((uint64_t)v179, (unint64_t)v170);
      sub_100028388((uint64_t)v184, type metadata accessor for CustodianRecoveryKeys);
      v96 = (uint64_t)v152;
    }
    return sub_100028388(v96, type metadata accessor for CustodianRecoveryInfoRecord);
  }
}

void sub_100141970(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  unint64_t v35;
  Swift::String v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  __n128 v41;
  os_log_type_t v42;
  _BOOL4 v43;
  uint8_t *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t (*v49)(uint64_t *, uint64_t, uint64_t);
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  void (*v53)(uint64_t *, _QWORD);
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  __n128 v62;
  uint64_t (*v63)(uint64_t *, _QWORD);
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  NSObject *v68;
  os_log_type_t v69;
  uint8_t *v70;
  void *v71;
  void *v72;
  uint64_t v73;
  void **v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  uint64_t v81;
  void *v82;
  uint64_t v83;
  _QWORD v84[2];
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t ObjectType;
  uint64_t v94;
  uint64_t v95;
  uint64_t aBlock[5];
  uint64_t v97;
  uint64_t v98;
  _BYTE v99[32];

  v3 = v2;
  v95 = a2;
  v5 = sub_1000080B4(&qword_100293A80);
  __chkstk_darwin(v5, v6);
  v8 = (char *)v84 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v94 = type metadata accessor for CustodianRecoveryData(0);
  __chkstk_darwin(v94, v9);
  v11 = (char *)v84 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  ObjectType = swift_getObjectType(a1);
  v12 = a1 + OBJC_IVAR____TtC13appleaccountd24CustodianRecoverySession_recoveryData;
  swift_beginAccess(a1 + OBJC_IVAR____TtC13appleaccountd24CustodianRecoverySession_recoveryData, v99, 0, 0);
  sub_100027FE8(v12, (uint64_t)v11, type metadata accessor for CustodianRecoveryData);
  v13 = sub_1001498F8((uint64_t)v11);
  v15 = v14;
  v17 = v16;
  v19 = v18;
  sub_100028388((uint64_t)v11, type metadata accessor for CustodianRecoveryData);
  if (!v15)
    goto LABEL_4;
  v91 = v13;
  v92 = v15;
  v20 = type metadata accessor for CustodianRecoveryKeys(0);
  v21 = swift_allocBox(v20);
  v23 = v22;
  sub_100147130(v17, v19, a1, (uint64_t)v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 48))(v8, 1, v20) == 1)
  {
    sub_100149DB4(v91, v92, v17, v19);
    sub_100004934((uint64_t)v8, &qword_100293A80);
    swift_deallocBox(v21);
LABEL_4:
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v24 = type metadata accessor for Logger(0);
    v25 = sub_100005288(v24, (uint64_t)qword_1002A89D8);
    v26 = Logger.logObject.getter(v25);
    v27 = static os_log_type_t.error.getter(v26);
    if (os_log_type_enabled(v26, v27))
    {
      v28 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v28 = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "Parsing AAData failed or no keys were found for SPAKE Complete step...", v28, 2u);
      swift_slowDealloc(v28, -1, -1);
    }

    type metadata accessor for AACustodianRecoveryError(0);
    v30 = v29;
    v98 = -9004;
    v31 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
    v32 = sub_100005150(&qword_10028B590, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianRecoveryError, (uint64_t)&unk_100217FF4);
    _BridgedStoredNSError.init(_:userInfo:)(aBlock, &v98, v31, v30, v32);
    v33 = (void *)aBlock[0];
    sub_1001466E8(a1, v95, aBlock[0], 5);

    return;
  }
  v87 = v21;
  v88 = v17;
  v89 = v19;
  v90 = v3;
  sub_10003B730((uint64_t)v8, (uint64_t)v23, type metadata accessor for CustodianRecoveryKeys);
  v34 = *v23;
  v35 = v23[1];
  sub_10000F450(*v23, v35);
  v36 = Data.base64EncodedString(options:)(0);
  sub_10000F494(v34, v35);
  if (qword_10028ADC8 != -1)
    swift_once(&qword_10028ADC8, sub_100046D2C);
  v37 = type metadata accessor for Logger(0);
  v38 = sub_100005288(v37, (uint64_t)qword_1002A89D8);
  swift_bridgeObjectRetain(v36._object);
  v84[1] = v38;
  v40 = Logger.logObject.getter(v39);
  v42 = static os_log_type_t.default.getter(v41);
  v43 = os_log_type_enabled(v40, v42);
  v85 = v20;
  v86 = v12;
  if (v43)
  {
    v44 = (uint8_t *)swift_slowAlloc(12, -1);
    v45 = swift_slowAlloc(32, -1);
    aBlock[0] = v45;
    *(_DWORD *)v44 = 136315138;
    v84[0] = v44 + 4;
    swift_bridgeObjectRetain(v36._object);
    v98 = sub_1001DEF4C(v36._countAndFlagsBits, (unint64_t)v36._object, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v98, v99);
    swift_bridgeObjectRelease_n(v36._object, 3);
    _os_log_impl((void *)&_mh_execute_header, v40, v42, "Spake Complete received with PRKC: %s", v44, 0xCu);
    swift_arrayDestroy(v45, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v45, -1, -1);
    swift_slowDealloc(v44, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v36._object, 2);
  }
  v46 = *v23;
  v47 = v23[1];
  v48 = v95;
  v49 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v95 + 48);
  sub_10000F450(*v23, v47);
  v50 = a1;
  v51 = v23;
  v52 = ObjectType;
  v53 = (void (*)(uint64_t *, _QWORD))v49(aBlock, ObjectType, v48);
  v54 = v94;
  v56 = (uint64_t *)(v55 + *(int *)(v94 + 40));
  v57 = *v56;
  v58 = v56[1];
  *v56 = v46;
  v56[1] = v47;
  sub_1000144D8(v57, v58);
  v53(aBlock, 0);
  v59 = (uint64_t *)((char *)v51 + *(int *)(v85 + 32));
  v61 = *v59;
  v60 = v59[1];
  v62 = swift_bridgeObjectRetain(v60);
  v85 = v50;
  v63 = (uint64_t (*)(uint64_t *, _QWORD))((uint64_t (*)(uint64_t *, uint64_t, uint64_t, __n128))v49)(aBlock, v52, v48, v62);
  v65 = (_QWORD *)(v64 + *(int *)(v54 + 64));
  v66 = v65[1];
  *v65 = v61;
  v65[1] = v60;
  swift_bridgeObjectRelease(v66);
  v67 = v63(aBlock, 0);
  v68 = Logger.logObject.getter(v67);
  v69 = static os_log_type_t.debug.getter(v68);
  if (os_log_type_enabled(v68, v69))
  {
    v70 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v70 = 0;
    _os_log_impl((void *)&_mh_execute_header, v68, v69, "Calling IdMS to verify transaction", v70, 2u);
    swift_slowDealloc(v70, -1, -1);
  }

  sub_100027FE8(v86, (uint64_t)v11, type metadata accessor for CustodianRecoveryData);
  sub_10014873C((uint64_t)v11, 4);
  v72 = v71;
  sub_100028388((uint64_t)v11, type metadata accessor for CustodianRecoveryData);
  v73 = v90;
  v74 = (void **)sub_10000732C((_QWORD *)(v90 + 24), *(_QWORD *)(v90 + 48));
  v75 = swift_allocObject(&unk_100269DC0, 24, 7);
  swift_weakInit(v75 + 16, v73);
  v76 = (_QWORD *)swift_allocObject(&unk_100269E38, 48, 7);
  v77 = v87;
  v76[2] = v87;
  v76[3] = v75;
  v78 = v85;
  v79 = v95;
  v76[4] = v85;
  v76[5] = v79;
  v80 = *v74;
  v81 = swift_allocObject(&unk_100269E60, 32, 7);
  *(_QWORD *)(v81 + 16) = sub_10014BC94;
  *(_QWORD *)(v81 + 24) = v76;
  aBlock[4] = (uint64_t)sub_10014BCA4;
  v97 = v81;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_10013DBE8;
  aBlock[3] = (uint64_t)&unk_100269E78;
  v82 = _Block_copy(aBlock);
  v83 = v97;
  swift_retain(v77);
  swift_retain(v75);
  swift_unknownObjectRetain(v78);
  swift_retain(v76);
  swift_release(v83);
  objc_msgSend(v80, "fetchCustodianRecoveryTokenWithContext:completion:", v72, v82);
  _Block_release(v82);
  swift_release(v77);

  swift_release(v75);
  swift_release(v76);
  sub_100149DB4(v91, v92, v88, v89);
}

uint64_t sub_100142094(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  __n128 v25;
  os_log_type_t v26;
  uint64_t v27;
  uint8_t *v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t result;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t inited;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  unint64_t v49;
  id v50;
  NSString v51;
  Class isa;
  id v53;
  uint64_t Strong;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  id v58;
  uint64_t v59;
  uint64_t *v60;
  _BYTE v61[24];
  _BYTE v62[24];
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _BYTE v67[8];
  _BYTE v68[88];

  v14 = type metadata accessor for CustodianRecoveryKeys(0);
  __chkstk_darwin(v14, v15);
  v17 = (char *)&v59 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = swift_projectBox(a4);
  v19 = a5 + 16;
  if ((a3 & 1) != 0)
  {
    swift_errorRetain(a1);
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v33 = type metadata accessor for Logger(0);
    sub_100005288(v33, (uint64_t)qword_1002A89D8);
    v34 = swift_errorRetain(a1);
    v35 = Logger.logObject.getter(v34);
    v36 = static os_log_type_t.error.getter(v35);
    if (os_log_type_enabled(v35, v36))
    {
      v37 = (uint8_t *)swift_slowAlloc(12, -1);
      v60 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v37 = 138412290;
      v38 = _convertErrorToNSError(_:)(a1);
      v63 = v38;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, &v64);
      v39 = v60;
      *v60 = v38;
      sub_100041178(a1, a2, 1);
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "Failed obtaining CRT with error: %@", v37, 0xCu);
      v40 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v39, 1, v40);
      swift_slowDealloc(v39, -1, -1);
      swift_slowDealloc(v37, -1, -1);
    }
    else
    {
      sub_100041178(a1, a2, 1);
    }

    static String._unconditionallyBridgeFromObjectiveC(_:)(AACustodianRecoveryErrorDomain);
    v42 = v41;
    v43 = sub_1000080B4(&qword_10028BB68);
    inited = swift_initStackObject(v43, v68);
    *(_OWORD *)(inited + 16) = xmmword_100218E30;
    *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSUnderlyingErrorKey);
    *(_QWORD *)(inited + 40) = v45;
    swift_getErrorValue(a1, v67, &v65);
    v46 = v65;
    v47 = v66;
    *(_QWORD *)(inited + 72) = v66;
    v48 = sub_1000B9D04((_QWORD *)(inited + 48));
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 16))(v48, v46, v47);
    v49 = sub_100015894(inited);
    v50 = objc_allocWithZone((Class)NSError);
    v51 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v42);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v49);
    v53 = objc_msgSend(v50, "initWithDomain:code:userInfo:", v51, -9004, isa);

    swift_beginAccess(v19, &v63, 0, 0);
    Strong = swift_weakLoadStrong(v19);
    if (Strong)
    {
      v55 = Strong;
      v56 = *(_QWORD *)(Strong + 184);
      swift_unknownObjectRetain(v56);
      swift_release(v55);
      v57 = a6 + OBJC_IVAR____TtC13appleaccountd24CustodianRecoverySession_sessionID;
      v58 = v53;
      sub_10000D134(v57, (uint64_t)v53, 1);
      swift_unknownObjectRelease(v56);

    }
    else
    {

    }
    return sub_100041178(a1, a2, 1);
  }
  else
  {
    v20 = v18;
    v21 = qword_10028ADC8;
    swift_bridgeObjectRetain(a2);
    if (v21 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v22 = type metadata accessor for Logger(0);
    v23 = sub_100005288(v22, (uint64_t)qword_1002A89D8);
    v24 = Logger.logObject.getter(v23);
    v26 = static os_log_type_t.default.getter(v25);
    if (os_log_type_enabled(v24, v26))
    {
      v27 = a6;
      v28 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v28 = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, v26, "Successfully obtained CRT from IdMS, SPAKE flow verified", v28, 2u);
      v29 = v28;
      a6 = v27;
      swift_slowDealloc(v29, -1, -1);
    }

    swift_beginAccess(v20, &v63, 1, 0);
    v30 = *(_QWORD *)(v20 + 40);
    *(_QWORD *)(v20 + 32) = a1;
    *(_QWORD *)(v20 + 40) = a2;
    swift_bridgeObjectRelease(v30);
    swift_beginAccess(v19, v62, 0, 0);
    result = swift_weakLoadStrong(v19);
    if (result)
    {
      v32 = result;
      swift_beginAccess(v20, v61, 0, 0);
      sub_100027FE8(v20, (uint64_t)v17, type metadata accessor for CustodianRecoveryKeys);
      sub_1001425B0(a6, a7, (uint64_t)v17);
      swift_release(v32);
      return sub_100028388((uint64_t)v17, type metadata accessor for CustodianRecoveryKeys);
    }
  }
  return result;
}

void sub_1001425B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  void *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  _BYTE v51[24];

  v4 = v3;
  v47 = a2;
  v7 = type metadata accessor for CustodianRecoveryData(0);
  __chkstk_darwin(v7, v8);
  v10 = (uint64_t *)((char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = type metadata accessor for CustodianRecoveryKeys(0);
  v45 = *(_QWORD *)(v11 - 8);
  v12 = *(_QWORD *)(v45 + 64);
  __chkstk_darwin(v11, v13);
  v14 = (char *)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_1000080B4((uint64_t *)&unk_100293AA0);
  __chkstk_darwin(v15, v16);
  v18 = (char *)&v44 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for CustodianRecoverySessionRecord(0);
  v20 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19, v21);
  v23 = (char *)&v44 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = a3;
  sub_100027FE8(a3, (uint64_t)v14, type metadata accessor for CustodianRecoveryKeys);
  v48 = a1;
  v24 = a1 + OBJC_IVAR____TtC13appleaccountd24CustodianRecoverySession_recoveryData;
  swift_beginAccess(v24, v51, 0, 0);
  sub_100027FE8(v24, (uint64_t)v10, type metadata accessor for CustodianRecoveryData);
  sub_10012CDEC((uint64_t)v14, v10, (uint64_t)v18);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19) == 1)
  {
    v25 = v48;
    sub_100004934((uint64_t)v18, (uint64_t *)&unk_100293AA0);
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v26 = type metadata accessor for Logger(0);
    v27 = sub_100005288(v26, (uint64_t)qword_1002A89D8);
    v28 = Logger.logObject.getter(v27);
    v29 = static os_log_type_t.error.getter(v28);
    if (os_log_type_enabled(v28, v29))
    {
      v30 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v30 = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "Failed to generate recovery session record", v30, 2u);
      swift_slowDealloc(v30, -1, -1);
    }

    v31 = v25 + OBJC_IVAR____TtC13appleaccountd24CustodianRecoverySession_sessionID;
    type metadata accessor for AACustodianError(0);
    v33 = v32;
    v49 = -7011;
    v34 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
    v35 = sub_100005150((unint64_t *)&qword_10028B640, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianError, (uint64_t)&unk_100218378);
    _BridgedStoredNSError.init(_:userInfo:)(&v50, &v49, v34, v33, v35);
    v36 = v50;
    sub_10000D134(v31, (uint64_t)v50, 1);

  }
  else
  {
    sub_10003B730((uint64_t)v18, (uint64_t)v23, type metadata accessor for CustodianRecoverySessionRecord);
    v37 = sub_10000732C((_QWORD *)(v4 + 104), *(_QWORD *)(v4 + 128));
    v38 = swift_allocObject(&unk_100269DC0, 24, 7);
    swift_weakInit(v38 + 16, v4);
    sub_100027FE8(v46, (uint64_t)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for CustodianRecoveryKeys);
    v39 = *(unsigned __int8 *)(v45 + 80);
    v40 = (v39 + 40) & ~v39;
    v41 = (_QWORD *)swift_allocObject(&unk_100269E10, v40 + v12, v39 | 7);
    v42 = v47;
    v43 = v48;
    v41[2] = v38;
    v41[3] = v43;
    v41[4] = v42;
    sub_10003B730((uint64_t)v14, (uint64_t)v41 + v40, type metadata accessor for CustodianRecoveryKeys);
    sub_10000732C((_QWORD *)(*v37 + 16), *(_QWORD *)(*v37 + 40));
    swift_unknownObjectRetain(v43);
    sub_10004E8A4((uint64_t)v23, 0, 2, (uint64_t)sub_10014BC1C, (uint64_t)v41);
    swift_release(v41);
    sub_100028388((uint64_t)v23, type metadata accessor for CustodianRecoverySessionRecord);
  }
}

uint64_t sub_1001429A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  __n128 v33;
  os_log_type_t v34;
  uint8_t *v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  NSString v39;
  uint64_t Strong;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;
  uint64_t v46;
  Class isa;
  NSString v48;
  NSString v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  _BYTE v57[24];
  uint64_t v58;
  uint64_t v59;

  v56 = a3;
  v8 = sub_1000080B4((uint64_t *)&unk_1002904F0);
  __chkstk_darwin(v8, v9);
  v11 = (char *)&v55 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for CustodianRecoveryData(0);
  __chkstk_darwin(v12, v13);
  v15 = (char *)&v55 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_1000080B4(&qword_10028E7F0);
  __chkstk_darwin(v16, v17);
  v19 = (uint64_t *)((char *)&v55 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  v20 = a2 + 16;
  sub_100024A20(a1, (uint64_t)v19, &qword_10028E7F0);
  if (swift_getEnumCaseMultiPayload(v19, v16) == 1)
  {
    v21 = *v19;
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v22 = type metadata accessor for Logger(0);
    sub_100005288(v22, (uint64_t)qword_1002A89D8);
    v23 = swift_errorRetain(v21);
    v24 = Logger.logObject.getter(v23);
    v25 = static os_log_type_t.error.getter(v24);
    if (os_log_type_enabled(v24, v25))
    {
      v26 = (uint8_t *)swift_slowAlloc(12, -1);
      v27 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v26 = 138412290;
      v28 = _convertErrorToNSError(_:)(v21);
      v58 = v28;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, &v59);
      *v27 = v28;
      swift_errorRelease(v21);
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Failed to store generated recovery session record with error: %@", v26, 0xCu);
      v29 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v27, 1, v29);
      swift_slowDealloc(v27, -1, -1);
      swift_slowDealloc(v26, -1, -1);
    }
    else
    {
      swift_errorRelease(v21);
    }

    swift_beginAccess(v20, &v58, 0, 0);
    Strong = swift_weakLoadStrong(v20);
    if (Strong)
    {
      v41 = Strong;
      v42 = *(_QWORD *)(Strong + 184);
      swift_unknownObjectRetain(v42);
      swift_release(v41);
      v43 = v56 + OBJC_IVAR____TtC13appleaccountd24CustodianRecoverySession_sessionID;
      swift_errorRetain(v21);
      sub_10000D134(v43, v21, 1);
      swift_errorRelease(v21);
      swift_unknownObjectRelease(v42);
    }
    return swift_errorRelease(v21);
  }
  else
  {
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v30 = type metadata accessor for Logger(0);
    v31 = sub_100005288(v30, (uint64_t)qword_1002A89D8);
    v32 = Logger.logObject.getter(v31);
    v34 = static os_log_type_t.default.getter(v33);
    if (os_log_type_enabled(v32, v34))
    {
      v35 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v35 = 0;
      _os_log_impl((void *)&_mh_execute_header, v32, v34, "Session stored successfully, terminating session", v35, 2u);
      swift_slowDealloc(v35, -1, -1);
    }

    v36 = objc_msgSend(objc_allocWithZone((Class)AACustodianRecoveryRequestContext), "init");
    v37 = v56 + OBJC_IVAR____TtC13appleaccountd24CustodianRecoverySession_recoveryData;
    swift_beginAccess(v56 + OBJC_IVAR____TtC13appleaccountd24CustodianRecoverySession_recoveryData, &v58, 0, 0);
    v38 = *(_QWORD *)(v37 + 8);
    if (v38)
    {
      swift_bridgeObjectRetain(*(_QWORD *)(v37 + 8));
      v39 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v38);
    }
    else
    {
      v39 = 0;
    }
    objc_msgSend(v36, "setRecoverySessionID:", v39);

    sub_100027FE8(v37, (uint64_t)v15, type metadata accessor for CustodianRecoveryData);
    sub_100024A20((uint64_t)&v15[*(int *)(v12 + 28)], (uint64_t)v11, (uint64_t *)&unk_1002904F0);
    sub_100028388((uint64_t)v15, type metadata accessor for CustodianRecoveryData);
    v45 = type metadata accessor for UUID(0);
    v46 = *(_QWORD *)(v45 - 8);
    isa = 0;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v46 + 48))(v11, 1, v45) != 1)
    {
      isa = UUID._bridgeToObjectiveC()().super.isa;
      (*(void (**)(char *, uint64_t))(v46 + 8))(v11, v45);
    }
    objc_msgSend(v36, "setCustodianUUID:", isa);

    if (*(_QWORD *)(a5 + 40))
      v48 = String._bridgeToObjectiveC()();
    else
      v48 = 0;
    objc_msgSend(v36, "setCustodianRecoveryToken:", v48);

    if (*(_QWORD *)(a5 + *(int *)(type metadata accessor for CustodianRecoveryKeys(0) + 32) + 8))
      v49 = String._bridgeToObjectiveC()();
    else
      v49 = 0;
    objc_msgSend(v36, "setRecordBuildVersion:", v49);

    swift_beginAccess(v20, v57, 0, 0);
    v50 = swift_weakLoadStrong(v20);
    if (v50)
    {
      v51 = v50;
      v52 = *(_QWORD *)(v50 + 184);
      swift_unknownObjectRetain(v52);
      swift_release(v51);
      v53 = v56 + OBJC_IVAR____TtC13appleaccountd24CustodianRecoverySession_sessionID;
      v54 = v36;
      sub_10000D134(v53, (uint64_t)v36, 0);
      swift_unknownObjectRelease(v52);

    }
    return sub_100004934((uint64_t)v19, &qword_10028E7F0);
  }
}

void sub_100142F6C(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  NSObject *v37;
  os_log_type_t v38;
  uint64_t v39;
  uint8_t *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint8_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  NSObject *v51;
  void *v52;
  unsigned __int8 v53;
  uint64_t v54;
  NSObject *v55;
  os_log_type_t v56;
  uint8_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  NSObject *v64;
  os_log_type_t v65;
  uint8_t *v66;
  uint64_t v67;
  unint64_t v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  NSObject *v80;
  NSObject *v81;
  __n128 v82;
  os_log_type_t v83;
  uint8_t *v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  NSObject *v89;
  uint64_t v90;
  _QWORD *v91;
  NSObject *v92;
  uint64_t v93;
  NSObject *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  NSObject *v103;
  NSObject *v104;
  NSObject *v105;
  os_log_type_t v106;
  uint8_t *v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  _QWORD *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char *v116;
  unint64_t v117;
  uint64_t v118;
  NSObject *v119;
  uint64_t v120;
  void *v121;
  _BYTE v122[16];
  void *v123;

  v2 = v1;
  v4 = sub_1000080B4((uint64_t *)&unk_1002904F0);
  v6 = __chkstk_darwin(v4, v5);
  v8 = (char *)&v108 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6, v9);
  v11 = (char *)&v108 - v10;
  v12 = type metadata accessor for CustodianRecoveryData(0);
  __chkstk_darwin(v12, v13);
  v15 = (char *)&v108 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for UUID(0);
  v17 = *(_QWORD *)(v16 - 8);
  v19 = __chkstk_darwin(v16, v18);
  v21 = __chkstk_darwin(v19, v20);
  v119 = ((char *)&v108 - v23);
  v24 = a1 + *(int *)(v12 + 52);
  if ((*(_BYTE *)(v24 + 8) & 1) != 0)
  {
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v25 = type metadata accessor for Logger(0);
    v26 = sub_100005288(v25, (uint64_t)qword_1002A89D8);
    v119 = Logger.logObject.getter(v26);
    v27 = static os_log_type_t.error.getter(v119);
    if (os_log_type_enabled(v119, v27))
    {
      v28 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v28 = 0;
      _os_log_impl((void *)&_mh_execute_header, v119, v27, "reveived spake error without valid error code", v28, 2u);
      swift_slowDealloc(v28, -1, -1);
    }

  }
  else
  {
    v115 = v12;
    v116 = v15;
    v112 = v22;
    v117 = (unint64_t)v11;
    v118 = v21;
    v29 = *(_QWORD *)v24;
    type metadata accessor for AACustodianRecoveryError(0);
    v31 = v30;
    v123 = (void *)v29;
    v32 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
    v113 = sub_100005150(&qword_10028B590, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianRecoveryError, (uint64_t)&unk_100217FF4);
    v114 = v31;
    _BridgedStoredNSError.init(_:userInfo:)(&v121, &v123, v32, v31, v113);
    v33 = v121;
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v34 = type metadata accessor for Logger(0);
    v35 = sub_100005288(v34, (uint64_t)qword_1002A89D8);
    v36 = v33;
    v37 = Logger.logObject.getter(v36);
    v38 = static os_log_type_t.debug.getter(v37);
    if (os_log_type_enabled(v37, v38))
    {
      v110 = v17;
      v39 = swift_slowAlloc(12, -1);
      v111 = v2;
      v40 = (uint8_t *)v39;
      v41 = swift_slowAlloc(8, -1);
      v109 = v8;
      v42 = (_QWORD *)v41;
      *(_DWORD *)v40 = 138412290;
      v43 = _convertErrorToNSError(_:)(v36);
      v121 = (void *)v43;
      v17 = v110;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v121, v122);
      *v42 = v43;

      _os_log_impl((void *)&_mh_execute_header, v37, v38, "Got spake error, with error: %@", v40, 0xCu);
      v44 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v42, 1, v44);
      v45 = v42;
      v8 = v109;
      swift_slowDealloc(v45, -1, -1);
      v46 = v40;
      v2 = v111;
      swift_slowDealloc(v46, -1, -1);
    }
    else
    {

      v37 = v36;
    }

    v47 = sub_1001476C0(a1);
    if (v47)
    {
      v49 = v47;
      v50 = v48;
      v51 = v36;
      v52 = (void *)_convertErrorToNSError(_:)(v51);

      v53 = objc_msgSend(v52, "aa_isAACustodianRecoveryErrorWithCode:", -9002);
      if ((v53 & 1) != 0)
      {
        v55 = Logger.logObject.getter(v54);
        v56 = static os_log_type_t.debug.getter(v55);
        if (os_log_type_enabled(v55, v56))
        {
          v57 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v57 = 0;
          _os_log_impl((void *)&_mh_execute_header, v55, v56, "Error can be retried, idetifying Custodian or owner device", v57, 2u);
          swift_slowDealloc(v57, -1, -1);
        }

        v58 = v49 + OBJC_IVAR____TtC13appleaccountd24CustodianRecoverySession_recoveryData;
        swift_beginAccess(v49 + OBJC_IVAR____TtC13appleaccountd24CustodianRecoverySession_recoveryData, &v121, 0, 0);
        v59 = v58;
        v60 = (uint64_t)v116;
        sub_100027FE8(v59, (uint64_t)v116, type metadata accessor for CustodianRecoveryData);
        v61 = v117;
        sub_100024A20(v60 + *(int *)(v115 + 28), v117, (uint64_t *)&unk_1002904F0);
        sub_100028388(v60, type metadata accessor for CustodianRecoveryData);
        v62 = v118;
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48))(v61, 1, v118) == 1)
        {
          v63 = sub_100004934(v61, (uint64_t *)&unk_1002904F0);
          v64 = Logger.logObject.getter(v63);
          v65 = static os_log_type_t.error.getter(v64);
          if (os_log_type_enabled(v64, v65))
          {
            v66 = (uint8_t *)swift_slowAlloc(2, -1);
            *(_WORD *)v66 = 0;
            _os_log_impl((void *)&_mh_execute_header, v64, v65, "Spake Error: Session does not contain custodianship UUID, nothing to do here ...", v66, 2u);
            swift_slowDealloc(v66, -1, -1);
          }

          v67 = v49 + OBJC_IVAR____TtC13appleaccountd24CustodianRecoverySession_sessionID;
          v120 = -9004;
          v68 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
          _BridgedStoredNSError.init(_:userInfo:)(&v123, &v120, v68, v114, v113);
          v69 = v123;
          sub_10000D134(v67, (uint64_t)v123, 1);

          swift_unknownObjectRelease(v49);
        }
        else
        {
          v88 = v50;
          v89 = v119;
          (*(void (**)(NSObject *, uint64_t, uint64_t))(v17 + 32))(v119, v61, v62);
          sub_10000732C(v2 + 8, v2[11]);
          v90 = swift_allocObject(&unk_100269DC0, 24, 7);
          swift_weakInit(v90 + 16, v2);
          v91 = (_QWORD *)swift_allocObject(&unk_100269DE8, 48, 7);
          v91[2] = v90;
          v91[3] = v49;
          v91[4] = v88;
          v91[5] = v51;
          v92 = v51;
          swift_retain(v90);
          swift_unknownObjectRetain(v49);
          sub_1001BE09C((uint64_t)v89, (uint64_t)sub_10014BB18, (uint64_t)v91);

          swift_unknownObjectRelease(v49);
          swift_release(v91);
          (*(void (**)(NSObject *, uint64_t))(v17 + 8))(v89, v62);
          swift_release(v90);
        }
      }
      else
      {
        v80 = v51;
        v81 = Logger.logObject.getter(v80);
        v83 = static os_log_type_t.default.getter(v82);
        if (os_log_type_enabled(v81, v83))
        {
          v84 = (uint8_t *)swift_slowAlloc(12, -1);
          v85 = (uint64_t *)swift_slowAlloc(8, -1);
          *(_DWORD *)v84 = 138412290;
          v86 = _convertErrorToNSError(_:)(v80);
          v121 = (void *)v86;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v121, v122);
          *v85 = v86;

          _os_log_impl((void *)&_mh_execute_header, v81, v83, "Asked to terminate recovery session with error: %@", v84, 0xCu);
          v87 = sub_1000080B4((uint64_t *)&unk_10028BC20);
          swift_arrayDestroy(v85, 1, v87);
          swift_slowDealloc(v85, -1, -1);
          swift_slowDealloc(v84, -1, -1);
        }
        else
        {

          v81 = v80;
        }

        v93 = v49 + OBJC_IVAR____TtC13appleaccountd24CustodianRecoverySession_sessionID;
        v94 = v80;
        sub_10000D134(v93, (uint64_t)v80, 1);
        swift_unknownObjectRelease(v49);

      }
    }
    else
    {
      v119 = v36;
      v70 = v17;
      v71 = sub_1001498F8(a1);
      if (v72)
      {
        v75 = v71;
        v76 = v72;
        v77 = v73;
        v78 = v74;
        UUID.init(uuidString:)(v71, v72);
        v79 = v118;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v70 + 48))(v8, 1, v118) == 1)
        {
          sub_100149DB4(v75, v76, v77, v78);
          v71 = sub_100004934((uint64_t)v8, (uint64_t *)&unk_1002904F0);
        }
        else
        {
          v116 = (char *)v35;
          v117 = v78;
          v95 = v112;
          (*(void (**)(uint64_t, char *, uint64_t))(v70 + 32))(v112, v8, v79);
          v96 = v2[23];
          os_unfair_lock_lock(*(os_unfair_lock_t *)(v96 + 32));
          v97 = swift_beginAccess(v96 + 16, &v121, 0, 0);
          v98 = *(_QWORD *)(v96 + 16);
          __chkstk_darwin(v97, v99);
          *(&v108 - 2) = v95;
          swift_bridgeObjectRetain(v98);
          sub_10013D83C(sub_10014BAA4, (uint64_t)(&v108 - 4), v98);
          v101 = v100;
          swift_bridgeObjectRelease(v98);
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v96 + 32));
          if (v101)
          {
            v102 = v101 + OBJC_IVAR____TtC13appleaccountd24CustodianRecoverySession_sessionID;
            v103 = v119;
            v104 = v119;
            sub_10000D134(v102, (uint64_t)v103, 1);
            swift_release(v101);

            sub_100149DB4(v75, v76, v77, v117);
            (*(void (**)(uint64_t, uint64_t))(v70 + 8))(v95, v118);
            return;
          }
          (*(void (**)(uint64_t, uint64_t))(v70 + 8))(v95, v118);
          v71 = sub_100149DB4(v75, v76, v77, v117);
        }
      }
      v105 = Logger.logObject.getter(v71);
      v106 = static os_log_type_t.error.getter(v105);
      if (os_log_type_enabled(v105, v106))
      {
        v107 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v107 = 0;
        _os_log_impl((void *)&_mh_execute_header, v105, v106, "No active sessions found with spakeID or UUID. nothing more to do here...", v107, 2u);
        swift_slowDealloc(v107, -1, -1);

      }
      else
      {

      }
    }
  }
}

uint64_t sub_1001439C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t result;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t Strong;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE v37[24];
  _BYTE v38[24];
  _BYTE v39[24];

  v9 = type metadata accessor for CustodianRecoveryData(0);
  __chkstk_darwin(v9, v10);
  v12 = &v37[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v13 = sub_1000080B4(&qword_10028F800);
  __chkstk_darwin(v13, v14);
  v16 = &v37[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v17 = type metadata accessor for CustodianRecoveryRecords(0);
  __chkstk_darwin(v17, v18);
  v20 = &v37[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v21 = a2 + 16;
  sub_100024A20(a1, (uint64_t)v16, &qword_10028F800);
  if (swift_getEnumCaseMultiPayload(v16, v13) == 1)
  {
    sub_100004934((uint64_t)v16, &qword_10028F800);
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v22 = type metadata accessor for Logger(0);
    v23 = sub_100005288(v22, (uint64_t)qword_1002A89D8);
    v24 = Logger.logObject.getter(v23);
    v25 = static os_log_type_t.debug.getter(v24);
    if (os_log_type_enabled(v24, v25))
    {
      v26 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Owner device, returning error to the UI to let the user retry", v26, 2u);
      swift_slowDealloc(v26, -1, -1);
    }

    swift_beginAccess(v21, v39, 0, 0);
    result = swift_weakLoadStrong(v21);
    if (result)
    {
      v28 = result;
      v29 = *(_QWORD *)(result + 184);
      swift_unknownObjectRetain(v29);
      swift_release(v28);
      sub_10000D134(a3 + OBJC_IVAR____TtC13appleaccountd24CustodianRecoverySession_sessionID, a5, 1);
      return swift_unknownObjectRelease(v29);
    }
  }
  else
  {
    sub_10003B730((uint64_t)v16, (uint64_t)v20, type metadata accessor for CustodianRecoveryRecords);
    v30 = a3 + OBJC_IVAR____TtC13appleaccountd24CustodianRecoverySession_recoveryData;
    swift_beginAccess(a3 + OBJC_IVAR____TtC13appleaccountd24CustodianRecoverySession_recoveryData, v39, 0, 0);
    sub_100027FE8(v30, (uint64_t)v12, type metadata accessor for CustodianRecoveryData);
    swift_beginAccess(v21, v38, 0, 0);
    Strong = swift_weakLoadStrong(v21);
    if (Strong)
    {
      v32 = Strong;
      v33 = *(_QWORD *)(Strong + 184);
      swift_unknownObjectRetain(v33);
      swift_release(v32);
      sub_10000D134(a3 + OBJC_IVAR____TtC13appleaccountd24CustodianRecoverySession_sessionID, a5, 1);
      swift_unknownObjectRelease(v33);
    }
    swift_beginAccess(v21, v37, 0, 0);
    v34 = swift_weakLoadStrong(v21);
    if (v34)
    {
      v35 = v34;
      sub_100143D04((uint64_t)v12, v20);
      swift_release(v35);
    }
    sub_100028388((uint64_t)v12, type metadata accessor for CustodianRecoveryData);
    return sub_100028388((uint64_t)v20, type metadata accessor for CustodianRecoveryRecords);
  }
  return result;
}

void sub_100143D04(uint64_t a1, char *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  os_log_type_t v20;
  uint8_t *v21;
  char *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  void **v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  _QWORD aBlock[5];
  uint64_t v35;
  char v36[32];

  v5 = type metadata accessor for CustodianRecoveryData(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1000080B4(&qword_100293A88);
  __chkstk_darwin(v10, v11);
  v13 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)(a1 + 40))
  {
    v14 = &a2[*(int *)(type metadata accessor for CustodianRecoveryRecords(0) + 20)];
    v15 = (uint64_t *)&v14[*(int *)(type metadata accessor for CustodianRecoveryInfoRecord(0) + 24)];
    v16 = *v15;
    v17 = v15[1];
    sub_100027FE8(a1, (uint64_t)v13, type metadata accessor for CustodianRecoveryData);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v6 + 56))(v13, 0, 1, v5);
    v22 = sub_100145484(a2, v16, v17, (uint64_t)v13);
    sub_100004934((uint64_t)v13, &qword_100293A88);
    v23 = (uint64_t)&v22[OBJC_IVAR____TtC13appleaccountd24CustodianRecoverySession_recoveryData];
    swift_beginAccess(&v22[OBJC_IVAR____TtC13appleaccountd24CustodianRecoverySession_recoveryData], v36, 0, 0);
    sub_100027FE8(v23, (uint64_t)v9, type metadata accessor for CustodianRecoveryData);
    sub_10014873C((uint64_t)v9, 0);
    v25 = v24;
    sub_100028388((uint64_t)v9, type metadata accessor for CustodianRecoveryData);
    v26 = (void **)sub_10000732C((_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 48));
    v27 = swift_allocObject(&unk_100269D48, 32, 7);
    *(_QWORD *)(v27 + 16) = sub_1001441B8;
    *(_QWORD *)(v27 + 24) = 0;
    v28 = *v26;
    v29 = swift_allocObject(&unk_100269D70, 32, 7);
    *(_QWORD *)(v29 + 16) = sub_10014C2A4;
    *(_QWORD *)(v29 + 24) = v27;
    aBlock[4] = sub_10014C29C;
    v35 = v29;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100045BC0;
    aBlock[3] = &unk_100269D88;
    v30 = _Block_copy(aBlock);
    v31 = v35;
    swift_retain(v27);
    swift_release(v31);
    objc_msgSend(v28, "startCustodianRecoveryTransactionWithContext:completion:", v25, v30);
    _Block_release(v30);
    swift_unknownObjectRelease(v22);

    swift_release(v27);
  }
  else
  {
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v18 = type metadata accessor for Logger(0);
    v19 = sub_100005288(v18, (uint64_t)qword_1002A89D8);
    v33 = Logger.logObject.getter(v19);
    v20 = static os_log_type_t.error.getter(v33);
    if (os_log_type_enabled(v33, v20))
    {
      v21 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v21 = 0;
      _os_log_impl((void *)&_mh_execute_header, v33, v20, "Asked to retry but old session had no code stored... nothing to do here", v21, 2u);
      swift_slowDealloc(v21, -1, -1);
    }

  }
}

void sub_1001441B8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *oslog;
  uint64_t v10;
  uint64_t v11;

  if (a1)
  {
    swift_errorRetain(a1);
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v2 = type metadata accessor for Logger(0);
    sub_100005288(v2, (uint64_t)qword_1002A89D8);
    v3 = swift_errorRetain(a1);
    oslog = Logger.logObject.getter(v3);
    v4 = static os_log_type_t.error.getter(oslog);
    if (os_log_type_enabled(oslog, v4))
    {
      v5 = (uint8_t *)swift_slowAlloc(12, -1);
      v6 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v5 = 138412290;
      v7 = _convertErrorToNSError(_:)(a1);
      v10 = v7;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v10, &v11);
      *v6 = v7;
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, oslog, v4, "Custodian transaction failed to be sent to IdMS with error: %@", v5, 0xCu);
      v8 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v6, 1, v8);
      swift_slowDealloc(v6, -1, -1);
      swift_slowDealloc(v5, -1, -1);

      swift_errorRelease(a1);
    }
    else
    {
      swift_errorRelease(a1);
      swift_errorRelease(a1);

    }
  }
}

uint64_t sub_100144370(uint64_t a1, uint64_t a2, void *a3, void (*a4)(uint64_t, _QWORD, uint64_t), uint64_t a5, uint64_t a6, void *a7)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  void ***v36;
  void **v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  __n128 v43;
  os_log_type_t v44;
  uint64_t v45;
  uint8_t *v46;
  void **v47;
  void **v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint8_t *v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  Class isa;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  id v62;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t ObjectType;
  unsigned __int8 v74;
  void (*v75)(void ***, _QWORD);
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  id v84;
  uint64_t v85;
  uint64_t v86;
  id v87;
  __n128 v88;
  void *v89;
  void *v90;
  void **v91;
  uint64_t v92;
  void *v93;
  uint64_t v94;
  void *v95;
  uint64_t v96;
  void *v97;
  NSObject *v98;
  os_log_type_t v99;
  uint8_t *v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  void **v105;
  id v106;
  char *v107;
  void **v108;
  Class v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  id v114;
  void **v115;
  _QWORD v116[3];
  char *v117;
  uint64_t v118;
  id v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  void (*v126)(uint64_t, _QWORD, uint64_t);
  uint64_t v127;
  id v128;
  uint64_t v129;
  _QWORD v130[3];
  char v131[8];
  void **aBlock;
  _QWORD v133[4];
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;

  v119 = a7;
  v126 = a4;
  v127 = a5;
  v128 = a3;
  v129 = a2;
  v122 = type metadata accessor for CustodianRecoveryData(0);
  v121 = *(_QWORD *)(v122 - 8);
  __chkstk_darwin(v122, v9);
  v118 = (uint64_t)v116 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1000080B4(&qword_100293A88);
  __chkstk_darwin(v11, v12);
  v14 = (char *)v116 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for UUID(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15, v17);
  v19 = (char *)v116 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v120 = type metadata accessor for CustodianRecoveryRecords(0);
  __chkstk_darwin(v120, v20);
  v22 = (char *)v116 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_1000080B4((uint64_t *)&unk_10028E7C0);
  v124 = *(_QWORD *)(v23 - 8);
  v125 = v23;
  __chkstk_darwin(v23, v24);
  v123 = (char *)v116 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = sub_1000080B4(&qword_10028F800);
  __chkstk_darwin(v26, v27);
  v29 = (_QWORD *)((char *)v116 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100024A20(a1, (uint64_t)v29, &qword_10028F800);
  if (swift_getEnumCaseMultiPayload(v29, v26) == 1)
  {
    v30 = *v29;
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v31 = type metadata accessor for Logger(0);
    sub_100005288(v31, (uint64_t)qword_1002A89D8);
    v32 = swift_errorRetain(v30);
    v33 = Logger.logObject.getter(v32);
    v34 = static os_log_type_t.error.getter(v33);
    if (os_log_type_enabled(v33, v34))
    {
      v35 = (uint8_t *)swift_slowAlloc(12, -1);
      v36 = (void ***)swift_slowAlloc(8, -1);
      *(_DWORD *)v35 = 138412290;
      v37 = (void **)_convertErrorToNSError(_:)(v30);
      aBlock = v37;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v133);
      *v36 = v37;
      swift_errorRelease(v30);
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "Failed to verify custodianship with error: %@", v35, 0xCu);
      v38 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v36, 1, v38);
      swift_slowDealloc(v36, -1, -1);
      swift_slowDealloc(v35, -1, -1);
    }
    else
    {
      swift_errorRelease(v30);
    }
    v54 = v129;

    swift_unownedRetainStrong(v54);
    swift_getErrorValue(v30, v131, v130);
    v55 = sub_10002FAA8(v130[1], v130[2]);
    if (v128)
    {
      v56 = v128;
      isa = Bool._bridgeToObjectiveC()().super.super.isa;
      objc_msgSend(v56, "setObject:forKeyedSubscript:", isa, kAAFDidSucceed);

      swift_errorRetain(v55);
      v58 = (void *)_convertErrorToNSError(_:)(v55);
      objc_msgSend(v56, "populateUnderlyingErrorsStartingWithRootError:", v58);

      swift_errorRelease(v55);
      v60 = v124;
      v59 = v125;
      v61 = v123;
      (*(void (**)(char *, uint64_t, uint64_t))(v124 + 16))(v123, v54 + OBJC_IVAR____TtC13appleaccountd27CustodianRecoveryController__analyticsRTCReporter, v125);
      Dependency.wrappedValue.getter(&aBlock, v59);
      (*(void (**)(char *, uint64_t))(v60 + 8))(v61, v59);
      v62 = objc_msgSend((id)objc_opt_self(AAAnalyticsRTCReporter), "reporter");
      objc_msgSend(v62, "sendEvent:", v56);

      sub_100006F58(&aBlock);
    }
    swift_errorRelease(v55);
    swift_release(v54);
    swift_errorRetain(v30);
    v126(v30, 0, 1);
    swift_errorRelease(v30);
    return swift_errorRelease(v30);
  }
  else
  {
    sub_10003B730((uint64_t)v29, (uint64_t)v22, type metadata accessor for CustodianRecoveryRecords);
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v39 = type metadata accessor for Logger(0);
    v40 = sub_100005288(v39, (uint64_t)qword_1002A89D8);
    v41 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 16))(v19, a6, v15);
    v42 = Logger.logObject.getter(v41);
    v44 = static os_log_type_t.default.getter(v43);
    if (os_log_type_enabled(v42, v44))
    {
      v45 = swift_slowAlloc(12, -1);
      v117 = v22;
      v46 = (uint8_t *)v45;
      v47 = (void **)swift_slowAlloc(32, -1);
      v116[2] = v40;
      v48 = v47;
      aBlock = v47;
      *(_DWORD *)v46 = 136315138;
      v116[1] = v46 + 4;
      v49 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v50 = dispatch thunk of CustomStringConvertible.description.getter(v15, v49);
      v52 = v51;
      v136 = sub_1001DEF4C(v50, v51, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v136, &v137);
      swift_bridgeObjectRelease(v52);
      (*(void (**)(char *, uint64_t))(v16 + 8))(v19, v15);
      _os_log_impl((void *)&_mh_execute_header, v42, v44, "Custodianship %s verified, Generating session with code", v46, 0xCu);
      swift_arrayDestroy(v48, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v48, -1, -1);
      v53 = v46;
      v22 = v117;
      swift_slowDealloc(v53, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v16 + 8))(v19, v15);
    }

    v64 = v122;
    v65 = v129;
    swift_unownedRetainStrong(v129);
    v66 = *(int *)(v120 + 20);
    v67 = (uint64_t *)&v22[v66 + *(int *)(type metadata accessor for CustodianRecoveryInfoRecord(0) + 24)];
    v69 = *v67;
    v68 = v67[1];
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v121 + 56))(v14, 1, 1, v64);
    swift_bridgeObjectRetain(v68);
    v70 = sub_100145484(v22, v69, v68, (uint64_t)v14);
    v72 = v71;
    sub_100004934((uint64_t)v14, &qword_100293A88);
    swift_release(v65);
    swift_bridgeObjectRelease(v68);
    ObjectType = swift_getObjectType(v70);
    v74 = objc_msgSend(v119, "CLIMode");
    v75 = (void (*)(void ***, _QWORD))(*(uint64_t (**)(void ***, uint64_t, uint64_t))(v72 + 48))(&aBlock, ObjectType, v72);
    *(_BYTE *)(v76 + *(int *)(v64 + 56)) = v74;
    v75(&aBlock, 0);
    v77 = &v70[OBJC_IVAR____TtC13appleaccountd24CustodianRecoverySession_recoveryData];
    v78 = swift_beginAccess(&v70[OBJC_IVAR____TtC13appleaccountd24CustodianRecoverySession_recoveryData], &v136, 0, 0);
    v79 = *((_QWORD *)v77 + 5);
    if (v79)
    {
      v80 = v22;
      v81 = *((_QWORD *)v77 + 4);
      swift_unownedRetainStrong(v65);
      v82 = (_QWORD *)swift_allocObject(&unk_10026A220, 64, 7);
      v83 = v127;
      v84 = v128;
      v82[2] = v65;
      v82[3] = v84;
      v82[4] = v126;
      v82[5] = v83;
      v82[6] = v81;
      v82[7] = v79;
      v85 = (uint64_t)v77;
      v86 = v118;
      sub_100027FE8(v85, v118, type metadata accessor for CustodianRecoveryData);
      v87 = v84;
      v88 = swift_bridgeObjectRetain(v79);
      swift_unownedRetain(v65, v88);
      swift_retain(v83);
      sub_10014873C(v86, 0);
      v90 = v89;
      sub_100028388(v86, type metadata accessor for CustodianRecoveryData);
      v91 = (void **)sub_10000732C((_QWORD *)(v65 + 24), *(_QWORD *)(v65 + 48));
      v92 = swift_allocObject(&unk_10026A248, 32, 7);
      *(_QWORD *)(v92 + 16) = sub_10014C1F4;
      *(_QWORD *)(v92 + 24) = v82;
      v93 = *v91;
      v94 = swift_allocObject(&unk_10026A270, 32, 7);
      *(_QWORD *)(v94 + 16) = sub_10014C2A4;
      *(_QWORD *)(v94 + 24) = v92;
      v133[3] = sub_10014C29C;
      v134 = v94;
      aBlock = _NSConcreteStackBlock;
      v133[0] = 1107296256;
      v133[1] = sub_100045BC0;
      v133[2] = &unk_10026A288;
      v95 = _Block_copy(&aBlock);
      v96 = v134;
      swift_retain(v82);
      swift_retain(v92);
      swift_release(v96);
      v97 = v93;
      v22 = v80;
      objc_msgSend(v97, "startCustodianRecoveryTransactionWithContext:completion:", v90, v95);
      _Block_release(v95);
      swift_unknownObjectRelease(v70);
      swift_release(v65);
      swift_release(v82);

      swift_release(v92);
    }
    else
    {
      v98 = Logger.logObject.getter(v78);
      v99 = static os_log_type_t.error.getter(v98);
      if (os_log_type_enabled(v98, v99))
      {
        v100 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v100 = 0;
        _os_log_impl((void *)&_mh_execute_header, v98, v99, "failed to generate code, nothing to do here", v100, 2u);
        swift_slowDealloc(v100, -1, -1);
      }

      type metadata accessor for AACustodianError(0);
      v102 = v101;
      v135 = -7030;
      v103 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
      v104 = sub_100005150((unint64_t *)&qword_10028B640, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianError, (uint64_t)&unk_100218378);
      _BridgedStoredNSError.init(_:userInfo:)(&aBlock, &v135, v103, v102, v104);
      v105 = aBlock;
      swift_unownedRetainStrong(v65);
      if (v128)
      {
        v106 = v128;
        v107 = v22;
        v108 = v105;
        v109 = Bool._bridgeToObjectiveC()().super.super.isa;
        objc_msgSend(v106, "setObject:forKeyedSubscript:", v109, kAAFDidSucceed);

        swift_errorRetain(v108);
        v110 = (void *)_convertErrorToNSError(_:)(v108);
        objc_msgSend(v106, "populateUnderlyingErrorsStartingWithRootError:", v110);

        v112 = v124;
        v111 = v125;
        v113 = v123;
        (*(void (**)(char *, uint64_t, uint64_t))(v124 + 16))(v123, v65 + OBJC_IVAR____TtC13appleaccountd27CustodianRecoveryController__analyticsRTCReporter, v125);
        Dependency.wrappedValue.getter(&aBlock, v111);
        (*(void (**)(char *, uint64_t))(v112 + 8))(v113, v111);
        v114 = objc_msgSend((id)objc_opt_self(AAAnalyticsRTCReporter), "reporter");
        objc_msgSend(v114, "sendEvent:", v106);

        sub_100006F58(&aBlock);
        swift_release(v65);

        v22 = v107;
      }
      else
      {
        swift_release(v65);
      }
      v115 = v105;
      v126((uint64_t)v105, 0, 1);
      swift_unknownObjectRelease(v70);

    }
    return sub_100028388((uint64_t)v22, type metadata accessor for CustodianRecoveryRecords);
  }
}

uint64_t sub_100145054(uint64_t a1, uint64_t a2, void *a3, void (*a4)(_QWORD, _QWORD, _QWORD), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  _BOOL4 v23;
  uint64_t v24;
  uint8_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint8_t *v30;
  id v31;
  Class v32;
  id v33;
  id v35;
  Class isa;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  void (*v42)(_QWORD, _QWORD, _QWORD);
  uint64_t v43;
  uint64_t v44;
  id v45;
  uint64_t v46;
  uint64_t v47;

  v14 = sub_1000080B4((uint64_t *)&unk_10028E7C0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14, v16);
  v18 = (char *)&v41 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    v45 = a3;
    swift_errorRetain(a1);
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v19 = type metadata accessor for Logger(0);
    sub_100005288(v19, (uint64_t)qword_1002A89D8);
    v20 = swift_errorRetain(a1);
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.error.getter(v21);
    v23 = os_log_type_enabled(v21, v22);
    v43 = v15;
    v44 = v14;
    if (v23)
    {
      v41 = a5;
      v24 = swift_slowAlloc(12, -1);
      v42 = a4;
      v25 = (uint8_t *)v24;
      v26 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v25 = 138412290;
      v27 = a2;
      v28 = _convertErrorToNSError(_:)(a1);
      v46 = v28;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, &v47);
      *v26 = v28;
      a2 = v27;
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Custodian transaction failed to be sent to IdMS with error: %@", v25, 0xCu);
      v29 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v26, 1, v29);
      swift_slowDealloc(v26, -1, -1);
      v30 = v25;
      a4 = v42;
      swift_slowDealloc(v30, -1, -1);
    }
    else
    {
      swift_errorRelease(a1);
    }

    swift_unownedRetainStrong(a2);
    if (v45)
    {
      v35 = v45;
      swift_errorRetain(a1);
      isa = Bool._bridgeToObjectiveC()().super.super.isa;
      objc_msgSend(v35, "setObject:forKeyedSubscript:", isa, kAAFDidSucceed);

      swift_errorRetain(a1);
      v37 = (void *)_convertErrorToNSError(_:)(a1);
      objc_msgSend(v35, "populateUnderlyingErrorsStartingWithRootError:", v37);

      swift_errorRelease(a1);
      v39 = v43;
      v38 = v44;
      (*(void (**)(char *, uint64_t, uint64_t))(v43 + 16))(v18, a2 + OBJC_IVAR____TtC13appleaccountd27CustodianRecoveryController__analyticsRTCReporter, v44);
      Dependency.wrappedValue.getter(&v46, v38);
      (*(void (**)(char *, uint64_t))(v39 + 8))(v18, v38);
      v40 = objc_msgSend((id)objc_opt_self(AAAnalyticsRTCReporter), "reporter");
      objc_msgSend(v40, "sendEvent:", v35);

      sub_100006F58(&v46);
      swift_errorRelease(a1);
    }
    swift_release(a2);
    swift_errorRetain(a1);
    a4(a1, 0, 1);
    swift_errorRelease(a1);
    return swift_errorRelease(a1);
  }
  else
  {
    swift_unownedRetainStrong(a2);
    if (a3)
    {
      v31 = a3;
      v32 = Bool._bridgeToObjectiveC()().super.super.isa;
      objc_msgSend(v31, "setObject:forKeyedSubscript:", v32, kAAFDidSucceed);

      (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v18, a2 + OBJC_IVAR____TtC13appleaccountd27CustodianRecoveryController__analyticsRTCReporter, v14);
      Dependency.wrappedValue.getter(&v46, v14);
      (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
      v33 = objc_msgSend((id)objc_opt_self(AAAnalyticsRTCReporter), "reporter");
      objc_msgSend(v33, "sendEvent:", v31);

      sub_100006F58(&v46);
    }
    swift_release(a2);
    return ((uint64_t (*)(uint64_t, uint64_t, _QWORD))a4)(a6, a7, 0);
  }
}

char *sub_100145484(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  uint64_t (*v25)(void);
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  char *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t inited;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  NSObject *v50;
  os_log_type_t v51;
  uint8_t *v52;
  uint8_t *v53;
  uint64_t v54;
  uint8_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  NSObject *v62;
  os_log_type_t v63;
  uint8_t *v64;
  char *v65;
  unint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  __int128 v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  Swift::String v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  NSObject *v102;
  os_log_type_t v103;
  _BOOL4 v104;
  uint8_t *v105;
  void *v106;
  void *v107;
  uint64_t v108;
  NSObject *v109;
  os_log_type_t v110;
  uint8_t *v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  void *v124;
  uint64_t v125;
  uint64_t v126;
  id v127;
  unint64_t v128;
  uint64_t v129;
  void *v130;
  uint64_t v131;
  uint64_t v132;
  _QWORD *v133;
  _QWORD *v134;
  uint64_t v135;
  _QWORD v136[2];
  unint64_t v137;
  _QWORD *v138;
  _QWORD *v139;
  uint64_t v140;
  uint64_t (*v141)(void);
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  char *object;
  uint64_t v147;
  uint64_t v148;
  uint64_t *v149;
  uint64_t v150;
  unint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t countAndFlagsBits;
  __int128 v155;
  uint64_t v156;
  uint64_t v157;
  _BYTE v158[16];
  void *v159[3];
  __int128 v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  __int128 v164;
  char v165[72];
  _QWORD *v166;

  countAndFlagsBits = a4;
  v142 = a2;
  v143 = a3;
  object = a1;
  v4 = sub_1000080B4(&qword_100293A88);
  __chkstk_darwin(v4, v5);
  v7 = (char *)v136 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v12 = (char *)v136 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (int *)type metadata accessor for CustodianRecoveryData(0);
  v14 = *((_QWORD *)v13 - 1);
  v16 = __chkstk_darwin(v13, v15);
  v152 = (uint64_t)v136 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v16, v18);
  v151 = (unint64_t)v136 - v20;
  v22 = __chkstk_darwin(v19, v21);
  v24 = (_OWORD *)((char *)v136 - v23);
  v24[1] = 0u;
  v24[2] = 0u;
  *v24 = 0u;
  v25 = *(uint64_t (**)(void))(v9 + 56);
  v140 = (uint64_t)v136 + *(int *)(v22 + 28) - v23;
  v141 = v25;
  v26 = v25();
  v27 = (_QWORD *)((char *)v24 + v13[8]);
  *v27 = 0;
  v27[1] = 0;
  v139 = v27;
  v28 = (_QWORD *)((char *)v24 + v13[9]);
  *v28 = 0;
  v28[1] = 0;
  v138 = v28;
  *(_OWORD *)((char *)v24 + v13[10]) = xmmword_10021A7E0;
  v149 = (uint64_t *)((char *)v24 + v13[11]);
  *(_OWORD *)v149 = xmmword_10021A7E0;
  *(_OWORD *)((char *)v24 + v13[12]) = xmmword_10021A7E0;
  v29 = (char *)v24 + v13[13];
  *(_QWORD *)v29 = 0;
  v29[8] = 1;
  *((_BYTE *)v24 + v13[14]) = 0;
  v147 = v13[15];
  *(_QWORD *)((char *)v24 + v147) = 1;
  v30 = v13[16];
  v166 = v24;
  v31 = (_QWORD *)((char *)v24 + v30);
  *v31 = 0;
  v31[1] = 0;
  v32 = UUID.init()(v26);
  v33 = UUID.uuidString.getter(v32);
  v35 = v34;
  v144 = v9;
  v145 = v8;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  v36 = sub_1000080B4((uint64_t *)&unk_100293A90);
  inited = swift_initStackObject(v36, v165);
  *(_OWORD *)(inited + 16) = xmmword_100218E30;
  strcpy((char *)(inited + 32), "spakeSessionId");
  *(_BYTE *)(inited + 47) = -18;
  *(_QWORD *)(inited + 48) = v33;
  *(_QWORD *)(inited + 56) = v35;
  swift_bridgeObjectRetain(v35);
  v38 = sub_10001565C(inited);
  swift_bridgeObjectRetain(v35);
  v148 = v33;
  *(_QWORD *)&v155 = v35;
  v156 = sub_1001AEE10(v33, v35);
  v40 = v39;
  sub_100024A20(countAndFlagsBits, (uint64_t)v7, &qword_100293A88);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v14 + 48))(v7, 1, v13) == 1)
  {
    sub_100004934((uint64_t)v7, &qword_100293A88);
    v41 = v153;
    v42 = sub_1001A6A4C();
    v44 = v41;
    if (v41)
    {
      v45 = v156;
LABEL_19:
      sub_10000F494(v45, v40);
      swift_bridgeObjectRelease(v155);
      v69 = v38;
LABEL_20:
      swift_bridgeObjectRelease(v69);
LABEL_21:
      sub_100028388((uint64_t)v166, type metadata accessor for CustodianRecoveryData);
      return v12;
    }
    v60 = v42;
    v58 = v43;
    v56 = v156;
  }
  else
  {
    countAndFlagsBits = v38;
    v46 = v151;
    sub_10003B730((uint64_t)v7, v151, type metadata accessor for CustodianRecoveryData);
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v47 = type metadata accessor for Logger(0);
    sub_100005288(v47, (uint64_t)qword_1002A89D8);
    v48 = v152;
    v49 = sub_100027FE8(v46, v152, type metadata accessor for CustodianRecoveryData);
    v50 = Logger.logObject.getter(v49);
    v51 = static os_log_type_t.debug.getter(v50);
    if (os_log_type_enabled(v50, v51))
    {
      v52 = (uint8_t *)swift_slowAlloc(12, -1);
      v137 = v40;
      v53 = v52;
      *(_DWORD *)v52 = 134217984;
      v136[1] = v52 + 4;
      v54 = *(_QWORD *)(v48 + v13[15]);
      sub_100028388(v48, type metadata accessor for CustodianRecoveryData);
      v162 = v54;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v162, &v163);
      _os_log_impl((void *)&_mh_execute_header, v50, v51, "Current code has been attempted %ld times...", v53, 0xCu);
      v55 = v53;
      v40 = v137;
      swift_slowDealloc(v55, -1, -1);
    }
    else
    {
      sub_100028388(v48, type metadata accessor for CustodianRecoveryData);
    }
    v56 = v156;

    v57 = *(_QWORD *)(v46 + v13[15]);
    if (v57 > 4)
    {
      swift_bridgeObjectRelease(v155);
      v61 = swift_bridgeObjectRelease(countAndFlagsBits);
      v62 = Logger.logObject.getter(v61);
      v63 = static os_log_type_t.error.getter(v62);
      if (os_log_type_enabled(v62, v63))
      {
        v64 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v64 = 0;
        _os_log_impl((void *)&_mh_execute_header, v62, v63, "Too many attempts made on the existing code, failing creating new session ...", v64, 2u);
        swift_slowDealloc(v64, -1, -1);
      }

      type metadata accessor for AACustodianRecoveryError(0);
      v12 = v65;
      v159[0] = (void *)-9006;
      v66 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
      v67 = sub_100005150(&qword_10028B590, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianRecoveryError, (uint64_t)&unk_100217FF4);
      v68 = _BridgedStoredNSError.init(_:userInfo:)(&v162, v159, v66, v12, v67);
      swift_willThrow(v68);
      sub_10000F494(v56, v40);
      sub_100028388(v46, type metadata accessor for CustodianRecoveryData);
      goto LABEL_21;
    }
    v58 = *(_QWORD *)(v46 + 40);
    if (v58)
    {
      v59 = v46;
      v60 = *(_QWORD *)(v46 + 32);
      swift_bridgeObjectRetain(v58);
      sub_100028388(v59, type metadata accessor for CustodianRecoveryData);
      *(_QWORD *)((char *)v166 + v147) = v57 + 1;
      v44 = v153;
    }
    else
    {
      v12 = (char *)v46;
      v94 = v153;
      v95 = sub_1001A6A4C();
      v44 = v94;
      if (v94)
      {
        sub_100028388(v46, type metadata accessor for CustodianRecoveryData);
        sub_10000F494(v56, v40);
        swift_bridgeObjectRelease(v155);
        v69 = countAndFlagsBits;
        goto LABEL_20;
      }
      v60 = v95;
      v58 = v96;
      sub_100028388((uint64_t)v12, type metadata accessor for CustodianRecoveryData);
    }
    v38 = countAndFlagsBits;
  }
  v12 = (char *)*sub_10000732C((_QWORD *)(v150 + 200), *(_QWORD *)(v150 + 224));
  sub_1001A6084(v56, v40, v58, &v162);
  if (v44)
  {
    swift_bridgeObjectRelease(v58);
    v45 = v56;
    goto LABEL_19;
  }
  v137 = v40;
  v71 = sub_1001CD934(v38);
  swift_bridgeObjectRelease(v38);
  v72 = sub_1000C3D78(v71);
  v74 = v73;
  v75 = v149;
  sub_1000144D8(*v149, v149[1]);
  *v75 = v72;
  v75[1] = v74;
  v76 = v138;
  v77 = v138[1];
  v78 = v143;
  swift_bridgeObjectRetain(v143);
  swift_bridgeObjectRelease(v77);
  *v76 = v142;
  v76[1] = v78;
  v79 = type metadata accessor for CustodianshipInfoRecord(0);
  v80 = object;
  v81 = &object[*(int *)(v79 + 24)];
  v83 = *(_QWORD *)v81;
  v82 = *((_QWORD *)v81 + 1);
  v84 = v139;
  v85 = v139[1];
  swift_bridgeObjectRetain(v82);
  swift_bridgeObjectRelease(v85);
  *v84 = v83;
  v84[1] = v82;
  v86 = v166;
  v87 = v140;
  sub_100004934(v140, (uint64_t *)&unk_1002904F0);
  v88 = &v80[*(int *)(v79 + 20)];
  v89 = v145;
  (*(void (**)(uint64_t, char *, uint64_t))(v144 + 16))(v87, v88, v145);
  ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v141)(v87, 0, 1, v89);
  swift_bridgeObjectRelease(v86[5]);
  v86[4] = v60;
  v86[5] = v58;
  v90 = v86[3];
  v91 = v155;
  swift_bridgeObjectRetain(v155);
  swift_bridgeObjectRelease(v90);
  v86[2] = v148;
  v86[3] = v91;
  v92 = v164;
  sub_10000732C(&v162, v164);
  v93 = (*(uint64_t (**)(_QWORD, _QWORD))(*((_QWORD *)&v92 + 1) + 8))(v92, *((_QWORD *)&v92 + 1));
  v151 = v97;
  v152 = v93;
  v98 = Data.base64EncodedString(options:)(0);
  countAndFlagsBits = v98._countAndFlagsBits;
  if (qword_10028ADC8 != -1)
    swift_once(&qword_10028ADC8, sub_100046D2C);
  v99 = type metadata accessor for Logger(0);
  v100 = sub_100005288(v99, (uint64_t)qword_1002A89D8);
  v101 = swift_bridgeObjectRetain_n(v98._object, 2);
  v147 = v100;
  v102 = Logger.logObject.getter(v101);
  v103 = static os_log_type_t.debug.getter(v102);
  v104 = os_log_type_enabled(v102, v103);
  v153 = 0;
  object = (char *)v98._object;
  if (v104)
  {
    v105 = (uint8_t *)swift_slowAlloc(12, -1);
    v106 = (void *)swift_slowAlloc(32, -1);
    v159[0] = v106;
    *(_DWORD *)v105 = 136315138;
    swift_bridgeObjectRetain(v98._object);
    v157 = sub_1001DEF4C(countAndFlagsBits, (unint64_t)v98._object, (uint64_t *)v159);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v157, v158);
    swift_bridgeObjectRelease_n(v98._object, 3);
    _os_log_impl((void *)&_mh_execute_header, v102, v103, "CUSTODIAN MESSAGE 1: %s", v105, 0xCu);
    swift_arrayDestroy(v106, 1, (char *)&type metadata for Any + 8);
    v107 = v106;
    v91 = v155;
    swift_slowDealloc(v107, -1, -1);
    swift_slowDealloc(v105, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v98._object, 2);
  }
  v108 = swift_bridgeObjectRetain_n(v91, 2);
  v109 = Logger.logObject.getter(v108);
  v110 = static os_log_type_t.debug.getter(v109);
  if (os_log_type_enabled(v109, v110))
  {
    v111 = (uint8_t *)swift_slowAlloc(12, -1);
    v112 = (void *)swift_slowAlloc(32, -1);
    v159[0] = v112;
    *(_DWORD *)v111 = 136315138;
    swift_bridgeObjectRetain(v155);
    v113 = v148;
    v157 = sub_1001DEF4C(v148, v155, (uint64_t *)v159);
    v91 = v155;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v157, v158);
    swift_bridgeObjectRelease_n(v91, 3);
    _os_log_impl((void *)&_mh_execute_header, v109, v110, "SPAKE SESSION ID: %s", v111, 0xCu);
    swift_arrayDestroy(v112, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v112, -1, -1);
    swift_slowDealloc(v111, -1, -1);

    v115 = v149;
    v114 = v150;
  }
  else
  {

    swift_bridgeObjectRelease_n(v91, 2);
    v115 = v149;
    v114 = v150;
    v113 = v148;
  }
  v116 = sub_1000080B4(&qword_10028BB68);
  v117 = swift_initStackObject(v116, &v161);
  *(_OWORD *)(v117 + 16) = xmmword_100219130;
  strcpy((char *)(v117 + 32), "spakeMessage");
  *(_BYTE *)(v117 + 45) = 0;
  *(_WORD *)(v117 + 46) = -5120;
  v118 = object;
  *(_QWORD *)(v117 + 48) = countAndFlagsBits;
  *(_QWORD *)(v117 + 56) = v118;
  *(_QWORD *)(v117 + 72) = &type metadata for String;
  strcpy((char *)(v117 + 80), "spakeSessionId");
  *(_QWORD *)(v117 + 120) = &type metadata for String;
  *(_BYTE *)(v117 + 95) = -18;
  *(_QWORD *)(v117 + 96) = v113;
  *(_QWORD *)(v117 + 104) = v91;
  swift_bridgeObjectRetain(v91);
  swift_bridgeObjectRetain(v118);
  v119 = sub_100015894(v117);
  v120 = sub_1001CCDFC(v119);
  swift_bridgeObjectRelease(v119);
  v121 = sub_1000C3D78(v120);
  v123 = v122;
  swift_bridgeObjectRelease(v118);
  swift_bridgeObjectRelease(v91);
  sub_1000144D8(*v115, v115[1]);
  *v115 = v121;
  v115[1] = v123;
  v124 = *(void **)(v114 + 16);
  type metadata accessor for AACustodianRecoveryError(0);
  v126 = v125;
  v157 = -9001;
  v127 = v124;
  v128 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
  v129 = sub_100005150(&qword_10028B590, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianRecoveryError, (uint64_t)&unk_100217FF4);
  _BridgedStoredNSError.init(_:userInfo:)(v159, &v157, v128, v126, v129);
  v130 = v159[0];
  v131 = (uint64_t)v166;
  v12 = (char *)sub_10000C834(v124, (uint64_t)v166, 0, 0, v159[0]);

  v155 = v164;
  v132 = v164;
  v133 = sub_10000732C(&v162, v164);
  v160 = v155;
  v134 = sub_1000B9D04(v159);
  (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v132 - 8) + 16))(v134, v133, v132);
  v135 = (uint64_t)&v12[OBJC_IVAR____TtC13appleaccountd24CustodianRecoverySession_verifier];
  swift_beginAccess(&v12[OBJC_IVAR____TtC13appleaccountd24CustodianRecoverySession_verifier], &v157, 33, 0);
  sub_10014BA58((uint64_t)v159, v135);
  swift_endAccess(&v157);
  sub_10000F494(v156, v137);
  sub_10000F494(v152, v151);
  sub_100006F58(&v162);
  sub_100028388(v131, type metadata accessor for CustodianRecoveryData);
  return v12;
}

uint64_t sub_100146154(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  unint64_t *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  void *v26;
  unint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint8_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54[3];
  uint64_t v55;
  uint64_t v56;

  if (qword_10028ADC8 != -1)
    swift_once(&qword_10028ADC8, sub_100046D2C);
  v5 = type metadata accessor for Logger(0);
  sub_100005288(v5, (uint64_t)qword_1002A89D8);
  v6 = swift_bridgeObjectRetain_n(a2, 2);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.debug.getter(v7);
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc(12, -1);
    v10 = a1;
    v11 = swift_slowAlloc(32, -1);
    v54[0] = v11;
    *(_DWORD *)v9 = 136315138;
    swift_bridgeObjectRetain(a2);
    v52 = sub_1001DEF4C(v10, a2, v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53);
    swift_bridgeObjectRelease_n(a2, 3);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Looking for active sessions with sessionID: %s", v9, 0xCu);
    swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
    v12 = v11;
    a1 = v10;
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v9, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
  }
  v13 = *(_QWORD *)(v2 + 184);
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v13 + 32));
  swift_beginAccess(v13 + 16, v54, 0, 0);
  v14 = *(_QWORD *)(v13 + 16);
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(v14);
  v16 = sub_100148400(v15, a1, a2);
  swift_bridgeObjectRelease(a2);
  v17 = sub_10002AD8C(v16);
  swift_bridgeObjectRelease(v16);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v13 + 32));
  v18 = v17[2];
  if (v18)
  {
    swift_weakInit(&v55, v2);
    type metadata accessor for AACustodianRecoveryError(0);
    v20 = v19;
    swift_bridgeObjectRetain(v17);
    swift_beginAccess(&v55, &v52, 0, 0);
    v47 = v17;
    v21 = v17 + 5;
    v22 = &qword_10028B590;
    do
    {
      v27 = v22;
      v49 = v18;
      v29 = *(v21 - 1);
      v28 = *v21;
      v30 = swift_weakLoadStrong(&v55);
      if (v30)
      {
        v31 = v30;
        v50 = -9003;
        swift_unknownObjectRetain(v29);
        v48 = v28;
        v32 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
        v33 = sub_100005150(v27, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianRecoveryError, (uint64_t)&unk_100217FF4);
        _BridgedStoredNSError.init(_:userInfo:)(&v51, &v50, v32, v20, v33);
        v34 = v51;
        sub_1001466E8(v29, v48, (uint64_t)v51, 5);

        v35 = v31;
        v22 = v27;
        swift_release(v35);
      }
      else
      {
        swift_unknownObjectRetain(v29);
      }
      v23 = v29 + OBJC_IVAR____TtC13appleaccountd24CustodianRecoverySession_sessionID;
      v50 = -9003;
      v24 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
      v25 = sub_100005150(v22, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianRecoveryError, (uint64_t)&unk_100217FF4);
      _BridgedStoredNSError.init(_:userInfo:)(&v51, &v50, v24, v20, v25);
      v26 = v51;
      sub_10000D134(v23, (uint64_t)v51, 1);
      swift_unknownObjectRelease(v29);

      v21 += 2;
      v18 = v49 - 1;
    }
    while (v49 != 1);
    swift_bridgeObjectRelease(v47);
    swift_weakDestroy(&v55);
    return swift_bridgeObjectRelease(v47);
  }
  else
  {
    swift_bridgeObjectRelease(v17);
    v37 = swift_bridgeObjectRetain_n(a2, 2);
    v38 = Logger.logObject.getter(v37);
    v39 = static os_log_type_t.error.getter(v38);
    if (os_log_type_enabled(v38, v39))
    {
      v40 = (uint8_t *)swift_slowAlloc(12, -1);
      v41 = swift_slowAlloc(32, -1);
      v52 = v41;
      *(_DWORD *)v40 = 136315138;
      swift_bridgeObjectRetain(a2);
      v55 = sub_1001DEF4C(a1, a2, &v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56);
      swift_bridgeObjectRelease_n(a2, 3);
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "No sessions found with given sessionID: %s, nothing to cancel", v40, 0xCu);
      swift_arrayDestroy(v41, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v41, -1, -1);
      swift_slowDealloc(v40, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a2, 2);
    }
    type metadata accessor for AACustodianError(0);
    v43 = v42;
    v55 = -7013;
    v44 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
    v45 = sub_100005150((unint64_t *)&qword_10028B640, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianError, (uint64_t)&unk_100218378);
    v46 = _BridgedStoredNSError.init(_:userInfo:)(&v52, &v55, v44, v43, v45);
    return swift_willThrow(v46);
  }
}

void sub_1001466E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  void *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t ObjectType;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  Swift::String v31;
  uint64_t v32;
  uint64_t inited;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *object;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint8_t *v44;
  Swift::String v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t (*v55)(unint64_t *, uint64_t, uint64_t);
  void (*v56)(unint64_t *, _QWORD);
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  unint64_t v60;
  void *v61;
  id v62;
  void (*v63)(unint64_t *, _QWORD);
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  Swift::String v68;
  void *v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD v73[3];
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  char v82[32];

  v75 = a4;
  v74 = a2;
  v6 = type metadata accessor for CustodianRecoveryData(0);
  __chkstk_darwin(v6, v7);
  v9 = (char *)v73 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for String.Encoding(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  v14 = (char *)v73 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = (void *)_convertErrorToNSError(_:)(a3);
  v16 = objc_msgSend(v15, "code");

  v79 = (unint64_t)v16;
  v17 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v19 = v18;
  static String.Encoding.utf8.getter();
  v77 = String.data(using:allowLossyConversion:)(v14, 0, v17, v19);
  v21 = v20;
  swift_bridgeObjectRelease(v19);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  v76 = v21;
  if (v21 >> 60 != 15)
  {
    v73[1] = v9;
    ObjectType = swift_getObjectType(a1);
    v28 = a1 + OBJC_IVAR____TtC13appleaccountd24CustodianRecoverySession_recoveryData;
    swift_beginAccess(a1 + OBJC_IVAR____TtC13appleaccountd24CustodianRecoverySession_recoveryData, v82, 0, 0);
    v29 = *(void **)(v28 + 24);
    v73[2] = v28;
    if (v29)
    {
      v30 = *(_QWORD *)(v28 + 16);
      swift_bridgeObjectRetain(v29);
      v31 = Data.base64EncodedString(options:)(0);
      v32 = sub_1000080B4(&qword_10028BB68);
      inited = swift_initStackObject(v32, &v78);
      *(_OWORD *)(inited + 16) = xmmword_100219130;
      strcpy((char *)(inited + 32), "spakeMessage");
      *(_BYTE *)(inited + 45) = 0;
      *(_WORD *)(inited + 46) = -5120;
      *(Swift::String *)(inited + 48) = v31;
      *(_QWORD *)(inited + 72) = &type metadata for String;
      strcpy((char *)(inited + 80), "spakeSessionId");
      *(_QWORD *)(inited + 120) = &type metadata for String;
      *(_BYTE *)(inited + 95) = -18;
      *(_QWORD *)(inited + 96) = v30;
      *(_QWORD *)(inited + 104) = v29;
      swift_bridgeObjectRetain(v29);
      swift_bridgeObjectRetain(v31._object);
      v34 = sub_100015894(inited);
      v35 = sub_1001CCDFC(v34);
      swift_bridgeObjectRelease(v34);
      v36 = sub_1000C3D78(v35);
      v38 = v37;
      swift_bridgeObjectRelease(v31._object);
      object = v29;
    }
    else
    {
      if (qword_10028ADC8 != -1)
        swift_once(&qword_10028ADC8, sub_100046D2C);
      v40 = type metadata accessor for Logger(0);
      v41 = sub_100005288(v40, (uint64_t)qword_1002A89D8);
      v42 = Logger.logObject.getter(v41);
      v43 = static os_log_type_t.debug.getter(v42);
      if (os_log_type_enabled(v42, v43))
      {
        v44 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v44 = 0;
        _os_log_impl((void *)&_mh_execute_header, v42, v43, "Looks like we don't have a spakeSessionID, Owner device failed before receiving custodian data, passing sessionUUID", v44, 2u);
        swift_slowDealloc(v44, -1, -1);
      }

      v45 = Data.base64EncodedString(options:)(0);
      v46 = UUID.uuidString.getter(v45._countAndFlagsBits);
      v48 = v47;
      v49 = sub_1000080B4(&qword_10028BB68);
      v50 = swift_initStackObject(v49, &v81);
      *(_OWORD *)(v50 + 16) = xmmword_100219130;
      strcpy((char *)(v50 + 32), "spakeMessage");
      *(_BYTE *)(v50 + 45) = 0;
      *(_WORD *)(v50 + 46) = -5120;
      *(Swift::String *)(v50 + 48) = v45;
      *(_QWORD *)(v50 + 72) = &type metadata for String;
      strcpy((char *)(v50 + 80), "spakeSessionId");
      *(_QWORD *)(v50 + 120) = &type metadata for String;
      *(_BYTE *)(v50 + 95) = -18;
      *(_QWORD *)(v50 + 96) = v46;
      *(_QWORD *)(v50 + 104) = v48;
      swift_bridgeObjectRetain(v45._object);
      swift_bridgeObjectRetain(v48);
      v51 = sub_100015894(v50);
      v52 = sub_1001CCDFC(v51);
      swift_bridgeObjectRelease(v51);
      v36 = sub_1000C3D78(v52);
      v38 = v53;
      swift_bridgeObjectRelease(v48);
      object = v45._object;
    }
    swift_bridgeObjectRelease(object);
    v54 = v74;
    v55 = *(uint64_t (**)(unint64_t *, uint64_t, uint64_t))(v74 + 48);
    v56 = (void (*)(unint64_t *, _QWORD))v55(&v79, ObjectType, v74);
    v58 = (uint64_t *)(v57 + *(int *)(v6 + 44));
    v59 = *v58;
    v60 = v58[1];
    *v58 = v36;
    v58[1] = v38;
    sub_1000144D8(v59, v60);
    v56(&v79, 0);
    v61 = (void *)_convertErrorToNSError(_:)(a3);
    v62 = objc_msgSend(v61, "code");

    v63 = (void (*)(unint64_t *, _QWORD))v55(&v79, ObjectType, v54);
    v65 = v64 + *(int *)(v6 + 52);
    *(_QWORD *)v65 = v62;
    *(_BYTE *)(v65 + 8) = 0;
    v63(&v79, 0);
    v66 = swift_allocObject(&unk_100269CA8, 24, 7);
    v79 = 0;
    v80 = 0xE000000000000000;
    _StringGuts.grow(_:)(40);
    v67 = swift_bridgeObjectRelease(v80);
    v79 = 0xD000000000000026;
    v80 = 0x800000010020DA80;
    v68._countAndFlagsBits = UUID.uuidString.getter(v67);
    v69 = v68._object;
    String.append(_:)(v68);
    swift_bridgeObjectRelease(v69);
    v70 = v80;
    v71 = String.utf8CString.getter(v79, v80);
    swift_bridgeObjectRelease(v70);
    v72 = os_transaction_create(v71 + 32);
    swift_release(v71);
    *(_QWORD *)(v66 + 16) = v72;
    __asm { BR              X10 }
  }
  if (qword_10028ADC8 != -1)
    swift_once(&qword_10028ADC8, sub_100046D2C);
  v22 = type metadata accessor for Logger(0);
  v23 = sub_100005288(v22, (uint64_t)qword_1002A89D8);
  v24 = Logger.logObject.getter(v23);
  v25 = static os_log_type_t.error.getter(v24);
  if (os_log_type_enabled(v24, v25))
  {
    v26 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v26 = 0;
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "Unable to convert error to data", v26, 2u);
    swift_slowDealloc(v26, -1, -1);
  }

}

void sub_100146F4C(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[24];
  uint64_t v15;
  _BYTE v16[24];

  v4 = (uint64_t *)(a2 + 16);
  swift_beginAccess(a2 + 16, v16, 0, 0);
  if (*(_QWORD *)(a2 + 16))
  {
    swift_beginAccess(v4, v14, 1, 0);
    v5 = *v4;
    *v4 = 0;
    swift_unknownObjectRelease(v5);
  }
  if (a1)
  {
    swift_errorRetain(a1);
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v6 = type metadata accessor for Logger(0);
    sub_100005288(v6, (uint64_t)qword_1002A89D8);
    v7 = swift_errorRetain(a1);
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.error.getter(v8);
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc(12, -1);
      v11 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v10 = 138412290;
      v12 = _convertErrorToNSError(_:)(a1);
      v15 = v12;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, v16);
      *v11 = v12;
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "failed to inform session cancel to IdMS with error: %@", v10, 0xCu);
      v13 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v11, 1, v13);
      swift_slowDealloc(v11, -1, -1);
      swift_slowDealloc(v10, -1, -1);

      swift_errorRelease(a1);
    }
    else
    {
      swift_errorRelease(a1);
      swift_errorRelease(a1);

    }
  }
}

uint64_t sub_100147130@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  void (*v32)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  _BYTE v36[24];
  __int128 v37;
  uint64_t v38;
  _QWORD v39[3];
  uint64_t v40;
  uint64_t v41;

  v8 = sub_1000080B4(&qword_100293A80);
  __chkstk_darwin(v8, v9);
  v11 = v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0) + 24;
  v12 = a3 + OBJC_IVAR____TtC13appleaccountd24CustodianRecoverySession_verifier;
  swift_beginAccess(v12, v36, 0, 0);
  sub_100024A20(v12, (uint64_t)&v37, (uint64_t *)&unk_100291850);
  if (v38)
  {
    sub_10003A190(&v37, (uint64_t)v39);
    v13 = v40;
    v14 = v41;
    sub_10000732C(v39, v40);
    v22 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 48))(a1, a2, v13, v14);
    v24 = v23;
    sub_1001ABC24(v22, v23, (uint64_t)v11);
    v25 = type metadata accessor for CustodianRecoveryKeys(0);
    v26 = *(_QWORD *)(v25 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v11, 1, v25) == 1)
    {
      sub_100004934((uint64_t)v11, &qword_100293A80);
      if (qword_10028ADC8 != -1)
        swift_once(&qword_10028ADC8, sub_100046D2C);
      v27 = type metadata accessor for Logger(0);
      v28 = sub_100005288(v27, (uint64_t)qword_1002A89D8);
      v29 = Logger.logObject.getter(v28);
      v30 = static os_log_type_t.error.getter(v29);
      if (os_log_type_enabled(v29, v30))
      {
        v31 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v31 = 0;
        _os_log_impl((void *)&_mh_execute_header, v29, v30, "Message did not contain needed keys", v31, 2u);
        swift_slowDealloc(v31, -1, -1);
      }
      sub_10000F494(v22, v24);

      v32 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v26 + 56);
      v33 = a4;
      v34 = 1;
    }
    else
    {
      sub_10000F494(v22, v24);
      sub_10003B730((uint64_t)v11, a4, type metadata accessor for CustodianRecoveryKeys);
      v32 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v26 + 56);
      v33 = a4;
      v34 = 0;
    }
    v32(v33, v34, 1, v25);
    return sub_100006F58(v39);
  }
  else
  {
    sub_100004934((uint64_t)&v37, (uint64_t *)&unk_100291850);
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v15 = type metadata accessor for Logger(0);
    v16 = sub_100005288(v15, (uint64_t)qword_1002A89D8);
    v17 = Logger.logObject.getter(v16);
    v18 = static os_log_type_t.error.getter(v17);
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Session has an invalid verifier", v19, 2u);
      swift_slowDealloc(v19, -1, -1);
    }

    v20 = type metadata accessor for CustodianRecoveryKeys(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(a4, 1, 1, v20);
  }
}

uint64_t sub_1001476C0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t (*v29)(_QWORD);
  unint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  unint64_t v37;
  uint64_t v38[4];
  uint64_t v39;
  uint64_t v40;
  _BYTE v41[24];

  v3 = type metadata accessor for CustodianRecoveryData(0);
  __chkstk_darwin(v3, v4);
  v6 = (uint64_t *)((char *)&v38[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = sub_1001498F8(a1);
  if (!v8)
    return 0;
  v11 = v7;
  v12 = v8;
  v13 = v9;
  v37 = v10;
  if (qword_10028ADC8 != -1)
    swift_once(&qword_10028ADC8, sub_100046D2C);
  v14 = type metadata accessor for Logger(0);
  v15 = sub_100005288(v14, (uint64_t)qword_1002A89D8);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.debug.getter(v16);
  if (os_log_type_enabled(v16, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v18 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Looking for existing sessions to start message verification", v18, 2u);
    swift_slowDealloc(v18, -1, -1);
  }

  v19 = *(_QWORD *)(v1 + 184);
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v19 + 32));
  swift_beginAccess(v19 + 16, v41, 0, 0);
  v20 = *(_QWORD *)(v19 + 16);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v20);
  sub_1001480E4(v21, v11, v12);
  v23 = v22;
  swift_bridgeObjectRelease(v20);
  swift_bridgeObjectRelease(v12);
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v19 + 32));
  if (!v23)
  {
    swift_bridgeObjectRetain(v12);
    v30 = v37;
    v31 = sub_10000F450(v13, v37);
    v32 = Logger.logObject.getter(v31);
    v33 = static os_log_type_t.error.getter(v32);
    if (os_log_type_enabled(v32, v33))
    {
      v34 = (uint8_t *)swift_slowAlloc(12, -1);
      v35 = swift_slowAlloc(32, -1);
      v38[0] = v35;
      *(_DWORD *)v34 = 136315138;
      swift_bridgeObjectRetain(v12);
      v39 = sub_1001DEF4C(v11, v12, v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40);
      swift_bridgeObjectRelease(v12);
      sub_100149DB4(v11, v12, v13, v30);
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "No Active session with spakeID: %s", v34, 0xCu);
      swift_arrayDestroy(v35, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v35, -1, -1);
      swift_slowDealloc(v34, -1, -1);

      sub_100149DB4(v11, v12, v13, v30);
    }
    else
    {
      sub_100149DB4(v11, v12, v13, v30);
      sub_100149DB4(v11, v12, v13, v30);

    }
    return 0;
  }
  sub_100027FE8(a1, (uint64_t)v6, type metadata accessor for CustodianRecoveryData);
  swift_bridgeObjectRetain(v12);
  v24 = v37;
  sub_10000F450(v13, v37);
  sub_10000F494(v13, v24);
  v25 = swift_bridgeObjectRelease(v6[3]);
  v6[2] = v11;
  v6[3] = v12;
  v26 = Logger.logObject.getter(v25);
  v27 = static os_log_type_t.debug.getter(v26);
  if (os_log_type_enabled(v26, v27))
  {
    v28 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v28 = 0;
    _os_log_impl((void *)&_mh_execute_header, v26, v27, "Updating session with new data", v28, 2u);
    swift_slowDealloc(v28, -1, -1);
  }

  swift_getObjectType(v23);
  v29 = sub_1000ECA40((uint64_t)v38);
  sub_1000E2D20(v6);
  ((void (*)(uint64_t *, _QWORD))v29)(v38, 0);
  sub_100149DB4(v11, v12, v13, v24);
  sub_100028388((uint64_t)v6, type metadata accessor for CustodianRecoveryData);
  return v23;
}

void sub_100147AFC(uint64_t a1, char a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v6;
  id v7;
  Class isa;
  id v9;
  uint64_t Strong;
  uint64_t v11;
  void *v12;
  id v13;
  _BYTE v14[24];

  if ((a2 & 1) != 0)
  {
    swift_errorRetain(a1);
    a4(a1);
    sub_1000057B0(a1, 1);
  }
  else
  {
    v6 = a3 + 16;
    v7 = objc_allocWithZone((Class)AACustodianRecoveryConfiguration);
    swift_bridgeObjectRetain(a1);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    sub_1000057B0(a1, 0);
    v9 = objc_msgSend(v7, "initWithConfigurationDictionary:", isa);

    swift_beginAccess(v6, v14, 0, 0);
    Strong = swift_weakLoadStrong(v6);
    if (Strong)
    {
      v11 = Strong;
      v12 = *(void **)(Strong + 16);
      *(_QWORD *)(Strong + 16) = v9;
      v13 = v9;
      swift_release(v11);

    }
    a4(0);

  }
}

void sub_100147C1C(uint64_t a1, void (*a2)(uint64_t), uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;

  if (!a1)
  {
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v14 = type metadata accessor for Logger(0);
    v15 = sub_100005288(v14, (uint64_t)qword_1002A89D8);
    v8 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.default.getter(v16);
    if (os_log_type_enabled(v8, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, v17, "Custodian transaction sent to IdMS successfully", v18, 2u);
      swift_slowDealloc(v18, -1, -1);
    }
LABEL_12:

    if (!a2)
      return;
    goto LABEL_13;
  }
  swift_errorRetain(a1);
  if (qword_10028ADC8 != -1)
    swift_once(&qword_10028ADC8, sub_100046D2C);
  v6 = type metadata accessor for Logger(0);
  sub_100005288(v6, (uint64_t)qword_1002A89D8);
  v7 = swift_errorRetain(a1);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.error.getter(v8);
  if (!os_log_type_enabled(v8, v9))
  {
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    goto LABEL_12;
  }
  v10 = (uint8_t *)swift_slowAlloc(12, -1);
  v11 = (uint64_t *)swift_slowAlloc(8, -1);
  *(_DWORD *)v10 = 138412290;
  v12 = _convertErrorToNSError(_:)(a1);
  v19 = v12;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20);
  *v11 = v12;
  swift_errorRelease(a1);
  _os_log_impl((void *)&_mh_execute_header, v8, v9, "Custodian transaction failed to be sent to IdMS with error: %@", v10, 0xCu);
  v13 = sub_1000080B4((uint64_t *)&unk_10028BC20);
  swift_arrayDestroy(v11, 1, v13);
  swift_slowDealloc(v11, -1, -1);
  swift_slowDealloc(v10, -1, -1);

  swift_errorRelease(a1);
  if (a2)
  {
LABEL_13:
    swift_retain(a3);
    a2(a1);
    sub_10000D98C((uint64_t)a2, a3);
  }
}

uint64_t sub_100147EA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_100006F58((_QWORD *)(v0 + 24));
  sub_100006F58((_QWORD *)(v0 + 64));
  sub_100006F58((_QWORD *)(v0 + 104));
  sub_100006F58((_QWORD *)(v0 + 144));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 184));
  sub_100006F58((_QWORD *)(v0 + 200));
  v1 = v0 + OBJC_IVAR____TtC13appleaccountd27CustodianRecoveryController__accountStore;
  v2 = sub_1000080B4(&qword_10028FA50);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  v3 = v0 + OBJC_IVAR____TtC13appleaccountd27CustodianRecoveryController__analyticsEventFactory;
  v4 = sub_1000080B4((uint64_t *)&unk_10028E7D0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  v5 = v0 + OBJC_IVAR____TtC13appleaccountd27CustodianRecoveryController__analyticsRTCReporter;
  v6 = sub_1000080B4((uint64_t *)&unk_10028E7C0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  return v0;
}

uint64_t sub_100147F78()
{
  uint64_t v0;

  sub_100147EA0();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_100147F9C()
{
  return type metadata accessor for CustodianRecoveryController(0);
}

uint64_t type metadata accessor for CustodianRecoveryController(uint64_t a1)
{
  uint64_t result;

  result = qword_100293800;
  if (!qword_100293800)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CustodianRecoveryController);
  return result;
}

void sub_100147FE0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[11];

  v8[0] = "\b";
  v8[1] = &unk_10021E398;
  v8[2] = &unk_10021E398;
  v8[3] = &unk_10021E398;
  v8[4] = &unk_10021E398;
  v8[5] = &unk_10021E3B0;
  v8[6] = &unk_10021E398;
  v8[7] = (char *)&value witness table for () + 64;
  sub_100017464(319, (unint64_t *)&qword_100293810, &qword_10028C860);
  if (v3 <= 0x3F)
  {
    v8[8] = *(_QWORD *)(v2 - 8) + 64;
    sub_100017464(319, (unint64_t *)&qword_100293820, (uint64_t *)&unk_10028C900);
    if (v5 <= 0x3F)
    {
      v8[9] = *(_QWORD *)(v4 - 8) + 64;
      sub_100017464(319, qword_100293830, (uint64_t *)&unk_10028C910);
      if (v7 <= 0x3F)
      {
        v8[10] = *(_QWORD *)(v6 - 8) + 64;
        swift_updateClassMetadata2(a1, 256, 11, v8, a1 + 80);
      }
    }
  }
}

void sub_1001480E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  BOOL v30;
  int64_t v31;
  uint64_t v32;
  uint64_t v34;
  char v35[24];
  _QWORD v36[5];
  uint64_t v37;

  v4 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v5 = a1;
    else
      v5 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v6 = __CocoaSet.makeIterator()(v5);
    v7 = type metadata accessor for CustodianRecoverySession(0);
    v8 = sub_100005150((unint64_t *)&unk_100293A70, type metadata accessor for CustodianRecoverySession, (uint64_t)&unk_10021CAF0);
    v9 = Set.Iterator.init(_cocoa:)(v36, v6, v7, v8);
    v4 = v36[0];
    v32 = v36[1];
    v10 = v36[2];
    v11 = v36[3];
    v12 = v36[4];
  }
  else
  {
    v13 = -1 << *(_BYTE *)(a1 + 32);
    v32 = a1 + 56;
    v14 = ~v13;
    v15 = -v13;
    if (v15 < 64)
      v16 = ~(-1 << v15);
    else
      v16 = -1;
    v12 = v16 & *(_QWORD *)(a1 + 56);
    swift_bridgeObjectRetain(a1);
    v10 = v14;
    v11 = 0;
  }
  v31 = (unint64_t)(v10 + 64) >> 6;
  while (v4 < 0)
  {
    v20 = __CocoaSet.Iterator.next()(v9);
    if (!v20)
      goto LABEL_41;
    v21 = v20;
    v34 = v20;
    v22 = type metadata accessor for CustodianRecoverySession(0);
    swift_unknownObjectRetain(v21);
    swift_dynamicCast(&v37, &v34, (char *)&type metadata for Swift.AnyObject + 8, v22, 7);
    v23 = v37;
    swift_unknownObjectRelease(v21);
    v19 = v11;
    v17 = v12;
    if (!v23)
      goto LABEL_41;
LABEL_35:
    v27 = v23 + OBJC_IVAR____TtC13appleaccountd24CustodianRecoverySession_recoveryData;
    swift_beginAccess(v23 + OBJC_IVAR____TtC13appleaccountd24CustodianRecoverySession_recoveryData, v35, 0, 0);
    v28 = *(_QWORD *)(v27 + 24);
    if (v28)
    {
      v29 = *(_QWORD *)(v27 + 16);
      v30 = v29 == a2 && v28 == a3;
      if (v30 || (_stringCompareWithSmolCheck(_:_:expecting:)(v29, v28, a2, a3, 0) & 1) != 0)
        goto LABEL_41;
    }
    v9 = (_QWORD *)swift_release(v23);
    v11 = v19;
    v12 = v17;
  }
  if (v12)
  {
    v17 = (v12 - 1) & v12;
    v18 = __clz(__rbit64(v12)) | (v11 << 6);
    v19 = v11;
LABEL_34:
    v23 = *(_QWORD *)(*(_QWORD *)(v4 + 48) + 8 * v18);
    swift_retain(v23);
    if (!v23)
      goto LABEL_41;
    goto LABEL_35;
  }
  v24 = v11 + 1;
  if (!__OFADD__(v11, 1))
  {
    if (v24 >= v31)
      goto LABEL_41;
    v25 = *(_QWORD *)(v32 + 8 * v24);
    v19 = v11 + 1;
    if (!v25)
    {
      v19 = v11 + 2;
      if (v11 + 2 >= v31)
        goto LABEL_41;
      v25 = *(_QWORD *)(v32 + 8 * v19);
      if (!v25)
      {
        v19 = v11 + 3;
        if (v11 + 3 >= v31)
          goto LABEL_41;
        v25 = *(_QWORD *)(v32 + 8 * v19);
        if (!v25)
        {
          v19 = v11 + 4;
          if (v11 + 4 >= v31)
            goto LABEL_41;
          v25 = *(_QWORD *)(v32 + 8 * v19);
          if (!v25)
          {
            v19 = v11 + 5;
            if (v11 + 5 >= v31)
              goto LABEL_41;
            v25 = *(_QWORD *)(v32 + 8 * v19);
            if (!v25)
            {
              v26 = v11 + 6;
              while (v31 != v26)
              {
                v25 = *(_QWORD *)(v32 + 8 * v26++);
                if (v25)
                {
                  v19 = v26 - 1;
                  goto LABEL_33;
                }
              }
LABEL_41:
              sub_100149DEC(v4);
              return;
            }
          }
        }
      }
    }
LABEL_33:
    v17 = (v25 - 1) & v25;
    v18 = __clz(__rbit64(v25)) + (v19 << 6);
    goto LABEL_34;
  }
  __break(1u);
}

uint64_t sub_100148400(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  int64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36[24];
  _QWORD v37[5];
  _QWORD *v38;

  v5 = result;
  v38 = _swiftEmptyArrayStorage;
  if ((result & 0xC000000000000001) != 0)
  {
    if (result >= 0)
      result &= 0xFFFFFFFFFFFFFF8uLL;
    v6 = __CocoaSet.makeIterator()(result);
    v7 = type metadata accessor for CustodianRecoverySession(0);
    v8 = sub_100005150((unint64_t *)&unk_100293A70, type metadata accessor for CustodianRecoverySession, (uint64_t)&unk_10021CAF0);
    result = (uint64_t)Set.Iterator.init(_cocoa:)(v37, v6, v7, v8);
    v5 = v37[0];
    v33 = v37[1];
    v9 = v37[2];
    v10 = v37[3];
    v11 = v37[4];
  }
  else
  {
    v10 = 0;
    v12 = -1 << *(_BYTE *)(result + 32);
    v33 = result + 56;
    v13 = ~v12;
    v14 = -v12;
    if (v14 < 64)
      v15 = ~(-1 << v14);
    else
      v15 = -1;
    v11 = v15 & *(_QWORD *)(result + 56);
    v9 = v13;
  }
  v32 = (unint64_t)(v9 + 64) >> 6;
  while (v5 < 0)
  {
    v19 = __CocoaSet.Iterator.next()(result);
    if (!v19)
      goto LABEL_42;
    v20 = v19;
    v34 = v19;
    v21 = type metadata accessor for CustodianRecoverySession(0);
    swift_unknownObjectRetain(v20);
    swift_dynamicCast(&v35, &v34, (char *)&type metadata for Swift.AnyObject + 8, v21, 7);
    v22 = v35;
    swift_unknownObjectRelease(v20);
    v18 = v10;
    v16 = v11;
    if (!v22)
      goto LABEL_42;
LABEL_35:
    v26 = (uint64_t *)(v22 + OBJC_IVAR____TtC13appleaccountd24CustodianRecoverySession_recoveryData);
    swift_beginAccess(v22 + OBJC_IVAR____TtC13appleaccountd24CustodianRecoverySession_recoveryData, v36, 0, 0);
    v27 = v26[1];
    if (v27
      && ((v28 = *v26, *v26 == a2) ? (v29 = v27 == a3) : (v29 = 0),
          v29 || (v28 = _stringCompareWithSmolCheck(_:_:expecting:)(v28, v27, a2, a3, 0), (v28 & 1) != 0)))
    {
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v28);
      v30 = v38[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v30);
      v31 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v30, v22);
      result = specialized ContiguousArray._endMutation()(v31);
    }
    else
    {
      result = swift_release(v22);
    }
    v10 = v18;
    v11 = v16;
  }
  if (v11)
  {
    v16 = (v11 - 1) & v11;
    v17 = __clz(__rbit64(v11)) | (v10 << 6);
    v18 = v10;
LABEL_34:
    v22 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v17);
    swift_retain(v22);
    if (!v22)
      goto LABEL_42;
    goto LABEL_35;
  }
  v23 = v10 + 1;
  if (!__OFADD__(v10, 1))
  {
    if (v23 >= v32)
      goto LABEL_42;
    v24 = *(_QWORD *)(v33 + 8 * v23);
    v18 = v10 + 1;
    if (!v24)
    {
      v18 = v10 + 2;
      if (v10 + 2 >= v32)
        goto LABEL_42;
      v24 = *(_QWORD *)(v33 + 8 * v18);
      if (!v24)
      {
        v18 = v10 + 3;
        if (v10 + 3 >= v32)
          goto LABEL_42;
        v24 = *(_QWORD *)(v33 + 8 * v18);
        if (!v24)
        {
          v18 = v10 + 4;
          if (v10 + 4 >= v32)
            goto LABEL_42;
          v24 = *(_QWORD *)(v33 + 8 * v18);
          if (!v24)
          {
            v18 = v10 + 5;
            if (v10 + 5 >= v32)
              goto LABEL_42;
            v24 = *(_QWORD *)(v33 + 8 * v18);
            if (!v24)
            {
              v25 = v10 + 6;
              while (v32 != v25)
              {
                v24 = *(_QWORD *)(v33 + 8 * v25++);
                if (v24)
                {
                  v18 = v25 - 1;
                  goto LABEL_33;
                }
              }
LABEL_42:
              sub_100149DEC(v5);
              return (uint64_t)v38;
            }
          }
        }
      }
    }
LABEL_33:
    v16 = (v24 - 1) & v24;
    v17 = __clz(__rbit64(v24)) + (v18 << 6);
    goto LABEL_34;
  }
  __break(1u);
  return result;
}

void sub_10014873C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  id v22;
  Class isa;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  Class v28;
  Class v29;
  NSString v30;
  NSString v31;
  NSString v32;
  int *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v34 = a2;
  v3 = sub_1000080B4((uint64_t *)&unk_1002904F0);
  __chkstk_darwin(v3, v4);
  v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (int *)type metadata accessor for CustodianRecoveryData(0);
  __chkstk_darwin(v7, v8);
  v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10028ADC8 != -1)
    swift_once(&qword_10028ADC8, sub_100046D2C);
  v11 = type metadata accessor for Logger(0);
  sub_100005288(v11, (uint64_t)qword_1002A89D8);
  v12 = sub_100027FE8(a1, (uint64_t)v10, type metadata accessor for CustodianRecoveryData);
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.debug.getter(v13);
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc(12, -1);
    v16 = swift_slowAlloc(32, -1);
    v33 = v7;
    v17 = v16;
    v36 = v16;
    *(_DWORD *)v15 = 136315138;
    v18 = sub_1000E3D40();
    v20 = v19;
    v35 = sub_1001DEF4C(v18, v19, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, &v36);
    swift_bridgeObjectRelease(v20);
    sub_100028388((uint64_t)v10, type metadata accessor for CustodianRecoveryData);
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Generating context generated with data: %s", v15, 0xCu);
    swift_arrayDestroy(v17, 1, (char *)&type metadata for Any + 8);
    v21 = v17;
    v7 = v33;
    swift_slowDealloc(v21, -1, -1);
    swift_slowDealloc(v15, -1, -1);
  }
  else
  {
    sub_100028388((uint64_t)v10, type metadata accessor for CustodianRecoveryData);
  }

  v22 = objc_msgSend(objc_allocWithZone((Class)AKCustodianContext), "init");
  if (*(_QWORD *)(a1 + v7[11] + 8) >> 60 == 15)
    isa = 0;
  else
    isa = Data._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v22, "setAaData:", isa);

  v24 = a1 + v7[13];
  if (*(_BYTE *)(v24 + 8))
    v25 = 0;
  else
    v25 = *(_QWORD *)v24;
  objc_msgSend(v22, "setClientErrorCode:", v25);
  sub_100024A20(a1 + v7[7], (uint64_t)v6, (uint64_t *)&unk_1002904F0);
  v26 = type metadata accessor for UUID(0);
  v27 = *(_QWORD *)(v26 - 8);
  v28 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v6, 1, v26) != 1)
  {
    v28 = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v27 + 8))(v6, v26);
  }
  objc_msgSend(v22, "setCustodianUUID:", v28);

  if (*(_QWORD *)(a1 + v7[12] + 8) >> 60 == 15)
    v29 = 0;
  else
    v29 = Data._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v22, "setIdmsData:", v29);

  if (*(_QWORD *)(a1 + v7[8] + 8))
    v30 = String._bridgeToObjectiveC()();
  else
    v30 = 0;
  objc_msgSend(v22, "setOwnerAppleID:", v30);

  if (*(_QWORD *)(a1 + v7[9] + 8))
    v31 = String._bridgeToObjectiveC()();
  else
    v31 = 0;
  objc_msgSend(v22, "setOwnerCustodianAltDSID:", v31);

  if (*(_QWORD *)(a1 + 8))
    v32 = String._bridgeToObjectiveC()();
  else
    v32 = 0;
  objc_msgSend(v22, "setRecoverySessionID:", v32);

  __asm { BR              X10 }
}

void sub_100148FC0(void *a1, uint64_t a2, void *a3, const void *a4)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  _QWORD *v26;
  id v27;
  id v28;
  void *v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSString v35;
  NSString v36;
  id v37;
  id v38;
  void *v39;
  char *v40;
  uint64_t v41;
  void (*v42)(char *, char *, uint64_t);
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  uint8_t *v47;
  uint64_t v48;
  uint64_t v49;
  __n128 v50;
  uint64_t v51;
  __n128 v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char *v60;
  void *v61;
  _QWORD *v62;
  id v63;
  id v64;
  id v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  NSObject *v69;
  os_log_type_t v70;
  uint8_t *v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  id v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  NSObject *v81;
  os_log_type_t v82;
  uint8_t *v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  void *v88;
  id v89;
  id v90;
  Class isa;
  void *v92;
  _QWORD *v93;
  void (*v94)(char *, char *, uint64_t);
  id v95;
  id v96;
  uint64_t v97;
  _QWORD *v98;
  void (*v99)(char *, char *, uint64_t);
  id v100;
  char *v101;
  uint64_t v102;
  char *v103;
  id v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  _QWORD v108[5];

  v104 = a1;
  v7 = (_QWORD *)sub_1000080B4((uint64_t *)&unk_10028E7C0);
  v99 = (void (*)(char *, char *, uint64_t))*(v7 - 1);
  v100 = v7;
  __chkstk_darwin(v7, v8);
  v98 = (uint64_t *)((char *)&v97 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = sub_1000080B4((uint64_t *)&unk_1002904F0);
  __chkstk_darwin(v10, v11);
  v13 = (char *)&v97 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for UUID(0);
  v105 = *(_QWORD *)(v14 - 8);
  v15 = *(_QWORD *)(v105 + 64);
  v17 = __chkstk_darwin(v14, v16);
  v103 = (char *)&v97 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17, v18);
  v101 = (char *)&v97 - v19;
  v20 = sub_1000080B4(&qword_10028FA50);
  v21 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20, v22);
  v24 = (char *)&v97 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = swift_allocObject(&unk_10026A1A8, 24, 7);
  *(_QWORD *)(v25 + 16) = a4;
  v26 = (_QWORD *)swift_allocObject(&unk_10026A1D0, 40, 7);
  v26[2] = a3;
  v26[3] = sub_100088B48;
  v106 = v26;
  v26[4] = v25;
  v102 = a2;
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v24, a2 + OBJC_IVAR____TtC13appleaccountd27CustodianRecoveryController__accountStore, v20);
  _Block_copy(a4);
  _Block_copy(a4);
  v27 = a3;
  swift_retain(v25);
  Dependency.wrappedValue.getter(v108, v20);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v24, v20);
  v28 = objc_msgSend(*(id *)(*sub_10000732C(v108, v108[3]) + 16), "aa_primaryAppleAccount");
  if (!v28
    || (v29 = v28, v30 = objc_msgSend(v28, "aa_altDSID"), v29, !v30))
  {
    v66 = v27;
    sub_100006F58(v108);
    if (qword_10028ADE0 != -1)
      swift_once(&qword_10028ADE0, sub_100046DA0);
    v67 = type metadata accessor for Logger(0);
    v68 = sub_100005288(v67, (uint64_t)qword_1002A8A20);
    v69 = Logger.logObject.getter(v68);
    v70 = static os_log_type_t.debug.getter(v69);
    if (os_log_type_enabled(v69, v70))
    {
      v71 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v71 = 0;
      _os_log_impl((void *)&_mh_execute_header, v69, v70, "Account is nil. Not generating custodian recovery code", v71, 2u);
      swift_slowDealloc(v71, -1, -1);
    }

    type metadata accessor for AAError(0);
    v73 = v72;
    v107 = -4410;
    v74 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
    v75 = sub_100005150((unint64_t *)&qword_10028B6B0, (uint64_t (*)(uint64_t))type metadata accessor for AAError, (uint64_t)&unk_100218588);
    _BridgedStoredNSError.init(_:userInfo:)(v108, &v107, v74, v73, v75);
    v76 = (id)v108[0];
    _Block_copy(a4);
    sub_1000862B0((uint64_t)v76, 0, 1, v66, (uint64_t)a4);
    _Block_release(a4);
    swift_release(v25);

    swift_release(v106);
    goto LABEL_23;
  }
  v97 = v25;
  static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
  v32 = v31;

  sub_100006F58(v108);
  static String._unconditionallyBridgeFromObjectiveC(_:)(kAACustodianGenerateEvent);
  v34 = v33;
  v35 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v34);
  v36 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v32);
  v37 = objc_msgSend((id)objc_opt_self(AAFAnalyticsEvent), "analyticsEventWithName:altDSID:flowID:", v35, v36, 0);

  v38 = objc_msgSend(v104, "custodianUUID");
  if (!v38)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v105 + 56))(v13, 1, 1, v14);
    goto LABEL_16;
  }
  v39 = v38;
  v40 = v103;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v38);

  v41 = v105;
  v42 = *(void (**)(char *, char *, uint64_t))(v105 + 32);
  v42(v13, v40, v14);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v41 + 56))(v13, 0, 1, v14);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v13, 1, v14) == 1)
  {
LABEL_16:
    v77 = v27;
    sub_100004934((uint64_t)v13, (uint64_t *)&unk_1002904F0);
    v78 = v97;
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v79 = type metadata accessor for Logger(0);
    v80 = sub_100005288(v79, (uint64_t)qword_1002A89D8);
    v81 = Logger.logObject.getter(v80);
    v82 = static os_log_type_t.error.getter(v81);
    if (os_log_type_enabled(v81, v82))
    {
      v83 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v83 = 0;
      _os_log_impl((void *)&_mh_execute_header, v81, v82, "Context missing custodian UUID, cannot generate code for empty UUID", v83, 2u);
      swift_slowDealloc(v83, -1, -1);
    }

    type metadata accessor for AACustodianError(0);
    v85 = v84;
    v107 = -7008;
    v86 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
    v87 = sub_100005150((unint64_t *)&qword_10028B640, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianError, (uint64_t)&unk_100218378);
    _BridgedStoredNSError.init(_:userInfo:)(v108, &v107, v86, v85, v87);
    v88 = (void *)v108[0];
    if (v37)
    {
      v89 = v37;
      v90 = v88;
      isa = Bool._bridgeToObjectiveC()().super.super.isa;
      objc_msgSend(v89, "setObject:forKeyedSubscript:", isa, kAAFDidSucceed);

      swift_errorRetain(v90);
      v92 = (void *)_convertErrorToNSError(_:)(v90);
      objc_msgSend(v89, "populateUnderlyingErrorsStartingWithRootError:", v92);

      v93 = v98;
      v94 = v99;
      v95 = v100;
      (*((void (**)(_QWORD *, uint64_t, id))v99 + 2))(v98, v102 + OBJC_IVAR____TtC13appleaccountd27CustodianRecoveryController__analyticsRTCReporter, v100);
      Dependency.wrappedValue.getter(v108, v95);
      (*((void (**)(_QWORD *, id))v94 + 1))(v93, v95);
      v96 = objc_msgSend((id)objc_opt_self(AAAnalyticsRTCReporter), "reporter");
      objc_msgSend(v96, "sendEvent:", v89);

      sub_100006F58(v108);
    }
    _Block_copy(a4);
    v76 = v88;
    sub_1000862B0((uint64_t)v88, 0, 1, v77, (uint64_t)a4);
    _Block_release(a4);
    swift_release(v78);

    swift_release(v106);
LABEL_23:

    goto LABEL_24;
  }
  v42(v101, v13, v14);
  if (qword_10028ADC8 != -1)
    swift_once(&qword_10028ADC8, sub_100046D2C);
  v99 = v42;
  v100 = v27;
  v43 = type metadata accessor for Logger(0);
  v44 = sub_100005288(v43, (uint64_t)qword_1002A89D8);
  v45 = Logger.logObject.getter(v44);
  v46 = static os_log_type_t.debug.getter(v45);
  if (os_log_type_enabled(v45, v46))
  {
    v47 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v47 = 0;
    _os_log_impl((void *)&_mh_execute_header, v45, v46, "Verifying custodianship to generate Code.", v47, 2u);
    swift_slowDealloc(v47, -1, -1);
  }

  v48 = v102;
  v98 = sub_10000732C((_QWORD *)(v102 + 64), *(_QWORD *)(v102 + 88));
  v49 = swift_unownedRetainStrong(v48);
  v51 = swift_unownedRetain(v49, v50);
  v53 = swift_unownedRetain(v51, v52);
  swift_release(v53);
  v54 = v105;
  v55 = v103;
  v56 = (uint64_t)v101;
  (*(void (**)(char *, char *, uint64_t))(v105 + 16))(v103, v101, v14);
  v57 = *(unsigned __int8 *)(v54 + 80);
  v58 = (v57 + 48) & ~v57;
  v59 = (v15 + v58 + 7) & 0xFFFFFFFFFFFFFFF8;
  v60 = (char *)swift_allocObject(&unk_10026A1F8, v59 + 8, v57 | 7);
  *((_QWORD *)v60 + 2) = v48;
  *((_QWORD *)v60 + 3) = v37;
  v61 = v37;
  v62 = v106;
  *((_QWORD *)v60 + 4) = sub_10014C0B0;
  *((_QWORD *)v60 + 5) = v62;
  v99(&v60[v58], v55, v14);
  v63 = v104;
  *(_QWORD *)&v60[v59] = v104;
  v64 = v61;
  swift_retain(v62);
  v65 = v63;
  sub_1001BE09C(v56, (uint64_t)sub_10014C160, (uint64_t)v60);

  swift_release(v60);
  swift_unownedRelease(v48);
  (*(void (**)(uint64_t, uint64_t))(v105 + 8))(v56, v14);
  swift_release(v97);

  swift_release(v62);
LABEL_24:
  _Block_release(a4);
}

uint64_t sub_1001498F8(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  __n128 v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint64_t v29;
  uint8_t *buf;
  uint64_t v31;
  _QWORD v32[2];
  uint64_t v33[5];
  __int128 v34;
  __int128 v35;

  v1 = a1 + *(int *)(type metadata accessor for CustodianRecoveryData(0) + 44);
  v2 = *(_QWORD *)(v1 + 8);
  if (v2 >> 60 == 15)
    goto LABEL_24;
  v3 = *(_QWORD *)v1;
  sub_10000F450(*(_QWORD *)v1, *(_QWORD *)(v1 + 8));
  sub_10000F450(v3, v2);
  v4 = sub_1000E4BFC(v3, v2);
  if (!v4)
    goto LABEL_23;
  v6 = v4;
  strcpy((char *)v32, "spakeSessionId");
  HIBYTE(v32[1]) = -18;
  AnyHashable.init<A>(_:)(v33, v32, &type metadata for String, &protocol witness table for String, v5);
  if (*(_QWORD *)(v6 + 16) && (v7 = sub_10010AAE0((uint64_t)v33), (v8 & 1) != 0))
  {
    sub_1000244B0(*(_QWORD *)(v6 + 56) + 32 * v7, (uint64_t)&v34);
  }
  else
  {
    v34 = 0u;
    v35 = 0u;
  }
  sub_1000839B4((uint64_t)v33);
  if (!*((_QWORD *)&v35 + 1))
  {
    v14 = v6;
LABEL_20:
    swift_bridgeObjectRelease(v14);
    sub_1000144D8(v3, v2);
    sub_100004934((uint64_t)&v34, (uint64_t *)&unk_10028E7E0);
LABEL_24:
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v19 = type metadata accessor for Logger(0);
    v20 = sub_100005288(v19, (uint64_t)qword_1002A89D8);
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.error.getter(v21);
    if (os_log_type_enabled(v21, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Unable to parse AAData, bad spake message?", v23, 2u);
      swift_slowDealloc(v23, -1, -1);
    }

    return 0;
  }
  if ((swift_dynamicCast(v32, &v34, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) == 0)
  {
    v15 = v6;
LABEL_22:
    swift_bridgeObjectRelease(v15);
LABEL_23:
    sub_1000144D8(v3, v2);
    goto LABEL_24;
  }
  v11 = v32[0];
  v10 = v32[1];
  strcpy((char *)v32, "spakeMessage");
  BYTE5(v32[1]) = 0;
  HIWORD(v32[1]) = -5120;
  AnyHashable.init<A>(_:)(v33, v32, &type metadata for String, &protocol witness table for String, v9);
  if (*(_QWORD *)(v6 + 16) && (v12 = sub_10010AAE0((uint64_t)v33), (v13 & 1) != 0))
  {
    sub_1000244B0(*(_QWORD *)(v6 + 56) + 32 * v12, (uint64_t)&v34);
  }
  else
  {
    v34 = 0u;
    v35 = 0u;
  }
  swift_bridgeObjectRelease(v6);
  sub_1000839B4((uint64_t)v33);
  if (!*((_QWORD *)&v35 + 1))
  {
    v14 = v10;
    goto LABEL_20;
  }
  if ((swift_dynamicCast(v32, &v34, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) == 0)
  {
    v15 = v10;
    goto LABEL_22;
  }
  v16 = v32[0];
  v17 = v32[1];
  Data.init(base64Encoded:options:)(v32[0], v32[1], 0);
  if (v18 >> 60 == 15)
  {
    swift_bridgeObjectRelease(v10);
    v15 = v17;
    goto LABEL_22;
  }
  v31 = v16;
  if (qword_10028ADC8 != -1)
    swift_once(&qword_10028ADC8, sub_100046D2C);
  v25 = type metadata accessor for Logger(0);
  sub_100005288(v25, (uint64_t)qword_1002A89D8);
  swift_bridgeObjectRetain(v17);
  v27 = Logger.logObject.getter(v26);
  v28 = static os_log_type_t.debug.getter(v27);
  if (os_log_type_enabled(v27, v28))
  {
    buf = (uint8_t *)swift_slowAlloc(12, -1);
    v29 = swift_slowAlloc(32, -1);
    v33[0] = v29;
    *(_DWORD *)buf = 136315138;
    swift_bridgeObjectRetain(v17);
    *(_QWORD *)&v34 = sub_1001DEF4C(v31, v17, v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, (char *)&v34 + 8);
    swift_bridgeObjectRelease_n(v17, 3);
    _os_log_impl((void *)&_mh_execute_header, v27, v28, "Received Verifier Message: %s", buf, 0xCu);
    swift_arrayDestroy(v29, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v29, -1, -1);
    swift_slowDealloc(buf, -1, -1);

    sub_1000144D8(v3, v2);
  }
  else
  {
    sub_1000144D8(v3, v2);

    swift_bridgeObjectRelease_n(v17, 2);
  }
  return v11;
}

uint64_t sub_100149DB4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease(a2);
    return sub_10000F494(a3, a4);
  }
  return result;
}

uint64_t sub_100149DEC(uint64_t a1)
{
  return swift_release(a1 & 0x7FFFFFFFFFFFFFFFLL);
}

uint64_t sub_100149DF4()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

void sub_100149E18(uint64_t a1)
{
  uint64_t v1;

  sub_100146F4C(a1, v1);
}

void sub_100149E24(uint64_t a1)
{
  uint64_t v1;

  sub_100147C1C(a1, *(void (**)(uint64_t))(v1 + 16), *(_QWORD *)(v1 + 24));
}

void sub_100149E2C(char a1, void *a2)
{
  uint64_t v2;

  sub_1000449D8(a1, a2, *(void (**)(void *))(v2 + 16));
}

uint64_t sub_100149E34(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  __n128 v25;
  os_log_type_t v26;
  _BOOL4 v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  uint8_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  NSObject *v50;
  os_log_type_t v51;
  uint8_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  NSObject *v56;
  os_log_type_t v57;
  uint8_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  NSObject *v65;
  __n128 v66;
  os_log_type_t v67;
  uint8_t *v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  NSObject *v74;
  os_log_type_t v75;
  uint8_t *v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _BYTE v92[24];
  __int128 v93;
  uint64_t v94;
  _QWORD v95[3];
  uint64_t v96;
  uint64_t v97;
  _BYTE v98[32];
  uint64_t v99;
  uint64_t v100;

  LODWORD(v91) = a3;
  v5 = type metadata accessor for CustodianRecoveryData(0);
  __chkstk_darwin(v5, v6);
  v8 = (char *)&v85 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (uint64_t *)(a1 + OBJC_IVAR____TtC13appleaccountd24CustodianRecoverySession_recoveryData);
  swift_beginAccess(a1 + OBJC_IVAR____TtC13appleaccountd24CustodianRecoverySession_recoveryData, v98, 0, 0);
  sub_100027FE8((uint64_t)v9, (uint64_t)v8, type metadata accessor for CustodianRecoveryData);
  v10 = sub_1001498F8((uint64_t)v8);
  v12 = v11;
  v14 = v13;
  v16 = v15;
  sub_100028388((uint64_t)v8, type metadata accessor for CustodianRecoveryData);
  if (v12)
  {
    v90 = v3;
    v17 = v9[1];
    if (v17)
    {
      v18 = *v9;
      v19 = a1 + OBJC_IVAR____TtC13appleaccountd24CustodianRecoverySession_verifier;
      swift_beginAccess(v19, v92, 0, 0);
      sub_100024A20(v19, (uint64_t)&v93, (uint64_t *)&unk_100291850);
      if (v94)
      {
        sub_10003A190(&v93, (uint64_t)v95);
        v20 = qword_10028ADC8;
        swift_bridgeObjectRetain(v17);
        if (v20 != -1)
          swift_once(&qword_10028ADC8, sub_100046D2C);
        v21 = type metadata accessor for Logger(0);
        v22 = sub_100005288(v21, (uint64_t)qword_1002A89D8);
        sub_10014BDDC(v10, v12, v14, v16);
        swift_bridgeObjectRetain(v17);
        v23 = sub_10014BDDC(v10, v12, v14, v16);
        v88 = v22;
        v24 = Logger.logObject.getter(v23);
        v26 = static os_log_type_t.default.getter(v25);
        v27 = os_log_type_enabled(v24, v26);
        v89 = v16;
        if (v27)
        {
          v28 = swift_slowAlloc(22, -1);
          v86 = swift_slowAlloc(64, -1);
          *(_QWORD *)&v93 = v86;
          *(_DWORD *)v28 = 136315394;
          swift_bridgeObjectRetain(v17);
          v99 = sub_1001DEF4C(v18, v17, (uint64_t *)&v93);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v99, &v100);
          swift_bridgeObjectRelease_n(v17, 3);
          *(_WORD *)(v28 + 12) = 2080;
          swift_bridgeObjectRetain(v12);
          v99 = sub_1001DEF4C(v10, v12, (uint64_t *)&v93);
          v29 = v89;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v99, &v100);
          swift_bridgeObjectRelease(v12);
          sub_100149DB4(v10, v12, v14, v29);
          sub_100149DB4(v10, v12, v14, v29);
          _os_log_impl((void *)&_mh_execute_header, v24, v26, "Verifying message for session with RecoveryID: %s, SpakeID: %s", (uint8_t *)v28, 0x16u);
          v30 = v86;
          swift_arrayDestroy(v86, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v30, -1, -1);
          swift_slowDealloc(v28, -1, -1);
        }
        else
        {
          swift_bridgeObjectRelease_n(v17, 2);
          sub_100149DB4(v10, v12, v14, v16);
          sub_100149DB4(v10, v12, v14, v16);
        }

        v43 = v90;
        v87 = v14;
        if (v91 - 2 < 2)
        {
          v50 = Logger.logObject.getter(v42);
          v51 = static os_log_type_t.debug.getter(v50);
          if (os_log_type_enabled(v50, v51))
          {
            v52 = (uint8_t *)swift_slowAlloc(2, -1);
            *(_WORD *)v52 = 0;
            _os_log_impl((void *)&_mh_execute_header, v50, v51, "verifying message 2", v52, 2u);
            swift_slowDealloc(v52, -1, -1);
          }

          v53 = v96;
          v54 = v97;
          sub_10000732C(v95, v96);
          (*(void (**)(uint64_t, unint64_t, uint64_t, uint64_t))(v54 + 32))(v87, v89, v53, v54);
          v49 = v43;
          if (v43)
          {
LABEL_25:
            v55 = v49;
LABEL_34:
            v73 = swift_errorRetain(v55);
            v74 = Logger.logObject.getter(v73);
            v75 = static os_log_type_t.error.getter(v74);
            if (os_log_type_enabled(v74, v75))
            {
              v91 = v10;
              v76 = (uint8_t *)swift_slowAlloc(12, -1);
              v77 = (uint64_t *)swift_slowAlloc(8, -1);
              *(_DWORD *)v76 = 138412290;
              v78 = _convertErrorToNSError(_:)(v55);
              *(_QWORD *)&v93 = v78;
              v10 = v91;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v93, (char *)&v93 + 8);
              *v77 = v78;
              swift_errorRelease(v55);
              _os_log_impl((void *)&_mh_execute_header, v74, v75, "Failed verifying message with error: %@", v76, 0xCu);
              v79 = sub_1000080B4((uint64_t *)&unk_10028BC20);
              swift_arrayDestroy(v77, 1, v79);
              swift_slowDealloc(v77, -1, -1);
              swift_slowDealloc(v76, -1, -1);
            }
            else
            {
              swift_errorRelease(v55);
            }

            type metadata accessor for AACustodianRecoveryError(0);
            v81 = v80;
            v99 = -9002;
            v82 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
            v83 = sub_100005150(&qword_10028B590, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianRecoveryError, (uint64_t)&unk_100217FF4);
            v84 = _BridgedStoredNSError.init(_:userInfo:)(&v93, &v99, v82, v81, v83);
            swift_willThrow(v84);
            swift_errorRelease(v55);
            goto LABEL_38;
          }
          v62 = v96;
          v63 = v97;
          sub_10000732C(v95, v96);
          v64 = (*(uint64_t (**)(uint64_t, uint64_t))(v63 + 40))(v62, v63);
          if ((v64 & 1) != 0)
          {
LABEL_38:
            sub_100149DB4(v10, v12, v87, v89);
            return sub_100006F58(v95);
          }
          v65 = Logger.logObject.getter(v64);
          v67 = static os_log_type_t.default.getter(v66);
          if (os_log_type_enabled(v65, v67))
          {
            v68 = (uint8_t *)swift_slowAlloc(2, -1);
            *(_WORD *)v68 = 0;
            _os_log_impl((void *)&_mh_execute_header, v65, v67, "SPAKE messages successfully verified", v68, 2u);
            swift_slowDealloc(v68, -1, -1);
          }

          type metadata accessor for AACustodianRecoveryError(0);
          v60 = v69;
          v61 = -9002;
        }
        else
        {
          if (v91 <= 1u)
          {
            v44 = Logger.logObject.getter(v42);
            v45 = static os_log_type_t.debug.getter(v44);
            if (os_log_type_enabled(v44, v45))
            {
              v46 = (uint8_t *)swift_slowAlloc(2, -1);
              *(_WORD *)v46 = 0;
              _os_log_impl((void *)&_mh_execute_header, v44, v45, "verifying message 1", v46, 2u);
              swift_slowDealloc(v46, -1, -1);
            }

            v47 = v96;
            v48 = v97;
            sub_10000732C(v95, v96);
            (*(void (**)(uint64_t, unint64_t, uint64_t, uint64_t))(v48 + 16))(v87, v89, v47, v48);
            v49 = v43;
            if (!v43)
              goto LABEL_38;
            goto LABEL_25;
          }
          v56 = Logger.logObject.getter(v42);
          v57 = static os_log_type_t.error.getter(v56);
          if (os_log_type_enabled(v56, v57))
          {
            v58 = (uint8_t *)swift_slowAlloc(2, -1);
            *(_WORD *)v58 = 0;
            _os_log_impl((void *)&_mh_execute_header, v56, v57, "Wrong step sent to verify message method", v58, 2u);
            swift_slowDealloc(v58, -1, -1);
          }

          type metadata accessor for AACustodianRecoveryError(0);
          v60 = v59;
          v61 = -9004;
        }
        v99 = v61;
        v70 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
        v71 = sub_100005150(&qword_10028B590, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianRecoveryError, (uint64_t)&unk_100217FF4);
        v72 = _BridgedStoredNSError.init(_:userInfo:)(&v93, &v99, v70, v60, v71);
        v55 = v93;
        swift_willThrow(v72);
        goto LABEL_34;
      }
      sub_100149DB4(v10, v12, v14, v16);
      sub_100004934((uint64_t)&v93, (uint64_t *)&unk_100291850);
    }
    else
    {
      sub_100149DB4(v10, v12, v14, v16);
    }
  }
  if (qword_10028ADC8 != -1)
    swift_once(&qword_10028ADC8, sub_100046D2C);
  v31 = type metadata accessor for Logger(0);
  v32 = sub_100005288(v31, (uint64_t)qword_1002A89D8);
  v33 = Logger.logObject.getter(v32);
  v34 = static os_log_type_t.error.getter(v33);
  if (os_log_type_enabled(v33, v34))
  {
    v35 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v35 = 0;
    _os_log_impl((void *)&_mh_execute_header, v33, v34, "Session missing information, Nothing to do here...", v35, 2u);
    swift_slowDealloc(v35, -1, -1);
  }

  type metadata accessor for AACustodianRecoveryError(0);
  v37 = v36;
  *(_QWORD *)&v93 = -9004;
  v38 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
  v39 = sub_100005150(&qword_10028B590, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianRecoveryError, (uint64_t)&unk_100217FF4);
  v40 = _BridgedStoredNSError.init(_:userInfo:)(v95, &v93, v38, v37, v39);
  return swift_willThrow(v40);
}

uint64_t sub_10014A7A8(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  uint64_t v43;
  uint64_t v44;
  Swift::String v45;
  uint64_t v46;
  uint64_t v47;
  NSObject *v48;
  os_log_type_t v49;
  uint64_t v50;
  uint8_t *v51;
  uint64_t v52;
  uint8_t *v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  NSObject *v58;
  os_log_type_t v59;
  uint8_t *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t inited;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  NSObject *v79;
  os_log_type_t v80;
  uint8_t *v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  uint8_t *v91;
  unint64_t v92;
  uint64_t v93;
  _QWORD *countAndFlagsBits;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  __int128 v100;
  uint64_t v101;
  _QWORD v102[3];
  uint64_t v103;
  uint64_t v104;
  _BYTE v105[32];
  uint64_t v106;
  uint64_t v107;

  v4 = v3;
  v7 = type metadata accessor for CustodianRecoveryData(0);
  __chkstk_darwin(v7, v8);
  v10 = (char *)&v91 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a1 + OBJC_IVAR____TtC13appleaccountd24CustodianRecoverySession_recoveryData;
  swift_beginAccess(a1 + OBJC_IVAR____TtC13appleaccountd24CustodianRecoverySession_recoveryData, v105, 0, 0);
  sub_100027FE8(v11, (uint64_t)v10, type metadata accessor for CustodianRecoveryData);
  v97 = sub_1001498F8((uint64_t)v10);
  v13 = v12;
  v15 = v14;
  v17 = v16;
  sub_100028388((uint64_t)v10, type metadata accessor for CustodianRecoveryData);
  if (v13)
  {
    v18 = a1 + OBJC_IVAR____TtC13appleaccountd24CustodianRecoverySession_verifier;
    swift_beginAccess(v18, &v99, 0, 0);
    sub_100024A20(v18, (uint64_t)&v100, (uint64_t *)&unk_100291850);
    if (v101)
    {
      sub_10003A190(&v100, (uint64_t)v102);
      if (a3 - 1 >= 2)
      {
        if (a3)
        {
          if (qword_10028ADC8 != -1)
            swift_once(&qword_10028ADC8, sub_100046D2C);
          v56 = type metadata accessor for Logger(0);
          v57 = sub_100005288(v56, (uint64_t)qword_1002A89D8);
          v58 = Logger.logObject.getter(v57);
          v59 = static os_log_type_t.error.getter(v58);
          if (os_log_type_enabled(v58, v59))
          {
            v60 = (uint8_t *)swift_slowAlloc(2, -1);
            *(_WORD *)v60 = 0;
            _os_log_impl((void *)&_mh_execute_header, v58, v59, "Wrong step sent to get message method", v60, 2u);
            swift_slowDealloc(v60, -1, -1);
          }

          type metadata accessor for AACustodianRecoveryError(0);
          v62 = v61;
          v106 = -9004;
          v63 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
          v64 = sub_100005150(&qword_10028B590, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianRecoveryError, (uint64_t)&unk_100217FF4);
          v65 = _BridgedStoredNSError.init(_:userInfo:)(&v100, &v106, v63, v62, v64);
          v4 = v100;
          swift_willThrow(v65);
LABEL_34:
          if (qword_10028ADC8 != -1)
            swift_once(&qword_10028ADC8, sub_100046D2C);
          v77 = type metadata accessor for Logger(0);
          sub_100005288(v77, (uint64_t)qword_1002A89D8);
          v78 = swift_errorRetain(v4);
          v79 = Logger.logObject.getter(v78);
          v80 = static os_log_type_t.error.getter(v79);
          if (os_log_type_enabled(v79, v80))
          {
            v95 = v13;
            v81 = (uint8_t *)swift_slowAlloc(12, -1);
            countAndFlagsBits = (_QWORD *)swift_slowAlloc(8, -1);
            v96 = v17;
            *(_DWORD *)v81 = 138412290;
            v82 = _convertErrorToNSError(_:)(v4);
            *(_QWORD *)&v100 = v82;
            v83 = v4;
            v17 = v96;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v100, (char *)&v100 + 8);
            v84 = countAndFlagsBits;
            *countAndFlagsBits = v82;
            v13 = v95;
            swift_errorRelease(v83);
            _os_log_impl((void *)&_mh_execute_header, v79, v80, "Encountered error while creating recovery message: %@", v81, 0xCu);
            v85 = sub_1000080B4((uint64_t *)&unk_10028BC20);
            swift_arrayDestroy(v84, 1, v85);
            swift_slowDealloc(v84, -1, -1);
            swift_slowDealloc(v81, -1, -1);
          }
          else
          {
            swift_errorRelease(v4);
            v83 = v4;
          }

          type metadata accessor for AACustodianRecoveryError(0);
          v34 = v86;
          v106 = -9004;
          v87 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
          v88 = sub_100005150(&qword_10028B590, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianRecoveryError, (uint64_t)&unk_100217FF4);
          v89 = _BridgedStoredNSError.init(_:userInfo:)(&v100, &v106, v87, v34, v88);
          swift_willThrow(v89);
          swift_errorRelease(v83);
          sub_100149DB4(v97, v13, v15, v17);
          sub_100006F58(v102);
          return v34;
        }
        if (qword_10028ADC8 != -1)
          swift_once(&qword_10028ADC8, sub_100046D2C);
        v38 = type metadata accessor for Logger(0);
        v39 = sub_100005288(v38, (uint64_t)qword_1002A89D8);
        v40 = Logger.logObject.getter(v39);
        v41 = static os_log_type_t.debug.getter(v40);
        if (os_log_type_enabled(v40, v41))
        {
          v42 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v42 = 0;
          _os_log_impl((void *)&_mh_execute_header, v40, v41, "Generating message 1", v42, 2u);
          swift_slowDealloc(v42, -1, -1);
        }

        v43 = v103;
        v44 = v104;
        sub_10000732C(v102, v103);
        v26 = (*(uint64_t (**)(uint64_t, uint64_t))(v44 + 8))(v43, v44);
      }
      else
      {
        if (qword_10028ADC8 != -1)
          swift_once(&qword_10028ADC8, sub_100046D2C);
        v19 = type metadata accessor for Logger(0);
        v20 = sub_100005288(v19, (uint64_t)qword_1002A89D8);
        v21 = Logger.logObject.getter(v20);
        v22 = static os_log_type_t.debug.getter(v21);
        if (os_log_type_enabled(v21, v22))
        {
          v23 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v23 = 0;
          _os_log_impl((void *)&_mh_execute_header, v21, v22, "Generating message 2", v23, 2u);
          swift_slowDealloc(v23, -1, -1);
        }

        v24 = v103;
        v25 = v104;
        sub_10000732C(v102, v103);
        v26 = (*(uint64_t (**)(uint64_t, uint64_t))(v25 + 24))(v24, v25);
      }
      if (!v3)
      {
        v92 = v27;
        v93 = v26;
        v45 = Data.base64EncodedString(options:)(0);
        if (qword_10028ADC8 != -1)
          swift_once(&qword_10028ADC8, sub_100046D2C);
        countAndFlagsBits = (_QWORD *)v45._countAndFlagsBits;
        v46 = type metadata accessor for Logger(0);
        sub_100005288(v46, (uint64_t)qword_1002A89D8);
        v47 = swift_bridgeObjectRetain_n(v45._object, 2);
        v48 = Logger.logObject.getter(v47);
        v49 = static os_log_type_t.debug.getter(v48);
        if (os_log_type_enabled(v48, v49))
        {
          v50 = swift_slowAlloc(12, -1);
          v96 = v17;
          v51 = (uint8_t *)v50;
          v52 = swift_slowAlloc(32, -1);
          *(_QWORD *)&v100 = v52;
          v95 = v13;
          *(_DWORD *)v51 = 136315138;
          v91 = v51 + 4;
          swift_bridgeObjectRetain(v45._object);
          v106 = sub_1001DEF4C((uint64_t)countAndFlagsBits, (unint64_t)v45._object, (uint64_t *)&v100);
          v13 = v95;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v106, &v107);
          swift_bridgeObjectRelease_n(v45._object, 3);
          _os_log_impl((void *)&_mh_execute_header, v48, v49, "message created with message: %s", v51, 0xCu);
          swift_arrayDestroy(v52, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v52, -1, -1);
          v53 = v51;
          v17 = v96;
          swift_slowDealloc(v53, -1, -1);

          v54 = countAndFlagsBits;
          v55 = v97;
        }
        else
        {

          swift_bridgeObjectRelease_n(v45._object, 2);
          v55 = v97;
          v54 = countAndFlagsBits;
        }
        v66 = sub_1000080B4(&qword_10028BB68);
        inited = swift_initStackObject(v66, &v98);
        *(_OWORD *)(inited + 16) = xmmword_100219130;
        strcpy((char *)(inited + 32), "spakeMessage");
        *(_BYTE *)(inited + 45) = 0;
        *(_WORD *)(inited + 46) = -5120;
        *(_QWORD *)(inited + 48) = v54;
        *(_QWORD *)(inited + 56) = v45._object;
        *(_QWORD *)(inited + 72) = &type metadata for String;
        strcpy((char *)(inited + 80), "spakeSessionId");
        *(_QWORD *)(inited + 120) = &type metadata for String;
        *(_BYTE *)(inited + 95) = -18;
        *(_QWORD *)(inited + 96) = v55;
        *(_QWORD *)(inited + 104) = v13;
        swift_bridgeObjectRetain(v45._object);
        swift_bridgeObjectRetain(v13);
        v68 = sub_100015894(inited);
        v69 = sub_1001CCDFC(v68);
        swift_bridgeObjectRelease(v68);
        v34 = sub_1000C3D78(v69);
        v71 = v70;
        swift_bridgeObjectRelease(v45._object);
        if (v71 >> 60 != 15)
        {
          sub_10000F494(v93, v92);
          sub_100149DB4(v55, v13, v15, v17);
          sub_100006F58(v102);
          return v34;
        }
        type metadata accessor for AACustodianRecoveryError(0);
        v73 = v72;
        v106 = -9004;
        v74 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
        v75 = sub_100005150(&qword_10028B590, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianRecoveryError, (uint64_t)&unk_100217FF4);
        v76 = _BridgedStoredNSError.init(_:userInfo:)(&v100, &v106, v74, v73, v75);
        v4 = v100;
        swift_willThrow(v76);
        sub_10000F494(v93, v92);
      }
      goto LABEL_34;
    }
    sub_100149DB4(v97, v13, v15, v17);
    sub_100004934((uint64_t)&v100, (uint64_t *)&unk_100291850);
  }
  if (qword_10028ADC8 != -1)
    swift_once(&qword_10028ADC8, sub_100046D2C);
  v28 = type metadata accessor for Logger(0);
  v29 = sub_100005288(v28, (uint64_t)qword_1002A89D8);
  v30 = Logger.logObject.getter(v29);
  v31 = static os_log_type_t.error.getter(v30);
  if (os_log_type_enabled(v30, v31))
  {
    v32 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v32 = 0;
    _os_log_impl((void *)&_mh_execute_header, v30, v31, "Session missing information, Nothing to do here...", v32, 2u);
    swift_slowDealloc(v32, -1, -1);
  }

  type metadata accessor for AACustodianRecoveryError(0);
  v34 = v33;
  *(_QWORD *)&v100 = -9004;
  v35 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
  v36 = sub_100005150(&qword_10028B590, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianRecoveryError, (uint64_t)&unk_100217FF4);
  v37 = _BridgedStoredNSError.init(_:userInfo:)(v102, &v100, v35, v34, v36);
  swift_willThrow(v37);
  return v34;
}

void sub_10014B1F0(void *a1, _QWORD *a2, void (*a3)(void *, void *), uint64_t a4)
{
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  _QWORD *v26;
  uint8_t *v27;
  uint8_t *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  NSObject *v36;
  __n128 v37;
  os_log_type_t v38;
  uint8_t *v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  NSObject *v56;
  os_log_type_t v57;
  uint8_t *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  NSObject *v65;
  __n128 v66;
  os_log_type_t v67;
  uint8_t *v68;
  char *v69;
  uint64_t v70;
  _QWORD *v71;
  _QWORD *v72;
  char *v73;
  uint64_t v74;
  _QWORD *v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  id *v81;
  uint64_t v82;
  _QWORD *v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  id v90;
  uint64_t v91;
  id v92;
  _QWORD *v93;
  uint64_t v94;
  id v95;
  uint64_t v96;
  void *v97;
  uint64_t v98;
  __int128 aBlock;
  uint64_t (*v100)(uint64_t, uint64_t, void *);
  void *v101;
  void (*v102)(uint64_t, uint64_t);
  uint64_t v103;
  _QWORD v104[3];

  v8 = (int *)type metadata accessor for CustodianRecoveryData(0);
  __chkstk_darwin(v8, v9);
  v11 = (uint64_t *)((char *)&v93 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = swift_allocObject(&unk_10026A0E0, 32, 7);
  *(_QWORD *)(v12 + 16) = a3;
  *(_QWORD *)(v12 + 24) = a4;
  swift_retain(a4);
  v13 = objc_msgSend(a1, "recoverySessionID");
  if (v13)
  {
    v14 = v13;
    v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
    v17 = v16;

    v18 = objc_msgSend(a1, "recoveryCode");
    if (v18)
    {
      v19 = v18;
      v95 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
      v21 = v20;

      if (qword_10028ADC8 != -1)
        swift_once(&qword_10028ADC8, sub_100046D2C);
      v94 = v12;
      v96 = v21;
      v97 = a1;
      v22 = type metadata accessor for Logger(0);
      v23 = sub_100005288(v22, (uint64_t)qword_1002A89D8);
      v24 = Logger.logObject.getter(v23);
      v25 = static os_log_type_t.debug.getter(v24);
      if (os_log_type_enabled(v24, v25))
      {
        v26 = a2;
        v27 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v27 = 0;
        _os_log_impl((void *)&_mh_execute_header, v24, v25, "Looking for matching sessions to start code verification", v27, 2u);
        v28 = v27;
        a2 = v26;
        swift_slowDealloc(v28, -1, -1);
      }

      v29 = a2;
      v30 = a2[23];
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v30 + 32));
      swift_beginAccess(v30 + 16, v104, 0, 0);
      v31 = *(_QWORD *)(v30 + 16);
      swift_bridgeObjectRetain(v17);
      swift_bridgeObjectRetain(v31);
      v33 = sub_100148400(v32, v15, v17);
      swift_bridgeObjectRelease(v17);
      v34 = sub_10002AD8C(v33);
      swift_bridgeObjectRelease(v33);
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v30 + 32));
      if (v34[2])
      {
        v35 = swift_bridgeObjectRelease(v17);
        v36 = Logger.logObject.getter(v35);
        v38 = static os_log_type_t.default.getter(v37);
        if (os_log_type_enabled(v36, v38))
        {
          v39 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v39 = 0;
          _os_log_impl((void *)&_mh_execute_header, v36, v38, "There are are already sessions with this identifier. Starting verification", v39, 2u);
          swift_slowDealloc(v39, -1, -1);
        }

        v40 = swift_allocObject(&unk_100269DC0, 24, 7);
        v41 = v29;
        swift_weakInit(v40 + 16, v29);
        v42 = (_QWORD *)swift_allocObject(&unk_10026A108, 72, 7);
        v43 = v42;
        v44 = (uint64_t)v95;
        v45 = v96;
        v42[2] = v34;
        v42[3] = v44;
        v42[4] = v45;
        v42[5] = v40;
        v98 = v40;
        v46 = v94;
        v42[6] = sub_10014BFD4;
        v42[7] = v46;
        v47 = v97;
        v42[8] = v97;
        if (v41[2])
        {
          v48 = v34[2];
          if (v48)
          {
            v93 = v42;
            swift_retain_n(v98, 2);
            swift_retain_n(v46, 2);
            v49 = v47;
            swift_bridgeObjectRetain(v34);
            swift_bridgeObjectRetain(v45);
            v50 = 0;
            v51 = v45;
            do
            {
              v52 = &v34[2 * v50++];
              aBlock = *((_OWORD *)v52 + 2);
              v53 = aBlock;
              swift_unknownObjectRetain(aBlock);
              sub_10013EC5C((uint64_t *)&aBlock, v44, v51, v98, (uint64_t)sub_10014BFD4, v46, (uint64_t)v49);
              swift_unknownObjectRelease(v53);
            }
            while (v48 != v50);
            swift_bridgeObjectRelease(v34);
            swift_release(v93);
            v47 = v97;
            v45 = v51;
          }
          else
          {
            swift_retain_n(v98, 2);
            swift_retain_n(v46, 2);
            v92 = v47;
            swift_bridgeObjectRetain(v34);
            swift_bridgeObjectRetain(v45);
            swift_bridgeObjectRelease(v34);
            swift_release(v43);
          }

          swift_release_n(v46, 2);
          swift_release_n(v98, 2);
          swift_bridgeObjectRelease(v45);
          return;
        }
        v81 = (id *)sub_10000732C(v41 + 3, v41[6]);
        v82 = swift_allocObject(&unk_100269DC0, 24, 7);
        swift_weakInit(v82 + 16, v41);
        v83 = v43;
        v84 = (_QWORD *)swift_allocObject(&unk_10026A130, 40, 7);
        v84[2] = v82;
        v84[3] = sub_10014C024;
        v84[4] = v83;
        v85 = v46;
        v95 = *v81;
        v86 = swift_allocObject(&unk_10026A158, 32, 7);
        *(_QWORD *)(v86 + 16) = sub_10014C298;
        *(_QWORD *)(v86 + 24) = v84;
        v102 = sub_10014C2A0;
        v103 = v86;
        *(_QWORD *)&aBlock = _NSConcreteStackBlock;
        *((_QWORD *)&aBlock + 1) = 1107296256;
        v100 = sub_10013DB54;
        v101 = &unk_10026A170;
        v87 = _Block_copy(&aBlock);
        v88 = v103;
        v89 = v98;
        swift_retain_n(v98, 2);
        swift_retain_n(v85, 2);
        v90 = v47;
        swift_bridgeObjectRetain(v34);
        v91 = v96;
        swift_bridgeObjectRetain(v96);
        swift_retain(v82);
        swift_retain(v83);
        swift_retain(v84);
        swift_release(v88);
        objc_msgSend(v95, "fetchCustodianRecoveryCodeConfigurationWithCompletion:", v87);
        _Block_release(v87);

        swift_release_n(v85, 2);
        swift_release_n(v89, 2);
        swift_bridgeObjectRelease(v91);
        swift_bridgeObjectRelease(v34);
        swift_release(v83);
        swift_release(v82);
        v80 = v84;
      }
      else
      {
        v64 = swift_bridgeObjectRelease(v34);
        v65 = Logger.logObject.getter(v64);
        v67 = static os_log_type_t.default.getter(v66);
        if (os_log_type_enabled(v65, v67))
        {
          v68 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v68 = 0;
          _os_log_impl((void *)&_mh_execute_header, v65, v67, "We have a code but have not received yet a Push with Spake Begin, Creating session and waiting for push", v68, 2u);
          swift_slowDealloc(v68, -1, -1);
        }

        v11[2] = 0;
        v11[3] = 0;
        v69 = (char *)v11 + v8[7];
        v70 = type metadata accessor for UUID(0);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v70 - 8) + 56))(v69, 1, 1, v70);
        v71 = (uint64_t *)((char *)v11 + v8[8]);
        *v71 = 0;
        v71[1] = 0;
        v72 = (uint64_t *)((char *)v11 + v8[9]);
        *v72 = 0;
        v72[1] = 0;
        *(_OWORD *)((char *)v11 + v8[10]) = xmmword_10021A7E0;
        *(_OWORD *)((char *)v11 + v8[11]) = xmmword_10021A7E0;
        *(_OWORD *)((char *)v11 + v8[12]) = xmmword_10021A7E0;
        v73 = (char *)v11 + v8[13];
        *(_QWORD *)v73 = 0;
        v73[8] = 1;
        v74 = v8[14];
        *(uint64_t *)((char *)v11 + v8[15]) = 1;
        v75 = (uint64_t *)((char *)v11 + v8[16]);
        *v75 = 0;
        v75[1] = 0;
        v77 = v96;
        v76 = v97;
        v11[4] = (uint64_t)v95;
        v11[5] = v77;
        *v11 = v15;
        v11[1] = v17;
        *((_BYTE *)v11 + v74) = objc_msgSend(v76, "CLIMode");
        v78 = v94;
        v79 = sub_10000D018((uint64_t)v11, (uint64_t)sub_10014BFD4, v94);
        swift_unknownObjectRelease(v79);
        sub_100028388((uint64_t)v11, type metadata accessor for CustodianRecoveryData);
        v80 = (_QWORD *)v78;
      }
      swift_release(v80);
      return;
    }
    swift_bridgeObjectRelease(v17);
  }
  if (qword_10028ADC8 != -1)
    swift_once(&qword_10028ADC8, sub_100046D2C);
  v54 = type metadata accessor for Logger(0);
  v55 = sub_100005288(v54, (uint64_t)qword_1002A89D8);
  v56 = Logger.logObject.getter(v55);
  v57 = static os_log_type_t.error.getter(v56);
  if (os_log_type_enabled(v56, v57))
  {
    v58 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v58 = 0;
    _os_log_impl((void *)&_mh_execute_header, v56, v57, "Recovery request context does not contain the needed data to validate code", v58, 2u);
    swift_slowDealloc(v58, -1, -1);
  }

  type metadata accessor for AACustodianError(0);
  v60 = v59;
  v104[0] = -7008;
  v61 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
  v62 = sub_100005150((unint64_t *)&qword_10028B640, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianError, (uint64_t)&unk_100218378);
  _BridgedStoredNSError.init(_:userInfo:)(&aBlock, v104, v61, v60, v62);
  v63 = (void *)aBlock;
  sub_10007CFF4((void *)aBlock, 1, a3);
  swift_release(v12);

}

uint64_t sub_10014BA58(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000080B4((uint64_t *)&unk_100291850);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_10014BAA4(_QWORD *a1)
{
  return sub_10000D6A0(a1) & 1;
}

uint64_t sub_10014BAC0()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10014BAE4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 24));

  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10014BB18(uint64_t a1)
{
  uint64_t *v1;

  return sub_1001439C0(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_10014BB24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = type metadata accessor for CustodianRecoveryKeys(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release(*(_QWORD *)(v0 + 16));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 24));
  v6 = v0 + v4;
  sub_10000F494(*(_QWORD *)(v0 + v4), *(_QWORD *)(v0 + v4 + 8));
  v7 = *(_QWORD *)(v0 + v4 + 24);
  if (v7 >> 60 != 15)
    sub_10000F494(*(_QWORD *)(v6 + 16), v7);
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + 40));
  v8 = v6 + *(int *)(v1 + 28);
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + *(int *)(v1 + 32) + 8));
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_10014BC1C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for CustodianRecoveryKeys(0) - 8) + 80);
  return sub_1001429A4(a1, v1[2], v1[3], v1[4], (uint64_t)v1 + ((v3 + 40) & ~v3));
}

uint64_t sub_10014BC60()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[3]);
  swift_unknownObjectRelease(v0[4]);
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10014BC94(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t *v3;

  return sub_100142094(a1, a2, a3 & 1, v3[2], v3[3], v3[4], v3[5]);
}

void sub_10014BCA4(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;

  sub_100044CCC(a1, a2, a3, *(void (**)(uint64_t, unint64_t, uint64_t))(v3 + 16));
}

uint64_t sub_10014BCAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 47) & 0xFFFFFFFFFFFFFFF8;
  swift_unownedRelease(*(_QWORD *)(v0 + 16));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 24));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  sub_100006F58((_QWORD *)(v0 + v6));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v7 + 8));
  sub_10000F494(*(_QWORD *)(v0 + v7 + 16), *(_QWORD *)(v0 + v7 + 24));
  return swift_deallocObject(v0, v7 + 32, v5);
}

uint64_t sub_10014BD60(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v3 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_1001409F0(a1, v1[2], v1[3], v1[4], (uint64_t)v1 + v4, (uint64_t *)((char *)v1 + v5), *(uint64_t *)((char *)v1 + ((v5 + 47) & 0xFFFFFFFFFFFFFFF8)), *(uint64_t *)((char *)v1 + ((v5 + 47) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_10014BDDC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRetain(a2);
    return sub_10000F450(a3, a4);
  }
  return result;
}

uint64_t sub_10014BE18()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t *v14;
  unint64_t v15;

  v1 = (int *)type metadata accessor for CustodianRecoveryData(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release(*(_QWORD *)(v0 + 16));
  v6 = v0 + v4;
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + 40));
  v7 = v0 + v4 + v1[7];
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8))
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[8] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[9] + 8));
  v10 = (uint64_t *)(v6 + v1[10]);
  v11 = v10[1];
  if (v11 >> 60 != 15)
    sub_10000F494(*v10, v11);
  v12 = (uint64_t *)(v6 + v1[11]);
  v13 = v12[1];
  if (v13 >> 60 != 15)
    sub_10000F494(*v12, v13);
  v14 = (uint64_t *)(v6 + v1[12]);
  v15 = v14[1];
  if (v15 >> 60 != 15)
    sub_10000F494(*v14, v15);
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[16] + 8));
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

void sub_10014BF78(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for CustodianRecoveryData(0) - 8) + 80);
  sub_1001401E4(a1, *(_QWORD *)(v1 + 16), v1 + ((v3 + 24) & ~v3));
}

void sub_10014BFBC(uint64_t a1, char a2)
{
  uint64_t v2;

  sub_100147AFC(a1, a2 & 1, *(_QWORD *)(v2 + 16), *(void (**)(uint64_t))(v2 + 24));
}

void sub_10014BFD4(void *a1, char a2)
{
  uint64_t v2;

  sub_10007CFF4(a1, a2 & 1, *(void (**)(void *, void *))(v2 + 16));
}

uint64_t sub_10014BFE0()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 40));
  swift_release(*(_QWORD *)(v0 + 56));

  return swift_deallocObject(v0, 72, 7);
}

void sub_10014C024(uint64_t a1)
{
  uint64_t *v1;

  sub_10013E9D8(a1, v1[2], v1[3], v1[4], v1[5], v1[6], v1[7], v1[8]);
}

uint64_t sub_10014C03C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10014C060()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10014C084()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10014C0B0(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;

  return sub_10007C88C(a1, a2, a3 & 1, *(void **)(v3 + 16), *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 24));
}

uint64_t sub_10014C0C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 48) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_unownedRelease(*(_QWORD *)(v0 + 16));

  swift_release(*(_QWORD *)(v0 + 40));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return swift_deallocObject(v0, v6 + 8, v5);
}

uint64_t sub_10014C160(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;

  v3 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  return sub_100144370(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24), *(void (**)(uint64_t, _QWORD, uint64_t))(v1 + 32), *(_QWORD *)(v1 + 40), v1 + v4, *(void **)(v1 + ((*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_10014C1B8()
{
  uint64_t v0;

  swift_unownedRelease(*(_QWORD *)(v0 + 16));

  swift_release(*(_QWORD *)(v0 + 40));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 56));
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_10014C1F4(uint64_t a1)
{
  uint64_t v1;

  return sub_100145054(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24), *(void (**)(_QWORD, _QWORD, _QWORD))(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56));
}

uint64_t sub_10014C208()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 16))
    swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10014C2A8()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x6169646F74737563;
  if (*v0 != 1)
    v1 = 0x6465747065636361;
  if (*v0)
    return v1;
  else
    return 1701869940;
}

uint64_t sub_10014C304@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10014CB8C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10014C328(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10014C9A4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10014C350(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10014C9A4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10014C378()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC13appleaccountd34CustodianInvitationResponseMessage_custodianID;
  v2 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_10014C3C8()
{
  return type metadata accessor for CustodianInvitationResponseMessage(0);
}

uint64_t type metadata accessor for CustodianInvitationResponseMessage(uint64_t a1)
{
  uint64_t result;

  result = qword_100293AE0;
  if (!qword_100293AE0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CustodianInvitationResponseMessage);
  return result;
}

uint64_t sub_10014C40C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = &unk_10021E438;
  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    v4[2] = &unk_10021E450;
    result = swift_updateClassMetadata2(a1, 256, 3, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_10014C48C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;
  char v28;
  char v29;

  v3 = v1;
  v5 = type metadata accessor for UUID(0);
  v24 = *(_QWORD *)(v5 - 8);
  v25 = v5;
  __chkstk_darwin(v5, v6);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1000080B4(&qword_100293BC8);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1[3];
  v15 = a1[4];
  sub_10000732C(a1, v14);
  v16 = sub_10014C9A4();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for CustodianInvitationResponseMessage.CodingKeys, &type metadata for CustodianInvitationResponseMessage.CodingKeys, v16, v14, v15);
  v29 = *(_BYTE *)(v3 + 16);
  v28 = 0;
  v17 = sub_100025CE0();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v29, &v28, v9, &type metadata for MessageType, v17);
  if (v2)
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  v19 = v10;
  v21 = v24;
  v20 = v25;
  (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))(v8, v3 + OBJC_IVAR____TtC13appleaccountd34CustodianInvitationResponseMessage_custodianID, v25);
  v27 = 1;
  v22 = sub_100005190((unint64_t *)&unk_10028DC20, (uint64_t)&protocol conformance descriptor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v8, &v27, v9, v20, v22);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v8, v20);
  v23 = *(unsigned __int8 *)(v3 + OBJC_IVAR____TtC13appleaccountd34CustodianInvitationResponseMessage_accepted);
  v26 = 2;
  KeyedEncodingContainer.encode(_:forKey:)(v23, &v26, v9);
  return (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v13, v9);
}

uint64_t sub_10014C694(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  char v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char v29;
  char v30;
  char v31;
  uint64_t v32;

  v3 = type metadata accessor for UUID(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  v7 = (uint64_t *)((char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v26 = sub_1000080B4(&qword_100293BB8);
  v8 = *(_QWORD *)(v26 - 8);
  __chkstk_darwin(v26, v9);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = a1[3];
  v12 = a1[4];
  v27 = a1;
  sub_10000732C(a1, v13);
  v14 = sub_10014C9A4();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for CustodianInvitationResponseMessage.CodingKeys, &type metadata for CustodianInvitationResponseMessage.CodingKeys, v14, v13, v12);
  if (v1)
  {
    v21 = v28;
    v18 = v27;
    v19 = type metadata accessor for CustodianInvitationResponseMessage(0);
    swift_deallocPartialClassInstance(v21, v19, *(unsigned int *)(*(_QWORD *)v21 + 48), *(unsigned __int16 *)(*(_QWORD *)v21 + 52));
    v24 = v18;
  }
  else
  {
    v15 = v8;
    v25 = v4;
    v31 = 0;
    v16 = sub_100025C9C();
    v17 = v26;
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v32, &type metadata for MessageType, &v31, v26, &type metadata for MessageType, v16);
    v21 = v28;
    *(_BYTE *)(v28 + 16) = v32;
    v30 = 1;
    v22 = sub_100005190((unint64_t *)&unk_10028BBB0, (uint64_t)&protocol conformance descriptor for UUID);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v7, v3, &v30, v17, v3, v22);
    (*(void (**)(uint64_t, _QWORD *, uint64_t))(v25 + 32))(v21 + OBJC_IVAR____TtC13appleaccountd34CustodianInvitationResponseMessage_custodianID, v7, v3);
    v29 = 2;
    v23 = KeyedDecodingContainer.decode(_:forKey:)(&v29, v17);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v11, v26);
    *(_BYTE *)(v21 + OBJC_IVAR____TtC13appleaccountd34CustodianInvitationResponseMessage_accepted) = v23 & 1;
    v24 = v27;
  }
  sub_100006F58(v24);
  return v21;
}

uint64_t sub_10014C92C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v5 = type metadata accessor for CustodianInvitationResponseMessage(0);
  v6 = swift_allocObject(v5, *(unsigned int *)(v5 + 48), *(unsigned __int16 *)(v5 + 52));
  result = sub_10014C694(a1);
  if (!v2)
    *a2 = v6;
  return result;
}

uint64_t sub_10014C984(_QWORD *a1)
{
  return sub_10014C48C(a1);
}

unint64_t sub_10014C9A4()
{
  unint64_t result;

  result = qword_100293BC0;
  if (!qword_100293BC0)
  {
    result = swift_getWitnessTable(&unk_10021E57C, &type metadata for CustodianInvitationResponseMessage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100293BC0);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for CustodianInvitationResponseMessage.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_10014CA34 + 4 * byte_10021E3E5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10014CA68 + 4 * byte_10021E3E0[v4]))();
}

uint64_t sub_10014CA68(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10014CA70(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10014CA78);
  return result;
}

uint64_t sub_10014CA84(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10014CA8CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_10014CA90(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10014CA98(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CustodianInvitationResponseMessage.CodingKeys()
{
  return &type metadata for CustodianInvitationResponseMessage.CodingKeys;
}

unint64_t sub_10014CAB8()
{
  unint64_t result;

  result = qword_100293BD0;
  if (!qword_100293BD0)
  {
    result = swift_getWitnessTable(&unk_10021E554, &type metadata for CustodianInvitationResponseMessage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100293BD0);
  }
  return result;
}

unint64_t sub_10014CB00()
{
  unint64_t result;

  result = qword_100293BD8;
  if (!qword_100293BD8)
  {
    result = swift_getWitnessTable(&unk_10021E4C4, &type metadata for CustodianInvitationResponseMessage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100293BD8);
  }
  return result;
}

unint64_t sub_10014CB48()
{
  unint64_t result;

  result = qword_100293BE0;
  if (!qword_100293BE0)
  {
    result = swift_getWitnessTable(&unk_10021E4EC, &type metadata for CustodianInvitationResponseMessage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100293BE0);
  }
  return result;
}

uint64_t sub_10014CB8C(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  char v8;

  if (a1 == 1701869940 && a2 == 0xE400000000000000)
  {
    v5 = 0xE400000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1701869940, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6169646F74737563 && a2 == 0xEB0000000044496ELL)
  {
    v7 = 0xEB0000000044496ELL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6169646F74737563, 0xEB0000000044496ELL, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x6465747065636361 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease(0xE800000000000000);
    return 2;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6465747065636361, 0xE800000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t *sub_10014CCE8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  void *v13;
  id v14;
  uint64_t v15;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v15);
  }
  else
  {
    v7 = type metadata accessor for URL(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = *(int *)(a3 + 24);
    v10 = (uint64_t *)((char *)a1 + v8);
    v11 = (uint64_t *)((char *)a2 + v8);
    v12 = v11[1];
    *v10 = *v11;
    v10[1] = v12;
    v13 = *(void **)((char *)a2 + v9);
    *(uint64_t *)((char *)a1 + v9) = (uint64_t)v13;
    swift_bridgeObjectRetain(v12);
    v14 = v13;
  }
  return a1;
}

void sub_10014CD88(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(a2 + 20) + 8));

}

uint64_t sub_10014CDDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  void *v12;
  id v13;

  v6 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = *(int *)(a3 + 24);
  v9 = (_QWORD *)(a1 + v7);
  v10 = (_QWORD *)(a2 + v7);
  v11 = v10[1];
  *v9 = *v10;
  v9[1] = v11;
  v12 = *(void **)(a2 + v8);
  *(_QWORD *)(a1 + v8) = v12;
  swift_bridgeObjectRetain(v11);
  v13 = v12;
  return a1;
}

uint64_t sub_10014CE50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  id v15;

  v6 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *v8 = *v9;
  v10 = v9[1];
  v11 = v8[1];
  v8[1] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  v12 = *(int *)(a3 + 24);
  v13 = *(void **)(a1 + v12);
  v14 = *(void **)(a2 + v12);
  *(_QWORD *)(a1 + v12) = v14;
  v15 = v14;

  return a1;
}

uint64_t sub_10014CEE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  return a1;
}

uint64_t sub_10014CF48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;

  v6 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v11 = *v9;
  v10 = v9[1];
  v12 = v8[1];
  *v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease(v12);
  v13 = *(int *)(a3 + 24);
  v14 = *(void **)(a1 + v13);
  *(_QWORD *)(a1 + v13) = *(_QWORD *)(a2 + v13);

  return a1;
}

uint64_t sub_10014CFC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10014CFD4);
}

uint64_t sub_10014CFD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_10014D054(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10014D060);
}

uint64_t sub_10014D060(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for URL(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for CloudShareInfo(uint64_t a1)
{
  uint64_t result;

  result = qword_100293C40;
  if (!qword_100293C40)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CloudShareInfo);
  return result;
}

uint64_t sub_10014D118(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  result = type metadata accessor for URL(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_10021E608;
    v4[2] = &unk_10021E620;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_10014D194(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v4;
  char v5;
  uint64_t v6;

  if ((a2 & 1) != 0)
  {
    v6 = a1;
    swift_errorRetain(a1);
    v4 = sub_1000080B4(&qword_100293CC8);
    return CheckedContinuation.resume(throwing:)(&v6, v4);
  }
  else
  {
    v5 = a1 & 1;
    v2 = sub_1000080B4(&qword_100293CC8);
    return CheckedContinuation.resume(returning:)(&v5, v2);
  }
}

void sub_10014D200(void *a1, char a2, void (*a3)(void *), uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  void **v21;
  id v22;
  id v23;
  id v24;
  Class isa;
  id v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  void **aBlock;
  uint64_t v43;
  void *v44;
  void *v45;
  void *v46;
  uint64_t v47;

  v14 = type metadata accessor for CloudShareInfo(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(_QWORD *)(v15 + 64);
  __chkstk_darwin(v14, v17);
  v18 = (char *)&v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 1) != 0)
  {
    swift_errorRetain(a1);
    a3(a1);
    sub_100066B94(a1, 1);
  }
  else
  {
    v19 = sub_1000080B4(&qword_10028D570);
    v20 = swift_allocObject(v19, 40, 7);
    *(_OWORD *)(v20 + 16) = xmmword_10021A1B0;
    *(_QWORD *)(v20 + 32) = a1;
    aBlock = (void **)v20;
    specialized Array._endMutation()(v20);
    v21 = aBlock;
    v22 = objc_allocWithZone((Class)CKAcceptSharesOperation);
    v41 = a6;
    v23 = v22;
    sub_1000067D4(0, &qword_100293CC0, CKShareMetadata_ptr);
    v40 = a7;
    v24 = a1;
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v21);
    v26 = objc_msgSend(v23, "initWithShareMetadatas:", isa);

    sub_1000EA0D8(a5, (uint64_t)&v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
    v27 = *(unsigned __int8 *)(v15 + 80);
    v28 = (v27 + 32) & ~v27;
    v29 = (v16 + v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    v30 = (v29 + 15) & 0xFFFFFFFFFFFFFFF8;
    v31 = swift_allocObject(&unk_10026A520, v30 + 8, v27 | 7);
    *(_QWORD *)(v31 + 16) = a3;
    *(_QWORD *)(v31 + 24) = a4;
    sub_1000C8698((uint64_t)v18, v31 + v28);
    v32 = v40;
    v33 = v41;
    *(_QWORD *)(v31 + v29) = v41;
    *(_QWORD *)(v31 + v30) = v32;
    v46 = sub_10014FA58;
    v47 = v31;
    aBlock = _NSConcreteStackBlock;
    v43 = 1107296256;
    v44 = sub_10014DC58;
    v45 = &unk_10026A538;
    v34 = _Block_copy(&aBlock);
    v35 = v47;
    swift_retain(a4);
    swift_retain(v33);
    v36 = v32;
    swift_release(v35);
    objc_msgSend(v26, "setPerShareCompletionBlock:", v34);
    _Block_release(v34);
    v37 = swift_allocObject(&unk_10026A570, 32, 7);
    *(_QWORD *)(v37 + 16) = a3;
    *(_QWORD *)(v37 + 24) = a4;
    v46 = sub_10014FAF4;
    v47 = v37;
    aBlock = _NSConcreteStackBlock;
    v43 = 1107296256;
    v44 = sub_1001DC548;
    v45 = &unk_10026A588;
    v38 = _Block_copy(&aBlock);
    v39 = v47;
    swift_retain(a4);
    swift_release(v39);
    objc_msgSend(v26, "setAcceptSharesCompletionBlock:", v38);
    _Block_release(v38);
    objc_msgSend(v36, "addOperation:", v26);

    sub_100066B94(a1, 0);
  }
}

void sub_10014D508(uint64_t a1, void *a2, uint64_t a3, void (*a4)(uint64_t), void (*a5)(uint64_t), uint64_t a6, uint64_t a7, void *a8)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  id v32;
  id v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  void (**v42)(uint64_t);
  id v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  void (*v59)(uint64_t);
  _QWORD v60[3];
  _BYTE v61[8];
  uint64_t v62;
  void *v63;

  v59 = a4;
  v14 = type metadata accessor for CloudShareInfo(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(_QWORD *)(v15 + 64);
  v18 = __chkstk_darwin(v14, v17);
  v19 = (char *)&v58 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18, v20);
  v22 = (char *)&v58 - v21;
  if (a3)
  {
    swift_errorRetain(a3);
    if (qword_10028ADB8 != -1)
      swift_once(&qword_10028ADB8, sub_100046CE4);
    v23 = type metadata accessor for Logger(0);
    sub_100005288(v23, (uint64_t)qword_1002A89A8);
    swift_errorRetain(a3);
    v24 = swift_errorRetain(a3);
    v25 = Logger.logObject.getter(v24);
    v26 = static os_log_type_t.error.getter(v25);
    if (os_log_type_enabled(v25, v26))
    {
      v27 = (uint8_t *)swift_slowAlloc(12, -1);
      v28 = swift_slowAlloc(32, -1);
      v63 = (void *)v28;
      *(_DWORD *)v27 = 136315138;
      swift_getErrorValue(a3, v61, v60);
      v29 = Error.localizedDescription.getter(v60[1], v60[2]);
      v31 = v30;
      v62 = sub_1001DEF4C(v29, v30, (uint64_t *)&v63);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, &v63);
      swift_bridgeObjectRelease(v31);
      swift_errorRelease(a3);
      swift_errorRelease(a3);
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Error accepting share: %s", v27, 0xCu);
      swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v28, -1, -1);
      swift_slowDealloc(v27, -1, -1);
    }
    else
    {
      swift_errorRelease(a3);
      swift_errorRelease(a3);
    }

    swift_errorRetain(a3);
    v59(a3);
    swift_errorRelease(a3);
    swift_errorRelease(a3);
  }
  else if (a2
         && (v32 = objc_msgSend(a2, "recordID"),
             v33 = objc_msgSend(v32, "zoneID"),
             v32,
             v33))
  {
    swift_retain(a7);
    v34 = objc_msgSend(a8, "sharedCloudDatabase");
    v35 = sub_1000080B4(&qword_10028D570);
    v36 = swift_allocObject(v35, 40, 7);
    *(_OWORD *)(v36 + 16) = xmmword_10021A1B0;
    *(_QWORD *)(v36 + 32) = v33;
    v63 = (void *)v36;
    specialized Array._endMutation()(v36);
    v37 = (uint64_t)v63;
    sub_1000EA0D8(a6, (uint64_t)v19);
    v38 = *(unsigned __int8 *)(v15 + 80);
    v39 = (v38 + 16) & ~v38;
    v40 = (v16 + v39 + 7) & 0xFFFFFFFFFFFFFFF8;
    v41 = swift_allocObject(&unk_10026A5C0, v40 + 16, v38 | 7);
    sub_1000C8698((uint64_t)v19, v41 + v39);
    v42 = (void (**)(uint64_t))(v41 + v40);
    *v42 = v59;
    v42[1] = a5;
    v43 = v33;
    swift_retain(a5);
    sub_10009974C(v34, v37, 1u, (uint64_t)sub_10014FBAC, v41);
    swift_release(a7);
    swift_release(v41);

    swift_bridgeObjectRelease(v37);
  }
  else
  {
    if (qword_10028ADB8 != -1)
      swift_once(&qword_10028ADB8, sub_100046CE4);
    v44 = type metadata accessor for Logger(0);
    sub_100005288(v44, (uint64_t)qword_1002A89A8);
    v45 = sub_1000EA0D8(a6, (uint64_t)v22);
    v46 = Logger.logObject.getter(v45);
    v47 = static os_log_type_t.error.getter(v46);
    if (os_log_type_enabled(v46, v47))
    {
      v48 = (uint8_t *)swift_slowAlloc(12, -1);
      v49 = swift_slowAlloc(32, -1);
      v63 = (void *)v49;
      *(_DWORD *)v48 = 136315138;
      v50 = URL.absoluteString.getter();
      v52 = v51;
      v62 = sub_1001DEF4C(v50, v51, (uint64_t *)&v63);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, &v63);
      swift_bridgeObjectRelease(v52);
      sub_1000EA11C((uint64_t)v22);
      _os_log_impl((void *)&_mh_execute_header, v46, v47, "Could not find zoneID in share from: %s", v48, 0xCu);
      swift_arrayDestroy(v49, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v49, -1, -1);
      swift_slowDealloc(v48, -1, -1);
    }
    else
    {
      sub_1000EA11C((uint64_t)v22);
    }

    type metadata accessor for AACustodianError(0);
    v54 = v53;
    v62 = -7009;
    v55 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
    v56 = sub_100005150((unint64_t *)&qword_10028B640, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianError, (uint64_t)&unk_100218378);
    _BridgedStoredNSError.init(_:userInfo:)(&v63, &v62, v55, v54, v56);
    v57 = v63;
    v59((uint64_t)v63);

  }
}

uint64_t sub_10014DA74(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v19;
  uint64_t v20;

  v5 = type metadata accessor for CloudShareInfo(0);
  __chkstk_darwin(v5, v6);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10028ADB8 != -1)
    swift_once(&qword_10028ADB8, sub_100046CE4);
  v9 = type metadata accessor for Logger(0);
  sub_100005288(v9, (uint64_t)qword_1002A89A8);
  v10 = sub_1000EA0D8(a2, (uint64_t)v8);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.debug.getter(v11);
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc(12, -1);
    v14 = swift_slowAlloc(32, -1);
    v20 = v14;
    *(_DWORD *)v13 = 136315138;
    v15 = URL.absoluteString.getter();
    v17 = v16;
    v19 = sub_1001DEF4C(v15, v16, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20);
    swift_bridgeObjectRelease(v17);
    sub_1000EA11C((uint64_t)v8);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Successfully accepted share from: %s", v13, 0xCu);
    swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1, -1);
    swift_slowDealloc(v13, -1, -1);
  }
  else
  {
    sub_1000EA11C((uint64_t)v8);
  }

  return a3(0);
}

void sub_10014DC58(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v7;
  void (*v8)(id, void *, void *);
  id v9;
  id v10;
  id v11;

  v8 = *(void (**)(id, void *, void *))(a1 + 32);
  v7 = *(_QWORD *)(a1 + 40);
  swift_retain(v7);
  v11 = a2;
  v9 = a3;
  v10 = a4;
  v8(v11, a3, a4);
  swift_release(v7);

}

void sub_10014DCE0(uint64_t a1, void (*a2)(void *))
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[2];
  _BYTE v22[8];

  if (a1)
  {
    swift_getErrorValue(a1, v22, v21);
    v3 = sub_10015D168(v21[1]);
    if (v3)
    {
      v4 = (void *)v3;
      v19 = v3;
      type metadata accessor for CKError(0);
      v6 = v5;
      v7 = sub_100005150((unint64_t *)&qword_10028B678, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_100218478);
      _BridgedStoredNSError.code.getter(&v20, v6, v7);
      if (v20 == 9 || (v19 = (uint64_t)v4, _BridgedStoredNSError.code.getter(&v20, v6, v7), v20 == 1))
      {
        if (qword_10028ADB8 != -1)
          swift_once(&qword_10028ADB8, sub_100046CE4);
        v8 = type metadata accessor for Logger(0);
        sub_100005288(v8, (uint64_t)qword_1002A89A8);
        v9 = v4;
        v10 = Logger.logObject.getter(v9);
        v11 = static os_log_type_t.error.getter(v10);
        if (os_log_type_enabled(v10, v11))
        {
          v12 = (uint8_t *)swift_slowAlloc(12, -1);
          v13 = swift_slowAlloc(32, -1);
          v20 = v13;
          *(_DWORD *)v12 = 136315138;
          v14 = sub_100005150(&qword_10028B458, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_100218134);
          v15 = Error.localizedDescription.getter(v6, v14);
          v17 = v16;
          v19 = sub_1001DEF4C(v15, v16, &v20);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20);

          swift_bridgeObjectRelease(v17);
          _os_log_impl((void *)&_mh_execute_header, v10, v11, "Error in acceptShares: %s", v12, 0xCu);
          swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v13, -1, -1);
          swift_slowDealloc(v12, -1, -1);

        }
        else
        {

        }
        v18 = v9;
        a2(v4);

      }
    }
  }
}

id sub_10014DF60(void *a1, uint64_t a2)
{
  void *v3;
  _BYTE v6[24];

  swift_beginAccess(a2 + 16, v6, 1, 0);
  v3 = *(void **)(a2 + 16);
  *(_QWORD *)(a2 + 16) = a1;

  return a1;
}

void sub_10014DFB0(uint64_t a1, uint64_t a2, unint64_t a3, void (*a4)(uint64_t, uint64_t), uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  void *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  _QWORD v34[3];
  _BYTE v35[8];
  uint64_t v36;
  void *v37;
  uint64_t v38[3];

  if (a1)
  {
    swift_errorRetain(a1);
    if (qword_10028ADB8 != -1)
      swift_once(&qword_10028ADB8, sub_100046CE4);
    v10 = type metadata accessor for Logger(0);
    sub_100005288(v10, (uint64_t)qword_1002A89A8);
    swift_errorRetain(a1);
    swift_bridgeObjectRetain(a3);
    swift_errorRetain(a1);
    swift_bridgeObjectRetain(a3);
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.error.getter(v12);
    if (os_log_type_enabled(v12, v13))
    {
      v14 = swift_slowAlloc(22, -1);
      v15 = swift_slowAlloc(64, -1);
      v38[0] = v15;
      *(_DWORD *)v14 = 136315394;
      swift_bridgeObjectRetain(a3);
      v37 = (void *)sub_1001DEF4C(a2, a3, v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, v38);
      swift_bridgeObjectRelease_n(a3, 3);
      *(_WORD *)(v14 + 12) = 2080;
      swift_getErrorValue(a1, v35, v34);
      v16 = Error.localizedDescription.getter(v34[1], v34[2]);
      v18 = v17;
      v37 = (void *)sub_1001DEF4C(v16, v17, v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, v38);
      swift_bridgeObjectRelease(v18);
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Failed fetching cloudKit participant (%s) with error: %s", (uint8_t *)v14, 0x16u);
      swift_arrayDestroy(v15, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v15, -1, -1);
      swift_slowDealloc(v14, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n(a3, 2);
      swift_errorRelease(a1);
      swift_errorRelease(a1);
    }

    swift_errorRetain(a1);
    a4(a1, 1);
    swift_errorRelease(a1);
    swift_errorRelease(a1);
  }
  else
  {
    swift_beginAccess(a6 + 16, v38, 0, 0);
    v20 = *(void **)(a6 + 16);
    if (v20)
    {
      v21 = v20;
      v22 = (uint64_t)v20;
      v23 = 0;
    }
    else
    {
      if (qword_10028ADB8 != -1)
        swift_once(&qword_10028ADB8, sub_100046CE4);
      v24 = type metadata accessor for Logger(0);
      sub_100005288(v24, (uint64_t)qword_1002A89A8);
      v25 = swift_bridgeObjectRetain_n(a3, 2);
      v26 = Logger.logObject.getter(v25);
      v27 = static os_log_type_t.error.getter(v26);
      if (os_log_type_enabled(v26, v27))
      {
        v28 = (uint8_t *)swift_slowAlloc(12, -1);
        v29 = swift_slowAlloc(32, -1);
        v37 = (void *)v29;
        *(_DWORD *)v28 = 136315138;
        swift_bridgeObjectRetain(a3);
        v36 = sub_1001DEF4C(a2, a3, (uint64_t *)&v37);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37);
        swift_bridgeObjectRelease_n(a3, 3);
        _os_log_impl((void *)&_mh_execute_header, v26, v27, "Did not find cloudKit participant with handle: %s", v28, 0xCu);
        swift_arrayDestroy(v29, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v29, -1, -1);
        swift_slowDealloc(v28, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(a3, 2);
      }
      type metadata accessor for AACustodianError(0);
      v31 = v30;
      v36 = -7006;
      v32 = sub_100005014((uint64_t)&_swiftEmptyArrayStorage);
      v33 = sub_100005150((unint64_t *)&qword_10028B640, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianError, (uint64_t)&unk_100218378);
      _BridgedStoredNSError.init(_:userInfo:)(&v37, &v36, v32, v31, v33);
      v21 = v37;
      v22 = (uint64_t)v37;
      v23 = 1;
    }
    a4(v22, v23);

  }
}

void sub_10014E418(uint64_t a1, void *a2, uint64_t a3, void (*a4)(uint64_t, uint64_t))
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  void *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  void *v36;
  uint8_t *v37;
  id v38;
  _QWORD v39[3];
  _BYTE v40[8];
  uint64_t v41;
  void *v42;

  v8 = type metadata accessor for URL(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a3)
  {
    swift_errorRetain(a3);
    if (qword_10028ADB8 != -1)
      swift_once(&qword_10028ADB8, sub_100046CE4);
    v13 = type metadata accessor for Logger(0);
    sub_100005288(v13, (uint64_t)qword_1002A89A8);
    swift_errorRetain(a3);
    v14 = swift_errorRetain(a3);
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.error.getter(v15);
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc(12, -1);
      v18 = swift_slowAlloc(32, -1);
      v42 = (void *)v18;
      *(_DWORD *)v17 = 136315138;
      swift_getErrorValue(a3, v40, v39);
      v19 = Error.localizedDescription.getter(v39[1], v39[2]);
      v21 = v20;
      v41 = sub_1001DEF4C(v19, v20, (uint64_t *)&v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42);
      swift_bridgeObjectRelease(v21);
      swift_errorRelease(a3);
      swift_errorRelease(a3);
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Error fetching share metadata: %s", v17, 0xCu);
      swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v18, -1, -1);
      swift_slowDealloc(v17, -1, -1);
    }
    else
    {
      swift_errorRelease(a3);
      swift_errorRelease(a3);
    }

    swift_errorRetain(a3);
    a4(a3, 1);
    swift_errorRelease(a3);
    swift_errorRelease(a3);
  }
  else if (a2)
  {
    v38 = a2;
    a4((uint64_t)a2, 0);

  }
  else
  {
    if (qword_10028ADB8 != -1)
      swift_once(&qword_10028ADB8, sub_100046CE4);
    v22 = type metadata accessor for Logger(0);
    sub_100005288(v22, (uint64_t)qword_1002A89A8);
    v23 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, a1, v8);
    v24 = Logger.logObject.getter(v23);
    v25 = static os_log_type_t.error.getter(v24);
    if (os_log_type_enabled(v24, v25))
    {
      v26 = (uint8_t *)swift_slowAlloc(12, -1);
      v27 = (void *)swift_slowAlloc(32, -1);
      v38 = v27;
      v42 = v27;
      *(_DWORD *)v26 = 136315138;
      v37 = v26 + 4;
      v28 = URL.absoluteString.getter(v27);
      v30 = v29;
      v41 = sub_1001DEF4C(v28, v29, (uint64_t *)&v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42);
      swift_bridgeObjectRelease(v30);
      (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "No metadata was returned from: %s", v26, 0xCu);
      v31 = v38;
      swift_arrayDestroy(v38, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v31, -1, -1);
      swift_slowDealloc(v26, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    }

    type metadata accessor for AACustodianError(0);
    v33 = v32;
    v41 = -7009;
    v34 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
    v35 = sub_100005150((unint64_t *)&qword_10028B640, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianError, (uint64_t)&unk_100218378);
    _BridgedStoredNSError.init(_:userInfo:)(&v42, &v41, v34, v33, v35);
    v36 = v42;
    a4((uint64_t)v42, 1);

  }
}

uint64_t sub_10014E884(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, void *, void *);
  id v14;
  id v15;
  uint64_t v17;

  v8 = type metadata accessor for URL(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin();
  v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(void (**)(char *, void *, void *))(a1 + 32);
  v12 = *(_QWORD *)(a1 + 40);
  static URL._unconditionallyBridgeFromObjectiveC(_:)(a2);
  swift_retain(v12);
  v14 = a3;
  v15 = a4;
  v13(v11, a3, a4);

  swift_release(v12);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t sub_10014E964()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x6E6F436572616873;
  if (*v0 != 1)
    v1 = 0x6B6F546572616873;
  if (*v0)
    return v1;
  else
    return 0x6C72556572616873;
}

uint64_t sub_10014E9D8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10014FEB4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10014E9FC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10014FA08();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10014EA24(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10014FA08();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10014EA4C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  id v31;
  void *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char v45;

  v38 = a2;
  v39 = type metadata accessor for URL(0);
  v3 = *(_QWORD *)(v39 - 8);
  __chkstk_darwin(v39, v4);
  v41 = (uint64_t *)((char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v40 = sub_1000080B4(&qword_100293C88);
  v6 = *(_QWORD *)(v40 - 8);
  __chkstk_darwin(v40, v7);
  v9 = (uint64_t *)((char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = type metadata accessor for CloudShareInfo(0);
  __chkstk_darwin(v10, v11);
  v13 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = a1[3];
  v14 = a1[4];
  sub_10000732C(a1, v15);
  v16 = sub_10014FA08();
  v17 = v42;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for CloudShareInfo.CodingKeys, &type metadata for CloudShareInfo.CodingKeys, v16, v15, v14);
  if (v17)
    return sub_100006F58(a1);
  v42 = v3;
  v18 = (uint64_t)v13;
  LOBYTE(v43) = 0;
  v19 = sub_100005150(&qword_100293C98, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
  v20 = v40;
  v21 = v39;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v41, v39, &v43, v40, v39, v19);
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(v42 + 32))(v18, v41, v21);
  LOBYTE(v43) = 1;
  v23 = KeyedDecodingContainer.decode(_:forKey:)(&v43, v20);
  v24 = (uint64_t *)(v18 + *(int *)(v10 + 20));
  *v24 = v23;
  v24[1] = v25;
  v45 = 2;
  v26 = sub_10000F40C();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&type metadata for Data, &v45, v20, &type metadata for Data, v26);
  v41 = v9;
  v37 = v44;
  if (v44 >> 60 == 15)
  {
    v27 = 0;
    v28 = v38;
  }
  else
  {
    v29 = v43;
    v30 = objc_allocWithZone((Class)NSKeyedUnarchiver);
    sub_100014534(v29, v37);
    v36 = v29;
    v31 = sub_1000FACFC();
    v28 = v38;
    v32 = v31;
    objc_msgSend(v31, "setRequiresSecureCoding:", 1);
    objc_msgSend(v32, "_enableStrictSecureDecodingMode");
    v27 = objc_msgSend(objc_allocWithZone((Class)CKDeviceToDeviceShareInvitationToken), "initWithCoder:", v32);

    v34 = v36;
    v33 = v37;
    sub_1000144D8(v36, v37);
    sub_1000144D8(v34, v33);
  }
  (*(void (**)(_QWORD *, uint64_t))(v6 + 8))(v41, v40);
  *(_QWORD *)(v18 + *(int *)(v10 + 24)) = v27;
  sub_1000EA0D8(v18, v28);
  sub_100006F58(a1);
  return sub_1000EA11C(v18);
}

uint64_t sub_10014EE08(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  void *v20;
  id v21;
  id v22;
  id v23;
  id v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD v29[2];
  char v30;

  v3 = v1;
  v5 = sub_1000080B4(&qword_100293CA0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  v9 = (char *)v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a1[3];
  v11 = a1[4];
  sub_10000732C(a1, v10);
  v12 = sub_10014FA08();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for CloudShareInfo.CodingKeys, &type metadata for CloudShareInfo.CodingKeys, v12, v10, v11);
  LOBYTE(v29[0]) = 0;
  v13 = type metadata accessor for URL(0);
  v14 = sub_100005150(&qword_100293CA8, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v3, v29, v5, v13, v14);
  if (v2)
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  v15 = type metadata accessor for CloudShareInfo(0);
  v16 = (uint64_t *)(v3 + *(int *)(v15 + 20));
  v17 = *v16;
  v18 = v16[1];
  LOBYTE(v29[0]) = 1;
  KeyedEncodingContainer.encode(_:forKey:)(v17, v18, v29, v5);
  v20 = *(void **)(v3 + *(int *)(v15 + 24));
  if (!v20)
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  v21 = objc_allocWithZone((Class)NSKeyedArchiver);
  v22 = v20;
  v23 = objc_msgSend(v21, "initRequiringSecureCoding:", 1);
  objc_msgSend(v22, "encodeWithCoder:", v23);
  v24 = objc_msgSend(v23, "encodedData");
  v25 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v24);
  v27 = v26;

  v29[0] = v25;
  v29[1] = v27;
  v30 = 2;
  v28 = sub_10000F4D8();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v29, &v30, v5, &type metadata for Data, v28);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);

  return sub_10000F494(v25, v27);
}

uint64_t sub_10014F048@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10014EA4C(a1, a2);
}

uint64_t sub_10014F05C(_QWORD *a1)
{
  return sub_10014EE08(a1);
}

void sub_10014F070(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  unint64_t v26;
  id v27;
  Class isa;
  NSDictionary v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  _QWORD aBlock[5];
  uint64_t v44;

  v8 = *(void **)(a2 + *(int *)(type metadata accessor for CloudShareInfo(0) + 24));
  if (v8)
  {
    v9 = sub_1000080B4(&qword_100292DE8);
    v10 = type metadata accessor for URL(0);
    v41 = a3;
    v42 = a1;
    v11 = *(_QWORD *)(v10 - 8);
    v12 = *(unsigned __int8 *)(v11 + 80);
    v13 = (v12 + 32) & ~v12;
    v14 = swift_allocObject(v9, v13 + *(_QWORD *)(v11 + 72), v12 | 7);
    *(_OWORD *)(v14 + 16) = xmmword_100218E30;
    v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16);
    v15(v14 + v13, a2, v10);
    v16 = sub_1000080B4(&qword_100293CB0);
    v17 = sub_1000080B4(&qword_10028C128);
    v18 = *(_QWORD *)(v17 - 8);
    v19 = *(_QWORD *)(v18 + 72);
    v20 = *(unsigned __int8 *)(v18 + 80);
    v21 = (v20 + 32) & ~v20;
    v22 = swift_allocObject(v16, v21 + v19, v20 | 7);
    *(_OWORD *)(v22 + 16) = xmmword_100218E30;
    v23 = v22 + v21;
    v24 = *(int *)(v17 + 48);
    v15(v23, a2, v10);
    *(_QWORD *)(v23 + v24) = v8;
    v25 = v8;
    v26 = sub_100015AEC(v22);
    v27 = objc_allocWithZone((Class)CKFetchShareMetadataOperation);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v14);
    sub_1000067D4(0, &qword_100293CB8, CKDeviceToDeviceShareInvitationToken_ptr);
    sub_100005150(&qword_1002922E8, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    v29.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v26);
    v30 = objc_msgSend(v27, "initWithShareURLs:invitationTokensByShareURL:", isa, v29.super.isa);

    a1 = v42;
    a3 = v41;
  }
  else
  {
    v31 = sub_1000080B4(&qword_100292DE8);
    v32 = type metadata accessor for URL(0);
    v33 = *(_QWORD *)(v32 - 8);
    v34 = *(unsigned __int8 *)(v33 + 80);
    v35 = (v34 + 32) & ~v34;
    v36 = swift_allocObject(v31, v35 + *(_QWORD *)(v33 + 72), v34 | 7);
    *(_OWORD *)(v36 + 16) = xmmword_100218E30;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 16))(v36 + v35, a2, v32);
    v37 = objc_allocWithZone((Class)CKFetchShareMetadataOperation);
    v29.super.isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v36);
    v30 = objc_msgSend(v37, "initWithShareURLs:", v29.super.isa);
  }

  objc_msgSend(v30, "setShouldFetchRootRecord:", 1);
  v38 = swift_allocObject(&unk_10026A4D0, 32, 7);
  *(_QWORD *)(v38 + 16) = a3;
  *(_QWORD *)(v38 + 24) = a4;
  aBlock[4] = sub_10014FA4C;
  v44 = v38;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10014E884;
  aBlock[3] = &unk_10026A4E8;
  v39 = _Block_copy(aBlock);
  v40 = v44;
  swift_retain(a4);
  swift_release(v40);
  objc_msgSend(v30, "setPerShareMetadataBlock:", v39);
  _Block_release(v39);
  objc_msgSend(a1, "addOperation:", v30);

}

void sub_10014F3D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  id v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;

  v38 = a1;
  v13 = type metadata accessor for CloudShareInfo(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(_QWORD *)(v14 + 64);
  __chkstk_darwin(v13, v16);
  v17 = (char *)&v37 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = (_QWORD *)swift_allocObject(&unk_10026A5E8, 48, 7);
  v18[2] = a4;
  v18[3] = a5;
  v18[4] = a6;
  v18[5] = a7;
  if (a2 == 2)
  {
    v21 = qword_10028AF20;
    swift_retain(a4);
    swift_retain(a5);
    swift_bridgeObjectRetain(a7);
    if (v21 != -1)
      swift_once(&qword_10028AF20, sub_1001FDDFC);
    v20 = &qword_1002A8CA0;
  }
  else
  {
    if (a2 != 1)
    {
      type metadata accessor for AACustodianError(0);
      v34 = v33;
      v39 = -7008;
      swift_retain(a4);
      swift_retain(a5);
      swift_bridgeObjectRetain(a7);
      v35 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
      v36 = sub_100005150((unint64_t *)&qword_10028B640, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianError, (uint64_t)&unk_100218378);
      _BridgedStoredNSError.init(_:userInfo:)(&v40, &v39, v35, v34, v36);
      v31 = v40;
      sub_100026478((uint64_t)v40, a4, a5, a6, a7);
      v32 = v18;
      goto LABEL_13;
    }
    v19 = qword_10028AF10;
    swift_retain(a4);
    swift_retain(a5);
    swift_bridgeObjectRetain(a7);
    if (v19 != -1)
      swift_once(&qword_10028AF10, sub_1001FDD8C);
    v20 = &qword_1002A8C80;
  }
  v23 = *v20;
  v22 = v20[1];
  swift_bridgeObjectRetain(v22);
  if (qword_10028AF00 != -1)
    swift_once(&qword_10028AF00, sub_1001FD458);
  v24 = sub_1001FD4C0(v23, v22);
  swift_bridgeObjectRelease(v22);
  v25 = v38;
  sub_1000EA0D8(v38, (uint64_t)&v37 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v26 = *(unsigned __int8 *)(v14 + 80);
  v27 = (v26 + 32) & ~v26;
  v28 = (v15 + v27 + 7) & 0xFFFFFFFFFFFFFFF8;
  v29 = (v28 + 15) & 0xFFFFFFFFFFFFFFF8;
  v30 = swift_allocObject(&unk_10026A610, v29 + 8, v26 | 7);
  *(_QWORD *)(v30 + 16) = sub_10014FC34;
  *(_QWORD *)(v30 + 24) = v18;
  sub_1000C8698((uint64_t)v17, v30 + v27);
  *(_QWORD *)(v30 + v28) = a3;
  *(_QWORD *)(v30 + v29) = v24;
  swift_retain(v18);
  swift_retain(a3);
  v31 = v24;
  sub_10014F070(v31, v25, (uint64_t)sub_1000670D8, v30);
  swift_release(v18);
  v32 = (_QWORD *)v30;
LABEL_13:
  swift_release(v32);

}

uint64_t sub_10014F6BC(void **a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  unint64_t v9;
  char v10;
  id v11;
  NSString v12;
  char **v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  id v18;
  Class isa;
  id v20;
  uint64_t v21;
  void *v22;
  _QWORD *v23;
  _QWORD *v24;
  void *v25;
  _QWORD *v26;
  void **aBlock;
  uint64_t v30;
  void (*v31)(uint64_t, void *);
  void *v32;
  void *v33;
  _QWORD *v34;
  _QWORD v35[2];

  aBlock = a1;
  v30 = a2;
  v35[0] = 64;
  v35[1] = 0xE100000000000000;
  v9 = sub_10006B00C();
  v10 = StringProtocol.contains<A>(_:)(v35, &type metadata for String, &type metadata for String, v9, v9);
  v11 = objc_allocWithZone((Class)CKUserIdentityLookupInfo);
  swift_bridgeObjectRetain(a2);
  v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  v13 = &selRef_initWithEmailAddress_;
  if ((v10 & 1) == 0)
    v13 = &selRef_initWithPhoneNumber_;
  v14 = objc_msgSend(v11, *v13, v12);

  v15 = sub_1000080B4(&qword_10028D570);
  v16 = swift_allocObject(v15, 40, 7);
  *(_OWORD *)(v16 + 16) = xmmword_10021A1B0;
  *(_QWORD *)(v16 + 32) = v14;
  aBlock = (void **)v16;
  specialized Array._endMutation()(v16);
  v17 = objc_allocWithZone((Class)CKFetchShareParticipantsOperation);
  sub_1000067D4(0, &qword_100293C80, CKUserIdentityLookupInfo_ptr);
  v18 = v14;
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(aBlock);
  v20 = objc_msgSend(v17, "initWithUserIdentityLookupInfos:", isa);

  v21 = swift_allocObject(&unk_10026A430, 24, 7);
  *(_QWORD *)(v21 + 16) = 0;
  v33 = sub_10014F9BC;
  v34 = (_QWORD *)v21;
  aBlock = _NSConcreteStackBlock;
  v30 = 1107296256;
  v31 = sub_10009ADD4;
  v32 = &unk_10026A448;
  v22 = _Block_copy(&aBlock);
  v23 = v34;
  swift_retain(v21);
  swift_release(v23);
  objc_msgSend(v20, "setShareParticipantFetchedBlock:", v22);
  _Block_release(v22);
  v24 = (_QWORD *)swift_allocObject(&unk_10026A480, 56, 7);
  v24[2] = a1;
  v24[3] = a2;
  v24[4] = a4;
  v24[5] = a5;
  v24[6] = v21;
  v33 = sub_10014F9F8;
  v34 = v24;
  aBlock = _NSConcreteStackBlock;
  v30 = 1107296256;
  v31 = sub_1001DC548;
  v32 = &unk_10026A498;
  v25 = _Block_copy(&aBlock);
  v26 = v34;
  swift_bridgeObjectRetain(a2);
  swift_retain(v21);
  swift_retain(a5);
  swift_release(v26);
  objc_msgSend(v20, "setFetchShareParticipantsCompletionBlock:", v25);
  _Block_release(v25);
  objc_msgSend(a3, "addOperation:", v20);

  return swift_release(v21);
}

uint64_t sub_10014F998()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

id sub_10014F9BC(void *a1)
{
  uint64_t v1;

  return sub_10014DF60(a1, v1);
}

uint64_t sub_10014F9C4()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[3]);
  swift_release(v0[5]);
  swift_release(v0[6]);
  return swift_deallocObject(v0, 56, 7);
}

void sub_10014F9F8(uint64_t a1)
{
  uint64_t v1;

  sub_10014DFB0(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(void (**)(uint64_t, uint64_t))(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48));
}

unint64_t sub_10014FA08()
{
  unint64_t result;

  result = qword_100293C90;
  if (!qword_100293C90)
  {
    result = swift_getWitnessTable(&unk_10021E77C, &type metadata for CloudShareInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100293C90);
  }
  return result;
}

void sub_10014FA4C(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v3;

  sub_10014E418(a1, a2, a3, *(void (**)(uint64_t, uint64_t))(v3 + 16));
}

void sub_10014FA58(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v7 = *(_QWORD *)(type metadata accessor for CloudShareInfo(0) - 8);
  v8 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = (*(_QWORD *)(v7 + 64) + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_10014D508(a1, a2, a3, *(void (**)(uint64_t))(v3 + 16), *(void (**)(uint64_t))(v3 + 24), v3 + v8, *(_QWORD *)(v3 + v9), *(void **)(v3 + ((v9 + 15) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_10014FAD0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_10014FAF4(uint64_t a1)
{
  uint64_t v1;

  sub_10014DCE0(a1, *(void (**)(void *))(v1 + 16));
}

uint64_t sub_10014FAFC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = type metadata accessor for CloudShareInfo(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = v0 + v4;
  v8 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + *(int *)(v1 + 20) + 8));

  swift_release(*(_QWORD *)(v0 + v6 + 8));
  return swift_deallocObject(v0, v6 + 16, v5);
}

uint64_t sub_10014FBAC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;

  v3 = *(_QWORD *)(type metadata accessor for CloudShareInfo(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  return sub_10014DA74(a1, v1 + v4, *(uint64_t (**)(_QWORD))(v1 + ((*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t sub_10014FC00()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[3]);
  swift_bridgeObjectRelease(v0[5]);
  return swift_deallocObject(v0, 48, 7);
}

void sub_10014FC34(uint64_t a1)
{
  uint64_t *v1;

  sub_100026478(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_10014FC44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = type metadata accessor for CloudShareInfo(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_release(*(_QWORD *)(v0 + 24));
  v8 = v0 + v4;
  v9 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  swift_bridgeObjectRelease(*(_QWORD *)(v8 + *(int *)(v1 + 20) + 8));

  swift_release(*(_QWORD *)(v0 + v6));
  return swift_deallocObject(v0, v7 + 8, v5);
}

uint64_t storeEnumTagSinglePayload for CloudShareInfo.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_10014FD5C + 4 * byte_10021E5D5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10014FD90 + 4 * byte_10021E5D0[v4]))();
}

uint64_t sub_10014FD90(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10014FD98(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10014FDA0);
  return result;
}

uint64_t sub_10014FDAC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10014FDB4);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_10014FDB8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10014FDC0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CloudShareInfo.CodingKeys()
{
  return &type metadata for CloudShareInfo.CodingKeys;
}

unint64_t sub_10014FDE0()
{
  unint64_t result;

  result = qword_100293CD0;
  if (!qword_100293CD0)
  {
    result = swift_getWitnessTable(&unk_10021E754, &type metadata for CloudShareInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100293CD0);
  }
  return result;
}

unint64_t sub_10014FE28()
{
  unint64_t result;

  result = qword_100293CD8;
  if (!qword_100293CD8)
  {
    result = swift_getWitnessTable(&unk_10021E6C4, &type metadata for CloudShareInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100293CD8);
  }
  return result;
}

unint64_t sub_10014FE70()
{
  unint64_t result;

  result = qword_100293CE0;
  if (!qword_100293CE0)
  {
    result = swift_getWitnessTable(&unk_10021E6EC, &type metadata for CloudShareInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100293CE0);
  }
  return result;
}

uint64_t sub_10014FEB4(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  char v8;

  if (a1 == 0x6C72556572616873 && a2 == 0xE800000000000000)
  {
    v5 = 0xE800000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6C72556572616873, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6E6F436572616873 && a2 == 0xEE0072656E696174)
  {
    v7 = 0xEE0072656E696174;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F436572616873, 0xEE0072656E696174, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x6B6F546572616873 && a2 == 0xEE00617461446E65)
  {
    swift_bridgeObjectRelease(0xEE00617461446E65);
    return 2;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6B6F546572616873, 0xEE00617461446E65, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_100150074(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t), uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  char *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  NSString v37;
  id v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  NSObject *v42;
  __n128 v43;
  os_log_type_t v44;
  uint8_t *v45;
  uint64_t v46;
  uint64_t v47;
  NSObject *v48;
  os_log_type_t v49;
  uint8_t *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  void *v55;
  NSObject *v56;
  os_log_type_t v57;
  uint8_t *v58;
  _QWORD v60[2];
  uint64_t v61;
  uint64_t v62;
  uint64_t (*v63)(uint64_t);
  uint64_t v64;
  void *v65;

  v6 = v5;
  v63 = a4;
  v11 = type metadata accessor for InheritanceInvitationMessage(0);
  v13 = __chkstk_darwin(v11, v12);
  v15 = (char *)v60 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v13, v16);
  v19 = (char *)v60 - v18;
  v20 = (char *)v60 + *(int *)(v17 + 20) - v18;
  v21 = type metadata accessor for UUID(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v20, a1, v21);
  *v19 = 4;
  v22 = &v19[*(int *)(v11 + 24)];
  *v22 = a2;
  v22[1] = a3;
  v23 = qword_10028ADD0;
  swift_bridgeObjectRetain(a3);
  if (v23 != -1)
    swift_once(&qword_10028ADD0, sub_100046D50);
  v62 = type metadata accessor for Logger(0);
  v24 = sub_100005288(v62, (uint64_t)qword_1002A89F0);
  v25 = sub_100027FE8((uint64_t)v19, (uint64_t)v15, type metadata accessor for InheritanceInvitationMessage);
  v26 = Logger.logObject.getter(v25);
  v27 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v26, v27))
  {
    v28 = (uint8_t *)swift_slowAlloc(12, -1);
    v29 = swift_slowAlloc(32, -1);
    v61 = a5;
    v30 = v29;
    v65 = (void *)v29;
    v60[0] = v6;
    v60[1] = v24;
    *(_DWORD *)v28 = 136315138;
    v31 = sub_10019D4CC();
    v33 = v32;
    v64 = sub_1001DEF4C(v31, v32, (uint64_t *)&v65);
    v6 = v60[0];
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, &v65);
    swift_bridgeObjectRelease(v33);
    sub_100028388((uint64_t)v15, type metadata accessor for InheritanceInvitationMessage);
    _os_log_impl((void *)&_mh_execute_header, v26, v27, "Created invitation message - %s.\nSending...", v28, 0xCu);
    swift_arrayDestroy(v30, 1, (char *)&type metadata for Any + 8);
    v34 = v30;
    a5 = v61;
    swift_slowDealloc(v34, -1, -1);
    swift_slowDealloc(v28, -1, -1);
  }
  else
  {
    sub_100028388((uint64_t)v15, type metadata accessor for InheritanceInvitationMessage);
  }

  sub_10000732C((_QWORD *)(v6 + 16), *(_QWORD *)(v6 + 40));
  v35 = *(_QWORD *)(a1 + *(int *)(type metadata accessor for InheritanceInvitationRecord(0) + 20) + 8);
  v36 = objc_allocWithZone((Class)AAMessagingDestination);
  swift_retain(a5);
  swift_bridgeObjectRetain(v35);
  v37 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v35);
  v38 = objc_msgSend(v36, "initWithHandle:", v37);

  if (v38)
  {
    v39 = qword_10028ADB0;
    v40 = v38;
    if (v39 != -1)
      swift_once(&qword_10028ADB0, sub_100046CC8);
    v41 = sub_100005288(v62, (uint64_t)qword_1002A8990);
    v42 = Logger.logObject.getter(v41);
    v44 = static os_log_type_t.default.getter(v43);
    if (os_log_type_enabled(v42, v44))
    {
      v45 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v45 = 0;
      _os_log_impl((void *)&_mh_execute_header, v42, v44, "Destination is valid!", v45, 2u);
      swift_slowDealloc(v45, -1, -1);
    }

    v46 = sub_1000D4820((uint64_t)v19, v40, (uint64_t)&_swiftEmptySetSingleton);
    v56 = Logger.logObject.getter(v46);
    v57 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v56, v57))
    {
      v58 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v58 = 0;
      _os_log_impl((void *)&_mh_execute_header, v56, v57, "Sent IDS Message for Inheritance Invitation successfully.", v58, 2u);
      swift_slowDealloc(v58, -1, -1);
    }

    v63(0);
    swift_release(a5);

  }
  else
  {
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v47 = sub_100005288(v62, (uint64_t)qword_1002A89D8);
    v48 = Logger.logObject.getter(v47);
    v49 = static os_log_type_t.error.getter(v48);
    if (os_log_type_enabled(v48, v49))
    {
      v50 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v50 = 0;
      _os_log_impl((void *)&_mh_execute_header, v48, v49, "Unable to generate destination from handle.", v50, 2u);
      swift_slowDealloc(v50, -1, -1);
    }

    type metadata accessor for AACustodianError(0);
    v52 = v51;
    v64 = -7004;
    v53 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
    v54 = sub_100041030();
    _BridgedStoredNSError.init(_:userInfo:)(&v65, &v64, v53, v52, v54);
    v55 = v65;
    sub_100150630((uint64_t)v65, v63);
    swift_release(a5);

  }
  return sub_100028388((uint64_t)v19, type metadata accessor for InheritanceInvitationMessage);
}

uint64_t sub_100150630(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v19;
  uint64_t v20;

  if (!a1)
  {
    if (qword_10028ADD0 != -1)
      swift_once(&qword_10028ADD0, sub_100046D50);
    v14 = type metadata accessor for Logger(0);
    v15 = sub_100005288(v14, (uint64_t)qword_1002A89F0);
    v6 = Logger.logObject.getter(v15);
    v16 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v6, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v16, "Sent IDS Message for Inheritance Invitation successfully.", v17, 2u);
      swift_slowDealloc(v17, -1, -1);
    }
    goto LABEL_11;
  }
  swift_errorRetain(a1);
  if (qword_10028ADD0 != -1)
    swift_once(&qword_10028ADD0, sub_100046D50);
  v4 = type metadata accessor for Logger(0);
  sub_100005288(v4, (uint64_t)qword_1002A89F0);
  swift_errorRetain(a1);
  v5 = swift_errorRetain(a1);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.error.getter(v6);
  if (!os_log_type_enabled(v6, v7))
  {
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    swift_errorRelease(a1);
LABEL_11:

    return a2(a1);
  }
  v8 = (uint8_t *)swift_slowAlloc(12, -1);
  v9 = swift_slowAlloc(32, -1);
  v19 = a1;
  v20 = v9;
  *(_DWORD *)v8 = 136315138;
  swift_errorRetain(a1);
  v10 = sub_1000080B4(&qword_10028E850);
  v11 = String.init<A>(describing:)(&v19, v10);
  v13 = v12;
  v19 = sub_1001DEF4C(v11, v12, &v20);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20);
  swift_bridgeObjectRelease(v13);
  swift_errorRelease(a1);
  swift_errorRelease(a1);
  _os_log_impl((void *)&_mh_execute_header, v6, v7, "Error sending IDS Message for Inheritance Invitation: %s", v8, 0xCu);
  swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v9, -1, -1);
  swift_slowDealloc(v8, -1, -1);

  swift_errorRelease(a1);
  return a2(a1);
}

uint64_t sub_1001508D4(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t (*a5)(uint64_t), uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint64_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint8_t *v32;
  uint64_t v33;
  void *v34;
  id v35;
  NSString v36;
  id v37;
  uint64_t v38;
  id v39;
  uint64_t v40;
  NSObject *v41;
  __n128 v42;
  os_log_type_t v43;
  uint8_t *v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  void *v53;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t (*v59)(uint64_t);
  uint64_t v60;
  uint64_t v61;
  void *v62;

  v7 = v6;
  v59 = a5;
  v60 = a6;
  v58 = a1;
  v11 = type metadata accessor for InheritanceInvitationResponseMessage(0);
  v13 = __chkstk_darwin(v11, v12);
  v15 = (char *)&v56 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v13, v16);
  v19 = (char *)&v56 - v18;
  v20 = (char *)&v56 + *(int *)(v17 + 20) - v18;
  v21 = type metadata accessor for UUID(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v20, a3, v21);
  *v19 = 0;
  v19[*(int *)(v11 + 24)] = a4;
  if (qword_10028ADD0 != -1)
    swift_once(&qword_10028ADD0, sub_100046D50);
  v22 = type metadata accessor for Logger(0);
  sub_100005288(v22, (uint64_t)qword_1002A89F0);
  v23 = sub_100027FE8((uint64_t)v19, (uint64_t)v15, type metadata accessor for InheritanceInvitationResponseMessage);
  v24 = Logger.logObject.getter(v23);
  v25 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v24, v25))
  {
    v26 = swift_slowAlloc(12, -1);
    v57 = v22;
    v27 = (uint8_t *)v26;
    v28 = swift_slowAlloc(32, -1);
    v62 = (void *)v28;
    *(_DWORD *)v27 = 136315138;
    v56 = a2;
    v29 = sub_1001A55B8();
    v31 = v30;
    v61 = sub_1001DEF4C(v29, v30, (uint64_t *)&v62);
    a2 = v56;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v61, &v62);
    swift_bridgeObjectRelease(v31);
    sub_100028388((uint64_t)v15, type metadata accessor for InheritanceInvitationResponseMessage);
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "Created invitation response message - %s.\nResponding to invitation...", v27, 0xCu);
    swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v28, -1, -1);
    v32 = v27;
    v22 = v57;
    swift_slowDealloc(v32, -1, -1);
  }
  else
  {
    sub_100028388((uint64_t)v15, type metadata accessor for InheritanceInvitationResponseMessage);
  }

  v33 = v60;
  sub_10000732C((_QWORD *)(v7 + 16), *(_QWORD *)(v7 + 40));
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0
    && _CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
  {
    sub_100154A80((uint64_t)_swiftEmptyArrayStorage, &qword_100293DB0, &qword_10028FB98, AAMessagingCapability_ptr);
    v34 = v55;
  }
  else
  {
    v34 = &_swiftEmptySetSingleton;
  }
  v35 = objc_allocWithZone((Class)AAMessagingDestination);
  swift_retain(v33);
  swift_bridgeObjectRetain(a2);
  v36 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  v37 = objc_msgSend(v35, "initWithHandle:", v36);

  if (v37)
  {
    v38 = qword_10028ADB0;
    v39 = v37;
    if (v38 != -1)
      swift_once(&qword_10028ADB0, sub_100046CC8);
    v40 = sub_100005288(v22, (uint64_t)qword_1002A8990);
    v41 = Logger.logObject.getter(v40);
    v43 = static os_log_type_t.default.getter(v42);
    if (os_log_type_enabled(v41, v43))
    {
      v44 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v44 = 0;
      _os_log_impl((void *)&_mh_execute_header, v41, v43, "Destination is valid!", v44, 2u);
      swift_slowDealloc(v44, -1, -1);
    }

    sub_1000D44F8((uint64_t)v19, v39, (uint64_t)v34);
    v59(0);
    swift_bridgeObjectRelease(v34);
    swift_release(v33);

  }
  else
  {
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v45 = sub_100005288(v22, (uint64_t)qword_1002A89D8);
    v46 = Logger.logObject.getter(v45);
    v47 = static os_log_type_t.error.getter(v46);
    if (os_log_type_enabled(v46, v47))
    {
      v48 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v48 = 0;
      _os_log_impl((void *)&_mh_execute_header, v46, v47, "Unable to generate destination from handle.", v48, 2u);
      swift_slowDealloc(v48, -1, -1);
    }

    type metadata accessor for AACustodianError(0);
    v50 = v49;
    v61 = -7004;
    v51 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
    v52 = sub_100041030();
    _BridgedStoredNSError.init(_:userInfo:)(&v62, &v61, v51, v50, v52);
    v53 = v62;
    sub_100152174((uint64_t)v62, v59, v33, "Error sending IDS Message for Inheritance Invitation Response: %s");
    swift_bridgeObjectRelease(v34);
    swift_release(v33);

  }
  return sub_100028388((uint64_t)v19, type metadata accessor for InheritanceInvitationResponseMessage);
}

uint64_t sub_100150E74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t), uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint64_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint8_t *v33;
  void *v34;
  id v35;
  NSString v36;
  id v37;
  uint64_t v38;
  id v39;
  uint64_t v40;
  NSObject *v41;
  __n128 v42;
  os_log_type_t v43;
  uint8_t *v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  void *v53;
  void *v55;
  uint64_t v56;
  _BYTE *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t (*v60)(uint64_t);
  uint64_t v61;
  void *v62;

  v7 = v6;
  v59 = a2;
  v60 = a5;
  v12 = type metadata accessor for InheritanceAccessKeyMessage(0);
  v14 = __chkstk_darwin(v12, v13);
  v16 = (char *)&v56 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v14, v17);
  v20 = (char *)&v56 - v19;
  v21 = (char *)&v56 + *(int *)(v18 + 20) - v19;
  v22 = type metadata accessor for UUID(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v21, a4, v22);
  sub_100027FE8(a1, (uint64_t)&v20[*(int *)(v12 + 24)], type metadata accessor for CloudShareInfo);
  *v20 = 1;
  if (qword_10028ADD0 != -1)
    swift_once(&qword_10028ADD0, sub_100046D50);
  v23 = type metadata accessor for Logger(0);
  sub_100005288(v23, (uint64_t)qword_1002A89F0);
  v24 = sub_100027FE8((uint64_t)v20, (uint64_t)v16, type metadata accessor for InheritanceAccessKeyMessage);
  v25 = Logger.logObject.getter(v24);
  v26 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v25, v26))
  {
    v27 = swift_slowAlloc(12, -1);
    v58 = a6;
    v28 = (uint8_t *)v27;
    v29 = swift_slowAlloc(32, -1);
    v62 = (void *)v29;
    v56 = a3;
    v57 = v20;
    *(_DWORD *)v28 = 136315138;
    v30 = sub_1000C7E18();
    v32 = v31;
    v61 = sub_1001DEF4C(v30, v31, (uint64_t *)&v62);
    a3 = v56;
    v20 = v57;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v61, &v62);
    swift_bridgeObjectRelease(v32);
    sub_100028388((uint64_t)v16, type metadata accessor for InheritanceAccessKeyMessage);
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "Created share accessKey message - %s.\nSending....", v28, 0xCu);
    swift_arrayDestroy(v29, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v29, -1, -1);
    v33 = v28;
    a6 = v58;
    swift_slowDealloc(v33, -1, -1);
  }
  else
  {
    sub_100028388((uint64_t)v16, type metadata accessor for InheritanceAccessKeyMessage);
  }

  sub_10000732C((_QWORD *)(v7 + 16), *(_QWORD *)(v7 + 40));
  if (((unint64_t)&_swiftEmptyArrayStorage & 0xC000000000000000) != 0
    && _CocoaArrayWrapper.endIndex.getter(&_swiftEmptyArrayStorage))
  {
    sub_100154A80((uint64_t)&_swiftEmptyArrayStorage, &qword_100293DB0, &qword_10028FB98, AAMessagingCapability_ptr);
    v34 = v55;
  }
  else
  {
    v34 = &_swiftEmptySetSingleton;
  }
  v35 = objc_allocWithZone((Class)AAMessagingDestination);
  swift_retain(a6);
  swift_bridgeObjectRetain(a3);
  v36 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a3);
  v37 = objc_msgSend(v35, "initWithHandle:", v36);

  if (v37)
  {
    v38 = qword_10028ADB0;
    v39 = v37;
    if (v38 != -1)
      swift_once(&qword_10028ADB0, sub_100046CC8);
    v40 = sub_100005288(v23, (uint64_t)qword_1002A8990);
    v41 = Logger.logObject.getter(v40);
    v43 = static os_log_type_t.default.getter(v42);
    if (os_log_type_enabled(v41, v43))
    {
      v44 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v44 = 0;
      _os_log_impl((void *)&_mh_execute_header, v41, v43, "Destination is valid!", v44, 2u);
      swift_slowDealloc(v44, -1, -1);
    }

    sub_1000D4880((uint64_t)v20, v39, (uint64_t)v34);
    v60(0);
    swift_bridgeObjectRelease(v34);
    swift_release(a6);

  }
  else
  {
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v45 = sub_100005288(v23, (uint64_t)qword_1002A89D8);
    v46 = Logger.logObject.getter(v45);
    v47 = static os_log_type_t.error.getter(v46);
    if (os_log_type_enabled(v46, v47))
    {
      v48 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v48 = 0;
      _os_log_impl((void *)&_mh_execute_header, v46, v47, "Unable to generate destination from handle.", v48, 2u);
      swift_slowDealloc(v48, -1, -1);
    }

    type metadata accessor for AACustodianError(0);
    v50 = v49;
    v61 = -7004;
    v51 = sub_100005014((uint64_t)&_swiftEmptyArrayStorage);
    v52 = sub_100041030();
    _BridgedStoredNSError.init(_:userInfo:)(&v62, &v61, v51, v50, v52);
    v53 = v62;
    sub_100152174((uint64_t)v62, v60, a6, "Error sending IDS Message for Share Access Key: %s");
    swift_bridgeObjectRelease(v34);
    swift_release(a6);

  }
  return sub_100028388((uint64_t)v20, type metadata accessor for InheritanceAccessKeyMessage);
}

void sub_100151424(uint64_t a1, void (*a2)(uint64_t), uint64_t a3, char *a4)
{
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *format;
  uint64_t v19;
  uint64_t v20;

  if (!a1)
  {
LABEL_6:
    if (!a2)
      return;
    goto LABEL_7;
  }
  swift_errorRetain(a1);
  if (qword_10028ADD0 != -1)
    swift_once(&qword_10028ADD0, sub_100046D50);
  v8 = type metadata accessor for Logger(0);
  sub_100005288(v8, (uint64_t)qword_1002A89F0);
  swift_errorRetain(a1);
  v9 = swift_errorRetain(a1);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.error.getter(v10);
  if (os_log_type_enabled(v10, v11))
  {
    format = a4;
    v12 = (uint8_t *)swift_slowAlloc(12, -1);
    v13 = swift_slowAlloc(32, -1);
    v19 = a1;
    v20 = v13;
    *(_DWORD *)v12 = 136315138;
    swift_errorRetain(a1);
    v14 = sub_1000080B4(&qword_10028E850);
    v15 = String.init<A>(describing:)(&v19, v14);
    v17 = v16;
    v19 = sub_1001DEF4C(v15, v16, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20);
    swift_bridgeObjectRelease(v17);
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, format, v12, 0xCu);
    swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1, -1);
    swift_slowDealloc(v12, -1, -1);

    swift_errorRelease(a1);
    goto LABEL_6;
  }
  swift_errorRelease(a1);
  swift_errorRelease(a1);
  swift_errorRelease(a1);

  if (!a2)
    return;
LABEL_7:
  a2(a1);
  sub_10000D98C((uint64_t)a2, a3);
}

uint64_t sub_100151634(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t), uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint64_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint8_t *v31;
  void *v32;
  id v33;
  NSString v34;
  id v35;
  uint64_t v36;
  id v37;
  uint64_t v38;
  NSObject *v39;
  __n128 v40;
  os_log_type_t v41;
  uint8_t *v42;
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  uint8_t *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  void *v51;
  void *v53;
  _BYTE *v54;
  uint64_t v55;
  uint64_t (*v56)(uint64_t);
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;

  v6 = v5;
  v57 = a2;
  v11 = type metadata accessor for BeneficiaryRemovedMessage(0);
  v13 = __chkstk_darwin(v11, v12);
  v15 = (char *)&v54 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v13, v16);
  v19 = (char *)&v54 - v18;
  v20 = (char *)&v54 + *(int *)(v17 + 20) - v18;
  v21 = type metadata accessor for UUID(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v20, a1, v21);
  *v19 = 3;
  if (qword_10028ADD0 != -1)
    swift_once(&qword_10028ADD0, sub_100046D50);
  v58 = type metadata accessor for Logger(0);
  sub_100005288(v58, (uint64_t)qword_1002A89F0);
  v22 = sub_100027FE8((uint64_t)v19, (uint64_t)v15, type metadata accessor for BeneficiaryRemovedMessage);
  v23 = Logger.logObject.getter(v22);
  v24 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v23, v24))
  {
    v25 = swift_slowAlloc(12, -1);
    v56 = a4;
    v26 = (uint8_t *)v25;
    v27 = swift_slowAlloc(32, -1);
    v60 = (void *)v27;
    v54 = v19;
    v55 = a3;
    *(_DWORD *)v26 = 136315138;
    v28 = sub_1000C16C4();
    v30 = v29;
    v59 = sub_1001DEF4C(v28, v29, (uint64_t *)&v60);
    v19 = v54;
    a3 = v55;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, &v60);
    swift_bridgeObjectRelease(v30);
    sub_100028388((uint64_t)v15, type metadata accessor for BeneficiaryRemovedMessage);
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "Created beneficiary removed message - %s.\nSending....", v26, 0xCu);
    swift_arrayDestroy(v27, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v27, -1, -1);
    v31 = v26;
    a4 = v56;
    swift_slowDealloc(v31, -1, -1);
  }
  else
  {
    sub_100028388((uint64_t)v15, type metadata accessor for BeneficiaryRemovedMessage);
  }

  sub_10000732C((_QWORD *)(v6 + 16), *(_QWORD *)(v6 + 40));
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0
    && _CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
  {
    sub_100154A80((uint64_t)_swiftEmptyArrayStorage, &qword_100293DB0, &qword_10028FB98, AAMessagingCapability_ptr);
    v32 = v53;
  }
  else
  {
    v32 = &_swiftEmptySetSingleton;
  }
  v33 = objc_allocWithZone((Class)AAMessagingDestination);
  swift_retain(a5);
  swift_bridgeObjectRetain(a3);
  v34 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a3);
  v35 = objc_msgSend(v33, "initWithHandle:", v34);

  if (v35)
  {
    v36 = qword_10028ADB0;
    v37 = v35;
    if (v36 != -1)
      swift_once(&qword_10028ADB0, sub_100046CC8);
    v38 = sub_100005288(v58, (uint64_t)qword_1002A8990);
    v39 = Logger.logObject.getter(v38);
    v41 = static os_log_type_t.default.getter(v40);
    if (os_log_type_enabled(v39, v41))
    {
      v42 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v42 = 0;
      _os_log_impl((void *)&_mh_execute_header, v39, v41, "Destination is valid!", v42, 2u);
      swift_slowDealloc(v42, -1, -1);
    }

    sub_1000D4498((uint64_t)v19, v37, (uint64_t)v32);
    a4(0);
    swift_bridgeObjectRelease(v32);
    swift_release(a5);

  }
  else
  {
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v43 = sub_100005288(v58, (uint64_t)qword_1002A89D8);
    v44 = Logger.logObject.getter(v43);
    v45 = static os_log_type_t.error.getter(v44);
    if (os_log_type_enabled(v44, v45))
    {
      v46 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v46 = 0;
      _os_log_impl((void *)&_mh_execute_header, v44, v45, "Unable to generate destination from handle.", v46, 2u);
      swift_slowDealloc(v46, -1, -1);
    }

    type metadata accessor for AACustodianError(0);
    v48 = v47;
    v59 = -7004;
    v49 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
    v50 = sub_100041030();
    _BridgedStoredNSError.init(_:userInfo:)(&v60, &v59, v49, v48, v50);
    v51 = v60;
    sub_100152174((uint64_t)v60, a4, a5, "Error sending IDS Message for Beneficiary Removed: %s");
    swift_bridgeObjectRelease(v32);
    swift_release(a5);

  }
  return sub_100028388((uint64_t)v19, type metadata accessor for BeneficiaryRemovedMessage);
}

uint64_t sub_100151BC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t), uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint64_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint8_t *v33;
  void *v34;
  id v35;
  NSString v36;
  id v37;
  uint64_t v38;
  id v39;
  uint64_t v40;
  NSObject *v41;
  __n128 v42;
  os_log_type_t v43;
  uint8_t *v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  void *v53;
  void *v55;
  uint64_t v56;
  _BYTE *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t (*v60)(uint64_t);
  uint64_t v61;
  void *v62;

  v7 = v6;
  v59 = a3;
  v60 = a5;
  v12 = type metadata accessor for InheritanceAccessKeyMessage(0);
  v14 = __chkstk_darwin(v12, v13);
  v16 = (char *)&v56 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v14, v17);
  v20 = (char *)&v56 - v19;
  v21 = (char *)&v56 + *(int *)(v18 + 20) - v19;
  v22 = type metadata accessor for UUID(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v21, a2, v22);
  sub_100027FE8(a1, (uint64_t)&v20[*(int *)(v12 + 24)], type metadata accessor for CloudShareInfo);
  *v20 = 2;
  if (qword_10028ADD0 != -1)
    swift_once(&qword_10028ADD0, sub_100046D50);
  v23 = type metadata accessor for Logger(0);
  sub_100005288(v23, (uint64_t)qword_1002A89F0);
  v24 = sub_100027FE8((uint64_t)v20, (uint64_t)v16, type metadata accessor for InheritanceAccessKeyMessage);
  v25 = Logger.logObject.getter(v24);
  v26 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v25, v26))
  {
    v27 = swift_slowAlloc(12, -1);
    v58 = a6;
    v28 = (uint8_t *)v27;
    v29 = swift_slowAlloc(32, -1);
    v62 = (void *)v29;
    v56 = a4;
    v57 = v20;
    *(_DWORD *)v28 = 136315138;
    v30 = sub_1000C7E18();
    v32 = v31;
    v61 = sub_1001DEF4C(v30, v31, (uint64_t *)&v62);
    a4 = v56;
    v20 = v57;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v61, &v62);
    swift_bridgeObjectRelease(v32);
    sub_100028388((uint64_t)v16, type metadata accessor for InheritanceAccessKeyMessage);
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "Created accessKey Changed message - %s.\nSending....", v28, 0xCu);
    swift_arrayDestroy(v29, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v29, -1, -1);
    v33 = v28;
    a6 = v58;
    swift_slowDealloc(v33, -1, -1);
  }
  else
  {
    sub_100028388((uint64_t)v16, type metadata accessor for InheritanceAccessKeyMessage);
  }

  sub_10000732C((_QWORD *)(v7 + 16), *(_QWORD *)(v7 + 40));
  if (((unint64_t)&_swiftEmptyArrayStorage & 0xC000000000000000) != 0
    && _CocoaArrayWrapper.endIndex.getter(&_swiftEmptyArrayStorage))
  {
    sub_100154A80((uint64_t)&_swiftEmptyArrayStorage, &qword_100293DB0, &qword_10028FB98, AAMessagingCapability_ptr);
    v34 = v55;
  }
  else
  {
    v34 = &_swiftEmptySetSingleton;
  }
  v35 = objc_allocWithZone((Class)AAMessagingDestination);
  swift_retain(a6);
  swift_bridgeObjectRetain(a4);
  v36 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a4);
  v37 = objc_msgSend(v35, "initWithHandle:", v36);

  if (v37)
  {
    v38 = qword_10028ADB0;
    v39 = v37;
    if (v38 != -1)
      swift_once(&qword_10028ADB0, sub_100046CC8);
    v40 = sub_100005288(v23, (uint64_t)qword_1002A8990);
    v41 = Logger.logObject.getter(v40);
    v43 = static os_log_type_t.default.getter(v42);
    if (os_log_type_enabled(v41, v43))
    {
      v44 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v44 = 0;
      _os_log_impl((void *)&_mh_execute_header, v41, v43, "Destination is valid!", v44, 2u);
      swift_slowDealloc(v44, -1, -1);
    }

    sub_1000D4880((uint64_t)v20, v39, (uint64_t)v34);
    v60(0);
    swift_bridgeObjectRelease(v34);
    swift_release(a6);

  }
  else
  {
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v45 = sub_100005288(v23, (uint64_t)qword_1002A89D8);
    v46 = Logger.logObject.getter(v45);
    v47 = static os_log_type_t.error.getter(v46);
    if (os_log_type_enabled(v46, v47))
    {
      v48 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v48 = 0;
      _os_log_impl((void *)&_mh_execute_header, v46, v47, "Unable to generate destination from handle.", v48, 2u);
      swift_slowDealloc(v48, -1, -1);
    }

    type metadata accessor for AACustodianError(0);
    v50 = v49;
    v61 = -7004;
    v51 = sub_100005014((uint64_t)&_swiftEmptyArrayStorage);
    v52 = sub_100041030();
    _BridgedStoredNSError.init(_:userInfo:)(&v62, &v61, v51, v50, v52);
    v53 = v62;
    sub_100152174((uint64_t)v62, v60, a6, "Error sending IDS Message for Update AccessKey: %s");
    swift_bridgeObjectRelease(v34);
    swift_release(a6);

  }
  return sub_100028388((uint64_t)v20, type metadata accessor for InheritanceAccessKeyMessage);
}

uint64_t sub_100152174(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t a3, char *a4)
{
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *format;
  uint64_t v19;
  uint64_t v20;

  if (a1)
  {
    swift_errorRetain(a1);
    if (qword_10028ADD0 != -1)
      swift_once(&qword_10028ADD0, sub_100046D50);
    v7 = type metadata accessor for Logger(0);
    sub_100005288(v7, (uint64_t)qword_1002A89F0);
    swift_errorRetain(a1);
    v8 = swift_errorRetain(a1);
    v9 = Logger.logObject.getter(v8);
    v10 = static os_log_type_t.error.getter(v9);
    if (os_log_type_enabled(v9, v10))
    {
      format = a4;
      v11 = (uint8_t *)swift_slowAlloc(12, -1);
      v12 = swift_slowAlloc(32, -1);
      v19 = a1;
      v20 = v12;
      *(_DWORD *)v11 = 136315138;
      swift_errorRetain(a1);
      v13 = sub_1000080B4(&qword_10028E850);
      v14 = String.init<A>(describing:)(&v19, v13);
      v16 = v15;
      v19 = sub_1001DEF4C(v14, v15, &v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20);
      swift_bridgeObjectRelease(v16);
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, v9, v10, format, v11, 0xCu);
      swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v12, -1, -1);
      swift_slowDealloc(v11, -1, -1);

      swift_errorRelease(a1);
    }
    else
    {
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      swift_errorRelease(a1);

    }
  }
  return a2(a1);
}

uint64_t type metadata accessor for InheritanceSetupMessenger()
{
  return objc_opt_self(_TtC13appleaccountd25InheritanceSetupMessenger);
}

Swift::Int sub_100152390(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::UInt v7;
  Swift::Int result;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  _QWORD v19[9];

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_1000080B4(&qword_100293DC0);
    v3 = static _SetStorage.allocate(capacity:)(v1);
    v4 = 0;
    v5 = v3 + 56;
    v6 = a1 + 32;
    while (1)
    {
      v7 = *(_QWORD *)(v6 + 8 * v4);
      Hasher.init(_seed:)(v19);
      Hasher._combine(_:)(v7);
      result = Hasher._finalize()();
      v9 = -1 << *(_BYTE *)(v3 + 32);
      v10 = result & ~v9;
      v11 = v10 >> 6;
      v12 = *(_QWORD *)(v5 + 8 * (v10 >> 6));
      v13 = 1 << v10;
      v14 = *(_QWORD *)(v3 + 48);
      if (((1 << v10) & v12) != 0)
      {
        if (*(_QWORD *)(v14 + 8 * v10) == v7)
          goto LABEL_3;
        v15 = ~v9;
        while (1)
        {
          v10 = (v10 + 1) & v15;
          v11 = v10 >> 6;
          v12 = *(_QWORD *)(v5 + 8 * (v10 >> 6));
          v13 = 1 << v10;
          if ((v12 & (1 << v10)) == 0)
            break;
          if (*(_QWORD *)(v14 + 8 * v10) == v7)
            goto LABEL_3;
        }
      }
      *(_QWORD *)(v5 + 8 * v11) = v13 | v12;
      *(_QWORD *)(v14 + 8 * v10) = v7;
      v16 = *(_QWORD *)(v3 + 16);
      v17 = __OFADD__(v16, 1);
      v18 = v16 + 1;
      if (v17)
      {
        __break(1u);
        return result;
      }
      *(_QWORD *)(v3 + 16) = v18;
LABEL_3:
      if (++v4 == v1)
        return v3;
    }
  }
  return (Swift::Int)&_swiftEmptySetSingleton;
}

uint64_t sub_1001524D0(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  void *v16;
  uint64_t (*v18)(_QWORD);
  uint64_t v19;
  uint64_t v20;

  if (a1)
  {
    swift_errorRetain(a1);
    if (qword_10028ADD0 != -1)
      swift_once(&qword_10028ADD0, sub_100046D50);
    v5 = type metadata accessor for Logger(0);
    sub_100005288(v5, (uint64_t)qword_1002A89F0);
    swift_errorRetain(a1);
    v6 = swift_errorRetain(a1);
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.error.getter(v7);
    if (os_log_type_enabled(v7, v8))
    {
      v18 = a3;
      v9 = (uint8_t *)swift_slowAlloc(12, -1);
      v10 = swift_slowAlloc(32, -1);
      v19 = a1;
      v20 = v10;
      *(_DWORD *)v9 = 136315138;
      swift_errorRetain(a1);
      v11 = sub_1000080B4(&qword_10028E850);
      v12 = String.init<A>(describing:)(&v19, v11);
      v14 = v13;
      v19 = sub_1001DEF4C(v12, v13, &v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20);
      v15 = v14;
      a3 = v18;
      swift_bridgeObjectRelease(v15);
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Error sending IDS Message for Beneficiary Removed: %s", v9, 0xCu);
      swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v10, -1, -1);
      swift_slowDealloc(v9, -1, -1);

      swift_errorRelease(a1);
    }
    else
    {
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      swift_errorRelease(a1);

    }
    v16 = (void *)_convertErrorToNSError(_:)(a1);
  }
  else
  {
    v16 = 0;
  }
  sub_1001BA4C0(a1 == 0, (uint64_t)v16);

  return a3(a1);
}

void sub_100152704(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t (*a6)(_QWORD), uint64_t a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint64_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint8_t *v35;
  void *v36;
  void *v37;
  id v38;
  NSString v39;
  id v40;
  uint64_t v41;
  id v42;
  uint64_t v43;
  NSObject *v44;
  __n128 v45;
  os_log_type_t v46;
  uint8_t *v47;
  uint64_t v48;
  NSObject *v49;
  os_log_type_t v50;
  uint8_t *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  void *v56;
  id v57;
  void *v58;
  _QWORD v59[2];
  uint64_t v60;
  _BYTE *v61;
  uint64_t v62;
  uint64_t (*v63)(_QWORD);
  id v64;
  uint64_t v65;
  void *v66;

  v63 = a6;
  v13 = type metadata accessor for BeneficiaryRemovedMessage(0);
  v15 = __chkstk_darwin(v13, v14);
  v17 = (char *)v59 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v15, v18);
  v21 = (char *)v59 - v20;
  v22 = (char *)v59 + *(int *)(v19 + 20) - v20;
  v23 = type metadata accessor for UUID(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v22, a1, v23);
  *v21 = 3;
  v24 = qword_10028ADD0;
  v25 = a5;
  swift_retain_n(a7, 2);
  v64 = v25;
  if (v24 != -1)
    swift_once(&qword_10028ADD0, sub_100046D50);
  v62 = type metadata accessor for Logger(0);
  sub_100005288(v62, (uint64_t)qword_1002A89F0);
  v26 = sub_100027FE8((uint64_t)v21, (uint64_t)v17, type metadata accessor for BeneficiaryRemovedMessage);
  v27 = Logger.logObject.getter(v26);
  v28 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v27, v28))
  {
    v29 = swift_slowAlloc(12, -1);
    v61 = v21;
    v30 = (uint8_t *)v29;
    v31 = swift_slowAlloc(32, -1);
    v66 = (void *)v31;
    v59[1] = a2;
    v60 = a3;
    *(_DWORD *)v30 = 136315138;
    v32 = sub_1000C16C4();
    v34 = v33;
    v65 = sub_1001DEF4C(v32, v33, (uint64_t *)&v66);
    a3 = v60;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, &v66);
    swift_bridgeObjectRelease(v34);
    sub_100028388((uint64_t)v17, type metadata accessor for BeneficiaryRemovedMessage);
    _os_log_impl((void *)&_mh_execute_header, v27, v28, "Created beneficiary removed message - %s.\nSending....", v30, 0xCu);
    swift_arrayDestroy(v31, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v31, -1, -1);
    v35 = v30;
    v21 = v61;
    swift_slowDealloc(v35, -1, -1);
  }
  else
  {
    sub_100028388((uint64_t)v17, type metadata accessor for BeneficiaryRemovedMessage);
  }

  sub_10000732C((_QWORD *)(a4 + 16), *(_QWORD *)(a4 + 40));
  v36 = v64;
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0
    && _CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
  {
    sub_100154A80((uint64_t)_swiftEmptyArrayStorage, &qword_100293DB0, &qword_10028FB98, AAMessagingCapability_ptr);
    v37 = v58;
  }
  else
  {
    v37 = &_swiftEmptySetSingleton;
  }
  v38 = objc_allocWithZone((Class)AAMessagingDestination);
  swift_bridgeObjectRetain(a3);
  v39 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a3);
  v40 = objc_msgSend(v38, "initWithHandle:", v39);

  if (v40)
  {
    v41 = qword_10028ADB0;
    v42 = v40;
    if (v41 != -1)
      swift_once(&qword_10028ADB0, sub_100046CC8);
    v43 = sub_100005288(v62, (uint64_t)qword_1002A8990);
    v44 = Logger.logObject.getter(v43);
    v46 = static os_log_type_t.default.getter(v45);
    if (os_log_type_enabled(v44, v46))
    {
      v47 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v47 = 0;
      _os_log_impl((void *)&_mh_execute_header, v44, v46, "Destination is valid!", v47, 2u);
      swift_slowDealloc(v47, -1, -1);
    }

    sub_1000D4498((uint64_t)v21, v42, (uint64_t)v37);
    sub_1001BA4C0(1, 0);
    v63(0);
    swift_bridgeObjectRelease(v37);

  }
  else
  {
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v48 = sub_100005288(v62, (uint64_t)qword_1002A89D8);
    v49 = Logger.logObject.getter(v48);
    v50 = static os_log_type_t.error.getter(v49);
    if (os_log_type_enabled(v49, v50))
    {
      v51 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v51 = 0;
      _os_log_impl((void *)&_mh_execute_header, v49, v50, "Unable to generate destination from handle.", v51, 2u);
      swift_slowDealloc(v51, -1, -1);
    }

    type metadata accessor for AACustodianError(0);
    v53 = v52;
    v65 = -7004;
    v54 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
    v55 = sub_100041030();
    _BridgedStoredNSError.init(_:userInfo:)(&v66, &v65, v54, v53, v55);
    v56 = v66;
    v57 = v36;
    swift_retain(a7);
    sub_1001524D0((uint64_t)v56, (uint64_t)v57, v63);
    swift_bridgeObjectRelease(v37);

    swift_release(a7);
  }
  sub_100028388((uint64_t)v21, type metadata accessor for BeneficiaryRemovedMessage);
  swift_release_n(a7, 2);

}

uint64_t sub_100152CF4(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  if (a1)
  {
    swift_errorRetain(a1);
    if (qword_10028ADD0 != -1)
      swift_once(&qword_10028ADD0, sub_100046D50);
    v10 = type metadata accessor for Logger(0);
    sub_100005288(v10, (uint64_t)qword_1002A89F0);
    swift_errorRetain(a1);
    v11 = swift_errorRetain(a1);
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.error.getter(v12);
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc(12, -1);
      v23 = swift_slowAlloc(32, -1);
      v24 = a1;
      v25 = v23;
      *(_DWORD *)v14 = 136315138;
      swift_errorRetain(a1);
      v15 = sub_1000080B4(&qword_10028E850);
      v16 = String.init<A>(describing:)(&v24, v15);
      v17 = a3;
      v18 = a4;
      v20 = v19;
      v24 = sub_1001DEF4C(v16, v19, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25);
      v21 = v20;
      a4 = v18;
      a3 = v17;
      swift_bridgeObjectRelease(v21);
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Error sending IDS Message for Inheritance Invitation Response: %s", v14, 0xCu);
      swift_arrayDestroy(v23, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v23, -1, -1);
      swift_slowDealloc(v14, -1, -1);

      swift_errorRelease(a1);
    }
    else
    {
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      swift_errorRelease(a1);

    }
  }
  return sub_1000ADD7C(a1, a2, a3, a4, a5);
}

void sub_100152F1C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, void *a6, void *a7, uint64_t a8, uint64_t a9)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  _BYTE *v32;
  uint64_t v33;
  id v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint64_t v40;
  uint8_t *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint8_t *v46;
  void *v47;
  void *v48;
  id v49;
  NSString v50;
  id v51;
  uint64_t v52;
  id v53;
  uint64_t v54;
  NSObject *v55;
  __n128 v56;
  os_log_type_t v57;
  uint8_t *v58;
  uint64_t v59;
  NSObject *v60;
  os_log_type_t v61;
  _BOOL4 v62;
  uint8_t *v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  void *v68;
  id v69;
  id v70;
  void *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  id v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  id v91;
  id v92;
  uint64_t v93;
  void *v94;

  v89 = a1;
  v90 = a8;
  v87 = a5;
  v14 = a9;
  v15 = type metadata accessor for UUID(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15, v17);
  v84 = (char *)&v80 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_1000080B4(&qword_10028FB08);
  v82 = *(_QWORD *)(v19 - 8);
  v83 = v19;
  __chkstk_darwin(v19, v20);
  v81 = (char *)&v80 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for InheritanceInvitationResponseMessage(0);
  v24 = __chkstk_darwin(v22, v23);
  v26 = (char *)&v80 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __chkstk_darwin(v24, v27);
  v30 = (char *)&v80 + *(int *)(v28 + 20) - v29;
  v85 = v16;
  v86 = v15;
  v31 = a3;
  v32 = (char *)&v80 - v29;
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v30, v31, v15);
  *v32 = 0;
  v32[*(int *)(v22 + 24)] = a4;
  v33 = qword_10028ADD0;
  v34 = a6;
  v35 = a7;
  swift_retain_n(a9, 2);
  v92 = v34;
  v91 = v35;
  if (v33 != -1)
    swift_once(&qword_10028ADD0, sub_100046D50);
  v88 = type metadata accessor for Logger(0);
  sub_100005288(v88, (uint64_t)qword_1002A89F0);
  v36 = (uint64_t)v32;
  v37 = sub_100027FE8((uint64_t)v32, (uint64_t)v26, type metadata accessor for InheritanceInvitationResponseMessage);
  v38 = Logger.logObject.getter(v37);
  v39 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v38, v39))
  {
    v40 = swift_slowAlloc(12, -1);
    v80 = a9;
    v41 = (uint8_t *)v40;
    v42 = swift_slowAlloc(32, -1);
    v94 = (void *)v42;
    *(_DWORD *)v41 = 136315138;
    v43 = sub_1001A55B8();
    v45 = v44;
    v93 = sub_1001DEF4C(v43, v44, (uint64_t *)&v94);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v93, &v94);
    swift_bridgeObjectRelease(v45);
    sub_100028388((uint64_t)v26, type metadata accessor for InheritanceInvitationResponseMessage);
    _os_log_impl((void *)&_mh_execute_header, v38, v39, "Created invitation response message - %s.\nResponding to invitation...", v41, 0xCu);
    swift_arrayDestroy(v42, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v42, -1, -1);
    v46 = v41;
    v14 = v80;
    swift_slowDealloc(v46, -1, -1);
  }
  else
  {
    sub_100028388((uint64_t)v26, type metadata accessor for InheritanceInvitationResponseMessage);
  }

  v47 = v91;
  sub_10000732C((_QWORD *)(v87 + 16), *(_QWORD *)(v87 + 40));
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0
    && _CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
  {
    sub_100154A80((uint64_t)_swiftEmptyArrayStorage, &qword_100293DB0, &qword_10028FB98, AAMessagingCapability_ptr);
    v48 = v79;
  }
  else
  {
    v48 = &_swiftEmptySetSingleton;
  }
  v49 = objc_allocWithZone((Class)AAMessagingDestination);
  swift_bridgeObjectRetain(a2);
  v50 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  v51 = objc_msgSend(v49, "initWithHandle:", v50);

  if (v51)
  {
    v52 = qword_10028ADB0;
    v53 = v51;
    if (v52 != -1)
      swift_once(&qword_10028ADB0, sub_100046CC8);
    v54 = sub_100005288(v88, (uint64_t)qword_1002A8990);
    v55 = Logger.logObject.getter(v54);
    v57 = static os_log_type_t.default.getter(v56);
    if (os_log_type_enabled(v55, v57))
    {
      v58 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v58 = 0;
      _os_log_impl((void *)&_mh_execute_header, v55, v57, "Destination is valid!", v58, 2u);
      swift_slowDealloc(v58, -1, -1);
    }

    sub_1000D44F8(v36, v53, (uint64_t)v48);
    v71 = v92;
    v72 = v81;
    v73 = v82;
    v74 = v83;
    (*(void (**)(char *, uint64_t, uint64_t))(v82 + 16))(v81, (uint64_t)v92 + OBJC_IVAR____TtC13appleaccountd25InheritanceRequestManager__cleanupController, v83);
    Dependency.wrappedValue.getter(&v94, v74);
    (*(void (**)(char *, uint64_t))(v73 + 8))(v72, v74);
    v75 = (uint64_t)v94;
    v76 = objc_msgSend(v47, "beneficiaryID");
    v77 = (uint64_t)v84;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v76);

    v78 = swift_allocObject(&unk_10026A7B0, 32, 7);
    *(_QWORD *)(v78 + 16) = v90;
    *(_QWORD *)(v78 + 24) = v14;
    swift_retain(v14);
    sub_100183768(v77, (uint64_t)sub_1000B9AA4, v78);
    swift_release(v75);
    swift_release(v78);
    (*(void (**)(uint64_t, uint64_t))(v85 + 8))(v77, v86);
    swift_bridgeObjectRelease(v48);

  }
  else
  {
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v59 = sub_100005288(v88, (uint64_t)qword_1002A89D8);
    v60 = Logger.logObject.getter(v59);
    v61 = static os_log_type_t.error.getter(v60);
    v62 = os_log_type_enabled(v60, v61);
    v71 = v92;
    if (v62)
    {
      v63 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v63 = 0;
      _os_log_impl((void *)&_mh_execute_header, v60, v61, "Unable to generate destination from handle.", v63, 2u);
      swift_slowDealloc(v63, -1, -1);
    }

    type metadata accessor for AACustodianError(0);
    v65 = v64;
    v93 = -7004;
    v66 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
    v67 = sub_100041030();
    _BridgedStoredNSError.init(_:userInfo:)(&v94, &v93, v66, v65, v67);
    v68 = v94;
    v69 = v71;
    v70 = v47;
    swift_retain(v14);
    sub_100152CF4((uint64_t)v68, (uint64_t)v69, v70, v90, v14);
    swift_bridgeObjectRelease(v48);

    swift_release(v14);
  }
  sub_100028388(v36, type metadata accessor for InheritanceInvitationResponseMessage);
  swift_release_n(v14, 2);

}

void sub_100153668(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;

  if (a1)
  {
    swift_errorRetain(a1);
    if (qword_10028ADD0 != -1)
      swift_once(&qword_10028ADD0, sub_100046D50);
    v5 = type metadata accessor for Logger(0);
    sub_100005288(v5, (uint64_t)qword_1002A89F0);
    swift_errorRetain(a1);
    v6 = swift_errorRetain(a1);
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.error.getter(v7);
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc(12, -1);
      v10 = swift_slowAlloc(32, -1);
      v16 = a1;
      v17 = v10;
      *(_DWORD *)v9 = 136315138;
      swift_errorRetain(a1);
      v11 = sub_1000080B4(&qword_10028E850);
      v12 = String.init<A>(describing:)(&v16, v11);
      v14 = v13;
      v16 = sub_1001DEF4C(v12, v13, &v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v16, &v17);
      swift_bridgeObjectRelease(v14);
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Error sending IDS Message for Inheritance Invitation Response: %s", v9, 0xCu);
      swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v10, -1, -1);
      swift_slowDealloc(v9, -1, -1);

      swift_errorRelease(a1);
    }
    else
    {
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      swift_errorRelease(a1);

    }
    v15 = (void *)_convertErrorToNSError(_:)(a1);
  }
  else
  {
    v15 = 0;
  }
  sub_10016E328(a1 == 0, (uint64_t)v15, 2);

  if (a3)
    a3(a1);
}

uint64_t sub_1001538A4(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  char *v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint64_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint8_t *v35;
  void *v36;
  void *v37;
  id v38;
  NSString v39;
  id v40;
  uint64_t v41;
  id v42;
  uint64_t v43;
  NSObject *v44;
  __n128 v45;
  os_log_type_t v46;
  uint8_t *v47;
  uint64_t v48;
  NSObject *v49;
  os_log_type_t v50;
  _BOOL4 v51;
  void (*v52)(uint64_t);
  uint8_t *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  void *v58;
  id v59;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  id v67;
  void (*v68)(uint64_t);
  uint64_t v69;
  void *v70;

  v64 = a5;
  v66 = a1;
  v14 = type metadata accessor for InheritanceInvitationResponseMessage(0);
  v16 = __chkstk_darwin(v14, v15);
  v18 = (char *)&v62 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __chkstk_darwin(v16, v19);
  v22 = (char *)&v62 - v21;
  v23 = (char *)&v62 + *(int *)(v20 + 20) - v21;
  v24 = type metadata accessor for UUID(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 16))(v23, a3, v24);
  *v22 = 0;
  v22[*(int *)(v14 + 24)] = a4;
  v25 = a6;
  sub_10000E1C0(a7, a8);
  v67 = v25;
  v68 = (void (*)(uint64_t))a7;
  sub_10000E1C0(a7, a8);
  if (qword_10028ADD0 != -1)
    swift_once(&qword_10028ADD0, sub_100046D50);
  v65 = type metadata accessor for Logger(0);
  sub_100005288(v65, (uint64_t)qword_1002A89F0);
  v26 = sub_100027FE8((uint64_t)v22, (uint64_t)v18, type metadata accessor for InheritanceInvitationResponseMessage);
  v27 = Logger.logObject.getter(v26);
  v28 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v27, v28))
  {
    v29 = swift_slowAlloc(12, -1);
    v63 = a8;
    v30 = (uint8_t *)v29;
    v31 = swift_slowAlloc(32, -1);
    v70 = (void *)v31;
    *(_DWORD *)v30 = 136315138;
    v32 = sub_1001A55B8();
    v34 = v33;
    v69 = sub_1001DEF4C(v32, v33, (uint64_t *)&v70);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v69, &v70);
    swift_bridgeObjectRelease(v34);
    sub_100028388((uint64_t)v18, type metadata accessor for InheritanceInvitationResponseMessage);
    _os_log_impl((void *)&_mh_execute_header, v27, v28, "Created invitation response message - %s.\nResponding to invitation...", v30, 0xCu);
    swift_arrayDestroy(v31, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v31, -1, -1);
    v35 = v30;
    a8 = v63;
    swift_slowDealloc(v35, -1, -1);
  }
  else
  {
    sub_100028388((uint64_t)v18, type metadata accessor for InheritanceInvitationResponseMessage);
  }

  sub_10000732C((_QWORD *)(v64 + 16), *(_QWORD *)(v64 + 40));
  v36 = v67;
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0
    && _CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
  {
    sub_100154A80((uint64_t)_swiftEmptyArrayStorage, &qword_100293DB0, &qword_10028FB98, AAMessagingCapability_ptr);
    v37 = v61;
  }
  else
  {
    v37 = &_swiftEmptySetSingleton;
  }
  v38 = objc_allocWithZone((Class)AAMessagingDestination);
  swift_bridgeObjectRetain(a2);
  v39 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  v40 = objc_msgSend(v38, "initWithHandle:", v39);

  if (v40)
  {
    v41 = qword_10028ADB0;
    v42 = v40;
    if (v41 != -1)
      swift_once(&qword_10028ADB0, sub_100046CC8);
    v43 = sub_100005288(v65, (uint64_t)qword_1002A8990);
    v44 = Logger.logObject.getter(v43);
    v46 = static os_log_type_t.default.getter(v45);
    if (os_log_type_enabled(v44, v46))
    {
      v47 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v47 = 0;
      _os_log_impl((void *)&_mh_execute_header, v44, v46, "Destination is valid!", v47, 2u);
      swift_slowDealloc(v47, -1, -1);
    }

    sub_1000D44F8((uint64_t)v22, v42, (uint64_t)v37);
    sub_10016E328(1, 0, 2);
    v52 = v68;
    if (v68)
      v68(0);
    swift_bridgeObjectRelease(v37);

  }
  else
  {
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v48 = sub_100005288(v65, (uint64_t)qword_1002A89D8);
    v49 = Logger.logObject.getter(v48);
    v50 = static os_log_type_t.error.getter(v49);
    v51 = os_log_type_enabled(v49, v50);
    v52 = v68;
    if (v51)
    {
      v53 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v53 = 0;
      _os_log_impl((void *)&_mh_execute_header, v49, v50, "Unable to generate destination from handle.", v53, 2u);
      swift_slowDealloc(v53, -1, -1);
    }

    type metadata accessor for AACustodianError(0);
    v55 = v54;
    v69 = -7004;
    v56 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
    v57 = sub_100041030();
    _BridgedStoredNSError.init(_:userInfo:)(&v70, &v69, v56, v55, v57);
    v58 = v70;
    v59 = v36;
    sub_10000E1C0((uint64_t)v52, a8);
    sub_100153668((uint64_t)v58, (uint64_t)v59, v52);
    sub_10000D98C((uint64_t)v52, a8);
    swift_bridgeObjectRelease(v37);

  }
  sub_100028388((uint64_t)v22, type metadata accessor for InheritanceInvitationResponseMessage);

  sub_10000D98C((uint64_t)v52, a8);
  return sub_10000D98C((uint64_t)v52, a8);
}

uint64_t sub_100153EC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint64_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint8_t *v32;
  void *v33;
  id v34;
  NSString v35;
  id v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  NSObject *v40;
  __n128 v41;
  os_log_type_t v42;
  uint8_t *v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  _BOOL4 v47;
  void (*v48)(uint64_t);
  uint8_t *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  void *v54;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(uint64_t);
  uint64_t v62;
  void *v63;

  v58 = a5;
  v60 = a2;
  v12 = type metadata accessor for InheritanceAccessKeyMessage(0);
  v14 = __chkstk_darwin(v12, v13);
  v16 = (char *)&v57 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v14, v17);
  v20 = (char *)&v57 - v19;
  v21 = (char *)&v57 + *(int *)(v18 + 20) - v19;
  v22 = type metadata accessor for UUID(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v21, a4, v22);
  sub_100027FE8(a1, (uint64_t)&v20[*(int *)(v12 + 24)], type metadata accessor for CloudShareInfo);
  *v20 = 1;
  sub_10000E1C0(a6, a7);
  v61 = (void (*)(uint64_t))a6;
  sub_10000E1C0(a6, a7);
  if (qword_10028ADD0 != -1)
    swift_once(&qword_10028ADD0, sub_100046D50);
  v59 = type metadata accessor for Logger(0);
  sub_100005288(v59, (uint64_t)qword_1002A89F0);
  v23 = sub_100027FE8((uint64_t)v20, (uint64_t)v16, type metadata accessor for InheritanceAccessKeyMessage);
  v24 = Logger.logObject.getter(v23);
  v25 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v24, v25))
  {
    v26 = swift_slowAlloc(12, -1);
    v57 = a7;
    v27 = (uint8_t *)v26;
    v28 = swift_slowAlloc(32, -1);
    v63 = (void *)v28;
    *(_DWORD *)v27 = 136315138;
    v29 = sub_1000C7E18();
    v31 = v30;
    v62 = sub_1001DEF4C(v29, v30, (uint64_t *)&v63);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, &v63);
    swift_bridgeObjectRelease(v31);
    sub_100028388((uint64_t)v16, type metadata accessor for InheritanceAccessKeyMessage);
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "Created share accessKey message - %s.\nSending....", v27, 0xCu);
    swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v28, -1, -1);
    v32 = v27;
    a7 = v57;
    swift_slowDealloc(v32, -1, -1);
  }
  else
  {
    sub_100028388((uint64_t)v16, type metadata accessor for InheritanceAccessKeyMessage);
  }

  sub_10000732C((_QWORD *)(v58 + 16), *(_QWORD *)(v58 + 40));
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0
    && _CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
  {
    sub_100154A80((uint64_t)_swiftEmptyArrayStorage, &qword_100293DB0, &qword_10028FB98, AAMessagingCapability_ptr);
    v33 = v56;
  }
  else
  {
    v33 = &_swiftEmptySetSingleton;
  }
  v34 = objc_allocWithZone((Class)AAMessagingDestination);
  swift_bridgeObjectRetain(a3);
  v35 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a3);
  v36 = objc_msgSend(v34, "initWithHandle:", v35);

  if (v36)
  {
    v37 = qword_10028ADB0;
    v38 = v36;
    if (v37 != -1)
      swift_once(&qword_10028ADB0, sub_100046CC8);
    v39 = sub_100005288(v59, (uint64_t)qword_1002A8990);
    v40 = Logger.logObject.getter(v39);
    v42 = static os_log_type_t.default.getter(v41);
    if (os_log_type_enabled(v40, v42))
    {
      v43 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v43 = 0;
      _os_log_impl((void *)&_mh_execute_header, v40, v42, "Destination is valid!", v43, 2u);
      swift_slowDealloc(v43, -1, -1);
    }

    sub_1000D4880((uint64_t)v20, v38, (uint64_t)v33);
    v48 = v61;
    if (v61)
      v61(0);
    swift_bridgeObjectRelease(v33);

  }
  else
  {
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v44 = sub_100005288(v59, (uint64_t)qword_1002A89D8);
    v45 = Logger.logObject.getter(v44);
    v46 = static os_log_type_t.error.getter(v45);
    v47 = os_log_type_enabled(v45, v46);
    v48 = v61;
    if (v47)
    {
      v49 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v49 = 0;
      _os_log_impl((void *)&_mh_execute_header, v45, v46, "Unable to generate destination from handle.", v49, 2u);
      swift_slowDealloc(v49, -1, -1);
    }

    type metadata accessor for AACustodianError(0);
    v51 = v50;
    v62 = -7004;
    v52 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
    v53 = sub_100041030();
    _BridgedStoredNSError.init(_:userInfo:)(&v63, &v62, v52, v51, v53);
    v54 = v63;
    sub_10000E1C0((uint64_t)v48, a7);
    sub_100151424((uint64_t)v54, v48, a7, "Error sending IDS Message for Share Access Key: %s");
    swift_bridgeObjectRelease(v33);

  }
  sub_100028388((uint64_t)v20, type metadata accessor for InheritanceAccessKeyMessage);
  sub_10000D98C((uint64_t)v48, a7);
  return sub_10000D98C((uint64_t)v48, a7);
}

uint64_t sub_1001544A0(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint64_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint8_t *v32;
  void *v33;
  id v34;
  NSString v35;
  id v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  NSObject *v40;
  __n128 v41;
  os_log_type_t v42;
  uint8_t *v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  _BOOL4 v47;
  void (*v48)(uint64_t);
  uint8_t *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  void *v54;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(uint64_t);
  uint64_t v62;
  void *v63;

  v58 = a5;
  v60 = a1;
  v12 = type metadata accessor for InheritanceInvitationResponseMessage(0);
  v14 = __chkstk_darwin(v12, v13);
  v16 = (char *)&v57 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v14, v17);
  v20 = (char *)&v57 - v19;
  v21 = (char *)&v57 + *(int *)(v18 + 20) - v19;
  v22 = type metadata accessor for UUID(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 16))(v21, a3, v22);
  *v20 = 0;
  v20[*(int *)(v12 + 24)] = a4;
  sub_10000E1C0(a6, a7);
  v61 = (void (*)(uint64_t))a6;
  sub_10000E1C0(a6, a7);
  if (qword_10028ADD0 != -1)
    swift_once(&qword_10028ADD0, sub_100046D50);
  v59 = type metadata accessor for Logger(0);
  sub_100005288(v59, (uint64_t)qword_1002A89F0);
  v23 = sub_100027FE8((uint64_t)v20, (uint64_t)v16, type metadata accessor for InheritanceInvitationResponseMessage);
  v24 = Logger.logObject.getter(v23);
  v25 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v24, v25))
  {
    v26 = swift_slowAlloc(12, -1);
    v57 = a7;
    v27 = (uint8_t *)v26;
    v28 = swift_slowAlloc(32, -1);
    v63 = (void *)v28;
    *(_DWORD *)v27 = 136315138;
    v29 = sub_1001A55B8();
    v31 = v30;
    v62 = sub_1001DEF4C(v29, v30, (uint64_t *)&v63);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, &v63);
    swift_bridgeObjectRelease(v31);
    sub_100028388((uint64_t)v16, type metadata accessor for InheritanceInvitationResponseMessage);
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "Created invitation response message - %s.\nResponding to invitation...", v27, 0xCu);
    swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v28, -1, -1);
    v32 = v27;
    a7 = v57;
    swift_slowDealloc(v32, -1, -1);
  }
  else
  {
    sub_100028388((uint64_t)v16, type metadata accessor for InheritanceInvitationResponseMessage);
  }

  sub_10000732C((_QWORD *)(v58 + 16), *(_QWORD *)(v58 + 40));
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0
    && _CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
  {
    sub_100154A80((uint64_t)_swiftEmptyArrayStorage, &qword_100293DB0, &qword_10028FB98, AAMessagingCapability_ptr);
    v33 = v56;
  }
  else
  {
    v33 = &_swiftEmptySetSingleton;
  }
  v34 = objc_allocWithZone((Class)AAMessagingDestination);
  swift_bridgeObjectRetain(a2);
  v35 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  v36 = objc_msgSend(v34, "initWithHandle:", v35);

  if (v36)
  {
    v37 = qword_10028ADB0;
    v38 = v36;
    if (v37 != -1)
      swift_once(&qword_10028ADB0, sub_100046CC8);
    v39 = sub_100005288(v59, (uint64_t)qword_1002A8990);
    v40 = Logger.logObject.getter(v39);
    v42 = static os_log_type_t.default.getter(v41);
    if (os_log_type_enabled(v40, v42))
    {
      v43 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v43 = 0;
      _os_log_impl((void *)&_mh_execute_header, v40, v42, "Destination is valid!", v43, 2u);
      swift_slowDealloc(v43, -1, -1);
    }

    sub_1000D44F8((uint64_t)v20, v38, (uint64_t)v33);
    v48 = v61;
    if (v61)
      v61(0);
    swift_bridgeObjectRelease(v33);

  }
  else
  {
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v44 = sub_100005288(v59, (uint64_t)qword_1002A89D8);
    v45 = Logger.logObject.getter(v44);
    v46 = static os_log_type_t.error.getter(v45);
    v47 = os_log_type_enabled(v45, v46);
    v48 = v61;
    if (v47)
    {
      v49 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v49 = 0;
      _os_log_impl((void *)&_mh_execute_header, v45, v46, "Unable to generate destination from handle.", v49, 2u);
      swift_slowDealloc(v49, -1, -1);
    }

    type metadata accessor for AACustodianError(0);
    v51 = v50;
    v62 = -7004;
    v52 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
    v53 = sub_100041030();
    _BridgedStoredNSError.init(_:userInfo:)(&v63, &v62, v52, v51, v53);
    v54 = v63;
    sub_10000E1C0((uint64_t)v48, a7);
    sub_100151424((uint64_t)v54, v48, a7, "Error sending IDS Message for Inheritance Invitation Response: %s");
    swift_bridgeObjectRelease(v33);

  }
  sub_100028388((uint64_t)v20, type metadata accessor for InheritanceInvitationResponseMessage);
  sub_10000D98C((uint64_t)v48, a7);
  return sub_10000D98C((uint64_t)v48, a7);
}

void sub_100154A64(uint64_t a1)
{
  sub_100154A80(a1, &qword_100293DB8, &qword_100297580, UNNotificationCategory_ptr);
}

void sub_100154A80(uint64_t a1, uint64_t *a2, unint64_t *a3, _QWORD *a4)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  Swift::Int v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  char v24;
  uint64_t v25;
  id v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  Swift::Int v31;
  id v32;
  Swift::Int v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  char v40;
  uint64_t v41;
  id v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v50;

  v5 = a1;
  v6 = (unint64_t)a1 >> 62;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v10 = a1;
    else
      v10 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v7 = _CocoaArrayWrapper.endIndex.getter(v10);
    swift_bridgeObjectRelease(v5);
    if (v7)
    {
LABEL_3:
      sub_1000080B4(a2);
      v8 = (_QWORD *)static _SetStorage.allocate(capacity:)(v7);
      if (!v6)
        goto LABEL_4;
LABEL_11:
      if (v5 < 0)
        v11 = v5;
      else
        v11 = v5 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v5);
      v9 = _CocoaArrayWrapper.endIndex.getter(v11);
      swift_bridgeObjectRelease(v5);
      if (!v9)
        return;
      goto LABEL_15;
    }
  }
  else
  {
    v7 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v7)
      goto LABEL_3;
  }
  v8 = &_swiftEmptySetSingleton;
  if (v6)
    goto LABEL_11;
LABEL_4:
  v9 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v9)
    return;
LABEL_15:
  v12 = (char *)(v8 + 7);
  v50 = v9;
  if ((v5 & 0xC000000000000001) != 0)
  {
    v13 = 0;
    v46 = v5;
    while (1)
    {
      v14 = specialized _ArrayBuffer._getElementSlowPath(_:)(v13, v5);
      v15 = __OFADD__(v13++, 1);
      if (v15)
      {
        __break(1u);
        goto LABEL_43;
      }
      v16 = v14;
      v17 = NSObject._rawHashValue(seed:)(v8[5]);
      v18 = -1 << *((_BYTE *)v8 + 32);
      v19 = v17 & ~v18;
      v20 = v19 >> 6;
      v21 = *(_QWORD *)&v12[8 * (v19 >> 6)];
      v22 = 1 << v19;
      if (((1 << v19) & v21) != 0)
      {
        sub_1000067D4(0, a3, a4);
        v23 = *(id *)(v8[6] + 8 * v19);
        v24 = static NSObject.== infix(_:_:)(v23, v16);

        if ((v24 & 1) != 0)
        {
LABEL_17:
          swift_unknownObjectRelease(v16);
          v5 = v46;
          goto LABEL_18;
        }
        v25 = ~v18;
        while (1)
        {
          v19 = (v19 + 1) & v25;
          v20 = v19 >> 6;
          v21 = *(_QWORD *)&v12[8 * (v19 >> 6)];
          v22 = 1 << v19;
          if ((v21 & (1 << v19)) == 0)
            break;
          v26 = *(id *)(v8[6] + 8 * v19);
          v27 = static NSObject.== infix(_:_:)(v26, v16);

          if ((v27 & 1) != 0)
            goto LABEL_17;
        }
        v5 = v46;
      }
      *(_QWORD *)&v12[8 * v20] = v22 | v21;
      *(_QWORD *)(v8[6] + 8 * v19) = v16;
      v28 = v8[2];
      v15 = __OFADD__(v28, 1);
      v29 = v28 + 1;
      if (v15)
        goto LABEL_44;
      v8[2] = v29;
LABEL_18:
      if (v13 == v50)
        return;
    }
  }
  v30 = 0;
  v47 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (v30 != v47)
  {
    v31 = v8[5];
    v32 = *(id *)(v5 + 32 + 8 * v30);
    v33 = NSObject._rawHashValue(seed:)(v31);
    v34 = -1 << *((_BYTE *)v8 + 32);
    v35 = v33 & ~v34;
    v36 = v35 >> 6;
    v37 = *(_QWORD *)&v12[8 * (v35 >> 6)];
    v38 = 1 << v35;
    if (((1 << v35) & v37) != 0)
    {
      sub_1000067D4(0, a3, a4);
      v39 = *(id *)(v8[6] + 8 * v35);
      v40 = static NSObject.== infix(_:_:)(v39, v32);

      if ((v40 & 1) != 0)
        goto LABEL_30;
      v41 = ~v34;
      v35 = (v35 + 1) & v41;
      v36 = v35 >> 6;
      v37 = *(_QWORD *)&v12[8 * (v35 >> 6)];
      v38 = 1 << v35;
      if ((v37 & (1 << v35)) != 0)
      {
        while (1)
        {
          v42 = *(id *)(v8[6] + 8 * v35);
          v43 = static NSObject.== infix(_:_:)(v42, v32);

          if ((v43 & 1) != 0)
            break;
          v35 = (v35 + 1) & v41;
          v36 = v35 >> 6;
          v37 = *(_QWORD *)&v12[8 * (v35 >> 6)];
          v38 = 1 << v35;
          if ((v37 & (1 << v35)) == 0)
            goto LABEL_38;
        }
LABEL_30:

        v9 = v50;
        goto LABEL_31;
      }
LABEL_38:
      v9 = v50;
    }
    *(_QWORD *)&v12[8 * v36] = v38 | v37;
    *(_QWORD *)(v8[6] + 8 * v35) = v32;
    v44 = v8[2];
    v15 = __OFADD__(v44, 1);
    v45 = v44 + 1;
    if (v15)
      goto LABEL_45;
    v8[2] = v45;
LABEL_31:
    if (++v30 == v9)
      return;
  }
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
}

uint64_t sub_100154DE4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100154E08(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[5];
  uint64_t v7;

  v3 = *v2;
  if (qword_10028AEA0 != -1)
    a1 = swift_once(&qword_10028AEA0, sub_100155010);
  __chkstk_darwin(a1, a2);
  v6[2] = v3;
  v4 = sub_1000080B4(&qword_100293E68);
  OS_dispatch_queue.sync<A>(execute:)(&v7, sub_100155AB0, v6, v4);
  return v7;
}

uint64_t sub_100154EB8(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD v10[5];
  uint64_t v11;

  v3 = *v1;
  if (qword_10028AEA0 != -1)
    swift_once(&qword_10028AEA0, sub_100155010);
  v4 = qword_100293DC8;
  v5 = swift_allocObject(&unk_10026A7F8, 32, 7);
  *(_QWORD *)(v5 + 16) = a1;
  *(_QWORD *)(v5 + 24) = v3;
  v6 = swift_allocObject(&unk_10026A820, 32, 7);
  *(_QWORD *)(v6 + 16) = sub_100155A98;
  *(_QWORD *)(v6 + 24) = v5;
  v10[4] = sub_1000A26B8;
  v11 = v6;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 1107296256;
  v10[2] = sub_10002B11C;
  v10[3] = &unk_10026A838;
  v7 = _Block_copy(v10);
  v8 = v11;
  swift_bridgeObjectRetain(a1);
  swift_retain(v6);
  swift_release(v8);
  dispatch_sync(v4, v7);
  _Block_release(v7);
  LOBYTE(v4) = swift_isEscapingClosureAtFileLocation(v6, "", 119, 45, 31, 1);
  swift_release(v5);
  result = swift_release(v6);
  if ((v4 & 1) != 0)
    __break(1u);
  return result;
}

uint64_t sub_100155010()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t result;
  uint64_t v18;
  _QWORD *v19;

  v0 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0, v2);
  v4 = (char *)&v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v5, v6);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v9, v10);
  v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100007764();
  static DispatchQoS.unspecified.getter(v13);
  v19 = _swiftEmptyArrayStorage;
  v14 = sub_10002E470();
  v15 = sub_1000080B4(&qword_10028B9F0);
  v16 = sub_100155A28();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v19, v15, v16, v5, v14);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v4, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v0);
  result = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000033, 0x800000010020DC30, v12, v8, v4, 0);
  qword_100293DC8 = result;
  return result;
}

void sub_1001551A0(unint64_t *a1@<X8>)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  id v8;
  void *v9;
  unint64_t v10;
  __n128 v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint8_t *v25;
  os_log_type_t v26;
  uint8_t *v27;
  _QWORD v28[2];
  uint64_t v29[5];
  __int128 v30;
  __int128 v31;
  unint64_t *v32;

  v2 = sub_100016520((uint64_t)_swiftEmptyArrayStorage);
  if (qword_10028ADE0 != -1)
    swift_once(&qword_10028ADE0, sub_100046DA0);
  v3 = type metadata accessor for Logger(0);
  v4 = sub_100005288(v3, (uint64_t)qword_1002A8A20);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.debug.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Preflight results are being fetched from UserDefaults", v7, 2u);
    swift_slowDealloc(v7, -1, -1);
  }

  v8 = objc_msgSend((id)objc_opt_self(AAPreferences), "getCustodianInfo");
  if (v8)
  {
    v9 = v8;
    v10 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v8, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);

  }
  else
  {
    v10 = sub_100016630((uint64_t)_swiftEmptyArrayStorage);
  }
  v28[0] = 0xD000000000000010;
  v28[1] = 0x800000010020DC10;
  AnyHashable.init<A>(_:)(v29, v28, &type metadata for String, &protocol witness table for String, v11);
  if (*(_QWORD *)(v10 + 16) && (v12 = sub_10010AAE0((uint64_t)v29), (v13 & 1) != 0))
  {
    sub_1000244B0(*(_QWORD *)(v10 + 56) + 32 * v12, (uint64_t)&v30);
  }
  else
  {
    v30 = 0u;
    v31 = 0u;
  }
  swift_bridgeObjectRelease(v10);
  sub_1000839B4((uint64_t)v29);
  if (*((_QWORD *)&v31 + 1))
  {
    v14 = sub_1000080B4(&qword_100293E68);
    v15 = swift_dynamicCast(v28, &v30, (char *)&type metadata for Any + 8, v14, 6);
    if ((v15 & 1) != 0)
    {
      swift_bridgeObjectRelease(v2);
      v2 = v28[0];
      v16 = swift_bridgeObjectRetain_n(v28[0], 2);
      v17 = Logger.logObject.getter(v16);
      v18 = static os_log_type_t.debug.getter(v17);
      if (!os_log_type_enabled(v17, v18))
      {

        swift_bridgeObjectRelease_n(v2, 2);
        goto LABEL_21;
      }
      v19 = (uint8_t *)swift_slowAlloc(12, -1);
      v20 = swift_slowAlloc(32, -1);
      v29[0] = v20;
      v32 = a1;
      *(_DWORD *)v19 = 136315138;
      swift_bridgeObjectRetain(v2);
      v22 = Dictionary.description.getter(v21, &type metadata for String, &type metadata for Bool, &protocol witness table for String);
      v24 = v23;
      swift_bridgeObjectRelease(v2);
      *(_QWORD *)&v30 = sub_1001DEF4C(v22, v24, v29);
      a1 = v32;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, (char *)&v30 + 8);
      swift_bridgeObjectRelease_n(v2, 2);
      swift_bridgeObjectRelease(v24);
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Preflight results fetched from UserDefaults %s", v19, 0xCu);
      swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v20, -1, -1);
      v25 = v19;
      goto LABEL_19;
    }
  }
  else
  {
    v15 = sub_10008C388((uint64_t)&v30);
  }
  v17 = Logger.logObject.getter(v15);
  v26 = static os_log_type_t.debug.getter(v17);
  if (os_log_type_enabled(v17, v26))
  {
    v27 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v27 = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, v26, "Preflight results not found in UserDefaults", v27, 2u);
    v25 = v27;
LABEL_19:
    swift_slowDealloc(v25, -1, -1);
  }

LABEL_21:
  *a1 = v2;
}

void sub_100155594(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  void *v12;
  id v13;
  void *v14;
  unint64_t v15;
  __n128 v16;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v18;
  Class isa;
  _OWORD v20[2];
  __int128 v21;
  uint64_t v22;
  uint64_t v23[5];

  if (qword_10028ADE0 != -1)
    swift_once(&qword_10028ADE0, sub_100046DA0);
  v2 = type metadata accessor for Logger(0);
  sub_100005288(v2, (uint64_t)qword_1002A8A20);
  v3 = swift_bridgeObjectRetain_n(a1, 2);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.debug.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v23[0] = v7;
    *(_DWORD *)v6 = 136315138;
    swift_bridgeObjectRetain(a1);
    v9 = Dictionary.description.getter(v8, &type metadata for String, &type metadata for Bool, &protocol witness table for String);
    v11 = v10;
    swift_bridgeObjectRelease(a1);
    *(_QWORD *)&v21 = sub_1001DEF4C(v9, v11, v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, (char *)&v21 + 8);
    swift_bridgeObjectRelease_n(a1, 2);
    swift_bridgeObjectRelease(v11);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Preflight results are being set in UserDefaults: %s", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a1, 2);
  }
  v12 = (void *)objc_opt_self(AAPreferences);
  v13 = objc_msgSend(v12, "getCustodianInfo");
  if (v13)
  {
    v14 = v13;
    v15 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v13, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);

  }
  else
  {
    v15 = sub_100016630((uint64_t)_swiftEmptyArrayStorage);
  }
  *(_QWORD *)&v21 = 0xD000000000000010;
  *((_QWORD *)&v21 + 1) = 0x800000010020DC10;
  AnyHashable.init<A>(_:)(v23, &v21, &type metadata for String, &protocol witness table for String, v16);
  v22 = sub_1000080B4(&qword_100293E68);
  *(_QWORD *)&v21 = a1;
  sub_1000080F4(&v21, v20);
  swift_bridgeObjectRetain(a1);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v15);
  sub_10001FF50(v20, (uint64_t)v23, isUniquelyReferenced_nonNull_native);
  v18 = v15;
  swift_bridgeObjectRelease(0x8000000000000000);
  sub_1000839B4((uint64_t)v23);
  if (*(_QWORD *)(v15 + 16))
  {
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v18);
    objc_msgSend(v12, "setCustodianInfo:", isa);

  }
  else
  {
    swift_bridgeObjectRelease(v15);
  }
}

uint64_t sub_1001558B0(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  unint64_t v10;
  char v11;
  int v12;
  _QWORD v14[5];
  uint64_t v15;

  v4 = a1;
  v5 = *v2;
  if (qword_10028AEA0 != -1)
    a1 = swift_once(&qword_10028AEA0, sub_100155010);
  __chkstk_darwin(a1, a2);
  v14[2] = v5;
  v6 = sub_1000080B4(&qword_100293E68);
  OS_dispatch_queue.sync<A>(execute:)(&v15, sub_100155A10, v14, v6);
  v7 = v15;
  if (!*(_QWORD *)(v15 + 16))
    goto LABEL_9;
  swift_bridgeObjectRetain(v15);
  sub_10010A9E0(v4, a2);
  v9 = v8;
  swift_bridgeObjectRelease(v7);
  if (!*(_QWORD *)(v7 + 16))
    goto LABEL_9;
  swift_bridgeObjectRetain(a2);
  v10 = sub_10010A9E0(v4, a2);
  if ((v11 & 1) == 0)
  {
    swift_bridgeObjectRelease(a2);
LABEL_9:
    swift_bridgeObjectRelease(v7);
    return 0;
  }
  v12 = *(unsigned __int8 *)(*(_QWORD *)(v7 + 56) + v10);
  swift_bridgeObjectRelease(a2);
  swift_bridgeObjectRelease(v7);
  if ((v9 & 1) != 0)
    return v12 ^ 1u;
  return 0;
}

uint64_t type metadata accessor for CustodianDefaults()
{
  return objc_opt_self(_TtC13appleaccountd17CustodianDefaults);
}

void sub_100155A10(unint64_t *a1@<X8>)
{
  sub_1001551A0(a1);
}

unint64_t sub_100155A28()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10028C6E0;
  if (!qword_10028C6E0)
  {
    v1 = sub_10000D908(&qword_10028B9F0);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_10028C6E0);
  }
  return result;
}

uint64_t sub_100155A74()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 32, 7);
}

void sub_100155A98()
{
  uint64_t v0;

  sub_100155594(*(_QWORD *)(v0 + 16));
}

uint64_t sub_100155AA0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_100155AB0(unint64_t *a1@<X8>)
{
  sub_100155A10(a1);
}

uint64_t sub_100155AC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  _QWORD *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD aBlock[5];
  _QWORD *v32;

  v6 = v5;
  v12 = type metadata accessor for DispatchWorkItemFlags(0);
  v29 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12, v13);
  v15 = (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = type metadata accessor for DispatchQoS(0);
  v16 = *(_QWORD *)(v28 - 8);
  __chkstk_darwin(v28, v17);
  v19 = (char *)&v27 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = *(_QWORD *)(v6 + 16);
  v20 = (_QWORD *)swift_allocObject(&unk_10026A8F0, 64, 7);
  v20[2] = a3;
  v20[3] = v6;
  v20[4] = a1;
  v20[5] = a2;
  v20[6] = a4;
  v20[7] = a5;
  aBlock[4] = sub_100156420;
  v32 = v20;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000051D0;
  aBlock[3] = &unk_10026A908;
  v21 = _Block_copy(aBlock);
  swift_errorRetain(a3);
  swift_retain(v6);
  swift_bridgeObjectRetain(a2);
  v22 = swift_retain(a5);
  static DispatchQoS.unspecified.getter(v22);
  v30 = _swiftEmptyArrayStorage;
  v23 = sub_100005150((unint64_t *)&qword_10028CD20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v24 = sub_1000080B4((uint64_t *)&unk_100295A00);
  v25 = sub_1000077A0((unint64_t *)&qword_10028CD30, (uint64_t *)&unk_100295A00);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v30, v24, v25, v12, v23);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v19, v15, v21);
  _Block_release(v21);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v15, v12);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v19, v28);
  return swift_release(v32);
}

uint64_t sub_100155CE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t))
{
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v16;
  uint64_t v18;
  _BYTE v19[24];

  v10 = (void *)_convertErrorToNSError(_:)(a1);
  v11 = objc_msgSend(v10, "aa_partialErrorsByName");

  if (!v11)
    goto LABEL_5;
  v12 = sub_1000080B4(&qword_10028E850);
  v13 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v11, &type metadata for String, v12, &protocol witness table for String);

  if (!*(_QWORD *)(v13 + 16))
  {
    swift_bridgeObjectRelease(v13);
LABEL_5:
    swift_beginAccess(a2 + 24, v19, 33, 0);
    swift_bridgeObjectRetain(a4);
    swift_errorRetain(a1);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(a2 + 24));
    v18 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a2 + 24) = 0x8000000000000000;
    sub_10001F710(a1, a3, a4, isUniquelyReferenced_nonNull_native);
    v16 = *(_QWORD *)(a2 + 24);
    *(_QWORD *)(a2 + 24) = v18;
    swift_bridgeObjectRelease(a4);
    swift_bridgeObjectRelease(v16);
    v14 = swift_endAccess(v19);
    return a5(v14);
  }
  swift_retain(a2);
  swift_bridgeObjectRetain(a4);
  sub_100156430(v13, a2, a3, a4);
  swift_bridgeObjectRelease(v13);
  swift_release(a2);
  v14 = swift_bridgeObjectRelease(a4);
  return a5(v14);
}

uint64_t sub_100155E5C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  _QWORD *v23;
  _QWORD aBlock[5];
  _QWORD *v25;

  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = *(_QWORD *)(v2 + 16);
  v15 = (_QWORD *)swift_allocObject(&unk_10026A8A0, 40, 7);
  v15[2] = v2;
  v15[3] = a1;
  v15[4] = a2;
  aBlock[4] = sub_1001563D8;
  v25 = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000051D0;
  aBlock[3] = &unk_10026A8B8;
  v16 = _Block_copy(aBlock);
  swift_retain(v2);
  v17 = swift_retain(a2);
  static DispatchQoS.unspecified.getter(v17);
  v23 = _swiftEmptyArrayStorage;
  v18 = sub_100005150((unint64_t *)&qword_10028CD20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v19 = sub_1000080B4((uint64_t *)&unk_100295A00);
  v20 = sub_1000077A0((unint64_t *)&qword_10028CD30, (uint64_t *)&unk_100295A00);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v23, v19, v20, v5, v18);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v14, v9, v16);
  _Block_release(v16);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  return swift_release(v25);
}

void sub_100156054(uint64_t a1, void (*a2)(id))
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t inited;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  id v13;
  id v14;
  _BYTE v15[80];
  uint64_t v16;
  id v17;
  _BYTE v18[24];

  v4 = (uint64_t *)(a1 + 24);
  swift_beginAccess(a1 + 24, v18, 0, 0);
  if (*(_QWORD *)(*(_QWORD *)(a1 + 24) + 16))
  {
    type metadata accessor for AAError(0);
    v6 = v5;
    v16 = -4408;
    v7 = sub_1000080B4(&qword_10028BB68);
    inited = swift_initStackObject(v7, v15);
    *(_OWORD *)(inited + 16) = xmmword_100218E30;
    *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(AAPartialErrorsByNameKey);
    *(_QWORD *)(inited + 40) = v9;
    v10 = *v4;
    *(_QWORD *)(inited + 72) = sub_1000080B4((uint64_t *)&unk_10028CD40);
    *(_QWORD *)(inited + 48) = v10;
    swift_bridgeObjectRetain(v10);
    v11 = sub_100015894(inited);
    v12 = sub_100005150((unint64_t *)&qword_10028B6B0, (uint64_t (*)(uint64_t))type metadata accessor for AAError, (uint64_t)&unk_100218588);
    _BridgedStoredNSError.init(_:userInfo:)(&v17, &v16, v11, v6, v12);
    v13 = v17;
    v14 = v17;
    a2(v13);

  }
  else
  {
    a2(0);
  }
}

uint64_t sub_100156194()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocClassInstance(v0, 32, 7);
}

uint64_t type metadata accessor for PartialErrorHandler()
{
  return objc_opt_self(_TtC13appleaccountd19PartialErrorHandler);
}

uint64_t sub_1001561E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  _QWORD *v21;

  v1 = v0;
  v2 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v2, v3);
  v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v6, v7);
  v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  v14 = (char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100007764();
  v15 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v11 + 104))(v14, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v10);
  static DispatchQoS.unspecified.getter(v15);
  v21 = _swiftEmptyArrayStorage;
  v16 = sub_100005150((unint64_t *)&qword_10028C6D0, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v17 = sub_1000080B4(&qword_10028B9F0);
  v18 = sub_1000077A0((unint64_t *)&qword_10028C6E0, &qword_10028B9F0);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v21, v17, v18, v2, v16);
  *(_QWORD *)(v1 + 16) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000027, 0x800000010020DCC0, v9, v5, v14, 0);
  *(_QWORD *)(v1 + 24) = sub_10001577C((uint64_t)_swiftEmptyArrayStorage);
  return v1;
}

uint64_t sub_1001563AC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

void sub_1001563D8()
{
  uint64_t v0;

  sub_100156054(*(_QWORD *)(v0 + 16), *(void (**)(id))(v0 + 24));
}

uint64_t sub_1001563E4()
{
  _QWORD *v0;

  swift_errorRelease(v0[2]);
  swift_release(v0[3]);
  swift_bridgeObjectRelease(v0[5]);
  swift_release(v0[7]);
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_100156420()
{
  uint64_t v0;

  return sub_100155CE0(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(uint64_t (**)(uint64_t))(v0 + 48));
}

uint64_t sub_100156430(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  int64_t i;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  Swift::String v20;
  Swift::String v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t isUniquelyReferenced_nonNull_native;
  _QWORD *v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  _BOOL8 v29;
  uint64_t v30;
  char v31;
  unint64_t v32;
  char v33;
  _QWORD *v34;
  uint64_t *v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t result;
  uint64_t v40;
  int64_t v41;
  uint64_t v45;
  int64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;

  v4 = 1 << *(_BYTE *)(a1 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(a1 + 64);
  v7 = (_QWORD *)(a2 + 24);
  v41 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  for (i = 0; ; i = v46)
  {
    if (v6)
    {
      v45 = (v6 - 1) & v6;
      v46 = i;
      v11 = __clz(__rbit64(v6)) | (i << 6);
    }
    else
    {
      v12 = i + 1;
      if (__OFADD__(i, 1))
        goto LABEL_38;
      if (v12 >= v41)
        return swift_release(a1);
      v13 = *(_QWORD *)(v40 + 8 * v12);
      v14 = i + 1;
      if (!v13)
      {
        v14 = i + 2;
        if (i + 2 >= v41)
          return swift_release(a1);
        v13 = *(_QWORD *)(v40 + 8 * v14);
        if (!v13)
        {
          v14 = i + 3;
          if (i + 3 >= v41)
            return swift_release(a1);
          v13 = *(_QWORD *)(v40 + 8 * v14);
          if (!v13)
          {
            v14 = i + 4;
            if (i + 4 >= v41)
              return swift_release(a1);
            v13 = *(_QWORD *)(v40 + 8 * v14);
            if (!v13)
            {
              v15 = i + 5;
              if (i + 5 >= v41)
                return swift_release(a1);
              v13 = *(_QWORD *)(v40 + 8 * v15);
              if (!v13)
              {
                while (1)
                {
                  v14 = v15 + 1;
                  if (__OFADD__(v15, 1))
                    goto LABEL_39;
                  if (v14 >= v41)
                    return swift_release(a1);
                  v13 = *(_QWORD *)(v40 + 8 * v14);
                  ++v15;
                  if (v13)
                    goto LABEL_23;
                }
              }
              v14 = i + 5;
            }
          }
        }
      }
LABEL_23:
      v45 = (v13 - 1) & v13;
      v46 = v14;
      v11 = __clz(__rbit64(v13)) + (v14 << 6);
    }
    v16 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v11);
    v17 = *v16;
    v18 = (void *)v16[1];
    v19 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v11);
    v47 = a3;
    v48 = a4;
    swift_bridgeObjectRetain(v18);
    swift_errorRetain(v19);
    swift_bridgeObjectRetain(a4);
    v20._countAndFlagsBits = 59;
    v20._object = (void *)0xE100000000000000;
    String.append(_:)(v20);
    v21._countAndFlagsBits = v17;
    v21._object = v18;
    String.append(_:)(v21);
    v22 = v47;
    v23 = v48;
    swift_beginAccess(v7, &v47, 33, 0);
    swift_errorRetain(v19);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v7);
    v49 = (_QWORD *)*v7;
    v25 = v49;
    *v7 = 0x8000000000000000;
    v27 = sub_10010A9E0(v22, v23);
    v28 = v25[2];
    v29 = (v26 & 1) == 0;
    v30 = v28 + v29;
    if (__OFADD__(v28, v29))
      break;
    v31 = v26;
    if (v25[3] >= v30)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        v34 = v49;
        if ((v26 & 1) != 0)
          goto LABEL_4;
      }
      else
      {
        sub_10002041C();
        v34 = v49;
        if ((v31 & 1) != 0)
          goto LABEL_4;
      }
    }
    else
    {
      sub_10001D3E4(v30, isUniquelyReferenced_nonNull_native);
      v32 = sub_10010A9E0(v22, v23);
      if ((v31 & 1) != (v33 & 1))
        goto LABEL_40;
      v27 = v32;
      v34 = v49;
      if ((v31 & 1) != 0)
      {
LABEL_4:
        v9 = v34[7];
        swift_errorRelease(*(_QWORD *)(v9 + 8 * v27));
        *(_QWORD *)(v9 + 8 * v27) = v19;
        goto LABEL_5;
      }
    }
    v34[(v27 >> 6) + 8] |= 1 << v27;
    v35 = (uint64_t *)(v34[6] + 16 * v27);
    *v35 = v22;
    v35[1] = v23;
    *(_QWORD *)(v34[7] + 8 * v27) = v19;
    v36 = v34[2];
    v37 = __OFADD__(v36, 1);
    v38 = v36 + 1;
    if (v37)
      goto LABEL_37;
    v34[2] = v38;
    swift_bridgeObjectRetain(v23);
LABEL_5:
    v10 = *v7;
    *v7 = v34;
    swift_bridgeObjectRelease(v23);
    swift_bridgeObjectRelease(v10);
    swift_endAccess(&v47);
    swift_bridgeObjectRelease(v18);
    swift_errorRelease(v19);
    v6 = v45;
  }
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

uint64_t sub_1001567A0()
{
  uint64_t v0;

  sub_100156B34();
  return swift_deallocClassInstance(v0, 24, 7);
}

void sub_1001567C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  NSObject *v16;
  uint64_t v17;
  void *v18;
  int *v19;
  uint64_t v20;
  NSObject *v21;
  _QWORD aBlock[5];
  uint64_t v23;

  v1 = v0;
  v2 = type metadata accessor for DispatchQoS.QoSClass(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(v0 + 16) & 1) != 0)
  {
    if (qword_10028ADB0 != -1)
      swift_once(&qword_10028ADB0, sub_100046CC8);
    v7 = type metadata accessor for Logger(0);
    v8 = sub_100005288(v7, (uint64_t)qword_1002A8990);
    v21 = Logger.logObject.getter(v8);
    v9 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v21, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, v9, "Already registered XPC observer.", v10, 2u);
      swift_slowDealloc(v10, -1, -1);
    }

  }
  else
  {
    if (qword_10028ADB0 != -1)
      swift_once(&qword_10028ADB0, sub_100046CC8);
    v11 = type metadata accessor for Logger(0);
    v12 = sub_100005288(v11, (uint64_t)qword_1002A8990);
    v13 = Logger.logObject.getter(v12);
    v14 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Registering XPC observer.", v15, 2u);
      swift_slowDealloc(v15, -1, -1);
    }

    *(_BYTE *)(v1 + 16) = 1;
    sub_100007764();
    (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v6, enum case for DispatchQoS.QoSClass.userInitiated(_:), v2);
    v16 = static OS_dispatch_queue.global(qos:)(v6);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
    v17 = swift_allocObject(&unk_10026A940, 24, 7);
    swift_weakInit(v17 + 16, v1);
    aBlock[4] = sub_100156D38;
    v23 = v17;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100156AF8;
    aBlock[3] = &unk_10026A958;
    v18 = _Block_copy(aBlock);
    swift_release(v23);
    v19 = (int *)(v1 + 20);
    swift_beginAccess(v19, aBlock, 33, 0);
    notify_register_dispatch("com.apple.jett.switch.environmentChange.idms.complete", v19, v16, v18);
    swift_endAccess(aBlock);
    _Block_release(v18);

  }
}

uint64_t sub_100156AA4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  _BYTE v5[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v5, 0, 0);
  result = swift_weakLoadStrong(v2);
  if (result)
  {
    v4 = result;
    -[XPCNotificationObserver didChangeEnvironment]_0();
    return swift_release(v4);
  }
  return result;
}

uint64_t sub_100156AF8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void (*v4)(uint64_t);

  v4 = *(void (**)(uint64_t))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v4(a2);
  return swift_release(v3);
}

void sub_100156B34()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  os_log_type_t v9;
  uint8_t *v10;
  NSObject *oslog;
  _BYTE v12[24];

  if (*(_BYTE *)(v0 + 16) == 1)
  {
    v1 = v0;
    if (qword_10028ADB0 != -1)
      swift_once(&qword_10028ADB0, sub_100046CC8);
    v2 = type metadata accessor for Logger(0);
    v3 = sub_100005288(v2, (uint64_t)qword_1002A8990);
    v4 = Logger.logObject.getter(v3);
    v5 = static os_log_type_t.debug.getter(v4);
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Canceling XPC observer.", v6, 2u);
      swift_slowDealloc(v6, -1, -1);
    }

    *(_BYTE *)(v1 + 16) = 0;
    swift_beginAccess(v1 + 20, v12, 0, 0);
    notify_cancel(*(_DWORD *)(v1 + 20));
  }
  else
  {
    if (qword_10028ADB0 != -1)
      swift_once(&qword_10028ADB0, sub_100046CC8);
    v7 = type metadata accessor for Logger(0);
    v8 = sub_100005288(v7, (uint64_t)qword_1002A8990);
    oslog = Logger.logObject.getter(v8);
    v9 = static os_log_type_t.debug.getter(oslog);
    if (os_log_type_enabled(oslog, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v9, "Already canceled XPC observer.", v10, 2u);
      swift_slowDealloc(v10, -1, -1);
    }

  }
}

uint64_t type metadata accessor for XPCNotificationObserver()
{
  return objc_opt_self(_TtC13appleaccountd23XPCNotificationObserver);
}

uint64_t sub_100156D14()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100156D38(uint64_t a1)
{
  uint64_t v1;

  return sub_100156AA4(a1, v1);
}

uint64_t sub_100156E48(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  _QWORD *v11;

  v3 = v2;
  if (qword_10028AE00 != -1)
    swift_once(&qword_10028AE00, sub_100046E2C);
  v6 = type metadata accessor for Logger(0);
  v7 = sub_100005288(v6, (uint64_t)qword_1002A8A80);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Benefactor Manatee migration started.", v10, 2u);
    swift_slowDealloc(v10, -1, -1);
  }

  sub_10000732C((_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 40));
  v11 = (_QWORD *)swift_allocObject(&unk_10026A9A0, 40, 7);
  v11[2] = a1;
  v11[3] = a2;
  v11[4] = v3;
  swift_retain(a2);
  swift_retain(v3);
  sub_1000CC71C((uint64_t)sub_100157F9C, (uint64_t)v11);
  return swift_release(v11);
}

uint64_t sub_100156F80(uint64_t a1, char a2, void (*a3)(_QWORD), uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  _QWORD *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint64_t v40;
  uint8_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint8_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  void (*v54)(_QWORD);
  _QWORD *v55;
  uint64_t aBlock[5];
  _QWORD *v57;

  v10 = type metadata accessor for DispatchWorkItemFlags(0);
  v53 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10, v11);
  v52 = (char *)&v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DispatchQoS(0);
  v50 = *(_QWORD *)(v13 - 8);
  v51 = v13;
  __chkstk_darwin(v13, v14);
  v16 = (char *)&v48 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for DispatchQoS.QoSClass(0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17, v19);
  v21 = (char *)&v48 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 1) != 0)
  {
    swift_errorRetain(a1);
    if (qword_10028AE00 != -1)
      swift_once(&qword_10028AE00, sub_100046E2C);
    v36 = type metadata accessor for Logger(0);
    sub_100005288(v36, (uint64_t)qword_1002A8A80);
    swift_errorRetain(a1);
    v37 = swift_errorRetain(a1);
    v38 = Logger.logObject.getter(v37);
    v39 = static os_log_type_t.error.getter(v38);
    if (os_log_type_enabled(v38, v39))
    {
      v40 = swift_slowAlloc(12, -1);
      v54 = a3;
      v41 = (uint8_t *)v40;
      v42 = swift_slowAlloc(32, -1);
      v55 = (_QWORD *)a1;
      aBlock[0] = v42;
      *(_DWORD *)v41 = 136315138;
      swift_errorRetain(a1);
      v43 = sub_1000080B4(&qword_10028E850);
      v44 = String.init<A>(describing:)(&v55, v43);
      v46 = v45;
      v55 = (_QWORD *)sub_1001DEF4C(v44, v45, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, aBlock);
      swift_bridgeObjectRelease(v46);
      sub_1000057B0(a1, 1);
      sub_1000057B0(a1, 1);
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "Failed to fetch Benefactors. Aborting migration : %s", v41, 0xCu);
      swift_arrayDestroy(v42, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v42, -1, -1);
      v47 = v41;
      a3 = v54;
      swift_slowDealloc(v47, -1, -1);
    }
    else
    {
      sub_1000057B0(a1, 1);
      sub_1000057B0(a1, 1);
    }

    swift_errorRetain(a1);
    a3(a1);
    sub_1000057B0(a1, 1);
    return sub_1000057B0(a1, 1);
  }
  else
  {
    v49 = v10;
    v54 = a3;
    v22 = *(_QWORD *)(a1 + 16);
    if (v22)
    {
      v48 = a4;
      v23 = *(_QWORD *)(type metadata accessor for BenefactorInfoRecord(0) - 8);
      v24 = a1 + ((*(unsigned __int8 *)(v23 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80));
      v25 = *(_QWORD *)(v23 + 72);
      swift_bridgeObjectRetain(a1);
      do
      {
        sub_100157440(v24);
        v24 += v25;
        --v22;
      }
      while (v22);
      sub_1000057B0(a1, 0);
      a4 = v48;
    }
    sub_100007764();
    (*(void (**)(char *, _QWORD, uint64_t))(v18 + 104))(v21, enum case for DispatchQoS.QoSClass.default(_:), v17);
    v26 = (void *)static OS_dispatch_queue.global(qos:)(v21);
    (*(void (**)(char *, uint64_t))(v18 + 8))(v21, v17);
    v27 = (_QWORD *)swift_allocObject(&unk_10026A9C8, 40, 7);
    v27[2] = v54;
    v27[3] = a4;
    v27[4] = a5;
    aBlock[4] = (uint64_t)sub_100158F3C;
    v57 = v27;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_1000051D0;
    aBlock[3] = (uint64_t)&unk_10026A9E0;
    v28 = _Block_copy(aBlock);
    swift_retain(a4);
    v29 = swift_retain(a5);
    static DispatchQoS.unspecified.getter(v29);
    v55 = _swiftEmptyArrayStorage;
    v30 = sub_100005150((unint64_t *)&qword_10028CD20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v31 = sub_1000080B4((uint64_t *)&unk_100295A00);
    v32 = sub_100008628();
    v33 = v52;
    v34 = v49;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v55, v31, v32, v49, v30);
    OS_dispatch_group.notify(qos:flags:queue:execute:)(v16, v33, v26, v28);
    _Block_release(v28);

    (*(void (**)(char *, uint64_t))(v53 + 8))(v33, v34);
    (*(void (**)(char *, uint64_t))(v50 + 8))(v16, v51);
    return swift_release(v57);
  }
}

void sub_100157440(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint64_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t v39;
  int *v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint8_t *v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(uint64_t, uint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint8_t *v62;
  uint8_t *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;

  v71 = type metadata accessor for BenefactorInfoRecord(0);
  v69 = *(_QWORD *)(v71 - 8);
  v2 = *(_QWORD *)(v69 + 64);
  v4 = __chkstk_darwin(v71, v3);
  v5 = (char *)&v62 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v4, v6);
  v9 = (char *)&v62 - v8;
  v11 = __chkstk_darwin(v7, v10);
  v70 = (char *)&v62 - v12;
  v14 = __chkstk_darwin(v11, v13);
  v16 = (char *)&v62 - v15;
  v18 = __chkstk_darwin(v14, v17);
  v20 = (char *)&v62 - v19;
  __chkstk_darwin(v18, v21);
  v23 = (char *)&v62 - v22;
  if (qword_10028AE00 != -1)
    swift_once(&qword_10028AE00, sub_100046E2C);
  v24 = type metadata accessor for Logger(0);
  v25 = sub_100005288(v24, (uint64_t)qword_1002A8A80);
  v26 = sub_100158F48(a1, (uint64_t)v23);
  v67 = v25;
  v27 = Logger.logObject.getter(v26);
  v28 = static os_log_type_t.debug.getter(v27);
  if (os_log_type_enabled(v27, v28))
  {
    v29 = swift_slowAlloc(12, -1);
    v66 = v9;
    v30 = (uint8_t *)v29;
    v64 = swift_slowAlloc(32, -1);
    v73 = v64;
    v65 = a1;
    *(_DWORD *)v30 = 136315138;
    v62 = v30 + 4;
    v63 = v30;
    v31 = type metadata accessor for UUID(0);
    v32 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v33 = v31;
    v5 = (char *)&v62 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
    v34 = dispatch thunk of CustomStringConvertible.description.getter(v33, v32);
    v36 = v35;
    v72 = sub_1001DEF4C(v34, v35, &v73);
    a1 = v65;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v72, &v73);
    swift_bridgeObjectRelease(v36);
    sub_100158F8C((uint64_t)v23);
    v37 = v63;
    _os_log_impl((void *)&_mh_execute_header, v27, v28, "Migrating Records for beneficiaryID - %s.", v63, 0xCu);
    v38 = v64;
    swift_arrayDestroy(v64, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v38, -1, -1);
    v9 = v66;
    swift_slowDealloc(v37, -1, -1);
  }
  else
  {
    sub_100158F8C((uint64_t)v23);
  }

  v41 = (uint64_t)v70;
  v40 = (int *)v71;
  if ((*(_BYTE *)(a1 + *(int *)(v71 + 36)) & 1) != 0)
  {
    v42 = Logger.logObject.getter(v39);
    v43 = static os_log_type_t.debug.getter(v42);
    if (os_log_type_enabled(v42, v43))
    {
      v44 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v44 = 0;
      _os_log_impl((void *)&_mh_execute_header, v42, v43, "BenefactorInfoRecord is already in Manatee.", v44, 2u);
      swift_slowDealloc(v44, -1, -1);
    }

  }
  else
  {
    sub_100158F48(a1, (uint64_t)v16);
    v45 = (uint64_t)v16;
    v46 = type metadata accessor for UUID(0);
    v47 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 16);
    v47(v41, v45, v46);
    v47(v41 + v40[7], v45 + v40[7], v46);
    v48 = v40[8];
    if ((*(_BYTE *)(v45 + v40[9]) & 1) != 0)
    {
      v49 = *(_QWORD *)(v45 + v48);
      v50 = *(_QWORD *)(v45 + v48 + 8);
      v51 = (uint64_t *)(v41 + v48);
      *v51 = v49;
      v51[1] = v50;
      sub_10000F450(v49, v50);
    }
    else
    {
      *(_OWORD *)(v41 + v48) = xmmword_100218E90;
    }
    v52 = v40[5];
    v54 = *(_QWORD *)(v45 + v52);
    v53 = *(_QWORD *)(v45 + v52 + 8);
    v55 = (_QWORD *)(v41 + v52);
    *v55 = v54;
    v55[1] = v53;
    *(_QWORD *)(v41 + v40[6]) = 2;
    swift_bridgeObjectRetain(v53);
    sub_100158F8C(v45);
    *(_BYTE *)(v41 + v40[9]) = 1;
    sub_100158FC8(v41, (uint64_t)v20);
    v56 = v68;
    dispatch_group_enter(*(dispatch_group_t *)(v68 + 176));
    sub_10000732C((_QWORD *)(v56 + 16), *(_QWORD *)(v56 + 40));
    v57 = swift_allocObject(&unk_10026AA18, 24, 7);
    swift_weakInit(v57 + 16, v56);
    sub_100158F48((uint64_t)v20, (uint64_t)v9);
    sub_100158F48(a1, (uint64_t)v5);
    v58 = *(unsigned __int8 *)(v69 + 80);
    v59 = (v58 + 24) & ~v58;
    v60 = (v2 + v58 + v59) & ~v58;
    v61 = swift_allocObject(&unk_10026AA40, v60 + v2, v58 | 7);
    *(_QWORD *)(v61 + 16) = v57;
    sub_100158FC8((uint64_t)v9, v61 + v59);
    sub_100158FC8((uint64_t)v5, v61 + v60);
    swift_retain(v57);
    sub_1000CD500((uint64_t)v20, (uint64_t)sub_10015913C, v61);
    swift_release(v61);
    sub_100158F8C((uint64_t)v20);
    swift_release(v57);
  }
}

uint64_t sub_100157930(void (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;

  if (qword_10028AE00 != -1)
    swift_once(&qword_10028AE00, sub_100046E2C);
  v5 = type metadata accessor for Logger(0);
  v6 = sub_100005288(v5, (uint64_t)qword_1002A8A80);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Benefactor Manatee migration complete.", v9, 2u);
    swift_slowDealloc(v9, -1, -1);
  }

  v10 = *(_QWORD *)(a3 + 184);
  swift_errorRetain(v10);
  a1(v10);
  return swift_errorRelease(v10);
}

uint64_t sub_100157A2C()
{
  uint64_t v0;

  sub_100006F58((_QWORD *)(v0 + 16));
  sub_1000B9D40((_QWORD *)(v0 + 56));

  swift_errorRelease(*(_QWORD *)(v0 + 184));
  return swift_deallocClassInstance(v0, 192, 7);
}

uint64_t type metadata accessor for BenefactorManateeMigrator()
{
  return objc_opt_self(_TtC13appleaccountd25BenefactorManateeMigrator);
}

uint64_t sub_100157A88(uint64_t a1, uint64_t a2)
{
  return sub_100156E48(a1, a2);
}

uint64_t sub_100157AA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;

  v1 = v0;
  if (qword_10028AE00 != -1)
    swift_once(&qword_10028AE00, sub_100046E2C);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_100005288(v2, (uint64_t)qword_1002A8A80);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.debug.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Manatee status changed, fetching new manatee status.", v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }

  v7 = swift_allocObject(&unk_10026AA18, 24, 7);
  swift_weakInit(v7 + 16, v1);
  swift_retain(v7);
  sub_1000D0C00((uint64_t)sub_1001593A4, v7);
  return swift_release_n(v7, 2);
}

void sub_100157BC0(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t Strong;
  uint64_t v24;
  NSObject *oslog;
  uint64_t v26[3];
  uint64_t v27;
  uint64_t v28;

  if ((a2 & 1) != 0)
  {
    swift_errorRetain(a1);
    if (qword_10028AE00 != -1)
      swift_once(&qword_10028AE00, sub_100046E2C);
    v8 = type metadata accessor for Logger(0);
    sub_100005288(v8, (uint64_t)qword_1002A8A80);
    swift_errorRetain(a1);
    v9 = swift_errorRetain(a1);
    oslog = Logger.logObject.getter(v9);
    v10 = static os_log_type_t.error.getter(oslog);
    if (os_log_type_enabled(oslog, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc(12, -1);
      v12 = swift_slowAlloc(32, -1);
      v26[0] = v12;
      *(_DWORD *)v11 = 136315138;
      v27 = a1;
      swift_errorRetain(a1);
      v13 = sub_1000080B4(&qword_10028E850);
      v14 = String.init<A>(describing:)(&v27, v13);
      v16 = v15;
      v27 = sub_1001DEF4C(v14, v15, v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, &v28);
      swift_bridgeObjectRelease(v16);
      sub_10006AEB4(a1, 1);
      sub_10006AEB4(a1, 1);
      _os_log_impl((void *)&_mh_execute_header, oslog, v10, "Failed to fetch manatee status: %s", v11, 0xCu);
      swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v12, -1, -1);
      swift_slowDealloc(v11, -1, -1);

      sub_10006AEB4(a1, 1);
      return;
    }
    sub_10006AEB4(a1, 1);
    sub_10006AEB4(a1, 1);
    swift_errorRelease(a1);
    goto LABEL_19;
  }
  if ((a1 & 1) == 0)
  {
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v4 = type metadata accessor for Logger(0);
    v5 = sub_100005288(v4, (uint64_t)qword_1002A89D8);
    oslog = Logger.logObject.getter(v5);
    v6 = static os_log_type_t.debug.getter(oslog);
    if (os_log_type_enabled(oslog, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v6, "Account is not manatee, skipping manatee migration.", v7, 2u);
      swift_slowDealloc(v7, -1, -1);
    }
LABEL_19:

    return;
  }
  v17 = a3 + 16;
  if (qword_10028AE00 != -1)
    swift_once(&qword_10028AE00, sub_100046E2C);
  v18 = type metadata accessor for Logger(0);
  v19 = sub_100005288(v18, (uint64_t)qword_1002A8A80);
  v20 = Logger.logObject.getter(v19);
  v21 = static os_log_type_t.debug.getter(v20);
  if (os_log_type_enabled(v20, v21))
  {
    v22 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v22 = 0;
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "Account is now manatee, kicking off migration.", v22, 2u);
    swift_slowDealloc(v22, -1, -1);
  }

  swift_beginAccess(v17, v26, 0, 0);
  Strong = swift_weakLoadStrong(v17);
  if (Strong)
  {
    v24 = Strong;
    sub_100156E48((uint64_t)OSTransaction.complete(), 0);
    swift_release(v24);
  }
}

uint64_t sub_100157F9C(uint64_t a1, char a2)
{
  uint64_t v2;

  return sub_100156F80(a1, a2 & 1, *(void (**)(_QWORD))(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32));
}

void sub_100157FAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  uint8_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t Strong;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  NSObject *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _OWORD v66[7];
  uint64_t v67;
  uint64_t v68;

  v62 = a4;
  v61 = a3;
  v6 = type metadata accessor for BenefactorInfoRecord(0);
  v60 = *(_QWORD *)(v6 - 8);
  v7 = *(_QWORD *)(v60 + 64);
  v9 = __chkstk_darwin(v6, v8);
  v63 = (uint64_t)&v59 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9, v10);
  v12 = (char *)&v59 - v11;
  v64 = type metadata accessor for UUID(0);
  v13 = *(_QWORD *)(v64 - 8);
  __chkstk_darwin(v64, v14);
  v16 = (char *)&v59 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_1000080B4((uint64_t *)&unk_10028FA40);
  __chkstk_darwin(v17, v18);
  v20 = (uint64_t *)((char *)&v59 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100024A20(a1, (uint64_t)v20, (uint64_t *)&unk_10028FA40);
  if (swift_getEnumCaseMultiPayload(v20, v17) == 1)
  {
    v21 = *v20;
    if (qword_10028AE00 != -1)
      swift_once(&qword_10028AE00, sub_100046E2C);
    v22 = type metadata accessor for Logger(0);
    sub_100005288(v22, (uint64_t)qword_1002A8A80);
    swift_errorRetain(v21);
    v23 = swift_errorRetain(v21);
    v24 = Logger.logObject.getter(v23);
    v25 = static os_log_type_t.error.getter(v24);
    if (os_log_type_enabled(v24, v25))
    {
      v26 = (uint8_t *)swift_slowAlloc(12, -1);
      v27 = swift_slowAlloc(32, -1);
      *(_QWORD *)&v66[0] = v27;
      *(_DWORD *)v26 = 136315138;
      v67 = v21;
      swift_errorRetain(v21);
      v28 = sub_1000080B4(&qword_10028E850);
      v29 = String.init<A>(describing:)(&v67, v28);
      v31 = v30;
      v67 = sub_1001DEF4C(v29, v30, (uint64_t *)v66);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, &v68);
      swift_bridgeObjectRelease(v31);
      swift_errorRelease(v21);
      swift_errorRelease(v21);
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Failed to save BenefactorInfoRecord - %s", v26, 0xCu);
      swift_arrayDestroy(v27, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v27, -1, -1);
      swift_slowDealloc(v26, -1, -1);
    }
    else
    {
      swift_errorRelease(v21);
      swift_errorRelease(v21);
    }

    swift_beginAccess(a2 + 16, v66, 0, 0);
    Strong = swift_weakLoadStrong(a2 + 16);
    if (Strong)
    {
      v54 = Strong;
      v55 = *(_QWORD *)(Strong + 184);
      *(_QWORD *)(Strong + 184) = v21;
      swift_errorRetain(v21);
      swift_errorRelease(v55);
      swift_release(v54);
    }
    swift_beginAccess(a2 + 16, &v67, 0, 0);
    v56 = swift_weakLoadStrong(a2 + 16);
    if (v56)
    {
      v57 = v56;
      v58 = *(id *)(v56 + 176);
      swift_release(v57);
      dispatch_group_leave(v58);
      swift_errorRelease(v21);

    }
    else
    {
      swift_errorRelease(v21);
    }
  }
  else
  {
    if (qword_10028AE00 != -1)
      swift_once(&qword_10028AE00, sub_100046E2C);
    v32 = type metadata accessor for Logger(0);
    v59 = sub_100005288(v32, (uint64_t)qword_1002A8A80);
    v33 = Logger.logObject.getter(v59);
    v34 = static os_log_type_t.debug.getter(v33);
    if (os_log_type_enabled(v33, v34))
    {
      v35 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v35 = 0;
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "BenefactorInfoRecord may have been accepted pre-CDP.\nRe-accepting and notifying the owner to prompt a new key transfer.", v35, 2u);
      swift_slowDealloc(v35, -1, -1);
    }

    swift_beginAccess(a2 + 16, &v67, 0, 0);
    v36 = swift_weakLoadStrong(a2 + 16);
    v37 = v62;
    if (v36)
    {
      v38 = v36;
      sub_1000B611C((_OWORD *)(v36 + 56), v66);
      swift_release(v38);
      v39 = v64;
      (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v16, v61, v64);
      sub_100158F48(v37, (uint64_t)v12);
      v40 = *(unsigned __int8 *)(v60 + 80);
      v41 = (v40 + 24) & ~v40;
      v42 = swift_allocObject(&unk_10026AA68, v41 + v7, v40 | 7);
      *(_QWORD *)(v42 + 16) = a2;
      sub_100158FC8((uint64_t)v12, v42 + v41);
      swift_retain(a2);
      sub_1000B0ACC((uint64_t)v16, 1, 3u, (uint64_t)sub_100159250, v42);
      swift_release(v42);
      (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v39);
      sub_1000B9D40(v66);
    }
    v43 = v63;
    v44 = sub_100158F48(v37, v63);
    v45 = Logger.logObject.getter(v44);
    v46 = static os_log_type_t.debug.getter(v45);
    if (os_log_type_enabled(v45, v46))
    {
      v47 = (uint8_t *)swift_slowAlloc(12, -1);
      v48 = swift_slowAlloc(32, -1);
      *(_QWORD *)&v66[0] = v48;
      *(_DWORD *)v47 = 136315138;
      v49 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v50 = dispatch thunk of CustomStringConvertible.description.getter(v64, v49);
      v52 = v51;
      v65 = sub_1001DEF4C(v50, v51, (uint64_t *)v66);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, v66);
      swift_bridgeObjectRelease(v52);
      sub_100158F8C(v43);
      _os_log_impl((void *)&_mh_execute_header, v45, v46, "Manatee migration complete for BenefactorInfoRecord with beneficiaryID - %s", v47, 0xCu);
      swift_arrayDestroy(v48, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v48, -1, -1);
      swift_slowDealloc(v47, -1, -1);
    }
    else
    {
      sub_100158F8C(v43);
    }

    sub_100004934((uint64_t)v20, (uint64_t *)&unk_10028FA40);
  }
}

void sub_10015861C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t Strong;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36[3];

  v6 = type metadata accessor for BenefactorInfoRecord(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  __chkstk_darwin(v6, v9);
  v10 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a2 + 16;
  if (a1)
  {
    swift_errorRetain(a1);
    if (qword_10028AE00 != -1)
      swift_once(&qword_10028AE00, sub_100046E2C);
    v12 = type metadata accessor for Logger(0);
    sub_100005288(v12, (uint64_t)qword_1002A8A80);
    swift_errorRetain(a1);
    v13 = swift_errorRetain(a1);
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.error.getter(v14);
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc(12, -1);
      v17 = swift_slowAlloc(32, -1);
      v36[0] = v17;
      *(_DWORD *)v16 = 136315138;
      v34 = a1;
      swift_errorRetain(a1);
      v18 = sub_1000080B4(&qword_10028E850);
      v19 = String.init<A>(describing:)(&v34, v18);
      v21 = v20;
      v34 = sub_1001DEF4C(v19, v20, v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35);
      swift_bridgeObjectRelease(v21);
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Failed to notify owner of acceptance - %s", v16, 0xCu);
      swift_arrayDestroy(v17, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v17, -1, -1);
      swift_slowDealloc(v16, -1, -1);
    }
    else
    {
      swift_errorRelease(a1);
      swift_errorRelease(a1);
    }

    swift_beginAccess(v11, v36, 0, 0);
    Strong = swift_weakLoadStrong(v11);
    if (Strong)
    {
      v29 = Strong;
      v30 = *(_QWORD *)(Strong + 184);
      *(_QWORD *)(Strong + 184) = a1;
      swift_errorRetain(a1);
      swift_errorRelease(v30);
      swift_release(v29);
    }
    swift_beginAccess(v11, &v34, 0, 0);
    v31 = swift_weakLoadStrong(v11);
    if (v31)
    {
      v32 = v31;
      v33 = *(id *)(v31 + 176);
      swift_release(v32);
      dispatch_group_leave(v33);
      swift_errorRelease(a1);

    }
    else
    {
      swift_errorRelease(a1);
    }
  }
  else
  {
    swift_beginAccess(a2 + 16, v36, 0, 0);
    v22 = swift_weakLoadStrong(a2 + 16);
    if (v22)
    {
      v23 = v22;
      sub_10000732C((_QWORD *)(v22 + 16), *(_QWORD *)(v22 + 40));
      v24 = swift_allocObject(&unk_10026AA18, 24, 7);
      swift_weakInit(v24 + 16, v23);
      sub_100158F48(a3, (uint64_t)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
      v25 = *(unsigned __int8 *)(v7 + 80);
      v26 = (v25 + 40) & ~v25;
      v27 = (_QWORD *)swift_allocObject(&unk_10026AA90, v26 + v8, v25 | 7);
      v27[2] = v24;
      v27[3] = sub_100159290;
      v27[4] = a2;
      sub_100158FC8((uint64_t)v10, (uint64_t)v27 + v26);
      swift_retain_n(a2, 2);
      swift_retain(v24);
      sub_1000CD794(a3, (uint64_t)sub_100159360, (uint64_t)v27);
      swift_release(v23);
      swift_release(a2);
      swift_release(v24);
      swift_release(v27);
    }
  }
}

void sub_1001589C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t Strong;
  uint64_t v4;
  NSObject *v5;
  _BYTE v6[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v6, 0, 0);
  Strong = swift_weakLoadStrong(v2);
  if (Strong)
  {
    v4 = Strong;
    v5 = *(id *)(Strong + 176);
    swift_release(v4);
    dispatch_group_leave(v5);

  }
}

uint64_t sub_100158A28(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t Strong;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  _BOOL4 v37;
  uint8_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  _QWORD v56[2];
  uint64_t v57;
  char *v58;
  uint64_t v59;
  void (*v60)(uint64_t);
  uint64_t v61[3];
  uint64_t v62;
  uint64_t v63;

  v60 = a3;
  v9 = type metadata accessor for BenefactorInfoRecord(0);
  v11 = __chkstk_darwin(v9, v10);
  v13 = (char *)v56 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11, v14);
  v16 = (char *)v56 - v15;
  v17 = sub_1000080B4((uint64_t *)&unk_10028CD50);
  __chkstk_darwin(v17, v18);
  v20 = (_QWORD *)((char *)v56 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100024A20(a1, (uint64_t)v20, (uint64_t *)&unk_10028CD50);
  if (swift_getEnumCaseMultiPayload(v20, v17) == 1)
  {
    v21 = a2 + 16;
    v22 = *v20;
    if (qword_10028AE00 != -1)
      swift_once(&qword_10028AE00, sub_100046E2C);
    v23 = type metadata accessor for Logger(0);
    v24 = sub_100005288(v23, (uint64_t)qword_1002A8A80);
    v25 = Logger.logObject.getter(v24);
    v26 = static os_log_type_t.error.getter(v25);
    if (os_log_type_enabled(v25, v26))
    {
      v27 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v27 = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Error removing non-manatee Benefactor record.", v27, 2u);
      swift_slowDealloc(v27, -1, -1);
    }

    swift_beginAccess(v21, v61, 0, 0);
    Strong = swift_weakLoadStrong(v21);
    if (Strong)
    {
      v29 = Strong;
      v30 = *(_QWORD *)(Strong + 184);
      *(_QWORD *)(Strong + 184) = v22;
      swift_errorRetain(v22);
      swift_errorRelease(v30);
      swift_release(v29);
    }
    swift_errorRetain(v22);
    v60(v22);
    swift_errorRelease(v22);
    return swift_errorRelease(v22);
  }
  else
  {
    if (qword_10028AE00 != -1)
      swift_once(&qword_10028AE00, sub_100046E2C);
    v32 = type metadata accessor for Logger(0);
    v33 = sub_100005288(v32, (uint64_t)qword_1002A8A80);
    v34 = sub_100158F48(a5, (uint64_t)v16);
    v35 = Logger.logObject.getter(v34);
    v36 = static os_log_type_t.debug.getter(v35);
    v37 = os_log_type_enabled(v35, v36);
    v59 = a4;
    if (v37)
    {
      v38 = (uint8_t *)swift_slowAlloc(12, -1);
      v39 = swift_slowAlloc(32, -1);
      v56[1] = v33;
      v40 = v39;
      v57 = a5;
      v58 = v13;
      *(_DWORD *)v38 = 136315138;
      v61[0] = v39;
      v41 = (uint64_t *)&v16[*(int *)(v9 + 20)];
      v43 = *v41;
      v42 = v41[1];
      swift_bridgeObjectRetain(v42);
      v62 = sub_1001DEF4C(v43, v42, v61);
      a5 = v57;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, &v63);
      v44 = v42;
      v13 = v58;
      swift_bridgeObjectRelease(v44);
      sub_100158F8C((uint64_t)v16);
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "Notified benefactor (%s).", v38, 0xCu);
      swift_arrayDestroy(v40, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v40, -1, -1);
      swift_slowDealloc(v38, -1, -1);
    }
    else
    {
      sub_100158F8C((uint64_t)v16);
    }

    v45 = sub_100158F48(a5, (uint64_t)v13);
    v46 = Logger.logObject.getter(v45);
    v47 = static os_log_type_t.debug.getter(v46);
    if (os_log_type_enabled(v46, v47))
    {
      v48 = (uint8_t *)swift_slowAlloc(12, -1);
      v49 = swift_slowAlloc(32, -1);
      v61[0] = v49;
      *(_DWORD *)v48 = 136315138;
      v50 = (uint64_t)v13;
      v51 = type metadata accessor for UUID(0);
      v52 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v53 = dispatch thunk of CustomStringConvertible.description.getter(v51, v52);
      v55 = v54;
      v62 = sub_1001DEF4C(v53, v54, v61);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, &v63);
      swift_bridgeObjectRelease(v55);
      sub_100158F8C(v50);
      _os_log_impl((void *)&_mh_execute_header, v46, v47, "Manatee migration complete for BenefactorInfoRecord with beneficiaryID - %s", v48, 0xCu);
      swift_arrayDestroy(v49, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v49, -1, -1);
      swift_slowDealloc(v48, -1, -1);
    }
    else
    {
      sub_100158F8C((uint64_t)v13);
    }

    v60(0);
    return sub_100004934((uint64_t)v20, (uint64_t *)&unk_10028CD50);
  }
}

uint64_t sub_100158F3C()
{
  uint64_t v0;

  return sub_100157930(*(void (**)(uint64_t))(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_100158F48(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for BenefactorInfoRecord(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100158F8C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for BenefactorInfoRecord(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100158FC8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for BenefactorInfoRecord(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10015900C()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100159030()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);

  v1 = (int *)type metadata accessor for BenefactorInfoRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  v7 = (v5 + v3 + v4) & ~v3;
  v8 = v7 + v5;
  swift_release(*(_QWORD *)(v0 + 16));
  v9 = v0 + v4;
  v10 = type metadata accessor for UUID(0);
  v11 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8);
  v11(v9, v10);
  swift_bridgeObjectRelease(*(_QWORD *)(v9 + v1[5] + 8));
  v11(v9 + v1[7], v10);
  sub_10000F494(*(_QWORD *)(v9 + v1[8]), *(_QWORD *)(v9 + v1[8] + 8));
  v11(v0 + v7, v10);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v7 + v1[5] + 8));
  v11(v0 + v7 + v1[7], v10);
  sub_10000F494(*(_QWORD *)(v0 + v7 + v1[8]), *(_QWORD *)(v0 + v7 + v1[8] + 8));
  return swift_deallocObject(v0, v8, v6);
}

void sub_10015913C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(type metadata accessor for BenefactorInfoRecord(0) - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  sub_100157FAC(a1, *(_QWORD *)(v1 + 16), v1 + ((v4 + 24) & ~v4), v1 + ((*(_QWORD *)(v3 + 64) + v4 + ((v4 + 24) & ~v4)) & ~v4));
}

uint64_t sub_100159190()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);

  v1 = (int *)type metadata accessor for BenefactorInfoRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release(*(_QWORD *)(v0 + 16));
  v7 = v0 + v4;
  v8 = type metadata accessor for UUID(0);
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8);
  v9(v7, v8);
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[5] + 8));
  v9(v7 + v1[7], v8);
  sub_10000F494(*(_QWORD *)(v7 + v1[8]), *(_QWORD *)(v7 + v1[8] + 8));
  return swift_deallocObject(v0, v5, v6);
}

void sub_100159250(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for BenefactorInfoRecord(0) - 8) + 80);
  sub_10015861C(a1, *(_QWORD *)(v1 + 16), v1 + ((v3 + 24) & ~v3));
}

void sub_100159290(uint64_t a1)
{
  uint64_t v1;

  sub_1001589C0(a1, v1);
}

uint64_t sub_100159298()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);

  v1 = (int *)type metadata accessor for BenefactorInfoRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  v7 = v0 + v4;
  v8 = type metadata accessor for UUID(0);
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8);
  v9(v7, v8);
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[5] + 8));
  v9(v7 + v1[7], v8);
  sub_10000F494(*(_QWORD *)(v7 + v1[8]), *(_QWORD *)(v7 + v1[8] + 8));
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100159360(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for BenefactorInfoRecord(0) - 8) + 80);
  return sub_100158A28(a1, *(_QWORD *)(v1 + 16), *(void (**)(uint64_t))(v1 + 24), *(_QWORD *)(v1 + 32), v1 + ((v3 + 40) & ~v3));
}

void sub_1001593A4(uint64_t a1, char a2)
{
  uint64_t v2;

  sub_100157BC0(a1, a2 & 1, v2);
}

id sub_1001593B0()
{
  void *v0;
  uint64_t v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t ObjectType;
  _QWORD v14[5];
  _BYTE v15[16];
  _QWORD v16[5];

  v1 = type metadata accessor for DaemonStorageFactory();
  swift_initStackObject(v1, v15);
  v2 = v0;
  sub_1000C8AF8(v16);

  sub_100006CA4((uint64_t)v16, (uint64_t)v14);
  if (qword_10028AE20 != -1)
    swift_once(&qword_10028AE20, sub_100074ED8);
  v3 = qword_1002A8AC8;
  v4 = qword_10028AE78;
  swift_retain(qword_1002A8AC8);
  if (v4 != -1)
    swift_once(&qword_10028AE78, sub_1000EEC78);
  v5 = (uint64_t *)qword_1002A8B50;
  v6 = sub_1000067AC((uint64_t)v14, v14[3]);
  __chkstk_darwin(v6, v6);
  v8 = (_QWORD *)((char *)v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v9 + 16))(v8);
  v10 = *v8;
  swift_retain(v5);
  v11 = sub_10015AF5C(v10, v3, v5);
  sub_100006F58(v14);
  sub_100006F58(v16);
  ObjectType = swift_getObjectType(v2);
  swift_deallocPartialClassInstance(v2, ObjectType, 128, 7);
  return v11;
}

id sub_100159548()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AppleAccountDaemonManager();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for AppleAccountDaemonManager()
{
  return objc_opt_self(_TtC13appleaccountd25AppleAccountDaemonManager);
}

uint64_t sub_100159744(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[12] = a2;
  v3[13] = v2;
  v3[11] = a1;
  return swift_task_switch(sub_100159760, 0, 0);
}

uint64_t sub_100159760()
{
  uint64_t v0;
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  _QWORD *v13;
  void *v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  _BOOL4 v19;
  void *v20;
  uint8_t *v21;
  _QWORD *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t (*v30)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v1 = objc_msgSend(*(id *)(v0 + 96), "aa_altDSID");
  if (v1)
  {
    v2 = v1;
    v3 = *(_QWORD *)(v0 + 104);
    v4 = *(_QWORD *)(v0 + 88);
    v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
    v7 = v6;

    *(_QWORD *)(v0 + 112) = v5;
    *(_QWORD *)(v0 + 120) = v7;
    v8 = (_QWORD *)(v3 + OBJC_IVAR____TtC13appleaccountd25AppleAccountDaemonManager_loginResponseCache);
    v9 = *(_QWORD *)(v3 + OBJC_IVAR____TtC13appleaccountd25AppleAccountDaemonManager_loginResponseCache + 24);
    v10 = v8[4];
    sub_10000732C(v8, v9);
    *(_QWORD *)(v0 + 56) = v4;
    *(_QWORD *)(v0 + 16) = v5;
    *(_QWORD *)(v0 + 24) = v7;
    v11 = *(_QWORD *)(*(_QWORD *)(v10 + 8) + 8);
    v12 = *(int **)(v11 + 32);
    v30 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)v12 + *v12);
    v13 = (_QWORD *)swift_task_alloc(v12[1]);
    *(_QWORD *)(v0 + 128) = v13;
    *v13 = v0;
    v13[1] = sub_100159A30;
    return v30(v0 + 48, v0 + 56, v0 + 16, v9, v11);
  }
  else
  {
    if (qword_10028ADB0 != -1)
      swift_once(&qword_10028ADB0, sub_100046CC8);
    v15 = *(void **)(v0 + 96);
    v16 = type metadata accessor for Logger(0);
    sub_100005288(v16, (uint64_t)qword_1002A8990);
    v17 = Logger.logObject.getter(v15);
    v18 = static os_log_type_t.error.getter(v17);
    v19 = os_log_type_enabled(v17, v18);
    v20 = *(void **)(v0 + 96);
    if (v19)
    {
      v21 = (uint8_t *)swift_slowAlloc(12, -1);
      v22 = (_QWORD *)swift_slowAlloc(8, -1);
      *(_DWORD *)v21 = 138412290;
      *(_QWORD *)(v0 + 40) = v20;
      v23 = v20;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48);
      *v22 = v20;

      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Failed to get altDSID from account: %@", v21, 0xCu);
      v24 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v22, 1, v24);
      swift_slowDealloc(v22, -1, -1);
      swift_slowDealloc(v21, -1, -1);
    }
    else
    {

    }
    type metadata accessor for AAError(0);
    v26 = v25;
    *(_QWORD *)(v0 + 32) = -4410;
    v27 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
    v28 = sub_1000C2D50();
    v29 = _BridgedStoredNSError.init(_:userInfo:)((_QWORD *)(v0 + 64), v0 + 32, v27, v26, v28);
    swift_willThrow(v29);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_100159A30()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 128));

  return swift_task_switch(sub_100159A88, 0, 0);
}

uint64_t sub_100159A88()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  _BOOL4 v8;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  void *v14;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if (qword_10028ADB0 != -1)
    swift_once(&qword_10028ADB0, sub_100046CC8);
  v1 = *(void **)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 120);
  v3 = type metadata accessor for Logger(0);
  sub_100005288(v3, (uint64_t)qword_1002A8990);
  v4 = v1;
  swift_bridgeObjectRetain(v2);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.info.getter();
  v8 = os_log_type_enabled(v6, v7);
  v9 = *(_QWORD *)(v0 + 120);
  if (v8)
  {
    v17 = *(_QWORD *)(v0 + 112);
    v10 = *(void **)(v0 + 88);
    v11 = swift_slowAlloc(22, -1);
    v16 = (_QWORD *)swift_slowAlloc(8, -1);
    v18 = swift_slowAlloc(32, -1);
    v19 = v18;
    *(_DWORD *)v11 = 138412546;
    *(_QWORD *)(v0 + 72) = v10;
    v12 = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 72, v0 + 80);
    *v16 = v10;

    *(_WORD *)(v11 + 12) = 2080;
    swift_bridgeObjectRetain(v9);
    *(_QWORD *)(v0 + 80) = sub_1001DEF4C(v17, v9, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 80, v0 + 88);
    swift_bridgeObjectRelease_n(v9, 3);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Cached login response (%@) for altDSID: %s", (uint8_t *)v11, 0x16u);
    v13 = sub_1000080B4((uint64_t *)&unk_10028BC20);
    swift_arrayDestroy(v16, 1, v13);
    swift_slowDealloc(v16, -1, -1);
    swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v18, -1, -1);
    swift_slowDealloc(v11, -1, -1);
  }
  else
  {
    v14 = *(void **)(v0 + 88);

    swift_bridgeObjectRelease_n(v9, 2);
  }

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100159E1C(void *a1, void *a2, void *aBlock, void *a4)
{
  _QWORD *v4;
  uint64_t v8;
  id v9;
  id v10;
  id v11;
  _QWORD *v12;

  v4[3] = a2;
  v4[4] = a4;
  v4[2] = a1;
  v4[5] = _Block_copy(aBlock);
  v8 = dword_1002941FC;
  v9 = a1;
  v10 = a2;
  v11 = a4;
  v12 = (_QWORD *)swift_task_alloc(v8);
  v4[6] = v12;
  *v12 = v4;
  v12[1] = sub_100159EC0;
  v12[12] = v10;
  v12[13] = v11;
  v12[11] = v9;
  return swift_task_switch(sub_100159760, 0, 0);
}

uint64_t sub_100159EC0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  v2 = *(_QWORD *)(*v1 + 48);
  v4 = *(void **)(*v1 + 24);
  v3 = *(void **)(*v1 + 32);
  v5 = *(void **)(*v1 + 16);
  v6 = *v1;
  swift_task_dealloc(v2);

  v7 = *(_QWORD *)(v6 + 40);
  if (v0)
  {
    v8 = (void *)_convertErrorToNSError(_:)(v0);
    swift_errorRelease(v0);
    (*(void (**)(uint64_t, void *))(v7 + 16))(v7, v8);

  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v7 + 16))(*(_QWORD *)(v6 + 40), 0);
  }
  _Block_release(*(const void **)(v6 + 40));
  return (*(uint64_t (**)(void))(v6 + 8))();
}

uint64_t sub_100159F74(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 104) = a1;
  *(_QWORD *)(v2 + 112) = v1;
  return swift_task_switch(sub_100159F8C, 0, 0);
}

uint64_t sub_100159F8C()
{
  uint64_t v0;
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  _QWORD *v12;
  void *v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  _BOOL4 v18;
  void *v19;
  uint8_t *v20;
  _QWORD *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t (*v29)(uint64_t, uint64_t, uint64_t, uint64_t);

  v1 = objc_msgSend(*(id *)(v0 + 104), "aa_altDSID");
  if (v1)
  {
    v2 = v1;
    v3 = *(_QWORD *)(v0 + 112);
    v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
    v6 = v5;

    *(_QWORD *)(v0 + 120) = v4;
    *(_QWORD *)(v0 + 128) = v6;
    v7 = (_QWORD *)(v3 + OBJC_IVAR____TtC13appleaccountd25AppleAccountDaemonManager_loginResponseCache);
    v8 = *(_QWORD *)(v3 + OBJC_IVAR____TtC13appleaccountd25AppleAccountDaemonManager_loginResponseCache + 24);
    v9 = v7[4];
    sub_10000732C(v7, v8);
    *(_QWORD *)(v0 + 16) = v4;
    *(_QWORD *)(v0 + 24) = v6;
    v10 = *(_QWORD *)(*(_QWORD *)(v9 + 8) + 8);
    v11 = *(int **)(v10 + 40);
    v29 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)v11 + *v11);
    v12 = (_QWORD *)swift_task_alloc(v11[1]);
    *(_QWORD *)(v0 + 136) = v12;
    *v12 = v0;
    v12[1] = sub_10015A24C;
    return v29(v0 + 48, v0 + 16, v8, v10);
  }
  else
  {
    if (qword_10028ADB0 != -1)
      swift_once(&qword_10028ADB0, sub_100046CC8);
    v14 = *(void **)(v0 + 104);
    v15 = type metadata accessor for Logger(0);
    sub_100005288(v15, (uint64_t)qword_1002A8990);
    v16 = Logger.logObject.getter(v14);
    v17 = static os_log_type_t.error.getter(v16);
    v18 = os_log_type_enabled(v16, v17);
    v19 = *(void **)(v0 + 104);
    if (v18)
    {
      v20 = (uint8_t *)swift_slowAlloc(12, -1);
      v21 = (_QWORD *)swift_slowAlloc(8, -1);
      *(_DWORD *)v20 = 138412290;
      *(_QWORD *)(v0 + 40) = v19;
      v22 = v19;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48);
      *v21 = v19;

      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Failed to get altDSID from account: %@", v20, 0xCu);
      v23 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v21, 1, v23);
      swift_slowDealloc(v21, -1, -1);
      swift_slowDealloc(v20, -1, -1);
    }
    else
    {

    }
    type metadata accessor for AAError(0);
    v25 = v24;
    *(_QWORD *)(v0 + 32) = -4410;
    v26 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
    v27 = sub_1000C2D50();
    v28 = _BridgedStoredNSError.init(_:userInfo:)((_QWORD *)(v0 + 56), v0 + 32, v26, v25, v27);
    swift_willThrow(v28);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10015A24C()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 136));
  return swift_task_switch(sub_10015A2A0, 0, 0);
}

uint64_t sub_10015A2A0()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  _BOOL4 v8;
  unint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  _BOOL4 v18;
  unint64_t v19;
  uint64_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32[2];

  v1 = *(void **)(v0 + 48);
  if (v1)
  {
    if (qword_10028ADB0 != -1)
      swift_once(&qword_10028ADB0, sub_100046CC8);
    v2 = *(_QWORD *)(v0 + 128);
    v3 = type metadata accessor for Logger(0);
    sub_100005288(v3, (uint64_t)qword_1002A8990);
    v4 = v1;
    swift_bridgeObjectRetain(v2);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.info.getter();
    v8 = os_log_type_enabled(v6, v7);
    v9 = *(_QWORD *)(v0 + 128);
    if (v8)
    {
      v30 = *(_QWORD *)(v0 + 120);
      v10 = swift_slowAlloc(22, -1);
      v29 = (_QWORD *)swift_slowAlloc(8, -1);
      v31 = swift_slowAlloc(32, -1);
      v32[0] = v31;
      *(_DWORD *)v10 = 138412546;
      *(_QWORD *)(v0 + 88) = v4;
      v11 = v4;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 88, v0 + 96);
      *v29 = v1;

      *(_WORD *)(v10 + 12) = 2080;
      swift_bridgeObjectRetain(v9);
      *(_QWORD *)(v0 + 96) = sub_1001DEF4C(v30, v9, v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 96, v0 + 104);
      swift_bridgeObjectRelease_n(v9, 3);
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Returning cached login response (%@) for altDSID: %s", (uint8_t *)v10, 0x16u);
      v12 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v29, 1, v12);
      swift_slowDealloc(v29, -1, -1);
      swift_arrayDestroy(v31, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v31, -1, -1);
      swift_slowDealloc(v10, -1, -1);
    }
    else
    {

      swift_bridgeObjectRelease_n(v9, 2);
    }

    return (*(uint64_t (**)(id))(v0 + 8))(v4);
  }
  else
  {
    if (qword_10028ADB0 != -1)
      swift_once(&qword_10028ADB0, sub_100046CC8);
    v13 = *(_QWORD *)(v0 + 128);
    v14 = type metadata accessor for Logger(0);
    sub_100005288(v14, (uint64_t)qword_1002A8990);
    swift_bridgeObjectRetain(v13);
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.error.getter(v16);
    v18 = os_log_type_enabled(v16, v17);
    v19 = *(_QWORD *)(v0 + 128);
    if (v18)
    {
      v20 = *(_QWORD *)(v0 + 120);
      v21 = (uint8_t *)swift_slowAlloc(12, -1);
      v22 = swift_slowAlloc(32, -1);
      v32[0] = v22;
      *(_DWORD *)v21 = 136315138;
      swift_bridgeObjectRetain(v19);
      *(_QWORD *)(v0 + 80) = sub_1001DEF4C(v20, v19, v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 80, v0 + 88);
      swift_bridgeObjectRelease_n(v19, 3);
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Cached login response not found for altDSID: %s", v21, 0xCu);
      swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v22, -1, -1);
      swift_slowDealloc(v21, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n(*(_QWORD *)(v0 + 128), 2);
    }

    type metadata accessor for AAError(0);
    v25 = v24;
    *(_QWORD *)(v0 + 72) = -4411;
    v26 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
    v27 = sub_1000C2D50();
    v28 = _BridgedStoredNSError.init(_:userInfo:)((_QWORD *)(v0 + 64), v0 + 72, v26, v25, v27);
    swift_willThrow(v28);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_10015A81C(void *a1, void *aBlock, void *a3)
{
  _QWORD *v3;
  uint64_t v6;
  id v7;
  id v8;
  _QWORD *v9;

  v3[2] = a1;
  v3[3] = a3;
  v3[4] = _Block_copy(aBlock);
  v6 = dword_1002941D4;
  v7 = a1;
  v8 = a3;
  v9 = (_QWORD *)swift_task_alloc(v6);
  v3[5] = v9;
  *v9 = v3;
  v9[1] = sub_10015A8AC;
  v9[13] = v7;
  v9[14] = v8;
  return swift_task_switch(sub_100159F8C, 0, 0);
}

uint64_t sub_10015A8AC(void *a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void (**v9)(_QWORD, _QWORD, _QWORD);
  void *v10;

  v3 = v1;
  v5 = *(_QWORD *)(*v2 + 40);
  v7 = *(void **)(*v2 + 16);
  v6 = *(void **)(*v2 + 24);
  v8 = *v2;
  swift_task_dealloc(v5);

  v9 = *(void (***)(_QWORD, _QWORD, _QWORD))(v8 + 32);
  if (v3)
  {
    v10 = (void *)_convertErrorToNSError(_:)(v3);
    swift_errorRelease(v3);
    ((void (**)(_QWORD, _QWORD, void *))v9)[2](v9, 0, v10);

    _Block_release(v9);
  }
  else
  {
    ((void (**)(_QWORD, void *, _QWORD))v9)[2](v9, a1, 0);
    _Block_release(v9);

  }
  return (*(uint64_t (**)(void))(v8 + 8))();
}

uint64_t sub_10015A974(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;

  v3 = v2;
  if (qword_10028ADB0 != -1)
    swift_once(&qword_10028ADB0, sub_100046CC8);
  v6 = type metadata accessor for Logger(0);
  v7 = sub_100005288(v6, (uint64_t)qword_1002A8990);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "[AppleAccountDaemonManager urlConfiguration] called.", v10, 2u);
    swift_slowDealloc(v10, -1, -1);
  }

  sub_10000732C((_QWORD *)(v3 + OBJC_IVAR____TtC13appleaccountd25AppleAccountDaemonManager_urlConfigurationManager), *(_QWORD *)(v3 + OBJC_IVAR____TtC13appleaccountd25AppleAccountDaemonManager_urlConfigurationManager + 24));
  return sub_1000EF078(a1, a2);
}

void sub_10015AAE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  id v8;

  if (a3)
    v7 = _convertErrorToNSError(_:)(a3);
  else
    v7 = 0;
  v8 = (id)v7;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(a4 + 16))(a4, a1, a2);

}

uint64_t sub_10015AB4C()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

void sub_10015AB70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  sub_10015AAE4(a1, a2, a3, *(_QWORD *)(v3 + 16));
}

uint64_t sub_10015AB78()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 24));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10015ABAC()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  _QWORD *v5;

  v2 = (void *)v0[2];
  v3 = (void *)v0[3];
  v4 = (void *)v0[4];
  v5 = (_QWORD *)swift_task_alloc(dword_1002941A4);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_100075348;
  return ((uint64_t (*)(void *, void *, void *))((char *)&dword_1002941A0 + dword_1002941A0))(v2, v3, v4);
}

uint64_t sub_10015AC18(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(void);

  v6 = (uint64_t (*)(void))((char *)a3 + *a3);
  v4 = (_QWORD *)swift_task_alloc(a3[1]);
  *(_QWORD *)(v3 + 16) = v4;
  *v4 = v3;
  v4[1] = sub_100075348;
  return v6();
}

uint64_t sub_10015AC70(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v7)(void);

  v7 = (uint64_t (*)(void))((char *)a4 + *a4);
  v5 = (_QWORD *)swift_task_alloc(a4[1]);
  *(_QWORD *)(v4 + 16) = v5;
  *v5 = v4;
  v5[1] = sub_100075348;
  return v7();
}

uint64_t sub_10015ACC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD v19[4];

  v6 = type metadata accessor for TaskPriority(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) == 1)
  {
    sub_100075038(a1);
    v8 = 7168;
    v9 = *(_QWORD *)(a3 + 16);
    if (v9)
    {
LABEL_3:
      v10 = *(_QWORD *)(a3 + 24);
      ObjectType = swift_getObjectType(v9);
      swift_unknownObjectRetain(v9);
      v12 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v10);
      v14 = v13;
      swift_unknownObjectRelease(v9);
      goto LABEL_6;
    }
  }
  else
  {
    v15 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    v8 = v15 | 0x1C00;
    v9 = *(_QWORD *)(a3 + 16);
    if (v9)
      goto LABEL_3;
  }
  v12 = 0;
  v14 = 0;
LABEL_6:
  v16 = swift_allocObject(&unk_10026AB60, 32, 7);
  *(_QWORD *)(v16 + 16) = a2;
  *(_QWORD *)(v16 + 24) = a3;
  if (v14 | v12)
  {
    v19[0] = 0;
    v19[1] = 0;
    v17 = v19;
    v19[2] = v12;
    v19[3] = v14;
  }
  else
  {
    v17 = 0;
  }
  return swift_task_create(v8, v17, (char *)&type metadata for () + 8, &unk_1002941C8, v16);
}

uint64_t sub_10015AE0C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10015AE30(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_1002941C4);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_1000224D8;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_1002941C0 + dword_1002941C0))(a1, v4);
}

uint64_t sub_10015AEA0()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 32));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10015AEDC()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  _QWORD *v6;

  v2 = (void *)v0[2];
  v3 = (void *)v0[3];
  v5 = (void *)v0[4];
  v4 = (void *)v0[5];
  v6 = (_QWORD *)swift_task_alloc(dword_1002941DC);
  *(_QWORD *)(v1 + 16) = v6;
  *v6 = v1;
  v6[1] = sub_1000224D8;
  return ((uint64_t (*)(void *, void *, void *, void *))((char *)&dword_1002941D8 + dword_1002941D8))(v2, v3, v5, v4);
}

id sub_10015AF5C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  objc_class *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  id v17;
  objc_super v19;
  _QWORD v20[5];
  _QWORD v21[5];

  v6 = *a3;
  v7 = type metadata accessor for StorageController();
  v21[3] = v7;
  v21[4] = &off_100266E08;
  v21[0] = a1;
  v8 = (objc_class *)type metadata accessor for AppleAccountDaemonManager();
  v9 = (char *)objc_allocWithZone(v8);
  v10 = sub_1000067AC((uint64_t)v21, v7);
  __chkstk_darwin(v10, v10);
  v12 = (uint64_t *)((char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v13 + 16))(v12);
  v14 = *v12;
  v20[3] = v7;
  v20[4] = &off_100266E08;
  v20[0] = v14;
  sub_100006CA4((uint64_t)v20, (uint64_t)&v9[OBJC_IVAR____TtC13appleaccountd25AppleAccountDaemonManager_storageController]);
  v15 = &v9[OBJC_IVAR____TtC13appleaccountd25AppleAccountDaemonManager_loginResponseCache];
  *((_QWORD *)v15 + 3) = sub_1000080B4(&qword_10028DFD8);
  *((_QWORD *)v15 + 4) = sub_10015B4B4();
  *(_QWORD *)v15 = a2;
  v16 = &v9[OBJC_IVAR____TtC13appleaccountd25AppleAccountDaemonManager_urlConfigurationManager];
  *((_QWORD *)v16 + 3) = v6;
  *((_QWORD *)v16 + 4) = &off_100267210;
  *(_QWORD *)v16 = a3;
  v19.receiver = v9;
  v19.super_class = v8;
  v17 = objc_msgSendSuper2(&v19, "init");
  sub_100006F58(v20);
  sub_100006F58(v21);
  return v17;
}

void sub_10015B0AC(void *a1, const void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  id v15;
  void *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  id v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  const void *v34;
  uint64_t v35;
  uint64_t v36;

  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = swift_allocObject(&unk_10026AC00, 24, 7);
  *(_QWORD *)(v9 + 16) = a2;
  _Block_copy(a2);
  if (qword_10028ADB0 != -1)
    swift_once(&qword_10028ADB0, sub_100046CC8);
  v10 = sub_100005288(v4, (uint64_t)qword_1002A8990);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v10, v4);
  v11 = a1;
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v12, v13))
  {
    v31 = v10;
    v32 = v5;
    v33 = v9;
    v34 = a2;
    v14 = (uint8_t *)swift_slowAlloc(12, -1);
    v30 = swift_slowAlloc(32, -1);
    v36 = v30;
    *(_DWORD *)v14 = 136315138;
    v15 = objc_msgSend(v11, "aa_altDSID");
    if (!v15)
    {
      _Block_release(v34);

      __break(1u);
      return;
    }
    v16 = v15;
    v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
    v19 = v18;

    v35 = sub_1001DEF4C(v17, v19, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, &v36);

    swift_bridgeObjectRelease(v19);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Account %s is deleted.\nChecking if it's the primary account…", v14, 0xCu);
    v20 = v30;
    swift_arrayDestroy(v30, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v20, -1, -1);
    swift_slowDealloc(v14, -1, -1);

    (*(void (**)(char *, uint64_t))(v32 + 8))(v8, v4);
    v9 = v33;
    a2 = v34;
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  }
  v21 = objc_msgSend(v11, "aa_isAccountClass:", AAAccountClassPrimary);
  if ((_DWORD)v21)
  {
    v22 = Logger.logObject.getter(v21);
    v23 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v22, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v24 = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Primary account is deleted. Purging the AAD storage…", v24, 2u);
      swift_slowDealloc(v24, -1, -1);
    }

    v25 = type metadata accessor for DataCryptor(0);
    swift_allocObject(v25, *(unsigned int *)(v25 + 48), *(unsigned __int16 *)(v25 + 52));
    v26 = sub_1001A7AE4(0xD000000000000017, 0x800000010020D740, 0x614364726F636572, 0xEB00000000656863);
    sub_1001A8868();
    v27 = swift_allocObject(&unk_10026AC28, 32, 7);
    *(_QWORD *)(v27 + 16) = sub_1000889B4;
    *(_QWORD *)(v27 + 24) = v9;
    swift_retain(v9);
    sub_100136EC4((void (*)(uint64_t))sub_10002E4D0);
    swift_release(v9);
    swift_release(v26);
    v28 = v27;
  }
  else
  {
    (*((void (**)(const void *, _QWORD))a2 + 2))(a2, 0);
    v28 = v9;
  }
  swift_release(v28);
}

unint64_t sub_10015B478()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100294200;
  if (!qword_100294200)
  {
    v1 = objc_opt_self(ACAccount);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100294200);
  }
  return result;
}

unint64_t sub_10015B4B4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100294210;
  if (!qword_100294210)
  {
    v1 = sub_10000D908(&qword_10028DFD8);
    result = swift_getWitnessTable(&unk_10021ABC4, v1);
    atomic_store(result, (unint64_t *)&qword_100294210);
  }
  return result;
}

uint64_t sub_10015B508()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v1 = OBJC_IVAR____TtC13appleaccountd29TrustedContactHealthScheduler____lazy_storage___activityProvider;
  v2 = *(_QWORD *)(v0 + OBJC_IVAR____TtC13appleaccountd29TrustedContactHealthScheduler____lazy_storage___activityProvider);
  if (v2)
  {
    v3 = *(_QWORD *)(v0
                   + OBJC_IVAR____TtC13appleaccountd29TrustedContactHealthScheduler____lazy_storage___activityProvider);
  }
  else
  {
    v4 = v0;
    v9 = sub_10015BB70();
    v5 = sub_10015BFD0();
    sub_1001FCF70(v5);
    v6 = type metadata accessor for HealthCheckActivityProvider(0);
    swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
    v3 = sub_10009F828(v9);
    v7 = *(_QWORD *)(v4 + v1);
    *(_QWORD *)(v4 + v1) = v3;
    swift_retain(v3);
    swift_release(v7);
    v2 = 0;
  }
  swift_retain(v2);
  return v3;
}

void sub_10015B5AC(uint64_t a1, uint64_t a2, void (*a3)(NSObject *))
{
  sub_10015C198(a2, a3);
}

uint64_t sub_10015B5BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = v0 + OBJC_IVAR____TtC13appleaccountd29TrustedContactHealthScheduler__xpcActivityScheduler;
  v2 = sub_1000080B4((uint64_t *)&unk_10028BB70);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  v3 = v0 + OBJC_IVAR____TtC13appleaccountd29TrustedContactHealthScheduler__storageController;
  v4 = sub_1000080B4(&qword_10028CCC0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  swift_release(*(_QWORD *)(v0
                          + OBJC_IVAR____TtC13appleaccountd29TrustedContactHealthScheduler____lazy_storage___activityProvider));
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_10015B64C()
{
  return type metadata accessor for TrustedContactHealthScheduler(0);
}

uint64_t type metadata accessor for TrustedContactHealthScheduler(uint64_t a1)
{
  uint64_t result;

  result = qword_100294258;
  if (!qword_100294258)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for TrustedContactHealthScheduler);
  return result;
}

void sub_10015B690(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[3];

  sub_100017464(319, (unint64_t *)&qword_10028BA80, &qword_100299380);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_100017464(319, &qword_10028C898, &qword_10028C8A0);
    if (v5 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(v4 - 8) + 64;
      v6[2] = "\b";
      swift_updateClassMetadata2(a1, 256, 3, v6, a1 + 80);
    }
  }
}

uint64_t sub_10015B740()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t *v6;
  uint64_t v7;
  _QWORD v10[5];

  v1 = sub_1000080B4((uint64_t *)&unk_10028BB70);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  v5 = (char *)&v10[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v5, *v0 + OBJC_IVAR____TtC13appleaccountd29TrustedContactHealthScheduler__xpcActivityScheduler, v1);
  Dependency.wrappedValue.getter(v10, v1);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  v6 = sub_10000732C(v10, v10[3]);
  v7 = sub_10015B508();
  sub_10015B910(v7, *v6);
  swift_release(v7);
  return sub_100006F58(v10);
}

uint64_t sub_10015B820(void (*a1)(NSObject *), uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  v7 = __chkstk_darwin(v4, v6);
  v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = UUID.init()(v7);
  v11 = UUID.uuidString.getter(v10);
  v13 = v12;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v9, v4);
  v14 = sub_10015B508();
  swift_retain(a2);
  sub_1000A1C6C(0, v11, v13, v14, a1, a2);
  swift_bridgeObjectRelease(v13);
  swift_release(v14);
  return swift_release(a2);
}

void sub_10015B910(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v4 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v4, v5);
  v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_retain(a1);
  v8 = static String._fromUTF8Repairing(_:)("com.apple.appleaccountd.trustedContacts.healthCheck", 51);
  v10 = v9;
  v11 = sub_1000C73D0();
  if ((~*(_QWORD *)&v11 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v11 <= -9.22337204e18)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if (v11 >= 9.22337204e18)
  {
LABEL_10:
    __break(1u);
    return;
  }
  v12 = (uint64_t)v11;
  if ((uint64_t)v11 >= 0)
    v13 = (uint64_t)v11;
  else
    v13 = v12 + 1;
  v14 = v13 >> 1;
  v15 = swift_allocObject(&unk_10026AC70, 24, 7);
  swift_weakInit(v15 + 16, a1);
  v16 = swift_bridgeObjectRetain(v10);
  static DispatchQoS.background.getter(v16);
  v17 = swift_allocObject(&unk_10026AC98, 56, 7);
  *(_WORD *)(v17 + 16) = 257;
  *(_QWORD *)(v17 + 24) = v14;
  *(_QWORD *)(v17 + 32) = v14;
  *(_QWORD *)(v17 + 40) = v12;
  *(_QWORD *)(v17 + 48) = 8;
  v18 = swift_allocObject(&unk_10026ACC0, 32, 7);
  *(_QWORD *)(v18 + 16) = sub_10015C4C0;
  *(_QWORD *)(v18 + 24) = v15;
  v19 = type metadata accessor for XPCActivity();
  swift_allocObject(v19, 104, 7);
  swift_retain(v15);
  v20 = sub_10002E144(v8, v10, (uint64_t)v7, (uint64_t)sub_1000108D0, v17, (uint64_t)sub_1000108D8, v18);
  swift_release(v15);
  swift_bridgeObjectRelease(v10);
  swift_release(v17);
  swift_release(v18);
  v21 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v20;
  swift_release(v21);
  v22 = swift_allocObject(&unk_10026ACE8, 24, 7);
  swift_weakInit(v22 + 16, a2);
  v23 = type metadata accessor for OSTransaction();
  swift_allocObject(v23, 48, 7);
  v24 = sub_1000E0EB0("com.apple.appleaccountd.trustedContacts.healthCheck", 51, 2);
  sub_100187158(v24, v22);
  swift_release(a1);
  swift_release(v22);
  swift_release(v24);
}

uint64_t sub_10015BB70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v0 = sub_1000080B4(&qword_10028BB48);
  v1 = swift_allocObject(v0, 312, 7);
  *(_OWORD *)(v1 + 16) = xmmword_10021E9E0;
  v2 = type metadata accessor for TrustedContactsDataSync(0);
  v3 = swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  v4 = sub_1000080B4(&qword_10028C860);
  Dependency.init(dependencyId:config:)(0, 0, 0, v4);
  v5 = sub_1000080B4(&qword_10028C880);
  Dependency.init(dependencyId:config:)(0, 0, 0, v5);
  v6 = sub_1000080B4(&qword_100294B10);
  Dependency.init(dependencyId:config:)(0, 0, 0, v6);
  v7 = sub_1000080B4(&qword_10028C890);
  Dependency.init(dependencyId:config:)(0, 0, 0, v7);
  v8 = sub_10015C4FC();
  Dependency.init(dependencyId:config:)(0, 0, 0, v8);
  v9 = sub_1000080B4(&qword_10028E2C0);
  Dependency.init(dependencyId:config:)(0, 0, 0, v9);
  v10 = sub_1000080B4(&qword_10028C8D0);
  Dependency.init(dependencyId:config:)(0, 0, 0, v10);
  *(_QWORD *)(v1 + 56) = v2;
  *(_QWORD *)(v1 + 64) = &off_100267B68;
  *(_QWORD *)(v1 + 32) = v3;
  v11 = type metadata accessor for TrustedContactsAwarenessSync(0);
  v12 = swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
  Dependency.init(dependencyId:config:)(0, 0, 0, v4);
  Dependency.init(dependencyId:config:)(0, 0, 0, v5);
  Dependency.init(dependencyId:config:)(0, 0, 0, v6);
  *(_QWORD *)(v1 + 96) = v11;
  *(_QWORD *)(v1 + 104) = &off_100266BE0;
  *(_QWORD *)(v1 + 72) = v12;
  v13 = type metadata accessor for CustodianOwnerHealthCheck(0);
  swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
  v14 = sub_1001E8FDC();
  *(_QWORD *)(v1 + 136) = v13;
  *(_QWORD *)(v1 + 144) = &off_10026F820;
  *(_QWORD *)(v1 + 112) = v14;
  v15 = type metadata accessor for CustodianHealthCheck(0);
  v16 = swift_allocObject(v15, *(unsigned int *)(v15 + 48), *(unsigned __int16 *)(v15 + 52));
  Dependency.init(dependencyId:config:)(0, 0, 0, v5);
  v17 = sub_1000080B4(&qword_10028C8A0);
  Dependency.init(dependencyId:config:)(0, 0, 0, v17);
  v18 = sub_1000080B4(&qword_100297720);
  Dependency.init(dependencyId:config:)(0, 0, 0, v18);
  *(_QWORD *)(v1 + 176) = v15;
  *(_QWORD *)(v1 + 184) = &off_100264830;
  *(_QWORD *)(v1 + 152) = v16;
  v19 = type metadata accessor for BenefactorAccessKeyHealthCheck(0);
  v20 = swift_allocObject(v19, *(unsigned int *)(v19 + 48), *(unsigned __int16 *)(v19 + 52));
  v21 = type metadata accessor for InheritanceRequestManager(0);
  Dependency.init(dependencyId:config:)(0, 0, 0, v21);
  Dependency.init(dependencyId:config:)(0, 0, 0, v6);
  *(_QWORD *)(v1 + 216) = v19;
  *(_QWORD *)(v1 + 224) = &off_10026D670;
  *(_QWORD *)(v1 + 192) = v20;
  v22 = type metadata accessor for BeneficiaryHealthCheck(0);
  swift_allocObject(v22, *(unsigned int *)(v22 + 48), *(unsigned __int16 *)(v22 + 52));
  v23 = sub_1000D63AC();
  *(_QWORD *)(v1 + 256) = v22;
  *(_QWORD *)(v1 + 264) = &off_1002667A0;
  *(_QWORD *)(v1 + 232) = v23;
  v24 = type metadata accessor for BenefactorHealthCheck(0);
  v25 = swift_allocObject(v24, *(unsigned int *)(v24 + 48), *(unsigned __int16 *)(v24 + 52));
  Dependency.init(dependencyId:config:)(0, 0, 0, v6);
  Dependency.init(dependencyId:config:)(0, 0, 0, v17);
  *(_QWORD *)(v1 + 296) = v24;
  *(_QWORD *)(v1 + 304) = &off_100261688;
  *(_QWORD *)(v1 + 272) = v25;
  return v1;
}

uint64_t sub_10015BFD0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v0 = sub_1000080B4(&qword_10028BB48);
  v1 = swift_allocObject(v0, 72, 7);
  *(_OWORD *)(v1 + 16) = xmmword_100218E30;
  v2 = type metadata accessor for CloudDataProtectionHealthCheck(0);
  v3 = swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  v4 = sub_1000080B4(&qword_10028C8D0);
  Dependency.init(dependencyId:config:)(0, 0, 0, v4);
  v5 = sub_1000080B4(&qword_100294AE0);
  Dependency.init(dependencyId:config:)(0, 0, 0, v5);
  v6 = sub_1000080B4(&qword_10028E280);
  Dependency.init(dependencyId:config:)(0, 0, 0, v6);
  v7 = sub_1000080B4((uint64_t *)&unk_10028DD90);
  Dependency.init(dependencyId:config:)(0, 0, 0, v7);
  v8 = sub_1000080B4((uint64_t *)&unk_10028FD08);
  Dependency.init(dependencyId:config:)(0, 0, 0, v8);
  v9 = sub_1000080B4(&qword_10028C860);
  Dependency.init(dependencyId:config:)(0, 0, 0, v9);
  v10 = sub_1000080B4((uint64_t *)&unk_10028C8E0);
  Dependency.init(dependencyId:config:)(0, 0, 0, v10);
  *(_QWORD *)(v1 + 56) = v2;
  *(_QWORD *)(v1 + 64) = &off_100265660;
  *(_QWORD *)(v1 + 32) = v3;
  return v1;
}

void sub_10015C198(uint64_t a1, void (*a2)(NSObject *))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t inited;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  uint64_t v12;
  NSObject *v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  NSObject *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;

  if (*(_QWORD *)(a1 + 16))
  {
    type metadata accessor for AAError(0);
    v5 = v4;
    v27 = -4408;
    v6 = sub_1000080B4(&qword_10028BB68);
    inited = swift_initStackObject(v6, &v26);
    *(_OWORD *)(inited + 16) = xmmword_100218E30;
    *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(AAPartialErrorsByNameKey);
    *(_QWORD *)(inited + 40) = v8;
    *(_QWORD *)(inited + 72) = sub_1000080B4((uint64_t *)&unk_10028CD40);
    *(_QWORD *)(inited + 48) = a1;
    swift_bridgeObjectRetain(a1);
    v9 = sub_100015894(inited);
    v10 = sub_1000C2D50();
    _BridgedStoredNSError.init(_:userInfo:)(&v28, &v27, v9, v5, v10);
    v11 = v28;
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v12 = type metadata accessor for Logger(0);
    sub_100005288(v12, (uint64_t)qword_1002A8A08);
    v13 = v11;
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.error.getter(v14);
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc(12, -1);
      v17 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v16 = 138412290;
      v18 = _convertErrorToNSError(_:)(v13);
      v28 = (void *)v18;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29);
      *v17 = v18;

      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Overall on-demand health check failed: %@", v16, 0xCu);
      v19 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v17, 1, v19);
      swift_slowDealloc(v17, -1, -1);
      swift_slowDealloc(v16, -1, -1);
    }
    else
    {

      v14 = v13;
    }

    v25 = v13;
    a2(v13);

  }
  else
  {
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v20 = type metadata accessor for Logger(0);
    v21 = sub_100005288(v20, (uint64_t)qword_1002A8A08);
    v22 = Logger.logObject.getter(v21);
    v23 = static os_log_type_t.error.getter(v22);
    if (os_log_type_enabled(v22, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v24 = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Overall on-demand health check completed.", v24, 2u);
      swift_slowDealloc(v24, -1, -1);
    }

    a2(0);
  }
}

uint64_t sub_10015C49C()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_10015C4C0(uint64_t a1)
{
  uint64_t v1;

  sub_10009F9B0(a1, v1);
}

uint64_t sub_10015C4C8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10015C4D8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

unint64_t sub_10015C4FC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10028E828;
  if (!qword_10028E828)
  {
    v1 = objc_opt_self(NSUserDefaults);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10028E828);
  }
  return result;
}

Swift::Void __swiftcall OSActivity.close()()
{
  uint64_t v0;
  _BYTE v1[24];

  swift_beginAccess(v0 + 24, v1, 33, 0);
  os_activity_scope_leave((os_activity_scope_state_t)(v0 + 24));
  swift_endAccess(v1);
}

uint64_t sub_10015C584(char *a1, uint64_t a2, char a3)
{
  int v3;
  uint64_t v4;
  NSObject *v6;
  char *v7;
  unsigned int v8;
  unsigned int v9;
  os_activity_t v10;
  NSObject *v11;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  char description[8];

  *(_QWORD *)(v4 + 24) = 0;
  *(_QWORD *)(v4 + 32) = 0;
  if ((a3 & 1) != 0)
  {
    if ((unint64_t)a1 >> 32)
    {
LABEL_15:
      __break(1u);
      goto LABEL_16;
    }
    v8 = a1 >> 11;
    if (a1 >> 11 == 27)
    {
      __break(1u);
    }
    else
    {
      v8 = a1 >> 16;
      if (a1 >> 16 > 0x10)
      {
        __break(1u);
      }
      else if ((a1 & 0xFFFFFF80) == 0)
      {
        if (a1 > 0xFF)
        {
          __break(1u);
          goto LABEL_21;
        }
        v9 = ((_BYTE)a1 + 1);
LABEL_11:
        *(_QWORD *)description = (v9 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << ((32 - (__clz(v9) & 0x38)) & 0x38));
        if (qword_10028AEA8 == -1)
        {
LABEL_12:
          v6 = qword_100294380;
          v7 = description;
          goto LABEL_13;
        }
LABEL_21:
        swift_once(&qword_10028AEA8, sub_10015C768);
        goto LABEL_12;
      }
      v3 = (a1 & 0x3F) << 8;
      if (a1 < 0x800)
      {
        v9 = (v3 | (a1 >> 6)) + 33217;
        goto LABEL_11;
      }
    }
    v13 = (v3 | (a1 >> 6) & 0x3F) << 8;
    v14 = (((v13 | (a1 >> 12) & 0x3F) << 8) | (a1 >> 18)) - 2122219023;
    v15 = (v13 | (a1 >> 12)) + 8487393;
    if (v8)
      v9 = v14;
    else
      v9 = v15;
    goto LABEL_11;
  }
  if (!a1)
  {
    __break(1u);
    goto LABEL_15;
  }
  if (qword_10028AEA8 != -1)
LABEL_16:
    swift_once(&qword_10028AEA8, sub_10015C768);
  v6 = qword_100294380;
  v7 = a1;
LABEL_13:
  v10 = _os_activity_create((void *)&_mh_execute_header, v7, v6, OS_ACTIVITY_FLAG_DEFAULT);
  *(_QWORD *)(v4 + 16) = v10;
  swift_beginAccess(v4 + 24, description, 33, 0);
  v11 = swift_unknownObjectRetain(v10);
  os_activity_scope_enter(v11, (os_activity_scope_state_t)(v4 + 24));
  swift_endAccess(description);
  swift_unknownObjectRelease(v10);
  return v4;
}

uint64_t sub_10015C768()
{
  qword_100294380 = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "_os_activity_current");
  return swift_unknownObjectRetain(qword_100294380);
}

uint64_t InheritanceSecurityManager.deinit()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  return v0;
}

uint64_t OSActivity.__deallocating_deinit()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocClassInstance(v0, 40, 7);
}

uint64_t type metadata accessor for OSActivity()
{
  return objc_opt_self(_TtC13appleaccountd10OSActivity);
}

void sub_10015C7F0(void *a1, uint64_t a2, uint64_t a3, unint64_t a4, void (*a5)(void), uint64_t a6, uint64_t a7, uint64_t a8)
{
  void (*v8)(void);
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t *v17;
  void (*v18)(void);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  unint64_t v43;
  uint64_t v44;
  _BYTE *v45;
  uint64_t v46;
  uint64_t v47;
  NSObject *v48;
  __n128 v49;
  os_log_type_t v50;
  uint8_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  NSObject *v55;
  os_log_type_t v56;
  uint8_t *v57;
  uint64_t v58;
  unint64_t v59;
  char *v60;
  uint64_t v61;
  char v62;
  unint64_t v63;
  uint64_t v65;
  uint64_t v66;

  v8 = a5;
  if (a2)
  {
    swift_errorRetain(a2);
    if (qword_10028ADB0 != -1)
      swift_once(&qword_10028ADB0, sub_100046CC8);
    v12 = type metadata accessor for Logger(0);
    sub_100005288(v12, (uint64_t)qword_1002A8990);
    swift_errorRetain(a2);
    swift_bridgeObjectRetain(a4);
    swift_errorRetain(a2);
    swift_bridgeObjectRetain(a4);
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.error.getter(v14);
    if (os_log_type_enabled(v14, v15))
    {
      v16 = swift_slowAlloc(22, -1);
      v17 = (uint64_t *)swift_slowAlloc(8, -1);
      v18 = v8;
      v19 = swift_slowAlloc(32, -1);
      v66 = v19;
      *(_DWORD *)v16 = 136315394;
      swift_bridgeObjectRetain(a4);
      v65 = sub_1001DEF4C(a3, a4, &v66);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, &v66);
      swift_bridgeObjectRelease_n(a4, 3);
      *(_WORD *)(v16 + 12) = 2112;
      v20 = _convertErrorToNSError(_:)(a2);
      v65 = v20;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, &v66);
      *v17 = v20;
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Failed to verify arming for service %s with error: %@", (uint8_t *)v16, 0x16u);
      v21 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v17, 1, v21);
      swift_slowDealloc(v17, -1, -1);
      swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
      v22 = v19;
      v8 = v18;
      swift_slowDealloc(v22, -1, -1);
      swift_slowDealloc(v16, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n(a4, 2);
      swift_errorRelease(a2);
      swift_errorRelease(a2);
    }

    swift_errorRetain(a2);
    ((void (*)(uint64_t))v8)(a2);
    swift_errorRelease(a2);
    swift_errorRelease(a2);
    return;
  }
  if (a1)
  {
    v25 = a1;
    v26 = objc_msgSend(v25, "webSessionIdentifier");
    v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
    v29 = v28;

    if (v27 == a7 && v29 == a8)
    {
      swift_bridgeObjectRelease(a8);
    }
    else
    {
      v31 = _stringCompareWithSmolCheck(_:_:expecting:)(a7, a8, v27, v29, 0);
      swift_bridgeObjectRelease(v29);
      if ((v31 & 1) == 0)
      {
        if (qword_10028ADB0 != -1)
          swift_once(&qword_10028ADB0, sub_100046CC8);
        v32 = type metadata accessor for Logger(0);
        sub_100005288(v32, (uint64_t)qword_1002A8990);
        v33 = swift_bridgeObjectRetain_n(a4, 2);
        v34 = Logger.logObject.getter(v33);
        v35 = static os_log_type_t.error.getter(v34);
        if (os_log_type_enabled(v34, v35))
        {
          v36 = (uint8_t *)swift_slowAlloc(12, -1);
          v37 = swift_slowAlloc(32, -1);
          v66 = v37;
          *(_DWORD *)v36 = 136315138;
          swift_bridgeObjectRetain(a4);
          v65 = sub_1001DEF4C(a3, a4, &v66);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, &v66);
          swift_bridgeObjectRelease_n(a4, 3);
          swift_arrayDestroy(v37, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v37, -1, -1);
          swift_slowDealloc(v36, -1, -1);

        }
        else
        {

          swift_bridgeObjectRelease_n(a4, 2);
        }
        v63 = sub_10015D0B4();
        v61 = swift_allocError(&type metadata for WalrusError, v63, 0, 0);
        v62 = 4;
        goto LABEL_39;
      }
    }
    if (objc_msgSend(v25, "isValid"))
    {
      if (qword_10028ADB0 != -1)
        swift_once(&qword_10028ADB0, sub_100046CC8);
      v46 = type metadata accessor for Logger(0);
      sub_100005288(v46, (uint64_t)qword_1002A8990);
      v47 = swift_bridgeObjectRetain_n(a4, 2);
      v48 = Logger.logObject.getter(v47);
      v50 = static os_log_type_t.default.getter(v49);
      if (os_log_type_enabled(v48, v50))
      {
        v51 = (uint8_t *)swift_slowAlloc(12, -1);
        v52 = swift_slowAlloc(32, -1);
        v66 = v52;
        *(_DWORD *)v51 = 136315138;
        swift_bridgeObjectRetain(a4);
        v65 = sub_1001DEF4C(a3, a4, &v66);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, &v66);
        swift_bridgeObjectRelease_n(a4, 3);
        _os_log_impl((void *)&_mh_execute_header, v48, v50, "Service %s is armed!", v51, 0xCu);
        swift_arrayDestroy(v52, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v52, -1, -1);
        swift_slowDealloc(v51, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(a4, 2);
      }
      ((void (*)(_QWORD))a5)(0);
      goto LABEL_40;
    }
    if (qword_10028ADB0 != -1)
      swift_once(&qword_10028ADB0, sub_100046CC8);
    v53 = type metadata accessor for Logger(0);
    sub_100005288(v53, (uint64_t)qword_1002A8990);
    v54 = swift_bridgeObjectRetain_n(a4, 2);
    v55 = Logger.logObject.getter(v54);
    v56 = static os_log_type_t.error.getter(v55);
    if (os_log_type_enabled(v55, v56))
    {
      v57 = (uint8_t *)swift_slowAlloc(12, -1);
      v58 = swift_slowAlloc(32, -1);
      v66 = v58;
      *(_DWORD *)v57 = 136315138;
      swift_bridgeObjectRetain(a4);
      v65 = sub_1001DEF4C(a3, a4, &v66);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, &v66);
      swift_bridgeObjectRelease_n(a4, 3);
      _os_log_impl((void *)&_mh_execute_header, v55, v56, "Arming context for service %s was invalid.", v57, 0xCu);
      swift_arrayDestroy(v58, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v58, -1, -1);
      swift_slowDealloc(v57, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a4, 2);
    }
    v59 = sub_10015D0B4();
    v61 = swift_allocError(&type metadata for WalrusError, v59, 0, 0);
    v62 = 5;
LABEL_39:
    *v60 = v62;
    a5();
    swift_errorRelease(v61);
LABEL_40:

    return;
  }
  if (qword_10028ADB0 != -1)
    swift_once(&qword_10028ADB0, sub_100046CC8);
  v38 = type metadata accessor for Logger(0);
  v39 = sub_100005288(v38, (uint64_t)qword_1002A8990);
  v40 = Logger.logObject.getter(v39);
  v41 = static os_log_type_t.error.getter(v40);
  if (os_log_type_enabled(v40, v41))
  {
    v42 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v42 = 0;
    _os_log_impl((void *)&_mh_execute_header, v40, v41, "Unknown error, no arming information located.", v42, 2u);
    swift_slowDealloc(v42, -1, -1);
  }

  v43 = sub_10015D0B4();
  v44 = swift_allocError(&type metadata for WalrusError, v43, 0, 0);
  *v45 = 3;
  v8();
  swift_errorRelease(v44);
}

uint64_t type metadata accessor for AuthKitRequestController()
{
  return objc_opt_self(_TtC13appleaccountd24AuthKitRequestController);
}

unint64_t sub_10015D0B4()
{
  unint64_t result;

  result = qword_1002944D8;
  if (!qword_1002944D8)
  {
    result = swift_getWitnessTable(&unk_10021923C, &type metadata for WalrusError);
    atomic_store(result, (unint64_t *)&qword_1002944D8);
  }
  return result;
}

uint64_t sub_10015D0F8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[3];
  _BYTE v7[8];

  v2 = sub_10015D404(a1, a2);
  swift_getErrorValue(v2, v7, v6);
  v3 = sub_10002FAA8(v6[1], v6[2]);
  v4 = _convertErrorToNSError(_:)(v3);
  swift_errorRelease(v3);
  swift_errorRelease(v2);
  return v4;
}

BOOL sub_10015D160(void *a1)
{
  return sub_10015D668(a1, 11);
}

uint64_t sub_10015D168(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;

  __chkstk_darwin(a1, v1);
  v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v5 + 16))(v4);
  type metadata accessor for CKError(0);
  if (swift_dynamicCast(&v9, v4, a1, v6, 6))
    return v9;
  else
    return 0;
}

BOOL sub_10015D1F8(void *a1)
{
  return sub_10015D668(a1, 14);
}

uint64_t sub_10015D200(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  void *v6;
  uint64_t result;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  unint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;

  type metadata accessor for CKError(0);
  v3 = v2;
  v19 = 14;
  v4 = sub_100005014((uint64_t)&_swiftEmptyArrayStorage);
  v5 = sub_10009C47C();
  _BridgedStoredNSError.init(_:userInfo:)(&v16, &v19, v4, v3, v5);
  v6 = (void *)v16;
  v18 = v16;
  _BridgedStoredNSError.code.getter(&v19, v3, v5);

  result = sub_10015D724(v19, a1);
  if (result)
  {
    v8 = (void *)result;
    v19 = result;
    v9 = _BridgedStoredNSError.userInfo.getter(v3, v5);
    v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(CKRecordChangedErrorServerRecordKey);
    v12 = v11;
    if (*(_QWORD *)(v9 + 16) && (v13 = sub_10010A9E0(v10, v11), (v14 & 1) != 0))
    {
      sub_1000244B0(*(_QWORD *)(v9 + 56) + 32 * v13, (uint64_t)&v16);
    }
    else
    {
      v16 = 0u;
      v17 = 0u;
    }
    swift_bridgeObjectRelease(v12);

    swift_bridgeObjectRelease(v9);
    if (*((_QWORD *)&v17 + 1))
    {
      v15 = sub_10015DC8C();
      if (swift_dynamicCast(&v19, &v16, (char *)&type metadata for Any + 8, v15, 6))
        return v19;
      else
        return 0;
    }
    else
    {
      sub_10008C388((uint64_t)&v16);
      return 0;
    }
  }
  return result;
}

uint64_t sub_10015D36C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  id v10;

  __chkstk_darwin(a1, v1);
  v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v5 + 16))(v4);
  type metadata accessor for CKError(0);
  v7 = swift_dynamicCast(&v10, v4, a1, v6, 6);
  if ((_DWORD)v7)

  return v7;
}

uint64_t sub_10015D404(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v18[3];
  _BYTE v19[8];

  v5 = *(_QWORD *)(a1 - 8);
  v6 = __chkstk_darwin(a1, a2);
  v8 = (char *)v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10015D168(v6);
  if (v9)
  {
    v10 = (void *)v9;
    v11 = related decl 'e' for CKErrorCode.partialErrorsByItemID.getter();
    if (v11)
    {
      v12 = v11;
      v13 = sub_1001FE930(v11);
      swift_bridgeObjectRelease(v12);
      if (v13)
      {
        swift_getErrorValue(v13, v19, v18);
        v14 = sub_10015D404(v18[1], v18[2]);
        swift_errorRelease(v13);

        return v14;
      }
    }

  }
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v2, a1);
  v15 = _getErrorEmbeddedNSError<A>(_:)(v8, a1, a2);
  if (v15)
  {
    v14 = v15;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, a1);
  }
  else
  {
    v14 = swift_allocError(a1, a2, 0, 0);
    (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v16, v8, a1);
  }
  return v14;
}

uint64_t sub_10015D540(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v11;
  __int128 v12;
  __int128 v13;

  *(_QWORD *)&v12 = a1;
  type metadata accessor for CKError(0);
  v2 = v1;
  v3 = sub_10009C47C();
  v4 = _BridgedStoredNSError.userInfo.getter(v2, v3);
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(CKErrorRetryAfterKey);
  v7 = v6;
  if (*(_QWORD *)(v4 + 16) && (v8 = sub_10010A9E0(v5, v6), (v9 & 1) != 0))
  {
    sub_1000244B0(*(_QWORD *)(v4 + 56) + 32 * v8, (uint64_t)&v12);
  }
  else
  {
    v12 = 0u;
    v13 = 0u;
  }
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(v4);
  if (*((_QWORD *)&v13 + 1))
  {
    if (swift_dynamicCast(&v11, &v12, (char *)&type metadata for Any + 8, &type metadata for Double, 6))
      return v11;
    else
      return 0;
  }
  else
  {
    sub_10008C388((uint64_t)&v12);
    return 0;
  }
}

BOOL sub_10015D630(void *a1)
{
  return sub_10015D668(a1, 3);
}

BOOL sub_10015D638(void *a1)
{
  return sub_10015D668(a1, 4);
}

BOOL sub_10015D640(void *a1)
{
  return sub_10015D668(a1, 6);
}

BOOL sub_10015D648(void *a1)
{
  return sub_10015D668(a1, 7);
}

BOOL sub_10015D650(void *a1)
{
  return sub_10015D668(a1, 23);
}

BOOL sub_10015D658(void *a1)
{
  return sub_10015D668(a1, 26);
}

BOOL sub_10015D660(void *a1)
{
  return sub_10015D668(a1, 28);
}

BOOL sub_10015D668(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v12;
  void *v13;

  type metadata accessor for CKError(0);
  v5 = v4;
  v12 = a2;
  v6 = sub_100005014((uint64_t)&_swiftEmptyArrayStorage);
  v7 = sub_10009C47C();
  _BridgedStoredNSError.init(_:userInfo:)(&v13, &v12, v6, v5, v7);
  v8 = v13;
  _BridgedStoredNSError.code.getter(&v12, v5, v7);

  v9 = (void *)sub_10015D724(v12, a1);
  v10 = v9;
  if (v9)

  return v10 != 0;
}

uint64_t sub_10015D724(uint64_t a1, void *a2)
{
  id v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  id v7;
  uint64_t result;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int64_t v16;
  unint64_t v17;
  int64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  id v23;
  _OWORD v24[2];
  __int128 v25;
  _QWORD v26[5];
  uint64_t v27;

  v2 = a2;
  *(_QWORD *)&v24[0] = a2;
  type metadata accessor for CKError(0);
  v5 = v4;
  v6 = sub_10009C47C();
  _BridgedStoredNSError.code.getter(v26, v5, v6);
  if (v26[0] == a1)
  {
    v7 = v2;
    return (uint64_t)v2;
  }
  *(_QWORD *)&v24[0] = v2;
  _BridgedStoredNSError.code.getter(v26, v5, v6);
  if (v26[0] != 2)
    return 0;
  result = related decl 'e' for CKErrorCode.partialErrorsByItemID.getter(v2);
  if (!result)
    return 0;
  v9 = result;
  v10 = 0;
  v21 = result + 64;
  v11 = 1 << *(_BYTE *)(result + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & *(_QWORD *)(result + 64);
  v22 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      v14 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      v15 = v14 | (v10 << 6);
LABEL_12:
      sub_1000249E4(*(_QWORD *)(v9 + 48) + 40 * v15, (uint64_t)v24);
      *((_QWORD *)&v25 + 1) = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v15);
      swift_errorRetain(*((_QWORD *)&v25 + 1));
      goto LABEL_31;
    }
    v16 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v16 < v22)
    {
      v17 = *(_QWORD *)(v21 + 8 * v16);
      if (v17)
        goto LABEL_16;
      v18 = v10 + 2;
      ++v10;
      if (v16 + 1 < v22)
      {
        v17 = *(_QWORD *)(v21 + 8 * v18);
        if (v17)
          goto LABEL_19;
        v10 = v16 + 1;
        if (v16 + 2 < v22)
        {
          v17 = *(_QWORD *)(v21 + 8 * (v16 + 2));
          if (v17)
          {
            v16 += 2;
            goto LABEL_16;
          }
          v18 = v16 + 3;
          v10 = v16 + 2;
          if (v16 + 3 < v22)
            break;
        }
      }
    }
LABEL_30:
    v13 = 0;
    v25 = 0u;
    memset(v24, 0, sizeof(v24));
LABEL_31:
    sub_10015DC44((uint64_t)v24, (uint64_t)v26);
    if (!v26[3])
    {
      swift_release(v9);
      return 0;
    }
    v19 = v27;
    *(_QWORD *)&v24[0] = v27;
    swift_errorRetain(v27);
    v20 = sub_1000080B4(&qword_10028E850);
    if ((swift_dynamicCast(&v23, v24, v20, v5, 6) & 1) != 0)
    {
      v2 = v23;
      _BridgedStoredNSError.code.getter(v24, v5, v6);
      swift_errorRelease(v19);

      if (*(_QWORD *)&v24[0] == a1)
      {
        swift_release(v9);
        sub_1000839B4((uint64_t)v26);
        return (uint64_t)v2;
      }

    }
    else
    {
      swift_errorRelease(v19);
    }
    result = sub_1000839B4((uint64_t)v26);
  }
  v17 = *(_QWORD *)(v21 + 8 * v18);
  if (v17)
  {
LABEL_19:
    v16 = v18;
LABEL_16:
    v13 = (v17 - 1) & v17;
    v15 = __clz(__rbit64(v17)) + (v16 << 6);
    v10 = v16;
    goto LABEL_12;
  }
  while (1)
  {
    v16 = v18 + 1;
    if (__OFADD__(v18, 1))
      break;
    if (v16 >= v22)
    {
      v10 = v22 - 1;
      goto LABEL_30;
    }
    v17 = *(_QWORD *)(v21 + 8 * v16);
    ++v18;
    if (v17)
      goto LABEL_16;
  }
LABEL_40:
  __break(1u);
  return result;
}

uint64_t sub_10015DA1C(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  unint64_t v23;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;

  type metadata accessor for CKError(0);
  v3 = v2;
  v28 = 14;
  v4 = sub_100005014((uint64_t)&_swiftEmptyArrayStorage);
  v5 = sub_10009C47C();
  _BridgedStoredNSError.init(_:userInfo:)(&v25, &v28, v4, v3, v5);
  v6 = (void *)v25;
  v27 = v25;
  _BridgedStoredNSError.code.getter(&v28, v3, v5);

  v7 = sub_10015D724(v28, a1);
  if (!v7)
    return 0;
  v8 = (void *)v7;
  *(_QWORD *)&v25 = v7;
  v9 = _BridgedStoredNSError.userInfo.getter(v3, v5);
  v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(CKRecordChangedErrorClientRecordKey);
  v12 = v11;
  if (*(_QWORD *)(v9 + 16) && (v13 = sub_10010A9E0(v10, v11), (v14 & 1) != 0))
  {
    sub_1000244B0(*(_QWORD *)(v9 + 56) + 32 * v13, (uint64_t)&v25);
  }
  else
  {
    v25 = 0u;
    v26 = 0u;
  }
  swift_bridgeObjectRelease(v12);
  swift_bridgeObjectRelease(v9);
  if (*((_QWORD *)&v26 + 1))
  {
    v15 = sub_10015DC8C();
    if (swift_dynamicCast(&v28, &v25, (char *)&type metadata for Any + 8, v15, 6))
      v16 = v28;
    else
      v16 = 0;
  }
  else
  {
    sub_10008C388((uint64_t)&v25);
    v16 = 0;
  }
  v28 = (uint64_t)v8;
  v17 = _BridgedStoredNSError.userInfo.getter(v3, v5);
  v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(CKRecordChangedErrorServerRecordKey);
  v20 = v19;
  if (*(_QWORD *)(v17 + 16) && (v21 = sub_10010A9E0(v18, v19), (v22 & 1) != 0))
  {
    sub_1000244B0(*(_QWORD *)(v17 + 56) + 32 * v21, (uint64_t)&v25);
  }
  else
  {
    v25 = 0u;
    v26 = 0u;
  }
  swift_bridgeObjectRelease(v20);

  swift_bridgeObjectRelease(v17);
  if (*((_QWORD *)&v26 + 1))
  {
    v23 = sub_10015DC8C();
    swift_dynamicCast(&v28, &v25, (char *)&type metadata for Any + 8, v23, 6);
  }
  else
  {
    sub_10008C388((uint64_t)&v25);
  }
  return v16;
}

uint64_t sub_10015DC44(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000080B4(&qword_1002944E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_10015DC8C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10028D578;
  if (!qword_10028D578)
  {
    v1 = objc_opt_self(CKRecord);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10028D578);
  }
  return result;
}

id sub_10015DCC8()
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)NSOperationQueue), "init");
  qword_1002944E8 = (uint64_t)result;
  return result;
}

uint64_t sub_10015DCF8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  _QWORD *v19;

  v0 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0, v2);
  v4 = (char *)&v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v5, v6);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v9, v10);
  v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100007764();
  static DispatchQoS.unspecified.getter(v13);
  v19 = _swiftEmptyArrayStorage;
  v14 = sub_100005150((unint64_t *)&qword_10028C6D0, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v15 = sub_1000080B4(&qword_10028B9F0);
  v16 = sub_1000077A0((unint64_t *)&qword_10028C6E0, &qword_10028B9F0);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v19, v15, v16, v5, v14);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v4, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v0);
  result = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000029, 0x800000010020E090, v12, v8, v4, 0);
  qword_1002944F8 = result;
  return result;
}

void sub_10015DEB4()
{
  off_100294500 = &_swiftEmptyArrayStorage;
}

void sub_10015DEC8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t Strong;
  uint64_t v10;
  id v11;
  id v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  _QWORD v26[5];
  _BYTE v27[24];

  v4 = sub_1000080B4(&qword_10028FA50);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (char *)v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  a2 += 16;
  swift_beginAccess(a2, v27, 0, 0);
  Strong = swift_weakLoadStrong(a2);
  if (Strong)
  {
    v10 = Strong;
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, Strong + OBJC_IVAR____TtC13appleaccountd40TrustedContactsPreflightActivityProvider__accountStore, v4);
    Dependency.wrappedValue.getter(v26, v4);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    v11 = objc_msgSend(*(id *)(*sub_10000732C(v26, v26[3]) + 16), "aa_primaryAppleAccount");

    sub_100006F58(v26);
    if (v11)
    {
      v12 = objc_msgSend((id)objc_opt_self(AAFKeybagLockAssertion), "lock");
      v13 = swift_allocObject(&unk_10026B0B8, 32, 7);
      *(_QWORD *)(v13 + 16) = v12;
      *(_QWORD *)(v13 + 24) = a1;
      v14 = v12;
      swift_retain(a1);
      sub_10015E1D8(1, (uint64_t)sub_100161A2C, v13);
      swift_release(v10);

      v15 = v13;
    }
    else
    {
      sub_10002B6D8();
      if (qword_10028ADD8 != -1)
        swift_once(&qword_10028ADD8, sub_100046D78);
      v21 = type metadata accessor for Logger(0);
      v22 = sub_100005288(v21, (uint64_t)qword_1002A8A08);
      v23 = Logger.logObject.getter(v22);
      v24 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v23, v24))
      {
        v25 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v25 = 0;
        _os_log_impl((void *)&_mh_execute_header, v23, v24, "No account signed in. Skipping CPR.", v25, 2u);
        swift_slowDealloc(v25, -1, -1);
        swift_release(v10);

        return;
      }

      v15 = v10;
    }
    swift_release(v15);
  }
  else
  {
    sub_10002B6D8();
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v16 = type metadata accessor for Logger(0);
    v17 = sub_100005288(v16, (uint64_t)qword_1002A8A08);
    v18 = Logger.logObject.getter(v17);
    v19 = static os_log_type_t.debug.getter(v18);
    if (os_log_type_enabled(v18, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Lost reference to self. Aborting Trusted Contacts Preflight XPC activity", v20, 2u);
      swift_slowDealloc(v20, -1, -1);
    }

  }
}

uint64_t sub_10015E1D8(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v7;
  char v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  char isEscapingClosureAtFileLocation;
  uint64_t result;
  _QWORD v16[5];
  uint64_t v17;

  v4 = v3;
  v7 = *v4;
  v8 = a1 & 1;
  if (qword_10028AEB8 != -1)
    swift_once(&qword_10028AEB8, sub_10015DCF8);
  v9 = qword_1002944F8;
  v10 = swift_allocObject(&unk_10026AF78, 56, 7);
  *(_QWORD *)(v10 + 16) = v4;
  *(_BYTE *)(v10 + 24) = v8;
  *(_QWORD *)(v10 + 32) = a2;
  *(_QWORD *)(v10 + 40) = a3;
  *(_QWORD *)(v10 + 48) = v7;
  v11 = swift_allocObject(&unk_10026AFA0, 32, 7);
  *(_QWORD *)(v11 + 16) = sub_1001618E0;
  *(_QWORD *)(v11 + 24) = v10;
  v16[4] = sub_10012BD50;
  v17 = v11;
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 1107296256;
  v16[2] = sub_10002B11C;
  v16[3] = &unk_10026AFB8;
  v12 = _Block_copy(v16);
  v13 = v17;
  swift_retain(v4);
  swift_retain(a3);
  swift_retain(v11);
  swift_release(v13);
  dispatch_sync(v9, v12);
  _Block_release(v12);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v11, "", 140, 85, 31, 1);
  swift_release(v10);
  result = swift_release(v11);
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  return result;
}

void sub_10015E358(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  char *v7;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  char v18;
  uint64_t v19;
  objc_class *v20;
  _BYTE *v21;
  uint64_t (**v22)(uint64_t, uint64_t);
  id v23;
  void *v24;
  uint64_t v25;
  char *v26;
  char v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  objc_super v31;
  _BYTE v32[24];

  if (qword_1002944F0)
  {
    if (qword_10028AEC0 != -1)
      swift_once(&qword_10028AEC0, sub_10015DEB4);
    v6 = swift_allocObject(&unk_10026AFF0, 32, 7);
    *(_QWORD *)(v6 + 16) = a3;
    *(_QWORD *)(v6 + 24) = a4;
    swift_beginAccess(&off_100294500, v32, 33, 0);
    v7 = (char *)off_100294500;
    swift_retain(a4);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v7);
    off_100294500 = v7;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v7 = sub_10013485C(0, *((_QWORD *)v7 + 2) + 1, 1, v7);
      off_100294500 = v7;
    }
    v10 = *((_QWORD *)v7 + 2);
    v9 = *((_QWORD *)v7 + 3);
    if (v10 >= v9 >> 1)
    {
      v7 = sub_10013485C((char *)(v9 > 1), v10 + 1, 1, v7);
      off_100294500 = v7;
    }
    *((_QWORD *)v7 + 2) = v10 + 1;
    v11 = &v7[16 * v10];
    *((_QWORD *)v11 + 4) = sub_100161928;
    *((_QWORD *)v11 + 5) = v6;
    swift_endAccess(v32);
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v12 = type metadata accessor for Logger(0);
    v13 = sub_100005288(v12, (uint64_t)qword_1002A8A08);
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.debug.getter(v14);
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "❌ Skipping concurrent preflight as another preflight is already in progress.", v16, 2u);
      swift_slowDealloc(v16, -1, -1);
    }
  }
  else
  {
    v18 = a2 & 1;
    v19 = swift_allocObject(&unk_10026B018, 25, 7);
    *(_QWORD *)(v19 + 16) = a1;
    *(_BYTE *)(v19 + 24) = v18;
    v20 = (objc_class *)type metadata accessor for AsyncOperation();
    v21 = objc_allocWithZone(v20);
    v21[OBJC_IVAR____TtC13appleaccountd14AsyncOperation_state] = 0;
    v22 = (uint64_t (**)(uint64_t, uint64_t))&v21[OBJC_IVAR____TtC13appleaccountd14AsyncOperation_workBlock];
    *v22 = sub_100161974;
    v22[1] = (uint64_t (*)(uint64_t, uint64_t))v19;
    v31.receiver = v21;
    v31.super_class = v20;
    swift_retain(a1);
    v23 = objc_msgSendSuper2(&v31, "init");
    v24 = (void *)qword_1002944F0;
    qword_1002944F0 = (uint64_t)v23;
    v14 = v23;

    if (qword_10028AEC0 != -1)
      swift_once(&qword_10028AEC0, sub_10015DEB4);
    v25 = swift_allocObject(&unk_10026B040, 32, 7);
    *(_QWORD *)(v25 + 16) = a3;
    *(_QWORD *)(v25 + 24) = a4;
    swift_beginAccess(&off_100294500, v32, 33, 0);
    v26 = (char *)off_100294500;
    swift_retain(a4);
    v27 = swift_isUniquelyReferenced_nonNull_native(v26);
    off_100294500 = v26;
    if ((v27 & 1) == 0)
    {
      v26 = sub_10013485C(0, *((_QWORD *)v26 + 2) + 1, 1, v26);
      off_100294500 = v26;
    }
    v29 = *((_QWORD *)v26 + 2);
    v28 = *((_QWORD *)v26 + 3);
    if (v29 >= v28 >> 1)
    {
      v26 = sub_10013485C((char *)(v28 > 1), v29 + 1, 1, v26);
      off_100294500 = v26;
    }
    *((_QWORD *)v26 + 2) = v29 + 1;
    v30 = &v26[16 * v29];
    *((_QWORD *)v30 + 4) = sub_100161A84;
    *((_QWORD *)v30 + 5) = v25;
    swift_endAccess(v32);
    if (qword_10028AEB0 != -1)
      swift_once(&qword_10028AEB0, sub_10015DCC8);
    objc_msgSend((id)qword_1002944E8, "addOperation:", v14);
  }

}

uint64_t sub_10015E70C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41[5];

  v39 = a1;
  v6 = a4 & 1;
  v7 = sub_1000080B4(&qword_10028E860);
  v38 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7, v8);
  v10 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for UUID(0);
  v12 = *(_QWORD *)(v11 - 8);
  v14 = __chkstk_darwin(v11, v13);
  v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = UUID.init()(v14);
  v18 = UUID.uuidString.getter(v17);
  v20 = v19;
  (*(void (**)(char *, uint64_t))(v12 + 8))(v16, v11);
  v36 = v20;
  v37 = v18;
  sub_100160878(v18, v20);
  if (qword_10028ADD8 != -1)
    swift_once(&qword_10028ADD8, sub_100046D78);
  v21 = v6;
  v22 = type metadata accessor for Logger(0);
  v23 = sub_100005288(v22, (uint64_t)qword_1002A8A08);
  v24 = Logger.logObject.getter(v23);
  v25 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v24, v25))
  {
    v35 = a2;
    v26 = (uint8_t *)swift_slowAlloc(12, -1);
    v27 = swift_slowAlloc(32, -1);
    *(_DWORD *)v26 = 136315138;
    v41[0] = v27;
    if (v21)
      v28 = 0x656C756465686353;
    else
      v28 = 0x6E616D6544206E4FLL;
    v40 = sub_1001DEF4C(v28, 0xE900000000000064, v41);
    a2 = v35;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, v41);
    swift_bridgeObjectRelease(0xE900000000000064);
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "Starting to pull all cloud data before %s Trusted Contacts Preflight activity", v26, 0xCu);
    swift_arrayDestroy(v27, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v27, -1, -1);
    swift_slowDealloc(v26, -1, -1);
  }

  v29 = v38;
  (*(void (**)(char *, uint64_t, uint64_t))(v38 + 16))(v10, a3 + OBJC_IVAR____TtC13appleaccountd40TrustedContactsPreflightActivityProvider__syncManager, v7);
  Dependency.wrappedValue.getter(v41, v7);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v10, v7);
  sub_10000732C(v41, v41[3]);
  v30 = swift_allocObject(&unk_10026B068, 64, 7);
  *(_BYTE *)(v30 + 16) = v21;
  v31 = v37;
  *(_QWORD *)(v30 + 24) = a3;
  *(_QWORD *)(v30 + 32) = v31;
  v32 = v39;
  *(_QWORD *)(v30 + 40) = v36;
  *(_QWORD *)(v30 + 48) = v32;
  *(_QWORD *)(v30 + 56) = a2;
  swift_retain(a3);
  swift_retain(a2);
  sub_10011EDC0(3, 1, (uint64_t)sub_1001619B4, v30);
  swift_release(v30);
  return sub_100006F58(v41);
}

uint64_t sub_10015EA34(char a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v13 = a2 & 1;
  if (qword_10028ADD8 != -1)
    swift_once(&qword_10028ADD8, sub_100046D78);
  v14 = type metadata accessor for Logger(0);
  v15 = sub_100005288(v14, (uint64_t)qword_1002A8A08);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.debug.getter(v16);
  if (os_log_type_enabled(v16, v17))
  {
    v18 = swift_slowAlloc(18, -1);
    v22 = swift_slowAlloc(32, -1);
    v24 = v22;
    *(_DWORD *)v18 = 136315394;
    if (v13)
      v19 = 0x656C756465686353;
    else
      v19 = 0x6E616D6544206E4FLL;
    v23 = sub_1001DEF4C(v19, 0xE900000000000064, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24);
    swift_bridgeObjectRelease(0xE900000000000064);
    *(_WORD *)(v18 + 12) = 1024;
    LODWORD(v23) = a1 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, (char *)&v23 + 4);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Completed pulling all cloud data before %s Trusted Contacts Preflight activity: %{BOOL}d", (uint8_t *)v18, 0x12u);
    swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v22, -1, -1);
    swift_slowDealloc(v18, -1, -1);
  }

  v20 = (_QWORD *)swift_allocObject(&unk_10026B090, 40, 7);
  v20[2] = a3;
  v20[3] = a6;
  v20[4] = a7;
  swift_retain(a3);
  swift_retain(a7);
  sub_10015F134(v13, a4, a5, (uint64_t)sub_1001619F4, (uint64_t)v20);
  return swift_release(v20);
}

uint64_t sub_10015EC88(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;

  if (qword_10028ADD8 != -1)
    swift_once(&qword_10028ADD8, sub_100046D78);
  v9 = type metadata accessor for Logger(0);
  v10 = sub_100005288(v9, (uint64_t)qword_1002A8A08);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.debug.getter(v11);
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Finished preflight.", v13, 2u);
    swift_slowDealloc(v13, -1, -1);
  }

  return sub_10015ED90(a1 & 1, a2, a4, a5);
}

uint64_t sub_10015ED90(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t result;
  _QWORD v16[5];
  uint64_t v17;

  v9 = *v4;
  if (qword_10028AEB8 != -1)
    swift_once(&qword_10028AEB8, sub_10015DCF8);
  v10 = qword_1002944F8;
  v11 = swift_allocObject(&unk_10026AF00, 56, 7);
  *(_BYTE *)(v11 + 16) = a1 & 1;
  *(_QWORD *)(v11 + 24) = a2;
  *(_QWORD *)(v11 + 32) = a3;
  *(_QWORD *)(v11 + 40) = a4;
  *(_QWORD *)(v11 + 48) = v9;
  v12 = swift_allocObject(&unk_10026AF28, 32, 7);
  *(_QWORD *)(v12 + 16) = sub_100161894;
  *(_QWORD *)(v12 + 24) = v11;
  v16[4] = sub_10012BD50;
  v17 = v12;
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 1107296256;
  v16[2] = sub_10002B11C;
  v16[3] = &unk_10026AF40;
  v13 = _Block_copy(v16);
  v14 = v17;
  swift_bridgeObjectRetain(a2);
  swift_retain(v12);
  swift_release(v14);
  dispatch_sync(v10, v13);
  _Block_release(v13);
  LOBYTE(v13) = swift_isEscapingClosureAtFileLocation(v12, "", 140, 113, 31, 1);
  swift_release(v11);
  result = swift_release(v12);
  if ((v13 & 1) != 0)
    __break(1u);
  return result;
}

uint64_t sub_10015EF08(char a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  _QWORD *v11;
  uint64_t v12;
  char v13;
  uint64_t *v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t *);
  void *v17;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;

  if (qword_10028ADD8 != -1)
    swift_once(&qword_10028ADD8, sub_100046D78);
  v6 = type metadata accessor for Logger(0);
  v7 = sub_100005288(v6, (uint64_t)qword_1002A8A08);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.debug.getter(v8);
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v10 = 134217984;
    if (qword_10028AEC0 != -1)
      swift_once(&qword_10028AEC0, sub_10015DEB4);
    swift_beginAccess(&off_100294500, &v19, 0, 0);
    v22 = *((_QWORD *)off_100294500 + 2);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Handling Preflight completions. Count: %ld", v10, 0xCu);
    swift_slowDealloc(v10, -1, -1);
  }

  if (qword_10028AEC0 != -1)
    swift_once(&qword_10028AEC0, sub_10015DEB4);
  swift_beginAccess(&off_100294500, &v22, 1, 0);
  v11 = off_100294500;
  off_100294500 = _swiftEmptyArrayStorage;
  v12 = v11[2];
  if (v12)
  {
    v13 = a1 & 1;
    swift_bridgeObjectRetain(v11);
    v14 = v11 + 5;
    do
    {
      v16 = (void (*)(char *, uint64_t *))*(v14 - 1);
      v15 = *v14;
      v21 = v13;
      v20 = a2;
      swift_retain(v15);
      v16(&v21, &v20);
      swift_release(v15);
      v14 += 2;
      --v12;
    }
    while (v12);
    swift_bridgeObjectRelease(v11);
  }
  swift_bridgeObjectRelease(v11);
  v17 = (void *)qword_1002944F0;
  qword_1002944F0 = 0;

  return a3();
}

uint64_t sub_10015F134(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  NSObject *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t *v34;
  uint64_t v35;
  NSObject *v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint8_t *v44;
  void **v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __n128 v51;
  uint64_t v52;
  char v53;
  void *v54;
  uint64_t (*v55)();
  uint64_t v56;
  void *v57;
  uint64_t v58;
  void (*v59)(uint64_t, void *, void (*)(uint64_t), uint64_t, void *, uint64_t (*)());
  id v60;
  NSObject *v61;
  uint64_t v62;
  NSObject *v63;
  os_log_type_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t DynamicType;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  id v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  void *v93;
  uint64_t v94;
  uint64_t v96;
  id v97;
  unint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  __n128 v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  void *v118;
  _QWORD *v119;
  uint64_t v120;
  uint64_t v121;
  void **aBlock;
  uint64_t v123;
  uint64_t (*v124)(uint64_t);
  void *v125;
  uint64_t (*v126)();
  uint64_t v127;
  __int128 v128;
  uint64_t v129;

  v103 = a5;
  v102 = a4;
  v117 = a2;
  v118 = (void *)a3;
  LODWORD(v113) = a1;
  v109 = type metadata accessor for DispatchWorkItemFlags(0);
  v108 = *(_QWORD *)(v109 - 8);
  __chkstk_darwin(v109, v5);
  v107 = (char *)&v96 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v101 = type metadata accessor for DispatchQoS.QoSClass(0);
  v100 = *(_QWORD *)(v101 - 8);
  __chkstk_darwin(v101, v7);
  v99 = (char *)&v96 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v119 = (_QWORD *)sub_1000080B4(&qword_10028F658);
  v114 = *(v119 - 1);
  __chkstk_darwin(v119, v9);
  v11 = (char *)&v96 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v12, v13);
  v15 = (char *)&v96 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v106 = type metadata accessor for DispatchQoS(0);
  v105 = *(_QWORD *)(v106 - 8);
  __chkstk_darwin(v106, v16);
  v18 = (char *)&v96 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v20 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19, v21);
  v23 = (char *)&v96 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = dispatch_group_create();
  v120 = swift_allocObject(&unk_10026AD48, 24, 7);
  *(_QWORD *)(v120 + 16) = &_swiftEmptyDictionarySingleton;
  v25 = sub_100007764();
  v26 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v20 + 104))(v23, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v19);
  static DispatchQoS.unspecified.getter(v26);
  aBlock = (void **)_swiftEmptyArrayStorage;
  v27 = sub_100005150((unint64_t *)&qword_10028C6D0, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v28 = sub_1000080B4(&qword_10028B9F0);
  v29 = sub_1000077A0((unint64_t *)&qword_10028C6E0, &qword_10028B9F0);
  dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v28, v29, v12, v27);
  v104 = v18;
  v98 = v25;
  v115 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000003CLL, 0x800000010020E050, v18, v15, v23, 0);
  v116 = swift_allocObject(&unk_10026AD70, 17, 7);
  *(_BYTE *)(v116 + 16) = 0;
  v30 = v110;
  v31 = sub_100160DE4(v117, (uint64_t)v118);
  v32 = v114;
  v33 = v119;
  (*(void (**)(char *, uint64_t, _QWORD *))(v114 + 16))(v11, v30 + OBJC_IVAR____TtC13appleaccountd40TrustedContactsPreflightActivityProvider__analyticsAccountModel, v119);
  Dependency.wrappedValue.getter(&v128, v33);
  (*(void (**)(char *, _QWORD *))(v32 + 8))(v11, v33);
  v34 = sub_10000732C(&v128, v129);
  v35 = *v34;
  v36 = *(NSObject **)(*v34 + OBJC_IVAR____TtC13appleaccountd27DaemonAnalyticsAccountModel_dispatchQueue);
  v37 = swift_allocObject(&unk_10026AD98, 32, 7);
  *(_QWORD *)(v37 + 16) = sub_1000A26A0;
  *(_QWORD *)(v37 + 24) = v35;
  v126 = sub_1000A26B8;
  v127 = v37;
  aBlock = _NSConcreteStackBlock;
  v123 = 1107296256;
  v124 = sub_10002B11C;
  v125 = &unk_10026ADB0;
  v38 = _Block_copy(&aBlock);
  v39 = v127;
  swift_retain(v35);
  swift_retain(v37);
  swift_release(v39);
  dispatch_sync(v36, v38);
  _Block_release(v38);
  LOBYTE(v36) = swift_isEscapingClosureAtFileLocation(v37, "", 118, 68, 28, 1);
  swift_release(v35);
  swift_release(v37);
  if ((v36 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    sub_100006F58(&v128);
    if (qword_10028ADD8 == -1)
      goto LABEL_3;
  }
  swift_once(&qword_10028ADD8, sub_100046D78);
LABEL_3:
  v40 = v113 & 1;
  v41 = type metadata accessor for Logger(0);
  v114 = sub_100005288(v41, (uint64_t)qword_1002A8A08);
  v42 = Logger.logObject.getter(v114);
  v43 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v42, v43))
  {
    v44 = (uint8_t *)swift_slowAlloc(12, -1);
    v45 = (void **)swift_slowAlloc(32, -1);
    aBlock = v45;
    *(_DWORD *)v44 = 136315138;
    if (v40)
      v46 = 0x656C756465686353;
    else
      v46 = 0x6E616D6544206E4FLL;
    v119 = v44 + 4;
    *(_QWORD *)&v128 = sub_1001DEF4C(v46, 0xE900000000000064, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v128, (char *)&v128 + 8);
    swift_bridgeObjectRelease(0xE900000000000064);
    _os_log_impl((void *)&_mh_execute_header, v42, v43, "Starting %s Trusted Contacts Preflight activities.", v44, 0xCu);
    swift_arrayDestroy(v45, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v45, -1, -1);
    swift_slowDealloc(v44, -1, -1);
  }

  LODWORD(v119) = v40;
  v97 = v31;
  v47 = *(_QWORD *)(v110 + 16);
  v48 = *(_QWORD *)(v47 + 16);
  if (v48)
  {
    v49 = v47 + 32;
    if ((_DWORD)v119)
      v50 = 0x656C756465686353;
    else
      v50 = 0x6E616D6544206E4FLL;
    v113 = v50;
    v96 = v47;
    v51 = swift_bridgeObjectRetain(v47);
    v51.n128_u64[0] = 136315394;
    v112 = v51;
    v111 = (char *)&type metadata for Any + 8;
    v52 = v116;
    do
    {
      sub_100006CA4(v49, (uint64_t)&aBlock);
      dispatch_group_enter(v24);
      v62 = sub_100006CA4((uint64_t)&aBlock, (uint64_t)&v128);
      v63 = Logger.logObject.getter(v62);
      v64 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v63, v64))
      {
        v65 = swift_slowAlloc(22, -1);
        v66 = swift_slowAlloc(64, -1);
        v121 = v66;
        *(_DWORD *)v65 = v112.n128_u32[0];
        *(_QWORD *)(v65 + 4) = sub_1001DEF4C(v113, 0xE900000000000064, &v121);
        swift_bridgeObjectRelease(0xE900000000000064);
        *(_WORD *)(v65 + 12) = 2080;
        v67 = v129;
        v68 = sub_10000732C(&v128, v129);
        DynamicType = swift_getDynamicType(v68, v67, 1);
        v70 = _typeName(_:qualified:)(DynamicType, 0);
        v72 = v71;
        *(_QWORD *)(v65 + 14) = sub_1001DEF4C(v70, v71, &v121);
        swift_bridgeObjectRelease(v72);
        sub_100006F58(&v128);
        _os_log_impl((void *)&_mh_execute_header, v63, v64, "Starting %s Trusted Contacts Preflight activity - %s", (uint8_t *)v65, 0x16u);
        swift_arrayDestroy(v66, 2, v111);
        swift_slowDealloc(v66, -1, -1);
        swift_slowDealloc(v65, -1, -1);
      }
      else
      {
        sub_100006F58(&v128);
      }

      v53 = (char)v119;
      v54 = v125;
      v55 = v126;
      sub_10000732C(&aBlock, (uint64_t)v125);
      sub_100006CA4((uint64_t)&aBlock, (uint64_t)&v128);
      v56 = swift_allocObject(&unk_10026ADE8, 96, 7);
      *(_BYTE *)(v56 + 16) = v53;
      sub_10003A190(&v128, v56 + 24);
      v57 = (void *)v115;
      v58 = v120;
      *(_QWORD *)(v56 + 64) = v115;
      *(_QWORD *)(v56 + 72) = v58;
      *(_QWORD *)(v56 + 80) = v52;
      *(_QWORD *)(v56 + 88) = v24;
      v59 = (void (*)(uint64_t, void *, void (*)(uint64_t), uint64_t, void *, uint64_t (*)()))*((_QWORD *)v55 + 2);
      v60 = v57;
      swift_retain(v58);
      swift_retain(v52);
      v61 = v24;
      v59(v117, v118, sub_10016175C, v56, v54, v55);
      swift_release(v56);
      sub_100006F58(&aBlock);
      v49 += 40;
      --v48;
    }
    while (v48);
    swift_bridgeObjectRelease(v96);
  }
  v73 = v100;
  v74 = v99;
  v75 = v101;
  (*(void (**)(char *, _QWORD, uint64_t))(v100 + 104))(v99, enum case for DispatchQoS.QoSClass.default(_:), v101);
  v118 = (void *)static OS_dispatch_queue.global(qos:)(v74);
  (*(void (**)(char *, uint64_t))(v73 + 8))(v74, v75);
  v76 = swift_allocObject(&unk_10026AE10, 80, 7);
  v78 = (void *)v115;
  v77 = v116;
  *(_QWORD *)(v76 + 16) = v115;
  *(_BYTE *)(v76 + 24) = (_BYTE)v119;
  v79 = v120;
  v80 = v110;
  *(_QWORD *)(v76 + 32) = v120;
  *(_QWORD *)(v76 + 40) = v80;
  v81 = v97;
  v82 = v102;
  *(_QWORD *)(v76 + 48) = v97;
  *(_QWORD *)(v76 + 56) = v82;
  v83 = v103;
  *(_QWORD *)(v76 + 64) = v103;
  *(_QWORD *)(v76 + 72) = v77;
  v126 = sub_1001617BC;
  v127 = v76;
  aBlock = _NSConcreteStackBlock;
  v123 = 1107296256;
  v124 = sub_1000051D0;
  v125 = &unk_10026AE28;
  v84 = _Block_copy(&aBlock);
  v119 = v81;
  swift_retain(v83);
  v85 = v78;
  swift_retain(v79);
  swift_retain(v77);
  v86 = swift_retain(v80);
  v87 = v104;
  static DispatchQoS.unspecified.getter(v86);
  *(_QWORD *)&v128 = _swiftEmptyArrayStorage;
  v88 = sub_100005150((unint64_t *)&qword_10028CD20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v89 = sub_1000080B4((uint64_t *)&unk_100295A00);
  v90 = sub_1000077A0((unint64_t *)&qword_10028CD30, (uint64_t *)&unk_100295A00);
  v91 = v107;
  v92 = v109;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v128, v89, v90, v109, v88);
  v93 = v118;
  OS_dispatch_group.notify(qos:flags:queue:execute:)(v87, v91, v118, v84);
  _Block_release(v84);

  (*(void (**)(char *, uint64_t))(v108 + 8))(v91, v92);
  (*(void (**)(char *, uint64_t))(v105 + 8))(v87, v106);
  v94 = v127;
  swift_release(v120);
  swift_release(v77);
  return swift_release(v94);
}

void sub_10015FC10(uint64_t a1, int a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, NSObject *a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  _QWORD *v32;
  uint64_t DynamicType;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  NSObject *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void **aBlock;
  uint64_t v82;
  uint64_t (*v83)(uint64_t);
  void *v84;
  uint64_t (*v85)();
  _QWORD *v86;
  __int128 v87[2];
  _QWORD *v88;
  uint64_t v89;

  LODWORD(v80) = a2;
  v13 = type metadata accessor for DispatchWorkItemFlags(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13, v15);
  v17 = (char *)&v70 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for DispatchQoS(0);
  v20 = __chkstk_darwin(v18, v19);
  v23 = (char *)&v70 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    v75 = a5;
    v76 = v21;
    v77 = v20;
    v79 = v14;
    swift_errorRetain(a1);
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v78 = a4;
    v24 = type metadata accessor for Logger(0);
    sub_100005288(v24, (uint64_t)qword_1002A8A08);
    sub_100006CA4((uint64_t)a3, (uint64_t)&aBlock);
    swift_errorRetain(a1);
    v25 = swift_errorRetain(a1);
    v26 = Logger.logObject.getter(v25);
    v27 = static os_log_type_t.error.getter(v26);
    if (os_log_type_enabled(v26, v27))
    {
      v28 = swift_slowAlloc(32, -1);
      v74 = a7;
      v29 = v28;
      v71 = (uint64_t *)swift_slowAlloc(8, -1);
      v72 = swift_slowAlloc(64, -1);
      *(_QWORD *)&v87[0] = v72;
      *(_DWORD *)v29 = 136315650;
      if ((v80 & 1) != 0)
        v30 = 0x656C756465686353;
      else
        v30 = 0x6E616D6544206E4FLL;
      v73 = a6;
      v88 = (_QWORD *)sub_1001DEF4C(v30, 0xE900000000000064, (uint64_t *)v87);
      v80 = v13;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v88, &v89);
      swift_bridgeObjectRelease(0xE900000000000064);
      *(_WORD *)(v29 + 12) = 2080;
      v31 = v84;
      v32 = sub_10000732C(&aBlock, (uint64_t)v84);
      DynamicType = swift_getDynamicType(v32, v31, 1);
      v34 = _typeName(_:qualified:)(DynamicType, 0);
      v36 = v35;
      v88 = (_QWORD *)sub_1001DEF4C(v34, v35, (uint64_t *)v87);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v88, &v89);
      swift_bridgeObjectRelease(v36);
      sub_100006F58(&aBlock);
      *(_WORD *)(v29 + 22) = 2112;
      v37 = _convertErrorToNSError(_:)(a1);
      v88 = (_QWORD *)v37;
      v13 = v80;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v88, &v89);
      v38 = v71;
      *v71 = v37;
      a6 = v73;
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "%s %s Trusted Contacts Preflight activity failed with error %@", (uint8_t *)v29, 0x20u);
      v39 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v38, 1, v39);
      swift_slowDealloc(v38, -1, -1);
      v40 = v72;
      swift_arrayDestroy(v72, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v40, -1, -1);
      v41 = v29;
      a7 = v74;
      swift_slowDealloc(v41, -1, -1);
    }
    else
    {
      sub_100006F58(&aBlock);
      swift_errorRelease(a1);
      swift_errorRelease(a1);
    }

    v55 = a3[3];
    v56 = sub_10000732C(a3, v55);
    v57 = swift_getDynamicType(v56, v55, 1);
    v58 = a3[4];
    aBlock = (void **)v57;
    v82 = v58;
    v59 = sub_1000080B4((uint64_t *)&unk_10028EF70);
    v60 = String.init<A>(describing:)(&aBlock, v59);
    v62 = v61;
    sub_100006CA4((uint64_t)a3, (uint64_t)v87);
    v63 = (_QWORD *)swift_allocObject(&unk_10026AEB0, 96, 7);
    v64 = v75;
    v63[2] = a1;
    v63[3] = v64;
    v63[4] = v60;
    v63[5] = v62;
    v63[6] = a6;
    sub_10003A190(v87, (uint64_t)(v63 + 7));
    v85 = sub_100092DA8;
    v86 = v63;
    aBlock = _NSConcreteStackBlock;
    v82 = 1107296256;
    v83 = sub_1000051D0;
    v84 = &unk_10026AEC8;
    v65 = _Block_copy(&aBlock);
    swift_errorRetain(a1);
    swift_retain(v64);
    v66 = swift_retain(a6);
    static DispatchQoS.unspecified.getter(v66);
    v88 = _swiftEmptyArrayStorage;
    v67 = sub_100005150((unint64_t *)&qword_10028CD20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v68 = sub_1000080B4((uint64_t *)&unk_100295A00);
    v69 = sub_1000077A0((unint64_t *)&qword_10028CD30, (uint64_t *)&unk_100295A00);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v88, v68, v69, v13, v67);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v23, v17, v65);
    _Block_release(v65);
    swift_errorRelease(a1);
    (*(void (**)(char *, uint64_t))(v79 + 8))(v17, v13);
    (*(void (**)(char *, uint64_t))(v76 + 8))(v23, v77);
    swift_release(v86);
  }
  else
  {
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v42 = type metadata accessor for Logger(0);
    sub_100005288(v42, (uint64_t)qword_1002A8A08);
    v43 = sub_100006CA4((uint64_t)a3, (uint64_t)&aBlock);
    v44 = Logger.logObject.getter(v43);
    v45 = static os_log_type_t.error.getter(v44);
    if (os_log_type_enabled(v44, v45))
    {
      v46 = swift_slowAlloc(22, -1);
      v47 = swift_slowAlloc(64, -1);
      *(_QWORD *)&v87[0] = v47;
      *(_DWORD *)v46 = 136315394;
      if ((v80 & 1) != 0)
        v48 = 0x656C756465686353;
      else
        v48 = 0x6E616D6544206E4FLL;
      v88 = (_QWORD *)sub_1001DEF4C(v48, 0xE900000000000064, (uint64_t *)v87);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v88, &v89);
      swift_bridgeObjectRelease(0xE900000000000064);
      *(_WORD *)(v46 + 12) = 2080;
      v49 = v84;
      v50 = sub_10000732C(&aBlock, (uint64_t)v84);
      v51 = swift_getDynamicType(v50, v49, 1);
      v52 = _typeName(_:qualified:)(v51, 0);
      v54 = v53;
      v88 = (_QWORD *)sub_1001DEF4C(v52, v53, (uint64_t *)v87);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v88, &v89);
      swift_bridgeObjectRelease(v54);
      sub_100006F58(&aBlock);
      _os_log_impl((void *)&_mh_execute_header, v44, v45, "%s %s Trusted Contacts Preflight activity completed.", (uint8_t *)v46, 0x16u);
      swift_arrayDestroy(v47, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v47, -1, -1);
      swift_slowDealloc(v46, -1, -1);
    }
    else
    {
      sub_100006F58(&aBlock);
    }

  }
  dispatch_group_leave(a7);
}

uint64_t sub_100160324(uint64_t a1, char a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  void *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD aBlock[5];
  uint64_t v38;

  v35 = a1;
  v14 = a2 & 1;
  v15 = type metadata accessor for DispatchWorkItemFlags(0);
  v34 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15, v16);
  v18 = (char *)&v31 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for DispatchQoS(0);
  v32 = *(_QWORD *)(v19 - 8);
  v33 = v19;
  __chkstk_darwin(v19, v20);
  v22 = (char *)&v31 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = swift_allocObject(&unk_10026AE60, 72, 7);
  *(_BYTE *)(v23 + 16) = v14;
  *(_QWORD *)(v23 + 24) = a3;
  *(_QWORD *)(v23 + 32) = a4;
  *(_QWORD *)(v23 + 40) = a5;
  *(_QWORD *)(v23 + 48) = a6;
  *(_QWORD *)(v23 + 56) = a7;
  *(_QWORD *)(v23 + 64) = a8;
  aBlock[4] = sub_100161818;
  v38 = v23;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000051D0;
  aBlock[3] = &unk_10026AE78;
  v24 = _Block_copy(aBlock);
  v25 = a5;
  swift_retain(a7);
  swift_retain(a8);
  swift_retain(a3);
  v26 = swift_retain(a4);
  static DispatchQoS.unspecified.getter(v26);
  v36 = _swiftEmptyArrayStorage;
  v27 = sub_100005150((unint64_t *)&qword_10028CD20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v28 = sub_1000080B4((uint64_t *)&unk_100295A00);
  v29 = sub_1000077A0((unint64_t *)&qword_10028CD30, (uint64_t *)&unk_100295A00);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v36, v28, v29, v15, v27);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v22, v18, v24);
  _Block_release(v24);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v18, v15);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v22, v33);
  return swift_release(v38);
}

uint64_t sub_100160548(char a1, uint64_t a2, uint64_t a3, void *a4, void (*a5)(_QWORD, _QWORD, __n128), uint64_t a6, uint64_t a7)
{
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(_QWORD, _QWORD, __n128);
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __n128 v31;
  os_log_type_t type;
  uint64_t v34;
  _BYTE v35[24];
  _BYTE v36[24];
  uint64_t v37;
  _BYTE v38[16];
  uint64_t v39[3];

  if (qword_10028ADD8 != -1)
    swift_once(&qword_10028ADD8, sub_100046D78);
  v12 = (_QWORD *)(a2 + 16);
  v13 = type metadata accessor for Logger(0);
  sub_100005288(v13, (uint64_t)qword_1002A8A08);
  v14 = swift_retain_n(a2, 2);
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.error.getter(v15);
  if (os_log_type_enabled(v15, v16))
  {
    v17 = swift_slowAlloc(22, -1);
    v34 = swift_slowAlloc(64, -1);
    v39[0] = v34;
    *(_DWORD *)v17 = 136315394;
    if ((a1 & 1) != 0)
      v18 = 0x656C756465686353;
    else
      v18 = 0x6E616D6544206E4FLL;
    v37 = sub_1001DEF4C(v18, 0xE900000000000064, v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, v38);
    swift_bridgeObjectRelease(0xE900000000000064);
    *(_WORD *)(v17 + 12) = 2080;
    swift_beginAccess(a2 + 16, v35, 0, 0);
    v19 = a4;
    v20 = a7;
    v21 = *(_QWORD *)(a2 + 16);
    swift_bridgeObjectRetain(v21);
    v22 = sub_1000080B4(&qword_10028E850);
    v23 = a5;
    v24 = Dictionary.description.getter(v21, &type metadata for String, v22, &protocol witness table for String);
    type = v16;
    v26 = v25;
    v27 = v21;
    a7 = v20;
    a4 = v19;
    swift_bridgeObjectRelease(v27);
    v28 = v24;
    a5 = v23;
    v37 = sub_1001DEF4C(v28, v26, v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, v38);
    swift_release_n(a2, 2);
    swift_bridgeObjectRelease(v26);
    _os_log_impl((void *)&_mh_execute_header, v15, type, "Overall %s Trusted Contacts Preflight activities finished with errors: %s", (uint8_t *)v17, 0x16u);
    swift_arrayDestroy(v34, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v34, -1, -1);
    swift_slowDealloc(v17, -1, -1);

  }
  else
  {

    swift_release_n(a2, 2);
  }
  swift_beginAccess(a2 + 16, v39, 0, 0);
  sub_100161104(a4, *(_QWORD *)(*v12 + 16) == 0, 0);
  swift_beginAccess(a7 + 16, &v37, 0, 0);
  v29 = *(unsigned __int8 *)(a7 + 16);
  swift_beginAccess(a2 + 16, v36, 0, 0);
  v30 = *v12;
  v31 = swift_bridgeObjectRetain(*v12);
  a5(v29, v30, v31);
  return swift_bridgeObjectRelease(v30);
}

void sub_100160878(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  id v19;
  void *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSString v26;
  NSString v27;
  NSString v28;
  id v29;
  Class isa;
  uint64_t v31;
  NSObject *v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  _QWORD *v36;
  NSObject *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  uint8_t *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  NSObject *v53;
  uint64_t v54[4];

  v3 = v2;
  v51 = a1;
  v5 = sub_1000080B4((uint64_t *)&unk_10028E7C0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  v50 = (char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1000080B4((uint64_t *)&unk_10028E7D0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  v13 = (char *)&v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_1000080B4(&qword_10028FA50);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14, v16);
  v18 = (char *)&v48 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = v3;
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v18, v3 + OBJC_IVAR____TtC13appleaccountd40TrustedContactsPreflightActivityProvider__accountStore, v14);
  Dependency.wrappedValue.getter(&v53, v14);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
  v19 = objc_msgSend(*(id *)(*sub_10000732C(&v53, v54[2]) + 16), "aa_primaryAppleAccount");
  if (v19
    && (v20 = v19, v21 = objc_msgSend(v19, "aa_altDSID"), v20, v21))
  {
    v48 = v6;
    v49 = v5;
    static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
    v23 = v22;

    sub_100006F58(&v53);
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, v52 + OBJC_IVAR____TtC13appleaccountd40TrustedContactsPreflightActivityProvider__analyticsEventFactory, v9);
    Dependency.wrappedValue.getter(&v53, v9);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
    static String._unconditionallyBridgeFromObjectiveC(_:)(kAATrustedContactsPreflightBeginEvent);
    v25 = v24;
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRetain(v23);
    v26 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v25);
    v27 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v23);
    v28 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2);
    v29 = objc_msgSend((id)objc_opt_self(AAFAnalyticsEvent), "analyticsEventWithName:altDSID:flowID:", v26, v27, v28);
    swift_bridgeObjectRelease(v23);

    sub_100006F58(&v53);
    if (v29)
    {
      isa = Bool._bridgeToObjectiveC()().super.super.isa;
      objc_msgSend(v29, "setObject:forKeyedSubscript:", isa, kAAFDidSucceed);

      if (qword_10028ADD8 != -1)
        swift_once(&qword_10028ADD8, sub_100046D78);
      v31 = type metadata accessor for Logger(0);
      sub_100005288(v31, (uint64_t)qword_1002A8A08);
      v32 = v29;
      v33 = Logger.logObject.getter(v32);
      v34 = static os_log_type_t.debug.getter(v33);
      if (os_log_type_enabled(v33, v34))
      {
        v35 = (uint8_t *)swift_slowAlloc(12, -1);
        v36 = (_QWORD *)swift_slowAlloc(8, -1);
        *(_DWORD *)v35 = 138412290;
        v53 = v32;
        v37 = v32;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, v54);
        *v36 = v29;

        _os_log_impl((void *)&_mh_execute_header, v33, v34, "Reporting Preflight begin Event %@", v35, 0xCu);
        v38 = sub_1000080B4((uint64_t *)&unk_10028BC20);
        swift_arrayDestroy(v36, 1, v38);
        swift_slowDealloc(v36, -1, -1);
        swift_slowDealloc(v35, -1, -1);
      }
      else
      {

        v33 = v32;
      }
      v45 = v48;
      v44 = v49;

      v46 = v50;
      (*(void (**)(char *, uint64_t, uint64_t))(v45 + 16))(v50, v52 + OBJC_IVAR____TtC13appleaccountd40TrustedContactsPreflightActivityProvider__analyticsRTCReporter, v44);
      Dependency.wrappedValue.getter(&v53, v44);
      (*(void (**)(char *, uint64_t))(v45 + 8))(v46, v44);
      v47 = objc_msgSend((id)objc_opt_self(AAAnalyticsRTCReporter), "reporter");
      objc_msgSend(v47, "sendEvent:", v32);

      sub_100006F58(&v53);
    }
  }
  else
  {
    sub_100006F58(&v53);
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v39 = type metadata accessor for Logger(0);
    v40 = sub_100005288(v39, (uint64_t)qword_1002A8A08);
    v41 = Logger.logObject.getter(v40);
    v42 = static os_log_type_t.debug.getter(v41);
    if (os_log_type_enabled(v41, v42))
    {
      v43 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v43 = 0;
      _os_log_impl((void *)&_mh_execute_header, v41, v42, "Account is nil. Not reporting Preflight begin Event.", v43, 2u);
      swift_slowDealloc(v43, -1, -1);
    }

  }
}

id sub_100160DE4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  id v15;
  void *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSString v22;
  NSString v23;
  NSString v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  _QWORD v33[5];

  v3 = v2;
  v5 = sub_1000080B4((uint64_t *)&unk_10028E7D0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  v9 = (char *)&v33[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1000080B4(&qword_10028FA50);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  v14 = (char *)&v33[-1] - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v14, v3 + OBJC_IVAR____TtC13appleaccountd40TrustedContactsPreflightActivityProvider__accountStore, v10);
  Dependency.wrappedValue.getter(v33, v10);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  v15 = objc_msgSend(*(id *)(*sub_10000732C(v33, v33[3]) + 16), "aa_primaryAppleAccount");
  if (v15
    && (v16 = v15, v17 = objc_msgSend(v15, "aa_altDSID"), v16, v17))
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
    v19 = v18;

    sub_100006F58(v33);
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, v3 + OBJC_IVAR____TtC13appleaccountd40TrustedContactsPreflightActivityProvider__analyticsEventFactory, v5);
    Dependency.wrappedValue.getter(v33, v5);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    static String._unconditionallyBridgeFromObjectiveC(_:)(kAATrustedContactsPreflightEndEvent);
    v21 = v20;
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRetain(v19);
    v22 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v21);
    v23 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v19);
    v24 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a2);
    v25 = objc_msgSend((id)objc_opt_self(AAFAnalyticsEvent), "analyticsEventWithName:altDSID:flowID:", v22, v23, v24);
    swift_bridgeObjectRelease(v19);

    sub_100006F58(v33);
  }
  else
  {
    sub_100006F58(v33);
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v26 = type metadata accessor for Logger(0);
    v27 = sub_100005288(v26, (uint64_t)qword_1002A8A08);
    v28 = Logger.logObject.getter(v27);
    v29 = static os_log_type_t.debug.getter(v28);
    if (os_log_type_enabled(v28, v29))
    {
      v30 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v30 = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "Account is nil. Not reporting Preflight end Event.", v30, 2u);
      swift_slowDealloc(v30, -1, -1);
    }

    return 0;
  }
  return v25;
}

uint64_t sub_100161104(void *a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  char *v12;
  id v13;
  Class isa;
  uint64_t v15;
  id v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  id v20;
  uint64_t v21;
  id v22;
  _QWORD *v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  void *v27;
  _QWORD *v28;
  id v29;
  uint64_t v30;
  id v31;
  uint64_t v32;

  v4 = v3;
  v7 = sub_1000080B4((uint64_t *)&unk_10028E7C0);
  v8 = *(_QWORD *)(v7 - 8);
  result = __chkstk_darwin(v7, v9);
  v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    v13 = a1;
    isa = Bool._bridgeToObjectiveC()().super.super.isa;
    objc_msgSend(v13, "setObject:forKeyedSubscript:", isa, kAAFDidSucceed);

    if (a3)
      a3 = (void *)_convertErrorToNSError(_:)(a3);
    objc_msgSend(v13, "populateUnderlyingErrorsStartingWithRootError:", a3);

    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v15 = type metadata accessor for Logger(0);
    sub_100005288(v15, (uint64_t)qword_1002A8A08);
    v16 = v13;
    v17 = Logger.logObject.getter(v16);
    v18 = static os_log_type_t.debug.getter(v17);
    if (os_log_type_enabled(v17, v18))
    {
      v30 = v7;
      v19 = (uint8_t *)swift_slowAlloc(12, -1);
      v28 = (_QWORD *)swift_slowAlloc(8, -1);
      v27 = a1;
      *(_DWORD *)v19 = 138412290;
      v31 = v16;
      v20 = v16;
      v29 = v16;
      v21 = v4;
      v22 = v20;
      v7 = v30;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32);
      v23 = v28;
      *v28 = v27;

      v4 = v21;
      v16 = v29;
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Reporting Preflight end Event %@", v19, 0xCu);
      v24 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v23, 1, v24);
      swift_slowDealloc(v23, -1, -1);
      swift_slowDealloc(v19, -1, -1);

    }
    else
    {

    }
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v12, v4 + OBJC_IVAR____TtC13appleaccountd40TrustedContactsPreflightActivityProvider__analyticsRTCReporter, v7);
    Dependency.wrappedValue.getter(&v31, v7);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v12, v7);
    v25 = objc_msgSend((id)objc_opt_self(AAAnalyticsRTCReporter), "reporter");
    objc_msgSend(v25, "sendEvent:", v16);

    return sub_100006F58(&v31);
  }
  return result;
}

uint64_t sub_1001613F4()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;

  swift_bridgeObjectRelease(v0[2]);
  v1 = (char *)v0 + OBJC_IVAR____TtC13appleaccountd40TrustedContactsPreflightActivityProvider__storageController;
  v2 = sub_1000080B4(&qword_10028CCC0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  v3 = (char *)v0 + OBJC_IVAR____TtC13appleaccountd40TrustedContactsPreflightActivityProvider__analyticsAccountModel;
  v4 = sub_1000080B4(&qword_10028F658);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  v5 = (char *)v0 + OBJC_IVAR____TtC13appleaccountd40TrustedContactsPreflightActivityProvider__accountStore;
  v6 = sub_1000080B4(&qword_10028FA50);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = (char *)v0 + OBJC_IVAR____TtC13appleaccountd40TrustedContactsPreflightActivityProvider__syncManager;
  v8 = sub_1000080B4(&qword_10028E860);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = (char *)v0 + OBJC_IVAR____TtC13appleaccountd40TrustedContactsPreflightActivityProvider__analyticsEventFactory;
  v10 = sub_1000080B4((uint64_t *)&unk_10028E7D0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  v11 = (char *)v0 + OBJC_IVAR____TtC13appleaccountd40TrustedContactsPreflightActivityProvider__analyticsRTCReporter;
  v12 = sub_1000080B4((uint64_t *)&unk_10028E7C0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

uint64_t sub_10016152C()
{
  return type metadata accessor for TrustedContactsPreflightActivityProvider(0);
}

uint64_t type metadata accessor for TrustedContactsPreflightActivityProvider(uint64_t a1)
{
  uint64_t result;

  result = qword_100294560;
  if (!qword_100294560)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for TrustedContactsPreflightActivityProvider);
  return result;
}

void sub_100161570(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD v14[7];

  v14[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  sub_100017464(319, &qword_10028C898, &qword_10028C8A0);
  if (v3 <= 0x3F)
  {
    v14[1] = *(_QWORD *)(v2 - 8) + 64;
    sub_100017464(319, (unint64_t *)&qword_10028F440, (uint64_t *)&unk_10028F448);
    if (v5 <= 0x3F)
    {
      v14[2] = *(_QWORD *)(v4 - 8) + 64;
      sub_100017464(319, (unint64_t *)&qword_100293810, &qword_10028C860);
      if (v7 <= 0x3F)
      {
        v14[3] = *(_QWORD *)(v6 - 8) + 64;
        sub_100017464(319, (unint64_t *)&qword_100294A60, &qword_10028E2A0);
        if (v9 <= 0x3F)
        {
          v14[4] = *(_QWORD *)(v8 - 8) + 64;
          sub_100017464(319, (unint64_t *)&qword_100293820, (uint64_t *)&unk_10028C900);
          if (v11 <= 0x3F)
          {
            v14[5] = *(_QWORD *)(v10 - 8) + 64;
            sub_100017464(319, qword_100293830, (uint64_t *)&unk_10028C910);
            if (v13 <= 0x3F)
            {
              v14[6] = *(_QWORD *)(v12 - 8) + 64;
              swift_updateClassMetadata2(a1, 256, 7, v14, a1 + 80);
            }
          }
        }
      }
    }
  }
}

uint64_t sub_1001616D4()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001616F8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100161708()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100161718()
{
  uint64_t v0;

  sub_100006F58((_QWORD *)(v0 + 24));

  swift_release(*(_QWORD *)(v0 + 72));
  swift_release(*(_QWORD *)(v0 + 80));

  return swift_deallocObject(v0, 96, 7);
}

void sub_10016175C(uint64_t a1)
{
  uint64_t v1;

  sub_10015FC10(a1, *(unsigned __int8 *)(v1 + 16), (_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 64), *(_QWORD *)(v1 + 72), *(_QWORD *)(v1 + 80), *(NSObject **)(v1 + 88));
}

uint64_t sub_100161770()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 40));

  swift_release(*(_QWORD *)(v0 + 64));
  swift_release(*(_QWORD *)(v0 + 72));
  return swift_deallocObject(v0, 80, 7);
}

uint64_t sub_1001617BC()
{
  uint64_t v0;

  return sub_100160324(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(void **)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72));
}

uint64_t sub_1001617D4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));

  swift_release(*(_QWORD *)(v0 + 56));
  swift_release(*(_QWORD *)(v0 + 64));
  return swift_deallocObject(v0, 72, 7);
}

uint64_t sub_100161818()
{
  uint64_t v0;

  return sub_100160548(*(_BYTE *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(void **)(v0 + 40), *(void (**)(_QWORD, _QWORD, __n128))(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64));
}

uint64_t sub_10016182C()
{
  _QWORD *v0;

  swift_errorRelease(v0[2]);
  swift_release(v0[3]);
  swift_bridgeObjectRelease(v0[5]);
  swift_release(v0[6]);
  sub_100006F58(v0 + 7);
  return swift_deallocObject(v0, 96, 7);
}

uint64_t sub_100161870()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100161894()
{
  uint64_t v0;

  return sub_10015EF08(*(_BYTE *)(v0 + 16), *(_QWORD *)(v0 + 24), *(uint64_t (**)(void))(v0 + 32));
}

uint64_t sub_1001618A4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001618B4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 56, 7);
}

void sub_1001618E0()
{
  uint64_t v0;

  sub_10015E358(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
}

uint64_t sub_1001618F4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100161904()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100161928(unsigned __int8 *a1, _QWORD *a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v2 + 16))(*a1, *a2);
}

uint64_t sub_100161950()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 25, 7);
}

uint64_t sub_100161974(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_10015E70C(a1, a2, *(_QWORD *)(v2 + 16), *(_BYTE *)(v2 + 24));
}

uint64_t sub_100161980()
{
  _QWORD *v0;

  swift_release(v0[3]);
  swift_bridgeObjectRelease(v0[5]);
  swift_release(v0[7]);
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_1001619B4(char a1)
{
  uint64_t v1;

  return sub_10015EA34(a1, *(_BYTE *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56));
}

uint64_t sub_1001619C8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1001619F4(char a1, uint64_t a2)
{
  uint64_t *v2;

  return sub_10015EC88(a1, a2, v2[2], v2[3], v2[4]);
}

uint64_t sub_100161A00()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

BOOL sub_100161A2C()
{
  uint64_t v0;

  objc_msgSend(*(id *)(v0 + 16), "unlock");
  return sub_10002B6D8();
}

uint64_t sub_100161A88(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t), uint64_t a5, uint64_t a6, unint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;

  if (!a1)
    return sub_100161D3C(a3, (uint64_t)a4, a5);
  swift_errorRetain(a1);
  if (qword_10028ADD0 != -1)
    swift_once(&qword_10028ADD0, sub_100046D50);
  v11 = type metadata accessor for Logger(0);
  sub_100005288(v11, (uint64_t)qword_1002A89F0);
  swift_errorRetain(a1);
  swift_bridgeObjectRetain(a7);
  swift_errorRetain(a1);
  swift_bridgeObjectRetain(a7);
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.debug.getter(v13);
  if (os_log_type_enabled(v13, v14))
  {
    v15 = swift_slowAlloc(22, -1);
    v16 = (uint64_t *)swift_slowAlloc(8, -1);
    v17 = swift_slowAlloc(32, -1);
    v22 = v17;
    *(_DWORD *)v15 = 136315394;
    swift_bridgeObjectRetain(a7);
    v21 = sub_1001DEF4C(a6, a7, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22);
    swift_bridgeObjectRelease_n(a7, 3);
    *(_WORD *)(v15 + 12) = 2112;
    swift_errorRetain(a1);
    v18 = _swift_stdlib_bridgeErrorToNSError(a1);
    v21 = v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22);
    *v16 = v18;
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Not Accepting CKShare from sender %s due to %@", (uint8_t *)v15, 0x16u);
    v19 = sub_1000080B4((uint64_t *)&unk_10028BC20);
    swift_arrayDestroy(v16, 1, v19);
    swift_slowDealloc(v16, -1, -1);
    swift_arrayDestroy(v17, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v17, -1, -1);
    swift_slowDealloc(v15, -1, -1);

    if (!a4)
      return swift_errorRelease(a1);
    goto LABEL_9;
  }
  swift_bridgeObjectRelease_n(a7, 2);
  swift_errorRelease(a1);
  swift_errorRelease(a1);

  if (a4)
  {
LABEL_9:
    swift_errorRetain(a1);
    a4(a1);
    swift_errorRelease(a1);
  }
  return swift_errorRelease(a1);
}

uint64_t sub_100161D3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = v3;
  v8 = type metadata accessor for InheritanceAccessKeyMessage(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin(v8, v11);
  v12 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10028ADD0 != -1)
    swift_once(&qword_10028ADD0, sub_100046D50);
  v13 = type metadata accessor for Logger(0);
  v14 = sub_100005288(v13, (uint64_t)qword_1002A89F0);
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.info.getter(v15);
  if (os_log_type_enabled(v15, v16))
  {
    v17 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v17 = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Accepting BeneficiaryInfoRecord Share...", v17, 2u);
    swift_slowDealloc(v17, -1, -1);
  }

  sub_10000732C((_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 40));
  v18 = swift_allocObject(&unk_10026B120, 24, 7);
  swift_weakInit(v18 + 16, v4);
  sub_100027FE8(a1, (uint64_t)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for InheritanceAccessKeyMessage);
  v19 = *(unsigned __int8 *)(v9 + 80);
  v20 = (v19 + 32) & ~v19;
  v21 = (v10 + v20 + 7) & 0xFFFFFFFFFFFFFFF8;
  v22 = swift_allocObject(&unk_10026B148, v21 + 8, v19 | 7);
  *(_QWORD *)(v22 + 16) = a2;
  *(_QWORD *)(v22 + 24) = a3;
  sub_10003B730((uint64_t)v12, v22 + v20, type metadata accessor for InheritanceAccessKeyMessage);
  *(_QWORD *)(v22 + v21) = v18;
  sub_10000E1C0(a2, a3);
  swift_retain(v18);
  sub_100061B1C(a1, (uint64_t)sub_10016350C, v22);
  swift_release(v18);
  return swift_release(v22);
}

uint64_t sub_100161F38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v6 = v5;
  v34 = a2;
  v35 = a5;
  v33 = a4;
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10028ADD0 != -1)
    swift_once(&qword_10028ADD0, sub_100046D50);
  v14 = type metadata accessor for Logger(0);
  sub_100005288(v14, (uint64_t)qword_1002A89F0);
  v15 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, a1, v9);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.info.getter(v16);
  if (os_log_type_enabled(v16, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc(12, -1);
    v19 = swift_slowAlloc(32, -1);
    v30 = v5;
    v20 = v19;
    v37 = v19;
    v31 = a3;
    v32 = a1;
    *(_DWORD *)v18 = 136315138;
    v21 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v22 = dispatch thunk of CustomStringConvertible.description.getter(v9, v21);
    v24 = v23;
    v36 = sub_1001DEF4C(v22, v23, &v37);
    a3 = v31;
    a1 = v32;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37);
    swift_bridgeObjectRelease(v24);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Checking for existing BenefactorInfoRecord with beneficiaryID - %s", v18, 0xCu);
    swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
    v25 = v20;
    v6 = v30;
    swift_slowDealloc(v25, -1, -1);
    swift_slowDealloc(v18, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  }

  sub_10000732C((_QWORD *)(v6 + 56), *(_QWORD *)(v6 + 80));
  v26 = (_QWORD *)swift_allocObject(&unk_10026B0F8, 48, 7);
  v26[2] = v33;
  v28 = v34;
  v27 = v35;
  v26[3] = v35;
  v26[4] = v28;
  v26[5] = a3;
  swift_retain(v27);
  swift_bridgeObjectRetain(a3);
  sub_1000CC928(a1, (uint64_t)sub_100162B40, (uint64_t)v26);
  return swift_release(v26);
}

uint64_t type metadata accessor for InheritanceAccessKeyMessageHandler()
{
  return objc_opt_self(_TtC13appleaccountd34InheritanceAccessKeyMessageHandler);
}

uint64_t sub_1001621EC(uint64_t a1, void (*a2)(uint64_t), uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  unint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  _BOOL4 v42;
  uint8_t *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  NSObject *v69;
  os_log_type_t v70;
  uint8_t *v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  void *v76;
  uint64_t v78;
  uint64_t v79;
  NSObject *v80;
  os_log_type_t v81;
  uint8_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  char *v88;
  char *v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void (*v94)(uint64_t);
  uint64_t v95;
  uint64_t v96;
  void *v97;

  v92 = a4;
  v94 = a2;
  v93 = type metadata accessor for BenefactorInfoRecord(0);
  v9 = __chkstk_darwin(v93, v8);
  v11 = (char *)&v88 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v9, v12);
  v15 = (char *)&v88 - v14;
  __chkstk_darwin(v13, v16);
  v18 = (char *)&v88 - v17;
  v19 = sub_1000080B4((uint64_t *)&unk_10028FA40);
  __chkstk_darwin(v19, v20);
  v22 = (uint64_t *)((char *)&v88 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1001633A4(a1, (uint64_t)v22);
  if (swift_getEnumCaseMultiPayload(v22, v19) == 1)
  {
    v97 = (void *)*v22;
    v23 = (uint64_t)v97;
    swift_errorRetain(v97);
    v24 = sub_1000080B4(&qword_10028E850);
    type metadata accessor for InheritanceError(0);
    v26 = v25;
    if ((swift_dynamicCast(&v96, &v97, v24, v25, 6) & 1) != 0)
    {
      v27 = a3;
      v28 = (void *)v96;
      v97 = (void *)v96;
      v95 = 3;
      v29 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
      v30 = sub_100005150(&qword_10028B350, (uint64_t (*)(uint64_t))type metadata accessor for InheritanceError, (uint64_t)&unk_100216D64);
      _BridgedStoredNSError.init(_:userInfo:)(&v96, &v95, v29, v26, v30);
      v31 = (void *)v96;
      v95 = v96;
      LOBYTE(v29) = static _BridgedStoredNSError.== infix(_:_:)(&v97, &v95, v26, v30);

      if ((v29 & 1) != 0)
      {
        if (qword_10028ADD0 != -1)
          swift_once(&qword_10028ADD0, sub_100046D50);
        v32 = type metadata accessor for Logger(0);
        v33 = sub_100005288(v32, (uint64_t)qword_1002A89F0);
        v34 = Logger.logObject.getter(v33);
        v35 = static os_log_type_t.info.getter(v34);
        if (os_log_type_enabled(v34, v35))
        {
          v36 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v36 = 0;
          _os_log_impl((void *)&_mh_execute_header, v34, v35, "No existing BenefactorInfoRecord found.", v36, 2u);
          swift_slowDealloc(v36, -1, -1);
        }

LABEL_39:
        swift_errorRetain(v23);
        v94(v23);
        swift_errorRelease(v23);
        return swift_errorRelease(v23);
      }

      a3 = v27;
    }
    if (qword_10028ADD0 != -1)
      swift_once(&qword_10028ADD0, sub_100046D50);
    v78 = type metadata accessor for Logger(0);
    sub_100005288(v78, (uint64_t)qword_1002A89F0);
    swift_errorRetain(v23);
    v79 = swift_errorRetain(v23);
    v80 = Logger.logObject.getter(v79);
    v81 = static os_log_type_t.error.getter(v80);
    if (os_log_type_enabled(v80, v81))
    {
      v82 = (uint8_t *)swift_slowAlloc(12, -1);
      v83 = swift_slowAlloc(32, -1);
      v91 = a3;
      v84 = v83;
      v96 = v23;
      v97 = (void *)v83;
      *(_DWORD *)v82 = 136315138;
      swift_errorRetain(v23);
      v85 = String.init<A>(describing:)(&v96, v24);
      v87 = v86;
      v96 = sub_1001DEF4C(v85, v86, (uint64_t *)&v97);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v96, &v97);
      swift_bridgeObjectRelease(v87);
      swift_errorRelease(v23);
      swift_errorRelease(v23);
      _os_log_impl((void *)&_mh_execute_header, v80, v81, "Failed to fetch BenefactorInfoRecord: %s", v82, 0xCu);
      swift_arrayDestroy(v84, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v84, -1, -1);
      swift_slowDealloc(v82, -1, -1);
    }
    else
    {
      swift_errorRelease(v23);
      swift_errorRelease(v23);
    }

    goto LABEL_39;
  }
  v90 = a5;
  sub_10003B730((uint64_t)v22, (uint64_t)v18, type metadata accessor for BenefactorInfoRecord);
  if (qword_10028ADD0 != -1)
    swift_once(&qword_10028ADD0, sub_100046D50);
  v37 = type metadata accessor for Logger(0);
  v38 = sub_100005288(v37, (uint64_t)qword_1002A89F0);
  v39 = sub_100027FE8((uint64_t)v18, (uint64_t)v15, type metadata accessor for BenefactorInfoRecord);
  v40 = Logger.logObject.getter(v39);
  v41 = static os_log_type_t.info.getter(v40);
  v42 = os_log_type_enabled(v40, v41);
  v91 = a3;
  v89 = v18;
  if (v42)
  {
    v43 = (uint8_t *)swift_slowAlloc(12, -1);
    v44 = swift_slowAlloc(32, -1);
    v97 = (void *)v44;
    v88 = v11;
    *(_DWORD *)v43 = 136315138;
    v45 = sub_10016FCC4();
    v47 = v46;
    v96 = sub_1001DEF4C(v45, v46, (uint64_t *)&v97);
    v11 = v88;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v96, &v97);
    v48 = v47;
    v18 = v89;
    swift_bridgeObjectRelease(v48);
    sub_100028388((uint64_t)v15, type metadata accessor for BenefactorInfoRecord);
    _os_log_impl((void *)&_mh_execute_header, v40, v41, "Found an existing BenefactorInfoRecord - %s", v43, 0xCu);
    swift_arrayDestroy(v44, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v44, -1, -1);
    swift_slowDealloc(v43, -1, -1);
  }
  else
  {
    sub_100028388((uint64_t)v15, type metadata accessor for BenefactorInfoRecord);
  }

  sub_100027FE8((uint64_t)v18, (uint64_t)v11, type metadata accessor for BenefactorInfoRecord);
  v49 = v90;
  v50 = swift_bridgeObjectRetain_n(v90, 2);
  v51 = Logger.logObject.getter(v50);
  v52 = static os_log_type_t.debug.getter(v51);
  if (os_log_type_enabled(v51, v52))
  {
    v53 = swift_slowAlloc(22, -1);
    v54 = swift_slowAlloc(64, -1);
    v88 = (char *)v38;
    v55 = v54;
    v97 = (void *)v54;
    *(_DWORD *)v53 = 136315394;
    v56 = v93;
    v57 = (uint64_t *)&v11[*(int *)(v93 + 20)];
    v58 = *v57;
    v59 = v57[1];
    swift_bridgeObjectRetain(v59);
    v96 = sub_1001DEF4C(v58, v59, (uint64_t *)&v97);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v96, &v97);
    v60 = v59;
    v49 = v90;
    swift_bridgeObjectRelease(v60);
    sub_100028388((uint64_t)v11, type metadata accessor for BenefactorInfoRecord);
    *(_WORD *)(v53 + 12) = 2080;
    swift_bridgeObjectRetain(v49);
    v61 = v92;
    v96 = sub_1001DEF4C(v92, v49, (uint64_t *)&v97);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v96, &v97);
    swift_bridgeObjectRelease_n(v49, 3);
    _os_log_impl((void *)&_mh_execute_header, v51, v52, "Comparing handles from BenefactorInfoRecord: %s and IDS message: %s are same and not empty.", (uint8_t *)v53, 0x16u);
    swift_arrayDestroy(v55, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v55, -1, -1);
    swift_slowDealloc(v53, -1, -1);

  }
  else
  {
    sub_100028388((uint64_t)v11, type metadata accessor for BenefactorInfoRecord);

    v62 = swift_bridgeObjectRelease_n(v49, 2);
    v61 = v92;
    v56 = v93;
  }
  v63 = (uint64_t)v89;
  v64 = &v89[*(int *)(v56 + 20)];
  v65 = *(_QWORD *)v64;
  v66 = *((_QWORD *)v64 + 1);
  v67 = HIBYTE(v66) & 0xF;
  if ((v66 & 0x2000000000000000) == 0)
    v67 = v65 & 0xFFFFFFFFFFFFLL;
  if (!v67)
    goto LABEL_28;
  v68 = HIBYTE(v49) & 0xF;
  if ((v49 & 0x2000000000000000) == 0)
    v68 = v61 & 0xFFFFFFFFFFFFLL;
  if (v68
    && (v65 == v61 && v66 == v49
     || (v62 = _stringCompareWithSmolCheck(_:_:expecting:)(v61, v49, v65, v66, 0), (v62 & 1) != 0))
    && *(_QWORD *)(v63 + *(int *)(v56 + 24)) == 2)
  {
    v94(0);
  }
  else
  {
LABEL_28:
    v69 = Logger.logObject.getter(v62);
    v70 = static os_log_type_t.error.getter(v69);
    if (os_log_type_enabled(v69, v70))
    {
      v71 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v71 = 0;
      _os_log_impl((void *)&_mh_execute_header, v69, v70, "⛔️ Cannot proceed. Beneficiary handle does not match incoming message from: handle", v71, 2u);
      swift_slowDealloc(v71, -1, -1);
    }

    type metadata accessor for InheritanceError(0);
    v73 = v72;
    v96 = 2;
    v74 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
    v75 = sub_100005150(&qword_10028B350, (uint64_t (*)(uint64_t))type metadata accessor for InheritanceError, (uint64_t)&unk_100216D64);
    _BridgedStoredNSError.init(_:userInfo:)(&v97, &v96, v74, v73, v75);
    v76 = v97;
    v94((uint64_t)v97);

  }
  return sub_100028388(v63, type metadata accessor for BenefactorInfoRecord);
}

uint64_t sub_100162B14()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100162B40(uint64_t a1)
{
  uint64_t v1;

  return sub_1001621EC(a1, *(void (**)(uint64_t))(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t sub_100162B4C(uint64_t result, void (*a2)(uint64_t), uint64_t a3, _BYTE *a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23[3];

  if (result)
  {
    v7 = result;
    swift_errorRetain(result);
    if (qword_10028ADD0 != -1)
      swift_once(&qword_10028ADD0, sub_100046D50);
    v8 = type metadata accessor for Logger(0);
    sub_100005288(v8, (uint64_t)qword_1002A89F0);
    swift_errorRetain(v7);
    v9 = swift_errorRetain(v7);
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.error.getter(v10);
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc(12, -1);
      v13 = swift_slowAlloc(32, -1);
      v22 = v7;
      v23[0] = v13;
      *(_DWORD *)v12 = 136315138;
      swift_errorRetain(v7);
      v14 = sub_1000080B4(&qword_10028E850);
      v15 = String.init<A>(describing:)(&v22, v14);
      v17 = v16;
      v22 = sub_1001DEF4C(v15, v16, v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, v23);
      swift_bridgeObjectRelease(v17);
      swift_errorRelease(v7);
      swift_errorRelease(v7);
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Error Accepting BeneficiaryInfoRecord Share : %s", v12, 0xCu);
      swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v13, -1, -1);
      swift_slowDealloc(v12, -1, -1);

      if (!a2)
        return swift_errorRelease(v7);
    }
    else
    {
      swift_errorRelease(v7);
      swift_errorRelease(v7);

      if (!a2)
        return swift_errorRelease(v7);
    }
    swift_errorRetain(v7);
    a2(v7);
    swift_errorRelease(v7);
    return swift_errorRelease(v7);
  }
  if (*a4 == 2)
  {
    v19 = a5 + 16;
    swift_beginAccess(a5 + 16, v23, 0, 0);
    result = swift_weakLoadStrong(v19);
    if (result)
    {
      v20 = result;
      v21 = type metadata accessor for InheritanceAccessKeyMessage(0);
      sub_100162DC8((uint64_t)&a4[*(int *)(v21 + 20)], (uint64_t)a2, a3);
      return swift_release(v20);
    }
  }
  else if (a2)
  {
    return ((uint64_t (*)(_QWORD))a2)(0);
  }
  return result;
}

uint64_t sub_100162DC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  _QWORD *v14;

  v4 = v3;
  if (qword_10028ADD0 != -1)
    swift_once(&qword_10028ADD0, sub_100046D50);
  v8 = type metadata accessor for Logger(0);
  v9 = sub_100005288(v8, (uint64_t)qword_1002A89F0);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.info.getter(v10);
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Notifying Beneficiary about AccessKey change...", v12, 2u);
    swift_slowDealloc(v12, -1, -1);
  }

  sub_10000732C((_QWORD *)(v4 + 56), *(_QWORD *)(v4 + 80));
  v13 = swift_allocObject(&unk_10026B120, 24, 7);
  swift_weakInit(v13 + 16, v4);
  v14 = (_QWORD *)swift_allocObject(&unk_10026B170, 40, 7);
  v14[2] = a2;
  v14[3] = a3;
  v14[4] = v13;
  sub_10000E1C0(a2, a3);
  swift_retain(v13);
  sub_1000CC928(a1, (uint64_t)sub_100163594, (uint64_t)v14);
  swift_release(v13);
  return swift_release(v14);
}

uint64_t sub_100162F40(uint64_t a1, void (*a2)(uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  id v35;
  Class isa;
  NSString v37;
  id v38;
  uint64_t Strong;
  uint64_t v40;
  id v41;
  void (*v43)(uint64_t);
  uint64_t v44;
  void (*v45)(uint64_t);
  uint64_t v46;
  uint64_t v47[4];
  char v48[24];
  __int128 v49[3];

  v45 = a2;
  v7 = type metadata accessor for TrustedContactUserNotification(0);
  __chkstk_darwin(v7, v8);
  v10 = (uint64_t *)((char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = type metadata accessor for BenefactorInfoRecord(0);
  v13 = __chkstk_darwin(v11, v12);
  v15 = (char *)&v44 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13, v16);
  v18 = (char *)&v44 - v17;
  v19 = sub_1000080B4((uint64_t *)&unk_10028FA40);
  __chkstk_darwin(v19, v20);
  v22 = (uint64_t *)((char *)&v44 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1001633A4(a1, (uint64_t)v22);
  if (swift_getEnumCaseMultiPayload(v22, v19) == 1)
  {
    v23 = *v22;
    if (qword_10028ADD0 != -1)
      swift_once(&qword_10028ADD0, sub_100046D50);
    v24 = type metadata accessor for Logger(0);
    sub_100005288(v24, (uint64_t)qword_1002A89F0);
    swift_errorRetain(v23);
    v25 = swift_errorRetain(v23);
    v26 = Logger.logObject.getter(v25);
    v27 = static os_log_type_t.error.getter(v26);
    if (os_log_type_enabled(v26, v27))
    {
      v28 = (uint8_t *)swift_slowAlloc(12, -1);
      v29 = swift_slowAlloc(32, -1);
      *(_QWORD *)&v49[0] = v29;
      *(_DWORD *)v28 = 136315138;
      v46 = v23;
      swift_errorRetain(v23);
      v30 = sub_1000080B4(&qword_10028E850);
      v31 = String.init<A>(describing:)(&v46, v30);
      v33 = v32;
      v46 = sub_1001DEF4C(v31, v32, (uint64_t *)v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, v47);
      swift_bridgeObjectRelease(v33);
      swift_errorRelease(v23);
      swift_errorRelease(v23);
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "Error fetching Benefactor : %s", v28, 0xCu);
      swift_arrayDestroy(v29, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v29, -1, -1);
      swift_slowDealloc(v28, -1, -1);
    }
    else
    {
      swift_errorRelease(v23);
      swift_errorRelease(v23);
    }

    v43 = v45;
    if (v45)
    {
      swift_errorRetain(v23);
      v43(v23);
      swift_errorRelease(v23);
    }
    return swift_errorRelease(v23);
  }
  else
  {
    v44 = a3;
    v34 = a4 + 16;
    sub_10003B730((uint64_t)v22, (uint64_t)v18, type metadata accessor for BenefactorInfoRecord);
    sub_100027FE8((uint64_t)v18, (uint64_t)v15, type metadata accessor for BenefactorInfoRecord);
    v35 = objc_allocWithZone((Class)AABenefactorInfo);
    isa = UUID._bridgeToObjectiveC()().super.isa;
    v37 = String._bridgeToObjectiveC()();
    v38 = objc_msgSend(v35, "initWithBeneficiaryID:handle:status:", isa, v37, *(_QWORD *)&v15[*(int *)(v11 + 24)]);

    sub_100028388((uint64_t)v15, type metadata accessor for BenefactorInfoRecord);
    *v10 = v38;
    swift_storeEnumTagMultiPayload(v10, v7, 10);
    swift_beginAccess(v34, v48, 0, 0);
    Strong = swift_weakLoadStrong(v34);
    if (Strong)
    {
      v40 = Strong;
      sub_100006CA4(Strong + 96, (uint64_t)&v46);
      v41 = v38;
      swift_release(v40);
      sub_10000732C(&v46, v47[2]);
      sub_100171484((uint64_t)v49);
      sub_1001CEA64(v49);
      sub_100043418((uint64_t)v49);

      sub_100028388((uint64_t)v10, type metadata accessor for TrustedContactUserNotification);
      sub_100028388((uint64_t)v18, type metadata accessor for BenefactorInfoRecord);
      return sub_100006F58(&v46);
    }
    else
    {
      sub_100028388((uint64_t)v10, type metadata accessor for TrustedContactUserNotification);
      return sub_100028388((uint64_t)v18, type metadata accessor for BenefactorInfoRecord);
    }
  }
}

uint64_t sub_1001633A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000080B4((uint64_t *)&unk_10028FA40);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001633EC()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100163410()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = type metadata accessor for InheritanceAccessKeyMessage(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v2 + 64);
  if (*(_QWORD *)(v0 + 16))
    swift_release(*(_QWORD *)(v0 + 24));
  v5 = (v3 + 32) & ~v3;
  v6 = (v4 + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = v0 + v5;
  v8 = v0 + v5 + *(int *)(v1 + 20);
  v9 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  v10 = v7 + *(int *)(v1 + 24);
  v11 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  v12 = type metadata accessor for CloudShareInfo(0);
  swift_bridgeObjectRelease(*(_QWORD *)(v10 + *(int *)(v12 + 20) + 8));

  swift_release(*(_QWORD *)(v0 + v6));
  return swift_deallocObject(v0, v6 + 8, v3 | 7);
}

uint64_t sub_10016350C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;

  v3 = *(_QWORD *)(type metadata accessor for InheritanceAccessKeyMessage(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  return sub_100162B4C(a1, *(void (**)(uint64_t))(v1 + 16), *(_QWORD *)(v1 + 24), (_BYTE *)(v1 + v4), *(_QWORD *)(v1 + ((*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_100163560()
{
  _QWORD *v0;

  if (v0[2])
    swift_release(v0[3]);
  swift_release(v0[4]);
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100163594(uint64_t a1)
{
  uint64_t v1;

  return sub_100162F40(a1, *(void (**)(uint64_t))(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t type metadata accessor for TrustedContactsSyncOperationsCAEvent(uint64_t a1)
{
  uint64_t result;

  result = qword_100294838;
  if (!qword_100294838)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for TrustedContactsSyncOperationsCAEvent);
  return result;
}

uint64_t sub_1001635DC(uint64_t a1)
{
  _BYTE v2[8];

  return swift_initClassMetadata2(a1, 0, 0, v2, a1 + qword_1002A8BC0);
}

uint64_t sub_100163618(char a1, uint64_t a2)
{
  id v4;
  id v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t result;
  unint64_t v10;

  if (!objc_msgSend((id)objc_opt_self(AADeviceInfo), "isInternalBuild"))
    goto LABEL_6;
  v4 = objc_msgSend((id)objc_opt_self(NSProcessInfo), "processInfo");
  v5 = objc_msgSend(v4, "environment");

  v6 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v5, &type metadata for String, &type metadata for String, &protocol witness table for String);
  if (!*(_QWORD *)(v6 + 16))
  {
    swift_bridgeObjectRelease(v6);
    goto LABEL_6;
  }
  sub_10010A9E0(0xD00000000000001BLL, 0x800000010020AFA0);
  v8 = v7;
  result = swift_bridgeObjectRelease(v6);
  if ((v8 & 1) == 0)
  {
LABEL_6:
    v10 = sub_10006A7EC((uint64_t)_swiftEmptyArrayStorage);
    dispatch thunk of AAFTimedAnalyticsEvent.completeEvent(withSuccess:error:additionalData:)(a1 & 1, a2, v10);
    return swift_bridgeObjectRelease(v10);
  }
  return result;
}

void sub_100163744()
{
  _swift_stdlib_reportUnimplementedInitializer("appleaccountd.TrustedContactsSyncOperationsCAEvent", 50, "init(eventName:initialData:)", 28, 0);
  __break(1u);
}

id sub_100163770()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for TrustedContactsSyncOperationsCAEvent(0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_1001637A8()
{
  return type metadata accessor for TrustedContactsSyncOperationsCAEvent(0);
}

uint64_t sub_1001637B0()
{
  uint64_t result;
  uint64_t v1;

  result = sub_1001637D0();
  qword_1002A8BD0 = result;
  *(_QWORD *)algn_1002A8BD8 = v1;
  return result;
}

uint64_t sub_1001637D0()
{
  id v0;
  id v1;
  uint64_t v2;
  unint64_t v3;
  char v4;
  uint64_t *v5;
  uint64_t v6;

  v0 = objc_msgSend((id)objc_opt_self(NSProcessInfo), "processInfo");
  v1 = objc_msgSend(v0, "environment");

  v2 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v1, &type metadata for String, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(v2 + 16) && (v3 = sub_10010A9E0(0xD000000000000010, 0x800000010020E290), (v4 & 1) != 0))
  {
    v5 = (uint64_t *)(*(_QWORD *)(v2 + 56) + 16 * v3);
    v6 = *v5;
    swift_bridgeObjectRetain(v5[1]);
  }
  else
  {
    v6 = 0;
  }
  swift_bridgeObjectRelease(v2);
  return v6;
}

uint64_t sub_1001638AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v25;
  void *v26;

  v1 = v0;
  v2 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v2, v3);
  v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v6, v7);
  v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  v14 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000067D4(0, (unint64_t *)&qword_100295A10, OS_dispatch_queue_ptr);
  v15 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v11 + 104))(v14, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v10);
  static DispatchQoS.unspecified.getter(v15);
  v26 = &_swiftEmptyArrayStorage;
  v16 = sub_100005150((unint64_t *)&qword_10028C6D0, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v17 = sub_1000080B4(&qword_10028B9F0);
  v18 = sub_100155A28();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v26, v17, v18, v2, v16);
  *(_QWORD *)(v1 + 16) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000001ELL, 0x800000010020E2B0, v9, v5, v14, 0);
  sub_100182570(0xD000000000000017, 0x800000010020D740);
  if (qword_10028ADB0 != -1)
    swift_once(&qword_10028ADB0, sub_100046CC8);
  v19 = type metadata accessor for Logger(0);
  v20 = sub_100005288(v19, (uint64_t)qword_1002A8990);
  v21 = Logger.logObject.getter(v20);
  v22 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v21, v22))
  {
    v23 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v23 = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "============== appleaccountd starting ==============", v23, 2u);
    swift_slowDealloc(v23, -1, -1);
  }

  return v1;
}

uint64_t sub_100163B4C()
{
  uint64_t v0;
  uint64_t v1;

  v1 = type metadata accessor for XPCNotificationObserver();
  swift_initStaticObject(v1, &unk_10028AF70);
  sub_100156B34();

  return swift_deallocClassInstance(v0, 24, 7);
}

uint64_t type metadata accessor for AppleAccountDaemon()
{
  return objc_opt_self(_TtC13appleaccountd18AppleAccountDaemon);
}

void sub_100163BB8(void *a1)
{
  sub_100163BE0(a1, "notifyd Event name: %s", "notifyd Event name unavailable");
}

void sub_100163BCC(void *a1)
{
  sub_100163BE0(a1, "distnoted Event name: %s", "distnoted Event name unavailable");
}

void sub_100163BE0(void *a1, const char *a2, const char *a3)
{
  const char *string;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  os_log_type_t v17;
  uint8_t *v18;
  NSObject *oslog;
  uint64_t v20;
  uint64_t v21;

  string = xpc_dictionary_get_string(a1, _xpc_event_key_name);
  if (string)
  {
    v6 = String.init(cString:)(string);
    v8 = v7;
    if (qword_10028ADB0 != -1)
      swift_once(&qword_10028ADB0, sub_100046CC8);
    v9 = type metadata accessor for Logger(0);
    sub_100005288(v9, (uint64_t)qword_1002A8990);
    v10 = swift_bridgeObjectRetain_n(v8, 2);
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc(12, -1);
      v14 = swift_slowAlloc(32, -1);
      v21 = v14;
      *(_DWORD *)v13 = 136315138;
      swift_bridgeObjectRetain(v8);
      v20 = sub_1001DEF4C(v6, v8, &v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21);
      swift_bridgeObjectRelease_n(v8, 3);
      _os_log_impl((void *)&_mh_execute_header, v11, v12, a2, v13, 0xCu);
      swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v14, -1, -1);
      swift_slowDealloc(v13, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v8, 2);
    }
    if (qword_10028AED0 != -1)
      swift_once(&qword_10028AED0, sub_100165D24);
    sub_10016594C(v6, v8);
    swift_bridgeObjectRelease(v8);
  }
  else
  {
    if (qword_10028ADB0 != -1)
      swift_once(&qword_10028ADB0, sub_100046CC8);
    v15 = type metadata accessor for Logger(0);
    v16 = sub_100005288(v15, (uint64_t)qword_1002A8990);
    oslog = Logger.logObject.getter(v16);
    v17 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(oslog, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v17, a3, v18, 2u);
      swift_slowDealloc(v18, -1, -1);
    }

  }
}

uint64_t sub_100163EAC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  __int128 v28;
  uint64_t v29;
  _UNKNOWN **v30;

  v26 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v4 = *(_QWORD *)(v26 - 8);
  __chkstk_darwin(v26, v5);
  v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v8, v9);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v12, v13);
  v15 = (char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = sub_1000067D4(0, (unint64_t *)&qword_100294950, AAFollowUpController_ptr);
  v30 = &off_10026B7F8;
  *(_QWORD *)&v28 = a1;
  v16 = sub_1000080B4(&qword_10028C8D0);
  Dependency.init(dependencyId:config:)(0, 0, 0, v16);
  v17 = sub_1000080B4((uint64_t *)&unk_10028DD90);
  Dependency.init(dependencyId:config:)(0, 0, 0, v17);
  v18 = sub_1000080B4(&qword_10028C860);
  Dependency.init(dependencyId:config:)(0, 0, 0, v18);
  *(_QWORD *)(a2 + OBJC_IVAR____TtC13appleaccountd27DaemonAnalyticsAccountModel__commonFields) = &_swiftEmptyDictionarySingleton;
  v19 = OBJC_IVAR____TtC13appleaccountd27DaemonAnalyticsAccountModel_dispatchQueue;
  v20 = sub_1000067D4(0, (unint64_t *)&qword_100295A10, OS_dispatch_queue_ptr);
  static DispatchQoS.unspecified.getter(v20);
  v27 = &_swiftEmptyArrayStorage;
  v21 = sub_100005150((unint64_t *)&qword_10028C6D0, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v22 = sub_1000080B4(&qword_10028B9F0);
  v23 = sub_100155A28();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v27, v22, v23, v8, v21);
  (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v7, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v26);
  *(_QWORD *)(a2 + v19) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000031, 0x800000010020E210, v15, v11, v7, 0);
  sub_10003A190(&v28, a2 + OBJC_IVAR____TtC13appleaccountd27DaemonAnalyticsAccountModel_followUpController);
  return a2;
}

void sub_100164158()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  NSObject *v5;
  void *v6;
  NSObject *v7;
  void *v8;
  void **v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t);
  void *v12;
  void (*v13)(void *);
  uint64_t v14;

  if (qword_10028ADB0 != -1)
    swift_once(&qword_10028ADB0, sub_100046CC8);
  v0 = type metadata accessor for Logger(0);
  v1 = sub_100005288(v0, (uint64_t)qword_1002A8990);
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "processLaunchEvents", v4, 2u);
    swift_slowDealloc(v4, -1, -1);
  }

  sub_1000067D4(0, (unint64_t *)&qword_100295A10, OS_dispatch_queue_ptr);
  v5 = static OS_dispatch_queue.main.getter();
  v13 = sub_100163BB8;
  v14 = 0;
  v9 = _NSConcreteStackBlock;
  v10 = 1107296256;
  v11 = sub_10002BBF8;
  v12 = &unk_10026B1A8;
  v6 = _Block_copy(&v9);
  xpc_set_event_stream_handler("com.apple.notifyd.matching", v5, v6);
  _Block_release(v6);

  v7 = static OS_dispatch_queue.main.getter();
  v13 = sub_100163BCC;
  v14 = 0;
  v9 = _NSConcreteStackBlock;
  v10 = 1107296256;
  v11 = sub_10002BBF8;
  v12 = &unk_10026B1D0;
  v8 = _Block_copy(&v9);
  xpc_set_event_stream_handler("com.apple.distnoted.matching", v7, v8);
  _Block_release(v8);

}

id sub_100164318()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t *);
  void (*v14)(uint64_t *, uint64_t);
  uint64_t v15;
  uint64_t v16;
  id result;
  uint64_t v18;
  uint64_t v19;
  id v20;
  void (*v21)(uint64_t *, uint64_t, uint64_t);
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(uint64_t *, uint64_t, uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void (*v73)(uint64_t *, uint64_t, uint64_t);
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t inited;
  uint64_t v85;
  _QWORD *v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  id v95;
  uint64_t v96;
  id v97;
  id v98;
  uint64_t v99;
  unsigned int v100;
  _QWORD v101[3];
  uint64_t v102;
  _BYTE v103[16];
  _QWORD v104[6];

  v0 = type metadata accessor for DependencyRegistry.Entry(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0, v2);
  v4 = (uint64_t *)((char *)&v92 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_10028ADB0 != -1)
    swift_once(&qword_10028ADB0, sub_100046CC8);
  v5 = type metadata accessor for Logger(0);
  v6 = sub_100005288(v5, (uint64_t)qword_1002A8990);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Setting up dependencies", v9, 2u);
    swift_slowDealloc(v9, -1, -1);
  }

  type metadata accessor for DependencyRegistry(0);
  v10 = sub_1000080B4(&qword_100299380);
  v11 = type metadata accessor for XPCActivitySchedulerFactory();
  v12 = swift_allocObject(v11, 16, 7);
  v4[3] = v11;
  v4[4] = sub_100005150(&qword_100294940, (uint64_t (*)(uint64_t))type metadata accessor for XPCActivitySchedulerFactory, (uint64_t)&unk_100222660);
  *v4 = v12;
  v13 = *(void (**)(uint64_t *))(v1 + 104);
  v100 = enum case for DependencyRegistry.Entry.factory(_:);
  v13(v4);
  static DependencyRegistry.register<A>(_:entry:dependencyId:)(v10, v4, 0, 0, v10);
  v14 = *(void (**)(uint64_t *, uint64_t))(v1 + 8);
  v14(v4, v0);
  v15 = type metadata accessor for DaemonAccountStore();
  v16 = swift_allocObject(v15, 32, 7);
  result = objc_msgSend((id)objc_opt_self(ACAccountStore), "defaultStore");
  if (result)
  {
    *(_QWORD *)(v16 + 16) = result;
    v98 = (id)objc_opt_self(AKAccountManager);
    *(_QWORD *)(v16 + 24) = objc_msgSend(v98, "sharedInstance");
    v18 = sub_1000080B4(&qword_10028C860);
    v4[3] = v15;
    *v4 = v16;
    v19 = enum case for DependencyRegistry.Entry.exact(_:);
    ((void (*)(uint64_t *, _QWORD, uint64_t))v13)(v4, enum case for DependencyRegistry.Entry.exact(_:), v0);
    v99 = v16;
    swift_retain(v16);
    v96 = v18;
    static DependencyRegistry.register<A>(_:entry:dependencyId:)(v18, v4, 0, 0, v18);
    v14(v4, v0);
    v20 = objc_msgSend(objc_allocWithZone((Class)CDPWalrusStateController), "init");
    v21 = (void (*)(uint64_t *, uint64_t, uint64_t))v13;
    v22 = objc_msgSend(objc_allocWithZone((Class)CDPStateController), "init");
    v23 = type metadata accessor for CDPRequestController();
    v24 = swift_allocObject(v23, 32, 7);
    *(_QWORD *)(v24 + 16) = v20;
    *(_QWORD *)(v24 + 24) = v22;
    v104[3] = v23;
    v104[4] = &off_100261368;
    v104[0] = v24;
    v25 = sub_1000080B4(&qword_10028C8D0);
    v26 = sub_10000732C(v104, v23);
    v4[3] = v23;
    v27 = sub_1000B9D04(v4);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v23 - 8) + 16))(v27, v26, v23);
    v21(v4, v19, v0);
    static DependencyRegistry.register<A>(_:entry:dependencyId:)(v25, v4, 0, 0, v25);
    v14(v4, v0);
    v28 = sub_1000080B4((uint64_t *)&unk_10028FD08);
    v29 = type metadata accessor for CDPFollowUpHandlerFactory();
    v30 = swift_allocObject(v29, 16, 7);
    v4[3] = v29;
    v4[4] = sub_100005150(&qword_100294948, (uint64_t (*)(uint64_t))type metadata accessor for CDPFollowUpHandlerFactory, (uint64_t)&unk_100222458);
    *v4 = v30;
    v31 = v100;
    v21(v4, v100, v0);
    static DependencyRegistry.register<A>(_:entry:dependencyId:)(v28, v4, 0, 0, v28);
    v14(v4, v0);
    v32 = objc_msgSend(objc_allocWithZone((Class)AAFollowUpController), "init");
    v33 = sub_1000080B4((uint64_t *)&unk_10028C8F0);
    v4[3] = sub_1000067D4(0, (unint64_t *)&qword_100294950, AAFollowUpController_ptr);
    *v4 = (uint64_t)v32;
    v21(v4, v19, v0);
    v95 = v32;
    static DependencyRegistry.register<A>(_:entry:dependencyId:)(v33, v4, 0, 0, v33);
    v14(v4, v0);
    v34 = objc_msgSend(v98, "sharedInstance");
    v35 = sub_1000067D4(0, &qword_10028BB50, AKAccountManager_ptr);
    v4[3] = v35;
    *v4 = (uint64_t)v34;
    v21(v4, v19, v0);
    v98 = v34;
    static DependencyRegistry.register<A>(_:entry:dependencyId:)(v35, v4, 0, 0, v35);
    v14(v4, v0);
    v36 = objc_msgSend((id)objc_opt_self(AADeviceInfo), "currentInfo");
    if (!v36)
      v36 = objc_msgSend(objc_allocWithZone((Class)AADeviceInfo), "init");
    v37 = sub_1000067D4(0, &qword_10028BB58, AADeviceInfo_ptr);
    v4[3] = v37;
    *v4 = (uint64_t)v36;
    v38 = v19;
    v21(v4, v19, v0);
    v97 = v36;
    static DependencyRegistry.register<A>(_:entry:dependencyId:)(v37, v4, 0, 0, v37);
    v14(v4, v0);
    v39 = sub_1000080B4(&qword_100294958);
    v4[3] = (uint64_t)&type metadata for DeviceInfoProvider;
    v21(v4, v19, v0);
    static DependencyRegistry.register<A>(_:entry:dependencyId:)(v39, v4, 0, 0, v39);
    v14(v4, v0);
    v40 = sub_1000080B4((uint64_t *)&unk_10028BDC0);
    v41 = objc_msgSend(objc_allocWithZone((Class)AAFKeychainManager), "init");
    v4[3] = sub_1000067D4(0, &qword_100294960, AAFKeychainManager_ptr);
    *v4 = (uint64_t)v41;
    v21(v4, v19, v0);
    static DependencyRegistry.register<A>(_:entry:dependencyId:)(v40, v4, 0, 0, v40);
    v14(v4, v0);
    v42 = type metadata accessor for AccountStoreFactory();
    v43 = swift_allocObject(v42, 16, 7);
    v4[3] = v42;
    v4[4] = sub_100005150(&qword_100294968, (uint64_t (*)(uint64_t))type metadata accessor for AccountStoreFactory, (uint64_t)&unk_100222688);
    *v4 = v43;
    v21(v4, v31, v0);
    static DependencyRegistry.register<A>(_:entry:dependencyId:)(v96, v4, 0, 0, v96);
    v14(v4, v0);
    v44 = sub_1000067D4(0, (unint64_t *)&qword_10028E828, NSUserDefaults_ptr);
    v45 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
    v4[3] = v44;
    *v4 = (uint64_t)v45;
    v21(v4, v19, v0);
    static DependencyRegistry.register<A>(_:entry:dependencyId:)(v44, v4, 0, 0, v44);
    v14(v4, v0);
    v46 = sub_1000080B4((uint64_t *)&unk_10028DD90);
    v47 = type metadata accessor for DeviceStateFactory();
    v48 = v21;
    v49 = swift_allocObject(v47, 16, 7);
    v4[3] = v47;
    v4[4] = sub_100005150(&qword_100294970, (uint64_t (*)(uint64_t))type metadata accessor for DeviceStateFactory, (uint64_t)&unk_100222548);
    *v4 = v49;
    v48(v4, v31, v0);
    static DependencyRegistry.register<A>(_:entry:dependencyId:)(v46, v4, 0, 0, v46);
    v14(v4, v0);
    v50 = type metadata accessor for CDPContextProvider();
    v51 = swift_allocObject(v50, 16, 7);
    v52 = sub_1000080B4((uint64_t *)&unk_100297710);
    v4[3] = v50;
    *v4 = v51;
    v48(v4, v38, v0);
    v96 = v51;
    swift_retain(v51);
    static DependencyRegistry.register<A>(_:entry:dependencyId:)(v52, v4, 0, 0, v52);
    v14(v4, v0);
    v53 = type metadata accessor for DaemonAnalyticsAccountModel(0);
    v54 = swift_allocObject(v53, *(unsigned int *)(v53 + 48), *(unsigned __int16 *)(v53 + 52));
    v95 = v95;
    v55 = sub_100163EAC((uint64_t)v95, v54);
    v56 = sub_1000080B4((uint64_t *)&unk_10028F448);
    v4[3] = v53;
    *v4 = v55;
    v48(v4, v38, v0);
    v94 = v55;
    swift_retain(v55);
    static DependencyRegistry.register<A>(_:entry:dependencyId:)(v56, v4, 0, 0, v56);
    v14(v4, v0);
    v57 = sub_1000080B4((uint64_t *)&unk_10028C8C0);
    if (qword_10028AE60 != -1)
      swift_once(&qword_10028AE60, sub_1000C8AB0);
    v58 = qword_1002A8B08;
    v4[3] = type metadata accessor for CloudKitStore();
    *v4 = v58;
    v48(v4, v38, v0);
    swift_retain(v58);
    static DependencyRegistry.register<A>(_:entry:dependencyId:)(v57, v4, 0, 0, v57);
    v14(v4, v0);
    v59 = qword_1002A8B08;
    v60 = v38;
    v61 = type metadata accessor for CloudKitSyncManager();
    swift_allocObject(v61, 136, 7);
    v62 = swift_retain(v59);
    v63 = sub_100125EE8(v62);
    v93 = v63;
    swift_release(v59);
    v64 = sub_1000080B4(&qword_10028E2A0);
    v4[3] = v61;
    *v4 = (uint64_t)v63;
    v48(v4, v60, v0);
    swift_retain(v63);
    static DependencyRegistry.register<A>(_:entry:dependencyId:)(v64, v4, 0, 0, v64);
    v14(v4, v0);
    v65 = sub_1000080B4(&qword_100294AE0);
    v66 = type metadata accessor for NotificationManagerFactory();
    v67 = swift_allocObject(v66, 16, 7);
    v4[3] = v66;
    *v4 = v67;
    HIDWORD(v92) = v60;
    v48(v4, v60, v0);
    static DependencyRegistry.register<A>(_:entry:dependencyId:)(v65, v4, 0, 0, v65);
    v14(v4, v0);
    v68 = sub_1000080B4(&qword_100294978);
    v69 = type metadata accessor for DeamonSetupServiceRequestController();
    v70 = swift_allocObject(v69, 16, 7);
    v4[3] = v69;
    *v4 = v70;
    v48(v4, v60, v0);
    static DependencyRegistry.register<A>(_:entry:dependencyId:)(v68, v4, 0, 0, v68);
    v14(v4, v0);
    v71 = sub_1000067D4(0, (unint64_t *)&unk_1002921E8, AAFTapToRadarHelper_ptr);
    v72 = type metadata accessor for TapToRadarHelperFactory();
    v73 = v48;
    v74 = swift_allocObject(v72, 16, 7);
    v4[3] = v72;
    v4[4] = sub_100005150(&qword_100294980, (uint64_t (*)(uint64_t))type metadata accessor for TapToRadarHelperFactory, (uint64_t)&unk_100222408);
    *v4 = v74;
    v75 = v100;
    v73(v4, v100, v0);
    static DependencyRegistry.register<A>(_:entry:dependencyId:)(v71, v4, 0, 0, v71);
    v14(v4, v0);
    v76 = sub_1000080B4(&qword_10028F438);
    v77 = type metadata accessor for TapToRadarRequesterFactory();
    v78 = swift_allocObject(v77, 16, 7);
    v4[3] = v77;
    v4[4] = sub_100005150(&qword_100294988, (uint64_t (*)(uint64_t))type metadata accessor for TapToRadarRequesterFactory, (uint64_t)&unk_1002224F8);
    *v4 = v78;
    v73(v4, v75, v0);
    static DependencyRegistry.register<A>(_:entry:dependencyId:)(v76, v4, 0, 0, v76);
    v14(v4, v0);
    v79 = sub_1000080B4((uint64_t *)&unk_100294AF0);
    v80 = type metadata accessor for WalrusPCSSignatureValidatorFactory();
    v81 = swift_allocObject(v80, 16, 7);
    v4[3] = v80;
    v4[4] = sub_100005150((unint64_t *)&unk_100294990, (uint64_t (*)(uint64_t))type metadata accessor for WalrusPCSSignatureValidatorFactory, (uint64_t)&unk_100222430);
    *v4 = v81;
    v73(v4, v75, v0);
    static DependencyRegistry.register<A>(_:entry:dependencyId:)(v79, v4, 0, 0, v79);
    v14(v4, v0);
    v82 = sub_1000080B4(&qword_10028C8A0);
    v83 = type metadata accessor for DaemonStorageFactory();
    inited = swift_initStackObject(v83, v103);
    sub_1000C8AF8(v101);
    swift_release(inited);
    v85 = v102;
    v86 = sub_10000732C(v101, v102);
    v4[3] = v85;
    v87 = sub_1000B9D04(v4);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v85 - 8) + 16))(v87, v86, v85);
    v88 = HIDWORD(v92);
    v73(v4, HIDWORD(v92), v0);
    static DependencyRegistry.register<A>(_:entry:dependencyId:)(v82, v4, 0, 0, v82);
    v14(v4, v0);
    sub_100006F58(v101);
    v89 = sub_1000080B4((uint64_t *)&unk_10028C8E0);
    v90 = type metadata accessor for UrlBagProvider();
    v91 = swift_allocObject(v90, 48, 7);
    strcpy((char *)(v91 + 16), "custodianCfgs");
    *(_WORD *)(v91 + 30) = -4864;
    *(_QWORD *)(v91 + 32) = 0xD000000000000026;
    *(_QWORD *)(v91 + 40) = 0x800000010020E1E0;
    v4[3] = v90;
    *v4 = v91;
    v73(v4, v88, v0);
    static DependencyRegistry.register<A>(_:entry:dependencyId:)(v89, v4, 0, 0, v89);
    swift_release(v93);
    swift_release(v94);
    swift_release(v96);

    swift_release(v99);
    v14(v4, v0);
    return (id)sub_100006F58(v104);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_1001651C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  id v18;
  void *v19;
  id v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  id v25;
  void *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  id v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;

  v0 = type metadata accessor for Logger(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0, v2);
  v4 = (char *)&v56 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10028AEC8 != -1)
    swift_once(&qword_10028AEC8, sub_1001637B0);
  if (*(_QWORD *)algn_1002A8BD8)
    v5 = qword_1002A8BD0;
  else
    v5 = 0xD000000000000012;
  if (*(_QWORD *)algn_1002A8BD8)
    v6 = *(_QWORD *)algn_1002A8BD8;
  else
    v6 = 0x800000010020E1C0;
  v7 = qword_10028ADB0;
  swift_bridgeObjectRetain(*(_QWORD *)algn_1002A8BD8);
  if (v7 != -1)
    swift_once(&qword_10028ADB0, sub_100046CC8);
  v8 = sub_100005288(v0, (uint64_t)qword_1002A8990);
  swift_bridgeObjectRetain(v6);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v58 = v8;
    v12 = (uint8_t *)swift_slowAlloc(12, -1);
    v13 = swift_slowAlloc(32, -1);
    v59 = v4;
    v14 = v13;
    v61 = v13;
    *(_DWORD *)v12 = 136315138;
    swift_bridgeObjectRetain(v6);
    v60 = sub_1001DEF4C(v5, v6, &v61);
    v8 = v58;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, &v61);
    swift_bridgeObjectRelease_n(v6, 3);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Starting appleaccountd - %s", v12, 0xCu);
    swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
    v15 = v14;
    v4 = v59;
    swift_slowDealloc(v15, -1, -1);
    swift_slowDealloc(v12, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v6, 2);
  }
  sub_100164158();
  sub_100164318();
  if (qword_10028AED0 != -1)
    swift_once(&qword_10028AED0, sub_100165D24);
  sub_10016799C();
  v16 = type metadata accessor for XPCNotificationObserver();
  swift_initStaticObject(v16, &unk_10028AF70);
  sub_1001567C0();
  v17 = objc_msgSend(objc_allocWithZone((Class)ACAccountStore), "init");
  v18 = objc_msgSend(v17, "aa_primaryAppleAccount");
  if (v18)
  {
    v19 = v18;
    (*(void (**)(char *, uint64_t, uint64_t))(v1 + 16))(v4, v8, v0);
    v20 = v19;
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v21, v22))
    {
      v57 = v17;
      v58 = v1;
      v59 = v4;
      v23 = (uint8_t *)swift_slowAlloc(12, -1);
      v24 = swift_slowAlloc(32, -1);
      v61 = v24;
      *(_DWORD *)v23 = 136315138;
      v25 = objc_msgSend(v20, "username");
      if (v25)
      {
        v26 = v25;
        v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
        v29 = v28;

        v60 = sub_1001DEF4C(v27, v29, &v61);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, &v61);

        swift_bridgeObjectRelease(v29);
        _os_log_impl((void *)&_mh_execute_header, v21, v22, "Logged into: %s", v23, 0xCu);
        swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v24, -1, -1);
        swift_slowDealloc(v23, -1, -1);

        (*(void (**)(char *, uint64_t))(v58 + 8))(v59, v0);
      }
      else
      {

        __break(1u);
      }
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);
    }
  }
  else
  {
    v30 = Logger.logObject.getter(0);
    v31 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v30, v31))
    {
      v32 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v32 = 0;
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "Not logged in to AppleAccount", v32, 2u);
      swift_slowDealloc(v32, -1, -1);
    }

    v33 = type metadata accessor for CloudDataProtectionHealthCheck(0);
    v34 = swift_allocObject(v33, *(unsigned int *)(v33 + 48), *(unsigned __int16 *)(v33 + 52));
    v35 = sub_1000080B4(&qword_10028C8D0);
    Dependency.init(dependencyId:config:)(0, 0, 0, v35);
    v36 = sub_1000080B4(&qword_100294AE0);
    Dependency.init(dependencyId:config:)(0, 0, 0, v36);
    v37 = sub_1000080B4(&qword_10028E280);
    Dependency.init(dependencyId:config:)(0, 0, 0, v37);
    v38 = sub_1000080B4((uint64_t *)&unk_10028DD90);
    Dependency.init(dependencyId:config:)(0, 0, 0, v38);
    v39 = sub_1000080B4((uint64_t *)&unk_10028FD08);
    Dependency.init(dependencyId:config:)(0, 0, 0, v39);
    v40 = sub_1000080B4(&qword_10028C860);
    Dependency.init(dependencyId:config:)(0, 0, 0, v40);
    v41 = sub_1000080B4((uint64_t *)&unk_10028C8E0);
    Dependency.init(dependencyId:config:)(0, 0, 0, v41);
    sub_1000BE444();

    swift_setDeallocating(v34);
    v42 = v34 + OBJC_IVAR____TtC13appleaccountd30CloudDataProtectionHealthCheck__cdpController;
    v43 = sub_1000080B4((uint64_t *)&unk_10028CC80);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 8))(v42, v43);
    v44 = v34 + OBJC_IVAR____TtC13appleaccountd30CloudDataProtectionHealthCheck__notificationManager;
    v45 = sub_1000080B4(&qword_10028D068);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 8))(v44, v45);
    v46 = v34 + OBJC_IVAR____TtC13appleaccountd30CloudDataProtectionHealthCheck__recoveryFactorsController;
    v47 = sub_1000080B4(&qword_10028E858);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 8))(v46, v47);
    v48 = v34 + OBJC_IVAR____TtC13appleaccountd30CloudDataProtectionHealthCheck__deviceState;
    v49 = sub_1000080B4(qword_10028DF38);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 8))(v48, v49);
    v50 = v34 + OBJC_IVAR____TtC13appleaccountd30CloudDataProtectionHealthCheck__cdpFollowUpHandler;
    v51 = sub_1000080B4(&qword_10028FF60);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v51 - 8) + 8))(v50, v51);
    v52 = v34 + OBJC_IVAR____TtC13appleaccountd30CloudDataProtectionHealthCheck__accountStore;
    v53 = sub_1000080B4(&qword_10028FA50);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v53 - 8) + 8))(v52, v53);
    v54 = v34 + OBJC_IVAR____TtC13appleaccountd30CloudDataProtectionHealthCheck__urlBagProvider;
    v55 = sub_1000080B4(&qword_10028CCE8);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v55 - 8) + 8))(v54, v55);
    swift_deallocClassInstance(v34, *(unsigned int *)(*(_QWORD *)v34 + 48), *(unsigned __int16 *)(*(_QWORD *)v34 + 52));
  }
}

void sub_10016594C(uint64_t a1, unint64_t a2)
{
  void *v2;
  void *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  _QWORD *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;

  v3 = v2;
  v6 = sub_1000080B4((uint64_t *)&unk_100294B20);
  __chkstk_darwin(v6, v7);
  v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10028ADB0 != -1)
    swift_once(&qword_10028ADB0, sub_100046CC8);
  v10 = type metadata accessor for Logger(0);
  sub_100005288(v10, (uint64_t)qword_1002A8990);
  v11 = swift_bridgeObjectRetain_n(a2, 2);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc(12, -1);
    v15 = swift_slowAlloc(32, -1);
    v31 = v9;
    v16 = v3;
    v17 = v15;
    v34 = v15;
    *(_DWORD *)v14 = 136315138;
    swift_bridgeObjectRetain(a2);
    v32 = sub_1001DEF4C(a1, a2, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, &v33);
    swift_bridgeObjectRelease_n(a2, 3);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Handling launch event for %s", v14, 0xCu);
    swift_arrayDestroy(v17, 1, (char *)&type metadata for Any + 8);
    v18 = v17;
    v3 = v16;
    v9 = v31;
    swift_slowDealloc(v18, -1, -1);
    swift_slowDealloc(v14, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
  }
  v34 = a1;
  v35 = a2;
  v32 = 0xD000000000000030;
  v33 = 0x800000010020E520;
  v19 = sub_10006B00C();
  if (StringProtocol.caseInsensitiveCompare<A>(_:)(&v32, &type metadata for String, &type metadata for String, v19, v19))
  {
    v34 = a1;
    v35 = a2;
    v32 = 0xD00000000000001DLL;
    v33 = 0x800000010020E560;
    if (!StringProtocol.caseInsensitiveCompare<A>(_:)(&v32, &type metadata for String, &type metadata for String, v19, v19))
    {
      v20 = Logger.logObject.getter(0);
      v21 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v20, v21))
      {
        v22 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v22 = 0;
        _os_log_impl((void *)&_mh_execute_header, v20, v21, "Found notification com.apple.keystore.lockstatus", v22, 2u);
        swift_slowDealloc(v22, -1, -1);
      }

    }
  }
  else
  {
    v23 = Logger.logObject.getter(0);
    v24 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Attempting to update Apple Account identity with data from the me card", v25, 2u);
      swift_slowDealloc(v25, -1, -1);
    }

    static TaskPriority.userInitiated.getter();
    v26 = type metadata accessor for TaskPriority(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v9, 0, 1, v26);
    v27 = (_QWORD *)swift_allocObject(&unk_10026B210, 40, 7);
    v27[2] = 0;
    v27[3] = 0;
    v27[4] = v3;
    v28 = v3;
    v29 = sub_100168D28((uint64_t)v9, (uint64_t)&unk_100294B38, (uint64_t)v27);
    swift_release(v29);
    sub_100004934((uint64_t)v9, (uint64_t *)&unk_100294B20);
  }
}

id sub_100165D24()
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for ConnectionManager(0)), "init");
  qword_1002A8BE0 = (uint64_t)result;
  return result;
}

id sub_100165D54()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  void (*v18)(uint64_t *, uint64_t, uint64_t);
  void (*v19)(uint64_t *, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  void (*v28)(uint64_t *, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  void (*v35)(uint64_t *, uint64_t, uint64_t);
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t inited;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(uint64_t *, uint64_t, uint64_t);
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  id v64;
  ValueMetadata *v65;
  uint64_t v66;
  ValueMetadata *v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  ValueMetadata *v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  void (*v94)(uint64_t *, uint64_t, uint64_t);
  uint64_t v95;
  uint64_t v96;
  uint64_t *v97;
  id v98;
  _QWORD *v99;
  objc_class *v100;
  id v101;
  _QWORD *v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t v114;
  void (*v115)(uint64_t *, uint64_t, uint64_t);
  void (*v116)(uint64_t *, uint64_t);
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  _QWORD *v120;
  uint64_t v121;
  uint64_t *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  ValueMetadata *v127;
  uint64_t v128;
  void (*v129)(uint64_t *, uint64_t);
  _QWORD *v130;
  Class v131;
  uint64_t v132;
  uint64_t *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t *v140;
  void (*v141)(uint64_t *, uint64_t);
  uint64_t v142;
  uint64_t v143;
  id result;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  id v148;
  char *v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  void (*v153)(uint64_t *, uint64_t, uint64_t);
  id v154;
  id v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  id v159;
  NSString v160;
  id v161;
  uint64_t v162;
  uint64_t v163;
  id v164;
  NSString v165;
  id v166;
  uint64_t v167;
  uint64_t v168;
  id v169;
  NSString v170;
  id v171;
  ValueMetadata *v172;
  _QWORD *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t *v177;
  uint64_t v178;
  _QWORD *v179;
  _QWORD *v180;
  uint64_t v181;
  void (*v182)(uint64_t *, uint64_t);
  _QWORD *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  void *v194;
  Class v195;
  uint64_t v196;
  uint64_t v197;
  void (*v198)(uint64_t *, uint64_t, uint64_t);
  id v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  objc_class *v203;
  uint64_t v204;
  _QWORD *v205;
  uint64_t *v206;
  id v207;
  _QWORD *v208;
  uint64_t v209;
  uint64_t v210;
  id v211;
  Class v212;
  _QWORD *v213;
  uint64_t v214;
  ValueMetadata *v215;
  uint64_t v216;
  _QWORD *v217;
  uint64_t *v218;
  uint64_t v219;
  uint64_t v220;
  _QWORD *v221;
  uint64_t v222;
  char *v223;
  void (*v224)(uint64_t *, uint64_t);
  void (*v225)(uint64_t *, uint64_t, uint64_t);
  unsigned int v226;
  uint64_t v227;
  objc_super v228;
  __int128 v229;
  uint64_t v230;
  _UNKNOWN **v231;
  __int128 v232;
  uint64_t v233;
  char **v234;
  _QWORD *v235;
  ValueMetadata *v236;
  _UNKNOWN **v237;
  char v238[8];

  v1 = type metadata accessor for DependencyRegistry.Entry(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  v5 = (uint64_t *)((char *)&v204 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = v0;
  v7 = sub_1000080B4(&qword_10028E2A0);
  Dependency.init(dependencyId:config:)(0, 0, 0, v7);
  v8 = OBJC_IVAR____TtC13appleaccountd17ConnectionManager_daemonManager;
  *(_QWORD *)&v6[v8] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for AppleAccountDaemonManager()), "init");
  v9 = type metadata accessor for CustodianDefaults();
  v10 = swift_allocObject(v9, 16, 7);
  v11 = (uint64_t *)&v6[OBJC_IVAR____TtC13appleaccountd17ConnectionManager_custodianDefaults];
  v12 = v6;
  v11[3] = v9;
  v11[4] = (uint64_t)&off_10026A7C8;
  *v11 = v10;
  v13 = type metadata accessor for DependencyRegistry(0);
  v14 = sub_1000080B4((uint64_t *)&unk_100294B00);
  v15 = sub_10000732C(v11, v9);
  v5[3] = v9;
  v16 = sub_1000B9D04(v5);
  (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v16, v15, v9);
  v17 = enum case for DependencyRegistry.Entry.exact(_:);
  v18 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v2 + 104);
  v18(v5, enum case for DependencyRegistry.Entry.exact(_:), v1);
  static DependencyRegistry.register<A>(_:entry:dependencyId:)(v14, v5, 0, 0, v14);
  v224 = *(void (**)(uint64_t *, uint64_t))(v2 + 8);
  v19 = v18;
  v225 = v18;
  v224(v5, v1);
  v20 = type metadata accessor for TrustedContactHealthScheduler(0);
  v21 = swift_allocObject(v20, *(unsigned int *)(v20 + 48), *(unsigned __int16 *)(v20 + 52));
  v22 = sub_1000080B4(&qword_100299380);
  Dependency.init(dependencyId:config:)(0, 0, 0, v22);
  v23 = sub_1000080B4(&qword_10028C8A0);
  Dependency.init(dependencyId:config:)(0, 0, 0, v23);
  *(_QWORD *)(v21 + OBJC_IVAR____TtC13appleaccountd29TrustedContactHealthScheduler____lazy_storage___activityProvider) = 0;
  v223 = v12;
  v24 = (uint64_t *)&v12[OBJC_IVAR____TtC13appleaccountd17ConnectionManager_healthScheduler];
  v24[3] = v20;
  v24[4] = (uint64_t)&off_10026AC40;
  *v24 = v21;
  v25 = sub_1000080B4(&qword_10028E260);
  v26 = sub_10000732C(v24, v20);
  v5[3] = v20;
  v27 = sub_1000B9D04(v5);
  (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v27, v26, v20);
  v19(v5, v17, v1);
  static DependencyRegistry.register<A>(_:entry:dependencyId:)(v25, v5, 0, 0, v25);
  v28 = v224;
  v224(v5, v1);
  v29 = type metadata accessor for TrustedContactsPreflightScheduler(0);
  v30 = swift_allocObject(v29, *(unsigned int *)(v29 + 48), *(unsigned __int16 *)(v29 + 52));
  v216 = v22;
  Dependency.init(dependencyId:config:)(0, 0, 0, v22);
  *(_QWORD *)(v30 + OBJC_IVAR____TtC13appleaccountd33TrustedContactsPreflightScheduler____lazy_storage___activityProvider) = 0;
  v31 = (uint64_t *)&v12[OBJC_IVAR____TtC13appleaccountd17ConnectionManager_trustedContactsPreflightScheduler];
  v31[3] = v29;
  v31[4] = (uint64_t)&off_1002659C0;
  *v31 = v30;
  v32 = sub_1000080B4(&qword_10028E270);
  v33 = sub_10000732C(v31, v29);
  v5[3] = v29;
  v34 = sub_1000B9D04(v5);
  (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v29 - 8) + 16))(v34, v33, v29);
  v226 = v17;
  v35 = v225;
  v225(v5, v17, v1);
  static DependencyRegistry.register<A>(_:entry:dependencyId:)(v32, v5, 0, 0, v32);
  v28(v5, v1);
  v36 = objc_msgSend(objc_allocWithZone((Class)AKInheritanceController), "init");
  v37 = sub_1000080B4((uint64_t *)&unk_10028FBC0);
  v5[3] = swift_getObjectType(v36);
  *v5 = (uint64_t)v36;
  v35(v5, v17, v1);
  v211 = v36;
  v221 = (_QWORD *)v37;
  v38 = v13;
  static DependencyRegistry.register<A>(_:entry:dependencyId:)(v37, v5, 0, 0, v37);
  v28(v5, v1);
  v39 = type metadata accessor for DaemonStorageFactory();
  inited = swift_initStackObject(v39, v238);
  sub_1000C8AF8(&v235);
  swift_release(inited);
  v41 = sub_1000067AC((uint64_t)&v235, (uint64_t)v236);
  __chkstk_darwin(v41, v41);
  v43 = (uint64_t *)((char *)&v204 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v44 + 16))(v43);
  v45 = *v43;
  v46 = type metadata accessor for StorageController();
  v233 = v46;
  v234 = (char **)&off_100266E08;
  *(_QWORD *)&v232 = v45;
  v47 = type metadata accessor for InheritanceStorageController(0);
  v48 = swift_allocObject(v47, *(unsigned int *)(v47 + 48), *(unsigned __int16 *)(v47 + 52));
  v49 = sub_1000067AC((uint64_t)&v232, v46);
  __chkstk_darwin(v49, v49);
  v51 = (uint64_t *)((char *)&v204 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v52 + 16))(v51);
  v53 = *v51;
  v54 = (_QWORD *)(v48 + OBJC_IVAR____TtC13appleaccountd28InheritanceStorageController_storageController);
  v54[3] = v46;
  v54[4] = &off_100266E08;
  *v54 = v53;
  v55 = sub_1000080B4(&qword_10028C860);
  Dependency.init(dependencyId:config:)(0, 0, 0, v55);
  sub_100006F58(&v232);
  sub_100006F58(&v235);
  v56 = sub_1000080B4(&qword_100294B10);
  v215 = (ValueMetadata *)v47;
  v5[3] = v47;
  *v5 = v48;
  v57 = v226;
  v58 = v225;
  v225(v5, v226, v1);
  v219 = v48;
  swift_retain(v48);
  static DependencyRegistry.register<A>(_:entry:dependencyId:)(v56, v5, 0, 0, v56);
  v28(v5, v1);
  v59 = type metadata accessor for InheritanceSecurityController(0);
  v60 = swift_allocObject(v59, *(unsigned int *)(v59 + 48), *(unsigned __int16 *)(v59 + 52));
  v214 = v55;
  Dependency.init(dependencyId:config:)(0, 0, 0, v55);
  *(_QWORD *)(v60 + 16) = objc_msgSend(objc_allocWithZone((Class)CDPInheritanceTrustController), "init");
  v61 = sub_1000080B4(&qword_100295290);
  v5[3] = v59;
  *v5 = v60;
  v58(v5, v57, v1);
  v210 = v60;
  swift_retain(v60);
  static DependencyRegistry.register<A>(_:entry:dependencyId:)(v61, v5, 0, 0, v61);
  v28(v5, v1);
  v62 = type metadata accessor for InheritanceCleanupController(0);
  v63 = swift_allocObject(v62, *(unsigned int *)(v62 + 48), *(unsigned __int16 *)(v62 + 52));
  Dependency.init(dependencyId:config:)(0, 0, 0, v221);
  Dependency.init(dependencyId:config:)(0, 0, 0, v56);
  Dependency.init(dependencyId:config:)(0, 0, 0, v61);
  v220 = OBJC_IVAR____TtC13appleaccountd17ConnectionManager_inheritanceCleanupController;
  *(_QWORD *)&v223[OBJC_IVAR____TtC13appleaccountd17ConnectionManager_inheritanceCleanupController] = v63;
  v5[3] = v62;
  *v5 = v63;
  v58(v5, v57, v1);
  swift_retain(v63);
  v212 = (Class)v62;
  v222 = v38;
  static DependencyRegistry.register<A>(_:entry:dependencyId:)(v62, v5, 0, 0, v62);
  v28(v5, v1);
  v64 = objc_msgSend((id)objc_opt_self(AAMessagingService), "sharedService");
  v65 = (ValueMetadata *)type metadata accessor for DaemonDestinationBuilder();
  v66 = swift_allocObject(v65, 16, 7);
  v236 = v65;
  v237 = &off_100265EA8;
  v235 = (_QWORD *)v66;
  v67 = (ValueMetadata *)type metadata accessor for DaemonIDSMessenger();
  v68 = (_QWORD *)swift_allocObject(v67, 64, 7);
  v69 = sub_1000067AC((uint64_t)&v235, (uint64_t)v65);
  __chkstk_darwin(v69, v69);
  v71 = (uint64_t *)((char *)&v204 - ((v70 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v72 + 16))(v71);
  v73 = *v71;
  v68[6] = v65;
  v68[7] = &off_100265EA8;
  v68[2] = v64;
  v68[3] = v73;
  v207 = v64;
  v209 = v66;
  swift_retain(v66);
  sub_100006F58(&v235);
  v236 = v67;
  v237 = &off_100262DC0;
  v235 = v68;
  v74 = type metadata accessor for InheritanceSetupMessenger();
  v75 = (_QWORD *)swift_allocObject(v74, 56, 7);
  v76 = sub_1000067AC((uint64_t)&v235, (uint64_t)v67);
  __chkstk_darwin(v76, v76);
  v78 = (uint64_t *)((char *)&v204 - ((v77 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v79 + 16))(v78);
  v80 = *v78;
  v75[5] = v67;
  v75[6] = &off_100262DC0;
  v221 = v75;
  v75[2] = v80;
  v208 = v68;
  swift_retain(v68);
  sub_100006F58(&v235);
  if (qword_10028AE60 != -1)
    swift_once(&qword_10028AE60, sub_1000C8AB0);
  v81 = qword_1002A8B08;
  v82 = (ValueMetadata *)type metadata accessor for CloudKitStore();
  v236 = v82;
  v237 = &off_10026A3F0;
  v235 = (_QWORD *)v81;
  v83 = type metadata accessor for InheritanceCloudSharingController();
  v84 = (uint64_t *)swift_allocObject(v83, 56, 7);
  v85 = sub_1000067AC((uint64_t)&v235, (uint64_t)v82);
  __chkstk_darwin(v85, v85);
  v87 = (uint64_t *)((char *)&v204 - ((v86 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v88 + 16))(v87);
  v89 = *v87;
  v84[5] = (uint64_t)v82;
  v84[6] = (uint64_t)&off_10026A3F0;
  v84[2] = v89;
  v218 = v84;
  swift_retain(v81);
  sub_100006F58(&v235);
  v90 = v219;
  swift_retain(v219);
  v91 = (uint64_t)v221;
  swift_retain(v221);
  swift_retain(v84);
  v92 = sub_10016947C(v90, v91, v84);
  v217 = v92;
  v93 = type metadata accessor for BeneficiaryAcceptedStatusHandler();
  v5[3] = v93;
  *v5 = (uint64_t)v92;
  v94 = v225;
  v225(v5, v226, v1);
  swift_retain(v92);
  static DependencyRegistry.register<A>(_:entry:dependencyId:)(v93, v5, 0, 0, v93);
  v224(v5, v1);
  v95 = type metadata accessor for UserNotificationManager(0);
  v96 = swift_allocObject(v95, *(unsigned int *)(v95 + 48), *(unsigned __int16 *)(v95 + 52));
  v227 = v1;
  v97 = (uint64_t *)v96;
  Dependency.init(dependencyId:config:)(0, 0, 0, v214);
  v98 = objc_msgSend(objc_allocWithZone((Class)AAFollowUpController), "init");
  v99 = (uint64_t *)((char *)v97 + OBJC_IVAR____TtC13appleaccountd23UserNotificationManager_followUpController);
  v99[3] = sub_1000067D4(0, (unint64_t *)&qword_100294950, AAFollowUpController_ptr);
  v99[4] = &off_10026B7F8;
  *v99 = v98;
  v100 = (objc_class *)type metadata accessor for NotificationController();
  v101 = objc_msgSend(objc_allocWithZone(v100), "init");
  v102 = (uint64_t *)((char *)v97 + OBJC_IVAR____TtC13appleaccountd23UserNotificationManager_notificationController);
  v102[3] = v100;
  v102[4] = &off_10026DDF8;
  *v102 = v101;
  v103 = *(_QWORD *)&v223[v220];
  swift_retain(v90);
  swift_retain(v103);
  swift_retain(v97);
  v104 = sub_100169660(v90, v103, v97);
  v105 = type metadata accessor for BeneficiaryDeclinedStatusHandler();
  v5[3] = v105;
  *v5 = (uint64_t)v104;
  v94(v5, v226, v227);
  swift_retain(v104);
  static DependencyRegistry.register<A>(_:entry:dependencyId:)(v105, v5, 0, 0, v105);
  v224(v5, v227);
  v106 = (uint64_t)v215;
  v236 = v215;
  v237 = &off_100266030;
  v235 = (_QWORD *)v90;
  v233 = v93;
  v234 = &off_100267378;
  v107 = v217;
  *(_QWORD *)&v232 = v217;
  v230 = v105;
  v231 = &off_10026FFF8;
  *(_QWORD *)&v229 = v104;
  v108 = type metadata accessor for InheritanceInvitationResponseHandler();
  v109 = (_QWORD *)swift_allocObject(v108, 136, 7);
  v110 = sub_1000067AC((uint64_t)&v235, v106);
  __chkstk_darwin(v110, v110);
  v112 = (uint64_t *)((char *)&v204 - ((v111 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v113 + 16))(v112);
  v114 = *v112;
  v109[5] = v106;
  v109[6] = &off_100266030;
  v109[2] = v114;
  sub_10003A190(&v232, (uint64_t)(v109 + 7));
  sub_10003A190(&v229, (uint64_t)(v109 + 12));
  swift_retain(v90);
  swift_retain(v107);
  v205 = v104;
  swift_retain(v104);
  sub_100006F58(&v235);
  v5[3] = v108;
  *v5 = (uint64_t)v109;
  v115 = v225;
  v225(v5, v226, v227);
  v213 = v109;
  swift_retain(v109);
  static DependencyRegistry.register<A>(_:entry:dependencyId:)(v108, v5, 0, 0, v108);
  v116 = v224;
  v224(v5, v227);
  v117 = type metadata accessor for DaemonFamilyRequester();
  v118 = swift_allocObject(v117, 16, 7);
  swift_retain_n(v90, 2);
  v119 = (uint64_t)v221;
  swift_retain(v221);
  v120 = sub_10016914C(v90, v118);
  v121 = type metadata accessor for DaemonMessageUtil();
  v122 = (uint64_t *)swift_allocObject(v121, 16, 7);
  v123 = sub_100169844(v90, v119, (uint64_t)v120, v122);
  v124 = type metadata accessor for InheritanceInvitationHandler(0);
  v5[3] = v124;
  *v5 = v123;
  v115(v5, v226, v227);
  v214 = v123;
  swift_retain(v123);
  static DependencyRegistry.register<A>(_:entry:dependencyId:)(v124, v5, 0, 0, v124);
  v116(v5, v227);
  swift_retain(v90);
  v125 = (uint64_t)v218;
  swift_retain(v218);
  swift_retain(v97);
  v206 = v97;
  v126 = v227;
  v127 = (ValueMetadata *)sub_100169A08(v125, v90, v97);
  v128 = type metadata accessor for InheritanceAccessKeyMessageHandler();
  v5[3] = v128;
  *v5 = (uint64_t)v127;
  v115(v5, v226, v126);
  v215 = v127;
  swift_retain(v127);
  static DependencyRegistry.register<A>(_:entry:dependencyId:)(v128, v5, 0, 0, v128);
  v116(v5, v126);
  v129 = v116;
  v130 = *(_QWORD **)&v223[v220];
  v131 = v212;
  v236 = (ValueMetadata *)v212;
  v237 = &off_10026C160;
  v235 = v130;
  v132 = type metadata accessor for BeneficiaryRemovedMessageHandler();
  v133 = (uint64_t *)swift_allocObject(v132, 56, 7);
  v134 = sub_1000067AC((uint64_t)&v235, (uint64_t)v131);
  __chkstk_darwin(v134, v134);
  v136 = (uint64_t *)((char *)&v204 - ((v135 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v137 + 16))(v136);
  v138 = *v136;
  v133[5] = (uint64_t)v131;
  v133[6] = (uint64_t)&off_10026C160;
  v133[2] = v138;
  swift_retain(v130);
  sub_100006F58(&v235);
  v139 = v226;
  v5[3] = v132;
  *v5 = (uint64_t)v133;
  v225(v5, v139, v126);
  v140 = v133;
  swift_retain(v133);
  static DependencyRegistry.register<A>(_:entry:dependencyId:)(v132, v5, 0, 0, v132);
  v141 = v129;
  v129(v5, v126);
  v142 = type metadata accessor for DaemonAccountStore();
  v143 = swift_allocObject(v142, 32, 7);
  result = objc_msgSend((id)objc_opt_self(ACAccountStore), "defaultStore");
  if (result)
  {
    *(_QWORD *)(v143 + 16) = result;
    *(_QWORD *)(v143 + 24) = objc_msgSend((id)objc_opt_self(AKAccountManager), "sharedInstance");
    v145 = (uint64_t)v213;
    swift_retain(v213);
    v146 = v214;
    swift_retain(v214);
    v147 = (uint64_t)v215;
    swift_retain(v215);
    v220 = (uint64_t)v140;
    swift_retain(v140);
    v148 = sub_100169BEC(v143, v146, v145, v147, v140);
    v149 = v223;
    v150 = &v223[OBJC_IVAR____TtC13appleaccountd17ConnectionManager_inheritanceMessageProcessor];
    *(_QWORD *)v150 = v148;
    *((_QWORD *)v150 + 1) = &off_10026D870;
    v151 = sub_1000080B4(&qword_10028F9D0);
    v5[3] = swift_getObjectType(v148);
    *v5 = (uint64_t)v148;
    v152 = v227;
    v153 = v225;
    v225(v5, v139, v227);
    v154 = v148;
    static DependencyRegistry.register<A>(_:entry:dependencyId:)(v151, v5, 0, 0, v151);
    v141(v5, v152);
    v212 = (Class)type metadata accessor for InheritanceRequestManager(0);
    v155 = objc_msgSend(objc_allocWithZone(v212), "init");
    v204 = OBJC_IVAR____TtC13appleaccountd17ConnectionManager_inheritanceManager;
    *(_QWORD *)&v149[OBJC_IVAR____TtC13appleaccountd17ConnectionManager_inheritanceManager] = v155;
    v156 = type metadata accessor for CustodianDaemonContainer();
    swift_allocObject(v156, 640, 7);
    *(_QWORD *)&v149[OBJC_IVAR____TtC13appleaccountd17ConnectionManager_custodianDaemonContainer] = sub_1001B5BCC();
    static String._unconditionallyBridgeFromObjectiveC(_:)(AACustodianMachService);
    v158 = v157;
    v159 = objc_allocWithZone((Class)NSXPCListener);
    v160 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v158);
    v161 = objc_msgSend(v159, "initWithMachServiceName:", v160);

    *(_QWORD *)&v149[OBJC_IVAR____TtC13appleaccountd17ConnectionManager_custodianServiceListener] = v161;
    static String._unconditionallyBridgeFromObjectiveC(_:)(AAAccountUserNotificationMachService);
    v163 = v162;
    v164 = objc_allocWithZone((Class)NSXPCListener);
    v165 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v163);
    v166 = objc_msgSend(v164, "initWithMachServiceName:", v165);

    *(_QWORD *)&v149[OBJC_IVAR____TtC13appleaccountd17ConnectionManager_notificationServiceListener] = v166;
    static String._unconditionallyBridgeFromObjectiveC(_:)(AAIdentityMachService);
    v168 = v167;
    v169 = objc_allocWithZone((Class)NSXPCListener);
    v170 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v168);
    v171 = objc_msgSend(v169, "initWithMachServiceName:", v170);

    *(_QWORD *)&v149[OBJC_IVAR____TtC13appleaccountd17ConnectionManager_identityServiceListener] = v171;
    v172 = (ValueMetadata *)type metadata accessor for IdentityDaemonContainer();
    swift_allocObject(v172, 144, 7);
    v173 = sub_10016D528();
    v174 = OBJC_IVAR____TtC13appleaccountd17ConnectionManager_identityDaemonContainer;
    *(_QWORD *)&v149[OBJC_IVAR____TtC13appleaccountd17ConnectionManager_identityDaemonContainer] = v173;
    v175 = type metadata accessor for IdentityTaskScheduler(0);
    v176 = swift_allocObject(v175, *(unsigned int *)(v175 + 48), *(unsigned __int16 *)(v175 + 52));
    Dependency.init(dependencyId:config:)(0, 0, 0, v216);
    *(_QWORD *)(v176 + OBJC_IVAR____TtC13appleaccountd21IdentityTaskScheduler____lazy_storage___activityProvider) = 0;
    v177 = (uint64_t *)&v149[OBJC_IVAR____TtC13appleaccountd17ConnectionManager_identityScheduler];
    v177[3] = v175;
    v177[4] = (uint64_t)&off_10026DDE0;
    *v177 = v176;
    v178 = sub_1000080B4(&qword_100294AE8);
    v179 = sub_10000732C(v177, v175);
    v5[3] = v175;
    v180 = sub_1000B9D04(v5);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v175 - 8) + 16))(v180, v179, v175);
    v153(v5, v139, v152);
    static DependencyRegistry.register<A>(_:entry:dependencyId:)(v178, v5, 0, 0, v178);
    v181 = v152;
    v182 = v224;
    v224(v5, v181);
    v183 = *(_QWORD **)&v149[v174];
    v236 = v172;
    v237 = &off_10026B460;
    v235 = v183;
    v184 = type metadata accessor for IdentityContactsNotificationHandler();
    v185 = swift_allocObject(v184, 144, 7);
    v186 = sub_1000067AC((uint64_t)&v235, (uint64_t)v172);
    __chkstk_darwin(v186, v186);
    v188 = (uint64_t *)((char *)&v204 - ((v187 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v189 + 16))(v188);
    v190 = *v188;
    swift_retain_n(v183, 2);
    v191 = sub_10016909C(v190, v185);
    sub_100006F58(&v235);
    swift_release(v183);
    *(_QWORD *)&v149[OBJC_IVAR____TtC13appleaccountd17ConnectionManager_identityContactsNotificationHandler] = v191;
    v192 = type metadata accessor for PostInstallActivityScheduler(0);
    v193 = swift_allocObject(v192, *(unsigned int *)(v192 + 48), *(unsigned __int16 *)(v192 + 52));
    Dependency.init(dependencyId:config:)(0, 0, 0, v216);
    *(_QWORD *)(v193 + OBJC_IVAR____TtC13appleaccountd28PostInstallActivityScheduler____lazy_storage___activityProvider) = 0;
    *(_QWORD *)&v149[OBJC_IVAR____TtC13appleaccountd17ConnectionManager_postInstallActivityScheduler] = v193;
    v194 = *(void **)&v149[v204];
    v195 = v212;
    v5[3] = (uint64_t)v212;
    *v5 = (uint64_t)v194;
    v196 = v226;
    v197 = v227;
    v198 = v153;
    v153(v5, v226, v227);
    v199 = v194;
    static DependencyRegistry.register<A>(_:entry:dependencyId:)(v195, v5, 0, 0, v195);
    v200 = v197;
    v182(v5, v197);
    v236 = &type metadata for AAFeatureFlags;
    v237 = (_UNKNOWN **)sub_10016A0CC();
    LOBYTE(v235) = 1;
    LOBYTE(v194) = isFeatureEnabled(_:)(&v235);
    sub_100006F58(&v235);
    v201 = type metadata accessor for AppleIDAvailabilityScheduler(0);
    swift_allocObject(v201, *(unsigned int *)(v201 + 48), *(unsigned __int16 *)(v201 + 52));
    v202 = sub_100010330((uint64_t)sub_100167498, 0, v194 & 1);
    *(_QWORD *)&v149[OBJC_IVAR____TtC13appleaccountd17ConnectionManager_appleIDAvailabilityScheduler] = v202;
    v5[3] = v201;
    *v5 = v202;
    v198(v5, v196, v200);
    swift_retain(v202);
    static DependencyRegistry.register<A>(_:entry:dependencyId:)(v201, v5, 0, 0, v201);

    swift_release(v220);
    swift_release(v215);
    swift_release(v214);
    swift_release(v213);
    swift_release(v205);
    swift_release(v206);
    swift_release(v217);
    swift_release(v218);
    swift_release(v221);
    swift_release(v208);
    swift_release(v209);

    swift_release(v210);
    swift_release(v219);

    v182(v5, v200);
    v203 = (objc_class *)type metadata accessor for ConnectionManager(0);
    v228.receiver = v149;
    v228.super_class = v203;
    return objc_msgSendSuper2(&v228, "init");
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_100167498(void *a1)
{
  uint64_t v2;
  id v3;
  NSObject *v4;
  __n128 v5;
  os_log_type_t v6;
  uint8_t *v7;
  _QWORD *v8;
  id v9;
  uint64_t v10;
  id v11;
  id v12;
  uint64_t v13;

  if (qword_10028ADD8 != -1)
    swift_once(&qword_10028ADD8, sub_100046D78);
  v2 = type metadata accessor for Logger(0);
  sub_100005288(v2, (uint64_t)qword_1002A8A08);
  v3 = a1;
  v4 = Logger.logObject.getter(v3);
  v6 = static os_log_type_t.default.getter(v5);
  if (os_log_type_enabled(v4, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    v8 = (_QWORD *)swift_slowAlloc(8, -1);
    *(_DWORD *)v7 = 138412290;
    v12 = v3;
    v9 = v3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v12, &v13);
    *v8 = v3;

    _os_log_impl((void *)&_mh_execute_header, v4, v6, "ConnectionManager: Sending %@ to reporter", v7, 0xCu);
    v10 = sub_1000080B4((uint64_t *)&unk_10028BC20);
    swift_arrayDestroy(v8, 1, v10);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);

  }
  else
  {

  }
  v11 = objc_msgSend((id)objc_opt_self(AAAnalyticsRTCReporter), "reporter");
  objc_msgSend(v11, "sendEvent:", v3);

}

id sub_100167680()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  objc_super v5;

  v1 = OBJC_IVAR____TtC13appleaccountd17ConnectionManager_custodianServiceListener;
  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC13appleaccountd17ConnectionManager_custodianServiceListener], "invalidate");
  objc_msgSend(*(id *)&v0[v1], "setDelegate:", 0);
  v2 = OBJC_IVAR____TtC13appleaccountd17ConnectionManager_notificationServiceListener;
  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC13appleaccountd17ConnectionManager_notificationServiceListener], "invalidate");
  objc_msgSend(*(id *)&v0[v2], "setDelegate:", 0);
  v3 = OBJC_IVAR____TtC13appleaccountd17ConnectionManager_identityServiceListener;
  objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC13appleaccountd17ConnectionManager_identityServiceListener], "invalidate");
  objc_msgSend(*(id *)&v0[v3], "setDelegate:", 0);
  v5.receiver = v0;
  v5.super_class = (Class)type metadata accessor for ConnectionManager(0);
  return objc_msgSendSuper2(&v5, "dealloc");
}

uint64_t sub_1001678A0()
{
  return type metadata accessor for ConnectionManager(0);
}

uint64_t type metadata accessor for ConnectionManager(uint64_t a1)
{
  uint64_t result;

  result = qword_100294A50;
  if (!qword_100294A50)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ConnectionManager);
  return result;
}

void sub_1001678E4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[17];

  v4[0] = "(";
  v4[1] = "(";
  v4[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[4] = "(";
  v4[5] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[6] = &unk_10021ECC0;
  v4[7] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[8] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[9] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[10] = "(";
  v4[11] = (char *)&value witness table for Builtin.NativeObject + 64;
  sub_100168920(319);
  if (v3 <= 0x3F)
  {
    v4[12] = *(_QWORD *)(v2 - 8) + 64;
    v4[13] = (char *)&value witness table for Builtin.NativeObject + 64;
    v4[14] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[15] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[16] = (char *)&value witness table for Builtin.NativeObject + 64;
    swift_updateClassMetadata2(a1, 256, 17, v4, a1 + 80);
  }
}

uint64_t sub_10016799C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char **v6;
  id v7;
  void *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  _BOOL4 v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  char **v22;
  uint64_t v23;
  id v24;
  void *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint8_t *v36;
  uint64_t v37;
  id v38;
  void *v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  uint8_t *v47;
  uint64_t v48;
  uint8_t *v49;
  uint64_t v50;
  char *v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  id v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  id v72;
  _QWORD *v73;
  uint64_t v74;
  objc_class *v75;
  id v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  unint64_t v84;
  unint64_t v85;
  char *v86;
  uint64_t v87;
  id v88;
  _QWORD *v89;
  id v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  NSObject *v117;
  __n128 v118;
  os_log_type_t v119;
  uint8_t *v120;
  uint64_t v121;
  NSObject *v122;
  os_log_type_t v123;
  uint8_t *v124;
  uint64_t v125;
  NSObject *v126;
  os_log_type_t v127;
  uint8_t *v128;
  uint64_t v129;
  _UNKNOWN **v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v136;
  uint64_t *v137;
  __int128 v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  _QWORD v144[3];
  uint64_t v145;
  _UNKNOWN **v146;
  uint64_t v147;
  _QWORD v148[4];
  uint64_t v149[3];
  uint64_t v150;
  _UNKNOWN **v151;

  v1 = v0;
  v2 = sub_1000080B4(&qword_10028E860);
  v140 = *(_QWORD *)(v2 - 8);
  v141 = v2;
  __chkstk_darwin(v2, v3);
  v139 = (char *)&v136 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = OBJC_IVAR____TtC13appleaccountd17ConnectionManager_custodianServiceListener;
  v6 = &selRef_bodyTaskWithRequest_completion_;
  v7 = objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC13appleaccountd17ConnectionManager_custodianServiceListener), "serviceName");
  if (v7)
  {
    v8 = v7;
    v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
    v11 = v10;

  }
  else
  {
    v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(AACustodianMachService);
    v11 = v12;
  }
  if (qword_10028ADB0 != -1)
    swift_once(&qword_10028ADB0, sub_100046CC8);
  v13 = type metadata accessor for Logger(0);
  v14 = sub_100005288(v13, (uint64_t)qword_1002A8990);
  swift_bridgeObjectRetain(v11);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.debug.getter();
  v18 = os_log_type_enabled(v16, v17);
  v142 = v14;
  v143 = v1;
  if (v18)
  {
    v19 = (uint8_t *)swift_slowAlloc(12, -1);
    v20 = swift_slowAlloc(32, -1);
    v149[0] = v20;
    *(_DWORD *)v19 = 136315138;
    swift_bridgeObjectRetain(v11);
    v147 = sub_1001DEF4C(v9, v11, v149);
    v1 = v143;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v147, v148);
    swift_bridgeObjectRelease_n(v11, 3);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Resuming XPC listener for Mach service %s...", v19, 0xCu);
    swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
    v21 = v20;
    v6 = &selRef_bodyTaskWithRequest_completion_;
    swift_slowDealloc(v21, -1, -1);
    swift_slowDealloc(v19, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v11, 2);
  }
  v22 = &selRef_bodyTaskWithRequest_completion_;
  objc_msgSend(*(id *)(v1 + v5), "setDelegate:", v1);
  objc_msgSend(*(id *)(v1 + v5), "resume");
  v23 = OBJC_IVAR____TtC13appleaccountd17ConnectionManager_notificationServiceListener;
  v24 = objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC13appleaccountd17ConnectionManager_notificationServiceListener), v6[91]);
  if (v24)
  {
    v25 = v24;
    v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
    v28 = v27;

  }
  else
  {
    v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(AAAccountUserNotificationMachService);
    v28 = v29;
  }
  swift_bridgeObjectRetain(v28);
  v31 = Logger.logObject.getter(v30);
  v32 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v31, v32))
  {
    v33 = (uint8_t *)swift_slowAlloc(12, -1);
    v34 = swift_slowAlloc(32, -1);
    v149[0] = v34;
    *(_DWORD *)v33 = 136315138;
    swift_bridgeObjectRetain(v28);
    v147 = sub_1001DEF4C(v26, v28, v149);
    v1 = v143;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v147, v148);
    swift_bridgeObjectRelease_n(v28, 3);
    _os_log_impl((void *)&_mh_execute_header, v31, v32, "Resuming XPC listener for Mach service %s...", v33, 0xCu);
    swift_arrayDestroy(v34, 1, (char *)&type metadata for Any + 8);
    v35 = v34;
    v6 = &selRef_bodyTaskWithRequest_completion_;
    swift_slowDealloc(v35, -1, -1);
    v36 = v33;
    v22 = &selRef_bodyTaskWithRequest_completion_;
    swift_slowDealloc(v36, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v28, 2);
  }
  objc_msgSend(*(id *)(v1 + v23), v22[46], v1);
  objc_msgSend(*(id *)(v1 + v23), "resume");
  v37 = OBJC_IVAR____TtC13appleaccountd17ConnectionManager_identityServiceListener;
  v38 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v1
                                                              + OBJC_IVAR____TtC13appleaccountd17ConnectionManager_identityServiceListener), v6[91]));
  if (v38)
  {
    v39 = v38;
    v40 = static String._unconditionallyBridgeFromObjectiveC(_:)(v38);
    v42 = v41;

  }
  else
  {
    v40 = static String._unconditionallyBridgeFromObjectiveC(_:)(AAIdentityMachService);
    v42 = v43;
  }
  swift_bridgeObjectRetain(v42);
  v45 = Logger.logObject.getter(v44);
  v46 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v45, v46))
  {
    v47 = (uint8_t *)swift_slowAlloc(12, -1);
    v48 = swift_slowAlloc(32, -1);
    v149[0] = v48;
    *(_DWORD *)v47 = 136315138;
    swift_bridgeObjectRetain(v42);
    v147 = sub_1001DEF4C(v40, v42, v149);
    v1 = v143;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v147, v148);
    swift_bridgeObjectRelease_n(v42, 3);
    _os_log_impl((void *)&_mh_execute_header, v45, v46, "Resuming XPC listener for Mach service %s...", v47, 0xCu);
    swift_arrayDestroy(v48, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v48, -1, -1);
    v49 = v47;
    v22 = &selRef_bodyTaskWithRequest_completion_;
    swift_slowDealloc(v49, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v42, 2);
  }
  objc_msgSend(*(id *)(v1 + v37), v22[46], v1);
  objc_msgSend(*(id *)(v1 + v37), "resume");
  objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC13appleaccountd17ConnectionManager_inheritanceManager), "startup");
  v50 = OBJC_IVAR____TtC13appleaccountd17ConnectionManager_custodianDaemonContainer;
  v138 = *(_OWORD *)(*(_QWORD *)(v1 + OBJC_IVAR____TtC13appleaccountd17ConnectionManager_custodianDaemonContainer)
                   + 392);
  swift_unknownObjectRetain(v138);
  v51 = sub_100133FA4(0, 1, 1, (char *)&_swiftEmptyArrayStorage);
  v53 = *((_QWORD *)v51 + 2);
  v52 = *((_QWORD *)v51 + 3);
  v54 = v53 + 1;
  if (v53 >= v52 >> 1)
    v51 = sub_100133FA4((char *)(v52 > 1), v53 + 1, 1, v51);
  *((_QWORD *)v51 + 2) = v54;
  *(_OWORD *)&v51[16 * v53 + 32] = v138;
  v55 = *((_QWORD *)v51 + 3);
  v138 = *(_OWORD *)(*(_QWORD *)(v1 + v50) + 408);
  swift_unknownObjectRetain(v138);
  if (v54 >= v55 >> 1)
    v51 = sub_100133FA4((char *)(v55 > 1), v53 + 2, 1, v51);
  *((_QWORD *)v51 + 2) = v53 + 2;
  *(_OWORD *)&v51[16 * v54 + 32] = v138;
  v56 = objc_msgSend(objc_allocWithZone((Class)CDPWalrusStateController), "init");
  v57 = objc_msgSend(objc_allocWithZone((Class)AKWalrusController), "init");
  v58 = type metadata accessor for AuthKitRequestController();
  v59 = swift_allocObject(v58, 24, 7);
  *(_QWORD *)(v59 + 16) = v57;
  v150 = v58;
  v151 = &off_10026AD08;
  v149[0] = v59;
  v60 = type metadata accessor for WalrusPCSAuthRequestProvider(0);
  v61 = (_QWORD *)swift_allocObject(v60, *(unsigned int *)(v60 + 48), *(unsigned __int16 *)(v60 + 52));
  v62 = sub_1000067AC((uint64_t)v149, v58);
  __chkstk_darwin(v62, v62);
  v64 = (uint64_t *)((char *)&v136 - ((v63 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v65 + 16))(v64);
  v66 = *v64;
  v61[6] = v58;
  v61[7] = &off_10026AD08;
  v61[3] = v66;
  swift_retain(v59);
  v67 = sub_1000080B4(&qword_10028C860);
  Dependency.init(dependencyId:config:)(0, 0, 0, v67);
  v68 = sub_1000080B4(&qword_100294978);
  Dependency.init(dependencyId:config:)(0, 0, 0, v68);
  v69 = sub_1000080B4((uint64_t *)&unk_100294AF0);
  Dependency.init(dependencyId:config:)(0, 0, 0, v69);
  v61[2] = v56;
  sub_100006F58(v149);
  swift_release(v59);
  v137 = (uint64_t *)v50;
  sub_100006CA4(*(_QWORD *)(v1 + v50) + 144, (uint64_t)v149);
  v70 = type metadata accessor for UserNotificationManager(0);
  v71 = (uint64_t *)swift_allocObject(v70, *(unsigned int *)(v70 + 48), *(unsigned __int16 *)(v70 + 52));
  swift_retain(v61);
  Dependency.init(dependencyId:config:)(0, 0, 0, v67);
  v72 = objc_msgSend(objc_allocWithZone((Class)AAFollowUpController), "init");
  v73 = (uint64_t *)((char *)v71 + OBJC_IVAR____TtC13appleaccountd23UserNotificationManager_followUpController);
  v74 = sub_1000067D4(0, (unint64_t *)&qword_100294950, AAFollowUpController_ptr);
  v73[3] = v74;
  v73[4] = &off_10026B7F8;
  *v73 = v72;
  v75 = (objc_class *)type metadata accessor for NotificationController();
  v76 = objc_msgSend(objc_allocWithZone(v75), "init");
  v77 = (uint64_t *)((char *)v71 + OBJC_IVAR____TtC13appleaccountd23UserNotificationManager_notificationController);
  v77[3] = v75;
  v77[4] = &off_10026DDF8;
  *v77 = v76;
  v78 = sub_1000067AC((uint64_t)v149, v150);
  __chkstk_darwin(v78, v78);
  v80 = (uint64_t *)((char *)&v136 - ((v79 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v81 + 16))(v80);
  v82 = *v80;
  *(_QWORD *)&v138 = v61;
  v83 = sub_100168EB8(v82, (uint64_t)v61, v71);
  sub_100006F58(v149);
  if ((swift_isUniquelyReferenced_nonNull_native(v51) & 1) == 0)
    v51 = sub_100133FA4(0, *((_QWORD *)v51 + 2) + 1, 1, v51);
  v85 = *((_QWORD *)v51 + 2);
  v84 = *((_QWORD *)v51 + 3);
  if (v85 >= v84 >> 1)
    v51 = sub_100133FA4((char *)(v84 > 1), v85 + 1, 1, v51);
  *((_QWORD *)v51 + 2) = v85 + 1;
  v86 = &v51[16 * v85];
  *((_QWORD *)v86 + 4) = v83;
  *((_QWORD *)v86 + 5) = &off_100266D88;
  sub_100006CA4(*(uint64_t *)((char *)v137 + v143) + 144, (uint64_t)v149);
  v87 = swift_allocObject(v70, *(unsigned int *)(v70 + 48), *(unsigned __int16 *)(v70 + 52));
  Dependency.init(dependencyId:config:)(0, 0, 0, v67);
  v88 = objc_msgSend(objc_allocWithZone((Class)AAFollowUpController), "init");
  v89 = (_QWORD *)(v87 + OBJC_IVAR____TtC13appleaccountd23UserNotificationManager_followUpController);
  v89[3] = v74;
  v89[4] = &off_10026B7F8;
  *v89 = v88;
  v90 = objc_msgSend(objc_allocWithZone(v75), "init");
  v91 = (_QWORD *)(v87 + OBJC_IVAR____TtC13appleaccountd23UserNotificationManager_notificationController);
  v91[3] = v75;
  v91[4] = &off_10026DDF8;
  *v91 = v90;
  v92 = sub_1000067AC((uint64_t)v149, v150);
  v137 = &v136;
  __chkstk_darwin(v92, v92);
  v94 = (uint64_t *)((char *)&v136 - ((v93 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v95 + 16))(v94);
  v96 = *v94;
  v97 = type metadata accessor for DaemonAccountStore();
  v148[2] = v97;
  v148[3] = &off_100261290;
  v147 = v96;
  v145 = v70;
  v146 = &off_10026EB98;
  v144[0] = v87;
  v98 = type metadata accessor for TermsPushServiceDelegate();
  v99 = (_QWORD *)swift_allocObject(v98, 96, 7);
  v100 = sub_1000067AC((uint64_t)&v147, v97);
  __chkstk_darwin(v100, v100);
  v102 = (uint64_t *)((char *)&v136 - ((v101 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v103 + 16))(v102);
  v104 = sub_1000067AC((uint64_t)v144, v145);
  __chkstk_darwin(v104, v104);
  v106 = (uint64_t *)((char *)&v136 - ((v105 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v107 + 16))(v106);
  v108 = *v102;
  v109 = *v106;
  v99[5] = v97;
  v99[6] = &off_100261290;
  v99[2] = v108;
  v99[10] = v70;
  v99[11] = &off_10026EB98;
  v99[7] = v109;
  swift_retain(v87);
  sub_100006F58(v144);
  sub_100006F58(&v147);
  swift_release(v87);
  sub_100006F58(v149);
  if ((swift_isUniquelyReferenced_nonNull_native(v51) & 1) == 0)
    v51 = sub_100133FA4(0, *((_QWORD *)v51 + 2) + 1, 1, v51);
  v111 = *((_QWORD *)v51 + 2);
  v110 = *((_QWORD *)v51 + 3);
  v112 = v143;
  if (v111 >= v110 >> 1)
    v51 = sub_100133FA4((char *)(v110 > 1), v111 + 1, 1, v51);
  *((_QWORD *)v51 + 2) = v111 + 1;
  v113 = &v51[16 * v111];
  *((_QWORD *)v113 + 4) = v99;
  *((_QWORD *)v113 + 5) = &off_10026CC68;
  if (qword_10028AEE0 != -1)
    swift_once(&qword_10028AEE0, sub_10018F828);
  v114 = qword_1002A8BF8;
  v115 = *(_QWORD *)(qword_1002A8BF8 + OBJC_IVAR____TtC13appleaccountd17PushHelperService_topics);
  *(_QWORD *)(qword_1002A8BF8 + OBJC_IVAR____TtC13appleaccountd17PushHelperService_topics) = &off_10025E4C0;
  v116 = swift_bridgeObjectRelease(v115);
  if (!*(_QWORD *)(v114 + OBJC_IVAR____TtC13appleaccountd17PushHelperService_connection))
  {
    v117 = Logger.logObject.getter(v116);
    v119 = static os_log_type_t.default.getter(v118);
    if (os_log_type_enabled(v117, v119))
    {
      v120 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v120 = 0;
      _os_log_impl((void *)&_mh_execute_header, v117, v119, "Starting a new APS Connection", v120, 2u);
      swift_slowDealloc(v120, -1, -1);
    }

    sub_1001909AC();
  }
  sub_10018F854((uint64_t)v51);
  v121 = swift_bridgeObjectRelease(v51);
  v122 = Logger.logObject.getter(v121);
  v123 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v122, v123))
  {
    v124 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v124 = 0;
    _os_log_impl((void *)&_mh_execute_header, v122, v123, "Starting Cloud Sync", v124, 2u);
    swift_slowDealloc(v124, -1, -1);
  }

  v126 = Logger.logObject.getter(v125);
  v127 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v126, v127))
  {
    v128 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v128 = 0;
    _os_log_impl((void *)&_mh_execute_header, v126, v127, "Custodian/Inheritance is enabled", v128, 2u);
    swift_slowDealloc(v128, -1, -1);
  }

  sub_100006CA4(v112 + OBJC_IVAR____TtC13appleaccountd17ConnectionManager_healthScheduler, (uint64_t)v149);
  v129 = v150;
  v130 = v151;
  sub_10000732C(v149, v150);
  ((void (*)(uint64_t, _UNKNOWN **))v130[1])(v129, v130);
  sub_100006F58(v149);
  v131 = v139;
  v132 = v140;
  v133 = v141;
  (*(void (**)(char *, uint64_t, uint64_t))(v140 + 16))(v139, v112 + OBJC_IVAR____TtC13appleaccountd17ConnectionManager__syncManager, v141);
  Dependency.wrappedValue.getter(v149, v133);
  (*(void (**)(char *, uint64_t))(v132 + 8))(v131, v133);
  sub_10000732C(v149, v150);
  sub_10011E894(3);
  sub_100006F58(v149);
  objc_msgSend(*(id *)(v112 + OBJC_IVAR____TtC13appleaccountd17ConnectionManager_daemonManager), "startup");
  v134 = *(_QWORD *)(v112 + OBJC_IVAR____TtC13appleaccountd17ConnectionManager_appleIDAvailabilityScheduler);
  swift_retain(v134);
  sub_10000FA38();
  swift_release(v138);
  return swift_release(v134);
}

void sub_100168920(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100294A60)
  {
    v2 = sub_10000D908(&qword_10028E2A0);
    v3 = type metadata accessor for Dependency(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100294A60);
  }
}

uint64_t sub_100168978(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  *(_QWORD *)(v4 + 24) = a4;
  return swift_task_switch(sub_100168990, 0, 0);
}

uint64_t sub_100168990()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = *(_QWORD *)(v0[3] + OBJC_IVAR____TtC13appleaccountd17ConnectionManager_identityContactsNotificationHandler);
  v0[4] = v1;
  v2 = AAIdentityServiceAppleAccount;
  v3 = dword_10028DA6C;
  swift_retain(v1);
  v4 = (_QWORD *)swift_task_alloc(v3);
  v0[5] = v4;
  *v4 = v0;
  v4[1] = sub_100168A0C;
  return sub_10006BE14(v2);
}

uint64_t sub_100168A0C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 40);
  *(_QWORD *)(*v1 + 48) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_100168B54;
  }
  else
  {
    swift_release(*(_QWORD *)(v2 + 32));
    v4 = sub_100168A78;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100168A78()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;

  if (qword_10028ADB0 != -1)
    swift_once(&qword_10028ADB0, sub_100046CC8);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100005288(v1, (uint64_t)qword_1002A8990);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Updated Apple Account identity with data from the me card", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100168B54()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  BOOL v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  swift_release(*(_QWORD *)(v0 + 32));
  if (qword_10028ADB0 != -1)
    swift_once(&qword_10028ADB0, sub_100046CC8);
  v1 = *(_QWORD *)(v0 + 48);
  v2 = type metadata accessor for Logger(0);
  sub_100005288(v2, (uint64_t)qword_1002A8990);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 48);
  if (v6)
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v8 = 138412290;
    swift_errorRetain(v7);
    v10 = _swift_stdlib_bridgeErrorToNSError(v7);
    *(_QWORD *)(v0 + 16) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24);
    *v9 = v10;
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Unable to update Apple Account identity with data from the me card: %@", v8, 0xCu);
    v11 = sub_1000080B4((uint64_t *)&unk_10028BC20);
    swift_arrayDestroy(v9, 1, v11);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    swift_errorRelease(v7);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 48));
    swift_errorRelease(v7);
    swift_errorRelease(v7);

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100168D28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t ObjectType;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD v23[4];

  v6 = sub_1000080B4((uint64_t *)&unk_100294B20);
  __chkstk_darwin(v6, v7);
  v9 = (char *)v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10016A19C(a1, (uint64_t)v9);
  v10 = type metadata accessor for TaskPriority(0);
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    sub_100004934((uint64_t)v9, (uint64_t *)&unk_100294B20);
    v12 = 4096;
    v13 = *(_QWORD *)(a3 + 16);
    if (v13)
    {
LABEL_3:
      v14 = *(_QWORD *)(a3 + 24);
      ObjectType = swift_getObjectType(v13);
      swift_unknownObjectRetain(v13);
      v16 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v14);
      v18 = v17;
      swift_unknownObjectRelease(v13);
      goto LABEL_6;
    }
  }
  else
  {
    v19 = TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v9, v10);
    v12 = v19 | 0x1000;
    v13 = *(_QWORD *)(a3 + 16);
    if (v13)
      goto LABEL_3;
  }
  v16 = 0;
  v18 = 0;
LABEL_6:
  v20 = swift_allocObject(&unk_10026B238, 32, 7);
  *(_QWORD *)(v20 + 16) = a2;
  *(_QWORD *)(v20 + 24) = a3;
  if (v18 | v16)
  {
    v23[0] = 0;
    v23[1] = 0;
    v21 = v23;
    v23[2] = v16;
    v23[3] = v18;
  }
  else
  {
    v21 = 0;
  }
  return swift_task_create(v12, v21, (char *)&type metadata for () + 8, &unk_100294B40, v20);
}

_QWORD *sub_100168EB8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v28[3];
  uint64_t v29;
  _UNKNOWN **v30;
  _QWORD v31[3];
  uint64_t v32;
  _UNKNOWN **v33;
  _QWORD v34[5];

  v6 = *a3;
  v7 = type metadata accessor for DaemonAccountStore();
  v34[3] = v7;
  v34[4] = &off_100261290;
  v34[0] = a1;
  v8 = type metadata accessor for WalrusPCSAuthRequestProvider(0);
  v32 = v8;
  v33 = &off_10026D0B8;
  v31[0] = a2;
  v29 = v6;
  v30 = &off_10026EB98;
  v28[0] = a3;
  v9 = type metadata accessor for WalrusPushServiceDelegate();
  v10 = (_QWORD *)swift_allocObject(v9, 136, 7);
  v11 = sub_1000067AC((uint64_t)v34, v7);
  __chkstk_darwin(v11, v11);
  v13 = (_QWORD *)((char *)&v28[-1] - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v14 + 16))(v13);
  v15 = sub_1000067AC((uint64_t)v31, v32);
  __chkstk_darwin(v15, v15);
  v17 = (_QWORD *)((char *)&v28[-1] - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v18 + 16))(v17);
  v19 = sub_1000067AC((uint64_t)v28, v29);
  __chkstk_darwin(v19, v19);
  v21 = (_QWORD *)((char *)&v28[-1] - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v22 + 16))(v21);
  v23 = *v13;
  v24 = *v17;
  v25 = *v21;
  v10[5] = v7;
  v10[6] = &off_100261290;
  v10[7] = v24;
  v10[2] = v23;
  v10[10] = v8;
  v10[11] = &off_10026D0B8;
  v10[15] = v6;
  v10[16] = &off_10026EB98;
  v10[12] = v25;
  sub_100006F58(v28);
  sub_100006F58(v31);
  sub_100006F58(v34);
  return v10;
}

uint64_t sub_10016909C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD v8[3];
  uint64_t v9;
  _UNKNOWN **v10;

  v9 = type metadata accessor for IdentityDaemonContainer();
  v10 = &off_10026B460;
  v8[0] = a1;
  sub_100006CA4((uint64_t)v8, a2 + 16);
  v4 = *(_QWORD *)(*sub_10000732C(v8, v9) + 136);
  *(_QWORD *)(a2 + 56) = v4;
  v5 = sub_10000732C(v8, v9);
  sub_100006CA4(*v5 + 56, a2 + 64);
  v6 = sub_10000732C(v8, v9);
  sub_100006CA4(*v6 + 96, a2 + 104);
  swift_unknownObjectRetain(v4);
  sub_100006F58(v8);
  return a2;
}

_QWORD *sub_10016914C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v25[5];
  _QWORD v26[3];
  uint64_t v27;
  _UNKNOWN **v28;
  _QWORD v29[5];

  v4 = type metadata accessor for InheritanceStorageController(0);
  v29[3] = v4;
  v29[4] = &off_100266030;
  v29[0] = a1;
  v5 = type metadata accessor for DaemonFamilyRequester();
  v27 = v5;
  v28 = &off_10026DF80;
  v26[0] = a2;
  v6 = type metadata accessor for InheritanceFamilyManager();
  v7 = (_QWORD *)swift_allocObject(v6, 96, 7);
  v8 = sub_1000067AC((uint64_t)v29, v4);
  __chkstk_darwin(v8, v8);
  v10 = (_QWORD *)((char *)&v25[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v11 + 16))(v10);
  v12 = sub_1000067AC((uint64_t)v26, v27);
  __chkstk_darwin(v12, v12);
  v14 = (_QWORD *)((char *)&v25[-1] - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v15 + 16))(v14);
  v16 = *v10;
  v17 = *v14;
  v7[10] = v4;
  v7[11] = &off_100266030;
  v7[7] = v16;
  v25[3] = v5;
  v25[4] = &off_10026DF80;
  v25[0] = v17;
  v18 = sub_1000067AC((uint64_t)v25, v5);
  __chkstk_darwin(v18, v18);
  v20 = (_QWORD *)((char *)&v25[-1] - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v21 + 16))(v20);
  v22 = *v20;
  v7[5] = v5;
  v7[6] = &off_10026DF80;
  v7[2] = v22;
  sub_100006F58(v25);
  sub_100006F58(v26);
  sub_100006F58(v29);
  return v7;
}

id sub_100169304(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  id v12;
  objc_super v14;
  _QWORD v15[5];
  _QWORD v16[5];
  _QWORD v17[5];
  _QWORD v18[5];
  _QWORD v19[5];

  v19[3] = type metadata accessor for DaemonAccountStore();
  v19[4] = &off_100261290;
  v19[0] = a1;
  v18[3] = type metadata accessor for InheritanceInvitationHandler(0);
  v18[4] = &off_10026E810;
  v18[0] = a2;
  v17[3] = type metadata accessor for InheritanceInvitationResponseHandler();
  v17[4] = &off_1002692D8;
  v17[0] = a3;
  v16[3] = type metadata accessor for InheritanceAccessKeyMessageHandler();
  v16[4] = &off_10026B0D8;
  v16[0] = a4;
  v15[3] = type metadata accessor for BeneficiaryRemovedMessageHandler();
  v15[4] = &off_10026F6A0;
  v15[0] = a5;
  sub_100006CA4((uint64_t)v19, (uint64_t)a6 + OBJC_IVAR____TtC13appleaccountd27InheritanceMessageProcessor_accountStore);
  sub_100006CA4((uint64_t)v18, (uint64_t)a6 + OBJC_IVAR____TtC13appleaccountd27InheritanceMessageProcessor_invitationHandler);
  sub_100006CA4((uint64_t)v17, (uint64_t)a6 + OBJC_IVAR____TtC13appleaccountd27InheritanceMessageProcessor_invitationResponseHandler);
  sub_100006CA4((uint64_t)v16, (uint64_t)a6 + OBJC_IVAR____TtC13appleaccountd27InheritanceMessageProcessor_accessKeyMessageHandler);
  sub_100006CA4((uint64_t)v15, (uint64_t)a6 + OBJC_IVAR____TtC13appleaccountd27InheritanceMessageProcessor_beneficiaryRemovedMessageHandler);
  v14.receiver = a6;
  v14.super_class = (Class)type metadata accessor for InheritanceMessageProcessor();
  v12 = objc_msgSendSuper2(&v14, "init");
  sub_100006F58(v15);
  sub_100006F58(v16);
  sub_100006F58(v17);
  sub_100006F58(v18);
  sub_100006F58(v19);
  return v12;
}

_QWORD *sub_10016947C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v28[3];
  uint64_t v29;
  _UNKNOWN **v30;
  _QWORD v31[3];
  uint64_t v32;
  _UNKNOWN **v33;
  _QWORD v34[5];

  v6 = *a3;
  v7 = type metadata accessor for InheritanceStorageController(0);
  v34[3] = v7;
  v34[4] = &off_100266030;
  v34[0] = a1;
  v8 = type metadata accessor for InheritanceSetupMessenger();
  v32 = v8;
  v33 = &off_10026A770;
  v31[0] = a2;
  v29 = v6;
  v30 = &off_100262440;
  v28[0] = a3;
  v9 = type metadata accessor for BeneficiaryAcceptedStatusHandler();
  v10 = (_QWORD *)swift_allocObject(v9, 136, 7);
  v11 = sub_1000067AC((uint64_t)v34, v7);
  __chkstk_darwin(v11, v11);
  v13 = (_QWORD *)((char *)&v28[-1] - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v14 + 16))(v13);
  v15 = sub_1000067AC((uint64_t)v31, v32);
  __chkstk_darwin(v15, v15);
  v17 = (_QWORD *)((char *)&v28[-1] - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v18 + 16))(v17);
  v19 = sub_1000067AC((uint64_t)v28, v29);
  __chkstk_darwin(v19, v19);
  v21 = (_QWORD *)((char *)&v28[-1] - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v22 + 16))(v21);
  v23 = *v13;
  v24 = *v17;
  v25 = *v21;
  v10[5] = v7;
  v10[6] = &off_100266030;
  v10[7] = v24;
  v10[2] = v23;
  v10[10] = v8;
  v10[11] = &off_10026A770;
  v10[15] = v6;
  v10[16] = &off_100262440;
  v10[12] = v25;
  sub_100006F58(v28);
  sub_100006F58(v31);
  sub_100006F58(v34);
  return v10;
}

_QWORD *sub_100169660(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v28[3];
  uint64_t v29;
  _UNKNOWN **v30;
  _QWORD v31[3];
  uint64_t v32;
  _UNKNOWN **v33;
  _QWORD v34[5];

  v6 = *a3;
  v7 = type metadata accessor for InheritanceStorageController(0);
  v34[3] = v7;
  v34[4] = &off_100266030;
  v34[0] = a1;
  v8 = type metadata accessor for InheritanceCleanupController(0);
  v32 = v8;
  v33 = &off_10026C160;
  v31[0] = a2;
  v29 = v6;
  v30 = &off_10026EB98;
  v28[0] = a3;
  v9 = type metadata accessor for BeneficiaryDeclinedStatusHandler();
  v10 = (_QWORD *)swift_allocObject(v9, 136, 7);
  v11 = sub_1000067AC((uint64_t)v34, v7);
  __chkstk_darwin(v11, v11);
  v13 = (_QWORD *)((char *)&v28[-1] - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v14 + 16))(v13);
  v15 = sub_1000067AC((uint64_t)v31, v32);
  __chkstk_darwin(v15, v15);
  v17 = (_QWORD *)((char *)&v28[-1] - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v18 + 16))(v17);
  v19 = sub_1000067AC((uint64_t)v28, v29);
  __chkstk_darwin(v19, v19);
  v21 = (_QWORD *)((char *)&v28[-1] - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v22 + 16))(v21);
  v23 = *v13;
  v24 = *v17;
  v25 = *v21;
  v10[5] = v7;
  v10[6] = &off_100266030;
  v10[7] = v24;
  v10[2] = v23;
  v10[10] = v8;
  v10[11] = &off_10026C160;
  v10[15] = v6;
  v10[16] = &off_10026EB98;
  v10[12] = v25;
  sub_100006F58(v28);
  sub_100006F58(v31);
  sub_100006F58(v34);
  return v10;
}

uint64_t sub_100169844(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v26[3];
  uint64_t v27;
  _UNKNOWN **v28;
  _QWORD v29[3];
  uint64_t v30;
  _UNKNOWN **v31;
  _QWORD v32[3];
  uint64_t v33;
  _UNKNOWN **v34;

  v8 = *a4;
  v33 = type metadata accessor for InheritanceStorageController(0);
  v34 = &off_100266030;
  v32[0] = a1;
  v30 = type metadata accessor for InheritanceSetupMessenger();
  v31 = &off_10026A770;
  v29[0] = a2;
  v27 = v8;
  v28 = &off_100261358;
  v26[0] = a4;
  v9 = type metadata accessor for InheritanceInvitationHandler(0);
  v10 = swift_allocObject(v9, *(unsigned int *)(v9 + 48), *(unsigned __int16 *)(v9 + 52));
  v11 = sub_1000067AC((uint64_t)v32, v33);
  __chkstk_darwin(v11, v11);
  v13 = (_QWORD *)((char *)&v26[-1] - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v14 + 16))(v13);
  v15 = sub_1000067AC((uint64_t)v29, v30);
  __chkstk_darwin(v15, v15);
  v17 = (_QWORD *)((char *)&v26[-1] - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v18 + 16))(v17);
  v19 = sub_1000067AC((uint64_t)v26, v27);
  __chkstk_darwin(v19, v19);
  v21 = (_QWORD *)((char *)&v26[-1] - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v22 + 16))(v21);
  v23 = sub_100169E9C(*v13, *v17, a3, *v21, v10);
  sub_100006F58(v26);
  sub_100006F58(v29);
  sub_100006F58(v32);
  return v23;
}

_QWORD *sub_100169A08(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v28[3];
  uint64_t v29;
  _UNKNOWN **v30;
  _QWORD v31[3];
  uint64_t v32;
  _UNKNOWN **v33;
  _QWORD v34[5];

  v6 = *a3;
  v7 = type metadata accessor for InheritanceCloudSharingController();
  v34[3] = v7;
  v34[4] = &off_100262440;
  v34[0] = a1;
  v8 = type metadata accessor for InheritanceStorageController(0);
  v32 = v8;
  v33 = &off_100266030;
  v31[0] = a2;
  v29 = v6;
  v30 = &off_10026EB98;
  v28[0] = a3;
  v9 = type metadata accessor for InheritanceAccessKeyMessageHandler();
  v10 = (_QWORD *)swift_allocObject(v9, 136, 7);
  v11 = sub_1000067AC((uint64_t)v34, v7);
  __chkstk_darwin(v11, v11);
  v13 = (_QWORD *)((char *)&v28[-1] - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v14 + 16))(v13);
  v15 = sub_1000067AC((uint64_t)v31, v32);
  __chkstk_darwin(v15, v15);
  v17 = (_QWORD *)((char *)&v28[-1] - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v18 + 16))(v17);
  v19 = sub_1000067AC((uint64_t)v28, v29);
  __chkstk_darwin(v19, v19);
  v21 = (_QWORD *)((char *)&v28[-1] - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v22 + 16))(v21);
  v23 = *v13;
  v24 = *v17;
  v25 = *v21;
  v10[5] = v7;
  v10[6] = &off_100262440;
  v10[7] = v24;
  v10[2] = v23;
  v10[10] = v8;
  v10[11] = &off_100266030;
  v10[15] = v6;
  v10[16] = &off_10026EB98;
  v10[12] = v25;
  sub_100006F58(v28);
  sub_100006F58(v31);
  sub_100006F58(v34);
  return v10;
}

id sub_100169BEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  id v32;
  _QWORD v35[3];
  uint64_t v36;
  _UNKNOWN **v37;
  _QWORD v38[3];
  uint64_t v39;
  _UNKNOWN **v40;
  _QWORD v41[3];
  uint64_t v42;
  _UNKNOWN **v43;
  _QWORD v44[3];
  uint64_t v45;
  _UNKNOWN **v46;
  _QWORD v47[3];
  uint64_t v48;
  _UNKNOWN **v49;

  v10 = *a5;
  v48 = type metadata accessor for DaemonAccountStore();
  v49 = &off_100261290;
  v47[0] = a1;
  v45 = type metadata accessor for InheritanceInvitationHandler(0);
  v46 = &off_10026E810;
  v44[0] = a2;
  v42 = type metadata accessor for InheritanceInvitationResponseHandler();
  v43 = &off_1002692D8;
  v41[0] = a3;
  v39 = type metadata accessor for InheritanceAccessKeyMessageHandler();
  v40 = &off_10026B0D8;
  v38[0] = a4;
  v36 = v10;
  v37 = &off_10026F6A0;
  v35[0] = a5;
  v11 = objc_allocWithZone((Class)type metadata accessor for InheritanceMessageProcessor());
  v12 = sub_1000067AC((uint64_t)v47, v48);
  __chkstk_darwin(v12, v12);
  v14 = (_QWORD *)((char *)&v35[-1] - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v15 + 16))(v14);
  v16 = sub_1000067AC((uint64_t)v44, v45);
  __chkstk_darwin(v16, v16);
  v18 = (_QWORD *)((char *)&v35[-1] - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v19 + 16))(v18);
  v20 = sub_1000067AC((uint64_t)v41, v42);
  __chkstk_darwin(v20, v20);
  v22 = (_QWORD *)((char *)&v35[-1] - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v23 + 16))(v22);
  v24 = sub_1000067AC((uint64_t)v38, v39);
  __chkstk_darwin(v24, v24);
  v26 = (_QWORD *)((char *)&v35[-1] - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v27 + 16))(v26);
  v28 = sub_1000067AC((uint64_t)v35, v36);
  __chkstk_darwin(v28, v28);
  v30 = (_QWORD *)((char *)&v35[-1] - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v31 + 16))(v30);
  v32 = sub_100169304(*v14, *v18, *v22, *v26, *v30, v11);
  sub_100006F58(v35);
  sub_100006F58(v38);
  sub_100006F58(v41);
  sub_100006F58(v44);
  sub_100006F58(v47);
  return v32;
}

uint64_t sub_100169E9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  __int128 v12;
  uint64_t v13;
  _UNKNOWN **v14;
  __int128 v15;
  uint64_t v16;
  _UNKNOWN **v17;
  __int128 v18;
  uint64_t v19;
  _UNKNOWN **v20;
  __int128 v21;
  uint64_t v22;
  _UNKNOWN **v23;

  v22 = type metadata accessor for InheritanceFamilyManager();
  v23 = &off_10026CFB0;
  *(_QWORD *)&v21 = a3;
  v19 = type metadata accessor for InheritanceStorageController(0);
  v20 = &off_100266030;
  *(_QWORD *)&v18 = a1;
  v16 = type metadata accessor for InheritanceSetupMessenger();
  v17 = &off_10026A770;
  *(_QWORD *)&v15 = a2;
  v13 = type metadata accessor for DaemonMessageUtil();
  v14 = &off_100261358;
  *(_QWORD *)&v12 = a4;
  v10 = sub_1000080B4(&qword_10028C860);
  Dependency.init(dependencyId:config:)(0, 0, 0, v10);
  sub_10003A190(&v18, a5 + OBJC_IVAR____TtC13appleaccountd28InheritanceInvitationHandler_storageController);
  sub_10003A190(&v15, a5 + OBJC_IVAR____TtC13appleaccountd28InheritanceInvitationHandler_messenger);
  sub_10003A190(&v21, a5 + OBJC_IVAR____TtC13appleaccountd28InheritanceInvitationHandler_familyManager);
  sub_10003A190(&v12, a5 + OBJC_IVAR____TtC13appleaccountd28InheritanceInvitationHandler_messageUtil);
  return a5;
}

uint64_t sub_100169FC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD v12[3];
  uint64_t v13;
  _UNKNOWN **v14;

  v13 = type metadata accessor for IdentityDaemonContainer();
  v14 = &off_10026B460;
  v12[0] = a1;
  v6 = sub_1000080B4(&qword_100294AE8);
  Dependency.init(dependencyId:config:)(0, 0, 0, v6);
  sub_100006CA4((uint64_t)v12, a3 + 16);
  *(_QWORD *)(a3 + 56) = a2;
  v7 = sub_10000732C(v12, v13);
  sub_100006CA4(*v7 + 56, a3 + 64);
  v8 = sub_10000732C(v12, v13);
  sub_100006CA4(*v8 + 96, a3 + 104);
  v9 = sub_10000732C(v12, v13);
  sub_100006CA4(*v9 + 16, a3 + 144);
  v10 = *(_QWORD *)(*sub_10000732C(v12, v13) + 136);
  *(_QWORD *)(a3 + 184) = v10;
  swift_unknownObjectRetain(v10);
  sub_100006F58(v12);
  return a3;
}

unint64_t sub_10016A0CC()
{
  unint64_t result;

  result = qword_100294B18;
  if (!qword_100294B18)
  {
    result = swift_getWitnessTable(&unk_10021B9E0, &type metadata for AAFeatureFlags);
    atomic_store(result, (unint64_t *)&qword_100294B18);
  }
  return result;
}

uint64_t sub_10016A110()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10016A13C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = (_QWORD *)swift_task_alloc(dword_100294B34);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_1000224D8;
  v3[3] = v2;
  return swift_task_switch(sub_100168990, 0, 0);
}

uint64_t sub_10016A19C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000080B4((uint64_t *)&unk_100294B20);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10016A1E4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10016A208@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, unsigned __int8 a5@<W4>, uint64_t a6@<X5>, int a7@<W6>, uint64_t a8@<X8>)
{
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t, uint64_t);
  int *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t *v23;
  void (*v24)(char *, uint64_t, uint64_t);
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t *v30;
  int *v31;
  uint64_t v32;
  char v33;
  uint64_t result;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  int v39;
  uint64_t v40;

  v39 = a7;
  v40 = a6;
  v37 = a3;
  v38 = a4;
  v11 = a5;
  v12 = type metadata accessor for Date(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12, v14);
  v16 = (char *)&v37 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for UUID(0);
  v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 16);
  v18(a8, a1, v17);
  v19 = (int *)type metadata accessor for CustodianHealthRecord(0);
  v18(a8 + v19[5], a1 + v19[5], v17);
  if (v11 == 2 || ((((v11 & 1) == 0) ^ *(unsigned __int8 *)(a1 + v19[9])) & 1) != 0)
  {
    v20 = v19[8];
    v21 = *(_QWORD *)(a1 + v20);
    v22 = *(_QWORD *)(a1 + v20 + 8);
    v23 = (uint64_t *)(a8 + v20);
    *v23 = v21;
    v23[1] = v22;
    sub_10000F450(v21, v22);
  }
  else
  {
    *(_OWORD *)(a8 + v19[8]) = xmmword_100218E90;
  }
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(a2, 1, v12) == 1)
  {
    sub_100004934(a2, &qword_10028E810);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(a8 + v19[6], a1 + v19[6], v12);
  }
  else
  {
    v24 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 32);
    v24(v16, a2, v12);
    v24((char *)(a8 + v19[6]), (uint64_t)v16, v12);
  }
  v25 = v38;
  if (v11 == 2)
    *(_BYTE *)(a8 + v19[9]) = *(_BYTE *)(a1 + v19[9]);
  else
    *(_BYTE *)(a8 + v19[9]) = v11 & 1;
  v26 = v40;
  v27 = v19[7];
  if (v25 >> 60 != 15)
  {
    v35 = (_QWORD *)(a8 + v27);
    *v35 = v37;
    v35[1] = v25;
    if ((v39 & 1) != 0)
      goto LABEL_13;
LABEL_15:
    result = sub_10016C6B8(a1);
    v33 = 0;
    v31 = v19 + 10;
    goto LABEL_16;
  }
  v28 = *(_QWORD *)(a1 + v27);
  v29 = *(_QWORD *)(a1 + v27 + 8);
  v30 = (uint64_t *)(a8 + v27);
  *v30 = v28;
  v30[1] = v29;
  sub_100014534(v28, v29);
  if ((v39 & 1) == 0)
    goto LABEL_15;
LABEL_13:
  v32 = v19[10];
  v31 = v19 + 10;
  v26 = *(_QWORD *)(a1 + v32);
  v33 = *(_BYTE *)(a1 + v32 + 8);
  result = sub_10016C6B8(a1);
LABEL_16:
  v36 = a8 + *v31;
  *(_QWORD *)v36 = v26;
  *(_BYTE *)(v36 + 8) = v33;
  return result;
}

void sub_10016A448(void *a1@<X0>, int a2@<W1>, NSObject **a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  id v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int (*v42)(char *, uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  void (*v48)(char *, char *, uint64_t);
  id v49;
  NSString v50;
  id v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  NSObject *v56;
  NSObject *v57;
  os_log_type_t v58;
  uint8_t *v59;
  NSObject *v60;
  NSObject **v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  char *v68;
  void (*v69)(void);
  NSObject **v70;
  id v71;
  id v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int *v77;
  NSObject **v78;
  uint64_t *v79;
  void *v80;
  NSString v81;
  NSObject *v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  void (*v87)(char *, char *, uint64_t);
  char *v88;
  char *v89;
  NSString v90;
  id v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t *v105;
  NSString v106;
  NSObject *v107;
  uint64_t v108;
  void (*v109)(char *, uint64_t);
  int v110;
  uint64_t v111;
  char v112;
  char *v113;
  uint64_t v114;
  id v115;
  uint64_t v116;
  int *v117;
  char *v118;
  int v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  NSObject **v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  NSObject *v128;
  unint64_t v129;
  uint64_t v130;

  v119 = a2;
  v124 = a3;
  v4 = sub_1000080B4(&qword_10028E810);
  __chkstk_darwin(v4, v5);
  v7 = (char *)&v114 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Date(0);
  v121 = *(_QWORD *)(v8 - 8);
  v122 = v8;
  v10 = __chkstk_darwin(v8, v9);
  v118 = (char *)&v114 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10, v12);
  v120 = (char *)&v114 - v13;
  v14 = sub_1000080B4((uint64_t *)&unk_1002904F0);
  v16 = __chkstk_darwin(v14, v15);
  v18 = (char *)&v114 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16, v19);
  v21 = (char *)&v114 - v20;
  v22 = type metadata accessor for UUID(0);
  v23 = *(_QWORD *)(v22 - 8);
  v25 = __chkstk_darwin(v22, v24);
  v123 = (char *)&v114 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __chkstk_darwin(v25, v27);
  v125 = (char *)&v114 - v29;
  v30 = CKRecord.recordType.getter(v28);
  v32 = v31;
  if (v30 == 0xD000000000000015 && v31 == 0x800000010021ED60)
  {
    swift_bridgeObjectRelease(0x800000010021ED60);
  }
  else
  {
    v33 = _stringCompareWithSmolCheck(_:_:expecting:)(v30, v31, 0xD000000000000015, 0x800000010021ED60, 0);
    swift_bridgeObjectRelease(v32);
    if ((v33 & 1) == 0)
    {
LABEL_7:
      type metadata accessor for AACustodianError(0);
      v44 = v43;
      v130 = -7005;
      v45 = sub_100005014((uint64_t)&_swiftEmptyArrayStorage);
      v46 = sub_100005150((unint64_t *)&qword_10028B640, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianError, (uint64_t)&unk_100218378);
      v47 = _BridgedStoredNSError.init(_:userInfo:)(&v128, &v130, v45, v44, v46);
      swift_willThrow(v47);

      return;
    }
  }
  v34 = objc_msgSend(a1, "recordID");
  v35 = objc_msgSend(v34, "recordName");

  v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(v35);
  v126 = v23;
  v127 = v22;
  v38 = v37;

  UUID.init(uuidString:)(v36, v38);
  v39 = v38;
  v41 = v126;
  v40 = v127;
  swift_bridgeObjectRelease(v39);
  v42 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48);
  if (v42(v21, 1, v40) == 1)
  {
    sub_100004934((uint64_t)v21, (uint64_t *)&unk_1002904F0);
    goto LABEL_7;
  }
  v48 = *(void (**)(char *, char *, uint64_t))(v41 + 32);
  v48(v125, v21, v40);
  v49 = objc_msgSend(a1, "encryptedValuesByKey");
  v50 = String._bridgeToObjectiveC()();
  v51 = objc_msgSend(v49, "objectForKeyedSubscript:", v50);

  if (!v51)
    goto LABEL_12;
  v130 = (uint64_t)v51;
  v52 = sub_1000080B4(&qword_10028DB30);
  if ((swift_dynamicCast(&v128, &v130, v52, &type metadata for String, 6) & 1) == 0)
    goto LABEL_12;
  v53 = v129;
  UUID.init(uuidString:)(v128, v129);
  swift_bridgeObjectRelease(v53);
  v54 = v127;
  if (v42(v18, 1, v127) == 1)
  {
    sub_100004934((uint64_t)v18, (uint64_t *)&unk_1002904F0);
LABEL_12:
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v55 = type metadata accessor for Logger(0);
    sub_100005288(v55, (uint64_t)qword_1002A89D8);
    v56 = a1;
    v57 = Logger.logObject.getter(v56);
    v58 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v57, v58))
    {
      v59 = (uint8_t *)swift_slowAlloc(12, -1);
      v124 = (NSObject **)swift_slowAlloc(8, -1);
      *(_DWORD *)v59 = 138412290;
      v128 = v56;
      v60 = v56;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v128, &v129);
      v61 = v124;
      *v124 = v56;

      _os_log_impl((void *)&_mh_execute_header, v57, v58, "Missing CustodianID - %@", v59, 0xCu);
      v62 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v61, 1, v62);
      swift_slowDealloc(v61, -1, -1);
      swift_slowDealloc(v59, -1, -1);
    }
    else
    {

      v57 = v56;
    }

    type metadata accessor for AACustodianError(0);
    v64 = v63;
    v130 = -7005;
    v65 = sub_100005014((uint64_t)&_swiftEmptyArrayStorage);
    v66 = sub_100005150((unint64_t *)&qword_10028B640, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianError, (uint64_t)&unk_100218378);
    v67 = _BridgedStoredNSError.init(_:userInfo:)(&v128, &v130, v65, v64, v66);
    swift_willThrow(v67);
    swift_unknownObjectRelease(v49);

    (*(void (**)(char *, uint64_t))(v126 + 8))(v125, v127);
    return;
  }
  v116 = v52;
  v68 = v123;
  v48(v123, v18, v54);
  v69 = *(void (**)(void))(v126 + 16);
  v70 = v124;
  v69();
  v117 = (int *)type metadata accessor for CustodianHealthRecord(0);
  ((void (*)(char *, char *, uint64_t))v69)((char *)v70 + v117[5], v68, v54);
  v71 = objc_msgSend(objc_allocWithZone((Class)NSKeyedArchiver), "initRequiringSecureCoding:", 1);
  objc_msgSend(a1, "encodeSystemFieldsWithCoder:", v71);
  objc_msgSend(v71, "finishEncoding");
  v72 = objc_msgSend(v71, "encodedData");
  v73 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v72);
  v115 = v49;
  v74 = v73;
  v76 = v75;

  v77 = v117;
  v78 = v124;
  v79 = (uint64_t *)((char *)v124 + v117[8]);
  *v79 = v74;
  v79[1] = v76;
  v80 = v115;
  *((_BYTE *)v78 + v77[9]) = v119 & 1;
  v81 = String._bridgeToObjectiveC()();
  v82 = objc_msgSend(v80, "objectForKeyedSubscript:", v81);

  if (v82)
  {
    v128 = v82;
    v83 = v122;
    v84 = swift_dynamicCast(v7, &v128, v116, v122, 6);
    v85 = v121;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v121 + 56))(v7, v84 ^ 1u, 1, v83);
    v86 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v85 + 48))(v7, 1, v83);
    if ((_DWORD)v86 != 1)
    {
      v87 = *(void (**)(char *, char *, uint64_t))(v85 + 32);
      v88 = v120;
      v87(v120, v7, v83);
      goto LABEL_23;
    }
  }
  else
  {
    v85 = v121;
    v83 = v122;
    v86 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v121 + 56))(v7, 1, 1, v122);
  }
  v88 = v120;
  Date.init(timeIntervalSince1970:)(v86, 946713600.0);
  sub_100004934((uint64_t)v7, &qword_10028E810);
  v87 = *(void (**)(char *, char *, uint64_t))(v85 + 32);
LABEL_23:
  v89 = (char *)v78 + v117[6];
  v87(v89, v88, v83);
  v90 = String._bridgeToObjectiveC()();
  v91 = objc_msgSend(v80, "objectForKeyedSubscript:", v90);

  if (v91 && (v130 = (uint64_t)v91, (swift_dynamicCast(&v128, &v130, v116, &type metadata for Data, 6) & 1) != 0))
  {
    v92 = (uint64_t)v128;
    v93 = v129;
    sub_10000F450((uint64_t)v128, v129);
    v94 = sub_10019E16C(v92, v93);
    if (v97 == 1)
    {
      v98 = v118;
      v99 = (uint64_t *)((char *)v78 + v117[7]);
      *v99 = v92;
      v99[1] = v93;
      Date.init(timeIntervalSince1970:)(v94, 946713600.0);
      (*(void (**)(char *, char *, uint64_t))(v121 + 40))(v89, v98, v122);
    }
    else
    {
      v100 = v94;
      v101 = v97;
      v102 = v92;
      v103 = v95;
      v104 = v96;
      sub_10000F494(v102, v93);
      sub_10000F450(v100, v103);
      sub_1000C6654(v100, v103, v104, v101);
      v105 = (uint64_t *)((char *)v78 + v117[7]);
      *v105 = v100;
      v105[1] = v103;
    }
    v80 = v115;
  }
  else
  {
    *(_OWORD *)((char *)v78 + v117[7]) = xmmword_10021A7E0;
  }
  v106 = String._bridgeToObjectiveC()();
  v107 = objc_msgSend(v80, "objectForKeyedSubscript:", v106);
  swift_unknownObjectRelease(v80);

  v108 = v127;
  v109 = *(void (**)(char *, uint64_t))(v126 + 8);
  v109(v123, v127);
  v109(v125, v108);
  if (v107)
  {
    v128 = v107;
    v110 = swift_dynamicCast(&v130, &v128, v116, &type metadata for Int, 6);
    v111 = v130;
    if (!v110)
      v111 = 0;
    v112 = v110 ^ 1;
  }
  else
  {
    v111 = 0;
    v112 = 1;
  }
  v113 = (char *)v78 + v117[10];
  *(_QWORD *)v113 = v111;
  v113[8] = v112;
}

void sub_10016AE40(id *a1)
{
  unint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  unint64_t v33;
  uint64_t v34;
  unsigned int (*v35)(uint64_t, uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  char *v38;
  unint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char v45;
  void (*v46)(char *, uint64_t);
  unint64_t v47;
  unint64_t v48;
  NSString v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __n128 v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  char v60;
  char v61;
  __n128 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  void (*v68)(char *, unint64_t, uint64_t);
  char *v69;
  char *v70;
  uint64_t ObjectType;
  int *v72;
  unint64_t v73;
  _QWORD v74[2];
  __int128 v75;
  __int128 v76;
  void *v77;

  v3 = type metadata accessor for Date(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  v67 = (char *)&v67 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = (char *)sub_1000080B4(&qword_100290500);
  __chkstk_darwin(v70, v7);
  v9 = (char *)&v67 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1000080B4(&qword_10028E810);
  v12 = __chkstk_darwin(v10, v11);
  v69 = (char *)&v67 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v12, v14);
  v17 = (char *)&v67 - v16;
  __chkstk_darwin(v15, v18);
  v20 = (char **)((char *)&v67 - v19);
  v21 = objc_msgSend(*a1, "encryptedValuesByKey");
  ObjectType = swift_getObjectType(v21);
  CKRecordKeyValueSetting.subscript.getter(&v75, 0x6169646F74737563, 0xEB0000000044496ELL);
  v22 = *((_QWORD *)&v75 + 1);
  v23 = v75;
  v72 = (int *)type metadata accessor for CustodianHealthRecord(0);
  v73 = v1;
  v24 = UUID.uuidString.getter(v72);
  v26 = v25;
  if (!v22)
  {
    v27 = swift_bridgeObjectRelease(v25);
    v28 = ObjectType;
LABEL_7:
    v30 = UUID.uuidString.getter(v27);
    *((_QWORD *)&v76 + 1) = &type metadata for String;
    v77 = &protocol witness table for String;
    *(_QWORD *)&v75 = v30;
    *((_QWORD *)&v75 + 1) = v31;
    CKRecordKeyValueSetting.subscript.setter(&v75, 0x6169646F74737563, 0xEB0000000044496ELL, v28);
    goto LABEL_8;
  }
  if (v23 == v24 && v22 == v25)
  {
    swift_bridgeObjectRelease(v22);
    swift_bridgeObjectRelease(v26);
    goto LABEL_8;
  }
  v29 = _stringCompareWithSmolCheck(_:_:expecting:)(v23, v22, v24, v25, 0);
  swift_bridgeObjectRelease(v22);
  v27 = swift_bridgeObjectRelease(v26);
  v28 = ObjectType;
  if ((v29 & 1) == 0)
    goto LABEL_7;
LABEL_8:
  v32 = "ntd25RecoveryFactorsController";
  CKRecordKeyValueSetting.subscript.getter(v20, 0xD000000000000017, 0x800000010020C0E0);
  v33 = v73 + v72[6];
  v68 = *(void (**)(char *, unint64_t, uint64_t))(v4 + 16);
  v68(v17, v33, v3);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v4 + 56))(v17, 0, 1, v3);
  v34 = (uint64_t)&v9[*((int *)v70 + 12)];
  sub_1000C6684((uint64_t)v20, (uint64_t)v9);
  sub_1000C6684((uint64_t)v17, v34);
  v35 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  if (v35((uint64_t)v9, 1, v3) == 1)
  {
    sub_100004934((uint64_t)v17, &qword_10028E810);
    sub_100004934((uint64_t)v20, &qword_10028E810);
    if (v35(v34, 1, v3) == 1)
    {
      sub_100004934((uint64_t)v9, &qword_10028E810);
      v36 = ObjectType;
      goto LABEL_15;
    }
    goto LABEL_13;
  }
  v70 = "ntd25RecoveryFactorsController";
  v37 = (uint64_t)v69;
  sub_1000C6684((uint64_t)v9, (uint64_t)v69);
  if (v35(v34, 1, v3) == 1)
  {
    sub_100004934((uint64_t)v17, &qword_10028E810);
    sub_100004934((uint64_t)v20, &qword_10028E810);
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v37, v3);
    v32 = v70;
LABEL_13:
    sub_100004934((uint64_t)v9, &qword_100290500);
    v36 = ObjectType;
LABEL_14:
    *((_QWORD *)&v76 + 1) = v3;
    v77 = &protocol witness table for Date;
    v38 = (char *)sub_1000B9D04(&v75);
    v68(v38, v33, v3);
    CKRecordKeyValueSetting.subscript.setter(&v75, 0xD000000000000017, (unint64_t)v32 | 0x8000000000000000, v36);
    goto LABEL_15;
  }
  v42 = v37;
  v43 = v67;
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 32))(v67, v34, v3);
  v44 = sub_100005150(&qword_100290510, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  v45 = dispatch thunk of static Equatable.== infix(_:_:)(v42, v43, v3, v44);
  v46 = *(void (**)(char *, uint64_t))(v4 + 8);
  v46(v43, v3);
  sub_100004934((uint64_t)v17, &qword_10028E810);
  sub_100004934((uint64_t)v20, &qword_10028E810);
  v46(v69, v3);
  sub_100004934((uint64_t)v9, &qword_10028E810);
  v32 = v70;
  v36 = ObjectType;
  if ((v45 & 1) == 0)
    goto LABEL_14;
LABEL_15:
  CKRecordKeyValueSetting.subscript.getter(&v75, 0xD000000000000012, 0x800000010020B690);
  v39 = v73 + v72[10];
  v40 = *(_QWORD *)v39;
  v41 = *(_BYTE *)(v39 + 8);
  if ((BYTE8(v75) & 1) == 0)
  {
    if ((v41 & 1) != 0)
    {
      v77 = 0;
      v75 = 0u;
      v76 = 0u;
LABEL_24:
      CKRecordKeyValueSetting.subscript.setter(&v75, 0xD000000000000012, 0x800000010020B690, v36);
      goto LABEL_25;
    }
    if ((_QWORD)v75 == v40)
      goto LABEL_25;
LABEL_23:
    *((_QWORD *)&v76 + 1) = &type metadata for Int;
    v77 = &protocol witness table for Int;
    *(_QWORD *)&v75 = v40;
    goto LABEL_24;
  }
  if ((v41 & 1) == 0)
    goto LABEL_23;
LABEL_25:
  v47 = v73 + v72[7];
  v48 = *(_QWORD *)(v47 + 8);
  if (v48 >> 60 == 15)
  {
    v49 = String._bridgeToObjectiveC()();
    objc_msgSend(v21, "setObject:forKeyedSubscript:", 0, v49);
    swift_unknownObjectRelease(v21);

    return;
  }
  v50 = *(_QWORD *)v47;
  sub_100014534(*(_QWORD *)v47, *(_QWORD *)(v47 + 8));
  sub_10000F450(v50, v48);
  CKRecordKeyValueSetting.subscript.getter(v74, 0x797265766F636572, 0xEF6873614879654BLL);
  v52 = v74[0];
  v51 = v74[1];
  v53 = type metadata accessor for JSONEncoder(0);
  swift_allocObject(v53, *(unsigned int *)(v53 + 48), *(unsigned __int16 *)(v53 + 52));
  v55 = JSONEncoder.init()(v54);
  *(_QWORD *)&v75 = v50;
  *((_QWORD *)&v75 + 1) = v48;
  v56 = sub_1000C66CC();
  v76 = 0uLL;
  v73 = v56;
  v57 = dispatch thunk of JSONEncoder.encode<A>(_:)(&v75, &type metadata for TrustedContactKeyIntegrity, v56);
  v59 = v58;
  swift_release(v55);
  if (v51 >> 60 == 15)
  {
    sub_1000144D8(v52, v51);
    sub_1000144D8(v57, v59);
LABEL_31:
    swift_allocObject(v53, *(unsigned int *)(v53 + 48), *(unsigned __int16 *)(v53 + 52));
    v63 = JSONEncoder.init()(v62);
    *(_QWORD *)&v75 = v50;
    *((_QWORD *)&v75 + 1) = v48;
    v76 = 0uLL;
    v64 = dispatch thunk of JSONEncoder.encode<A>(_:)(&v75, &type metadata for TrustedContactKeyIntegrity, v73);
    v66 = v65;
    swift_release(v63);
    *((_QWORD *)&v76 + 1) = &type metadata for Data;
    v77 = &protocol witness table for Data;
    *(_QWORD *)&v75 = v64;
    *((_QWORD *)&v75 + 1) = v66;
    CKRecordKeyValueSetting.subscript.setter(&v75, 0x797265766F636572, 0xEF6873614879654BLL, ObjectType);
    swift_unknownObjectRelease(v21);
    sub_1000144D8(v50, v48);
    sub_10000F494(v50, v48);
    goto LABEL_32;
  }
  sub_100014534(v52, v51);
  sub_10000EA4C(v52, v51);
  v61 = v60;
  sub_10000F494(v57, v59);
  sub_1000144D8(v52, v51);
  sub_1000144D8(v52, v51);
  if ((v61 & 1) == 0)
    goto LABEL_31;
  sub_1000144D8(v50, v48);
  sub_10000F494(v50, v48);
  swift_unknownObjectRelease(v21);
LABEL_32:
  swift_bridgeObjectRelease(0);
}

uint64_t sub_10016B6B0(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10016B6E4 + 4 * byte_10021ECE0[a1]))(0x444964726F636572, 0xE800000000000000);
}

uint64_t sub_10016B6E4()
{
  return 0x6169646F74737563;
}

unint64_t sub_10016B704()
{
  return 0xD000000000000017;
}

uint64_t sub_10016B794()
{
  unsigned __int8 *v0;

  return sub_10016B6B0(*v0);
}

uint64_t sub_10016B79C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10016D210(a1, a2);
  *a3 = result;
  return result;
}

void sub_10016B7C0(_BYTE *a1@<X8>)
{
  *a1 = 7;
}

uint64_t sub_10016B7CC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10016C6F4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10016B7F4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10016C6F4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10016B81C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v31;
  void (*v32)(char *, _QWORD *, uint64_t);
  char *v33;
  _QWORD *v34;
  int *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  unint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  _QWORD *v60;
  int *v61;
  char *v62;
  char *v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  __int128 v73;
  char v74;

  v64 = a2;
  v3 = type metadata accessor for Date(0);
  v66 = *(_QWORD *)(v3 - 8);
  v67 = v3;
  v5 = __chkstk_darwin(v3, v4);
  v63 = (char *)&v59 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5, v7);
  v65 = (char *)&v59 - v8;
  v70 = type metadata accessor for UUID(0);
  v68 = *(_QWORD *)(v70 - 8);
  v10 = __chkstk_darwin(v70, v9);
  v12 = (uint64_t *)((char *)&v59 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v10, v13);
  v71 = (uint64_t *)((char *)&v59 - v14);
  v69 = sub_1000080B4(&qword_100294B68);
  v15 = *(_QWORD *)(v69 - 8);
  __chkstk_darwin(v69, v16);
  v18 = (char *)&v59 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for CustodianHealthRecord(0);
  __chkstk_darwin(v19, v20);
  v22 = (char *)&v59 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = a1[3];
  v24 = a1[4];
  sub_10000732C(a1, v23);
  v25 = sub_10016C6F4();
  v26 = v72;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for CustodianHealthRecord.CodingKeys, &type metadata for CustodianHealthRecord.CodingKeys, v25, v23, v24);
  if (v26)
    return sub_100006F58(a1);
  v60 = v12;
  v61 = (int *)v19;
  v72 = v15;
  v62 = v22;
  LOBYTE(v73) = 0;
  v27 = sub_100005150((unint64_t *)&unk_10028BBB0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v28 = v70;
  v29 = v69;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v71, v70, &v73, v69, v70, v27);
  v31 = v18;
  v32 = *(void (**)(char *, _QWORD *, uint64_t))(v68 + 32);
  v33 = v62;
  v32(v62, v71, v28);
  LOBYTE(v73) = 1;
  v34 = v60;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v60, v28, &v73, v29, v28, v27);
  v35 = v61;
  v32(&v33[v61[5]], v34, v28);
  LOBYTE(v73) = 2;
  v36 = sub_100005150((unint64_t *)&unk_100294B80, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  v37 = v65;
  v38 = v67;
  v71 = 0;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v65, v67, &v73, v29, v67, v36);
  v39 = v33;
  v40 = &v33[v35[6]];
  (*(void (**)(char *, char *, uint64_t))(v66 + 32))(&v39[v35[6]], v37, v38);
  v74 = 3;
  v41 = v39;
  v42 = sub_10000F40C();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v73, &type metadata for Data, &v74, v29, &type metadata for Data, v42);
  v65 = v40;
  *(_OWORD *)&v41[v35[8]] = v73;
  LOBYTE(v73) = 4;
  v41[v35[9]] = KeyedDecodingContainer.decode(_:forKey:)(&v73, v29) & 1;
  LOBYTE(v73) = 6;
  v43 = KeyedDecodingContainer.decode(_:forKey:)(&v73, v29);
  v44 = v65;
  v45 = &v62[v35[10]];
  *(_QWORD *)v45 = v43;
  v45[8] = 0;
  v74 = 5;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&type metadata for Data, &v74, v69, &type metadata for Data, v42);
  v46 = v31;
  v47 = v73;
  if (*((_QWORD *)&v73 + 1) >> 60 == 15)
  {
    (*(void (**)(char *, uint64_t))(v72 + 8))(v31, v69);
    v48 = (uint64_t)v62;
    *(_OWORD *)&v62[v35[7]] = v47;
  }
  else
  {
    sub_10000F450(v73, *((unint64_t *)&v73 + 1));
    v49 = sub_10019E16C(v47, *((unint64_t *)&v47 + 1));
    if (v52 == 1)
    {
      v48 = (uint64_t)v62;
      *(_OWORD *)&v62[v61[7]] = v47;
      v53 = v63;
      Date.init(timeIntervalSince1970:)(v49, 946713600.0);
      (*(void (**)(char *, uint64_t))(v72 + 8))(v46, v69);
      (*(void (**)(char *, char *, uint64_t))(v66 + 40))(v44, v53, v67);
    }
    else
    {
      v54 = v49;
      v55 = v50;
      v56 = v52;
      v57 = v51;
      (*(void (**)(char *, uint64_t))(v72 + 8))(v31, v69);
      sub_1000144D8(v47, *((unint64_t *)&v47 + 1));
      sub_10000F450(v54, v55);
      sub_1000C6654(v54, v55, v57, v56);
      v48 = (uint64_t)v62;
      v58 = (uint64_t *)&v62[v61[7]];
      *v58 = v54;
      v58[1] = v55;
    }
  }
  sub_10016C738(v48, v64);
  sub_100006F58(a1);
  return sub_10016C6B8(v48);
}

uint64_t sub_10016BEA0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __n128 v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  char v45;

  v3 = v1;
  v5 = sub_1000080B4((uint64_t *)&unk_100294B90);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a1[3];
  v11 = a1[4];
  sub_10000732C(a1, v10);
  v12 = sub_10016C6F4();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for CustodianHealthRecord.CodingKeys, &type metadata for CustodianHealthRecord.CodingKeys, v12, v10, v11);
  LOBYTE(v42) = 0;
  v13 = type metadata accessor for UUID(0);
  v14 = sub_100005150((unint64_t *)&unk_10028DC20, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v3, &v42, v5, v13, v14);
  if (!v2)
  {
    v15 = (int *)type metadata accessor for CustodianHealthRecord(0);
    v16 = v3 + v15[5];
    LOBYTE(v42) = 1;
    KeyedEncodingContainer.encode<A>(_:forKey:)(v16, &v42, v5, v13, v14);
    v17 = v3 + v15[6];
    LOBYTE(v42) = 2;
    v18 = type metadata accessor for Date(0);
    v19 = sub_100005150((unint64_t *)&unk_100294BA0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v17, &v42, v5, v18, v19);
    v42 = *(_OWORD *)(v3 + v15[8]);
    v45 = 3;
    v20 = sub_10000F4D8();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v42, &v45, v5, &type metadata for Data, v20);
    v21 = *(unsigned __int8 *)(v3 + v15[9]);
    LOBYTE(v42) = 4;
    KeyedEncodingContainer.encode(_:forKey:)(v21, &v42, v5);
    v22 = (uint64_t *)(v3 + v15[10]);
    v23 = *v22;
    LOBYTE(v22) = *((_BYTE *)v22 + 8);
    *(_QWORD *)&v42 = v23;
    BYTE8(v42) = (_BYTE)v22;
    v45 = 6;
    v24 = sub_1000080B4(&qword_100294BB0);
    v25 = sub_10016C77C();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v42, &v45, v5, v24, v25);
    v26 = (uint64_t *)(v3 + v15[7]);
    v27 = v26[1];
    if (v27 >> 60 != 15)
    {
      v28 = *v26;
      v29 = type metadata accessor for JSONEncoder(0);
      swift_allocObject(v29, *(unsigned int *)(v29 + 48), *(unsigned __int16 *)(v29 + 52));
      sub_10000F450(v28, v27);
      sub_10000F450(v28, v27);
      v31 = JSONEncoder.init()(v30);
      v41 = v28;
      *(_QWORD *)&v42 = v28;
      v32 = v31;
      *((_QWORD *)&v42 + 1) = v27;
      v33 = sub_1000C66CC();
      v43 = 0;
      v44 = 0;
      v34 = dispatch thunk of JSONEncoder.encode<A>(_:)(&v42, &type metadata for TrustedContactKeyIntegrity, v33);
      v36 = v35;
      swift_release(v32);
      v37 = v34;
      *(_QWORD *)&v42 = v34;
      *((_QWORD *)&v42 + 1) = v36;
      v45 = 5;
      KeyedEncodingContainer.encode<A>(_:forKey:)(&v42, &v45, v5, &type metadata for Data, v20);
      v38 = v41;
      sub_10000F494(v41, v27);
      swift_bridgeObjectRelease(0);
      sub_1000144D8(v38, v27);
      sub_10000F494(v37, v36);
    }
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

uint64_t sub_10016C2A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t (*v11)(char *, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  char v14;
  void (*v15)(char *, uint64_t);
  char v16;
  double v17;
  uint64_t v18;
  uint64_t v20;

  v1 = type metadata accessor for Date(0);
  v2 = *(_QWORD *)(v1 - 8);
  v4 = __chkstk_darwin(v1, v3);
  v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4, v7);
  v9 = (char *)&v20 - v8;
  v10 = v0 + *(int *)(type metadata accessor for CustodianHealthRecord(0) + 24);
  v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v2 + 16);
  v12 = v11(v9, v10, v1);
  Date.init(timeIntervalSince1970:)(v12, 946713600.0);
  v13 = sub_100005150(&qword_100290510, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  v14 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v6, v1, v13);
  v15 = *(void (**)(char *, uint64_t))(v2 + 8);
  v15(v6, v1);
  v15(v9, v1);
  if ((v14 & 1) != 0)
  {
    v16 = 1;
  }
  else
  {
    v17 = sub_1000C76C0();
    v11(v6, v10, v1);
    v18 = Date.init(timeInterval:since:)(v6, v17);
    Date.init()(v18);
    v16 = static Date.< infix(_:_:)(v6, v9);
    v15(v6, v1);
    v15(v9, v1);
  }
  return v16 & 1;
}

uint64_t sub_10016C428()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  void (*v14)(char *, uint64_t);
  uint64_t v15;
  uint64_t result;
  double v17;
  uint64_t v18;

  v1 = type metadata accessor for Date(0);
  v2 = *(_QWORD *)(v1 - 8);
  v4 = __chkstk_darwin(v1, v3);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4, v7);
  v9 = (char *)&v18 - v8;
  v10 = v0 + *(int *)(type metadata accessor for CustodianHealthRecord(0) + 24);
  v11 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v2 + 16))(v9, v10, v1);
  Date.init(timeIntervalSince1970:)(v11, 946713600.0);
  v12 = sub_100005150(&qword_100290510, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  v13 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v6, v1, v12);
  v14 = *(void (**)(char *, uint64_t))(v2 + 8);
  v14(v6, v1);
  v15 = ((uint64_t (*)(char *, uint64_t))v14)(v9, v1);
  if ((v13 & 1) != 0)
    return -1;
  Date.init()(v15);
  v17 = Date.timeIntervalSince(_:)(v10);
  result = ((uint64_t (*)(char *, uint64_t))v14)(v9, v1);
  if ((~*(_QWORD *)&v17 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (v17 <= -9.22337204e18)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (v17 < 9.22337204e18)
    return (uint64_t)v17;
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_10016C5BC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10016B81C(a1, a2);
}

uint64_t sub_10016C5D0(_QWORD *a1)
{
  return sub_10016BEA0(a1);
}

uint64_t sub_10016C5E4(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_100005150((unint64_t *)&unk_100294B50, type metadata accessor for CustodianHealthRecord, (uint64_t)&unk_10021ED1C);
  result = sub_100005150(&qword_10028D5C0, type metadata accessor for CustodianHealthRecord, (uint64_t)&unk_10021ECF4);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t type metadata accessor for CustodianHealthRecord(uint64_t a1)
{
  uint64_t result;

  result = qword_100294C18;
  if (!qword_100294C18)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CustodianHealthRecord);
  return result;
}

uint64_t sub_10016C67C(uint64_t a1)
{
  uint64_t result;

  result = sub_100005150(&qword_100294B60, type metadata accessor for CustodianHealthRecord, (uint64_t)&unk_10021ED44);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_10016C6B8(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for CustodianHealthRecord(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_10016C6F4()
{
  unint64_t result;

  result = qword_100294B70;
  if (!qword_100294B70)
  {
    result = swift_getWitnessTable(&unk_10021EED8, &type metadata for CustodianHealthRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100294B70);
  }
  return result;
}

uint64_t sub_10016C738(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CustodianHealthRecord(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_10016C77C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100294BB8;
  if (!qword_100294BB8)
  {
    v1 = sub_10000D908(&qword_100294BB0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_100294BB8);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for CustodianHealthRecord.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_10016C824 + 4 * byte_10021ECEC[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_10016C858 + 4 * byte_10021ECE7[v4]))();
}

uint64_t sub_10016C858(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10016C860(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10016C868);
  return result;
}

uint64_t sub_10016C874(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10016C87CLL);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_10016C880(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10016C888(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CustodianHealthRecord.CodingKeys()
{
  return &type metadata for CustodianHealthRecord.CodingKeys;
}

_QWORD *sub_10016C8A4(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(_QWORD *, _QWORD *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v17 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v17);
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    v8 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v8((_QWORD *)((char *)a1 + a3[5]), (_QWORD *)((char *)a2 + a3[5]), v7);
    v9 = a3[6];
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for Date(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
    v13 = a3[7];
    v14 = (char *)a1 + v13;
    v15 = (char *)a2 + v13;
    v16 = *((_QWORD *)v15 + 1);
    if (v16 >> 60 == 15)
    {
      *(_OWORD *)v14 = *(_OWORD *)v15;
    }
    else
    {
      v18 = *(_QWORD *)v15;
      sub_10000F450(*(_QWORD *)v15, *((_QWORD *)v15 + 1));
      *(_QWORD *)v14 = v18;
      *((_QWORD *)v14 + 1) = v16;
    }
    v19 = a3[8];
    v20 = (_QWORD *)((char *)a1 + v19);
    v21 = (_QWORD *)((char *)a2 + v19);
    v22 = *v21;
    v23 = v21[1];
    sub_10000F450(*v21, v23);
    *v20 = v22;
    v20[1] = v23;
    v24 = a3[10];
    *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
    v25 = (char *)a1 + v24;
    v26 = (char *)a2 + v24;
    *(_QWORD *)v25 = *(_QWORD *)v26;
    v25[8] = v26[8];
  }
  return a1;
}

uint64_t sub_10016C9EC(uint64_t a1, int *a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  unint64_t v9;

  v4 = type metadata accessor for UUID(0);
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(a1, v4);
  v5(a1 + a2[5], v4);
  v6 = a1 + a2[6];
  v7 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  v8 = (uint64_t *)(a1 + a2[7]);
  v9 = v8[1];
  if (v9 >> 60 != 15)
    sub_10000F494(*v8, v9);
  return sub_10000F494(*(_QWORD *)(a1 + a2[8]), *(_QWORD *)(a1 + a2[8] + 8));
}

uint64_t sub_10016CA94(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v6 = type metadata accessor for UUID(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v8 = a3[6];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
  v12 = a3[7];
  v13 = a1 + v12;
  v14 = (uint64_t *)(a2 + v12);
  v15 = v14[1];
  if (v15 >> 60 == 15)
  {
    *(_OWORD *)v13 = *(_OWORD *)v14;
  }
  else
  {
    v16 = *v14;
    sub_10000F450(*v14, v14[1]);
    *(_QWORD *)v13 = v16;
    *(_QWORD *)(v13 + 8) = v15;
  }
  v17 = a3[8];
  v18 = (uint64_t *)(a1 + v17);
  v19 = (uint64_t *)(a2 + v17);
  v20 = *v19;
  v21 = v19[1];
  sub_10000F450(*v19, v21);
  *v18 = v20;
  v18[1] = v21;
  v22 = a3[10];
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  v23 = a1 + v22;
  v24 = a2 + v22;
  *(_QWORD *)v23 = *(_QWORD *)v24;
  *(_BYTE *)(v23 + 8) = *(_BYTE *)(v24 + 8);
  return a1;
}

uint64_t sub_10016CBB0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;

  v6 = type metadata accessor for UUID(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v8 = a3[6];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 24))(v9, v10, v11);
  v12 = a3[7];
  v13 = (uint64_t *)(a1 + v12);
  v14 = (uint64_t *)(a2 + v12);
  v15 = *(_QWORD *)(a2 + v12 + 8);
  if (*(_QWORD *)(a1 + v12 + 8) >> 60 != 15)
  {
    if (v15 >> 60 != 15)
    {
      v17 = *v14;
      sub_10000F450(v17, v15);
      v18 = *v13;
      v19 = v13[1];
      *v13 = v17;
      v13[1] = v15;
      sub_10000F494(v18, v19);
      goto LABEL_8;
    }
    sub_100071D90((uint64_t)v13);
    goto LABEL_6;
  }
  if (v15 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)v13 = *(_OWORD *)v14;
    goto LABEL_8;
  }
  v16 = *v14;
  sub_10000F450(v16, v15);
  *v13 = v16;
  v13[1] = v15;
LABEL_8:
  v20 = a3[8];
  v21 = (uint64_t *)(a1 + v20);
  v22 = (uint64_t *)(a2 + v20);
  v23 = *v22;
  v24 = v22[1];
  sub_10000F450(*v22, v24);
  v25 = *v21;
  v26 = v21[1];
  *v21 = v23;
  v21[1] = v24;
  sub_10000F494(v25, v26);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  v27 = a3[10];
  v28 = a1 + v27;
  v29 = (uint64_t *)(a2 + v27);
  v30 = *v29;
  *(_BYTE *)(v28 + 8) = *((_BYTE *)v29 + 8);
  *(_QWORD *)v28 = v30;
  return a1;
}

uint64_t sub_10016CD1C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = type metadata accessor for UUID(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v8 = a3[6];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
  v12 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  *(_OWORD *)(a1 + v12) = *(_OWORD *)(a2 + v12);
  v13 = a3[10];
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  v14 = a1 + v13;
  v15 = a2 + v13;
  *(_QWORD *)v14 = *(_QWORD *)v15;
  *(_BYTE *)(v14 + 8) = *(_BYTE *)(v15 + 8);
  return a1;
}

uint64_t sub_10016CDF0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v6 = type metadata accessor for UUID(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v8 = a3[6];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  v12 = a3[7];
  v13 = (uint64_t *)(a1 + v12);
  v14 = (uint64_t *)(a2 + v12);
  v15 = *(_QWORD *)(a1 + v12 + 8);
  if (v15 >> 60 != 15)
  {
    v16 = v14[1];
    if (v16 >> 60 != 15)
    {
      v17 = *v13;
      *v13 = *v14;
      v13[1] = v16;
      sub_10000F494(v17, v15);
      goto LABEL_6;
    }
    sub_100071D90((uint64_t)v13);
  }
  *(_OWORD *)v13 = *(_OWORD *)v14;
LABEL_6:
  v18 = a3[8];
  v19 = *(_QWORD *)(a1 + v18);
  v20 = *(_QWORD *)(a1 + v18 + 8);
  *(_OWORD *)(a1 + v18) = *(_OWORD *)(a2 + v18);
  sub_10000F494(v19, v20);
  v21 = a3[10];
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  v22 = a1 + v21;
  v23 = a2 + v21;
  *(_QWORD *)v22 = *(_QWORD *)v23;
  *(_BYTE *)(v22 + 8) = *(_BYTE *)(v23 + 8);
  return a1;
}

uint64_t sub_10016CF18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10016CF24);
}

uint64_t sub_10016CF24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v14;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = type metadata accessor for Date(0);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v10 = a1 + *(int *)(a3 + 24);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 36));
  if (v14 >= 2)
    return ((v14 + 2147483646) & 0x7FFFFFFF) + 1;
  else
    return 0;
}

uint64_t sub_10016CFDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10016CFE8);
}

uint64_t sub_10016CFE8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  result = type metadata accessor for Date(0);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v12 = a1 + *(int *)(a4 + 24);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  *(_BYTE *)(a1 + *(int *)(a4 + 36)) = a2 + 1;
  return result;
}

uint64_t sub_10016D08C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[7];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    v5[1] = v5[0];
    result = type metadata accessor for Date(319);
    if (v4 <= 0x3F)
    {
      v5[2] = *(_QWORD *)(result - 8) + 64;
      v5[3] = &unk_10021EDC0;
      v5[4] = &unk_10021EDD8;
      v5[5] = &unk_10021EDF0;
      v5[6] = &unk_10021EE08;
      swift_initStructMetadata(a1, 256, 7, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

unint64_t sub_10016D13C()
{
  unint64_t result;

  result = qword_100294C68;
  if (!qword_100294C68)
  {
    result = swift_getWitnessTable(&unk_10021EEB0, &type metadata for CustodianHealthRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100294C68);
  }
  return result;
}

unint64_t sub_10016D184()
{
  unint64_t result;

  result = qword_100294C70;
  if (!qword_100294C70)
  {
    result = swift_getWitnessTable(&unk_10021EE20, &type metadata for CustodianHealthRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100294C70);
  }
  return result;
}

unint64_t sub_10016D1CC()
{
  unint64_t result;

  result = qword_100294C78;
  if (!qword_100294C78)
  {
    result = swift_getWitnessTable(&unk_10021EE48, &type metadata for CustodianHealthRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100294C78);
  }
  return result;
}

uint64_t sub_10016D210(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char v12;

  if (a1 == 0x444964726F636572 && a2 == 0xE800000000000000)
  {
    v5 = 0xE800000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x444964726F636572, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6169646F74737563 && a2 == 0xEB0000000044496ELL)
  {
    v7 = 0xEB0000000044496ELL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6169646F74737563, 0xEB0000000044496ELL, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0xD000000000000017)
  {
    v8 = 0x800000010020C0E0;
    if (a2 == 0x800000010020C0E0)
      goto LABEL_19;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000017, 0x800000010020C0E0, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_19:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if (a1 == 0xD000000000000010)
  {
    v9 = 0x8000000100209650;
    if (a2 == 0x8000000100209650)
      goto LABEL_24;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x8000000100209650, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
LABEL_24:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if (a1 == 0xD000000000000013 && a2 == 0x8000000100209670)
  {
    v10 = 0x8000000100209670;
LABEL_30:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, 0x8000000100209670, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_30;
  }
  if (a1 == 0x797265766F636572 && a2 == 0xEF6873614879654BLL)
  {
    v11 = 0xEF6873614879654BLL;
LABEL_36:
    swift_bridgeObjectRelease(v11);
    return 5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x797265766F636572, 0xEF6873614879654BLL, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
    goto LABEL_36;
  }
  if (a1 == 0xD000000000000012 && a2 == 0x800000010020B690)
  {
    swift_bridgeObjectRelease(0x800000010020B690);
    return 6;
  }
  else
  {
    v12 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, 0x800000010020B690, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v12 & 1) != 0)
      return 6;
    else
      return 7;
  }
}

uint64_t type metadata accessor for DaemonCustodianMessenger()
{
  return objc_opt_self(_TtC13appleaccountd24DaemonCustodianMessenger);
}

_QWORD *sub_10016D528()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  void (*v12)(_QWORD *, uint64_t, uint64_t);
  void (*v13)(_QWORD *, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(_QWORD *, uint64_t, uint64_t);
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *result;
  id v36;
  uint64_t v37;
  id v38;
  _QWORD v39[2];
  _QWORD v40[5];
  __int128 v41;
  uint64_t v42;
  _BYTE v43[16];

  v1 = type metadata accessor for DependencyRegistry.Entry(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  v5 = (_QWORD *)((char *)v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = type metadata accessor for DaemonStorageFactory();
  swift_initStackObject(v6, v43);
  sub_1000C8AF8(&v41);
  sub_10003A190(&v41, v0 + 16);
  v39[1] = type metadata accessor for DependencyRegistry(0);
  v7 = sub_1000080B4(&qword_10028C8A0);
  v8 = *(_QWORD *)(v0 + 40);
  v9 = sub_10000732C((_QWORD *)(v0 + 16), v8);
  v5[3] = v8;
  v10 = sub_1000B9D04(v5);
  (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v10, v9, v8);
  v11 = enum case for DependencyRegistry.Entry.exact(_:);
  v12 = *(void (**)(_QWORD *, uint64_t, uint64_t))(v2 + 104);
  v12(v5, enum case for DependencyRegistry.Entry.exact(_:), v1);
  static DependencyRegistry.register<A>(_:entry:dependencyId:)(v7, v5, 0, 0, v7);
  v13 = *(void (**)(_QWORD *, uint64_t))(v2 + 8);
  v13(v5, v1);
  sub_100006CA4(v0 + 16, (uint64_t)&v41);
  v14 = sub_1000067AC((uint64_t)&v41, v42);
  __chkstk_darwin(v14, v14);
  v16 = (_QWORD *)((char *)v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v17 + 16))(v16);
  v18 = *v16;
  v19 = type metadata accessor for StorageController();
  v40[3] = v19;
  v40[4] = &off_100266E08;
  v40[0] = v18;
  v20 = type metadata accessor for IdentityStorageController();
  v21 = (_QWORD *)swift_allocObject(v20, 56, 7);
  v22 = sub_1000067AC((uint64_t)v40, v19);
  __chkstk_darwin(v22, v22);
  v24 = (_QWORD *)((char *)v39 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v25 + 16))(v24);
  v26 = *v24;
  v27 = v12;
  v28 = v11;
  v29 = (_QWORD *)v39[0];
  v21[5] = v19;
  v21[6] = &off_100266E08;
  v21[2] = v26;
  sub_100006F58(v40);
  sub_100006F58(&v41);
  v29[7] = v21;
  v29[10] = v20;
  v29[11] = &off_1002639F8;
  v30 = sub_1000080B4(&qword_100294E28);
  v31 = sub_10000732C(v29 + 7, v20);
  v5[3] = v20;
  v32 = sub_1000B9D04(v5);
  (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v32, v31, v20);
  v27(v5, v28, v1);
  static DependencyRegistry.register<A>(_:entry:dependencyId:)(v30, v5, 0, 0, v30);
  v13(v5, v1);
  v33 = type metadata accessor for DaemonAccountStore();
  v34 = swift_allocObject(v33, 32, 7);
  result = objc_msgSend((id)objc_opt_self(ACAccountStore), "defaultStore");
  if (result)
  {
    *(_QWORD *)(v34 + 16) = result;
    *(_QWORD *)(v34 + 24) = objc_msgSend((id)objc_opt_self(AKAccountManager), "sharedInstance");
    v29[15] = v33;
    v29[16] = &off_100261290;
    v29[12] = v34;
    v36 = objc_msgSend(objc_allocWithZone((Class)AAContactsManager), "init");
    v29[17] = v36;
    v37 = sub_1000080B4((uint64_t *)&unk_100291CA0);
    v5[3] = swift_getObjectType(v36);
    *v5 = v36;
    v27(v5, v28, v1);
    v38 = v36;
    static DependencyRegistry.register<A>(_:entry:dependencyId:)(v37, v5, 0, 0, v37);
    v13(v5, v1);
    return v29;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10016D900()
{
  _QWORD *v0;

  sub_100006F58(v0 + 2);
  sub_100006F58(v0 + 7);
  sub_100006F58(v0 + 12);
  swift_unknownObjectRelease(v0[17]);
  return swift_deallocClassInstance(v0, 144, 7);
}

uint64_t type metadata accessor for IdentityDaemonContainer()
{
  return objc_opt_self(_TtC13appleaccountd23IdentityDaemonContainer);
}

uint64_t type metadata accessor for InheritanceInvitationActionAnalyticsEvent(uint64_t a1)
{
  uint64_t result;

  result = qword_100294E30;
  if (!qword_100294E30)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for InheritanceInvitationActionAnalyticsEvent);
  return result;
}

uint64_t sub_10016D998(uint64_t a1)
{
  _BYTE v2[8];

  return swift_initClassMetadata2(a1, 0, 0, v2, a1 + qword_1002A8BE8);
}

void sub_10016D9D4(char a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2);
  __asm { BR              X10 }
}

Swift::Int sub_10016DA28()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x614D747065636361, 0xEC0000006C61756ELL);
  swift_bridgeObjectRelease(0xEC0000006C61756ELL);
  return Hasher._finalize()();
}

void sub_10016DAC4(char a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2);
  __asm { BR              X10 }
}

Swift::Int sub_10016DB24()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0xD000000000000015, 0x80000001002091F0);
  swift_bridgeObjectRelease(0x80000001002091F0);
  return Hasher._finalize()();
}

void sub_10016DBE4(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3);
  __asm { BR              X10 }
}

Swift::Int sub_10016DC40()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0xD000000000000015, 0x80000001002091F0);
  swift_bridgeObjectRelease(0x80000001002091F0);
  return Hasher._finalize()();
}

void sub_10016DD00(uint64_t a1, char a2)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3);
  __asm { BR              X10 }
}

Swift::Int sub_10016DD50()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x614D747065636361, 0xEC0000006C61756ELL);
  swift_bridgeObjectRelease(0xEC0000006C61756ELL);
  return Hasher._finalize()();
}

uint64_t sub_10016DDEC(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10016DE24 + 4 * byte_10021F026[a1]))(0x7541747065636361, 0xEA00000000006F74);
}

uint64_t sub_10016DE24()
{
  return 0x614D747065636361;
}

unint64_t sub_10016DE44()
{
  return 0xD000000000000011;
}

unint64_t sub_10016DE60()
{
  return 0xD000000000000013;
}

void sub_10016DE98(char *a1)
{
  sub_1001D1BF4(*a1);
}

void sub_10016DEA4()
{
  char *v0;

  sub_10016D9D4(*v0);
}

void sub_10016DEAC(uint64_t a1)
{
  char *v1;

  sub_1001D24A4(a1, *v1);
}

void sub_10016DEB4(uint64_t a1)
{
  char *v1;

  sub_10016DD00(a1, *v1);
}

unint64_t sub_10016DEBC@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_10016E790(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10016DEE8@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_10016DDEC(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

void sub_10016DF10(char *a1)
{
  sub_1001D1A58(*a1);
}

void sub_10016DF1C()
{
  unsigned __int8 *v0;
  uint64_t v1;
  _QWORD v2[9];

  v1 = *v0;
  Hasher.init(_seed:)(v2);
  __asm { BR              X9 }
}

Swift::Int sub_10016DF70()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x6961706552706463, 0xE900000000000072);
  swift_bridgeObjectRelease(0xE900000000000072);
  return Hasher._finalize()();
}

void sub_10016DFF8()
{
  __asm { BR              X10 }
}

uint64_t sub_10016E03C(uint64_t a1)
{
  String.hash(into:)(a1, 0x6961706552706463, 0xE900000000000072);
  return swift_bridgeObjectRelease(0xE900000000000072);
}

void sub_10016E0B0()
{
  unsigned __int8 *v0;
  uint64_t v1;
  _QWORD v2[9];

  v1 = *v0;
  Hasher.init(_seed:)(v2);
  __asm { BR              X9 }
}

Swift::Int sub_10016E100()
{
  uint64_t v1;

  String.hash(into:)(&v1, 0x6961706552706463, 0xE900000000000072);
  swift_bridgeObjectRelease(0xE900000000000072);
  return Hasher._finalize()();
}

unint64_t sub_10016E188@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_10016E7D8(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10016E1B4()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_10016E1EC + 4 * byte_10021F037[*v0]))();
}

void sub_10016E1EC(_QWORD *a1@<X8>)
{
  *a1 = 0x6961706552706463;
  a1[1] = 0xE900000000000072;
}

void sub_10016E20C(_QWORD *a1@<X8>)
{
  *a1 = 0x684368746C616568;
  a1[1] = 0xEB000000006B6365;
}

void sub_10016E230(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "postMigration");
  *(_WORD *)(a1 + 14) = -4864;
}

uint64_t sub_10016E258()
{
  uint64_t v0;
  uint64_t inited;
  unint64_t v2;
  uint64_t v4;

  v0 = sub_1000080B4(&qword_10028E7F8);
  inited = swift_initStackObject(v0, &v4);
  *(_OWORD *)(inited + 16) = xmmword_100219130;
  strcpy((char *)(inited + 32), "isFamilyInvite");
  *(_BYTE *)(inited + 47) = -18;
  *(NSNumber *)(inited + 48) = Bool._bridgeToObjectiveC()();
  *(_QWORD *)(inited + 56) = 0xD000000000000013;
  *(_QWORD *)(inited + 64) = 0x800000010020E690;
  *(NSNumber *)(inited + 72) = Int._bridgeToObjectiveC()();
  v2 = sub_10001612C(inited);
  return AAFTimedAnalyticsEvent.init(eventName:initialData:)(0xD000000000000032, 0x800000010020E650, v2);
}

uint64_t sub_10016E328(char a1, uint64_t a2, char a3)
{
  id v6;
  id v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t result;
  uint64_t v12;
  uint64_t inited;
  uint64_t v14;
  uint64_t v15;
  NSString v16;
  unint64_t v17;
  char v18;
  _BYTE v19[80];

  if (!objc_msgSend((id)objc_opt_self(AADeviceInfo), "isInternalBuild"))
    goto LABEL_6;
  v6 = objc_msgSend((id)objc_opt_self(NSProcessInfo), "processInfo");
  v7 = objc_msgSend(v6, "environment");

  v8 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v7, &type metadata for String, &type metadata for String, &protocol witness table for String);
  if (!*(_QWORD *)(v8 + 16))
  {
    swift_bridgeObjectRelease(v8);
    goto LABEL_6;
  }
  sub_10010A9E0(0xD00000000000001BLL, 0x800000010020AFA0);
  v10 = v9;
  result = swift_bridgeObjectRelease(v8);
  if ((v10 & 1) == 0)
  {
LABEL_6:
    v12 = sub_1000080B4(&qword_10028E7F8);
    inited = swift_initStackObject(v12, v19);
    *(_OWORD *)(inited + 16) = xmmword_100219130;
    strcpy((char *)(inited + 32), "inviteAction");
    *(_BYTE *)(inited + 45) = 0;
    *(_WORD *)(inited + 46) = -5120;
    v18 = a3;
    String.init<A>(describing:)(&v18, &type metadata for InheritanceAnalyticsInviteAction);
    v15 = v14;
    v16 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v15);
    *(_QWORD *)(inited + 48) = v16;
    strcpy((char *)(inited + 56), "numOfRelation");
    *(_WORD *)(inited + 70) = -4864;
    *(NSNumber *)(inited + 72) = Int._bridgeToObjectiveC()();
    v17 = sub_10001612C(inited);
    dispatch thunk of AAFTimedAnalyticsEvent.completeEvent(withSuccess:error:additionalData:)(a1 & 1, a2, v17);
    return swift_bridgeObjectRelease(v17);
  }
  return result;
}

void sub_10016E4FC()
{
  _swift_stdlib_reportUnimplementedInitializer("appleaccountd.InheritanceInvitationActionAnalyticsEvent", 55, "init(eventName:initialData:)", 28, 0);
  __break(1u);
}

id sub_10016E528()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for InheritanceInvitationActionAnalyticsEvent(0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_10016E560()
{
  return type metadata accessor for InheritanceInvitationActionAnalyticsEvent(0);
}

uint64_t storeEnumTagSinglePayload for InheritanceAnalyticsInviteAction(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_10016E5B4 + 4 * byte_10021F040[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_10016E5E8 + 4 * byte_10021F03B[v4]))();
}

uint64_t sub_10016E5E8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10016E5F0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10016E5F8);
  return result;
}

uint64_t sub_10016E604(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10016E60CLL);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_10016E610(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10016E618(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for InheritanceAnalyticsInviteAction()
{
  return &type metadata for InheritanceAnalyticsInviteAction;
}

uint64_t storeEnumTagSinglePayload for InheritanceAnalyticsCDPRepairAction(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_10016E680 + 4 * byte_10021F04A[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_10016E6B4 + 4 * byte_10021F045[v4]))();
}

uint64_t sub_10016E6B4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10016E6BC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10016E6C4);
  return result;
}

uint64_t sub_10016E6D0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10016E6D8);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_10016E6DC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10016E6E4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for InheritanceAnalyticsCDPRepairAction()
{
  return &type metadata for InheritanceAnalyticsCDPRepairAction;
}

unint64_t sub_10016E704()
{
  unint64_t result;

  result = qword_100294E80;
  if (!qword_100294E80)
  {
    result = swift_getWitnessTable(&unk_10021F15C, &type metadata for InheritanceAnalyticsCDPRepairAction);
    atomic_store(result, (unint64_t *)&qword_100294E80);
  }
  return result;
}

unint64_t sub_10016E74C()
{
  unint64_t result;

  result = qword_100294E88;
  if (!qword_100294E88)
  {
    result = swift_getWitnessTable(&unk_10021F1FC, &type metadata for InheritanceAnalyticsInviteAction);
    atomic_store(result, (unint64_t *)&qword_100294E88);
  }
  return result;
}

unint64_t sub_10016E790(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10025E790, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 5)
    return 5;
  else
    return v3;
}

unint64_t sub_10016E7D8(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10025E828, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 4)
    return 4;
  else
    return v3;
}

void sub_10016E820(void *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  id v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int (*v30)(char *, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  void (*v37)(char *, char *);
  id v38;
  NSString v39;
  id v40;
  uint64_t v41;
  NSObject *v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  NSObject *v46;
  os_log_type_t v47;
  uint8_t *v48;
  NSObject **v49;
  NSObject *v50;
  uint64_t v51;
  uint64_t v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  NSString v59;
  id v60;
  id v61;
  NSObject *v62;
  NSObject *v63;
  NSString v64;
  NSObject *v65;
  uint64_t v66;
  id v67;
  id v68;
  uint64_t v69;
  id v70;
  uint64_t v71;
  uint64_t v72;
  int *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  NSObject **v77;
  uint64_t v78;
  NSObject *v79;
  NSObject *v80;
  os_log_type_t v81;
  uint8_t *v82;
  NSObject **v83;
  NSObject *v84;
  const char *v85;
  uint64_t v86;
  NSObject *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  void (*v94)(char *, uint64_t);
  uint64_t v95;
  uint64_t v96;
  id v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  char *v101;
  char *v102;
  uint64_t v103;
  NSObject *v104;
  NSObject *v105;
  uint64_t v106;

  v100 = a2;
  v99 = a3;
  v4 = sub_1000080B4((uint64_t *)&unk_1002904F0);
  v6 = __chkstk_darwin(v4, v5);
  v8 = (char *)&v96 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6, v9);
  v11 = (char *)&v96 - v10;
  v12 = type metadata accessor for UUID(0);
  v13 = *(_QWORD *)(v12 - 8);
  v15 = __chkstk_darwin(v12, v14);
  v101 = (char *)&v96 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v15, v17);
  v102 = (char *)&v96 - v19;
  v20 = CKRecord.recordType.getter(v18);
  v22 = v21;
  if (v20 == 0xD00000000000001FLL && v21 == 0x800000010020A500)
  {
    swift_bridgeObjectRelease(0x800000010020A500);
  }
  else
  {
    v23 = _stringCompareWithSmolCheck(_:_:expecting:)(v20, v21, 0xD00000000000001FLL, 0x800000010020A500, 0);
    swift_bridgeObjectRelease(v22);
    if ((v23 & 1) == 0)
    {
LABEL_7:
      type metadata accessor for InheritanceError(0);
      v32 = v31;
      v106 = 2;
      v33 = sub_100005014((uint64_t)&_swiftEmptyArrayStorage);
      v34 = sub_100005150(&qword_10028B350, (uint64_t (*)(uint64_t))type metadata accessor for InheritanceError, (uint64_t)&unk_100216D64);
      v35 = _BridgedStoredNSError.init(_:userInfo:)(&v104, &v106, v33, v32, v34);
      swift_willThrow(v35);

      return;
    }
  }
  v24 = objc_msgSend(a1, "recordID");
  v25 = objc_msgSend(v24, "recordName");

  v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
  v103 = v13;
  v28 = v27;

  UUID.init(uuidString:)(v26, v28);
  v29 = v103;
  swift_bridgeObjectRelease(v28);
  v30 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48);
  if (v30(v11, 1, v12) == 1)
  {
    sub_100013AAC((uint64_t)v11);
    goto LABEL_7;
  }
  v36 = v12;
  v37 = *(void (**)(char *, char *))(v29 + 32);
  v98 = v36;
  v37(v102, v11);
  v38 = objc_msgSend(a1, "encryptedValuesByKey");
  v39 = String._bridgeToObjectiveC()();
  v97 = v38;
  v40 = objc_msgSend(v38, "objectForKeyedSubscript:", v39);

  if (!v40)
    goto LABEL_12;
  v106 = (uint64_t)v40;
  v41 = sub_1000080B4(&qword_10028DB30);
  if ((swift_dynamicCast(&v104, &v106, v41, &type metadata for String, 6) & 1) == 0)
    goto LABEL_12;
  v42 = v105;
  UUID.init(uuidString:)(v104, v105);
  swift_bridgeObjectRelease(v42);
  v43 = v98;
  if (v30(v8, 1, v98) != 1)
  {
    ((void (*)(char *, char *, uint64_t))v37)(v101, v8, v43);
    v59 = String._bridgeToObjectiveC()();
    v60 = v97;
    v61 = objc_msgSend(v97, "objectForKeyedSubscript:", v59);

    if (v61 && (v106 = (uint64_t)v61, (swift_dynamicCast(&v104, &v106, v41, &type metadata for String, 6) & 1) != 0))
    {
      v62 = v104;
      v63 = v105;
      v64 = String._bridgeToObjectiveC()();
      v65 = objc_msgSend(v60, "objectForKeyedSubscript:", v64);

      if (v65)
      {
        v104 = v65;
        type metadata accessor for Status(0);
        if ((swift_dynamicCast(&v106, &v104, v41, v66, 6) & 1) != 0)
        {
          v103 = v106;
          v67 = objc_msgSend(objc_allocWithZone((Class)NSKeyedArchiver), "initRequiringSecureCoding:", 1);
          objc_msgSend(a1, "encodeSystemFieldsWithCoder:", v67);
          objc_msgSend(v67, "finishEncoding");
          v68 = objc_msgSend(v67, "encodedData");
          v69 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v68);
          v70 = v60;
          v72 = v71;
          swift_unknownObjectRelease(v70);

          v73 = (int *)type metadata accessor for BenefactorInfoRecord(0);
          v74 = v98;
          v75 = v99;
          v76 = (uint64_t *)(v99 + v73[8]);
          *v76 = v69;
          v76[1] = v72;
          ((void (*)(uint64_t, char *, uint64_t))v37)(v75 + v73[7], v102, v74);
          ((void (*)(uint64_t, char *, uint64_t))v37)(v75, v101, v74);
          v77 = (NSObject **)(v75 + v73[5]);
          *v77 = v62;
          v77[1] = v63;
          *(_QWORD *)(v75 + v73[6]) = v103;
          *(_BYTE *)(v75 + v73[9]) = v100 & 1;
          return;
        }
      }
      swift_bridgeObjectRelease(v63);
      if (qword_10028ADD0 != -1)
        swift_once(&qword_10028ADD0, sub_100046D50);
      v86 = type metadata accessor for Logger(0);
      sub_100005288(v86, (uint64_t)qword_1002A89F0);
      v79 = a1;
      v80 = Logger.logObject.getter(v79);
      v81 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v80, v81))
      {
        v82 = (uint8_t *)swift_slowAlloc(12, -1);
        v83 = (NSObject **)swift_slowAlloc(8, -1);
        *(_DWORD *)v82 = 138412290;
        v104 = v79;
        v87 = v79;
        v60 = v97;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v104, &v105);
        *v83 = v79;

        v85 = "Missing TrustedContactStatus - %@";
        goto LABEL_31;
      }
    }
    else
    {
      if (qword_10028ADD0 != -1)
        swift_once(&qword_10028ADD0, sub_100046D50);
      v78 = type metadata accessor for Logger(0);
      sub_100005288(v78, (uint64_t)qword_1002A89F0);
      v79 = a1;
      v80 = Logger.logObject.getter(v79);
      v81 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v80, v81))
      {
        v82 = (uint8_t *)swift_slowAlloc(12, -1);
        v83 = (NSObject **)swift_slowAlloc(8, -1);
        *(_DWORD *)v82 = 138412290;
        v104 = v79;
        v84 = v79;
        v60 = v97;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v104, &v105);
        *v83 = v79;

        v85 = "Missing Inheritance Handle - %@";
LABEL_31:
        _os_log_impl((void *)&_mh_execute_header, v80, v81, v85, v82, 0xCu);
        v88 = sub_1000080B4((uint64_t *)&unk_10028BC20);
        swift_arrayDestroy(v83, 1, v88);
        swift_slowDealloc(v83, -1, -1);
        swift_slowDealloc(v82, -1, -1);
LABEL_33:

        type metadata accessor for InheritanceError(0);
        v90 = v89;
        v106 = 2;
        v91 = sub_100005014((uint64_t)&_swiftEmptyArrayStorage);
        v92 = sub_100005150(&qword_10028B350, (uint64_t (*)(uint64_t))type metadata accessor for InheritanceError, (uint64_t)&unk_100216D64);
        v93 = _BridgedStoredNSError.init(_:userInfo:)(&v104, &v106, v91, v90, v92);
        swift_willThrow(v93);
        swift_unknownObjectRelease(v60);

        v94 = *(void (**)(char *, uint64_t))(v103 + 8);
        v95 = v98;
        v94(v101, v98);
        v94(v102, v95);
        return;
      }
    }

    v80 = v79;
    goto LABEL_33;
  }
  sub_100013AAC((uint64_t)v8);
LABEL_12:
  if (qword_10028ADD0 != -1)
    swift_once(&qword_10028ADD0, sub_100046D50);
  v44 = type metadata accessor for Logger(0);
  sub_100005288(v44, (uint64_t)qword_1002A89F0);
  v45 = a1;
  v46 = Logger.logObject.getter(v45);
  v47 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v46, v47))
  {
    v48 = (uint8_t *)swift_slowAlloc(12, -1);
    v49 = (NSObject **)swift_slowAlloc(8, -1);
    *(_DWORD *)v48 = 138412290;
    v104 = v45;
    v50 = v45;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v104, &v105);
    *v49 = v45;

    _os_log_impl((void *)&_mh_execute_header, v46, v47, "Missing Inheritance beneficiaryID - %@", v48, 0xCu);
    v51 = sub_1000080B4((uint64_t *)&unk_10028BC20);
    swift_arrayDestroy(v49, 1, v51);
    swift_slowDealloc(v49, -1, -1);
    swift_slowDealloc(v48, -1, -1);
  }
  else
  {

    v46 = v45;
  }
  v52 = v103;
  v53 = v97;

  type metadata accessor for InheritanceError(0);
  v55 = v54;
  v106 = 2;
  v56 = sub_100005014((uint64_t)&_swiftEmptyArrayStorage);
  v57 = sub_100005150(&qword_10028B350, (uint64_t (*)(uint64_t))type metadata accessor for InheritanceError, (uint64_t)&unk_100216D64);
  v58 = _BridgedStoredNSError.init(_:userInfo:)(&v104, &v106, v56, v55, v57);
  swift_willThrow(v58);
  swift_unknownObjectRelease(v53);

  (*(void (**)(char *, uint64_t))(v52 + 8))(v102, v98);
}

uint64_t sub_10016F218(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10016F258 + 4 * byte_10021F230[a1]))(0x69636966656E6562, 0xED00004449797261);
}

uint64_t sub_10016F258()
{
  return 0x656C646E6168;
}

uint64_t sub_10016F26C()
{
  return 0x444964726F636572;
}

unint64_t sub_10016F284()
{
  return 0xD000000000000010;
}

unint64_t sub_10016F2A0()
{
  return 0xD000000000000013;
}

uint64_t sub_10016F2C0()
{
  return 0x737574617473;
}

uint64_t sub_10016F2D4()
{
  unsigned __int8 *v0;

  return sub_10016F218(*v0);
}

uint64_t sub_10016F2DC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1001706D8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10016F300(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10016FEE4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10016F328(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10016FEE4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10016F350@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  char v31;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  char *v41;
  _QWORD *v42;
  __int128 v43;
  char v44;

  v36 = a2;
  v40 = type metadata accessor for UUID(0);
  v37 = *(_QWORD *)(v40 - 8);
  v4 = __chkstk_darwin(v40, v3);
  v6 = (uint64_t *)((char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v4, v7);
  v39 = (uint64_t *)((char *)&v33 - v8);
  v38 = sub_1000080B4(&qword_100294EA8);
  v9 = *(_QWORD *)(v38 - 8);
  __chkstk_darwin(v38, v10);
  v12 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (int *)type metadata accessor for BenefactorInfoRecord(0);
  __chkstk_darwin(v13, v14);
  v16 = (char *)&v33 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = a1[3];
  v17 = a1[4];
  sub_10000732C(a1, v18);
  v19 = sub_10016FEE4();
  v41 = v12;
  v20 = v42;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for BenefactorInfoRecord.CodingKeys, &type metadata for BenefactorInfoRecord.CodingKeys, v19, v18, v17);
  if (v20)
    return sub_100006F58(a1);
  v34 = v6;
  v35 = v9;
  v42 = a1;
  v21 = v37;
  LOBYTE(v43) = 0;
  v22 = sub_100005150((unint64_t *)&unk_10028BBB0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v23 = v38;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v39, v40, &v43, v38, v40, v22);
  v24 = *(_QWORD **)(v21 + 32);
  v25 = v40;
  ((void (*)(char *, _QWORD *, uint64_t))v24)(v16, v39, v40);
  LOBYTE(v43) = 1;
  v26 = KeyedDecodingContainer.decode(_:forKey:)(&v43, v23);
  v39 = v24;
  v27 = (uint64_t *)&v16[v13[5]];
  *v27 = v26;
  v27[1] = v28;
  LOBYTE(v43) = 5;
  *(_QWORD *)&v16[v13[6]] = KeyedDecodingContainer.decode(_:forKey:)(&v43, v23);
  LOBYTE(v43) = 2;
  v29 = v34;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v34, v25, &v43, v38, v25, v22);
  ((void (*)(char *, _QWORD *, uint64_t))v39)(&v16[v13[7]], v29, v25);
  v44 = 3;
  v30 = sub_10000F40C();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v43, &type metadata for Data, &v44, v38, &type metadata for Data, v30);
  *(_OWORD *)&v16[v13[8]] = v43;
  LOBYTE(v43) = 4;
  v31 = KeyedDecodingContainer.decode(_:forKey:)(&v43, v38);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v41, v38);
  v16[v13[9]] = v31 & 1;
  sub_100158F48((uint64_t)v16, v36);
  sub_100006F58(v42);
  return sub_100158F8C((uint64_t)v16);
}

uint64_t sub_10016F7B0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  __int128 v24;
  char v25;

  v3 = v1;
  v5 = sub_1000080B4(&qword_100294EB8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a1[3];
  v11 = a1[4];
  sub_10000732C(a1, v10);
  v12 = sub_10016FEE4();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for BenefactorInfoRecord.CodingKeys, &type metadata for BenefactorInfoRecord.CodingKeys, v12, v10, v11);
  LOBYTE(v24) = 0;
  v13 = type metadata accessor for UUID(0);
  v14 = sub_100005150((unint64_t *)&unk_10028DC20, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v3, &v24, v5, v13, v14);
  if (!v2)
  {
    v15 = (int *)type metadata accessor for BenefactorInfoRecord(0);
    v16 = (uint64_t *)(v3 + v15[5]);
    v17 = *v16;
    v18 = v16[1];
    LOBYTE(v24) = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v17, v18, &v24, v5);
    v19 = *(_QWORD *)(v3 + v15[6]);
    LOBYTE(v24) = 5;
    KeyedEncodingContainer.encode(_:forKey:)(v19, &v24, v5);
    v20 = v3 + v15[7];
    LOBYTE(v24) = 2;
    KeyedEncodingContainer.encode<A>(_:forKey:)(v20, &v24, v5, v13, v14);
    v24 = *(_OWORD *)(v3 + v15[8]);
    v25 = 3;
    v21 = sub_10000F4D8();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v24, &v25, v5, &type metadata for Data, v21);
    v22 = *(unsigned __int8 *)(v3 + v15[9]);
    LOBYTE(v24) = 4;
    KeyedEncodingContainer.encode(_:forKey:)(v22, &v24, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

uint64_t sub_10016F9E4(id *a1)
{
  uint64_t v1;
  uint64_t v2;
  id v3;
  uint64_t ObjectType;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  char v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;

  v2 = v1;
  v3 = objc_msgSend(*a1, "encryptedValuesByKey");
  ObjectType = swift_getObjectType(v3);
  v5 = CKRecordKeyValueSetting.subscript.getter(&v25, 0x69636966656E6562, 0xED00004449797261);
  v7 = v25;
  v6 = v26;
  v8 = UUID.uuidString.getter(v5);
  v10 = v9;
  if (!v6)
  {
    v11 = swift_bridgeObjectRelease(v9);
    goto LABEL_7;
  }
  if (v7 != v8 || v6 != v9)
  {
    v12 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v6, v8, v9, 0);
    swift_bridgeObjectRelease(v6);
    v11 = swift_bridgeObjectRelease(v10);
    if ((v12 & 1) != 0)
      goto LABEL_8;
LABEL_7:
    v13 = UUID.uuidString.getter(v11);
    v27 = &type metadata for String;
    v28 = &protocol witness table for String;
    v25 = v13;
    v26 = v14;
    CKRecordKeyValueSetting.subscript.setter(&v25, 0x69636966656E6562, 0xED00004449797261, ObjectType);
    goto LABEL_8;
  }
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v10);
LABEL_8:
  CKRecordKeyValueSetting.subscript.getter(&v25, 0xD000000000000010, 0x800000010020E6F0);
  v16 = v25;
  v15 = v26;
  v17 = type metadata accessor for BenefactorInfoRecord(0);
  v18 = (uint64_t *)(v2 + *(int *)(v17 + 20));
  v20 = *v18;
  v19 = v18[1];
  if (!v15)
    goto LABEL_14;
  if (v16 == v20 && v15 == v19)
  {
    swift_bridgeObjectRelease(v15);
    goto LABEL_16;
  }
  v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v15, *v18, v18[1], 0);
  swift_bridgeObjectRelease(v15);
  if ((v22 & 1) == 0)
  {
LABEL_14:
    v27 = &type metadata for String;
    v28 = &protocol witness table for String;
    v25 = v20;
    v26 = v19;
    swift_bridgeObjectRetain(v19);
    CKRecordKeyValueSetting.subscript.setter(&v25, 0xD000000000000010, 0x800000010020E6F0, ObjectType);
  }
LABEL_16:
  CKRecordKeyValueSetting.subscript.getter(&v25, 0x737574617473, 0xE600000000000000);
  v23 = *(_QWORD *)(v2 + *(int *)(v17 + 24));
  if ((v26 & 1) != 0 || v25 != v23)
  {
    v27 = &type metadata for Int;
    v28 = &protocol witness table for Int;
    v25 = v23;
    CKRecordKeyValueSetting.subscript.setter(&v25, 0x737574617473, 0xE600000000000000, ObjectType);
  }
  return swift_unknownObjectRelease(v3);
}

uint64_t sub_10016FC9C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10016F350(a1, a2);
}

uint64_t sub_10016FCB0(_QWORD *a1)
{
  return sub_10016F7B0(a1);
}

uint64_t sub_10016FCC4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  Swift::String v6;
  uint64_t v7;
  uint64_t v8;
  Swift::String v9;
  void *object;
  Swift::String v11;
  uint64_t *v12;
  uint64_t v13;
  void *v14;
  Swift::String v15;
  uint64_t v17;
  unint64_t v18;

  v18 = 0xE000000000000000;
  _StringGuts.grow(_:)(36);
  v1 = type metadata accessor for BenefactorInfoRecord(0);
  v17 = v1;
  v2 = sub_1000080B4((uint64_t *)&unk_100294EC0);
  v3 = String.init<A>(describing:)(&v17, v2);
  v5 = v4;
  swift_bridgeObjectRelease(0xE000000000000000);
  v17 = v3;
  v18 = v5;
  v6._object = (void *)0x8000000100209460;
  v6._countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v6);
  v7 = type metadata accessor for UUID(0);
  v8 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v9._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v7, v8);
  object = v9._object;
  String.append(_:)(v9);
  swift_bridgeObjectRelease(object);
  v11._countAndFlagsBits = 0x656C646E61680A2CLL;
  v11._object = (void *)0xEB00000000202D20;
  String.append(_:)(v11);
  v12 = (uint64_t *)(v0 + *(int *)(v1 + 20));
  v13 = *v12;
  v14 = (void *)v12[1];
  swift_bridgeObjectRetain(v14);
  v15._countAndFlagsBits = v13;
  v15._object = v14;
  String.append(_:)(v15);
  swift_bridgeObjectRelease(v14);
  return v17;
}

uint64_t sub_10016FE10(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_100005150((unint64_t *)&unk_100294E90, type metadata accessor for BenefactorInfoRecord, (uint64_t)&unk_10021F290);
  result = sub_100005150(&qword_10028D610, type metadata accessor for BenefactorInfoRecord, (uint64_t)&unk_10021F268);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t type metadata accessor for BenefactorInfoRecord(uint64_t a1)
{
  uint64_t result;

  result = qword_100294F28;
  if (!qword_100294F28)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for BenefactorInfoRecord);
  return result;
}

uint64_t sub_10016FEA8(uint64_t a1)
{
  uint64_t result;

  result = sub_100005150(&qword_100294EA0, type metadata accessor for BenefactorInfoRecord, (uint64_t)&unk_10021F2B8);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10016FEE4()
{
  unint64_t result;

  result = qword_100294EB0;
  if (!qword_100294EB0)
  {
    result = swift_getWitnessTable(&unk_10021F438, &type metadata for BenefactorInfoRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100294EB0);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for BenefactorInfoRecord.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_10016FF74 + 4 * byte_10021F23B[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_10016FFA8 + 4 * byte_10021F236[v4]))();
}

uint64_t sub_10016FFA8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10016FFB0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10016FFB8);
  return result;
}

uint64_t sub_10016FFC4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10016FFCCLL);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_10016FFD0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10016FFD8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BenefactorInfoRecord.CodingKeys()
{
  return &type metadata for BenefactorInfoRecord.CodingKeys;
}

_QWORD *sub_10016FFF4(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(char *, char *, uint64_t, __n128);
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  __n128 v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v25 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v25 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v25);
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    v8 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v7 - 8) + 16);
    ((void (*)(_QWORD *, _QWORD *, uint64_t))v8)(a1, a2, v7);
    v9 = a3[5];
    v10 = a3[6];
    v11 = (_QWORD *)((char *)a1 + v9);
    v12 = (_QWORD *)((char *)a2 + v9);
    v14 = *v12;
    v13 = v12[1];
    v15 = *(_QWORD *)((char *)a2 + v10);
    *v11 = v14;
    v11[1] = v13;
    *(_QWORD *)((char *)a1 + v10) = v15;
    v16 = a3[7];
    v17 = (char *)a1 + v16;
    v18 = (char *)a2 + v16;
    v19 = swift_bridgeObjectRetain(v13);
    v8(v17, v18, v7, v19);
    v20 = a3[8];
    v21 = (_QWORD *)((char *)a1 + v20);
    v22 = (_QWORD *)((char *)a2 + v20);
    v23 = *v22;
    v24 = v22[1];
    sub_10000F450(*v22, v24);
    *v21 = v23;
    v21[1] = v24;
    *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  }
  return a1;
}

uint64_t sub_1001700EC(uint64_t a1, int *a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);

  v4 = type metadata accessor for UUID(0);
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(a1, v4);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[5] + 8));
  v5(a1 + a2[7], v4);
  return sub_10000F494(*(_QWORD *)(a1 + a2[8]), *(_QWORD *)(a1 + a2[8] + 8));
}

uint64_t sub_100170160(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  unint64_t v23;

  v6 = type metadata accessor for UUID(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = a3[6];
  v10 = (_QWORD *)(a1 + v8);
  v11 = (uint64_t *)(a2 + v8);
  v13 = *v11;
  v12 = v11[1];
  v14 = *(_QWORD *)(a2 + v9);
  *v10 = v13;
  v10[1] = v12;
  *(_QWORD *)(a1 + v9) = v14;
  v15 = a3[7];
  v16 = a1 + v15;
  v17 = a2 + v15;
  v18 = swift_bridgeObjectRetain(v12);
  ((void (*)(uint64_t, uint64_t, uint64_t, __n128))v7)(v16, v17, v6, v18);
  v19 = a3[8];
  v20 = (uint64_t *)(a1 + v19);
  v21 = (uint64_t *)(a2 + v19);
  v22 = *v21;
  v23 = v21[1];
  sub_10000F450(*v21, v23);
  *v20 = v22;
  v20[1] = v23;
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_10017022C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;

  v6 = type metadata accessor for UUID(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = (_QWORD *)(a1 + v8);
  v10 = (_QWORD *)(a2 + v8);
  *v9 = *v10;
  v11 = v10[1];
  v12 = v9[1];
  v9[1] = v11;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRelease(v12);
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  v7(a1 + a3[7], a2 + a3[7], v6);
  v13 = a3[8];
  v14 = (uint64_t *)(a1 + v13);
  v15 = (uint64_t *)(a2 + v13);
  v16 = *v15;
  v17 = v15[1];
  sub_10000F450(*v15, v17);
  v18 = *v14;
  v19 = v14[1];
  *v14 = v16;
  v14[1] = v17;
  sub_10000F494(v18, v19);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_100170308(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;

  v6 = type metadata accessor for UUID(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_QWORD *)(a1 + v8) = *(_QWORD *)(a2 + v8);
  v7(a1 + a3[7], a2 + a3[7], v6);
  v9 = a3[9];
  *(_OWORD *)(a1 + a3[8]) = *(_OWORD *)(a2 + a3[8]);
  *(_BYTE *)(a1 + v9) = *(_BYTE *)(a2 + v9);
  return a1;
}

uint64_t sub_1001703A0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;

  v6 = type metadata accessor for UUID(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = (_QWORD *)(a1 + v8);
  v10 = (uint64_t *)(a2 + v8);
  v12 = *v10;
  v11 = v10[1];
  v13 = v9[1];
  *v9 = v12;
  v9[1] = v11;
  swift_bridgeObjectRelease(v13);
  v14 = a3[7];
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  v7(a1 + v14, a2 + v14, v6);
  v15 = a3[8];
  v16 = *(_QWORD *)(a1 + v15);
  v17 = *(_QWORD *)(a1 + v15 + 8);
  *(_OWORD *)(a1 + v15) = *(_OWORD *)(a2 + v15);
  sub_10000F494(v16, v17);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_100170458(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100170464);
}

uint64_t sub_100170464(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_1001704E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001704F0);
}

uint64_t sub_1001704F0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  return result;
}

uint64_t sub_10017056C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[6];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_10021F338;
    v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[3] = v4[0];
    v4[4] = &unk_10021F350;
    v4[5] = &unk_10021F368;
    swift_initStructMetadata(a1, 256, 6, v4, a1 + 16);
    return 0;
  }
  return result;
}

unint64_t sub_100170604()
{
  unint64_t result;

  result = qword_100294F70;
  if (!qword_100294F70)
  {
    result = swift_getWitnessTable(&unk_10021F410, &type metadata for BenefactorInfoRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100294F70);
  }
  return result;
}

unint64_t sub_10017064C()
{
  unint64_t result;

  result = qword_100294F78;
  if (!qword_100294F78)
  {
    result = swift_getWitnessTable(&unk_10021F380, &type metadata for BenefactorInfoRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100294F78);
  }
  return result;
}

unint64_t sub_100170694()
{
  unint64_t result;

  result = qword_100294F80;
  if (!qword_100294F80)
  {
    result = swift_getWitnessTable(&unk_10021F3A8, &type metadata for BenefactorInfoRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100294F80);
  }
  return result;
}

uint64_t sub_1001706D8(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char v11;

  if (a1 == 0x69636966656E6562 && a2 == 0xED00004449797261)
  {
    v5 = 0xED00004449797261;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x69636966656E6562, 0xED00004449797261, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x656C646E6168 && a2 == 0xE600000000000000)
  {
    v7 = 0xE600000000000000;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656C646E6168, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x444964726F636572 && a2 == 0xE800000000000000)
  {
    v8 = 0xE800000000000000;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x444964726F636572, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0xD000000000000010)
  {
    v9 = 0x8000000100209650;
    if (a2 == 0x8000000100209650)
      goto LABEL_25;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x8000000100209650, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
LABEL_25:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if (a1 == 0xD000000000000013 && a2 == 0x8000000100209670)
  {
    v10 = 0x8000000100209670;
LABEL_31:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, 0x8000000100209670, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_31;
  }
  if (a1 == 0x737574617473 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease(0xE600000000000000);
    return 5;
  }
  else
  {
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)(0x737574617473, 0xE600000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v11 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

void sub_100170960(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  sub_100170980(a1, a2, a3, a4);
}

void sub_100170980(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  void *v4;
  void *v6;
  NSDictionary v8;
  uint64_t v9;
  _QWORD v10[5];
  uint64_t v11;

  v6 = a3;
  if (!a2)
  {
    v8.super.isa = 0;
    if (!a3)
      goto LABEL_4;
    goto LABEL_3;
  }
  v8.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
  if (v6)
  {
LABEL_3:
    v10[4] = v6;
    v11 = a4;
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 1107296256;
    v10[2] = sub_100045BC0;
    v10[3] = &unk_10026B8B8;
    v6 = _Block_copy(v10);
    v9 = v11;
    swift_retain(a4);
    swift_release(v9);
  }
LABEL_4:
  objc_msgSend(v4, "postFollowUpWithIdentifier:userInfo:completion:", a1, v8.super.isa, v6);
  _Block_release(v6);

}

void sub_100170A74(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  sub_100170A94(a1, a2, a3, a4, a5);
}

void sub_100170A94(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  void *v5;
  void *v7;
  NSDictionary v10;
  uint64_t v11;
  _QWORD v12[5];
  uint64_t v13;

  v7 = a4;
  if (!a3)
  {
    v10.super.isa = 0;
    if (!a4)
      goto LABEL_4;
    goto LABEL_3;
  }
  v10.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
  if (v7)
  {
LABEL_3:
    v12[4] = v7;
    v13 = a5;
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 1107296256;
    v12[2] = sub_100045BC0;
    v12[3] = &unk_10026B890;
    v7 = _Block_copy(v12);
    v11 = v13;
    swift_retain(a5);
    swift_release(v11);
  }
LABEL_4:
  objc_msgSend(v5, "postFollowUpWithIdentifier:forAccount:userInfo:completion:", a1, a2, v10.super.isa, v7);
  _Block_release(v7);

}

void sub_100170B98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void **v3;
  void *v5;
  void *v7;
  uint64_t v8;
  _QWORD v9[5];
  uint64_t v10;

  v5 = *v3;
  if (a2)
  {
    v9[4] = a2;
    v10 = a3;
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 1107296256;
    v9[2] = sub_100045BC0;
    v9[3] = &unk_10026B868;
    v7 = _Block_copy(v9);
    v8 = v10;
    swift_retain(a3);
    swift_release(v8);
  }
  else
  {
    v7 = 0;
  }
  objc_msgSend(v5, "dismissFollowUpWithIdentifier:completion:", a1, v7);
  _Block_release(v7);
}

id sub_100170C50()
{
  id *v0;

  return objc_msgSend(*v0, "isRenewCredentialsCFUPosted");
}

id sub_100170C70()
{
  id *v0;

  return objc_msgSend(*v0, "ageOfOldestCustodianCFU");
}

void sub_100170C80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void **v4;
  void *v7;
  void *v9;
  uint64_t v10;
  _QWORD v11[5];
  uint64_t v12;

  v7 = *v4;
  if (a3)
  {
    v11[4] = a3;
    v12 = a4;
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 1107296256;
    v11[2] = sub_100045BC0;
    v11[3] = &unk_10026B840;
    v9 = _Block_copy(v11);
    v10 = v12;
    swift_retain(a4);
    swift_release(v10);
  }
  else
  {
    v9 = 0;
  }
  objc_msgSend(v7, "dismissFollowUpsStartingWithIdentifierPrefix:account:completion:", a1, a2, v9);
  _Block_release(v9);
}

uint64_t sub_100170D40(uint64_t a1)
{
  id *v1;
  id v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = objc_msgSend(*v1, "pendingFollowUpItemUserInfosWithIdentifier:", a1);
  if (!v2)
    return 0;
  v3 = v2;
  v4 = sub_1000080B4(&qword_100291020);
  v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v3, v4);

  return v5;
}

id sub_10017101C()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CloudKitAPSBridge();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for CloudKitAPSBridge()
{
  return objc_opt_self(_TtC13appleaccountd17CloudKitAPSBridge);
}

void sub_10017107C(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t Strong;
  uint64_t v10;
  NSObject *oslog;

  if (a2 >> 60 == 15)
  {
    if (qword_10028ADB8 != -1)
      swift_once(&qword_10028ADB8, sub_100046CE4);
    v3 = type metadata accessor for Logger(0);
    v4 = sub_100005288(v3, (uint64_t)qword_1002A89A8);
    oslog = Logger.logObject.getter(v4);
    v5 = static os_log_type_t.error.getter(oslog);
    if (os_log_type_enabled(oslog, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v5, "Cloudkit received invalid public token from APS", v6, 2u);
      swift_slowDealloc(v6, -1, -1);
    }

  }
  else
  {
    Strong = swift_unknownObjectWeakLoadStrong(v2 + OBJC_IVAR____TtC13appleaccountd17CloudKitAPSBridge_delegate);
    if (Strong)
    {
      v10 = Strong;
      sub_10000F450(a1, a2);
      sub_1001E2FA8(a1, a2);
      swift_unknownObjectRelease(v10);
      sub_1000144D8(a1, a2);
    }
  }
}

void sub_1001711CC(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t Strong;
  uint64_t v20;
  NSObject *oslog;

  if (a2 >> 60 == 15 || a4 == 0 || a6 == 0)
  {
    if (qword_10028ADB8 != -1)
      swift_once(&qword_10028ADB8, sub_100046CE4);
    v9 = type metadata accessor for Logger(0);
    v10 = sub_100005288(v9, (uint64_t)qword_1002A89A8);
    oslog = Logger.logObject.getter(v10);
    v11 = static os_log_type_t.error.getter(oslog);
    if (os_log_type_enabled(oslog, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v11, "Cloudkit received invalid topic token from APS", v12, 2u);
      swift_slowDealloc(v12, -1, -1);
    }

  }
  else
  {
    Strong = swift_unknownObjectWeakLoadStrong(v6 + OBJC_IVAR____TtC13appleaccountd17CloudKitAPSBridge_delegate);
    if (Strong)
    {
      v20 = Strong;
      sub_10000F450(a1, a2);
      sub_1001E31E8(a1, a2, a3, a4, a5, a6);
      sub_1000144D8(a1, a2);
      swift_unknownObjectRelease(v20);
    }
  }
}

void sub_100171364(void *a1)
{
  uint64_t v1;
  uint64_t Strong;
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  os_log_type_t v8;
  uint8_t *v9;
  NSObject *oslog;

  if (a1)
  {
    Strong = swift_unknownObjectWeakLoadStrong(v1 + OBJC_IVAR____TtC13appleaccountd17CloudKitAPSBridge_delegate);
    if (Strong)
    {
      v4 = Strong;
      v5 = a1;
      sub_1001E2204(v5);

      swift_unknownObjectRelease(v4);
    }
  }
  else
  {
    if (qword_10028ADB8 != -1)
      swift_once(&qword_10028ADB8, sub_100046CE4);
    v6 = type metadata accessor for Logger(0);
    v7 = sub_100005288(v6, (uint64_t)qword_1002A89A8);
    oslog = Logger.logObject.getter(v7);
    v8 = static os_log_type_t.error.getter(oslog);
    if (os_log_type_enabled(oslog, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v8, "Cloudkit received invalid APS message", v9, 2u);
      swift_slowDealloc(v9, -1, -1);
    }

  }
}

void sub_100171484(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t (*v60)(_QWORD);
  char *v61;
  _QWORD v62[21];
  uint64_t v63;

  v62[20] = a1;
  v2 = type metadata accessor for PersonNameComponents(0);
  v62[16] = *(_QWORD *)(v2 - 8);
  v62[17] = v2;
  v4 = __chkstk_darwin(v2, v3);
  v62[8] = (char *)v62 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v4, v6);
  v62[7] = (char *)v62 - v8;
  v10 = __chkstk_darwin(v7, v9);
  v62[5] = (char *)v62 - v11;
  v13 = __chkstk_darwin(v10, v12);
  v62[4] = (char *)v62 - v14;
  __chkstk_darwin(v13, v15);
  v63 = type metadata accessor for CustodianRecord(0);
  v17 = __chkstk_darwin(v63, v16);
  v19 = __chkstk_darwin(v17, v18);
  v62[6] = (char *)v62 - v20;
  v22 = __chkstk_darwin(v19, v21);
  v62[15] = (char *)v62 - v23;
  v25 = __chkstk_darwin(v22, v24);
  v62[3] = (char *)v62 - v26;
  v28 = __chkstk_darwin(v25, v27);
  v62[14] = (char *)v62 - v29;
  v31 = __chkstk_darwin(v28, v30);
  v62[2] = (char *)v62 - v32;
  v34 = __chkstk_darwin(v31, v33);
  v36 = __chkstk_darwin(v34, v35);
  v62[1] = (char *)v62 - v37;
  v39 = __chkstk_darwin(v36, v38);
  v41 = __chkstk_darwin(v39, v40);
  __chkstk_darwin(v41, v42);
  v62[10] = (char *)v62 - v43;
  v44 = type metadata accessor for UUID(0);
  v62[18] = *(_QWORD *)(v44 - 8);
  v62[19] = v44;
  v46 = __chkstk_darwin(v44, v45);
  v62[9] = (char *)v62 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = __chkstk_darwin(v46, v48);
  v62[13] = (char *)v62 - v50;
  v52 = __chkstk_darwin(v49, v51);
  v62[11] = (char *)v62 - v53;
  __chkstk_darwin(v52, v54);
  v62[12] = (char *)v62 - v55;
  v56 = type metadata accessor for TrustedContactUserNotification(0);
  __chkstk_darwin(v56, v57);
  v59 = (char *)v62 - ((v58 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100027FE8(v1, (uint64_t)v59, v60);
  v61 = (char *)&loc_1001717D8 + dword_1001731C4[swift_getEnumCaseMultiPayload(v59, v56)];
  __asm { BR              X10 }
}

uint64_t sub_1001717E8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  Class isa;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  NSString v14;
  id v15;
  id v16;
  id v17;
  NSString v18;
  id v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  void *v33;
  void *v34;
  id v35;
  id v36;
  id v37;
  unint64_t v38;
  uint64_t (*v39)(uint64_t, _QWORD);
  id v40;
  uint64_t result;

  v2 = (uint64_t *)(v1 + *(int *)(sub_1000080B4((uint64_t *)&unk_100295040) + 48));
  v3 = *v2;
  v4 = v2[1];
  (*(void (**)(_QWORD, uint64_t, _QWORD))(v0[18] + 32))(v0[12], v1, v0[19]);
  v5 = (void *)objc_opt_self(AAUniversalLinkHelper);
  isa = UUID._bridgeToObjectiveC()().super.isa;
  v7 = objc_msgSend(v5, "stringForCustodianMessagesURLWithUUID:", isa);

  v0[17] = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
  v0[21] = v8;

  v9 = type metadata accessor for ContactsHelper(0);
  v10 = swift_allocObject(v9, *(unsigned int *)(v9 + 48), *(unsigned __int16 *)(v9 + 52));
  v11 = sub_1000080B4((uint64_t *)&unk_100291CA0);
  Dependency.init(dependencyId:config:)(0, 0, 0, v11);
  v12 = sub_1000080B4((uint64_t *)&unk_10028F080);
  Dependency.wrappedValue.getter(v0 + 101, v12);
  v13 = (void *)v0[101];
  v14 = String._bridgeToObjectiveC()();
  v15 = objc_msgSend(v13, "contactForHandle:", v14);

  swift_unknownObjectRelease(v13);
  if (!v15)
  {
    swift_setDeallocating(v10);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v10 + OBJC_IVAR____TtC13appleaccountd14ContactsHelper__contactsManager, v12);
    swift_deallocClassInstance(v10, *(unsigned int *)(*(_QWORD *)v10 + 48), *(unsigned __int16 *)(*(_QWORD *)v10 + 52));
LABEL_6:
    swift_bridgeObjectRetain(v4);
    v21 = v3;
    v23 = v4;
    goto LABEL_7;
  }
  v16 = objc_allocWithZone((Class)AALocalContactInfo);
  swift_bridgeObjectRetain(v4);
  v17 = v15;
  v18 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v4);
  v19 = objc_msgSend(v16, "initWithHandle:contact:", v18, v17);

  swift_setDeallocating(v10);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v10 + OBJC_IVAR____TtC13appleaccountd14ContactsHelper__contactsManager, v12);
  swift_deallocClassInstance(v10, *(unsigned int *)(*(_QWORD *)v10 + 48), *(unsigned __int16 *)(*(_QWORD *)v10 + 52));
  if (!v19)
    goto LABEL_6;
  v20 = objc_msgSend(v19, "displayName");

  if (!v20)
    goto LABEL_6;
  v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
  v23 = v22;

LABEL_7:
  v24 = v0[20];
  v25 = v0[17];
  v26 = sub_1000080B4(&qword_100295038);
  v27 = swift_allocObject(v26, 128, 7);
  *(_OWORD *)(v27 + 16) = xmmword_10021D6F0;
  v28 = (void *)AAFollowUpTrustedContactID;
  *(_QWORD *)(v27 + 32) = AAFollowUpTrustedContactID;
  v29 = v28;
  v30 = v0[12];
  *(_QWORD *)(v27 + 40) = UUID.uuidString.getter(v29);
  *(_QWORD *)(v27 + 48) = v31;
  v32 = (void *)AAFollowUpTrustedContactHandle;
  *(_QWORD *)(v27 + 56) = AAFollowUpTrustedContactHandle;
  *(_QWORD *)(v27 + 64) = v3;
  v33 = (void *)AAFollowUpTrustedContactName;
  *(_QWORD *)(v27 + 72) = v4;
  *(_QWORD *)(v27 + 80) = v33;
  *(_QWORD *)(v27 + 88) = v21;
  *(_QWORD *)(v27 + 96) = v23;
  v34 = (void *)AAFollowUpTrustedContactInvitationURL;
  *(_QWORD *)(v27 + 104) = AAFollowUpTrustedContactInvitationURL;
  *(_QWORD *)(v27 + 112) = v25;
  *(_QWORD *)(v27 + 120) = v0[21];
  v35 = v32;
  v36 = v33;
  v37 = v34;
  v38 = sub_100015C80(v27);
  v39 = *(uint64_t (**)(uint64_t, _QWORD))(v0[18] + 8);
  v40 = AAFollowUpIdentifierCustodianInvitationReminder;
  result = v39(v30, v0[19]);
  *(_QWORD *)v24 = v40;
  *(_QWORD *)(v24 + 8) = v38;
  *(_QWORD *)(v24 + 16) = 0;
  *(_QWORD *)(v24 + 24) = 0;
  *(_QWORD *)(v24 + 32) = 0;
  *(_BYTE *)(v24 + 40) = 0;
  return result;
}

uint64_t type metadata accessor for TrustedContactUserNotification(uint64_t a1)
{
  uint64_t result;

  result = qword_1002950C0;
  if (!qword_1002950C0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for TrustedContactUserNotification);
  return result;
}

char *sub_100173230(char *a1, char *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v15;
  void (*v16)(char *, char *, uint64_t);
  int *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  void (*v35)(char *, char *, uint64_t);
  int *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  void (*v54)(char *, char *, uint64_t);
  int *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t *v70;
  unint64_t v71;
  char *v72;
  uint64_t v73;
  void (*v74)(char *, char *, uint64_t);
  int *v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t *v90;
  unint64_t v91;
  uint64_t v92;
  void (*v93)(char *, char *, uint64_t);
  int *v94;
  uint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t *v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  char *v119;
  uint64_t v120;
  char *v121;
  id v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t *v125;
  uint64_t *v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  char *v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  char *v139;
  uint64_t v140;
  char *v141;
  char *v142;
  unsigned int (*v143)(char *, uint64_t, uint64_t, __n128);
  __n128 v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t *v148;
  uint64_t *v149;
  uint64_t v150;
  unint64_t v151;
  uint64_t v152;
  char *v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  char *v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  char *v162;
  uint64_t v163;
  char *v164;
  char *v165;
  unsigned int (*v166)(char *, uint64_t, uint64_t, __n128);
  __n128 v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t *v171;
  uint64_t *v172;
  uint64_t v173;
  unint64_t v174;
  uint64_t v175;
  char *v176;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  char *v180;
  char *v181;
  uint64_t v182;
  uint64_t v183;
  char *v184;
  char *v185;
  uint64_t v186;
  char *v187;
  char *v188;
  unsigned int (*v189)(char *, uint64_t, uint64_t, __n128);
  __n128 v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t *v194;
  uint64_t *v195;
  uint64_t v196;
  unint64_t v197;
  uint64_t v198;
  char *v199;
  char *v200;
  uint64_t v201;
  uint64_t v202;
  char *v203;
  char *v204;
  uint64_t v205;
  uint64_t v206;
  char *v207;
  char *v208;
  uint64_t v209;
  char *v210;
  char *v211;
  unsigned int (*v212)(char *, uint64_t, uint64_t, __n128);
  __n128 v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t *v217;
  uint64_t *v218;
  uint64_t v219;
  unint64_t v220;
  uint64_t v221;
  char *v222;
  char *v223;
  uint64_t v224;
  uint64_t v225;
  char *v226;
  char *v227;
  uint64_t v228;
  uint64_t v229;
  char *v230;
  char *v231;
  uint64_t v232;
  char *v233;
  char *v234;
  unsigned int (*v235)(char *, uint64_t, uint64_t, __n128);
  __n128 v236;
  uint64_t v237;
  void (*v238)(char *, char *, uint64_t);
  void (*v239)(char *, char *, uint64_t);
  void (*v240)(char *, char *, uint64_t);
  void (*v241)(char *, char *, uint64_t);
  void (*v242)(char *, char *, uint64_t);
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v13 = *(char **)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = &v13[(v6 + 16) & ~(unint64_t)v6];
    swift_retain(v13);
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload(a2, a3))
    {
      case 0u:
        v8 = type metadata accessor for UUID(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
        v9 = *(int *)(sub_1000080B4((uint64_t *)&unk_100295040) + 48);
        v10 = &a1[v9];
        v11 = &a2[v9];
        v12 = *((_QWORD *)v11 + 1);
        *(_QWORD *)v10 = *(_QWORD *)v11;
        *((_QWORD *)v10 + 1) = v12;
        swift_bridgeObjectRetain(v12);
        swift_storeEnumTagMultiPayload(a1, a3, 0);
        break;
      case 1u:
        v15 = type metadata accessor for UUID(0);
        v243 = *(_QWORD *)(v15 - 8);
        v16 = *(void (**)(char *, char *, uint64_t))(v243 + 16);
        v16(a1, a2, v15);
        v17 = (int *)type metadata accessor for CustodianRecord(0);
        v238 = v16;
        v16(&a1[v17[5]], &a2[v17[5]], v15);
        v18 = v17[6];
        v19 = &a1[v18];
        v20 = &a2[v18];
        v21 = *((_QWORD *)v20 + 1);
        *(_QWORD *)v19 = *(_QWORD *)v20;
        *((_QWORD *)v19 + 1) = v21;
        v22 = v17[7];
        v23 = &a1[v22];
        v24 = &a2[v22];
        v25 = *((_QWORD *)v24 + 1);
        *(_QWORD *)v23 = *(_QWORD *)v24;
        *((_QWORD *)v23 + 1) = v25;
        v26 = v17[8];
        v27 = &a1[v26];
        v28 = &a2[v26];
        v29 = *((_QWORD *)v28 + 1);
        *(_QWORD *)v27 = *(_QWORD *)v28;
        *((_QWORD *)v27 + 1) = v29;
        *(_QWORD *)&a1[v17[9]] = *(_QWORD *)&a2[v17[9]];
        v30 = v17[10];
        v31 = &a1[v30];
        v32 = (uint64_t *)&a2[v30];
        v33 = *(_QWORD *)&a2[v30 + 8];
        swift_bridgeObjectRetain(v21);
        swift_bridgeObjectRetain(v25);
        swift_bridgeObjectRetain(v29);
        if (v33 >> 60 == 15)
        {
          *(_OWORD *)v31 = *(_OWORD *)v32;
        }
        else
        {
          v123 = *v32;
          sub_10000F450(*v32, v33);
          *(_QWORD *)v31 = v123;
          *((_QWORD *)v31 + 1) = v33;
        }
        v124 = v17[11];
        v125 = (uint64_t *)&a1[v124];
        v126 = (uint64_t *)&a2[v124];
        v127 = *v126;
        v128 = v126[1];
        sub_10000F450(*v126, v128);
        *v125 = v127;
        v125[1] = v128;
        a1[v17[12]] = a2[v17[12]];
        v129 = v17[13];
        v130 = &a1[v129];
        v131 = &a2[v129];
        v132 = *((_QWORD *)v131 + 1);
        *(_QWORD *)v130 = *(_QWORD *)v131;
        *((_QWORD *)v130 + 1) = v132;
        v133 = v17[14];
        v134 = &a1[v133];
        v135 = &a2[v133];
        v136 = *((_QWORD *)v135 + 1);
        *(_QWORD *)v134 = *(_QWORD *)v135;
        *((_QWORD *)v134 + 1) = v136;
        v137 = v17[15];
        v138 = &a1[v137];
        v139 = &a2[v137];
        *(_QWORD *)v138 = *(_QWORD *)v139;
        v138[8] = v139[8];
        v140 = v17[16];
        v141 = &a1[v140];
        v142 = &a2[v140];
        v143 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v243 + 48);
        swift_bridgeObjectRetain(v132);
        v144 = swift_bridgeObjectRetain(v136);
        if (v143(v142, 1, v15, v144))
        {
          v145 = sub_1000080B4((uint64_t *)&unk_1002904F0);
          memcpy(v141, v142, *(_QWORD *)(*(_QWORD *)(v145 - 8) + 64));
        }
        else
        {
          v238(v141, v142, v15);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v243 + 56))(v141, 0, 1, v15);
        }
        swift_storeEnumTagMultiPayload(a1, a3, 1);
        break;
      case 2u:
        v34 = type metadata accessor for UUID(0);
        v244 = *(_QWORD *)(v34 - 8);
        v35 = *(void (**)(char *, char *, uint64_t))(v244 + 16);
        v35(a1, a2, v34);
        v36 = (int *)type metadata accessor for CustodianRecord(0);
        v239 = v35;
        v35(&a1[v36[5]], &a2[v36[5]], v34);
        v37 = v36[6];
        v38 = &a1[v37];
        v39 = &a2[v37];
        v40 = *((_QWORD *)v39 + 1);
        *(_QWORD *)v38 = *(_QWORD *)v39;
        *((_QWORD *)v38 + 1) = v40;
        v41 = v36[7];
        v42 = &a1[v41];
        v43 = &a2[v41];
        v44 = *((_QWORD *)v43 + 1);
        *(_QWORD *)v42 = *(_QWORD *)v43;
        *((_QWORD *)v42 + 1) = v44;
        v45 = v36[8];
        v46 = &a1[v45];
        v47 = &a2[v45];
        v48 = *((_QWORD *)v47 + 1);
        *(_QWORD *)v46 = *(_QWORD *)v47;
        *((_QWORD *)v46 + 1) = v48;
        *(_QWORD *)&a1[v36[9]] = *(_QWORD *)&a2[v36[9]];
        v49 = v36[10];
        v50 = &a1[v49];
        v51 = (uint64_t *)&a2[v49];
        v52 = *(_QWORD *)&a2[v49 + 8];
        swift_bridgeObjectRetain(v40);
        swift_bridgeObjectRetain(v44);
        swift_bridgeObjectRetain(v48);
        if (v52 >> 60 == 15)
        {
          *(_OWORD *)v50 = *(_OWORD *)v51;
        }
        else
        {
          v146 = *v51;
          sub_10000F450(*v51, v52);
          *(_QWORD *)v50 = v146;
          *((_QWORD *)v50 + 1) = v52;
        }
        v147 = v36[11];
        v148 = (uint64_t *)&a1[v147];
        v149 = (uint64_t *)&a2[v147];
        v150 = *v149;
        v151 = v149[1];
        sub_10000F450(*v149, v151);
        *v148 = v150;
        v148[1] = v151;
        a1[v36[12]] = a2[v36[12]];
        v152 = v36[13];
        v153 = &a1[v152];
        v154 = &a2[v152];
        v155 = *((_QWORD *)v154 + 1);
        *(_QWORD *)v153 = *(_QWORD *)v154;
        *((_QWORD *)v153 + 1) = v155;
        v156 = v36[14];
        v157 = &a1[v156];
        v158 = &a2[v156];
        v159 = *((_QWORD *)v158 + 1);
        *(_QWORD *)v157 = *(_QWORD *)v158;
        *((_QWORD *)v157 + 1) = v159;
        v160 = v36[15];
        v161 = &a1[v160];
        v162 = &a2[v160];
        *(_QWORD *)v161 = *(_QWORD *)v162;
        v161[8] = v162[8];
        v163 = v36[16];
        v164 = &a1[v163];
        v165 = &a2[v163];
        v166 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v244 + 48);
        swift_bridgeObjectRetain(v155);
        v167 = swift_bridgeObjectRetain(v159);
        if (v166(v165, 1, v34, v167))
        {
          v168 = sub_1000080B4((uint64_t *)&unk_1002904F0);
          memcpy(v164, v165, *(_QWORD *)(*(_QWORD *)(v168 - 8) + 64));
        }
        else
        {
          v239(v164, v165, v34);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v244 + 56))(v164, 0, 1, v34);
        }
        swift_storeEnumTagMultiPayload(a1, a3, 2);
        break;
      case 3u:
        v53 = type metadata accessor for UUID(0);
        v245 = *(_QWORD *)(v53 - 8);
        v54 = *(void (**)(char *, char *, uint64_t))(v245 + 16);
        v54(a1, a2, v53);
        v55 = (int *)type metadata accessor for CustodianRecord(0);
        v240 = v54;
        v54(&a1[v55[5]], &a2[v55[5]], v53);
        v56 = v55[6];
        v57 = &a1[v56];
        v58 = &a2[v56];
        v59 = *((_QWORD *)v58 + 1);
        *(_QWORD *)v57 = *(_QWORD *)v58;
        *((_QWORD *)v57 + 1) = v59;
        v60 = v55[7];
        v61 = &a1[v60];
        v62 = &a2[v60];
        v63 = *((_QWORD *)v62 + 1);
        *(_QWORD *)v61 = *(_QWORD *)v62;
        *((_QWORD *)v61 + 1) = v63;
        v64 = v55[8];
        v65 = &a1[v64];
        v66 = &a2[v64];
        v67 = *((_QWORD *)v66 + 1);
        *(_QWORD *)v65 = *(_QWORD *)v66;
        *((_QWORD *)v65 + 1) = v67;
        *(_QWORD *)&a1[v55[9]] = *(_QWORD *)&a2[v55[9]];
        v68 = v55[10];
        v69 = &a1[v68];
        v70 = (uint64_t *)&a2[v68];
        v71 = *(_QWORD *)&a2[v68 + 8];
        swift_bridgeObjectRetain(v59);
        swift_bridgeObjectRetain(v63);
        swift_bridgeObjectRetain(v67);
        if (v71 >> 60 == 15)
        {
          *(_OWORD *)v69 = *(_OWORD *)v70;
        }
        else
        {
          v169 = *v70;
          sub_10000F450(*v70, v71);
          *(_QWORD *)v69 = v169;
          *((_QWORD *)v69 + 1) = v71;
        }
        v170 = v55[11];
        v171 = (uint64_t *)&a1[v170];
        v172 = (uint64_t *)&a2[v170];
        v173 = *v172;
        v174 = v172[1];
        sub_10000F450(*v172, v174);
        *v171 = v173;
        v171[1] = v174;
        a1[v55[12]] = a2[v55[12]];
        v175 = v55[13];
        v176 = &a1[v175];
        v177 = &a2[v175];
        v178 = *((_QWORD *)v177 + 1);
        *(_QWORD *)v176 = *(_QWORD *)v177;
        *((_QWORD *)v176 + 1) = v178;
        v179 = v55[14];
        v180 = &a1[v179];
        v181 = &a2[v179];
        v182 = *((_QWORD *)v181 + 1);
        *(_QWORD *)v180 = *(_QWORD *)v181;
        *((_QWORD *)v180 + 1) = v182;
        v183 = v55[15];
        v184 = &a1[v183];
        v185 = &a2[v183];
        *(_QWORD *)v184 = *(_QWORD *)v185;
        v184[8] = v185[8];
        v186 = v55[16];
        v187 = &a1[v186];
        v188 = &a2[v186];
        v189 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v245 + 48);
        swift_bridgeObjectRetain(v178);
        v190 = swift_bridgeObjectRetain(v182);
        if (v189(v188, 1, v53, v190))
        {
          v191 = sub_1000080B4((uint64_t *)&unk_1002904F0);
          memcpy(v187, v188, *(_QWORD *)(*(_QWORD *)(v191 - 8) + 64));
        }
        else
        {
          v240(v187, v188, v53);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v245 + 56))(v187, 0, 1, v53);
        }
        swift_storeEnumTagMultiPayload(a1, a3, 3);
        break;
      case 4u:
        v72 = *(char **)a2;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        swift_bridgeObjectRetain(v72);
        swift_storeEnumTagMultiPayload(a1, a3, 4);
        break;
      case 5u:
        v73 = type metadata accessor for UUID(0);
        v246 = *(_QWORD *)(v73 - 8);
        v74 = *(void (**)(char *, char *, uint64_t))(v246 + 16);
        v74(a1, a2, v73);
        v75 = (int *)type metadata accessor for CustodianRecord(0);
        v241 = v74;
        v74(&a1[v75[5]], &a2[v75[5]], v73);
        v76 = v75[6];
        v77 = &a1[v76];
        v78 = &a2[v76];
        v79 = *((_QWORD *)v78 + 1);
        *(_QWORD *)v77 = *(_QWORD *)v78;
        *((_QWORD *)v77 + 1) = v79;
        v80 = v75[7];
        v81 = &a1[v80];
        v82 = &a2[v80];
        v83 = *((_QWORD *)v82 + 1);
        *(_QWORD *)v81 = *(_QWORD *)v82;
        *((_QWORD *)v81 + 1) = v83;
        v84 = v75[8];
        v85 = &a1[v84];
        v86 = &a2[v84];
        v87 = *((_QWORD *)v86 + 1);
        *(_QWORD *)v85 = *(_QWORD *)v86;
        *((_QWORD *)v85 + 1) = v87;
        *(_QWORD *)&a1[v75[9]] = *(_QWORD *)&a2[v75[9]];
        v88 = v75[10];
        v89 = &a1[v88];
        v90 = (uint64_t *)&a2[v88];
        v91 = *(_QWORD *)&a2[v88 + 8];
        swift_bridgeObjectRetain(v79);
        swift_bridgeObjectRetain(v83);
        swift_bridgeObjectRetain(v87);
        if (v91 >> 60 == 15)
        {
          *(_OWORD *)v89 = *(_OWORD *)v90;
        }
        else
        {
          v192 = *v90;
          sub_10000F450(*v90, v91);
          *(_QWORD *)v89 = v192;
          *((_QWORD *)v89 + 1) = v91;
        }
        v193 = v75[11];
        v194 = (uint64_t *)&a1[v193];
        v195 = (uint64_t *)&a2[v193];
        v196 = *v195;
        v197 = v195[1];
        sub_10000F450(*v195, v197);
        *v194 = v196;
        v194[1] = v197;
        a1[v75[12]] = a2[v75[12]];
        v198 = v75[13];
        v199 = &a1[v198];
        v200 = &a2[v198];
        v201 = *((_QWORD *)v200 + 1);
        *(_QWORD *)v199 = *(_QWORD *)v200;
        *((_QWORD *)v199 + 1) = v201;
        v202 = v75[14];
        v203 = &a1[v202];
        v204 = &a2[v202];
        v205 = *((_QWORD *)v204 + 1);
        *(_QWORD *)v203 = *(_QWORD *)v204;
        *((_QWORD *)v203 + 1) = v205;
        v206 = v75[15];
        v207 = &a1[v206];
        v208 = &a2[v206];
        *(_QWORD *)v207 = *(_QWORD *)v208;
        v207[8] = v208[8];
        v209 = v75[16];
        v210 = &a1[v209];
        v211 = &a2[v209];
        v212 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v246 + 48);
        swift_bridgeObjectRetain(v201);
        v213 = swift_bridgeObjectRetain(v205);
        if (v212(v211, 1, v73, v213))
        {
          v214 = sub_1000080B4((uint64_t *)&unk_1002904F0);
          memcpy(v210, v211, *(_QWORD *)(*(_QWORD *)(v214 - 8) + 64));
        }
        else
        {
          v241(v210, v211, v73);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v246 + 56))(v210, 0, 1, v73);
        }
        swift_storeEnumTagMultiPayload(a1, a3, 5);
        break;
      case 6u:
        v92 = type metadata accessor for UUID(0);
        v247 = *(_QWORD *)(v92 - 8);
        v93 = *(void (**)(char *, char *, uint64_t))(v247 + 16);
        v93(a1, a2, v92);
        v94 = (int *)type metadata accessor for CustodianRecord(0);
        v242 = v93;
        v93(&a1[v94[5]], &a2[v94[5]], v92);
        v95 = v94[6];
        v96 = &a1[v95];
        v97 = &a2[v95];
        v98 = *((_QWORD *)v97 + 1);
        *(_QWORD *)v96 = *(_QWORD *)v97;
        *((_QWORD *)v96 + 1) = v98;
        v99 = v94[7];
        v100 = &a1[v99];
        v101 = &a2[v99];
        v102 = *((_QWORD *)v101 + 1);
        *(_QWORD *)v100 = *(_QWORD *)v101;
        *((_QWORD *)v100 + 1) = v102;
        v103 = v94[8];
        v104 = &a1[v103];
        v105 = &a2[v103];
        v106 = *((_QWORD *)v105 + 1);
        *(_QWORD *)v104 = *(_QWORD *)v105;
        *((_QWORD *)v104 + 1) = v106;
        *(_QWORD *)&a1[v94[9]] = *(_QWORD *)&a2[v94[9]];
        v107 = v94[10];
        v108 = &a1[v107];
        v109 = (uint64_t *)&a2[v107];
        v110 = *(_QWORD *)&a2[v107 + 8];
        swift_bridgeObjectRetain(v98);
        swift_bridgeObjectRetain(v102);
        swift_bridgeObjectRetain(v106);
        if (v110 >> 60 == 15)
        {
          *(_OWORD *)v108 = *(_OWORD *)v109;
        }
        else
        {
          v215 = *v109;
          sub_10000F450(*v109, v110);
          *(_QWORD *)v108 = v215;
          *((_QWORD *)v108 + 1) = v110;
        }
        v216 = v94[11];
        v217 = (uint64_t *)&a1[v216];
        v218 = (uint64_t *)&a2[v216];
        v219 = *v218;
        v220 = v218[1];
        sub_10000F450(*v218, v220);
        *v217 = v219;
        v217[1] = v220;
        a1[v94[12]] = a2[v94[12]];
        v221 = v94[13];
        v222 = &a1[v221];
        v223 = &a2[v221];
        v224 = *((_QWORD *)v223 + 1);
        *(_QWORD *)v222 = *(_QWORD *)v223;
        *((_QWORD *)v222 + 1) = v224;
        v225 = v94[14];
        v226 = &a1[v225];
        v227 = &a2[v225];
        v228 = *((_QWORD *)v227 + 1);
        *(_QWORD *)v226 = *(_QWORD *)v227;
        *((_QWORD *)v226 + 1) = v228;
        v229 = v94[15];
        v230 = &a1[v229];
        v231 = &a2[v229];
        *(_QWORD *)v230 = *(_QWORD *)v231;
        v230[8] = v231[8];
        v232 = v94[16];
        v233 = &a1[v232];
        v234 = &a2[v232];
        v235 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v247 + 48);
        swift_bridgeObjectRetain(v224);
        v236 = swift_bridgeObjectRetain(v228);
        if (v235(v234, 1, v92, v236))
        {
          v237 = sub_1000080B4((uint64_t *)&unk_1002904F0);
          memcpy(v233, v234, *(_QWORD *)(*(_QWORD *)(v237 - 8) + 64));
        }
        else
        {
          v242(v233, v234, v92);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v247 + 56))(v233, 0, 1, v92);
        }
        swift_storeEnumTagMultiPayload(a1, a3, 6);
        break;
      case 8u:
        v111 = type metadata accessor for UUID(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v111 - 8) + 16))(a1, a2, v111);
        v112 = *(int *)(sub_1000080B4(&qword_100295030) + 48);
        v113 = &a1[v112];
        v114 = &a2[v112];
        v115 = *((_QWORD *)v114 + 1);
        *(_QWORD *)v113 = *(_QWORD *)v114;
        *((_QWORD *)v113 + 1) = v115;
        swift_bridgeObjectRetain(v115);
        swift_storeEnumTagMultiPayload(a1, a3, 8);
        break;
      case 9u:
        v116 = type metadata accessor for UUID(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v116 - 8) + 16))(a1, a2, v116);
        v117 = *(int *)(sub_1000080B4(&qword_100295030) + 48);
        v118 = &a1[v117];
        v119 = &a2[v117];
        v120 = *((_QWORD *)v119 + 1);
        *(_QWORD *)v118 = *(_QWORD *)v119;
        *((_QWORD *)v118 + 1) = v120;
        swift_bridgeObjectRetain(v120);
        swift_storeEnumTagMultiPayload(a1, a3, 9);
        break;
      case 0xAu:
        v121 = *(void **)a2;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        v122 = v121;
        swift_storeEnumTagMultiPayload(a1, a3, 10);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(v5 + 64));
        break;
    }
  }
  return a1;
}

void sub_100173DD0(id *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int *v5;
  uint64_t *v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  id v12;
  void (*v13)(id *, uint64_t);

  switch(swift_getEnumCaseMultiPayload(a1, a2))
  {
    case 0u:
      v11 = type metadata accessor for UUID(0);
      (*(void (**)(id *, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(a1, v11);
      v10 = (uint64_t *)&unk_100295040;
      goto LABEL_9;
    case 1u:
    case 2u:
    case 3u:
    case 5u:
    case 6u:
      v3 = type metadata accessor for UUID(0);
      v4 = *(_QWORD *)(v3 - 8);
      v13 = *(void (**)(id *, uint64_t))(v4 + 8);
      v13(a1, v3);
      v5 = (int *)type metadata accessor for CustodianRecord(0);
      v13((id *)((char *)a1 + v5[5]), v3);
      swift_bridgeObjectRelease(*(id *)((char *)a1 + v5[6] + 8));
      swift_bridgeObjectRelease(*(id *)((char *)a1 + v5[7] + 8));
      swift_bridgeObjectRelease(*(id *)((char *)a1 + v5[8] + 8));
      v6 = (uint64_t *)((char *)a1 + v5[10]);
      v7 = v6[1];
      if (v7 >> 60 != 15)
        sub_10000F494(*v6, v7);
      sub_10000F494(*(uint64_t *)((char *)a1 + v5[11]), *(unint64_t *)((char *)a1 + v5[11] + 8));
      swift_bridgeObjectRelease(*(id *)((char *)a1 + v5[13] + 8));
      swift_bridgeObjectRelease(*(id *)((char *)a1 + v5[14] + 8));
      v8 = (char *)a1 + v5[16];
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v8, 1, v3))
        v13((id *)v8, v3);
      return;
    case 4u:
      v12 = *a1;
      goto LABEL_11;
    case 8u:
    case 9u:
      v9 = type metadata accessor for UUID(0);
      (*(void (**)(id *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(a1, v9);
      v10 = &qword_100295030;
LABEL_9:
      v12 = *(id *)((char *)a1 + *(int *)(sub_1000080B4(v10) + 48) + 8);
LABEL_11:
      swift_bridgeObjectRelease(v12);
      break;
    case 0xAu:

      break;
    default:
      return;
  }
}

_QWORD *sub_100173FBC(_QWORD *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  char *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t);
  int *v16;
  uint64_t v17;
  _QWORD *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  void (*v34)(char *, char *, uint64_t);
  int *v35;
  uint64_t v36;
  _QWORD *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  void (*v53)(char *, char *, uint64_t);
  int *v54;
  uint64_t v55;
  _QWORD *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t *v69;
  unint64_t v70;
  void *v71;
  uint64_t v72;
  void (*v73)(char *, char *, uint64_t);
  int *v74;
  uint64_t v75;
  _QWORD *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t *v89;
  unint64_t v90;
  uint64_t v91;
  void (*v92)(char *, char *, uint64_t);
  int *v93;
  uint64_t v94;
  _QWORD *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t *v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _QWORD *v117;
  char *v118;
  uint64_t v119;
  void *v120;
  id v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t *v124;
  uint64_t *v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  _QWORD *v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  char *v138;
  uint64_t v139;
  char *v140;
  char *v141;
  unsigned int (*v142)(char *, uint64_t, uint64_t, __n128);
  __n128 v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t *v147;
  uint64_t *v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  _QWORD *v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  _QWORD *v156;
  char *v157;
  uint64_t v158;
  uint64_t v159;
  char *v160;
  char *v161;
  uint64_t v162;
  char *v163;
  char *v164;
  unsigned int (*v165)(char *, uint64_t, uint64_t, __n128);
  __n128 v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t *v170;
  uint64_t *v171;
  uint64_t v172;
  unint64_t v173;
  uint64_t v174;
  _QWORD *v175;
  char *v176;
  uint64_t v177;
  uint64_t v178;
  _QWORD *v179;
  char *v180;
  uint64_t v181;
  uint64_t v182;
  char *v183;
  char *v184;
  uint64_t v185;
  char *v186;
  char *v187;
  unsigned int (*v188)(char *, uint64_t, uint64_t, __n128);
  __n128 v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t *v193;
  uint64_t *v194;
  uint64_t v195;
  unint64_t v196;
  uint64_t v197;
  _QWORD *v198;
  char *v199;
  uint64_t v200;
  uint64_t v201;
  _QWORD *v202;
  char *v203;
  uint64_t v204;
  uint64_t v205;
  char *v206;
  char *v207;
  uint64_t v208;
  char *v209;
  char *v210;
  unsigned int (*v211)(char *, uint64_t, uint64_t, __n128);
  __n128 v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t *v216;
  uint64_t *v217;
  uint64_t v218;
  unint64_t v219;
  uint64_t v220;
  _QWORD *v221;
  char *v222;
  uint64_t v223;
  uint64_t v224;
  _QWORD *v225;
  char *v226;
  uint64_t v227;
  uint64_t v228;
  char *v229;
  char *v230;
  uint64_t v231;
  char *v232;
  char *v233;
  unsigned int (*v234)(char *, uint64_t, uint64_t, __n128);
  __n128 v235;
  uint64_t v236;
  void (*v238)(char *, char *, uint64_t);
  void (*v239)(char *, char *, uint64_t);
  void (*v240)(char *, char *, uint64_t);
  void (*v241)(char *, char *, uint64_t);
  void (*v242)(char *, char *, uint64_t);
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;

  switch(swift_getEnumCaseMultiPayload(a2, a3))
  {
    case 0u:
      v6 = type metadata accessor for UUID(0);
      (*(void (**)(_QWORD *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
      v7 = *(int *)(sub_1000080B4((uint64_t *)&unk_100295040) + 48);
      v8 = (_QWORD *)((char *)a1 + v7);
      v9 = &a2[v7];
      v10 = *((_QWORD *)v9 + 1);
      *v8 = *(_QWORD *)v9;
      v8[1] = v10;
      swift_bridgeObjectRetain(v10);
      v11 = a1;
      v12 = a3;
      v13 = 0;
      goto LABEL_43;
    case 1u:
      v14 = type metadata accessor for UUID(0);
      v243 = *(_QWORD *)(v14 - 8);
      v15 = *(void (**)(char *, char *, uint64_t))(v243 + 16);
      v15((char *)a1, a2, v14);
      v16 = (int *)type metadata accessor for CustodianRecord(0);
      v238 = v15;
      v15((char *)a1 + v16[5], &a2[v16[5]], v14);
      v17 = v16[6];
      v18 = (_QWORD *)((char *)a1 + v17);
      v19 = &a2[v17];
      v20 = *((_QWORD *)v19 + 1);
      *v18 = *(_QWORD *)v19;
      v18[1] = v20;
      v21 = v16[7];
      v22 = (_QWORD *)((char *)a1 + v21);
      v23 = &a2[v21];
      v24 = *((_QWORD *)v23 + 1);
      *v22 = *(_QWORD *)v23;
      v22[1] = v24;
      v25 = v16[8];
      v26 = (_QWORD *)((char *)a1 + v25);
      v27 = &a2[v25];
      v28 = *((_QWORD *)v27 + 1);
      *v26 = *(_QWORD *)v27;
      v26[1] = v28;
      *(_QWORD *)((char *)a1 + v16[9]) = *(_QWORD *)&a2[v16[9]];
      v29 = v16[10];
      v30 = (char *)a1 + v29;
      v31 = (uint64_t *)&a2[v29];
      v32 = *(_QWORD *)&a2[v29 + 8];
      swift_bridgeObjectRetain(v20);
      swift_bridgeObjectRetain(v24);
      swift_bridgeObjectRetain(v28);
      if (v32 >> 60 == 15)
      {
        *(_OWORD *)v30 = *(_OWORD *)v31;
      }
      else
      {
        v122 = *v31;
        sub_10000F450(*v31, v32);
        *(_QWORD *)v30 = v122;
        *((_QWORD *)v30 + 1) = v32;
      }
      v123 = v16[11];
      v124 = (_QWORD *)((char *)a1 + v123);
      v125 = (uint64_t *)&a2[v123];
      v126 = *v125;
      v127 = v125[1];
      sub_10000F450(*v125, v127);
      *v124 = v126;
      v124[1] = v127;
      *((_BYTE *)a1 + v16[12]) = a2[v16[12]];
      v128 = v16[13];
      v129 = (_QWORD *)((char *)a1 + v128);
      v130 = &a2[v128];
      v131 = *((_QWORD *)v130 + 1);
      *v129 = *(_QWORD *)v130;
      v129[1] = v131;
      v132 = v16[14];
      v133 = (_QWORD *)((char *)a1 + v132);
      v134 = &a2[v132];
      v135 = *((_QWORD *)v134 + 1);
      *v133 = *(_QWORD *)v134;
      v133[1] = v135;
      v136 = v16[15];
      v137 = (char *)a1 + v136;
      v138 = &a2[v136];
      *(_QWORD *)v137 = *(_QWORD *)v138;
      v137[8] = v138[8];
      v139 = v16[16];
      v140 = (char *)a1 + v139;
      v141 = &a2[v139];
      v142 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v243 + 48);
      swift_bridgeObjectRetain(v131);
      v143 = swift_bridgeObjectRetain(v135);
      if (v142(v141, 1, v14, v143))
      {
        v144 = sub_1000080B4((uint64_t *)&unk_1002904F0);
        memcpy(v140, v141, *(_QWORD *)(*(_QWORD *)(v144 - 8) + 64));
      }
      else
      {
        v238(v140, v141, v14);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v243 + 56))(v140, 0, 1, v14);
      }
      v11 = a1;
      v12 = a3;
      v13 = 1;
      goto LABEL_43;
    case 2u:
      v33 = type metadata accessor for UUID(0);
      v244 = *(_QWORD *)(v33 - 8);
      v34 = *(void (**)(char *, char *, uint64_t))(v244 + 16);
      v34((char *)a1, a2, v33);
      v35 = (int *)type metadata accessor for CustodianRecord(0);
      v239 = v34;
      v34((char *)a1 + v35[5], &a2[v35[5]], v33);
      v36 = v35[6];
      v37 = (_QWORD *)((char *)a1 + v36);
      v38 = &a2[v36];
      v39 = *((_QWORD *)v38 + 1);
      *v37 = *(_QWORD *)v38;
      v37[1] = v39;
      v40 = v35[7];
      v41 = (_QWORD *)((char *)a1 + v40);
      v42 = &a2[v40];
      v43 = *((_QWORD *)v42 + 1);
      *v41 = *(_QWORD *)v42;
      v41[1] = v43;
      v44 = v35[8];
      v45 = (_QWORD *)((char *)a1 + v44);
      v46 = &a2[v44];
      v47 = *((_QWORD *)v46 + 1);
      *v45 = *(_QWORD *)v46;
      v45[1] = v47;
      *(_QWORD *)((char *)a1 + v35[9]) = *(_QWORD *)&a2[v35[9]];
      v48 = v35[10];
      v49 = (char *)a1 + v48;
      v50 = (uint64_t *)&a2[v48];
      v51 = *(_QWORD *)&a2[v48 + 8];
      swift_bridgeObjectRetain(v39);
      swift_bridgeObjectRetain(v43);
      swift_bridgeObjectRetain(v47);
      if (v51 >> 60 == 15)
      {
        *(_OWORD *)v49 = *(_OWORD *)v50;
      }
      else
      {
        v145 = *v50;
        sub_10000F450(*v50, v51);
        *(_QWORD *)v49 = v145;
        *((_QWORD *)v49 + 1) = v51;
      }
      v146 = v35[11];
      v147 = (_QWORD *)((char *)a1 + v146);
      v148 = (uint64_t *)&a2[v146];
      v149 = *v148;
      v150 = v148[1];
      sub_10000F450(*v148, v150);
      *v147 = v149;
      v147[1] = v150;
      *((_BYTE *)a1 + v35[12]) = a2[v35[12]];
      v151 = v35[13];
      v152 = (_QWORD *)((char *)a1 + v151);
      v153 = &a2[v151];
      v154 = *((_QWORD *)v153 + 1);
      *v152 = *(_QWORD *)v153;
      v152[1] = v154;
      v155 = v35[14];
      v156 = (_QWORD *)((char *)a1 + v155);
      v157 = &a2[v155];
      v158 = *((_QWORD *)v157 + 1);
      *v156 = *(_QWORD *)v157;
      v156[1] = v158;
      v159 = v35[15];
      v160 = (char *)a1 + v159;
      v161 = &a2[v159];
      *(_QWORD *)v160 = *(_QWORD *)v161;
      v160[8] = v161[8];
      v162 = v35[16];
      v163 = (char *)a1 + v162;
      v164 = &a2[v162];
      v165 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v244 + 48);
      swift_bridgeObjectRetain(v154);
      v166 = swift_bridgeObjectRetain(v158);
      if (v165(v164, 1, v33, v166))
      {
        v167 = sub_1000080B4((uint64_t *)&unk_1002904F0);
        memcpy(v163, v164, *(_QWORD *)(*(_QWORD *)(v167 - 8) + 64));
      }
      else
      {
        v239(v163, v164, v33);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v244 + 56))(v163, 0, 1, v33);
      }
      v11 = a1;
      v12 = a3;
      v13 = 2;
      goto LABEL_43;
    case 3u:
      v52 = type metadata accessor for UUID(0);
      v245 = *(_QWORD *)(v52 - 8);
      v53 = *(void (**)(char *, char *, uint64_t))(v245 + 16);
      v53((char *)a1, a2, v52);
      v54 = (int *)type metadata accessor for CustodianRecord(0);
      v240 = v53;
      v53((char *)a1 + v54[5], &a2[v54[5]], v52);
      v55 = v54[6];
      v56 = (_QWORD *)((char *)a1 + v55);
      v57 = &a2[v55];
      v58 = *((_QWORD *)v57 + 1);
      *v56 = *(_QWORD *)v57;
      v56[1] = v58;
      v59 = v54[7];
      v60 = (_QWORD *)((char *)a1 + v59);
      v61 = &a2[v59];
      v62 = *((_QWORD *)v61 + 1);
      *v60 = *(_QWORD *)v61;
      v60[1] = v62;
      v63 = v54[8];
      v64 = (_QWORD *)((char *)a1 + v63);
      v65 = &a2[v63];
      v66 = *((_QWORD *)v65 + 1);
      *v64 = *(_QWORD *)v65;
      v64[1] = v66;
      *(_QWORD *)((char *)a1 + v54[9]) = *(_QWORD *)&a2[v54[9]];
      v67 = v54[10];
      v68 = (char *)a1 + v67;
      v69 = (uint64_t *)&a2[v67];
      v70 = *(_QWORD *)&a2[v67 + 8];
      swift_bridgeObjectRetain(v58);
      swift_bridgeObjectRetain(v62);
      swift_bridgeObjectRetain(v66);
      if (v70 >> 60 == 15)
      {
        *(_OWORD *)v68 = *(_OWORD *)v69;
      }
      else
      {
        v168 = *v69;
        sub_10000F450(*v69, v70);
        *(_QWORD *)v68 = v168;
        *((_QWORD *)v68 + 1) = v70;
      }
      v169 = v54[11];
      v170 = (_QWORD *)((char *)a1 + v169);
      v171 = (uint64_t *)&a2[v169];
      v172 = *v171;
      v173 = v171[1];
      sub_10000F450(*v171, v173);
      *v170 = v172;
      v170[1] = v173;
      *((_BYTE *)a1 + v54[12]) = a2[v54[12]];
      v174 = v54[13];
      v175 = (_QWORD *)((char *)a1 + v174);
      v176 = &a2[v174];
      v177 = *((_QWORD *)v176 + 1);
      *v175 = *(_QWORD *)v176;
      v175[1] = v177;
      v178 = v54[14];
      v179 = (_QWORD *)((char *)a1 + v178);
      v180 = &a2[v178];
      v181 = *((_QWORD *)v180 + 1);
      *v179 = *(_QWORD *)v180;
      v179[1] = v181;
      v182 = v54[15];
      v183 = (char *)a1 + v182;
      v184 = &a2[v182];
      *(_QWORD *)v183 = *(_QWORD *)v184;
      v183[8] = v184[8];
      v185 = v54[16];
      v186 = (char *)a1 + v185;
      v187 = &a2[v185];
      v188 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v245 + 48);
      swift_bridgeObjectRetain(v177);
      v189 = swift_bridgeObjectRetain(v181);
      if (v188(v187, 1, v52, v189))
      {
        v190 = sub_1000080B4((uint64_t *)&unk_1002904F0);
        memcpy(v186, v187, *(_QWORD *)(*(_QWORD *)(v190 - 8) + 64));
      }
      else
      {
        v240(v186, v187, v52);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v245 + 56))(v186, 0, 1, v52);
      }
      v11 = a1;
      v12 = a3;
      v13 = 3;
      goto LABEL_43;
    case 4u:
      v71 = *(void **)a2;
      *a1 = *(_QWORD *)a2;
      swift_bridgeObjectRetain(v71);
      v11 = a1;
      v12 = a3;
      v13 = 4;
      goto LABEL_43;
    case 5u:
      v72 = type metadata accessor for UUID(0);
      v246 = *(_QWORD *)(v72 - 8);
      v73 = *(void (**)(char *, char *, uint64_t))(v246 + 16);
      v73((char *)a1, a2, v72);
      v74 = (int *)type metadata accessor for CustodianRecord(0);
      v241 = v73;
      v73((char *)a1 + v74[5], &a2[v74[5]], v72);
      v75 = v74[6];
      v76 = (_QWORD *)((char *)a1 + v75);
      v77 = &a2[v75];
      v78 = *((_QWORD *)v77 + 1);
      *v76 = *(_QWORD *)v77;
      v76[1] = v78;
      v79 = v74[7];
      v80 = (_QWORD *)((char *)a1 + v79);
      v81 = &a2[v79];
      v82 = *((_QWORD *)v81 + 1);
      *v80 = *(_QWORD *)v81;
      v80[1] = v82;
      v83 = v74[8];
      v84 = (_QWORD *)((char *)a1 + v83);
      v85 = &a2[v83];
      v86 = *((_QWORD *)v85 + 1);
      *v84 = *(_QWORD *)v85;
      v84[1] = v86;
      *(_QWORD *)((char *)a1 + v74[9]) = *(_QWORD *)&a2[v74[9]];
      v87 = v74[10];
      v88 = (char *)a1 + v87;
      v89 = (uint64_t *)&a2[v87];
      v90 = *(_QWORD *)&a2[v87 + 8];
      swift_bridgeObjectRetain(v78);
      swift_bridgeObjectRetain(v82);
      swift_bridgeObjectRetain(v86);
      if (v90 >> 60 == 15)
      {
        *(_OWORD *)v88 = *(_OWORD *)v89;
      }
      else
      {
        v191 = *v89;
        sub_10000F450(*v89, v90);
        *(_QWORD *)v88 = v191;
        *((_QWORD *)v88 + 1) = v90;
      }
      v192 = v74[11];
      v193 = (_QWORD *)((char *)a1 + v192);
      v194 = (uint64_t *)&a2[v192];
      v195 = *v194;
      v196 = v194[1];
      sub_10000F450(*v194, v196);
      *v193 = v195;
      v193[1] = v196;
      *((_BYTE *)a1 + v74[12]) = a2[v74[12]];
      v197 = v74[13];
      v198 = (_QWORD *)((char *)a1 + v197);
      v199 = &a2[v197];
      v200 = *((_QWORD *)v199 + 1);
      *v198 = *(_QWORD *)v199;
      v198[1] = v200;
      v201 = v74[14];
      v202 = (_QWORD *)((char *)a1 + v201);
      v203 = &a2[v201];
      v204 = *((_QWORD *)v203 + 1);
      *v202 = *(_QWORD *)v203;
      v202[1] = v204;
      v205 = v74[15];
      v206 = (char *)a1 + v205;
      v207 = &a2[v205];
      *(_QWORD *)v206 = *(_QWORD *)v207;
      v206[8] = v207[8];
      v208 = v74[16];
      v209 = (char *)a1 + v208;
      v210 = &a2[v208];
      v211 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v246 + 48);
      swift_bridgeObjectRetain(v200);
      v212 = swift_bridgeObjectRetain(v204);
      if (v211(v210, 1, v72, v212))
      {
        v213 = sub_1000080B4((uint64_t *)&unk_1002904F0);
        memcpy(v209, v210, *(_QWORD *)(*(_QWORD *)(v213 - 8) + 64));
      }
      else
      {
        v241(v209, v210, v72);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v246 + 56))(v209, 0, 1, v72);
      }
      v11 = a1;
      v12 = a3;
      v13 = 5;
      goto LABEL_43;
    case 6u:
      v91 = type metadata accessor for UUID(0);
      v247 = *(_QWORD *)(v91 - 8);
      v92 = *(void (**)(char *, char *, uint64_t))(v247 + 16);
      v92((char *)a1, a2, v91);
      v93 = (int *)type metadata accessor for CustodianRecord(0);
      v242 = v92;
      v92((char *)a1 + v93[5], &a2[v93[5]], v91);
      v94 = v93[6];
      v95 = (_QWORD *)((char *)a1 + v94);
      v96 = &a2[v94];
      v97 = *((_QWORD *)v96 + 1);
      *v95 = *(_QWORD *)v96;
      v95[1] = v97;
      v98 = v93[7];
      v99 = (_QWORD *)((char *)a1 + v98);
      v100 = &a2[v98];
      v101 = *((_QWORD *)v100 + 1);
      *v99 = *(_QWORD *)v100;
      v99[1] = v101;
      v102 = v93[8];
      v103 = (_QWORD *)((char *)a1 + v102);
      v104 = &a2[v102];
      v105 = *((_QWORD *)v104 + 1);
      *v103 = *(_QWORD *)v104;
      v103[1] = v105;
      *(_QWORD *)((char *)a1 + v93[9]) = *(_QWORD *)&a2[v93[9]];
      v106 = v93[10];
      v107 = (char *)a1 + v106;
      v108 = (uint64_t *)&a2[v106];
      v109 = *(_QWORD *)&a2[v106 + 8];
      swift_bridgeObjectRetain(v97);
      swift_bridgeObjectRetain(v101);
      swift_bridgeObjectRetain(v105);
      if (v109 >> 60 == 15)
      {
        *(_OWORD *)v107 = *(_OWORD *)v108;
      }
      else
      {
        v214 = *v108;
        sub_10000F450(*v108, v109);
        *(_QWORD *)v107 = v214;
        *((_QWORD *)v107 + 1) = v109;
      }
      v215 = v93[11];
      v216 = (_QWORD *)((char *)a1 + v215);
      v217 = (uint64_t *)&a2[v215];
      v218 = *v217;
      v219 = v217[1];
      sub_10000F450(*v217, v219);
      *v216 = v218;
      v216[1] = v219;
      *((_BYTE *)a1 + v93[12]) = a2[v93[12]];
      v220 = v93[13];
      v221 = (_QWORD *)((char *)a1 + v220);
      v222 = &a2[v220];
      v223 = *((_QWORD *)v222 + 1);
      *v221 = *(_QWORD *)v222;
      v221[1] = v223;
      v224 = v93[14];
      v225 = (_QWORD *)((char *)a1 + v224);
      v226 = &a2[v224];
      v227 = *((_QWORD *)v226 + 1);
      *v225 = *(_QWORD *)v226;
      v225[1] = v227;
      v228 = v93[15];
      v229 = (char *)a1 + v228;
      v230 = &a2[v228];
      *(_QWORD *)v229 = *(_QWORD *)v230;
      v229[8] = v230[8];
      v231 = v93[16];
      v232 = (char *)a1 + v231;
      v233 = &a2[v231];
      v234 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v247 + 48);
      swift_bridgeObjectRetain(v223);
      v235 = swift_bridgeObjectRetain(v227);
      if (v234(v233, 1, v91, v235))
      {
        v236 = sub_1000080B4((uint64_t *)&unk_1002904F0);
        memcpy(v232, v233, *(_QWORD *)(*(_QWORD *)(v236 - 8) + 64));
      }
      else
      {
        v242(v232, v233, v91);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v247 + 56))(v232, 0, 1, v91);
      }
      v11 = a1;
      v12 = a3;
      v13 = 6;
      goto LABEL_43;
    case 8u:
      v110 = type metadata accessor for UUID(0);
      (*(void (**)(_QWORD *, char *, uint64_t))(*(_QWORD *)(v110 - 8) + 16))(a1, a2, v110);
      v111 = *(int *)(sub_1000080B4(&qword_100295030) + 48);
      v112 = (_QWORD *)((char *)a1 + v111);
      v113 = &a2[v111];
      v114 = *((_QWORD *)v113 + 1);
      *v112 = *(_QWORD *)v113;
      v112[1] = v114;
      swift_bridgeObjectRetain(v114);
      v11 = a1;
      v12 = a3;
      v13 = 8;
      goto LABEL_43;
    case 9u:
      v115 = type metadata accessor for UUID(0);
      (*(void (**)(_QWORD *, char *, uint64_t))(*(_QWORD *)(v115 - 8) + 16))(a1, a2, v115);
      v116 = *(int *)(sub_1000080B4(&qword_100295030) + 48);
      v117 = (_QWORD *)((char *)a1 + v116);
      v118 = &a2[v116];
      v119 = *((_QWORD *)v118 + 1);
      *v117 = *(_QWORD *)v118;
      v117[1] = v119;
      swift_bridgeObjectRetain(v119);
      v11 = a1;
      v12 = a3;
      v13 = 9;
      goto LABEL_43;
    case 0xAu:
      v120 = *(void **)a2;
      *a1 = *(_QWORD *)a2;
      v121 = v120;
      v11 = a1;
      v12 = a3;
      v13 = 10;
LABEL_43:
      swift_storeEnumTagMultiPayload(v11, v12, v13);
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

char *sub_100174B10(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t);
  int *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  void (*v34)(char *, char *, uint64_t);
  int *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  void (*v53)(char *, char *, uint64_t);
  int *v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t *v69;
  unint64_t v70;
  void *v71;
  uint64_t v72;
  void (*v73)(char *, char *, uint64_t);
  int *v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t *v89;
  unint64_t v90;
  uint64_t v91;
  void (*v92)(char *, char *, uint64_t);
  int *v93;
  uint64_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t *v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  char *v118;
  uint64_t v119;
  void *v120;
  id v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t *v124;
  uint64_t *v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  char *v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  char *v142;
  unsigned int (*v143)(char *, uint64_t, uint64_t, __n128);
  __n128 v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t *v148;
  uint64_t *v149;
  uint64_t v150;
  unint64_t v151;
  uint64_t v152;
  char *v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  char *v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  char *v165;
  char *v166;
  unsigned int (*v167)(char *, uint64_t, uint64_t, __n128);
  __n128 v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t *v172;
  uint64_t *v173;
  uint64_t v174;
  unint64_t v175;
  uint64_t v176;
  char *v177;
  char *v178;
  uint64_t v179;
  uint64_t v180;
  char *v181;
  char *v182;
  uint64_t v183;
  uint64_t v184;
  char *v185;
  char *v186;
  uint64_t v187;
  uint64_t v188;
  char *v189;
  char *v190;
  unsigned int (*v191)(char *, uint64_t, uint64_t, __n128);
  __n128 v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t *v196;
  uint64_t *v197;
  uint64_t v198;
  unint64_t v199;
  uint64_t v200;
  char *v201;
  char *v202;
  uint64_t v203;
  uint64_t v204;
  char *v205;
  char *v206;
  uint64_t v207;
  uint64_t v208;
  char *v209;
  char *v210;
  uint64_t v211;
  uint64_t v212;
  char *v213;
  char *v214;
  unsigned int (*v215)(char *, uint64_t, uint64_t, __n128);
  __n128 v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t *v220;
  uint64_t *v221;
  uint64_t v222;
  unint64_t v223;
  uint64_t v224;
  char *v225;
  char *v226;
  uint64_t v227;
  uint64_t v228;
  char *v229;
  char *v230;
  uint64_t v231;
  uint64_t v232;
  char *v233;
  char *v234;
  uint64_t v235;
  uint64_t v236;
  char *v237;
  char *v238;
  unsigned int (*v239)(char *, uint64_t, uint64_t, __n128);
  __n128 v240;
  uint64_t v241;
  void (*v243)(char *, char *, uint64_t);
  void (*v244)(char *, char *, uint64_t);
  void (*v245)(char *, char *, uint64_t);
  void (*v246)(char *, char *, uint64_t);
  void (*v247)(char *, char *, uint64_t);
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;

  if (a1 != a2)
  {
    sub_100028388((uint64_t)a1, type metadata accessor for TrustedContactUserNotification);
    switch(swift_getEnumCaseMultiPayload(a2, a3))
    {
      case 0u:
        v6 = type metadata accessor for UUID(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
        v7 = *(int *)(sub_1000080B4((uint64_t *)&unk_100295040) + 48);
        v8 = &a1[v7];
        v9 = &a2[v7];
        *(_QWORD *)v8 = *(_QWORD *)v9;
        v10 = *((_QWORD *)v9 + 1);
        *((_QWORD *)v8 + 1) = v10;
        swift_bridgeObjectRetain(v10);
        v11 = a1;
        v12 = a3;
        v13 = 0;
        goto LABEL_44;
      case 1u:
        v14 = type metadata accessor for UUID(0);
        v248 = *(_QWORD *)(v14 - 8);
        v15 = *(void (**)(char *, char *, uint64_t))(v248 + 16);
        v15(a1, a2, v14);
        v16 = (int *)type metadata accessor for CustodianRecord(0);
        v243 = v15;
        v15(&a1[v16[5]], &a2[v16[5]], v14);
        v17 = v16[6];
        v18 = &a1[v17];
        v19 = &a2[v17];
        *(_QWORD *)v18 = *(_QWORD *)v19;
        v20 = *((_QWORD *)v19 + 1);
        *((_QWORD *)v18 + 1) = v20;
        v21 = v16[7];
        v22 = &a1[v21];
        v23 = &a2[v21];
        *(_QWORD *)v22 = *(_QWORD *)v23;
        v24 = *((_QWORD *)v23 + 1);
        *((_QWORD *)v22 + 1) = v24;
        v25 = v16[8];
        v26 = &a1[v25];
        v27 = &a2[v25];
        *(_QWORD *)v26 = *(_QWORD *)v27;
        v28 = *((_QWORD *)v27 + 1);
        *((_QWORD *)v26 + 1) = v28;
        *(_QWORD *)&a1[v16[9]] = *(_QWORD *)&a2[v16[9]];
        v29 = v16[10];
        v30 = &a1[v29];
        v31 = (uint64_t *)&a2[v29];
        v32 = *(_QWORD *)&a2[v29 + 8];
        swift_bridgeObjectRetain(v20);
        swift_bridgeObjectRetain(v24);
        swift_bridgeObjectRetain(v28);
        if (v32 >> 60 == 15)
        {
          *(_OWORD *)v30 = *(_OWORD *)v31;
        }
        else
        {
          v122 = *v31;
          sub_10000F450(*v31, v32);
          *(_QWORD *)v30 = v122;
          *((_QWORD *)v30 + 1) = v32;
        }
        v123 = v16[11];
        v124 = (uint64_t *)&a1[v123];
        v125 = (uint64_t *)&a2[v123];
        v126 = *v125;
        v127 = v125[1];
        sub_10000F450(*v125, v127);
        *v124 = v126;
        v124[1] = v127;
        a1[v16[12]] = a2[v16[12]];
        v128 = v16[13];
        v129 = &a1[v128];
        v130 = &a2[v128];
        *(_QWORD *)v129 = *(_QWORD *)v130;
        v131 = *((_QWORD *)v130 + 1);
        *((_QWORD *)v129 + 1) = v131;
        v132 = v16[14];
        v133 = &a1[v132];
        v134 = &a2[v132];
        *(_QWORD *)v133 = *(_QWORD *)v134;
        v135 = *((_QWORD *)v134 + 1);
        *((_QWORD *)v133 + 1) = v135;
        v136 = v16[15];
        v137 = &a1[v136];
        v138 = &a2[v136];
        v139 = *(_QWORD *)v138;
        v137[8] = v138[8];
        *(_QWORD *)v137 = v139;
        v140 = v16[16];
        v141 = &a1[v140];
        v142 = &a2[v140];
        v143 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v248 + 48);
        swift_bridgeObjectRetain(v131);
        v144 = swift_bridgeObjectRetain(v135);
        if (v143(v142, 1, v14, v144))
        {
          v145 = sub_1000080B4((uint64_t *)&unk_1002904F0);
          memcpy(v141, v142, *(_QWORD *)(*(_QWORD *)(v145 - 8) + 64));
        }
        else
        {
          v243(v141, v142, v14);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v248 + 56))(v141, 0, 1, v14);
        }
        v11 = a1;
        v12 = a3;
        v13 = 1;
        goto LABEL_44;
      case 2u:
        v33 = type metadata accessor for UUID(0);
        v249 = *(_QWORD *)(v33 - 8);
        v34 = *(void (**)(char *, char *, uint64_t))(v249 + 16);
        v34(a1, a2, v33);
        v35 = (int *)type metadata accessor for CustodianRecord(0);
        v244 = v34;
        v34(&a1[v35[5]], &a2[v35[5]], v33);
        v36 = v35[6];
        v37 = &a1[v36];
        v38 = &a2[v36];
        *(_QWORD *)v37 = *(_QWORD *)v38;
        v39 = *((_QWORD *)v38 + 1);
        *((_QWORD *)v37 + 1) = v39;
        v40 = v35[7];
        v41 = &a1[v40];
        v42 = &a2[v40];
        *(_QWORD *)v41 = *(_QWORD *)v42;
        v43 = *((_QWORD *)v42 + 1);
        *((_QWORD *)v41 + 1) = v43;
        v44 = v35[8];
        v45 = &a1[v44];
        v46 = &a2[v44];
        *(_QWORD *)v45 = *(_QWORD *)v46;
        v47 = *((_QWORD *)v46 + 1);
        *((_QWORD *)v45 + 1) = v47;
        *(_QWORD *)&a1[v35[9]] = *(_QWORD *)&a2[v35[9]];
        v48 = v35[10];
        v49 = &a1[v48];
        v50 = (uint64_t *)&a2[v48];
        v51 = *(_QWORD *)&a2[v48 + 8];
        swift_bridgeObjectRetain(v39);
        swift_bridgeObjectRetain(v43);
        swift_bridgeObjectRetain(v47);
        if (v51 >> 60 == 15)
        {
          *(_OWORD *)v49 = *(_OWORD *)v50;
        }
        else
        {
          v146 = *v50;
          sub_10000F450(*v50, v51);
          *(_QWORD *)v49 = v146;
          *((_QWORD *)v49 + 1) = v51;
        }
        v147 = v35[11];
        v148 = (uint64_t *)&a1[v147];
        v149 = (uint64_t *)&a2[v147];
        v150 = *v149;
        v151 = v149[1];
        sub_10000F450(*v149, v151);
        *v148 = v150;
        v148[1] = v151;
        a1[v35[12]] = a2[v35[12]];
        v152 = v35[13];
        v153 = &a1[v152];
        v154 = &a2[v152];
        *(_QWORD *)v153 = *(_QWORD *)v154;
        v155 = *((_QWORD *)v154 + 1);
        *((_QWORD *)v153 + 1) = v155;
        v156 = v35[14];
        v157 = &a1[v156];
        v158 = &a2[v156];
        *(_QWORD *)v157 = *(_QWORD *)v158;
        v159 = *((_QWORD *)v158 + 1);
        *((_QWORD *)v157 + 1) = v159;
        v160 = v35[15];
        v161 = &a1[v160];
        v162 = &a2[v160];
        v163 = *(_QWORD *)v162;
        v161[8] = v162[8];
        *(_QWORD *)v161 = v163;
        v164 = v35[16];
        v165 = &a1[v164];
        v166 = &a2[v164];
        v167 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v249 + 48);
        swift_bridgeObjectRetain(v155);
        v168 = swift_bridgeObjectRetain(v159);
        if (v167(v166, 1, v33, v168))
        {
          v169 = sub_1000080B4((uint64_t *)&unk_1002904F0);
          memcpy(v165, v166, *(_QWORD *)(*(_QWORD *)(v169 - 8) + 64));
        }
        else
        {
          v244(v165, v166, v33);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v249 + 56))(v165, 0, 1, v33);
        }
        v11 = a1;
        v12 = a3;
        v13 = 2;
        goto LABEL_44;
      case 3u:
        v52 = type metadata accessor for UUID(0);
        v250 = *(_QWORD *)(v52 - 8);
        v53 = *(void (**)(char *, char *, uint64_t))(v250 + 16);
        v53(a1, a2, v52);
        v54 = (int *)type metadata accessor for CustodianRecord(0);
        v245 = v53;
        v53(&a1[v54[5]], &a2[v54[5]], v52);
        v55 = v54[6];
        v56 = &a1[v55];
        v57 = &a2[v55];
        *(_QWORD *)v56 = *(_QWORD *)v57;
        v58 = *((_QWORD *)v57 + 1);
        *((_QWORD *)v56 + 1) = v58;
        v59 = v54[7];
        v60 = &a1[v59];
        v61 = &a2[v59];
        *(_QWORD *)v60 = *(_QWORD *)v61;
        v62 = *((_QWORD *)v61 + 1);
        *((_QWORD *)v60 + 1) = v62;
        v63 = v54[8];
        v64 = &a1[v63];
        v65 = &a2[v63];
        *(_QWORD *)v64 = *(_QWORD *)v65;
        v66 = *((_QWORD *)v65 + 1);
        *((_QWORD *)v64 + 1) = v66;
        *(_QWORD *)&a1[v54[9]] = *(_QWORD *)&a2[v54[9]];
        v67 = v54[10];
        v68 = &a1[v67];
        v69 = (uint64_t *)&a2[v67];
        v70 = *(_QWORD *)&a2[v67 + 8];
        swift_bridgeObjectRetain(v58);
        swift_bridgeObjectRetain(v62);
        swift_bridgeObjectRetain(v66);
        if (v70 >> 60 == 15)
        {
          *(_OWORD *)v68 = *(_OWORD *)v69;
        }
        else
        {
          v170 = *v69;
          sub_10000F450(*v69, v70);
          *(_QWORD *)v68 = v170;
          *((_QWORD *)v68 + 1) = v70;
        }
        v171 = v54[11];
        v172 = (uint64_t *)&a1[v171];
        v173 = (uint64_t *)&a2[v171];
        v174 = *v173;
        v175 = v173[1];
        sub_10000F450(*v173, v175);
        *v172 = v174;
        v172[1] = v175;
        a1[v54[12]] = a2[v54[12]];
        v176 = v54[13];
        v177 = &a1[v176];
        v178 = &a2[v176];
        *(_QWORD *)v177 = *(_QWORD *)v178;
        v179 = *((_QWORD *)v178 + 1);
        *((_QWORD *)v177 + 1) = v179;
        v180 = v54[14];
        v181 = &a1[v180];
        v182 = &a2[v180];
        *(_QWORD *)v181 = *(_QWORD *)v182;
        v183 = *((_QWORD *)v182 + 1);
        *((_QWORD *)v181 + 1) = v183;
        v184 = v54[15];
        v185 = &a1[v184];
        v186 = &a2[v184];
        v187 = *(_QWORD *)v186;
        v185[8] = v186[8];
        *(_QWORD *)v185 = v187;
        v188 = v54[16];
        v189 = &a1[v188];
        v190 = &a2[v188];
        v191 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v250 + 48);
        swift_bridgeObjectRetain(v179);
        v192 = swift_bridgeObjectRetain(v183);
        if (v191(v190, 1, v52, v192))
        {
          v193 = sub_1000080B4((uint64_t *)&unk_1002904F0);
          memcpy(v189, v190, *(_QWORD *)(*(_QWORD *)(v193 - 8) + 64));
        }
        else
        {
          v245(v189, v190, v52);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v250 + 56))(v189, 0, 1, v52);
        }
        v11 = a1;
        v12 = a3;
        v13 = 3;
        goto LABEL_44;
      case 4u:
        v71 = *(void **)a2;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        swift_bridgeObjectRetain(v71);
        v11 = a1;
        v12 = a3;
        v13 = 4;
        goto LABEL_44;
      case 5u:
        v72 = type metadata accessor for UUID(0);
        v251 = *(_QWORD *)(v72 - 8);
        v73 = *(void (**)(char *, char *, uint64_t))(v251 + 16);
        v73(a1, a2, v72);
        v74 = (int *)type metadata accessor for CustodianRecord(0);
        v246 = v73;
        v73(&a1[v74[5]], &a2[v74[5]], v72);
        v75 = v74[6];
        v76 = &a1[v75];
        v77 = &a2[v75];
        *(_QWORD *)v76 = *(_QWORD *)v77;
        v78 = *((_QWORD *)v77 + 1);
        *((_QWORD *)v76 + 1) = v78;
        v79 = v74[7];
        v80 = &a1[v79];
        v81 = &a2[v79];
        *(_QWORD *)v80 = *(_QWORD *)v81;
        v82 = *((_QWORD *)v81 + 1);
        *((_QWORD *)v80 + 1) = v82;
        v83 = v74[8];
        v84 = &a1[v83];
        v85 = &a2[v83];
        *(_QWORD *)v84 = *(_QWORD *)v85;
        v86 = *((_QWORD *)v85 + 1);
        *((_QWORD *)v84 + 1) = v86;
        *(_QWORD *)&a1[v74[9]] = *(_QWORD *)&a2[v74[9]];
        v87 = v74[10];
        v88 = &a1[v87];
        v89 = (uint64_t *)&a2[v87];
        v90 = *(_QWORD *)&a2[v87 + 8];
        swift_bridgeObjectRetain(v78);
        swift_bridgeObjectRetain(v82);
        swift_bridgeObjectRetain(v86);
        if (v90 >> 60 == 15)
        {
          *(_OWORD *)v88 = *(_OWORD *)v89;
        }
        else
        {
          v194 = *v89;
          sub_10000F450(*v89, v90);
          *(_QWORD *)v88 = v194;
          *((_QWORD *)v88 + 1) = v90;
        }
        v195 = v74[11];
        v196 = (uint64_t *)&a1[v195];
        v197 = (uint64_t *)&a2[v195];
        v198 = *v197;
        v199 = v197[1];
        sub_10000F450(*v197, v199);
        *v196 = v198;
        v196[1] = v199;
        a1[v74[12]] = a2[v74[12]];
        v200 = v74[13];
        v201 = &a1[v200];
        v202 = &a2[v200];
        *(_QWORD *)v201 = *(_QWORD *)v202;
        v203 = *((_QWORD *)v202 + 1);
        *((_QWORD *)v201 + 1) = v203;
        v204 = v74[14];
        v205 = &a1[v204];
        v206 = &a2[v204];
        *(_QWORD *)v205 = *(_QWORD *)v206;
        v207 = *((_QWORD *)v206 + 1);
        *((_QWORD *)v205 + 1) = v207;
        v208 = v74[15];
        v209 = &a1[v208];
        v210 = &a2[v208];
        v211 = *(_QWORD *)v210;
        v209[8] = v210[8];
        *(_QWORD *)v209 = v211;
        v212 = v74[16];
        v213 = &a1[v212];
        v214 = &a2[v212];
        v215 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v251 + 48);
        swift_bridgeObjectRetain(v203);
        v216 = swift_bridgeObjectRetain(v207);
        if (v215(v214, 1, v72, v216))
        {
          v217 = sub_1000080B4((uint64_t *)&unk_1002904F0);
          memcpy(v213, v214, *(_QWORD *)(*(_QWORD *)(v217 - 8) + 64));
        }
        else
        {
          v246(v213, v214, v72);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v251 + 56))(v213, 0, 1, v72);
        }
        v11 = a1;
        v12 = a3;
        v13 = 5;
        goto LABEL_44;
      case 6u:
        v91 = type metadata accessor for UUID(0);
        v252 = *(_QWORD *)(v91 - 8);
        v92 = *(void (**)(char *, char *, uint64_t))(v252 + 16);
        v92(a1, a2, v91);
        v93 = (int *)type metadata accessor for CustodianRecord(0);
        v247 = v92;
        v92(&a1[v93[5]], &a2[v93[5]], v91);
        v94 = v93[6];
        v95 = &a1[v94];
        v96 = &a2[v94];
        *(_QWORD *)v95 = *(_QWORD *)v96;
        v97 = *((_QWORD *)v96 + 1);
        *((_QWORD *)v95 + 1) = v97;
        v98 = v93[7];
        v99 = &a1[v98];
        v100 = &a2[v98];
        *(_QWORD *)v99 = *(_QWORD *)v100;
        v101 = *((_QWORD *)v100 + 1);
        *((_QWORD *)v99 + 1) = v101;
        v102 = v93[8];
        v103 = &a1[v102];
        v104 = &a2[v102];
        *(_QWORD *)v103 = *(_QWORD *)v104;
        v105 = *((_QWORD *)v104 + 1);
        *((_QWORD *)v103 + 1) = v105;
        *(_QWORD *)&a1[v93[9]] = *(_QWORD *)&a2[v93[9]];
        v106 = v93[10];
        v107 = &a1[v106];
        v108 = (uint64_t *)&a2[v106];
        v109 = *(_QWORD *)&a2[v106 + 8];
        swift_bridgeObjectRetain(v97);
        swift_bridgeObjectRetain(v101);
        swift_bridgeObjectRetain(v105);
        if (v109 >> 60 == 15)
        {
          *(_OWORD *)v107 = *(_OWORD *)v108;
        }
        else
        {
          v218 = *v108;
          sub_10000F450(*v108, v109);
          *(_QWORD *)v107 = v218;
          *((_QWORD *)v107 + 1) = v109;
        }
        v219 = v93[11];
        v220 = (uint64_t *)&a1[v219];
        v221 = (uint64_t *)&a2[v219];
        v222 = *v221;
        v223 = v221[1];
        sub_10000F450(*v221, v223);
        *v220 = v222;
        v220[1] = v223;
        a1[v93[12]] = a2[v93[12]];
        v224 = v93[13];
        v225 = &a1[v224];
        v226 = &a2[v224];
        *(_QWORD *)v225 = *(_QWORD *)v226;
        v227 = *((_QWORD *)v226 + 1);
        *((_QWORD *)v225 + 1) = v227;
        v228 = v93[14];
        v229 = &a1[v228];
        v230 = &a2[v228];
        *(_QWORD *)v229 = *(_QWORD *)v230;
        v231 = *((_QWORD *)v230 + 1);
        *((_QWORD *)v229 + 1) = v231;
        v232 = v93[15];
        v233 = &a1[v232];
        v234 = &a2[v232];
        v235 = *(_QWORD *)v234;
        v233[8] = v234[8];
        *(_QWORD *)v233 = v235;
        v236 = v93[16];
        v237 = &a1[v236];
        v238 = &a2[v236];
        v239 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v252 + 48);
        swift_bridgeObjectRetain(v227);
        v240 = swift_bridgeObjectRetain(v231);
        if (v239(v238, 1, v91, v240))
        {
          v241 = sub_1000080B4((uint64_t *)&unk_1002904F0);
          memcpy(v237, v238, *(_QWORD *)(*(_QWORD *)(v241 - 8) + 64));
        }
        else
        {
          v247(v237, v238, v91);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v252 + 56))(v237, 0, 1, v91);
        }
        v11 = a1;
        v12 = a3;
        v13 = 6;
        goto LABEL_44;
      case 8u:
        v110 = type metadata accessor for UUID(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v110 - 8) + 16))(a1, a2, v110);
        v111 = *(int *)(sub_1000080B4(&qword_100295030) + 48);
        v112 = &a1[v111];
        v113 = &a2[v111];
        *(_QWORD *)v112 = *(_QWORD *)v113;
        v114 = *((_QWORD *)v113 + 1);
        *((_QWORD *)v112 + 1) = v114;
        swift_bridgeObjectRetain(v114);
        v11 = a1;
        v12 = a3;
        v13 = 8;
        goto LABEL_44;
      case 9u:
        v115 = type metadata accessor for UUID(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v115 - 8) + 16))(a1, a2, v115);
        v116 = *(int *)(sub_1000080B4(&qword_100295030) + 48);
        v117 = &a1[v116];
        v118 = &a2[v116];
        *(_QWORD *)v117 = *(_QWORD *)v118;
        v119 = *((_QWORD *)v118 + 1);
        *((_QWORD *)v117 + 1) = v119;
        swift_bridgeObjectRetain(v119);
        v11 = a1;
        v12 = a3;
        v13 = 9;
        goto LABEL_44;
      case 0xAu:
        v120 = *(void **)a2;
        *(_QWORD *)a1 = *(_QWORD *)a2;
        v121 = v120;
        v11 = a1;
        v12 = a3;
        v13 = 10;
LABEL_44:
        swift_storeEnumTagMultiPayload(v11, v12, v13);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

_BYTE *sub_10017575C(_BYTE *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  int *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, char *, uint64_t);
  int *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, char *, uint64_t);
  int *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(char *, char *, uint64_t);
  int *v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(char *, char *, uint64_t);
  int *v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;

  switch(swift_getEnumCaseMultiPayload(a2, a3))
  {
    case 0u:
      v6 = type metadata accessor for UUID(0);
      (*(void (**)(_BYTE *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
      v7 = sub_1000080B4((uint64_t *)&unk_100295040);
      *(_OWORD *)&a1[*(int *)(v7 + 48)] = *(_OWORD *)&a2[*(int *)(v7 + 48)];
      v8 = a1;
      v9 = a3;
      v10 = 0;
      goto LABEL_26;
    case 1u:
      v11 = type metadata accessor for UUID(0);
      v12 = *(_QWORD *)(v11 - 8);
      v13 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
      v13(a1, a2, v11);
      v14 = (int *)type metadata accessor for CustodianRecord(0);
      v13(&a1[v14[5]], &a2[v14[5]], v11);
      *(_OWORD *)&a1[v14[6]] = *(_OWORD *)&a2[v14[6]];
      *(_OWORD *)&a1[v14[7]] = *(_OWORD *)&a2[v14[7]];
      *(_OWORD *)&a1[v14[8]] = *(_OWORD *)&a2[v14[8]];
      *(_QWORD *)&a1[v14[9]] = *(_QWORD *)&a2[v14[9]];
      *(_OWORD *)&a1[v14[10]] = *(_OWORD *)&a2[v14[10]];
      *(_OWORD *)&a1[v14[11]] = *(_OWORD *)&a2[v14[11]];
      a1[v14[12]] = a2[v14[12]];
      *(_OWORD *)&a1[v14[13]] = *(_OWORD *)&a2[v14[13]];
      *(_OWORD *)&a1[v14[14]] = *(_OWORD *)&a2[v14[14]];
      v15 = v14[15];
      v16 = &a1[v15];
      v17 = &a2[v15];
      *(_QWORD *)v16 = *(_QWORD *)v17;
      v16[8] = v17[8];
      v18 = v14[16];
      v19 = &a1[v18];
      v20 = &a2[v18];
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v20, 1, v11))
      {
        v21 = sub_1000080B4((uint64_t *)&unk_1002904F0);
        memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
      }
      else
      {
        v13(v19, v20, v11);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v19, 0, 1, v11);
      }
      v8 = a1;
      v9 = a3;
      v10 = 1;
      goto LABEL_26;
    case 2u:
      v22 = type metadata accessor for UUID(0);
      v23 = *(_QWORD *)(v22 - 8);
      v24 = *(void (**)(char *, char *, uint64_t))(v23 + 32);
      v24(a1, a2, v22);
      v25 = (int *)type metadata accessor for CustodianRecord(0);
      v24(&a1[v25[5]], &a2[v25[5]], v22);
      *(_OWORD *)&a1[v25[6]] = *(_OWORD *)&a2[v25[6]];
      *(_OWORD *)&a1[v25[7]] = *(_OWORD *)&a2[v25[7]];
      *(_OWORD *)&a1[v25[8]] = *(_OWORD *)&a2[v25[8]];
      *(_QWORD *)&a1[v25[9]] = *(_QWORD *)&a2[v25[9]];
      *(_OWORD *)&a1[v25[10]] = *(_OWORD *)&a2[v25[10]];
      *(_OWORD *)&a1[v25[11]] = *(_OWORD *)&a2[v25[11]];
      a1[v25[12]] = a2[v25[12]];
      *(_OWORD *)&a1[v25[13]] = *(_OWORD *)&a2[v25[13]];
      *(_OWORD *)&a1[v25[14]] = *(_OWORD *)&a2[v25[14]];
      v26 = v25[15];
      v27 = &a1[v26];
      v28 = &a2[v26];
      *(_QWORD *)v27 = *(_QWORD *)v28;
      v27[8] = v28[8];
      v29 = v25[16];
      v30 = &a1[v29];
      v31 = &a2[v29];
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v31, 1, v22))
      {
        v32 = sub_1000080B4((uint64_t *)&unk_1002904F0);
        memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
      }
      else
      {
        v24(v30, v31, v22);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v30, 0, 1, v22);
      }
      v8 = a1;
      v9 = a3;
      v10 = 2;
      goto LABEL_26;
    case 3u:
      v33 = type metadata accessor for UUID(0);
      v34 = *(_QWORD *)(v33 - 8);
      v35 = *(void (**)(char *, char *, uint64_t))(v34 + 32);
      v35(a1, a2, v33);
      v36 = (int *)type metadata accessor for CustodianRecord(0);
      v35(&a1[v36[5]], &a2[v36[5]], v33);
      *(_OWORD *)&a1[v36[6]] = *(_OWORD *)&a2[v36[6]];
      *(_OWORD *)&a1[v36[7]] = *(_OWORD *)&a2[v36[7]];
      *(_OWORD *)&a1[v36[8]] = *(_OWORD *)&a2[v36[8]];
      *(_QWORD *)&a1[v36[9]] = *(_QWORD *)&a2[v36[9]];
      *(_OWORD *)&a1[v36[10]] = *(_OWORD *)&a2[v36[10]];
      *(_OWORD *)&a1[v36[11]] = *(_OWORD *)&a2[v36[11]];
      a1[v36[12]] = a2[v36[12]];
      *(_OWORD *)&a1[v36[13]] = *(_OWORD *)&a2[v36[13]];
      *(_OWORD *)&a1[v36[14]] = *(_OWORD *)&a2[v36[14]];
      v37 = v36[15];
      v38 = &a1[v37];
      v39 = &a2[v37];
      *(_QWORD *)v38 = *(_QWORD *)v39;
      v38[8] = v39[8];
      v40 = v36[16];
      v41 = &a1[v40];
      v42 = &a2[v40];
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v42, 1, v33))
      {
        v43 = sub_1000080B4((uint64_t *)&unk_1002904F0);
        memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
      }
      else
      {
        v35(v41, v42, v33);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v41, 0, 1, v33);
      }
      v8 = a1;
      v9 = a3;
      v10 = 3;
      goto LABEL_26;
    case 5u:
      v44 = type metadata accessor for UUID(0);
      v45 = *(_QWORD *)(v44 - 8);
      v46 = *(void (**)(char *, char *, uint64_t))(v45 + 32);
      v46(a1, a2, v44);
      v47 = (int *)type metadata accessor for CustodianRecord(0);
      v46(&a1[v47[5]], &a2[v47[5]], v44);
      *(_OWORD *)&a1[v47[6]] = *(_OWORD *)&a2[v47[6]];
      *(_OWORD *)&a1[v47[7]] = *(_OWORD *)&a2[v47[7]];
      *(_OWORD *)&a1[v47[8]] = *(_OWORD *)&a2[v47[8]];
      *(_QWORD *)&a1[v47[9]] = *(_QWORD *)&a2[v47[9]];
      *(_OWORD *)&a1[v47[10]] = *(_OWORD *)&a2[v47[10]];
      *(_OWORD *)&a1[v47[11]] = *(_OWORD *)&a2[v47[11]];
      a1[v47[12]] = a2[v47[12]];
      *(_OWORD *)&a1[v47[13]] = *(_OWORD *)&a2[v47[13]];
      *(_OWORD *)&a1[v47[14]] = *(_OWORD *)&a2[v47[14]];
      v48 = v47[15];
      v49 = &a1[v48];
      v50 = &a2[v48];
      *(_QWORD *)v49 = *(_QWORD *)v50;
      v49[8] = v50[8];
      v51 = v47[16];
      v52 = &a1[v51];
      v53 = &a2[v51];
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48))(v53, 1, v44))
      {
        v54 = sub_1000080B4((uint64_t *)&unk_1002904F0);
        memcpy(v52, v53, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
      }
      else
      {
        v46(v52, v53, v44);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v45 + 56))(v52, 0, 1, v44);
      }
      v8 = a1;
      v9 = a3;
      v10 = 5;
      goto LABEL_26;
    case 6u:
      v55 = type metadata accessor for UUID(0);
      v56 = *(_QWORD *)(v55 - 8);
      v57 = *(void (**)(char *, char *, uint64_t))(v56 + 32);
      v57(a1, a2, v55);
      v58 = (int *)type metadata accessor for CustodianRecord(0);
      v57(&a1[v58[5]], &a2[v58[5]], v55);
      *(_OWORD *)&a1[v58[6]] = *(_OWORD *)&a2[v58[6]];
      *(_OWORD *)&a1[v58[7]] = *(_OWORD *)&a2[v58[7]];
      *(_OWORD *)&a1[v58[8]] = *(_OWORD *)&a2[v58[8]];
      *(_QWORD *)&a1[v58[9]] = *(_QWORD *)&a2[v58[9]];
      *(_OWORD *)&a1[v58[10]] = *(_OWORD *)&a2[v58[10]];
      *(_OWORD *)&a1[v58[11]] = *(_OWORD *)&a2[v58[11]];
      a1[v58[12]] = a2[v58[12]];
      *(_OWORD *)&a1[v58[13]] = *(_OWORD *)&a2[v58[13]];
      *(_OWORD *)&a1[v58[14]] = *(_OWORD *)&a2[v58[14]];
      v59 = v58[15];
      v60 = &a1[v59];
      v61 = &a2[v59];
      *(_QWORD *)v60 = *(_QWORD *)v61;
      v60[8] = v61[8];
      v62 = v58[16];
      v63 = &a1[v62];
      v64 = &a2[v62];
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v56 + 48))(v64, 1, v55))
      {
        v65 = sub_1000080B4((uint64_t *)&unk_1002904F0);
        memcpy(v63, v64, *(_QWORD *)(*(_QWORD *)(v65 - 8) + 64));
      }
      else
      {
        v57(v63, v64, v55);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v56 + 56))(v63, 0, 1, v55);
      }
      v8 = a1;
      v9 = a3;
      v10 = 6;
      goto LABEL_26;
    case 8u:
      v66 = type metadata accessor for UUID(0);
      (*(void (**)(_BYTE *, char *, uint64_t))(*(_QWORD *)(v66 - 8) + 32))(a1, a2, v66);
      v67 = sub_1000080B4(&qword_100295030);
      *(_OWORD *)&a1[*(int *)(v67 + 48)] = *(_OWORD *)&a2[*(int *)(v67 + 48)];
      v8 = a1;
      v9 = a3;
      v10 = 8;
      goto LABEL_26;
    case 9u:
      v68 = type metadata accessor for UUID(0);
      (*(void (**)(_BYTE *, char *, uint64_t))(*(_QWORD *)(v68 - 8) + 32))(a1, a2, v68);
      v69 = sub_1000080B4(&qword_100295030);
      *(_OWORD *)&a1[*(int *)(v69 + 48)] = *(_OWORD *)&a2[*(int *)(v69 + 48)];
      v8 = a1;
      v9 = a3;
      v10 = 9;
LABEL_26:
      swift_storeEnumTagMultiPayload(v8, v9, v10);
      break;
    default:
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
      break;
  }
  return a1;
}

char *sub_100175F38(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  int *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, char *, uint64_t);
  int *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, char *, uint64_t);
  int *v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(char *, char *, uint64_t);
  int *v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(char *, char *, uint64_t);
  int *v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;

  if (a1 != a2)
  {
    sub_100028388((uint64_t)a1, type metadata accessor for TrustedContactUserNotification);
    switch(swift_getEnumCaseMultiPayload(a2, a3))
    {
      case 0u:
        v6 = type metadata accessor for UUID(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
        v7 = sub_1000080B4((uint64_t *)&unk_100295040);
        *(_OWORD *)&a1[*(int *)(v7 + 48)] = *(_OWORD *)&a2[*(int *)(v7 + 48)];
        v8 = a1;
        v9 = a3;
        v10 = 0;
        goto LABEL_27;
      case 1u:
        v11 = type metadata accessor for UUID(0);
        v12 = *(_QWORD *)(v11 - 8);
        v13 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
        v13(a1, a2, v11);
        v14 = (int *)type metadata accessor for CustodianRecord(0);
        v13(&a1[v14[5]], &a2[v14[5]], v11);
        *(_OWORD *)&a1[v14[6]] = *(_OWORD *)&a2[v14[6]];
        *(_OWORD *)&a1[v14[7]] = *(_OWORD *)&a2[v14[7]];
        *(_OWORD *)&a1[v14[8]] = *(_OWORD *)&a2[v14[8]];
        *(_QWORD *)&a1[v14[9]] = *(_QWORD *)&a2[v14[9]];
        *(_OWORD *)&a1[v14[10]] = *(_OWORD *)&a2[v14[10]];
        *(_OWORD *)&a1[v14[11]] = *(_OWORD *)&a2[v14[11]];
        a1[v14[12]] = a2[v14[12]];
        *(_OWORD *)&a1[v14[13]] = *(_OWORD *)&a2[v14[13]];
        *(_OWORD *)&a1[v14[14]] = *(_OWORD *)&a2[v14[14]];
        v15 = v14[15];
        v16 = &a1[v15];
        v17 = &a2[v15];
        *(_QWORD *)v16 = *(_QWORD *)v17;
        v16[8] = v17[8];
        v18 = v14[16];
        v19 = &a1[v18];
        v20 = &a2[v18];
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v20, 1, v11))
        {
          v21 = sub_1000080B4((uint64_t *)&unk_1002904F0);
          memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
        }
        else
        {
          v13(v19, v20, v11);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v19, 0, 1, v11);
        }
        v8 = a1;
        v9 = a3;
        v10 = 1;
        goto LABEL_27;
      case 2u:
        v22 = type metadata accessor for UUID(0);
        v23 = *(_QWORD *)(v22 - 8);
        v24 = *(void (**)(char *, char *, uint64_t))(v23 + 32);
        v24(a1, a2, v22);
        v25 = (int *)type metadata accessor for CustodianRecord(0);
        v24(&a1[v25[5]], &a2[v25[5]], v22);
        *(_OWORD *)&a1[v25[6]] = *(_OWORD *)&a2[v25[6]];
        *(_OWORD *)&a1[v25[7]] = *(_OWORD *)&a2[v25[7]];
        *(_OWORD *)&a1[v25[8]] = *(_OWORD *)&a2[v25[8]];
        *(_QWORD *)&a1[v25[9]] = *(_QWORD *)&a2[v25[9]];
        *(_OWORD *)&a1[v25[10]] = *(_OWORD *)&a2[v25[10]];
        *(_OWORD *)&a1[v25[11]] = *(_OWORD *)&a2[v25[11]];
        a1[v25[12]] = a2[v25[12]];
        *(_OWORD *)&a1[v25[13]] = *(_OWORD *)&a2[v25[13]];
        *(_OWORD *)&a1[v25[14]] = *(_OWORD *)&a2[v25[14]];
        v26 = v25[15];
        v27 = &a1[v26];
        v28 = &a2[v26];
        *(_QWORD *)v27 = *(_QWORD *)v28;
        v27[8] = v28[8];
        v29 = v25[16];
        v30 = &a1[v29];
        v31 = &a2[v29];
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v31, 1, v22))
        {
          v32 = sub_1000080B4((uint64_t *)&unk_1002904F0);
          memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
        }
        else
        {
          v24(v30, v31, v22);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v30, 0, 1, v22);
        }
        v8 = a1;
        v9 = a3;
        v10 = 2;
        goto LABEL_27;
      case 3u:
        v33 = type metadata accessor for UUID(0);
        v34 = *(_QWORD *)(v33 - 8);
        v35 = *(void (**)(char *, char *, uint64_t))(v34 + 32);
        v35(a1, a2, v33);
        v36 = (int *)type metadata accessor for CustodianRecord(0);
        v35(&a1[v36[5]], &a2[v36[5]], v33);
        *(_OWORD *)&a1[v36[6]] = *(_OWORD *)&a2[v36[6]];
        *(_OWORD *)&a1[v36[7]] = *(_OWORD *)&a2[v36[7]];
        *(_OWORD *)&a1[v36[8]] = *(_OWORD *)&a2[v36[8]];
        *(_QWORD *)&a1[v36[9]] = *(_QWORD *)&a2[v36[9]];
        *(_OWORD *)&a1[v36[10]] = *(_OWORD *)&a2[v36[10]];
        *(_OWORD *)&a1[v36[11]] = *(_OWORD *)&a2[v36[11]];
        a1[v36[12]] = a2[v36[12]];
        *(_OWORD *)&a1[v36[13]] = *(_OWORD *)&a2[v36[13]];
        *(_OWORD *)&a1[v36[14]] = *(_OWORD *)&a2[v36[14]];
        v37 = v36[15];
        v38 = &a1[v37];
        v39 = &a2[v37];
        *(_QWORD *)v38 = *(_QWORD *)v39;
        v38[8] = v39[8];
        v40 = v36[16];
        v41 = &a1[v40];
        v42 = &a2[v40];
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v42, 1, v33))
        {
          v43 = sub_1000080B4((uint64_t *)&unk_1002904F0);
          memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
        }
        else
        {
          v35(v41, v42, v33);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v41, 0, 1, v33);
        }
        v8 = a1;
        v9 = a3;
        v10 = 3;
        goto LABEL_27;
      case 5u:
        v44 = type metadata accessor for UUID(0);
        v45 = *(_QWORD *)(v44 - 8);
        v46 = *(void (**)(char *, char *, uint64_t))(v45 + 32);
        v46(a1, a2, v44);
        v47 = (int *)type metadata accessor for CustodianRecord(0);
        v46(&a1[v47[5]], &a2[v47[5]], v44);
        *(_OWORD *)&a1[v47[6]] = *(_OWORD *)&a2[v47[6]];
        *(_OWORD *)&a1[v47[7]] = *(_OWORD *)&a2[v47[7]];
        *(_OWORD *)&a1[v47[8]] = *(_OWORD *)&a2[v47[8]];
        *(_QWORD *)&a1[v47[9]] = *(_QWORD *)&a2[v47[9]];
        *(_OWORD *)&a1[v47[10]] = *(_OWORD *)&a2[v47[10]];
        *(_OWORD *)&a1[v47[11]] = *(_OWORD *)&a2[v47[11]];
        a1[v47[12]] = a2[v47[12]];
        *(_OWORD *)&a1[v47[13]] = *(_OWORD *)&a2[v47[13]];
        *(_OWORD *)&a1[v47[14]] = *(_OWORD *)&a2[v47[14]];
        v48 = v47[15];
        v49 = &a1[v48];
        v50 = &a2[v48];
        *(_QWORD *)v49 = *(_QWORD *)v50;
        v49[8] = v50[8];
        v51 = v47[16];
        v52 = &a1[v51];
        v53 = &a2[v51];
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48))(v53, 1, v44))
        {
          v54 = sub_1000080B4((uint64_t *)&unk_1002904F0);
          memcpy(v52, v53, *(_QWORD *)(*(_QWORD *)(v54 - 8) + 64));
        }
        else
        {
          v46(v52, v53, v44);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v45 + 56))(v52, 0, 1, v44);
        }
        v8 = a1;
        v9 = a3;
        v10 = 5;
        goto LABEL_27;
      case 6u:
        v55 = type metadata accessor for UUID(0);
        v56 = *(_QWORD *)(v55 - 8);
        v57 = *(void (**)(char *, char *, uint64_t))(v56 + 32);
        v57(a1, a2, v55);
        v58 = (int *)type metadata accessor for CustodianRecord(0);
        v57(&a1[v58[5]], &a2[v58[5]], v55);
        *(_OWORD *)&a1[v58[6]] = *(_OWORD *)&a2[v58[6]];
        *(_OWORD *)&a1[v58[7]] = *(_OWORD *)&a2[v58[7]];
        *(_OWORD *)&a1[v58[8]] = *(_OWORD *)&a2[v58[8]];
        *(_QWORD *)&a1[v58[9]] = *(_QWORD *)&a2[v58[9]];
        *(_OWORD *)&a1[v58[10]] = *(_OWORD *)&a2[v58[10]];
        *(_OWORD *)&a1[v58[11]] = *(_OWORD *)&a2[v58[11]];
        a1[v58[12]] = a2[v58[12]];
        *(_OWORD *)&a1[v58[13]] = *(_OWORD *)&a2[v58[13]];
        *(_OWORD *)&a1[v58[14]] = *(_OWORD *)&a2[v58[14]];
        v59 = v58[15];
        v60 = &a1[v59];
        v61 = &a2[v59];
        *(_QWORD *)v60 = *(_QWORD *)v61;
        v60[8] = v61[8];
        v62 = v58[16];
        v63 = &a1[v62];
        v64 = &a2[v62];
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v56 + 48))(v64, 1, v55))
        {
          v65 = sub_1000080B4((uint64_t *)&unk_1002904F0);
          memcpy(v63, v64, *(_QWORD *)(*(_QWORD *)(v65 - 8) + 64));
        }
        else
        {
          v57(v63, v64, v55);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v56 + 56))(v63, 0, 1, v55);
        }
        v8 = a1;
        v9 = a3;
        v10 = 6;
        goto LABEL_27;
      case 8u:
        v66 = type metadata accessor for UUID(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v66 - 8) + 32))(a1, a2, v66);
        v67 = sub_1000080B4(&qword_100295030);
        *(_OWORD *)&a1[*(int *)(v67 + 48)] = *(_OWORD *)&a2[*(int *)(v67 + 48)];
        v8 = a1;
        v9 = a3;
        v10 = 8;
        goto LABEL_27;
      case 9u:
        v68 = type metadata accessor for UUID(0);
        (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v68 - 8) + 32))(a1, a2, v68);
        v69 = sub_1000080B4(&qword_100295030);
        *(_OWORD *)&a1[*(int *)(v69 + 48)] = *(_OWORD *)&a2[*(int *)(v69 + 48)];
        v8 = a1;
        v9 = a3;
        v10 = 9;
LABEL_27:
        swift_storeEnumTagMultiPayload(v8, v9, v10);
        break;
      default:
        memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
        break;
    }
  }
  return a1;
}

uint64_t sub_10017672C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a3 - 8) + 48))();
}

uint64_t sub_100176738(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a4 - 8) + 56))();
}

uint64_t sub_100176748(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_storeEnumTagMultiPayload(a1, a3, a2);
}

uint64_t sub_100176758(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _BYTE v6[32];
  _BYTE v7[32];
  _BYTE v8[32];
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  _BYTE *v17;
  _BYTE *v18;
  char *v19;

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    swift_getTupleTypeLayout2(v8, v4, &unk_10021F5F0);
    v9 = v8;
    result = type metadata accessor for CustodianRecord(319);
    if (v5 <= 0x3F)
    {
      v10 = *(_QWORD *)(result - 8) + 64;
      v11 = v10;
      v12 = v10;
      v13 = (char *)&value witness table for Builtin.BridgeObject + 64;
      v14 = v10;
      v15 = v10;
      v16 = &unk_10021F608;
      swift_getTupleTypeLayout2(v7, v4, &unk_10021F5F0);
      v17 = v7;
      swift_getTupleTypeLayout2(v6, v4, &unk_10021F5F0);
      v18 = v6;
      v19 = (char *)&value witness table for Builtin.UnknownObject + 64;
      swift_initEnumMetadataMultiPayload(a1, 256, 11, &v9);
      return 0;
    }
  }
  return result;
}

uint64_t sub_10017685C()
{
  return 1;
}

Swift::Int sub_100176864()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

void sub_1001768A4()
{
  Hasher._combine(_:)(0);
}

Swift::Int sub_1001768C8()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1);
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

uint64_t sub_100176904()
{
  return 1701869940;
}

uint64_t sub_100176914@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v6;
  uint64_t result;
  char v8;

  if (a1 == 1701869940 && a2 == 0xE400000000000000)
  {
    result = swift_bridgeObjectRelease(0xE400000000000000);
    v8 = 0;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)(1701869940, 0xE400000000000000, a1, a2, 0);
    result = swift_bridgeObjectRelease(a2);
    v8 = v6 ^ 1;
  }
  *a3 = v8 & 1;
  return result;
}

void sub_100176998(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_1001769A4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100177008();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001769CC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100177008();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001769F4()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 17, 7);
}

uint64_t sub_100176A04(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  char v16;

  v2 = v1;
  v4 = sub_1000080B4(&qword_1002951D8);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10000732C(a1, v9);
  v11 = sub_100177008();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for CustodianMessage.CodingKeys, &type metadata for CustodianMessage.CodingKeys, v11, v9, v10);
  v16 = *(_BYTE *)(v2 + 16);
  v12 = sub_100025CE0();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v16, v13, v4, &type metadata for MessageType, v12);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
}

uint64_t sub_100176B00(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v4 = sub_1000080B4(&qword_1002951C8);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10000732C(a1, v9);
  v11 = sub_100177008();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for CustodianMessage.CodingKeys, &type metadata for CustodianMessage.CodingKeys, v11, v9, v10);
  if (v2)
  {
    v14 = type metadata accessor for CustodianMessage();
    swift_deallocPartialClassInstance(v1, v14, 17, 7);
  }
  else
  {
    v12 = sub_100025C9C();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v17, &type metadata for MessageType, v13, v4, &type metadata for MessageType, v12);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    *(_BYTE *)(v1 + 16) = v17;
  }
  sub_100006F58(a1);
  return v1;
}

uint64_t sub_100176C4C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v5 = type metadata accessor for CustodianMessage();
  v6 = swift_allocObject(v5, 17, 7);
  result = sub_100176B00(a1);
  if (!v2)
    *a2 = v6;
  return result;
}

uint64_t sub_100176CA0(_QWORD *a1)
{
  return sub_100176A04(a1);
}

uint64_t MessageType.rawValue.getter(char a1)
{
  return qword_10021F8C8[a1];
}

BOOL sub_100176CD8(char *a1, char *a2)
{
  return qword_10021F8C8[*a1] == qword_10021F8C8[*a2];
}

Swift::Int sub_100176CFC()
{
  char *v0;
  uint64_t v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(qword_10021F8C8[v1]);
  return Hasher._finalize()();
}

void sub_100176D48()
{
  char *v0;

  Hasher._combine(_:)(qword_10021F8C8[*v0]);
}

Swift::Int sub_100176D7C()
{
  char *v0;
  uint64_t v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(qword_10021F8C8[v1]);
  return Hasher._finalize()();
}

uint64_t sub_100176DC4@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = _s13appleaccountd11MessageTypeO8rawValueACSgSi_tcfC_0(*a1);
  *a2 = result;
  return result;
}

void sub_100176DEC(_QWORD *a1@<X8>)
{
  char *v1;

  *a1 = qword_10021F8C8[*v1];
}

uint64_t sub_100176E04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10017704C();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_100176E60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10017704C();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t _s13appleaccountd11MessageTypeO8rawValueACSgSi_tcfC_0(unint64_t a1)
{
  if (a1 >= 7)
    return 5;
  else
    return (0x4050503020100uLL >> (8 * a1));
}

unint64_t sub_100176ED8()
{
  unint64_t result;

  result = qword_100295100;
  if (!qword_100295100)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for MessageType, &type metadata for MessageType);
    atomic_store(result, (unint64_t *)&qword_100295100);
  }
  return result;
}

uint64_t type metadata accessor for CustodianMessage()
{
  return objc_opt_self(_TtC13appleaccountd16CustodianMessage);
}

uint64_t storeEnumTagSinglePayload for MessageType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_100176F88 + 4 * byte_10021F625[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_100176FBC + 4 * byte_10021F620[v4]))();
}

uint64_t sub_100176FBC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100176FC4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100176FCCLL);
  return result;
}

uint64_t sub_100176FD8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100176FE0);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_100176FE4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100176FEC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MessageType()
{
  return &type metadata for MessageType;
}

unint64_t sub_100177008()
{
  unint64_t result;

  result = qword_1002951D0;
  if (!qword_1002951D0)
  {
    result = swift_getWitnessTable(&unk_10021F874, &type metadata for CustodianMessage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002951D0);
  }
  return result;
}

unint64_t sub_10017704C()
{
  unint64_t result;

  result = qword_1002951E0;
  if (!qword_1002951E0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for MessageType, &type metadata for MessageType);
    atomic_store(result, (unint64_t *)&qword_1002951E0);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for CustodianMessage.CodingKeys(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t storeEnumTagSinglePayload for CustodianMessage.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_100177124 + 4 * byte_10021F62A[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_100177144 + 4 * byte_10021F62F[v4]))();
}

_BYTE *sub_100177124(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_100177144(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_10017714C(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100177154(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10017715C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100177164(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for CustodianMessage.CodingKeys()
{
  return &type metadata for CustodianMessage.CodingKeys;
}

unint64_t sub_100177184()
{
  unint64_t result;

  result = qword_1002951E8;
  if (!qword_1002951E8)
  {
    result = swift_getWitnessTable(&unk_10021F84C, &type metadata for CustodianMessage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002951E8);
  }
  return result;
}

unint64_t sub_1001771CC()
{
  unint64_t result;

  result = qword_1002951F0;
  if (!qword_1002951F0)
  {
    result = swift_getWitnessTable(&unk_10021F7BC, &type metadata for CustodianMessage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002951F0);
  }
  return result;
}

unint64_t sub_100177214()
{
  unint64_t result;

  result = qword_1002951F8;
  if (!qword_1002951F8)
  {
    result = swift_getWitnessTable(&unk_10021F7E4, &type metadata for CustodianMessage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002951F8);
  }
  return result;
}

void sub_100177258(void *a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(_QWORD), uint64_t a6, void *a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  id v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  void *v29;
  _QWORD *v30;
  id v31;
  uint64_t v32;
  id v33;
  NSObject *v34;
  os_log_type_t v35;
  uint64_t v36;
  _QWORD *v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  os_log_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  os_log_t v47;
  uint64_t v48;
  void (*v49)(_QWORD);
  uint64_t v50;
  uint64_t aBlock[5];
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;

  v49 = a5;
  v50 = a6;
  v11 = type metadata accessor for CustodianRecoveryInfoRecord(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  v15 = __chkstk_darwin(v11, v14);
  v16 = (char *)&v46 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15, v17);
  v19 = (char *)&v46 - v18;
  if (a1 && (v20 = objc_opt_self(CKShare), (v21 = swift_dynamicCastObjCClass(a1, v20)) != 0))
  {
    v22 = (void *)v21;
    v23 = a1;
    v24 = objc_msgSend(v22, "recordID");
    sub_100027FE8(a4, (uint64_t)v19, type metadata accessor for CustodianRecoveryInfoRecord);
    v25 = *(unsigned __int8 *)(v12 + 80);
    v26 = (v25 + 40) & ~v25;
    v27 = (_QWORD *)swift_allocObject(&unk_10026C0C0, v26 + v13, v25 | 7);
    v28 = v50;
    v27[2] = v49;
    v27[3] = v28;
    v27[4] = a3;
    sub_10003B730((uint64_t)v19, (uint64_t)v27 + v26, type metadata accessor for CustodianRecoveryInfoRecord);
    aBlock[4] = (uint64_t)sub_100182164;
    v52 = v27;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_1000ABBFC;
    aBlock[3] = (uint64_t)&unk_10026C0D8;
    v29 = _Block_copy(aBlock);
    v30 = v52;
    swift_retain(v28);
    v31 = a3;
    swift_release(v30);
    objc_msgSend(a7, "deleteRecordWithID:completionHandler:", v24, v29);
    _Block_release(v29);

  }
  else
  {
    if (qword_10028ADB8 != -1)
      swift_once(&qword_10028ADB8, sub_100046CE4);
    v32 = type metadata accessor for Logger(0);
    sub_100005288(v32, (uint64_t)qword_1002A89A8);
    sub_100027FE8(a4, (uint64_t)v16, type metadata accessor for CustodianRecoveryInfoRecord);
    v33 = a3;
    v34 = Logger.logObject.getter(v33);
    v35 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v34, v35))
    {
      v36 = swift_slowAlloc(22, -1);
      v37 = (_QWORD *)swift_slowAlloc(8, -1);
      v48 = swift_slowAlloc(32, -1);
      aBlock[0] = v48;
      *(_DWORD *)v36 = 138412546;
      v47 = v34;
      v53 = (uint64_t)v33;
      v38 = v33;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &v54);
      *v37 = v33;

      *(_WORD *)(v36 + 12) = 2080;
      v40 = UUID.uuidString.getter(v39);
      v42 = v41;
      v53 = sub_1001DEF4C(v40, v41, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &v54);
      swift_bridgeObjectRelease(v42);
      sub_100028388((uint64_t)v16, type metadata accessor for CustodianRecoveryInfoRecord);
      v43 = v47;
      _os_log_impl((void *)&_mh_execute_header, v47, v35, "Did not find a CKShareRecord %@ for zone %s when performing removeExistingShareIfAny", (uint8_t *)v36, 0x16u);
      v44 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v37, 1, v44);
      swift_slowDealloc(v37, -1, -1);
      v45 = v48;
      swift_arrayDestroy(v48, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v45, -1, -1);
      swift_slowDealloc(v36, -1, -1);

    }
    else
    {

      sub_100028388((uint64_t)v16, type metadata accessor for CustodianRecoveryInfoRecord);
    }
    v49(0);
  }
}

void sub_100177640(void *a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(_QWORD), uint64_t a6, void *a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  id v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  void *v29;
  uint64_t v30;
  const void *v31;
  _QWORD *v32;
  id v33;
  uint64_t v34;
  id v35;
  NSObject *v36;
  os_log_type_t v37;
  uint64_t v38;
  _QWORD *v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD v47[2];
  void (*v48)(_QWORD);
  uint64_t aBlock[5];
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;

  v48 = a5;
  v12 = type metadata accessor for BeneficiaryInfoRecord(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  v16 = __chkstk_darwin(v12, v15);
  v17 = (char *)v47 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16, v18);
  v20 = (char *)v47 - v19;
  if (a1 && (v21 = objc_opt_self(CKShare), (v22 = swift_dynamicCastObjCClass(a1, v21)) != 0))
  {
    v23 = (void *)v22;
    v24 = a1;
    v25 = objc_msgSend(v23, "recordID");
    sub_100027FE8(a4, (uint64_t)v20, type metadata accessor for BeneficiaryInfoRecord);
    v26 = *(unsigned __int8 *)(v13 + 80);
    v27 = (v26 + 40) & ~v26;
    v28 = (_QWORD *)swift_allocObject(&unk_10026BDC8, v27 + v14, v26 | 7);
    v28[2] = v48;
    v28[3] = a6;
    v28[4] = a3;
    sub_10003B730((uint64_t)v20, (uint64_t)v28 + v27, type metadata accessor for BeneficiaryInfoRecord);
    aBlock[4] = (uint64_t)sub_10018119C;
    v50 = v28;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_1000ABBFC;
    aBlock[3] = (uint64_t)&unk_10026BDE0;
    v29 = _Block_copy(aBlock);
    v30 = a6;
    v31 = v29;
    v32 = v50;
    swift_retain(v30);
    v33 = a3;
    swift_release(v32);
    objc_msgSend(a7, "deleteRecordWithID:completionHandler:", v25, v31);
    _Block_release(v31);

  }
  else
  {
    if (qword_10028ADB8 != -1)
      swift_once(&qword_10028ADB8, sub_100046CE4);
    v34 = type metadata accessor for Logger(0);
    sub_100005288(v34, (uint64_t)qword_1002A89A8);
    sub_100027FE8(a4, (uint64_t)v17, type metadata accessor for BeneficiaryInfoRecord);
    v35 = a3;
    v36 = Logger.logObject.getter(v35);
    v37 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v36, v37))
    {
      v38 = swift_slowAlloc(22, -1);
      v39 = (_QWORD *)swift_slowAlloc(8, -1);
      v47[0] = swift_slowAlloc(32, -1);
      aBlock[0] = v47[0];
      *(_DWORD *)v38 = 138412546;
      v47[1] = a6;
      v51 = (uint64_t)v35;
      v40 = v35;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, &v52);
      *v39 = v35;

      *(_WORD *)(v38 + 12) = 2080;
      v42 = UUID.uuidString.getter(v41);
      v44 = v43;
      v51 = sub_1001DEF4C(v42, v43, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, &v52);
      swift_bridgeObjectRelease(v44);
      sub_100028388((uint64_t)v17, type metadata accessor for BeneficiaryInfoRecord);
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "Did not find a CKShareRecord %@ for zone %s when performing removeExistingShareIfAny", (uint8_t *)v38, 0x16u);
      v45 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v39, 1, v45);
      swift_slowDealloc(v39, -1, -1);
      v46 = v47[0];
      swift_arrayDestroy(v47[0], 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v46, -1, -1);
      swift_slowDealloc(v38, -1, -1);
    }
    else
    {

      sub_100028388((uint64_t)v17, type metadata accessor for BeneficiaryInfoRecord);
    }

    v48(0);
  }
}

uint64_t sub_100177A28(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4, void *a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  id v24;
  NSObject *v25;
  os_log_type_t v26;
  int v27;
  uint64_t v28;
  id v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  os_log_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v39;
  os_log_t v40;
  int v41;
  uint64_t v42;
  _QWORD v43[3];
  _BYTE v44[8];
  uint64_t v45;
  uint64_t v46;

  v10 = type metadata accessor for CustodianRecoveryInfoRecord(0);
  __chkstk_darwin(v10, v11);
  v13 = (char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    swift_errorRetain(a2);
    if (qword_10028ADB8 != -1)
      swift_once(&qword_10028ADB8, sub_100046CE4);
    v14 = type metadata accessor for Logger(0);
    sub_100005288(v14, (uint64_t)qword_1002A89A8);
    swift_errorRetain(a2);
    v15 = swift_errorRetain(a2);
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.error.getter(v16);
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc(12, -1);
      v19 = swift_slowAlloc(32, -1);
      v46 = v19;
      *(_DWORD *)v18 = 136315138;
      swift_getErrorValue(a2, v44, v43);
      v20 = Error.localizedDescription.getter(v43[1], v43[2]);
      v22 = v21;
      v45 = sub_1001DEF4C(v20, v21, &v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, &v46);
      swift_bridgeObjectRelease(v22);
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Error deleting zone share from CloudKit (removeExistingShareIfAny): %s", v18, 0xCu);
      swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v19, -1, -1);
      swift_slowDealloc(v18, -1, -1);
    }
    else
    {
      swift_errorRelease(a2);
      swift_errorRelease(a2);
    }

    a3(0);
    return swift_errorRelease(a2);
  }
  else
  {
    if (qword_10028ADB8 != -1)
      swift_once(&qword_10028ADB8, sub_100046CE4);
    v23 = type metadata accessor for Logger(0);
    sub_100005288(v23, (uint64_t)qword_1002A89A8);
    sub_100027FE8(a6, (uint64_t)v13, type metadata accessor for CustodianRecoveryInfoRecord);
    v24 = a5;
    v25 = Logger.logObject.getter(v24);
    v26 = static os_log_type_t.info.getter();
    v27 = v26;
    if (os_log_type_enabled(v25, v26))
    {
      v28 = swift_slowAlloc(22, -1);
      v39 = (_QWORD *)swift_slowAlloc(8, -1);
      v42 = swift_slowAlloc(32, -1);
      v45 = (uint64_t)v24;
      v46 = v42;
      *(_DWORD *)v28 = 138412546;
      v40 = v25;
      v41 = v27;
      v29 = v24;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, &v46);
      v30 = v39;
      *v39 = v24;

      *(_WORD *)(v28 + 12) = 2080;
      v32 = UUID.uuidString.getter(v31);
      v34 = v33;
      v45 = sub_1001DEF4C(v32, v33, &v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, &v46);
      swift_bridgeObjectRelease(v34);
      sub_100028388((uint64_t)v13, type metadata accessor for CustodianRecoveryInfoRecord);
      v35 = v40;
      _os_log_impl((void *)&_mh_execute_header, v40, (os_log_type_t)v41, "Removed existing CKShareRecord %@ for zone %s when performing removeExistingShareIfAny", (uint8_t *)v28, 0x16u);
      v36 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v30, 1, v36);
      swift_slowDealloc(v30, -1, -1);
      v37 = v42;
      swift_arrayDestroy(v42, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v37, -1, -1);
      swift_slowDealloc(v28, -1, -1);

    }
    else
    {

      sub_100028388((uint64_t)v13, type metadata accessor for CustodianRecoveryInfoRecord);
    }
    return a3(1);
  }
}

uint64_t sub_100177E84(uint64_t a1, uint64_t a2, void (*a3)(_QWORD), uint64_t a4, void *a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  id v25;
  NSObject *v26;
  os_log_type_t v27;
  uint64_t v28;
  _QWORD *v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(_QWORD);
  _QWORD v42[3];
  _BYTE v43[8];
  uint64_t v44;
  uint64_t v45;

  v11 = type metadata accessor for BeneficiaryInfoRecord(0);
  __chkstk_darwin(v11, v12);
  v14 = (char *)&v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    swift_errorRetain(a2);
    if (qword_10028ADB8 != -1)
      swift_once(&qword_10028ADB8, sub_100046CE4);
    v15 = type metadata accessor for Logger(0);
    sub_100005288(v15, (uint64_t)qword_1002A89A8);
    swift_errorRetain(a2);
    v16 = swift_errorRetain(a2);
    v17 = Logger.logObject.getter(v16);
    v18 = static os_log_type_t.error.getter(v17);
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc(12, -1);
      v20 = swift_slowAlloc(32, -1);
      v45 = v20;
      *(_DWORD *)v19 = 136315138;
      swift_getErrorValue(a2, v43, v42);
      v21 = Error.localizedDescription.getter(v42[1], v42[2]);
      v23 = v22;
      v44 = sub_1001DEF4C(v21, v22, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, &v45);
      swift_bridgeObjectRelease(v23);
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Error deleting zone share from CloudKit (removeExistingShareIfAny): %s", v19, 0xCu);
      swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v20, -1, -1);
      swift_slowDealloc(v19, -1, -1);
    }
    else
    {
      swift_errorRelease(a2);
      swift_errorRelease(a2);
    }

    a3(0);
    return swift_errorRelease(a2);
  }
  else
  {
    if (qword_10028ADB8 != -1)
      swift_once(&qword_10028ADB8, sub_100046CE4);
    v24 = type metadata accessor for Logger(0);
    sub_100005288(v24, (uint64_t)qword_1002A89A8);
    sub_100027FE8(a6, (uint64_t)v14, type metadata accessor for BeneficiaryInfoRecord);
    v25 = a5;
    v26 = Logger.logObject.getter(v25);
    v27 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v26, v27))
    {
      v28 = swift_slowAlloc(22, -1);
      v29 = (_QWORD *)swift_slowAlloc(8, -1);
      v39 = swift_slowAlloc(32, -1);
      v44 = (uint64_t)v25;
      v45 = v39;
      *(_DWORD *)v28 = 138412546;
      v40 = a4;
      v41 = a3;
      v30 = v25;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, &v45);
      *v29 = v25;

      *(_WORD *)(v28 + 12) = 2080;
      v32 = UUID.uuidString.getter(v31);
      v34 = v33;
      v44 = sub_1001DEF4C(v32, v33, &v45);
      a3 = v41;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, &v45);
      swift_bridgeObjectRelease(v34);
      sub_100028388((uint64_t)v14, type metadata accessor for BeneficiaryInfoRecord);
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "Removed existing CKShareRecord %@ for zone %s when performing removeExistingShareIfAny", (uint8_t *)v28, 0x16u);
      v35 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v29, 1, v35);
      swift_slowDealloc(v29, -1, -1);
      v36 = v39;
      swift_arrayDestroy(v39, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v36, -1, -1);
      swift_slowDealloc(v28, -1, -1);
    }
    else
    {

      sub_100028388((uint64_t)v14, type metadata accessor for BeneficiaryInfoRecord);
    }

    return ((uint64_t (*)(uint64_t))a3)(1);
  }
}

uint64_t sub_1001782C0()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  uint64_t v3;

  v3 = type metadata accessor for BeneficiaryAccessKeyRepairHandler(0);
  v0 = sub_1000080B4(&qword_100295378);
  result = String.init<A>(describing:)(&v3, v0);
  qword_100295200 = result;
  *(_QWORD *)algn_100295208 = v2;
  return result;
}

id sub_100178308()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  void *v4;
  id v5;

  v1 = OBJC_IVAR____TtC13appleaccountd33BeneficiaryAccessKeyRepairHandler____lazy_storage___inheritanceContext;
  v2 = *(void **)(v0
                + OBJC_IVAR____TtC13appleaccountd33BeneficiaryAccessKeyRepairHandler____lazy_storage___inheritanceContext);
  v3 = v2;
  if (v2 == (void *)1)
  {
    v3 = sub_10017F29C(v0);
    v4 = *(void **)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v3;
    v5 = v3;
    sub_10017F574(v4);
  }
  sub_10017F584(v2);
  return v3;
}

uint64_t sub_100178374(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;

  v22 = a2;
  v23 = *v4;
  v24 = a3;
  v7 = type metadata accessor for BeneficiaryInfoRecord(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  __chkstk_darwin(v7, v10);
  v11 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = swift_allocObject(&unk_10026BAF8, 24, 7);
  swift_weakInit(v12 + 16, v4);
  sub_100027FE8(a1, (uint64_t)v11, type metadata accessor for BeneficiaryInfoRecord);
  v13 = *(unsigned __int8 *)(v8 + 80);
  v14 = (v13 + 17) & ~v13;
  v15 = (v9 + v14 + 7) & 0xFFFFFFFFFFFFFFF8;
  v16 = (v15 + 15) & 0xFFFFFFFFFFFFFFF8;
  v17 = (v16 + 23) & 0xFFFFFFFFFFFFFFF8;
  v18 = swift_allocObject(&unk_10026BB20, v17 + 8, v13 | 7);
  *(_BYTE *)(v18 + 16) = v22;
  sub_10003B730((uint64_t)v11, v18 + v14, type metadata accessor for BeneficiaryInfoRecord);
  *(_QWORD *)(v18 + v15) = v12;
  v19 = (_QWORD *)(v18 + v16);
  *v19 = v24;
  v19[1] = a4;
  *(_QWORD *)(v18 + v17) = v23;
  swift_retain(v12);
  swift_retain(a4);
  sub_10017A54C(a1, (void (*)(uint64_t, uint64_t))sub_10017DADC, v18);
  swift_release(v12);
  return swift_release(v18);
}

uint64_t sub_1001784E0(void *a1, char a2, int a3, uint64_t a4, uint64_t a5, void (*a6)(_QWORD *), uint64_t a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __n128 v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  NSObject *v59;
  os_log_type_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t Strong;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  void (*v95)(_QWORD);
  int v96;
  void *v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  char v110[24];
  uint64_t v111;
  _BYTE v112[16];
  uint64_t v113[6];
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;

  v102 = a8;
  v105 = a7;
  v104 = a5;
  v106 = a4;
  v12 = sub_1000080B4(&qword_100295630);
  __chkstk_darwin(v12, v13);
  v15 = (uint64_t *)((char *)&v90 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v101 = sub_1000080B4((uint64_t *)&unk_100295380);
  v100 = *(_QWORD *)(v101 - 8);
  __chkstk_darwin(v101, v16);
  v99 = (char *)&v90 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_1000080B4((uint64_t *)&unk_1002904F0);
  __chkstk_darwin(v18, v19);
  v103 = (uint64_t *)((char *)&v90 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  v21 = type metadata accessor for BeneficiaryInfoRecord(0);
  v22 = *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64);
  v24 = __chkstk_darwin(v21, v23);
  v26 = __chkstk_darwin(v24, v25);
  __chkstk_darwin(v26, v27);
  v30 = __chkstk_darwin((char *)&v90 - v28, v29);
  v32 = (char *)&v90 - v31;
  v34 = __chkstk_darwin(v30, v33);
  if ((a2 & 1) != 0)
  {
    *v15 = a1;
    swift_storeEnumTagMultiPayload(v15, v12, 1);
    swift_errorRetain(a1);
    a6(v15);
    return sub_100004934((uint64_t)v15, &qword_100295630);
  }
  else
  {
    v39 = (char *)&v90 - v35;
    v98 = v34;
    v91 = v38;
    v92 = v37;
    v93 = v36;
    v95 = (void (*)(_QWORD))a6;
    sub_100066B88(a1, 0);
    sub_100066B88(a1, 0);
    sub_10000ECC4(a1, v113);
    v97 = a1;
    v94 = a3;
    if ((a3 & 1) != 0)
    {
      v96 = 1;
      v40 = v106;
    }
    else
    {
      v40 = v106;
      v96 = *(unsigned __int8 *)(v106 + *(int *)(v21 + 40));
    }
    v42 = v113[0];
    v43 = v113[1];
    v44 = v113[3];
    v45 = v113[5];
    sub_100027FE8(v40, (uint64_t)v32, type metadata accessor for BeneficiaryInfoRecord);
    sub_100013F20((uint64_t)v113, (uint64_t)&v114);
    v46 = (uint64_t)v39;
    if (*((_QWORD *)&v115 + 1))
    {
      v117 = v114;
      v118 = v115;
      v119 = v116;
      v47 = type metadata accessor for JSONEncoder(0);
      swift_allocObject(v47, *(unsigned int *)(v47 + 48), *(unsigned __int16 *)(v47 + 52));
      sub_10000F450(v42, v43);
      swift_bridgeObjectRetain(v44);
      v48 = swift_bridgeObjectRetain(v45);
      v49 = JSONEncoder.init()(v48);
      v107 = v117;
      v108 = v118;
      v109 = v119;
      v50 = sub_100014590();
      v51 = dispatch thunk of JSONEncoder.encode<A>(_:)(&v107, &type metadata for InheritanceAccessKeyRecord, v50);
      v53 = v52;
      swift_release(v49);
      sub_100013FA4((uint64_t)v113);
      v40 = v106;
    }
    else
    {
      v51 = 0;
      v53 = 0xF000000000000000;
    }
    v54 = (uint64_t)v103;
    v104 += 16;
    v55 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v55 - 8) + 56))(v54, 1, 1, v55);
    sub_100010CFC((uint64_t)v32, 0, 0, v51, v53, v96, v54, 0, (uint64_t)v39, 0, 0, 0, 0);
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v56 = type metadata accessor for Logger(0);
    sub_100005288(v56, (uint64_t)qword_1002A8A08);
    v57 = v98;
    v58 = sub_100027FE8((uint64_t)v39, v98, type metadata accessor for BeneficiaryInfoRecord);
    v59 = Logger.logObject.getter(v58);
    v60 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v59, v60))
    {
      v61 = swift_slowAlloc(22, -1);
      v62 = swift_slowAlloc(64, -1);
      *(_QWORD *)&v107 = v62;
      *(_DWORD *)v61 = 136315394;
      if (qword_10028AED8 != -1)
        swift_once(&qword_10028AED8, sub_1001782C0);
      v63 = qword_100295200;
      v64 = *(_QWORD *)algn_100295208;
      swift_bridgeObjectRetain(*(_QWORD *)algn_100295208);
      v111 = sub_1001DEF4C(v63, v64, (uint64_t *)&v107);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v111, v112);
      swift_bridgeObjectRelease(v64);
      *(_WORD *)(v61 + 12) = 2080;
      v65 = v98;
      v66 = sub_100013870();
      v68 = v67;
      v111 = sub_1001DEF4C(v66, v67, (uint64_t *)&v107);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v111, v112);
      swift_bridgeObjectRelease(v68);
      sub_100028388(v65, type metadata accessor for BeneficiaryInfoRecord);
      _os_log_impl((void *)&_mh_execute_header, v59, v60, "%s - created new BeneficiaryInfoRecord with updated accessKey - %s", (uint8_t *)v61, 0x16u);
      swift_arrayDestroy(v62, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v62, -1, -1);
      swift_slowDealloc(v61, -1, -1);

      v40 = v106;
    }
    else
    {
      sub_100028388(v57, type metadata accessor for BeneficiaryInfoRecord);

    }
    v69 = v104;
    swift_beginAccess(v104, &v111, 0, 0);
    Strong = swift_weakLoadStrong(v69);
    if (Strong)
    {
      v71 = Strong;
      v72 = v100;
      v73 = v99;
      v74 = v101;
      (*(void (**)(char *, uint64_t, uint64_t))(v100 + 16))(v99, Strong + OBJC_IVAR____TtC13appleaccountd33BeneficiaryAccessKeyRepairHandler__storageController, v101);
      Dependency.wrappedValue.getter(&v107, v74);
      swift_release(v71);
      (*(void (**)(char *, uint64_t))(v72 + 8))(v73, v74);
      v103 = sub_10000732C(&v107, *((uint64_t *)&v108 + 1));
      v101 = swift_allocObject(&unk_10026BAF8, 24, 7);
      v75 = v101 + 16;
      swift_beginAccess(v69, v110, 0, 0);
      v76 = swift_weakLoadStrong(v69);
      swift_weakInit(v75, v76);
      swift_release(v76);
      v77 = v92;
      sub_100027FE8(v46, v92, type metadata accessor for BeneficiaryInfoRecord);
      v78 = v93;
      sub_100027FE8(v40, v93, type metadata accessor for BeneficiaryInfoRecord);
      v79 = *(unsigned __int8 *)(v91 + 80);
      v80 = (v79 + 16) & ~v79;
      v81 = (v22 + v80 + 7) & 0xFFFFFFFFFFFFFFF8;
      v82 = v105;
      v83 = (v81 + 23) & 0xFFFFFFFFFFFFFFF8;
      v106 = v46;
      v84 = (v79 + v83 + 8) & ~v79;
      v85 = v84 + v22;
      v86 = swift_allocObject(&unk_10026BBE8, (v85 & 0xFFFFFFFFFFFFFFF8) + 16, v79 | 7);
      sub_10003B730(v77, v86 + v80, type metadata accessor for BeneficiaryInfoRecord);
      v87 = (_QWORD *)(v86 + v81);
      *v87 = v95;
      v87[1] = v82;
      v88 = v101;
      *(_QWORD *)(v86 + v83) = v101;
      sub_10003B730(v78, v86 + v84, type metadata accessor for BeneficiaryInfoRecord);
      *(_BYTE *)(v86 + v85) = v94 & 1;
      *(_QWORD *)((v85 & 0xFFFFFFFFFFFFFFF8) + v86 + 8) = v102;
      swift_retain(v82);
      swift_retain(v88);
      v89 = v106;
      sub_1000CB018(v106, (uint64_t)sub_10017F7C0, v86);
      swift_release(v86);
      sub_100013FA4((uint64_t)v113);
      sub_100066B94(v97, 0);
      sub_100028388(v89, type metadata accessor for BeneficiaryInfoRecord);
      swift_release(v88);
      return sub_100006F58(&v107);
    }
    else
    {
      sub_100013FA4((uint64_t)v113);
      sub_100066B94(v97, 0);
      return sub_100028388(v46, type metadata accessor for BeneficiaryInfoRecord);
    }
  }
}

uint64_t sub_100178E0C(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *), uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  _BOOL4 v35;
  _QWORD *v36;
  _UNKNOWN **v37;
  uint64_t v38;
  uint8_t *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  uint8_t *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t Strong;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  void (*v60)(uint64_t *);
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void (*v77)(uint64_t *);
  uint64_t v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86[3];

  v81 = a8;
  v80 = a7;
  v83 = a5;
  v84 = a6;
  v12 = type metadata accessor for BeneficiaryInfoRecord(0);
  v78 = *(_QWORD *)(v12 - 8);
  v13 = *(_QWORD *)(v78 + 64);
  v15 = __chkstk_darwin(v12, v14);
  v82 = (uint64_t)&v71 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15, v16);
  v79 = (uint64_t)&v71 - v17;
  v18 = sub_1000080B4(&qword_100295630);
  v20 = __chkstk_darwin(v18, v19);
  v22 = (uint64_t *)((char *)&v71 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v20, v23);
  v25 = (uint64_t *)((char *)&v71 - v24);
  sub_100024A20(a1, (uint64_t)&v71 - v24, &qword_100295630);
  if (swift_getEnumCaseMultiPayload(v25, v18) == 1)
  {
    v26 = *v25;
    *v22 = *v25;
    swift_storeEnumTagMultiPayload(v22, v18, 1);
    swift_errorRetain(v26);
    a3(v22);
    swift_errorRelease(v26);
    v25 = v22;
  }
  else
  {
    v27 = (uint64_t *)(a2 + *(int *)(v12 + 20));
    v28 = v27[1];
    if (v28)
    {
      v73 = *v27;
      v74 = a2;
      v29 = qword_10028ADD8;
      v76 = v28;
      swift_bridgeObjectRetain(v28);
      v30 = a4;
      if (v29 != -1)
        swift_once(&qword_10028ADD8, sub_100046D78);
      v75 = v83 + 16;
      v31 = type metadata accessor for Logger(0);
      v32 = sub_100005288(v31, (uint64_t)qword_1002A8A08);
      v33 = Logger.logObject.getter(v32);
      v34 = static os_log_type_t.debug.getter();
      v35 = os_log_type_enabled(v33, v34);
      v36 = &unk_100218000;
      v37 = &off_10028A000;
      v38 = v84;
      v77 = a3;
      if (v35)
      {
        v72 = v30;
        v39 = (uint8_t *)swift_slowAlloc(12, -1);
        v40 = swift_slowAlloc(32, -1);
        v86[0] = v40;
        *(_DWORD *)v39 = 136315138;
        if (qword_10028AED8 != -1)
          swift_once(&qword_10028AED8, sub_1001782C0);
        v41 = qword_100295200;
        v42 = *(_QWORD *)algn_100295208;
        swift_bridgeObjectRetain(*(_QWORD *)algn_100295208);
        v85 = sub_1001DEF4C(v41, v42, v86);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v85, v86);
        swift_bridgeObjectRelease(v42);
        _os_log_impl((void *)&_mh_execute_header, v33, v34, "%s - saved new BeneficiaryInfoRecord.", v39, 0xCu);
        swift_arrayDestroy(v40, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v40, -1, -1);
        swift_slowDealloc(v39, -1, -1);

        v30 = v72;
        v38 = v84;
        a3 = v77;
        v37 = &off_10028A000;
        v36 = (_QWORD *)&unk_100218000;
      }
      else
      {

      }
      v44 = Logger.logObject.getter(v43);
      v45 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v44, v45))
      {
        v46 = (uint8_t *)swift_slowAlloc(12, -1);
        v47 = swift_slowAlloc(32, -1);
        v48 = v36;
        v49 = v47;
        v86[0] = v47;
        *(_DWORD *)v46 = v48[379];
        if (v37[475] != (_UNKNOWN *)-1)
          swift_once(&qword_10028AED8, sub_1001782C0);
        v50 = qword_100295200;
        v51 = *(_QWORD *)algn_100295208;
        swift_bridgeObjectRetain(*(_QWORD *)algn_100295208);
        v85 = sub_1001DEF4C(v50, v51, v86);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v85, v86);
        swift_bridgeObjectRelease(v51);
        _os_log_impl((void *)&_mh_execute_header, v44, v45, "%s - notifying Beneficiary of Access Key Change...", v46, 0xCu);
        swift_arrayDestroy(v49, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v49, -1, -1);
        swift_slowDealloc(v46, -1, -1);

        v38 = v84;
        a3 = v77;
      }
      else
      {

      }
      v52 = v75;
      swift_beginAccess(v75, v86, 0, 0);
      Strong = swift_weakLoadStrong(v52);
      if (Strong)
      {
        v75 = Strong;
        v54 = v79;
        sub_100027FE8(v38, v79, type metadata accessor for BeneficiaryInfoRecord);
        sub_100027FE8(v74, v82, type metadata accessor for BeneficiaryInfoRecord);
        v55 = *(unsigned __int8 *)(v78 + 80);
        v56 = (v55 + 33) & ~v55;
        v57 = v13 + 7;
        v58 = (v13 + 7 + v56) & 0xFFFFFFFFFFFFFFF8;
        v59 = (v55 + v58 + 8) & ~v55;
        v60 = a3;
        v61 = (v57 + v59) & 0xFFFFFFFFFFFFFFF8;
        v62 = v30;
        v63 = (v61 + 23) & 0xFFFFFFFFFFFFFFF8;
        v64 = swift_allocObject(&unk_10026BC10, v63 + 8, v55 | 7);
        *(_QWORD *)(v64 + 16) = v60;
        *(_QWORD *)(v64 + 24) = v62;
        LODWORD(v60) = v80 & 1;
        *(_BYTE *)(v64 + 32) = v80 & 1;
        sub_10003B730(v54, v64 + v56, type metadata accessor for BeneficiaryInfoRecord);
        v65 = v82;
        v66 = v83;
        *(_QWORD *)(v64 + v58) = v83;
        sub_10003B730(v65, v64 + v59, type metadata accessor for BeneficiaryInfoRecord);
        v67 = (_QWORD *)(v64 + v61);
        v68 = v76;
        *v67 = v73;
        v67[1] = v68;
        *(_QWORD *)(v64 + v63) = v81;
        swift_retain(v62);
        swift_retain(v66);
        v69 = v75;
        sub_10017A2E4(v84, (int)v60, (uint64_t)sub_10017FA6C, v64);
        swift_release(v64);
        swift_release(v69);
      }
      else
      {
        swift_bridgeObjectRelease(v76);
      }
    }
    else
    {
      sub_100027FE8(a2, (uint64_t)v22, type metadata accessor for BeneficiaryInfoRecord);
      swift_storeEnumTagMultiPayload(v22, v18, 0);
      a3(v22);
      sub_100004934((uint64_t)v22, &qword_100295630);
    }
  }
  return sub_100004934((uint64_t)v25, &qword_100295630);
}

void sub_100179418(uint64_t a1, void (*a2)(_QWORD *), uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t Strong;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  uint8_t *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  void (*v52)(_QWORD);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57[3];
  uint64_t v58;
  uint64_t v59;

  v53 = a8;
  v54 = a6;
  v55 = a7;
  LODWORD(v56) = a4;
  v14 = sub_1000080B4(&qword_100295630);
  __chkstk_darwin(v14, v15);
  v17 = (uint64_t *)((char *)&v51 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v18 = type metadata accessor for BeneficiaryInfoRecord(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(_QWORD *)(v19 + 64);
  v22 = __chkstk_darwin(v18, v21);
  __chkstk_darwin(v22, v23);
  v26 = (char *)&v51 - v24;
  if (a1)
  {
    *v17 = a1;
    swift_storeEnumTagMultiPayload(v17, v14, 1);
    swift_errorRetain(a1);
    a2(v17);
    sub_100004934((uint64_t)v17, &qword_100295630);
    return;
  }
  v27 = v25;
  v52 = (void (*)(_QWORD))a2;
  v29 = v54;
  v28 = v55;
  sub_100027FE8(a5, (uint64_t)&v51 - v24, type metadata accessor for BeneficiaryInfoRecord);
  if ((v56 & 1) != 0)
  {
    v30 = a5;
    v31 = v26[*(int *)(v18 + 40)];
    sub_100028388((uint64_t)v26, type metadata accessor for BeneficiaryInfoRecord);
    if ((v31 & 1) == 0)
    {
      swift_beginAccess(v29 + 16, v57, 0, 0);
      Strong = swift_weakLoadStrong(v29 + 16);
      if (Strong)
      {
        v33 = Strong;
        v56 = a10;
        v51 = a9;
        v34 = v27;
        sub_100027FE8(v28, v27, type metadata accessor for BeneficiaryInfoRecord);
        v35 = *(unsigned __int8 *)(v19 + 80);
        v36 = v30;
        v37 = (v35 + 40) & ~v35;
        v38 = (v20 + v37 + 7) & 0xFFFFFFFFFFFFFFF8;
        v39 = (v38 + 23) & 0xFFFFFFFFFFFFFFF8;
        v40 = (_QWORD *)swift_allocObject(&unk_10026BC88, v39 + 8, v35 | 7);
        v40[2] = v52;
        v40[3] = a3;
        v40[4] = v29;
        sub_10003B730(v34, (uint64_t)v40 + v37, type metadata accessor for BeneficiaryInfoRecord);
        v41 = (_QWORD *)((char *)v40 + v38);
        v42 = v51;
        *v41 = v53;
        v41[1] = v42;
        *(_QWORD *)((char *)v40 + v39) = v56;
        swift_retain(a3);
        swift_retain(v29);
        swift_bridgeObjectRetain(v42);
        sub_10017A1D8(v36, (uint64_t)sub_10017FE54, (uint64_t)v40);
        swift_release(v40);
        swift_release(v33);
      }
      return;
    }
  }
  else
  {
    sub_100028388((uint64_t)v26, type metadata accessor for BeneficiaryInfoRecord);
  }
  if (qword_10028ADD8 != -1)
    swift_once(&qword_10028ADD8, sub_100046D78);
  v43 = type metadata accessor for Logger(0);
  v44 = sub_100005288(v43, (uint64_t)qword_1002A8A08);
  v45 = Logger.logObject.getter(v44);
  v46 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v45, v46))
  {
    v47 = (uint8_t *)swift_slowAlloc(12, -1);
    v48 = swift_slowAlloc(32, -1);
    v57[0] = v48;
    *(_DWORD *)v47 = 136315138;
    if (qword_10028AED8 != -1)
      swift_once(&qword_10028AED8, sub_1001782C0);
    v49 = qword_100295200;
    v50 = *(_QWORD *)algn_100295208;
    swift_bridgeObjectRetain(*(_QWORD *)algn_100295208);
    v58 = sub_1001DEF4C(v49, v50, v57);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, &v59);
    swift_bridgeObjectRelease(v50);
    _os_log_impl((void *)&_mh_execute_header, v45, v46, "%s - skipping old beneficiary record cleanup and sharing of new record.", v47, 0xCu);
    swift_arrayDestroy(v48, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v48, -1, -1);
    swift_slowDealloc(v47, -1, -1);
  }

}

uint64_t sub_100179804(uint64_t a1, void (*a2)(_QWORD *), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t result;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(_QWORD);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45[3];

  v14 = type metadata accessor for BeneficiaryInfoRecord(0);
  v41 = *(_QWORD *)(v14 - 8);
  v15 = *(_QWORD *)(v41 + 64);
  __chkstk_darwin(v14, v16);
  v17 = (char *)&v38 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_1000080B4(&qword_100295630);
  __chkstk_darwin(v18, v18);
  v21 = (v20 + 15) & 0xFFFFFFFFFFFFFFF0;
  v22 = (uint64_t *)((char *)&v38 - v21);
  if (a1)
  {
    *v22 = a1;
    swift_storeEnumTagMultiPayload((char *)&v38 - v21, v19, 1);
    swift_errorRetain(a1);
    a2(v22);
    sub_100004934((uint64_t)v22, &qword_100295630);
  }
  v42 = (void (*)(_QWORD))a2;
  v43 = a3;
  v23 = a4 + 16;
  if (qword_10028ADD8 != -1)
    swift_once(&qword_10028ADD8, sub_100046D78);
  v24 = type metadata accessor for Logger(0);
  v25 = sub_100005288(v24, (uint64_t)qword_1002A8A08);
  v26 = Logger.logObject.getter(v25);
  v27 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v26, v27))
  {
    v38 = a5;
    v39 = a6;
    v40 = a7;
    v28 = (uint8_t *)swift_slowAlloc(12, -1);
    v29 = swift_slowAlloc(32, -1);
    v45[0] = v29;
    *(_DWORD *)v28 = 136315138;
    if (qword_10028AED8 != -1)
      swift_once(&qword_10028AED8, sub_1001782C0);
    v31 = qword_100295200;
    v30 = *(_QWORD *)algn_100295208;
    swift_bridgeObjectRetain(*(_QWORD *)algn_100295208);
    v44 = sub_1001DEF4C(v31, v30, v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, v45);
    swift_bridgeObjectRelease(v30);
    _os_log_impl((void *)&_mh_execute_header, v26, v27, "%s - attempting to share new beneficiary manatee record.", v28, 0xCu);
    swift_arrayDestroy(v29, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v29, -1, -1);
    swift_slowDealloc(v28, -1, -1);

    a6 = v39;
    a7 = v40;
    a5 = v38;
  }
  else
  {

  }
  swift_beginAccess(v23, v45, 0, 0);
  result = swift_weakLoadStrong(v23);
  if (result)
  {
    v33 = result;
    sub_100027FE8(a5, (uint64_t)&v38 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for BeneficiaryInfoRecord);
    v34 = *(unsigned __int8 *)(v41 + 80);
    v35 = (v34 + 32) & ~v34;
    v36 = swift_allocObject(&unk_10026BD28, v35 + v15, v34 | 7);
    v37 = v43;
    *(_QWORD *)(v36 + 16) = v42;
    *(_QWORD *)(v36 + 24) = v37;
    sub_10003B730((uint64_t)v17, v36 + v35, type metadata accessor for BeneficiaryInfoRecord);
    swift_retain(v37);
    sub_100179C18(a5, a6, a7, (void (*)(_QWORD))sub_1001804FC, v36);
    swift_release(v36);
    return swift_release(v33);
  }
  return result;
}

uint64_t sub_100179B40(uint64_t a1, void (*a2)(_QWORD *), uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v13;

  v7 = sub_1000080B4(&qword_100295630);
  __chkstk_darwin(v7, v8);
  v10 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0;
  v11 = (uint64_t *)((char *)&v13 - v10);
  if (a1)
  {
    *v11 = a1;
    swift_storeEnumTagMultiPayload((char *)&v13 - v10, v7, 1);
    swift_errorRetain(a1);
  }
  else
  {
    sub_100027FE8(a4, (uint64_t)&v13 - v10, type metadata accessor for BeneficiaryInfoRecord);
    swift_storeEnumTagMultiPayload(v11, v7, 0);
  }
  a2(v11);
  return sub_100004934((uint64_t)v11, &qword_100295630);
}

void sub_100179C18(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD), uint64_t a5)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  _BOOL4 v21;
  uint8_t *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  uint8_t *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void (*v63)(_QWORD);
  __int128 v64[2];
  uint64_t v65;
  uint64_t v66;
  _BYTE v67[32];
  uint64_t v68[6];

  v6 = v5;
  v61 = a3;
  v62 = a1;
  v9 = *v5;
  v59 = a2;
  v60 = v9;
  v10 = type metadata accessor for BeneficiaryInfoRecord(0);
  v57 = *(_QWORD *)(v10 - 8);
  v11 = *(_QWORD *)(v57 + 64);
  __chkstk_darwin(v10, v12);
  v58 = (uint64_t)&v52 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1000080B4(&qword_10028E8C0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13, v15);
  v17 = (char *)&v52 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10028ADD8 != -1)
    swift_once(&qword_10028ADD8, sub_100046D78);
  v18 = type metadata accessor for Logger(0);
  v56 = sub_100005288(v18, (uint64_t)qword_1002A8A08);
  v19 = Logger.logObject.getter(v56);
  v20 = static os_log_type_t.info.getter();
  v21 = os_log_type_enabled(v19, v20);
  v63 = a4;
  if (v21)
  {
    v53 = v6;
    v54 = v11;
    v55 = a5;
    v22 = (uint8_t *)swift_slowAlloc(12, -1);
    v23 = swift_slowAlloc(32, -1);
    v68[0] = v23;
    *(_DWORD *)v22 = 136315138;
    if (qword_10028AED8 != -1)
      swift_once(&qword_10028AED8, sub_1001782C0);
    v25 = qword_100295200;
    v24 = *(_QWORD *)algn_100295208;
    swift_bridgeObjectRetain(*(_QWORD *)algn_100295208);
    v66 = sub_1001DEF4C(v25, v24, v68);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, v67);
    swift_bridgeObjectRelease(v24);
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "%s - sharing BeneficiaryInfoRecord...", v22, 0xCu);
    swift_arrayDestroy(v23, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v23, -1, -1);
    swift_slowDealloc(v22, -1, -1);

    a5 = v55;
    a4 = v63;
    v11 = v54;
    v6 = v53;
  }
  else
  {

  }
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v17, (uint64_t)v6 + OBJC_IVAR____TtC13appleaccountd33BeneficiaryAccessKeyRepairHandler__cloudStorage, v13);
  Dependency.wrappedValue.getter(&v66, v13);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
  v26 = sub_1000080B4((uint64_t *)&unk_10028C8C0);
  v27 = sub_1000080B4(&qword_10028CCB0);
  if (swift_dynamicCast(v64, &v66, v26, v27, 6))
  {
    sub_10003A190(v64, (uint64_t)v68);
    v28 = swift_allocObject(&unk_10026BAF8, 24, 7);
    swift_weakInit(v28 + 16, v6);
    v29 = v62;
    v30 = v58;
    sub_100027FE8(v62, v58, type metadata accessor for BeneficiaryInfoRecord);
    v31 = *(unsigned __int8 *)(v57 + 80);
    v32 = (v31 + 24) & ~v31;
    v33 = (v11 + v32 + 7) & 0xFFFFFFFFFFFFFFF8;
    v34 = (v33 + 23) & 0xFFFFFFFFFFFFFFF8;
    v35 = (v34 + 23) & 0xFFFFFFFFFFFFFFF8;
    v36 = swift_allocObject(&unk_10026BD50, v35 + 8, v31 | 7);
    *(_QWORD *)(v36 + 16) = v28;
    sub_10003B730(v30, v36 + v32, type metadata accessor for BeneficiaryInfoRecord);
    v37 = (_QWORD *)(v36 + v33);
    v38 = v61;
    *v37 = v59;
    v37[1] = v38;
    v39 = (_QWORD *)(v36 + v34);
    *v39 = v63;
    v39[1] = a5;
    *(_QWORD *)(v36 + v35) = v60;
    swift_retain(v28);
    swift_bridgeObjectRetain(v38);
    swift_retain(a5);
    sub_100180BD8(v29, (uint64_t)sub_1001806A4, v36);
    swift_release(v28);
    swift_release(v36);
    sub_100006F58(v68);
  }
  else
  {
    v65 = 0;
    memset(v64, 0, sizeof(v64));
    v40 = sub_100004934((uint64_t)v64, &qword_10028CCB8);
    v41 = Logger.logObject.getter(v40);
    v42 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v41, v42))
    {
      v43 = (uint8_t *)swift_slowAlloc(12, -1);
      v44 = swift_slowAlloc(32, -1);
      v68[0] = v44;
      *(_DWORD *)v43 = 136315138;
      if (qword_10028AED8 != -1)
        swift_once(&qword_10028AED8, sub_1001782C0);
      v45 = qword_100295200;
      v46 = *(_QWORD *)algn_100295208;
      swift_bridgeObjectRetain(*(_QWORD *)algn_100295208);
      v66 = sub_1001DEF4C(v45, v46, v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, v67);
      swift_bridgeObjectRelease(v46);
      _os_log_impl((void *)&_mh_execute_header, v41, v42, "%s - shareBeneficiaryRecord could not get reference to CloudKitSharing", v43, 0xCu);
      swift_arrayDestroy(v44, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v44, -1, -1);
      swift_slowDealloc(v43, -1, -1);
    }

    type metadata accessor for InheritanceError(0);
    v48 = v47;
    v66 = 0;
    v49 = sub_100005014((uint64_t)&_swiftEmptyArrayStorage);
    v50 = sub_100005150(&qword_10028B350, (uint64_t (*)(uint64_t))type metadata accessor for InheritanceError, (uint64_t)&unk_100216D64);
    _BridgedStoredNSError.init(_:userInfo:)(v68, &v66, v49, v48, v50);
    v51 = (void *)v68[0];
    a4(v68[0]);

  }
}

uint64_t sub_10017A1D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  _QWORD v16[5];

  v7 = *v3;
  v8 = sub_1000080B4(&qword_10028E8C0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v12 = (char *)&v16[-1] - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, (uint64_t)v3 + OBJC_IVAR____TtC13appleaccountd33BeneficiaryAccessKeyRepairHandler__cloudStorage, v8);
  Dependency.wrappedValue.getter(v16, v8);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  v13 = (_QWORD *)swift_allocObject(&unk_10026BCB0, 40, 7);
  v13[2] = a2;
  v13[3] = a3;
  v13[4] = v7;
  swift_retain(a3);
  sub_10018014C(a1, (uint64_t)sub_10017FEE0, (uint64_t)v13);
  swift_release(v13);
  return sub_100006F58(v16);
}

uint64_t sub_10017A2E4(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  _QWORD v39[5];

  v5 = v4;
  v38 = a4;
  v37 = a2;
  v7 = *v4;
  v35 = a3;
  v36 = v7;
  v8 = type metadata accessor for BeneficiaryInfoRecord(0);
  v34 = *(_QWORD *)(v8 - 8);
  v9 = *(_QWORD *)(v34 + 64);
  __chkstk_darwin(v8, v10);
  v11 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for UUID(0);
  v13 = *(_QWORD *)(v12 - 8);
  v33 = v12;
  __chkstk_darwin(v12, v14);
  v16 = (char *)&v32 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_1000080B4((uint64_t *)&unk_100295380);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17, v19);
  v21 = (char *)&v32 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v21, (uint64_t)v5 + OBJC_IVAR____TtC13appleaccountd33BeneficiaryAccessKeyRepairHandler__storageController, v17);
  Dependency.wrappedValue.getter(v39, v17);
  (*(void (**)(char *, uint64_t))(v18 + 8))(v21, v17);
  v32 = sub_10000732C(v39, v39[3]);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v16, a1, v12);
  v22 = swift_allocObject(&unk_10026BAF8, 24, 7);
  swift_weakInit(v22 + 16, v5);
  sub_100027FE8(a1, (uint64_t)v11, type metadata accessor for BeneficiaryInfoRecord);
  v23 = *(unsigned __int8 *)(v34 + 80);
  v24 = (v23 + 16) & ~v23;
  v25 = (v24 + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  v26 = (v24 + v9 + 31) & 0xFFFFFFFFFFFFFFF8;
  v27 = (v26 + 15) & 0xFFFFFFFFFFFFFFF8;
  v28 = swift_allocObject(&unk_10026BC38, v27 + 8, v23 | 7);
  sub_10003B730((uint64_t)v11, v28 + v24, type metadata accessor for BeneficiaryInfoRecord);
  v29 = v28 + v25;
  v30 = v38;
  *(_QWORD *)v29 = v35;
  *(_QWORD *)(v29 + 8) = v30;
  *(_BYTE *)(v29 + 16) = v37;
  *(_QWORD *)(v28 + v26) = v22;
  *(_QWORD *)(v28 + v27) = v36;
  swift_retain(v30);
  swift_retain(v22);
  sub_1000CE0F0((uint64_t)v16, (uint64_t)sub_10017FC5C, v28);
  swift_release(v28);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v33);
  swift_release(v22);
  return sub_100006F58(v39);
}

void sub_10017A54C(uint64_t a1, void (*a2)(uint64_t, uint64_t), uint64_t a3)
{
  uint64_t *v3;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  NSUUID v33;
  NSString v34;
  NSString v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  void *v46;
  char *v47;
  uint64_t v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  void *v61;
  void *v62;
  uint64_t v63;
  id v64;
  id v65;
  id v66;
  id v67;
  id v68;
  char *v69;
  uint64_t v70;
  id v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void (*v77)(uint64_t, uint64_t);
  uint64_t v78;
  uint64_t aBlock[5];
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;

  v77 = a2;
  v78 = a3;
  v75 = *v3;
  v5 = (_QWORD *)sub_1000080B4(&qword_10028C078);
  v70 = *(v5 - 1);
  v71 = v5;
  __chkstk_darwin(v5, v6);
  v69 = (char *)&v67 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for BeneficiaryInfoRecord(0);
  v72 = *(_QWORD *)(v8 - 8);
  v10 = __chkstk_darwin(v8, v9);
  v73 = v11;
  v74 = (uint64_t)&v67 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10, v12);
  v14 = (char *)&v67 - v13;
  if (qword_10028ADD8 != -1)
    swift_once(&qword_10028ADD8, sub_100046D78);
  v15 = type metadata accessor for Logger(0);
  v16 = sub_100005288(v15, (uint64_t)qword_1002A8A08);
  v17 = sub_100027FE8(a1, (uint64_t)v14, type metadata accessor for BeneficiaryInfoRecord);
  v18 = Logger.logObject.getter(v17);
  v19 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v18, v19))
  {
    v67 = (id)v16;
    v68 = (id)a1;
    v20 = swift_slowAlloc(22, -1);
    v21 = swift_slowAlloc(64, -1);
    aBlock[0] = v21;
    *(_DWORD *)v20 = 136315394;
    if (qword_10028AED8 != -1)
      swift_once(&qword_10028AED8, sub_1001782C0);
    v22 = qword_100295200;
    v23 = *(_QWORD *)algn_100295208;
    swift_bridgeObjectRetain(*(_QWORD *)algn_100295208);
    v81 = sub_1001DEF4C(v22, v23, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v81, &v82);
    swift_bridgeObjectRelease(v23);
    *(_WORD *)(v20 + 12) = 2080;
    v24 = type metadata accessor for UUID(0);
    v25 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v26 = dispatch thunk of CustomStringConvertible.description.getter(v24, v25);
    v28 = v27;
    v81 = sub_1001DEF4C(v26, v27, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v81, &v82);
    swift_bridgeObjectRelease(v28);
    sub_100028388((uint64_t)v14, type metadata accessor for BeneficiaryInfoRecord);
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "%s - generating new accessKey for beneficiaryID - %s.", (uint8_t *)v20, 0x16u);
    swift_arrayDestroy(v21, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v21, -1, -1);
    swift_slowDealloc(v20, -1, -1);

    a1 = (uint64_t)v68;
  }
  else
  {
    sub_100028388((uint64_t)v14, type metadata accessor for BeneficiaryInfoRecord);

  }
  v29 = v76;
  v30 = sub_100178308();
  if (v30)
  {
    v68 = v30;
    v31 = *(_QWORD *)(a1 + *(int *)(v8 + 24) + 8);
    v32 = *(_QWORD *)(a1 + *(int *)(v8 + 20) + 8);
    swift_bridgeObjectRetain(v32);
    swift_bridgeObjectRetain(v31);
    v33.super.isa = UUID._bridgeToObjectiveC()().super.isa;
    v34 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v31);
    if (v32)
    {
      v35 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v32);
    }
    else
    {
      v35 = 0;
    }
    v67 = objc_msgSend(objc_allocWithZone((Class)AABeneficiaryInfo), "initWithBeneficiaryID:benefactorAltDSID:handle:", v33.super.isa, v34, v35);

    v47 = v69;
    v48 = v70;
    v49 = v71;
    (*(void (**)(char *, uint64_t, id))(v70 + 16))(v69, v29 + OBJC_IVAR____TtC13appleaccountd33BeneficiaryAccessKeyRepairHandler__securityManager, v71);
    Dependency.wrappedValue.getter(aBlock, v49);
    (*(void (**)(char *, id))(v48 + 8))(v47, v49);
    v71 = (id)aBlock[0];
    v50 = swift_allocObject(&unk_10026BAF8, 24, 7);
    swift_weakInit(v50 + 16, v29);
    v51 = v74;
    sub_100027FE8(a1, v74, type metadata accessor for BeneficiaryInfoRecord);
    v52 = *(unsigned __int8 *)(v72 + 80);
    v53 = (v52 + 32) & ~v52;
    v54 = (v73 + v53 + 7) & 0xFFFFFFFFFFFFFFF8;
    v55 = (v54 + 15) & 0xFFFFFFFFFFFFFFF8;
    v56 = (v55 + 15) & 0xFFFFFFFFFFFFFFF8;
    v57 = (v56 + 15) & 0xFFFFFFFFFFFFFFF8;
    v58 = swift_allocObject(&unk_10026BB48, v57 + 8, v52 | 7);
    v59 = v78;
    *(_QWORD *)(v58 + 16) = v77;
    *(_QWORD *)(v58 + 24) = v59;
    sub_10003B730(v51, v58 + v53, type metadata accessor for BeneficiaryInfoRecord);
    v60 = v67;
    v61 = v68;
    *(_QWORD *)(v58 + v54) = v68;
    *(_QWORD *)(v58 + v55) = v60;
    *(_QWORD *)(v58 + v56) = v50;
    *(_QWORD *)(v58 + v57) = v75;
    aBlock[4] = (uint64_t)sub_10017E790;
    v80 = v58;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_100043E24;
    aBlock[3] = (uint64_t)&unk_10026BB60;
    v62 = _Block_copy(aBlock);
    v63 = v80;
    v64 = v60;
    swift_retain(v59);
    v65 = v61;
    swift_release(v63);
    v66 = v71;
    objc_msgSend(v71, "createInheritanceAccessKeyForContact:completion:", v64, v62);
    _Block_release(v62);

    swift_unknownObjectRelease(v66);
  }
  else
  {
    v36 = Logger.logObject.getter(0);
    v37 = static os_log_type_t.error.getter(v36);
    if (os_log_type_enabled(v36, v37))
    {
      v38 = (uint8_t *)swift_slowAlloc(12, -1);
      v39 = swift_slowAlloc(32, -1);
      aBlock[0] = v39;
      *(_DWORD *)v38 = 136315138;
      if (qword_10028AED8 != -1)
        swift_once(&qword_10028AED8, sub_1001782C0);
      v40 = qword_100295200;
      v41 = *(_QWORD *)algn_100295208;
      swift_bridgeObjectRetain(*(_QWORD *)algn_100295208);
      v81 = sub_1001DEF4C(v40, v41, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v81, &v82);
      swift_bridgeObjectRelease(v41);
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "%s - inheritanceContext is nil. Cannot proceed with updating accessKey", v38, 0xCu);
      swift_arrayDestroy(v39, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v39, -1, -1);
      swift_slowDealloc(v38, -1, -1);
    }

    type metadata accessor for InheritanceError(0);
    v43 = v42;
    v81 = 10;
    v44 = sub_100005014((uint64_t)&_swiftEmptyArrayStorage);
    v45 = sub_100005150(&qword_10028B350, (uint64_t (*)(uint64_t))type metadata accessor for InheritanceError, (uint64_t)&unk_100216D64);
    _BridgedStoredNSError.init(_:userInfo:)(aBlock, &v81, v44, v43, v45);
    v46 = (void *)aBlock[0];
    v77(aBlock[0], 1);

  }
}

void sub_10017AC58(void *a1, uint64_t a2, void (*a3)(_QWORD, _QWORD), uint64_t a4, uint64_t a5, void *a6, void *a7, uint64_t a8, uint64_t a9)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  _UNKNOWN **v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  void (*v47)(_QWORD, _QWORD);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  NSString v61;
  uint64_t v62;
  NSObject *v63;
  os_log_type_t v64;
  _BOOL4 v65;
  uint64_t v66;
  void (*v67)(_QWORD, _QWORD);
  uint8_t *v68;
  uint64_t v69;
  _UNKNOWN **v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t Strong;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  _QWORD *v81;
  id v82;
  void *v83;
  _QWORD *v84;
  id v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void (*v91)(_QWORD, _QWORD);
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  void *v98;
  uint64_t v99;
  id v100;
  id v101;
  uint64_t aBlock[5];
  _QWORD *v103;
  uint64_t v104;
  _BYTE v105[24];

  v100 = a7;
  v16 = sub_1000080B4(&qword_100295370);
  v96 = *(_QWORD *)(v16 - 8);
  v97 = v16;
  __chkstk_darwin(v16, v17);
  v95 = (char *)&v90 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for UUID(0);
  v99 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19, v20);
  v22 = (char *)&v90 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for BeneficiaryInfoRecord(0);
  __chkstk_darwin(v23, v24);
  v26 = (char *)&v90 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a1)
  {
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v43 = type metadata accessor for Logger(0);
    sub_100005288(v43, (uint64_t)qword_1002A8A08);
    swift_errorRetain(a2);
    v44 = swift_errorRetain(a2);
    v45 = Logger.logObject.getter(v44);
    v46 = static os_log_type_t.error.getter(v45);
    if (os_log_type_enabled(v45, v46))
    {
      v47 = a3;
      v48 = swift_slowAlloc(22, -1);
      v49 = swift_slowAlloc(64, -1);
      aBlock[0] = v49;
      *(_DWORD *)v48 = 136315394;
      if (qword_10028AED8 != -1)
        swift_once(&qword_10028AED8, sub_1001782C0);
      v50 = qword_100295200;
      v51 = *(_QWORD *)algn_100295208;
      swift_bridgeObjectRetain(*(_QWORD *)algn_100295208);
      v104 = sub_1001DEF4C(v50, v51, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v104, v105);
      swift_bridgeObjectRelease(v51);
      *(_WORD *)(v48 + 12) = 2080;
      v104 = a2;
      swift_errorRetain(a2);
      v52 = sub_1000080B4((uint64_t *)&unk_10028FB70);
      v53 = String.init<A>(describing:)(&v104, v52);
      v55 = v54;
      v104 = sub_1001DEF4C(v53, v54, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v104, v105);
      swift_bridgeObjectRelease(v55);
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      _os_log_impl((void *)&_mh_execute_header, v45, v46, "%s - error generating new access code: %s", (uint8_t *)v48, 0x16u);
      swift_arrayDestroy(v49, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v49, -1, -1);
      swift_slowDealloc(v48, -1, -1);

      a3 = v47;
      v56 = a2;
      if (a2)
        goto LABEL_26;
    }
    else
    {
      swift_errorRelease(a2);
      swift_errorRelease(a2);

      v56 = a2;
      if (a2)
      {
LABEL_26:
        swift_errorRetain(a2);
        swift_errorRetain(v56);
        a3(v56, 1);
        swift_errorRelease(v56);
        swift_errorRelease(v56);
        return;
      }
    }
    type metadata accessor for InheritanceError(0);
    v87 = v86;
    v104 = 0;
    v88 = sub_100005014((uint64_t)&_swiftEmptyArrayStorage);
    v89 = sub_100005150(&qword_10028B350, (uint64_t (*)(uint64_t))type metadata accessor for InheritanceError, (uint64_t)&unk_100216D64);
    _BridgedStoredNSError.init(_:userInfo:)(aBlock, &v104, v88, v87, v89);
    v56 = aBlock[0];
    goto LABEL_26;
  }
  v98 = a6;
  v94 = a4;
  v27 = qword_10028ADD8;
  v101 = a1;
  if (v27 != -1)
    swift_once(&qword_10028ADD8, sub_100046D78);
  v93 = a8 + 16;
  v28 = type metadata accessor for Logger(0);
  v29 = sub_100005288(v28, (uint64_t)qword_1002A8A08);
  v30 = sub_100027FE8(a5, (uint64_t)v26, type metadata accessor for BeneficiaryInfoRecord);
  v92 = v29;
  v31 = Logger.logObject.getter(v30);
  v32 = static os_log_type_t.info.getter();
  v33 = &off_10028A000;
  if (os_log_type_enabled(v31, v32))
  {
    v91 = a3;
    v34 = swift_slowAlloc(22, -1);
    v35 = swift_slowAlloc(64, -1);
    aBlock[0] = v35;
    *(_DWORD *)v34 = 136315394;
    if (qword_10028AED8 != -1)
      swift_once(&qword_10028AED8, sub_1001782C0);
    v37 = qword_100295200;
    v36 = *(_QWORD *)algn_100295208;
    swift_bridgeObjectRetain(*(_QWORD *)algn_100295208);
    v104 = sub_1001DEF4C(v37, v36, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v104, v105);
    swift_bridgeObjectRelease(v36);
    *(_WORD *)(v34 + 12) = 2080;
    v38 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v39 = dispatch thunk of CustomStringConvertible.description.getter(v19, v38);
    v41 = v40;
    v104 = sub_1001DEF4C(v39, v40, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v104, v105);
    swift_bridgeObjectRelease(v41);
    sub_100028388((uint64_t)v26, type metadata accessor for BeneficiaryInfoRecord);
    _os_log_impl((void *)&_mh_execute_header, v31, v32, "%s - created new accessKey for beneficiaryID - %s.", (uint8_t *)v34, 0x16u);
    swift_arrayDestroy(v35, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v35, -1, -1);
    swift_slowDealloc(v34, -1, -1);

    a3 = v91;
    v42 = v98;
    v33 = &off_10028A000;
  }
  else
  {
    sub_100028388((uint64_t)v26, type metadata accessor for BeneficiaryInfoRecord);

    v42 = v98;
  }
  objc_msgSend(v42, "setAccessKey:", v101);
  v57 = objc_msgSend(v100, "beneficiaryID");
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v57);

  UUID.uuidString.getter(v58);
  v60 = v59;
  (*(void (**)(char *, uint64_t))(v99 + 8))(v22, v19);
  v61 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v60);
  objc_msgSend(v42, "setBeneficiaryIdentifier:", v61);

  v63 = Logger.logObject.getter(v62);
  v64 = static os_log_type_t.info.getter();
  v65 = os_log_type_enabled(v63, v64);
  v66 = v94;
  if (v65)
  {
    v67 = a3;
    v68 = (uint8_t *)swift_slowAlloc(12, -1);
    v69 = swift_slowAlloc(32, -1);
    v70 = v33;
    v71 = v69;
    aBlock[0] = v69;
    *(_DWORD *)v68 = 136315138;
    if (v70[475] != (_UNKNOWN *)-1)
      swift_once(&qword_10028AED8, sub_1001782C0);
    v72 = qword_100295200;
    v73 = *(_QWORD *)algn_100295208;
    swift_bridgeObjectRetain(*(_QWORD *)algn_100295208);
    v104 = sub_1001DEF4C(v72, v73, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v104, v105);
    swift_bridgeObjectRelease(v73);
    _os_log_impl((void *)&_mh_execute_header, v63, v64, "%s - notifying IdMS of the accessKey change...", v68, 0xCu);
    swift_arrayDestroy(v71, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v71, -1, -1);
    swift_slowDealloc(v68, -1, -1);

    a3 = v67;
    v42 = v98;
  }
  else
  {

  }
  v74 = v93;
  swift_beginAccess(v93, &v104, 0, 0);
  Strong = swift_weakLoadStrong(v74);
  if (Strong)
  {
    v76 = Strong;
    v77 = v95;
    v78 = v96;
    v79 = v97;
    (*(void (**)(char *, uint64_t, uint64_t))(v96 + 16))(v95, Strong + OBJC_IVAR____TtC13appleaccountd33BeneficiaryAccessKeyRepairHandler__requestController, v97);
    Dependency.wrappedValue.getter(aBlock, v79);
    swift_release(v76);
    (*(void (**)(char *, uint64_t))(v78 + 8))(v77, v79);
    v80 = (void *)aBlock[0];
    v81 = (_QWORD *)swift_allocObject(&unk_10026BB98, 48, 7);
    v81[2] = a3;
    v81[3] = v66;
    v82 = v101;
    v81[4] = v101;
    v81[5] = a9;
    aBlock[4] = (uint64_t)sub_10017E854;
    v103 = v81;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_1001DC548;
    aBlock[3] = (uint64_t)&unk_10026BBB0;
    v83 = _Block_copy(aBlock);
    v84 = v103;
    v85 = v82;
    swift_retain(v66);
    swift_release(v84);
    objc_msgSend(v80, "updateBeneficiaryWithInheritanceContext:completion:", v42, v83);
    swift_unknownObjectRelease(v80);

    _Block_release(v83);
  }
  else
  {

  }
}

uint64_t sub_10017B550(uint64_t a1, void (*a2)(uint64_t, uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v28;
  uint64_t v29;

  if (a1)
  {
    swift_errorRetain(a1);
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v6 = type metadata accessor for Logger(0);
    sub_100005288(v6, (uint64_t)qword_1002A8A08);
    swift_errorRetain(a1);
    v7 = swift_errorRetain(a1);
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.error.getter(v8);
    if (os_log_type_enabled(v8, v9))
    {
      v10 = swift_slowAlloc(22, -1);
      v11 = swift_slowAlloc(64, -1);
      v29 = v11;
      *(_DWORD *)v10 = 136315394;
      if (qword_10028AED8 != -1)
        swift_once(&qword_10028AED8, sub_1001782C0);
      v12 = qword_100295200;
      v13 = *(_QWORD *)algn_100295208;
      swift_bridgeObjectRetain(*(_QWORD *)algn_100295208);
      v28 = sub_1001DEF4C(v12, v13, &v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29);
      swift_bridgeObjectRelease(v13);
      *(_WORD *)(v10 + 12) = 2080;
      v28 = a1;
      swift_errorRetain(a1);
      v14 = sub_1000080B4(&qword_10028E850);
      v15 = String.init<A>(describing:)(&v28, v14);
      v17 = v16;
      v28 = sub_1001DEF4C(v15, v16, &v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29);
      swift_bridgeObjectRelease(v17);
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "%s - error updating access code with IdMS: %s", (uint8_t *)v10, 0x16u);
      swift_arrayDestroy(v11, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v11, -1, -1);
      swift_slowDealloc(v10, -1, -1);
    }
    else
    {
      swift_errorRelease(a1);
      swift_errorRelease(a1);
    }

    swift_errorRetain(a1);
    a2(a1, 1);
    swift_errorRelease(a1);
    return swift_errorRelease(a1);
  }
  else
  {
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v19 = type metadata accessor for Logger(0);
    v20 = sub_100005288(v19, (uint64_t)qword_1002A8A08);
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v21, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc(12, -1);
      v24 = swift_slowAlloc(32, -1);
      v29 = v24;
      *(_DWORD *)v23 = 136315138;
      if (qword_10028AED8 != -1)
        swift_once(&qword_10028AED8, sub_1001782C0);
      v25 = qword_100295200;
      v26 = *(_QWORD *)algn_100295208;
      swift_bridgeObjectRetain(*(_QWORD *)algn_100295208);
      v28 = sub_1001DEF4C(v25, v26, &v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29);
      swift_bridgeObjectRelease(v26);
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "%s - successfully updated AccessKey with IdMS", v23, 0xCu);
      swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v24, -1, -1);
      swift_slowDealloc(v23, -1, -1);
    }

    return ((uint64_t (*)(uint64_t, _QWORD))a2)(a4, 0);
  }
}

void sub_10017B940(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4, char a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  unint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  NSObject *v52;
  os_log_type_t v53;
  uint8_t *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  NSObject *v61;
  os_log_type_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t Strong;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  NSObject *v80;
  os_log_type_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void (*v94)(uint64_t);
  uint64_t v95;
  char v96[24];
  _QWORD v97[3];
  uint64_t v98[5];
  uint64_t v99;
  _BYTE v100[24];

  v94 = a3;
  v95 = a4;
  v90 = a2;
  v9 = sub_1000080B4((uint64_t *)&unk_100295380);
  v91 = *(_QWORD *)(v9 - 8);
  v92 = v9;
  __chkstk_darwin(v9, v10);
  v12 = (char *)&v89 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for InheritanceHealthRecord(0);
  v15 = __chkstk_darwin(v13, v14);
  v93 = (uint64_t)&v89 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15, v17);
  v19 = (char *)&v89 - v18;
  v20 = type metadata accessor for BeneficiaryInfoRecord(0);
  __chkstk_darwin(v20, v21);
  v23 = (char *)&v89 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_1000080B4((uint64_t *)&unk_100295390);
  __chkstk_darwin(v24, v25);
  v27 = (uint64_t *)((char *)&v89 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100024A20(a1, (uint64_t)v27, (uint64_t *)&unk_100295390);
  if (swift_getEnumCaseMultiPayload(v27, v24) != 1)
  {
    sub_10003B730((uint64_t)v27, (uint64_t)v19, type metadata accessor for InheritanceHealthRecord);
    v49 = *(int *)(v13 + 36);
    if ((v19[v49] & 1) != 0)
    {
      if (qword_10028ADD8 != -1)
        swift_once(&qword_10028ADD8, sub_100046D78);
      v50 = type metadata accessor for Logger(0);
      v51 = sub_100005288(v50, (uint64_t)qword_1002A8A08);
      v52 = Logger.logObject.getter(v51);
      v53 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v52, v53))
      {
        v54 = (uint8_t *)swift_slowAlloc(12, -1);
        v55 = swift_slowAlloc(32, -1);
        v98[0] = v55;
        *(_DWORD *)v54 = 136315138;
        if (qword_10028AED8 != -1)
          swift_once(&qword_10028AED8, sub_1001782C0);
        v56 = qword_100295200;
        v57 = *(_QWORD *)algn_100295208;
        swift_bridgeObjectRetain(*(_QWORD *)algn_100295208);
        v99 = sub_1001DEF4C(v56, v57, v98);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v99, v100);
        swift_bridgeObjectRelease(v57);
        _os_log_impl((void *)&_mh_execute_header, v52, v53, "%s - inheritanceHealthRecord is already in Manatee.", v54, 0xCu);
        swift_arrayDestroy(v55, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v55, -1, -1);
        swift_slowDealloc(v54, -1, -1);
      }

      v94(0);
    }
    else
    {
      v58 = a6 + 16;
      v19[v49] = a5 & 1;
      if (qword_10028ADD8 != -1)
        swift_once(&qword_10028ADD8, sub_100046D78);
      v59 = type metadata accessor for Logger(0);
      v60 = sub_100005288(v59, (uint64_t)qword_1002A8A08);
      v61 = Logger.logObject.getter(v60);
      v62 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v61, v62))
      {
        v63 = swift_slowAlloc(22, -1);
        v64 = swift_slowAlloc(64, -1);
        v98[0] = v64;
        *(_DWORD *)v63 = 136315394;
        if (qword_10028AED8 != -1)
          swift_once(&qword_10028AED8, sub_1001782C0);
        v65 = qword_100295200;
        v66 = *(_QWORD *)algn_100295208;
        swift_bridgeObjectRetain(*(_QWORD *)algn_100295208);
        v99 = sub_1001DEF4C(v65, v66, v98);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v99, v100);
        swift_bridgeObjectRelease(v66);
        *(_WORD *)(v63 + 12) = 2080;
        swift_beginAccess(v19, v96, 0, 0);
        v67 = sub_1000C640C();
        v69 = v68;
        v99 = sub_1001DEF4C(v67, v68, v98);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v99, v100);
        swift_bridgeObjectRelease(v69);
        _os_log_impl((void *)&_mh_execute_header, v61, v62, "%s - saving updated InheritanceHealthRecord - %s", (uint8_t *)v63, 0x16u);
        swift_arrayDestroy(v64, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v64, -1, -1);
        swift_slowDealloc(v63, -1, -1);
      }

      swift_beginAccess(v58, &v99, 0, 0);
      Strong = swift_weakLoadStrong(v58);
      if (Strong)
      {
        v71 = Strong;
        v73 = v91;
        v72 = v92;
        (*(void (**)(char *, uint64_t, uint64_t))(v91 + 16))(v12, Strong + OBJC_IVAR____TtC13appleaccountd33BeneficiaryAccessKeyRepairHandler__storageController, v92);
        Dependency.wrappedValue.getter(v98, v72);
        swift_release(v71);
        (*(void (**)(char *, uint64_t))(v73 + 8))(v12, v72);
        sub_10000732C(v98, v98[3]);
        swift_beginAccess(v19, v97, 0, 0);
        v74 = v93;
        sub_100027FE8((uint64_t)v19, v93, type metadata accessor for InheritanceHealthRecord);
        v75 = swift_allocObject(&unk_10026BC60, 32, 7);
        *(_QWORD *)(v75 + 16) = v94;
        v76 = v95;
        *(_QWORD *)(v75 + 24) = v95;
        swift_retain(v76);
        sub_1000CE4C4(v74, (uint64_t)sub_10017FCF0, v75);
        swift_release(v75);
        sub_100028388(v74, type metadata accessor for InheritanceHealthRecord);
        sub_100006F58(v98);
        v77 = (uint64_t)v19;
LABEL_27:
        sub_100028388(v77, type metadata accessor for InheritanceHealthRecord);
        return;
      }
    }
    v77 = (uint64_t)v19;
    goto LABEL_27;
  }
  v98[0] = *v27;
  v28 = v98[0];
  swift_errorRetain(v98[0]);
  v29 = sub_1000080B4(&qword_10028E850);
  type metadata accessor for InheritanceError(0);
  v31 = v30;
  if ((swift_dynamicCast(&v99, v98, v29, v30, 6) & 1) != 0)
  {
    v32 = (void *)v99;
    v98[0] = v99;
    v97[0] = 3;
    v33 = sub_100005014((uint64_t)&_swiftEmptyArrayStorage);
    v34 = sub_100005150(&qword_10028B350, (uint64_t (*)(uint64_t))type metadata accessor for InheritanceError, (uint64_t)&unk_100216D64);
    _BridgedStoredNSError.init(_:userInfo:)(&v99, v97, v33, v31, v34);
    v35 = (void *)v99;
    v97[0] = v99;
    LOBYTE(v33) = static _BridgedStoredNSError.== infix(_:_:)(v98, v97, v31, v34);

    if ((v33 & 1) != 0)
    {
      if (qword_10028ADD8 != -1)
        swift_once(&qword_10028ADD8, sub_100046D78);
      v36 = type metadata accessor for Logger(0);
      sub_100005288(v36, (uint64_t)qword_1002A8A08);
      v37 = sub_100027FE8(v90, (uint64_t)v23, type metadata accessor for BeneficiaryInfoRecord);
      v38 = Logger.logObject.getter(v37);
      v39 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v38, v39))
      {
        v40 = swift_slowAlloc(22, -1);
        v93 = swift_slowAlloc(64, -1);
        v98[0] = v93;
        *(_DWORD *)v40 = 136315394;
        if (qword_10028AED8 != -1)
          swift_once(&qword_10028AED8, sub_1001782C0);
        v41 = qword_100295200;
        v42 = *(_QWORD *)algn_100295208;
        swift_bridgeObjectRetain(*(_QWORD *)algn_100295208);
        v99 = sub_1001DEF4C(v41, v42, v98);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v99, v100);
        swift_bridgeObjectRelease(v42);
        *(_WORD *)(v40 + 12) = 2080;
        v43 = type metadata accessor for UUID(0);
        v44 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v45 = dispatch thunk of CustomStringConvertible.description.getter(v43, v44);
        v47 = v46;
        v99 = sub_1001DEF4C(v45, v46, v98);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v99, v100);
        swift_bridgeObjectRelease(v47);
        sub_100028388((uint64_t)v23, type metadata accessor for BeneficiaryInfoRecord);
        _os_log_impl((void *)&_mh_execute_header, v38, v39, "%s - there is no InheritanceHealthRecord for beneficiaryID - %s.", (uint8_t *)v40, 0x16u);
        v48 = v93;
        swift_arrayDestroy(v93, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v48, -1, -1);
        swift_slowDealloc(v40, -1, -1);
      }
      else
      {
        sub_100028388((uint64_t)v23, type metadata accessor for BeneficiaryInfoRecord);
      }

      v94(0);
      swift_errorRelease(v28);

      return;
    }

  }
  if (qword_10028ADD8 != -1)
    swift_once(&qword_10028ADD8, sub_100046D78);
  v78 = type metadata accessor for Logger(0);
  sub_100005288(v78, (uint64_t)qword_1002A8A08);
  swift_errorRetain(v28);
  v79 = swift_errorRetain(v28);
  v80 = Logger.logObject.getter(v79);
  v81 = static os_log_type_t.error.getter(v80);
  if (os_log_type_enabled(v80, v81))
  {
    v82 = swift_slowAlloc(22, -1);
    v83 = swift_slowAlloc(64, -1);
    v98[0] = v83;
    *(_DWORD *)v82 = 136315394;
    if (qword_10028AED8 != -1)
      swift_once(&qword_10028AED8, sub_1001782C0);
    v84 = qword_100295200;
    v85 = *(_QWORD *)algn_100295208;
    swift_bridgeObjectRetain(*(_QWORD *)algn_100295208);
    v99 = sub_1001DEF4C(v84, v85, v98);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v99, v100);
    swift_bridgeObjectRelease(v85);
    *(_WORD *)(v82 + 12) = 2080;
    v99 = v28;
    swift_errorRetain(v28);
    v86 = String.init<A>(describing:)(&v99, v29);
    v88 = v87;
    v99 = sub_1001DEF4C(v86, v87, v98);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v99, v100);
    swift_bridgeObjectRelease(v88);
    swift_errorRelease(v28);
    swift_errorRelease(v28);
    _os_log_impl((void *)&_mh_execute_header, v80, v81, "%s - error fetching InheritanceHealthRecord. Abandoning migration - %s", (uint8_t *)v82, 0x16u);
    swift_arrayDestroy(v83, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v83, -1, -1);
    swift_slowDealloc(v82, -1, -1);
  }
  else
  {
    swift_errorRelease(v28);
    swift_errorRelease(v28);
  }

  swift_errorRetain(v28);
  v94(v28);
  swift_errorRelease(v28);
  swift_errorRelease(v28);
}

uint64_t sub_10017C454(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v10;

  v4 = sub_1000080B4((uint64_t *)&unk_100295390);
  __chkstk_darwin(v4, v5);
  v7 = (uint64_t *)((char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100024A20(a1, (uint64_t)v7, (uint64_t *)&unk_100295390);
  if (swift_getEnumCaseMultiPayload(v7, v4) == 1)
  {
    v8 = *v7;
    swift_errorRetain(v8);
    a2(v8);
    swift_errorRelease(v8);
    return swift_errorRelease(v8);
  }
  else
  {
    a2(0);
    return sub_100004934((uint64_t)v7, (uint64_t *)&unk_100295390);
  }
}

uint64_t sub_10017C530(int a1, uint64_t a2, uint64_t a3, void **a4, unint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t Strong;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  void **v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  void ***v35;
  unint64_t v36;
  uint64_t v37;
  void **v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char v43[24];
  _QWORD v44[5];
  char v45[24];

  v40 = a6;
  v41 = a8;
  v42 = a5;
  v38 = a4;
  v39 = a1;
  v11 = type metadata accessor for BeneficiaryInfoRecord(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  __chkstk_darwin(v11, v14);
  v15 = sub_1000080B4(&qword_1002953B0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15, v17);
  v19 = (char *)&v36 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = a2 + 16;
  swift_beginAccess(v20, v45, 0, 0);
  result = swift_weakLoadStrong(v20);
  if (result)
  {
    v22 = result;
    (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v19, result + OBJC_IVAR____TtC13appleaccountd33BeneficiaryAccessKeyRepairHandler__cloudSharingController, v15);
    Dependency.wrappedValue.getter(v44, v15);
    swift_release(v22);
    (*(void (**)(char *, uint64_t))(v16 + 8))(v19, v15);
    v23 = swift_allocObject(&unk_10026BAF8, 24, 7);
    swift_beginAccess(v20, v43, 0, 0);
    Strong = swift_weakLoadStrong(v20);
    swift_weakInit(v23 + 16, Strong);
    swift_release(Strong);
    v37 = a3;
    v25 = (char *)&v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_100027FE8(a3, (uint64_t)v25, type metadata accessor for BeneficiaryInfoRecord);
    v26 = *(unsigned __int8 *)(v12 + 80);
    v27 = (v26 + 16) & ~v26;
    v36 = (v27 + v13 + 7) & 0xFFFFFFFFFFFFFFF8;
    v28 = (v27 + v13 + 31) & 0xFFFFFFFFFFFFFFF8;
    v29 = (v28 + 15) & 0xFFFFFFFFFFFFFFF8;
    v30 = v42;
    v31 = v38;
    v32 = (v29 + 23) & 0xFFFFFFFFFFFFFFF8;
    v33 = swift_allocObject(&unk_10026BE18, v32 + 8, v26 | 7);
    sub_10003B730((uint64_t)v25, v33 + v27, type metadata accessor for BeneficiaryInfoRecord);
    v34 = v33 + v36;
    *(_QWORD *)v34 = v40;
    *(_QWORD *)(v34 + 8) = a7;
    *(_BYTE *)(v34 + 16) = v39 & 1;
    *(_QWORD *)(v33 + v28) = v23;
    v35 = (void ***)(v33 + v29);
    *v35 = v31;
    v35[1] = (void **)v30;
    *(_QWORD *)(v33 + v32) = v41;
    swift_retain(a7);
    swift_retain(v23);
    swift_bridgeObjectRetain(v30);
    sub_100066680(v37, v31, v30, (uint64_t)sub_100181320, v33);
    swift_release(v23);
    swift_release(v33);
    return sub_100006F58(v44);
  }
  return result;
}

uint64_t sub_10017C7B8(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  NSObject *v55;
  os_log_type_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t Strong;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v72;
  uint64_t v73;
  NSObject *v74;
  os_log_type_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD v91[2];
  uint64_t v92;
  char *v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  uint64_t (*v101)(uint64_t);
  uint64_t v102;
  uint64_t v103[3];
  uint64_t v104;
  uint64_t v105;
  _BYTE v106[24];

  v98 = a7;
  v99 = a8;
  v100 = a5;
  v101 = a3;
  v102 = a2;
  v11 = sub_1000080B4(&qword_1002953B8);
  v96 = *(_QWORD *)(v11 - 8);
  v97 = v11;
  __chkstk_darwin(v11, v12);
  v95 = (char *)v91 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for CloudShareInfo(0);
  v16 = __chkstk_darwin(v14, v15);
  v18 = (char *)v91 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16, v19);
  v21 = (char *)v91 - v20;
  v22 = type metadata accessor for BeneficiaryInfoRecord(0);
  v24 = __chkstk_darwin(v22, v23);
  v26 = (char *)v91 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24, v27);
  v29 = (char *)v91 - v28;
  v30 = sub_1000080B4(&qword_1002953C0);
  __chkstk_darwin(v30, v31);
  v33 = (_QWORD *)((char *)v91 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100024A20(a1, (uint64_t)v33, &qword_1002953C0);
  if (swift_getEnumCaseMultiPayload(v33, v30) != 1)
  {
    v93 = v26;
    sub_10003B730((uint64_t)v33, (uint64_t)v21, type metadata accessor for CloudShareInfo);
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v51 = a6 + 16;
    v52 = type metadata accessor for Logger(0);
    v53 = sub_100005288(v52, (uint64_t)qword_1002A8A08);
    v54 = sub_100027FE8((uint64_t)v21, (uint64_t)v18, type metadata accessor for CloudShareInfo);
    v55 = Logger.logObject.getter(v54);
    v56 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v55, v56))
    {
      v91[1] = v53;
      v92 = v51;
      v94 = a4;
      v57 = swift_slowAlloc(22, -1);
      v58 = swift_slowAlloc(64, -1);
      v103[0] = v58;
      *(_DWORD *)v57 = 136315394;
      if (qword_10028AED8 != -1)
        swift_once(&qword_10028AED8, sub_1001782C0);
      v60 = qword_100295200;
      v59 = *(_QWORD *)algn_100295208;
      swift_bridgeObjectRetain(*(_QWORD *)algn_100295208);
      v105 = sub_1001DEF4C(v60, v59, v103);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v105, v106);
      swift_bridgeObjectRelease(v59);
      *(_WORD *)(v57 + 12) = 2080;
      v61 = type metadata accessor for URL(0);
      v62 = sub_100005150((unint64_t *)&qword_10028F3B0, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
      v63 = dispatch thunk of CustomStringConvertible.description.getter(v61, v62);
      v65 = v64;
      v105 = sub_1001DEF4C(v63, v64, v103);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v105, v106);
      swift_bridgeObjectRelease(v65);
      sub_100028388((uint64_t)v18, type metadata accessor for CloudShareInfo);
      _os_log_impl((void *)&_mh_execute_header, v55, v56, "%s - successfully shared BeneficiaryInfoRecord with URL - %s", (uint8_t *)v57, 0x16u);
      swift_arrayDestroy(v58, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v58, -1, -1);
      swift_slowDealloc(v57, -1, -1);

      a4 = v94;
      v51 = v92;
      if ((v100 & 1) == 0)
      {
LABEL_14:
        swift_beginAccess(v51, &v105, 0, 0);
        Strong = swift_weakLoadStrong(v51);
        if (Strong)
        {
          v67 = Strong;
          v68 = v95;
          v69 = v96;
          v70 = v97;
          (*(void (**)(char *, uint64_t, uint64_t))(v96 + 16))(v95, Strong + OBJC_IVAR____TtC13appleaccountd33BeneficiaryAccessKeyRepairHandler__setupMessenger, v97);
          Dependency.wrappedValue.getter(v103, v70);
          swift_release(v67);
          (*(void (**)(char *, uint64_t))(v69 + 8))(v68, v70);
          sub_10000732C(v103, v104);
          sub_100151BC4((uint64_t)v21, v102, v98, v99, v101, a4);
LABEL_26:
          sub_100028388((uint64_t)v21, type metadata accessor for CloudShareInfo);
          return sub_100006F58(v103);
        }
        return sub_100028388((uint64_t)v21, type metadata accessor for CloudShareInfo);
      }
    }
    else
    {
      sub_100028388((uint64_t)v18, type metadata accessor for CloudShareInfo);

      if ((v100 & 1) == 0)
        goto LABEL_14;
    }
    v72 = (uint64_t)v93;
    v73 = sub_100027FE8(v102, (uint64_t)v93, type metadata accessor for BeneficiaryInfoRecord);
    v74 = Logger.logObject.getter(v73);
    v75 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v74, v75))
    {
      v92 = v51;
      v94 = a4;
      v76 = swift_slowAlloc(22, -1);
      v77 = swift_slowAlloc(64, -1);
      v103[0] = v77;
      *(_DWORD *)v76 = 136315394;
      if (qword_10028AED8 != -1)
        swift_once(&qword_10028AED8, sub_1001782C0);
      v78 = qword_100295200;
      v79 = *(_QWORD *)algn_100295208;
      swift_bridgeObjectRetain(*(_QWORD *)algn_100295208);
      v105 = sub_1001DEF4C(v78, v79, v103);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v105, v106);
      swift_bridgeObjectRelease(v79);
      *(_WORD *)(v76 + 12) = 2080;
      v80 = type metadata accessor for UUID(0);
      v81 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v82 = (uint64_t)v93;
      v83 = dispatch thunk of CustomStringConvertible.description.getter(v80, v81);
      v85 = v84;
      v105 = sub_1001DEF4C(v83, v84, v103);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v105, v106);
      swift_bridgeObjectRelease(v85);
      sub_100028388(v82, type metadata accessor for BeneficiaryInfoRecord);
      _os_log_impl((void *)&_mh_execute_header, v74, v75, "%s - we removed the previous share, will send as new share for beneficiaryID - %s", (uint8_t *)v76, 0x16u);
      swift_arrayDestroy(v77, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v77, -1, -1);
      swift_slowDealloc(v76, -1, -1);

      a4 = v94;
      v51 = v92;
    }
    else
    {
      sub_100028388(v72, type metadata accessor for BeneficiaryInfoRecord);

    }
    swift_beginAccess(v51, &v105, 0, 0);
    v86 = swift_weakLoadStrong(v51);
    if (v86)
    {
      v87 = v86;
      v88 = v95;
      v89 = v96;
      v90 = v97;
      (*(void (**)(char *, uint64_t, uint64_t))(v96 + 16))(v95, v86 + OBJC_IVAR____TtC13appleaccountd33BeneficiaryAccessKeyRepairHandler__setupMessenger, v97);
      Dependency.wrappedValue.getter(v103, v90);
      swift_release(v87);
      (*(void (**)(char *, uint64_t))(v89 + 8))(v88, v90);
      sub_10000732C(v103, v104);
      sub_100150E74((uint64_t)v21, v98, v99, v102, v101, a4);
      goto LABEL_26;
    }
    return sub_100028388((uint64_t)v21, type metadata accessor for CloudShareInfo);
  }
  v34 = *v33;
  if (qword_10028ADD8 != -1)
    swift_once(&qword_10028ADD8, sub_100046D78);
  v35 = type metadata accessor for Logger(0);
  sub_100005288(v35, (uint64_t)qword_1002A8A08);
  sub_100027FE8(v102, (uint64_t)v29, type metadata accessor for BeneficiaryInfoRecord);
  swift_errorRetain(v34);
  v36 = swift_errorRetain(v34);
  v37 = Logger.logObject.getter(v36);
  v38 = static os_log_type_t.error.getter(v37);
  if (os_log_type_enabled(v37, v38))
  {
    v94 = a4;
    v39 = swift_slowAlloc(32, -1);
    v40 = (uint64_t *)swift_slowAlloc(8, -1);
    v102 = swift_slowAlloc(64, -1);
    v103[0] = v102;
    *(_DWORD *)v39 = 136315650;
    if (qword_10028AED8 != -1)
      swift_once(&qword_10028AED8, sub_1001782C0);
    v41 = qword_100295200;
    v42 = *(_QWORD *)algn_100295208;
    swift_bridgeObjectRetain(*(_QWORD *)algn_100295208);
    v105 = sub_1001DEF4C(v41, v42, v103);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v105, v106);
    swift_bridgeObjectRelease(v42);
    *(_WORD *)(v39 + 12) = 2080;
    v43 = type metadata accessor for UUID(0);
    v44 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v45 = dispatch thunk of CustomStringConvertible.description.getter(v43, v44);
    v47 = v46;
    v105 = sub_1001DEF4C(v45, v46, v103);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v105, v106);
    swift_bridgeObjectRelease(v47);
    sub_100028388((uint64_t)v29, type metadata accessor for BeneficiaryInfoRecord);
    *(_WORD *)(v39 + 22) = 2112;
    v48 = _convertErrorToNSError(_:)(v34);
    v105 = v48;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v105, v106);
    *v40 = v48;
    swift_errorRelease(v34);
    swift_errorRelease(v34);
    _os_log_impl((void *)&_mh_execute_header, v37, v38, "%s - failed to share BeneficiaryInfoRecord for beneficiaryID %s with error: %@", (uint8_t *)v39, 0x20u);
    v49 = sub_1000080B4((uint64_t *)&unk_10028BC20);
    swift_arrayDestroy(v40, 1, v49);
    swift_slowDealloc(v40, -1, -1);
    v50 = v102;
    swift_arrayDestroy(v102, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v50, -1, -1);
    swift_slowDealloc(v39, -1, -1);

  }
  else
  {
    sub_100028388((uint64_t)v29, type metadata accessor for BeneficiaryInfoRecord);
    swift_errorRelease(v34);
    swift_errorRelease(v34);

  }
  swift_errorRetain(v34);
  v101(v34);
  swift_errorRelease(v34);
  return swift_errorRelease(v34);
}

uint64_t sub_10017D1C8(uint64_t a1, void (*a2)(_QWORD))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v29;
  void (*v30)(_QWORD);
  uint64_t v31;
  uint64_t v32;

  v4 = sub_1000080B4((uint64_t *)&unk_10028CD50);
  __chkstk_darwin(v4, v5);
  v7 = (uint64_t *)((char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100024A20(a1, (uint64_t)v7, (uint64_t *)&unk_10028CD50);
  if (swift_getEnumCaseMultiPayload(v7, v4) == 1)
  {
    v8 = *v7;
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v9 = type metadata accessor for Logger(0);
    sub_100005288(v9, (uint64_t)qword_1002A8A08);
    v10 = swift_errorRetain(v8);
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.error.getter(v11);
    if (os_log_type_enabled(v11, v12))
    {
      v30 = a2;
      v13 = swift_slowAlloc(22, -1);
      v14 = (uint64_t *)swift_slowAlloc(8, -1);
      v15 = swift_slowAlloc(32, -1);
      v32 = v15;
      *(_DWORD *)v13 = 136315394;
      if (qword_10028AED8 != -1)
        swift_once(&qword_10028AED8, sub_1001782C0);
      v17 = qword_100295200;
      v16 = *(_QWORD *)algn_100295208;
      swift_bridgeObjectRetain(*(_QWORD *)algn_100295208);
      v31 = sub_1001DEF4C(v17, v16, &v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32);
      swift_bridgeObjectRelease(v16);
      *(_WORD *)(v13 + 12) = 2112;
      v18 = _convertErrorToNSError(_:)(v8);
      v31 = v18;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32);
      *v14 = v18;
      swift_errorRelease(v8);
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%s - failed to delete beneficiary record from cloud store: %@", (uint8_t *)v13, 0x16u);
      v19 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v14, 1, v19);
      swift_slowDealloc(v14, -1, -1);
      swift_arrayDestroy(v15, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v15, -1, -1);
      swift_slowDealloc(v13, -1, -1);

      a2 = v30;
    }
    else
    {
      swift_errorRelease(v8);

    }
    swift_errorRetain(v8);
    a2(v8);
    swift_errorRelease(v8);
    return swift_errorRelease(v8);
  }
  else
  {
    sub_100004934((uint64_t)v7, (uint64_t *)&unk_10028CD50);
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v20 = type metadata accessor for Logger(0);
    v21 = sub_100005288(v20, (uint64_t)qword_1002A8A08);
    v22 = Logger.logObject.getter(v21);
    v23 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v22, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc(12, -1);
      v25 = swift_slowAlloc(32, -1);
      v32 = v25;
      *(_DWORD *)v24 = 136315138;
      if (qword_10028AED8 != -1)
        swift_once(&qword_10028AED8, sub_1001782C0);
      v26 = qword_100295200;
      v27 = *(_QWORD *)algn_100295208;
      swift_bridgeObjectRetain(*(_QWORD *)algn_100295208);
      v31 = sub_1001DEF4C(v26, v27, &v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32);
      swift_bridgeObjectRelease(v27);
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "%s - cloud store beneficiary record deleted successfully.", v24, 0xCu);
      swift_arrayDestroy(v25, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v25, -1, -1);
      swift_slowDealloc(v24, -1, -1);
    }

    return ((uint64_t (*)(_QWORD))a2)(0);
  }
}

uint64_t sub_10017D624()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = v0 + OBJC_IVAR____TtC13appleaccountd33BeneficiaryAccessKeyRepairHandler__accountStore;
  v2 = sub_1000080B4(&qword_10028FA50);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  v3 = v0 + OBJC_IVAR____TtC13appleaccountd33BeneficiaryAccessKeyRepairHandler__storageController;
  v4 = sub_1000080B4((uint64_t *)&unk_100295380);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  v5 = v0 + OBJC_IVAR____TtC13appleaccountd33BeneficiaryAccessKeyRepairHandler__requestController;
  v6 = sub_1000080B4(&qword_100295370);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = v0 + OBJC_IVAR____TtC13appleaccountd33BeneficiaryAccessKeyRepairHandler__securityManager;
  v8 = sub_1000080B4(&qword_10028C078);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = v0 + OBJC_IVAR____TtC13appleaccountd33BeneficiaryAccessKeyRepairHandler__cloudSharingController;
  v10 = sub_1000080B4(&qword_1002953B0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  v11 = v0 + OBJC_IVAR____TtC13appleaccountd33BeneficiaryAccessKeyRepairHandler__setupMessenger;
  v12 = sub_1000080B4(&qword_1002953B8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
  v13 = v0 + OBJC_IVAR____TtC13appleaccountd33BeneficiaryAccessKeyRepairHandler__cloudStorage;
  v14 = sub_1000080B4(&qword_10028E8C0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
  sub_10017F574(*(id *)(v0
                      + OBJC_IVAR____TtC13appleaccountd33BeneficiaryAccessKeyRepairHandler____lazy_storage___inheritanceContext));
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_10017D790()
{
  return type metadata accessor for BeneficiaryAccessKeyRepairHandler(0);
}

uint64_t type metadata accessor for BeneficiaryAccessKeyRepairHandler(uint64_t a1)
{
  uint64_t result;

  result = qword_100295278;
  if (!qword_100295278)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for BeneficiaryAccessKeyRepairHandler);
  return result;
}

void sub_10017D7D4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD v16[8];

  sub_100017464(319, (unint64_t *)&qword_100293810, &qword_10028C860);
  if (v3 <= 0x3F)
  {
    v16[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_100017464(319, (unint64_t *)&qword_1002954D0, &qword_100294B10);
    if (v5 <= 0x3F)
    {
      v16[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_100017464(319, (unint64_t *)&unk_1002954C0, (uint64_t *)&unk_10028FBC0);
      if (v7 <= 0x3F)
      {
        v16[2] = *(_QWORD *)(v6 - 8) + 64;
        sub_100017464(319, qword_1002954E0, &qword_100295290);
        if (v9 <= 0x3F)
        {
          v16[3] = *(_QWORD *)(v8 - 8) + 64;
          sub_100017464(319, (unint64_t *)&unk_100295298, (uint64_t *)&unk_10028FBE0);
          if (v11 <= 0x3F)
          {
            v16[4] = *(_QWORD *)(v10 - 8) + 64;
            sub_100017464(319, qword_1002952A8, (uint64_t *)&unk_10028FBD0);
            if (v13 <= 0x3F)
            {
              v16[5] = *(_QWORD *)(v12 - 8) + 64;
              sub_100017464(319, &qword_10028C8B8, (uint64_t *)&unk_10028C8C0);
              if (v15 <= 0x3F)
              {
                v16[6] = *(_QWORD *)(v14 - 8) + 64;
                v16[7] = "\b";
                swift_updateClassMetadata2(a1, 256, 8, v16, a1 + 80);
              }
            }
          }
        }
      }
    }
  }
}

uint64_t sub_10017D95C()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10017D980()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;

  v1 = (int *)type metadata accessor for BeneficiaryInfoRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 17) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v0 + v4;
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v0 + v4, v7);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[5] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[6] + 8));
  sub_10000F494(*(_QWORD *)(v6 + v1[7]), *(_QWORD *)(v6 + v1[7] + 8));
  v9(v0 + v4 + v1[8], v7);
  sub_10000F494(*(_QWORD *)(v6 + v1[9]), *(_QWORD *)(v6 + v1[9] + 8));
  v10 = v0 + v4 + v1[11];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v10, 1, v7))
    v9(v10, v7);
  v11 = (v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v12 = (v11 + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[12] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[14] + 8));
  swift_release(*(_QWORD *)(v0 + v11));
  swift_release(*(_QWORD *)(v0 + v12 + 8));
  return swift_deallocObject(v0, ((v12 + 23) & 0xFFFFFFFFFFFFFFF8) + 8, v3 | 7);
}

uint64_t sub_10017DADC(void *a1, char a2)
{
  uint64_t v2;
  char v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v4 = a2 & 1;
  v5 = *(_QWORD *)(type metadata accessor for BeneficiaryInfoRecord(0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 17) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = (*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_1001784E0(a1, v4, *(unsigned __int8 *)(v2 + 16), v2 + v6, *(_QWORD *)(v2 + v7), *(void (**)(_QWORD *))(v2 + ((v7 + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v2 + ((v7 + 15) & 0xFFFFFFFFFFFFFFF8) + 8), *(_QWORD *)(v2 + ((((v7 + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_10017DB5C(uint64_t a1, uint64_t a2, void (*a3)(_QWORD), uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v26;
  void (*v27)(_QWORD);
  uint64_t v28;
  _QWORD v29[3];
  _BYTE v30[8];
  uint64_t v31;

  v9 = sub_1000080B4((uint64_t *)&unk_10028CD50);
  __chkstk_darwin(v9, v10);
  v12 = (uint64_t *)((char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (a2)
  {
    swift_errorRetain(a2);
    if (qword_10028ADB8 != -1)
      swift_once(&qword_10028ADB8, sub_100046CE4);
    v13 = type metadata accessor for Logger(0);
    sub_100005288(v13, (uint64_t)qword_1002A89A8);
    swift_errorRetain(a2);
    v14 = swift_errorRetain(a2);
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.error.getter(v15);
    if (os_log_type_enabled(v15, v16))
    {
      v17 = swift_slowAlloc(12, -1);
      v27 = a3;
      v18 = (uint8_t *)v17;
      v19 = swift_slowAlloc(32, -1);
      v31 = v19;
      *(_DWORD *)v18 = 136315138;
      v26 = a4;
      swift_getErrorValue(a2, v30, v29);
      v20 = Error.localizedDescription.getter(v29[1], v29[2]);
      v22 = v21;
      v28 = sub_1001DEF4C(v20, v21, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, v29);
      swift_bridgeObjectRelease(v22);
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Error saving record to CloudKit: %s", v18, 0xCu);
      swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v19, -1, -1);
      v23 = v18;
      a3 = v27;
      swift_slowDealloc(v23, -1, -1);
    }
    else
    {
      swift_errorRelease(a2);
      swift_errorRelease(a2);
    }

    *v12 = a2;
    swift_storeEnumTagMultiPayload(v12, v9, 1);
    swift_errorRetain(a2);
    a3(v12);
    swift_errorRelease(a2);
  }
  else
  {
    v24 = type metadata accessor for UUID(0);
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 16))(v12, a5, v24);
    swift_storeEnumTagMultiPayload(v12, v9, 0);
    a3(v12);
  }
  return sub_100004934((uint64_t)v12, (uint64_t *)&unk_10028CD50);
}

uint64_t sub_10017DE00(uint64_t a1, uint64_t a2, void (*a3)(_QWORD), uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  void (*v28)(_QWORD);
  uint64_t v29;
  _QWORD v30[3];
  _BYTE v31[8];
  uint64_t v32;

  v9 = sub_1000080B4((uint64_t *)&unk_10028CD50);
  __chkstk_darwin(v9, v10);
  v12 = (uint64_t *)((char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (a2)
  {
    swift_errorRetain(a2);
    if (qword_10028ADB8 != -1)
      swift_once(&qword_10028ADB8, sub_100046CE4);
    v13 = type metadata accessor for Logger(0);
    sub_100005288(v13, (uint64_t)qword_1002A89A8);
    swift_errorRetain(a2);
    v14 = swift_errorRetain(a2);
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.error.getter(v15);
    if (os_log_type_enabled(v15, v16))
    {
      v17 = swift_slowAlloc(12, -1);
      v28 = a3;
      v18 = (uint8_t *)v17;
      v19 = swift_slowAlloc(32, -1);
      v32 = v19;
      *(_DWORD *)v18 = 136315138;
      v27 = a4;
      swift_getErrorValue(a2, v31, v30);
      v20 = Error.localizedDescription.getter(v30[1], v30[2]);
      v22 = v21;
      v29 = sub_1001DEF4C(v20, v21, &v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, v30);
      swift_bridgeObjectRelease(v22);
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Error saving record to CloudKit: %s", v18, 0xCu);
      swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v19, -1, -1);
      v23 = v18;
      a3 = v28;
      swift_slowDealloc(v23, -1, -1);
    }
    else
    {
      swift_errorRelease(a2);
      swift_errorRelease(a2);
    }

    *v12 = a2;
    swift_storeEnumTagMultiPayload(v12, v9, 1);
    swift_errorRetain(a2);
    a3(v12);
    swift_errorRelease(a2);
  }
  else
  {
    v24 = a5 + *(int *)(type metadata accessor for InheritanceInvitationRecord(0) + 36);
    v25 = type metadata accessor for UUID(0);
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 16))(v12, v24, v25);
    swift_storeEnumTagMultiPayload(v12, v9, 0);
    a3(v12);
  }
  return sub_100004934((uint64_t)v12, (uint64_t *)&unk_10028CD50);
}

uint64_t sub_10017E0B4(uint64_t a1, uint64_t a2, void (*a3)(_QWORD), uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  void (*v28)(_QWORD);
  uint64_t v29;
  _QWORD v30[3];
  _BYTE v31[8];
  uint64_t v32;

  v9 = sub_1000080B4((uint64_t *)&unk_10028CD50);
  __chkstk_darwin(v9, v10);
  v12 = (uint64_t *)((char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (a2)
  {
    swift_errorRetain(a2);
    if (qword_10028ADB8 != -1)
      swift_once(&qword_10028ADB8, sub_100046CE4);
    v13 = type metadata accessor for Logger(0);
    sub_100005288(v13, (uint64_t)qword_1002A89A8);
    swift_errorRetain(a2);
    v14 = swift_errorRetain(a2);
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.error.getter(v15);
    if (os_log_type_enabled(v15, v16))
    {
      v17 = swift_slowAlloc(12, -1);
      v28 = a3;
      v18 = (uint8_t *)v17;
      v19 = swift_slowAlloc(32, -1);
      v32 = v19;
      *(_DWORD *)v18 = 136315138;
      v27 = a4;
      swift_getErrorValue(a2, v31, v30);
      v20 = Error.localizedDescription.getter(v30[1], v30[2]);
      v22 = v21;
      v29 = sub_1001DEF4C(v20, v21, &v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, v30);
      swift_bridgeObjectRelease(v22);
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Error saving record to CloudKit: %s", v18, 0xCu);
      swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v19, -1, -1);
      v23 = v18;
      a3 = v28;
      swift_slowDealloc(v23, -1, -1);
    }
    else
    {
      swift_errorRelease(a2);
      swift_errorRelease(a2);
    }

    *v12 = a2;
    swift_storeEnumTagMultiPayload(v12, v9, 1);
    swift_errorRetain(a2);
    a3(v12);
    swift_errorRelease(a2);
  }
  else
  {
    v24 = a5 + *(int *)(type metadata accessor for BeneficiaryInfoRecord(0) + 32);
    v25 = type metadata accessor for UUID(0);
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 16))(v12, v24, v25);
    swift_storeEnumTagMultiPayload(v12, v9, 0);
    a3(v12);
  }
  return sub_100004934((uint64_t)v12, (uint64_t *)&unk_10028CD50);
}

uint64_t sub_10017E368(uint64_t a1, uint64_t a2, void (*a3)(_QWORD), uint64_t a4, uint64_t a5, uint64_t (*a6)(_QWORD))
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  void (*v30)(_QWORD);
  uint64_t v31;
  _QWORD v32[3];
  _BYTE v33[8];
  uint64_t v34;

  v11 = sub_1000080B4((uint64_t *)&unk_10028CD50);
  __chkstk_darwin(v11, v12);
  v14 = (uint64_t *)((char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (a2)
  {
    swift_errorRetain(a2);
    if (qword_10028ADB8 != -1)
      swift_once(&qword_10028ADB8, sub_100046CE4);
    v15 = type metadata accessor for Logger(0);
    sub_100005288(v15, (uint64_t)qword_1002A89A8);
    swift_errorRetain(a2);
    v16 = swift_errorRetain(a2);
    v17 = Logger.logObject.getter(v16);
    v18 = static os_log_type_t.error.getter(v17);
    if (os_log_type_enabled(v17, v18))
    {
      v19 = swift_slowAlloc(12, -1);
      v30 = a3;
      v20 = (uint8_t *)v19;
      v21 = swift_slowAlloc(32, -1);
      v34 = v21;
      *(_DWORD *)v20 = 136315138;
      v29 = a4;
      swift_getErrorValue(a2, v33, v32);
      v22 = Error.localizedDescription.getter(v32[1], v32[2]);
      v24 = v23;
      v31 = sub_1001DEF4C(v22, v23, &v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, v32);
      swift_bridgeObjectRelease(v24);
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Error saving record to CloudKit: %s", v20, 0xCu);
      swift_arrayDestroy(v21, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v21, -1, -1);
      v25 = v20;
      a3 = v30;
      swift_slowDealloc(v25, -1, -1);
    }
    else
    {
      swift_errorRelease(a2);
      swift_errorRelease(a2);
    }

    *v14 = a2;
    swift_storeEnumTagMultiPayload(v14, v11, 1);
    swift_errorRetain(a2);
    a3(v14);
    swift_errorRelease(a2);
  }
  else
  {
    v26 = a5 + *(int *)(a6(0) + 28);
    v27 = type metadata accessor for UUID(0);
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 16))(v14, v26, v27);
    swift_storeEnumTagMultiPayload(v14, v11, 0);
    a3(v14);
  }
  return sub_100004934((uint64_t)v14, (uint64_t *)&unk_10028CD50);
}

uint64_t sub_10017E620()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;

  v1 = (int *)type metadata accessor for BeneficiaryInfoRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release(*(_QWORD *)(v0 + 24));
  v6 = v0 + v4;
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v0 + v4, v7);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[5] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[6] + 8));
  sub_10000F494(*(_QWORD *)(v6 + v1[7]), *(_QWORD *)(v6 + v1[7] + 8));
  v9(v0 + v4 + v1[8], v7);
  sub_10000F494(*(_QWORD *)(v6 + v1[9]), *(_QWORD *)(v6 + v1[9] + 8));
  v10 = v0 + v4 + v1[11];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v10, 1, v7))
    v9(v10, v7);
  v11 = (v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v12 = (v11 + 15) & 0xFFFFFFFFFFFFFFF8;
  v13 = (v12 + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[12] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[14] + 8));

  swift_release(*(_QWORD *)(v0 + v13));
  return swift_deallocObject(v0, ((v13 + 15) & 0xFFFFFFFFFFFFFFF8) + 8, v3 | 7);
}

void sub_10017E790(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v5 = *(_QWORD *)(type metadata accessor for BeneficiaryInfoRecord(0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = (*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_10017AC58(a1, a2, *(void (**)(_QWORD, _QWORD))(v2 + 16), *(_QWORD *)(v2 + 24), v2 + v6, *(void **)(v2 + v7), *(void **)(v2 + ((v7 + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v2 + ((((v7 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v2 + ((((((v7 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_10017E828()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));

  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10017E854(uint64_t a1)
{
  uint64_t v1;

  return sub_10017B550(a1, *(void (**)(uint64_t, uint64_t))(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

void sub_10017E860(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  Swift::String v18;
  void *v19;
  Swift::String v20;
  Class isa;
  uint64_t v22;
  void *v23;
  void *v24;
  objc_class *v25;
  Swift::String v26;
  Class v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  objc_class *v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD aBlock[5];
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v4 = type metadata accessor for CustodianRecoveryInfoRecord(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(v4, v7);
  v8 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10028AF00 != -1)
    swift_once(&qword_10028AF00, sub_1001FD458);
  if (*(_BYTE *)(a1 + *(int *)(v4 + 40)) == 1)
  {
    if (qword_10028AF10 != -1)
      swift_once(&qword_10028AF10, sub_1001FDD8C);
    v9 = &qword_1002A8C80;
  }
  else
  {
    if (qword_10028AF08 != -1)
      swift_once(&qword_10028AF08, sub_1001FDD54);
    v9 = &qword_1002A8C70;
  }
  v10 = *v9;
  v11 = v9[1];
  swift_bridgeObjectRetain(v11);
  v12 = sub_1001FD4C0(v10, v11);
  v13 = objc_msgSend(v12, "privateCloudDatabase");
  swift_bridgeObjectRelease(v11);

  v14 = sub_1000067D4(0, (unint64_t *)&qword_1002953A0, CKRecordZoneID_ptr);
  v15 = UUID.uuidString.getter(v14);
  v17 = v16;
  v18._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)(CKCurrentUserDefaultName);
  v18._object = v19;
  v20._countAndFlagsBits = v15;
  v20._object = v17;
  isa = CKRecordZoneID.init(zoneName:ownerName:)(v20, v18).super.isa;
  sub_1000067D4(0, (unint64_t *)&qword_10028D580, CKRecordID_ptr);
  v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(CKRecordNameZoneWideShare);
  v24 = v23;
  v25 = isa;
  v26._countAndFlagsBits = v22;
  v26._object = v24;
  v27 = CKRecordID.init(recordName:zoneID:)(v26, (CKRecordZoneID)v25).super.isa;
  sub_100027FE8(a1, (uint64_t)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for CustodianRecoveryInfoRecord);
  v28 = *(unsigned __int8 *)(v5 + 80);
  v29 = (v28 + 24) & ~v28;
  v30 = (v6 + v29 + 7) & 0xFFFFFFFFFFFFFFF8;
  v31 = (v30 + 23) & 0xFFFFFFFFFFFFFFF8;
  v32 = swift_allocObject(&unk_10026C070, v31 + 8, v28 | 7);
  *(_QWORD *)(v32 + 16) = v27;
  sub_10003B730((uint64_t)v8, v32 + v29, type metadata accessor for CustodianRecoveryInfoRecord);
  v33 = (_QWORD *)(v32 + v30);
  v34 = v40;
  *v33 = v39;
  v33[1] = v34;
  *(_QWORD *)(v32 + v31) = v13;
  aBlock[4] = sub_100181F90;
  v42 = v32;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000ABBFC;
  aBlock[3] = &unk_10026C088;
  v35 = _Block_copy(aBlock);
  v36 = v42;
  v37 = v27;
  swift_retain(v34);
  v38 = v13;
  swift_release(v36);
  objc_msgSend(v38, "fetchRecordWithID:completionHandler:", v37, v35);
  _Block_release(v35);

}

void sub_10017EB7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  id v13;
  id v14;
  Class v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  _QWORD aBlock[5];
  uint64_t v23;

  v6 = type metadata accessor for CustodianRecord(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  __chkstk_darwin(v6, v9);
  if (qword_10028AF00 != -1)
    swift_once(&qword_10028AF00, sub_1001FD458);
  if (*(_BYTE *)(a1 + *(int *)(v6 + 48)) == 1)
  {
    if (qword_10028AF10 != -1)
      swift_once(&qword_10028AF10, sub_1001FDD8C);
    v10 = &qword_1002A8C80;
  }
  else
  {
    if (qword_10028AF08 != -1)
      swift_once(&qword_10028AF08, sub_1001FDD54);
    v10 = &qword_1002A8C70;
  }
  v11 = *v10;
  v12 = v10[1];
  swift_bridgeObjectRetain(v12);
  v13 = sub_1001FD4C0(v11, v12);
  v14 = objc_msgSend(v13, "privateCloudDatabase");
  swift_bridgeObjectRelease(v12);

  v15 = sub_100049AB8();
  v16 = -[objc_class recordID](v15, "recordID");

  sub_100027FE8(a1, (uint64_t)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for CustodianRecord);
  v17 = *(unsigned __int8 *)(v7 + 80);
  v18 = (v17 + 32) & ~v17;
  v19 = swift_allocObject(&unk_10026BF30, v18 + v8, v17 | 7);
  *(_QWORD *)(v19 + 16) = a2;
  *(_QWORD *)(v19 + 24) = a3;
  sub_10003B730((uint64_t)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v19 + v18, type metadata accessor for CustodianRecord);
  aBlock[4] = sub_100181A68;
  v23 = v19;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000ABBFC;
  aBlock[3] = &unk_10026BF48;
  v20 = _Block_copy(aBlock);
  v21 = v23;
  swift_retain(a3);
  swift_release(v21);
  objc_msgSend(v14, "deleteRecordWithID:completionHandler:", v16, v20);
  _Block_release(v20);

}

void sub_10017EDDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  id v13;
  id v14;
  Class v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  _QWORD aBlock[5];
  uint64_t v23;

  v6 = type metadata accessor for CustodianHealthRecord(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  __chkstk_darwin(v6, v9);
  if (qword_10028AF00 != -1)
    swift_once(&qword_10028AF00, sub_1001FD458);
  if (*(_BYTE *)(a1 + *(int *)(v6 + 36)) == 1)
  {
    if (qword_10028AF10 != -1)
      swift_once(&qword_10028AF10, sub_1001FDD8C);
    v10 = &qword_1002A8C80;
  }
  else
  {
    if (qword_10028AF08 != -1)
      swift_once(&qword_10028AF08, sub_1001FDD54);
    v10 = &qword_1002A8C70;
  }
  v11 = *v10;
  v12 = v10[1];
  swift_bridgeObjectRetain(v12);
  v13 = sub_1001FD4C0(v11, v12);
  v14 = objc_msgSend(v13, "privateCloudDatabase");
  swift_bridgeObjectRelease(v12);

  v15 = sub_100049C00();
  v16 = -[objc_class recordID](v15, "recordID");

  sub_100027FE8(a1, (uint64_t)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for CustodianHealthRecord);
  v17 = *(unsigned __int8 *)(v7 + 80);
  v18 = (v17 + 32) & ~v17;
  v19 = swift_allocObject(&unk_10026BEE0, v18 + v8, v17 | 7);
  *(_QWORD *)(v19 + 16) = a2;
  *(_QWORD *)(v19 + 24) = a3;
  sub_10003B730((uint64_t)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v19 + v18, type metadata accessor for CustodianHealthRecord);
  aBlock[4] = sub_100181910;
  v23 = v19;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000ABBFC;
  aBlock[3] = &unk_10026BEF8;
  v20 = _Block_copy(aBlock);
  v21 = v23;
  swift_retain(a3);
  swift_release(v21);
  objc_msgSend(v14, "deleteRecordWithID:completionHandler:", v16, v20);
  _Block_release(v20);

}

void sub_10017F03C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  id v13;
  id v14;
  Class v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  _QWORD aBlock[5];
  uint64_t v23;

  v6 = type metadata accessor for CustodianRecoveryInfoRecord(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  __chkstk_darwin(v6, v9);
  if (qword_10028AF00 != -1)
    swift_once(&qword_10028AF00, sub_1001FD458);
  if (*(_BYTE *)(a1 + *(int *)(v6 + 40)) == 1)
  {
    if (qword_10028AF10 != -1)
      swift_once(&qword_10028AF10, sub_1001FDD8C);
    v10 = &qword_1002A8C80;
  }
  else
  {
    if (qword_10028AF08 != -1)
      swift_once(&qword_10028AF08, sub_1001FDD54);
    v10 = &qword_1002A8C70;
  }
  v11 = *v10;
  v12 = v10[1];
  swift_bridgeObjectRetain(v12);
  v13 = sub_1001FD4C0(v11, v12);
  v14 = objc_msgSend(v13, "privateCloudDatabase");
  swift_bridgeObjectRelease(v12);

  v15 = sub_100049EA4();
  v16 = -[objc_class recordID](v15, "recordID");

  sub_100027FE8(a1, (uint64_t)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for CustodianRecoveryInfoRecord);
  v17 = *(unsigned __int8 *)(v7 + 80);
  v18 = (v17 + 32) & ~v17;
  v19 = swift_allocObject(&unk_10026BE90, v18 + v8, v17 | 7);
  *(_QWORD *)(v19 + 16) = a2;
  *(_QWORD *)(v19 + 24) = a3;
  sub_10003B730((uint64_t)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v19 + v18, type metadata accessor for CustodianRecoveryInfoRecord);
  aBlock[4] = sub_100181810;
  v23 = v19;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000ABBFC;
  aBlock[3] = &unk_10026BEA8;
  v20 = _Block_copy(aBlock);
  v21 = v23;
  swift_retain(a3);
  swift_release(v21);
  objc_msgSend(v14, "deleteRecordWithID:completionHandler:", v16, v20);
  _Block_release(v20);

}

id sub_10017F29C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  id v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  NSString v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v24;
  uint64_t v25[5];

  v2 = sub_1000080B4(&qword_10028FA50);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (char *)&v25[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, a1 + OBJC_IVAR____TtC13appleaccountd33BeneficiaryAccessKeyRepairHandler__accountStore, v2);
  Dependency.wrappedValue.getter(v25, v2);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  v7 = objc_msgSend(*(id *)(*sub_10000732C(v25, v25[3]) + 16), "aa_primaryAppleAccount");
  if (v7 && (v8 = v7, v9 = objc_msgSend(v7, "aa_altDSID"), v8, v9))
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
    v11 = v10;

    sub_100006F58(v25);
    v12 = objc_allocWithZone((Class)AKInheritanceContext);
    v13 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v11);
    v14 = objc_msgSend(v12, "initWithOwnerAltDSID:", v13);

  }
  else
  {
    sub_100006F58(v25);
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v15 = type metadata accessor for Logger(0);
    v16 = sub_100005288(v15, (uint64_t)qword_1002A8A08);
    v17 = Logger.logObject.getter(v16);
    v18 = static os_log_type_t.error.getter(v17);
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc(12, -1);
      v20 = swift_slowAlloc(32, -1);
      v25[0] = v20;
      *(_DWORD *)v19 = 136315138;
      if (qword_10028AED8 != -1)
        swift_once(&qword_10028AED8, sub_1001782C0);
      v21 = qword_100295200;
      v22 = *(_QWORD *)algn_100295208;
      swift_bridgeObjectRetain(*(_QWORD *)algn_100295208);
      v24 = sub_1001DEF4C(v21, v22, v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, v25);
      swift_bridgeObjectRelease(v22);
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "%s - error creating inheritance context. No altDSID for owner found.", v19, 0xCu);
      swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v20, -1, -1);
      swift_slowDealloc(v19, -1, -1);
    }

    return 0;
  }
  return v14;
}

void sub_10017F574(id a1)
{
  if (a1 != (id)1)

}

id sub_10017F584(id result)
{
  if (result != (id)1)
    return result;
  return result;
}

uint64_t sub_10017F594()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  unsigned int (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v1 = (int *)type metadata accessor for BeneficiaryInfoRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v17 = *(_QWORD *)(v2 + 64);
  v5 = (v17 + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = (v5 + 23) & 0xFFFFFFFFFFFFFFF8;
  v16 = (v3 + v6 + 8) & ~v3;
  v7 = v0 + v4;
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v10(v7, v8);
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[5] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[6] + 8));
  sub_10000F494(*(_QWORD *)(v7 + v1[7]), *(_QWORD *)(v7 + v1[7] + 8));
  v10(v7 + v1[8], v8);
  sub_10000F494(*(_QWORD *)(v7 + v1[9]), *(_QWORD *)(v7 + v1[9] + 8));
  v11 = v7 + v1[11];
  v12 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (!v12(v11, 1, v8))
    v10(v11, v8);
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[12] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[14] + 8));
  swift_release(*(_QWORD *)(v0 + v5 + 8));
  swift_release(*(_QWORD *)(v0 + v6));
  v13 = v0 + v16;
  v10(v0 + v16, v8);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v16 + v1[5] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v16 + v1[6] + 8));
  sub_10000F494(*(_QWORD *)(v13 + v1[7]), *(_QWORD *)(v13 + v1[7] + 8));
  v10(v0 + v16 + v1[8], v8);
  sub_10000F494(*(_QWORD *)(v13 + v1[9]), *(_QWORD *)(v13 + v1[9] + 8));
  v14 = v0 + v16 + v1[11];
  if (!v12(v14, 1, v8))
    v10(v14, v8);
  swift_bridgeObjectRelease(*(_QWORD *)(v13 + v1[12] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v13 + v1[14] + 8));
  return swift_deallocObject(v0, ((v16 + v17) & 0xFFFFFFFFFFFFFFF8) + 16, v3 | 7);
}

uint64_t sub_10017F7C0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v3 = *(_QWORD *)(type metadata accessor for BeneficiaryInfoRecord(0) - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = (v4 + 16) & ~v4;
  v6 = *(_QWORD *)(v3 + 64);
  v7 = (v6 + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v7 + 23) & 0xFFFFFFFFFFFFFFF8;
  return sub_100178E0C(a1, v1 + v5, *(void (**)(uint64_t *))(v1 + v7), *(_QWORD *)(v1 + v7 + 8), *(_QWORD *)(v1 + v8), v1 + ((v4 + v8 + 8) & ~v4), *(unsigned __int8 *)(v1 + ((v4 + v8 + 8) & ~v4) + v6), *(_QWORD *)(((((v4 + v8 + 8) & ~v4) + v6) & 0xFFFFFFFFFFFFF8) + v1 + 8));
}

uint64_t sub_10017F844()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  unsigned int (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v17;

  v1 = (int *)type metadata accessor for BeneficiaryInfoRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 33) & ~v3;
  v17 = *(_QWORD *)(v2 + 64) + 7;
  v5 = (v17 + v4) & 0xFFFFFFFFFFFFFFF8;
  v6 = (v3 + v5 + 8) & ~v3;
  swift_release(*(_QWORD *)(v0 + 24));
  v7 = v0 + v4;
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v10(v7, v8);
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[5] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[6] + 8));
  sub_10000F494(*(_QWORD *)(v7 + v1[7]), *(_QWORD *)(v7 + v1[7] + 8));
  v10(v7 + v1[8], v8);
  sub_10000F494(*(_QWORD *)(v7 + v1[9]), *(_QWORD *)(v7 + v1[9] + 8));
  v11 = v7 + v1[11];
  v12 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (!v12(v11, 1, v8))
    v10(v11, v8);
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[12] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[14] + 8));
  swift_release(*(_QWORD *)(v0 + v5));
  v13 = v0 + v6;
  v10(v0 + v6, v8);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v6 + v1[5] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v6 + v1[6] + 8));
  sub_10000F494(*(_QWORD *)(v13 + v1[7]), *(_QWORD *)(v13 + v1[7] + 8));
  v10(v0 + v6 + v1[8], v8);
  sub_10000F494(*(_QWORD *)(v13 + v1[9]), *(_QWORD *)(v13 + v1[9] + 8));
  v14 = v0 + v6 + v1[11];
  if (!v12(v14, 1, v8))
    v10(v14, v8);
  v15 = (v17 + v6) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease(*(_QWORD *)(v13 + v1[12] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v13 + v1[14] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v15 + 8));
  return swift_deallocObject(v0, ((v15 + 23) & 0xFFFFFFFFFFFFFFF8) + 8, v3 | 7);
}

void sub_10017FA6C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v3 = *(_QWORD *)(type metadata accessor for BeneficiaryInfoRecord(0) - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = (v4 + 33) & ~v4;
  v6 = *(_QWORD *)(v3 + 64) + 7;
  v7 = (v6 + v5) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v4 + v7 + 8) & ~v4;
  sub_100179418(a1, *(void (**)(_QWORD *))(v1 + 16), *(_QWORD *)(v1 + 24), *(unsigned __int8 *)(v1 + 32), v1 + v5, *(_QWORD *)(v1 + v7), v1 + v8, *(_QWORD *)(v1 + ((v6 + v8) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v1 + ((v6 + v8) & 0xFFFFFFFFFFFFFFF8) + 8), *(_QWORD *)(v1 + ((((v6 + v8) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_10017FB00()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;

  v1 = (int *)type metadata accessor for BeneficiaryInfoRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v0 + v4;
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v0 + v4, v7);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[5] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[6] + 8));
  sub_10000F494(*(_QWORD *)(v6 + v1[7]), *(_QWORD *)(v6 + v1[7] + 8));
  v9(v0 + v4 + v1[8], v7);
  sub_10000F494(*(_QWORD *)(v6 + v1[9]), *(_QWORD *)(v6 + v1[9] + 8));
  v10 = v0 + v4 + v1[11];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v10, 1, v7))
    v9(v10, v7);
  v11 = v4 + v5;
  v12 = (v4 + v5 + 31) & 0xFFFFFFFFFFFFFFF8;
  v13 = (v11 + 7) & 0xFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[12] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[14] + 8));
  swift_release(*(_QWORD *)(v0 + v13 + 8));
  swift_release(*(_QWORD *)(v0 + v12));
  return swift_deallocObject(v0, ((v12 + 15) & 0xFFFFFFFFFFFFFFF8) + 8, v3 | 7);
}

void sub_10017FC5C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;

  v3 = *(_QWORD *)(type metadata accessor for BeneficiaryInfoRecord(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  sub_10017B940(a1, v1 + v4, *(void (**)(uint64_t))(v1 + ((v4 + *(_QWORD *)(v3 + 64) + 7) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v1 + ((v4 + *(_QWORD *)(v3 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8), *(_BYTE *)(v1 + ((v4 + *(_QWORD *)(v3 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 16), *(_QWORD *)(v1 + ((v4 + *(_QWORD *)(v3 + 64) + 31) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t sub_10017FCCC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10017FCF0(uint64_t a1)
{
  uint64_t v1;

  return sub_10017C454(a1, *(void (**)(uint64_t))(v1 + 16));
}

uint64_t sub_10017FCF8()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  unint64_t v11;

  v1 = (int *)type metadata accessor for BeneficiaryInfoRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));
  v6 = v0 + v4;
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v0 + v4, v7);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[5] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[6] + 8));
  sub_10000F494(*(_QWORD *)(v6 + v1[7]), *(_QWORD *)(v6 + v1[7] + 8));
  v9(v0 + v4 + v1[8], v7);
  sub_10000F494(*(_QWORD *)(v6 + v1[9]), *(_QWORD *)(v6 + v1[9] + 8));
  v10 = v0 + v4 + v1[11];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v10, 1, v7))
    v9(v10, v7);
  v11 = (v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[12] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[14] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v11 + 8));
  return swift_deallocObject(v0, ((v11 + 23) & 0xFFFFFFFFFFFFFFF8) + 8, v3 | 7);
}

uint64_t sub_10017FE54(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t *v5;

  v3 = *(_QWORD *)(type metadata accessor for BeneficiaryInfoRecord(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (uint64_t *)(v1 + ((*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8));
  return sub_100179804(a1, *(void (**)(_QWORD *))(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), v1 + v4, *v5, v5[1]);
}

uint64_t sub_10017FEBC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10017FEE0(uint64_t a1)
{
  uint64_t v1;

  return sub_10017D1C8(a1, *(void (**)(_QWORD))(v1 + 16));
}

void sub_10017FEEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  id v13;
  id v14;
  Class v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  _QWORD aBlock[5];
  uint64_t v23;

  v6 = type metadata accessor for InheritanceInvitationRecord(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  __chkstk_darwin(v6, v9);
  if (qword_10028AF00 != -1)
    swift_once(&qword_10028AF00, sub_1001FD458);
  if (*(_BYTE *)(a1 + *(int *)(v6 + 44)) == 1)
  {
    if (qword_10028AF20 != -1)
      swift_once(&qword_10028AF20, sub_1001FDDFC);
    v10 = &qword_1002A8CA0;
  }
  else
  {
    if (qword_10028AF18 != -1)
      swift_once(&qword_10028AF18, sub_1001FDDC4);
    v10 = &qword_1002A8C90;
  }
  v11 = *v10;
  v12 = v10[1];
  swift_bridgeObjectRetain(v12);
  v13 = sub_1001FD4C0(v11, v12);
  v14 = objc_msgSend(v13, "privateCloudDatabase");
  swift_bridgeObjectRelease(v12);

  v15 = sub_100049FC8();
  v16 = -[objc_class recordID](v15, "recordID");

  sub_100027FE8(a1, (uint64_t)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for InheritanceInvitationRecord);
  v17 = *(unsigned __int8 *)(v7 + 80);
  v18 = (v17 + 32) & ~v17;
  v19 = swift_allocObject(&unk_10026C020, v18 + v8, v17 | 7);
  *(_QWORD *)(v19 + 16) = a2;
  *(_QWORD *)(v19 + 24) = a3;
  sub_10003B730((uint64_t)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v19 + v18, type metadata accessor for InheritanceInvitationRecord);
  aBlock[4] = sub_100181DC0;
  v23 = v19;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000ABBFC;
  aBlock[3] = &unk_10026C038;
  v20 = _Block_copy(aBlock);
  v21 = v23;
  swift_retain(a3);
  swift_release(v21);
  objc_msgSend(v14, "deleteRecordWithID:completionHandler:", v16, v20);
  _Block_release(v20);

}

void sub_10018014C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  id v13;
  id v14;
  Class v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  _QWORD aBlock[5];
  uint64_t v23;

  v6 = type metadata accessor for BeneficiaryInfoRecord(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  __chkstk_darwin(v6, v9);
  if (qword_10028AF00 != -1)
    swift_once(&qword_10028AF00, sub_1001FD458);
  if (*(_BYTE *)(a1 + *(int *)(v6 + 40)) == 1)
  {
    if (qword_10028AF20 != -1)
      swift_once(&qword_10028AF20, sub_1001FDDFC);
    v10 = &qword_1002A8CA0;
  }
  else
  {
    if (qword_10028AF18 != -1)
      swift_once(&qword_10028AF18, sub_1001FDDC4);
    v10 = &qword_1002A8C90;
  }
  v11 = *v10;
  v12 = v10[1];
  swift_bridgeObjectRetain(v12);
  v13 = sub_1001FD4C0(v11, v12);
  v14 = objc_msgSend(v13, "privateCloudDatabase");
  swift_bridgeObjectRelease(v12);

  v15 = sub_1000498A0();
  v16 = -[objc_class recordID](v15, "recordID");

  sub_100027FE8(a1, (uint64_t)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for BeneficiaryInfoRecord);
  v17 = *(unsigned __int8 *)(v7 + 80);
  v18 = (v17 + 32) & ~v17;
  v19 = swift_allocObject(&unk_10026BCD8, v18 + v8, v17 | 7);
  *(_QWORD *)(v19 + 16) = a2;
  *(_QWORD *)(v19 + 24) = a3;
  sub_10003B730((uint64_t)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v19 + v18, type metadata accessor for BeneficiaryInfoRecord);
  aBlock[4] = sub_1001803B0;
  v23 = v19;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000ABBFC;
  aBlock[3] = &unk_10026BCF0;
  v20 = _Block_copy(aBlock);
  v21 = v23;
  swift_retain(a3);
  swift_release(v21);
  objc_msgSend(v14, "deleteRecordWithID:completionHandler:", v16, v20);
  _Block_release(v20);

}

uint64_t sub_1001803B0(uint64_t a1, uint64_t a2)
{
  return sub_100181DD4(a1, a2, type metadata accessor for BeneficiaryInfoRecord, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t))sub_10017E0B4);
}

uint64_t sub_1001803C8()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;

  v1 = (int *)type metadata accessor for BeneficiaryInfoRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release(*(_QWORD *)(v0 + 24));
  v6 = v0 + v4;
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v0 + v4, v7);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[5] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[6] + 8));
  sub_10000F494(*(_QWORD *)(v6 + v1[7]), *(_QWORD *)(v6 + v1[7] + 8));
  v9(v0 + v4 + v1[8], v7);
  sub_10000F494(*(_QWORD *)(v6 + v1[9]), *(_QWORD *)(v6 + v1[9] + 8));
  v10 = v0 + v4 + v1[11];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v10, 1, v7))
    v9(v10, v7);
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[12] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[14] + 8));
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_1001804FC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for BeneficiaryInfoRecord(0) - 8) + 80);
  return sub_100179B40(a1, *(void (**)(_QWORD *))(v1 + 16), *(_QWORD *)(v1 + 24), v1 + ((v3 + 32) & ~v3));
}

uint64_t sub_10018053C()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;

  v1 = (int *)type metadata accessor for BeneficiaryInfoRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release(*(_QWORD *)(v0 + 16));
  v6 = v0 + v4;
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v0 + v4, v7);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[5] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[6] + 8));
  sub_10000F494(*(_QWORD *)(v6 + v1[7]), *(_QWORD *)(v6 + v1[7] + 8));
  v9(v0 + v4 + v1[8], v7);
  sub_10000F494(*(_QWORD *)(v6 + v1[9]), *(_QWORD *)(v6 + v1[9] + 8));
  v10 = v0 + v4 + v1[11];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v10, 1, v7))
    v9(v10, v7);
  v11 = (v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v12 = (v11 + 23) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[12] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[14] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v11 + 8));
  swift_release(*(_QWORD *)(v0 + v12 + 8));
  return swift_deallocObject(v0, ((v12 + 23) & 0xFFFFFFFFFFFFFFF8) + 8, v3 | 7);
}

uint64_t sub_1001806A4(int a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v3 = *(_QWORD *)(type metadata accessor for BeneficiaryInfoRecord(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_10017C530(a1, *(_QWORD *)(v1 + 16), v1 + v4, *(void ***)(v1 + v5), *(_QWORD *)(v1 + v5 + 8), *(_QWORD *)(v1 + ((v5 + 23) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v1 + ((v5 + 23) & 0xFFFFFFFFFFFFFFF8) + 8), *(_QWORD *)(v1 + ((((v5 + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFF8)));
}

void sub_100180718(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  id v13;
  id v14;
  Class v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  _QWORD aBlock[5];
  uint64_t v23;

  v6 = type metadata accessor for BenefactorInfoRecord(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  __chkstk_darwin(v6, v9);
  if (qword_10028AF00 != -1)
    swift_once(&qword_10028AF00, sub_1001FD458);
  if (*(_BYTE *)(a1 + *(int *)(v6 + 36)) == 1)
  {
    if (qword_10028AF20 != -1)
      swift_once(&qword_10028AF20, sub_1001FDDFC);
    v10 = &qword_1002A8CA0;
  }
  else
  {
    if (qword_10028AF18 != -1)
      swift_once(&qword_10028AF18, sub_1001FDDC4);
    v10 = &qword_1002A8C90;
  }
  v11 = *v10;
  v12 = v10[1];
  swift_bridgeObjectRetain(v12);
  v13 = sub_1001FD4C0(v11, v12);
  v14 = objc_msgSend(v13, "privateCloudDatabase");
  swift_bridgeObjectRelease(v12);

  v15 = sub_100049BD4();
  v16 = -[objc_class recordID](v15, "recordID");

  sub_100027FE8(a1, (uint64_t)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for BenefactorInfoRecord);
  v17 = *(unsigned __int8 *)(v7 + 80);
  v18 = (v17 + 32) & ~v17;
  v19 = swift_allocObject(&unk_10026BFD0, v18 + v8, v17 | 7);
  *(_QWORD *)(v19 + 16) = a2;
  *(_QWORD *)(v19 + 24) = a3;
  sub_10003B730((uint64_t)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v19 + v18, type metadata accessor for BenefactorInfoRecord);
  aBlock[4] = sub_100181C78;
  v23 = v19;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000ABBFC;
  aBlock[3] = &unk_10026BFE8;
  v20 = _Block_copy(aBlock);
  v21 = v23;
  swift_retain(a3);
  swift_release(v21);
  objc_msgSend(v14, "deleteRecordWithID:completionHandler:", v16, v20);
  _Block_release(v20);

}

void sub_100180978(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  id v13;
  id v14;
  Class v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  _QWORD aBlock[5];
  uint64_t v23;

  v6 = type metadata accessor for InheritanceHealthRecord(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  __chkstk_darwin(v6, v9);
  if (qword_10028AF00 != -1)
    swift_once(&qword_10028AF00, sub_1001FD458);
  if (*(_BYTE *)(a1 + *(int *)(v6 + 36)) == 1)
  {
    if (qword_10028AF20 != -1)
      swift_once(&qword_10028AF20, sub_1001FDDFC);
    v10 = &qword_1002A8CA0;
  }
  else
  {
    if (qword_10028AF18 != -1)
      swift_once(&qword_10028AF18, sub_1001FDDC4);
    v10 = &qword_1002A8C90;
  }
  v11 = *v10;
  v12 = v10[1];
  swift_bridgeObjectRetain(v12);
  v13 = sub_1001FD4C0(v11, v12);
  v14 = objc_msgSend(v13, "privateCloudDatabase");
  swift_bridgeObjectRelease(v12);

  v15 = sub_100049D68();
  v16 = -[objc_class recordID](v15, "recordID");

  sub_100027FE8(a1, (uint64_t)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for InheritanceHealthRecord);
  v17 = *(unsigned __int8 *)(v7 + 80);
  v18 = (v17 + 32) & ~v17;
  v19 = swift_allocObject(&unk_10026BF80, v18 + v8, v17 | 7);
  *(_QWORD *)(v19 + 16) = a2;
  *(_QWORD *)(v19 + 24) = a3;
  sub_10003B730((uint64_t)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v19 + v18, type metadata accessor for InheritanceHealthRecord);
  aBlock[4] = sub_100181BAC;
  v23 = v19;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000ABBFC;
  aBlock[3] = &unk_10026BF98;
  v20 = _Block_copy(aBlock);
  v21 = v23;
  swift_retain(a3);
  swift_release(v21);
  objc_msgSend(v14, "deleteRecordWithID:completionHandler:", v16, v20);
  _Block_release(v20);

}

void sub_100180BD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  Swift::String v18;
  void *v19;
  Swift::String v20;
  Class isa;
  uint64_t v22;
  void *v23;
  void *v24;
  objc_class *v25;
  Swift::String v26;
  Class v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  objc_class *v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD aBlock[5];
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v4 = type metadata accessor for BeneficiaryInfoRecord(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(v4, v7);
  v8 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10028AF00 != -1)
    swift_once(&qword_10028AF00, sub_1001FD458);
  if (*(_BYTE *)(a1 + *(int *)(v4 + 40)) == 1)
  {
    if (qword_10028AF20 != -1)
      swift_once(&qword_10028AF20, sub_1001FDDFC);
    v9 = &qword_1002A8CA0;
  }
  else
  {
    if (qword_10028AF18 != -1)
      swift_once(&qword_10028AF18, sub_1001FDDC4);
    v9 = &qword_1002A8C90;
  }
  v10 = *v9;
  v11 = v9[1];
  swift_bridgeObjectRetain(v11);
  v12 = sub_1001FD4C0(v10, v11);
  v13 = objc_msgSend(v12, "privateCloudDatabase");
  swift_bridgeObjectRelease(v11);

  v14 = sub_1000067D4(0, (unint64_t *)&qword_1002953A0, CKRecordZoneID_ptr);
  v15 = UUID.uuidString.getter(v14);
  v17 = v16;
  v18._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)(CKCurrentUserDefaultName);
  v18._object = v19;
  v20._countAndFlagsBits = v15;
  v20._object = v17;
  isa = CKRecordZoneID.init(zoneName:ownerName:)(v20, v18).super.isa;
  sub_1000067D4(0, (unint64_t *)&qword_10028D580, CKRecordID_ptr);
  v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(CKRecordNameZoneWideShare);
  v24 = v23;
  v25 = isa;
  v26._countAndFlagsBits = v22;
  v26._object = v24;
  v27 = CKRecordID.init(recordName:zoneID:)(v26, (CKRecordZoneID)v25).super.isa;
  sub_100027FE8(a1, (uint64_t)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for BeneficiaryInfoRecord);
  v28 = *(unsigned __int8 *)(v5 + 80);
  v29 = (v28 + 24) & ~v28;
  v30 = (v6 + v29 + 7) & 0xFFFFFFFFFFFFFFF8;
  v31 = (v30 + 23) & 0xFFFFFFFFFFFFFFF8;
  v32 = swift_allocObject(&unk_10026BD78, v31 + 8, v28 | 7);
  *(_QWORD *)(v32 + 16) = v27;
  sub_10003B730((uint64_t)v8, v32 + v29, type metadata accessor for BeneficiaryInfoRecord);
  v33 = (_QWORD *)(v32 + v30);
  v34 = v40;
  *v33 = v39;
  v33[1] = v34;
  *(_QWORD *)(v32 + v31) = v13;
  aBlock[4] = sub_10018104C;
  v42 = v32;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000ABBFC;
  aBlock[3] = &unk_10026BD90;
  v35 = _Block_copy(aBlock);
  v36 = v42;
  v37 = v27;
  swift_retain(v34);
  v38 = v13;
  swift_release(v36);
  objc_msgSend(v38, "fetchRecordWithID:completionHandler:", v37, v35);
  _Block_release(v35);

}

uint64_t sub_100180EF0()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;

  v1 = (int *)type metadata accessor for BeneficiaryInfoRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);

  v6 = v0 + v4;
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v0 + v4, v7);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[5] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[6] + 8));
  sub_10000F494(*(_QWORD *)(v6 + v1[7]), *(_QWORD *)(v6 + v1[7] + 8));
  v9(v0 + v4 + v1[8], v7);
  sub_10000F494(*(_QWORD *)(v6 + v1[9]), *(_QWORD *)(v6 + v1[9] + 8));
  v10 = v0 + v4 + v1[11];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v10, 1, v7))
    v9(v10, v7);
  v11 = (v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v12 = (v11 + 23) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[12] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[14] + 8));
  swift_release(*(_QWORD *)(v0 + v11 + 8));

  return swift_deallocObject(v0, v12 + 8, v3 | 7);
}

uint64_t sub_10018104C(uint64_t a1, uint64_t a2)
{
  return sub_100181FA4(a1, a2, type metadata accessor for BeneficiaryInfoRecord, (uint64_t (*)(uint64_t, uint64_t, _QWORD, unint64_t, _QWORD, _QWORD, _QWORD))sub_100177640);
}

uint64_t sub_100181060()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;

  v1 = (int *)type metadata accessor for BeneficiaryInfoRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release(*(_QWORD *)(v0 + 24));

  v6 = v0 + v4;
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v0 + v4, v7);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[5] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[6] + 8));
  sub_10000F494(*(_QWORD *)(v6 + v1[7]), *(_QWORD *)(v6 + v1[7] + 8));
  v9(v0 + v4 + v1[8], v7);
  sub_10000F494(*(_QWORD *)(v6 + v1[9]), *(_QWORD *)(v6 + v1[9] + 8));
  v10 = v0 + v4 + v1[11];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v10, 1, v7))
    v9(v10, v7);
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[12] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[14] + 8));
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_10018119C(uint64_t a1, uint64_t a2)
{
  return sub_100182178(a1, a2, type metadata accessor for BeneficiaryInfoRecord, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, char *))sub_100177E84);
}

uint64_t sub_1001811B0()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;

  v1 = (int *)type metadata accessor for BeneficiaryInfoRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v0 + v4;
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v0 + v4, v7);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[5] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[6] + 8));
  sub_10000F494(*(_QWORD *)(v6 + v1[7]), *(_QWORD *)(v6 + v1[7] + 8));
  v9(v0 + v4 + v1[8], v7);
  sub_10000F494(*(_QWORD *)(v6 + v1[9]), *(_QWORD *)(v6 + v1[9] + 8));
  v10 = v0 + v4 + v1[11];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v10, 1, v7))
    v9(v10, v7);
  v11 = v4 + v5;
  v12 = (v4 + v5 + 31) & 0xFFFFFFFFFFFFFFF8;
  v13 = (v12 + 15) & 0xFFFFFFFFFFFFFFF8;
  v14 = (v11 + 7) & 0xFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[12] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[14] + 8));
  swift_release(*(_QWORD *)(v0 + v14 + 8));
  swift_release(*(_QWORD *)(v0 + v12));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v13 + 8));
  return swift_deallocObject(v0, ((v13 + 23) & 0xFFFFFFFFFFFFFFF8) + 8, v3 | 7);
}

uint64_t sub_100181320(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v3 = *(_QWORD *)(type metadata accessor for BeneficiaryInfoRecord(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = v4 + *(_QWORD *)(v3 + 64);
  return sub_10017C7B8(a1, v1 + v4, *(uint64_t (**)(uint64_t))(v1 + ((v5 + 7) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v1 + ((v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 8), *(unsigned __int8 *)(v1 + ((v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 16), *(_QWORD *)(v1 + ((v5 + 31) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v1 + ((((v5 + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v1 + ((((v5 + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
}

void sub_1001813B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  id v13;
  id v14;
  Class v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  _QWORD aBlock[5];
  uint64_t v23;

  v6 = type metadata accessor for CustodianshipInfoRecord(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  __chkstk_darwin(v6, v9);
  if (qword_10028AF00 != -1)
    swift_once(&qword_10028AF00, sub_1001FD458);
  if (*(_BYTE *)(a1 + *(int *)(v6 + 36)) == 1)
  {
    if (qword_10028AF10 != -1)
      swift_once(&qword_10028AF10, sub_1001FDD8C);
    v10 = &qword_1002A8C80;
  }
  else
  {
    if (qword_10028AF08 != -1)
      swift_once(&qword_10028AF08, sub_1001FDD54);
    v10 = &qword_1002A8C70;
  }
  v11 = *v10;
  v12 = v10[1];
  swift_bridgeObjectRetain(v12);
  v13 = sub_1001FD4C0(v11, v12);
  v14 = objc_msgSend(v13, "privateCloudDatabase");
  swift_bridgeObjectRelease(v12);

  v15 = sub_100049D3C();
  v16 = -[objc_class recordID](v15, "recordID");

  sub_100027FE8(a1, (uint64_t)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for CustodianshipInfoRecord);
  v17 = *(unsigned __int8 *)(v7 + 80);
  v18 = (v17 + 32) & ~v17;
  v19 = swift_allocObject(&unk_10026BE40, v18 + v8, v17 | 7);
  *(_QWORD *)(v19 + 16) = a2;
  *(_QWORD *)(v19 + 24) = a3;
  sub_10003B730((uint64_t)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v19 + v18, type metadata accessor for CustodianshipInfoRecord);
  aBlock[4] = sub_1001816D0;
  v23 = v19;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000ABBFC;
  aBlock[3] = &unk_10026BE58;
  v20 = _Block_copy(aBlock);
  v21 = v23;
  swift_retain(a3);
  swift_release(v21);
  objc_msgSend(v14, "deleteRecordWithID:completionHandler:", v16, v20);
  _Block_release(v20);

}

uint64_t sub_100181610()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);

  v1 = (int *)type metadata accessor for CustodianshipInfoRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release(*(_QWORD *)(v0 + 24));
  v7 = v0 + v4;
  v8 = type metadata accessor for UUID(0);
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8);
  v9(v7, v8);
  v9(v7 + v1[5], v8);
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[6] + 8));
  sub_10000F494(*(_QWORD *)(v7 + v1[8]), *(_QWORD *)(v7 + v1[8] + 8));
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1001816D0(uint64_t a1, uint64_t a2)
{
  return sub_100181A74(a1, a2, type metadata accessor for CustodianshipInfoRecord);
}

uint64_t sub_1001816DC()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;

  v1 = (int *)type metadata accessor for CustodianRecoveryInfoRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release(*(_QWORD *)(v0 + 24));
  v6 = v0 + v4;
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v0 + v4, v7);
  v9(v0 + v4 + v1[5], v7);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[6] + 8));
  sub_10000F494(*(_QWORD *)(v6 + v1[7]), *(_QWORD *)(v6 + v1[7] + 8));
  v10 = (uint64_t *)(v0 + v4 + v1[8]);
  v11 = v10[1];
  if (v11 >> 60 != 15)
    sub_10000F494(*v10, v11);
  sub_10000F494(*(_QWORD *)(v6 + v1[9]), *(_QWORD *)(v6 + v1[9] + 8));
  v12 = v6 + v1[11];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v12, 1, v7))
    v9(v12, v7);
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[12] + 8));
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_100181810(uint64_t a1, uint64_t a2)
{
  return sub_100181A74(a1, a2, type metadata accessor for CustodianRecoveryInfoRecord);
}

uint64_t sub_10018181C()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  unint64_t v11;

  v1 = (int *)type metadata accessor for CustodianHealthRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release(*(_QWORD *)(v0 + 24));
  v6 = type metadata accessor for UUID(0);
  v7 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8);
  v7(v0 + v4, v6);
  v7(v0 + v4 + v1[5], v6);
  v8 = v0 + v4 + v1[6];
  v9 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  v10 = (uint64_t *)(v0 + v4 + v1[7]);
  v11 = v10[1];
  if (v11 >> 60 != 15)
    sub_10000F494(*v10, v11);
  sub_10000F494(*(_QWORD *)(v0 + v4 + v1[8]), *(_QWORD *)(v0 + v4 + v1[8] + 8));
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_100181910(uint64_t a1, uint64_t a2)
{
  return sub_100181A74(a1, a2, type metadata accessor for CustodianHealthRecord);
}

uint64_t sub_10018191C()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;

  v1 = (int *)type metadata accessor for CustodianRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release(*(_QWORD *)(v0 + 24));
  v6 = v0 + v4;
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v0 + v4, v7);
  v9(v0 + v4 + v1[5], v7);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[7] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[8] + 8));
  v10 = (uint64_t *)(v0 + v4 + v1[10]);
  v11 = v10[1];
  if (v11 >> 60 != 15)
    sub_10000F494(*v10, v11);
  sub_10000F494(*(_QWORD *)(v6 + v1[11]), *(_QWORD *)(v6 + v1[11] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[13] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[14] + 8));
  v12 = v6 + v1[16];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v12, 1, v7))
    v9(v12, v7);
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_100181A68(uint64_t a1, uint64_t a2)
{
  return sub_100181A74(a1, a2, type metadata accessor for CustodianRecord);
}

uint64_t sub_100181A74(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v6;

  v6 = *(unsigned __int8 *)(*(_QWORD *)(a3(0) - 8) + 80);
  return sub_10017DB5C(a1, a2, *(void (**)(_QWORD))(v3 + 16), *(_QWORD *)(v3 + 24), v3 + ((v6 + 32) & ~v6));
}

uint64_t sub_100181AC8()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;

  v1 = (int *)type metadata accessor for InheritanceHealthRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release(*(_QWORD *)(v0 + 24));
  v7 = v0 + v4;
  v8 = type metadata accessor for UUID(0);
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8);
  v9(v7, v8);
  v10 = v7 + v1[5];
  v11 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  sub_10000F494(*(_QWORD *)(v7 + v1[6]), *(_QWORD *)(v7 + v1[6] + 8));
  v9(v7 + v1[7], v8);
  sub_10000F494(*(_QWORD *)(v7 + v1[8]), *(_QWORD *)(v7 + v1[8] + 8));
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100181BAC(uint64_t a1, uint64_t a2)
{
  return sub_100181C84(a1, a2, type metadata accessor for InheritanceHealthRecord);
}

uint64_t sub_100181BB8()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);

  v1 = (int *)type metadata accessor for BenefactorInfoRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release(*(_QWORD *)(v0 + 24));
  v7 = v0 + v4;
  v8 = type metadata accessor for UUID(0);
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8);
  v9(v7, v8);
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[5] + 8));
  v9(v7 + v1[7], v8);
  sub_10000F494(*(_QWORD *)(v7 + v1[8]), *(_QWORD *)(v7 + v1[8] + 8));
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100181C78(uint64_t a1, uint64_t a2)
{
  return sub_100181C84(a1, a2, type metadata accessor for BenefactorInfoRecord);
}

uint64_t sub_100181C84(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v3;
  uint64_t v7;

  v7 = *(unsigned __int8 *)(*(_QWORD *)(a3(0) - 8) + 80);
  return sub_10017E368(a1, a2, *(void (**)(_QWORD))(v3 + 16), *(_QWORD *)(v3 + 24), v3 + ((v7 + 32) & ~v7), a3);
}

uint64_t sub_100181CE0()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);

  v1 = (int *)type metadata accessor for InheritanceInvitationRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release(*(_QWORD *)(v0 + 24));
  v7 = v0 + v4;
  v8 = type metadata accessor for UUID(0);
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8);
  v9(v7, v8);
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[5] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[7] + 8));
  v9(v7 + v1[9], v8);
  sub_10000F494(*(_QWORD *)(v7 + v1[10]), *(_QWORD *)(v7 + v1[10] + 8));
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100181DC0(uint64_t a1, uint64_t a2)
{
  return sub_100181DD4(a1, a2, type metadata accessor for InheritanceInvitationRecord, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t))sub_10017DE00);
}

uint64_t sub_100181DD4(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD), uint64_t (*a4)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t))
{
  uint64_t v4;
  uint64_t v7;

  v7 = *(unsigned __int8 *)(*(_QWORD *)(a3(0) - 8) + 80);
  return a4(a1, a2, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), v4 + ((v7 + 32) & ~v7));
}

uint64_t sub_100181E34()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;

  v1 = (int *)type metadata accessor for CustodianRecoveryInfoRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);

  v6 = v0 + v4;
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v0 + v4, v7);
  v9(v0 + v4 + v1[5], v7);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[6] + 8));
  sub_10000F494(*(_QWORD *)(v6 + v1[7]), *(_QWORD *)(v6 + v1[7] + 8));
  v10 = (uint64_t *)(v0 + v4 + v1[8]);
  v11 = v10[1];
  if (v11 >> 60 != 15)
    sub_10000F494(*v10, v11);
  sub_10000F494(*(_QWORD *)(v6 + v1[9]), *(_QWORD *)(v6 + v1[9] + 8));
  v12 = v6 + v1[11];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v12, 1, v7))
    v9(v12, v7);
  v13 = (v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v14 = (v13 + 23) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[12] + 8));
  swift_release(*(_QWORD *)(v0 + v13 + 8));

  return swift_deallocObject(v0, v14 + 8, v3 | 7);
}

uint64_t sub_100181F90(uint64_t a1, uint64_t a2)
{
  return sub_100181FA4(a1, a2, type metadata accessor for CustodianRecoveryInfoRecord, (uint64_t (*)(uint64_t, uint64_t, _QWORD, unint64_t, _QWORD, _QWORD, _QWORD))sub_100177258);
}

uint64_t sub_100181FA4(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD), uint64_t (*a4)(uint64_t, uint64_t, _QWORD, unint64_t, _QWORD, _QWORD, _QWORD))
{
  uint64_t v4;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v7 = *(_QWORD *)(a3(0) - 8);
  v8 = (*(unsigned __int8 *)(v7 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = (*(_QWORD *)(v7 + 64) + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  return a4(a1, a2, *(_QWORD *)(v4 + 16), v4 + v8, *(_QWORD *)(v4 + v9), *(_QWORD *)(v4 + v9 + 8), *(_QWORD *)(v4 + ((v9 + 23) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_100182028()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;

  v1 = (int *)type metadata accessor for CustodianRecoveryInfoRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release(*(_QWORD *)(v0 + 24));

  v6 = v0 + v4;
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v0 + v4, v7);
  v9(v0 + v4 + v1[5], v7);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[6] + 8));
  sub_10000F494(*(_QWORD *)(v6 + v1[7]), *(_QWORD *)(v6 + v1[7] + 8));
  v10 = (uint64_t *)(v0 + v4 + v1[8]);
  v11 = v10[1];
  if (v11 >> 60 != 15)
    sub_10000F494(*v10, v11);
  sub_10000F494(*(_QWORD *)(v6 + v1[9]), *(_QWORD *)(v6 + v1[9] + 8));
  v12 = v6 + v1[11];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v12, 1, v7))
    v9(v12, v7);
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[12] + 8));
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_100182164(uint64_t a1, uint64_t a2)
{
  return sub_100182178(a1, a2, type metadata accessor for CustodianRecoveryInfoRecord, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, char *))sub_100177A28);
}

uint64_t sub_100182178(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD), uint64_t (*a4)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, char *))
{
  char *v4;
  uint64_t v7;

  v7 = *(unsigned __int8 *)(*(_QWORD *)(a3(0) - 8) + 80);
  return a4(a1, a2, *((_QWORD *)v4 + 2), *((_QWORD *)v4 + 3), *((_QWORD *)v4 + 4), &v4[(v7 + 40) & ~v7]);
}

void sub_100182244(uint64_t a1, uint64_t a2, void (*a3)(void), uint64_t a4, uint64_t a5)
{
  _QWORD *v8;
  id v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  __n128 v15;
  os_log_type_t v16;
  uint8_t *v17;
  NSString v18;
  void *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t aBlock[5];
  _QWORD *v31;
  uint64_t v32;

  v8 = (_QWORD *)swift_allocObject(&unk_10026C120, 40, 7);
  v8[2] = a3;
  v8[3] = a4;
  v8[4] = a5;
  v9 = objc_allocWithZone((Class)AKAppleIDAuthenticationController);
  swift_retain(a4);
  swift_retain(a5);
  v10 = objc_msgSend(v9, "init");
  if (v10)
  {
    v11 = v10;
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v12 = type metadata accessor for Logger(0);
    v13 = sub_100005288(v12, (uint64_t)qword_1002A8A08);
    v14 = Logger.logObject.getter(v13);
    v16 = static os_log_type_t.default.getter(v15);
    if (os_log_type_enabled(v14, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v16, "Fetching User Information", v17, 2u);
      swift_slowDealloc(v17, -1, -1);
    }

    v18 = String._bridgeToObjectiveC()();
    aBlock[4] = (uint64_t)sub_100182564;
    v31 = v8;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_100043E24;
    aBlock[3] = (uint64_t)&unk_10026C138;
    v19 = _Block_copy(aBlock);
    v20 = v31;
    swift_retain(v8);
    swift_release(v20);
    objc_msgSend(v11, "getUserInformationForAltDSID:completion:", v18, v19);
    _Block_release(v19);
    swift_release(v8);

  }
  else
  {
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v21 = type metadata accessor for Logger(0);
    v22 = sub_100005288(v21, (uint64_t)qword_1002A8A08);
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.error.getter(v23);
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "AuthController is nil", v25, 2u);
      swift_slowDealloc(v25, -1, -1);
    }

    type metadata accessor for AACustodianError(0);
    v27 = v26;
    v32 = -7008;
    v28 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
    v29 = sub_100041030();
    _BridgedStoredNSError.init(_:userInfo:)(aBlock, &v32, v28, v27, v29);
    v18 = (NSString)aBlock[0];
    sub_1001393B8(0, aBlock[0], a3, a4, a5);
    swift_release(v8);
  }

}

uint64_t sub_100182538()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

void sub_100182564(void *a1, uint64_t a2)
{
  uint64_t v2;

  sub_1001393B8(a1, a2, *(void (**)(void))(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32));
}

uint64_t sub_100182570(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t result;

  v2 = String.utf8CString.getter(a1, a2);
  v3 = _set_user_dir_suffix(v2 + 32);
  result = swift_release(v2);
  if (!v3)
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD00000000000001ELL, 0x800000010020EA80, "appleaccountd/Daemon.swift", 26, 2, 73, 0);
    __break(1u);
  }
  return result;
}

void sub_1001825FC(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t), void (*a5)(uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  NSString v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  NSString v45;
  id v46;
  Class isa;
  id v48;
  NSObject *v49;
  os_log_type_t v50;
  uint8_t *v51;
  uint64_t v52;
  char *v53;
  void *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  void (**v63)(uint64_t);
  void (*v64)(uint64_t);
  void *v65;
  uint64_t v66;
  id v67;
  id v68;
  uint64_t v69;
  id v70;
  uint64_t v71;
  NSObject *v72;
  os_log_type_t v73;
  uint8_t *v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t (*v85)(char *, uint64_t, uint64_t);
  char *v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  void (*v91)(uint64_t);
  void (*v92)(uint64_t);
  uint64_t v93;
  uint64_t aBlock[5];
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;

  v91 = a4;
  v92 = a5;
  v93 = a3;
  v84 = a2;
  v6 = sub_1000080B4(&qword_100295370);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  v86 = (char *)&v80 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for UUID(0);
  v11 = *(_QWORD *)(v10 - 8);
  v13 = __chkstk_darwin(v10, v12);
  v87 = v14;
  v88 = (char *)&v80 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13, v15);
  v17 = (char *)&v80 - v16;
  if (qword_10028ADD0 != -1)
    swift_once(&qword_10028ADD0, sub_100046D50);
  v18 = type metadata accessor for Logger(0);
  v19 = sub_100005288(v18, (uint64_t)qword_1002A89F0);
  v85 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v20 = v85(v17, a1, v10);
  v90 = v19;
  v21 = Logger.logObject.getter(v20);
  v22 = static os_log_type_t.info.getter(v21);
  if (os_log_type_enabled(v21, v22))
  {
    v23 = swift_slowAlloc(22, -1);
    v24 = swift_slowAlloc(64, -1);
    v81 = v6;
    v25 = v24;
    aBlock[0] = v24;
    *(_DWORD *)v23 = 136315394;
    v96 = type metadata accessor for InheritanceCleanupController(0);
    v26 = sub_1000080B4((uint64_t *)&unk_100295620);
    v83 = a1;
    v27 = String.init<A>(describing:)(&v96, v26);
    v82 = v11;
    v28 = v7;
    v30 = v29;
    v96 = sub_1001DEF4C(v27, v29, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v96, &v97);
    swift_bridgeObjectRelease(v30);
    *(_WORD *)(v23 + 12) = 2080;
    v31 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v32 = dispatch thunk of CustomStringConvertible.description.getter(v10, v31);
    v34 = v33;
    v96 = sub_1001DEF4C(v32, v33, aBlock);
    v7 = v28;
    v11 = v82;
    a1 = v83;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v96, &v97);
    swift_bridgeObjectRelease(v34);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v17, v10);
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "%s: Starting cleanup for beneficiary with beneficiaryID - %s", (uint8_t *)v23, 0x16u);
    swift_arrayDestroy(v25, 2, (char *)&type metadata for Any + 8);
    v35 = v25;
    v6 = v81;
    swift_slowDealloc(v35, -1, -1);
    swift_slowDealloc(v23, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v17, v10);
  }

  v36 = v93;
  if (v93)
  {
    v37 = v11;
    v38 = v93;
LABEL_8:
    v39 = objc_allocWithZone((Class)AKInheritanceContext);
    swift_bridgeObjectRetain(v36);
    v40 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v38);
    v41 = objc_msgSend(v39, "initWithOwnerAltDSID:", v40);

    UUID.uuidString.getter(v42);
    v44 = v43;
    v45 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v44);
    objc_msgSend(v41, "setBeneficiaryIdentifier:", v45);

    v46 = objc_allocWithZone((Class)AKInheritanceAccessKey);
    isa = UUID._bridgeToObjectiveC()().super.isa;
    v48 = objc_msgSend(v46, "initWithBeneficiairyIdentifier:", isa);

    objc_msgSend(v41, "setAccessKey:", v48);
    v49 = Logger.logObject.getter(objc_msgSend(v41, "setManifest:", 0));
    v50 = static os_log_type_t.info.getter(v49);
    if (os_log_type_enabled(v49, v50))
    {
      v51 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v51 = 0;
      _os_log_impl((void *)&_mh_execute_header, v49, v50, "Removing Beneficiary from IDMS...", v51, 2u);
      swift_slowDealloc(v51, -1, -1);
    }

    v52 = v89;
    v53 = v86;
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v86, v89 + OBJC_IVAR____TtC13appleaccountd28InheritanceCleanupController__requestController, v6);
    Dependency.wrappedValue.getter(aBlock, v6);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v53, v6);
    v54 = (void *)aBlock[0];
    v55 = swift_allocObject(&unk_10026C1D8, 24, 7);
    swift_weakInit(v55 + 16, v52);
    v56 = v88;
    v85(v88, a1, v10);
    v57 = v37;
    v58 = *(unsigned __int8 *)(v37 + 80);
    v59 = (v58 + 16) & ~v58;
    v60 = (v87 + v59 + 7) & 0xFFFFFFFFFFFFFFF8;
    v61 = (v60 + 15) & 0xFFFFFFFFFFFFFFF8;
    v62 = swift_allocObject(&unk_10026C200, v61 + 16, v58 | 7);
    (*(void (**)(uint64_t, char *, uint64_t))(v57 + 32))(v62 + v59, v56, v10);
    *(_QWORD *)(v62 + v60) = v55;
    v63 = (void (**)(uint64_t))(v62 + v61);
    v64 = v92;
    *v63 = v91;
    v63[1] = v64;
    aBlock[4] = (uint64_t)sub_1001864B0;
    v95 = v62;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_1001DC548;
    aBlock[3] = (uint64_t)&unk_10026C218;
    v65 = _Block_copy(aBlock);
    v66 = v95;
    swift_retain(v64);
    swift_release(v66);
    objc_msgSend(v54, "removeBeneficiaryWithInheritanceContext:completion:", v41, v65);
    _Block_release(v65);

    swift_unknownObjectRelease(v54);
    return;
  }
  v67 = objc_msgSend(objc_allocWithZone((Class)ACAccountStore), "init");
  v68 = objc_msgSend(v67, "aa_primaryAppleAccount");

  if (v68)
  {
    v70 = objc_msgSend(v68, "aa_altDSID");

    if (v70)
    {
      v37 = v11;
      static String._unconditionallyBridgeFromObjectiveC(_:)(v70);
      v38 = v71;

      goto LABEL_8;
    }
  }
  v72 = Logger.logObject.getter(v69);
  v73 = static os_log_type_t.error.getter(v72);
  if (os_log_type_enabled(v72, v73))
  {
    v74 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v74 = 0;
    _os_log_impl((void *)&_mh_execute_header, v72, v73, "No altDSID for owner found.", v74, 2u);
    swift_slowDealloc(v74, -1, -1);
  }

  type metadata accessor for InheritanceError(0);
  v76 = v75;
  v96 = 5;
  v77 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
  v78 = sub_100005150(&qword_10028B350, (uint64_t (*)(uint64_t))type metadata accessor for InheritanceError, (uint64_t)&unk_100216D64);
  _BridgedStoredNSError.init(_:userInfo:)(aBlock, &v96, v77, v76, v78);
  v79 = (void *)aBlock[0];
  v91(aBlock[0]);

}

uint64_t sub_100182D24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  _BOOL4 v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t result;
  uint64_t Strong;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD v52[3];
  _BYTE v53[8];
  uint64_t v54;
  uint64_t v55[3];

  v10 = type metadata accessor for UUID(0);
  v51 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10, v11);
  v13 = (char *)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a3 + 16;
  if (a1)
  {
    v47 = a3 + 16;
    swift_errorRetain(a1);
    if (qword_10028ADD0 != -1)
      swift_once(&qword_10028ADD0, sub_100046D50);
    v15 = type metadata accessor for Logger(0);
    v16 = sub_100005288(v15, (uint64_t)qword_1002A89F0);
    swift_errorRetain(a1);
    v17 = swift_errorRetain(a1);
    v46 = v16;
    v18 = Logger.logObject.getter(v17);
    v19 = static os_log_type_t.error.getter(v18);
    v20 = os_log_type_enabled(v18, v19);
    v48 = a4;
    v49 = a5;
    v50 = a2;
    if (v20)
    {
      v21 = (uint8_t *)swift_slowAlloc(12, -1);
      v22 = swift_slowAlloc(32, -1);
      v55[0] = v22;
      *(_DWORD *)v21 = 136315138;
      swift_getErrorValue(a1, v53, v52);
      v23 = Error.localizedDescription.getter(v52[1], v52[2]);
      v25 = v24;
      v54 = sub_1001DEF4C(v23, v24, v55);
      a2 = v50;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, v55);
      swift_bridgeObjectRelease(v25);
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Error removing Beneficiary from IdMS: %s", v21, 0xCu);
      swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v22, -1, -1);
      swift_slowDealloc(v21, -1, -1);
    }
    else
    {
      swift_errorRelease(a1);
      swift_errorRelease(a1);
    }

    v33 = v51;
    v34 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v51 + 16))(v13, a2, v10);
    v35 = Logger.logObject.getter(v34);
    v36 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v35, v36))
    {
      v37 = (uint8_t *)swift_slowAlloc(12, -1);
      v38 = swift_slowAlloc(32, -1);
      v55[0] = v38;
      *(_DWORD *)v37 = 136315138;
      v39 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v40 = dispatch thunk of CustomStringConvertible.description.getter(v10, v39);
      v42 = v41;
      v54 = sub_1001DEF4C(v40, v41, v55);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, v55);
      swift_bridgeObjectRelease(v42);
      (*(void (**)(char *, uint64_t))(v51 + 8))(v13, v10);
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "Continuing with client removal of beneficiary %s following IDMS failure", v37, 0xCu);
      swift_arrayDestroy(v38, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v38, -1, -1);
      swift_slowDealloc(v37, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v33 + 8))(v13, v10);
    }

    v44 = v48;
    v43 = v49;
    v45 = v47;
    swift_beginAccess(v47, v55, 0, 0);
    Strong = swift_weakLoadStrong(v45);
    if (Strong)
    {
      sub_1001831EC(v50, v44, v43);
      swift_errorRelease(a1);
      return swift_release(Strong);
    }
    return swift_errorRelease(a1);
  }
  else
  {
    if (qword_10028ADD0 != -1)
      swift_once(&qword_10028ADD0, sub_100046D50);
    v26 = type metadata accessor for Logger(0);
    v27 = sub_100005288(v26, (uint64_t)qword_1002A89F0);
    v28 = Logger.logObject.getter(v27);
    v29 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v28, v29))
    {
      v30 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v30 = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "Successfully removed Beneficiary from IdMS", v30, 2u);
      swift_slowDealloc(v30, -1, -1);
    }

    swift_beginAccess(v14, v55, 0, 0);
    result = swift_weakLoadStrong(v14);
    if (result)
    {
      Strong = result;
      sub_1001831EC(a2, a4, a5);
      return swift_release(Strong);
    }
  }
  return result;
}

void sub_1001831EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  Class isa;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  void *v35;
  char *v36;
  _QWORD v37[2];
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t aBlock[5];
  char *v47;

  v44 = a2;
  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  v42 = v8;
  v43 = (char *)v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1000080B4(&qword_10028C078);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  v13 = (char *)v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10028ADD0 != -1)
    swift_once(&qword_10028ADD0, sub_100046D50);
  v14 = type metadata accessor for Logger(0);
  v15 = sub_100005288(v14, (uint64_t)qword_1002A89F0);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v16, v17))
  {
    v40 = a3;
    v18 = (uint8_t *)swift_slowAlloc(12, -1);
    v19 = swift_slowAlloc(32, -1);
    v39 = v5;
    v20 = v19;
    aBlock[0] = v19;
    v38 = a1;
    *(_DWORD *)v18 = 136315138;
    v37[1] = v18 + 4;
    v45 = type metadata accessor for InheritanceCleanupController(0);
    v21 = sub_1000080B4((uint64_t *)&unk_100295620);
    v22 = String.init<A>(describing:)(&v45, v21);
    v24 = v23;
    v45 = sub_1001DEF4C(v22, v23, aBlock);
    a1 = v38;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, aBlock);
    v25 = v24;
    a3 = v40;
    swift_bridgeObjectRelease(v25);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "%s: Removing Access Key…", v18, 0xCu);
    swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
    v26 = v20;
    v5 = v39;
    swift_slowDealloc(v26, -1, -1);
    swift_slowDealloc(v18, -1, -1);
  }

  v27 = v41;
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, v41 + OBJC_IVAR____TtC13appleaccountd28InheritanceCleanupController__securityController, v9);
  Dependency.wrappedValue.getter(aBlock, v9);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  v28 = (void *)aBlock[0];
  isa = UUID._bridgeToObjectiveC()().super.isa;
  v30 = swift_allocObject(&unk_10026C1D8, 24, 7);
  swift_weakInit(v30 + 16, v27);
  v31 = v43;
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v43, a1, v5);
  v32 = *(unsigned __int8 *)(v6 + 80);
  v33 = (v32 + 40) & ~v32;
  v34 = (char *)swift_allocObject(&unk_10026C250, v33 + v42, v32 | 7);
  *((_QWORD *)v34 + 2) = v44;
  *((_QWORD *)v34 + 3) = a3;
  *((_QWORD *)v34 + 4) = v30;
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(&v34[v33], v31, v5);
  aBlock[4] = (uint64_t)sub_1001864B8;
  v47 = v34;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1001DC548;
  aBlock[3] = (uint64_t)&unk_10026C268;
  v35 = _Block_copy(aBlock);
  v36 = v47;
  swift_retain(a3);
  swift_release(v36);
  objc_msgSend(v28, "removeInheritanceAccessKeyForBeneficiaryID:completion:", isa, v35);
  _Block_release(v35);
  swift_unknownObjectRelease(v28);

}

uint64_t sub_100183574(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v14;
  _QWORD v15[3];
  _BYTE v16[8];
  uint64_t v17;

  if (a1)
  {
    swift_errorRetain(a1);
    if (qword_10028ADD0 != -1)
      swift_once(&qword_10028ADD0, sub_100046D50);
    v4 = type metadata accessor for Logger(0);
    sub_100005288(v4, (uint64_t)qword_1002A89F0);
    swift_errorRetain(a1);
    v5 = swift_errorRetain(a1);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.error.getter(v6);
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc(12, -1);
      v9 = swift_slowAlloc(32, -1);
      v17 = v9;
      *(_DWORD *)v8 = 136315138;
      swift_getErrorValue(a1, v16, v15);
      v10 = Error.localizedDescription.getter(v15[1], v15[2]);
      v12 = v11;
      v14 = sub_1001DEF4C(v10, v11, &v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, v15);
      swift_bridgeObjectRelease(v12);
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Error removing benefactor from storage: %s", v8, 0xCu);
      swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v9, -1, -1);
      swift_slowDealloc(v8, -1, -1);

      swift_errorRelease(a1);
    }
    else
    {
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      swift_errorRelease(a1);

    }
  }
  return a2(a1);
}

uint64_t sub_100183768(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100184818(a1, a2, a3, "%s: Removing BenefactorInfoRecord...", (uint64_t)&unk_10026C188, (uint64_t)sub_1001851FC, (void (*)(_QWORD, _QWORD, _QWORD))sub_1000CC928);
}

uint64_t sub_10018378C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = v0 + OBJC_IVAR____TtC13appleaccountd28InheritanceCleanupController__requestController;
  v2 = sub_1000080B4(&qword_100295370);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  v3 = v0 + OBJC_IVAR____TtC13appleaccountd28InheritanceCleanupController__storageController;
  v4 = sub_1000080B4((uint64_t *)&unk_100295380);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  v5 = v0 + OBJC_IVAR____TtC13appleaccountd28InheritanceCleanupController__securityController;
  v6 = sub_1000080B4(&qword_10028C078);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_100183838()
{
  return type metadata accessor for InheritanceCleanupController(0);
}

uint64_t type metadata accessor for InheritanceCleanupController(uint64_t a1)
{
  uint64_t result;

  result = qword_1002954B0;
  if (!qword_1002954B0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for InheritanceCleanupController);
  return result;
}

void sub_10018387C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[3];

  sub_100017464(319, (unint64_t *)&unk_1002954C0, (uint64_t *)&unk_10028FBC0);
  if (v3 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_100017464(319, (unint64_t *)&qword_1002954D0, &qword_100294B10);
    if (v5 <= 0x3F)
    {
      v8[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_100017464(319, qword_1002954E0, &qword_100295290);
      if (v7 <= 0x3F)
      {
        v8[2] = *(_QWORD *)(v6 - 8) + 64;
        swift_updateClassMetadata2(a1, 256, 3, v8, a1 + 80);
      }
    }
  }
}

uint64_t sub_10018394C(uint64_t a1, void (*a2)(uint64_t), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t Strong;
  uint64_t v11;
  _BYTE v12[24];

  if (a1)
  {
    swift_errorRetain(a1);
    a2(a1);
    return swift_errorRelease(a1);
  }
  else
  {
    v9 = a4 + 16;
    swift_beginAccess(a4 + 16, v12, 0, 0);
    Strong = swift_weakLoadStrong(v9);
    if (Strong)
    {
      v11 = Strong;
      sub_1001839F8(a5);
      swift_release(v11);
    }
    return ((uint64_t (*)(_QWORD))a2)(0);
  }
}

uint64_t sub_1001839F8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint8_t *v21;
  uint8_t *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  _QWORD v32[5];

  v2 = v1;
  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(v4, v7);
  v31 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1000080B4((uint64_t *)&unk_100295380);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10028ADD0 != -1)
    swift_once(&qword_10028ADD0, sub_100046D50);
  v13 = type metadata accessor for Logger(0);
  v14 = sub_100005288(v13, (uint64_t)qword_1002A89F0);
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v15, v16))
  {
    v17 = (uint8_t *)swift_slowAlloc(2, -1);
    v30 = v6;
    v18 = v4;
    v19 = v2;
    v20 = a1;
    v21 = v17;
    *(_WORD *)v17 = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Removing Inheritance Health Record...", v17, 2u);
    v22 = v21;
    a1 = v20;
    v2 = v19;
    v4 = v18;
    v6 = v30;
    swift_slowDealloc(v22, -1, -1);
  }

  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, v2 + OBJC_IVAR____TtC13appleaccountd28InheritanceCleanupController__storageController, v8);
  Dependency.wrappedValue.getter(v32, v8);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  sub_10000732C(v32, v32[3]);
  v23 = v31;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v31, a1, v4);
  v24 = *(unsigned __int8 *)(v5 + 80);
  v25 = (v24 + 16) & ~v24;
  v26 = (v6 + v25 + 7) & 0xFFFFFFFFFFFFFFF8;
  v27 = swift_allocObject(&unk_10026C390, v26 + 8, v24 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v27 + v25, v23, v4);
  *(_QWORD *)(v27 + v26) = v2;
  swift_retain(v2);
  sub_1000CE0F0(a1, (uint64_t)sub_100186768, v27);
  swift_release(v27);
  return sub_100006F58(v32);
}

uint64_t sub_100183C60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45[5];

  v42 = a3;
  v41 = a2;
  v40 = type metadata accessor for UUID(0);
  v4 = *(_QWORD *)(v40 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  __chkstk_darwin(v40, v6);
  v39 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1000080B4((uint64_t *)&unk_100295380);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10028ADD0 != -1)
    swift_once(&qword_10028ADD0, sub_100046D50);
  v12 = type metadata accessor for Logger(0);
  v13 = sub_100005288(v12, (uint64_t)qword_1002A89F0);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v14, v15))
  {
    v38 = a1;
    v16 = swift_slowAlloc(12, -1);
    v37 = v5;
    v17 = (uint8_t *)v16;
    v18 = swift_slowAlloc(32, -1);
    v45[0] = v18;
    *(_DWORD *)v17 = 136315138;
    v36 = v17 + 4;
    v44 = type metadata accessor for InheritanceCleanupController(0);
    v19 = sub_1000080B4((uint64_t *)&unk_100295620);
    v20 = String.init<A>(describing:)(&v44, v19);
    v22 = v21;
    v44 = sub_1001DEF4C(v20, v21, v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, v45);
    a1 = v38;
    swift_bridgeObjectRelease(v22);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "%s: Removing Invitation Record...", v17, 0xCu);
    swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v18, -1, -1);
    v23 = v17;
    v5 = v37;
    swift_slowDealloc(v23, -1, -1);
  }

  v24 = v43;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, v43 + OBJC_IVAR____TtC13appleaccountd28InheritanceCleanupController__storageController, v7);
  Dependency.wrappedValue.getter(v45, v7);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  sub_10000732C(v45, v45[3]);
  v26 = v39;
  v25 = v40;
  v27 = a1;
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v39, a1, v40);
  v28 = *(unsigned __int8 *)(v4 + 80);
  v29 = (v28 + 16) & ~v28;
  v30 = (v5 + v29 + 7) & 0xFFFFFFFFFFFFFFF8;
  v31 = (v30 + 23) & 0xFFFFFFFFFFFFFFF8;
  v32 = swift_allocObject(&unk_10026C340, v31 + 8, v28 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))(v32 + v29, v26, v25);
  v33 = (_QWORD *)(v32 + v30);
  v34 = v42;
  *v33 = v41;
  v33[1] = v34;
  *(_QWORD *)(v32 + v31) = v24;
  swift_retain(v34);
  swift_retain(v24);
  sub_1000C8F4C(v27, (uint64_t)sub_100186674, v32);
  swift_release(v32);
  return sub_100006F58(v45);
}

uint64_t sub_100183F84(uint64_t a1, void (*a2)(uint64_t), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  __n128 v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint8_t *v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  __n128 v36;
  os_log_type_t v37;
  uint64_t v38;
  uint8_t *v39;
  uint8_t *v40;
  uint64_t result;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(uint64_t);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54[3];

  v51 = a2;
  v52 = a3;
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin(v8, v11);
  v12 = (char *)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a1)
  {
LABEL_12:
    if (qword_10028ADD0 != -1)
      swift_once(&qword_10028ADD0, sub_100046D50);
    v33 = type metadata accessor for Logger(0);
    v34 = sub_100005288(v33, (uint64_t)qword_1002A89F0);
    v35 = Logger.logObject.getter(v34);
    v37 = static os_log_type_t.default.getter(v36);
    if (os_log_type_enabled(v35, v37))
    {
      v38 = a5;
      v39 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v39 = 0;
      _os_log_impl((void *)&_mh_execute_header, v35, v37, "Deleting beneficiary record from CK.", v39, 2u);
      v40 = v39;
      a5 = v38;
      swift_slowDealloc(v40, -1, -1);
    }

    swift_beginAccess(a4 + 16, v54, 0, 0);
    result = swift_weakLoadStrong(a4 + 16);
    if (result)
    {
      v42 = result;
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), a5, v8);
      v43 = *(unsigned __int8 *)(v9 + 80);
      v44 = (v43 + 40) & ~v43;
      v45 = (char *)swift_allocObject(&unk_10026C2A0, v44 + v10, v43 | 7);
      v46 = a5;
      v47 = (uint64_t)v45;
      v48 = v52;
      *((_QWORD *)v45 + 2) = v51;
      *((_QWORD *)v45 + 3) = v48;
      *((_QWORD *)v45 + 4) = a4;
      (*(void (**)(char *, char *, uint64_t))(v9 + 32))(&v45[v44], v12, v8);
      swift_retain(v48);
      swift_retain(a4);
      sub_100184818(v46, (uint64_t)sub_1001864C8, v47, "%s: Removing BeneficiaryInfoRecord...", (uint64_t)&unk_10026C2C8, (uint64_t)sub_1001864D8, (void (*)(_QWORD, _QWORD, _QWORD))sub_1000CA860);
      swift_release(v47);
      return swift_release(v42);
    }
    return result;
  }
  swift_errorRetain(a1);
  v13 = (void *)_convertErrorToNSError(_:)(a1);
  v14 = objc_msgSend(v13, "code");

  if (v14 == (id)34)
  {
    if (qword_10028ADD0 != -1)
      swift_once(&qword_10028ADD0, sub_100046D50);
    v15 = type metadata accessor for Logger(0);
    v16 = sub_100005288(v15, (uint64_t)qword_1002A89F0);
    v17 = Logger.logObject.getter(v16);
    v19 = static os_log_type_t.default.getter(v18);
    if (os_log_type_enabled(v17, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc(2, -1);
      v50 = a5;
      v21 = v20;
      *(_WORD *)v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, v19, "Key not found in Octagon Trust. Delete record from CK.", v20, 2u);
      v22 = v21;
      a5 = v50;
      swift_slowDealloc(v22, -1, -1);

      swift_errorRelease(a1);
    }
    else
    {
      swift_errorRelease(a1);

    }
    goto LABEL_12;
  }
  if (qword_10028ADD0 != -1)
    swift_once(&qword_10028ADD0, sub_100046D50);
  v23 = type metadata accessor for Logger(0);
  sub_100005288(v23, (uint64_t)qword_1002A89F0);
  swift_errorRetain(a1);
  v24 = swift_errorRetain(a1);
  v25 = Logger.logObject.getter(v24);
  v26 = static os_log_type_t.error.getter(v25);
  if (os_log_type_enabled(v25, v26))
  {
    v27 = (uint8_t *)swift_slowAlloc(12, -1);
    v28 = swift_slowAlloc(32, -1);
    v53 = a1;
    v54[0] = v28;
    *(_DWORD *)v27 = 136315138;
    swift_errorRetain(a1);
    v29 = sub_1000080B4(&qword_10028E850);
    v30 = String.init<A>(describing:)(&v53, v29);
    v32 = v31;
    v53 = sub_1001DEF4C(v30, v31, v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, v54);
    swift_bridgeObjectRelease(v32);
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "Error removing access keys for beneficiary: %s", v27, 0xCu);
    swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v28, -1, -1);
    swift_slowDealloc(v27, -1, -1);
  }
  else
  {
    swift_errorRelease(a1);
    swift_errorRelease(a1);
  }

  swift_errorRetain(a1);
  v51(a1);
  swift_errorRelease(a1);
  return swift_errorRelease(a1);
}

uint64_t sub_100184434(uint64_t a1, void (*a2)(uint64_t), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  __n128 v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  void (*v32)(uint64_t);
  uint8_t *v33;
  uint8_t *v34;
  uint64_t result;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD v44[3];
  char v45[8];
  uint64_t v46[3];

  v10 = type metadata accessor for UUID(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  __chkstk_darwin(v10, v13);
  v14 = (char *)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    swift_errorRetain(a1);
    if (qword_10028ADD0 != -1)
      swift_once(&qword_10028ADD0, sub_100046D50);
    v15 = type metadata accessor for Logger(0);
    sub_100005288(v15, (uint64_t)qword_1002A89F0);
    swift_errorRetain(a1);
    v16 = swift_errorRetain(a1);
    v17 = Logger.logObject.getter(v16);
    v18 = static os_log_type_t.error.getter(v17);
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc(12, -1);
      v20 = swift_slowAlloc(32, -1);
      v46[0] = v20;
      *(_DWORD *)v19 = 136315138;
      swift_getErrorValue(a1, v45, v44);
      v21 = Error.localizedDescription.getter(v44[1], v44[2]);
      v23 = v22;
      v43 = sub_1001DEF4C(v21, v22, v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, v44);
      swift_bridgeObjectRelease(v23);
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Error removing Beneficiary from storage: %s", v19, 0xCu);
      swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v20, -1, -1);
      swift_slowDealloc(v19, -1, -1);
    }
    else
    {
      swift_errorRelease(a1);
      swift_errorRelease(a1);
    }

    swift_errorRetain(a1);
    a2(a1);
    swift_errorRelease(a1);
    return swift_errorRelease(a1);
  }
  else
  {
    v24 = a4 + 16;
    if (qword_10028ADD0 != -1)
      swift_once(&qword_10028ADD0, sub_100046D50);
    v25 = type metadata accessor for Logger(0);
    v26 = sub_100005288(v25, (uint64_t)qword_1002A89F0);
    v27 = Logger.logObject.getter(v26);
    v29 = static os_log_type_t.default.getter(v28);
    if (os_log_type_enabled(v27, v29))
    {
      v30 = (uint8_t *)swift_slowAlloc(2, -1);
      v42 = a5;
      v31 = a3;
      v32 = a2;
      v33 = v30;
      *(_WORD *)v30 = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, v29, "Removed Beneficiary from storage.", v30, 2u);
      v34 = v33;
      a2 = v32;
      a3 = v31;
      a5 = v42;
      swift_slowDealloc(v34, -1, -1);
    }

    swift_beginAccess(v24, v46, 0, 0);
    result = swift_weakLoadStrong(v24);
    if (result)
    {
      v36 = result;
      v37 = swift_allocObject(&unk_10026C1D8, 24, 7);
      swift_weakInit(v37 + 16, v36);
      (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), a5, v10);
      v38 = *(unsigned __int8 *)(v11 + 80);
      v39 = (v38 + 40) & ~v38;
      v40 = (char *)swift_allocObject(&unk_10026C318, v39 + v12, v38 | 7);
      *((_QWORD *)v40 + 2) = a2;
      *((_QWORD *)v40 + 3) = a3;
      *((_QWORD *)v40 + 4) = v37;
      (*(void (**)(char *, char *, uint64_t))(v11 + 32))(&v40[v39], v14, v10);
      swift_retain(a3);
      swift_retain(v37);
      sub_100183C60(a5, (uint64_t)sub_100186584, (uint64_t)v40);
      swift_release(v36);
      swift_release(v37);
      return swift_release(v40);
    }
  }
  return result;
}

uint64_t sub_100184818(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, void (*a7)(_QWORD, _QWORD, _QWORD))
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(_QWORD, _QWORD, _QWORD);
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint8_t *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint8_t *v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46[5];

  v43 = a3;
  v42 = a2;
  v12 = sub_1000080B4((uint64_t *)&unk_100295380);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12, v14);
  v16 = (char *)&v37 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10028ADD0 != -1)
    swift_once(&qword_10028ADD0, sub_100046D50);
  v17 = type metadata accessor for Logger(0);
  v18 = sub_100005288(v17, (uint64_t)qword_1002A89F0);
  v19 = Logger.logObject.getter(v18);
  v20 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v19, v20))
  {
    v38 = a4;
    v21 = swift_slowAlloc(12, -1);
    v40 = a1;
    v22 = (uint8_t *)v21;
    v23 = swift_slowAlloc(32, -1);
    v41 = a6;
    v24 = v23;
    v46[0] = v23;
    v39 = a5;
    *(_DWORD *)v22 = 136315138;
    v37 = v22 + 4;
    v45 = type metadata accessor for InheritanceCleanupController(0);
    v25 = sub_1000080B4((uint64_t *)&unk_100295620);
    v26 = String.init<A>(describing:)(&v45, v25);
    v27 = a7;
    v29 = v28;
    v45 = sub_1001DEF4C(v26, v28, v46);
    a5 = v39;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, v46);
    v30 = v29;
    a7 = v27;
    swift_bridgeObjectRelease(v30);
    _os_log_impl((void *)&_mh_execute_header, v19, v20, v38, v22, 0xCu);
    swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
    v31 = v24;
    a6 = v41;
    swift_slowDealloc(v31, -1, -1);
    v32 = v22;
    a1 = v40;
    swift_slowDealloc(v32, -1, -1);
  }

  v33 = v44;
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v16, v44 + OBJC_IVAR____TtC13appleaccountd28InheritanceCleanupController__storageController, v12);
  Dependency.wrappedValue.getter(v46, v12);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
  sub_10000732C(v46, v46[3]);
  v34 = (_QWORD *)swift_allocObject(a5, 40, 7);
  v34[2] = v42;
  v35 = v43;
  v34[3] = v43;
  v34[4] = v33;
  swift_retain(v35);
  swift_retain(v33);
  a7(a1, a6, v34);
  swift_release(v34);
  return sub_100006F58(v46);
}

uint64_t sub_100184AC8(uint64_t a1, void (*a2)(uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  void (*v20)(uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v34;
  void (*v35)(uint64_t);
  uint64_t v36;
  uint64_t v37[5];

  v35 = a2;
  v7 = sub_1000080B4((uint64_t *)&unk_100295380);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for BeneficiaryInfoRecord(0);
  __chkstk_darwin(v12, v13);
  v15 = (char *)&v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_1000080B4(&qword_100295630);
  __chkstk_darwin(v16, v17);
  v19 = (uint64_t *)((char *)&v34 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100024A20(a1, (uint64_t)v19, &qword_100295630);
  if (swift_getEnumCaseMultiPayload(v19, v16) == 1)
  {
    v34 = a3;
    v20 = v35;
    v21 = *v19;
    if (qword_10028ADD0 != -1)
      swift_once(&qword_10028ADD0, sub_100046D50);
    v22 = type metadata accessor for Logger(0);
    sub_100005288(v22, (uint64_t)qword_1002A89F0);
    swift_errorRetain(v21);
    v23 = swift_errorRetain(v21);
    v24 = Logger.logObject.getter(v23);
    v25 = static os_log_type_t.error.getter(v24);
    if (os_log_type_enabled(v24, v25))
    {
      v26 = (uint8_t *)swift_slowAlloc(12, -1);
      v27 = swift_slowAlloc(32, -1);
      v36 = v21;
      v37[0] = v27;
      *(_DWORD *)v26 = 136315138;
      swift_errorRetain(v21);
      v28 = sub_1000080B4(&qword_10028E850);
      v29 = String.init<A>(describing:)(&v36, v28);
      v31 = v30;
      v36 = sub_1001DEF4C(v29, v30, v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, v37);
      swift_bridgeObjectRelease(v31);
      swift_errorRelease(v21);
      swift_errorRelease(v21);
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Error fetching beneficiaries for removal: %s", v26, 0xCu);
      swift_arrayDestroy(v27, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v27, -1, -1);
      swift_slowDealloc(v26, -1, -1);
    }
    else
    {
      swift_errorRelease(v21);
      swift_errorRelease(v21);
    }

    swift_errorRetain(v21);
    v20(v21);
    swift_errorRelease(v21);
    return swift_errorRelease(v21);
  }
  else
  {
    sub_10003B730((uint64_t)v19, (uint64_t)v15, type metadata accessor for BeneficiaryInfoRecord);
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, a4 + OBJC_IVAR____TtC13appleaccountd28InheritanceCleanupController__storageController, v7);
    Dependency.wrappedValue.getter(v37, v7);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
    sub_10000732C(v37, v37[3]);
    v32 = swift_allocObject(&unk_10026C2F0, 32, 7);
    *(_QWORD *)(v32 + 16) = v35;
    *(_QWORD *)(v32 + 24) = a3;
    swift_retain(a3);
    sub_1000CB6A4((uint64_t)v15, (uint64_t)sub_1001864E4, v32);
    swift_release(v32);
    sub_100028388((uint64_t)v15, type metadata accessor for BeneficiaryInfoRecord);
    return sub_100006F58(v37);
  }
}

uint64_t sub_100184E60(uint64_t a1, void (*a2)(uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  void (*v20)(uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v34;
  void (*v35)(uint64_t);
  uint64_t v36;
  uint64_t v37[5];

  v35 = a2;
  v7 = sub_1000080B4((uint64_t *)&unk_100295380);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for BenefactorInfoRecord(0);
  __chkstk_darwin(v12, v13);
  v15 = (char *)&v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_1000080B4((uint64_t *)&unk_10028FA40);
  __chkstk_darwin(v16, v17);
  v19 = (uint64_t *)((char *)&v34 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100024A20(a1, (uint64_t)v19, (uint64_t *)&unk_10028FA40);
  if (swift_getEnumCaseMultiPayload(v19, v16) == 1)
  {
    v34 = a3;
    v20 = v35;
    v21 = *v19;
    if (qword_10028ADD0 != -1)
      swift_once(&qword_10028ADD0, sub_100046D50);
    v22 = type metadata accessor for Logger(0);
    sub_100005288(v22, (uint64_t)qword_1002A89F0);
    swift_errorRetain(v21);
    v23 = swift_errorRetain(v21);
    v24 = Logger.logObject.getter(v23);
    v25 = static os_log_type_t.error.getter(v24);
    if (os_log_type_enabled(v24, v25))
    {
      v26 = (uint8_t *)swift_slowAlloc(12, -1);
      v27 = swift_slowAlloc(32, -1);
      v36 = v21;
      v37[0] = v27;
      *(_DWORD *)v26 = 136315138;
      swift_errorRetain(v21);
      v28 = sub_1000080B4(&qword_10028E850);
      v29 = String.init<A>(describing:)(&v36, v28);
      v31 = v30;
      v36 = sub_1001DEF4C(v29, v30, v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, v37);
      swift_bridgeObjectRelease(v31);
      swift_errorRelease(v21);
      swift_errorRelease(v21);
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Error fetching benefactors for removal: %s", v26, 0xCu);
      swift_arrayDestroy(v27, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v27, -1, -1);
      swift_slowDealloc(v26, -1, -1);
    }
    else
    {
      swift_errorRelease(v21);
      swift_errorRelease(v21);
    }

    swift_errorRetain(v21);
    v20(v21);
    swift_errorRelease(v21);
    return swift_errorRelease(v21);
  }
  else
  {
    sub_10003B730((uint64_t)v19, (uint64_t)v15, type metadata accessor for BenefactorInfoRecord);
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, a4 + OBJC_IVAR____TtC13appleaccountd28InheritanceCleanupController__storageController, v7);
    Dependency.wrappedValue.getter(v37, v7);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
    sub_10000732C(v37, v37[3]);
    v32 = swift_allocObject(&unk_10026C1B0, 32, 7);
    *(_QWORD *)(v32 + 16) = v35;
    *(_QWORD *)(v32 + 24) = a3;
    swift_retain(a3);
    sub_1000CD794((uint64_t)v15, (uint64_t)sub_100186428, v32);
    swift_release(v32);
    sub_100028388((uint64_t)v15, type metadata accessor for BenefactorInfoRecord);
    return sub_100006F58(v37);
  }
}

uint64_t sub_1001851FC(uint64_t a1)
{
  uint64_t v1;

  return sub_100184E60(a1, *(void (**)(uint64_t))(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_100185208(uint64_t a1, void (*a2)(uint64_t), uint64_t a3, const char *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;

  v7 = sub_1000080B4((uint64_t *)&unk_10028CD50);
  __chkstk_darwin(v7, v8);
  v10 = (uint64_t *)((char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100024A20(a1, (uint64_t)v10, (uint64_t *)&unk_10028CD50);
  if (swift_getEnumCaseMultiPayload(v10, v7) == 1)
  {
    v11 = *v10;
    if (qword_10028ADD0 != -1)
      swift_once(&qword_10028ADD0, sub_100046D50);
    v12 = type metadata accessor for Logger(0);
    sub_100005288(v12, (uint64_t)qword_1002A89F0);
    swift_errorRetain(v11);
    v13 = swift_errorRetain(v11);
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.error.getter(v14);
    if (os_log_type_enabled(v14, v15))
    {
      v24 = a4;
      v16 = (uint8_t *)swift_slowAlloc(12, -1);
      v17 = swift_slowAlloc(32, -1);
      v25 = v11;
      v26 = v17;
      *(_DWORD *)v16 = 136315138;
      swift_errorRetain(v11);
      v18 = sub_1000080B4(&qword_10028E850);
      v19 = String.init<A>(describing:)(&v25, v18);
      v21 = v20;
      v25 = sub_1001DEF4C(v19, v20, &v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26);
      swift_bridgeObjectRelease(v21);
      swift_errorRelease(v11);
      swift_errorRelease(v11);
      _os_log_impl((void *)&_mh_execute_header, v14, v15, v24, v16, 0xCu);
      swift_arrayDestroy(v17, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v17, -1, -1);
      swift_slowDealloc(v16, -1, -1);
    }
    else
    {
      swift_errorRelease(v11);
      swift_errorRelease(v11);
    }

    swift_errorRetain(v11);
    a2(v11);
    swift_errorRelease(v11);
    return swift_errorRelease(v11);
  }
  else
  {
    sub_100186448((uint64_t)v10);
    return ((uint64_t (*)(_QWORD))a2)(0);
  }
}

void sub_10018547C(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  unint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  NSObject *v54;
  os_log_type_t v55;
  uint8_t *v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  void (*v61)(uint64_t);
  unint64_t v62;
  void *v63;
  uint64_t v64;
  void *v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  void (*v72)(uint64_t);
  uint64_t v73;
  uint64_t v74;
  uint64_t v75[5];

  v72 = a3;
  v68 = a2;
  v8 = sub_1000080B4((uint64_t *)&unk_100295380);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v12 = (char *)&v64 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for InheritanceInvitationRecord(0);
  __chkstk_darwin(v13, v14);
  v16 = (char *)&v64 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for UUID(0);
  v18 = *(_QWORD *)(v17 - 8);
  v70 = v17;
  v71 = v18;
  __chkstk_darwin(v17, v19);
  v69 = (char *)&v64 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_1000080B4((uint64_t *)&unk_10028FA70);
  __chkstk_darwin(v21, v22);
  v24 = (uint64_t *)((char *)&v64 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100024A20(a1, (uint64_t)v24, (uint64_t *)&unk_10028FA70);
  if (swift_getEnumCaseMultiPayload(v24, v21) != 1)
  {
    sub_10003B730((uint64_t)v24, (uint64_t)v16, type metadata accessor for InheritanceInvitationRecord);
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, a5 + OBJC_IVAR____TtC13appleaccountd28InheritanceCleanupController__storageController, v8);
    Dependency.wrappedValue.getter(v75, v8);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    sub_10000732C(v75, v75[3]);
    v51 = swift_allocObject(&unk_10026C368, 32, 7);
    *(_QWORD *)(v51 + 16) = v72;
    *(_QWORD *)(v51 + 24) = a4;
    swift_retain(a4);
    sub_1000C9BD0((uint64_t)v16, (uint64_t)sub_1001866D4, v51);
    swift_release(v51);
    sub_100028388((uint64_t)v16, type metadata accessor for InheritanceInvitationRecord);
    sub_100006F58(v75);
    return;
  }
  v67 = a4;
  v75[0] = *v24;
  v25 = v75[0];
  swift_errorRetain(v75[0]);
  v26 = sub_1000080B4(&qword_10028E850);
  type metadata accessor for InheritanceError(0);
  v28 = v27;
  if ((swift_dynamicCast(&v74, v75, v26, v27, 6) & 1) != 0)
  {
    v29 = (void *)v74;
    v75[0] = v74;
    v73 = 3;
    v30 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
    v31 = sub_100005150(&qword_10028B350, (uint64_t (*)(uint64_t))type metadata accessor for InheritanceError, (uint64_t)&unk_100216D64);
    _BridgedStoredNSError.init(_:userInfo:)(&v74, &v73, v30, v28, v31);
    v32 = (void *)v74;
    v73 = v74;
    LOBYTE(v30) = static _BridgedStoredNSError.== infix(_:_:)(v75, &v73, v28, v31);

    if ((v30 & 1) != 0)
    {
      if (qword_10028ADD0 != -1)
        swift_once(&qword_10028ADD0, sub_100046D50);
      v33 = type metadata accessor for Logger(0);
      sub_100005288(v33, (uint64_t)qword_1002A89F0);
      v35 = v70;
      v34 = v71;
      v36 = v69;
      v37 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v71 + 16))(v69, v68, v70);
      v38 = Logger.logObject.getter(v37);
      v39 = static os_log_type_t.info.getter();
      v40 = v39;
      if (os_log_type_enabled(v38, v39))
      {
        v41 = swift_slowAlloc(22, -1);
        v68 = swift_slowAlloc(64, -1);
        v75[0] = v68;
        *(_DWORD *)v41 = 136315394;
        v74 = type metadata accessor for InheritanceCleanupController(0);
        v42 = sub_1000080B4((uint64_t *)&unk_100295620);
        v65 = v29;
        v43 = String.init<A>(describing:)(&v74, v42);
        v66 = v40;
        v45 = v44;
        v74 = sub_1001DEF4C(v43, v44, v75);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, v75);
        swift_bridgeObjectRelease(v45);
        *(_WORD *)(v41 + 12) = 2080;
        v46 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v47 = dispatch thunk of CustomStringConvertible.description.getter(v35, v46);
        v49 = v48;
        v74 = sub_1001DEF4C(v47, v48, v75);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, v75);
        swift_bridgeObjectRelease(v49);
        v29 = v65;
        (*(void (**)(char *, uint64_t))(v71 + 8))(v36, v35);
        _os_log_impl((void *)&_mh_execute_header, v38, (os_log_type_t)v66, "%s: There is no InheritanceInvitationRecord for beneficiaryID - %s.", (uint8_t *)v41, 0x16u);
        v50 = v68;
        swift_arrayDestroy(v68, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v50, -1, -1);
        swift_slowDealloc(v41, -1, -1);
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v34 + 8))(v36, v35);
      }

      v74 = 11;
      v62 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
      _BridgedStoredNSError.init(_:userInfo:)(v75, &v74, v62, v28, v31);
      v63 = (void *)v75[0];
      v72(v75[0]);
      swift_errorRelease(v25);

      return;
    }

  }
  if (qword_10028ADD0 != -1)
    swift_once(&qword_10028ADD0, sub_100046D50);
  v52 = type metadata accessor for Logger(0);
  sub_100005288(v52, (uint64_t)qword_1002A89F0);
  swift_errorRetain(v25);
  v53 = swift_errorRetain(v25);
  v54 = Logger.logObject.getter(v53);
  v55 = static os_log_type_t.error.getter(v54);
  if (os_log_type_enabled(v54, v55))
  {
    v56 = (uint8_t *)swift_slowAlloc(12, -1);
    v57 = swift_slowAlloc(32, -1);
    v74 = v25;
    v75[0] = v57;
    *(_DWORD *)v56 = 136315138;
    swift_errorRetain(v25);
    v58 = String.init<A>(describing:)(&v74, v26);
    v60 = v59;
    v74 = sub_1001DEF4C(v58, v59, v75);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, v75);
    swift_bridgeObjectRelease(v60);
    swift_errorRelease(v25);
    swift_errorRelease(v25);
    _os_log_impl((void *)&_mh_execute_header, v54, v55, "Error fetching invitation for removal: %s", v56, 0xCu);
    swift_arrayDestroy(v57, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v57, -1, -1);
    swift_slowDealloc(v56, -1, -1);
  }
  else
  {
    swift_errorRelease(v25);
    swift_errorRelease(v25);
  }

  v61 = v72;
  swift_errorRetain(v25);
  v61(v25);
  swift_errorRelease(v25);
  swift_errorRelease(v25);
}

void sub_100185B70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  unint64_t v28;
  uint64_t v29;
  void *v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  NSObject *v50;
  os_log_type_t v51;
  uint8_t *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62[5];

  v57 = a2;
  v5 = sub_1000080B4((uint64_t *)&unk_100295380);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  v9 = (char *)&v57 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for InheritanceHealthRecord(0);
  __chkstk_darwin(v10, v11);
  v13 = (char *)&v57 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for UUID(0);
  v15 = *(_QWORD *)(v14 - 8);
  v58 = v14;
  v59 = v15;
  __chkstk_darwin(v14, v16);
  v18 = (char *)&v57 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_1000080B4((uint64_t *)&unk_100295390);
  __chkstk_darwin(v19, v20);
  v22 = (uint64_t *)((char *)&v57 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100024A20(a1, (uint64_t)v22, (uint64_t *)&unk_100295390);
  if (swift_getEnumCaseMultiPayload(v22, v19) != 1)
  {
    sub_10003B730((uint64_t)v22, (uint64_t)v13, type metadata accessor for InheritanceHealthRecord);
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, a3 + OBJC_IVAR____TtC13appleaccountd28InheritanceCleanupController__storageController, v5);
    Dependency.wrappedValue.getter(v62, v5);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    sub_10000732C(v62, v62[3]);
    sub_1000CEB44((uint64_t)v13, (uint64_t)sub_1001861B8, 0);
    sub_100028388((uint64_t)v13, type metadata accessor for InheritanceHealthRecord);
    sub_100006F58(v62);
    return;
  }
  v62[0] = *v22;
  v23 = v62[0];
  swift_errorRetain(v62[0]);
  v24 = sub_1000080B4(&qword_10028E850);
  type metadata accessor for InheritanceError(0);
  v26 = v25;
  if ((swift_dynamicCast(&v61, v62, v24, v25, 6) & 1) != 0)
  {
    v27 = (void *)v61;
    v62[0] = v61;
    v60 = 3;
    v28 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
    v29 = sub_100005150(&qword_10028B350, (uint64_t (*)(uint64_t))type metadata accessor for InheritanceError, (uint64_t)&unk_100216D64);
    _BridgedStoredNSError.init(_:userInfo:)(&v61, &v60, v28, v26, v29);
    v30 = (void *)v61;
    v60 = v61;
    v31 = static _BridgedStoredNSError.== infix(_:_:)(v62, &v60, v26, v29);

    if ((v31 & 1) != 0)
    {
      if (qword_10028ADD0 != -1)
        swift_once(&qword_10028ADD0, sub_100046D50);
      v32 = type metadata accessor for Logger(0);
      sub_100005288(v32, (uint64_t)qword_1002A89F0);
      v33 = v58;
      v34 = v59;
      v35 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v59 + 16))(v18, v57, v58);
      v36 = Logger.logObject.getter(v35);
      v37 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v36, v37))
      {
        v38 = swift_slowAlloc(22, -1);
        v57 = swift_slowAlloc(64, -1);
        v62[0] = v57;
        *(_DWORD *)v38 = 136315394;
        v61 = type metadata accessor for InheritanceCleanupController(0);
        v39 = sub_1000080B4((uint64_t *)&unk_100295620);
        v40 = String.init<A>(describing:)(&v61, v39);
        v42 = v41;
        v61 = sub_1001DEF4C(v40, v41, v62);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v61, v62);
        swift_bridgeObjectRelease(v42);
        *(_WORD *)(v38 + 12) = 2080;
        v43 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v44 = dispatch thunk of CustomStringConvertible.description.getter(v33, v43);
        v46 = v45;
        v61 = sub_1001DEF4C(v44, v45, v62);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v61, v62);
        swift_bridgeObjectRelease(v46);
        (*(void (**)(char *, uint64_t))(v59 + 8))(v18, v33);
        _os_log_impl((void *)&_mh_execute_header, v36, v37, "%s: There is no InheritanceHealthRecord for beneficiaryID - %s.", (uint8_t *)v38, 0x16u);
        v47 = v57;
        swift_arrayDestroy(v57, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v47, -1, -1);
        swift_slowDealloc(v38, -1, -1);

LABEL_14:
        swift_errorRelease(v23);
        return;
      }
      swift_errorRelease(v23);
      (*(void (**)(char *, uint64_t))(v34 + 8))(v18, v33);

      return;
    }

  }
  if (qword_10028ADD0 != -1)
    swift_once(&qword_10028ADD0, sub_100046D50);
  v48 = type metadata accessor for Logger(0);
  sub_100005288(v48, (uint64_t)qword_1002A89F0);
  swift_errorRetain(v23);
  v49 = swift_errorRetain(v23);
  v50 = Logger.logObject.getter(v49);
  v51 = static os_log_type_t.error.getter(v50);
  if (os_log_type_enabled(v50, v51))
  {
    v52 = (uint8_t *)swift_slowAlloc(12, -1);
    v53 = swift_slowAlloc(32, -1);
    v61 = v23;
    v62[0] = v53;
    *(_DWORD *)v52 = 136315138;
    swift_errorRetain(v23);
    v54 = String.init<A>(describing:)(&v61, v24);
    v56 = v55;
    v61 = sub_1001DEF4C(v54, v55, v62);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v61, v62);
    swift_bridgeObjectRelease(v56);
    swift_errorRelease(v23);
    swift_errorRelease(v23);
    _os_log_impl((void *)&_mh_execute_header, v50, v51, "Error fetching Health Record for removal: %s", v52, 0xCu);
    swift_arrayDestroy(v53, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v53, -1, -1);
    swift_slowDealloc(v52, -1, -1);

    goto LABEL_14;
  }
  swift_errorRelease(v23);
  swift_errorRelease(v23);
  swift_errorRelease(v23);

}

void sub_1001861B8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v2 = sub_1000080B4((uint64_t *)&unk_10028CD50);
  __chkstk_darwin(v2, v3);
  v5 = (uint64_t *)((char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100024A20(a1, (uint64_t)v5, (uint64_t *)&unk_10028CD50);
  if (swift_getEnumCaseMultiPayload(v5, v2) == 1)
  {
    v6 = *v5;
    if (qword_10028ADD0 != -1)
      swift_once(&qword_10028ADD0, sub_100046D50);
    v7 = type metadata accessor for Logger(0);
    sub_100005288(v7, (uint64_t)qword_1002A89F0);
    swift_errorRetain(v6);
    v8 = swift_errorRetain(v6);
    v9 = Logger.logObject.getter(v8);
    v10 = static os_log_type_t.error.getter(v9);
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc(12, -1);
      v12 = swift_slowAlloc(32, -1);
      v17 = v6;
      v18 = v12;
      *(_DWORD *)v11 = 136315138;
      swift_errorRetain(v6);
      v13 = sub_1000080B4(&qword_10028E850);
      v14 = String.init<A>(describing:)(&v17, v13);
      v16 = v15;
      v17 = sub_1001DEF4C(v14, v15, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, &v18);
      swift_bridgeObjectRelease(v16);
      swift_errorRelease(v6);
      swift_errorRelease(v6);
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Error removing the Health Record: %s", v11, 0xCu);
      swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v12, -1, -1);
      swift_slowDealloc(v11, -1, -1);

      swift_errorRelease(v6);
    }
    else
    {
      swift_errorRelease(v6);
      swift_errorRelease(v6);
      swift_errorRelease(v6);

    }
  }
  else
  {
    sub_100186448((uint64_t)v5);
  }
}

uint64_t sub_100186404()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100186428(uint64_t a1)
{
  uint64_t v1;

  return sub_100185208(a1, *(void (**)(uint64_t))(v1 + 16), *(_QWORD *)(v1 + 24), "Error removing the benefactor: %s");
}

uint64_t sub_100186448(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1000080B4((uint64_t *)&unk_10028CD50);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100186488()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001864B8(uint64_t a1)
{
  return sub_100186590(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, char *))sub_100183F84);
}

uint64_t sub_1001864C8(uint64_t a1)
{
  return sub_100186590(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, char *))sub_100184434);
}

uint64_t sub_1001864D8(uint64_t a1)
{
  uint64_t v1;

  return sub_100184AC8(a1, *(void (**)(uint64_t))(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_1001864E4(uint64_t a1)
{
  uint64_t v1;

  return sub_100185208(a1, *(void (**)(uint64_t))(v1 + 16), *(_QWORD *)(v1 + 24), "Error removing the beneficiary: %s");
}

uint64_t sub_100186508()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100186584(uint64_t a1)
{
  return sub_100186590(a1, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, char *))sub_10018394C);
}

uint64_t sub_100186590(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD, _QWORD, _QWORD, char *))
{
  char *v2;
  uint64_t v4;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UUID(0) - 8) + 80);
  return a2(a1, *((_QWORD *)v2 + 2), *((_QWORD *)v2 + 3), *((_QWORD *)v2 + 4), &v2[(v4 + 40) & ~v4]);
}

uint64_t sub_1001865E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 23) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v6 + 8));
  swift_release(*(_QWORD *)(v0 + v7));
  return swift_deallocObject(v0, v7 + 8, v5);
}

void sub_100186674(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v3 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_10018547C(a1, v1 + v4, *(void (**)(uint64_t))(v1 + v5), *(_QWORD *)(v1 + v5 + 8), *(_QWORD *)(v1 + ((v5 + 23) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_1001866D4(uint64_t a1)
{
  uint64_t v1;

  return sub_100185208(a1, *(void (**)(uint64_t))(v1 + 16), *(_QWORD *)(v1 + 24), "Error removing the invitation: %s");
}

uint64_t sub_1001866F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v6));
  return swift_deallocObject(v0, v6 + 8, v5);
}

void sub_100186768(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;

  v3 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  sub_100185B70(a1, v1 + v4, *(_QWORD *)(v1 + ((*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_1001867B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, void *a6, void *a7, uint64_t (*a8)(uint64_t), uint64_t a9)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  _QWORD *v25;
  void (*v26)(uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(char *, uint64_t, uint64_t);
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  id v52;
  NSString v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  NSString v58;
  id v59;
  Class isa;
  id v61;
  NSObject *v62;
  os_log_type_t v63;
  uint8_t *v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t v77;
  void (**v78)(uint64_t);
  void (*v79)(uint64_t);
  void *v80;
  uint64_t v81;
  id v83;
  id v84;
  uint64_t v85;
  id v86;
  uint64_t v87;
  NSObject *v88;
  os_log_type_t v89;
  uint8_t *v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  void *v95;
  id v96;
  uint64_t v97;
  uint64_t (*v98)(char *, uint64_t, uint64_t);
  uint64_t v99;
  id v100;
  id v101;
  id v102;
  uint64_t (*v103)(uint64_t);
  uint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  void (*v113)(uint64_t);
  _QWORD *v114;
  uint64_t v115;
  uint64_t aBlock[5];
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;

  v110 = a4;
  v111 = a2;
  v115 = a3;
  v14 = sub_1000080B4(&qword_100295370);
  v106 = *(_QWORD *)(v14 - 8);
  v107 = v14;
  __chkstk_darwin(v14, v15);
  v105 = (char *)&v98 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for UUID(0);
  v18 = *(_QWORD *)(v17 - 8);
  v20 = __chkstk_darwin(v17, v19);
  v108 = v21;
  v109 = (char *)&v98 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20, v22);
  v24 = (char *)&v98 - v23;
  v25 = (_QWORD *)swift_allocObject(&unk_10026C3B8, 40, 7);
  v25[2] = a7;
  v25[3] = a8;
  v103 = a8;
  v25[4] = a9;
  v26 = (void (*)(uint64_t))swift_allocObject(&unk_10026C3E0, 48, 7);
  *((_QWORD *)v26 + 2) = sub_100187000;
  *((_QWORD *)v26 + 3) = v25;
  *((_QWORD *)v26 + 4) = a5;
  *((_QWORD *)v26 + 5) = a6;
  v113 = v26;
  v27 = qword_10028ADD0;
  v102 = a7;
  v104 = a9;
  swift_retain(a9);
  v114 = v25;
  swift_retain(v25);
  v101 = a5;
  v100 = a6;
  if (v27 != -1)
    swift_once(&qword_10028ADD0, sub_100046D50);
  v28 = type metadata accessor for Logger(0);
  v29 = sub_100005288(v28, (uint64_t)qword_1002A89F0);
  v30 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 16);
  v31 = v30(v24, a1, v17);
  v112 = v29;
  v32 = Logger.logObject.getter(v31);
  v33 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v32, v33))
  {
    v34 = swift_slowAlloc(22, -1);
    v99 = a1;
    v35 = v34;
    v36 = swift_slowAlloc(64, -1);
    v98 = v30;
    v37 = v36;
    aBlock[0] = v36;
    *(_DWORD *)v35 = 136315394;
    v118 = type metadata accessor for InheritanceCleanupController(0);
    v38 = sub_1000080B4((uint64_t *)&unk_100295620);
    v39 = String.init<A>(describing:)(&v118, v38);
    v41 = v40;
    v118 = sub_1001DEF4C(v39, v40, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v118, &v119);
    swift_bridgeObjectRelease(v41);
    *(_WORD *)(v35 + 12) = 2080;
    v42 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v43 = dispatch thunk of CustomStringConvertible.description.getter(v17, v42);
    v45 = v44;
    v118 = sub_1001DEF4C(v43, v44, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v118, &v119);
    swift_bridgeObjectRelease(v45);
    v46 = v17;
    (*(void (**)(char *, uint64_t))(v18 + 8))(v24, v17);
    _os_log_impl((void *)&_mh_execute_header, v32, v33, "%s: Starting cleanup for beneficiary with beneficiaryID - %s", (uint8_t *)v35, 0x16u);
    swift_arrayDestroy(v37, 2, (char *)&type metadata for Any + 8);
    v47 = v37;
    v30 = v98;
    swift_slowDealloc(v47, -1, -1);
    v48 = v35;
    a1 = v99;
    swift_slowDealloc(v48, -1, -1);
  }
  else
  {
    v46 = v17;
    (*(void (**)(char *, uint64_t))(v18 + 8))(v24, v17);
  }

  v49 = v18;
  v50 = v115;
  if (v115)
  {
    v51 = v115;
LABEL_8:
    v52 = objc_allocWithZone((Class)AKInheritanceContext);
    swift_bridgeObjectRetain(v50);
    v53 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v51);
    v54 = objc_msgSend(v52, "initWithOwnerAltDSID:", v53);

    UUID.uuidString.getter(v55);
    v57 = v56;
    v58 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v57);
    objc_msgSend(v54, "setBeneficiaryIdentifier:", v58);

    v59 = objc_allocWithZone((Class)AKInheritanceAccessKey);
    isa = UUID._bridgeToObjectiveC()().super.isa;
    v61 = objc_msgSend(v59, "initWithBeneficiairyIdentifier:", isa);

    objc_msgSend(v54, "setAccessKey:", v61);
    v62 = Logger.logObject.getter(objc_msgSend(v54, "setManifest:", 0));
    v63 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v62, v63))
    {
      v64 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v64 = 0;
      _os_log_impl((void *)&_mh_execute_header, v62, v63, "Removing Beneficiary from IDMS...", v64, 2u);
      swift_slowDealloc(v64, -1, -1);
    }

    v65 = v110;
    v66 = v105;
    v67 = v106;
    v68 = v107;
    (*(void (**)(char *, uint64_t, uint64_t))(v106 + 16))(v105, v110 + OBJC_IVAR____TtC13appleaccountd28InheritanceCleanupController__requestController, v107);
    Dependency.wrappedValue.getter(aBlock, v68);
    (*(void (**)(char *, uint64_t))(v67 + 8))(v66, v68);
    v69 = (void *)aBlock[0];
    v70 = swift_allocObject(&unk_10026C1D8, 24, 7);
    swift_weakInit(v70 + 16, v65);
    v71 = v109;
    v72 = v46;
    v30(v109, a1, v46);
    v73 = *(unsigned __int8 *)(v49 + 80);
    v74 = (v73 + 16) & ~v73;
    v75 = (v108 + v74 + 7) & 0xFFFFFFFFFFFFFFF8;
    v76 = (v75 + 15) & 0xFFFFFFFFFFFFFFF8;
    v77 = swift_allocObject(&unk_10026C408, v76 + 16, v73 | 7);
    (*(void (**)(uint64_t, char *, uint64_t))(v49 + 32))(v77 + v74, v71, v72);
    *(_QWORD *)(v77 + v75) = v70;
    v78 = (void (**)(uint64_t))(v77 + v76);
    v79 = v113;
    *v78 = sub_100187040;
    v78[1] = v79;
    aBlock[4] = (uint64_t)sub_1001864B0;
    v117 = v77;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_1001DC548;
    aBlock[3] = (uint64_t)&unk_10026C420;
    v80 = _Block_copy(aBlock);
    v81 = v117;
    swift_retain(v79);
    swift_release(v81);
    objc_msgSend(v69, "removeBeneficiaryWithInheritanceContext:completion:", v54, v80);
    _Block_release(v80);
    swift_release(v114);
    swift_release(v79);

    return swift_unknownObjectRelease(v69);
  }
  v83 = objc_msgSend(objc_allocWithZone((Class)ACAccountStore), "init");
  v84 = objc_msgSend(v83, "aa_primaryAppleAccount");

  if (v84)
  {
    v86 = objc_msgSend(v84, "aa_altDSID");

    if (v86)
    {
      v111 = static String._unconditionallyBridgeFromObjectiveC(_:)(v86);
      v51 = v87;

      goto LABEL_8;
    }
  }
  v88 = Logger.logObject.getter(v85);
  v89 = static os_log_type_t.error.getter(v88);
  if (os_log_type_enabled(v88, v89))
  {
    v90 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v90 = 0;
    _os_log_impl((void *)&_mh_execute_header, v88, v89, "No altDSID for owner found.", v90, 2u);
    swift_slowDealloc(v90, -1, -1);
  }

  type metadata accessor for InheritanceError(0);
  v92 = v91;
  v118 = 5;
  v93 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
  v94 = sub_100005150(&qword_10028B350, (uint64_t (*)(uint64_t))type metadata accessor for InheritanceError, (uint64_t)&unk_100216D64);
  _BridgedStoredNSError.init(_:userInfo:)(aBlock, &v118, v93, v92, v94);
  v95 = (void *)aBlock[0];
  v96 = v102;
  v97 = v104;
  swift_retain(v104);
  sub_1000B8190((uint64_t)v95, v101, (uint64_t)v100, v96, v103, v97);
  swift_release(v114);
  swift_release(v113);

  return swift_release(v97);
}

uint64_t sub_100186FD4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100187000(uint64_t a1)
{
  uint64_t v1;

  return sub_1000ACD0C(a1, *(_QWORD *)(v1 + 16), *(uint64_t (**)(uint64_t))(v1 + 24));
}

uint64_t sub_10018700C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));

  return swift_deallocObject(v0, 48, 7);
}

void sub_100187040(uint64_t a1)
{
  uint64_t v1;

  sub_1000ACD80(a1, *(uint64_t (**)(uint64_t))(v1 + 16), *(_QWORD *)(v1 + 24), *(void **)(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t sub_100187050()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v6));
  swift_release(*(_QWORD *)(v0 + v7 + 8));
  return swift_deallocObject(v0, v7 + 16, v5);
}

uint64_t sub_1001870E0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v3 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_100182D24(a1, v1 + v4, *(_QWORD *)(v1 + v5), *(_QWORD *)(v1 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v1 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_100187158(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  void *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  _QWORD aBlock[5];
  uint64_t v30;

  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v27 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v5);
  v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v25 = *(_QWORD *)(v8 - 8);
  v26 = v8;
  __chkstk_darwin(v8, v9);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchQoS.QoSClass(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12, v14);
  v16 = (char *)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100007764();
  (*(void (**)(char *, _QWORD, uint64_t))(v13 + 104))(v16, enum case for DispatchQoS.QoSClass.default(_:), v12);
  v17 = (void *)static OS_dispatch_queue.global(qos:)(v16);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
  v18 = swift_allocObject(&unk_10026C468, 32, 7);
  *(_QWORD *)(v18 + 16) = a1;
  *(_QWORD *)(v18 + 24) = a2;
  aBlock[4] = sub_100187478;
  v30 = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000051D0;
  aBlock[3] = &unk_10026C480;
  v19 = _Block_copy(aBlock);
  swift_retain(a1);
  v20 = swift_retain(a2);
  static DispatchQoS.unspecified.getter(v20);
  v28 = &_swiftEmptyArrayStorage;
  v21 = sub_1000C3D30();
  v22 = sub_1000080B4((uint64_t *)&unk_100295A00);
  v23 = sub_100008628();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v28, v22, v23, v4, v21);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v11, v7, v19);
  _Block_release(v19);

  (*(void (**)(char *, uint64_t))(v27 + 8))(v7, v4);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v11, v26);
  return swift_release(v30);
}

uint64_t sub_10018739C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  _BYTE v6[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v6, 0, 0);
  result = swift_weakLoadStrong(v2);
  if (result)
  {
    v4 = result;
    v5 = *(_QWORD *)(result + 16);
    swift_retain(v5);
    result = swift_release(v4);
    if (v5)
    {
      sub_10002B13C();
      return swift_release(v5);
    }
  }
  return result;
}

uint64_t sub_100187408()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocClassInstance(v0, 24, 7);
}

uint64_t type metadata accessor for DaemonActivityScheduler()
{
  return objc_opt_self(_TtC13appleaccountd23DaemonActivityScheduler);
}

uint64_t sub_10018744C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100187478()
{
  uint64_t v0;

  return sub_10018739C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_100187480(uint64_t a1, uint64_t a2, char a3, uint64_t (*a4)(void))
{
  uint64_t result;

  switch(a3)
  {
    case 4:
      return sub_10002B6C0();
    case 3:
      return sub_10002B6A8();
    case 2:
      return a4();
  }
  return result;
}

BOOL sub_1001874D4(char *a1, char *a2)
{
  return qword_10021FC48[*a1] == qword_10021FC48[*a2];
}

Swift::Int sub_1001874F8()
{
  char *v0;
  uint64_t v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(qword_10021FC48[v1]);
  return Hasher._finalize()();
}

void sub_100187544()
{
  char *v0;

  Hasher._combine(_:)(qword_10021FC48[*v0]);
}

Swift::Int sub_100187578()
{
  char *v0;
  uint64_t v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(qword_10021FC48[v1]);
  return Hasher._finalize()();
}

uint64_t sub_1001875C0@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = sub_10018877C(*a1);
  *a2 = result;
  return result;
}

void sub_1001875E8(_QWORD *a1@<X8>)
{
  char *v1;

  *a1 = qword_10021FC48[*v1];
}

void sub_100187600(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  id v15;
  id v16;
  uint64_t *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *);
  id v24;
  NSObject *v25;
  __n128 v26;
  os_log_type_t v27;
  uint8_t *v28;
  id v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  __n128 v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  int v41;
  uint64_t v42;
  char v43;
  char v44;
  __n128 v45;
  char v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  NSObject *v50;
  os_log_type_t v51;
  uint8_t *v52;
  const char *v53;
  unint64_t v54;
  char v55;
  int v56;
  __n128 v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  char v61;
  __n128 v62;
  uint64_t v63;
  unint64_t v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  __n128 v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  char v74;
  int v75;
  __n128 v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  char v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  char v84;
  unint64_t v85;
  char v86;
  __n128 v87;
  __int128 v88;
  unint64_t v89;
  char v90;
  __n128 v91;
  char v92;
  unint64_t v93;
  char v94;
  uint64_t v95;
  __n128 v96;
  uint64_t countAndFlagsBits;
  unint64_t v98;
  char v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  NSObject *v108;
  os_log_type_t v109;
  uint8_t *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  _QWORD v120[2];
  uint64_t v121;
  uint64_t v122;
  id v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  _QWORD *v129;
  uint64_t v130;
  Swift::String v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  char v138;
  uint64_t v139;

  v128 = a2;
  v3 = sub_1000080B4(&qword_1002911E0);
  __chkstk_darwin(v3, v4);
  v124 = (uint64_t)v120 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Logger(0);
  v130 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v7);
  v9 = (char *)v120 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for PushMessage(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  v14 = (_QWORD *)((char *)v120 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14[16] = sub_100015894((uint64_t)_swiftEmptyArrayStorage);
  *v14 = a1;
  v15 = a1;
  v16 = objc_msgSend(v15, "userInfo");
  if (!v16)
  {
    __break(1u);
    goto LABEL_111;
  }
  v18 = v16;
  v19 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v16, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);

  v129 = v14;
  v14[2] = v19;
  v20 = qword_10028ADB0;
  v127 = v19;
  swift_bridgeObjectRetain(v19);
  if (v20 != -1)
    swift_once(&qword_10028ADB0, sub_100046CC8);
  v21 = sub_100005288(v6, (uint64_t)qword_1002A8990);
  v22 = v130;
  v23 = *(void (**)(char *))(v130 + 16);
  v126 = v21;
  v23(v9);
  v24 = v15;
  v25 = Logger.logObject.getter(v24);
  v27 = static os_log_type_t.default.getter(v26);
  if (!os_log_type_enabled(v25, v27))
  {

    v36.n128_f64[0] = (*(double (**)(char *, uint64_t))(v22 + 8))(v9, v6);
    goto LABEL_8;
  }
  v125 = v11;
  v122 = v10;
  v28 = (uint8_t *)swift_slowAlloc(12, -1);
  v121 = swift_slowAlloc(32, -1);
  *(_QWORD *)&v134 = v121;
  *(_DWORD *)v28 = 136315138;
  v29 = objc_msgSend(v24, "userInfo");
  v17 = &v139;
  v123 = v24;
  if (!v29)
  {
LABEL_111:

    __break(1u);
    return;
  }
  v30 = v29;
  v120[1] = v28 + 4;
  v31 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v29, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);

  v32 = Dictionary.description.getter(v31, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
  v34 = v33;
  swift_bridgeObjectRelease(v31);
  *(_QWORD *)&v136 = sub_1001DEF4C(v32, v34, (uint64_t *)&v134);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v136, (char *)&v136 + 8);
  v24 = v123;

  swift_bridgeObjectRelease(v34);
  _os_log_impl((void *)&_mh_execute_header, v25, v27, "Received push message with userInfo: %s", v28, 0xCu);
  v35 = v121;
  swift_arrayDestroy(v121, 1, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v35, -1, -1);
  swift_slowDealloc(v28, -1, -1);

  (*(void (**)(char *, uint64_t))(v130 + 8))(v9, v6);
  v10 = v122;
  v11 = v125;
LABEL_8:
  *(_QWORD *)&v136 = 6581603;
  *((_QWORD *)&v136 + 1) = 0xE300000000000000;
  AnyHashable.init<A>(_:)(&v134, &v136, &type metadata for String, &protocol witness table for String, v36);
  v37 = v127;
  v38 = (uint64_t)v129;
  if (*(_QWORD *)(v127 + 16) && (v39 = sub_10010AAE0((uint64_t)&v134), (v40 & 1) != 0))
  {
    sub_1000244B0(*(_QWORD *)(v37 + 56) + 32 * v39, (uint64_t)&v136);
  }
  else
  {
    v136 = 0u;
    v137 = 0u;
  }
  sub_1000839B4((uint64_t)&v134);
  if (*((_QWORD *)&v137 + 1))
  {
    v41 = swift_dynamicCast(&v132, &v136, (char *)&type metadata for Any + 8, &type metadata for Int, 6);
    if (v41)
      v42 = v132;
    else
      v42 = 0;
    v43 = v41 ^ 1;
  }
  else
  {
    sub_100004934((uint64_t)&v136, (uint64_t *)&unk_10028E7E0);
    v42 = 0;
    v43 = 1;
  }
  v44 = sub_1001885E0(v42, v43);
  v46 = v44;
  if (v44 == 6)
  {
    v47 = v37;
    v48 = v24;
    v49 = swift_bridgeObjectRelease(v47);
    v50 = Logger.logObject.getter(v49);
    v51 = static os_log_type_t.error.getter(v50);
    if (os_log_type_enabled(v50, v51))
    {
      v52 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v52 = 0;
      v53 = "Push Message has invalid command. Ignoring";
LABEL_42:
      _os_log_impl((void *)&_mh_execute_header, v50, v51, v53, v52, 2u);
      swift_slowDealloc(v52, -1, -1);
      goto LABEL_43;
    }
    goto LABEL_43;
  }
  *(_BYTE *)(v38 + 8) = v44;
  *(_QWORD *)&v136 = 0x6469736461;
  *((_QWORD *)&v136 + 1) = 0xE500000000000000;
  AnyHashable.init<A>(_:)(&v134, &v136, &type metadata for String, &protocol witness table for String, v45);
  if (*(_QWORD *)(v37 + 16) && (v54 = sub_10010AAE0((uint64_t)&v134), (v55 & 1) != 0))
  {
    sub_1000244B0(*(_QWORD *)(v37 + 56) + 32 * v54, (uint64_t)&v136);
  }
  else
  {
    v136 = 0u;
    v137 = 0u;
  }
  sub_1000839B4((uint64_t)&v134);
  if (*((_QWORD *)&v137 + 1))
  {
    v56 = swift_dynamicCast(&v132, &v136, (char *)&type metadata for Any + 8, &type metadata for String, 6);
    v59 = *((_QWORD *)&v132 + 1);
    v58 = v132;
    if (!v56)
    {
      v58 = 0;
      v59 = 0;
    }
  }
  else
  {
    sub_100004934((uint64_t)&v136, (uint64_t *)&unk_10028E7E0);
    v58 = 0;
    v59 = 0;
  }
  *(_QWORD *)(v38 + 24) = v58;
  *(_QWORD *)(v38 + 32) = v59;
  *(_QWORD *)&v132 = 0x64696E7874;
  *((_QWORD *)&v132 + 1) = 0xE500000000000000;
  AnyHashable.init<A>(_:)(&v134, &v132, &type metadata for String, &protocol witness table for String, v57);
  if (*(_QWORD *)(v37 + 16) && (v60 = sub_10010AAE0((uint64_t)&v134), (v61 & 1) != 0))
  {
    sub_1000244B0(*(_QWORD *)(v37 + 56) + 32 * v60, (uint64_t)&v136);
  }
  else
  {
    v136 = 0u;
    v137 = 0u;
  }
  sub_1000839B4((uint64_t)&v134);
  if (*((_QWORD *)&v137 + 1))
  {
    if ((swift_dynamicCast(&v132, &v136, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) != 0)
    {
      v63 = *((_QWORD *)&v132 + 1);
      *(_QWORD *)(v38 + 40) = v132;
      *(_QWORD *)(v38 + 48) = v63;
      *(_QWORD *)&v136 = 0x79656B6C7275;
      *((_QWORD *)&v136 + 1) = 0xE600000000000000;
      AnyHashable.init<A>(_:)(&v134, &v136, &type metadata for String, &protocol witness table for String, v62);
      if (*(_QWORD *)(v37 + 16) && (v64 = sub_10010AAE0((uint64_t)&v134), (v65 & 1) != 0))
      {
        sub_1000244B0(*(_QWORD *)(v37 + 56) + 32 * v64, (uint64_t)&v136);
      }
      else
      {
        v136 = 0u;
        v137 = 0u;
      }
      sub_1000839B4((uint64_t)&v134);
      if (*((_QWORD *)&v137 + 1))
      {
        v69 = swift_dynamicCast(&v132, &v136, (char *)&type metadata for Any + 8, &type metadata for String, 6);
        v72 = *((_QWORD *)&v132 + 1);
        v71 = v132;
        if (!v69)
        {
          v71 = 0;
          v72 = 0;
        }
      }
      else
      {
        sub_100004934((uint64_t)&v136, (uint64_t *)&unk_10028E7E0);
        v71 = 0;
        v72 = 0;
      }
      *(_QWORD *)(v38 + 56) = v71;
      *(_QWORD *)(v38 + 64) = v72;
      *(_QWORD *)&v136 = 6580589;
      *((_QWORD *)&v136 + 1) = 0xE300000000000000;
      AnyHashable.init<A>(_:)(&v134, &v136, &type metadata for String, &protocol witness table for String, v70);
      if (*(_QWORD *)(v37 + 16) && (v73 = sub_10010AAE0((uint64_t)&v134), (v74 & 1) != 0))
      {
        sub_1000244B0(*(_QWORD *)(v37 + 56) + 32 * v73, (uint64_t)&v136);
      }
      else
      {
        v136 = 0u;
        v137 = 0u;
      }
      sub_1000839B4((uint64_t)&v134);
      if (*((_QWORD *)&v137 + 1))
      {
        v75 = swift_dynamicCast(&v132, &v136, (char *)&type metadata for Any + 8, &type metadata for String, 6);
        v78 = *((_QWORD *)&v132 + 1);
        v77 = v132;
        if (!v75)
        {
          v77 = 0;
          v78 = 0;
        }
      }
      else
      {
        sub_100004934((uint64_t)&v136, (uint64_t *)&unk_10028E7E0);
        v77 = 0;
        v78 = 0;
      }
      *(_QWORD *)(v38 + 72) = v77;
      *(_QWORD *)(v38 + 80) = v78;
      *(_QWORD *)&v132 = 7565409;
      *((_QWORD *)&v132 + 1) = 0xE300000000000000;
      AnyHashable.init<A>(_:)(&v134, &v132, &type metadata for String, &protocol witness table for String, v76);
      if (*(_QWORD *)(v37 + 16) && (v79 = sub_10010AAE0((uint64_t)&v134), (v80 & 1) != 0))
      {
        sub_1000244B0(*(_QWORD *)(v37 + 56) + 32 * v79, (uint64_t)&v136);
      }
      else
      {
        v136 = 0u;
        v137 = 0u;
      }
      sub_1000839B4((uint64_t)&v134);
      if (*((_QWORD *)&v137 + 1))
      {
        v81 = sub_1000080B4(&qword_10028C088);
        if ((swift_dynamicCast(&v132, &v136, (char *)&type metadata for Any + 8, v81, 6) & 1) != 0)
        {
          v82 = v132;
          if ((_QWORD)v132)
          {
            if (*(_QWORD *)(v132 + 16) && (v83 = sub_10010A9E0(0x7472656C61, 0xE500000000000000), (v84 & 1) != 0))
            {
              sub_1000244B0(*(_QWORD *)(v82 + 56) + 32 * v83, (uint64_t)&v134);
            }
            else
            {
              v134 = 0u;
              v135 = 0u;
            }
            swift_bridgeObjectRelease(v82);
            if (*((_QWORD *)&v135 + 1))
            {
              v118 = sub_1000080B4(&qword_10028C088);
              if (swift_dynamicCast(&v136, &v134, (char *)&type metadata for Any + 8, v118, 6))
              {
                v85 = v136;
                goto LABEL_73;
              }
LABEL_72:
              v85 = sub_100015894((uint64_t)_swiftEmptyArrayStorage);
LABEL_73:
              sub_10008C1B4(v85, (uint64_t)&v136);
              v86 = v138;
              v87 = (__n128)v136;
              v88 = v137;
              *(_OWORD *)(v38 + 88) = v136;
              *(_OWORD *)(v38 + 104) = v88;
              *(_BYTE *)(v38 + 120) = v86;
              v131._countAndFlagsBits = 0x706574537478656ELL;
              v131._object = (void *)0xE800000000000000;
              AnyHashable.init<A>(_:)(&v134, &v131, &type metadata for String, &protocol witness table for String, v87);
              if (*(_QWORD *)(v37 + 16) && (v89 = sub_10010AAE0((uint64_t)&v134), (v90 & 1) != 0))
              {
                sub_1000244B0(*(_QWORD *)(v37 + 56) + 32 * v89, (uint64_t)&v132);
              }
              else
              {
                v132 = 0u;
                v133 = 0u;
              }
              sub_1000839B4((uint64_t)&v134);
              if (*((_QWORD *)&v133 + 1))
              {
                if ((swift_dynamicCast(&v131, &v132, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) != 0)
                {
                  v92 = sub_10019AE80(v131);
LABEL_82:
                  *(_BYTE *)(v38 + 121) = v92;
                  v131._countAndFlagsBits = 0x61746164756663;
                  v131._object = (void *)0xE700000000000000;
                  AnyHashable.init<A>(_:)(&v134, &v131, &type metadata for String, &protocol witness table for String, v91);
                  if (*(_QWORD *)(v37 + 16) && (v93 = sub_10010AAE0((uint64_t)&v134), (v94 & 1) != 0))
                  {
                    sub_1000244B0(*(_QWORD *)(v37 + 56) + 32 * v93, (uint64_t)&v132);
                  }
                  else
                  {
                    v132 = 0u;
                    v133 = 0u;
                  }
                  sub_1000839B4((uint64_t)&v134);
                  if (*((_QWORD *)&v133 + 1))
                  {
                    v95 = sub_1000080B4(&qword_10028C088);
                    if ((swift_dynamicCast(&v131, &v132, (char *)&type metadata for Any + 8, v95, 6) & 1) != 0)
                    {
                      countAndFlagsBits = v131._countAndFlagsBits;
                      swift_bridgeObjectRelease(*(_QWORD *)(v38 + 128));
                      *(_QWORD *)(v38 + 128) = countAndFlagsBits;
                    }
                  }
                  else
                  {
                    sub_100004934((uint64_t)&v132, (uint64_t *)&unk_10028E7E0);
                  }
                  v131._countAndFlagsBits = 0x6177647273;
                  v131._object = (void *)0xE500000000000000;
                  AnyHashable.init<A>(_:)(&v134, &v131, &type metadata for String, &protocol witness table for String, v96);
                  if (*(_QWORD *)(v37 + 16) && (v98 = sub_10010AAE0((uint64_t)&v134), (v99 & 1) != 0))
                  {
                    sub_1000244B0(*(_QWORD *)(v37 + 56) + 32 * v98, (uint64_t)&v132);
                  }
                  else
                  {
                    v132 = 0u;
                    v133 = 0u;
                  }
                  swift_bridgeObjectRelease(v37);
                  sub_1000839B4((uint64_t)&v134);
                  if (*((_QWORD *)&v133 + 1))
                  {
                    v100 = sub_1000080B4(&qword_10028C088);
                    if ((swift_dynamicCast(&v131, &v132, (char *)&type metadata for Any + 8, v100, 6) & 1) != 0)
                    {
                      v125 = v11;
                      v101 = v131._countAndFlagsBits;
                      v102 = v38 + *(int *)(v10 + 56);
                      swift_bridgeObjectRetain(v131._countAndFlagsBits);
                      sub_10008DF58(v103, v102);
                      v104 = v102;
                      v105 = v124;
                      sub_1000E96FC(v104, v124);
                      v106 = type metadata accessor for WalrusWebAccessInfo(0);
                      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v106 - 8) + 48))(v105, 1, v106) == 1)
                      {
                        v123 = v24;
                        sub_100004934(v105, &qword_1002911E0);
                        swift_bridgeObjectRetain(v101);
                        v108 = Logger.logObject.getter(v107);
                        v109 = static os_log_type_t.error.getter(v108);
                        if (os_log_type_enabled(v108, v109))
                        {
                          v110 = (uint8_t *)swift_slowAlloc(12, -1);
                          v111 = swift_slowAlloc(32, -1);
                          *(_QWORD *)&v134 = v111;
                          *(_DWORD *)v110 = 136315138;
                          swift_bridgeObjectRetain(v101);
                          v122 = v10;
                          v113 = Dictionary.description.getter(v112, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);
                          v115 = v114;
                          swift_bridgeObjectRelease(v101);
                          *(_QWORD *)&v132 = sub_1001DEF4C(v113, v115, (uint64_t *)&v134);
                          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v132, (char *)&v132 + 8);
                          swift_bridgeObjectRelease_n(v101, 2);
                          swift_bridgeObjectRelease(v115);
                          _os_log_impl((void *)&_mh_execute_header, v108, v109, "Push message has invalid web access info: %s", v110, 0xCu);
                          v10 = v122;
                          swift_arrayDestroy(v111, 1, (char *)&type metadata for Any + 8);
                          v38 = (uint64_t)v129;
                          swift_slowDealloc(v111, -1, -1);
                          swift_slowDealloc(v110, -1, -1);

                        }
                        else
                        {

                          swift_bridgeObjectRelease_n(v101, 2);
                        }
                      }
                      else
                      {
                        swift_bridgeObjectRelease(v101);

                        sub_100004934(v105, &qword_1002911E0);
                      }
                      v11 = v125;
                      goto LABEL_109;
                    }

                  }
                  else
                  {

                    sub_100004934((uint64_t)&v132, (uint64_t *)&unk_10028E7E0);
                  }
                  v116 = v38 + *(int *)(v10 + 56);
                  v117 = type metadata accessor for WalrusWebAccessInfo(0);
                  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v117 - 8) + 56))(v116, 1, 1, v117);
LABEL_109:
                  v119 = v128;
                  sub_100188738(v38, v128);
                  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v11 + 56))(v119, 0, 1, v10);
                  sub_100028388(v38, type metadata accessor for PushMessage);
                  return;
                }
              }
              else
              {
                sub_100004934((uint64_t)&v132, (uint64_t *)&unk_10028E7E0);
              }
              v92 = 6;
              goto LABEL_82;
            }
LABEL_71:
            sub_100004934((uint64_t)&v134, (uint64_t *)&unk_10028E7E0);
            goto LABEL_72;
          }
        }
      }
      else
      {
        sub_100004934((uint64_t)&v136, (uint64_t *)&unk_10028E7E0);
      }
      v134 = 0u;
      v135 = 0u;
      goto LABEL_71;
    }
    v68 = v37;
    v48 = v24;
    v67 = swift_bridgeObjectRelease(v68);
  }
  else
  {
    v66 = v37;
    v48 = v24;
    swift_bridgeObjectRelease(v66);
    v67 = sub_100004934((uint64_t)&v136, (uint64_t *)&unk_10028E7E0);
  }
  v50 = Logger.logObject.getter(v67);
  v51 = static os_log_type_t.error.getter(v50);
  if (os_log_type_enabled(v50, v51))
  {
    v52 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v52 = 0;
    v53 = "Push Message has invalid message ID. Ignoring";
    goto LABEL_42;
  }
LABEL_43:

  swift_bridgeObjectRelease(*(_QWORD *)(v38 + 16));
  if (v46 != 6)
    swift_bridgeObjectRelease(*(_QWORD *)(v38 + 32));
  swift_bridgeObjectRelease(*(_QWORD *)(v38 + 128));
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56))(v128, 1, 1, v10);
}

unint64_t sub_1001884E8()
{
  id *v0;
  id v1;
  id v2;
  uint64_t v3;
  void *v4;
  void *v5;
  Swift::String v6;

  _StringGuts.grow(_:)(39);
  swift_bridgeObjectRelease(0xE000000000000000);
  v1 = *v0;
  v2 = objc_msgSend(v1, "description");
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  v5 = v4;

  v6._countAndFlagsBits = v3;
  v6._object = v5;
  String.append(_:)(v6);

  swift_bridgeObjectRelease(v5);
  return 0xD000000000000025;
}

uint64_t type metadata accessor for PushMessage(uint64_t a1)
{
  uint64_t result;

  result = qword_100295750;
  if (!qword_100295750)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for PushMessage);
  return result;
}

uint64_t sub_1001885E0(uint64_t a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;

  if ((a2 & 1) != 0)
  {
    if (qword_10028ADB0 != -1)
      swift_once(&qword_10028ADB0, sub_100046CC8);
    v3 = type metadata accessor for Logger(0);
    v4 = sub_100005288(v3, (uint64_t)qword_1002A8990);
    v5 = Logger.logObject.getter(v4);
    v6 = static os_log_type_t.error.getter(v5);
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Push with empty command sent to topic", v7, 2u);
      swift_slowDealloc(v7, -1, -1);
    }

    return 6;
  }
  if (a1 > 5199)
  {
    switch(a1)
    {
      case 5200:
        return 5;
      case 6000:
        return 3;
      case 6001:
        return 4;
    }
    return 6;
  }
  if (a1 == 5000)
    return 0;
  if (a1 != 5100)
  {
    if (a1 == 5101)
      return 2;
    return 6;
  }
  return 1;
}

uint64_t sub_100188738(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PushMessage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10018877C(uint64_t a1)
{
  if (a1 > 5199)
  {
    switch(a1)
    {
      case 5200:
        return 5;
      case 6000:
        return 3;
      case 6001:
        return 4;
    }
  }
  else
  {
    switch(a1)
    {
      case 5000:
        return 0;
      case 5100:
        return 1;
      case 5101:
        return 2;
    }
  }
  return 6;
}

char *sub_100188808(char *a1, char **a2, uint64_t a3)
{
  int v4;
  char *v5;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int (*v27)(_QWORD *, uint64_t, uint64_t, __n128);
  __n128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  void (*v48)(char *, char *, uint64_t, __n128);
  __n128 v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  _QWORD *v59;
  uint64_t v60;
  void (*v61)(char *, _QWORD, uint64_t, uint64_t, __n128);
  __n128 v62;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v5 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = &v5[(v4 + 16) & ~(unint64_t)v4];
    swift_retain(v5);
  }
  else
  {
    a1[8] = *((_BYTE *)a2 + 8);
    v9 = a2[2];
    v8 = a2[3];
    *((_QWORD *)a1 + 2) = v9;
    *((_QWORD *)a1 + 3) = v8;
    v11 = a2[4];
    v10 = a2[5];
    *((_QWORD *)a1 + 4) = v11;
    *((_QWORD *)a1 + 5) = v10;
    v13 = a2[6];
    v12 = a2[7];
    *((_QWORD *)a1 + 6) = v13;
    *((_QWORD *)a1 + 7) = v12;
    v15 = a2[8];
    v14 = a2[9];
    *((_QWORD *)a1 + 8) = v15;
    *((_QWORD *)a1 + 9) = v14;
    v16 = a2[10];
    *((_QWORD *)a1 + 10) = v16;
    v17 = a2[12];
    v18 = v5;
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v11);
    swift_bridgeObjectRetain(v13);
    swift_bridgeObjectRetain(v15);
    swift_bridgeObjectRetain(v16);
    if (v17 == (char *)1)
    {
      v19 = *(_OWORD *)(a2 + 13);
      *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 11);
      *(_OWORD *)(a1 + 104) = v19;
      a1[120] = *((_BYTE *)a2 + 120);
    }
    else
    {
      *((_QWORD *)a1 + 11) = a2[11];
      *((_QWORD *)a1 + 12) = v17;
      v20 = a2[14];
      *((_QWORD *)a1 + 13) = a2[13];
      *((_QWORD *)a1 + 14) = v20;
      a1[120] = *((_BYTE *)a2 + 120);
      swift_bridgeObjectRetain(v17);
      swift_bridgeObjectRetain(v20);
    }
    a1[121] = *((_BYTE *)a2 + 121);
    v21 = a2[16];
    *((_QWORD *)a1 + 16) = v21;
    v22 = *(int *)(a3 + 56);
    v23 = &a1[v22];
    v24 = (char **)((char *)a2 + v22);
    v25 = type metadata accessor for WalrusWebAccessInfo(0);
    v26 = *(_QWORD *)(v25 - 8);
    v27 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t, __n128))(v26 + 48);
    v28 = swift_bridgeObjectRetain(v21);
    if (v27(v24, 1, v25, v28))
    {
      v29 = sub_1000080B4(&qword_1002911E0);
      memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    }
    else
    {
      v30 = v24[1];
      *(_QWORD *)v23 = *v24;
      *((_QWORD *)v23 + 1) = v30;
      v72 = v24[3];
      *((_QWORD *)v23 + 2) = v24[2];
      *((_QWORD *)v23 + 3) = v72;
      v71 = v24[5];
      *((_QWORD *)v23 + 4) = v24[4];
      *((_QWORD *)v23 + 5) = v71;
      v70 = v24[7];
      *((_QWORD *)v23 + 6) = v24[6];
      *((_QWORD *)v23 + 7) = v70;
      v69 = v24[9];
      *((_QWORD *)v23 + 8) = v24[8];
      *((_QWORD *)v23 + 9) = v69;
      v68 = v24[11];
      *((_QWORD *)v23 + 10) = v24[10];
      *((_QWORD *)v23 + 11) = v68;
      v67 = v24[13];
      *((_QWORD *)v23 + 12) = v24[12];
      *((_QWORD *)v23 + 13) = v67;
      v66 = v24[15];
      *((_QWORD *)v23 + 14) = v24[14];
      *((_QWORD *)v23 + 15) = v66;
      v65 = v24[17];
      *((_QWORD *)v23 + 16) = v24[16];
      *((_QWORD *)v23 + 17) = v65;
      v32 = v24[18];
      v31 = v24[19];
      *((_QWORD *)v23 + 18) = v32;
      *((_QWORD *)v23 + 19) = v31;
      v73 = v32;
      v74 = v24[20];
      *((_QWORD *)v23 + 20) = v74;
      v33 = *(int *)(v25 + 60);
      v34 = &v23[v33];
      v35 = (_QWORD *)((char *)v24 + v33);
      v36 = *(_QWORD *)((char *)v24 + v33);
      v37 = v35[1];
      *(_QWORD *)v34 = v36;
      *((_QWORD *)v34 + 1) = v37;
      v38 = v35[3];
      *((_QWORD *)v34 + 2) = v35[2];
      *((_QWORD *)v34 + 3) = v38;
      v39 = v35[5];
      *((_QWORD *)v34 + 4) = v35[4];
      *((_QWORD *)v34 + 5) = v39;
      v78 = v26;
      v40 = v35[7];
      *((_QWORD *)v34 + 6) = v35[6];
      *((_QWORD *)v34 + 7) = v40;
      v41 = v35[9];
      *((_QWORD *)v34 + 8) = v35[8];
      *((_QWORD *)v34 + 9) = v41;
      v64 = v35[11];
      *((_QWORD *)v34 + 10) = v35[10];
      *((_QWORD *)v34 + 11) = v64;
      v75 = v35[13];
      v76 = v35[12];
      swift_bridgeObjectRetain(v30);
      swift_bridgeObjectRetain(v72);
      swift_bridgeObjectRetain(v71);
      swift_bridgeObjectRetain(v70);
      swift_bridgeObjectRetain(v69);
      swift_bridgeObjectRetain(v68);
      swift_bridgeObjectRetain(v67);
      swift_bridgeObjectRetain(v66);
      swift_bridgeObjectRetain(v65);
      swift_bridgeObjectRetain(v73);
      swift_bridgeObjectRetain(v74);
      swift_bridgeObjectRetain(v37);
      swift_bridgeObjectRetain(v38);
      swift_bridgeObjectRetain(v39);
      swift_bridgeObjectRetain(v40);
      swift_bridgeObjectRetain(v41);
      swift_bridgeObjectRetain(v64);
      sub_10000F450(v76, v75);
      *((_QWORD *)v34 + 12) = v76;
      *((_QWORD *)v34 + 13) = v75;
      v42 = v35[15];
      *((_QWORD *)v34 + 14) = v35[14];
      *((_QWORD *)v34 + 15) = v42;
      *((_QWORD *)v34 + 16) = v35[16];
      v43 = (int *)type metadata accessor for WalrusPCSEncryptionMaterial(0);
      v44 = v43[13];
      v45 = &v34[v44];
      v46 = (char *)v35 + v44;
      v47 = type metadata accessor for P384.KeyAgreement.PublicKey(0);
      v77 = v25;
      v48 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v47 - 8) + 16);
      v49 = swift_bridgeObjectRetain(v42);
      v48(v45, v46, v47, v49);
      v50 = v43[14];
      v51 = (uint64_t *)&v34[v50];
      v52 = (_QWORD *)((char *)v35 + v50);
      v53 = *v52;
      v54 = v52[1];
      sub_10000F450(*v52, v54);
      *v51 = v53;
      v51[1] = v54;
      v55 = v43[15];
      v56 = *(_QWORD *)((char *)v35 + v55);
      *(_QWORD *)&v34[v55] = v56;
      v57 = v43[16];
      v58 = &v34[v57];
      v59 = (_QWORD *)((char *)v35 + v57);
      v60 = v59[1];
      *(_QWORD *)v58 = *v59;
      *((_QWORD *)v58 + 1) = v60;
      v61 = *(void (**)(char *, _QWORD, uint64_t, uint64_t, __n128))(v78 + 56);
      swift_bridgeObjectRetain(v56);
      v62 = swift_bridgeObjectRetain(v60);
      v61(v23, 0, 1, v77, v62);
    }
  }
  return a1;
}

uint64_t sub_100188BC4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t result;
  _QWORD *v8;
  int *v9;
  char *v10;
  uint64_t v11;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 32));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 48));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 64));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 80));
  v4 = *(_QWORD *)(a1 + 96);
  if (v4 != 1)
  {
    swift_bridgeObjectRelease(v4);
    swift_bridgeObjectRelease(*(_QWORD *)(a1 + 112));
  }
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 128));
  v5 = (_QWORD *)(a1 + *(int *)(a2 + 56));
  v6 = type metadata accessor for WalrusWebAccessInfo(0);
  result = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v5, 1, v6);
  if (!(_DWORD)result)
  {
    swift_bridgeObjectRelease(v5[1]);
    swift_bridgeObjectRelease(v5[3]);
    swift_bridgeObjectRelease(v5[5]);
    swift_bridgeObjectRelease(v5[7]);
    swift_bridgeObjectRelease(v5[9]);
    swift_bridgeObjectRelease(v5[11]);
    swift_bridgeObjectRelease(v5[13]);
    swift_bridgeObjectRelease(v5[15]);
    swift_bridgeObjectRelease(v5[17]);
    swift_bridgeObjectRelease(v5[18]);
    swift_bridgeObjectRelease(v5[20]);
    v8 = (_QWORD *)((char *)v5 + *(int *)(v6 + 60));
    swift_bridgeObjectRelease(v8[1]);
    swift_bridgeObjectRelease(v8[3]);
    swift_bridgeObjectRelease(v8[5]);
    swift_bridgeObjectRelease(v8[7]);
    swift_bridgeObjectRelease(v8[9]);
    swift_bridgeObjectRelease(v8[11]);
    sub_10000F494(v8[12], v8[13]);
    swift_bridgeObjectRelease(v8[15]);
    v9 = (int *)type metadata accessor for WalrusPCSEncryptionMaterial(0);
    v10 = (char *)v8 + v9[13];
    v11 = type metadata accessor for P384.KeyAgreement.PublicKey(0);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
    sub_10000F494(*(_QWORD *)((char *)v8 + v9[14]), *(_QWORD *)((char *)v8 + v9[14] + 8));
    swift_bridgeObjectRelease(*(_QWORD *)((char *)v8 + v9[15]));
    return swift_bridgeObjectRelease(*(_QWORD *)((char *)v8 + v9[16] + 8));
  }
  return result;
}

uint64_t sub_100188D74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int (*v26)(_QWORD *, uint64_t, uint64_t, __n128);
  __n128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int *v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  void (*v47)(char *, char *, uint64_t, __n128);
  __n128 v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  void (*v60)(_QWORD *, _QWORD, uint64_t, uint64_t, __n128);
  __n128 v61;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;

  v6 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v8 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 24) = v7;
  v10 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v10;
  *(_QWORD *)(a1 + 40) = v9;
  v12 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = v12;
  *(_QWORD *)(a1 + 56) = v11;
  v14 = *(_QWORD *)(a2 + 64);
  v13 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = v14;
  *(_QWORD *)(a1 + 72) = v13;
  v15 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 80) = v15;
  v16 = *(_QWORD *)(a2 + 96);
  v17 = v6;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRetain(v15);
  if (v16 == 1)
  {
    v18 = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 104) = v18;
    *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  }
  else
  {
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 96) = v16;
    v19 = *(_QWORD *)(a2 + 112);
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    *(_QWORD *)(a1 + 112) = v19;
    *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
    swift_bridgeObjectRetain(v16);
    swift_bridgeObjectRetain(v19);
  }
  *(_BYTE *)(a1 + 121) = *(_BYTE *)(a2 + 121);
  v20 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 128) = v20;
  v21 = *(int *)(a3 + 56);
  v22 = (_QWORD *)(a1 + v21);
  v23 = (_QWORD *)(a2 + v21);
  v24 = type metadata accessor for WalrusWebAccessInfo(0);
  v25 = *(_QWORD *)(v24 - 8);
  v26 = *(unsigned int (**)(_QWORD *, uint64_t, uint64_t, __n128))(v25 + 48);
  v27 = swift_bridgeObjectRetain(v20);
  if (v26(v23, 1, v24, v27))
  {
    v28 = sub_1000080B4(&qword_1002911E0);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
  }
  else
  {
    v29 = v23[1];
    *v22 = *v23;
    v22[1] = v29;
    v71 = v23[3];
    v22[2] = v23[2];
    v22[3] = v71;
    v70 = v23[5];
    v22[4] = v23[4];
    v22[5] = v70;
    v69 = v23[7];
    v22[6] = v23[6];
    v22[7] = v69;
    v68 = v23[9];
    v22[8] = v23[8];
    v22[9] = v68;
    v67 = v23[11];
    v22[10] = v23[10];
    v22[11] = v67;
    v66 = v23[13];
    v22[12] = v23[12];
    v22[13] = v66;
    v65 = v23[15];
    v22[14] = v23[14];
    v22[15] = v65;
    v64 = v23[17];
    v22[16] = v23[16];
    v22[17] = v64;
    v31 = v23[18];
    v30 = v23[19];
    v22[18] = v31;
    v22[19] = v30;
    v72 = v31;
    v73 = v23[20];
    v22[20] = v73;
    v32 = *(int *)(v24 + 60);
    v33 = (_QWORD *)((char *)v22 + v32);
    v34 = (_QWORD *)((char *)v23 + v32);
    v35 = *(_QWORD *)((char *)v23 + v32);
    v36 = v34[1];
    *v33 = v35;
    v33[1] = v36;
    v37 = v34[3];
    v33[2] = v34[2];
    v33[3] = v37;
    v38 = v34[5];
    v33[4] = v34[4];
    v33[5] = v38;
    v77 = v25;
    v39 = v34[7];
    v33[6] = v34[6];
    v33[7] = v39;
    v40 = v34[9];
    v33[8] = v34[8];
    v33[9] = v40;
    v63 = v34[11];
    v33[10] = v34[10];
    v33[11] = v63;
    v74 = v34[13];
    v75 = v34[12];
    swift_bridgeObjectRetain(v29);
    swift_bridgeObjectRetain(v71);
    swift_bridgeObjectRetain(v70);
    swift_bridgeObjectRetain(v69);
    swift_bridgeObjectRetain(v68);
    swift_bridgeObjectRetain(v67);
    swift_bridgeObjectRetain(v66);
    swift_bridgeObjectRetain(v65);
    swift_bridgeObjectRetain(v64);
    swift_bridgeObjectRetain(v72);
    swift_bridgeObjectRetain(v73);
    swift_bridgeObjectRetain(v36);
    swift_bridgeObjectRetain(v37);
    swift_bridgeObjectRetain(v38);
    swift_bridgeObjectRetain(v39);
    swift_bridgeObjectRetain(v40);
    swift_bridgeObjectRetain(v63);
    sub_10000F450(v75, v74);
    v33[12] = v75;
    v33[13] = v74;
    v41 = v34[15];
    v33[14] = v34[14];
    v33[15] = v41;
    v33[16] = v34[16];
    v42 = (int *)type metadata accessor for WalrusPCSEncryptionMaterial(0);
    v43 = v42[13];
    v44 = (char *)v33 + v43;
    v45 = (char *)v34 + v43;
    v46 = type metadata accessor for P384.KeyAgreement.PublicKey(0);
    v76 = v24;
    v47 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v46 - 8) + 16);
    v48 = swift_bridgeObjectRetain(v41);
    v47(v44, v45, v46, v48);
    v49 = v42[14];
    v50 = (_QWORD *)((char *)v33 + v49);
    v51 = (_QWORD *)((char *)v34 + v49);
    v52 = *v51;
    v53 = v51[1];
    sub_10000F450(*v51, v53);
    *v50 = v52;
    v50[1] = v53;
    v54 = v42[15];
    v55 = *(_QWORD *)((char *)v34 + v54);
    *(_QWORD *)((char *)v33 + v54) = v55;
    v56 = v42[16];
    v57 = (_QWORD *)((char *)v33 + v56);
    v58 = (_QWORD *)((char *)v34 + v56);
    v59 = v58[1];
    *v57 = *v58;
    v57[1] = v59;
    v60 = *(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t, __n128))(v77 + 56);
    swift_bridgeObjectRetain(v55);
    v61 = swift_bridgeObjectRetain(v59);
    v60(v22, 0, 1, v76, v61);
  }
  return a1;
}

uint64_t sub_10018910C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 *v19;
  __int128 *v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  char v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (*v39)(_QWORD *, uint64_t, uint64_t);
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  void (*v57)(char *, char *, uint64_t, __n128);
  __n128 v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  uint64_t v69;
  void (*v70)(_QWORD *, _QWORD, uint64_t, uint64_t, __n128);
  __n128 v71;
  uint64_t v72;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  _QWORD *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  int *v117;
  uint64_t v118;
  char *v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t *v123;
  uint64_t *v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  _QWORD *v133;
  _QWORD *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;

  v6 = *(void **)a2;
  v7 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v8 = v6;

  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v9 = *(_QWORD *)(a2 + 16);
  v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v10);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v11 = *(_QWORD *)(a2 + 32);
  v12 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v11;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRelease(v12);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v13 = *(_QWORD *)(a2 + 48);
  v14 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v13;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRelease(v14);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v15 = *(_QWORD *)(a2 + 64);
  v16 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  v17 = *(_QWORD *)(a2 + 80);
  v18 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v17;
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRelease(v18);
  v19 = (__int128 *)(a1 + 88);
  v20 = (__int128 *)(a2 + 88);
  v21 = *(_QWORD *)(a1 + 96);
  v22 = *(_QWORD *)(a2 + 96);
  if (v21 == 1)
  {
    if (v22 == 1)
    {
      v23 = *v20;
      v24 = *(_OWORD *)(a2 + 104);
      *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
      *v19 = v23;
      *(_OWORD *)(a1 + 104) = v24;
    }
    else
    {
      *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
      v27 = *(_QWORD *)(a2 + 96);
      *(_QWORD *)(a1 + 96) = v27;
      *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
      v28 = *(_QWORD *)(a2 + 112);
      *(_QWORD *)(a1 + 112) = v28;
      *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
      swift_bridgeObjectRetain(v27);
      swift_bridgeObjectRetain(v28);
    }
  }
  else if (v22 == 1)
  {
    sub_100189954(a1 + 88);
    v25 = *(_BYTE *)(a2 + 120);
    v26 = *(_OWORD *)(a2 + 104);
    *v19 = *v20;
    *(_OWORD *)(a1 + 104) = v26;
    *(_BYTE *)(a1 + 120) = v25;
  }
  else
  {
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
    v29 = *(_QWORD *)(a2 + 96);
    *(_QWORD *)(a1 + 96) = v29;
    swift_bridgeObjectRetain(v29);
    swift_bridgeObjectRelease(v21);
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    v30 = *(_QWORD *)(a2 + 112);
    v31 = *(_QWORD *)(a1 + 112);
    *(_QWORD *)(a1 + 112) = v30;
    swift_bridgeObjectRetain(v30);
    swift_bridgeObjectRelease(v31);
    *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  }
  *(_BYTE *)(a1 + 121) = *(_BYTE *)(a2 + 121);
  v32 = *(_QWORD *)(a2 + 128);
  v33 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 128) = v32;
  swift_bridgeObjectRetain(v32);
  swift_bridgeObjectRelease(v33);
  v34 = *(int *)(a3 + 56);
  v35 = (_QWORD *)(a1 + v34);
  v36 = (_QWORD *)(a2 + v34);
  v37 = type metadata accessor for WalrusWebAccessInfo(0);
  v38 = *(_QWORD *)(v37 - 8);
  v39 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v38 + 48);
  v40 = v39(v35, 1, v37);
  v41 = v39(v36, 1, v37);
  if (!v40)
  {
    if (!v41)
    {
      *v35 = *v36;
      v74 = v36[1];
      v75 = v35[1];
      v35[1] = v74;
      swift_bridgeObjectRetain(v74);
      swift_bridgeObjectRelease(v75);
      v35[2] = v36[2];
      v76 = v36[3];
      v77 = v35[3];
      v35[3] = v76;
      swift_bridgeObjectRetain(v76);
      swift_bridgeObjectRelease(v77);
      v35[4] = v36[4];
      v78 = v36[5];
      v79 = v35[5];
      v35[5] = v78;
      swift_bridgeObjectRetain(v78);
      swift_bridgeObjectRelease(v79);
      v35[6] = v36[6];
      v80 = v36[7];
      v81 = v35[7];
      v35[7] = v80;
      swift_bridgeObjectRetain(v80);
      swift_bridgeObjectRelease(v81);
      v35[8] = v36[8];
      v82 = v36[9];
      v83 = v35[9];
      v35[9] = v82;
      swift_bridgeObjectRetain(v82);
      swift_bridgeObjectRelease(v83);
      v35[10] = v36[10];
      v84 = v36[11];
      v85 = v35[11];
      v35[11] = v84;
      swift_bridgeObjectRetain(v84);
      swift_bridgeObjectRelease(v85);
      v35[12] = v36[12];
      v86 = v36[13];
      v87 = v35[13];
      v35[13] = v86;
      swift_bridgeObjectRetain(v86);
      swift_bridgeObjectRelease(v87);
      v35[14] = v36[14];
      v88 = v36[15];
      v89 = v35[15];
      v35[15] = v88;
      swift_bridgeObjectRetain(v88);
      swift_bridgeObjectRelease(v89);
      v35[16] = v36[16];
      v90 = v36[17];
      v91 = v35[17];
      v35[17] = v90;
      swift_bridgeObjectRetain(v90);
      swift_bridgeObjectRelease(v91);
      v92 = v36[18];
      v93 = v35[18];
      v35[18] = v92;
      swift_bridgeObjectRetain(v92);
      swift_bridgeObjectRelease(v93);
      v35[19] = v36[19];
      v94 = v36[20];
      v95 = v35[20];
      v35[20] = v94;
      swift_bridgeObjectRetain(v94);
      swift_bridgeObjectRelease(v95);
      v96 = *(int *)(v37 + 60);
      v97 = (_QWORD *)((char *)v35 + v96);
      v98 = (_QWORD *)((char *)v36 + v96);
      *v97 = *(_QWORD *)((char *)v36 + v96);
      v99 = *(_QWORD *)((char *)v36 + v96 + 8);
      v100 = *(_QWORD *)((char *)v35 + v96 + 8);
      v97[1] = v99;
      swift_bridgeObjectRetain(v99);
      swift_bridgeObjectRelease(v100);
      v97[2] = v98[2];
      v101 = v98[3];
      v102 = v97[3];
      v97[3] = v101;
      swift_bridgeObjectRetain(v101);
      swift_bridgeObjectRelease(v102);
      v97[4] = v98[4];
      v103 = v98[5];
      v104 = v97[5];
      v97[5] = v103;
      swift_bridgeObjectRetain(v103);
      swift_bridgeObjectRelease(v104);
      v97[6] = v98[6];
      v105 = v98[7];
      v106 = v97[7];
      v97[7] = v105;
      swift_bridgeObjectRetain(v105);
      swift_bridgeObjectRelease(v106);
      v97[8] = v98[8];
      v107 = v98[9];
      v108 = v97[9];
      v97[9] = v107;
      swift_bridgeObjectRetain(v107);
      swift_bridgeObjectRelease(v108);
      v97[10] = v98[10];
      v109 = v98[11];
      v110 = v97[11];
      v97[11] = v109;
      swift_bridgeObjectRetain(v109);
      swift_bridgeObjectRelease(v110);
      v111 = v98[12];
      v112 = v98[13];
      sub_10000F450(v111, v112);
      v113 = v97[12];
      v114 = v97[13];
      v97[12] = v111;
      v97[13] = v112;
      sub_10000F494(v113, v114);
      v97[14] = v98[14];
      v115 = v98[15];
      v116 = v97[15];
      v97[15] = v115;
      swift_bridgeObjectRetain(v115);
      swift_bridgeObjectRelease(v116);
      v97[16] = v98[16];
      v117 = (int *)type metadata accessor for WalrusPCSEncryptionMaterial(0);
      v118 = v117[13];
      v119 = (char *)v97 + v118;
      v120 = (char *)v98 + v118;
      v121 = type metadata accessor for P384.KeyAgreement.PublicKey(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v121 - 8) + 24))(v119, v120, v121);
      v122 = v117[14];
      v123 = (_QWORD *)((char *)v97 + v122);
      v124 = (_QWORD *)((char *)v98 + v122);
      v125 = *v124;
      v126 = v124[1];
      sub_10000F450(*v124, v126);
      v127 = *v123;
      v128 = v123[1];
      *v123 = v125;
      v123[1] = v126;
      sub_10000F494(v127, v128);
      v129 = v117[15];
      v130 = *(_QWORD *)((char *)v98 + v129);
      v131 = *(_QWORD *)((char *)v97 + v129);
      *(_QWORD *)((char *)v97 + v129) = v130;
      swift_bridgeObjectRetain(v130);
      swift_bridgeObjectRelease(v131);
      v132 = v117[16];
      v133 = (_QWORD *)((char *)v97 + v132);
      v134 = (_QWORD *)((char *)v98 + v132);
      *v133 = *v134;
      v135 = v134[1];
      v136 = v133[1];
      v133[1] = v135;
      swift_bridgeObjectRetain(v135);
      swift_bridgeObjectRelease(v136);
      return a1;
    }
    sub_100028388((uint64_t)v35, type metadata accessor for WalrusWebAccessInfo);
    goto LABEL_13;
  }
  if (v41)
  {
LABEL_13:
    v72 = sub_1000080B4(&qword_1002911E0);
    memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v72 - 8) + 64));
    return a1;
  }
  *v35 = *v36;
  v42 = v36[1];
  v35[1] = v42;
  v35[2] = v36[2];
  v145 = v36[3];
  v35[3] = v145;
  v35[4] = v36[4];
  v144 = v36[5];
  v35[5] = v144;
  v35[6] = v36[6];
  v143 = v36[7];
  v35[7] = v143;
  v35[8] = v36[8];
  v142 = v36[9];
  v35[9] = v142;
  v35[10] = v36[10];
  v141 = v36[11];
  v35[11] = v141;
  v35[12] = v36[12];
  v140 = v36[13];
  v35[13] = v140;
  v35[14] = v36[14];
  v139 = v36[15];
  v35[15] = v139;
  v35[16] = v36[16];
  v138 = v36[17];
  v35[17] = v138;
  v147 = v36[18];
  v35[18] = v147;
  v35[19] = v36[19];
  v146 = v36[20];
  v35[20] = v146;
  v43 = *(int *)(v37 + 60);
  v44 = (_QWORD *)((char *)v35 + v43);
  v45 = (_QWORD *)((char *)v36 + v43);
  *v44 = *(_QWORD *)((char *)v36 + v43);
  v46 = *(_QWORD *)((char *)v36 + v43 + 8);
  v44[1] = v46;
  v44[2] = v45[2];
  v47 = v45[3];
  v44[3] = v47;
  v44[4] = v45[4];
  v48 = v45[5];
  v44[5] = v48;
  v44[6] = v45[6];
  v151 = v38;
  v49 = v45[7];
  v44[7] = v49;
  v44[8] = v45[8];
  v50 = v45[9];
  v44[9] = v50;
  v44[10] = v45[10];
  v137 = v45[11];
  v44[11] = v137;
  v148 = v45[13];
  v149 = v45[12];
  swift_bridgeObjectRetain(v42);
  swift_bridgeObjectRetain(v145);
  swift_bridgeObjectRetain(v144);
  swift_bridgeObjectRetain(v143);
  swift_bridgeObjectRetain(v142);
  swift_bridgeObjectRetain(v141);
  swift_bridgeObjectRetain(v140);
  swift_bridgeObjectRetain(v139);
  swift_bridgeObjectRetain(v138);
  swift_bridgeObjectRetain(v147);
  swift_bridgeObjectRetain(v146);
  swift_bridgeObjectRetain(v46);
  swift_bridgeObjectRetain(v47);
  swift_bridgeObjectRetain(v48);
  swift_bridgeObjectRetain(v49);
  swift_bridgeObjectRetain(v50);
  swift_bridgeObjectRetain(v137);
  sub_10000F450(v149, v148);
  v44[12] = v149;
  v44[13] = v148;
  v44[14] = v45[14];
  v51 = v45[15];
  v44[15] = v51;
  v44[16] = v45[16];
  v52 = (int *)type metadata accessor for WalrusPCSEncryptionMaterial(0);
  v53 = v52[13];
  v54 = (char *)v44 + v53;
  v55 = (char *)v45 + v53;
  v56 = type metadata accessor for P384.KeyAgreement.PublicKey(0);
  v150 = v37;
  v57 = *(void (**)(char *, char *, uint64_t, __n128))(*(_QWORD *)(v56 - 8) + 16);
  v58 = swift_bridgeObjectRetain(v51);
  v57(v54, v55, v56, v58);
  v59 = v52[14];
  v60 = (_QWORD *)((char *)v44 + v59);
  v61 = (_QWORD *)((char *)v45 + v59);
  v62 = *v61;
  v63 = v61[1];
  sub_10000F450(*v61, v63);
  *v60 = v62;
  v60[1] = v63;
  v64 = v52[15];
  v65 = *(_QWORD *)((char *)v45 + v64);
  *(_QWORD *)((char *)v44 + v64) = v65;
  v66 = v52[16];
  v67 = (_QWORD *)((char *)v44 + v66);
  v68 = (_QWORD *)((char *)v45 + v66);
  *v67 = *v68;
  v69 = v68[1];
  v67[1] = v69;
  v70 = *(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t, __n128))(v151 + 56);
  swift_bridgeObjectRetain(v65);
  v71 = swift_bridgeObjectRetain(v69);
  v70(v35, 0, 1, v150, v71);
  return a1;
}

uint64_t sub_100189954(uint64_t a1)
{
  destroy for PushMessageAlert(a1);
  return a1;
}

uint64_t sub_100189988(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  _OWORD *v5;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  char *v15;
  char *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  int *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(_BYTE *)(a1 + 121) = *(_BYTE *)(a2 + 121);
  v4 = *(int *)(a3 + 56);
  v5 = (_OWORD *)(a2 + v4);
  v6 = (_OWORD *)(a1 + v4);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  v7 = type metadata accessor for WalrusWebAccessInfo(0);
  v8 = *(_QWORD *)(v7 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v8 + 48))(v5, 1, v7))
  {
    v9 = sub_1000080B4(&qword_1002911E0);
    memcpy(v6, v5, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  else
  {
    v10 = v5[1];
    *v6 = *v5;
    v6[1] = v10;
    v11 = v5[3];
    v6[2] = v5[2];
    v6[3] = v11;
    v12 = v5[5];
    v6[4] = v5[4];
    v6[5] = v12;
    v13 = v5[7];
    v6[6] = v5[6];
    v6[7] = v13;
    v6[8] = v5[8];
    *((_QWORD *)v6 + 18) = *((_QWORD *)v5 + 18);
    *(_OWORD *)((char *)v6 + 152) = *(_OWORD *)((char *)v5 + 152);
    v14 = *(int *)(v7 + 60);
    v15 = (char *)v6 + v14;
    v16 = (char *)v5 + v14;
    v17 = *(_OWORD *)((char *)v5 + v14 + 16);
    *(_OWORD *)v15 = *(_OWORD *)((char *)v5 + v14);
    *((_OWORD *)v15 + 1) = v17;
    v18 = *(_OWORD *)((char *)v5 + v14 + 48);
    *((_OWORD *)v15 + 2) = *(_OWORD *)((char *)v5 + v14 + 32);
    *((_OWORD *)v15 + 3) = v18;
    v19 = *(_OWORD *)((char *)v5 + v14 + 80);
    *((_OWORD *)v15 + 4) = *(_OWORD *)((char *)v5 + v14 + 64);
    *((_OWORD *)v15 + 5) = v19;
    v20 = *(_OWORD *)((char *)v5 + v14 + 112);
    *((_OWORD *)v15 + 6) = *(_OWORD *)((char *)v5 + v14 + 96);
    *((_OWORD *)v15 + 7) = v20;
    *((_QWORD *)v15 + 16) = *(_QWORD *)((char *)v5 + v14 + 128);
    v21 = (int *)type metadata accessor for WalrusPCSEncryptionMaterial(0);
    v22 = v21[13];
    v23 = &v15[v22];
    v24 = &v16[v22];
    v25 = type metadata accessor for P384.KeyAgreement.PublicKey(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 32))(v23, v24, v25);
    *(_OWORD *)&v15[v21[14]] = *(_OWORD *)&v16[v21[14]];
    *(_QWORD *)&v15[v21[15]] = *(_QWORD *)&v16[v21[15]];
    *(_OWORD *)&v15[v21[16]] = *(_OWORD *)&v16[v21[16]];
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v6, 0, 1, v7);
  }
  return a1;
}

uint64_t sub_100189B60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(_QWORD *, uint64_t, uint64_t);
  int v28;
  int v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  char *v35;
  char *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  int *v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int *v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;

  v6 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v8;
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v10;
  swift_bridgeObjectRelease(v11);
  v12 = *(_QWORD *)(a2 + 64);
  v13 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v12;
  swift_bridgeObjectRelease(v13);
  v14 = *(_QWORD *)(a2 + 80);
  v15 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v14;
  swift_bridgeObjectRelease(v15);
  v16 = *(_QWORD *)(a1 + 96);
  if (v16 == 1)
    goto LABEL_4;
  v17 = *(_QWORD *)(a2 + 96);
  if (v17 == 1)
  {
    sub_100189954(a1 + 88);
LABEL_4:
    v18 = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 104) = v18;
    *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
    goto LABEL_6;
  }
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v17;
  swift_bridgeObjectRelease(v16);
  v19 = *(_QWORD *)(a2 + 112);
  v20 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = v19;
  swift_bridgeObjectRelease(v20);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
LABEL_6:
  *(_BYTE *)(a1 + 121) = *(_BYTE *)(a2 + 121);
  v21 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  swift_bridgeObjectRelease(v21);
  v22 = *(int *)(a3 + 56);
  v23 = (_QWORD *)(a1 + v22);
  v24 = (_QWORD *)(a2 + v22);
  v25 = type metadata accessor for WalrusWebAccessInfo(0);
  v26 = *(_QWORD *)(v25 - 8);
  v27 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v26 + 48);
  v28 = v27(v23, 1, v25);
  v29 = v27(v24, 1, v25);
  if (!v28)
  {
    if (!v29)
    {
      v48 = v24[1];
      v49 = v23[1];
      *v23 = *v24;
      v23[1] = v48;
      swift_bridgeObjectRelease(v49);
      v50 = v24[3];
      v51 = v23[3];
      v23[2] = v24[2];
      v23[3] = v50;
      swift_bridgeObjectRelease(v51);
      v52 = v24[5];
      v53 = v23[5];
      v23[4] = v24[4];
      v23[5] = v52;
      swift_bridgeObjectRelease(v53);
      v54 = v24[7];
      v55 = v23[7];
      v23[6] = v24[6];
      v23[7] = v54;
      swift_bridgeObjectRelease(v55);
      v56 = v24[9];
      v57 = v23[9];
      v23[8] = v24[8];
      v23[9] = v56;
      swift_bridgeObjectRelease(v57);
      v58 = v24[11];
      v59 = v23[11];
      v23[10] = v24[10];
      v23[11] = v58;
      swift_bridgeObjectRelease(v59);
      v60 = v24[13];
      v61 = v23[13];
      v23[12] = v24[12];
      v23[13] = v60;
      swift_bridgeObjectRelease(v61);
      v62 = v24[15];
      v63 = v23[15];
      v23[14] = v24[14];
      v23[15] = v62;
      swift_bridgeObjectRelease(v63);
      v64 = v24[17];
      v65 = v23[17];
      v23[16] = v24[16];
      v23[17] = v64;
      swift_bridgeObjectRelease(v65);
      v66 = v23[18];
      v23[18] = v24[18];
      swift_bridgeObjectRelease(v66);
      v67 = v24[20];
      v68 = v23[20];
      v23[19] = v24[19];
      v23[20] = v67;
      swift_bridgeObjectRelease(v68);
      v69 = *(int *)(v25 + 60);
      v70 = (_QWORD *)((char *)v23 + v69);
      v71 = (char *)v24 + v69;
      v72 = *(_QWORD *)((char *)v24 + v69 + 8);
      v73 = *(_QWORD *)((char *)v23 + v69 + 8);
      *v70 = *(_QWORD *)((char *)v24 + v69);
      v70[1] = v72;
      swift_bridgeObjectRelease(v73);
      v74 = *((_QWORD *)v71 + 3);
      v75 = v70[3];
      v70[2] = *((_QWORD *)v71 + 2);
      v70[3] = v74;
      swift_bridgeObjectRelease(v75);
      v76 = *((_QWORD *)v71 + 5);
      v77 = v70[5];
      v70[4] = *((_QWORD *)v71 + 4);
      v70[5] = v76;
      swift_bridgeObjectRelease(v77);
      v78 = *((_QWORD *)v71 + 7);
      v79 = v70[7];
      v70[6] = *((_QWORD *)v71 + 6);
      v70[7] = v78;
      swift_bridgeObjectRelease(v79);
      v80 = *((_QWORD *)v71 + 9);
      v81 = v70[9];
      v70[8] = *((_QWORD *)v71 + 8);
      v70[9] = v80;
      swift_bridgeObjectRelease(v81);
      v82 = *((_QWORD *)v71 + 11);
      v83 = v70[11];
      v70[10] = *((_QWORD *)v71 + 10);
      v70[11] = v82;
      swift_bridgeObjectRelease(v83);
      v84 = v70[12];
      v85 = v70[13];
      *((_OWORD *)v70 + 6) = *((_OWORD *)v71 + 6);
      sub_10000F494(v84, v85);
      v86 = *((_QWORD *)v71 + 15);
      v87 = v70[15];
      v70[14] = *((_QWORD *)v71 + 14);
      v70[15] = v86;
      swift_bridgeObjectRelease(v87);
      v70[16] = *((_QWORD *)v71 + 16);
      v88 = (int *)type metadata accessor for WalrusPCSEncryptionMaterial(0);
      v89 = v88[13];
      v90 = (char *)v70 + v89;
      v91 = &v71[v89];
      v92 = type metadata accessor for P384.KeyAgreement.PublicKey(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v92 - 8) + 40))(v90, v91, v92);
      v93 = v88[14];
      v94 = *(_QWORD *)((char *)v70 + v93);
      v95 = *(_QWORD *)((char *)v70 + v93 + 8);
      *(_OWORD *)((char *)v70 + v93) = *(_OWORD *)&v71[v93];
      sub_10000F494(v94, v95);
      v96 = v88[15];
      v97 = *(_QWORD *)((char *)v70 + v96);
      *(_QWORD *)((char *)v70 + v96) = *(_QWORD *)&v71[v96];
      swift_bridgeObjectRelease(v97);
      v98 = v88[16];
      v99 = (_QWORD *)((char *)v70 + v98);
      v100 = &v71[v98];
      v102 = *(_QWORD *)v100;
      v101 = *((_QWORD *)v100 + 1);
      v103 = v99[1];
      *v99 = v102;
      v99[1] = v101;
      swift_bridgeObjectRelease(v103);
      return a1;
    }
    sub_100028388((uint64_t)v23, type metadata accessor for WalrusWebAccessInfo);
    goto LABEL_11;
  }
  if (v29)
  {
LABEL_11:
    v46 = sub_1000080B4(&qword_1002911E0);
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v46 - 8) + 64));
    return a1;
  }
  v30 = *((_OWORD *)v24 + 1);
  *(_OWORD *)v23 = *(_OWORD *)v24;
  *((_OWORD *)v23 + 1) = v30;
  v31 = *((_OWORD *)v24 + 3);
  *((_OWORD *)v23 + 2) = *((_OWORD *)v24 + 2);
  *((_OWORD *)v23 + 3) = v31;
  v32 = *((_OWORD *)v24 + 5);
  *((_OWORD *)v23 + 4) = *((_OWORD *)v24 + 4);
  *((_OWORD *)v23 + 5) = v32;
  v33 = *((_OWORD *)v24 + 7);
  *((_OWORD *)v23 + 6) = *((_OWORD *)v24 + 6);
  *((_OWORD *)v23 + 7) = v33;
  *((_OWORD *)v23 + 8) = *((_OWORD *)v24 + 8);
  v23[18] = v24[18];
  *(_OWORD *)(v23 + 19) = *(_OWORD *)(v24 + 19);
  v34 = *(int *)(v25 + 60);
  v35 = (char *)v23 + v34;
  v36 = (char *)v24 + v34;
  v37 = *(_OWORD *)((char *)v24 + v34 + 16);
  *(_OWORD *)v35 = *(_OWORD *)((char *)v24 + v34);
  *((_OWORD *)v35 + 1) = v37;
  v38 = *(_OWORD *)((char *)v24 + v34 + 48);
  *((_OWORD *)v35 + 2) = *(_OWORD *)((char *)v24 + v34 + 32);
  *((_OWORD *)v35 + 3) = v38;
  v39 = *(_OWORD *)((char *)v24 + v34 + 80);
  *((_OWORD *)v35 + 4) = *(_OWORD *)((char *)v24 + v34 + 64);
  *((_OWORD *)v35 + 5) = v39;
  v40 = *(_OWORD *)((char *)v24 + v34 + 112);
  *((_OWORD *)v35 + 6) = *(_OWORD *)((char *)v24 + v34 + 96);
  *((_OWORD *)v35 + 7) = v40;
  *((_QWORD *)v35 + 16) = *(_QWORD *)((char *)v24 + v34 + 128);
  v41 = (int *)type metadata accessor for WalrusPCSEncryptionMaterial(0);
  v42 = v41[13];
  v43 = &v35[v42];
  v44 = &v36[v42];
  v45 = type metadata accessor for P384.KeyAgreement.PublicKey(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v45 - 8) + 32))(v43, v44, v45);
  *(_OWORD *)&v35[v41[14]] = *(_OWORD *)&v36[v41[14]];
  *(_QWORD *)&v35[v41[15]] = *(_QWORD *)&v36[v41[15]];
  *(_OWORD *)&v35[v41[16]] = *(_OWORD *)&v36[v41[16]];
  (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
  return a1;
}

uint64_t sub_100189FB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100189FC0);
}

uint64_t sub_100189FC0(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_1000080B4(&qword_1002911E0);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 56)], a2, v8);
  }
}

uint64_t sub_10018A040(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10018A04C);
}

char *sub_10018A04C(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = sub_1000080B4(&qword_1002911E0);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 56)], a2, a2, v7);
  }
  return result;
}

void sub_10018A0C4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[11];

  v4[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[1] = &unk_10021FB28;
  v4[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[3] = &unk_10021FB40;
  v4[4] = &unk_10021FB58;
  v4[5] = &unk_10021FB40;
  v4[6] = &unk_10021FB40;
  v4[7] = &unk_10021FB70;
  v4[8] = &unk_10021FB88;
  v4[9] = (char *)&value witness table for Builtin.BridgeObject + 64;
  sub_10018A180(319);
  if (v3 <= 0x3F)
  {
    v4[10] = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 256, 11, v4, a1 + 16);
  }
}

void sub_10018A180(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100295760)
  {
    v2 = type metadata accessor for WalrusWebAccessInfo(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100295760);
  }
}

uint64_t storeEnumTagSinglePayload for PushMessage.Command(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_10018A220 + 4 * byte_10021FADD[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_10018A254 + 4 * byte_10021FAD8[v4]))();
}

uint64_t sub_10018A254(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10018A25C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10018A264);
  return result;
}

uint64_t sub_10018A270(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10018A278);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_10018A27C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10018A284(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PushMessage.Command()
{
  return &type metadata for PushMessage.Command;
}

unint64_t sub_10018A2A4()
{
  unint64_t result;

  result = qword_1002957B8;
  if (!qword_1002957B8)
  {
    result = swift_getWitnessTable(&unk_10021FC20, &type metadata for PushMessage.Command);
    atomic_store(result, (unint64_t *)&qword_1002957B8);
  }
  return result;
}

uint64_t sub_10018A2E8(uint64_t a1, void (*a2)(_QWORD *), uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  void *v49;
  Class v50;
  uint64_t v52;
  uint64_t v53;
  NSObject *v54;
  os_log_type_t v55;
  uint8_t *v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  Class isa;
  char *v62;
  id v63;
  char *v64;
  _QWORD *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void (*v71)(_QWORD *);
  uint64_t v72;
  _QWORD aBlock[5];
  uint64_t v74;
  uint64_t v75;

  v4 = v3;
  v71 = a2;
  v72 = a3;
  v67 = a1;
  v5 = sub_1000080B4((uint64_t *)&unk_10028CCF0);
  __chkstk_darwin(v5, v6);
  v8 = (Class *)((char *)&isa - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v70 = type metadata accessor for UUID(0);
  v68 = *(_QWORD *)(v70 - 8);
  v9 = *(_QWORD *)(v68 + 64);
  __chkstk_darwin(v70, v10);
  v66 = (char *)&isa - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = type metadata accessor for Date(0);
  v11 = *(_QWORD *)(v69 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  v14 = __chkstk_darwin(v69, v13);
  v64 = (char *)&isa - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14, v15);
  v17 = (char *)&isa - v16;
  v18 = sub_1000080B4(&qword_1002958F0);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18, v20);
  v22 = (char *)&isa - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = v4;
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v22, (uint64_t)v4 + OBJC_IVAR____TtC13appleaccountd24DaemonSecurityController__cdpContextProvider, v18);
  Dependency.wrappedValue.getter(aBlock, v18);
  (*(void (**)(char *, uint64_t))(v19 + 8))(v22, v18);
  v23 = objc_msgSend((id)objc_opt_self(CDPContext), "contextForPrimaryAccount");
  sub_100006F58(aBlock);
  if (v23)
  {
    v63 = v23;
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v24 = type metadata accessor for Logger(0);
    v25 = sub_100005288(v24, (uint64_t)qword_1002A89D8);
    v26 = Logger.logObject.getter(v25);
    v27 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v26, v27))
    {
      v28 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v28 = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "Creating recovery keys.", v28, 2u);
      swift_slowDealloc(v28, -1, -1);
    }

    v29 = v17;
    v62 = v17;
    Date.init()(v30);
    v65 = (_QWORD *)v65[7];
    v31 = v67;
    isa = UUID._bridgeToObjectiveC()().super.isa;
    v32 = v64;
    v33 = v29;
    v34 = v69;
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v64, v33, v69);
    v35 = v11;
    v36 = v68;
    v37 = v66;
    v38 = v70;
    (*(void (**)(char *, uint64_t, uint64_t))(v68 + 16))(v66, v31, v70);
    v39 = *(unsigned __int8 *)(v35 + 80);
    v40 = (v39 + 16) & ~v39;
    v41 = *(unsigned __int8 *)(v36 + 80);
    v42 = (v12 + v41 + v40) & ~v41;
    v43 = (v9 + v42 + 7) & 0xFFFFFFFFFFFFFFF8;
    v44 = swift_allocObject(&unk_10026C700, v43 + 16, v39 | v41 | 7);
    (*(void (**)(uint64_t, char *, uint64_t))(v35 + 32))(v44 + v40, v32, v34);
    (*(void (**)(uint64_t, char *, uint64_t))(v36 + 32))(v44 + v42, v37, v38);
    v45 = (_QWORD *)(v44 + v43);
    v46 = v72;
    *v45 = v71;
    v45[1] = v46;
    aBlock[4] = sub_10018DFB4;
    v74 = v44;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100043E24;
    aBlock[3] = &unk_10026C718;
    v47 = _Block_copy(aBlock);
    v48 = v74;
    swift_retain(v46);
    swift_release(v48);
    v49 = v63;
    v50 = isa;
    objc_msgSend(v65, "createRecoveryKeyWithContext:forUUID:completion:", v63, isa, v47);
    _Block_release(v47);

    return (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v62, v34);
  }
  else
  {
    if (qword_10028ADB0 != -1)
      swift_once(&qword_10028ADB0, sub_100046CC8);
    v52 = type metadata accessor for Logger(0);
    v53 = sub_100005288(v52, (uint64_t)qword_1002A8990);
    v54 = Logger.logObject.getter(v53);
    v55 = static os_log_type_t.error.getter(v54);
    if (os_log_type_enabled(v54, v55))
    {
      v56 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v56 = 0;
      _os_log_impl((void *)&_mh_execute_header, v54, v55, "Not logged in to AppleAccount, unable to fetch", v56, 2u);
      swift_slowDealloc(v56, -1, -1);
    }

    type metadata accessor for AACustodianError(0);
    v58 = v57;
    v75 = -7002;
    v59 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
    v60 = sub_100005150((unint64_t *)&qword_10028B640, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianError, (uint64_t)&unk_100218378);
    _BridgedStoredNSError.init(_:userInfo:)(aBlock, &v75, v59, v58, v60);
    *v8 = aBlock[0];
    swift_storeEnumTagMultiPayload(v8, v5, 1);
    v71(v8);
    return sub_10018DF70((uint64_t)v8);
  }
}

uint64_t sub_10018A81C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t *), uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t, uint64_t);
  uint64_t v36;
  NSObject *v37;
  __n128 v38;
  os_log_type_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  double v43;
  void (*v44)(char *, uint64_t);
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  void (*v49)(char *, uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  NSObject *v57;
  os_log_type_t v58;
  uint8_t *v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  void *v66;
  void (*v67)(char *, uint64_t, uint64_t);
  id v68;
  NSObject *v69;
  os_log_type_t v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  id v78;
  char *v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  id v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  NSObject *v87;
  os_log_type_t v88;
  uint8_t *v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  id v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  id v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  id v103;
  uint64_t *v104;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  char *v109;
  void (*v110)(char *, uint64_t, uint64_t);
  void *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t v115;
  void (*v116)(uint64_t *);
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;

  v115 = a6;
  v116 = a5;
  v119 = a2;
  v111 = a1;
  v113 = sub_1000080B4((uint64_t *)&unk_10028CCF0);
  __chkstk_darwin(v113, v8);
  v114 = (uint64_t *)((char *)&v106 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = type metadata accessor for UUID(0);
  v120 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10, v11);
  v108 = (char *)&v106 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v12, v14);
  v17 = (char *)&v106 - v16;
  v19 = __chkstk_darwin(v15, v18);
  v118 = (char *)&v106 - v20;
  __chkstk_darwin(v19, v21);
  v23 = (char *)&v106 - v22;
  v24 = type metadata accessor for Date(0);
  v25 = *(_QWORD *)(v24 - 8);
  v27 = __chkstk_darwin(v24, v26);
  v29 = (char *)&v106 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27, v30);
  v32 = (char *)&v106 - v31;
  if (qword_10028ADC8 != -1)
    swift_once(&qword_10028ADC8, sub_100046D2C);
  v33 = type metadata accessor for Logger(0);
  v34 = sub_100005288(v33, (uint64_t)qword_1002A89D8);
  (*(void (**)(char *, uint64_t, uint64_t))(v25 + 16))(v32, a3, v24);
  v35 = *(void (**)(char *, uint64_t, uint64_t))(v120 + 16);
  v117 = a4;
  v110 = v35;
  v36 = ((uint64_t (*)(char *, uint64_t, uint64_t))v35)(v23, a4, v10);
  v112 = v34;
  v37 = Logger.logObject.getter(v36);
  v39 = static os_log_type_t.default.getter(v38);
  if (os_log_type_enabled(v37, v39))
  {
    v40 = swift_slowAlloc(22, -1);
    v109 = v17;
    v41 = v40;
    v42 = swift_slowAlloc(32, -1);
    v106 = v42;
    v122 = v42;
    *(_DWORD *)v41 = 134218242;
    v107 = v10;
    Date.init()(v42);
    v43 = Date.timeIntervalSince(_:)(v32);
    v44 = *(void (**)(char *, uint64_t))(v25 + 8);
    v44(v29, v24);
    v121 = *(_QWORD *)&v43;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v121, &v122);
    v45 = ((uint64_t (*)(char *, uint64_t))v44)(v32, v24);
    *(_WORD *)(v41 + 12) = 2080;
    v46 = UUID.uuidString.getter(v45);
    v48 = v47;
    v121 = sub_1001DEF4C(v46, v47, &v122);
    v10 = v107;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v121, &v122);
    swift_bridgeObjectRelease(v48);
    v49 = *(void (**)(char *, uint64_t))(v120 + 8);
    v49(v23, v10);
    _os_log_impl((void *)&_mh_execute_header, v37, v39, "⏰ %f secs to createRecoveryKey %s", (uint8_t *)v41, 0x16u);
    v50 = v106;
    swift_arrayDestroy(v106, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v50, -1, -1);
    v51 = v41;
    v17 = v109;
    swift_slowDealloc(v51, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v25 + 8))(v32, v24);
    v49 = *(void (**)(char *, uint64_t))(v120 + 8);
    v49(v23, v10);
  }

  v54 = v118;
  v53 = v119;
  v55 = v117;
  if (v119)
  {
    v56 = swift_errorRetain(v119);
    v57 = Logger.logObject.getter(v56);
    v58 = static os_log_type_t.error.getter(v57);
    if (os_log_type_enabled(v57, v58))
    {
      v59 = (uint8_t *)swift_slowAlloc(12, -1);
      v60 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v59 = 138412290;
      v61 = _convertErrorToNSError(_:)(v53);
      v122 = v61;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v122, &v123);
      *v60 = v61;
      _os_log_impl((void *)&_mh_execute_header, v57, v58, "Error building recovery key: %@", v59, 0xCu);
      v62 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v60, 1, v62);
      swift_slowDealloc(v60, -1, -1);
      swift_slowDealloc(v59, -1, -1);
    }

    v63 = v113;
    v64 = v114;
    *v114 = v53;
    swift_storeEnumTagMultiPayload(v64, v63, 1);
    swift_errorRetain(v53);
    v116(v64);
    swift_errorRelease(v53);
LABEL_10:
    v65 = (uint64_t)v64;
    return sub_10018DF70(v65);
  }
  v66 = v111;
  if (!v111)
  {
    v87 = Logger.logObject.getter(v52);
    v88 = static os_log_type_t.error.getter(v87);
    if (os_log_type_enabled(v87, v88))
    {
      v89 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v89 = 0;
      _os_log_impl((void *)&_mh_execute_header, v87, v88, "No recovery keys returned.", v89, 2u);
      swift_slowDealloc(v89, -1, -1);
    }

    type metadata accessor for AACustodianError(0);
    v91 = v90;
    v121 = -7000;
    v92 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
    v93 = sub_100005150((unint64_t *)&qword_10028B640, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianError, (uint64_t)&unk_100218378);
    _BridgedStoredNSError.init(_:userInfo:)(&v122, &v121, v92, v91, v93);
    v94 = v113;
    v64 = v114;
    *v114 = v122;
    swift_storeEnumTagMultiPayload(v64, v94, 1);
    v116(v64);
    goto LABEL_10;
  }
  v67 = v110;
  v110(v118, v117, v10);
  v67(v17, v55, v10);
  v68 = v66;
  v69 = Logger.logObject.getter(v68);
  v70 = static os_log_type_t.info.getter();
  v71 = v70;
  if (os_log_type_enabled(v69, v70))
  {
    v72 = swift_slowAlloc(32, -1);
    v120 = swift_slowAlloc(96, -1);
    v122 = v120;
    *(_DWORD *)v72 = 136315650;
    v73 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v109 = v17;
    v74 = v73;
    LODWORD(v119) = v71;
    v75 = dispatch thunk of CustomStringConvertible.description.getter(v10, v73);
    v77 = v76;
    v121 = sub_1001DEF4C(v75, v76, &v122);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v121, &v122);
    swift_bridgeObjectRelease(v77);
    v49(v54, v10);
    *(_WORD *)(v72 + 12) = 2080;
    v78 = objc_msgSend(v68, "custodianUUID");
    v79 = v108;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v78);

    v80 = dispatch thunk of CustomStringConvertible.description.getter(v10, v74);
    v82 = v81;
    v49(v79, v10);
    v121 = sub_1001DEF4C(v80, v82, &v122);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v121, &v122);

    swift_bridgeObjectRelease(v82);
    *(_WORD *)(v72 + 22) = 2080;
    v83 = objc_msgSend(v68, "custodianUUID");
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v83);

    v84 = v109;
    LOBYTE(v83) = static UUID.== infix(_:_:)(v109);
    v49(v79, v10);
    if ((v83 & 1) != 0)
      v85 = 8756450;
    else
      v85 = 9215458;
    v121 = sub_1001DEF4C(v85, 0xA300000000000000, &v122);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v121, &v122);

    swift_bridgeObjectRelease(0xA300000000000000);
    v49(v84, v10);

    _os_log_impl((void *)&_mh_execute_header, v69, (os_log_type_t)v119, "Recovery keys created successfully. UUID Sent:%s Received:%s Matches:%s ", (uint8_t *)v72, 0x20u);
    v86 = v120;
    swift_arrayDestroy(v120, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v86, -1, -1);
    swift_slowDealloc(v72, -1, -1);

  }
  else
  {
    v49(v54, v10);

    v49(v17, v10);
  }
  v95 = objc_msgSend(v68, "wrappingKey");
  v96 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v95);
  v98 = v97;

  v99 = objc_msgSend(v68, "wrappedRKC");
  v100 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v99);
  v102 = v101;

  v103 = objc_msgSend(v68, "custodianUUID");
  type metadata accessor for RecoveryKeys(0);
  v104 = v114;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v103);

  *v104 = v96;
  v104[1] = v98;
  v104[2] = v100;
  v104[3] = v102;
  swift_storeEnumTagMultiPayload(v104, v113, 0);
  v116(v104);

  v65 = (uint64_t)v104;
  return sub_10018DF70(v65);
}

void sub_10018B194(uint64_t a1, void (*a2)(_QWORD), uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  Class v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  NSObject *v50;
  os_log_type_t v51;
  uint8_t *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  void *v57;
  Class isa;
  id v59;
  char *v60;
  id v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void (*v67)(_QWORD);
  uint64_t v68;
  _QWORD aBlock[5];
  uint64_t v70;
  uint64_t v71;

  v4 = v3;
  v67 = a2;
  v68 = a3;
  v64 = a1;
  v5 = type metadata accessor for UUID(0);
  v65 = *(_QWORD *)(v5 - 8);
  v66 = v5;
  v6 = *(_QWORD *)(v65 + 64);
  __chkstk_darwin(v5, v7);
  v63 = (char *)&isa - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = type metadata accessor for Date(0);
  v8 = *(_QWORD *)(v62 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  v11 = __chkstk_darwin(v62, v10);
  __chkstk_darwin(v11, v12);
  v14 = (char *)&isa - v13;
  v15 = sub_1000080B4(&qword_1002958F0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15, v17);
  v19 = (char *)&isa - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = v4;
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v19, v4 + OBJC_IVAR____TtC13appleaccountd24DaemonSecurityController__cdpContextProvider, v15);
  Dependency.wrappedValue.getter(aBlock, v15);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v19, v15);
  v21 = objc_msgSend((id)objc_opt_self(CDPContext), "contextForPrimaryAccount");
  sub_100006F58(aBlock);
  if (v21)
  {
    v61 = v21;
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v22 = type metadata accessor for Logger(0);
    v23 = sub_100005288(v22, (uint64_t)qword_1002A89D8);
    v24 = Logger.logObject.getter(v23);
    v25 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v24, v25))
    {
      v26 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Deleting recovery keys.", v26, 2u);
      swift_slowDealloc(v26, -1, -1);
    }

    v27 = v14;
    v60 = v14;
    Date.init()(v28);
    v59 = *(id *)(v20 + 56);
    v29 = v64;
    isa = UUID._bridgeToObjectiveC()().super.isa;
    v30 = (char *)&isa - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
    v31 = v62;
    (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v30, v27, v62);
    v32 = v8;
    v34 = v65;
    v33 = v66;
    v35 = v63;
    (*(void (**)(char *, uint64_t, uint64_t))(v65 + 16))(v63, v29, v66);
    v36 = *(unsigned __int8 *)(v32 + 80);
    v37 = (v36 + 16) & ~v36;
    v38 = *(unsigned __int8 *)(v34 + 80);
    v39 = (v9 + v38 + v37) & ~v38;
    v40 = (v6 + v39 + 7) & 0xFFFFFFFFFFFFFFF8;
    v41 = swift_allocObject(&unk_10026C6B0, v40 + 16, v36 | v38 | 7);
    (*(void (**)(uint64_t, char *, uint64_t))(v32 + 32))(v41 + v37, v30, v31);
    (*(void (**)(uint64_t, char *, uint64_t))(v34 + 32))(v41 + v39, v35, v33);
    v42 = (_QWORD *)(v41 + v40);
    v43 = v68;
    *v42 = v67;
    v42[1] = v43;
    aBlock[4] = sub_10018DEF0;
    v70 = v41;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1001DC548;
    aBlock[3] = &unk_10026C6C8;
    v44 = _Block_copy(aBlock);
    v45 = v70;
    swift_retain(v43);
    swift_release(v45);
    v46 = isa;
    v47 = v61;
    objc_msgSend(v59, "deleteRecoveryKeyWithContext:forUUID:completion:", v61, isa, v44);
    _Block_release(v44);

    (*(void (**)(char *, uint64_t))(v32 + 8))(v60, v31);
  }
  else
  {
    if (qword_10028ADB0 != -1)
      swift_once(&qword_10028ADB0, sub_100046CC8);
    v48 = type metadata accessor for Logger(0);
    v49 = sub_100005288(v48, (uint64_t)qword_1002A8990);
    v50 = Logger.logObject.getter(v49);
    v51 = static os_log_type_t.error.getter(v50);
    if (os_log_type_enabled(v50, v51))
    {
      v52 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v52 = 0;
      _os_log_impl((void *)&_mh_execute_header, v50, v51, "Not logged in to AppleAccount, unable to fetch", v52, 2u);
      swift_slowDealloc(v52, -1, -1);
    }

    type metadata accessor for AACustodianError(0);
    v54 = v53;
    v71 = -7002;
    v55 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
    v56 = sub_100005150((unint64_t *)&qword_10028B640, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianError, (uint64_t)&unk_100218378);
    _BridgedStoredNSError.init(_:userInfo:)(aBlock, &v71, v55, v54, v56);
    v57 = (void *)aBlock[0];
    v67(aBlock[0]);

  }
}

uint64_t sub_10018B660(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t), uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t, uint64_t);
  uint64_t v30;
  NSObject *v31;
  __n128 v32;
  os_log_type_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  void (*v38)(char *, uint64_t);
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  void (*v43)(char *, uint64_t);
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  NSObject *v50;
  uint64_t v51;
  os_log_type_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  NSObject *v63;
  uint64_t v64;
  uint8_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  void (*v71)(uint64_t);
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void (*v78)(uint64_t);
  void (*v79)(char *, uint64_t, uint64_t);
  uint64_t v80;
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;

  v77 = a5;
  v78 = a4;
  v84 = a1;
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v10 = __chkstk_darwin(v7, v9);
  v83 = (char *)&v73 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v10, v12);
  v82 = (char *)&v73 - v14;
  __chkstk_darwin(v13, v15);
  v17 = (char *)&v73 - v16;
  v18 = type metadata accessor for Date(0);
  v19 = *(_QWORD *)(v18 - 8);
  v21 = __chkstk_darwin(v18, v20);
  v23 = (char *)&v73 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21, v24);
  v26 = (char *)&v73 - v25;
  if (qword_10028ADC8 != -1)
    swift_once(&qword_10028ADC8, sub_100046D2C);
  v27 = type metadata accessor for Logger(0);
  v28 = sub_100005288(v27, (uint64_t)qword_1002A89D8);
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v26, a2, v18);
  v29 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v81 = a3;
  v79 = v29;
  v30 = ((uint64_t (*)(char *, uint64_t, uint64_t))v29)(v17, a3, v7);
  v80 = v28;
  v31 = Logger.logObject.getter(v30);
  v33 = static os_log_type_t.default.getter(v32);
  if (os_log_type_enabled(v31, v33))
  {
    v34 = swift_slowAlloc(22, -1);
    v76 = v7;
    v35 = v34;
    v36 = swift_slowAlloc(32, -1);
    v75 = v36;
    v86 = (char *)v36;
    *(_DWORD *)v35 = 134218242;
    v74 = v8;
    Date.init()(v36);
    v37 = Date.timeIntervalSince(_:)(v26);
    v38 = *(void (**)(char *, uint64_t))(v19 + 8);
    v38(v23, v18);
    v85 = *(_QWORD *)&v37;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v85, &v86);
    v39 = ((uint64_t (*)(char *, uint64_t))v38)(v26, v18);
    *(_WORD *)(v35 + 12) = 2080;
    v40 = UUID.uuidString.getter(v39);
    v42 = v41;
    v85 = sub_1001DEF4C(v40, v41, (uint64_t *)&v86);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v85, &v86);
    swift_bridgeObjectRelease(v42);
    v43 = *(void (**)(char *, uint64_t))(v74 + 8);
    v43(v17, v76);
    _os_log_impl((void *)&_mh_execute_header, v31, v33, "⏰ %f secs to deleteRecoveryKey %s", (uint8_t *)v35, 0x16u);
    v44 = v75;
    swift_arrayDestroy(v75, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v44, -1, -1);
    v45 = v35;
    v7 = v76;
    swift_slowDealloc(v45, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v19 + 8))(v26, v18);
    v43 = *(void (**)(char *, uint64_t))(v8 + 8);
    v43(v17, v7);
  }

  v46 = v83;
  v47 = v84;
  v48 = v82;
  if (v84)
  {
    v79(v83, v81, v7);
    v49 = swift_errorRetain(v47);
    v50 = Logger.logObject.getter(v49);
    v51 = v7;
    v52 = static os_log_type_t.error.getter(v50);
    if (os_log_type_enabled(v50, v52))
    {
      v53 = swift_slowAlloc(22, -1);
      v54 = (uint64_t *)swift_slowAlloc(8, -1);
      v82 = (char *)swift_slowAlloc(32, -1);
      v86 = v82;
      *(_DWORD *)v53 = 138412546;
      v55 = _convertErrorToNSError(_:)(v47);
      v85 = v55;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v85, &v86);
      *v54 = v55;
      *(_WORD *)(v53 + 12) = 2080;
      v56 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v57 = dispatch thunk of CustomStringConvertible.description.getter(v51, v56);
      v59 = v58;
      v85 = sub_1001DEF4C(v57, v58, (uint64_t *)&v86);
      v47 = v84;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v85, &v86);
      swift_bridgeObjectRelease(v59);
      v43(v46, v51);
      _os_log_impl((void *)&_mh_execute_header, v50, v52, "Error deleting recovery key: %@ for %s", (uint8_t *)v53, 0x16u);
      v60 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v54, 1, v60);
      swift_slowDealloc(v54, -1, -1);
      v61 = v82;
      swift_arrayDestroy(v82, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v61, -1, -1);
      swift_slowDealloc(v53, -1, -1);
    }
    else
    {
      v43(v46, v51);
    }

    v71 = v78;
    swift_errorRetain(v47);
    v71(v47);
    swift_errorRelease(v47);
    return swift_errorRelease(v47);
  }
  else
  {
    v62 = ((uint64_t (*)(char *, uint64_t, uint64_t))v79)(v82, v81, v7);
    v63 = Logger.logObject.getter(v62);
    v64 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v63, (os_log_type_t)v64))
    {
      v65 = (uint8_t *)swift_slowAlloc(12, -1);
      v66 = swift_slowAlloc(32, -1);
      v86 = (char *)v66;
      *(_DWORD *)v65 = 136315138;
      v67 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v68 = dispatch thunk of CustomStringConvertible.description.getter(v7, v67);
      v70 = v69;
      v85 = sub_1001DEF4C(v68, v69, (uint64_t *)&v86);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v85, &v86);
      swift_bridgeObjectRelease(v70);
      v43(v48, v7);
      _os_log_impl((void *)&_mh_execute_header, v63, (os_log_type_t)v64, "Recovery keys deleted successfully for %s", v65, 0xCu);
      swift_arrayDestroy(v66, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v66, -1, -1);
      swift_slowDealloc(v65, -1, -1);
    }
    else
    {
      v43(v48, v7);
    }

    return ((uint64_t (*)(_QWORD))v78)(0);
  }
}

void sub_10018BCE0(uint64_t a1, void (*a2)(_QWORD, _QWORD), uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  objc_class *v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint64_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint8_t *v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  uint8_t *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  void *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  void *v70;
  Class v71;
  _QWORD v72[2];
  Class isa;
  id v74;
  void (*v75)(_QWORD, _QWORD);
  uint64_t v76;
  _QWORD *v77;
  char *v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t aBlock[5];
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;

  v4 = v3;
  v83 = a1;
  v7 = type metadata accessor for Date(0);
  v81 = *(_QWORD *)(v7 - 8);
  v82 = v7;
  v9 = __chkstk_darwin(v7, v8);
  v79 = v10;
  v80 = (char *)v72 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9, v11);
  v84 = (char *)v72 - v12;
  v13 = type metadata accessor for UUID(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(_QWORD *)(v14 + 64);
  v17 = __chkstk_darwin(v13, v16);
  v78 = (char *)v72 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17, v18);
  v20 = (char *)v72 - v19;
  v21 = sub_1000080B4(&qword_1002958F0);
  v22 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21, v23);
  v25 = (char *)v72 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v77 = v4;
  (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v25, (uint64_t)v4 + OBJC_IVAR____TtC13appleaccountd24DaemonSecurityController__cdpContextProvider, v21);
  Dependency.wrappedValue.getter(aBlock, v21);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v25, v21);
  v26 = objc_msgSend((id)objc_opt_self(CDPContext), "contextForPrimaryAccount");
  sub_100006F58(aBlock);
  if (v26)
  {
    v74 = v26;
    v76 = a3;
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v75 = a2;
    v27 = type metadata accessor for Logger(0);
    sub_100005288(v27, (uint64_t)qword_1002A89D8);
    v28 = v14;
    v29 = *(objc_class **)(v14 + 16);
    v30 = ((uint64_t (*)(char *, uint64_t, uint64_t))v29)(v20, v83, v13);
    v31 = Logger.logObject.getter(v30);
    v32 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v31, v32))
    {
      v33 = swift_slowAlloc(12, -1);
      isa = v29;
      v34 = (uint8_t *)v33;
      v35 = swift_slowAlloc(32, -1);
      aBlock[0] = v35;
      *(_DWORD *)v34 = 136315138;
      v72[1] = v34 + 4;
      v36 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v37 = dispatch thunk of CustomStringConvertible.description.getter(v13, v36);
      v39 = v38;
      v87 = sub_1001DEF4C(v37, v38, aBlock);
      v28 = v14;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v87, &v88);
      swift_bridgeObjectRelease(v39);
      (*(void (**)(char *, uint64_t))(v14 + 8))(v20, v13);
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "Check Custodian Recovery key exists for otPeerID: %s", v34, 0xCu);
      swift_arrayDestroy(v35, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v35, -1, -1);
      v40 = v34;
      v29 = isa;
      swift_slowDealloc(v40, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v14 + 8))(v20, v13);
    }

    v51 = v84;
    Date.init()(v52);
    v77 = (_QWORD *)v77[7];
    v53 = v83;
    isa = UUID._bridgeToObjectiveC()().super.isa;
    v55 = v80;
    v54 = v81;
    v56 = v82;
    (*(void (**)(char *, char *, uint64_t))(v81 + 16))(v80, v51, v82);
    v57 = v78;
    ((void (*)(char *, uint64_t, uint64_t))v29)(v78, v53, v13);
    v58 = *(unsigned __int8 *)(v54 + 80);
    v59 = (v58 + 16) & ~v58;
    v60 = *(unsigned __int8 *)(v28 + 80);
    v61 = (v79 + v60 + v59) & ~v60;
    v62 = v13;
    v63 = v28;
    v64 = (v15 + v61 + 7) & 0xFFFFFFFFFFFFFFF8;
    v65 = swift_allocObject(&unk_10026C660, v64 + 16, v58 | v60 | 7);
    (*(void (**)(uint64_t, char *, uint64_t))(v54 + 32))(v65 + v59, v55, v56);
    (*(void (**)(uint64_t, char *, uint64_t))(v63 + 32))(v65 + v61, v57, v62);
    v66 = (_QWORD *)(v65 + v64);
    v67 = v76;
    *v66 = v75;
    v66[1] = v67;
    aBlock[4] = (uint64_t)sub_10018DE5C;
    v86 = v65;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_100045BC0;
    aBlock[3] = (uint64_t)&unk_10026C678;
    v68 = _Block_copy(aBlock);
    v69 = v86;
    swift_retain(v67);
    swift_release(v69);
    v71 = isa;
    v70 = v74;
    objc_msgSend(v77, "checkCustodianRecoveryKey:withContext:completion:", isa, v74, v68);
    _Block_release(v68);

    (*(void (**)(char *, uint64_t))(v54 + 8))(v84, v56);
  }
  else
  {
    if (qword_10028ADB0 != -1)
      swift_once(&qword_10028ADB0, sub_100046CC8);
    v41 = type metadata accessor for Logger(0);
    v42 = sub_100005288(v41, (uint64_t)qword_1002A8990);
    v43 = Logger.logObject.getter(v42);
    v44 = static os_log_type_t.error.getter(v43);
    if (os_log_type_enabled(v43, v44))
    {
      v45 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v45 = 0;
      _os_log_impl((void *)&_mh_execute_header, v43, v44, "Not logged in to AppleAccount, unable to fetch. Check presence of Custodian Recovery key in Octagon is aborted.", v45, 2u);
      swift_slowDealloc(v45, -1, -1);
    }

    type metadata accessor for AACustodianError(0);
    v47 = v46;
    v87 = -7002;
    v48 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
    v49 = sub_100005150((unint64_t *)&qword_10028B640, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianError, (uint64_t)&unk_100218378);
    _BridgedStoredNSError.init(_:userInfo:)(aBlock, &v87, v48, v47, v49);
    v50 = (void *)aBlock[0];
    a2(0, aBlock[0]);

  }
}

uint64_t sub_10018C2D4(int a1, char *a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD, char *), uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(char *, uint64_t, uint64_t);
  uint64_t v31;
  NSObject *v32;
  __n128 v33;
  os_log_type_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  void (*v39)(char *, uint64_t);
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  void (*v46)(char *, uint64_t);
  os_log_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  NSObject *v66;
  os_log_type_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v75;
  os_log_t v76;
  uint64_t v77;
  char *v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  void (*v84)(_QWORD, char *);
  int v85;
  char *v86;
  uint64_t v87;
  char *v88;

  v80 = a6;
  v84 = a5;
  v85 = a1;
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  v12 = __chkstk_darwin(v9, v11);
  v83 = (char *)&v75 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v12, v14);
  v78 = (char *)&v75 - v16;
  __chkstk_darwin(v15, v17);
  v86 = (char *)&v75 - v18;
  v19 = type metadata accessor for Date(0);
  v20 = *(_QWORD *)(v19 - 8);
  v22 = __chkstk_darwin(v19, v21);
  v24 = (char *)&v75 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22, v25);
  v27 = (char *)&v75 - v26;
  if (qword_10028ADC8 != -1)
    swift_once(&qword_10028ADC8, sub_100046D2C);
  v28 = type metadata accessor for Logger(0);
  v29 = sub_100005288(v28, (uint64_t)qword_1002A89D8);
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v27, a3, v19);
  v30 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v82 = a4;
  v31 = v30(v86, a4, v9);
  v81 = v29;
  v32 = Logger.logObject.getter(v31);
  v34 = static os_log_type_t.default.getter(v33);
  v79 = v34;
  if (os_log_type_enabled(v32, v34))
  {
    v35 = swift_slowAlloc(22, -1);
    v76 = v32;
    v36 = v35;
    v37 = swift_slowAlloc(32, -1);
    v77 = v37;
    v88 = (char *)v37;
    *(_DWORD *)v36 = 134218242;
    v75 = v10;
    Date.init()(v37);
    v38 = Date.timeIntervalSince(_:)(v27);
    v39 = *(void (**)(char *, uint64_t))(v20 + 8);
    v39(v24, v19);
    v87 = *(_QWORD *)&v38;
    v40 = v83;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v87, &v88);
    v39(v27, v19);
    *(_WORD *)(v36 + 12) = 2080;
    v41 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v42 = v86;
    v43 = dispatch thunk of CustomStringConvertible.description.getter(v9, v41);
    v45 = v44;
    v87 = sub_1001DEF4C(v43, v44, (uint64_t *)&v88);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v87, &v88);
    swift_bridgeObjectRelease(v45);
    v46 = *(void (**)(char *, uint64_t))(v75 + 8);
    v46(v42, v9);
    v47 = v76;
    _os_log_impl((void *)&_mh_execute_header, v76, (os_log_type_t)v79, "⏰ %f secs to checkCustodianRecoveryKey %s", (uint8_t *)v36, 0x16u);
    v48 = v77;
    swift_arrayDestroy(v77, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v48, -1, -1);
    swift_slowDealloc(v36, -1, -1);

    v49 = v82;
    if (a2)
    {
LABEL_5:
      v30(v40, v49, v9);
      v50 = swift_errorRetain(a2);
      v51 = Logger.logObject.getter(v50);
      v52 = static os_log_type_t.error.getter(v51);
      if (os_log_type_enabled(v51, v52))
      {
        v53 = swift_slowAlloc(22, -1);
        v86 = a2;
        v54 = v53;
        v55 = (uint64_t *)swift_slowAlloc(8, -1);
        v83 = (char *)swift_slowAlloc(32, -1);
        v88 = v83;
        *(_DWORD *)v54 = 138412546;
        v56 = _convertErrorToNSError(_:)(v86);
        v87 = v56;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v87, &v88);
        *v55 = v56;
        *(_WORD *)(v54 + 12) = 2080;
        v57 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v58 = dispatch thunk of CustomStringConvertible.description.getter(v9, v57);
        v60 = v59;
        v87 = sub_1001DEF4C(v58, v59, (uint64_t *)&v88);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v87, &v88);
        swift_bridgeObjectRelease(v60);
        v46(v40, v9);
        _os_log_impl((void *)&_mh_execute_header, v51, v52, "Error checking Custodian Recovery key: %@ for %s", (uint8_t *)v54, 0x16u);
        v61 = sub_1000080B4((uint64_t *)&unk_10028BC20);
        swift_arrayDestroy(v55, 1, v61);
        swift_slowDealloc(v55, -1, -1);
        v62 = v83;
        swift_arrayDestroy(v83, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v62, -1, -1);
        v63 = v54;
        a2 = v86;
        swift_slowDealloc(v63, -1, -1);
      }
      else
      {
        v46(v40, v9);
      }

      swift_errorRetain(a2);
      v84(v85 & 1, a2);
      swift_errorRelease(a2);
      return swift_errorRelease(a2);
    }
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v20 + 8))(v27, v19);
    v46 = *(void (**)(char *, uint64_t))(v10 + 8);
    v46(v86, v9);

    v40 = v83;
    v49 = v82;
    if (a2)
      goto LABEL_5;
  }
  v64 = v78;
  v65 = v30(v78, v49, v9);
  v66 = Logger.logObject.getter(v65);
  v67 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v66, v67))
  {
    v68 = swift_slowAlloc(18, -1);
    v69 = swift_slowAlloc(32, -1);
    v88 = (char *)v69;
    *(_DWORD *)v68 = 67109378;
    LODWORD(v87) = v85 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v87, (char *)&v87 + 4);
    *(_WORD *)(v68 + 8) = 2080;
    v70 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v71 = dispatch thunk of CustomStringConvertible.description.getter(v9, v70);
    v73 = v72;
    v87 = sub_1001DEF4C(v71, v72, (uint64_t *)&v88);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v87, &v88);
    swift_bridgeObjectRelease(v73);
    v46(v64, v9);
    _os_log_impl((void *)&_mh_execute_header, v66, v67, "Custodian recovery key present: %{BOOL}d for otPeerID: %s ", (uint8_t *)v68, 0x12u);
    swift_arrayDestroy(v69, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v69, -1, -1);
    swift_slowDealloc(v68, -1, -1);
  }
  else
  {
    v46(v64, v9);
  }

  return ((uint64_t (*)(_QWORD, _QWORD))v84)(v85 & 1, 0);
}

uint64_t sub_10018C9E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v5 = sub_1000080B4(&qword_100293CC8);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  __chkstk_darwin(v5, v8);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v5);
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = (v9 + 16) & ~v9;
  v11 = swift_allocObject(&unk_10026C5E8, v10 + v7, v9 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(v11 + v10, (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
  sub_10018BCE0(a3, (void (*)(_QWORD, _QWORD))sub_10018DD28, v11);
  return swift_release(v11);
}

uint64_t sub_10018CAC4(char a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char v6;

  if (a2)
  {
    v5 = a2;
    swift_errorRetain(a2);
    v2 = sub_1000080B4(&qword_100293CC8);
    return CheckedContinuation.resume(throwing:)(&v5, v2);
  }
  else
  {
    v6 = a1 & 1;
    v4 = sub_1000080B4(&qword_100293CC8);
    return CheckedContinuation.resume(returning:)(&v6, v4);
  }
}

uint64_t sub_10018CB34(uint64_t a1, _QWORD *a2, _QWORD *a3, void (*a4)(_QWORD *), uint64_t a5, uint64_t a6, uint64_t a7)
{
  sub_10018DFB8(a1, a2, a3, a4, a5, a6, a7);
  swift_release(a5);
  return swift_release(a6);
}

void sub_10018CB64(uint64_t a1, uint64_t *a2, void (*a3)(uint64_t), void (*a4)(uint64_t))
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  uint8_t *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  id v63;
  Class isa;
  Class v65;
  Class v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  void (**v83)(uint64_t);
  void (*v84)(uint64_t);
  void *v85;
  uint64_t v86;
  void *v87;
  void *v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  void (*v92)(char *, uint64_t, uint64_t);
  id v93;
  uint64_t v94;
  uint64_t v95;
  void (*v96)(uint64_t);
  _QWORD *v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  void (*v104)(uint64_t);
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t aBlock[5];
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;

  v5 = v4;
  v104 = a3;
  v108 = a1;
  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v8 - 8);
  v11 = __chkstk_darwin(v8, v10);
  v102 = v12;
  v103 = (char *)&v89 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11, v13);
  v110 = (char *)&v89 - v14;
  v97 = (_QWORD *)type metadata accessor for RecoveryKeys(0);
  v99 = *(v97 - 1);
  v16 = __chkstk_darwin(v97, v15);
  v109 = (uint64_t)&v89 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v101 = v17;
  __chkstk_darwin(v16, v18);
  v20 = (char *)&v89 - v19;
  v107 = type metadata accessor for UUID(0);
  v105 = *(_QWORD *)(v107 - 8);
  v22 = __chkstk_darwin(v107, v21);
  v106 = (char *)&v89 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v98 = v23;
  __chkstk_darwin(v22, v24);
  v26 = (char *)&v89 - v25;
  v27 = sub_1000080B4(&qword_1002958F0);
  v28 = *(_QWORD *)(v27 - 8);
  __chkstk_darwin(v27, v29);
  v31 = (char *)&v89 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v100 = v5;
  (*(void (**)(char *, uint64_t, uint64_t))(v28 + 16))(v31, (uint64_t)v5 + OBJC_IVAR____TtC13appleaccountd24DaemonSecurityController__cdpContextProvider, v27);
  Dependency.wrappedValue.getter(aBlock, v27);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v31, v27);
  v32 = objc_msgSend((id)objc_opt_self(CDPContext), "contextForPrimaryAccount");
  sub_100006F58(aBlock);
  if (v32)
  {
    v93 = v32;
    v94 = v9;
    v96 = a4;
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v95 = v8;
    v33 = type metadata accessor for Logger(0);
    sub_100005288(v33, (uint64_t)qword_1002A89D8);
    v34 = v105;
    v35 = v107;
    v92 = *(void (**)(char *, uint64_t, uint64_t))(v105 + 16);
    v92(v26, v108, v107);
    v36 = sub_10018DD8C((uint64_t)a2, (uint64_t)v20);
    v37 = Logger.logObject.getter(v36);
    v38 = static os_log_type_t.info.getter();
    v39 = v38;
    if (os_log_type_enabled(v37, v38))
    {
      v40 = swift_slowAlloc(22, -1);
      v91 = swift_slowAlloc(64, -1);
      aBlock[0] = v91;
      *(_DWORD *)v40 = 136315394;
      v89 = v40 + 4;
      v41 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v90 = v39;
      v42 = dispatch thunk of CustomStringConvertible.description.getter(v35, v41);
      v44 = v43;
      v113 = sub_1001DEF4C(v42, v43, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v113, &v114);
      swift_bridgeObjectRelease(v44);
      (*(void (**)(char *, uint64_t))(v34 + 8))(v26, v35);
      *(_WORD *)(v40 + 12) = 2080;
      v45 = dispatch thunk of CustomStringConvertible.description.getter(v35, v41);
      v47 = v46;
      v113 = sub_1001DEF4C(v45, v46, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v113, &v114);
      swift_bridgeObjectRelease(v47);
      sub_10018DDD0((uint64_t)v20);
      _os_log_impl((void *)&_mh_execute_header, v37, (os_log_type_t)v90, "Preflighting Custodian Recovery for custodianID: %s otPeerID: %s", (uint8_t *)v40, 0x16u);
      v48 = v91;
      swift_arrayDestroy(v91, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v48, -1, -1);
      swift_slowDealloc(v40, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v34 + 8))(v26, v35);
      sub_10018DDD0((uint64_t)v20);
    }

    v59 = a2[2];
    v60 = a2[3];
    v61 = *a2;
    v62 = a2[1];
    v63 = objc_allocWithZone((Class)CDPCustodianRecoveryInfo);
    sub_10000F450(v59, v60);
    sub_10000F450(v61, v62);
    isa = Data._bridgeToObjectiveC()().super.isa;
    v65 = Data._bridgeToObjectiveC()().super.isa;
    v66 = UUID._bridgeToObjectiveC()().super.isa;
    v97 = objc_msgSend(v63, "initWithWrappedRKC:wrappingKey:custodianUUID:", isa, v65, v66);

    sub_10000F494(v61, v62);
    v67 = sub_10000F494(v59, v60);
    v68 = v110;
    Date.init()(v67);
    v100 = (_QWORD *)v100[7];
    v69 = v94;
    v70 = v103;
    v71 = v95;
    (*(void (**)(char *, char *, uint64_t))(v94 + 16))(v103, v68, v95);
    v72 = v107;
    v92(v106, v108, v107);
    sub_10018DD8C((uint64_t)a2, v109);
    v73 = *(unsigned __int8 *)(v69 + 80);
    v74 = v69;
    v75 = (v73 + 16) & ~v73;
    v76 = v105;
    v77 = *(unsigned __int8 *)(v105 + 80);
    v78 = (v102 + v77 + v75) & ~v77;
    v79 = *(unsigned __int8 *)(v99 + 80);
    v80 = (v98 + v79 + v78) & ~v79;
    v81 = (v101 + v80 + 7) & 0xFFFFFFFFFFFFFFF8;
    v82 = swift_allocObject(&unk_10026C610, v81 + 16, v73 | v77 | v79 | 7);
    (*(void (**)(uint64_t, char *, uint64_t))(v74 + 32))(v82 + v75, v70, v71);
    (*(void (**)(uint64_t, char *, uint64_t))(v76 + 32))(v82 + v78, v106, v72);
    sub_10018DE10(v109, v82 + v80);
    v83 = (void (**)(uint64_t))(v82 + v81);
    v84 = v96;
    *v83 = v104;
    v83[1] = v84;
    aBlock[4] = (uint64_t)sub_10018DE54;
    v112 = v82;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_1001DC548;
    aBlock[3] = (uint64_t)&unk_10026C628;
    v85 = _Block_copy(aBlock);
    v86 = v112;
    swift_retain(v84);
    swift_release(v86);
    v87 = v97;
    v88 = v93;
    objc_msgSend(v100, "validateRecoveryKey:withContext:completion:", v97, v93, v85);
    _Block_release(v85);

    (*(void (**)(char *, uint64_t))(v74 + 8))(v110, v71);
  }
  else
  {
    if (qword_10028ADB0 != -1)
      swift_once(&qword_10028ADB0, sub_100046CC8);
    v49 = type metadata accessor for Logger(0);
    v50 = sub_100005288(v49, (uint64_t)qword_1002A8990);
    v51 = Logger.logObject.getter(v50);
    v52 = static os_log_type_t.error.getter(v51);
    if (os_log_type_enabled(v51, v52))
    {
      v53 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v53 = 0;
      _os_log_impl((void *)&_mh_execute_header, v51, v52, "Not logged in to AppleAccount, unable to fetch. Preflight Custodian Recovery aborted.", v53, 2u);
      swift_slowDealloc(v53, -1, -1);
    }

    type metadata accessor for AACustodianError(0);
    v55 = v54;
    v113 = -7002;
    v56 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
    v57 = sub_100005150((unint64_t *)&qword_10028B640, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianError, (uint64_t)&unk_100218378);
    _BridgedStoredNSError.init(_:userInfo:)(aBlock, &v113, v56, v55, v57);
    v58 = (void *)aBlock[0];
    v104(aBlock[0]);

  }
}

uint64_t sub_10018D354(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t), uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(_BYTE *, uint64_t, uint64_t);
  uint64_t v36;
  NSObject *v37;
  __n128 v38;
  os_log_type_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  double v44;
  void (*v45)(_BYTE *, uint64_t);
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  void (*v50)(_BYTE *, uint64_t);
  uint64_t v51;
  uint64_t v52;
  _BYTE *v53;
  uint64_t v54;
  NSObject *v55;
  os_log_type_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _BYTE *v74;
  _BYTE *v75;
  uint64_t v76;
  NSObject *v77;
  os_log_type_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  _BYTE *v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  _BYTE v91[4];
  int v92;
  uint64_t v93;
  _BYTE *v94;
  uint64_t v95;
  _BYTE *v96;
  _BYTE *v97;
  uint64_t v98;
  uint64_t v99;
  void (*v100)(_BYTE *, uint64_t, uint64_t);
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  _BYTE *v104;
  void (*v105)(uint64_t);
  uint64_t v106;
  uint64_t v107;
  uint64_t v108[2];

  v99 = a6;
  v105 = a5;
  v102 = a2;
  v103 = (_QWORD *)a4;
  v95 = type metadata accessor for RecoveryKeys(0);
  v9 = __chkstk_darwin(v95, v8);
  v11 = &v91[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v9, v12);
  v96 = &v91[-v13];
  v14 = type metadata accessor for UUID(0);
  v106 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14, v15);
  v104 = &v91[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v19 = __chkstk_darwin(v16, v18);
  v94 = &v91[-v20];
  __chkstk_darwin(v19, v21);
  v23 = &v91[-v22];
  v24 = type metadata accessor for Date(0);
  v25 = *(_QWORD *)(v24 - 8);
  v27 = __chkstk_darwin(v24, v26);
  v29 = &v91[-((v28 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v27, v30);
  v32 = &v91[-v31];
  if (qword_10028ADC8 != -1)
    swift_once(&qword_10028ADC8, sub_100046D2C);
  v33 = type metadata accessor for Logger(0);
  v34 = sub_100005288(v33, (uint64_t)qword_1002A89D8);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v25 + 16))(v32, v102, v24);
  v35 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v106 + 16);
  v102 = a3;
  v100 = v35;
  v36 = ((uint64_t (*)(_BYTE *, uint64_t, uint64_t))v35)(v23, a3, v14);
  v101 = v34;
  v37 = Logger.logObject.getter(v36);
  v39 = static os_log_type_t.default.getter(v38);
  v40 = v39;
  if (os_log_type_enabled(v37, v39))
  {
    v41 = swift_slowAlloc(22, -1);
    v97 = v11;
    v42 = v41;
    v43 = swift_slowAlloc(32, -1);
    v93 = v43;
    v108[0] = v43;
    *(_DWORD *)v42 = 134218242;
    v98 = a1;
    Date.init()(v43);
    v92 = v40;
    v44 = Date.timeIntervalSince(_:)(v32);
    v45 = *(void (**)(_BYTE *, uint64_t))(v25 + 8);
    v45(v29, v24);
    v107 = *(_QWORD *)&v44;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v107, v108);
    v45(v32, v24);
    *(_WORD *)(v42 + 12) = 2080;
    v46 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v47 = dispatch thunk of CustomStringConvertible.description.getter(v14, v46);
    v49 = v48;
    v107 = sub_1001DEF4C(v47, v48, v108);
    a1 = v98;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v107, v108);
    swift_bridgeObjectRelease(v49);
    v50 = *(void (**)(_BYTE *, uint64_t))(v106 + 8);
    v50(v23, v14);
    _os_log_impl((void *)&_mh_execute_header, v37, (os_log_type_t)v92, "⏰ %f secs to preflightCustodianRecovery %s", (uint8_t *)v42, 0x16u);
    v51 = v93;
    swift_arrayDestroy(v93, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v51, -1, -1);
    v52 = v42;
    v11 = v97;
    swift_slowDealloc(v52, -1, -1);
  }
  else
  {
    (*(void (**)(_BYTE *, uint64_t))(v25 + 8))(v32, v24);
    v50 = *(void (**)(_BYTE *, uint64_t))(v106 + 8);
    v50(v23, v14);
  }

  v53 = v104;
  if (a1)
  {
    v100(v104, v102, v14);
    sub_10018DD8C((uint64_t)v103, (uint64_t)v11);
    v54 = swift_errorRetain(a1);
    v55 = Logger.logObject.getter(v54);
    v56 = static os_log_type_t.error.getter(v55);
    if (os_log_type_enabled(v55, v56))
    {
      v57 = swift_slowAlloc(32, -1);
      v97 = v11;
      v58 = v14;
      v59 = v57;
      v60 = (uint64_t *)swift_slowAlloc(8, -1);
      v103 = v60;
      v106 = swift_slowAlloc(64, -1);
      v108[0] = v106;
      *(_DWORD *)v59 = 138412802;
      v61 = _convertErrorToNSError(_:)(a1);
      v98 = a1;
      v62 = v61;
      v107 = v61;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v107, v108);
      *v60 = v62;
      *(_WORD *)(v59 + 12) = 2080;
      v63 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v64 = dispatch thunk of CustomStringConvertible.description.getter(v58, v63);
      v66 = v65;
      v107 = sub_1001DEF4C(v64, v65, v108);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v107, v108);
      swift_bridgeObjectRelease(v66);
      v50(v53, v58);
      *(_WORD *)(v59 + 22) = 2080;
      v67 = (uint64_t)v97;
      v68 = dispatch thunk of CustomStringConvertible.description.getter(v58, v63);
      v70 = v69;
      v107 = sub_1001DEF4C(v68, v69, v108);
      a1 = v98;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v107, v108);
      swift_bridgeObjectRelease(v70);
      sub_10018DDD0(v67);
      _os_log_impl((void *)&_mh_execute_header, v55, v56, "Error preflighting custodian recovery: %@ for custodianID: %s otPeerID: %s", (uint8_t *)v59, 0x20u);
      v71 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      v72 = (uint64_t)v103;
      swift_arrayDestroy(v103, 1, v71);
      swift_slowDealloc(v72, -1, -1);
      v73 = v106;
      swift_arrayDestroy(v106, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v73, -1, -1);
      swift_slowDealloc(v59, -1, -1);
    }
    else
    {
      v50(v53, v14);
      sub_10018DDD0((uint64_t)v11);
    }

    swift_errorRetain(a1);
    v105(a1);
    swift_errorRelease(a1);
    return swift_errorRelease(a1);
  }
  else
  {
    v74 = v94;
    v100(v94, v102, v14);
    v75 = v96;
    v76 = sub_10018DD8C((uint64_t)v103, (uint64_t)v96);
    v77 = Logger.logObject.getter(v76);
    v78 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v77, v78))
    {
      v79 = v14;
      v80 = swift_slowAlloc(22, -1);
      v106 = swift_slowAlloc(64, -1);
      v108[0] = v106;
      *(_DWORD *)v80 = 136315394;
      v81 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v82 = dispatch thunk of CustomStringConvertible.description.getter(v79, v81);
      v84 = v83;
      v107 = sub_1001DEF4C(v82, v83, v108);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v107, v108);
      swift_bridgeObjectRelease(v84);
      v50(v74, v79);
      *(_WORD *)(v80 + 12) = 2080;
      v85 = v96;
      v86 = dispatch thunk of CustomStringConvertible.description.getter(v79, v81);
      v88 = v87;
      v107 = sub_1001DEF4C(v86, v87, v108);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v107, v108);
      swift_bridgeObjectRelease(v88);
      sub_10018DDD0((uint64_t)v85);
      _os_log_impl((void *)&_mh_execute_header, v77, v78, "Preflight Custodian Recovery successful for custodianID: %s otPeerID: %s", (uint8_t *)v80, 0x16u);
      v89 = v106;
      swift_arrayDestroy(v106, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v89, -1, -1);
      swift_slowDealloc(v80, -1, -1);
    }
    else
    {
      v50(v74, v14);
      sub_10018DDD0((uint64_t)v75);
    }

    return ((uint64_t (*)(_QWORD))v105)(0);
  }
}

uint64_t sub_10018DB68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_100006F58((_QWORD *)(v0 + 16));

  v1 = v0 + OBJC_IVAR____TtC13appleaccountd24DaemonSecurityController__cdpContextProvider;
  v2 = sub_1000080B4(&qword_1002958F0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_10018DBCC()
{
  return type metadata accessor for DaemonSecurityController(0);
}

uint64_t type metadata accessor for DaemonSecurityController(uint64_t a1)
{
  return sub_100004C78(a1, (uint64_t *)&unk_1002957F0, (uint64_t)&nominal type descriptor for DaemonSecurityController);
}

void sub_10018DBE8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = "(";
  v4[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  sub_10018DC6C(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(v2 - 8) + 64;
    swift_updateClassMetadata2(a1, 256, 3, v4, a1 + 80);
  }
}

void sub_10018DC6C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100295800)
  {
    v2 = sub_10000D908((uint64_t *)&unk_100297710);
    v3 = type metadata accessor for Dependency(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100295800);
  }
}

uint64_t sub_10018DCC4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = sub_1000080B4(&qword_100293CC8);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10018DD28(char a1, uint64_t a2)
{
  sub_1000080B4(&qword_100293CC8);
  return sub_10018CAC4(a1, a2);
}

uint64_t type metadata accessor for RecoveryKeys(uint64_t a1)
{
  return sub_100004C78(a1, qword_100295950, (uint64_t)&nominal type descriptor for RecoveryKeys);
}

uint64_t sub_10018DD8C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for RecoveryKeys(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10018DDD0(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for RecoveryKeys(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10018DE10(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for RecoveryKeys(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10018DE5C(int a1, char *a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  v5 = *(_QWORD *)(type metadata accessor for Date(0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v9 = (v6 + v7 + *(unsigned __int8 *)(v8 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v10 = v2 + ((*(_QWORD *)(v8 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8);
  return sub_10018C2D4(a1, a2, v2 + v6, v2 + v9, *(void (**)(_QWORD, char *))v10, *(_QWORD *)(v10 + 8));
}

uint64_t sub_10018DEF0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v3 = *(_QWORD *)(type metadata accessor for Date(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = *(_QWORD *)(v3 + 64);
  v6 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v7 = (v4 + v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v8 = v1 + ((*(_QWORD *)(v6 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8);
  return sub_10018B660(a1, v1 + v4, v1 + v7, *(void (**)(uint64_t))v8, *(_QWORD *)(v8 + 8));
}

uint64_t sub_10018DF70(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1000080B4((uint64_t *)&unk_10028CCF0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_10018DFB8(uint64_t a1, _QWORD *a2, _QWORD *a3, void (*a4)(_QWORD *), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  uint64_t (*v35)(uint64_t);
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(_QWORD *);
  uint64_t v56;
  uint64_t v57;
  NSObject *v58;
  os_log_type_t v59;
  uint64_t v60;
  uint8_t *v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  void *v66;
  _QWORD *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  id v72;
  Class isa;
  Class v74;
  Class v75;
  uint64_t v76;
  _BYTE *v77;
  uint64_t v78;
  _BYTE *v79;
  _BYTE *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t (**v93)(uint64_t);
  uint64_t (*v94)(uint64_t);
  void *v95;
  uint64_t v96;
  void *v97;
  void *v98;
  _BYTE v99[12];
  int v100;
  os_log_t v101;
  uint64_t v102;
  void (*v103)(_BYTE *, uint64_t, uint64_t);
  id v104;
  _BYTE *v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  _BYTE *v112;
  uint64_t v113;
  uint64_t (*v114)(uint64_t);
  _BYTE *v115;
  uint64_t v116;
  uint64_t v117;
  _QWORD *v118;
  uint64_t v119;
  _BYTE *v120;
  _BYTE *v121;
  uint64_t v122;
  uint64_t aBlock[5];
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;

  v118 = a2;
  v119 = a1;
  v12 = type metadata accessor for Date(0);
  v122 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12, v13);
  v111 = v15;
  v112 = &v99[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v14, v16);
  v121 = &v99[-v17];
  v106 = (_QWORD *)type metadata accessor for RecoveryKeys(0);
  v108 = *(v106 - 1);
  v19 = __chkstk_darwin(v106, v18);
  v120 = &v99[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v110 = v20;
  __chkstk_darwin(v19, v21);
  v105 = &v99[-v22];
  v23 = type metadata accessor for UUID(0);
  v116 = *(_QWORD *)(v23 - 8);
  v117 = v23;
  v25 = __chkstk_darwin(v23, v24);
  v115 = &v99[-((v26 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v107 = v26;
  __chkstk_darwin(v25, v27);
  v29 = &v99[-v28];
  v30 = sub_1000080B4(&qword_1002958F0);
  v31 = *(_QWORD *)(v30 - 8);
  __chkstk_darwin(v30, v32);
  v34 = &v99[-((v33 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v35 = (uint64_t (*)(uint64_t))swift_allocObject(&unk_10026C7C8, 48, 7);
  *((_QWORD *)v35 + 2) = a4;
  *((_QWORD *)v35 + 3) = a5;
  *((_QWORD *)v35 + 4) = a6;
  *((_QWORD *)v35 + 5) = a7;
  v114 = v35;
  v109 = a3;
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v31 + 16))(v34, (uint64_t)a3 + OBJC_IVAR____TtC13appleaccountd24DaemonSecurityController__cdpContextProvider, v30);
  swift_retain(a5);
  swift_retain(a6);
  Dependency.wrappedValue.getter(aBlock, v30);
  (*(void (**)(_BYTE *, uint64_t))(v31 + 8))(v34, v30);
  v36 = objc_msgSend((id)objc_opt_self(CDPContext), "contextForPrimaryAccount");
  sub_100006F58(aBlock);
  if (v36)
  {
    v104 = v36;
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v113 = v12;
    v37 = type metadata accessor for Logger(0);
    sub_100005288(v37, (uint64_t)qword_1002A89D8);
    v38 = v116;
    v39 = v117;
    v103 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v116 + 16);
    v103(v29, v119, v117);
    v40 = v105;
    v41 = sub_10018DD8C((uint64_t)v118, (uint64_t)v105);
    v42 = Logger.logObject.getter(v41);
    v43 = static os_log_type_t.info.getter();
    v44 = v43;
    if (os_log_type_enabled(v42, v43))
    {
      v45 = swift_slowAlloc(22, -1);
      v102 = swift_slowAlloc(64, -1);
      aBlock[0] = v102;
      *(_DWORD *)v45 = 136315394;
      v46 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v101 = v42;
      v47 = dispatch thunk of CustomStringConvertible.description.getter(v39, v46);
      v49 = v48;
      v125 = sub_1001DEF4C(v47, v48, aBlock);
      v100 = v44;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v125, &v126);
      swift_bridgeObjectRelease(v49);
      (*(void (**)(_BYTE *, uint64_t))(v38 + 8))(v29, v39);
      *(_WORD *)(v45 + 12) = 2080;
      v50 = dispatch thunk of CustomStringConvertible.description.getter(v39, v46);
      v52 = v51;
      v125 = sub_1001DEF4C(v50, v51, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v125, &v126);
      swift_bridgeObjectRelease(v52);
      sub_10018DDD0((uint64_t)v40);
      v42 = v101;
      _os_log_impl((void *)&_mh_execute_header, v101, (os_log_type_t)v100, "Preflighting Custodian Recovery for custodianID: %s otPeerID: %s", (uint8_t *)v45, 0x16u);
      v53 = v102;
      swift_arrayDestroy(v102, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v53, -1, -1);
      swift_slowDealloc(v45, -1, -1);
    }
    else
    {
      (*(void (**)(_BYTE *, uint64_t))(v38 + 8))(v29, v39);
      sub_10018DDD0((uint64_t)v40);
    }

    v67 = v118;
    v68 = v118[2];
    v69 = v118[3];
    v70 = *v118;
    v71 = v118[1];
    v72 = objc_allocWithZone((Class)CDPCustodianRecoveryInfo);
    sub_10000F450(v68, v69);
    sub_10000F450(v70, v71);
    isa = Data._bridgeToObjectiveC()().super.isa;
    v74 = Data._bridgeToObjectiveC()().super.isa;
    v75 = UUID._bridgeToObjectiveC()().super.isa;
    v106 = objc_msgSend(v72, "initWithWrappedRKC:wrappingKey:custodianUUID:", isa, v74, v75);

    sub_10000F494(v70, v71);
    v76 = sub_10000F494(v68, v69);
    v77 = v121;
    Date.init()(v76);
    v109 = (_QWORD *)v109[7];
    v78 = v122;
    v79 = v112;
    v80 = v77;
    v81 = v113;
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v122 + 16))(v112, v80, v113);
    v82 = v117;
    v103(v115, v119, v117);
    sub_10018DD8C((uint64_t)v67, (uint64_t)v120);
    v83 = *(unsigned __int8 *)(v78 + 80);
    v84 = v78;
    v85 = (v83 + 16) & ~v83;
    v86 = v116;
    v87 = *(unsigned __int8 *)(v116 + 80);
    v88 = (v111 + v87 + v85) & ~v87;
    v89 = *(unsigned __int8 *)(v108 + 80);
    v90 = (v107 + v89 + v88) & ~v89;
    v91 = (v110 + v90 + 7) & 0xFFFFFFFFFFFFFFF8;
    v92 = swift_allocObject(&unk_10026C7F0, v91 + 16, v83 | v87 | v89 | 7);
    (*(void (**)(uint64_t, _BYTE *, uint64_t))(v84 + 32))(v92 + v85, v79, v81);
    (*(void (**)(uint64_t, _BYTE *, uint64_t))(v86 + 32))(v92 + v88, v115, v82);
    sub_10018DE10((uint64_t)v120, v92 + v90);
    v93 = (uint64_t (**)(uint64_t))(v92 + v91);
    v94 = v114;
    *v93 = sub_10018EF8C;
    v93[1] = v94;
    aBlock[4] = (uint64_t)sub_10018DE54;
    v124 = v92;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_1001DC548;
    aBlock[3] = (uint64_t)&unk_10026C808;
    v95 = _Block_copy(aBlock);
    v96 = v124;
    swift_retain(v94);
    swift_release(v96);
    v97 = v106;
    v98 = v104;
    objc_msgSend(v109, "validateRecoveryKey:withContext:completion:", v106, v104, v95);
    _Block_release(v95);

    (*(void (**)(_BYTE *, uint64_t))(v122 + 8))(v121, v113);
    swift_release(v94);
  }
  else
  {
    v54 = a6;
    v55 = a4;
    if (qword_10028ADB0 != -1)
      swift_once(&qword_10028ADB0, sub_100046CC8);
    v56 = type metadata accessor for Logger(0);
    v57 = sub_100005288(v56, (uint64_t)qword_1002A8990);
    v58 = Logger.logObject.getter(v57);
    v59 = static os_log_type_t.error.getter(v58);
    v60 = v54;
    if (os_log_type_enabled(v58, v59))
    {
      v61 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v61 = 0;
      _os_log_impl((void *)&_mh_execute_header, v58, v59, "Not logged in to AppleAccount, unable to fetch. Preflight Custodian Recovery aborted.", v61, 2u);
      swift_slowDealloc(v61, -1, -1);
    }

    type metadata accessor for AACustodianError(0);
    v63 = v62;
    v125 = -7002;
    v64 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
    v65 = sub_100005150((unint64_t *)&qword_10028B640, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianError, (uint64_t)&unk_100218378);
    _BridgedStoredNSError.init(_:userInfo:)(aBlock, &v125, v64, v63, v65);
    v66 = (void *)aBlock[0];
    sub_10003C0B4(aBlock[0], v55, a5, v60);
    swift_release(v114);

  }
}

uint64_t sub_10018E824(uint64_t a1, _QWORD *a2, void (*a3)(char *), uint64_t a4, void (*a5)(_QWORD *), uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t (*v27)(uint64_t);
  void (*v28)(char *);
  void (*v29)(_QWORD *);
  char *v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t (**v51)(uint64_t);
  uint64_t (*v52)(uint64_t);
  void *v53;
  uint64_t v54;
  char *v55;
  void *v56;
  uint64_t (*v57)(uint64_t);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  NSObject *v62;
  os_log_type_t v63;
  BOOL v64;
  void (*v65)(char *);
  char *v66;
  uint8_t *v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v73;
  uint64_t isa;
  char *v75;
  char *v76;
  _QWORD *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t (*v85)(uint64_t);
  char *v86;
  _QWORD aBlock[5];
  uint64_t v88;
  uint64_t v89;

  v80 = a1;
  isa = sub_1000080B4((uint64_t *)&unk_10028CCF0);
  __chkstk_darwin(isa, v11);
  v75 = (char *)&v73 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for UUID(0);
  v81 = *(_QWORD *)(v13 - 8);
  v82 = v13;
  __chkstk_darwin(v13, v14);
  v78 = (char *)&v73 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = v15;
  v16 = type metadata accessor for Date(0);
  v83 = *(_QWORD *)(v16 - 8);
  v84 = v16;
  v17 = *(_QWORD *)(v83 + 64);
  v19 = __chkstk_darwin(v16, v18);
  v76 = (char *)&v73 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19, v20);
  v86 = (char *)&v73 - v21;
  v22 = sub_1000080B4(&qword_1002958F0);
  v23 = *(_QWORD *)(v22 - 8);
  __chkstk_darwin(v22, v24);
  v26 = (char *)&v73 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = (uint64_t (*)(uint64_t))swift_allocObject(&unk_10026C750, 48, 7);
  v28 = a3;
  *((_QWORD *)v27 + 2) = a3;
  *((_QWORD *)v27 + 3) = a4;
  v29 = a5;
  *((_QWORD *)v27 + 4) = a5;
  *((_QWORD *)v27 + 5) = a6;
  v85 = v27;
  v77 = a2;
  (*(void (**)(char *, uint64_t, uint64_t))(v23 + 16))(v26, (uint64_t)a2 + OBJC_IVAR____TtC13appleaccountd24DaemonSecurityController__cdpContextProvider, v22);
  swift_retain(a4);
  swift_retain(a6);
  Dependency.wrappedValue.getter(aBlock, v22);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v26, v22);
  v30 = (char *)objc_msgSend((id)objc_opt_self(CDPContext), "contextForPrimaryAccount");
  sub_100006F58(aBlock);
  if (v30)
  {
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v75 = v30;
    v31 = type metadata accessor for Logger(0);
    v32 = sub_100005288(v31, (uint64_t)qword_1002A89D8);
    v33 = Logger.logObject.getter(v32);
    v34 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v33, v34))
    {
      v35 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v35 = 0;
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "Creating recovery keys.", v35, 2u);
      swift_slowDealloc(v35, -1, -1);
    }

    v36 = v86;
    Date.init()(v37);
    v77 = (_QWORD *)v77[7];
    v38 = v80;
    isa = (uint64_t)UUID._bridgeToObjectiveC()().super.isa;
    v39 = v83;
    v40 = v84;
    v41 = v76;
    (*(void (**)(char *, char *, uint64_t))(v83 + 16))(v76, v36, v84);
    v42 = v81;
    v43 = v82;
    v44 = v78;
    (*(void (**)(char *, uint64_t, uint64_t))(v81 + 16))(v78, v38, v82);
    v45 = *(unsigned __int8 *)(v39 + 80);
    v46 = (v45 + 16) & ~v45;
    v47 = *(unsigned __int8 *)(v42 + 80);
    v48 = (v17 + v47 + v46) & ~v47;
    v49 = (v79 + v48 + 7) & 0xFFFFFFFFFFFFFFF8;
    v50 = swift_allocObject(&unk_10026C778, v49 + 16, v45 | v47 | 7);
    (*(void (**)(uint64_t, char *, uint64_t))(v39 + 32))(v50 + v46, v41, v40);
    (*(void (**)(uint64_t, char *, uint64_t))(v42 + 32))(v50 + v48, v44, v43);
    v51 = (uint64_t (**)(uint64_t))(v50 + v49);
    v52 = v85;
    *v51 = sub_10018EDF4;
    v51[1] = v52;
    aBlock[4] = sub_10018DFB4;
    v88 = v50;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100043E24;
    aBlock[3] = &unk_10026C790;
    v53 = _Block_copy(aBlock);
    v54 = v88;
    swift_retain(v52);
    swift_release(v54);
    v56 = (void *)isa;
    v55 = v75;
    objc_msgSend(v77, "createRecoveryKeyWithContext:forUUID:completion:", v75, isa, v53);
    _Block_release(v53);

    (*(void (**)(char *, uint64_t))(v39 + 8))(v86, v40);
    v57 = v52;
  }
  else
  {
    v58 = isa;
    v59 = a6;
    if (qword_10028ADB0 != -1)
      swift_once(&qword_10028ADB0, sub_100046CC8);
    v60 = type metadata accessor for Logger(0);
    v61 = sub_100005288(v60, (uint64_t)qword_1002A8990);
    v62 = Logger.logObject.getter(v61);
    v63 = static os_log_type_t.error.getter(v62);
    v64 = os_log_type_enabled(v62, v63);
    v65 = v28;
    v66 = v75;
    if (v64)
    {
      v67 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v67 = 0;
      _os_log_impl((void *)&_mh_execute_header, v62, v63, "Not logged in to AppleAccount, unable to fetch", v67, 2u);
      swift_slowDealloc(v67, -1, -1);
    }

    type metadata accessor for AACustodianError(0);
    v69 = v68;
    v89 = -7002;
    v70 = sub_100005014((uint64_t)&_swiftEmptyArrayStorage);
    v71 = sub_100005150((unint64_t *)&qword_10028B640, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianError, (uint64_t)&unk_100218378);
    _BridgedStoredNSError.init(_:userInfo:)(aBlock, &v89, v70, v69, v71);
    *(_QWORD *)v66 = aBlock[0];
    swift_storeEnumTagMultiPayload(v66, v58, 1);
    sub_1000F77EC((uint64_t)v66, v65, a4, v29, v59);
    sub_10018DF70((uint64_t)v66);
    v57 = v85;
  }
  return swift_release(v57);
}

uint64_t sub_10018EDC8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10018EDF4(uint64_t a1)
{
  uint64_t v1;

  return sub_1000F77EC(a1, *(void (**)(char *))(v1 + 16), *(_QWORD *)(v1 + 24), *(void (**)(_QWORD *))(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t sub_10018EE04()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v1 = type metadata accessor for Date(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v4 + v5 + v8) & ~v8;
  v10 = v3 | v8 | 7;
  v11 = (*(_QWORD *)(v7 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);
  swift_release(*(_QWORD *)(v0 + v11 + 8));
  return swift_deallocObject(v0, v11 + 16, v10);
}

uint64_t sub_10018EED0(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  v5 = *(_QWORD *)(type metadata accessor for Date(0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v9 = (v6 + v7 + *(unsigned __int8 *)(v8 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v10 = v2 + ((*(_QWORD *)(v8 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8);
  return sub_10018A81C(a1, a2, v2 + v6, v2 + v9, *(void (**)(uint64_t *))v10, *(_QWORD *)(v10 + 8));
}

uint64_t sub_10018EF60()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10018EF8C(uint64_t a1)
{
  _QWORD *v1;

  return sub_10003635C(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_10018EF9C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;

  v1 = type metadata accessor for Date(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v4 + v5 + v8) & ~v8;
  v10 = *(_QWORD *)(v7 + 64);
  v11 = type metadata accessor for RecoveryKeys(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned __int8 *)(v12 + 80);
  v14 = (v9 + v10 + v13) & ~v13;
  v19 = v11;
  v20 = v3 | v8 | v13 | 7;
  v15 = (*(_QWORD *)(v12 + 64) + v14 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  v16 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v16(v0 + v9, v6);
  v17 = v0 + v14;
  sub_10000F494(*(_QWORD *)v17, *(_QWORD *)(v17 + 8));
  sub_10000F494(*(_QWORD *)(v17 + 16), *(_QWORD *)(v17 + 24));
  v16(v17 + *(int *)(v19 + 24), v6);
  swift_release(*(_QWORD *)(v0 + v15 + 8));
  return swift_deallocObject(v0, v15 + 16, v20);
}

uint64_t sub_10018F0C0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  v3 = *(_QWORD *)(type metadata accessor for Date(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = *(_QWORD *)(v3 + 64);
  v6 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v7 = (v4 + v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = *(_QWORD *)(type metadata accessor for RecoveryKeys(0) - 8);
  v10 = (v7 + v8 + *(unsigned __int8 *)(v9 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v11 = v1 + ((*(_QWORD *)(v9 + 64) + v10 + 7) & 0xFFFFFFFFFFFFFFF8);
  return sub_10018D354(a1, v1 + v4, v1 + v7, v1 + v10, *(void (**)(uint64_t))v11, *(_QWORD *)(v11 + 8));
}

uint64_t *sub_10018F16C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v15);
  }
  else
  {
    v7 = *a2;
    v8 = a2[1];
    sub_10000F450(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    v9 = a2[2];
    v10 = a2[3];
    sub_10000F450(v9, v10);
    a1[2] = v9;
    a1[3] = v10;
    v11 = *(int *)(a3 + 24);
    v12 = (char *)a1 + v11;
    v13 = (char *)a2 + v11;
    v14 = type metadata accessor for UUID(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  }
  return a1;
}

uint64_t sub_10018F224(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  sub_10000F494(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  sub_10000F494(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  v4 = a1 + *(int *)(a2 + 24);
  v5 = type metadata accessor for UUID(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t *sub_10018F278(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v6 = *a2;
  v7 = a2[1];
  sub_10000F450(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  v8 = a2[2];
  v9 = a2[3];
  sub_10000F450(v8, v9);
  a1[2] = v8;
  a1[3] = v9;
  v10 = *(int *)(a3 + 24);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for UUID(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v11, v12, v13);
  return a1;
}

uint64_t *sub_10018F304(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;

  v6 = *a2;
  v7 = a2[1];
  sub_10000F450(*a2, v7);
  v8 = *a1;
  v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_10000F494(v8, v9);
  v10 = a2[2];
  v11 = a2[3];
  sub_10000F450(v10, v11);
  v12 = a1[2];
  v13 = a1[3];
  a1[2] = v10;
  a1[3] = v11;
  sub_10000F494(v12, v13);
  v14 = *(int *)(a3 + 24);
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = type metadata accessor for UUID(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 24))(v15, v16, v17);
  return a1;
}

_OWORD *sub_10018F3A0(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(int *)(a3 + 24);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for UUID(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

uint64_t *sub_10018F3FC(uint64_t *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v6 = *a1;
  v7 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_10000F494(v6, v7);
  v8 = a1[2];
  v9 = a1[3];
  *((_OWORD *)a1 + 1) = a2[1];
  sub_10000F494(v8, v9);
  v10 = *(int *)(a3 + 24);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for UUID(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 40))(v11, v12, v13);
  return a1;
}

uint64_t sub_10018F47C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10018F488);
}

uint64_t sub_10018F488(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 12)
  {
    v4 = *(_QWORD *)(a1 + 8) >> 60;
    if (((4 * (_DWORD)v4) & 0xC) != 0)
      return 16 - ((4 * (_DWORD)v4) & 0xC | (v4 >> 2));
    else
      return 0;
  }
  else
  {
    v8 = type metadata accessor for UUID(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t sub_10018F510(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10018F51C);
}

char *sub_10018F51C(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 12)
  {
    *(_QWORD *)result = 0;
    *((_QWORD *)result + 1) = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * (_DWORD)a2) << 60;
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 24)], a2, a2, v7);
  }
  return result;
}

uint64_t sub_10018F598(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = &unk_10021FD18;
  v4[1] = &unk_10021FD18;
  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

id sub_10018F634()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  void *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  id v22;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  void *v27;

  v1 = v0;
  v2 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v7, v8);
  v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v11, v12);
  v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = OBJC_IVAR____TtC13appleaccountd17PushHelperService____lazy_storage___localQueue;
  v16 = *(void **)(v1 + OBJC_IVAR____TtC13appleaccountd17PushHelperService____lazy_storage___localQueue);
  if (v16)
  {
    v17 = *(id *)(v1 + OBJC_IVAR____TtC13appleaccountd17PushHelperService____lazy_storage___localQueue);
  }
  else
  {
    v26 = sub_100007764();
    static DispatchQoS.unspecified.getter(v26);
    v27 = &_swiftEmptyArrayStorage;
    v25 = sub_100005150((unint64_t *)&qword_10028C6D0, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
    v18 = sub_1000080B4(&qword_10028B9F0);
    v19 = sub_1000077E0((unint64_t *)&qword_10028C6E0, &qword_10028B9F0, (uint64_t)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v27, v18, v19, v7, v25);
    (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v6, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v2);
    v20 = (void *)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000001DLL, 0x800000010020ECC0, v14, v10, v6, 0);
    v21 = *(void **)(v1 + v15);
    *(_QWORD *)(v1 + v15) = v20;
    v17 = v20;

    v16 = 0;
  }
  v22 = v16;
  return v17;
}

id sub_10018F828()
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for PushHelperService()), "init");
  qword_1002A8BF8 = (uint64_t)result;
  return result;
}

uint64_t sub_10018F854(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v2 = v1;
  if (qword_10028ADB0 != -1)
    swift_once(&qword_10028ADB0, sub_100046CC8);
  v4 = type metadata accessor for Logger(0);
  sub_100005288(v4, (uint64_t)qword_1002A8990);
  v5 = swift_bridgeObjectRetain_n(a1, 2);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v17 = v9;
    *(_DWORD *)v8 = 136315138;
    swift_bridgeObjectRetain(a1);
    sub_1000080B4(&qword_100292D80);
    v11 = Array.description.getter(v10);
    v13 = v12;
    swift_bridgeObjectRelease(a1);
    v16 = sub_1001DEF4C(v11, v13, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v16, &v17);
    swift_bridgeObjectRelease_n(a1, 2);
    swift_bridgeObjectRelease(v13);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Setting Push delegates to: %s", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a1, 2);
  }
  v14 = *(_QWORD *)(v2 + OBJC_IVAR____TtC13appleaccountd17PushHelperService_delegates);
  *(_QWORD *)(v2 + OBJC_IVAR____TtC13appleaccountd17PushHelperService_delegates) = a1;
  swift_bridgeObjectRetain(a1);
  return swift_bridgeObjectRelease(v14);
}

void sub_10018FA48(void (*a1)(uint64_t, unint64_t, _QWORD), uint64_t a2)
{
  uint64_t v2;
  uint64_t ObjectType;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  void *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint8_t *v41;
  uint64_t v42;
  id v43;
  void (*v44)(uint64_t, unint64_t, _QWORD);
  uint64_t v45;
  id v46;
  void *v47;
  _QWORD aBlock[5];
  _QWORD *v49;

  ObjectType = swift_getObjectType(v2);
  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  v10 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11, v13);
  v15 = (char *)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(void **)(v2 + OBJC_IVAR____TtC13appleaccountd17PushHelperService_connection);
  if (v16)
  {
    v44 = a1;
    v45 = a2;
    v17 = *(_QWORD *)(v2 + OBJC_IVAR____TtC13appleaccountd17PushHelperService_publicToken);
    v18 = *(_QWORD *)(v2 + OBJC_IVAR____TtC13appleaccountd17PushHelperService_publicToken + 8);
    v46 = v16;
    if (v18 >> 60 == 15)
    {
      v43 = sub_10018F634();
      v19 = swift_allocObject(&unk_10026C858, 24, 7);
      swift_unknownObjectWeakInit(v19 + 16, v2);
      v20 = (_QWORD *)swift_allocObject(&unk_10026C8A8, 56, 7);
      v21 = v45;
      v20[2] = v46;
      v20[3] = v19;
      v42 = v19;
      v20[4] = v44;
      v20[5] = v21;
      v20[6] = ObjectType;
      aBlock[4] = sub_100191F84;
      v49 = v20;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_1000051D0;
      aBlock[3] = &unk_10026C8C0;
      v22 = _Block_copy(aBlock);
      v46 = v46;
      swift_retain(v19);
      v23 = swift_retain(v21);
      static DispatchQoS.unspecified.getter(v23);
      v47 = &_swiftEmptyArrayStorage;
      v24 = sub_100005150((unint64_t *)&qword_10028CD20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v25 = sub_1000080B4((uint64_t *)&unk_100295A00);
      v26 = sub_1000077E0((unint64_t *)&qword_10028CD30, (uint64_t *)&unk_100295A00, (uint64_t)&protocol conformance descriptor for [A]);
      dispatch thunk of SetAlgebra.init<A>(_:)(&v47, v25, v26, v6, v24);
      v27 = v43;
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v15, v10, v22);
      _Block_release(v22);

      (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
      (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
      v28 = v49;
      swift_release(v42);
      swift_release(v28);
    }
    else
    {
      sub_100014534(v17, v18);
      if (qword_10028ADB0 != -1)
        swift_once(&qword_10028ADB0, sub_100046CC8);
      v37 = type metadata accessor for Logger(0);
      v38 = sub_100005288(v37, (uint64_t)qword_1002A8990);
      v39 = Logger.logObject.getter(v38);
      v40 = static os_log_type_t.debug.getter(v39);
      if (os_log_type_enabled(v39, v40))
      {
        v41 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v41 = 0;
        _os_log_impl((void *)&_mh_execute_header, v39, v40, "We already had a public token from this connection, no need to fetch a new one", v41, 2u);
        swift_slowDealloc(v41, -1, -1);
      }

      sub_10000F450(v17, v18);
      v44(v17, v18, 0);
      sub_1000144D8(v17, v18);
      sub_1000144D8(v17, v18);

    }
  }
  else
  {
    if (qword_10028ADB0 != -1)
      swift_once(&qword_10028ADB0, sub_100046CC8);
    v29 = type metadata accessor for Logger(0);
    v30 = sub_100005288(v29, (uint64_t)qword_1002A8990);
    v31 = Logger.logObject.getter(v30);
    v32 = static os_log_type_t.error.getter(v31);
    if (os_log_type_enabled(v31, v32))
    {
      v33 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v33 = 0;
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "Public token was requested but there was no active APSConnection", v33, 2u);
      swift_slowDealloc(v33, -1, -1);
    }

    v34 = sub_100191F0C();
    v35 = swift_allocError(&type metadata for PushHelperServiceError, v34, 0, 0);
    *(_QWORD *)v36 = 1;
    *(_BYTE *)(v36 + 8) = 1;
    a1(v35, 0, 1);
    swift_errorRelease(v35);
  }
}

uint64_t sub_10018FEFC(void *a1, uint64_t a2, void (*a3)(uint64_t, unint64_t, _QWORD), uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint8_t *v10;
  uint64_t v11;
  void (*v12)(uint8_t *, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  id v21;
  void *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t Strong;
  void *v27;
  uint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  __n128 v35;
  os_log_type_t v36;
  BOOL v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint8_t *v42;
  uint8_t *v43;
  uint8_t *v44;
  uint8_t *v45;
  uint64_t v46;
  void (*v47)(uint8_t *, uint64_t);
  uint64_t v48;
  uint64_t v49;
  char *v50;
  dispatch_semaphore_t v51;
  void *v52;
  uint64_t v53;
  void *v54;
  void *v55;
  id v56;
  NSObject *v57;
  __n128 v58;
  os_log_type_t v59;
  uint8_t *v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  unint64_t v64;
  id v65;
  id v66;
  void *v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  NSObject *v72;
  __n128 v73;
  os_log_type_t v74;
  uint8_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint8_t *v85;
  uint64_t v86;
  uint64_t v87;
  NSObject *v88;
  __n128 v89;
  os_log_type_t v90;
  uint8_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  NSObject *v102;
  NSObject *v103;
  os_log_type_t v104;
  uint8_t *v105;
  NSObject **v106;
  NSObject *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  void *v111;
  uint64_t *v112;
  void (*v113)(uint8_t *, uint64_t);
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  id v122;
  uint8_t *v123;
  uint8_t *v124;
  uint64_t v125;
  void (*v126)(uint8_t *, uint64_t);
  uint64_t v127;
  void (*v128)(uint64_t, unint64_t, uint64_t);
  uint64_t v129;
  uint64_t v130;
  _BYTE v131[16];
  NSObject *v132;
  uint64_t v133;
  char v134[24];
  char v135[24];
  _BYTE v136[32];

  v128 = a3;
  v129 = a4;
  v6 = type metadata accessor for DispatchTimeInterval(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  v10 = (uint8_t *)&v121 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchTime(0);
  v12 = *(void (**)(uint8_t *, uint64_t))(v11 - 8);
  v14 = __chkstk_darwin(v11, v13);
  v16 = (uint8_t *)&v121 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14, v17);
  v19 = (char *)&v121 - v18;
  v20 = a2 + 16;
  v21 = objc_msgSend(a1, "publicToken");
  if (v21)
  {
    v22 = v21;
    v23 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v21);
    v25 = v24;

    swift_beginAccess(v20, v136, 0, 0);
    Strong = swift_unknownObjectWeakLoadStrong(v20);
    if (Strong)
    {
      v27 = (void *)Strong;
      v28 = (uint64_t *)(Strong + OBJC_IVAR____TtC13appleaccountd17PushHelperService_publicToken);
      v29 = *(_QWORD *)(Strong + OBJC_IVAR____TtC13appleaccountd17PushHelperService_publicToken);
      v30 = *(_QWORD *)(Strong + OBJC_IVAR____TtC13appleaccountd17PushHelperService_publicToken + 8);
      *v28 = v23;
      v28[1] = v25;
      sub_10000F450(v23, v25);
      sub_1000144D8(v29, v30);

    }
    sub_10000F450(v23, v25);
    v128(v23, v25, 0);
    sub_10000F494(v23, v25);
    return sub_10000F494(v23, v25);
  }
  else
  {
    v123 = v10;
    v124 = v16;
    v125 = v7;
    v126 = v12;
    v122 = a1;
    v127 = a2 + 16;
    if (qword_10028ADB0 != -1)
      swift_once(&qword_10028ADB0, sub_100046CC8);
    v32 = type metadata accessor for Logger(0);
    v33 = sub_100005288(v32, (uint64_t)qword_1002A8990);
    v34 = Logger.logObject.getter(v33);
    v36 = static os_log_type_t.default.getter(v35);
    v37 = os_log_type_enabled(v34, v36);
    v38 = v19;
    v39 = v11;
    v40 = v6;
    v41 = v125;
    v42 = v124;
    v43 = v123;
    if (v37)
    {
      v44 = (uint8_t *)swift_slowAlloc(2, -1);
      v121 = v38;
      v45 = v44;
      *(_WORD *)v44 = 0;
      _os_log_impl((void *)&_mh_execute_header, v34, v36, "No public APS token for the current connection, waiting for a new token", v44, 2u);
      v38 = v121;
      swift_slowDealloc(v45, -1, -1);
    }

    static DispatchTime.now()(v46);
    *(_QWORD *)v43 = 30;
    (*(void (**)(uint8_t *, _QWORD, uint64_t))(v41 + 104))(v43, enum case for DispatchTimeInterval.seconds(_:), v40);
    + infix(_:_:)(v42, v43);
    (*(void (**)(uint8_t *, uint64_t))(v41 + 8))(v43, v40);
    v47 = (void (*)(uint8_t *, uint64_t))*((_QWORD *)v126 + 1);
    v47(v42, v39);
    v48 = v127;
    swift_beginAccess(v127, v136, 0, 0);
    v49 = swift_unknownObjectWeakLoadStrong(v48);
    if (v49)
    {
      v50 = (char *)v49;
      v51 = dispatch_semaphore_create(0);
      v52 = *(void **)&v50[OBJC_IVAR____TtC13appleaccountd17PushHelperService_tokenSemaphore];
      *(_QWORD *)&v50[OBJC_IVAR____TtC13appleaccountd17PushHelperService_tokenSemaphore] = v51;

    }
    swift_beginAccess(v48, v135, 0, 0);
    v53 = swift_unknownObjectWeakLoadStrong(v48);
    if (v53)
    {
      v54 = (void *)v53;
      v55 = *(void **)(v53 + OBJC_IVAR____TtC13appleaccountd17PushHelperService_tokenSemaphore);
      v56 = v55;

      if (v55)
      {
        OS_dispatch_semaphore.wait(timeout:)(v38);

      }
    }
    v57 = Logger.logObject.getter(v53);
    v59 = static os_log_type_t.default.getter(v58);
    if (os_log_type_enabled(v57, v59))
    {
      v60 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v60 = 0;
      _os_log_impl((void *)&_mh_execute_header, v57, v59, "Wait time for APS Token is done", v60, 2u);
      swift_slowDealloc(v60, -1, -1);
    }

    swift_beginAccess(v48, v134, 0, 0);
    v61 = swift_unknownObjectWeakLoadStrong(v48);
    if (v61
      && (v62 = (void *)v61,
          v63 = *(_QWORD *)(v61 + OBJC_IVAR____TtC13appleaccountd17PushHelperService_publicToken),
          v64 = *(_QWORD *)(v61 + OBJC_IVAR____TtC13appleaccountd17PushHelperService_publicToken + 8),
          sub_100014534(v63, v64),
          v62,
          v64 >> 60 != 15))
    {
      v121 = v38;
      sub_10000F450(v63, v64);
      v87 = sub_10000F450(v63, v64);
      v88 = Logger.logObject.getter(v87);
      v90 = static os_log_type_t.default.getter(v89);
      if (os_log_type_enabled(v88, v90))
      {
        v91 = (uint8_t *)swift_slowAlloc(12, -1);
        v127 = swift_slowAlloc(32, -1);
        v132 = v127;
        *(_DWORD *)v91 = 136315138;
        v125 = (uint64_t)(v91 + 4);
        v126 = v47;
        v92 = v39;
        sub_1001D34B0(v63, v64);
        v94 = v93;
        v130 = v93;
        v95 = sub_1000080B4((uint64_t *)&unk_10028E800);
        v96 = sub_1000077E0((unint64_t *)&qword_10028C790, (uint64_t *)&unk_10028E800, (uint64_t)&protocol conformance descriptor for [A]);
        v97 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v95, v96);
        v99 = v98;
        v100 = v94;
        v39 = v92;
        v47 = v126;
        swift_bridgeObjectRelease(v100);
        v130 = sub_1001DEF4C(v97, v99, (uint64_t *)&v132);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v130, v131);
        swift_bridgeObjectRelease(v99);
        sub_1000144D8(v63, v64);
        sub_1000144D8(v63, v64);
        _os_log_impl((void *)&_mh_execute_header, v88, v90, "Obtained public token %s via delegate", v91, 0xCu);
        v101 = v127;
        swift_arrayDestroy(v127, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v101, -1, -1);
        swift_slowDealloc(v91, -1, -1);
      }
      else
      {
        sub_1000144D8(v63, v64);
        sub_1000144D8(v63, v64);
      }

      sub_10000F450(v63, v64);
      v128(v63, v64, 0);
      sub_1000144D8(v63, v64);
      sub_1000144D8(v63, v64);
      v38 = v121;
    }
    else
    {
      v65 = v122;
      v66 = objc_msgSend(v122, "publicToken");
      if (v66)
      {
        v67 = v66;
        v68 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v66);
        v70 = v69;

        sub_10000F450(v68, v70);
        v71 = sub_10000F450(v68, v70);
        v72 = Logger.logObject.getter(v71);
        v74 = static os_log_type_t.default.getter(v73);
        if (os_log_type_enabled(v72, v74))
        {
          v75 = (uint8_t *)swift_slowAlloc(12, -1);
          v125 = swift_slowAlloc(32, -1);
          v132 = v125;
          v124 = v75;
          *(_DWORD *)v75 = 136315138;
          v123 = v75 + 4;
          v126 = v47;
          v76 = v39;
          sub_1001D34B0(v68, v70);
          v78 = v77;
          v130 = v77;
          v79 = sub_1000080B4((uint64_t *)&unk_10028E800);
          v80 = sub_1000077E0((unint64_t *)&qword_10028C790, (uint64_t *)&unk_10028E800, (uint64_t)&protocol conformance descriptor for [A]);
          v81 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v79, v80);
          v83 = v82;
          v84 = v78;
          v39 = v76;
          v47 = v126;
          swift_bridgeObjectRelease(v84);
          v130 = sub_1001DEF4C(v81, v83, (uint64_t *)&v132);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v130, v131);
          swift_bridgeObjectRelease(v83);
          sub_10000F494(v68, v70);
          sub_10000F494(v68, v70);
          v85 = v124;
          _os_log_impl((void *)&_mh_execute_header, v72, v74, "Obtained public token %s", v124, 0xCu);
          v86 = v125;
          swift_arrayDestroy(v125, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v86, -1, -1);
          swift_slowDealloc(v85, -1, -1);
        }
        else
        {
          sub_10000F494(v68, v70);
          sub_10000F494(v68, v70);
        }

        v109 = v127;
        swift_beginAccess(v127, &v132, 0, 0);
        v110 = swift_unknownObjectWeakLoadStrong(v109);
        if (v110)
        {
          v111 = (void *)v110;
          v112 = (uint64_t *)(v110 + OBJC_IVAR____TtC13appleaccountd17PushHelperService_publicToken);
          v113 = v47;
          v114 = v39;
          v116 = *(_QWORD *)(v110 + OBJC_IVAR____TtC13appleaccountd17PushHelperService_publicToken);
          v115 = *(_QWORD *)(v110 + OBJC_IVAR____TtC13appleaccountd17PushHelperService_publicToken + 8);
          *v112 = v68;
          v112[1] = v70;
          sub_10000F450(v68, v70);
          v117 = v115;
          v39 = v114;
          v47 = v113;
          sub_1000144D8(v116, v117);

        }
        sub_10000F450(v68, v70);
        v128(v68, v70, 0);
        sub_10000F494(v68, v70);
        sub_10000F494(v68, v70);
      }
      else
      {
        v127 = v39;
        v102 = v65;
        v103 = Logger.logObject.getter(v102);
        v104 = static os_log_type_t.error.getter(v103);
        if (os_log_type_enabled(v103, v104))
        {
          v105 = (uint8_t *)swift_slowAlloc(12, -1);
          v106 = (NSObject **)swift_slowAlloc(8, -1);
          v126 = v47;
          *(_DWORD *)v105 = 138412290;
          v132 = v102;
          v107 = v102;
          v47 = v126;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v132, &v133);
          *v106 = v102;

          _os_log_impl((void *)&_mh_execute_header, v103, v104, "Failed to obtain a public token for connection: %@", v105, 0xCu);
          v108 = sub_1000080B4((uint64_t *)&unk_10028BC20);
          swift_arrayDestroy(v106, 1, v108);
          swift_slowDealloc(v106, -1, -1);
          swift_slowDealloc(v105, -1, -1);
        }
        else
        {

          v103 = v102;
        }

        v118 = sub_100191F0C();
        v119 = swift_allocError(&type metadata for PushHelperServiceError, v118, 0, 0);
        *(_QWORD *)v120 = 30;
        *(_BYTE *)(v120 + 8) = 0;
        v128(v119, 0, 1);
        swift_errorRelease(v119);
        v39 = v127;
      }
    }
    return ((uint64_t (*)(char *, uint64_t))v47)(v38, v39);
  }
}

uint64_t sub_1001909AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  id v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  _QWORD aBlock[5];
  uint64_t v23;

  v1 = type metadata accessor for DispatchWorkItemFlags(0);
  v20 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1, v2);
  v4 = (char *)&v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for DispatchQoS(0);
  v5 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19, v6);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_10018F634();
  v10 = swift_allocObject(&unk_10026C858, 24, 7);
  swift_unknownObjectWeakInit(v10 + 16, v0);
  aBlock[4] = sub_100191F04;
  v23 = v10;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000051D0;
  aBlock[3] = &unk_10026C870;
  v11 = _Block_copy(aBlock);
  v12 = swift_retain(v10);
  static DispatchQoS.unspecified.getter(v12);
  v21 = &_swiftEmptyArrayStorage;
  v13 = sub_100005150((unint64_t *)&qword_10028CD20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v14 = sub_1000080B4((uint64_t *)&unk_100295A00);
  v15 = sub_1000077E0((unint64_t *)&qword_10028CD30, (uint64_t *)&unk_100295A00, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v21, v14, v15, v1, v13);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v8, v4, v11);
  _Block_release(v11);

  (*(void (**)(char *, uint64_t))(v20 + 8))(v4, v1);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v19);
  v16 = v23;
  swift_release(v10);
  return swift_release(v16);
}

void sub_100190BB8(uint64_t a1)
{
  uint64_t v1;
  id v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  char *Strong;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  void *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  __n128 v22;
  void *v23;
  id v24;
  NSString v25;
  NSString v26;
  id v27;
  void *v28;
  uint64_t v29;
  Class isa;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  __n128 v35;
  os_log_type_t v36;
  uint8_t *v37;
  uint64_t v38;
  char *v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43[3];
  char v44[24];
  char v45[24];
  char v46[24];

  v1 = a1 + 16;
  v2 = objc_msgSend(objc_allocWithZone((Class)AKURLBag), "init");
  v3 = objc_msgSend(v2, "APSEnvironment");

  if (v3)
  {
    v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
    v6 = v5;
    v7 = objc_msgSend((id)objc_opt_self(APSConnection), "isValidEnvironment:", v3);

    if (v7)
    {
      swift_beginAccess(v1, &v41, 0, 0);
      Strong = (char *)swift_unknownObjectWeakLoadStrong(v1);
      if (Strong)
      {
        v9 = (uint64_t *)&Strong[OBJC_IVAR____TtC13appleaccountd17PushHelperService_apsEnvironment];
        v10 = *(_QWORD *)&Strong[OBJC_IVAR____TtC13appleaccountd17PushHelperService_apsEnvironment + 8];
        *v9 = v4;
        v9[1] = v6;

        v11 = v10;
      }
      else
      {
        v11 = v6;
      }
      swift_bridgeObjectRelease(v11);
    }
    else
    {
      swift_bridgeObjectRelease(v6);
      if (qword_10028ADB0 != -1)
        swift_once(&qword_10028ADB0, sub_100046CC8);
      v12 = type metadata accessor for Logger(0);
      v13 = sub_100005288(v12, (uint64_t)qword_1002A8990);
      v14 = Logger.logObject.getter(v13);
      v15 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v14, v15))
      {
        v16 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v16 = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, v15, "Server did not provide a valid APS environment. Staying in prod.", v16, 2u);
        swift_slowDealloc(v16, -1, -1);
      }

    }
  }
  swift_beginAccess(v1, v46, 0, 0);
  v17 = swift_unknownObjectWeakLoadStrong(v1);
  if (v17)
  {
    v18 = (void *)v17;
    v20 = *(_QWORD *)(v17 + OBJC_IVAR____TtC13appleaccountd17PushHelperService_apsEnvironment);
    v19 = *(_QWORD *)(v17 + OBJC_IVAR____TtC13appleaccountd17PushHelperService_apsEnvironment + 8);
    swift_bridgeObjectRetain(v19);

  }
  else
  {
    v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(APSEnvironmentProduction);
    v19 = v21;
  }
  sub_100007764();
  v22 = swift_bridgeObjectRetain(v19);
  v23 = (void *)static OS_dispatch_queue.main.getter(v22);
  v24 = objc_allocWithZone((Class)APSConnection);
  v25 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v19);
  v26 = String._bridgeToObjectiveC()();
  v27 = objc_msgSend(v24, "initWithEnvironmentName:namedDelegatePort:queue:", v25, v26, v23);

  if (v27)
  {
    swift_beginAccess(v1, v45, 0, 0);
    v28 = (void *)swift_unknownObjectWeakLoadStrong(v1);
    objc_msgSend(v27, "setDelegate:", v28);

    swift_beginAccess(v1, v44, 0, 0);
    v29 = swift_unknownObjectWeakLoadStrong(v1);
    isa = (Class)v29;
    if (v29)
    {
      v31 = *(_QWORD *)(v29 + OBJC_IVAR____TtC13appleaccountd17PushHelperService_topics);
      swift_bridgeObjectRetain(v31);

      isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v31);
    }
    objc_msgSend(v27, "_setEnabledTopics:", isa);

    if (qword_10028ADB0 != -1)
      swift_once(&qword_10028ADB0, sub_100046CC8);
    v32 = type metadata accessor for Logger(0);
    sub_100005288(v32, (uint64_t)qword_1002A8990);
    swift_bridgeObjectRetain(v19);
    v34 = Logger.logObject.getter(v33);
    v36 = static os_log_type_t.default.getter(v35);
    if (os_log_type_enabled(v34, v36))
    {
      v37 = (uint8_t *)swift_slowAlloc(12, -1);
      v38 = swift_slowAlloc(32, -1);
      v43[0] = v38;
      *(_DWORD *)v37 = 136315138;
      swift_bridgeObjectRetain(v19);
      v42 = sub_1001DEF4C(v20, v19, v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, v43);
      swift_bridgeObjectRelease_n(v19, 3);
      _os_log_impl((void *)&_mh_execute_header, v34, v36, "Push service started with environment: %s", v37, 0xCu);
      swift_arrayDestroy(v38, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v38, -1, -1);
      swift_slowDealloc(v37, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v19, 2);
    }
    swift_beginAccess(v1, v43, 0, 0);
    v39 = (char *)swift_unknownObjectWeakLoadStrong(v1);
    if (v39)
    {
      v40 = *(void **)&v39[OBJC_IVAR____TtC13appleaccountd17PushHelperService_connection];
      *(_QWORD *)&v39[OBJC_IVAR____TtC13appleaccountd17PushHelperService_connection] = v27;

    }
    else
    {

    }
  }
  else
  {
    swift_bridgeObjectRelease(v19);
  }
}

uint64_t sub_1001910A8(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t ObjectType;
  void (*v26)(char *, uint64_t, uint64_t);
  uint64_t v27;

  v2 = v1;
  v4 = sub_1000080B4((uint64_t *)&unk_1002959F0);
  __chkstk_darwin(v4, v5);
  v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for PushMessage(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100187600(a1, (uint64_t)v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return sub_100191E20((uint64_t)v7);
  sub_100191E60((uint64_t)v7, (uint64_t)v12);
  if (qword_10028ADB0 != -1)
    swift_once(&qword_10028ADB0, sub_100046CC8);
  v14 = type metadata accessor for Logger(0);
  v15 = sub_100005288(v14, (uint64_t)qword_1002A8990);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.debug.getter(v16);
  if (os_log_type_enabled(v16, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v18 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Informing delegates of incoming message", v18, 2u);
    swift_slowDealloc(v18, -1, -1);
  }

  v19 = *(_QWORD *)(v2 + OBJC_IVAR____TtC13appleaccountd17PushHelperService_delegates);
  v20 = *(_QWORD *)(v19 + 16);
  if (v20)
  {
    v21 = v12[8];
    swift_bridgeObjectRetain(v19);
    v22 = (uint64_t *)(v19 + 40);
    do
    {
      v23 = *(v22 - 1);
      v24 = *v22;
      ObjectType = swift_getObjectType(v23);
      if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v24 + 16))(v21, ObjectType, v24) & 1) != 0)
      {
        v26 = *(void (**)(char *, uint64_t, uint64_t))(v24 + 8);
        swift_unknownObjectRetain(v23);
        v26(v12, ObjectType, v24);
        swift_unknownObjectRelease(v23);
      }
      v22 += 2;
      --v20;
    }
    while (v20);
    swift_bridgeObjectRelease(v19);
  }
  return sub_100191EA4((uint64_t)v12);
}

id sub_1001912DC()
{
  char *v0;
  char *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  __n128 v9;
  os_log_type_t v10;
  uint8_t *v11;
  void *v12;
  objc_super v14;

  v1 = v0;
  v2 = OBJC_IVAR____TtC13appleaccountd17PushHelperService_connection;
  v3 = *(void **)&v0[OBJC_IVAR____TtC13appleaccountd17PushHelperService_connection];
  if (v3)
  {
    v4 = qword_10028ADB0;
    v5 = v3;
    if (v4 != -1)
      swift_once(&qword_10028ADB0, sub_100046CC8);
    v6 = type metadata accessor for Logger(0);
    v7 = sub_100005288(v6, (uint64_t)qword_1002A8990);
    v8 = Logger.logObject.getter(v7);
    v10 = static os_log_type_t.default.getter(v9);
    if (os_log_type_enabled(v8, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, v10, "Shutting down APS connection...", v11, 2u);
      swift_slowDealloc(v11, -1, -1);
    }

    objc_msgSend(v5, "shutdown");
    objc_msgSend(v5, "setDelegate:", 0);

    v12 = *(void **)&v1[v2];
    *(_QWORD *)&v1[v2] = 0;

  }
  v14.receiver = v1;
  v14.super_class = (Class)type metadata accessor for PushHelperService();
  return objc_msgSendSuper2(&v14, "dealloc");
}

id sub_1001914D4()
{
  char *v0;
  char *v1;
  uint64_t v2;
  objc_super v4;

  *(_QWORD *)&v0[OBJC_IVAR____TtC13appleaccountd17PushHelperService____lazy_storage___localQueue] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC13appleaccountd17PushHelperService_connection] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC13appleaccountd17PushHelperService_delegates] = _swiftEmptyArrayStorage;
  v1 = &v0[OBJC_IVAR____TtC13appleaccountd17PushHelperService_apsEnvironment];
  *(_QWORD *)v1 = static String._unconditionallyBridgeFromObjectiveC(_:)(APSEnvironmentProduction);
  *((_QWORD *)v1 + 1) = v2;
  *(_OWORD *)&v0[OBJC_IVAR____TtC13appleaccountd17PushHelperService_publicToken] = xmmword_10021A7E0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC13appleaccountd17PushHelperService_tokenSemaphore] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC13appleaccountd17PushHelperService_topics] = _swiftEmptyArrayStorage;
  v4.receiver = v0;
  v4.super_class = (Class)type metadata accessor for PushHelperService();
  return objc_msgSendSuper2(&v4, "init");
}

uint64_t type metadata accessor for PushHelperService()
{
  return objc_opt_self(_TtC13appleaccountd17PushHelperService);
}

void sub_1001915CC(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  __n128 v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t v24;
  void *v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE v29[16];
  uint64_t v30;

  if (a1 && a3 >> 60 != 15)
  {
    v5 = v3;
    sub_10000F450(a2, a3);
    if (qword_10028ADB0 != -1)
      swift_once(&qword_10028ADB0, sub_100046CC8);
    v7 = type metadata accessor for Logger(0);
    sub_100005288(v7, (uint64_t)qword_1002A8990);
    sub_10000F450(a2, a3);
    v8 = sub_10000F450(a2, a3);
    v9 = Logger.logObject.getter(v8);
    v11 = static os_log_type_t.default.getter(v10);
    if (os_log_type_enabled(v9, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc(12, -1);
      v13 = swift_slowAlloc(32, -1);
      v30 = v13;
      *(_DWORD *)v12 = 136315138;
      sub_1001D34B0(a2, a3);
      v15 = v14;
      v27 = v3;
      v16 = sub_1000080B4((uint64_t *)&unk_10028E800);
      v17 = sub_1000077E0((unint64_t *)&qword_10028C790, (uint64_t *)&unk_10028E800, (uint64_t)&protocol conformance descriptor for [A]);
      v18 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v16, v17);
      v20 = v19;
      swift_bridgeObjectRelease(v15);
      v28 = sub_1001DEF4C(v18, v20, &v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, v29);
      v21 = v20;
      v5 = v27;
      swift_bridgeObjectRelease(v21);
      sub_1000144D8(a2, a3);
      sub_1000144D8(a2, a3);
      _os_log_impl((void *)&_mh_execute_header, v9, v11, "We received a new APS Token: %s", v12, 0xCu);
      swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v13, -1, -1);
      swift_slowDealloc(v12, -1, -1);
    }
    else
    {
      sub_1000144D8(a2, a3);
      sub_1000144D8(a2, a3);
    }

    v22 = (uint64_t *)(v5 + OBJC_IVAR____TtC13appleaccountd17PushHelperService_publicToken);
    v23 = *(_QWORD *)(v5 + OBJC_IVAR____TtC13appleaccountd17PushHelperService_publicToken);
    v24 = *(_QWORD *)(v5 + OBJC_IVAR____TtC13appleaccountd17PushHelperService_publicToken + 8);
    *v22 = a2;
    v22[1] = a3;
    sub_10000F450(a2, a3);
    sub_1000144D8(v23, v24);
    v25 = *(void **)(v5 + OBJC_IVAR____TtC13appleaccountd17PushHelperService_tokenSemaphore);
    if (v25)
    {
      v26 = v25;
      OS_dispatch_semaphore.signal()();
      sub_1000144D8(a2, a3);

    }
    else
    {
      sub_1000144D8(a2, a3);
    }
  }
}

void sub_10019193C(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  id v7;

  if (a1 && a2)
  {
    v7 = a2;
    if ((sub_100191BB8(v7) & 1) != 0)
    {
      sub_1001910A8(v7);
    }
    else
    {
      if (qword_10028ADB0 != -1)
        swift_once(&qword_10028ADB0, sub_100046CC8);
      v2 = type metadata accessor for Logger(0);
      v3 = sub_100005288(v2, (uint64_t)qword_1002A8990);
      v4 = Logger.logObject.getter(v3);
      v5 = static os_log_type_t.debug.getter(v4);
      if (os_log_type_enabled(v4, v5))
      {
        v6 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v6 = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, v5, "Incoming message is for an unknown topic", v6, 2u);
        swift_slowDealloc(v6, -1, -1);
      }

    }
  }
}

uint64_t sub_100191BB8(void *a1)
{
  id v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t result;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;

  v2 = objc_msgSend(a1, "topic");
  if (v2)
  {
    v3 = v2;
    v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
    v6 = v5;

    if (v4 == 0xD000000000000011)
    {
      v7 = 0x8000000100208F40;
      if (v6 == 0x8000000100208F40)
      {
LABEL_9:
        swift_bridgeObjectRelease(v7);
        return 1;
      }
    }
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v6, 0xD000000000000011, 0x8000000100208F40, 0);
    swift_bridgeObjectRelease(v6);
    if ((v8 & 1) != 0)
      return 1;
  }
  result = (uint64_t)objc_msgSend(a1, "topic");
  if (!result)
    return result;
  v10 = (void *)result;
  v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
  v13 = v12;

  if (v11 == 0xD000000000000019)
  {
    v7 = 0x8000000100208F60;
    if (v13 == 0x8000000100208F60)
      goto LABEL_9;
  }
  v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v11, v13, 0xD000000000000019, 0x8000000100208F60, 0);
  swift_bridgeObjectRelease(v13);
  return v14 & 1;
}

void sub_100191D00(char a1)
{
  uint64_t v2;
  uint64_t v3;
  os_log_type_t v4;
  uint8_t *v5;
  NSObject *oslog;
  int v7;
  uint64_t v8;

  if (qword_10028ADB0 != -1)
    swift_once(&qword_10028ADB0, sub_100046CC8);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_100005288(v2, (uint64_t)qword_1002A8990);
  oslog = Logger.logObject.getter(v3);
  v4 = static os_log_type_t.debug.getter(oslog);
  if (os_log_type_enabled(oslog, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v5 = 67109120;
    v7 = a1 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v7, &v8);
    _os_log_impl((void *)&_mh_execute_header, oslog, v4, "APNS status changed: %{BOOL}d", v5, 8u);
    swift_slowDealloc(v5, -1, -1);

  }
  else
  {

  }
}

uint64_t sub_100191E20(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1000080B4((uint64_t *)&unk_1002959F0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100191E60(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PushMessage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100191EA4(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for PushMessage(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100191EE0()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_100191F04()
{
  uint64_t v0;

  sub_100190BB8(v0);
}

unint64_t sub_100191F0C()
{
  unint64_t result;

  result = qword_100295A18;
  if (!qword_100295A18)
  {
    result = swift_getWitnessTable(&unk_10021BBB8, &type metadata for PushHelperServiceError);
    atomic_store(result, (unint64_t *)&qword_100295A18);
  }
  return result;
}

uint64_t sub_100191F50()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100191F84()
{
  uint64_t v0;

  return sub_10018FEFC(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(void (**)(uint64_t, unint64_t, _QWORD))(v0 + 32), *(_QWORD *)(v0 + 40));
}

id sub_100191F9C(uint64_t a1)
{
  id v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  __n128 v7;
  os_log_type_t v8;
  uint8_t *v9;
  id v11;
  uint64_t v12;

  v2 = objc_msgSend((id)objc_opt_self(AAPreferences), "customHealthCheckVersion");
  if (v2)
  {
    v3 = v2;
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v4 = type metadata accessor for Logger(0);
    v5 = sub_100005288(v4, (uint64_t)qword_1002A89D8);
    v6 = Logger.logObject.getter(v5);
    v8 = static os_log_type_t.default.getter(v7);
    if (os_log_type_enabled(v6, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v9 = 134217984;
      v11 = v3;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v11, &v12);
      _os_log_impl((void *)&_mh_execute_header, v6, v8, "Returning custom version - %ld.", v9, 0xCu);
      swift_slowDealloc(v9, -1, -1);
    }

    return v3;
  }
  return (id)a1;
}

ValueMetadata *type metadata accessor for CustodianHealthCheckVersionProvider()
{
  return &type metadata for CustodianHealthCheckVersionProvider;
}

uint64_t sub_1001920DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v5 = sub_1000080B4(&qword_100293CC8);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  __chkstk_darwin(v5, v8);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v5);
  v9 = *(unsigned __int8 *)(v6 + 80);
  v10 = (v9 + 16) & ~v9;
  v11 = swift_allocObject(&unk_10026C958, v10 + v7, v9 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(v11 + v10, (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
  sub_1000E0990(a3, (uint64_t)sub_100197008, v11);
  return swift_release(v11);
}

uint64_t sub_1001921BC()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1[15] = v0;
  v2 = *(_QWORD *)(type metadata accessor for CustodianRecord(0) - 8);
  v1[16] = v2;
  v1[17] = swift_task_alloc((*(_QWORD *)(v2 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = sub_1000080B4(&qword_10028C448);
  v1[18] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v1[19] = v4;
  v1[20] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1000080B4(&qword_10028FA50);
  v1[21] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v1[22] = v6;
  v1[23] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100192270, 0, 0);
}

uint64_t sub_100192270()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  __n128 v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;

  if (qword_10028ADC8 != -1)
    swift_once(&qword_10028ADC8, sub_100046D2C);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100005288(v1, (uint64_t)qword_1002A89D8);
  *(_QWORD *)(v0 + 192) = v2;
  v3 = Logger.logObject.getter(v2);
  v5 = static os_log_type_t.default.getter(v4);
  if (os_log_type_enabled(v3, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v5, "Fetching cached trusted contacts", v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }
  v8 = *(_QWORD *)(v0 + 176);
  v7 = *(_QWORD *)(v0 + 184);
  v9 = *(_QWORD *)(v0 + 168);
  v10 = *(_QWORD *)(v0 + 120);

  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v7, v10 + OBJC_IVAR____TtC13appleaccountd22DaemonCustodianFetcher__accountStore, v9);
  Dependency.wrappedValue.getter((_QWORD *)(v0 + 16), v9);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
  v11 = objc_msgSend(*(id *)(*sub_10000732C((_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 40)) + 16), "aa_primaryAppleAccount");

  v12 = sub_100006F58((_QWORD *)(v0 + 16));
  if (v11)
  {
    v14 = *(_QWORD *)(v0 + 152);
    v13 = *(_QWORD *)(v0 + 160);
    v15 = *(_QWORD *)(v0 + 144);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v13, *(_QWORD *)(v0 + 120) + OBJC_IVAR____TtC13appleaccountd22DaemonCustodianFetcher__custodianStorageController, v15);
    Dependency.wrappedValue.getter((_QWORD *)(v0 + 56), v15);
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
    v16 = *sub_10000732C((_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 80));
    v17 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
    *(_QWORD *)(v0 + 200) = v17;
    v18 = sub_1000080B4(&qword_100295C60);
    *v17 = v0;
    v17[1] = sub_1001925D0;
    return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 112, 0, 0, 0xD000000000000011, 0x800000010020EDC0, sub_100197068, v16, v18);
  }
  else
  {
    v20 = Logger.logObject.getter(v12);
    v21 = static os_log_type_t.error.getter(v20);
    if (os_log_type_enabled(v20, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v22 = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Not logged in to AppleAccount, unable to fetch", v22, 2u);
      swift_slowDealloc(v22, -1, -1);
    }

    type metadata accessor for AACustodianError(0);
    v24 = v23;
    *(_QWORD *)(v0 + 104) = -7002;
    v25 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
    v26 = sub_100005150((unint64_t *)&qword_10028B640, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianError, (uint64_t)&unk_100218378);
    v27 = _BridgedStoredNSError.init(_:userInfo:)((_QWORD *)(v0 + 96), v0 + 104, v25, v24, v26);
    swift_willThrow(v27);
    v28 = *(_QWORD *)(v0 + 160);
    v29 = *(_QWORD *)(v0 + 136);
    swift_task_dealloc(*(_QWORD *)(v0 + 184));
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1001925D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 200);
  *(_QWORD *)(*(_QWORD *)v1 + 208) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_100192888;
  else
    v3 = sub_100192634;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100192634()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  __n128 v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;

  v1 = *(_QWORD *)(v0 + 112);
  sub_100006F58((_QWORD *)(v0 + 56));
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v3 = *(_QWORD *)(v0 + 128);
    sub_10019742C();
    v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v5 = *(_QWORD *)(v3 + 72);
    do
    {
      v6 = *(_QWORD *)(v0 + 136);
      sub_100027FE8(v4, v6, type metadata accessor for CustodianRecord);
      v7 = sub_100096D40(v6, 1, 1, 1);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v7);
      v9 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
      v8 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v9 >= v8 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v8 > 1, v9 + 1, 1);
      v10 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v9, v7);
      specialized Array._endMutation()(v10);

      v4 += v5;
      --v2;
    }
    while (v2);
    v11 = swift_bridgeObjectRelease(v1);
    v12 = Logger.logObject.getter(v11);
    v14 = static os_log_type_t.default.getter(v13);
    if (os_log_type_enabled(v12, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, v14, "Returning cached trusted contacts", v15, 2u);
      swift_slowDealloc(v15, -1, -1);
    }
  }
  else
  {
    v16 = swift_bridgeObjectRelease(v1);
    v12 = Logger.logObject.getter(v16);
    v17 = static os_log_type_t.error.getter(v12);
    if (os_log_type_enabled(v12, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, v17, "FetchCustodians found 0 records", v18, 2u);
      swift_slowDealloc(v18, -1, -1);
    }
  }

  v19 = *(_QWORD *)(v0 + 160);
  v20 = *(_QWORD *)(v0 + 136);
  swift_task_dealloc(*(_QWORD *)(v0 + 184));
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  return (*(uint64_t (**)(_QWORD *))(v0 + 8))(_swiftEmptyArrayStorage);
}

uint64_t sub_100192888()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_100006F58((_QWORD *)(v0 + 56));
  v1 = *(_QWORD *)(v0 + 160);
  v2 = *(_QWORD *)(v0 + 136);
  swift_task_dealloc(*(_QWORD *)(v0 + 184));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001928E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  _QWORD *v7;

  v6[2] = a5;
  v6[3] = a6;
  v7 = (_QWORD *)swift_task_alloc(dword_100295A8C);
  v6[4] = v7;
  *v7 = v6;
  v7[1] = sub_100192930;
  return sub_1000042D0();
}

uint64_t sub_100192930(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 32);
  *(_QWORD *)(*v2 + 40) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_1001929E8;
  }
  else
  {
    *(_QWORD *)(v4 + 48) = a1;
    v6 = sub_1001929A4;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_1001929A4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  (*(void (**)(uint64_t, _QWORD))(v0 + 16))(v1, 0);
  swift_bridgeObjectRelease(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001929E8()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(_QWORD, uint64_t);

  v1 = *(_QWORD *)(v0 + 40);
  v2 = *(void (**)(_QWORD, uint64_t))(v0 + 16);
  swift_errorRetain(v1);
  v2(0, v1);
  swift_errorRelease(v1);
  swift_errorRelease(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100192A44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 352);
  *(_QWORD *)(*(_QWORD *)v1 + 360) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_100192FF4;
  else
    v3 = sub_100192AA8;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_100192AA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, uint64_t, uint64_t);
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint8_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(uint64_t, uint64_t);
  void (*v48)(uint64_t);
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;

  v1 = *(_QWORD *)(v0 + 176);
  *(_QWORD *)(v0 + 368) = v1;
  sub_100006F58((_QWORD *)(v0 + 136));
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v50 = (_QWORD *)(v0 + 56);
    v3 = *(_QWORD *)(v0 + 288);
    v4 = *(_QWORD *)(v0 + 296);
    v5 = *(_QWORD *)(v0 + 280);
    v6 = *(_QWORD *)(v0 + 264);
    v52 = *(_QWORD *)(v0 + 256);
    v7 = *(_QWORD *)(v0 + 232);
    v48 = *(void (**)(uint64_t))(v3 + 16);
    v49 = *(_QWORD *)(v0 + 208) + OBJC_IVAR____TtC13appleaccountd22DaemonCustodianFetcher__idmsHandler;
    v48(v4);
    Dependency.wrappedValue.getter((_QWORD *)(v0 + 96), v5);
    v47 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
    v47(v4, v5);
    sub_10000732C((_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 120));
    v8 = v1 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
    v9 = *(_QWORD *)(v6 + 72);
    v51 = v1;
    swift_bridgeObjectRetain(v1);
    v10 = _swiftEmptyArrayStorage;
    do
    {
      v11 = *(_QWORD *)(v0 + 272);
      v12 = *(_QWORD *)(v0 + 216);
      v13 = *(_QWORD *)(v0 + 224);
      sub_100027FE8(v8, v11, type metadata accessor for CustodianRecord);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v12, v11 + *(int *)(v52 + 20), v13);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v7 + 56))(v12, 0, 1, v13);
      sub_100028388(v11, type metadata accessor for CustodianRecord);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v12, 1, v13) == 1)
      {
        sub_100004934(*(_QWORD *)(v0 + 216), (uint64_t *)&unk_1002904F0);
      }
      else
      {
        v15 = *(_QWORD *)(v0 + 240);
        v14 = *(_QWORD *)(v0 + 248);
        v16 = *(_QWORD *)(v0 + 224);
        v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32);
        v17(v14, *(_QWORD *)(v0 + 216), v16);
        v17(v15, v14, v16);
        if ((swift_isUniquelyReferenced_nonNull_native(v10) & 1) == 0)
          v10 = (_QWORD *)sub_10013423C(0, v10[2] + 1, 1, (unint64_t)v10);
        v19 = v10[2];
        v18 = v10[3];
        if (v19 >= v18 >> 1)
          v10 = (_QWORD *)sub_10013423C(v18 > 1, v19 + 1, 1, (unint64_t)v10);
        v20 = *(_QWORD *)(v0 + 240);
        v21 = *(_QWORD *)(v0 + 224);
        v10[2] = v19 + 1;
        v17((uint64_t)v10+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72) * v19, v20, v21);
      }
      v8 += v9;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease(v51);
    v22 = sub_100138B90((uint64_t)v10);
    swift_bridgeObjectRelease(v10);
    sub_100006F58((_QWORD *)(v0 + 96));
    if (!v22)
    {
      if (qword_10028ADC8 != -1)
        swift_once(&qword_10028ADC8, sub_100046D2C);
      v23 = type metadata accessor for Logger(0);
      v24 = sub_100005288(v23, (uint64_t)qword_1002A89D8);
      v25 = Logger.logObject.getter(v24);
      v26 = static os_log_type_t.error.getter(v25);
      if (os_log_type_enabled(v25, v26))
      {
        v27 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v27 = 0;
        _os_log_impl((void *)&_mh_execute_header, v25, v26, "Not all custodians are confirmed with IdMS", v27, 2u);
        swift_slowDealloc(v27, -1, -1);
      }
      v28 = *(_QWORD *)(v0 + 296);
      v29 = *(_QWORD *)(v0 + 280);

      ((void (*)(uint64_t, uint64_t, uint64_t))v48)(v28, v49, v29);
      Dependency.wrappedValue.getter(v50, v29);
      v47(v28, v29);
      sub_10000732C(v50, *(_QWORD *)(v0 + 80));
      sub_100138D84();
      sub_100006F58(v50);
    }
    v30 = *(_QWORD *)(v0 + 208);
    v31 = sub_1000080B4(&qword_100295C68);
    v32 = swift_task_alloc(48);
    *(_QWORD *)(v0 + 376) = v32;
    *(_QWORD *)(v32 + 16) = v51;
    *(_QWORD *)(v32 + 24) = v30;
    *(_BYTE *)(v32 + 32) = v22;
    v33 = sub_1000080B4(&qword_100295C80);
    v34 = (_QWORD *)swift_task_alloc(async function pointer to withTaskGroup<A, B>(of:returning:isolation:body:)[1]);
    *(_QWORD *)(v0 + 384) = v34;
    *v34 = v0;
    v34[1] = sub_10019308C;
    return withTaskGroup<A, B>(of:returning:isolation:body:)(v0 + 200, v31, v33, 0, 0, &unk_100295C78, v32, v31);
  }
  else
  {
    swift_bridgeObjectRelease(v1);
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v36 = type metadata accessor for Logger(0);
    v37 = sub_100005288(v36, (uint64_t)qword_1002A89D8);
    v38 = Logger.logObject.getter(v37);
    v39 = static os_log_type_t.error.getter(v38);
    if (os_log_type_enabled(v38, v39))
    {
      v40 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v40 = 0;
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "FetchCustodians found 0 records", v40, 2u);
      swift_slowDealloc(v40, -1, -1);
    }

    v41 = *(_QWORD *)(v0 + 320);
    v42 = *(_QWORD *)(v0 + 296);
    v43 = *(_QWORD *)(v0 + 272);
    v45 = *(_QWORD *)(v0 + 240);
    v44 = *(_QWORD *)(v0 + 248);
    v46 = *(_QWORD *)(v0 + 216);
    swift_task_dealloc(*(_QWORD *)(v0 + 344));
    swift_task_dealloc(v41);
    swift_task_dealloc(v42);
    swift_task_dealloc(v43);
    swift_task_dealloc(v44);
    swift_task_dealloc(v45);
    swift_task_dealloc(v46);
    return (*(uint64_t (**)(_QWORD *))(v0 + 8))(_swiftEmptyArrayStorage);
  }
}

uint64_t sub_100192FF4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_100006F58((_QWORD *)(v0 + 136));
  v1 = *(_QWORD *)(v0 + 320);
  v2 = *(_QWORD *)(v0 + 296);
  v3 = *(_QWORD *)(v0 + 272);
  v5 = *(_QWORD *)(v0 + 240);
  v4 = *(_QWORD *)(v0 + 248);
  v6 = *(_QWORD *)(v0 + 216);
  swift_task_dealloc(*(_QWORD *)(v0 + 344));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10019308C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 376);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 368);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 384));
  swift_bridgeObjectRelease(v2);
  swift_task_dealloc(v1);
  return swift_task_switch(sub_1001930F4, 0, 0);
}

uint64_t sub_1001930F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(v0 + 200);
  v2 = *(_QWORD *)(v0 + 320);
  v3 = *(_QWORD *)(v0 + 296);
  v4 = *(_QWORD *)(v0 + 272);
  v6 = *(_QWORD *)(v0 + 240);
  v5 = *(_QWORD *)(v0 + 248);
  v7 = *(_QWORD *)(v0 + 216);
  swift_task_dealloc(*(_QWORD *)(v0 + 344));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

uint64_t sub_10019318C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;

  *(_BYTE *)(v5 + 304) = a5;
  *(_QWORD *)(v5 + 96) = a3;
  *(_QWORD *)(v5 + 104) = a4;
  *(_QWORD *)(v5 + 80) = a1;
  *(_QWORD *)(v5 + 88) = a2;
  v6 = type metadata accessor for UUID(0);
  *(_QWORD *)(v5 + 112) = v6;
  v7 = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v5 + 120) = v7;
  *(_QWORD *)(v5 + 128) = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1000080B4(&qword_100295C88);
  *(_QWORD *)(v5 + 136) = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1000080B4(&qword_100295C68);
  *(_QWORD *)(v5 + 144) = v9;
  v10 = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v5 + 152) = v10;
  v11 = (*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v5 + 160) = swift_task_alloc(v11);
  *(_QWORD *)(v5 + 168) = swift_task_alloc(v11);
  *(_QWORD *)(v5 + 176) = swift_task_alloc(v11);
  v12 = sub_1000080B4(&qword_100295C90);
  *(_QWORD *)(v5 + 184) = v12;
  v13 = *(_QWORD *)(v12 - 8);
  *(_QWORD *)(v5 + 192) = v13;
  *(_QWORD *)(v5 + 200) = swift_task_alloc((*(_QWORD *)(v13 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD *)(type metadata accessor for CustodianRecord(0) - 8);
  *(_QWORD *)(v5 + 208) = v14;
  v15 = *(_QWORD *)(v14 + 64);
  *(_QWORD *)(v5 + 216) = v15;
  v16 = (v15 + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v5 + 224) = swift_task_alloc(v16);
  *(_QWORD *)(v5 + 232) = swift_task_alloc(v16);
  v17 = (*(_QWORD *)(*(_QWORD *)(sub_1000080B4((uint64_t *)&unk_100294B20) - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v5 + 240) = swift_task_alloc(v17);
  *(_QWORD *)(v5 + 248) = swift_task_alloc(v17);
  return swift_task_switch(sub_1001932F8, 0, 0);
}

uint64_t sub_1001932F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t ObjectType;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  void (*v35)(uint64_t, uint64_t, uint64_t, uint64_t, __n128);
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;

  v1 = *(_QWORD *)(v0 + 96);
  v2 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v0 + 256) = v2;
  if (v2)
  {
    v3 = *(_QWORD *)(v0 + 208);
    v44 = *(_BYTE *)(v0 + 304);
    v4 = *(unsigned __int8 *)(v3 + 80);
    v5 = (v4 + 32) & ~v4;
    v6 = v1 + v5;
    v42 = *(_QWORD *)(v3 + 72);
    v43 = v5;
    v41 = v4 | 7;
    v7 = (*(_QWORD *)(v0 + 216) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
    v39 = v7 + 8;
    v40 = v7;
    v38 = v7 + 9;
    v8 = type metadata accessor for TaskPriority(0);
    v36 = *(_QWORD *)(v8 - 8);
    v35 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(v36 + 56);
    v9 = swift_bridgeObjectRetain(v1);
    v37 = v8;
    while (1)
    {
      v45 = v2;
      v13 = *(_QWORD *)(v0 + 240);
      v14 = *(_QWORD *)(v0 + 248);
      v15 = *(_QWORD *)(v0 + 232);
      v16 = *(_QWORD *)(v0 + 104);
      v35(v14, 1, 1, v8, v9);
      sub_100027FE8(v6, v15, type metadata accessor for CustodianRecord);
      v17 = swift_allocObject(&unk_10026C980, v38, v41);
      *(_QWORD *)(v17 + 16) = 0;
      v18 = (uint64_t *)(v17 + 16);
      *(_QWORD *)(v17 + 24) = 0;
      sub_10003B730(v15, v17 + v43, type metadata accessor for CustodianRecord);
      *(_QWORD *)(v17 + v40) = v16;
      *(_BYTE *)(v17 + v39) = v44;
      sub_10016A19C(v14, v13);
      LODWORD(v13) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v36 + 48))(v13, 1, v8);
      v19 = swift_retain(v16);
      v20 = *(_QWORD *)(v0 + 240);
      if ((_DWORD)v13 == 1)
      {
        sub_100004934(*(_QWORD *)(v0 + 240), (uint64_t *)&unk_100294B20);
        v21 = 0;
        v22 = *v18;
        if (!*v18)
          goto LABEL_8;
      }
      else
      {
        v28 = TaskPriority.rawValue.getter(v19);
        (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v20, v8);
        v21 = v28;
        v22 = *v18;
        if (!*v18)
        {
LABEL_8:
          v25 = 0;
          v27 = 0;
          goto LABEL_9;
        }
      }
      v23 = *(_QWORD *)(v17 + 24);
      ObjectType = swift_getObjectType(v22);
      swift_unknownObjectRetain(v22);
      v25 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v23);
      v27 = v26;
      swift_unknownObjectRelease(v22);
LABEL_9:
      v29 = **(_QWORD **)(v0 + 88);
      v30 = swift_allocObject(&unk_10026C9A8, 32, 7);
      *(_QWORD *)(v30 + 16) = &unk_100295CA8;
      *(_QWORD *)(v30 + 24) = v17;
      v31 = v27 | v25;
      if (v27 | v25)
      {
        v31 = v0 + 16;
        *(_QWORD *)(v0 + 16) = 0;
        *(_QWORD *)(v0 + 24) = 0;
        *(_QWORD *)(v0 + 32) = v25;
        *(_QWORD *)(v0 + 40) = v27;
      }
      v10 = *(_QWORD *)(v0 + 248);
      v11 = *(_QWORD *)(v0 + 144);
      *(_QWORD *)(v0 + 48) = 1;
      *(_QWORD *)(v0 + 56) = v31;
      *(_QWORD *)(v0 + 64) = v29;
      v12 = swift_task_create(v21 | 0x3100, v0 + 48, v11, &unk_100295CB0, v30);
      swift_release(v12);
      sub_100004934(v10, (uint64_t *)&unk_100294B20);
      v6 += v42;
      v2 = v45 - 1;
      v8 = v37;
      if (v45 == 1)
      {
        swift_bridgeObjectRelease(*(_QWORD *)(v0 + 96));
        break;
      }
    }
  }
  TaskGroup.makeAsyncIterator()(**(_QWORD **)(v0 + 88), *(_QWORD *)(v0 + 144));
  v32 = sub_100197398();
  *(_QWORD *)(v0 + 264) = v32;
  v33 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of AsyncIteratorProtocol.next()[1]);
  *(_QWORD *)(v0 + 272) = v33;
  *v33 = v0;
  v33[1] = sub_100193610;
  return dispatch thunk of AsyncIteratorProtocol.next()(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 184), v32);
}

uint64_t sub_100193610()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v2 = *(_QWORD **)v1;
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v1 + 272));
  if (v0)
  {
    v4 = v2[24];
    v3 = v2[25];
    v5 = v2[23];
    swift_bridgeObjectRelease(&_swiftEmptyDictionarySingleton);
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
    v6 = OSTransaction.complete();
  }
  else
  {
    v2[35] = &_swiftEmptyDictionarySingleton;
    v6 = sub_1001936A8;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_1001936A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  id v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, uint64_t, uint64_t);
  void *v34;
  uint64_t v35;
  id v36;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v38;
  unint64_t v39;
  uint64_t v40;
  _BOOL8 v41;
  char v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  BOOL v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(uint64_t, uint64_t);
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;

  v1 = *(_QWORD *)(v0 + 144);
  v2 = *(_QWORD *)(v0 + 136);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v0 + 152) + 48))(v2, 1, v1) == 1)
  {
    v3 = *(_QWORD *)(v0 + 256);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 192) + 8))(*(_QWORD *)(v0 + 200), *(_QWORD *)(v0 + 184));
    sub_100004934(v2, &qword_100295C88);
    v4 = (_QWORD *)(v0 + 280);
    if (!v3)
    {
LABEL_14:
      v46 = *(_QWORD *)(v0 + 240);
      v47 = *(_QWORD *)(v0 + 248);
      v49 = *(_QWORD *)(v0 + 224);
      v48 = *(_QWORD *)(v0 + 232);
      v50 = *(_QWORD *)(v0 + 200);
      v52 = *(_QWORD *)(v0 + 168);
      v51 = *(_QWORD *)(v0 + 176);
      v70 = *(_QWORD *)(v0 + 160);
      v71 = *(_QWORD *)(v0 + 136);
      v72 = *(_QWORD *)(v0 + 128);
      v53 = *(_QWORD **)(v0 + 80);
      swift_bridgeObjectRelease(*v4);
      *v53 = _swiftEmptyArrayStorage;
      swift_task_dealloc(v47);
      swift_task_dealloc(v46);
      swift_task_dealloc(v48);
      swift_task_dealloc(v49);
      swift_task_dealloc(v50);
      swift_task_dealloc(v51);
      swift_task_dealloc(v52);
      swift_task_dealloc(v70);
      swift_task_dealloc(v71);
      swift_task_dealloc(v72);
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    v5 = *(_QWORD *)(v0 + 96);
    v6 = *(_QWORD *)(v0 + 280);
    v7 = *(_QWORD *)(v0 + 208);
    v8 = v5 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
    v9 = *(_QWORD *)(v7 + 72);
    swift_bridgeObjectRetain(v5);
    v10 = 0;
    while (1)
    {
      v11 = *(_QWORD *)(v0 + 224);
      v13 = *(_QWORD *)(v0 + 120);
      v12 = *(_QWORD *)(v0 + 128);
      v14 = *(_QWORD *)(v0 + 112);
      sub_100027FE8(v8, v11, type metadata accessor for CustodianRecord);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(v12, v11, v14);
      result = sub_100028388(v11, type metadata accessor for CustodianRecord);
      if (!*(_QWORD *)(v6 + 16))
        break;
      result = sub_10010AA48(*(_QWORD *)(v0 + 128));
      if ((v16 & 1) == 0)
        goto LABEL_24;
      v18 = *(_QWORD *)(v0 + 120);
      v17 = *(_QWORD *)(v0 + 128);
      v19 = *(_QWORD *)(v0 + 112);
      v20 = *(id *)(*(_QWORD *)(v6 + 56) + 8 * result);
      (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v17, v19);
      v21 = v20;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v21);
      v23 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
      v22 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v23 >= v22 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v22 > 1, v23 + 1, 1);
      ++v10;
      v24 = *(_QWORD *)(v0 + 256);
      v25 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v23, v21);
      specialized Array._endMutation()(v25);

      v8 += v9;
      if (v10 == v24)
      {
        swift_bridgeObjectRelease(*(_QWORD *)(v0 + 280));
        v4 = (_QWORD *)(v0 + 96);
        goto LABEL_14;
      }
    }
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v26 = *(_QWORD *)(v0 + 280);
  v28 = *(_QWORD *)(v0 + 168);
  v27 = *(_QWORD *)(v0 + 176);
  v29 = *(_QWORD *)(v0 + 160);
  v30 = *(_QWORD *)(v0 + 112);
  v31 = *(_QWORD *)(v0 + 120);
  sub_1001973E4(v2, v27);
  v32 = *(int *)(v1 + 48);
  v33 = *(void (**)(uint64_t, uint64_t, uint64_t))(v31 + 16);
  v33(v28, v27, v30);
  v34 = *(void **)(v27 + v32);
  *(_QWORD *)(v28 + v32) = v34;
  v35 = *(int *)(v1 + 48);
  v33(v29, v27, v30);
  *(_QWORD *)(v29 + v35) = v34;
  v36 = v34;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v26);
  *(_QWORD *)(v0 + 72) = v26;
  v39 = sub_10010AA48(v28);
  v40 = *(_QWORD *)(v26 + 16);
  v41 = (v38 & 1) == 0;
  result = v40 + v41;
  if (__OFADD__(v40, v41))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v42 = v38;
  if (*(_QWORD *)(*(_QWORD *)(v0 + 280) + 24) >= result)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      sub_100021478();
  }
  else
  {
    v43 = *(_QWORD *)(v0 + 168);
    sub_10001EF94(result, isUniquelyReferenced_nonNull_native);
    v44 = sub_10010AA48(v43);
    if ((v42 & 1) != (v45 & 1))
      return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(*(_QWORD *)(v0 + 112));
    v39 = v44;
  }
  v54 = *(_QWORD **)(v0 + 72);
  *(_QWORD *)(v0 + 288) = v54;
  if ((v42 & 1) != 0)
  {
    v55 = v54[7];
    v56 = 8 * v39;

    *(_QWORD *)(v55 + v56) = v36;
LABEL_22:
    v63 = *(_QWORD *)(v0 + 168);
    v64 = *(_QWORD *)(v0 + 176);
    v65 = *(_QWORD *)(v0 + 160);
    v66 = *(_QWORD *)(v0 + 112);
    v67 = *(_QWORD *)(v0 + 120);
    swift_bridgeObjectRelease(0x8000000000000000);
    v68 = *(void (**)(uint64_t, uint64_t))(v67 + 8);
    v68(v63, v66);
    v68(v65, v66);
    sub_100004934(v64, &qword_100295C68);
    v69 = (_QWORD *)swift_task_alloc(async function pointer to dispatch thunk of AsyncIteratorProtocol.next()[1]);
    *(_QWORD *)(v0 + 296) = v69;
    *v69 = v0;
    v69[1] = sub_100193B2C;
    return dispatch thunk of AsyncIteratorProtocol.next()(*(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 184), *(_QWORD *)(v0 + 264));
  }
  v57 = *(_QWORD *)(v0 + 168);
  v58 = *(_QWORD *)(v0 + 112);
  v59 = *(_QWORD *)(v0 + 120);
  v54[(v39 >> 6) + 8] |= 1 << v39;
  result = ((uint64_t (*)(unint64_t, uint64_t, uint64_t))v33)(v54[6] + *(_QWORD *)(v59 + 72) * v39, v57, v58);
  *(_QWORD *)(v54[7] + 8 * v39) = v36;
  v60 = v54[2];
  v61 = __OFADD__(v60, 1);
  v62 = v60 + 1;
  if (!v61)
  {
    v54[2] = v62;
    goto LABEL_22;
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_100193B2C()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::Void (__swiftcall *v7)();

  v2 = *(_QWORD **)v1;
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v1 + 296));
  v3 = v2[36];
  if (v0)
  {
    v5 = v2[24];
    v4 = v2[25];
    v6 = v2[23];
    swift_bridgeObjectRelease(v3);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
    v7 = OSTransaction.complete();
  }
  else
  {
    v2[35] = v3;
    v7 = (Swift::Void (__swiftcall *)())sub_1001936A8;
  }
  return swift_task_switch(v7, 0, 0);
}

uint64_t sub_100193BB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;

  *(_BYTE *)(v6 + 364) = a6;
  *(_QWORD *)(v6 + 120) = a4;
  *(_QWORD *)(v6 + 128) = a5;
  *(_QWORD *)(v6 + 112) = a1;
  v7 = type metadata accessor for Date(0);
  *(_QWORD *)(v6 + 136) = v7;
  v8 = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v6 + 144) = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v6 + 152) = swift_task_alloc(v9);
  *(_QWORD *)(v6 + 160) = swift_task_alloc(v9);
  *(_QWORD *)(v6 + 168) = swift_task_alloc(v9);
  *(_QWORD *)(v6 + 176) = swift_task_alloc(v9);
  *(_QWORD *)(v6 + 184) = swift_task_alloc(v9);
  *(_QWORD *)(v6 + 192) = swift_task_alloc(v9);
  *(_QWORD *)(v6 + 200) = swift_task_alloc(v9);
  v10 = type metadata accessor for CustodianRecord(0);
  *(_QWORD *)(v6 + 208) = v10;
  v11 = (*(_QWORD *)(*(_QWORD *)(v10 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v6 + 216) = swift_task_alloc(v11);
  *(_QWORD *)(v6 + 224) = swift_task_alloc(v11);
  *(_QWORD *)(v6 + 232) = swift_task_alloc(v11);
  *(_QWORD *)(v6 + 240) = swift_task_alloc(v11);
  *(_QWORD *)(v6 + 248) = swift_task_alloc(v11);
  *(_QWORD *)(v6 + 256) = swift_task_alloc(v11);
  *(_QWORD *)(v6 + 264) = swift_task_alloc(v11);
  *(_QWORD *)(v6 + 272) = swift_task_alloc(v11);
  *(_QWORD *)(v6 + 280) = swift_task_alloc(v11);
  return swift_task_switch(sub_100193CF4, 0, 0);
}

uint64_t sub_100193CF4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  __n128 v6;
  os_log_type_t v7;
  _BOOL4 v8;
  uint64_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  __n128 v22;
  os_log_type_t v23;
  _BOOL4 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  int v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  _BOOL4 v36;
  uint64_t v37;
  uint8_t *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;

  if (qword_10028ADC8 != -1)
    swift_once(&qword_10028ADC8, sub_100046D2C);
  v1 = *(_QWORD *)(v0 + 280);
  v2 = *(_QWORD *)(v0 + 120);
  v3 = type metadata accessor for Logger(0);
  *(_QWORD *)(v0 + 288) = sub_100005288(v3, (uint64_t)qword_1002A89D8);
  v4 = sub_100027FE8(v2, v1, type metadata accessor for CustodianRecord);
  v5 = Logger.logObject.getter(v4);
  v7 = static os_log_type_t.default.getter(v6);
  v8 = os_log_type_enabled(v5, v7);
  v9 = *(_QWORD *)(v0 + 280);
  if (v8)
  {
    v10 = (uint8_t *)swift_slowAlloc(12, -1);
    v11 = swift_slowAlloc(32, -1);
    v46 = v11;
    *(_DWORD *)v10 = 136315138;
    v12 = UUID.uuidString.getter(v11);
    v14 = v13;
    *(_QWORD *)(v0 + 104) = sub_1001DEF4C(v12, v13, &v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 104, v0 + 112);
    swift_bridgeObjectRelease(v14);
    sub_100028388(v9, type metadata accessor for CustodianRecord);
    _os_log_impl((void *)&_mh_execute_header, v5, v7, "Checking CKShare and IdMS confirmation for trusted Contact: %s", v10, 0xCu);
    swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);
  }
  else
  {
    sub_100028388(*(_QWORD *)(v0 + 280), type metadata accessor for CustodianRecord);
  }

  v16 = *(_QWORD *)(v0 + 120);
  if (*(_QWORD *)(v16 + *(int *)(*(_QWORD *)(v0 + 208) + 36)) == 2)
  {
    Date.init()(v15);
    v17 = (_QWORD *)swift_task_alloc(dword_100295AA4);
    *(_QWORD *)(v0 + 296) = v17;
    *v17 = v0;
    v17[1] = sub_100194280;
    return sub_100195FD4(*(_QWORD *)(v0 + 120));
  }
  else
  {
    *(_WORD *)(v0 + 367) = 0;
    v19 = *(_QWORD *)(v0 + 248);
    sub_100027FE8(v16, *(_QWORD *)(v0 + 256), type metadata accessor for CustodianRecord);
    v20 = sub_100027FE8(v16, v19, type metadata accessor for CustodianRecord);
    v21 = Logger.logObject.getter(v20);
    v23 = static os_log_type_t.default.getter(v22);
    v24 = os_log_type_enabled(v21, v23);
    v26 = *(_QWORD *)(v0 + 248);
    v25 = *(_QWORD *)(v0 + 256);
    if (v24)
    {
      v45 = *(_QWORD *)(v0 + 208);
      v27 = swift_slowAlloc(30, -1);
      v28 = swift_slowAlloc(32, -1);
      v46 = v28;
      *(_DWORD *)v27 = 136315906;
      v29 = UUID.uuidString.getter(v28);
      v31 = v30;
      *(_QWORD *)(v0 + 64) = sub_1001DEF4C(v29, v30, &v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72);
      swift_bridgeObjectRelease(v31);
      sub_100028388(v25, type metadata accessor for CustodianRecord);
      *(_WORD *)(v27 + 12) = 1024;
      *(_DWORD *)(v0 + 348) = 0;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 348, v0 + 352);
      *(_WORD *)(v27 + 18) = 1024;
      *(_DWORD *)(v0 + 352) = 0;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 352, v0 + 356);
      *(_WORD *)(v27 + 24) = 1024;
      v32 = *(unsigned __int8 *)(v26 + *(int *)(v45 + 48));
      sub_100028388(v26, type metadata accessor for CustodianRecord);
      *(_DWORD *)(v0 + 356) = v32;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 356, v0 + 360);
      _os_log_impl((void *)&_mh_execute_header, v21, v23, "Trusted Contact: %s\nisSharedAndAccepted: %{BOOL}d\nconfirmedWithIdMS: %{BOOL}d\ninManateeContainer:%{BOOL}d", (uint8_t *)v27, 0x1Eu);
      swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v28, -1, -1);
      swift_slowDealloc(v27, -1, -1);
    }
    else
    {
      sub_100028388(v26, type metadata accessor for CustodianRecord);
      sub_100028388(v25, type metadata accessor for CustodianRecord);
    }

    v33 = sub_100027FE8(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 240), type metadata accessor for CustodianRecord);
    v34 = Logger.logObject.getter(v33);
    v35 = static os_log_type_t.info.getter(v34);
    v36 = os_log_type_enabled(v34, v35);
    v37 = *(_QWORD *)(v0 + 240);
    if (v36)
    {
      v38 = (uint8_t *)swift_slowAlloc(12, -1);
      v39 = swift_slowAlloc(32, -1);
      v46 = v39;
      *(_DWORD *)v38 = 136315138;
      v40 = sub_1001E4A60();
      v42 = v41;
      *(_QWORD *)(v0 + 56) = sub_1001DEF4C(v40, v41, &v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64);
      swift_bridgeObjectRelease(v42);
      sub_100028388(v37, type metadata accessor for CustodianRecord);
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "fetchTrustedContacts - Checking CRK presence on Octagon for %s", v38, 0xCu);
      swift_arrayDestroy(v39, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v39, -1, -1);
      swift_slowDealloc(v38, -1, -1);
    }
    else
    {
      sub_100028388(*(_QWORD *)(v0 + 240), type metadata accessor for CustodianRecord);
    }

    Date.init()(v43);
    v44 = (_QWORD *)swift_task_alloc(dword_100295A94);
    *(_QWORD *)(v0 + 328) = v44;
    *v44 = v0;
    v44[1] = sub_100194F24;
    return sub_100195594(*(_QWORD *)(v0 + 120));
  }
}

uint64_t sub_100194280(char a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 296);
  *(_BYTE *)(*(_QWORD *)v1 + 365) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1001942DC, 0, 0);
}

uint64_t sub_1001942DC()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  NSObject *v10;
  __n128 v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  void (*v20)(uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  __n128 v45;
  os_log_type_t v46;
  _BOOL4 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  int v54;
  uint64_t v55;
  NSObject *v56;
  os_log_type_t v57;
  _BOOL4 v58;
  uint64_t v59;
  uint8_t *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _BYTE *v71;
  uint64_t v72;

  v1 = v0;
  v2 = (_BYTE *)(v0 + 364);
  v3 = *(_QWORD *)(v1 + 272);
  v4 = *(_QWORD *)(v1 + 192);
  v5 = *(_QWORD *)(v1 + 200);
  v6 = *(_QWORD *)(v1 + 136);
  v7 = *(_QWORD *)(v1 + 120);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 + 144) + 16);
  *(_QWORD *)(v1 + 304) = v8;
  v8(v4, v5, v6);
  v9 = sub_100027FE8(v7, v3, type metadata accessor for CustodianRecord);
  v10 = Logger.logObject.getter(v9);
  v12 = static os_log_type_t.default.getter(v11);
  if (os_log_type_enabled(v10, v12))
  {
    v13 = *(_QWORD *)(v1 + 272);
    v14 = *(_QWORD *)(v1 + 192);
    v69 = *(_QWORD *)(v1 + 200);
    v71 = v2;
    v15 = *(_QWORD *)(v1 + 184);
    v16 = *(_QWORD *)(v1 + 136);
    v17 = *(_QWORD *)(v1 + 144);
    v18 = swift_slowAlloc(22, -1);
    v68 = swift_slowAlloc(32, -1);
    v72 = v68;
    *(_DWORD *)v18 = 134218242;
    Date.init()(v68);
    v19 = Date.timeIntervalSince(_:)(v14);
    v20 = *(void (**)(uint64_t, uint64_t))(v17 + 8);
    v20(v15, v16);
    *(double *)(v1 + 88) = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 88, v1 + 96);
    v21 = ((uint64_t (*)(uint64_t, uint64_t))v20)(v14, v16);
    *(_WORD *)(v18 + 12) = 2080;
    v22 = UUID.uuidString.getter(v21);
    v24 = v23;
    *(_QWORD *)(v1 + 96) = sub_1001DEF4C(v22, v23, &v72);
    v25 = v71;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 96, v1 + 104);
    swift_bridgeObjectRelease(v24);
    sub_100028388(v13, type metadata accessor for CustodianRecord);
    _os_log_impl((void *)&_mh_execute_header, v10, v12, "⏰ Took %f secs to check isSharedAndAccepted for  %s", (uint8_t *)v18, 0x16u);
    swift_arrayDestroy(v68, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v68, -1, -1);
    swift_slowDealloc(v18, -1, -1);

    v26 = v69;
    v27 = v16;
  }
  else
  {
    v28 = *(_QWORD *)(v1 + 272);
    v29 = v2;
    v30 = *(_QWORD *)(v1 + 192);
    v31 = *(_QWORD *)(v1 + 200);
    v32 = *(_QWORD *)(v1 + 136);
    v33 = *(_QWORD *)(v1 + 144);

    sub_100028388(v28, type metadata accessor for CustodianRecord);
    v20 = *(void (**)(uint64_t, uint64_t))(v33 + 8);
    v20(v30, v32);
    v26 = v31;
    v25 = v29;
    v27 = v32;
  }
  v34 = ((uint64_t (*)(uint64_t, uint64_t))v20)(v26, v27);
  *(_QWORD *)(v1 + 312) = v20;
  v35 = v25[1];
  if (v35 != 1 || (*v25 & 1) != 0)
  {
    v25[4] = v35;
    v25[3] = v35;
    v41 = *(_QWORD *)(v1 + 248);
    v42 = *(_QWORD *)(v1 + 120);
    sub_100027FE8(v42, *(_QWORD *)(v1 + 256), type metadata accessor for CustodianRecord);
    v43 = sub_100027FE8(v42, v41, type metadata accessor for CustodianRecord);
    v44 = Logger.logObject.getter(v43);
    v46 = static os_log_type_t.default.getter(v45);
    v47 = os_log_type_enabled(v44, v46);
    v49 = *(_QWORD *)(v1 + 248);
    v48 = *(_QWORD *)(v1 + 256);
    if (v47)
    {
      v67 = *(_QWORD *)(v1 + 208);
      v50 = swift_slowAlloc(30, -1);
      v70 = swift_slowAlloc(32, -1);
      v72 = v70;
      *(_DWORD *)v50 = 136315906;
      v51 = UUID.uuidString.getter(v70);
      v53 = v52;
      *(_QWORD *)(v1 + 64) = sub_1001DEF4C(v51, v52, &v72);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 64, v1 + 72);
      swift_bridgeObjectRelease(v53);
      sub_100028388(v48, type metadata accessor for CustodianRecord);
      *(_WORD *)(v50 + 12) = 1024;
      *(_DWORD *)(v1 + 348) = v35;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 348, v1 + 352);
      *(_WORD *)(v50 + 18) = 1024;
      *(_DWORD *)(v1 + 352) = v35;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 352, v1 + 356);
      *(_WORD *)(v50 + 24) = 1024;
      v54 = *(unsigned __int8 *)(v49 + *(int *)(v67 + 48));
      sub_100028388(v49, type metadata accessor for CustodianRecord);
      *(_DWORD *)(v1 + 356) = v54;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 356, v1 + 360);
      _os_log_impl((void *)&_mh_execute_header, v44, v46, "Trusted Contact: %s\nisSharedAndAccepted: %{BOOL}d\nconfirmedWithIdMS: %{BOOL}d\ninManateeContainer:%{BOOL}d", (uint8_t *)v50, 0x1Eu);
      swift_arrayDestroy(v70, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v70, -1, -1);
      swift_slowDealloc(v50, -1, -1);
    }
    else
    {
      sub_100028388(v49, type metadata accessor for CustodianRecord);
      sub_100028388(v48, type metadata accessor for CustodianRecord);
    }

    v55 = sub_100027FE8(*(_QWORD *)(v1 + 120), *(_QWORD *)(v1 + 240), type metadata accessor for CustodianRecord);
    v56 = Logger.logObject.getter(v55);
    v57 = static os_log_type_t.info.getter(v56);
    v58 = os_log_type_enabled(v56, v57);
    v59 = *(_QWORD *)(v1 + 240);
    if (v58)
    {
      v60 = (uint8_t *)swift_slowAlloc(12, -1);
      v61 = swift_slowAlloc(32, -1);
      v72 = v61;
      *(_DWORD *)v60 = 136315138;
      v62 = sub_1001E4A60();
      v64 = v63;
      *(_QWORD *)(v1 + 56) = sub_1001DEF4C(v62, v63, &v72);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 56, v1 + 64);
      swift_bridgeObjectRelease(v64);
      sub_100028388(v59, type metadata accessor for CustodianRecord);
      _os_log_impl((void *)&_mh_execute_header, v56, v57, "fetchTrustedContacts - Checking CRK presence on Octagon for %s", v60, 0xCu);
      swift_arrayDestroy(v61, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v61, -1, -1);
      swift_slowDealloc(v60, -1, -1);
    }
    else
    {
      sub_100028388(*(_QWORD *)(v1 + 240), type metadata accessor for CustodianRecord);
    }

    Date.init()(v65);
    v66 = (_QWORD *)swift_task_alloc(dword_100295A94);
    *(_QWORD *)(v1 + 328) = v66;
    *v66 = v1;
    v66[1] = sub_100194F24;
    return sub_100195594(*(_QWORD *)(v1 + 120));
  }
  else
  {
    v36 = *(_QWORD *)(v1 + 208);
    v37 = *(_QWORD *)(v1 + 120);
    Date.init()(v34);
    v38 = v37 + *(int *)(v36 + 20);
    v39 = (_QWORD *)swift_task_alloc(dword_100295A9C);
    *(_QWORD *)(v1 + 320) = v39;
    *v39 = v1;
    v39[1] = sub_100194914;
    return sub_100195B1C(v38);
  }
}

uint64_t sub_100194914(char a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 320);
  *(_BYTE *)(*(_QWORD *)v1 + 366) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100194970, 0, 0);
}

uint64_t sub_100194970()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  __n128 v5;
  os_log_type_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  void (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  __n128 v27;
  os_log_type_t v28;
  _BOOL4 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  int v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  _BOOL4 v41;
  uint64_t v42;
  uint8_t *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v55 = v0 + 64;
  v1 = *(_QWORD *)(v0 + 264);
  v2 = *(_QWORD *)(v0 + 120);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(v0 + 304))(*(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 136));
  v3 = sub_100027FE8(v2, v1, type metadata accessor for CustodianRecord);
  v4 = Logger.logObject.getter(v3);
  v6 = static os_log_type_t.default.getter(v5);
  if (os_log_type_enabled(v4, v6))
  {
    v7 = *(void (**)(uint64_t, uint64_t))(v0 + 312);
    v51 = *(_QWORD *)(v0 + 264);
    v8 = *(_QWORD *)(v0 + 184);
    v54 = *(_QWORD *)(v0 + 176);
    v9 = *(_QWORD *)(v0 + 168);
    v10 = *(_QWORD *)(v0 + 136);
    v11 = swift_slowAlloc(22, -1);
    v53 = swift_slowAlloc(32, -1);
    v56 = v53;
    *(_DWORD *)v11 = 134218242;
    Date.init()(v53);
    v12 = Date.timeIntervalSince(_:)(v9);
    v7(v8, v10);
    *(double *)(v0 + 72) = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 72, v0 + 80);
    v13 = ((uint64_t (*)(uint64_t, uint64_t))v7)(v9, v10);
    *(_WORD *)(v11 + 12) = 2080;
    v14 = UUID.uuidString.getter(v13);
    v16 = v15;
    *(_QWORD *)(v0 + 80) = sub_1001DEF4C(v14, v15, &v56);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 80, v0 + 88);
    swift_bridgeObjectRelease(v16);
    sub_100028388(v51, type metadata accessor for CustodianRecord);
    _os_log_impl((void *)&_mh_execute_header, v4, v6, "⏰ %f secs to check IdMSConfirmed for %s", (uint8_t *)v11, 0x16u);
    swift_arrayDestroy(v53, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v53, -1, -1);
    swift_slowDealloc(v11, -1, -1);

    v7(v54, v10);
  }
  else
  {
    v17 = *(void (**)(uint64_t, uint64_t))(v0 + 312);
    v18 = *(_QWORD *)(v0 + 264);
    v20 = *(_QWORD *)(v0 + 168);
    v19 = *(_QWORD *)(v0 + 176);
    v21 = *(_QWORD *)(v0 + 136);

    sub_100028388(v18, type metadata accessor for CustodianRecord);
    v17(v20, v21);
    v17(v19, v21);
  }
  v22 = *(unsigned __int8 *)(v0 + 366);
  *(_BYTE *)(v0 + 368) = 1;
  *(_BYTE *)(v0 + 367) = v22;
  v23 = *(_QWORD *)(v0 + 248);
  v24 = *(_QWORD *)(v0 + 120);
  sub_100027FE8(v24, *(_QWORD *)(v0 + 256), type metadata accessor for CustodianRecord);
  v25 = sub_100027FE8(v24, v23, type metadata accessor for CustodianRecord);
  v26 = Logger.logObject.getter(v25);
  v28 = static os_log_type_t.default.getter(v27);
  v29 = os_log_type_enabled(v26, v28);
  v31 = *(_QWORD *)(v0 + 248);
  v30 = *(_QWORD *)(v0 + 256);
  if (v29)
  {
    v52 = *(_QWORD *)(v0 + 208);
    v32 = swift_slowAlloc(30, -1);
    v33 = swift_slowAlloc(32, -1);
    v56 = v33;
    *(_DWORD *)v32 = 136315906;
    v34 = UUID.uuidString.getter(v33);
    v36 = v35;
    *(_QWORD *)(v0 + 64) = sub_1001DEF4C(v34, v35, &v56);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v55, v0 + 72);
    swift_bridgeObjectRelease(v36);
    sub_100028388(v30, type metadata accessor for CustodianRecord);
    *(_WORD *)(v32 + 12) = 1024;
    *(_DWORD *)(v0 + 348) = 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 348, v0 + 352);
    *(_WORD *)(v32 + 18) = 1024;
    *(_DWORD *)(v0 + 352) = v22;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 352, v0 + 356);
    *(_WORD *)(v32 + 24) = 1024;
    v37 = *(unsigned __int8 *)(v31 + *(int *)(v52 + 48));
    sub_100028388(v31, type metadata accessor for CustodianRecord);
    *(_DWORD *)(v0 + 356) = v37;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 356, v0 + 360);
    _os_log_impl((void *)&_mh_execute_header, v26, v28, "Trusted Contact: %s\nisSharedAndAccepted: %{BOOL}d\nconfirmedWithIdMS: %{BOOL}d\ninManateeContainer:%{BOOL}d", (uint8_t *)v32, 0x1Eu);
    swift_arrayDestroy(v33, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v33, -1, -1);
    swift_slowDealloc(v32, -1, -1);
  }
  else
  {
    sub_100028388(*(_QWORD *)(v0 + 248), type metadata accessor for CustodianRecord);
    sub_100028388(v30, type metadata accessor for CustodianRecord);
  }

  v38 = sub_100027FE8(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 240), type metadata accessor for CustodianRecord);
  v39 = Logger.logObject.getter(v38);
  v40 = static os_log_type_t.info.getter(v39);
  v41 = os_log_type_enabled(v39, v40);
  v42 = *(_QWORD *)(v0 + 240);
  if (v41)
  {
    v43 = (uint8_t *)swift_slowAlloc(12, -1);
    v44 = swift_slowAlloc(32, -1);
    v56 = v44;
    *(_DWORD *)v43 = 136315138;
    v45 = sub_1001E4A60();
    v47 = v46;
    *(_QWORD *)(v0 + 56) = sub_1001DEF4C(v45, v46, &v56);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v55);
    swift_bridgeObjectRelease(v47);
    sub_100028388(v42, type metadata accessor for CustodianRecord);
    _os_log_impl((void *)&_mh_execute_header, v39, v40, "fetchTrustedContacts - Checking CRK presence on Octagon for %s", v43, 0xCu);
    swift_arrayDestroy(v44, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v44, -1, -1);
    swift_slowDealloc(v43, -1, -1);
  }
  else
  {
    sub_100028388(*(_QWORD *)(v0 + 240), type metadata accessor for CustodianRecord);
  }

  Date.init()(v48);
  v49 = (_QWORD *)swift_task_alloc(dword_100295A94);
  *(_QWORD *)(v0 + 328) = v49;
  *v49 = v0;
  v49[1] = sub_100194F24;
  return sub_100195594(*(_QWORD *)(v0 + 120));
}

uint64_t sub_100194F24(char a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 328);
  *(_BYTE *)(*(_QWORD *)v1 + 369) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100194F80, 0, 0);
}

uint64_t sub_100194F80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  __n128 v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t inited;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  int v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;

  v1 = v0 + 16;
  v2 = *(_QWORD *)(v0 + 232);
  v3 = *(_QWORD *)(v0 + 120);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 144) + 16))(*(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 160), *(_QWORD *)(v0 + 136));
  v4 = sub_100027FE8(v3, v2, type metadata accessor for CustodianRecord);
  v5 = Logger.logObject.getter(v4);
  v7 = static os_log_type_t.default.getter(v6);
  if (os_log_type_enabled(v5, v7))
  {
    v69 = *(_QWORD *)(v0 + 232);
    v8 = *(_QWORD *)(v0 + 184);
    v9 = *(_QWORD *)(v0 + 144);
    v10 = *(_QWORD *)(v0 + 152);
    v11 = *(_QWORD *)(v0 + 136);
    v12 = swift_slowAlloc(22, -1);
    v71 = swift_slowAlloc(32, -1);
    v74 = v71;
    *(_DWORD *)v12 = 134218242;
    Date.init()(v71);
    v13 = Date.timeIntervalSince(_:)(v10);
    v14 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
    v14(v8, v11);
    *(double *)(v0 + 40) = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48);
    v15 = ((uint64_t (*)(uint64_t, uint64_t))v14)(v10, v11);
    *(_WORD *)(v12 + 12) = 2080;
    v16 = UUID.uuidString.getter(v15);
    v18 = v17;
    *(_QWORD *)(v0 + 48) = sub_1001DEF4C(v16, v17, &v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56);
    swift_bridgeObjectRelease(v18);
    sub_100028388(v69, type metadata accessor for CustodianRecord);
    _os_log_impl((void *)&_mh_execute_header, v5, v7, "⏰ Took %f secs to checkCRK for %s", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy(v71, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v71, -1, -1);
    v19 = v12;
    v1 = v0 + 16;
    swift_slowDealloc(v19, -1, -1);
  }
  else
  {
    v20 = *(_QWORD *)(v0 + 232);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 144) + 8))(*(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 136));
    sub_100028388(v20, type metadata accessor for CustodianRecord);
  }

  v21 = (unsigned __int8 *)(v0 + 367);
  v22 = *(_QWORD *)(v0 + 224);
  v23 = *(_QWORD *)(v0 + 120);
  v24 = type metadata accessor for CustodianDefaults();
  inited = swift_initStackObject(v24, v1);
  v26 = UUID.uuidString.getter(inited);
  v28 = v27;
  v29 = sub_1001558B0(v26, v27);
  swift_bridgeObjectRelease(v28);
  v30 = sub_100027FE8(v23, v22, type metadata accessor for CustodianRecord);
  v31 = Logger.logObject.getter(v30);
  v32 = static os_log_type_t.debug.getter(v31);
  if (os_log_type_enabled(v31, v32))
  {
    v67 = *(unsigned __int8 *)(v0 + 369);
    v60 = *(unsigned __int8 *)(v0 + 368);
    v63 = *v21;
    v33 = *(_QWORD *)(v0 + 224);
    v65 = v29;
    v34 = swift_slowAlloc(36, -1);
    v35 = swift_slowAlloc(32, -1);
    v74 = v35;
    *(_DWORD *)v34 = 136316162;
    v36 = type metadata accessor for UUID(0);
    v37 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v38 = dispatch thunk of CustomStringConvertible.description.getter(v36, v37);
    v40 = v39;
    *(_QWORD *)(v0 + 32) = sub_1001DEF4C(v38, v39, &v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40);
    swift_bridgeObjectRelease(v40);
    sub_100028388(v33, type metadata accessor for CustodianRecord);
    *(_WORD *)(v34 + 12) = 1024;
    *(_DWORD *)(v0 + 360) = v60;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 360, v0 + 364);
    *(_WORD *)(v34 + 18) = 1024;
    *(_DWORD *)(v0 + 336) = v63;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 336, v0 + 340);
    *(_WORD *)(v34 + 24) = 1024;
    *(_DWORD *)(v0 + 340) = v67;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 340, v0 + 344);
    *(_WORD *)(v34 + 30) = 1024;
    *(_DWORD *)(v0 + 344) = v65 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 344, v0 + 348);
    _os_log_impl((void *)&_mh_execute_header, v31, v32, "Adding Custodian ID: %s\nisAcceptedAndShared: %{BOOL}d\nisIdMSConfirmed: %{BOOL}d\ncrkExists: %{BOOL}d\npreflightFailed: %{BOOL}d", (uint8_t *)v34, 0x24u);
    swift_arrayDestroy(v35, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v35, -1, -1);
    swift_slowDealloc(v34, -1, -1);

    v29 = v65;
  }
  else
  {
    sub_100028388(*(_QWORD *)(v0 + 224), type metadata accessor for CustodianRecord);

  }
  v52 = *v21;
  v53 = *(unsigned __int8 *)(v0 + 368);
  v54 = *(_QWORD *)(v0 + 280);
  v55 = *(_QWORD *)(v0 + 272);
  v56 = *(_QWORD *)(v0 + 264);
  v57 = *(_QWORD *)(v0 + 256);
  v58 = *(_QWORD *)(v0 + 248);
  v59 = *(_QWORD *)(v0 + 240);
  v41 = *(_QWORD *)(v0 + 216);
  v61 = *(_QWORD *)(v0 + 232);
  v62 = *(_QWORD *)(v0 + 224);
  v64 = *(_QWORD *)(v0 + 200);
  v66 = *(_QWORD *)(v0 + 192);
  v68 = *(_QWORD *)(v0 + 184);
  v70 = *(_QWORD *)(v0 + 176);
  v42 = *(_QWORD *)(v0 + 160);
  v72 = *(_QWORD *)(v0 + 168);
  v43 = *(_QWORD *)(v0 + 144);
  v73 = *(_QWORD *)(v0 + 152);
  v44 = *(_QWORD *)(v0 + 136);
  v45 = *(_BYTE *)(v0 + 369) & ~v29 & 1;
  v46 = *(_QWORD *)(v0 + 112);
  v47 = *(_QWORD *)(v0 + 120);
  v48 = *(int *)(sub_1000080B4(&qword_100295C68) + 48);
  v49 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 16))(v46, v47, v49);
  sub_10019742C();
  sub_100027FE8(v47, v41, type metadata accessor for CustodianRecord);
  v50 = sub_100096D40(v41, v53, v52, v45);
  (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v42, v44);
  *(_QWORD *)(v46 + v48) = v50;
  swift_task_dealloc(v54);
  swift_task_dealloc(v55);
  swift_task_dealloc(v56);
  swift_task_dealloc(v57);
  swift_task_dealloc(v58);
  swift_task_dealloc(v59);
  swift_task_dealloc(v61);
  swift_task_dealloc(v62);
  swift_task_dealloc(v41);
  swift_task_dealloc(v64);
  swift_task_dealloc(v66);
  swift_task_dealloc(v68);
  swift_task_dealloc(v70);
  swift_task_dealloc(v72);
  swift_task_dealloc(v42);
  swift_task_dealloc(v73);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100195594(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2[8] = a1;
  v2[9] = v1;
  v3 = type metadata accessor for UUID(0);
  v2[10] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[11] = v4;
  v2[12] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1000080B4(&qword_10028CCE0);
  v2[13] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v2[14] = v6;
  v2[15] = swift_task_alloc((*(_QWORD *)(v6 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100195620, 0, 0);
}

uint64_t sub_100195620()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v2 = v0[14];
  v1 = v0[15];
  v4 = v0[12];
  v3 = v0[13];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v0[9] + OBJC_IVAR____TtC13appleaccountd22DaemonCustodianFetcher__securityController, v3);
  Dependency.wrappedValue.getter(v0 + 2, v3);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v5 = sub_10000732C(v0 + 2, v0[5]);
  sub_1001E4D98(v4);
  v6 = *v5;
  v7 = swift_task_alloc(32);
  v0[16] = v7;
  *(_QWORD *)(v7 + 16) = v6;
  *(_QWORD *)(v7 + 24) = v4;
  v8 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[17] = v8;
  *v8 = v0;
  v8[1] = sub_10019573C;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 20, 0, 0, 0xD00000000000001FLL, 0x800000010020EDA0, sub_100197060, v7, &type metadata for Bool);
}

uint64_t sub_10019573C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 136);
  *(_QWORD *)(*v1 + 144) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_1001958F8;
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v2 + 128));
    v4 = sub_1001957A8;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1001957A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;

  v1 = *(unsigned __int8 *)(v0 + 160);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 88) + 8))(*(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 80));
  sub_100006F58((_QWORD *)(v0 + 16));
  if (qword_10028ADC8 != -1)
    swift_once(&qword_10028ADC8, sub_100046D2C);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_100005288(v2, (uint64_t)qword_1002A89D8);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.debug.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v6 = 67109120;
    *(_DWORD *)(v0 + 156) = v1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 156, v0 + 160);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "CRK exists on OT? %{BOOL}d", v6, 8u);
    swift_slowDealloc(v6, -1, -1);
  }

  v7 = *(_QWORD *)(v0 + 96);
  swift_task_dealloc(*(_QWORD *)(v0 + 120));
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

uint64_t sub_1001958F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *(_QWORD *)(v0 + 88);
  v1 = *(_QWORD *)(v0 + 96);
  v3 = *(_QWORD *)(v0 + 80);
  swift_task_dealloc(*(_QWORD *)(v0 + 128));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  sub_100006F58((_QWORD *)(v0 + 16));
  if (qword_10028ADC8 != -1)
    swift_once(&qword_10028ADC8, sub_100046D2C);
  v4 = *(_QWORD *)(v0 + 144);
  v5 = type metadata accessor for Logger(0);
  sub_100005288(v5, (uint64_t)qword_1002A89D8);
  swift_errorRetain(v4);
  v6 = swift_errorRetain(v4);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.debug.getter(v7);
  v9 = os_log_type_enabled(v7, v8);
  v10 = *(_QWORD *)(v0 + 144);
  if (v9)
  {
    v11 = swift_slowAlloc(18, -1);
    v12 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v11 = 67109378;
    *(_DWORD *)(v0 + 152) = 0;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 152, v0 + 156);
    *(_WORD *)(v11 + 8) = 2112;
    swift_errorRetain(v10);
    v13 = _swift_stdlib_bridgeErrorToNSError(v10);
    *(_QWORD *)(v0 + 56) = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64);
    *v12 = v13;
    swift_errorRelease(v10);
    swift_errorRelease(v10);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "CRK exists on OT? %{BOOL}d error: %@", (uint8_t *)v11, 0x12u);
    v14 = sub_1000080B4((uint64_t *)&unk_10028BC20);
    swift_arrayDestroy(v12, 1, v14);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v11, -1, -1);

    swift_errorRelease(v10);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 144));
    swift_errorRelease(v10);
    swift_errorRelease(v10);

  }
  v15 = *(_QWORD *)(v0 + 96);
  swift_task_dealloc(*(_QWORD *)(v0 + 120));
  swift_task_dealloc(v15);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t sub_100195B1C(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[8] = a1;
  v2[9] = v1;
  v3 = sub_1000080B4(&qword_10028E8C8);
  v2[10] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[11] = v4;
  v2[12] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100195B80, 0, 0);
}

uint64_t sub_100195B80()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v2 = v0[11];
  v1 = v0[12];
  v3 = v0[10];
  v4 = v0[8];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v0[9] + OBJC_IVAR____TtC13appleaccountd22DaemonCustodianFetcher__idmsHandler, v3);
  Dependency.wrappedValue.getter(v0 + 2, v3);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v5 = *sub_10000732C(v0 + 2, v0[5]);
  v6 = swift_task_alloc(32);
  v0[13] = v6;
  *(_QWORD *)(v6 + 16) = v5;
  *(_QWORD *)(v6 + 24) = v4;
  v7 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[14] = v7;
  *v7 = v0;
  v7[1] = sub_100195C7C;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v7, 0, 0, 0xD000000000000026, 0x800000010020ED70, sub_100197058, v6, (char *)&type metadata for () + 8);
}

uint64_t sub_100195C7C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 112);
  *(_QWORD *)(*v1 + 120) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_100195DE0;
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v2 + 104));
    v4 = sub_100195CE8;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100195CE8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;

  sub_100006F58((_QWORD *)(v0 + 16));
  if (qword_10028ADC8 != -1)
    swift_once(&qword_10028ADC8, sub_100046D2C);
  v1 = type metadata accessor for Logger(0);
  v2 = sub_100005288(v1, (uint64_t)qword_1002A89D8);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Confirm custodian with IdMS finished successfully", v5, 2u);
    swift_slowDealloc(v5, -1, -1);
  }

  swift_task_dealloc(*(_QWORD *)(v0 + 96));
  return (*(uint64_t (**)(BOOL))(v0 + 8))(*(_QWORD *)(v0 + 120) == 0);
}

uint64_t sub_100195DE0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  BOOL v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  swift_task_dealloc(*(_QWORD *)(v0 + 104));
  sub_100006F58((_QWORD *)(v0 + 16));
  if (qword_10028ADC8 != -1)
    swift_once(&qword_10028ADC8, sub_100046D2C);
  v1 = *(_QWORD *)(v0 + 120);
  v2 = type metadata accessor for Logger(0);
  sub_100005288(v2, (uint64_t)qword_1002A89D8);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 120);
  if (v6)
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v8 = 138412290;
    swift_errorRetain(v7);
    v10 = _swift_stdlib_bridgeErrorToNSError(v7);
    *(_QWORD *)(v0 + 56) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64);
    *v9 = v10;
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Confirm custodian with IdMS finished with error %@", v8, 0xCu);
    v11 = sub_1000080B4((uint64_t *)&unk_10028BC20);
    swift_arrayDestroy(v9, 1, v11);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    swift_errorRelease(v7);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 120));
    swift_errorRelease(v7);
    swift_errorRelease(v7);

  }
  swift_task_dealloc(*(_QWORD *)(v0 + 96));
  return (*(uint64_t (**)(BOOL))(v0 + 8))(*(_QWORD *)(v0 + 120) == 0);
}

uint64_t sub_100195FD4(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v2[27] = a1;
  v2[28] = v1;
  v3 = type metadata accessor for CustodianRecord(0);
  v2[29] = v3;
  v2[30] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v3 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_1000080B4(&qword_10028E8C0);
  v2[31] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v2[32] = v5;
  v2[33] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1000080B4(&qword_10028C448);
  v2[34] = v6;
  v7 = *(_QWORD *)(v6 - 8);
  v2[35] = v7;
  v2[36] = swift_task_alloc((*(_QWORD *)(v7 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for CustodianHealthRecord(0);
  v2[37] = v8;
  v9 = (*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[38] = swift_task_alloc(v9);
  v2[39] = swift_task_alloc(v9);
  v2[40] = swift_task_alloc(v9);
  v2[41] = swift_task_alloc(v9);
  return swift_task_switch(sub_1001960D4, 0, 0);
}

uint64_t sub_1001960D4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v2 = v0[35];
  v1 = v0[36];
  v3 = v0[34];
  v4 = v0[29];
  v5 = v0[27];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v0[28] + OBJC_IVAR____TtC13appleaccountd22DaemonCustodianFetcher__custodianStorageController, v3);
  Dependency.wrappedValue.getter(v0 + 2, v3);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v6 = sub_10000732C(v0 + 2, v0[5]);
  v7 = v5 + *(int *)(v4 + 20);
  v8 = *v6;
  v9 = swift_task_alloc(32);
  v0[42] = v9;
  *(_QWORD *)(v9 + 16) = v8;
  *(_QWORD *)(v9 + 24) = v7;
  v10 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[43] = v10;
  *v10 = v0;
  v10[1] = sub_1001961DC;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0[40], 0, 0, 0xD000000000000021, 0x800000010020ED20, sub_100196F94, v9, v0[37]);
}

uint64_t sub_1001961DC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 344);
  *(_QWORD *)(*v1 + 352) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_10019650C;
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v2 + 336));
    v4 = sub_100196248;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_100196248()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v2 = *(_QWORD *)(v0 + 256);
  v1 = *(_QWORD *)(v0 + 264);
  v3 = *(_QWORD *)(v0 + 248);
  v4 = *(_QWORD *)(v0 + 224);
  sub_10003B730(*(_QWORD *)(v0 + 320), *(_QWORD *)(v0 + 328), type metadata accessor for CustodianHealthRecord);
  sub_100006F58((_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4 + OBJC_IVAR____TtC13appleaccountd22DaemonCustodianFetcher__cloudStorage, v3);
  Dependency.wrappedValue.getter((_QWORD *)(v0 + 96), v3);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v5 = sub_1000080B4((uint64_t *)&unk_10028C8C0);
  v6 = sub_1000080B4(&qword_10028CCB0);
  if (swift_dynamicCast(v0 + 56, v0 + 96, v5, v6, 6))
  {
    v7 = *(_QWORD *)(v0 + 328);
    sub_10003A190((__int128 *)(v0 + 56), v0 + 136);
    v8 = *sub_10000732C((_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 160));
    v9 = swift_task_alloc(32);
    *(_QWORD *)(v0 + 360) = v9;
    *(_QWORD *)(v9 + 16) = v8;
    *(_QWORD *)(v9 + 24) = v7;
    v10 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
    *(_QWORD *)(v0 + 368) = v10;
    *v10 = v0;
    v10[1] = sub_100196830;
    return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 384, 0, 0, 0xD000000000000017, 0x800000010020ED50, sub_100196F9C, v9, &type metadata for Bool);
  }
  else
  {
    *(_QWORD *)(v0 + 88) = 0;
    *(_OWORD *)(v0 + 56) = 0u;
    *(_OWORD *)(v0 + 72) = 0u;
    sub_100004934(v0 + 56, &qword_10028CCB8);
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v12 = type metadata accessor for Logger(0);
    v13 = sub_100005288(v12, (uint64_t)qword_1002A89D8);
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.error.getter(v14);
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Lost reference to CloudStorage. Assuming not shared", v16, 2u);
      swift_slowDealloc(v16, -1, -1);
    }
    v17 = *(_QWORD *)(v0 + 328);

    sub_100028388(v17, type metadata accessor for CustodianHealthRecord);
    v18 = *(_QWORD *)(v0 + 320);
    v20 = *(_QWORD *)(v0 + 304);
    v19 = *(_QWORD *)(v0 + 312);
    v21 = *(_QWORD *)(v0 + 288);
    v22 = *(_QWORD *)(v0 + 264);
    v23 = *(_QWORD *)(v0 + 240);
    swift_task_dealloc(*(_QWORD *)(v0 + 328));
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
  }
}

uint64_t sub_10019650C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;

  swift_task_dealloc(*(_QWORD *)(v0 + 336));
  sub_100006F58((_QWORD *)(v0 + 16));
  if (qword_10028ADC8 != -1)
    swift_once(&qword_10028ADC8, sub_100046D2C);
  v1 = *(_QWORD *)(v0 + 352);
  v2 = *(_QWORD *)(v0 + 240);
  v3 = *(_QWORD *)(v0 + 216);
  v4 = type metadata accessor for Logger(0);
  sub_100005288(v4, (uint64_t)qword_1002A89D8);
  sub_100027FE8(v3, v2, type metadata accessor for CustodianRecord);
  swift_errorRetain(v1);
  v5 = swift_errorRetain(v1);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.error.getter(v6);
  v8 = os_log_type_enabled(v6, v7);
  v9 = *(_QWORD *)(v0 + 352);
  v10 = *(_QWORD *)(v0 + 240);
  if (v8)
  {
    v11 = swift_slowAlloc(22, -1);
    v26 = (uint64_t *)swift_slowAlloc(8, -1);
    v27 = swift_slowAlloc(32, -1);
    v28 = v27;
    *(_DWORD *)v11 = 136315394;
    v12 = type metadata accessor for UUID(0);
    v13 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v14 = dispatch thunk of CustomStringConvertible.description.getter(v12, v13);
    v16 = v15;
    *(_QWORD *)(v0 + 184) = sub_1001DEF4C(v14, v15, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 184, v0 + 192);
    swift_bridgeObjectRelease(v16);
    sub_100028388(v10, type metadata accessor for CustodianRecord);
    *(_WORD *)(v11 + 12) = 2112;
    swift_errorRetain(v9);
    v17 = _swift_stdlib_bridgeErrorToNSError(v9);
    *(_QWORD *)(v0 + 176) = v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 176, v0 + 184);
    *v26 = v17;
    swift_errorRelease(v9);
    swift_errorRelease(v9);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Unable to fetch Health Record for custodianID %s.\nUnable to determine if Health record is shared and accepted. %@", (uint8_t *)v11, 0x16u);
    v18 = sub_1000080B4((uint64_t *)&unk_10028BC20);
    swift_arrayDestroy(v26, 1, v18);
    swift_slowDealloc(v26, -1, -1);
    swift_arrayDestroy(v27, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v27, -1, -1);
    swift_slowDealloc(v11, -1, -1);

    swift_errorRelease(v9);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 352));
    sub_100028388(v10, type metadata accessor for CustodianRecord);
    swift_errorRelease(v9);
    swift_errorRelease(v9);

  }
  v19 = *(_QWORD *)(v0 + 320);
  v21 = *(_QWORD *)(v0 + 304);
  v20 = *(_QWORD *)(v0 + 312);
  v22 = *(_QWORD *)(v0 + 288);
  v23 = *(_QWORD *)(v0 + 264);
  v24 = *(_QWORD *)(v0 + 240);
  swift_task_dealloc(*(_QWORD *)(v0 + 328));
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t sub_100196830()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 368);
  *(_QWORD *)(*v1 + 376) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_100196948;
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v2 + 360));
    v4 = sub_10019689C;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_10019689C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(unsigned __int8 *)(v0 + 384);
  sub_100028388(*(_QWORD *)(v0 + 328), type metadata accessor for CustodianHealthRecord);
  sub_100006F58((_QWORD *)(v0 + 136));
  v2 = *(_QWORD *)(v0 + 320);
  v4 = *(_QWORD *)(v0 + 304);
  v3 = *(_QWORD *)(v0 + 312);
  v5 = *(_QWORD *)(v0 + 288);
  v6 = *(_QWORD *)(v0 + 264);
  v7 = *(_QWORD *)(v0 + 240);
  swift_task_dealloc(*(_QWORD *)(v0 + 328));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

uint64_t sub_100196948()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  os_log_type_t type;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  swift_task_dealloc(*(_QWORD *)(v0 + 360));
  if (qword_10028ADC8 != -1)
    swift_once(&qword_10028ADC8, sub_100046D2C);
  v1 = *(_QWORD *)(v0 + 376);
  v2 = *(_QWORD *)(v0 + 328);
  v4 = *(_QWORD *)(v0 + 304);
  v3 = *(_QWORD *)(v0 + 312);
  v5 = type metadata accessor for Logger(0);
  sub_100005288(v5, (uint64_t)qword_1002A89D8);
  sub_100027FE8(v2, v3, type metadata accessor for CustodianHealthRecord);
  sub_100027FE8(v2, v4, type metadata accessor for CustodianHealthRecord);
  swift_errorRetain(v1);
  v6 = swift_errorRetain(v1);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.error.getter(v7);
  v9 = os_log_type_enabled(v7, v8);
  v10 = *(_QWORD *)(v0 + 376);
  v11 = *(_QWORD *)(v0 + 328);
  v13 = *(_QWORD *)(v0 + 304);
  v12 = *(_QWORD *)(v0 + 312);
  if (v9)
  {
    v36 = *(_QWORD *)(v0 + 328);
    v14 = swift_slowAlloc(32, -1);
    v34 = (uint64_t *)swift_slowAlloc(8, -1);
    v35 = swift_slowAlloc(64, -1);
    v37 = v35;
    *(_DWORD *)v14 = 136315650;
    v15 = type metadata accessor for UUID(0);
    type = v8;
    v16 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v17 = dispatch thunk of CustomStringConvertible.description.getter(v15, v16);
    v19 = v18;
    *(_QWORD *)(v0 + 192) = sub_1001DEF4C(v17, v18, &v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 192, v0 + 200);
    swift_bridgeObjectRelease(v19);
    sub_100028388(v12, type metadata accessor for CustodianHealthRecord);
    *(_WORD *)(v14 + 12) = 2080;
    v20 = dispatch thunk of CustomStringConvertible.description.getter(v15, v16);
    v22 = v21;
    *(_QWORD *)(v0 + 200) = sub_1001DEF4C(v20, v21, &v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 200, v0 + 208);
    swift_bridgeObjectRelease(v22);
    sub_100028388(v13, type metadata accessor for CustodianHealthRecord);
    *(_WORD *)(v14 + 22) = 2112;
    swift_errorRetain(v10);
    v23 = _swift_stdlib_bridgeErrorToNSError(v10);
    *(_QWORD *)(v0 + 208) = v23;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 208, v0 + 216);
    *v34 = v23;
    swift_errorRelease(v10);
    swift_errorRelease(v10);
    _os_log_impl((void *)&_mh_execute_header, v7, type, "Unable to determine if HealthRecord %s\nfor custodian %s\nis shared and accepted due to error: %@", (uint8_t *)v14, 0x20u);
    v24 = sub_1000080B4((uint64_t *)&unk_10028BC20);
    swift_arrayDestroy(v34, 1, v24);
    swift_slowDealloc(v34, -1, -1);
    swift_arrayDestroy(v35, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v35, -1, -1);
    swift_slowDealloc(v14, -1, -1);

    swift_errorRelease(v10);
    v25 = v36;
  }
  else
  {

    swift_errorRelease(v10);
    swift_errorRelease(v10);
    sub_100028388(v13, type metadata accessor for CustodianHealthRecord);
    sub_100028388(v12, type metadata accessor for CustodianHealthRecord);
    swift_errorRelease(v10);
    v25 = v11;
  }
  sub_100028388(v25, type metadata accessor for CustodianHealthRecord);
  sub_100006F58((_QWORD *)(v0 + 136));
  v26 = *(_QWORD *)(v0 + 320);
  v28 = *(_QWORD *)(v0 + 304);
  v27 = *(_QWORD *)(v0 + 312);
  v29 = *(_QWORD *)(v0 + 288);
  v30 = *(_QWORD *)(v0 + 264);
  v31 = *(_QWORD *)(v0 + 240);
  swift_task_dealloc(*(_QWORD *)(v0 + 328));
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t sub_100196D24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = v0 + OBJC_IVAR____TtC13appleaccountd22DaemonCustodianFetcher__accountStore;
  v2 = sub_1000080B4(&qword_10028FA50);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  v3 = v0 + OBJC_IVAR____TtC13appleaccountd22DaemonCustodianFetcher__custodianStorageController;
  v4 = sub_1000080B4(&qword_10028C448);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  v5 = v0 + OBJC_IVAR____TtC13appleaccountd22DaemonCustodianFetcher__idmsHandler;
  v6 = sub_1000080B4(&qword_10028E8C8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = v0 + OBJC_IVAR____TtC13appleaccountd22DaemonCustodianFetcher__securityController;
  v8 = sub_1000080B4(&qword_10028CCE0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = v0 + OBJC_IVAR____TtC13appleaccountd22DaemonCustodianFetcher__cloudStorage;
  v10 = sub_1000080B4(&qword_10028E8C0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_100196E28()
{
  return type metadata accessor for DaemonCustodianFetcher(0);
}

uint64_t type metadata accessor for DaemonCustodianFetcher(uint64_t a1)
{
  uint64_t result;

  result = qword_100295A70;
  if (!qword_100295A70)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for DaemonCustodianFetcher);
  return result;
}

void sub_100196E6C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD v12[5];

  sub_100017464(319, (unint64_t *)&qword_100293810, &qword_10028C860);
  if (v3 <= 0x3F)
  {
    v12[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_100017464(319, (unint64_t *)&qword_10028C350, &qword_10028C880);
    if (v5 <= 0x3F)
    {
      v12[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_100017464(319, &qword_10028E288, (uint64_t *)&unk_10028E290);
      if (v7 <= 0x3F)
      {
        v12[2] = *(_QWORD *)(v6 - 8) + 64;
        sub_100017464(319, &qword_10028C868, (uint64_t *)&unk_10028C870);
        if (v9 <= 0x3F)
        {
          v12[3] = *(_QWORD *)(v8 - 8) + 64;
          sub_100017464(319, &qword_10028C8B8, (uint64_t *)&unk_10028C8C0);
          if (v11 <= 0x3F)
          {
            v12[4] = *(_QWORD *)(v10 - 8) + 64;
            swift_updateClassMetadata2(a1, 256, 5, v12, a1 + 80);
          }
        }
      }
    }
  }
}

uint64_t sub_100196F94(uint64_t a1)
{
  uint64_t v1;

  return sub_1001C1240(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_100196F9C(uint64_t a1)
{
  uint64_t v1;

  return sub_1001920DC(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_100196FA4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = sub_1000080B4(&qword_100293CC8);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100197008(uint64_t a1, char a2)
{
  char v3;

  v3 = a2 & 1;
  sub_1000080B4(&qword_100293CC8);
  return sub_10014D194(a1, v3);
}

uint64_t sub_100197058(uint64_t a1)
{
  uint64_t v1;

  return sub_10013A334(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_100197060(uint64_t a1)
{
  uint64_t v1;

  return sub_10018C9E0(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_100197068(uint64_t a1)
{
  uint64_t v1;

  return sub_1001C0708(a1, v1);
}

uint64_t sub_100197070(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char v8;
  _QWORD *v9;

  v6 = *(_QWORD *)(v2 + 16);
  v7 = *(_QWORD *)(v2 + 24);
  v8 = *(_BYTE *)(v2 + 32);
  v9 = (_QWORD *)swift_task_alloc(dword_100295C74);
  *(_QWORD *)(v3 + 16) = v9;
  *v9 = v3;
  v9[1] = sub_100075348;
  return sub_10019318C(a1, a2, v6, v7, v8);
}

uint64_t sub_1001970EC()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;

  v1 = (int *)type metadata accessor for CustodianRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  v6 = v0 + v4;
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v0 + v4, v7);
  v9(v0 + v4 + v1[5], v7);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[7] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[8] + 8));
  v10 = (uint64_t *)(v0 + v4 + v1[10]);
  v11 = v10[1];
  if (v11 >> 60 != 15)
    sub_10000F494(*v10, v11);
  sub_10000F494(*(_QWORD *)(v6 + v1[11]), *(_QWORD *)(v6 + v1[11] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[13] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[14] + 8));
  v12 = v6 + v1[16];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v12, 1, v7))
    v9(v12, v7);
  v13 = (v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v14 = v13 + 9;
  swift_release(*(_QWORD *)(v0 + v13));
  return swift_deallocObject(v0, v14, v3 | 7);
}

uint64_t sub_100197254(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  _QWORD *v12;

  v4 = *(_QWORD *)(type metadata accessor for CustodianRecord(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v1 + 16);
  v7 = *(_QWORD *)(v1 + 24);
  v8 = v1 + v5;
  v9 = v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8);
  v10 = *(_QWORD *)v9;
  v11 = *(_BYTE *)(v9 + 8);
  v12 = (_QWORD *)swift_task_alloc(dword_100295C9C);
  *(_QWORD *)(v2 + 16) = v12;
  *v12 = v2;
  v12[1] = sub_1000224D8;
  return sub_100193BB8(a1, v6, v7, v8, v10, v11);
}

uint64_t sub_100197304()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100197328(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_100295CA4);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_1000224D8;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_100295CA0 + dword_100295CA0))(a1, v4);
}

unint64_t sub_100197398()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100295CB8;
  if (!qword_100295CB8)
  {
    v1 = sub_10000D908(&qword_100295C90);
    result = swift_getWitnessTable(&protocol conformance descriptor for TaskGroup<A>.Iterator, v1);
    atomic_store(result, &qword_100295CB8);
  }
  return result;
}

uint64_t sub_1001973E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000080B4(&qword_100295C68);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_10019742C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10028E888;
  if (!qword_10028E888)
  {
    v1 = objc_opt_self(AATrustedContact);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10028E888);
  }
  return result;
}

uint64_t sub_100197468()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  uint64_t v3;

  v3 = type metadata accessor for AppleIDAvailabilityHealthCheck(0);
  v0 = sub_1000080B4(&qword_100295F60);
  result = String.init<A>(describing:)(&v3, v0);
  qword_100295CC8 = result;
  unk_100295CD0 = v2;
  return result;
}

id sub_1001974B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  __n128 v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  __n128 v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  void *v37;
  id result;
  void *v39;
  id v40;
  void *v41;
  unsigned __int8 v42;
  void *v43;
  id v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  __n128 v50;
  os_log_type_t v51;
  uint8_t *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59[3];
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;

  v1 = v0;
  v2 = sub_1000080B4((uint64_t *)&unk_10028CC80);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (char *)v59 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1000080B4(&qword_10028CD60);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  v11 = (char *)v59 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!sub_100197BC4())
  {
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v27 = type metadata accessor for Logger(0);
    v28 = sub_100005288(v27, (uint64_t)qword_1002A8A08);
    v29 = Logger.logObject.getter(v28);
    v31 = static os_log_type_t.default.getter(v30);
    if (os_log_type_enabled(v29, v31))
    {
      v32 = (uint8_t *)swift_slowAlloc(12, -1);
      v33 = swift_slowAlloc(32, -1);
      v59[0] = v33;
      *(_DWORD *)v32 = 136315138;
      if (qword_10028AEE8 != -1)
        swift_once(&qword_10028AEE8, sub_100197468);
      v34 = qword_100295CC8;
      v35 = unk_100295CD0;
      swift_bridgeObjectRetain(unk_100295CD0);
      v62 = sub_1001DEF4C(v34, v35, v59);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, &v63);
      swift_bridgeObjectRelease(v35);
      _os_log_impl((void *)&_mh_execute_header, v29, v31, "%s - Could not get Continuation Key, Apple ID is NOT available.", v32, 0xCu);
      swift_arrayDestroy(v33, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v33, -1, -1);
      swift_slowDealloc(v32, -1, -1);
    }

    type metadata accessor for AAError(0);
    v25 = v36;
    v26 = -4413;
    goto LABEL_33;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, v0 + OBJC_IVAR____TtC13appleaccountd30AppleIDAvailabilityHealthCheck__followUpController, v7);
  Dependency.wrappedValue.getter(v59, v7);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  v12 = v60;
  v13 = v61;
  sub_10000732C(v59, v60);
  v14 = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 32))(v12, v13);
  sub_100006F58(v59);
  if ((v14 & 1) != 0)
  {
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v15 = type metadata accessor for Logger(0);
    v16 = sub_100005288(v15, (uint64_t)qword_1002A8A08);
    v17 = Logger.logObject.getter(v16);
    v19 = static os_log_type_t.default.getter(v18);
    if (os_log_type_enabled(v17, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc(12, -1);
      v21 = swift_slowAlloc(32, -1);
      v59[0] = v21;
      *(_DWORD *)v20 = 136315138;
      if (qword_10028AEE8 != -1)
        swift_once(&qword_10028AEE8, sub_100197468);
      v22 = qword_100295CC8;
      v23 = unk_100295CD0;
      swift_bridgeObjectRetain(unk_100295CD0);
      v62 = sub_1001DEF4C(v22, v23, v59);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, &v63);
      swift_bridgeObjectRelease(v23);
      _os_log_impl((void *)&_mh_execute_header, v17, v19, "%s - Renew Credentials CFU is posted, Apple ID is NOT available.", v20, 0xCu);
      swift_arrayDestroy(v21, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v21, -1, -1);
      swift_slowDealloc(v20, -1, -1);
    }

    type metadata accessor for AAError(0);
    v25 = v24;
    v26 = -4412;
    goto LABEL_33;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, v1 + OBJC_IVAR____TtC13appleaccountd30AppleIDAvailabilityHealthCheck__cdpController, v2);
  Dependency.wrappedValue.getter(v59, v2);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  v37 = (void *)objc_opt_self(CDPAccount);
  result = objc_msgSend(v37, "sharedInstance");
  if (!result)
  {
    __break(1u);
    goto LABEL_37;
  }
  v39 = result;
  v40 = objc_msgSend(result, "contextForPrimaryAccount");

  if (!v40)
  {
    sub_100006F58(v59);
    goto LABEL_26;
  }
  result = objc_msgSend(v37, "sharedInstance");
  if (!result)
  {
LABEL_37:
    __break(1u);
    return result;
  }
  v41 = result;
  v42 = objc_msgSend(result, "isOTEnabledForContext:", v40);

  sub_100006F58(v59);
  if ((v42 & 1) == 0)
  {
LABEL_26:
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v47 = type metadata accessor for Logger(0);
    v48 = sub_100005288(v47, (uint64_t)qword_1002A8A08);
    v49 = Logger.logObject.getter(v48);
    v51 = static os_log_type_t.default.getter(v50);
    if (os_log_type_enabled(v49, v51))
    {
      v52 = (uint8_t *)swift_slowAlloc(12, -1);
      v53 = swift_slowAlloc(32, -1);
      v59[0] = v53;
      *(_DWORD *)v52 = 136315138;
      if (qword_10028AEE8 != -1)
        swift_once(&qword_10028AEE8, sub_100197468);
      v54 = qword_100295CC8;
      v55 = unk_100295CD0;
      swift_bridgeObjectRetain(unk_100295CD0);
      v62 = sub_1001DEF4C(v54, v55, v59);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, &v63);
      swift_bridgeObjectRelease(v55);
      _os_log_impl((void *)&_mh_execute_header, v49, v51, "%s - Octagon trust is not healthy, Apple ID is NOT available.", v52, 0xCu);
      swift_arrayDestroy(v53, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v53, -1, -1);
      swift_slowDealloc(v52, -1, -1);
    }

    type metadata accessor for AAError(0);
    v25 = v56;
    v26 = -4414;
    goto LABEL_33;
  }
  result = (id)sub_10019A214();
  if (!result)
    return result;
  v43 = result;
  v44 = objc_msgSend(result, "integerValue");

  v45 = sub_100048C24((unint64_t)v44);
  if (v45 != 4 && v45 != 2)
    return 0;
  type metadata accessor for AAError(0);
  v25 = v46;
  v26 = -4416;
LABEL_33:
  v62 = v26;
  v57 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
  v58 = sub_1000C2D50();
  _BridgedStoredNSError.init(_:userInfo:)(v59, &v62, v57, v25, v58);
  return (id)v59[0];
}

BOOL sub_100197BC4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  id v6;
  id v7;
  id v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  id v15;

  v1 = sub_1000080B4(&qword_10028C060);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_10019884C();
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v5, v0 + OBJC_IVAR____TtC13appleaccountd30AppleIDAvailabilityHealthCheck__akAccountManager, v1);
  Dependency.wrappedValue.getter(&v15, v1);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  v7 = v15;
  if (!v6)
  {

LABEL_6:
    v12 = 0;
    goto LABEL_7;
  }
  v8 = v6;
  v9 = objc_msgSend(v7, "continuationTokenForAccount:", v8);
  if (!v9)
  {

    goto LABEL_6;
  }
  v10 = v9;
  static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
  v12 = v11;

LABEL_7:
  swift_bridgeObjectRelease(v12);
  return v12 != 0;
}

uint64_t sub_100197CF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6[19] = a5;
  v6[20] = a6;
  v6[18] = a4;
  v7 = sub_1000080B4(&qword_100295F68);
  v6[21] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v6[22] = v8;
  v6[23] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1000080B4((uint64_t *)&unk_10028CC80);
  v6[24] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v6[25] = v10;
  v6[26] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1000080B4(&qword_10028C060);
  v6[27] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v6[28] = v12;
  v6[29] = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1000080B4(&qword_10028FA50);
  v6[30] = v13;
  v14 = *(_QWORD *)(v13 - 8);
  v6[31] = v14;
  v6[32] = swift_task_alloc((*(_QWORD *)(v14 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100197E08, 0, 0);
}

uint64_t sub_100197E08()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  NSString v12;
  NSString v13;
  id v14;
  id v15;
  Class isa;
  id v17;
  id v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  Class v28;
  id v29;
  Class v30;
  uint64_t v31;
  void *v32;
  Class v33;
  char v34;
  unsigned __int8 v35;
  id v36;
  uint64_t v37;
  void *ObjCClassFromMetadata;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  void *v43;
  id v44;
  NSString v45;
  id v46;
  id v47;
  void *v48;
  void *v49;
  _QWORD *v50;
  _QWORD *v52;

  v2 = v0[31];
  v1 = v0[32];
  v3 = v0[30];
  v4 = v0[18];
  static String._unconditionallyBridgeFromObjectiveC(_:)(kAppleIDHealthCheckEventName);
  v6 = v5;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4 + OBJC_IVAR____TtC13appleaccountd30AppleIDAvailabilityHealthCheck__accountStore, v3);
  Dependency.wrappedValue.getter(v0 + 2, v3);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v7 = objc_msgSend(*(id *)(*sub_10000732C(v0 + 2, v0[5]) + 16), "aa_primaryAppleAccount");
  if (v7 && (v8 = v7, v9 = objc_msgSend(v7, "aa_altDSID"), v8, v9))
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
    v11 = v10;

  }
  else
  {
    v11 = 0;
  }
  sub_100006F58(v0 + 2);
  v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v6);
  if (v11)
  {
    v13 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v11);
  }
  else
  {
    v13 = 0;
  }
  v14 = objc_msgSend((id)objc_opt_self(AAFAnalyticsEvent), "analyticsEventWithName:altDSID:flowID:", v12, v13, 0);
  v0[33] = v14;

  if (v14)
  {
    v52 = v0 + 16;
    v15 = v14;

    isa = Bool._bridgeToObjectiveC()().super.super.isa;
    objc_msgSend(v15, "setObject:forKeyedSubscript:", isa, kAAFDidSucceed);

    v17 = v15;
    v18 = sub_10019884C();
    if (v18)
    {
      v19 = v18;
      v20 = v0[28];
      v21 = v0[29];
      v22 = v0[27];
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16))(v21, v0[18] + OBJC_IVAR____TtC13appleaccountd30AppleIDAvailabilityHealthCheck__akAccountManager, v22);
      Dependency.wrappedValue.getter(v0 + 17, v22);
      (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v21, v22);
      v23 = (void *)v0[17];
      objc_msgSend(v23, "securityLevelForAccount:", v19);

    }
    v24 = v0[25];
    v25 = v0[26];
    v26 = v0[24];
    v27 = v0[18];
    v28 = UInt._bridgeToObjectiveC()().super.super.isa;
    objc_msgSend(v17, "setObject:forKeyedSubscript:", v28, kAAAnalyticsSecurityLevel);

    (*(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 16))(v25, v27 + OBJC_IVAR____TtC13appleaccountd30AppleIDAvailabilityHealthCheck__cdpController, v26);
    v29 = v17;
    Dependency.wrappedValue.getter(v0 + 7, v26);
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v25, v26);
    sub_100048588();
    v30 = Bool._bridgeToObjectiveC()().super.super.isa;
    sub_100006F58(v0 + 7);
    objc_msgSend(v29, "setObject:forKeyedSubscript:", v30, kAAAnalyticsCdpStatus);

  }
  v31 = sub_10019A214();
  if (v31)
  {
    v32 = (void *)v31;
    sub_1000067D4(0, (unint64_t *)&qword_10028E8B0, NSNumber_ptr);
    v33 = NSNumber.init(integerLiteral:)(0).super.super.isa;
    v34 = static NSObject.== infix(_:_:)(v32, v33);

    v35 = v34 & 1;
  }
  else
  {
    v35 = 1;
  }
  v36 = v14;
  sub_10019A6F8(v35, v14);

  v37 = sub_1000067D4(0, &qword_100295F70, AAFDeviceInfo_ptr);
  ObjCClassFromMetadata = (void *)swift_getObjCClassFromMetadata(v37);
  if (objc_msgSend(ObjCClassFromMetadata, "respondsToSelector:", Selector.init(_:)(0x6365536C61636F6CLL, 0xEF65707954746572)))
  {
    if (!v14)
      goto LABEL_23;
    v40 = v0[22];
    v39 = v0[23];
    v41 = v0[21];
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v40 + 16))(v39, v0[18] + OBJC_IVAR____TtC13appleaccountd30AppleIDAvailabilityHealthCheck__deviceInfo, v41);
    v42 = v36;
    Dependency.wrappedValue.getter(v0 + 15, v41);
    (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v39, v41);
    v43 = (void *)v0[15];
    v44 = objc_msgSend(v43, "localSecretType");

    v45 = String._bridgeToObjectiveC()();
    objc_msgSend(v42, "setObject:forKeyedSubscript:", v44, v45);

  }
  else if (!v14)
  {
    goto LABEL_23;
  }
  v46 = v36;
  v47 = sub_1001974B0();
  if (v47)
  {
    v48 = v47;
    v49 = (void *)_convertErrorToNSError(_:)(v47);

  }
  else
  {
    v49 = 0;
  }
  objc_msgSend(v46, "populateUnderlyingErrorsStartingWithRootError:", v49, v52);

LABEL_23:
  sub_100198E44(v14);
  v50 = (_QWORD *)swift_task_alloc(dword_100295D44);
  v0[34] = v50;
  *v50 = v0;
  v50[1] = sub_1001983B0;
  return sub_1001991B4((uint64_t)v14);
}

uint64_t sub_1001983B0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 264);
  v5 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 272));
  v3 = (_QWORD *)swift_task_alloc(dword_100295D4C);
  *(_QWORD *)(v1 + 280) = v3;
  *v3 = v5;
  v3[1] = sub_10019844C;
  return sub_1001995E8(v2);
}

uint64_t sub_10019844C()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 280));
  return swift_task_switch(sub_1001984CC, 0, 0);
}

uint64_t sub_1001984CC()
{
  uint64_t v0;
  void *v1;
  id v2;
  void *v3;
  uint64_t v4;
  NSObject *v5;
  __n128 v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  void *v12;
  id v13;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(id);
  id v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(void);
  id v29;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v1 = *(void **)(v0 + 264);
  sub_100199A1C(v1);
  v2 = sub_10019884C();
  sub_100198A50(v1, v2);

  sub_100199E30(v1);
  if (qword_10028ADD8 != -1)
    swift_once(&qword_10028ADD8, sub_100046D78);
  v3 = *(void **)(v0 + 264);
  v4 = type metadata accessor for Logger(0);
  sub_100005288(v4, (uint64_t)qword_1002A8A08);
  v5 = Logger.logObject.getter(v3);
  v7 = static os_log_type_t.default.getter(v6);
  if (os_log_type_enabled(v5, v7))
  {
    v32 = v0 + 112;
    v8 = swift_slowAlloc(22, -1);
    v31 = (_QWORD *)swift_slowAlloc(8, -1);
    v33 = swift_slowAlloc(32, -1);
    v34 = v33;
    *(_DWORD *)v8 = 136315394;
    if (qword_10028AEE8 != -1)
      swift_once(&qword_10028AEE8, sub_100197468);
    v9 = *(_QWORD *)(v0 + 264);
    v10 = qword_100295CC8;
    v11 = unk_100295CD0;
    swift_bridgeObjectRetain(unk_100295CD0);
    *(_QWORD *)(v0 + 96) = sub_1001DEF4C(v10, v11, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 96, v0 + 104);
    swift_bridgeObjectRelease(v11);
    *(_WORD *)(v8 + 12) = 2112;
    if (v9)
    {
      v12 = *(void **)(v0 + 264);
      *(_QWORD *)(v0 + 112) = v12;
      v13 = v12;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v32, v0 + 120);
      v14 = *(void **)(v0 + 264);
      v15 = v14;
    }
    else
    {
      *(_QWORD *)(v0 + 104) = 0;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 104, v32);
      v15 = 0;
      v14 = *(void **)(v0 + 264);
    }
    *v31 = v15;

    _os_log_impl((void *)&_mh_execute_header, v5, v7, "%s - Reporting AppleID Availability Healthcheck event %@", (uint8_t *)v8, 0x16u);
    v17 = sub_1000080B4((uint64_t *)&unk_10028BC20);
    swift_arrayDestroy(v31, 1, v17);
    swift_slowDealloc(v31, -1, -1);
    swift_arrayDestroy(v33, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v33, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    v16 = *(void **)(v0 + 264);

  }
  v18 = *(void **)(v0 + 264);
  if (v18)
  {
    v19 = *(_QWORD *)(v0 + 144) + OBJC_IVAR____TtC13appleaccountd30AppleIDAvailabilityHealthCheck_reportEvent;
    v21 = *(void (**)(id))v19;
    v20 = *(_QWORD *)(v19 + 8);
    v22 = v18;
    swift_retain(v20);
    v21(v22);

    swift_release(v20);
    v23 = *(void **)(v0 + 264);
  }
  else
  {
    v23 = 0;
  }
  v24 = *(_QWORD *)(v0 + 256);
  v25 = *(_QWORD *)(v0 + 232);
  v26 = *(_QWORD *)(v0 + 208);
  v27 = *(_QWORD *)(v0 + 184);
  v28 = *(void (**)(void))(v0 + 152);
  v29 = sub_1001974B0();
  v28();

  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

id sub_10019884C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id v12;
  void *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  NSString v18;
  id v19;
  id v22[5];

  v1 = v0;
  v2 = sub_1000080B4(&qword_10028C060);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (char *)&v22[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1000080B4(&qword_10028FA50);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  v11 = (char *)&v22[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, v1 + OBJC_IVAR____TtC13appleaccountd30AppleIDAvailabilityHealthCheck__accountStore, v7);
  Dependency.wrappedValue.getter(v22, v7);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  v12 = objc_msgSend(*(id *)(*sub_10000732C(v22, (uint64_t)v22[3]) + 16), "aa_primaryAppleAccount");
  if (v12
    && (v13 = v12, v14 = objc_msgSend(v12, "aa_altDSID"), v13, v14))
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
    v16 = v15;

  }
  else
  {
    v16 = 0;
  }
  sub_100006F58(v22);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, v1 + OBJC_IVAR____TtC13appleaccountd30AppleIDAvailabilityHealthCheck__akAccountManager, v2);
  Dependency.wrappedValue.getter(v22, v2);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  v17 = v22[0];
  if (v16)
  {
    swift_bridgeObjectRetain(v16);
    v18 = String._bridgeToObjectiveC()();
    v19 = objc_msgSend(v17, "authKitAccountWithAltDSID:", v18);

    swift_bridgeObjectRelease_n(v16, 2);
  }
  else
  {

    return 0;
  }
  return v19;
}

void sub_100198A50(void *a1, void *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  id v10;
  id v11;
  id v12;
  id v13;
  Class isa;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  __n128 v18;
  os_log_type_t v19;
  uint8_t *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  uint64_t v36;
  NSObject *v37;
  uint64_t v38;
  id v39;

  v5 = sub_1000080B4(&qword_10028C060);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a1)
  {
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v26 = type metadata accessor for Logger(0);
    v27 = sub_100005288(v26, (uint64_t)qword_1002A8A08);
    v37 = Logger.logObject.getter(v27);
    v28 = static os_log_type_t.error.getter(v37);
    if (os_log_type_enabled(v37, v28))
    {
      v29 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v29 = 0;
      _os_log_impl((void *)&_mh_execute_header, v37, v28, "AppleIDAvailabilityHealthCheck attachCKReason event is nil", v29, 2u);
      swift_slowDealloc(v29, -1, -1);
    }
    goto LABEL_17;
  }
  if (!a2)
  {
    v30 = qword_10028ADD8;
    v37 = a1;
    if (v30 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v31 = type metadata accessor for Logger(0);
    v32 = sub_100005288(v31, (uint64_t)qword_1002A8A08);
    v33 = Logger.logObject.getter(v32);
    v34 = static os_log_type_t.error.getter(v33);
    if (os_log_type_enabled(v33, v34))
    {
      v35 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v35 = 0;
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "AppleIDAvailabilityHealthCheck attachCKReason account is nil", v35, 2u);
      swift_slowDealloc(v35, -1, -1);
    }

LABEL_17:
    return;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, v2 + OBJC_IVAR____TtC13appleaccountd30AppleIDAvailabilityHealthCheck__akAccountManager, v5);
  v10 = a1;
  v11 = a2;
  Dependency.wrappedValue.getter(&v39, v5);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  v12 = v39;
  v13 = objc_msgSend(v39, "deviceRemovalReasonForAccount:", v11);

  isa = Int._bridgeToObjectiveC()().super.super.isa;
  objc_msgSend(v10, "setObject:forKeyedSubscript:", isa, kAAAnalyticsDeviceRemovalReason);

  if (qword_10028ADD8 != -1)
    swift_once(&qword_10028ADD8, sub_100046D78);
  v15 = type metadata accessor for Logger(0);
  v16 = sub_100005288(v15, (uint64_t)qword_1002A8A08);
  v17 = Logger.logObject.getter(v16);
  v19 = static os_log_type_t.default.getter(v18);
  if (os_log_type_enabled(v17, v19))
  {
    v20 = (uint8_t *)swift_slowAlloc(12, -1);
    v21 = (void *)swift_slowAlloc(32, -1);
    v38 = (uint64_t)v13;
    v39 = v21;
    *(_DWORD *)v20 = 136315138;
    type metadata accessor for AKRemoteDeviceRemovalReason(0);
    v23 = String.init<A>(describing:)(&v38, v22);
    v25 = v24;
    v38 = sub_1001DEF4C(v23, v24, (uint64_t *)&v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39);
    swift_bridgeObjectRelease(v25);
    _os_log_impl((void *)&_mh_execute_header, v17, v19, "AppleIDAvailabilityHealthCheck attachCKReason attached %s", v20, 0xCu);
    swift_arrayDestroy(v21, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v21, -1, -1);
    swift_slowDealloc(v20, -1, -1);
  }

}

void sub_100198E44(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  void *v8;
  id v9;
  uint64_t v10;
  id v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  id v19;
  void *v20;
  uint64_t v21;
  Class isa;
  uint64_t v23;
  id v24;
  uint64_t v25[5];

  v3 = sub_1000080B4((uint64_t *)&unk_10028CC80);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v7, v1 + OBJC_IVAR____TtC13appleaccountd30AppleIDAvailabilityHealthCheck__cdpController, v3);
    Dependency.wrappedValue.getter(v25, v3);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
    v8 = *(void **)(*sub_10000732C(v25, v25[3]) + 16);
    v24 = 0;
    objc_msgSend(v8, "walrusStatus:", &v24);
    if (v24)
    {
      v9 = v24;
      swift_willThrow(v9);
      sub_100006F58(v25);
      if (qword_10028ADD8 != -1)
        swift_once(&qword_10028ADD8, sub_100046D78);
      v10 = type metadata accessor for Logger(0);
      sub_100005288(v10, (uint64_t)qword_1002A8A08);
      v11 = v9;
      v12 = Logger.logObject.getter(v11);
      v13 = static os_log_type_t.error.getter(v12);
      if (os_log_type_enabled(v12, v13))
      {
        v14 = swift_slowAlloc(22, -1);
        v15 = (_QWORD *)swift_slowAlloc(8, -1);
        v16 = swift_slowAlloc(32, -1);
        v25[0] = v16;
        *(_DWORD *)v14 = 136315394;
        if (qword_10028AEE8 != -1)
          swift_once(&qword_10028AEE8, sub_100197468);
        v17 = qword_100295CC8;
        v18 = unk_100295CD0;
        swift_bridgeObjectRetain(unk_100295CD0);
        v24 = (id)sub_1001DEF4C(v17, v18, v25);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, v25);
        swift_bridgeObjectRelease(v18);
        *(_WORD *)(v14 + 12) = 2112;
        v19 = v11;
        v20 = (void *)_swift_stdlib_bridgeErrorToNSError(v19);
        v24 = v20;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, v25);
        *v15 = v20;

        _os_log_impl((void *)&_mh_execute_header, v12, v13, "%s - Failed to attach Walrus Status: %@", (uint8_t *)v14, 0x16u);
        v21 = sub_1000080B4((uint64_t *)&unk_10028BC20);
        swift_arrayDestroy(v15, 1, v21);
        swift_slowDealloc(v15, -1, -1);
        swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v16, -1, -1);
        swift_slowDealloc(v14, -1, -1);

      }
      else
      {

      }
    }
    else
    {
      isa = UInt._bridgeToObjectiveC()().super.super.isa;
      sub_100006F58(v25);
      objc_msgSend(a1, "setObject:forKeyedSubscript:", isa, kAAAnalyticsAdvancedDataProtectionState);

    }
  }
}

uint64_t sub_1001991B4(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[9] = a1;
  v2[10] = v1;
  v3 = sub_1000080B4((uint64_t *)&unk_10028CC80);
  v2[11] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[12] = v4;
  v2[13] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100199218, 0, 0);
}

uint64_t sub_100199218()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v5)(void);
  uint64_t (*v7)(void);

  if (v0[9])
  {
    v2 = v0[12];
    v1 = v0[13];
    v3 = v0[11];
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v0[10] + OBJC_IVAR____TtC13appleaccountd30AppleIDAvailabilityHealthCheck__cdpController, v3);
    Dependency.wrappedValue.getter(v0 + 2, v3);
    (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
    v7 = (uint64_t (*)(void))((char *)&dword_10028D480 + dword_10028D480);
    v4 = (_QWORD *)swift_task_alloc(unk_10028D484);
    v0[14] = v4;
    *v4 = v0;
    v4[1] = sub_1001992E0;
    v5 = v7;
  }
  else
  {
    swift_task_dealloc(v0[13]);
    v5 = (uint64_t (*)(void))v0[1];
  }
  return v5();
}

uint64_t sub_1001992E0(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 112);
  *(_QWORD *)(*v2 + 120) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_100199354;
  }
  else
  {
    *(_QWORD *)(v4 + 128) = a1;
    v6 = sub_1000180AC;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_100199354()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  sub_100006F58((_QWORD *)(v0 + 16));
  if (qword_10028ADD8 != -1)
    swift_once(&qword_10028ADD8, sub_100046D78);
  v1 = *(_QWORD *)(v0 + 120);
  v2 = type metadata accessor for Logger(0);
  sub_100005288(v2, (uint64_t)qword_1002A8A08);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = swift_slowAlloc(22, -1);
    v7 = (uint64_t *)swift_slowAlloc(8, -1);
    v15 = swift_slowAlloc(32, -1);
    v16 = v15;
    *(_DWORD *)v6 = 136315394;
    if (qword_10028AEE8 != -1)
      swift_once(&qword_10028AEE8, sub_100197468);
    v8 = *(_QWORD *)(v0 + 120);
    v10 = qword_100295CC8;
    v9 = unk_100295CD0;
    swift_bridgeObjectRetain(unk_100295CD0);
    *(_QWORD *)(v0 + 56) = sub_1001DEF4C(v10, v9, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64);
    swift_bridgeObjectRelease(v9);
    *(_WORD *)(v6 + 12) = 2112;
    swift_errorRetain(v8);
    v11 = _swift_stdlib_bridgeErrorToNSError(v8);
    *(_QWORD *)(v0 + 64) = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72);
    *v7 = v11;
    swift_errorRelease(v8);
    swift_errorRelease(v8);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "%s - Failed to attach Octagon Status: %@", (uint8_t *)v6, 0x16u);
    v12 = sub_1000080B4((uint64_t *)&unk_10028BC20);
    swift_arrayDestroy(v7, 1, v12);
    swift_slowDealloc(v7, -1, -1);
    swift_arrayDestroy(v15, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v15, -1, -1);
    swift_slowDealloc(v6, -1, -1);

    swift_errorRelease(v8);
  }
  else
  {
    v13 = *(_QWORD *)(v0 + 120);
    swift_errorRelease(v13);
    swift_errorRelease(v13);
    swift_errorRelease(v13);

  }
  swift_task_dealloc(*(_QWORD *)(v0 + 104));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001995E8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2[9] = a1;
  v2[10] = v1;
  v3 = sub_1000080B4((uint64_t *)&unk_10028CC80);
  v2[11] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[12] = v4;
  v2[13] = swift_task_alloc((*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_10019964C, 0, 0);
}

uint64_t sub_10019964C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v5)(void);
  uint64_t (*v7)(void);

  if (v0[9])
  {
    v2 = v0[12];
    v1 = v0[13];
    v3 = v0[11];
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v0[10] + OBJC_IVAR____TtC13appleaccountd30AppleIDAvailabilityHealthCheck__cdpController, v3);
    Dependency.wrappedValue.getter(v0 + 2, v3);
    (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
    v7 = (uint64_t (*)(void))((char *)&dword_10028D478 + dword_10028D478);
    v4 = (_QWORD *)swift_task_alloc(unk_10028D47C);
    v0[14] = v4;
    *v4 = v0;
    v4[1] = sub_100199714;
    v5 = v7;
  }
  else
  {
    swift_task_dealloc(v0[13]);
    v5 = (uint64_t (*)(void))v0[1];
  }
  return v5();
}

uint64_t sub_100199714(int a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();

  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 112);
  *(_QWORD *)(*v2 + 120) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    v6 = sub_100199788;
  }
  else
  {
    *(_DWORD *)(v4 + 128) = a1;
    v6 = sub_1000189B0;
  }
  return swift_task_switch(v6, 0, 0);
}

uint64_t sub_100199788()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  sub_100006F58((_QWORD *)(v0 + 16));
  if (qword_10028ADD8 != -1)
    swift_once(&qword_10028ADD8, sub_100046D78);
  v1 = *(_QWORD *)(v0 + 120);
  v2 = type metadata accessor for Logger(0);
  sub_100005288(v2, (uint64_t)qword_1002A8A08);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = swift_slowAlloc(22, -1);
    v7 = (uint64_t *)swift_slowAlloc(8, -1);
    v15 = swift_slowAlloc(32, -1);
    v16 = v15;
    *(_DWORD *)v6 = 136315394;
    if (qword_10028AEE8 != -1)
      swift_once(&qword_10028AEE8, sub_100197468);
    v8 = *(_QWORD *)(v0 + 120);
    v10 = qword_100295CC8;
    v9 = unk_100295CD0;
    swift_bridgeObjectRetain(unk_100295CD0);
    *(_QWORD *)(v0 + 56) = sub_1001DEF4C(v10, v9, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64);
    swift_bridgeObjectRelease(v9);
    *(_WORD *)(v6 + 12) = 2112;
    swift_errorRetain(v8);
    v11 = _swift_stdlib_bridgeErrorToNSError(v8);
    *(_QWORD *)(v0 + 64) = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72);
    *v7 = v11;
    swift_errorRelease(v8);
    swift_errorRelease(v8);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "%s - Failed to attach SOS Status: %@", (uint8_t *)v6, 0x16u);
    v12 = sub_1000080B4((uint64_t *)&unk_10028BC20);
    swift_arrayDestroy(v7, 1, v12);
    swift_slowDealloc(v7, -1, -1);
    swift_arrayDestroy(v15, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v15, -1, -1);
    swift_slowDealloc(v6, -1, -1);

    swift_errorRelease(v8);
  }
  else
  {
    v13 = *(_QWORD *)(v0 + 120);
    swift_errorRelease(v13);
    swift_errorRelease(v13);
    swift_errorRelease(v13);

  }
  swift_task_dealloc(*(_QWORD *)(v0 + 104));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_100199A1C(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id v8;
  void *v9;
  id v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  os_log_type_t v14;
  uint8_t *v15;
  void *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  os_log_type_t v21;
  uint8_t *v22;
  void *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  NSObject *v27;
  uint64_t v28;
  id v29;

  v3 = sub_1000080B4(&qword_10028C060);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_10019884C();
  if (v8)
  {
    v9 = v8;
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v7, v1 + OBJC_IVAR____TtC13appleaccountd30AppleIDAvailabilityHealthCheck__akAccountManager, v3);
    Dependency.wrappedValue.getter(&v29, v3);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
    v10 = v29;
    v11 = objc_msgSend(v29, "adpCohortForAccount:", v9);

    if (!v11)
    {
      if (qword_10028ADD8 != -1)
        swift_once(&qword_10028ADD8, sub_100046D78);
      v19 = type metadata accessor for Logger(0);
      v20 = sub_100005288(v19, (uint64_t)qword_1002A8A08);
      v11 = Logger.logObject.getter(v20);
      v21 = static os_log_type_t.error.getter(v11);
      if (os_log_type_enabled(v11, v21))
      {
        v22 = (uint8_t *)swift_slowAlloc(12, -1);
        v23 = (void *)swift_slowAlloc(32, -1);
        v29 = v23;
        *(_DWORD *)v22 = 136315138;
        if (qword_10028AEE8 != -1)
          swift_once(&qword_10028AEE8, sub_100197468);
        v24 = qword_100295CC8;
        v25 = unk_100295CD0;
        swift_bridgeObjectRetain(unk_100295CD0);
        v28 = sub_1001DEF4C(v24, v25, (uint64_t *)&v29);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29);
        swift_bridgeObjectRelease(v25);
        _os_log_impl((void *)&_mh_execute_header, v11, v21, "%s - Failed to attach ADP cohort type, cohort nil", v22, 0xCu);
        swift_arrayDestroy(v23, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v23, -1, -1);
        swift_slowDealloc(v22, -1, -1);
      }
      goto LABEL_17;
    }
    if (a1)
    {
      objc_msgSend(a1, "setObject:forKeyedSubscript:", v11, kAAAnalyticsADPCohortType);
LABEL_17:

      return;
    }

  }
  else
  {
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v12 = type metadata accessor for Logger(0);
    v13 = sub_100005288(v12, (uint64_t)qword_1002A8A08);
    v27 = Logger.logObject.getter(v13);
    v14 = static os_log_type_t.error.getter(v27);
    if (os_log_type_enabled(v27, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc(12, -1);
      v16 = (void *)swift_slowAlloc(32, -1);
      v29 = v16;
      *(_DWORD *)v15 = 136315138;
      if (qword_10028AEE8 != -1)
        swift_once(&qword_10028AEE8, sub_100197468);
      v17 = qword_100295CC8;
      v18 = unk_100295CD0;
      swift_bridgeObjectRetain(unk_100295CD0);
      v28 = sub_1001DEF4C(v17, v18, (uint64_t *)&v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29);
      swift_bridgeObjectRelease(v18);
      _os_log_impl((void *)&_mh_execute_header, v27, v14, "%s - Failed to attach ADP cohort type, account nil", v15, 0xCu);
      swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v16, -1, -1);
      swift_slowDealloc(v15, -1, -1);

    }
    else
    {

    }
  }
}

void sub_100199E30(void *a1)
{
  void *v2;
  void *v3;
  id v4;
  Class isa;

  if (a1)
  {
    v2 = (void *)sub_10019A214();
    if (v2)
    {
      v3 = v2;
      v4 = objc_msgSend(v2, "integerValue");

      sub_100048C24((unint64_t)v4);
    }
    isa = Int._bridgeToObjectiveC()().super.super.isa;
    objc_msgSend(a1, "setObject:forKeyedSubscript:", isa, kAAAnalyticsRecordViabilityState);

  }
}

uint64_t sub_100199EF8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = v0 + OBJC_IVAR____TtC13appleaccountd30AppleIDAvailabilityHealthCheck__followUpController;
  v2 = sub_1000080B4(&qword_10028CD60);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  v3 = v0 + OBJC_IVAR____TtC13appleaccountd30AppleIDAvailabilityHealthCheck__cdpController;
  v4 = sub_1000080B4((uint64_t *)&unk_10028CC80);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  v5 = v0 + OBJC_IVAR____TtC13appleaccountd30AppleIDAvailabilityHealthCheck__accountStore;
  v6 = sub_1000080B4(&qword_10028FA50);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = v0 + OBJC_IVAR____TtC13appleaccountd30AppleIDAvailabilityHealthCheck__akAccountManager;
  v8 = sub_1000080B4(&qword_10028C060);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = v0 + OBJC_IVAR____TtC13appleaccountd30AppleIDAvailabilityHealthCheck__deviceInfo;
  v10 = sub_1000080B4(&qword_100295F68);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC13appleaccountd30AppleIDAvailabilityHealthCheck_reportEvent + 8));
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_10019A010()
{
  return type metadata accessor for AppleIDAvailabilityHealthCheck(0);
}

uint64_t type metadata accessor for AppleIDAvailabilityHealthCheck(uint64_t a1)
{
  uint64_t result;

  result = qword_100295D30;
  if (!qword_100295D30)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AppleIDAvailabilityHealthCheck);
  return result;
}

void sub_10019A054(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD v12[6];

  sub_100017464(319, &qword_10028BDA0, (uint64_t *)&unk_10028C8F0);
  if (v3 <= 0x3F)
  {
    v12[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_100017464(319, &qword_10028BDA8, &qword_10028C8D0);
    if (v5 <= 0x3F)
    {
      v12[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_100017464(319, (unint64_t *)&qword_100293810, &qword_10028C860);
      if (v7 <= 0x3F)
      {
        v12[2] = *(_QWORD *)(v6 - 8) + 64;
        sub_10019A198(319, (unint64_t *)&qword_10028BDB0, &qword_10028BB50, AKAccountManager_ptr);
        if (v9 <= 0x3F)
        {
          v12[3] = *(_QWORD *)(v8 - 8) + 64;
          sub_10019A198(319, (unint64_t *)&unk_100295D50, &qword_10028BB58, AADeviceInfo_ptr);
          if (v11 <= 0x3F)
          {
            v12[4] = *(_QWORD *)(v10 - 8) + 64;
            v12[5] = (char *)&value witness table for () + 64;
            swift_updateClassMetadata2(a1, 256, 6, v12, a1 + 80);
          }
        }
      }
    }
  }
}

void sub_10019A198(uint64_t a1, unint64_t *a2, unint64_t *a3, _QWORD *a4)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  if (!*a2)
  {
    v6 = sub_1000067D4(255, a3, a4);
    v7 = type metadata accessor for Dependency(a1, v6);
    if (!v8)
      atomic_store(v7, a2);
  }
}

uint64_t sub_10019A1EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10019A3CC(a3, a4);
}

uint64_t sub_10019A214()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  id v6;
  NSString v7;
  id v8;
  uint64_t v9;
  _OWORD v11[2];
  __int128 v12;
  __int128 v13;

  v1 = sub_1000080B4(&qword_10028FA50);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  v5 = (char *)v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v5, v0 + OBJC_IVAR____TtC13appleaccountd30AppleIDAvailabilityHealthCheck__accountStore, v1);
  Dependency.wrappedValue.getter(&v12, v1);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  v6 = objc_msgSend(*(id *)(*sub_10000732C(&v12, *((uint64_t *)&v13 + 1)) + 16), "aa_primaryAppleAccount");
  sub_100006F58(&v12);
  if (!v6)
  {
    v12 = 0u;
    v13 = 0u;
LABEL_10:
    sub_10008C388((uint64_t)&v12);
    return 0;
  }
  v7 = String._bridgeToObjectiveC()();
  v8 = objc_msgSend(v6, "accountPropertyForKey:", v7);

  if (v8)
  {
    _bridgeAnyObjectToAny(_:)(v11, v8);
    swift_unknownObjectRelease(v8);
  }
  else
  {
    memset(v11, 0, sizeof(v11));
  }
  sub_100006988((uint64_t)v11, (uint64_t)&v12);
  if (!*((_QWORD *)&v13 + 1))
    goto LABEL_10;
  v9 = sub_1000067D4(0, (unint64_t *)&qword_10028E8B0, NSNumber_ptr);
  if (swift_dynamicCast(v11, &v12, (char *)&type metadata for Any + 8, v9, 6))
    return *(_QWORD *)&v11[0];
  else
    return 0;
}

uint64_t sub_10019A3CC(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  __n128 v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v3 = v2;
  v6 = *v2;
  v7 = sub_1000080B4((uint64_t *)&unk_100294B20);
  __chkstk_darwin(v7, v8);
  v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10028ADD8 != -1)
    swift_once(&qword_10028ADD8, sub_100046D78);
  v11 = type metadata accessor for Logger(0);
  v12 = sub_100005288(v11, (uint64_t)qword_1002A8A08);
  v13 = Logger.logObject.getter(v12);
  v15 = static os_log_type_t.default.getter(v14);
  if (os_log_type_enabled(v13, v15))
  {
    v24 = a1;
    v25 = v6;
    v16 = (uint8_t *)swift_slowAlloc(12, -1);
    v17 = swift_slowAlloc(32, -1);
    v27 = v17;
    *(_DWORD *)v16 = 136315138;
    if (qword_10028AEE8 != -1)
      swift_once(&qword_10028AEE8, sub_100197468);
    v19 = qword_100295CC8;
    v18 = unk_100295CD0;
    swift_bridgeObjectRetain(unk_100295CD0);
    v26 = sub_1001DEF4C(v19, v18, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27);
    swift_bridgeObjectRelease(v18);
    _os_log_impl((void *)&_mh_execute_header, v13, v15, "%s - started.", v16, 0xCu);
    swift_arrayDestroy(v17, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v17, -1, -1);
    swift_slowDealloc(v16, -1, -1);

    a1 = v24;
    v6 = v25;
  }
  else
  {

  }
  v20 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v10, 1, 1, v20);
  v21 = (_QWORD *)swift_allocObject(&unk_10026C9F8, 64, 7);
  v21[2] = 0;
  v21[3] = 0;
  v21[4] = v3;
  v21[5] = a1;
  v21[6] = a2;
  v21[7] = v6;
  swift_retain(v3);
  swift_retain(a2);
  v22 = sub_10001CC6C((uint64_t)v10, (uint64_t)&unk_100295F58, (uint64_t)v21);
  return swift_release(v22);
}

uint64_t sub_10019A638()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  swift_release(v0[4]);
  swift_release(v0[6]);
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_10019A66C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = (_QWORD *)swift_task_alloc(dword_100295F54);
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_1000224D8;
  return sub_100197CF0(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_10019A6F8(unsigned __int8 a1, void *a2)
{
  int v2;
  _BOOL4 v3;
  Class isa;
  NSString v6;

  v2 = a1;
  if (a1 == 2)
  {
    v3 = 0;
  }
  else
  {
    if (a2)
    {
      isa = Int._bridgeToObjectiveC()().super.super.isa;
      v6 = String._bridgeToObjectiveC()();
      objc_msgSend(a2, "setObject:forKeyedSubscript:", isa, v6);

    }
    v3 = a2 == 0;
  }
  return v3 | ((v2 == 2) << 8);
}

void sub_10019A7A8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  id v24;
  id v25;
  uint64_t v26;
  void *v27;
  void *v28;
  Swift::String v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  id v39;
  id v40;
  uint64_t v41;
  void *v42;
  void *v43;
  Swift::String v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint8_t *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;

  v3 = type metadata accessor for PushMessage(0);
  v5 = __chkstk_darwin(v3, v4);
  v7 = (char *)&v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v5, v8);
  v11 = (id *)((char *)&v49 - v10);
  __chkstk_darwin(v9, v12);
  v14 = (char *)&v49 - v13;
  v15 = type metadata accessor for CustodianRecoveryData(0);
  __chkstk_darwin(v15, v16);
  v18 = (char *)&v49 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_BYTE *)(a1 + 8))
  {
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v19 = type metadata accessor for Logger(0);
    sub_100005288(v19, (uint64_t)qword_1002A89D8);
    v20 = sub_100188738(a1, (uint64_t)v7);
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.error.getter(v21);
    if (os_log_type_enabled(v21, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc(12, -1);
      v51 = swift_slowAlloc(32, -1);
      v54 = v51;
      *(_DWORD *)v23 = 136315138;
      v50 = v23 + 4;
      sub_100188738((uint64_t)v7, (uint64_t)v11);
      v52 = 0;
      v53 = 0xE000000000000000;
      _StringGuts.grow(_:)(39);
      swift_bridgeObjectRelease(v53);
      v52 = 0xD000000000000025;
      v53 = 0x800000010020EB10;
      v24 = *v11;
      v25 = objc_msgSend(v24, "description");
      v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
      v28 = v27;

      v29._countAndFlagsBits = v26;
      v29._object = v28;
      String.append(_:)(v29);

      swift_bridgeObjectRelease(v28);
      v30 = v52;
      v31 = v53;
      sub_100028388((uint64_t)v11, type metadata accessor for PushMessage);
      v52 = sub_1001DEF4C(v30, v31, &v54);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53);
      swift_bridgeObjectRelease(v31);
      sub_100028388((uint64_t)v7, type metadata accessor for PushMessage);
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Asked to process incoming message not meant for custodian, ignoring message: %s", v23, 0xCu);
      v32 = v51;
      swift_arrayDestroy(v51, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v32, -1, -1);
      swift_slowDealloc(v23, -1, -1);
    }
    else
    {
      sub_100028388((uint64_t)v7, type metadata accessor for PushMessage);
    }

  }
  else
  {
    v33 = *(unsigned __int8 *)(a1 + 121);
    if (v33 == 6)
    {
      if (qword_10028ADC8 != -1)
        swift_once(&qword_10028ADC8, sub_100046D2C);
      v34 = type metadata accessor for Logger(0);
      sub_100005288(v34, (uint64_t)qword_1002A89D8);
      v35 = sub_100188738(a1, (uint64_t)v14);
      v36 = Logger.logObject.getter(v35);
      v37 = static os_log_type_t.error.getter(v36);
      if (os_log_type_enabled(v36, v37))
      {
        v38 = (uint8_t *)swift_slowAlloc(12, -1);
        v51 = swift_slowAlloc(32, -1);
        v54 = v51;
        *(_DWORD *)v38 = 136315138;
        v50 = v38 + 4;
        sub_100188738((uint64_t)v14, (uint64_t)v11);
        v52 = 0;
        v53 = 0xE000000000000000;
        _StringGuts.grow(_:)(39);
        swift_bridgeObjectRelease(v53);
        v52 = 0xD000000000000025;
        v53 = 0x800000010020EB10;
        v39 = *v11;
        v40 = objc_msgSend(v39, "description");
        v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(v40);
        v43 = v42;

        v44._countAndFlagsBits = v41;
        v44._object = v43;
        String.append(_:)(v44);

        swift_bridgeObjectRelease(v43);
        v45 = v52;
        v46 = v53;
        sub_100028388((uint64_t)v11, type metadata accessor for PushMessage);
        v52 = sub_1001DEF4C(v45, v46, &v54);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53);
        swift_bridgeObjectRelease(v46);
        sub_100028388((uint64_t)v14, type metadata accessor for PushMessage);
        _os_log_impl((void *)&_mh_execute_header, v36, v37, "Custodian push message did not contain recoveryStep, ignoring message: %s", v38, 0xCu);
        v47 = v51;
        swift_arrayDestroy(v51, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v47, -1, -1);
        swift_slowDealloc(v38, -1, -1);
      }
      else
      {
        sub_100028388((uint64_t)v14, type metadata accessor for PushMessage);
      }

    }
    else
    {
      swift_bridgeObjectRetain(*(_QWORD *)(a1 + 16));
      sub_1000E2394(v48, (uint64_t)v18);
      sub_10000732C((_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 40));
      sub_10013DDE0(v33);
      sub_100028388((uint64_t)v18, type metadata accessor for CustodianRecoveryData);
    }
  }
}

uint64_t type metadata accessor for CustodianPushServiceDelegate()
{
  return objc_opt_self(_TtC13appleaccountd28CustodianPushServiceDelegate);
}

BOOL sub_10019AD28(char a1)
{
  return (a1 & 0x3F) == 0;
}

uint64_t sub_10019AD34(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10019AD74 + 4 * byte_10021FEE0[a1]))(0x676542656B617073, 0xEA00000000006E69);
}

unint64_t sub_10019AD74()
{
  return 0xD000000000000015;
}

unint64_t sub_10019AD94()
{
  return 0xD000000000000011;
}

uint64_t sub_10019ADB0()
{
  return 0x6E6946656B617073;
}

uint64_t sub_10019ADCC()
{
  return 0x6D6F43656B617073;
}

uint64_t sub_10019ADF0()
{
  return 0x727245656B617073;
}

void sub_10019AE08(char *a1)
{
  sub_1001D1FBC(*a1);
}

void sub_10019AE14()
{
  char *v0;

  sub_10016DAC4(*v0);
}

void sub_10019AE1C(uint64_t a1)
{
  char *v1;

  sub_1001D2698(a1, *v1);
}

void sub_10019AE24(uint64_t a1)
{
  char *v1;

  sub_10016DBE4(a1, *v1);
}

unint64_t sub_10019AE2C@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_10019AE80(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10019AE58@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_10019AD34(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t sub_10019AE80(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_10025E8A8, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 6)
    return 6;
  else
    return v3;
}

uint64_t storeEnumTagSinglePayload for CustodianRecoveryStep(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_10019AF14 + 4 * byte_10021FEEB[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_10019AF48 + 4 * byte_10021FEE6[v4]))();
}

uint64_t sub_10019AF48(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10019AF50(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10019AF58);
  return result;
}

uint64_t sub_10019AF64(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10019AF6CLL);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_10019AF70(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10019AF78(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CustodianRecoveryStep()
{
  return &type metadata for CustodianRecoveryStep;
}

unint64_t sub_10019AF98()
{
  unint64_t result;

  result = qword_100296028;
  if (!qword_100296028)
  {
    result = swift_getWitnessTable(&unk_10021FF90, &type metadata for CustodianRecoveryStep);
    atomic_store(result, (unint64_t *)&qword_100296028);
  }
  return result;
}

unint64_t sub_10019AFDC(unint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int (*v19)(char *, uint64_t, uint64_t, __n128);
  __n128 v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = v11 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain(v11);
  }
  else
  {
    v7 = *a2;
    v8 = a2[1];
    sub_10000F450(*a2, v8);
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v8;
    v9 = a2 + 2;
    v10 = a2[3];
    if (v10 >> 60 == 15)
    {
      *(_OWORD *)(a1 + 16) = *(_OWORD *)v9;
    }
    else
    {
      v12 = *v9;
      sub_10000F450(*v9, a2[3]);
      *(_QWORD *)(a1 + 16) = v12;
      *(_QWORD *)(a1 + 24) = v10;
    }
    v13 = a2[5];
    *(_QWORD *)(a1 + 32) = a2[4];
    *(_QWORD *)(a1 + 40) = v13;
    v14 = *(int *)(a3 + 28);
    v15 = (void *)(a1 + v14);
    v16 = (char *)a2 + v14;
    v17 = type metadata accessor for UUID(0);
    v18 = *(_QWORD *)(v17 - 8);
    v19 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v18 + 48);
    v20 = swift_bridgeObjectRetain(v13);
    if (v19(v16, 1, v17, v20))
    {
      v21 = sub_1000080B4((uint64_t *)&unk_1002904F0);
      memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v18 + 16))(v15, v16, v17);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
    }
    v22 = *(int *)(a3 + 32);
    v23 = (_QWORD *)(a1 + v22);
    v24 = (uint64_t *)((char *)a2 + v22);
    v25 = v24[1];
    *v23 = *v24;
    v23[1] = v25;
    swift_bridgeObjectRetain(v25);
  }
  return a1;
}

uint64_t sub_10019B148(uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;

  sub_10000F494(*a1, a1[1]);
  v4 = a1[3];
  if (v4 >> 60 != 15)
    sub_10000F494(a1[2], v4);
  swift_bridgeObjectRelease(a1[5]);
  v5 = (char *)a1 + *(int *)(a2 + 28);
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6))
    (*(void (**)(char *, uint64_t))(v7 + 8))(v5, v6);
  return swift_bridgeObjectRelease(*(uint64_t *)((char *)a1 + *(int *)(a2 + 32) + 8));
}

uint64_t sub_10019B1F0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int (*v17)(char *, uint64_t, uint64_t, __n128);
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;

  v6 = *a2;
  v7 = a2[1];
  sub_10000F450(*a2, v7);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  v8 = a2 + 2;
  v9 = a2[3];
  if (v9 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 16) = *(_OWORD *)v8;
  }
  else
  {
    v10 = *v8;
    sub_10000F450(*v8, a2[3]);
    *(_QWORD *)(a1 + 16) = v10;
    *(_QWORD *)(a1 + 24) = v9;
  }
  v11 = a2[5];
  *(_QWORD *)(a1 + 32) = a2[4];
  *(_QWORD *)(a1 + 40) = v11;
  v12 = *(int *)(a3 + 28);
  v13 = (void *)(a1 + v12);
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for UUID(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v16 + 48);
  v18 = swift_bridgeObjectRetain(v11);
  if (v17(v14, 1, v15, v18))
  {
    v19 = sub_1000080B4((uint64_t *)&unk_1002904F0);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v16 + 16))(v13, v14, v15);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  v20 = *(int *)(a3 + 32);
  v21 = (_QWORD *)(a1 + v20);
  v22 = (uint64_t *)((char *)a2 + v20);
  v23 = v22[1];
  *v21 = *v22;
  v21[1] = v23;
  swift_bridgeObjectRetain(v23);
  return a1;
}

uint64_t *sub_10019B330(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(char *, uint64_t, uint64_t);
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;

  v6 = *a2;
  v7 = a2[1];
  sub_10000F450(*a2, v7);
  v8 = *a1;
  v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_10000F494(v8, v9);
  v10 = a2 + 2;
  v11 = a2[3];
  if ((unint64_t)a1[3] >> 60 == 15)
  {
    if (v11 >> 60 != 15)
    {
      v12 = *v10;
      sub_10000F450(*v10, a2[3]);
      a1[2] = v12;
      a1[3] = v11;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v11 >> 60 == 15)
  {
    sub_100071D90((uint64_t)(a1 + 2));
LABEL_6:
    *((_OWORD *)a1 + 1) = *(_OWORD *)v10;
    goto LABEL_8;
  }
  v13 = *v10;
  sub_10000F450(*v10, a2[3]);
  v14 = a1[2];
  v15 = a1[3];
  a1[2] = v13;
  a1[3] = v11;
  sub_10000F494(v14, v15);
LABEL_8:
  a1[4] = a2[4];
  v16 = a2[5];
  v17 = a1[5];
  a1[5] = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  v18 = *(int *)(a3 + 28);
  v19 = (char *)a1 + v18;
  v20 = (char *)a2 + v18;
  v21 = type metadata accessor for UUID(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 48);
  v24 = v23(v19, 1, v21);
  v25 = v23(v20, 1, v21);
  if (!v24)
  {
    if (!v25)
    {
      (*(void (**)(char *, char *, uint64_t))(v22 + 24))(v19, v20, v21);
      goto LABEL_14;
    }
    (*(void (**)(char *, uint64_t))(v22 + 8))(v19, v21);
    goto LABEL_13;
  }
  if (v25)
  {
LABEL_13:
    v26 = sub_1000080B4((uint64_t *)&unk_1002904F0);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    goto LABEL_14;
  }
  (*(void (**)(char *, char *, uint64_t))(v22 + 16))(v19, v20, v21);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
LABEL_14:
  v27 = *(int *)(a3 + 32);
  v28 = (uint64_t *)((char *)a1 + v27);
  v29 = (uint64_t *)((char *)a2 + v27);
  *v28 = *v29;
  v30 = v29[1];
  v31 = v28[1];
  v28[1] = v30;
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRelease(v31);
  return a1;
}

_OWORD *sub_10019B524(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  a1[2] = a2[2];
  v7 = *(int *)(a3 + 28);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for UUID(0);
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    v12 = sub_1000080B4((uint64_t *)&unk_1002904F0);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  *(_OWORD *)((char *)a1 + *(int *)(a3 + 32)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 32));
  return a1;
}

uint64_t *sub_10019B604(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  _OWORD *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(char *, uint64_t, uint64_t);
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v6 = *a1;
  v7 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_10000F494(v6, v7);
  v8 = (_OWORD *)(a2 + 16);
  v9 = a1[3];
  if (v9 >> 60 == 15)
    goto LABEL_4;
  v10 = *(_QWORD *)(a2 + 24);
  if (v10 >> 60 == 15)
  {
    sub_100071D90((uint64_t)(a1 + 2));
LABEL_4:
    *((_OWORD *)a1 + 1) = *v8;
    goto LABEL_6;
  }
  v11 = a1[2];
  a1[2] = *(_QWORD *)v8;
  a1[3] = v10;
  sub_10000F494(v11, v9);
LABEL_6:
  v12 = *(_QWORD *)(a2 + 40);
  v13 = a1[5];
  a1[4] = *(_QWORD *)(a2 + 32);
  a1[5] = v12;
  swift_bridgeObjectRelease(v13);
  v14 = *(int *)(a3 + 28);
  v15 = (char *)a1 + v14;
  v16 = (char *)(a2 + v14);
  v17 = type metadata accessor for UUID(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48);
  v20 = v19(v15, 1, v17);
  v21 = v19(v16, 1, v17);
  if (!v20)
  {
    if (!v21)
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 40))(v15, v16, v17);
      goto LABEL_12;
    }
    (*(void (**)(char *, uint64_t))(v18 + 8))(v15, v17);
    goto LABEL_11;
  }
  if (v21)
  {
LABEL_11:
    v22 = sub_1000080B4((uint64_t *)&unk_1002904F0);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    goto LABEL_12;
  }
  (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v15, v16, v17);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
LABEL_12:
  v23 = *(int *)(a3 + 32);
  v24 = (uint64_t *)((char *)a1 + v23);
  v25 = (uint64_t *)(a2 + v23);
  v27 = *v25;
  v26 = v25[1];
  v28 = v24[1];
  *v24 = v27;
  v24[1] = v26;
  swift_bridgeObjectRelease(v28);
  return a1;
}

uint64_t sub_10019B7A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10019B7AC);
}

uint64_t sub_10019B7AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  int v5;
  uint64_t v9;

  if ((_DWORD)a2 == 2147483646)
  {
    v4 = *(_QWORD *)(a1 + 40);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    v5 = v4 - 1;
    if (v5 < 0)
      v5 = -1;
    return (v5 + 1);
  }
  else
  {
    v9 = sub_1000080B4((uint64_t *)&unk_1002904F0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(a1 + *(int *)(a3 + 28), a2, v9);
  }
}

uint64_t sub_10019B838(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10019B844);
}

uint64_t sub_10019B844(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 2147483646)
  {
    *(_QWORD *)(result + 40) = a2;
  }
  else
  {
    v7 = sub_1000080B4((uint64_t *)&unk_1002904F0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 28), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for CustodianRecoveryKeys(uint64_t a1)
{
  uint64_t result;

  result = qword_100296088;
  if (!qword_100296088)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CustodianRecoveryKeys);
  return result;
}

void sub_10019B8F8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[5];

  v4[0] = &unk_10021FFF8;
  v4[1] = &unk_100220010;
  v4[2] = &unk_100220028;
  sub_100015374(319);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(v2 - 8) + 64;
    v4[4] = &unk_100220028;
    swift_initStructMetadata(a1, 256, 5, v4, a1 + 16);
  }
}

uint64_t sub_10019B980(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10019B9BC + 4 * byte_10021FFC0[a1]))(0x5064657070617277, 0xEB00000000434B52);
}

uint64_t sub_10019B9BC()
{
  return 0x5264657070617277;
}

unint64_t sub_10019B9D8()
{
  return 0xD000000000000016;
}

uint64_t sub_10019B9F8()
{
  return 0x646F74737543746FLL;
}

unint64_t sub_10019BA1C()
{
  return 0xD000000000000012;
}

uint64_t sub_10019BA38(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v2;
  __int128 *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  char v25;
  __int128 v26;

  v3 = v1;
  v5 = sub_1000080B4(&qword_1002960E0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a1[3];
  v11 = a1[4];
  sub_10000732C(a1, v10);
  v12 = sub_10019C07C();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for CustodianRecoveryKeys.CodingKeys, &type metadata for CustodianRecoveryKeys.CodingKeys, v12, v10, v11);
  v26 = *v3;
  v25 = 0;
  v13 = sub_10000F4D8();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v26, &v25, v5, &type metadata for Data, v13);
  if (!v2)
  {
    v26 = v3[1];
    v25 = 1;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v26, &v25, v5, &type metadata for Data, v13);
    v14 = *((_QWORD *)v3 + 4);
    v15 = *((_QWORD *)v3 + 5);
    LOBYTE(v26) = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v14, v15, &v26, v5);
    v16 = type metadata accessor for CustodianRecoveryKeys(0);
    v17 = (uint64_t)v3 + *(int *)(v16 + 28);
    LOBYTE(v26) = 3;
    v18 = type metadata accessor for UUID(0);
    v19 = sub_100005190((unint64_t *)&unk_10028DC20, (uint64_t)&protocol conformance descriptor for UUID);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v17, &v26, v5, v18, v19);
    v20 = (uint64_t *)((char *)v3 + *(int *)(v16 + 32));
    v21 = *v20;
    v22 = v20[1];
    LOBYTE(v26) = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v21, v22, &v26, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

uint64_t sub_10019BC38@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t, uint64_t, uint64_t);
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  char v45;

  v38 = a2;
  v3 = sub_1000080B4((uint64_t *)&unk_1002904F0);
  __chkstk_darwin(v3, v4);
  v6 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = sub_1000080B4(&qword_1002960D0);
  v7 = *(_QWORD *)(v39 - 8);
  __chkstk_darwin(v39, v8);
  v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for CustodianRecoveryKeys(0);
  v13 = __chkstk_darwin(v11, v12);
  v15 = (char *)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  *((_OWORD *)v15 + 1) = xmmword_10021A7E0;
  *((_QWORD *)v15 + 4) = 0;
  *((_QWORD *)v15 + 5) = 0;
  v16 = (uint64_t)&v15[*(int *)(v13 + 28)];
  v17 = type metadata accessor for UUID(0);
  v18 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56);
  v42 = v16;
  v18(v16, 1, 1, v17);
  v19 = &v15[*(int *)(v11 + 32)];
  *(_QWORD *)v19 = 0;
  *((_QWORD *)v19 + 1) = 0;
  v40 = a1;
  v41 = v19;
  v21 = a1[3];
  v20 = a1[4];
  sub_10000732C(a1, v21);
  v22 = sub_10019C07C();
  v23 = v43;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for CustodianRecoveryKeys.CodingKeys, &type metadata for CustodianRecoveryKeys.CodingKeys, v22, v21, v20);
  if (v23)
  {
    v26 = v41;
    v27 = v42;
    sub_100006F58(v40);
    sub_1000144D8(*((_QWORD *)v15 + 2), *((_QWORD *)v15 + 3));
    swift_bridgeObjectRelease(*((_QWORD *)v15 + 5));
    sub_100013AAC(v27);
    return swift_bridgeObjectRelease(*((_QWORD *)v26 + 1));
  }
  else
  {
    v37 = v6;
    v43 = v7;
    v45 = 0;
    v24 = sub_10000F40C();
    v25 = v39;
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v44, &type metadata for Data, &v45, v39, &type metadata for Data, v24);
    *(_OWORD *)v15 = v44;
    v45 = 1;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&type metadata for Data, &v45, v25, &type metadata for Data, v24);
    *((_OWORD *)v15 + 1) = v44;
    LOBYTE(v44) = 2;
    *((_QWORD *)v15 + 4) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v44, v25);
    *((_QWORD *)v15 + 5) = v28;
    LOBYTE(v44) = 3;
    v29 = sub_100005190((unint64_t *)&unk_10028BBB0, (uint64_t)&protocol conformance descriptor for UUID);
    v30 = (uint64_t)v37;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v17, &v44, v25, v17, v29);
    sub_100013AEC(v30, v42);
    LOBYTE(v44) = 4;
    v31 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v44, v25);
    v33 = v32;
    (*(void (**)(char *, uint64_t))(v43 + 8))(v10, v39);
    v34 = (uint64_t *)v41;
    swift_bridgeObjectRelease(*((_QWORD *)v41 + 1));
    *v34 = v31;
    v34[1] = v33;
    sub_10019C0C0((uint64_t)v15, v38);
    sub_100006F58(v40);
    return sub_10019C104((uint64_t)v15);
  }
}

uint64_t sub_10019BFD8()
{
  unsigned __int8 *v0;

  return sub_10019B980(*v0);
}

uint64_t sub_10019BFE0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10019C2E4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10019C004(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10019C07C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10019C02C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10019C07C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10019C054@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10019BC38(a1, a2);
}

uint64_t sub_10019C068(_QWORD *a1)
{
  return sub_10019BA38(a1);
}

unint64_t sub_10019C07C()
{
  unint64_t result;

  result = qword_1002960D8;
  if (!qword_1002960D8)
  {
    result = swift_getWitnessTable(&unk_100220154, &type metadata for CustodianRecoveryKeys.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002960D8);
  }
  return result;
}

uint64_t sub_10019C0C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CustodianRecoveryKeys(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10019C104(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for CustodianRecoveryKeys(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t storeEnumTagSinglePayload for CustodianRecoveryKeys.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_10019C18C + 4 * byte_10021FFCA[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_10019C1C0 + 4 * byte_10021FFC5[v4]))();
}

uint64_t sub_10019C1C0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10019C1C8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10019C1D0);
  return result;
}

uint64_t sub_10019C1DC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10019C1E4);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_10019C1E8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10019C1F0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CustodianRecoveryKeys.CodingKeys()
{
  return &type metadata for CustodianRecoveryKeys.CodingKeys;
}

unint64_t sub_10019C210()
{
  unint64_t result;

  result = qword_1002960E8;
  if (!qword_1002960E8)
  {
    result = swift_getWitnessTable(&unk_10022012C, &type metadata for CustodianRecoveryKeys.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002960E8);
  }
  return result;
}

unint64_t sub_10019C258()
{
  unint64_t result;

  result = qword_1002960F0;
  if (!qword_1002960F0)
  {
    result = swift_getWitnessTable(&unk_10022009C, &type metadata for CustodianRecoveryKeys.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002960F0);
  }
  return result;
}

unint64_t sub_10019C2A0()
{
  unint64_t result;

  result = qword_1002960F8;
  if (!qword_1002960F8)
  {
    result = swift_getWitnessTable(&unk_1002200C4, &type metadata for CustodianRecoveryKeys.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002960F8);
  }
  return result;
}

uint64_t sub_10019C2E4(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char v10;

  if (a1 == 0x5064657070617277 && a2 == 0xEB00000000434B52)
  {
    v5 = 0xEB00000000434B52;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x5064657070617277, 0xEB00000000434B52, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x5264657070617277 && a2 == 0xEA0000000000434BLL)
  {
    v7 = 0xEA0000000000434BLL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x5264657070617277, 0xEA0000000000434BLL, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0xD000000000000016)
  {
    v8 = 0x800000010020D280;
    if (a2 == 0x800000010020D280)
      goto LABEL_19;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000016, 0x800000010020D280, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_19:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if (a1 == 0x646F74737543746FLL && a2 == 0xED000044496E6169)
  {
    v9 = 0xED000044496E6169;
LABEL_25:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x646F74737543746FLL, 0xED000044496E6169, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_25;
  }
  if (a1 == 0xD000000000000012 && a2 == 0x800000010020AC10)
  {
    swift_bridgeObjectRelease(0x800000010020AC10);
    return 4;
  }
  else
  {
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, 0x800000010020AC10, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v10 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

void sub_10019C53C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  __n128 v18;
  os_log_type_t v19;
  uint8_t *v20;
  id v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  Swift::String v27;
  __int128 v28;
  uint8_t *v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v40;
  NSObject *v41;
  os_log_type_t v42;
  uint8_t *v43;
  const char *v44;
  NSObject *v45;
  os_log_type_t v46;
  uint8_t *v47;
  uint32_t v48;
  int v49;
  uint64_t v50;
  id v51;
  uint64_t v52;
  os_log_type_t v53;
  uint64_t v54;
  _QWORD v55[2];
  uint8_t *v56;
  uint64_t v57;
  char *v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;

  v2 = type metadata accessor for PushMessage(0);
  v4 = __chkstk_darwin(v2, v3);
  v6 = (char *)v55 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v4, v7);
  v10 = (id *)((char *)v55 - v9);
  __chkstk_darwin(v8, v11);
  v13 = (char *)v55 - v12;
  if (qword_10028ADB0 != -1)
    swift_once(&qword_10028ADB0, sub_100046CC8);
  v14 = type metadata accessor for Logger(0);
  v15 = sub_100005288(v14, (uint64_t)qword_1002A8990);
  v16 = sub_100188738(a1, (uint64_t)v13);
  v60 = v15;
  v17 = Logger.logObject.getter(v16);
  v19 = static os_log_type_t.default.getter(v18);
  if (os_log_type_enabled(v17, v19))
  {
    v20 = (uint8_t *)swift_slowAlloc(12, -1);
    v57 = swift_slowAlloc(32, -1);
    v61 = v57;
    v58 = v6;
    *(_DWORD *)v20 = 136315138;
    v55[1] = v20 + 4;
    v56 = v20;
    sub_100188738((uint64_t)v13, (uint64_t)v10);
    *(_QWORD *)&v62 = 0;
    *((_QWORD *)&v62 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(39);
    swift_bridgeObjectRelease(*((_QWORD *)&v62 + 1));
    *(_QWORD *)&v62 = 0xD000000000000025;
    *((_QWORD *)&v62 + 1) = 0x800000010020EB10;
    v21 = *v10;
    v22 = objc_msgSend(v21, "description");
    v23 = a1;
    v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
    v26 = v25;

    v27._countAndFlagsBits = v24;
    a1 = v23;
    v27._object = v26;
    String.append(_:)(v27);

    swift_bridgeObjectRelease(v26);
    v28 = v62;
    sub_100191EA4((uint64_t)v10);
    *(_QWORD *)&v62 = sub_1001DEF4C(v28, *((unint64_t *)&v28 + 1), &v61);
    v6 = v58;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, (char *)&v62 + 8);
    swift_bridgeObjectRelease(*((_QWORD *)&v28 + 1));
    sub_100191EA4((uint64_t)v13);
    v29 = v56;
    _os_log_impl((void *)&_mh_execute_header, v17, v19, "Terms push received. Processing message and posting CFU %s", v56, 0xCu);
    v30 = v57;
    swift_arrayDestroy(v57, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v30, -1, -1);
    swift_slowDealloc(v29, -1, -1);
  }
  else
  {
    sub_100191EA4((uint64_t)v13);
  }

  v32 = *(_QWORD *)(a1 + 32);
  if (!v32)
    goto LABEL_14;
  v33 = *(_QWORD *)(a1 + 24);
  v31 = objc_msgSend(*(id *)(*sub_10000732C(v59 + 2, v59[5]) + 16), "aa_primaryAppleAccount");
  if (!v31)
    goto LABEL_14;
  v34 = v31;
  v35 = objc_msgSend(v31, "aa_altDSID");

  if (!v35)
    goto LABEL_14;
  v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(v35);
  v38 = v37;

  if (v36 == v33 && v32 == v38)
  {
    swift_bridgeObjectRelease(v38);
  }
  else
  {
    v40 = _stringCompareWithSmolCheck(_:_:expecting:)(v36, v38, v33, v32, 0);
    v31 = (id)swift_bridgeObjectRelease(v38);
    if ((v40 & 1) == 0)
    {
LABEL_14:
      v41 = Logger.logObject.getter(v31);
      v42 = static os_log_type_t.error.getter(v41);
      if (!os_log_type_enabled(v41, v42))
      {
LABEL_17:

        return;
      }
      v43 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v43 = 0;
      v44 = "Can't process this message, missing altDSID or doesn't match with primary account.";
      v45 = v41;
      v46 = v42;
      v47 = v43;
      v48 = 2;
LABEL_16:
      _os_log_impl((void *)&_mh_execute_header, v45, v46, v44, v47, v48);
      swift_slowDealloc(v43, -1, -1);
      goto LABEL_17;
    }
  }
  v49 = *(unsigned __int8 *)(a1 + 8);
  if (v49 == 4)
  {
    sub_10000732C(v59 + 7, v59[10]);
    v50 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)&v62 = AAFollowUpIdentifierVerifyTerms;
    *((_QWORD *)&v62 + 1) = v50;
    v64 = 0;
    v65 = 0;
    v63 = 0;
    v66 = 1;
    v51 = AAFollowUpIdentifierVerifyTerms;
    swift_bridgeObjectRetain(v50);
    sub_1001CFA90(&v62);
    swift_bridgeObjectRelease(v50);

  }
  else
  {
    if (v49 != 3)
    {
      v52 = sub_100188738(a1, (uint64_t)v6);
      v41 = Logger.logObject.getter(v52);
      v53 = static os_log_type_t.error.getter(v41);
      if (!os_log_type_enabled(v41, v53))
      {
        sub_100191EA4((uint64_t)v6);
        goto LABEL_17;
      }
      v43 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v43 = 134217984;
      v54 = qword_100220200[v6[8]];
      sub_100191EA4((uint64_t)v6);
      *(_QWORD *)&v62 = v54;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, (char *)&v62 + 8);
      v44 = "TermsPushServiceDelegate process message invoked on unknown command: %ld";
      v45 = v41;
      v46 = v53;
      v47 = v43;
      v48 = 12;
      goto LABEL_16;
    }
    sub_10019CA5C(a1);
  }
}

void sub_10019CA5C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  id v10;
  __n128 v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  os_log_type_t v18;
  uint8_t *v19;
  NSObject *oslog;
  _OWORD v21[2];
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;

  v2 = v1;
  v4 = sub_10019CC4C();
  if (v4)
  {
    swift_bridgeObjectRelease(v4);
    v5 = *(_QWORD *)(a1 + 16);
    v6 = (void *)AAFollowUpUserInfoTermsDependentAltDSID;
    *(_QWORD *)&v21[0] = AAFollowUpUserInfoTermsDependentAltDSID;
    type metadata accessor for AAFollowUpUserInfo(0);
    v8 = v7;
    v9 = sub_10019CF28();
    v10 = v6;
    AnyHashable.init<A>(_:)(&v22, v21, v8, v9, v11);
    if (*(_QWORD *)(v5 + 16) && (v12 = sub_10010AAE0((uint64_t)&v22), (v13 & 1) != 0))
      sub_1000244B0(*(_QWORD *)(v5 + 56) + 32 * v12, (uint64_t)v21);
    else
      memset(v21, 0, sizeof(v21));
    sub_1000839B4((uint64_t)&v22);
    sub_10000732C((_QWORD *)(v2 + 56), *(_QWORD *)(v2 + 80));
    v14 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)&v22 = AAFollowUpIdentifierVerifyTerms;
    *((_QWORD *)&v22 + 1) = v14;
    v24 = 0;
    v25 = 0;
    v23 = 0;
    v26 = 1;
    v15 = AAFollowUpIdentifierVerifyTerms;
    swift_bridgeObjectRetain(v14);
    sub_1001CEA64(&v22);
    swift_bridgeObjectRelease(v14);

    sub_10008C388((uint64_t)v21);
  }
  else
  {
    if (qword_10028ADB0 != -1)
      swift_once(&qword_10028ADB0, sub_100046CC8);
    v16 = type metadata accessor for Logger(0);
    v17 = sub_100005288(v16, (uint64_t)qword_1002A8990);
    oslog = Logger.logObject.getter(v17);
    v18 = static os_log_type_t.error.getter(oslog);
    if (os_log_type_enabled(oslog, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v18, "Can't process this push, it does not contain required terms additional context.", v19, 2u);
      swift_slowDealloc(v19, -1, -1);
    }

  }
}

uint64_t sub_10019CC4C()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  id v6;
  __n128 v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v12;
  _QWORD v13[5];
  __int128 v14;
  __int128 v15;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = (void *)AAFollowUpUserInfoTermsServerProvidedContext;
  *(_QWORD *)&v14 = AAFollowUpUserInfoTermsServerProvidedContext;
  type metadata accessor for AAFollowUpUserInfo(0);
  v4 = v3;
  v5 = sub_10019CF28();
  v6 = v2;
  AnyHashable.init<A>(_:)(v13, &v14, v4, v5, v7);
  if (*(_QWORD *)(v1 + 16) && (v8 = sub_10010AAE0((uint64_t)v13), (v9 & 1) != 0))
  {
    sub_1000244B0(*(_QWORD *)(v1 + 56) + 32 * v8, (uint64_t)&v14);
  }
  else
  {
    v14 = 0u;
    v15 = 0u;
  }
  sub_1000839B4((uint64_t)v13);
  if (*((_QWORD *)&v15 + 1))
  {
    v10 = sub_1000080B4(&qword_100291020);
    if (swift_dynamicCast(&v12, &v14, (char *)&type metadata for Any + 8, v10, 6))
      return v12;
    else
      return 0;
  }
  else
  {
    sub_10008C388((uint64_t)&v14);
    return 0;
  }
}

uint64_t type metadata accessor for TermsPushServiceDelegate()
{
  return objc_opt_self(_TtC13appleaccountd24TermsPushServiceDelegate);
}

uint64_t sub_10019CD60(char a1)
{
  return (0x18u >> a1) & 1;
}

void sub_10019CD70(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *oslog;
  uint64_t v10;
  uint64_t v11;

  if (a1)
  {
    swift_errorRetain(a1);
    if (qword_10028ADB0 != -1)
      swift_once(&qword_10028ADB0, sub_100046CC8);
    v2 = type metadata accessor for Logger(0);
    sub_100005288(v2, (uint64_t)qword_1002A8990);
    v3 = swift_errorRetain(a1);
    oslog = Logger.logObject.getter(v3);
    v4 = static os_log_type_t.error.getter(oslog);
    if (os_log_type_enabled(oslog, v4))
    {
      v5 = (uint8_t *)swift_slowAlloc(12, -1);
      v6 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v5 = 138412290;
      v7 = _convertErrorToNSError(_:)(a1);
      v10 = v7;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v10, &v11);
      *v6 = v7;
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, oslog, v4, "Failed to post Terms notification with error %@", v5, 0xCu);
      v8 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v6, 1, v8);
      swift_slowDealloc(v6, -1, -1);
      swift_slowDealloc(v5, -1, -1);

      swift_errorRelease(a1);
    }
    else
    {
      swift_errorRelease(a1);
      swift_errorRelease(a1);

    }
  }
}

unint64_t sub_10019CF28()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10028B6D8;
  if (!qword_10028B6D8)
  {
    type metadata accessor for AAFollowUpUserInfo(255);
    result = swift_getWitnessTable(&unk_1002180F4, v1);
    atomic_store(result, (unint64_t *)&qword_10028B6D8);
  }
  return result;
}

uint64_t sub_10019CF70(_QWORD *a1)
{
  char *v1;
  uint64_t v2;
  char *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  char v23;
  char v24;
  char v25;
  char v26;

  v3 = v1;
  v5 = sub_1000080B4(&qword_100296268);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a1[3];
  v11 = a1[4];
  sub_10000732C(a1, v10);
  v12 = sub_10019DB70();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for InheritanceInvitationMessage.CodingKeys, &type metadata for InheritanceInvitationMessage.CodingKeys, v12, v10, v11);
  v26 = *v3;
  v25 = 0;
  v13 = sub_1000C1CC8();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v26, &v25, v5, &type metadata for InheritanceMessageType, v13);
  if (!v2)
  {
    v14 = type metadata accessor for InheritanceInvitationMessage(0);
    v15 = &v3[*(int *)(v14 + 20)];
    v24 = 1;
    v16 = type metadata accessor for UUID(0);
    v17 = sub_100005150((unint64_t *)&unk_10028DC20, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v15, &v24, v5, v16, v17);
    v18 = (uint64_t *)&v3[*(int *)(v14 + 24)];
    v19 = *v18;
    v20 = v18[1];
    v23 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v19, v20, &v23, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

uint64_t sub_10019D110@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  _QWORD *v41;
  char v42;
  char v43;
  char v44;
  uint64_t v45;

  v36 = a2;
  v3 = type metadata accessor for UUID(0);
  v37 = *(_QWORD *)(v3 - 8);
  v38 = v3;
  __chkstk_darwin(v3, v4);
  v6 = (uint64_t *)((char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v40 = sub_1000080B4(&qword_100296278);
  v7 = *(_QWORD *)(v40 - 8);
  __chkstk_darwin(v40, v8);
  v10 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for InheritanceInvitationMessage(0);
  __chkstk_darwin(v11, v12);
  v14 = (char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = a1[3];
  v16 = a1[4];
  sub_10000732C(a1, v15);
  v17 = sub_10019DB70();
  v39 = v10;
  v18 = v41;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for InheritanceInvitationMessage.CodingKeys, &type metadata for InheritanceInvitationMessage.CodingKeys, v17, v15, v16);
  if (v18)
    return sub_100006F58(a1);
  v35 = v11;
  v41 = a1;
  v19 = v7;
  v20 = v37;
  v21 = v38;
  v44 = 0;
  v22 = sub_1000C1C40();
  v23 = v39;
  v24 = v40;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v45, &type metadata for InheritanceMessageType, &v44, v40, &type metadata for InheritanceMessageType, v22);
  v25 = (uint64_t)v14;
  *v14 = v45;
  v43 = 1;
  v26 = sub_100005150((unint64_t *)&unk_10028BBB0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  KeyedDecodingContainer.decode<A>(_:forKey:)(v6, v21, &v43, v24, v21, v26);
  (*(void (**)(_BYTE *, _QWORD *, uint64_t))(v20 + 32))(&v14[*(int *)(v35 + 20)], v6, v21);
  v42 = 2;
  v27 = KeyedDecodingContainer.decode(_:forKey:)(&v42, v24);
  v28 = v23;
  v30 = v29;
  (*(void (**)(char *, uint64_t))(v19 + 8))(v28, v24);
  v31 = v36;
  v32 = (uint64_t *)(v25 + *(int *)(v35 + 24));
  *v32 = v27;
  v32[1] = v30;
  sub_10019DBB4(v25, v31);
  sub_100006F58(v41);
  return sub_10019DBF8(v25);
}

uint64_t sub_10019D3CC()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0x69636966656E6562;
  if (*v0 != 1)
    v1 = 0xD000000000000011;
  if (*v0)
    return v1;
  else
    return 1701869940;
}

uint64_t sub_10019D430@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10019DDD8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10019D454(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10019DB70();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10019D47C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10019DB70();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10019D4A4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10019D110(a1, a2);
}

uint64_t sub_10019D4B8(_QWORD *a1)
{
  return sub_10019CF70(a1);
}

uint64_t sub_10019D4CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  Swift::String v6;
  uint64_t v7;
  uint64_t v8;
  Swift::String v9;
  void *object;
  Swift::String v11;
  uint64_t *v12;
  uint64_t v13;
  void *v14;
  Swift::String v15;
  uint64_t v17;
  unint64_t v18;

  v18 = 0xE000000000000000;
  _StringGuts.grow(_:)(46);
  v1 = type metadata accessor for InheritanceInvitationMessage(0);
  v17 = v1;
  v2 = sub_1000080B4(&qword_1002961C8);
  v3 = String.init<A>(describing:)(&v17, v2);
  v5 = v4;
  swift_bridgeObjectRelease(0xE000000000000000);
  v17 = v3;
  v18 = v5;
  v6._object = (void *)0x800000010020BE00;
  v6._countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v6);
  v7 = type metadata accessor for UUID(0);
  v8 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v9._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v7, v8);
  object = v9._object;
  String.append(_:)(v9);
  swift_bridgeObjectRelease(object);
  v11._countAndFlagsBits = 0xD000000000000015;
  v11._object = (void *)0x800000010020EED0;
  String.append(_:)(v11);
  v12 = (uint64_t *)(v0 + *(int *)(v1 + 24));
  v13 = *v12;
  v14 = (void *)v12[1];
  swift_bridgeObjectRetain(v14);
  v15._countAndFlagsBits = v13;
  v15._object = v14;
  String.append(_:)(v15);
  swift_bridgeObjectRelease(v14);
  return v17;
}

uint64_t type metadata accessor for InheritanceInvitationMessage(uint64_t a1)
{
  uint64_t result;

  result = qword_100296228;
  if (!qword_100296228)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for InheritanceInvitationMessage);
  return result;
}

uint64_t *sub_10019D658(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  _BYTE *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v15);
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v7 = *(int *)(a3 + 20);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for UUID(0);
    (*(void (**)(_BYTE *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
    v11 = *(int *)(a3 + 24);
    v12 = (uint64_t *)((char *)v4 + v11);
    v13 = (uint64_t *)((char *)a2 + v11);
    v14 = v13[1];
    *v12 = *v13;
    v12[1] = v14;
    swift_bridgeObjectRetain(v14);
  }
  return v4;
}

uint64_t sub_10019D708(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(a2 + 24) + 8));
}

_BYTE *sub_10019D760(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for UUID(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
  v10 = *(int *)(a3 + 24);
  v11 = &a1[v10];
  v12 = &a2[v10];
  v13 = v12[1];
  *v11 = *v12;
  v11[1] = v13;
  swift_bridgeObjectRetain(v13);
  return a1;
}

_BYTE *sub_10019D7E4(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for UUID(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  v10 = *(int *)(a3 + 24);
  v11 = &a1[v10];
  v12 = &a2[v10];
  *v11 = *v12;
  v13 = v12[1];
  v14 = v11[1];
  v11[1] = v13;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRelease(v14);
  return a1;
}

_BYTE *sub_10019D87C(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for UUID(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  *(_OWORD *)&a1[*(int *)(a3 + 24)] = *(_OWORD *)&a2[*(int *)(a3 + 24)];
  return a1;
}

_BYTE *sub_10019D8F4(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for UUID(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  v10 = *(int *)(a3 + 24);
  v11 = &a1[v10];
  v12 = (uint64_t *)&a2[v10];
  v14 = *v12;
  v13 = v12[1];
  v15 = v11[1];
  *v11 = v14;
  v11[1] = v13;
  swift_bridgeObjectRelease(v15);
  return a1;
}

uint64_t sub_10019D97C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10019D988);
}

uint64_t sub_10019D988(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 20), a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 24) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_10019DA0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10019DA18);
}

uint64_t sub_10019DA18(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + *(int *)(a4 + 20), a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 24) + 8) = (a2 - 1);
  return result;
}

uint64_t sub_10019DA98(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = &unk_1002202A0;
  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    v4[2] = &unk_1002202B8;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_10019DB14(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_100005150((unint64_t *)&unk_100297020, type metadata accessor for InheritanceInvitationMessage, (uint64_t)&unk_1002202EC);
  result = sub_100005150(&qword_100290E18, type metadata accessor for InheritanceInvitationMessage, (uint64_t)&unk_100220314);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_10019DB70()
{
  unint64_t result;

  result = qword_100296270;
  if (!qword_100296270)
  {
    result = swift_getWitnessTable(&unk_100220400, &type metadata for InheritanceInvitationMessage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100296270);
  }
  return result;
}

uint64_t sub_10019DBB4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for InheritanceInvitationMessage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10019DBF8(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for InheritanceInvitationMessage(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t storeEnumTagSinglePayload for InheritanceInvitationMessage.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_10019DC80 + 4 * byte_100220235[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10019DCB4 + 4 * byte_100220230[v4]))();
}

uint64_t sub_10019DCB4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10019DCBC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10019DCC4);
  return result;
}

uint64_t sub_10019DCD0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10019DCD8);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_10019DCDC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10019DCE4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for InheritanceInvitationMessage.CodingKeys()
{
  return &type metadata for InheritanceInvitationMessage.CodingKeys;
}

unint64_t sub_10019DD04()
{
  unint64_t result;

  result = qword_100296280;
  if (!qword_100296280)
  {
    result = swift_getWitnessTable(&unk_1002203D8, &type metadata for InheritanceInvitationMessage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100296280);
  }
  return result;
}

unint64_t sub_10019DD4C()
{
  unint64_t result;

  result = qword_100296288;
  if (!qword_100296288)
  {
    result = swift_getWitnessTable(&unk_100220348, &type metadata for InheritanceInvitationMessage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100296288);
  }
  return result;
}

unint64_t sub_10019DD94()
{
  unint64_t result;

  result = qword_100296290;
  if (!qword_100296290)
  {
    result = swift_getWitnessTable(&unk_100220370, &type metadata for InheritanceInvitationMessage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100296290);
  }
  return result;
}

uint64_t sub_10019DDD8(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  char v8;

  if (a1 == 1701869940 && a2 == 0xE400000000000000)
  {
    v5 = 0xE400000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1701869940, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x69636966656E6562 && a2 == 0xED00004449797261)
  {
    v7 = 0xED00004449797261;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x69636966656E6562, 0xED00004449797261, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0xD000000000000011 && a2 == 0x8000000100209630)
  {
    swift_bridgeObjectRelease(0x8000000100209630);
    return 2;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x8000000100209630, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_10019DF3C(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[2];
  char v22;

  v19 = a4;
  v20 = a5;
  v9 = sub_1000080B4(&qword_1002962B0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = a1[3];
  v14 = a1[4];
  sub_10000732C(a1, v15);
  v16 = sub_10019E700();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for TrustedContactKeyIntegrity.CodingKeys, &type metadata for TrustedContactKeyIntegrity.CodingKeys, v16, v15, v14);
  v21[0] = a2;
  v21[1] = a3;
  v22 = 0;
  v17 = sub_10000F4D8();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v21, &v22, v9, &type metadata for Data, v17);
  if (!v5)
  {
    LOBYTE(v21[0]) = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v19, v20, v21, v9);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, v9);
}

uint64_t sub_10019E074()
{
  _BYTE *v0;

  if (*v0)
    return 0x617461646174656DLL;
  else
    return 0x6873614879656BLL;
}

uint64_t sub_10019E0B0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_10019E424(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10019E0D4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10019E700();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10019E0FC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10019E700();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10019E124@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = sub_10019E514(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }
  return result;
}

uint64_t sub_10019E150(_QWORD *a1)
{
  uint64_t *v1;

  return sub_10019DF3C(a1, *v1, v1[1], v1[2], v1[3]);
}

uint64_t sub_10019E16C(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;

  v4 = type metadata accessor for JSONDecoder(0);
  v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  v6 = JSONDecoder.init()(v5);
  v7 = sub_10019E320();
  dispatch thunk of JSONDecoder.decode<A>(_:from:)(&v12, &type metadata for TrustedContactKeyIntegrity, a1, a2, &type metadata for TrustedContactKeyIntegrity, v7);
  sub_10000F494(a1, a2);
  swift_release(v6);
  v8 = v12;
  v9 = v13;
  v10 = v14;
  sub_10000F450(v12, v13);
  swift_bridgeObjectRetain(v10);
  sub_10000F494(v8, v9);
  swift_bridgeObjectRelease(v10);
  return v8;
}

unint64_t sub_10019E320()
{
  unint64_t result;

  result = qword_100296298;
  if (!qword_100296298)
  {
    result = swift_getWitnessTable(&unk_1002204B4, &type metadata for TrustedContactKeyIntegrity);
    atomic_store(result, (unint64_t *)&qword_100296298);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for TrustedContactKeyIntegrity(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for TrustedContactKeyIntegrity(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 32) = 0;
    if (a2)
      *(_QWORD *)(result + 24) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for TrustedContactKeyIntegrity()
{
  return &type metadata for TrustedContactKeyIntegrity;
}

uint64_t sub_10019E424(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x6873614879656BLL && a2 == 0xE700000000000000)
  {
    v5 = 0xE700000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6873614879656BLL, 0xE700000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x617461646174656DLL && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease(0xE800000000000000);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x617461646174656DLL, 0xE800000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_10019E514(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;

  v3 = sub_1000080B4(&qword_1002962A0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a1[3];
  v9 = a1[4];
  sub_10000732C(a1, v8);
  v10 = sub_10019E700();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for TrustedContactKeyIntegrity.CodingKeys, &type metadata for TrustedContactKeyIntegrity.CodingKeys, v10, v8, v9);
  if (v1)
  {
    sub_100006F58(a1);
  }
  else
  {
    v18 = 0;
    v11 = sub_10000F40C();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v16, &type metadata for Data, &v18, v3, &type metadata for Data, v11);
    v8 = v16;
    v13 = v17;
    LOBYTE(v16) = 1;
    sub_10000F450(v8, v17);
    KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v16, v3);
    v15 = v14;
    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
    sub_10000F450(v8, v13);
    swift_bridgeObjectRetain(v15);
    sub_10000F494(v8, v13);
    sub_100006F58(a1);
    sub_10000F494(v8, v13);
    swift_bridgeObjectRelease(v15);
  }
  return v8;
}

unint64_t sub_10019E700()
{
  unint64_t result;

  result = qword_1002962A8;
  if (!qword_1002962A8)
  {
    result = swift_getWitnessTable(&unk_1002205A0, &type metadata for TrustedContactKeyIntegrity.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002962A8);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for TrustedContactKeyIntegrity.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10019E790 + 4 * byte_100220455[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10019E7C4 + 4 * byte_100220450[v4]))();
}

uint64_t sub_10019E7C4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10019E7CC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10019E7D4);
  return result;
}

uint64_t sub_10019E7E0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10019E7E8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_10019E7EC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10019E7F4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TrustedContactKeyIntegrity.CodingKeys()
{
  return &type metadata for TrustedContactKeyIntegrity.CodingKeys;
}

unint64_t sub_10019E814()
{
  unint64_t result;

  result = qword_1002962B8;
  if (!qword_1002962B8)
  {
    result = swift_getWitnessTable(&unk_100220578, &type metadata for TrustedContactKeyIntegrity.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002962B8);
  }
  return result;
}

unint64_t sub_10019E85C()
{
  unint64_t result;

  result = qword_1002962C0;
  if (!qword_1002962C0)
  {
    result = swift_getWitnessTable(&unk_1002204E8, &type metadata for TrustedContactKeyIntegrity.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002962C0);
  }
  return result;
}

unint64_t sub_10019E8A4()
{
  unint64_t result;

  result = qword_1002962C8;
  if (!qword_1002962C8)
  {
    result = swift_getWitnessTable(&unk_100220510, &type metadata for TrustedContactKeyIntegrity.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002962C8);
  }
  return result;
}

uint64_t sub_10019E8EC(uint64_t a1, char a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t))
{
  char v9;

  if ((a2 & 1) != 0)
  {
    swift_errorRetain(a1);
    a5(a1, 1);
    return sub_1000057B0(a1, 1);
  }
  else
  {
    swift_bridgeObjectRetain(a4);
    v9 = sub_10019F470(a1, a3, a4);
    swift_bridgeObjectRelease(a4);
    return ((uint64_t (*)(_QWORD, _QWORD))a5)(v9 & 1, 0);
  }
}

uint64_t sub_10019E99C(id *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  id v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v18;
  uint64_t result;
  void *v20;
  uint64_t v21;
  __n128 v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  __n128 v35;
  unint64_t v36;
  char v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  BOOL v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  _QWORD v48[5];
  __int128 v49;
  __int128 v50;

  v6 = type metadata accessor for CharacterSet(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  v10 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *a1;
  v12 = objc_msgSend(*a1, "appleID");
  if (v12)
  {
    v13 = v12;
    v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
    v16 = v15;

    if (v14 == a2 && v16 == a3)
    {
      v32 = a3;
LABEL_45:
      swift_bridgeObjectRelease(v32);
      return 1;
    }
    v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v14, v16, a2, a3, 0);
    swift_bridgeObjectRelease(v16);
    if ((v18 & 1) != 0)
      return 1;
  }
  result = (uint64_t)objc_msgSend(v11, "dictionary");
  if (result)
  {
    v20 = (void *)result;
    v21 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(result, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);

    v46 = 0xD000000000000016;
    v47 = 0x800000010020EF60;
    AnyHashable.init<A>(_:)(v48, &v46, &type metadata for String, &protocol witness table for String, v22);
    if (*(_QWORD *)(v21 + 16) && (v23 = sub_10010AAE0((uint64_t)v48), (v24 & 1) != 0))
    {
      sub_1000244B0(*(_QWORD *)(v21 + 56) + 32 * v23, (uint64_t)&v49);
    }
    else
    {
      v49 = 0u;
      v50 = 0u;
    }
    swift_bridgeObjectRelease(v21);
    sub_1000839B4((uint64_t)v48);
    if (*((_QWORD *)&v50 + 1))
    {
      v25 = sub_1000080B4((uint64_t *)&unk_10028E800);
      if ((swift_dynamicCast(&v46, &v49, (char *)&type metadata for Any + 8, v25, 6) & 1) != 0)
      {
        v26 = v46;
        v27 = *(_QWORD *)(v46 + 16);
        if (v27)
        {
          v28 = (uint64_t *)(v46 + 40);
          while (1)
          {
            v29 = *(v28 - 1);
            v30 = *v28;
            v31 = v29 == a2 && v30 == a3;
            if (v31 || (_stringCompareWithSmolCheck(_:_:expecting:)(v29, v30, a2, a3, 0) & 1) != 0)
              goto LABEL_44;
            v28 += 2;
            if (!--v27)
            {
              swift_bridgeObjectRelease(v26);
              goto LABEL_26;
            }
          }
        }
        swift_bridgeObjectRelease(v46);
      }
    }
    else
    {
      sub_10008C388((uint64_t)&v49);
    }
LABEL_26:
    result = (uint64_t)objc_msgSend(v11, "dictionary");
    if (result)
    {
      v33 = (void *)result;
      v34 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(result, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);

      v46 = 0xD000000000000014;
      v47 = 0x800000010020EF80;
      AnyHashable.init<A>(_:)(v48, &v46, &type metadata for String, &protocol witness table for String, v35);
      if (*(_QWORD *)(v34 + 16) && (v36 = sub_10010AAE0((uint64_t)v48), (v37 & 1) != 0))
      {
        sub_1000244B0(*(_QWORD *)(v34 + 56) + 32 * v36, (uint64_t)&v49);
      }
      else
      {
        v49 = 0u;
        v50 = 0u;
      }
      swift_bridgeObjectRelease(v34);
      sub_1000839B4((uint64_t)v48);
      if (*((_QWORD *)&v50 + 1))
      {
        if ((swift_dynamicCast(&v46, &v49, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) != 0)
        {
          v38 = v47;
          v48[0] = v46;
          v48[1] = v47;
          CharacterSet.init(charactersIn:)(44, 0xE100000000000000);
          v39 = sub_10006B00C();
          v26 = StringProtocol.components(separatedBy:)(v10, &type metadata for String, v39);
          (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
          swift_bridgeObjectRelease(v38);
          v40 = *(_QWORD *)(v26 + 16);
          if (v40)
          {
            v41 = (uint64_t *)(v26 + 40);
            while (1)
            {
              v42 = *(v41 - 1);
              v43 = *v41;
              v44 = v42 == a2 && v43 == a3;
              if (v44 || (_stringCompareWithSmolCheck(_:_:expecting:)(v42, v43, a2, a3, 0) & 1) != 0)
                break;
              v41 += 2;
              if (!--v40)
                goto LABEL_41;
            }
LABEL_44:
            v32 = v26;
            goto LABEL_45;
          }
LABEL_41:
          swift_bridgeObjectRelease(v26);
        }
      }
      else
      {
        sub_10008C388((uint64_t)&v49);
      }
      return 0;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

void sub_10019ED90(uint64_t a1, char a2, void (*a3)(uint64_t, uint64_t))
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char **v8;
  char **v9;
  id v10;
  void *v11;
  id v12;
  void *v13;
  id v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  id v37;
  id v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  if ((a2 & 1) != 0)
  {
    swift_errorRetain(a1);
    a3(a1, 1);
    sub_1000057B0(a1, 1);
    return;
  }
  if (!((unint64_t)a1 >> 62))
  {
    v5 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(a1);
    if (v5)
      goto LABEL_4;
LABEL_37:
    sub_1000057B0(a1, 0);
    a3((uint64_t)_swiftEmptyArrayStorage, 0);
LABEL_38:
    swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
    return;
  }
  if (a1 >= 0)
    v43 = a1 & 0xFFFFFFFFFFFFFF8;
  else
    v43 = a1;
  swift_bridgeObjectRetain(a1);
  v5 = _CocoaArrayWrapper.endIndex.getter(v43);
  if (!v5)
    goto LABEL_37;
LABEL_4:
  if (v5 >= 1)
  {
    v44 = a3;
    v6 = 0;
    v7 = a1 & 0xC000000000000001;
    v8 = &selRef_bodyTaskWithRequest_completion_;
    v9 = &selRef_bodyTaskWithRequest_completion_;
    do
    {
      if (v7)
        v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v6, a1);
      else
        v10 = *(id *)(a1 + 8 * v6 + 32);
      v11 = v10;
      if ((objc_msgSend(v10, v8[135]) & 1) != 0
        || (v12 = objc_msgSend(v11, v9[136])) == 0)
      {

      }
      else
      {
        v13 = v12;
        v14 = objc_msgSend(v11, "appleID");
        if (v14)
        {
          v15 = v14;
          v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
          v49 = v17;
          v50 = v16;

          v18 = objc_msgSend(v11, "firstName");
          if (v18)
          {
            v19 = v18;
            v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
            v47 = v21;
            v48 = v20;

          }
          else
          {
            v47 = 0;
            v48 = 0;
          }
          v22 = objc_msgSend(v11, "lastName");
          if (v22)
          {
            v23 = v22;
            v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
            v45 = v25;
            v46 = v24;

          }
          else
          {
            v45 = 0;
            v46 = 0;
          }
          v26 = objc_msgSend(v11, "fullName");
          if (v26)
          {
            v27 = v26;
            v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
            v30 = v29;

          }
          else
          {
            v28 = 0;
            v30 = 0;
          }
          v31 = objc_msgSend(v11, "memberTypeDisplayString");
          if (v31)
          {
            v32 = v31;
            v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
            v35 = v34;

          }
          else
          {
            v33 = 0;
            v35 = 0;
          }
          v36 = objc_msgSend(v11, "isChildAccount");
          v37 = objc_allocWithZone((Class)AALocalContactInfo);
          v38 = sub_10019F13C(v13, v48, v47, v46, v45, v28, v30, v50, v49, v33, v35, v36);

          v7 = a1 & 0xC000000000000001;
          v8 = &selRef_bodyTaskWithRequest_completion_;
          v9 = &selRef_bodyTaskWithRequest_completion_;
          if (v38)
          {
            specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v39);
            v41 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10);
            v40 = *(_QWORD *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18);
            if (v41 >= v40 >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v40 > 1, v41 + 1, 1);
            v42 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v41, v38);
            specialized Array._endMutation()(v42);
          }
        }
        else
        {

        }
      }
      ++v6;
    }
    while (v5 != v6);
    sub_1000057B0(a1, 0);
    v44((uint64_t)_swiftEmptyArrayStorage, 0);
    goto LABEL_38;
  }
  __break(1u);
}

uint64_t type metadata accessor for DaemonFamilyManager()
{
  return objc_opt_self(_TtC13appleaccountd19DaemonFamilyManager);
}

uint64_t sub_10019F114()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 104))();
}

id sub_10019F13C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  void *v12;
  NSString v17;
  uint64_t v18;
  NSString v19;
  uint64_t v20;
  NSString v21;
  NSString v22;
  NSString v23;
  id v24;
  uint64_t v26;

  if (a3)
  {
    v17 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a3);
    v18 = a9;
    if (a5)
      goto LABEL_3;
LABEL_6:
    v19 = 0;
    v20 = a11;
    if (a7)
      goto LABEL_4;
    goto LABEL_7;
  }
  v17 = 0;
  v18 = a9;
  if (!a5)
    goto LABEL_6;
LABEL_3:
  v19 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a5);
  v20 = a11;
  if (a7)
  {
LABEL_4:
    v21 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a7);
    goto LABEL_8;
  }
LABEL_7:
  v21 = 0;
LABEL_8:
  v22 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v18);
  if (v20)
  {
    v23 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v20);
  }
  else
  {
    v23 = 0;
  }
  LOBYTE(v26) = a12 & 1;
  v24 = objc_msgSend(v12, "initWithFamilyDSID:firstName:lastName:fullName:appleID:familyMemberType:isChild:", a1, v17, v19, v21, v22, v23, v26);

  return v24;
}

void sub_10019F2A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  id v10;
  id v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  _QWORD v15[5];
  uint64_t v16;

  if (qword_10028ADB0 != -1)
    swift_once(&qword_10028ADB0, sub_100046CC8);
  v4 = type metadata accessor for Logger(0);
  v5 = sub_100005288(v4, (uint64_t)qword_1002A8990);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Fetching suggested family members.", v8, 2u);
    swift_slowDealloc(v8, -1, -1);
  }

  v9 = swift_allocObject(&unk_10026D050, 32, 7);
  *(_QWORD *)(v9 + 16) = a1;
  *(_QWORD *)(v9 + 24) = a2;
  v10 = objc_allocWithZone((Class)FAFetchFamilyCircleRequest);
  swift_retain(a2);
  v11 = objc_msgSend(v10, "init");
  v12 = swift_allocObject(&unk_10026D078, 32, 7);
  *(_QWORD *)(v12 + 16) = sub_10019F740;
  *(_QWORD *)(v12 + 24) = v9;
  v15[4] = sub_10019F75C;
  v16 = v12;
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 1107296256;
  v15[2] = sub_100043E24;
  v15[3] = &unk_10026D090;
  v13 = _Block_copy(v15);
  v14 = v16;
  swift_retain(v9);
  swift_release(v14);
  objc_msgSend(v11, "startRequestWithCompletionHandler:", v13);
  _Block_release(v13);
  swift_release(v9);

}

uint64_t sub_10019F470(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  uint64_t v11;
  char v12;
  char v13;
  char v14;
  uint64_t v16;
  id v18;

  v4 = v3;
  if ((unint64_t)a1 >> 62)
    goto LABEL_16;
  v7 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  for (; v7; v7 = _CocoaArrayWrapper.endIndex.getter(v16))
  {
    v8 = 4;
    while (1)
    {
      v9 = (a1 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v8 - 4, a1)
         : *(id *)(a1 + 8 * v8);
      v10 = v9;
      v11 = v8 - 3;
      if (__OFADD__(v8 - 4, 1))
        break;
      v18 = v9;
      v12 = sub_10019E99C(&v18, a2, a3);
      if (v4)
      {
        swift_bridgeObjectRelease(a1);

        return v14 & 1;
      }
      v13 = v12;

      if ((v13 & 1) != 0)
      {
        swift_bridgeObjectRelease(a1);
        v14 = 1;
        return v14 & 1;
      }
      ++v8;
      if (v11 == v7)
        goto LABEL_11;
    }
    __break(1u);
LABEL_16:
    if (a1 < 0)
      v16 = a1;
    else
      v16 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
  }
LABEL_11:
  swift_bridgeObjectRelease(a1);
  v14 = 0;
  return v14 & 1;
}

void sub_10019F5A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v8;
  id v9;
  id v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  _QWORD v14[5];
  uint64_t v15;

  v8 = (_QWORD *)swift_allocObject(&unk_10026CFD8, 48, 7);
  v8[2] = a1;
  v8[3] = a2;
  v8[4] = a3;
  v8[5] = a4;
  v9 = objc_allocWithZone((Class)FAFetchFamilyCircleRequest);
  swift_bridgeObjectRetain(a2);
  swift_retain(a4);
  v10 = objc_msgSend(v9, "init");
  v11 = swift_allocObject(&unk_10026D000, 32, 7);
  *(_QWORD *)(v11 + 16) = sub_10019F704;
  *(_QWORD *)(v11 + 24) = v8;
  v14[4] = sub_10019F738;
  v15 = v11;
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 1107296256;
  v14[2] = sub_100043E24;
  v14[3] = &unk_10026D018;
  v12 = _Block_copy(v14);
  v13 = v15;
  swift_retain(v8);
  swift_release(v13);
  objc_msgSend(v10, "startRequestWithCompletionHandler:", v12);
  _Block_release(v12);
  swift_release(v8);

}

uint64_t sub_10019F6D8()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10019F704(uint64_t a1, char a2)
{
  uint64_t v2;

  return sub_10019E8EC(a1, a2 & 1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(void (**)(uint64_t, uint64_t))(v2 + 32));
}

uint64_t sub_10019F714()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_10019F738(void *a1, uint64_t a2)
{
  uint64_t v2;

  sub_1001B9FBC(a1, a2, *(void (**)(uint64_t, uint64_t))(v2 + 16));
}

void sub_10019F740(uint64_t a1, char a2)
{
  uint64_t v2;

  sub_10019ED90(a1, a2 & 1, *(void (**)(uint64_t, uint64_t))(v2 + 16));
}

uint64_t sub_10019F760(uint64_t a1, void (*a2)(uint64_t, _QWORD, uint64_t), uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  __n128 v40;
  os_log_type_t v41;
  uint8_t *v42;
  unint64_t v43;
  uint64_t v44;
  uint8_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  os_log_type_t v50;
  uint8_t *v51;
  unint64_t v52;
  uint64_t v53;
  _BYTE *v54;
  NSObject *v56;
  os_log_type_t v57;
  uint8_t *v58;
  unint64_t v59;
  uint64_t v60;
  _BYTE *v61;
  _QWORD v62[2];
  uint8_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void (*v67)(uint64_t, _QWORD, uint64_t);
  uint64_t v68;
  uint64_t v69;
  uint64_t v70[5];

  v6 = type metadata accessor for WalrusWebAccessInfo(0);
  __chkstk_darwin(v6, v7);
  v9 = (char *)v62 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1000080B4(&qword_100296510);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  v14 = (char *)v62 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for WalrusPCSEncryptionMaterial(0);
  __chkstk_darwin(v15, v16);
  v18 = (char *)v62 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((sub_10008E840() & 1) != 0)
  {
    v65 = a1;
    v66 = a3;
    sub_100027FE8(a1 + *(int *)(v6 + 60), (uint64_t)v18, type metadata accessor for WalrusPCSEncryptionMaterial);
    if (qword_10028ADB0 != -1)
      swift_once(&qword_10028ADB0, sub_100046CC8);
    v67 = a2;
    v19 = type metadata accessor for Logger(0);
    v20 = sub_100005288(v19, (uint64_t)qword_1002A8990);
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.error.getter(v21);
    if (os_log_type_enabled(v21, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Validating encryption material.", v23, 2u);
      swift_slowDealloc(v23, -1, -1);
    }

    v24 = sub_10008DBFC();
    if (v25 >> 60 != 15)
    {
      v26 = v24;
      v27 = v25;
      (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v14, v68 + OBJC_IVAR____TtC13appleaccountd28WalrusPCSAuthRequestProvider__signatureValidator, v10);
      Dependency.wrappedValue.getter(v70, v10);
      (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
      v28 = *(int *)(v15 + 56);
      v29 = *(_QWORD *)&v18[*(int *)(v15 + 60)];
      v30 = *(_QWORD *)&v18[v28];
      v31 = *(_QWORD *)&v18[v28 + 8];
      swift_bridgeObjectRetain(v29);
      sub_10000F450(v30, v31);
      v32 = sub_100089AE0(v26, v27, v29);
      sub_10000F494(v30, v31);
      swift_bridgeObjectRelease(v29);
      v33 = sub_100006F58(v70);
      if (v32)
      {
        v34 = Logger.logObject.getter(v33);
        v35 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v34, v35))
        {
          v36 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v36 = 0;
          _os_log_impl((void *)&_mh_execute_header, v34, v35, "Encryption material signature is valid!", v36, 2u);
          swift_slowDealloc(v36, -1, -1);
        }

        v37 = v65;
        v38 = sub_100027FE8(v65, (uint64_t)v9, type metadata accessor for WalrusWebAccessInfo);
        v39 = Logger.logObject.getter(v38);
        v41 = static os_log_type_t.default.getter(v40);
        if (os_log_type_enabled(v39, v41))
        {
          v42 = (uint8_t *)swift_slowAlloc(12, -1);
          v64 = swift_slowAlloc(32, -1);
          v70[0] = v64;
          *(_DWORD *)v42 = 136315138;
          v62[1] = v42 + 4;
          v63 = v42;
          v44 = *((_QWORD *)v9 + 14);
          v43 = *((_QWORD *)v9 + 15);
          swift_bridgeObjectRetain(v43);
          v69 = sub_1001DEF4C(v44, v43, v70);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v69, v70);
          swift_bridgeObjectRelease(v43);
          sub_100028388((uint64_t)v9, type metadata accessor for WalrusWebAccessInfo);
          v45 = v63;
          _os_log_impl((void *)&_mh_execute_header, v39, v41, "Fetching PCS keys for web session consent uuid: %s", v63, 0xCu);
          v46 = v64;
          swift_arrayDestroy(v64, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v46, -1, -1);
          swift_slowDealloc(v45, -1, -1);
        }
        else
        {
          sub_100028388((uint64_t)v9, type metadata accessor for WalrusWebAccessInfo);
        }

        sub_10019FD9C(v37, (uint64_t)v67, v66);
        sub_1000144D8(v26, v27);
        return sub_100028388((uint64_t)v18, type metadata accessor for WalrusPCSEncryptionMaterial);
      }
      v24 = sub_1000144D8(v26, v27);
    }
    v56 = Logger.logObject.getter(v24);
    v57 = static os_log_type_t.error.getter(v56);
    if (os_log_type_enabled(v56, v57))
    {
      v58 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v58 = 0;
      _os_log_impl((void *)&_mh_execute_header, v56, v57, "Failed to validate encryption material!", v58, 2u);
      swift_slowDealloc(v58, -1, -1);
    }

    v59 = sub_10015D0B4();
    v60 = swift_allocError(&type metadata for WalrusError, v59, 0, 0);
    *v61 = 1;
    v67(v60, 0, 1);
    swift_errorRelease(v60);
    return sub_100028388((uint64_t)v18, type metadata accessor for WalrusPCSEncryptionMaterial);
  }
  if (qword_10028ADB0 != -1)
    swift_once(&qword_10028ADB0, sub_100046CC8);
  v47 = type metadata accessor for Logger(0);
  v48 = sub_100005288(v47, (uint64_t)qword_1002A8990);
  v49 = Logger.logObject.getter(v48);
  v50 = static os_log_type_t.error.getter(v49);
  if (os_log_type_enabled(v49, v50))
  {
    v51 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v51 = 0;
    _os_log_impl((void *)&_mh_execute_header, v49, v50, "Can't provide PCS auth request, webAccessInfo validation failed.", v51, 2u);
    swift_slowDealloc(v51, -1, -1);
  }

  v52 = sub_10015D0B4();
  v53 = swift_allocError(&type metadata for WalrusError, v52, 0, 0);
  *v54 = 1;
  a2(v53, 0, 1);
  return swift_errorRelease(v53);
}

uint64_t sub_10019FD9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  void *v26;
  id v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD aBlock[5];
  uint64_t v36;
  _QWORD v37[5];

  v4 = v3;
  v33 = a2;
  v34 = a3;
  v32 = a1;
  v5 = type metadata accessor for WalrusWebAccessInfo(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  __chkstk_darwin(v5, v8);
  v9 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1000080B4(&qword_100296518);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  v14 = (char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10028ADB0 != -1)
    swift_once(&qword_10028ADB0, sub_100046CC8);
  v15 = type metadata accessor for Logger(0);
  v16 = sub_100005288(v15, (uint64_t)qword_1002A8990);
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v17, v18))
  {
    v19 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v19 = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Generating URL configuration for PCS auth request.", v19, 2u);
    swift_slowDealloc(v19, -1, -1);
  }

  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v14, v4 + OBJC_IVAR____TtC13appleaccountd28WalrusPCSAuthRequestProvider__urlBagBuilder, v10);
  Dependency.wrappedValue.getter(v37, v10);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  sub_100027FE8(v32, (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for WalrusWebAccessInfo);
  v20 = *(unsigned __int8 *)(v6 + 80);
  v21 = (v20 + 24) & ~v20;
  v22 = (v7 + v21 + 7) & 0xFFFFFFFFFFFFFFF8;
  v23 = swift_allocObject(&unk_10026D0D8, v22 + 16, v20 | 7);
  *(_QWORD *)(v23 + 16) = v4;
  sub_10003B730((uint64_t)v9, v23 + v21, type metadata accessor for WalrusWebAccessInfo);
  v24 = (_QWORD *)(v23 + v22);
  v25 = v34;
  *v24 = v33;
  v24[1] = v25;
  v26 = (void *)objc_opt_self(AARemoteServer);
  swift_retain(v4);
  swift_retain(v25);
  v27 = objc_msgSend(v26, "sharedServer");
  v28 = swift_allocObject(&unk_10026D100, 32, 7);
  *(_QWORD *)(v28 + 16) = sub_1001A236C;
  *(_QWORD *)(v28 + 24) = v23;
  aBlock[4] = sub_1001A23E8;
  v36 = v28;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000ABBFC;
  aBlock[3] = &unk_10026D118;
  v29 = _Block_copy(aBlock);
  v30 = v36;
  swift_retain(v23);
  swift_release(v30);
  objc_msgSend(v27, "configurationWithCompletion:", v29);
  _Block_release(v29);
  swift_release(v23);

  return sub_100006F58(v37);
}

uint64_t sub_1001A008C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_100006F58((_QWORD *)(v0 + 24));
  v1 = v0 + OBJC_IVAR____TtC13appleaccountd28WalrusPCSAuthRequestProvider__accountStore;
  v2 = sub_1000080B4(&qword_10028FA50);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  v3 = v0 + OBJC_IVAR____TtC13appleaccountd28WalrusPCSAuthRequestProvider__urlBagBuilder;
  v4 = sub_1000080B4(&qword_100296518);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  v5 = v0 + OBJC_IVAR____TtC13appleaccountd28WalrusPCSAuthRequestProvider__signatureValidator;
  v6 = sub_1000080B4(&qword_100296510);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1001A0148()
{
  return type metadata accessor for WalrusPCSAuthRequestProvider(0);
}

uint64_t type metadata accessor for WalrusPCSAuthRequestProvider(uint64_t a1)
{
  return sub_100004C78(a1, (uint64_t *)&unk_1002963C0, (uint64_t)&nominal type descriptor for WalrusPCSAuthRequestProvider);
}

void sub_1001A0164(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[5];

  v8[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v8[1] = "(";
  sub_100017464(319, (unint64_t *)&qword_100293810, &qword_10028C860);
  if (v3 <= 0x3F)
  {
    v8[2] = *(_QWORD *)(v2 - 8) + 64;
    sub_100017464(319, &qword_1002963D0, &qword_100294978);
    if (v5 <= 0x3F)
    {
      v8[3] = *(_QWORD *)(v4 - 8) + 64;
      sub_100017464(319, (unint64_t *)&unk_1002963D8, (uint64_t *)&unk_100294AF0);
      if (v7 <= 0x3F)
      {
        v8[4] = *(_QWORD *)(v6 - 8) + 64;
        swift_updateClassMetadata2(a1, 256, 5, v8, a1 + 80);
      }
    }
  }
}

uint64_t sub_1001A024C(uint64_t a1, uint64_t a2, _QWORD *a3, void (*a4)(uint64_t, _QWORD, uint64_t), uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v20;
  uint64_t v21[4];
  __int128 v22[2];
  char v23;

  sub_100024A20(a1, (uint64_t)v22, &qword_100296520);
  if ((v23 & 1) != 0)
  {
    v9 = *(_QWORD *)&v22[0];
    if (qword_10028ADB0 != -1)
      swift_once(&qword_10028ADB0, sub_100046CC8);
    v10 = type metadata accessor for Logger(0);
    sub_100005288(v10, (uint64_t)qword_1002A8990);
    v11 = swift_errorRetain(v9);
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.error.getter(v12);
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc(12, -1);
      v15 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v14 = 138412290;
      v16 = _convertErrorToNSError(_:)(v9);
      v20 = v16;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, v21);
      *v15 = v16;
      swift_errorRelease(v9);
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "No URL configuration, unable to build PCS auth request: %@", v14, 0xCu);
      v17 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v15, 1, v17);
      swift_slowDealloc(v15, -1, -1);
      swift_slowDealloc(v14, -1, -1);
    }
    else
    {
      swift_errorRelease(v9);
    }

    swift_errorRetain(v9);
    a4(v9, 0, 1);
    swift_errorRelease(v9);
    return swift_errorRelease(v9);
  }
  else
  {
    sub_10003A190(v22, (uint64_t)&v20);
    v18 = sub_10000732C(&v20, v21[2]);
    sub_1001A1B30(a3, *v18, a4, a5, a2);
    return sub_100006F58(&v20);
  }
}

uint64_t sub_1001A0464(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, _QWORD, uint64_t), uint64_t a4, uint64_t a5, void *a6, uint64_t a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint64_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  void (*v40)(uint64_t, _QWORD, uint64_t);
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  __n128 v44;
  os_log_type_t v45;
  BOOL v46;
  uint8_t *v47;
  uint64_t v48;
  uint8_t *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v55;
  int64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  _QWORD *v74;
  uint64_t v75;
  id v76;
  uint8_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void (*v86)(uint64_t, _QWORD, uint64_t);
  uint64_t v87;
  __int128 v88[2];

  v86 = a3;
  v13 = type metadata accessor for WalrusPCSEncryptionMaterial(0);
  __chkstk_darwin(v13, v14);
  v16 = (uint8_t *)&v77 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for WalrusWebAccessInfo(0);
  v18 = *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64);
  v20 = __chkstk_darwin(v17, v19);
  v22 = __chkstk_darwin(v20, v21);
  v24 = (char *)&v77 - v23;
  v26 = __chkstk_darwin(v22, v25);
  v30 = (char *)&v77 - v29;
  if (a1)
  {
    swift_errorRetain(a1);
    if (qword_10028ADB0 != -1)
      swift_once(&qword_10028ADB0, sub_100046CC8);
    v31 = type metadata accessor for Logger(0);
    sub_100005288(v31, (uint64_t)qword_1002A8990);
    v32 = sub_100027FE8(a2, (uint64_t)v24, type metadata accessor for WalrusWebAccessInfo);
    v33 = Logger.logObject.getter(v32);
    v34 = static os_log_type_t.error.getter(v33);
    if (os_log_type_enabled(v33, v34))
    {
      v35 = swift_slowAlloc(12, -1);
      v85 = a4;
      v36 = (uint8_t *)v35;
      v37 = swift_slowAlloc(32, -1);
      *(_QWORD *)&v88[0] = v37;
      *(_DWORD *)v36 = 136315138;
      v38 = *((_QWORD *)v24 + 16);
      v39 = *((_QWORD *)v24 + 17);
      swift_bridgeObjectRetain(v39);
      v87 = sub_1001DEF4C(v38, v39, (uint64_t *)v88);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v87, v88);
      swift_bridgeObjectRelease(v39);
      sub_100028388((uint64_t)v24, type metadata accessor for WalrusWebAccessInfo);
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "Failed to verify arming for service %s abandoning key fetch", v36, 0xCu);
      swift_arrayDestroy(v37, 1, (char *)&type metadata for Any + 8);
      v40 = v86;
      swift_slowDealloc(v37, -1, -1);
      swift_slowDealloc(v36, -1, -1);

    }
    else
    {
      sub_100028388((uint64_t)v24, type metadata accessor for WalrusWebAccessInfo);

      v40 = v86;
    }
    swift_errorRetain(a1);
    v40(a1, 0, 1);
    swift_errorRelease(a1);
    return swift_errorRelease(a1);
  }
  else
  {
    v78 = v26;
    v79 = v28;
    v80 = v27;
    v81 = a7;
    v83 = a5;
    if (qword_10028ADB0 != -1)
      swift_once(&qword_10028ADB0, sub_100046CC8);
    v41 = type metadata accessor for Logger(0);
    sub_100005288(v41, (uint64_t)qword_1002A8990);
    v42 = sub_100027FE8(a2, (uint64_t)v30, type metadata accessor for WalrusWebAccessInfo);
    v43 = Logger.logObject.getter(v42);
    v45 = static os_log_type_t.default.getter(v44);
    v46 = os_log_type_enabled(v43, v45);
    v84 = a2;
    v85 = a4;
    v82 = a6;
    if (v46)
    {
      v47 = (uint8_t *)swift_slowAlloc(12, -1);
      v48 = swift_slowAlloc(32, -1);
      *(_QWORD *)&v88[0] = v48;
      *(_DWORD *)v47 = 136315138;
      v77 = v47 + 4;
      v49 = v16;
      v51 = *((_QWORD *)v30 + 16);
      v50 = *((_QWORD *)v30 + 17);
      swift_bridgeObjectRetain(v50);
      v52 = v51;
      v16 = v49;
      v87 = sub_1001DEF4C(v52, v50, (uint64_t *)v88);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v87, v88);
      v53 = v50;
      a2 = v84;
      swift_bridgeObjectRelease(v53);
      sub_100028388((uint64_t)v30, type metadata accessor for WalrusWebAccessInfo);
      _os_log_impl((void *)&_mh_execute_header, v43, v45, "Service %s is armed, continue with PCS key fetch", v47, 0xCu);
      swift_arrayDestroy(v48, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v48, -1, -1);
      swift_slowDealloc(v47, -1, -1);
    }
    else
    {
      sub_100028388((uint64_t)v30, type metadata accessor for WalrusWebAccessInfo);
    }

    v55 = *(_QWORD *)(a2 + 144);
    v56 = *(_QWORD *)(v55 + 16);
    v57 = _swiftEmptyArrayStorage;
    if (v56)
    {
      v77 = v16;
      *(_QWORD *)&v88[0] = _swiftEmptyArrayStorage;
      swift_bridgeObjectRetain(v55);
      sub_1001D4B98(0, v56, 0);
      v58 = 80;
      v57 = *(_QWORD **)&v88[0];
      do
      {
        sub_1001CBDA0(*(_BYTE *)(v55 + v58));
        v60 = v59;
        v62 = v61;
        *(_QWORD *)&v88[0] = v57;
        v64 = v57[2];
        v63 = v57[3];
        if (v64 >= v63 >> 1)
        {
          sub_1001D4B98(v63 > 1, v64 + 1, 1);
          v57 = *(_QWORD **)&v88[0];
        }
        v57[2] = v64 + 1;
        v65 = &v57[2 * v64];
        v65[4] = v60;
        v65[5] = v62;
        v58 += 72;
        --v56;
      }
      while (v56);
      swift_bridgeObjectRelease(v55);
      v16 = v77;
      a2 = v84;
    }
    sub_100027FE8(a2 + *(int *)(v78 + 60), (uint64_t)v16, type metadata accessor for WalrusPCSEncryptionMaterial);
    v66 = v80;
    sub_100027FE8(a2, v80, type metadata accessor for WalrusWebAccessInfo);
    sub_100006CA4(v81, (uint64_t)v88);
    v67 = *(unsigned __int8 *)(v79 + 80);
    v68 = (v67 + 32) & ~v67;
    v69 = (v18 + v68 + 7) & 0xFFFFFFFFFFFFFFF8;
    v70 = (v69 + 47) & 0xFFFFFFFFFFFFFFF8;
    v71 = swift_allocObject(&unk_10026D1C8, v70 + 16, v67 | 7);
    v73 = v82;
    v72 = v83;
    *(_QWORD *)(v71 + 16) = v83;
    *(_QWORD *)(v71 + 24) = v73;
    sub_10003B730(v66, v71 + v68, type metadata accessor for WalrusWebAccessInfo);
    sub_10003A190(v88, v71 + v69);
    v74 = (_QWORD *)(v71 + v70);
    v75 = v85;
    *v74 = v86;
    v74[1] = v75;
    swift_retain(v72);
    v76 = v73;
    swift_retain(v75);
    sub_1001A0BF4((uint64_t)v57, (uint64_t)v16, (uint64_t)sub_1001A27FC, v71);
    swift_bridgeObjectRelease(v57);
    swift_release(v71);
    return sub_100028388((uint64_t)v16, type metadata accessor for WalrusPCSEncryptionMaterial);
  }
}

uint64_t sub_1001A0A6C(uint64_t a1, uint64_t a2, unint64_t a3, _QWORD *a4, _QWORD *a5, void (*a6)(void *, uint64_t, BOOL))
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void **v17;
  int EnumCaseMultiPayload;
  uint64_t v19;
  void *v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v25;
  void (*v26)(void *, uint64_t, BOOL);

  v26 = a6;
  v10 = type metadata accessor for WalrusPCSAuthRequestProvider.EncryptionInfo(0);
  __chkstk_darwin(v10, v11);
  v13 = (uint64_t *)((char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = sub_1000080B4(&qword_100296530);
  __chkstk_darwin(v14, v15);
  v17 = (void **)((char *)&v25 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100024A20(a1, (uint64_t)v17, &qword_100296530);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v17, v14);
  if (EnumCaseMultiPayload == 1)
  {
    v19 = 0;
    v20 = *v17;
  }
  else
  {
    sub_10003B730((uint64_t)v17, (uint64_t)v13, type metadata accessor for WalrusPCSAuthRequestProvider.EncryptionInfo);
    v21 = *(_QWORD **)((char *)v13 + *(int *)(v10 + 20));
    v22 = sub_10000732C(a5, a5[3]);
    v20 = (void *)sub_1001A29BC(a3, a4, v13, v21, *v22);
    v19 = v23;
    sub_100028388((uint64_t)v13, type metadata accessor for WalrusPCSAuthRequestProvider.EncryptionInfo);
  }
  v26(v20, v19, EnumCaseMultiPayload == 1);
  return sub_1000E9A04(v20, v19, EnumCaseMultiPayload == 1);
}

void sub_1001A0BF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Class isa;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  void *v17;
  _QWORD *v18;
  uint64_t v19;
  id v20;
  _QWORD aBlock[5];
  _QWORD *v22;

  v9 = type metadata accessor for WalrusPCSEncryptionMaterial(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  __chkstk_darwin(v9, v12);
  v20 = *(id *)(v4 + 16);
  isa = Array._bridgeToObjectiveC()().super.isa;
  sub_100027FE8(a2, (uint64_t)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for WalrusPCSEncryptionMaterial);
  v14 = *(unsigned __int8 *)(v10 + 80);
  v15 = (v14 + 48) & ~v14;
  v16 = (_QWORD *)swift_allocObject(&unk_10026D1F0, v15 + v11, v14 | 7);
  v16[2] = a1;
  v16[3] = a3;
  v16[4] = a4;
  v16[5] = v4;
  sub_10003B730((uint64_t)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t)v16 + v15, type metadata accessor for WalrusPCSEncryptionMaterial);
  aBlock[4] = sub_1001A2968;
  v22 = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1001A133C;
  aBlock[3] = &unk_10026D208;
  v17 = _Block_copy(aBlock);
  v18 = v22;
  swift_bridgeObjectRetain(a1);
  swift_retain(a4);
  swift_retain(v4);
  swift_release(v18);
  objc_msgSend(v20, "pcsKeysForServices:completion:", isa, v17);
  _Block_release(v17);

}

uint64_t sub_1001A0D74(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  __n128 v34;
  os_log_type_t v35;
  uint8_t *v36;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  __n128 v41;
  os_log_type_t v42;
  uint8_t *v43;
  uint64_t v44;
  __n128 v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  _BYTE *v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(uint64_t);
  uint64_t v56;
  uint64_t v57;

  v13 = sub_1000080B4(&qword_100296530);
  __chkstk_darwin(v13, v14);
  v16 = (uint64_t *)((char *)&v52 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (a2)
  {
    swift_errorRetain(a2);
    if (qword_10028ADB0 != -1)
      swift_once(&qword_10028ADB0, sub_100046CC8);
    v17 = type metadata accessor for Logger(0);
    sub_100005288(v17, (uint64_t)qword_1002A8990);
    swift_errorRetain(a2);
    swift_bridgeObjectRetain(a3);
    swift_errorRetain(a2);
    swift_bridgeObjectRetain(a3);
    v19 = Logger.logObject.getter(v18);
    v20 = static os_log_type_t.error.getter(v19);
    if (os_log_type_enabled(v19, v20))
    {
      v21 = swift_slowAlloc(22, -1);
      v52 = (uint64_t *)swift_slowAlloc(8, -1);
      v53 = swift_slowAlloc(32, -1);
      v57 = v53;
      *(_DWORD *)v21 = 136315394;
      v54 = v13;
      v22 = swift_bridgeObjectRetain(a3);
      v23 = Array.description.getter(v22);
      v55 = a4;
      v24 = v23;
      v26 = v25;
      swift_bridgeObjectRelease(a3);
      v56 = sub_1001DEF4C(v24, v26, &v57);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, &v57);
      swift_bridgeObjectRelease_n(a3, 2);
      swift_bridgeObjectRelease(v26);
      *(_WORD *)(v21 + 12) = 2112;
      v27 = _convertErrorToNSError(_:)(a2);
      v56 = v27;
      v13 = v54;
      a4 = v55;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, &v57);
      v28 = v52;
      *v52 = v27;
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Failed to fetch encrypted keys for services %s with error: %@", (uint8_t *)v21, 0x16u);
      v29 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v28, 1, v29);
      swift_slowDealloc(v28, -1, -1);
      v30 = v53;
      swift_arrayDestroy(v53, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v30, -1, -1);
      swift_slowDealloc(v21, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n(a3, 2);
      swift_errorRelease(a2);
      swift_errorRelease(a2);
    }

    *v16 = a2;
    swift_storeEnumTagMultiPayload(v16, v13, 1);
    swift_errorRetain(a2);
    a4((uint64_t)v16);
    swift_errorRelease(a2);
    return sub_1001A3868((uint64_t)v16);
  }
  if (!*(_QWORD *)(a1 + 16))
  {
    if (qword_10028ADB0 != -1)
      swift_once(&qword_10028ADB0, sub_100046CC8);
    v38 = type metadata accessor for Logger(0);
    sub_100005288(v38, (uint64_t)qword_1002A8990);
    v39 = swift_bridgeObjectRetain_n(a3, 2);
    v40 = Logger.logObject.getter(v39);
    v42 = static os_log_type_t.default.getter(v41);
    if (os_log_type_enabled(v40, v42))
    {
      v55 = a4;
      v43 = (uint8_t *)swift_slowAlloc(12, -1);
      v44 = swift_slowAlloc(32, -1);
      v57 = v44;
      v54 = v13;
      *(_DWORD *)v43 = 136315138;
      v53 = (uint64_t)(v43 + 4);
      v45 = swift_bridgeObjectRetain(a3);
      v46 = Array.description.getter(v45);
      v48 = v47;
      swift_bridgeObjectRelease(a3);
      v56 = sub_1001DEF4C(v46, v48, &v57);
      a4 = v55;
      v13 = v54;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, &v57);
      swift_bridgeObjectRelease_n(a3, 2);
      swift_bridgeObjectRelease(v48);
      _os_log_impl((void *)&_mh_execute_header, v40, v42, "No keys found for any services %s.", v43, 0xCu);
      swift_arrayDestroy(v44, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v44, -1, -1);
      swift_slowDealloc(v43, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a3, 2);
    }
    v49 = sub_10015D0B4();
    v50 = swift_allocError(&type metadata for WalrusError, v49, 0, 0);
    *v51 = 2;
    *v16 = v50;
    swift_storeEnumTagMultiPayload(v16, v13, 1);
    a4((uint64_t)v16);
    return sub_1001A3868((uint64_t)v16);
  }
  if (qword_10028ADB0 != -1)
    swift_once(&qword_10028ADB0, sub_100046CC8);
  v31 = type metadata accessor for Logger(0);
  v32 = sub_100005288(v31, (uint64_t)qword_1002A8990);
  v33 = Logger.logObject.getter(v32);
  v35 = static os_log_type_t.default.getter(v34);
  if (os_log_type_enabled(v33, v35))
  {
    v36 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v36 = 0;
    _os_log_impl((void *)&_mh_execute_header, v33, v35, "Successfully fetched keys, time for encryption.", v36, 2u);
    swift_slowDealloc(v36, -1, -1);
  }

  return sub_1001A32E0(a1, a7, a4, a5);
}

void sub_1001A133C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  void (*v6)(uint64_t, void *);
  uint64_t v7;
  uint64_t v8;
  id v9;

  v6 = *(void (**)(uint64_t, void *))(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  v7 = sub_1000080B4(&qword_100296528);
  v8 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(a2, &type metadata for String, v7, &protocol witness table for String);
  swift_retain(v5);
  v9 = a3;
  v6(v8, a3);
  swift_release(v5);
  swift_bridgeObjectRelease(v8);

}

id sub_1001A13D8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  NSString v17;
  NSString v18;
  NSDictionary v19;
  NSString v20;
  NSArray v21;
  NSString v22;
  NSString v23;
  id v24;
  void *v26;

  v17 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a3);
  v18 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a5);
  v19.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a6);
  v20 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a8);
  sub_1000080B4(&qword_10028C088);
  v21.super.isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a9);
  v22 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a11);
  if (a13)
  {
    v23 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a13);
  }
  else
  {
    v23 = 0;
  }
  v24 = objc_msgSend(v26, "initWithAccount:WebSessionID:webSessionConsentUUID:encryptionEnvelope:appName:responseIdentities:serverInfo:urlString:", a1, v17, v18, v19.super.isa, v20, v21.super.isa, v22, v23);

  return v24;
}

_QWORD *sub_1001A1574(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return _swiftEmptyArrayStorage;
  v3 = sub_1000080B4(&qword_100292D20);
  v4 = (_QWORD *)swift_allocObject(v3, 8 * v1 + 32, 7);
  v5 = j__malloc_size(v4);
  v6 = v5 - 32;
  if (v5 < 32)
    v6 = v5 - 25;
  v4[2] = v1;
  v4[3] = 2 * (v6 >> 3);
  v7 = sub_1001A173C((uint64_t)&v10, v4 + 4, v1, a1);
  v8 = v10;
  swift_bridgeObjectRetain(a1);
  sub_100149DEC(v8);
  if (v7 != v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return v4;
}

_QWORD *sub_1001A1658(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return _swiftEmptyArrayStorage;
  v3 = sub_1000080B4(&qword_100292D38);
  v4 = (_QWORD *)swift_allocObject(v3, 16 * v1 + 32, 7);
  v5 = j__malloc_size(v4);
  v6 = v5 - 32;
  if (v5 < 32)
    v6 = v5 - 17;
  v4[2] = v1;
  v4[3] = 2 * (v6 >> 4);
  v7 = sub_1001A1934((uint64_t)&v10, v4 + 4, v1, a1);
  v8 = v10;
  swift_bridgeObjectRetain(a1);
  sub_100149DEC(v8);
  if (v7 != v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return v4;
}

uint64_t sub_1001A173C(uint64_t result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;

  v5 = (_QWORD *)result;
  v6 = a4 + 64;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = *(_QWORD *)(*(_QWORD *)(a4 + 56) + 8 * v16);
    *v11 = v20;
    if (v13 == v10)
    {
      swift_errorRetain(v20);
      goto LABEL_38;
    }
    ++v11;
    result = swift_errorRetain(v20);
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_1001A1934(uint64_t result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  uint64_t v21;

  v5 = (_QWORD *)result;
  v6 = a4 + 64;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = (_QWORD *)(*(_QWORD *)(a4 + 48) + 16 * v16);
    v21 = v20[1];
    *v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain(v21);
      goto LABEL_38;
    }
    v11 += 2;
    result = swift_bridgeObjectRetain(v21);
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_1001A1B30(_QWORD *a1, uint64_t a2, void (*a3)(uint64_t, _QWORD, uint64_t), uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  void *v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  NSString v35;
  uint64_t v36;
  uint64_t v37;
  NSString v38;
  _QWORD *v39;
  void *v40;
  _QWORD *v41;
  void (*v42)(uint64_t, _QWORD, uint64_t);
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  uint8_t *v47;
  unint64_t v48;
  uint64_t v49;
  _BYTE *v50;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(uint64_t, _QWORD, uint64_t);
  _QWORD aBlock[3];
  void *v60;
  void (*v61)(void *, uint64_t);
  _QWORD *v62;
  __int128 v63[2];
  _QWORD v64[6];

  v58 = a3;
  v9 = type metadata accessor for WalrusWebAccessInfo(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  __chkstk_darwin(v9, v12);
  v13 = (char *)&v52 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_1000080B4(&qword_10028FA50);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14, v16);
  v18 = (char *)&v52 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64[3] = type metadata accessor for DaemonSetupServiceURLBag();
  v64[4] = &off_100265AA0;
  v64[0] = a2;
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v18, a5 + OBJC_IVAR____TtC13appleaccountd28WalrusPCSAuthRequestProvider__accountStore, v14);
  swift_retain(a2);
  Dependency.wrappedValue.getter(aBlock, v14);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
  v19 = objc_msgSend(*(id *)(*sub_10000732C(aBlock, (uint64_t)v60) + 16), "aa_primaryAppleAccount");
  sub_100006F58(aBlock);
  if (v19)
  {
    v53 = sub_10000732C((_QWORD *)(a5 + 24), *(_QWORD *)(a5 + 48));
    v20 = a1[15];
    v54 = a1[14];
    v55 = v20;
    v21 = a1[17];
    v56 = a1[16];
    v57 = v21;
    sub_100027FE8((uint64_t)a1, (uint64_t)&v52 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for WalrusWebAccessInfo);
    sub_100006CA4((uint64_t)v64, (uint64_t)v63);
    v22 = *(unsigned __int8 *)(v10 + 80);
    v23 = (v22 + 16) & ~v22;
    v24 = (v11 + v23 + 7) & 0xFFFFFFFFFFFFFFF8;
    v25 = (v24 + 23) & 0xFFFFFFFFFFFFFFF8;
    v26 = a4;
    v27 = (v25 + 15) & 0xFFFFFFFFFFFFFFF8;
    v28 = (v27 + 15) & 0xFFFFFFFFFFFFFFF8;
    v29 = swift_allocObject(&unk_10026D150, v28 + 40, v22 | 7);
    sub_10003B730((uint64_t)v13, v29 + v23, type metadata accessor for WalrusWebAccessInfo);
    v30 = (_QWORD *)(v29 + v24);
    *v30 = v58;
    v30[1] = v26;
    *(_QWORD *)(v29 + v25) = a5;
    *(_QWORD *)(v29 + v27) = v19;
    sub_10003A190(v63, v29 + v28);
    v31 = *(void **)(*v53 + 16);
    swift_retain(v26);
    swift_retain(a5);
    v32 = v19;
    v34 = v54;
    v33 = v55;
    v35 = String._bridgeToObjectiveC()();
    v37 = v56;
    v36 = v57;
    v38 = String._bridgeToObjectiveC()();
    v39 = (_QWORD *)swift_allocObject(&unk_10026D178, 64, 7);
    v39[2] = v37;
    v39[3] = v36;
    v39[4] = sub_1001A25A4;
    v39[5] = v29;
    v39[6] = v34;
    v39[7] = v33;
    v61 = sub_1001A2650;
    v62 = v39;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1000ABBFC;
    v60 = &unk_10026D190;
    v40 = _Block_copy(aBlock);
    v41 = v62;
    swift_bridgeObjectRetain(v36);
    swift_retain(v29);
    swift_bridgeObjectRetain(v33);
    swift_release(v41);
    objc_msgSend(v31, "PCSAuthContextForWebSessionIdentifier:serviceName:completion:", v35, v38, v40);
    _Block_release(v40);
    swift_release(v29);

  }
  else
  {
    v42 = v58;
    if (qword_10028ADB0 != -1)
      swift_once(&qword_10028ADB0, sub_100046CC8);
    v43 = type metadata accessor for Logger(0);
    v44 = sub_100005288(v43, (uint64_t)qword_1002A8990);
    v45 = Logger.logObject.getter(v44);
    v46 = static os_log_type_t.error.getter(v45);
    if (os_log_type_enabled(v45, v46))
    {
      v47 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v47 = 0;
      _os_log_impl((void *)&_mh_execute_header, v45, v46, "No primary account found, abandoning key fetch.", v47, 2u);
      swift_slowDealloc(v47, -1, -1);
    }

    v48 = sub_10015D0B4();
    v49 = swift_allocError(&type metadata for WalrusError, v48, 0, 0);
    *v50 = 6;
    v42(v49, 0, 1);
    swift_errorRelease(v49);
  }
  return sub_100006F58(v64);
}

uint64_t sub_1001A1F64(uint64_t result, _QWORD *a2)
{
  unint64_t v2;
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t *v29;
  _QWORD *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v40;

  v2 = *(_QWORD *)(result + 16);
  if (v2)
  {
    v3 = a2;
    v4 = 0;
    v32 = result + 32;
    v29 = a2 + 7;
    v30 = _swiftEmptyArrayStorage;
    v31 = *(_QWORD *)(result + 16);
    while (1)
    {
      if (v4 <= v2)
        v5 = v2;
      else
        v5 = v4;
      v38 = v5;
      while (1)
      {
        if (v4 == v38)
          goto LABEL_34;
        v6 = v32 + 72 * v4;
        v7 = *(_QWORD *)(v6 + 24);
        v36 = *(_QWORD *)(v6 + 16);
        v37 = *(_QWORD *)v6;
        v8 = *(_QWORD *)(v6 + 40);
        v35 = *(_QWORD *)(v6 + 32);
        v9 = *(_BYTE *)(v6 + 48);
        v10 = *(_QWORD *)(v6 + 64);
        v33 = *(_QWORD *)(v6 + 56);
        ++v4;
        v40 = *(_QWORD *)(v6 + 8);
        swift_bridgeObjectRetain(v40);
        swift_bridgeObjectRetain(v7);
        swift_bridgeObjectRetain(v8);
        swift_bridgeObjectRetain(v10);
        v34 = v9;
        sub_1001CBDA0(v9);
        v13 = v12;
        v14 = v3[2];
        if (!v14)
          goto LABEL_7;
        v15 = v11;
        v16 = a2[4];
        v17 = a2[5];
        if (v16 == v15 && v17 == v13)
          break;
        result = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v17, v15, v13, 0);
        if ((result & 1) != 0)
          break;
        if (v14 != 1)
        {
          v19 = v29;
          v20 = 1;
          while (1)
          {
            v21 = v20 + 1;
            if (__OFADD__(v20, 1))
              break;
            v22 = *(v19 - 1);
            v23 = *v19;
            if (v22 == v15 && v23 == v13)
              goto LABEL_25;
            result = _stringCompareWithSmolCheck(_:_:expecting:)(v22, v23, v15, v13, 0);
            if ((result & 1) != 0)
              goto LABEL_25;
            v19 += 2;
            ++v20;
            if (v21 == v14)
              goto LABEL_7;
          }
          __break(1u);
LABEL_34:
          __break(1u);
          return result;
        }
LABEL_7:
        swift_bridgeObjectRelease(v10);
        swift_bridgeObjectRelease(v8);
        swift_bridgeObjectRelease(v7);
        swift_bridgeObjectRelease(v40);
        result = swift_bridgeObjectRelease(v13);
        v3 = a2;
        if (v4 == v31)
          return (uint64_t)v30;
      }
LABEL_25:
      swift_bridgeObjectRelease(v13);
      v25 = v30;
      result = swift_isUniquelyReferenced_nonNull_native(v30);
      if ((result & 1) == 0)
      {
        result = sub_1001D4DC0(0, v30[2] + 1, 1);
        v25 = v30;
      }
      v27 = v25[2];
      v26 = v25[3];
      if (v27 >= v26 >> 1)
      {
        result = sub_1001D4DC0(v26 > 1, v27 + 1, 1);
        v25 = v30;
      }
      v25[2] = v27 + 1;
      v30 = v25;
      v28 = &v25[9 * v27];
      v28[4] = v37;
      v28[5] = v40;
      v3 = a2;
      v28[6] = v36;
      v28[7] = v7;
      v28[8] = v35;
      v28[9] = v8;
      *((_BYTE *)v28 + 80) = v34;
      v28[11] = v33;
      v28[12] = v10;
      v2 = v31;
      if (v4 == v31)
        return (uint64_t)v30;
    }
  }
  return (uint64_t)_swiftEmptyArrayStorage;
}

uint64_t sub_1001A21E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  int *v9;
  char *v10;
  uint64_t v11;

  v1 = type metadata accessor for WalrusWebAccessInfo(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release(*(_QWORD *)(v0 + 16));
  v7 = (_QWORD *)(v0 + v4);
  swift_bridgeObjectRelease(v7[1]);
  swift_bridgeObjectRelease(v7[3]);
  swift_bridgeObjectRelease(v7[5]);
  swift_bridgeObjectRelease(v7[7]);
  swift_bridgeObjectRelease(v7[9]);
  swift_bridgeObjectRelease(v7[11]);
  swift_bridgeObjectRelease(v7[13]);
  swift_bridgeObjectRelease(v7[15]);
  swift_bridgeObjectRelease(v7[17]);
  swift_bridgeObjectRelease(v7[18]);
  swift_bridgeObjectRelease(v7[20]);
  v8 = (_QWORD *)((char *)v7 + *(int *)(v1 + 60));
  swift_bridgeObjectRelease(v8[1]);
  swift_bridgeObjectRelease(v8[3]);
  swift_bridgeObjectRelease(v8[5]);
  swift_bridgeObjectRelease(v8[7]);
  swift_bridgeObjectRelease(v8[9]);
  swift_bridgeObjectRelease(v8[11]);
  sub_10000F494(v8[12], v8[13]);
  swift_bridgeObjectRelease(v8[15]);
  v9 = (int *)type metadata accessor for WalrusPCSEncryptionMaterial(0);
  v10 = (char *)v8 + v9[13];
  v11 = type metadata accessor for P384.KeyAgreement.PublicKey(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  sub_10000F494(*(_QWORD *)((char *)v8 + v9[14]), *(_QWORD *)((char *)v8 + v9[14] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v8 + v9[15]));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v8 + v9[16] + 8));
  swift_release(*(_QWORD *)(v0 + v6 + 8));
  return swift_deallocObject(v0, v6 + 16, v5);
}

uint64_t sub_1001A236C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(type metadata accessor for WalrusWebAccessInfo(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = v1 + ((*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8);
  return sub_1001A024C(a1, *(_QWORD *)(v1 + 16), (_QWORD *)(v1 + v4), *(void (**)(uint64_t, _QWORD, uint64_t))v5, *(_QWORD *)(v5 + 8));
}

uint64_t sub_1001A23C4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001A23E8(void *a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1001E0B18(a1, a2, *(void (**)(uint64_t *))(v2 + 16));
}

uint64_t sub_1001A23F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  int *v12;
  char *v13;
  uint64_t v14;

  v1 = type metadata accessor for WalrusWebAccessInfo(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 23) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  v9 = (v8 + 15) & 0xFFFFFFFFFFFFFFF8;
  v10 = (_QWORD *)(v0 + v4);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + 8));
  swift_bridgeObjectRelease(v10[3]);
  swift_bridgeObjectRelease(v10[5]);
  swift_bridgeObjectRelease(v10[7]);
  swift_bridgeObjectRelease(v10[9]);
  swift_bridgeObjectRelease(v10[11]);
  swift_bridgeObjectRelease(v10[13]);
  swift_bridgeObjectRelease(v10[15]);
  swift_bridgeObjectRelease(v10[17]);
  swift_bridgeObjectRelease(v10[18]);
  swift_bridgeObjectRelease(v10[20]);
  v11 = (_QWORD *)((char *)v10 + *(int *)(v1 + 60));
  swift_bridgeObjectRelease(v11[1]);
  swift_bridgeObjectRelease(v11[3]);
  swift_bridgeObjectRelease(v11[5]);
  swift_bridgeObjectRelease(v11[7]);
  swift_bridgeObjectRelease(v11[9]);
  swift_bridgeObjectRelease(v11[11]);
  sub_10000F494(v11[12], v11[13]);
  swift_bridgeObjectRelease(v11[15]);
  v12 = (int *)type metadata accessor for WalrusPCSEncryptionMaterial(0);
  v13 = (char *)v11 + v12[13];
  v14 = type metadata accessor for P384.KeyAgreement.PublicKey(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
  sub_10000F494(*(_QWORD *)((char *)v11 + v12[14]), *(_QWORD *)((char *)v11 + v12[14] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v11 + v12[15]));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v11 + v12[16] + 8));
  swift_release(*(_QWORD *)(v0 + v6 + 8));
  swift_release(*(_QWORD *)(v0 + v7));

  sub_100006F58((_QWORD *)(v0 + v9));
  return swift_deallocObject(v0, v9 + 40, v5);
}

uint64_t sub_1001A25A4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v3 = *(_QWORD *)(type metadata accessor for WalrusWebAccessInfo(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_1001A0464(a1, v1 + v4, *(void (**)(uint64_t, _QWORD, uint64_t))(v1 + v5), *(_QWORD *)(v1 + v5 + 8), *(_QWORD *)(v1 + ((v5 + 23) & 0xFFFFFFFFFFFFFFF8)), *(void **)(v1 + ((((v5 + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)), v1 + ((((((v5 + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8));
}

uint64_t sub_1001A261C()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[3]);
  swift_release(v0[5]);
  swift_bridgeObjectRelease(v0[7]);
  return swift_deallocObject(v0, 64, 7);
}

void sub_1001A2650(void *a1, uint64_t a2)
{
  uint64_t v2;

  sub_10015C7F0(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(void (**)(void))(v2 + 32), *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48), *(_QWORD *)(v2 + 56));
}

uint64_t sub_1001A2660()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  int *v10;
  char *v11;
  uint64_t v12;

  v1 = type metadata accessor for WalrusWebAccessInfo(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 47) & 0xFFFFFFFFFFFFFFF8;
  swift_release(*(_QWORD *)(v0 + 16));

  v8 = (_QWORD *)(v0 + v4);
  swift_bridgeObjectRelease(v8[1]);
  swift_bridgeObjectRelease(v8[3]);
  swift_bridgeObjectRelease(v8[5]);
  swift_bridgeObjectRelease(v8[7]);
  swift_bridgeObjectRelease(v8[9]);
  swift_bridgeObjectRelease(v8[11]);
  swift_bridgeObjectRelease(v8[13]);
  swift_bridgeObjectRelease(v8[15]);
  swift_bridgeObjectRelease(v8[17]);
  swift_bridgeObjectRelease(v8[18]);
  swift_bridgeObjectRelease(v8[20]);
  v9 = (_QWORD *)((char *)v8 + *(int *)(v1 + 60));
  swift_bridgeObjectRelease(v9[1]);
  swift_bridgeObjectRelease(v9[3]);
  swift_bridgeObjectRelease(v9[5]);
  swift_bridgeObjectRelease(v9[7]);
  swift_bridgeObjectRelease(v9[9]);
  swift_bridgeObjectRelease(v9[11]);
  sub_10000F494(v9[12], v9[13]);
  swift_bridgeObjectRelease(v9[15]);
  v10 = (int *)type metadata accessor for WalrusPCSEncryptionMaterial(0);
  v11 = (char *)v9 + v10[13];
  v12 = type metadata accessor for P384.KeyAgreement.PublicKey(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
  sub_10000F494(*(_QWORD *)((char *)v9 + v10[14]), *(_QWORD *)((char *)v9 + v10[14] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v9 + v10[15]));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v9 + v10[16] + 8));
  sub_100006F58((_QWORD *)(v0 + v6));
  swift_release(*(_QWORD *)(v0 + v7 + 8));
  return swift_deallocObject(v0, v7 + 16, v5);
}

uint64_t sub_1001A27FC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v3 = *(_QWORD *)(type metadata accessor for WalrusWebAccessInfo(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_1001A0A6C(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), (_QWORD *)(v1 + v4), (_QWORD *)(v1 + v5), *(void (**)(void *, uint64_t, BOOL))(v1 + ((v5 + 47) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t sub_1001A2860()
{
  _QWORD *v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  v1 = (int *)type metadata accessor for WalrusPCSEncryptionMaterial(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 48) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_bridgeObjectRelease(v0[2]);
  swift_release(v0[4]);
  swift_release(v0[5]);
  v7 = (char *)v0 + v4;
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v0 + v4 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v0 + v4 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v0 + v4 + 40));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v0 + v4 + 56));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v0 + v4 + 72));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v0 + v4 + 88));
  sub_10000F494(*((_QWORD *)v7 + 12), *((_QWORD *)v7 + 13));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v0 + v4 + 120));
  v8 = (char *)v0 + v4 + v1[13];
  v9 = type metadata accessor for P384.KeyAgreement.PublicKey(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  sub_10000F494(*(_QWORD *)&v7[v1[14]], *(_QWORD *)&v7[v1[14] + 8]);
  swift_bridgeObjectRelease(*(_QWORD *)&v7[v1[15]]);
  swift_bridgeObjectRelease(*(_QWORD *)&v7[v1[16] + 8]);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1001A2968(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for WalrusPCSEncryptionMaterial(0) - 8) + 80);
  return sub_1001A0D74(a1, a2, *(_QWORD *)(v2 + 16), *(void (**)(uint64_t))(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), v2 + ((v5 + 48) & ~v5));
}

uint64_t sub_1001A29BC(unint64_t a1, _QWORD *a2, uint64_t *a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  void (*v20)(char *, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t inited;
  id v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  id v67;
  id v68;
  uint64_t v69;
  int64_t v70;
  uint64_t v71;
  _QWORD *v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  char v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  int64_t v86;
  _QWORD *v87;
  uint64_t v88;
  const char *v89;
  unint64_t v90;
  unint64_t v91;
  unint64_t v92;
  __int128 v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  id v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  _QWORD v105[18];
  _QWORD v106[3];
  uint64_t v107;
  _UNKNOWN **v108;

  v85 = a1;
  v9 = type metadata accessor for SHA256(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  v13 = (char *)&v81 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v107 = type metadata accessor for DaemonSetupServiceURLBag();
  v108 = &off_100265AA0;
  v106[0] = a5;
  v14 = (char *)a2 + *(int *)(type metadata accessor for WalrusWebAccessInfo(0) + 60);
  v15 = *((_QWORD *)v14 + 12);
  v16 = *((_QWORD *)v14 + 13);
  v17 = swift_retain(a5);
  SHA256.init()(v17);
  sub_1001D3844((uint64_t)v13, v15, v16);
  v19 = v18;
  v20 = *(void (**)(char *, uint64_t))(v10 + 8);
  v22 = v21;
  v20(v13, v9);
  v23 = *a3;
  v24 = a3[1];
  type metadata accessor for HPKEEnvelope(0);
  v25 = sub_10000F450(v23, v24);
  v26 = P384.KeyAgreement.PublicKey.derRepresentation.getter(v25);
  v28 = v27;
  v87 = a2;
  v29 = a2[18];
  swift_bridgeObjectRetain(a4);
  v92 = v19;
  sub_10000F450(v22, v19);
  swift_bridgeObjectRetain(v29);
  v31 = sub_1001A1F64(v30, a4);
  v84 = 0;
  v32 = v31;
  swift_bridgeObjectRelease(v29);
  swift_bridgeObjectRelease(a4);
  v33 = *(_QWORD *)(v32 + 16);
  v90 = v28;
  v91 = v24;
  v88 = v23;
  v95 = v26;
  v96 = v32;
  v86 = v33;
  if (v33)
  {
    v83 = v22;
    v105[16] = _swiftEmptyArrayStorage;
    sub_1001D4D94(0, v33, 0);
    v94 = sub_1000080B4(&qword_10028C038);
    v99 = &v104;
    v34 = v32 + 48;
    v93 = xmmword_100219130;
    v89 = "receiverPublicKeyHash";
    v35 = *(_QWORD *)(v32 + 32);
    v36 = *(_QWORD *)(v32 + 40);
    v37 = *(_QWORD *)(v32 + 72);
    v38 = *(unsigned __int8 *)(v32 + 80);
    v100 = *(_QWORD *)(v34 + 48);
    v101 = v37;
    v39 = sub_1000080B4(&qword_10028BB68);
    inited = swift_initStackObject(v39, v105);
    *(_OWORD *)(inited + 16) = v93;
    *(_QWORD *)(inited + 32) = v35;
    *(_QWORD *)(inited + 40) = v36;
    __asm { BR              X11 }
  }
  v41 = objc_msgSend(*(id *)(*sub_10000732C(v106, v107) + 16), "walrusWebAccessPCSAuthURL");
  v42 = v92;
  if (v41)
  {
    v43 = v41;
    v44 = static String._unconditionallyBridgeFromObjectiveC(_:)(v41);
    v100 = v45;
    v101 = v44;

  }
  else
  {
    v100 = 0;
    v101 = 0;
  }
  v46 = v87;
  v47 = v87[12];
  v94 = v87[13];
  v48 = v94;
  v49 = v87[15];
  v98 = v87[14];
  v99 = (uint64_t *)v47;
  *(_QWORD *)&v93 = v49;
  v50 = sub_1000080B4((uint64_t *)&unk_100293A90);
  v51 = swift_initStackObject(v50, &v102);
  *(_OWORD *)(v51 + 16) = xmmword_10021AF70;
  *(_QWORD *)(v51 + 32) = 0x6554726568706963;
  *(_QWORD *)(v51 + 40) = 0xEA00000000007478;
  v97 = (id)v85;
  swift_bridgeObjectRetain(v48);
  swift_bridgeObjectRetain(v49);
  *(Swift::String *)(v51 + 48) = Data.base64EncodedString(options:)(0);
  v89 = "com.apple.pcs.web-access";
  *(_QWORD *)(v51 + 64) = 0xD000000000000010;
  *(_QWORD *)(v51 + 72) = 0x800000010020F0E0;
  v83 = 0x800000010020F0E0;
  *(Swift::String *)(v51 + 80) = Data.base64EncodedString(options:)(0);
  v85 = (unint64_t)"encapsulationKey";
  *(_QWORD *)(v51 + 96) = 0xD000000000000015;
  *(_QWORD *)(v51 + 104) = 0x800000010020F100;
  v82 = 0x800000010020F100;
  sub_1001D34B0(v22, v42);
  v53 = v52;
  v103 = v52;
  v54 = v22;
  v55 = sub_1000080B4((uint64_t *)&unk_10028E800);
  v56 = sub_10008685C();
  v57 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v55, v56);
  v59 = v58;
  swift_bridgeObjectRelease(v53);
  *(_QWORD *)(v51 + 112) = v57;
  *(_QWORD *)(v51 + 120) = v59;
  v60 = sub_10001565C(v51);
  sub_1001CE6FC(v60);
  v62 = v61;
  swift_bridgeObjectRelease(v60);
  v63 = v46[16];
  v64 = v46[17];
  v65 = v46[19];
  v66 = v46[20];
  v67 = objc_allocWithZone((Class)AAWalrusPCSAuthRequest);
  swift_bridgeObjectRetain(v64);
  swift_bridgeObjectRetain(v66);
  v68 = sub_1001A13D8(v97, (uint64_t)v99, v94, v98, v93, v62, v63, v64, (uint64_t)_swiftEmptyArrayStorage, v65, v66, v101, v100);
  v69 = (uint64_t)v68;
  v70 = v86;
  if (v86)
  {
    v101 = (uint64_t)v68;
    v71 = v88;
    v103 = _swiftEmptyArrayStorage;
    sub_1001D4D78(0, v86, 0);
    v72 = v103;
    v73 = v103[2];
    v74 = 80;
    v75 = v90;
    do
    {
      v76 = *(_BYTE *)(v96 + v74);
      v103 = v72;
      v77 = v72[3];
      if (v73 >= v77 >> 1)
      {
        sub_1001D4D78(v77 > 1, v73 + 1, 1);
        v72 = v103;
      }
      v72[2] = v73 + 1;
      *((_BYTE *)v72 + v73 + 32) = v76;
      v74 += 72;
      ++v73;
      --v70;
    }
    while (v70);
    v78 = v92;
    sub_10000F494(v54, v92);
    swift_bridgeObjectRelease(v85 | 0x8000000000000000);
    swift_bridgeObjectRelease((unint64_t)v89 | 0x8000000000000000);
    swift_bridgeObjectRelease(0xEA00000000007478);
    sub_10000F494(v71, v91);
    sub_10000F494(v95, v75);
    sub_10000F494(v54, v78);
    swift_bridgeObjectRelease(v96);
    v69 = v101;
  }
  else
  {
    v79 = v92;
    sub_10000F494(v54, v92);
    swift_bridgeObjectRelease(v82);
    swift_bridgeObjectRelease(v83);
    swift_bridgeObjectRelease(0xEA00000000007478);
    sub_10000F494(v88, v91);
    sub_10000F494(v95, v90);
    sub_10000F494(v54, v79);
    swift_bridgeObjectRelease(v96);
  }
  sub_100006F58(v106);
  return v69;
}

uint64_t sub_1001A32E0(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(uint64_t);
  uint64_t v49;
  uint64_t v50;

  v47 = a4;
  v48 = a3;
  v46 = sub_1000080B4(&qword_100296530);
  __chkstk_darwin(v46, v6);
  v49 = (uint64_t)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = type metadata accessor for WalrusPCSAuthRequestProvider.EncryptionInfo(0);
  __chkstk_darwin(v44, v8);
  v10 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for HPKEEnvelope(0);
  __chkstk_darwin(v11, v12);
  v45 = (uint64_t *)((char *)&v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = type metadata accessor for P384.KeyAgreement.PublicKey(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14, v16);
  v18 = (char *)&v41 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_1001AEE10(0xD000000000000018, 0x800000010020F0C0);
  v21 = v20;
  v22 = type metadata accessor for WalrusPCSEncryptionMaterial(0);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v18, a2 + *(int *)(v22 + 52), v14);
  v23 = type metadata accessor for JSONEncoder(0);
  swift_allocObject(v23, *(unsigned int *)(v23 + 48), *(unsigned __int16 *)(v23 + 52));
  v25 = JSONEncoder.init()(v24);
  v26 = a1;
  v50 = a1;
  v27 = sub_1000080B4(&qword_100296538);
  v28 = sub_1001A38BC();
  v29 = dispatch thunk of JSONEncoder.encode<A>(_:)(&v50, v27, v28);
  v43 = v10;
  v30 = v25;
  v32 = v31;
  swift_release(v30);
  v33 = v32;
  sub_1000D3474(v29, v32, v19, v21, v18, v45);
  swift_bridgeObjectRetain(v26);
  v35 = sub_1001A1658(v34);
  v42 = v21;
  v36 = v35;
  swift_bridgeObjectRelease(v26);
  v37 = v45;
  v38 = (uint64_t)v43;
  sub_100027FE8((uint64_t)v45, (uint64_t)v43, type metadata accessor for HPKEEnvelope);
  *(_QWORD *)(v38 + *(int *)(v44 + 20)) = v36;
  v39 = v49;
  sub_100027FE8(v38, v49, type metadata accessor for WalrusPCSAuthRequestProvider.EncryptionInfo);
  swift_storeEnumTagMultiPayload(v39, v46, 0);
  v48(v39);
  sub_10000F494(v29, v33);
  sub_10000F494(v19, v42);
  sub_1001A3868(v39);
  sub_100028388(v38, type metadata accessor for WalrusPCSAuthRequestProvider.EncryptionInfo);
  sub_100028388((uint64_t)v37, type metadata accessor for HPKEEnvelope);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v18, v14);
}

uint64_t sub_1001A3868(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1000080B4(&qword_100296530);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for WalrusPCSAuthRequestProvider.EncryptionInfo(uint64_t a1)
{
  return sub_100004C78(a1, qword_1002965A8, (uint64_t)&nominal type descriptor for WalrusPCSAuthRequestProvider.EncryptionInfo);
}

unint64_t sub_1001A38BC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100296540;
  if (!qword_100296540)
  {
    v1 = sub_10000D908(&qword_100296538);
    sub_1001A3928();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_100296540);
  }
  return result;
}

unint64_t sub_1001A3928()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100296548;
  if (!qword_100296548)
  {
    v1 = sub_10000D908(&qword_100296528);
    sub_10000F4D8();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_100296548);
  }
  return result;
}

uint64_t *sub_1001A398C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v15);
  }
  else
  {
    v7 = *a2;
    v8 = a2[1];
    sub_10000F450(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    v9 = *(int *)(type metadata accessor for HPKEEnvelope(0) + 20);
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for P384.KeyAgreement.PublicKey(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
    v13 = *(int *)(a3 + 20);
    v14 = *(uint64_t *)((char *)a2 + v13);
    *(uint64_t *)((char *)a1 + v13) = v14;
    swift_bridgeObjectRetain(v14);
  }
  return a1;
}

uint64_t sub_1001A3A48(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  sub_10000F494(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  v4 = a1 + *(int *)(type metadata accessor for HPKEEnvelope(0) + 20);
  v5 = type metadata accessor for P384.KeyAgreement.PublicKey(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(a2 + 20)));
}

uint64_t *sub_1001A3AB0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = *a2;
  v7 = a2[1];
  sub_10000F450(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  v8 = *(int *)(type metadata accessor for HPKEEnvelope(0) + 20);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for P384.KeyAgreement.PublicKey(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
  v12 = *(int *)(a3 + 20);
  v13 = *(uint64_t *)((char *)a2 + v12);
  *(uint64_t *)((char *)a1 + v12) = v13;
  swift_bridgeObjectRetain(v13);
  return a1;
}

uint64_t *sub_1001A3B40(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v6 = *a2;
  v7 = a2[1];
  sub_10000F450(*a2, v7);
  v8 = *a1;
  v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_10000F494(v8, v9);
  v10 = *(int *)(type metadata accessor for HPKEEnvelope(0) + 20);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for P384.KeyAgreement.PublicKey(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 24))(v11, v12, v13);
  v14 = *(int *)(a3 + 20);
  v15 = *(uint64_t *)((char *)a2 + v14);
  v16 = *(uint64_t *)((char *)a1 + v14);
  *(uint64_t *)((char *)a1 + v14) = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16);
  return a1;
}

_OWORD *sub_1001A3BE4(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  v6 = *(int *)(type metadata accessor for HPKEEnvelope(0) + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for P384.KeyAgreement.PublicKey(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  *(_QWORD *)((char *)a1 + *(int *)(a3 + 20)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t *sub_1001A3C64(uint64_t *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = *a1;
  v7 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_10000F494(v6, v7);
  v8 = *(int *)(type metadata accessor for HPKEEnvelope(0) + 20);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for P384.KeyAgreement.PublicKey(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  v12 = *(int *)(a3 + 20);
  v13 = *(uint64_t *)((char *)a1 + v12);
  *(uint64_t *)((char *)a1 + v12) = *(_QWORD *)((char *)a2 + v12);
  swift_bridgeObjectRelease(v13);
  return a1;
}

uint64_t sub_1001A3CF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001A3D04);
}

uint64_t sub_1001A3D04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for HPKEEnvelope(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_1001A3D80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001A3D8C);
}

uint64_t sub_1001A3D8C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for HPKEEnvelope(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t sub_1001A3E04(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = type metadata accessor for HPKEEnvelope(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t type metadata accessor for InheritanceHealthCheckAnalyticsEvent(uint64_t a1)
{
  uint64_t result;

  result = qword_100296640;
  if (!qword_100296640)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for InheritanceHealthCheckAnalyticsEvent);
  return result;
}

void sub_1001A3EC4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD v5[12];

  v2 = qword_1002A8C00;
  v5[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v5[1] = "\b";
  v5[2] = &unk_1002207A0;
  v5[3] = &unk_1002207A0;
  v5[4] = &unk_1002207A0;
  v5[5] = (char *)&value witness table for Builtin.Int64 + 64;
  v5[6] = &unk_1002207A0;
  v5[7] = &unk_1002207A0;
  v5[8] = &unk_1002207A0;
  v5[9] = &unk_1002207A0;
  v5[10] = (char *)&value witness table for Builtin.Int64 + 64;
  sub_1000AAD84(319);
  if (v4 <= 0x3F)
  {
    v5[11] = *(_QWORD *)(v3 - 8) + 64;
    swift_initClassMetadata2(a1, 0, 12, v5, a1 + v2);
  }
}

uint64_t sub_1001A3F78()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  *(_QWORD *)(v0 + qword_1002965E0) = _swiftEmptyArrayStorage;
  *(_QWORD *)(v0 + qword_1002965E8) = 0;
  *(_BYTE *)(v0 + qword_1002965F0) = 0;
  *(_BYTE *)(v0 + qword_1002965F8) = 0;
  *(_BYTE *)(v0 + qword_100296600) = 0;
  *(_QWORD *)(v0 + qword_100296608) = 0;
  *(_BYTE *)(v0 + qword_100296610) = 0;
  *(_BYTE *)(v0 + qword_100296618) = 0;
  *(_BYTE *)(v0 + qword_100296620) = 0;
  *(_BYTE *)(v0 + qword_100296628) = 0;
  *(_QWORD *)(v0 + qword_100296630) = -1;
  v1 = sub_1000080B4((uint64_t *)&unk_10028F448);
  Dependency.init(dependencyId:config:)(0, 0, 0, v1);
  v2 = sub_10006A7EC((uint64_t)_swiftEmptyArrayStorage);
  return AAFTimedAnalyticsEvent.init(eventName:initialData:)(0xD00000000000002DLL, 0x800000010020F260, v2);
}

id sub_1001A407C(int a1)
{
  char *v1;
  char **v2;
  unint64_t v3;
  char *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  id v11;
  id v12;
  uint64_t v13;
  char v14;
  char v15;
  id result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  Class isa;
  char isUniquelyReferenced_nonNull_native;
  char **v24;
  unint64_t v25;
  Class v26;
  char v27;
  unint64_t v28;
  Class v29;
  char v30;
  unint64_t v31;
  NSString v32;
  char v33;
  unint64_t v34;
  NSString v35;
  char v36;
  unint64_t v37;
  Class v38;
  char v39;
  unint64_t v40;
  Class v41;
  char v42;
  unint64_t v43;
  Class v44;
  char v45;
  unint64_t v46;
  Class v47;
  char v48;
  unint64_t v49;
  Class v50;
  char v51;
  unint64_t v52;
  Class v53;
  char v54;
  unint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  id v59;
  Class v60;
  char v61;
  unint64_t v62;
  uint64_t v63;
  char v64;
  unint64_t v65;
  uint64_t v66;
  id v67;
  Class v68;
  char v69;
  unint64_t v70;
  uint64_t v71;
  char v72;
  unint64_t v73;
  uint64_t v74;
  id v75;
  Class v76;
  char v77;
  unint64_t v78;
  uint64_t v79;
  char v80;
  unint64_t v81;
  uint64_t v82;
  NSObject *v83;
  NSObject *v84;
  __n128 v85;
  os_log_type_t v86;
  uint8_t *v87;
  _QWORD *v88;
  id v89;
  uint64_t v90;
  void *v91;
  unint64_t v92;
  id v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD v106[5];

  v4 = v1;
  LODWORD(v5) = a1;
  v6 = sub_1000080B4(&qword_10028F658);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  v10 = (char *)&v100 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (objc_msgSend((id)objc_opt_self(AADeviceInfo), "isInternalBuild"))
  {
    v11 = objc_msgSend((id)objc_opt_self(NSProcessInfo), "processInfo");
    v12 = objc_msgSend(v11, "environment");

    v13 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v12, &type metadata for String, &type metadata for String, &protocol witness table for String);
    if (*(_QWORD *)(v13 + 16))
    {
      sub_10010A9E0(0xD00000000000001BLL, 0x800000010020AFA0);
      v15 = v14;
      result = (id)swift_bridgeObjectRelease(v13);
      if ((v15 & 1) != 0)
        return result;
    }
    else
    {
      swift_bridgeObjectRelease(v13);
    }
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v10, &v4[qword_100296638], v6);
  Dependency.wrappedValue.getter(v106, v6);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  v17 = *sub_10000732C(v106, v106[3]);
  v18 = sub_1000080B4(&qword_10028F8B8);
  OS_dispatch_queue.sync<A>(execute:)(&v104, sub_1000AAE2C, v17, v18);
  v19 = v104;
  sub_1001CE0B4(v104);
  v21 = v20;
  swift_bridgeObjectRelease(v19);
  v103 = v21;
  sub_100006F58(v106);
  isa = Bool._bridgeToObjectiveC()().super.super.isa;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v103);
  v106[0] = v103;
  v24 = (char **)0x8000000000000000;
  v103 = 0x8000000000000000;
  sub_10001FC90((uint64_t)isa, 0x6961706552646964, 0xE900000000000072, isUniquelyReferenced_nonNull_native);
  v25 = v103;
  v103 = v106[0];
  swift_bridgeObjectRelease(v25);
  v26 = Bool._bridgeToObjectiveC()().super.super.isa;
  v27 = swift_isUniquelyReferenced_nonNull_native(v103);
  v106[0] = v103;
  v103 = 0x8000000000000000;
  sub_10001FC90((uint64_t)v26, 0xD000000000000013, 0x800000010020D500, v27);
  v28 = v103;
  v103 = v106[0];
  swift_bridgeObjectRelease(v28);
  v29 = Int._bridgeToObjectiveC()().super.super.isa;
  v30 = swift_isUniquelyReferenced_nonNull_native(v103);
  v106[0] = v103;
  v103 = 0x8000000000000000;
  sub_10001FC90((uint64_t)v29, 0xD000000000000018, 0x800000010020D520, v30);
  v31 = v103;
  v103 = v106[0];
  swift_bridgeObjectRelease(v31);
  v32 = String._bridgeToObjectiveC()();
  v33 = swift_isUniquelyReferenced_nonNull_native(v103);
  v106[0] = v103;
  v103 = 0x8000000000000000;
  sub_10001FC90((uint64_t)v32, 0x6E6F6973726576, 0xE700000000000000, v33);
  v34 = v103;
  v103 = v106[0];
  swift_bridgeObjectRelease(v34);
  v35 = String._bridgeToObjectiveC()();
  v36 = swift_isUniquelyReferenced_nonNull_native(v103);
  v106[0] = v103;
  v103 = 0x8000000000000000;
  sub_10001FC90((uint64_t)v35, 0x6E6F6973726576, 0xE700000000000000, v36);
  v37 = v103;
  v103 = v106[0];
  swift_bridgeObjectRelease(v37);
  v38 = Bool._bridgeToObjectiveC()().super.super.isa;
  v39 = swift_isUniquelyReferenced_nonNull_native(v103);
  v106[0] = v103;
  v103 = 0x8000000000000000;
  sub_10001FC90((uint64_t)v38, 0xD000000000000011, 0x800000010020F1C0, v39);
  v40 = v103;
  v103 = v106[0];
  swift_bridgeObjectRelease(v40);
  v41 = Bool._bridgeToObjectiveC()().super.super.isa;
  v42 = swift_isUniquelyReferenced_nonNull_native(v103);
  v106[0] = v103;
  v103 = 0x8000000000000000;
  sub_10001FC90((uint64_t)v41, 0xD000000000000012, 0x800000010020F1E0, v42);
  v43 = v103;
  v103 = v106[0];
  swift_bridgeObjectRelease(v43);
  v44 = Bool._bridgeToObjectiveC()().super.super.isa;
  v45 = swift_isUniquelyReferenced_nonNull_native(v103);
  v106[0] = v103;
  v103 = 0x8000000000000000;
  sub_10001FC90((uint64_t)v44, 0xD000000000000013, 0x800000010020F200, v45);
  v46 = v103;
  v103 = v106[0];
  swift_bridgeObjectRelease(v46);
  v47 = Int._bridgeToObjectiveC()().super.super.isa;
  v48 = swift_isUniquelyReferenced_nonNull_native(v103);
  v106[0] = v103;
  v103 = 0x8000000000000000;
  sub_10001FC90((uint64_t)v47, 0x6C6544746E756F63, 0xEA00000000006174, v48);
  v49 = v103;
  v103 = v106[0];
  swift_bridgeObjectRelease(v49);
  v50 = Bool._bridgeToObjectiveC()().super.super.isa;
  v51 = swift_isUniquelyReferenced_nonNull_native(v103);
  v106[0] = v103;
  v103 = 0x8000000000000000;
  sub_10001FC90((uint64_t)v50, 0xD000000000000012, 0x800000010020F220, v51);
  v52 = v103;
  v103 = v106[0];
  swift_bridgeObjectRelease(v52);
  v53 = Bool._bridgeToObjectiveC()().super.super.isa;
  v54 = swift_isUniquelyReferenced_nonNull_native(v103);
  v106[0] = v103;
  v103 = 0x8000000000000000;
  sub_10001FC90((uint64_t)v53, 0xD000000000000014, 0x800000010020F240, v54);
  v55 = v103;
  v103 = v106[0];
  swift_bridgeObjectRelease(v55);
  v56 = (uint64_t *)&v4[qword_1002965E0];
  swift_beginAccess(&v4[qword_1002965E0], v106, 0, 0);
  v57 = *v56;
  if ((unint64_t)*v56 >> 62)
  {
    if (v57 < 0)
      v94 = *v56;
    else
      v94 = v57 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*v56);
    v95 = _CocoaArrayWrapper.endIndex.getter(v94);
    swift_bridgeObjectRelease(v57);
    if (!v95)
      goto LABEL_25;
  }
  else if (!*(_QWORD *)((v57 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_25;
  }
  v58 = *v56;
  if ((*v56 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain(*v56);
    v59 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v58);
    swift_bridgeObjectRelease(v58);
  }
  else
  {
    if (!*(_QWORD *)((v58 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
LABEL_41:
      if (v58 < 0)
        v96 = v58;
      else
        v96 = v58 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v58);
      v97 = _CocoaArrayWrapper.endIndex.getter(v96);
      swift_bridgeObjectRelease(v58);
      if (v97 < 2)
        goto LABEL_25;
      goto LABEL_14;
    }
    v59 = *(id *)(v58 + 32);
  }
  v24 = &off_100287000;
  objc_msgSend(v59, "code");
  v60 = Int._bridgeToObjectiveC()().super.super.isa;
  swift_beginAccess(&v103, &v104, 33, 0);
  v61 = swift_isUniquelyReferenced_nonNull_native(v103);
  v102 = v103;
  v3 = 0x8000000000000000;
  v103 = 0x8000000000000000;
  sub_10001FC90((uint64_t)v60, 0xD000000000000014, 0x800000010020B7F0, v61);
  v62 = v103;
  v103 = v102;
  swift_bridgeObjectRelease(v62);
  swift_endAccess(&v104);
  v2 = &off_100287000;
  result = objc_msgSend(v59, "domain");
  if (!result)
  {
    __break(1u);
    goto LABEL_56;
  }
  v63 = (uint64_t)result;
  swift_beginAccess(&v103, &v104, 33, 0);
  v64 = swift_isUniquelyReferenced_nonNull_native(v103);
  v102 = v103;
  v103 = 0x8000000000000000;
  sub_10001FC90(v63, 0xD000000000000016, 0x800000010020B810, v64);
  v65 = v103;
  v103 = v102;
  swift_bridgeObjectRelease(v65);
  swift_endAccess(&v104);

  v58 = *v56;
  if ((unint64_t)*v56 >> 62)
    goto LABEL_41;
  if (*(uint64_t *)((v58 & 0xFFFFFFFFFFFFF8) + 0x10) < 2)
    goto LABEL_25;
LABEL_14:
  v66 = *v56;
  if ((*v56 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain(*v56);
    v67 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(1, v66);
    swift_bridgeObjectRelease(v66);
  }
  else
  {
    if (*(_QWORD *)((v66 & 0xFFFFFFFFFFFFF8) + 0x10) < 2uLL)
    {
      __break(1u);
LABEL_48:
      if (v66 < 0)
        v98 = v66;
      else
        v98 = v66 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v66);
      v99 = _CocoaArrayWrapper.endIndex.getter(v98);
      swift_bridgeObjectRelease(v66);
      if (v99 < 3)
        goto LABEL_25;
LABEL_20:
      v74 = *v56;
      if ((*v56 & 0xC000000000000001) != 0)
      {
        swift_bridgeObjectRetain(*v56);
        v75 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(2, v74);
        swift_bridgeObjectRelease(v74);
      }
      else
      {
        if (*(_QWORD *)((v74 & 0xFFFFFFFFFFFFF8) + 0x10) < 3uLL)
          __break(1u);
        v75 = *(id *)(v74 + 48);
      }
      objc_msgSend(v75, v24[285]);
      v76 = Int._bridgeToObjectiveC()().super.super.isa;
      swift_beginAccess(&v103, &v104, 33, 0);
      v77 = swift_isUniquelyReferenced_nonNull_native(v103);
      v102 = v103;
      v103 = 0x8000000000000000;
      sub_10001FC90((uint64_t)v76, 0xD000000000000014, 0x800000010020B870, v77);
      v78 = v103;
      v103 = v102;
      swift_bridgeObjectRelease(v78);
      swift_endAccess(&v104);
      result = objc_msgSend(v75, v2[286]);
      if (result)
      {
        v79 = (uint64_t)result;
        swift_beginAccess(&v103, &v104, 33, 0);
        v80 = swift_isUniquelyReferenced_nonNull_native(v103);
        v102 = v103;
        v103 = 0x8000000000000000;
        sub_10001FC90(v79, 0xD000000000000016, 0x800000010020B890, v80);
        v81 = v103;
        v103 = v102;
        swift_bridgeObjectRelease(v81);
        swift_endAccess(&v104);

        goto LABEL_25;
      }
LABEL_57:
      __break(1u);
      return result;
    }
    v67 = *(id *)(v66 + 40);
  }
  objc_msgSend(v67, v24[285]);
  v68 = Int._bridgeToObjectiveC()().super.super.isa;
  swift_beginAccess(&v103, &v104, 33, 0);
  v69 = swift_isUniquelyReferenced_nonNull_native(v103);
  v102 = v103;
  v103 = v3;
  sub_10001FC90((uint64_t)v68, 0xD000000000000014, 0x800000010020B830, v69);
  v70 = v103;
  v103 = v102;
  swift_bridgeObjectRelease(v70);
  swift_endAccess(&v104);
  result = objc_msgSend(v67, v2[286]);
  if (!result)
  {
LABEL_56:
    __break(1u);
    goto LABEL_57;
  }
  v71 = (uint64_t)result;
  swift_beginAccess(&v103, &v104, 33, 0);
  v72 = swift_isUniquelyReferenced_nonNull_native(v103);
  v102 = v103;
  v103 = v3;
  sub_10001FC90(v71, 0xD000000000000016, 0x800000010020B850, v72);
  v73 = v103;
  v103 = v102;
  swift_bridgeObjectRelease(v73);
  swift_endAccess(&v104);

  v66 = *v56;
  if ((unint64_t)*v56 >> 62)
    goto LABEL_48;
  if (*(uint64_t *)((v66 & 0xFFFFFFFFFFFFF8) + 0x10) >= 3)
    goto LABEL_20;
LABEL_25:
  if (qword_10028ADD8 != -1)
    swift_once(&qword_10028ADD8, sub_100046D78);
  v82 = type metadata accessor for Logger(0);
  sub_100005288(v82, (uint64_t)qword_1002A8A08);
  v83 = v4;
  v84 = Logger.logObject.getter(v83);
  v86 = static os_log_type_t.default.getter(v85);
  if (os_log_type_enabled(v84, v86))
  {
    v101 = (int)v5;
    v87 = (uint8_t *)swift_slowAlloc(12, -1);
    v88 = (_QWORD *)swift_slowAlloc(8, -1);
    *(_DWORD *)v87 = 138412290;
    v5 = *(Class *)((char *)&v83->isa + qword_1002965E8);
    if (v5)
    {
      v104 = *(uint64_t *)((char *)&v83->isa + qword_1002965E8);
      v89 = v5;
    }
    else
    {
      v104 = 0;
    }
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v104, &v105);
    *v88 = v5;

    _os_log_impl((void *)&_mh_execute_header, v84, v86, "InheritanceHealthCheckAnalyticsEvent: reporting claimCode error %@", v87, 0xCu);
    v90 = sub_1000080B4((uint64_t *)&unk_10028BC20);
    swift_arrayDestroy(v88, 1, v90);
    swift_slowDealloc(v88, -1, -1);
    swift_slowDealloc(v87, -1, -1);
    LOBYTE(v5) = v101;
  }
  else
  {

    v84 = v83;
  }

  v91 = *(Class *)((char *)&v83->isa + qword_1002965E8);
  swift_beginAccess(&v103, &v104, 0, 0);
  v92 = v103;
  v93 = v91;
  swift_bridgeObjectRetain(v92);
  dispatch thunk of AAFTimedAnalyticsEvent.completeEvent(withSuccess:error:additionalData:)(v5 & 1, v91, v92);

  swift_bridgeObjectRelease(v92);
  return (id)swift_bridgeObjectRelease(v103);
}

void sub_1001A4D44()
{
  _swift_stdlib_reportUnimplementedInitializer("appleaccountd.InheritanceHealthCheckAnalyticsEvent", 50, "init(eventName:initialData:)", 28, 0);
  __break(1u);
}

uint64_t sub_1001A4D70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + qword_1002965E0));

  v1 = v0 + qword_100296638;
  v2 = sub_1000080B4(&qword_10028F658);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
}

id sub_1001A4DD0()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for InheritanceHealthCheckAnalyticsEvent(0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_1001A4E04(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + qword_1002965E0));

  v2 = a1 + qword_100296638;
  v3 = sub_1000080B4(&qword_10028F658);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
}

uint64_t sub_1001A4E68()
{
  return type metadata accessor for InheritanceHealthCheckAnalyticsEvent(0);
}

uint64_t (*sub_1001A4E70(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + qword_1002965E0, a1, 33, 0);
  return j__swift_endAccess;
}

uint64_t sub_1001A4EB4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_100006F58((_QWORD *)(v0 + 16));

  sub_100006F58((_QWORD *)(v0 + 64));
  sub_100006F58((_QWORD *)(v0 + 104));
  sub_100006F58((_QWORD *)(v0 + 144));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 184));
  v1 = v0 + OBJC_IVAR____TtC13appleaccountd21IdentityDaemonService__identityScheduler;
  v2 = sub_1000080B4((uint64_t *)&unk_100296860);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1001A4F38()
{
  return type metadata accessor for IdentityDaemonService(0);
}

uint64_t type metadata accessor for IdentityDaemonService(uint64_t a1)
{
  uint64_t result;

  result = qword_100296720;
  if (!qword_100296720)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for IdentityDaemonService);
  return result;
}

void sub_1001A4F7C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[7];

  v4[0] = "(";
  v4[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[2] = "(";
  v4[3] = "(";
  v4[4] = "(";
  v4[5] = &unk_100220840;
  sub_1001A5010(319);
  if (v3 <= 0x3F)
  {
    v4[6] = *(_QWORD *)(v2 - 8) + 64;
    swift_updateClassMetadata2(a1, 256, 7, v4, a1 + 80);
  }
}

void sub_1001A5010(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100296730[0])
  {
    v2 = sub_10000D908(&qword_100294AE8);
    v3 = type metadata accessor for Dependency(a1, v2);
    if (!v4)
      atomic_store(v3, qword_100296730);
  }
}

uint64_t sub_1001A5068(_QWORD *a1)
{
  char *v1;
  uint64_t v2;
  char *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  char v21;
  char v22;
  char v23;
  char v24;

  v3 = v1;
  v5 = sub_1000080B4(&qword_100296910);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a1[3];
  v11 = a1[4];
  sub_10000732C(a1, v10);
  v12 = sub_1001A5BDC();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for InheritanceInvitationResponseMessage.CodingKeys, &type metadata for InheritanceInvitationResponseMessage.CodingKeys, v12, v10, v11);
  v24 = *v3;
  v23 = 0;
  v13 = sub_1000C1CC8();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v24, &v23, v5, &type metadata for InheritanceMessageType, v13);
  if (!v2)
  {
    v14 = type metadata accessor for InheritanceInvitationResponseMessage(0);
    v15 = &v3[*(int *)(v14 + 20)];
    v22 = 1;
    v16 = type metadata accessor for UUID(0);
    v17 = sub_100005150((unint64_t *)&unk_10028DC20, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v15, &v22, v5, v16, v17);
    v18 = v3[*(int *)(v14 + 24)];
    v21 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v18, &v21, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

uint64_t sub_1001A5204@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  _QWORD *v37;
  char v38;
  char v39;
  char v40;
  uint64_t v41;

  v32 = a2;
  v3 = type metadata accessor for UUID(0);
  v33 = *(_QWORD *)(v3 - 8);
  v34 = v3;
  __chkstk_darwin(v3, v4);
  v6 = (uint64_t *)((char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v36 = sub_1000080B4(&qword_100296920);
  v7 = *(_QWORD *)(v36 - 8);
  __chkstk_darwin(v36, v8);
  v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for InheritanceInvitationResponseMessage(0);
  __chkstk_darwin(v11, v12);
  v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = a1[3];
  v16 = a1[4];
  sub_10000732C(a1, v15);
  v17 = sub_1001A5BDC();
  v35 = v10;
  v18 = v37;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for InheritanceInvitationResponseMessage.CodingKeys, &type metadata for InheritanceInvitationResponseMessage.CodingKeys, v17, v15, v16);
  if (v18)
    return sub_100006F58(a1);
  v31 = v11;
  v37 = a1;
  v19 = v7;
  v20 = v33;
  v21 = v34;
  v40 = 0;
  v22 = sub_1000C1C40();
  v23 = v35;
  v24 = v36;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v41, &type metadata for InheritanceMessageType, &v40, v36, &type metadata for InheritanceMessageType, v22);
  v25 = (uint64_t)v14;
  *v14 = v41;
  v39 = 1;
  v26 = sub_100005150((unint64_t *)&unk_10028BBB0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  KeyedDecodingContainer.decode<A>(_:forKey:)(v6, v21, &v39, v24, v21, v26);
  (*(void (**)(_BYTE *, _QWORD *, uint64_t))(v20 + 32))(&v14[*(int *)(v31 + 20)], v6, v21);
  v38 = 2;
  v27 = KeyedDecodingContainer.decode(_:forKey:)(&v38, v24);
  (*(void (**)(char *, uint64_t))(v19 + 8))(v23, v24);
  v28 = v32;
  *(_BYTE *)(v25 + *(int *)(v31 + 24)) = v27 & 1;
  sub_10012FFE8(v25, v28);
  sub_100006F58(v37);
  return sub_1001A5C20(v25);
}

uint64_t sub_1001A54BC()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x69636966656E6562;
  if (*v0 != 1)
    v1 = 0x6465747065636361;
  if (*v0)
    return v1;
  else
    return 1701869940;
}

uint64_t sub_1001A551C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1001A5E00(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1001A5540(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001A5BDC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001A5568(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001A5BDC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001A5590@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1001A5204(a1, a2);
}

uint64_t sub_1001A55A4(_QWORD *a1)
{
  return sub_1001A5068(a1);
}

uint64_t sub_1001A55B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  Swift::String v6;
  uint64_t v7;
  uint64_t v8;
  Swift::String v9;
  void *object;
  Swift::String v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v16;
  unint64_t v17;

  v17 = 0xE000000000000000;
  _StringGuts.grow(_:)(37);
  v1 = type metadata accessor for InheritanceInvitationResponseMessage(0);
  v16 = v1;
  v2 = sub_1000080B4(&qword_100296870);
  v3 = String.init<A>(describing:)(&v16, v2);
  v5 = v4;
  swift_bridgeObjectRelease(0xE000000000000000);
  v16 = v3;
  v17 = v5;
  v6._object = (void *)0x800000010020BE00;
  v6._countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v6);
  v7 = type metadata accessor for UUID(0);
  v8 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v9._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v7, v8);
  object = v9._object;
  String.append(_:)(v9);
  swift_bridgeObjectRelease(object);
  v11._countAndFlagsBits = 0x657470656363610ALL;
  v11._object = (void *)0xEC000000202D2064;
  String.append(_:)(v11);
  if (*(_BYTE *)(v0 + *(int *)(v1 + 24)))
    v12 = 1702195828;
  else
    v12 = 0x65736C6166;
  if (*(_BYTE *)(v0 + *(int *)(v1 + 24)))
    v13 = 0xE400000000000000;
  else
    v13 = 0xE500000000000000;
  v14 = v13;
  String.append(_:)(*(Swift::String *)&v12);
  swift_bridgeObjectRelease(v13);
  return v16;
}

uint64_t type metadata accessor for InheritanceInvitationResponseMessage(uint64_t a1)
{
  uint64_t result;

  result = qword_1002968D0;
  if (!qword_1002968D0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for InheritanceInvitationResponseMessage);
  return result;
}

_QWORD *sub_1001A575C(_BYTE *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  _BYTE *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v11);
  }
  else
  {
    *a1 = *(_BYTE *)a2;
    v7 = *(int *)(a3 + 20);
    v8 = &a1[v7];
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for UUID(0);
    (*(void (**)(_BYTE *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
    *((_BYTE *)v4 + *(int *)(a3 + 24)) = *((_BYTE *)a2 + *(int *)(a3 + 24));
  }
  return v4;
}

_BYTE *sub_1001A5800(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for UUID(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
  a1[*(int *)(a3 + 24)] = a2[*(int *)(a3 + 24)];
  return a1;
}

_BYTE *sub_1001A5878(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for UUID(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  a1[*(int *)(a3 + 24)] = a2[*(int *)(a3 + 24)];
  return a1;
}

_BYTE *sub_1001A58F0(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for UUID(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  a1[*(int *)(a3 + 24)] = a2[*(int *)(a3 + 24)];
  return a1;
}

_BYTE *sub_1001A5968(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for UUID(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  a1[*(int *)(a3 + 24)] = a2[*(int *)(a3 + 24)];
  return a1;
}

uint64_t sub_1001A59E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001A59EC);
}

uint64_t sub_1001A59EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 20), a2, v6);
  v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 24));
  if (v9 >= 2)
    return ((v9 + 2147483646) & 0x7FFFFFFF) + 1;
  else
    return 0;
}

uint64_t sub_1001A5A7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001A5A88);
}

uint64_t sub_1001A5A88(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + *(int *)(a4 + 20), a2, a2, result);
  *(_BYTE *)(a1 + *(int *)(a4 + 24)) = a2 + 1;
  return result;
}

uint64_t sub_1001A5B04(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = &unk_1002208D8;
  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    v4[2] = &unk_1002208F0;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_1001A5B80(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_100005150((unint64_t *)&unk_100297030, type metadata accessor for InheritanceInvitationResponseMessage, (uint64_t)&unk_100220924);
  result = sub_100005150(&qword_100290E20, type metadata accessor for InheritanceInvitationResponseMessage, (uint64_t)&unk_10022094C);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1001A5BDC()
{
  unint64_t result;

  result = qword_100296918;
  if (!qword_100296918)
  {
    result = swift_getWitnessTable(&unk_100220A38, &type metadata for InheritanceInvitationResponseMessage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100296918);
  }
  return result;
}

uint64_t sub_1001A5C20(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for InheritanceInvitationResponseMessage(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t storeEnumTagSinglePayload for InheritanceInvitationResponseMessage.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1001A5CA8 + 4 * byte_100220865[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1001A5CDC + 4 * byte_100220860[v4]))();
}

uint64_t sub_1001A5CDC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001A5CE4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001A5CECLL);
  return result;
}

uint64_t sub_1001A5CF8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001A5D00);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1001A5D04(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001A5D0C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for InheritanceInvitationResponseMessage.CodingKeys()
{
  return &type metadata for InheritanceInvitationResponseMessage.CodingKeys;
}

unint64_t sub_1001A5D2C()
{
  unint64_t result;

  result = qword_100296928;
  if (!qword_100296928)
  {
    result = swift_getWitnessTable(&unk_100220A10, &type metadata for InheritanceInvitationResponseMessage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100296928);
  }
  return result;
}

unint64_t sub_1001A5D74()
{
  unint64_t result;

  result = qword_100296930;
  if (!qword_100296930)
  {
    result = swift_getWitnessTable(&unk_100220980, &type metadata for InheritanceInvitationResponseMessage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100296930);
  }
  return result;
}

unint64_t sub_1001A5DBC()
{
  unint64_t result;

  result = qword_100296938;
  if (!qword_100296938)
  {
    result = swift_getWitnessTable(&unk_1002209A8, &type metadata for InheritanceInvitationResponseMessage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100296938);
  }
  return result;
}

uint64_t sub_1001A5E00(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  char v8;

  if (a1 == 1701869940 && a2 == 0xE400000000000000)
  {
    v5 = 0xE400000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1701869940, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x69636966656E6562 && a2 == 0xED00004449797261)
  {
    v7 = 0xED00004449797261;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x69636966656E6562, 0xED00004449797261, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x6465747065636361 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease(0xE800000000000000);
    return 2;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6465747065636361, 0xE800000000000000, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_1001A5F68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC13appleaccountd28PostInstallActivityScheduler__xpcActivityScheduler;
  v2 = sub_1000080B4((uint64_t *)&unk_10028BB70);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_release(*(_QWORD *)(v0
                          + OBJC_IVAR____TtC13appleaccountd28PostInstallActivityScheduler____lazy_storage___activityProvider));
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1001A5FCC()
{
  return type metadata accessor for PostInstallActivityScheduler(0);
}

uint64_t type metadata accessor for PostInstallActivityScheduler(uint64_t a1)
{
  uint64_t result;

  result = qword_100296978;
  if (!qword_100296978)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for PostInstallActivityScheduler);
  return result;
}

void sub_1001A6010(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  sub_100010298(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = "\b";
    swift_updateClassMetadata2(a1, 256, 2, v4, a1 + 80);
  }
}

void sub_1001A6084(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  id v12;
  Class isa;
  NSString v14;
  id v15;
  NSObject *v16;
  NSObject *v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  NSObject *v21;
  uint64_t v22;
  uint64_t v23;
  NSObject **v25;
  id v26;
  NSObject *v27;
  uint64_t v28;

  if (qword_10028ADC8 != -1)
    swift_once(&qword_10028ADC8, sub_100046D2C);
  v7 = type metadata accessor for Logger(0);
  v8 = sub_100005288(v7, (uint64_t)qword_1002A89D8);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.debug.getter(v9);
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Initializing verifier", v11, 2u);
    swift_slowDealloc(v11, -1, -1);
  }

  v27 = 0;
  v12 = objc_allocWithZone((Class)SPAKE2Verifier);
  swift_bridgeObjectRetain(a3);
  sub_10000F450(a1, a2);
  isa = Data._bridgeToObjectiveC()().super.isa;
  v14 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a3);
  v15 = objc_msgSend(v12, "initWithSalt:code:error:", isa, v14, &v27);
  sub_10000F494(a1, a2);

  v16 = v27;
  if (v27)
  {
    v17 = v27;
    v18 = Logger.logObject.getter(v17);
    v19 = static os_log_type_t.error.getter(v18);
    if (os_log_type_enabled(v18, v19))
    {
      v26 = v15;
      v20 = (uint8_t *)swift_slowAlloc(12, -1);
      v25 = (NSObject **)swift_slowAlloc(8, -1);
      *(_DWORD *)v20 = 138412290;
      v27 = v17;
      v21 = v17;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, &v28);
      *v25 = v16;

      v15 = v26;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "SPAKE verifier creation failed with error: %@", v20, 0xCu);
      v22 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v25, 1, v22);
      swift_slowDealloc(v25, -1, -1);
      swift_slowDealloc(v20, -1, -1);
    }
    else
    {

      v18 = v17;
    }

    swift_willThrow(v23);
  }
  else
  {
    a4[3] = sub_1000067D4(0, &qword_100296B10, SPAKE2Verifier_ptr);
    a4[4] = &off_10026D4D8;
    a4[5] = &off_10026D518;
    *a4 = v15;
  }
}

void sub_1001A63B0(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  id v12;
  Class isa;
  NSString v14;
  id v15;
  NSObject *v16;
  NSObject *v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  NSObject *v21;
  uint64_t v22;
  uint64_t v23;
  NSObject **v25;
  id v26;
  NSObject *v27;
  uint64_t v28;

  if (qword_10028ADC8 != -1)
    swift_once(&qword_10028ADC8, sub_100046D2C);
  v7 = type metadata accessor for Logger(0);
  v8 = sub_100005288(v7, (uint64_t)qword_1002A89D8);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.debug.getter(v9);
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Initializing prover", v11, 2u);
    swift_slowDealloc(v11, -1, -1);
  }

  v27 = 0;
  v12 = objc_allocWithZone((Class)SPAKE2Prover);
  swift_bridgeObjectRetain(a3);
  sub_10000F450(a1, a2);
  isa = Data._bridgeToObjectiveC()().super.isa;
  v14 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a3);
  v15 = objc_msgSend(v12, "initWithSalt:code:error:", isa, v14, &v27);
  sub_10000F494(a1, a2);

  v16 = v27;
  if (v27)
  {
    v17 = v27;
    v18 = Logger.logObject.getter(v17);
    v19 = static os_log_type_t.error.getter(v18);
    if (os_log_type_enabled(v18, v19))
    {
      v26 = v15;
      v20 = (uint8_t *)swift_slowAlloc(12, -1);
      v25 = (NSObject **)swift_slowAlloc(8, -1);
      *(_DWORD *)v20 = 138412290;
      v27 = v17;
      v21 = v17;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, &v28);
      *v25 = v16;

      v15 = v26;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "SPAKE prover creation failed with error: %@", v20, 0xCu);
      v22 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v25, 1, v22);
      swift_slowDealloc(v25, -1, -1);
      swift_slowDealloc(v20, -1, -1);
    }
    else
    {

      v18 = v17;
    }

    swift_willThrow(v23);
  }
  else
  {
    a4[3] = sub_1000067D4(0, &qword_100296B08, SPAKE2Prover_ptr);
    a4[4] = &off_10026D530;
    *a4 = v15;
  }
}

void *sub_1001A66D0()
{
  return sub_1001A6748((SEL *)&selRef_getMsg1WithError_);
}

id sub_1001A66F8(uint64_t a1, uint64_t a2)
{
  return sub_1001A6830(a1, a2, (SEL *)&selRef_processMsg1_error_);
}

void *sub_1001A6720()
{
  return sub_1001A6748((SEL *)&selRef_getMsg2WithError_);
}

void *sub_1001A6748(SEL *a1)
{
  void *v1;
  id v2;
  id v3;
  void *v4;
  id v6;

  v6 = 0;
  v2 = objc_msgSend(v1, *a1, &v6);
  v3 = v6;
  if (v2)
  {
    v4 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)(v2);

  }
  else
  {
    v4 = v3;
    _convertNSErrorToError(_:)(v3);

    swift_willThrow();
  }
  return v4;
}

id sub_1001A6808(uint64_t a1, uint64_t a2)
{
  return sub_1001A6830(a1, a2, (SEL *)&selRef_processMsg2_error_);
}

id sub_1001A6830(uint64_t a1, uint64_t a2, SEL *a3)
{
  void *v3;
  Class isa;
  id v6;
  id v8;
  id v9;

  isa = Data._bridgeToObjectiveC()().super.isa;
  v9 = 0;
  LODWORD(a3) = objc_msgSend(v3, *a3, isa, &v9);

  v6 = v9;
  if ((_DWORD)a3)
    return v9;
  v8 = v9;
  _convertNSErrorToError(_:)(v6);

  return (id)swift_willThrow();
}

id sub_1001A68E8()
{
  id *v0;

  return objc_msgSend(*v0, "isVerified");
}

void *sub_1001A6908(uint64_t a1, uint64_t a2)
{
  return sub_1001A6978(a1, a2, (SEL *)&selRef_decryptMessage_error_);
}

void *sub_1001A6930(uint64_t a1, uint64_t a2)
{
  return sub_1001A6978(a1, a2, (SEL *)&selRef_encryptMessage_error_);
}

uint64_t type metadata accessor for CustodianSPAKEFactory()
{
  return objc_opt_self(_TtC13appleaccountd21CustodianSPAKEFactory);
}

void *sub_1001A6978(uint64_t a1, uint64_t a2, SEL *a3)
{
  void *v3;
  Class isa;
  id v6;
  id v7;
  void *v8;
  id v10;

  isa = Data._bridgeToObjectiveC()().super.isa;
  v10 = 0;
  v6 = objc_msgSend(v3, *a3, isa, &v10);

  v7 = v10;
  if (v6)
  {
    v8 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)(v6);

  }
  else
  {
    v8 = v7;
    _convertNSErrorToError(_:)(v7);

    swift_willThrow();
  }
  return v8;
}

uint64_t sub_1001A6A4C()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  id v5;
  NSObject *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  NSObject *v11;
  NSObject *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  NSObject *v16;
  uint64_t v17;
  uint64_t v18;
  NSObject **v20;
  NSObject *v21;
  uint64_t v22;

  if (qword_10028ADC8 != -1)
    swift_once(&qword_10028ADC8, sub_100046D2C);
  v0 = type metadata accessor for Logger(0);
  v1 = sub_100005288(v0, (uint64_t)qword_1002A89D8);
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.debug.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Generating code", v4, 2u);
    swift_slowDealloc(v4, -1, -1);
  }

  v21 = 0;
  v5 = objc_msgSend((id)objc_opt_self(SPAKE2Verifier), "generateCodeWithError:", &v21);
  v6 = v21;
  v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
  v9 = v8;
  v10 = v6;

  if (v10)
  {
    v11 = v10;
    swift_bridgeObjectRelease(v9);
    v12 = v11;
    v13 = Logger.logObject.getter(v12);
    v14 = static os_log_type_t.error.getter(v13);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc(12, -1);
      v20 = (NSObject **)swift_slowAlloc(8, -1);
      *(_DWORD *)v15 = 138412290;
      v21 = v12;
      v16 = v12;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22);
      *v20 = v6;

      _os_log_impl((void *)&_mh_execute_header, v13, v14, "SPAKE verifier code creation failed with error: %@", v15, 0xCu);
      v17 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v20, 1, v17);
      swift_slowDealloc(v20, -1, -1);
      swift_slowDealloc(v15, -1, -1);
    }
    else
    {

      v13 = v12;
    }

    swift_willThrow(v18);
  }
  return v7;
}

id sub_1001A6D04(uint64_t a1, uint64_t a2)
{
  return sub_1001A66F8(a1, a2);
}

id sub_1001A6D18(uint64_t a1, uint64_t a2)
{
  return sub_1001A6808(a1, a2);
}

void *sub_1001A6D2C(uint64_t a1, uint64_t a2)
{
  return sub_1001A6908(a1, a2);
}

void *sub_1001A6D40(uint64_t a1, uint64_t a2)
{
  return sub_1001A6930(a1, a2);
}

void *sub_1001A6D54()
{
  return sub_1001A66D0();
}

void *sub_1001A6D68()
{
  return sub_1001A6720();
}

uint64_t sub_1001A6D7C(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  _BOOL4 v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  os_log_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(char *, uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  void (**v54)(uint64_t);
  void (*v55)(char *, uint64_t);
  uint64_t v57;
  os_log_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  void (*v63)(char *, uint64_t);
  void (*v64)(char *, uint64_t, uint64_t);
  uint64_t updated;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75[4];
  uint64_t v76[6];

  v62 = a2;
  v5 = sub_1000080B4(&qword_100296C18);
  v68 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5, v6);
  v66 = (char *)&v57 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  updated = type metadata accessor for CustodianStatusUpdateRequest(0);
  v69 = *(_QWORD *)(updated - 8);
  v8 = *(_QWORD *)(v69 + 64);
  v10 = __chkstk_darwin(updated, v9);
  v71 = (uint64_t)&v57 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10, v11);
  v70 = (char *)&v57 - v12;
  v13 = type metadata accessor for UUID(0);
  v14 = *(_QWORD *)(v13 - 8);
  v16 = __chkstk_darwin(v13, v15);
  v72 = (char *)&v57 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v16, v18);
  v21 = (char *)&v57 - v20;
  __chkstk_darwin(v19, v22);
  v24 = (char *)&v57 - v23;
  v25 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
  v25((char *)&v57 - v23, a1 + OBJC_IVAR____TtC13appleaccountd34CustodianInvitationResponseMessage_custodianID, v13);
  if (qword_10028ADC8 != -1)
    swift_once(&qword_10028ADC8, sub_100046D2C);
  v26 = type metadata accessor for Logger(0);
  sub_100005288(v26, (uint64_t)qword_1002A89D8);
  v64 = v25;
  v25(v21, (uint64_t)v24, v13);
  swift_retain_n(a1, 2);
  v27 = swift_bridgeObjectRetain_n(a3, 2);
  v28 = Logger.logObject.getter(v27);
  v29 = static os_log_type_t.info.getter();
  v61 = v29;
  v30 = os_log_type_enabled(v28, v29);
  v73 = v24;
  if (v30)
  {
    v31 = swift_slowAlloc(28, -1);
    v60 = v8;
    v32 = v31;
    v59 = swift_slowAlloc(64, -1);
    v76[0] = v59;
    *(_DWORD *)v32 = 136315650;
    v33 = sub_10002A848();
    v58 = v28;
    v34 = dispatch thunk of CustomStringConvertible.description.getter(v13, v33);
    v36 = v35;
    v74 = sub_1001DEF4C(v34, v35, v76);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, v75);
    swift_bridgeObjectRelease(v36);
    v63 = *(void (**)(char *, uint64_t))(v14 + 8);
    v63(v21, v13);
    *(_WORD *)(v32 + 12) = 1024;
    LODWORD(v36) = *(unsigned __int8 *)(a1 + OBJC_IVAR____TtC13appleaccountd34CustodianInvitationResponseMessage_accepted);
    swift_release(a1);
    LODWORD(v74) = v36;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, (char *)&v74 + 4);
    swift_release(a1);
    *(_WORD *)(v32 + 18) = 2080;
    swift_bridgeObjectRetain(a3);
    v74 = sub_1001DEF4C(v62, a3, v76);
    v24 = v73;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, v75);
    swift_bridgeObjectRelease_n(a3, 3);
    v37 = v58;
    _os_log_impl((void *)&_mh_execute_header, v58, (os_log_type_t)v61, "Custodian invitation %s was accepted %{BOOL}d by %s", (uint8_t *)v32, 0x1Cu);
    v38 = v59;
    swift_arrayDestroy(v59, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v38, -1, -1);
    v39 = v32;
    v8 = v60;
    swift_slowDealloc(v39, -1, -1);

  }
  else
  {
    swift_release(a1);
    v63 = *(void (**)(char *, uint64_t))(v14 + 8);
    v63(v21, v13);

    swift_bridgeObjectRelease_n(a3, 2);
    swift_release(a1);
  }
  if (*(_BYTE *)(a1 + OBJC_IVAR____TtC13appleaccountd34CustodianInvitationResponseMessage_accepted))
    v40 = 2;
  else
    v40 = 4;
  v41 = (uint64_t)v70;
  v42 = v64;
  v64(v70, (uint64_t)v24, v13);
  v43 = updated;
  *(_QWORD *)(v41 + *(int *)(updated + 20)) = v40;
  *(_BYTE *)(v41 + *(int *)(v43 + 24)) = 1;
  v44 = v68;
  v45 = v66;
  (*(void (**)(char *, uint64_t, uint64_t))(v68 + 16))(v66, v67 + OBJC_IVAR____TtC13appleaccountd31DaemonInvitationResponseHandler__statusUpdater, v5);
  Dependency.wrappedValue.getter(v76, v5);
  (*(void (**)(char *, uint64_t))(v44 + 8))(v45, v5);
  v46 = *sub_10000732C(v76, v76[3]);
  sub_100006CA4(v46 + 16, (uint64_t)&v74);
  sub_10000732C(&v74, v75[2]);
  v47 = (uint64_t)v72;
  v42(v72, v41, v13);
  v48 = v71;
  sub_1001A7730(v41, v71);
  v49 = *(unsigned __int8 *)(v69 + 80);
  v50 = (v49 + 16) & ~v49;
  v51 = (v8 + v50 + 7) & 0xFFFFFFFFFFFFFFF8;
  v52 = (v51 + 15) & 0xFFFFFFFFFFFFFFF8;
  v53 = swift_allocObject(&unk_10026D5C8, v52 + 16, v49 | 7);
  sub_1001A7814(v48, v53 + v50);
  *(_QWORD *)(v53 + v51) = v46;
  v54 = (void (**)(uint64_t))(v53 + v52);
  *v54 = sub_1001A7328;
  v54[1] = 0;
  swift_retain(v46);
  sub_1001BF958(v47, (uint64_t)sub_1001A7858, v53);
  swift_release(v53);
  v55 = v63;
  v63((char *)v47, v13);
  sub_100006F58(&v74);
  sub_1001A78B8(v41);
  v55(v73, v13);
  return sub_100006F58(v76);
}

void sub_1001A7328(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v2 = sub_1000080B4(&qword_10028D5D0);
  __chkstk_darwin(v2, v3);
  v5 = (uint64_t *)((char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1001A78F4(a1, (uint64_t)v5);
  if (swift_getEnumCaseMultiPayload(v5, v2) == 1)
  {
    v6 = *v5;
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v7 = type metadata accessor for Logger(0);
    sub_100005288(v7, (uint64_t)qword_1002A89D8);
    v8 = swift_errorRetain(v6);
    v9 = Logger.logObject.getter(v8);
    v10 = static os_log_type_t.error.getter(v9);
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc(12, -1);
      v12 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v11 = 138412290;
      v13 = _convertErrorToNSError(_:)(v6);
      v21 = v13;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22);
      *v12 = v13;
      swift_errorRelease(v6);
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Error updating status %@", v11, 0xCu);
      v14 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v12, 1, v14);
      swift_slowDealloc(v12, -1, -1);
      swift_slowDealloc(v11, -1, -1);

      swift_errorRelease(v6);
    }
    else
    {
      swift_errorRelease(v6);
      swift_errorRelease(v6);

    }
  }
  else
  {
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v15 = type metadata accessor for Logger(0);
    v16 = sub_100005288(v15, (uint64_t)qword_1002A89D8);
    v17 = Logger.logObject.getter(v16);
    v18 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Status update successful!", v19, 2u);
      swift_slowDealloc(v19, -1, -1);
    }

    sub_1001A793C((uint64_t)v5);
  }
}

uint64_t sub_1001A75D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC13appleaccountd31DaemonInvitationResponseHandler__statusUpdater;
  v2 = sub_1000080B4(&qword_100296C18);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1001A7628()
{
  return type metadata accessor for DaemonInvitationResponseHandler(0);
}

uint64_t type metadata accessor for DaemonInvitationResponseHandler(uint64_t a1)
{
  uint64_t result;

  result = qword_100296B48;
  if (!qword_100296B48)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for DaemonInvitationResponseHandler);
  return result;
}

void sub_1001A766C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  sub_1001A76D8(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(v2 - 8) + 64;
    swift_updateClassMetadata2(a1, 256, 1, &v4, a1 + 80);
  }
}

void sub_1001A76D8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100296B58)
  {
    v2 = sub_10000D908((uint64_t *)&unk_100296B60);
    v3 = type metadata accessor for Dependency(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100296B58);
  }
}

uint64_t sub_1001A7730(uint64_t a1, uint64_t a2)
{
  uint64_t updated;

  updated = type metadata accessor for CustodianStatusUpdateRequest(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(updated - 8) + 16))(a2, a1, updated);
  return a2;
}

uint64_t sub_1001A7774()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(type metadata accessor for CustodianStatusUpdateRequest(0) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 16) & ~v2;
  v4 = v2 | 7;
  v5 = (*(_QWORD *)(v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = (v5 + 15) & 0xFFFFFFFFFFFFFFF8;
  v7 = v0 + v3;
  v8 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  swift_release(*(_QWORD *)(v0 + v5));
  swift_release(*(_QWORD *)(v0 + v6 + 8));
  return swift_deallocObject(v0, v6 + 16, v4);
}

uint64_t sub_1001A7814(uint64_t a1, uint64_t a2)
{
  uint64_t updated;

  updated = type metadata accessor for CustodianStatusUpdateRequest(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(updated - 8) + 32))(a2, a1, updated);
  return a2;
}

uint64_t sub_1001A7858(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v3 = *(_QWORD *)(type metadata accessor for CustodianStatusUpdateRequest(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_1001DA26C(a1, v1 + v4, *(_QWORD *)(v1 + v5), *(_QWORD **)(v1 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v1 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_1001A78B8(uint64_t a1)
{
  uint64_t updated;

  updated = type metadata accessor for CustodianStatusUpdateRequest(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(updated - 8) + 8))(a1, updated);
  return a1;
}

uint64_t sub_1001A78F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000080B4(&qword_10028D5D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001A793C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1000080B4(&qword_10028D5D0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1001A797C(char a1, uint64_t a2, unint64_t a3)
{
  Swift::String v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  Swift::String v10;
  uint64_t v11;
  Swift::String v12;
  void *object;
  _QWORD v15[2];
  uint64_t v16;
  unint64_t v17;

  v16 = 0;
  v17 = 0xE000000000000000;
  _StringGuts.grow(_:)(55);
  v6._countAndFlagsBits = 0xD000000000000022;
  v6._object = (void *)0x800000010020F470;
  String.append(_:)(v6);
  if ((a1 & 1) != 0)
    v7 = 1702195828;
  else
    v7 = 0x65736C6166;
  if ((a1 & 1) != 0)
    v8 = 0xE400000000000000;
  else
    v8 = 0xE500000000000000;
  v9 = v8;
  String.append(_:)(*(Swift::String *)&v7);
  swift_bridgeObjectRelease(v8);
  v10._object = (void *)0x800000010020F4A0;
  v10._countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v10);
  v15[0] = a2;
  v15[1] = a3;
  sub_100014534(a2, a3);
  v11 = sub_1000080B4(&qword_100296DD8);
  v12._countAndFlagsBits = String.init<A>(describing:)(v15, v11);
  object = v12._object;
  String.append(_:)(v12);
  swift_bridgeObjectRelease(object);
  return v16;
}

uint64_t sub_1001A7A8C()
{
  uint64_t v0;

  return sub_1001A797C(*(_BYTE *)v0, *(_QWORD *)(v0 + 8), *(_QWORD *)(v0 + 16));
}

uint64_t sub_1001A7A98@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v2 = a1 + OBJC_IVAR____TtC13appleaccountd11DataCryptor_keyContainer;
  v3 = *(_QWORD *)(a1 + OBJC_IVAR____TtC13appleaccountd11DataCryptor_keyContainer + 8);
  v4 = *(_QWORD *)(v2 + 16);
  if (v4 >> 60 == 15)
    v5 = 0;
  else
    v5 = v3;
  v6 = 0xC000000000000000;
  if (v4 >> 60 != 15)
    v6 = v4;
  *a2 = v5;
  a2[1] = v6;
  return sub_100014534(v3, v4);
}

uint64_t sub_1001A7AE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;

  v5 = v4;
  v34 = a3;
  v35 = a4;
  v33 = a2;
  v7 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v7, v8);
  v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v11, v12);
  v14 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15, v17);
  v19 = (char *)&v33 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_1000080B4((uint64_t *)&unk_10028BDC0);
  Dependency.init(dependencyId:config:)(0, 0, 0, v20);
  v21 = sub_1000080B4(&qword_100294958);
  Dependency.init(dependencyId:config:)(0, 0, 0, v21);
  v22 = v5 + OBJC_IVAR____TtC13appleaccountd11DataCryptor_keyContainer;
  *(_BYTE *)v22 = 0;
  *(_OWORD *)(v22 + 8) = xmmword_10021A7E0;
  v23 = OBJC_IVAR____TtC13appleaccountd11DataCryptor_serialQueue;
  sub_100007764();
  v24 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v16 + 104))(v19, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v15);
  static DispatchQoS.unspecified.getter(v24);
  v36 = &_swiftEmptyArrayStorage;
  v25 = sub_10002E470();
  v26 = sub_1000080B4(&qword_10028B9F0);
  v27 = sub_100155A28();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v36, v26, v27, v7, v25);
  *(_QWORD *)(v5 + v23) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000022, 0x800000010020F4C0, v14, v10, v19, 0);
  v28 = (_QWORD *)(v5 + OBJC_IVAR____TtC13appleaccountd11DataCryptor_keychainAccount);
  v29 = v33;
  *v28 = a1;
  v28[1] = v29;
  v30 = (_QWORD *)(v5 + OBJC_IVAR____TtC13appleaccountd11DataCryptor_keychainService);
  v31 = v35;
  *v30 = v34;
  v30[1] = v31;
  return v5;
}

void sub_1001A7D34()
{
  sub_1001A8874((void (*)(uint64_t))sub_1001A7D40);
}

uint64_t sub_1001A7D40(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id v8;
  NSString v9;
  NSString v10;
  void (*v11)(char *, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _UNKNOWN **v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  void *v27;
  id v28;
  id v29;
  void *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  uint8_t *v45;
  id v46;
  id v47;
  Class isa;
  id v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t result;
  _QWORD v56[2];
  uint64_t v57;
  uint64_t v58;
  void (*v59)(char *, uint64_t);
  uint64_t v60;
  void (*v61)(char *, uint64_t, uint64_t);
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;

  v3 = sub_1000080B4(&qword_10028C0B0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  v7 = (char *)v56 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = objc_msgSend(objc_allocWithZone((Class)AAFKeychainItemDescriptor), "init");
  v9 = String._bridgeToObjectiveC()();
  objc_msgSend(v8, "setAccount:", v9);

  v10 = String._bridgeToObjectiveC()();
  objc_msgSend(v8, "setService:", v10);

  objc_msgSend(v8, "setItemClass:", 1);
  objc_msgSend(v8, "setSynchronizable:", 1);
  objc_msgSend(v8, "setItemAccessible:", 5);
  objc_msgSend(v8, "setUseDataProtection:", 2);
  v11 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  v60 = a1 + OBJC_IVAR____TtC13appleaccountd11DataCryptor__keychainManager;
  v61 = v11;
  ((void (*)(char *))v11)(v7);
  Dependency.wrappedValue.getter(&v62, v3);
  v59 = *(void (**)(char *, uint64_t))(v4 + 8);
  v59(v7, v3);
  v12 = v63;
  v13 = v64;
  sub_10000732C(&v62, v63);
  v14 = (*(uint64_t (**)(id, uint64_t, uint64_t))(v13 + 16))(v8, v12, v13);
  v15 = &off_10028A000;
  if (v1)
  {
    v58 = a1;
    sub_100006F58(&v62);
    if (qword_10028ADB0 != -1)
      swift_once(&qword_10028ADB0, sub_100046CC8);
    v16 = type metadata accessor for Logger(0);
    sub_100005288(v16, (uint64_t)qword_1002A8990);
    swift_errorRetain(v1);
    v17 = swift_errorRetain(v1);
    v18 = Logger.logObject.getter(v17);
    v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      v57 = v3;
      v20 = (uint8_t *)swift_slowAlloc(12, -1);
      v21 = swift_slowAlloc(32, -1);
      v62 = v21;
      *(_DWORD *)v20 = 136315138;
      v56[1] = v20 + 4;
      v65 = v1;
      swift_errorRetain(v1);
      v22 = sub_1000080B4(&qword_10028E850);
      v23 = String.init<A>(describing:)(&v65, v22);
      v25 = v24;
      v65 = sub_1001DEF4C(v23, v24, &v62);
      v15 = &off_10028A000;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, &v66);
      v26 = v25;
      v3 = v57;
      swift_bridgeObjectRelease(v26);
      swift_errorRelease(v1);
      swift_errorRelease(v1);
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Existing keychain item could not be fetched. Error - %s", v20, 0xCu);
      swift_arrayDestroy(v21, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v21, -1, -1);
      swift_slowDealloc(v20, -1, -1);

      swift_errorRelease(v1);
    }
    else
    {
      swift_errorRelease(v1);
      swift_errorRelease(v1);
      swift_errorRelease(v1);

    }
  }
  else
  {
    v27 = (void *)v14;
    sub_100006F58(&v62);
    if (v27)
    {
      v28 = v27;
      v29 = objc_msgSend(v28, "value");
      if (v29)
      {
        v30 = v29;
        v31 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v29);
        v33 = v32;

      }
      else
      {

        v31 = 0;
        v33 = 0xF000000000000000;
      }
      v52 = a1 + OBJC_IVAR____TtC13appleaccountd11DataCryptor_keyContainer;
      v53 = *(_QWORD *)(a1 + OBJC_IVAR____TtC13appleaccountd11DataCryptor_keyContainer + 8);
      v54 = *(_QWORD *)(a1 + OBJC_IVAR____TtC13appleaccountd11DataCryptor_keyContainer + 16);
      *(_QWORD *)(v52 + 8) = v31;
      *(_QWORD *)(v52 + 16) = v33;
      goto LABEL_20;
    }
    v58 = a1;
  }
  if (v15[438] != (_UNKNOWN *)-1)
    swift_once(&qword_10028ADB0, sub_100046CC8);
  v34 = type metadata accessor for Logger(0);
  v35 = sub_100005288(v34, (uint64_t)qword_1002A8990);
  v36 = Logger.logObject.getter(v35);
  v37 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v36, v37))
  {
    v38 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v38 = 0;
    _os_log_impl((void *)&_mh_execute_header, v36, v37, "Creating new key.", v38, 2u);
    swift_slowDealloc(v38, -1, -1);
  }

  v39 = sub_1001B0C8C(32);
  v41 = v40;
  v42 = sub_10000F450(v39, v40);
  v43 = Logger.logObject.getter(v42);
  v44 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v43, v44))
  {
    v45 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v45 = 0;
    _os_log_impl((void *)&_mh_execute_header, v43, v44, "Persisting the key.", v45, 2u);
    swift_slowDealloc(v45, -1, -1);
  }

  v46 = objc_allocWithZone((Class)AAFKeychainItem);
  sub_10000F450(v39, v41);
  v47 = v8;
  isa = Data._bridgeToObjectiveC()().super.isa;
  v49 = objc_msgSend(v46, "initWithDescriptor:value:", v47, isa);
  sub_10000F494(v39, v41);

  v61(v7, v60, v3);
  Dependency.wrappedValue.getter(&v62, v3);
  v59(v7, v3);
  v50 = v63;
  v51 = v64;
  sub_10000732C(&v62, v63);
  (*(void (**)(id, uint64_t, uint64_t))(v51 + 8))(v49, v50, v51);
  sub_10000F494(v39, v41);

  sub_100006F58(&v62);
  v52 = v58 + OBJC_IVAR____TtC13appleaccountd11DataCryptor_keyContainer;
  v53 = *(_QWORD *)(v58 + OBJC_IVAR____TtC13appleaccountd11DataCryptor_keyContainer + 8);
  v54 = *(_QWORD *)(v58 + OBJC_IVAR____TtC13appleaccountd11DataCryptor_keyContainer + 16);
  *(_QWORD *)(v52 + 8) = v39;
  *(_QWORD *)(v52 + 16) = v41;
LABEL_20:
  result = sub_1000144D8(v53, v54);
  *(_BYTE *)v52 = 1;
  return result;
}

unint64_t sub_1001A8440()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  unint64_t v8;
  _OWORD v10[3];
  _OWORD v11[3];

  v2 = objc_autoreleasePoolPush();
  sub_1001A7D34();
  OS_dispatch_queue.sync<A>(execute:)(v10, sub_1001A92D0, v0, &type metadata for Data);
  v4 = *((_QWORD *)&v10[0] + 1);
  v3 = *(_QWORD *)&v10[0];
  Data.encrypt(using:)(*(uint64_t *)&v10[0], *((uint64_t *)&v10[0] + 1));
  sub_10000F494(v3, v4);
  if (!v1)
  {
    v5 = type metadata accessor for JSONEncoder(0);
    swift_allocObject(v5, *(unsigned int *)(v5 + 48), *(unsigned __int16 *)(v5 + 52));
    v7 = JSONEncoder.init()(v6);
    v10[0] = v11[0];
    v10[1] = v11[1];
    v10[2] = v11[2];
    v8 = sub_10005E330();
    v4 = dispatch thunk of JSONEncoder.encode<A>(_:)(v10, &type metadata for EncryptedData, v8);
    swift_release(v7);
    sub_10005E374((uint64_t *)v11);
  }
  objc_autoreleasePoolPop(v2);
  return v4;
}

uint64_t sub_1001A858C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;
  _OWORD v29[3];
  _OWORD v30[3];
  uint64_t v31;
  uint64_t v32;

  v9 = type metadata accessor for JSONDecoder(0);
  v10 = swift_allocObject(v9, *(unsigned int *)(v9 + 48), *(unsigned __int16 *)(v9 + 52));
  v11 = JSONDecoder.init()(v10);
  v12 = sub_1001A928C();
  dispatch thunk of JSONDecoder.decode<A>(_:from:)(v29, &type metadata for EncryptedData, a1, a2, &type metadata for EncryptedData, v12);
  if (v4)
  {
    swift_release(v11);
    if (qword_10028ADB0 != -1)
      swift_once(&qword_10028ADB0, sub_100046CC8);
    v14 = type metadata accessor for Logger(0);
    sub_100005288(v14, (uint64_t)qword_1002A8990);
    swift_errorRetain(v4);
    v15 = swift_errorRetain(v4);
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc(12, -1);
      v19 = swift_slowAlloc(32, -1);
      *(_QWORD *)&v29[0] = v19;
      *(_DWORD *)v18 = 136315138;
      v31 = v4;
      swift_errorRetain(v4);
      v20 = sub_1000080B4(&qword_10028E850);
      v21 = String.init<A>(describing:)(&v31, v20);
      v23 = v22;
      v31 = sub_1001DEF4C(v21, v22, (uint64_t *)v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32);
      swift_bridgeObjectRelease(v23);
      swift_errorRelease(v4);
      swift_errorRelease(v4);
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Error decoding EncryptedData: %s", v18, 0xCu);
      swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v19, -1, -1);
      swift_slowDealloc(v18, -1, -1);
    }
    else
    {
      swift_errorRelease(v4);
      swift_errorRelease(v4);
    }

    return swift_willThrow();
  }
  else
  {
    swift_release(v11);
    v30[0] = v29[0];
    v30[1] = v29[1];
    v30[2] = v29[2];
    sub_1001A7D34();
    OS_dispatch_queue.sync<A>(execute:)(v29, sub_1001A92D0, a3, &type metadata for Data);
    v13 = v29[0];
    EncryptedData.decrypt(using:)(*(uint64_t *)&v29[0], *((uint64_t *)&v29[0] + 1));
    v25 = v24;
    v27 = v26;
    sub_10005E374((uint64_t *)v30);
    result = sub_10000F494(v13, *((unint64_t *)&v13 + 1));
    *a4 = v25;
    a4[1] = v27;
  }
  return result;
}

void sub_1001A8868()
{
  sub_1001A8874((void (*)(uint64_t))sub_1001A8A30);
}

void sub_1001A8874(void (*a1)(uint64_t))
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  unint64_t v17;
  void *v18;
  _QWORD v20[5];

  v3 = v1;
  v4 = sub_1000080B4(&qword_100296DE0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (char *)&v20[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = v3 + OBJC_IVAR____TtC13appleaccountd11DataCryptor_keyContainer;
  if ((*(_BYTE *)(v3 + OBJC_IVAR____TtC13appleaccountd11DataCryptor_keyContainer) & 1) == 0)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v3 + OBJC_IVAR____TtC13appleaccountd11DataCryptor__deviceInfoProvider, v4);
    Dependency.wrappedValue.getter(v20, v4);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    v10 = sub_1001BA9C4();
    sub_100006F58(v20);
    if (v10 == 1)
    {
      if (qword_10028ADB0 != -1)
        swift_once(&qword_10028ADB0, sub_100046CC8);
      v11 = type metadata accessor for Logger(0);
      v12 = sub_100005288(v11, (uint64_t)qword_1002A8990);
      v13 = Logger.logObject.getter(v12);
      v14 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v13, v14))
      {
        v15 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v15 = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, v14, "Cannot access the key before first unlock.", v15, 2u);
        swift_slowDealloc(v15, -1, -1);
      }

      v16 = *(_QWORD *)(v9 + 8);
      v17 = *(_QWORD *)(v9 + 16);
      *(_OWORD *)(v9 + 8) = xmmword_10021A7E0;
      sub_1000144D8(v16, v17);
      *(_BYTE *)v9 = 0;
    }
    else
    {
      v18 = objc_autoreleasePoolPush();
      a1(v3);
      objc_autoreleasePoolPop(v18);
    }
  }
}

uint64_t sub_1001A8A30(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  id v13;
  NSString v14;
  NSString v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t result;
  uint64_t v32[3];
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v3 = sub_1000080B4(&qword_10028C0B0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  v7 = (char *)&v32[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10028ADB0 != -1)
    swift_once(&qword_10028ADB0, sub_100046CC8);
  v8 = type metadata accessor for Logger(0);
  v9 = sub_100005288(v8, (uint64_t)qword_1002A8990);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Deleting AAD Encryption key.", v12, 2u);
    swift_slowDealloc(v12, -1, -1);
  }

  v13 = objc_msgSend(objc_allocWithZone((Class)AAFKeychainItemDescriptor), "init");
  v14 = String._bridgeToObjectiveC()();
  objc_msgSend(v13, "setAccount:", v14);

  v15 = String._bridgeToObjectiveC()();
  objc_msgSend(v13, "setService:", v15);

  objc_msgSend(v13, "setItemClass:", 1);
  objc_msgSend(v13, "setSynchronizable:", 1);
  objc_msgSend(v13, "setItemAccessible:", 5);
  objc_msgSend(v13, "setUseDataProtection:", 2);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v7, a1 + OBJC_IVAR____TtC13appleaccountd11DataCryptor__keychainManager, v3);
  Dependency.wrappedValue.getter(v32, v3);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  v16 = v33;
  v17 = v34;
  sub_10000732C(v32, v33);
  (*(void (**)(id, uint64_t, uint64_t))(v17 + 24))(v13, v16, v17);
  if (v1)
  {

    sub_100006F58(v32);
    swift_errorRetain(v1);
    v18 = swift_errorRetain(v1);
    v19 = Logger.logObject.getter(v18);
    v20 = static os_log_type_t.error.getter(v19);
    if (os_log_type_enabled(v19, v20))
    {
      v21 = (uint8_t *)swift_slowAlloc(12, -1);
      v22 = swift_slowAlloc(32, -1);
      v32[0] = v22;
      *(_DWORD *)v21 = 136315138;
      v35 = v1;
      swift_errorRetain(v1);
      v23 = sub_1000080B4(&qword_10028E850);
      v24 = String.init<A>(describing:)(&v35, v23);
      v26 = v25;
      v35 = sub_1001DEF4C(v24, v25, v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, &v36);
      swift_bridgeObjectRelease(v26);
      swift_errorRelease(v1);
      swift_errorRelease(v1);
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "AAD Encryption key could not be deleted. Error - %s", v21, 0xCu);
      swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v22, -1, -1);
      swift_slowDealloc(v21, -1, -1);

      swift_errorRelease(v1);
    }
    else
    {
      swift_errorRelease(v1);
      swift_errorRelease(v1);
      swift_errorRelease(v1);

    }
  }
  else
  {

    sub_100006F58(v32);
  }
  v27 = a1 + OBJC_IVAR____TtC13appleaccountd11DataCryptor_keyContainer;
  v28 = *(_QWORD *)(v27 + 8);
  v29 = *(_QWORD *)(v27 + 16);
  *(_OWORD *)(v27 + 8) = xmmword_10021A7E0;
  result = sub_1000144D8(v28, v29);
  *(_BYTE *)v27 = 0;
  return result;
}

uint64_t sub_1001A8E44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = v0 + OBJC_IVAR____TtC13appleaccountd11DataCryptor__keychainManager;
  v2 = sub_1000080B4(&qword_10028C0B0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  v3 = v0 + OBJC_IVAR____TtC13appleaccountd11DataCryptor__deviceInfoProvider;
  v4 = sub_1000080B4(&qword_100296DE0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC13appleaccountd11DataCryptor_keychainAccount + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC13appleaccountd11DataCryptor_keychainService + 8));
  sub_1000144D8(*(_QWORD *)(v0 + OBJC_IVAR____TtC13appleaccountd11DataCryptor_keyContainer + 8), *(_QWORD *)(v0 + OBJC_IVAR____TtC13appleaccountd11DataCryptor_keyContainer + 16));

  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1001A8F10()
{
  return type metadata accessor for DataCryptor(0);
}

uint64_t type metadata accessor for DataCryptor(uint64_t a1)
{
  uint64_t result;

  result = qword_100296C78;
  if (!qword_100296C78)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for DataCryptor);
  return result;
}

void sub_1001A8F54(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[6];

  sub_100017464(319, &qword_10028BDB8, (uint64_t *)&unk_10028BDC0);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_100017464(319, (unint64_t *)&unk_100296C88, &qword_100294958);
    if (v5 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(v4 - 8) + 64;
      v6[2] = &unk_100220C90;
      v6[3] = &unk_100220C90;
      v6[4] = &unk_100220CA8;
      v6[5] = (char *)&value witness table for Builtin.UnknownObject + 64;
      swift_updateClassMetadata2(a1, 256, 6, v6, a1 + 80);
    }
  }
}

uint64_t destroy for CryptorKeyContainer(uint64_t result)
{
  unint64_t v1;

  v1 = *(_QWORD *)(result + 16);
  if (v1 >> 60 != 15)
    return sub_10000F494(*(_QWORD *)(result + 8), v1);
  return result;
}

uint64_t _s13appleaccountd19CryptorKeyContainerVwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = (uint64_t *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  if (v4 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 8) = *(_OWORD *)v3;
  }
  else
  {
    v5 = *v3;
    sub_10000F450(*v3, *(_QWORD *)(a2 + 16));
    *(_QWORD *)(a1 + 8) = v5;
    *(_QWORD *)(a1 + 16) = v4;
  }
  return a1;
}

uint64_t assignWithCopy for CryptorKeyContainer(uint64_t a1, uint64_t a2)
{
  _OWORD *v3;
  uint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = (_OWORD *)(a1 + 8);
  v4 = (uint64_t *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  if (*(_QWORD *)(a1 + 16) >> 60 != 15)
  {
    if (v5 >> 60 != 15)
    {
      v7 = *v4;
      sub_10000F450(*v4, *(_QWORD *)(a2 + 16));
      v8 = *(_QWORD *)(a1 + 8);
      v9 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 8) = v7;
      *(_QWORD *)(a1 + 16) = v5;
      sub_10000F494(v8, v9);
      return a1;
    }
    sub_100071D90(a1 + 8);
    goto LABEL_6;
  }
  if (v5 >> 60 == 15)
  {
LABEL_6:
    *v3 = *(_OWORD *)v4;
    return a1;
  }
  v6 = *v4;
  sub_10000F450(*v4, *(_QWORD *)(a2 + 16));
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = v5;
  return a1;
}

__n128 initializeWithTake for CryptorKeyContainer(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for CryptorKeyContainer(uint64_t a1, uint64_t a2)
{
  _OWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = (_OWORD *)(a1 + 8);
  v5 = (_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  if (v6 >> 60 != 15)
  {
    v7 = *(_QWORD *)(a2 + 16);
    if (v7 >> 60 != 15)
    {
      v8 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)(a1 + 8) = *v5;
      *(_QWORD *)(a1 + 16) = v7;
      sub_10000F494(v8, v6);
      return a1;
    }
    sub_100071D90(a1 + 8);
  }
  *v4 = *(_OWORD *)v5;
  return a1;
}

uint64_t getEnumTagSinglePayload for CryptorKeyContainer(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && a1[24])
    return (*(_DWORD *)a1 + 255);
  v3 = *a1;
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for CryptorKeyContainer(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for CryptorKeyContainer()
{
  return &type metadata for CryptorKeyContainer;
}

unint64_t sub_1001A928C()
{
  unint64_t result;

  result = qword_100296DD0;
  if (!qword_100296DD0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for EncryptedData, &type metadata for EncryptedData);
    atomic_store(result, (unint64_t *)&qword_100296DD0);
  }
  return result;
}

uint64_t sub_1001A92D0@<X0>(_QWORD *a1@<X8>)
{
  return sub_1001A92E4(a1);
}

uint64_t sub_1001A92E4@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = *(_QWORD *)(v1 + OBJC_IVAR____TtC13appleaccountd11DataCryptor_keyContainer + 8);
  v3 = *(_QWORD *)(v1 + OBJC_IVAR____TtC13appleaccountd11DataCryptor_keyContainer + 16);
  if (v3 >> 60 == 15)
    v4 = 0;
  else
    v4 = *(_QWORD *)(v1 + OBJC_IVAR____TtC13appleaccountd11DataCryptor_keyContainer + 8);
  v5 = 0xC000000000000000;
  if (v3 >> 60 != 15)
    v5 = *(_QWORD *)(v1 + OBJC_IVAR____TtC13appleaccountd11DataCryptor_keyContainer + 16);
  *a1 = v4;
  a1[1] = v5;
  return sub_100014534(v2, v3);
}

uint64_t sub_1001A9330()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  uint64_t v3;

  v3 = type metadata accessor for BenefactorAccessKeyHealthCheck(0);
  v0 = sub_1000080B4(&qword_100296EC8);
  result = String.init<A>(describing:)(&v3, v0);
  qword_100296DE8 = result;
  unk_100296DF0 = v2;
  return result;
}

uint64_t sub_1001A9378(uint64_t a1, char a2, void (*a3)(uint64_t), uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31[3];
  uint64_t v32;
  uint64_t v33;

  if ((a2 & 1) != 0)
  {
    swift_errorRetain(a1);
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v17 = type metadata accessor for Logger(0);
    sub_100005288(v17, (uint64_t)qword_1002A8A08);
    swift_errorRetain(a1);
    v18 = swift_errorRetain(a1);
    v19 = Logger.logObject.getter(v18);
    v20 = static os_log_type_t.error.getter(v19);
    if (os_log_type_enabled(v19, v20))
    {
      v21 = swift_slowAlloc(22, -1);
      v22 = swift_slowAlloc(64, -1);
      v31[0] = v22;
      *(_DWORD *)v21 = 136315394;
      if (qword_10028AEF0 != -1)
        swift_once(&qword_10028AEF0, sub_1001A9330);
      v23 = qword_100296DE8;
      v24 = unk_100296DF0;
      swift_bridgeObjectRetain(unk_100296DF0);
      v32 = sub_1001DEF4C(v23, v24, v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, &v33);
      swift_bridgeObjectRelease(v24);
      *(_WORD *)(v21 + 12) = 2080;
      v32 = a1;
      swift_errorRetain(a1);
      v25 = sub_1000080B4(&qword_10028E850);
      v26 = String.init<A>(describing:)(&v32, v25);
      v28 = v27;
      v32 = sub_1001DEF4C(v26, v27, v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, &v33);
      swift_bridgeObjectRelease(v28);
      sub_10006AEB4(a1, 1);
      sub_10006AEB4(a1, 1);
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "%s - failed to fetch manatee status: %s", (uint8_t *)v21, 0x16u);
      swift_arrayDestroy(v22, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v22, -1, -1);
      swift_slowDealloc(v21, -1, -1);
    }
    else
    {
      sub_10006AEB4(a1, 1);
      sub_10006AEB4(a1, 1);
    }

    swift_errorRetain(a1);
    a3(a1);
    sub_10006AEB4(a1, 1);
    return sub_10006AEB4(a1, 1);
  }
  else if ((a1 & 1) != 0)
  {
    v29 = a5 + 16;
    swift_beginAccess(a5 + 16, v31, 0, 0);
    result = swift_weakLoadStrong(v29);
    if (result)
    {
      v30 = result;
      sub_1001A97BC((uint64_t)a3, a4);
      return swift_release(v30);
    }
  }
  else
  {
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v8 = type metadata accessor for Logger(0);
    v9 = sub_100005288(v8, (uint64_t)qword_1002A8A08);
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.info.getter(v10);
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc(12, -1);
      v13 = swift_slowAlloc(32, -1);
      v31[0] = v13;
      *(_DWORD *)v12 = 136315138;
      if (qword_10028AEF0 != -1)
        swift_once(&qword_10028AEF0, sub_1001A9330);
      v14 = qword_100296DE8;
      v15 = unk_100296DF0;
      swift_bridgeObjectRetain(unk_100296DF0);
      v32 = sub_1001DEF4C(v14, v15, v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, &v33);
      swift_bridgeObjectRelease(v15);
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "%s - manatee is not enabled, no benefactor access key checks needed.", v12, 0xCu);
      swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v13, -1, -1);
      swift_slowDealloc(v12, -1, -1);
    }

    return ((uint64_t (*)(_QWORD))a3)(0);
  }
  return result;
}

void sub_1001A97BC(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void *v12;
  _QWORD *v13;
  void *v14;
  _QWORD *v15;
  _QWORD aBlock[5];
  _QWORD *v17;

  v3 = v2;
  v6 = *v2;
  v7 = sub_1000080B4(&qword_100296ED0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  v11 = (char *)aBlock - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, (uint64_t)v3 + OBJC_IVAR____TtC13appleaccountd30BenefactorAccessKeyHealthCheck__inheritanceManager, v7);
  Dependency.wrappedValue.getter(aBlock, v7);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  v12 = (void *)aBlock[0];
  v13 = (_QWORD *)swift_allocObject(&unk_10026D6F0, 48, 7);
  v13[2] = a1;
  v13[3] = a2;
  v13[4] = v3;
  v13[5] = v6;
  aBlock[4] = sub_1001AB584;
  v17 = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1001AAE60;
  aBlock[3] = &unk_10026D708;
  v14 = _Block_copy(aBlock);
  v15 = v17;
  swift_retain(a2);
  swift_retain(v3);
  swift_release(v15);
  objc_msgSend(v12, "fetchBenefactorsWithCompletion:", v14);
  _Block_release(v14);

}

uint64_t sub_1001A9918()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = v0 + OBJC_IVAR____TtC13appleaccountd30BenefactorAccessKeyHealthCheck__inheritanceManager;
  v2 = sub_1000080B4(&qword_100296ED0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  v3 = v0 + OBJC_IVAR____TtC13appleaccountd30BenefactorAccessKeyHealthCheck__storageController;
  v4 = sub_1000080B4((uint64_t *)&unk_100295380);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1001A9998()
{
  return type metadata accessor for BenefactorAccessKeyHealthCheck(0);
}

uint64_t type metadata accessor for BenefactorAccessKeyHealthCheck(uint64_t a1)
{
  uint64_t result;

  result = qword_100296E30;
  if (!qword_100296E30)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for BenefactorAccessKeyHealthCheck);
  return result;
}

void sub_1001A99DC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[2];

  sub_1001A9A64(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_1001A9AB8(319);
    if (v5 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(v4 - 8) + 64;
      swift_updateClassMetadata2(a1, 256, 2, v6, a1 + 80);
    }
  }
}

void sub_1001A9A64(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100296E40)
  {
    v2 = type metadata accessor for InheritanceRequestManager(255);
    v3 = type metadata accessor for Dependency(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100296E40);
  }
}

void sub_1001A9AB8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1002954D0)
  {
    v2 = sub_10000D908(&qword_100294B10);
    v3 = type metadata accessor for Dependency(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1002954D0);
  }
}

uint64_t sub_1001A9B10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1001AB280(a3, a4);
}

uint64_t sub_1001A9B38(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  void *v31;
  _BOOL4 v32;
  void (*v33)(uint64_t);
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  NSObject *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  void *v50;
  _QWORD *v51;
  void *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  void (*v72)(uint64_t);
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  void *aBlock[5];
  _QWORD *v78;

  v74 = a5;
  v75 = a6;
  v10 = type metadata accessor for DispatchWorkItemFlags(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  v14 = (char *)&v61 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for DispatchQoS(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15, v17);
  v19 = (char *)&v61 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for DispatchQoS.QoSClass(0);
  v22 = __chkstk_darwin(v20, v21);
  v25 = (char *)&v61 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    swift_errorRetain(a2);
    a3(a2);
    return swift_errorRelease(a2);
  }
  else
  {
    v66 = v22;
    v67 = v19;
    v64 = v25;
    v65 = v23;
    v27 = v75;
    v72 = a3;
    v73 = a4;
    v68 = v16;
    v69 = v15;
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v28 = type metadata accessor for Logger(0);
    sub_100005288(v28, (uint64_t)qword_1002A8A08);
    v29 = swift_bridgeObjectRetain_n(a1, 2);
    v30 = Logger.logObject.getter(v29);
    LOBYTE(v31) = static os_log_type_t.info.getter(v30);
    v32 = os_log_type_enabled(v30, (os_log_type_t)v31);
    v33 = v72;
    v70 = v14;
    v71 = v11;
    if (!v32)
    {
      v39 = v10;

      swift_bridgeObjectRelease_n(a1, 2);
      v41 = v27;
      v27 = v74;
      goto LABEL_15;
    }
    v34 = swift_slowAlloc(22, -1);
    v62 = (void *)swift_slowAlloc(32, -1);
    aBlock[0] = v62;
    *(_DWORD *)v34 = 136315394;
    if (qword_10028AEF0 != -1)
      swift_once(&qword_10028AEF0, sub_1001A9330);
    v35 = qword_100296DE8;
    v36 = unk_100296DF0;
    swift_bridgeObjectRetain(unk_100296DF0);
    v76 = (_QWORD *)sub_1001DEF4C(v35, v36, (uint64_t *)aBlock);
    v37 = aBlock;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, aBlock);
    swift_bridgeObjectRelease(v36);
    *(_WORD *)(v34 + 12) = 2048;
    if (!a1)
    {
      v40 = 0;
      v39 = v10;
      v41 = v27;
      goto LABEL_14;
    }
    v38 = a1 & 0xFFFFFFFFFFFFFF8;
    v39 = v10;
    if ((unint64_t)a1 >> 62)
      goto LABEL_31;
    v40 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    while (1)
    {
      v41 = v27;
      swift_bridgeObjectRelease(a1);
LABEL_14:
      v27 = v74;
      v76 = (_QWORD *)v40;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, v37);
      swift_bridgeObjectRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, v30, (os_log_type_t)v31, "%s - performing access key health check on %ld benefactors", (uint8_t *)v34, 0x16u);
      v31 = v62;
      swift_arrayDestroy(v62, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v31, -1, -1);
      swift_slowDealloc(v34, -1, -1);

LABEL_15:
      v37 = dispatch_group_create();
      v30 = swift_allocObject(&unk_10026D740, 24, 7);
      v30[2].isa = 0;
      v42 = v73;
      if (!a1)
        break;
      v63 = v39;
      if ((unint64_t)a1 >> 62)
      {
        if (a1 >= 0)
          v46 = a1 & 0xFFFFFFFFFFFFFF8;
        else
          v46 = a1;
        swift_bridgeObjectRetain_n(a1, 2);
        v34 = _CocoaArrayWrapper.endIndex.getter(v46);
        if (!v34)
          goto LABEL_28;
      }
      else
      {
        v34 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain_n(a1, 2);
        if (!v34)
          goto LABEL_28;
      }
      if (v34 >= 1)
      {
        v43 = 0;
        do
        {
          if ((a1 & 0xC000000000000001) != 0)
            v44 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v43, a1);
          else
            v44 = *(id *)(a1 + 8 * v43 + 32);
          v45 = v44;
          ++v43;
          aBlock[0] = v44;
          sub_1001AA140(aBlock, v37, v27, (uint64_t)v30, v41);

        }
        while (v34 != v43);
LABEL_28:
        swift_bridgeObjectRelease_n(a1, 2);
        v39 = v63;
        v33 = v72;
        v42 = v73;
        break;
      }
      __break(1u);
LABEL_31:
      if (a1 >= 0)
        v60 = v38;
      else
        v60 = a1;
      swift_bridgeObjectRetain(a1);
      v40 = _CocoaArrayWrapper.endIndex.getter(v60);
      swift_bridgeObjectRelease(a1);
    }
    sub_1000067D4(0, (unint64_t *)&qword_100295A10, OS_dispatch_queue_ptr);
    v48 = v64;
    v47 = v65;
    v49 = v66;
    (*(void (**)(char *, _QWORD, uint64_t))(v65 + 104))(v64, enum case for DispatchQoS.QoSClass.background(_:), v66);
    v50 = (void *)static OS_dispatch_queue.global(qos:)(v48);
    (*(void (**)(char *, uint64_t))(v47 + 8))(v48, v49);
    v51 = (_QWORD *)swift_allocObject(&unk_10026D768, 40, 7);
    v51[2] = v33;
    v51[3] = v42;
    v51[4] = v30;
    aBlock[4] = sub_100043394;
    v78 = v51;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = (void *)1107296256;
    aBlock[2] = sub_1000051D0;
    aBlock[3] = &unk_10026D780;
    v52 = _Block_copy(aBlock);
    swift_retain(v42);
    v53 = swift_retain(v30);
    v54 = v67;
    static DispatchQoS.unspecified.getter(v53);
    v76 = _swiftEmptyArrayStorage;
    v55 = sub_100005150((unint64_t *)&qword_10028CD20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v56 = sub_1000080B4((uint64_t *)&unk_100295A00);
    v57 = sub_100008628();
    v58 = v70;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v76, v56, v57, v39, v55);
    OS_dispatch_group.notify(qos:flags:queue:execute:)(v54, v58, v50, v52);

    _Block_release(v52);
    (*(void (**)(char *, uint64_t))(v71 + 8))(v58, v39);
    (*(void (**)(char *, uint64_t))(v68 + 8))(v54, v69);
    v59 = v78;
    swift_release(v30);
    return swift_release(v59);
  }
}

void sub_1001AA140(void **a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  void *v14;
  _QWORD *v15;
  id v16;
  NSObject *v17;
  uint64_t v18;
  id v19;
  NSObject *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD v31[2];
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  v13 = (char *)v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *a1;
  if (objc_msgSend(v14, "status") == (id)2)
  {
    dispatch_group_enter(a2);
    v15 = (_QWORD *)swift_allocObject(&unk_10026D7B8, 48, 7);
    v15[2] = v14;
    v15[3] = a4;
    v15[4] = a2;
    v15[5] = a5;
    v16 = v14;
    swift_retain(a4);
    v17 = a2;
    sub_1001AA7A4(v16, (uint64_t (*)(_QWORD))sub_1001AB5F0, (uint64_t)v15);
    swift_release(v15);
  }
  else
  {
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v18 = type metadata accessor for Logger(0);
    sub_100005288(v18, (uint64_t)qword_1002A8A08);
    v19 = v14;
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.info.getter(v20);
    if (os_log_type_enabled(v20, (os_log_type_t)v21))
    {
      v33 = v21;
      v22 = swift_slowAlloc(22, -1);
      v32 = swift_slowAlloc(64, -1);
      v36 = v32;
      *(_DWORD *)v22 = 136315394;
      if (qword_10028AEF0 != -1)
        swift_once(&qword_10028AEF0, sub_1001A9330);
      v23 = qword_100296DE8;
      v24 = unk_100296DF0;
      swift_bridgeObjectRetain(unk_100296DF0);
      v34 = sub_1001DEF4C(v23, v24, &v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35);
      swift_bridgeObjectRelease(v24);
      *(_WORD *)(v22 + 12) = 2080;
      v31[1] = v22 + 14;
      v25 = objc_msgSend(v19, "beneficiaryID");
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v25);

      v26 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v27 = dispatch thunk of CustomStringConvertible.description.getter(v9, v26);
      v29 = v28;
      (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
      v34 = sub_1001DEF4C(v27, v29, &v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35);

      swift_bridgeObjectRelease(v29);
      _os_log_impl((void *)&_mh_execute_header, v20, (os_log_type_t)v33, "%s - BenefactorInfoRecord with beneficiaryID - %s is not accepted. Skipping health check.", (uint8_t *)v22, 0x16u);
      v30 = v32;
      swift_arrayDestroy(v32, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v30, -1, -1);
      swift_slowDealloc(v22, -1, -1);

    }
    else
    {

    }
  }
}

void sub_1001AA498(uint64_t a1, void *a2, uint64_t a3, NSObject *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t *v13;
  uint64_t v14;
  id v15;
  NSObject *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[2];
  uint64_t v29;
  int v30;
  uint64_t *v31;
  NSObject *v32;
  uint64_t v33;
  uint64_t v34[3];

  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v12 = (char *)v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    swift_errorRetain(a1);
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v13 = (uint64_t *)(a3 + 16);
    v14 = type metadata accessor for Logger(0);
    sub_100005288(v14, (uint64_t)qword_1002A8A08);
    v15 = a2;
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.error.getter(v16);
    if (os_log_type_enabled(v16, (os_log_type_t)v17))
    {
      v30 = v17;
      v31 = (uint64_t *)(a3 + 16);
      v32 = a4;
      v18 = swift_slowAlloc(22, -1);
      v29 = swift_slowAlloc(64, -1);
      v34[0] = v29;
      *(_DWORD *)v18 = 136315394;
      if (qword_10028AEF0 != -1)
        swift_once(&qword_10028AEF0, sub_1001A9330);
      v19 = qword_100296DE8;
      v20 = unk_100296DF0;
      swift_bridgeObjectRetain(unk_100296DF0);
      v33 = sub_1001DEF4C(v19, v20, v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, v34);
      swift_bridgeObjectRelease(v20);
      *(_WORD *)(v18 + 12) = 2080;
      v28[1] = v18 + 14;
      v21 = objc_msgSend(v15, "beneficiaryID");
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v21);

      v22 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v23 = dispatch thunk of CustomStringConvertible.description.getter(v8, v22);
      v25 = v24;
      (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
      v33 = sub_1001DEF4C(v23, v25, v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, v34);

      swift_bridgeObjectRelease(v25);
      _os_log_impl((void *)&_mh_execute_header, v16, (os_log_type_t)v30, "%s - health check failed for benefactor - %s", (uint8_t *)v18, 0x16u);
      v26 = v29;
      swift_arrayDestroy(v29, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v26, -1, -1);
      swift_slowDealloc(v18, -1, -1);

      v13 = v31;
      a4 = v32;
    }
    else
    {

    }
    swift_beginAccess(v13, v34, 1, 0);
    v27 = *v13;
    *v13 = a1;
    swift_errorRelease(v27);
  }
  dispatch_group_leave(a4);
}

uint64_t sub_1001AA7A4(void *a1, uint64_t (*a2)(_QWORD), uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  id v17;
  uint64_t v18;
  id v19;
  NSObject *v20;
  int v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v33;
  id v34;
  NSObject *v35;
  int v36;
  _BOOL4 v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  os_log_t v53;
  char *v54;
  void *v55;
  id v56;
  _QWORD *v57;
  uint64_t (*v58)(_QWORD);
  uint64_t v59;
  id v60;
  _QWORD v61[2];
  int v62;
  _QWORD *v63;
  os_log_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t (*v69)(_QWORD);
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;

  v4 = v3;
  v71 = a3;
  v7 = *v3;
  v8 = sub_1000080B4(&qword_100296ED0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v12 = (char *)v61 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for UUID(0);
  v70 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13, v14);
  v16 = (char *)v61 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = objc_msgSend(a1, "accessKey");

  if (v17)
  {
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v18 = type metadata accessor for Logger(0);
    sub_100005288(v18, (uint64_t)qword_1002A8A08);
    v19 = a1;
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.info.getter(v20);
    if (os_log_type_enabled(v20, (os_log_type_t)v21))
    {
      v22 = v16;
      LODWORD(v68) = v21;
      v69 = a2;
      v23 = swift_slowAlloc(22, -1);
      v24 = swift_slowAlloc(64, -1);
      v73 = (void *)v24;
      *(_DWORD *)v23 = 136315394;
      if (qword_10028AEF0 != -1)
        swift_once(&qword_10028AEF0, sub_1001A9330);
      v25 = qword_100296DE8;
      v26 = unk_100296DF0;
      swift_bridgeObjectRetain(unk_100296DF0);
      v72 = sub_1001DEF4C(v25, v26, (uint64_t *)&v73);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v72, &v73);
      swift_bridgeObjectRelease(v26);
      *(_WORD *)(v23 + 12) = 2080;
      v27 = objc_msgSend(v19, "beneficiaryID");
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v27);

      v28 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v29 = dispatch thunk of CustomStringConvertible.description.getter(v13, v28);
      v31 = v30;
      (*(void (**)(char *, uint64_t))(v70 + 8))(v22, v13);
      v72 = sub_1001DEF4C(v29, v31, (uint64_t *)&v73);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v72, &v73);

      swift_bridgeObjectRelease(v31);
      _os_log_impl((void *)&_mh_execute_header, v20, (os_log_type_t)v68, "%s - BenefactorInfoRecord with beneficiaryID - %s has an access key. No repair needed.", (uint8_t *)v23, 0x16u);
      swift_arrayDestroy(v24, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v24, -1, -1);
      swift_slowDealloc(v23, -1, -1);

      return v69(0);
    }
    else
    {

      return a2(0);
    }
  }
  else
  {
    v65 = v12;
    v66 = v9;
    v67 = v7;
    v68 = v13;
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v69 = a2;
    v33 = type metadata accessor for Logger(0);
    sub_100005288(v33, (uint64_t)qword_1002A8A08);
    v34 = a1;
    v35 = Logger.logObject.getter(v34);
    v36 = static os_log_type_t.info.getter(v35);
    v37 = os_log_type_enabled(v35, (os_log_type_t)v36);
    v38 = v4;
    v39 = (uint64_t)v16;
    v40 = v71;
    if (v37)
    {
      v62 = v36;
      v63 = v4;
      v64 = v35;
      v41 = swift_slowAlloc(22, -1);
      v42 = swift_slowAlloc(64, -1);
      v73 = (void *)v42;
      *(_DWORD *)v41 = 136315394;
      v43 = v66;
      v44 = v8;
      if (qword_10028AEF0 != -1)
        swift_once(&qword_10028AEF0, sub_1001A9330);
      v45 = qword_100296DE8;
      v46 = unk_100296DF0;
      swift_bridgeObjectRetain(unk_100296DF0);
      v72 = sub_1001DEF4C(v45, v46, (uint64_t *)&v73);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v72, &v73);
      swift_bridgeObjectRelease(v46);
      *(_WORD *)(v41 + 12) = 2080;
      v61[1] = v41 + 14;
      v47 = objc_msgSend(v34, "beneficiaryID");
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v47);

      v48 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v49 = v68;
      v50 = dispatch thunk of CustomStringConvertible.description.getter(v68, v48);
      v52 = v51;
      (*(void (**)(uint64_t, uint64_t))(v70 + 8))(v39, v49);
      v72 = sub_1001DEF4C(v50, v52, (uint64_t *)&v73);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v72, &v73);

      swift_bridgeObjectRelease(v52);
      v53 = v64;
      _os_log_impl((void *)&_mh_execute_header, v64, (os_log_type_t)v62, "%s - BenefactorInfoRecord with beneficiaryID - %s missing access key. Attempting repair by re-sending acceptance status.", (uint8_t *)v41, 0x16u);
      swift_arrayDestroy(v42, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v42, -1, -1);
      swift_slowDealloc(v41, -1, -1);

      v40 = v71;
      v54 = v65;
      v38 = v63;
    }
    else
    {

      v54 = v65;
      v43 = v66;
      v44 = v8;
      v49 = v68;
    }
    (*(void (**)(char *, uint64_t, uint64_t))(v43 + 16))(v54, (uint64_t)v38 + OBJC_IVAR____TtC13appleaccountd30BenefactorAccessKeyHealthCheck__inheritanceManager, v44);
    Dependency.wrappedValue.getter(&v73, v44);
    (*(void (**)(char *, uint64_t))(v43 + 8))(v54, v44);
    v55 = v73;
    v56 = objc_msgSend(v34, "beneficiaryID");
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v56);

    v57 = (_QWORD *)swift_allocObject(&unk_10026D7E0, 48, 7);
    v58 = v69;
    v57[2] = v34;
    v57[3] = v58;
    v59 = v67;
    v57[4] = v40;
    v57[5] = v59;
    v60 = v34;
    swift_retain(v40);
    sub_1000B0ACC(v39, 1, 2u, (uint64_t)sub_1001AB628, (uint64_t)v57);

    swift_release(v57);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v70 + 8))(v39, v49);
  }
}

uint64_t sub_1001AAE60(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, void *);
  uint64_t v7;
  id v8;

  v4 = a2;
  v6 = *(void (**)(uint64_t, void *))(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  if (a2)
  {
    v7 = sub_1000067D4(0, (unint64_t *)&unk_10028FAF0, AABenefactorInfo_ptr);
    v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v4, v7);
  }
  swift_retain(v5);
  v8 = a3;
  v6(v4, a3);
  swift_release(v5);

  return swift_bridgeObjectRelease(v4);
}

uint64_t sub_1001AAEEC(uint64_t a1, void *a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  id v14;
  id v15;
  NSObject *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  os_log_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  int v35;
  os_log_t v36;
  uint64_t v37;
  uint64_t (*v38)(uint64_t);
  uint64_t v39;
  uint64_t v40;

  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v12 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a1)
    return a3(a1);
  swift_errorRetain(a1);
  if (qword_10028ADD8 != -1)
    swift_once(&qword_10028ADD8, sub_100046D78);
  v13 = type metadata accessor for Logger(0);
  sub_100005288(v13, (uint64_t)qword_1002A8A08);
  swift_errorRetain(a1);
  v14 = a2;
  swift_errorRetain(a1);
  v15 = v14;
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.error.getter(v16);
  if (!os_log_type_enabled(v16, (os_log_type_t)v17))
  {
    swift_errorRelease(a1);

    swift_errorRelease(a1);
    swift_errorRelease(a1);

    return a3(a1);
  }
  v35 = v17;
  v36 = v16;
  v37 = a4;
  v38 = a3;
  v18 = swift_slowAlloc(32, -1);
  v34 = swift_slowAlloc(96, -1);
  v40 = v34;
  *(_DWORD *)v18 = 136315650;
  if (qword_10028AEF0 != -1)
    swift_once(&qword_10028AEF0, sub_1001A9330);
  v19 = qword_100296DE8;
  v20 = unk_100296DF0;
  swift_bridgeObjectRetain(unk_100296DF0);
  v39 = sub_1001DEF4C(v19, v20, &v40);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40);
  swift_bridgeObjectRelease(v20);
  *(_WORD *)(v18 + 12) = 2080;
  v21 = objc_msgSend(v15, "beneficiaryID");
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v21);

  v22 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v23 = dispatch thunk of CustomStringConvertible.description.getter(v8, v22);
  v25 = v24;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  v39 = sub_1001DEF4C(v23, v25, &v40);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40);

  swift_bridgeObjectRelease(v25);
  *(_WORD *)(v18 + 22) = 2080;
  v39 = a1;
  swift_errorRetain(a1);
  v26 = sub_1000080B4(&qword_10028E850);
  v27 = String.init<A>(describing:)(&v39, v26);
  v29 = v28;
  v39 = sub_1001DEF4C(v27, v28, &v40);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40);
  swift_bridgeObjectRelease(v29);
  swift_errorRelease(a1);
  swift_errorRelease(a1);
  v30 = v36;
  _os_log_impl((void *)&_mh_execute_header, v36, (os_log_type_t)v35, "%s - failed to send acceptance response for %s: %s", (uint8_t *)v18, 0x20u);
  v31 = v34;
  swift_arrayDestroy(v34, 3, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v31, -1, -1);
  swift_slowDealloc(v18, -1, -1);

  swift_errorRelease(a1);
  return v38(a1);
}

uint64_t sub_1001AB280(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  __n128 v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29[5];

  v3 = v2;
  v6 = *v2;
  v7 = sub_1000080B4((uint64_t *)&unk_100295380);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10028ADD8 != -1)
    swift_once(&qword_10028ADD8, sub_100046D78);
  v12 = type metadata accessor for Logger(0);
  v13 = sub_100005288(v12, (uint64_t)qword_1002A8A08);
  v14 = Logger.logObject.getter(v13);
  v16 = static os_log_type_t.default.getter(v15);
  if (os_log_type_enabled(v14, v16))
  {
    v24 = v3;
    v25 = a1;
    v26 = v6;
    v27 = a2;
    v17 = (uint8_t *)swift_slowAlloc(12, -1);
    v18 = swift_slowAlloc(32, -1);
    v29[0] = v18;
    *(_DWORD *)v17 = 136315138;
    if (qword_10028AEF0 != -1)
      swift_once(&qword_10028AEF0, sub_1001A9330);
    v20 = qword_100296DE8;
    v19 = unk_100296DF0;
    swift_bridgeObjectRetain(unk_100296DF0);
    v28 = sub_1001DEF4C(v20, v19, v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, v29);
    swift_bridgeObjectRelease(v19);
    _os_log_impl((void *)&_mh_execute_header, v14, v16, "%s - started.", v17, 0xCu);
    swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v18, -1, -1);
    swift_slowDealloc(v17, -1, -1);

    v6 = v26;
    a2 = v27;
    v3 = v24;
    a1 = v25;
  }
  else
  {

  }
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, (uint64_t)v3 + OBJC_IVAR____TtC13appleaccountd30BenefactorAccessKeyHealthCheck__storageController, v7);
  Dependency.wrappedValue.getter(v29, v7);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  v21 = swift_allocObject(&unk_10026D6A0, 24, 7);
  swift_weakInit(v21 + 16, v3);
  v22 = (_QWORD *)swift_allocObject(&unk_10026D6C8, 48, 7);
  v22[2] = a1;
  v22[3] = a2;
  v22[4] = v21;
  v22[5] = v6;
  swift_retain(a2);
  swift_retain(v21);
  sub_1000D0C00((uint64_t)sub_1001AB56C, (uint64_t)v22);
  swift_release(v21);
  swift_release(v22);
  return sub_100006F58(v29);
}

uint64_t sub_1001AB540()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001AB564()
{
  return sub_10005D430(48);
}

uint64_t sub_1001AB56C(uint64_t a1, char a2)
{
  uint64_t v2;

  return sub_1001A9378(a1, a2 & 1, *(void (**)(uint64_t))(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32));
}

uint64_t sub_1001AB57C()
{
  return sub_10005D430(48);
}

uint64_t sub_1001AB584(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1001A9B38(a1, a2, *(void (**)(uint64_t))(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40));
}

uint64_t sub_1001AB590()
{
  uint64_t v0;

  swift_errorRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001AB5B4()
{
  return sub_10005D430(40);
}

uint64_t sub_1001AB5BC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 48, 7);
}

void sub_1001AB5F0(uint64_t a1)
{
  uint64_t v1;

  sub_1001AA498(a1, *(void **)(v1 + 16), *(_QWORD *)(v1 + 24), *(NSObject **)(v1 + 32));
}

uint64_t sub_1001AB5FC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1001AB628(uint64_t a1)
{
  uint64_t v1;

  return sub_1001AAEEC(a1, *(void **)(v1 + 16), *(uint64_t (**)(uint64_t))(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_1001AB63C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_allocObject(&unk_10026D818, 40, 7);
  v5[2] = v2;
  v5[3] = a1;
  v5[4] = a2;
  swift_retain(v2);
  swift_retain(a2);
  sub_10019F2A4((uint64_t)sub_1001AB8B4, (uint64_t)v5);
  return swift_release(v5);
}

uint64_t sub_1001AB6A8(uint64_t a1, char a2, uint64_t a3, void (*a4)(uint64_t, uint64_t), uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  void (*v22)(char *, uint64_t);
  uint64_t v24;

  v10 = type metadata accessor for URL(0);
  v11 = *(_QWORD *)(v10 - 8);
  v13 = __chkstk_darwin(v10, v12);
  v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13, v16);
  v18 = (char *)&v24 - v17;
  if ((a2 & 1) != 0)
  {
    swift_errorRetain(a1);
    a4(a1, 1);
    return sub_1000057B0(a1, 1);
  }
  else
  {
    v19 = sub_10000732C((_QWORD *)(a3 + 56), *(_QWORD *)(a3 + 80));
    v20 = (_QWORD *)swift_allocObject(&unk_10026D840, 48, 7);
    v20[2] = a3;
    v20[3] = a1;
    v20[4] = a4;
    v20[5] = a5;
    v21 = sub_10000732C((_QWORD *)(*v19 + 16), *(_QWORD *)(*v19 + 40));
    type metadata accessor for LocalCache();
    swift_retain(a3);
    sub_1000057BC(a1, 0);
    swift_retain(a5);
    sub_10000840C();
    URL.appendingPathComponent(_:isDirectory:)(0x6169646F74737543, 0xEF64726F6365526ELL, 1);
    v22 = *(void (**)(char *, uint64_t))(v11 + 8);
    v22(v15, v10);
    sub_10000732C((_QWORD *)(*v21 + 16), *(_QWORD *)(*v21 + 40));
    sub_10009D320((uint64_t)v18, (uint64_t)sub_1001ABC14, (uint64_t)v20);
    v22(v18, v10);
    return swift_release(v20);
  }
}

uint64_t type metadata accessor for CustodianFamilyManager()
{
  return objc_opt_self(_TtC13appleaccountd22CustodianFamilyManager);
}

uint64_t sub_1001AB888()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1001AB8B4(uint64_t a1, char a2)
{
  uint64_t v2;

  return sub_1001AB6A8(a1, a2 & 1, *(_QWORD *)(v2 + 16), *(void (**)(uint64_t, uint64_t))(v2 + 24), *(_QWORD *)(v2 + 32));
}

uint64_t sub_1001AB8C4(uint64_t a1, char a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t))
{
  unint64_t v8;
  _QWORD *v9;

  if ((a2 & 1) != 0)
  {
    swift_errorRetain(a1);
    a5(a1, 1);
    return sub_1000057B0(a1, 1);
  }
  else
  {
    sub_1000057BC(a1, 0);
    swift_bridgeObjectRetain(a4);
    v9 = sub_1001AB988(v8, a1);
    sub_1000057B0(a1, 0);
    swift_bridgeObjectRelease(a4);
    a5((uint64_t)v9, 0);
    return swift_bridgeObjectRelease(v9);
  }
}

_QWORD *sub_1001AB988(unint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v26;
  id v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;

  v3 = a1;
  if (a1 >> 62)
    goto LABEL_28;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v4)
  {
    while (1)
    {
      v5 = 0;
      v35 = v3 & 0xFFFFFFFFFFFFFF8;
      v36 = v3 & 0xC000000000000001;
      v33 = a2;
      v34 = v3 + 32;
      v31 = v4;
      v32 = v3;
      while (v36)
      {
        v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v5, v3);
LABEL_9:
        v10 = v9;
        if (__OFADD__(v5++, 1))
          goto LABEL_27;
        v12 = *(_QWORD *)(a2 + 16);
        if (v12)
        {
          v37 = v5;
          v13 = type metadata accessor for CustodianRecord(0);
          v14 = *(_QWORD *)(v13 - 8);
          v15 = a2 + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
          v38 = *(_QWORD *)(v14 + 72);
          *(_QWORD *)&v16 = swift_bridgeObjectRetain(a2).n128_u64[0];
          while (1)
          {
            v17 = (uint64_t *)(v15 + *(int *)(v13 + 24));
            v19 = *v17;
            v18 = v17[1];
            v20 = v10;
            v21 = objc_msgSend(v10, "handle", v16);
            v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
            v24 = v23;

            if (v19 == v22 && v18 == v24)
            {

              a2 = v33;
              swift_bridgeObjectRelease(v33);
              v28 = v18;
              goto LABEL_23;
            }
            v26 = _stringCompareWithSmolCheck(_:_:expecting:)(v19, v18, v22, v24, 0);
            swift_bridgeObjectRelease(v24);
            if ((v26 & 1) != 0)
              break;
            v15 += v38;
            --v12;
            v10 = v20;
            if (!v12)
            {
              a2 = v33;
              swift_bridgeObjectRelease(v33);
              v4 = v31;
              v3 = v32;
              v5 = v37;
              goto LABEL_19;
            }
          }

          a2 = v33;
          v28 = v33;
LABEL_23:
          swift_bridgeObjectRelease(v28);
          v4 = v31;
          v3 = v32;
          v5 = v37;
        }
        else
        {
LABEL_19:
          v27 = objc_msgSend(v10, "isChild");
          if ((_DWORD)v27)
          {

          }
          else
          {
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v27);
            v6 = v10;
            v7 = _swiftEmptyArrayStorage[2];
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v7);
            v8 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v7, v6);
            specialized ContiguousArray._endMutation()(v8);
          }
        }
        if (v5 == v4)
          return _swiftEmptyArrayStorage;
      }
      if (v5 < *(_QWORD *)(v35 + 16))
        break;
      __break(1u);
LABEL_27:
      __break(1u);
LABEL_28:
      if (v3 < 0)
        v30 = v3;
      else
        v30 = v3 & 0xFFFFFFFFFFFFFF8;
      v4 = _CocoaArrayWrapper.endIndex.getter(v30);
      if (!v4)
        return _swiftEmptyArrayStorage;
    }
    v9 = *(id *)(v34 + 8 * v5);
    goto LABEL_9;
  }
  return _swiftEmptyArrayStorage;
}

uint64_t sub_1001ABBE0()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_bridgeObjectRelease(v0[3]);
  swift_release(v0[5]);
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1001ABC14(uint64_t a1, char a2)
{
  uint64_t v2;

  return sub_1001AB8C4(a1, a2 & 1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(void (**)(uint64_t, uint64_t))(v2 + 32));
}

uint64_t sub_1001ABC24@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1001ABC40(a1, a2, type metadata accessor for CustodianRecoveryKeys, &qword_100297050, (uint64_t)&unk_100220068, a3);
}

uint64_t sub_1001ABC40@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t)@<X2>, unint64_t *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;

  v12 = a3(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12, v14);
  v16 = (uint64_t *)((char *)&v22 - v15);
  v17 = type metadata accessor for JSONDecoder(0);
  v18 = swift_allocObject(v17, *(unsigned int *)(v17 + 48), *(unsigned __int16 *)(v17 + 52));
  v19 = JSONDecoder.init()(v18);
  v20 = sub_100005150(a4, a3, a5);
  dispatch thunk of JSONDecoder.decode<A>(_:from:)(v16, v12, a1, a2, v12, v20);
  swift_release(v19);
  sub_10003B730((uint64_t)v16, a6, a3);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v13 + 56))(a6, 0, 1, v12);
}

id sub_1001ABFBC()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for InheritanceMessageProcessor();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for InheritanceMessageProcessor()
{
  return objc_opt_self(_TtC13appleaccountd27InheritanceMessageProcessor);
}

uint64_t sub_1001AC074(_QWORD *a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  char v16;

  v4 = sub_1000080B4(&qword_1002970A8);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_10000732C(a1, v9);
  v11 = sub_1001AE720();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for InheritanceMessageProcessor.Message.CodingKeys, &type metadata for InheritanceMessageProcessor.Message.CodingKeys, v11, v9, v10);
  v16 = a2;
  v12 = sub_1000C1CC8();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v16, v13, v4, &type metadata for InheritanceMessageType, v12);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
}

uint64_t sub_1001AC16C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001AE720();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001AC194(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001AE720();
  return CodingKey.debugDescription.getter(a1, v2);
}

unint64_t sub_1001AC1BC@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  unint64_t result;

  result = sub_1001AE600(a1);
  if (!v2)
    *a2 = result;
  return result;
}

uint64_t sub_1001AC1E4(_QWORD *a1)
{
  char *v1;

  return sub_1001AC074(a1, *v1);
}

uint64_t sub_1001AC1FC(uint64_t a1, uint64_t a2)
{
  return sub_1001AC234(a1, a2, (uint64_t (*)(uint64_t))type metadata accessor for CustodianMessage, &qword_100297080, (uint64_t)&unk_10021F788);
}

uint64_t sub_1001AC218(uint64_t a1, uint64_t a2)
{
  return sub_1001AC234(a1, a2, type metadata accessor for CustodianInvitationMessage, &qword_100297058, (uint64_t)&unk_100222940);
}

uint64_t sub_1001AC234(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), unint64_t *a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v10 = type metadata accessor for JSONDecoder(0);
  v11 = swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
  v12 = JSONDecoder.init()(v11);
  v13 = a3(0);
  v14 = sub_100005150(a4, a3, a5);
  dispatch thunk of JSONDecoder.decode<A>(_:from:)(&v16, v13, a1, a2, v13, v14);
  swift_release(v12);
  return v16;
}

uint64_t sub_1001AC450(uint64_t a1, uint64_t a2)
{
  return sub_1001AC234(a1, a2, type metadata accessor for CustodianInvitationResponseMessage, &qword_100297060, (uint64_t)&unk_10021E490);
}

uint64_t sub_1001AC46C(uint64_t a1, uint64_t a2)
{
  return sub_1001AC234(a1, a2, type metadata accessor for ShareMessage, &qword_100297068, (uint64_t)&unk_10021E160);
}

uint64_t sub_1001AC488(uint64_t a1, uint64_t a2)
{
  return sub_1001AC234(a1, a2, type metadata accessor for FinalizeCustodianSetupMessage, &qword_100297070, (uint64_t)&unk_10021DD38);
}

uint64_t sub_1001AC4A4(uint64_t a1, uint64_t a2)
{
  return sub_1001AC234(a1, a2, type metadata accessor for CustodianRemovedMessage, &qword_100297078, (uint64_t)&unk_1002193D8);
}

uint64_t sub_1001AC4C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;

  v4 = type metadata accessor for JSONDecoder(0);
  v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  v6 = JSONDecoder.init()(v5);
  v7 = sub_1001AE480();
  dispatch thunk of JSONDecoder.decode<A>(_:from:)(&v9, &type metadata for InheritanceMessageProcessor.Message, a1, a2, &type metadata for InheritanceMessageProcessor.Message, v7);
  swift_release(v6);
  return v9;
}

void sub_1001AC6BC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  NSObject *v72;
  os_log_type_t v73;
  _BOOL4 v74;
  uint64_t v75;
  uint8_t *v76;
  uint64_t v77;
  id v78;
  uint64_t v79;
  char *v80;
  NSObject *v81;
  os_log_type_t v82;
  uint8_t *v83;
  _QWORD v84[33];
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;

  v5 = v4;
  v86 = a2;
  v87 = a3;
  v88 = a1;
  v7 = sub_1000080B4(&qword_100296FF8);
  __chkstk_darwin(v7, v8);
  v84[30] = (char *)v84 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for BeneficiaryRemovedMessage(0);
  v84[29] = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10, v11);
  v84[13] = (char *)v84 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12, v14);
  v84[15] = (char *)v84 - v15;
  v16 = type metadata accessor for UUID(0);
  v84[18] = *(_QWORD *)(v16 - 8);
  v84[19] = v16;
  __chkstk_darwin(v16, v17);
  v84[17] = (char *)v84 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_1000080B4(&qword_100297000);
  v21 = __chkstk_darwin(v19, v20);
  v84[28] = (char *)v84 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21, v23);
  v84[27] = (char *)v84 - v24;
  v85 = type metadata accessor for InheritanceAccessKeyMessage(0);
  v25 = *(_QWORD *)(v85 - 8);
  v26 = *(_QWORD *)(v25 + 64);
  v28 = __chkstk_darwin(v85, v27);
  v84[5] = (char *)v84 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = __chkstk_darwin(v28, v29);
  v84[16] = (char *)v84 - v31;
  v33 = __chkstk_darwin(v30, v32);
  v84[12] = (char *)v84 - v34;
  v36 = __chkstk_darwin(v33, v35);
  v38 = __chkstk_darwin(v36, v37);
  v84[4] = (char *)v84 - v39;
  v41 = __chkstk_darwin(v38, v40);
  v43 = (char *)v84 - v42;
  v45 = __chkstk_darwin(v41, v44);
  v84[14] = (char *)v84 - v46;
  v48 = __chkstk_darwin(v45, v47);
  v84[10] = (char *)v84 - v49;
  __chkstk_darwin(v48, v50);
  v84[31] = (char *)v84 - v51;
  v52 = sub_1000080B4(&qword_100297008);
  __chkstk_darwin(v52, v53);
  v84[26] = (char *)v84 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = type metadata accessor for InheritanceInvitationResponseMessage(0);
  v84[24] = *(_QWORD *)(v55 - 8);
  v84[25] = v55;
  v57 = __chkstk_darwin(v55, v56);
  v84[8] = (char *)v84 - ((v58 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v57, v59);
  v84[11] = (char *)v84 - v60;
  v61 = sub_1000080B4((uint64_t *)&unk_100297010);
  __chkstk_darwin(v61, v62);
  v84[23] = (char *)v84 - ((v63 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = type metadata accessor for InheritanceInvitationMessage(0);
  v84[21] = *(_QWORD *)(v64 - 8);
  v84[22] = v64;
  v66 = __chkstk_darwin(v64, v65);
  v84[7] = (char *)v84 - ((v67 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v66, v68);
  v84[9] = (char *)v84 - v69;
  if (qword_10028ADD0 != -1)
    swift_once(&qword_10028ADD0, sub_100046D50);
  v70 = type metadata accessor for Logger(0);
  sub_100005288(v70, (uint64_t)qword_1002A89F0);
  v71 = swift_bridgeObjectRetain_n(a4, 2);
  v72 = Logger.logObject.getter(v71);
  v73 = static os_log_type_t.info.getter(v72);
  v74 = os_log_type_enabled(v72, v73);
  v84[6] = v43;
  if (v74)
  {
    v84[20] = v10;
    v75 = swift_slowAlloc(12, -1);
    v84[3] = v26;
    v84[32] = v25;
    v76 = (uint8_t *)v75;
    v77 = swift_slowAlloc(32, -1);
    v90 = v77;
    *(_DWORD *)v76 = 136315138;
    swift_bridgeObjectRetain(a4);
    v89 = sub_1001DEF4C(v87, a4, &v90);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v89, &v90);
    swift_bridgeObjectRelease_n(a4, 3);
    _os_log_impl((void *)&_mh_execute_header, v72, v73, "Inheritance message processor will process message from %s.", v76, 0xCu);
    swift_arrayDestroy(v77, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v77, -1, -1);
    swift_slowDealloc(v76, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a4, 2);
  }
  v78 = objc_msgSend(*(id *)(*sub_10000732C((_QWORD *)(v5 + OBJC_IVAR____TtC13appleaccountd27InheritanceMessageProcessor_accountStore), *(_QWORD *)(v5 + OBJC_IVAR____TtC13appleaccountd27InheritanceMessageProcessor_accountStore + 24))+ 16), "aa_primaryAppleAccount");

  if (v78)
  {
    v80 = (char *)&loc_1001ACC9C + *((int *)qword_1001AE290 + sub_1001AC4C0(v88, v86));
    __asm { BR              X10 }
  }
  v81 = Logger.logObject.getter(v79);
  v82 = static os_log_type_t.error.getter(v81);
  if (os_log_type_enabled(v81, v82))
  {
    v83 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v83 = 0;
    _os_log_impl((void *)&_mh_execute_header, v81, v82, "Not logged in to AppleAccount, unable to process message.", v83, 2u);
    swift_slowDealloc(v83, -1, -1);
  }

}

uint64_t sub_1001AE2A8()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 16))
    swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001AE2D4(uint64_t a1)
{
  uint64_t v1;

  return sub_1001E0AD4(a1, *(uint64_t (**)(void))(v1 + 16));
}

uint64_t sub_1001AE2DC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001AE30C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;

  v1 = type metadata accessor for InheritanceAccessKeyMessage(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release(*(_QWORD *)(v0 + 16));
  v6 = v0 + v4;
  v7 = v0 + v4 + *(int *)(v1 + 20);
  v8 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = v6 + *(int *)(v1 + 24);
  v10 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  v11 = type metadata accessor for CloudShareInfo(0);
  swift_bridgeObjectRelease(*(_QWORD *)(v9 + *(int *)(v11 + 20) + 8));

  if (*(_QWORD *)(v0 + v5))
    swift_release(*(_QWORD *)(v0 + v5 + 8));
  v12 = (v5 + 23) & 0xFFFFFFFFFFFFFFF8;
  v13 = v12 + 16;
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v12 + 8));
  return swift_deallocObject(v0, v13, v3 | 7);
}

uint64_t sub_1001AE418(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v3 = *(_QWORD *)(type metadata accessor for InheritanceAccessKeyMessage(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_100161A88(a1, *(_QWORD *)(v1 + 16), v1 + v4, *(void (**)(uint64_t))(v1 + v5), *(_QWORD *)(v1 + v5 + 8), *(_QWORD *)(v1 + ((v5 + 23) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v1 + ((v5 + 23) & 0xFFFFFFFFFFFFFFF8) + 8));
}

unint64_t sub_1001AE480()
{
  unint64_t result;

  result = qword_100297048;
  if (!qword_100297048)
  {
    result = swift_getWitnessTable(&unk_100220E58, &type metadata for InheritanceMessageProcessor.Message);
    atomic_store(result, (unint64_t *)&qword_100297048);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for InheritanceMessageProcessor.Message(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1001AE510 + 4 * byte_100220D85[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1001AE544 + 4 * asc_100220D80[v4]))();
}

uint64_t sub_1001AE544(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001AE54C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001AE554);
  return result;
}

uint64_t sub_1001AE560(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001AE568);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1001AE56C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001AE574(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for InheritanceMessageProcessor.Message()
{
  return &type metadata for InheritanceMessageProcessor.Message;
}

unint64_t sub_1001AE590(uint64_t a1)
{
  unint64_t result;

  *(_QWORD *)(a1 + 8) = sub_1001AE480();
  result = sub_1001AE5BC();
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1001AE5BC()
{
  unint64_t result;

  result = qword_100297088;
  if (!qword_100297088)
  {
    result = swift_getWitnessTable(&unk_100220E14, &type metadata for InheritanceMessageProcessor.Message);
    atomic_store(result, (unint64_t *)&qword_100297088);
  }
  return result;
}

unint64_t sub_1001AE600(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v3 = sub_1000080B4(&qword_100297090);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a1[3];
  v9 = a1[4];
  v10 = (unint64_t)sub_10000732C(a1, v8);
  v11 = sub_1001AE720();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for InheritanceMessageProcessor.Message.CodingKeys, &type metadata for InheritanceMessageProcessor.Message.CodingKeys, v11, v8, v9);
  if (v1)
  {
    sub_100006F58(a1);
  }
  else
  {
    v12 = sub_1000C1C40();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v16, &type metadata for InheritanceMessageType, v13, v3, &type metadata for InheritanceMessageType, v12);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
    v10 = v16;
    sub_100006F58(a1);
  }
  return v10;
}

unint64_t sub_1001AE720()
{
  unint64_t result;

  result = qword_100297098;
  if (!qword_100297098)
  {
    result = swift_getWitnessTable(&unk_100220F44, &type metadata for InheritanceMessageProcessor.Message.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100297098);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for InheritanceMessageProcessor.Message.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1001AE7A4 + 4 * byte_100220D8A[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1001AE7C4 + 4 * byte_100220D8F[v4]))();
}

_BYTE *sub_1001AE7A4(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1001AE7C4(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1001AE7CC(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1001AE7D4(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1001AE7DC(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1001AE7E4(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for InheritanceMessageProcessor.Message.CodingKeys()
{
  return &type metadata for InheritanceMessageProcessor.Message.CodingKeys;
}

unint64_t sub_1001AE804()
{
  unint64_t result;

  result = qword_1002970B8;
  if (!qword_1002970B8)
  {
    result = swift_getWitnessTable(&unk_100220F1C, &type metadata for InheritanceMessageProcessor.Message.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002970B8);
  }
  return result;
}

unint64_t sub_1001AE84C()
{
  unint64_t result;

  result = qword_1002970C0;
  if (!qword_1002970C0)
  {
    result = swift_getWitnessTable(&unk_100220E8C, &type metadata for InheritanceMessageProcessor.Message.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002970C0);
  }
  return result;
}

unint64_t sub_1001AE894()
{
  unint64_t result;

  result = qword_1002970C8;
  if (!qword_1002970C8)
  {
    result = swift_getWitnessTable(&unk_100220EB4, &type metadata for InheritanceMessageProcessor.Message.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002970C8);
  }
  return result;
}

void sub_1001AE8D8()
{
  void *v0;
  id v1;
  void *v2;
  id v3;
  id v4;

  if (qos_class_self() >= QOS_CLASS_USER_INITIATED)
    objc_msgSend(v0, "setQualityOfService:", 25);
  v1 = objc_msgSend(v0, "configuration");
  if (v1)
  {
    v2 = v1;
    objc_msgSend(v1, "setAutomaticallyRetryNetworkFailures:", 0);

    v3 = objc_msgSend(v0, "configuration");
    if (v3)
    {
      v4 = v3;
      objc_msgSend(v3, "setDiscretionaryNetworkBehavior:", 0);

      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

void sub_1001AE98C(uint64_t a1, uint64_t a2)
{
  __asm { BR              X9 }
}

uint64_t sub_1001AE9E4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v4 = BYTE6(v24);
  if (BYTE6(v24))
  {
    *(_QWORD *)(v3 - 104) = v2;
    v5 = BYTE6(v24);
    v6 = sub_1001D4B98(0, BYTE6(v24), 0);
    v2 = *(_QWORD *)(v3 - 104);
    if ((_DWORD)v1)
    {
      if ((_DWORD)v1 == 1)
        v7 = (int)a1;
      else
        v7 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v7 = 0;
    }
    *(_QWORD *)(v3 - 136) = v24 & 0x3FFFFFFFFFFFFFFFLL;
    *(_QWORD *)(v3 - 128) = v1;
    while (v5)
    {
      if ((_DWORD)v1)
      {
        if ((_DWORD)v1 == 1)
        {
          if (v7 < (int)a1 || v7 >= a1 >> 32)
            goto LABEL_29;
          v8 = ((uint64_t (*)(uint64_t))__DataStorage._bytes.getter)(v6);
          if (!v8)
          {
            __break(1u);
LABEL_36:
            __break(1u);
          }
          v9 = v8;
          v10 = __DataStorage._offset.getter();
          v11 = v7 - v10;
          if (__OFSUB__(v7, v10))
            goto LABEL_32;
        }
        else
        {
          if (v7 < *(_QWORD *)(a1 + 16))
            goto LABEL_31;
          if (v7 >= *(_QWORD *)(a1 + 24))
            goto LABEL_33;
          v13 = ((uint64_t (*)(uint64_t))__DataStorage._bytes.getter)(v6);
          if (!v13)
            goto LABEL_36;
          v9 = v13;
          v14 = __DataStorage._offset.getter();
          v11 = v7 - v14;
          if (__OFSUB__(v7, v14))
            goto LABEL_34;
        }
        v12 = *(_BYTE *)(v9 + v11);
      }
      else
      {
        if (v7 >= BYTE6(v24))
          goto LABEL_30;
        *(_QWORD *)(v3 - 118) = a1;
        *(_WORD *)(v3 - 110) = v24;
        *(_BYTE *)(v3 - 108) = BYTE2(v24);
        *(_BYTE *)(v3 - 107) = BYTE3(v24);
        *(_BYTE *)(v3 - 106) = BYTE4(v24);
        *(_BYTE *)(v3 - 105) = BYTE5(v24);
        v12 = *(_BYTE *)(v3 - 118 + v7);
      }
      v15 = sub_1000080B4(&qword_100290F10);
      v16 = swift_allocObject(v15, 72, 7);
      *(_OWORD *)(v16 + 16) = xmmword_100218E30;
      *(_QWORD *)(v16 + 56) = &type metadata for UInt8;
      *(_QWORD *)(v16 + 64) = &protocol witness table for UInt8;
      *(_BYTE *)(v16 + 32) = v12;
      v6 = String.init(format:_:)(0x786868323025, 0xE600000000000000, v16);
      v17 = v6;
      v19 = v18;
      *(_QWORD *)(v3 - 104) = v2;
      v21 = *(_QWORD *)(v2 + 16);
      v20 = *(_QWORD *)(v2 + 24);
      if (v21 >= v20 >> 1)
      {
        v6 = sub_1001D4B98(v20 > 1, v21 + 1, 1);
        v2 = *(_QWORD *)(v3 - 104);
      }
      *(_QWORD *)(v2 + 16) = v21 + 1;
      v22 = v2 + 16 * v21;
      *(_QWORD *)(v22 + 32) = v17;
      *(_QWORD *)(v22 + 40) = v19;
      ++v7;
      --v5;
      --v4;
      v1 = *(_QWORD *)(v3 - 128);
      if (!v4)
        return v2;
    }
    __break(1u);
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
    __break(1u);
    JUMPOUT(0x1001AECFCLL);
  }
  return v2;
}

uint64_t Data.hash<A>(using:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t AssociatedConformanceWitness;
  _QWORD v16[2];

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a5, a4, &protocol requirements base descriptor for HashFunction, &associated type descriptor for HashFunction.Digest);
  __chkstk_darwin(AssociatedTypeWitness, v10);
  v12 = (char *)v16 - v11;
  v16[0] = a2;
  v16[1] = a3;
  v13 = sub_1000D3750();
  static HashFunction.hash<A>(data:)(v16, a4, &type metadata for Data, a5, v13);
  AssociatedConformanceWitness = swift_getAssociatedConformanceWitness(a5, a4, AssociatedTypeWitness, &protocol requirements base descriptor for HashFunction, &associated conformance descriptor for HashFunction.HashFunction.Digest: Digest);
  return Data.init<A>(_:)(v12, AssociatedTypeWitness, *(_QWORD *)(AssociatedConformanceWitness + 32));
}

uint64_t sub_1001AEE10(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  _BYTE *v9;
  unint64_t v10;
  unint64_t v11;
  Swift::Int v12;
  uint64_t v13;
  __int128 v17[2];
  uint64_t v18;
  __int128 v19;
  _QWORD v20[3];
  uint64_t v21;
  uint64_t v22;

  *(_QWORD *)&v19 = a1;
  *((_QWORD *)&v19 + 1) = a2;
  swift_bridgeObjectRetain(a2);
  v2 = sub_1000080B4(&qword_1002970E8);
  if (!swift_dynamicCast(v17, &v19, &type metadata for String.UTF8View, v2, 6))
  {
    v18 = 0;
    memset(v17, 0, sizeof(v17));
    sub_100004934((uint64_t)v17, &qword_1002970F0);
    if ((a2 & 0x1000000000000000) != 0)
      goto LABEL_20;
    if ((a2 & 0x2000000000000000) != 0)
    {
      v20[0] = a1;
      v20[1] = a2 & 0xFFFFFFFFFFFFFFLL;
      v7 = (char *)v20 + (HIBYTE(a2) & 0xF);
      v8 = v20;
    }
    else
    {
      if ((a1 & 0x1000000000000000) != 0)
      {
        v5 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
        v6 = a1 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        v5 = _StringObject.sharedUTF8.getter(a1, a2);
      }
      if (v5)
        v7 = (_BYTE *)(v5 + v6);
      else
        v7 = 0;
      v8 = (_BYTE *)v5;
    }
    v9 = sub_1001B0B64(v8, v7);
    v11 = v10;
    if (v10 >> 60 != 15)
    {
      swift_bridgeObjectRelease(a2);
      *(_QWORD *)&v17[0] = v9;
      *((_QWORD *)&v17[0] + 1) = v11;
      return *(_QWORD *)&v17[0];
    }
    if ((a2 & 0x1000000000000000) != 0)
    {
LABEL_20:
      v12 = String.UTF8View._foreignCount()();
    }
    else if ((a2 & 0x2000000000000000) != 0)
    {
      v12 = HIBYTE(a2) & 0xF;
    }
    else
    {
      v12 = a1 & 0xFFFFFFFFFFFFLL;
    }
    *(_QWORD *)&v17[0] = sub_1001B0BC8(v12);
    *((_QWORD *)&v17[0] + 1) = v13;
    __chkstk_darwin(*(_QWORD *)&v17[0], v13);
    sub_1001B0338();
    __asm { BR              X12 }
  }
  sub_10003A190(v17, (uint64_t)v20);
  v3 = v21;
  v4 = v22;
  sub_10000732C(v20, v21);
  dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)(&v19, sub_1001D5A18, 0, &type metadata for Data._Representation, v3, v4);
  swift_bridgeObjectRelease(a2);
  v17[0] = v19;
  sub_100006F58(v20);
  return *(_QWORD *)&v17[0];
}

void sub_1001AF314(uint64_t a1, uint64_t a2)
{
  char *v2;
  _QWORD v3[5];

  v3[3] = &type metadata for Data;
  v3[4] = &protocol witness table for Data;
  v3[0] = a1;
  v3[1] = a2;
  v2 = (char *)&loc_1001AF378 + dword_1001AF5AC[sub_10000732C(v3, (uint64_t)&type metadata for Data)[1] >> 62];
  __asm { BR              X10 }
}

uint64_t sub_1001AF388()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  __int16 v7;
  char v8;
  char v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;

  v6 = v2;
  v7 = v3;
  v8 = BYTE2(v3);
  v9 = BYTE3(v3);
  v10 = BYTE4(v3);
  v11 = BYTE5(v3);
  sub_10000F450(v1, v0);
  sub_1001D5A18(&v6, (_BYTE *)&v6 + BYTE6(v3), &v12);
  sub_10000F494(v1, v0);
  v4 = v12;
  sub_100006F58(&v13);
  return v4;
}

uint64_t static Data.randomBytes(count:)(uint64_t a1)
{
  return sub_1001B0C8C(a1);
}

void Data.encrypt(using:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = sub_1000080B4(&qword_1002970D0);
  __chkstk_darwin(v3, v4);
  v5 = type metadata accessor for AES.GCM.SealedBox(0);
  __chkstk_darwin(v5, v6);
  v10 = type metadata accessor for AES.GCM.Nonce(0);
  __chkstk_darwin(v10, v7);
  v8 = type metadata accessor for SymmetricKey(0);
  __chkstk_darwin(v8, v9);
  __asm { BR              X10 }
}

uint64_t sub_1001AF704@<X0>(int a1@<W8>)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t result;
  unint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;

  if (BYTE6(v1) == 16)
    goto LABEL_9;
  if (a1)
  {
    if (a1 == 1)
    {
      LODWORD(v11) = HIDWORD(v5) - v5;
      if (!__OFSUB__(HIDWORD(v5), (_DWORD)v5))
      {
        v11 = (int)v11;
        goto LABEL_8;
      }
      __break(1u);
LABEL_14:
      __break(1u);
      JUMPOUT(0x1001AF9A4);
    }
    v13 = *(_QWORD *)(v5 + 16);
    v12 = *(_QWORD *)(v5 + 24);
    v14 = __OFSUB__(v12, v13);
    v11 = v12 - v13;
    if (v14)
      goto LABEL_14;
  }
  else
  {
    v11 = BYTE6(v1);
  }
LABEL_8:
  if (v11 != 32)
  {
    v18 = sub_1001B0DD0();
    v19 = swift_allocError(&type metadata for CryptoError, v18, 0, 0);
    *v20 = 10;
    return swift_willThrow(v19);
  }
LABEL_9:
  *(_QWORD *)(v10 - 96) = v5;
  *(_QWORD *)(v10 - 88) = v1;
  sub_10000F450(v5, v1);
  ((void (*)(uint64_t, _QWORD *, void *))SymmetricKey.init<A>(data:))(v10 - 96, &type metadata for Data, &protocol witness table for Data);
  v15 = sub_1001B0C8C(16);
  if (v9)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v6, v3);
  v21 = v15;
  v22 = v16;
  *(_QWORD *)(v10 - 96) = v15;
  *(_QWORD *)(v10 - 88) = v16;
  sub_10000F450(v15, v16);
  *(_QWORD *)(v10 - 152) = sub_1000D3750();
  ((void (*)(uint64_t, _QWORD *))AES.GCM.Nonce.init<A>(data:))(v10 - 96, &type metadata for Data);
  *(_QWORD *)(v10 - 168) = v21;
  *(_QWORD *)(v10 - 160) = v22;
  v23 = *(_QWORD *)(v10 - 112);
  v24 = *(_QWORD *)(v10 - 104);
  *(_QWORD *)(v10 - 96) = *(_QWORD *)(v10 - 120);
  *(_QWORD *)(v10 - 88) = v23;
  v25 = *(_QWORD *)(v10 - 72);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 16))(v2, v7, v25);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v24 + 56))(v2, 0, 1, v25);
  ((void (*)(uint64_t, uint64_t, uint64_t, _QWORD *, _QWORD))static AES.GCM.seal<A>(_:using:nonce:))(v10 - 96, v6, v2, &type metadata for Data, *(_QWORD *)(v10 - 152));
  v26 = sub_100004934(v2, &qword_1002970D0);
  v27 = ((uint64_t (*)(uint64_t))AES.GCM.SealedBox.tag.getter)(v26);
  v29 = v28;
  v30 = ((uint64_t (*)(void))AES.GCM.SealedBox.ciphertext.getter)();
  sub_1001AF314(v30, v31);
  v33 = v32;
  *(_QWORD *)(v10 - 112) = v34;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v10 - 144) + 8))(v8, *(_QWORD *)(v10 - 136));
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v10 - 104) + 8))(v7, *(_QWORD *)(v10 - 72));
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v6, v3);
  v35 = *(_QWORD **)(v10 - 128);
  v36 = *(_QWORD *)(v10 - 160);
  *v35 = *(_QWORD *)(v10 - 168);
  v35[1] = v36;
  v35[2] = v27;
  v35[3] = v29;
  v37 = *(_QWORD *)(v10 - 112);
  v35[4] = v33;
  v35[5] = v37;
  return result;
}

void EncryptedData.decrypt(using:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[3];
  uint64_t v12;

  v3 = type metadata accessor for AES.GCM.SealedBox(0);
  v11[0] = *(_QWORD *)(v3 - 8);
  v11[1] = v3;
  __chkstk_darwin(v3, v4);
  v11[2] = (char *)v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for AES.GCM.Nonce(0);
  v7 = __chkstk_darwin(v12, v6);
  __chkstk_darwin(v7, v8);
  v9 = type metadata accessor for SymmetricKey(0);
  __chkstk_darwin(v9, v10);
  __asm { BR              X10 }
}

uint64_t sub_1001AFAC4@<X0>(int a1@<W8>)
{
  uint64_t v1;
  _OWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _BYTE *v20;

  if (BYTE6(v1) == 16)
    goto LABEL_9;
  if (a1)
  {
    if (a1 == 1)
    {
      LODWORD(v11) = HIDWORD(v9) - v9;
      if (!__OFSUB__(HIDWORD(v9), (_DWORD)v9))
      {
        v11 = (int)v11;
        goto LABEL_8;
      }
      __break(1u);
LABEL_16:
      __break(1u);
      JUMPOUT(0x1001AFD00);
    }
    v13 = *(_QWORD *)(v9 + 16);
    v12 = *(_QWORD *)(v9 + 24);
    v14 = __OFSUB__(v12, v13);
    v11 = v12 - v13;
    if (v14)
      goto LABEL_16;
  }
  else
  {
    v11 = BYTE6(v1);
  }
LABEL_8:
  if (v11 != 32)
  {
    v18 = sub_1001B0DD0();
    v19 = swift_allocError(&type metadata for CryptoError, v18, 0, 0);
    *v20 = 10;
    swift_willThrow(v19);
    return v1;
  }
LABEL_9:
  *(_QWORD *)(v10 - 144) = v9;
  *(_QWORD *)(v10 - 136) = v1;
  sub_10000F450(v9, v1);
  ((void (*)(uint64_t, _QWORD *, void *))SymmetricKey.init<A>(data:))(v10 - 144, &type metadata for Data, &protocol witness table for Data);
  *(_OWORD *)(v10 - 96) = *v2;
  *(_OWORD *)(v10 - 144) = *v2;
  sub_1001B0E14(v10 - 96);
  v1 = sub_1000D3750();
  v15 = *(_QWORD *)(v10 - 72);
  ((void (*)(uint64_t, _QWORD *, uint64_t))AES.GCM.Nonce.init<A>(data:))(v10 - 144, &type metadata for Data, v1);
  if (!v15)
  {
    (*(void (**)(uint64_t, uint64_t, _QWORD))(v7 + 16))(v8, v6, *(_QWORD *)(v10 - 168));
    v16 = v2[2];
    *(_OWORD *)(v10 - 160) = v2[1];
    *(_OWORD *)(v10 - 144) = v16;
    *(_OWORD *)(v10 - 128) = v2[1];
    *(_OWORD *)(v10 - 112) = v16;
    sub_1001B0E14(v10 - 112);
    sub_1001B0E14(v10 - 128);
    v17 = *(_QWORD *)(v10 - 176);
    ((void (*)(uint64_t, uint64_t, uint64_t, _QWORD *, _QWORD *, uint64_t, uint64_t))AES.GCM.SealedBox.init<A, B>(nonce:ciphertext:tag:))(v8, v10 - 144, v10 - 160, &type metadata for Data, &type metadata for Data, v1, v1);
    v1 = ((uint64_t (*)(uint64_t, uint64_t))static AES.GCM.open(_:using:))(v17, v5);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)(v10 - 192) + 8))(v17, *(_QWORD *)(v10 - 184));
    (*(void (**)(uint64_t, _QWORD))(v7 + 8))(v6, *(_QWORD *)(v10 - 168));
  }
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v5, v3);
  return v1;
}

uint64_t CryptoError.rawValue.getter(char a1)
{
  return qword_100221100[a1];
}

BOOL sub_1001AFD28(char *a1, char *a2)
{
  return qword_100221100[*a1] == qword_100221100[*a2];
}

Swift::Int sub_1001AFD4C()
{
  char *v0;
  uint64_t v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(qword_100221100[v1]);
  return Hasher._finalize()();
}

void sub_1001AFD98()
{
  char *v0;

  Hasher._combine(_:)(qword_100221100[*v0]);
}

Swift::Int sub_1001AFDCC()
{
  char *v0;
  uint64_t v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3);
  Hasher._combine(_:)(qword_100221100[v1]);
  return Hasher._finalize()();
}

uint64_t sub_1001AFE14@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = _s13appleaccountd11CryptoErrorO8rawValueACSgSi_tcfC_0(*a1);
  *a2 = result;
  return result;
}

void sub_1001AFE3C(_QWORD *a1@<X8>)
{
  char *v1;

  *a1 = qword_100221100[*v1];
}

uint64_t sub_1001AFE54(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;

  v4 = sub_1001B1484();
  v5 = sub_10000AC84();
  return Error<>._code.getter(a1, a2, v4, v5);
}

uint64_t Data.hexadecimalString.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_1001AE98C(a1, a2);
  v3 = v2;
  v4 = sub_1000080B4((uint64_t *)&unk_10028E800);
  v5 = sub_1000077E0((unint64_t *)&qword_10028C790, (uint64_t *)&unk_10028E800, (uint64_t)&protocol conformance descriptor for [A]);
  v6 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v4, v5);
  swift_bridgeObjectRelease(v3);
  return v6;
}

uint64_t EncryptedData.init(initializationVector:tag:cipherText:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>)
{
  *a7 = result;
  a7[1] = a2;
  a7[2] = a3;
  a7[3] = a4;
  a7[4] = a5;
  a7[5] = a6;
  return result;
}

uint64_t Data.hmac<A>(key:using:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  uint64_t WitnessTable;
  uint64_t v23;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;

  v26 = a5;
  v12 = type metadata accessor for HashedAuthenticationCode(0, a6, a7);
  __chkstk_darwin(v12, v13);
  v15 = (char *)&v25 - v14;
  v16 = type metadata accessor for SymmetricKey(0);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16, v18);
  v20 = (char *)&v25 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = a1;
  v28 = a2;
  sub_10000F450(a1, a2);
  SymmetricKey.init<A>(data:)(&v27, &type metadata for Data, &protocol witness table for Data);
  v27 = a4;
  v28 = v26;
  v21 = sub_1000D3750();
  static HMAC.authenticationCode<A>(for:using:)(&v27, v20, a6, &type metadata for Data, a7, v21);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for HashedAuthenticationCode<A>, v12);
  v23 = Data.init<A>(_:)(v15, v12, WitnessTable);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v20, v16);
  return v23;
}

uint64_t EncryptedData.initializationVector.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)v0;
  sub_10000F450(*(_QWORD *)v0, *(_QWORD *)(v0 + 8));
  return v1;
}

uint64_t EncryptedData.tag.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  sub_10000F450(v1, *(_QWORD *)(v0 + 24));
  return v1;
}

uint64_t EncryptedData.cipherText.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  sub_10000F450(v1, *(_QWORD *)(v0 + 40));
  return v1;
}

double EncryptedData.init(from:)@<D0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2;
  double result;
  __int128 v5;
  _OWORD v6[2];
  __int128 v7;

  sub_1001B0E40(a1, (uint64_t *)v6);
  if (!v2)
  {
    v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
    result = *(double *)&v7;
    a2[2] = v7;
  }
  return result;
}

uint64_t EncryptedData.encode(to:)(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v13;
  _QWORD v14[3];
  uint64_t v15;
  uint64_t v16;

  v3 = a1[3];
  v4 = a1[4];
  sub_10000732C(a1, v3);
  dispatch thunk of Encoder.unkeyedContainer()(v14, v3, v4);
  v13 = *v1;
  v5 = v15;
  v6 = v16;
  sub_1000067AC((uint64_t)v14, v15);
  v7 = sub_10000F4D8();
  dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)(&v13, &type metadata for Data, v7, v5, v6);
  if (!v2)
  {
    v13 = v1[1];
    v8 = v15;
    v9 = v16;
    sub_1000067AC((uint64_t)v14, v15);
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)(&v13, &type metadata for Data, v7, v8, v9);
    v13 = v1[2];
    v10 = v15;
    v11 = v16;
    sub_1000067AC((uint64_t)v14, v15);
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)(&v13, &type metadata for Data, v7, v10, v11);
  }
  return sub_100006F58(v14);
}

uint64_t sub_1001B02AC(_QWORD *a1)
{
  return EncryptedData.encode(to:)(a1);
}

uint64_t sub_1001B02C0(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;

  v5 = a1;
  v6 = a1 >> 16;
  v7 = (unsigned __int16)a1 >> 14;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    v13 = String.UTF16View.index(_:offsetBy:)(15, v6, a2);
    v14 = v13 + (v7 << 16);
    v15 = v13 & 0xFFFFFFFFFFFFFFFCLL | v5 & 3;
    v16 = v14 & 0xFFFFFFFFFFFF0000;
    if (!v7)
      v16 = v15;
    return v16 | 4;
  }
  else
  {
    v8 = String.UTF8View._foreignIndex(_:offsetBy:)(15, v6);
    v9 = v8 + (v7 << 16);
    v10 = v8 & 0xFFFFFFFFFFFFFFFCLL | v5 & 3;
    v11 = v9 & 0xFFFFFFFFFFFF0000;
    if (!v7)
      v11 = v10;
    return v11 | 8;
  }
}

void sub_1001B0338()
{
  __asm { BR              X11 }
}

_QWORD *sub_1001B0398@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *(*v3)(_QWORD **__return_ptr, uint64_t *, char *);
  uint64_t v4;
  _QWORD *result;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unsigned int v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  unsigned __int8 v12;

  v8 = v4;
  LOWORD(v9) = a1;
  BYTE2(v9) = BYTE2(a1);
  HIBYTE(v9) = BYTE3(a1);
  v10 = BYTE4(a1);
  v11 = BYTE5(a1);
  v12 = BYTE6(a1);
  result = v3(&v7, &v8, (char *)&v8 + BYTE6(a1));
  if (!v2)
    result = v7;
  v6 = v9 | ((unint64_t)v10 << 32) | ((unint64_t)v11 << 40) | ((unint64_t)v12 << 48);
  *v1 = v8;
  v1[1] = v6;
  return result;
}

void sub_1001B0628(uint64_t a1)
{
  __asm { BR              X11 }
}

uint64_t sub_1001B0684@<X0>(uint64_t a1@<X8>, uint64_t a2, uint64_t bytes, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  _QWORD *v17;
  size_t v18;
  uint64_t v19;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned __int8 v24;
  unsigned __int8 v25;
  unsigned __int8 v26;

  v22 = v19;
  LOWORD(v23) = a1;
  BYTE2(v23) = BYTE2(a1);
  HIBYTE(v23) = BYTE3(a1);
  v24 = BYTE4(a1);
  v25 = BYTE5(a1);
  v26 = BYTE6(a1);
  result = SecRandomCopyBytes(kSecRandomDefault, v18, &v22);
  v21 = v23 | ((unint64_t)v24 << 32) | ((unint64_t)v25 << 40) | ((unint64_t)v26 << 48);
  *v17 = v22;
  v17[1] = v21;
  return result;
}

_QWORD *sub_1001B091C(_QWORD *(*a1)(uint64_t *__return_ptr, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;

  if (a3)
  {
    result = a1(&v6, a3, a4 - a3);
    if (v4)
      return result;
    return (_QWORD *)v6;
  }
  result = a1(&v6, 0, 0);
  if (!v4)
    return (_QWORD *)v6;
  return result;
}

char *sub_1001B0980(uint64_t a1, uint64_t a2, _QWORD *(*a3)(uint64_t *__return_ptr, char *, char *))
{
  uint64_t v3;
  char *result;
  char *v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  result = (char *)__DataStorage._bytes.getter();
  if (!result)
    goto LABEL_12;
  v8 = result;
  result = (char *)__DataStorage._offset.getter();
  v9 = a1 - (_QWORD)result;
  if (__OFSUB__(a1, result))
  {
    __break(1u);
    goto LABEL_11;
  }
  v10 = __OFSUB__(a2, a1);
  v11 = a2 - a1;
  if (v10)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    return result;
  }
  v12 = __DataStorage._length.getter();
  if (v12 >= v11)
    v13 = v11;
  else
    v13 = v12;
  result = (char *)a3(&v14, &v8[v9], &v8[v9 + v13]);
  if (!v3)
    return (char *)v14;
  return result;
}

uint64_t sub_1001B0A2C@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;

  if (result)
  {
    v5 = result;
    v8 = *a3;
    v7 = a3[1];
    swift_bridgeObjectRetain(v7);
    result = _StringGuts.copyUTF8(into:)(v5, a2, v8, v7);
    if ((v9 & 1) == 0)
    {
      v10 = result;
      result = swift_bridgeObjectRelease(v7);
      *a4 = 0;
      a4[1] = 0xE000000000000000;
      a4[2] = 15;
      a4[3] = v10;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1001B0AB4(uint64_t a1)
{
  _QWORD *v2;
  _BYTE *v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v7;
  _QWORD v8[3];
  uint64_t v9;
  uint64_t v10;

  v9 = sub_1000080B4(&qword_1002970F8);
  v10 = sub_1000077E0(&qword_100297100, &qword_1002970F8, (uint64_t)&protocol conformance descriptor for <A> [A]);
  v8[0] = a1;
  v2 = sub_10000732C(v8, v9);
  v3 = (_BYTE *)(*v2 + 32);
  v4 = &v3[*(_QWORD *)(*v2 + 16)];
  swift_bridgeObjectRetain(a1);
  sub_1001D5A18(v3, v4, &v7);
  v5 = v7;
  sub_100006F58(v8);
  return v5;
}

_BYTE *sub_1001B0B64(_BYTE *result, _BYTE *a2)
{
  uint64_t v2;

  if (result)
  {
    v2 = a2 - result;
    if (a2 == result)
    {
      return 0;
    }
    else if (v2 <= 14)
    {
      return (_BYTE *)sub_1001D5CE0(result, a2);
    }
    else if ((unint64_t)v2 >= 0x7FFFFFFF)
    {
      return (_BYTE *)sub_1001D5DA0((uint64_t)result, (uint64_t)a2);
    }
    else
    {
      return (_BYTE *)sub_1001D5E18((uint64_t)result, (uint64_t)a2);
    }
  }
  return result;
}

uint64_t sub_1001B0BC8(uint64_t result)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (result)
  {
    v1 = result;
    if (result <= 14)
    {
      if (result < 0)
        __break(1u);
      else
        return 0;
    }
    else
    {
      v2 = type metadata accessor for __DataStorage(0);
      swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
      __DataStorage.init(length:)(v1);
      if (v1 >= 0x7FFFFFFF)
      {
        v3 = type metadata accessor for Data.RangeReference(0);
        result = swift_allocObject(v3, 32, 7);
        *(_QWORD *)(result + 16) = 0;
        *(_QWORD *)(result + 24) = v1;
      }
      else
      {
        return v1 << 32;
      }
    }
  }
  return result;
}

uint64_t _s13appleaccountd11CryptoErrorO8rawValueACSgSi_tcfC_0(uint64_t a1)
{
  if ((unint64_t)(a1 + 4320) > 0x14)
    return 13;
  else
    return asc_10020F6FE[a1 + 4320];
}

uint64_t sub_1001B0C8C(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  char v9;
  unint64_t v10;
  char *v11;
  char v12;
  uint64_t v14;
  unint64_t v15;

  v14 = sub_1001B0BC8(a1);
  v15 = v2;
  sub_1001B0628((uint64_t)&v14);
  if (v1)
    return sub_10000F494(v14, v15);
  v4 = v3;
  if (v3)
  {
    v5 = static os_log_type_t.error.getter();
    v6 = sub_1000080B4(&qword_100290F10);
    v7 = swift_allocObject(v6, 72, 7);
    *(_OWORD *)(v7 + 16) = xmmword_100218E30;
    *(_QWORD *)(v7 + 56) = &type metadata for Int32;
    *(_QWORD *)(v7 + 64) = &protocol witness table for Int32;
    *(_DWORD *)(v7 + 32) = v4;
    sub_1000E1414();
    v8 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:_:_:)(v5, &_mh_execute_header, v8, "Error generating random data. Error code - %i", v14);
    swift_bridgeObjectRelease(v7);

    v9 = _s13appleaccountd11CryptoErrorO8rawValueACSgSi_tcfC_0(v4);
    v10 = sub_1001B0DD0();
    swift_allocError(&type metadata for CryptoError, v10, 0, 0);
    if (v9 == 13)
      v12 = 8;
    else
      v12 = v9;
    *v11 = v12;
    swift_willThrow();
    return sub_10000F494(v14, v15);
  }
  return v14;
}

unint64_t sub_1001B0DD0()
{
  unint64_t result;

  result = qword_1002970D8;
  if (!qword_1002970D8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CryptoError, &type metadata for CryptoError);
    atomic_store(result, (unint64_t *)&qword_1002970D8);
  }
  return result;
}

uint64_t sub_1001B0E14(uint64_t a1)
{
  sub_10000F450(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  return a1;
}

uint64_t sub_1001B0E40@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  _QWORD v27[3];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v5 = a1[3];
  v6 = a1[4];
  sub_10000732C(a1, v5);
  dispatch thunk of Decoder.unkeyedContainer()(v27, v5, v6);
  if (v2)
    return sub_100006F58(a1);
  v7 = v28;
  v8 = v29;
  sub_1000067AC((uint64_t)v27, v28);
  v9 = sub_10000F40C();
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)(&v25, &type metadata for Data, &type metadata for Data, v9, v7, v8);
  v10 = v25;
  v11 = v26;
  v12 = v28;
  v13 = v29;
  sub_1000067AC((uint64_t)v27, v28);
  sub_10000F450(v10, v11);
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)(&v25, &type metadata for Data, &type metadata for Data, v9, v12, v13);
  v15 = v25;
  v14 = v26;
  v16 = v28;
  v24 = v29;
  sub_1000067AC((uint64_t)v27, v28);
  v30 = v15;
  v17 = v15;
  v18 = v14;
  sub_10000F450(v17, v14);
  dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)(&v25, &type metadata for Data, &type metadata for Data, v9, v16, v24);
  v19 = v25;
  v20 = v26;
  sub_10000F450(v25, v26);
  sub_100006F58(v27);
  sub_10000F450(v10, v11);
  v21 = v18;
  v22 = v30;
  sub_10000F450(v30, v21);
  sub_10000F450(v19, v20);
  sub_10000F494(v19, v20);
  sub_10000F494(v22, v21);
  sub_10000F494(v10, v11);
  sub_100006F58(a1);
  sub_10000F494(v10, v11);
  sub_10000F494(v22, v21);
  result = sub_10000F494(v19, v20);
  *a2 = v10;
  a2[1] = v11;
  a2[2] = v22;
  a2[3] = v21;
  a2[4] = v19;
  a2[5] = v20;
  return result;
}

unint64_t sub_1001B10C8()
{
  unint64_t result;

  result = qword_1002970E0;
  if (!qword_1002970E0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CryptoError, &type metadata for CryptoError);
    atomic_store(result, (unint64_t *)&qword_1002970E0);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for CryptoError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 12 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 12) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF4)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF3)
    return ((uint64_t (*)(void))((char *)&loc_1001B1158 + 4 * byte_100220F9D[v4]))();
  *a1 = a2 + 12;
  return ((uint64_t (*)(void))((char *)sub_1001B118C + 4 * byte_100220F98[v4]))();
}

uint64_t sub_1001B118C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001B1194(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001B119CLL);
  return result;
}

uint64_t sub_1001B11A8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001B11B0);
  *(_BYTE *)result = a2 + 12;
  return result;
}

uint64_t sub_1001B11B4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001B11BC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CryptoError()
{
  return &type metadata for CryptoError;
}

uint64_t destroy for EncryptedData(uint64_t a1)
{
  sub_10000F494(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  sub_10000F494(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  return sub_10000F494(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
}

uint64_t *initializeWithCopy for EncryptedData(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v4 = *a2;
  v5 = a2[1];
  sub_10000F450(*a2, v5);
  *a1 = v4;
  a1[1] = v5;
  v6 = a2[2];
  v7 = a2[3];
  sub_10000F450(v6, v7);
  a1[2] = v6;
  a1[3] = v7;
  v9 = a2[4];
  v8 = a2[5];
  sub_10000F450(v9, v8);
  a1[4] = v9;
  a1[5] = v8;
  return a1;
}

uint64_t *assignWithCopy for EncryptedData(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;

  v4 = *a2;
  v5 = a2[1];
  sub_10000F450(*a2, v5);
  v6 = *a1;
  v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  sub_10000F494(v6, v7);
  v8 = a2[2];
  v9 = a2[3];
  sub_10000F450(v8, v9);
  v10 = a1[2];
  v11 = a1[3];
  a1[2] = v8;
  a1[3] = v9;
  sub_10000F494(v10, v11);
  v13 = a2[4];
  v12 = a2[5];
  sub_10000F450(v13, v12);
  v14 = a1[4];
  v15 = a1[5];
  a1[4] = v13;
  a1[5] = v12;
  sub_10000F494(v14, v15);
  return a1;
}

uint64_t *assignWithTake for EncryptedData(uint64_t *a1, _OWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v4 = *a1;
  v5 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_10000F494(v4, v5);
  v6 = a1[2];
  v7 = a1[3];
  *((_OWORD *)a1 + 1) = a2[1];
  sub_10000F494(v6, v7);
  v8 = a1[4];
  v9 = a1[5];
  *((_OWORD *)a1 + 2) = a2[2];
  sub_10000F494(v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for EncryptedData(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xD && *(_BYTE *)(a1 + 48))
    return (*(_DWORD *)a1 + 13);
  v3 = (((*(_QWORD *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(_QWORD *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for EncryptedData(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 13;
    if (a3 >= 0xD)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if (a3 >= 0xD)
      *(_BYTE *)(result + 48) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for EncryptedData()
{
  return &type metadata for EncryptedData;
}

_QWORD *sub_1001B140C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[4];
  _QWORD v13[2];

  v5 = *(uint64_t **)(v3 + 16);
  v7 = *v5;
  v6 = v5[1];
  v13[0] = v7;
  v13[1] = v6;
  v12[2] = v13;
  result = sub_1001B091C((_QWORD *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))sub_1001B1468, (uint64_t)v12, a1, a2);
  *a3 = result;
  a3[1] = v9;
  a3[2] = v10;
  a3[3] = v11;
  return result;
}

uint64_t sub_1001B1468@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;

  return sub_1001B0A2C(a1, a2, *(uint64_t **)(v3 + 16), a3);
}

unint64_t sub_1001B1484()
{
  unint64_t result;

  result = qword_100297108;
  if (!qword_100297108)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CryptoError, &type metadata for CryptoError);
    atomic_store(result, (unint64_t *)&qword_100297108);
  }
  return result;
}

uint64_t sub_1001B14C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  __n128 v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;

  if (a3)
  {
    if (qword_10028ADB8 != -1)
      swift_once(&qword_10028ADB8, sub_100046CE4);
    v6 = type metadata accessor for Logger(0);
    sub_100005288(v6, (uint64_t)qword_1002A89A8);
    swift_errorRetain(a3);
    v7 = swift_errorRetain(a3);
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc(12, -1);
      v11 = swift_slowAlloc(32, -1);
      v24 = a3;
      v25 = v11;
      *(_DWORD *)v10 = 136315138;
      swift_errorRetain(a3);
      v12 = sub_1000080B4((uint64_t *)&unk_10028FB70);
      v13 = String.init<A>(describing:)(&v24, v12);
      v15 = v14;
      v24 = sub_1001DEF4C(v13, v14, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25);
      swift_bridgeObjectRelease(v15);
      swift_errorRelease(a3);
      swift_errorRelease(a3);
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Error updating zone - %s", v10, 0xCu);
      swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v11, -1, -1);
      swift_slowDealloc(v10, -1, -1);
    }
    else
    {
      swift_errorRelease(a3);
      swift_errorRelease(a3);
    }

    v22 = a3;
  }
  else
  {
    if (qword_10028ADB8 != -1)
      swift_once(&qword_10028ADB8, sub_100046CE4);
    v16 = type metadata accessor for Logger(0);
    v17 = sub_100005288(v16, (uint64_t)qword_1002A89A8);
    v18 = Logger.logObject.getter(v17);
    v20 = static os_log_type_t.default.getter(v19);
    if (os_log_type_enabled(v18, v20))
    {
      v21 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v21 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, v20, "Record zone is created.", v21, 2u);
      swift_slowDealloc(v21, -1, -1);
    }

    v22 = 0;
  }
  return a4(v22);
}

void sub_1001B1750(void *a1, void *a2)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;
  id v6;
  NSObject *v7;
  __n128 v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  id v17;
  NSObject *v18;
  __n128 v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  void *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  void *v29;
  uint64_t Strong;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  uint64_t v37;
  id v38;
  uint64_t v39;
  uint64_t v40;

  v2 = (void *)sub_10015DA1C(a1);
  v4 = v3;
  if (qword_10028ADB8 != -1)
    swift_once(&qword_10028ADB8, sub_100046CE4);
  v5 = type metadata accessor for Logger(0);
  sub_100005288(v5, (uint64_t)qword_1002A89A8);
  v6 = v2;
  v7 = Logger.logObject.getter(v6);
  v9 = static os_log_type_t.default.getter(v8);
  v38 = v6;
  if (os_log_type_enabled(v7, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(12, -1);
    v11 = swift_slowAlloc(32, -1);
    v39 = (uint64_t)v2;
    v40 = v11;
    *(_DWORD *)v10 = 136315138;
    v12 = v6;
    v13 = sub_1000080B4(&qword_100297218);
    v14 = String.init<A>(describing:)(&v39, v13);
    v16 = v15;
    v39 = sub_1001DEF4C(v14, v15, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40);

    swift_bridgeObjectRelease(v16);
    _os_log_impl((void *)&_mh_execute_header, v7, v9, "Client record is - %s", v10, 0xCu);
    swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);

  }
  else
  {

  }
  v17 = v4;
  v18 = Logger.logObject.getter(v17);
  v20 = static os_log_type_t.default.getter(v19);
  if (os_log_type_enabled(v18, v20))
  {
    v21 = (uint8_t *)swift_slowAlloc(12, -1);
    v22 = swift_slowAlloc(32, -1);
    v39 = (uint64_t)v4;
    v40 = v22;
    *(_DWORD *)v21 = 136315138;
    v23 = v4;
    v24 = v17;
    v25 = sub_1000080B4(&qword_100297218);
    v26 = String.init<A>(describing:)(&v39, v25);
    v28 = v27;
    v39 = sub_1001DEF4C(v26, v27, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40);

    swift_bridgeObjectRelease(v28);
    _os_log_impl((void *)&_mh_execute_header, v18, v20, "Server record is - %s", v21, 0xCu);
    swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v22, -1, -1);
    swift_slowDealloc(v21, -1, -1);

    v29 = v38;
    if (!v23)
      goto LABEL_13;
  }
  else
  {

    v29 = v6;
    if (!v4)
      goto LABEL_13;
  }
  Strong = swift_unknownObjectWeakLoadStrong(v37 + 16);
  if (Strong)
  {
    v31 = Strong;
    v32 = sub_1000080B4(&qword_10028D570);
    v33 = swift_allocObject(v32, 40, 7);
    *(_OWORD *)(v33 + 16) = xmmword_10021A1B0;
    *(_QWORD *)(v33 + 32) = v17;
    v40 = v33;
    specialized Array._endMutation()(v33);
    v34 = v40;
    v35 = v17;
    sub_1001278F0(a2, v34);
    swift_bridgeObjectRelease(v34);
    swift_unknownObjectRelease(v31);

  }
LABEL_13:

}

void sub_1001B1AEC(void *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t))
{
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  void *v33;
  id v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;

  if (a2)
  {
    swift_errorRetain(a2);
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v5 = type metadata accessor for Logger(0);
    sub_100005288(v5, (uint64_t)qword_1002A89D8);
    v6 = swift_errorRetain(a2);
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.error.getter(v7);
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc(12, -1);
      v10 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v9 = 138412290;
      v11 = _convertErrorToNSError(_:)(a2);
      v36 = (void *)v11;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37);
      *v10 = v11;
      swift_errorRelease(a2);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "CK accountInfo call returned an error %@. This will result in storing CK Records in non manatee container.", v9, 0xCu);
      v12 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v10, 1, v12);
      swift_slowDealloc(v10, -1, -1);
      swift_slowDealloc(v9, -1, -1);
    }
    else
    {
      swift_errorRelease(a2);
    }

    swift_errorRetain(a2);
    a3(a2, 1);
    swift_errorRelease(a2);
    swift_errorRelease(a2);
  }
  else if (a1)
  {
    v34 = a1;
    if ((objc_msgSend(v34, "supportsDeviceToDeviceEncryption") & 1) != 0
      && objc_msgSend(v34, "hasValidCredentials"))
    {
      if (qword_10028ADC8 != -1)
        swift_once(&qword_10028ADC8, sub_100046D2C);
      v13 = type metadata accessor for Logger(0);
      v14 = sub_100005288(v13, (uint64_t)qword_1002A89D8);
      v15 = Logger.logObject.getter(v14);
      v16 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v15, v16))
      {
        v17 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v17 = 0;
        _os_log_impl((void *)&_mh_execute_header, v15, v16, "Account and device are valid.", v17, 2u);
        swift_slowDealloc(v17, -1, -1);
      }

      v18 = 1;
    }
    else
    {
      if (qword_10028ADC8 != -1)
        swift_once(&qword_10028ADC8, sub_100046D2C);
      v19 = type metadata accessor for Logger(0);
      v20 = sub_100005288(v19, (uint64_t)qword_1002A89D8);
      v21 = Logger.logObject.getter(v20);
      v22 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v21, v22))
      {
        v23 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v23 = 0;
        _os_log_impl((void *)&_mh_execute_header, v21, v22, "Account and device are invalid.", v23, 2u);
        swift_slowDealloc(v23, -1, -1);
      }

      v18 = 0;
    }
    a3(v18, 0);

  }
  else
  {
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v24 = type metadata accessor for Logger(0);
    v25 = sub_100005288(v24, (uint64_t)qword_1002A89D8);
    v26 = Logger.logObject.getter(v25);
    v27 = static os_log_type_t.error.getter(v26);
    if (os_log_type_enabled(v26, v27))
    {
      v28 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v28 = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "CK accountInfo call returned no error nor any account info.", v28, 2u);
      swift_slowDealloc(v28, -1, -1);
    }

    type metadata accessor for AACustodianError(0);
    v30 = v29;
    v35 = -7009;
    v31 = sub_100005014((uint64_t)&_swiftEmptyArrayStorage);
    v32 = sub_100041030();
    _BridgedStoredNSError.init(_:userInfo:)(&v36, &v35, v31, v30, v32);
    v33 = v36;
    a3((uint64_t)v36, 1);

  }
}

uint64_t sub_1001B1F7C()
{
  uint64_t v0;

  sub_10002F0C8(v0 + 16);
  return swift_deallocClassInstance(v0, 32, 7);
}

uint64_t type metadata accessor for CloudKitStore()
{
  return objc_opt_self(_TtC13appleaccountd13CloudKitStore);
}

void sub_1001B1FC0(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6;
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  _QWORD *v13;
  id v14;
  Class isa;
  void *v16;
  Swift::OpaquePointer_optional v17;
  Swift::OpaquePointer_optional v18;

  v6 = swift_allocObject(&unk_10026DD08, 32, 7);
  *(_QWORD *)(v6 + 16) = a1;
  *(_QWORD *)(v6 + 24) = a2;
  v7 = objc_allocWithZone((Class)CKDatabaseSubscription);
  swift_retain(a2);
  v8 = objc_msgSend(v7, "init");
  v9 = objc_msgSend(objc_allocWithZone((Class)CKNotificationInfo), "init");
  objc_msgSend(v9, "setShouldSendContentAvailable:", 1);
  objc_msgSend(v8, "setNotificationInfo:", v9);
  sub_1001B2570();
  v10 = sub_1000080B4(&qword_10028D570);
  v11 = swift_allocObject(v10, 40, 7);
  *(_OWORD *)(v11 + 16) = xmmword_10021A1B0;
  *(_QWORD *)(v11 + 32) = v8;
  v16 = (void *)v11;
  specialized Array._endMutation()(v11);
  v12 = v8;
  v17.value._rawValue = v16;
  v17.is_nil = 0;
  isa = CKModifySubscriptionsOperation.init(subscriptionsToSave:subscriptionIDsToDelete:)(v17, v18).super.super.super.super.isa;
  v13 = (_QWORD *)swift_allocObject(&unk_10026DD30, 40, 7);
  v13[2] = a3;
  v13[3] = sub_1001B2538;
  v13[4] = v6;
  v14 = a3;
  CKModifySubscriptionsOperation.modifySubscriptionsResultBlock.setter(sub_1001B25D8, v13);
  sub_1001AE8D8();
  objc_msgSend(v14, "addOperation:", isa);

}

uint64_t sub_1001B214C(uint64_t a1, char a2, void *a3, void (*a4)(_QWORD, _QWORD))
{
  uint64_t v6;
  id v7;
  NSObject *v8;
  __n128 v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v18;
  id v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  void (*v29)(_QWORD, _QWORD);
  uint64_t v30;
  uint64_t v31;

  if ((a2 & 1) != 0)
  {
    swift_errorRetain(a1);
    if (qword_10028ADB8 != -1)
      swift_once(&qword_10028ADB8, sub_100046CE4);
    v18 = type metadata accessor for Logger(0);
    sub_100005288(v18, (uint64_t)qword_1002A89A8);
    v19 = a3;
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v21))
    {
      v29 = a4;
      v22 = (uint8_t *)swift_slowAlloc(12, -1);
      v23 = swift_slowAlloc(32, -1);
      v31 = v23;
      *(_DWORD *)v22 = 136315138;
      v24 = (id)CKDatabaseScopeString(objc_msgSend(v19, "scope"));
      v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
      v27 = v26;

      v30 = sub_1001DEF4C(v25, v27, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31);

      a4 = v29;
      swift_bridgeObjectRelease(v27);
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Failed to create CKSubscription for database: %s", v22, 0xCu);
      swift_arrayDestroy(v23, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v23, -1, -1);
      swift_slowDealloc(v22, -1, -1);

    }
    else
    {

    }
    swift_errorRetain(a1);
    a4(a1, 1);
    sub_10006AEB4(a1, 1);
    return sub_10006AEB4(a1, 1);
  }
  else
  {
    if (qword_10028ADC0 != -1)
      swift_once(&qword_10028ADC0, sub_100046D04);
    v6 = type metadata accessor for Logger(0);
    sub_100005288(v6, (uint64_t)qword_1002A89C0);
    v7 = a3;
    v8 = Logger.logObject.getter(v7);
    v10 = static os_log_type_t.default.getter(v9);
    if (os_log_type_enabled(v8, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc(12, -1);
      v12 = swift_slowAlloc(32, -1);
      v31 = v12;
      *(_DWORD *)v11 = 136315138;
      v13 = (id)CKDatabaseScopeString(objc_msgSend(v7, "scope"));
      v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
      v16 = v15;

      v30 = sub_1001DEF4C(v14, v16, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31);

      swift_bridgeObjectRelease(v16);
      _os_log_impl((void *)&_mh_execute_header, v8, v10, "Created CKSubscription for database: %s", v11, 0xCu);
      swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v12, -1, -1);
      swift_slowDealloc(v11, -1, -1);

    }
    else
    {

    }
    return ((uint64_t (*)(uint64_t, _QWORD))a4)(1, 0);
  }
}

uint64_t sub_1001B2514()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001B2538(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t *);
  uint64_t v5;
  char v6;

  v3 = *(uint64_t (**)(uint64_t *))(v2 + 16);
  v5 = a1;
  v6 = a2 & 1;
  return v3(&v5);
}

unint64_t sub_1001B2570()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100297210;
  if (!qword_100297210)
  {
    v1 = objc_opt_self(CKModifySubscriptionsOperation);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100297210);
  }
  return result;
}

uint64_t sub_1001B25AC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1001B25D8(uint64_t a1, char a2)
{
  uint64_t v2;

  return sub_1001B214C(a1, a2 & 1, *(void **)(v2 + 16), *(void (**)(_QWORD, _QWORD))(v2 + 24));
}

uint64_t sub_1001B25E8(uint64_t a1, void *a2)
{
  return sub_1001B2778(a1, a2, sub_1000DEACC);
}

uint64_t sub_1001B2638(uint64_t a1, void *a2)
{
  return sub_1001B2778(a1, a2, sub_1000DEAE8);
}

uint64_t sub_1001B2688(uint64_t a1, void *a2)
{
  return sub_1001B2778(a1, a2, sub_1000DEB04);
}

uint64_t sub_1001B26D8(uint64_t a1, void *a2)
{
  return sub_1001B2778(a1, a2, sub_1000DEB20);
}

uint64_t sub_1001B2728(uint64_t a1, void *a2)
{
  return sub_1001B2778(a1, a2, sub_1000DEB3C);
}

uint64_t sub_1001B2778(uint64_t a1, void *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  NSString v17;
  uint64_t v18;
  uint64_t v20;
  unint64_t v21;
  void *v22;
  Class isa;
  uint64_t v24;
  uint64_t v25;
  id v26;
  id v27;
  Class v28;
  id v29;
  id v30;
  id v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  id v36;

  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a3(a1);
  if (v13 >> 60 == 15)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(AAMessagingErrorDomain);
    v15 = v14;
    v16 = objc_allocWithZone((Class)NSError);
    v17 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v15);
    objc_msgSend(v16, "initWithDomain:code:userInfo:", v17, 4, 0);

    return swift_willThrow(v18);
  }
  else
  {
    v20 = v12;
    v21 = v13;
    v22 = *(void **)(v3 + 16);
    v34 = v7;
    v35 = v22;
    isa = Data._bridgeToObjectiveC()().super.isa;
    v24 = sub_1000080B4(&qword_10028D570);
    v25 = swift_allocObject(v24, 40, 7);
    *(_OWORD *)(v25 + 16) = xmmword_10021A1B0;
    *(_QWORD *)(v25 + 32) = a2;
    v36 = (id)v25;
    specialized Array._endMutation()(v25);
    v26 = v36;
    sub_1001B4AD8();
    v27 = a2;
    v28 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v26);
    v36 = 0;
    v29 = objc_msgSend(v35, "sendMessage:destinations:responseIdentifier:fireAndForget:requiredCapabilities:lackingCapabilities:error:", isa, v28, 0, 0, 0, 0, &v36);

    v30 = v36;
    if (v29)
    {
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v29);
      v31 = v30;
      sub_1000144D8(v20, v21);

      return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v34);
    }
    else
    {
      v32 = v36;
      _convertNSErrorToError(_:)(v30);

      swift_willThrow(v33);
      return sub_1000144D8(v20, v21);
    }
  }
}

uint64_t sub_1001B29E0(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  _QWORD v37[5];
  __int128 v38;
  uint64_t v39;

  v4 = v3;
  v36 = a3;
  v35 = a2;
  v6 = sub_1000080B4(&qword_10028D068);
  v32 = *(_QWORD *)(v6 - 8);
  v33 = v6;
  __chkstk_darwin(v6, v7);
  v31 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = type metadata accessor for TrustedContactUserNotification(0);
  __chkstk_darwin(v30, v9);
  v34 = (uint64_t)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for CustodianRecord(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  __chkstk_darwin(v11, v14);
  v15 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for UUID(0);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16, v18);
  v20 = (char *)&v30 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100006CA4(v4 + 56, (uint64_t)&v38);
  sub_10000732C(&v38, v39);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v20, a1 + *(int *)(v11 + 20), v16);
  sub_100027FE8(a1, (uint64_t)v15, type metadata accessor for CustodianRecord);
  v21 = *(unsigned __int8 *)(v12 + 80);
  v22 = (v21 + 32) & ~v21;
  v23 = swift_allocObject(&unk_10026DD70, v22 + v13, v21 | 7);
  *(_QWORD *)(v23 + 16) = v35;
  *(_QWORD *)(v23 + 24) = v4;
  sub_10003B730((uint64_t)v15, v23 + v22, type metadata accessor for CustodianRecord);
  swift_retain(v4);
  sub_1001BF594((uint64_t)v20, (uint64_t)sub_1001B3A74, v23);
  swift_release(v23);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v20, v16);
  result = sub_100006F58(&v38);
  if ((v36 & 1) != 0)
  {
    sub_1001B3538();
    v25 = v34;
    sub_100027FE8(a1, v34, type metadata accessor for CustodianRecord);
    swift_storeEnumTagMultiPayload(v25, v30, 1);
    v26 = v4 + OBJC_IVAR____TtC13appleaccountd21AcceptedStatusHandler__notificationManager;
    v27 = v31;
    v28 = v32;
    v29 = v33;
    (*(void (**)(char *, uint64_t, uint64_t))(v32 + 16))(v31, v26, v33);
    Dependency.wrappedValue.getter(v37, v29);
    (*(void (**)(char *, uint64_t))(v28 + 8))(v27, v29);
    sub_10000732C(v37, v37[3]);
    sub_100171484((uint64_t)&v38);
    sub_1001CEA64(&v38);
    sub_100043418((uint64_t)&v38);
    sub_100028388(v25, type metadata accessor for TrustedContactUserNotification);
    return sub_100006F58(v37);
  }
  return result;
}

void sub_1001B2CAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v7 = type metadata accessor for CustodianRecoveryInfoRecord(0);
  __chkstk_darwin(v7, v8);
  v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1000080B4(&qword_100293AB0);
  __chkstk_darwin(v11, v12);
  v14 = (uint64_t *)((char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100024A20(a1, (uint64_t)v14, &qword_100293AB0);
  if (swift_getEnumCaseMultiPayload(v14, v11) == 1)
  {
    v15 = *v14;
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v16 = type metadata accessor for Logger(0);
    sub_100005288(v16, (uint64_t)qword_1002A89D8);
    v17 = swift_errorRetain(v15);
    v18 = Logger.logObject.getter(v17);
    v19 = static os_log_type_t.error.getter(v18);
    if (os_log_type_enabled(v18, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc(12, -1);
      v21 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v20 = 138412290;
      v22 = _convertErrorToNSError(_:)(v15);
      v26 = v22;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27);
      *v21 = v22;
      swift_errorRelease(v15);
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Error fetching recovery info: %@", v20, 0xCu);
      v23 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v21, 1, v23);
      swift_slowDealloc(v21, -1, -1);
      swift_slowDealloc(v20, -1, -1);

      swift_errorRelease(v15);
    }
    else
    {
      swift_errorRelease(v15);
      swift_errorRelease(v15);

    }
  }
  else
  {
    sub_10003B730((uint64_t)v14, (uint64_t)v10, type metadata accessor for CustodianRecoveryInfoRecord);
    v24 = type metadata accessor for CustodianRecord(0);
    sub_1001B2F38((uint64_t)v10, *(_QWORD *)(a4 + *(int *)(v24 + 24)), *(_QWORD *)(a4 + *(int *)(v24 + 24) + 8), a2 == 1);
    sub_100028388((uint64_t)v10, type metadata accessor for CustodianRecoveryInfoRecord);
  }
}

uint64_t sub_1001B2F38(uint64_t a1, uint64_t a2, unint64_t a3, int a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  __n128 v22;
  os_log_type_t v23;
  _BOOL4 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  int v42;
  void ***v43;
  void **v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  void **v64;
  char *v65;
  __int128 v66[2];
  uint64_t v67;
  _QWORD v68[5];
  uint64_t v69;
  _BYTE v70[32];
  uint64_t v71[6];

  v61 = a4;
  v64 = (void **)a2;
  v57 = sub_1000080B4(&qword_1002953C0);
  __chkstk_darwin(v57, v6);
  v58 = (uint64_t *)((char *)&v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = type metadata accessor for CustodianRecoveryInfoRecord(0);
  v60 = *(_QWORD *)(v8 - 8);
  v9 = *(_QWORD *)(v60 + 64);
  v11 = __chkstk_darwin(v8, v10);
  v12 = (char *)&v56 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v11, v13);
  v59 = (uint64_t)&v56 - v15;
  __chkstk_darwin(v14, v16);
  v18 = (char *)&v56 - v17;
  if (qword_10028ADC8 != -1)
    swift_once(&qword_10028ADC8, sub_100046D2C);
  v19 = type metadata accessor for Logger(0);
  sub_100005288(v19, (uint64_t)qword_1002A89D8);
  v63 = a1;
  sub_100027FE8(a1, (uint64_t)v18, type metadata accessor for CustodianRecoveryInfoRecord);
  v20 = swift_bridgeObjectRetain_n(a3, 2);
  v21 = Logger.logObject.getter(v20);
  v23 = static os_log_type_t.default.getter(v22);
  v24 = os_log_type_enabled(v21, v23);
  v65 = (char *)&v56 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v24)
  {
    v25 = swift_slowAlloc(22, -1);
    v26 = swift_slowAlloc(64, -1);
    v71[0] = v26;
    *(_DWORD *)v25 = 136315394;
    v27 = type metadata accessor for UUID(0);
    v28 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v29 = dispatch thunk of CustomStringConvertible.description.getter(v27, v28);
    v31 = v30;
    v69 = sub_1001DEF4C(v29, v30, v71);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v69, v70);
    swift_bridgeObjectRelease(v31);
    sub_100028388((uint64_t)v18, type metadata accessor for CustodianRecoveryInfoRecord);
    *(_WORD *)(v25 + 12) = 2080;
    swift_bridgeObjectRetain(a3);
    v69 = sub_1001DEF4C((uint64_t)v64, a3, v71);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v69, v70);
    swift_bridgeObjectRelease_n(a3, 3);
    _os_log_impl((void *)&_mh_execute_header, v21, v23, "Sharing custodianship %s records with: %s", (uint8_t *)v25, 0x16u);
    swift_arrayDestroy(v26, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v26, -1, -1);
    v32 = v25;
    v12 = v65;
    swift_slowDealloc(v32, -1, -1);

  }
  else
  {
    sub_100028388((uint64_t)v18, type metadata accessor for CustodianRecoveryInfoRecord);

    swift_bridgeObjectRelease_n(a3, 2);
  }
  v33 = v62;
  sub_100006CA4(v62 + 96, (uint64_t)v71);
  v34 = sub_10000732C(v71, v71[3]);
  v35 = v59;
  sub_100027FE8(v63, v59, type metadata accessor for CustodianRecoveryInfoRecord);
  sub_100027FE8(v35, (uint64_t)v12, type metadata accessor for CustodianRecoveryInfoRecord);
  v36 = *(unsigned __int8 *)(v60 + 80);
  v37 = (v36 + 16) & ~v36;
  v38 = v37 + v9;
  v39 = (v37 + v9) & 0xFFFFFFFFFFFFFFF8;
  v40 = (v39 + 23) & 0xFFFFFFFFFFFFFFF8;
  v41 = swift_allocObject(&unk_10026DD98, v40 + 16, v36 | 7);
  sub_10003B730(v35, v41 + v37, type metadata accessor for CustodianRecoveryInfoRecord);
  v42 = v61 & 1;
  *(_BYTE *)(v41 + v38) = v42;
  *(_QWORD *)(v39 + v41 + 8) = v33;
  v43 = (void ***)(v41 + v40);
  v44 = v64;
  *v43 = v64;
  v43[1] = (void **)a3;
  sub_100006CA4(*v34 + 56, (uint64_t)v68);
  swift_bridgeObjectRetain_n(a3, 2);
  swift_retain_n(v33, 2);
  v45 = sub_1000080B4((uint64_t *)&unk_10028C8C0);
  v46 = sub_1000080B4(&qword_10028CCB0);
  if (swift_dynamicCast(v66, v68, v45, v46, 6))
  {
    sub_10003A190(v66, (uint64_t)&v69);
    v47 = swift_allocObject(&unk_10026DDC0, 32, 7);
    *(_QWORD *)(v47 + 16) = sub_1001B4A50;
    *(_QWORD *)(v47 + 24) = v41;
    swift_bridgeObjectRetain(a3);
    swift_retain(v41);
    sub_100066288(v63, v44, a3, (void **)3, (uint64_t)sub_10003B728, v47);
    swift_bridgeObjectRelease(a3);
    swift_release(v47);
    sub_100006F58(&v69);
    swift_release(v41);
    v48 = (uint64_t)v65;
  }
  else
  {
    v67 = 0;
    memset(v66, 0, sizeof(v66));
    sub_100004934((uint64_t)v66, &qword_10028CCB8);
    type metadata accessor for AACustodianError(0);
    v50 = v49;
    v68[0] = -7000;
    v51 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
    v52 = sub_100005150((unint64_t *)&qword_10028B640, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianError, (uint64_t)&unk_100218378);
    _BridgedStoredNSError.init(_:userInfo:)(&v69, v68, v51, v50, v52);
    v53 = (uint64_t)v58;
    *v58 = v69;
    swift_storeEnumTagMultiPayload(v53, v57, 1);
    v54 = (uint64_t)v65;
    sub_1001B3AB4(v53, (uint64_t)v65, v42, v33, (uint64_t)v44, a3);
    sub_100004934(v53, &qword_1002953C0);
    swift_release(v41);
    v48 = v54;
  }
  sub_100028388(v48, type metadata accessor for CustodianRecoveryInfoRecord);
  swift_bridgeObjectRelease(a3);
  swift_release(v33);
  return sub_100006F58(v71);
}

void sub_1001B3538()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  NSString v13;
  NSString v14;
  id v15;
  id v16;
  Class isa;
  void *v18;
  id v19;
  id v20;
  _QWORD v22[5];

  v1 = sub_1000080B4(&qword_10028FA50);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  v5 = (char *)&v22[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  static String._unconditionallyBridgeFromObjectiveC(_:)(kAAAnalyticsEventRecoveryContactStatusUpdate);
  v7 = v6;
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v5, v0 + OBJC_IVAR____TtC13appleaccountd21AcceptedStatusHandler__accountStore, v1);
  Dependency.wrappedValue.getter(v22, v1);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  v8 = objc_msgSend(*(id *)(*sub_10000732C(v22, v22[3]) + 16), "aa_primaryAppleAccount");
  if (v8 && (v9 = v8, v10 = objc_msgSend(v8, "aa_altDSID"), v9, v10))
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
    v12 = v11;

  }
  else
  {
    v12 = 0;
  }
  v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v7);
  if (v12)
  {
    v14 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v12);
  }
  else
  {
    v14 = 0;
  }
  v15 = objc_msgSend((id)objc_opt_self(AAFAnalyticsEvent), "analyticsEventWithName:altDSID:flowID:", v13, v14, 0);

  sub_100006F58(v22);
  if (v15)
  {
    v16 = v15;
    isa = Bool._bridgeToObjectiveC()().super.super.isa;
    objc_msgSend(v16, "setObject:forKeyedSubscript:", isa, kAAFDidSucceed);

    v18 = (void *)objc_opt_self(AAAnalyticsRTCReporter);
    v19 = v16;
    v20 = objc_msgSend(v18, "reporter");
    objc_msgSend(v20, "sendEvent:", v19);

  }
}

uint64_t sub_1001B3774()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;

  sub_100006F58(v0 + 2);
  sub_100006F58(v0 + 7);
  sub_100006F58(v0 + 12);
  v1 = (char *)v0 + OBJC_IVAR____TtC13appleaccountd21AcceptedStatusHandler__accountStore;
  v2 = sub_1000080B4(&qword_10028FA50);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  v3 = (char *)v0 + OBJC_IVAR____TtC13appleaccountd21AcceptedStatusHandler__notificationManager;
  v4 = sub_1000080B4(&qword_10028D068);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

uint64_t sub_1001B380C()
{
  return type metadata accessor for AcceptedStatusHandler(0);
}

uint64_t type metadata accessor for AcceptedStatusHandler(uint64_t a1)
{
  uint64_t result;

  result = qword_100297258;
  if (!qword_100297258)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AcceptedStatusHandler);
  return result;
}

void sub_1001B3850(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[5];

  v6[0] = "(";
  v6[1] = "(";
  v6[2] = "(";
  sub_100017464(319, (unint64_t *)&qword_100293810, &qword_10028C860);
  if (v3 <= 0x3F)
  {
    v6[3] = *(_QWORD *)(v2 - 8) + 64;
    sub_100017464(319, (unint64_t *)&qword_10028CFD8, &qword_100294AE0);
    if (v5 <= 0x3F)
    {
      v6[4] = *(_QWORD *)(v4 - 8) + 64;
      swift_updateClassMetadata2(a1, 256, 5, v6, a1 + 80);
    }
  }
}

uint64_t sub_1001B3908(uint64_t a1, uint64_t a2, int a3)
{
  return sub_1001B29E0(a1, a2, a3);
}

uint64_t sub_1001B3928()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;

  v1 = (int *)type metadata accessor for CustodianRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release(*(_QWORD *)(v0 + 24));
  v6 = v0 + v4;
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v0 + v4, v7);
  v9(v0 + v4 + v1[5], v7);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[7] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[8] + 8));
  v10 = (uint64_t *)(v0 + v4 + v1[10]);
  v11 = v10[1];
  if (v11 >> 60 != 15)
    sub_10000F494(*v10, v11);
  sub_10000F494(*(_QWORD *)(v6 + v1[11]), *(_QWORD *)(v6 + v1[11] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[13] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[14] + 8));
  v12 = v6 + v1[16];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v12, 1, v7))
    v9(v12, v7);
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

void sub_1001B3A74(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for CustodianRecord(0) - 8) + 80);
  sub_1001B2CAC(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), v1 + ((v3 + 32) & ~v3));
}

void sub_1001B3AB4(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  Swift::String v33;
  void *object;
  void *v35;
  id v36;
  uint64_t v37;
  void *v38;
  void *v39;
  Swift::String v40;
  void *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  NSObject *v53;
  __n128 v54;
  os_log_type_t v55;
  uint8_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(char *, uint64_t, uint64_t);
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  id v71;
  uint64_t v72;
  NSString v73;
  id v74;
  uint64_t v75;
  uint64_t v76;
  id v77;
  uint64_t v78;
  NSObject *v79;
  __n128 v80;
  os_log_type_t v81;
  uint8_t *v82;
  NSObject *v83;
  uint64_t v84;
  uint8_t *v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  void *v90;
  uint8_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  char *v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  Swift::String v104;
  void *v105;
  unint64_t v106;

  v100 = a5;
  v101 = a6;
  v99 = a4;
  v97 = a3;
  v98 = type metadata accessor for ShareMessageContext(0);
  v9 = __chkstk_darwin(v98, v8);
  v11 = (char *)&v91 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v9, v12);
  v15 = (char *)&v91 - v14;
  __chkstk_darwin(v13, v16);
  v102 = (char *)&v91 - v17;
  v18 = type metadata accessor for CustodianRecoveryInfoRecord(0);
  __chkstk_darwin(v18, v19);
  v21 = (char *)&v91 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for CloudShareInfo(0);
  __chkstk_darwin(v22, v23);
  v25 = (char *)&v91 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = sub_1000080B4(&qword_1002953C0);
  __chkstk_darwin(v26, v27);
  v29 = (uint64_t *)((char *)&v91 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100024A20(a1, (uint64_t)v29, &qword_1002953C0);
  if (swift_getEnumCaseMultiPayload(v29, v26) == 1)
  {
    v30 = *v29;
    v105 = 0;
    v106 = 0xE000000000000000;
    _StringGuts.grow(_:)(46);
    swift_bridgeObjectRelease(v106);
    v105 = (void *)0xD00000000000002CLL;
    v106 = 0x800000010020F760;
    v31 = type metadata accessor for UUID(0);
    v32 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v33._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v31, v32);
    object = v33._object;
    String.append(_:)(v33);
    swift_bridgeObjectRelease(object);
    v104._countAndFlagsBits = 0x7272652068746977;
    v104._object = (void *)0xEB0000000020726FLL;
    v35 = (void *)_convertErrorToNSError(_:)(v30);
    v36 = objc_msgSend(v35, "description");
    v37 = static String._unconditionallyBridgeFromObjectiveC(_:)(v36);
    v39 = v38;

    v40._countAndFlagsBits = v37;
    v40._object = v39;
    String.append(_:)(v40);

    swift_bridgeObjectRelease(v39);
    v41 = v104._object;
    String.append(_:)(v104);
    swift_bridgeObjectRelease(v41);
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v42 = type metadata accessor for Logger(0);
    sub_100005288(v42, (uint64_t)qword_1002A89D8);
    v44 = (uint64_t)v105;
    v43 = v106;
    swift_bridgeObjectRetain(v106);
    v46 = Logger.logObject.getter(v45);
    v47 = static os_log_type_t.error.getter(v46);
    if (os_log_type_enabled(v46, v47))
    {
      v48 = (uint8_t *)swift_slowAlloc(12, -1);
      v49 = swift_slowAlloc(32, -1);
      v104._countAndFlagsBits = v49;
      *(_DWORD *)v48 = 136315138;
      swift_bridgeObjectRetain(v43);
      v103 = sub_1001DEF4C(v44, v43, &v104._countAndFlagsBits);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v103, &v104);
      swift_bridgeObjectRelease_n(v43, 3);
      _os_log_impl((void *)&_mh_execute_header, v46, v47, "%s", v48, 0xCu);
      swift_arrayDestroy(v49, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v49, -1, -1);
      swift_slowDealloc(v48, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n(v43, 2);
    }
    swift_errorRelease(v30);

  }
  else
  {
    v95 = v15;
    v96 = v25;
    sub_10003B730((uint64_t)v29, (uint64_t)v25, type metadata accessor for CloudShareInfo);
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v94 = type metadata accessor for Logger(0);
    v50 = sub_100005288(v94, (uint64_t)qword_1002A89D8);
    v51 = a2;
    v52 = sub_100027FE8(a2, (uint64_t)v21, type metadata accessor for CustodianRecoveryInfoRecord);
    v93 = v50;
    v53 = Logger.logObject.getter(v52);
    v55 = static os_log_type_t.default.getter(v54);
    if (os_log_type_enabled(v53, v55))
    {
      v56 = (uint8_t *)swift_slowAlloc(12, -1);
      v92 = swift_slowAlloc(32, -1);
      v105 = (void *)v92;
      *(_DWORD *)v56 = 136315138;
      v91 = v56 + 4;
      v57 = type metadata accessor for UUID(0);
      v58 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v59 = dispatch thunk of CustomStringConvertible.description.getter(v57, v58);
      v61 = v60;
      v104._countAndFlagsBits = sub_1001DEF4C(v59, v60, (uint64_t *)&v105);
      v51 = a2;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v104, &v104._object);
      swift_bridgeObjectRelease(v61);
      sub_100028388((uint64_t)v21, type metadata accessor for CustodianRecoveryInfoRecord);
      _os_log_impl((void *)&_mh_execute_header, v53, v55, "Created CKShare for custodianship: %s", v56, 0xCu);
      v62 = v92;
      swift_arrayDestroy(v92, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v62, -1, -1);
      swift_slowDealloc(v56, -1, -1);
    }
    else
    {
      sub_100028388((uint64_t)v21, type metadata accessor for CustodianRecoveryInfoRecord);
    }

    v63 = v51 + *(int *)(v18 + 20);
    v64 = type metadata accessor for UUID(0);
    v65 = *(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v64 - 8) + 16);
    v66 = (uint64_t)v102;
    v65(v102, v63, v64);
    v67 = v98;
    sub_100027FE8((uint64_t)v96, v66 + *(int *)(v98 + 20), type metadata accessor for CloudShareInfo);
    *(_BYTE *)(v66 + *(int *)(v67 + 24)) = v97 & 1;
    sub_10000732C((_QWORD *)(v99 + 16), *(_QWORD *)(v99 + 40));
    v68 = (uint64_t)v95;
    sub_100027FE8(v66, (uint64_t)v95, type metadata accessor for ShareMessageContext);
    sub_100027FE8(v66, (uint64_t)v11, type metadata accessor for ShareMessageContext);
    v69 = type metadata accessor for ShareMessage(0);
    v70 = swift_allocObject(v69, *(unsigned int *)(v69 + 48), *(unsigned __int16 *)(v69 + 52));
    *(_BYTE *)(v70 + 16) = 2;
    v65((char *)(v70 + OBJC_IVAR____TtC13appleaccountd12ShareMessage_custodianID), (uint64_t)v11, v64);
    sub_100027FE8((uint64_t)&v11[*(int *)(v67 + 20)], v70 + OBJC_IVAR____TtC13appleaccountd12ShareMessage_shareInfo, type metadata accessor for CloudShareInfo);
    LOBYTE(v64) = v11[*(int *)(v67 + 24)];
    sub_100028388((uint64_t)v11, type metadata accessor for ShareMessageContext);
    *(_BYTE *)(v70 + OBJC_IVAR____TtC13appleaccountd12ShareMessage_finalizeSetup) = v64;
    v71 = objc_allocWithZone((Class)AAMessagingDestination);
    v72 = v101;
    swift_bridgeObjectRetain(v101);
    v73 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v72);
    v74 = objc_msgSend(v71, "initWithHandle:", v73);

    if (v74)
    {
      v76 = qword_10028ADB0;
      v77 = v74;
      if (v76 != -1)
        swift_once(&qword_10028ADB0, sub_100046CC8);
      v78 = sub_100005288(v94, (uint64_t)qword_1002A8990);
      v79 = Logger.logObject.getter(v78);
      v81 = static os_log_type_t.default.getter(v80);
      if (os_log_type_enabled(v79, v81))
      {
        v82 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v82 = 0;
        _os_log_impl((void *)&_mh_execute_header, v79, v81, "Destination is valid!", v82, 2u);
        swift_slowDealloc(v82, -1, -1);
      }

      sub_1001B2778(v70, v77, sub_1000DEAE8);
      sub_1001B445C(0, v68);
      swift_release(v70);

    }
    else
    {
      v83 = Logger.logObject.getter(v75);
      v84 = static os_log_type_t.error.getter(v83);
      if (os_log_type_enabled(v83, (os_log_type_t)v84))
      {
        v85 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v85 = 0;
        _os_log_impl((void *)&_mh_execute_header, v83, (os_log_type_t)v84, "Unable to generate destination from handle.", v85, 2u);
        swift_slowDealloc(v85, -1, -1);
      }

      type metadata accessor for AACustodianError(0);
      v87 = v86;
      v104._countAndFlagsBits = -7004;
      v88 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
      v89 = sub_100005150((unint64_t *)&qword_10028B640, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianError, (uint64_t)&unk_100218378);
      _BridgedStoredNSError.init(_:userInfo:)(&v105, &v104, v88, v87, v89);
      v90 = v105;
      sub_1001B445C((uint64_t)v105, v68);
      swift_release(v70);

    }
    sub_100028388(v68, type metadata accessor for ShareMessageContext);
    sub_100028388(v66, type metadata accessor for ShareMessageContext);
    sub_100028388((uint64_t)v96, type metadata accessor for CloudShareInfo);
  }
}

void sub_1001B445C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  NSObject *v38;
  _QWORD v39[3];
  _BYTE v40[8];
  id v41;
  uint64_t v42;

  v4 = type metadata accessor for ShareMessageContext(0);
  v6 = __chkstk_darwin(v4, v5);
  v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6, v9);
  v11 = (char *)&v37 - v10;
  if (a1)
  {
    swift_errorRetain(a1);
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v12 = type metadata accessor for Logger(0);
    sub_100005288(v12, (uint64_t)qword_1002A89D8);
    swift_errorRetain(a1);
    v13 = swift_errorRetain(a1);
    v38 = Logger.logObject.getter(v13);
    v14 = static os_log_type_t.error.getter(v38);
    if (os_log_type_enabled(v38, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc(12, -1);
      v16 = swift_slowAlloc(32, -1);
      v42 = v16;
      *(_DWORD *)v15 = 136315138;
      swift_getErrorValue(a1, v40, v39);
      v17 = Error.localizedDescription.getter(v39[1], v39[2]);
      v19 = v18;
      v41 = (id)sub_1001DEF4C(v17, v18, &v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42);
      swift_bridgeObjectRelease(v19);
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, v38, v14, "Failed to send CKShare message: %s", v15, 0xCu);
      swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v16, -1, -1);
      swift_slowDealloc(v15, -1, -1);

      swift_errorRelease(a1);
    }
    else
    {
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      swift_errorRelease(a1);

    }
  }
  else
  {
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v20 = type metadata accessor for Logger(0);
    sub_100005288(v20, (uint64_t)qword_1002A89D8);
    sub_100027FE8(a2, (uint64_t)v11, type metadata accessor for ShareMessageContext);
    v21 = sub_100027FE8(a2, (uint64_t)v8, type metadata accessor for ShareMessageContext);
    v22 = Logger.logObject.getter(v21);
    v23 = static os_log_type_t.info.getter(v22);
    if (os_log_type_enabled(v22, v23))
    {
      v24 = swift_slowAlloc(22, -1);
      v25 = swift_slowAlloc(64, -1);
      v42 = v25;
      *(_DWORD *)v24 = 136315394;
      v26 = type metadata accessor for URL(0);
      v27 = sub_100005150((unint64_t *)&qword_10028F3B0, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
      v28 = dispatch thunk of CustomStringConvertible.description.getter(v26, v27);
      v30 = v29;
      v41 = (id)sub_1001DEF4C(v28, v29, &v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42);
      swift_bridgeObjectRelease(v30);
      sub_100028388((uint64_t)v11, type metadata accessor for ShareMessageContext);
      *(_WORD *)(v24 + 12) = 2080;
      v31 = &v8[*(int *)(v4 + 20)];
      v41 = *(id *)&v31[*(int *)(type metadata accessor for CloudShareInfo(0) + 24)];
      v32 = v41;
      v33 = sub_1000080B4(&qword_10028D728);
      v34 = String.init<A>(describing:)(&v41, v33);
      v36 = v35;
      v41 = (id)sub_1001DEF4C(v34, v35, &v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42);
      swift_bridgeObjectRelease(v36);
      sub_100028388((uint64_t)v8, type metadata accessor for ShareMessageContext);
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "CKShare sent with url: %s and token: %s", (uint8_t *)v24, 0x16u);
      swift_arrayDestroy(v25, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v25, -1, -1);
      swift_slowDealloc(v24, -1, -1);
    }
    else
    {
      sub_100028388((uint64_t)v11, type metadata accessor for ShareMessageContext);
      sub_100028388((uint64_t)v8, type metadata accessor for ShareMessageContext);
    }

  }
}

uint64_t sub_1001B48FC()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;

  v1 = (int *)type metadata accessor for CustodianRecoveryInfoRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v0 + v4;
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v0 + v4, v7);
  v9(v0 + v4 + v1[5], v7);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[6] + 8));
  sub_10000F494(*(_QWORD *)(v6 + v1[7]), *(_QWORD *)(v6 + v1[7] + 8));
  v10 = (uint64_t *)(v0 + v4 + v1[8]);
  v11 = v10[1];
  if (v11 >> 60 != 15)
    sub_10000F494(*v10, v11);
  sub_10000F494(*(_QWORD *)(v6 + v1[9]), *(_QWORD *)(v6 + v1[9] + 8));
  v12 = v6 + v1[11];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v12, 1, v7))
    v9(v12, v7);
  v13 = (v4 + v5) & 0xFFFFFFFFFFFFFFF8;
  v14 = (v13 + 23) & 0xFFFFFFFFFFFFFFF8;
  v15 = v13 + v0;
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[12] + 8));
  swift_release(*(_QWORD *)(v15 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v14 + 8));
  return swift_deallocObject(v0, v14 + 16, v3 | 7);
}

void sub_1001B4A50(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;

  v3 = *(_QWORD *)(type metadata accessor for CustodianRecoveryInfoRecord(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  sub_1001B3AB4(a1, v1 + v4, *(unsigned __int8 *)(v1 + v4 + *(_QWORD *)(v3 + 64)), *(_QWORD *)(((v4 + *(_QWORD *)(v3 + 64)) & 0xFFFFFFFFFFFFFFF8) + v1 + 8), *(_QWORD *)(v1 + ((((v4 + *(_QWORD *)(v3 + 64)) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v1 + ((((v4 + *(_QWORD *)(v3 + 64)) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_1001B4AB4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

unint64_t sub_1001B4AD8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10028E140;
  if (!qword_10028E140)
  {
    v1 = objc_opt_self(AAMessagingDestination);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10028E140);
  }
  return result;
}

uint64_t sub_1001B4B14()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC13appleaccountd21IdentityTaskScheduler__xpcActivityScheduler;
  v2 = sub_1000080B4((uint64_t *)&unk_10028BB70);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_release(*(_QWORD *)(v0
                          + OBJC_IVAR____TtC13appleaccountd21IdentityTaskScheduler____lazy_storage___activityProvider));
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1001B4B78()
{
  return type metadata accessor for IdentityTaskScheduler(0);
}

uint64_t type metadata accessor for IdentityTaskScheduler(uint64_t a1)
{
  uint64_t result;

  result = qword_1002973E8;
  if (!qword_1002973E8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for IdentityTaskScheduler);
  return result;
}

void sub_1001B4BBC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  sub_100010298(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = "\b";
    swift_updateClassMetadata2(a1, 256, 2, v4, a1 + 80);
  }
}

char *sub_1001B4C30()
{
  void *v0;
  objc_class *ObjectType;
  id v2;
  char *v3;
  NSString v4;
  id v5;
  char *v6;
  NSString v7;
  Class isa;
  Class v9;
  id v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t inited;
  uint64_t v15;
  id v16;
  id v17;
  void *v18;
  void *v19;
  uint64_t v20;
  id v21;
  id v22;
  uint64_t v23;
  Class v24;
  void *v25;
  id v26;
  uint64_t v28;
  char v29[40];
  objc_super v30;

  ObjectType = (objc_class *)swift_getObjectType(v0);
  v2 = objc_allocWithZone((Class)UNUserNotificationCenter);
  v3 = v0;
  v4 = String._bridgeToObjectiveC()();
  v5 = objc_msgSend(v2, "initWithBundleIdentifier:", v4);

  *(_QWORD *)&v3[OBJC_IVAR____TtC13appleaccountd22NotificationController_notificationCenter] = v5;
  v30.receiver = v3;
  v30.super_class = ObjectType;
  v6 = (char *)objc_msgSendSuper2(&v30, "init");
  v7 = String._bridgeToObjectiveC()();
  sub_1000067D4(0, (unint64_t *)&unk_100297570, UNNotificationAction_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  v9 = Array._bridgeToObjectiveC()().super.isa;
  v10 = objc_msgSend((id)objc_opt_self(UNNotificationCategory), "categoryWithIdentifier:actions:intentIdentifiers:options:", v7, isa, v9, 1);

  v11 = OBJC_IVAR____TtC13appleaccountd22NotificationController_notificationCenter;
  v12 = *(void **)&v6[OBJC_IVAR____TtC13appleaccountd22NotificationController_notificationCenter];
  v13 = sub_1000080B4(&qword_10028D570);
  inited = swift_initStackObject(v13, v29);
  *(_OWORD *)(inited + 16) = xmmword_10021A1B0;
  *(_QWORD *)(inited + 32) = v10;
  v28 = inited;
  specialized Array._endMutation()(inited);
  if ((unint64_t)v28 >> 62)
  {
    if (v28 < 0)
      v20 = v28;
    else
      v20 = v28 & 0xFFFFFFFFFFFFFF8;
    v21 = v12;
    v22 = v10;
    swift_bridgeObjectRetain(v28);
    v23 = _CocoaArrayWrapper.endIndex.getter(v20);
    swift_bridgeObjectRelease(v28);
    if (v23)
      goto LABEL_3;
LABEL_8:
    v19 = &_swiftEmptySetSingleton;
    goto LABEL_9;
  }
  v15 = *(_QWORD *)((v28 & 0xFFFFFFFFFFFFF8) + 0x10);
  v16 = v12;
  v17 = v10;
  if (!v15)
    goto LABEL_8;
LABEL_3:
  sub_100154A64(v28);
  v19 = v18;
LABEL_9:
  swift_bridgeObjectRelease(v28);
  sub_1000067D4(0, &qword_100297580, UNNotificationCategory_ptr);
  sub_1001B5B74();
  v24 = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v19);
  objc_msgSend(v12, "setNotificationCategories:", v24);

  v25 = *(void **)&v6[v11];
  objc_msgSend(v25, "setDelegate:", v6);
  v26 = v25;
  objc_msgSend(v26, "setWantsNotificationResponsesDelivered");

  return v6;
}

void sub_1001B4EF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  id v23;
  NSString v24;
  NSString v25;
  NSString v26;
  id v27;
  Class isa;
  uint64_t v29;
  Class v30;
  uint64_t v31;
  char v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  __n128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  char *v42;
  NSURL *v43;
  void *v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  NSString v49;
  id v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD aBlock[5];
  uint64_t v68;

  v65 = a6;
  v66 = a7;
  v8 = type metadata accessor for UUID(0);
  v62 = *(_QWORD *)(v8 - 8);
  v63 = v8;
  __chkstk_darwin(v8, v9);
  v11 = (char *)&v57 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1000080B4((uint64_t *)&unk_10028DC30);
  __chkstk_darwin(v12, v13);
  v59 = (char *)&v57 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for URL(0);
  v60 = *(_QWORD *)(v15 - 8);
  v61 = v15;
  __chkstk_darwin(v15, v16);
  v58 = (char *)&v57 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for Date(0);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18, v20);
  v22 = (char *)&v57 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = objc_msgSend(objc_allocWithZone((Class)UNMutableNotificationContent), "init");
  v24 = String._bridgeToObjectiveC()();
  objc_msgSend(v23, "setTitle:", v24);

  v25 = String._bridgeToObjectiveC()();
  objc_msgSend(v23, "setBody:", v25);

  v26 = String._bridgeToObjectiveC()();
  objc_msgSend(v23, "setCategoryIdentifier:", v26);

  v27 = objc_msgSend((id)objc_opt_self(UNNotificationSound), "defaultSound");
  objc_msgSend(v23, "setSound:", v27);

  objc_msgSend(v23, "setInterruptionLevel:", 1);
  Date.init()(objc_msgSend(v23, "setShouldBackgroundDefaultAction:", 1));
  isa = Date._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v19 + 8))(v22, v18);
  objc_msgSend(v23, "setDate:", isa);

  v29 = sub_1001CD934(a5);
  v30 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v29);
  objc_msgSend(v23, "setUserInfo:", v30);

  if (!*(_QWORD *)(a5 + 16))
    goto LABEL_9;
  v31 = sub_10010A9E0(0xD000000000000010, 0x800000010020AEF0);
  if ((v32 & 1) != 0)
  {
    v33 = (uint64_t *)(*(_QWORD *)(a5 + 56) + 16 * v31);
    v34 = *v33;
    v35 = v33[1];
    v36 = swift_bridgeObjectRetain(v35);
    v37 = (uint64_t)v59;
    URL.init(string:)(v34, v35, v36);
    swift_bridgeObjectRelease(v35);
    v39 = v60;
    v38 = v61;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v60 + 48))(v37, 1, v61) != 1)
    {
      v42 = v58;
      (*(void (**)(char *, uint64_t, uint64_t))(v39 + 32))(v58, v37, v38);
      URL._bridgeToObjectiveC()(v43);
      v45 = v44;
      objc_msgSend(v23, "setDefaultActionURL:", v44);

      v31 = (*(uint64_t (**)(char *, uint64_t))(v39 + 8))(v42, v38);
      if (!*(_QWORD *)(a5 + 16))
        goto LABEL_9;
      goto LABEL_6;
    }
    v31 = sub_10009E0DC(v37);
  }
  if (!*(_QWORD *)(a5 + 16))
  {
LABEL_9:
    v46 = UUID.init()(v31);
    UUID.uuidString.getter(v46);
    v41 = v47;
    (*(void (**)(char *, uint64_t))(v62 + 8))(v11, v63);
    goto LABEL_10;
  }
LABEL_6:
  v31 = sub_10010A9E0(0xD000000000000010, 0x800000010020AED0);
  if ((v40 & 1) == 0)
    goto LABEL_9;
  v41 = *(_QWORD *)(*(_QWORD *)(a5 + 56) + 16 * v31 + 8);
  swift_bridgeObjectRetain(v41);
LABEL_10:
  v48 = v23;
  v49 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v41);
  v50 = objc_msgSend((id)objc_opt_self(UNNotificationRequest), "requestWithIdentifier:content:trigger:", v49, v48, 0);

  v51 = *(void **)(v64 + OBJC_IVAR____TtC13appleaccountd22NotificationController_notificationCenter);
  v52 = swift_allocObject(&unk_10026DE20, 32, 7);
  v54 = v65;
  v53 = v66;
  *(_QWORD *)(v52 + 16) = v65;
  *(_QWORD *)(v52 + 24) = v53;
  aBlock[4] = sub_1001B5770;
  v68 = v52;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1001DC548;
  aBlock[3] = &unk_10026DE38;
  v55 = _Block_copy(aBlock);
  v56 = v68;
  sub_10000E1C0(v54, v53);
  swift_release(v56);
  objc_msgSend(v51, "addNotificationRequest:withCompletionHandler:", v50, v55);
  _Block_release(v55);

}

void sub_1001B5414(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if (!a1)
  {
LABEL_6:
    if (!a2)
      return;
    goto LABEL_7;
  }
  swift_errorRetain(a1);
  if (qword_10028ADB0 != -1)
    swift_once(&qword_10028ADB0, sub_100046CC8);
  v4 = type metadata accessor for Logger(0);
  sub_100005288(v4, (uint64_t)qword_1002A8990);
  swift_errorRetain(a1);
  v5 = swift_errorRetain(a1);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.error.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    v8 = swift_slowAlloc(22, -1);
    v9 = swift_slowAlloc(64, -1);
    v19 = v9;
    *(_DWORD *)v8 = 136315394;
    v18 = type metadata accessor for NotificationController();
    v10 = sub_1000080B4(&qword_100297568);
    v11 = String.init<A>(describing:)(&v18, v10);
    v13 = v12;
    v18 = sub_1001DEF4C(v11, v12, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19);
    swift_bridgeObjectRelease(v13);
    *(_WORD *)(v8 + 12) = 2080;
    v18 = a1;
    swift_errorRetain(a1);
    v14 = sub_1000080B4(&qword_10028E850);
    v15 = String.init<A>(describing:)(&v18, v14);
    v17 = v16;
    v18 = sub_1001DEF4C(v15, v16, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19);
    swift_bridgeObjectRelease(v17);
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "%s - Error posting notification: %s", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy(v9, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

    swift_errorRelease(a1);
    goto LABEL_6;
  }
  swift_errorRelease(a1);
  swift_errorRelease(a1);
  swift_errorRelease(a1);

  if (!a2)
    return;
LABEL_7:
  a2(a1);
}

id sub_1001B566C()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType(v0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for NotificationController()
{
  return objc_opt_self(_TtC13appleaccountd22NotificationController);
}

uint64_t sub_1001B5744()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 16))
    swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_1001B5770(uint64_t a1)
{
  uint64_t v1;

  sub_1001B5414(a1, *(void (**)(uint64_t))(v1 + 16));
}

uint64_t sub_1001B5778(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  id v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  id v21;
  _QWORD *v22;
  uint8_t *v23;
  uint64_t v24;
  _QWORD *v25;
  id v26;
  id v27;
  id v28;
  id v29;
  void (*v30)(char *, char *, uint64_t);
  id v31;
  NSURL *v32;
  void *v33;
  void *v34;
  void *v35;
  unint64_t v36;
  Class isa;
  uint64_t v39;
  _QWORD *v40;
  uint8_t *v41;
  char *v42;
  uint64_t v43;
  id v44;
  uint64_t v45;

  v2 = sub_1000080B4((uint64_t *)&unk_10028DC30);
  __chkstk_darwin(v2, v3);
  v5 = (char *)&v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  v9 = __chkstk_darwin(v6, v8);
  v11 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9, v12);
  v14 = (char *)&v39 - v13;
  if (qword_10028ADB0 != -1)
    swift_once(&qword_10028ADB0, sub_100046CC8);
  v15 = type metadata accessor for Logger(0);
  sub_100005288(v15, (uint64_t)qword_1002A8990);
  v16 = a1;
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.info.getter(v17);
  if (os_log_type_enabled(v17, v18))
  {
    v19 = (uint8_t *)swift_slowAlloc(12, -1);
    v20 = swift_slowAlloc(8, -1);
    v43 = v7;
    v44 = v16;
    v40 = (_QWORD *)v20;
    v41 = v19;
    v42 = v14;
    *(_DWORD *)v19 = 138412290;
    v21 = v16;
    v14 = v42;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, &v45);
    v22 = v40;
    *v40 = v16;

    v23 = v41;
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Received notification response: %@", v41, 0xCu);
    v24 = sub_1000080B4((uint64_t *)&unk_10028BC20);
    swift_arrayDestroy(v22, 1, v24);
    v25 = v22;
    v7 = v43;
    swift_slowDealloc(v25, -1, -1);
    swift_slowDealloc(v23, -1, -1);

  }
  else
  {

  }
  v26 = objc_msgSend(v16, "notification");
  v27 = objc_msgSend(v26, "request");

  v28 = objc_msgSend(v27, "content");
  v29 = objc_msgSend(v28, "defaultActionURL");

  if (!v29)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v5, 1, 1, v6);
    return sub_10009E0DC((uint64_t)v5);
  }
  static URL._unconditionallyBridgeFromObjectiveC(_:)(v29);

  v30 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
  v30(v5, v11, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v5, 0, 1, v6);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
    return sub_10009E0DC((uint64_t)v5);
  v30(v14, v5, v6);
  v31 = objc_msgSend((id)objc_opt_self(LSApplicationWorkspace), "defaultWorkspace");
  if (v31)
  {
    v33 = v31;
    URL._bridgeToObjectiveC()(v32);
    v35 = v34;
    v36 = sub_100015894((uint64_t)_swiftEmptyArrayStorage);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v36);
    objc_msgSend(v33, "openSensitiveURL:withOptions:", v35, isa);

  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v14, v6);
}

unint64_t sub_1001B5B74()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100297588;
  if (!qword_100297588)
  {
    v1 = sub_1000067D4(255, &qword_100297580, UNNotificationCategory_ptr);
    result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_100297588);
  }
  return result;
}

_QWORD *sub_1001B5BCC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t *, uint64_t, uint64_t);
  void (*v16)(uint64_t *, uint64_t);
  void (*v17)(uint64_t *, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  void (*v23)(uint64_t *, _QWORD, uint64_t);
  id v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  _QWORD *v50;
  void (*v51)(uint64_t *, _QWORD, uint64_t);
  void (*v52)(uint64_t *, uint64_t);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *result;
  id v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  id v81;
  uint64_t v82;
  _QWORD *v83;
  _QWORD *v84;
  uint64_t v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  id v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  id v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  _QWORD *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  _QWORD *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t *v138;
  uint64_t v139;
  _QWORD *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t *v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t *v148;
  uint64_t v149;
  uint64_t v150;
  id v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  _QWORD *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  void (*v169)(uint64_t *, _QWORD, uint64_t);
  void (*v170)(uint64_t *, uint64_t);
  void (*v171)(uint64_t *, uint64_t);
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t *v186;
  uint64_t v187;
  uint64_t v188;
  id v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  _QWORD *v196;
  uint64_t v197;
  uint64_t *v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t *v210;
  uint64_t v211;
  _QWORD *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  void (*v216)(uint64_t *, _QWORD, uint64_t);
  void (*v217)(uint64_t *, uint64_t);
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t *v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t *v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t *v242;
  uint64_t v243;
  uint64_t v244;
  _QWORD *v245;
  uint64_t v246;
  uint64_t v247;
  _QWORD *v248;
  _QWORD *v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t *v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t *v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t *v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t *v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t *v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t *v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t *v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t *v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  id v297;
  _QWORD *v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t *v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t *v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t v312;
  __n128 v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  void (*v325)(uint64_t *, uint64_t, uint64_t);
  void (*v326)(uint64_t *, uint64_t);
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  void (*v330)(uint64_t *, uint64_t, uint64_t);
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  void (*v336)(uint64_t *, uint64_t);
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  void (*v340)(uint64_t *, uint64_t, uint64_t);
  uint64_t v341;
  uint64_t v342;
  uint64_t *v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  uint64_t *v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  _QWORD *v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  void (*v357)(char *);
  uint64_t v358;
  unint64_t v359;
  id v360;
  uint64_t v361;
  uint64_t v362;
  void (*v363)(_QWORD);
  uint64_t v364;
  char *v365;
  _QWORD *v366;
  _QWORD *v367;
  uint64_t *v368;
  uint64_t v369;
  uint64_t v370;
  _QWORD *v371;
  _QWORD *v372;
  _QWORD *v373;
  _QWORD *v374;
  _QWORD *v375;
  uint64_t v376;
  unsigned int v377;
  _QWORD *v378;
  _QWORD *v379;
  uint64_t v380;
  _QWORD *v381;
  uint64_t v382;
  void (*v383)(uint64_t *, _QWORD, uint64_t);
  void (*v384)(uint64_t *, uint64_t);
  unsigned int v385;
  _QWORD v386[5];
  _QWORD v387[3];
  uint64_t v388;
  __int128 v389;
  uint64_t v390;
  _UNKNOWN **v391;
  __int128 v392;
  uint64_t v393;
  _UNKNOWN **v394;
  __int128 v395;
  uint64_t v396;
  _UNKNOWN **v397;
  __int128 v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  _QWORD v402[13];

  v1 = v0;
  v2 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v2, v3);
  v365 = (char *)&v355 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DependencyRegistry.Entry(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  v9 = (uint64_t *)((char *)&v355 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = type metadata accessor for DependencyRegistry(0);
  v11 = sub_1000080B4((uint64_t *)&unk_10028C900);
  v12 = type metadata accessor for AnalyticsEventFactory();
  v13 = swift_allocObject(v12, 16, 7);
  v9[3] = v12;
  *v9 = v13;
  v14 = enum case for DependencyRegistry.Entry.exact(_:);
  v15 = *(void (**)(uint64_t *, _QWORD, uint64_t))(v6 + 104);
  v15(v9, enum case for DependencyRegistry.Entry.exact(_:), v5);
  static DependencyRegistry.register<A>(_:entry:dependencyId:)(v11, v9, 0, 0, v11);
  v16 = *(void (**)(uint64_t *, uint64_t))(v6 + 8);
  v16(v9, v5);
  v17 = v16;
  v18 = sub_1000080B4((uint64_t *)&unk_10028C910);
  v19 = type metadata accessor for AnalyticsRTCReporter();
  v20 = swift_allocObject(v19, 16, 7);
  v9[3] = v19;
  *v9 = v20;
  v385 = v14;
  v15(v9, v14, v5);
  static DependencyRegistry.register<A>(_:entry:dependencyId:)(v18, v9, 0, 0, v18);
  v17(v9, v5);
  v21 = objc_msgSend(objc_allocWithZone((Class)AAContactsManager), "init");
  *(_QWORD *)(v1 + 16) = v21;
  v22 = sub_1000080B4((uint64_t *)&unk_100291CA0);
  v9[3] = swift_getObjectType(v21);
  *v9 = (uint64_t)v21;
  v15(v9, v14, v5);
  v23 = v15;
  v383 = v15;
  v24 = v21;
  v382 = v10;
  static DependencyRegistry.register<A>(_:entry:dependencyId:)(v22, v9, 0, 0, v22);
  v17(v9, v5);
  v384 = v17;
  v25 = type metadata accessor for DaemonStorageFactory();
  v26 = swift_allocObject(v25, 16, 7);
  sub_1000C8AF8(&v398);
  swift_setDeallocating(v26);
  swift_deallocClassInstance(v26, 16, 7);
  v27 = v381;
  v28 = v381 + 3;
  sub_10003A190(&v398, (uint64_t)(v381 + 3));
  v29 = sub_1000080B4(&qword_10028C8A0);
  v30 = v27[6];
  v31 = sub_10000732C(v28, v30);
  v9[3] = v30;
  v32 = sub_1000B9D04(v9);
  (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v30 - 8) + 16))(v32, v31, v30);
  v23(v9, v385, v5);
  static DependencyRegistry.register<A>(_:entry:dependencyId:)(v29, v9, 0, 0, v29);
  v17(v9, v5);
  v379 = v28;
  sub_100006CA4((uint64_t)v28, (uint64_t)&v398);
  v33 = sub_1000067AC((uint64_t)&v398, v399);
  __chkstk_darwin(v33, v33);
  v35 = (uint64_t *)((char *)&v355 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v36 + 16))(v35);
  v37 = *v35;
  v38 = type metadata accessor for StorageController();
  v396 = v38;
  v397 = &off_100266E08;
  *(_QWORD *)&v395 = v37;
  v39 = type metadata accessor for CustodianStorageController();
  v40 = (_QWORD *)swift_allocObject(v39, 56, 7);
  v41 = sub_1000067AC((uint64_t)&v395, v38);
  __chkstk_darwin(v41, v41);
  v43 = (uint64_t *)((char *)&v355 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v44 + 16))(v43);
  v45 = *v43;
  v40[5] = v38;
  v40[6] = &off_100266E08;
  v40[2] = v45;
  sub_100006F58(&v395);
  sub_100006F58(&v398);
  v46 = v381;
  v47 = v381;
  v381[8] = v40;
  v46[11] = v39;
  v46[12] = &off_10026E068;
  v48 = sub_1000080B4(&qword_10028C880);
  v378 = v47 + 8;
  v49 = sub_10000732C(v47 + 8, v39);
  v9[3] = v39;
  v50 = sub_1000B9D04(v9);
  v362 = *(_QWORD *)(v39 - 8);
  v363 = *(void (**)(_QWORD))(v362 + 16);
  v364 = v39;
  ((void (*)(_QWORD *, _QWORD *, uint64_t))v363)(v50, v49, v39);
  v51 = v383;
  v383(v9, v385, v5);
  v366 = v40;
  swift_retain(v40);
  v376 = v48;
  static DependencyRegistry.register<A>(_:entry:dependencyId:)(v48, v9, 0, 0, v48);
  v52 = v384;
  v384(v9, v5);
  v53 = sub_1000080B4(&qword_100297720);
  v54 = type metadata accessor for CustodianHealthCheckVersionProviderFactory();
  v55 = swift_allocObject(v54, 16, 7);
  v9[3] = v54;
  v9[4] = sub_100005150((unint64_t *)&unk_100297728, (uint64_t (*)(uint64_t))type metadata accessor for CustodianHealthCheckVersionProviderFactory, (uint64_t)&unk_100222520);
  *v9 = v55;
  v56 = enum case for DependencyRegistry.Entry.factory(_:);
  v51(v9, enum case for DependencyRegistry.Entry.factory(_:), v5);
  static DependencyRegistry.register<A>(_:entry:dependencyId:)(v53, v9, 0, 0, v53);
  v52(v9, v5);
  v57 = v381;
  v57[13] = objc_msgSend(objc_allocWithZone((Class)AKCustodianController), "init");
  v57[16] = &type metadata for CustodianIDMSRequestManager;
  v57[17] = &off_100261178;
  v372 = v57 + 13;
  v58 = sub_1000080B4(&qword_10028C890);
  v59 = type metadata accessor for CustodianIDMSRequestManagerFactory();
  v60 = swift_allocObject(v59, 16, 7);
  v9[3] = v59;
  v9[4] = sub_100005150((unint64_t *)&unk_100297738, (uint64_t (*)(uint64_t))type metadata accessor for CustodianIDMSRequestManagerFactory, (uint64_t)&unk_100222610);
  *v9 = v60;
  v377 = v56;
  v383(v9, v56, v5);
  v361 = v58;
  static DependencyRegistry.register<A>(_:entry:dependencyId:)(v58, v9, 0, 0, v58);
  v380 = v5;
  v384(v9, v5);
  v61 = type metadata accessor for DaemonAccountStore();
  v62 = swift_allocObject(v61, 32, 7);
  result = objc_msgSend((id)objc_opt_self(ACAccountStore), "defaultStore");
  if (result)
  {
    *(_QWORD *)(v62 + 16) = result;
    *(_QWORD *)(v62 + 24) = objc_msgSend((id)objc_opt_self(AKAccountManager), "sharedInstance");
    v57[18] = v62;
    v375 = v57 + 18;
    v370 = v61;
    v57[21] = v61;
    v57[22] = &off_100261290;
    v64 = objc_msgSend((id)objc_opt_self(AAMessagingService), "sharedService");
    v57[28] = v64;
    v65 = type metadata accessor for DaemonDestinationBuilder();
    v66 = swift_allocObject(v65, 16, 7);
    v57[32] = v65;
    v57[33] = &off_100265EA8;
    v57[29] = v66;
    sub_100006CA4((uint64_t)(v57 + 29), (uint64_t)&v398);
    v67 = sub_1000067AC((uint64_t)&v398, v399);
    __chkstk_darwin(v67, v67);
    v69 = (uint64_t *)((char *)&v355 - ((v68 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v70 + 16))(v69);
    v71 = *v69;
    v396 = v65;
    v397 = &off_100265EA8;
    *(_QWORD *)&v395 = v71;
    v72 = type metadata accessor for DaemonCustodianMessenger();
    v73 = (_QWORD *)swift_allocObject(v72, 64, 7);
    v74 = sub_1000067AC((uint64_t)&v395, v65);
    __chkstk_darwin(v74, v74);
    v76 = v57;
    v77 = (uint64_t *)((char *)&v355 - ((v75 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v78 + 16))(v77);
    v79 = *v77;
    v80 = v76;
    v73[6] = v65;
    v73[7] = &off_100265EA8;
    v73[2] = v64;
    v73[3] = v79;
    v81 = v64;
    sub_100006F58(&v395);
    sub_100006F58(&v398);
    v76[23] = v73;
    v76[26] = v72;
    v76[27] = &off_10026B430;
    v82 = sub_1000080B4(&qword_10028C8B0);
    v374 = v76 + 23;
    v83 = sub_10000732C(v76 + 23, v72);
    v9[3] = v72;
    v84 = sub_1000B9D04(v9);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v72 - 8) + 16))(v84, v83, v72);
    v85 = v380;
    v383(v9, v385, v380);
    static DependencyRegistry.register<A>(_:entry:dependencyId:)(v82, v9, 0, 0, v82);
    v384(v9, v85);
    if (qword_10028AEE0 != -1)
      swift_once(&qword_10028AEE0, sub_10018F828);
    v86 = (void *)qword_1002A8BF8;
    v76[37] = type metadata accessor for PushHelperService();
    v76[38] = &off_10026C838;
    v76[34] = v86;
    v87 = (uint64_t)v372;
    sub_100006CA4((uint64_t)v372, (uint64_t)&v398);
    sub_100006CA4((uint64_t)(v76 + 34), (uint64_t)&v400);
    sub_100006CA4((uint64_t)v379, (uint64_t)&v401);
    v88 = (uint64_t)v378;
    sub_100006CA4((uint64_t)v378, (uint64_t)v402);
    v89 = qword_10028AD78;
    v90 = v86;
    if (v89 != -1)
      swift_once(&qword_10028AD78, sub_10000C7FC);
    v91 = qword_1002A8950;
    v92 = type metadata accessor for CustodianSPAKEFactory();
    v93 = swift_allocObject(v92, 16, 7);
    v402[11] = &off_10026D570;
    v402[10] = v92;
    v402[7] = v93;
    v402[5] = v91;
    v402[6] = &off_10025F388;
    sub_1001B85A4(&v398, &v395);
    v94 = type metadata accessor for CustodianRecoveryController(0);
    swift_allocObject(v94, *(unsigned int *)(v94 + 48), *(unsigned __int16 *)(v94 + 52));
    swift_retain(v91);
    v95 = sub_10013DCE0(&v395);
    v373 = v80 + 39;
    v80[42] = v94;
    v80[43] = &off_100269C58;
    v80[39] = v95;
    v96 = objc_msgSend(objc_allocWithZone((Class)AAFollowUpController), "init");
    sub_100006CA4(v88, (uint64_t)&v395);
    sub_100006CA4(v87, (uint64_t)&v392);
    v97 = sub_1000067AC((uint64_t)&v395, v396);
    __chkstk_darwin(v97, v97);
    v99 = v80;
    v100 = (uint64_t *)((char *)&v355 - ((v98 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v101 + 16))(v100);
    v102 = sub_1000067AC((uint64_t)&v392, v393);
    __chkstk_darwin(v102, v102);
    v104 = (uint64_t *)((char *)&v355 - ((v103 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v105 + 16))(v104);
    v106 = *v100;
    v107 = *v104;
    v360 = v96;
    v108 = sub_1001B8B08(v106, v107, (uint64_t)v360);
    sub_100006F58(&v392);
    sub_100006F58(&v395);
    v371 = v99 + 44;
    v109 = type metadata accessor for CustodianRecoveryFollowUpController();
    v99[47] = v109;
    v99[48] = &off_100260C78;
    v99[44] = v108;
    sub_100006CA4((uint64_t)v373, (uint64_t)&v395);
    v110 = sub_1000067AC((uint64_t)&v395, v396);
    __chkstk_darwin(v110, v110);
    v112 = (uint64_t *)((char *)&v355 - ((v111 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v113 + 16))(v112);
    v114 = *v112;
    v393 = v94;
    v394 = &off_100269C58;
    *(_QWORD *)&v392 = v114;
    v115 = type metadata accessor for CustodianPushServiceDelegate();
    v116 = (_QWORD *)swift_allocObject(v115, 56, 7);
    v117 = sub_1000067AC((uint64_t)&v392, v94);
    __chkstk_darwin(v117, v117);
    v119 = (uint64_t *)((char *)&v355 - ((v118 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v120 + 16))(v119);
    v121 = *v119;
    v116[5] = v94;
    v116[6] = &off_100269C58;
    v116[2] = v121;
    sub_100006F58(&v392);
    sub_100006F58(&v395);
    v99[49] = v116;
    v99[50] = &off_10026CA20;
    sub_100006CA4((uint64_t)v371, (uint64_t)&v395);
    v122 = sub_1000067AC((uint64_t)&v395, v396);
    __chkstk_darwin(v122, v122);
    v124 = (uint64_t *)((char *)&v355 - ((v123 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v125 + 16))(v124);
    v126 = *v124;
    v393 = v109;
    v394 = &off_100260C78;
    *(_QWORD *)&v392 = v126;
    v127 = type metadata accessor for EmbargoPushServiceDelegate();
    v128 = (_QWORD *)swift_allocObject(v127, 56, 7);
    v129 = sub_1000067AC((uint64_t)&v392, v109);
    __chkstk_darwin(v129, v129);
    v131 = (uint64_t *)((char *)&v355 - ((v130 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v132 + 16))(v131);
    v133 = *v131;
    v128[5] = v109;
    v128[6] = &off_100260C78;
    v128[2] = v133;
    sub_100006F58(&v392);
    sub_100006F58(&v395);
    v99[51] = v128;
    v99[52] = &off_100260C58;
    sub_100006CA4((uint64_t)v378, (uint64_t)&v395);
    v134 = type metadata accessor for DaemonFamilyRequester();
    v135 = swift_allocObject(v134, 16, 7);
    v136 = sub_1000067AC((uint64_t)&v395, v396);
    __chkstk_darwin(v136, v136);
    v138 = (uint64_t *)((char *)&v355 - ((v137 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v139 + 16))(v138);
    v140 = sub_1001B8C88(*v138, v135);
    sub_100006F58(&v395);
    v368 = v99 + 59;
    v99[62] = type metadata accessor for CustodianFamilyManager();
    v99[63] = &off_10026CFB0;
    v99[59] = v140;
    sub_100006CA4((uint64_t)v379, (uint64_t)&v395);
    v141 = (uint64_t)v375;
    sub_100006CA4((uint64_t)v375, (uint64_t)&v392);
    v142 = sub_1000067AC((uint64_t)&v395, v396);
    __chkstk_darwin(v142, v142);
    v144 = (uint64_t *)((char *)&v355 - ((v143 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v145 + 16))(v144);
    v146 = sub_1000067AC((uint64_t)&v392, v393);
    __chkstk_darwin(v146, v146);
    v148 = (uint64_t *)((char *)&v355 - ((v147 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v149 + 16))(v148);
    v150 = sub_1001B97EC(*v144, *v148, (uint64_t (*)(_QWORD))type metadata accessor for DaemonAccountStore, (uint64_t)&off_100261290, (uint64_t (*)(_QWORD))type metadata accessor for CustodianAutoAcceptValidator, (void (*)(_QWORD *, uint64_t))sub_10003A190);
    sub_100006F58(&v392);
    sub_100006F58(&v395);
    v367 = v99 + 75;
    v99[78] = type metadata accessor for CustodianAutoAcceptValidator();
    v99[79] = &off_10026DFA0;
    v99[75] = v150;
    v371 = (_QWORD *)sub_1000080B4((uint64_t *)&unk_10028C870);
    sub_100006CA4(v141, (uint64_t)&v395);
    v151 = objc_msgSend(objc_allocWithZone((Class)CDPCustodianRecoveryKeyController), "init");
    v152 = sub_1000067AC((uint64_t)&v395, v396);
    __chkstk_darwin(v152, v152);
    v154 = (uint64_t *)((char *)&v355 - ((v153 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v155 + 16))(v154);
    v156 = *v154;
    v157 = v370;
    v393 = v370;
    v394 = &off_100261290;
    *(_QWORD *)&v392 = v156;
    v158 = type metadata accessor for DaemonSecurityController(0);
    v159 = *(unsigned int *)(v158 + 48);
    v160 = *(unsigned __int16 *)(v158 + 52);
    v161 = v158;
    v355 = v158;
    v162 = (_QWORD *)swift_allocObject(v158, v159, v160);
    v163 = sub_1000067AC((uint64_t)&v392, v157);
    v358 = *(_QWORD *)(*(_QWORD *)(v157 - 8) + 64);
    __chkstk_darwin(v163, v163);
    v359 = (v164 + 15) & 0xFFFFFFFFFFFFFFF0;
    v165 = (uint64_t *)((char *)&v355 - v359);
    v357 = *(void (**)(char *))(v166 + 16);
    v357((char *)&v355 - v359);
    v167 = *v165;
    v162[5] = v157;
    v162[6] = &off_100261290;
    v162[2] = v167;
    v356 = sub_1000080B4((uint64_t *)&unk_100297710);
    Dependency.init(dependencyId:config:)(0, 0, 0, v356);
    v162[7] = v151;
    sub_100006F58(&v392);
    sub_100006F58(&v395);
    v9[3] = v161;
    *v9 = (uint64_t)v162;
    v168 = v380;
    v169 = v383;
    v383(v9, v385, v380);
    static DependencyRegistry.register<A>(_:entry:dependencyId:)(v371, v9, 0, 0, v371);
    v170 = v384;
    v384(v9, v168);
    v171 = v170;
    v172 = sub_1000080B4(&qword_100294AE0);
    v173 = type metadata accessor for NotificationManagerFactory();
    v174 = swift_allocObject(v173, 16, 7);
    v9[3] = v173;
    v9[4] = sub_100005150(&qword_100297748, (uint64_t (*)(uint64_t))type metadata accessor for NotificationManagerFactory, (uint64_t)&unk_100222598);
    *v9 = v174;
    v169(v9, v377, v168);
    v373 = (_QWORD *)v172;
    static DependencyRegistry.register<A>(_:entry:dependencyId:)(v172, v9, 0, 0, v172);
    v171(v9, v168);
    sub_100006CA4((uint64_t)v374, (uint64_t)&v395);
    v175 = (uint64_t)v378;
    sub_100006CA4((uint64_t)v378, (uint64_t)&v392);
    sub_100006CA4((uint64_t)v379, (uint64_t)&v389);
    v176 = sub_1000067AC((uint64_t)&v395, v396);
    __chkstk_darwin(v176, v176);
    v178 = (uint64_t *)((char *)&v355 - ((v177 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v179 + 16))(v178);
    v180 = sub_1000067AC((uint64_t)&v392, v393);
    __chkstk_darwin(v180, v180);
    v182 = (uint64_t *)((char *)&v355 - ((v181 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v183 + 16))(v182);
    v184 = sub_1000067AC((uint64_t)&v389, v390);
    __chkstk_darwin(v184, v184);
    v186 = (uint64_t *)((char *)&v355 - ((v185 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v187 + 16))(v186);
    v369 = sub_1001B8E40(*v178, *v182, *v186);
    sub_100006F58(&v389);
    sub_100006F58(&v392);
    sub_100006F58(&v395);
    v188 = (uint64_t)v375;
    sub_100006CA4((uint64_t)v375, (uint64_t)&v395);
    sub_100006CA4(v175, (uint64_t)&v392);
    sub_100006CA4((uint64_t)v372, (uint64_t)&v389);
    sub_100006CA4(v188, (uint64_t)v387);
    v189 = objc_msgSend(objc_allocWithZone((Class)CDPCustodianRecoveryKeyController), "init");
    v190 = sub_1000067AC((uint64_t)v387, v388);
    __chkstk_darwin(v190, v190);
    v192 = (uint64_t *)((char *)&v355 - ((v191 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v193 + 16))(v192);
    v194 = *v192;
    v195 = v370;
    v386[3] = v370;
    v386[4] = &off_100261290;
    v386[0] = v194;
    v196 = (_QWORD *)swift_allocObject(v355, *(unsigned int *)(v355 + 48), *(unsigned __int16 *)(v355 + 52));
    v197 = sub_1000067AC((uint64_t)v386, v195);
    __chkstk_darwin(v197, v197);
    v198 = (uint64_t *)((char *)&v355 - v359);
    v357((char *)&v355 - v359);
    v199 = *v198;
    v196[5] = v195;
    v196[6] = &off_100261290;
    v196[2] = v199;
    Dependency.init(dependencyId:config:)(0, 0, 0, v356);
    v196[7] = v189;
    sub_100006F58(v386);
    sub_100006F58(v387);
    v200 = sub_1000067AC((uint64_t)&v395, v396);
    __chkstk_darwin(v200, v200);
    v202 = (uint64_t *)((char *)&v355 - ((v201 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v203 + 16))(v202);
    v204 = sub_1000067AC((uint64_t)&v392, v393);
    __chkstk_darwin(v204, v204);
    v206 = (uint64_t *)((char *)&v355 - ((v205 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v207 + 16))(v206);
    v208 = sub_1000067AC((uint64_t)&v389, v390);
    __chkstk_darwin(v208, v208);
    v210 = (uint64_t *)((char *)&v355 - ((v209 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v211 + 16))(v210);
    v212 = sub_1001B9000(*v202, *v206, *v210, (uint64_t)v196);
    v372 = v212;
    sub_100006F58(&v389);
    sub_100006F58(&v392);
    sub_100006F58(&v395);
    v213 = sub_1000080B4((uint64_t *)&unk_100297750);
    v214 = type metadata accessor for CustodianCleanupController();
    v9[3] = v214;
    *v9 = (uint64_t)v212;
    v215 = v380;
    v216 = v383;
    v383(v9, v385, v380);
    swift_retain(v212);
    static DependencyRegistry.register<A>(_:entry:dependencyId:)(v213, v9, 0, 0, v213);
    v217 = v384;
    v384(v9, v215);
    v218 = sub_1000080B4(&qword_10028E280);
    v219 = type metadata accessor for RecoveryFactorsControllerFactory();
    v220 = swift_allocObject(v219, 16, 7);
    v9[3] = v219;
    v9[4] = sub_100005150((unint64_t *)&unk_100297760, (uint64_t (*)(uint64_t))type metadata accessor for RecoveryFactorsControllerFactory, (uint64_t)&unk_100222570);
    *v9 = v220;
    v216(v9, v377, v215);
    static DependencyRegistry.register<A>(_:entry:dependencyId:)(v218, v9, 0, 0, v218);
    v217(v9, v215);
    v396 = v214;
    v397 = &off_10025FF40;
    v221 = (uint64_t)v372;
    *(_QWORD *)&v395 = v372;
    v222 = type metadata accessor for DeclinedStatusHandler(0);
    v223 = swift_allocObject(v222, *(unsigned int *)(v222 + 48), *(unsigned __int16 *)(v222 + 52));
    v224 = sub_1000067AC((uint64_t)&v395, v214);
    __chkstk_darwin(v224, v224);
    v226 = (uint64_t *)((char *)&v355 - ((v225 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v227 + 16))(v226);
    v228 = *v226;
    v393 = v214;
    v394 = &off_10025FF40;
    *(_QWORD *)&v392 = v228;
    swift_retain(v221);
    v370 = sub_1000080B4(&qword_10028C860);
    Dependency.init(dependencyId:config:)(0, 0, 0, v370);
    v229 = (uint64_t)v373;
    Dependency.init(dependencyId:config:)(0, 0, 0, v373);
    v230 = sub_1000080B4(&qword_10028C8D0);
    Dependency.init(dependencyId:config:)(0, 0, 0, v230);
    v231 = v376;
    Dependency.init(dependencyId:config:)(0, 0, 0, v376);
    sub_10003A190(&v392, v223 + 16);
    sub_100006F58(&v395);
    sub_100006CA4((uint64_t)v378, (uint64_t)&v395);
    sub_100006CA4((uint64_t)v379, (uint64_t)&v392);
    v232 = type metadata accessor for NotReachableStatusHandler(0);
    v233 = swift_allocObject(v232, *(unsigned int *)(v232 + 48), *(unsigned __int16 *)(v232 + 52));
    v234 = v369;
    swift_retain(v369);
    v235 = v223;
    v359 = v223;
    swift_retain(v223);
    Dependency.init(dependencyId:config:)(0, 0, 0, v229);
    Dependency.init(dependencyId:config:)(0, 0, 0, v230);
    Dependency.init(dependencyId:config:)(0, 0, 0, v231);
    v236 = sub_1000067AC((uint64_t)&v395, v396);
    __chkstk_darwin(v236, v236);
    v238 = (uint64_t *)((char *)&v355 - ((v237 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v239 + 16))(v238);
    v240 = sub_1000067AC((uint64_t)&v392, v393);
    __chkstk_darwin(v240, v240);
    v242 = (uint64_t *)((char *)&v355 - ((v241 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v243 + 16))(v242);
    v244 = sub_1001B9290(*v238, *v242, v234, v235, v233);
    sub_100006F58(&v392);
    sub_100006F58(&v395);
    v245 = v381;
    v246 = type metadata accessor for CustodianStatusUpdater();
    v245[67] = v246;
    v245[68] = &off_10026F190;
    v245[64] = v244;
    v247 = sub_1000080B4((uint64_t *)&unk_100296B60);
    v248 = sub_10000732C(v245 + 64, v246);
    v9[3] = v246;
    v249 = sub_1000B9D04(v9);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v246 - 8) + 16))(v249, v248, v246);
    v250 = v380;
    v383(v9, v385, v380);
    static DependencyRegistry.register<A>(_:entry:dependencyId:)(v247, v9, 0, 0, v247);
    v384(v9, v250);
    sub_100006CA4((uint64_t)v374, (uint64_t)&v395);
    sub_100006CA4((uint64_t)v368, (uint64_t)&v392);
    v251 = (uint64_t)v379;
    sub_100006CA4((uint64_t)v379, (uint64_t)&v389);
    sub_100006CA4((uint64_t)v367, (uint64_t)v387);
    v252 = sub_1000067AC((uint64_t)&v395, v396);
    v368 = &v355;
    __chkstk_darwin(v252, v252);
    v254 = (uint64_t *)((char *)&v355 - ((v253 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v255 + 16))(v254);
    v256 = sub_1000067AC((uint64_t)&v389, v390);
    __chkstk_darwin(v256, v256);
    v258 = (uint64_t *)((char *)&v355 - ((v257 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v259 + 16))(v258);
    v260 = sub_1000067AC((uint64_t)v387, v388);
    __chkstk_darwin(v260, v260);
    v262 = (uint64_t *)((char *)&v355 - ((v261 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v263 + 16))(v262);
    v367 = (_QWORD *)sub_1001B9484(*v254, &v392, *v258, *v262);
    sub_100006F58(v387);
    sub_100006F58(&v389);
    sub_100006F58(&v395);
    v264 = type metadata accessor for DaemonInvitationResponseHandler(0);
    v368 = (uint64_t *)swift_allocObject(v264, *(unsigned int *)(v264 + 48), *(unsigned __int16 *)(v264 + 52));
    Dependency.init(dependencyId:config:)(0, 0, 0, v247);
    sub_100006CA4((uint64_t)v374, (uint64_t)&v395);
    sub_100006CA4(v251, (uint64_t)&v392);
    v265 = sub_1000067AC((uint64_t)&v395, v396);
    __chkstk_darwin(v265, v265);
    v267 = (uint64_t *)((char *)&v355 - ((v266 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v268 + 16))(v267);
    v269 = sub_1000067AC((uint64_t)&v392, v393);
    __chkstk_darwin(v269, v269);
    v271 = (uint64_t *)((char *)&v355 - ((v270 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v272 + 16))(v271);
    v374 = (_QWORD *)sub_1001B964C(*v267, *v271);
    sub_100006F58(&v392);
    sub_100006F58(&v395);
    v273 = type metadata accessor for DaemonSetupFinalizationHandler(0);
    v274 = swift_allocObject(v273, *(unsigned int *)(v273 + 48), *(unsigned __int16 *)(v273 + 52));
    Dependency.init(dependencyId:config:)(0, 0, 0, v361);
    Dependency.init(dependencyId:config:)(0, 0, 0, v376);
    Dependency.init(dependencyId:config:)(0, 0, 0, v373);
    v275 = sub_1000080B4(&qword_10028E260);
    Dependency.init(dependencyId:config:)(0, 0, 0, v275);
    v276 = sub_1000080B4(&qword_100293358);
    v9[3] = v273;
    *v9 = v274;
    v277 = v380;
    v383(v9, v385, v380);
    swift_retain(v274);
    static DependencyRegistry.register<A>(_:entry:dependencyId:)(v276, v9, 0, 0, v276);
    v384(v9, v277);
    sub_100006CA4(v251, (uint64_t)&v395);
    v278 = (uint64_t)v378;
    sub_100006CA4((uint64_t)v378, (uint64_t)&v392);
    v279 = sub_1000067AC((uint64_t)&v395, v396);
    __chkstk_darwin(v279, v279);
    v281 = (uint64_t *)((char *)&v355 - ((v280 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v282 + 16))(v281);
    v283 = sub_1000067AC((uint64_t)&v392, v393);
    __chkstk_darwin(v283, v283);
    v285 = (uint64_t *)((char *)&v355 - ((v284 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v286 + 16))(v285);
    v287 = sub_1001B97EC(*v281, *v285, (uint64_t (*)(_QWORD))type metadata accessor for CustodianStorageController, (uint64_t)&off_10026E068, (uint64_t (*)(_QWORD))type metadata accessor for DaemonCustodianRemovedHandler, (void (*)(_QWORD *, uint64_t))sub_10003A190);
    sub_100006F58(&v392);
    sub_100006F58(&v395);
    sub_100006CA4((uint64_t)v375, (uint64_t)&v395);
    v288 = sub_1000067AC((uint64_t)&v395, v396);
    __chkstk_darwin(v288, v288);
    v290 = (uint64_t *)((char *)&v355 - ((v289 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v291 + 16))(v290);
    v292 = *v290;
    v293 = v274;
    v358 = v274;
    swift_retain(v274);
    v294 = (uint64_t)v367;
    swift_retain(v367);
    v295 = (uint64_t)v368;
    swift_retain(v368);
    v296 = (uint64_t)v374;
    swift_retain(v374);
    v361 = v287;
    swift_retain(v287);
    v297 = sub_1001B996C(v292, v294, v295, v296, v293, v287);
    sub_100006F58(&v395);
    v298 = v381;
    v381[69] = v297;
    objc_msgSend((id)v298[28], "setCustodianDelegate:", v297);
    v298[58] = objc_msgSend(objc_allocWithZone((Class)AATrustedContactFlowPresenter), "init");
    sub_100006CA4(v278, (uint64_t)&v395);
    v299 = sub_1000067AC((uint64_t)&v395, v396);
    __chkstk_darwin(v299, v299);
    v301 = (uint64_t *)((char *)&v355 - ((v300 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v302 + 16))(v301);
    v303 = *v301;
    v304 = v364;
    v393 = v364;
    v394 = &off_10026E068;
    *(_QWORD *)&v392 = v303;
    v305 = type metadata accessor for CustodianInvitationStatusChecker(0);
    v306 = swift_allocObject(v305, *(unsigned int *)(v305 + 48), *(unsigned __int16 *)(v305 + 52));
    v307 = sub_1000067AC((uint64_t)&v392, v304);
    __chkstk_darwin(v307, v307);
    v309 = (uint64_t *)((char *)&v355 - ((v308 + 15) & 0xFFFFFFFFFFFFFFF0));
    v363(v309);
    v310 = *v309;
    v390 = v304;
    v391 = &off_10026E068;
    *(_QWORD *)&v389 = v310;
    Dependency.init(dependencyId:config:)(0, 0, 0, v373);
    Dependency.init(dependencyId:config:)(0, 0, 0, v370);
    sub_10003A190(&v389, v306 + 16);
    sub_100006F58(&v392);
    sub_100006F58(&v395);
    v298[73] = v305;
    v298[74] = &off_100260D58;
    v298[70] = v306;
    v311 = *sub_10000732C(v298 + 70, v305);
    v312 = (uint64_t)v365;
    static DispatchQoS.background.getter(v313);
    v314 = swift_allocObject(&unk_10026DF10, 56, 7);
    *(_BYTE *)(v314 + 16) = 0;
    *(_BYTE *)(v314 + 17) = 1;
    *(_DWORD *)(v314 + 18) = v389;
    *(_WORD *)(v314 + 22) = WORD2(v389);
    *(int64x2_t *)(v314 + 24) = vdupq_n_s64(0x8CA0uLL);
    *(_OWORD *)(v314 + 40) = xmmword_100221330;
    v315 = swift_allocObject(&unk_10026DF38, 24, 7);
    swift_weakInit(v315 + 16, v311);
    v316 = type metadata accessor for XPCActivity();
    swift_allocObject(v316, 104, 7);
    v317 = sub_10002E144(0xD000000000000037, (void *)0x800000010020F960, v312, (uint64_t)sub_1000108D0, v314, (uint64_t)sub_1001B9CE8, v315);
    swift_release(v314);
    swift_release(v315);
    v318 = type metadata accessor for OSTransaction();
    swift_allocObject(v318, 48, 7);
    v319 = sub_1000E0EB0("com.apple.appleaccountd.custodian.invitationStatusCheck", 55, 2);
    sub_100041188(v319, v317);
    swift_release(v317);
    swift_release(v319);
    v320 = sub_1000080B4(&qword_100297770);
    v321 = type metadata accessor for AAAppleIDAuthenticationProviderFactory();
    v322 = swift_allocObject(v321, 16, 7);
    v9[3] = v321;
    v9[4] = sub_100005150((unint64_t *)&unk_100297778, (uint64_t (*)(uint64_t))type metadata accessor for AAAppleIDAuthenticationProviderFactory, (uint64_t)&unk_100222480);
    *v9 = v322;
    v323 = v377;
    v324 = v380;
    v325 = v383;
    v383(v9, v377, v380);
    static DependencyRegistry.register<A>(_:entry:dependencyId:)(v320, v9, 0, 0, v320);
    v326 = v384;
    v384(v9, v324);
    v327 = sub_1000080B4((uint64_t *)&unk_10028E290);
    v328 = type metadata accessor for CustodianIdMSConfirmationHandlerFactory();
    v329 = swift_allocObject(v328, 16, 7);
    v9[3] = v328;
    v9[4] = sub_100005150((unint64_t *)&unk_100297788, (uint64_t (*)(uint64_t))type metadata accessor for CustodianIdMSConfirmationHandlerFactory, (uint64_t)&unk_1002224D0);
    *v9 = v329;
    v325(v9, v323, v324);
    v330 = v325;
    static DependencyRegistry.register<A>(_:entry:dependencyId:)(v327, v9, 0, 0, v327);
    v326(v9, v324);
    v331 = sub_1000080B4(&qword_10028E2B0);
    v332 = type metadata accessor for DaemonCustodianFetcher(0);
    v333 = swift_allocObject(v332, *(unsigned int *)(v332 + 48), *(unsigned __int16 *)(v332 + 52));
    Dependency.init(dependencyId:config:)(0, 0, 0, v370);
    Dependency.init(dependencyId:config:)(0, 0, 0, v376);
    Dependency.init(dependencyId:config:)(0, 0, 0, v327);
    Dependency.init(dependencyId:config:)(0, 0, 0, v371);
    v334 = sub_1000080B4((uint64_t *)&unk_10028C8C0);
    Dependency.init(dependencyId:config:)(0, 0, 0, v334);
    v9[3] = v332;
    *v9 = v333;
    v325(v9, v385, v324);
    static DependencyRegistry.register<A>(_:entry:dependencyId:)(v331, v9, 0, 0, v331);
    v335 = v324;
    v336 = v326;
    v326(v9, v324);
    v337 = sub_1000080B4(&qword_10028E2C0);
    v338 = type metadata accessor for CustodianKeyRepairFactory();
    v339 = swift_allocObject(v338, 16, 7);
    v9[3] = v338;
    v9[4] = sub_100005150(&qword_100297798, (uint64_t (*)(uint64_t))type metadata accessor for CustodianKeyRepairFactory, (uint64_t)&unk_1002225E8);
    *v9 = v339;
    v330(v9, v377, v324);
    v340 = v330;
    static DependencyRegistry.register<A>(_:entry:dependencyId:)(v337, v9, 0, 0, v337);
    v336(v9, v324);
    sub_100006CA4((uint64_t)v379, (uint64_t)&v395);
    sub_100006CA4((uint64_t)v378, (uint64_t)&v392);
    v341 = sub_1000067AC((uint64_t)&v395, v396);
    __chkstk_darwin(v341, v341);
    v343 = (uint64_t *)((char *)&v355 - ((v342 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v344 + 16))(v343);
    v345 = sub_1000067AC((uint64_t)&v392, v393);
    __chkstk_darwin(v345, v345);
    v347 = (uint64_t *)((char *)&v355 - ((v346 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v348 + 16))(v347);
    v349 = sub_1001B9CF0(*v343, *v347);
    sub_100006F58(&v392);
    sub_100006F58(&v395);
    v350 = type metadata accessor for CustodianManateeMigrator(0);
    v351 = v381;
    v381[56] = v350;
    v351[57] = &off_100267838;
    v351[53] = v349;
    v352 = type metadata accessor for CustodianPreflightHealthCheck(0);
    swift_allocObject(v352, *(unsigned int *)(v352 + 48), *(unsigned __int16 *)(v352 + 52));
    v353 = sub_10010B284();
    v354 = sub_1000080B4((uint64_t *)&unk_10028E2D0);
    v9[3] = v352;
    *v9 = v353;
    v340(v9, v385, v335);
    swift_retain(v353);
    static DependencyRegistry.register<A>(_:entry:dependencyId:)(v354, v9, 0, 0, v354);
    swift_release(v366);

    swift_release(v372);
    swift_release(v369);
    swift_release(v359);
    swift_release(v358);
    swift_release(v367);
    swift_release(v368);
    swift_release(v374);
    swift_release(v361);
    swift_release(v353);
    sub_1001B9E30(&v398);
    v336(v9, v335);
    return v351;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1001B8334@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  _QWORD v19[5];
  _QWORD v20[5];

  sub_100006CA4(v1 + 144, (uint64_t)v20);
  v3 = objc_msgSend(objc_allocWithZone((Class)CDPCustodianRecoveryKeyController), "init");
  v4 = sub_1000067AC((uint64_t)v20, v20[3]);
  __chkstk_darwin(v4, v4);
  v6 = (_QWORD *)((char *)v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v7 + 16))(v6);
  v8 = *v6;
  v9 = type metadata accessor for DaemonAccountStore();
  v19[3] = v9;
  v19[4] = &off_100261290;
  v19[0] = v8;
  v10 = type metadata accessor for DaemonSecurityController(0);
  v11 = (_QWORD *)swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
  v12 = sub_1000067AC((uint64_t)v19, v9);
  __chkstk_darwin(v12, v12);
  v14 = (_QWORD *)((char *)v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v15 + 16))(v14);
  v16 = *v14;
  v11[5] = v9;
  v11[6] = &off_100261290;
  v11[2] = v16;
  v17 = sub_1000080B4((uint64_t *)&unk_100297710);
  Dependency.init(dependencyId:config:)(0, 0, 0, v17);
  v11[7] = v3;
  sub_100006F58(v19);
  result = sub_100006F58(v20);
  a1[3] = v10;
  a1[4] = &off_10026C5A0;
  *a1 = v11;
  return result;
}

_QWORD *sub_1001B84D0()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  sub_100006F58(v0 + 3);
  sub_100006F58(v0 + 8);
  sub_100006F58(v0 + 13);
  sub_100006F58(v0 + 18);
  sub_100006F58(v0 + 23);
  swift_unknownObjectRelease(v0[28]);
  sub_100006F58(v0 + 29);
  sub_100006F58(v0 + 34);
  sub_100006F58(v0 + 39);
  sub_100006F58(v0 + 44);
  swift_unknownObjectRelease(v0[49]);
  swift_unknownObjectRelease(v0[51]);
  sub_100006F58(v0 + 53);
  swift_unknownObjectRelease(v0[58]);
  sub_100006F58(v0 + 59);
  sub_100006F58(v0 + 64);
  swift_unknownObjectRelease(v0[69]);
  sub_100006F58(v0 + 70);
  sub_100006F58(v0 + 75);
  return v0;
}

uint64_t sub_1001B8584()
{
  uint64_t v0;

  sub_1001B84D0();
  return swift_deallocClassInstance(v0, 640, 7);
}

_OWORD *sub_1001B85A4(_OWORD *a1, _OWORD *a2)
{
  initializeWithCopy for CustodianRecoveryContainer(a2, a1);
  return a2;
}

id sub_1001B85E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  id v14;
  objc_super v16;
  _QWORD v17[5];
  _QWORD v18[5];
  _QWORD v19[5];
  _QWORD v20[5];
  _QWORD v21[5];
  _QWORD v22[5];

  v22[3] = type metadata accessor for DaemonAccountStore();
  v22[4] = &off_100261290;
  v22[0] = a1;
  v21[3] = type metadata accessor for DaemonInvitationHandler(0);
  v21[4] = &off_100269388;
  v21[0] = a2;
  v20[3] = type metadata accessor for DaemonInvitationResponseHandler(0);
  v20[4] = &off_10026D5A8;
  v20[0] = a3;
  v19[3] = type metadata accessor for DaemonShareHandler(0);
  v19[4] = &off_10025FE90;
  v19[0] = a4;
  v18[3] = type metadata accessor for DaemonSetupFinalizationHandler(0);
  v18[4] = &off_100266E98;
  v18[0] = a5;
  v17[3] = type metadata accessor for DaemonCustodianRemovedHandler();
  v17[4] = &off_100262868;
  v17[0] = a6;
  sub_100006CA4((uint64_t)v22, (uint64_t)a7 + OBJC_IVAR____TtC13appleaccountd25CustodianMessageProcessor_accountStore);
  sub_100006CA4((uint64_t)v21, (uint64_t)a7 + OBJC_IVAR____TtC13appleaccountd25CustodianMessageProcessor_invitationHandler);
  sub_100006CA4((uint64_t)v20, (uint64_t)a7 + OBJC_IVAR____TtC13appleaccountd25CustodianMessageProcessor_invitationResponseHandler);
  sub_100006CA4((uint64_t)v19, (uint64_t)a7 + OBJC_IVAR____TtC13appleaccountd25CustodianMessageProcessor_shareHandler);
  sub_100006CA4((uint64_t)v18, (uint64_t)a7 + OBJC_IVAR____TtC13appleaccountd25CustodianMessageProcessor_setupFinalizationHandler);
  sub_100006CA4((uint64_t)v17, (uint64_t)a7 + OBJC_IVAR____TtC13appleaccountd25CustodianMessageProcessor_custodianRemovedHandler);
  v16.receiver = a7;
  v16.super_class = (Class)type metadata accessor for CustodianMessageProcessor();
  v14 = objc_msgSendSuper2(&v16, "init");
  sub_100006F58(v17);
  sub_100006F58(v18);
  sub_100006F58(v19);
  sub_100006F58(v20);
  sub_100006F58(v21);
  sub_100006F58(v22);
  return v14;
}

uint64_t sub_1001B8790(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  _QWORD v12[5];
  _QWORD v13[5];

  v13[3] = type metadata accessor for StorageController();
  v13[4] = &off_100266E08;
  v13[0] = a1;
  v12[3] = type metadata accessor for CustodianStorageController();
  v12[4] = &off_10026E068;
  v12[0] = a2;
  v6 = sub_1000080B4(&qword_10028C860);
  Dependency.init(dependencyId:config:)(0, 0, 0, v6);
  v7 = sub_1000080B4(&qword_10028E2C0);
  Dependency.init(dependencyId:config:)(0, 0, 0, v7);
  v8 = OBJC_IVAR____TtC13appleaccountd24CustodianManateeMigrator_dispatchGroup;
  *(_QWORD *)(a3 + v8) = dispatch_group_create();
  v9 = OBJC_IVAR____TtC13appleaccountd24CustodianManateeMigrator_reportResultLock;
  v10 = (_DWORD *)swift_slowAlloc(4, -1);
  *(_QWORD *)(a3 + v9) = v10;
  *v10 = 0;
  *(_QWORD *)(a3 + OBJC_IVAR____TtC13appleaccountd24CustodianManateeMigrator_numOfRecordsMigrated) = 0;
  sub_100006CA4((uint64_t)v13, a3 + 16);
  sub_100006CA4((uint64_t)v12, a3 + 56);
  *(_QWORD *)(a3 + OBJC_IVAR____TtC13appleaccountd24CustodianManateeMigrator_migrateErrors) = _swiftEmptyArrayStorage;
  sub_1000FB6D0();
  if (qword_10028AE80 != -1)
    swift_once(&qword_10028AE80, sub_1000FB6A0);
  objc_msgSend((id)qword_100291E30, "setMaxConcurrentOperationCount:", 1, v12[0]);
  sub_100006F58(v12);
  sub_100006F58(v13);
  return a3;
}

uint64_t sub_1001B8910(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  __int128 v12;
  uint64_t v13;
  _UNKNOWN **v14;
  __int128 v15;
  uint64_t v16;
  _UNKNOWN **v17;
  __int128 v18;
  uint64_t v19;
  _UNKNOWN **v20;

  v19 = type metadata accessor for DaemonCustodianMessenger();
  v20 = &off_10026B430;
  *(_QWORD *)&v18 = a1;
  v16 = type metadata accessor for StorageController();
  v17 = &off_100266E08;
  *(_QWORD *)&v15 = a3;
  v13 = type metadata accessor for CustodianAutoAcceptValidator();
  v14 = &off_10026DFA0;
  *(_QWORD *)&v12 = a4;
  v10 = sub_1000080B4((uint64_t *)&unk_10028C900);
  Dependency.init(dependencyId:config:)(0, 0, 0, v10);
  sub_10003A190(&v18, a5 + 16);
  sub_10003A190(a2, a5 + 56);
  sub_10003A190(&v15, a5 + 96);
  sub_10003A190(&v12, a5 + 136);
  return a5;
}

uint64_t sub_1001B8A00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  __int128 v11;
  uint64_t v12;
  _UNKNOWN **v13;
  __int128 v14;
  uint64_t v15;
  _UNKNOWN **v16;
  __int128 v17;
  uint64_t v18;
  _UNKNOWN **v19;

  v18 = type metadata accessor for DaemonCustodianMessenger();
  v19 = &off_10026B430;
  *(_QWORD *)&v17 = a1;
  v15 = type metadata accessor for CustodianStorageController();
  v16 = &off_10026E068;
  *(_QWORD *)&v14 = a2;
  v12 = type metadata accessor for StorageController();
  v13 = &off_100266E08;
  *(_QWORD *)&v11 = a3;
  v8 = sub_1000080B4(&qword_10028C860);
  Dependency.init(dependencyId:config:)(0, 0, 0, v8);
  v9 = sub_1000080B4(&qword_100294AE0);
  Dependency.init(dependencyId:config:)(0, 0, 0, v9);
  sub_10003A190(&v17, a4 + 16);
  sub_10003A190(&v14, a4 + 56);
  sub_10003A190(&v11, a4 + 96);
  return a4;
}

_QWORD *sub_1001B8B08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  __int128 v21;
  unint64_t v22;
  _UNKNOWN **v23;
  _QWORD v24[3];
  ValueMetadata *v25;
  _UNKNOWN **v26;
  _QWORD v27[5];

  v6 = type metadata accessor for CustodianStorageController();
  v27[4] = &off_10026E068;
  v27[3] = v6;
  v27[0] = a1;
  v25 = &type metadata for CustodianIDMSRequestManager;
  v26 = &off_100261178;
  v24[0] = a2;
  v22 = sub_1001B9E64();
  v23 = &off_10026B7F8;
  *(_QWORD *)&v21 = a3;
  v7 = type metadata accessor for CustodianRecoveryFollowUpController();
  v8 = (_QWORD *)swift_allocObject(v7, 136, 7);
  v9 = sub_1000067AC((uint64_t)v27, v6);
  __chkstk_darwin(v9, v9);
  v11 = (uint64_t *)((char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v12 + 16))(v11);
  v13 = sub_1000067AC((uint64_t)v24, (uint64_t)v25);
  __chkstk_darwin(v13, v13);
  v15 = (uint64_t *)((char *)&v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v16 + 16))(v15);
  v17 = *v11;
  v18 = *v15;
  v8[5] = v6;
  v8[6] = &off_10026E068;
  v8[2] = v17;
  v8[10] = &type metadata for CustodianIDMSRequestManager;
  v8[11] = &off_100261178;
  v8[7] = v18;
  sub_10003A190(&v21, (uint64_t)(v8 + 12));
  sub_100006F58(v24);
  sub_100006F58(v27);
  return v8;
}

_QWORD *sub_1001B8C88(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v25[5];
  _QWORD v26[3];
  uint64_t v27;
  _UNKNOWN **v28;
  _QWORD v29[5];

  v4 = type metadata accessor for CustodianStorageController();
  v29[3] = v4;
  v29[4] = &off_10026E068;
  v29[0] = a1;
  v5 = type metadata accessor for DaemonFamilyRequester();
  v27 = v5;
  v28 = &off_10026DF80;
  v26[0] = a2;
  v6 = type metadata accessor for CustodianFamilyManager();
  v7 = (_QWORD *)swift_allocObject(v6, 96, 7);
  v8 = sub_1000067AC((uint64_t)v29, v4);
  __chkstk_darwin(v8, v8);
  v10 = (_QWORD *)((char *)&v25[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v11 + 16))(v10);
  v12 = sub_1000067AC((uint64_t)v26, v27);
  __chkstk_darwin(v12, v12);
  v14 = (_QWORD *)((char *)&v25[-1] - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v15 + 16))(v14);
  v16 = *v10;
  v17 = *v14;
  v7[10] = v4;
  v7[11] = &off_10026E068;
  v7[7] = v16;
  v25[3] = v5;
  v25[4] = &off_10026DF80;
  v25[0] = v17;
  v18 = sub_1000067AC((uint64_t)v25, v5);
  __chkstk_darwin(v18, v18);
  v20 = (_QWORD *)((char *)&v25[-1] - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v21 + 16))(v20);
  v22 = *v20;
  v7[5] = v5;
  v7[6] = &off_10026DF80;
  v7[2] = v22;
  sub_100006F58(v25);
  sub_100006F58(v26);
  sub_100006F58(v29);
  return v7;
}

uint64_t sub_1001B8E40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v23[3];
  uint64_t v24;
  _UNKNOWN **v25;
  _QWORD v26[3];
  uint64_t v27;
  _UNKNOWN **v28;
  _QWORD v29[3];
  uint64_t v30;
  _UNKNOWN **v31;

  v30 = type metadata accessor for DaemonCustodianMessenger();
  v31 = &off_10026B430;
  v29[0] = a1;
  v27 = type metadata accessor for CustodianStorageController();
  v28 = &off_10026E068;
  v26[0] = a2;
  v24 = type metadata accessor for StorageController();
  v25 = &off_100266E08;
  v23[0] = a3;
  v6 = type metadata accessor for AcceptedStatusHandler(0);
  v7 = swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
  v8 = sub_1000067AC((uint64_t)v29, v30);
  __chkstk_darwin(v8, v8);
  v10 = (_QWORD *)((char *)&v23[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v11 + 16))(v10);
  v12 = sub_1000067AC((uint64_t)v26, v27);
  __chkstk_darwin(v12, v12);
  v14 = (_QWORD *)((char *)&v23[-1] - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v15 + 16))(v14);
  v16 = sub_1000067AC((uint64_t)v23, v24);
  __chkstk_darwin(v16, v16);
  v18 = (_QWORD *)((char *)&v23[-1] - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v19 + 16))(v18);
  v20 = sub_1001B8A00(*v10, *v14, *v18, v7);
  sub_100006F58(v23);
  sub_100006F58(v26);
  sub_100006F58(v29);
  return v20;
}

_QWORD *sub_1001B9000(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v35[3];
  uint64_t v36;
  _UNKNOWN **v37;
  _QWORD v38[3];
  ValueMetadata *v39;
  _UNKNOWN **v40;
  _QWORD v41[3];
  uint64_t v42;
  _UNKNOWN **v43;
  _QWORD v44[6];

  v8 = type metadata accessor for DaemonAccountStore();
  v44[3] = v8;
  v44[4] = &off_100261290;
  v44[0] = a1;
  v9 = type metadata accessor for CustodianStorageController();
  v43 = &off_10026E068;
  v42 = v9;
  v41[0] = a2;
  v39 = &type metadata for CustodianIDMSRequestManager;
  v40 = &off_100261178;
  v38[0] = a3;
  v10 = type metadata accessor for DaemonSecurityController(0);
  v36 = v10;
  v37 = &off_10026C5A0;
  v35[0] = a4;
  v11 = type metadata accessor for CustodianCleanupController();
  v12 = (_QWORD *)swift_allocObject(v11, 176, 7);
  v13 = sub_1000067AC((uint64_t)v44, v8);
  __chkstk_darwin(v13, v13);
  v15 = (_QWORD *)((char *)&v35[-1] - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v16 + 16))(v15);
  v17 = sub_1000067AC((uint64_t)v41, v42);
  __chkstk_darwin(v17, v17);
  v19 = (_QWORD *)((char *)&v35[-1] - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v20 + 16))(v19);
  v21 = sub_1000067AC((uint64_t)v38, (uint64_t)v39);
  __chkstk_darwin(v21, v21);
  v23 = (_QWORD *)((char *)&v35[-1] - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v24 + 16))(v23);
  v25 = sub_1000067AC((uint64_t)v35, v36);
  __chkstk_darwin(v25, v25);
  v27 = (_QWORD *)((char *)&v35[-1] - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v28 + 16))(v27);
  v29 = *v15;
  v30 = *v19;
  v31 = *v23;
  v32 = *v27;
  v12[5] = v8;
  v12[6] = &off_100261290;
  v12[2] = v29;
  v12[10] = v9;
  v12[11] = &off_10026E068;
  v12[7] = v30;
  v12[15] = &type metadata for CustodianIDMSRequestManager;
  v12[16] = &off_100261178;
  v12[17] = v32;
  v12[12] = v31;
  v12[20] = v10;
  v12[21] = &off_10026C5A0;
  sub_100006F58(v35);
  sub_100006F58(v38);
  sub_100006F58(v41);
  sub_100006F58(v44);
  return v12;
}

uint64_t sub_1001B9290(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  _UNKNOWN **v28;
  __int128 v29;
  uint64_t v30;
  _UNKNOWN **v31;
  __int128 v32;
  uint64_t v33;
  _UNKNOWN **v34;
  __int128 v35;
  uint64_t v36;
  _UNKNOWN **v37;
  __int128 v38;
  uint64_t v39;
  _UNKNOWN **v40;
  _QWORD v41[3];
  uint64_t v42;
  _UNKNOWN **v43;
  _QWORD v44[5];

  v10 = type metadata accessor for CustodianStorageController();
  v44[3] = v10;
  v44[4] = &off_10026E068;
  v44[0] = a1;
  v11 = type metadata accessor for StorageController();
  v42 = v11;
  v43 = &off_100266E08;
  v41[0] = a2;
  v39 = type metadata accessor for AcceptedStatusHandler(0);
  v40 = &off_10026DD50;
  *(_QWORD *)&v38 = a3;
  v36 = type metadata accessor for DeclinedStatusHandler(0);
  v37 = &off_100266550;
  *(_QWORD *)&v35 = a4;
  v33 = type metadata accessor for NotReachableStatusHandler(0);
  v34 = &off_1002641D8;
  *(_QWORD *)&v32 = a5;
  v12 = type metadata accessor for CustodianStatusUpdater();
  v13 = swift_allocObject(v12, 216, 7);
  v14 = sub_1000067AC((uint64_t)v44, v10);
  __chkstk_darwin(v14, v14);
  v16 = (uint64_t *)((char *)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v17 + 16))(v16);
  v18 = sub_1000067AC((uint64_t)v41, v42);
  __chkstk_darwin(v18, v18);
  v20 = (uint64_t *)((char *)&v25 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v21 + 16))(v20);
  v22 = *v16;
  v23 = *v20;
  v30 = v10;
  v31 = &off_10026E068;
  v28 = &off_100266E08;
  *(_QWORD *)&v29 = v22;
  v27 = v11;
  *(_QWORD *)&v26 = v23;
  sub_10003A190(&v29, v13 + 16);
  sub_10003A190(&v26, v13 + 56);
  sub_10003A190(&v38, v13 + 96);
  sub_10003A190(&v35, v13 + 136);
  sub_10003A190(&v32, v13 + 176);
  sub_100006F58(v41);
  sub_100006F58(v44);
  return v13;
}

uint64_t sub_1001B9484(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v25[3];
  uint64_t v26;
  _UNKNOWN **v27;
  _QWORD v28[3];
  uint64_t v29;
  _UNKNOWN **v30;
  _QWORD v31[3];
  uint64_t v32;
  _UNKNOWN **v33;

  v32 = type metadata accessor for DaemonCustodianMessenger();
  v33 = &off_10026B430;
  v31[0] = a1;
  v29 = type metadata accessor for StorageController();
  v30 = &off_100266E08;
  v28[0] = a3;
  v26 = type metadata accessor for CustodianAutoAcceptValidator();
  v27 = &off_10026DFA0;
  v25[0] = a4;
  v8 = type metadata accessor for DaemonInvitationHandler(0);
  v9 = swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
  v10 = sub_1000067AC((uint64_t)v31, v32);
  __chkstk_darwin(v10, v10);
  v12 = (_QWORD *)((char *)&v25[-1] - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v13 + 16))(v12);
  v14 = sub_1000067AC((uint64_t)v28, v29);
  __chkstk_darwin(v14, v14);
  v16 = (_QWORD *)((char *)&v25[-1] - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v17 + 16))(v16);
  v18 = sub_1000067AC((uint64_t)v25, v26);
  __chkstk_darwin(v18, v18);
  v20 = (_QWORD *)((char *)&v25[-1] - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v21 + 16))(v20);
  v22 = sub_1001B8910(*v12, a2, *v16, *v20, v9);
  sub_100006F58(v25);
  sub_100006F58(v28);
  sub_100006F58(v31);
  return v22;
}

uint64_t sub_1001B964C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v20;
  uint64_t v21;
  _UNKNOWN **v22;
  __int128 v23;
  uint64_t v24;
  _UNKNOWN **v25;
  _QWORD v26[3];
  uint64_t v27;
  _UNKNOWN **v28;
  _QWORD v29[5];

  v4 = type metadata accessor for DaemonCustodianMessenger();
  v29[3] = v4;
  v29[4] = &off_10026B430;
  v29[0] = a1;
  v5 = type metadata accessor for StorageController();
  v27 = v5;
  v28 = &off_100266E08;
  v26[0] = a2;
  v6 = type metadata accessor for DaemonShareHandler(0);
  v7 = swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
  v8 = sub_1000067AC((uint64_t)v29, v4);
  __chkstk_darwin(v8, v8);
  v10 = (uint64_t *)((char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v11 + 16))(v10);
  v12 = sub_1000067AC((uint64_t)v26, v27);
  __chkstk_darwin(v12, v12);
  v14 = (uint64_t *)((char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v15 + 16))(v14);
  v16 = *v10;
  v17 = *v14;
  v24 = v4;
  v25 = &off_10026B430;
  v22 = &off_100266E08;
  *(_QWORD *)&v23 = v16;
  v21 = v5;
  *(_QWORD *)&v20 = v17;
  v18 = sub_1000080B4(&qword_10028C880);
  Dependency.init(dependencyId:config:)(0, 0, 0, v18);
  sub_10003A190(&v23, v7 + 16);
  sub_10003A190(&v20, v7 + 56);
  sub_100006F58(v26);
  sub_100006F58(v29);
  return v7;
}

uint64_t sub_1001B97EC(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD), uint64_t a4, uint64_t (*a5)(_QWORD), void (*a6)(_QWORD *, uint64_t))
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v27[5];
  __int128 v28;
  uint64_t v29;
  _UNKNOWN **v30;
  _QWORD v31[3];
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[5];

  v12 = type metadata accessor for StorageController();
  v34[3] = v12;
  v34[4] = &off_100266E08;
  v34[0] = a1;
  v13 = a3(0);
  v32 = v13;
  v33 = a4;
  v31[0] = a2;
  v14 = a5(0);
  v15 = swift_allocObject(v14, 96, 7);
  v16 = sub_1000067AC((uint64_t)v34, v12);
  __chkstk_darwin(v16, v16);
  v18 = (_QWORD *)((char *)v27 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v19 + 16))(v18);
  v20 = sub_1000067AC((uint64_t)v31, v32);
  __chkstk_darwin(v20, v20);
  v22 = (_QWORD *)((char *)v27 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v23 + 16))(v22);
  v24 = *v18;
  v25 = *v22;
  v29 = v12;
  v30 = &off_100266E08;
  v27[4] = a4;
  *(_QWORD *)&v28 = v24;
  v27[3] = v13;
  v27[0] = v25;
  sub_10003A190(&v28, v15 + 16);
  a6(v27, v15 + 56);
  sub_100006F58(v31);
  sub_100006F58(v34);
  return v15;
}

id sub_1001B996C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  id v37;
  _QWORD v39[3];
  uint64_t v40;
  _UNKNOWN **v41;
  _QWORD v42[3];
  uint64_t v43;
  _UNKNOWN **v44;
  _QWORD v45[3];
  uint64_t v46;
  _UNKNOWN **v47;
  _QWORD v48[3];
  uint64_t v49;
  _UNKNOWN **v50;
  _QWORD v51[3];
  uint64_t v52;
  _UNKNOWN **v53;
  _QWORD v54[3];
  uint64_t v55;
  _UNKNOWN **v56;

  v55 = type metadata accessor for DaemonAccountStore();
  v56 = &off_100261290;
  v54[0] = a1;
  v52 = type metadata accessor for DaemonInvitationHandler(0);
  v53 = &off_100269388;
  v51[0] = a2;
  v49 = type metadata accessor for DaemonInvitationResponseHandler(0);
  v50 = &off_10026D5A8;
  v48[0] = a3;
  v46 = type metadata accessor for DaemonShareHandler(0);
  v47 = &off_10025FE90;
  v45[0] = a4;
  v43 = type metadata accessor for DaemonSetupFinalizationHandler(0);
  v44 = &off_100266E98;
  v42[0] = a5;
  v41 = &off_100262868;
  v40 = type metadata accessor for DaemonCustodianRemovedHandler();
  v39[0] = a6;
  v12 = objc_allocWithZone((Class)type metadata accessor for CustodianMessageProcessor());
  v13 = sub_1000067AC((uint64_t)v54, v55);
  __chkstk_darwin(v13, v13);
  v15 = (_QWORD *)((char *)v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v16 + 16))(v15);
  v17 = sub_1000067AC((uint64_t)v51, v52);
  __chkstk_darwin(v17, v17);
  v19 = (_QWORD *)((char *)v39 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v20 + 16))(v19);
  v21 = sub_1000067AC((uint64_t)v48, v49);
  __chkstk_darwin(v21, v21);
  v23 = (_QWORD *)((char *)v39 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v24 + 16))(v23);
  v25 = sub_1000067AC((uint64_t)v45, v46);
  __chkstk_darwin(v25, v25);
  v27 = (_QWORD *)((char *)v39 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v28 + 16))(v27);
  v29 = sub_1000067AC((uint64_t)v42, v43);
  __chkstk_darwin(v29, v29);
  v31 = (_QWORD *)((char *)v39 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v32 + 16))(v31);
  v33 = sub_1000067AC((uint64_t)v39, v40);
  __chkstk_darwin(v33, v33);
  v35 = (_QWORD *)((char *)v39 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v36 + 16))(v35);
  v37 = sub_1001B85E0(*v15, *v19, *v23, *v27, *v31, *v35, v12);
  sub_100006F58(v39);
  sub_100006F58(v42);
  sub_100006F58(v45);
  sub_100006F58(v48);
  sub_100006F58(v51);
  sub_100006F58(v54);
  return v37;
}

uint64_t sub_1001B9CB4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1001B9CC4()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001B9CE8(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;

  return sub_100042788(a1, a2, a3, v3);
}

uint64_t sub_1001B9CF0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[3];
  uint64_t v17;
  _UNKNOWN **v18;
  _QWORD v19[3];
  uint64_t v20;
  _UNKNOWN **v21;

  v20 = type metadata accessor for StorageController();
  v21 = &off_100266E08;
  v19[0] = a1;
  v17 = type metadata accessor for CustodianStorageController();
  v18 = &off_10026E068;
  v16[0] = a2;
  v4 = type metadata accessor for CustodianManateeMigrator(0);
  v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  v6 = sub_1000067AC((uint64_t)v19, v20);
  __chkstk_darwin(v6, v6);
  v8 = (_QWORD *)((char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v9 + 16))(v8);
  v10 = sub_1000067AC((uint64_t)v16, v17);
  __chkstk_darwin(v10, v10);
  v12 = (_QWORD *)((char *)v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v13 + 16))(v12);
  v14 = sub_1001B8790(*v8, *v12, v5);
  sub_100006F58(v16);
  sub_100006F58(v19);
  return v14;
}

_QWORD *sub_1001B9E30(_QWORD *a1)
{
  destroy for CustodianRecoveryContainer(a1);
  return a1;
}

unint64_t sub_1001B9E64()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100294950;
  if (!qword_100294950)
  {
    v1 = objc_opt_self(AAFollowUpController);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100294950);
  }
  return result;
}

uint64_t sub_1001B9EA0()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;

  swift_bridgeObjectRelease(v0[2]);
  v1 = (char *)v0 + OBJC_IVAR____TtC13appleaccountd27PostInstallActivityProvider__accountStore;
  v2 = sub_1000080B4(&qword_10028FA50);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

uint64_t sub_1001B9EFC()
{
  return type metadata accessor for PostInstallActivityProvider(0);
}

uint64_t type metadata accessor for PostInstallActivityProvider(uint64_t a1)
{
  uint64_t result;

  result = qword_1002977D0;
  if (!qword_1002977D0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for PostInstallActivityProvider);
  return result;
}

void sub_1001B9F40(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  sub_100092BEC(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(v2 - 8) + 64;
    swift_updateClassMetadata2(a1, 256, 2, v4, a1 + 80);
  }
}

void sub_1001B9FBC(void *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t))
{
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  void *v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;

  if (a2)
  {
    swift_errorRetain(a2);
    if (qword_10028ADB0 != -1)
      swift_once(&qword_10028ADB0, sub_100046CC8);
    v5 = type metadata accessor for Logger(0);
    sub_100005288(v5, (uint64_t)qword_1002A8990);
    v6 = swift_errorRetain(a2);
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.error.getter(v7);
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc(12, -1);
      v10 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v9 = 138412290;
      v11 = _convertErrorToNSError(_:)(a2);
      v36 = (void *)v11;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37);
      *v10 = v11;
      swift_errorRelease(a2);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Unable to fetch family circle: %@", v9, 0xCu);
      v12 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v10, 1, v12);
      swift_slowDealloc(v10, -1, -1);
      swift_slowDealloc(v9, -1, -1);
    }
    else
    {
      swift_errorRelease(a2);
    }

    swift_errorRetain(a2);
    a3(a2, 1);
    swift_errorRelease(a2);
    swift_errorRelease(a2);
  }
  else
  {
    if (a1)
    {
      v13 = objc_msgSend(a1, "members");
      v14 = sub_1001BA40C();
      v15 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v13, v14);

    }
    else
    {
      v15 = 0;
    }
    v16 = sub_1000080B4(&qword_100297958);
    v17 = Optional._bridgeToObjectiveC()(v16);
    swift_bridgeObjectRelease(v15);
    v36 = (void *)v17;
    v18 = sub_1000080B4(&qword_100297960);
    if ((swift_dynamicCast(&v35, &v36, (char *)&type metadata for Swift.AnyObject + 8, v18, 6) & 1) != 0)
    {
      v19 = v35;
      if (qword_10028ADB0 != -1)
        swift_once(&qword_10028ADB0, sub_100046CC8);
      v20 = type metadata accessor for Logger(0);
      v21 = sub_100005288(v20, (uint64_t)qword_1002A8990);
      v22 = Logger.logObject.getter(v21);
      v23 = static os_log_type_t.info.getter(v22);
      if (os_log_type_enabled(v22, v23))
      {
        v24 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v24 = 0;
        _os_log_impl((void *)&_mh_execute_header, v22, v23, "All family members fetched.", v24, 2u);
        swift_slowDealloc(v24, -1, -1);
      }

      a3(v19, 0);
      swift_bridgeObjectRelease(v19);
    }
    else
    {
      if (qword_10028ADB0 != -1)
        swift_once(&qword_10028ADB0, sub_100046CC8);
      v25 = type metadata accessor for Logger(0);
      v26 = sub_100005288(v25, (uint64_t)qword_1002A8990);
      v27 = Logger.logObject.getter(v26);
      v28 = static os_log_type_t.error.getter(v27);
      if (os_log_type_enabled(v27, v28))
      {
        v29 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v29 = 0;
        _os_log_impl((void *)&_mh_execute_header, v27, v28, "No family members returned.", v29, 2u);
        swift_slowDealloc(v29, -1, -1);
      }

      type metadata accessor for AACustodianError(0);
      v31 = v30;
      v35 = -7009;
      v32 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
      v33 = sub_100041030();
      _BridgedStoredNSError.init(_:userInfo:)(&v36, &v35, v32, v31, v33);
      v34 = v36;
      a3((uint64_t)v36, 1);

    }
  }
}

uint64_t type metadata accessor for DaemonFamilyRequester()
{
  return objc_opt_self(_TtC13appleaccountd21DaemonFamilyRequester);
}

unint64_t sub_1001BA40C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100297968;
  if (!qword_100297968)
  {
    v1 = objc_opt_self(FAFamilyMember);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100297968);
  }
  return result;
}

uint64_t type metadata accessor for InheritanceInviteAnalyticsEvent(uint64_t a1)
{
  uint64_t result;

  result = qword_100297970;
  if (!qword_100297970)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for InheritanceInviteAnalyticsEvent);
  return result;
}

uint64_t sub_1001BA484(uint64_t a1)
{
  _BYTE v2[8];

  return swift_initClassMetadata2(a1, 0, 0, v2, a1 + qword_1002A8C10);
}

uint64_t sub_1001BA4C0(char a1, uint64_t a2)
{
  id v4;
  id v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t result;
  uint64_t v10;
  uint64_t inited;
  unint64_t v12;
  _BYTE v13[56];

  if (!objc_msgSend((id)objc_opt_self(AADeviceInfo), "isInternalBuild"))
    goto LABEL_6;
  v4 = objc_msgSend((id)objc_opt_self(NSProcessInfo), "processInfo");
  v5 = objc_msgSend(v4, "environment");

  v6 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v5, &type metadata for String, &type metadata for String, &protocol witness table for String);
  if (!*(_QWORD *)(v6 + 16))
  {
    swift_bridgeObjectRelease(v6);
    goto LABEL_6;
  }
  sub_10010A9E0(0xD00000000000001BLL, 0x800000010020AFA0);
  v8 = v7;
  result = swift_bridgeObjectRelease(v6);
  if ((v8 & 1) == 0)
  {
LABEL_6:
    v10 = sub_1000080B4(&qword_10028E7F8);
    inited = swift_initStackObject(v10, v13);
    *(_OWORD *)(inited + 16) = xmmword_100218E30;
    strcpy((char *)(inited + 32), "numOfRelation");
    *(_WORD *)(inited + 46) = -4864;
    *(NSNumber *)(inited + 48) = Int._bridgeToObjectiveC()();
    v12 = sub_10001612C(inited);
    dispatch thunk of AAFTimedAnalyticsEvent.completeEvent(withSuccess:error:additionalData:)(a1 & 1, a2, v12);
    return swift_bridgeObjectRelease(v12);
  }
  return result;
}

void sub_1001BA63C()
{
  _swift_stdlib_reportUnimplementedInitializer("appleaccountd.InheritanceInviteAnalyticsEvent", 45, "init(eventName:initialData:)", 28, 0);
  __break(1u);
}

id sub_1001BA668()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for InheritanceInviteAnalyticsEvent(0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_1001BA6A0()
{
  return type metadata accessor for InheritanceInviteAnalyticsEvent(0);
}

void sub_1001BA6A8(void (*a1)(_QWORD, uint64_t), uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t v6;
  void *v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  unsigned int v12;
  id v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  void *v26;
  _QWORD aBlock[5];
  uint64_t v28;
  uint64_t v29;

  v5 = sub_10000732C((_QWORD *)(v2 + 56), *(_QWORD *)(v2 + 80));
  v6 = *v5;
  v7 = *(void **)(*v5 + 16);
  v8 = objc_msgSend(v7, "aa_primaryAppleAccount");
  if (v8
    && (v9 = v8,
        v10 = objc_msgSend(v8, "aa_altDSID"),
        v11 = objc_msgSend(v7, "aa_authKitAccountForAltDSID:", v10),
        v9,
        v10,
        v11)
    && (v12 = objc_msgSend(*(id *)(v6 + 24), "canBeCustodianForAccount:", v11), v11, v12))
  {
    if (qword_10028AF00 != -1)
      swift_once(&qword_10028AF00, sub_1001FD458);
    if (qword_10028AF10 != -1)
      swift_once(&qword_10028AF10, sub_1001FDD8C);
    v13 = sub_1001FD4C0(qword_1002A8C80, *(unint64_t *)algn_1002A8C88);
    v14 = swift_allocObject(&unk_10026DFC0, 32, 7);
    *(_QWORD *)(v14 + 16) = a1;
    *(_QWORD *)(v14 + 24) = a2;
    aBlock[4] = sub_1000D0E44;
    v28 = v14;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100043E24;
    aBlock[3] = &unk_10026DFD8;
    v15 = _Block_copy(aBlock);
    v16 = v28;
    swift_retain(a2);
    swift_release(v16);
    objc_msgSend(v13, "accountInfoWithCompletionHandler:", v15);
    _Block_release(v15);

  }
  else
  {
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v17 = type metadata accessor for Logger(0);
    v18 = sub_100005288(v17, (uint64_t)qword_1002A89D8);
    v19 = Logger.logObject.getter(v18);
    v20 = static os_log_type_t.error.getter(v19);
    if (os_log_type_enabled(v19, v20))
    {
      v21 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v21 = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Account is ineligible to be a custodian", v21, 2u);
      swift_slowDealloc(v21, -1, -1);
    }

    type metadata accessor for AACustodianError(0);
    v23 = v22;
    v29 = -7012;
    v24 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
    v25 = sub_100041030();
    _BridgedStoredNSError.init(_:userInfo:)(aBlock, &v29, v24, v23, v25);
    v26 = (void *)aBlock[0];
    a1(aBlock[0], 1);

  }
}

uint64_t type metadata accessor for CustodianAutoAcceptValidator()
{
  return objc_opt_self(_TtC13appleaccountd28CustodianAutoAcceptValidator);
}

uint64_t sub_1001BA99C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001BA9C4()
{
  int v0;
  uint64_t result;

  v0 = MKBGetDeviceLockState(0);
  result = 5;
  switch(v0)
  {
    case 0:
      result = 3;
      break;
    case 1:
      if (MKBDeviceUnlockedSinceBoot(5))
        result = 2;
      else
        result = 1;
      break;
    case 2:
      result = 4;
      break;
    case 3:
      return result;
    default:
      result = 0;
      break;
  }
  return result;
}

ValueMetadata *type metadata accessor for DeviceInfoProvider()
{
  return &type metadata for DeviceInfoProvider;
}

id sub_1001BAA4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001BABA8(a1, a2, a3, (SEL *)&selRef_addKeychainItem_error_);
}

id sub_1001BAA9C(uint64_t a1)
{
  return sub_1001BAABC(a1);
}

id sub_1001BAABC(uint64_t a1)
{
  void *v1;
  id v2;
  id v4;

  v4 = 0;
  v2 = objc_msgSend(v1, "keychainItemForDescriptor:error:", a1, &v4);
  if (v4)
  {
    v4;

    swift_willThrow();
  }
  return v2;
}

id sub_1001BAB58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001BABA8(a1, a2, a3, (SEL *)&selRef_deleteKeychainItemsForDescriptor_error_);
}

id sub_1001BABA8(uint64_t a1, uint64_t a2, uint64_t a3, SEL *a4)
{
  void **v4;
  void *v6;
  id result;
  id v8;

  v6 = *v4;
  v8 = 0;
  result = objc_msgSend(v6, *a4, a1, &v8);
  if (v8)
  {
    v8;
    return (id)swift_willThrow();
  }
  return result;
}

void sub_1001BAC2C(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD), uint64_t a5)
{
  sub_1001BACAC(a1, a2, a3, a4, a5, type metadata accessor for InheritanceInvitationRecord, (uint64_t)&unk_10026E7C0, (uint64_t)sub_1001C5924, (uint64_t)&unk_10026E7D8);
}

void sub_1001BAC6C(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD), uint64_t a5)
{
  sub_1001BACAC(a1, a2, a3, a4, a5, type metadata accessor for BeneficiaryInfoRecord, (uint64_t)&unk_10026E770, (uint64_t)sub_1001C57C8, (uint64_t)&unk_10026E788);
}

void sub_1001BACAC(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD), uint64_t a5, uint64_t (*a6)(_QWORD), uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  BOOL v29;
  uint8_t *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  void (*v34)(_QWORD);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  __n128 v42;
  os_log_type_t v43;
  uint8_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t (*v47)(_QWORD);
  void *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  void *v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  NSObject *v57;
  os_log_type_t v58;
  uint8_t *v59;
  _QWORD v60[2];
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t (*v64)(_QWORD);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  void *v70;
  _QWORD v71[2];
  char v72[8];

  v65 = a2;
  v66 = a3;
  v67 = a9;
  v15 = sub_1000080B4((uint64_t *)&unk_10028CD50);
  v17 = __chkstk_darwin(v15, v16);
  v19 = (_QWORD *)((char *)v60 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v17, v20);
  v22 = (_QWORD *)((char *)v60 - v21);
  sub_100024A20(a1, (uint64_t)v60 - v21, (uint64_t *)&unk_10028CD50);
  if (swift_getEnumCaseMultiPayload(v22, v15) != 1)
  {
    if (qword_10028ADE8 != -1)
      swift_once(&qword_10028ADE8, sub_100046DC4);
    v39 = type metadata accessor for Logger(0);
    v40 = sub_100005288(v39, (uint64_t)qword_1002A8A38);
    v41 = Logger.logObject.getter(v40);
    v43 = static os_log_type_t.default.getter(v42);
    if (os_log_type_enabled(v41, v43))
    {
      v44 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v44 = 0;
      _os_log_impl((void *)&_mh_execute_header, v41, v43, "Cloud record deleted from CloudKitStorage.", v44, 2u);
      swift_slowDealloc(v44, -1, -1);
    }

    sub_10000732C((_QWORD *)(v65 + 16), *(_QWORD *)(v65 + 40));
    sub_1001BB6B4(v66, (uint64_t)a4, a5, a6, a7, a8, v67);
    v45 = (uint64_t)v22;
    goto LABEL_19;
  }
  v63 = v15;
  v64 = a6;
  v23 = *v22;
  if (qword_10028ADE8 != -1)
    swift_once(&qword_10028ADE8, sub_100046DC4);
  v24 = type metadata accessor for Logger(0);
  v25 = sub_100005288(v24, (uint64_t)qword_1002A8A38);
  v26 = swift_errorRetain(v23);
  v60[1] = v25;
  v27 = Logger.logObject.getter(v26);
  v28 = static os_log_type_t.error.getter(v27);
  v29 = os_log_type_enabled(v27, v28);
  v61 = a7;
  v62 = a8;
  if (v29)
  {
    v30 = (uint8_t *)swift_slowAlloc(12, -1);
    v60[0] = swift_slowAlloc(8, -1);
    *(_DWORD *)v30 = 138412290;
    v31 = _convertErrorToNSError(_:)(v23);
    v32 = v19;
    v33 = v23;
    v34 = a4;
    v35 = a5;
    v36 = v31;
    v70 = (void *)v31;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, v71);
    v37 = v60[0];
    *(_QWORD *)v60[0] = v36;
    a5 = v35;
    a4 = v34;
    v23 = v33;
    v19 = v32;
    swift_errorRelease(v23);
    _os_log_impl((void *)&_mh_execute_header, v27, v28, "Cloud delete failed with error: %@", v30, 0xCu);
    v38 = sub_1000080B4((uint64_t *)&unk_10028BC20);
    swift_arrayDestroy(v37, 1, v38);
    swift_slowDealloc(v37, -1, -1);
    swift_slowDealloc(v30, -1, -1);
  }
  else
  {
    swift_errorRelease(v23);
  }

  swift_getErrorValue(v23, v72, v71);
  v46 = sub_10015D168(v71[1]);
  v47 = v64;
  if (!v46)
  {
LABEL_18:
    *v19 = v23;
    swift_storeEnumTagMultiPayload(v19, v63, 1);
    swift_errorRetain(v23);
    a4(v19);
    swift_errorRelease(v23);
    v45 = (uint64_t)v19;
LABEL_19:
    sub_100004934(v45, (uint64_t *)&unk_10028CD50);
    return;
  }
  v48 = (void *)v46;
  type metadata accessor for CKError(0);
  v50 = v49;
  v69 = 11;
  v51 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
  v52 = sub_100005150((unint64_t *)&qword_10028B678, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_100218478);
  _BridgedStoredNSError.init(_:userInfo:)(&v70, &v69, v51, v50, v52);
  v53 = v70;
  v68 = v70;
  _BridgedStoredNSError.code.getter(&v69, v50, v52);

  v54 = (void *)sub_10015D724(v69, v48);
  if (!v54)
  {

    goto LABEL_18;
  }
  v56 = v23;
  v57 = Logger.logObject.getter(v55);
  v58 = static os_log_type_t.error.getter(v57);
  if (os_log_type_enabled(v57, v58))
  {
    v59 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v59 = 0;
    _os_log_impl((void *)&_mh_execute_header, v57, v58, "Delete error is CK Unknown Item", v59, 2u);
    swift_slowDealloc(v59, -1, -1);
  }

  sub_10000732C((_QWORD *)(v65 + 16), *(_QWORD *)(v65 + 40));
  sub_1001BB6B4(v66, (uint64_t)a4, a5, v47, v61, v62, v67);
  swift_errorRelease(v56);

}

void sub_1001BB1AC(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD *), uint64_t a5)
{
  sub_1001BB22C(a1, a2, a3, a4, a5, type metadata accessor for BenefactorInfoRecord, (uint64_t)&unk_10026E720, (uint64_t)sub_1001C5658, (uint64_t)&unk_10026E738);
}

void sub_1001BB1EC(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD *), uint64_t a5)
{
  sub_1001BB22C(a1, a2, a3, a4, a5, type metadata accessor for InheritanceHealthRecord, (uint64_t)&unk_10026E6D0, (uint64_t)sub_1001C555C, (uint64_t)&unk_10026E6E8);
}

void sub_1001BB22C(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD *), uint64_t a5, uint64_t (*a6)(_QWORD), uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint64_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint8_t *v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  __n128 v37;
  os_log_type_t v38;
  uint8_t *v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t (*v43)(_QWORD);
  void *v44;
  _BOOL8 v45;
  NSObject *v46;
  os_log_type_t v47;
  uint8_t *v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t (*v53)(_QWORD);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD v59[2];
  _BYTE v60[8];

  v54 = a8;
  v55 = a2;
  v56 = a3;
  v57 = a9;
  v14 = sub_1000080B4((uint64_t *)&unk_10028CD50);
  v16 = __chkstk_darwin(v14, v15);
  v18 = (uint64_t **)((char *)&v49 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v16, v19);
  v21 = (uint64_t *)((char *)&v49 - v20);
  sub_100024A20(a1, (uint64_t)&v49 - v20, (uint64_t *)&unk_10028CD50);
  if (swift_getEnumCaseMultiPayload(v21, v14) != 1)
  {
    if (qword_10028ADE8 != -1)
      swift_once(&qword_10028ADE8, sub_100046DC4);
    v34 = type metadata accessor for Logger(0);
    v35 = sub_100005288(v34, (uint64_t)qword_1002A8A38);
    v36 = Logger.logObject.getter(v35);
    v38 = static os_log_type_t.default.getter(v37);
    if (os_log_type_enabled(v36, v38))
    {
      v39 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v39 = 0;
      _os_log_impl((void *)&_mh_execute_header, v36, v38, "Cloud record deleted from CloudKitStorage.", v39, 2u);
      swift_slowDealloc(v39, -1, -1);
    }

    sub_10000732C((_QWORD *)(v55 + 16), *(_QWORD *)(v55 + 40));
    sub_1001BB6B4(v56, (uint64_t)a4, a5, a6, a7, v54, v57);
    v40 = (uint64_t)v21;
    goto LABEL_19;
  }
  v53 = a6;
  v22 = *v21;
  if (qword_10028ADE8 != -1)
    swift_once(&qword_10028ADE8, sub_100046DC4);
  v23 = type metadata accessor for Logger(0);
  v24 = sub_100005288(v23, (uint64_t)qword_1002A8A38);
  v25 = swift_errorRetain(v22);
  v52 = v24;
  v26 = Logger.logObject.getter(v25);
  v27 = static os_log_type_t.error.getter(v26);
  if (os_log_type_enabled(v26, v27))
  {
    v28 = swift_slowAlloc(12, -1);
    v51 = a5;
    v29 = (uint8_t *)v28;
    v49 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v29 = 138412290;
    v50 = a7;
    v30 = _convertErrorToNSError(_:)(v22);
    v58 = v30;
    a7 = v50;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, v59);
    v31 = v49;
    *v49 = v30;
    swift_errorRelease(v22);
    _os_log_impl((void *)&_mh_execute_header, v26, v27, "Cloud delete failed with error: %@", v29, 0xCu);
    v32 = sub_1000080B4((uint64_t *)&unk_10028BC20);
    swift_arrayDestroy(v31, 1, v32);
    swift_slowDealloc(v31, -1, -1);
    v33 = v29;
    a5 = v51;
    swift_slowDealloc(v33, -1, -1);
  }
  else
  {
    swift_errorRelease(v22);
  }
  v41 = v22;

  swift_getErrorValue(v22, v60, v59);
  v42 = (void *)sub_10015D168(v59[1]);
  v43 = v53;
  if (!v42)
  {
LABEL_18:
    *v18 = v22;
    swift_storeEnumTagMultiPayload(v18, v14, 1);
    swift_errorRetain(v22);
    a4(v18);
    swift_errorRelease(v22);
    v40 = (uint64_t)v18;
LABEL_19:
    sub_100004934(v40, (uint64_t *)&unk_10028CD50);
    return;
  }
  v44 = v42;
  v45 = sub_10015D160(v42);
  if (!v45)
  {

    goto LABEL_18;
  }
  v46 = Logger.logObject.getter(v45);
  v47 = static os_log_type_t.error.getter(v46);
  if (os_log_type_enabled(v46, v47))
  {
    v48 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v48 = 0;
    _os_log_impl((void *)&_mh_execute_header, v46, v47, "Delete error is CK Unknown Item", v48, 2u);
    swift_slowDealloc(v48, -1, -1);
  }

  sub_10000732C((_QWORD *)(v55 + 16), *(_QWORD *)(v55 + 40));
  sub_1001BB6B4(v56, (uint64_t)a4, a5, v43, a7, v54, v57);
  swift_errorRelease(v41);

}

uint64_t sub_1001BB690(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001BB6B4(a1, a2, a3, type metadata accessor for BenefactorInfoRecord, (uint64_t)&unk_10026E720, (uint64_t)sub_1001C5658, (uint64_t)&unk_10026E738);
}

uint64_t sub_1001BB6B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD aBlock[5];
  uint64_t v47;

  v41 = a7;
  v38 = a2;
  v39 = a6;
  v37 = a5;
  v11 = type metadata accessor for DispatchWorkItemFlags(0);
  v44 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11, v12);
  v14 = (char *)&v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for DispatchQoS(0);
  v42 = *(_QWORD *)(v15 - 8);
  v43 = v15;
  __chkstk_darwin(v15, v16);
  v18 = (char *)&v36 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = a4(0);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(_QWORD *)(v20 + 64);
  __chkstk_darwin(v19, v22);
  v24 = (char *)&v36 - v23;
  v40 = *(_QWORD *)(v7 + 32);
  sub_100027FE8(a1, (uint64_t)&v36 - v23, a4);
  v25 = *(unsigned __int8 *)(v20 + 80);
  v26 = (v25 + 16) & ~v25;
  v27 = (v21 + v26 + 7) & 0xFFFFFFFFFFFFFFF8;
  v28 = swift_allocObject(v37, v27 + 16, v25 | 7);
  sub_10003B730((uint64_t)v24, v28 + v26, a4);
  v29 = (_QWORD *)(v28 + v27);
  *v29 = v38;
  v29[1] = a3;
  aBlock[4] = v39;
  v47 = v28;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000051D0;
  aBlock[3] = v41;
  v30 = _Block_copy(aBlock);
  v31 = swift_retain(a3);
  static DispatchQoS.unspecified.getter(v31);
  v45 = _swiftEmptyArrayStorage;
  v32 = sub_100005150((unint64_t *)&qword_10028CD20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v33 = sub_1000080B4((uint64_t *)&unk_100295A00);
  v34 = sub_100008628();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v45, v33, v34, v11, v32);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v18, v14, v30);
  _Block_release(v30);
  (*(void (**)(char *, uint64_t))(v44 + 8))(v14, v11);
  (*(void (**)(char *, uint64_t))(v42 + 8))(v18, v43);
  return swift_release(v47);
}

uint64_t sub_1001BB90C(uint64_t a1, void (*a2)(char *), uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  id v22;
  uint64_t (*v23)(char *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSURL *v31;
  void *v32;
  void *v33;
  id v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint64_t v44;
  uint64_t *v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(char *);
  uint64_t v55;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void (*v64)(char *);
  uint64_t v65;
  uint64_t v66;
  id v67;

  v63 = a3;
  v64 = a2;
  v61 = a1;
  v3 = type metadata accessor for InheritanceInvitationRecord(0);
  __chkstk_darwin(v3, v4);
  v60 = (uint64_t)&v57 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = sub_1000080B4((uint64_t *)&unk_10028CD50);
  __chkstk_darwin(v62, v6);
  v8 = (char *)&v57 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for URL(0);
  v10 = *(_QWORD *)(v9 - 8);
  v12 = __chkstk_darwin(v9, v11);
  v14 = (char *)&v57 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v12, v15);
  v18 = (char *)&v57 - v17;
  __chkstk_darwin(v16, v19);
  v21 = (char *)&v57 - v20;
  v22 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  type metadata accessor for LocalCache();
  sub_10000840C();
  URL.appendingPathComponent(_:isDirectory:)(0xD00000000000001BLL, 0x800000010020A4B0, 1);
  v23 = *(uint64_t (**)(char *, uint64_t))(v10 + 8);
  v24 = v23(v14, v9);
  v59 = v3;
  v25 = *(int *)(v3 + 36);
  v26 = v61;
  v27 = v61 + v25;
  v28 = UUID.uuidString.getter(v24);
  v30 = v29;
  URL.appendingPathComponent(_:)(v28);
  swift_bridgeObjectRelease(v30);
  v23(v18, v9);
  URL._bridgeToObjectiveC()(v31);
  v33 = v32;
  v23(v21, v9);
  v67 = 0;
  LODWORD(v21) = objc_msgSend(v22, "removeItemAtURL:error:", v33, &v67);

  v34 = v67;
  if ((_DWORD)v21)
  {
    v35 = type metadata accessor for UUID(0);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 16))(v8, v27, v35);
    swift_storeEnumTagMultiPayload(v8, v62, 0);
    v64(v8);
  }
  else
  {
    v36 = v34;
    v58 = (uint64_t *)v8;
    v37 = _convertNSErrorToError(_:)(v34);

    swift_willThrow(v38);
    if (qword_10028ADE8 != -1)
      swift_once(&qword_10028ADE8, sub_100046DC4);
    v39 = type metadata accessor for Logger(0);
    sub_100005288(v39, (uint64_t)qword_1002A8A38);
    v40 = v60;
    sub_100027FE8(v26, v60, type metadata accessor for InheritanceInvitationRecord);
    swift_errorRetain(v37);
    v41 = swift_errorRetain(v37);
    v42 = Logger.logObject.getter(v41);
    v43 = static os_log_type_t.error.getter(v42);
    if (os_log_type_enabled(v42, v43))
    {
      v44 = swift_slowAlloc(22, -1);
      v45 = (uint64_t *)swift_slowAlloc(8, -1);
      v46 = (void *)swift_slowAlloc(32, -1);
      v67 = v46;
      *(_DWORD *)v44 = 136315394;
      v47 = type metadata accessor for UUID(0);
      v48 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v49 = dispatch thunk of CustomStringConvertible.description.getter(v47, v48);
      v51 = v50;
      v65 = sub_1001DEF4C(v49, v50, (uint64_t *)&v67);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, &v66);
      swift_bridgeObjectRelease(v51);
      sub_100028388(v40, type metadata accessor for InheritanceInvitationRecord);
      *(_WORD *)(v44 + 12) = 2112;
      v52 = _convertErrorToNSError(_:)(v37);
      v65 = v52;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, &v66);
      *v45 = v52;
      swift_errorRelease(v37);
      swift_errorRelease(v37);
      _os_log_impl((void *)&_mh_execute_header, v42, v43, "Error deleting %s from LocalCache: %@", (uint8_t *)v44, 0x16u);
      v53 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v45, 1, v53);
      swift_slowDealloc(v45, -1, -1);
      swift_arrayDestroy(v46, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v46, -1, -1);
      swift_slowDealloc(v44, -1, -1);
    }
    else
    {
      sub_100028388(v40, type metadata accessor for InheritanceInvitationRecord);
      swift_errorRelease(v37);
      swift_errorRelease(v37);
    }

    v54 = v64;
    v55 = v62;
    v8 = (char *)v58;
    *v58 = v37;
    swift_storeEnumTagMultiPayload(v8, v55, 1);
    swift_errorRetain(v37);
    v54(v8);
    swift_errorRelease(v37);
  }
  return sub_100004934((uint64_t)v8, (uint64_t *)&unk_10028CD50);
}

uint64_t sub_1001BBE48(uint64_t a1, void (*a2)(char *), uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  id v22;
  uint64_t (*v23)(char *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSURL *v31;
  void *v32;
  void *v33;
  id v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint64_t v44;
  uint64_t *v45;
  void *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(char *);
  uint64_t v55;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void (*v64)(char *);
  uint64_t v65;
  uint64_t v66;
  id v67;

  v63 = a3;
  v64 = a2;
  v61 = a1;
  v3 = type metadata accessor for BeneficiaryInfoRecord(0);
  __chkstk_darwin(v3, v4);
  v60 = (uint64_t)&v57 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = sub_1000080B4((uint64_t *)&unk_10028CD50);
  __chkstk_darwin(v62, v6);
  v8 = (char *)&v57 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for URL(0);
  v10 = *(_QWORD *)(v9 - 8);
  v12 = __chkstk_darwin(v9, v11);
  v14 = (char *)&v57 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v12, v15);
  v18 = (char *)&v57 - v17;
  __chkstk_darwin(v16, v19);
  v21 = (char *)&v57 - v20;
  v22 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  type metadata accessor for LocalCache();
  sub_10000840C();
  URL.appendingPathComponent(_:isDirectory:)(0xD000000000000020, 0x80000001002094E0, 1);
  v23 = *(uint64_t (**)(char *, uint64_t))(v10 + 8);
  v24 = v23(v14, v9);
  v59 = v3;
  v25 = *(int *)(v3 + 32);
  v26 = v61;
  v27 = v61 + v25;
  v28 = UUID.uuidString.getter(v24);
  v30 = v29;
  URL.appendingPathComponent(_:)(v28);
  swift_bridgeObjectRelease(v30);
  v23(v18, v9);
  URL._bridgeToObjectiveC()(v31);
  v33 = v32;
  v23(v21, v9);
  v67 = 0;
  LODWORD(v21) = objc_msgSend(v22, "removeItemAtURL:error:", v33, &v67);

  v34 = v67;
  if ((_DWORD)v21)
  {
    v35 = type metadata accessor for UUID(0);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 16))(v8, v27, v35);
    swift_storeEnumTagMultiPayload(v8, v62, 0);
    v64(v8);
  }
  else
  {
    v36 = v34;
    v58 = (uint64_t *)v8;
    v37 = _convertNSErrorToError(_:)(v34);

    swift_willThrow(v38);
    if (qword_10028ADE8 != -1)
      swift_once(&qword_10028ADE8, sub_100046DC4);
    v39 = type metadata accessor for Logger(0);
    sub_100005288(v39, (uint64_t)qword_1002A8A38);
    v40 = v60;
    sub_100027FE8(v26, v60, type metadata accessor for BeneficiaryInfoRecord);
    swift_errorRetain(v37);
    v41 = swift_errorRetain(v37);
    v42 = Logger.logObject.getter(v41);
    v43 = static os_log_type_t.error.getter(v42);
    if (os_log_type_enabled(v42, v43))
    {
      v44 = swift_slowAlloc(22, -1);
      v45 = (uint64_t *)swift_slowAlloc(8, -1);
      v46 = (void *)swift_slowAlloc(32, -1);
      v67 = v46;
      *(_DWORD *)v44 = 136315394;
      v47 = type metadata accessor for UUID(0);
      v48 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v49 = dispatch thunk of CustomStringConvertible.description.getter(v47, v48);
      v51 = v50;
      v65 = sub_1001DEF4C(v49, v50, (uint64_t *)&v67);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, &v66);
      swift_bridgeObjectRelease(v51);
      sub_100028388(v40, type metadata accessor for BeneficiaryInfoRecord);
      *(_WORD *)(v44 + 12) = 2112;
      v52 = _convertErrorToNSError(_:)(v37);
      v65 = v52;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, &v66);
      *v45 = v52;
      swift_errorRelease(v37);
      swift_errorRelease(v37);
      _os_log_impl((void *)&_mh_execute_header, v42, v43, "Error deleting %s from LocalCache: %@", (uint8_t *)v44, 0x16u);
      v53 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v45, 1, v53);
      swift_slowDealloc(v45, -1, -1);
      swift_arrayDestroy(v46, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v46, -1, -1);
      swift_slowDealloc(v44, -1, -1);
    }
    else
    {
      sub_100028388(v40, type metadata accessor for BeneficiaryInfoRecord);
      swift_errorRelease(v37);
      swift_errorRelease(v37);
    }

    v54 = v64;
    v55 = v62;
    v8 = (char *)v58;
    *v58 = v37;
    swift_storeEnumTagMultiPayload(v8, v55, 1);
    swift_errorRetain(v37);
    v54(v8);
    swift_errorRelease(v37);
  }
  return sub_100004934((uint64_t)v8, (uint64_t *)&unk_10028CD50);
}

uint64_t sub_1001BC384(uint64_t a1, void (*a2)(char *), uint64_t a3, uint64_t (*a4)(_QWORD), uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  id v26;
  uint64_t (*v27)(char *, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSURL *v34;
  void *v35;
  void *v36;
  unsigned int v37;
  id v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t (*v44)(_QWORD);
  uint64_t v45;
  uint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  uint64_t v49;
  uint64_t *v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(char *);
  uint64_t *v63;
  uint64_t v64;
  uint64_t (*v65)(_QWORD);
  uint64_t v66;
  uint64_t v67;
  void (*v68)(char *);
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  id v73;

  v66 = a6;
  v67 = a1;
  v70 = a3;
  v68 = a2;
  v65 = a4;
  v7 = a4(0);
  __chkstk_darwin(v7, v8);
  v64 = (uint64_t)&v63 - v9;
  v69 = sub_1000080B4((uint64_t *)&unk_10028CD50);
  __chkstk_darwin(v69, v10);
  v12 = (char *)&v63 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for URL(0);
  v14 = *(_QWORD *)(v13 - 8);
  v16 = __chkstk_darwin(v13, v15);
  v18 = (char *)&v63 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __chkstk_darwin(v16, v19);
  v22 = (char *)&v63 - v21;
  __chkstk_darwin(v20, v23);
  v25 = (char *)&v63 - v24;
  v26 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  type metadata accessor for LocalCache();
  sub_10000840C();
  URL.appendingPathComponent(_:isDirectory:)(a5, v66, 1);
  v27 = *(uint64_t (**)(char *, uint64_t))(v14 + 8);
  v28 = v27(v18, v13);
  v66 = v7;
  v29 = v67;
  v30 = v67 + *(int *)(v7 + 28);
  v31 = UUID.uuidString.getter(v28);
  v33 = v32;
  URL.appendingPathComponent(_:)(v31);
  swift_bridgeObjectRelease(v33);
  v27(v22, v13);
  URL._bridgeToObjectiveC()(v34);
  v36 = v35;
  v27(v25, v13);
  v73 = 0;
  v37 = objc_msgSend(v26, "removeItemAtURL:error:", v36, &v73);

  v38 = v73;
  if (v37)
  {
    v39 = type metadata accessor for UUID(0);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 16))(v12, v30, v39);
    swift_storeEnumTagMultiPayload(v12, v69, 0);
    v68(v12);
  }
  else
  {
    v40 = v38;
    v63 = (uint64_t *)v12;
    v41 = _convertNSErrorToError(_:)(v38);

    swift_willThrow(v42);
    if (qword_10028ADE8 != -1)
      swift_once(&qword_10028ADE8, sub_100046DC4);
    v43 = type metadata accessor for Logger(0);
    sub_100005288(v43, (uint64_t)qword_1002A8A38);
    v45 = v64;
    v44 = v65;
    sub_100027FE8(v29, v64, v65);
    swift_errorRetain(v41);
    v46 = swift_errorRetain(v41);
    v47 = Logger.logObject.getter(v46);
    v48 = static os_log_type_t.error.getter(v47);
    if (os_log_type_enabled(v47, v48))
    {
      v49 = swift_slowAlloc(22, -1);
      v50 = (uint64_t *)swift_slowAlloc(8, -1);
      v51 = (void *)swift_slowAlloc(32, -1);
      v73 = v51;
      *(_DWORD *)v49 = 136315394;
      v52 = v45;
      v53 = type metadata accessor for UUID(0);
      v54 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v55 = dispatch thunk of CustomStringConvertible.description.getter(v53, v54);
      v57 = v56;
      v71 = sub_1001DEF4C(v55, v56, (uint64_t *)&v73);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v71, &v72);
      swift_bridgeObjectRelease(v57);
      sub_100028388(v52, v65);
      *(_WORD *)(v49 + 12) = 2112;
      v58 = _convertErrorToNSError(_:)(v41);
      v71 = v58;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v71, &v72);
      *v50 = v58;
      swift_errorRelease(v41);
      swift_errorRelease(v41);
      _os_log_impl((void *)&_mh_execute_header, v47, v48, "Error deleting %s from LocalCache: %@", (uint8_t *)v49, 0x16u);
      v59 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v50, 1, v59);
      swift_slowDealloc(v50, -1, -1);
      swift_arrayDestroy(v51, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v51, -1, -1);
      swift_slowDealloc(v49, -1, -1);
    }
    else
    {
      sub_100028388(v45, v44);
      swift_errorRelease(v41);
      swift_errorRelease(v41);
    }

    v61 = v68;
    v60 = v69;
    v12 = (char *)v63;
    *v63 = v41;
    swift_storeEnumTagMultiPayload(v12, v60, 1);
    swift_errorRetain(v41);
    v61(v12);
    swift_errorRelease(v41);
  }
  return sub_100004934((uint64_t)v12, (uint64_t *)&unk_10028CD50);
}

