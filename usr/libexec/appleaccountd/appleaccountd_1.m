uint64_t sub_100092404(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v10;
  char *v11;
  void *v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  _QWORD v23[3];
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[3];

  v10 = (_QWORD *)(a2 + 16);
  v11 = (char *)(a5 + 16);
  v12 = (void *)_convertErrorToNSError(_:)(a1);
  v13 = objc_msgSend(v12, "aa_partialErrorsByName");

  if (v13)
  {
    v14 = sub_1000080B4(&qword_10028E850);
    v15 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v13, &type metadata for String, v14, &protocol witness table for String);

    if (*(_QWORD *)(v15 + 16))
    {
      swift_bridgeObjectRetain(a4);
      sub_100092DBC(v15, v10, a3, a4);
      swift_bridgeObjectRelease(v15);
      swift_bridgeObjectRelease(a4);
      goto LABEL_6;
    }
    swift_bridgeObjectRelease(v15);
  }
  swift_beginAccess(v10, v23, 33, 0);
  swift_bridgeObjectRetain(a4);
  swift_errorRetain(a1);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v10);
  v26[0] = *v10;
  *v10 = 0x8000000000000000;
  sub_10001F710(a1, a3, a4, isUniquelyReferenced_nonNull_native);
  v17 = *v10;
  *v10 = v26[0];
  swift_bridgeObjectRelease(a4);
  swift_bridgeObjectRelease(v17);
  swift_endAccess(v23);
LABEL_6:
  swift_beginAccess(v11, v26, 0, 0);
  v18 = *v11;
  sub_100006CA4(a6, (uint64_t)v23);
  if ((v18 & 1) != 0)
  {
    v19 = 1;
  }
  else
  {
    v20 = v24;
    v21 = v25;
    sub_10000732C(v23, v24);
    v19 = (*(uint64_t (**)(uint64_t, uint64_t))(v21 + 24))(v20, v21);
  }
  sub_100006F58(v23);
  result = swift_beginAccess(v11, v23, 1, 0);
  *v11 = v19 & 1;
  return result;
}

uint64_t sub_1000925E4(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  _QWORD aBlock[5];
  uint64_t v32;

  v29 = a1;
  v10 = a2 & 1;
  v11 = type metadata accessor for DispatchWorkItemFlags(0);
  v28 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11, v12);
  v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for DispatchQoS(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15, v17);
  v19 = (char *)&v27 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = swift_allocObject(&unk_100263CD0, 56, 7);
  *(_BYTE *)(v20 + 16) = v10;
  *(_QWORD *)(v20 + 24) = a3;
  *(_QWORD *)(v20 + 32) = a4;
  *(_QWORD *)(v20 + 40) = a5;
  *(_QWORD *)(v20 + 48) = a6;
  aBlock[4] = sub_100092D54;
  v32 = v20;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000051D0;
  aBlock[3] = &unk_100263CE8;
  v21 = _Block_copy(aBlock);
  swift_retain(a3);
  swift_retain(a5);
  v22 = swift_retain(a6);
  static DispatchQoS.unspecified.getter(v22);
  v30 = &_swiftEmptyArrayStorage;
  v23 = sub_100005150((unint64_t *)&qword_10028CD20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v24 = sub_1000080B4((uint64_t *)&unk_100295A00);
  v25 = sub_1000077A0((unint64_t *)&qword_10028CD30, (uint64_t *)&unk_100295A00);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v30, v24, v25, v11, v23);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v19, v14, v21);
  _Block_release(v21);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v14, v11);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v19, v15);
  return swift_release(v32);
}

uint64_t sub_1000927F0(char a1, uint64_t a2, void (*a3)(uint64_t, uint64_t), uint64_t a4, uint64_t a5)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  _BYTE v27[24];
  uint64_t v28;
  _BYTE v29[16];
  uint64_t v30[3];

  if (qword_10028ADD8 != -1)
    swift_once(&qword_10028ADD8, sub_100046D78);
  v9 = (_QWORD *)(a2 + 16);
  v10 = type metadata accessor for Logger(0);
  sub_100005288(v10, (uint64_t)qword_1002A8A08);
  v11 = swift_retain_n(a2, 2);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = swift_slowAlloc(22, -1);
    v25 = swift_slowAlloc(64, -1);
    v30[0] = v25;
    *(_DWORD *)v14 = 136315394;
    if ((a1 & 1) != 0)
      v15 = 0x656C756465686353;
    else
      v15 = 0x6E616D6544206E4FLL;
    v26 = a5;
    v28 = sub_1001DEF4C(v15, 0xE900000000000064, v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, v29);
    swift_bridgeObjectRelease(0xE900000000000064);
    *(_WORD *)(v14 + 12) = 2080;
    swift_beginAccess(a2 + 16, v27, 0, 0);
    v16 = *(_QWORD *)(a2 + 16);
    swift_bridgeObjectRetain(v16);
    v17 = sub_1000080B4(&qword_10028E850);
    v18 = Dictionary.description.getter(v16, &type metadata for String, v17, &protocol witness table for String);
    v20 = v19;
    swift_bridgeObjectRelease(v16);
    v28 = sub_1001DEF4C(v18, v20, v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, v29);
    swift_release_n(a2, 2);
    v21 = v20;
    a5 = v26;
    swift_bridgeObjectRelease(v21);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Overall %s Apple ID Availability activities finished with errors: %s", (uint8_t *)v14, 0x16u);
    swift_arrayDestroy(v25, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v25, -1, -1);
    swift_slowDealloc(v14, -1, -1);

  }
  else
  {

    swift_release_n(a2, 2);
  }
  swift_beginAccess(a5 + 16, v30, 0, 0);
  v22 = *(unsigned __int8 *)(a5 + 16);
  swift_beginAccess(a2 + 16, &v28, 0, 0);
  v23 = *v9;
  swift_bridgeObjectRetain(*v9);
  a3(v22, v23);
  return swift_bridgeObjectRelease(v23);
}

uint64_t sub_100092AC8()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;

  swift_bridgeObjectRelease(v0[2]);
  v1 = (char *)v0 + OBJC_IVAR____TtC13appleaccountd35AppleIDAvailabilityActivityProvider__accountStore;
  v2 = sub_1000080B4(&qword_10028FA50);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

uint64_t sub_100092B24()
{
  return type metadata accessor for AppleIDAvailabilityActivityProvider(0);
}

uint64_t type metadata accessor for AppleIDAvailabilityActivityProvider(uint64_t a1)
{
  uint64_t result;

  result = qword_10028EE80;
  if (!qword_10028EE80)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AppleIDAvailabilityActivityProvider);
  return result;
}

void sub_100092B68(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[1] = &unk_10021B0D8;
  sub_100092BEC(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(v2 - 8) + 64;
    swift_updateClassMetadata2(a1, 256, 3, v4, a1 + 80);
  }
}

void sub_100092BEC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100293810)
  {
    v2 = sub_10000D908(&qword_10028C860);
    v3 = type metadata accessor for Dependency(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100293810);
  }
}

uint64_t sub_100092C44()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100092C68()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100092C78()
{
  uint64_t v0;

  sub_100006F58((_QWORD *)(v0 + 24));

  swift_release(*(_QWORD *)(v0 + 72));
  swift_release(*(_QWORD *)(v0 + 80));

  return swift_deallocObject(v0, 96, 7);
}

void sub_100092CBC(uint64_t a1)
{
  uint64_t v1;

  sub_100091CF0(a1, *(unsigned __int8 *)(v1 + 16), (_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 64), *(_QWORD *)(v1 + 72), *(_QWORD *)(v1 + 80), *(NSObject **)(v1 + 88));
}

uint64_t sub_100092CD0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 48));
  swift_release(*(_QWORD *)(v0 + 56));
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_100092D0C()
{
  uint64_t v0;

  return sub_1000925E4(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56));
}

uint64_t sub_100092D20()
{
  _QWORD *v0;

  swift_release(v0[3]);
  swift_release(v0[5]);
  swift_release(v0[6]);
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100092D54()
{
  uint64_t v0;

  return sub_1000927F0(*(_BYTE *)(v0 + 16), *(_QWORD *)(v0 + 24), *(void (**)(uint64_t, uint64_t))(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48));
}

uint64_t sub_100092D64()
{
  _QWORD *v0;

  swift_errorRelease(v0[2]);
  swift_release(v0[3]);
  swift_bridgeObjectRelease(v0[5]);
  swift_release(v0[6]);
  sub_100006F58(v0 + 7);
  return swift_deallocObject(v0, 96, 7);
}

uint64_t sub_100092DA8()
{
  uint64_t *v0;

  return sub_100092404(v0[2], v0[3], v0[4], v0[5], v0[6], (uint64_t)(v0 + 7));
}

uint64_t sub_100092DBC(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t i;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  Swift::String v20;
  Swift::String v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t isUniquelyReferenced_nonNull_native;
  _QWORD *v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  _BOOL8 v29;
  uint64_t v30;
  char v31;
  unint64_t v32;
  char v33;
  _QWORD *v34;
  uint64_t *v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t result;
  uint64_t v40;
  int64_t v41;
  uint64_t v45;
  int64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;

  v5 = 1 << *(_BYTE *)(a1 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(a1 + 64);
  v41 = (unint64_t)(v5 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  for (i = 0; ; i = v46)
  {
    if (v7)
    {
      v45 = (v7 - 1) & v7;
      v46 = i;
      v11 = __clz(__rbit64(v7)) | (i << 6);
    }
    else
    {
      v12 = i + 1;
      if (__OFADD__(i, 1))
        goto LABEL_38;
      if (v12 >= v41)
        return swift_release(a1);
      v13 = *(_QWORD *)(v40 + 8 * v12);
      v14 = i + 1;
      if (!v13)
      {
        v14 = i + 2;
        if (i + 2 >= v41)
          return swift_release(a1);
        v13 = *(_QWORD *)(v40 + 8 * v14);
        if (!v13)
        {
          v14 = i + 3;
          if (i + 3 >= v41)
            return swift_release(a1);
          v13 = *(_QWORD *)(v40 + 8 * v14);
          if (!v13)
          {
            v14 = i + 4;
            if (i + 4 >= v41)
              return swift_release(a1);
            v13 = *(_QWORD *)(v40 + 8 * v14);
            if (!v13)
            {
              v15 = i + 5;
              if (i + 5 >= v41)
                return swift_release(a1);
              v13 = *(_QWORD *)(v40 + 8 * v15);
              if (!v13)
              {
                while (1)
                {
                  v14 = v15 + 1;
                  if (__OFADD__(v15, 1))
                    goto LABEL_39;
                  if (v14 >= v41)
                    return swift_release(a1);
                  v13 = *(_QWORD *)(v40 + 8 * v14);
                  ++v15;
                  if (v13)
                    goto LABEL_23;
                }
              }
              v14 = i + 5;
            }
          }
        }
      }
LABEL_23:
      v45 = (v13 - 1) & v13;
      v46 = v14;
      v11 = __clz(__rbit64(v13)) + (v14 << 6);
    }
    v16 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v11);
    v17 = *v16;
    v18 = (void *)v16[1];
    v19 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * v11);
    v47 = a3;
    v48 = a4;
    swift_bridgeObjectRetain(v18);
    swift_errorRetain(v19);
    swift_bridgeObjectRetain(a4);
    v20._countAndFlagsBits = 58;
    v20._object = (void *)0xE100000000000000;
    String.append(_:)(v20);
    v21._countAndFlagsBits = v17;
    v21._object = v18;
    String.append(_:)(v21);
    v22 = v47;
    v23 = v48;
    swift_beginAccess(a2, &v47, 33, 0);
    swift_errorRetain(v19);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a2);
    v49 = (_QWORD *)*a2;
    v25 = v49;
    *a2 = 0x8000000000000000;
    v27 = sub_10010A9E0(v22, v23);
    v28 = v25[2];
    v29 = (v26 & 1) == 0;
    v30 = v28 + v29;
    if (__OFADD__(v28, v29))
      break;
    v31 = v26;
    if (v25[3] >= v30)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        v34 = v49;
        if ((v26 & 1) != 0)
          goto LABEL_4;
      }
      else
      {
        sub_10002041C();
        v34 = v49;
        if ((v31 & 1) != 0)
          goto LABEL_4;
      }
    }
    else
    {
      sub_10001D3E4(v30, isUniquelyReferenced_nonNull_native);
      v32 = sub_10010A9E0(v22, v23);
      if ((v31 & 1) != (v33 & 1))
        goto LABEL_40;
      v27 = v32;
      v34 = v49;
      if ((v31 & 1) != 0)
      {
LABEL_4:
        v9 = v34[7];
        swift_errorRelease(*(_QWORD *)(v9 + 8 * v27));
        *(_QWORD *)(v9 + 8 * v27) = v19;
        goto LABEL_5;
      }
    }
    v34[(v27 >> 6) + 8] |= 1 << v27;
    v35 = (uint64_t *)(v34[6] + 16 * v27);
    *v35 = v22;
    v35[1] = v23;
    *(_QWORD *)(v34[7] + 8 * v27) = v19;
    v36 = v34[2];
    v37 = __OFADD__(v36, 1);
    v38 = v36 + 1;
    if (v37)
      goto LABEL_37;
    v34[2] = v38;
    swift_bridgeObjectRetain(v23);
LABEL_5:
    v10 = *a2;
    *a2 = v34;
    swift_bridgeObjectRelease(v23);
    swift_bridgeObjectRelease(v10);
    swift_endAccess(&v47);
    swift_bridgeObjectRelease(v18);
    swift_errorRelease(v19);
    v7 = v45;
  }
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

uint64_t sub_100093134()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC13appleaccountd14ContactsHelper__contactsManager;
  v2 = sub_1000080B4((uint64_t *)&unk_10028F080);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_100093188()
{
  return type metadata accessor for ContactsHelper(0);
}

uint64_t type metadata accessor for ContactsHelper(uint64_t a1)
{
  uint64_t result;

  result = qword_10028EFB0;
  if (!qword_10028EFB0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ContactsHelper);
  return result;
}

void sub_1000931CC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  sub_100093238(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(v2 - 8) + 64;
    swift_updateClassMetadata2(a1, 256, 1, &v4, a1 + 80);
  }
}

void sub_100093238(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_10028EFC0[0])
  {
    v2 = sub_10000D908((uint64_t *)&unk_100291CA0);
    v3 = type metadata accessor for Dependency(a1, v2);
    if (!v4)
      atomic_store(v3, qword_10028EFC0);
  }
}

uint64_t sub_100093290@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, unint64_t a7@<X6>, unsigned __int8 a8@<W7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unsigned __int8 a14)
{
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int *v36;
  uint64_t *v37;
  uint64_t *v38;
  _QWORD *v39;
  uint64_t *v40;
  uint64_t v41;
  void (*v42)(void);
  void (*v43)(uint64_t, uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t *v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t *v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  NSString v63;
  id v64;
  id v65;
  id v66;
  NSString v67;
  _QWORD *v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  id v73;
  id v74;
  void *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  id v82;
  id v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v106;
  void (*v107)(char *, uint64_t, uint64_t);
  char *v108;
  uint64_t v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t *v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char v123;
  uint64_t result;
  uint64_t v125;
  char v126;
  uint64_t *v127;
  uint64_t *v128;
  uint64_t *v129;
  void (*v130)(void);
  char *v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t *v136;
  uint64_t *v137;
  uint64_t *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  _QWORD *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t *v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  id v150;
  uint64_t v151;
  void *v152;

  v151 = a6;
  LODWORD(v150) = a5;
  v20 = a8;
  v21 = type metadata accessor for Date.ISO8601FormatStyle(0);
  v134 = *(_QWORD *)(v21 - 8);
  v135 = v21;
  __chkstk_darwin(v21, v22);
  v133 = (uint64_t)&v130 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_1000080B4(&qword_10028E810);
  __chkstk_darwin(v24, v25);
  v143 = (uint64_t)&v130 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v148 = type metadata accessor for Date(0);
  v144 = *(_QWORD *)(v148 - 8);
  __chkstk_darwin(v148, v27);
  v132 = (char *)&v130 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = sub_1000080B4((uint64_t *)&unk_1002904F0);
  __chkstk_darwin(v29, v30);
  v141 = (uint64_t)&v130 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = type metadata accessor for UUID(0);
  v33 = *(_QWORD *)(v32 - 8);
  __chkstk_darwin(v32, v34);
  v131 = (char *)&v130 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = (int *)type metadata accessor for CustodianRecord(0);
  v37 = (uint64_t *)(a9 + v36[7]);
  *v37 = 0;
  v37[1] = 0;
  v137 = v37;
  v38 = (uint64_t *)(a9 + v36[8]);
  *v38 = 0;
  v38[1] = 0;
  v138 = v38;
  v39 = (_QWORD *)(a9 + v36[13]);
  *v39 = 0;
  v39[1] = 0;
  v142 = v39;
  v40 = (uint64_t *)(a9 + v36[14]);
  *v40 = 0;
  v40[1] = 0;
  v145 = v40;
  v41 = a9 + v36[15];
  *(_QWORD *)v41 = 0;
  v136 = (uint64_t *)v41;
  *(_BYTE *)(v41 + 8) = 1;
  v42 = *(void (**)(void))(v33 + 56);
  v140 = a9 + v36[16];
  v130 = v42;
  v42();
  v147 = v33;
  v43 = *(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 16);
  v43(a9, a1, v32);
  v43(a9 + v36[5], a1 + v36[5], v32);
  if (v20 == 2 || ((((v20 & 1) == 0) ^ *(unsigned __int8 *)(a1 + v36[12])) & 1) != 0)
  {
    v44 = v36[11];
    v45 = *(_QWORD *)(a1 + v44);
    v46 = *(_QWORD *)(a1 + v44 + 8);
    v47 = (uint64_t *)(a9 + v44);
    *v47 = v45;
    v47[1] = v46;
    sub_10000F450(v45, v46);
    if (a3)
    {
LABEL_4:
      v48 = (_QWORD *)(a9 + v36[6]);
      *v48 = a2;
      v48[1] = a3;
      goto LABEL_7;
    }
  }
  else
  {
    *(_OWORD *)(a9 + v36[11]) = xmmword_100218E90;
    if (a3)
      goto LABEL_4;
  }
  v49 = v36[6];
  v50 = *(_QWORD *)(a1 + v49);
  a3 = *(_QWORD *)(a1 + v49 + 8);
  v51 = (_QWORD *)(a9 + v49);
  *v51 = v50;
  v51[1] = a3;
  swift_bridgeObjectRetain(a3);
LABEL_7:
  v52 = v36[9];
  if ((v150 & 1) != 0)
    a4 = *(_QWORD *)(a1 + v52);
  *(_QWORD *)(a9 + v52) = a4;
  v53 = v36[10];
  if (a7 >> 60 == 15)
  {
    v54 = *(_QWORD *)(a1 + v53);
    v55 = *(_QWORD *)(a1 + v53 + 8);
    v56 = (uint64_t *)(a9 + v53);
    *v56 = v54;
    v56[1] = v55;
    sub_100014534(v54, v55);
  }
  else
  {
    v57 = (_QWORD *)(a9 + v53);
    *v57 = v151;
    v57[1] = a7;
  }
  v139 = v32;
  if (v20 == 2)
    *(_BYTE *)(a9 + v36[12]) = *(_BYTE *)(a1 + v36[12]);
  else
    *(_BYTE *)(a9 + v36[12]) = v20 & 1;
  v149 = a10;
  v58 = type metadata accessor for ContactsHelper(0);
  v59 = swift_allocObject(v58, *(unsigned int *)(v58 + 48), *(unsigned __int16 *)(v58 + 52));
  v146 = a7;
  sub_100014534(v151, a7);
  v60 = sub_1000080B4((uint64_t *)&unk_100291CA0);
  Dependency.init(dependencyId:config:)(0, 0, 0, v60);
  swift_bridgeObjectRetain(a3);
  v61 = sub_1000080B4((uint64_t *)&unk_10028F080);
  Dependency.wrappedValue.getter(&v152, v61);
  v62 = v152;
  v63 = String._bridgeToObjectiveC()();
  v64 = objc_msgSend(v62, "contactForHandle:", v63);

  swift_unknownObjectRelease(v62);
  if (v64)
  {
    v65 = objc_allocWithZone((Class)AALocalContactInfo);
    swift_bridgeObjectRetain(a3);
    v66 = v64;
    v67 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a3);
    v150 = objc_msgSend(v65, "initWithHandle:contact:", v67, v66);
    swift_bridgeObjectRelease(a3);

  }
  else
  {
    swift_bridgeObjectRelease(a3);
    v150 = 0;
  }
  v68 = v142;
  v69 = v139;
  swift_setDeallocating(v59);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v61 - 8) + 8))(v59 + OBJC_IVAR____TtC13appleaccountd14ContactsHelper__contactsManager, v61);
  swift_deallocClassInstance(v59, *(unsigned int *)(*(_QWORD *)v59 + 48), *(unsigned __int16 *)(*(_QWORD *)v59 + 52));
  v70 = sub_100093B90();
  v71 = v147;
  v72 = v148;
  if ((v70 & 1) == 0 || !v150)
    goto LABEL_36;
  v73 = v150;
  v74 = objc_msgSend(v73, "firstName");
  if (!v74)
  {

    goto LABEL_36;
  }
  v75 = v74;
  v76 = static String._unconditionallyBridgeFromObjectiveC(_:)(v74);
  v78 = v77;

  v79 = sub_10006AF30(v76, v78);
  v81 = v80;

  swift_bridgeObjectRelease(v78);
  if (!v81)
  {
LABEL_36:
    v95 = (uint64_t *)(a1 + v36[7]);
    v96 = *v95;
    v97 = v95[1];
    v98 = v137;
    *v137 = v96;
    v98[1] = v97;
    v99 = (uint64_t *)(a1 + v36[8]);
    v101 = *v99;
    v100 = v99[1];
    v102 = v138;
    *v138 = v101;
    v102[1] = v100;
    swift_bridgeObjectRetain(v100);
    swift_bridgeObjectRetain(v97);
    goto LABEL_37;
  }
  v82 = v73;
  v83 = objc_msgSend(v82, "lastName");
  if (!v83)
  {
    swift_bridgeObjectRelease(v81);

    v72 = v148;
    goto LABEL_36;
  }
  v84 = v83;
  v85 = static String._unconditionallyBridgeFromObjectiveC(_:)(v83);
  v87 = v86;

  v88 = sub_10006AF30(v85, v87);
  v90 = v89;

  swift_bridgeObjectRelease(v87);
  if (!v90)
  {
    swift_bridgeObjectRelease(v81);
    v71 = v147;
    v72 = v148;
    goto LABEL_36;
  }
  v91 = (_QWORD *)(a1 + v36[7]);
  v92 = v91[1];
  v71 = v147;
  v72 = v148;
  if (v92
    && (*v91 == v79 && v92 == v81 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v91, v92, v79, v81, 0) & 1) != 0)
    || (v93 = (_QWORD *)(a1 + v36[8]), (v94 = v93[1]) != 0)
    && (*v93 == v88 && v94 == v90 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v93, v94, v88, v90, 0) & 1) != 0))
  {
    swift_bridgeObjectRelease(v81);
    swift_bridgeObjectRelease(v90);
    goto LABEL_36;
  }
  v128 = v137;
  *v137 = v79;
  v128[1] = v81;
  v129 = v138;
  *v138 = v88;
  v129[1] = v90;
LABEL_37:
  v103 = a12;
  v104 = v141;
  sub_100024A20(v149, v141, (uint64_t *)&unk_1002904F0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v71 + 48))(v104, 1, v69) == 1)
  {
    sub_100004934(v104, (uint64_t *)&unk_1002904F0);
    sub_100014548(a1 + v36[16], v140);
    if (a12)
    {
LABEL_39:
      v106 = v68[1];
      goto LABEL_42;
    }
  }
  else
  {
    v107 = *(void (**)(char *, uint64_t, uint64_t))(v71 + 32);
    v108 = v131;
    v107(v131, v104, v69);
    v109 = v140;
    sub_100004934(v140, (uint64_t *)&unk_1002904F0);
    v107((char *)v109, (uint64_t)v108, v69);
    ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v130)(v109, 0, 1, v69);
    if (a12)
      goto LABEL_39;
  }
  v110 = (uint64_t *)(a1 + v36[13]);
  a11 = *v110;
  v103 = v110[1];
  v106 = v68[1];
  swift_bridgeObjectRetain(v103);
LABEL_42:
  swift_bridgeObjectRelease(v106);
  *v68 = a11;
  v68[1] = v103;
  v111 = v143;
  sub_100024A20(a13, v143, &qword_10028E810);
  v112 = v144;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v144 + 48))(v111, 1, v72) == 1)
  {
    sub_1000144D8(v151, v146);

    sub_100004934(a13, &qword_10028E810);
    sub_100004934(v149, (uint64_t *)&unk_1002904F0);
    sub_100004934(v111, &qword_10028E810);
    v113 = (uint64_t *)(a1 + v36[14]);
    v114 = *v113;
    v115 = v113[1];
    v116 = v145;
    v117 = v145[1];
    swift_bridgeObjectRetain(v115);
  }
  else
  {
    v118 = v132;
    (*(void (**)(char *, uint64_t, uint64_t))(v112 + 32))(v132, v111, v72);
    v119 = v133;
    sub_100093E40(v133);
    v114 = Date.ISO8601Format(_:)(v119);
    v115 = v120;
    sub_1000144D8(v151, v146);

    sub_100004934(a13, &qword_10028E810);
    sub_100004934(v149, (uint64_t *)&unk_1002904F0);
    (*(void (**)(uint64_t, uint64_t))(v134 + 8))(v119, v135);
    (*(void (**)(char *, uint64_t))(v112 + 8))(v118, v72);
    v116 = v145;
    v117 = v145[1];
  }
  swift_bridgeObjectRelease(v117);
  *v116 = v114;
  v116[1] = v115;
  v121 = a1 + v36[15];
  v122 = *(_QWORD *)v121;
  v123 = *(_BYTE *)(v121 + 8);
  result = sub_10002A604(a1);
  if ((a14 & 1) != 0)
    v125 = 1;
  else
    v125 = v122;
  v126 = (a14 ^ 1) & v123;
  if (((a14 ^ 1) & 1) != 0 || (v123 & 1) != 0)
    goto LABEL_52;
  v125 = v122 + 1;
  if (v122 != -1)
  {
    v126 = 0;
LABEL_52:
    v127 = v136;
    *v136 = v125;
    *((_BYTE *)v127 + 8) = v126;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t sub_100093B90()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSString v16;
  unsigned int v17;
  NSString v18;
  unsigned __int8 v19;
  uint64_t v20;
  id v21;
  NSString v22;
  id v23;
  id v24;
  NSString v25;
  id v26;
  unsigned __int8 v27;
  NSString v28;
  unsigned int v29;
  NSString v30;
  unsigned __int8 v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v35;

  v1 = type metadata accessor for CustodianRecord(0);
  v3 = __chkstk_darwin(v1, v2);
  v5 = (char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v3, v6);
  v9 = (char *)&v35 - v8;
  v10 = (uint64_t *)(v0 + *(int *)(v7 + 28));
  v11 = v10[1];
  if (!v11 || (v12 = sub_10006AF30(*v10, v11), !v13))
  {
    v27 = 1;
    return v27 & 1;
  }
  v14 = v12;
  v15 = v13;
  v16 = String._bridgeToObjectiveC()();
  v17 = objc_msgSend(v16, "aa_appearsToBePhoneNumber");

  sub_10002A5C0(v0, (uint64_t)v9);
  if (v17)
  {
    v18 = String._bridgeToObjectiveC()();
    v19 = objc_msgSend(v18, "aa_appearsToBePhoneNumber");

    sub_10002A604((uint64_t)v9);
    if ((v19 & 1) != 0)
    {
      v20 = *(_QWORD *)(v0 + *(int *)(v1 + 24) + 8);
      v21 = objc_allocWithZone((Class)CNPhoneNumber);
      swift_bridgeObjectRetain(v20);
      v22 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v20);
      v23 = objc_msgSend(v21, "initWithStringValue:", v22);

      v24 = objc_allocWithZone((Class)CNPhoneNumber);
      swift_bridgeObjectRetain(v15);
      v25 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v15);
      v26 = objc_msgSend(v24, "initWithStringValue:", v25);
      swift_bridgeObjectRelease(v15);

      v27 = objc_msgSend(v23, "isLikePhoneNumber:", v26);
      return v27 & 1;
    }
  }
  else
  {
    sub_10002A604((uint64_t)v9);
  }
  v28 = String._bridgeToObjectiveC()();
  v29 = objc_msgSend(v28, "aa_appearsToBeEmail");

  sub_10002A5C0(v0, (uint64_t)v5);
  if (!v29)
  {
    sub_10002A604((uint64_t)v5);
    goto LABEL_14;
  }
  v30 = String._bridgeToObjectiveC()();
  v31 = objc_msgSend(v30, "aa_appearsToBeEmail");

  sub_10002A604((uint64_t)v5);
  if ((v31 & 1) == 0)
  {
LABEL_14:
    swift_bridgeObjectRelease(v15);
    v27 = 0;
    return v27 & 1;
  }
  v32 = (_QWORD *)(v0 + *(int *)(v1 + 24));
  v33 = v32[1];
  if (v14 == *v32 && v15 == v33)
  {
    swift_bridgeObjectRelease(v15);
    v27 = 1;
  }
  else
  {
    v27 = _stringCompareWithSmolCheck(_:_:expecting:)(v14, v15, *v32, v33, 0);
    swift_bridgeObjectRelease(v15);
  }
  return v27 & 1;
}

uint64_t sub_100093E40@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, _QWORD, uint64_t);
  uint64_t v29;
  uint64_t result;
  void (*v31)(char *, char *, uint64_t);
  char *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v35 = a1;
  v1 = sub_1000080B4(&qword_10028F0C8);
  __chkstk_darwin(v1, v2);
  v4 = (char *)&v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = type metadata accessor for TimeZone(0);
  v36 = *(_QWORD *)(v38 - 8);
  __chkstk_darwin(v38, v5);
  v34 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = type metadata accessor for Date.ISO8601FormatStyle.TimeZoneSeparator(0);
  v7 = *(_QWORD *)(v37 - 8);
  __chkstk_darwin(v37, v8);
  v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Date.ISO8601FormatStyle.TimeSeparator(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11, v13);
  v15 = (char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for Date.ISO8601FormatStyle.DateTimeSeparator(0);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16, v18);
  v20 = (char *)&v33 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for Date.ISO8601FormatStyle.DateSeparator(0);
  __chkstk_darwin(v21, v22);
  v24 = (char *)&v33 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD))(v25 + 104))(v24, enum case for Date.ISO8601FormatStyle.DateSeparator.dash(_:));
  v26 = v16;
  v27 = v36;
  (*(void (**)(char *, _QWORD, uint64_t))(v17 + 104))(v20, enum case for Date.ISO8601FormatStyle.DateTimeSeparator.standard(_:), v26);
  v28 = *(void (**)(char *, _QWORD, uint64_t))(v12 + 104);
  v29 = v38;
  v28(v15, enum case for Date.ISO8601FormatStyle.TimeSeparator.colon(_:), v11);
  (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v10, enum case for Date.ISO8601FormatStyle.TimeZoneSeparator.omitted(_:), v37);
  TimeZone.init(secondsFromGMT:)(0);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v27 + 48))(v4, 1, v29);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    v31 = *(void (**)(char *, char *, uint64_t))(v27 + 32);
    v32 = v34;
    v31(v34, v4, v29);
    return Date.ISO8601FormatStyle.init(dateSeparator:dateTimeSeparator:timeSeparator:timeZoneSeparator:includingFractionalSeconds:timeZone:)(v24, v20, v15, v10, 0, v32);
  }
  return result;
}

uint64_t sub_1000940B4@<X0>(void *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int *v26;
  NSObject *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(void);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  id v39;
  id v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int (*v47)(char *, uint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  id v53;
  NSString v54;
  id v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  NSObject *v59;
  NSObject *v60;
  os_log_type_t v61;
  uint8_t *v62;
  NSObject **v63;
  NSObject *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  _QWORD *v71;
  _QWORD *v72;
  uint64_t v73;
  _QWORD *v74;
  NSObject *v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t result;
  char *v82;
  NSString v83;
  id v84;
  NSObject *v85;
  NSString v86;
  NSObject *v87;
  uint64_t v88;
  NSString v89;
  id v90;
  uint64_t v91;
  NSObject *v92;
  _QWORD *p_isa;
  NSString v94;
  id v95;
  NSObject *v96;
  NSObject *v97;
  NSObject **v98;
  NSString v99;
  id v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  NSObject *v105;
  NSObject *v106;
  os_log_type_t v107;
  uint8_t *v108;
  NSObject **v109;
  NSObject *v110;
  const char *v111;
  id v112;
  uint64_t v113;
  NSObject *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  _QWORD *v120;
  uint64_t v121;
  void (*v122)(char *, uint64_t);
  void (*v123)(uint64_t, char *, uint64_t);
  uint64_t v124;
  NSString v125;
  id v126;
  NSObject *v127;
  NSObject *v128;
  NSObject **v129;
  NSString v130;
  id v131;
  NSObject *v132;
  NSObject *v133;
  NSObject **v134;
  NSString v135;
  NSObject *v136;
  uint64_t v137;
  uint64_t *v138;
  void (*v139)(uint64_t, char *, uint64_t);
  NSObject **v140;
  NSString v141;
  id v142;
  unint64_t v143;
  int v144;
  NSObject *v145;
  id v146;
  NSObject **v147;
  id v148;
  id v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  void (*v154)(char *, uint64_t);
  uint64_t *v155;
  NSObject *v156;
  uint64_t v157;
  NSObject *v158;
  void (*v159)(char *, char *, uint64_t);
  id v160;
  uint64_t (*v161)(void);
  char *v162;
  char *v163;
  uint64_t *v164;
  int v165;
  char *v166;
  char *v167;
  uint64_t v168;
  _QWORD *v169;
  _QWORD *v170;
  _QWORD *v171;
  NSObject *v172;
  uint64_t v173;
  uint64_t v174;
  id v175;
  NSObject *v176;
  _QWORD v177[2];
  uint64_t v178;

  v165 = a2;
  v5 = sub_1000080B4((uint64_t *)&unk_1002904F0);
  v7 = __chkstk_darwin(v5, v6);
  v163 = (char *)&v156 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v7, v9);
  v12 = (char *)&v156 - v11;
  __chkstk_darwin(v10, v13);
  v15 = (char *)&v156 - v14;
  v16 = type metadata accessor for UUID(0);
  v17 = *(_QWORD *)(v16 - 8);
  v19 = __chkstk_darwin(v16, v18);
  v162 = (char *)&v156 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __chkstk_darwin(v19, v21);
  v166 = (char *)&v156 - v23;
  __chkstk_darwin(v22, v24);
  v167 = (char *)&v156 - v25;
  v26 = (int *)type metadata accessor for CustodianRecord(0);
  v27 = (a3 + v26[7]);
  v27->isa = 0;
  v27[1].isa = 0;
  v172 = v27;
  v28 = (_QWORD *)(a3 + v26[8]);
  *v28 = 0;
  v28[1] = 0;
  v169 = v28;
  v29 = (_QWORD *)(a3 + v26[13]);
  *v29 = 0;
  v29[1] = 0;
  v170 = v29;
  v30 = (_QWORD *)(a3 + v26[14]);
  *v30 = 0;
  v30[1] = 0;
  v171 = v30;
  v31 = a3 + v26[15];
  *(_QWORD *)v31 = 0;
  v164 = (uint64_t *)v31;
  *(_BYTE *)(v31 + 8) = 1;
  v32 = a3 + v26[16];
  v173 = v17;
  v174 = v16;
  v33 = *(uint64_t (**)(void))(v17 + 56);
  v168 = v32;
  v161 = v33;
  v34 = v33();
  v175 = a1;
  v35 = CKRecord.recordType.getter(v34);
  v37 = v36;
  if (v35 == 0x6169646F74737543 && v36 == 0xEF64726F6365526ELL)
  {
    swift_bridgeObjectRelease(0xEF64726F6365526ELL);
  }
  else
  {
    v38 = _stringCompareWithSmolCheck(_:_:expecting:)(v35, v36, 0x6169646F74737543, 0xEF64726F6365526ELL, 0);
    swift_bridgeObjectRelease(v37);
    if ((v38 & 1) == 0)
    {
      type metadata accessor for AACustodianError(0);
      v67 = v66;
      v178 = -7005;
      v68 = sub_100005014((uint64_t)&_swiftEmptyArrayStorage);
      v69 = sub_100005150((unint64_t *)&qword_10028B640, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianError, (uint64_t)&unk_100218378);
      v70 = _BridgedStoredNSError.init(_:userInfo:)(&v176, &v178, v68, v67, v69);
      swift_willThrow(v70);

      goto LABEL_16;
    }
  }
  v39 = v175;
  v40 = objc_msgSend(v175, "recordID");
  v41 = objc_msgSend(v40, "recordName");

  v42 = static String._unconditionallyBridgeFromObjectiveC(_:)(v41);
  v44 = v43;

  UUID.init(uuidString:)(v42, v44);
  swift_bridgeObjectRelease(v44);
  v45 = v173;
  v46 = v174;
  v47 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v173 + 48);
  if (v47(v15, 1, v174) == 1)
  {
    sub_100004934((uint64_t)v15, (uint64_t *)&unk_1002904F0);
    type metadata accessor for AACustodianError(0);
    v49 = v48;
    v178 = -7005;
    v50 = sub_100005014((uint64_t)&_swiftEmptyArrayStorage);
    v51 = sub_100005150((unint64_t *)&qword_10028B640, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianError, (uint64_t)&unk_100218378);
    v52 = _BridgedStoredNSError.init(_:userInfo:)(&v176, &v178, v50, v49, v51);
    swift_willThrow(v52);

LABEL_16:
    v72 = v170;
    v71 = v171;
    v73 = v168;
    v74 = v169;
LABEL_17:
    v75 = v172;
LABEL_20:
    swift_bridgeObjectRelease(v75[1].isa);
    swift_bridgeObjectRelease(v74[1]);
    swift_bridgeObjectRelease(v72[1]);
    swift_bridgeObjectRelease(v71[1]);
    return sub_100004934(v73, (uint64_t *)&unk_1002904F0);
  }
  v159 = *(void (**)(char *, char *, uint64_t))(v45 + 32);
  v159(v167, v15, v46);
  v53 = objc_msgSend(v39, "encryptedValuesByKey");
  v54 = String._bridgeToObjectiveC()();
  v160 = v53;
  v55 = objc_msgSend(v53, "objectForKeyedSubscript:", v54);

  if (!v55
    || (v178 = (uint64_t)v55,
        v56 = sub_1000080B4(&qword_10028DB30),
        (swift_dynamicCast(&v176, &v178, v56, &type metadata for String, 6) & 1) == 0))
  {
LABEL_11:
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v58 = type metadata accessor for Logger(0);
    sub_100005288(v58, (uint64_t)qword_1002A89D8);
    v59 = v175;
    v60 = Logger.logObject.getter(v59);
    v61 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v60, v61))
    {
      v62 = (uint8_t *)swift_slowAlloc(12, -1);
      v63 = (NSObject **)swift_slowAlloc(8, -1);
      *(_DWORD *)v62 = 138412290;
      v176 = v59;
      v64 = v59;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v176, v177);
      *v63 = v59;

      _os_log_impl((void *)&_mh_execute_header, v60, v61, "Missing CustodianID - %@", v62, 0xCu);
      v65 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v63, 1, v65);
      swift_slowDealloc(v63, -1, -1);
      swift_slowDealloc(v62, -1, -1);
    }
    else
    {

      v60 = v59;
    }
    v72 = v170;
    v71 = v171;
    v73 = v168;
    v74 = v169;
    v75 = v172;

    type metadata accessor for AACustodianError(0);
    v77 = v76;
    v178 = -7005;
    v78 = sub_100005014((uint64_t)&_swiftEmptyArrayStorage);
    v79 = sub_100005150((unint64_t *)&qword_10028B640, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianError, (uint64_t)&unk_100218378);
    v80 = _BridgedStoredNSError.init(_:userInfo:)(&v176, &v178, v78, v77, v79);
    swift_willThrow(v80);
    swift_unknownObjectRelease(v160);

    (*(void (**)(char *, uint64_t))(v173 + 8))(v167, v174);
    goto LABEL_20;
  }
  v57 = v177[0];
  UUID.init(uuidString:)(v176, v177[0]);
  swift_bridgeObjectRelease(v57);
  if (v47(v12, 1, v46) == 1)
  {
    sub_100004934((uint64_t)v12, (uint64_t *)&unk_1002904F0);
    goto LABEL_11;
  }
  v82 = v166;
  v159(v166, v12, v46);
  v83 = String._bridgeToObjectiveC()();
  v84 = objc_msgSend(v160, "objectForKeyedSubscript:", v83);

  if (!v84 || (v178 = (uint64_t)v84, (swift_dynamicCast(&v176, &v178, v56, &type metadata for String, 6) & 1) == 0))
  {
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v104 = type metadata accessor for Logger(0);
    sub_100005288(v104, (uint64_t)qword_1002A89D8);
    v105 = v175;
    v106 = Logger.logObject.getter(v105);
    v107 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v106, v107))
    {
      v108 = (uint8_t *)swift_slowAlloc(12, -1);
      v109 = (NSObject **)swift_slowAlloc(8, -1);
      *(_DWORD *)v108 = 138412290;
      v176 = v105;
      v110 = v105;
      v82 = v166;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v176, v177);
      *v109 = v105;

      v111 = "Missing Handle - %@";
LABEL_43:
      _os_log_impl((void *)&_mh_execute_header, v106, v107, v111, v108, 0xCu);
      v115 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v109, 1, v115);
      swift_slowDealloc(v109, -1, -1);
      swift_slowDealloc(v108, -1, -1);
LABEL_45:
      v72 = v170;
      v71 = v171;
      v73 = v168;
      v74 = v169;

      type metadata accessor for AACustodianError(0);
      v117 = v116;
      v178 = -7005;
      v118 = sub_100005014((uint64_t)&_swiftEmptyArrayStorage);
      v119 = sub_100005150((unint64_t *)&qword_10028B640, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianError, (uint64_t)&unk_100218378);
      v120 = _BridgedStoredNSError.init(_:userInfo:)(&v176, &v178, v118, v117, v119);
      swift_willThrow(v120);
      swift_unknownObjectRelease(v160);

      v121 = v174;
      v122 = *(void (**)(char *, uint64_t))(v173 + 8);
      v122(v82, v174);
      v122(v167, v121);
      goto LABEL_17;
    }
LABEL_44:

    v106 = v105;
    goto LABEL_45;
  }
  v85 = v177[0];
  v158 = v176;
  v86 = String._bridgeToObjectiveC()();
  v87 = objc_msgSend(v160, "objectForKeyedSubscript:", v86);

  if (!v87
    || (v176 = v87, type metadata accessor for Status(0), (swift_dynamicCast(&v178, &v176, v56, v88, 6) & 1) == 0))
  {
    swift_bridgeObjectRelease(v85);
    v112 = v175;
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v113 = type metadata accessor for Logger(0);
    sub_100005288(v113, (uint64_t)qword_1002A89D8);
    v105 = v112;
    v106 = Logger.logObject.getter(v105);
    v107 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v106, v107))
    {
      v108 = (uint8_t *)swift_slowAlloc(12, -1);
      v109 = (NSObject **)swift_slowAlloc(8, -1);
      *(_DWORD *)v108 = 138412290;
      v176 = v105;
      v114 = v105;
      v82 = v166;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v176, v177);
      *v109 = v105;

      v111 = "Missing Status - %@";
      goto LABEL_43;
    }
    goto LABEL_44;
  }
  v157 = v178;
  v89 = String._bridgeToObjectiveC()();
  v90 = objc_msgSend(v160, "objectForKeyedSubscript:", v89);

  if (v90)
  {
    v178 = (uint64_t)v90;
    if ((swift_dynamicCast(&v176, &v178, v56, &type metadata for String, 6) & 1) != 0)
    {
      v91 = v177[0];
      v156 = v176;
      v92 = v85;
      p_isa = &v172->isa;
      swift_bridgeObjectRelease(v172[1].isa);
      *p_isa = v156;
      p_isa[1] = v91;
      v85 = v92;
    }
  }
  v94 = String._bridgeToObjectiveC()();
  v95 = objc_msgSend(v160, "objectForKeyedSubscript:", v94);

  if (v95)
  {
    v178 = (uint64_t)v95;
    if ((swift_dynamicCast(&v176, &v178, v56, &type metadata for String, 6) & 1) != 0)
    {
      v96 = v177[0];
      v172 = v176;
      v97 = v85;
      v98 = (NSObject **)v169;
      swift_bridgeObjectRelease(v169[1]);
      *v98 = v172;
      v98[1] = v96;
      v85 = v97;
    }
  }
  v99 = String._bridgeToObjectiveC()();
  v100 = objc_msgSend(v160, "objectForKeyedSubscript:", v99);

  if (v100)
  {
    v178 = (uint64_t)v100;
    if ((swift_dynamicCast(&v176, &v178, v56, &type metadata for String, 6) & 1) != 0)
    {
      v101 = v177[0];
      v102 = (uint64_t)v163;
      UUID.init(uuidString:)(v176, v177[0]);
      swift_bridgeObjectRelease(v101);
      v103 = v174;
      if (v47((char *)v102, 1, v174) == 1)
      {
        sub_100004934(v102, (uint64_t *)&unk_1002904F0);
      }
      else
      {
        v123 = (void (*)(uint64_t, char *, uint64_t))v159;
        v159(v162, (char *)v102, v103);
        v124 = v168;
        sub_100004934(v168, (uint64_t *)&unk_1002904F0);
        v123(v124, v162, v103);
        ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v161)(v124, 0, 1, v103);
      }
    }
  }
  v125 = String._bridgeToObjectiveC()();
  v126 = objc_msgSend(v160, "objectForKeyedSubscript:", v125);

  if (v126)
  {
    v178 = (uint64_t)v126;
    if ((swift_dynamicCast(&v176, &v178, v56, &type metadata for String, 6) & 1) != 0)
    {
      v127 = v176;
      v128 = v177[0];
      v129 = (NSObject **)v170;
      swift_bridgeObjectRelease(v170[1]);
      *v129 = v127;
      v129[1] = v128;
    }
  }
  v130 = String._bridgeToObjectiveC()();
  v131 = objc_msgSend(v160, "objectForKeyedSubscript:", v130);

  if (v131)
  {
    v178 = (uint64_t)v131;
    if ((swift_dynamicCast(&v176, &v178, v56, &type metadata for String, 6) & 1) != 0)
    {
      v132 = v176;
      v133 = v177[0];
      v134 = (NSObject **)v171;
      swift_bridgeObjectRelease(v171[1]);
      *v134 = v132;
      v134[1] = v133;
    }
  }
  v135 = String._bridgeToObjectiveC()();
  v136 = objc_msgSend(v160, "objectForKeyedSubscript:", v135);

  v137 = v174;
  if (v136)
  {
    v176 = v136;
    if ((swift_dynamicCast(&v178, &v176, v56, &type metadata for UInt, 6) & 1) != 0)
    {
      v138 = v164;
      *v164 = v178;
      *((_BYTE *)v138 + 8) = 0;
    }
  }
  v139 = *(void (**)(uint64_t, char *, uint64_t))(v173 + 16);
  v139(a3, v167, v137);
  v139(a3 + v26[5], v82, v137);
  v140 = (NSObject **)(a3 + v26[6]);
  *v140 = v158;
  v140[1] = v85;
  *(_QWORD *)(a3 + v26[9]) = v157;
  v141 = String._bridgeToObjectiveC()();
  v142 = objc_msgSend(v160, "objectForKeyedSubscript:", v141);

  v143 = 0xF000000000000000;
  if (v142)
  {
    v178 = (uint64_t)v142;
    v144 = swift_dynamicCast(&v176, &v178, v56, &type metadata for Data, 6);
    v145 = v176;
    if (v144)
      v143 = v177[0];
    else
      v145 = 0;
  }
  else
  {
    v145 = 0;
  }
  v146 = v175;
  v147 = (NSObject **)(a3 + v26[10]);
  *v147 = v145;
  v147[1] = v143;
  v148 = objc_msgSend(objc_allocWithZone((Class)NSKeyedArchiver), "initRequiringSecureCoding:", 1);
  objc_msgSend(v146, "encodeSystemFieldsWithCoder:", v148);
  objc_msgSend(v148, "finishEncoding");
  v149 = objc_msgSend(v148, "encodedData");
  v150 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v149);
  v152 = v151;
  swift_unknownObjectRelease(v160);

  v153 = v174;
  v154 = *(void (**)(char *, uint64_t))(v173 + 8);
  v154(v82, v174);
  result = ((uint64_t (*)(char *, uint64_t))v154)(v167, v153);
  v155 = (uint64_t *)(a3 + v26[11]);
  *v155 = v150;
  v155[1] = v152;
  *(_BYTE *)(a3 + v26[12]) = v165 & 1;
  return result;
}

uint64_t sub_1000950CC(id *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t ObjectType;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  char v36;
  uint64_t v37;
  __int128 v38;
  uint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  char v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t (*v49)(uint64_t, uint64_t, uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t v69;
  char v70;
  uint64_t *v71;
  uint64_t v72;
  char v73;
  char v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  int *v79;
  __int128 v80;
  __int128 v81;
  void *v82;

  v2 = v1;
  v4 = sub_1000080B4((uint64_t *)&unk_1002904F0);
  v6 = __chkstk_darwin(v4, v5);
  v76 = (uint64_t)&v76 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6, v8);
  v77 = (char *)&v76 - v9;
  v10 = objc_msgSend(*a1, "encryptedValuesByKey");
  ObjectType = swift_getObjectType(v10);
  CKRecordKeyValueSetting.subscript.getter(&v80, 0x6169646F74737563, 0xEB0000000044496ELL);
  v12 = *((_QWORD *)&v80 + 1);
  v13 = v80;
  v79 = (int *)type metadata accessor for CustodianRecord(0);
  v14 = UUID.uuidString.getter(v79);
  v16 = v15;
  if (!v12)
  {
    v17 = swift_bridgeObjectRelease(v15);
    goto LABEL_7;
  }
  if (v13 != v14 || v12 != v15)
  {
    v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v13, v12, v14, v15, 0);
    swift_bridgeObjectRelease(v12);
    v17 = swift_bridgeObjectRelease(v16);
    if ((v18 & 1) != 0)
      goto LABEL_8;
LABEL_7:
    v19 = UUID.uuidString.getter(v17);
    *((_QWORD *)&v81 + 1) = &type metadata for String;
    v82 = &protocol witness table for String;
    *(_QWORD *)&v80 = v19;
    *((_QWORD *)&v80 + 1) = v20;
    CKRecordKeyValueSetting.subscript.setter(&v80, 0x6169646F74737563, 0xEB0000000044496ELL, ObjectType);
    goto LABEL_8;
  }
  swift_bridgeObjectRelease(v12);
  swift_bridgeObjectRelease(v16);
LABEL_8:
  CKRecordKeyValueSetting.subscript.getter(&v80, 0x656C646E6168, 0xE600000000000000);
  v21 = *((_QWORD *)&v80 + 1);
  v22 = (unint64_t *)(v1 + v79[6]);
  v24 = *v22;
  v23 = v22[1];
  v78 = v2;
  if (!*((_QWORD *)&v80 + 1))
    goto LABEL_12;
  if (v80 == __PAIR128__(v23, v24))
  {
    swift_bridgeObjectRelease(*((_QWORD *)&v80 + 1));
    goto LABEL_13;
  }
  v25 = _stringCompareWithSmolCheck(_:_:expecting:)(v80, *((_QWORD *)&v80 + 1), v24, v23, 0);
  swift_bridgeObjectRelease(v21);
  if ((v25 & 1) == 0)
  {
LABEL_12:
    *((_QWORD *)&v81 + 1) = &type metadata for String;
    v82 = &protocol witness table for String;
    *(_QWORD *)&v80 = v24;
    *((_QWORD *)&v80 + 1) = v23;
    swift_bridgeObjectRetain(v23);
    CKRecordKeyValueSetting.subscript.setter(&v80, 0x656C646E6168, 0xE600000000000000, ObjectType);
  }
LABEL_13:
  CKRecordKeyValueSetting.subscript.getter(&v80, 0xD000000000000012, 0x800000010020B130);
  v26 = *((_QWORD *)&v80 + 1);
  v27 = (unint64_t *)(v78 + v79[7]);
  v29 = *v27;
  v28 = v27[1];
  if (*((_QWORD *)&v80 + 1))
  {
    if (!v28)
    {
      swift_bridgeObjectRelease(*((_QWORD *)&v80 + 1));
      v82 = 0;
      v80 = 0u;
      v81 = 0u;
LABEL_22:
      swift_bridgeObjectRetain(v28);
      CKRecordKeyValueSetting.subscript.setter(&v80, 0xD000000000000012, 0x800000010020B130, ObjectType);
      goto LABEL_23;
    }
    if (v80 == __PAIR128__(v28, v29))
    {
      swift_bridgeObjectRelease(*((_QWORD *)&v80 + 1));
      goto LABEL_23;
    }
    v30 = _stringCompareWithSmolCheck(_:_:expecting:)(v80, *((_QWORD *)&v80 + 1), *v27, v27[1], 0);
    swift_bridgeObjectRelease(v26);
    if ((v30 & 1) == 0)
    {
LABEL_21:
      *((_QWORD *)&v81 + 1) = &type metadata for String;
      v82 = &protocol witness table for String;
      *(_QWORD *)&v80 = v29;
      *((_QWORD *)&v80 + 1) = v28;
      goto LABEL_22;
    }
  }
  else if (v28)
  {
    goto LABEL_21;
  }
LABEL_23:
  CKRecordKeyValueSetting.subscript.getter(&v80, 0xD000000000000011, 0x800000010020B150);
  v31 = *((_QWORD *)&v80 + 1);
  v32 = v78;
  v33 = (unint64_t *)(v78 + v79[8]);
  v35 = *v33;
  v34 = v33[1];
  if (!*((_QWORD *)&v80 + 1))
  {
    if (!v34)
      goto LABEL_33;
LABEL_31:
    *((_QWORD *)&v81 + 1) = &type metadata for String;
    v82 = &protocol witness table for String;
    *(_QWORD *)&v80 = v35;
    *((_QWORD *)&v80 + 1) = v34;
    goto LABEL_32;
  }
  if (!v34)
  {
    swift_bridgeObjectRelease(*((_QWORD *)&v80 + 1));
    v82 = 0;
    v80 = 0u;
    v81 = 0u;
LABEL_32:
    swift_bridgeObjectRetain(v34);
    CKRecordKeyValueSetting.subscript.setter(&v80, 0xD000000000000011, 0x800000010020B150, ObjectType);
    goto LABEL_33;
  }
  if (v80 != __PAIR128__(v34, v35))
  {
    v36 = _stringCompareWithSmolCheck(_:_:expecting:)(v80, *((_QWORD *)&v80 + 1), *v33, v33[1], 0);
    swift_bridgeObjectRelease(v31);
    if ((v36 & 1) != 0)
      goto LABEL_33;
    goto LABEL_31;
  }
  swift_bridgeObjectRelease(*((_QWORD *)&v80 + 1));
LABEL_33:
  CKRecordKeyValueSetting.subscript.getter(&v80, 0x737574617473, 0xE600000000000000);
  v37 = *(_QWORD *)(v32 + v79[9]);
  if ((BYTE8(v80) & 1) != 0 || (_QWORD)v80 != v37)
  {
    *((_QWORD *)&v81 + 1) = &type metadata for Int;
    v82 = &protocol witness table for Int;
    *(_QWORD *)&v80 = v37;
    CKRecordKeyValueSetting.subscript.setter(&v80, 0x737574617473, 0xE600000000000000, ObjectType);
  }
  CKRecordKeyValueSetting.subscript.getter(&v80, 0x676E697070617277, 0xEE00434B5279654BLL);
  v38 = v80;
  v39 = (uint64_t *)(v32 + v79[10]);
  v41 = *v39;
  v40 = v39[1];
  if (*((_QWORD *)&v80 + 1) >> 60 == 15)
  {
    if (v40 >> 60 == 15)
    {
      v42 = (uint64_t)v77;
      goto LABEL_45;
    }
    sub_100014534(v41, v40);
    sub_1000144D8(v38, *((unint64_t *)&v38 + 1));
    sub_1000144D8(v41, v40);
    v42 = (uint64_t)v77;
LABEL_43:
    *((_QWORD *)&v81 + 1) = &type metadata for Data;
    v82 = &protocol witness table for Data;
    *(_QWORD *)&v80 = v41;
    *((_QWORD *)&v80 + 1) = v40;
    goto LABEL_44;
  }
  sub_100014534(v41, v40);
  if (v40 >> 60 != 15)
  {
    sub_100014534(v38, *((unint64_t *)&v38 + 1));
    sub_10000EA4C(v38, *((uint64_t *)&v38 + 1));
    v44 = v43;
    sub_1000144D8(v41, v40);
    sub_1000144D8(v38, *((unint64_t *)&v38 + 1));
    sub_1000144D8(v38, *((unint64_t *)&v38 + 1));
    v42 = (uint64_t)v77;
    if ((v44 & 1) != 0)
      goto LABEL_45;
    goto LABEL_43;
  }
  sub_1000144D8(v38, *((unint64_t *)&v38 + 1));
  sub_1000144D8(v41, v40);
  v82 = 0;
  v80 = 0u;
  v81 = 0u;
  v42 = (uint64_t)v77;
LABEL_44:
  sub_100014534(v41, v40);
  CKRecordKeyValueSetting.subscript.setter(&v80, 0x676E697070617277, 0xEE00434B5279654BLL, ObjectType);
LABEL_45:
  CKRecordKeyValueSetting.subscript.getter(&v80, 0x646F74737543746FLL, 0xED000044496E6169);
  v45 = v80;
  v46 = v32 + v79[16];
  sub_100024A20(v46, v42, (uint64_t *)&unk_1002904F0);
  v47 = type metadata accessor for UUID(0);
  v48 = *(_QWORD *)(v47 - 8);
  v49 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v48 + 48);
  v50 = v49(v42, 1, v47);
  if ((_DWORD)v50 == 1)
  {
    sub_100004934(v42, (uint64_t *)&unk_1002904F0);
    if (!*((_QWORD *)&v45 + 1))
      goto LABEL_59;
    goto LABEL_52;
  }
  v51 = UUID.uuidString.getter(v50);
  v52 = v42;
  v53 = v51;
  v55 = v54;
  (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v52, v47);
  if (!*((_QWORD *)&v45 + 1))
  {
    if (!v55)
      goto LABEL_59;
    goto LABEL_54;
  }
  if (!v55)
  {
LABEL_52:
    v55 = *((_QWORD *)&v45 + 1);
LABEL_54:
    swift_bridgeObjectRelease(v55);
LABEL_55:
    v56 = v76;
    sub_100024A20(v46, v76, (uint64_t *)&unk_1002904F0);
    v57 = v49(v56, 1, v47);
    if ((_DWORD)v57 == 1)
    {
      sub_100004934(v56, (uint64_t *)&unk_1002904F0);
      v80 = 0u;
      v81 = 0u;
      v82 = 0;
    }
    else
    {
      v58 = UUID.uuidString.getter(v57);
      *((_QWORD *)&v81 + 1) = &type metadata for String;
      v82 = &protocol witness table for String;
      *(_QWORD *)&v80 = v58;
      *((_QWORD *)&v80 + 1) = v59;
      (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v56, v47);
    }
    CKRecordKeyValueSetting.subscript.setter(&v80, 0x646F74737543746FLL, 0xED000044496E6169, ObjectType);
    goto LABEL_59;
  }
  if (v45 == __PAIR128__(v55, v53))
  {
    swift_bridgeObjectRelease(*((_QWORD *)&v45 + 1));
    swift_bridgeObjectRelease(v55);
    goto LABEL_59;
  }
  v75 = _stringCompareWithSmolCheck(_:_:expecting:)(v45, *((_QWORD *)&v45 + 1), v53, v55, 0);
  swift_bridgeObjectRelease(*((_QWORD *)&v45 + 1));
  swift_bridgeObjectRelease(v55);
  if ((v75 & 1) == 0)
    goto LABEL_55;
LABEL_59:
  CKRecordKeyValueSetting.subscript.getter(&v80, 0xD000000000000011, 0x800000010020B170);
  v60 = *((_QWORD *)&v80 + 1);
  v61 = (unint64_t *)(v78 + v79[13]);
  v63 = *v61;
  v62 = v61[1];
  if (*((_QWORD *)&v80 + 1))
  {
    if (!v62)
    {
      swift_bridgeObjectRelease(*((_QWORD *)&v80 + 1));
      v82 = 0;
      v80 = 0u;
      v81 = 0u;
LABEL_68:
      swift_bridgeObjectRetain(v62);
      CKRecordKeyValueSetting.subscript.setter(&v80, 0xD000000000000011, 0x800000010020B170, ObjectType);
      goto LABEL_69;
    }
    if (v80 == __PAIR128__(v62, v63))
    {
      swift_bridgeObjectRelease(*((_QWORD *)&v80 + 1));
      goto LABEL_69;
    }
    v64 = _stringCompareWithSmolCheck(_:_:expecting:)(v80, *((_QWORD *)&v80 + 1), *v61, v61[1], 0);
    swift_bridgeObjectRelease(v60);
    if ((v64 & 1) == 0)
    {
LABEL_67:
      *((_QWORD *)&v81 + 1) = &type metadata for String;
      v82 = &protocol witness table for String;
      *(_QWORD *)&v80 = v63;
      *((_QWORD *)&v80 + 1) = v62;
      goto LABEL_68;
    }
  }
  else if (v62)
  {
    goto LABEL_67;
  }
LABEL_69:
  CKRecordKeyValueSetting.subscript.getter(&v80, 0x6144726961706572, 0xEA00000000006574);
  v65 = *((_QWORD *)&v80 + 1);
  v66 = v78;
  v67 = (unint64_t *)(v78 + v79[14]);
  v69 = *v67;
  v68 = v67[1];
  if (*((_QWORD *)&v80 + 1))
  {
    if (!v68)
    {
      swift_bridgeObjectRelease(*((_QWORD *)&v80 + 1));
      v82 = 0;
      v80 = 0u;
      v81 = 0u;
LABEL_78:
      swift_bridgeObjectRetain(v68);
      CKRecordKeyValueSetting.subscript.setter(&v80, 0x6144726961706572, 0xEA00000000006574, ObjectType);
      goto LABEL_79;
    }
    if (v80 == __PAIR128__(v68, v69))
    {
      swift_bridgeObjectRelease(*((_QWORD *)&v80 + 1));
      goto LABEL_79;
    }
    v70 = _stringCompareWithSmolCheck(_:_:expecting:)(v80, *((_QWORD *)&v80 + 1), *v67, v67[1], 0);
    swift_bridgeObjectRelease(v65);
    if ((v70 & 1) == 0)
    {
LABEL_77:
      *((_QWORD *)&v81 + 1) = &type metadata for String;
      v82 = &protocol witness table for String;
      *(_QWORD *)&v80 = v69;
      *((_QWORD *)&v80 + 1) = v68;
      goto LABEL_78;
    }
  }
  else if (v68)
  {
    goto LABEL_77;
  }
LABEL_79:
  CKRecordKeyValueSetting.subscript.getter(&v80, 0x6F43726961706572, 0xEB00000000746E75);
  v71 = (uint64_t *)(v66 + v79[15]);
  v72 = *v71;
  v73 = *((_BYTE *)v71 + 8);
  if ((BYTE8(v80) & 1) != 0)
  {
    if ((v73 & 1) != 0)
      return swift_unknownObjectRelease(v10);
    goto LABEL_85;
  }
  if ((v73 & 1) != 0)
  {
    v82 = 0;
    v80 = 0u;
    v81 = 0u;
LABEL_86:
    CKRecordKeyValueSetting.subscript.setter(&v80, 0x6F43726961706572, 0xEB00000000746E75, ObjectType);
    return swift_unknownObjectRelease(v10);
  }
  if ((_QWORD)v80 != v72)
  {
LABEL_85:
    *((_QWORD *)&v81 + 1) = &type metadata for UInt;
    v82 = &protocol witness table for UInt;
    *(_QWORD *)&v80 = v72;
    goto LABEL_86;
  }
  return swift_unknownObjectRelease(v10);
}

uint64_t sub_100095B94(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100095BC8 + 4 * aP[a1]))(0x444964726F636572, 0xE800000000000000);
}

uint64_t sub_100095BC8()
{
  return 0x6169646F74737563;
}

uint64_t sub_100095BE8()
{
  return 0x646F74737543746FLL;
}

uint64_t sub_100095C0C()
{
  return 0x656C646E6168;
}

unint64_t sub_100095C20()
{
  return 0xD000000000000012;
}

uint64_t sub_100095CD0()
{
  return 0x6144726961706572;
}

uint64_t sub_100095CEC()
{
  return 0x6F43726961706572;
}

uint64_t sub_100095D0C()
{
  unsigned __int8 *v0;

  return sub_100095B94(*v0);
}

uint64_t sub_100095D14@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_100098174(a1, a2);
  *a3 = result;
  return result;
}

void sub_100095D38(_BYTE *a1@<X8>)
{
  *a1 = 13;
}

uint64_t sub_100095D44(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100096CFC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100095D6C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_100096CFC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100095D94@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  void (*v28)(void);
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  char *v37;
  int *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  unint64_t v50;
  _QWORD *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v64;
  void (*v65)(char *, _QWORD *, uint64_t);
  void (*v66)(void);
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  _QWORD *v71;
  uint64_t v72;
  int *v73;
  _QWORD *v74;
  char *v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t *v78;
  char *v79;
  uint64_t *v80;
  uint64_t *v81;
  _OWORD v82[2];
  char v83;

  v68 = a2;
  v3 = sub_1000080B4((uint64_t *)&unk_1002904F0);
  __chkstk_darwin(v3, v4);
  v69 = (uint64_t)&v64 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  v9 = __chkstk_darwin(v6, v8);
  v70 = (char *)&v64 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9, v11);
  v71 = (uint64_t *)((char *)&v64 - v12);
  v13 = (_QWORD *)sub_1000080B4(&qword_10028F0B0);
  v14 = *(v13 - 1);
  __chkstk_darwin(v13, v15);
  v17 = (char *)&v64 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for CustodianRecord(0);
  v20 = (int *)__chkstk_darwin(v18, v19);
  v22 = (char *)&v64 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = &v22[v20[7]];
  *(_QWORD *)v23 = 0;
  *((_QWORD *)v23 + 1) = 0;
  v81 = (uint64_t *)v23;
  v24 = &v22[v20[8]];
  *(_QWORD *)v24 = 0;
  *((_QWORD *)v24 + 1) = 0;
  v79 = v22;
  v80 = (uint64_t *)v24;
  v25 = &v22[v20[13]];
  *(_QWORD *)v25 = 0;
  *((_QWORD *)v25 + 1) = 0;
  v77 = (uint64_t *)v25;
  v26 = &v22[v20[14]];
  *(_QWORD *)v26 = 0;
  *((_QWORD *)v26 + 1) = 0;
  v78 = (uint64_t *)v26;
  v27 = &v22[v20[15]];
  *(_QWORD *)v27 = 0;
  v27[8] = 1;
  v72 = v7;
  v73 = v20;
  v28 = *(void (**)(void))(v7 + 56);
  v75 = &v22[v20[16]];
  v28();
  v29 = a1[3];
  v30 = a1[4];
  v74 = a1;
  sub_10000732C(a1, v29);
  v31 = sub_100096CFC();
  v32 = v76;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for CustodianRecord.CodingKeys, &type metadata for CustodianRecord.CodingKeys, v31, v29, v30);
  if (v32)
  {
    sub_100006F58(v74);
    v47 = (uint64_t)v75;
    swift_bridgeObjectRelease(v81[1]);
    swift_bridgeObjectRelease(v80[1]);
    swift_bridgeObjectRelease(v77[1]);
    swift_bridgeObjectRelease(v78[1]);
    return sub_100004934(v47, (uint64_t *)&unk_1002904F0);
  }
  else
  {
    v33 = v70;
    v66 = v28;
    v67 = (uint64_t *)v27;
    v76 = v14;
    LOBYTE(v82[0]) = 0;
    v34 = sub_100005150((unint64_t *)&unk_10028BBB0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v35 = v71;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v71, v6, v82, v13, v6, v34);
    v36 = (uint64_t)v79;
    v65 = *(void (**)(char *, _QWORD *, uint64_t))(v72 + 32);
    v65(v79, v35, v6);
    LOBYTE(v82[0]) = 1;
    v71 = v13;
    v37 = v17;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v33, v6, v82, v13, v6, v34);
    v38 = v73;
    v64 = v34;
    v65((char *)(v36 + v73[5]), v33, v6);
    LOBYTE(v82[0]) = 3;
    v39 = KeyedDecodingContainer.decode(_:forKey:)(v82, v71);
    v40 = v36;
    v41 = (uint64_t *)(v36 + v38[6]);
    *v41 = v39;
    v41[1] = v42;
    LOBYTE(v82[0]) = 4;
    v43 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v82, v71);
    v44 = v81;
    *v81 = v43;
    v44[1] = v45;
    LOBYTE(v82[0]) = 5;
    v46 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v82, v71);
    v48 = v80;
    *v80 = v46;
    v48[1] = v49;
    LOBYTE(v82[0]) = 6;
    *(_QWORD *)(v36 + v38[9]) = KeyedDecodingContainer.decode(_:forKey:)(v82, v71);
    v83 = 7;
    v50 = sub_10000F40C();
    v51 = v71;
    v52 = v50;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&type metadata for Data, &v83, v71, &type metadata for Data, v50);
    *(_OWORD *)(v40 + v38[10]) = v82[0];
    v83 = 8;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v82, &type metadata for Data, &v83, v51, &type metadata for Data, v52);
    *(_OWORD *)(v40 + v38[11]) = v82[0];
    LOBYTE(v82[0]) = 9;
    *(_BYTE *)(v40 + v38[12]) = KeyedDecodingContainer.decode(_:forKey:)(v82, v51) & 1;
    LOBYTE(v82[0]) = 10;
    v53 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v82, v51);
    v54 = v77;
    *v77 = v53;
    v54[1] = v55;
    LOBYTE(v82[0]) = 11;
    v56 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v82, v51);
    v57 = v78;
    *v78 = v56;
    v57[1] = v58;
    LOBYTE(v82[0]) = 12;
    v59 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v82, v51);
    v61 = v67;
    *v67 = v59;
    *((_BYTE *)v61 + 8) = v60 & 1;
    LOBYTE(v82[0]) = 2;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v6, v82, v51, v6, v64);
    (*(void (**)(char *, _QWORD *))(v76 + 8))(v37, v51);
    sub_100013AEC(v69, (uint64_t)v75);
    v62 = (uint64_t)v79;
    sub_10002A5C0((uint64_t)v79, v68);
    sub_100006F58(v74);
    return sub_10002A604(v62);
  }
}

uint64_t sub_10009655C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  unint64_t v40;
  __int128 v41;
  char v42;

  v3 = v1;
  v5 = sub_1000080B4(&qword_10028F0C0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  v9 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a1[3];
  v11 = a1[4];
  sub_10000732C(a1, v10);
  v12 = sub_100096CFC();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for CustodianRecord.CodingKeys, &type metadata for CustodianRecord.CodingKeys, v12, v10, v11);
  LOBYTE(v41) = 0;
  v13 = type metadata accessor for UUID(0);
  v14 = sub_100005150((unint64_t *)&unk_10028DC20, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v3, &v41, v5, v13, v14);
  if (!v2)
  {
    v15 = (int *)type metadata accessor for CustodianRecord(0);
    v16 = v3 + v15[5];
    LOBYTE(v41) = 1;
    KeyedEncodingContainer.encode<A>(_:forKey:)(v16, &v41, v5, v13, v14);
    v17 = (uint64_t *)(v3 + v15[6]);
    v18 = *v17;
    v19 = v17[1];
    LOBYTE(v41) = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v18, v19, &v41, v5);
    v20 = (uint64_t *)(v3 + v15[7]);
    v21 = *v20;
    v22 = v20[1];
    LOBYTE(v41) = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v21, v22, &v41, v5);
    v23 = (uint64_t *)(v3 + v15[8]);
    v24 = *v23;
    v25 = v23[1];
    LOBYTE(v41) = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v24, v25, &v41, v5);
    v26 = *(_QWORD *)(v3 + v15[9]);
    LOBYTE(v41) = 6;
    KeyedEncodingContainer.encode(_:forKey:)(v26, &v41, v5);
    v41 = *(_OWORD *)(v3 + v15[10]);
    v42 = 7;
    v40 = sub_10000F4D8();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v41, &v42, v5, &type metadata for Data, v40);
    v41 = *(_OWORD *)(v3 + v15[11]);
    v42 = 8;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v41, &v42, v5, &type metadata for Data, v40);
    v27 = *(unsigned __int8 *)(v3 + v15[12]);
    LOBYTE(v41) = 9;
    KeyedEncodingContainer.encode(_:forKey:)(v27, &v41, v5);
    v28 = (uint64_t *)(v3 + v15[13]);
    v29 = *v28;
    v30 = v28[1];
    LOBYTE(v41) = 10;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v29, v30, &v41, v5);
    v31 = (uint64_t *)(v3 + v15[14]);
    v32 = *v31;
    v33 = v31[1];
    LOBYTE(v41) = 11;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v32, v33, &v41, v5);
    v34 = (uint64_t *)(v3 + v15[15]);
    v35 = *v34;
    v36 = *((unsigned __int8 *)v34 + 8);
    LOBYTE(v41) = 12;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v35, v36, &v41, v5);
    v37 = v3 + v15[16];
    LOBYTE(v41) = 2;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v37, &v41, v5, v13, v14);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

BOOL sub_1000968FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  NSString v9;
  id v10;
  id v11;
  id v12;
  NSString v13;
  id v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  char v39;
  char v40;
  void *v41;

  v1 = v0;
  v2 = type metadata accessor for ContactsHelper(0);
  v3 = swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  v4 = sub_1000080B4((uint64_t *)&unk_100291CA0);
  Dependency.init(dependencyId:config:)(0, 0, 0, v4);
  v5 = (int *)type metadata accessor for CustodianRecord(0);
  v6 = *(_QWORD *)(v0 + v5[6] + 8);
  v7 = sub_1000080B4((uint64_t *)&unk_10028F080);
  Dependency.wrappedValue.getter(&v41, v7);
  v8 = v41;
  v9 = String._bridgeToObjectiveC()();
  v10 = objc_msgSend(v8, "contactForHandle:", v9);

  swift_unknownObjectRelease(v8);
  if (v10)
  {
    v11 = objc_allocWithZone((Class)AALocalContactInfo);
    swift_bridgeObjectRetain(v6);
    v12 = v10;
    v13 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v6);
    v14 = objc_msgSend(v11, "initWithHandle:contact:", v13, v12);
    swift_release(v3);

  }
  else
  {
    swift_release(v3);
    v14 = 0;
  }
  if ((sub_100093B90() & 1) == 0)
    goto LABEL_21;
  v15 = (uint64_t *)(v1 + v5[8]);
  v16 = *v15;
  v17 = v15[1];
  if (v17)
  {
    sub_10006AF30(*v15, v15[1]);
    if (v18)
    {
      v19 = v18;
LABEL_8:
      swift_bridgeObjectRelease(v19);
LABEL_21:

      return 0;
    }
  }
  if (!v14)
    return 0;
  v14 = v14;
  v20 = objc_msgSend(v14, "firstName");
  if (!v20)
  {
LABEL_20:

    goto LABEL_21;
  }
  v21 = v20;
  v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
  v24 = v23;

  v25 = sub_10006AF30(v22, v24);
  v27 = v26;

  swift_bridgeObjectRelease(v24);
  if (!v27)
    goto LABEL_21;
  v14 = v14;
  v28 = objc_msgSend(v14, "lastName");
  if (!v28)
  {
    swift_bridgeObjectRelease(v27);
    goto LABEL_20;
  }
  v29 = v28;
  v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
  v32 = v31;

  v33 = sub_10006AF30(v30, v32);
  v35 = v34;

  swift_bridgeObjectRelease(v32);
  if (!v35)
  {
LABEL_18:

    swift_bridgeObjectRelease(v27);
    return 0;
  }
  v36 = (_QWORD *)(v1 + v5[7]);
  v37 = v36[1];
  if (v37)
  {
    if (*v36 == v25 && v37 == v27)
    {
      swift_bridgeObjectRelease(v35);
      goto LABEL_18;
    }
    v39 = _stringCompareWithSmolCheck(_:_:expecting:)(*v36, v37, v25, v27, 0);
    swift_bridgeObjectRelease(v27);
    if ((v39 & 1) != 0)
    {
LABEL_29:
      v19 = v35;
      goto LABEL_8;
    }
  }
  else
  {
    swift_bridgeObjectRelease(v27);
  }
  if (!v17)
  {
    swift_bridgeObjectRelease(v35);

    return 1;
  }
  if (v16 == v33 && v17 == v35)
    goto LABEL_29;
  v40 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v17, v33, v35, 0);
  swift_bridgeObjectRelease(v35);

  return (v40 & 1) == 0;
}

uint64_t sub_100096C3C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100095D94(a1, a2);
}

uint64_t sub_100096C50(_QWORD *a1)
{
  return sub_10009655C(a1);
}

uint64_t sub_100096C64(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_100005150((unint64_t *)&unk_10028F090, type metadata accessor for CustodianRecord, (uint64_t)&unk_10021B188);
  result = sub_100005150(&qword_10028D5D8, type metadata accessor for CustodianRecord, (uint64_t)&unk_10021B160);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t sub_100096CC0(uint64_t a1)
{
  uint64_t result;

  result = sub_100005150((unint64_t *)&unk_10028F0A0, type metadata accessor for CustodianRecord, (uint64_t)&unk_10021B1B0);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100096CFC()
{
  unint64_t result;

  result = qword_10028F0B8;
  if (!qword_10028F0B8)
  {
    result = swift_getWitnessTable(&unk_10021B370, &type metadata for CustodianRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10028F0B8);
  }
  return result;
}

id sub_100096D40(uint64_t a1, int a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int *v14;
  NSString v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  __n128 v24;
  uint64_t v25;
  void *v26;
  Class v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  NSString v31;
  uint64_t v32;
  uint64_t v33;
  Class v34;
  uint64_t v35;
  uint64_t v36;
  NSString v37;
  uint64_t v38;
  uint64_t v39;
  NSString v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  Class v44;
  void *v45;
  void *v46;
  void *v47;
  id v48;
  uint64_t v50;
  NSString v51;
  NSString v52;
  uint64_t v53;
  NSString v54;
  Class isa;
  uint64_t v56;
  int v57;
  int v58;
  uint64_t v59;

  v59 = a4;
  v57 = a3;
  v58 = a2;
  v5 = sub_1000080B4((uint64_t *)&unk_1002904F0);
  __chkstk_darwin(v5, v6);
  v8 = (char *)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for PersonNameComponents(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  v13 = (char *)&v51 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (int *)type metadata accessor for CustodianRecord(0);
  isa = UUID._bridgeToObjectiveC()().super.isa;
  v53 = *(_QWORD *)(a1 + v14[9]);
  v15 = String._bridgeToObjectiveC()();
  v54 = v15;
  v16 = (uint64_t *)(a1 + v14[7]);
  v17 = *v16;
  v18 = v16[1];
  if (v18)
  {
    swift_bridgeObjectRetain(v16[1]);
    v52 = String._bridgeToObjectiveC()();
    v15 = (NSString)swift_bridgeObjectRelease(v18);
  }
  else
  {
    v52 = 0;
  }
  v19 = (uint64_t *)(a1 + v14[8]);
  v20 = *v19;
  v21 = v19[1];
  if (v21)
  {
    swift_bridgeObjectRetain(v19[1]);
    v51 = String._bridgeToObjectiveC()();
    v15 = (NSString)swift_bridgeObjectRelease(v21);
  }
  else
  {
    v51 = 0;
  }
  PersonNameComponents.init()(v15);
  if (v18)
    v17 = sub_10006AF30(v17, v18);
  else
    v23 = 0;
  PersonNameComponents.givenName.setter(v17, v23, v22);
  if (v21)
    v20 = sub_10006AF30(v20, v21);
  else
    v25 = 0;
  PersonNameComponents.familyName.setter(v20, v25, v24);
  v26 = (void *)objc_opt_self(NSPersonNameComponentsFormatter);
  v27 = PersonNameComponents._bridgeToObjectiveC()().super.isa;
  v28 = objc_msgSend(v26, "localizedStringFromPersonNameComponents:style:options:", v27, 0, 0);

  static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
  v30 = v29;

  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  v31 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v30);
  sub_100024A20(a1 + v14[16], (uint64_t)v8, (uint64_t *)&unk_1002904F0);
  v32 = type metadata accessor for UUID(0);
  v33 = *(_QWORD *)(v32 - 8);
  v34 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v8, 1, v32) != 1)
  {
    v34 = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v33 + 8))(v8, v32);
  }
  v35 = a1 + v14[13];
  v36 = *(_QWORD *)(v35 + 8);
  if (v36)
  {
    swift_bridgeObjectRetain(*(_QWORD *)(v35 + 8));
    v37 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v36);
  }
  else
  {
    v37 = 0;
  }
  v38 = a1 + v14[14];
  v39 = *(_QWORD *)(v38 + 8);
  if (v39)
  {
    swift_bridgeObjectRetain(*(_QWORD *)(v38 + 8));
    v40 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v39);
  }
  else
  {
    v40 = 0;
  }
  v41 = a1 + v14[15];
  if (*(_BYTE *)(v41 + 8))
    v42 = 0;
  else
    v42 = *(_QWORD *)v41;
  v43 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v56));
  BYTE1(v50) = v57 & 1;
  LOBYTE(v50) = v58 & 1;
  v45 = v54;
  v44 = isa;
  v46 = v52;
  v47 = v51;
  v48 = objc_msgSend(v43, "initWithID:status:handle:firstName:lastName:displayName:isAcceptedAndShared:isIdMSConfirmed:preflightStatus:otCustodianID:keyCreatedOnBuild:repairDate:repairCount:", isa, v53, v54, v52, v51, v31, v50, v59, v34, v37, v40, v42);

  sub_10002A604(a1);
  return v48;
}

uint64_t getEnumTagSinglePayload for CustodianRecord.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF4)
    goto LABEL_17;
  if (a2 + 12 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 12) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 12;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 12;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 12;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xD;
  v8 = v6 - 13;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for CustodianRecord.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 12 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 12) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF4)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF3)
    return ((uint64_t (*)(void))((char *)&loc_1000971EC + 4 * byte_10021B15A[v4]))();
  *a1 = a2 + 12;
  return ((uint64_t (*)(void))((char *)sub_100097220 + 4 * byte_10021B155[v4]))();
}

uint64_t sub_100097220(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100097228(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100097230);
  return result;
}

uint64_t sub_10009723C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100097244);
  *(_BYTE *)result = a2 + 12;
  return result;
}

uint64_t sub_100097248(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100097250(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CustodianRecord.CodingKeys()
{
  return &type metadata for CustodianRecord.CodingKeys;
}

char *sub_10009726C(char *a1, char *a2, int *a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(char *, char *, uint64_t);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  unsigned int (*v47)(char *, uint64_t, uint64_t, __n128);
  __n128 v48;
  uint64_t v49;
  uint64_t v51;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v26 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = (char *)(v26 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v26);
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    v51 = *(_QWORD *)(v7 - 8);
    v8 = *(void (**)(char *, char *, uint64_t))(v51 + 16);
    v8(a1, a2, v7);
    v8(&a1[a3[5]], &a2[a3[5]], v7);
    v9 = a3[6];
    v10 = a3[7];
    v11 = &a1[v9];
    v12 = &a2[v9];
    v13 = *((_QWORD *)v12 + 1);
    *(_QWORD *)v11 = *(_QWORD *)v12;
    *((_QWORD *)v11 + 1) = v13;
    v14 = &a1[v10];
    v15 = &a2[v10];
    v16 = *((_QWORD *)v15 + 1);
    *(_QWORD *)v14 = *(_QWORD *)v15;
    *((_QWORD *)v14 + 1) = v16;
    v17 = a3[8];
    v18 = a3[9];
    v19 = &a1[v17];
    v20 = &a2[v17];
    v21 = *((_QWORD *)v20 + 1);
    *(_QWORD *)v19 = *(_QWORD *)v20;
    *((_QWORD *)v19 + 1) = v21;
    *(_QWORD *)&a1[v18] = *(_QWORD *)&a2[v18];
    v22 = a3[10];
    v23 = &a1[v22];
    v24 = (uint64_t *)&a2[v22];
    v25 = *(_QWORD *)&a2[v22 + 8];
    swift_bridgeObjectRetain(v13);
    swift_bridgeObjectRetain(v16);
    swift_bridgeObjectRetain(v21);
    if (v25 >> 60 == 15)
    {
      *(_OWORD *)v23 = *(_OWORD *)v24;
    }
    else
    {
      v27 = *v24;
      sub_10000F450(*v24, v25);
      *(_QWORD *)v23 = v27;
      *((_QWORD *)v23 + 1) = v25;
    }
    v28 = a3[11];
    v29 = (uint64_t *)&a1[v28];
    v30 = (uint64_t *)&a2[v28];
    v31 = *v30;
    v32 = v30[1];
    sub_10000F450(*v30, v32);
    *v29 = v31;
    v29[1] = v32;
    v33 = a3[13];
    a1[a3[12]] = a2[a3[12]];
    v34 = &a1[v33];
    v35 = &a2[v33];
    v36 = *((_QWORD *)v35 + 1);
    *(_QWORD *)v34 = *(_QWORD *)v35;
    *((_QWORD *)v34 + 1) = v36;
    v37 = a3[14];
    v38 = a3[15];
    v39 = &a1[v37];
    v40 = &a2[v37];
    v41 = *((_QWORD *)v40 + 1);
    *(_QWORD *)v39 = *(_QWORD *)v40;
    *((_QWORD *)v39 + 1) = v41;
    v42 = &a1[v38];
    v43 = &a2[v38];
    v42[8] = v43[8];
    *(_QWORD *)v42 = *(_QWORD *)v43;
    v44 = a3[16];
    v45 = &a1[v44];
    v46 = &a2[v44];
    v47 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v51 + 48);
    swift_bridgeObjectRetain(v36);
    v48 = swift_bridgeObjectRetain(v41);
    if (v47(v46, 1, v7, v48))
    {
      v49 = sub_1000080B4((uint64_t *)&unk_1002904F0);
      memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
    }
    else
    {
      v8(v45, v46, v7);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v51 + 56))(v45, 0, 1, v7);
    }
  }
  return a1;
}

uint64_t sub_10009749C(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;
  void (*v10)(uint64_t, uint64_t);

  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  v10 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v10(a1, v4);
  v10(a1 + a2[5], v4);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[7] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[8] + 8));
  v6 = (uint64_t *)(a1 + a2[10]);
  v7 = v6[1];
  if (v7 >> 60 != 15)
    sub_10000F494(*v6, v7);
  sub_10000F494(*(_QWORD *)(a1 + a2[11]), *(_QWORD *)(a1 + a2[11] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[13] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[14] + 8));
  v8 = a1 + a2[16];
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v8, 1, v4);
  if (!(_DWORD)result)
    return ((uint64_t (*)(uint64_t, uint64_t))v10)(v8, v4);
  return result;
}

uint64_t sub_1000975C8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  const void *v44;
  unsigned int (*v45)(const void *, uint64_t, uint64_t, __n128);
  __n128 v46;
  uint64_t v47;
  uint64_t v49;

  v6 = type metadata accessor for UUID(0);
  v49 = *(_QWORD *)(v6 - 8);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v49 + 16);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v8 = a3[6];
  v9 = a3[7];
  v10 = (_QWORD *)(a1 + v8);
  v11 = (_QWORD *)(a2 + v8);
  v12 = v11[1];
  *v10 = *v11;
  v10[1] = v12;
  v13 = (_QWORD *)(a1 + v9);
  v14 = (_QWORD *)(a2 + v9);
  v15 = v14[1];
  *v13 = *v14;
  v13[1] = v15;
  v16 = a3[8];
  v17 = a3[9];
  v18 = (_QWORD *)(a1 + v16);
  v19 = (_QWORD *)(a2 + v16);
  v20 = v19[1];
  *v18 = *v19;
  v18[1] = v20;
  *(_QWORD *)(a1 + v17) = *(_QWORD *)(a2 + v17);
  v21 = a3[10];
  v22 = a1 + v21;
  v23 = (uint64_t *)(a2 + v21);
  v24 = *(_QWORD *)(a2 + v21 + 8);
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRetain(v20);
  if (v24 >> 60 == 15)
  {
    *(_OWORD *)v22 = *(_OWORD *)v23;
  }
  else
  {
    v25 = *v23;
    sub_10000F450(*v23, v24);
    *(_QWORD *)v22 = v25;
    *(_QWORD *)(v22 + 8) = v24;
  }
  v26 = a3[11];
  v27 = (uint64_t *)(a1 + v26);
  v28 = (uint64_t *)(a2 + v26);
  v29 = *v28;
  v30 = v28[1];
  sub_10000F450(*v28, v30);
  *v27 = v29;
  v27[1] = v30;
  v31 = a3[13];
  *(_BYTE *)(a1 + a3[12]) = *(_BYTE *)(a2 + a3[12]);
  v32 = (_QWORD *)(a1 + v31);
  v33 = (_QWORD *)(a2 + v31);
  v34 = v33[1];
  *v32 = *v33;
  v32[1] = v34;
  v35 = a3[14];
  v36 = a3[15];
  v37 = (_QWORD *)(a1 + v35);
  v38 = (_QWORD *)(a2 + v35);
  v39 = v38[1];
  *v37 = *v38;
  v37[1] = v39;
  v40 = a1 + v36;
  v41 = a2 + v36;
  *(_BYTE *)(v40 + 8) = *(_BYTE *)(v41 + 8);
  *(_QWORD *)v40 = *(_QWORD *)v41;
  v42 = a3[16];
  v43 = (void *)(a1 + v42);
  v44 = (const void *)(a2 + v42);
  v45 = *(unsigned int (**)(const void *, uint64_t, uint64_t, __n128))(v49 + 48);
  swift_bridgeObjectRetain(v34);
  v46 = swift_bridgeObjectRetain(v39);
  if (v45(v44, 1, v6, v46))
  {
    v47 = sub_1000080B4((uint64_t *)&unk_1002904F0);
    memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
  }
  else
  {
    v7((uint64_t)v43, (uint64_t)v44, v6);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v49 + 56))(v43, 0, 1, v6);
  }
  return a1;
}

uint64_t sub_1000977CC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  const void *v55;
  uint64_t (*v56)(uint64_t, uint64_t, uint64_t);
  int v57;
  uint64_t v58;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24);
  v8(a1, a2, v6);
  v8(a1 + a3[5], a2 + a3[5], v6);
  v9 = a3[6];
  v10 = (_QWORD *)(a1 + v9);
  v11 = (_QWORD *)(a2 + v9);
  *v10 = *v11;
  v12 = v11[1];
  v13 = v10[1];
  v10[1] = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  v14 = a3[7];
  v15 = (_QWORD *)(a1 + v14);
  v16 = (_QWORD *)(a2 + v14);
  *v15 = *v16;
  v17 = v16[1];
  v18 = v15[1];
  v15[1] = v17;
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRelease(v18);
  v19 = a3[8];
  v20 = (_QWORD *)(a1 + v19);
  v21 = (_QWORD *)(a2 + v19);
  *v20 = *v21;
  v22 = v21[1];
  v23 = v20[1];
  v20[1] = v22;
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRelease(v23);
  *(_QWORD *)(a1 + a3[9]) = *(_QWORD *)(a2 + a3[9]);
  v24 = a3[10];
  v25 = (uint64_t *)(a1 + v24);
  v26 = (uint64_t *)(a2 + v24);
  v27 = *(_QWORD *)(a2 + v24 + 8);
  if (*(_QWORD *)(a1 + v24 + 8) >> 60 == 15)
  {
    if (v27 >> 60 != 15)
    {
      v28 = *v26;
      sub_10000F450(v28, v27);
      *v25 = v28;
      v25[1] = v27;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v27 >> 60 == 15)
  {
    sub_100071D90((uint64_t)v25);
LABEL_6:
    *(_OWORD *)v25 = *(_OWORD *)v26;
    goto LABEL_8;
  }
  v29 = *v26;
  sub_10000F450(v29, v27);
  v30 = *v25;
  v31 = v25[1];
  *v25 = v29;
  v25[1] = v27;
  sub_10000F494(v30, v31);
LABEL_8:
  v32 = a3[11];
  v33 = (uint64_t *)(a1 + v32);
  v34 = (uint64_t *)(a2 + v32);
  v35 = *v34;
  v36 = v34[1];
  sub_10000F450(*v34, v36);
  v37 = *v33;
  v38 = v33[1];
  *v33 = v35;
  v33[1] = v36;
  sub_10000F494(v37, v38);
  *(_BYTE *)(a1 + a3[12]) = *(_BYTE *)(a2 + a3[12]);
  v39 = a3[13];
  v40 = (_QWORD *)(a1 + v39);
  v41 = (_QWORD *)(a2 + v39);
  *v40 = *v41;
  v42 = v41[1];
  v43 = v40[1];
  v40[1] = v42;
  swift_bridgeObjectRetain(v42);
  swift_bridgeObjectRelease(v43);
  v44 = a3[14];
  v45 = (_QWORD *)(a1 + v44);
  v46 = (_QWORD *)(a2 + v44);
  *v45 = *v46;
  v47 = v46[1];
  v48 = v45[1];
  v45[1] = v47;
  swift_bridgeObjectRetain(v47);
  swift_bridgeObjectRelease(v48);
  v49 = a3[15];
  v50 = a1 + v49;
  v51 = (uint64_t *)(a2 + v49);
  v52 = *v51;
  *(_BYTE *)(v50 + 8) = *((_BYTE *)v51 + 8);
  *(_QWORD *)v50 = v52;
  v53 = a3[16];
  v54 = (void *)(a1 + v53);
  v55 = (const void *)(a2 + v53);
  v56 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  LODWORD(v48) = v56(a1 + v53, 1, v6);
  v57 = v56((uint64_t)v55, 1, v6);
  if (!(_DWORD)v48)
  {
    if (!v57)
    {
      v8((uint64_t)v54, (uint64_t)v55, v6);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(v54, v6);
    goto LABEL_13;
  }
  if (v57)
  {
LABEL_13:
    v58 = sub_1000080B4((uint64_t *)&unk_1002904F0);
    memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(v54, v55, v6);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v54, 0, 1, v6);
  return a1;
}

char *sub_100097AB8(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void *, const void *, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 32);
  v8(a1, a2, v6);
  v8(&a1[a3[5]], &a2[a3[5]], v6);
  v9 = a3[7];
  *(_OWORD *)&a1[a3[6]] = *(_OWORD *)&a2[a3[6]];
  *(_OWORD *)&a1[v9] = *(_OWORD *)&a2[v9];
  v10 = a3[9];
  *(_OWORD *)&a1[a3[8]] = *(_OWORD *)&a2[a3[8]];
  *(_QWORD *)&a1[v10] = *(_QWORD *)&a2[v10];
  v11 = a3[11];
  *(_OWORD *)&a1[a3[10]] = *(_OWORD *)&a2[a3[10]];
  *(_OWORD *)&a1[v11] = *(_OWORD *)&a2[v11];
  v12 = a3[13];
  a1[a3[12]] = a2[a3[12]];
  *(_OWORD *)&a1[v12] = *(_OWORD *)&a2[v12];
  v13 = a3[15];
  *(_OWORD *)&a1[a3[14]] = *(_OWORD *)&a2[a3[14]];
  v14 = &a1[v13];
  v15 = &a2[v13];
  *(_QWORD *)v14 = *(_QWORD *)v15;
  v14[8] = v15[8];
  v16 = a3[16];
  v17 = &a1[v16];
  v18 = &a2[v16];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v18, 1, v6))
  {
    v19 = sub_1000080B4((uint64_t *)&unk_1002904F0);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  else
  {
    v8(v17, v18, v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v17, 0, 1, v6);
  }
  return a1;
}

char *sub_100097C0C(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  void (*v8)(void *, const void *, uint64_t);
  uint64_t v9;
  char *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  char *v52;
  char *v53;
  uint64_t (*v54)(const void *, uint64_t, uint64_t);
  int v55;
  int v56;
  uint64_t v57;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 40);
  v8(a1, a2, v6);
  v8(&a1[a3[5]], &a2[a3[5]], v6);
  v9 = a3[6];
  v10 = &a1[v9];
  v11 = (uint64_t *)&a2[v9];
  v13 = *v11;
  v12 = v11[1];
  v14 = *((_QWORD *)v10 + 1);
  *(_QWORD *)v10 = v13;
  *((_QWORD *)v10 + 1) = v12;
  swift_bridgeObjectRelease(v14);
  v15 = a3[7];
  v16 = &a1[v15];
  v17 = (uint64_t *)&a2[v15];
  v19 = *v17;
  v18 = v17[1];
  v20 = *((_QWORD *)v16 + 1);
  *(_QWORD *)v16 = v19;
  *((_QWORD *)v16 + 1) = v18;
  swift_bridgeObjectRelease(v20);
  v21 = a3[8];
  v22 = &a1[v21];
  v23 = (uint64_t *)&a2[v21];
  v25 = *v23;
  v24 = v23[1];
  v26 = *((_QWORD *)v22 + 1);
  *(_QWORD *)v22 = v25;
  *((_QWORD *)v22 + 1) = v24;
  swift_bridgeObjectRelease(v26);
  v27 = a3[10];
  *(_QWORD *)&a1[a3[9]] = *(_QWORD *)&a2[a3[9]];
  v28 = (uint64_t)&a1[v27];
  v29 = &a2[v27];
  v30 = *(_QWORD *)&a1[v27 + 8];
  if (v30 >> 60 == 15)
    goto LABEL_4;
  v31 = *((_QWORD *)v29 + 1);
  if (v31 >> 60 == 15)
  {
    sub_100071D90(v28);
LABEL_4:
    *(_OWORD *)v28 = *(_OWORD *)v29;
    goto LABEL_6;
  }
  v32 = *(_QWORD *)v28;
  *(_QWORD *)v28 = *(_QWORD *)v29;
  *(_QWORD *)(v28 + 8) = v31;
  sub_10000F494(v32, v30);
LABEL_6:
  v33 = a3[11];
  v34 = *(_QWORD *)&a1[v33];
  v35 = *(_QWORD *)&a1[v33 + 8];
  *(_OWORD *)&a1[v33] = *(_OWORD *)&a2[v33];
  sub_10000F494(v34, v35);
  v36 = a3[13];
  a1[a3[12]] = a2[a3[12]];
  v37 = &a1[v36];
  v38 = (uint64_t *)&a2[v36];
  v40 = *v38;
  v39 = v38[1];
  v41 = *((_QWORD *)v37 + 1);
  *(_QWORD *)v37 = v40;
  *((_QWORD *)v37 + 1) = v39;
  swift_bridgeObjectRelease(v41);
  v42 = a3[14];
  v43 = &a1[v42];
  v44 = (uint64_t *)&a2[v42];
  v46 = *v44;
  v45 = v44[1];
  v47 = *((_QWORD *)v43 + 1);
  *(_QWORD *)v43 = v46;
  *((_QWORD *)v43 + 1) = v45;
  swift_bridgeObjectRelease(v47);
  v48 = a3[15];
  v49 = a3[16];
  v50 = &a1[v48];
  v51 = &a2[v48];
  *(_QWORD *)v50 = *(_QWORD *)v51;
  v50[8] = v51[8];
  v52 = &a1[v49];
  v53 = &a2[v49];
  v54 = *(uint64_t (**)(const void *, uint64_t, uint64_t))(v7 + 48);
  v55 = v54(&a1[v49], 1, v6);
  v56 = v54(v53, 1, v6);
  if (!v55)
  {
    if (!v56)
    {
      v8(v52, v53, v6);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(v52, v6);
    goto LABEL_11;
  }
  if (v56)
  {
LABEL_11:
    v57 = sub_1000080B4((uint64_t *)&unk_1002904F0);
    memcpy(v52, v53, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v52, v53, v6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v52, 0, 1, v6);
  return a1;
}

uint64_t sub_100097E54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100097E60);
}

uint64_t sub_100097E60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  unint64_t v11;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v8 = sub_1000080B4((uint64_t *)&unk_1002904F0);
    v10 = a1 + *(int *)(a3 + 64);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
    return v9(v10, a2, v8);
  }
  v11 = *(_QWORD *)(a1 + *(int *)(a3 + 24) + 8);
  if (v11 >= 0xFFFFFFFF)
    LODWORD(v11) = -1;
  return (v11 + 1);
}

uint64_t sub_100097F10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100097F1C);
}

uint64_t sub_100097F1C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  result = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + *(int *)(a4 + 24) + 8) = (a2 - 1);
      return result;
    }
    v10 = sub_1000080B4((uint64_t *)&unk_1002904F0);
    v12 = a1 + *(int *)(a4 + 64);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_100097FC8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[13];

  v2 = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    v6[1] = v6[0];
    v6[2] = &unk_10021B228;
    v6[3] = &unk_10021B240;
    v6[4] = &unk_10021B240;
    v6[5] = (char *)&value witness table for Builtin.Int64 + 64;
    v6[6] = &unk_10021B258;
    v6[7] = &unk_10021B270;
    v6[8] = &unk_10021B288;
    v6[9] = &unk_10021B240;
    v6[10] = &unk_10021B240;
    v6[11] = &unk_10021B2A0;
    sub_100015374(319);
    if (v5 <= 0x3F)
    {
      v6[12] = *(_QWORD *)(v4 - 8) + 64;
      swift_initStructMetadata(a1, 256, 13, v6, a1 + 16);
    }
  }
}

unint64_t sub_1000980A0()
{
  unint64_t result;

  result = qword_10028F198;
  if (!qword_10028F198)
  {
    result = swift_getWitnessTable(&unk_10021B348, &type metadata for CustodianRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10028F198);
  }
  return result;
}

unint64_t sub_1000980E8()
{
  unint64_t result;

  result = qword_10028F1A0;
  if (!qword_10028F1A0)
  {
    result = swift_getWitnessTable(&unk_10021B2B8, &type metadata for CustodianRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10028F1A0);
  }
  return result;
}

unint64_t sub_100098130()
{
  unint64_t result;

  result = qword_10028F1A8;
  if (!qword_10028F1A8)
  {
    result = swift_getWitnessTable(&unk_10021B2E0, &type metadata for CustodianRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_10028F1A8);
  }
  return result;
}

uint64_t sub_100098174(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char v18;

  if (a1 == 0x444964726F636572 && a2 == 0xE800000000000000)
  {
    v5 = 0xE800000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x444964726F636572, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6169646F74737563 && a2 == 0xEB0000000044496ELL)
  {
    v7 = 0xEB0000000044496ELL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6169646F74737563, 0xEB0000000044496ELL, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x646F74737543746FLL && a2 == 0xED000044496E6169)
  {
    v8 = 0xED000044496E6169;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x646F74737543746FLL, 0xED000044496E6169, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x656C646E6168 && a2 == 0xE600000000000000)
  {
    v9 = 0xE600000000000000;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656C646E6168, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_26;
  }
  if (a1 == 0xD000000000000012 && a2 == 0x800000010020B130)
  {
    v10 = 0x800000010020B130;
LABEL_32:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, 0x800000010020B130, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_32;
  }
  if (a1 == 0xD000000000000011)
  {
    v11 = 0x800000010020B150;
    if (a2 == 0x800000010020B150)
      goto LABEL_37;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x800000010020B150, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
LABEL_37:
    swift_bridgeObjectRelease(v11);
    return 5;
  }
  if (a1 == 0x737574617473 && a2 == 0xE600000000000000)
  {
    v12 = 0xE600000000000000;
LABEL_43:
    swift_bridgeObjectRelease(v12);
    return 6;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x737574617473, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
    goto LABEL_43;
  }
  if (a1 == 0x676E697070617277 && a2 == 0xEE00434B5279654BLL)
  {
    v13 = 0xEE00434B5279654BLL;
LABEL_49:
    swift_bridgeObjectRelease(v13);
    return 7;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x676E697070617277, 0xEE00434B5279654BLL, a1, a2, 0) & 1) != 0)
  {
    v13 = a2;
    goto LABEL_49;
  }
  if (a1 == 0xD000000000000010 && a2 == 0x8000000100209650)
  {
    v14 = 0x8000000100209650;
LABEL_55:
    swift_bridgeObjectRelease(v14);
    return 8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x8000000100209650, a1, a2, 0) & 1) != 0)
  {
    v14 = a2;
    goto LABEL_55;
  }
  if (a1 == 0xD000000000000013 && a2 == 0x8000000100209670)
  {
    v15 = 0x8000000100209670;
LABEL_61:
    swift_bridgeObjectRelease(v15);
    return 9;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, 0x8000000100209670, a1, a2, 0) & 1) != 0)
  {
    v15 = a2;
    goto LABEL_61;
  }
  if (a1 == 0xD000000000000011)
  {
    v16 = 0x800000010020B170;
    if (a2 == 0x800000010020B170)
      goto LABEL_66;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x800000010020B170, a1, a2, 0) & 1) != 0)
  {
    v16 = a2;
LABEL_66:
    swift_bridgeObjectRelease(v16);
    return 10;
  }
  if (a1 == 0x6144726961706572 && a2 == 0xEA00000000006574)
  {
    v17 = 0xEA00000000006574;
LABEL_72:
    swift_bridgeObjectRelease(v17);
    return 11;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6144726961706572, 0xEA00000000006574, a1, a2, 0) & 1) != 0)
  {
    v17 = a2;
    goto LABEL_72;
  }
  if (a1 == 0x6F43726961706572 && a2 == 0xEB00000000746E75)
  {
    swift_bridgeObjectRelease(0xEB00000000746E75);
    return 12;
  }
  else
  {
    v18 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6F43726961706572, 0xEB00000000746E75, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v18 & 1) != 0)
      return 12;
    else
      return 13;
  }
}

void sub_1000986F0(void *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  void *v15;
  _UNKNOWN **v16;
  uint64_t v17;
  void **v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  void **v22;
  void ***v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void **v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  NSObject *v33;
  os_log_type_t v34;
  _BOOL4 v35;
  uint64_t v36;
  unint64_t v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  void **v50;
  id v51;
  void *v52;
  void *v53;
  uint64_t v54;
  id v55;
  void *v56;
  char v57;
  uint64_t v58;
  void *v59;
  void ***v60;
  void ***v61;
  void *v62;
  void ***v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  void ***v70;
  id v71;
  id v72;
  NSObject *v73;
  os_log_type_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  void **v78;
  unint64_t v79;
  id v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  void **v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  id v92;
  id v93;
  void ***v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  void **aBlock;
  uint64_t v99;
  void *v100;
  void *v101;
  void *v102;
  void ***v103;

  v91 = a6;
  v89 = a5;
  v96 = a3;
  v9 = a4 & 0x100;
  v10 = type metadata accessor for URL(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  v14 = (char *)&v84 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = 0;
  v87 = a4;
  if ((a4 & 1) != 0)
  {
    sub_1000E4D5C(a2, v96);
    v15 = (void *)sub_1000E58B0((uint64_t)v14);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  }
  v16 = &off_10028A000;
  v92 = a1;
  if (v9)
  {
    if (qword_10028ADC0 != -1)
      swift_once(&qword_10028ADC0, sub_100046D04);
    v17 = type metadata accessor for Logger(0);
    sub_100005288(v17, (uint64_t)qword_1002A89C0);
    v18 = a1;
    v19 = Logger.logObject.getter(v18);
    v20 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v19, v20))
    {
      v21 = (uint8_t *)swift_slowAlloc(12, -1);
      v94 = (void ***)swift_slowAlloc(8, -1);
      *(_DWORD *)v21 = 138412290;
      v95 = (uint64_t)v15;
      aBlock = v18;
      v22 = v18;
      v16 = &off_10028A000;
      v15 = (void *)v95;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &v99);
      v23 = v94;
      *v94 = v18;

      _os_log_impl((void *)&_mh_execute_header, v19, v20, "shouldStartCloudSubscription is true. Creating subscriptions. Database: %@", v21, 0xCu);
      v24 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v23, 1, v24);
      swift_slowDealloc(v23, -1, -1);
      swift_slowDealloc(v21, -1, -1);
    }
    else
    {

      v19 = v18;
    }

    v25 = swift_allocObject(&unk_100264198, 24, 7);
    *(_QWORD *)(v25 + 16) = v18;
    v26 = sub_1000080B4(&qword_10028F1C8);
    swift_allocObject(v26, *(unsigned int *)(v26 + 48), *(unsigned __int16 *)(v26 + 52));
    v27 = v18;
    v28 = Future.init(_:)(sub_10009C598, v25);
    swift_release(v28);
  }
  v88 = v9;
  v95 = swift_allocObject(&unk_1002640D0, 24, 7);
  *(_QWORD *)(v95 + 16) = &_swiftEmptyArrayStorage;
  v94 = (void ***)swift_allocObject(&unk_1002640D0, 24, 7);
  v94[2] = (void **)&_swiftEmptyArrayStorage;
  v29 = objc_msgSend(objc_allocWithZone((Class)CKFetchDatabaseChangesOperation), "initWithPreviousServerChangeToken:", v15);
  if (v16[440] != (_UNKNOWN *)-1)
    swift_once(&qword_10028ADC0, sub_100046D04);
  v30 = type metadata accessor for Logger(0);
  v31 = sub_100005288(v30, (uint64_t)qword_1002A89C0);
  swift_bridgeObjectRetain_n(v96, 2);
  v32 = v15;
  v86 = v31;
  v33 = Logger.logObject.getter(v32);
  v34 = static os_log_type_t.debug.getter();
  v35 = os_log_type_enabled(v33, v34);
  v93 = v32;
  if (v35)
  {
    v36 = swift_slowAlloc(22, -1);
    v84 = (void **)swift_slowAlloc(64, -1);
    aBlock = v84;
    *(_DWORD *)v36 = 136315394;
    v37 = v96;
    swift_bridgeObjectRetain(v96);
    v85 = a2;
    v97 = sub_1001DEF4C(a2, v37, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, &aBlock);
    swift_bridgeObjectRelease_n(v37, 3);
    *(_WORD *)(v36 + 12) = 2080;
    if (v15)
    {
      v38 = objc_msgSend(v32, "data");
      v39 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v38);
      v41 = v40;

      sub_1001D34B0(v39, v41);
      v43 = v42;
      v97 = v42;
      v44 = sub_1000080B4((uint64_t *)&unk_10028E800);
      v45 = sub_10008685C();
      v46 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v44, v45);
      v48 = v47;
      swift_bridgeObjectRelease(v43);
      v49 = v41;
      v32 = v93;
      sub_10000F494(v39, v49);
    }
    else
    {
      v48 = 0xE300000000000000;
      v46 = 7104878;
    }
    v97 = sub_1001DEF4C(v46, v48, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, &aBlock);

    swift_bridgeObjectRelease(v48);
    _os_log_impl((void *)&_mh_execute_header, v33, v34, "Old database (%s) change token: %s", (uint8_t *)v36, 0x16u);
    v50 = v84;
    swift_arrayDestroy(v84, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v50, -1, -1);
    swift_slowDealloc(v36, -1, -1);

    a2 = v85;
  }
  else
  {

    swift_bridgeObjectRelease_n(v96, 2);
  }
  objc_msgSend(v29, "setFetchAllChanges:", 1);
  v51 = objc_msgSend(v29, "configuration");
  v52 = v92;
  if (!v51)
  {
    __break(1u);
    goto LABEL_25;
  }
  v53 = v51;
  v54 = a2;
  objc_msgSend(v51, "setAutomaticallyRetryNetworkFailures:", 0);

  v55 = objc_msgSend(v29, "configuration");
  if (!v55)
  {
LABEL_25:
    __break(1u);
    return;
  }
  v56 = v55;
  v57 = v87 & 1;
  objc_msgSend(v55, "setDiscretionaryNetworkBehavior:", 0);

  v58 = v95;
  v102 = sub_10009C4F0;
  v103 = (void ***)v95;
  aBlock = _NSConcreteStackBlock;
  v99 = 1107296256;
  v100 = sub_10009908C;
  v101 = &unk_1002640E8;
  v59 = _Block_copy(&aBlock);
  v60 = v103;
  swift_retain(v58);
  swift_release(v60);
  objc_msgSend(v29, "setRecordZoneWithIDChangedBlock:", v59);
  _Block_release(v59);
  v61 = v94;
  v102 = sub_10009C4F0;
  v103 = v94;
  aBlock = _NSConcreteStackBlock;
  v99 = 1107296256;
  v100 = sub_10009908C;
  v101 = &unk_100264110;
  v62 = _Block_copy(&aBlock);
  v63 = v103;
  swift_retain(v61);
  swift_release(v63);
  objc_msgSend(v29, "setRecordZoneWithIDWasDeletedBlock:", v62);
  _Block_release(v62);
  v64 = swift_allocObject(&unk_100264148, 80, 7);
  *(_QWORD *)(v64 + 16) = v52;
  *(_QWORD *)(v64 + 24) = v54;
  v65 = v54;
  v66 = v96;
  v67 = v90;
  *(_QWORD *)(v64 + 32) = v96;
  *(_QWORD *)(v64 + 40) = v67;
  *(_BYTE *)(v64 + 48) = v57;
  *(_BYTE *)(v64 + 49) = BYTE1(v88);
  v68 = v91;
  *(_QWORD *)(v64 + 56) = v89;
  *(_QWORD *)(v64 + 64) = v68;
  *(_QWORD *)(v64 + 72) = v58;
  v102 = sub_10009C54C;
  v103 = (void ***)v64;
  aBlock = _NSConcreteStackBlock;
  v99 = 1107296256;
  v100 = sub_10009AAC0;
  v101 = &unk_100264160;
  v69 = _Block_copy(&aBlock);
  v70 = v103;
  v71 = v52;
  swift_bridgeObjectRetain(v66);
  swift_retain(v58);
  swift_retain(v67);
  swift_retain(v68);
  swift_release(v70);
  objc_msgSend(v29, "setFetchDatabaseChangesCompletionBlock:", v69);
  _Block_release(v69);
  swift_bridgeObjectRetain_n(v66, 2);
  v72 = v29;
  v73 = Logger.logObject.getter(v72);
  v74 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v73, v74))
  {
    v75 = swift_slowAlloc(22, -1);
    v92 = v71;
    v76 = v75;
    v77 = (_QWORD *)swift_slowAlloc(8, -1);
    v78 = (void **)swift_slowAlloc(32, -1);
    aBlock = v78;
    *(_DWORD *)v76 = 136315394;
    v79 = v96;
    swift_bridgeObjectRetain(v96);
    v97 = sub_1001DEF4C(v65, v79, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, &aBlock);
    swift_bridgeObjectRelease_n(v79, 3);
    *(_WORD *)(v76 + 12) = 2112;
    v97 = (uint64_t)v72;
    v80 = v72;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, &aBlock);
    *v77 = v72;

    _os_log_impl((void *)&_mh_execute_header, v73, v74, "Fetching database (%s) changes with operation: %@", (uint8_t *)v76, 0x16u);
    v81 = sub_1000080B4((uint64_t *)&unk_10028BC20);
    swift_arrayDestroy(v77, 1, v81);
    swift_slowDealloc(v77, -1, -1);
    swift_arrayDestroy(v78, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v78, -1, -1);
    v82 = v76;
    v71 = v92;
    swift_slowDealloc(v82, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v96, 2);
  }
  v83 = v93;
  objc_msgSend(v71, "addOperation:", v72);

  swift_release(v95);
  swift_release(v94);

}

uint64_t sub_100099090(void *a1, uint64_t a2)
{
  id v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _BYTE v10[24];

  swift_beginAccess(a2 + 16, v10, 33, 0);
  v4 = a1;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  v5 = *(_QWORD *)(a2 + 16) & 0xFFFFFFFFFFFFFF8;
  v7 = *(_QWORD *)(v5 + 0x10);
  v6 = *(_QWORD *)(v5 + 24);
  if (v7 >= v6 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v6 > 1, v7 + 1, 1);
  v8 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v7, v4);
  specialized Array._endMutation()(v8);
  return swift_endAccess(v10);
}

uint64_t sub_100099128(void *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, __int16 a8, void (*a9)(_QWORD), uint64_t a10, uint64_t a11)
{
  id v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  id v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  void (*v31)(_QWORD);
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  unint64_t v49;
  void *v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  id v55;
  id v56;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  void (*v63)(_QWORD);
  uint64_t v67;
  uint64_t v68;
  _BYTE v69[16];
  uint64_t v70[3];

  if (qword_10028ADC0 != -1)
    swift_once(&qword_10028ADC0, sub_100046D04);
  v67 = type metadata accessor for Logger(0);
  sub_100005288(v67, (uint64_t)qword_1002A89C0);
  v14 = a1;
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v15, v16))
  {
    v17 = (uint8_t *)swift_slowAlloc(12, -1);
    v61 = swift_slowAlloc(32, -1);
    v70[0] = v61;
    *(_DWORD *)v17 = 136315138;
    v62 = a1;
    if (a1)
    {
      v18 = objc_msgSend(v14, "data");
      v60 = a6;
      v19 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v18);
      v21 = v20;

      sub_1001D34B0(v19, v21);
      v22 = v14;
      v24 = v23;
      v68 = v23;
      v25 = sub_1000080B4((uint64_t *)&unk_10028E800);
      v26 = sub_10008685C();
      v27 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v25, v26);
      v29 = v28;
      swift_bridgeObjectRelease(v24);
      v30 = v19;
      a6 = v60;
      sub_10000F494(v30, v21);
    }
    else
    {
      v29 = 0xE300000000000000;
      v27 = 7104878;
      v22 = v14;
    }
    v68 = sub_1001DEF4C(v27, v29, v70);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, v69);

    swift_bridgeObjectRelease(v29);
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "CK fetch database changes complete. token: %s", v17, 0xCu);
    swift_arrayDestroy(v61, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v61, -1, -1);
    swift_slowDealloc(v17, -1, -1);

    a1 = v62;
    v14 = v22;
    v31 = a9;
    v32 = a10;
    if (!a3)
      goto LABEL_17;
LABEL_7:
    swift_errorRetain(a3);
    if (qword_10028ADB8 != -1)
      swift_once(&qword_10028ADB8, sub_100046CE4);
    sub_100005288(v67, (uint64_t)qword_1002A89A8);
    swift_errorRetain(a3);
    v33 = swift_errorRetain(a3);
    v34 = Logger.logObject.getter(v33);
    v35 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v34, v35))
    {
      v36 = (uint8_t *)swift_slowAlloc(12, -1);
      v63 = v31;
      v37 = swift_slowAlloc(32, -1);
      v70[0] = v37;
      *(_DWORD *)v36 = 136315138;
      v68 = a3;
      swift_errorRetain(a3);
      v38 = sub_1000080B4(&qword_10028E850);
      v39 = String.init<A>(describing:)(&v68, v38);
      v40 = a6;
      v42 = v41;
      v68 = sub_1001DEF4C(v39, v41, v70);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, v69);
      v43 = v42;
      a6 = v40;
      swift_bridgeObjectRelease(v43);
      swift_errorRelease(a3);
      swift_errorRelease(a3);
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "Error during fetch database changes operation: %s", v36, 0xCu);
      swift_arrayDestroy(v37, 1, (char *)&type metadata for Any + 8);
      v44 = v37;
      v31 = v63;
      swift_slowDealloc(v44, -1, -1);
      swift_slowDealloc(v36, -1, -1);
    }
    else
    {
      swift_errorRelease(a3);
      swift_errorRelease(a3);
    }

    v70[0] = a3;
    swift_errorRetain(a3);
    v45 = sub_1000080B4(&qword_10028E850);
    type metadata accessor for CKError(0);
    v47 = v46;
    if ((swift_dynamicCast(&v68, v70, v45, v46, 6) & 1) != 0)
    {
      v48 = (void *)v68;
      v49 = sub_10009C47C();
      _BridgedStoredNSError.code.getter(v70, v47, v49);
      if (v70[0] == 21)
      {
        sub_1000E4EA4(a5, a6, 0);
        sub_1000986F0(a4, a5, a6, a8 & 0x101, v31, v32);

        return swift_errorRelease(a3);
      }

    }
    swift_errorRetain(a3);
    v31(a3);
    swift_errorRelease(a3);
    return swift_errorRelease(a3);
  }

  v31 = a9;
  v32 = a10;
  if (a3)
    goto LABEL_7;
LABEL_17:
  v50 = v14;
  v51 = (uint64_t *)(a11 + 16);
  swift_beginAccess(a11 + 16, v70, 0, 0);
  v52 = *(_QWORD *)(a11 + 16);
  if ((unint64_t)v52 >> 62)
  {
    if (v52 < 0)
      v58 = *v51;
    else
      v58 = v52 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*v51);
    v59 = _CocoaArrayWrapper.endIndex.getter(v58);
    swift_bridgeObjectRelease(v52);
    if (v59)
      goto LABEL_19;
  }
  else if (*(_QWORD *)((v52 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_19:
    swift_beginAccess(v51, &v68, 0, 0);
    v53 = *v51;
    v54 = (_QWORD *)swift_allocObject(&unk_1002641C0, 64, 7);
    v54[2] = a4;
    v54[3] = a5;
    v54[4] = a6;
    v54[5] = a1;
    v54[6] = v31;
    v54[7] = v32;
    v55 = v50;
    swift_bridgeObjectRetain(v53);
    v56 = a4;
    swift_bridgeObjectRetain(a6);
    swift_retain(v32);
    sub_10009974C(v56, v53, a8 & 0x101, (uint64_t)sub_10009C5DC, (uint64_t)v54);
    swift_bridgeObjectRelease(v53);
    return swift_release(v54);
  }
  sub_1000E4EA4(a5, a6, a1);
  return ((uint64_t (*)(_QWORD))v31)(0);
}

void sub_10009974C(void *a1, uint64_t a2, unsigned __int16 a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  _BOOL4 v19;
  uint8_t *v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  __n128 v27;
  unint64_t v28;
  id v29;
  void *v30;
  BOOL v31;
  unint64_t v32;
  id v33;
  id v34;
  void *v35;
  _BYTE *v36;
  uint64_t v37;
  void (*v38)(_BYTE *, uint64_t);
  uint64_t v39;
  id v40;
  uint64_t v41;
  void *v42;
  void *v43;
  Swift::String v44;
  id v45;
  uint64_t v46;
  void *v47;
  void *v48;
  Swift::String v49;
  void *object;
  uint64_t v51;
  id v52;
  id v53;
  uint64_t v54;
  id v55;
  id v56;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v58;
  unint64_t v59;
  uint64_t v60;
  _BOOL8 v61;
  uint64_t v62;
  char v63;
  unint64_t v64;
  char v65;
  _QWORD *countAndFlagsBits;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  id v70;
  uint64_t v71;
  _BYTE *v72;
  uint64_t v73;
  id v74;
  id v75;
  id v76;
  id v77;
  NSObject *v78;
  uint64_t v79;
  id v80;
  uint64_t v81;
  void *v82;
  unint64_t v83;
  unint64_t v84;
  id v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  uint64_t v89;
  uint8_t *v90;
  id v91;
  os_log_t v92;
  uint64_t v93;
  uint64_t v94;
  NSObject *v95;
  os_log_type_t v96;
  uint8_t *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _BOOL8 v110;
  CKFetchRecordZoneChangesOperation v111;
  id v112;
  void *v113;
  id v114;
  void *v115;
  void *v116;
  _QWORD *v117;
  uint64_t v118;
  void *v119;
  uint64_t v120;
  void *v121;
  _QWORD *v122;
  id v123;
  _QWORD *v124;
  uint64_t v125;
  uint64_t v126;
  void *v127;
  _QWORD *v128;
  objc_class *v129;
  NSObject *v130;
  os_log_type_t v131;
  uint8_t *v132;
  uint64_t v133;
  _QWORD *v134;
  objc_class *v135;
  uint64_t v136;
  _QWORD *v137;
  uint64_t v138;
  uint64_t v139;
  _BYTE v140[4];
  int v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  __n128 v149;
  _BYTE *v150;
  _BYTE *v151;
  uint64_t v152;
  uint64_t v153;
  void *v154;
  uint64_t v155;
  uint64_t v156;
  os_log_t v157;
  uint64_t v158;
  unint64_t v159;
  int v160;
  uint64_t v161;
  void *v162;
  id v163;
  uint64_t v164;
  int v165;
  _BYTE *v166;
  uint64_t v167;
  unint64_t v168;
  uint64_t v169;
  id v170;
  __int128 v171;
  id v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  Swift::String aBlock;
  void *v177;
  void *v178;
  void *v179;
  _QWORD *v180;
  uint64_t v181;
  _BYTE v182[12];
  Swift::OpaquePointer_optional v183;
  Swift::OpaquePointer_optional v184;

  v144 = a5;
  v143 = a4;
  v154 = a1;
  v7 = type metadata accessor for Logger(0);
  v167 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7, v8);
  v166 = &v140[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v153 = type metadata accessor for URL(0);
  v152 = *(_QWORD *)(v153 - 8);
  v11 = __chkstk_darwin(v153, v10);
  v151 = &v140[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v11, v13);
  v150 = &v140[-v14];
  if (qword_10028ADC0 != -1)
    swift_once(&qword_10028ADC0, sub_100046D04);
  v15 = sub_100005288(v7, (uint64_t)qword_1002A89C0);
  v16 = swift_bridgeObjectRetain_n(a2, 2);
  v161 = v15;
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.debug.getter();
  v19 = os_log_type_enabled(v17, v18);
  v147 = a2;
  v164 = v7;
  if (v19)
  {
    v20 = (uint8_t *)swift_slowAlloc(12, -1);
    v21 = swift_slowAlloc(32, -1);
    aBlock._countAndFlagsBits = v21;
    *(_DWORD *)v20 = 136315138;
    sub_1000067D4(0, (unint64_t *)&qword_1002953A0, CKRecordZoneID_ptr);
    v22 = swift_bridgeObjectRetain(v147);
    v23 = Array.description.getter(v22);
    v25 = v24;
    swift_bridgeObjectRelease(v147);
    v181 = sub_1001DEF4C(v23, v25, &aBlock._countAndFlagsBits);
    a2 = v147;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v181, v182);
    swift_bridgeObjectRelease_n(a2, 2);
    swift_bridgeObjectRelease(v25);
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "CK ZoneIDs changed: %s", v20, 0xCu);
    swift_arrayDestroy(v21, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v21, -1, -1);
    swift_slowDealloc(v20, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
  }
  if (!((unint64_t)a2 >> 62))
  {
    v26 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v26)
      return;
LABEL_8:
    v160 = a3 & 1;
    v141 = a3;
    v174 = (uint64_t)&_swiftEmptyDictionarySingleton;
    v159 = a2 & 0xC000000000000001;
    v146 = a2 & 0xFFFFFFFFFFFFFF8;
    v145 = a2 + 32;
    v27 = swift_bridgeObjectRetain(a2);
    v28 = 0;
    v27.n128_u64[0] = 136315394;
    v149 = v27;
    v148 = (char *)&type metadata for Any + 8;
    v171 = xmmword_100218E30;
    v158 = v26;
    do
    {
      if (v159)
      {
        v29 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v28, a2);
      }
      else
      {
        if (v28 >= *(_QWORD *)(v146 + 16))
          goto LABEL_52;
        v29 = *(id *)(v145 + 8 * v28);
      }
      v30 = v29;
      v31 = __OFADD__(v28, 1);
      v32 = v28 + 1;
      if (v31)
      {
        __break(1u);
LABEL_49:
        __break(1u);
LABEL_50:
        __break(1u);
LABEL_51:
        __break(1u);
LABEL_52:
        __break(1u);
        JUMPOUT(0x10009AA0CLL);
      }
      v168 = v32;
      v33 = objc_msgSend(objc_allocWithZone((Class)CKFetchRecordZoneChangesConfiguration), "init");
      v170 = v33;
      if (v160)
      {
        type metadata accessor for LocalCache();
        v36 = v151;
        sub_10000840C();
        v37 = (uint64_t)v150;
        URL.appendingPathComponent(_:isDirectory:)(0x736E656B6F544B43, 0xED0000656E6F5A2FLL, 1);
        v38 = *(void (**)(_BYTE *, uint64_t))(v152 + 8);
        v39 = v153;
        v38(v36, v153);
        sub_1000E5764();
        v40 = objc_msgSend(v30, "ownerName");
        v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(v40);
        v43 = v42;

        v44._countAndFlagsBits = v41;
        v44._object = v43;
        URL.appendPathComponent(_:)(v44);
        swift_bridgeObjectRelease(v43);
        v45 = objc_msgSend(v30, "zoneName");
        v46 = static String._unconditionallyBridgeFromObjectiveC(_:)(v45);
        v48 = v47;

        aBlock._countAndFlagsBits = v46;
        aBlock._object = v48;
        v34 = v170;
        v49._countAndFlagsBits = 0x6E656B6F742ELL;
        v49._object = (void *)0xE600000000000000;
        String.append(_:)(v49);
        object = aBlock._object;
        URL.appendPathComponent(_:)(aBlock);
        swift_bridgeObjectRelease(object);
        v35 = (void *)sub_1000E58B0(v37);
        v38((_BYTE *)v37, v39);
      }
      else
      {
        v34 = v33;
        v35 = 0;
      }
      objc_msgSend(v34, "setPreviousServerChangeToken:", v35);
      v51 = v174;
      if ((v174 & 0xC000000000000001) != 0)
      {
        if (v174 >= 0)
          v51 = v174 & 0xFFFFFFFFFFFFFF8;
        v52 = v30;
        v53 = v34;
        v54 = __CocoaDictionary.count.getter(v51);
        if (__OFADD__(v54, 1))
          goto LABEL_50;
        v51 = sub_10009C0E8(v51, v54 + 1);
      }
      else
      {
        v55 = v30;
        v56 = v34;
      }
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v51);
      aBlock._countAndFlagsBits = v51;
      v174 = 0x8000000000000000;
      v59 = sub_10010ABF4((uint64_t)v30);
      v60 = *(_QWORD *)(v51 + 16);
      v61 = (v58 & 1) == 0;
      v62 = v60 + v61;
      if (__OFADD__(v60, v61))
        goto LABEL_49;
      v63 = v58;
      if (*(_QWORD *)(v51 + 24) >= v62)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          sub_100020984();
      }
      else
      {
        sub_10001DD00(v62, isUniquelyReferenced_nonNull_native);
        v64 = sub_10010ABF4((uint64_t)v30);
        if ((v63 & 1) != (v65 & 1))
          goto LABEL_60;
        v59 = v64;
      }
      countAndFlagsBits = (_QWORD *)aBlock._countAndFlagsBits;
      if ((v63 & 1) != 0)
      {
        v67 = *(_QWORD *)(aBlock._countAndFlagsBits + 56);

        *(_QWORD *)(v67 + 8 * v59) = v170;
      }
      else
      {
        *(_QWORD *)(aBlock._countAndFlagsBits + 8 * (v59 >> 6) + 64) |= 1 << v59;
        *(_QWORD *)(countAndFlagsBits[6] + 8 * v59) = v30;
        *(_QWORD *)(countAndFlagsBits[7] + 8 * v59) = v170;
        v68 = countAndFlagsBits[2];
        v31 = __OFADD__(v68, 1);
        v69 = v68 + 1;
        if (v31)
          goto LABEL_51;
        countAndFlagsBits[2] = v69;
        v70 = v30;
      }
      v174 = (uint64_t)countAndFlagsBits;

      swift_bridgeObjectRelease(0x8000000000000000);
      v71 = v167;
      v72 = v166;
      v73 = v164;
      (*(void (**)(_BYTE *, uint64_t, uint64_t))(v167 + 16))(v166, v161, v164);
      v74 = v30;
      v75 = v35;
      v76 = v74;
      v77 = v75;
      v78 = Logger.logObject.getter(v77);
      v165 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v78, (os_log_type_t)v165))
      {
        v157 = v78;
        v163 = v77;
        v79 = swift_slowAlloc(22, -1);
        v155 = swift_slowAlloc(64, -1);
        v181 = v155;
        *(_DWORD *)v79 = v149.n128_u32[0];
        v80 = objc_msgSend(v76, "zoneName");
        v81 = static String._unconditionallyBridgeFromObjectiveC(_:)(v80);
        v82 = v76;
        v84 = v83;

        *(_QWORD *)(v79 + 4) = sub_1001DEF4C(v81, v84, &v181);
        v162 = v82;

        swift_bridgeObjectRelease(v84);
        v156 = v79;
        *(_WORD *)(v79 + 12) = 2080;
        if (v35)
        {
          v85 = objc_msgSend(v163, "data");
          static Data._unconditionallyBridgeFromObjectiveC(_:)(v85);
          v87 = v86;

          v169 = v87;
          __asm { BR              X8 }
        }
        v28 = v168;
        v88 = v162;
        v89 = sub_1001DEF4C(7104878, 0xE300000000000000, &v181);
        v90 = (uint8_t *)v156;
        *(_QWORD *)(v156 + 14) = v89;
        v91 = v163;

        swift_bridgeObjectRelease(0xE300000000000000);
        v92 = v157;
        _os_log_impl((void *)&_mh_execute_header, v157, (os_log_type_t)v165, "Old change token for %s: %s", v90, 0x16u);
        v93 = v155;
        swift_arrayDestroy(v155, 2, v148);
        swift_slowDealloc(v93, -1, -1);
        swift_slowDealloc(v90, -1, -1);

        (*(void (**)(_BYTE *, uint64_t))(v167 + 8))(v166, v73);
      }
      else
      {

        (*(void (**)(_BYTE *, uint64_t))(v71 + 8))(v72, v73);
        v28 = v168;
      }
    }
    while (v28 != v158);
    v94 = swift_bridgeObjectRelease(a2);
    v95 = Logger.logObject.getter(v94);
    v96 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v95, v96))
    {
      v97 = (uint8_t *)swift_slowAlloc(12, -1);
      v98 = swift_slowAlloc(32, -1);
      aBlock._countAndFlagsBits = v98;
      *(_DWORD *)v97 = 136315138;
      swift_beginAccess(&v174, &v175, 0, 0);
      v99 = v174;
      v100 = sub_1000067D4(0, (unint64_t *)&qword_1002953A0, CKRecordZoneID_ptr);
      v101 = sub_1000067D4(0, &qword_10028F1B8, CKFetchRecordZoneChangesConfiguration_ptr);
      v102 = sub_10009C424();
      swift_bridgeObjectRetain(v99);
      v104 = Dictionary.description.getter(v103, v100, v101, v102);
      v106 = v105;
      v107 = v99;
      a2 = v147;
      swift_bridgeObjectRelease(v107);
      v181 = sub_1001DEF4C(v104, v106, &aBlock._countAndFlagsBits);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v181, v182);
      swift_bridgeObjectRelease(v106);
      _os_log_impl((void *)&_mh_execute_header, v95, v96, "Fetching zones with optionsByRecordZoneID: %s", v97, 0xCu);
      swift_arrayDestroy(v98, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v98, -1, -1);
      swift_slowDealloc(v97, -1, -1);
    }

    v108 = swift_allocObject(&unk_100263F90, 24, 7);
    *(_QWORD *)(v108 + 16) = &_swiftEmptyArrayStorage;
    v109 = swift_allocObject(&unk_100263FB8, 24, 7);
    *(_QWORD *)(v109 + 16) = &_swiftEmptyArrayStorage;
    sub_1000067D4(0, &qword_10028F1B0, CKFetchRecordZoneChangesOperation_ptr);
    swift_beginAccess(&v174, &v181, 0, 0);
    v110 = v174;
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRetain(v110);
    v183.value._rawValue = (void *)a2;
    v183.is_nil = v110;
    v111.super.super.super.super.isa = CKFetchRecordZoneChangesOperation.init(recordZoneIDs:configurationsByRecordZoneID:)(v183, v184).super.super.super.super.isa;
    v112 = -[objc_class configuration](v111.super.super.super.super.isa, "configuration");
    if (v112)
    {
      v113 = v112;
      objc_msgSend(v112, "setAutomaticallyRetryNetworkFailures:", 0);

      v114 = -[objc_class configuration](v111.super.super.super.super.isa, "configuration");
      if (v114)
      {
        v115 = v114;
        objc_msgSend(v114, "setDiscretionaryNetworkBehavior:", 0);

        -[objc_class setFetchAllChanges:](v111.super.super.super.super.isa, "setFetchAllChanges:", 1);
        v179 = sub_10009C35C;
        v180 = (_QWORD *)v109;
        aBlock._countAndFlagsBits = (uint64_t)_NSConcreteStackBlock;
        aBlock._object = (void *)1107296256;
        v177 = sub_10009908C;
        v178 = &unk_100263FD0;
        v116 = _Block_copy(&aBlock);
        v117 = v180;
        swift_retain(v109);
        swift_release(v117);
        -[objc_class setRecordChangedBlock:](v111.super.super.super.super.isa, "setRecordChangedBlock:", v116);
        _Block_release(v116);
        swift_retain(v108);
        CKFetchRecordZoneChangesOperation.recordWithIDWasDeletedBlock.setter(sub_10009C364, v108);
        v118 = swift_allocObject(&unk_100264008, 50, 7);
        *(_QWORD *)(v118 + 16) = v109;
        *(_QWORD *)(v118 + 24) = v108;
        v119 = v154;
        v120 = v142;
        *(_QWORD *)(v118 + 32) = v154;
        *(_QWORD *)(v118 + 40) = v120;
        *(_BYTE *)(v118 + 48) = v160;
        *(_BYTE *)(v118 + 49) = BYTE1(v141) & 1;
        v179 = sub_10009C3A8;
        v180 = (_QWORD *)v118;
        aBlock._countAndFlagsBits = (uint64_t)_NSConcreteStackBlock;
        aBlock._object = (void *)1107296256;
        v177 = sub_10009BCA4;
        v178 = &unk_100264020;
        v121 = _Block_copy(&aBlock);
        v122 = v180;
        swift_retain(v109);
        swift_retain(v108);
        v123 = v119;
        swift_retain(v120);
        swift_release(v122);
        -[objc_class setRecordZoneFetchCompletionBlock:](v111.super.super.super.super.isa, "setRecordZoneFetchCompletionBlock:", v121);
        _Block_release(v121);
        v124 = (_QWORD *)swift_allocObject(&unk_100264058, 40, 7);
        v125 = v143;
        v124[2] = a2;
        v124[3] = v125;
        v126 = v144;
        v124[4] = v144;
        v179 = sub_10009C418;
        v180 = v124;
        aBlock._countAndFlagsBits = (uint64_t)_NSConcreteStackBlock;
        aBlock._object = (void *)1107296256;
        v177 = sub_1001DC548;
        v178 = &unk_100264070;
        v127 = _Block_copy(&aBlock);
        v128 = v180;
        swift_bridgeObjectRetain(a2);
        swift_retain(v126);
        swift_release(v128);
        -[objc_class setFetchRecordZoneChangesCompletionBlock:](v111.super.super.super.super.isa, "setFetchRecordZoneChangesCompletionBlock:", v127);
        _Block_release(v127);
        v129 = v111.super.super.super.super.isa;
        v130 = Logger.logObject.getter(v129);
        v131 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v130, v131))
        {
          v132 = (uint8_t *)swift_slowAlloc(12, -1);
          v133 = swift_slowAlloc(8, -1);
          v172 = v123;
          v134 = (_QWORD *)v133;
          v173 = v109;
          *(_DWORD *)v132 = 138412290;
          aBlock._countAndFlagsBits = (uint64_t)v129;
          v135 = v129;
          v109 = v173;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &aBlock._object);
          *v134 = v129;

          _os_log_impl((void *)&_mh_execute_header, v130, v131, "Fetching record zone changes with operation: %@", v132, 0xCu);
          v136 = sub_1000080B4((uint64_t *)&unk_10028BC20);
          swift_arrayDestroy(v134, 1, v136);
          v137 = v134;
          v123 = v172;
          swift_slowDealloc(v137, -1, -1);
          swift_slowDealloc(v132, -1, -1);
        }
        else
        {

          v130 = v129;
        }

        objc_msgSend(v123, "addOperation:", v129);
        swift_release(v108);
        swift_release(v109);

        swift_bridgeObjectRelease(v174);
        return;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
LABEL_60:
    v139 = sub_1000067D4(0, (unint64_t *)&qword_1002953A0, CKRecordZoneID_ptr);
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v139);
    __break(1u);
    JUMPOUT(0x10009AAB0);
  }
  if (a2 < 0)
    v138 = a2;
  else
    v138 = a2 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(a2);
  v26 = _CocoaArrayWrapper.endIndex.getter(v138);
  swift_bridgeObjectRelease(a2);
  if (v26)
    goto LABEL_8;
}

void sub_10009AAC0(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  uint64_t v7;
  void (*v8)(void *, uint64_t, void *);
  id v9;
  id v10;

  v8 = *(void (**)(void *, uint64_t, void *))(a1 + 32);
  v7 = *(_QWORD *)(a1 + 40);
  swift_retain(v7);
  v10 = a2;
  v9 = a4;
  v8(a2, a3, a4);
  swift_release(v7);

}

uint64_t sub_10009AB3C(void *a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  id v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  id v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  id v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24[3];

  if (qword_10028ADB8 != -1)
    swift_once(&qword_10028ADB8, sub_100046CE4);
  v4 = (_QWORD *)(a2 + 16);
  v5 = type metadata accessor for Logger(0);
  sub_100005288(v5, (uint64_t)qword_1002A89A8);
  v6 = a1;
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = swift_slowAlloc(22, -1);
    v22 = swift_slowAlloc(64, -1);
    v24[0] = v22;
    *(_DWORD *)v9 = 136315394;
    v10 = CKRecord.recordType.getter();
    v12 = v11;
    v23 = sub_1001DEF4C(v10, v11, v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, v24);

    swift_bridgeObjectRelease(v12);
    *(_WORD *)(v9 + 12) = 2080;
    v13 = objc_msgSend(v6, "debugDescription");
    v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
    v16 = v15;

    v23 = sub_1001DEF4C(v14, v16, v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, v24);

    swift_bridgeObjectRelease(v16);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Record changed: %s %s", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy(v22, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v22, -1, -1);
    swift_slowDealloc(v9, -1, -1);

  }
  else
  {

  }
  swift_beginAccess(v4, v24, 33, 0);
  v17 = v6;
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
  v19 = *(_QWORD *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v18 = *(_QWORD *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v19 >= v18 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v18 > 1, v19 + 1, 1);
  v20 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v19, v17);
  specialized Array._endMutation()(v20);
  return swift_endAccess(v24);
}

void sub_10009ADD4(uint64_t a1, void *a2)
{
  uint64_t v3;
  void (*v4)(void);
  id v5;

  v4 = *(void (**)(void))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = a2;
  v4();
  swift_release(v3);

}

uint64_t sub_10009AE24(void *a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  char **v8;
  uint64_t v9;
  id v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  char *v16;
  id v17;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26[3];

  if (qword_10028ADB8 != -1)
    swift_once(&qword_10028ADB8, sub_100046CE4);
  v8 = (char **)(a4 + 16);
  v9 = type metadata accessor for Logger(0);
  sub_100005288(v9, (uint64_t)qword_1002A89A8);
  swift_bridgeObjectRetain_n(a3, 2);
  v10 = a1;
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = swift_slowAlloc(22, -1);
    v23 = (_QWORD *)swift_slowAlloc(8, -1);
    v24 = swift_slowAlloc(32, -1);
    v26[0] = v24;
    *(_DWORD *)v13 = 136315394;
    swift_bridgeObjectRetain(a3);
    v25 = sub_1001DEF4C(a2, a3, v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, v26);
    swift_bridgeObjectRelease_n(a3, 3);
    *(_WORD *)(v13 + 12) = 2112;
    v25 = (uint64_t)v10;
    v14 = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, v26);
    *v23 = v10;

    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Record deleted: %s %@", (uint8_t *)v13, 0x16u);
    v15 = sub_1000080B4((uint64_t *)&unk_10028BC20);
    swift_arrayDestroy(v23, 1, v15);
    swift_slowDealloc(v23, -1, -1);
    swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v24, -1, -1);
    swift_slowDealloc(v13, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a3, 2);
  }
  swift_beginAccess(v8, v26, 33, 0);
  v16 = *v8;
  swift_bridgeObjectRetain(a3);
  v17 = v10;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v16);
  *v8 = v16;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v16 = sub_1001344E8(0, *((_QWORD *)v16 + 2) + 1, 1, v16);
    *v8 = v16;
  }
  v20 = *((_QWORD *)v16 + 2);
  v19 = *((_QWORD *)v16 + 3);
  if (v20 >= v19 >> 1)
  {
    v16 = sub_1001344E8((char *)(v19 > 1), v20 + 1, 1, v16);
    *v8 = v16;
  }
  *((_QWORD *)v16 + 2) = v20 + 1;
  v21 = &v16[24 * v20];
  *((_QWORD *)v21 + 4) = v17;
  *((_QWORD *)v21 + 5) = a2;
  *((_QWORD *)v21 + 6) = a3;
  return swift_endAccess(v26);
}

void sub_10009B12C(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, __int16 a11)
{
  void *v16;
  uint64_t *v17;
  id v18;
  id v19;
  id v20;
  uint64_t v21;
  id v22;
  id v23;
  NSObject *v24;
  os_log_type_t v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  id v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  void *v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  uint8_t *v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  unint64_t v56;
  NSObject *v57;
  NSObject *v58;
  os_log_type_t v59;
  uint8_t *v60;
  uint64_t v61;
  NSObject *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t Strong;
  NSObject *v69;
  os_log_type_t v70;
  uint8_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint8_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  NSObject *v82;
  uint64_t v83;
  uint64_t v84;
  os_log_type_t v85;
  NSObject *log;
  uint64_t v87;
  id v88;
  uint64_t v89;
  void *v90;
  uint64_t *v91;
  NSObject **v92;
  uint64_t v93;
  char v94[24];
  char v95[24];
  char v96[24];
  char v97[24];
  uint64_t v98;
  _BYTE v99[16];
  id v100;
  _BYTE v101[24];

  if (qword_10028ADC0 != -1)
    swift_once(&qword_10028ADC0, sub_100046D04);
  v16 = a9;
  v17 = (uint64_t *)(a7 + 16);
  v93 = type metadata accessor for Logger(0);
  sub_100005288(v93, (uint64_t)qword_1002A89C0);
  v18 = a2;
  swift_retain_n(a7, 2);
  swift_retain_n(a8, 2);
  v19 = a1;
  v20 = v18;
  v21 = a7;
  v22 = v20;
  v23 = v19;
  v24 = Logger.logObject.getter(v23);
  v25 = static os_log_type_t.debug.getter();
  v90 = a2;
  if (os_log_type_enabled(v24, v25))
  {
    v85 = v25;
    log = v24;
    v87 = v21;
    v91 = v17;
    v89 = a6;
    v26 = swift_slowAlloc(42, -1);
    v84 = swift_slowAlloc(64, -1);
    v100 = (id)v84;
    *(_DWORD *)v26 = 136315906;
    v27 = objc_msgSend(v23, "zoneName");
    v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
    v30 = v29;

    v98 = sub_1001DEF4C(v28, v30, (uint64_t *)&v100);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v98, v99);

    v88 = v23;
    swift_bridgeObjectRelease(v30);
    *(_WORD *)(v26 + 12) = 2080;
    if (a2)
    {
      v31 = objc_msgSend(v22, "data");
      v32 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v31);
      v34 = v33;

      sub_1001D34B0(v32, v34);
      v36 = v35;
      v98 = v35;
      v37 = sub_1000080B4((uint64_t *)&unk_10028E800);
      v38 = sub_10008685C();
      v39 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v37, v38);
      v41 = v40;
      swift_bridgeObjectRelease(v36);
      sub_10000F494(v32, v34);
    }
    else
    {
      v41 = 0xE300000000000000;
      v39 = 7104878;
    }
    v98 = sub_1001DEF4C(v39, v41, (uint64_t *)&v100);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v98, v99);

    swift_bridgeObjectRelease(v41);
    *(_WORD *)(v26 + 22) = 2048;
    swift_beginAccess(v91, v95, 0, 0);
    v64 = *v91;
    if ((unint64_t)*v91 >> 62)
    {
      if (v64 < 0)
        v83 = *v91;
      else
        v83 = v64 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v64);
      v65 = _CocoaArrayWrapper.endIndex.getter(v83);
      v66 = v87;
      swift_release(v87);
      swift_bridgeObjectRelease(v64);
    }
    else
    {
      v65 = *(_QWORD *)((v64 & 0xFFFFFFFFFFFFF8) + 0x10);
      v66 = v87;
      swift_release(v87);
    }
    a6 = v89;
    v16 = a9;
    v23 = v88;
    v98 = v65;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v98, v99);
    swift_release(v66);
    *(_WORD *)(v26 + 32) = 2048;
    v42 = (uint64_t *)(a8 + 16);
    swift_beginAccess(a8 + 16, v94, 0, 0);
    v67 = *(_QWORD *)(*(_QWORD *)(a8 + 16) + 16);
    swift_release(a8);
    v98 = v67;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v98, v99);
    swift_release(a8);
    _os_log_impl((void *)&_mh_execute_header, log, v85, "record zone fetch complete. Zone: %s, Token: %s, Changed: %ld, Deleted: %ld", (uint8_t *)v26, 0x2Au);
    swift_arrayDestroy(v84, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v84, -1, -1);
    swift_slowDealloc(v26, -1, -1);

    v17 = v91;
    v43 = a10;
    if (!v89)
      goto LABEL_21;
  }
  else
  {

    swift_release_n(v21, 2);
    swift_release_n(a8, 2);
    v42 = (uint64_t *)(a8 + 16);
    v43 = a10;
    if (!a6)
    {
LABEL_21:
      Strong = swift_unknownObjectWeakLoadStrong(v43 + 16);
      v69 = Logger.logObject.getter(Strong);
      if (Strong)
      {
        v70 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v69, v70))
        {
          v71 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v71 = 0;
          _os_log_impl((void *)&_mh_execute_header, v69, v70, "Sync delegate is not nil. Saving/deleting records on disk.", v71, 2u);
          swift_slowDealloc(v71, -1, -1);
        }

        swift_beginAccess(v17, v97, 0, 0);
        v72 = *v17;
        swift_bridgeObjectRetain(*v17);
        sub_1001278F0(v16, v72);
        swift_bridgeObjectRelease(v72);
        swift_beginAccess(v42, v96, 0, 0);
        v73 = *v42;
        swift_bridgeObjectRetain(*v42);
        sub_100129E84(v16, v73);
        swift_bridgeObjectRelease(v73);
        sub_1000E5374(v23, v90);
        swift_unknownObjectRelease(Strong);
      }
      else
      {
        v74 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v69, (os_log_type_t)v74))
        {
          v75 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v75 = 0;
          _os_log_impl((void *)&_mh_execute_header, v69, (os_log_type_t)v74, "Sync delegate is nil", v75, 2u);
          swift_slowDealloc(v75, -1, -1);
        }

      }
      swift_beginAccess(v17, &v100, 1, 0);
      v76 = *v17;
      *v17 = (uint64_t)&_swiftEmptyArrayStorage;
      swift_bridgeObjectRelease(v76);
      swift_beginAccess(v42, &v98, 1, 0);
      v77 = *v42;
      *v42 = (uint64_t)&_swiftEmptyArrayStorage;
      swift_bridgeObjectRelease(v77);
      return;
    }
  }
  v44 = v23;
  swift_errorRetain(a6);
  if (qword_10028ADB8 != -1)
    swift_once(&qword_10028ADB8, sub_100046CE4);
  sub_100005288(v93, (uint64_t)qword_1002A89A8);
  v45 = swift_errorRetain(a6);
  v46 = Logger.logObject.getter(v45);
  v47 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v46, v47))
  {
    v48 = (uint8_t *)swift_slowAlloc(12, -1);
    v49 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v48 = 138412290;
    v50 = _convertErrorToNSError(_:)(a6);
    v100 = (id)v50;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v100, v101);
    *v49 = v50;
    swift_errorRelease(a6);
    _os_log_impl((void *)&_mh_execute_header, v46, v47, "Error fetching record zone: %@", v48, 0xCu);
    v51 = sub_1000080B4((uint64_t *)&unk_10028BC20);
    swift_arrayDestroy(v49, 1, v51);
    swift_slowDealloc(v49, -1, -1);
    swift_slowDealloc(v48, -1, -1);
  }
  else
  {
    swift_errorRelease(a6);
  }

  v100 = (id)a6;
  swift_errorRetain(a6);
  v52 = sub_1000080B4(&qword_10028E850);
  type metadata accessor for CKError(0);
  v54 = v53;
  if ((swift_dynamicCast(&v98, &v100, v52, v53, 6) & 1) != 0)
  {
    v55 = (void *)v98;
    v56 = sub_10009C47C();
    _BridgedStoredNSError.code.getter(&v100, v54, v56);
    if (v100 == (id)21)
    {
      v57 = v44;
      v58 = Logger.logObject.getter(v57);
      v59 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v58, v59))
      {
        v60 = (uint8_t *)swift_slowAlloc(12, -1);
        v92 = (NSObject **)swift_slowAlloc(8, -1);
        *(_DWORD *)v60 = 138412290;
        v100 = v57;
        v61 = a6;
        v62 = v57;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v100, v101);
        *v92 = v57;

        a6 = v61;
        _os_log_impl((void *)&_mh_execute_header, v58, v59, "Clearing change token for zone %@ due to error, and pulling again", v60, 0xCu);
        v63 = sub_1000080B4((uint64_t *)&unk_10028BC20);
        swift_arrayDestroy(v92, 1, v63);
        swift_slowDealloc(v92, -1, -1);
        swift_slowDealloc(v60, -1, -1);
      }
      else
      {

        v58 = v57;
      }

      sub_1000E5374(v57, 0);
      v78 = sub_1000080B4(&qword_10028D570);
      v79 = swift_allocObject(v78, 40, 7);
      *(_OWORD *)(v79 + 16) = xmmword_10021A1B0;
      *(_QWORD *)(v79 + 32) = v57;
      v100 = (id)v79;
      specialized Array._endMutation()(v79);
      v80 = (uint64_t)v100;
      v81 = swift_allocObject(&unk_1002640A8, 24, 7);
      *(_QWORD *)(v81 + 16) = v57;
      v82 = v57;
      sub_10009974C(v16, v80, a11 & 0x101, sub_10009C4E8, v81);
      swift_errorRelease(a6);
      swift_bridgeObjectRelease(v80);
      swift_release(v81);
    }
    else
    {
      swift_errorRelease(a6);
    }

  }
  else
  {
    swift_errorRelease(a6);
  }
}

void sub_10009BAF4(uint64_t a1, void *a2)
{
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  _QWORD *v7;
  id v8;
  uint64_t v9;
  id v10;
  id v11;
  uint64_t v12;

  if (qword_10028ADC0 != -1)
    swift_once(&qword_10028ADC0, sub_100046D04);
  v3 = type metadata accessor for Logger(0);
  sub_100005288(v3, (uint64_t)qword_1002A89C0);
  v10 = a2;
  v4 = Logger.logObject.getter(v10);
  v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = (_QWORD *)swift_slowAlloc(8, -1);
    *(_DWORD *)v6 = 138412290;
    v11 = v10;
    v8 = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v11, &v12);
    *v7 = v10;

    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Completed zone pull of %@ with nil change token", v6, 0xCu);
    v9 = sub_1000080B4((uint64_t *)&unk_10028BC20);
    swift_arrayDestroy(v7, 1, v9);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

  }
  else
  {

  }
}

uint64_t sub_10009BCA4(uint64_t a1, void *a2, void *a3, void *a4, uint64_t a5, void *a6)
{
  void *v8;
  uint64_t v11;
  void (*v12)(void *, void *, void *, unint64_t, uint64_t, void *);
  id v13;
  id v14;
  id v15;
  unint64_t v16;
  unint64_t v17;
  id v18;
  id v19;
  id v20;

  v8 = a4;
  v12 = *(void (**)(void *, void *, void *, unint64_t, uint64_t, void *))(a1 + 32);
  v11 = *(_QWORD *)(a1 + 40);
  if (a4)
  {
    swift_retain(v11);
    v13 = a2;
    v14 = a3;
    v15 = v8;
    v8 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)(v8);
    v17 = v16;

  }
  else
  {
    swift_retain(v11);
    v18 = a2;
    v19 = a3;
    v17 = 0xF000000000000000;
  }
  v20 = a6;
  v12(a2, a3, v8, v17, a5, a6);

  sub_1000144D8((uint64_t)v8, v17);
  return swift_release(v11);
}

uint64_t sub_10009BD78(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v25)(_QWORD);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  if (qword_10028ADC0 != -1)
    swift_once(&qword_10028ADC0, sub_100046D04);
  v6 = type metadata accessor for Logger(0);
  sub_100005288(v6, (uint64_t)qword_1002A89C0);
  v7 = swift_bridgeObjectRetain_n(a2, 2);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(12, -1);
    v25 = a3;
    v11 = swift_slowAlloc(32, -1);
    v27 = v11;
    *(_DWORD *)v10 = 136315138;
    sub_1000067D4(0, (unint64_t *)&qword_1002953A0, CKRecordZoneID_ptr);
    v12 = swift_bridgeObjectRetain(a2);
    v13 = Array.description.getter(v12);
    v15 = v14;
    swift_bridgeObjectRelease(a2);
    v26 = sub_1001DEF4C(v13, v15, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27);
    swift_bridgeObjectRelease_n(a2, 2);
    swift_bridgeObjectRelease(v15);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Fetch record zone changes complete. ZoneIDs: %s", v10, 0xCu);
    swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
    v16 = v11;
    a3 = v25;
    swift_slowDealloc(v16, -1, -1);
    swift_slowDealloc(v10, -1, -1);

    if (!a1)
      return a3(a1);
  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
    if (!a1)
      return a3(a1);
  }
  swift_errorRetain(a1);
  if (qword_10028ADB8 != -1)
    swift_once(&qword_10028ADB8, sub_100046CE4);
  sub_100005288(v6, (uint64_t)qword_1002A89A8);
  v17 = swift_errorRetain(a1);
  v18 = Logger.logObject.getter(v17);
  v19 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v18, v19))
  {
    v20 = (uint8_t *)swift_slowAlloc(12, -1);
    v21 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v20 = 138412290;
    v22 = _convertErrorToNSError(_:)(a1);
    v27 = v22;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, &v28);
    *v21 = v22;
    swift_errorRelease(a1);
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Error fetching record zone changes: %@", v20, 0xCu);
    v23 = sub_1000080B4((uint64_t *)&unk_10028BC20);
    swift_arrayDestroy(v21, 1, v23);
    swift_slowDealloc(v21, -1, -1);
    swift_slowDealloc(v20, -1, -1);

    swift_errorRelease(a1);
  }
  else
  {
    swift_errorRelease(a1);
    swift_errorRelease(a1);

  }
  return a3(a1);
}

Swift::Int sub_10009C0E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int result;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  if (a2)
  {
    sub_1000080B4(&qword_10028C120);
    v4 = static _DictionaryStorage.convert(_:capacity:)(a1, a2);
    v30 = v4;
    v5 = __CocoaDictionary.makeIterator()(a1);
    v6 = __CocoaDictionary.Iterator.next()();
    if (v6)
    {
      v8 = v6;
      v9 = v7;
      v10 = sub_1000067D4(0, (unint64_t *)&qword_1002953A0, CKRecordZoneID_ptr);
      do
      {
        v28 = v8;
        swift_dynamicCast(&v29, &v28, (char *)&type metadata for Swift.AnyObject + 8, v10, 7);
        v27 = v9;
        v21 = sub_1000067D4(0, &qword_10028F1B8, CKFetchRecordZoneChangesConfiguration_ptr);
        swift_dynamicCast(&v28, &v27, (char *)&type metadata for Swift.AnyObject + 8, v21, 7);
        v4 = v30;
        v22 = *(_QWORD *)(v30 + 16);
        if (*(_QWORD *)(v30 + 24) <= v22)
        {
          sub_10001DD00(v22 + 1, 1);
          v4 = v30;
        }
        v12 = v28;
        v11 = v29;
        result = NSObject._rawHashValue(seed:)(*(_QWORD *)(v4 + 40));
        v14 = v4 + 64;
        v15 = -1 << *(_BYTE *)(v4 + 32);
        v16 = result & ~v15;
        v17 = v16 >> 6;
        if (((-1 << v16) & ~*(_QWORD *)(v4 + 64 + 8 * (v16 >> 6))) != 0)
        {
          v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v4 + 64 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
        }
        else
        {
          v23 = 0;
          v24 = (unint64_t)(63 - v15) >> 6;
          do
          {
            if (++v17 == v24 && (v23 & 1) != 0)
            {
              __break(1u);
              return result;
            }
            v25 = v17 == v24;
            if (v17 == v24)
              v17 = 0;
            v23 |= v25;
            v26 = *(_QWORD *)(v14 + 8 * v17);
          }
          while (v26 == -1);
          v18 = __clz(__rbit64(~v26)) + (v17 << 6);
        }
        *(_QWORD *)(v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
        v19 = 8 * v18;
        *(_QWORD *)(*(_QWORD *)(v4 + 48) + v19) = v11;
        *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v12;
        ++*(_QWORD *)(v4 + 16);
        v8 = __CocoaDictionary.Iterator.next()();
        v9 = v20;
      }
      while (v8);
    }
    swift_release(v5);
  }
  else
  {
    swift_unknownObjectRelease(a1);
    return (Swift::Int)&_swiftEmptyDictionarySingleton;
  }
  return v4;
}

uint64_t sub_10009C338()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10009C35C(void *a1)
{
  uint64_t v1;

  return sub_10009AB3C(a1, v1);
}

uint64_t sub_10009C364(void *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;

  return sub_10009AE24(a1, a2, a3, v3);
}

uint64_t sub_10009C36C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));

  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 50, 7);
}

void sub_10009C3A8(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  __int16 v7;

  if (*(_BYTE *)(v6 + 49))
    v7 = 256;
  else
    v7 = 0;
  sub_10009B12C(a1, a2, a3, a4, a5, a6, *(_QWORD *)(v6 + 16), *(_QWORD *)(v6 + 24), *(void **)(v6 + 32), *(_QWORD *)(v6 + 40), v7 | *(unsigned __int8 *)(v6 + 48));
}

uint64_t sub_10009C3EC()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10009C418(uint64_t a1)
{
  uint64_t v1;

  return sub_10009BD78(a1, *(_QWORD *)(v1 + 16), *(uint64_t (**)(_QWORD))(v1 + 24));
}

unint64_t sub_10009C424()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10028F1C0;
  if (!qword_10028F1C0)
  {
    v1 = sub_1000067D4(255, (unint64_t *)&qword_1002953A0, CKRecordZoneID_ptr);
    result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_10028F1C0);
  }
  return result;
}

unint64_t sub_10009C47C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10028B678;
  if (!qword_10028B678)
  {
    type metadata accessor for CKError(255);
    result = swift_getWitnessTable(&unk_100218478, v1);
    atomic_store(result, (unint64_t *)&qword_10028B678);
  }
  return result;
}

uint64_t sub_10009C4C4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_10009C4E8(uint64_t a1)
{
  uint64_t v1;

  sub_10009BAF4(a1, *(void **)(v1 + 16));
}

uint64_t sub_10009C4F0(void *a1)
{
  uint64_t v1;

  return sub_100099090(a1, v1);
}

uint64_t sub_10009C508()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 40));
  swift_release(*(_QWORD *)(v0 + 64));
  swift_release(*(_QWORD *)(v0 + 72));
  return swift_deallocObject(v0, 80, 7);
}

uint64_t sub_10009C54C(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  __int16 v4;

  if (*(_BYTE *)(v3 + 49))
    v4 = 256;
  else
    v4 = 0;
  return sub_100099128(a1, a2, a3, *(void **)(v3 + 16), *(_QWORD *)(v3 + 24), *(_QWORD *)(v3 + 32), *(_QWORD *)(v3 + 40), v4 | *(unsigned __int8 *)(v3 + 48), *(void (**)(_QWORD))(v3 + 56), *(_QWORD *)(v3 + 64), *(_QWORD *)(v3 + 72));
}

void sub_10009C598(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_1001B1FC0(a1, a2, *(void **)(v2 + 16));
}

uint64_t sub_10009C5A0()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 56));
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_10009C5DC(uint64_t a1)
{
  uint64_t v1;
  uint64_t (*v2)(_QWORD);

  v2 = *(uint64_t (**)(_QWORD))(v1 + 48);
  if (!a1)
    sub_1000E4EA4(*(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(void **)(v1 + 40));
  return v2(0);
}

uint64_t sub_10009C650()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = v0 + OBJC_IVAR____TtC13appleaccountd25NotReachableStatusHandler__notificationManager;
  v2 = sub_1000080B4(&qword_10028D068);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  v3 = v0 + OBJC_IVAR____TtC13appleaccountd25NotReachableStatusHandler__cdpRequestController;
  v4 = sub_1000080B4((uint64_t *)&unk_10028CC80);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  v5 = v0 + OBJC_IVAR____TtC13appleaccountd25NotReachableStatusHandler__custodianStorageController;
  v6 = sub_1000080B4(&qword_10028C448);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_10009C6FC()
{
  return type metadata accessor for NotReachableStatusHandler(0);
}

uint64_t type metadata accessor for NotReachableStatusHandler(uint64_t a1)
{
  uint64_t result;

  result = qword_10028F210;
  if (!qword_10028F210)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for NotReachableStatusHandler);
  return result;
}

void sub_10009C740(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[3];

  sub_100017464(319, (unint64_t *)&qword_10028CFD8, &qword_100294AE0);
  if (v3 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_100017464(319, &qword_10028BDA8, &qword_10028C8D0);
    if (v5 <= 0x3F)
    {
      v8[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_100017464(319, (unint64_t *)&qword_10028C350, &qword_10028C880);
      if (v7 <= 0x3F)
      {
        v8[2] = *(_QWORD *)(v6 - 8) + 64;
        swift_updateClassMetadata2(a1, 256, 3, v8, a1 + 80);
      }
    }
  }
}

uint64_t sub_10009C810(uint64_t result, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0 && a2 == 2)
    return sub_10009C844(result);
  return result;
}

uint64_t sub_10009C844(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  void *v23;
  id v24;
  id v25;
  uint64_t result;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  char *v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t);
  char *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  _QWORD v48[3];
  uint64_t v49;

  v2 = v1;
  v46 = a1;
  v44 = type metadata accessor for URL(0);
  v42 = *(_QWORD *)(v44 - 8);
  v4 = __chkstk_darwin(v44, v3);
  v41 = (char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4, v6);
  v43 = (char *)&v41 - v7;
  v8 = sub_1000080B4(&qword_10028C448);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v12 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for CustodianRecord(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(_QWORD *)(v14 + 64);
  __chkstk_darwin(v13, v16);
  v17 = (char *)&v41 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_1000080B4((uint64_t *)&unk_10028CC80);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18, v20);
  v22 = (char *)&v41 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = v2;
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v22, v2 + OBJC_IVAR____TtC13appleaccountd25NotReachableStatusHandler__cdpRequestController, v18);
  Dependency.wrappedValue.getter(v48, v18);
  (*(void (**)(char *, uint64_t))(v19 + 8))(v22, v18);
  v23 = *(void **)(*sub_10000732C(v48, v49) + 16);
  v47 = 0;
  v24 = objc_msgSend(v23, "walrusStatus:", &v47);
  if (v47)
  {
    v25 = v47;
    swift_willThrow(v25);

    return sub_100006F58(v48);
  }
  else
  {
    v27 = v24;
    v28 = v45;
    v29 = v46;
    result = sub_100006F58(v48);
    if (v27 == (id)1)
    {
      sub_100027FE8(v29, (uint64_t)&v41 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for CustodianRecord);
      v30 = *(unsigned __int8 *)(v14 + 80);
      v31 = (v30 + 24) & ~v30;
      v32 = swift_allocObject(&unk_1002641F8, v31 + v15, v30 | 7);
      *(_QWORD *)(v32 + 16) = v28;
      sub_10003B730((uint64_t)v17, v32 + v31, type metadata accessor for CustodianRecord);
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, v28 + OBJC_IVAR____TtC13appleaccountd25NotReachableStatusHandler__custodianStorageController, v8);
      swift_retain(v28);
      Dependency.wrappedValue.getter(v48, v8);
      (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
      v33 = sub_10000732C(v48, v49);
      v34 = swift_allocObject(&unk_100264220, 32, 7);
      *(_QWORD *)(v34 + 16) = sub_10009E034;
      *(_QWORD *)(v34 + 24) = v32;
      v35 = sub_10000732C((_QWORD *)(*v33 + 16), *(_QWORD *)(*v33 + 40));
      type metadata accessor for LocalCache();
      swift_retain(v32);
      v36 = v41;
      sub_10000840C();
      v37 = (uint64_t)v43;
      URL.appendingPathComponent(_:isDirectory:)(0x6169646F74737543, 0xEF64726F6365526ELL, 1);
      v38 = *(void (**)(char *, uint64_t))(v42 + 8);
      v39 = v36;
      v40 = v44;
      v38(v39, v44);
      sub_10000732C((_QWORD *)(*v35 + 16), *(_QWORD *)(*v35 + 40));
      sub_10009D0A8(v37, (uint64_t)sub_10009E0A8, v34, (uint64_t)&unk_100264248, (uint64_t)sub_10009E0B8, (uint64_t)&unk_100264260);
      v38((char *)v37, v40);
      swift_release(v34);
      sub_100006F58(v48);
      return swift_release(v32);
    }
  }
  return result;
}

void sub_10009CC14(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  _QWORD v26[5];
  __int128 v27[3];

  v8 = sub_1000080B4(&qword_10028D068);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v12 = (char *)&v26[-1] - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for TrustedContactUserNotification(0);
  __chkstk_darwin(v13, v14);
  v16 = (v15 + 15) & 0xFFFFFFFFFFFFFFF0;
  v17 = (char *)&v26[-1] - v16;
  if ((a2 & 1) != 0)
  {
    swift_errorRetain(a1);
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v18 = type metadata accessor for Logger(0);
    sub_100005288(v18, (uint64_t)qword_1002A89D8);
    v19 = swift_errorRetain(a1);
    v25 = Logger.logObject.getter(v19);
    v20 = static os_log_type_t.error.getter(v25);
    if (os_log_type_enabled(v25, v20))
    {
      v21 = (uint8_t *)swift_slowAlloc(12, -1);
      v22 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v21 = 138412290;
      v23 = _convertErrorToNSError(_:)(a1);
      *(_QWORD *)&v27[0] = v23;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v27, (char *)v27 + 8);
      *v22 = v23;
      sub_10006AEB4(a1, 1);
      _os_log_impl((void *)&_mh_execute_header, v25, v20, "Error finding if a healthy custodian exists: %@", v21, 0xCu);
      v24 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v22, 1, v24);
      swift_slowDealloc(v22, -1, -1);
      swift_slowDealloc(v21, -1, -1);

      sub_10006AEB4(a1, 1);
    }
    else
    {
      sub_10006AEB4(a1, 1);
      sub_10006AEB4(a1, 1);

    }
  }
  else if ((a1 & 1) == 0)
  {
    sub_100027FE8(a4, (uint64_t)&v26[-1] - v16, type metadata accessor for CustodianRecord);
    swift_storeEnumTagMultiPayload(v17, v13, 5);
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, a3 + OBJC_IVAR____TtC13appleaccountd25NotReachableStatusHandler__notificationManager, v8);
    Dependency.wrappedValue.getter(v26, v8);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    sub_10000732C(v26, v26[3]);
    sub_100171484((uint64_t)v27);
    sub_1001CEA64(v27);
    sub_100043418((uint64_t)v27);
    sub_100028388((uint64_t)v17, type metadata accessor for TrustedContactUserNotification);
    sub_100006F58(v26);
  }
}

uint64_t sub_10009CF24(uint64_t a1, char a2, void (*a3)(uint64_t, uint64_t), uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[2];

  v8 = a2 & 1;
  v9 = type metadata accessor for CustodianRecord(0);
  __chkstk_darwin(v9, v10);
  v13 = (char *)v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 1) != 0)
  {
    swift_errorRetain(a1);
  }
  else
  {
    v14 = *(_QWORD *)(a1 + 16);
    if (v14)
    {
      v19[1] = a4;
      v15 = a1 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
      v16 = *(_QWORD *)(v11 + 72);
      swift_bridgeObjectRetain(a1);
      while (1)
      {
        sub_100027FE8(v15, (uint64_t)v13, type metadata accessor for CustodianRecord);
        v17 = *(_QWORD *)&v13[*(int *)(v9 + 36)];
        sub_100028388((uint64_t)v13, type metadata accessor for CustodianRecord);
        if (v17 == 2)
          break;
        v15 += v16;
        if (!--v14)
        {
          sub_1000057B0(a1, 0);
          a1 = 0;
          goto LABEL_10;
        }
      }
      sub_1000057B0(a1, 0);
      a1 = 1;
    }
    else
    {
      a1 = 0;
    }
  }
LABEL_10:
  a3(a1, v8);
  return sub_10006AEB4(a1, v8);
}

uint64_t sub_10009D070(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10009D0A8(a1, a2, a3, (uint64_t)&unk_100264298, (uint64_t)sub_10009E120, (uint64_t)&unk_1002642B0);
}

uint64_t sub_10009D08C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10009D0A8(a1, a2, a3, (uint64_t)&unk_100264428, (uint64_t)sub_10009E1E8, (uint64_t)&unk_100264440);
}

uint64_t sub_10009D0A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  _QWORD aBlock[5];
  uint64_t v48;

  v41 = a6;
  v38 = a3;
  v39 = a5;
  v36 = a4;
  v37 = a2;
  v7 = v6;
  v42 = type metadata accessor for DispatchWorkItemFlags(0);
  v45 = *(_QWORD *)(v42 - 8);
  __chkstk_darwin(v42, v9);
  v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchQoS(0);
  v43 = *(_QWORD *)(v12 - 8);
  v44 = v12;
  __chkstk_darwin(v12, v13);
  v15 = (char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for URL(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(_QWORD *)(v17 + 64);
  __chkstk_darwin(v16, v19);
  v20 = (char *)&v35 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = *(_QWORD *)(v7 + 32);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v20, a1, v16);
  v21 = *(unsigned __int8 *)(v17 + 80);
  v22 = (v21 + 16) & ~v21;
  v23 = (v18 + v22 + 7) & 0xFFFFFFFFFFFFFFF8;
  v24 = (v23 + 23) & 0xFFFFFFFFFFFFFFF8;
  v25 = swift_allocObject(v36, v24 + 8, v21 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v17 + 32))(v25 + v22, v20, v16);
  v26 = (_QWORD *)(v25 + v23);
  v27 = v38;
  *v26 = v37;
  v26[1] = v27;
  *(_QWORD *)(v25 + v24) = v7;
  aBlock[4] = v39;
  v48 = v25;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000051D0;
  aBlock[3] = v41;
  v28 = _Block_copy(aBlock);
  swift_retain(v27);
  v29 = swift_retain(v7);
  static DispatchQoS.unspecified.getter(v29);
  v46 = &_swiftEmptyArrayStorage;
  v30 = sub_100005150((unint64_t *)&qword_10028CD20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v31 = sub_1000080B4((uint64_t *)&unk_100295A00);
  v32 = sub_100008628();
  v33 = v42;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v46, v31, v32, v42, v30);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v15, v11, v28);
  _Block_release(v28);
  (*(void (**)(char *, uint64_t))(v45 + 8))(v11, v33);
  (*(void (**)(char *, uint64_t))(v43 + 8))(v15, v44);
  return swift_release(v48);
}

uint64_t sub_10009D320(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10009D0A8(a1, a2, a3, (uint64_t)&unk_100264248, (uint64_t)sub_10009E0B8, (uint64_t)&unk_100264260);
}

uint64_t sub_10009D33C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10009D0A8(a1, a2, a3, (uint64_t)&unk_100264388, (uint64_t)sub_10009E198, (uint64_t)&unk_1002643A0);
}

uint64_t sub_10009D358(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10009D0A8(a1, a2, a3, (uint64_t)&unk_100264338, (uint64_t)sub_10009E170, (uint64_t)&unk_100264350);
}

uint64_t sub_10009D374(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10009D0A8(a1, a2, a3, (uint64_t)&unk_1002642E8, (uint64_t)sub_10009E148, (uint64_t)&unk_100264300);
}

uint64_t sub_10009D390(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10009D0A8(a1, a2, a3, (uint64_t)&unk_1002643D8, (uint64_t)sub_10009E1C0, (uint64_t)&unk_1002643F0);
}

uint64_t sub_10009D3AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10009D0A8(a1, a2, a3, (uint64_t)&unk_1002644C8, (uint64_t)sub_10009E214, (uint64_t)&unk_1002644E0);
}

uint64_t sub_10009D3C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10009D0A8(a1, a2, a3, (uint64_t)&unk_100264518, (uint64_t)sub_10009E23C, (uint64_t)&unk_100264530);
}

uint64_t sub_10009D3E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10009D0A8(a1, a2, a3, (uint64_t)&unk_100264568, (uint64_t)sub_10009E2F4, (uint64_t)&unk_100264580);
}

uint64_t sub_10009D400(uint64_t a1, void (*a2)(uint64_t, uint64_t), uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t), unint64_t *a6, uint64_t a7, uint64_t (*a8)(_QWORD, uint64_t, uint64_t))
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  void *v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  NSString v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  NSString v40;
  id v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  _QWORD *v59;
  id v60;
  id v61;
  uint64_t v62;
  uint64_t (*v63)(uint64_t);
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  _QWORD *v67;
  unint64_t v68;
  unint64_t v69;
  os_log_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  NSObject *v74;
  os_log_type_t v75;
  uint8_t *v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  id v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  NSObject *v88;
  os_log_type_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t (*v105)(_QWORD, uint64_t, uint64_t);
  char *v106;
  uint64_t v107;
  void (*v108)(char *, uint64_t, uint64_t);
  void (*v109)(uint64_t, uint64_t);
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  uint64_t (*v114)(uint64_t);
  unint64_t *v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  _QWORD *v122;
  uint64_t v123;
  uint64_t v124;
  os_log_t v125;
  _QWORD *v126;
  uint64_t v127;
  id v128[2];

  v105 = a8;
  v115 = a6;
  v116 = a7;
  v117 = a4;
  v109 = a2;
  v114 = a5;
  v113 = a5(0);
  v111 = *(_QWORD *)(v113 - 8);
  v11 = __chkstk_darwin(v113, v10);
  v125 = (os_log_t)((char *)&v103 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = __chkstk_darwin(v11, v13);
  v112 = (uint64_t *)((char *)&v103 - v15);
  __chkstk_darwin(v14, v16);
  v124 = (uint64_t)&v103 - v17;
  v18 = sub_1000080B4((uint64_t *)&unk_10028DC30);
  __chkstk_darwin(v18, v19);
  v118 = (char *)&v103 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for URL(0);
  v22 = *(_QWORD *)(v21 - 8);
  v24 = __chkstk_darwin(v21, v23);
  v106 = (char *)&v103 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __chkstk_darwin(v24, v26);
  v119 = (char *)&v103 - v28;
  __chkstk_darwin(v27, v29);
  v31 = (char *)&v103 - v30;
  v32 = (void *)objc_opt_self(NSFileManager);
  v33 = objc_msgSend(v32, "defaultManager");
  URL.path.getter();
  v35 = v34;
  v36 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v35);
  LODWORD(v35) = objc_msgSend(v33, "fileExistsAtPath:", v36);

  v121 = a1;
  if ((_DWORD)v35)
  {
    v37 = objc_msgSend(v32, "defaultManager");
    URL.path.getter();
    v39 = v38;
    v40 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v39);
    v128[0] = 0;
    v41 = objc_msgSend(v37, "contentsOfDirectoryAtPath:error:", v40, v128);

    v42 = v128[0];
    v43 = a1;
    if (v41)
    {
      v44 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v41, &type metadata for String);
      v45 = v42;

      v46 = *(_QWORD *)(v44 + 16);
      if (v46)
      {
        v47 = v21;
        v104 = a3;
        v108 = *(void (**)(char *, uint64_t, uint64_t))(v22 + 16);
        swift_bridgeObjectRetain(v44);
        v103 = v44;
        v48 = (_QWORD *)(v44 + 40);
        v126 = &_swiftEmptyArrayStorage;
        v49 = v119;
        v110 = v22;
        v107 = v47;
        do
        {
          v122 = v48;
          v123 = v46;
          v51 = *(v48 - 1);
          v50 = *v48;
          v52 = (uint64_t)v118;
          v108(v118, v43, v47);
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v22 + 56))(v52, 0, 1, v47);
          swift_bridgeObjectRetain(v50);
          URL.init(fileURLWithPath:relativeTo:)(v51, v50, v52);
          sub_10009E0DC(v52);
          v53 = Data.init(contentsOf:options:)(v49, 0);
          v55 = v54;
          v56 = v117;
          v57 = *(_QWORD *)(v117 + 40);
          swift_retain(v57);
          v58 = objc_autoreleasePoolPush();
          sub_1001A858C(v53, v55, v57, v128);
          v120 = v50;
          v59 = v126;
          objc_autoreleasePoolPop(v58);
          swift_release(v57);
          v61 = v128[0];
          v60 = v128[1];
          v62 = *(_QWORD *)(v56 + 24);
          v63 = v114;
          v64 = sub_100005150(v115, v114, v116);
          swift_retain(v62);
          v65 = v112;
          dispatch thunk of JSONDecoder.decode<A>(_:from:)(v112, v113, v61, v60, v113, v64);
          sub_10000F494((uint64_t)v61, (unint64_t)v60);
          sub_10000F494(v53, v55);
          swift_release(v62);
          v66 = v124;
          sub_10003B730((uint64_t)v65, v124, v63);
          sub_100027FE8(v66, (uint64_t)v125, v63);
          if ((swift_isUniquelyReferenced_nonNull_native(v59) & 1) == 0)
            v126 = (_QWORD *)v105(0, v126[2] + 1, 1);
          v47 = v107;
          v22 = v110;
          v43 = v121;
          v67 = v122;
          v69 = v126[2];
          v68 = v126[3];
          v49 = v119;
          if (v69 >= v68 >> 1)
            v126 = (_QWORD *)((uint64_t (*)(BOOL, unint64_t, uint64_t, _QWORD *))v105)(v68 > 1, v69 + 1, 1, v126);
          v48 = v67 + 2;
          v70 = v125;
          v71 = v126;
          v126[2] = v69 + 1;
          sub_10003B730((uint64_t)v70, (uint64_t)v71+ ((*(unsigned __int8 *)(v111 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v111 + 80))+ *(_QWORD *)(v111 + 72) * v69, v63);
          sub_100028388(v124, v63);
          (*(void (**)(char *, uint64_t))(v22 + 8))(v49, v47);
          swift_bridgeObjectRelease(v120);
          v46 = v123 - 1;
        }
        while (v123 != 1);
        v44 = v103;
        swift_bridgeObjectRelease(v103);
      }
      else
      {
        v126 = &_swiftEmptyArrayStorage;
      }
      swift_bridgeObjectRelease(v44);
      v101 = v126;
      v102 = swift_bridgeObjectRetain(v126);
      v109(v102, 0);
      return swift_bridgeObjectRelease_n(v101, 2);
    }
    else
    {
      v104 = a3;
      v83 = v128[0];
      v84 = _convertNSErrorToError(_:)(v42);

      swift_willThrow();
      v85 = v106;
      if (qword_10028ADE8 != -1)
        swift_once(&qword_10028ADE8, sub_100046DC4);
      v86 = type metadata accessor for Logger(0);
      sub_100005288(v86, (uint64_t)qword_1002A8A38);
      (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v85, a1, v21);
      swift_errorRetain(v84);
      v87 = swift_errorRetain(v84);
      v88 = Logger.logObject.getter(v87);
      v89 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v88, v89))
      {
        v90 = swift_slowAlloc(22, -1);
        v125 = v88;
        v91 = v85;
        v92 = v90;
        v93 = (uint64_t *)swift_slowAlloc(8, -1);
        v126 = (_QWORD *)swift_slowAlloc(32, -1);
        v128[0] = v126;
        *(_DWORD *)v92 = 136315394;
        v94 = sub_100005150((unint64_t *)&qword_10028F3B0, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
        v95 = dispatch thunk of CustomStringConvertible.description.getter(v21, v94);
        v97 = v96;
        v127 = sub_1001DEF4C(v95, v96, (uint64_t *)v128);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v127, v128);
        swift_bridgeObjectRelease(v97);
        (*(void (**)(char *, uint64_t))(v22 + 8))(v91, v21);
        *(_WORD *)(v92 + 12) = 2112;
        v98 = _convertErrorToNSError(_:)(v84);
        v127 = v98;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v127, v128);
        *v93 = v98;
        swift_errorRelease(v84);
        swift_errorRelease(v84);
        v88 = v125;
        _os_log_impl((void *)&_mh_execute_header, v125, v89, "Error fetching records from %s: %@", (uint8_t *)v92, 0x16u);
        v99 = sub_1000080B4((uint64_t *)&unk_10028BC20);
        swift_arrayDestroy(v93, 1, v99);
        swift_slowDealloc(v93, -1, -1);
        v100 = v126;
        swift_arrayDestroy(v126, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v100, -1, -1);
        swift_slowDealloc(v92, -1, -1);
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v22 + 8))(v85, v21);
        swift_errorRelease(v84);
        swift_errorRelease(v84);
      }

      sub_10013729C(v84);
      swift_errorRetain(v84);
      v109(v84, 1);
      swift_errorRelease(v84);
      return swift_errorRelease(v84);
    }
  }
  else
  {
    if (qword_10028ADE8 != -1)
      swift_once(&qword_10028ADE8, sub_100046DC4);
    v72 = type metadata accessor for Logger(0);
    sub_100005288(v72, (uint64_t)qword_1002A8A38);
    v73 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 16))(v31, v121, v21);
    v74 = Logger.logObject.getter(v73);
    v75 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v74, v75))
    {
      v76 = (uint8_t *)swift_slowAlloc(12, -1);
      v77 = (void *)swift_slowAlloc(32, -1);
      v128[0] = v77;
      *(_DWORD *)v76 = 136315138;
      v110 = v22;
      v78 = sub_100005150((unint64_t *)&qword_10028F3B0, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
      v79 = dispatch thunk of CustomStringConvertible.description.getter(v21, v78);
      v81 = v80;
      v127 = sub_1001DEF4C(v79, v80, (uint64_t *)v128);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v127, v128);
      swift_bridgeObjectRelease(v81);
      (*(void (**)(char *, uint64_t))(v110 + 8))(v31, v21);
      _os_log_impl((void *)&_mh_execute_header, v74, v75, "No records found at path %s.", v76, 0xCu);
      swift_arrayDestroy(v77, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v77, -1, -1);
      swift_slowDealloc(v76, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v22 + 8))(v31, v21);
    }

    return ((uint64_t (*)(void *, _QWORD))v109)(&_swiftEmptyArrayStorage, 0);
  }
}

uint64_t sub_10009DEE8()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;

  v1 = (int *)type metadata accessor for CustodianRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release(*(_QWORD *)(v0 + 16));
  v6 = v0 + v4;
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v0 + v4, v7);
  v9(v0 + v4 + v1[5], v7);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[7] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[8] + 8));
  v10 = (uint64_t *)(v0 + v4 + v1[10]);
  v11 = v10[1];
  if (v11 >> 60 != 15)
    sub_10000F494(*v10, v11);
  sub_10000F494(*(_QWORD *)(v6 + v1[11]), *(_QWORD *)(v6 + v1[11] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[13] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[14] + 8));
  v12 = v6 + v1[16];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v12, 1, v7))
    v9(v12, v7);
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

void sub_10009E034(uint64_t a1, char a2)
{
  uint64_t v2;
  char v4;
  uint64_t v5;

  v4 = a2 & 1;
  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for CustodianRecord(0) - 8) + 80);
  sub_10009CC14(a1, v4, *(_QWORD *)(v2 + 16), v2 + ((v5 + 24) & ~v5));
}

uint64_t sub_10009E084()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10009E0A8(uint64_t a1, char a2)
{
  uint64_t v2;

  return sub_10009CF24(a1, a2 & 1, *(void (**)(uint64_t, uint64_t))(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t sub_10009E0B8()
{
  return sub_1000051FC(type metadata accessor for CustodianRecord, (unint64_t *)&unk_10028F090, (uint64_t)&unk_10021B188, (uint64_t (*)(_QWORD, uint64_t, uint64_t))sub_100134200);
}

uint64_t sub_10009E0DC(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1000080B4((uint64_t *)&unk_10028DC30);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10009E120()
{
  return sub_1000051FC(type metadata accessor for CustodianshipInfoRecord, (unint64_t *)&unk_100291860, (uint64_t)&unk_10021CBA8, (uint64_t (*)(_QWORD, uint64_t, uint64_t))sub_100133FB8);
}

uint64_t sub_10009E148()
{
  return sub_1000051FC(type metadata accessor for CustodianRecoverySessionRecord, (unint64_t *)&unk_10028F340, (uint64_t)&unk_10021D740, (uint64_t (*)(_QWORD, uint64_t, uint64_t))sub_100134250);
}

uint64_t sub_10009E170()
{
  return sub_1000051FC(type metadata accessor for CustodianHealthRecord, (unint64_t *)&unk_100294B50, (uint64_t)&unk_10021ED1C, (uint64_t (*)(_QWORD, uint64_t, uint64_t))sub_100134228);
}

uint64_t sub_10009E198()
{
  return sub_1000051FC(type metadata accessor for CustodianRecoveryInfoRecord, (unint64_t *)&unk_100299960, (uint64_t)&unk_100222ABC, (uint64_t (*)(_QWORD, uint64_t, uint64_t))sub_100134214);
}

uint64_t sub_10009E1C0()
{
  return sub_1000051FC(type metadata accessor for InheritanceHealthRecord, (unint64_t *)&unk_1002904D0, (uint64_t)&unk_10021BDA0, (uint64_t (*)(_QWORD, uint64_t, uint64_t))sub_100134264);
}

uint64_t sub_10009E1E8()
{
  return sub_1000051FC(type metadata accessor for BenefactorInfoRecord, (unint64_t *)&unk_100294E90, (uint64_t)&unk_10021F290, (uint64_t (*)(_QWORD, uint64_t, uint64_t))sub_100133FCC);
}

uint64_t sub_10009E214()
{
  return sub_1000051FC(type metadata accessor for InheritanceInvitationRecord, (unint64_t *)&unk_100299C60, (uint64_t)&unk_100222F00, (uint64_t (*)(_QWORD, uint64_t, uint64_t))sub_100134278);
}

uint64_t sub_10009E23C()
{
  return sub_1000051FC(type metadata accessor for IdentityRecord, (unint64_t *)&unk_10028DBF0, (uint64_t)&unk_10021A830, (uint64_t (*)(_QWORD, uint64_t, uint64_t))sub_100134398);
}

uint64_t sub_10009E264()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v1 = type metadata accessor for URL(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 23) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v6 + 8));
  swift_release(*(_QWORD *)(v0 + v7));
  return swift_deallocObject(v0, v7 + 8, v5);
}

uint64_t sub_10009E2F4()
{
  return sub_1000051FC(type metadata accessor for IdentityServiceRecord, (unint64_t *)&unk_100291AD0, (uint64_t)&unk_10021CF08, (uint64_t (*)(_QWORD, uint64_t, uint64_t))sub_1001343AC);
}

void sub_10009E368(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  os_log_type_t v12;
  uint8_t *v13;
  NSObject *oslog;
  uint64_t v15;
  uint64_t v16;

  if (a1)
  {
    swift_errorRetain(a1);
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v2 = type metadata accessor for Logger(0);
    sub_100005288(v2, (uint64_t)qword_1002A8A08);
    swift_errorRetain(a1);
    v3 = swift_errorRetain(a1);
    oslog = Logger.logObject.getter(v3);
    v4 = static os_log_type_t.error.getter(oslog);
    if (os_log_type_enabled(oslog, v4))
    {
      v5 = (uint8_t *)swift_slowAlloc(12, -1);
      v6 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v5 = 138412290;
      swift_errorRetain(a1);
      v7 = _swift_stdlib_bridgeErrorToNSError(a1);
      v15 = v7;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16);
      *v6 = v7;
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, oslog, v4, "After processing message, setup finalization finished with error: %@", v5, 0xCu);
      v8 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v6, 1, v8);
      swift_slowDealloc(v6, -1, -1);
      swift_slowDealloc(v5, -1, -1);

      swift_errorRelease(a1);
      return;
    }
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    swift_errorRelease(a1);
  }
  else
  {
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v9 = type metadata accessor for Logger(0);
    v10 = sub_100005288(v9, (uint64_t)qword_1002A8A08);
    oslog = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.default.getter(v11);
    if (os_log_type_enabled(oslog, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v12, "After processing message, Setup finalization finished Successfully", v13, 2u);
      swift_slowDealloc(v13, -1, -1);
    }
  }

}

id sub_10009E6D8()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CustodianMessageProcessor();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for CustodianMessageProcessor()
{
  return objc_opt_self(_TtC13appleaccountd25CustodianMessageProcessor);
}

void sub_10009E7A0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint8_t *v16;
  id v17;
  os_log_type_t v19;
  uint8_t *v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  _QWORD v24[10];
  id v25;
  NSObject *v26;

  v3 = v2;
  v6 = type metadata accessor for UUID(0);
  v24[9] = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v7);
  v24[8] = (char *)v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for URL(0);
  v24[6] = *(_QWORD *)(v9 - 8);
  v24[7] = v9;
  __chkstk_darwin(v9, v10);
  v24[5] = (char *)v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10028ADB0 != -1)
    swift_once(&qword_10028ADB0, sub_100046CC8);
  v12 = type metadata accessor for Logger(0);
  v26 = sub_100005288(v12, (uint64_t)qword_1002A8990);
  v13 = Logger.logObject.getter(v26);
  v14 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Processing message...", v15, 2u);
    v16 = v15;
    v3 = v2;
    swift_slowDealloc(v16, -1, -1);
  }

  v17 = objc_msgSend(*(id *)(*sub_10000732C((_QWORD *)(v3 + OBJC_IVAR____TtC13appleaccountd25CustodianMessageProcessor_accountStore), *(_QWORD *)(v3 + OBJC_IVAR____TtC13appleaccountd25CustodianMessageProcessor_accountStore + 24))+ 16), "aa_primaryAppleAccount");
  if (v17)
  {
    v24[4] = v3;
    v25 = v17;
    if (sub_1001AC1FC(a1, a2))
      __asm { BR              X10 }
    v21 = Logger.logObject.getter(0);
    v22 = static os_log_type_t.error.getter(v21);
    if (os_log_type_enabled(v21, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Failed to decode data, unable to process message", v23, 2u);
      swift_slowDealloc(v23, -1, -1);
    }

  }
  else
  {
    v26 = Logger.logObject.getter(0);
    v19 = static os_log_type_t.error.getter(v26);
    if (os_log_type_enabled(v26, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, v19, "Not logged in to AppleAccount, unable to process message", v20, 2u);
      swift_slowDealloc(v20, -1, -1);
    }

  }
}

uint64_t sub_10009F788()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10009F7AC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_10009F7D8(uint64_t a1)
{
  uint64_t v1;

  sub_10006B4C0(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

unint64_t sub_10009F7E0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10028F3B0;
  if (!qword_10028F3B0)
  {
    v1 = type metadata accessor for URL(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for URL, v1);
    atomic_store(result, (unint64_t *)&qword_10028F3B0);
  }
  return result;
}

uint64_t sub_10009F828(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;

  v3 = sub_1000080B4(&qword_10028F438);
  Dependency.init(dependencyId:config:)(0, 0, 0, v3);
  v4 = sub_1000080B4(&qword_10028C8A0);
  Dependency.init(dependencyId:config:)(0, 0, 0, v4);
  v5 = sub_1000080B4((uint64_t *)&unk_10028F448);
  Dependency.init(dependencyId:config:)(0, 0, 0, v5);
  v6 = sub_1000080B4(&qword_10028C860);
  Dependency.init(dependencyId:config:)(0, 0, 0, v6);
  v7 = sub_1000080B4(&qword_10028E2A0);
  Dependency.init(dependencyId:config:)(0, 0, 0, v7);
  v8 = sub_1000080B4(&qword_10028E270);
  Dependency.init(dependencyId:config:)(0, 0, 0, v8);
  v9 = OBJC_IVAR____TtC13appleaccountd27HealthCheckActivityProvider_queue;
  v10 = objc_msgSend(objc_allocWithZone((Class)NSOperationQueue), "init");
  *(_QWORD *)(v1 + v9) = v10;
  *(_QWORD *)(v1 + OBJC_IVAR____TtC13appleaccountd27HealthCheckActivityProvider_healthChecks) = a1;
  objc_msgSend(v10, "setMaxConcurrentOperationCount:", 1);
  return v1;
}

void sub_10009F9B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t Strong;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  _QWORD v33[5];
  _BYTE v34[24];

  v4 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (char *)v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1000080B4(&qword_10028FA50);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  v13 = (char *)v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  a2 += 16;
  swift_beginAccess(a2, v34, 0, 0);
  Strong = swift_weakLoadStrong(a2);
  if (Strong)
  {
    v15 = Strong;
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, Strong + OBJC_IVAR____TtC13appleaccountd27HealthCheckActivityProvider__accountStore, v9);
    Dependency.wrappedValue.getter(v33, v9);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
    v16 = objc_msgSend(*(id *)(*sub_10000732C(v33, v33[3]) + 16), "aa_primaryAppleAccount");

    v17 = sub_100006F58(v33);
    if (v16)
    {
      v18 = UUID.init()(v17);
      v19 = UUID.uuidString.getter(v18);
      v21 = v20;
      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
      swift_retain(v15);
      swift_retain(a1);
      sub_1000A2144(1, v19, v21, v15, v15, a1);
      swift_bridgeObjectRelease(v21);
      swift_release_n(v15, 2);
      v22 = a1;
    }
    else
    {
      sub_10002B6D8();
      if (qword_10028ADD8 != -1)
        swift_once(&qword_10028ADD8, sub_100046D78);
      v28 = type metadata accessor for Logger(0);
      v29 = sub_100005288(v28, (uint64_t)qword_1002A8A08);
      v30 = Logger.logObject.getter(v29);
      v31 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v30, v31))
      {
        v32 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v32 = 0;
        _os_log_impl((void *)&_mh_execute_header, v30, v31, "No account signed in. Skipping Health Checks.", v32, 2u);
        swift_slowDealloc(v32, -1, -1);
        swift_release(v15);

        return;
      }

      v22 = v15;
    }
    swift_release(v22);
  }
  else
  {
    sub_10002B6D8();
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v23 = type metadata accessor for Logger(0);
    v24 = sub_100005288(v23, (uint64_t)qword_1002A8A08);
    v25 = Logger.logObject.getter(v24);
    v26 = static os_log_type_t.debug.getter(v25);
    if (os_log_type_enabled(v25, v26))
    {
      v27 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v27 = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Lost reference to self. Aborting XPC activity Health Checks", v27, 2u);
      swift_slowDealloc(v27, -1, -1);
    }

  }
}

BOOL sub_10009FCF4(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint8_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSNumber v37;
  char *v38;
  uint64_t v39;
  id v40;
  void *v41;
  void *v42;
  uint8_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  unint64_t v51;
  void *aBlock;
  _QWORD v53[4];
  uint64_t v54;
  _QWORD v55[5];
  uint64_t v56[7];
  char v57;

  v8 = sub_1000080B4(&qword_10028F648);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v12 = (char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1000080B4(&qword_10028F650);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13, v15);
  v50 = (char *)&v44 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)(a2 + 16))
  {
    LODWORD(v51) = a1;
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v17 = type metadata accessor for Logger(0);
    sub_100005288(v17, (uint64_t)qword_1002A8A08);
    v18 = swift_bridgeObjectRetain_n(a2, 2);
    v19 = Logger.logObject.getter(v18);
    v20 = static os_log_type_t.error.getter(v19);
    if (os_log_type_enabled(v19, v20))
    {
      v49 = a4;
      v46 = v13;
      v21 = swift_slowAlloc(12, -1);
      v48 = v8;
      v22 = (uint8_t *)v21;
      v23 = swift_slowAlloc(32, -1);
      v47 = a3;
      v24 = v23;
      v56[0] = v23;
      v45 = v14;
      *(_DWORD *)v22 = 136315138;
      v44 = v22 + 4;
      swift_bridgeObjectRetain(a2);
      v25 = sub_1000080B4(&qword_10028E850);
      v26 = Dictionary.description.getter(a2, &type metadata for String, v25, &protocol witness table for String);
      v27 = v12;
      v28 = v9;
      v30 = v29;
      swift_bridgeObjectRelease(a2);
      aBlock = (void *)sub_1001DEF4C(v26, v30, v56);
      v14 = v45;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v53);
      swift_bridgeObjectRelease_n(a2, 2);
      v31 = v30;
      v9 = v28;
      v12 = v27;
      v13 = v46;
      swift_bridgeObjectRelease(v31);
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Overall Health Check failed: %s", v22, 0xCu);
      swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
      v32 = v24;
      a3 = v47;
      swift_slowDealloc(v32, -1, -1);
      v33 = v22;
      v8 = v48;
      swift_slowDealloc(v33, -1, -1);

      if ((v51 & 1) == 0)
        return sub_10002B6D8();
    }
    else
    {

      swift_bridgeObjectRelease_n(a2, 2);
      if ((v51 & 1) == 0)
        return sub_10002B6D8();
    }
    if (objc_msgSend((id)objc_opt_self(AAPreferences), "isHealthCheckTTREnabled"))
    {
      v34 = sub_1000080B4(&qword_10028D570);
      v35 = a3;
      v36 = swift_allocObject(v34, 40, 7);
      *(_OWORD *)(v36 + 16) = xmmword_10021A1B0;
      sub_1000A2630();
      v37.super.super.isa = NSNumber.init(integerLiteral:)(1518603).super.super.isa;
      *(NSNumber *)(v36 + 32) = v37;
      v56[0] = v36;
      specialized Array._endMutation()(v37.super.super.isa);
      v49 = v56[0];
      v51 = 0x800000010020B470;
      v56[0] = 0xD0000000000000AFLL;
      v56[1] = 0x800000010020B470;
      v56[2] = 0xD000000000000025;
      v56[3] = 0x800000010020B5B0;
      v56[4] = 0xD000000000000086;
      v56[5] = 0x800000010020B520;
      v56[6] = v49;
      v57 = 0;
      v38 = v50;
      (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v50, v35 + OBJC_IVAR____TtC13appleaccountd27HealthCheckActivityProvider__ttrRequester, v13);
      Dependency.wrappedValue.getter(v55, v13);
      (*(void (**)(char *, uint64_t))(v14 + 8))(v38, v13);
      v39 = *sub_10000732C(v55, v55[3]);
      v40 = sub_10010A1E4((uint64_t)v56);
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, v39 + OBJC_IVAR____TtC13appleaccountd27TapToRadarRequestController__helper, v8);
      Dependency.wrappedValue.getter(&aBlock, v8);
      (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
      v41 = aBlock;
      v53[3] = sub_1000A0200;
      v54 = 0;
      aBlock = _NSConcreteStackBlock;
      v53[0] = 1107296256;
      v53[1] = sub_1001DC548;
      v53[2] = &unk_1002646C0;
      v42 = _Block_copy(&aBlock);
      swift_release(v54);
      objc_msgSend(v41, "silentTapToRadarWithRequest:completion:", v40, v42);
      _Block_release(v42);
      swift_bridgeObjectRelease(v49);
      swift_bridgeObjectRelease(0x800000010020B520);
      swift_bridgeObjectRelease(0x800000010020B5B0);
      swift_bridgeObjectRelease(v51);

      sub_100006F58(v55);
    }
  }
  return sub_10002B6D8();
}

void sub_1000A0200(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  os_log_type_t v11;
  uint8_t *v12;
  NSObject *oslog;
  uint64_t v14;
  uint64_t v15;

  if (a1)
  {
    swift_errorRetain(a1);
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v2 = type metadata accessor for Logger(0);
    sub_100005288(v2, (uint64_t)qword_1002A8A08);
    v3 = swift_errorRetain(a1);
    oslog = Logger.logObject.getter(v3);
    v4 = static os_log_type_t.error.getter(oslog);
    if (os_log_type_enabled(oslog, v4))
    {
      v5 = (uint8_t *)swift_slowAlloc(12, -1);
      v6 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v5 = 138412290;
      v7 = _convertErrorToNSError(_:)(a1);
      v14 = v7;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, &v15);
      *v6 = v7;
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, oslog, v4, "Unable to launch TTR: %@", v5, 0xCu);
      v8 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v6, 1, v8);
      swift_slowDealloc(v6, -1, -1);
      swift_slowDealloc(v5, -1, -1);

      swift_errorRelease(a1);
      return;
    }
    swift_errorRelease(a1);
    swift_errorRelease(a1);
  }
  else
  {
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v9 = type metadata accessor for Logger(0);
    v10 = sub_100005288(v9, (uint64_t)qword_1002A8A08);
    oslog = Logger.logObject.getter(v10);
    v11 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(oslog, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v11, "Health Check TTR launched successfully.", v12, 2u);
      swift_slowDealloc(v12, -1, -1);
    }
  }

}

uint64_t sub_1000A0464(char a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v12 = a2 & 1;
  if (qword_10028ADD8 != -1)
    swift_once(&qword_10028ADD8, sub_100046D78);
  v13 = type metadata accessor for Logger(0);
  v14 = sub_100005288(v13, (uint64_t)qword_1002A8A08);
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.debug.getter(v15);
  if (os_log_type_enabled(v15, v16))
  {
    v17 = swift_slowAlloc(18, -1);
    v22 = a7;
    v18 = swift_slowAlloc(32, -1);
    v24 = v18;
    *(_DWORD *)v17 = 136315394;
    if (v12)
      v19 = 0x656C756465686353;
    else
      v19 = 0x6E616D6544206E4FLL;
    v23 = sub_1001DEF4C(v19, 0xE900000000000064, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24);
    swift_bridgeObjectRelease(0xE900000000000064);
    *(_WORD *)(v17 + 12) = 1024;
    LODWORD(v23) = a1 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, (char *)&v23 + 4);
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Completed pulling all cloud data before %s Health Checks: %{BOOL}d", (uint8_t *)v17, 0x12u);
    swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
    v20 = v18;
    a7 = v22;
    swift_slowDealloc(v20, -1, -1);
    swift_slowDealloc(v17, -1, -1);
  }

  return sub_1000A0678(v12, a4, a5, a6, a7);
}

uint64_t sub_1000A0678(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  dispatch_group_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  NSObject *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  _BOOL4 v27;
  uint8_t *v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  objc_class *v40;
  _BYTE *v41;
  uint64_t (**v42)(uint64_t, uint64_t);
  id v43;
  void *v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  dispatch_group_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  objc_super v57;
  __int128 aBlock;
  uint64_t (*v59)(uint64_t);
  void *v60;
  uint64_t (*v61)();
  uint64_t v62;
  uint64_t v63;
  uint64_t v64[5];

  v6 = v5;
  v53 = a4;
  v56 = a3;
  v51 = a2;
  v55 = a1;
  v8 = sub_1000080B4(&qword_10028F658);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v12 = (char *)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = dispatch_group_create();
  v14 = swift_allocObject(&unk_1002646F8, 24, 7);
  *(_QWORD *)(v14 + 16) = &_swiftEmptyDictionarySingleton;
  v15 = swift_allocObject(&unk_100264720, 17, 7);
  *(_BYTE *)(v15 + 16) = 0;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, v6 + OBJC_IVAR____TtC13appleaccountd27HealthCheckActivityProvider__analyticsAccountModel, v8);
  Dependency.wrappedValue.getter(&v63, v8);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  v16 = sub_10000732C(&v63, v64[2]);
  v17 = *v16;
  v18 = *(NSObject **)(*v16 + OBJC_IVAR____TtC13appleaccountd27DaemonAnalyticsAccountModel_dispatchQueue);
  v19 = swift_allocObject(&unk_100264748, 32, 7);
  *(_QWORD *)(v19 + 16) = sub_1000A26A0;
  *(_QWORD *)(v19 + 24) = v17;
  v61 = sub_1000A26B8;
  v62 = v19;
  *(_QWORD *)&aBlock = _NSConcreteStackBlock;
  *((_QWORD *)&aBlock + 1) = 1107296256;
  v59 = sub_10002B11C;
  v60 = &unk_100264760;
  v20 = _Block_copy(&aBlock);
  v21 = v62;
  swift_retain(v17);
  swift_retain(v19);
  swift_release(v21);
  dispatch_sync(v18, v20);
  _Block_release(v20);
  LOBYTE(v20) = swift_isEscapingClosureAtFileLocation(v19, "", 118, 68, 28, 1);
  swift_release(v17);
  swift_release(v19);
  if ((v20 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    sub_100006F58(&v63);
    if (qword_10028ADD8 == -1)
      goto LABEL_3;
  }
  swift_once(&qword_10028ADD8, sub_100046D78);
LABEL_3:
  v22 = v55 & 1;
  v23 = type metadata accessor for Logger(0);
  v24 = sub_100005288(v23, (uint64_t)qword_1002A8A08);
  v25 = Logger.logObject.getter(v24);
  v26 = static os_log_type_t.info.getter();
  v27 = os_log_type_enabled(v25, v26);
  v55 = v22;
  v52 = v13;
  if (v27)
  {
    v28 = (uint8_t *)swift_slowAlloc(12, -1);
    v29 = swift_slowAlloc(32, -1);
    v30 = v22;
    v31 = v29;
    *(_DWORD *)v28 = 136315138;
    *(_QWORD *)&aBlock = v29;
    if (v30)
      v32 = 0x656C756465686353;
    else
      v32 = 0x6E616D6544206E4FLL;
    v63 = sub_1001DEF4C(v32, 0xE900000000000064, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, v64);
    swift_bridgeObjectRelease(0xE900000000000064);
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "Starting %s Health Checks.", v28, 0xCu);
    swift_arrayDestroy(v31, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v31, -1, -1);
    swift_slowDealloc(v28, -1, -1);
  }

  v54 = *(_QWORD *)(v6 + OBJC_IVAR____TtC13appleaccountd27HealthCheckActivityProvider_healthChecks);
  v33 = *(_QWORD *)(v54 + 16);
  v34 = v56;
  if (v33)
  {
    v50 = a5;
    v49 = v6;
    v35 = *(void **)(v6 + OBJC_IVAR____TtC13appleaccountd27HealthCheckActivityProvider_queue);
    v36 = v54 + 32;
    swift_bridgeObjectRetain(v54);
    v37 = v51;
    v38 = v55;
    do
    {
      sub_100006CA4(v36, (uint64_t)&aBlock);
      v39 = swift_allocObject(&unk_100264798, 96, 7);
      *(_BYTE *)(v39 + 16) = v38;
      sub_10003A190(&aBlock, v39 + 24);
      *(_QWORD *)(v39 + 64) = v37;
      *(_QWORD *)(v39 + 72) = v34;
      *(_QWORD *)(v39 + 80) = v14;
      *(_QWORD *)(v39 + 88) = v15;
      v40 = (objc_class *)type metadata accessor for AsyncOperation();
      v41 = objc_allocWithZone(v40);
      v41[OBJC_IVAR____TtC13appleaccountd14AsyncOperation_state] = 0;
      v42 = (uint64_t (**)(uint64_t, uint64_t))&v41[OBJC_IVAR____TtC13appleaccountd14AsyncOperation_workBlock];
      *v42 = sub_1000A26FC;
      v42[1] = (uint64_t (*)(uint64_t, uint64_t))v39;
      v57.receiver = v41;
      v57.super_class = v40;
      v34 = v56;
      swift_bridgeObjectRetain(v56);
      swift_retain(v14);
      swift_retain(v15);
      v43 = objc_msgSendSuper2(&v57, "init");
      objc_msgSend(v35, "addOperation:", v43);

      v36 += 40;
      --v33;
    }
    while (v33);
    swift_bridgeObjectRelease(v54);
    a5 = v50;
    v6 = v49;
  }
  v44 = *(void **)(v6 + OBJC_IVAR____TtC13appleaccountd27HealthCheckActivityProvider_queue);
  v45 = swift_allocObject(&unk_1002647C0, 64, 7);
  *(_BYTE *)(v45 + 16) = v55;
  *(_QWORD *)(v45 + 24) = v14;
  *(_QWORD *)(v45 + 32) = v6;
  *(_QWORD *)(v45 + 40) = v53;
  *(_QWORD *)(v45 + 48) = a5;
  *(_QWORD *)(v45 + 56) = v15;
  v61 = sub_1000A274C;
  v62 = v45;
  *(_QWORD *)&aBlock = _NSConcreteStackBlock;
  *((_QWORD *)&aBlock + 1) = 1107296256;
  v59 = sub_1000051D0;
  v60 = &unk_1002647D8;
  v46 = _Block_copy(&aBlock);
  v47 = v62;
  swift_retain(v14);
  swift_retain(v15);
  swift_retain(v6);
  swift_retain(a5);
  swift_release(v47);
  objc_msgSend(v44, "addBarrierBlock:", v46);
  _Block_release(v46);

  swift_release(v14);
  return swift_release(v15);
}

uint64_t sub_1000A0C00(uint64_t a1, uint64_t a2, char a3, _QWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t DynamicType;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  os_log_type_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(uint64_t, uint64_t, uint64_t (*)(uint64_t), uint64_t, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;

  v13 = a3 & 1;
  if (qword_10028ADD8 != -1)
    swift_once(&qword_10028ADD8, sub_100046D78);
  v14 = type metadata accessor for Logger(0);
  sub_100005288(v14, (uint64_t)qword_1002A8A08);
  v15 = sub_100006CA4((uint64_t)a4, (uint64_t)&v40);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v16, v17))
  {
    v35 = a6;
    v18 = swift_slowAlloc(22, -1);
    v19 = swift_slowAlloc(64, -1);
    v39 = v19;
    *(_DWORD *)v18 = 136315394;
    if (v13)
      v20 = 0x656C756465686353;
    else
      v20 = 0x6E616D6544206E4FLL;
    v38 = sub_1001DEF4C(v20, 0xE900000000000064, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39);
    swift_bridgeObjectRelease(0xE900000000000064);
    *(_WORD *)(v18 + 12) = 2080;
    v21 = v41;
    v22 = sub_10000732C(&v40, v41);
    DynamicType = swift_getDynamicType(v22, v21, 1);
    v24 = _typeName(_:qualified:)(DynamicType, 0);
    v26 = v25;
    v38 = sub_1001DEF4C(v24, v25, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39);
    swift_bridgeObjectRelease(v26);
    sub_100006F58(&v40);
    v27 = v17;
    v28 = v13;
    _os_log_impl((void *)&_mh_execute_header, v16, v27, "Starting %s Health Check - %s", (uint8_t *)v18, 0x16u);
    swift_arrayDestroy(v19, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v19, -1, -1);
    v29 = v18;
    a6 = v35;
    swift_slowDealloc(v29, -1, -1);

  }
  else
  {
    sub_100006F58(&v40);

    v28 = v13;
  }
  v30 = a4[3];
  v31 = a4[4];
  sub_10000732C(a4, v30);
  sub_100006CA4((uint64_t)a4, (uint64_t)&v40);
  v32 = swift_allocObject(&unk_100264810, 96, 7);
  *(_BYTE *)(v32 + 16) = v28;
  sub_10003A190(&v40, v32 + 24);
  *(_QWORD *)(v32 + 64) = a7;
  *(_QWORD *)(v32 + 72) = a8;
  *(_QWORD *)(v32 + 80) = a1;
  *(_QWORD *)(v32 + 88) = a2;
  v33 = *(void (**)(uint64_t, uint64_t, uint64_t (*)(uint64_t), uint64_t, uint64_t, uint64_t))(v31 + 16);
  swift_retain(a7);
  swift_retain(a8);
  swift_retain(a2);
  v33(a5, a6, sub_1000A279C, v32, v30, v31);
  return swift_release(v32);
}

uint64_t sub_1000A0EF8(uint64_t a1, char a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void))
{
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t DynamicType;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  char *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v58;
  char v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v64;
  uint64_t (*v65)(void);
  uint64_t v66[3];
  uint64_t v67;
  _QWORD v68[3];
  uint64_t v69;
  uint64_t v70;

  if (a1)
  {
    swift_errorRetain(a1);
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v12 = type metadata accessor for Logger(0);
    sub_100005288(v12, (uint64_t)qword_1002A8A08);
    sub_100006CA4((uint64_t)a3, (uint64_t)v68);
    swift_errorRetain(a1);
    v13 = swift_errorRetain(a1);
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.error.getter(v14);
    if (os_log_type_enabled(v14, v15))
    {
      v65 = a6;
      v16 = swift_slowAlloc(32, -1);
      v64 = a4;
      v17 = (uint64_t *)swift_slowAlloc(8, -1);
      v18 = swift_slowAlloc(64, -1);
      v66[0] = v18;
      *(_DWORD *)v16 = 136315650;
      if ((a2 & 1) != 0)
        v19 = 0x656C756465686353;
      else
        v19 = 0x6E616D6544206E4FLL;
      v67 = sub_1001DEF4C(v19, 0xE900000000000064, v66);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, v68);
      swift_bridgeObjectRelease(0xE900000000000064);
      *(_WORD *)(v16 + 12) = 2080;
      v20 = v69;
      v21 = sub_10000732C(v68, v69);
      DynamicType = swift_getDynamicType(v21, v20, 1);
      v23 = _typeName(_:qualified:)(DynamicType, 0);
      v25 = v24;
      v67 = sub_1001DEF4C(v23, v24, v66);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, v68);
      swift_bridgeObjectRelease(v25);
      sub_100006F58(v68);
      *(_WORD *)(v16 + 22) = 2112;
      v26 = _convertErrorToNSError(_:)(a1);
      v67 = v26;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, v68);
      *v17 = v26;
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "%s %s Health Check failed with error %@", (uint8_t *)v16, 0x20u);
      v27 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v17, 1, v27);
      v28 = v17;
      a4 = v64;
      swift_slowDealloc(v28, -1, -1);
      swift_arrayDestroy(v18, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v18, -1, -1);
      v29 = v16;
      a6 = v65;
      swift_slowDealloc(v29, -1, -1);
    }
    else
    {
      sub_100006F58(v68);
      swift_errorRelease(a1);
      swift_errorRelease(a1);
    }

    v43 = (_QWORD *)(a4 + 16);
    v44 = (char *)(a5 + 16);
    v45 = a3[3];
    v46 = sub_10000732C(a3, v45);
    v47 = swift_getDynamicType(v46, v45, 1);
    v48 = a3[4];
    v68[0] = v47;
    v68[1] = v48;
    v49 = sub_1000080B4((uint64_t *)&unk_10028EF70);
    v50 = String.init<A>(describing:)(v68, v49);
    v52 = v51;
    v53 = (void *)_convertErrorToNSError(_:)(a1);
    v54 = objc_msgSend(v53, "aa_partialErrorsByName");

    if (v54)
    {
      v55 = sub_1000080B4(&qword_10028E850);
      v56 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v54, &type metadata for String, v55, &protocol witness table for String);

      if (*(_QWORD *)(v56 + 16))
      {
        swift_bridgeObjectRetain(v52);
        sub_100092DBC(v56, v43, v50, v52);
        swift_bridgeObjectRelease(v52);
        swift_errorRelease(a1);
        swift_bridgeObjectRelease(v56);
        swift_bridgeObjectRelease(v52);
LABEL_24:
        swift_beginAccess(v44, v66, 0, 0);
        v59 = *v44;
        sub_100006CA4((uint64_t)a3, (uint64_t)v68);
        if ((v59 & 1) != 0)
        {
          v60 = 1;
        }
        else
        {
          v61 = v69;
          v62 = v70;
          sub_10000732C(v68, v69);
          v60 = (*(uint64_t (**)(uint64_t, uint64_t))(v62 + 24))(v61, v62);
        }
        sub_100006F58(v68);
        swift_beginAccess(v44, v68, 1, 0);
        *v44 = v60 & 1;
        return a6();
      }
      swift_bridgeObjectRelease(v56);
    }
    swift_beginAccess(v43, v68, 33, 0);
    swift_errorRetain(a1);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v43);
    v66[0] = *v43;
    *v43 = 0x8000000000000000;
    sub_10001F710(a1, v50, v52, isUniquelyReferenced_nonNull_native);
    v58 = *v43;
    *v43 = v66[0];
    swift_bridgeObjectRelease(v52);
    swift_bridgeObjectRelease(v58);
    swift_endAccess(v68);
    swift_errorRelease(a1);
    goto LABEL_24;
  }
  if (qword_10028ADD8 != -1)
    swift_once(&qword_10028ADD8, sub_100046D78);
  v30 = type metadata accessor for Logger(0);
  sub_100005288(v30, (uint64_t)qword_1002A8A08);
  v31 = sub_100006CA4((uint64_t)a3, (uint64_t)v68);
  v32 = Logger.logObject.getter(v31);
  v33 = static os_log_type_t.error.getter(v32);
  if (os_log_type_enabled(v32, v33))
  {
    v34 = swift_slowAlloc(22, -1);
    v35 = swift_slowAlloc(64, -1);
    v66[0] = v35;
    *(_DWORD *)v34 = 136315394;
    if ((a2 & 1) != 0)
      v36 = 0x656C756465686353;
    else
      v36 = 0x6E616D6544206E4FLL;
    v67 = sub_1001DEF4C(v36, 0xE900000000000064, v66);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, v68);
    swift_bridgeObjectRelease(0xE900000000000064);
    *(_WORD *)(v34 + 12) = 2080;
    v37 = v69;
    v38 = sub_10000732C(v68, v69);
    v39 = swift_getDynamicType(v38, v37, 1);
    v40 = _typeName(_:qualified:)(v39, 0);
    v42 = v41;
    v67 = sub_1001DEF4C(v40, v41, v66);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, v68);
    swift_bridgeObjectRelease(v42);
    sub_100006F58(v68);
    _os_log_impl((void *)&_mh_execute_header, v32, v33, "%s %s Health Check completed.", (uint8_t *)v34, 0x16u);
    swift_arrayDestroy(v35, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v35, -1, -1);
    swift_slowDealloc(v34, -1, -1);
  }
  else
  {
    sub_100006F58(v68);
  }

  return a6();
}

uint64_t sub_1000A15C0(char a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD, _QWORD, __n128), uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __n128 v37;
  uint64_t v39;
  _BYTE *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(_QWORD, _QWORD, __n128);
  int v45;
  uint64_t v46;
  char v47[24];
  uint64_t v48;
  _BYTE v49[16];
  uint64_t v50[3];
  uint64_t v51;
  uint64_t v52;

  v46 = a3;
  v10 = sub_1000080B4(&qword_10028E838);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  v14 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10028ADD8 != -1)
    swift_once(&qword_10028ADD8, sub_100046D78);
  v15 = type metadata accessor for Logger(0);
  sub_100005288(v15, (uint64_t)qword_1002A8A08);
  v16 = swift_retain_n(a2, 2);
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.error.getter(v17);
  v45 = v18;
  if (os_log_type_enabled(v17, v18))
  {
    v19 = swift_slowAlloc(22, -1);
    v43 = a6;
    v20 = v19;
    v41 = swift_slowAlloc(64, -1);
    v50[0] = v41;
    *(_DWORD *)v20 = 136315394;
    if ((a1 & 1) != 0)
      v21 = 0x656C756465686353;
    else
      v21 = 0x6E616D6544206E4FLL;
    v44 = a4;
    v48 = sub_1001DEF4C(v21, 0xE900000000000064, v50);
    v40 = v49;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, v49);
    swift_bridgeObjectRelease(0xE900000000000064);
    *(_WORD *)(v20 + 12) = 2080;
    v39 = v20 + 14;
    swift_beginAccess(a2 + 16, v47, 0, 0);
    v42 = v10;
    v22 = *(_QWORD *)(a2 + 16);
    swift_bridgeObjectRetain(v22);
    v23 = sub_1000080B4(&qword_10028E850);
    v24 = v11;
    v25 = Dictionary.description.getter(v22, &type metadata for String, v23, &protocol witness table for String);
    v27 = v26;
    swift_bridgeObjectRelease(v22);
    v28 = v25;
    v11 = v24;
    v29 = (_QWORD *)(a2 + 16);
    v10 = v42;
    v48 = sub_1001DEF4C(v28, v27, v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, v40);
    swift_release_n(a2, 2);
    v30 = v27;
    a4 = v44;
    swift_bridgeObjectRelease(v30);
    _os_log_impl((void *)&_mh_execute_header, v17, (os_log_type_t)v45, "Overall %s Health Checks finished with errors: %s", (uint8_t *)v20, 0x16u);
    v31 = v41;
    swift_arrayDestroy(v41, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v31, -1, -1);
    v32 = v20;
    a6 = v43;
    swift_slowDealloc(v32, -1, -1);

  }
  else
  {

    swift_release_n(a2, 2);
    v29 = (_QWORD *)(a2 + 16);
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v14, v46 + OBJC_IVAR____TtC13appleaccountd27HealthCheckActivityProvider__trustedContactsPreflightScheduler, v10);
  Dependency.wrappedValue.getter(v50, v10);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  v34 = v51;
  v33 = v52;
  sub_10000732C(v50, v51);
  (*(void (**)(uint64_t))(*(_QWORD *)(v33 + 8) + 8))(v34);
  sub_100006F58(v50);
  swift_beginAccess(a6 + 16, v50, 0, 0);
  v35 = *(unsigned __int8 *)(a6 + 16);
  swift_beginAccess(v29, &v48, 0, 0);
  v36 = *v29;
  v37 = swift_bridgeObjectRetain(*v29);
  a4(v35, v36, v37);
  return swift_bridgeObjectRelease(v36);
}

uint64_t sub_1000A1968()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = v0 + OBJC_IVAR____TtC13appleaccountd27HealthCheckActivityProvider__ttrRequester;
  v2 = sub_1000080B4(&qword_10028F650);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  v3 = v0 + OBJC_IVAR____TtC13appleaccountd27HealthCheckActivityProvider__storageController;
  v4 = sub_1000080B4(&qword_10028CCC0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  v5 = v0 + OBJC_IVAR____TtC13appleaccountd27HealthCheckActivityProvider__analyticsAccountModel;
  v6 = sub_1000080B4(&qword_10028F658);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = v0 + OBJC_IVAR____TtC13appleaccountd27HealthCheckActivityProvider__accountStore;
  v8 = sub_1000080B4(&qword_10028FA50);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = v0 + OBJC_IVAR____TtC13appleaccountd27HealthCheckActivityProvider__syncManager;
  v10 = sub_1000080B4(&qword_10028E860);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  v11 = v0 + OBJC_IVAR____TtC13appleaccountd27HealthCheckActivityProvider__trustedContactsPreflightScheduler;
  v12 = sub_1000080B4(&qword_10028E838);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC13appleaccountd27HealthCheckActivityProvider_healthChecks));

  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1000A1AB8()
{
  return type metadata accessor for HealthCheckActivityProvider(0);
}

uint64_t type metadata accessor for HealthCheckActivityProvider(uint64_t a1)
{
  uint64_t result;

  result = qword_10028F420;
  if (!qword_10028F420)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for HealthCheckActivityProvider);
  return result;
}

void sub_1000A1AFC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD v14[8];

  sub_100017464(319, &qword_10028F430, &qword_10028F438);
  if (v3 <= 0x3F)
  {
    v14[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_100017464(319, &qword_10028C898, &qword_10028C8A0);
    if (v5 <= 0x3F)
    {
      v14[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_100017464(319, (unint64_t *)&qword_10028F440, (uint64_t *)&unk_10028F448);
      if (v7 <= 0x3F)
      {
        v14[2] = *(_QWORD *)(v6 - 8) + 64;
        sub_100017464(319, (unint64_t *)&qword_100293810, &qword_10028C860);
        if (v9 <= 0x3F)
        {
          v14[3] = *(_QWORD *)(v8 - 8) + 64;
          sub_100017464(319, (unint64_t *)&qword_100294A60, &qword_10028E2A0);
          if (v11 <= 0x3F)
          {
            v14[4] = *(_QWORD *)(v10 - 8) + 64;
            sub_100017464(319, &qword_10028E268, &qword_10028E270);
            if (v13 <= 0x3F)
            {
              v14[5] = *(_QWORD *)(v12 - 8) + 64;
              v14[6] = (char *)&value witness table for Builtin.BridgeObject + 64;
              v14[7] = (char *)&value witness table for Builtin.UnknownObject + 64;
              swift_updateClassMetadata2(a1, 256, 8, v14, a1 + 80);
            }
          }
        }
      }
    }
  }
}

uint64_t sub_1000A1C6C(char a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(NSObject *), uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  id v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t inited;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _BYTE v43[12];
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _BYTE v49[56];
  uint64_t v50[3];
  uint64_t v51;

  v46 = a2;
  v47 = a3;
  v10 = sub_1000080B4(&qword_10028E860);
  v45 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10, v11);
  v13 = &v43[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v14 = sub_1000080B4(&qword_10028FA50);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14, v16);
  v18 = &v43[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v19 = swift_allocObject(&unk_100264630, 32, 7);
  *(_QWORD *)(v19 + 16) = a5;
  *(_QWORD *)(v19 + 24) = a6;
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v15 + 16))(v18, a4 + OBJC_IVAR____TtC13appleaccountd27HealthCheckActivityProvider__accountStore, v14);
  swift_retain(a6);
  Dependency.wrappedValue.getter(v50, v14);
  (*(void (**)(_BYTE *, uint64_t))(v15 + 8))(v18, v14);
  v20 = objc_msgSend(*(id *)(*sub_10000732C(v50, v51) + 16), "aa_primaryAppleAccount");

  sub_100006F58(v50);
  if (v20)
  {
    v21 = a1 & 1;
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v22 = type metadata accessor for Logger(0);
    v23 = sub_100005288(v22, (uint64_t)qword_1002A8A08);
    v24 = Logger.logObject.getter(v23);
    v25 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v24, v25))
    {
      v26 = (uint8_t *)swift_slowAlloc(12, -1);
      v27 = swift_slowAlloc(32, -1);
      v44 = a1 & 1;
      v28 = v27;
      *(_DWORD *)v26 = 136315138;
      v50[0] = v27;
      if (v44)
        v29 = 0x656C756465686353;
      else
        v29 = 0x6E616D6544206E4FLL;
      v48 = sub_1001DEF4C(v29, 0xE900000000000064, v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, v49);
      swift_bridgeObjectRelease(0xE900000000000064);
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Starting to pull all cloud data before %s Health Checks", v26, 0xCu);
      swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
      v30 = v28;
      v21 = v44;
      swift_slowDealloc(v30, -1, -1);
      swift_slowDealloc(v26, -1, -1);
    }

    v31 = v45;
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v45 + 16))(v13, a4 + OBJC_IVAR____TtC13appleaccountd27HealthCheckActivityProvider__syncManager, v10);
    Dependency.wrappedValue.getter(v50, v10);
    (*(void (**)(_BYTE *, uint64_t))(v31 + 8))(v13, v10);
    sub_10000732C(v50, v51);
    v32 = swift_allocObject(&unk_100264658, 64, 7);
    *(_BYTE *)(v32 + 16) = v21;
    v33 = v46;
    v34 = v47;
    *(_QWORD *)(v32 + 24) = a4;
    *(_QWORD *)(v32 + 32) = v33;
    *(_QWORD *)(v32 + 40) = v34;
    *(_QWORD *)(v32 + 48) = sub_1000A20EC;
    *(_QWORD *)(v32 + 56) = v19;
    swift_retain(a4);
    swift_bridgeObjectRetain(v34);
    swift_retain(v19);
    sub_10011EDC0(3, 0, (uint64_t)sub_1000A2140, v32);
    swift_release(v32);
    sub_100006F58(v50);
    return swift_release(v19);
  }
  else
  {
    v36 = sub_1000080B4(&qword_10028BB60);
    inited = swift_initStackObject(v36, v49);
    *(_OWORD *)(inited + 16) = xmmword_100218E30;
    *(_QWORD *)(inited + 32) = 0x72456E496E676953;
    *(_QWORD *)(inited + 40) = 0xEB00000000726F72;
    type metadata accessor for AASignInError(0);
    v39 = v38;
    v48 = -8014;
    v40 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
    v41 = sub_1000A20F4();
    _BridgedStoredNSError.init(_:userInfo:)(v50, &v48, v40, v39, v41);
    *(_QWORD *)(inited + 48) = v50[0];
    v42 = sub_10001577C(inited);
    sub_10015C198(v42, a5);
    swift_release(v19);
    return swift_bridgeObjectRelease(v42);
  }
}

uint64_t sub_1000A20C8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_1000A20EC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_10015B5AC(a1, a2, *(void (**))(v2 + 16));
}

unint64_t sub_1000A20F4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10028B608;
  if (!qword_10028B608)
  {
    type metadata accessor for AASignInError(255);
    result = swift_getWitnessTable(&unk_100218278, v1);
    atomic_store(result, (unint64_t *)&qword_10028B608);
  }
  return result;
}

uint64_t sub_1000A2144(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  id v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t inited;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _BYTE v43[12];
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _BYTE v49[56];
  uint64_t v50[3];
  uint64_t v51;

  v46 = a2;
  v47 = a3;
  v10 = sub_1000080B4(&qword_10028E860);
  v45 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10, v11);
  v13 = &v43[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v14 = sub_1000080B4(&qword_10028FA50);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14, v16);
  v18 = &v43[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v19 = swift_allocObject(&unk_100264680, 32, 7);
  *(_QWORD *)(v19 + 16) = a5;
  *(_QWORD *)(v19 + 24) = a6;
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v15 + 16))(v18, a4 + OBJC_IVAR____TtC13appleaccountd27HealthCheckActivityProvider__accountStore, v14);
  swift_retain(a5);
  swift_retain(a6);
  Dependency.wrappedValue.getter(v50, v14);
  (*(void (**)(_BYTE *, uint64_t))(v15 + 8))(v18, v14);
  v20 = objc_msgSend(*(id *)(*sub_10000732C(v50, v51) + 16), "aa_primaryAppleAccount");

  sub_100006F58(v50);
  if (v20)
  {
    v21 = a1 & 1;
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v22 = type metadata accessor for Logger(0);
    v23 = sub_100005288(v22, (uint64_t)qword_1002A8A08);
    v24 = Logger.logObject.getter(v23);
    v25 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v24, v25))
    {
      v26 = (uint8_t *)swift_slowAlloc(12, -1);
      v27 = swift_slowAlloc(32, -1);
      v44 = a1 & 1;
      v28 = v27;
      *(_DWORD *)v26 = 136315138;
      v50[0] = v27;
      if (v44)
        v29 = 0x656C756465686353;
      else
        v29 = 0x6E616D6544206E4FLL;
      v48 = sub_1001DEF4C(v29, 0xE900000000000064, v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, v49);
      swift_bridgeObjectRelease(0xE900000000000064);
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Starting to pull all cloud data before %s Health Checks", v26, 0xCu);
      swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
      v30 = v28;
      v21 = v44;
      swift_slowDealloc(v30, -1, -1);
      swift_slowDealloc(v26, -1, -1);
    }

    v31 = v45;
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v45 + 16))(v13, a4 + OBJC_IVAR____TtC13appleaccountd27HealthCheckActivityProvider__syncManager, v10);
    Dependency.wrappedValue.getter(v50, v10);
    (*(void (**)(_BYTE *, uint64_t))(v31 + 8))(v13, v10);
    sub_10000732C(v50, v51);
    v32 = swift_allocObject(&unk_1002646A8, 64, 7);
    *(_BYTE *)(v32 + 16) = v21;
    v33 = v46;
    v34 = v47;
    *(_QWORD *)(v32 + 24) = a4;
    *(_QWORD *)(v32 + 32) = v33;
    *(_QWORD *)(v32 + 40) = v34;
    *(_QWORD *)(v32 + 48) = sub_1000A25DC;
    *(_QWORD *)(v32 + 56) = v19;
    swift_retain(a4);
    swift_bridgeObjectRetain(v34);
    swift_retain(v19);
    sub_10011EDC0(3, 0, (uint64_t)sub_1000A2140, v32);
    swift_release(v32);
    sub_100006F58(v50);
    return swift_release(v19);
  }
  else
  {
    v36 = sub_1000080B4(&qword_10028BB60);
    inited = swift_initStackObject(v36, v49);
    *(_OWORD *)(inited + 16) = xmmword_100218E30;
    *(_QWORD *)(inited + 32) = 0x72456E496E676953;
    *(_QWORD *)(inited + 40) = 0xEB00000000726F72;
    type metadata accessor for AASignInError(0);
    v39 = v38;
    v48 = -8014;
    v40 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
    v41 = sub_1000A20F4();
    _BridgedStoredNSError.init(_:userInfo:)(v50, &v48, v40, v39, v41);
    *(_QWORD *)(inited + 48) = v50[0];
    v42 = sub_10001577C(inited);
    sub_10009FCF4(0, v42, a5, a6);
    swift_release(v19);
    return swift_bridgeObjectRelease(v42);
  }
}

uint64_t sub_1000A25B0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

BOOL sub_1000A25DC(int a1, uint64_t a2)
{
  uint64_t v2;

  return sub_10009FCF4(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t sub_1000A25E8()
{
  _QWORD *v0;

  swift_release(v0[3]);
  swift_bridgeObjectRelease(v0[5]);
  swift_release(v0[7]);
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_1000A261C(char a1)
{
  uint64_t v1;

  return sub_1000A0464(a1, *(_BYTE *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56));
}

unint64_t sub_1000A2630()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10028E8B0;
  if (!qword_10028E8B0)
  {
    v1 = objc_opt_self(NSNumber);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10028E8B0);
  }
  return result;
}

uint64_t sub_1000A266C()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000A2690()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

void sub_1000A26A0()
{
  uint64_t v0;

  sub_10007281C(v0);
}

uint64_t sub_1000A26A8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000A26B8()
{
  uint64_t v0;

  return sub_10001CF40(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_1000A26C0()
{
  _QWORD *v0;

  sub_100006F58(v0 + 3);
  swift_bridgeObjectRelease(v0[9]);
  swift_release(v0[10]);
  swift_release(v0[11]);
  return swift_deallocObject(v0, 96, 7);
}

uint64_t sub_1000A26FC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1000A0C00(a1, a2, *(_BYTE *)(v2 + 16), (_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 64), *(_QWORD *)(v2 + 72), *(_QWORD *)(v2 + 80), *(_QWORD *)(v2 + 88));
}

uint64_t sub_1000A2710()
{
  _QWORD *v0;

  swift_release(v0[3]);
  swift_release(v0[4]);
  swift_release(v0[6]);
  swift_release(v0[7]);
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_1000A274C()
{
  uint64_t v0;

  return sub_1000A15C0(*(_BYTE *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(void (**)(_QWORD, _QWORD, __n128))(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56));
}

uint64_t sub_1000A2760()
{
  _QWORD *v0;

  sub_100006F58(v0 + 3);
  swift_release(v0[8]);
  swift_release(v0[9]);
  swift_release(v0[11]);
  return swift_deallocObject(v0, 96, 7);
}

uint64_t sub_1000A279C(uint64_t a1)
{
  uint64_t v1;

  return sub_1000A0EF8(a1, *(_BYTE *)(v1 + 16), (_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 64), *(_QWORD *)(v1 + 72), *(uint64_t (**)(void))(v1 + 80));
}

uint64_t sub_1000A27C0()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  uint64_t v3;

  v3 = type metadata accessor for CustodianHealthCheck(0);
  v0 = sub_1000080B4(&qword_10028F7F8);
  result = String.init<A>(describing:)(&v3, v0);
  qword_10028F660 = result;
  *(_QWORD *)algn_10028F668 = v2;
  return result;
}

uint64_t sub_1000A2808(uint64_t a1, char a2, uint64_t a3, void (*a4)(uint64_t), uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if ((a2 & 1) == 0)
    return sub_1000A2AA4(a1, (uint64_t)a4, a5);
  swift_errorRetain(a1);
  if (qword_10028ADD8 != -1)
    swift_once(&qword_10028ADD8, sub_100046D78);
  v8 = type metadata accessor for Logger(0);
  sub_100005288(v8, (uint64_t)qword_1002A8A08);
  v9 = swift_errorRetain(a1);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.error.getter(v10);
  if (os_log_type_enabled(v10, v11))
  {
    v12 = swift_slowAlloc(22, -1);
    v13 = (uint64_t *)swift_slowAlloc(8, -1);
    v18 = swift_slowAlloc(32, -1);
    v20 = v18;
    *(_DWORD *)v12 = 136315394;
    if (qword_10028AE48 != -1)
      swift_once(&qword_10028AE48, sub_1000A27C0);
    v15 = qword_10028F660;
    v14 = *(_QWORD *)algn_10028F668;
    swift_bridgeObjectRetain(*(_QWORD *)algn_10028F668);
    v19 = sub_1001DEF4C(v15, v14, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20);
    swift_bridgeObjectRelease(v14);
    *(_WORD *)(v12 + 12) = 2112;
    v16 = _convertErrorToNSError(_:)(a1);
    v19 = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20);
    *v13 = v16;
    sub_1000057B0(a1, 1);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "%s - error fetching my custodianship records: %@", (uint8_t *)v12, 0x16u);
    v17 = sub_1000080B4((uint64_t *)&unk_10028BC20);
    swift_arrayDestroy(v13, 1, v17);
    swift_slowDealloc(v13, -1, -1);
    swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v18, -1, -1);
    swift_slowDealloc(v12, -1, -1);
  }
  else
  {
    sub_1000057B0(a1, 1);
  }

  swift_errorRetain(a1);
  a4(a1);
  sub_1000057B0(a1, 1);
  return sub_1000057B0(a1, 1);
}

uint64_t sub_1000A2AA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  NSObject *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  _QWORD *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD aBlock[5];
  _QWORD *v49;

  v4 = v3;
  v40 = a2;
  v7 = type metadata accessor for DispatchWorkItemFlags(0);
  v45 = *(_QWORD *)(v7 - 8);
  v46 = v7;
  __chkstk_darwin(v7, v8);
  v44 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS(0);
  v42 = *(_QWORD *)(v10 - 8);
  v43 = v10;
  __chkstk_darwin(v10, v11);
  v41 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DispatchQoS.QoSClass(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13, v15);
  v17 = (char *)&v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = dispatch_group_create();
  v19 = type metadata accessor for PartialErrorHandler();
  swift_allocObject(v19, 32, 7);
  v20 = sub_1001561E0();
  v21 = *(_QWORD *)(a1 + 16);
  if (v21)
  {
    v39 = a3;
    v22 = *(_QWORD *)(type metadata accessor for CustodianshipInfoRecord(0) - 8);
    v23 = a1 + ((*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80));
    v24 = *(_QWORD *)(v22 + 72);
    v38 = a1;
    swift_bridgeObjectRetain(a1);
    do
    {
      sub_1000A8F9C(v23, v18, v4, v20);
      v23 += v24;
      --v21;
    }
    while (v21);
    swift_bridgeObjectRelease(v38);
    a3 = v39;
  }
  sub_100007764();
  (*(void (**)(char *, _QWORD, uint64_t))(v14 + 104))(v17, enum case for DispatchQoS.QoSClass.background(_:), v13);
  v25 = (void *)static OS_dispatch_queue.global(qos:)(v17);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
  v26 = (_QWORD *)swift_allocObject(&unk_100264888, 40, 7);
  v27 = v40;
  v26[2] = v20;
  v26[3] = v27;
  v26[4] = a3;
  aBlock[4] = sub_1000A932C;
  v49 = v26;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000051D0;
  aBlock[3] = &unk_1002648A0;
  v28 = _Block_copy(aBlock);
  swift_retain(v20);
  v29 = swift_retain(a3);
  v30 = v41;
  static DispatchQoS.unspecified.getter(v29);
  v47 = _swiftEmptyArrayStorage;
  v31 = sub_100005150((unint64_t *)&qword_10028CD20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v32 = sub_1000080B4((uint64_t *)&unk_100295A00);
  v33 = sub_100008628();
  v34 = v44;
  v35 = v46;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v47, v32, v33, v46, v31);
  OS_dispatch_group.notify(qos:flags:queue:execute:)(v30, v34, v25, v28);

  _Block_release(v28);
  swift_release(v20);

  (*(void (**)(char *, uint64_t))(v45 + 8))(v34, v35);
  (*(void (**)(char *, uint64_t))(v42 + 8))(v30, v43);
  return swift_release(v49);
}

uint64_t sub_1000A2DBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  __n128 v21;
  os_log_type_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(char *, uint64_t, uint64_t);
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54[5];

  v52 = a3;
  v5 = *v3;
  v49 = a2;
  v50 = v5;
  v6 = sub_1000080B4(&qword_10028C448);
  v47 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v7);
  v9 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for UUID(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  v14 = __chkstk_darwin(v10, v13);
  v48 = (char *)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14, v15);
  v17 = (char *)&v41 - v16;
  if (qword_10028ADD8 != -1)
    swift_once(&qword_10028ADD8, sub_100046D78);
  v18 = type metadata accessor for Logger(0);
  sub_100005288(v18, (uint64_t)qword_1002A8A08);
  v46 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v19 = v46(v17, a1, v10);
  v20 = Logger.logObject.getter(v19);
  v22 = static os_log_type_t.default.getter(v21);
  if (os_log_type_enabled(v20, v22))
  {
    v43 = v12;
    v44 = v6;
    v45 = a1;
    v23 = swift_slowAlloc(22, -1);
    v42 = swift_slowAlloc(64, -1);
    v54[0] = v42;
    *(_DWORD *)v23 = 136315394;
    if (qword_10028AE48 != -1)
      swift_once(&qword_10028AE48, sub_1000A27C0);
    v24 = qword_10028F660;
    v25 = *(_QWORD *)algn_10028F668;
    swift_bridgeObjectRetain(*(_QWORD *)algn_10028F668);
    v53 = sub_1001DEF4C(v24, v25, v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, v54);
    swift_bridgeObjectRelease(v25);
    *(_WORD *)(v23 + 12) = 2080;
    v26 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v27 = dispatch thunk of CustomStringConvertible.description.getter(v10, v26);
    v29 = v28;
    v53 = sub_1001DEF4C(v27, v28, v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, v54);
    swift_bridgeObjectRelease(v29);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v17, v10);
    _os_log_impl((void *)&_mh_execute_header, v20, v22, "%s - starting individual custodian health check for %s", (uint8_t *)v23, 0x16u);
    v30 = v42;
    swift_arrayDestroy(v42, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v30, -1, -1);
    swift_slowDealloc(v23, -1, -1);

    v6 = v44;
    a1 = v45;
    v12 = v43;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v17, v10);

  }
  v31 = v51;
  v32 = v47;
  (*(void (**)(char *, uint64_t, uint64_t))(v47 + 16))(v9, v51 + OBJC_IVAR____TtC13appleaccountd20CustodianHealthCheck__custodianStorage, v6);
  Dependency.wrappedValue.getter(v54, v6);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v9, v6);
  sub_10000732C(v54, v54[3]);
  v33 = v48;
  v46(v48, a1, v10);
  v34 = *(unsigned __int8 *)(v11 + 80);
  v35 = (v34 + 40) & ~v34;
  v36 = (v12 + v35 + 7) & 0xFFFFFFFFFFFFFFF8;
  v37 = (char *)swift_allocObject(&unk_100264A90, v36 + 8, v34 | 7);
  v38 = v49;
  *((_QWORD *)v37 + 2) = v31;
  *((_QWORD *)v37 + 3) = v38;
  v39 = v52;
  *((_QWORD *)v37 + 4) = v52;
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(&v37[v35], v33, v10);
  *(_QWORD *)&v37[v36] = v50;
  swift_retain(v31);
  swift_retain(v39);
  sub_1001BFD24(a1, (uint64_t)sub_1000A9C38, (uint64_t)v37);
  swift_release(v37);
  return sub_100006F58(v54);
}

uint64_t sub_1000A31C4(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4, char *a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  _BYTE *v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(uint64_t);
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57[3];

  v54 = a5;
  v8 = type metadata accessor for UUID(0);
  v55 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v9);
  v11 = (char *)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for CustodianshipInfoRecord(0);
  __chkstk_darwin(v12, v13);
  v15 = (char *)&v50 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_1000080B4(&qword_10028C450);
  __chkstk_darwin(v16, v17);
  v19 = (uint64_t *)((char *)&v50 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100024A20(a1, (uint64_t)v19, &qword_10028C450);
  if (swift_getEnumCaseMultiPayload(v19, v16) == 1)
  {
    v52 = a3;
    v53 = a4;
    v20 = *v19;
    v21 = objc_allocWithZone((Class)type metadata accessor for CustodianshipHealthCheckAnalyticsEvent(0));
    *(_QWORD *)&v21[qword_100299390] = _swiftEmptyArrayStorage;
    v21[qword_100299398] = 0;
    v22 = &v21[qword_1002993A0];
    *v22 = 0;
    v22[1] = 0;
    v23 = sub_1000080B4((uint64_t *)&unk_10028F448);
    Dependency.init(dependencyId:config:)(0, 0, 0, v23);
    v24 = sub_10006A7EC((uint64_t)_swiftEmptyArrayStorage);
    v25 = (char *)AAFTimedAnalyticsEvent.init(eventName:initialData:)(0xD00000000000002FLL, 0x800000010020B630, v24);
    v26 = _convertErrorToNSError(_:)(v20);
    v27 = &v25[qword_100299390];
    v28 = swift_beginAccess(&v25[qword_100299390], v57, 33, 0);
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v28);
    v30 = *(_QWORD *)((*(_QWORD *)v27 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v29 = *(_QWORD *)((*(_QWORD *)v27 & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v30 >= v29 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v29 > 1, v30 + 1, 1);
    v31 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v30, v26);
    specialized Array._endMutation()(v31);
    swift_endAccess(v57);
    sub_1001E3F30(0, 6);
    v32 = v52;
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v33 = type metadata accessor for Logger(0);
    sub_100005288(v33, (uint64_t)qword_1002A8A08);
    v34 = v55;
    (*(void (**)(char *, char *, uint64_t))(v55 + 16))(v11, v54, v8);
    swift_errorRetain(v20);
    v35 = swift_errorRetain(v20);
    v36 = Logger.logObject.getter(v35);
    v37 = static os_log_type_t.error.getter(v36);
    if (os_log_type_enabled(v36, v37))
    {
      v54 = v25;
      v38 = swift_slowAlloc(32, -1);
      v39 = (uint64_t *)swift_slowAlloc(8, -1);
      v51 = swift_slowAlloc(64, -1);
      v57[0] = v51;
      *(_DWORD *)v38 = 136315650;
      if (qword_10028AE48 != -1)
        swift_once(&qword_10028AE48, sub_1000A27C0);
      v40 = qword_10028F660;
      v41 = *(_QWORD *)algn_10028F668;
      swift_bridgeObjectRetain(*(_QWORD *)algn_10028F668);
      v56 = sub_1001DEF4C(v40, v41, v57);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, v57);
      swift_bridgeObjectRelease(v41);
      *(_WORD *)(v38 + 12) = 2080;
      v42 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v43 = dispatch thunk of CustomStringConvertible.description.getter(v8, v42);
      v45 = v44;
      v56 = sub_1001DEF4C(v43, v44, v57);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, v57);
      swift_bridgeObjectRelease(v45);
      (*(void (**)(char *, uint64_t))(v55 + 8))(v11, v8);
      *(_WORD *)(v38 + 22) = 2112;
      v46 = _convertErrorToNSError(_:)(v20);
      v56 = v46;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, v57);
      *v39 = v46;
      swift_errorRelease(v20);
      swift_errorRelease(v20);
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "%s - error fetching custodianship record for %s: %@", (uint8_t *)v38, 0x20u);
      v47 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v39, 1, v47);
      swift_slowDealloc(v39, -1, -1);
      v48 = v51;
      swift_arrayDestroy(v51, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v48, -1, -1);
      swift_slowDealloc(v38, -1, -1);

      v32 = v52;
      v25 = v54;
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v34 + 8))(v11, v8);
      swift_errorRelease(v20);
      swift_errorRelease(v20);

    }
    swift_errorRetain(v20);
    v32(v20);
    swift_errorRelease(v20);

    return swift_errorRelease(v20);
  }
  else
  {
    sub_10003B730((uint64_t)v19, (uint64_t)v15, type metadata accessor for CustodianshipInfoRecord);
    sub_1000A373C((uint64_t)v15, a3, a4);
    return sub_100028388((uint64_t)v15, type metadata accessor for CustodianshipInfoRecord);
  }
}

void sub_1000A373C(uint64_t a1, void (*a2)(_QWORD), uint64_t a3)
{
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _BYTE *v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  NSObject *v50;
  os_log_type_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  int *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  void (*v73)(_QWORD);
  uint64_t v74;
  uint64_t v75[5];
  uint64_t v76;
  uint64_t v77;

  v73 = a2;
  v74 = a3;
  v68 = *v3;
  v5 = type metadata accessor for UUID(0);
  v71 = *(_QWORD *)(v5 - 8);
  v72 = v5;
  __chkstk_darwin(v5, v6);
  v70 = (char *)&v63 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1000080B4(&qword_10028C448);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v12 = (char *)&v63 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (int *)type metadata accessor for CustodianshipInfoRecord(0);
  v66 = *((_QWORD *)v13 - 1);
  v14 = *(_QWORD *)(v66 + 64);
  v16 = __chkstk_darwin(v13, v15);
  v65 = (uint64_t *)((char *)&v63 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v18 = __chkstk_darwin(v16, v17);
  v64 = (uint64_t)&v63 - v19;
  v21 = __chkstk_darwin(v18, v20);
  v67 = (uint64_t)&v63 - v22;
  __chkstk_darwin(v21, v23);
  v25 = (char *)&v63 - v24;
  v26 = objc_allocWithZone((Class)type metadata accessor for CustodianshipHealthCheckAnalyticsEvent(0));
  *(_QWORD *)&v26[qword_100299390] = _swiftEmptyArrayStorage;
  v26[qword_100299398] = 0;
  v27 = &v26[qword_1002993A0];
  *v27 = 0;
  v27[1] = 0;
  v28 = sub_1000080B4((uint64_t *)&unk_10028F448);
  Dependency.init(dependencyId:config:)(0, 0, 0, v28);
  v29 = sub_10006A7EC((uint64_t)_swiftEmptyArrayStorage);
  v30 = (void *)AAFTimedAnalyticsEvent.init(eventName:initialData:)(0xD00000000000002FLL, 0x800000010020B630, v29);
  v31 = *(_QWORD *)(a1 + v13[7]);
  sub_100027FE8(a1, (uint64_t)v25, type metadata accessor for CustodianshipInfoRecord);
  if (v31 == 2)
  {
    sub_100028388((uint64_t)v25, type metadata accessor for CustodianshipInfoRecord);
LABEL_4:
    v33 = v69;
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, v69 + OBJC_IVAR____TtC13appleaccountd20CustodianHealthCheck__custodianStorage, v8);
    Dependency.wrappedValue.getter(v75, v8);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    v65 = sub_10000732C(v75, v75[3]);
    v34 = a1 + v13[5];
    v36 = v71;
    v35 = v72;
    v37 = a1;
    v38 = (uint64_t)v70;
    (*(void (**)(char *, uint64_t, uint64_t))(v71 + 16))(v70, v34, v72);
    v39 = v67;
    sub_100027FE8(v37, v67, type metadata accessor for CustodianshipInfoRecord);
    v40 = *(unsigned __int8 *)(v66 + 80);
    v41 = (v40 + 48) & ~v40;
    v42 = (v14 + v41 + 7) & 0xFFFFFFFFFFFFFFF8;
    v43 = (_QWORD *)swift_allocObject(&unk_100264900, v42 + 8, v40 | 7);
    v43[2] = v33;
    v43[3] = v30;
    v44 = v74;
    v43[4] = v73;
    v43[5] = v44;
    sub_10003B730(v39, (uint64_t)v43 + v41, type metadata accessor for CustodianshipInfoRecord);
    *(_QWORD *)((char *)v43 + v42) = v68;
    swift_retain(v33);
    v45 = v30;
    swift_retain(v44);
    sub_1001BE09C(v38, (uint64_t)sub_1000A9558, (uint64_t)v43);

    swift_release(v43);
    (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v38, v35);
    sub_100006F58(v75);
    return;
  }
  v32 = *(_QWORD *)&v25[v13[7]];
  sub_100028388((uint64_t)v25, type metadata accessor for CustodianshipInfoRecord);
  if (v32 == 3)
    goto LABEL_4;
  if (qword_10028ADD8 != -1)
    swift_once(&qword_10028ADD8, sub_100046D78);
  v46 = type metadata accessor for Logger(0);
  sub_100005288(v46, (uint64_t)qword_1002A8A08);
  v47 = v64;
  sub_100027FE8(a1, v64, type metadata accessor for CustodianshipInfoRecord);
  v48 = v65;
  v49 = sub_100027FE8(a1, (uint64_t)v65, type metadata accessor for CustodianshipInfoRecord);
  v50 = Logger.logObject.getter(v49);
  v51 = static os_log_type_t.error.getter(v50);
  if (os_log_type_enabled(v50, v51))
  {
    v52 = swift_slowAlloc(32, -1);
    v72 = swift_slowAlloc(64, -1);
    v75[0] = v72;
    *(_DWORD *)v52 = 136315650;
    if (qword_10028AE48 != -1)
      swift_once(&qword_10028AE48, sub_1000A27C0);
    v53 = qword_10028F660;
    v54 = *(_QWORD *)algn_10028F668;
    swift_bridgeObjectRetain(*(_QWORD *)algn_10028F668);
    v76 = sub_1001DEF4C(v53, v54, v75);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &v77);
    swift_bridgeObjectRelease(v54);
    *(_WORD *)(v52 + 12) = 2080;
    v55 = v13;
    v56 = v13[6];
    v57 = v64;
    v58 = (uint64_t *)(v64 + v56);
    v59 = *v58;
    v60 = v58[1];
    swift_bridgeObjectRetain(v60);
    v76 = sub_1001DEF4C(v59, v60, v75);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &v77);
    swift_bridgeObjectRelease(v60);
    sub_100028388(v57, type metadata accessor for CustodianshipInfoRecord);
    *(_WORD *)(v52 + 22) = 2048;
    v61 = *(_QWORD *)((char *)v65 + v55[7]);
    sub_100028388((uint64_t)v65, type metadata accessor for CustodianshipInfoRecord);
    v76 = v61;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &v77);
    _os_log_impl((void *)&_mh_execute_header, v50, v51, "%s - Custodian Owner %s\nwith status %ld did not require a health check.", (uint8_t *)v52, 0x20u);
    v62 = v72;
    swift_arrayDestroy(v72, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v62, -1, -1);
    swift_slowDealloc(v52, -1, -1);
  }
  else
  {
    sub_100028388((uint64_t)v48, type metadata accessor for CustodianshipInfoRecord);
    sub_100028388(v47, type metadata accessor for CustodianshipInfoRecord);
  }

  sub_1001E3F30(0, 5);
  v73(0);

}

uint64_t sub_1000A3D60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = v0 + OBJC_IVAR____TtC13appleaccountd20CustodianHealthCheck__custodianStorage;
  v2 = sub_1000080B4(&qword_10028C448);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  v3 = v0 + OBJC_IVAR____TtC13appleaccountd20CustodianHealthCheck__storageController;
  v4 = sub_1000080B4(&qword_10028CCC0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  v5 = v0 + OBJC_IVAR____TtC13appleaccountd20CustodianHealthCheck__versionProvider;
  v6 = sub_1000080B4(&qword_10028F818);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1000A3E0C()
{
  return type metadata accessor for CustodianHealthCheck(0);
}

uint64_t type metadata accessor for CustodianHealthCheck(uint64_t a1)
{
  uint64_t result;

  result = qword_10028F6B0;
  if (!qword_10028F6B0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CustodianHealthCheck);
  return result;
}

void sub_1000A3E50(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[3];

  sub_100017464(319, (unint64_t *)&qword_10028C350, &qword_10028C880);
  if (v3 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_100017464(319, &qword_10028C898, &qword_10028C8A0);
    if (v5 <= 0x3F)
    {
      v8[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_100017464(319, (unint64_t *)&unk_10028F6C0, &qword_100297720);
      if (v7 <= 0x3F)
      {
        v8[2] = *(_QWORD *)(v6 - 8) + 64;
        swift_updateClassMetadata2(a1, 256, 3, v8, a1 + 80);
      }
    }
  }
}

uint64_t sub_1000A3F20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000A8BF4(a3, a4);
}

void sub_1000A3F48(uint64_t a1, int a2, uint64_t a3, dispatch_group_t group)
{
  uint64_t *v6;
  uint64_t v7;
  Swift::String v8;
  uint64_t v9;
  Swift::String v10;
  void *object;
  uint64_t v12;
  NSObject *v13;
  uint64_t v14;

  if (a1)
  {
    v6 = (uint64_t *)(a3 + *(int *)(type metadata accessor for CustodianshipInfoRecord(0) + 24));
    v7 = v6[1];
    v14 = *v6;
    swift_errorRetain(a1);
    swift_bridgeObjectRetain(v7);
    v8._countAndFlagsBits = 58;
    v8._object = (void *)0xE100000000000000;
    String.append(_:)(v8);
    v10._countAndFlagsBits = UUID.uuidString.getter(v9);
    object = v10._object;
    String.append(_:)(v10);
    swift_bridgeObjectRelease(object);
    v12 = swift_allocObject(&unk_100264A68, 24, 7);
    *(_QWORD *)(v12 + 16) = group;
    v13 = group;
    sub_100155AC4(v14, v7, a1, (uint64_t)sub_1000A9BA8, v12);
    swift_bridgeObjectRelease(v7);
    swift_release(v12);
    swift_errorRelease(a1);
  }
  else
  {
    dispatch_group_leave(group);
  }
}

uint64_t sub_1000A405C(uint64_t a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  void (*v44)(uint64_t);
  uint64_t v45;
  _QWORD v46[2];
  char *v47;
  void (*v48)(uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52[3];

  v50 = a6;
  v49 = type metadata accessor for CustodianshipInfoRecord(0);
  __chkstk_darwin(v49, v10);
  v12 = (char *)v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for CustodianRecoveryRecords(0);
  __chkstk_darwin(v13, v14);
  v16 = (char *)v46 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_1000080B4(&qword_10028F800);
  __chkstk_darwin(v17, v18);
  v20 = (_QWORD *)((char *)v46 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100024A20(a1, (uint64_t)v20, &qword_10028F800);
  if (swift_getEnumCaseMultiPayload(v20, v17) == 1)
  {
    v47 = a3;
    v48 = (void (*)(uint64_t))a4;
    v46[1] = a5;
    v21 = *v20;
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v22 = type metadata accessor for Logger(0);
    sub_100005288(v22, (uint64_t)qword_1002A8A08);
    sub_100027FE8(v50, (uint64_t)v12, type metadata accessor for CustodianshipInfoRecord);
    swift_errorRetain(v21);
    v23 = swift_errorRetain(v21);
    v24 = Logger.logObject.getter(v23);
    v25 = static os_log_type_t.error.getter(v24);
    if (os_log_type_enabled(v24, v25))
    {
      v26 = swift_slowAlloc(32, -1);
      v27 = (uint64_t *)swift_slowAlloc(8, -1);
      v50 = swift_slowAlloc(64, -1);
      v52[0] = v50;
      *(_DWORD *)v26 = 136315650;
      if (qword_10028AE48 != -1)
        swift_once(&qword_10028AE48, sub_1000A27C0);
      v29 = qword_10028F660;
      v28 = *(_QWORD *)algn_10028F668;
      swift_bridgeObjectRetain(*(_QWORD *)algn_10028F668);
      v51 = sub_1001DEF4C(v29, v28, v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, v52);
      swift_bridgeObjectRelease(v28);
      *(_WORD *)(v26 + 12) = 2080;
      v30 = type metadata accessor for UUID(0);
      v31 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v32 = dispatch thunk of CustomStringConvertible.description.getter(v30, v31);
      v34 = v33;
      v51 = sub_1001DEF4C(v32, v33, v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, v52);
      swift_bridgeObjectRelease(v34);
      sub_100028388((uint64_t)v12, type metadata accessor for CustodianshipInfoRecord);
      *(_WORD *)(v26 + 22) = 2112;
      v35 = _convertErrorToNSError(_:)(v21);
      v51 = v35;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, v52);
      *v27 = v35;
      swift_errorRelease(v21);
      swift_errorRelease(v21);
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "   %s - error fetching health check record for    %s: %@", (uint8_t *)v26, 0x20u);
      v36 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v27, 1, v36);
      swift_slowDealloc(v27, -1, -1);
      v37 = v50;
      swift_arrayDestroy(v50, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v37, -1, -1);
      swift_slowDealloc(v26, -1, -1);
    }
    else
    {
      sub_100028388((uint64_t)v12, type metadata accessor for CustodianshipInfoRecord);
      swift_errorRelease(v21);
      swift_errorRelease(v21);
    }

    v39 = _convertErrorToNSError(_:)(v21);
    v40 = &v47[qword_100299390];
    v41 = swift_beginAccess(&v47[qword_100299390], v52, 33, 0);
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v41);
    v43 = *(_QWORD *)((*(_QWORD *)v40 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v42 = *(_QWORD *)((*(_QWORD *)v40 & 0xFFFFFFFFFFFFFF8) + 0x18);
    v44 = v48;
    if (v43 >= v42 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v42 > 1, v43 + 1, 1);
    v45 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v43, v39);
    specialized Array._endMutation()(v45);
    swift_endAccess(v52);
    sub_1001E3F30(0, 6);
    swift_errorRetain(v21);
    v44(v21);
    swift_errorRelease(v21);
    return swift_errorRelease(v21);
  }
  else
  {
    sub_10003B730((uint64_t)v20, (uint64_t)v16, type metadata accessor for CustodianRecoveryRecords);
    sub_1000A4540((uint64_t)v16, a3, a4, a5);
    return sub_100028388((uint64_t)v16, type metadata accessor for CustodianRecoveryRecords);
  }
}

uint64_t sub_1000A4540(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  __n128 v27;
  os_log_type_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  __n128 v40;
  os_log_type_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v5 = v4;
  v55 = a3;
  v56 = a4;
  v8 = type metadata accessor for CustodianRecoveryRecords(0);
  v10 = __chkstk_darwin(v8, v9);
  v12 = (char *)&v51 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10, v13);
  v15 = (char *)&v51 - v14;
  v16 = sub_1000080B4((uint64_t *)&unk_1002904F0);
  __chkstk_darwin(v16, v17);
  v19 = (char *)&v51 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = a1 + *(int *)(v8 + 20);
  v21 = type metadata accessor for CustodianRecoveryInfoRecord(0);
  sub_100024A20(v20 + *(int *)(v21 + 44), (uint64_t)v19, (uint64_t *)&unk_1002904F0);
  v22 = type metadata accessor for UUID(0);
  LOBYTE(v20) = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 48))(v19, 1, v22) != 1;
  sub_100004934((uint64_t)v19, (uint64_t *)&unk_1002904F0);
  v54 = a2;
  *((_BYTE *)a2 + qword_100299398) = v20;
  v23 = a1 + *(int *)(v8 + 24);
  if ((sub_1000A4B28(v23) & 1) != 0)
  {
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v24 = type metadata accessor for Logger(0);
    sub_100005288(v24, (uint64_t)qword_1002A8A08);
    v25 = sub_100027FE8(a1, (uint64_t)v15, type metadata accessor for CustodianRecoveryRecords);
    v26 = Logger.logObject.getter(v25);
    v28 = static os_log_type_t.default.getter(v27);
    if (os_log_type_enabled(v26, v28))
    {
      v53 = v5;
      v29 = swift_slowAlloc(22, -1);
      v52 = swift_slowAlloc(64, -1);
      v58 = v52;
      *(_DWORD *)v29 = 136315394;
      if (qword_10028AE48 != -1)
        swift_once(&qword_10028AE48, sub_1000A27C0);
      v31 = qword_10028F660;
      v30 = *(_QWORD *)algn_10028F668;
      swift_bridgeObjectRetain(*(_QWORD *)algn_10028F668);
      v57 = sub_1001DEF4C(v31, v30, &v58);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, &v58);
      swift_bridgeObjectRelease(v30);
      *(_WORD *)(v29 + 12) = 2080;
      type metadata accessor for CustodianHealthRecord(0);
      v32 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v33 = dispatch thunk of CustomStringConvertible.description.getter(v22, v32);
      v35 = v34;
      v57 = sub_1001DEF4C(v33, v34, &v58);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, &v58);
      swift_bridgeObjectRelease(v35);
      sub_100028388((uint64_t)v15, type metadata accessor for CustodianRecoveryRecords);
      _os_log_impl((void *)&_mh_execute_header, v26, v28, "%s - custodian %s is due for a health check.", (uint8_t *)v29, 0x16u);
      v36 = v52;
      swift_arrayDestroy(v52, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v36, -1, -1);
      swift_slowDealloc(v29, -1, -1);

    }
    else
    {
      sub_100028388((uint64_t)v15, type metadata accessor for CustodianRecoveryRecords);

    }
    return sub_1000A4F84(a1, v54, v55, v56);
  }
  else
  {
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v37 = type metadata accessor for Logger(0);
    sub_100005288(v37, (uint64_t)qword_1002A8A08);
    v38 = sub_100027FE8(a1, (uint64_t)v12, type metadata accessor for CustodianRecoveryRecords);
    v39 = Logger.logObject.getter(v38);
    v41 = static os_log_type_t.default.getter(v40);
    if (os_log_type_enabled(v39, v41))
    {
      v53 = v5;
      v42 = swift_slowAlloc(22, -1);
      v52 = swift_slowAlloc(64, -1);
      v58 = v52;
      *(_DWORD *)v42 = 136315394;
      if (qword_10028AE48 != -1)
        swift_once(&qword_10028AE48, sub_1000A27C0);
      v44 = qword_10028F660;
      v43 = *(_QWORD *)algn_10028F668;
      swift_bridgeObjectRetain(*(_QWORD *)algn_10028F668);
      v57 = sub_1001DEF4C(v44, v43, &v58);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, &v58);
      swift_bridgeObjectRelease(v43);
      *(_WORD *)(v42 + 12) = 2080;
      type metadata accessor for CustodianHealthRecord(0);
      v45 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v46 = dispatch thunk of CustomStringConvertible.description.getter(v22, v45);
      v48 = v47;
      v57 = sub_1001DEF4C(v46, v47, &v58);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, &v58);
      swift_bridgeObjectRelease(v48);
      sub_100028388((uint64_t)v12, type metadata accessor for CustodianRecoveryRecords);
      _os_log_impl((void *)&_mh_execute_header, v39, v41, " %s - custodian %s has  had a recent health check, ending check early.", (uint8_t *)v42, 0x16u);
      v49 = v52;
      swift_arrayDestroy(v52, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v49, -1, -1);
      swift_slowDealloc(v42, -1, -1);

    }
    else
    {
      sub_100028388((uint64_t)v12, type metadata accessor for CustodianRecoveryRecords);

    }
    return sub_1000A538C(v23, 0, 0xF000000000000000, 1, v54, 0, v55, v56);
  }
}

uint64_t sub_1000A4B28(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  __n128 v20;
  os_log_type_t v21;
  uint8_t *v22;
  char v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  void (*v31)(char *, uint64_t);
  uint64_t *v32;
  id v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  __n128 v38;
  os_log_type_t v39;
  _DWORD *v40;
  _DWORD *v41;
  uint64_t *v42;
  id v43;
  os_log_t v44;
  uint64_t v45;
  uint64_t v46;
  void (*v47)(char *, uint64_t);
  void (*v49)(char *, uint64_t);
  int v50;
  char *v51;
  uint64_t v52;
  NSObject *v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  _BYTE v57[16];
  uint64_t v58;

  v3 = type metadata accessor for Date(0);
  v4 = *(_QWORD *)(v3 - 8);
  v6 = __chkstk_darwin(v3, v5);
  v8 = (char *)&v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6, v9);
  v11 = (char *)&v49 - v10;
  v12 = sub_1000080B4(&qword_10028F818);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12, v14);
  v16 = (char *)&v49 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((objc_msgSend((id)objc_opt_self(AAPreferences), "isNeverSkipCustodianCheckEnabled") & 1) != 0)
  {
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v17 = type metadata accessor for Logger(0);
    v18 = sub_100005288(v17, (uint64_t)qword_1002A8A08);
    v19 = Logger.logObject.getter(v18);
    v21 = static os_log_type_t.default.getter(v20);
    if (os_log_type_enabled(v19, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v22 = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, v21, "Preference set to never skip health check", v22, 2u);
      swift_slowDealloc(v22, -1, -1);
    }

    v23 = 1;
  }
  else
  {
    v24 = sub_1000C73D0();
    v25 = type metadata accessor for CustodianHealthRecord(0);
    v26 = v25;
    v27 = a1 + *(int *)(v25 + 40);
    if ((*(_BYTE *)(v27 + 8) & 1) == 0)
    {
      v54 = a1;
      v55 = v1;
      v28 = v25;
      v29 = *(_QWORD *)v27;
      v30 = *(NSObject **)(v13 + 16);
      v52 = v1 + OBJC_IVAR____TtC13appleaccountd20CustodianHealthCheck__versionProvider;
      v53 = v30;
      ((void (*)(char *))v30)(v16);
      Dependency.wrappedValue.getter(&v56, v12);
      v31 = *(void (**)(char *, uint64_t))(v13 + 8);
      v31(v16, v12);
      v32 = sub_10000732C(&v56, v58);
      v33 = sub_100191F9C(*v32);
      sub_100006F58(&v56);
      v51 = (char *)v29;
      v34 = (uint64_t)v33 < v29;
      v26 = v28;
      a1 = v54;
      if (v34)
      {
        if (qword_10028ADD8 != -1)
          swift_once(&qword_10028ADD8, sub_100046D78);
        v35 = type metadata accessor for Logger(0);
        sub_100005288(v35, (uint64_t)qword_1002A8A08);
        v36 = swift_retain(v55);
        v37 = Logger.logObject.getter(v36);
        v39 = static os_log_type_t.default.getter(v38);
        v50 = v39;
        if (os_log_type_enabled(v37, v39))
        {
          v40 = (_DWORD *)swift_slowAlloc(22, -1);
          v49 = v31;
          v41 = v40;
          *v40 = 134218240;
          v56 = v51;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, v57);
          *((_WORD *)v41 + 6) = 2048;
          v51 = (char *)v41 + 14;
          ((void (*)(char *, uint64_t, uint64_t))v53)(v16, v52, v12);
          v53 = v37;
          Dependency.wrappedValue.getter(&v56, v12);
          v49(v16, v12);
          v42 = sub_10000732C(&v56, v58);
          v43 = sub_100191F9C(*v42);
          sub_100006F58(&v56);
          v56 = v43;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, v57);
          swift_release(v55);
          v44 = v53;
          _os_log_impl((void *)&_mh_execute_header, v53, (os_log_type_t)v50, " Last HealthCheck v%ld which is greater than current  known v%ld. Taking extended time  for eligibility.", (uint8_t *)v41, 0x16u);
          swift_slowDealloc(v41, -1, -1);

        }
        else
        {

          swift_release(v55);
        }
        v24 = sub_1000C76C0();
      }
    }
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v8, a1 + *(int *)(v26 + 24), v3);
    v45 = Date.init(timeInterval:since:)(v8, v24);
    Date.init()(v45);
    v46 = sub_100005150(&qword_10028F820, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    v23 = dispatch thunk of static Comparable.< infix(_:_:)(v8, v11, v3, v46) ^ 1;
    v47 = *(void (**)(char *, uint64_t))(v4 + 8);
    v47(v8, v3);
    v47(v11, v3);
  }
  return v23 & 1;
}

uint64_t sub_1000A4F84(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  __n128 v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v37;
  _BYTE *v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE v41[4];
  int v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _BYTE *v47;
  uint64_t v48;
  uint64_t v49;

  v5 = v4;
  v10 = type metadata accessor for CustodianHealthRecord(0);
  __chkstk_darwin(v10, v11);
  v47 = &v41[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = type metadata accessor for CustodianRecoveryRecords(0);
  v15 = __chkstk_darwin(v13, v14);
  v17 = &v41[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v18 = a1 + *(int *)(v15 + 20);
  v19 = v18 + *(int *)(type metadata accessor for CustodianRecoveryInfoRecord(0) + 32);
  v20 = *(_QWORD *)(v19 + 8);
  if (v20 >> 60 == 15)
  {
    v45 = a3;
    v46 = a4;
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v21 = type metadata accessor for Logger(0);
    sub_100005288(v21, (uint64_t)qword_1002A8A08);
    v22 = sub_100027FE8(a1, (uint64_t)v17, type metadata accessor for CustodianRecoveryRecords);
    v23 = Logger.logObject.getter(v22);
    v25 = static os_log_type_t.default.getter(v24);
    if (os_log_type_enabled(v23, (os_log_type_t)v25))
    {
      v42 = v25;
      v43 = a2;
      v44 = v5;
      v26 = swift_slowAlloc(22, -1);
      v27 = swift_slowAlloc(64, -1);
      v49 = v27;
      *(_DWORD *)v26 = 136315394;
      if (qword_10028AE48 != -1)
        swift_once(&qword_10028AE48, sub_1000A27C0);
      v28 = qword_10028F660;
      v29 = *(_QWORD *)algn_10028F668;
      swift_bridgeObjectRetain(*(_QWORD *)algn_10028F668);
      v48 = sub_1001DEF4C(v28, v29, &v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49);
      swift_bridgeObjectRelease(v29);
      *(_WORD *)(v26 + 12) = 2080;
      v30 = type metadata accessor for UUID(0);
      v31 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v32 = dispatch thunk of CustomStringConvertible.description.getter(v30, v31);
      v34 = v33;
      v48 = sub_1001DEF4C(v32, v33, &v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49);
      swift_bridgeObjectRelease(v34);
      sub_100028388((uint64_t)v17, type metadata accessor for CustodianRecoveryRecords);
      _os_log_impl((void *)&_mh_execute_header, v23, (os_log_type_t)v42, "%s - custodian %s has no recovery key, update timestamp.", (uint8_t *)v26, 0x16u);
      swift_arrayDestroy(v27, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v27, -1, -1);
      swift_slowDealloc(v26, -1, -1);

      a2 = v43;
    }
    else
    {
      sub_100028388((uint64_t)v17, type metadata accessor for CustodianRecoveryRecords);

    }
    v37 = a1 + *(int *)(v13 + 24);
    v38 = v47;
    sub_100027FE8(v37, (uint64_t)v47, type metadata accessor for CustodianHealthRecord);
    v39 = swift_allocObject(&unk_100264928, 32, 7);
    *(_QWORD *)(v39 + 16) = v45;
    v40 = v46;
    *(_QWORD *)(v39 + 24) = v46;
    swift_retain(v40);
    sub_1000A538C((uint64_t)v38, 0, 0xF000000000000000, 0, a2, 3, (uint64_t)sub_1000A95D4, v39);
    swift_release(v39);
    return sub_100028388((uint64_t)v38, type metadata accessor for CustodianHealthRecord);
  }
  else
  {
    v35 = *(_QWORD *)v19;
    sub_10000F450(*(_QWORD *)v19, *(_QWORD *)(v19 + 8));
    sub_1000A5CB8(a1, v35, v20, a2, a3, a4);
    return sub_1000144D8(v35, v20);
  }
}

uint64_t sub_1000A538C(uint64_t a1, uint64_t a2, unint64_t a3, int a4, void *a5, int a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t *v44;
  id v45;
  uint64_t v46;
  void (*v47)(char *, char *, uint64_t);
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  NSObject *v60;
  os_log_type_t v61;
  uint8_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  uint64_t v81;
  unint64_t v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t (*v89)@<X0>(uint64_t@<X0>, uint64_t@<X8>);
  id v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  _QWORD *v95;
  uint64_t (**v96)@<X0>(uint64_t@<X0>, uint64_t@<X8>);
  uint64_t v97;
  uint64_t *v98;
  unint64_t v99;
  uint64_t v100;
  id v101;
  id v102;
  void (*v103)(char *, uint64_t);
  uint64_t v104;
  uint64_t v106;
  uint64_t v107;
  void (*v108)(char *, char *, uint64_t);
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  _QWORD *v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  void *v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136[3];
  uint64_t v137;

  v9 = v8;
  v123 = a8;
  v118 = a7;
  LODWORD(v120) = a6;
  v124 = a5;
  v119 = a4;
  v133 = a3;
  v134 = a2;
  v128 = a1;
  v117 = *v8;
  v10 = sub_1000080B4(&qword_10028E810);
  __chkstk_darwin(v10, v11);
  v121 = (char *)&v106 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v113 = sub_1000080B4(&qword_10028CCC0);
  v111 = *(_QWORD *)(v113 - 8);
  __chkstk_darwin(v113, v13);
  v110 = (char *)&v106 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v127 = type metadata accessor for CustodianHealthRecord(0);
  v112 = *(_QWORD *)(v127 - 8);
  v16 = __chkstk_darwin(v127, v15);
  v122 = (uint64_t)&v106 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v16, v18);
  v126 = (uint64_t)&v106 - v20;
  v22 = __chkstk_darwin(v19, v21);
  v116 = (uint64_t)&v106 - v23;
  v114 = v24;
  __chkstk_darwin(v22, v25);
  v107 = (uint64_t)&v106 - v26;
  v27 = type metadata accessor for Date(0);
  v28 = *(_QWORD *)(v27 - 8);
  v29 = *(_QWORD *)(v28 + 64);
  v31 = __chkstk_darwin(v27, v30);
  v33 = __chkstk_darwin(v31, v32);
  v35 = (char *)&v106 - v34;
  __chkstk_darwin(v33, v36);
  v38 = (char *)&v106 - v37;
  v39 = sub_1000080B4(&qword_10028F818);
  v40 = *(_QWORD *)(v39 - 8);
  __chkstk_darwin(v39, v41);
  v43 = (char *)&v106 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  v115 = v9;
  (*(void (**)(char *, uint64_t, uint64_t))(v40 + 16))(v43, (uint64_t)v9 + OBJC_IVAR____TtC13appleaccountd20CustodianHealthCheck__versionProvider, v39);
  Dependency.wrappedValue.getter(v136, v39);
  (*(void (**)(char *, uint64_t))(v40 + 8))(v43, v39);
  v44 = sub_10000732C(v136, v137);
  v45 = sub_100191F9C(*v44);
  v46 = sub_100006F58(v136);
  Date.init()(v46);
  v47 = *(void (**)(char *, char *, uint64_t))(v28 + 16);
  v125 = v38;
  v47(v35, v38, v27);
  v130 = (char *)&v106 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v108 = v47;
  v47(v130, v35, v27);
  v48 = *(unsigned __int8 *)(v28 + 80);
  v49 = (v48 + 16) & ~v48;
  v50 = (v29 + v49 + 7) & 0xFFFFFFFFFFFFFFF8;
  v51 = (v50 + 23) & 0xFFFFFFFFFFFFFFF8;
  v52 = swift_allocObject(&unk_100264950, v51 + 8, v48 | 7);
  v131 = v28;
  v132 = v27;
  (*(void (**)(uint64_t, char *, uint64_t))(v28 + 32))(v52 + v49, v35, v27);
  v53 = (_QWORD *)(v52 + v50);
  v54 = v133;
  v55 = v134;
  *v53 = v134;
  v53[1] = v54;
  v129 = v52;
  v109 = (uint64_t)v45;
  *(_QWORD *)(v52 + v51) = v45;
  sub_100014534(v55, v54);
  sub_100014534(v55, v54);
  if (qword_10028ADC8 != -1)
    swift_once(&qword_10028ADC8, sub_100046D2C);
  v56 = type metadata accessor for Logger(0);
  sub_100005288(v56, (uint64_t)qword_1002A89D8);
  v57 = v128;
  v58 = v107;
  v59 = sub_100027FE8(v128, v107, type metadata accessor for CustodianHealthRecord);
  v60 = Logger.logObject.getter(v59);
  v61 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v60, v61))
  {
    v62 = (uint8_t *)swift_slowAlloc(12, -1);
    v63 = swift_slowAlloc(32, -1);
    v136[0] = v63;
    *(_DWORD *)v62 = 136315138;
    v64 = type metadata accessor for UUID(0);
    v65 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v66 = dispatch thunk of CustomStringConvertible.description.getter(v64, v65);
    v68 = v67;
    v135 = sub_1001DEF4C(v66, v67, v136);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v135, v136);
    swift_bridgeObjectRelease(v68);
    sub_100028388(v58, type metadata accessor for CustodianHealthRecord);
    _os_log_impl((void *)&_mh_execute_header, v60, v61, "Updating custodian health record %s.", v62, 0xCu);
    swift_arrayDestroy(v63, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v63, -1, -1);
    swift_slowDealloc(v62, -1, -1);
  }
  else
  {
    sub_100028388(v58, type metadata accessor for CustodianHealthRecord);
  }

  v69 = v111;
  v70 = v110;
  v71 = v113;
  (*(void (**)(char *, uint64_t, uint64_t))(v111 + 16))(v110, (uint64_t)v115 + OBJC_IVAR____TtC13appleaccountd20CustodianHealthCheck__storageController, v113);
  Dependency.wrappedValue.getter(v136, v71);
  (*(void (**)(char *, uint64_t))(v69 + 8))(v70, v71);
  v72 = sub_10000732C(v136, v137);
  v73 = v116;
  sub_100027FE8(v57, v116, type metadata accessor for CustodianHealthRecord);
  v74 = *(unsigned __int8 *)(v112 + 80);
  v75 = (v74 + 16) & ~v74;
  v113 = v74 | 7;
  v115 = (_QWORD *)(v114 + 7);
  v76 = (v114 + 7 + v75) & 0xFFFFFFFFFFFFFFF8;
  v77 = (v76 + 23) & 0xFFFFFFFFFFFFFFF8;
  v78 = (v77 + 17) & 0xFFFFFFFFFFFFFFF8;
  v79 = swift_allocObject(&unk_100264978, v78 + 8, v74 | 7);
  sub_10003B730(v73, v79 + v75, type metadata accessor for CustodianHealthRecord);
  v80 = (_QWORD *)(v79 + v76);
  v81 = v123;
  *v80 = v118;
  v80[1] = v81;
  v82 = v79 + v77;
  v83 = v124;
  *(_QWORD *)v82 = v124;
  *(_BYTE *)(v82 + 8) = v119 & 1;
  *(_BYTE *)(v82 + 9) = (_BYTE)v120;
  *(_QWORD *)(v79 + v78) = v117;
  v84 = *v72;
  v120 = sub_10000732C((_QWORD *)(*v72 + 56), *(_QWORD *)(*v72 + 80));
  sub_100027FE8(v57, v73, type metadata accessor for CustodianHealthRecord);
  v85 = (uint64_t)v121;
  v86 = v132;
  v108(v121, v130, v132);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v131 + 56))(v85, 0, 1, v86);
  v88 = v133;
  v87 = v134;
  sub_100014534(v134, v133);
  v89 = (uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X8>))v129;
  swift_retain(v129);
  swift_retain(v81);
  v90 = v83;
  v91 = v126;
  sub_10016A208(v73, v85, v87, v88, 2u, v109, 0, v126);
  v92 = v122;
  sub_100027FE8(v128, v122, type metadata accessor for CustodianHealthRecord);
  v93 = (v74 + 48) & ~v74;
  v94 = ((unint64_t)v115 + v93) & 0xFFFFFFFFFFFFFFF8;
  v95 = (_QWORD *)swift_allocObject(&unk_1002649A0, v94 + 16, v113);
  v95[2] = v84;
  v95[3] = sub_1000A97F0;
  v95[4] = v79;
  v95[5] = 0;
  sub_10003B730(v92, (uint64_t)v95 + v93, type metadata accessor for CustodianHealthRecord);
  v96 = (uint64_t (**)@<X0>(uint64_t@<X0>, uint64_t@<X8>))((char *)v95 + v94);
  *v96 = sub_1000A9664;
  v96[1] = v89;
  v97 = qword_10028AF00;
  swift_retain(v89);
  swift_retain(v84);
  swift_retain(v79);
  if (v97 != -1)
    swift_once(&qword_10028AF00, sub_1001FD458);
  if (*(_BYTE *)(v91 + *(int *)(v127 + 36)) == 1)
  {
    if (qword_10028AF10 != -1)
      swift_once(&qword_10028AF10, sub_1001FDD8C);
    v98 = &qword_1002A8C80;
  }
  else
  {
    if (qword_10028AF08 != -1)
      swift_once(&qword_10028AF08, sub_1001FDD54);
    v98 = &qword_1002A8C70;
  }
  v100 = *v98;
  v99 = v98[1];
  swift_bridgeObjectRetain(v99);
  v101 = sub_1001FD4C0(v100, v99);
  v102 = objc_msgSend(v101, "sharedCloudDatabase");
  swift_bridgeObjectRelease(v99);

  sub_100053FB4(v91, v102, (uint64_t)sub_1000A986C, (uint64_t)v95);
  swift_release(v95);

  sub_100028388(v91, type metadata accessor for CustodianHealthRecord);
  swift_release_n(v129, 2);
  swift_release(v79);
  v103 = *(void (**)(char *, uint64_t))(v131 + 8);
  v104 = v132;
  v103(v130, v132);
  sub_1000144D8(v134, v88);
  v103(v125, v104);
  return sub_100006F58(v136);
}

uint64_t sub_1000A5CB8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  char v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  __n128 v41;
  os_log_type_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  void (*v56)(char *);
  uint64_t v57;
  NSObject *v58;
  __n128 v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  char *v69;
  uint64_t v70;
  NSObject *v71;
  __n128 v72;
  os_log_type_t v73;
  uint8_t *v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  _QWORD v80[5];
  int v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  uint64_t v96;

  v88 = a6;
  v87 = a5;
  v86 = a4;
  v9 = type metadata accessor for Logger(0);
  v90 = *(_QWORD *)(v9 - 8);
  v91 = v9;
  __chkstk_darwin(v9, v10);
  v89 = (char *)v80 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for CustodianRecoveryRecords(0);
  v14 = __chkstk_darwin(v12, v13);
  v16 = (char *)v80 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14, v17);
  v19 = (char *)v80 - v18;
  v20 = type metadata accessor for SHA256(0);
  v21 = *(_QWORD *)(v20 - 8);
  v23 = __chkstk_darwin(v20, v22);
  v25 = (char *)v80 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  SHA256.init()(v23);
  sub_1001D3844((uint64_t)v25, a2, a3);
  v27 = v26;
  v29 = v28;
  (*(void (**)(char *, uint64_t))(v21 + 8))(v25, v20);
  v30 = a1 + *(int *)(v12 + 24);
  v84 = type metadata accessor for CustodianHealthRecord(0);
  v31 = *(int *)(v84 + 28);
  v85 = v30;
  v32 = (uint64_t *)(v30 + v31);
  v33 = *v32;
  v34 = v32[1];
  v82 = v34 >> 60;
  if (v34 >> 60 == 15)
  {
    sub_10000F450(v27, v29);
    sub_1000144D8(v33, v34);
    v35 = v27;
    sub_1000144D8(v27, v29);
LABEL_10:
    v52 = v91;
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v53 = sub_100005288(v52, (uint64_t)qword_1002A8A08);
    v55 = v89;
    v54 = v90;
    v56 = *(void (**)(char *))(v90 + 16);
    v83 = v53;
    v56(v89);
    sub_100027FE8(a1, (uint64_t)v16, type metadata accessor for CustodianRecoveryRecords);
    sub_100014534(v33, v34);
    sub_10000F450(v35, v29);
    sub_100014534(v33, v34);
    v57 = sub_10000F450(v35, v29);
    v58 = Logger.logObject.getter(v57);
    v81 = static os_log_type_t.default.getter(v59);
    if (os_log_type_enabled(v58, (os_log_type_t)v81))
    {
      v80[1] = v58;
      v80[4] = v29;
      v80[2] = v29 >> 62;
      v60 = swift_slowAlloc(42, -1);
      v80[0] = swift_slowAlloc(128, -1);
      v96 = v80[0];
      *(_DWORD *)v60 = 136315906;
      if (qword_10028AE48 != -1)
        swift_once(&qword_10028AE48, sub_1000A27C0);
      v62 = qword_10028F660;
      v61 = *(_QWORD *)algn_10028F668;
      swift_bridgeObjectRetain(*(_QWORD *)algn_10028F668);
      v94 = sub_1001DEF4C(v62, v61, &v96);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v94, &v95);
      swift_bridgeObjectRelease(v61);
      *(_WORD *)(v60 + 12) = 2080;
      v63 = type metadata accessor for UUID(0);
      v64 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v65 = dispatch thunk of CustomStringConvertible.description.getter(v63, v64);
      v67 = v66;
      v94 = sub_1001DEF4C(v65, v66, &v96);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v94, &v95);
      swift_bridgeObjectRelease(v67);
      sub_100028388((uint64_t)v16, type metadata accessor for CustodianRecoveryRecords);
      *(_WORD *)(v60 + 22) = 2080;
      if (v82 <= 0xE)
        v68 = v34;
      else
        v68 = 0xC000000000000000;
      v69 = (char *)&loc_1000A62C0 + dword_1000A6C7C[v68 >> 62];
      v80[3] = v60;
      __asm { BR              X10 }
    }
    sub_100028388((uint64_t)v16, type metadata accessor for CustodianRecoveryRecords);
    sub_1000144D8(v33, v34);
    sub_1000144D8(v33, v34);
    sub_10000F494(v35, v29);
    sub_10000F494(v35, v29);

    v70 = (*(uint64_t (**)(char *, uint64_t))(v54 + 8))(v55, v52);
    v71 = Logger.logObject.getter(v70);
    v73 = static os_log_type_t.default.getter(v72);
    if (os_log_type_enabled(v71, v73))
    {
      v75 = (uint8_t *)swift_slowAlloc(12, -1);
      v76 = swift_slowAlloc(32, -1);
      v94 = v76;
      *(_DWORD *)v75 = 136315138;
      if (qword_10028AE48 != -1)
        swift_once(&qword_10028AE48, sub_1000A27C0);
      v77 = qword_10028F660;
      v78 = *(_QWORD *)algn_10028F668;
      swift_bridgeObjectRetain(*(_QWORD *)algn_10028F668);
      v92 = sub_1001DEF4C(v77, v78, &v94);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v92, &v93);
      swift_bridgeObjectRelease(v78);
      _os_log_impl((void *)&_mh_execute_header, v71, v73, "%s - updating health record with new checksum", v75, 0xCu);
      swift_arrayDestroy(v76, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v76, -1, -1);
      swift_slowDealloc(v75, -1, -1);
    }

    sub_10000F450(v35, v29);
    sub_1000A538C(v85, v35, v29, 1, v86, 2, v87, v88);
    sub_10000F494(v35, v29);
    return sub_10000F494(v35, v29);
  }
  sub_100014534(v33, v34);
  sub_10000F450(v27, v29);
  sub_10000EA4C(v33, v34);
  v37 = v36;
  v35 = v27;
  sub_10000F494(v27, v29);
  sub_1000144D8(v33, v34);
  if ((v37 & 1) == 0)
    goto LABEL_10;
  v38 = v91;
  if (qword_10028ADD8 != -1)
    swift_once(&qword_10028ADD8, sub_100046D78);
  sub_100005288(v38, (uint64_t)qword_1002A8A08);
  v39 = sub_100027FE8(a1, (uint64_t)v19, type metadata accessor for CustodianRecoveryRecords);
  v40 = Logger.logObject.getter(v39);
  v42 = static os_log_type_t.default.getter(v41);
  if (os_log_type_enabled(v40, v42))
  {
    v43 = swift_slowAlloc(22, -1);
    v91 = swift_slowAlloc(64, -1);
    v94 = v91;
    *(_DWORD *)v43 = 136315394;
    if (qword_10028AE48 != -1)
      swift_once(&qword_10028AE48, sub_1000A27C0);
    v45 = qword_10028F660;
    v44 = *(_QWORD *)algn_10028F668;
    swift_bridgeObjectRetain(*(_QWORD *)algn_10028F668);
    v92 = sub_1001DEF4C(v45, v44, &v94);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v92, &v93);
    swift_bridgeObjectRelease(v44);
    *(_WORD *)(v43 + 12) = 2080;
    v46 = type metadata accessor for UUID(0);
    v47 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v48 = dispatch thunk of CustomStringConvertible.description.getter(v46, v47);
    v50 = v49;
    v92 = sub_1001DEF4C(v48, v49, &v94);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v92, &v93);
    swift_bridgeObjectRelease(v50);
    sub_100028388((uint64_t)v19, type metadata accessor for CustodianRecoveryRecords);
    _os_log_impl((void *)&_mh_execute_header, v40, v42, "%s - custodian %s recovery key checksum is valid.", (uint8_t *)v43, 0x16u);
    v51 = v91;
    swift_arrayDestroy(v91, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v51, -1, -1);
    swift_slowDealloc(v43, -1, -1);
  }
  else
  {
    sub_100028388((uint64_t)v19, type metadata accessor for CustodianRecoveryRecords);
  }

  sub_1000A538C(v85, 0, 0xF000000000000000, 1, v86, 1, v87, v88);
  return sub_10000F494(v35, v29);
}

void sub_1000A6C9C(uint64_t a1, void (*a2)(void *))
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;

  type metadata accessor for AACustodianError(0);
  v4 = v3;
  v8 = -7003;
  v5 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
  v6 = sub_100005150((unint64_t *)&qword_10028B640, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianError, (uint64_t)&unk_100218378);
  _BridgedStoredNSError.init(_:userInfo:)(&v9, &v8, v5, v4, v6);
  v7 = v9;
  a2(v9);

}

uint64_t sub_1000A6D44@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t (*v20)(_QWORD);
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v12 = sub_1000080B4(&qword_10028E810);
  __chkstk_darwin(v12, v13);
  v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for CustodianHealthRecord(0);
  __chkstk_darwin(v16, v17);
  v19 = (char *)&v24 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100027FE8(a1, (uint64_t)v19, v20);
  v21 = type metadata accessor for Date(0);
  v22 = *(_QWORD *)(v21 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v15, a2, v21);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v15, 0, 1, v21);
  sub_100014534(a3, a4);
  return sub_10016A208((uint64_t)v19, (uint64_t)v15, a3, a4, 2u, a5, 0, a6);
}

uint64_t sub_1000A6E84(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4, uint64_t a5, int a6, int a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  _BYTE v60[12];
  int v61;
  uint64_t v62;
  uint64_t v63;
  void (*v64)(uint64_t);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67[3];

  v61 = a6;
  LODWORD(v62) = a7;
  v65 = a5;
  v11 = type metadata accessor for CustodianHealthRecord(0);
  v13 = __chkstk_darwin(v11, v12);
  v15 = &v60[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v13, v16);
  v18 = &v60[-v17];
  v19 = sub_1000080B4(&qword_10028D5B8);
  __chkstk_darwin(v19, v20);
  v22 = (uint64_t *)&v60[-((v21 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100024A20(a1, (uint64_t)v22, &qword_10028D5B8);
  if (swift_getEnumCaseMultiPayload(v22, v19) == 1)
  {
    v63 = a4;
    v64 = a3;
    v23 = *v22;
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v24 = type metadata accessor for Logger(0);
    sub_100005288(v24, (uint64_t)qword_1002A8A08);
    sub_100027FE8(a2, (uint64_t)v15, type metadata accessor for CustodianHealthRecord);
    swift_errorRetain(v23);
    v25 = swift_errorRetain(v23);
    v26 = Logger.logObject.getter(v25);
    v27 = static os_log_type_t.error.getter(v26);
    if (os_log_type_enabled(v26, v27))
    {
      v28 = swift_slowAlloc(32, -1);
      v29 = (uint64_t *)swift_slowAlloc(8, -1);
      v62 = swift_slowAlloc(64, -1);
      v67[0] = v62;
      *(_DWORD *)v28 = 136315650;
      if (qword_10028AE48 != -1)
        swift_once(&qword_10028AE48, sub_1000A27C0);
      v30 = qword_10028F660;
      v31 = *(_QWORD *)algn_10028F668;
      swift_bridgeObjectRetain(*(_QWORD *)algn_10028F668);
      v66 = sub_1001DEF4C(v30, v31, v67);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, v67);
      swift_bridgeObjectRelease(v31);
      *(_WORD *)(v28 + 12) = 2080;
      v32 = type metadata accessor for UUID(0);
      v33 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v34 = dispatch thunk of CustomStringConvertible.description.getter(v32, v33);
      v36 = v35;
      v66 = sub_1001DEF4C(v34, v35, v67);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, v67);
      swift_bridgeObjectRelease(v36);
      sub_100028388((uint64_t)v15, type metadata accessor for CustodianHealthRecord);
      *(_WORD *)(v28 + 22) = 2112;
      v37 = _convertErrorToNSError(_:)(v23);
      v66 = v37;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, v67);
      *v29 = v37;
      swift_errorRelease(v23);
      swift_errorRelease(v23);
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "%s - error updating custodian health record %s: %@", (uint8_t *)v28, 0x20u);
      v38 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v29, 1, v38);
      swift_slowDealloc(v29, -1, -1);
      v39 = v62;
      swift_arrayDestroy(v62, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v39, -1, -1);
      swift_slowDealloc(v28, -1, -1);
    }
    else
    {
      sub_100028388((uint64_t)v15, type metadata accessor for CustodianHealthRecord);
      swift_errorRelease(v23);
      swift_errorRelease(v23);
    }

    v53 = _convertErrorToNSError(_:)(v23);
    v54 = (_QWORD *)(v65 + qword_100299390);
    v55 = swift_beginAccess(v65 + qword_100299390, v67, 33, 0);
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v55);
    v57 = *(_QWORD *)((*v54 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v56 = *(_QWORD *)((*v54 & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v57 >= v56 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v56 > 1, v57 + 1, 1);
    v58 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v57, v53);
    specialized Array._endMutation()(v58);
    swift_endAccess(v67);
    sub_1001E3F30(0, 4);
    swift_errorRetain(v23);
    v64(v23);
    swift_errorRelease(v23);
    return swift_errorRelease(v23);
  }
  else
  {
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v40 = type metadata accessor for Logger(0);
    sub_100005288(v40, (uint64_t)qword_1002A8A08);
    v41 = sub_100027FE8(a2, (uint64_t)v18, type metadata accessor for CustodianHealthRecord);
    v42 = Logger.logObject.getter(v41);
    v43 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v42, v43))
    {
      v63 = a4;
      v64 = a3;
      v44 = swift_slowAlloc(22, -1);
      v45 = swift_slowAlloc(64, -1);
      v67[0] = v45;
      *(_DWORD *)v44 = 136315394;
      if (qword_10028AE48 != -1)
        swift_once(&qword_10028AE48, sub_1000A27C0);
      v46 = qword_10028F660;
      v47 = *(_QWORD *)algn_10028F668;
      swift_bridgeObjectRetain(*(_QWORD *)algn_10028F668);
      v66 = sub_1001DEF4C(v46, v47, v67);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, v67);
      swift_bridgeObjectRelease(v47);
      *(_WORD *)(v44 + 12) = 2080;
      v48 = type metadata accessor for UUID(0);
      v49 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v50 = dispatch thunk of CustomStringConvertible.description.getter(v48, v49);
      v52 = v51;
      v66 = sub_1001DEF4C(v50, v51, v67);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, v67);
      swift_bridgeObjectRelease(v52);
      sub_100028388((uint64_t)v18, type metadata accessor for CustodianHealthRecord);
      _os_log_impl((void *)&_mh_execute_header, v42, v43, "%s - custodian health record %s was updated.", (uint8_t *)v44, 0x16u);
      swift_arrayDestroy(v45, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v45, -1, -1);
      swift_slowDealloc(v44, -1, -1);

      a3 = v64;
    }
    else
    {
      sub_100028388((uint64_t)v18, type metadata accessor for CustodianHealthRecord);

    }
    objc_msgSend((id)objc_opt_self(AATrustedContactNotificationPublisher), "postRecoveryContactChangedNotification");
    a3(0);
    sub_1001E3F30(v61 & 1, v62);
    return sub_100004934((uint64_t)v22, &qword_10028D5B8);
  }
}

uint64_t sub_1000A7574(uint64_t a1, uint64_t a2, void (*a3)(_QWORD), uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(_QWORD), uint64_t a8)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  NSObject *v56;
  os_log_type_t v57;
  BOOL v58;
  uint64_t v59;
  uint8_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint8_t *v66;
  uint64_t v67;
  uint64_t v68;
  NSObject *v69;
  __n128 v70;
  os_log_type_t v71;
  uint64_t v72;
  uint8_t *v73;
  uint8_t *v74;
  NSObject **v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  void *v84;
  void *v85;
  uint64_t v86;
  void *v87;
  uint64_t v88;
  int v89;
  id v90;
  double v91;
  char v92;
  double v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  _QWORD *v111;
  void *v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  char *v118;
  uint64_t v119;
  char *v120;
  void *v121;
  uint64_t v122;
  void (*v123)(char *, uint64_t);
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  NSObject *v128;
  os_log_type_t v129;
  _BOOL4 v130;
  uint8_t *v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  unint64_t v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  void (*v141)(_QWORD);
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  _QWORD *v146;
  void (*v147)(_QWORD);
  uint64_t v148;
  _QWORD *v149;
  uint64_t v150;
  BOOL v151;
  uint64_t v152;
  void *v153;
  uint64_t *v154;
  unint64_t v155;
  uint64_t v156;
  id v157;
  id v158;
  NSObject **v159;
  void (*v160)(char *, uint64_t);
  uint64_t v161;
  id v162;
  id v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  void (*v167)(_QWORD);
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  char *v171;
  uint64_t v172;
  uint64_t v173;
  char *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  char *v178;
  uint64_t v179;
  char *v180;
  uint64_t v181;
  uint64_t v182;
  char *v183;
  uint64_t v184;
  uint64_t v185;
  void (*v186)(_QWORD);
  uint64_t v187;
  uint64_t v188;
  char *v189;
  uint64_t v190;
  uint64_t v191;
  void (*v192)(char *, uint64_t);
  NSObject **v193;
  uint64_t v194;
  uint64_t aBlock[5];
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  _QWORD v199[2];
  char v200[8];

  v186 = a7;
  v188 = a6;
  v194 = a4;
  v185 = type metadata accessor for DispatchWorkItemFlags(0);
  v184 = *(_QWORD *)(v185 - 8);
  __chkstk_darwin(v185, v13);
  v183 = (char *)&v161 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v182 = type metadata accessor for DispatchQoS(0);
  v181 = *(_QWORD *)(v182 - 8);
  __chkstk_darwin(v182, v15);
  v180 = (char *)&v161 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v190 = type metadata accessor for DispatchTime(0);
  v179 = *(_QWORD *)(v190 - 8);
  v18 = __chkstk_darwin(v190, v17);
  v178 = (char *)&v161 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18, v20);
  v189 = (char *)&v161 - v21;
  v176 = type metadata accessor for DispatchQoS.QoSClass(0);
  v175 = *(_QWORD *)(v176 - 8);
  __chkstk_darwin(v176, v22);
  v174 = (char *)&v161 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_1000080B4(&qword_10028D5B0);
  __chkstk_darwin(v24, v25);
  v193 = (NSObject **)((char *)&v161 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  v173 = type metadata accessor for CustodianHealthRecord(0);
  v187 = *(_QWORD *)(v173 - 8);
  v27 = *(_QWORD *)(v187 + 64);
  v29 = __chkstk_darwin(v173, v28);
  v177 = (uint64_t)&v161 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = __chkstk_darwin(v29, v30);
  v170 = (uint64_t)&v161 - v32;
  v34 = __chkstk_darwin(v31, v33);
  v171 = (char *)&v161 - v35;
  v37 = __chkstk_darwin(v34, v36);
  v169 = (uint64_t)&v161 - v38;
  v40 = __chkstk_darwin(v37, v39);
  v172 = (uint64_t)&v161 - v41;
  __chkstk_darwin(v40, v42);
  v44 = (char *)&v161 - v43;
  v45 = sub_1000080B4(&qword_10028D5B8);
  v47 = __chkstk_darwin(v45, v46);
  v192 = (void (*)(char *, uint64_t))((char *)&v161 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v47, v49);
  v51 = (uint64_t *)((char *)&v161 - v50);
  sub_100024A20(a1, (uint64_t)&v161 - v50, &qword_10028D5B8);
  v191 = v45;
  if (swift_getEnumCaseMultiPayload(v51, v45) == 1)
  {
    v168 = a5;
    v52 = *v51;
    if (qword_10028ADE8 != -1)
      swift_once(&qword_10028ADE8, sub_100046DC4);
    v53 = type metadata accessor for Logger(0);
    v54 = sub_100005288(v53, (uint64_t)qword_1002A8A38);
    swift_errorRetain(v52);
    v55 = swift_errorRetain(v52);
    v164 = v54;
    v56 = Logger.logObject.getter(v55);
    v57 = static os_log_type_t.error.getter(v56);
    v58 = os_log_type_enabled(v56, v57);
    v166 = a2;
    v165 = a8;
    if (v58)
    {
      v59 = swift_slowAlloc(12, -1);
      v167 = a3;
      v60 = (uint8_t *)v59;
      v61 = swift_slowAlloc(32, -1);
      aBlock[0] = v61;
      *(_DWORD *)v60 = 136315138;
      v198 = v52;
      swift_errorRetain(v52);
      v62 = sub_1000080B4(&qword_10028E850);
      v63 = String.init<A>(describing:)(&v198, v62);
      v65 = v64;
      v198 = sub_1001DEF4C(v63, v64, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v198, v199);
      swift_bridgeObjectRelease(v65);
      swift_errorRelease(v52);
      swift_errorRelease(v52);
      _os_log_impl((void *)&_mh_execute_header, v56, v57, "Error saving to shared DB: %s", v60, 0xCu);
      swift_arrayDestroy(v61, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v61, -1, -1);
      v66 = v60;
      a3 = v167;
      swift_slowDealloc(v66, -1, -1);
    }
    else
    {
      swift_errorRelease(v52);
      swift_errorRelease(v52);
    }

    v76 = v193;
    v77 = v168;
    if (v168 <= 2 && (swift_getErrorValue(v52, v200, v199), (v78 = sub_10015D168(v199[1])) != 0))
    {
      v79 = (void *)v78;
      v193 = (NSObject **)v52;
      v167 = a3;
      type metadata accessor for CKError(0);
      v81 = v80;
      v198 = 14;
      v82 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
      v83 = sub_100005150((unint64_t *)&qword_10028B678, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_100218478);
      _BridgedStoredNSError.init(_:userInfo:)(aBlock, &v198, v82, v81, v83);
      v84 = (void *)aBlock[0];
      v197 = aBlock[0];
      _BridgedStoredNSError.code.getter(&v198, v81, v83);

      v85 = (void *)sub_10015D724(v198, v79);
      v86 = v187;
      v163 = v79;
      if (v85)
      {
        v87 = (void *)sub_10015D200(v79);
        if (v87)
        {
          v88 = v173;
          v89 = *(unsigned __int8 *)(v188 + *(int *)(v173 + 36));
          v90 = v87;
          sub_10016A448(v90, v89, v76);
          (*(void (**)(NSObject **, _QWORD, uint64_t, uint64_t))(v86 + 56))(v76, 0, 1, v88);
          v125 = v172;
          sub_10003B730((uint64_t)v76, v172, type metadata accessor for CustodianHealthRecord);
          v126 = v169;
          v127 = sub_100027FE8(v125, v169, type metadata accessor for CustodianHealthRecord);
          v128 = Logger.logObject.getter(v127);
          v129 = static os_log_type_t.error.getter(v128);
          v130 = os_log_type_enabled(v128, v129);
          v162 = v90;
          if (v130)
          {
            v131 = (uint8_t *)swift_slowAlloc(12, -1);
            v132 = swift_slowAlloc(32, -1);
            aBlock[0] = v132;
            *(_DWORD *)v131 = 136315138;
            v133 = UUID.uuidString.getter(v132);
            v135 = v134;
            v198 = sub_1001DEF4C(v133, v134, aBlock);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v198, v199);
            swift_bridgeObjectRelease(v135);
            sub_100028388(v126, type metadata accessor for CustodianHealthRecord);
            _os_log_impl((void *)&_mh_execute_header, v128, v129, "Trying to resave to shared DB after conflict resolution %s", v131, 0xCu);
            swift_arrayDestroy(v132, 1, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v132, -1, -1);
            swift_slowDealloc(v131, -1, -1);
          }
          else
          {
            sub_100028388(v126, type metadata accessor for CustodianHealthRecord);
          }

          v136 = v165;
          v137 = v171;
          v138 = v77 + 1;
          v139 = v166;
          v192 = (void (*)(char *, uint64_t))sub_10000732C((_QWORD *)(v166 + 56), *(_QWORD *)(v166 + 80));
          v140 = v172;
          v141 = v186;
          v186(v172);
          v142 = v170;
          sub_100027FE8(v140, v170, type metadata accessor for CustodianHealthRecord);
          v143 = *(unsigned __int8 *)(v187 + 80);
          v144 = (v143 + 48) & ~v143;
          v145 = (v27 + v144 + 7) & 0xFFFFFFFFFFFFFFF8;
          v146 = (_QWORD *)swift_allocObject(&unk_100264A18, v145 + 16, v143 | 7);
          v147 = v167;
          v146[2] = v139;
          v146[3] = v147;
          v148 = v194;
          v146[4] = v194;
          v146[5] = v138;
          sub_10003B730(v142, (uint64_t)v146 + v144, type metadata accessor for CustodianHealthRecord);
          v149 = (_QWORD *)((char *)v146 + v145);
          *v149 = v141;
          v149[1] = v136;
          v150 = qword_10028AF00;
          swift_retain(v139);
          swift_retain(v148);
          swift_retain(v136);
          if (v150 != -1)
            swift_once(&qword_10028AF00, sub_1001FD458);
          v151 = v137[*(int *)(v173 + 36)] == 1;
          v152 = (uint64_t)v137;
          v153 = v162;
          if (v151)
          {
            if (qword_10028AF10 != -1)
              swift_once(&qword_10028AF10, sub_1001FDD8C);
            v154 = &qword_1002A8C80;
          }
          else
          {
            if (qword_10028AF08 != -1)
              swift_once(&qword_10028AF08, sub_1001FDD54);
            v154 = &qword_1002A8C70;
          }
          v156 = *v154;
          v155 = v154[1];
          swift_bridgeObjectRetain(v155);
          v157 = sub_1001FD4C0(v156, v155);
          v158 = objc_msgSend(v157, "sharedCloudDatabase");
          swift_bridgeObjectRelease(v155);

          sub_100053FB4(v152, v158, (uint64_t)sub_1000A986C, (uint64_t)v146);
          swift_release(v146);

          sub_100028388(v152, type metadata accessor for CustodianHealthRecord);
          swift_errorRelease(v193);
          return sub_100028388(v172, type metadata accessor for CustodianHealthRecord);
        }
      }
      if (sub_10015D630(v79) || sub_10015D638(v79) || sub_10015D640(v79) || sub_10015D648(v79) || sub_10015D650(v79))
      {
        v91 = COERCE_DOUBLE(sub_10015D540((uint64_t)v79));
        if ((v92 & 1) != 0)
          v93 = 60.0;
        else
          v93 = v91;
        sub_100007764();
        v94 = v175;
        v95 = v174;
        v96 = v176;
        (*(void (**)(char *, _QWORD, uint64_t))(v175 + 104))(v174, enum case for DispatchQoS.QoSClass.default(_:), v176);
        v191 = static OS_dispatch_queue.global(qos:)(v95);
        v97 = (*(uint64_t (**)(char *, uint64_t))(v94 + 8))(v95, v96);
        v98 = v178;
        static DispatchTime.now()(v97);
        + infix(_:_:)(v98, v93);
        v192 = *(void (**)(char *, uint64_t))(v179 + 8);
        v192(v98, v190);
        v99 = v177;
        sub_100027FE8(v188, v177, type metadata accessor for CustodianHealthRecord);
        v100 = *(unsigned __int8 *)(v86 + 80);
        v101 = (v100 + 16) & ~v100;
        v102 = (v27 + v101 + 7) & 0xFFFFFFFFFFFFFFF8;
        v103 = (v102 + 15) & 0xFFFFFFFFFFFFFFF8;
        v104 = v194;
        v105 = (v103 + 23) & 0xFFFFFFFFFFFFFFF8;
        v106 = (v105 + 15) & 0xFFFFFFFFFFFFFFF8;
        v107 = swift_allocObject(&unk_1002649C8, v106 + 16, v100 | 7);
        sub_10003B730(v99, v107 + v101, type metadata accessor for CustodianHealthRecord);
        v108 = v166;
        *(_QWORD *)(v107 + v102) = v166;
        v109 = (_QWORD *)(v107 + v103);
        v110 = v165;
        *v109 = v186;
        v109[1] = v110;
        *(_QWORD *)(v107 + v105) = v77;
        v111 = (_QWORD *)(v107 + v106);
        *v111 = v167;
        v111[1] = v104;
        aBlock[4] = (uint64_t)sub_1000A99A0;
        v196 = v107;
        aBlock[0] = (uint64_t)_NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        aBlock[2] = (uint64_t)sub_1000051D0;
        aBlock[3] = (uint64_t)&unk_1002649E0;
        v112 = _Block_copy(aBlock);
        swift_retain(v108);
        swift_retain(v104);
        v113 = swift_retain(v110);
        v114 = v180;
        static DispatchQoS.unspecified.getter(v113);
        v198 = (uint64_t)_swiftEmptyArrayStorage;
        v115 = sub_100005150((unint64_t *)&qword_10028CD20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
        v116 = sub_1000080B4((uint64_t *)&unk_100295A00);
        v117 = sub_100008628();
        v118 = v183;
        v119 = v185;
        dispatch thunk of SetAlgebra.init<A>(_:)(&v198, v116, v117, v185, v115);
        v120 = v189;
        v121 = (void *)v191;
        OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v189, v114, v118, v112);

        _Block_release(v112);
        swift_errorRelease(v193);
        (*(void (**)(char *, uint64_t))(v184 + 8))(v118, v119);
        (*(void (**)(char *, uint64_t))(v181 + 8))(v114, v182);
        v192(v120, v190);
        return swift_release(v196);
      }
      v160 = v192;
      v159 = v193;
      *(_QWORD *)v192 = v193;
      swift_storeEnumTagMultiPayload(v160, v191, 1);
      swift_errorRetain(v159);
      v167(v160);

      swift_errorRelease(v159);
      v124 = (uint64_t)v160;
    }
    else
    {
      v122 = v191;
      v123 = v192;
      *(_QWORD *)v192 = v52;
      swift_storeEnumTagMultiPayload(v123, v122, 1);
      swift_errorRetain(v52);
      a3(v123);
      swift_errorRelease(v52);
      v124 = (uint64_t)v123;
    }
    return sub_100004934(v124, &qword_10028D5B8);
  }
  sub_10003B730((uint64_t)v51, (uint64_t)v44, type metadata accessor for CustodianHealthRecord);
  if (qword_10028ADE8 != -1)
    swift_once(&qword_10028ADE8, sub_100046DC4);
  v67 = type metadata accessor for Logger(0);
  v68 = sub_100005288(v67, (uint64_t)qword_1002A8A38);
  v69 = Logger.logObject.getter(v68);
  v71 = static os_log_type_t.default.getter(v70);
  if (os_log_type_enabled(v69, v71))
  {
    v72 = a2;
    v73 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v73 = 0;
    _os_log_impl((void *)&_mh_execute_header, v69, v71, "Cloud record saved to shared DB in CloudKitStorage.", v73, 2u);
    v74 = v73;
    a2 = v72;
    swift_slowDealloc(v74, -1, -1);
  }

  sub_10000732C((_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 40));
  sub_10004E35C((uint64_t)v44, 0, 2, (uint64_t)a3, v194);
  return sub_100028388((uint64_t)v44, type metadata accessor for CustodianHealthRecord);
}

uint64_t sub_1000A847C(_QWORD *a1, uint64_t a2, void (*a3)(_QWORD), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(_QWORD);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  id v43;
  id v44;
  uint64_t v45;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(_QWORD);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v53 = a7;
  v54 = a4;
  v51 = a6;
  v52 = a3;
  v49 = a2;
  v55 = type metadata accessor for CustodianHealthRecord(0);
  v48 = *(_QWORD *)(v55 - 8);
  v9 = *(_QWORD *)(v48 + 64);
  v11 = __chkstk_darwin(v55, v10);
  v50 = (uint64_t)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v11, v12);
  v56 = (uint64_t)&v47 - v14;
  __chkstk_darwin(v13, v15);
  v17 = (char *)&v47 - v16;
  if (qword_10028ADE8 != -1)
    swift_once(&qword_10028ADE8, sub_100046DC4);
  v18 = type metadata accessor for Logger(0);
  sub_100005288(v18, (uint64_t)qword_1002A8A38);
  v19 = sub_100027FE8((uint64_t)a1, (uint64_t)v17, type metadata accessor for CustodianHealthRecord);
  v20 = Logger.logObject.getter(v19);
  v21 = static os_log_type_t.error.getter(v20);
  if (os_log_type_enabled(v20, v21))
  {
    v22 = (uint8_t *)swift_slowAlloc(12, -1);
    v23 = swift_slowAlloc(32, -1);
    v47 = a5;
    v24 = v23;
    v58 = v23;
    *(_DWORD *)v22 = 136315138;
    v25 = UUID.uuidString.getter(v23);
    v27 = v26;
    v57 = sub_1001DEF4C(v25, v26, &v58);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, &v58);
    swift_bridgeObjectRelease(v27);
    sub_100028388((uint64_t)v17, type metadata accessor for CustodianHealthRecord);
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "Trying to resave to shared DB after a delay following a recoverable/transient error %s", v22, 0xCu);
    swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
    v28 = v24;
    a5 = v47;
    swift_slowDealloc(v28, -1, -1);
    swift_slowDealloc(v22, -1, -1);
  }
  else
  {
    sub_100028388((uint64_t)v17, type metadata accessor for CustodianHealthRecord);
  }

  if (__OFADD__(a5, 1))
  {
    __break(1u);
  }
  else
  {
    v29 = v49;
    sub_10000732C((_QWORD *)(v49 + 56), *(_QWORD *)(v49 + 80));
    v30 = v54;
    v31 = v52;
    v52(a1);
    v32 = v50;
    sub_100027FE8((uint64_t)a1, v50, type metadata accessor for CustodianHealthRecord);
    v33 = *(unsigned __int8 *)(v48 + 80);
    v34 = (v33 + 48) & ~v33;
    v35 = (v9 + v34 + 7) & 0xFFFFFFFFFFFFFFF8;
    a1 = (_QWORD *)swift_allocObject(&unk_100264A40, v35 + 16, v33 | 7);
    v36 = v51;
    a1[2] = v29;
    a1[3] = v36;
    v37 = v53;
    a1[4] = v53;
    a1[5] = a5 + 1;
    sub_10003B730(v32, (uint64_t)a1 + v34, type metadata accessor for CustodianHealthRecord);
    v38 = (_QWORD *)((char *)a1 + v35);
    *v38 = v31;
    v38[1] = v30;
    v39 = qword_10028AF00;
    swift_retain(v29);
    swift_retain(v37);
    swift_retain(v30);
    if (v39 == -1)
      goto LABEL_8;
  }
  swift_once(&qword_10028AF00, sub_1001FD458);
LABEL_8:
  if (*(_BYTE *)(v56 + *(int *)(v55 + 36)) == 1)
  {
    if (qword_10028AF10 != -1)
      swift_once(&qword_10028AF10, sub_1001FDD8C);
    v40 = &qword_1002A8C80;
  }
  else
  {
    if (qword_10028AF08 != -1)
      swift_once(&qword_10028AF08, sub_1001FDD54);
    v40 = &qword_1002A8C70;
  }
  v42 = *v40;
  v41 = v40[1];
  swift_bridgeObjectRetain(v41);
  v43 = sub_1001FD4C0(v42, v41);
  v44 = objc_msgSend(v43, "sharedCloudDatabase");
  swift_bridgeObjectRelease(v41);

  v45 = v56;
  sub_100053FB4(v56, v44, (uint64_t)sub_1000A986C, (uint64_t)a1);
  swift_release(a1);

  return sub_100028388(v45, type metadata accessor for CustodianHealthRecord);
}

uint64_t sub_1000A88B4(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_10000F450(a1, a2);
  sub_1000A8A58(a1, a2);
  v5 = v4;
  sub_10000F494(a1, a2);
  v6 = static String._fromUTF8Repairing(_:)(v5 + 32, *(_QWORD *)(v5 + 16));
  swift_release(v5);
  return v6;
}

uint64_t sub_1000A8928@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  if (a1)
    v4 = a2 - a1;
  else
    v4 = 0;
  result = static String._fromUTF8Repairing(_:)(a1, v4);
  *a3 = result;
  a3[1] = v6;
  return result;
}

_QWORD *sub_1000A8960(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *(*a4)(uint64_t *__return_ptr, uint64_t, uint64_t))
{
  uint64_t v4;
  _QWORD *result;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  result = (_QWORD *)__DataStorage._bytes.getter();
  v9 = (uint64_t)result;
  if (result)
  {
    result = (_QWORD *)__DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_15:
      __break(1u);
      return result;
    }
    v9 += a1 - (_QWORD)result;
  }
  v10 = __OFSUB__(a2, a1);
  v11 = a2 - a1;
  if (v10)
  {
    __break(1u);
    goto LABEL_15;
  }
  v12 = __DataStorage._length.getter();
  if (v12 >= v11)
    v13 = v11;
  else
    v13 = v12;
  v14 = v9 + v13;
  if (v9)
    v15 = v14;
  else
    v15 = 0;
  result = sub_1000A8A0C(v9, v15, a4);
  if (v4)
    return (_QWORD *)v16;
  return result;
}

_QWORD *sub_1000A8A0C(uint64_t a1, uint64_t a2, _QWORD *(*a3)(uint64_t *__return_ptr, uint64_t, uint64_t))
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;

  if (a1)
    v4 = a2 - a1;
  else
    v4 = 0;
  result = a3(&v6, a1, v4);
  if (!v3)
    return (_QWORD *)v6;
  return result;
}

void sub_1000A8A58(uint64_t a1, uint64_t a2)
{
  type metadata accessor for Data.Iterator(0);
  __chkstk_darwin();
  __asm { BR              X10 }
}

_QWORD *sub_1000A8AD4()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  size_t v7;
  uint64_t v8;

  if (BYTE6(v0))
  {
    v6 = sub_1000080B4((uint64_t *)&unk_10028BC10);
    v4 = (_QWORD *)swift_allocObject(v6, BYTE6(v0) + 32, 7);
    v7 = j__malloc_size(v4);
    v4[2] = BYTE6(v0);
    v4[3] = 2 * v7 - 64;
    sub_10000F450(v2, v0);
    v8 = ((uint64_t (*)(uint64_t, _QWORD *, _QWORD, uint64_t, unint64_t))Data._copyContents(initializing:))(v3, v4 + 4, BYTE6(v0), v2, v0);
    sub_10000F494(v2, v0);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v1);
    if (v8 != BYTE6(v0))
    {
      __break(1u);
      JUMPOUT(0x1000A8BA8);
    }
  }
  return v4;
}

uint64_t sub_1000A8BC0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result;
  uint64_t v5;

  if (!a1)
    a2 = 0;
  result = static String._fromUTF8Repairing(_:)(a1, a2);
  *a3 = result;
  a3[1] = v5;
  return result;
}

uint64_t sub_1000A8BF4(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  __n128 v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  char *v33;
  void (*v34)(char *, uint64_t);
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45[5];

  v42 = a2;
  v3 = *v2;
  v39 = a1;
  v40 = v3;
  v4 = type metadata accessor for URL(0);
  v5 = *(_QWORD *)(v4 - 8);
  v7 = __chkstk_darwin(v4, v6);
  v43 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7, v9);
  v11 = (char *)&v36 - v10;
  v12 = sub_1000080B4(&qword_10028C448);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12, v14);
  v16 = (char *)&v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10028ADD8 != -1)
    swift_once(&qword_10028ADD8, sub_100046D78);
  v17 = type metadata accessor for Logger(0);
  v18 = sub_100005288(v17, (uint64_t)qword_1002A8A08);
  v19 = Logger.logObject.getter(v18);
  v21 = static os_log_type_t.default.getter(v20);
  if (os_log_type_enabled(v19, v21))
  {
    v36 = v5;
    v37 = v11;
    v38 = v4;
    v22 = (uint8_t *)swift_slowAlloc(12, -1);
    v23 = swift_slowAlloc(32, -1);
    v45[0] = v23;
    *(_DWORD *)v22 = 136315138;
    if (qword_10028AE48 != -1)
      swift_once(&qword_10028AE48, sub_1000A27C0);
    v24 = qword_10028F660;
    v25 = *(_QWORD *)algn_10028F668;
    swift_bridgeObjectRetain(*(_QWORD *)algn_10028F668);
    v44 = sub_1001DEF4C(v24, v25, v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, v45);
    swift_bridgeObjectRelease(v25);
    _os_log_impl((void *)&_mh_execute_header, v19, v21, "%s - started.", v22, 0xCu);
    swift_arrayDestroy(v23, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v23, -1, -1);
    swift_slowDealloc(v22, -1, -1);

    v11 = v37;
    v4 = v38;
    v5 = v36;
  }
  else
  {

  }
  v26 = v41;
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v16, v41 + OBJC_IVAR____TtC13appleaccountd20CustodianHealthCheck__custodianStorage, v12);
  Dependency.wrappedValue.getter(v45, v12);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
  v27 = sub_10000732C(v45, v45[3]);
  v28 = (_QWORD *)swift_allocObject(&unk_100264860, 48, 7);
  v29 = v39;
  v28[2] = v26;
  v28[3] = v29;
  v30 = v42;
  v31 = v40;
  v28[4] = v42;
  v28[5] = v31;
  v32 = sub_10000732C((_QWORD *)(*v27 + 16), *(_QWORD *)(*v27 + 40));
  type metadata accessor for LocalCache();
  swift_retain(v26);
  swift_retain(v30);
  v33 = v43;
  sub_10000840C();
  URL.appendingPathComponent(_:isDirectory:)(0xD000000000000017, 0x8000000100209FC0, 1);
  v34 = *(void (**)(char *, uint64_t))(v5 + 8);
  v34(v33, v4);
  sub_10000732C((_QWORD *)(*v32 + 16), *(_QWORD *)(*v32 + 40));
  sub_10009D070((uint64_t)v11, (uint64_t)sub_1000A8F8C, (uint64_t)v28);
  v34(v11, v4);
  swift_release(v28);
  return sub_100006F58(v45);
}

uint64_t sub_1000A8F84()
{
  return sub_10005D988(48);
}

uint64_t sub_1000A8F8C(uint64_t a1, char a2)
{
  uint64_t v2;

  return sub_1000A2808(a1, a2 & 1, *(_QWORD *)(v2 + 16), *(void (**)(uint64_t))(v2 + 24), *(_QWORD *)(v2 + 32));
}

uint64_t sub_1000A8F9C(uint64_t a1, NSObject *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  __n128 v18;
  os_log_type_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  NSObject *v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v45 = a4;
  v8 = type metadata accessor for CustodianshipInfoRecord(0);
  v43 = *(_QWORD *)(v8 - 8);
  v9 = *(_QWORD *)(v43 + 64);
  v11 = __chkstk_darwin(v8, v10);
  v44 = (uint64_t)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11, v12);
  v14 = (char *)&v38 - v13;
  v46 = a2;
  dispatch_group_enter(a2);
  if (qword_10028ADD8 != -1)
    swift_once(&qword_10028ADD8, sub_100046D78);
  v15 = type metadata accessor for Logger(0);
  sub_100005288(v15, (uint64_t)qword_1002A8A08);
  v16 = sub_100027FE8(a1, (uint64_t)v14, type metadata accessor for CustodianshipInfoRecord);
  v17 = Logger.logObject.getter(v16);
  v19 = static os_log_type_t.default.getter(v18);
  if (os_log_type_enabled(v17, v19))
  {
    v40 = a1;
    v41 = a3;
    v42 = v4;
    v20 = swift_slowAlloc(22, -1);
    v39 = swift_slowAlloc(64, -1);
    v49 = v39;
    *(_DWORD *)v20 = 136315394;
    if (qword_10028AE48 != -1)
      swift_once(&qword_10028AE48, sub_1000A27C0);
    v21 = qword_10028F660;
    v22 = *(_QWORD *)algn_10028F668;
    swift_bridgeObjectRetain(*(_QWORD *)algn_10028F668);
    v47 = sub_1001DEF4C(v21, v22, &v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48);
    swift_bridgeObjectRelease(v22);
    *(_WORD *)(v20 + 12) = 2080;
    v23 = type metadata accessor for UUID(0);
    v24 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v25 = dispatch thunk of CustomStringConvertible.description.getter(v23, v24);
    v27 = v26;
    v47 = sub_1001DEF4C(v25, v26, &v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48);
    swift_bridgeObjectRelease(v27);
    sub_100028388((uint64_t)v14, type metadata accessor for CustodianshipInfoRecord);
    _os_log_impl((void *)&_mh_execute_header, v17, v19, "%s - performing health check for %s.", (uint8_t *)v20, 0x16u);
    v28 = v39;
    swift_arrayDestroy(v39, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v28, -1, -1);
    swift_slowDealloc(v20, -1, -1);

    a1 = v40;
  }
  else
  {
    sub_100028388((uint64_t)v14, type metadata accessor for CustodianshipInfoRecord);

  }
  v29 = v44;
  sub_100027FE8(a1, v44, type metadata accessor for CustodianshipInfoRecord);
  v30 = *(unsigned __int8 *)(v43 + 80);
  v31 = (v30 + 24) & ~v30;
  v32 = (v9 + v31 + 7) & 0xFFFFFFFFFFFFFFF8;
  v33 = swift_allocObject(&unk_1002648D8, v32 + 8, v30 | 7);
  v34 = v45;
  *(_QWORD *)(v33 + 16) = v45;
  sub_10003B730(v29, v33 + v31, type metadata accessor for CustodianshipInfoRecord);
  v35 = v46;
  *(_QWORD *)(v33 + v32) = v46;
  swift_retain(v34);
  v36 = v35;
  sub_1000A373C(a1, sub_1000A9428, v33);
  return swift_release(v33);
}

uint64_t sub_1000A9324()
{
  return sub_10005D988(40);
}

uint64_t sub_1000A932C()
{
  uint64_t v0;

  return sub_100155E5C(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_1000A9354()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);

  v1 = (int *)type metadata accessor for CustodianshipInfoRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release(*(_QWORD *)(v0 + 16));
  v7 = v0 + v4;
  v8 = type metadata accessor for UUID(0);
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8);
  v9(v7, v8);
  v9(v7 + v1[5], v8);
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[6] + 8));
  sub_10000F494(*(_QWORD *)(v7 + v1[8]), *(_QWORD *)(v7 + v1[8] + 8));

  return swift_deallocObject(v0, v6 + 8, v5);
}

void sub_1000A9428(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;

  v3 = *(_QWORD *)(type metadata accessor for CustodianshipInfoRecord(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  sub_1000A3F48(a1, *(_QWORD *)(v1 + 16), v1 + v4, *(dispatch_group_t *)(v1 + ((*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_1000A947C()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);

  v1 = (int *)type metadata accessor for CustodianshipInfoRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 48) & ~v3;
  v5 = v3 | 7;
  v6 = ((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_release(*(_QWORD *)(v0 + 16));

  swift_release(*(_QWORD *)(v0 + 40));
  v7 = v0 + v4;
  v8 = type metadata accessor for UUID(0);
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8);
  v9(v7, v8);
  v9(v7 + v1[5], v8);
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[6] + 8));
  sub_10000F494(*(_QWORD *)(v7 + v1[8]), *(_QWORD *)(v7 + v1[8] + 8));
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_1000A9558(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for CustodianshipInfoRecord(0) - 8) + 80);
  return sub_1000A405C(a1, *(_QWORD *)(v1 + 16), *(char **)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), v1 + ((v3 + 48) & ~v3));
}

uint64_t sub_1000A95B0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_1000A95D4(uint64_t a1)
{
  uint64_t v1;

  sub_1000A6C9C(a1, *(void (**)(void *))(v1 + 16));
}

uint64_t sub_1000A95DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for Date(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  v6 = *(_QWORD *)(v0 + v5 + 8);
  if (v6 >> 60 != 15)
    sub_10000F494(*(_QWORD *)(v0 + v5), v6);
  return swift_deallocObject(v0, ((v5 + 23) & 0xFFFFFFFFFFFFFFF8) + 8, v3 | 7);
}

uint64_t sub_1000A9664@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v5 = *(_QWORD *)(type metadata accessor for Date(0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = (*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_1000A6D44(a1, v2 + v6, *(_QWORD *)(v2 + v7), *(_QWORD *)(v2 + v7 + 8), *(_QWORD *)(v2 + ((v7 + 23) & 0xFFFFFFFFFFFFF8)), a2);
}

uint64_t sub_1000A96D4()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;

  v1 = (int *)type metadata accessor for CustodianHealthRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v0 + v4;
  v7 = type metadata accessor for UUID(0);
  v8 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8);
  v8(v0 + v4, v7);
  v8(v0 + v4 + v1[5], v7);
  v9 = v0 + v4 + v1[6];
  v10 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  v11 = (uint64_t *)(v0 + v4 + v1[7]);
  v12 = v11[1];
  if (v12 >> 60 != 15)
    sub_10000F494(*v11, v12);
  v13 = (v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v14 = (v13 + 23) & 0xFFFFFFFFFFFFFFF8;
  sub_10000F494(*(_QWORD *)(v6 + v1[8]), *(_QWORD *)(v6 + v1[8] + 8));
  swift_release(*(_QWORD *)(v0 + v13 + 8));

  return swift_deallocObject(v0, ((v14 + 17) & 0xFFFFFFFFFFFFFFF8) + 8, v3 | 7);
}

uint64_t sub_1000A97F0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v3 = *(_QWORD *)(type metadata accessor for CustodianHealthRecord(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_1000A6E84(a1, v1 + v4, *(void (**)(uint64_t))(v1 + v5), *(_QWORD *)(v1 + v5 + 8), *(_QWORD *)(v1 + ((v5 + 23) & 0xFFFFFFFFFFFFFFF8)), *(unsigned __int8 *)(v1 + ((v5 + 23) & 0xFFFFFFFFFFFFFFF8) + 8), *(unsigned __int8 *)(v1 + ((v5 + 23) & 0xFFFFFFFFFFFFFFF8) + 9));
}

uint64_t sub_1000A9870()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;

  v1 = (int *)type metadata accessor for CustodianHealthRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v0 + v4;
  v7 = type metadata accessor for UUID(0);
  v8 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8);
  v8(v0 + v4, v7);
  v8(v0 + v4 + v1[5], v7);
  v9 = v0 + v4 + v1[6];
  v10 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  v11 = (uint64_t *)(v0 + v4 + v1[7]);
  v12 = v11[1];
  if (v12 >> 60 != 15)
    sub_10000F494(*v11, v12);
  v13 = (v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v14 = (v13 + 15) & 0xFFFFFFFFFFFFFFF8;
  v15 = (((v14 + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  sub_10000F494(*(_QWORD *)(v6 + v1[8]), *(_QWORD *)(v6 + v1[8] + 8));
  swift_release(*(_QWORD *)(v0 + v13));
  swift_release(*(_QWORD *)(v0 + v14 + 8));
  swift_release(*(_QWORD *)(v0 + v15 + 8));
  return swift_deallocObject(v0, v15 + 16, v3 | 7);
}

uint64_t sub_1000A99A0()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v1 = *(_QWORD *)(type metadata accessor for CustodianHealthRecord(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  v4 = (v3 + 15) & 0xFFFFFFFFFFFFFFF8;
  return sub_1000A847C((_QWORD *)(v0 + v2), *(_QWORD *)(v0 + v3), *(void (**)(_QWORD))(v0 + v4), *(_QWORD *)(v0 + v4 + 8), *(_QWORD *)(v0 + ((v4 + 23) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v0 + ((((v4 + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v0 + ((((v4 + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_1000A9A14()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  unint64_t v13;

  v1 = (int *)type metadata accessor for CustodianHealthRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 48) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  v6 = v0 + v4;
  v7 = type metadata accessor for UUID(0);
  v8 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8);
  v8(v0 + v4, v7);
  v8(v0 + v4 + v1[5], v7);
  v9 = v0 + v4 + v1[6];
  v10 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  v11 = (uint64_t *)(v0 + v4 + v1[7]);
  v12 = v11[1];
  if (v12 >> 60 != 15)
    sub_10000F494(*v11, v12);
  v13 = (v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_10000F494(*(_QWORD *)(v6 + v1[8]), *(_QWORD *)(v6 + v1[8] + 8));
  swift_release(*(_QWORD *)(v0 + v13 + 8));
  return swift_deallocObject(v0, v13 + 16, v3 | 7);
}

uint64_t sub_1000A9B28(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(type metadata accessor for CustodianHealthRecord(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = v1 + ((*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8);
  return sub_1000A7574(a1, *(_QWORD *)(v1 + 16), *(void (**)(_QWORD))(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), v1 + v4, *(void (**)(_QWORD))v5, *(_QWORD *)(v5 + 8));
}

uint64_t sub_1000A9B84()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_1000A9BA8()
{
  uint64_t v0;

  dispatch_group_leave(*(dispatch_group_t *)(v0 + 16));
}

uint64_t sub_1000A9BB0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = v3 | 7;
  v6 = ((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_1000A9C38(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UUID(0) - 8) + 80);
  return sub_1000A31C4(a1, *(_QWORD *)(v1 + 16), *(void (**)(uint64_t))(v1 + 24), *(_QWORD *)(v1 + 32), (char *)(v1 + ((v3 + 40) & ~v3)));
}

uint64_t type metadata accessor for CustodianPreflightEvent(uint64_t a1)
{
  uint64_t result;

  result = qword_10028F868;
  if (!qword_10028F868)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CustodianPreflightEvent);
  return result;
}

void sub_1000A9CD4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD v5[8];

  v2 = qword_1002A8AD0;
  v5[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v5[1] = "\t";
  v5[2] = &unk_10021B590;
  v5[3] = &unk_10021B5A8;
  v5[4] = "\t";
  v5[5] = &unk_10021B5A8;
  v5[6] = &unk_10021B5A8;
  sub_1000AAD84(319);
  if (v4 <= 0x3F)
  {
    v5[7] = *(_QWORD *)(v3 - 8) + 64;
    swift_initClassMetadata2(a1, 0, 8, v5, a1 + v2);
  }
}

uint64_t sub_1000A9D7C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000A9DBC + 4 * byte_10021B520[a1]))(0x4B52436B63656863, 0xEF6572756C696146);
}

uint64_t sub_1000A9DD0()
{
  return 0x6146726961706572;
}

unint64_t sub_1000A9DF0()
{
  return 0xD000000000000010;
}

uint64_t sub_1000A9E0C()
{
  return 0x725064656C696166;
}

unint64_t sub_1000A9E30()
{
  return 0xD00000000000001BLL;
}

uint64_t sub_1000A9E8C(uint64_t a1, char a2)
{
  _BYTE *v2;
  _QWORD *v5;
  char *v6;
  _QWORD *v7;
  _QWORD *v8;
  char *v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;

  *(_QWORD *)&v2[qword_10028F828] = _swiftEmptyArrayStorage;
  v2[qword_10028F838] = 0;
  v5 = &v2[qword_10028F840];
  *v5 = 0;
  v5[1] = 0;
  v6 = &v2[qword_10028F848];
  *(_QWORD *)v6 = 0;
  v6[8] = 1;
  v7 = &v2[qword_10028F850];
  *v7 = 0;
  v7[1] = 0;
  v8 = &v2[qword_10028F858];
  *v8 = 0;
  v8[1] = 0;
  v9 = v2;
  v10 = sub_1000080B4((uint64_t *)&unk_10028F448);
  Dependency.init(dependencyId:config:)(0, 0, 0, v10);
  v11 = &v9[qword_10028F830];
  *(_QWORD *)v11 = a1;
  v11[8] = a2 & 1;

  v12 = sub_10006A7EC((uint64_t)_swiftEmptyArrayStorage);
  return AAFTimedAnalyticsEvent.init(eventName:initialData:)(0xD000000000000033, 0x800000010020B760, v12);
}

uint64_t sub_1000A9FA0(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  id v11;
  id v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  NSString v22;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v24;
  uint64_t v26[4];
  _QWORD v27[5];
  unint64_t v28;

  v4 = v3;
  v6 = sub_1000080B4(&qword_10028F658);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  v10 = (char *)v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!objc_msgSend((id)objc_opt_self(AADeviceInfo), "isInternalBuild"))
  {
LABEL_6:
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, v4 + qword_10028F860, v6);
    Dependency.wrappedValue.getter(v27, v6);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    v17 = *sub_10000732C(v27, v27[3]);
    v18 = sub_1000080B4(&qword_10028F8B8);
    OS_dispatch_queue.sync<A>(execute:)(v26, sub_1000AAE2C, v17, v18);
    v19 = v26[0];
    sub_1001CE0B4(v26[0]);
    v21 = v20;
    swift_bridgeObjectRelease(v19);
    v28 = v21;
    sub_100006F58(v27);
    v22 = String._bridgeToObjectiveC()();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v28);
    v27[0] = v28;
    v28 = 0x8000000000000000;
    sub_10001FC90((uint64_t)v22, 0x6E6F6973726576, 0xE700000000000000, isUniquelyReferenced_nonNull_native);
    v24 = v28;
    v28 = v27[0];
    swift_bridgeObjectRelease(v24);
    __asm { BR              X10 }
  }
  v11 = objc_msgSend((id)objc_opt_self(NSProcessInfo), "processInfo");
  v12 = objc_msgSend(v11, "environment");

  v13 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v12, &type metadata for String, &type metadata for String, &protocol witness table for String);
  if (!*(_QWORD *)(v13 + 16))
  {
    swift_bridgeObjectRelease(v13);
    goto LABEL_6;
  }
  sub_10010A9E0(0xD00000000000001BLL, 0x800000010020AFA0);
  v15 = v14;
  result = swift_bridgeObjectRelease(v13);
  if ((v15 & 1) == 0)
    goto LABEL_6;
  return result;
}

void sub_1000AAC08()
{
  _swift_stdlib_reportUnimplementedInitializer("appleaccountd.CustodianPreflightEvent", 37, "init(eventName:initialData:)", 28, 0);
  __break(1u);
}

uint64_t sub_1000AAC34()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + qword_10028F828));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + qword_10028F840 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + qword_10028F850 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + qword_10028F858 + 8));
  v1 = v0 + qword_10028F860;
  v2 = sub_1000080B4(&qword_10028F658);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
}

id sub_1000AACC0()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CustodianPreflightEvent(0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_1000AACF4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + qword_10028F828));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + qword_10028F840 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + qword_10028F850 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + qword_10028F858 + 8));
  v2 = a1 + qword_10028F860;
  v3 = sub_1000080B4(&qword_10028F658);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
}

void sub_1000AAD84(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_10028F440)
  {
    v2 = sub_10000D908((uint64_t *)&unk_10028F448);
    v3 = type metadata accessor for Dependency(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_10028F440);
  }
}

uint64_t sub_1000AADDC()
{
  return type metadata accessor for CustodianPreflightEvent(0);
}

uint64_t (*sub_1000AADE4(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + qword_10028F828, a1, 33, 0);
  return j__swift_endAccess;
}

uint64_t sub_1000AAE2C@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return sub_100073090(v1, a1);
}

void sub_1000AAE44(objc_class *a1, uint64_t a2, uint64_t a3)
{
  sub_10000405C(a1, a2, a3, &qword_10028FAE8, AALocalContactInfo_ptr);
}

void sub_1000AAE58(objc_class *a1, uint64_t a2, uint64_t a3)
{
  sub_10000405C(a1, a2, a3, &qword_10028FA68, AATrustedContactHealthInfo_ptr);
}

char *sub_1000AAE6C()
{
  void *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  id v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  char *v40;
  _QWORD *v41;
  uint64_t ObjectType;
  _QWORD *v44;
  _QWORD v45[5];
  _QWORD v46[3];
  uint64_t v47;
  _UNKNOWN **v48;
  char v49[16];
  _QWORD v50[5];

  v1 = type metadata accessor for DaemonStorageFactory();
  swift_initStackObject(v1, v49);
  v2 = v0;
  v44 = v2;
  sub_1000C8AF8(v50);
  sub_100006CA4((uint64_t)v50, (uint64_t)v46);
  v3 = sub_1000067AC((uint64_t)v46, v47);
  __chkstk_darwin(v3, v3);
  v5 = (_QWORD *)((char *)&v45[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v6 + 16))(v5);
  v7 = *v5;
  v8 = type metadata accessor for StorageController();
  v45[3] = v8;
  v45[4] = &off_100266E08;
  v45[0] = v7;
  v9 = type metadata accessor for InheritanceStorageController(0);
  v10 = swift_allocObject(v9, *(unsigned int *)(v9 + 48), *(unsigned __int16 *)(v9 + 52));
  v11 = sub_1000067AC((uint64_t)v45, v8);
  __chkstk_darwin(v11, v11);
  v13 = (_QWORD *)((char *)&v45[-1] - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v14 + 16))(v13);
  v15 = *v13;
  v16 = (_QWORD *)(v10 + OBJC_IVAR____TtC13appleaccountd28InheritanceStorageController_storageController);
  v16[3] = v8;
  v16[4] = &off_100266E08;
  *v16 = v15;
  v17 = sub_1000080B4(&qword_10028C860);
  Dependency.init(dependencyId:config:)(0, 0, 0, v17);
  sub_100006F58(v45);
  sub_100006F58(v46);
  v18 = type metadata accessor for InheritanceSecurityController(0);
  v19 = swift_allocObject(v18, *(unsigned int *)(v18 + 48), *(unsigned __int16 *)(v18 + 52));
  Dependency.init(dependencyId:config:)(0, 0, 0, v17);
  *(_QWORD *)(v19 + 16) = objc_msgSend(objc_allocWithZone((Class)CDPInheritanceTrustController), "init");
  v20 = objc_msgSend((id)objc_opt_self(AAMessagingService), "sharedService");
  v21 = type metadata accessor for DaemonDestinationBuilder();
  v22 = swift_allocObject(v21, 16, 7);
  v47 = v21;
  v48 = &off_100265EA8;
  v46[0] = v22;
  v23 = type metadata accessor for DaemonIDSMessenger();
  v24 = (_QWORD *)swift_allocObject(v23, 64, 7);
  v25 = sub_1000067AC((uint64_t)v46, v21);
  __chkstk_darwin(v25, v25);
  v27 = (_QWORD *)((char *)&v45[-1] - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v28 + 16))(v27);
  v29 = *v27;
  v24[6] = v21;
  v24[7] = &off_100265EA8;
  v24[2] = v20;
  v24[3] = v29;
  v30 = v20;
  swift_retain(v22);
  sub_100006F58(v46);

  v31 = objc_msgSend(objc_allocWithZone((Class)AKInheritanceController), "init");
  v47 = v23;
  v48 = &off_100262DC0;
  v46[0] = v24;
  v32 = type metadata accessor for InheritanceSetupMessenger();
  v33 = (_QWORD *)swift_allocObject(v32, 56, 7);
  v34 = sub_1000067AC((uint64_t)v46, v23);
  __chkstk_darwin(v34, v34);
  v36 = (_QWORD *)((char *)&v45[-1] - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v37 + 16))(v36);
  v38 = *v36;
  v33[5] = v23;
  v33[6] = &off_100262DC0;
  v33[2] = v38;
  swift_retain_n(v24, 2);
  v39 = v30;
  swift_retain(v10);
  sub_100006F58(v46);
  v40 = sub_1000B7460(v31, v10, v39, (uint64_t)v24, (uint64_t)v33, v19);
  swift_release(v22);
  swift_release(v10);
  swift_release(v24);

  swift_release(v19);
  sub_100006F58(v50);
  v41 = v44;
  ObjectType = swift_getObjectType(v44);
  swift_deallocPartialClassInstance(v41, ObjectType, *(unsigned int *)((swift_isaMask & *v41) + 0x30), *(unsigned __int16 *)((swift_isaMask & *v41) + 0x34));
  return v40;
}

id sub_1000AB2B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  id v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  NSString v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  _QWORD v21[5];

  v1 = sub_1000080B4(&qword_10028FA50);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  v5 = (char *)&v21[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v5, v0 + OBJC_IVAR____TtC13appleaccountd25InheritanceRequestManager__accountStore, v1);
  Dependency.wrappedValue.getter(v21, v1);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  v6 = objc_msgSend(*(id *)(*sub_10000732C(v21, v21[3]) + 16), "aa_primaryAppleAccount");
  if (v6 && (v7 = v6, v8 = objc_msgSend(v6, "aa_altDSID"), v7, v8))
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
    v10 = v9;

    sub_100006F58(v21);
    v11 = objc_allocWithZone((Class)AKInheritanceContext);
    v12 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v10);
    v13 = objc_msgSend(v11, "initWithOwnerAltDSID:", v12);

  }
  else
  {
    sub_100006F58(v21);
    if (qword_10028ADD0 != -1)
      swift_once(&qword_10028ADD0, sub_100046D50);
    v14 = type metadata accessor for Logger(0);
    v15 = sub_100005288(v14, (uint64_t)qword_1002A89F0);
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.error.getter(v16);
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Error creating inheritance context. No altDSID for owner found.", v18, 2u);
      swift_slowDealloc(v18, -1, -1);
    }

    return 0;
  }
  return v13;
}

id sub_1000AB4C8()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for InheritanceRequestManager(0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_1000AB738()
{
  return type metadata accessor for InheritanceRequestManager(0);
}

uint64_t type metadata accessor for InheritanceRequestManager(uint64_t a1)
{
  uint64_t result;

  result = qword_10028F988;
  if (!qword_10028F988)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for InheritanceRequestManager);
  return result;
}

void sub_1000AB77C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD v18[20];

  sub_100017464(319, (unint64_t *)&qword_100293810, &qword_10028C860);
  if (v3 <= 0x3F)
  {
    v18[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_1000AB978(319, &qword_10028F998, type metadata accessor for InheritanceCleanupController);
    if (v5 <= 0x3F)
    {
      v18[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_1000AB978(319, &qword_10028F9A0, (uint64_t (*)(uint64_t))type metadata accessor for BeneficiaryDeclinedStatusHandler);
      if (v7 <= 0x3F)
      {
        v18[2] = *(_QWORD *)(v6 - 8) + 64;
        sub_1000AB978(319, &qword_10028F9A8, (uint64_t (*)(uint64_t))type metadata accessor for InheritanceInvitationResponseHandler);
        if (v9 <= 0x3F)
        {
          v18[3] = *(_QWORD *)(v8 - 8) + 64;
          sub_1000AB978(319, &qword_10028F9B0, type metadata accessor for InheritanceInvitationHandler);
          if (v11 <= 0x3F)
          {
            v18[4] = *(_QWORD *)(v10 - 8) + 64;
            sub_1000AB978(319, &qword_10028F9B8, (uint64_t (*)(uint64_t))type metadata accessor for InheritanceAccessKeyMessageHandler);
            if (v13 <= 0x3F)
            {
              v18[5] = *(_QWORD *)(v12 - 8) + 64;
              sub_1000AB978(319, &qword_10028F9C0, (uint64_t (*)(uint64_t))type metadata accessor for BeneficiaryRemovedMessageHandler);
              if (v15 <= 0x3F)
              {
                v18[6] = *(_QWORD *)(v14 - 8) + 64;
                sub_100017464(319, &qword_10028F9C8, &qword_10028F9D0);
                if (v17 <= 0x3F)
                {
                  v18[7] = *(_QWORD *)(v16 - 8) + 64;
                  v18[8] = "\b";
                  v18[9] = &unk_10021B628;
                  v18[10] = &unk_10021B640;
                  v18[11] = &unk_10021B640;
                  v18[12] = &unk_10021B640;
                  v18[13] = "\b";
                  v18[14] = (char *)&value witness table for Builtin.UnknownObject + 64;
                  v18[15] = "\b";
                  v18[16] = &unk_10021B640;
                  v18[17] = (char *)&value witness table for Builtin.NativeObject + 64;
                  v18[18] = &unk_10021B658;
                  v18[19] = "\b";
                  swift_updateClassMetadata2(a1, 256, 20, v18, a1 + 80);
                }
              }
            }
          }
        }
      }
    }
  }
}

void sub_1000AB978(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    v5 = a3(255);
    v6 = type metadata accessor for Dependency(a1, v5);
    if (!v7)
      atomic_store(v6, a2);
  }
}

uint64_t sub_1000ABA04(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD, uint64_t))
{
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v15;
  _QWORD v16[3];
  _BYTE v17[8];
  uint64_t v18;

  if (a2)
  {
    swift_errorRetain(a2);
    if (qword_10028ADD0 != -1)
      swift_once(&qword_10028ADD0, sub_100046D50);
    v5 = type metadata accessor for Logger(0);
    sub_100005288(v5, (uint64_t)qword_1002A89F0);
    swift_errorRetain(a2);
    v6 = swift_errorRetain(a2);
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.error.getter(v7);
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc(12, -1);
      v10 = swift_slowAlloc(32, -1);
      v18 = v10;
      *(_DWORD *)v9 = 136315138;
      swift_getErrorValue(a2, v17, v16);
      v11 = Error.localizedDescription.getter(v16[1], v16[2]);
      v13 = v12;
      v15 = sub_1001DEF4C(v11, v12, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, v16);
      swift_bridgeObjectRelease(v13);
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Error fetching dataclass rules from Inheritance Controller: %s", v9, 0xCu);
      swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v10, -1, -1);
      swift_slowDealloc(v9, -1, -1);

      swift_errorRelease(a2);
    }
    else
    {
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      swift_errorRelease(a2);

    }
  }
  return a3(0, a2);
}

uint64_t sub_1000ABD28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t))
{
  void *v7;

  if (a2)
    v7 = (void *)_convertErrorToNSError(_:)(a2);
  else
    v7 = 0;
  sub_1001BA4C0(a1 != 0, (uint64_t)v7);

  return a4(a1, a2);
}

uint64_t sub_1000ABDA4(uint64_t a1, uint64_t (*a2)(_QWORD, uint64_t), uint64_t a3, void *a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;
  _QWORD *v19;
  unint64_t v21;
  void *v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v31;
  void *v32;
  uint64_t v33;

  type metadata accessor for InheritanceError(0);
  v15 = v14;
  v33 = a1;
  v31 = 3;
  v16 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
  v17 = sub_100005150(&qword_10028B350, (uint64_t (*)(uint64_t))type metadata accessor for InheritanceError, (uint64_t)&unk_100216D64);
  _BridgedStoredNSError.init(_:userInfo:)(&v32, &v31, v16, v15, v17);
  v18 = v32;
  v31 = (uint64_t)v32;
  LOBYTE(v16) = static _BridgedStoredNSError.== infix(_:_:)(&v33, &v31, v15, v17);

  if ((v16 & 1) != 0)
  {
    swift_getObjectType(a6);
    v19 = (_QWORD *)swift_allocObject(&unk_1002654D0, 40, 7);
    v19[2] = a2;
    v19[3] = a3;
    v19[4] = a4;
    swift_retain(a3);
    sub_1000B6158(a5, a6, a7, a8, (void (*)(_QWORD, _QWORD))sub_1000B9BA0, (uint64_t)v19, (uint64_t)a4);
    return swift_release(v19);
  }
  else
  {
    v33 = a1;
    v31 = 6;
    v21 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
    _BridgedStoredNSError.init(_:userInfo:)(&v32, &v31, v21, v15, v17);
    v22 = v32;
    v31 = (uint64_t)v32;
    v23 = static _BridgedStoredNSError.== infix(_:_:)(&v33, &v31, v15, v17);

    if ((v23 & 1) != 0)
    {
      if (qword_10028ADD0 != -1)
        swift_once(&qword_10028ADD0, sub_100046D50);
      v24 = type metadata accessor for Logger(0);
      v25 = sub_100005288(v24, (uint64_t)qword_1002A89F0);
      v26 = Logger.logObject.getter(v25);
      v27 = static os_log_type_t.error.getter(v26);
      if (os_log_type_enabled(v26, v27))
      {
        v28 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v28 = 0;
        _os_log_impl((void *)&_mh_execute_header, v26, v27, "Saving an existing beneficiary is not allowed.", v28, 2u);
        swift_slowDealloc(v28, -1, -1);
      }

    }
    return a2(0, a1);
  }
}

void sub_1000AC00C(void *a1, void *a2, void (*a3)(_QWORD, void *), uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  id v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;

  if (a2)
  {
    swift_errorRetain(a2);
    if (qword_10028ADD0 != -1)
      swift_once(&qword_10028ADD0, sub_100046D50);
    v8 = type metadata accessor for Logger(0);
    sub_100005288(v8, (uint64_t)qword_1002A89F0);
    v9 = swift_errorRetain(a2);
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.error.getter(v10);
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc(12, -1);
      v13 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v12 = 138412290;
      v14 = _convertErrorToNSError(_:)(a2);
      v37 = (void *)v14;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38);
      *v13 = v14;
      swift_errorRelease(a2);
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Error setting up the new beneficiary: %@", v12, 0xCu);
      v15 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v13, 1, v15);
      swift_slowDealloc(v13, -1, -1);
      swift_slowDealloc(v12, -1, -1);
    }
    else
    {
      swift_errorRelease(a2);
    }

    swift_errorRetain(a2);
    a3(0, a2);
    swift_errorRelease(a2);
    swift_errorRelease(a2);
  }
  else
  {
    if (qword_10028ADD0 != -1)
      swift_once(&qword_10028ADD0, sub_100046D50);
    v18 = type metadata accessor for Logger(0);
    v19 = sub_100005288(v18, (uint64_t)qword_1002A89F0);
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v20, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v22 = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Successfully Setup Beneficiary.", v22, 2u);
      swift_slowDealloc(v22, -1, -1);
    }

    if (a1)
    {
      v24 = (_QWORD *)swift_allocObject(&unk_100265598, 40, 7);
      v24[2] = a3;
      v24[3] = a4;
      v24[4] = a1;
      v25 = swift_allocObject(&unk_100264D28, 24, 7);
      swift_unknownObjectWeakInit(v25 + 16, a5);
      v26 = (_QWORD *)swift_allocObject(&unk_1002655C0, 48, 7);
      v26[2] = sub_1000B9C98;
      v26[3] = v24;
      v26[4] = a1;
      v26[5] = v25;
      v27 = a1;
      swift_retain(a4);
      swift_retain(v24);
      swift_retain(v25);
      sub_1000D0C00((uint64_t)sub_1000B9CDC, (uint64_t)v26);

      swift_release(v24);
      swift_release(v25);
      swift_release(v26);
    }
    else
    {
      v28 = Logger.logObject.getter(v23);
      v29 = static os_log_type_t.error.getter(v28);
      if (os_log_type_enabled(v28, v29))
      {
        v30 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v30 = 0;
        _os_log_impl((void *)&_mh_execute_header, v28, v29, "Created Beneficiary is nil", v30, 2u);
        swift_slowDealloc(v30, -1, -1);
      }

      type metadata accessor for InheritanceError(0);
      v32 = v31;
      v36 = 0;
      v33 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
      v34 = sub_100005150(&qword_10028B350, (uint64_t (*)(uint64_t))type metadata accessor for InheritanceError, (uint64_t)&unk_100216D64);
      _BridgedStoredNSError.init(_:userInfo:)(&v37, &v36, v33, v32, v34);
      v35 = v37;
      a3(0, v37);

    }
  }
}

uint64_t sub_1000AC444(uint64_t a1, void (*a2)(id, uint64_t), uint64_t a3, void *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  id v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint8_t *v37;
  uint64_t v38;
  _QWORD v40[2];
  uint8_t *v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(id, uint64_t);
  uint64_t v45;
  uint64_t v46;

  v44 = a2;
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  v11 = (char *)v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1000080B4(&qword_100295630);
  __chkstk_darwin(v12, v13);
  v15 = (_QWORD *)((char *)v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100024A20(a1, (uint64_t)v15, &qword_100295630);
  if (swift_getEnumCaseMultiPayload(v15, v12) == 1)
  {
    v16 = *v15;
    if (qword_10028ADD0 != -1)
      swift_once(&qword_10028ADD0, sub_100046D50);
    v17 = type metadata accessor for Logger(0);
    sub_100005288(v17, (uint64_t)qword_1002A89F0);
    swift_errorRetain(v16);
    v18 = swift_errorRetain(v16);
    v19 = Logger.logObject.getter(v18);
    v20 = static os_log_type_t.error.getter(v19);
    if (os_log_type_enabled(v19, v20))
    {
      v21 = (uint8_t *)swift_slowAlloc(12, -1);
      v22 = swift_slowAlloc(32, -1);
      v45 = v16;
      v46 = v22;
      *(_DWORD *)v21 = 136315138;
      swift_errorRetain(v16);
      v23 = sub_1000080B4(&qword_10028E850);
      v24 = String.init<A>(describing:)(&v45, v23);
      v26 = v25;
      v45 = sub_1001DEF4C(v24, v25, &v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, &v46);
      swift_bridgeObjectRelease(v26);
      swift_errorRelease(v16);
      swift_errorRelease(v16);
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Error persisting new beneficiary in Inheritance Storage: %s", v21, 0xCu);
      swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v22, -1, -1);
      swift_slowDealloc(v21, -1, -1);
    }
    else
    {
      swift_errorRelease(v16);
      swift_errorRelease(v16);
    }

    swift_errorRetain(v16);
    v44(0, v16);
    swift_errorRelease(v16);
    return swift_errorRelease(v16);
  }
  else
  {
    v43 = a3;
    if (qword_10028ADD0 != -1)
      swift_once(&qword_10028ADD0, sub_100046D50);
    v27 = type metadata accessor for Logger(0);
    sub_100005288(v27, (uint64_t)qword_1002A89F0);
    v28 = a4;
    v29 = Logger.logObject.getter(v28);
    v30 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v29, v30))
    {
      v31 = (uint8_t *)swift_slowAlloc(12, -1);
      v42 = swift_slowAlloc(32, -1);
      v46 = v42;
      *(_DWORD *)v31 = 136315138;
      v40[1] = v31 + 4;
      v41 = v31;
      v32 = objc_msgSend(v28, "beneficiaryID");
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v32);

      v33 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v34 = dispatch thunk of CustomStringConvertible.description.getter(v7, v33);
      v36 = v35;
      (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
      v45 = sub_1001DEF4C(v34, v36, &v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, &v46);

      swift_bridgeObjectRelease(v36);
      v37 = v41;
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "Successfully saved beneficiary to storage : beneficiaryID - %s", v41, 0xCu);
      v38 = v42;
      swift_arrayDestroy(v42, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v38, -1, -1);
      swift_slowDealloc(v37, -1, -1);

    }
    else
    {

    }
    v44(v28, 0);
    return sub_100004934((uint64_t)v15, &qword_100295630);
  }
}

void sub_1000ACA14(void *a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4, void *a5, uint64_t a6)
{
  uint64_t v9;
  id v10;
  uint64_t Strong;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t aBlock[5];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[3];
  char v32[8];

  if (a1)
  {
    v9 = a6 + 16;
    v10 = a1;
    objc_msgSend(a5, "setAccessKey:", v10);
    swift_beginAccess(v9, &v29, 0, 0);
    Strong = swift_unknownObjectWeakLoadStrong(v9);
    if (Strong)
    {
      v12 = (void *)Strong;
      v13 = *(void **)(Strong + OBJC_IVAR____TtC13appleaccountd25InheritanceRequestManager_controller);
      swift_unknownObjectRetain(v13);

      v14 = swift_allocObject(&unk_100265368, 32, 7);
      *(_QWORD *)(v14 + 16) = a3;
      *(_QWORD *)(v14 + 24) = a4;
      aBlock[4] = (uint64_t)sub_1000B9ABC;
      v28 = v14;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = (uint64_t)sub_1001DC548;
      aBlock[3] = (uint64_t)&unk_100265380;
      v15 = _Block_copy(aBlock);
      v16 = v28;
      swift_retain(a4);
      swift_release(v16);
      objc_msgSend(v13, "updateBeneficiaryWithInheritanceContext:completion:", a5, v15);
      swift_unknownObjectRelease(v13);

      _Block_release(v15);
    }
    else
    {

    }
  }
  else
  {
    if (qword_10028ADD0 != -1)
      swift_once(&qword_10028ADD0, sub_100046D50);
    v18 = type metadata accessor for Logger(0);
    sub_100005288(v18, (uint64_t)qword_1002A89F0);
    swift_errorRetain(a2);
    v19 = swift_errorRetain(a2);
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.error.getter(v20);
    if (os_log_type_enabled(v20, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc(12, -1);
      v23 = swift_slowAlloc(32, -1);
      aBlock[0] = v23;
      *(_DWORD *)v22 = 136315138;
      if (a2)
      {
        swift_getErrorValue(a2, v32, v31);
        v24 = Error.localizedDescription.getter(v31[1], v31[2]);
        v26 = v25;
      }
      else
      {
        v24 = 0;
        v26 = 0xE000000000000000;
      }
      v29 = sub_1001DEF4C(v24, v26, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30);
      swift_bridgeObjectRelease(v26);
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Error generating new access code: %s", v22, 0xCu);
      swift_arrayDestroy(v23, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v23, -1, -1);
      swift_slowDealloc(v22, -1, -1);
    }
    else
    {
      swift_errorRelease(a2);
      swift_errorRelease(a2);
    }

    a3(a2);
  }
}

uint64_t sub_1000ACD0C(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  void *v5;

  if (a1)
    v5 = (void *)_convertErrorToNSError(_:)(a1);
  else
    v5 = 0;
  sub_1001BA4C0(a1 == 0, (uint64_t)v5);

  return a3(a1);
}

void sub_1000ACD80(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  unint64_t v19;
  uint64_t v20;
  void *v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  void *v29;
  id v30;
  void *v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint8_t *v39;
  os_log_type_t v40;
  uint8_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  uint8_t *v47;
  uint64_t v48;
  uint64_t v49;
  NSObject *v50;
  os_log_type_t v51;
  uint8_t *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  id v57;
  uint8_t *v58;
  uint64_t v59;
  uint64_t (*v60)(uint64_t);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;

  v10 = type metadata accessor for UUID(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  v14 = (char *)&v58 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    v65 = a1;
    swift_errorRetain(a1);
    swift_errorRetain(a1);
    v15 = sub_1000080B4(&qword_10028E850);
    type metadata accessor for InheritanceError(0);
    v17 = v16;
    if ((swift_dynamicCast(&v64, &v65, v15, v16, 6) & 1) != 0)
    {
      v18 = (void *)v64;
      v65 = v64;
      v63 = 11;
      v19 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
      v20 = sub_100005150(&qword_10028B350, (uint64_t (*)(uint64_t))type metadata accessor for InheritanceError, (uint64_t)&unk_100216D64);
      _BridgedStoredNSError.init(_:userInfo:)(&v64, &v63, v19, v17, v20);
      v21 = (void *)v64;
      v63 = v64;
      v22 = static _BridgedStoredNSError.== infix(_:_:)(&v65, &v63, v17, v20);

      if ((v22 & 1) != 0)
      {
        if (qword_10028ADD0 != -1)
          swift_once(&qword_10028ADD0, sub_100046D50);
        v23 = type metadata accessor for Logger(0);
        v24 = sub_100005288(v23, (uint64_t)qword_1002A89F0);
        v25 = Logger.logObject.getter(v24);
        v26 = static os_log_type_t.debug.getter(v25);
        if (os_log_type_enabled(v25, v26))
        {
          v27 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v27 = 0;
          _os_log_impl((void *)&_mh_execute_header, v25, v26, "CleanupBeneficiary completed.", v27, 2u);
          swift_slowDealloc(v27, -1, -1);
        }

        a2(0);
        swift_errorRelease(a1);

        return;
      }

    }
    if (qword_10028ADD0 != -1)
      swift_once(&qword_10028ADD0, sub_100046D50);
    v48 = type metadata accessor for Logger(0);
    sub_100005288(v48, (uint64_t)qword_1002A89F0);
    swift_errorRetain(a1);
    v49 = swift_errorRetain(a1);
    v50 = Logger.logObject.getter(v49);
    v51 = static os_log_type_t.error.getter(v50);
    if (os_log_type_enabled(v50, v51))
    {
      v52 = (uint8_t *)swift_slowAlloc(12, -1);
      v53 = swift_slowAlloc(32, -1);
      v64 = a1;
      v65 = v53;
      *(_DWORD *)v52 = 136315138;
      swift_errorRetain(a1);
      v54 = String.init<A>(describing:)(&v64, v15);
      v56 = v55;
      v64 = sub_1001DEF4C(v54, v55, &v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, &v65);
      swift_bridgeObjectRelease(v56);
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, v50, v51, "CleanupBeneficiary completed with error : %s", v52, 0xCu);
      swift_arrayDestroy(v53, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v53, -1, -1);
      swift_slowDealloc(v52, -1, -1);
    }
    else
    {
      swift_errorRelease(a1);
      swift_errorRelease(a1);
    }

    swift_errorRetain(a1);
    a2(a1);
    swift_errorRelease(a1);
    swift_errorRelease(a1);
  }
  else
  {
    v28 = objc_opt_self(AABeneficiaryInfo);
    v29 = (void *)swift_dynamicCastObjCClass(a4, v28);
    if (v29 && (v30 = objc_msgSend(v29, "handle")) != 0)
    {
      v31 = v30;
      v61 = a3;
      v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
      v34 = v33;

      if (qword_10028ADD0 != -1)
        swift_once(&qword_10028ADD0, sub_100046D50);
      v62 = v32;
      v35 = type metadata accessor for Logger(0);
      sub_100005288(v35, (uint64_t)qword_1002A89F0);
      v36 = swift_bridgeObjectRetain_n(v34, 2);
      v37 = Logger.logObject.getter(v36);
      v38 = static os_log_type_t.debug.getter(v37);
      if (os_log_type_enabled(v37, v38))
      {
        v39 = (uint8_t *)swift_slowAlloc(12, -1);
        v59 = swift_slowAlloc(32, -1);
        v65 = v59;
        v60 = a2;
        *(_DWORD *)v39 = 136315138;
        v58 = v39 + 4;
        swift_bridgeObjectRetain(v34);
        v64 = sub_1001DEF4C(v62, v34, &v65);
        a2 = v60;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, &v65);
        swift_bridgeObjectRelease_n(v34, 3);
        v40 = v38;
        v41 = v39;
        _os_log_impl((void *)&_mh_execute_header, v37, v40, "CleanupBeneficiary completed successfully. Notifying beneficiary (%s) to remove via IDS.", v39, 0xCu);
        v42 = v59;
        swift_arrayDestroy(v59, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v42, -1, -1);
        swift_slowDealloc(v41, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(v34, 2);
      }
      sub_10000732C((_QWORD *)(a5 + OBJC_IVAR____TtC13appleaccountd25InheritanceRequestManager_setupMessenger), *(_QWORD *)(a5 + OBJC_IVAR____TtC13appleaccountd25InheritanceRequestManager_setupMessenger + 24));
      v57 = objc_msgSend(a4, "beneficiaryID");
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v57);

      sub_100151634((uint64_t)v14, v62, v34, a2, v61);
      swift_bridgeObjectRelease(v34);
      (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
    }
    else
    {
      if (qword_10028ADD0 != -1)
        swift_once(&qword_10028ADD0, sub_100046D50);
      v43 = type metadata accessor for Logger(0);
      v44 = sub_100005288(v43, (uint64_t)qword_1002A89F0);
      v45 = Logger.logObject.getter(v44);
      v46 = static os_log_type_t.debug.getter(v45);
      if (os_log_type_enabled(v45, v46))
      {
        v47 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v47 = 0;
        _os_log_impl((void *)&_mh_execute_header, v45, v46, "Beneficiary doesn't have a handle. Beneficiary Removal Complete!", v47, 2u);
        swift_slowDealloc(v47, -1, -1);
      }

      a2(0);
    }
  }
}

uint64_t sub_1000AD4C8(void *a1, uint64_t a2, uint64_t a3)
{
  char *v3;
  char *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  id v32;
  void *v33;
  _QWORD *v34;
  id v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint8_t *v39;
  id v40;
  _QWORD *v41;
  id v42;
  char *v43;
  _QWORD v45[2];
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v4 = v3;
  v8 = type metadata accessor for UUID(0);
  v50 = *(_QWORD *)(v8 - 8);
  v51 = v8;
  __chkstk_darwin(v8, v9);
  v11 = (char *)v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10028ADD0 != -1)
    swift_once(&qword_10028ADD0, sub_100046D50);
  v12 = type metadata accessor for Logger(0);
  v13 = sub_100005288(v12, (uint64_t)qword_1002A89F0);
  v14 = a1;
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v15, v16))
  {
    v17 = swift_slowAlloc(22, -1);
    v47 = v13;
    v18 = v17;
    v46 = swift_slowAlloc(64, -1);
    v53 = v46;
    *(_DWORD *)v18 = 136315394;
    v52 = type metadata accessor for InheritanceRequestManager(0);
    v19 = sub_1000080B4((uint64_t *)&unk_10028FA58);
    v49 = a3;
    v20 = String.init<A>(describing:)(&v52, v19);
    v48 = a2;
    v22 = v21;
    v52 = sub_1001DEF4C(v20, v21, &v53);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53);
    swift_bridgeObjectRelease(v22);
    *(_WORD *)(v18 + 12) = 2080;
    v45[1] = v18 + 14;
    v23 = objc_msgSend(v14, "beneficiaryID");
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v23);

    v24 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v25 = v51;
    v26 = dispatch thunk of CustomStringConvertible.description.getter(v51, v24);
    v27 = v4;
    v29 = v28;
    (*(void (**)(char *, uint64_t))(v50 + 8))(v11, v25);
    v52 = sub_1001DEF4C(v26, v29, &v53);
    a3 = v49;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53);

    v30 = v29;
    v4 = v27;
    a2 = v48;
    swift_bridgeObjectRelease(v30);
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "%s - Removing Benefactor with beneficiaryID: %s", (uint8_t *)v18, 0x16u);
    v31 = v46;
    swift_arrayDestroy(v46, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v31, -1, -1);
    swift_slowDealloc(v18, -1, -1);

  }
  else
  {

  }
  v32 = objc_allocWithZone((Class)type metadata accessor for InheritanceInvitationActionAnalyticsEvent(0));
  v33 = (void *)sub_10016E258();
  v34 = (_QWORD *)swift_allocObject(&unk_100265250, 40, 7);
  v34[2] = v33;
  v34[3] = a2;
  v34[4] = a3;
  v35 = v33;
  v36 = swift_retain(a3);
  v37 = Logger.logObject.getter(v36);
  v38 = static os_log_type_t.debug.getter(v37);
  if (os_log_type_enabled(v37, v38))
  {
    v39 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v39 = 0;
    _os_log_impl((void *)&_mh_execute_header, v37, v38, "Fetching benefactor to decline...", v39, 2u);
    swift_slowDealloc(v39, -1, -1);
  }

  sub_10000732C(&v4[OBJC_IVAR____TtC13appleaccountd25InheritanceRequestManager_storageController], *(_QWORD *)&v4[OBJC_IVAR____TtC13appleaccountd25InheritanceRequestManager_storageController + 24]);
  v40 = objc_msgSend(v14, "beneficiaryID");
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v40);

  v41 = (_QWORD *)swift_allocObject(&unk_100265278, 48, 7);
  v41[2] = sub_1000B9A58;
  v41[3] = v34;
  v41[4] = v4;
  v41[5] = v14;
  v42 = v14;
  swift_retain(v34);
  v43 = v4;
  sub_1000CC928((uint64_t)v11, (uint64_t)sub_1000B9A98, (uint64_t)v41);

  swift_release(v34);
  swift_release(v41);
  return (*(uint64_t (**)(char *, uint64_t))(v50 + 8))(v11, v51);
}

uint64_t sub_1000AD910(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  void *v5;

  if (a1)
    v5 = (void *)_convertErrorToNSError(_:)(a1);
  else
    v5 = 0;
  sub_10016E328(a1 == 0, (uint64_t)v5, 4);

  return a3(a1);
}

uint64_t sub_1000AD988(uint64_t a1, void (*a2)(uint64_t), uint64_t a3, char *a4, void *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  id v40;
  uint64_t v42;
  uint64_t v43;

  v10 = type metadata accessor for BenefactorInfoRecord(0);
  __chkstk_darwin(v10, v11);
  v13 = (char *)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_1000080B4((uint64_t *)&unk_10028FA40);
  __chkstk_darwin(v14, v15);
  v17 = (uint64_t *)((char *)&v42 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100024A20(a1, (uint64_t)v17, (uint64_t *)&unk_10028FA40);
  if (swift_getEnumCaseMultiPayload(v17, v14) == 1)
  {
    v18 = *v17;
    if (qword_10028ADD0 != -1)
      swift_once(&qword_10028ADD0, sub_100046D50);
    v19 = type metadata accessor for Logger(0);
    sub_100005288(v19, (uint64_t)qword_1002A89F0);
    swift_errorRetain(v18);
    v20 = swift_errorRetain(v18);
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.error.getter(v21);
    if (os_log_type_enabled(v21, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc(12, -1);
      v24 = swift_slowAlloc(32, -1);
      v42 = v18;
      v43 = v24;
      *(_DWORD *)v23 = 136315138;
      swift_errorRetain(v18);
      v25 = sub_1000080B4(&qword_10028E850);
      v26 = String.init<A>(describing:)(&v42, v25);
      v28 = v27;
      v42 = sub_1001DEF4C(v26, v27, &v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, &v43);
      swift_bridgeObjectRelease(v28);
      swift_errorRelease(v18);
      swift_errorRelease(v18);
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Cannot proceed to remove benefactor. Error fetching benefactor - %s", v23, 0xCu);
      swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v24, -1, -1);
      swift_slowDealloc(v23, -1, -1);
    }
    else
    {
      swift_errorRelease(v18);
      swift_errorRelease(v18);
    }

    swift_errorRetain(v18);
    a2(v18);
    swift_errorRelease(v18);
    return swift_errorRelease(v18);
  }
  else
  {
    sub_10003B730((uint64_t)v17, (uint64_t)v13, type metadata accessor for BenefactorInfoRecord);
    if (qword_10028ADD0 != -1)
      swift_once(&qword_10028ADD0, sub_100046D50);
    v29 = type metadata accessor for Logger(0);
    v30 = sub_100005288(v29, (uint64_t)qword_1002A89F0);
    v31 = Logger.logObject.getter(v30);
    v32 = static os_log_type_t.debug.getter(v31);
    if (os_log_type_enabled(v31, v32))
    {
      v33 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v33 = 0;
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "Fetched BenefactorRecord. Declining...", v33, 2u);
      swift_slowDealloc(v33, -1, -1);
    }

    v34 = sub_10000732C(&a4[OBJC_IVAR____TtC13appleaccountd25InheritanceRequestManager_setupMessenger], *(_QWORD *)&a4[OBJC_IVAR____TtC13appleaccountd25InheritanceRequestManager_setupMessenger + 24]);
    v35 = (uint64_t *)&v13[*(int *)(v10 + 20)];
    v36 = *v35;
    v37 = v35[1];
    v38 = *v34;
    v39 = a4;
    v40 = a5;
    swift_retain(a3);
    swift_bridgeObjectRetain(v37);
    sub_100152F1C(v36, v37, (uint64_t)v13, 0, v38, v39, v40, (uint64_t)a2, a3);
    swift_bridgeObjectRelease(v37);

    swift_release(a3);
    return sub_100028388((uint64_t)v13, type metadata accessor for BenefactorInfoRecord);
  }
}

uint64_t sub_1000ADD7C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint8_t *v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  uint8_t *v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v43 = a4;
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_1000080B4(&qword_10028FB08);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14, v16);
  v18 = (char *)&v36 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    v41 = a2;
    v42 = a5;
    swift_errorRetain(a1);
    if (qword_10028ADD0 != -1)
      swift_once(&qword_10028ADD0, sub_100046D50);
    v19 = type metadata accessor for Logger(0);
    sub_100005288(v19, (uint64_t)qword_1002A89F0);
    swift_errorRetain(a1);
    v20 = swift_errorRetain(a1);
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.error.getter(v21);
    if (os_log_type_enabled(v21, v22))
    {
      v40 = v9;
      v23 = swift_slowAlloc(12, -1);
      v38 = a3;
      v24 = (uint8_t *)v23;
      v37 = swift_slowAlloc(32, -1);
      v44 = a1;
      v45 = v37;
      v39 = v10;
      *(_DWORD *)v24 = 136315138;
      v36 = v24 + 4;
      swift_errorRetain(a1);
      v25 = sub_1000080B4(&qword_10028E850);
      v26 = String.init<A>(describing:)(&v44, v25);
      v28 = v27;
      v44 = sub_1001DEF4C(v26, v27, &v45);
      v10 = v39;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, &v45);
      v29 = v28;
      v9 = v40;
      swift_bridgeObjectRelease(v29);
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Error declining invitation - %s", v24, 0xCu);
      v30 = v37;
      swift_arrayDestroy(v37, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v30, -1, -1);
      v31 = v24;
      a3 = v38;
      swift_slowDealloc(v31, -1, -1);

      swift_errorRelease(a1);
    }
    else
    {
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      swift_errorRelease(a1);

    }
    a2 = v41;
    a5 = v42;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v18, a2 + OBJC_IVAR____TtC13appleaccountd25InheritanceRequestManager__cleanupController, v14);
  Dependency.wrappedValue.getter(&v45, v14);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
  v32 = v45;
  v33 = objc_msgSend(a3, "beneficiaryID");
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v33);

  v34 = swift_allocObject(&unk_1002652A0, 32, 7);
  *(_QWORD *)(v34 + 16) = v43;
  *(_QWORD *)(v34 + 24) = a5;
  swift_retain(a5);
  sub_100183768((uint64_t)v13, (uint64_t)sub_1000B9AA4, v34);
  swift_release(v32);
  swift_release(v34);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, v9);
}

uint64_t sub_1000AE150(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t a3, const char *a4)
{
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v17;
  _QWORD v18[3];
  _BYTE v19[8];
  uint64_t v20;

  if (a1)
  {
    swift_errorRetain(a1);
    if (qword_10028ADD0 != -1)
      swift_once(&qword_10028ADD0, sub_100046D50);
    v7 = type metadata accessor for Logger(0);
    sub_100005288(v7, (uint64_t)qword_1002A89F0);
    swift_errorRetain(a1);
    v8 = swift_errorRetain(a1);
    v9 = Logger.logObject.getter(v8);
    v10 = static os_log_type_t.error.getter(v9);
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc(12, -1);
      v12 = swift_slowAlloc(32, -1);
      v20 = v12;
      *(_DWORD *)v11 = 136315138;
      swift_getErrorValue(a1, v19, v18);
      v13 = Error.localizedDescription.getter(v18[1], v18[2]);
      v15 = v14;
      v17 = sub_1001DEF4C(v13, v14, &v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, v18);
      swift_bridgeObjectRelease(v15);
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, v9, v10, a4, v11, 0xCu);
      swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v12, -1, -1);
      swift_slowDealloc(v11, -1, -1);

      swift_errorRelease(a1);
    }
    else
    {
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      swift_errorRelease(a1);

    }
  }
  return a2(a1);
}

void sub_1000AE354(void *a1, int a2, uint64_t a3, void *aBlock, void (*a5)(uint64_t, id, void *))
{
  void *v8;
  id v9;

  v8 = _Block_copy(aBlock);
  _Block_copy(v8);
  swift_unknownObjectRetain(a3);
  v9 = a1;
  a5(a3, v9, v8);
  _Block_release(v8);
  _Block_release(v8);
  swift_unknownObjectRelease(a3);

}

uint64_t sub_1000AE3D4(uint64_t a1, char a2, void (*a3)(_QWORD, uint64_t), uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t result;
  void *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  if ((a2 & 1) != 0)
  {
    swift_errorRetain(a1);
    if (qword_10028ADD0 != -1)
      swift_once(&qword_10028ADD0, sub_100046D50);
    v12 = type metadata accessor for Logger(0);
    sub_100005288(v12, (uint64_t)qword_1002A89F0);
    v13 = swift_errorRetain(a1);
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.error.getter(v14);
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc(12, -1);
      v17 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v16 = 138412290;
      v18 = _convertErrorToNSError(_:)(a1);
      v20 = v18;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21);
      *v17 = v18;
      sub_1000057B0(a1, 1);
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Error fetching beneficiaries from storage: %@", v16, 0xCu);
      v19 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v17, 1, v19);
      swift_slowDealloc(v17, -1, -1);
      swift_slowDealloc(v16, -1, -1);
    }
    else
    {
      sub_1000057B0(a1, 1);
    }

    swift_errorRetain(a1);
    a3(0, a1);
    sub_1000057B0(a1, 1);
    return sub_1000057B0(a1, 1);
  }
  else if (*(_QWORD *)(a1 + 16))
  {
    v8 = a5 + 16;
    swift_beginAccess(a5 + 16, &v20, 0, 0);
    result = swift_unknownObjectWeakLoadStrong(v8);
    if (result)
    {
      v10 = (void *)result;
      v11 = (_QWORD *)swift_allocObject(&unk_100265110, 40, 7);
      v11[2] = a1;
      v11[3] = a3;
      v11[4] = a4;
      sub_1000057BC(a1, 0);
      swift_retain(a4);
      sub_1000B4A4C((uint64_t)sub_1000B99EC, (uint64_t)v11);

      return swift_release(v11);
    }
  }
  else
  {
    return ((uint64_t (*)(_QWORD *, _QWORD))a3)(_swiftEmptyArrayStorage, 0);
  }
  return result;
}

uint64_t sub_1000AE818(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD v34[2];
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v4 = v3;
  v38 = a2;
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  v11 = (char *)v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10028ADD0 != -1)
    swift_once(&qword_10028ADD0, sub_100046D50);
  v12 = type metadata accessor for Logger(0);
  sub_100005288(v12, (uint64_t)qword_1002A89F0);
  v13 = swift_unknownObjectRetain_n(a1, 2);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v14, v15))
  {
    v16 = swift_slowAlloc(22, -1);
    v37 = a3;
    v17 = v16;
    v36 = swift_slowAlloc(64, -1);
    v40 = v36;
    *(_DWORD *)v17 = 136315394;
    v39 = type metadata accessor for InheritanceRequestManager(0);
    v18 = sub_1000080B4((uint64_t *)&unk_10028FA58);
    v35 = v8;
    v19 = String.init<A>(describing:)(&v39, v18);
    v21 = v20;
    v39 = sub_1001DEF4C(v19, v20, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40);
    swift_bridgeObjectRelease(v21);
    *(_WORD *)(v17 + 12) = 2080;
    v34[1] = v17 + 14;
    v22 = objc_msgSend(a1, "beneficiaryID");
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v22);

    v23 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v24 = dispatch thunk of CustomStringConvertible.description.getter(v7, v23);
    v25 = v4;
    v27 = v26;
    (*(void (**)(char *, uint64_t))(v35 + 8))(v11, v7);
    v39 = sub_1001DEF4C(v24, v27, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40);
    swift_unknownObjectRelease_n(a1, 2);
    v28 = v27;
    v4 = v25;
    swift_bridgeObjectRelease(v28);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "%s - Sending invitation to beneficiaryID - %s", (uint8_t *)v17, 0x16u);
    v29 = v36;
    swift_arrayDestroy(v36, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v29, -1, -1);
    v30 = v17;
    a3 = v37;
    swift_slowDealloc(v30, -1, -1);

  }
  else
  {

    swift_unknownObjectRelease_n(a1, 2);
  }
  v31 = swift_allocObject(&unk_100264D28, 24, 7);
  swift_unknownObjectWeakInit(v31 + 16, v4);
  v32 = (_QWORD *)swift_allocObject(&unk_100264FD0, 40, 7);
  v32[2] = v38;
  v32[3] = a3;
  v32[4] = v31;
  swift_retain(a3);
  swift_retain(v31);
  sub_1000AF2B8(a1, (uint64_t)sub_1000B9754, (uint64_t)v32);
  swift_release(v31);
  return swift_release(v32);
}

uint64_t sub_1000AEB60(uint64_t a1, void (*a2)(uint64_t), void (*a3)(uint64_t), uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  void (*v25)(uint64_t);
  void (*v26)(uint64_t);
  uint64_t v27;
  uint64_t Strong;
  uint64_t v29;
  void *v30;
  id v31;
  void *v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  void (**v45)(uint64_t);
  uint64_t v46;
  uint64_t v47;
  NSObject *v48;
  os_log_type_t v49;
  void (*v50)(uint64_t);
  uint8_t *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD v62[3];
  _QWORD v63[3];
  uint64_t v64;
  _BYTE v65[24];

  v61 = a4;
  v7 = sub_1000080B4(&qword_10028FA50);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  v11 = (char *)&v57 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for InheritanceInvitationRecord(0);
  v58 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12, v13);
  v59 = v15;
  v60 = (uint64_t)&v57 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14, v16);
  v18 = (char *)&v57 - v17;
  v19 = sub_1000080B4((uint64_t *)&unk_10028FA70);
  __chkstk_darwin(v19, v20);
  v22 = (uint64_t *)((char *)&v57 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100024A20(a1, (uint64_t)v22, (uint64_t *)&unk_10028FA70);
  if (swift_getEnumCaseMultiPayload(v22, v19) == 1)
  {
    v23 = *v22;
    swift_errorRetain(*v22);
    a2(v23);
    swift_errorRelease(v23);
    return swift_errorRelease(v23);
  }
  v25 = a2;
  v26 = a3;
  v27 = v61 + 16;
  sub_10003B730((uint64_t)v22, (uint64_t)v18, type metadata accessor for InheritanceInvitationRecord);
  swift_beginAccess(v27, v65, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v27);
  v29 = (uint64_t)v18;
  if (!Strong)
    goto LABEL_9;
  v30 = (void *)Strong;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, Strong + OBJC_IVAR____TtC13appleaccountd25InheritanceRequestManager__accountStore, v7);
  Dependency.wrappedValue.getter(v63, v7);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);

  v31 = objc_msgSend(*(id *)(*sub_10000732C(v63, v64) + 16), "aa_primaryAppleAccount");
  if (!v31
    || (v32 = v31, v33 = objc_msgSend(v31, "aa_altDSID"), v32, !v33))
  {
    sub_100006F58(v63);
LABEL_9:
    if (qword_10028ADD0 != -1)
      swift_once(&qword_10028ADD0, sub_100046D50);
    v46 = type metadata accessor for Logger(0);
    v47 = sub_100005288(v46, (uint64_t)qword_1002A89F0);
    v48 = Logger.logObject.getter(v47);
    v49 = static os_log_type_t.error.getter(v48);
    v50 = v25;
    if (os_log_type_enabled(v48, v49))
    {
      v51 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v51 = 0;
      _os_log_impl((void *)&_mh_execute_header, v48, v49, "No altDSID for owner found.", v51, 2u);
      swift_slowDealloc(v51, -1, -1);
    }

    type metadata accessor for InheritanceError(0);
    v53 = v52;
    v62[0] = 5;
    v54 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
    v55 = sub_100005150(&qword_10028B350, (uint64_t (*)(uint64_t))type metadata accessor for InheritanceError, (uint64_t)&unk_100216D64);
    _BridgedStoredNSError.init(_:userInfo:)(v63, v62, v54, v53, v55);
    v56 = (void *)v63[0];
    v50(v63[0]);

    return sub_100028388(v29, type metadata accessor for InheritanceInvitationRecord);
  }
  v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
  v36 = v35;

  sub_100006F58(v63);
  swift_beginAccess(v27, v62, 0, 0);
  v37 = swift_unknownObjectWeakLoadStrong(v27);
  if (v37)
  {
    v38 = (void *)v37;
    sub_100006CA4(v37 + OBJC_IVAR____TtC13appleaccountd25InheritanceRequestManager_setupMessenger, (uint64_t)v63);

    sub_10000732C(v63, v64);
    v39 = (uint64_t)v18;
    v40 = v60;
    sub_100027FE8((uint64_t)v18, v60, type metadata accessor for InheritanceInvitationRecord);
    v41 = *(unsigned __int8 *)(v58 + 80);
    v42 = (v41 + 16) & ~v41;
    v43 = (v59 + v42 + 7) & 0xFFFFFFFFFFFFFFF8;
    v44 = swift_allocObject(&unk_100265048, v43 + 16, v41 | 7);
    sub_10003B730(v40, v44 + v42, type metadata accessor for InheritanceInvitationRecord);
    v45 = (void (**)(uint64_t))(v44 + v43);
    *v45 = v25;
    v45[1] = v26;
    swift_retain(v26);
    sub_100150074(v39, v34, v36, sub_1000B9908, v44);
    swift_release(v44);
    swift_bridgeObjectRelease(v36);
    sub_100028388(v39, type metadata accessor for InheritanceInvitationRecord);
    return sub_100006F58(v63);
  }
  swift_bridgeObjectRelease(v36);
  return sub_100028388(v29, type metadata accessor for InheritanceInvitationRecord);
}

uint64_t sub_1000AF020(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  Swift::String v5;
  Swift::String v6;
  uint64_t v7;
  void *v8;
  void *v9;
  Swift::String v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t (*v18)(_QWORD);
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  _QWORD v23[3];
  _BYTE v24[8];
  uint64_t v25;
  unint64_t v26;

  if (a1)
  {
    v5 = *(Swift::String *)(a2 + *(int *)(type metadata accessor for InheritanceInvitationRecord(0) + 20));
    v25 = 0xD000000000000020;
    v26 = 0x800000010020BC00;
    String.append(_:)(v5);
    swift_errorRetain(a1);
    swift_bridgeObjectRetain(0x800000010020BC00);
    v6._countAndFlagsBits = 58;
    v6._object = (void *)0xE100000000000000;
    String.append(_:)(v6);
    swift_bridgeObjectRelease(0x800000010020BC00);
    swift_getErrorValue(a1, v24, v23);
    v7 = Error.localizedDescription.getter(v23[1], v23[2]);
    v9 = v8;
    v25 = 0xD000000000000020;
    v26 = 0x800000010020BC00;
    swift_bridgeObjectRetain(0x800000010020BC00);
    v10._countAndFlagsBits = v7;
    v10._object = v9;
    String.append(_:)(v10);
    swift_bridgeObjectRelease(0x800000010020BC00);
    swift_bridgeObjectRelease(v9);
    v12 = v25;
    v11 = v26;
    if (qword_10028ADD0 != -1)
      swift_once(&qword_10028ADD0, sub_100046D50);
    v13 = type metadata accessor for Logger(0);
    sub_100005288(v13, (uint64_t)qword_1002A89F0);
    swift_bridgeObjectRetain(v11);
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.error.getter(v15);
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc(12, -1);
      v18 = a3;
      v19 = swift_slowAlloc(32, -1);
      v25 = v19;
      *(_DWORD *)v17 = 136315138;
      swift_bridgeObjectRetain(v11);
      v22 = sub_1001DEF4C(v12, v11, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, v23);
      swift_bridgeObjectRelease_n(v11, 3);
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "%s", v17, 0xCu);
      swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
      v20 = v19;
      a3 = v18;
      swift_slowDealloc(v20, -1, -1);
      swift_slowDealloc(v17, -1, -1);

      swift_errorRelease(a1);
    }
    else
    {
      swift_bridgeObjectRelease_n(v11, 2);
      swift_errorRelease(a1);

    }
  }
  return a3(a1);
}

uint64_t sub_1000AF2B8(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  id v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v22;

  v4 = v3;
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10028ADD0 != -1)
    swift_once(&qword_10028ADD0, sub_100046D50);
  v13 = type metadata accessor for Logger(0);
  v14 = sub_100005288(v13, (uint64_t)qword_1002A89F0);
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.debug.getter(v15);
  if (os_log_type_enabled(v15, v16))
  {
    v17 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v17 = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Fetching for existing invitation..", v17, 2u);
    swift_slowDealloc(v17, -1, -1);
  }

  sub_10000732C((_QWORD *)(v4 + OBJC_IVAR____TtC13appleaccountd25InheritanceRequestManager_storageController), *(_QWORD *)(v4 + OBJC_IVAR____TtC13appleaccountd25InheritanceRequestManager_storageController + 24));
  v18 = objc_msgSend(a1, "beneficiaryID");
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v18);

  v19 = swift_allocObject(&unk_100264D28, 24, 7);
  swift_unknownObjectWeakInit(v19 + 16, v4);
  v20 = (_QWORD *)swift_allocObject(&unk_100264FF8, 48, 7);
  v20[2] = v19;
  v20[3] = a1;
  v20[4] = a2;
  v20[5] = a3;
  swift_retain(v19);
  swift_unknownObjectRetain(a1);
  swift_retain(a3);
  sub_1000C8F4C((uint64_t)v12, (uint64_t)sub_1000B9794, (uint64_t)v20);
  swift_release(v20);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  return swift_release(v19);
}

uint64_t sub_1000AF540(uint64_t a1, char a2, void (*a3)(_QWORD, uint64_t), uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  _QWORD *v21;
  void *v22;
  uint64_t v23;
  NSString v24;
  id v25;
  char *v26;
  __n128 v27;
  __n128 v28;
  Class v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  NSString v33;
  void *v34;
  Class v35;
  void *v36;
  void *v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  NSObject *v50;
  os_log_type_t v51;
  uint8_t *v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD v57[2];
  void (*v58)(_QWORD *, _QWORD);
  uint64_t v59;
  id v60;
  char *v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  NSString v66;
  NSString v67;
  Class isa;
  _QWORD *v69;
  uint64_t v70;

  v8 = type metadata accessor for PersonNameComponents(0);
  v64 = *(_QWORD *)(v8 - 8);
  v65 = v8;
  __chkstk_darwin(v8, v9);
  v63 = (char *)v57 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for InheritanceInvitationRecord(0);
  v12 = *(_QWORD *)(v11 - 8);
  v14 = __chkstk_darwin(v11, v13);
  v16 = (char *)v57 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14, v17);
  v19 = (char *)v57 - v18;
  if ((a2 & 1) != 0)
  {
    swift_errorRetain(a1);
    if (qword_10028ADD0 != -1)
      swift_once(&qword_10028ADD0, sub_100046D50);
    v48 = type metadata accessor for Logger(0);
    sub_100005288(v48, (uint64_t)qword_1002A89F0);
    v49 = swift_errorRetain(a1);
    v50 = Logger.logObject.getter(v49);
    v51 = static os_log_type_t.error.getter(v50);
    if (os_log_type_enabled(v50, v51))
    {
      v52 = (uint8_t *)swift_slowAlloc(12, -1);
      v53 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v52 = 138412290;
      v54 = _convertErrorToNSError(_:)(a1);
      v69 = (_QWORD *)v54;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v69, &v70);
      *v53 = v54;
      sub_1000057B0(a1, 1);
      _os_log_impl((void *)&_mh_execute_header, v50, v51, "Error fetching invitations from storage: %@", v52, 0xCu);
      v55 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v53, 1, v55);
      swift_slowDealloc(v53, -1, -1);
      swift_slowDealloc(v52, -1, -1);
    }
    else
    {
      sub_1000057B0(a1, 1);
    }

    swift_errorRetain(a1);
    a3(0, a1);
    sub_1000057B0(a1, 1);
    return sub_1000057B0(a1, 1);
  }
  else
  {
    v57[1] = a4;
    v58 = (void (*)(_QWORD *, _QWORD))a3;
    v20 = *(_QWORD *)(a1 + 16);
    v21 = _swiftEmptyArrayStorage;
    if (v20)
    {
      v69 = _swiftEmptyArrayStorage;
      specialized ContiguousArray.reserveCapacity(_:)(v20);
      v22 = (void *)objc_opt_self(NSPersonNameComponentsFormatter);
      v23 = a1 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
      v59 = *(_QWORD *)(v12 + 72);
      v60 = v22;
      v61 = v19;
      v62 = v11;
      do
      {
        sub_100027FE8(v23, (uint64_t)v19, type metadata accessor for InheritanceInvitationRecord);
        sub_100027FE8((uint64_t)v19, (uint64_t)v16, type metadata accessor for InheritanceInvitationRecord);
        isa = UUID._bridgeToObjectiveC()().super.isa;
        v67 = String._bridgeToObjectiveC()();
        v42 = &v16[*(int *)(v11 + 24)];
        v43 = *(_QWORD *)v42;
        v44 = *((_QWORD *)v42 + 1);
        if (v44)
        {
          swift_bridgeObjectRetain(*((_QWORD *)v42 + 1));
          v66 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(v44);
        }
        else
        {
          v66 = 0;
        }
        v45 = &v16[*(int *)(v11 + 28)];
        v46 = *(_QWORD *)v45;
        v47 = *((_QWORD *)v45 + 1);
        if (v47)
        {
          swift_bridgeObjectRetain(*((_QWORD *)v45 + 1));
          v24 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(v47);
        }
        else
        {
          v24 = 0;
        }
        v25 = objc_allocWithZone((Class)AAInheritanceInvitation);
        v26 = v63;
        PersonNameComponents.init()(v25);
        v27 = swift_bridgeObjectRetain(v44);
        PersonNameComponents.givenName.setter(v43, v44, v27);
        v28 = swift_bridgeObjectRetain(v47);
        PersonNameComponents.familyName.setter(v46, v47, v28);
        v29 = PersonNameComponents._bridgeToObjectiveC()().super.isa;
        v30 = objc_msgSend(v60, "localizedStringFromPersonNameComponents:style:options:", v29, 0, 0);

        static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
        v32 = v31;

        (*(void (**)(char *, uint64_t))(v64 + 8))(v26, v65);
        v33 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v32);
        v11 = v62;
        v34 = v25;
        v36 = v67;
        v35 = isa;
        v37 = v66;
        v38 = objc_msgSend(v34, "initWithBeneficiaryID:beneficiaryHandle:beneficiaryFirstName:beneficiaryLastName:beneficiaryDisplayName:status:", isa, v67, v66, v24, v33, *(_QWORD *)&v16[*(int *)(v62 + 32)]);

        sub_100028388((uint64_t)v16, type metadata accessor for InheritanceInvitationRecord);
        v19 = v61;
        v39 = sub_100028388((uint64_t)v61, type metadata accessor for InheritanceInvitationRecord);
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v39);
        v40 = v69[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v40);
        v41 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v40, v38);
        specialized ContiguousArray._endMutation()(v41);
        v23 += v59;
        --v20;
      }
      while (v20);
      v21 = v69;
    }
    v58(v21, 0);
    return swift_bridgeObjectRelease(v21);
  }
}

uint64_t sub_1000AFAF4(uint64_t a1, void (*a2)(id, uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  NSString v38;
  __n128 v39;
  __n128 v40;
  void *v41;
  Class v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  NSString v46;
  void *v47;
  Class v48;
  void *v49;
  id v50;
  uint64_t v51;
  id v52;
  void (*v53)(id, uint64_t);
  uint64_t v54;
  uint64_t v55;
  NSObject *v56;
  os_log_type_t v57;
  uint8_t *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  id v63;
  NSString v64;
  NSString v65;
  Class isa;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(id, uint64_t);
  uint64_t v71;
  void *v72;
  uint64_t v73;

  v68 = a4;
  v69 = a3;
  v70 = a2;
  v5 = type metadata accessor for PersonNameComponents(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  v9 = (char *)&v63 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (int *)type metadata accessor for InheritanceInvitationRecord(0);
  v12 = __chkstk_darwin(v10, v11);
  v14 = (char *)&v63 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12, v15);
  v17 = (char *)&v63 - v16;
  v18 = sub_1000080B4((uint64_t *)&unk_10028FA70);
  __chkstk_darwin(v18, v19);
  v21 = (uint64_t *)((char *)&v63 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100024A20(a1, (uint64_t)v21, (uint64_t *)&unk_10028FA70);
  if (swift_getEnumCaseMultiPayload(v21, v18) == 1)
  {
    v22 = *v21;
    if (qword_10028ADD0 != -1)
      swift_once(&qword_10028ADD0, sub_100046D50);
    v23 = type metadata accessor for Logger(0);
    sub_100005288(v23, (uint64_t)qword_1002A89F0);
    v24 = swift_errorRetain(v22);
    v25 = Logger.logObject.getter(v24);
    v26 = static os_log_type_t.error.getter(v25);
    if (os_log_type_enabled(v25, v26))
    {
      v27 = (uint8_t *)swift_slowAlloc(12, -1);
      v28 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v27 = 138412290;
      v29 = _convertErrorToNSError(_:)(v22);
      v72 = (void *)v29;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v72, &v73);
      *v28 = v29;
      swift_errorRelease(v22);
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Error fetching invitation from storage: %@", v27, 0xCu);
      v30 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v28, 1, v30);
      swift_slowDealloc(v28, -1, -1);
      swift_slowDealloc(v27, -1, -1);
    }
    else
    {
      swift_errorRelease(v22);
    }

    swift_errorRetain(v22);
    v70(0, v22);
    swift_errorRelease(v22);
    return swift_errorRelease(v22);
  }
  else
  {
    sub_10003B730((uint64_t)v21, (uint64_t)v17, type metadata accessor for InheritanceInvitationRecord);
    sub_100027FE8((uint64_t)v17, (uint64_t)v14, type metadata accessor for InheritanceInvitationRecord);
    isa = UUID._bridgeToObjectiveC()().super.isa;
    v65 = String._bridgeToObjectiveC()();
    v31 = &v14[v10[6]];
    v33 = *(_QWORD *)v31;
    v32 = *((_QWORD *)v31 + 1);
    if (v32)
    {
      swift_bridgeObjectRetain(*((_QWORD *)v31 + 1));
      v64 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v32);
    }
    else
    {
      v64 = 0;
    }
    v67 = v17;
    v35 = &v14[v10[7]];
    v36 = *(_QWORD *)v35;
    v37 = *((_QWORD *)v35 + 1);
    if (v37)
    {
      swift_bridgeObjectRetain(*((_QWORD *)v35 + 1));
      v38 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v37);
    }
    else
    {
      v38 = 0;
    }
    v63 = objc_allocWithZone((Class)AAInheritanceInvitation);
    PersonNameComponents.init()(v63);
    v39 = swift_bridgeObjectRetain(v32);
    PersonNameComponents.givenName.setter(v33, v32, v39);
    v40 = swift_bridgeObjectRetain(v37);
    PersonNameComponents.familyName.setter(v36, v37, v40);
    v41 = (void *)objc_opt_self(NSPersonNameComponentsFormatter);
    v42 = PersonNameComponents._bridgeToObjectiveC()().super.isa;
    v43 = objc_msgSend(v41, "localizedStringFromPersonNameComponents:style:options:", v42, 0, 0);

    static String._unconditionallyBridgeFromObjectiveC(_:)(v43);
    v45 = v44;

    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    v46 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v45);
    v47 = v64;
    v49 = v65;
    v48 = isa;
    v50 = objc_msgSend(v63, "initWithBeneficiaryID:beneficiaryHandle:beneficiaryFirstName:beneficiaryLastName:beneficiaryDisplayName:status:", isa, v65, v64, v38, v46, *(_QWORD *)&v14[v10[8]]);

    sub_100028388((uint64_t)v14, type metadata accessor for InheritanceInvitationRecord);
    v51 = (uint64_t)v67;
    if ((static UUID.== infix(_:_:)(v68) & 1) != 0)
    {
      v52 = v50;
      v70(v50, 0);

    }
    else
    {
      v53 = v70;
      if (qword_10028ADD0 != -1)
        swift_once(&qword_10028ADD0, sub_100046D50);
      v54 = type metadata accessor for Logger(0);
      v55 = sub_100005288(v54, (uint64_t)qword_1002A89F0);
      v56 = Logger.logObject.getter(v55);
      v57 = static os_log_type_t.error.getter(v56);
      if (os_log_type_enabled(v56, v57))
      {
        v58 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v58 = 0;
        _os_log_impl((void *)&_mh_execute_header, v56, v57, "Fetched invitation did not match record.", v58, 2u);
        swift_slowDealloc(v58, -1, -1);
      }

      type metadata accessor for InheritanceError(0);
      v60 = v59;
      v71 = 2;
      v61 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
      v62 = sub_100005150(&qword_10028B350, (uint64_t (*)(uint64_t))type metadata accessor for InheritanceError, (uint64_t)&unk_100216D64);
      _BridgedStoredNSError.init(_:userInfo:)(&v72, &v71, v61, v60, v62);
      v52 = v72;
      v53(0, (uint64_t)v72);

    }
    return sub_100028388(v51, type metadata accessor for InheritanceInvitationRecord);
  }
}

uint64_t sub_1000B0270(uint64_t a1, char a2, void *a3, void (*a4)(uint64_t), uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint64_t v38;
  uint8_t *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint8_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(uint64_t);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v12 = type metadata accessor for UUID(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12, v14);
  v16 = (char *)&v49 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for InheritanceInvitationRecord(0);
  v19 = __chkstk_darwin(v17, v18);
  v21 = (char *)&v49 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __chkstk_darwin(v19, v22);
  result = __chkstk_darwin(v23, v24);
  if ((a2 & 1) != 0)
  {
    swift_errorRetain(a1);
    if (qword_10028ADD0 != -1)
      swift_once(&qword_10028ADD0, sub_100046D50);
    v34 = type metadata accessor for Logger(0);
    sub_100005288(v34, (uint64_t)qword_1002A89F0);
    v35 = swift_errorRetain(a1);
    v36 = Logger.logObject.getter(v35);
    v37 = static os_log_type_t.error.getter(v36);
    if (os_log_type_enabled(v36, v37))
    {
      v38 = a1;
      v39 = (uint8_t *)swift_slowAlloc(12, -1);
      v40 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v39 = 138412290;
      v41 = _convertErrorToNSError(_:)(v38);
      v56 = v41;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, &v57);
      *v40 = v41;
      sub_1000057B0(v38, 1);
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "Error removing invitation from storage: %@", v39, 0xCu);
      v42 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v40, 1, v42);
      swift_slowDealloc(v40, -1, -1);
      v43 = v39;
      a1 = v38;
      swift_slowDealloc(v43, -1, -1);

      if (!a4)
        return sub_1000057B0(a1, 1);
    }
    else
    {
      sub_1000057B0(a1, 1);

      if (!a4)
        return sub_1000057B0(a1, 1);
    }
    swift_errorRetain(a1);
    a4(a1);
    sub_1000057B0(a1, 1);
    return sub_1000057B0(a1, 1);
  }
  v55 = a6;
  v29 = *(_QWORD *)(a1 + 16);
  if (v29)
  {
    v50 = v28;
    v51 = (uint64_t)&v49 - v27;
    v53 = a5;
    v54 = a4;
    v30 = a1;
    v31 = a1 + ((*(unsigned __int8 *)(v26 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80));
    v32 = *(_QWORD *)(v26 + 72);
    v52 = v30;
    swift_bridgeObjectRetain(v30);
    while (1)
    {
      sub_100027FE8(v31, (uint64_t)v21, type metadata accessor for InheritanceInvitationRecord);
      v33 = objc_msgSend(a3, "beneficiaryID");
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v33);

      LOBYTE(v33) = static UUID.== infix(_:_:)(v21);
      (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
      if ((v33 & 1) != 0)
        break;
      sub_100028388((uint64_t)v21, type metadata accessor for InheritanceInvitationRecord);
      v31 += v32;
      if (!--v29)
      {
        result = sub_1000057B0(v52, 0);
        a4 = v54;
        goto LABEL_7;
      }
    }
    sub_1000057B0(v52, 0);
    v44 = v50;
    sub_10003B730((uint64_t)v21, v50, type metadata accessor for InheritanceInvitationRecord);
    v45 = v51;
    sub_10003B730(v44, v51, type metadata accessor for InheritanceInvitationRecord);
    sub_10000732C((_QWORD *)(v55 + OBJC_IVAR____TtC13appleaccountd25InheritanceRequestManager_storageController), *(_QWORD *)(v55 + OBJC_IVAR____TtC13appleaccountd25InheritanceRequestManager_storageController + 24));
    v46 = swift_allocObject(&unk_100264EE0, 32, 7);
    v48 = v53;
    v47 = (uint64_t)v54;
    *(_QWORD *)(v46 + 16) = v54;
    *(_QWORD *)(v46 + 24) = v48;
    sub_10000E1C0(v47, v48);
    sub_1000C9BD0(v45, (uint64_t)sub_1000B963C, v46);
    swift_release(v46);
    return sub_100028388(v45, type metadata accessor for InheritanceInvitationRecord);
  }
  else
  {
LABEL_7:
    if (a4)
      return ((uint64_t (*)(_QWORD))a4)(0);
  }
  return result;
}

uint64_t sub_1000B079C(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  char v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  id v28;
  id v29;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  _OWORD v39[7];
  uint64_t v40;

  v36 = a4;
  v33 = a3;
  v6 = a2;
  v37 = a2;
  v38 = a1;
  v34 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v34 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  __chkstk_darwin(v34, v10);
  v32 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = v4 + OBJC_IVAR____TtC13appleaccountd25InheritanceRequestManager_invitationResponder;
  v12 = objc_allocWithZone((Class)type metadata accessor for InheritanceInvitationActionAnalyticsEvent(0));
  v13 = (void *)sub_10016E258();
  v14 = swift_allocObject(&unk_100264E40, 48, 7);
  *(_BYTE *)(v14 + 16) = v6;
  v15 = v33;
  *(_QWORD *)(v14 + 24) = v13;
  *(_QWORD *)(v14 + 32) = v15;
  *(_QWORD *)(v14 + 40) = a4;
  v35 = sub_10000732C((_QWORD *)(v11 + 40), *(_QWORD *)(v11 + 64));
  sub_1000B611C((_OWORD *)v11, v39);
  v16 = v34;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v34);
  v17 = *(unsigned __int8 *)(v8 + 80);
  v18 = (v17 + 136) & ~v17;
  v19 = (v9 + v18 + 7) & 0xFFFFFFFFFFFFFFF8;
  v20 = (v19 + 39) & 0xFFFFFFFFFFFFFFF8;
  v21 = swift_allocObject(&unk_100264E68, v20 + 16, v17 | 7);
  v22 = v39[5];
  *(_OWORD *)(v21 + 80) = v39[4];
  *(_OWORD *)(v21 + 96) = v22;
  *(_OWORD *)(v21 + 112) = v39[6];
  *(_QWORD *)(v21 + 128) = v40;
  v23 = v39[1];
  *(_OWORD *)(v21 + 16) = v39[0];
  *(_OWORD *)(v21 + 32) = v23;
  v24 = v39[3];
  *(_OWORD *)(v21 + 48) = v39[2];
  *(_OWORD *)(v21 + 64) = v24;
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(v21 + v18, v32, v16);
  *(_QWORD *)(v21 + v19) = v13;
  v25 = v21 + ((v19 + 15) & 0xFFFFFFFFFFFFFFF8);
  v26 = v36;
  *(_QWORD *)v25 = v15;
  *(_QWORD *)(v25 + 8) = v26;
  *(_BYTE *)(v25 + 16) = v37;
  v27 = (_QWORD *)(v21 + v20);
  *v27 = sub_1000B9D74;
  v27[1] = v14;
  v28 = v13;
  sub_10000E1C0(v15, v26);
  v29 = v28;
  sub_10000E1C0(v15, v26);
  swift_retain(v14);
  sub_1000CC928(v38, (uint64_t)sub_1000B6154, v21);
  swift_release(v21);

  return swift_release(v14);
}

uint64_t sub_1000B0ACC(uint64_t a1, char a2, unsigned __int8 a3, uint64_t a4, uint64_t a5)
{
  _OWORD *v5;
  _OWORD *v6;
  int v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t inited;
  uint64_t v19;
  uint64_t v20;
  NSString v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  void *v37;
  uint64_t v38;
  void (**v39)(uint64_t);
  id v40;
  id v41;
  _QWORD v43[2];
  uint64_t v44;
  void *v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50[56];
  _OWORD v51[7];
  uint64_t v52;
  _QWORD v53[4];

  v6 = v5;
  v49 = a4;
  v11 = a3;
  v48 = type metadata accessor for UUID(0);
  v47 = *(_QWORD *)(v48 - 8);
  v12 = *(_QWORD *)(v47 + 64);
  __chkstk_darwin(v48, v13);
  v14 = (char *)v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = objc_allocWithZone((Class)type metadata accessor for InheritanceInvitationActionAnalyticsEvent(0));
  v16 = sub_10016E258();
  if (v11 != 4)
  {
    v17 = sub_1000080B4(&qword_10028E7F8);
    inited = swift_initStackObject(v17, v50);
    *(_OWORD *)(inited + 16) = xmmword_100218E30;
    strcpy((char *)(inited + 32), "didCDPRepair");
    *(_BYTE *)(inited + 45) = 0;
    *(_WORD *)(inited + 46) = -5120;
    LOBYTE(v51[0]) = a3;
    String.init<A>(describing:)(v51, &type metadata for InheritanceAnalyticsCDPRepairAction);
    v20 = v19;
    v21 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v20);
    *(_QWORD *)(inited + 48) = v21;
    v22 = sub_10001612C(inited);
    dispatch thunk of AAFTimedAnalyticsEvent.appendEvent(data:)();
    swift_bridgeObjectRelease(v22);
  }
  v23 = swift_allocObject(&unk_100264BE8, 48, 7);
  v46 = a2 & 1;
  *(_BYTE *)(v23 + 16) = a2 & 1;
  v45 = (void *)v16;
  v24 = v49;
  *(_QWORD *)(v23 + 24) = v16;
  *(_QWORD *)(v23 + 32) = v24;
  v25 = a5;
  *(_QWORD *)(v23 + 40) = a5;
  sub_100006CA4((uint64_t)v6 + 40, (uint64_t)v53);
  v43[1] = sub_10000732C(v53, v53[3]);
  sub_1000B611C(v6, v51);
  v26 = v47;
  v27 = v48;
  (*(void (**)(char *, uint64_t, uint64_t))(v47 + 16))((char *)v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v48);
  v28 = *(unsigned __int8 *)(v26 + 80);
  v29 = (v28 + 136) & ~v28;
  v30 = (v12 + v29 + 7) & 0xFFFFFFFFFFFFFFF8;
  v44 = a1;
  v43[0] = (v30 + 15) & 0xFFFFFFFFFFFFFFF8;
  v31 = (v30 + 39) & 0xFFFFFFFFFFFFFFF8;
  v32 = swift_allocObject(&unk_100264C10, v31 + 16, v28 | 7);
  v33 = v51[5];
  v34 = v51[6];
  *(_OWORD *)(v32 + 80) = v51[4];
  *(_OWORD *)(v32 + 96) = v33;
  *(_OWORD *)(v32 + 112) = v34;
  *(_QWORD *)(v32 + 128) = v52;
  v35 = v51[1];
  *(_OWORD *)(v32 + 16) = v51[0];
  *(_OWORD *)(v32 + 32) = v35;
  v36 = v51[3];
  *(_OWORD *)(v32 + 48) = v51[2];
  *(_OWORD *)(v32 + 64) = v36;
  (*(void (**)(uint64_t, char *, uint64_t))(v26 + 32))(v32 + v29, v14, v27);
  v37 = v45;
  *(_QWORD *)(v32 + v30) = v45;
  v38 = v32 + v43[0];
  *(_QWORD *)v38 = v24;
  *(_QWORD *)(v38 + 8) = v25;
  *(_BYTE *)(v38 + 16) = v46;
  v39 = (void (**)(uint64_t))(v32 + v31);
  *v39 = sub_1000B610C;
  v39[1] = (void (*)(uint64_t))v23;
  v40 = v37;
  sub_10000E1C0(v24, v25);
  v41 = v40;
  sub_10000E1C0(v24, v25);
  swift_retain(v23);
  sub_1000CC928(v44, (uint64_t)sub_1000B6154, v32);
  swift_release(v32);

  swift_release(v23);
  return sub_100006F58(v53);
}

uint64_t sub_1000B0DF8(uint64_t a1, char a2, void (*a3)(_QWORD, uint64_t), uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  NSUUID v27;
  Class isa;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  void (*v39)(_QWORD, uint64_t);
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;

  v8 = sub_1000080B4(&qword_10028E810);
  __chkstk_darwin(v8, v9);
  v11 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = type metadata accessor for InheritanceHealthRecord(0);
  v12 = *(_QWORD *)(v40 - 8);
  __chkstk_darwin(v40, v13);
  v15 = (char *)&v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 1) != 0)
  {
    swift_errorRetain(a1);
    if (qword_10028ADD0 != -1)
      swift_once(&qword_10028ADD0, sub_100046D50);
    v29 = type metadata accessor for Logger(0);
    sub_100005288(v29, (uint64_t)qword_1002A89F0);
    v30 = swift_errorRetain(a1);
    v31 = Logger.logObject.getter(v30);
    v32 = static os_log_type_t.error.getter(v31);
    if (os_log_type_enabled(v31, v32))
    {
      v33 = (uint8_t *)swift_slowAlloc(12, -1);
      v34 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v33 = 138412290;
      v35 = _convertErrorToNSError(_:)(a1);
      v41 = (_QWORD *)v35;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42);
      *v34 = v35;
      sub_1000057B0(a1, 1);
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "Error fetching health records from storage: %@", v33, 0xCu);
      v36 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v34, 1, v36);
      swift_slowDealloc(v34, -1, -1);
      swift_slowDealloc(v33, -1, -1);
    }
    else
    {
      sub_1000057B0(a1, 1);
    }

    swift_errorRetain(a1);
    a3(0, a1);
    sub_1000057B0(a1, 1);
    return sub_1000057B0(a1, 1);
  }
  else
  {
    v16 = *(_QWORD *)(a1 + 16);
    v17 = _swiftEmptyArrayStorage;
    if (v16)
    {
      v38 = a4;
      v39 = a3;
      v41 = _swiftEmptyArrayStorage;
      specialized ContiguousArray.reserveCapacity(_:)(v16);
      v18 = a1 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
      v19 = *(_QWORD *)(v12 + 72);
      do
      {
        sub_100027FE8(v18, (uint64_t)v15, type metadata accessor for InheritanceHealthRecord);
        v24 = &v15[*(int *)(v40 + 20)];
        v25 = type metadata accessor for Date(0);
        v26 = *(_QWORD *)(v25 - 8);
        (*(void (**)(char *, char *, uint64_t))(v26 + 16))(v11, v24, v25);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v11, 0, 1, v25);
        v27.super.isa = UUID._bridgeToObjectiveC()().super.isa;
        isa = 0;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v11, 1, v25) != 1)
        {
          isa = Date._bridgeToObjectiveC()().super.isa;
          (*(void (**)(char *, uint64_t))(v26 + 8))(v11, v25);
        }
        v20 = objc_msgSend(objc_allocWithZone((Class)AATrustedContactHealthInfo), "initWithID:lastValidCheckTimeStamp:", v27.super.isa, isa);

        v21 = sub_100028388((uint64_t)v15, type metadata accessor for InheritanceHealthRecord);
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v21);
        v22 = v41[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v22);
        v23 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v22, v20);
        specialized ContiguousArray._endMutation()(v23);
        v18 += v19;
        --v16;
      }
      while (v16);
      v17 = v41;
      a3 = v39;
    }
    a3(v17, 0);
    return swift_bridgeObjectRelease(v17);
  }
}

uint64_t sub_1000B127C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v4 = v3;
  if (qword_10028ADD0 != -1)
    swift_once(&qword_10028ADD0, sub_100046D50);
  v8 = type metadata accessor for Logger(0);
  v9 = sub_100005288(v8, (uint64_t)qword_1002A89F0);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc(12, -1);
    v22 = a2;
    v13 = swift_slowAlloc(32, -1);
    v24 = v13;
    *(_DWORD *)v12 = 136315138;
    v23 = type metadata accessor for InheritanceRequestManager(0);
    v14 = sub_1000080B4((uint64_t *)&unk_10028FA58);
    v15 = String.init<A>(describing:)(&v23, v14);
    v17 = v16;
    v23 = sub_1001DEF4C(v15, v16, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24);
    swift_bridgeObjectRelease(v17);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "%s - Displaying Inheritance Invitation UI using Springboard.", v12, 0xCu);
    swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
    v18 = v13;
    a2 = v22;
    swift_slowDealloc(v18, -1, -1);
    swift_slowDealloc(v12, -1, -1);
  }

  sub_10000732C((_QWORD *)(v4 + OBJC_IVAR____TtC13appleaccountd25InheritanceRequestManager_storageController), *(_QWORD *)(v4 + OBJC_IVAR____TtC13appleaccountd25InheritanceRequestManager_storageController + 24));
  v19 = swift_allocObject(&unk_100264D28, 24, 7);
  swift_unknownObjectWeakInit(v19 + 16, v4);
  v20 = (_QWORD *)swift_allocObject(&unk_100264D50, 40, 7);
  v20[2] = a2;
  v20[3] = a3;
  v20[4] = v19;
  swift_retain(a3);
  swift_retain(v19);
  sub_1000CC928(a1, (uint64_t)sub_1000B93EC, (uint64_t)v20);
  swift_release(v19);
  return swift_release(v20);
}

uint64_t sub_1000B14B8(uint64_t a1, void (*a2)(uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  Class isa;
  NSString v33;
  id v34;
  id v35;
  uint64_t Strong;
  void *v37;
  void *v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  uint64_t aBlock[5];
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v8 = type metadata accessor for BenefactorInfoRecord(0);
  __chkstk_darwin(v8, v9);
  v11 = (char *)&aBlock[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1000080B4((uint64_t *)&unk_10028FA40);
  __chkstk_darwin(v12, v13);
  v15 = (uint64_t *)((char *)&aBlock[-1] - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100024A20(a1, (uint64_t)v15, (uint64_t *)&unk_10028FA40);
  if (swift_getEnumCaseMultiPayload(v15, v12) == 1)
  {
    v16 = *v15;
    if (qword_10028ADD0 != -1)
      swift_once(&qword_10028ADD0, sub_100046D50);
    v17 = type metadata accessor for Logger(0);
    sub_100005288(v17, (uint64_t)qword_1002A89F0);
    swift_errorRetain(v16);
    v18 = swift_errorRetain(v16);
    v19 = Logger.logObject.getter(v18);
    v20 = static os_log_type_t.error.getter(v19);
    if (os_log_type_enabled(v19, v20))
    {
      v21 = (uint8_t *)swift_slowAlloc(12, -1);
      v22 = swift_slowAlloc(32, -1);
      aBlock[0] = v22;
      *(_DWORD *)v21 = 136315138;
      v46 = v16;
      swift_errorRetain(v16);
      v23 = sub_1000080B4(&qword_10028E850);
      v24 = String.init<A>(describing:)(&v46, v23);
      v26 = v25;
      v46 = sub_1001DEF4C(v24, v25, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, &v47);
      swift_bridgeObjectRelease(v26);
      swift_errorRelease(v16);
      swift_errorRelease(v16);
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Error fetching benefactor record: %s", v21, 0xCu);
      swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v22, -1, -1);
      swift_slowDealloc(v21, -1, -1);
    }
    else
    {
      swift_errorRelease(v16);
      swift_errorRelease(v16);
    }

    swift_errorRetain(v16);
    a2(v16);
    swift_errorRelease(v16);
    return swift_errorRelease(v16);
  }
  else
  {
    v27 = a4 + 16;
    sub_10003B730((uint64_t)v15, (uint64_t)v11, type metadata accessor for BenefactorInfoRecord);
    v28 = *(int *)(v8 + 20);
    v29 = *(_QWORD *)&v11[*(int *)(v8 + 24)];
    v30 = *(_QWORD *)&v11[v28 + 8];
    v31 = objc_allocWithZone((Class)AACustodianshipInfo);
    swift_bridgeObjectRetain(v30);
    isa = UUID._bridgeToObjectiveC()().super.isa;
    v33 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v30);
    v34 = objc_msgSend(v31, "initWithID:status:ownerHandle:", isa, v29, v33);

    v35 = objc_msgSend(objc_allocWithZone((Class)AAOBInheritanceInvitationModel), "initWithBenefactorInfo:", v34);
    swift_beginAccess(v27, &v46, 0, 0);
    Strong = swift_unknownObjectWeakLoadStrong(v27);
    if (Strong)
    {
      v37 = (void *)Strong;
      v38 = *(void **)(Strong + OBJC_IVAR____TtC13appleaccountd25InheritanceRequestManager_flowPresenter);
      v39 = swift_allocObject(&unk_100264D78, 32, 7);
      *(_QWORD *)(v39 + 16) = a2;
      *(_QWORD *)(v39 + 24) = a3;
      aBlock[4] = (uint64_t)sub_1000B93F8;
      v45 = v39;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = (uint64_t)sub_1001DC548;
      aBlock[3] = (uint64_t)&unk_100264D90;
      v40 = _Block_copy(aBlock);
      v41 = v45;
      swift_retain(a3);
      swift_release(v41);
      objc_msgSend(v38, "presentModel:completion:", v35, v40);
      _Block_release(v40);

      v34 = v37;
    }

    return sub_100028388((uint64_t)v11, type metadata accessor for BenefactorInfoRecord);
  }
}

uint64_t sub_1000B19B8(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v18;
  uint64_t v19;

  if (a1)
  {
    swift_errorRetain(a1);
    if (qword_10028ADD0 != -1)
      swift_once(&qword_10028ADD0, sub_100046D50);
    v4 = type metadata accessor for Logger(0);
    sub_100005288(v4, (uint64_t)qword_1002A89F0);
    v5 = swift_errorRetain(a1);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.error.getter(v6);
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc(12, -1);
      v9 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v8 = 138412290;
      v10 = _convertErrorToNSError(_:)(a1);
      v18 = v10;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19);
      *v9 = v10;
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Error occurred displaying Inheritance Invitation UI: %@", v8, 0xCu);
      v11 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v9, 1, v11);
      swift_slowDealloc(v9, -1, -1);
      swift_slowDealloc(v8, -1, -1);
    }
    else
    {
      swift_errorRelease(a1);
    }

    swift_errorRetain(a1);
    a2(a1);
    swift_errorRelease(a1);
    return swift_errorRelease(a1);
  }
  else
  {
    if (qword_10028ADD0 != -1)
      swift_once(&qword_10028ADD0, sub_100046D50);
    v12 = type metadata accessor for Logger(0);
    v13 = sub_100005288(v12, (uint64_t)qword_1002A89F0);
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Successfully displayed inheritance invite UI", v16, 2u);
      swift_slowDealloc(v16, -1, -1);
    }

    return ((uint64_t (*)(_QWORD))a2)(0);
  }
}

void sub_1000B1C30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  _QWORD *v22;
  id v23;
  void *v24;
  id v25;
  unint64_t v26;
  unint64_t v27;
  id v28;
  NSString v29;
  id v30;
  NSString v31;
  NSString v32;
  NSString v33;
  NSString v34;
  id v35;
  NSString v36;
  void *v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  _QWORD v41[3];
  uint64_t v42;
  _QWORD aBlock[3];
  void *v44;
  void (*v45)(void *, uint64_t);
  uint64_t v46;

  v13 = v12;
  v41[0] = a5;
  v41[2] = a4;
  v17 = sub_1000080B4(&qword_10028FA50);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17, v19);
  v21 = (char *)v41 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v21, v13 + OBJC_IVAR____TtC13appleaccountd25InheritanceRequestManager__accountStore, v17);
  Dependency.wrappedValue.getter(aBlock, v17);
  (*(void (**)(char *, uint64_t))(v18 + 8))(v21, v17);
  v22 = sub_10000732C(aBlock, (uint64_t)v44);
  v23 = objc_msgSend(*(id *)(*v22 + 16), "aa_primaryAppleAccount", v41[0]);
  v24 = v23;
  v42 = v13;
  v41[1] = a7;
  if (v23 && (v25 = objc_msgSend(v23, "aa_altDSID"), v24, v25))
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
    v27 = v26;

  }
  else
  {
    v27 = 0xE000000000000000;
  }
  sub_100006F58(aBlock);
  v28 = objc_allocWithZone((Class)AKInheritanceCLIContext);
  v29 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v27);
  v30 = objc_msgSend(v28, "initWithOwnerAltDSID:", v29);

  v31 = String._bridgeToObjectiveC()();
  objc_msgSend(v30, "setAccessKeyString:", v31);

  v32 = String._bridgeToObjectiveC()();
  objc_msgSend(v30, "setBeneficiaryPassword:", v32);

  if (a6)
    v33 = String._bridgeToObjectiveC()();
  else
    v33 = 0;
  objc_msgSend(v30, "setBeneficiaryFirstName:", v33);

  if (a8)
    v34 = String._bridgeToObjectiveC()();
  else
    v34 = 0;
  objc_msgSend(v30, "setBeneficiaryLastName:", v34);

  v35 = v30;
  v36 = String._bridgeToObjectiveC()();
  objc_msgSend(v35, "setBeneficiarySetupToken:", v36);

  v37 = *(void **)(v42 + OBJC_IVAR____TtC13appleaccountd25InheritanceRequestManager_controller);
  v38 = swift_allocObject(&unk_100264CB0, 32, 7);
  *(_QWORD *)(v38 + 16) = a11;
  *(_QWORD *)(v38 + 24) = a12;
  v45 = sub_1000B93BC;
  v46 = v38;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000ABBFC;
  v44 = &unk_100264CC8;
  v39 = _Block_copy(aBlock);
  v40 = v46;
  swift_retain(a12);
  swift_release(v40);
  objc_msgSend(v37, "_setupBeneficiaryAliasWithInheritanceContext:completion:", v35, v39);
  _Block_release(v39);

}

void sub_1000B1F68(id a1, uint64_t a2, void (*a3)(uint64_t, unint64_t, uint64_t, unint64_t, uint64_t))
{
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  id v11;
  void *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  id v16;
  void *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  NSObject *oslog;
  uint64_t v32;
  uint64_t v33;

  if (a2)
  {
    swift_errorRetain(a2);
    if (qword_10028ADD0 != -1)
      swift_once(&qword_10028ADD0, sub_100046D50);
    v5 = type metadata accessor for Logger(0);
    v6 = sub_100005288(v5, (uint64_t)qword_1002A89F0);
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.error.getter(v7);
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Error occurred while creating beneficiary alias", v9, 2u);
      swift_slowDealloc(v9, -1, -1);
    }

    swift_errorRetain(a2);
    a3(0, 0, 0, 0, a2);
    swift_errorRelease(a2);
    swift_errorRelease(a2);
    return;
  }
  if (a1)
  {
    v11 = objc_msgSend(a1, "beneficiaryAltDSID");
    if (v11)
    {
      v12 = v11;
      v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
      v15 = v14;

      v16 = objc_msgSend(a1, "beneficiaryAccountName");
      if (v16)
      {
        v17 = v16;
        v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
        v20 = v19;

        if (qword_10028ADD0 != -1)
          swift_once(&qword_10028ADD0, sub_100046D50);
        v21 = type metadata accessor for Logger(0);
        sub_100005288(v21, (uint64_t)qword_1002A89F0);
        swift_bridgeObjectRetain_n(v15, 2);
        v22 = swift_bridgeObjectRetain_n(v20, 2);
        v23 = Logger.logObject.getter(v22);
        v24 = static os_log_type_t.debug.getter(v23);
        if (os_log_type_enabled(v23, v24))
        {
          v25 = swift_slowAlloc(22, -1);
          v30 = swift_slowAlloc(64, -1);
          v33 = v30;
          *(_DWORD *)v25 = 136315394;
          swift_bridgeObjectRetain(v15);
          v32 = sub_1001DEF4C(v13, v15, &v33);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, &v33);
          swift_bridgeObjectRelease_n(v15, 3);
          *(_WORD *)(v25 + 12) = 2080;
          swift_bridgeObjectRetain(v20);
          v32 = sub_1001DEF4C(v18, v20, &v33);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, &v33);
          swift_bridgeObjectRelease_n(v20, 3);
          _os_log_impl((void *)&_mh_execute_header, v23, v24, "Beneficiary Alias setup successfully:\nbeneficiaryAltDSID - %s\nbeneficiaryAccountName - %s", (uint8_t *)v25, 0x16u);
          swift_arrayDestroy(v30, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v30, -1, -1);
          swift_slowDealloc(v25, -1, -1);

        }
        else
        {

          swift_bridgeObjectRelease_n(v20, 2);
          swift_bridgeObjectRelease_n(v15, 2);
        }
        a3(v13, v15, v18, v20, 0);
        swift_bridgeObjectRelease(v15);
        swift_bridgeObjectRelease(v20);
        return;
      }
      swift_bridgeObjectRelease(v15);
    }
  }
  if (qword_10028ADD0 != -1)
    swift_once(&qword_10028ADD0, sub_100046D50);
  v26 = type metadata accessor for Logger(0);
  v27 = sub_100005288(v26, (uint64_t)qword_1002A89F0);
  oslog = Logger.logObject.getter(v27);
  v28 = static os_log_type_t.debug.getter(oslog);
  if (os_log_type_enabled(oslog, v28))
  {
    v29 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v29 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v28, "Setup Beneficiary Alias returned with empty result", v29, 2u);
    swift_slowDealloc(v29, -1, -1);
  }

}

uint64_t destroy for InheritanceInvitationResponder(_QWORD *a1)
{
  sub_100006F58(a1);
  sub_100006F58(a1 + 5);
  return sub_100006F58(a1 + 10);
}

_OWORD *initializeWithCopy for InheritanceInvitationResponder(_OWORD *a1, _OWORD *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;

  v4 = *(_OWORD *)((char *)a2 + 24);
  *(_OWORD *)((char *)a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  v5 = a2[4];
  a1[4] = v5;
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))((uint64_t)a1 + 40, (uint64_t)a2 + 40);
  v6 = *(_OWORD *)((char *)a2 + 104);
  *(_OWORD *)((char *)a1 + 104) = v6;
  (**(void (***)(uint64_t, uint64_t))(v6 - 8))((uint64_t)(a1 + 5), (uint64_t)(a2 + 5));
  return a1;
}

_QWORD *assignWithCopy for InheritanceInvitationResponder(_QWORD *a1, _QWORD *a2)
{
  sub_1000B2628(a1, a2);
  sub_1000B2628(a1 + 5, a2 + 5);
  sub_1000B2628(a1 + 10, a2 + 10);
  return a1;
}

_QWORD *sub_1000B2628(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[24];

  if (result != a2)
  {
    v3 = result;
    v4 = result[3];
    v5 = a2[3];
    if (v4 == v5)
    {
      v9 = *(_QWORD *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        v11 = *result;
        v12 = *a2;
        swift_retain(*a2);
        result = (_QWORD *)swift_release(v11);
        *v3 = v12;
      }
      else
      {
        return (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD *, _QWORD))(v9 + 24))(result, a2, result[3]);
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      v6 = *(_QWORD *)(v4 - 8);
      v7 = *(_QWORD *)(v5 - 8);
      v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        v10 = *result;
        if ((v8 & 0x20000) != 0)
        {
          v14 = *a2;
          *v3 = *a2;
          swift_retain(v14);
        }
        else
        {
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (_QWORD *)swift_release(v10);
      }
      else
      {
        (*(void (**)(_BYTE *, _QWORD *, uint64_t))(v6 + 32))(v15, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          v13 = *a2;
          *v3 = *a2;
          swift_retain(v13);
        }
        else
        {
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 16))(v3, a2, v5);
        }
        return (_QWORD *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v15, v4);
      }
    }
  }
  return result;
}

__n128 initializeWithTake for InheritanceInvitationResponder(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  result = (__n128)a2[4];
  v6 = a2[5];
  v7 = a2[6];
  *(_QWORD *)(a1 + 112) = *((_QWORD *)a2 + 14);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  *(__n128 *)(a1 + 64) = result;
  return result;
}

uint64_t assignWithTake for InheritanceInvitationResponder(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;

  sub_100006F58((_QWORD *)a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  sub_100006F58((_QWORD *)(a1 + 40));
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  sub_100006F58((_QWORD *)(a1 + 80));
  v5 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v5;
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  return a1;
}

uint64_t getEnumTagSinglePayload for InheritanceInvitationResponder(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 120))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for InheritanceInvitationResponder(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 120) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 120) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for InheritanceInvitationResponder()
{
  return &type metadata for InheritanceInvitationResponder;
}

void sub_1000B28E0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  NSString v8;
  NSString v9;
  uint64_t v10;
  id v11;

  v8 = a4;
  if (a2)
  {
    v9 = String._bridgeToObjectiveC()();
    if (!v8)
      goto LABEL_4;
    goto LABEL_3;
  }
  v9 = 0;
  if (a4)
LABEL_3:
    v8 = String._bridgeToObjectiveC()();
LABEL_4:
  if (a5)
    v10 = _convertErrorToNSError(_:)(a5);
  else
    v10 = 0;
  v11 = (id)v10;
  (*(void (**)(uint64_t, NSString, NSString))(a6 + 16))(a6, v9, v8);

}

void sub_1000B2988(void *a1, uint64_t a2, void (*a3)(_QWORD, _QWORD), uint64_t a4, void *a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSString v34;
  NSString v35;
  uint64_t Strong;
  void *v37;
  void *v38;
  _QWORD *v39;
  uint64_t v40;
  void *v41;
  _QWORD *v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  void (*v54)(_QWORD, _QWORD);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t aBlock[5];
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;

  v58 = a7;
  v17 = type metadata accessor for UUID(0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17, v19);
  v21 = (char *)&v54 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    v54 = a3;
    v55 = a4;
    v56 = a9;
    v57 = a8;
    v22 = a10 + 16;
    v23 = qword_10028ADD0;
    v24 = a1;
    if (v23 != -1)
      swift_once(&qword_10028ADD0, sub_100046D50);
    v25 = type metadata accessor for Logger(0);
    v26 = sub_100005288(v25, (uint64_t)qword_1002A89F0);
    v27 = Logger.logObject.getter(v26);
    v28 = static os_log_type_t.debug.getter(v27);
    if (os_log_type_enabled(v27, v28))
    {
      v29 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v29 = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "Successfully created accessKey. Setting up beneficiary with IdMS...", v29, 2u);
      swift_slowDealloc(v29, -1, -1);
    }

    objc_msgSend(a5, "setAccessKey:", v24);
    v30 = objc_msgSend(a6, "beneficiaryID");
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v30);

    UUID.uuidString.getter(v31);
    v33 = v32;
    (*(void (**)(char *, uint64_t))(v18 + 8))(v21, v17);
    v34 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v33);
    objc_msgSend(a5, "setBeneficiaryIdentifier:", v34);

    objc_msgSend(a5, "setManifest:", v58);
    v35 = String._bridgeToObjectiveC()();
    objc_msgSend(a5, "setBeneficiarySetupToken:", v35);

    swift_beginAccess(v22, &v61, 0, 0);
    Strong = swift_unknownObjectWeakLoadStrong(v22);
    if (Strong)
    {
      v37 = (void *)Strong;
      v38 = *(void **)(Strong + OBJC_IVAR____TtC13appleaccountd25InheritanceRequestManager_controller);
      swift_unknownObjectRetain(v38);

      v39 = (_QWORD *)swift_allocObject(&unk_100265548, 48, 7);
      v39[2] = a6;
      v39[3] = v24;
      v40 = v55;
      v39[4] = v54;
      v39[5] = v40;
      aBlock[4] = (uint64_t)sub_1000B9C5C;
      v60 = v39;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = (uint64_t)sub_1001DC548;
      aBlock[3] = (uint64_t)&unk_100265560;
      v41 = _Block_copy(aBlock);
      v42 = v60;
      v43 = v24;
      swift_unknownObjectRetain(a6);
      swift_retain(v40);
      swift_release(v42);
      objc_msgSend(v38, "setupBeneficiaryWithInheritanceContext:completion:", a5, v41);
      swift_unknownObjectRelease(v38);

      _Block_release(v41);
    }
    else
    {

    }
  }
  else
  {
    if (qword_10028ADD0 != -1)
      swift_once(&qword_10028ADD0, sub_100046D50);
    v44 = type metadata accessor for Logger(0);
    sub_100005288(v44, (uint64_t)qword_1002A89F0);
    swift_errorRetain(a2);
    v45 = swift_errorRetain(a2);
    v46 = Logger.logObject.getter(v45);
    v47 = static os_log_type_t.error.getter(v46);
    if (os_log_type_enabled(v46, v47))
    {
      v48 = (uint8_t *)swift_slowAlloc(12, -1);
      v49 = swift_slowAlloc(32, -1);
      aBlock[0] = v49;
      *(_DWORD *)v48 = 136315138;
      v61 = a2;
      swift_errorRetain(a2);
      v50 = sub_1000080B4((uint64_t *)&unk_10028FB70);
      v51 = String.init<A>(describing:)(&v61, v50);
      v53 = v52;
      v61 = sub_1001DEF4C(v51, v52, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v61, &v62);
      swift_bridgeObjectRelease(v53);
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      _os_log_impl((void *)&_mh_execute_header, v46, v47, "Error generating access key: %s", v48, 0xCu);
      swift_arrayDestroy(v49, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v49, -1, -1);
      swift_slowDealloc(v48, -1, -1);
    }
    else
    {
      swift_errorRelease(a2);
      swift_errorRelease(a2);
    }

    a3(0, a2);
  }
}

uint64_t sub_1000B2E48(uint64_t a1, void *a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t))
{
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  _QWORD v28[3];
  _BYTE v29[8];
  uint64_t v30;

  if (a1)
  {
    swift_errorRetain(a1);
    if (qword_10028ADD0 != -1)
      swift_once(&qword_10028ADD0, sub_100046D50);
    v8 = type metadata accessor for Logger(0);
    sub_100005288(v8, (uint64_t)qword_1002A89F0);
    swift_errorRetain(a1);
    v9 = swift_errorRetain(a1);
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.error.getter(v10);
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc(12, -1);
      v13 = swift_slowAlloc(32, -1);
      v30 = v13;
      v25 = a3;
      v26 = a2;
      *(_DWORD *)v12 = 136315138;
      swift_getErrorValue(a1, v29, v28);
      v14 = Error.localizedDescription.getter(v28[1], v28[2]);
      v16 = v15;
      v27 = sub_1001DEF4C(v14, v15, &v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, v28);
      swift_bridgeObjectRelease(v16);
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Error persisting manifest with Inheritance Controller: %s", v12, 0xCu);
      swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v13, -1, -1);
      swift_slowDealloc(v12, -1, -1);

      swift_errorRelease(a1);
    }
    else
    {
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      swift_errorRelease(a1);

    }
  }
  else
  {
    if (qword_10028ADD0 != -1)
      swift_once(&qword_10028ADD0, sub_100046D50);
    v17 = type metadata accessor for Logger(0);
    v18 = sub_100005288(v17, (uint64_t)qword_1002A89F0);
    v19 = Logger.logObject.getter(v18);
    v20 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v19, v20))
    {
      v21 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v21 = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Successfully setup up beneficiary with IdMS", v21, 2u);
      swift_slowDealloc(v21, -1, -1);
    }

  }
  objc_msgSend(a2, "setAccessKey:", a3, v25, v26);
  v22 = objc_opt_self(AABeneficiary);
  v23 = swift_dynamicCastObjCClass(a2, v22);
  return a4(v23, a1);
}

uint64_t sub_1000B3138(uint64_t a1, char a2, void (*a3)(uint64_t *), uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  void *v27;
  uint64_t Strong;
  void *v29;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  _QWORD v36[5];
  _BYTE v37[24];

  v12 = type metadata accessor for BeneficiaryInfoRecord(0);
  __chkstk_darwin(v12, v13);
  v15 = (char *)v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_1000080B4(&qword_100295630);
  __chkstk_darwin(v16, v17);
  v19 = (_QWORD *)((char *)v36 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  if ((a2 & 1) != 0)
  {
    swift_errorRetain(a1);
    if (qword_10028ADD0 != -1)
      swift_once(&qword_10028ADD0, sub_100046D50);
    v31 = type metadata accessor for Logger(0);
    v32 = sub_100005288(v31, (uint64_t)qword_1002A89F0);
    v33 = Logger.logObject.getter(v32);
    v34 = static os_log_type_t.error.getter(v33);
    if (os_log_type_enabled(v33, v34))
    {
      v35 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v35 = 0;
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "Unable to determine Manatee state - aborting benficiary creation...", v35, 2u);
      swift_slowDealloc(v35, -1, -1);
    }

    *v19 = a1;
    swift_storeEnumTagMultiPayload(v19, v16, 1);
    swift_errorRetain(a1);
    a3(v19);
    sub_10006AEB4(a1, 1);
    return sub_100004934((uint64_t)v19, &qword_100295630);
  }
  else
  {
    v20 = a6 + 16;
    v21 = a1 & 1;
    if (qword_10028ADD0 != -1)
      swift_once(&qword_10028ADD0, sub_100046D50);
    v22 = type metadata accessor for Logger(0);
    v23 = sub_100005288(v22, (uint64_t)qword_1002A89F0);
    v24 = Logger.logObject.getter(v23);
    v25 = static os_log_type_t.debug.getter(v24);
    if (os_log_type_enabled(v24, v25))
    {
      v26 = (uint8_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v26 = 67109120;
      LODWORD(v36[0]) = v21;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v36, (char *)v36 + 4);
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Saving BeneficiaryInfoRecord in manatee? %{BOOL}d", v26, 8u);
      swift_slowDealloc(v26, -1, -1);
    }

    v27 = (void *)swift_unknownObjectRetain(a5);
    sub_10001090C(v27, v21, (uint64_t)v15);
    swift_beginAccess(v20, v37, 0, 0);
    Strong = swift_unknownObjectWeakLoadStrong(v20);
    if (Strong)
    {
      v29 = (void *)Strong;
      sub_100006CA4(Strong + OBJC_IVAR____TtC13appleaccountd25InheritanceRequestManager_storageController, (uint64_t)v36);

      sub_10000732C(v36, v36[3]);
      sub_1000CB018((uint64_t)v15, (uint64_t)a3, a4);
      sub_100028388((uint64_t)v15, type metadata accessor for BeneficiaryInfoRecord);
      return sub_100006F58(v36);
    }
    else
    {
      return sub_100028388((uint64_t)v15, type metadata accessor for BeneficiaryInfoRecord);
    }
  }
}

void sub_1000B3478(uint64_t a1, uint64_t a2, uint64_t *a3, NSObject *a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  unint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  uint64_t Strong;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint8_t *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  uint8_t *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  NSObject *v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63[3];
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;

  v61 = a3;
  v9 = type metadata accessor for InheritanceInvitationRecord(0);
  v11 = __chkstk_darwin(v9, v10);
  v13 = (char *)&v58 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11, v14);
  v16 = (char *)&v58 - v15;
  v17 = sub_1000080B4((uint64_t *)&unk_10028FA70);
  v19 = __chkstk_darwin(v17, v18);
  v21 = (uint64_t *)((char *)&v58 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v19, v22);
  v24 = (uint64_t *)((char *)&v58 - v23);
  sub_100024A20(a1, (uint64_t)&v58 - v23, (uint64_t *)&unk_10028FA70);
  v62 = v17;
  if (swift_getEnumCaseMultiPayload(v24, v17) == 1)
  {
    v63[0] = *v24;
    v25 = v63[0];
    swift_errorRetain(v63[0]);
    v26 = sub_1000080B4(&qword_10028E850);
    type metadata accessor for InheritanceError(0);
    v28 = v27;
    if ((swift_dynamicCast(&v65, v63, v26, v27, 6) & 1) != 0)
    {
      v59 = a5;
      v60 = a4;
      v29 = (void *)v65;
      v63[0] = v65;
      v64 = 3;
      v30 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
      v31 = sub_100005150(&qword_10028B350, (uint64_t (*)(uint64_t))type metadata accessor for InheritanceError, (uint64_t)&unk_100216D64);
      _BridgedStoredNSError.init(_:userInfo:)(&v65, &v64, v30, v28, v31);
      v32 = (void *)v65;
      v64 = v65;
      LOBYTE(v30) = static _BridgedStoredNSError.== infix(_:_:)(v63, &v64, v28, v31);

      if ((v30 & 1) != 0)
      {
        if (qword_10028ADD0 != -1)
          swift_once(&qword_10028ADD0, sub_100046D50);
        v33 = type metadata accessor for Logger(0);
        v34 = sub_100005288(v33, (uint64_t)qword_1002A89F0);
        v35 = Logger.logObject.getter(v34);
        v36 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v35, v36))
        {
          v37 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v37 = 0;
          _os_log_impl((void *)&_mh_execute_header, v35, v36, "No existing invitation found. Creating new Invitation...", v37, 2u);
          swift_slowDealloc(v37, -1, -1);
        }

        swift_beginAccess(a2 + 16, v63, 0, 0);
        Strong = swift_unknownObjectWeakLoadStrong(a2 + 16);
        if (Strong)
        {
          v39 = (void *)Strong;
          sub_1000B3B24(v61, v60, v59);
          swift_errorRelease(v25);

        }
        else
        {
          swift_errorRelease(v25);
        }

        return;
      }

      a5 = v59;
      a4 = v60;
    }
    if (qword_10028ADD0 != -1)
      swift_once(&qword_10028ADD0, sub_100046D50);
    v49 = type metadata accessor for Logger(0);
    sub_100005288(v49, (uint64_t)qword_1002A89F0);
    swift_errorRetain(v25);
    v50 = swift_errorRetain(v25);
    v51 = Logger.logObject.getter(v50);
    v52 = static os_log_type_t.error.getter(v51);
    if (os_log_type_enabled(v51, v52))
    {
      v59 = a5;
      v53 = (uint8_t *)swift_slowAlloc(12, -1);
      v54 = swift_slowAlloc(32, -1);
      v63[0] = v54;
      *(_DWORD *)v53 = 136315138;
      v65 = v25;
      swift_errorRetain(v25);
      v55 = String.init<A>(describing:)(&v65, v26);
      v57 = v56;
      v65 = sub_1001DEF4C(v55, v56, v63);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, &v66);
      swift_bridgeObjectRelease(v57);
      swift_errorRelease(v25);
      swift_errorRelease(v25);
      _os_log_impl((void *)&_mh_execute_header, v51, v52, "Error fetching invitation - %s", v53, 0xCu);
      swift_arrayDestroy(v54, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v54, -1, -1);
      swift_slowDealloc(v53, -1, -1);
    }
    else
    {
      swift_errorRelease(v25);
      swift_errorRelease(v25);
    }

    *v21 = v25;
    swift_storeEnumTagMultiPayload(v21, v62, 1);
    swift_errorRetain(v25);
    ((void (*)(uint64_t *))a4)(v21);
    swift_errorRelease(v25);
    sub_100004934((uint64_t)v21, (uint64_t *)&unk_10028FA70);
  }
  else
  {
    sub_10003B730((uint64_t)v24, (uint64_t)v16, type metadata accessor for InheritanceInvitationRecord);
    if (qword_10028ADD0 != -1)
      swift_once(&qword_10028ADD0, sub_100046D50);
    v40 = type metadata accessor for Logger(0);
    sub_100005288(v40, (uint64_t)qword_1002A89F0);
    v41 = sub_100027FE8((uint64_t)v16, (uint64_t)v13, type metadata accessor for InheritanceInvitationRecord);
    v42 = Logger.logObject.getter(v41);
    v43 = static os_log_type_t.debug.getter(v42);
    if (os_log_type_enabled(v42, v43))
    {
      v44 = (uint8_t *)swift_slowAlloc(12, -1);
      v45 = swift_slowAlloc(32, -1);
      v63[0] = v45;
      v60 = a4;
      v61 = v21;
      *(_DWORD *)v44 = 136315138;
      v46 = sub_10020082C();
      v48 = v47;
      v65 = sub_1001DEF4C(v46, v47, v63);
      a4 = v60;
      v21 = v61;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, &v66);
      swift_bridgeObjectRelease(v48);
      sub_100028388((uint64_t)v13, type metadata accessor for InheritanceInvitationRecord);
      _os_log_impl((void *)&_mh_execute_header, v42, v43, "Found existing invitation - %s", v44, 0xCu);
      swift_arrayDestroy(v45, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v45, -1, -1);
      swift_slowDealloc(v44, -1, -1);
    }
    else
    {
      sub_100028388((uint64_t)v13, type metadata accessor for InheritanceInvitationRecord);
    }

    sub_100027FE8((uint64_t)v16, (uint64_t)v21, type metadata accessor for InheritanceInvitationRecord);
    swift_storeEnumTagMultiPayload(v21, v62, 0);
    ((void (*)(uint64_t *))a4)(v21);
    sub_100004934((uint64_t)v21, (uint64_t *)&unk_10028FA70);
    sub_100028388((uint64_t)v16, type metadata accessor for InheritanceInvitationRecord);
  }
}

void sub_1000B3B24(void *a1, NSObject *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  NSString v18;
  id v19;
  id v20;
  id v21;
  NSString v22;
  uint64_t v23;
  uint64_t v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  _QWORD *v28;
  id v29;
  os_log_t oslog;
  NSObject *osloga;
  void *v32;

  v4 = v3;
  v8 = objc_msgSend(a1, "handle");
  if (v8)
  {
    v9 = v8;
    oslog = a2;
    v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
    v12 = v11;

    v13 = type metadata accessor for ContactsHelper(0);
    v14 = swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
    v15 = sub_1000080B4((uint64_t *)&unk_100291CA0);
    Dependency.init(dependencyId:config:)(0, 0, 0, v15);
    v16 = sub_1000080B4((uint64_t *)&unk_10028F080);
    Dependency.wrappedValue.getter(&v32, v16);
    v17 = v32;
    v18 = String._bridgeToObjectiveC()();
    v19 = objc_msgSend(v17, "contactForHandle:", v18);

    swift_unknownObjectRelease(v17);
    if (v19)
    {
      v20 = objc_allocWithZone((Class)AALocalContactInfo);
      swift_bridgeObjectRetain(v12);
      v21 = v19;
      v22 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v12);
      v19 = objc_msgSend(v20, "initWithHandle:contact:", v22, v21);
      swift_release(v14);

    }
    else
    {
      swift_release(v14);
    }
    v27 = swift_allocObject(&unk_100264D28, 24, 7);
    swift_unknownObjectWeakInit(v27 + 16, v4);
    v28 = (_QWORD *)swift_allocObject(&unk_100265020, 72, 7);
    v28[2] = oslog;
    v28[3] = a3;
    v28[4] = a1;
    v28[5] = v10;
    v28[6] = v12;
    v28[7] = v19;
    v28[8] = v27;
    v29 = v19;
    swift_retain(v27);
    swift_retain(a3);
    swift_unknownObjectRetain(a1);
    sub_1000D0C00((uint64_t)sub_1000B97E4, (uint64_t)v28);

    swift_release(v27);
    swift_release(v28);
  }
  else
  {
    if (qword_10028ADD0 != -1)
      swift_once(&qword_10028ADD0, sub_100046D50);
    v23 = type metadata accessor for Logger(0);
    v24 = sub_100005288(v23, (uint64_t)qword_1002A89F0);
    osloga = Logger.logObject.getter(v24);
    v25 = static os_log_type_t.error.getter(osloga);
    if (os_log_type_enabled(osloga, v25))
    {
      v26 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, osloga, v25, "Unable to find the handle for the beneficiary.", v26, 2u);
      swift_slowDealloc(v26, -1, -1);
    }

  }
}

uint64_t sub_1000B3E18(uint64_t a1, char a2, void (*a3)(_QWORD *), uint64_t a4, void *a5, uint64_t a6, uint64_t a7, void *a8, uint64_t a9)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  id v34;
  id v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  id v42;
  void *v43;
  void *v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  NSObject *v56;
  os_log_type_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t Strong;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(_QWORD);
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79[5];
  uint64_t v80;
  uint64_t v81;

  v76 = a7;
  v73 = a6;
  v15 = type metadata accessor for UUID(0);
  v74 = *(_QWORD *)(v15 - 8);
  v75 = v15;
  __chkstk_darwin(v15, v16);
  v18 = (char *)&v68 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = (int *)type metadata accessor for InheritanceInvitationRecord(0);
  v21 = __chkstk_darwin(v19, v20);
  v77 = (uint64_t)&v68 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __chkstk_darwin(v21, v23);
  v26 = (char *)&v68 - v25;
  __chkstk_darwin(v24, v27);
  v78 = (uint64_t)&v68 - v28;
  v29 = sub_1000080B4((uint64_t *)&unk_10028FA70);
  __chkstk_darwin(v29, v29);
  v32 = (v31 + 15) & 0xFFFFFFFFFFFFFFF0;
  v33 = (uint64_t *)((char *)&v68 - v32);
  if ((a2 & 1) != 0)
  {
    *v33 = a1;
    swift_storeEnumTagMultiPayload((char *)&v68 - v32, v30, 1);
    swift_errorRetain(a1);
    a3(v33);
    return sub_100004934((uint64_t)v33, (uint64_t *)&unk_10028FA70);
  }
  else
  {
    v70 = (void (*)(_QWORD))a3;
    v71 = a4;
    v72 = a1 & 1;
    v34 = objc_msgSend(a5, "beneficiaryID");
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v34);

    if (a8)
    {
      v35 = objc_msgSend(a8, "firstName");
      if (v35)
      {
        v36 = v35;
        v37 = static String._unconditionallyBridgeFromObjectiveC(_:)(v35);
        v39 = v38;

      }
      else
      {
        v37 = 0;
        v39 = 0;
      }
      v42 = objc_msgSend(a8, "lastName");
      if (v42)
      {
        v43 = v42;
        v68 = static String._unconditionallyBridgeFromObjectiveC(_:)(v42);
        a8 = v44;

      }
      else
      {
        v68 = 0;
        a8 = 0;
      }
      v41 = v39;
    }
    else
    {
      v68 = 0;
      v37 = 0;
      v41 = 0;
    }
    v69 = a9 + 16;
    v45 = (uint64_t *)&v26[v19[6]];
    v46 = (uint64_t *)&v26[v19[7]];
    v48 = v74;
    v47 = v75;
    (*(void (**)(char *, char *, uint64_t))(v74 + 16))(v26, v18, v75);
    v49 = &v26[v19[5]];
    v50 = v76;
    *(_QWORD *)v49 = v73;
    *((_QWORD *)v49 + 1) = v50;
    *v45 = v37;
    v45[1] = v41;
    *v46 = v68;
    v46[1] = (uint64_t)a8;
    *(_QWORD *)&v26[v19[8]] = 1;
    swift_bridgeObjectRetain(v50);
    UUID.init()(v51);
    (*(void (**)(char *, uint64_t))(v48 + 8))(v18, v47);
    *(_OWORD *)&v26[v19[10]] = xmmword_100218E90;
    v26[v19[11]] = v72;
    v52 = v78;
    sub_10003B730((uint64_t)v26, v78, type metadata accessor for InheritanceInvitationRecord);
    if (qword_10028ADD0 != -1)
      swift_once(&qword_10028ADD0, sub_100046D50);
    v53 = type metadata accessor for Logger(0);
    sub_100005288(v53, (uint64_t)qword_1002A89F0);
    v54 = v77;
    v55 = sub_100027FE8(v52, v77, type metadata accessor for InheritanceInvitationRecord);
    v56 = Logger.logObject.getter(v55);
    v57 = static os_log_type_t.debug.getter(v56);
    if (os_log_type_enabled(v56, v57))
    {
      v58 = swift_slowAlloc(18, -1);
      v59 = swift_slowAlloc(32, -1);
      v79[0] = v59;
      *(_DWORD *)v58 = 136315394;
      v60 = sub_10020082C();
      v62 = v61;
      v80 = sub_1001DEF4C(v60, v61, v79);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v80, &v81);
      swift_bridgeObjectRelease(v62);
      sub_100028388(v54, type metadata accessor for InheritanceInvitationRecord);
      *(_WORD *)(v58 + 12) = 1024;
      LODWORD(v80) = v72;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v80, (char *)&v80 + 4);
      _os_log_impl((void *)&_mh_execute_header, v56, v57, "New invitation created - %s in manatee? %{BOOL}d", (uint8_t *)v58, 0x12u);
      swift_arrayDestroy(v59, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v59, -1, -1);
      swift_slowDealloc(v58, -1, -1);
    }
    else
    {
      sub_100028388(v54, type metadata accessor for InheritanceInvitationRecord);
    }

    v64 = (uint64_t)v70;
    v63 = v71;
    v65 = v69;
    swift_beginAccess(v69, &v80, 0, 0);
    Strong = swift_unknownObjectWeakLoadStrong(v65);
    if (Strong)
    {
      v67 = (void *)Strong;
      sub_100006CA4(Strong + OBJC_IVAR____TtC13appleaccountd25InheritanceRequestManager_storageController, (uint64_t)v79);

      sub_10000732C(v79, v79[3]);
      sub_1000C993C(v52, v64, v63);
      sub_100028388(v52, type metadata accessor for InheritanceInvitationRecord);
      return sub_100006F58(v79);
    }
    else
    {
      return sub_100028388(v52, type metadata accessor for InheritanceInvitationRecord);
    }
  }
}

uint64_t sub_1000B4334(uint64_t a1, char a2, uint64_t a3, void (*a4)(_QWORD, _QWORD), uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  Class isa;
  NSString v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v31[2];
  void (*v32)(_QWORD, _QWORD);
  _QWORD *v33;

  v10 = type metadata accessor for BenefactorInfoRecord(0);
  v11 = *(_QWORD *)(v10 - 8);
  v13 = __chkstk_darwin(v10, v12);
  v15 = (char *)v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13, v16);
  v18 = (char *)v31 - v17;
  if ((a2 & 1) != 0)
  {
    v20 = *(_QWORD *)(a3 + 16);
    v19 = _swiftEmptyArrayStorage;
    if (v20)
    {
      v31[1] = a5;
      v32 = a4;
      v33 = _swiftEmptyArrayStorage;
      specialized ContiguousArray.reserveCapacity(_:)(v20);
      v21 = a3 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
      v22 = *(_QWORD *)(v11 + 72);
      do
      {
        sub_100027FE8(v21, (uint64_t)v18, type metadata accessor for BenefactorInfoRecord);
        sub_100027FE8((uint64_t)v18, (uint64_t)v15, type metadata accessor for BenefactorInfoRecord);
        v23 = objc_allocWithZone((Class)AABenefactorInfo);
        isa = UUID._bridgeToObjectiveC()().super.isa;
        v25 = String._bridgeToObjectiveC()();
        v26 = objc_msgSend(v23, "initWithBeneficiaryID:handle:status:", isa, v25, *(_QWORD *)&v15[*(int *)(v10 + 24)]);

        sub_100028388((uint64_t)v15, type metadata accessor for BenefactorInfoRecord);
        v27 = sub_100028388((uint64_t)v18, type metadata accessor for BenefactorInfoRecord);
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v27);
        v28 = v33[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v28);
        v29 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v28, v26);
        specialized ContiguousArray._endMutation()(v29);
        v21 += v22;
        --v20;
      }
      while (v20);
      a4 = v32;
      v19 = v33;
    }
  }
  else
  {
    sub_1000057BC(a1, 0);
    v19 = sub_1000B687C(a3, a1);
    sub_1000057B0(a1, 0);
  }
  a4(v19, 0);
  return swift_bridgeObjectRelease(v19);
}

void sub_1000B453C(uint8_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  id v16;
  Class isa;
  NSString v18;
  id v19;
  char **v20;
  id v21;
  unint64_t v22;
  char v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  void (*v27)(char *, uint64_t);
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, uint8_t *, uint64_t);
  uint64_t v34;
  id v35;
  void (*v36)(char *, uint64_t);
  uint64_t v37;
  uint64_t v38;
  id v39;
  NSObject *v40;
  os_log_type_t v41;
  uint64_t v42;
  uint8_t *v43;
  id v44;
  void (*v45)(char *, uint64_t);
  char *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  os_log_type_t v51;
  uint8_t *v52;
  uint64_t v53;
  _QWORD v54[2];
  uint8_t *v55;
  id v56;
  char *v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60[6];
  __int128 v61;
  __int128 v62;
  __int128 v63;
  _OWORD v64[4];
  uint64_t v65;
  uint64_t v66;

  v59 = a3;
  v58 = type metadata accessor for UUID(0);
  v5 = *(_QWORD *)(v58 - 8);
  v7 = __chkstk_darwin(v58, v6);
  v57 = (char *)v54 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7, v9);
  v11 = (char *)v54 - v10;
  v12 = type metadata accessor for BenefactorInfoRecord(0);
  __chkstk_darwin(v12, v13);
  v15 = (char *)v54 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = a1;
  sub_100027FE8((uint64_t)a1, (uint64_t)v15, type metadata accessor for BenefactorInfoRecord);
  v16 = objc_allocWithZone((Class)AABenefactorInfo);
  isa = UUID._bridgeToObjectiveC()().super.isa;
  v18 = String._bridgeToObjectiveC()();
  v19 = objc_msgSend(v16, "initWithBeneficiaryID:handle:status:", isa, v18, *(_QWORD *)&v15[*(int *)(v12 + 24)]);

  sub_100028388((uint64_t)v15, type metadata accessor for BenefactorInfoRecord);
  v20 = &off_100287000;
  v21 = objc_msgSend(v19, "beneficiaryID");
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v21);

  if (*(_QWORD *)(a2 + 16) && (v22 = sub_10010AA48((uint64_t)v11), (v23 & 1) != 0))
  {
    v56 = v19;
    v24 = (uint64_t *)(*(_QWORD *)(a2 + 56) + 16 * v22);
    v25 = *v24;
    v26 = v24[1];
    sub_10000F450(*v24, v26);
    v27 = *(void (**)(char *, uint64_t))(v5 + 8);
    v28 = v58;
    v27(v11, v58);
    sub_10000F450(v25, v26);
    sub_10000EE10(v25, v26, v60);
    v29 = v60[0];
    v30 = v60[1];
    v31 = v60[3];
    v32 = v60[5];
    sub_100013F20((uint64_t)v60, (uint64_t)&v61);
    if (*((_QWORD *)&v62 + 1))
    {
      v64[0] = v61;
      v64[1] = v62;
      v64[2] = v63;
      sub_1000067D4(0, (unint64_t *)&qword_10028BBF8, AKInheritanceAccessKey_ptr);
      v33 = *(void (**)(char *, uint8_t *, uint64_t))(v5 + 16);
      v34 = (uint64_t)v57;
      v33(v57, v55, v28);
      sub_10000F450(v29, v30);
      swift_bridgeObjectRetain(v31);
      swift_bridgeObjectRetain(v32);
      v35 = sub_10000E54C(v34, (uint64_t *)v64);
      v19 = v56;
      objc_msgSend(v56, "setAccessKey:", v35);
      sub_10000F494(v25, v26);
      sub_100013FA4((uint64_t)v60);

      goto LABEL_11;
    }
    sub_10000F494(v25, v26);
    v19 = v56;
    v37 = v28;
    v36 = v27;
    v20 = &off_100287000;
  }
  else
  {
    v36 = *(void (**)(char *, uint64_t))(v5 + 8);
    v37 = v58;
    v36(v11, v58);
  }
  if (qword_10028ADD0 != -1)
    swift_once(&qword_10028ADD0, sub_100046D50);
  v38 = type metadata accessor for Logger(0);
  sub_100005288(v38, (uint64_t)qword_1002A89F0);
  v39 = v19;
  v40 = Logger.logObject.getter(v39);
  v41 = static os_log_type_t.error.getter(v40);
  if (os_log_type_enabled(v40, v41))
  {
    v42 = swift_slowAlloc(12, -1);
    v56 = v19;
    v43 = (uint8_t *)v42;
    v58 = swift_slowAlloc(32, -1);
    *(_QWORD *)&v64[0] = v58;
    v55 = v43;
    *(_DWORD *)v43 = 136315138;
    v54[1] = v43 + 4;
    v44 = objc_msgSend(v39, v20[263]);
    v45 = v36;
    v46 = v57;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v44);

    v47 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v48 = dispatch thunk of CustomStringConvertible.description.getter(v37, v47);
    v50 = v49;
    v45(v46, v37);
    v65 = sub_1001DEF4C(v48, v50, (uint64_t *)v64);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, &v66);

    swift_bridgeObjectRelease(v50);
    v51 = v41;
    v52 = v55;
    _os_log_impl((void *)&_mh_execute_header, v40, v51, "No InheritanceAccessKeyRecord for beneficiaryID - %s.", v55, 0xCu);
    v53 = v58;
    swift_arrayDestroy(v58, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v53, -1, -1);
    v19 = v56;
    swift_slowDealloc(v52, -1, -1);

  }
  else
  {

  }
LABEL_11:
  *v59 = v19;
}

uint64_t sub_1000B4A4C(uint64_t a1, uint64_t a2)
{
  char *v2;
  char *v3;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  _QWORD *v11;
  char *v12;

  v3 = v2;
  if (qword_10028ADD0 != -1)
    swift_once(&qword_10028ADD0, sub_100046D50);
  v6 = type metadata accessor for Logger(0);
  v7 = sub_100005288(v6, (uint64_t)qword_1002A89F0);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Fetching AccessKey info from Shared BeneficiaryInfoRecords", v10, 2u);
    swift_slowDealloc(v10, -1, -1);
  }

  sub_10000732C(&v3[OBJC_IVAR____TtC13appleaccountd25InheritanceRequestManager_storageController], *(_QWORD *)&v3[OBJC_IVAR____TtC13appleaccountd25InheritanceRequestManager_storageController + 24]);
  v11 = (_QWORD *)swift_allocObject(&unk_100265138, 40, 7);
  v11[2] = a1;
  v11[3] = a2;
  v11[4] = v3;
  swift_retain(a2);
  v12 = v3;
  sub_1000CA31C((uint64_t)sub_1000B9A00, (uint64_t)v11);
  return swift_release(v11);
}

uint64_t sub_1000B4B88(uint64_t isUniquelyReferenced_nonNull_native, char a2, void (*a3)(__n128), uint64_t a4, void *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  id v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  char v27;
  unint64_t v28;
  uint64_t v29;
  _BOOL8 v30;
  uint64_t v31;
  char v32;
  unint64_t v33;
  char v34;
  uint64_t *v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  uint8_t *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t result;
  __n128 v48;
  _QWORD v49[2];
  void (*v50)(__n128);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(char *, void (*)(__n128), uint64_t);
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;

  v10 = type metadata accessor for UUID(0);
  v55 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10, v11);
  v14 = (char *)v49 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 1) != 0)
  {
    swift_errorRetain(isUniquelyReferenced_nonNull_native);
    if (qword_10028ADD0 != -1)
LABEL_28:
      swift_once(&qword_10028ADD0, sub_100046D50);
    v39 = type metadata accessor for Logger(0);
    sub_100005288(v39, (uint64_t)qword_1002A89F0);
    v40 = swift_errorRetain(isUniquelyReferenced_nonNull_native);
    v41 = Logger.logObject.getter(v40);
    v42 = static os_log_type_t.error.getter(v41);
    if (os_log_type_enabled(v41, v42))
    {
      v43 = (uint8_t *)swift_slowAlloc(12, -1);
      v44 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v43 = 138412290;
      v45 = _convertErrorToNSError(_:)(isUniquelyReferenced_nonNull_native);
      v56 = (_QWORD *)v45;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, &v57);
      *v44 = v45;
      sub_1000057B0(isUniquelyReferenced_nonNull_native, 1);
      _os_log_impl((void *)&_mh_execute_header, v41, v42, "Error fetching beneficiaries from storage: %@", v43, 0xCu);
      v46 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v44, 1, v46);
      swift_slowDealloc(v44, -1, -1);
      swift_slowDealloc(v43, -1, -1);
    }
    else
    {
      sub_1000057B0(isUniquelyReferenced_nonNull_native, 1);
    }

    swift_errorRetain(isUniquelyReferenced_nonNull_native);
    ((void (*)(uint64_t, uint64_t))a3)(isUniquelyReferenced_nonNull_native, 1);
    sub_1000057B0(isUniquelyReferenced_nonNull_native, 1);
    return sub_1000057B0(isUniquelyReferenced_nonNull_native, 1);
  }
  else
  {
    v53 = v12;
    swift_bridgeObjectRetain(isUniquelyReferenced_nonNull_native);
    v15 = (_QWORD *)sub_10001638C((uint64_t)_swiftEmptyArrayStorage);
    v16 = a5;
    v17 = sub_1000B654C(isUniquelyReferenced_nonNull_native, (uint64_t)v16);

    sub_1000057B0(isUniquelyReferenced_nonNull_native, 0);
    v18 = v17[2];
    if (v18)
    {
      v49[1] = a4;
      v50 = a3;
      v19 = type metadata accessor for BeneficiaryInfoRecord(0);
      v20 = *(_QWORD *)(v19 - 8);
      v21 = *(unsigned __int8 *)(v20 + 80);
      v49[0] = v17;
      a3 = (void (*)(__n128))((char *)v17 + ((v21 + 32) & ~v21));
      v51 = *(_QWORD *)(v20 + 72);
      v52 = v19;
      v54 = *(void (**)(char *, void (*)(__n128), uint64_t))(v55 + 16);
      v54(v14, a3, v53);
      while (1)
      {
        v24 = (uint64_t *)((char *)a3 + *(int *)(v52 + 28));
        v25 = *v24;
        v26 = v24[1];
        sub_10000F450(*v24, v26);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v15);
        v56 = v15;
        v28 = sub_10010AA48((uint64_t)v14);
        v29 = v15[2];
        v30 = (v27 & 1) == 0;
        v31 = v29 + v30;
        if (__OFADD__(v29, v30))
        {
          __break(1u);
LABEL_27:
          __break(1u);
          goto LABEL_28;
        }
        v32 = v27;
        if (v15[3] >= v31)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) != 0)
          {
            v15 = v56;
            if ((v27 & 1) != 0)
              goto LABEL_4;
          }
          else
          {
            sub_100020B28();
            v15 = v56;
            if ((v32 & 1) != 0)
              goto LABEL_4;
          }
        }
        else
        {
          sub_10001DFD0(v31, isUniquelyReferenced_nonNull_native);
          v33 = sub_10010AA48((uint64_t)v14);
          if ((v32 & 1) != (v34 & 1))
          {
            result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v53);
            __break(1u);
            return result;
          }
          v28 = v33;
          v15 = v56;
          if ((v32 & 1) != 0)
          {
LABEL_4:
            v22 = v15[7] + 16 * v28;
            sub_10000F494(*(_QWORD *)v22, *(_QWORD *)(v22 + 8));
            *(_QWORD *)v22 = v25;
            *(_QWORD *)(v22 + 8) = v26;
            v23 = v53;
            goto LABEL_5;
          }
        }
        v15[(v28 >> 6) + 8] |= 1 << v28;
        v23 = v53;
        v54((char *)(v15[6] + *(_QWORD *)(v55 + 72) * v28), (void (*)(__n128))v14, v53);
        v35 = (uint64_t *)(v15[7] + 16 * v28);
        *v35 = v25;
        v35[1] = v26;
        v36 = v15[2];
        v37 = __OFADD__(v36, 1);
        v38 = v36 + 1;
        if (v37)
          goto LABEL_27;
        v15[2] = v38;
LABEL_5:
        a3 = (void (*)(__n128))((char *)a3 + v51);
        swift_bridgeObjectRelease(0x8000000000000000);
        (*(void (**)(char *, uint64_t))(v55 + 8))(v14, v23);
        if (!--v18)
        {
          swift_bridgeObjectRelease(v49[0]);
          a3 = v50;
          goto LABEL_25;
        }
        v54(v14, a3, v23);
      }
    }
    swift_bridgeObjectRelease(v17);
LABEL_25:
    v48 = swift_bridgeObjectRetain(v15);
    a3(v48);
    return swift_bridgeObjectRelease_n(v15, 2);
  }
}

void sub_1000B4FE8(uint64_t a1, char a2, uint64_t a3, void (*a4)(uint64_t))
{
  char v6;
  void *v7;

  if ((a2 & 1) != 0)
    v6 = 0;
  else
    v6 = 3;
  if (a1)
    v7 = (void *)_convertErrorToNSError(_:)(a1);
  else
    v7 = 0;
  sub_10016E328(a1 == 0, (uint64_t)v7, v6);

  if (a4)
    a4(a1);
}

uint64_t sub_1000B5070(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  void *v39;
  id v40;
  void *v41;
  id v42;
  id v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  uint64_t v49;
  uint8_t *v50;
  _OWORD *v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  NSObject *v65;
  os_log_type_t v66;
  uint64_t v67;
  uint8_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t *v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  id v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  id v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _OWORD v93[7];
  uint64_t v94;
  uint64_t v95;
  uint64_t v96[4];
  _QWORD v97[4];

  v91 = a8;
  v87 = a7;
  v90 = a6;
  v89 = a5;
  v88 = a4;
  v92 = a3;
  v11 = type metadata accessor for UUID(0);
  v12 = *(_QWORD *)(v11 - 8);
  v14 = __chkstk_darwin(v11, v13);
  v16 = (char *)&v83 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14, v17);
  v19 = (char *)&v83 - v18;
  v20 = sub_1000080B4((uint64_t *)&unk_10028FA40);
  __chkstk_darwin(v20, v21);
  v23 = (uint64_t *)((char *)&v83 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100024A20(a1, (uint64_t)v23, (uint64_t *)&unk_10028FA40);
  if (swift_getEnumCaseMultiPayload(v23, v20) == 1)
  {
    v24 = *v23;
    if (qword_10028ADD0 != -1)
      swift_once(&qword_10028ADD0, sub_100046D50);
    v25 = type metadata accessor for Logger(0);
    sub_100005288(v25, (uint64_t)qword_1002A89F0);
    v26 = swift_errorRetain(v24);
    v27 = Logger.logObject.getter(v26);
    v28 = static os_log_type_t.error.getter(v27);
    if (os_log_type_enabled(v27, v28))
    {
      v29 = (uint8_t *)swift_slowAlloc(12, -1);
      v30 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v29 = 138412290;
      v31 = _convertErrorToNSError(_:)(v24);
      *(_QWORD *)&v93[0] = v31;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v93, (char *)v93 + 8);
      *v30 = v31;
      swift_errorRelease(v24);
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "Error responding to the invitation: %@", v29, 0xCu);
      v32 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v30, 1, v32);
      swift_slowDealloc(v30, -1, -1);
      swift_slowDealloc(v29, -1, -1);
    }
    else
    {
      swift_errorRelease(v24);
    }

    swift_errorRetain(v24);
    ((void (*)(uint64_t))v91)(v24);
    swift_errorRelease(v24);
    return swift_errorRelease(v24);
  }
  else
  {
    v33 = v12;
    v85 = type metadata accessor for BenefactorInfoRecord(0);
    v34 = a2;
    v35 = swift_allocBox(v85);
    v84 = v36;
    sub_10003B730((uint64_t)v23, v36, type metadata accessor for BenefactorInfoRecord);
    v86 = v34;
    sub_100006CA4(v34, (uint64_t)v97);
    v37 = sub_10000732C(v97, v97[3]);
    v38 = *v37;
    v39 = *(void **)(*v37 + 16);
    v40 = objc_msgSend(v39, "aa_primaryAppleAccount");
    if (v40
      && (v41 = v40,
          v42 = objc_msgSend(v40, "aa_altDSID"),
          v43 = objc_msgSend(v39, "aa_authKitAccountForAltDSID:", v42),
          v41,
          v42,
          v43)
      && (v44 = objc_msgSend(*(id *)(v38 + 24), "canBeBeneficiaryForAccount:", v43), v43,
                                                                                                   v44))
    {
      if (qword_10028ADD0 != -1)
        swift_once(&qword_10028ADD0, sub_100046D50);
      v45 = type metadata accessor for Logger(0);
      v46 = sub_100005288(v45, (uint64_t)qword_1002A89F0);
      v47 = Logger.logObject.getter(v46);
      v48 = static os_log_type_t.info.getter();
      v49 = v33;
      if (os_log_type_enabled(v47, v48))
      {
        v50 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v50 = 0;
        _os_log_impl((void *)&_mh_execute_header, v47, v48, "Notifying owner of invitation response...", v50, 2u);
        swift_slowDealloc(v50, -1, -1);
      }

      v51 = (_OWORD *)v86;
      sub_100006CA4(v86 + 80, (uint64_t)&v95);
      sub_10000732C(&v95, v96[2]);
      v52 = (uint64_t *)(v84 + *(int *)(v85 + 20));
      v53 = v52[1];
      v92 = *v52;
      (*(void (**)(char *))(v33 + 16))(v19);
      sub_1000B611C(v51, v93);
      v54 = swift_allocObject(&unk_100264C38, 168, 7);
      v55 = v91;
      *(_QWORD *)(v54 + 16) = v35;
      *(_QWORD *)(v54 + 24) = v55;
      *(_QWORD *)(v54 + 32) = a9;
      v56 = v35;
      v57 = v87 & 1;
      *(_BYTE *)(v54 + 40) = v87 & 1;
      v58 = v93[5];
      *(_OWORD *)(v54 + 112) = v93[4];
      *(_OWORD *)(v54 + 128) = v58;
      *(_OWORD *)(v54 + 144) = v93[6];
      *(_QWORD *)(v54 + 160) = v94;
      v59 = v93[1];
      *(_OWORD *)(v54 + 48) = v93[0];
      *(_OWORD *)(v54 + 64) = v59;
      v60 = v93[3];
      *(_OWORD *)(v54 + 80) = v93[2];
      *(_OWORD *)(v54 + 96) = v60;
      swift_bridgeObjectRetain(v53);
      swift_retain(v56);
      swift_retain(a9);
      sub_1001508D4(v92, v53, (uint64_t)v19, v57, sub_1000B936C, v54);
      swift_bridgeObjectRelease(v53);
      swift_release(v54);
      (*(void (**)(char *, uint64_t))(v49 + 8))(v19, v11);
      sub_100006F58(&v95);
      sub_100006F58(v97);
      v61 = v56;
    }
    else
    {
      if (qword_10028ADD0 != -1)
        swift_once(&qword_10028ADD0, sub_100046D50);
      v62 = type metadata accessor for Logger(0);
      sub_100005288(v62, (uint64_t)qword_1002A89F0);
      v63 = v33;
      v64 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v33 + 16))(v16, v92, v11);
      v65 = Logger.logObject.getter(v64);
      v66 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v65, v66))
      {
        v67 = swift_slowAlloc(12, -1);
        v91 = v63;
        v68 = (uint8_t *)v67;
        v69 = swift_slowAlloc(32, -1);
        *(_QWORD *)&v93[0] = v69;
        *(_DWORD *)v68 = 136315138;
        v70 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v71 = dispatch thunk of CustomStringConvertible.description.getter(v11, v70);
        v73 = v72;
        v95 = sub_1001DEF4C(v71, v72, (uint64_t *)v93);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v95, v96);
        swift_bridgeObjectRelease(v73);
        (*(void (**)(char *, uint64_t))(v91 + 8))(v16, v11);
        _os_log_impl((void *)&_mh_execute_header, v65, v66, "User is not eligible to be a beneficiary, replying rejected for beneficiaryID: %s", v68, 0xCu);
        swift_arrayDestroy(v69, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v69, -1, -1);
        swift_slowDealloc(v68, -1, -1);
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v63 + 8))(v16, v11);
      }

      v75 = sub_10000732C((_QWORD *)(v86 + 80), *(_QWORD *)(v86 + 104));
      v76 = (uint64_t *)(v84 + *(int *)(v85 + 20));
      v77 = *v76;
      v78 = v76[1];
      v79 = *v75;
      v80 = v88;
      v81 = v89;
      v82 = v90;
      sub_10000E1C0(v89, v90);
      swift_bridgeObjectRetain(v78);
      sub_1001538A4(v77, v78, v92, 0, v79, v80, v81, v82);
      sub_10000D98C(v81, v82);
      swift_bridgeObjectRelease(v78);

      sub_100006F58(v97);
      v61 = v35;
    }
    return swift_release(v61);
  }
}

uint64_t sub_1000B5878(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4, char a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  Swift::String v16;
  unint64_t v17;
  Swift::String v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  Swift::String v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint8_t *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v46;
  void (*v47)(uint64_t);
  uint64_t v48;
  _QWORD v49[3];
  _BYTE v50[8];
  uint64_t v51;
  uint64_t v52;
  _QWORD v53[5];
  uint64_t v54;
  unint64_t v55;

  v47 = a3;
  v48 = a4;
  v10 = type metadata accessor for BenefactorInfoRecord(0);
  __chkstk_darwin(v10, v11);
  v13 = (char *)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = swift_projectBox(a2);
  v15 = v14;
  if (a1)
  {
    swift_beginAccess(v14, v53, 0, 0);
    v16 = *(Swift::String *)(v15 + *(int *)(v10 + 20));
    v54 = 0xD000000000000028;
    v55 = 0x800000010020BB90;
    String.append(_:)(v16);
    v17 = v55;
    swift_errorRetain(a1);
    swift_bridgeObjectRetain(v17);
    v18._countAndFlagsBits = 58;
    v18._object = (void *)0xE100000000000000;
    String.append(_:)(v18);
    swift_bridgeObjectRelease(v17);
    v19 = v54;
    v20 = v55;
    swift_getErrorValue(a1, v50, v49);
    v21 = Error.localizedDescription.getter(v49[1], v49[2]);
    v23 = v22;
    v54 = v19;
    v55 = v20;
    swift_bridgeObjectRetain(v20);
    v24._countAndFlagsBits = v21;
    v24._object = v23;
    String.append(_:)(v24);
    swift_bridgeObjectRelease(v20);
    swift_bridgeObjectRelease(v23);
    v26 = v54;
    v25 = v55;
    if (qword_10028ADD0 != -1)
      swift_once(&qword_10028ADD0, sub_100046D50);
    v27 = type metadata accessor for Logger(0);
    sub_100005288(v27, (uint64_t)qword_1002A89F0);
    swift_bridgeObjectRetain(v25);
    v29 = Logger.logObject.getter(v28);
    v30 = static os_log_type_t.error.getter(v29);
    if (os_log_type_enabled(v29, v30))
    {
      v31 = (uint8_t *)swift_slowAlloc(12, -1);
      v32 = swift_slowAlloc(32, -1);
      v54 = v32;
      *(_DWORD *)v31 = 136315138;
      swift_bridgeObjectRetain(v25);
      v51 = sub_1001DEF4C(v26, v25, &v54);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, &v52);
      swift_bridgeObjectRelease_n(v25, 3);
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "%s", v31, 0xCu);
      swift_arrayDestroy(v32, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v32, -1, -1);
      swift_slowDealloc(v31, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v25, 2);
    }
    swift_errorRetain(a1);
    v47(a1);
    swift_errorRelease(a1);
    return swift_errorRelease(a1);
  }
  else
  {
    if (qword_10028ADD0 != -1)
      swift_once(&qword_10028ADD0, sub_100046D50);
    v33 = type metadata accessor for Logger(0);
    v34 = sub_100005288(v33, (uint64_t)qword_1002A89F0);
    v35 = Logger.logObject.getter(v34);
    v36 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v35, v36))
    {
      v37 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v37 = 0;
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "Notified owner of invitation response.", v37, 2u);
      swift_slowDealloc(v37, -1, -1);
    }

    v39 = Logger.logObject.getter(v38);
    v40 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v39, v40))
    {
      v41 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v41 = 0;
      _os_log_impl((void *)&_mh_execute_header, v39, v40, "Updating status of Benefactor...", v41, 2u);
      swift_slowDealloc(v41, -1, -1);
    }

    if ((a5 & 1) != 0)
      v42 = 2;
    else
      v42 = 4;
    swift_beginAccess(v15, &v54, 1, 0);
    *(_QWORD *)(v15 + *(int *)(v10 + 24)) = v42;
    sub_100006CA4(a6 + 40, (uint64_t)v53);
    sub_10000732C(v53, v53[3]);
    swift_beginAccess(v15, &v51, 0, 0);
    sub_100027FE8(v15, (uint64_t)v13, type metadata accessor for BenefactorInfoRecord);
    v43 = (_QWORD *)swift_allocObject(&unk_100264C60, 40, 7);
    v43[2] = v47;
    v44 = v48;
    v43[3] = v48;
    v43[4] = a2;
    swift_retain(v44);
    swift_retain(a2);
    sub_1000CD500((uint64_t)v13, (uint64_t)sub_1000B9384, (uint64_t)v43);
    swift_release(v43);
    sub_100028388((uint64_t)v13, type metadata accessor for BenefactorInfoRecord);
    return sub_100006F58(v53);
  }
}

uint64_t sub_1000B5D50(uint64_t a1, void (*a2)(uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  void (*v27)(uint64_t);
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD v33[2];
  uint64_t v34;
  uint64_t v35[3];

  v8 = sub_1000080B4((uint64_t *)&unk_10028FA40);
  __chkstk_darwin(v8, v9);
  v11 = (_QWORD *)((char *)v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100024A20(a1, (uint64_t)v11, (uint64_t *)&unk_10028FA40);
  if (swift_getEnumCaseMultiPayload(v11, v8) == 1)
  {
    v12 = *v11;
    if (qword_10028ADD0 != -1)
      swift_once(&qword_10028ADD0, sub_100046D50);
    v13 = type metadata accessor for Logger(0);
    sub_100005288(v13, (uint64_t)qword_1002A89F0);
    swift_errorRetain(v12);
    v14 = swift_errorRetain(v12);
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.error.getter(v15);
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc(12, -1);
      v18 = swift_slowAlloc(32, -1);
      v34 = v12;
      v35[0] = v18;
      *(_DWORD *)v17 = 136315138;
      swift_errorRetain(v12);
      v19 = sub_1000080B4(&qword_10028E850);
      v20 = String.init<A>(describing:)(&v34, v19);
      v22 = v21;
      v34 = sub_1001DEF4C(v20, v21, v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, v35);
      swift_bridgeObjectRelease(v22);
      swift_errorRelease(v12);
      swift_errorRelease(v12);
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Error updating Benefactor status - %s", v17, 0xCu);
      swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v18, -1, -1);
      swift_slowDealloc(v17, -1, -1);
    }
    else
    {
      swift_errorRelease(v12);
      swift_errorRelease(v12);
    }

    swift_errorRetain(v12);
    a2(v12);
    swift_errorRelease(v12);
    return swift_errorRelease(v12);
  }
  else
  {
    if (qword_10028ADD0 != -1)
      swift_once(&qword_10028ADD0, sub_100046D50);
    v23 = type metadata accessor for Logger(0);
    sub_100005288(v23, (uint64_t)qword_1002A89F0);
    v24 = swift_retain(a4);
    v25 = Logger.logObject.getter(v24);
    v26 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v25, v26))
    {
      v33[1] = a3;
      v27 = a2;
      v28 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v28 = 134217984;
      v29 = type metadata accessor for BenefactorInfoRecord(0);
      v30 = swift_projectBox(a4);
      swift_beginAccess(v30, v35, 0, 0);
      v31 = *(_QWORD *)(v30 + *(int *)(v29 + 24));
      a2 = v27;
      v34 = v31;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, v35);
      swift_release(a4);
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Updated Benefactor status to %ld", v28, 0xCu);
      swift_slowDealloc(v28, -1, -1);

    }
    else
    {

      swift_release(a4);
    }
    a2(0);
    return sub_100004934((uint64_t)v11, (uint64_t *)&unk_10028FA40);
  }
}

void sub_1000B610C(uint64_t a1)
{
  uint64_t v1;

  sub_1000B4FE8(a1, *(_BYTE *)(v1 + 16), *(_QWORD *)(v1 + 24), *(void (**)(uint64_t))(v1 + 32));
}

_OWORD *sub_1000B611C(_OWORD *a1, _OWORD *a2)
{
  initializeWithCopy for InheritanceInvitationResponder(a2, a1);
  return a2;
}

void sub_1000B6158(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD, _QWORD), uint64_t a6, uint64_t a7)
{
  id v14;
  void *v15;
  void (*v16)(_QWORD, _QWORD);
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  void *v22;
  uint64_t v23;
  _QWORD *v24;
  void *v25;
  _QWORD *v26;
  NSObject *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  void **v33;
  uint64_t v34;
  NSObject *v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  NSObject *v39;
  void (*v40)(_QWORD, _QWORD);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  void **aBlock;
  _QWORD v46[4];
  _QWORD *v47;
  uint64_t v48;

  v14 = sub_1000AB2B8();
  if (v14)
  {
    v15 = v14;
    v43 = a6;
    v16 = a5;
    if (qword_10028ADD0 != -1)
      swift_once(&qword_10028ADD0, sub_100046D50);
    v17 = type metadata accessor for Logger(0);
    v18 = sub_100005288(v17, (uint64_t)qword_1002A89F0);
    v19 = Logger.logObject.getter(v18);
    v20 = static os_log_type_t.debug.getter(v19);
    if (os_log_type_enabled(v19, v20))
    {
      v21 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v21 = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Creating AccessKey...", v21, 2u);
      swift_slowDealloc(v21, -1, -1);
    }

    v22 = *(void **)(a7 + OBJC_IVAR____TtC13appleaccountd25InheritanceRequestManager_securityManager);
    v23 = swift_allocObject(&unk_100264D28, 24, 7);
    swift_unknownObjectWeakInit(v23 + 16, a7);
    v24 = (_QWORD *)swift_allocObject(&unk_1002654F8, 80, 7);
    v24[2] = v16;
    v24[3] = v43;
    v24[4] = v15;
    v24[5] = a2;
    v24[6] = a1;
    v24[7] = a3;
    v24[8] = a4;
    v24[9] = v23;
    v46[3] = sub_1000B9BF8;
    v47 = v24;
    aBlock = _NSConcreteStackBlock;
    v46[0] = 1107296256;
    v46[1] = sub_100043E24;
    v46[2] = &unk_100265510;
    v25 = _Block_copy(&aBlock);
    v26 = v47;
    swift_retain(v43);
    v27 = v15;
    swift_unknownObjectRetain(a2);
    v28 = a1;
    swift_bridgeObjectRetain(a4);
    swift_release(v26);
    objc_msgSend(v22, "createInheritanceAccessKeyForContact:completion:", a2, v25);
    _Block_release(v25);
  }
  else
  {
    type metadata accessor for InheritanceError(0);
    v30 = v29;
    v48 = 5;
    v31 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
    v32 = sub_100005150(&qword_10028B350, (uint64_t (*)(uint64_t))type metadata accessor for InheritanceError, (uint64_t)&unk_100216D64);
    _BridgedStoredNSError.init(_:userInfo:)(&aBlock, &v48, v31, v30, v32);
    v33 = aBlock;
    if (qword_10028ADD0 != -1)
      swift_once(&qword_10028ADD0, sub_100046D50);
    v34 = type metadata accessor for Logger(0);
    sub_100005288(v34, (uint64_t)qword_1002A89F0);
    v35 = v33;
    v36 = Logger.logObject.getter(v35);
    v37 = static os_log_type_t.error.getter(v36);
    if (os_log_type_enabled(v36, v37))
    {
      v38 = (uint8_t *)swift_slowAlloc(12, -1);
      v44 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v38 = 138412290;
      v39 = v35;
      v40 = a5;
      v41 = _swift_stdlib_bridgeErrorToNSError(v39);
      aBlock = (void **)v41;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v46);
      *v44 = v41;
      a5 = v40;

      _os_log_impl((void *)&_mh_execute_header, v36, v37, "Error creating inheritanceContext: %@", v38, 0xCu);
      v42 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v44, 1, v42);
      swift_slowDealloc(v44, -1, -1);
      swift_slowDealloc(v38, -1, -1);
    }
    else
    {

      v36 = v35;
    }

    v27 = v35;
    a5(0, v35);

  }
}

_QWORD *sub_1000B654C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t);
  uint64_t v19;
  uint64_t (*v20)(uint64_t);
  char *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  void *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v33;
  _QWORD *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD v46[5];
  _QWORD *v47;

  v5 = sub_1000080B4(&qword_10028FA50);
  v43 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5, v6);
  v42 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = type metadata accessor for BeneficiaryInfoRecord(0);
  v9 = __chkstk_darwin(v41, v8);
  v44 = (uint64_t)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9, v11);
  v45 = (uint64_t)&v37 - v13;
  result = _swiftEmptyArrayStorage;
  v47 = _swiftEmptyArrayStorage;
  v15 = *(_QWORD *)(a1 + 16);
  if (v15)
  {
    v37 = v2;
    v40 = a2 + OBJC_IVAR____TtC13appleaccountd25InheritanceRequestManager__accountStore;
    v16 = *(_QWORD *)(v12 + 72);
    v39 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
    v17 = a1 + v39;
    v18 = type metadata accessor for BeneficiaryInfoRecord;
    v38 = v5;
    while (1)
    {
      v19 = v45;
      v20 = v18;
      sub_100027FE8(v17, v45, v18);
      v21 = v42;
      v22 = (uint64_t *)(v19 + *(int *)(v41 + 24));
      v24 = *v22;
      v23 = v22[1];
      v25 = v43;
      (*(void (**)(char *, uint64_t, uint64_t))(v43 + 16))(v42, v40, v5);
      swift_bridgeObjectRetain(v23);
      Dependency.wrappedValue.getter(v46, v5);
      (*(void (**)(char *, uint64_t))(v25 + 8))(v21, v5);
      v26 = objc_msgSend(*(id *)(*sub_10000732C(v46, v46[3]) + 16), "aa_primaryAppleAccount");
      if (!v26)
        break;
      v27 = v26;
      v28 = objc_msgSend(v26, "aa_altDSID");

      if (!v28)
        break;
      v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
      v31 = v30;

      if (v24 == v29 && v23 == v31)
      {
        swift_bridgeObjectRelease_n(v23, 2);
        sub_100006F58(v46);
        v5 = v38;
        v18 = v20;
      }
      else
      {
        v33 = _stringCompareWithSmolCheck(_:_:expecting:)(v24, v23, v29, v31, 0);
        swift_bridgeObjectRelease(v23);
        swift_bridgeObjectRelease(v31);
        sub_100006F58(v46);
        v5 = v38;
        v18 = v20;
        if ((v33 & 1) == 0)
          goto LABEL_15;
      }
      sub_100028388(v45, v18);
LABEL_5:
      v17 += v16;
      if (!--v15)
        return v47;
    }
    swift_bridgeObjectRelease(v23);
    sub_100006F58(v46);
    v18 = v20;
LABEL_15:
    sub_10003B730(v45, v44, v18);
    v34 = v47;
    if ((swift_isUniquelyReferenced_nonNull_native(v47) & 1) == 0)
    {
      sub_1001D4CF4(0, v34[2] + 1, 1);
      v34 = v47;
    }
    v36 = v34[2];
    v35 = v34[3];
    if (v36 >= v35 >> 1)
    {
      sub_1001D4CF4(v35 > 1, v36 + 1, 1);
      v34 = v47;
    }
    v34[2] = v36 + 1;
    sub_10003B730(v44, (uint64_t)v34 + v39 + v36 * v16, v18);
    goto LABEL_5;
  }
  return result;
}

_QWORD *sub_1000B687C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  _QWORD *result;
  uint64_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v3 = v2;
  v5 = *(_QWORD *)(a1 + 16);
  result = _swiftEmptyArrayStorage;
  if (v5)
  {
    v16 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)(v5);
    v8 = *(_QWORD *)(type metadata accessor for BenefactorInfoRecord(0) - 8);
    v9 = (uint8_t *)(a1 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80)));
    v10 = *(_QWORD *)(v8 + 72);
    while (1)
    {
      sub_1000B453C(v9, a2, &v15);
      if (v3)
        break;
      v3 = 0;
      v12 = v15;
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v11);
      v13 = v16[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v13);
      v14 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v13, v12);
      specialized ContiguousArray._endMutation()(v14);
      v9 += v10;
      if (!--v5)
        return v16;
    }
    return (_QWORD *)swift_release(v16);
  }
  return result;
}

char *sub_1000B6978(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  id v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(uint64_t *, uint64_t, uint64_t);
  uint64_t v52;
  void (*v53)(uint64_t *, uint64_t);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  void (*v60)(uint64_t *, uint64_t, uint64_t);
  uint64_t v61;
  void (*v62)(uint64_t *, uint64_t, uint64_t);
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  _QWORD *v84;
  char *v85;
  char *v86;
  id v87;
  uint64_t v88;
  uint64_t v89;
  char *result;
  char *v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  objc_class *v98;
  char *v99;
  void *v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  void (*v109)(uint64_t *, uint64_t, uint64_t);
  unsigned int v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  objc_super v118;
  __int128 v119;
  uint64_t v120;
  _UNKNOWN **v121;
  __int128 v122;
  __int128 v123;
  _OWORD v124[3];
  _OWORD v125[2];
  uint64_t v126;
  _QWORD v127[3];
  uint64_t v128;
  _UNKNOWN **v129;
  _QWORD v130[5];
  _QWORD v131[3];
  uint64_t v132;
  _UNKNOWN **v133;

  v14 = sub_1000080B4(&qword_10028FBB0);
  v107 = *(_QWORD *)(v14 - 8);
  v108 = v14;
  __chkstk_darwin(v14, v15);
  v106 = (char *)&v106 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v113 = type metadata accessor for DependencyRegistry.Entry(0);
  v115 = *(_QWORD *)(v113 - 8);
  __chkstk_darwin(v113, v17);
  v19 = (uint64_t *)((char *)&v106 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  v132 = type metadata accessor for InheritanceStorageController(0);
  v133 = &off_100266030;
  v131[0] = a2;
  v130[3] = type metadata accessor for DaemonIDSMessenger();
  v130[4] = &off_100262DC0;
  v130[0] = a4;
  v128 = type metadata accessor for InheritanceSetupMessenger();
  v129 = &off_10026A770;
  v127[0] = a5;
  v20 = a7;
  v21 = sub_1000080B4(&qword_10028C860);
  Dependency.init(dependencyId:config:)(0, 0, 0, v21);
  v22 = type metadata accessor for InheritanceCleanupController(0);
  Dependency.init(dependencyId:config:)(0, 0, 0, v22);
  v23 = type metadata accessor for BeneficiaryDeclinedStatusHandler();
  Dependency.init(dependencyId:config:)(0, 0, 0, v23);
  v24 = type metadata accessor for InheritanceInvitationResponseHandler();
  Dependency.init(dependencyId:config:)(0, 0, 0, v24);
  v25 = type metadata accessor for InheritanceInvitationHandler(0);
  Dependency.init(dependencyId:config:)(0, 0, 0, v25);
  v26 = type metadata accessor for InheritanceAccessKeyMessageHandler();
  Dependency.init(dependencyId:config:)(0, 0, 0, v26);
  v27 = type metadata accessor for BeneficiaryRemovedMessageHandler();
  Dependency.init(dependencyId:config:)(0, 0, 0, v27);
  v28 = sub_1000080B4(&qword_10028F9D0);
  Dependency.init(dependencyId:config:)(0, 0, 0, v28);
  v29 = &v20[OBJC_IVAR____TtC13appleaccountd25InheritanceRequestManager_ownerHandle];
  *(_QWORD *)v29 = 0;
  *((_QWORD *)v29 + 1) = 0;
  *(_QWORD *)&v20[OBJC_IVAR____TtC13appleaccountd25InheritanceRequestManager_controller] = a1;
  sub_100006CA4((uint64_t)v131, (uint64_t)&v20[OBJC_IVAR____TtC13appleaccountd25InheritanceRequestManager_storageController]);
  *(_QWORD *)&v20[OBJC_IVAR____TtC13appleaccountd25InheritanceRequestManager_securityController] = a6;
  *(_QWORD *)&v20[OBJC_IVAR____TtC13appleaccountd25InheritanceRequestManager_messagingService] = a3;
  sub_100006CA4((uint64_t)v130, (uint64_t)&v20[OBJC_IVAR____TtC13appleaccountd25InheritanceRequestManager_idsMessenger]);
  v117 = v20;
  sub_100006CA4((uint64_t)v127, (uint64_t)&v20[OBJC_IVAR____TtC13appleaccountd25InheritanceRequestManager_setupMessenger]);
  v30 = qword_10028AE60;
  v31 = a1;
  v116 = a6;
  swift_retain(a6);
  v32 = a3;
  if (v30 != -1)
    swift_once(&qword_10028AE60, sub_1000C8AB0);
  v33 = qword_1002A8B08;
  v34 = type metadata accessor for CloudKitStore();
  *((_QWORD *)&v123 + 1) = v34;
  *(_QWORD *)&v124[0] = &off_10026A3F0;
  *(_QWORD *)&v122 = v33;
  v114 = type metadata accessor for InheritanceCloudSharingController();
  v35 = (_QWORD *)swift_allocObject(v114, 56, 7);
  v36 = sub_1000067AC((uint64_t)&v122, v34);
  __chkstk_darwin(v36, v36);
  v38 = (uint64_t *)((char *)&v106 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v39 + 16))(v38);
  v40 = *v38;
  v35[5] = v34;
  v35[6] = &off_10026A3F0;
  v35[2] = v40;
  swift_retain(v33);
  sub_100006F58(&v122);
  v112 = OBJC_IVAR____TtC13appleaccountd25InheritanceRequestManager_cloudSharingController;
  v41 = v117;
  *(_QWORD *)&v117[OBJC_IVAR____TtC13appleaccountd25InheritanceRequestManager_cloudSharingController] = v35;
  v42 = v41;
  v43 = type metadata accessor for InheritanceSecurityManager();
  v44 = swift_allocObject(v43, 24, 7);
  v45 = v116;
  *(_QWORD *)(v44 + 16) = v116;
  v111 = OBJC_IVAR____TtC13appleaccountd25InheritanceRequestManager_securityManager;
  *(_QWORD *)&v42[OBJC_IVAR____TtC13appleaccountd25InheritanceRequestManager_securityManager] = v44;
  type metadata accessor for DependencyRegistry(0);
  v46 = sub_1000080B4((uint64_t *)&unk_100291CA0);
  v47 = objc_allocWithZone((Class)AAContactsManager);
  swift_unknownObjectRetain(v45);
  v48 = objc_msgSend(v47, "init");
  v19[3] = sub_1000067D4(0, &qword_10028FBB8, AAContactsManager_ptr);
  *v19 = (uint64_t)v48;
  v49 = enum case for DependencyRegistry.Entry.exact(_:);
  v50 = v115;
  v51 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v115 + 104);
  v52 = v113;
  v51(v19, enum case for DependencyRegistry.Entry.exact(_:), v113);
  v109 = v51;
  static DependencyRegistry.register<A>(_:entry:dependencyId:)(v46, v19, 0, 0, v46);
  v53 = *(void (**)(uint64_t *, uint64_t))(v50 + 8);
  v53(v19, v52);
  v54 = sub_1000080B4((uint64_t *)&unk_10028FBC0);
  v19[3] = swift_getObjectType(v31);
  *v19 = (uint64_t)v31;
  v51(v19, v49, v52);
  swift_unknownObjectRetain(v31);
  static DependencyRegistry.register<A>(_:entry:dependencyId:)(v54, v19, 0, 0, v54);
  v53(v19, v52);
  v55 = sub_1000080B4(&qword_100294B10);
  v56 = v132;
  v57 = sub_10000732C(v131, v132);
  v19[3] = v56;
  v58 = sub_1000B9D04(v19);
  (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v56 - 8) + 16))(v58, v57, v56);
  v59 = v49;
  v60 = v109;
  v109(v19, v49, v52);
  static DependencyRegistry.register<A>(_:entry:dependencyId:)(v55, v19, 0, 0, v55);
  v53(v19, v52);
  v61 = type metadata accessor for InheritanceSecurityController(0);
  v19[3] = swift_getObjectType(v45);
  *v19 = v45;
  v60(v19, v49, v52);
  v62 = v60;
  swift_unknownObjectRetain(v45);
  static DependencyRegistry.register<A>(_:entry:dependencyId:)(v61, v19, 0, 0, v61);
  v53(v19, v52);
  v63 = sub_1000080B4((uint64_t *)&unk_10028FBD0);
  v64 = v128;
  v65 = sub_10000732C(v127, v128);
  v19[3] = v64;
  v66 = sub_1000B9D04(v19);
  (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v64 - 8) + 16))(v66, v65, v64);
  v62(v19, v59, v52);
  static DependencyRegistry.register<A>(_:entry:dependencyId:)(v63, v19, 0, 0, v63);
  v53(v19, v52);
  v67 = sub_1000080B4(&qword_100295290);
  v68 = v117;
  v69 = *(_QWORD *)&v117[v111];
  v19[3] = swift_getObjectType(v69);
  *v19 = v69;
  v110 = v59;
  v62(v19, v59, v52);
  swift_unknownObjectRetain(v69);
  static DependencyRegistry.register<A>(_:entry:dependencyId:)(v67, v19, 0, 0, v67);
  v53(v19, v52);
  v70 = sub_1000080B4((uint64_t *)&unk_10028FBE0);
  v71 = *(_QWORD *)&v68[v112];
  v19[3] = v114;
  *v19 = v71;
  v62(v19, v59, v52);
  swift_retain(v71);
  static DependencyRegistry.register<A>(_:entry:dependencyId:)(v70, v19, 0, 0, v70);
  v53(v19, v52);
  v72 = sub_1000080B4((uint64_t *)&unk_10028D778);
  v73 = type metadata accessor for BeneficiaryAccessKeyRepairHandlerFactory();
  v74 = swift_allocObject(v73, 16, 7);
  v19[3] = v73;
  v19[4] = sub_100005150((unint64_t *)&unk_10028FBF0, (uint64_t (*)(uint64_t))type metadata accessor for BeneficiaryAccessKeyRepairHandlerFactory, (uint64_t)&unk_1002225C0);
  *v19 = v74;
  v62(v19, enum case for DependencyRegistry.Entry.factory(_:), v52);
  static DependencyRegistry.register<A>(_:entry:dependencyId:)(v72, v19, 0, 0, v72);
  v53(v19, v52);
  v75 = sub_1000080B4(&qword_10028BD98);
  v76 = type metadata accessor for BeneficiaryInfoVerifier();
  v77 = swift_allocObject(v76, 16, 7);
  v19[3] = v76;
  *v19 = v77;
  v62(v19, v110, v52);
  static DependencyRegistry.register<A>(_:entry:dependencyId:)(v75, v19, 0, 0, v75);
  v53(v19, v52);
  sub_100006CA4((uint64_t)v131, (uint64_t)&v122);
  v78 = type metadata accessor for DaemonFamilyRequester();
  v79 = swift_allocObject(v78, 16, 7);
  v80 = sub_1000067AC((uint64_t)&v122, *((uint64_t *)&v123 + 1));
  __chkstk_darwin(v80, v80);
  v82 = (uint64_t *)((char *)&v106 - ((v81 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v83 + 16))(v82);
  v84 = sub_10016914C(*v82, v79);
  sub_100006F58(&v122);
  v85 = v117;
  v86 = &v117[OBJC_IVAR____TtC13appleaccountd25InheritanceRequestManager_familyManager];
  *((_QWORD *)v86 + 3) = type metadata accessor for InheritanceFamilyManager();
  *((_QWORD *)v86 + 4) = &off_10026CFB0;
  *(_QWORD *)v86 = v84;
  v87 = objc_msgSend(objc_allocWithZone((Class)AATrustedContactFlowPresenter), "init");
  *(_QWORD *)&v85[OBJC_IVAR____TtC13appleaccountd25InheritanceRequestManager_flowPresenter] = v87;
  v88 = type metadata accessor for DaemonAccountStore();
  v89 = swift_allocObject(v88, 32, 7);
  result = (char *)objc_msgSend((id)objc_opt_self(ACAccountStore), "defaultStore");
  if (result)
  {
    *(_QWORD *)(v89 + 16) = result;
    *(_QWORD *)(v89 + 24) = objc_msgSend((id)objc_opt_self(AKAccountManager), "sharedInstance");
    v120 = v88;
    v121 = &off_100261290;
    *(_QWORD *)&v119 = v89;
    sub_100006CA4((uint64_t)v131, (uint64_t)v124 + 8);
    sub_100006CA4((uint64_t)v127, (uint64_t)v125);
    sub_10003A190(&v119, (uint64_t)&v122);
    v91 = &v85[OBJC_IVAR____TtC13appleaccountd25InheritanceRequestManager_invitationResponder];
    v92 = v124[1];
    v93 = v123;
    v94 = v122;
    *((_OWORD *)v91 + 2) = v124[0];
    *((_OWORD *)v91 + 3) = v92;
    *(_OWORD *)v91 = v94;
    *((_OWORD *)v91 + 1) = v93;
    v95 = v125[0];
    v96 = v125[1];
    v97 = v124[2];
    *((_QWORD *)v91 + 14) = v126;
    *((_OWORD *)v91 + 5) = v95;
    *((_OWORD *)v91 + 6) = v96;
    *((_OWORD *)v91 + 4) = v97;

    v98 = (objc_class *)type metadata accessor for InheritanceRequestManager(0);
    v118.receiver = v85;
    v118.super_class = v98;
    v99 = (char *)objc_msgSendSuper2(&v118, "init");
    v100 = *(void **)&v99[OBJC_IVAR____TtC13appleaccountd25InheritanceRequestManager_messagingService];
    v102 = v106;
    v101 = v107;
    v103 = v108;
    (*(void (**)(char *, char *, uint64_t))(v107 + 16))(v106, &v99[OBJC_IVAR____TtC13appleaccountd25InheritanceRequestManager__messageProcessor], v108);
    v104 = v99;
    Dependency.wrappedValue.getter(&v122, v103);
    (*(void (**)(char *, uint64_t))(v101 + 8))(v102, v103);
    v105 = v122;
    objc_msgSend(v100, "setInheritanceDelegate:", (_QWORD)v122);
    swift_unknownObjectRelease(v105);

    sub_100006F58(v130);
    sub_100006F58(v127);
    sub_100006F58(v131);
    return v104;
  }
  else
  {
    __break(1u);
  }
  return result;
}

char *sub_1000B7460(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  char *v25;
  _QWORD v28[3];
  uint64_t v29;
  _UNKNOWN **v30;
  _QWORD v31[3];
  uint64_t v32;
  _UNKNOWN **v33;
  _QWORD v34[3];
  uint64_t v35;
  _UNKNOWN **v36;

  v35 = type metadata accessor for InheritanceStorageController(0);
  v36 = &off_100266030;
  v34[0] = a2;
  v32 = type metadata accessor for DaemonIDSMessenger();
  v33 = &off_100262DC0;
  v31[0] = a4;
  v29 = type metadata accessor for InheritanceSetupMessenger();
  v30 = &off_10026A770;
  v28[0] = a5;
  v12 = objc_allocWithZone((Class)type metadata accessor for InheritanceRequestManager(0));
  v13 = sub_1000067AC((uint64_t)v34, v35);
  __chkstk_darwin(v13, v13);
  v15 = (_QWORD *)((char *)&v28[-1] - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v16 + 16))(v15);
  v17 = sub_1000067AC((uint64_t)v31, v32);
  __chkstk_darwin(v17, v17);
  v19 = (_QWORD *)((char *)&v28[-1] - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v20 + 16))(v19);
  v21 = sub_1000067AC((uint64_t)v28, v29);
  __chkstk_darwin(v21, v21);
  v23 = (_QWORD *)((char *)&v28[-1] - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v24 + 16))(v23);
  v25 = sub_1000B6978(a1, *v15, a3, *v19, *v23, a6, v12);
  sub_100006F58(v28);
  sub_100006F58(v31);
  sub_100006F58(v34);
  return v25;
}

void sub_1000B7638(uint64_t a1, void (**a2)(_QWORD, _QWORD, _QWORD))
{
  uint64_t v4;
  id v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  _QWORD aBlock[5];
  uint64_t v18;
  uint64_t v19;

  v4 = swift_allocObject(&unk_1002655E8, 24, 7);
  *(_QWORD *)(v4 + 16) = a2;
  _Block_copy(a2);
  v5 = sub_1000AB2B8();
  if (v5)
  {
    v6 = v5;
    v7 = *(void **)(a1 + OBJC_IVAR____TtC13appleaccountd25InheritanceRequestManager_controller);
    v8 = swift_allocObject(&unk_100265610, 32, 7);
    *(_QWORD *)(v8 + 16) = sub_1000891CC;
    *(_QWORD *)(v8 + 24) = v4;
    aBlock[4] = sub_1000B9CFC;
    v18 = v8;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1000ABBFC;
    aBlock[3] = &unk_100265628;
    v9 = _Block_copy(aBlock);
    v10 = v18;
    swift_retain(v4);
    swift_release(v10);
    objc_msgSend(v7, "fetchManifestOptionsWithInheritanceContext:completion:", v6, v9);
    _Block_release(v9);
    swift_release(v4);

  }
  else
  {
    type metadata accessor for InheritanceError(0);
    v12 = v11;
    v19 = 5;
    v13 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
    v14 = sub_100005150(&qword_10028B350, (uint64_t (*)(uint64_t))type metadata accessor for InheritanceError, (uint64_t)&unk_100216D64);
    _BridgedStoredNSError.init(_:userInfo:)(aBlock, &v19, v13, v12, v14);
    v15 = (void *)aBlock[0];
    v16 = (void *)_convertErrorToNSError(_:)(aBlock[0]);
    ((void (**)(_QWORD, _QWORD, void *))a2)[2](a2, 0, v16);
    swift_release(v4);

  }
}

void sub_1000B77E4(void *a1, void *a2, uint64_t a3, uint64_t a4, char *a5, id a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  uint64_t inited;
  unint64_t v34;
  void *v35;
  _QWORD *v36;
  uint64_t v37;
  id v38;
  id v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  void *v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  _QWORD *v51;
  id v52;
  id v53;
  NSObject *v54;
  os_log_type_t v55;
  uint8_t *v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  void *v61;
  void *v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  id v67;
  uint64_t v68;
  char *v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  char v75[56];

  v68 = a3;
  v69 = a5;
  v70 = a1;
  v71 = a4;
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v12 = (char *)&v64 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v72 = swift_allocObject(&unk_100265430, 24, 7);
  *(_QWORD *)(v72 + 16) = a6;
  _Block_copy(a6);
  if (qword_10028ADD0 != -1)
    swift_once(&qword_10028ADD0, sub_100046D50);
  v13 = type metadata accessor for Logger(0);
  v14 = sub_100005288(v13, (uint64_t)qword_1002A89F0);
  v15 = swift_unknownObjectRetain_n(a2, 2);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = swift_slowAlloc(22, -1);
    v67 = a6;
    v19 = v18;
    v65 = swift_slowAlloc(64, -1);
    v74 = (void *)v65;
    *(_DWORD *)v19 = 136315394;
    v64 = v9;
    v73 = type metadata accessor for InheritanceRequestManager(0);
    v20 = sub_1000080B4((uint64_t *)&unk_10028FA58);
    v66 = v14;
    v21 = String.init<A>(describing:)(&v73, v20);
    v23 = v22;
    v73 = sub_1001DEF4C(v21, v22, (uint64_t *)&v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, &v74);
    swift_bridgeObjectRelease(v23);
    *(_WORD *)(v19 + 12) = 2080;
    v24 = objc_msgSend(a2, "beneficiaryID");
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v24);

    v25 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v26 = dispatch thunk of CustomStringConvertible.description.getter(v8, v25);
    v28 = v27;
    (*(void (**)(char *, uint64_t))(v64 + 8))(v12, v8);
    v73 = sub_1001DEF4C(v26, v28, (uint64_t *)&v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, &v74);
    swift_unknownObjectRelease_n(a2, 2);
    swift_bridgeObjectRelease(v28);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "%s - Setup Beneficiary with UUID - %s", (uint8_t *)v19, 0x16u);
    v29 = v65;
    swift_arrayDestroy(v65, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v29, -1, -1);
    v30 = v19;
    a6 = v67;
    swift_slowDealloc(v30, -1, -1);

  }
  else
  {

    swift_unknownObjectRelease_n(a2, 2);
  }
  v31 = objc_allocWithZone((Class)type metadata accessor for InheritanceInviteAnalyticsEvent(0));
  v32 = sub_1000080B4(&qword_10028E7F8);
  inited = swift_initStackObject(v32, v75);
  *(_OWORD *)(inited + 16) = xmmword_100218E30;
  *(_QWORD *)(inited + 32) = 0x766F6D6552736177;
  *(_QWORD *)(inited + 40) = 0xEF6E6F6974634165;
  *(NSNumber *)(inited + 48) = Bool._bridgeToObjectiveC()();
  v34 = sub_10001612C(inited);
  v35 = (void *)AAFTimedAnalyticsEvent.init(eventName:initialData:)(0xD00000000000002DLL, 0x800000010020BC30, v34);
  v36 = (_QWORD *)swift_allocObject(&unk_100265458, 40, 7);
  v36[2] = v35;
  v36[3] = sub_100088B6C;
  v37 = v72;
  v36[4] = v72;
  swift_retain(v37);
  v38 = v35;
  v39 = objc_msgSend(a2, "handle");
  if (v39)
  {
    v40 = v39;
    v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(v39);
    v43 = v42;

    v44 = a2;
    v45 = v69;
    sub_10000732C(&v69[OBJC_IVAR____TtC13appleaccountd25InheritanceRequestManager_storageController], *(_QWORD *)&v69[OBJC_IVAR____TtC13appleaccountd25InheritanceRequestManager_storageController + 24]);
    v46 = (_QWORD *)swift_allocObject(&unk_100265480, 72, 7);
    v67 = v38;
    v47 = v46;
    v46[2] = sub_1000B9B00;
    v46[3] = v36;
    v49 = v70;
    v48 = v71;
    v46[4] = v45;
    v46[5] = v49;
    v50 = v68;
    v46[6] = v44;
    v46[7] = v50;
    v46[8] = v48;
    v51 = (_QWORD *)swift_allocObject(&unk_1002654A8, 48, 7);
    v51[2] = v41;
    v51[3] = v43;
    v51[4] = sub_1000B9B50;
    v51[5] = v47;
    swift_unknownObjectRetain(v44);
    swift_retain(v36);
    v52 = v45;
    v53 = v49;
    swift_bridgeObjectRetain(v48);
    swift_bridgeObjectRetain(v43);
    swift_retain(v47);
    sub_100006A8C((uint64_t)sub_1000B9B90, (uint64_t)v51);
    swift_release(v72);

    swift_release(v36);
    swift_bridgeObjectRelease(v43);
    swift_release(v47);
    swift_release(v51);
  }
  else
  {
    v54 = Logger.logObject.getter(0);
    v55 = static os_log_type_t.error.getter(v54);
    if (os_log_type_enabled(v54, v55))
    {
      v56 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v56 = 0;
      _os_log_impl((void *)&_mh_execute_header, v54, v55, "Contact handle is nil.", v56, 2u);
      swift_slowDealloc(v56, -1, -1);
    }

    type metadata accessor for InheritanceError(0);
    v58 = v57;
    v73 = 2108;
    v59 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
    v60 = sub_100005150(&qword_10028B350, (uint64_t (*)(uint64_t))type metadata accessor for InheritanceError, (uint64_t)&unk_100216D64);
    _BridgedStoredNSError.init(_:userInfo:)(&v74, &v73, v59, v58, v60);
    v61 = v74;
    v62 = (void *)_convertErrorToNSError(_:)(v74);
    sub_1001BA4C0(0, (uint64_t)v62);

    v63 = (void *)_convertErrorToNSError(_:)(v61);
    (*((void (**)(id, _QWORD, void *))a6 + 2))(a6, 0, v63);
    swift_release(v72);

    swift_release(v36);
  }
}

void sub_1000B7DF8(uint64_t a1, uint64_t a2, void (**a3)(_QWORD, _QWORD))
{
  uint64_t v6;
  id v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  _QWORD aBlock[5];
  uint64_t v20;
  uint64_t v21;

  v6 = swift_allocObject(&unk_1002653B8, 24, 7);
  *(_QWORD *)(v6 + 16) = a3;
  _Block_copy(a3);
  v7 = sub_1000AB2B8();
  if (v7)
  {
    v8 = v7;
    objc_msgSend(v7, "setManifest:", a1);
    v9 = *(void **)(a2 + OBJC_IVAR____TtC13appleaccountd25InheritanceRequestManager_controller);
    v10 = swift_allocObject(&unk_1002653E0, 32, 7);
    *(_QWORD *)(v10 + 16) = sub_1000891D0;
    *(_QWORD *)(v10 + 24) = v6;
    aBlock[4] = sub_1000B9ADC;
    v20 = v10;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1001DC548;
    aBlock[3] = &unk_1002653F8;
    v11 = _Block_copy(aBlock);
    v12 = v20;
    swift_retain(v6);
    swift_release(v12);
    objc_msgSend(v9, "updateBeneficiaryWithInheritanceContext:completion:", v8, v11);
    _Block_release(v11);
    swift_release(v6);

  }
  else
  {
    type metadata accessor for InheritanceError(0);
    v14 = v13;
    v21 = 5;
    v15 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
    v16 = sub_100005150(&qword_10028B350, (uint64_t (*)(uint64_t))type metadata accessor for InheritanceError, (uint64_t)&unk_100216D64);
    _BridgedStoredNSError.init(_:userInfo:)(aBlock, &v21, v15, v14, v16);
    v17 = (void *)aBlock[0];
    v18 = (void *)_convertErrorToNSError(_:)(aBlock[0]);
    ((void (**)(_QWORD, void *))a3)[2](a3, v18);
    swift_release(v6);

  }
}

void sub_1000B7FB4(uint64_t a1, uint64_t a2, void (**a3)(_QWORD, _QWORD))
{
  uint64_t v6;
  id v7;
  void *v8;
  void *v9;
  uint64_t v10;
  _QWORD *v11;
  void *v12;
  _QWORD *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20;
  _QWORD aBlock[5];
  _QWORD *v22;
  uint64_t v23;

  v6 = swift_allocObject(&unk_1002652F0, 24, 7);
  *(_QWORD *)(v6 + 16) = a3;
  _Block_copy(a3);
  v7 = sub_1000AB2B8();
  if (v7)
  {
    v8 = v7;
    v9 = *(void **)(a2 + OBJC_IVAR____TtC13appleaccountd25InheritanceRequestManager_securityManager);
    v10 = swift_allocObject(&unk_100264D28, 24, 7);
    swift_unknownObjectWeakInit(v10 + 16, a2);
    v11 = (_QWORD *)swift_allocObject(&unk_100265318, 48, 7);
    v11[2] = sub_1000891D0;
    v11[3] = v6;
    v11[4] = v8;
    v11[5] = v10;
    aBlock[4] = sub_1000B9AB0;
    v22 = v11;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100043E24;
    aBlock[3] = &unk_100265330;
    v12 = _Block_copy(aBlock);
    v13 = v22;
    swift_retain(v6);
    v14 = v8;
    swift_release(v13);
    objc_msgSend(v9, "createInheritanceAccessKeyForContact:completion:", a1, v12);
    _Block_release(v12);
    swift_release(v6);

  }
  else
  {
    type metadata accessor for InheritanceError(0);
    v16 = v15;
    v23 = 5;
    v17 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
    v18 = sub_100005150(&qword_10028B350, (uint64_t (*)(uint64_t))type metadata accessor for InheritanceError, (uint64_t)&unk_100216D64);
    _BridgedStoredNSError.init(_:userInfo:)(aBlock, &v23, v17, v16, v18);
    v19 = (void *)aBlock[0];
    v20 = (void *)_convertErrorToNSError(_:)(aBlock[0]);
    ((void (**)(_QWORD, void *))a3)[2](a3, v20);
    swift_release(v6);

  }
}

void sub_1000B8190(uint64_t a1, void *a2, uint64_t a3, void *a4, uint64_t (*a5)(uint64_t), uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  unint64_t v21;
  uint64_t v22;
  void *v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  void *v31;
  id v32;
  void *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint8_t *v40;
  os_log_type_t v41;
  uint8_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  uint8_t *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  void *v58;
  uint64_t *v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  uint8_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  id v67;
  uint64_t (*v68)(uint64_t);
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;

  v68 = a5;
  v11 = type metadata accessor for UUID(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11, v13);
  v15 = (char *)&v62 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    v71 = a1;
    swift_errorRetain(a1);
    swift_errorRetain(a1);
    v16 = a4;
    swift_retain(a6);
    v17 = sub_1000080B4(&qword_10028E850);
    type metadata accessor for InheritanceError(0);
    v19 = v18;
    if ((swift_dynamicCast(&v70, &v71, v17, v18, 6) & 1) != 0)
    {
      v20 = (id)v70;
      v71 = v70;
      v69 = 11;
      v21 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
      v22 = sub_100005150(&qword_10028B350, (uint64_t (*)(uint64_t))type metadata accessor for InheritanceError, (uint64_t)&unk_100216D64);
      _BridgedStoredNSError.init(_:userInfo:)(&v70, &v69, v21, v19, v22);
      v23 = (void *)v70;
      v69 = v70;
      v24 = static _BridgedStoredNSError.== infix(_:_:)(&v71, &v69, v19, v22);

      if ((v24 & 1) != 0)
      {
        if (qword_10028ADD0 != -1)
          swift_once(&qword_10028ADD0, sub_100046D50);
        v25 = type metadata accessor for Logger(0);
        v26 = sub_100005288(v25, (uint64_t)qword_1002A89F0);
        v27 = Logger.logObject.getter(v26);
        v28 = static os_log_type_t.debug.getter(v27);
        if (os_log_type_enabled(v27, v28))
        {
          v29 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v29 = 0;
          _os_log_impl((void *)&_mh_execute_header, v27, v28, "CleanupBeneficiary completed.", v29, 2u);
          swift_slowDealloc(v29, -1, -1);
        }

        sub_1001BA4C0(1, 0);
        v68(0);
        swift_errorRelease(a1);
        swift_release(a6);

LABEL_29:
        return;
      }

    }
    if (qword_10028ADD0 != -1)
      swift_once(&qword_10028ADD0, sub_100046D50);
    v49 = type metadata accessor for Logger(0);
    sub_100005288(v49, (uint64_t)qword_1002A89F0);
    swift_errorRetain(a1);
    v50 = swift_errorRetain(a1);
    v51 = Logger.logObject.getter(v50);
    v52 = static os_log_type_t.error.getter(v51);
    if (os_log_type_enabled(v51, v52))
    {
      v53 = (uint8_t *)swift_slowAlloc(12, -1);
      v54 = swift_slowAlloc(32, -1);
      v70 = a1;
      v71 = v54;
      v67 = v16;
      *(_DWORD *)v53 = 136315138;
      swift_errorRetain(a1);
      v55 = String.init<A>(describing:)(&v70, v17);
      v57 = v56;
      v70 = sub_1001DEF4C(v55, v56, &v71);
      v16 = v67;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71);
      swift_bridgeObjectRelease(v57);
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, v51, v52, "CleanupBeneficiary completed with error : %s", v53, 0xCu);
      swift_arrayDestroy(v54, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v54, -1, -1);
      swift_slowDealloc(v53, -1, -1);
    }
    else
    {
      swift_errorRelease(a1);
      swift_errorRelease(a1);
    }

    swift_errorRetain(a1);
    v58 = (void *)_convertErrorToNSError(_:)(a1);
    sub_1001BA4C0(0, (uint64_t)v58);

    v68(a1);
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    swift_release(a6);

  }
  else
  {
    v30 = objc_opt_self(AABeneficiaryInfo);
    v31 = (void *)swift_dynamicCastObjCClass(a2, v30);
    v67 = a4;
    swift_retain(a6);
    if (v31)
    {
      v32 = objc_msgSend(v31, "handle");
      if (v32)
      {
        v33 = v32;
        v66 = static String._unconditionallyBridgeFromObjectiveC(_:)(v32);
        v35 = v34;

        if (qword_10028ADD0 != -1)
          swift_once(&qword_10028ADD0, sub_100046D50);
        v36 = type metadata accessor for Logger(0);
        sub_100005288(v36, (uint64_t)qword_1002A89F0);
        v37 = swift_bridgeObjectRetain_n(v35, 2);
        v38 = Logger.logObject.getter(v37);
        v39 = static os_log_type_t.debug.getter(v38);
        if (os_log_type_enabled(v38, v39))
        {
          v40 = (uint8_t *)swift_slowAlloc(12, -1);
          v64 = swift_slowAlloc(32, -1);
          v71 = v64;
          v65 = a6;
          v63 = v40;
          *(_DWORD *)v40 = 136315138;
          swift_bridgeObjectRetain(v35);
          v70 = sub_1001DEF4C(v66, v35, &v71);
          a6 = v65;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71);
          swift_bridgeObjectRelease_n(v35, 3);
          v41 = v39;
          v42 = v63;
          _os_log_impl((void *)&_mh_execute_header, v38, v41, "CleanupBeneficiary completed successfully. Notifying beneficiary (%s) to remove via IDS.", v63, 0xCu);
          v43 = v64;
          swift_arrayDestroy(v64, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v43, -1, -1);
          swift_slowDealloc(v42, -1, -1);

        }
        else
        {

          swift_bridgeObjectRelease_n(v35, 2);
        }
        v59 = sub_10000732C((_QWORD *)(a3 + OBJC_IVAR____TtC13appleaccountd25InheritanceRequestManager_setupMessenger), *(_QWORD *)(a3 + OBJC_IVAR____TtC13appleaccountd25InheritanceRequestManager_setupMessenger + 24));
        v60 = objc_msgSend(a2, "beneficiaryID");
        static UUID._unconditionallyBridgeFromObjectiveC(_:)(v60);

        v61 = *v59;
        v20 = v67;
        swift_retain(a6);
        sub_100152704((uint64_t)v15, v66, v35, v61, v20, v68, a6);
        swift_bridgeObjectRelease(v35);

        swift_release(a6);
        (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
        swift_release(a6);
        goto LABEL_29;
      }
    }
    if (qword_10028ADD0 != -1)
      swift_once(&qword_10028ADD0, sub_100046D50);
    v44 = type metadata accessor for Logger(0);
    v45 = sub_100005288(v44, (uint64_t)qword_1002A89F0);
    v46 = Logger.logObject.getter(v45);
    v47 = static os_log_type_t.debug.getter(v46);
    if (os_log_type_enabled(v46, v47))
    {
      v48 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v48 = 0;
      _os_log_impl((void *)&_mh_execute_header, v46, v47, "Beneficiary doesn't have a handle. Beneficiary Removal Complete!", v48, 2u);
      swift_slowDealloc(v48, -1, -1);
    }

    sub_1001BA4C0(1, 0);
    v68(0);
    swift_release(a6);

  }
}

void sub_1000B8940(void *a1, void *a2, void (**a3)(_QWORD, _QWORD))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  NSObject *v18;
  os_log_type_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  id v27;
  char *v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  os_log_t v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  uint64_t v40;
  uint64_t inited;
  unint64_t v42;
  void *v43;
  uint64_t v44;
  char *v45;
  id v46;
  id v47;
  id v48;
  void *v49;
  id v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  id v59;
  void *v60;
  uint64_t v61;
  id v62;
  id v63;
  id v64;
  uint64_t v65;
  NSObject *v66;
  os_log_type_t v67;
  uint8_t *v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  void *v73;
  void *v74;
  void *v75;
  _QWORD v76[2];
  os_log_t v77;
  int v78;
  uint64_t v79;
  void (**v80)(_QWORD, _QWORD);
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  void *v90;
  uint64_t v91;
  uint64_t v92[5];
  char v93[64];

  v90 = a2;
  v5 = sub_1000080B4(&qword_10028FB08);
  v82 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5, v6);
  v83 = (char *)v76 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1000080B4(&qword_10028FA50);
  v89 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v9);
  v88 = (char *)v76 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for UUID(0);
  v86 = *(_QWORD *)(v11 - 8);
  v87 = v11;
  __chkstk_darwin(v11, v12);
  v85 = (char *)v76 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = swift_allocObject(&unk_1002652C8, 24, 7);
  *(_QWORD *)(v14 + 16) = a3;
  _Block_copy(a3);
  if (qword_10028ADD0 != -1)
    swift_once(&qword_10028ADD0, sub_100046D50);
  v15 = type metadata accessor for Logger(0);
  v16 = sub_100005288(v15, (uint64_t)qword_1002A89F0);
  v17 = a1;
  v84 = v16;
  v18 = Logger.logObject.getter(v17);
  v19 = static os_log_type_t.info.getter();
  v20 = v19;
  if (os_log_type_enabled(v18, v19))
  {
    v21 = swift_slowAlloc(22, -1);
    v81 = v14;
    v22 = v21;
    v79 = swift_slowAlloc(64, -1);
    v92[0] = v79;
    *(_DWORD *)v22 = 136315394;
    v91 = type metadata accessor for InheritanceRequestManager(0);
    v23 = sub_1000080B4((uint64_t *)&unk_10028FA58);
    v77 = v18;
    v78 = v20;
    v24 = String.init<A>(describing:)(&v91, v23);
    v80 = a3;
    v26 = v25;
    v91 = sub_1001DEF4C(v24, v25, v92);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v91, v92);
    swift_bridgeObjectRelease(v26);
    *(_WORD *)(v22 + 12) = 2080;
    v76[1] = v22 + 14;
    v27 = objc_msgSend(v17, "beneficiaryID");
    v28 = v85;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v27);

    v29 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v30 = v17;
    v31 = v87;
    v32 = dispatch thunk of CustomStringConvertible.description.getter(v87, v29);
    v34 = v33;
    v35 = v31;
    v17 = v30;
    (*(void (**)(char *, uint64_t))(v86 + 8))(v28, v35);
    v91 = sub_1001DEF4C(v32, v34, v92);
    a3 = v80;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v91, v92);

    swift_bridgeObjectRelease(v34);
    v36 = v77;
    _os_log_impl((void *)&_mh_execute_header, v77, (os_log_type_t)v78, "%s - Removing Beneficiary with beneficiaryID: %s", (uint8_t *)v22, 0x16u);
    v37 = v79;
    swift_arrayDestroy(v79, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v37, -1, -1);
    v38 = v22;
    v14 = v81;
    swift_slowDealloc(v38, -1, -1);

  }
  else
  {

  }
  v39 = objc_allocWithZone((Class)type metadata accessor for InheritanceInviteAnalyticsEvent(0));
  v40 = sub_1000080B4(&qword_10028E7F8);
  inited = swift_initStackObject(v40, v93);
  *(_OWORD *)(inited + 16) = xmmword_100218E30;
  *(_QWORD *)(inited + 32) = 0x766F6D6552736177;
  *(_QWORD *)(inited + 40) = 0xEF6E6F6974634165;
  *(NSNumber *)(inited + 48) = Bool._bridgeToObjectiveC()();
  v42 = sub_10001612C(inited);
  v43 = (void *)AAFTimedAnalyticsEvent.init(eventName:initialData:)(0xD00000000000002DLL, 0x800000010020BC30, v42);
  v44 = v89;
  v45 = v88;
  (*(void (**)(char *, uint64_t, uint64_t))(v89 + 16))(v88, (uint64_t)v90 + OBJC_IVAR____TtC13appleaccountd25InheritanceRequestManager__accountStore, v8);
  v46 = v43;
  swift_retain_n(v14, 2);
  v47 = v46;
  Dependency.wrappedValue.getter(v92, v8);
  (*(void (**)(char *, uint64_t))(v44 + 8))(v45, v8);
  v48 = objc_msgSend(*(id *)(*sub_10000732C(v92, v92[3]) + 16), "aa_primaryAppleAccount");
  if (v48
    && (v49 = v48, v50 = objc_msgSend(v48, "aa_altDSID"), v49, v50))
  {
    v51 = static String._unconditionallyBridgeFromObjectiveC(_:)(v50);
    v52 = v17;
    v54 = v53;

    sub_100006F58(v92);
    v55 = v90;
    v56 = v82;
    v57 = v83;
    (*(void (**)(char *, uint64_t, uint64_t))(v82 + 16))(v83, (uint64_t)v90 + OBJC_IVAR____TtC13appleaccountd25InheritanceRequestManager__cleanupController, v5);
    Dependency.wrappedValue.getter(v92, v5);
    (*(void (**)(char *, uint64_t))(v56 + 8))(v57, v5);
    v58 = v92[0];
    v59 = objc_msgSend(v52, "beneficiaryID");
    v60 = v55;
    v61 = (uint64_t)v85;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v59);

    v62 = v52;
    swift_retain(v14);
    v63 = v47;
    v64 = v60;
    sub_1001867B8(v61, v51, v54, v58, v62, v64, v63, (uint64_t (*)(uint64_t))sub_1000891D0, v14);
    swift_bridgeObjectRelease(v54);
    swift_release(v58);

    swift_release_n(v14, 3);
    (*(void (**)(uint64_t, uint64_t))(v86 + 8))(v61, v87);
    swift_release(v14);
  }
  else
  {
    v65 = sub_100006F58(v92);
    v66 = Logger.logObject.getter(v65);
    v67 = static os_log_type_t.error.getter(v66);
    if (os_log_type_enabled(v66, v67))
    {
      v68 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v68 = 0;
      _os_log_impl((void *)&_mh_execute_header, v66, v67, "Error removing the beneficiary. No altDSID for owner found.", v68, 2u);
      swift_slowDealloc(v68, -1, -1);
    }

    type metadata accessor for InheritanceError(0);
    v70 = v69;
    v91 = 5;
    v71 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
    v72 = sub_100005150(&qword_10028B350, (uint64_t (*)(uint64_t))type metadata accessor for InheritanceError, (uint64_t)&unk_100216D64);
    _BridgedStoredNSError.init(_:userInfo:)(v92, &v91, v71, v70, v72);
    v73 = (void *)v92[0];
    v74 = (void *)_convertErrorToNSError(_:)(v92[0]);
    sub_1001BA4C0(0, (uint64_t)v74);

    v75 = (void *)_convertErrorToNSError(_:)(v73);
    ((void (**)(_QWORD, void *))a3)[2](a3, v75);

    swift_release_n(v14, 3);
  }
}

void sub_1000B90B0(void *a1, uint64_t a2, void (**a3)(_QWORD, _QWORD))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  id v12;
  void *v13;
  id v14;
  id v15;
  Class isa;
  id v17;
  void *v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  void *v26;
  _QWORD aBlock[5];
  uint64_t v29;
  uint64_t v30;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  v10 = (char *)&aBlock[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = swift_allocObject(&unk_1002651B0, 24, 7);
  *(_QWORD *)(v11 + 16) = a3;
  _Block_copy(a3);
  v12 = sub_1000AB2B8();
  if (v12)
  {
    v13 = v12;
    v14 = objc_msgSend(a1, "beneficiaryID");
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v14);

    v15 = objc_allocWithZone((Class)AKInheritanceAccessKey);
    isa = UUID._bridgeToObjectiveC()().super.isa;
    v17 = objc_msgSend(v15, "initWithBeneficiairyIdentifier:", isa);

    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    objc_msgSend(v13, "setAccessKey:", v17);

    v18 = *(void **)(a2 + OBJC_IVAR____TtC13appleaccountd25InheritanceRequestManager_controller);
    v19 = swift_allocObject(&unk_1002651D8, 32, 7);
    *(_QWORD *)(v19 + 16) = sub_1000891D0;
    *(_QWORD *)(v19 + 24) = v11;
    aBlock[4] = sub_1000B9A34;
    v29 = v19;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1001DC548;
    aBlock[3] = &unk_1002651F0;
    v20 = _Block_copy(aBlock);
    v21 = v29;
    swift_retain(v11);
    swift_release(v21);
    objc_msgSend(v18, "removeBeneficiaryWithInheritanceContext:completion:", v13, v20);
    _Block_release(v20);
    swift_release(v11);
  }
  else
  {
    type metadata accessor for InheritanceError(0);
    v23 = v22;
    v30 = 5;
    v24 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
    v25 = sub_100005150(&qword_10028B350, (uint64_t (*)(uint64_t))type metadata accessor for InheritanceError, (uint64_t)&unk_100216D64);
    _BridgedStoredNSError.init(_:userInfo:)(aBlock, &v30, v24, v23, v25);
    v26 = (void *)aBlock[0];
    v13 = (void *)_convertErrorToNSError(_:)(aBlock[0]);
    ((void (**)(_QWORD, void *))a3)[2](a3, v13);
    swift_release(v11);

  }
}

uint64_t sub_1000B9328()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[4]);
  sub_100006F58(v0 + 6);
  sub_100006F58(v0 + 11);
  sub_100006F58(v0 + 16);
  return swift_deallocObject(v0, 168, 7);
}

uint64_t sub_1000B936C(uint64_t a1)
{
  uint64_t v1;

  return sub_1000B5878(a1, *(_QWORD *)(v1 + 16), *(void (**)(uint64_t))(v1 + 24), *(_QWORD *)(v1 + 32), *(_BYTE *)(v1 + 40), v1 + 48);
}

uint64_t sub_1000B9384(uint64_t a1)
{
  uint64_t v1;

  return sub_1000B5D50(a1, *(void (**)(uint64_t))(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_1000B9390()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

void sub_1000B93B4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v5;

  sub_1000B28E0(a1, a2, a3, a4, a5, *(_QWORD *)(v5 + 16));
}

void sub_1000B93BC(void *a1, uint64_t a2)
{
  uint64_t v2;

  sub_1000B1F68(a1, a2, *(void (**)(uint64_t, unint64_t, uint64_t, unint64_t, uint64_t))(v2 + 16));
}

uint64_t sub_1000B93C4()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000B93EC(uint64_t a1)
{
  uint64_t v1;

  return sub_1000B14B8(a1, *(void (**)(uint64_t))(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_1000B93F8(uint64_t a1)
{
  uint64_t v1;

  return sub_1000B19B8(a1, *(void (**)(uint64_t))(v1 + 16));
}

void sub_1000B9400(objc_class *a1, uint64_t a2)
{
  uint64_t v2;

  sub_10000405C(a1, a2, *(_QWORD *)(v2 + 16), &qword_10028FA68, AATrustedContactHealthInfo_ptr);
}

uint64_t sub_1000B9428(uint64_t a1, char a2)
{
  uint64_t v2;

  return sub_1000B0DF8(a1, a2 & 1, *(void (**)(_QWORD, uint64_t))(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t sub_1000B9438()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 32))
    swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000B9470()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 136) & ~v3;
  v5 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_100006F58((_QWORD *)v0 + 2);
  sub_100006F58((_QWORD *)v0 + 7);
  sub_100006F58((_QWORD *)v0 + 12);
  (*(void (**)(char *, uint64_t))(v2 + 8))(&v0[v4], v1);

  v6 = &v0[(v5 + 15) & 0xFFFFFFFFFFFFFFF8];
  if (*(_QWORD *)v6)
    swift_release(*((_QWORD *)v6 + 1));
  v7 = (v5 + 39) & 0xFFFFFFFFFFFFFFF8;
  v8 = v7 + 16;
  swift_release(*(_QWORD *)&v0[v7 + 8]);
  return swift_deallocObject(v0, v8, v3 | 7);
}

uint64_t sub_1000B9540(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v3 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 136) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_1000B5070(a1, v1 + 16, v1 + v4, *(void **)(v1 + v5), *(_QWORD *)(v1 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v1 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF8) + 8), *(unsigned __int8 *)(v1 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF8) + 16), *(_QWORD *)(v1 + ((v5 + 39) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v1 + ((v5 + 39) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_1000B95C8()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 24))
    swift_release(*(_QWORD *)(v0 + 32));

  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000B9604(uint64_t a1, char a2)
{
  return sub_1000B9CE8(a1, a2, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000B0270);
}

uint64_t sub_1000B9610()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 16))
    swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000B963C()
{
  uint64_t v0;
  uint64_t (*v1)(_QWORD);
  uint64_t result;

  v1 = *(uint64_t (**)(_QWORD))(v0 + 16);
  if (v1)
    return v1(0);
  return result;
}

uint64_t sub_1000B9668()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release(*(_QWORD *)(v0 + 24));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1000B96DC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UUID(0) - 8) + 80);
  return sub_1000AFAF4(a1, *(void (**)(id, uint64_t))(v1 + 16), *(_QWORD *)(v1 + 24), v1 + ((v3 + 32) & ~v3));
}

void sub_1000B971C(objc_class *a1, uint64_t a2)
{
  uint64_t v2;

  sub_10000405C(a1, a2, *(_QWORD *)(v2 + 16), &qword_10028FA80, AAInheritanceInvitation_ptr);
}

uint64_t sub_1000B9744(uint64_t a1, char a2)
{
  uint64_t v2;

  return sub_1000AF540(a1, a2 & 1, *(void (**)(_QWORD, uint64_t))(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t sub_1000B9754(uint64_t a1)
{
  uint64_t v1;

  return sub_1000AEB60(a1, *(void (**)(uint64_t))(v1 + 16), *(void (**)(uint64_t))(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_1000B9760()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_unknownObjectRelease(v0[3]);
  swift_release(v0[5]);
  return swift_deallocObject(v0, 48, 7);
}

void sub_1000B9794(uint64_t a1)
{
  uint64_t v1;

  sub_1000B3478(a1, *(_QWORD *)(v1 + 16), *(uint64_t **)(v1 + 24), *(NSObject **)(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t sub_1000B97A0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 32));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));

  swift_release(*(_QWORD *)(v0 + 64));
  return swift_deallocObject(v0, 72, 7);
}

uint64_t sub_1000B97E4(uint64_t a1, char a2)
{
  uint64_t v2;

  return sub_1000B3E18(a1, a2 & 1, *(void (**)(_QWORD *))(v2 + 16), *(_QWORD *)(v2 + 24), *(void **)(v2 + 32), *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48), *(void **)(v2 + 56), *(_QWORD *)(v2 + 64));
}

uint64_t sub_1000B9818()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);

  v1 = (int *)type metadata accessor for InheritanceInvitationRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = v0 + v4;
  v8 = type metadata accessor for UUID(0);
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8);
  v9(v7, v8);
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[5] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[7] + 8));
  v9(v7 + v1[9], v8);
  sub_10000F494(*(_QWORD *)(v7 + v1[10]), *(_QWORD *)(v7 + v1[10] + 8));
  swift_release(*(_QWORD *)(v0 + v6 + 8));
  return swift_deallocObject(v0, v6 + 16, v5);
}

uint64_t sub_1000B9908(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;

  v3 = *(_QWORD *)(type metadata accessor for InheritanceInvitationRecord(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  return sub_1000AF020(a1, v1 + v4, *(uint64_t (**)(_QWORD))(v1 + ((*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8)));
}

void sub_1000B995C(objc_class *a1, uint64_t a2)
{
  uint64_t v2;

  sub_10000405C(a1, a2, *(_QWORD *)(v2 + 16), &qword_10028FAE8, AALocalContactInfo_ptr);
}

void sub_1000B9984(objc_class *a1, uint64_t a2)
{
  uint64_t v2;

  sub_10000405C(a1, a2, *(_QWORD *)(v2 + 16), (unint64_t *)&unk_10028FAF0, AABenefactorInfo_ptr);
}

uint64_t sub_1000B99B0(uint64_t a1, char a2)
{
  uint64_t v2;

  return sub_1000AE3D4(a1, a2 & 1, *(void (**)(_QWORD, uint64_t))(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32));
}

uint64_t sub_1000B99C0()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000B99EC(uint64_t a1, char a2)
{
  uint64_t v2;

  return sub_1000B4334(a1, a2 & 1, *(_QWORD *)(v2 + 16), *(void (**)(_QWORD, _QWORD))(v2 + 24), *(_QWORD *)(v2 + 32));
}

uint64_t sub_1000B9A00(uint64_t a1, char a2)
{
  uint64_t v2;

  return sub_1000B4B88(a1, a2 & 1, *(void (**)(__n128))(v2 + 16), *(_QWORD *)(v2 + 24), *(void **)(v2 + 32));
}

uint64_t sub_1000B9A10()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000B9A34(uint64_t a1)
{
  uint64_t v1;

  return sub_1000AE150(a1, *(uint64_t (**)(uint64_t))(v1 + 16), *(_QWORD *)(v1 + 24), "Error removing access code with Inheritance Controller:%s");
}

uint64_t sub_1000B9A58(uint64_t a1)
{
  uint64_t v1;

  return sub_1000AD910(a1, *(_QWORD *)(v1 + 16), *(uint64_t (**)(uint64_t))(v1 + 24));
}

uint64_t sub_1000B9A64()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));

  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000B9A98(uint64_t a1)
{
  uint64_t v1;

  return sub_1000AD988(a1, *(void (**)(uint64_t))(v1 + 16), *(_QWORD *)(v1 + 24), *(char **)(v1 + 32), *(void **)(v1 + 40));
}

uint64_t sub_1000B9AA4(uint64_t a1)
{
  uint64_t v1;

  return sub_100183574(a1, *(uint64_t (**)(uint64_t))(v1 + 16));
}

void sub_1000B9AB0(void *a1, uint64_t a2)
{
  uint64_t v2;

  sub_1000ACA14(a1, a2, *(void (**)(uint64_t))(v2 + 16), *(_QWORD *)(v2 + 24), *(void **)(v2 + 32), *(_QWORD *)(v2 + 40));
}

uint64_t sub_1000B9ABC(uint64_t a1)
{
  uint64_t v1;

  return sub_1000AE150(a1, *(uint64_t (**)(uint64_t))(v1 + 16), *(_QWORD *)(v1 + 24), "Error updating access code with Inheritance Controller: %s");
}

uint64_t sub_1000B9ADC(uint64_t a1)
{
  uint64_t v1;

  return sub_1000AE150(a1, *(uint64_t (**)(uint64_t))(v1 + 16), *(_QWORD *)(v1 + 24), "Error updating manifest with Inheritance Controller: %s");
}

uint64_t sub_1000B9B00(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1000ABD28(a1, a2, *(_QWORD *)(v2 + 16), *(uint64_t (**)(uint64_t, uint64_t))(v2 + 24));
}

uint64_t sub_1000B9B0C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 48));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 64));
  return swift_deallocObject(v0, 72, 7);
}

uint64_t sub_1000B9B50(uint64_t a1)
{
  uint64_t v1;

  return sub_1000ABDA4(a1, *(uint64_t (**)(_QWORD, uint64_t))(v1 + 16), *(_QWORD *)(v1 + 24), *(void **)(v1 + 32), *(void **)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 64));
}

uint64_t sub_1000B9B64()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000B9B90(uint64_t a1, char a2)
{
  return sub_1000B9CE8(a1, a2, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000CA884);
}

void sub_1000B9BA0(void *a1, void *a2)
{
  uint64_t v2;

  sub_1000AC00C(a1, a2, *(void (**)(_QWORD, void *))(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32));
}

uint64_t sub_1000B9BAC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 40));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 64));
  swift_release(*(_QWORD *)(v0 + 72));
  return swift_deallocObject(v0, 80, 7);
}

void sub_1000B9BF8(void *a1, uint64_t a2)
{
  uint64_t v2;

  sub_1000B2988(a1, a2, *(void (**)(_QWORD, _QWORD))(v2 + 16), *(_QWORD *)(v2 + 24), *(void **)(v2 + 32), *(void **)(v2 + 40), *(_QWORD *)(v2 + 48), *(_QWORD *)(v2 + 56), *(_QWORD *)(v2 + 64), *(_QWORD *)(v2 + 72));
}

uint64_t sub_1000B9C28()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000B9C5C(uint64_t a1)
{
  uint64_t v1;

  return sub_1000B2E48(a1, *(void **)(v1 + 16), *(_QWORD *)(v1 + 24), *(uint64_t (**)(uint64_t, uint64_t))(v1 + 32));
}

uint64_t sub_1000B9C6C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));

  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000B9C98(uint64_t a1)
{
  uint64_t v1;

  return sub_1000AC444(a1, *(void (**)(id, uint64_t))(v1 + 16), *(_QWORD *)(v1 + 24), *(void **)(v1 + 32));
}

uint64_t sub_1000B9CA8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));

  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000B9CDC(uint64_t a1, char a2)
{
  return sub_1000B9CE8(a1, a2, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000B3138);
}

uint64_t sub_1000B9CE8(uint64_t a1, char a2, uint64_t (*a3)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v3;

  return a3(a1, a2 & 1, v3[2], v3[3], v3[4], v3[5]);
}

uint64_t sub_1000B9CFC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1000ABA04(a1, a2, *(uint64_t (**)(_QWORD, uint64_t))(v2 + 16));
}

_QWORD *sub_1000B9D04(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (_QWORD *)v2;
  }
  return v1;
}

_QWORD *sub_1000B9D40(_QWORD *a1)
{
  sub_100006F58(a1);
  sub_100006F58(a1 + 5);
  sub_100006F58(a1 + 10);
  return a1;
}

uint64_t type metadata accessor for CustodianRecoveryAnalyticsEvent(uint64_t a1)
{
  uint64_t result;

  result = qword_10028FC30;
  if (!qword_10028FC30)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CustodianRecoveryAnalyticsEvent);
  return result;
}

uint64_t sub_1000B9E60(uint64_t a1)
{
  _BYTE v2[8];

  return swift_initClassMetadata2(a1, 0, 0, v2, a1 + qword_1002A8AE0);
}

void sub_1000B9E9C(char a1, void *a2)
{
  id v4;
  id v5;
  uint64_t v6;
  char v7;
  char v8;
  id v9;
  uint64_t v10;
  uint64_t inited;
  unint64_t v12;
  _BYTE v13[56];

  if (objc_msgSend((id)objc_opt_self(AADeviceInfo), "isInternalBuild"))
  {
    v4 = objc_msgSend((id)objc_opt_self(NSProcessInfo), "processInfo");
    v5 = objc_msgSend(v4, "environment");

    v6 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v5, &type metadata for String, &type metadata for String, &protocol witness table for String);
    if (!*(_QWORD *)(v6 + 16))
    {
      swift_bridgeObjectRelease(v6);
      if (!a2)
        goto LABEL_6;
      goto LABEL_5;
    }
    sub_10010A9E0(0xD00000000000001BLL, 0x800000010020AFA0);
    v8 = v7;
    swift_bridgeObjectRelease(v6);
    if ((v8 & 1) != 0)
      return;
  }
  if (a2)
  {
LABEL_5:
    v9 = a2;
    a2 = (void *)sub_1001FE9A0();

  }
LABEL_6:
  v10 = sub_1000080B4(&qword_10028E7F8);
  inited = swift_initStackObject(v10, v13);
  *(_OWORD *)(inited + 16) = xmmword_100218E30;
  *(_QWORD *)(inited + 32) = 0xD000000000000014;
  *(_QWORD *)(inited + 40) = 0x800000010020BD30;
  *(NSNumber *)(inited + 48) = Int._bridgeToObjectiveC()();
  v12 = sub_10001612C(inited);
  dispatch thunk of AAFTimedAnalyticsEvent.completeEvent(withSuccess:error:additionalData:)(a1 & 1, a2, v12);
  swift_bridgeObjectRelease(v12);

}

void sub_1000BA034()
{
  _swift_stdlib_reportUnimplementedInitializer("appleaccountd.CustodianRecoveryAnalyticsEvent", 45, "init(eventName:initialData:)", 28, 0);
  __break(1u);
}

id sub_1000BA060()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CustodianRecoveryAnalyticsEvent(0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_1000BA098()
{
  return type metadata accessor for CustodianRecoveryAnalyticsEvent(0);
}

uint64_t sub_1000BA0A0()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  uint64_t v3;

  v3 = type metadata accessor for CloudDataProtectionHealthCheck(0);
  v0 = sub_1000080B4(&qword_10028FF68);
  result = String.init<A>(describing:)(&v3, v0);
  qword_10028FC80 = result;
  *(_QWORD *)algn_10028FC88 = v2;
  return result;
}

uint64_t sub_1000BA0E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  __n128 v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD v17[2];
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21[5];

  v1 = v0;
  v2 = sub_1000080B4(&qword_10028FF60);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (char *)v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10028ADD8 != -1)
    swift_once(&qword_10028ADD8, sub_100046D78);
  v7 = type metadata accessor for Logger(0);
  v8 = sub_100005288(v7, (uint64_t)qword_1002A8A08);
  v9 = Logger.logObject.getter(v8);
  v11 = static os_log_type_t.default.getter(v10);
  if (os_log_type_enabled(v9, v11))
  {
    v17[1] = v8;
    v18 = v1;
    v12 = (uint8_t *)swift_slowAlloc(12, -1);
    v13 = swift_slowAlloc(32, -1);
    v21[0] = v13;
    *(_DWORD *)v12 = 136315138;
    if (qword_10028AE50 != -1)
      swift_once(&qword_10028AE50, sub_1000BA0A0);
    v15 = qword_10028FC80;
    v14 = *(_QWORD *)algn_10028FC88;
    swift_bridgeObjectRetain(*(_QWORD *)algn_10028FC88);
    v19 = sub_1001DEF4C(v15, v14, v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20);
    swift_bridgeObjectRelease(v14);
    _os_log_impl((void *)&_mh_execute_header, v9, v11, "%s - CDP not enabled, posting a CDP repair CFU.", v12, 0xCu);
    swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1, -1);
    swift_slowDealloc(v12, -1, -1);

    v1 = v18;
  }
  else
  {

  }
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, v1 + OBJC_IVAR____TtC13appleaccountd30CloudDataProtectionHealthCheck__cdpFollowUpHandler, v2);
  Dependency.wrappedValue.getter(v21, v2);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  sub_10000BFB0(1);
  return sub_100006F58(v21);
}

void sub_1000BA510(uint64_t a1, uint64_t a2, void *a3, void (*a4)(uint64_t), uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  __n128 v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t);
  void (*v31)(uint64_t);
  uint64_t v32;
  uint64_t v33;

  if (a1)
  {
    swift_errorRetain(a1);
    if (qword_10028AE10 != -1)
      swift_once(&qword_10028AE10, sub_100046EBC);
    v9 = type metadata accessor for Logger(0);
    sub_100005288(v9, (uint64_t)qword_1002A8AB0);
    swift_errorRetain(a1);
    v10 = swift_errorRetain(a1);
    v11 = Logger.logObject.getter(v10);
    v13 = static os_log_type_t.default.getter(v12);
    if (os_log_type_enabled(v11, v13))
    {
      v29 = a5;
      v30 = a4;
      v14 = swift_slowAlloc(22, -1);
      v15 = (uint64_t *)swift_slowAlloc(8, -1);
      v16 = swift_slowAlloc(32, -1);
      v33 = v16;
      *(_DWORD *)v14 = 136315394;
      if (qword_10028AE50 != -1)
        swift_once(&qword_10028AE50, sub_1000BA0A0);
      v17 = qword_10028FC80;
      v18 = *(_QWORD *)algn_10028FC88;
      swift_bridgeObjectRetain(*(_QWORD *)algn_10028FC88);
      v32 = sub_1001DEF4C(v17, v18, &v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, &v33);
      swift_bridgeObjectRelease(v18);
      *(_WORD *)(v14 + 12) = 2112;
      swift_errorRetain(a1);
      v19 = _swift_stdlib_bridgeErrorToNSError(a1);
      v32 = v19;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, &v33);
      *v15 = v19;
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, v11, v13, "%s - Error performing Walrus Status Mismatch Detection: %@", (uint8_t *)v14, 0x16u);
      v20 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v15, 1, v20);
      swift_slowDealloc(v15, -1, -1);
      swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v16, -1, -1);
      swift_slowDealloc(v14, -1, -1);

      swift_errorRelease(a1);
      a5 = v29;
      a4 = v30;
      goto LABEL_16;
    }
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    swift_errorRelease(a1);
LABEL_15:

    goto LABEL_16;
  }
  if (qword_10028AE10 != -1)
    swift_once(&qword_10028AE10, sub_100046EBC);
  v21 = type metadata accessor for Logger(0);
  v22 = sub_100005288(v21, (uint64_t)qword_1002A8AB0);
  v11 = Logger.logObject.getter(v22);
  v24 = static os_log_type_t.default.getter(v23);
  if (!os_log_type_enabled(v11, v24))
    goto LABEL_15;
  v31 = a4;
  v25 = (uint8_t *)swift_slowAlloc(12, -1);
  v26 = swift_slowAlloc(32, -1);
  v33 = v26;
  *(_DWORD *)v25 = 136315138;
  if (qword_10028AE50 != -1)
    swift_once(&qword_10028AE50, sub_1000BA0A0);
  v27 = qword_10028FC80;
  v28 = *(_QWORD *)algn_10028FC88;
  swift_bridgeObjectRetain(*(_QWORD *)algn_10028FC88);
  v32 = sub_1001DEF4C(v27, v28, &v33);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, &v33);
  swift_bridgeObjectRelease(v28);
  _os_log_impl((void *)&_mh_execute_header, v11, v24, "%s - Successfully performed Walrus Status Mismatch Detection", v25, 0xCu);
  swift_arrayDestroy(v26, 1, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v26, -1, -1);
  swift_slowDealloc(v25, -1, -1);

  a4 = v31;
LABEL_16:
  sub_1000BA930(a3, a4, a5);
}

void sub_1000BA930(void *a1, void (*a2)(uint64_t), uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  unint64_t v29;
  void (*v30)(void);
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(void);
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;

  v44 = a3;
  v45 = (void (*)(void))a2;
  v5 = sub_1000080B4(&qword_10028D068);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  v9 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1000080B4((uint64_t *)&unk_10028CC80);
  v42 = *(_QWORD *)(v10 - 8);
  v43 = v10;
  __chkstk_darwin(v10, v11);
  v13 = (char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_1000080B4(&qword_10028E858);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14, v16);
  v18 = (char *)&v39 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = v3;
  sub_1000BB1C4(a1);
  if (v20)
  {
    v21 = v20;
    v45();
    swift_errorRelease(v21);
  }
  else
  {
    v39 = v9;
    v40 = v6;
    v41 = v5;
    (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v18, v3 + OBJC_IVAR____TtC13appleaccountd30CloudDataProtectionHealthCheck__recoveryFactorsController, v14);
    Dependency.wrappedValue.getter(&v49, v14);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
    v22 = sub_10000732C(&v49, v51);
    v24 = v42;
    v23 = v43;
    (*(void (**)(char *, uint64_t, uint64_t))(v42 + 16))(v13, *v22 + OBJC_IVAR____TtC13appleaccountd25RecoveryFactorsController__cdpController, v43);
    Dependency.wrappedValue.getter(&v46, v23);
    (*(void (**)(char *, uint64_t))(v24 + 8))(v13, v23);
    sub_10000732C(&v46, v48);
    LOBYTE(v23) = sub_100047714();
    sub_100006F58(&v46);
    sub_100006F58(&v49);
    if ((v23 & 1) != 0)
    {
      v25 = v39;
      v26 = v40;
      v27 = v41;
      (*(void (**)(char *, uint64_t, uint64_t))(v40 + 16))(v39, v19 + OBJC_IVAR____TtC13appleaccountd30CloudDataProtectionHealthCheck__notificationManager, v41);
      Dependency.wrappedValue.getter(&v46, v27);
      (*(void (**)(char *, uint64_t))(v26 + 8))(v25, v27);
      sub_10000732C(&v46, v48);
      v28 = AAFollowUpIdentifierRecoveryKeyMismatch;
      v29 = sub_100015C80((uint64_t)_swiftEmptyArrayStorage);
      *(_QWORD *)&v49 = v28;
      *((_QWORD *)&v49 + 1) = v29;
      v51 = 0;
      v52 = 0;
      v50 = 0;
      v53 = 0;
      sub_1001CFA90(&v49);
      swift_bridgeObjectRelease(v29);

      sub_100006F58(&v46);
      sub_1000BD1D4((void (*)(uint64_t))v45, v44);
    }
    else
    {
      v30 = v45;
      if (qword_10028ADD8 != -1)
        swift_once(&qword_10028ADD8, sub_100046D78);
      v31 = type metadata accessor for Logger(0);
      v32 = sub_100005288(v31, (uint64_t)qword_1002A8A08);
      v33 = Logger.logObject.getter(v32);
      v34 = static os_log_type_t.error.getter(v33);
      if (os_log_type_enabled(v33, v34))
      {
        v35 = (uint8_t *)swift_slowAlloc(12, -1);
        v36 = swift_slowAlloc(32, -1);
        *(_QWORD *)&v49 = v36;
        *(_DWORD *)v35 = 136315138;
        if (qword_10028AE50 != -1)
          swift_once(&qword_10028AE50, sub_1000BA0A0);
        v37 = qword_10028FC80;
        v38 = *(_QWORD *)algn_10028FC88;
        swift_bridgeObjectRetain(*(_QWORD *)algn_10028FC88);
        v46 = sub_1001DEF4C(v37, v38, (uint64_t *)&v49);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, &v47);
        swift_bridgeObjectRelease(v38);
        _os_log_impl((void *)&_mh_execute_header, v33, v34, "%s - RK Mismatch exists, proceeding to post RK Mismatch Repair CFU.", v35, 0xCu);
        swift_arrayDestroy(v36, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v36, -1, -1);
        swift_slowDealloc(v35, -1, -1);

      }
      else
      {

      }
      sub_1000BAD70();
      ((void (*)(_QWORD))v30)(0);
    }
  }
}

uint64_t sub_1000BAD70()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  void (*v37)(char *, uint64_t);
  _QWORD *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49[4];
  uint64_t v50[6];

  v1 = v0;
  v47 = *v0;
  v2 = type metadata accessor for URL(0);
  v3 = *(_QWORD *)(v2 - 8);
  v5 = __chkstk_darwin(v2, v4);
  v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5, v8);
  v10 = (char *)&v39 - v9;
  v11 = sub_1000080B4(&qword_10028C448);
  v45 = *(_QWORD *)(v11 - 8);
  v46 = v11;
  __chkstk_darwin(v11, v12);
  v14 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_1000080B4(&qword_10028E858);
  v44 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15, v16);
  v18 = (char *)&v39 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10028ADD8 != -1)
    swift_once(&qword_10028ADD8, sub_100046D78);
  v19 = type metadata accessor for Logger(0);
  v20 = sub_100005288(v19, (uint64_t)qword_1002A8A08);
  v21 = Logger.logObject.getter(v20);
  v22 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v21, v22))
  {
    v39 = v1;
    v40 = v7;
    v41 = v3;
    v42 = v10;
    v43 = v2;
    v23 = (uint8_t *)swift_slowAlloc(12, -1);
    v24 = swift_slowAlloc(32, -1);
    v50[0] = v24;
    *(_DWORD *)v23 = 136315138;
    if (qword_10028AE50 != -1)
      swift_once(&qword_10028AE50, sub_1000BA0A0);
    v25 = qword_10028FC80;
    v26 = *(_QWORD *)algn_10028FC88;
    swift_bridgeObjectRetain(*(_QWORD *)algn_10028FC88);
    v48 = sub_1001DEF4C(v25, v26, v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, v49);
    swift_bridgeObjectRelease(v26);
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "%s - recovery key mismatch found, posting CFU to verify RK", v23, 0xCu);
    swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v24, -1, -1);
    swift_slowDealloc(v23, -1, -1);

    v10 = v42;
    v2 = v43;
    v7 = v40;
    v3 = v41;
    v1 = v39;
  }
  else
  {

  }
  v27 = v44;
  (*(void (**)(char *, uint64_t, uint64_t))(v44 + 16))(v18, (uint64_t)v1 + OBJC_IVAR____TtC13appleaccountd30CloudDataProtectionHealthCheck__recoveryFactorsController, v15);
  Dependency.wrappedValue.getter(v50, v15);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v18, v15);
  v28 = sub_10000732C(v50, v50[3]);
  v29 = swift_allocObject(&unk_100265708, 32, 7);
  v30 = v47;
  *(_QWORD *)(v29 + 16) = v1;
  *(_QWORD *)(v29 + 24) = v30;
  v31 = *v28 + OBJC_IVAR____TtC13appleaccountd25RecoveryFactorsController__custodianStorage;
  v33 = v45;
  v32 = v46;
  (*(void (**)(char *, uint64_t, uint64_t))(v45 + 16))(v14, v31, v46);
  swift_retain(v1);
  Dependency.wrappedValue.getter(&v48, v32);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v14, v32);
  v34 = sub_10000732C(&v48, v49[2]);
  v35 = swift_allocObject(&unk_100265730, 32, 7);
  *(_QWORD *)(v35 + 16) = sub_1000C11E4;
  *(_QWORD *)(v35 + 24) = v29;
  v36 = sub_10000732C((_QWORD *)(*v34 + 16), *(_QWORD *)(*v34 + 40));
  type metadata accessor for LocalCache();
  swift_retain(v29);
  sub_10000840C();
  URL.appendingPathComponent(_:isDirectory:)(0x6169646F74737543, 0xEF64726F6365526ELL, 1);
  v37 = *(void (**)(char *, uint64_t))(v3 + 8);
  v37(v7, v2);
  sub_10000732C((_QWORD *)(*v36 + 16), *(_QWORD *)(*v36 + 40));
  sub_10009D320((uint64_t)v10, (uint64_t)sub_1000C1214, v35);
  v37(v10, v2);
  swift_release(v35);
  sub_100006F58(&v48);
  swift_release(v29);
  return sub_100006F58(v50);
}

void sub_1000BB1C4(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  NSObject *v14;
  __n128 v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char v21;
  Class isa;
  NSString v23;
  char *v24;
  uint64_t v25;
  NSObject *v26;
  __n128 v27;
  os_log_type_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45[3];
  uint64_t v46;

  v2 = v1;
  v4 = sub_1000080B4(&qword_10028FA50);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v42 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1000080B4((uint64_t *)&unk_10028CC80);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v12 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10028ADD8 != -1)
    swift_once(&qword_10028ADD8, sub_100046D78);
  v13 = type metadata accessor for Logger(0);
  v41 = sub_100005288(v13, (uint64_t)qword_1002A8A08);
  v14 = Logger.logObject.getter(v41);
  v16 = static os_log_type_t.default.getter(v15);
  if (os_log_type_enabled(v14, v16))
  {
    v37 = v5;
    v38 = v4;
    v39 = a1;
    v40 = v2;
    v17 = (uint8_t *)swift_slowAlloc(12, -1);
    v18 = swift_slowAlloc(32, -1);
    v45[0] = v18;
    *(_DWORD *)v17 = 136315138;
    if (qword_10028AE50 != -1)
      swift_once(&qword_10028AE50, sub_1000BA0A0);
    v20 = qword_10028FC80;
    v19 = *(_QWORD *)algn_10028FC88;
    swift_bridgeObjectRetain(*(_QWORD *)algn_10028FC88);
    v43 = sub_1001DEF4C(v20, v19, v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, &v44);
    swift_bridgeObjectRelease(v19);
    _os_log_impl((void *)&_mh_execute_header, v14, v16, "%s - Checking device escrow record state.", v17, 0xCu);
    swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v18, -1, -1);
    swift_slowDealloc(v17, -1, -1);

    a1 = v39;
    v2 = v40;
    v5 = v37;
    v4 = v38;
  }
  else
  {

  }
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, v2 + OBJC_IVAR____TtC13appleaccountd30CloudDataProtectionHealthCheck__cdpController, v8);
  Dependency.wrappedValue.getter(v45, v8);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  sub_10000732C(v45, v46);
  v21 = sub_100047B74();
  sub_100006F58(v45);
  isa = Int._bridgeToObjectiveC()().super.super.isa;
  v23 = String._bridgeToObjectiveC()();
  objc_msgSend(a1, "setAccountProperty:forKey:", isa, v23);

  v24 = v42;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v42, v2 + OBJC_IVAR____TtC13appleaccountd30CloudDataProtectionHealthCheck__accountStore, v4);
  Dependency.wrappedValue.getter(v45, v4);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v24, v4);
  sub_10000732C(v45, v46);
  sub_100046994((uint64_t)a1);
  v25 = sub_100006F58(v45);
  v26 = Logger.logObject.getter(v25);
  v28 = static os_log_type_t.default.getter(v27);
  if (os_log_type_enabled(v26, v28))
  {
    v29 = swift_slowAlloc(22, -1);
    v30 = swift_slowAlloc(64, -1);
    v45[0] = v30;
    *(_DWORD *)v29 = 136315394;
    if (qword_10028AE50 != -1)
      swift_once(&qword_10028AE50, sub_1000BA0A0);
    v31 = qword_10028FC80;
    v32 = *(_QWORD *)algn_10028FC88;
    swift_bridgeObjectRetain(*(_QWORD *)algn_10028FC88);
    v43 = sub_1001DEF4C(v31, v32, v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, &v44);
    swift_bridgeObjectRelease(v32);
    *(_WORD *)(v29 + 12) = 2080;
    LOBYTE(v43) = v21;
    v33 = String.init<A>(describing:)(&v43, &type metadata for EscrowRecordState);
    v35 = v34;
    v43 = sub_1001DEF4C(v33, v34, v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, &v44);
    swift_bridgeObjectRelease(v35);
    _os_log_impl((void *)&_mh_execute_header, v26, v28, "%s - Checked device escrow record state and got: %s", (uint8_t *)v29, 0x16u);
    swift_arrayDestroy(v30, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v30, -1, -1);
    swift_slowDealloc(v29, -1, -1);

  }
  else
  {

  }
  __asm { BR              X10 }
}

uint64_t sub_1000BB720(_QWORD *a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  NSString v14;
  id v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  NSObject *v23;
  int v24;
  _BOOL4 v25;
  unint64_t v26;
  uint64_t v27;
  id v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  _QWORD *v36;
  uint8_t *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  Class v41;
  NSString v42;
  uint64_t v43;
  void *v44;
  id v45;
  id v46;
  uint64_t v47;
  id v48;
  char *v49;
  BOOL v50;
  void *v51;
  Class isa;
  NSString v53;
  uint64_t v54;
  NSObject *v55;
  os_log_type_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  void *v62;
  id v63;
  id v64;
  uint64_t v65;
  id v66;
  NSObject *v67;
  os_log_type_t v68;
  uint64_t v69;
  uint8_t *v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  os_log_type_t v74;
  const char *v75;
  os_log_type_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  _BYTE *v80;
  _BYTE v82[12];
  int v83;
  uint64_t v84;
  _QWORD *v85;
  id v86;
  id v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  const char *v93;
  uint64_t v94;
  _BYTE *v95;
  uint64_t v96;
  void *v97;
  uint64_t v98[3];
  uint64_t v99;
  _OWORD v100[2];

  v3 = v2;
  v92 = 0;
  v6 = sub_1000080B4(&qword_10028FA50);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  v95 = &v82[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = sub_1000080B4((uint64_t *)&unk_10028CC80);
  v94 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10, v11);
  v13 = &v82[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v93 = "_cdpFollowUpHandler";
  v14 = String._bridgeToObjectiveC()();
  v15 = objc_msgSend(a1, "accountPropertyForKey:", v14);

  if (v15)
  {
    _bridgeAnyObjectToAny(_:)(v100, v15);
    swift_unknownObjectRelease(v15);
  }
  else
  {
    memset(v100, 0, sizeof(v100));
  }
  sub_100006988((uint64_t)v100, (uint64_t)v98);
  v96 = v6;
  v91 = a2;
  if (!v99)
  {
    sub_10008C388((uint64_t)v98);
    goto LABEL_13;
  }
  v16 = sub_1000067D4(0, (unint64_t *)&qword_10028E8B0, NSNumber_ptr);
  if ((swift_dynamicCast(&v97, v98, (char *)&type metadata for Any + 8, v16, 6) & 1) == 0)
  {
LABEL_13:
    sub_1000BC338(0);
    goto LABEL_14;
  }
  v17 = v97;
  sub_1000BC338(v97);
  if (v17)
  {
    v85 = a1;
    v18 = qword_10028ADD8;
    v19 = v17;
    if (v18 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v20 = type metadata accessor for Logger(0);
    v21 = sub_100005288(v20, (uint64_t)qword_1002A8A08);
    v22 = v19;
    v88 = v21;
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.error.getter(v23);
    v87 = v23;
    v25 = os_log_type_enabled(v23, (os_log_type_t)v24);
    v86 = v22;
    v89 = v7;
    v90 = v3;
    if (!v25)
    {

      goto LABEL_27;
    }
    v83 = v24;
    v3 = swift_slowAlloc(22, -1);
    a1 = (_QWORD *)swift_slowAlloc(8, -1);
    v84 = swift_slowAlloc(32, -1);
    v98[0] = v84;
    *(_DWORD *)v3 = 136315394;
    if (qword_10028AE50 != -1)
      goto LABEL_55;
    while (1)
    {
      v27 = qword_10028FC80;
      v26 = *(_QWORD *)algn_10028FC88;
      swift_bridgeObjectRetain(*(_QWORD *)algn_10028FC88);
      *(_QWORD *)&v100[0] = sub_1001DEF4C(v27, v26, v98);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v100, (char *)v100 + 8);
      swift_bridgeObjectRelease(v26);
      *(_WORD *)(v3 + 12) = 2112;
      v22 = v86;
      *(_QWORD *)&v100[0] = v86;
      v28 = v86;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v100, (char *)v100 + 8);
      *a1 = v17;

      v29 = v87;
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)v87, (os_log_type_t)v83, "    %s - unrecoverable escrow record, number of previous     failures: %@", (uint8_t *)v3, 0x16u);
      v30 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(a1, 1, v30);
      swift_slowDealloc(a1, -1, -1);
      v31 = v84;
      swift_arrayDestroy(v84, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v31, -1, -1);
      swift_slowDealloc(v3, -1, -1);

      v7 = v89;
      v3 = v90;
LABEL_27:
      v49 = (char *)objc_msgSend(v22, "integerValue");
      v50 = __OFADD__(v49, 1);
      v51 = v49 + 1;
      a1 = v85;
      if (!v50)
        break;
      __break(1u);
LABEL_55:
      swift_once(&qword_10028AE50, sub_1000BA0A0);
    }
    v87 = v51;
    isa = Int._bridgeToObjectiveC()().super.super.isa;
    v53 = String._bridgeToObjectiveC()();
    objc_msgSend(a1, "setAccountProperty:forKey:", isa, v53);

    v55 = Logger.logObject.getter(v54);
    v56 = static os_log_type_t.error.getter(v55);
    if (os_log_type_enabled(v55, v56))
    {
      v57 = swift_slowAlloc(22, -1);
      v58 = swift_slowAlloc(32, -1);
      v98[0] = v58;
      *(_DWORD *)v57 = 136315394;
      if (qword_10028AE50 != -1)
        swift_once(&qword_10028AE50, sub_1000BA0A0);
      v59 = qword_10028FC80;
      v60 = *(_QWORD *)algn_10028FC88;
      swift_bridgeObjectRetain(*(_QWORD *)algn_10028FC88);
      *(_QWORD *)&v100[0] = sub_1001DEF4C(v59, v60, v98);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v100, (char *)v100 + 8);
      swift_bridgeObjectRelease(v60);
      *(_WORD *)(v57 + 12) = 2048;
      *(_QWORD *)&v100[0] = v87;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v100, (char *)v100 + 8);
      _os_log_impl((void *)&_mh_execute_header, v55, v56, "    %s - unrecoverable escrow record,     incremented failure count to: %ld", (uint8_t *)v57, 0x16u);
      swift_arrayDestroy(v58, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v58, -1, -1);
      swift_slowDealloc(v57, -1, -1);

      v7 = v89;
      v3 = v90;
      v22 = v86;
    }
    else
    {

    }
    v61 = v94;
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v94 + 16))(v13, v3 + OBJC_IVAR____TtC13appleaccountd30CloudDataProtectionHealthCheck__cdpController, v10);
    Dependency.wrappedValue.getter(v98, v10);
    (*(void (**)(_BYTE *, uint64_t))(v61 + 8))(v13, v10);
    v62 = *(void **)(*sub_10000732C(v98, v99) + 16);
    *(_QWORD *)&v100[0] = 0;
    v63 = objc_msgSend(v62, "walrusStatus:", v100);
    if (*(_QWORD *)&v100[0])
    {
      v64 = *(id *)&v100[0];
      swift_willThrow(v64);

      v65 = sub_100006F58(v98);
      v47 = 0;
    }
    else
    {
      v66 = v63;
      v65 = sub_100006F58(v98);
      if (v66 == (id)1)
      {
        v47 = v92;
        if ((uint64_t)v87 >= 1)
        {
          v67 = Logger.logObject.getter(v65);
          v68 = static os_log_type_t.error.getter(v67);
          if (os_log_type_enabled(v67, v68))
          {
            v69 = v7;
            v70 = (uint8_t *)swift_slowAlloc(12, -1);
            v71 = swift_slowAlloc(32, -1);
            v98[0] = v71;
            *(_DWORD *)v70 = 136315138;
            if (qword_10028AE50 != -1)
              swift_once(&qword_10028AE50, sub_1000BA0A0);
            v72 = qword_10028FC80;
            v73 = *(_QWORD *)algn_10028FC88;
            swift_bridgeObjectRetain(*(_QWORD *)algn_10028FC88);
            *(_QWORD *)&v100[0] = sub_1001DEF4C(v72, v73, v98);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(v100, (char *)v100 + 8);
            swift_bridgeObjectRelease(v73);
            v74 = v68;
            v75 = "%s - unrecoverable escrow record detected more than once for ADP user, proceeding to verify passcode scenario";
            goto LABEL_47;
          }
LABEL_48:

          goto LABEL_49;
        }
LABEL_50:

        goto LABEL_51;
      }
      v47 = v92;
    }
    if ((uint64_t)v87 >= 3)
    {
      v67 = Logger.logObject.getter(v65);
      v76 = static os_log_type_t.error.getter(v67);
      if (os_log_type_enabled(v67, v76))
      {
        v92 = v47;
        v69 = v7;
        v70 = (uint8_t *)swift_slowAlloc(12, -1);
        v71 = swift_slowAlloc(32, -1);
        v98[0] = v71;
        *(_DWORD *)v70 = 136315138;
        if (qword_10028AE50 != -1)
          swift_once(&qword_10028AE50, sub_1000BA0A0);
        v77 = qword_10028FC80;
        v78 = *(_QWORD *)algn_10028FC88;
        swift_bridgeObjectRetain(*(_QWORD *)algn_10028FC88);
        *(_QWORD *)&v100[0] = sub_1001DEF4C(v77, v78, v98);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v100, (char *)v100 + 8);
        swift_bridgeObjectRelease(v78);
        v74 = v76;
        v75 = "%s - escrow record check failed more than twice for non ADP user, proceeding to verify passcode scenario";
LABEL_47:
        _os_log_impl((void *)&_mh_execute_header, v67, v74, v75, v70, 0xCu);
        swift_arrayDestroy(v71, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v71, -1, -1);
        swift_slowDealloc(v70, -1, -1);

        v7 = v69;
        v3 = v90;
        v47 = v92;
        v22 = v86;
LABEL_49:
        sub_1000BC93C(v91 & 1);
        goto LABEL_50;
      }
      goto LABEL_48;
    }
    goto LABEL_50;
  }
LABEL_14:
  if (qword_10028ADD8 != -1)
    swift_once(&qword_10028ADD8, sub_100046D78);
  v32 = type metadata accessor for Logger(0);
  v33 = sub_100005288(v32, (uint64_t)qword_1002A8A08);
  v34 = Logger.logObject.getter(v33);
  v35 = static os_log_type_t.error.getter(v34);
  if (os_log_type_enabled(v34, v35))
  {
    v89 = v7;
    v90 = v3;
    v36 = a1;
    v37 = (uint8_t *)swift_slowAlloc(12, -1);
    v38 = swift_slowAlloc(32, -1);
    v98[0] = v38;
    *(_DWORD *)v37 = 136315138;
    if (qword_10028AE50 != -1)
      swift_once(&qword_10028AE50, sub_1000BA0A0);
    v40 = qword_10028FC80;
    v39 = *(_QWORD *)algn_10028FC88;
    swift_bridgeObjectRetain(*(_QWORD *)algn_10028FC88);
    *(_QWORD *)&v100[0] = sub_1001DEF4C(v40, v39, v98);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v100, (char *)v100 + 8);
    swift_bridgeObjectRelease(v39);
    _os_log_impl((void *)&_mh_execute_header, v34, v35, "%s - unrecoverable escrow record and failure count is missing... default to 1", v37, 0xCu);
    swift_arrayDestroy(v38, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v38, -1, -1);
    swift_slowDealloc(v37, -1, -1);

    a1 = v36;
    v7 = v89;
    v3 = v90;
  }
  else
  {

  }
  v41 = Int._bridgeToObjectiveC()().super.super.isa;
  v42 = String._bridgeToObjectiveC()();
  objc_msgSend(a1, "setAccountProperty:forKey:", v41, v42);

  v43 = v94;
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v94 + 16))(v13, v3 + OBJC_IVAR____TtC13appleaccountd30CloudDataProtectionHealthCheck__cdpController, v10);
  Dependency.wrappedValue.getter(v98, v10);
  (*(void (**)(_BYTE *, uint64_t))(v43 + 8))(v13, v10);
  v44 = *(void **)(*sub_10000732C(v98, v99) + 16);
  *(_QWORD *)&v100[0] = 0;
  v45 = objc_msgSend(v44, "walrusStatus:", v100);
  if (*(_QWORD *)&v100[0])
  {
    v46 = *(id *)&v100[0];
    swift_willThrow(v46);

    sub_100006F58(v98);
    v22 = 0;
    v47 = 0;
  }
  else
  {
    v48 = v45;
    sub_100006F58(v98);
    if (v48 == (id)1)
      sub_1000BC93C(v91 & 1);
    v22 = 0;
    v47 = v92;
  }
LABEL_51:
  v80 = v95;
  v79 = v96;
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v7 + 16))(v95, v3 + OBJC_IVAR____TtC13appleaccountd30CloudDataProtectionHealthCheck__accountStore, v96);
  Dependency.wrappedValue.getter(v98, v79);
  (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v80, v79);
  sub_10000732C(v98, v99);
  sub_100046994((uint64_t)a1);
  if (v47)
    swift_errorRelease(v47);

  return sub_100006F58(v98);
}

void sub_1000BC338(void *a1)
{
  NSObject *v1;
  NSObject *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  Class isa;
  id v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  __n128 v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  void *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  NSString v28;
  NSString v29;
  uint64_t v30;
  uint64_t v31;
  __n128 v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  unint64_t v42;
  uint64_t v43;
  void *v44;
  void *v45;
  void *v46;
  id v47;
  id v48;
  uint64_t v49;
  NSObject *v50;
  uint64_t v51;
  uint64_t v52[5];

  v2 = v1;
  v4 = sub_1000080B4(&qword_10028FA50);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (char *)&v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1
    && (sub_1000067D4(0, (unint64_t *)&qword_10028E8B0, NSNumber_ptr),
        isa = NSNumber.init(integerLiteral:)(0).super.super.isa,
        v10 = a1,
        v11 = static NSObject.== infix(_:_:)(v10, isa),
        v10,
        v10,
        isa,
        (v11 & 1) == 0))
  {
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v30 = type metadata accessor for Logger(0);
    v31 = sub_100005288(v30, (uint64_t)qword_1002A8A08);
    v50 = Logger.logObject.getter(v31);
    v33 = static os_log_type_t.default.getter(v32);
    if (os_log_type_enabled(v50, v33))
    {
      v34 = (uint8_t *)swift_slowAlloc(12, -1);
      v35 = swift_slowAlloc(32, -1);
      v52[0] = v35;
      *(_DWORD *)v34 = 136315138;
      if (qword_10028AE50 != -1)
        swift_once(&qword_10028AE50, sub_1000BA0A0);
      v36 = qword_10028FC80;
      v37 = *(_QWORD *)algn_10028FC88;
      swift_bridgeObjectRetain(*(_QWORD *)algn_10028FC88);
      v51 = sub_1001DEF4C(v36, v37, v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, v52);
      swift_bridgeObjectRelease(v37);
      _os_log_impl((void *)&_mh_execute_header, v50, v33, "%s - Not posting iCSC Loss Detected event. Previous known state should be viable", v34, 0xCu);
      swift_arrayDestroy(v35, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v35, -1, -1);
      swift_slowDealloc(v34, -1, -1);

    }
    else
    {

    }
  }
  else
  {
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v12 = type metadata accessor for Logger(0);
    v13 = sub_100005288(v12, (uint64_t)qword_1002A8A08);
    v14 = Logger.logObject.getter(v13);
    v16 = static os_log_type_t.default.getter(v15);
    if (os_log_type_enabled(v14, v16))
    {
      v50 = v2;
      v17 = (uint8_t *)swift_slowAlloc(12, -1);
      v18 = swift_slowAlloc(32, -1);
      v52[0] = v18;
      *(_DWORD *)v17 = 136315138;
      if (qword_10028AE50 != -1)
        swift_once(&qword_10028AE50, sub_1000BA0A0);
      v19 = qword_10028FC80;
      v20 = *(_QWORD *)algn_10028FC88;
      swift_bridgeObjectRetain(*(_QWORD *)algn_10028FC88);
      v51 = sub_1001DEF4C(v19, v20, v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, v52);
      swift_bridgeObjectRelease(v20);
      _os_log_impl((void *)&_mh_execute_header, v14, v16, "%s - Posting iCSC Loss Detected event because escrow record state transitioned from viable to unviable", v17, 0xCu);
      swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v18, -1, -1);
      swift_slowDealloc(v17, -1, -1);

      v2 = v50;
    }
    else
    {

    }
    static String._unconditionallyBridgeFromObjectiveC(_:)(kAAAnalyticsiCSCLossDetectedEvent);
    v22 = v21;
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, (uint64_t)v2 + OBJC_IVAR____TtC13appleaccountd30CloudDataProtectionHealthCheck__accountStore, v4);
    Dependency.wrappedValue.getter(v52, v4);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    v23 = objc_msgSend(*(id *)(*sub_10000732C(v52, v52[3]) + 16), "aa_primaryAppleAccount");
    if (v23
      && (v24 = v23, v25 = objc_msgSend(v23, "aa_altDSID"), v24, v25))
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
      v27 = v26;

    }
    else
    {
      v27 = 0;
    }
    v28 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v22);
    if (v27)
    {
      v29 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v27);
    }
    else
    {
      v29 = 0;
    }
    v38 = objc_msgSend((id)objc_opt_self(AAFAnalyticsEvent), "analyticsEventWithName:altDSID:flowID:", v28, v29, 0);

    sub_100006F58(v52);
    if (v38)
    {
      type metadata accessor for AAError(0);
      v40 = v39;
      v51 = -4419;
      v41 = v38;
      v42 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
      v43 = sub_100005150((unint64_t *)&qword_10028B6B0, (uint64_t (*)(uint64_t))type metadata accessor for AAError, (uint64_t)&unk_100218588);
      _BridgedStoredNSError.init(_:userInfo:)(v52, &v51, v42, v40, v43);
      v44 = (void *)v52[0];
      v45 = (void *)_convertErrorToNSError(_:)(v52[0]);

      objc_msgSend(v41, "populateUnderlyingErrorsStartingWithRootError:", v45);
      v46 = (void *)objc_opt_self(AAAnalyticsRTCReporter);
      v47 = v41;
      v48 = objc_msgSend(v46, "reporter");
      objc_msgSend(v48, "sendEvent:", v47);

    }
  }
}

uint64_t sub_1000BC93C(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26[5];

  v2 = v1;
  v4 = sub_1000080B4(&qword_10028FF60);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a1 & 1) != 0)
    LODWORD(v9) = 3;
  else
    LODWORD(v9) = 2;
  if (qword_10028ADD8 != -1)
    swift_once(&qword_10028ADD8, sub_100046D78);
  v10 = type metadata accessor for Logger(0);
  v11 = sub_100005288(v10, (uint64_t)qword_1002A8A08);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v12, v13))
  {
    v21 = v11;
    v22 = v2;
    v23 = v9;
    v14 = swift_slowAlloc(22, -1);
    v15 = swift_slowAlloc(64, -1);
    v26[0] = v15;
    *(_DWORD *)v14 = 136315394;
    if (qword_10028AE50 != -1)
      swift_once(&qword_10028AE50, sub_1000BA0A0);
    v16 = qword_10028FC80;
    v9 = *(_QWORD *)algn_10028FC88;
    swift_bridgeObjectRetain(*(_QWORD *)algn_10028FC88);
    v24 = sub_1001DEF4C(v16, v9, v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25);
    swift_bridgeObjectRelease(v9);
    *(_WORD *)(v14 + 12) = 2080;
    LOBYTE(v9) = v23;
    LOBYTE(v24) = v23;
    v17 = String.init<A>(describing:)(&v24, &type metadata for FollowUpType);
    v19 = v18;
    v24 = sub_1001DEF4C(v17, v18, v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25);
    swift_bridgeObjectRelease(v19);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "%s - device has passcode, posting %s CFU to verify passcode", (uint8_t *)v14, 0x16u);
    swift_arrayDestroy(v15, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v15, -1, -1);
    swift_slowDealloc(v14, -1, -1);

    v2 = v22;
  }
  else
  {

  }
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v2 + OBJC_IVAR____TtC13appleaccountd30CloudDataProtectionHealthCheck__cdpFollowUpHandler, v4);
  Dependency.wrappedValue.getter(v26, v4);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  sub_10000BFB0(v9);
  return sub_100006F58(v26);
}

void sub_1000BCDCC(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  NSObject *v8;
  __n128 v9;
  os_log_type_t v10;
  _QWORD *v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  Class isa;
  NSString v18;
  uint64_t v19;
  NSObject *v20;
  __n128 v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  _QWORD v27[2];
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31[5];

  v2 = sub_1000080B4(&qword_10028FA50);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (char *)v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10028ADD8 != -1)
    swift_once(&qword_10028ADD8, sub_100046D78);
  v7 = type metadata accessor for Logger(0);
  v28 = sub_100005288(v7, (uint64_t)qword_1002A8A08);
  v8 = Logger.logObject.getter(v28);
  v10 = static os_log_type_t.default.getter(v9);
  v11 = &unk_100218000;
  if (os_log_type_enabled(v8, v10))
  {
    v27[0] = a1;
    v12 = (uint8_t *)swift_slowAlloc(12, -1);
    v13 = swift_slowAlloc(32, -1);
    v31[0] = v13;
    *(_DWORD *)v12 = 136315138;
    if (qword_10028AE50 != -1)
      swift_once(&qword_10028AE50, sub_1000BA0A0);
    v14 = qword_10028FC80;
    v15 = *(_QWORD *)algn_10028FC88;
    swift_bridgeObjectRetain(*(_QWORD *)algn_10028FC88);
    v29 = sub_1001DEF4C(v14, v15, v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30);
    swift_bridgeObjectRelease(v15);
    _os_log_impl((void *)&_mh_execute_header, v8, v10, "%s - escrow record is available", v12, 0xCu);
    swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1, -1);
    swift_slowDealloc(v12, -1, -1);

    a1 = (void *)v27[0];
    v11 = (_QWORD *)&unk_100218000;
  }
  else
  {

  }
  v16 = v27[1];
  sub_1000BF70C((uint64_t (*)(void))&static os_log_type_t.info.getter, "%s - device has passcode and escrow record, clearing CFU to verify passcode", (void (*)(_QWORD))sub_10000C290, (uint64_t)"%s - failed to clear CDP confirm existing secret followup: %s");
  isa = Int._bridgeToObjectiveC()().super.super.isa;
  v18 = String._bridgeToObjectiveC()();
  objc_msgSend(a1, "setAccountProperty:forKey:", isa, v18);

  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, v16 + OBJC_IVAR____TtC13appleaccountd30CloudDataProtectionHealthCheck__accountStore, v2);
  Dependency.wrappedValue.getter(v31, v2);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  sub_10000732C(v31, v31[3]);
  sub_100046994((uint64_t)a1);
  v19 = sub_100006F58(v31);
  v20 = Logger.logObject.getter(v19);
  v22 = static os_log_type_t.default.getter(v21);
  if (os_log_type_enabled(v20, v22))
  {
    v23 = (uint8_t *)swift_slowAlloc(12, -1);
    v24 = swift_slowAlloc(32, -1);
    v31[0] = v24;
    *(_DWORD *)v23 = v11[379];
    if (qword_10028AE50 != -1)
      swift_once(&qword_10028AE50, sub_1000BA0A0);
    v25 = qword_10028FC80;
    v26 = *(_QWORD *)algn_10028FC88;
    swift_bridgeObjectRetain(*(_QWORD *)algn_10028FC88);
    v29 = sub_1001DEF4C(v25, v26, v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30);
    swift_bridgeObjectRelease(v26);
    _os_log_impl((void *)&_mh_execute_header, v20, v22, "%s - escrow record is available - resetting previous failures to ZERO", v23, 0xCu);
    swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v24, -1, -1);
    swift_slowDealloc(v23, -1, -1);
  }

}

void sub_1000BD1D4(void (*a1)(uint64_t), uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t, uint64_t);
  void (*v17)(char *, uint64_t);
  void *v18;
  id v19;
  id v20;
  id v21;
  id v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  __n128 v28;
  os_log_type_t v29;
  _BOOL4 v30;
  char *v31;
  uint8_t *v32;
  void *v33;
  void *v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  __n128 v39;
  os_log_type_t v40;
  _BOOL4 v41;
  uint64_t v42;
  uint8_t *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  NSObject *v50;
  __n128 v51;
  os_log_type_t v52;
  _UNKNOWN **v53;
  uint8_t *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  NSObject *v59;
  __n128 v60;
  os_log_type_t v61;
  uint8_t *v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  id v66;
  unsigned int v67;
  uint64_t v68;
  NSObject *v69;
  __n128 v70;
  os_log_type_t v71;
  uint8_t *v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  void *v80;
  uint64_t v81;
  void (*v82)(char *, uint64_t);
  uint64_t v83;
  void (*v84)(char *, uint64_t, uint64_t);
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void (*v89)(uint64_t);
  uint64_t v90;
  uint64_t aBlock[3];
  void *v92;
  void (*v93)(uint64_t);
  uint64_t v94;
  uint64_t v95;
  uint64_t v96[4];
  __int128 v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char v101;

  v88 = a2;
  v89 = a1;
  v87 = sub_1000080B4(qword_10028DF38);
  v86 = *(_QWORD *)(v87 - 8);
  __chkstk_darwin(v87, v3);
  v85 = (char *)&v81 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_1000080B4(&qword_10028D068);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  v9 = (char *)&v81 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1000080B4((uint64_t *)&unk_10028CC80);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  v14 = (char *)&v81 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v90 = v2;
  v15 = v2 + OBJC_IVAR____TtC13appleaccountd30CloudDataProtectionHealthCheck__cdpController;
  v16 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v16(v14, v2 + OBJC_IVAR____TtC13appleaccountd30CloudDataProtectionHealthCheck__cdpController, v10);
  Dependency.wrappedValue.getter(aBlock, v10);
  v17 = *(void (**)(char *, uint64_t))(v11 + 8);
  v17(v14, v10);
  v18 = *(void **)(*sub_10000732C(aBlock, (uint64_t)v92) + 16);
  *(_QWORD *)&v97 = 0;
  v19 = objc_msgSend(v18, "walrusStatus:", &v97);
  if ((_QWORD)v97)
  {
    v20 = (id)v97;
    swift_willThrow(v20);

    sub_100006F58(aBlock);
LABEL_14:
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v48 = type metadata accessor for Logger(0);
    v49 = sub_100005288(v48, (uint64_t)qword_1002A8A08);
    v50 = Logger.logObject.getter(v49);
    v52 = static os_log_type_t.default.getter(v51);
    v53 = &off_10028A000;
    if (os_log_type_enabled(v50, v52))
    {
      v54 = (uint8_t *)swift_slowAlloc(12, -1);
      v55 = swift_slowAlloc(32, -1);
      aBlock[0] = v55;
      *(_DWORD *)v54 = 136315138;
      if (qword_10028AE50 != -1)
        swift_once(&qword_10028AE50, sub_1000BA0A0);
      v56 = qword_10028FC80;
      v57 = *(_QWORD *)algn_10028FC88;
      swift_bridgeObjectRetain(*(_QWORD *)algn_10028FC88);
      *(_QWORD *)&v97 = sub_1001DEF4C(v56, v57, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, (char *)&v97 + 8);
      swift_bridgeObjectRelease(v57);
      _os_log_impl((void *)&_mh_execute_header, v50, v52, "%s - Walrus is disabled, skipping remaining checks", v54, 0xCu);
      swift_arrayDestroy(v55, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v55, -1, -1);
      swift_slowDealloc(v54, -1, -1);

      v53 = &off_10028A000;
    }
    else
    {

    }
    v59 = Logger.logObject.getter(v58);
    v61 = static os_log_type_t.default.getter(v60);
    if (os_log_type_enabled(v59, v61))
    {
      v62 = (uint8_t *)swift_slowAlloc(12, -1);
      v63 = swift_slowAlloc(32, -1);
      aBlock[0] = v63;
      *(_DWORD *)v62 = 136315138;
      if (v53[458] != (_UNKNOWN *)-1)
        swift_once(&qword_10028AE50, sub_1000BA0A0);
      v64 = qword_10028FC80;
      v65 = *(_QWORD *)algn_10028FC88;
      swift_bridgeObjectRetain(*(_QWORD *)algn_10028FC88);
      *(_QWORD *)&v97 = sub_1001DEF4C(v64, v65, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, (char *)&v97 + 8);
      swift_bridgeObjectRelease(v65);
      _os_log_impl((void *)&_mh_execute_header, v59, v61, "%s - Also, tearing down any left over Walrus CFUs", v62, 0xCu);
      swift_arrayDestroy(v63, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v63, -1, -1);
      swift_slowDealloc(v62, -1, -1);
    }

    sub_1000BF2B0();
    sub_1000BF70C((uint64_t (*)(void))&static os_log_type_t.default.getter, "%s - trying to tear down existing CDP state CFUs.", (void (*)(_QWORD))sub_10000C3D8, (uint64_t)"%s - failed to tear down CDP CFU: %s");
    v89(0);
    return;
  }
  v21 = v19;
  v82 = v17;
  v83 = v15;
  v84 = v16;
  sub_100006F58(aBlock);
  if (v21 != (id)1)
    goto LABEL_14;
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, v90 + OBJC_IVAR____TtC13appleaccountd30CloudDataProtectionHealthCheck__notificationManager, v5);
  Dependency.wrappedValue.getter(aBlock, v5);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  sub_10000732C(aBlock, (uint64_t)v92);
  v22 = AAFollowUpIdentifierADPUserMissingHealthyCustodian;
  v23 = sub_100015C80((uint64_t)_swiftEmptyArrayStorage);
  *(_QWORD *)&v97 = v22;
  *((_QWORD *)&v97 + 1) = v23;
  v99 = 0;
  v100 = 0;
  v98 = 0;
  v101 = 0;
  sub_1001CFA90(&v97);
  swift_bridgeObjectRelease(v23);

  sub_100006F58(aBlock);
  v84(v14, v83, v10);
  Dependency.wrappedValue.getter(&v95, v10);
  v82(v14, v10);
  v24 = *sub_10000732C(&v95, v96[2]);
  if (qword_10028ADB0 != -1)
    swift_once(&qword_10028ADB0, sub_100046CC8);
  v25 = type metadata accessor for Logger(0);
  v26 = sub_100005288(v25, (uint64_t)qword_1002A8990);
  v27 = Logger.logObject.getter(v26);
  v29 = static os_log_type_t.default.getter(v28);
  v30 = os_log_type_enabled(v27, v29);
  v31 = v85;
  if (v30)
  {
    v32 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v32 = 0;
    _os_log_impl((void *)&_mh_execute_header, v27, v29, "Initiating walrus status repair", v32, 2u);
    swift_slowDealloc(v32, -1, -1);
  }

  v33 = *(void **)(v24 + 16);
  v93 = sub_100046F80;
  v94 = 0;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1001DC548;
  v92 = &unk_1002656A8;
  v34 = _Block_copy(aBlock);
  v35 = v33;
  objc_msgSend(v35, "repairWalrusStatusWithCompletion:", v34);
  _Block_release(v34);

  sub_100006F58(&v95);
  v36 = v90;
  if (qword_10028ADD8 != -1)
    swift_once(&qword_10028ADD8, sub_100046D78);
  v37 = sub_100005288(v25, (uint64_t)qword_1002A8A08);
  v38 = Logger.logObject.getter(v37);
  v40 = static os_log_type_t.default.getter(v39);
  v41 = os_log_type_enabled(v38, v40);
  v42 = v86;
  if (v41)
  {
    v84 = (void (*)(char *, uint64_t, uint64_t))v37;
    v43 = (uint8_t *)swift_slowAlloc(12, -1);
    v44 = swift_slowAlloc(32, -1);
    aBlock[0] = v44;
    *(_DWORD *)v43 = 136315138;
    if (qword_10028AE50 != -1)
      swift_once(&qword_10028AE50, sub_1000BA0A0);
    v45 = qword_10028FC80;
    v46 = *(_QWORD *)algn_10028FC88;
    swift_bridgeObjectRetain(*(_QWORD *)algn_10028FC88);
    v95 = sub_1001DEF4C(v45, v46, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v95, v96);
    swift_bridgeObjectRelease(v46);
    _os_log_impl((void *)&_mh_execute_header, v38, v40, "    %s - Walrus is enabled, proceeding     with checking for passcode presence and other recovery factors.", v43, 0xCu);
    swift_arrayDestroy(v44, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v44, -1, -1);
    swift_slowDealloc(v43, -1, -1);

    v47 = v87;
  }
  else
  {

    v47 = v87;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v42 + 16))(v31, v36 + OBJC_IVAR____TtC13appleaccountd30CloudDataProtectionHealthCheck__deviceState, v47);
  Dependency.wrappedValue.getter(aBlock, v47);
  (*(void (**)(char *, uint64_t))(v42 + 8))(v31, v47);
  v66 = objc_msgSend(objc_allocWithZone((Class)AKDevice), "init");
  v67 = objc_msgSend(v66, "isProtectedWithPasscode");

  v68 = sub_100006F58(aBlock);
  if (v67)
  {
    v69 = Logger.logObject.getter(v68);
    v71 = static os_log_type_t.default.getter(v70);
    if (os_log_type_enabled(v69, v71))
    {
      v72 = (uint8_t *)swift_slowAlloc(12, -1);
      v73 = swift_slowAlloc(32, -1);
      aBlock[0] = v73;
      *(_DWORD *)v72 = 136315138;
      if (qword_10028AE50 != -1)
        swift_once(&qword_10028AE50, sub_1000BA0A0);
      v74 = qword_10028FC80;
      v75 = *(_QWORD *)algn_10028FC88;
      swift_bridgeObjectRetain(*(_QWORD *)algn_10028FC88);
      v95 = sub_1001DEF4C(v74, v75, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v95, v96);
      swift_bridgeObjectRelease(v75);
      _os_log_impl((void *)&_mh_execute_header, v69, v71, "    %s - escrow record is available or could not be verified,     proceeding to check other recovery factors availability.", v72, 0xCu);
      swift_arrayDestroy(v73, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v73, -1, -1);
      swift_slowDealloc(v72, -1, -1);
    }

    sub_1000BE19C((uint64_t)v89, v88);
  }
  else
  {
    sub_1000BDC88();
    type metadata accessor for AAError(0);
    v77 = v76;
    v95 = -4407;
    v78 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
    v79 = sub_100005150((unint64_t *)&qword_10028B6B0, (uint64_t (*)(uint64_t))type metadata accessor for AAError, (uint64_t)&unk_100218588);
    _BridgedStoredNSError.init(_:userInfo:)(aBlock, &v95, v78, v77, v79);
    v80 = (void *)aBlock[0];
    v89(aBlock[0]);

  }
}

id sub_1000BDC88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  id result;
  void *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30[5];

  v1 = v0;
  v2 = sub_1000080B4((uint64_t *)&unk_10028CC80);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1000080B4(&qword_10028FF60);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10028ADD8 != -1)
    swift_once(&qword_10028ADD8, sub_100046D78);
  v12 = type metadata accessor for Logger(0);
  v13 = sub_100005288(v12, (uint64_t)qword_1002A8A08);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v14, v15))
  {
    v23 = v8;
    v24 = v1;
    v25 = v3;
    v26 = v2;
    v27 = v13;
    v16 = (uint8_t *)swift_slowAlloc(12, -1);
    v17 = swift_slowAlloc(32, -1);
    v30[0] = v17;
    *(_DWORD *)v16 = 136315138;
    if (qword_10028AE50 != -1)
      swift_once(&qword_10028AE50, sub_1000BA0A0);
    v19 = qword_10028FC80;
    v18 = *(_QWORD *)algn_10028FC88;
    swift_bridgeObjectRetain(*(_QWORD *)algn_10028FC88);
    v28 = sub_1001DEF4C(v19, v18, v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29);
    swift_bridgeObjectRelease(v18);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "%s - device has NO passcode, posting CFU to create and verify passcode", v16, 0xCu);
    swift_arrayDestroy(v17, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v17, -1, -1);
    swift_slowDealloc(v16, -1, -1);

    v2 = v26;
    v1 = v24;
    v3 = v25;
    v8 = v23;
  }
  else
  {

  }
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, v1 + OBJC_IVAR____TtC13appleaccountd30CloudDataProtectionHealthCheck__cdpFollowUpHandler, v7);
  Dependency.wrappedValue.getter(v30, v7);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, v1 + OBJC_IVAR____TtC13appleaccountd30CloudDataProtectionHealthCheck__cdpController, v2);
  Dependency.wrappedValue.getter(&v28, v2);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  result = objc_msgSend((id)objc_opt_self(CDPAccount), "sharedInstance");
  if (result)
  {
    v21 = result;
    v22 = objc_msgSend(result, "contextForPrimaryAccount");

    sub_10000BFB0(0);
    sub_100006F58(&v28);
    return (id)sub_100006F58(v30);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000BE19C(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  __n128 v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28[5];

  v3 = v2;
  v6 = *v2;
  v7 = sub_1000080B4(&qword_10028E858);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10028ADD8 != -1)
    swift_once(&qword_10028ADD8, sub_100046D78);
  v12 = type metadata accessor for Logger(0);
  v13 = sub_100005288(v12, (uint64_t)qword_1002A8A08);
  v14 = Logger.logObject.getter(v13);
  v16 = static os_log_type_t.default.getter(v15);
  if (os_log_type_enabled(v14, v16))
  {
    v23 = v8;
    v24 = a1;
    v25 = v6;
    v26 = a2;
    v17 = (uint8_t *)swift_slowAlloc(12, -1);
    v18 = swift_slowAlloc(32, -1);
    v28[0] = v18;
    *(_DWORD *)v17 = 136315138;
    if (qword_10028AE50 != -1)
      swift_once(&qword_10028AE50, sub_1000BA0A0);
    v20 = qword_10028FC80;
    v19 = *(_QWORD *)algn_10028FC88;
    swift_bridgeObjectRetain(*(_QWORD *)algn_10028FC88);
    v27 = sub_1001DEF4C(v20, v19, v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, v28);
    swift_bridgeObjectRelease(v19);
    _os_log_impl((void *)&_mh_execute_header, v14, v16, "%s - checking available recovery factors.", v17, 0xCu);
    swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v18, -1, -1);
    swift_slowDealloc(v17, -1, -1);

    v6 = v25;
    a2 = v26;
    v8 = v23;
    a1 = v24;
  }
  else
  {

  }
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, (uint64_t)v3 + OBJC_IVAR____TtC13appleaccountd30CloudDataProtectionHealthCheck__recoveryFactorsController, v7);
  Dependency.wrappedValue.getter(v28, v7);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  sub_10000732C(v28, v28[3]);
  v21 = (_QWORD *)swift_allocObject(&unk_1002656E0, 48, 7);
  v21[2] = v3;
  v21[3] = a1;
  v21[4] = a2;
  v21[5] = v6;
  swift_retain(v3);
  swift_retain(a2);
  sub_1000C3248((uint64_t)sub_1000C0D48, (uint64_t)v21);
  swift_release(v21);
  return sub_100006F58(v28);
}

uint64_t sub_1000BE444()
{
  return sub_1000BF70C((uint64_t (*)(void))&static os_log_type_t.default.getter, "%s - trying to tear down existing state repair CFUs.", (void (*)(_QWORD))sub_10000BF60, (uint64_t)"%s - failed to tear down state repair CFU: %s");
}

uint64_t sub_1000BE468()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = v0 + OBJC_IVAR____TtC13appleaccountd30CloudDataProtectionHealthCheck__cdpController;
  v2 = sub_1000080B4((uint64_t *)&unk_10028CC80);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  v3 = v0 + OBJC_IVAR____TtC13appleaccountd30CloudDataProtectionHealthCheck__notificationManager;
  v4 = sub_1000080B4(&qword_10028D068);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  v5 = v0 + OBJC_IVAR____TtC13appleaccountd30CloudDataProtectionHealthCheck__recoveryFactorsController;
  v6 = sub_1000080B4(&qword_10028E858);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = v0 + OBJC_IVAR____TtC13appleaccountd30CloudDataProtectionHealthCheck__deviceState;
  v8 = sub_1000080B4(qword_10028DF38);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = v0 + OBJC_IVAR____TtC13appleaccountd30CloudDataProtectionHealthCheck__cdpFollowUpHandler;
  v10 = sub_1000080B4(&qword_10028FF60);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  v11 = v0 + OBJC_IVAR____TtC13appleaccountd30CloudDataProtectionHealthCheck__accountStore;
  v12 = sub_1000080B4(&qword_10028FA50);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
  v13 = v0 + OBJC_IVAR____TtC13appleaccountd30CloudDataProtectionHealthCheck__urlBagProvider;
  v14 = sub_1000080B4(&qword_10028CCE8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1000BE5C4()
{
  return type metadata accessor for CloudDataProtectionHealthCheck(0);
}

uint64_t type metadata accessor for CloudDataProtectionHealthCheck(uint64_t a1)
{
  uint64_t result;

  result = qword_10028FCF0;
  if (!qword_10028FCF0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CloudDataProtectionHealthCheck);
  return result;
}

void sub_1000BE608(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD v16[7];

  sub_100017464(319, &qword_10028BDA8, &qword_10028C8D0);
  if (v3 <= 0x3F)
  {
    v16[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_100017464(319, (unint64_t *)&qword_10028CFD8, &qword_100294AE0);
    if (v5 <= 0x3F)
    {
      v16[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_100017464(319, &qword_10028E278, &qword_10028E280);
      if (v7 <= 0x3F)
      {
        v16[2] = *(_QWORD *)(v6 - 8) + 64;
        sub_100017464(319, &qword_10028DD88, (uint64_t *)&unk_10028DD90);
        if (v9 <= 0x3F)
        {
          v16[3] = *(_QWORD *)(v8 - 8) + 64;
          sub_100017464(319, &qword_10028FD00, (uint64_t *)&unk_10028FD08);
          if (v11 <= 0x3F)
          {
            v16[4] = *(_QWORD *)(v10 - 8) + 64;
            sub_100017464(319, (unint64_t *)&qword_100293810, &qword_10028C860);
            if (v13 <= 0x3F)
            {
              v16[5] = *(_QWORD *)(v12 - 8) + 64;
              sub_100017464(319, &qword_10028C8D8, (uint64_t *)&unk_10028C8E0);
              if (v15 <= 0x3F)
              {
                v16[6] = *(_QWORD *)(v14 - 8) + 64;
                swift_updateClassMetadata2(a1, 256, 7, v16, a1 + 80);
              }
            }
          }
        }
      }
    }
  }
}

void sub_1000BE788(uint64_t a1, uint64_t a2, void (*a3)(_QWORD), uint64_t a4)
{
  sub_1000C031C(a3, a4);
}

void sub_1000BE7B0(uint64_t a1, char a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD v22[3];
  _BYTE v23[8];
  uint64_t v24;
  void *v25;

  if ((a2 & 1) != 0)
  {
    swift_errorRetain(a1);
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v11 = type metadata accessor for Logger(0);
    sub_100005288(v11, (uint64_t)qword_1002A8A08);
    swift_errorRetain(a1);
    v12 = swift_errorRetain(a1);
    v13 = Logger.logObject.getter(v12);
    v14 = static os_log_type_t.error.getter(v13);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = swift_slowAlloc(22, -1);
      v16 = swift_slowAlloc(64, -1);
      v25 = (void *)v16;
      *(_DWORD *)v15 = 136315394;
      if (qword_10028AE50 != -1)
        swift_once(&qword_10028AE50, sub_1000BA0A0);
      v17 = qword_10028FC80;
      v18 = *(_QWORD *)algn_10028FC88;
      swift_bridgeObjectRetain(*(_QWORD *)algn_10028FC88);
      v24 = sub_1001DEF4C(v17, v18, (uint64_t *)&v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25);
      swift_bridgeObjectRelease(v18);
      *(_WORD *)(v15 + 12) = 2080;
      swift_getErrorValue(a1, v23, v22);
      v19 = Error.localizedDescription.getter(v22[1], v22[2]);
      v21 = v20;
      v24 = sub_1001DEF4C(v19, v20, (uint64_t *)&v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25);
      swift_bridgeObjectRelease(v21);
      sub_10006AEB4(a1, 1);
      sub_10006AEB4(a1, 1);
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "%s - error checking recovery factors: %s", (uint8_t *)v15, 0x16u);
      swift_arrayDestroy(v16, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v16, -1, -1);
      swift_slowDealloc(v15, -1, -1);
    }
    else
    {
      sub_10006AEB4(a1, 1);
      sub_10006AEB4(a1, 1);
    }

    swift_errorRetain(a1);
    a4(a1);
    sub_10006AEB4(a1, 1);
    sub_10006AEB4(a1, 1);
  }
  else if (a1 == 1)
  {
    sub_1000BEAF0();
    type metadata accessor for AAError(0);
    v7 = v6;
    v24 = -4407;
    v8 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
    v9 = sub_100005150((unint64_t *)&qword_10028B6B0, (uint64_t (*)(uint64_t))type metadata accessor for AAError, (uint64_t)&unk_100218588);
    _BridgedStoredNSError.init(_:userInfo:)(&v25, &v24, v8, v7, v9);
    v10 = v25;
    a4((uint64_t)v25);

  }
  else
  {
    sub_1000BF2B0();
    sub_1000BF70C((uint64_t (*)(void))&static os_log_type_t.default.getter, "%s - trying to tear down existing CDP state CFUs.", (void (*)(_QWORD))sub_10000C3D8, (uint64_t)"%s - failed to tear down CDP CFU: %s");
    a4(0);
  }
}

uint64_t sub_1000BEAF0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24[4];
  __int128 v25[3];

  v1 = v0;
  v2 = sub_1000080B4(&qword_10028D068);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for TrustedContactUserNotification(0);
  __chkstk_darwin(v7, v8);
  v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10028ADD8 != -1)
    swift_once(&qword_10028ADD8, sub_100046D78);
  v11 = type metadata accessor for Logger(0);
  v12 = sub_100005288(v11, (uint64_t)qword_1002A8A08);
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v20 = v7;
    v21 = v1;
    v22 = v3;
    v15 = (uint8_t *)swift_slowAlloc(12, -1);
    v16 = swift_slowAlloc(32, -1);
    *(_QWORD *)&v25[0] = v16;
    *(_DWORD *)v15 = 136315138;
    if (qword_10028AE50 != -1)
      swift_once(&qword_10028AE50, sub_1000BA0A0);
    v18 = qword_10028FC80;
    v17 = *(_QWORD *)algn_10028FC88;
    swift_bridgeObjectRetain(*(_QWORD *)algn_10028FC88);
    v23 = sub_1001DEF4C(v18, v17, (uint64_t *)v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, v24);
    swift_bridgeObjectRelease(v17);
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "%s - no recovery factors found, posting CFU to add recovery factors", v15, 0xCu);
    swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v16, -1, -1);
    swift_slowDealloc(v15, -1, -1);

    v1 = v21;
    v3 = v22;
    v7 = v20;
  }
  else
  {

  }
  sub_1000BF2B0();
  sub_1000BF70C((uint64_t (*)(void))&static os_log_type_t.default.getter, "%s - trying to tear down existing CDP state CFUs.", (void (*)(_QWORD))sub_10000C3D8, (uint64_t)"%s - failed to tear down CDP CFU: %s");
  swift_storeEnumTagMultiPayload(v10, v7, 11);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, v1 + OBJC_IVAR____TtC13appleaccountd30CloudDataProtectionHealthCheck__notificationManager, v2);
  Dependency.wrappedValue.getter(&v23, v2);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  sub_10000732C(&v23, v24[2]);
  sub_100171484((uint64_t)v25);
  sub_1001CEA64(v25);
  sub_100043418((uint64_t)v25);
  sub_1000C0D58((uint64_t)v10);
  return sub_100006F58(&v23);
}

void sub_1000BEDE4(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL *v18;
  void *v19;
  id v20;
  id v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  os_log_type_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  void (**v34)(char *, uint64_t, uint64_t);
  id v35[2];
  id v36;
  uint64_t v37[4];
  __int128 v38;
  uint64_t v39;

  v6 = sub_1000080B4(&qword_10028D068);
  v35[0] = *(id *)(v6 - 8);
  __chkstk_darwin(v6, v7);
  v9 = (char *)v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1000080B4((uint64_t *)&unk_10028CC80);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  v14 = (char *)v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for TrustedContactUserNotification(0);
  __chkstk_darwin(v15, v16);
  v18 = (BOOL *)v35 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 1) != 0)
  {
    swift_errorRetain(a1);
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v23 = type metadata accessor for Logger(0);
    sub_100005288(v23, (uint64_t)qword_1002A8A08);
    swift_errorRetain(a1);
    v24 = swift_errorRetain(a1);
    v35[0] = (id)Logger.logObject.getter(v24);
    v25 = static os_log_type_t.error.getter(v35[0]);
    if (os_log_type_enabled((os_log_t)v35[0], v25))
    {
      v26 = swift_slowAlloc(22, -1);
      v27 = swift_slowAlloc(64, -1);
      *(_QWORD *)&v38 = v27;
      *(_DWORD *)v26 = 136315394;
      if (qword_10028AE50 != -1)
        swift_once(&qword_10028AE50, sub_1000BA0A0);
      v28 = qword_10028FC80;
      v29 = *(_QWORD *)algn_10028FC88;
      swift_bridgeObjectRetain(*(_QWORD *)algn_10028FC88);
      v36 = (id)sub_1001DEF4C(v28, v29, (uint64_t *)&v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, v37);
      swift_bridgeObjectRelease(v29);
      *(_WORD *)(v26 + 12) = 2080;
      v36 = (id)a1;
      swift_errorRetain(a1);
      v30 = sub_1000080B4(&qword_10028E850);
      v31 = String.init<A>(describing:)(&v36, v30);
      v33 = v32;
      v36 = (id)sub_1001DEF4C(v31, v32, (uint64_t *)&v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, v37);
      swift_bridgeObjectRelease(v33);
      sub_10006AEB4(a1, 1);
      sub_10006AEB4(a1, 1);
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)v35[0], v25, "%s - failed to fetch healthy recovery contact status: %s", (uint8_t *)v26, 0x16u);
      swift_arrayDestroy(v27, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v27, -1, -1);
      swift_slowDealloc(v26, -1, -1);

      sub_10006AEB4(a1, 1);
    }
    else
    {
      sub_10006AEB4(a1, 1);
      sub_10006AEB4(a1, 1);
      swift_errorRelease(a1);

    }
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v14, a3 + OBJC_IVAR____TtC13appleaccountd30CloudDataProtectionHealthCheck__cdpController, v10);
    Dependency.wrappedValue.getter(&v38, v10);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
    v19 = *(void **)(*sub_10000732C(&v38, v39) + 16);
    v36 = 0;
    v20 = objc_msgSend(v19, "walrusStatus:", &v36);
    if (v36)
    {
      v21 = v36;
      swift_willThrow(v21);

      v22 = 0;
    }
    else
    {
      v22 = v20 == (id)1;
    }
    v34 = (void (**)(char *, uint64_t, uint64_t))v35[0];
    *v18 = v22;
    v18[1] = a1 & 1;
    swift_storeEnumTagMultiPayload(v18, v15, 7);
    sub_100006F58(&v38);
    v34[2](v9, a3 + OBJC_IVAR____TtC13appleaccountd30CloudDataProtectionHealthCheck__notificationManager, v6);
    Dependency.wrappedValue.getter(&v36, v6);
    ((void (*)(char *, uint64_t))v34[1])(v9, v6);
    sub_10000732C(&v36, v37[2]);
    sub_100171484((uint64_t)&v38);
    sub_1001CEA64(&v38);
    sub_100043418((uint64_t)&v38);
    sub_1000C0D58((uint64_t)v18);
    sub_100006F58(&v36);
  }
}

uint64_t sub_1000BF2B0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  __n128 v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t, uint64_t);
  void (*v18)(char *, uint64_t);
  id v19;
  unint64_t v20;
  id v21;
  unint64_t v22;
  id v23;
  unint64_t v24;
  id v25;
  unint64_t v26;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[5];
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;

  v1 = v0;
  v2 = sub_1000080B4(&qword_10028D068);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10028ADD8 != -1)
    swift_once(&qword_10028ADD8, sub_100046D78);
  v7 = type metadata accessor for Logger(0);
  v8 = sub_100005288(v7, (uint64_t)qword_1002A8A08);
  v9 = Logger.logObject.getter(v8);
  v11 = static os_log_type_t.default.getter(v10);
  if (os_log_type_enabled(v9, v11))
  {
    v29 = v3;
    v12 = (uint8_t *)swift_slowAlloc(12, -1);
    v13 = swift_slowAlloc(32, -1);
    *(_QWORD *)&v46 = v13;
    *(_DWORD *)v12 = 136315138;
    if (qword_10028AE50 != -1)
      swift_once(&qword_10028AE50, sub_1000BA0A0);
    v14 = qword_10028FC80;
    v15 = *(_QWORD *)algn_10028FC88;
    swift_bridgeObjectRetain(*(_QWORD *)algn_10028FC88);
    *(_QWORD *)&v41 = sub_1001DEF4C(v14, v15, (uint64_t *)&v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, (char *)&v41 + 8);
    swift_bridgeObjectRelease(v15);
    _os_log_impl((void *)&_mh_execute_header, v9, v11, "%s - trying to tear down existing AA CFUs.", v12, 0xCu);
    swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1, -1);
    swift_slowDealloc(v12, -1, -1);

    v3 = v29;
  }
  else
  {

  }
  v16 = v1 + OBJC_IVAR____TtC13appleaccountd30CloudDataProtectionHealthCheck__notificationManager;
  v17 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  v17(v6, v16, v2);
  Dependency.wrappedValue.getter(&v41, v2);
  v18 = *(void (**)(char *, uint64_t))(v3 + 8);
  v18(v6, v2);
  sub_10000732C(&v41, v43);
  v19 = AAFollowUpIdentifierCustodianWalrusRemoved;
  v20 = sub_100015C80((uint64_t)_swiftEmptyArrayStorage);
  *(_QWORD *)&v46 = v19;
  *((_QWORD *)&v46 + 1) = v20;
  v48 = 0;
  v49 = 0;
  v47 = 0;
  v50 = 0;
  sub_1001CFA90(&v46);
  swift_bridgeObjectRelease(v20);

  sub_100006F58(&v41);
  v17(v6, v16, v2);
  Dependency.wrappedValue.getter(&v36, v2);
  v18(v6, v2);
  sub_10000732C(&v36, v38);
  v21 = AAFollowUpIdentifierWalrusUserRecoveryFactorsMissing;
  v22 = sub_100015C80((uint64_t)_swiftEmptyArrayStorage);
  *(_QWORD *)&v41 = v21;
  *((_QWORD *)&v41 + 1) = v22;
  v43 = 0;
  v44 = 0;
  v42 = 0;
  v45 = 0;
  sub_1001CFA90(&v41);
  swift_bridgeObjectRelease(v22);

  sub_100006F58(&v36);
  v17(v6, v16, v2);
  Dependency.wrappedValue.getter(&v31, v2);
  v18(v6, v2);
  sub_10000732C(&v31, v33);
  v23 = AAFollowUpIdentifierCustodianWalrusNoLiveness;
  v24 = sub_100015C80((uint64_t)_swiftEmptyArrayStorage);
  *(_QWORD *)&v36 = v23;
  *((_QWORD *)&v36 + 1) = v24;
  v38 = 0;
  v39 = 0;
  v37 = 0;
  v40 = 0;
  sub_1001CFA90(&v36);
  swift_bridgeObjectRelease(v24);

  sub_100006F58(&v31);
  v17(v6, v16, v2);
  Dependency.wrappedValue.getter(v30, v2);
  v18(v6, v2);
  sub_10000732C(v30, v30[3]);
  v25 = AAFollowUpIdentifierADPUserMissingHealthyCustodian;
  v26 = sub_100015C80((uint64_t)_swiftEmptyArrayStorage);
  *(_QWORD *)&v31 = v25;
  *((_QWORD *)&v31 + 1) = v26;
  v33 = 0;
  v34 = 0;
  v32 = 0;
  v35 = 0;
  sub_1001CFA90(&v31);
  swift_bridgeObjectRelease(v26);

  return sub_100006F58(v30);
}

uint64_t sub_1000BF70C(uint64_t (*a1)(void), const char *a2, void (*a3)(_QWORD), uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(_QWORD);
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31[5];

  v28 = a2;
  v8 = v4;
  v9 = sub_1000080B4(&qword_10028FF60);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10028ADD8 != -1)
    swift_once(&qword_10028ADD8, sub_100046D78);
  v14 = type metadata accessor for Logger(0);
  v15 = sub_100005288(v14, (uint64_t)qword_1002A8A08);
  v16 = Logger.logObject.getter(v15);
  v17 = a1();
  if (os_log_type_enabled(v16, v17))
  {
    v24 = v15;
    v25 = v8;
    v26 = a3;
    v27 = a4;
    v18 = (uint8_t *)swift_slowAlloc(12, -1);
    v19 = swift_slowAlloc(32, -1);
    v31[0] = v19;
    *(_DWORD *)v18 = 136315138;
    if (qword_10028AE50 != -1)
      swift_once(&qword_10028AE50, sub_1000BA0A0);
    v21 = qword_10028FC80;
    v20 = *(_QWORD *)algn_10028FC88;
    swift_bridgeObjectRetain(*(_QWORD *)algn_10028FC88);
    v29 = sub_1001DEF4C(v21, v20, v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30);
    swift_bridgeObjectRelease(v20);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, v28, v18, 0xCu);
    swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v19, -1, -1);
    swift_slowDealloc(v18, -1, -1);

    a3 = v26;
    v8 = v25;
  }
  else
  {

  }
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, v8 + OBJC_IVAR____TtC13appleaccountd30CloudDataProtectionHealthCheck__cdpFollowUpHandler, v9);
  Dependency.wrappedValue.getter(v31, v9);
  v22 = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  a3(v22);
  return sub_100006F58(v31);
}

void sub_1000BFB40(int a1, uint64_t a2, void (*a3)(_QWORD), uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  _BOOL4 v16;
  uint8_t *v17;
  uint8_t *v18;
  unsigned int v19;
  uint64_t v20;
  id v21;
  NSObject *v22;
  NSObject *v23;
  os_log_type_t v24;
  uint64_t v25;
  uint8_t *v26;
  _QWORD *v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  char v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  _BOOL4 v36;
  uint8_t *v37;
  uint64_t v38;
  _BYTE *v39;
  uint64_t v40;
  uint8_t *v41;
  uint64_t v42;
  _BYTE *v43;
  uint64_t v44;
  _BYTE v45[12];
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  _BYTE *v49;
  uint64_t v50;
  void (*v51)(_QWORD);
  uint64_t v52;
  uint64_t v53;
  int v54;
  NSObject *v55;
  uint64_t v56[4];
  id v57;

  v51 = a3;
  v54 = a1;
  v48 = sub_1000080B4(&qword_10028FF60);
  v50 = *(_QWORD *)(v48 - 8);
  __chkstk_darwin(v48, v6);
  v49 = &v45[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = sub_1000080B4((uint64_t *)&unk_10028CC80);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v12 = &v45[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (qword_10028AE10 != -1)
    swift_once(&qword_10028AE10, sub_100046EBC);
  v13 = type metadata accessor for Logger(0);
  v53 = sub_100005288(v13, (uint64_t)qword_1002A8AB0);
  v14 = Logger.logObject.getter(v53);
  v15 = static os_log_type_t.debug.getter(v14);
  v16 = os_log_type_enabled(v14, v15);
  v52 = a2;
  if (v16)
  {
    v17 = (uint8_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v17 = 67109120;
    LODWORD(v55) = v54 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, (char *)&v55 + 4);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "isWalrusStatusMismatchDetectionEnabled: %{BOOL}d", v17, 8u);
    v18 = v17;
    a2 = v52;
    swift_slowDealloc(v18, -1, -1);
  }

  v57 = 0;
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v9 + 16))(v12, a2 + OBJC_IVAR____TtC13appleaccountd30CloudDataProtectionHealthCheck__cdpController, v8);
  Dependency.wrappedValue.getter(&v55, v8);
  (*(void (**)(_BYTE *, uint64_t))(v9 + 8))(v12, v8);
  sub_10000732C(&v55, v56[2]);
  v19 = sub_10004715C();
  v20 = sub_100006F58(&v55);
  v21 = v57;
  if (v57)
  {
    v22 = v57;
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.error.getter(v23);
    if (os_log_type_enabled(v23, v24))
    {
      v25 = swift_slowAlloc(12, -1);
      v47 = a4;
      v26 = (uint8_t *)v25;
      v27 = (_QWORD *)swift_slowAlloc(8, -1);
      v46 = v19;
      *(_DWORD *)v26 = 138412290;
      v55 = v22;
      v22 = v22;
      LOBYTE(v19) = v46;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, v56);
      *v27 = v21;

      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Error while fetching isWalrusStatusMismatched: %@", v26, 0xCu);
      v28 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v27, 1, v28);
      swift_slowDealloc(v27, -1, -1);
      swift_slowDealloc(v26, -1, -1);
    }
    else
    {

      v23 = v22;
    }

    a2 = v52;
  }
  v29 = Logger.logObject.getter(v20);
  v30 = static os_log_type_t.debug.getter(v29);
  if (os_log_type_enabled(v29, v30))
  {
    v31 = (uint8_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v31 = 67109120;
    LODWORD(v55) = v19 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, (char *)&v55 + 4);
    _os_log_impl((void *)&_mh_execute_header, v29, v30, "isWalrusStatusMismatched: %{BOOL}d", v31, 8u);
    swift_slowDealloc(v31, -1, -1);
  }

  v32 = v19 & v54;
  v34 = Logger.logObject.getter(v33);
  v35 = static os_log_type_t.debug.getter(v34);
  v36 = os_log_type_enabled(v34, v35);
  if ((v32 & 1) == 0 || v21)
  {
    if (v36)
    {
      v41 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v41 = 0;
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "No mismatch found in CombinedWalrusStatus. Tearing down adpStateHealing CFU, if posted already.", v41, 2u);
      swift_slowDealloc(v41, -1, -1);
    }

    v43 = v49;
    v42 = v50;
    v44 = v48;
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v50 + 16))(v49, a2 + OBJC_IVAR____TtC13appleaccountd30CloudDataProtectionHealthCheck__cdpFollowUpHandler, v48);
    Dependency.wrappedValue.getter(&v55, v44);
    (*(void (**)(_BYTE *, uint64_t))(v42 + 8))(v43, v44);
    sub_10000C4F4();
    sub_100006F58(&v55);
    v51(0);

  }
  else
  {
    if (v36)
    {
      v37 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v37 = 0;
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "Found mismatch in CombinedWalrusStatus. Posting adpStateHealing CFU", v37, 2u);
      swift_slowDealloc(v37, -1, -1);
    }

    v39 = v49;
    v38 = v50;
    v40 = v48;
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v50 + 16))(v49, a2 + OBJC_IVAR____TtC13appleaccountd30CloudDataProtectionHealthCheck__cdpFollowUpHandler, v48);
    Dependency.wrappedValue.getter(&v55, v40);
    (*(void (**)(_BYTE *, uint64_t))(v38 + 8))(v39, v40);
    sub_10000BFB0(4);
    sub_100006F58(&v55);
    v51(0);
  }
}

void sub_1000C031C(void (*a1)(_QWORD), uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  NSObject *v19;
  __n128 v20;
  os_log_type_t v21;
  _BOOL4 v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t);
  uint64_t v31;
  char *v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t, uint64_t);
  void (*v35)(char *, uint64_t);
  unsigned __int8 v36;
  uint64_t v37;
  void *v38;
  unsigned int v39;
  uint64_t v40;
  id v41;
  _QWORD *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  uint64_t v48;
  NSObject *v49;
  __n128 v50;
  os_log_type_t v51;
  uint8_t *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  void *v60;
  NSObject *v61;
  __n128 v62;
  os_log_type_t v63;
  uint8_t *v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(uint64_t);
  unint64_t v71;
  uint64_t *v72;
  void *v73;
  id v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  NSObject *v78;
  __n128 v79;
  os_log_type_t v80;
  uint8_t *v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  char *v88;
  uint64_t v89;
  void (*v90)(_QWORD);
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100[3];
  uint64_t v101;

  v3 = (uint64_t)v2;
  v6 = *v2;
  v7 = sub_1000080B4(&qword_10028CCE8);
  v92 = *(_QWORD *)(v7 - 8);
  v93 = v7;
  __chkstk_darwin(v7, v8);
  v91 = (char *)&v88 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v97 = sub_1000080B4((uint64_t *)&unk_10028CC80);
  v95 = *(_QWORD *)(v97 - 8);
  __chkstk_darwin(v97, v10);
  v12 = (char *)&v88 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1000080B4(&qword_10028FA50);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13, v15);
  v17 = (char *)&v88 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10028ADD8 != -1)
    swift_once(&qword_10028ADD8, sub_100046D78);
  v18 = type metadata accessor for Logger(0);
  v96 = sub_100005288(v18, (uint64_t)qword_1002A8A08);
  v19 = Logger.logObject.getter(v96);
  v21 = static os_log_type_t.default.getter(v20);
  v22 = os_log_type_enabled(v19, v21);
  v98 = a2;
  if (v22)
  {
    v88 = v12;
    v89 = v6;
    v94 = v3;
    v90 = a1;
    v23 = (uint8_t *)swift_slowAlloc(12, -1);
    v24 = swift_slowAlloc(32, -1);
    v100[0] = v24;
    *(_DWORD *)v23 = 136315138;
    if (qword_10028AE50 != -1)
      swift_once(&qword_10028AE50, sub_1000BA0A0);
    v25 = qword_10028FC80;
    v26 = *(_QWORD *)algn_10028FC88;
    swift_bridgeObjectRetain(*(_QWORD *)algn_10028FC88);
    v99 = sub_1001DEF4C(v25, v26, v100);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v99, v100);
    swift_bridgeObjectRelease(v26);
    _os_log_impl((void *)&_mh_execute_header, v19, v21, "%s - started.", v23, 0xCu);
    swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v24, -1, -1);
    swift_slowDealloc(v23, -1, -1);

    v6 = v89;
    a1 = v90;
    v3 = v94;
    v12 = v88;
  }
  else
  {

  }
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v17, v3 + OBJC_IVAR____TtC13appleaccountd30CloudDataProtectionHealthCheck__accountStore, v13);
  Dependency.wrappedValue.getter(v100, v13);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
  v27 = objc_msgSend(*(id *)(*sub_10000732C(v100, v101) + 16), "aa_primaryAppleAccount");
  v28 = sub_100006F58(v100);
  v29 = v97;
  if (v27)
  {
    v30 = a1;
    v31 = v3 + OBJC_IVAR____TtC13appleaccountd30CloudDataProtectionHealthCheck__cdpController;
    v32 = v12;
    v33 = v95;
    v34 = *(void (**)(char *, uint64_t, uint64_t))(v95 + 16);
    v34(v32, v3 + OBJC_IVAR____TtC13appleaccountd30CloudDataProtectionHealthCheck__cdpController, v97);
    Dependency.wrappedValue.getter(v100, v29);
    v35 = *(void (**)(char *, uint64_t))(v33 + 8);
    v35(v32, v29);
    v36 = sub_100048588();
    v37 = sub_100006F58(v100);
    if ((v36 & 1) != 0)
    {
      v34(v32, v31, v29);
      Dependency.wrappedValue.getter(v100, v29);
      v35(v32, v29);
      v38 = *(void **)(*sub_10000732C(v100, v101) + 24);
      v99 = 0;
      v39 = objc_msgSend(v38, "isManateeAvailable:", &v99);
      v40 = v99;
      if (v39)
      {
        v41 = (id)v99;
        sub_100006F58(v100);
        v42 = (_QWORD *)swift_allocObject(&unk_100265690, 56, 7);
        v42[2] = v3;
        v42[3] = v27;
        v42[4] = v30;
        v43 = v98;
        v42[5] = v98;
        v42[6] = v6;
        v44 = v91;
        v45 = v92;
        v46 = v93;
        (*(void (**)(char *, uint64_t, uint64_t))(v92 + 16))(v91, v3 + OBJC_IVAR____TtC13appleaccountd30CloudDataProtectionHealthCheck__urlBagProvider, v93);
        swift_retain(v3);
        v47 = v27;
        swift_retain(v43);
        Dependency.wrappedValue.getter(v100, v46);
        (*(void (**)(char *, uint64_t))(v45 + 8))(v44, v46);
        v48 = *sub_10000732C(v100, v101);
        swift_retain(v3);
        swift_retain(v42);
        sub_100045C20(v48, v3, sub_1000C0D0C, (uint64_t)v42, v6);
        sub_100006F58(v100);

        swift_release(v42);
        return;
      }
      v74 = (id)v99;
      v75 = _convertNSErrorToError(_:)(v40);

      swift_willThrow(v76);
      swift_errorRelease(v75);
      v77 = sub_100006F58(v100);
      v78 = Logger.logObject.getter(v77);
      v80 = static os_log_type_t.default.getter(v79);
      if (os_log_type_enabled(v78, v80))
      {
        v94 = v3;
        v81 = (uint8_t *)swift_slowAlloc(12, -1);
        v82 = swift_slowAlloc(32, -1);
        v100[0] = v82;
        *(_DWORD *)v81 = 136315138;
        if (qword_10028AE50 != -1)
          swift_once(&qword_10028AE50, sub_1000BA0A0);
        v83 = qword_10028FC80;
        v84 = *(_QWORD *)algn_10028FC88;
        swift_bridgeObjectRetain(*(_QWORD *)algn_10028FC88);
        v99 = sub_1001DEF4C(v83, v84, v100);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v99, v100);
        swift_bridgeObjectRelease(v84);
        _os_log_impl((void *)&_mh_execute_header, v78, v80, "%s - Manatee is not available, proceeding to post CDP repair.", v81, 0xCu);
        swift_arrayDestroy(v82, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v82, -1, -1);
        swift_slowDealloc(v81, -1, -1);

      }
      else
      {

      }
      sub_1000BA0E8();
      type metadata accessor for AASignInError(0);
      v69 = v85;
      v70 = type metadata accessor for AASignInError;
      v99 = -8008;
      v71 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
      v72 = &qword_10028B608;
      v73 = &unk_100218278;
    }
    else
    {
      v61 = Logger.logObject.getter(v37);
      v63 = static os_log_type_t.default.getter(v62);
      if (os_log_type_enabled(v61, v63))
      {
        v64 = (uint8_t *)swift_slowAlloc(12, -1);
        v65 = swift_slowAlloc(32, -1);
        v100[0] = v65;
        *(_DWORD *)v64 = 136315138;
        if (qword_10028AE50 != -1)
          swift_once(&qword_10028AE50, sub_1000BA0A0);
        v66 = qword_10028FC80;
        v67 = *(_QWORD *)algn_10028FC88;
        swift_bridgeObjectRetain(*(_QWORD *)algn_10028FC88);
        v99 = sub_1001DEF4C(v66, v67, v100);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v99, v100);
        swift_bridgeObjectRelease(v67);
        _os_log_impl((void *)&_mh_execute_header, v61, v63, "%s - CDP is not enabled or has never been enabled for this account, bailing from health check...", v64, 0xCu);
        swift_arrayDestroy(v65, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v65, -1, -1);
        swift_slowDealloc(v64, -1, -1);
      }

      type metadata accessor for AAError(0);
      v69 = v68;
      v70 = type metadata accessor for AAError;
      v99 = -16;
      v71 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
      v72 = &qword_10028B6B0;
      v73 = &unk_100218588;
    }
    v86 = sub_100005150((unint64_t *)v72, (uint64_t (*)(uint64_t))v70, (uint64_t)v73);
    _BridgedStoredNSError.init(_:userInfo:)(v100, &v99, v71, v69, v86);
    v87 = (void *)v100[0];
    v30(v100[0]);

  }
  else
  {
    v49 = Logger.logObject.getter(v28);
    v51 = static os_log_type_t.default.getter(v50);
    if (os_log_type_enabled(v49, v51))
    {
      v52 = (uint8_t *)swift_slowAlloc(12, -1);
      v53 = swift_slowAlloc(32, -1);
      v100[0] = v53;
      *(_DWORD *)v52 = 136315138;
      if (qword_10028AE50 != -1)
        swift_once(&qword_10028AE50, sub_1000BA0A0);
      v54 = qword_10028FC80;
      v55 = *(_QWORD *)algn_10028FC88;
      swift_bridgeObjectRetain(*(_QWORD *)algn_10028FC88);
      v99 = sub_1001DEF4C(v54, v55, v100);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v99, v100);
      swift_bridgeObjectRelease(v55);
      _os_log_impl((void *)&_mh_execute_header, v49, v51, "%s - Primary account is not available, bailing from health check...", v52, 0xCu);
      swift_arrayDestroy(v53, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v53, -1, -1);
      swift_slowDealloc(v52, -1, -1);
    }

    type metadata accessor for AAError(0);
    v57 = v56;
    v99 = -4404;
    v58 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
    v59 = sub_100005150((unint64_t *)&qword_10028B6B0, (uint64_t (*)(uint64_t))type metadata accessor for AAError, (uint64_t)&unk_100218588);
    _BridgedStoredNSError.init(_:userInfo:)(v100, &v99, v58, v57, v59);
    v60 = (void *)v100[0];
    a1(v100[0]);

  }
}

uint64_t sub_1000C0CD8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 56, 7);
}

void sub_1000C0D0C(uint64_t a1)
{
  uint64_t v1;

  sub_1000BA510(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24), *(void (**)(uint64_t))(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t sub_1000C0D1C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 48, 7);
}

void sub_1000C0D48(uint64_t a1, char a2)
{
  uint64_t v2;

  sub_1000BE7B0(a1, a2 & 1, *(_QWORD *)(v2 + 16), *(void (**)(uint64_t))(v2 + 24));
}

uint64_t sub_1000C0D58(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for TrustedContactUserNotification(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000C0D94(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSString v15;
  id v16;
  uint64_t v17;
  void *v18;
  Class isa;
  char v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t inited;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _BYTE v30[80];
  void *v31;
  _OWORD v32[2];
  uint64_t v33[5];

  if (qword_10028ADD8 != -1)
    swift_once(&qword_10028ADD8, sub_100046D78);
  v4 = type metadata accessor for Logger(0);
  sub_100005288(v4, (uint64_t)qword_1002A8A08);
  swift_errorRetain(a2);
  v5 = swift_errorRetain(a2);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.error.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    v8 = swift_slowAlloc(22, -1);
    v9 = (uint64_t *)swift_slowAlloc(8, -1);
    v10 = swift_slowAlloc(32, -1);
    v33[0] = v10;
    *(_DWORD *)v8 = 136315394;
    if (qword_10028AE50 != -1)
      swift_once(&qword_10028AE50, sub_1000BA0A0);
    v11 = qword_10028FC80;
    v12 = *(_QWORD *)algn_10028FC88;
    swift_bridgeObjectRetain(*(_QWORD *)algn_10028FC88);
    *(_QWORD *)&v32[0] = sub_1001DEF4C(v11, v12, v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v32, (char *)v32 + 8);
    swift_bridgeObjectRelease(v12);
    *(_WORD *)(v8 + 12) = 2112;
    swift_errorRetain(a2);
    v13 = _swift_stdlib_bridgeErrorToNSError(a2);
    *(_QWORD *)&v32[0] = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v32, (char *)v32 + 8);
    *v9 = v13;
    swift_errorRelease(a2);
    swift_errorRelease(a2);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "    %s - escrow record check failed with error     %@", (uint8_t *)v8, 0x16u);
    v14 = sub_1000080B4((uint64_t *)&unk_10028BC20);
    swift_arrayDestroy(v9, 1, v14);
    swift_slowDealloc(v9, -1, -1);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    swift_errorRelease(a2);
    swift_errorRelease(a2);
  }

  v15 = String._bridgeToObjectiveC()();
  v16 = objc_msgSend(a1, "accountPropertyForKey:", v15);

  if (v16)
  {
    _bridgeAnyObjectToAny(_:)(v32, v16);
    swift_unknownObjectRelease(v16);
  }
  else
  {
    memset(v32, 0, sizeof(v32));
  }
  sub_100006988((uint64_t)v32, (uint64_t)v33);
  if (!v33[3])
  {
    sub_10008C388((uint64_t)v33);
    return 0;
  }
  v17 = sub_1000067D4(0, (unint64_t *)&qword_10028E8B0, NSNumber_ptr);
  if ((swift_dynamicCast(&v31, v33, (char *)&type metadata for Any + 8, v17, 6) & 1) == 0)
    return 0;
  v18 = v31;
  isa = NSNumber.init(integerLiteral:)(0).super.super.isa;
  v20 = static NSObject.== infix(_:_:)(v18, isa);

  if ((v20 & 1) != 0)
  {

    return 0;
  }
  type metadata accessor for AAError(0);
  v23 = v22;
  *(_QWORD *)&v32[0] = -4407;
  v24 = sub_1000080B4(&qword_10028BB68);
  inited = swift_initStackObject(v24, v30);
  *(_OWORD *)(inited + 16) = xmmword_100218E30;
  *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSUnderlyingErrorKey);
  *(_QWORD *)(inited + 40) = v26;
  swift_errorRetain(a2);
  v27 = _convertErrorToNSError(_:)(a2);
  *(_QWORD *)(inited + 72) = sub_1000067D4(0, (unint64_t *)&qword_10028FB90, NSError_ptr);
  *(_QWORD *)(inited + 48) = v27;
  v28 = sub_100015894(inited);
  v29 = sub_100005150((unint64_t *)&qword_10028B6B0, (uint64_t (*)(uint64_t))type metadata accessor for AAError, (uint64_t)&unk_100218588);
  _BridgedStoredNSError.init(_:userInfo:)(v33, v32, v28, v23, v29);
  swift_errorRelease(a2);

  return v33[0];
}

uint64_t sub_1000C11C0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 32, 7);
}

void sub_1000C11E4(uint64_t a1, char a2)
{
  uint64_t v2;

  sub_1000BEDE4(a1, a2 & 1, *(_QWORD *)(v2 + 16));
}

uint64_t sub_1000C11F0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000C1214(uint64_t a1, char a2)
{
  uint64_t v2;

  return sub_1000C3A2C(a1, a2 & 1, *(void (**)(uint64_t, uint64_t))(v2 + 16));
}

uint64_t sub_1000C1220(_QWORD *a1)
{
  char *v1;
  uint64_t v2;
  char *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  char v19;
  char v20;
  char v21;

  v3 = v1;
  v5 = sub_1000080B4(&qword_100290020);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a1[3];
  v11 = a1[4];
  sub_10000732C(a1, v10);
  v12 = sub_1000C1BFC();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for BeneficiaryRemovedMessage.CodingKeys, &type metadata for BeneficiaryRemovedMessage.CodingKeys, v12, v10, v11);
  v21 = *v3;
  v20 = 0;
  v13 = sub_1000C1CC8();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v21, &v20, v5, &type metadata for InheritanceMessageType, v13);
  if (!v2)
  {
    v14 = &v3[*(int *)(type metadata accessor for BeneficiaryRemovedMessage(0) + 20)];
    v19 = 1;
    v15 = type metadata accessor for UUID(0);
    v16 = sub_100005150((unint64_t *)&unk_10028DC20, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v14, &v19, v5, v15, v16);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

uint64_t sub_1000C138C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  char v36;
  uint64_t v37;

  v33 = a2;
  v32 = type metadata accessor for UUID(0);
  v30 = *(_QWORD *)(v32 - 8);
  __chkstk_darwin(v32, v4);
  v31 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = sub_1000080B4(&qword_100290010);
  v6 = *(_QWORD *)(v34 - 8);
  __chkstk_darwin(v34, v7);
  v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for BeneficiaryRemovedMessage(0);
  __chkstk_darwin(v10, v11);
  v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = a1[3];
  v14 = a1[4];
  sub_10000732C(a1, v15);
  v16 = sub_1000C1BFC();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for BeneficiaryRemovedMessage.CodingKeys, &type metadata for BeneficiaryRemovedMessage.CodingKeys, v16, v15, v14);
  if (!v2)
  {
    v28 = v10;
    v29 = v6;
    v17 = v13;
    v19 = v31;
    v18 = v32;
    v20 = v33;
    v36 = 0;
    v21 = sub_1000C1C40();
    v22 = v34;
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v37, &type metadata for InheritanceMessageType, &v36, v34, &type metadata for InheritanceMessageType, v21);
    v27 = v17;
    *v17 = v37;
    v35 = 1;
    v23 = sub_100005150((unint64_t *)&unk_10028BBB0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v19, v18, &v35, v22, v18, v23);
    (*(void (**)(char *, uint64_t))(v29 + 8))(v9, v22);
    v24 = v20;
    v25 = (uint64_t)v27;
    (*(void (**)(_BYTE *, _QWORD *, uint64_t))(v30 + 32))(&v27[*(int *)(v28 + 20)], v19, v18);
    sub_1000C1C84(v25, v24);
  }
  return sub_100006F58(a1);
}

uint64_t sub_1000C15E8()
{
  _BYTE *v0;

  if (*v0)
    return 0x69636966656E6562;
  else
    return 1701869940;
}

uint64_t sub_1000C1628@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1000C1EB0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000C164C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000C1BFC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000C1674(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000C1BFC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000C169C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000C138C(a1, a2);
}

uint64_t sub_1000C16B0(_QWORD *a1)
{
  return sub_1000C1220(a1);
}

uint64_t sub_1000C16C4()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  Swift::String v4;
  uint64_t v5;
  uint64_t v6;
  Swift::String v7;
  void *object;
  uint64_t v10;
  unint64_t v11;

  v11 = 0xE000000000000000;
  _StringGuts.grow(_:)(23);
  v10 = type metadata accessor for BeneficiaryRemovedMessage(0);
  v0 = sub_1000080B4(&qword_10028FF70);
  v1 = String.init<A>(describing:)(&v10, v0);
  v3 = v2;
  swift_bridgeObjectRelease(0xE000000000000000);
  v10 = v1;
  v11 = v3;
  v4._object = (void *)0x800000010020BE00;
  v4._countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v4);
  v5 = type metadata accessor for UUID(0);
  v6 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v7._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v5, v6);
  object = v7._object;
  String.append(_:)(v7);
  swift_bridgeObjectRelease(object);
  return v10;
}

uint64_t type metadata accessor for BeneficiaryRemovedMessage(uint64_t a1)
{
  uint64_t result;

  result = qword_10028FFD0;
  if (!qword_10028FFD0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for BeneficiaryRemovedMessage);
  return result;
}

uint64_t *sub_1000C1800(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  _BYTE *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v9 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v9 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v9);
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v5 = *(int *)(a3 + 20);
    v6 = (char *)a1 + v5;
    v7 = (char *)a2 + v5;
    v8 = type metadata accessor for UUID(0);
    (*(void (**)(_BYTE *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v6, v7, v8);
  }
  return v3;
}

uint64_t sub_1000C1888(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + *(int *)(a2 + 20);
  v3 = type metadata accessor for UUID(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
}

_BYTE *sub_1000C18C0(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = &a1[v4];
  v6 = &a2[v4];
  v7 = type metadata accessor for UUID(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

_BYTE *sub_1000C191C(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = &a1[v4];
  v6 = &a2[v4];
  v7 = type metadata accessor for UUID(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v7 - 8) + 24))(v5, v6, v7);
  return a1;
}

_BYTE *sub_1000C1978(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = &a1[v4];
  v6 = &a2[v4];
  v7 = type metadata accessor for UUID(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

_BYTE *sub_1000C19D4(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = &a1[v4];
  v6 = &a2[v4];
  v7 = type metadata accessor for UUID(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v7 - 8) + 40))(v5, v6, v7);
  return a1;
}

uint64_t sub_1000C1A30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000C1A3C);
}

uint64_t sub_1000C1A3C(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  uint64_t v8;

  if ((_DWORD)a2 == 251)
  {
    v4 = *a1;
    if (v4 >= 5)
      return v4 - 4;
    else
      return 0;
  }
  else
  {
    v8 = type metadata accessor for UUID(0);
    return (*(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v8);
  }
}

uint64_t sub_1000C1AB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000C1ABC);
}

_BYTE *sub_1000C1ABC(_BYTE *result, uint64_t a2, int a3, uint64_t a4)
{
  _BYTE *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 251)
  {
    *result = a2 + 4;
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    return (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t sub_1000C1B2C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = &unk_10021B7B0;
  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_1000C1BA0(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_100005150(&qword_100297040, type metadata accessor for BeneficiaryRemovedMessage, (uint64_t)&unk_10021B80C);
  result = sub_100005150(&qword_100290008, type metadata accessor for BeneficiaryRemovedMessage, (uint64_t)&unk_10021B7E4);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1000C1BFC()
{
  unint64_t result;

  result = qword_100290018;
  if (!qword_100290018)
  {
    result = swift_getWitnessTable(&unk_10021B8F8, &type metadata for BeneficiaryRemovedMessage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100290018);
  }
  return result;
}

unint64_t sub_1000C1C40()
{
  unint64_t result;

  result = qword_1002970A0;
  if (!qword_1002970A0)
  {
    result = swift_getWitnessTable(&unk_10021A308, &type metadata for InheritanceMessageType);
    atomic_store(result, (unint64_t *)&qword_1002970A0);
  }
  return result;
}

uint64_t sub_1000C1C84(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for BeneficiaryRemovedMessage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_1000C1CC8()
{
  unint64_t result;

  result = qword_1002970B0;
  if (!qword_1002970B0)
  {
    result = swift_getWitnessTable(&unk_10021A330, &type metadata for InheritanceMessageType);
    atomic_store(result, (unint64_t *)&qword_1002970B0);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for BeneficiaryRemovedMessage.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1000C1D58 + 4 * byte_10021B745[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1000C1D8C + 4 * byte_10021B740[v4]))();
}

uint64_t sub_1000C1D8C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000C1D94(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000C1D9CLL);
  return result;
}

uint64_t sub_1000C1DA8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000C1DB0);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1000C1DB4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000C1DBC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BeneficiaryRemovedMessage.CodingKeys()
{
  return &type metadata for BeneficiaryRemovedMessage.CodingKeys;
}

unint64_t sub_1000C1DDC()
{
  unint64_t result;

  result = qword_100290028;
  if (!qword_100290028)
  {
    result = swift_getWitnessTable(&unk_10021B8D0, &type metadata for BeneficiaryRemovedMessage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100290028);
  }
  return result;
}

unint64_t sub_1000C1E24()
{
  unint64_t result;

  result = qword_100290030;
  if (!qword_100290030)
  {
    result = swift_getWitnessTable(&unk_10021B840, &type metadata for BeneficiaryRemovedMessage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100290030);
  }
  return result;
}

unint64_t sub_1000C1E6C()
{
  unint64_t result;

  result = qword_100290038;
  if (!qword_100290038)
  {
    result = swift_getWitnessTable(&unk_10021B868, &type metadata for BeneficiaryRemovedMessage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100290038);
  }
  return result;
}

uint64_t sub_1000C1EB0(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 1701869940 && a2 == 0xE400000000000000)
  {
    v5 = 0xE400000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1701869940, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x69636966656E6562 && a2 == 0xED00004449797261)
  {
    swift_bridgeObjectRelease(0xED00004449797261);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x69636966656E6562, 0xED00004449797261, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t storeEnumTagSinglePayload for AAFeatureFlags(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_1000C2000 + 4 * byte_10021B94D[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_1000C2034 + 4 * byte_10021B948[v4]))();
}

uint64_t sub_1000C2034(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000C203C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000C2044);
  return result;
}

uint64_t sub_1000C2050(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000C2058);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_1000C205C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000C2064(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AAFeatureFlags()
{
  return &type metadata for AAFeatureFlags;
}

unint64_t sub_1000C2084()
{
  unint64_t result;

  result = qword_100290040;
  if (!qword_100290040)
  {
    result = swift_getWitnessTable(&unk_10021B9B8, &type metadata for AAFeatureFlags);
    atomic_store(result, (unint64_t *)&qword_100290040);
  }
  return result;
}

const char *sub_1000C20C8()
{
  return "AppleAccount";
}

uint64_t sub_1000C20DC()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(const char *, uint64_t))((char *)sub_1000C2104 + 4 * byte_10021B952[*v0]))("RunAppleAccountdOntvOS", 22);
}

const char *sub_1000C2104()
{
  return "OverrideAppleIDHealthCheckInterval";
}

const char *sub_1000C2118()
{
  return "DecoupleOTPeerID";
}

const char *sub_1000C212C()
{
  return "AABranding";
}

const char *sub_1000C2140()
{
  return "LegacyContactAutoHealing";
}

const char *sub_1000C2154()
{
  return "RCUpsellMiniBuddy";
}

const char *sub_1000C2168()
{
  return "LegacyMarkCKRemovedBeforeDeletion";
}

uint64_t sub_1000C217C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = OBJC_IVAR____TtC13appleaccountd33TrustedContactsPreflightScheduler____lazy_storage___activityProvider;
  v2 = *(_QWORD *)(v0
                 + OBJC_IVAR____TtC13appleaccountd33TrustedContactsPreflightScheduler____lazy_storage___activityProvider);
  if (v2)
  {
    v3 = *(_QWORD *)(v0
                   + OBJC_IVAR____TtC13appleaccountd33TrustedContactsPreflightScheduler____lazy_storage___activityProvider);
  }
  else
  {
    v3 = sub_1000C2DF8();
    v4 = *(_QWORD *)(v0 + v1);
    *(_QWORD *)(v0 + v1) = v3;
    swift_retain(v3);
    swift_release(v4);
    v2 = 0;
  }
  swift_retain(v2);
  return v3;
}

uint64_t sub_1000C21DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  __n128 v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  uint64_t v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v35[5];

  v1 = v0;
  v2 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v2, v3);
  v5 = (char *)&v35[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1000080B4((uint64_t *)&unk_10028BB70);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  v10 = (char *)&v35[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10028ADD8 != -1)
    swift_once(&qword_10028ADD8, sub_100046D78);
  v11 = type metadata accessor for Logger(0);
  v12 = sub_100005288(v11, (uint64_t)qword_1002A8A08);
  v13 = Logger.logObject.getter(v12);
  v15 = static os_log_type_t.default.getter(v14);
  if (os_log_type_enabled(v13, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v15, "Scheduling Trusted Contacts preflight activity", v16, 2u);
    swift_slowDealloc(v16, -1, -1);
  }

  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, v1 + OBJC_IVAR____TtC13appleaccountd33TrustedContactsPreflightScheduler__xpcActivityScheduler, v6);
  Dependency.wrappedValue.getter(v35, v6);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  v17 = sub_10000732C(v35, v35[3]);
  v18 = sub_1000C217C();
  v19 = *v17;
  swift_retain(v18);
  v20 = static String._fromUTF8Repairing(_:)("com.apple.appleaccountd.trustedContacts.preflight", 49);
  v22 = v21;
  v23 = swift_allocObject(&unk_100265A08, 24, 7);
  swift_weakInit(v23 + 16, v18);
  v24 = swift_bridgeObjectRetain(v22);
  static DispatchQoS.background.getter(v24);
  v25 = swift_allocObject(&unk_100265A30, 56, 7);
  *(_WORD *)(v25 + 16) = 1;
  *(_OWORD *)(v25 + 24) = xmmword_10021BA10;
  *(_OWORD *)(v25 + 40) = xmmword_10021BA20;
  v26 = swift_allocObject(&unk_100265A58, 32, 7);
  *(_QWORD *)(v26 + 16) = sub_1000C2D98;
  *(_QWORD *)(v26 + 24) = v23;
  v27 = type metadata accessor for XPCActivity();
  swift_allocObject(v27, 104, 7);
  swift_retain(v23);
  v28 = sub_10002E144(v20, v22, (uint64_t)v5, (uint64_t)sub_1000108D0, v25, (uint64_t)sub_1000108D8, v26);
  swift_release(v23);
  swift_bridgeObjectRelease(v22);
  swift_release(v25);
  swift_release(v26);
  v29 = *(_QWORD *)(v19 + 16);
  *(_QWORD *)(v19 + 16) = v28;
  swift_release(v29);
  v30 = swift_allocObject(&unk_100265A80, 24, 7);
  swift_weakInit(v30 + 16, v19);
  v31 = type metadata accessor for OSTransaction();
  swift_allocObject(v31, 48, 7);
  v32 = sub_1000E0EB0("com.apple.appleaccountd.trustedContacts.preflight", 49, 2);
  sub_100187158(v32, v30);
  swift_release_n(v18, 2);
  swift_release(v30);
  swift_release(v32);
  return sub_100006F58(v35);
}

uint64_t sub_1000C2540(char a1, uint64_t a2, uint64_t a3)
{
  int v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  __n128 v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  v5 = a1 & 1;
  if (qword_10028ADD8 != -1)
    swift_once(&qword_10028ADD8, sub_100046D78);
  v6 = type metadata accessor for Logger(0);
  v7 = sub_100005288(v6, (uint64_t)qword_1002A8A08);
  v8 = Logger.logObject.getter(v7);
  v10 = static os_log_type_t.default.getter(v9);
  if (os_log_type_enabled(v8, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc(12, -1);
    v12 = swift_slowAlloc(32, -1);
    *(_DWORD *)v11 = 136315138;
    v18 = v12;
    if (v5)
      v13 = 0x656C756465686353;
    else
      v13 = 0x6E616D6544206E4FLL;
    v17 = sub_1001DEF4C(v13, 0xE900000000000064, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, &v18);
    swift_bridgeObjectRelease(0xE900000000000064);
    _os_log_impl((void *)&_mh_execute_header, v8, v10, "Starting %s Trusted Contacts preflight activity", v11, 0xCu);
    swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v11, -1, -1);
  }

  v14 = sub_1000C217C();
  v15 = swift_allocObject(&unk_1002659E0, 40, 7);
  *(_BYTE *)(v15 + 16) = v5;
  *(_QWORD *)(v15 + 24) = a2;
  *(_QWORD *)(v15 + 32) = a3;
  swift_retain(a3);
  sub_10015E1D8(v5, (uint64_t)sub_1000C2D44, v15);
  swift_release(v14);
  return swift_release(v15);
}

void sub_1000C2744(uint64_t a1, uint64_t a2, char a3, void (*a4)(_QWORD))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t inited;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  id v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  void (*v20)(_QWORD);
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  _BYTE v35[80];
  uint64_t v36;
  void *v37;

  if (*(_QWORD *)(a2 + 16))
  {
    type metadata accessor for AAError(0);
    v8 = v7;
    v36 = -4408;
    v9 = sub_1000080B4(&qword_10028BB68);
    inited = swift_initStackObject(v9, v35);
    *(_OWORD *)(inited + 16) = xmmword_100218E30;
    *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(AAPartialErrorsByNameKey);
    *(_QWORD *)(inited + 40) = v11;
    *(_QWORD *)(inited + 72) = sub_1000080B4((uint64_t *)&unk_10028CD40);
    *(_QWORD *)(inited + 48) = a2;
    swift_bridgeObjectRetain(a2);
    v12 = sub_100015894(inited);
    v13 = sub_1000C2D50();
    _BridgedStoredNSError.init(_:userInfo:)(&v37, &v36, v12, v8, v13);
    v14 = v37;
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v15 = type metadata accessor for Logger(0);
    sub_100005288(v15, (uint64_t)qword_1002A8A08);
    v16 = v14;
    v17 = Logger.logObject.getter(v16);
    v18 = static os_log_type_t.error.getter(v17);
    if (os_log_type_enabled(v17, v18))
    {
      v19 = swift_slowAlloc(22, -1);
      v20 = a4;
      v21 = (uint64_t *)swift_slowAlloc(8, -1);
      v22 = swift_slowAlloc(32, -1);
      v37 = (void *)v22;
      *(_DWORD *)v19 = 136315394;
      if ((a3 & 1) != 0)
        v23 = 0x656C756465686353;
      else
        v23 = 0x6E616D6544206E4FLL;
      v36 = sub_1001DEF4C(v23, 0xE900000000000064, (uint64_t *)&v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37);
      swift_bridgeObjectRelease(0xE900000000000064);
      *(_WORD *)(v19 + 12) = 2112;
      v24 = _convertErrorToNSError(_:)(v16);
      v36 = v24;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37);
      *v21 = v24;

      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Overall %s Trusted Contacts preflight activity failed: %@", (uint8_t *)v19, 0x16u);
      v25 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v21, 1, v25);
      v26 = v21;
      a4 = v20;
      swift_slowDealloc(v26, -1, -1);
      swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v22, -1, -1);
      swift_slowDealloc(v19, -1, -1);

    }
    else
    {

    }
    v34 = v16;
    a4(v16);

  }
  else
  {
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v27 = type metadata accessor for Logger(0);
    v28 = sub_100005288(v27, (uint64_t)qword_1002A8A08);
    v29 = Logger.logObject.getter(v28);
    v30 = static os_log_type_t.error.getter(v29);
    if (os_log_type_enabled(v29, v30))
    {
      v31 = (uint8_t *)swift_slowAlloc(12, -1);
      v32 = swift_slowAlloc(32, -1);
      *(_DWORD *)v31 = 136315138;
      v37 = (void *)v32;
      if ((a3 & 1) != 0)
        v33 = 0x656C756465686353;
      else
        v33 = 0x6E616D6544206E4FLL;
      v36 = sub_1001DEF4C(v33, 0xE900000000000064, (uint64_t *)&v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37);
      swift_bridgeObjectRelease(0xE900000000000064);
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "Overall %s Trusted Contacts preflight activity completed successfully.", v31, 0xCu);
      swift_arrayDestroy(v32, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v32, -1, -1);
      swift_slowDealloc(v31, -1, -1);
    }

    a4(0);
  }
}

uint64_t sub_1000C2BB8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC13appleaccountd33TrustedContactsPreflightScheduler__xpcActivityScheduler;
  v2 = sub_1000080B4((uint64_t *)&unk_10028BB70);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_release(*(_QWORD *)(v0
                          + OBJC_IVAR____TtC13appleaccountd33TrustedContactsPreflightScheduler____lazy_storage___activityProvider));
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1000C2C1C()
{
  return type metadata accessor for TrustedContactsPreflightScheduler(0);
}

uint64_t type metadata accessor for TrustedContactsPreflightScheduler(uint64_t a1)
{
  uint64_t result;

  result = qword_100290080;
  if (!qword_100290080)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for TrustedContactsPreflightScheduler);
  return result;
}

void sub_1000C2C60(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  sub_100010298(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = "\b";
    swift_updateClassMetadata2(a1, 256, 2, v4, a1 + 80);
  }
}

uint64_t sub_1000C2CD4()
{
  return sub_1000C21DC();
}

uint64_t sub_1000C2CF4(uint64_t a1, uint64_t a2)
{
  return sub_1000C2540(0, a1, a2);
}

uint64_t sub_1000C2D20()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

void sub_1000C2D44(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_1000C2744(a1, a2, *(_BYTE *)(v2 + 16), *(void (**)(_QWORD))(v2 + 24));
}

unint64_t sub_1000C2D50()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10028B6B0;
  if (!qword_10028B6B0)
  {
    type metadata accessor for AAError(255);
    result = swift_getWitnessTable(&unk_100218588, v1);
    atomic_store(result, (unint64_t *)&qword_10028B6B0);
  }
  return result;
}

void sub_1000C2D98(uint64_t a1)
{
  uint64_t v1;

  sub_10015DEC8(a1, v1);
}

uint64_t sub_1000C2DA0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1000C2DB0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000C2DD4()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000C2DF8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v0 = sub_1000080B4(&qword_10028BB48);
  v1 = swift_allocObject(v0, 112, 7);
  *(_OWORD *)(v1 + 16) = xmmword_100219130;
  v2 = type metadata accessor for CustodianPreflightHealthCheck(0);
  swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  v3 = sub_10010B284();
  *(_QWORD *)(v1 + 56) = v2;
  *(_QWORD *)(v1 + 64) = &off_100267F58;
  *(_QWORD *)(v1 + 32) = v3;
  v4 = objc_msgSend((id)objc_opt_self(AAAnalyticsRTCReporter), "reporter");
  v5 = type metadata accessor for InheritancePreflightHealthCheck(0);
  swift_allocObject(v5, *(unsigned int *)(v5 + 48), *(unsigned __int16 *)(v5 + 52));
  v6 = sub_10001689C((uint64_t)v4);
  *(_QWORD *)(v1 + 96) = v5;
  *(_QWORD *)(v1 + 104) = &off_10025F960;
  *(_QWORD *)(v1 + 72) = v6;
  v7 = type metadata accessor for TrustedContactsPreflightActivityProvider(0);
  v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
  v9 = sub_1000080B4(&qword_10028C8A0);
  Dependency.init(dependencyId:config:)(0, 0, 0, v9);
  v10 = sub_1000080B4((uint64_t *)&unk_10028F448);
  Dependency.init(dependencyId:config:)(0, 0, 0, v10);
  v11 = sub_1000080B4(&qword_10028C860);
  Dependency.init(dependencyId:config:)(0, 0, 0, v11);
  v12 = sub_1000080B4(&qword_10028E2A0);
  Dependency.init(dependencyId:config:)(0, 0, 0, v12);
  v13 = sub_1000080B4((uint64_t *)&unk_10028C900);
  Dependency.init(dependencyId:config:)(0, 0, 0, v13);
  v14 = sub_1000080B4((uint64_t *)&unk_10028C910);
  Dependency.init(dependencyId:config:)(0, 0, 0, v14);
  *(_QWORD *)(v8 + 16) = v1;
  if (qword_10028AEB0 != -1)
    swift_once(&qword_10028AEB0, sub_10015DCC8);
  objc_msgSend((id)qword_1002944E8, "setMaxConcurrentOperationCount:", 1);
  return v8;
}

uint64_t sub_1000C3050()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 24, 7);
}

uint64_t type metadata accessor for DaemonSetupServiceURLBag()
{
  return objc_opt_self(_TtC13appleaccountd24DaemonSetupServiceURLBag);
}

uint64_t type metadata accessor for AnalyticsEventFactory()
{
  return objc_opt_self(_TtC13appleaccountd21AnalyticsEventFactory);
}

uint64_t initializeBufferWithCopyOfBuffer for PushHelperServiceError(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for PushHelperServiceError(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for PushHelperServiceError(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = 0;
    *(_BYTE *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 1;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 9) = v3;
  return result;
}

uint64_t sub_1000C3118(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_1000C3134(uint64_t result, int a2)
{
  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    *(_BYTE *)(result + 8) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for PushHelperServiceError()
{
  return &type metadata for PushHelperServiceError;
}

uint64_t type metadata accessor for InheritancePrintKeyAnalyticsEvent(uint64_t a1)
{
  uint64_t result;

  result = qword_1002902F0;
  if (!qword_1002902F0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for InheritancePrintKeyAnalyticsEvent);
  return result;
}

uint64_t sub_1000C31A0(uint64_t a1)
{
  _BYTE v2[8];

  return swift_initClassMetadata2(a1, 0, 0, v2, a1 + qword_1002A8AF0);
}

void sub_1000C31DC()
{
  _swift_stdlib_reportUnimplementedInitializer("appleaccountd.InheritancePrintKeyAnalyticsEvent", 47, "init(eventName:initialData:)", 28, 0);
  __break(1u);
}

id sub_1000C3208()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for InheritancePrintKeyAnalyticsEvent(0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_1000C3240()
{
  return type metadata accessor for InheritancePrintKeyAnalyticsEvent(0);
}

uint64_t sub_1000C3248(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  void (*v32)(char *, uint64_t);
  uint64_t v33;
  dispatch_group_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  void *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  char *v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  char *v56;
  _QWORD *v57;
  dispatch_group_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  _QWORD aBlock[3];
  void *v81;
  uint64_t (*v82)();
  _QWORD *v83;

  v69 = a1;
  v70 = a2;
  v73 = type metadata accessor for DispatchWorkItemFlags(0);
  v76 = *(_QWORD *)(v73 - 8);
  __chkstk_darwin(v73, v2);
  v72 = (char *)&v59 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DispatchQoS(0);
  v74 = *(_QWORD *)(v4 - 8);
  v75 = v4;
  __chkstk_darwin(v4, v5);
  v71 = (char *)&v59 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS.QoSClass(0);
  v67 = *(_QWORD *)(v7 - 8);
  v68 = v7;
  __chkstk_darwin(v7, v8);
  v66 = (char *)&v59 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = sub_1000080B4((uint64_t *)&unk_10028CC80);
  v64 = *(_QWORD *)(v65 - 8);
  __chkstk_darwin(v65, v10);
  v63 = (char *)&v59 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = type metadata accessor for URL(0);
  v60 = *(_QWORD *)(v61 - 8);
  v13 = __chkstk_darwin(v61, v12);
  v15 = (char *)&v59 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13, v16);
  v18 = (char *)&v59 - v17;
  v19 = sub_1000080B4(&qword_10028C448);
  v20 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19, v21);
  v23 = (char *)&v59 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = swift_allocObject(&unk_100265BE8, 17, 7);
  *(_BYTE *)(v24 + 16) = 0;
  v62 = v24;
  v25 = swift_allocObject(&unk_100265BE8, 17, 7);
  *(_BYTE *)(v25 + 16) = 0;
  v26 = swift_allocObject(&unk_100265C10, 24, 7);
  *(_QWORD *)(v26 + 16) = 0;
  v27 = dispatch_group_create();
  dispatch_group_enter(v27);
  v28 = (_QWORD *)swift_allocObject(&unk_100265C38, 40, 7);
  v28[2] = v27;
  v28[3] = v24;
  v28[4] = v26;
  v77 = v26;
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v23, v78 + OBJC_IVAR____TtC13appleaccountd25RecoveryFactorsController__custodianStorage, v19);
  v59 = v27;
  swift_retain(v24);
  swift_retain(v26);
  Dependency.wrappedValue.getter(aBlock, v19);
  (*(void (**)(char *, uint64_t))(v20 + 8))(v23, v19);
  v29 = sub_10000732C(aBlock, (uint64_t)v81);
  v30 = swift_allocObject(&unk_100265C60, 32, 7);
  *(_QWORD *)(v30 + 16) = sub_1000C3CB0;
  *(_QWORD *)(v30 + 24) = v28;
  v31 = sub_10000732C((_QWORD *)(*v29 + 16), *(_QWORD *)(*v29 + 40));
  type metadata accessor for LocalCache();
  swift_retain(v28);
  sub_10000840C();
  URL.appendingPathComponent(_:isDirectory:)(0x6169646F74737543, 0xEF64726F6365526ELL, 1);
  v32 = *(void (**)(char *, uint64_t))(v60 + 8);
  v33 = v61;
  v32(v15, v61);
  sub_10000732C((_QWORD *)(*v31 + 16), *(_QWORD *)(*v31 + 40));
  sub_10009D320((uint64_t)v18, (uint64_t)sub_1000C1214, v30);
  v32(v18, v33);
  swift_release(v30);
  sub_100006F58(aBlock);
  swift_release(v28);
  v34 = v59;
  dispatch_group_enter(v59);
  v35 = v64;
  v36 = v63;
  v37 = v65;
  (*(void (**)(char *, uint64_t, uint64_t))(v64 + 16))(v63, v78 + OBJC_IVAR____TtC13appleaccountd25RecoveryFactorsController__cdpController, v65);
  Dependency.wrappedValue.getter(aBlock, v37);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v36, v37);
  v38 = *sub_10000732C(aBlock, (uint64_t)v81);
  v39 = v34;
  swift_retain(v25);
  sub_100048C34(v38, v25, v39);
  swift_release(v25);

  sub_100006F58(aBlock);
  sub_100007764();
  v41 = v66;
  v40 = v67;
  v42 = v68;
  (*(void (**)(char *, _QWORD, uint64_t))(v67 + 104))(v66, enum case for DispatchQoS.QoSClass.default(_:), v68);
  v43 = (void *)static OS_dispatch_queue.global(qos:)(v41);
  (*(void (**)(char *, uint64_t))(v40 + 8))(v41, v42);
  v44 = (_QWORD *)swift_allocObject(&unk_100265C88, 56, 7);
  v45 = v77;
  v46 = v69;
  v47 = v70;
  v44[2] = v77;
  v44[3] = v46;
  v48 = v62;
  v44[4] = v47;
  v44[5] = v48;
  v44[6] = v25;
  v82 = sub_1000C3D20;
  v83 = v44;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000051D0;
  v81 = &unk_100265CA0;
  v49 = _Block_copy(aBlock);
  swift_retain(v48);
  swift_retain(v45);
  swift_retain(v25);
  v50 = swift_retain(v47);
  v51 = v71;
  static DispatchQoS.unspecified.getter(v50);
  v79 = _swiftEmptyArrayStorage;
  v52 = sub_1000C3D30();
  v53 = sub_1000080B4((uint64_t *)&unk_100295A00);
  v54 = sub_100008628();
  v56 = v72;
  v55 = v73;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v79, v53, v54, v73, v52);
  OS_dispatch_group.notify(qos:flags:queue:execute:)(v51, v56, v43, v49);
  _Block_release(v49);

  (*(void (**)(char *, uint64_t))(v76 + 8))(v56, v55);
  (*(void (**)(char *, uint64_t))(v74 + 8))(v51, v75);
  v57 = v83;
  swift_release(v48);
  swift_release(v25);
  swift_release(v77);
  return swift_release(v57);
}

void sub_1000C3864(uint64_t a1, char a2, NSObject *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  _BYTE v10[24];

  if ((a2 & 1) != 0)
  {
    swift_beginAccess(a5 + 16, v10, 1, 0);
    v9 = *(_QWORD *)(a5 + 16);
    *(_QWORD *)(a5 + 16) = a1;
    swift_errorRetain(a1);
    swift_errorRelease(v9);
  }
  else
  {
    swift_beginAccess(a4 + 16, v10, 1, 0);
    *(_BYTE *)(a4 + 16) = a1 & 1;
  }
  dispatch_group_leave(a3);
}

void sub_1000C38F4(char a1, uint64_t a2, NSObject *a3)
{
  _BYTE v6[24];

  swift_beginAccess(a2 + 16, v6, 1, 0);
  *(_BYTE *)(a2 + 16) = a1;
  dispatch_group_leave(a3);
}

uint64_t sub_1000C3948(uint64_t a1, void (*a2)(uint64_t, uint64_t), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[24];
  _BYTE v14[24];
  _BYTE v15[24];

  swift_beginAccess(a1 + 16, v15, 0, 0);
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    swift_errorRetain(v9);
    a2(v9, 1);
    return swift_errorRelease(v9);
  }
  swift_beginAccess(a4 + 16, v14, 0, 0);
  if (*(_BYTE *)(a4 + 16))
    v11 = 2;
  else
    v11 = 1;
  swift_beginAccess(a5 + 16, v13, 0, 0);
  if ((*(_BYTE *)(a5 + 16) & 1) != 0)
  {
    v12 = 4;
LABEL_10:
    v11 |= v12;
    return ((uint64_t (*)(uint64_t, _QWORD))a2)(v11, 0);
  }
  if ((v11 & 1) == 0)
  {
    v12 = 1;
    goto LABEL_10;
  }
  return ((uint64_t (*)(uint64_t, _QWORD))a2)(v11, 0);
}

uint64_t sub_1000C3A2C(uint64_t a1, char a2, void (*a3)(uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v6 = type metadata accessor for CustodianRecord(0);
  __chkstk_darwin(v6, v7);
  v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 1) != 0)
  {
    swift_errorRetain(a1);
    a3(a1, 1);
    return sub_1000057B0(a1, 1);
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 16);
    if (v11)
    {
      v12 = a1 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
      v13 = *(_QWORD *)(v8 + 72);
      swift_bridgeObjectRetain(a1);
      while (1)
      {
        sub_10002A5C0(v12, (uint64_t)v10);
        v14 = *(_QWORD *)&v10[*(int *)(v6 + 36)];
        sub_10002A604((uint64_t)v10);
        if (v14 == 2)
          break;
        v12 += v13;
        if (!--v11)
        {
          sub_1000057B0(a1, 0);
          goto LABEL_7;
        }
      }
      sub_1000057B0(a1, 0);
      v15 = 1;
    }
    else
    {
LABEL_7:
      v15 = 0;
    }
    return ((uint64_t (*)(uint64_t, _QWORD))a3)(v15, 0);
  }
}

uint64_t sub_1000C3B70()
{
  return type metadata accessor for RecoveryFactorsController(0);
}

void sub_1000C3B78(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[3];

  sub_100017464(319, (unint64_t *)&qword_10028C350, &qword_10028C880);
  if (v3 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_100017464(319, &qword_10028E2A8, &qword_10028E2B0);
    if (v5 <= 0x3F)
    {
      v8[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_100017464(319, &qword_10028BDA8, &qword_10028C8D0);
      if (v7 <= 0x3F)
      {
        v8[2] = *(_QWORD *)(v6 - 8) + 64;
        swift_updateClassMetadata2(a1, 256, 3, v8, a1 + 80);
      }
    }
  }
}

uint64_t sub_1000C3C48()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1000C3C58()
{
  uint64_t v0;

  swift_errorRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000C3C7C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

void sub_1000C3CB0(uint64_t a1, char a2)
{
  uint64_t v2;

  sub_1000C3864(a1, a2 & 1, *(NSObject **)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32));
}

uint64_t sub_1000C3CC0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000C3CE4()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[4]);
  swift_release(v0[5]);
  swift_release(v0[6]);
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1000C3D20()
{
  uint64_t v0;

  return sub_1000C3948(*(_QWORD *)(v0 + 16), *(void (**)(uint64_t, uint64_t))(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48));
}

unint64_t sub_1000C3D30()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10028CD20;
  if (!qword_10028CD20)
  {
    v1 = type metadata accessor for DispatchWorkItemFlags(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for DispatchWorkItemFlags, v1);
    atomic_store(result, (unint64_t *)&qword_10028CD20);
  }
  return result;
}

uint64_t sub_1000C3D78(uint64_t a1)
{
  void *v2;
  Class isa;
  id v4;
  id v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  id v10;

  v2 = (void *)objc_opt_self(NSJSONSerialization);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a1);
  v10 = 0;
  v4 = objc_msgSend(v2, "dataWithJSONObject:options:error:", isa, 1, &v10);

  v5 = v10;
  if (v4)
  {
    v6 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v4);

  }
  else
  {
    v7 = v5;
    v8 = _convertNSErrorToError(_:)(v5);

    swift_willThrow();
    swift_errorRelease(v8);
    return 0;
  }
  return v6;
}

void sub_1000C3E94(uint64_t a1, int a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  _BYTE v40[4];
  int v41;
  _BYTE *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD v46[3];
  _BYTE v47[8];
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v44 = a6;
  v43 = a5;
  v41 = a2;
  v9 = type metadata accessor for URL(0);
  v10 = *(_QWORD *)(v9 - 8);
  v12 = __chkstk_darwin(v9, v11);
  v42 = &v40[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v12, v14);
  v16 = &v40[-v15];
  v17 = type metadata accessor for URLResourceValues(0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17, v19);
  v21 = &v40[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if ((a4 & 1) != 0)
    v22 = 1073741825;
  else
    v22 = a3 | 1;
  v23 = v45;
  v24 = Data.write(to:options:)(a1, v22, v43, v44);
  if (v23)
  {
    v25 = v42;
    if (qword_10028ADB0 != -1)
      swift_once(&qword_10028ADB0, sub_100046CC8);
    v26 = type metadata accessor for Logger(0);
    sub_100005288(v26, (uint64_t)qword_1002A8990);
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v10 + 16))(v25, a1, v9);
    swift_errorRetain(v23);
    v27 = swift_errorRetain(v23);
    v28 = Logger.logObject.getter(v27);
    v29 = static os_log_type_t.error.getter();
    v30 = v29;
    if (os_log_type_enabled(v28, v29))
    {
      v31 = swift_slowAlloc(22, -1);
      v44 = swift_slowAlloc(64, -1);
      v50 = v44;
      *(_DWORD *)v31 = 136315394;
      v32 = sub_10009F7E0();
      LODWORD(v43) = v30;
      v33 = dispatch thunk of CustomStringConvertible.description.getter(v9, v32);
      v35 = v34;
      v48 = sub_1001DEF4C(v33, v34, &v50);
      v45 = 0;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49);
      swift_bridgeObjectRelease(v35);
      (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v25, v9);
      *(_WORD *)(v31 + 12) = 2080;
      swift_getErrorValue(v23, v47, v46);
      v36 = Error.localizedDescription.getter(v46[1], v46[2]);
      v38 = v37;
      v48 = sub_1001DEF4C(v36, v37, &v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49);
      swift_bridgeObjectRelease(v38);
      swift_errorRelease(v23);
      swift_errorRelease(v23);
      _os_log_impl((void *)&_mh_execute_header, v28, (os_log_type_t)v43, "Failed to write data to url: %s with error %s", (uint8_t *)v31, 0x16u);
      v39 = v44;
      swift_arrayDestroy(v44, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v39, -1, -1);
      swift_slowDealloc(v31, -1, -1);

      swift_errorRelease(v23);
    }
    else
    {
      swift_errorRelease(v23);
      (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v25, v9);
      swift_errorRelease(v23);
      swift_errorRelease(v23);

    }
  }
  else
  {
    v45 = v18;
    URLResourceValues.init()(v24);
    URLResourceValues.isExcludedFromBackup.setter(v41 & 1);
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v10 + 16))(v16, a1, v9);
    URL.setResourceValues(_:)(v21);
    (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v16, v9);
    (*(void (**)(_BYTE *, uint64_t))(v45 + 8))(v21, v17);
  }
}

void sub_1000C426C(void *a1@<X0>, int a2@<W1>, char *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  id v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int (*v40)(char *, uint64_t, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  void (*v47)(char *, char *, uint64_t);
  id v48;
  NSString v49;
  id v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  NSObject *v55;
  NSObject *v56;
  os_log_type_t v57;
  uint8_t *v58;
  NSObject **v59;
  NSObject *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  char *v68;
  char *v69;
  uint64_t v70;
  void (*v71)(void);
  NSString v72;
  NSObject *v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  void (*v78)(char *, char *, uint64_t);
  char *v79;
  int *v80;
  char *v81;
  id v82;
  id v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  NSString v88;
  id v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int *v96;
  char *v97;
  uint64_t *v98;
  uint64_t v99;
  char *v100;
  void (*v101)(char *, uint64_t);
  uint64_t v102;
  uint64_t v103;
  NSObject *v104;
  NSObject *v105;
  os_log_type_t v106;
  BOOL v107;
  uint64_t v108;
  uint8_t *v109;
  NSObject **v110;
  NSObject *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  _QWORD *v117;
  void (*v118)(char *, uint64_t);
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  void (*v124)(char *, uint64_t);
  uint64_t v125;
  uint64_t *v126;
  char *v127;
  char *v128;
  int *v129;
  uint64_t v130;
  id v131;
  char *v132;
  int v133;
  uint64_t *v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  char *v138;
  char *v139;
  uint64_t v140;
  NSObject *v141;
  unint64_t v142;
  uint64_t v143;

  v133 = a2;
  v138 = a3;
  v4 = sub_1000080B4(&qword_10028E810);
  __chkstk_darwin(v4, v5);
  v7 = (char *)&v127 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Date(0);
  v135 = *(_QWORD *)(v8 - 8);
  v136 = v8;
  v10 = __chkstk_darwin(v8, v9);
  v132 = (char *)&v127 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10, v12);
  v14 = (char *)&v127 - v13;
  v15 = sub_1000080B4((uint64_t *)&unk_1002904F0);
  v17 = __chkstk_darwin(v15, v16);
  v19 = (char *)&v127 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17, v20);
  v22 = (char *)&v127 - v21;
  v140 = type metadata accessor for UUID(0);
  v23 = *(_QWORD *)(v140 - 8);
  v25 = __chkstk_darwin(v140, v24);
  v137 = (char *)&v127 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __chkstk_darwin(v25, v27);
  v139 = (char *)&v127 - v29;
  v30 = CKRecord.recordType.getter(v28);
  v32 = v31;
  if (v30 == 0xD000000000000017 && v31 == 0x800000010021BDE0)
  {
    swift_bridgeObjectRelease(0x800000010021BDE0);
  }
  else
  {
    v33 = _stringCompareWithSmolCheck(_:_:expecting:)(v30, v31, 0xD000000000000017, 0x800000010021BDE0, 0);
    swift_bridgeObjectRelease(v32);
    if ((v33 & 1) == 0)
    {
LABEL_7:
      type metadata accessor for InheritanceError(0);
      v43 = v42;
      v143 = 2;
      v44 = sub_100005014((uint64_t)&_swiftEmptyArrayStorage);
      v45 = sub_100005150(&qword_10028B350, (uint64_t (*)(uint64_t))type metadata accessor for InheritanceError, (uint64_t)&unk_100216D64);
      v46 = _BridgedStoredNSError.init(_:userInfo:)(&v141, &v143, v44, v43, v45);
      swift_willThrow(v46);

      return;
    }
  }
  v34 = objc_msgSend(a1, "recordID");
  v35 = objc_msgSend(v34, "recordName");

  v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(v35);
  v38 = v37;

  UUID.init(uuidString:)(v36, v38);
  swift_bridgeObjectRelease(v38);
  v39 = v23;
  v40 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48);
  v41 = v140;
  if (v40(v22, 1, v140) == 1)
  {
    sub_100004934((uint64_t)v22, (uint64_t *)&unk_1002904F0);
    goto LABEL_7;
  }
  v130 = v39;
  v47 = *(void (**)(char *, char *, uint64_t))(v39 + 32);
  v47(v139, v22, v41);
  v48 = objc_msgSend(a1, "encryptedValuesByKey");
  v49 = String._bridgeToObjectiveC()();
  v131 = v48;
  v50 = objc_msgSend(v48, "objectForKeyedSubscript:", v49);

  if (!v50)
    goto LABEL_12;
  v143 = (uint64_t)v50;
  v51 = sub_1000080B4(&qword_10028DB30);
  if ((swift_dynamicCast(&v141, &v143, v51, &type metadata for String, 6) & 1) == 0)
    goto LABEL_12;
  v52 = v142;
  UUID.init(uuidString:)(v141, v142);
  swift_bridgeObjectRelease(v52);
  v53 = v140;
  if (v40(v19, 1, v140) == 1)
  {
    sub_100004934((uint64_t)v19, (uint64_t *)&unk_1002904F0);
LABEL_12:
    if (qword_10028ADD0 != -1)
      swift_once(&qword_10028ADD0, sub_100046D50);
    v54 = type metadata accessor for Logger(0);
    sub_100005288(v54, (uint64_t)qword_1002A89F0);
    v55 = a1;
    v56 = Logger.logObject.getter(v55);
    v57 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v56, v57))
    {
      v58 = (uint8_t *)swift_slowAlloc(12, -1);
      v59 = (NSObject **)swift_slowAlloc(8, -1);
      *(_DWORD *)v58 = 138412290;
      v141 = v55;
      v60 = v55;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v141, &v142);
      *v59 = v55;

      _os_log_impl((void *)&_mh_execute_header, v56, v57, "Missing beneficiaryID - %@", v58, 0xCu);
      v61 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v59, 1, v61);
      swift_slowDealloc(v59, -1, -1);
      swift_slowDealloc(v58, -1, -1);
    }
    else
    {

      v56 = v55;
    }
    v62 = v130;

    type metadata accessor for InheritanceError(0);
    v64 = v63;
    v143 = 2;
    v65 = sub_100005014((uint64_t)&_swiftEmptyArrayStorage);
    v66 = sub_100005150(&qword_10028B350, (uint64_t (*)(uint64_t))type metadata accessor for InheritanceError, (uint64_t)&unk_100216D64);
    v67 = _BridgedStoredNSError.init(_:userInfo:)(&v141, &v143, v65, v64, v66);
    swift_willThrow(v67);
    swift_unknownObjectRelease(v131);

    (*(void (**)(char *, uint64_t))(v62 + 8))(v139, v140);
    return;
  }
  v68 = v137;
  v47(v137, v19, v53);
  v129 = (int *)type metadata accessor for InheritanceHealthRecord(0);
  v69 = v138;
  v70 = v53;
  v71 = *(void (**)(void))(v130 + 16);
  v128 = &v138[v129[7]];
  v71();
  ((void (*)(char *, char *, uint64_t))v71)(v69, v68, v70);
  v72 = String._bridgeToObjectiveC()();
  v73 = objc_msgSend(v131, "objectForKeyedSubscript:", v72);

  if (!v73)
  {
    v76 = v135;
    v74 = v136;
    v77 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v135 + 56))(v7, 1, 1, v136);
    goto LABEL_22;
  }
  v141 = v73;
  v74 = v136;
  v75 = swift_dynamicCast(v7, &v141, v51, v136, 6);
  v76 = v135;
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v135 + 56))(v7, v75 ^ 1u, 1, v74);
  v77 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v76 + 48))(v7, 1, v74);
  if ((_DWORD)v77 == 1)
  {
LABEL_22:
    Date.init(timeIntervalSince1970:)(v77, 946713600.0);
    sub_100004934((uint64_t)v7, &qword_10028E810);
    v78 = *(void (**)(char *, char *, uint64_t))(v76 + 32);
    goto LABEL_23;
  }
  v78 = *(void (**)(char *, char *, uint64_t))(v76 + 32);
  v78(v14, v7, v74);
LABEL_23:
  v79 = v138;
  v80 = v129;
  v81 = &v138[v129[5]];
  v78(v81, v14, v74);
  v82 = objc_msgSend(objc_allocWithZone((Class)NSKeyedArchiver), "initRequiringSecureCoding:", 1);
  objc_msgSend(a1, "encodeSystemFieldsWithCoder:", v82);
  objc_msgSend(v82, "finishEncoding");
  v83 = objc_msgSend(v82, "encodedData");
  v84 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v83);
  v86 = v85;

  v87 = (uint64_t *)&v79[v80[8]];
  *v87 = v84;
  v87[1] = v86;
  v88 = String._bridgeToObjectiveC()();
  v89 = objc_msgSend(v131, "objectForKeyedSubscript:", v88);

  if (v89 && (v143 = (uint64_t)v89, (swift_dynamicCast(&v141, &v143, v51, &type metadata for Data, 6) & 1) != 0))
  {
    v127 = v81;
    v90 = (uint64_t)v141;
    v91 = v142;
    sub_10000F450((uint64_t)v141, v142);
    v92 = sub_10019E16C(v90, v91);
    if (v95 == 1)
    {
      v96 = v129;
      v97 = v138;
      v98 = (uint64_t *)&v138[v129[6]];
      *v98 = v90;
      v98[1] = v91;
      v99 = sub_10000F450(v90, v91);
      v100 = v132;
      Date.init(timeIntervalSince1970:)(v99, 946713600.0);
      swift_unknownObjectRelease(v131);

      sub_10000F494(v90, v91);
      v101 = *(void (**)(char *, uint64_t))(v130 + 8);
      v102 = v140;
      v101(v137, v140);
      v101(v139, v102);
      (*(void (**)(char *, char *, uint64_t))(v135 + 40))(v127, v100, v136);
    }
    else
    {
      v120 = v92;
      v121 = v93;
      v122 = v94;
      v123 = v95;
      swift_unknownObjectRelease(v131);

      sub_10000F494(v90, v91);
      v124 = *(void (**)(char *, uint64_t))(v130 + 8);
      v125 = v140;
      v124(v137, v140);
      v124(v139, v125);
      sub_10000F450(v120, v121);
      sub_1000C6654(v120, v121, v122, v123);
      v96 = v129;
      v97 = v138;
      v126 = (uint64_t *)&v138[v129[6]];
      *v126 = v120;
      v126[1] = v121;
    }
    v97[v96[9]] = v133 & 1;
  }
  else
  {
    v134 = v87;
    if (qword_10028ADD0 != -1)
      swift_once(&qword_10028ADD0, sub_100046D50);
    v103 = type metadata accessor for Logger(0);
    sub_100005288(v103, (uint64_t)qword_1002A89F0);
    v104 = a1;
    v105 = Logger.logObject.getter(v104);
    v106 = static os_log_type_t.error.getter();
    v107 = os_log_type_enabled(v105, v106);
    v108 = v130;
    if (v107)
    {
      v109 = (uint8_t *)swift_slowAlloc(12, -1);
      v110 = (NSObject **)swift_slowAlloc(8, -1);
      v127 = v81;
      *(_DWORD *)v109 = 138412290;
      v141 = v104;
      v111 = v104;
      v108 = v130;
      v81 = v127;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v141, &v142);
      *v110 = v104;

      v79 = v138;
      _os_log_impl((void *)&_mh_execute_header, v105, v106, "Missing access key hash - %@", v109, 0xCu);
      v112 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v110, 1, v112);
      swift_slowDealloc(v110, -1, -1);
      swift_slowDealloc(v109, -1, -1);
    }
    else
    {

      v105 = v104;
    }

    type metadata accessor for InheritanceError(0);
    v114 = v113;
    v143 = 2;
    v115 = sub_100005014((uint64_t)&_swiftEmptyArrayStorage);
    v116 = sub_100005150(&qword_10028B350, (uint64_t (*)(uint64_t))type metadata accessor for InheritanceError, (uint64_t)&unk_100216D64);
    v117 = _BridgedStoredNSError.init(_:userInfo:)(&v141, &v143, v115, v114, v116);
    swift_willThrow(v117);
    swift_unknownObjectRelease(v131);

    v118 = *(void (**)(char *, uint64_t))(v108 + 8);
    v119 = v140;
    v118(v137, v140);
    v118(v139, v119);
    v118(v79, v119);
    (*(void (**)(char *, uint64_t))(v135 + 8))(v81, v136);
    v118(v128, v119);
    sub_10000F494(*v134, v134[1]);
  }
}

uint64_t sub_1000C4E24(id *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  id v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  void (*v37)(_QWORD);
  uint64_t v38;
  uint64_t (*v39)(uint64_t, uint64_t, uint64_t);
  int v40;
  uint64_t v41;
  _BYTE *v42;
  _QWORD *v43;
  uint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  char v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  id v61;
  _BYTE *v63;
  uint64_t v64;
  void (*v65)(_BYTE *, uint64_t);
  _BYTE v66[12];
  int v67;
  _BYTE *v68;
  _BYTE *v69;
  uint64_t v70;
  void (*v71)(_QWORD *, uint64_t, uint64_t);
  char *v72;
  uint64_t v73;
  uint64_t ObjectType;
  id v75;
  _QWORD v76[2];
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  void *v81;

  v2 = v1;
  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v68 = &v66[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v72 = (char *)sub_1000080B4(&qword_100290500);
  __chkstk_darwin(v72, v8);
  v10 = &v66[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = sub_1000080B4(&qword_10028E810);
  v13 = __chkstk_darwin(v11, v12);
  v69 = &v66[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v16 = __chkstk_darwin(v13, v15);
  v18 = &v66[-v17];
  __chkstk_darwin(v16, v19);
  v21 = &v66[-v20];
  v22 = objc_msgSend(*a1, "encryptedValuesByKey");
  ObjectType = swift_getObjectType(v22);
  v75 = v22;
  v23 = CKRecordKeyValueSetting.subscript.getter(&v77, 0x69636966656E6562, 0xED00004449797261);
  v24 = v77;
  v25 = v78;
  v73 = v2;
  v26 = UUID.uuidString.getter(v23);
  v28 = v27;
  if (!v25)
  {
    v30 = swift_bridgeObjectRelease(v27);
    v31 = ObjectType;
    v29 = v73;
LABEL_7:
    v33 = UUID.uuidString.getter(v30);
    v80 = &type metadata for String;
    v81 = &protocol witness table for String;
    v77 = v33;
    v78 = v34;
    CKRecordKeyValueSetting.subscript.setter(&v77, 0x69636966656E6562, 0xED00004449797261, v31);
    goto LABEL_8;
  }
  if (v24 == v26 && v25 == v27)
  {
    swift_bridgeObjectRelease(v25);
    swift_bridgeObjectRelease(v28);
    v29 = v73;
    goto LABEL_8;
  }
  v32 = _stringCompareWithSmolCheck(_:_:expecting:)(v24, v25, v26, v27, 0);
  swift_bridgeObjectRelease(v25);
  v30 = swift_bridgeObjectRelease(v28);
  v31 = ObjectType;
  v29 = v73;
  if ((v32 & 1) == 0)
    goto LABEL_7;
LABEL_8:
  v35 = "ntd25RecoveryFactorsController";
  CKRecordKeyValueSetting.subscript.getter(v21, 0xD000000000000017, 0x800000010020C0E0);
  v36 = type metadata accessor for InheritanceHealthRecord(0);
  v37 = *(void (**)(_QWORD))(v5 + 16);
  v70 = v29 + *(int *)(v36 + 20);
  v71 = (void (*)(_QWORD *, uint64_t, uint64_t))v37;
  v37(v18);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v18, 0, 1, v4);
  v38 = (uint64_t)&v10[*((int *)v72 + 12)];
  sub_1000C6684((uint64_t)v21, (uint64_t)v10);
  sub_1000C6684((uint64_t)v18, v38);
  v39 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v39((uint64_t)v10, 1, v4) == 1)
  {
    sub_100004934((uint64_t)v18, &qword_10028E810);
    sub_100004934((uint64_t)v21, &qword_10028E810);
    v40 = v39(v38, 1, v4);
    v41 = ObjectType;
    if (v40 == 1)
    {
      sub_100004934((uint64_t)v10, &qword_10028E810);
      goto LABEL_15;
    }
    goto LABEL_13;
  }
  v72 = "ntd25RecoveryFactorsController";
  v42 = v69;
  sub_1000C6684((uint64_t)v10, (uint64_t)v69);
  if (v39(v38, 1, v4) == 1)
  {
    sub_100004934((uint64_t)v18, &qword_10028E810);
    sub_100004934((uint64_t)v21, &qword_10028E810);
    (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v42, v4);
    v41 = ObjectType;
    v35 = v72;
LABEL_13:
    sub_100004934((uint64_t)v10, &qword_100290500);
LABEL_14:
    v80 = (_QWORD *)v4;
    v81 = &protocol witness table for Date;
    v43 = sub_1000B9D04(&v77);
    v71(v43, v70, v4);
    CKRecordKeyValueSetting.subscript.setter(&v77, 0xD000000000000017, (unint64_t)v35 | 0x8000000000000000, v41);
    goto LABEL_15;
  }
  v63 = v68;
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 32))(v68, v38, v4);
  v64 = sub_100005150(&qword_100290510, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  v67 = dispatch thunk of static Equatable.== infix(_:_:)(v42, v63, v4, v64);
  v65 = *(void (**)(_BYTE *, uint64_t))(v5 + 8);
  v65(v63, v4);
  sub_100004934((uint64_t)v18, &qword_10028E810);
  sub_100004934((uint64_t)v21, &qword_10028E810);
  v65(v42, v4);
  sub_100004934((uint64_t)v10, &qword_10028E810);
  v41 = ObjectType;
  v35 = v72;
  if ((v67 & 1) == 0)
    goto LABEL_14;
LABEL_15:
  v44 = (uint64_t *)(v73 + *(int *)(v36 + 24));
  v46 = *v44;
  v45 = v44[1];
  sub_10000F450(*v44, v45);
  CKRecordKeyValueSetting.subscript.getter(v76, 0x654B737365636361, 0xED00006873614879);
  v48 = v76[0];
  v47 = v76[1];
  v49 = type metadata accessor for JSONEncoder(0);
  swift_allocObject(v49, *(unsigned int *)(v49 + 48), *(unsigned __int16 *)(v49 + 52));
  v50 = JSONEncoder.init()();
  v77 = v46;
  v78 = v45;
  v51 = sub_1000C66CC();
  v79 = 0;
  v80 = 0;
  v52 = dispatch thunk of JSONEncoder.encode<A>(_:)(&v77, &type metadata for TrustedContactKeyIntegrity, v51);
  v54 = v53;
  swift_release(v50);
  if (v47 >> 60 == 15)
  {
    sub_1000144D8(v48, v47);
    sub_1000144D8(v52, v54);
LABEL_19:
    swift_allocObject(v49, *(unsigned int *)(v49 + 48), *(unsigned __int16 *)(v49 + 52));
    v57 = JSONEncoder.init()();
    v77 = v46;
    v78 = v45;
    v79 = 0;
    v80 = 0;
    v58 = dispatch thunk of JSONEncoder.encode<A>(_:)(&v77, &type metadata for TrustedContactKeyIntegrity, v51);
    v60 = v59;
    swift_release(v57);
    v80 = &type metadata for Data;
    v81 = &protocol witness table for Data;
    v77 = v58;
    v78 = v60;
    v61 = v75;
    CKRecordKeyValueSetting.subscript.setter(&v77, 0x654B737365636361, 0xED00006873614879, ObjectType);
    swift_unknownObjectRelease(v61);
    sub_10000F494(v46, v45);
    return swift_bridgeObjectRelease(0);
  }
  sub_100014534(v48, v47);
  sub_10000EA4C(v48, v47);
  v56 = v55;
  sub_10000F494(v52, v54);
  sub_1000144D8(v48, v47);
  sub_1000144D8(v48, v47);
  if ((v56 & 1) == 0)
    goto LABEL_19;
  sub_10000F494(v46, v45);
  swift_unknownObjectRelease(v75);
  return swift_bridgeObjectRelease(0);
}

uint64_t sub_1000C555C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000C5590
                                                            + 4 * asc_10021BD40[a1]))(0x444964726F636572, 0xE800000000000000);
}

uint64_t sub_1000C5590()
{
  return 0x69636966656E6562;
}

unint64_t sub_1000C55B4()
{
  return 0xD000000000000017;
}

uint64_t sub_1000C562C()
{
  unsigned __int8 *v0;

  return sub_1000C555C(*v0);
}

uint64_t sub_1000C5634@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1000C70D4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000C5658(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000C6710();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000C5680(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000C6710();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000C56A8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  int *v31;
  _QWORD *v32;
  char *v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  int *v37;
  char *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  int *v43;
  char *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  _QWORD *v60;
  _QWORD *v61;
  char v62;
  uint64_t v63;
  _QWORD v64[2];
  _QWORD *v65;
  int *v66;
  char *v67;
  _QWORD *v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  __int128 v79;
  char v80;

  v69 = a2;
  v73 = type metadata accessor for Date(0);
  v71 = *(_QWORD *)(v73 - 8);
  v4 = __chkstk_darwin(v73, v3);
  v70 = (char *)v64 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4, v6);
  v72 = (_QWORD *)((char *)v64 - v7);
  v77 = type metadata accessor for UUID(0);
  v74 = *(_QWORD *)(v77 - 8);
  v9 = __chkstk_darwin(v77, v8);
  v11 = (_QWORD *)((char *)v64 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v9, v12);
  v75 = (_QWORD *)((char *)v64 - v13);
  v76 = sub_1000080B4(&qword_100290530);
  v14 = *(_QWORD *)(v76 - 8);
  __chkstk_darwin(v76, v15);
  v17 = (char *)v64 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for InheritanceHealthRecord(0);
  __chkstk_darwin(v18, v19);
  v21 = (char *)v64 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = a1[3];
  v23 = a1[4];
  sub_10000732C(a1, v22);
  v24 = sub_1000C6710();
  v25 = v78;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for InheritanceHealthRecord.CodingKeys, &type metadata for InheritanceHealthRecord.CodingKeys, v24, v22, v23);
  if (v25)
    return sub_100006F58(a1);
  v65 = v11;
  v66 = (int *)v18;
  v78 = v14;
  v67 = v21;
  v68 = a1;
  LOBYTE(v79) = 0;
  v27 = sub_100005150((unint64_t *)&unk_10028BBB0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v29 = v75;
  v28 = v76;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v75, v77, &v79, v76, v77, v27);
  v30 = v28;
  v31 = v66;
  v32 = v17;
  v33 = &v67[v66[7]];
  v34 = v29;
  v35 = v77;
  v75 = *(_QWORD **)(v74 + 32);
  ((void (*)(char *, _QWORD *, uint64_t))v75)(v33, v34, v77);
  LOBYTE(v79) = 1;
  v36 = v65;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v65, v35, &v79, v30, v35, v27);
  v37 = v31;
  v64[1] = v33;
  v38 = v67;
  ((void (*)(char *, _QWORD *, uint64_t))v75)(v67, v36, v35);
  LOBYTE(v79) = 2;
  v39 = sub_100005150((unint64_t *)&unk_100294B80, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  v40 = v72;
  v41 = v73;
  v42 = v76;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v72, v73, &v79, v76, v73, v39);
  v43 = v37;
  v44 = &v38[v37[5]];
  v45 = v71;
  (*(void (**)(char *, _QWORD *, uint64_t))(v71 + 32))(v44, v40, v41);
  v80 = 3;
  v46 = sub_10000F40C();
  v75 = 0;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v79, &type metadata for Data, &v80, v42, &type metadata for Data, v46);
  *(_OWORD *)&v38[v43[8]] = v79;
  v80 = 4;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v79, &type metadata for Data, &v80, v42, &type metadata for Data, v46);
  v47 = v42;
  v72 = v32;
  v48 = v79;
  sub_10000F450(v79, *((unint64_t *)&v79 + 1));
  v49 = sub_10019E16C(v48, *((unint64_t *)&v48 + 1));
  v65 = (_QWORD *)*((_QWORD *)&v48 + 1);
  if (v52 == 1)
  {
    *(_OWORD *)&v67[v66[6]] = v48;
    v53 = sub_10000F450(v48, *((unint64_t *)&v48 + 1));
    v54 = v70;
    Date.init(timeIntervalSince1970:)(v53, 946713600.0);
    (*(void (**)(char *, char *, uint64_t))(v45 + 40))(v44, v54, v73);
  }
  else
  {
    v55 = v49;
    v56 = v50;
    v57 = v52;
    v58 = v51;
    sub_10000F450(v49, v50);
    sub_1000C6654(v55, v56, v58, v57);
    v59 = (uint64_t *)&v67[v66[6]];
    *v59 = v55;
    v59[1] = v56;
  }
  v60 = v68;
  LOBYTE(v79) = 5;
  v61 = v72;
  v62 = KeyedDecodingContainer.decode(_:forKey:)(&v79, v47);
  (*(void (**)(_QWORD *, uint64_t))(v78 + 8))(v61, v47);
  sub_10000F494(v48, (unint64_t)v65);
  v63 = (uint64_t)v67;
  v67[v66[9]] = v62 & 1;
  sub_1000C6754(v63, v69);
  sub_100006F58(v60);
  return sub_1000C6798(v63);
}

uint64_t sub_1000C5D24(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  char v40;

  v3 = v1;
  v5 = sub_1000080B4((uint64_t *)&unk_100290548);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a1[3];
  v11 = a1[4];
  sub_10000732C(a1, v10);
  v12 = sub_1000C6710();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for InheritanceHealthRecord.CodingKeys, &type metadata for InheritanceHealthRecord.CodingKeys, v12, v10, v11);
  v13 = (int *)type metadata accessor for InheritanceHealthRecord(0);
  v14 = v3 + v13[7];
  LOBYTE(v37) = 0;
  v15 = type metadata accessor for UUID(0);
  v16 = sub_100005150((unint64_t *)&unk_10028DC20, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v14, &v37, v5, v15, v16);
  if (v2)
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  LOBYTE(v37) = 1;
  KeyedEncodingContainer.encode<A>(_:forKey:)(v3, &v37, v5, v15, v16);
  v17 = v3 + v13[5];
  LOBYTE(v37) = 2;
  v18 = type metadata accessor for Date(0);
  v19 = sub_100005150((unint64_t *)&unk_100294BA0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v17, &v37, v5, v18, v19);
  v37 = *(_OWORD *)(v3 + v13[8]);
  v40 = 3;
  v20 = sub_10000F4D8();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v37, &v40, v5, &type metadata for Data, v20);
  v34 = v20;
  v21 = (uint64_t *)(v3 + v13[6]);
  v22 = *v21;
  v23 = v21[1];
  v24 = type metadata accessor for JSONEncoder(0);
  swift_allocObject(v24, *(unsigned int *)(v24 + 48), *(unsigned __int16 *)(v24 + 52));
  sub_10000F450(v22, v23);
  v26 = JSONEncoder.init()(v25);
  v35 = v22;
  v36 = v23;
  *(_QWORD *)&v37 = v22;
  *((_QWORD *)&v37 + 1) = v23;
  v27 = sub_1000C66CC();
  v38 = 0;
  v39 = 0;
  v28 = dispatch thunk of JSONEncoder.encode<A>(_:)(&v37, &type metadata for TrustedContactKeyIntegrity, v27);
  v30 = v29;
  swift_release(v26);
  *(_QWORD *)&v37 = v28;
  *((_QWORD *)&v37 + 1) = v30;
  v40 = 4;
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v37, &v40, v5, &type metadata for Data, v34);
  sub_10000F494(v28, v30);
  v31 = *(unsigned __int8 *)(v3 + v13[9]);
  LOBYTE(v37) = 5;
  KeyedEncodingContainer.encode(_:forKey:)(v31, &v37, v5);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  sub_10000F494(v35, v36);
  return swift_bridgeObjectRelease(0);
}

uint64_t sub_1000C60C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t (*v11)(char *, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  char v14;
  void (*v15)(char *, uint64_t);
  char v16;
  double v17;
  uint64_t v18;
  uint64_t v20;

  v1 = type metadata accessor for Date(0);
  v2 = *(_QWORD *)(v1 - 8);
  v4 = __chkstk_darwin(v1, v3);
  v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4, v7);
  v9 = (char *)&v20 - v8;
  v10 = v0 + *(int *)(type metadata accessor for InheritanceHealthRecord(0) + 20);
  v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v2 + 16);
  v12 = v11(v9, v10, v1);
  Date.init(timeIntervalSince1970:)(v12, 946713600.0);
  v13 = sub_100005150(&qword_100290510, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  v14 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v6, v1, v13);
  v15 = *(void (**)(char *, uint64_t))(v2 + 8);
  v15(v6, v1);
  v15(v9, v1);
  if ((v14 & 1) != 0)
  {
    v16 = 1;
  }
  else
  {
    v17 = sub_1000C76C0();
    v11(v6, v10, v1);
    v18 = Date.init(timeInterval:since:)(v6, v17);
    Date.init()(v18);
    v16 = static Date.< infix(_:_:)(v6, v9);
    v15(v6, v1);
    v15(v9, v1);
  }
  return v16 & 1;
}

uint64_t sub_1000C6250()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  void (*v14)(char *, uint64_t);
  uint64_t v15;
  uint64_t result;
  double v17;
  uint64_t v18;

  v1 = type metadata accessor for Date(0);
  v2 = *(_QWORD *)(v1 - 8);
  v4 = __chkstk_darwin(v1, v3);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4, v7);
  v9 = (char *)&v18 - v8;
  v10 = v0 + *(int *)(type metadata accessor for InheritanceHealthRecord(0) + 20);
  v11 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v2 + 16))(v9, v10, v1);
  Date.init(timeIntervalSince1970:)(v11, 946713600.0);
  v12 = sub_100005150(&qword_100290510, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  v13 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v6, v1, v12);
  v14 = *(void (**)(char *, uint64_t))(v2 + 8);
  v14(v6, v1);
  v15 = ((uint64_t (*)(char *, uint64_t))v14)(v9, v1);
  if ((v13 & 1) != 0)
    return -1;
  Date.init()(v15);
  v17 = Date.timeIntervalSince(_:)(v10);
  result = ((uint64_t (*)(char *, uint64_t))v14)(v9, v1);
  if ((~*(_QWORD *)&v17 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (v17 <= -9.22337204e18)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (v17 < 9.22337204e18)
    return (uint64_t)v17;
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_1000C63E4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000C56A8(a1, a2);
}

uint64_t sub_1000C63F8(_QWORD *a1)
{
  return sub_1000C5D24(a1);
}

uint64_t sub_1000C640C()
{
  uint64_t v0;
  Swift::String v1;
  void *object;
  Swift::String v3;
  uint64_t v4;
  uint64_t v5;
  Swift::String v6;
  void *v7;
  Swift::String v8;
  uint64_t v9;
  uint64_t v10;
  Swift::String v11;
  void *v12;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;

  v15 = 0;
  v16 = 0xE000000000000000;
  _StringGuts.grow(_:)(53);
  v14 = type metadata accessor for InheritanceHealthRecord(0);
  v0 = sub_1000080B4((uint64_t *)&unk_100290518);
  v1._countAndFlagsBits = String.init<A>(describing:)(&v14, v0);
  object = v1._object;
  String.append(_:)(v1);
  swift_bridgeObjectRelease(object);
  v3._object = (void *)0x8000000100209460;
  v3._countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v3);
  v4 = type metadata accessor for UUID(0);
  v5 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v6._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v4, v5);
  v7 = v6._object;
  String.append(_:)(v6);
  swift_bridgeObjectRelease(v7);
  v8._countAndFlagsBits = 0xD00000000000001CLL;
  v8._object = (void *)0x800000010020C180;
  String.append(_:)(v8);
  v9 = type metadata accessor for Date(0);
  v10 = sub_100005150(&qword_100290528, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  v11._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v9, v10);
  v12 = v11._object;
  String.append(_:)(v11);
  swift_bridgeObjectRelease(v12);
  return v15;
}

uint64_t sub_1000C6580(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_100005150((unint64_t *)&unk_1002904D0, type metadata accessor for InheritanceHealthRecord, (uint64_t)&unk_10021BDA0);
  result = sub_100005150(&qword_10028D5A0, type metadata accessor for InheritanceHealthRecord, (uint64_t)&unk_10021BD78);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t type metadata accessor for InheritanceHealthRecord(uint64_t a1)
{
  uint64_t result;

  result = qword_1002905B0;
  if (!qword_1002905B0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for InheritanceHealthRecord);
  return result;
}

uint64_t sub_1000C6618(uint64_t a1)
{
  uint64_t result;

  result = sub_100005150((unint64_t *)&unk_1002904E0, type metadata accessor for InheritanceHealthRecord, (uint64_t)&unk_10021BDC8);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1000C6654(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 != 1)
  {
    sub_10000F494(result, a2);
    return swift_bridgeObjectRelease(a4);
  }
  return result;
}

uint64_t sub_1000C6684(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000080B4(&qword_10028E810);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_1000C66CC()
{
  unint64_t result;

  result = qword_100290508;
  if (!qword_100290508)
  {
    result = swift_getWitnessTable(&unk_10022048C, &type metadata for TrustedContactKeyIntegrity);
    atomic_store(result, (unint64_t *)&qword_100290508);
  }
  return result;
}

unint64_t sub_1000C6710()
{
  unint64_t result;

  result = qword_100290538;
  if (!qword_100290538)
  {
    result = swift_getWitnessTable(&unk_10021BF28, &type metadata for InheritanceHealthRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100290538);
  }
  return result;
}

uint64_t sub_1000C6754(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for InheritanceHealthRecord(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000C6798(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for InheritanceHealthRecord(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t storeEnumTagSinglePayload for InheritanceHealthRecord.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_1000C6820 + 4 * byte_10021BD4B[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1000C6854 + 4 * byte_10021BD46[v4]))();
}

uint64_t sub_1000C6854(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000C685C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000C6864);
  return result;
}

uint64_t sub_1000C6870(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000C6878);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_1000C687C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000C6884(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for InheritanceHealthRecord.CodingKeys()
{
  return &type metadata for InheritanceHealthRecord.CodingKeys;
}

_QWORD *sub_1000C68A0(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(_QWORD *, _QWORD *, uint64_t);
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v23 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v23 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v23);
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    v8 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v9 = a3[5];
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for Date(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
    v13 = a3[6];
    v14 = (_QWORD *)((char *)a1 + v13);
    v15 = (_QWORD *)((char *)a2 + v13);
    v16 = *v15;
    v17 = v15[1];
    sub_10000F450(*v15, v17);
    *v14 = v16;
    v14[1] = v17;
    v8((_QWORD *)((char *)a1 + a3[7]), (_QWORD *)((char *)a2 + a3[7]), v7);
    v18 = a3[8];
    v19 = (_QWORD *)((char *)a1 + v18);
    v20 = (_QWORD *)((char *)a2 + v18);
    v21 = *v20;
    v22 = v20[1];
    sub_10000F450(*v20, v22);
    *v19 = v21;
    v19[1] = v22;
    *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  }
  return a1;
}

uint64_t sub_1000C69BC(uint64_t a1, int *a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;

  v4 = type metadata accessor for UUID(0);
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(a1, v4);
  v6 = a1 + a2[5];
  v7 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  sub_10000F494(*(_QWORD *)(a1 + a2[6]), *(_QWORD *)(a1 + a2[6] + 8));
  v5(a1 + a2[7], v4);
  return sub_10000F494(*(_QWORD *)(a1 + a2[8]), *(_QWORD *)(a1 + a2[8] + 8));
}

uint64_t sub_1000C6A5C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t v21;

  v6 = type metadata accessor for UUID(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
  v12 = a3[6];
  v13 = (uint64_t *)(a1 + v12);
  v14 = (uint64_t *)(a2 + v12);
  v15 = *v14;
  v16 = v14[1];
  sub_10000F450(*v14, v16);
  *v13 = v15;
  v13[1] = v16;
  v7(a1 + a3[7], a2 + a3[7], v6);
  v17 = a3[8];
  v18 = (uint64_t *)(a1 + v17);
  v19 = (uint64_t *)(a2 + v17);
  v20 = *v19;
  v21 = v19[1];
  sub_10000F450(*v19, v21);
  *v18 = v20;
  v18[1] = v21;
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_1000C6B4C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;

  v6 = type metadata accessor for UUID(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 24))(v9, v10, v11);
  v12 = a3[6];
  v13 = (uint64_t *)(a1 + v12);
  v14 = (uint64_t *)(a2 + v12);
  v15 = *v14;
  v16 = v14[1];
  sub_10000F450(*v14, v16);
  v17 = *v13;
  v18 = v13[1];
  *v13 = v15;
  v13[1] = v16;
  sub_10000F494(v17, v18);
  v7(a1 + a3[7], a2 + a3[7], v6);
  v19 = a3[8];
  v20 = (uint64_t *)(a1 + v19);
  v21 = (uint64_t *)(a2 + v19);
  v22 = *v21;
  v23 = v21[1];
  sub_10000F450(*v21, v23);
  v24 = *v20;
  v25 = v20[1];
  *v20 = v22;
  v20[1] = v23;
  sub_10000F494(v24, v25);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_1000C6C4C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = type metadata accessor for UUID(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v9, v10, v11);
  v12 = a3[7];
  *(_OWORD *)(a1 + a3[6]) = *(_OWORD *)(a2 + a3[6]);
  v7(a1 + v12, a2 + v12, v6);
  v13 = a3[9];
  *(_OWORD *)(a1 + a3[8]) = *(_OWORD *)(a2 + a3[8]);
  *(_BYTE *)(a1 + v13) = *(_BYTE *)(a2 + v13);
  return a1;
}

uint64_t sub_1000C6D0C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;

  v6 = type metadata accessor for UUID(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  v8 = a3[5];
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  v12 = a3[6];
  v13 = *(_QWORD *)(a1 + v12);
  v14 = *(_QWORD *)(a1 + v12 + 8);
  *(_OWORD *)(a1 + v12) = *(_OWORD *)(a2 + v12);
  sub_10000F494(v13, v14);
  v7(a1 + a3[7], a2 + a3[7], v6);
  v15 = a3[8];
  v16 = *(_QWORD *)(a1 + v15);
  v17 = *(_QWORD *)(a1 + v15 + 8);
  *(_OWORD *)(a1 + v15) = *(_OWORD *)(a2 + v15);
  sub_10000F494(v16, v17);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_1000C6DEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000C6DF8);
}

uint64_t sub_1000C6DF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v14;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = type metadata accessor for Date(0);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 36));
  if (v14 >= 2)
    return ((v14 + 2147483646) & 0x7FFFFFFF) + 1;
  else
    return 0;
}

uint64_t sub_1000C6EB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000C6EBC);
}

uint64_t sub_1000C6EBC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  result = type metadata accessor for Date(0);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  *(_BYTE *)(a1 + *(int *)(a4 + 36)) = a2 + 1;
  return result;
}

uint64_t sub_1000C6F60(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[6];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(result - 8) + 64;
    v6[0] = v4;
    result = type metadata accessor for Date(319);
    if (v5 <= 0x3F)
    {
      v6[1] = *(_QWORD *)(result - 8) + 64;
      v6[2] = &unk_10021BE40;
      v6[3] = v4;
      v6[4] = &unk_10021BE40;
      v6[5] = &unk_10021BE58;
      swift_initStructMetadata(a1, 256, 6, v6, a1 + 16);
      return 0;
    }
  }
  return result;
}

unint64_t sub_1000C7000()
{
  unint64_t result;

  result = qword_1002905F8;
  if (!qword_1002905F8)
  {
    result = swift_getWitnessTable(&unk_10021BF00, &type metadata for InheritanceHealthRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1002905F8);
  }
  return result;
}

unint64_t sub_1000C7048()
{
  unint64_t result;

  result = qword_100290600;
  if (!qword_100290600)
  {
    result = swift_getWitnessTable(&unk_10021BE70, &type metadata for InheritanceHealthRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100290600);
  }
  return result;
}

unint64_t sub_1000C7090()
{
  unint64_t result;

  result = qword_100290608;
  if (!qword_100290608)
  {
    result = swift_getWitnessTable(&unk_10021BE98, &type metadata for InheritanceHealthRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100290608);
  }
  return result;
}

uint64_t sub_1000C70D4(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char v11;

  if (a1 == 0x444964726F636572 && a2 == 0xE800000000000000)
  {
    v5 = 0xE800000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x444964726F636572, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x69636966656E6562 && a2 == 0xED00004449797261)
  {
    v7 = 0xED00004449797261;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x69636966656E6562, 0xED00004449797261, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0xD000000000000017)
  {
    v8 = 0x800000010020C0E0;
    if (a2 == 0x800000010020C0E0)
      goto LABEL_19;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000017, 0x800000010020C0E0, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
LABEL_19:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if (a1 == 0xD000000000000010)
  {
    v9 = 0x8000000100209650;
    if (a2 == 0x8000000100209650)
      goto LABEL_24;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x8000000100209650, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
LABEL_24:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if (a1 == 0x654B737365636361 && a2 == 0xED00006873614879)
  {
    v10 = 0xED00006873614879;
LABEL_30:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x654B737365636361, 0xED00006873614879, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_30;
  }
  if (a1 == 0xD000000000000013 && a2 == 0x8000000100209670)
  {
    swift_bridgeObjectRelease(0x8000000100209670);
    return 5;
  }
  else
  {
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, 0x8000000100209670, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v11 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

uint64_t sub_1000C7380(uint64_t *a1, uint64_t a2, uint64_t a3, double (*a4)(void))
{
  double v5;
  uint64_t v6;
  uint64_t result;
  double v8;
  uint64_t v9;

  v5 = a4();
  v6 = *a1 + 8;
  v8 = v5;
  result = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v8, &v9);
  *a1 = v6;
  return result;
}

double sub_1000C73D0()
{
  void *v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v0 = (void *)objc_opt_self(AAPreferences);
  if (objc_msgSend(v0, "isCustomHealthCheckIntervalEnabled"))
  {
    v1 = objc_msgSend(v0, "customHealthCheckIntervalMinutes");
    if ((uint64_t)v1 <= 0)
      v2 = 10;
    else
      v2 = (uint64_t)v1;
    v22 = v2;
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v3 = type metadata accessor for Logger(0);
    v4 = sub_100005288(v3, (uint64_t)qword_1002A8A08);
    v5 = Logger.logObject.getter(v4);
    v6 = static os_log_type_t.debug.getter(v5);
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v7 = 134217984;
      v20 = v2;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21);
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Using Health Check interval - Custom %ld mins", v7, 0xCu);
      swift_slowDealloc(v7, -1, -1);
    }

    swift_beginAccess(&v22, &v20, 0, 0);
    return (double)v22 * 60.0;
  }
  else if (objc_msgSend((id)objc_opt_self(AADeviceInfo), "isInternalBuild"))
  {
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v9 = type metadata accessor for Logger(0);
    v10 = sub_100005288(v9, (uint64_t)qword_1002A8A08);
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.debug.getter(v11);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Using Health Check interval - One Day", v13, 2u);
      swift_slowDealloc(v13, -1, -1);
    }

    return 86400.0;
  }
  else
  {
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v15 = type metadata accessor for Logger(0);
    v16 = sub_100005288(v15, (uint64_t)qword_1002A8A08);
    v17 = Logger.logObject.getter(v16);
    v18 = static os_log_type_t.debug.getter(v17);
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Using Health Check interval - One Week", v19, 2u);
      swift_slowDealloc(v19, -1, -1);
    }

    return 604800.0;
  }
}

double sub_1000C76C0()
{
  id v0;
  uint64_t v1;
  double v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  __n128 v6;
  os_log_type_t v7;
  uint8_t *v8;
  double v10;
  uint64_t v11;

  v0 = objc_msgSend((id)objc_opt_self(AAPreferences), "customHealthCheckReachabilityIntervalMinutes");
  if (!v0)
    return 2419200.0;
  v1 = (uint64_t)v0;
  if (qword_10028ADD8 != -1)
    swift_once(&qword_10028ADD8, sub_100046D78);
  v2 = (double)v1;
  v3 = type metadata accessor for Logger(0);
  v4 = sub_100005288(v3, (uint64_t)qword_1002A8A08);
  v5 = Logger.logObject.getter(v4);
  v7 = static os_log_type_t.default.getter(v6);
  if (os_log_type_enabled(v5, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v8 = 134217984;
    v10 = v2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v10, &v11);
    _os_log_impl((void *)&_mh_execute_header, v5, v7, "Using Custom Health Check reachability interval - %f", v8, 0xCu);
    swift_slowDealloc(v8, -1, -1);
  }

  return v2;
}

uint64_t type metadata accessor for DaemonDestinationBuilder()
{
  return objc_opt_self(_TtC13appleaccountd24DaemonDestinationBuilder);
}

uint64_t sub_1000C781C(_QWORD *a1)
{
  char *v1;
  uint64_t v2;
  char *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  char v23;
  char v24;
  char v25;
  char v26;

  v3 = v1;
  v5 = sub_1000080B4(&qword_100290778);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a1[3];
  v11 = a1[4];
  sub_10000732C(a1, v10);
  v12 = sub_1000C8654();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for InheritanceAccessKeyMessage.CodingKeys, &type metadata for InheritanceAccessKeyMessage.CodingKeys, v12, v10, v11);
  v26 = *v3;
  v25 = 0;
  v13 = sub_1000C1CC8();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v26, &v25, v5, &type metadata for InheritanceMessageType, v13);
  if (!v2)
  {
    v14 = type metadata accessor for InheritanceAccessKeyMessage(0);
    v15 = &v3[*(int *)(v14 + 20)];
    v24 = 1;
    v16 = type metadata accessor for UUID(0);
    v17 = sub_100005150((unint64_t *)&unk_10028DC20, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v15, &v24, v5, v16, v17);
    v18 = &v3[*(int *)(v14 + 24)];
    v23 = 2;
    v19 = type metadata accessor for CloudShareInfo(0);
    v20 = sub_100005150(&qword_100290780, type metadata accessor for CloudShareInfo, (uint64_t)&unk_10021E638);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v18, &v23, v5, v19, v20);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

uint64_t sub_1000C79EC@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  _BYTE *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(void);
  uint64_t v26;
  _QWORD *v27;
  _BYTE *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  _QWORD *v38;
  char v39;
  char v40;
  char v41;
  uint64_t v42;

  v31 = a2;
  v34 = type metadata accessor for CloudShareInfo(0);
  __chkstk_darwin(v34, v3);
  v33 = (_BYTE **)((char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v35 = type metadata accessor for UUID(0);
  v32 = *(_QWORD *)(v35 - 8);
  __chkstk_darwin(v35, v5);
  v7 = (_BYTE **)((char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v36 = sub_1000080B4(&qword_100290760);
  v8 = *(_QWORD *)(v36 - 8);
  __chkstk_darwin(v36, v9);
  v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for InheritanceAccessKeyMessage(0);
  __chkstk_darwin(v12, v13);
  v15 = (char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = a1[3];
  v16 = a1[4];
  sub_10000732C(a1, v17);
  v18 = sub_1000C8654();
  v37 = v11;
  v19 = v38;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for InheritanceAccessKeyMessage.CodingKeys, &type metadata for InheritanceAccessKeyMessage.CodingKeys, v18, v17, v16);
  if (v19)
    return sub_100006F58(a1);
  v30 = v12;
  v20 = v15;
  v38 = a1;
  v21 = v35;
  v41 = 0;
  v22 = sub_1000C1C40();
  v23 = v36;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v42, &type metadata for InheritanceMessageType, &v41, v36, &type metadata for InheritanceMessageType, v22);
  *v20 = v42;
  v40 = 1;
  v24 = sub_100005150((unint64_t *)&unk_10028BBB0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  KeyedDecodingContainer.decode<A>(_:forKey:)(v7, v21, &v40, v23, v21, v24);
  v25 = *(void (**)(void))(v32 + 32);
  v29 = &v20[*(int *)(v30 + 20)];
  v25();
  v39 = 2;
  v26 = sub_100005150(&qword_100290770, type metadata accessor for CloudShareInfo, (uint64_t)&unk_10021E660);
  v27 = v33;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v33, v34, &v39, v23, v34, v26);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v37, v23);
  sub_1000C8698((uint64_t)v27, (uint64_t)&v20[*(int *)(v30 + 24)]);
  sub_1000C86DC((uint64_t)v20, v31);
  sub_100006F58(v38);
  return sub_1000C8720((uint64_t)v20);
}

uint64_t sub_1000C7D18()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x69636966656E6562;
  if (*v0 != 1)
    v1 = 0x666E496572616873;
  if (*v0)
    return v1;
  else
    return 1701869940;
}

uint64_t sub_1000C7D7C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1000C8900(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000C7DA0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000C8654();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000C7DC8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000C8654();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000C7DF0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000C79EC(a1, a2);
}

uint64_t sub_1000C7E04(_QWORD *a1)
{
  return sub_1000C781C(a1);
}

uint64_t sub_1000C7E18()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  Swift::String v4;
  uint64_t v5;
  uint64_t v6;
  Swift::String v7;
  void *object;
  uint64_t v10;
  unint64_t v11;

  v11 = 0xE000000000000000;
  _StringGuts.grow(_:)(23);
  v10 = type metadata accessor for InheritanceAccessKeyMessage(0);
  v0 = sub_1000080B4(&qword_1002906B0);
  v1 = String.init<A>(describing:)(&v10, v0);
  v3 = v2;
  swift_bridgeObjectRelease(0xE000000000000000);
  v10 = v1;
  v11 = v3;
  v4._object = (void *)0x800000010020BE00;
  v4._countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v4);
  v5 = type metadata accessor for UUID(0);
  v6 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v7._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v5, v6);
  object = v7._object;
  String.append(_:)(v7);
  swift_bridgeObjectRelease(object);
  return v10;
}

uint64_t type metadata accessor for InheritanceAccessKeyMessage(uint64_t a1)
{
  uint64_t result;

  result = qword_100290710;
  if (!qword_100290710)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for InheritanceAccessKeyMessage);
  return result;
}

uint64_t *sub_1000C7F54(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  _BYTE *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  id v23;
  uint64_t v24;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v24 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v24 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v24);
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v7 = *(int *)(a3 + 20);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for UUID(0);
    (*(void (**)(_BYTE *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
    v11 = *(int *)(a3 + 24);
    v12 = (char *)v4 + v11;
    v13 = (char *)a2 + v11;
    v14 = type metadata accessor for URL(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
    v15 = type metadata accessor for CloudShareInfo(0);
    v16 = *(int *)(v15 + 20);
    v17 = &v12[v16];
    v18 = &v13[v16];
    v20 = *(_QWORD *)v18;
    v19 = *((_QWORD *)v18 + 1);
    *(_QWORD *)v17 = v20;
    *((_QWORD *)v17 + 1) = v19;
    v21 = *(int *)(v15 + 24);
    v22 = *(void **)&v13[v21];
    *(_QWORD *)&v12[v21] = v22;
    swift_bridgeObjectRetain(v19);
    v23 = v22;
  }
  return v4;
}

void sub_1000C804C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = a1 + *(int *)(a2 + 24);
  v7 = type metadata accessor for URL(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  v8 = type metadata accessor for CloudShareInfo(0);
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + *(int *)(v8 + 20) + 8));

}

_BYTE *sub_1000C80E0(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  id v22;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for UUID(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
  v10 = *(int *)(a3 + 24);
  v11 = &a1[v10];
  v12 = &a2[v10];
  v13 = type metadata accessor for URL(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v11, v12, v13);
  v14 = type metadata accessor for CloudShareInfo(0);
  v15 = *(int *)(v14 + 20);
  v16 = &v11[v15];
  v17 = (uint64_t *)&v12[v15];
  v19 = *v17;
  v18 = v17[1];
  *v16 = v19;
  v16[1] = v18;
  v20 = *(int *)(v14 + 24);
  v21 = *(void **)&v12[v20];
  *(_QWORD *)&v11[v20] = v21;
  swift_bridgeObjectRetain(v18);
  v22 = v21;
  return a1;
}

_BYTE *sub_1000C81AC(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  id v23;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for UUID(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  v10 = *(int *)(a3 + 24);
  v11 = &a1[v10];
  v12 = &a2[v10];
  v13 = type metadata accessor for URL(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v13 - 8) + 24))(v11, v12, v13);
  v14 = type metadata accessor for CloudShareInfo(0);
  v15 = *(int *)(v14 + 20);
  v16 = &v11[v15];
  v17 = &v12[v15];
  *v16 = *v17;
  v18 = v17[1];
  v19 = v16[1];
  v16[1] = v18;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease(v19);
  v20 = *(int *)(v14 + 24);
  v21 = *(void **)&v11[v20];
  v22 = *(void **)&v12[v20];
  *(_QWORD *)&v11[v20] = v22;
  v23 = v22;

  return a1;
}

_BYTE *sub_1000C8294(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for UUID(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = *(int *)(a3 + 24);
  v11 = &a1[v10];
  v12 = &a2[v10];
  v13 = type metadata accessor for URL(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v11, v12, v13);
  v14 = type metadata accessor for CloudShareInfo(0);
  *(_OWORD *)&v11[*(int *)(v14 + 20)] = *(_OWORD *)&v12[*(int *)(v14 + 20)];
  *(_QWORD *)&v11[*(int *)(v14 + 24)] = *(_QWORD *)&v12[*(int *)(v14 + 24)];
  return a1;
}

_BYTE *sub_1000C834C(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for UUID(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  v10 = *(int *)(a3 + 24);
  v11 = &a1[v10];
  v12 = &a2[v10];
  v13 = type metadata accessor for URL(0);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(_QWORD *)(v13 - 8) + 40))(v11, v12, v13);
  v14 = type metadata accessor for CloudShareInfo(0);
  v15 = *(int *)(v14 + 20);
  v16 = &v11[v15];
  v17 = (uint64_t *)&v12[v15];
  v19 = *v17;
  v18 = v17[1];
  v20 = v16[1];
  *v16 = v19;
  v16[1] = v18;
  swift_bridgeObjectRelease(v20);
  v21 = *(int *)(v14 + 24);
  v22 = *(void **)&v11[v21];
  *(_QWORD *)&v11[v21] = *(_QWORD *)&v12[v21];

  return a1;
}

uint64_t sub_1000C8420(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000C842C);
}

uint64_t sub_1000C842C(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 251)
  {
    v4 = *a1;
    if (v4 >= 5)
      return v4 - 4;
    else
      return 0;
  }
  else
  {
    v8 = type metadata accessor for UUID(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 20);
    }
    else
    {
      v10 = type metadata accessor for CloudShareInfo(0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 24);
    }
    return (*(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(v9 + 48))(&a1[v11], a2, v10);
  }
}

uint64_t sub_1000C84C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000C84D0);
}

_BYTE *sub_1000C84D0(_BYTE *result, uint64_t a2, int a3, uint64_t a4)
{
  _BYTE *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 251)
  {
    *result = a2 + 4;
  }
  else
  {
    v8 = type metadata accessor for UUID(0);
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 20);
    }
    else
    {
      v10 = type metadata accessor for CloudShareInfo(0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 24);
    }
    return (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v9 + 56))(&v5[v11], a2, a2, v10);
  }
  return result;
}

uint64_t sub_1000C8568(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[3];

  v5[0] = &unk_10021C050;
  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v5[1] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for CloudShareInfo(319);
    if (v4 <= 0x3F)
    {
      v5[2] = *(_QWORD *)(result - 8) + 64;
      swift_initStructMetadata(a1, 256, 3, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

uint64_t sub_1000C85F8(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_100005150(&qword_100290750, type metadata accessor for InheritanceAccessKeyMessage, (uint64_t)&unk_10021C0AC);
  result = sub_100005150(&qword_100290758, type metadata accessor for InheritanceAccessKeyMessage, (uint64_t)&unk_10021C084);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1000C8654()
{
  unint64_t result;

  result = qword_100290768;
  if (!qword_100290768)
  {
    result = swift_getWitnessTable(&unk_10021C198, &type metadata for InheritanceAccessKeyMessage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100290768);
  }
  return result;
}

uint64_t sub_1000C8698(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CloudShareInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000C86DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for InheritanceAccessKeyMessage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000C8720(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for InheritanceAccessKeyMessage(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t storeEnumTagSinglePayload for InheritanceAccessKeyMessage.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1000C87A8 + 4 * byte_10021BFE5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1000C87DC + 4 * byte_10021BFE0[v4]))();
}

uint64_t sub_1000C87DC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000C87E4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000C87ECLL);
  return result;
}

uint64_t sub_1000C87F8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000C8800);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1000C8804(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000C880C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for InheritanceAccessKeyMessage.CodingKeys()
{
  return &type metadata for InheritanceAccessKeyMessage.CodingKeys;
}

unint64_t sub_1000C882C()
{
  unint64_t result;

  result = qword_100290788;
  if (!qword_100290788)
  {
    result = swift_getWitnessTable(&unk_10021C170, &type metadata for InheritanceAccessKeyMessage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100290788);
  }
  return result;
}

unint64_t sub_1000C8874()
{
  unint64_t result;

  result = qword_100290790;
  if (!qword_100290790)
  {
    result = swift_getWitnessTable(&unk_10021C0E0, &type metadata for InheritanceAccessKeyMessage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100290790);
  }
  return result;
}

unint64_t sub_1000C88BC()
{
  unint64_t result;

  result = qword_100290798;
  if (!qword_100290798)
  {
    result = swift_getWitnessTable(&unk_10021C108, &type metadata for InheritanceAccessKeyMessage.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100290798);
  }
  return result;
}

uint64_t sub_1000C8900(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  char v8;

  if (a1 == 1701869940 && a2 == 0xE400000000000000)
  {
    v5 = 0xE400000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1701869940, 0xE400000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x69636966656E6562 && a2 == 0xED00004449797261)
  {
    v7 = 0xED00004449797261;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x69636966656E6562, 0xED00004449797261, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x666E496572616873 && a2 == 0xE90000000000006FLL)
  {
    swift_bridgeObjectRelease(0xE90000000000006FLL);
    return 2;
  }
  else
  {
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x666E496572616873, 0xE90000000000006FLL, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

_QWORD *sub_1000C8A74()
{
  uint64_t v0;
  _QWORD *result;

  v0 = type metadata accessor for LocalCache();
  swift_allocObject(v0, 48, 7);
  result = sub_100136C68();
  qword_1002A8B00 = (uint64_t)result;
  return result;
}

uint64_t sub_1000C8AB0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  v0 = type metadata accessor for CloudKitStore();
  v1 = swift_allocObject(v0, 32, 7);
  *(_QWORD *)(v1 + 24) = 0;
  result = swift_unknownObjectWeakInit(v1 + 16, 0);
  qword_1002A8B08 = v1;
  return result;
}

uint64_t sub_1000C8AF8@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD v22[3];
  uint64_t v23;
  _UNKNOWN **v24;
  _QWORD v25[5];

  v21 = a1;
  if (qword_10028AE58 != -1)
    swift_once(&qword_10028AE58, sub_1000C8A74);
  v1 = qword_1002A8B00;
  v2 = qword_10028AE60;
  swift_retain(qword_1002A8B00);
  if (v2 != -1)
    swift_once(&qword_10028AE60, sub_1000C8AB0);
  v3 = qword_1002A8B08;
  v4 = type metadata accessor for LocalCache();
  v25[3] = v4;
  v25[4] = &off_1002695D8;
  v25[0] = v1;
  v5 = type metadata accessor for CloudKitStore();
  v23 = v5;
  v24 = &off_10026DCC8;
  v22[0] = v3;
  v6 = type metadata accessor for StorageController();
  v7 = (_QWORD *)swift_allocObject(v6, 96, 7);
  v8 = sub_1000067AC((uint64_t)v25, v4);
  v20 = (uint64_t)&v20;
  __chkstk_darwin(v8, v8);
  v10 = (uint64_t *)((char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v11 + 16))(v10);
  v12 = sub_1000067AC((uint64_t)v22, v23);
  __chkstk_darwin(v12, v12);
  v14 = (uint64_t *)((char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v15 + 16))(v14);
  v16 = *v10;
  v17 = *v14;
  v7[5] = v4;
  v7[6] = &off_1002695D8;
  v7[2] = v16;
  v7[10] = v5;
  v7[11] = &off_10026DCC8;
  v7[7] = v17;
  swift_retain_n(v3, 2);
  swift_retain(v1);
  sub_100006F58(v22);
  sub_100006F58(v25);
  swift_release(v1);
  result = swift_release(v3);
  v19 = v21;
  v21[3] = v6;
  v19[4] = &off_100266E08;
  *v19 = v7;
  return result;
}

uint64_t type metadata accessor for DaemonStorageFactory()
{
  return objc_opt_self(_TtC13appleaccountd20DaemonStorageFactory);
}

uint64_t sub_1000C8D40(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  _QWORD *v20;
  void (*v21)(char *, uint64_t);
  uint64_t v22;
  uint64_t v24;

  v3 = v2;
  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  v9 = __chkstk_darwin(v6, v8);
  v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9, v12);
  v14 = (char *)&v24 - v13;
  if (qword_10028ADD0 != -1)
    swift_once(&qword_10028ADD0, sub_100046D50);
  v15 = type metadata accessor for Logger(0);
  v16 = sub_100005288(v15, (uint64_t)qword_1002A89F0);
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v17, v18))
  {
    v19 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v19 = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Fetching stored InheritanceInvitationRecords...", v19, 2u);
    swift_slowDealloc(v19, -1, -1);
  }

  v20 = sub_10000732C((_QWORD *)(v3 + OBJC_IVAR____TtC13appleaccountd28InheritanceStorageController_storageController), *(_QWORD *)(v3 + OBJC_IVAR____TtC13appleaccountd28InheritanceStorageController_storageController + 24));
  type metadata accessor for LocalCache();
  sub_10000840C();
  URL.appendingPathComponent(_:isDirectory:)(0xD00000000000001BLL, 0x800000010020A4B0, 1);
  v21 = *(void (**)(char *, uint64_t))(v7 + 8);
  v21(v11, v6);
  v22 = swift_allocObject(&unk_100266538, 32, 7);
  *(_QWORD *)(v22 + 16) = a1;
  *(_QWORD *)(v22 + 24) = a2;
  sub_10000732C((_QWORD *)(*v20 + 16), *(_QWORD *)(*v20 + 40));
  swift_retain(a2);
  sub_10009D3AC((uint64_t)v14, (uint64_t)sub_1000D1E34, v22);
  swift_release(v22);
  return ((uint64_t (*)(char *, uint64_t))v21)(v14, v6);
}

uint64_t sub_1000C8F4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000CC94C(a1, a2, a3, "Fetching stored InheritanceInvitationRecord with beneficiaryID: %s...", (uint64_t)&unk_100266510, (uint64_t)sub_1000D1DD0, (void (*)(_QWORD, _QWORD))sub_1000C8D40);
}

uint64_t sub_1000C8F70(uint64_t a1, char a2, uint64_t a3, void (*a4)(_QWORD), uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t *v58;
  uint64_t *v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  void (*v63)(uint64_t *);
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  NSObject *v68;
  __n128 v69;
  os_log_type_t v70;
  uint8_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  NSObject *v83;
  os_log_type_t v84;
  uint8_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t *v97;
  char *v99;
  uint64_t v100;
  char *v101;
  char *v102;
  void (*v103)(_QWORD);
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;

  v106 = a5;
  v105 = sub_1000080B4((uint64_t *)&unk_10028FA70);
  __chkstk_darwin(v105, v9);
  v107 = (uint64_t *)((char *)&v99 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v104 = type metadata accessor for UUID(0);
  v108 = *(_QWORD *)(v104 - 8);
  v12 = __chkstk_darwin(v104, v11);
  v14 = (char *)&v99 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v12, v15);
  v102 = (char *)&v99 - v17;
  __chkstk_darwin(v16, v18);
  v101 = (char *)&v99 - v19;
  v20 = type metadata accessor for InheritanceInvitationRecord(0);
  v21 = *(_QWORD *)(v20 - 8);
  v23 = __chkstk_darwin(v20, v22);
  v25 = (char *)&v99 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23, v26);
  v28 = (char *)&v99 - v27;
  v29 = sub_1000080B4(&qword_10028D658);
  v31 = __chkstk_darwin(v29, v30);
  v33 = (char *)&v99 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v31, v34);
  if ((a2 & 1) != 0)
  {
    swift_errorRetain(a1);
    if (qword_10028ADD0 != -1)
      swift_once(&qword_10028ADD0, sub_100046D50);
    v41 = type metadata accessor for Logger(0);
    sub_100005288(v41, (uint64_t)qword_1002A89F0);
    v42 = v108;
    v43 = v104;
    (*(void (**)(char *, uint64_t, uint64_t))(v108 + 16))(v14, a3, v104);
    sub_1000057BC(a1, 1);
    v44 = swift_errorRetain(a1);
    v45 = Logger.logObject.getter(v44);
    v46 = static os_log_type_t.error.getter(v45);
    if (os_log_type_enabled(v45, v46))
    {
      v47 = swift_slowAlloc(22, -1);
      v103 = a4;
      v48 = v47;
      v49 = swift_slowAlloc(64, -1);
      v110 = v49;
      *(_DWORD *)v48 = 136315394;
      v50 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v51 = dispatch thunk of CustomStringConvertible.description.getter(v43, v50);
      v53 = v52;
      v109 = sub_1001DEF4C(v51, v52, &v110);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v109, &v110);
      swift_bridgeObjectRelease(v53);
      a4 = v103;
      (*(void (**)(char *, uint64_t))(v42 + 8))(v14, v43);
      *(_WORD *)(v48 + 12) = 2080;
      v109 = a1;
      swift_errorRetain(a1);
      v54 = sub_1000080B4(&qword_10028E850);
      v55 = String.init<A>(describing:)(&v109, v54);
      v57 = v56;
      v109 = sub_1001DEF4C(v55, v56, &v110);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v109, &v110);
      swift_bridgeObjectRelease(v57);
      sub_1000057B0(a1, 1);
      sub_1000057B0(a1, 1);
      _os_log_impl((void *)&_mh_execute_header, v45, v46, "Error fetching InheritanceInvitationRecord with\nbeneficiaryID: %s. Error: %s", (uint8_t *)v48, 0x16u);
      swift_arrayDestroy(v49, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v49, -1, -1);
      swift_slowDealloc(v48, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v42 + 8))(v14, v43);
      sub_1000057B0(a1, 1);
      sub_1000057B0(a1, 1);
    }

    v58 = v107;
    *v107 = a1;
    swift_storeEnumTagMultiPayload(v58, v105, 1);
    swift_errorRetain(a1);
    a4(v58);
    sub_1000057B0(a1, 1);
    v59 = (uint64_t *)&unk_10028FA70;
    v60 = (uint64_t)v58;
  }
  else
  {
    v99 = v28;
    v100 = (uint64_t)&v99 - v35;
    v103 = a4;
    v36 = *(_QWORD *)(a1 + 16);
    if (v36)
    {
      v37 = a1 + ((*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80));
      v38 = *(_QWORD *)(v21 + 72);
      swift_bridgeObjectRetain(a1);
      while (1)
      {
        sub_100027FE8(v37, (uint64_t)v25, type metadata accessor for InheritanceInvitationRecord);
        if ((static UUID.== infix(_:_:)(v25) & 1) != 0)
          break;
        sub_100028388((uint64_t)v25, type metadata accessor for InheritanceInvitationRecord);
        v37 += v38;
        if (!--v36)
        {
          sub_1000057B0(a1, 0);
          v39 = 1;
          v28 = v99;
          v40 = v100;
          goto LABEL_15;
        }
      }
      sub_1000057B0(a1, 0);
      v40 = v100;
      sub_10003B730((uint64_t)v25, v100, type metadata accessor for InheritanceInvitationRecord);
      v39 = 0;
      v28 = v99;
    }
    else
    {
      v39 = 1;
      v40 = v100;
    }
LABEL_15:
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v21 + 56))(v40, v39, 1, v20);
    sub_100024A20(v40, (uint64_t)v33, &qword_10028D658);
    v61 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v21 + 48))(v33, 1, v20);
    v63 = (void (*)(uint64_t *))v103;
    v62 = v104;
    if (v61 == 1)
    {
      sub_100004934((uint64_t)v33, &qword_10028D658);
      v64 = v108;
      if (qword_10028ADD0 != -1)
        swift_once(&qword_10028ADD0, sub_100046D50);
      v65 = type metadata accessor for Logger(0);
      sub_100005288(v65, (uint64_t)qword_1002A89F0);
      v66 = v101;
      v67 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v64 + 16))(v101, a3, v62);
      v68 = Logger.logObject.getter(v67);
      v70 = static os_log_type_t.default.getter(v69);
      if (os_log_type_enabled(v68, v70))
      {
        v71 = (uint8_t *)swift_slowAlloc(12, -1);
        v72 = v62;
        v73 = swift_slowAlloc(32, -1);
        v110 = v73;
        *(_DWORD *)v71 = 136315138;
        v74 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v75 = dispatch thunk of CustomStringConvertible.description.getter(v72, v74);
        v77 = v76;
        v109 = sub_1001DEF4C(v75, v76, &v110);
        v63 = (void (*)(uint64_t *))v103;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v109, &v110);
        swift_bridgeObjectRelease(v77);
        v78 = v72;
        v40 = v100;
        (*(void (**)(char *, uint64_t))(v64 + 8))(v66, v78);
        _os_log_impl((void *)&_mh_execute_header, v68, v70, "No InheritanceInvitationRecord found with beneficiaryID: %s", v71, 0xCu);
        swift_arrayDestroy(v73, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v73, -1, -1);
        swift_slowDealloc(v71, -1, -1);
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v64 + 8))(v66, v62);
      }

      type metadata accessor for InheritanceError(0);
      v92 = v91;
      v109 = 3;
      v93 = sub_100005014((uint64_t)&_swiftEmptyArrayStorage);
      v94 = sub_100005150(&qword_10028B350, (uint64_t (*)(uint64_t))type metadata accessor for InheritanceError, (uint64_t)&unk_100216D64);
      _BridgedStoredNSError.init(_:userInfo:)(&v110, &v109, v93, v92, v94);
      v95 = v107;
      *v107 = v110;
      swift_storeEnumTagMultiPayload(v95, v105, 1);
      v63(v95);
      sub_100004934((uint64_t)v95, (uint64_t *)&unk_10028FA70);
    }
    else
    {
      sub_10003B730((uint64_t)v33, (uint64_t)v28, type metadata accessor for InheritanceInvitationRecord);
      v79 = v108;
      if (qword_10028ADD0 != -1)
        swift_once(&qword_10028ADD0, sub_100046D50);
      v80 = type metadata accessor for Logger(0);
      sub_100005288(v80, (uint64_t)qword_1002A89F0);
      v81 = v102;
      v82 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v79 + 16))(v102, a3, v62);
      v83 = Logger.logObject.getter(v82);
      v84 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v83, v84))
      {
        v85 = (uint8_t *)swift_slowAlloc(12, -1);
        v86 = swift_slowAlloc(32, -1);
        v110 = v86;
        *(_DWORD *)v85 = 136315138;
        v87 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v88 = dispatch thunk of CustomStringConvertible.description.getter(v62, v87);
        v90 = v89;
        v109 = sub_1001DEF4C(v88, v89, &v110);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v109, &v110);
        swift_bridgeObjectRelease(v90);
        v63 = (void (*)(uint64_t *))v103;
        (*(void (**)(char *, uint64_t))(v108 + 8))(v81, v62);
        _os_log_impl((void *)&_mh_execute_header, v83, v84, "Found InheritanceInvitationRecord with beneficiaryID: %s", v85, 0xCu);
        swift_arrayDestroy(v86, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v86, -1, -1);
        swift_slowDealloc(v85, -1, -1);
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v79 + 8))(v81, v62);
      }

      v96 = (uint64_t)v99;
      v97 = v107;
      sub_100027FE8((uint64_t)v99, (uint64_t)v107, type metadata accessor for InheritanceInvitationRecord);
      swift_storeEnumTagMultiPayload(v97, v105, 0);
      v63(v97);
      sub_100004934((uint64_t)v97, (uint64_t *)&unk_10028FA70);
      sub_100028388(v96, type metadata accessor for InheritanceInvitationRecord);
    }
    v59 = &qword_10028D658;
    v60 = v40;
  }
  return sub_100004934(v60, v59);
}

uint64_t sub_1000C993C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v4 = v3;
  v8 = type metadata accessor for InheritanceInvitationRecord(0);
  __chkstk_darwin(v8, v9);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10028ADD0 != -1)
    swift_once(&qword_10028ADD0, sub_100046D50);
  v12 = type metadata accessor for Logger(0);
  sub_100005288(v12, (uint64_t)qword_1002A89F0);
  v13 = sub_100027FE8(a1, (uint64_t)v11, type metadata accessor for InheritanceInvitationRecord);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v14, v15))
  {
    v27 = v3;
    v16 = (uint8_t *)swift_slowAlloc(12, -1);
    v17 = swift_slowAlloc(32, -1);
    v31 = v17;
    v28 = a2;
    v29 = a3;
    *(_DWORD *)v16 = 136315138;
    v18 = type metadata accessor for UUID(0);
    v19 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v20 = dispatch thunk of CustomStringConvertible.description.getter(v18, v19);
    v22 = v21;
    v30 = sub_1001DEF4C(v20, v21, &v31);
    a2 = v28;
    a3 = v29;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31);
    v23 = v22;
    v4 = v27;
    swift_bridgeObjectRelease(v23);
    sub_100028388((uint64_t)v11, type metadata accessor for InheritanceInvitationRecord);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Saving InheritanceInvitationRecord with beneficiaryID - %s...", v16, 0xCu);
    swift_arrayDestroy(v17, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v17, -1, -1);
    swift_slowDealloc(v16, -1, -1);
  }
  else
  {
    sub_100028388((uint64_t)v11, type metadata accessor for InheritanceInvitationRecord);
  }

  sub_10000732C((_QWORD *)(v4 + OBJC_IVAR____TtC13appleaccountd28InheritanceStorageController_storageController), *(_QWORD *)(v4 + OBJC_IVAR____TtC13appleaccountd28InheritanceStorageController_storageController + 24));
  v24 = swift_allocObject(&unk_1002664E8, 32, 7);
  *(_QWORD *)(v24 + 16) = a2;
  *(_QWORD *)(v24 + 24) = a3;
  swift_retain(a3);
  sub_1001E58D4(a1, (uint64_t)sub_1000D1D1C, v24);
  return swift_release(v24);
}

uint64_t sub_1000C9BD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint8_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t (**v37)(uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v4 = v3;
  v43 = a2;
  v44 = a3;
  v6 = type metadata accessor for InheritanceInvitationRecord(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v10 = __chkstk_darwin(v6, v9);
  v42 = (uint64_t)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10, v11);
  v13 = (char *)&v39 - v12;
  if (qword_10028ADD0 != -1)
    swift_once(&qword_10028ADD0, sub_100046D50);
  v14 = type metadata accessor for Logger(0);
  sub_100005288(v14, (uint64_t)qword_1002A89F0);
  v15 = sub_100027FE8(a1, (uint64_t)v13, type metadata accessor for InheritanceInvitationRecord);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v16, v17))
  {
    v39 = v3;
    v18 = swift_slowAlloc(12, -1);
    v40 = v7;
    v19 = (uint8_t *)v18;
    v20 = swift_slowAlloc(32, -1);
    v46 = v20;
    v41 = a1;
    *(_DWORD *)v19 = 136315138;
    v21 = type metadata accessor for UUID(0);
    v22 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v23 = dispatch thunk of CustomStringConvertible.description.getter(v21, v22);
    v25 = v24;
    v45 = sub_1001DEF4C(v23, v24, &v46);
    v4 = v39;
    a1 = v41;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, &v46);
    swift_bridgeObjectRelease(v25);
    sub_100028388((uint64_t)v13, type metadata accessor for InheritanceInvitationRecord);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Deleting InheritanceInvitationRecord with beneficiaryID - %s...", v19, 0xCu);
    swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v20, -1, -1);
    v26 = v19;
    v7 = v40;
    swift_slowDealloc(v26, -1, -1);
  }
  else
  {
    sub_100028388((uint64_t)v13, type metadata accessor for InheritanceInvitationRecord);
  }

  v27 = sub_10000732C((_QWORD *)(v4 + OBJC_IVAR____TtC13appleaccountd28InheritanceStorageController_storageController), *(_QWORD *)(v4 + OBJC_IVAR____TtC13appleaccountd28InheritanceStorageController_storageController + 24));
  v28 = swift_allocObject(&unk_100266498, 32, 7);
  v30 = v43;
  v29 = v44;
  *(_QWORD *)(v28 + 16) = v43;
  *(_QWORD *)(v28 + 24) = v29;
  v31 = *v27;
  v32 = v42;
  sub_100027FE8(a1, v42, type metadata accessor for InheritanceInvitationRecord);
  v33 = *(unsigned __int8 *)(v7 + 80);
  v34 = (v33 + 24) & ~v33;
  v35 = (v8 + v34 + 7) & 0xFFFFFFFFFFFFFFF8;
  v36 = swift_allocObject(&unk_1002664C0, v35 + 16, v33 | 7);
  *(_QWORD *)(v36 + 16) = v31;
  sub_10003B730(v32, v36 + v34, type metadata accessor for InheritanceInvitationRecord);
  v37 = (uint64_t (**)(uint64_t))(v36 + v35);
  *v37 = sub_1000D1BA0;
  v37[1] = (uint64_t (*)(uint64_t))v28;
  sub_10000E1C0(v30, v29);
  swift_retain(v31);
  swift_retain(v28);
  sub_10017FEEC(a1, (uint64_t)sub_1000D1CA0, v36);
  swift_release(v28);
  return swift_release(v36);
}

uint64_t sub_1000C9F10(uint64_t a1, void (*a2)(_QWORD), uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  uint64_t v36;
  void (*v37)(_QWORD);
  uint64_t v38;
  uint64_t v39;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1000080B4((uint64_t *)&unk_10028CD50);
  v13 = __chkstk_darwin(v11, v12);
  v15 = (uint64_t *)((char *)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v13, v16);
  v18 = (uint64_t *)((char *)&v36 - v17);
  sub_100024A20(a1, (uint64_t)&v36 - v17, (uint64_t *)&unk_10028CD50);
  if (swift_getEnumCaseMultiPayload(v18, v11) == 1)
  {
    v19 = *v18;
    if (qword_10028ADD0 != -1)
      swift_once(&qword_10028ADD0, sub_100046D50);
    v20 = type metadata accessor for Logger(0);
    sub_100005288(v20, (uint64_t)qword_1002A89F0);
    swift_errorRetain(v19);
    v21 = swift_errorRetain(v19);
    v22 = Logger.logObject.getter(v21);
    v23 = static os_log_type_t.error.getter(v22);
    if (os_log_type_enabled(v22, v23))
    {
      v36 = a3;
      v24 = (uint8_t *)swift_slowAlloc(12, -1);
      v25 = swift_slowAlloc(32, -1);
      v38 = v19;
      v39 = v25;
      v37 = a2;
      *(_DWORD *)v24 = 136315138;
      swift_errorRetain(v19);
      v26 = sub_1000080B4(&qword_10028E850);
      v27 = String.init<A>(describing:)(&v38, v26);
      v29 = v28;
      v38 = sub_1001DEF4C(v27, v28, &v39);
      a2 = v37;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39);
      swift_bridgeObjectRelease(v29);
      swift_errorRelease(v19);
      swift_errorRelease(v19);
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Error deleting InheritanceInvitationRecord : %s", v24, 0xCu);
      swift_arrayDestroy(v25, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v25, -1, -1);
      swift_slowDealloc(v24, -1, -1);

      if (a2)
      {
LABEL_6:
        *v15 = v19;
        swift_storeEnumTagMultiPayload(v15, v11, 1);
        swift_errorRetain(v19);
        a2(v15);
        swift_errorRelease(v19);
        return sub_100004934((uint64_t)v15, (uint64_t *)&unk_10028CD50);
      }
    }
    else
    {
      swift_errorRelease(v19);
      swift_errorRelease(v19);

      if (a2)
        goto LABEL_6;
    }
    return swift_errorRelease(v19);
  }
  else
  {
    (*(void (**)(char *, uint64_t *, uint64_t))(v7 + 32))(v10, v18, v6);
    if (qword_10028ADD0 != -1)
      swift_once(&qword_10028ADD0, sub_100046D50);
    v31 = type metadata accessor for Logger(0);
    v32 = sub_100005288(v31, (uint64_t)qword_1002A89F0);
    v33 = Logger.logObject.getter(v32);
    v34 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v33, v34))
    {
      v35 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v35 = 0;
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "Successfully deleted InheritanceInvitationRecord.", v35, 2u);
      swift_slowDealloc(v35, -1, -1);
    }

    if (a2)
    {
      (*(void (**)(uint64_t *, char *, uint64_t))(v7 + 16))(v15, v10, v6);
      swift_storeEnumTagMultiPayload(v15, v11, 0);
      a2(v15);
      sub_100004934((uint64_t)v15, (uint64_t *)&unk_10028CD50);
    }
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  }
}

uint64_t sub_1000CA31C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  _QWORD *v20;
  void (*v21)(char *, uint64_t);
  uint64_t v22;
  uint64_t v24;

  v3 = v2;
  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  v9 = __chkstk_darwin(v6, v8);
  v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9, v12);
  v14 = (char *)&v24 - v13;
  if (qword_10028ADD0 != -1)
    swift_once(&qword_10028ADD0, sub_100046D50);
  v15 = type metadata accessor for Logger(0);
  v16 = sub_100005288(v15, (uint64_t)qword_1002A89F0);
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v17, v18))
  {
    v19 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v19 = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Fetching stored BeneficiaryInfoRecords...", v19, 2u);
    swift_slowDealloc(v19, -1, -1);
  }

  v20 = sub_10000732C((_QWORD *)(v3 + OBJC_IVAR____TtC13appleaccountd28InheritanceStorageController_storageController), *(_QWORD *)(v3 + OBJC_IVAR____TtC13appleaccountd28InheritanceStorageController_storageController + 24));
  type metadata accessor for LocalCache();
  sub_10000840C();
  URL.appendingPathComponent(_:isDirectory:)(0xD000000000000020, 0x80000001002094E0, 1);
  v21 = *(void (**)(char *, uint64_t))(v7 + 8);
  v21(v11, v6);
  v22 = swift_allocObject(&unk_100266470, 32, 7);
  *(_QWORD *)(v22 + 16) = a1;
  *(_QWORD *)(v22 + 24) = a2;
  sub_10000732C((_QWORD *)(*v20 + 16), *(_QWORD *)(*v20 + 40));
  swift_retain(a2);
  sub_100008674((uint64_t)v14, (uint64_t)sub_1000D1B48, v22);
  swift_release(v22);
  return ((uint64_t (*)(char *, uint64_t))v21)(v14, v6);
}

uint64_t sub_1000CA528(uint64_t a1, char a2, void (*a3)(_QWORD, _QWORD), uint64_t a4, const char *a5, const char *a6)
{
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  void (*v27)(_QWORD, _QWORD);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  if ((a2 & 1) != 0)
  {
    swift_errorRetain(a1);
    if (qword_10028ADD0 != -1)
      swift_once(&qword_10028ADD0, sub_100046D50);
    v15 = type metadata accessor for Logger(0);
    sub_100005288(v15, (uint64_t)qword_1002A89F0);
    swift_errorRetain(a1);
    v16 = swift_errorRetain(a1);
    v17 = Logger.logObject.getter(v16);
    v18 = static os_log_type_t.error.getter(v17);
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc(12, -1);
      v27 = a3;
      v28 = a1;
      v20 = swift_slowAlloc(32, -1);
      v29 = v20;
      *(_DWORD *)v19 = 136315138;
      swift_errorRetain(a1);
      v21 = sub_1000080B4(&qword_10028E850);
      v22 = String.init<A>(describing:)(&v28, v21);
      v24 = v23;
      v28 = sub_1001DEF4C(v22, v23, &v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29);
      swift_bridgeObjectRelease(v24);
      sub_1000057B0(a1, 1);
      sub_1000057B0(a1, 1);
      _os_log_impl((void *)&_mh_execute_header, v17, v18, a5, v19, 0xCu);
      swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
      v25 = v20;
      a3 = v27;
      swift_slowDealloc(v25, -1, -1);
      swift_slowDealloc(v19, -1, -1);
    }
    else
    {
      sub_1000057B0(a1, 1);
      sub_1000057B0(a1, 1);
    }

    swift_errorRetain(a1);
    a3(a1, 1);
    sub_1000057B0(a1, 1);
    return sub_1000057B0(a1, 1);
  }
  else
  {
    if (qword_10028ADD0 != -1)
      swift_once(&qword_10028ADD0, sub_100046D50);
    v9 = type metadata accessor for Logger(0);
    sub_100005288(v9, (uint64_t)qword_1002A89F0);
    swift_bridgeObjectRetain(a1);
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v13 = 134217984;
      v29 = *(_QWORD *)(a1 + 16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30);
      sub_1000057B0(a1, 0);
      _os_log_impl((void *)&_mh_execute_header, v11, v12, a6, v13, 0xCu);
      swift_slowDealloc(v13, -1, -1);
    }
    else
    {
      sub_1000057B0(a1, 0);
    }

    return ((uint64_t (*)(uint64_t, _QWORD))a3)(a1, 0);
  }
}

uint64_t sub_1000CA860(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000CC94C(a1, a2, a3, "Fetching stored BeneficiaryInfoRecord with beneficiaryID: %s", (uint64_t)&unk_100266420, (uint64_t)sub_1000D1A74, (void (*)(_QWORD, _QWORD))sub_100006A8C);
}

void sub_1000CA884(uint64_t a1, char a2, uint64_t a3, unint64_t a4, void (*a5)(void *), uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  NSObject *v51;
  __n128 v52;
  os_log_type_t v53;
  uint8_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  void *v60;
  void (*v61)(void *);
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  void (*v68)(void *);
  uint64_t v69;
  uint64_t v70;
  void *v71;

  v12 = type metadata accessor for BeneficiaryInfoRecord(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12, v14);
  v16 = (char *)&v66 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_1000080B4(&qword_10028D650);
  __chkstk_darwin(v17, v18);
  v20 = (v19 + 15) & 0xFFFFFFFFFFFFFFF0;
  v21 = (char *)&v66 - v20;
  if ((a2 & 1) != 0)
  {
    swift_errorRetain(a1);
    if (qword_10028ADD0 != -1)
      swift_once(&qword_10028ADD0, sub_100046D50);
    v34 = type metadata accessor for Logger(0);
    sub_100005288(v34, (uint64_t)qword_1002A89F0);
    swift_errorRetain(a1);
    v35 = swift_errorRetain(a1);
    v36 = Logger.logObject.getter(v35);
    v37 = static os_log_type_t.error.getter(v36);
    if (os_log_type_enabled(v36, v37))
    {
      v38 = (uint8_t *)swift_slowAlloc(12, -1);
      v39 = swift_slowAlloc(32, -1);
      v70 = a1;
      v71 = (void *)v39;
      *(_DWORD *)v38 = 136315138;
      swift_errorRetain(a1);
      v40 = sub_1000080B4(&qword_10028E850);
      v41 = String.init<A>(describing:)(&v70, v40);
      v43 = v42;
      v70 = sub_1001DEF4C(v41, v42, (uint64_t *)&v71);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71);
      swift_bridgeObjectRelease(v43);
      sub_1000057B0(a1, 1);
      sub_1000057B0(a1, 1);
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "Error fetching BeneficiaryInfoRecord : %s", v38, 0xCu);
      swift_arrayDestroy(v39, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v39, -1, -1);
      swift_slowDealloc(v38, -1, -1);
    }
    else
    {
      sub_1000057B0(a1, 1);
      sub_1000057B0(a1, 1);
    }

    type metadata accessor for InheritanceError(0);
    v45 = v44;
    v70 = 2107;
    v46 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
    v47 = sub_100005150(&qword_10028B350, (uint64_t (*)(uint64_t))type metadata accessor for InheritanceError, (uint64_t)&unk_100216D64);
    _BridgedStoredNSError.init(_:userInfo:)(&v71, &v70, v46, v45, v47);
    v48 = v71;
    a5(v71);
    sub_1000057B0(a1, 1);

  }
  else
  {
    v69 = a6;
    v22 = *(_QWORD *)(a1 + 16);
    if (v22)
    {
      v67 = (char *)&v66 - v20;
      v68 = a5;
      v23 = a1 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
      v24 = *(_QWORD *)(v13 + 72);
      swift_bridgeObjectRetain(a1);
      while (1)
      {
        sub_100027FE8(v23, (uint64_t)v16, type metadata accessor for BeneficiaryInfoRecord);
        v25 = &v16[*(int *)(v12 + 20)];
        v26 = *((_QWORD *)v25 + 1);
        if (v26)
        {
          v27 = *(_QWORD *)v25 == a3 && v26 == a4;
          if (v27 || (_stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)v25, v26, a3, a4, 0) & 1) != 0)
            break;
        }
        sub_100028388((uint64_t)v16, type metadata accessor for BeneficiaryInfoRecord);
        v23 += v24;
        if (!--v22)
        {
          sub_1000057B0(a1, 0);
          v21 = v67;
          a5 = v68;
          goto LABEL_22;
        }
      }
      sub_1000057B0(a1, 0);
      v21 = v67;
      sub_10003B730((uint64_t)v16, (uint64_t)v67, type metadata accessor for BeneficiaryInfoRecord);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v21, 0, 1, v12);
      if (qword_10028ADD0 != -1)
        swift_once(&qword_10028ADD0, sub_100046D50);
      v28 = type metadata accessor for Logger(0);
      sub_100005288(v28, (uint64_t)qword_1002A89F0);
      v29 = swift_bridgeObjectRetain_n(a4, 2);
      v30 = Logger.logObject.getter(v29);
      v31 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v30, v31))
      {
        v32 = (uint8_t *)swift_slowAlloc(12, -1);
        v33 = swift_slowAlloc(32, -1);
        v71 = (void *)v33;
        *(_DWORD *)v32 = 136315138;
        swift_bridgeObjectRetain(a4);
        v70 = sub_1001DEF4C(a3, a4, (uint64_t *)&v71);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71);
        swift_bridgeObjectRelease_n(a4, 3);
        _os_log_impl((void *)&_mh_execute_header, v30, v31, "Found BeneficiaryInfoRecord with handle: %s", v32, 0xCu);
        swift_arrayDestroy(v33, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v33, -1, -1);
        swift_slowDealloc(v32, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(a4, 2);
      }
      v61 = v68;
      type metadata accessor for InheritanceError(0);
      v63 = v62;
      v70 = 6;
      v64 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
      v65 = sub_100005150(&qword_10028B350, (uint64_t (*)(uint64_t))type metadata accessor for InheritanceError, (uint64_t)&unk_100216D64);
      _BridgedStoredNSError.init(_:userInfo:)(&v71, &v70, v64, v63, v65);
      v60 = v71;
      v61(v71);
    }
    else
    {
LABEL_22:
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v21, 1, 1, v12);
      if (qword_10028ADD0 != -1)
        swift_once(&qword_10028ADD0, sub_100046D50);
      v49 = type metadata accessor for Logger(0);
      sub_100005288(v49, (uint64_t)qword_1002A89F0);
      v50 = swift_bridgeObjectRetain_n(a4, 2);
      v51 = Logger.logObject.getter(v50);
      v53 = static os_log_type_t.default.getter(v52);
      if (os_log_type_enabled(v51, v53))
      {
        v54 = (uint8_t *)swift_slowAlloc(12, -1);
        v55 = swift_slowAlloc(32, -1);
        v71 = (void *)v55;
        *(_DWORD *)v54 = 136315138;
        swift_bridgeObjectRetain(a4);
        v70 = sub_1001DEF4C(a3, a4, (uint64_t *)&v71);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71);
        swift_bridgeObjectRelease_n(a4, 3);
        _os_log_impl((void *)&_mh_execute_header, v51, v53, "No BeneficiaryInfoRecord found with handle: %s", v54, 0xCu);
        swift_arrayDestroy(v55, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v55, -1, -1);
        swift_slowDealloc(v54, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(a4, 2);
      }
      type metadata accessor for InheritanceError(0);
      v57 = v56;
      v70 = 3;
      v58 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
      v59 = sub_100005150(&qword_10028B350, (uint64_t (*)(uint64_t))type metadata accessor for InheritanceError, (uint64_t)&unk_100216D64);
      _BridgedStoredNSError.init(_:userInfo:)(&v71, &v70, v58, v57, v59);
      v60 = v71;
      a5(v71);
    }

    sub_100004934((uint64_t)v21, &qword_10028D650);
  }
}

uint64_t sub_1000CB018(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v4 = v3;
  v8 = type metadata accessor for BeneficiaryInfoRecord(0);
  __chkstk_darwin(v8, v9);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10028ADD0 != -1)
    swift_once(&qword_10028ADD0, sub_100046D50);
  v12 = type metadata accessor for Logger(0);
  sub_100005288(v12, (uint64_t)qword_1002A89F0);
  v13 = sub_100027FE8(a1, (uint64_t)v11, type metadata accessor for BeneficiaryInfoRecord);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v14, v15))
  {
    v27 = v3;
    v16 = (uint8_t *)swift_slowAlloc(12, -1);
    v17 = swift_slowAlloc(32, -1);
    v31 = v17;
    v28 = a2;
    v29 = a3;
    *(_DWORD *)v16 = 136315138;
    v18 = type metadata accessor for UUID(0);
    v19 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v20 = dispatch thunk of CustomStringConvertible.description.getter(v18, v19);
    v22 = v21;
    v30 = sub_1001DEF4C(v20, v21, &v31);
    a2 = v28;
    a3 = v29;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31);
    v23 = v22;
    v4 = v27;
    swift_bridgeObjectRelease(v23);
    sub_100028388((uint64_t)v11, type metadata accessor for BeneficiaryInfoRecord);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Saving BeneficiaryInfoRecord with beneficiaryID - %s...", v16, 0xCu);
    swift_arrayDestroy(v17, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v17, -1, -1);
    swift_slowDealloc(v16, -1, -1);
  }
  else
  {
    sub_100028388((uint64_t)v11, type metadata accessor for BeneficiaryInfoRecord);
  }

  sub_10000732C((_QWORD *)(v4 + OBJC_IVAR____TtC13appleaccountd28InheritanceStorageController_storageController), *(_QWORD *)(v4 + OBJC_IVAR____TtC13appleaccountd28InheritanceStorageController_storageController + 24));
  v24 = swift_allocObject(&unk_1002663F8, 32, 7);
  *(_QWORD *)(v24 + 16) = a2;
  *(_QWORD *)(v24 + 24) = a3;
  swift_retain(a3);
  sub_1001E5BFC(a1, (uint64_t)sub_1000D1A38, v24);
  return swift_release(v24);
}

uint64_t sub_1000CB2AC(uint64_t a1, void (*a2)(uint64_t *), uint64_t a3, uint64_t (*a4)(_QWORD), uint64_t *a5, const char *a6, const char *a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint64_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint8_t *v41;
  uint8_t *v43;
  const char *v44;
  uint64_t v45;
  void (*v46)(uint64_t *);
  uint64_t v47;
  uint64_t v48;

  v46 = a2;
  v13 = a4(0);
  __chkstk_darwin(v13, v14);
  v16 = (char *)&v43 - v15;
  v17 = sub_1000080B4(a5);
  v19 = __chkstk_darwin(v17, v18);
  v21 = (uint64_t *)((char *)&v43 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v19, v22);
  v24 = (uint64_t *)((char *)&v43 - v23);
  sub_100024A20(a1, (uint64_t)&v43 - v23, a5);
  if (swift_getEnumCaseMultiPayload(v24, v17) == 1)
  {
    v25 = *v24;
    if (qword_10028ADD0 != -1)
      swift_once(&qword_10028ADD0, sub_100046D50);
    v26 = type metadata accessor for Logger(0);
    sub_100005288(v26, (uint64_t)qword_1002A89F0);
    swift_errorRetain(v25);
    v27 = swift_errorRetain(v25);
    v28 = Logger.logObject.getter(v27);
    v29 = static os_log_type_t.error.getter(v28);
    if (os_log_type_enabled(v28, v29))
    {
      v44 = a6;
      v30 = swift_slowAlloc(12, -1);
      v45 = a3;
      v31 = (uint8_t *)v30;
      v32 = swift_slowAlloc(32, -1);
      v47 = v25;
      v48 = v32;
      *(_DWORD *)v31 = 136315138;
      v43 = v31 + 4;
      swift_errorRetain(v25);
      v33 = sub_1000080B4(&qword_10028E850);
      v34 = String.init<A>(describing:)(&v47, v33);
      v36 = v35;
      v47 = sub_1001DEF4C(v34, v35, &v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48);
      swift_bridgeObjectRelease(v36);
      swift_errorRelease(v25);
      swift_errorRelease(v25);
      _os_log_impl((void *)&_mh_execute_header, v28, v29, v44, v31, 0xCu);
      swift_arrayDestroy(v32, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v32, -1, -1);
      swift_slowDealloc(v31, -1, -1);
    }
    else
    {
      swift_errorRelease(v25);
      swift_errorRelease(v25);
    }

    *v21 = v25;
    swift_storeEnumTagMultiPayload(v21, v17, 1);
    swift_errorRetain(v25);
    v46(v21);
    swift_errorRelease(v25);
    return sub_100004934((uint64_t)v21, a5);
  }
  else
  {
    sub_10003B730((uint64_t)v24, (uint64_t)v16, a4);
    if (qword_10028ADD0 != -1)
      swift_once(&qword_10028ADD0, sub_100046D50);
    v37 = type metadata accessor for Logger(0);
    v38 = sub_100005288(v37, (uint64_t)qword_1002A89F0);
    v39 = Logger.logObject.getter(v38);
    v40 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v39, v40))
    {
      v41 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v41 = 0;
      _os_log_impl((void *)&_mh_execute_header, v39, v40, a7, v41, 2u);
      swift_slowDealloc(v41, -1, -1);
    }

    objc_msgSend((id)objc_opt_self(AATrustedContactNotificationPublisher), "postInheritanceContactChangedNotification");
    sub_100027FE8((uint64_t)v16, (uint64_t)v21, a4);
    swift_storeEnumTagMultiPayload(v21, v17, 0);
    v46(v21);
    sub_100004934((uint64_t)v21, a5);
    return sub_100028388((uint64_t)v16, a4);
  }
}

uint64_t sub_1000CB6A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint8_t *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t (**v41)(uint64_t);
  uint8_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v4 = v3;
  v8 = type metadata accessor for BeneficiaryInfoRecord(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  v12 = __chkstk_darwin(v8, v11);
  v48 = (uint64_t)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12, v13);
  v15 = (char *)&v43 - v14;
  if (qword_10028ADD0 != -1)
    swift_once(&qword_10028ADD0, sub_100046D50);
  v16 = type metadata accessor for Logger(0);
  sub_100005288(v16, (uint64_t)qword_1002A89F0);
  v17 = sub_100027FE8(a1, (uint64_t)v15, type metadata accessor for BeneficiaryInfoRecord);
  v18 = Logger.logObject.getter(v17);
  v19 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v18, v19))
  {
    v44 = v3;
    v20 = swift_slowAlloc(12, -1);
    v45 = a2;
    v21 = (uint8_t *)v20;
    v22 = swift_slowAlloc(32, -1);
    v47 = a1;
    v23 = v22;
    v50 = v22;
    v46 = a3;
    *(_DWORD *)v21 = 136315138;
    v43 = v21 + 4;
    v24 = v9;
    v25 = type metadata accessor for UUID(0);
    v26 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v27 = v25;
    v9 = v24;
    v4 = v44;
    v28 = dispatch thunk of CustomStringConvertible.description.getter(v27, v26);
    v30 = v29;
    v49 = sub_1001DEF4C(v28, v29, &v50);
    a3 = v46;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50);
    swift_bridgeObjectRelease(v30);
    sub_100028388((uint64_t)v15, type metadata accessor for BeneficiaryInfoRecord);
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Deleting BeneficiaryInfoRecord with beneficiaryID - %s...", v21, 0xCu);
    swift_arrayDestroy(v23, 1, (char *)&type metadata for Any + 8);
    v31 = v23;
    a1 = v47;
    swift_slowDealloc(v31, -1, -1);
    v32 = v21;
    a2 = v45;
    swift_slowDealloc(v32, -1, -1);
  }
  else
  {
    sub_100028388((uint64_t)v15, type metadata accessor for BeneficiaryInfoRecord);
  }

  v33 = sub_10000732C((_QWORD *)(v4 + OBJC_IVAR____TtC13appleaccountd28InheritanceStorageController_storageController), *(_QWORD *)(v4 + OBJC_IVAR____TtC13appleaccountd28InheritanceStorageController_storageController + 24));
  v34 = swift_allocObject(&unk_1002663A8, 32, 7);
  *(_QWORD *)(v34 + 16) = a2;
  *(_QWORD *)(v34 + 24) = a3;
  v35 = *v33;
  v36 = v48;
  sub_100027FE8(a1, v48, type metadata accessor for BeneficiaryInfoRecord);
  v37 = *(unsigned __int8 *)(v9 + 80);
  v38 = (v37 + 24) & ~v37;
  v39 = (v10 + v38 + 7) & 0xFFFFFFFFFFFFFFF8;
  v40 = swift_allocObject(&unk_1002663D0, v39 + 16, v37 | 7);
  *(_QWORD *)(v40 + 16) = v35;
  sub_10003B730(v36, v40 + v38, type metadata accessor for BeneficiaryInfoRecord);
  v41 = (uint64_t (**)(uint64_t))(v40 + v39);
  *v41 = sub_1000D18B0;
  v41[1] = (uint64_t (*)(uint64_t))v34;
  swift_retain(a3);
  swift_retain(v35);
  swift_retain(v34);
  sub_10018014C(a1, (uint64_t)sub_1000D1A24, v40);
  swift_release(v34);
  return swift_release(v40);
}

uint64_t sub_1000CB9F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  os_log_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;

  v74 = a2;
  v5 = sub_1000080B4((uint64_t *)&unk_100294B20);
  __chkstk_darwin(v5, v6);
  v73 = (char *)&v62 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for BenefactorInfoRecord(0);
  v9 = *(_QWORD *)(v8 - 8);
  v70 = v8;
  v71 = v9;
  v10 = *(_QWORD *)(v9 + 64);
  v12 = __chkstk_darwin(v8, v11);
  v72 = (uint64_t)&v62 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v12, v13);
  v16 = (char *)&v62 - v15;
  v18 = __chkstk_darwin(v14, v17);
  v20 = (char *)&v62 - v19;
  v22 = __chkstk_darwin(v18, v21);
  v24 = (char *)&v62 - v23;
  __chkstk_darwin(v22, v25);
  v27 = (char *)&v62 - v26;
  if (qword_10028ADD0 != -1)
    swift_once(&qword_10028ADD0, sub_100046D50);
  v28 = type metadata accessor for Logger(0);
  sub_100005288(v28, (uint64_t)qword_1002A89F0);
  sub_100027FE8(a1, (uint64_t)v27, type metadata accessor for BenefactorInfoRecord);
  sub_100027FE8(a1, (uint64_t)v24, type metadata accessor for BenefactorInfoRecord);
  sub_100027FE8(a1, (uint64_t)v20, type metadata accessor for BenefactorInfoRecord);
  v29 = sub_100027FE8(a1, (uint64_t)v16, type metadata accessor for BenefactorInfoRecord);
  v30 = Logger.logObject.getter(v29);
  v31 = static os_log_type_t.info.getter(v30);
  v32 = v31;
  if (os_log_type_enabled(v30, v31))
  {
    v33 = swift_slowAlloc(42, -1);
    v69 = a3;
    v34 = v33;
    v67 = swift_slowAlloc(96, -1);
    v77 = v67;
    *(_DWORD *)v34 = 136315906;
    v66 = v32;
    v35 = type metadata accessor for UUID(0);
    v64 = v35;
    v63 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v65 = v30;
    v36 = dispatch thunk of CustomStringConvertible.description.getter(v35, v63);
    v38 = v37;
    v76 = sub_1001DEF4C(v36, v37, &v77);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &v77);
    swift_bridgeObjectRelease(v38);
    sub_100028388((uint64_t)v27, type metadata accessor for BenefactorInfoRecord);
    *(_WORD *)(v34 + 12) = 2080;
    v68 = a1;
    v39 = v70;
    v40 = (uint64_t *)&v24[*(int *)(v70 + 20)];
    v41 = *v40;
    v42 = v40[1];
    swift_bridgeObjectRetain(v42);
    v76 = sub_1001DEF4C(v41, v42, &v77);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &v77);
    swift_bridgeObjectRelease(v42);
    sub_100028388((uint64_t)v24, type metadata accessor for BenefactorInfoRecord);
    *(_WORD *)(v34 + 22) = 2080;
    v43 = dispatch thunk of CustomStringConvertible.description.getter(v64, v63);
    v45 = v44;
    v76 = sub_1001DEF4C(v43, v44, &v77);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &v77);
    swift_bridgeObjectRelease(v45);
    sub_100028388((uint64_t)v20, type metadata accessor for BenefactorInfoRecord);
    *(_WORD *)(v34 + 32) = 2048;
    v46 = *(int *)(v39 + 24);
    a1 = v68;
    v47 = *(_QWORD *)&v16[v46];
    sub_100028388((uint64_t)v16, type metadata accessor for BenefactorInfoRecord);
    v76 = v47;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &v77);
    v30 = v65;
    _os_log_impl((void *)&_mh_execute_header, v65, (os_log_type_t)v66, "Fetching stored BenefactorInfoRecord with beneficiaryID: %s\nhandle: %s\nrecordID: %s\nstatus: %ld", (uint8_t *)v34, 0x2Au);
    v48 = v67;
    swift_arrayDestroy(v67, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v48, -1, -1);
    v49 = v34;
    a3 = v69;
    swift_slowDealloc(v49, -1, -1);
  }
  else
  {
    sub_100028388((uint64_t)v16, type metadata accessor for BenefactorInfoRecord);
    sub_100028388((uint64_t)v27, type metadata accessor for BenefactorInfoRecord);
    sub_100028388((uint64_t)v24, type metadata accessor for BenefactorInfoRecord);
    sub_100028388((uint64_t)v20, type metadata accessor for BenefactorInfoRecord);
  }

  v50 = type metadata accessor for TaskPriority(0);
  v51 = (uint64_t)v73;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 56))(v73, 1, 1, v50);
  v52 = a1;
  v53 = v72;
  sub_100027FE8(v52, v72, type metadata accessor for BenefactorInfoRecord);
  v54 = *(unsigned __int8 *)(v71 + 80);
  v55 = (v54 + 40) & ~v54;
  v56 = (v10 + v55 + 7) & 0xFFFFFFFFFFFFFFF8;
  v57 = (_QWORD *)swift_allocObject(&unk_100266308, v56 + 16, v54 | 7);
  v57[2] = 0;
  v57[3] = 0;
  v58 = v75;
  v57[4] = v75;
  sub_10003B730(v53, (uint64_t)v57 + v55, type metadata accessor for BenefactorInfoRecord);
  v59 = (_QWORD *)((char *)v57 + v56);
  *v59 = v74;
  v59[1] = a3;
  swift_retain(v58);
  swift_retain(a3);
  v60 = sub_10001CC6C(v51, (uint64_t)&unk_100290A00, (uint64_t)v57);
  return swift_release(v60);
}

uint64_t sub_1000CBF00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v7[10] = a6;
  v7[11] = a7;
  v7[8] = a4;
  v7[9] = a5;
  v8 = sub_1000080B4((uint64_t *)&unk_10028FA40);
  v7[12] = v8;
  v7[13] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v8 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for BenefactorInfoRecord(0);
  v7[14] = v9;
  v10 = (*(_QWORD *)(*(_QWORD *)(v9 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v7[15] = swift_task_alloc(v10);
  v7[16] = swift_task_alloc(v10);
  v7[17] = swift_task_alloc(v10);
  v7[18] = swift_task_alloc(v10);
  v7[19] = swift_task_alloc(v10);
  return swift_task_switch(sub_1000CBFBC, 0, 0);
}

uint64_t sub_1000CBFBC()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t (*v3)(uint64_t, uint64_t);

  sub_10000732C((_QWORD *)(v0[8] + OBJC_IVAR____TtC13appleaccountd28InheritanceStorageController_storageController), *(_QWORD *)(v0[8] + OBJC_IVAR____TtC13appleaccountd28InheritanceStorageController_storageController + 24));
  v3 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_100290A08 + dword_100290A08);
  v1 = (_QWORD *)swift_task_alloc(unk_100290A0C);
  v0[20] = v1;
  *v1 = v0;
  v1[1] = sub_1000CC03C;
  return v3(v0[19], v0[9]);
}

uint64_t sub_1000CC03C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 160);
  *(_QWORD *)(*(_QWORD *)v1 + 168) = v0;
  swift_task_dealloc(v2);
  if (v0)
    v3 = sub_1000CC4C0;
  else
    v3 = sub_1000CC0A0;
  return swift_task_switch(v3, 0, 0);
}

uint64_t sub_1000CC0A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  os_log_type_t type;
  NSObject *log;
  uint64_t v42;
  uint64_t v43;

  if (qword_10028ADD0 != -1)
    swift_once(&qword_10028ADD0, sub_100046D50);
  v1 = *(_QWORD *)(v0 + 136);
  v2 = *(_QWORD *)(v0 + 144);
  v4 = *(_QWORD *)(v0 + 120);
  v3 = *(_QWORD *)(v0 + 128);
  v5 = *(_QWORD *)(v0 + 72);
  v6 = type metadata accessor for Logger(0);
  sub_100005288(v6, (uint64_t)qword_1002A89F0);
  sub_100027FE8(v5, v2, type metadata accessor for BenefactorInfoRecord);
  sub_100027FE8(v5, v1, type metadata accessor for BenefactorInfoRecord);
  sub_100027FE8(v5, v3, type metadata accessor for BenefactorInfoRecord);
  v7 = sub_100027FE8(v5, v4, type metadata accessor for BenefactorInfoRecord);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.info.getter();
  v10 = os_log_type_enabled(v8, v9);
  v12 = *(_QWORD *)(v0 + 136);
  v11 = *(_QWORD *)(v0 + 144);
  v13 = *(_QWORD *)(v0 + 128);
  if (v10)
  {
    v39 = *(_QWORD *)(v0 + 120);
    v14 = *(_QWORD *)(v0 + 112);
    v38 = *(_QWORD *)(v0 + 128);
    v15 = swift_slowAlloc(42, -1);
    v42 = swift_slowAlloc(96, -1);
    v43 = v42;
    *(_DWORD *)v15 = 136315906;
    v37 = type metadata accessor for UUID(0);
    log = v8;
    v16 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v17 = dispatch thunk of CustomStringConvertible.description.getter(v37, v16);
    type = v9;
    v19 = v18;
    *(_QWORD *)(v0 + 32) = sub_1001DEF4C(v17, v18, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40);
    swift_bridgeObjectRelease(v19);
    sub_100028388(v11, type metadata accessor for BenefactorInfoRecord);
    *(_WORD *)(v15 + 12) = 2080;
    v20 = (uint64_t *)(v12 + *(int *)(v14 + 20));
    v21 = *v20;
    v22 = v20[1];
    swift_bridgeObjectRetain(v22);
    *(_QWORD *)(v0 + 40) = sub_1001DEF4C(v21, v22, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48);
    swift_bridgeObjectRelease(v22);
    sub_100028388(v12, type metadata accessor for BenefactorInfoRecord);
    *(_WORD *)(v15 + 22) = 2080;
    v23 = dispatch thunk of CustomStringConvertible.description.getter(v37, v16);
    v25 = v24;
    *(_QWORD *)(v0 + 48) = sub_1001DEF4C(v23, v24, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56);
    swift_bridgeObjectRelease(v25);
    sub_100028388(v38, type metadata accessor for BenefactorInfoRecord);
    *(_WORD *)(v15 + 32) = 2048;
    v26 = *(_QWORD *)(v39 + *(int *)(v14 + 24));
    sub_100028388(v39, type metadata accessor for BenefactorInfoRecord);
    *(_QWORD *)(v0 + 56) = v26;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64);
    _os_log_impl((void *)&_mh_execute_header, log, type, "Successfully fetched BenefactorInfoRecord with beneficiaryID: %s\nhandle: %s\nrecordID: %s\nstatus: %ld", (uint8_t *)v15, 0x2Au);
    swift_arrayDestroy(v42, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v42, -1, -1);
    swift_slowDealloc(v15, -1, -1);

  }
  else
  {
    sub_100028388(*(_QWORD *)(v0 + 120), type metadata accessor for BenefactorInfoRecord);
    sub_100028388(v11, type metadata accessor for BenefactorInfoRecord);
    sub_100028388(v12, type metadata accessor for BenefactorInfoRecord);
    sub_100028388(v13, type metadata accessor for BenefactorInfoRecord);

  }
  v27 = *(_QWORD *)(v0 + 152);
  v29 = *(_QWORD *)(v0 + 96);
  v28 = *(_QWORD *)(v0 + 104);
  v30 = *(void (**)(uint64_t))(v0 + 80);
  sub_100027FE8(v27, v28, type metadata accessor for BenefactorInfoRecord);
  swift_storeEnumTagMultiPayload(v28, v29, 0);
  v30(v28);
  sub_100004934(v28, (uint64_t *)&unk_10028FA40);
  sub_100028388(v27, type metadata accessor for BenefactorInfoRecord);
  v31 = *(_QWORD *)(v0 + 144);
  v33 = *(_QWORD *)(v0 + 128);
  v32 = *(_QWORD *)(v0 + 136);
  v34 = *(_QWORD *)(v0 + 120);
  v35 = *(_QWORD *)(v0 + 104);
  swift_task_dealloc(*(_QWORD *)(v0 + 152));
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000CC4C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  uint64_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  void (*v17)(_QWORD *);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;

  if (qword_10028ADD0 != -1)
    swift_once(&qword_10028ADD0, sub_100046D50);
  v1 = *(_QWORD *)(v0 + 168);
  v2 = type metadata accessor for Logger(0);
  sub_100005288(v2, (uint64_t)qword_1002A89F0);
  swift_errorRetain(v1);
  v3 = swift_errorRetain(v1);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.error.getter(v4);
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(_QWORD *)(v0 + 168);
  if (v6)
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v24 = v9;
    *(_DWORD *)v8 = 136315138;
    *(_QWORD *)(v0 + 16) = v7;
    swift_errorRetain(v7);
    v10 = sub_1000080B4(&qword_10028E850);
    v11 = String.init<A>(describing:)(v0 + 16, v10);
    v13 = v12;
    *(_QWORD *)(v0 + 24) = sub_1001DEF4C(v11, v12, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32);
    swift_bridgeObjectRelease(v13);
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Error fetching BenefactorInfoRecord : %s", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    swift_errorRelease(*(_QWORD *)(v0 + 168));
    swift_errorRelease(v7);
  }

  v14 = *(_QWORD *)(v0 + 168);
  v15 = *(_QWORD *)(v0 + 96);
  v16 = *(_QWORD **)(v0 + 104);
  v17 = *(void (**)(_QWORD *))(v0 + 80);
  *v16 = v14;
  swift_storeEnumTagMultiPayload(v16, v15, 1);
  swift_errorRetain(v14);
  v17(v16);
  swift_errorRelease(v14);
  sub_100004934((uint64_t)v16, (uint64_t *)&unk_10028FA40);
  v18 = *(_QWORD *)(v0 + 144);
  v20 = *(_QWORD *)(v0 + 128);
  v19 = *(_QWORD *)(v0 + 136);
  v21 = *(_QWORD *)(v0 + 120);
  v22 = *(_QWORD *)(v0 + 104);
  swift_task_dealloc(*(_QWORD *)(v0 + 152));
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000CC71C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  _QWORD *v20;
  void (*v21)(char *, uint64_t);
  uint64_t v22;
  uint64_t v24;

  v3 = v2;
  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  v9 = __chkstk_darwin(v6, v8);
  v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9, v12);
  v14 = (char *)&v24 - v13;
  if (qword_10028ADD0 != -1)
    swift_once(&qword_10028ADD0, sub_100046D50);
  v15 = type metadata accessor for Logger(0);
  v16 = sub_100005288(v15, (uint64_t)qword_1002A89F0);
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v17, v18))
  {
    v19 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v19 = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Fetching stored BenefactorInfoRecords...", v19, 2u);
    swift_slowDealloc(v19, -1, -1);
  }

  v20 = sub_10000732C((_QWORD *)(v3 + OBJC_IVAR____TtC13appleaccountd28InheritanceStorageController_storageController), *(_QWORD *)(v3 + OBJC_IVAR____TtC13appleaccountd28InheritanceStorageController_storageController + 24));
  type metadata accessor for LocalCache();
  sub_10000840C();
  URL.appendingPathComponent(_:isDirectory:)(0xD00000000000001FLL, 0x800000010020A500, 1);
  v21 = *(void (**)(char *, uint64_t))(v7 + 8);
  v21(v11, v6);
  v22 = swift_allocObject(&unk_1002662E0, 32, 7);
  *(_QWORD *)(v22 + 16) = a1;
  *(_QWORD *)(v22 + 24) = a2;
  sub_10000732C((_QWORD *)(*v20 + 16), *(_QWORD *)(*v20 + 40));
  swift_retain(a2);
  sub_10009D08C((uint64_t)v14, (uint64_t)sub_1000D1430, v22);
  swift_release(v22);
  return ((uint64_t (*)(char *, uint64_t))v21)(v14, v6);
}

uint64_t sub_1000CC928(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000CC94C(a1, a2, a3, "Fetching stored BenefactorInfoRecord with beneficiaryID: %s...", (uint64_t)&unk_1002662B8, (uint64_t)sub_1000D1388, (void (*)(_QWORD, _QWORD))sub_1000CC71C);
}

uint64_t sub_1000CC94C(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, void (*a7)(_QWORD, _QWORD))
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint8_t *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD v40[2];
  uint64_t v41;
  uint64_t v42;
  void (*v43)(_QWORD, _QWORD);
  const char *v44;
  uint64_t (*v45)(char *, uint64_t, uint64_t);
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v47 = a5;
  v48 = a2;
  v44 = a4;
  v49 = a3;
  v10 = type metadata accessor for UUID(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  v14 = __chkstk_darwin(v10, v13);
  v46 = (char *)v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14, v15);
  v17 = (char *)v40 - v16;
  if (qword_10028ADD0 != -1)
    swift_once(&qword_10028ADD0, sub_100046D50);
  v18 = type metadata accessor for Logger(0);
  sub_100005288(v18, (uint64_t)qword_1002A89F0);
  v45 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v19 = v45(v17, a1, v10);
  v20 = Logger.logObject.getter(v19);
  v21 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v20, v21))
  {
    v22 = swift_slowAlloc(12, -1);
    v42 = a6;
    v23 = (uint8_t *)v22;
    v24 = swift_slowAlloc(32, -1);
    v43 = a7;
    v25 = v24;
    v51 = v24;
    v41 = a1;
    *(_DWORD *)v23 = 136315138;
    v40[1] = v23 + 4;
    v26 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v27 = dispatch thunk of CustomStringConvertible.description.getter(v10, v26);
    v29 = v28;
    v50 = sub_1001DEF4C(v27, v28, &v51);
    a1 = v41;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, &v51);
    swift_bridgeObjectRelease(v29);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v17, v10);
    _os_log_impl((void *)&_mh_execute_header, v20, v21, v44, v23, 0xCu);
    swift_arrayDestroy(v25, 1, (char *)&type metadata for Any + 8);
    v30 = v25;
    a7 = v43;
    swift_slowDealloc(v30, -1, -1);
    v31 = v23;
    a6 = v42;
    swift_slowDealloc(v31, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v17, v10);
  }

  v32 = v46;
  v45(v46, a1, v10);
  v33 = *(unsigned __int8 *)(v11 + 80);
  v34 = (v33 + 16) & ~v33;
  v35 = (v12 + v34 + 7) & 0xFFFFFFFFFFFFFFF8;
  v36 = swift_allocObject(v47, v35 + 16, v33 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(v36 + v34, v32, v10);
  v37 = (_QWORD *)(v36 + v35);
  v38 = v49;
  *v37 = v48;
  v37[1] = v38;
  swift_retain(v38);
  a7(a6, v36);
  return swift_release(v36);
}

uint64_t sub_1000CCC20(uint64_t a1, char a2, uint64_t a3, void (*a4)(uint64_t *), uint64_t a5, uint64_t *a6, uint64_t (*a7)(_QWORD), uint64_t *a8, const char *a9, const char *a10, const char *a11)
{
  uint64_t *v13;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  uint8_t *v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  const char *v63;
  const char *v64;
  uint64_t v65;
  NSObject *v66;
  __n128 v67;
  os_log_type_t v68;
  uint8_t *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  const char *v77;
  char *v78;
  uint64_t v79;
  NSObject *v80;
  os_log_type_t v81;
  uint8_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint8_t *v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t *v94;
  const char *v95;
  uint64_t *v96;
  uint64_t *v98;
  const char *v99;
  char *v100;
  const char *v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  const char *v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t v108;
  void (*v109)(uint64_t *);
  uint64_t v110;
  uint64_t v111;

  v13 = a6;
  v108 = a5;
  v109 = a4;
  v106 = sub_1000080B4(a6);
  __chkstk_darwin(v106, v17);
  v107 = (uint64_t *)((char *)&v98 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  v102 = type metadata accessor for UUID(0);
  v105 = *(const char **)(v102 - 8);
  v20 = __chkstk_darwin(v102, v19);
  v100 = (char *)&v98 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20, v22);
  v99 = (char *)&v98 - v23;
  v24 = a7(0);
  v25 = *(_QWORD *)(v24 - 8);
  v27 = __chkstk_darwin(v24, v26);
  v29 = (char *)&v98 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27, v30);
  v101 = (char *)&v98 - v31;
  v32 = sub_1000080B4(a8);
  v34 = __chkstk_darwin(v32, v33);
  v36 = (char *)&v98 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v34, v37);
  v104 = (uint64_t)&v98 - v38;
  if ((a2 & 1) != 0)
  {
    swift_errorRetain(a1);
    if (qword_10028ADD0 != -1)
      swift_once(&qword_10028ADD0, sub_100046D50);
    v43 = type metadata accessor for Logger(0);
    sub_100005288(v43, (uint64_t)qword_1002A89F0);
    swift_errorRetain(a1);
    v44 = swift_errorRetain(a1);
    v45 = Logger.logObject.getter(v44);
    v46 = static os_log_type_t.error.getter(v45);
    if (os_log_type_enabled(v45, v46))
    {
      v105 = a11;
      v47 = (uint8_t *)swift_slowAlloc(12, -1);
      v48 = v13;
      v49 = swift_slowAlloc(32, -1);
      v110 = a1;
      v111 = v49;
      *(_DWORD *)v47 = 136315138;
      swift_errorRetain(a1);
      v50 = sub_1000080B4(&qword_10028E850);
      v51 = String.init<A>(describing:)(&v110, v50);
      v53 = v52;
      v110 = sub_1001DEF4C(v51, v52, &v111);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v110, &v111);
      swift_bridgeObjectRelease(v53);
      sub_1000057B0(a1, 1);
      sub_1000057B0(a1, 1);
      _os_log_impl((void *)&_mh_execute_header, v45, v46, v105, v47, 0xCu);
      swift_arrayDestroy(v49, 1, (char *)&type metadata for Any + 8);
      v54 = v49;
      v13 = v48;
      swift_slowDealloc(v54, -1, -1);
      swift_slowDealloc(v47, -1, -1);
    }
    else
    {
      sub_1000057B0(a1, 1);
      sub_1000057B0(a1, 1);
    }

    v55 = v106;
    v56 = v107;
    *v107 = a1;
    swift_storeEnumTagMultiPayload(v56, v55, 1);
    swift_errorRetain(a1);
    v109(v56);
    sub_1000057B0(a1, 1);
    v57 = (uint64_t)v56;
    v58 = v13;
  }
  else
  {
    v103 = a8;
    v39 = *(_QWORD *)(a1 + 16);
    v98 = v13;
    if (v39)
    {
      v40 = a1 + ((*(unsigned __int8 *)(v25 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80));
      v41 = *(_QWORD *)(v25 + 72);
      swift_bridgeObjectRetain(a1);
      while (1)
      {
        sub_100027FE8(v40, (uint64_t)v29, a7);
        if ((static UUID.== infix(_:_:)(v29) & 1) != 0)
          break;
        sub_100028388((uint64_t)v29, a7);
        v40 += v41;
        if (!--v39)
        {
          sub_1000057B0(a1, 0);
          v42 = 1;
          v13 = v98;
          goto LABEL_14;
        }
      }
      sub_1000057B0(a1, 0);
      v59 = v104;
      sub_10003B730((uint64_t)v29, v104, a7);
      v42 = 0;
      v13 = v98;
    }
    else
    {
      v42 = 1;
LABEL_14:
      v59 = v104;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v25 + 56))(v59, v42, 1, v24);
    v60 = v103;
    sub_100024A20(v59, (uint64_t)v36, v103);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v36, 1, v24) == 1)
    {
      sub_100004934((uint64_t)v36, v60);
      v61 = v102;
      if (qword_10028ADD0 != -1)
        swift_once(&qword_10028ADD0, sub_100046D50);
      v62 = type metadata accessor for Logger(0);
      sub_100005288(v62, (uint64_t)qword_1002A89F0);
      v63 = v105;
      v64 = v99;
      v65 = (*((uint64_t (**)(const char *, uint64_t, uint64_t))v105 + 2))(v99, a3, v61);
      v66 = Logger.logObject.getter(v65);
      v68 = static os_log_type_t.default.getter(v67);
      if (os_log_type_enabled(v66, v68))
      {
        v101 = a10;
        v69 = (uint8_t *)swift_slowAlloc(12, -1);
        v70 = swift_slowAlloc(32, -1);
        v111 = v70;
        *(_DWORD *)v69 = 136315138;
        v71 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v72 = dispatch thunk of CustomStringConvertible.description.getter(v61, v71);
        v74 = v73;
        v110 = sub_1001DEF4C(v72, v73, &v111);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v110, &v111);
        swift_bridgeObjectRelease(v74);
        (*((void (**)(const char *, uint64_t))v105 + 1))(v64, v61);
        v59 = v104;
        _os_log_impl((void *)&_mh_execute_header, v66, v68, v101, v69, 0xCu);
        swift_arrayDestroy(v70, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v70, -1, -1);
        swift_slowDealloc(v69, -1, -1);
      }
      else
      {
        (*((void (**)(const char *, uint64_t))v63 + 1))(v64, v61);
      }

      type metadata accessor for InheritanceError(0);
      v90 = v89;
      v110 = 3;
      v91 = sub_100005014((uint64_t)&_swiftEmptyArrayStorage);
      v92 = sub_100005150(&qword_10028B350, (uint64_t (*)(uint64_t))type metadata accessor for InheritanceError, (uint64_t)&unk_100216D64);
      _BridgedStoredNSError.init(_:userInfo:)(&v111, &v110, v91, v90, v92);
      v93 = v106;
      v94 = v107;
      *v107 = v111;
      swift_storeEnumTagMultiPayload(v94, v93, 1);
      v109(v94);
      sub_100004934((uint64_t)v94, v13);
    }
    else
    {
      sub_10003B730((uint64_t)v36, (uint64_t)v101, a7);
      v75 = v102;
      if (qword_10028ADD0 != -1)
        swift_once(&qword_10028ADD0, sub_100046D50);
      v76 = type metadata accessor for Logger(0);
      sub_100005288(v76, (uint64_t)qword_1002A89F0);
      v77 = v105;
      v78 = v100;
      v79 = (*((uint64_t (**)(char *, uint64_t, uint64_t))v105 + 2))(v100, a3, v75);
      v80 = Logger.logObject.getter(v79);
      v81 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v80, v81))
      {
        v99 = a9;
        v82 = (uint8_t *)swift_slowAlloc(12, -1);
        v83 = swift_slowAlloc(32, -1);
        v111 = v83;
        *(_DWORD *)v82 = 136315138;
        v84 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v85 = dispatch thunk of CustomStringConvertible.description.getter(v75, v84);
        v87 = v86;
        v110 = sub_1001DEF4C(v85, v86, &v111);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v110, &v111);
        swift_bridgeObjectRelease(v87);
        (*((void (**)(char *, uint64_t))v105 + 1))(v78, v75);
        _os_log_impl((void *)&_mh_execute_header, v80, v81, v99, v82, 0xCu);
        swift_arrayDestroy(v83, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v83, -1, -1);
        v88 = v82;
        v59 = v104;
        swift_slowDealloc(v88, -1, -1);
      }
      else
      {
        (*((void (**)(char *, uint64_t))v77 + 1))(v78, v75);
      }

      v95 = v101;
      v96 = v107;
      sub_100027FE8((uint64_t)v101, (uint64_t)v107, a7);
      swift_storeEnumTagMultiPayload(v96, v106, 0);
      v109(v96);
      sub_100004934((uint64_t)v96, v98);
      sub_100028388((uint64_t)v95, a7);
    }
    v57 = v59;
    v58 = v103;
  }
  return sub_100004934(v57, v58);
}

uint64_t sub_1000CD500(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v4 = v3;
  v8 = type metadata accessor for BenefactorInfoRecord(0);
  __chkstk_darwin(v8, v9);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10028ADD0 != -1)
    swift_once(&qword_10028ADD0, sub_100046D50);
  v12 = type metadata accessor for Logger(0);
  sub_100005288(v12, (uint64_t)qword_1002A89F0);
  v13 = sub_100027FE8(a1, (uint64_t)v11, type metadata accessor for BenefactorInfoRecord);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v14, v15))
  {
    v27 = v3;
    v16 = (uint8_t *)swift_slowAlloc(12, -1);
    v17 = swift_slowAlloc(32, -1);
    v31 = v17;
    v28 = a2;
    v29 = a3;
    *(_DWORD *)v16 = 136315138;
    v18 = type metadata accessor for UUID(0);
    v19 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v20 = dispatch thunk of CustomStringConvertible.description.getter(v18, v19);
    v22 = v21;
    v30 = sub_1001DEF4C(v20, v21, &v31);
    a2 = v28;
    a3 = v29;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31);
    v23 = v22;
    v4 = v27;
    swift_bridgeObjectRelease(v23);
    sub_100028388((uint64_t)v11, type metadata accessor for BenefactorInfoRecord);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Saving BenefactorInfoRecord with beneficiaryID - %s...", v16, 0xCu);
    swift_arrayDestroy(v17, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v17, -1, -1);
    swift_slowDealloc(v16, -1, -1);
  }
  else
  {
    sub_100028388((uint64_t)v11, type metadata accessor for BenefactorInfoRecord);
  }

  sub_10000732C((_QWORD *)(v4 + OBJC_IVAR____TtC13appleaccountd28InheritanceStorageController_storageController), *(_QWORD *)(v4 + OBJC_IVAR____TtC13appleaccountd28InheritanceStorageController_storageController + 24));
  v24 = swift_allocObject(&unk_100266290, 32, 7);
  *(_QWORD *)(v24 + 16) = a2;
  *(_QWORD *)(v24 + 24) = a3;
  swift_retain(a3);
  sub_1001E5D90(a1, (uint64_t)sub_1000D134C, v24);
  return swift_release(v24);
}

uint64_t sub_1000CD794(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint8_t *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t (**v41)(uint64_t);
  uint8_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v4 = v3;
  v8 = type metadata accessor for BenefactorInfoRecord(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  v12 = __chkstk_darwin(v8, v11);
  v48 = (uint64_t)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12, v13);
  v15 = (char *)&v43 - v14;
  if (qword_10028ADD0 != -1)
    swift_once(&qword_10028ADD0, sub_100046D50);
  v16 = type metadata accessor for Logger(0);
  sub_100005288(v16, (uint64_t)qword_1002A89F0);
  v17 = sub_100027FE8(a1, (uint64_t)v15, type metadata accessor for BenefactorInfoRecord);
  v18 = Logger.logObject.getter(v17);
  v19 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v18, v19))
  {
    v44 = v3;
    v20 = swift_slowAlloc(12, -1);
    v45 = a2;
    v21 = (uint8_t *)v20;
    v22 = swift_slowAlloc(32, -1);
    v47 = a1;
    v23 = v22;
    v50 = v22;
    v46 = a3;
    *(_DWORD *)v21 = 136315138;
    v43 = v21 + 4;
    v24 = v9;
    v25 = type metadata accessor for UUID(0);
    v26 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v27 = v25;
    v9 = v24;
    v4 = v44;
    v28 = dispatch thunk of CustomStringConvertible.description.getter(v27, v26);
    v30 = v29;
    v49 = sub_1001DEF4C(v28, v29, &v50);
    a3 = v46;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50);
    swift_bridgeObjectRelease(v30);
    sub_100028388((uint64_t)v15, type metadata accessor for BenefactorInfoRecord);
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Deleting BenefactorInfoRecord with beneficiaryID - %s...", v21, 0xCu);
    swift_arrayDestroy(v23, 1, (char *)&type metadata for Any + 8);
    v31 = v23;
    a1 = v47;
    swift_slowDealloc(v31, -1, -1);
    v32 = v21;
    a2 = v45;
    swift_slowDealloc(v32, -1, -1);
  }
  else
  {
    sub_100028388((uint64_t)v15, type metadata accessor for BenefactorInfoRecord);
  }

  v33 = sub_10000732C((_QWORD *)(v4 + OBJC_IVAR____TtC13appleaccountd28InheritanceStorageController_storageController), *(_QWORD *)(v4 + OBJC_IVAR____TtC13appleaccountd28InheritanceStorageController_storageController + 24));
  v34 = swift_allocObject(&unk_100266240, 32, 7);
  *(_QWORD *)(v34 + 16) = a2;
  *(_QWORD *)(v34 + 24) = a3;
  v35 = *v33;
  v36 = v48;
  sub_100027FE8(a1, v48, type metadata accessor for BenefactorInfoRecord);
  v37 = *(unsigned __int8 *)(v9 + 80);
  v38 = (v37 + 24) & ~v37;
  v39 = (v10 + v38 + 7) & 0xFFFFFFFFFFFFFFF8;
  v40 = swift_allocObject(&unk_100266268, v39 + 16, v37 | 7);
  *(_QWORD *)(v40 + 16) = v35;
  sub_10003B730(v36, v40 + v38, type metadata accessor for BenefactorInfoRecord);
  v41 = (uint64_t (**)(uint64_t))(v40 + v39);
  *v41 = sub_1000D1238;
  v41[1] = (uint64_t (*)(uint64_t))v34;
  swift_retain(a3);
  swift_retain(v35);
  swift_retain(v34);
  sub_100180718(a1, (uint64_t)sub_1000D1338, v40);
  swift_release(v34);
  return swift_release(v40);
}

uint64_t sub_1000CDAE4(uint64_t a1, void (*a2)(_QWORD), uint64_t a3, const char *a4, const char *a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(_QWORD);
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  void (*v34)(uint64_t *);
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint8_t *v39;
  _QWORD v41[2];
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v42 = a4;
  v43 = a3;
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v12 = (char *)v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1000080B4((uint64_t *)&unk_10028CD50);
  v15 = __chkstk_darwin(v13, v14);
  v17 = (_QWORD *)((char *)v41 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v15, v18);
  v20 = (_QWORD *)((char *)v41 - v19);
  sub_100024A20(a1, (uint64_t)v41 - v19, (uint64_t *)&unk_10028CD50);
  if (swift_getEnumCaseMultiPayload(v20, v13) == 1)
  {
    v21 = *v20;
    if (qword_10028ADD0 != -1)
      swift_once(&qword_10028ADD0, sub_100046D50);
    v22 = type metadata accessor for Logger(0);
    sub_100005288(v22, (uint64_t)qword_1002A89F0);
    swift_errorRetain(v21);
    v23 = swift_errorRetain(v21);
    v24 = Logger.logObject.getter(v23);
    v25 = static os_log_type_t.error.getter(v24);
    if (os_log_type_enabled(v24, v25))
    {
      v26 = (uint8_t *)swift_slowAlloc(12, -1);
      v27 = swift_slowAlloc(32, -1);
      v44 = v21;
      v45 = v27;
      *(_DWORD *)v26 = 136315138;
      v41[1] = v26 + 4;
      swift_errorRetain(v21);
      v28 = sub_1000080B4(&qword_10028E850);
      v29 = String.init<A>(describing:)(&v44, v28);
      v30 = a2;
      v32 = v31;
      v44 = sub_1001DEF4C(v29, v31, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, &v45);
      v33 = v32;
      a2 = v30;
      swift_bridgeObjectRelease(v33);
      swift_errorRelease(v21);
      swift_errorRelease(v21);
      _os_log_impl((void *)&_mh_execute_header, v24, v25, v42, v26, 0xCu);
      swift_arrayDestroy(v27, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v27, -1, -1);
      swift_slowDealloc(v26, -1, -1);
    }
    else
    {
      swift_errorRelease(v21);
      swift_errorRelease(v21);
    }

    *v17 = v21;
    swift_storeEnumTagMultiPayload(v17, v13, 1);
    swift_errorRetain(v21);
    a2(v17);
    swift_errorRelease(v21);
    return sub_100004934((uint64_t)v17, (uint64_t *)&unk_10028CD50);
  }
  else
  {
    v34 = (void (*)(uint64_t *))a2;
    (*(void (**)(char *, uint64_t *, uint64_t))(v9 + 32))(v12, v20, v8);
    if (qword_10028ADD0 != -1)
      swift_once(&qword_10028ADD0, sub_100046D50);
    v35 = type metadata accessor for Logger(0);
    v36 = sub_100005288(v35, (uint64_t)qword_1002A89F0);
    v37 = Logger.logObject.getter(v36);
    v38 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v37, v38))
    {
      v39 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v39 = 0;
      _os_log_impl((void *)&_mh_execute_header, v37, v38, a5, v39, 2u);
      swift_slowDealloc(v39, -1, -1);
    }

    objc_msgSend((id)objc_opt_self(AATrustedContactNotificationPublisher), "postInheritanceContactChangedNotification");
    (*(void (**)(uint64_t *, char *, uint64_t))(v9 + 16))(v17, v12, v8);
    swift_storeEnumTagMultiPayload(v17, v13, 0);
    v34(v17);
    sub_100004934((uint64_t)v17, (uint64_t *)&unk_10028CD50);
    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  }
}

uint64_t sub_1000CDEE4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  _QWORD *v20;
  void (*v21)(char *, uint64_t);
  uint64_t v22;
  uint64_t v24;

  v3 = v2;
  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  v9 = __chkstk_darwin(v6, v8);
  v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9, v12);
  v14 = (char *)&v24 - v13;
  if (qword_10028ADD0 != -1)
    swift_once(&qword_10028ADD0, sub_100046D50);
  v15 = type metadata accessor for Logger(0);
  v16 = sub_100005288(v15, (uint64_t)qword_1002A89F0);
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v17, v18))
  {
    v19 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v19 = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Fetching stored InheritanceHealthRecords...", v19, 2u);
    swift_slowDealloc(v19, -1, -1);
  }

  v20 = sub_10000732C((_QWORD *)(v3 + OBJC_IVAR____TtC13appleaccountd28InheritanceStorageController_storageController), *(_QWORD *)(v3 + OBJC_IVAR____TtC13appleaccountd28InheritanceStorageController_storageController + 24));
  type metadata accessor for LocalCache();
  sub_10000840C();
  URL.appendingPathComponent(_:isDirectory:)(0xD000000000000017, 0x800000010020A430, 1);
  v21 = *(void (**)(char *, uint64_t))(v7 + 8);
  v21(v11, v6);
  v22 = swift_allocObject(&unk_100266218, 32, 7);
  *(_QWORD *)(v22 + 16) = a1;
  *(_QWORD *)(v22 + 24) = a2;
  sub_10000732C((_QWORD *)(*v20 + 16), *(_QWORD *)(*v20 + 40));
  swift_retain(a2);
  sub_10009D390((uint64_t)v14, (uint64_t)sub_1000D120C, v22);
  swift_release(v22);
  return ((uint64_t (*)(char *, uint64_t))v21)(v14, v6);
}

uint64_t sub_1000CE0F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t, uint64_t);
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint64_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint8_t *v36;
  _QWORD *v37;
  uint64_t v38;
  void (*v39)(char *, uint64_t);
  char *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD v48[2];
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(char *, uint64_t, uint64_t);
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  v4 = v3;
  v58 = a3;
  v56 = a2;
  v6 = type metadata accessor for URL(0);
  v7 = *(_QWORD *)(v6 - 8);
  v9 = __chkstk_darwin(v6, v8);
  v11 = (char *)v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9, v12);
  v57 = (char *)v48 - v13;
  v14 = type metadata accessor for UUID(0);
  v15 = *(_QWORD *)(v14 - 8);
  v17 = __chkstk_darwin(v14, v16);
  v53 = v18;
  v54 = (char *)v48 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17, v19);
  v21 = (char *)v48 - v20;
  if (qword_10028ADD0 != -1)
    swift_once(&qword_10028ADD0, sub_100046D50);
  v22 = type metadata accessor for Logger(0);
  sub_100005288(v22, (uint64_t)qword_1002A89F0);
  v23 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
  v55 = a1;
  v52 = v23;
  v24 = ((uint64_t (*)(char *, uint64_t, uint64_t))v23)(v21, a1, v14);
  v25 = Logger.logObject.getter(v24);
  v26 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v25, v26))
  {
    v27 = swift_slowAlloc(12, -1);
    v50 = v7;
    v28 = (uint8_t *)v27;
    v29 = swift_slowAlloc(32, -1);
    v49 = v3;
    v30 = v29;
    v60 = v29;
    v51 = v6;
    *(_DWORD *)v28 = 136315138;
    v48[1] = v28 + 4;
    v31 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v32 = dispatch thunk of CustomStringConvertible.description.getter(v14, v31);
    v34 = v33;
    v59 = sub_1001DEF4C(v32, v33, &v60);
    v6 = v51;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, &v60);
    swift_bridgeObjectRelease(v34);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v21, v14);
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "Fetching stored InheritanceHealthRecord with beneficiaryID: %s...", v28, 0xCu);
    swift_arrayDestroy(v30, 1, (char *)&type metadata for Any + 8);
    v35 = v30;
    v4 = v49;
    swift_slowDealloc(v35, -1, -1);
    v36 = v28;
    v7 = v50;
    swift_slowDealloc(v36, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v15 + 8))(v21, v14);
  }

  v37 = sub_10000732C((_QWORD *)(v4 + OBJC_IVAR____TtC13appleaccountd28InheritanceStorageController_storageController), *(_QWORD *)(v4 + OBJC_IVAR____TtC13appleaccountd28InheritanceStorageController_storageController + 24));
  type metadata accessor for LocalCache();
  sub_10000840C();
  v38 = (uint64_t)v57;
  URL.appendingPathComponent(_:isDirectory:)(0xD000000000000017, 0x800000010020A430, 1);
  v39 = *(void (**)(char *, uint64_t))(v7 + 8);
  v39(v11, v6);
  v40 = v54;
  v52(v54, v55, v14);
  v41 = *(unsigned __int8 *)(v15 + 80);
  v42 = (v41 + 16) & ~v41;
  v43 = (v53 + v42 + 7) & 0xFFFFFFFFFFFFFFF8;
  v44 = swift_allocObject(&unk_1002661F0, v43 + 16, v41 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(v44 + v42, v40, v14);
  v45 = (_QWORD *)(v44 + v43);
  v46 = v58;
  *v45 = v56;
  v45[1] = v46;
  sub_10000732C((_QWORD *)(*v37 + 16), *(_QWORD *)(*v37 + 40));
  swift_retain(v46);
  sub_10009D390(v38, (uint64_t)sub_1000D1164, v44);
  swift_release(v44);
  return ((uint64_t (*)(uint64_t, uint64_t))v39)(v38, v6);
}

uint64_t sub_1000CE4C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v4 = v3;
  v8 = type metadata accessor for InheritanceHealthRecord(0);
  __chkstk_darwin(v8, v9);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10028ADD0 != -1)
    swift_once(&qword_10028ADD0, sub_100046D50);
  v12 = type metadata accessor for Logger(0);
  sub_100005288(v12, (uint64_t)qword_1002A89F0);
  v13 = sub_100027FE8(a1, (uint64_t)v11, type metadata accessor for InheritanceHealthRecord);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v14, v15))
  {
    v27 = v3;
    v16 = (uint8_t *)swift_slowAlloc(12, -1);
    v17 = swift_slowAlloc(32, -1);
    v31 = v17;
    v28 = a2;
    v29 = a3;
    *(_DWORD *)v16 = 136315138;
    v18 = type metadata accessor for UUID(0);
    v19 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v20 = dispatch thunk of CustomStringConvertible.description.getter(v18, v19);
    v22 = v21;
    v30 = sub_1001DEF4C(v20, v21, &v31);
    a2 = v28;
    a3 = v29;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31);
    v23 = v22;
    v4 = v27;
    swift_bridgeObjectRelease(v23);
    sub_100028388((uint64_t)v11, type metadata accessor for InheritanceHealthRecord);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Saving BenefactorInfoRecord with beneficiaryID - %s...", v16, 0xCu);
    swift_arrayDestroy(v17, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v17, -1, -1);
    swift_slowDealloc(v16, -1, -1);
  }
  else
  {
    sub_100028388((uint64_t)v11, type metadata accessor for InheritanceHealthRecord);
  }

  sub_10000732C((_QWORD *)(v4 + OBJC_IVAR____TtC13appleaccountd28InheritanceStorageController_storageController), *(_QWORD *)(v4 + OBJC_IVAR____TtC13appleaccountd28InheritanceStorageController_storageController + 24));
  v24 = swift_allocObject(&unk_1002661C8, 32, 7);
  *(_QWORD *)(v24 + 16) = a2;
  *(_QWORD *)(v24 + 24) = a3;
  swift_retain(a3);
  sub_1001E5F24(a1, (uint64_t)sub_1000D1158, v24);
  return swift_release(v24);
}

uint64_t sub_1000CE758(uint64_t a1, void (*a2)(_QWORD), uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(_QWORD);
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  _QWORD v38[2];
  uint64_t v39;
  uint64_t v40;

  v6 = type metadata accessor for InheritanceHealthRecord(0);
  __chkstk_darwin(v6, v7);
  v9 = (char *)v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1000080B4((uint64_t *)&unk_100295390);
  v12 = __chkstk_darwin(v10, v11);
  v14 = (_QWORD *)((char *)v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v12, v15);
  v17 = (_QWORD *)((char *)v38 - v16);
  sub_100024A20(a1, (uint64_t)v38 - v16, (uint64_t *)&unk_100295390);
  if (swift_getEnumCaseMultiPayload(v17, v10) == 1)
  {
    v18 = *v17;
    if (qword_10028ADD0 != -1)
      swift_once(&qword_10028ADD0, sub_100046D50);
    v19 = type metadata accessor for Logger(0);
    sub_100005288(v19, (uint64_t)qword_1002A89F0);
    swift_errorRetain(v18);
    v20 = swift_errorRetain(v18);
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.error.getter(v21);
    if (os_log_type_enabled(v21, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc(12, -1);
      v24 = swift_slowAlloc(32, -1);
      v38[1] = a3;
      v39 = v18;
      v25 = v24;
      v40 = v24;
      *(_DWORD *)v23 = 136315138;
      v38[0] = v23 + 4;
      swift_errorRetain(v18);
      v26 = sub_1000080B4(&qword_10028E850);
      v27 = String.init<A>(describing:)(&v39, v26);
      v28 = a2;
      v30 = v29;
      v39 = sub_1001DEF4C(v27, v29, &v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40);
      v31 = v30;
      a2 = v28;
      swift_bridgeObjectRelease(v31);
      swift_errorRelease(v18);
      swift_errorRelease(v18);
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Error saving InheritanceHealthRecord : %s", v23, 0xCu);
      swift_arrayDestroy(v25, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v25, -1, -1);
      swift_slowDealloc(v23, -1, -1);
    }
    else
    {
      swift_errorRelease(v18);
      swift_errorRelease(v18);
    }

    *v14 = v18;
    swift_storeEnumTagMultiPayload(v14, v10, 1);
    swift_errorRetain(v18);
    a2(v14);
    swift_errorRelease(v18);
    return sub_100004934((uint64_t)v14, (uint64_t *)&unk_100295390);
  }
  else
  {
    sub_10003B730((uint64_t)v17, (uint64_t)v9, type metadata accessor for InheritanceHealthRecord);
    if (qword_10028ADD0 != -1)
      swift_once(&qword_10028ADD0, sub_100046D50);
    v32 = type metadata accessor for Logger(0);
    v33 = sub_100005288(v32, (uint64_t)qword_1002A89F0);
    v34 = Logger.logObject.getter(v33);
    v35 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v34, v35))
    {
      v36 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v36 = 0;
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "Successfully saved InheritanceHealthRecord.", v36, 2u);
      swift_slowDealloc(v36, -1, -1);
    }

    sub_100027FE8((uint64_t)v9, (uint64_t)v14, type metadata accessor for InheritanceHealthRecord);
    swift_storeEnumTagMultiPayload(v14, v10, 0);
    a2(v14);
    sub_100004934((uint64_t)v14, (uint64_t *)&unk_100295390);
    return sub_100028388((uint64_t)v9, type metadata accessor for InheritanceHealthRecord);
  }
}

uint64_t sub_1000CEB44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint8_t *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t (**v41)(uint64_t);
  uint8_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v4 = v3;
  v8 = type metadata accessor for InheritanceHealthRecord(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  v12 = __chkstk_darwin(v8, v11);
  v48 = (uint64_t)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12, v13);
  v15 = (char *)&v43 - v14;
  if (qword_10028ADD0 != -1)
    swift_once(&qword_10028ADD0, sub_100046D50);
  v16 = type metadata accessor for Logger(0);
  sub_100005288(v16, (uint64_t)qword_1002A89F0);
  v17 = sub_100027FE8(a1, (uint64_t)v15, type metadata accessor for InheritanceHealthRecord);
  v18 = Logger.logObject.getter(v17);
  v19 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v18, v19))
  {
    v44 = v3;
    v20 = swift_slowAlloc(12, -1);
    v45 = a2;
    v21 = (uint8_t *)v20;
    v22 = swift_slowAlloc(32, -1);
    v47 = a1;
    v23 = v22;
    v50 = v22;
    v46 = a3;
    *(_DWORD *)v21 = 136315138;
    v43 = v21 + 4;
    v24 = v9;
    v25 = type metadata accessor for UUID(0);
    v26 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v27 = v25;
    v9 = v24;
    v4 = v44;
    v28 = dispatch thunk of CustomStringConvertible.description.getter(v27, v26);
    v30 = v29;
    v49 = sub_1001DEF4C(v28, v29, &v50);
    a3 = v46;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50);
    swift_bridgeObjectRelease(v30);
    sub_100028388((uint64_t)v15, type metadata accessor for InheritanceHealthRecord);
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Deleting InheritanceHealthRecord with beneficiaryID - %s...", v21, 0xCu);
    swift_arrayDestroy(v23, 1, (char *)&type metadata for Any + 8);
    v31 = v23;
    a1 = v47;
    swift_slowDealloc(v31, -1, -1);
    v32 = v21;
    a2 = v45;
    swift_slowDealloc(v32, -1, -1);
  }
  else
  {
    sub_100028388((uint64_t)v15, type metadata accessor for InheritanceHealthRecord);
  }

  v33 = sub_10000732C((_QWORD *)(v4 + OBJC_IVAR____TtC13appleaccountd28InheritanceStorageController_storageController), *(_QWORD *)(v4 + OBJC_IVAR____TtC13appleaccountd28InheritanceStorageController_storageController + 24));
  v34 = swift_allocObject(&unk_100266178, 32, 7);
  *(_QWORD *)(v34 + 16) = a2;
  *(_QWORD *)(v34 + 24) = a3;
  v35 = *v33;
  v36 = v48;
  sub_100027FE8(a1, v48, type metadata accessor for InheritanceHealthRecord);
  v37 = *(unsigned __int8 *)(v9 + 80);
  v38 = (v37 + 24) & ~v37;
  v39 = (v10 + v38 + 7) & 0xFFFFFFFFFFFFFFF8;
  v40 = swift_allocObject(&unk_1002661A0, v39 + 16, v37 | 7);
  *(_QWORD *)(v40 + 16) = v35;
  sub_10003B730(v36, v40 + v38, type metadata accessor for InheritanceHealthRecord);
  v41 = (uint64_t (**)(uint64_t))(v40 + v39);
  *v41 = sub_1000D0E4C;
  v41[1] = (uint64_t (*)(uint64_t))v34;
  swift_retain(a3);
  swift_retain(v35);
  swift_retain(v34);
  sub_100180978(a1, (uint64_t)sub_1000D0F58, v40);
  swift_release(v34);
  return swift_release(v40);
}

uint64_t sub_1000CEE94(uint64_t a1, void (*a2)(_QWORD), uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v36;
  void (*v37)(_QWORD);
  uint64_t v38;
  uint64_t v39;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1000080B4((uint64_t *)&unk_10028CD50);
  v13 = __chkstk_darwin(v11, v12);
  v15 = (uint64_t *)((char *)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v13, v16);
  v18 = (uint64_t *)((char *)&v36 - v17);
  sub_100024A20(a1, (uint64_t)&v36 - v17, (uint64_t *)&unk_10028CD50);
  if (swift_getEnumCaseMultiPayload(v18, v11) == 1)
  {
    v19 = *v18;
    if (qword_10028ADD0 != -1)
      swift_once(&qword_10028ADD0, sub_100046D50);
    v20 = type metadata accessor for Logger(0);
    sub_100005288(v20, (uint64_t)qword_1002A89F0);
    swift_errorRetain(v19);
    v21 = swift_errorRetain(v19);
    v22 = Logger.logObject.getter(v21);
    v23 = static os_log_type_t.error.getter(v22);
    if (os_log_type_enabled(v22, v23))
    {
      v36 = a3;
      v24 = (uint8_t *)swift_slowAlloc(12, -1);
      v25 = swift_slowAlloc(32, -1);
      v38 = v19;
      v39 = v25;
      v37 = a2;
      *(_DWORD *)v24 = 136315138;
      swift_errorRetain(v19);
      v26 = sub_1000080B4(&qword_10028E850);
      v27 = String.init<A>(describing:)(&v38, v26);
      v29 = v28;
      v38 = sub_1001DEF4C(v27, v28, &v39);
      a2 = v37;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39);
      swift_bridgeObjectRelease(v29);
      swift_errorRelease(v19);
      swift_errorRelease(v19);
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Error deleting InheritanceHealthRecord : %s", v24, 0xCu);
      swift_arrayDestroy(v25, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v25, -1, -1);
      swift_slowDealloc(v24, -1, -1);
    }
    else
    {
      swift_errorRelease(v19);
      swift_errorRelease(v19);
    }

    *v15 = v19;
    swift_storeEnumTagMultiPayload(v15, v11, 1);
    swift_errorRetain(v19);
    a2(v15);
    swift_errorRelease(v19);
    return sub_100004934((uint64_t)v15, (uint64_t *)&unk_10028CD50);
  }
  else
  {
    (*(void (**)(char *, uint64_t *, uint64_t))(v7 + 32))(v10, v18, v6);
    if (qword_10028ADD0 != -1)
      swift_once(&qword_10028ADD0, sub_100046D50);
    v30 = type metadata accessor for Logger(0);
    v31 = sub_100005288(v30, (uint64_t)qword_1002A89F0);
    v32 = Logger.logObject.getter(v31);
    v33 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v32, v33))
    {
      v34 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v34 = 0;
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "Successfully deleted InheritanceHealthRecord.", v34, 2u);
      swift_slowDealloc(v34, -1, -1);
    }

    (*(void (**)(uint64_t *, char *, uint64_t))(v7 + 16))(v15, v10, v6);
    swift_storeEnumTagMultiPayload(v15, v11, 0);
    a2(v15);
    sub_100004934((uint64_t)v15, (uint64_t *)&unk_10028CD50);
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  }
}

uint64_t sub_1000CF284(uint64_t a1, char a2, void (*a3)(_QWORD, _QWORD))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  void (*v23)(_QWORD, _QWORD);
  uint64_t v24;
  uint64_t v25;

  if ((a2 & 1) != 0)
  {
    swift_errorRetain(a1);
    if (qword_10028ADD0 != -1)
      swift_once(&qword_10028ADD0, sub_100046D50);
    v12 = type metadata accessor for Logger(0);
    sub_100005288(v12, (uint64_t)qword_1002A89F0);
    swift_errorRetain(a1);
    v13 = swift_errorRetain(a1);
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.error.getter(v14);
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc(12, -1);
      v23 = a3;
      v24 = a1;
      v17 = swift_slowAlloc(32, -1);
      v25 = v17;
      *(_DWORD *)v16 = 136315138;
      swift_errorRetain(a1);
      v18 = sub_1000080B4(&qword_10028E850);
      v19 = String.init<A>(describing:)(&v24, v18);
      v21 = v20;
      v24 = sub_1001DEF4C(v19, v20, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25);
      swift_bridgeObjectRelease(v21);
      sub_10006AEB4(a1, 1);
      sub_10006AEB4(a1, 1);
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Error fetching manatee status : %s", v16, 0xCu);
      swift_arrayDestroy(v17, 1, (char *)&type metadata for Any + 8);
      v22 = v17;
      a3 = v23;
      swift_slowDealloc(v22, -1, -1);
      swift_slowDealloc(v16, -1, -1);
    }
    else
    {
      sub_10006AEB4(a1, 1);
      sub_10006AEB4(a1, 1);
    }

    swift_errorRetain(a1);
    a3(a1, 1);
    sub_10006AEB4(a1, 1);
    return sub_10006AEB4(a1, 1);
  }
  else
  {
    v5 = a1 & 1;
    if (qword_10028ADD0 != -1)
      swift_once(&qword_10028ADD0, sub_100046D50);
    v6 = type metadata accessor for Logger(0);
    v7 = sub_100005288(v6, (uint64_t)qword_1002A89F0);
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v10 = 67109120;
      LODWORD(v25) = v5;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, (char *)&v25 + 4);
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Successfully fetched Manatee status - %{BOOL}d.", v10, 8u);
      swift_slowDealloc(v10, -1, -1);
    }

    return ((uint64_t (*)(uint64_t, _QWORD))a3)(v5, 0);
  }
}

uint64_t sub_1000CF590()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC13appleaccountd28InheritanceStorageController__accountStore;
  v2 = sub_1000080B4(&qword_10028FA50);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  sub_100006F58((_QWORD *)(v0 + OBJC_IVAR____TtC13appleaccountd28InheritanceStorageController_storageController));
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1000CF5F4()
{
  return type metadata accessor for InheritanceStorageController(0);
}

uint64_t type metadata accessor for InheritanceStorageController(uint64_t a1)
{
  uint64_t result;

  result = qword_100290870;
  if (!qword_100290870)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for InheritanceStorageController);
  return result;
}

void sub_1000CF638(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  sub_100092BEC(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = "(";
    swift_updateClassMetadata2(a1, 256, 2, v4, a1 + 80);
  }
}

uint64_t sub_1000CF6AC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;

  v3[5] = a2;
  v3[6] = v2;
  v3[4] = a1;
  v4 = type metadata accessor for UUID(0);
  v3[7] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[8] = v5;
  v3[9] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000CF710, 0, 0);
}

uint64_t sub_1000CF710()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t (*v3)(uint64_t, uint64_t);

  sub_10000732C((_QWORD *)(v0[6] + 56), *(_QWORD *)(v0[6] + 80));
  v3 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_100290A10 + dword_100290A10);
  v1 = (_QWORD *)swift_task_alloc(unk_100290A14);
  v0[10] = v1;
  *v1 = v0;
  v1[1] = sub_1000CF784;
  return v3(v0[4], v0[5]);
}

uint64_t sub_1000CF784()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*v1 + 80);
  v3 = *v1;
  *(_QWORD *)(v3 + 88) = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_1000CF7F8, 0, 0);
  swift_task_dealloc(*(_QWORD *)(v3 + 72));
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_1000CF7F8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  _BOOL8 v6;
  int8x16_t *v7;
  _QWORD *v8;
  uint64_t v10;

  v1 = *(_QWORD *)(v0 + 88);
  *(_QWORD *)(v0 + 16) = v1;
  v2 = (_QWORD *)(v0 + 16);
  swift_errorRetain(v1);
  v3 = sub_1000080B4(&qword_10028E850);
  type metadata accessor for CKError(0);
  if (swift_dynamicCast(v0 + 24, v0 + 16, v3, v4, 0))
  {
    swift_errorRelease(*(_QWORD *)(v0 + 88));
    v5 = *(void **)(v0 + 24);
    *(_QWORD *)(v0 + 96) = v5;
    v6 = sub_10015D160(v5);
    if (v6)
    {
      v7 = (int8x16_t *)swift_task_alloc(32);
      *(_QWORD *)(v0 + 104) = v7;
      v7[1] = vextq_s8(*(int8x16_t *)(v0 + 40), *(int8x16_t *)(v0 + 40), 8uLL);
      v8 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
      *(_QWORD *)(v0 + 112) = v8;
      *v8 = v0;
      v8[1] = sub_1000CF958;
      return withCheckedThrowingContinuation<A>(isolation:function:_:)(*(_QWORD *)(v0 + 72), 0, 0, 0x3A5F286863746566, 0xE900000000000029, sub_1000D15F8, v7, *(_QWORD *)(v0 + 56));
    }
    swift_willThrow(v6);
    swift_errorRelease(*v2);
  }
  else
  {
    v10 = swift_errorRelease(*v2);
    swift_willThrow(v10);
  }
  swift_task_dealloc(*(_QWORD *)(v0 + 72));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000CF958()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v5;

  v2 = *(_QWORD **)v1;
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 112);
  *(_QWORD *)(*(_QWORD *)v1 + 120) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_1000CFA24;
  }
  else
  {
    v5 = v2[13];
    (*(void (**)(_QWORD, _QWORD))(v2[8] + 8))(v2[9], v2[7]);
    swift_task_dealloc(v5);
    v4 = sub_1000CF9D8;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1000CF9D8()
{
  uint64_t v0;

  swift_willThrow();
  swift_errorRelease(*(_QWORD *)(v0 + 16));
  swift_task_dealloc(*(_QWORD *)(v0 + 72));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000CFA24()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 104);

  swift_task_dealloc(v1);
  swift_errorRelease(*(_QWORD *)(v0 + 16));
  swift_task_dealloc(*(_QWORD *)(v0 + 72));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000CFA70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v6 = sub_1000080B4(&qword_10028EA88);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  __chkstk_darwin(v6, v9);
  sub_10000732C((_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 40));
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v6);
  v10 = *(unsigned __int8 *)(v7 + 80);
  v11 = (v10 + 16) & ~v10;
  v12 = swift_allocObject(&unk_100266330, v11 + v8, v10 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v12 + v11, (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  sub_1001BB690(a3, (uint64_t)sub_1000D1664, v12);
  return swift_release(v12);
}

uint64_t sub_1000CFB68(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3[5] = a2;
  v3[6] = v2;
  v3[4] = a1;
  v4 = type metadata accessor for UUID(0);
  v3[7] = v4;
  v5 = *(_QWORD *)(v4 - 8);
  v3[8] = v5;
  v3[9] = swift_task_alloc((*(_QWORD *)(v5 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for BenefactorInfoRecord(0);
  v3[10] = v6;
  v3[11] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v6 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_1000CFBF0, 0, 0);
}

uint64_t sub_1000CFBF0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  objc_class *v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  objc_class *v16;
  Swift::String v17;
  CKRecordID v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  __n128 v24;
  os_log_type_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  _QWORD *v38;
  uint64_t v40;
  uint64_t v41;
  id v42;
  uint64_t v43;

  if (qword_10028AF00 != -1)
    swift_once(&qword_10028AF00, sub_1001FD458);
  if (*(_BYTE *)(*(_QWORD *)(v0 + 40) + *(int *)(*(_QWORD *)(v0 + 80) + 36)) == 1)
  {
    if (qword_10028AF20 != -1)
      swift_once(&qword_10028AF20, sub_1001FDDFC);
    v1 = &qword_1002A8CA0;
  }
  else
  {
    if (qword_10028AF18 != -1)
      swift_once(&qword_10028AF18, sub_1001FDDC4);
    v1 = &qword_1002A8C90;
  }
  v2 = *(_QWORD *)(v0 + 80);
  v4 = *v1;
  v3 = v1[1];
  swift_bridgeObjectRetain(v3);
  v5 = sub_1001FD4C0(v4, v3);
  v6 = objc_msgSend(v5, "privateCloudDatabase");
  *(_QWORD *)(v0 + 96) = v6;

  v7 = swift_bridgeObjectRelease(v3);
  v8 = UUID.uuidString.getter(v7);
  v10 = v9;
  v11 = sub_1001FDA64(v8, v9);
  *(_QWORD *)(v0 + 104) = v11;
  swift_bridgeObjectRelease(v10);
  v12 = sub_1000D16A4();
  v13 = UUID.uuidString.getter(v12);
  v15 = v14;
  v16 = v11;
  v17._countAndFlagsBits = v13;
  v17._object = v15;
  v18.super.isa = CKRecordID.init(recordName:zoneID:)(v17, (CKRecordZoneID)v16).super.isa;
  *(CKRecordID *)(v0 + 112) = v18;
  if (qword_10028ADB8 != -1)
    swift_once(&qword_10028ADB8, sub_100046CE4);
  v19 = *(_QWORD *)(v0 + 88);
  v20 = *(_QWORD *)(v0 + 40);
  v21 = type metadata accessor for Logger(0);
  sub_100005288(v21, (uint64_t)qword_1002A89A8);
  v22 = sub_100027FE8(v20, v19, type metadata accessor for BenefactorInfoRecord);
  v23 = Logger.logObject.getter(v22);
  v25 = static os_log_type_t.default.getter(v24);
  v26 = os_log_type_enabled(v23, v25);
  v27 = *(_QWORD *)(v0 + 88);
  if (v26)
  {
    v28 = *(_QWORD *)(v0 + 72);
    v40 = *(_QWORD *)(v0 + 64);
    v29 = *(_QWORD *)(v0 + 56);
    v42 = v6;
    v30 = swift_slowAlloc(22, -1);
    v41 = swift_slowAlloc(64, -1);
    v43 = v41;
    *(_DWORD *)v30 = 136315394;
    *(_QWORD *)(v0 + 16) = sub_1001DEF4C(0xD000000000000014, 0x800000010020A560, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24);
    *(_WORD *)(v30 + 12) = 2080;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v40 + 16))(v28, v27 + *(int *)(v2 + 28), v29);
    sub_100028388(v27, type metadata accessor for BenefactorInfoRecord);
    v31 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v32 = dispatch thunk of CustomStringConvertible.description.getter(v29, v31);
    v34 = v33;
    (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v28, v29);
    *(_QWORD *)(v0 + 24) = sub_1001DEF4C(v32, v34, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32);
    swift_bridgeObjectRelease(v34);
    _os_log_impl((void *)&_mh_execute_header, v23, v25, "%s recordID:%s one-off record fetch", (uint8_t *)v30, 0x16u);
    swift_arrayDestroy(v41, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v41, -1, -1);
    v35 = v30;
    v6 = v42;
    swift_slowDealloc(v35, -1, -1);
  }
  else
  {
    sub_100028388(*(_QWORD *)(v0 + 88), type metadata accessor for BenefactorInfoRecord);
  }

  v36 = swift_task_alloc(48);
  *(_QWORD *)(v0 + 120) = v36;
  v37 = *(_OWORD *)(v0 + 40);
  *(_QWORD *)(v36 + 16) = v6;
  *(CKRecordID *)(v36 + 24) = v18;
  *(_OWORD *)(v36 + 32) = v37;
  v38 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 128) = v38;
  *v38 = v0;
  v38[1] = sub_1000D0044;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(*(_QWORD *)(v0 + 32), 0, 0, 0x3A5F286863746566, 0xE900000000000029, sub_1000D16E0, v36, *(_QWORD *)(v0 + 80));
}

uint64_t sub_1000D0044()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 128);
  *(_QWORD *)(*v1 + 136) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_1000D010C;
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v2 + 120));
    v4 = sub_1000D00B0;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_1000D00B0()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;

  v1 = *(void **)(v0 + 104);
  v2 = *(_QWORD *)(v0 + 88);
  v3 = *(void **)(v0 + 96);
  v4 = *(_QWORD *)(v0 + 72);

  swift_task_dealloc(v2);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000D010C()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 120);
  v3 = *(void **)(v0 + 96);
  v2 = *(void **)(v0 + 104);
  v4 = *(_QWORD *)(v0 + 88);
  v5 = *(_QWORD *)(v0 + 72);

  swift_task_dealloc(v1);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1000D017C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t (*v18)(_QWORD);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  uint64_t v28;
  id v29;
  void *v30;
  uint64_t v31;
  _QWORD aBlock[5];
  uint64_t v33;

  v30 = a2;
  v31 = a3;
  v8 = sub_1000080B4(&qword_100290A18);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  __chkstk_darwin(v8, v11);
  v12 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for BenefactorInfoRecord(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(_QWORD *)(v14 + 64);
  __chkstk_darwin(v13, v16);
  v17 = (char *)&v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100027FE8(a4, (uint64_t)v17, v18);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, a1, v8);
  v19 = *(unsigned __int8 *)(v14 + 80);
  v20 = (v19 + 16) & ~v19;
  v21 = *(unsigned __int8 *)(v9 + 80);
  v22 = (v15 + v21 + v20) & ~v21;
  v23 = (v10 + v22 + 7) & 0xFFFFFFFFFFFFFFF8;
  v24 = (v23 + 15) & 0xFFFFFFFFFFFFFFF8;
  v25 = swift_allocObject(&unk_100266358, v24 + 8, v19 | v21 | 7);
  sub_10003B730((uint64_t)v17, v25 + v20, type metadata accessor for BenefactorInfoRecord);
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v25 + v22, v12, v8);
  *(_QWORD *)(v25 + v23) = a5;
  v26 = v30;
  *(_QWORD *)(v25 + v24) = v30;
  aBlock[4] = sub_1000D1814;
  v33 = v25;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000ABBFC;
  aBlock[3] = &unk_100266370;
  v27 = _Block_copy(aBlock);
  v28 = v33;
  swift_retain(a5);
  v29 = v26;
  swift_release(v28);
  objc_msgSend(v29, "fetchRecordWithID:completionHandler:", v31, v27);
  _Block_release(v27);
}

uint64_t sub_1000D0364(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t result;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  NSObject *v63;
  os_log_type_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  void (*v76)(char *, uint64_t);
  uint64_t *v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  os_log_t v81;
  uint64_t v82;
  void *v83;
  uint64_t Strong;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  id v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  _QWORD v93[2];
  uint64_t *v94;
  void (*v95)(char *, char *, uint64_t);
  int v96;
  os_log_t v97;
  uint64_t v98;
  id v99;
  uint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108[2];

  v106 = a4;
  v11 = sub_1000080B4(&qword_10028D648);
  __chkstk_darwin(v11, v12);
  v14 = (char *)v93 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v105 = type metadata accessor for UUID(0);
  v103 = *(_QWORD *)(v105 - 8);
  __chkstk_darwin(v105, v15);
  v104 = (char *)v93 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for BenefactorInfoRecord(0);
  v18 = *(_QWORD *)(v17 - 8);
  v20 = __chkstk_darwin(v17, v19);
  v22 = __chkstk_darwin(v20, v21);
  v24 = (char *)v93 - v23;
  v26 = __chkstk_darwin(v22, v25);
  v28 = (char *)v93 - v27;
  v30 = __chkstk_darwin(v26, v29);
  result = __chkstk_darwin(v30, v31);
  v36 = (char *)v93 - v35;
  if (a2)
  {
    v37 = result;
    swift_errorRetain(a2);
    if (qword_10028ADB8 != -1)
      swift_once(&qword_10028ADB8, sub_100046CE4);
    v38 = type metadata accessor for Logger(0);
    sub_100005288(v38, (uint64_t)qword_1002A89A8);
    sub_100027FE8(a3, (uint64_t)v36, type metadata accessor for BenefactorInfoRecord);
    swift_errorRetain(a2);
    v39 = swift_errorRetain(a2);
    v40 = Logger.logObject.getter(v39);
    v41 = static os_log_type_t.error.getter(v40);
    if (os_log_type_enabled(v40, v41))
    {
      v42 = swift_slowAlloc(32, -1);
      v101 = (uint64_t *)swift_slowAlloc(8, -1);
      v102 = swift_slowAlloc(64, -1);
      v108[0] = v102;
      *(_DWORD *)v42 = 136315650;
      v107 = sub_1001DEF4C(0xD000000000000014, 0x800000010020A560, v108);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v107, v108);
      *(_WORD *)(v42 + 12) = 2080;
      v100 = v42 + 14;
      v43 = &v36[*(int *)(v37 + 28)];
      v45 = v103;
      v44 = v104;
      v46 = v105;
      (*(void (**)(char *, char *, uint64_t))(v103 + 16))(v104, v43, v105);
      sub_100028388((uint64_t)v36, type metadata accessor for BenefactorInfoRecord);
      v47 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v48 = dispatch thunk of CustomStringConvertible.description.getter(v46, v47);
      v50 = v49;
      (*(void (**)(char *, uint64_t))(v45 + 8))(v44, v46);
      v107 = sub_1001DEF4C(v48, v50, v108);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v107, v108);
      swift_bridgeObjectRelease(v50);
      *(_WORD *)(v42 + 22) = 2112;
      swift_errorRetain(a2);
      v51 = _swift_stdlib_bridgeErrorToNSError(a2);
      v107 = v51;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v107, v108);
      v52 = v101;
      *v101 = v51;
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      _os_log_impl((void *)&_mh_execute_header, v40, v41, "%s recordID:%s one-off record fetch failed %@", (uint8_t *)v42, 0x20u);
      v53 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v52, 1, v53);
      swift_slowDealloc(v52, -1, -1);
      v54 = v102;
      swift_arrayDestroy(v102, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v54, -1, -1);
      swift_slowDealloc(v42, -1, -1);
    }
    else
    {
      sub_100028388((uint64_t)v36, type metadata accessor for BenefactorInfoRecord);
      swift_errorRelease(a2);
      swift_errorRelease(a2);
    }

    v108[0] = a2;
    v58 = sub_1000080B4(&qword_100290A18);
    return CheckedContinuation.resume(throwing:)(v108, v58);
  }
  else
  {
    v102 = a5;
    if (a1)
    {
      v100 = v33;
      v101 = v34;
      v55 = *(unsigned __int8 *)(a3 + *(int *)(result + 36));
      v56 = result;
      v57 = a1;
      sub_10016E820(v57, v55, (uint64_t)v14);
      v99 = v57;
      v59 = v56;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v14, 0, 1, v56);
      v60 = v101;
      sub_10003B730((uint64_t)v14, (uint64_t)v101, type metadata accessor for BenefactorInfoRecord);
      if (qword_10028ADB8 != -1)
        swift_once(&qword_10028ADB8, sub_100046CE4);
      v61 = type metadata accessor for Logger(0);
      sub_100005288(v61, (uint64_t)qword_1002A89A8);
      sub_100027FE8(a3, (uint64_t)v28, type metadata accessor for BenefactorInfoRecord);
      v62 = sub_100027FE8((uint64_t)v60, (uint64_t)v24, type metadata accessor for BenefactorInfoRecord);
      v63 = Logger.logObject.getter(v62);
      v64 = static os_log_type_t.debug.getter(v63);
      v65 = v64;
      if (os_log_type_enabled(v63, v64))
      {
        v66 = swift_slowAlloc(32, -1);
        v97 = v63;
        v67 = v66;
        v98 = swift_slowAlloc(96, -1);
        v108[0] = v98;
        *(_DWORD *)v67 = 136315650;
        v96 = v65;
        v107 = sub_1001DEF4C(0xD000000000000014, 0x800000010020A560, v108);
        v94 = v108;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v107, v108);
        *(_WORD *)(v67 + 12) = 2080;
        v93[1] = v67 + 14;
        v68 = &v28[*(int *)(v56 + 28)];
        v70 = v103;
        v69 = v104;
        v95 = *(void (**)(char *, char *, uint64_t))(v103 + 16);
        v71 = v105;
        v95(v104, v68, v105);
        sub_100028388((uint64_t)v28, type metadata accessor for BenefactorInfoRecord);
        v72 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v73 = dispatch thunk of CustomStringConvertible.description.getter(v71, v72);
        v75 = v74;
        v76 = *(void (**)(char *, uint64_t))(v70 + 8);
        v76(v69, v71);
        v107 = sub_1001DEF4C(v73, v75, v108);
        v77 = v94;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v107, v94);
        swift_bridgeObjectRelease(v75);
        *(_WORD *)(v67 + 22) = 2080;
        v95(v69, &v24[*(int *)(v59 + 28)], v71);
        sub_100028388((uint64_t)v24, type metadata accessor for BenefactorInfoRecord);
        v78 = dispatch thunk of CustomStringConvertible.description.getter(v71, v72);
        v80 = v79;
        v76(v69, v71);
        v107 = sub_1001DEF4C(v78, v80, v108);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v107, v77);
        swift_bridgeObjectRelease(v80);
        v81 = v97;
        _os_log_impl((void *)&_mh_execute_header, v97, (os_log_type_t)v96, "%s recordID:%s one-off record fetch success newRecordID: %s", (uint8_t *)v67, 0x20u);
        v82 = v98;
        swift_arrayDestroy(v98, 3, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v82, -1, -1);
        swift_slowDealloc(v67, -1, -1);

      }
      else
      {
        sub_100028388((uint64_t)v24, type metadata accessor for BenefactorInfoRecord);
        sub_100028388((uint64_t)v28, type metadata accessor for BenefactorInfoRecord);

      }
      v83 = v99;
      Strong = swift_unknownObjectWeakLoadStrong(v102 + 16);
      if (Strong)
      {
        v85 = Strong;
        v86 = sub_1000080B4(&qword_10028D570);
        v87 = swift_allocObject(v86, 40, 7);
        *(_OWORD *)(v87 + 16) = xmmword_10021A1B0;
        *(_QWORD *)(v87 + 32) = v83;
        v108[0] = v87;
        specialized Array._endMutation()(v87);
        v88 = v108[0];
        v89 = v83;
        sub_1001278F0(a6, v88);
        swift_bridgeObjectRelease(v88);
        swift_unknownObjectRelease(v85);
      }
      v90 = v100;
      v91 = v101;
      sub_100027FE8((uint64_t)v101, v100, type metadata accessor for BenefactorInfoRecord);
      v92 = sub_1000080B4(&qword_100290A18);
      CheckedContinuation.resume(returning:)(v90, v92);

      return sub_100028388((uint64_t)v91, type metadata accessor for BenefactorInfoRecord);
    }
  }
  return result;
}

void sub_1000D0C00(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  _QWORD v15[5];
  uint64_t v16;

  if (qword_10028ADD0 != -1)
    swift_once(&qword_10028ADD0, sub_100046D50);
  v4 = type metadata accessor for Logger(0);
  v5 = sub_100005288(v4, (uint64_t)qword_1002A89F0);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Checking manatee status...", v8, 2u);
    swift_slowDealloc(v8, -1, -1);
  }

  v9 = swift_allocObject(&unk_100266100, 32, 7);
  *(_QWORD *)(v9 + 16) = a1;
  *(_QWORD *)(v9 + 24) = a2;
  v10 = qword_10028AF00;
  swift_retain(a2);
  if (v10 != -1)
    swift_once(&qword_10028AF00, sub_1001FD458);
  if (qword_10028AF10 != -1)
    swift_once(&qword_10028AF10, sub_1001FDD8C);
  v11 = sub_1001FD4C0(qword_1002A8C80, *(unint64_t *)algn_1002A8C88);
  v12 = swift_allocObject(&unk_100266128, 32, 7);
  *(_QWORD *)(v12 + 16) = sub_1000D0E38;
  *(_QWORD *)(v12 + 24) = v9;
  v15[4] = sub_1000D0E44;
  v16 = v12;
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 1107296256;
  v15[2] = sub_100043E24;
  v15[3] = &unk_100266140;
  v13 = _Block_copy(v15);
  v14 = v16;
  swift_retain(v9);
  swift_release(v14);
  objc_msgSend(v11, "accountInfoWithCompletionHandler:", v13);
  _Block_release(v13);
  swift_release(v9);

}

uint64_t sub_1000D0E14()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000D0E38(uint64_t a1, char a2)
{
  uint64_t v2;

  return sub_1000CF284(a1, a2 & 1, *(void (**)(_QWORD, _QWORD))(v2 + 16));
}

void sub_1000D0E44(void *a1, uint64_t a2)
{
  uint64_t v2;

  sub_1001B1AEC(a1, a2, *(void (**)(uint64_t, uint64_t))(v2 + 16));
}

uint64_t sub_1000D0E4C(uint64_t a1)
{
  uint64_t v1;

  return sub_1000CEE94(a1, *(void (**)(_QWORD))(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1000D0E54()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;

  v1 = (int *)type metadata accessor for InheritanceHealthRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release(*(_QWORD *)(v0 + 16));
  v7 = v0 + v4;
  v8 = type metadata accessor for UUID(0);
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8);
  v9(v7, v8);
  v10 = v7 + v1[5];
  v11 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  sub_10000F494(*(_QWORD *)(v7 + v1[6]), *(_QWORD *)(v7 + v1[6] + 8));
  v9(v7 + v1[7], v8);
  sub_10000F494(*(_QWORD *)(v7 + v1[8]), *(_QWORD *)(v7 + v1[8] + 8));
  swift_release(*(_QWORD *)(v0 + v6 + 8));
  return swift_deallocObject(v0, v6 + 16, v5);
}

uint64_t sub_1000D0F58(uint64_t a1)
{
  return sub_1000D1CB4(a1, type metadata accessor for InheritanceHealthRecord, (uint64_t (*)(uint64_t, _QWORD, unint64_t, _QWORD, _QWORD))sub_1001BB1EC);
}

unint64_t *sub_1000D0F6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unint64_t *result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  char *v19;
  uint64_t v20;
  BOOL v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD v24[2];
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t *v29;

  v27 = type metadata accessor for BeneficiaryInfoRecord(0);
  v8 = __chkstk_darwin(v27, v7);
  v28 = (uint64_t)v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8, v10);
  v13 = (char *)v24 - v12;
  result = (unint64_t *)&_swiftEmptyArrayStorage;
  v29 = (unint64_t *)&_swiftEmptyArrayStorage;
  v15 = *(_QWORD *)(a1 + 16);
  if (v15)
  {
    v24[1] = v3;
    v16 = *(_QWORD *)(v11 + 72);
    v26 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
    v17 = a1 + v26;
    v18 = (unint64_t *)&_swiftEmptyArrayStorage;
    v25 = a3;
    do
    {
      sub_100027FE8(v17, (uint64_t)v13, type metadata accessor for BeneficiaryInfoRecord);
      if (a3
        && ((v19 = &v13[*(int *)(v27 + 24)], v20 = *((_QWORD *)v19 + 1), *(_QWORD *)v19 == a2)
          ? (v21 = v20 == a3)
          : (v21 = 0),
            v21 || (_stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)v19, v20, a2, a3, 0) & 1) != 0))
      {
        sub_10003B730((uint64_t)v13, v28, type metadata accessor for BeneficiaryInfoRecord);
        if ((swift_isUniquelyReferenced_nonNull_native(v18) & 1) == 0)
          sub_1001D4CF4(0, v18[2] + 1, 1);
        v18 = v29;
        v23 = v29[2];
        v22 = v29[3];
        if (v23 >= v22 >> 1)
        {
          sub_1001D4CF4(v22 > 1, v23 + 1, 1);
          v18 = v29;
        }
        v18[2] = v23 + 1;
        sub_10003B730(v28, (uint64_t)v18 + v26 + v23 * v16, type metadata accessor for BeneficiaryInfoRecord);
        a3 = v25;
      }
      else
      {
        sub_100028388((uint64_t)v13, type metadata accessor for BeneficiaryInfoRecord);
      }
      v17 += v16;
      --v15;
    }
    while (v15);
    return v29;
  }
  return result;
}

uint64_t sub_1000D1158(uint64_t a1)
{
  uint64_t v1;

  return sub_1000CE758(a1, *(void (**)(_QWORD))(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1000D1164(uint64_t a1, char a2)
{
  uint64_t v2;
  char v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v4 = a2 & 1;
  v5 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = v2 + ((*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  return sub_1000CCC20(a1, v4, v2 + v6, *(void (**)(uint64_t *))v7, *(_QWORD *)(v7 + 8), (uint64_t *)&unk_100295390, type metadata accessor for InheritanceHealthRecord, &qword_10028D588, "Found InheritanceHealthRecord with beneficiaryID: %s", "No InheritanceHealthRecord found with beneficiaryID: %s", "Error fetching InheritanceHealthRecord : %s");
}

uint64_t sub_1000D120C(uint64_t a1, char a2)
{
  uint64_t v2;

  return sub_1000CA528(a1, a2 & 1, *(void (**)(_QWORD, _QWORD))(v2 + 16), *(_QWORD *)(v2 + 24), "Error fetching InheritanceHealthRecords : %s", "Successfully fetched %ld InheritanceHealthRecords.");
}

uint64_t sub_1000D1238(uint64_t a1)
{
  uint64_t v1;

  return sub_1000CDAE4(a1, *(void (**)(_QWORD))(v1 + 16), *(_QWORD *)(v1 + 24), "Error deleting BenefactorInfoRecord : %s", "Successfully deleted BenefactorInfoRecord.");
}

uint64_t sub_1000D1260()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);

  v1 = (int *)type metadata accessor for BenefactorInfoRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release(*(_QWORD *)(v0 + 16));
  v7 = v0 + v4;
  v8 = type metadata accessor for UUID(0);
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8);
  v9(v7, v8);
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[5] + 8));
  v9(v7 + v1[7], v8);
  sub_10000F494(*(_QWORD *)(v7 + v1[8]), *(_QWORD *)(v7 + v1[8] + 8));
  swift_release(*(_QWORD *)(v0 + v6 + 8));
  return swift_deallocObject(v0, v6 + 16, v5);
}

uint64_t sub_1000D1338(uint64_t a1)
{
  return sub_1000D1CB4(a1, type metadata accessor for BenefactorInfoRecord, (uint64_t (*)(uint64_t, _QWORD, unint64_t, _QWORD, _QWORD))sub_1001BB1AC);
}

uint64_t sub_1000D134C(uint64_t a1)
{
  uint64_t v1;

  return sub_1000CB2AC(a1, *(void (**)(uint64_t *))(v1 + 16), *(_QWORD *)(v1 + 24), type metadata accessor for BenefactorInfoRecord, (uint64_t *)&unk_10028FA40, "Error saving BenefactorInfoRecord : %s", "Successfully saved BenefactorInfoRecord.");
}

uint64_t sub_1000D1388(uint64_t a1, char a2)
{
  uint64_t v2;
  char v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v4 = a2 & 1;
  v5 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = v2 + ((*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  return sub_1000CCC20(a1, v4, v2 + v6, *(void (**)(uint64_t *))v7, *(_QWORD *)(v7 + 8), (uint64_t *)&unk_10028FA40, type metadata accessor for BenefactorInfoRecord, &qword_10028D648, "Found BenefactorInfoRecord with beneficiaryID: %s", "No BenefactorInfoRecord found with beneficiaryID: %s", "Error fetching BenefactorInfoRecord : %s");
}

uint64_t sub_1000D1430(uint64_t a1, char a2)
{
  uint64_t v2;

  return sub_1000CA528(a1, a2 & 1, *(void (**)(_QWORD, _QWORD))(v2 + 16), *(_QWORD *)(v2 + 24), "Error fetching BenefactorInfoRecords : %s", "Successfully fetched %ld BenefactorInfoRecords.");
}

uint64_t sub_1000D145C()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);

  v1 = (int *)type metadata accessor for BenefactorInfoRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  v7 = v0 + v4;
  v8 = type metadata accessor for UUID(0);
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8);
  v9(v7, v8);
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[5] + 8));
  v9(v7 + v1[7], v8);
  sub_10000F494(*(_QWORD *)(v7 + v1[8]), *(_QWORD *)(v7 + v1[8] + 8));
  swift_release(*(_QWORD *)(v0 + v6 + 8));
  return swift_deallocObject(v0, v6 + 16, v5);
}

uint64_t sub_1000D153C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v4 = *(_QWORD *)(type metadata accessor for BenefactorInfoRecord(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = v1[2];
  v7 = v1[3];
  v8 = v1[4];
  v9 = (uint64_t)v1 + v5;
  v10 = (_QWORD *)((char *)v1 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  v11 = *v10;
  v12 = v10[1];
  v13 = (_QWORD *)swift_task_alloc(dword_1002909FC);
  *(_QWORD *)(v2 + 16) = v13;
  *v13 = v2;
  v13[1] = sub_1000224D8;
  return sub_1000CBF00(a1, v6, v7, v8, v9, v11, v12);
}

uint64_t sub_1000D15F8(uint64_t a1)
{
  uint64_t v1;

  return sub_1000CFA70(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1000D1600()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = sub_1000080B4(&qword_10028EA88);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1000D1664(uint64_t a1)
{
  sub_1000080B4(&qword_10028EA88);
  return sub_1000E9A30(a1);
}

unint64_t sub_1000D16A4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10028D580;
  if (!qword_10028D580)
  {
    v1 = objc_opt_self(CKRecordID);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10028D580);
  }
  return result;
}

void sub_1000D16E0(uint64_t a1)
{
  uint64_t v1;

  sub_1000D017C(a1, *(void **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t sub_1000D16EC()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t);
  uint64_t v17;

  v1 = (int *)type metadata accessor for BenefactorInfoRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = sub_1000080B4(&qword_100290A18);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v5 + v8) & ~v8;
  v10 = v3 | v8 | 7;
  v11 = (*(_QWORD *)(v7 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  v12 = (v11 + 15) & 0xFFFFFFFFFFFFFFF8;
  v17 = v10;
  v13 = v0 + v4;
  v14 = type metadata accessor for UUID(0);
  v15 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8);
  v15(v13, v14);
  swift_bridgeObjectRelease(*(_QWORD *)(v13 + v1[5] + 8));
  v15(v13 + v1[7], v14);
  sub_10000F494(*(_QWORD *)(v13 + v1[8]), *(_QWORD *)(v13 + v1[8] + 8));
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);
  swift_release(*(_QWORD *)(v0 + v11));

  return swift_deallocObject(v0, v12 + 8, v17);
}

uint64_t sub_1000D1814(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v5 = *(_QWORD *)(type metadata accessor for BenefactorInfoRecord(0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = v6 + *(_QWORD *)(v5 + 64);
  v8 = *(_QWORD *)(sub_1000080B4(&qword_100290A18) - 8);
  v9 = (v7 + *(unsigned __int8 *)(v8 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v10 = (*(_QWORD *)(v8 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_1000D0364(a1, a2, v2 + v6, v2 + v9, *(_QWORD *)(v2 + v10), *(void **)(v2 + ((v10 + 15) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_1000D18B0(uint64_t a1)
{
  uint64_t v1;

  return sub_1000CDAE4(a1, *(void (**)(_QWORD))(v1 + 16), *(_QWORD *)(v1 + 24), "Error deleting BeneficiaryInfoRecord : %s", "Successfully deleted BeneficiaryInfoRecord.");
}

uint64_t sub_1000D18D8()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  unint64_t v11;

  v1 = (int *)type metadata accessor for BeneficiaryInfoRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release(*(_QWORD *)(v0 + 16));
  v6 = v0 + v4;
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v0 + v4, v7);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[5] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[6] + 8));
  sub_10000F494(*(_QWORD *)(v6 + v1[7]), *(_QWORD *)(v6 + v1[7] + 8));
  v9(v0 + v4 + v1[8], v7);
  sub_10000F494(*(_QWORD *)(v6 + v1[9]), *(_QWORD *)(v6 + v1[9] + 8));
  v10 = v0 + v4 + v1[11];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v10, 1, v7))
    v9(v10, v7);
  v11 = (v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[12] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[14] + 8));
  swift_release(*(_QWORD *)(v0 + v11 + 8));
  return swift_deallocObject(v0, v11 + 16, v3 | 7);
}

uint64_t sub_1000D1A24(uint64_t a1)
{
  return sub_1000D1CB4(a1, type metadata accessor for BeneficiaryInfoRecord, (uint64_t (*)(uint64_t, _QWORD, unint64_t, _QWORD, _QWORD))sub_1001BAC6C);
}

uint64_t sub_1000D1A38(uint64_t a1)
{
  uint64_t v1;

  return sub_1000CB2AC(a1, *(void (**)(uint64_t *))(v1 + 16), *(_QWORD *)(v1 + 24), type metadata accessor for BeneficiaryInfoRecord, &qword_100295630, "Error saving BeneficiaryInfoRecord : %s", "Successfully saved BeneficiaryInfoRecord.");
}

uint64_t sub_1000D1A74(uint64_t a1, char a2)
{
  uint64_t v2;
  char v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v4 = a2 & 1;
  v5 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = v2 + ((*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  return sub_1000CCC20(a1, v4, v2 + v6, *(void (**)(uint64_t *))v7, *(_QWORD *)(v7 + 8), &qword_100295630, type metadata accessor for BeneficiaryInfoRecord, &qword_10028D650, "Found BeneficiaryInfoRecord with beneficiaryID: %s", "No BeneficiaryInfoRecord found with beneficiaryID: %s", "Error fetching BeneficiaryInfoRecord : %s");
}

uint64_t sub_1000D1B1C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000D1B48(uint64_t a1, char a2)
{
  uint64_t v2;

  return sub_1000CA528(a1, a2 & 1, *(void (**)(_QWORD, _QWORD))(v2 + 16), *(_QWORD *)(v2 + 24), "Error fetching BeneficiaryInfoRecords : %s", "Successfully fetched %ld BeneficiaryInfoRecords.");
}

uint64_t sub_1000D1B74()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 16))
    swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000D1BA0(uint64_t a1)
{
  uint64_t v1;

  return sub_1000C9F10(a1, *(void (**)(_QWORD))(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_1000D1BA8()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);

  v1 = (int *)type metadata accessor for InheritanceInvitationRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release(*(_QWORD *)(v0 + 16));
  v7 = v0 + v4;
  v8 = type metadata accessor for UUID(0);
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8);
  v9(v7, v8);
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[5] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[7] + 8));
  v9(v7 + v1[9], v8);
  sub_10000F494(*(_QWORD *)(v7 + v1[10]), *(_QWORD *)(v7 + v1[10] + 8));
  swift_release(*(_QWORD *)(v0 + v6 + 8));
  return swift_deallocObject(v0, v6 + 16, v5);
}

uint64_t sub_1000D1CA0(uint64_t a1)
{
  return sub_1000D1CB4(a1, type metadata accessor for InheritanceInvitationRecord, (uint64_t (*)(uint64_t, _QWORD, unint64_t, _QWORD, _QWORD))sub_1001BAC2C);
}

uint64_t sub_1000D1CB4(uint64_t a1, uint64_t (*a2)(_QWORD), uint64_t (*a3)(uint64_t, _QWORD, unint64_t, _QWORD, _QWORD))
{
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;

  v5 = *(_QWORD *)(a2(0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = (_QWORD *)(v3 + ((*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8));
  return a3(a1, *(_QWORD *)(v3 + 16), v3 + v6, *v7, v7[1]);
}

uint64_t sub_1000D1D1C(uint64_t a1)
{
  uint64_t v1;

  return sub_1000CB2AC(a1, *(void (**)(uint64_t *))(v1 + 16), *(_QWORD *)(v1 + 24), type metadata accessor for InheritanceInvitationRecord, (uint64_t *)&unk_10028FA70, "Error saving InheritanceInvitationRecord : %s", "Successfully saved InheritanceInvitationRecord.");
}

uint64_t sub_1000D1D58()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v6 + 8));
  return swift_deallocObject(v0, v6 + 16, v5);
}

uint64_t sub_1000D1DD0(uint64_t a1, char a2)
{
  uint64_t v2;
  char v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v4 = a2 & 1;
  v5 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = v2 + ((*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  return sub_1000C8F70(a1, v4, v2 + v6, *(void (**)(_QWORD))v7, *(_QWORD *)(v7 + 8));
}

uint64_t sub_1000D1E34(uint64_t a1, char a2)
{
  uint64_t v2;

  return sub_1000CA528(a1, a2 & 1, *(void (**)(_QWORD, _QWORD))(v2 + 16), *(_QWORD *)(v2 + 24), "Error fetching InheritanceInvitationRecords : %s", "Successfully fetched %ld InheritanceInvitationRecords.");
}

uint64_t sub_1000D1E98(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  void *v22;
  id v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  void *v34;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  _QWORD v39[5];

  v4 = v3;
  v8 = type metadata accessor for CustodianRecord(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  v12 = __chkstk_darwin(v8, v11);
  v13 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12, v14);
  v16 = (char *)&v36 - v15;
  sub_100006CA4(v4 + 16, (uint64_t)v39);
  v17 = sub_10000732C(v39, v39[3]);
  sub_10002A5C0(a1, (uint64_t)v16);
  sub_10002A5C0((uint64_t)v16, (uint64_t)v13);
  v18 = *(unsigned __int8 *)(v9 + 80);
  v19 = (v18 + 32) & ~v18;
  v20 = (v10 + v19 + 7) & 0xFFFFFFFFFFFFFFF8;
  v21 = swift_allocObject(&unk_100266570, v20 + 8, v18 | 7);
  *(_BYTE *)(v21 + 16) = a3;
  *(_QWORD *)(v21 + 24) = v4;
  sub_10002A7AC((uint64_t)v16, v21 + v19);
  *(_QWORD *)(v21 + v20) = a2;
  v22 = *(void **)(*sub_10000732C((_QWORD *)(*v17 + 16), *(_QWORD *)(*v17 + 40)) + 16);
  swift_retain_n(v4, 2);
  v23 = objc_msgSend(v22, "aa_primaryAppleAccount");
  if (v23)
  {
    v24 = v23;
    sub_100028460(a1, v23, (uint64_t)sub_1000D2D50, v21);
    swift_release(v4);
    swift_release(v21);

  }
  else
  {
    if (qword_10028ADB0 != -1)
      swift_once(&qword_10028ADB0, sub_100046CC8);
    v25 = type metadata accessor for Logger(0);
    v26 = sub_100005288(v25, (uint64_t)qword_1002A8990);
    v27 = Logger.logObject.getter(v26);
    v28 = static os_log_type_t.error.getter(v27);
    if (os_log_type_enabled(v27, v28))
    {
      v29 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v29 = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "Not logged in to AppleAccount, unable to perform cleanup", v29, 2u);
      swift_slowDealloc(v29, -1, -1);
    }

    type metadata accessor for AACustodianError(0);
    v31 = v30;
    v37 = -7002;
    v32 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
    v33 = sub_100041030();
    _BridgedStoredNSError.init(_:userInfo:)(&v38, &v37, v32, v31, v33);
    v34 = v38;
    sub_1000D215C((uint64_t)v38, a3 & 1, v4, (uint64_t)v13, a2);
    swift_release(v4);
    swift_release(v21);

  }
  sub_100028388((uint64_t)v13, type metadata accessor for CustodianRecord);
  return sub_100006F58(v39);
}

void sub_1000D215C(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint8_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if (qword_10028ADB0 != -1)
    swift_once(&qword_10028ADB0, sub_100046CC8);
  v9 = type metadata accessor for Logger(0);
  sub_100005288(v9, (uint64_t)qword_1002A8990);
  swift_errorRetain(a1);
  v10 = swift_errorRetain(a1);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.error.getter(v11);
  if (!os_log_type_enabled(v11, v12))
  {
    swift_errorRelease(a1);
    swift_errorRelease(a1);

    if ((a2 & 1) == 0)
      goto LABEL_11;
    goto LABEL_10;
  }
  v18 = a4;
  v13 = a5;
  v14 = (uint8_t *)swift_slowAlloc(12, -1);
  v15 = (uint64_t *)swift_slowAlloc(8, -1);
  *(_DWORD *)v14 = 138412290;
  if (a1)
  {
    swift_errorRetain(a1);
    v16 = _swift_stdlib_bridgeErrorToNSError(a1);
    v19 = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20);
  }
  else
  {
    v19 = 0;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20);
    v16 = 0;
  }
  *v15 = v16;
  swift_errorRelease(a1);
  swift_errorRelease(a1);
  _os_log_impl((void *)&_mh_execute_header, v11, v12, "Error cleaning up declined custodians %@", v14, 0xCu);
  v17 = sub_1000080B4((uint64_t *)&unk_10028BC20);
  swift_arrayDestroy(v15, 1, v17);
  swift_slowDealloc(v15, -1, -1);
  swift_slowDealloc(v14, -1, -1);

  a5 = v13;
  a4 = v18;
  if ((a2 & 1) != 0)
LABEL_10:
    sub_1000D2394(a4, a5);
LABEL_11:
  sub_1000D2770();
}

uint64_t sub_1000D2394(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *);
  void (*v27)(char *, uint64_t);
  void *v28;
  id v29;
  id v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(char *, uint64_t, uint64_t);
  void (*v42)(char *, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  id v50[5];
  __int128 v51;
  uint64_t v52;

  v48 = a1;
  v3 = type metadata accessor for CustodianRecord(0);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(_QWORD *)(v4 + 64);
  __chkstk_darwin(v3, v6);
  v7 = sub_1000080B4((uint64_t *)&unk_10028CC80);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  v11 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1000080B4(&qword_10028D068);
  v47 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12, v13);
  v15 = (char *)&v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for TrustedContactUserNotification(0);
  result = __chkstk_darwin(v16, v17);
  v20 = (v19 + 15) & 0xFFFFFFFFFFFFFFF0;
  v21 = (char *)&v40 - v20;
  if (a2 == 2)
  {
    v45 = (uint64_t)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
    v46 = result;
    v44 = v4;
    v26 = *(void (**)(char *))(v8 + 16);
    v43 = v49 + OBJC_IVAR____TtC13appleaccountd21DeclinedStatusHandler__cdpRequestController;
    v26(v11);
    Dependency.wrappedValue.getter(&v51, v7);
    v27 = *(void (**)(char *, uint64_t))(v8 + 8);
    v27(v11, v7);
    v28 = *(void **)(*sub_10000732C(&v51, v52) + 16);
    v50[0] = 0;
    v29 = objc_msgSend(v28, "walrusStatus:", v50);
    if (v50[0])
    {
      v30 = v50[0];
      swift_willThrow(v30);

      sub_100006F58(&v51);
    }
    else
    {
      v31 = v29;
      v41 = (void (*)(char *, uint64_t, uint64_t))v26;
      v42 = v27;
      sub_100006F58(&v51);
      if (v31 == (id)1)
      {
        v32 = v45;
        sub_10002A5C0(v48, v45);
        v33 = *(unsigned __int8 *)(v44 + 80);
        v34 = (v33 + 16) & ~v33;
        v35 = (v5 + v34 + 7) & 0xFFFFFFFFFFFFFFF8;
        v36 = swift_allocObject(&unk_100266598, v35 + 8, v33 | 7);
        sub_10002A7AC(v32, v36 + v34);
        v37 = v49;
        *(_QWORD *)(v36 + v35) = v49;
        v41(v11, v43, v7);
        swift_retain(v37);
        Dependency.wrappedValue.getter(&v51, v7);
        v42(v11, v7);
        v38 = *sub_10000732C(&v51, v52);
        swift_retain(v37);
        swift_retain(v36);
        sub_100048F30(v38, (uint64_t (*)(uint64_t, _QWORD))sub_1000D33E4, v36, v37);
        swift_release(v36);
        swift_release(v37);
        sub_100006F58(&v51);
        return swift_release(v36);
      }
    }
    sub_10002A5C0(v48, (uint64_t)v21);
    v23 = v21;
    v24 = v46;
    v25 = 3;
  }
  else
  {
    if (a2 != 1)
      return result;
    v22 = result;
    sub_10002A5C0(v48, (uint64_t)&v40 - v20);
    v23 = v21;
    v24 = v22;
    v25 = 2;
  }
  swift_storeEnumTagMultiPayload(v23, v24, v25);
  v39 = v47;
  (*(void (**)(char *, uint64_t, uint64_t))(v47 + 16))(v15, v49 + OBJC_IVAR____TtC13appleaccountd21DeclinedStatusHandler__notificationManager, v12);
  Dependency.wrappedValue.getter(v50, v12);
  (*(void (**)(char *, uint64_t))(v39 + 8))(v15, v12);
  sub_10000732C(v50, (uint64_t)v50[3]);
  sub_100171484((uint64_t)&v51);
  sub_1001CEA64(&v51);
  sub_100043418((uint64_t)&v51);
  sub_100028388((uint64_t)v21, type metadata accessor for TrustedContactUserNotification);
  return sub_100006F58(v50);
}

void sub_1000D2770()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  NSString v13;
  NSString v14;
  id v15;
  id v16;
  Class isa;
  void *v18;
  id v19;
  id v20;
  _QWORD v22[5];

  v1 = sub_1000080B4(&qword_10028FA50);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  v5 = (char *)&v22[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  static String._unconditionallyBridgeFromObjectiveC(_:)(kAAAnalyticsEventRecoveryContactStatusUpdate);
  v7 = v6;
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v5, v0 + OBJC_IVAR____TtC13appleaccountd21DeclinedStatusHandler__accountStore, v1);
  Dependency.wrappedValue.getter(v22, v1);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  v8 = objc_msgSend(*(id *)(*sub_10000732C(v22, v22[3]) + 16), "aa_primaryAppleAccount");
  if (v8 && (v9 = v8, v10 = objc_msgSend(v8, "aa_altDSID"), v9, v10))
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
    v12 = v11;

  }
  else
  {
    v12 = 0;
  }
  v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v7);
  if (v12)
  {
    v14 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v12);
  }
  else
  {
    v14 = 0;
  }
  v15 = objc_msgSend((id)objc_opt_self(AAFAnalyticsEvent), "analyticsEventWithName:altDSID:flowID:", v13, v14, 0);

  sub_100006F58(v22);
  if (v15)
  {
    v16 = v15;
    isa = Bool._bridgeToObjectiveC()().super.super.isa;
    objc_msgSend(v16, "setObject:forKeyedSubscript:", isa, kAAFDidSucceed);

    v18 = (void *)objc_opt_self(AAAnalyticsRTCReporter);
    v19 = v16;
    v20 = objc_msgSend(v18, "reporter");
    objc_msgSend(v20, "sendEvent:", v19);

  }
}

uint64_t sub_1000D29AC()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;

  sub_100006F58(v0 + 2);
  v1 = (char *)v0 + OBJC_IVAR____TtC13appleaccountd21DeclinedStatusHandler__accountStore;
  v2 = sub_1000080B4(&qword_10028FA50);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  v3 = (char *)v0 + OBJC_IVAR____TtC13appleaccountd21DeclinedStatusHandler__notificationManager;
  v4 = sub_1000080B4(&qword_10028D068);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  v5 = (char *)v0 + OBJC_IVAR____TtC13appleaccountd21DeclinedStatusHandler__cdpRequestController;
  v6 = sub_1000080B4((uint64_t *)&unk_10028CC80);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = (char *)v0 + OBJC_IVAR____TtC13appleaccountd21DeclinedStatusHandler__custodianStorageController;
  v8 = sub_1000080B4(&qword_10028C448);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

uint64_t sub_1000D2A8C()
{
  return type metadata accessor for DeclinedStatusHandler(0);
}

uint64_t type metadata accessor for DeclinedStatusHandler(uint64_t a1)
{
  uint64_t result;

  result = qword_100290A68;
  if (!qword_100290A68)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for DeclinedStatusHandler);
  return result;
}

void sub_1000D2AD0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD v10[5];

  v10[0] = "(";
  sub_100017464(319, (unint64_t *)&qword_100293810, &qword_10028C860);
  if (v3 <= 0x3F)
  {
    v10[1] = *(_QWORD *)(v2 - 8) + 64;
    sub_100017464(319, (unint64_t *)&qword_10028CFD8, &qword_100294AE0);
    if (v5 <= 0x3F)
    {
      v10[2] = *(_QWORD *)(v4 - 8) + 64;
      sub_100017464(319, &qword_10028BDA8, &qword_10028C8D0);
      if (v7 <= 0x3F)
      {
        v10[3] = *(_QWORD *)(v6 - 8) + 64;
        sub_100017464(319, (unint64_t *)&qword_10028C350, &qword_10028C880);
        if (v9 <= 0x3F)
        {
          v10[4] = *(_QWORD *)(v8 - 8) + 64;
          swift_updateClassMetadata2(a1, 256, 5, v10, a1 + 80);
        }
      }
    }
  }
}

uint64_t sub_1000D2BD8(uint64_t a1, uint64_t a2, char a3)
{
  return sub_1000D1E98(a1, a2, a3);
}

uint64_t sub_1000D2BF8()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;

  v1 = (int *)type metadata accessor for CustodianRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release(*(_QWORD *)(v0 + 24));
  v6 = v0 + v4;
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v0 + v4, v7);
  v9(v0 + v4 + v1[5], v7);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[7] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[8] + 8));
  v10 = (uint64_t *)(v0 + v4 + v1[10]);
  v11 = v10[1];
  if (v11 >> 60 != 15)
    sub_10000F494(*v10, v11);
  sub_10000F494(*(_QWORD *)(v6 + v1[11]), *(_QWORD *)(v6 + v1[11] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[13] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[14] + 8));
  v12 = v6 + v1[16];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v12, 1, v7))
    v9(v12, v7);
  return swift_deallocObject(v0, ((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8, v3 | 7);
}

void sub_1000D2D50(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;

  v3 = *(_QWORD *)(type metadata accessor for CustodianRecord(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  sub_1000D215C(a1, *(_BYTE *)(v1 + 16), *(_QWORD *)(v1 + 24), v1 + v4, *(_QWORD *)(v1 + ((*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_1000D2DA8(char a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  _QWORD v21[5];
  __int128 v22[3];

  v8 = sub_1000080B4(&qword_10028D068);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v12 = (char *)&v21[-1] - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for TrustedContactUserNotification(0);
  result = __chkstk_darwin(v13, v14);
  v17 = (v16 + 15) & 0xFFFFFFFFFFFFFFF0;
  v18 = (char *)&v21[-1] - v17;
  if ((a2 & 1) == 0)
  {
    sub_10002A5C0(a3, (uint64_t)&v21[-1] - v17);
    if ((a1 & 1) != 0)
      v19 = 3;
    else
      v19 = 6;
    swift_storeEnumTagMultiPayload(v18, v13, v19);
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, a4 + OBJC_IVAR____TtC13appleaccountd21DeclinedStatusHandler__notificationManager, v8);
    Dependency.wrappedValue.getter(v21, v8);
    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    sub_10000732C(v21, v21[3]);
    sub_100171484((uint64_t)v22);
    sub_1001CEA64(v22);
    sub_100043418((uint64_t)v22);
    sub_100028388((uint64_t)v18, type metadata accessor for TrustedContactUserNotification);
    return sub_100006F58(v21);
  }
  return result;
}

uint64_t sub_1000D2F20(char a1, uint64_t (*a2)(uint64_t, _QWORD), uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  void (*v25)(char *, uint64_t);
  uint64_t (*v26)(uint64_t, _QWORD);
  _QWORD v27[5];

  v26 = a2;
  v7 = type metadata accessor for URL(0);
  v8 = *(_QWORD *)(v7 - 8);
  v10 = __chkstk_darwin(v7, v9);
  v12 = (char *)&v27[-1] - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10, v13);
  v15 = (char *)&v27[-1] - v14;
  v16 = sub_1000080B4(&qword_10028C448);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16, v18);
  v20 = (char *)&v27[-1] - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a1 & 1) != 0)
    return v26(1, 0);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v20, a4 + OBJC_IVAR____TtC13appleaccountd21DeclinedStatusHandler__custodianStorageController, v16);
  Dependency.wrappedValue.getter(v27, v16);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v20, v16);
  v22 = sub_10000732C(v27, v27[3]);
  v23 = swift_allocObject(&unk_1002665C0, 32, 7);
  *(_QWORD *)(v23 + 16) = v26;
  *(_QWORD *)(v23 + 24) = a3;
  v24 = sub_10000732C((_QWORD *)(*v22 + 16), *(_QWORD *)(*v22 + 40));
  type metadata accessor for LocalCache();
  swift_retain(a3);
  sub_10000840C();
  URL.appendingPathComponent(_:isDirectory:)(0x6169646F74737543, 0xEF64726F6365526ELL, 1);
  v25 = *(void (**)(char *, uint64_t))(v8 + 8);
  v25(v12, v7);
  sub_10000732C((_QWORD *)(*v24 + 16), *(_QWORD *)(*v24 + 40));
  sub_10009D320((uint64_t)v15, (uint64_t)sub_1000D3468, v23);
  v25(v15, v7);
  swift_release(v23);
  return sub_100006F58(v27);
}

uint64_t sub_1000D313C(uint64_t a1, char a2, void (*a3)(uint64_t, uint64_t), uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[2];

  v8 = a2 & 1;
  v9 = type metadata accessor for CustodianRecord(0);
  __chkstk_darwin(v9, v10);
  v13 = (char *)v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 1) != 0)
  {
    swift_errorRetain(a1);
  }
  else
  {
    v14 = *(_QWORD *)(a1 + 16);
    if (v14)
    {
      v19[1] = a4;
      v15 = a1 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
      v16 = *(_QWORD *)(v11 + 72);
      swift_bridgeObjectRetain(a1);
      while (1)
      {
        sub_10002A5C0(v15, (uint64_t)v13);
        v17 = *(_QWORD *)&v13[*(int *)(v9 + 36)];
        sub_100028388((uint64_t)v13, type metadata accessor for CustodianRecord);
        if (v17 == 2)
          break;
        v15 += v16;
        if (!--v14)
        {
          sub_1000057B0(a1, 0);
          a1 = 0;
          goto LABEL_10;
        }
      }
      sub_1000057B0(a1, 0);
      a1 = 1;
    }
    else
    {
      a1 = 0;
    }
  }
LABEL_10:
  a3(a1, v8);
  return sub_10006AEB4(a1, v8);
}

uint64_t sub_1000D3284()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;

  v1 = (int *)type metadata accessor for CustodianRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v0 + v4;
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v0 + v4, v7);
  v9(v0 + v4 + v1[5], v7);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[7] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[8] + 8));
  v10 = (uint64_t *)(v0 + v4 + v1[10]);
  v11 = v10[1];
  if (v11 >> 60 != 15)
    sub_10000F494(*v10, v11);
  sub_10000F494(*(_QWORD *)(v6 + v1[11]), *(_QWORD *)(v6 + v1[11] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[13] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[14] + 8));
  v12 = v6 + v1[16];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v12, 1, v7))
    v9(v12, v7);
  v13 = (v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v14 = v13 + 8;
  swift_release(*(_QWORD *)(v0 + v13));
  return swift_deallocObject(v0, v14, v3 | 7);
}

uint64_t sub_1000D33E4(char a1, char a2)
{
  uint64_t v2;
  char v4;
  uint64_t v5;
  unint64_t v6;

  v4 = a2 & 1;
  v5 = *(_QWORD *)(type metadata accessor for CustodianRecord(0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  return sub_1000D2DA8(a1, v4, v2 + v6, *(_QWORD *)(v2 + ((*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_1000D3444()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000D3468(uint64_t a1, char a2)
{
  uint64_t v2;

  return sub_1000D313C(a1, a2 & 1, *(void (**)(uint64_t, uint64_t))(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t sub_1000D3474@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, char *a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t result;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  char *v53;
  unint64_t v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v53 = a5;
  v54 = a4;
  v46 = a6;
  v47 = a2;
  v50 = a1;
  v7 = type metadata accessor for P384.KeyAgreement.PublicKey(0);
  v8 = *(_QWORD *)(v7 - 8);
  v10 = __chkstk_darwin(v7, v9);
  v51 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10, v12);
  v14 = (char *)&v45 - v13;
  v48 = type metadata accessor for HPKE.Sender(0);
  v52 = *(_QWORD *)(v48 - 8);
  __chkstk_darwin(v48, v15);
  v17 = (char *)&v45 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for HPKE.Ciphersuite(0);
  v19 = *(_QWORD *)(v18 - 8);
  v21 = __chkstk_darwin(v18, v20);
  v23 = (char *)&v45 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __chkstk_darwin(v21, v24);
  v27 = (char *)&v45 - v26;
  static HPKE.Ciphersuite.P384_SHA384_AES_GCM_256.getter(v25);
  v49 = v8;
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v14, v53, v7);
  (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v23, v27, v18);
  v28 = a3;
  v29 = a3;
  v30 = v54;
  sub_10000F450(v29, v54);
  v53 = v17;
  v31 = v58;
  v32 = HPKE.Sender.init<A>(recipientKey:ciphersuite:info:)(v14, v23, v28, v30, v7, &protocol witness table for P384.KeyAgreement.PublicKey);
  if (v31)
    return (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v27, v18);
  v35 = v49;
  v34 = v50;
  v58 = v19;
  v36 = v48;
  v56 = HPKE.Sender.encapsulatedKey.getter(v32);
  v57 = v37;
  v38 = v51;
  P384.KeyAgreement.PublicKey.init<A>(x963Representation:)(&v56, &type metadata for Data, &protocol witness table for Data);
  v56 = v34;
  v57 = v47;
  v55 = xmmword_100218E90;
  v39 = sub_1000D3750();
  v40 = HPKE.Sender.seal<A, B>(_:authenticating:)(&v56, &v55, &type metadata for Data, &type metadata for Data, v39, v39);
  v42 = v41;
  (*(void (**)(char *, uint64_t))(v52 + 8))(v53, v36);
  (*(void (**)(char *, uint64_t))(v58 + 8))(v27, v18);
  v43 = type metadata accessor for HPKEEnvelope(0);
  v44 = v46;
  result = (*(uint64_t (**)(char *, char *, uint64_t))(v35 + 32))((char *)v46 + *(int *)(v43 + 20), v38, v7);
  *v44 = v40;
  v44[1] = v42;
  return result;
}

unint64_t sub_1000D3750()
{
  unint64_t result;

  result = qword_100290BF0;
  if (!qword_100290BF0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Data, &type metadata for Data);
    atomic_store(result, (unint64_t *)&qword_100290BF0);
  }
  return result;
}

uint64_t type metadata accessor for HPKEEnvelope(uint64_t a1)
{
  uint64_t result;

  result = qword_100290C50;
  if (!qword_100290C50)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for HPKEEnvelope);
  return result;
}

uint64_t *sub_1000D37D0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v13);
  }
  else
  {
    v7 = *a2;
    v8 = a2[1];
    sub_10000F450(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    v9 = *(int *)(a3 + 20);
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for P384.KeyAgreement.PublicKey(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
  }
  return a1;
}

uint64_t sub_1000D3874(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  sub_10000F494(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for P384.KeyAgreement.PublicKey(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t *sub_1000D38C0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  v6 = *a2;
  v7 = a2[1];
  sub_10000F450(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  v8 = *(int *)(a3 + 20);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for P384.KeyAgreement.PublicKey(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
  return a1;
}

uint64_t *sub_1000D3938(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v6 = *a2;
  v7 = a2[1];
  sub_10000F450(*a2, v7);
  v8 = *a1;
  v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_10000F494(v8, v9);
  v10 = *(int *)(a3 + 20);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for P384.KeyAgreement.PublicKey(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 24))(v11, v12, v13);
  return a1;
}

_OWORD *sub_1000D39B8(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for P384.KeyAgreement.PublicKey(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t *sub_1000D3A14(uint64_t *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  v6 = *a1;
  v7 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_10000F494(v6, v7);
  v8 = *(int *)(a3 + 20);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for P384.KeyAgreement.PublicKey(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t sub_1000D3A84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000D3A90);
}

uint64_t sub_1000D3A90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 12)
  {
    v4 = *(_QWORD *)(a1 + 8) >> 60;
    if (((4 * (_DWORD)v4) & 0xC) != 0)
      return 16 - ((4 * (_DWORD)v4) & 0xC | (v4 >> 2));
    else
      return 0;
  }
  else
  {
    v8 = type metadata accessor for P384.KeyAgreement.PublicKey(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t sub_1000D3B18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000D3B24);
}

char *sub_1000D3B24(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 12)
  {
    *(_QWORD *)result = 0;
    *((_QWORD *)result + 1) = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * (_DWORD)a2) << 60;
  }
  else
  {
    v7 = type metadata accessor for P384.KeyAgreement.PublicKey(0);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t sub_1000D3BA0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = &unk_10021C358;
  result = type metadata accessor for P384.KeyAgreement.PublicKey(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_1000D3C14()
{
  _BYTE *v0;

  if (*v0)
    return 0x6C75737061636E65;
  else
    return 0x6554726568706963;
}

uint64_t sub_1000D3C60@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1000D4378(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000D3C84(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000D4110();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000D3CAC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000D4110();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000D3CD4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD v30[2];
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  unint64_t v38;
  char v39;

  v31 = a2;
  v32 = type metadata accessor for P384.KeyAgreement.PublicKey(0);
  v3 = *(_QWORD *)(v32 - 8);
  __chkstk_darwin(v32, v4);
  v6 = (char *)v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = sub_1000080B4(&qword_100290C88);
  v7 = *(_QWORD *)(v33 - 8);
  __chkstk_darwin(v33, v8);
  v10 = (char *)v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for HPKEEnvelope(0);
  __chkstk_darwin(v11, v12);
  v14 = (char *)v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = a1[3];
  v16 = a1[4];
  v35 = a1;
  sub_10000732C(a1, v15);
  v17 = sub_1000D4110();
  v34 = v10;
  v18 = v36;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for HPKEEnvelope.CodingKeys, &type metadata for HPKEEnvelope.CodingKeys, v17, v15, v16);
  if (v18)
    return sub_100006F58(v35);
  v36 = v14;
  v19 = v6;
  v20 = v32;
  v39 = 0;
  v21 = sub_10000F40C();
  v22 = v33;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v37, &type metadata for Data, &v39, v33, &type metadata for Data, v21);
  v23 = v38;
  v24 = v36;
  v30[0] = v38;
  v30[1] = v37;
  *v36 = v37;
  v24[1] = v23;
  v39 = 1;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v37, &type metadata for Data, &v39, v22, &type metadata for Data, v21);
  v25 = v37;
  v26 = v38;
  sub_10000F450(v37, v38);
  v27 = sub_10008F41C();
  P384.KeyAgreement.PublicKey.init<A>(derRepresentation:)(&v37, &type metadata for Data, v27);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v34, v22);
  sub_10000F494(v25, v26);
  v28 = (uint64_t)v36;
  (*(void (**)(char *, char *, uint64_t))(v3 + 32))((char *)v36 + *(int *)(v11 + 20), v19, v20);
  sub_1000D4154(v28, v31);
  sub_100006F58(v35);
  return sub_1000D4198(v28);
}

uint64_t sub_1000D3F80(_QWORD *a1)
{
  __int128 *v1;
  uint64_t v2;
  __int128 *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v18;
  char v19;
  __int128 v20;

  v3 = v1;
  v5 = sub_1000080B4(&qword_100290C98);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a1[3];
  v11 = a1[4];
  sub_10000732C(a1, v10);
  v12 = sub_1000D4110();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for HPKEEnvelope.CodingKeys, &type metadata for HPKEEnvelope.CodingKeys, v12, v10, v11);
  v20 = *v3;
  v19 = 0;
  v13 = sub_10000F4D8();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v20, &v19, v5, &type metadata for Data, v13);
  if (!v2)
  {
    type metadata accessor for HPKEEnvelope(0);
    v14 = P384.KeyAgreement.PublicKey.derRepresentation.getter();
    v16 = v15;
    *(_QWORD *)&v20 = v14;
    *((_QWORD *)&v20 + 1) = v15;
    v19 = 1;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v20, &v19, v5, &type metadata for Data, v13);
    sub_10000F494(v14, v16);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

uint64_t sub_1000D40E8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000D3CD4(a1, a2);
}

uint64_t sub_1000D40FC(_QWORD *a1)
{
  return sub_1000D3F80(a1);
}

unint64_t sub_1000D4110()
{
  unint64_t result;

  result = qword_100290C90;
  if (!qword_100290C90)
  {
    result = swift_getWitnessTable(&unk_10021C484, &type metadata for HPKEEnvelope.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100290C90);
  }
  return result;
}

uint64_t sub_1000D4154(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for HPKEEnvelope(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000D4198(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for HPKEEnvelope(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t storeEnumTagSinglePayload for HPKEEnvelope.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1000D4220 + 4 * byte_10021C335[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1000D4254 + 4 * byte_10021C330[v4]))();
}

uint64_t sub_1000D4254(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000D425C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000D4264);
  return result;
}

uint64_t sub_1000D4270(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000D4278);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1000D427C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000D4284(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for HPKEEnvelope.CodingKeys()
{
  return &type metadata for HPKEEnvelope.CodingKeys;
}

unint64_t sub_1000D42A4()
{
  unint64_t result;

  result = qword_100290CA0;
  if (!qword_100290CA0)
  {
    result = swift_getWitnessTable(&unk_10021C45C, &type metadata for HPKEEnvelope.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100290CA0);
  }
  return result;
}

unint64_t sub_1000D42EC()
{
  unint64_t result;

  result = qword_100290CA8;
  if (!qword_100290CA8)
  {
    result = swift_getWitnessTable(&unk_10021C3CC, &type metadata for HPKEEnvelope.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100290CA8);
  }
  return result;
}

unint64_t sub_1000D4334()
{
  unint64_t result;

  result = qword_100290CB0;
  if (!qword_100290CB0)
  {
    result = swift_getWitnessTable(&unk_10021C3F4, &type metadata for HPKEEnvelope.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100290CB0);
  }
  return result;
}

uint64_t sub_1000D4378(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;

  if (a1 == 0x6554726568706963 && a2 == 0xEA00000000007478)
  {
    v5 = 0xEA00000000007478;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6554726568706963, 0xEA00000000007478, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6C75737061636E65 && a2 == 0xEF79654B64657461)
  {
    swift_bridgeObjectRelease(0xEF79654B64657461);
    return 1;
  }
  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6C75737061636E65, 0xEF79654B64657461, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_1000D4498(uint64_t a1, void *a2, uint64_t a3)
{
  return sub_1000D4558(a1, a2, a3, type metadata accessor for BeneficiaryRemovedMessage, &qword_100290008, (uint64_t)&unk_10021B7E4);
}

uint64_t sub_1000D44F8(uint64_t a1, void *a2, uint64_t a3)
{
  return sub_1000D4558(a1, a2, a3, type metadata accessor for InheritanceInvitationResponseMessage, &qword_100290E20, (uint64_t)&unk_10022094C);
}

uint64_t sub_1000D4558(uint64_t a1, void *a2, uint64_t a3, uint64_t (*a4)(uint64_t), unint64_t *a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  NSString v21;
  uint64_t v22;
  uint64_t v24;
  unint64_t v25;
  Class isa;
  uint64_t v27;
  uint64_t v28;
  id v29;
  id v30;
  Class v31;
  Class v32;
  id v33;
  id v34;
  id v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  id v42;

  v41 = a3;
  v40 = type metadata accessor for UUID(0);
  v12 = *(_QWORD *)(v40 - 8);
  __chkstk_darwin(v40, v13);
  v15 = (char *)&v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_1000DED94(a1, a4, a5, a6);
  if (v17 >> 60 == 15)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(AAMessagingErrorDomain);
    v19 = v18;
    v20 = objc_allocWithZone((Class)NSError);
    v21 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v19);
    objc_msgSend(v20, "initWithDomain:code:userInfo:", v21, 4, 0);

    return swift_willThrow(v22);
  }
  else
  {
    v24 = v16;
    v25 = v17;
    v39 = *(id *)(v6 + 16);
    isa = Data._bridgeToObjectiveC()().super.isa;
    v27 = sub_1000080B4(&qword_10028D570);
    v28 = swift_allocObject(v27, 40, 7);
    *(_OWORD *)(v28 + 16) = xmmword_10021A1B0;
    *(_QWORD *)(v28 + 32) = a2;
    v42 = (id)v28;
    specialized Array._endMutation()(v28);
    v29 = v42;
    sub_1000067D4(0, (unint64_t *)&qword_10028E140, AAMessagingDestination_ptr);
    v30 = a2;
    v31 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v29);
    sub_1000067D4(0, &qword_10028FB98, AAMessagingCapability_ptr);
    sub_1000DF698();
    v32 = Set._bridgeToObjectiveC()().super.isa;
    v42 = 0;
    v33 = objc_msgSend(v39, "sendMessage:destinations:responseIdentifier:fireAndForget:requiredCapabilities:lackingCapabilities:error:", isa, v31, 0, 0, v32, 0, &v42);

    v34 = v42;
    if (v33)
    {
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v33);
      v35 = v34;
      sub_1000144D8(v24, v25);

      return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, v40);
    }
    else
    {
      v36 = v42;
      _convertNSErrorToError(_:)(v34);

      swift_willThrow(v37);
      return sub_1000144D8(v24, v25);
    }
  }
}

uint64_t sub_1000D4820(uint64_t a1, void *a2, uint64_t a3)
{
  return sub_1000D4558(a1, a2, a3, type metadata accessor for InheritanceInvitationMessage, &qword_100290E18, (uint64_t)&unk_100220314);
}

uint64_t sub_1000D4880(uint64_t a1, void *a2, uint64_t a3)
{
  return sub_1000D4558(a1, a2, a3, type metadata accessor for InheritanceAccessKeyMessage, &qword_100290758, (uint64_t)&unk_10021C084);
}

uint64_t sub_1000D48E0()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  uint64_t v3;

  v3 = type metadata accessor for BeneficiaryHealthCheck(0);
  v0 = sub_1000080B4(&qword_100290E00);
  result = String.init<A>(describing:)(&v3, v0);
  qword_100290CB8 = result;
  unk_100290CC0 = v2;
  return result;
}

void sub_1000D4928(uint64_t a1, char a2, uint64_t a3, void (*a4)(_QWORD), uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t Strong;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  _BOOL4 v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint8_t *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  NSObject *v57;
  os_log_type_t v58;
  uint8_t *v59;
  uint64_t v60;
  uint64_t v61;
  NSObject *v62;
  os_log_type_t v63;
  uint8_t *v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  NSObject *v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  void *v78;
  _QWORD *v79;
  uint64_t v80;
  void *v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  char *v87;
  uint64_t v88;
  NSObject *v89;
  os_log_type_t v90;
  uint8_t *v91;
  uint64_t v92;
  uint64_t v93;
  os_log_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  void (*v100)(_QWORD);
  char *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t aBlock[5];
  _QWORD *v107;
  _QWORD *v108;
  _BYTE v109[32];

  v12 = type metadata accessor for DispatchWorkItemFlags(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12, v14);
  v16 = (char *)&v92 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for DispatchQoS(0);
  v105 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17, v18);
  v104 = (char *)&v92 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for DispatchQoS.QoSClass(0);
  v102 = *(_QWORD *)(v20 - 8);
  v103 = v20;
  __chkstk_darwin(v20, v21);
  v101 = (char *)&v92 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  a3 += 16;
  swift_beginAccess(a3, v109, 0, 0);
  Strong = swift_weakLoadStrong(a3);
  if (Strong)
  {
    v24 = (_QWORD *)Strong;
    if ((a2 & 1) != 0)
    {
      swift_errorRetain(a1);
      if (qword_10028ADD8 != -1)
        swift_once(&qword_10028ADD8, sub_100046D78);
      v43 = type metadata accessor for Logger(0);
      v44 = sub_100005288(v43, (uint64_t)qword_1002A8A08);
      swift_errorRetain(a1);
      v45 = swift_errorRetain(a1);
      v105 = v44;
      v46 = Logger.logObject.getter(v45);
      v47 = static os_log_type_t.error.getter(v46);
      if (os_log_type_enabled(v46, v47))
      {
        v99 = a5;
        v100 = a4;
        v48 = swift_slowAlloc(22, -1);
        v49 = swift_slowAlloc(64, -1);
        aBlock[0] = v49;
        *(_DWORD *)v48 = 136315394;
        v108 = (_QWORD *)a1;
        swift_errorRetain(a1);
        v50 = sub_1000080B4(&qword_10028E850);
        v51 = String.init<A>(describing:)(&v108, v50);
        v53 = v52;
        v108 = (_QWORD *)sub_1001DEF4C(v51, v52, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v108, v109);
        swift_bridgeObjectRelease(v53);
        sub_1000057B0(a1, 1);
        sub_1000057B0(a1, 1);
        *(_WORD *)(v48 + 12) = 2080;
        if (qword_10028AE68 != -1)
          swift_once(&qword_10028AE68, sub_1000D48E0);
        v55 = qword_100290CB8;
        v54 = unk_100290CC0;
        swift_bridgeObjectRetain(unk_100290CC0);
        v108 = (_QWORD *)sub_1001DEF4C(v55, v54, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v108, v109);
        swift_bridgeObjectRelease(v54);
        _os_log_impl((void *)&_mh_execute_header, v46, v47, "Fetching beneficiaries error: %s. Aborting %s", (uint8_t *)v48, 0x16u);
        swift_arrayDestroy(v49, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v49, -1, -1);
        swift_slowDealloc(v48, -1, -1);

        a4 = v100;
      }
      else
      {
        sub_1000057B0(a1, 1);
        sub_1000057B0(a1, 1);

      }
      if (*(_QWORD *)(*(_QWORD *)((char *)v24
                                 + OBJC_IVAR____TtC13appleaccountd22BeneficiaryHealthCheck_idMSBeneficiaryCryptoData)
                     + 16))
      {
        v57 = Logger.logObject.getter(v56);
        v58 = static os_log_type_t.error.getter(v57);
        if (os_log_type_enabled(v57, v58))
        {
          v59 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v59 = 0;
          _os_log_impl((void *)&_mh_execute_header, v57, v58, "idMS has MORE number of beneficiaries registered.", v59, 2u);
          swift_slowDealloc(v59, -1, -1);
        }

      }
      swift_errorRetain(a1);
      a4(a1);
      swift_release(v24);
      sub_1000057B0(a1, 1);
      sub_1000057B0(a1, 1);
    }
    else
    {
      v98 = v17;
      v25 = *(_QWORD *)(a1 + 16);
      if (v25)
      {
        v100 = a4;
        if (qword_10028ADD8 != -1)
          swift_once(&qword_10028ADD8, sub_100046D78);
        v97 = v12;
        v99 = a5;
        v26 = type metadata accessor for Logger(0);
        sub_100005288(v26, (uint64_t)qword_1002A8A08);
        swift_bridgeObjectRetain(a1);
        v28 = Logger.logObject.getter(v27);
        v29 = static os_log_type_t.info.getter();
        v30 = os_log_type_enabled(v28, v29);
        v96 = v13;
        v95 = v16;
        if (v30)
        {
          v94 = v28;
          v31 = swift_slowAlloc(22, -1);
          v93 = swift_slowAlloc(32, -1);
          aBlock[0] = v93;
          *(_DWORD *)v31 = 136315394;
          if (qword_10028AE68 != -1)
            swift_once(&qword_10028AE68, sub_1000D48E0);
          v33 = qword_100290CB8;
          v32 = unk_100290CC0;
          swift_bridgeObjectRetain(unk_100290CC0);
          v108 = (_QWORD *)sub_1001DEF4C(v33, v32, aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v108, v109);
          swift_bridgeObjectRelease(v32);
          *(_WORD *)(v31 + 12) = 2048;
          v108 = (_QWORD *)v25;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v108, v109);
          sub_1000057B0(a1, 0);
          v28 = v94;
          _os_log_impl((void *)&_mh_execute_header, v94, v29, "%s - performing health check on %ld beneficiaries", (uint8_t *)v31, 0x16u);
          v34 = v93;
          swift_arrayDestroy(v93, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v34, -1, -1);
          swift_slowDealloc(v31, -1, -1);
        }
        else
        {
          sub_1000057B0(a1, 0);
        }

        v69 = dispatch_group_create();
        v70 = (_QWORD *)sub_1000DEFAC(*(_QWORD *)(*(_QWORD *)((char *)v24+ OBJC_IVAR____TtC13appleaccountd22BeneficiaryHealthCheck_idMSBeneficiaryCryptoData)+ 16), v25);
        v71 = swift_allocObject(&unk_100266820, 24, 7);
        *(_QWORD *)(v71 + 16) = 0;
        v72 = *(_QWORD *)(type metadata accessor for BeneficiaryInfoRecord(0) - 8);
        v73 = a1 + ((*(unsigned __int8 *)(v72 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v72 + 80));
        v74 = *(_QWORD *)(v72 + 72);
        swift_bridgeObjectRetain(a1);
        do
        {
          sub_1000D54E0(v73, v24, v70, v69, v71, a6);
          v73 += v74;
          --v25;
        }
        while (v25);
        sub_1000057B0(a1, 0);
        sub_1000067D4(0, (unint64_t *)&qword_100295A10, OS_dispatch_queue_ptr);
        v76 = v101;
        v75 = v102;
        v77 = v103;
        (*(void (**)(char *, _QWORD, uint64_t))(v102 + 104))(v101, enum case for DispatchQoS.QoSClass.default(_:), v103);
        v78 = (void *)static OS_dispatch_queue.global(qos:)(v76);
        (*(void (**)(char *, uint64_t))(v75 + 8))(v76, v77);
        v79 = (_QWORD *)swift_allocObject(&unk_100266848, 40, 7);
        v80 = v99;
        v79[2] = v100;
        v79[3] = v80;
        v79[4] = v71;
        aBlock[4] = (uint64_t)sub_100043394;
        v107 = v79;
        aBlock[0] = (uint64_t)_NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        aBlock[2] = (uint64_t)sub_1000051D0;
        aBlock[3] = (uint64_t)&unk_100266860;
        v81 = _Block_copy(aBlock);
        swift_retain(v80);
        v82 = swift_retain(v71);
        v83 = v104;
        static DispatchQoS.unspecified.getter(v82);
        v108 = _swiftEmptyArrayStorage;
        v84 = sub_100005150((unint64_t *)&qword_10028CD20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
        v85 = sub_1000080B4((uint64_t *)&unk_100295A00);
        v86 = sub_100008628();
        v87 = v95;
        v88 = v97;
        dispatch thunk of SetAlgebra.init<A>(_:)(&v108, v85, v86, v97, v84);
        OS_dispatch_group.notify(qos:flags:queue:execute:)(v83, v87, v78, v81);

        _Block_release(v81);
        swift_release(v24);

        (*(void (**)(char *, uint64_t))(v96 + 8))(v87, v88);
        (*(void (**)(char *, uint64_t))(v105 + 8))(v83, v98);
        v24 = v107;
        swift_release(v71);
      }
      else
      {
        if (qword_10028ADD8 != -1)
          swift_once(&qword_10028ADD8, sub_100046D78);
        v60 = type metadata accessor for Logger(0);
        v61 = sub_100005288(v60, (uint64_t)qword_1002A8A08);
        v62 = Logger.logObject.getter(v61);
        v63 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v62, v63))
        {
          v100 = a4;
          v64 = (uint8_t *)swift_slowAlloc(12, -1);
          v65 = swift_slowAlloc(32, -1);
          aBlock[0] = v65;
          *(_DWORD *)v64 = 136315138;
          if (qword_10028AE68 != -1)
            swift_once(&qword_10028AE68, sub_1000D48E0);
          v66 = qword_100290CB8;
          v67 = unk_100290CC0;
          swift_bridgeObjectRetain(unk_100290CC0);
          v108 = (_QWORD *)sub_1001DEF4C(v66, v67, aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v108, v109);
          swift_bridgeObjectRelease(v67);
          _os_log_impl((void *)&_mh_execute_header, v62, v63, "%s - no beneficiaries found. Skipping Beneficiary Health Check", v64, 0xCu);
          swift_arrayDestroy(v65, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v65, -1, -1);
          swift_slowDealloc(v64, -1, -1);

          a4 = v100;
        }
        else
        {

        }
        if (*(_QWORD *)(*(_QWORD *)((char *)v24
                                   + OBJC_IVAR____TtC13appleaccountd22BeneficiaryHealthCheck_idMSBeneficiaryCryptoData)
                       + 16))
        {
          v89 = Logger.logObject.getter(v68);
          v90 = static os_log_type_t.error.getter(v89);
          if (os_log_type_enabled(v89, v90))
          {
            v91 = (uint8_t *)swift_slowAlloc(2, -1);
            *(_WORD *)v91 = 0;
            _os_log_impl((void *)&_mh_execute_header, v89, v90, "idMS has MORE number of beneficiaries registered.", v91, 2u);
            swift_slowDealloc(v91, -1, -1);
          }

        }
        a4(0);
      }
      swift_release(v24);
    }
  }
  else
  {
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v35 = type metadata accessor for Logger(0);
    v36 = sub_100005288(v35, (uint64_t)qword_1002A8A08);
    v37 = Logger.logObject.getter(v36);
    v38 = static os_log_type_t.error.getter(v37);
    if (os_log_type_enabled(v37, v38))
    {
      v39 = (uint8_t *)swift_slowAlloc(12, -1);
      v40 = swift_slowAlloc(32, -1);
      aBlock[0] = v40;
      *(_DWORD *)v39 = 136315138;
      if (qword_10028AE68 != -1)
        swift_once(&qword_10028AE68, sub_1000D48E0);
      v41 = qword_100290CB8;
      v42 = unk_100290CC0;
      swift_bridgeObjectRetain(unk_100290CC0);
      v108 = (_QWORD *)sub_1001DEF4C(v41, v42, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v108, v109);
      swift_bridgeObjectRelease(v42);
      _os_log_impl((void *)&_mh_execute_header, v37, v38, "%s - Self is nil. Aborting.", v39, 0xCu);
      swift_arrayDestroy(v40, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v40, -1, -1);
      swift_slowDealloc(v39, -1, -1);
    }

  }
}

void sub_1000D54E0(uint64_t a1, _QWORD *a2, _QWORD *a3, NSObject *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  id v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  dispatch_group_t v49;
  NSObject *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  NSObject *v55;
  os_log_type_t v56;
  uint64_t v57;
  uint8_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint8_t *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  _QWORD *v77;
  dispatch_group_t v78;
  uint64_t v79[5];
  uint64_t v80;
  uint64_t v81;

  v76 = a1;
  v73 = a6;
  v74 = a5;
  v78 = a4;
  v75 = a3;
  v7 = type metadata accessor for BeneficiaryInfoRecord(0);
  v70 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7, v8);
  v67 = (char *)&v67 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71 = v10;
  __chkstk_darwin(v9, v11);
  v72 = (uint64_t)&v67 - v12;
  v13 = sub_1000080B4(&qword_10028C078);
  v68 = *(_QWORD *)(v13 - 8);
  v69 = v13;
  __chkstk_darwin(v13, v14);
  v16 = (char *)&v67 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_1000080B4(&qword_10028C080);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17, v19);
  v21 = (char *)&v67 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_1000080B4((uint64_t *)&unk_10028E7D0);
  v23 = *(_QWORD *)(v22 - 8);
  __chkstk_darwin(v22, v24);
  v26 = (char *)&v67 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v77 = a2;
  (*(void (**)(char *, uint64_t, uint64_t))(v23 + 16))(v26, (uint64_t)a2 + OBJC_IVAR____TtC13appleaccountd22BeneficiaryHealthCheck__analyticsEventFactory, v22);
  Dependency.wrappedValue.getter(v79, v22);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v26, v22);
  v27 = objc_allocWithZone((Class)type metadata accessor for InheritanceHealthCheckAnalyticsEvent(0));
  v28 = (_QWORD *)sub_1001A3F78();
  sub_100006F58(v79);
  *(_QWORD *)((char *)v28 + qword_100296608) = v75;
  dispatch_group_enter(v78);
  v29 = *(int *)(v7 + 20);
  v30 = v76;
  if (*(_QWORD *)(v76 + v29 + 8))
  {
    v31 = v77;
    (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v21, (char *)v77 + OBJC_IVAR____TtC13appleaccountd22BeneficiaryHealthCheck__beneficiaryInfoVerificationProtocol, v17);
    Dependency.wrappedValue.getter(v79, v17);
    (*(void (**)(char *, uint64_t))(v18 + 8))(v21, v17);
    v32 = sub_10000732C(v79, v79[3]);
    v33 = v31;
    v34 = *(_QWORD *)((char *)v31 + OBJC_IVAR____TtC13appleaccountd22BeneficiaryHealthCheck_idMSBeneficiaryCryptoData);
    v36 = v68;
    v35 = v69;
    (*(void (**)(char *, uint64_t, uint64_t))(v68 + 16))(v16, (uint64_t)v33 + OBJC_IVAR____TtC13appleaccountd22BeneficiaryHealthCheck__securityController, v69);
    swift_bridgeObjectRetain(v34);
    Dependency.wrappedValue.getter(&v80, v35);
    (*(void (**)(char *, uint64_t))(v36 + 8))(v16, v35);
    v37 = (void *)v80;
    v38 = *v32;
    v75 = v28;
    v39 = v73;
    sub_1001D3BA8(v30, v34, v37, v38, (uint64_t)v75, (uint64_t)&off_10026D230, v73);
    swift_bridgeObjectRelease(v34);
    swift_unknownObjectRelease(v37);
    sub_100006F58(v79);
    v40 = v72;
    sub_100027FE8(v30, v72, type metadata accessor for BeneficiaryInfoRecord);
    v41 = *(unsigned __int8 *)(v70 + 80);
    v42 = (v41 + 16) & ~v41;
    v43 = (v71 + v42 + 7) & 0xFFFFFFFFFFFFFFF8;
    v44 = (v43 + 15) & 0xFFFFFFFFFFFFFFF8;
    v45 = (v44 + 15) & 0xFFFFFFFFFFFFFFF8;
    v46 = v28;
    v47 = swift_allocObject(&unk_100266898, v45 + 8, v41 | 7);
    sub_10003B730(v40, v47 + v42, type metadata accessor for BeneficiaryInfoRecord);
    v48 = v74;
    *(_QWORD *)(v47 + v43) = v74;
    v49 = v78;
    *(_QWORD *)(v47 + v44) = v78;
    *(_QWORD *)(v47 + v45) = v39;
    swift_retain(v48);
    v50 = v49;
    sub_1000DDFD8(v30, v75, (uint64_t)sub_1000DF350, v47, v77);
    v51 = v47;
    v28 = v46;
    swift_release(v51);
  }
  else
  {
    v52 = (uint64_t)v67;
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v53 = type metadata accessor for Logger(0);
    sub_100005288(v53, (uint64_t)qword_1002A8A08);
    v54 = sub_100027FE8(v30, v52, type metadata accessor for BeneficiaryInfoRecord);
    v55 = Logger.logObject.getter(v54);
    v56 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v55, v56))
    {
      v57 = swift_slowAlloc(12, -1);
      v77 = v28;
      v58 = (uint8_t *)v57;
      v59 = v52;
      v60 = swift_slowAlloc(32, -1);
      v79[0] = v60;
      *(_DWORD *)v58 = 136315138;
      v61 = type metadata accessor for UUID(0);
      v62 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v63 = dispatch thunk of CustomStringConvertible.description.getter(v61, v62);
      v65 = v64;
      v80 = sub_1001DEF4C(v63, v64, v79);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v80, &v81);
      swift_bridgeObjectRelease(v65);
      sub_100028388(v59, type metadata accessor for BeneficiaryInfoRecord);
      _os_log_impl((void *)&_mh_execute_header, v55, v56, "Handle is nil. BeneficiaryID:%s does not require health check", v58, 0xCu);
      swift_arrayDestroy(v60, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v60, -1, -1);
      v66 = v58;
      v28 = v77;
      swift_slowDealloc(v66, -1, -1);
    }
    else
    {
      sub_100028388(v52, type metadata accessor for BeneficiaryInfoRecord);
    }

    dispatch_group_leave(v78);
    sub_1001A407C(0);
  }

}

void sub_1000D5A5C(uint64_t a1, uint64_t a2, uint64_t a3, NSObject *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  uint64_t v37[3];
  uint64_t v38;
  uint64_t v39;

  v8 = type metadata accessor for BeneficiaryInfoRecord(0);
  __chkstk_darwin(v8, v9);
  v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    swift_errorRetain(a1);
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v12 = (uint64_t *)(a3 + 16);
    v13 = type metadata accessor for Logger(0);
    sub_100005288(v13, (uint64_t)qword_1002A8A08);
    v14 = sub_100027FE8(a2, (uint64_t)v11, type metadata accessor for BeneficiaryInfoRecord);
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.error.getter(v15);
    if (os_log_type_enabled(v15, v16))
    {
      v36 = a4;
      v17 = swift_slowAlloc(22, -1);
      v35 = swift_slowAlloc(64, -1);
      v37[0] = v35;
      *(_DWORD *)v17 = 136315394;
      if (qword_10028AE68 != -1)
        swift_once(&qword_10028AE68, sub_1000D48E0);
      v19 = qword_100290CB8;
      v18 = unk_100290CC0;
      swift_bridgeObjectRetain(unk_100290CC0);
      v38 = sub_1001DEF4C(v19, v18, v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39);
      swift_bridgeObjectRelease(v18);
      *(_WORD *)(v17 + 12) = 2080;
      v20 = type metadata accessor for UUID(0);
      v21 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v22 = dispatch thunk of CustomStringConvertible.description.getter(v20, v21);
      v24 = v23;
      v38 = sub_1001DEF4C(v22, v23, v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39);
      swift_bridgeObjectRelease(v24);
      sub_100028388((uint64_t)v11, type metadata accessor for BeneficiaryInfoRecord);
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "%s - failed for beneficiary - %s", (uint8_t *)v17, 0x16u);
      v25 = v35;
      swift_arrayDestroy(v35, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v25, -1, -1);
      swift_slowDealloc(v17, -1, -1);

      a4 = v36;
    }
    else
    {
      sub_100028388((uint64_t)v11, type metadata accessor for BeneficiaryInfoRecord);

    }
    swift_beginAccess(v12, v37, 1, 0);
    v34 = *v12;
    *v12 = a1;
    swift_errorRelease(v34);
  }
  else
  {
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v26 = type metadata accessor for Logger(0);
    v27 = sub_100005288(v26, (uint64_t)qword_1002A8A08);
    v28 = Logger.logObject.getter(v27);
    v29 = static os_log_type_t.debug.getter(v28);
    if (os_log_type_enabled(v28, v29))
    {
      v30 = (uint8_t *)swift_slowAlloc(12, -1);
      v31 = swift_slowAlloc(32, -1);
      v37[0] = v31;
      *(_DWORD *)v30 = 136315138;
      if (qword_10028AE68 != -1)
        swift_once(&qword_10028AE68, sub_1000D48E0);
      v32 = qword_100290CB8;
      v33 = unk_100290CC0;
      swift_bridgeObjectRetain(unk_100290CC0);
      v38 = sub_1001DEF4C(v32, v33, v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39);
      swift_bridgeObjectRelease(v33);
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "%s completed.", v30, 0xCu);
      swift_arrayDestroy(v31, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v31, -1, -1);
      swift_slowDealloc(v30, -1, -1);
    }

  }
  dispatch_group_leave(a4);
}

uint64_t sub_1000D5EA4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = v0 + OBJC_IVAR____TtC13appleaccountd22BeneficiaryHealthCheck__cloudStorage;
  v2 = sub_1000080B4(&qword_10028E8C0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  v3 = v0 + OBJC_IVAR____TtC13appleaccountd22BeneficiaryHealthCheck__inheritanceStorage;
  v4 = sub_1000080B4((uint64_t *)&unk_100295380);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  v5 = v0 + OBJC_IVAR____TtC13appleaccountd22BeneficiaryHealthCheck__securityController;
  v6 = sub_1000080B4(&qword_10028C078);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = v0 + OBJC_IVAR____TtC13appleaccountd22BeneficiaryHealthCheck__accessKeyRepairHandler;
  v8 = sub_1000080B4(&qword_10028D828);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = v0 + OBJC_IVAR____TtC13appleaccountd22BeneficiaryHealthCheck__accountStore;
  v10 = sub_1000080B4(&qword_10028FA50);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  v11 = v0 + OBJC_IVAR____TtC13appleaccountd22BeneficiaryHealthCheck__akAccountManager;
  v12 = sub_1000080B4(&qword_10028C060);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
  v13 = v0 + OBJC_IVAR____TtC13appleaccountd22BeneficiaryHealthCheck__analyticsEventFactory;
  v14 = sub_1000080B4((uint64_t *)&unk_10028E7D0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
  v15 = v0 + OBJC_IVAR____TtC13appleaccountd22BeneficiaryHealthCheck__beneficiaryInfoVerificationProtocol;
  v16 = sub_1000080B4(&qword_10028C080);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v15, v16);
  swift_bridgeObjectRelease(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC13appleaccountd22BeneficiaryHealthCheck_idMSBeneficiaryCryptoData));
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1000D603C()
{
  return type metadata accessor for BeneficiaryHealthCheck(0);
}

uint64_t type metadata accessor for BeneficiaryHealthCheck(uint64_t a1)
{
  uint64_t result;

  result = qword_100290D38;
  if (!qword_100290D38)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for BeneficiaryHealthCheck);
  return result;
}

void sub_1000D6080(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD v18[9];

  sub_100017464(319, &qword_10028C8B8, (uint64_t *)&unk_10028C8C0);
  if (v3 <= 0x3F)
  {
    v18[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_100017464(319, (unint64_t *)&qword_1002954D0, &qword_100294B10);
    if (v5 <= 0x3F)
    {
      v18[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_100017464(319, qword_1002954E0, &qword_100295290);
      if (v7 <= 0x3F)
      {
        v18[2] = *(_QWORD *)(v6 - 8) + 64;
        sub_100017464(319, (unint64_t *)&qword_10028D770, (uint64_t *)&unk_10028D778);
        if (v9 <= 0x3F)
        {
          v18[3] = *(_QWORD *)(v8 - 8) + 64;
          sub_100017464(319, (unint64_t *)&qword_100293810, &qword_10028C860);
          if (v11 <= 0x3F)
          {
            v18[4] = *(_QWORD *)(v10 - 8) + 64;
            sub_100017400(319);
            if (v13 <= 0x3F)
            {
              v18[5] = *(_QWORD *)(v12 - 8) + 64;
              sub_100017464(319, (unint64_t *)&qword_100293820, (uint64_t *)&unk_10028C900);
              if (v15 <= 0x3F)
              {
                v18[6] = *(_QWORD *)(v14 - 8) + 64;
                sub_100017464(319, &qword_10028BD90, &qword_10028BD98);
                if (v17 <= 0x3F)
                {
                  v18[7] = *(_QWORD *)(v16 - 8) + 64;
                  v18[8] = (char *)&value witness table for Builtin.BridgeObject + 64;
                  swift_updateClassMetadata2(a1, 256, 9, v18, a1 + 80);
                }
              }
            }
          }
        }
      }
    }
  }
}

_QWORD *initializeWithCopy for IdMSBeneficiaryCryptoData(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

_QWORD *assignWithCopy for IdMSBeneficiaryCryptoData(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  v6 = a2[3];
  v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

_QWORD *assignWithTake for IdMSBeneficiaryCryptoData(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = a2[1];
  v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  v6 = a2[3];
  v7 = a1[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for IdMSBeneficiaryCryptoData(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for IdMSBeneficiaryCryptoData(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for IdMSBeneficiaryCryptoData()
{
  return &type metadata for IdMSBeneficiaryCryptoData;
}

uint64_t sub_1000D63AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v1 = sub_1000080B4((uint64_t *)&unk_10028C8C0);
  Dependency.init(dependencyId:config:)(0, 0, 0, v1);
  v2 = sub_1000080B4(&qword_100294B10);
  Dependency.init(dependencyId:config:)(0, 0, 0, v2);
  v3 = sub_1000080B4(&qword_100295290);
  Dependency.init(dependencyId:config:)(0, 0, 0, v3);
  v4 = sub_1000080B4((uint64_t *)&unk_10028D778);
  Dependency.init(dependencyId:config:)(0, 0, 0, v4);
  v5 = sub_1000080B4(&qword_10028C860);
  Dependency.init(dependencyId:config:)(0, 0, 0, v5);
  v6 = sub_1000067D4(0, &qword_10028BB50, AKAccountManager_ptr);
  Dependency.init(dependencyId:config:)(0, 0, 0, v6);
  v7 = sub_1000080B4((uint64_t *)&unk_10028C900);
  Dependency.init(dependencyId:config:)(0, 0, 0, v7);
  v8 = sub_1000080B4(&qword_10028BD98);
  Dependency.init(dependencyId:config:)(0, 0, 0, v8);
  v9 = OBJC_IVAR____TtC13appleaccountd22BeneficiaryHealthCheck_idMSBeneficiaryCryptoData;
  *(_QWORD *)(v0 + v9) = sub_1000154B8((uint64_t)_swiftEmptyArrayStorage);
  return v0;
}

uint64_t sub_1000D656C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000DE5A4(a3, a4);
}

uint64_t sub_1000D6594(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t), void (*a5)(uint64_t), uint64_t a6, _QWORD *a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  NSObject *v55;
  os_log_type_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t ObjectType;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  void *v71;
  uint64_t v72;
  void (*v73)(uint64_t *, _QWORD);
  _QWORD *v74;
  _QWORD *v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t Strong;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  uint64_t v105;
  void (**v106)(uint64_t);
  void (*v107)(uint64_t);
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _QWORD *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  void (*v126)(uint64_t);
  void (*v127)(uint64_t);
  char v128[24];
  uint64_t v129[5];
  uint64_t v130;
  _BYTE v131[24];

  v116 = a8;
  v117 = a7;
  v122 = a6;
  v126 = a4;
  v127 = a5;
  v124 = a3;
  v125 = a2;
  v123 = type metadata accessor for UUID(0);
  v120 = *(_QWORD *)(v123 - 8);
  __chkstk_darwin(v123, v9);
  v119 = (uint64_t)&v110 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v112 = sub_1000080B4((uint64_t *)&unk_100295380);
  v111 = *(_QWORD *)(v112 - 8);
  __chkstk_darwin(v112, v11);
  v110 = (char *)&v110 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for BeneficiaryInfoRecord(0);
  v113 = *(_QWORD *)(v13 - 8);
  v14 = *(_QWORD *)(v113 + 64);
  v16 = __chkstk_darwin(v13, v15);
  v115 = (uint64_t)&v110 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16, v17);
  v118 = (uint64_t)&v110 - v18;
  v19 = type metadata accessor for InheritanceInvitationRecord(0);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(_QWORD *)(v20 + 64);
  v23 = __chkstk_darwin(v19, v22);
  v114 = (uint64_t)&v110 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23, v24);
  v121 = (uint64_t)&v110 - v25;
  v26 = sub_1000080B4(&qword_10028D658);
  v28 = __chkstk_darwin(v26, v27);
  v30 = (char *)&v110 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28, v31);
  v33 = (char *)&v110 - v32;
  v34 = sub_1000080B4(&qword_100290E08);
  __chkstk_darwin(v34, v35);
  v37 = (uint64_t *)((char *)&v110 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100024A20(a1, (uint64_t)v37, &qword_100290E08);
  if (swift_getEnumCaseMultiPayload(v37, v34) == 1)
  {
    v38 = *v37;
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v39 = type metadata accessor for Logger(0);
    sub_100005288(v39, (uint64_t)qword_1002A8A08);
    swift_errorRetain(v38);
    v40 = swift_errorRetain(v38);
    v41 = Logger.logObject.getter(v40);
    v42 = static os_log_type_t.error.getter(v41);
    if (os_log_type_enabled(v41, v42))
    {
      v43 = swift_slowAlloc(22, -1);
      v44 = swift_slowAlloc(64, -1);
      v129[0] = v44;
      *(_DWORD *)v43 = 136315394;
      if (qword_10028AE68 != -1)
        swift_once(&qword_10028AE68, sub_1000D48E0);
      v45 = qword_100290CB8;
      v46 = unk_100290CC0;
      swift_bridgeObjectRetain(unk_100290CC0);
      v130 = sub_1001DEF4C(v45, v46, v129);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v130, v131);
      swift_bridgeObjectRelease(v46);
      *(_WORD *)(v43 + 12) = 2080;
      v130 = v38;
      swift_errorRetain(v38);
      v47 = sub_1000080B4(&qword_10028E850);
      v48 = String.init<A>(describing:)(&v130, v47);
      v50 = v49;
      v130 = sub_1001DEF4C(v48, v49, v129);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v130, v131);
      swift_bridgeObjectRelease(v50);
      swift_errorRelease(v38);
      swift_errorRelease(v38);
      _os_log_impl((void *)&_mh_execute_header, v41, v42, "%s - error fetching InheritanceInvitationRecord. Abandoning Health Check - %s", (uint8_t *)v43, 0x16u);
      swift_arrayDestroy(v44, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v44, -1, -1);
      swift_slowDealloc(v43, -1, -1);
    }
    else
    {
      swift_errorRelease(v38);
      swift_errorRelease(v38);
    }

    ObjectType = swift_getObjectType(v125);
    type metadata accessor for InheritanceError(0);
    v68 = v67;
    v129[0] = 2103;
    v69 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
    v70 = sub_100005150(&qword_10028B350, (uint64_t (*)(uint64_t))type metadata accessor for InheritanceError, (uint64_t)&unk_100216D64);
    _BridgedStoredNSError.init(_:userInfo:)(&v130, v129, v69, v68, v70);
    v71 = (void *)v130;
    v72 = _convertErrorToNSError(_:)(v130);

    v73 = (void (*)(uint64_t *, _QWORD))(*(uint64_t (**)(uint64_t *, uint64_t))(v124 + 24))(v129, ObjectType);
    v75 = v74;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v73);
    v77 = *(_QWORD *)((*v75 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v76 = *(_QWORD *)((*v75 & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v77 >= v76 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v76 > 1, v77 + 1, 1);
    v78 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v77, v72);
    specialized Array._endMutation()(v78);
    v73(v129, 0);
    swift_errorRetain(v38);
    v126(v38);
    swift_errorRelease(v38);
    return swift_errorRelease(v38);
  }
  else
  {
    sub_1000DF6F0((uint64_t)v37, (uint64_t)v33);
    sub_100024A20((uint64_t)v33, (uint64_t)v30, &qword_10028D658);
    v51 = (uint64_t)v33;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v30, 1, v19) == 1)
    {
      sub_100004934((uint64_t)v30, &qword_10028D658);
      if (qword_10028ADD8 != -1)
        swift_once(&qword_10028ADD8, sub_100046D78);
      v52 = type metadata accessor for Logger(0);
      sub_100005288(v52, (uint64_t)qword_1002A8A08);
      v53 = v118;
      v54 = sub_100027FE8(v122, v118, type metadata accessor for BeneficiaryInfoRecord);
      v55 = Logger.logObject.getter(v54);
      v56 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v55, v56))
      {
        v57 = v33;
        v58 = swift_slowAlloc(22, -1);
        v59 = swift_slowAlloc(64, -1);
        v129[0] = v59;
        *(_DWORD *)v58 = 136315394;
        if (qword_10028AE68 != -1)
          swift_once(&qword_10028AE68, sub_1000D48E0);
        v60 = qword_100290CB8;
        v61 = unk_100290CC0;
        swift_bridgeObjectRetain(unk_100290CC0);
        v130 = sub_1001DEF4C(v60, v61, v129);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v130, v131);
        swift_bridgeObjectRelease(v61);
        *(_WORD *)(v58 + 12) = 2080;
        v62 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v63 = dispatch thunk of CustomStringConvertible.description.getter(v123, v62);
        v65 = v64;
        v130 = sub_1001DEF4C(v63, v64, v129);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v130, v131);
        swift_bridgeObjectRelease(v65);
        sub_100028388(v53, type metadata accessor for BeneficiaryInfoRecord);
        _os_log_impl((void *)&_mh_execute_header, v55, v56, "%s - skipping Health Check for Beneficiary - %s", (uint8_t *)v58, 0x16u);
        swift_arrayDestroy(v59, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v59, -1, -1);
        swift_slowDealloc(v58, -1, -1);

        v51 = (uint64_t)v57;
      }
      else
      {
        sub_100028388(v53, type metadata accessor for BeneficiaryInfoRecord);

      }
      *(_BYTE *)(v125 + qword_100296610) = 1;
      sub_1001A407C(1);
      v126(0);
    }
    else
    {
      v80 = v20;
      v81 = v117 + 2;
      v82 = v121;
      sub_10003B730((uint64_t)v30, v121, type metadata accessor for InheritanceInvitationRecord);
      swift_beginAccess(v81, &v130, 0, 0);
      Strong = swift_weakLoadStrong(v81);
      if (Strong)
      {
        v84 = Strong;
        v85 = v111;
        v86 = v110;
        v87 = v112;
        (*(void (**)(char *, uint64_t, uint64_t))(v111 + 16))(v110, Strong + OBJC_IVAR____TtC13appleaccountd22BeneficiaryHealthCheck__inheritanceStorage, v112);
        Dependency.wrappedValue.getter(v129, v87);
        swift_release(v84);
        (*(void (**)(char *, uint64_t))(v85 + 8))(v86, v87);
        v117 = sub_10000732C(v129, v129[3]);
        v88 = v122;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v120 + 16))(v119, v122, v123);
        v112 = swift_allocObject(&unk_1002667D0, 24, 7);
        v111 = v80;
        v89 = v112 + 16;
        swift_beginAccess(v81, v128, 0, 0);
        v90 = swift_weakLoadStrong(v81);
        v118 = v51;
        v91 = v90;
        swift_weakInit(v89, v90);
        swift_release(v91);
        v92 = v115;
        sub_100027FE8(v88, v115, type metadata accessor for BeneficiaryInfoRecord);
        v93 = v114;
        sub_100027FE8(v82, v114, type metadata accessor for InheritanceInvitationRecord);
        v94 = *(unsigned __int8 *)(v113 + 80);
        v95 = (v94 + 16) & ~v94;
        v96 = (v14 + v95 + 7) & 0xFFFFFFFFFFFFFFF8;
        v97 = (v96 + 23) & 0xFFFFFFFFFFFFFFF8;
        v98 = (v97 + 23) & 0xFFFFFFFFFFFFFFF8;
        v99 = *(unsigned __int8 *)(v111 + 80);
        v100 = (v99 + v98 + 8) & ~v99;
        v101 = (v21 + v100 + 7) & 0xFFFFFFFFFFFFFFF8;
        v102 = swift_allocObject(&unk_100266910, v101 + 8, v94 | v99 | 7);
        sub_10003B730(v92, v102 + v95, type metadata accessor for BeneficiaryInfoRecord);
        v103 = (_QWORD *)(v102 + v96);
        v104 = v124;
        v105 = v125;
        *v103 = v125;
        v103[1] = v104;
        v106 = (void (**)(uint64_t))(v102 + v97);
        v107 = v127;
        *v106 = v126;
        v106[1] = v107;
        v108 = v112;
        *(_QWORD *)(v102 + v98) = v112;
        sub_10003B730(v93, v102 + v100, type metadata accessor for InheritanceInvitationRecord);
        *(_QWORD *)(v102 + v101) = v116;
        swift_unknownObjectRetain(v105);
        swift_retain(v107);
        swift_retain(v108);
        v109 = v119;
        sub_1000CE0F0(v119, (uint64_t)sub_1000DF958, v102);
        swift_release(v102);
        (*(void (**)(uint64_t, uint64_t))(v120 + 8))(v109, v123);
        sub_100028388(v121, type metadata accessor for InheritanceInvitationRecord);
        sub_100004934(v118, &qword_10028D658);
        swift_release(v108);
        return sub_100006F58(v129);
      }
      sub_100028388(v82, type metadata accessor for InheritanceInvitationRecord);
    }
    return sub_100004934(v51, &qword_10028D658);
  }
}

uint64_t sub_1000D707C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t), uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t Strong;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51[3];

  v47 = a8;
  v48 = a5;
  v49 = a6;
  v13 = type metadata accessor for InheritanceHealthRecord(0);
  __chkstk_darwin(v13, v14);
  v16 = (char *)&v46 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for BeneficiaryInfoRecord(0);
  __chkstk_darwin(v17, v18);
  v20 = (char *)&v46 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_1000080B4((uint64_t *)&unk_100295390);
  __chkstk_darwin(v21, v22);
  v24 = (uint64_t *)((char *)&v46 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100024A20(a1, (uint64_t)v24, (uint64_t *)&unk_100295390);
  if (swift_getEnumCaseMultiPayload(v24, v21) == 1)
  {
    v47 = a3;
    v25 = *v24;
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v26 = type metadata accessor for Logger(0);
    sub_100005288(v26, (uint64_t)qword_1002A8A08);
    sub_100027FE8(a2, (uint64_t)v20, type metadata accessor for BeneficiaryInfoRecord);
    swift_errorRetain(v25);
    v27 = swift_errorRetain(v25);
    v28 = Logger.logObject.getter(v27);
    v29 = static os_log_type_t.error.getter(v28);
    if (os_log_type_enabled(v28, v29))
    {
      v30 = swift_slowAlloc(32, -1);
      v31 = swift_slowAlloc(96, -1);
      v51[0] = v31;
      *(_DWORD *)v30 = 136315650;
      if (qword_10028AE68 != -1)
        swift_once(&qword_10028AE68, sub_1000D48E0);
      v32 = qword_100290CB8;
      v33 = unk_100290CC0;
      swift_bridgeObjectRetain(unk_100290CC0);
      v50 = sub_1001DEF4C(v32, v33, v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, v51);
      swift_bridgeObjectRelease(v33);
      *(_WORD *)(v30 + 12) = 2080;
      v34 = type metadata accessor for UUID(0);
      v35 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v36 = dispatch thunk of CustomStringConvertible.description.getter(v34, v35);
      v38 = v37;
      v50 = sub_1001DEF4C(v36, v37, v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, v51);
      swift_bridgeObjectRelease(v38);
      sub_100028388((uint64_t)v20, type metadata accessor for BeneficiaryInfoRecord);
      *(_WORD *)(v30 + 22) = 2080;
      v50 = v25;
      swift_errorRetain(v25);
      v39 = sub_1000080B4(&qword_10028E850);
      v40 = String.init<A>(describing:)(&v50, v39);
      v42 = v41;
      v50 = sub_1001DEF4C(v40, v41, v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, v51);
      swift_bridgeObjectRelease(v42);
      swift_errorRelease(v25);
      swift_errorRelease(v25);
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "%s - failed to fetch InheritanceHealthRecord for %s. Error :- %s", (uint8_t *)v30, 0x20u);
      swift_arrayDestroy(v31, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v31, -1, -1);
      swift_slowDealloc(v30, -1, -1);
    }
    else
    {
      sub_100028388((uint64_t)v20, type metadata accessor for BeneficiaryInfoRecord);
      swift_errorRelease(v25);
      swift_errorRelease(v25);
    }

    *(_BYTE *)(v47 + qword_100296618) = 1;
    sub_1001A407C(0);
    swift_errorRetain(v25);
    v48(v25);
    swift_errorRelease(v25);
    return swift_errorRelease(v25);
  }
  else
  {
    sub_10003B730((uint64_t)v24, (uint64_t)v16, type metadata accessor for InheritanceHealthRecord);
    *(_QWORD *)(a3 + qword_100296630) = sub_1000C6250();
    swift_beginAccess(a7 + 16, v51, 0, 0);
    Strong = swift_weakLoadStrong(a7 + 16);
    if (Strong)
    {
      v44 = Strong;
      sub_1000D751C(a2, v47, (uint64_t)v16, a3, a4, (uint64_t)v48, v49);
      swift_release(v44);
    }
    return sub_100028388((uint64_t)v16, type metadata accessor for InheritanceHealthRecord);
  }
}

uint64_t sub_1000D751C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v8 = v7;
  v45 = a6;
  v46 = a7;
  v42 = a4;
  v43 = a5;
  v47 = a3;
  v39 = a1;
  v40 = a2;
  v44 = *v7;
  v9 = type metadata accessor for InheritanceHealthRecord(0);
  v41 = *(_QWORD *)(v9 - 8);
  v10 = *(_QWORD *)(v41 + 64);
  __chkstk_darwin(v9, v11);
  v38 = (uint64_t)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for InheritanceInvitationRecord(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  __chkstk_darwin(v12, v15);
  v16 = (char *)&v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for BeneficiaryInfoRecord(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(_QWORD *)(v18 + 64);
  __chkstk_darwin(v17, v20);
  v21 = (char *)&v37 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = swift_allocObject(&unk_1002667D0, 24, 7);
  swift_weakInit(v22 + 16, v8);
  sub_100027FE8(v39, (uint64_t)v21, type metadata accessor for BeneficiaryInfoRecord);
  sub_100027FE8(v40, (uint64_t)v16, type metadata accessor for InheritanceInvitationRecord);
  sub_100027FE8(v47, (uint64_t)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for InheritanceHealthRecord);
  v23 = *(unsigned __int8 *)(v18 + 80);
  v24 = (v23 + 40) & ~v23;
  v25 = *(unsigned __int8 *)(v13 + 80);
  v26 = (v19 + v25 + v24) & ~v25;
  v27 = *(unsigned __int8 *)(v41 + 80);
  v28 = (v14 + v27 + v26) & ~v27;
  v29 = (v10 + v28 + 7) & 0xFFFFFFFFFFFFFFF8;
  v30 = (v29 + 23) & 0xFFFFFFFFFFFFFFF8;
  v31 = swift_allocObject(&unk_100266938, v30 + 8, v23 | v25 | v27 | 7);
  v33 = v42;
  v32 = v43;
  *(_QWORD *)(v31 + 16) = v42;
  *(_QWORD *)(v31 + 24) = v32;
  *(_QWORD *)(v31 + 32) = v22;
  sub_10003B730((uint64_t)v21, v31 + v24, type metadata accessor for BeneficiaryInfoRecord);
  sub_10003B730((uint64_t)v16, v31 + v26, type metadata accessor for InheritanceInvitationRecord);
  sub_10003B730(v38, v31 + v28, type metadata accessor for InheritanceHealthRecord);
  v34 = (_QWORD *)(v31 + v29);
  v35 = v46;
  *v34 = v45;
  v34[1] = v35;
  *(_QWORD *)(v31 + v30) = v44;
  swift_unknownObjectRetain(v33);
  swift_retain(v22);
  swift_retain(v35);
  sub_1000DA8A0(v47, (uint64_t (*)(uint64_t))sub_1000DFCC8, (uint64_t (*)(uint64_t))v31);
  swift_release(v22);
  return swift_release(v31);
}

uint64_t sub_1000D7780(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *), uint64_t a4, char *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  NSObject *v50;
  unint64_t v51;
  uint64_t v52;
  NSObject *v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  NSObject *v59;
  os_log_type_t v60;
  _BOOL4 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  char *v71;
  void (*v72)(uint64_t *);
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  NSObject *v78;
  os_log_type_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void (*v91)(uint64_t *);
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  NSObject *v99;
  os_log_type_t v100;
  void (*v101)(uint64_t *);
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t *v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  id v114;
  void *v115;
  id v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  NSObject *v120;
  os_log_type_t v121;
  uint8_t *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  unint64_t v127;
  uint64_t *v129;
  uint64_t ObjectType;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  NSObject *v135;
  uint64_t v136;
  void (*v137)(uint64_t *, _QWORD);
  _QWORD *v138;
  _QWORD *v139;
  unint64_t v140;
  unint64_t v141;
  uint64_t v142;
  id v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  _QWORD *inited;
  uint64_t v148;
  uint64_t v149;
  uint64_t *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  _BYTE *v154;
  uint64_t *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  NSObject *v159;
  os_log_type_t v160;
  uint8_t *v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  unint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  NSObject *v169;
  os_log_type_t v170;
  uint8_t *v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  unint64_t v175;
  void (*v176)(uint64_t *);
  uint64_t v177;
  id v178;
  NSString v179;
  id v180;
  uint64_t v181;
  id v182;
  uint64_t v183;
  NSObject *v184;
  __n128 v185;
  os_log_type_t v186;
  uint8_t *v187;
  uint64_t v188;
  uint64_t v189;
  NSObject *v190;
  os_log_type_t v191;
  uint8_t *v192;
  uint64_t v193;
  uint64_t v194;
  unint64_t v195;
  uint64_t v196;
  NSObject *v197;
  __n128 v198;
  os_log_type_t v199;
  uint8_t *v200;
  uint64_t v201;
  uint64_t *v202;
  uint64_t v203;
  uint64_t v204;
  void (*v205)(char *, uint64_t, uint64_t);
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  char *v215;
  char *v216;
  uint64_t v217;
  uint64_t v218;
  char *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t *v225;
  uint64_t v226;
  void (*v227)(uint64_t *);
  uint64_t v228;
  _BYTE v229[48];
  NSObject *v230;
  uint64_t v231;
  uint64_t v232;
  _UNKNOWN **v233;

  v211 = a7;
  v210 = a6;
  v219 = a5;
  v226 = a4;
  v227 = a3;
  v212 = type metadata accessor for InheritanceInvitationMessage(0);
  v10 = __chkstk_darwin(v212, v9);
  v214 = (uint64_t)&v203 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10, v12);
  v215 = (char *)&v203 - v13;
  v218 = sub_1000080B4(&qword_10028FA50);
  v217 = *(_QWORD *)(v218 - 8);
  __chkstk_darwin(v218, v14);
  v216 = (char *)&v203 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v221 = type metadata accessor for InheritanceInvitationRecord(0);
  v220 = *(_QWORD *)(v221 - 8);
  v17 = __chkstk_darwin(v221, v16);
  v213 = (uint64_t)&v203 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __chkstk_darwin(v17, v19);
  v209 = (uint64_t)&v203 - v21;
  v23 = __chkstk_darwin(v20, v22);
  v25 = (char *)&v203 - v24;
  v27 = __chkstk_darwin(v23, v26);
  v29 = (char *)&v203 - v28;
  __chkstk_darwin(v27, v30);
  v32 = (char *)&v203 - v31;
  v224 = sub_1000080B4(&qword_100290E08);
  __chkstk_darwin(v224, v33);
  v225 = (uint64_t *)((char *)&v203 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0));
  v223 = type metadata accessor for UUID(0);
  v222 = *(_QWORD *)(v223 - 8);
  v36 = __chkstk_darwin(v223, v35);
  v38 = (char *)&v203 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v36, v39);
  v41 = (char *)&v203 - v40;
  v42 = sub_1000080B4((uint64_t *)&unk_10028FA70);
  __chkstk_darwin(v42, v43);
  v45 = (uint64_t *)((char *)&v203 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100024A20(a1, (uint64_t)v45, (uint64_t *)&unk_10028FA70);
  if (swift_getEnumCaseMultiPayload(v45, v42) == 1)
  {
    v231 = *v45;
    v46 = v231;
    swift_errorRetain(v231);
    v47 = sub_1000080B4(&qword_10028E850);
    type metadata accessor for InheritanceError(0);
    v49 = v48;
    if ((swift_dynamicCast(&v230, &v231, v47, v48, 6) & 1) != 0)
    {
      v50 = v230;
      v231 = (uint64_t)v230;
      v228 = 3;
      v51 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
      v52 = sub_100005150(&qword_10028B350, (uint64_t (*)(uint64_t))type metadata accessor for InheritanceError, (uint64_t)&unk_100216D64);
      _BridgedStoredNSError.init(_:userInfo:)(&v230, &v228, v51, v49, v52);
      v53 = v230;
      v228 = (uint64_t)v230;
      v54 = static _BridgedStoredNSError.== infix(_:_:)(&v231, &v228, v49, v52);

      if ((v54 & 1) != 0)
      {
        if (qword_10028ADD8 != -1)
          swift_once(&qword_10028ADD8, sub_100046D78);
        v55 = type metadata accessor for Logger(0);
        sub_100005288(v55, (uint64_t)qword_1002A8A08);
        v56 = v222;
        v57 = v223;
        v58 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v222 + 16))(v41, a2, v223);
        v59 = Logger.logObject.getter(v58);
        v60 = static os_log_type_t.info.getter();
        v61 = os_log_type_enabled(v59, v60);
        v62 = v221;
        if (v61)
        {
          v63 = swift_slowAlloc(22, -1);
          v219 = (char *)swift_slowAlloc(64, -1);
          v231 = (uint64_t)v219;
          *(_DWORD *)v63 = 136315394;
          if (qword_10028AE68 != -1)
            swift_once(&qword_10028AE68, sub_1000D48E0);
          v64 = qword_100290CB8;
          v65 = unk_100290CC0;
          swift_bridgeObjectRetain(unk_100290CC0);
          v230 = sub_1001DEF4C(v64, v65, &v231);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v230, &v231);
          swift_bridgeObjectRelease(v65);
          *(_WORD *)(v63 + 12) = 2080;
          v66 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
          v67 = v223;
          v68 = dispatch thunk of CustomStringConvertible.description.getter(v223, v66);
          v70 = v69;
          v230 = sub_1001DEF4C(v68, v69, &v231);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v230, &v231);
          swift_bridgeObjectRelease(v70);
          (*(void (**)(char *, uint64_t))(v222 + 8))(v41, v67);
          _os_log_impl((void *)&_mh_execute_header, v59, v60, "%s - there is no InheritanceInvitationRecord for beneficiaryID - %s.", (uint8_t *)v63, 0x16u);
          v71 = v219;
          swift_arrayDestroy(v219, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v71, -1, -1);
          swift_slowDealloc(v63, -1, -1);

          v72 = v227;
          v62 = v221;
        }
        else
        {
          (*(void (**)(char *, uint64_t))(v56 + 8))(v41, v57);

          v72 = v227;
        }
        v110 = v225;
        (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(v220 + 56))(v225, 1, 1, v62);
        swift_storeEnumTagMultiPayload(v110, v224, 0);
        v72(v110);

LABEL_37:
        swift_errorRelease(v46);
        return sub_100004934((uint64_t)v110, &qword_100290E08);
      }

    }
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v97 = type metadata accessor for Logger(0);
    sub_100005288(v97, (uint64_t)qword_1002A8A08);
    swift_errorRetain(v46);
    v98 = swift_errorRetain(v46);
    v99 = Logger.logObject.getter(v98);
    v100 = static os_log_type_t.error.getter(v99);
    if (os_log_type_enabled(v99, v100))
    {
      v101 = v227;
      v102 = swift_slowAlloc(22, -1);
      v103 = swift_slowAlloc(64, -1);
      v231 = v103;
      *(_DWORD *)v102 = 136315394;
      if (qword_10028AE68 != -1)
        swift_once(&qword_10028AE68, sub_1000D48E0);
      v104 = qword_100290CB8;
      v105 = unk_100290CC0;
      swift_bridgeObjectRetain(unk_100290CC0);
      v230 = sub_1001DEF4C(v104, v105, &v231);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v230, &v231);
      swift_bridgeObjectRelease(v105);
      *(_WORD *)(v102 + 12) = 2080;
      v230 = v46;
      swift_errorRetain(v46);
      v106 = String.init<A>(describing:)(&v230, v47);
      v108 = v107;
      v230 = sub_1001DEF4C(v106, v107, &v231);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v230, &v231);
      swift_bridgeObjectRelease(v108);
      swift_errorRelease(v46);
      swift_errorRelease(v46);
      _os_log_impl((void *)&_mh_execute_header, v99, v100, "%s - error fetching InheritanceInvitationRecord - %s", (uint8_t *)v102, 0x16u);
      swift_arrayDestroy(v103, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v103, -1, -1);
      swift_slowDealloc(v102, -1, -1);

    }
    else
    {
      swift_errorRelease(v46);
      swift_errorRelease(v46);

      v101 = v227;
    }
    v109 = v224;
    v110 = v225;
    *v225 = v46;
    swift_storeEnumTagMultiPayload(v110, v109, 1);
    swift_errorRetain(v46);
    v101(v110);
    goto LABEL_37;
  }
  sub_10003B730((uint64_t)v45, (uint64_t)v32, type metadata accessor for InheritanceInvitationRecord);
  v73 = (uint64_t)v32;
  if (qword_10028ADD8 != -1)
    swift_once(&qword_10028ADD8, sub_100046D78);
  v206 = type metadata accessor for Logger(0);
  v74 = sub_100005288(v206, (uint64_t)qword_1002A8A08);
  v75 = v222;
  v76 = v223;
  v205 = *(void (**)(char *, uint64_t, uint64_t))(v222 + 16);
  v205(v38, a2, v223);
  v77 = sub_100027FE8(v73, (uint64_t)v29, type metadata accessor for InheritanceInvitationRecord);
  v208 = v74;
  v78 = Logger.logObject.getter(v77);
  v79 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v78, v79))
  {
    v207 = v73;
    v80 = swift_slowAlloc(32, -1);
    v204 = swift_slowAlloc(64, -1);
    v231 = v204;
    *(_DWORD *)v80 = 136315650;
    if (qword_10028AE68 != -1)
      swift_once(&qword_10028AE68, sub_1000D48E0);
    v81 = qword_100290CB8;
    v82 = unk_100290CC0;
    swift_bridgeObjectRetain(unk_100290CC0);
    v230 = sub_1001DEF4C(v81, v82, &v231);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v230, &v231);
    swift_bridgeObjectRelease(v82);
    *(_WORD *)(v80 + 12) = 2080;
    v83 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v84 = v223;
    v85 = dispatch thunk of CustomStringConvertible.description.getter(v223, v83);
    v87 = v86;
    v230 = sub_1001DEF4C(v85, v86, &v231);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v230, &v231);
    swift_bridgeObjectRelease(v87);
    (*(void (**)(char *, uint64_t))(v222 + 8))(v38, v84);
    *(_WORD *)(v80 + 22) = 2048;
    v88 = v221;
    v89 = *(_QWORD *)&v29[*(int *)(v221 + 32)];
    sub_100028388((uint64_t)v29, type metadata accessor for InheritanceInvitationRecord);
    v230 = v89;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v230, &v231);
    _os_log_impl((void *)&_mh_execute_header, v78, v79, "%s - inheritanceInvitationRecord for beneficiaryID - %s is in %ld status", (uint8_t *)v80, 0x20u);
    v90 = v204;
    swift_arrayDestroy(v204, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v90, -1, -1);
    swift_slowDealloc(v80, -1, -1);

    v91 = v227;
    v73 = v207;
  }
  else
  {
    sub_100028388((uint64_t)v29, type metadata accessor for InheritanceInvitationRecord);
    (*(void (**)(char *, uint64_t))(v75 + 8))(v38, v76);

    v88 = v221;
    v91 = v227;
  }
  v92 = *(int *)(v88 + 32);
  v93 = *(_QWORD *)(v73 + v92);
  sub_100027FE8(v73, (uint64_t)v25, type metadata accessor for InheritanceInvitationRecord);
  if (v93 == 2)
  {
    sub_100028388((uint64_t)v25, type metadata accessor for InheritanceInvitationRecord);
LABEL_20:
    v95 = v225;
    sub_100027FE8(v73, (uint64_t)v225, type metadata accessor for InheritanceInvitationRecord);
    (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v220 + 56))(v95, 0, 1, v88);
    swift_storeEnumTagMultiPayload(v95, v224, 0);
    v91(v95);
    sub_100004934((uint64_t)v95, &qword_100290E08);
    v96 = v73;
    return sub_100028388(v96, type metadata accessor for InheritanceInvitationRecord);
  }
  v94 = *(_QWORD *)&v25[*(int *)(v88 + 32)];
  sub_100028388((uint64_t)v25, type metadata accessor for InheritanceInvitationRecord);
  if (v94 == 3)
    goto LABEL_20;
  if (*(_QWORD *)(v73 + v92) == 1)
  {
    v111 = v217;
    v112 = v216;
    v113 = v218;
    (*(void (**)(char *, char *, uint64_t))(v217 + 16))(v216, &v219[OBJC_IVAR____TtC13appleaccountd22BeneficiaryHealthCheck__accountStore], v218);
    Dependency.wrappedValue.getter(&v231, v113);
    (*(void (**)(char *, uint64_t))(v111 + 8))(v112, v113);
    v114 = objc_msgSend(*(id *)(*sub_10000732C(&v231, v232) + 16), "aa_primaryAppleAccount");
    if (v114)
    {
      v115 = v114;
      v116 = objc_msgSend(v114, "aa_altDSID");

      if (v116)
      {
        v218 = static String._unconditionallyBridgeFromObjectiveC(_:)(v116);
        v217 = v117;

        sub_100006F58(&v231);
        v118 = v209;
        v119 = sub_100027FE8(v73, v209, type metadata accessor for InheritanceInvitationRecord);
        v120 = Logger.logObject.getter(v119);
        v121 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v120, v121))
        {
          v122 = (uint8_t *)swift_slowAlloc(12, -1);
          v123 = swift_slowAlloc(32, -1);
          v231 = v123;
          *(_DWORD *)v122 = 136315138;
          v124 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
          v125 = dispatch thunk of CustomStringConvertible.description.getter(v223, v124);
          v127 = v126;
          v230 = sub_1001DEF4C(v125, v126, &v231);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v230, &v231);
          swift_bridgeObjectRelease(v127);
          sub_100028388(v118, type metadata accessor for InheritanceInvitationRecord);
          _os_log_impl((void *)&_mh_execute_header, v120, v121, "Beneficiary id %s is pending. Resending CK share...", v122, 0xCu);
          swift_arrayDestroy(v123, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v123, -1, -1);
          swift_slowDealloc(v122, -1, -1);
        }
        else
        {
          sub_100028388(v118, type metadata accessor for InheritanceInvitationRecord);
        }

        ObjectType = swift_getObjectType(v210);
        type metadata accessor for InheritanceError(0);
        v132 = v131;
        v231 = 2106;
        v133 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
        v134 = sub_100005150(&qword_10028B350, (uint64_t (*)(uint64_t))type metadata accessor for InheritanceError, (uint64_t)&unk_100216D64);
        _BridgedStoredNSError.init(_:userInfo:)(&v230, &v231, v133, v132, v134);
        v135 = v230;
        v136 = _convertErrorToNSError(_:)(v230);

        v137 = (void (*)(uint64_t *, _QWORD))(*(uint64_t (**)(uint64_t *, uint64_t))(v211 + 24))(&v231, ObjectType);
        v139 = v138;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v137);
        v141 = *(_QWORD *)((*v139 & 0xFFFFFFFFFFFFFF8) + 0x10);
        v140 = *(_QWORD *)((*v139 & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v141 >= v140 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v140 > 1, v141 + 1, 1);
        v142 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v141, v136);
        specialized Array._endMutation()(v142);
        v137(&v231, 0);
        v143 = objc_msgSend((id)objc_opt_self(AAMessagingService), "sharedService");
        v144 = type metadata accessor for DaemonDestinationBuilder();
        v145 = swift_allocObject(v144, 16, 7);
        v232 = v144;
        v233 = &off_100265EA8;
        v231 = v145;
        v146 = type metadata accessor for DaemonIDSMessenger();
        inited = (_QWORD *)swift_initStackObject(v146, v229);
        v148 = sub_1000067AC((uint64_t)&v231, v232);
        __chkstk_darwin(v148, v148);
        v150 = (uint64_t *)((char *)&v203 - ((v149 + 15) & 0xFFFFFFFFFFFFFFF0));
        (*(void (**)(uint64_t *))(v151 + 16))(v150);
        v152 = *v150;
        inited[6] = v144;
        inited[7] = &off_100265EA8;
        inited[2] = v143;
        inited[3] = v152;
        v219 = (char *)v143;
        v222 = v145;
        swift_retain(v145);
        sub_100006F58(&v231);
        v153 = v212;
        v154 = v215;
        v205(&v215[*(int *)(v212 + 20)], v73, v223);
        *v154 = 4;
        v155 = (uint64_t *)&v154[*(int *)(v153 + 24)];
        v156 = v217;
        *v155 = v218;
        v155[1] = v156;
        v207 = v73;
        v157 = v213;
        v158 = sub_100027FE8(v73, v213, type metadata accessor for InheritanceInvitationRecord);
        v159 = Logger.logObject.getter(v158);
        v160 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v159, v160))
        {
          v161 = (uint8_t *)swift_slowAlloc(12, -1);
          v162 = swift_slowAlloc(32, -1);
          v230 = v162;
          *(_DWORD *)v161 = 136315138;
          v163 = sub_10020082C();
          v165 = v164;
          v228 = sub_1001DEF4C(v163, v164, (uint64_t *)&v230);
          v154 = v215;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v228, v229);
          swift_bridgeObjectRelease(v165);
          sub_100028388(v157, type metadata accessor for InheritanceInvitationRecord);
          _os_log_impl((void *)&_mh_execute_header, v159, v160, "invitation %s", v161, 0xCu);
          swift_arrayDestroy(v162, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v162, -1, -1);
          swift_slowDealloc(v161, -1, -1);
        }
        else
        {
          sub_100028388(v157, type metadata accessor for InheritanceInvitationRecord);
        }

        v166 = v221;
        v167 = v214;
        v168 = sub_100027FE8((uint64_t)v154, v214, type metadata accessor for InheritanceInvitationMessage);
        v169 = Logger.logObject.getter(v168);
        v170 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v169, v170))
        {
          v171 = (uint8_t *)swift_slowAlloc(12, -1);
          v172 = swift_slowAlloc(32, -1);
          v230 = v172;
          *(_DWORD *)v171 = 136315138;
          v173 = sub_10019D4CC();
          v175 = v174;
          v228 = sub_1001DEF4C(v173, v174, (uint64_t *)&v230);
          v154 = v215;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v228, v229);
          swift_bridgeObjectRelease(v175);
          sub_100028388(v167, type metadata accessor for InheritanceInvitationMessage);
          _os_log_impl((void *)&_mh_execute_header, v169, v170, "invitationMessage %s", v171, 0xCu);
          swift_arrayDestroy(v172, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v172, -1, -1);
          swift_slowDealloc(v171, -1, -1);
        }
        else
        {
          sub_100028388(v167, type metadata accessor for InheritanceInvitationMessage);
        }

        v176 = v227;
        v177 = *(_QWORD *)(v207 + *(int *)(v166 + 20) + 8);
        v178 = objc_allocWithZone((Class)AAMessagingDestination);
        swift_bridgeObjectRetain(v177);
        v179 = String._bridgeToObjectiveC()();
        v180 = objc_msgSend(v178, "initWithHandle:", v179);

        if (v180)
        {
          v181 = qword_10028ADB0;
          v182 = v180;
          if (v181 != -1)
            swift_once(&qword_10028ADB0, sub_100046CC8);
          v183 = sub_100005288(v206, (uint64_t)qword_1002A8990);
          v184 = Logger.logObject.getter(v183);
          v186 = static os_log_type_t.default.getter(v185);
          if (os_log_type_enabled(v184, v186))
          {
            v187 = (uint8_t *)swift_slowAlloc(2, -1);
            *(_WORD *)v187 = 0;
            _os_log_impl((void *)&_mh_execute_header, v184, v186, "Destination is valid!", v187, 2u);
            swift_slowDealloc(v187, -1, -1);
          }

          v188 = sub_1000D4558((uint64_t)v154, v182, (uint64_t)&_swiftEmptySetSingleton, type metadata accessor for InheritanceInvitationMessage, &qword_100290E18, (uint64_t)&unk_100220314);
          v197 = Logger.logObject.getter(v188);
          v199 = static os_log_type_t.default.getter(v198);
          if (os_log_type_enabled(v197, v199))
          {
            v200 = (uint8_t *)swift_slowAlloc(2, -1);
            *(_WORD *)v200 = 0;
            _os_log_impl((void *)&_mh_execute_header, v197, v199, "Sent the IDS message for Inheritance Invitation successfully.", v200, 2u);
            swift_slowDealloc(v200, -1, -1);
          }
          swift_bridgeObjectRelease(v177);

        }
        else
        {
          if (qword_10028ADC8 != -1)
            swift_once(&qword_10028ADC8, sub_100046D2C);
          v189 = sub_100005288(v206, (uint64_t)qword_1002A89D8);
          v190 = Logger.logObject.getter(v189);
          v191 = static os_log_type_t.error.getter(v190);
          if (os_log_type_enabled(v190, v191))
          {
            v192 = (uint8_t *)swift_slowAlloc(2, -1);
            *(_WORD *)v192 = 0;
            _os_log_impl((void *)&_mh_execute_header, v190, v191, "Unable to generate destination from handle.", v192, 2u);
            swift_slowDealloc(v192, -1, -1);
          }

          type metadata accessor for AACustodianError(0);
          v194 = v193;
          v228 = -7004;
          v195 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
          v196 = sub_100005150((unint64_t *)&qword_10028B640, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianError, (uint64_t)&unk_100218378);
          _BridgedStoredNSError.init(_:userInfo:)(&v230, &v228, v195, v194, v196);
          v197 = v230;
          sub_1000D8EDC((uint64_t)v230);
          swift_bridgeObjectRelease(v177);
        }

        v201 = v207;
        v202 = v225;
        sub_100027FE8(v207, (uint64_t)v225, type metadata accessor for InheritanceInvitationRecord);
        (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v220 + 56))(v202, 0, 1, v166);
        swift_storeEnumTagMultiPayload(v202, v224, 0);
        v176(v202);

        swift_release(v222);
        swift_release(inited);
        sub_100004934((uint64_t)v202, &qword_100290E08);
        sub_100028388((uint64_t)v154, type metadata accessor for InheritanceInvitationMessage);
        v96 = v201;
        return sub_100028388(v96, type metadata accessor for InheritanceInvitationRecord);
      }
    }
    sub_100006F58(&v231);
  }
  v129 = v225;
  (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(v220 + 56))(v225, 1, 1, v88);
  swift_storeEnumTagMultiPayload(v129, v224, 0);
  v91(v129);
  sub_100004934((uint64_t)v129, &qword_100290E08);
  v96 = v73;
  return sub_100028388(v96, type metadata accessor for InheritanceInvitationRecord);
}

void sub_1000D8EDC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  os_log_type_t v14;
  uint8_t *v15;
  NSObject *oslog;
  uint64_t v17;
  uint64_t v18;

  if (a1)
  {
    swift_errorRetain(a1);
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v2 = type metadata accessor for Logger(0);
    sub_100005288(v2, (uint64_t)qword_1002A8A08);
    swift_errorRetain(a1);
    v3 = swift_errorRetain(a1);
    oslog = Logger.logObject.getter(v3);
    v4 = static os_log_type_t.error.getter(oslog);
    if (os_log_type_enabled(oslog, v4))
    {
      v5 = (uint8_t *)swift_slowAlloc(12, -1);
      v6 = swift_slowAlloc(32, -1);
      v17 = a1;
      v18 = v6;
      *(_DWORD *)v5 = 136315138;
      swift_errorRetain(a1);
      v7 = sub_1000080B4(&qword_10028E850);
      v8 = String.init<A>(describing:)(&v17, v7);
      v10 = v9;
      v17 = sub_1001DEF4C(v8, v9, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, &v18);
      swift_bridgeObjectRelease(v10);
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, oslog, v4, "Error sending IDS Message for Inheritance Invitation: %s", v5, 0xCu);
      swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v6, -1, -1);
      swift_slowDealloc(v5, -1, -1);

      swift_errorRelease(a1);
      return;
    }
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    swift_errorRelease(a1);
  }
  else
  {
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v11 = type metadata accessor for Logger(0);
    v12 = sub_100005288(v11, (uint64_t)qword_1002A8A08);
    oslog = Logger.logObject.getter(v12);
    v14 = static os_log_type_t.default.getter(v13);
    if (os_log_type_enabled(oslog, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v14, "Sent the IDS message for Inheritance Invitation successfully.", v15, 2u);
      swift_slowDealloc(v15, -1, -1);
    }
  }

}

uint64_t sub_1000D917C(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t (*a8)(_QWORD), uint64_t a9)
{
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t result;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  int v37;
  _BOOL4 v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t Strong;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  _QWORD *v69;
  _QWORD v70[2];
  uint64_t v71;
  int v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t (*v85)(_QWORD);
  uint64_t v86;
  char v87[24];
  uint64_t v88[5];
  uint64_t v89;
  _BYTE v90[24];

  v85 = a8;
  v86 = a7;
  v83 = a6;
  v84 = a3;
  v13 = (_QWORD *)a9;
  v14 = type metadata accessor for InheritanceInvitationRecord(0);
  v15 = *(_QWORD *)(v14 - 8);
  v79 = v14;
  v80 = v15;
  __chkstk_darwin(v14, v16);
  v81 = v17;
  v82 = (uint64_t)v70 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_1000080B4(&qword_10028D828);
  v78 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18, v19);
  v21 = (char *)v70 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for InheritanceHealthRecord(0);
  v23 = *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64);
  v25 = __chkstk_darwin(v22, v24);
  __chkstk_darwin(v25, v26);
  v30 = (char *)v70 - v29;
  v31 = a4 + 16;
  if ((a1 & 1) != 0)
  {
    *(_BYTE *)(a2 + qword_100296600) = 1;
    swift_beginAccess(a4 + 16, v88, 0, 0);
    result = swift_weakLoadStrong(a4 + 16);
    if (result)
    {
      v33 = result;
      sub_1000D9790(a5, v83, v86, a2, v84, v85, a9);
      return swift_release(v33);
    }
  }
  else
  {
    v74 = v28;
    v75 = v27;
    v77 = a2;
    *(_BYTE *)(a2 + qword_100296600) = 0;
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v34 = type metadata accessor for Logger(0);
    sub_100005288(v34, (uint64_t)qword_1002A8A08);
    v35 = sub_100027FE8(v86, (uint64_t)v30, type metadata accessor for InheritanceHealthRecord);
    v36 = Logger.logObject.getter(v35);
    v37 = static os_log_type_t.debug.getter(v36);
    v38 = os_log_type_enabled(v36, (os_log_type_t)v37);
    v76 = a5;
    if (v38)
    {
      v72 = v37;
      v73 = (_QWORD *)a9;
      v39 = swift_slowAlloc(22, -1);
      v71 = swift_slowAlloc(64, -1);
      v88[0] = v71;
      *(_DWORD *)v39 = 136315394;
      if (qword_10028AE68 != -1)
        swift_once(&qword_10028AE68, sub_1000D48E0);
      v41 = qword_100290CB8;
      v40 = unk_100290CC0;
      swift_bridgeObjectRetain(unk_100290CC0);
      v89 = sub_1001DEF4C(v41, v40, v88);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v89, v90);
      swift_bridgeObjectRelease(v40);
      *(_WORD *)(v39 + 12) = 2080;
      v70[1] = v39 + 14;
      v42 = type metadata accessor for UUID(0);
      v43 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v44 = dispatch thunk of CustomStringConvertible.description.getter(v42, v43);
      v46 = v45;
      v89 = sub_1001DEF4C(v44, v45, v88);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v89, v90);
      swift_bridgeObjectRelease(v46);
      sub_100028388((uint64_t)v30, type metadata accessor for InheritanceHealthRecord);
      _os_log_impl((void *)&_mh_execute_header, v36, (os_log_type_t)v72, "%s - marking beneficiary %s as not reachable, and attempting to re-share.", (uint8_t *)v39, 0x16u);
      v47 = v71;
      swift_arrayDestroy(v71, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v47, -1, -1);
      swift_slowDealloc(v39, -1, -1);

      v13 = v73;
    }
    else
    {
      sub_100028388((uint64_t)v30, type metadata accessor for InheritanceHealthRecord);

    }
    swift_beginAccess(v31, &v89, 0, 0);
    result = swift_weakLoadStrong(v31);
    v48 = v77;
    if (result)
    {
      v49 = result;
      v50 = v78;
      (*(void (**)(char *, uint64_t, uint64_t))(v78 + 16))(v21, result + OBJC_IVAR____TtC13appleaccountd22BeneficiaryHealthCheck__accessKeyRepairHandler, v18);
      Dependency.wrappedValue.getter(v88, v18);
      swift_release(v49);
      (*(void (**)(char *, uint64_t))(v50 + 8))(v21, v18);
      v73 = sub_10000732C(v88, v88[3]);
      v51 = v83;
      v52 = (uint64_t *)(v83 + *(int *)(v79 + 20));
      v53 = *v52;
      v78 = v52[1];
      v79 = v53;
      v54 = swift_allocObject(&unk_1002667D0, 24, 7);
      swift_beginAccess(v31, v87, 0, 0);
      Strong = swift_weakLoadStrong(v31);
      swift_weakInit(v54 + 16, Strong);
      swift_release(Strong);
      v56 = v82;
      sub_100027FE8(v51, v82, type metadata accessor for InheritanceInvitationRecord);
      v57 = v75;
      sub_100027FE8(v86, v75, type metadata accessor for InheritanceHealthRecord);
      v58 = *(unsigned __int8 *)(v80 + 80);
      v59 = (v58 + 24) & ~v58;
      v60 = *(unsigned __int8 *)(v74 + 80);
      v61 = v48;
      v62 = (v81 + v60 + v59) & ~v60;
      v63 = v13;
      v64 = (v23 + v62 + 7) & 0xFFFFFFFFFFFFFFF8;
      v65 = (v64 + 23) & 0xFFFFFFFFFFFFFFF8;
      v66 = swift_allocObject(&unk_1002669D8, v65 + 16, v58 | v60 | 7);
      *(_QWORD *)(v66 + 16) = v54;
      sub_10003B730(v56, v66 + v59, type metadata accessor for InheritanceInvitationRecord);
      sub_10003B730(v57, v66 + v62, type metadata accessor for InheritanceHealthRecord);
      v67 = (uint64_t *)(v66 + v64);
      v68 = v84;
      *v67 = v61;
      v67[1] = v68;
      v69 = (_QWORD *)(v66 + v65);
      *v69 = v85;
      v69[1] = v63;
      swift_retain(v54);
      swift_unknownObjectRetain(v61);
      swift_retain(v63);
      sub_100179C18(v76, v79, v78, (void (*)(_QWORD))sub_1000E0798, v66);
      swift_release(v54);
      swift_release(v66);
      return sub_100006F58(v88);
    }
  }
  return result;
}

uint64_t sub_1000D9790(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(_QWORD), uint64_t a7)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  void (*v55)(char *, uint64_t);
  uint64_t v56;
  uint64_t v57;
  NSObject *v58;
  os_log_type_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  os_log_type_t v69;
  const char *v70;
  uint64_t v71;
  uint64_t v72;
  NSObject *v73;
  os_log_type_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t (*v87)(uint64_t);
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  NSObject *v92;
  os_log_type_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  unint64_t v108;
  NSObject *v109;
  os_log_type_t v110;
  uint8_t *v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  char v120;
  char v121;
  uint64_t v122;
  NSObject *v123;
  os_log_type_t v124;
  _BOOL4 v125;
  uint8_t *v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  uint8_t *v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  int v134;
  uint64_t v135;
  os_log_type_t v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t (*v157)(_QWORD);
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161[2];

  v152 = a2;
  v156 = a7;
  v157 = a6;
  v155 = a4;
  v9 = type metadata accessor for BeneficiaryInfoRecord(0);
  v11 = __chkstk_darwin(v9, v10);
  v147 = (char *)&v144 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11, v13);
  v149 = (uint64_t)&v144 - v14;
  v158 = type metadata accessor for Date(0);
  v154 = *(_QWORD *)(v158 - 8);
  v16 = __chkstk_darwin(v158, v15);
  v18 = (char *)&v144 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16, v19);
  v21 = (char *)&v144 - v20;
  v22 = type metadata accessor for InheritanceHealthRecord(0);
  v24 = __chkstk_darwin(v22, v23);
  v151 = (uint64_t)&v144 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __chkstk_darwin(v24, v26);
  v150 = (uint64_t)&v144 - v28;
  v30 = __chkstk_darwin(v27, v29);
  v148 = (uint64_t)&v144 - v31;
  __chkstk_darwin(v30, v32);
  v34 = (char *)&v144 - v33;
  if (qword_10028ADD8 != -1)
    swift_once(&qword_10028ADD8, sub_100046D78);
  v35 = type metadata accessor for Logger(0);
  v36 = sub_100005288(v35, (uint64_t)qword_1002A8A08);
  v159 = a3;
  v37 = sub_100027FE8(a3, (uint64_t)v34, type metadata accessor for InheritanceHealthRecord);
  v38 = Logger.logObject.getter(v37);
  v39 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v38, v39))
  {
    v145 = v36;
    v146 = a1;
    v153 = v22;
    v40 = swift_slowAlloc(22, -1);
    v144 = swift_slowAlloc(64, -1);
    v161[0] = v144;
    *(_DWORD *)v40 = 136315394;
    if (qword_10028AE68 != -1)
      swift_once(&qword_10028AE68, sub_1000D48E0);
    v42 = qword_100290CB8;
    v41 = unk_100290CC0;
    swift_bridgeObjectRetain(unk_100290CC0);
    v160 = sub_1001DEF4C(v42, v41, v161);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v160, v161);
    swift_bridgeObjectRelease(v41);
    *(_WORD *)(v40 + 12) = 2080;
    v43 = type metadata accessor for UUID(0);
    v44 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v45 = dispatch thunk of CustomStringConvertible.description.getter(v43, v44);
    v47 = v46;
    v160 = sub_1001DEF4C(v45, v46, v161);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v160, v161);
    swift_bridgeObjectRelease(v47);
    sub_100028388((uint64_t)v34, type metadata accessor for InheritanceHealthRecord);
    _os_log_impl((void *)&_mh_execute_header, v38, v39, "%s - verifying beneficiary health record for beneficiaryID - %s", (uint8_t *)v40, 0x16u);
    v48 = v144;
    swift_arrayDestroy(v144, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v48, -1, -1);
    swift_slowDealloc(v40, -1, -1);

    v36 = v145;
    a1 = v146;
    v22 = v153;
  }
  else
  {
    sub_100028388((uint64_t)v34, type metadata accessor for InheritanceHealthRecord);

  }
  v50 = v158;
  v49 = v159;
  v51 = v154;
  v52 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v154 + 16))(v21, v159 + *(int *)(v22 + 20), v158);
  Date.init(timeIntervalSince1970:)(v52, 946713600.0);
  v53 = sub_100005150(&qword_100290510, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  v54 = dispatch thunk of static Equatable.== infix(_:_:)(v21, v18, v50, v53);
  v55 = *(void (**)(char *, uint64_t))(v51 + 8);
  v55(v18, v50);
  v55(v21, v50);
  if ((v54 & 1) != 0)
  {
    v56 = v151;
    v57 = sub_100027FE8(v49, v151, type metadata accessor for InheritanceHealthRecord);
    v58 = Logger.logObject.getter(v57);
    v59 = static os_log_type_t.debug.getter(v58);
    if (os_log_type_enabled(v58, v59))
    {
      v60 = swift_slowAlloc(22, -1);
      v61 = swift_slowAlloc(64, -1);
      v161[0] = v61;
      *(_DWORD *)v60 = 136315394;
      if (qword_10028AE68 != -1)
        swift_once(&qword_10028AE68, sub_1000D48E0);
      v62 = qword_100290CB8;
      v63 = unk_100290CC0;
      swift_bridgeObjectRetain(unk_100290CC0);
      v160 = sub_1001DEF4C(v62, v63, v161);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v160, v161);
      swift_bridgeObjectRelease(v63);
      *(_WORD *)(v60 + 12) = 2080;
      v64 = type metadata accessor for UUID(0);
      v65 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v66 = dispatch thunk of CustomStringConvertible.description.getter(v64, v65);
      v68 = v67;
      v160 = sub_1001DEF4C(v66, v67, v161);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v160, v161);
      swift_bridgeObjectRelease(v68);
      sub_100028388(v56, type metadata accessor for InheritanceHealthRecord);
      v69 = v59;
      v70 = "%s - beneficiary %s hasn't updated to a version that has Health Check enabled. Skipping Health Check.";
LABEL_46:
      _os_log_impl((void *)&_mh_execute_header, v58, v69, v70, (uint8_t *)v60, 0x16u);
      swift_arrayDestroy(v61, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v61, -1, -1);
      swift_slowDealloc(v60, -1, -1);
LABEL_49:

      v134 = 1;
LABEL_50:
      sub_1001A407C(v134);
      return v157(0);
    }
    v87 = type metadata accessor for InheritanceHealthRecord;
    v88 = v56;
    goto LABEL_48;
  }
  if ((sub_1000C60C8() & 1) != 0)
  {
    v153 = v22;
    v71 = v149;
    v72 = sub_100027FE8(a1, v149, type metadata accessor for BeneficiaryInfoRecord);
    v73 = Logger.logObject.getter(v72);
    v74 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v73, v74))
    {
      v145 = v36;
      v146 = a1;
      v75 = swift_slowAlloc(22, -1);
      v76 = swift_slowAlloc(64, -1);
      v161[0] = v76;
      *(_DWORD *)v75 = 136315394;
      v77 = (uint64_t)v147;
      if (qword_10028AE68 != -1)
        swift_once(&qword_10028AE68, sub_1000D48E0);
      v78 = qword_100290CB8;
      v79 = unk_100290CC0;
      swift_bridgeObjectRetain(unk_100290CC0);
      v160 = sub_1001DEF4C(v78, v79, v161);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v160, v161);
      swift_bridgeObjectRelease(v79);
      *(_WORD *)(v75 + 12) = 2080;
      v80 = type metadata accessor for UUID(0);
      v81 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v82 = v149;
      v83 = dispatch thunk of CustomStringConvertible.description.getter(v80, v81);
      v85 = v84;
      v160 = sub_1001DEF4C(v83, v84, v161);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v160, v161);
      swift_bridgeObjectRelease(v85);
      sub_100028388(v82, type metadata accessor for BeneficiaryInfoRecord);
      _os_log_impl((void *)&_mh_execute_header, v73, v74, "%s - beneficiary %s has checked in recently, continue health check.", (uint8_t *)v75, 0x16u);
      swift_arrayDestroy(v76, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v76, -1, -1);
      swift_slowDealloc(v75, -1, -1);

      a1 = v146;
    }
    else
    {
      sub_100028388(v71, type metadata accessor for BeneficiaryInfoRecord);

      v77 = (uint64_t)v147;
    }
    v109 = Logger.logObject.getter(v86);
    v110 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v109, v110))
    {
      v111 = (uint8_t *)swift_slowAlloc(12, -1);
      v112 = swift_slowAlloc(32, -1);
      v161[0] = v112;
      *(_DWORD *)v111 = 136315138;
      if (qword_10028AE68 != -1)
        swift_once(&qword_10028AE68, sub_1000D48E0);
      v113 = qword_100290CB8;
      v114 = unk_100290CC0;
      swift_bridgeObjectRetain(unk_100290CC0);
      v160 = sub_1001DEF4C(v113, v114, v161);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v160, v161);
      swift_bridgeObjectRelease(v114);
      _os_log_impl((void *)&_mh_execute_header, v109, v110, "%s - verifying accessKeyHash...", v111, 0xCu);
      swift_arrayDestroy(v112, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v112, -1, -1);
      swift_slowDealloc(v111, -1, -1);

    }
    else
    {

    }
    sub_1000DAC10(v152);
    sub_100013528();
    v117 = v116;
    v119 = v118;
    sub_10000EA4C(v116, v118);
    v121 = v120;
    v122 = sub_10000F494(v117, v119);
    v123 = Logger.logObject.getter(v122);
    v124 = static os_log_type_t.info.getter();
    v125 = os_log_type_enabled(v123, v124);
    if ((v121 & 1) == 0)
    {
      if (v125)
      {
        v130 = (uint8_t *)swift_slowAlloc(12, -1);
        v131 = swift_slowAlloc(32, -1);
        v161[0] = v131;
        *(_DWORD *)v130 = 136315138;
        if (qword_10028AE68 != -1)
          swift_once(&qword_10028AE68, sub_1000D48E0);
        v132 = qword_100290CB8;
        v133 = unk_100290CC0;
        swift_bridgeObjectRetain(unk_100290CC0);
        v160 = sub_1001DEF4C(v132, v133, v161);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v160, v161);
        swift_bridgeObjectRelease(v133);
        _os_log_impl((void *)&_mh_execute_header, v123, v124, "%s - accessKeyHash doesn't match with healthRecord. No action taken at the moment", v130, 0xCu);
        swift_arrayDestroy(v131, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v131, -1, -1);
        swift_slowDealloc(v130, -1, -1);
      }

      *(_BYTE *)(v155 + qword_100296620) = 1;
      v134 = 0;
      goto LABEL_50;
    }
    if (v125)
    {
      v126 = (uint8_t *)swift_slowAlloc(12, -1);
      v127 = swift_slowAlloc(32, -1);
      v161[0] = v127;
      *(_DWORD *)v126 = 136315138;
      if (qword_10028AE68 != -1)
        swift_once(&qword_10028AE68, sub_1000D48E0);
      v128 = qword_100290CB8;
      v129 = unk_100290CC0;
      swift_bridgeObjectRetain(unk_100290CC0);
      v160 = sub_1001DEF4C(v128, v129, v161);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v160, v161);
      swift_bridgeObjectRelease(v129);
      _os_log_impl((void *)&_mh_execute_header, v123, v124, "%s - verified accessKeyHash matches with healthRecord. We're good.", v126, 0xCu);
      swift_arrayDestroy(v127, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v127, -1, -1);
      swift_slowDealloc(v126, -1, -1);

    }
    else
    {

    }
    v135 = sub_100027FE8(a1, v77, type metadata accessor for BeneficiaryInfoRecord);
    v58 = Logger.logObject.getter(v135);
    v136 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v58, v136))
    {
      v60 = swift_slowAlloc(22, -1);
      v61 = swift_slowAlloc(64, -1);
      v161[0] = v61;
      *(_DWORD *)v60 = 136315394;
      if (qword_10028AE68 != -1)
        swift_once(&qword_10028AE68, sub_1000D48E0);
      v137 = qword_100290CB8;
      v138 = unk_100290CC0;
      swift_bridgeObjectRetain(unk_100290CC0);
      v160 = sub_1001DEF4C(v137, v138, v161);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v160, v161);
      swift_bridgeObjectRelease(v138);
      *(_WORD *)(v60 + 12) = 2080;
      v139 = type metadata accessor for UUID(0);
      v140 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v141 = dispatch thunk of CustomStringConvertible.description.getter(v139, v140);
      v143 = v142;
      v160 = sub_1001DEF4C(v141, v142, v161);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v160, v161);
      swift_bridgeObjectRelease(v143);
      sub_100028388(v77, type metadata accessor for BeneficiaryInfoRecord);
      v69 = v136;
      v70 = "%s - beneficiary %s is healthy!";
      goto LABEL_46;
    }
    v87 = type metadata accessor for BeneficiaryInfoRecord;
    v88 = v77;
LABEL_48:
    sub_100028388(v88, v87);
    goto LABEL_49;
  }
  v89 = v148;
  sub_100027FE8(v49, v148, type metadata accessor for InheritanceHealthRecord);
  v90 = v150;
  v91 = sub_100027FE8(v49, v150, type metadata accessor for InheritanceHealthRecord);
  v92 = Logger.logObject.getter(v91);
  v93 = static os_log_type_t.debug.getter(v92);
  if (os_log_type_enabled(v92, v93))
  {
    v153 = v22;
    v94 = swift_slowAlloc(32, -1);
    v95 = swift_slowAlloc(96, -1);
    v161[0] = v95;
    *(_DWORD *)v94 = 136315650;
    if (qword_10028AE68 != -1)
      swift_once(&qword_10028AE68, sub_1000D48E0);
    v96 = qword_100290CB8;
    v97 = unk_100290CC0;
    swift_bridgeObjectRetain(unk_100290CC0);
    v160 = sub_1001DEF4C(v96, v97, v161);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v160, v161);
    swift_bridgeObjectRelease(v97);
    *(_WORD *)(v94 + 12) = 2080;
    v98 = type metadata accessor for UUID(0);
    v99 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v100 = v148;
    v101 = dispatch thunk of CustomStringConvertible.description.getter(v98, v99);
    v103 = v102;
    v160 = sub_1001DEF4C(v101, v102, v161);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v160, v161);
    swift_bridgeObjectRelease(v103);
    sub_100028388(v100, type metadata accessor for InheritanceHealthRecord);
    *(_WORD *)(v94 + 22) = 2080;
    v104 = v150;
    v105 = sub_100005150(&qword_100290528, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    v106 = dispatch thunk of CustomStringConvertible.description.getter(v158, v105);
    v108 = v107;
    v160 = sub_1001DEF4C(v106, v107, v161);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v160, v161);
    swift_bridgeObjectRelease(v108);
    sub_100028388(v104, type metadata accessor for InheritanceHealthRecord);
    _os_log_impl((void *)&_mh_execute_header, v92, v93, "%s - beneficiary %s last check in was %s, marking as not reachable.", (uint8_t *)v94, 0x20u);
    swift_arrayDestroy(v95, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v95, -1, -1);
    swift_slowDealloc(v94, -1, -1);
  }
  else
  {
    sub_100028388(v89, type metadata accessor for InheritanceHealthRecord);
    sub_100028388(v90, type metadata accessor for InheritanceHealthRecord);
  }

  *(_BYTE *)(v155 + qword_100296620) = 0;
  sub_1001A407C(0);
  return sub_1000DAF6C(v152, 3, v157, v156);
}

uint64_t sub_1000DA7F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(_QWORD), uint64_t a8)
{
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  _BYTE v16[24];

  v13 = a2 + 16;
  swift_beginAccess(a2 + 16, v16, 0, 0);
  result = swift_weakLoadStrong(v13);
  if (result)
  {
    v15 = result;
    *(_BYTE *)(a5 + qword_100296620) = a1 == 0;
    sub_1001A407C(0);
    sub_1000DAF6C(a3, 3, a7, a8);
    return swift_release(v15);
  }
  return result;
}

uint64_t sub_1000DA8A0(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t (*a3)(uint64_t))
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t (**v24)(uint64_t);
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36[2];
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40[5];

  v35 = *v3;
  v7 = type metadata accessor for InheritanceHealthRecord(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  __chkstk_darwin(v7, v10);
  v11 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1000080B4(&qword_10028E8C0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12, v14);
  v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v16, (uint64_t)v3 + OBJC_IVAR____TtC13appleaccountd22BeneficiaryHealthCheck__cloudStorage, v12);
  Dependency.wrappedValue.getter(&v38, v12);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
  v17 = sub_1000080B4((uint64_t *)&unk_10028C8C0);
  v18 = sub_1000080B4(&qword_10028CCB0);
  if (swift_dynamicCast(v36, &v38, v17, v18, 6))
  {
    sub_10003A190(v36, (uint64_t)v40);
    sub_100027FE8(a1, (uint64_t)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for InheritanceHealthRecord);
    v19 = *(unsigned __int8 *)(v8 + 80);
    v20 = (v19 + 16) & ~v19;
    v21 = (v9 + v20 + 7) & 0xFFFFFFFFFFFFFFF8;
    v22 = (v21 + 23) & 0xFFFFFFFFFFFFFFF8;
    v23 = swift_allocObject(&unk_100266960, v22 + 8, v19 | 7);
    sub_10003B730((uint64_t)v11, v23 + v20, type metadata accessor for InheritanceHealthRecord);
    v24 = (uint64_t (**)(uint64_t))(v23 + v21);
    *v24 = a2;
    v24[1] = a3;
    *(_QWORD *)(v23 + v22) = v35;
    swift_retain(a3);
    sub_1000E01C8(a1, (uint64_t)sub_1000DFE9C, v23);
    swift_release(v23);
    return sub_100006F58(v40);
  }
  else
  {
    v37 = 0;
    memset(v36, 0, sizeof(v36));
    sub_100004934((uint64_t)v36, &qword_10028CCB8);
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v26 = type metadata accessor for Logger(0);
    v27 = sub_100005288(v26, (uint64_t)qword_1002A8A08);
    v28 = Logger.logObject.getter(v27);
    v29 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v28, v29))
    {
      v30 = (uint8_t *)swift_slowAlloc(12, -1);
      v31 = swift_slowAlloc(32, -1);
      v40[0] = v31;
      *(_DWORD *)v30 = 136315138;
      if (qword_10028AE68 != -1)
        swift_once(&qword_10028AE68, sub_1000D48E0);
      v32 = qword_100290CB8;
      v33 = unk_100290CC0;
      swift_bridgeObjectRetain(unk_100290CC0);
      v38 = sub_1001DEF4C(v32, v33, v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39);
      swift_bridgeObjectRelease(v33);
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "%s - isSharedAndAccepted unable to obtain pointer to CloudKitSharing", v30, 0xCu);
      swift_arrayDestroy(v31, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v31, -1, -1);
      swift_slowDealloc(v30, -1, -1);
    }

    return a2(1);
  }
}

uint64_t sub_1000DAC10(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  os_log_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  os_log_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;

  v2 = v1;
  v4 = *v1;
  v5 = type metadata accessor for InheritanceInvitationRecord(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v9 = __chkstk_darwin(v5, v8);
  v10 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = __chkstk_darwin(v9, v11);
  v14 = (char *)&v33 - v13;
  if (*(_QWORD *)(a1 + *(int *)(result + 32)) == 3)
  {
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v15 = type metadata accessor for Logger(0);
    sub_100005288(v15, (uint64_t)qword_1002A8A08);
    v16 = sub_100027FE8(a1, (uint64_t)v14, type metadata accessor for InheritanceInvitationRecord);
    v17 = Logger.logObject.getter(v16);
    v18 = static os_log_type_t.debug.getter(v17);
    if (os_log_type_enabled(v17, (os_log_type_t)v18))
    {
      v35 = v18;
      v36 = v17;
      v37 = v4;
      v38 = v2;
      v19 = swift_slowAlloc(22, -1);
      v34 = swift_slowAlloc(64, -1);
      v40 = v34;
      *(_DWORD *)v19 = 136315394;
      if (qword_10028AE68 != -1)
        swift_once(&qword_10028AE68, sub_1000D48E0);
      v21 = qword_100290CB8;
      v20 = unk_100290CC0;
      swift_bridgeObjectRetain(unk_100290CC0);
      v39 = sub_1001DEF4C(v21, v20, &v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40);
      swift_bridgeObjectRelease(v20);
      *(_WORD *)(v19 + 12) = 2080;
      v22 = type metadata accessor for UUID(0);
      v23 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v24 = dispatch thunk of CustomStringConvertible.description.getter(v22, v23);
      v26 = v25;
      v39 = sub_1001DEF4C(v24, v25, &v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40);
      swift_bridgeObjectRelease(v26);
      sub_100028388((uint64_t)v14, type metadata accessor for InheritanceInvitationRecord);
      v27 = v36;
      _os_log_impl((void *)&_mh_execute_header, v36, (os_log_type_t)v35, "%s - beneficiary %s was marked as not reachable, marking as accepted again.", (uint8_t *)v19, 0x16u);
      v28 = v34;
      swift_arrayDestroy(v34, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v28, -1, -1);
      swift_slowDealloc(v19, -1, -1);

      v4 = v37;
    }
    else
    {
      sub_100028388((uint64_t)v14, type metadata accessor for InheritanceInvitationRecord);

    }
    sub_100027FE8(a1, (uint64_t)v10, type metadata accessor for InheritanceInvitationRecord);
    v29 = *(unsigned __int8 *)(v6 + 80);
    v30 = (v29 + 16) & ~v29;
    v31 = (v7 + v30 + 7) & 0xFFFFFFFFFFFFFFF8;
    v32 = swift_allocObject(&unk_100266A00, v31 + 8, v29 | 7);
    sub_10003B730((uint64_t)v10, v32 + v30, type metadata accessor for InheritanceInvitationRecord);
    *(_QWORD *)(v32 + v31) = v4;
    sub_1000DAF6C(a1, 2, (uint64_t (*)(_QWORD))sub_1000E0910, v32);
    return swift_release(v32);
  }
  return result;
}

uint64_t sub_1000DAF6C(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD), uint64_t a4)
{
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  os_log_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _BYTE v38[4];
  int v39;
  os_log_t v40;
  uint64_t v41;
  uint64_t (*v42)(_QWORD);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50[5];

  v8 = *v4;
  v9 = sub_1000080B4((uint64_t *)&unk_100295380);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  v13 = &v38[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v14 = type metadata accessor for InheritanceInvitationRecord(0);
  v16 = __chkstk_darwin(v14, v15);
  v18 = __chkstk_darwin(v16, v17);
  v22 = &v38[-v21];
  v23 = *(int *)(v18 + 32);
  v48 = a1;
  if (*(_QWORD *)(a1 + v23) == v19)
    return a3(0);
  v44 = v20;
  v45 = v19;
  v46 = v4;
  if (qword_10028ADD8 != -1)
    swift_once(&qword_10028ADD8, sub_100046D78);
  v47 = v10;
  v25 = type metadata accessor for Logger(0);
  v26 = sub_100005288(v25, (uint64_t)qword_1002A8A08);
  v27 = Logger.logObject.getter(v26);
  v28 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v27, (os_log_type_t)v28))
  {
    v39 = v28;
    v40 = v27;
    v41 = v8;
    v42 = a3;
    v43 = a4;
    v29 = swift_slowAlloc(22, -1);
    v30 = swift_slowAlloc(32, -1);
    v50[0] = v30;
    *(_DWORD *)v29 = 136315394;
    if (qword_10028AE68 != -1)
      swift_once(&qword_10028AE68, sub_1000D48E0);
    v32 = qword_100290CB8;
    v31 = unk_100290CC0;
    swift_bridgeObjectRetain(unk_100290CC0);
    v49 = sub_1001DEF4C(v32, v31, v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, v50);
    swift_bridgeObjectRelease(v31);
    *(_WORD *)(v29 + 12) = 2048;
    v33 = v45;
    v49 = v45;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, v50);
    v34 = v40;
    _os_log_impl((void *)&_mh_execute_header, v40, (os_log_type_t)v39, "%s - updating invitation to %ld", (uint8_t *)v29, 0x16u);
    swift_arrayDestroy(v30, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v30, -1, -1);
    swift_slowDealloc(v29, -1, -1);

    a3 = v42;
    a4 = v43;
    v8 = v41;
  }
  else
  {

    v33 = v45;
  }
  sub_100027FE8(v48, (uint64_t)v22, type metadata accessor for InheritanceInvitationRecord);
  *(_QWORD *)&v22[*(int *)(v14 + 32)] = v33;
  v35 = v47;
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v47 + 16))(v13, (uint64_t)v46 + OBJC_IVAR____TtC13appleaccountd22BeneficiaryHealthCheck__inheritanceStorage, v9);
  Dependency.wrappedValue.getter(v50, v9);
  (*(void (**)(_BYTE *, uint64_t))(v35 + 8))(v13, v9);
  sub_10000732C(v50, v50[3]);
  v36 = v44;
  sub_100027FE8((uint64_t)v22, v44, type metadata accessor for InheritanceInvitationRecord);
  v37 = (_QWORD *)swift_allocObject(&unk_100266A28, 40, 7);
  v37[2] = a3;
  v37[3] = a4;
  v37[4] = v8;
  swift_retain(a4);
  sub_1000C993C(v36, (uint64_t)sub_1000E0984, (uint64_t)v37);
  swift_release(v37);
  sub_100028388(v36, type metadata accessor for InheritanceInvitationRecord);
  sub_100028388((uint64_t)v22, type metadata accessor for InheritanceInvitationRecord);
  return sub_100006F58(v50);
}

void sub_1000DB324(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v4 = type metadata accessor for InheritanceInvitationRecord(0);
  v6 = __chkstk_darwin(v4, v5);
  v8 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6, v9);
  v11 = (char *)&v41 - v10;
  if (a1)
  {
    swift_errorRetain(a1);
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v12 = type metadata accessor for Logger(0);
    sub_100005288(v12, (uint64_t)qword_1002A8A08);
    sub_100027FE8(a2, (uint64_t)v8, type metadata accessor for InheritanceInvitationRecord);
    swift_errorRetain(a1);
    v13 = swift_errorRetain(a1);
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.error.getter(v14);
    if (os_log_type_enabled(v14, v15))
    {
      v16 = swift_slowAlloc(32, -1);
      v17 = (uint64_t *)swift_slowAlloc(8, -1);
      v42 = swift_slowAlloc(64, -1);
      v44 = v42;
      *(_DWORD *)v16 = 136315650;
      if (qword_10028AE68 != -1)
        swift_once(&qword_10028AE68, sub_1000D48E0);
      v18 = qword_100290CB8;
      v19 = unk_100290CC0;
      swift_bridgeObjectRetain(unk_100290CC0);
      v43 = sub_1001DEF4C(v18, v19, &v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, &v44);
      swift_bridgeObjectRelease(v19);
      *(_WORD *)(v16 + 12) = 2080;
      v20 = type metadata accessor for UUID(0);
      v21 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v22 = dispatch thunk of CustomStringConvertible.description.getter(v20, v21);
      v24 = v23;
      v43 = sub_1001DEF4C(v22, v23, &v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, &v44);
      swift_bridgeObjectRelease(v24);
      sub_100028388((uint64_t)v8, type metadata accessor for InheritanceInvitationRecord);
      *(_WORD *)(v16 + 22) = 2112;
      v25 = _convertErrorToNSError(_:)(a1);
      v43 = v25;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, &v44);
      *v17 = v25;
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "%s - failed to mark Beneficiary %s as accepted (after being not reachable). Error: %@", (uint8_t *)v16, 0x20u);
      v26 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v17, 1, v26);
      swift_slowDealloc(v17, -1, -1);
      v27 = v42;
      swift_arrayDestroy(v42, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v27, -1, -1);
      swift_slowDealloc(v16, -1, -1);

      swift_errorRelease(a1);
    }
    else
    {
      swift_errorRelease(a1);
      sub_100028388((uint64_t)v8, type metadata accessor for InheritanceInvitationRecord);
      swift_errorRelease(a1);
      swift_errorRelease(a1);

    }
  }
  else
  {
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v28 = type metadata accessor for Logger(0);
    sub_100005288(v28, (uint64_t)qword_1002A8A08);
    v29 = sub_100027FE8(a2, (uint64_t)v11, type metadata accessor for InheritanceInvitationRecord);
    v30 = Logger.logObject.getter(v29);
    v31 = static os_log_type_t.debug.getter(v30);
    if (os_log_type_enabled(v30, v31))
    {
      v32 = swift_slowAlloc(22, -1);
      v33 = swift_slowAlloc(64, -1);
      v44 = v33;
      *(_DWORD *)v32 = 136315394;
      if (qword_10028AE68 != -1)
        swift_once(&qword_10028AE68, sub_1000D48E0);
      v34 = qword_100290CB8;
      v35 = unk_100290CC0;
      swift_bridgeObjectRetain(unk_100290CC0);
      v43 = sub_1001DEF4C(v34, v35, &v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, &v44);
      swift_bridgeObjectRelease(v35);
      *(_WORD *)(v32 + 12) = 2080;
      v36 = type metadata accessor for UUID(0);
      v37 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v38 = dispatch thunk of CustomStringConvertible.description.getter(v36, v37);
      v40 = v39;
      v43 = sub_1001DEF4C(v38, v39, &v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, &v44);
      swift_bridgeObjectRelease(v40);
      sub_100028388((uint64_t)v11, type metadata accessor for InheritanceInvitationRecord);
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "%s - successfully marked Beneficiary %s as accepted (after being not reachable).", (uint8_t *)v32, 0x16u);
      swift_arrayDestroy(v33, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v33, -1, -1);
      swift_slowDealloc(v32, -1, -1);
    }
    else
    {
      sub_100028388((uint64_t)v11, type metadata accessor for InheritanceInvitationRecord);
    }

  }
}

uint64_t sub_1000DB8AC(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v22;
  uint64_t v23;

  v4 = sub_1000080B4((uint64_t *)&unk_10028FA70);
  __chkstk_darwin(v4, v5);
  v7 = (uint64_t *)((char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100024A20(a1, (uint64_t)v7, (uint64_t *)&unk_10028FA70);
  if (swift_getEnumCaseMultiPayload(v7, v4) == 1)
  {
    v8 = *v7;
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v9 = type metadata accessor for Logger(0);
    sub_100005288(v9, (uint64_t)qword_1002A8A08);
    swift_errorRetain(v8);
    v10 = swift_errorRetain(v8);
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.error.getter(v11);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = swift_slowAlloc(22, -1);
      v14 = swift_slowAlloc(64, -1);
      v23 = v14;
      *(_DWORD *)v13 = 136315394;
      if (qword_10028AE68 != -1)
        swift_once(&qword_10028AE68, sub_1000D48E0);
      v15 = qword_100290CB8;
      v16 = unk_100290CC0;
      swift_bridgeObjectRetain(unk_100290CC0);
      v22 = sub_1001DEF4C(v15, v16, &v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23);
      swift_bridgeObjectRelease(v16);
      *(_WORD *)(v13 + 12) = 2080;
      v22 = v8;
      swift_errorRetain(v8);
      v17 = sub_1000080B4(&qword_10028E850);
      v18 = String.init<A>(describing:)(&v22, v17);
      v20 = v19;
      v22 = sub_1001DEF4C(v18, v19, &v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23);
      swift_bridgeObjectRelease(v20);
      swift_errorRelease(v8);
      swift_errorRelease(v8);
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%s - failed to save invitation. Unable to update status - %s", (uint8_t *)v13, 0x16u);
      swift_arrayDestroy(v14, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v14, -1, -1);
      swift_slowDealloc(v13, -1, -1);
    }
    else
    {
      swift_errorRelease(v8);
      swift_errorRelease(v8);
    }

    swift_errorRetain(v8);
    a2(v8);
    swift_errorRelease(v8);
    return swift_errorRelease(v8);
  }
  else
  {
    a2(0);
    return sub_100004934((uint64_t)v7, (uint64_t *)&unk_10028FA70);
  }
}

uint64_t sub_1000DBB9C(uint64_t a1, char a2, uint64_t a3, void (*a4)(uint64_t), uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  NSObject *v54;
  os_log_type_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(uint64_t);
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;

  v10 = type metadata accessor for InheritanceHealthRecord(0);
  v12 = __chkstk_darwin(v10, v11);
  v14 = (char *)&v66 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v12, v15);
  v18 = (char *)&v66 - v17;
  __chkstk_darwin(v16, v19);
  v21 = (char *)&v66 - v20;
  if ((a2 & 1) != 0)
  {
    swift_errorRetain(a1);
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v36 = type metadata accessor for Logger(0);
    sub_100005288(v36, (uint64_t)qword_1002A8A08);
    sub_100027FE8(a3, (uint64_t)v14, type metadata accessor for InheritanceHealthRecord);
    sub_1000E05E4(a1, 1);
    v37 = swift_errorRetain(a1);
    v38 = Logger.logObject.getter(v37);
    v39 = static os_log_type_t.error.getter(v38);
    if (os_log_type_enabled(v38, v39))
    {
      v68 = a4;
      v69 = a5;
      v40 = swift_slowAlloc(32, -1);
      v41 = (uint64_t *)swift_slowAlloc(8, -1);
      v67 = swift_slowAlloc(64, -1);
      v71 = v67;
      *(_DWORD *)v40 = 136315650;
      if (qword_10028AE68 != -1)
        swift_once(&qword_10028AE68, sub_1000D48E0);
      v42 = qword_100290CB8;
      v43 = unk_100290CC0;
      swift_bridgeObjectRetain(unk_100290CC0);
      v70 = sub_1001DEF4C(v42, v43, &v71);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71);
      swift_bridgeObjectRelease(v43);
      *(_WORD *)(v40 + 12) = 2080;
      v44 = type metadata accessor for UUID(0);
      v45 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v46 = dispatch thunk of CustomStringConvertible.description.getter(v44, v45);
      v48 = v47;
      v70 = sub_1001DEF4C(v46, v47, &v71);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71);
      swift_bridgeObjectRelease(v48);
      sub_100028388((uint64_t)v14, type metadata accessor for InheritanceHealthRecord);
      *(_WORD *)(v40 + 22) = 2112;
      v49 = _convertErrorToNSError(_:)(a1);
      v70 = v49;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71);
      *v41 = v49;
      sub_10006AEB4(a1, 1);
      sub_10006AEB4(a1, 1);
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "%s - beneficiary %s failed to check if shared and accepted, assuming accepted for now. Error: %@", (uint8_t *)v40, 0x20u);
      v50 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v41, 1, v50);
      swift_slowDealloc(v41, -1, -1);
      v51 = v67;
      swift_arrayDestroy(v67, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v51, -1, -1);
      swift_slowDealloc(v40, -1, -1);

      v68(1);
    }
    else
    {
      sub_100028388((uint64_t)v14, type metadata accessor for InheritanceHealthRecord);
      sub_10006AEB4(a1, 1);
      sub_10006AEB4(a1, 1);

      a4(1);
    }
    return sub_10006AEB4(a1, 1);
  }
  else
  {
    if ((a1 & 1) != 0)
    {
      if (qword_10028ADD8 != -1)
        swift_once(&qword_10028ADD8, sub_100046D78);
      v52 = type metadata accessor for Logger(0);
      sub_100005288(v52, (uint64_t)qword_1002A8A08);
      v53 = sub_100027FE8(a3, (uint64_t)v21, type metadata accessor for InheritanceHealthRecord);
      v54 = Logger.logObject.getter(v53);
      v55 = static os_log_type_t.debug.getter(v54);
      if (os_log_type_enabled(v54, v55))
      {
        v69 = a5;
        v56 = swift_slowAlloc(22, -1);
        v57 = swift_slowAlloc(64, -1);
        v71 = v57;
        *(_DWORD *)v56 = 136315394;
        if (qword_10028AE68 != -1)
          swift_once(&qword_10028AE68, sub_1000D48E0);
        v58 = qword_100290CB8;
        v59 = unk_100290CC0;
        swift_bridgeObjectRetain(unk_100290CC0);
        v70 = sub_1001DEF4C(v58, v59, &v71);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71);
        swift_bridgeObjectRelease(v59);
        *(_WORD *)(v56 + 12) = 2080;
        v60 = type metadata accessor for UUID(0);
        v61 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v62 = dispatch thunk of CustomStringConvertible.description.getter(v60, v61);
        v64 = v63;
        v70 = sub_1001DEF4C(v62, v63, &v71);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71);
        swift_bridgeObjectRelease(v64);
        sub_100028388((uint64_t)v21, type metadata accessor for InheritanceHealthRecord);
        _os_log_impl((void *)&_mh_execute_header, v54, v55, "%s - beneficiary %s is shared and accepted", (uint8_t *)v56, 0x16u);
        swift_arrayDestroy(v57, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v57, -1, -1);
        swift_slowDealloc(v56, -1, -1);

      }
      else
      {
        sub_100028388((uint64_t)v21, type metadata accessor for InheritanceHealthRecord);

      }
      v35 = 1;
    }
    else
    {
      if (qword_10028ADD8 != -1)
        swift_once(&qword_10028ADD8, sub_100046D78);
      v22 = type metadata accessor for Logger(0);
      sub_100005288(v22, (uint64_t)qword_1002A8A08);
      v23 = sub_100027FE8(a3, (uint64_t)v18, type metadata accessor for InheritanceHealthRecord);
      v24 = Logger.logObject.getter(v23);
      v25 = static os_log_type_t.debug.getter(v24);
      if (os_log_type_enabled(v24, v25))
      {
        v69 = a5;
        v26 = swift_slowAlloc(22, -1);
        v27 = swift_slowAlloc(64, -1);
        v71 = v27;
        *(_DWORD *)v26 = 136315394;
        if (qword_10028AE68 != -1)
          swift_once(&qword_10028AE68, sub_1000D48E0);
        v28 = qword_100290CB8;
        v29 = unk_100290CC0;
        swift_bridgeObjectRetain(unk_100290CC0);
        v70 = sub_1001DEF4C(v28, v29, &v71);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71);
        swift_bridgeObjectRelease(v29);
        *(_WORD *)(v26 + 12) = 2080;
        v30 = type metadata accessor for UUID(0);
        v31 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
        v32 = dispatch thunk of CustomStringConvertible.description.getter(v30, v31);
        v34 = v33;
        v70 = sub_1001DEF4C(v32, v33, &v71);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71);
        swift_bridgeObjectRelease(v34);
        sub_100028388((uint64_t)v18, type metadata accessor for InheritanceHealthRecord);
        _os_log_impl((void *)&_mh_execute_header, v24, v25, "%s - beneficiary %s is NOT shared and accepted", (uint8_t *)v26, 0x16u);
        swift_arrayDestroy(v27, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v27, -1, -1);
        swift_slowDealloc(v26, -1, -1);

        v35 = 0;
      }
      else
      {
        sub_100028388((uint64_t)v18, type metadata accessor for InheritanceHealthRecord);

        v35 = 0;
      }
    }
    return ((uint64_t (*)(uint64_t))a4)(v35);
  }
}

void sub_1000DC3AC(void *a1, unint64_t a2, void *a3, uint64_t a4, void (*a5)(uint64_t, uint64_t), uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  id v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  NSObject *v55;
  os_log_type_t v56;
  uint64_t v57;
  _QWORD *v58;
  id v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  id v68;
  void *v69;
  uint64_t v70;
  uint64_t v71;
  id v72;
  id v73;
  NSObject *v74;
  os_log_type_t v75;
  int v76;
  uint64_t v77;
  _QWORD *v78;
  id v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  os_log_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  id v89;
  id v90;
  id v91;
  NSObject *v92;
  os_log_type_t v93;
  int v94;
  uint64_t v95;
  id v96;
  id v97;
  _QWORD *v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t v103;
  os_log_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  NSObject *v109;
  os_log_type_t v110;
  uint8_t *v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  void (*v116)(uint64_t, uint64_t);
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  _QWORD *v125;
  os_log_t v126;
  os_log_t v127;
  uint64_t v128;
  id v129;
  uint64_t v130;
  void (*v131)(uint64_t, uint64_t);
  uint64_t v132;
  uint64_t v133;

  v130 = a6;
  v131 = a5;
  v10 = type metadata accessor for InheritanceHealthRecord(0);
  v12 = __chkstk_darwin(v10, v11);
  v14 = (char *)&v124 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v12, v15);
  v18 = (uint64_t)&v124 - v17;
  v20 = __chkstk_darwin(v16, v19);
  v22 = (char *)&v124 - v21;
  v24 = __chkstk_darwin(v20, v23);
  v26 = (char *)&v124 - v25;
  __chkstk_darwin(v24, v27);
  v29 = (char *)&v124 - v28;
  if (!a1 || (v30 = objc_opt_self(CKShare), (v31 = swift_dynamicCastObjCClass(a1, v30)) == 0))
  {
    if (!a2)
      goto LABEL_41;
    v133 = a2;
    swift_errorRetain(a2);
    v48 = sub_1000080B4(&qword_10028E850);
    type metadata accessor for CKError(0);
    v50 = v49;
    if ((swift_dynamicCast(&v132, &v133, v48, v49, 6) & 1) != 0)
    {
      v51 = (void *)v132;
      v52 = sub_100005150((unint64_t *)&qword_10028B678, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_100218478);
      _BridgedStoredNSError.code.getter(&v133, v50, v52);
      if (v133 == 11)
      {
        if (qword_10028ADB8 != -1)
          swift_once(&qword_10028ADB8, sub_100046CE4);
        v53 = type metadata accessor for Logger(0);
        sub_100005288(v53, (uint64_t)qword_1002A89A8);
        sub_100027FE8(a4, (uint64_t)v26, type metadata accessor for InheritanceHealthRecord);
        v54 = a3;
        v55 = Logger.logObject.getter(v54);
        v56 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v55, v56))
        {
          v57 = swift_slowAlloc(22, -1);
          v58 = (_QWORD *)swift_slowAlloc(8, -1);
          v128 = swift_slowAlloc(32, -1);
          v132 = (uint64_t)v54;
          v133 = v128;
          *(_DWORD *)v57 = 138412546;
          v59 = v54;
          v129 = v51;
          v60 = v59;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v132, &v133);
          *v58 = v54;

          *(_WORD *)(v57 + 12) = 2080;
          v62 = UUID.uuidString.getter(v61);
          v64 = v63;
          v132 = sub_1001DEF4C(v62, v63, &v133);
          v51 = v129;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v132, &v133);
          swift_bridgeObjectRelease(v64);
          sub_100028388((uint64_t)v26, type metadata accessor for InheritanceHealthRecord);
          _os_log_impl((void *)&_mh_execute_header, v55, v56, "No CKShareRecord %@ exists for zone %s when checking isSharedAndAccepted, zone is not shared.", (uint8_t *)v57, 0x16u);
          v65 = sub_1000080B4((uint64_t *)&unk_10028BC20);
          swift_arrayDestroy(v58, 1, v65);
          swift_slowDealloc(v58, -1, -1);
          v66 = v128;
          swift_arrayDestroy(v128, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v66, -1, -1);
          swift_slowDealloc(v57, -1, -1);
        }
        else
        {

          sub_100028388((uint64_t)v26, type metadata accessor for InheritanceHealthRecord);
        }

        v131(0, 0);
        return;
      }
      if (qword_10028ADB8 != -1)
        swift_once(&qword_10028ADB8, sub_100046CE4);
      v88 = type metadata accessor for Logger(0);
      sub_100005288(v88, (uint64_t)qword_1002A89A8);
      sub_100027FE8(a4, (uint64_t)v22, type metadata accessor for InheritanceHealthRecord);
      v89 = a3;
      v90 = v51;
      v91 = v89;
      v74 = v90;
      v92 = Logger.logObject.getter(v74);
      v93 = static os_log_type_t.error.getter(v92);
      v94 = v93;
      if (os_log_type_enabled(v92, v93))
      {
        v95 = swift_slowAlloc(32, -1);
        v125 = (_QWORD *)swift_slowAlloc(16, -1);
        v128 = swift_slowAlloc(32, -1);
        v132 = (uint64_t)v91;
        v133 = v128;
        *(_DWORD *)v95 = 138412802;
        v127 = v92;
        v129 = (id)a4;
        v96 = v91;
        LODWORD(v126) = v94;
        v97 = v96;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v132, &v133);
        v98 = v125;
        *v125 = v91;

        *(_WORD *)(v95 + 12) = 2080;
        v100 = UUID.uuidString.getter(v99);
        v102 = v101;
        v132 = sub_1001DEF4C(v100, v101, &v133);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v132, &v133);
        swift_bridgeObjectRelease(v102);
        sub_100028388((uint64_t)v22, type metadata accessor for InheritanceHealthRecord);
        *(_WORD *)(v95 + 22) = 2112;
        v103 = _convertErrorToNSError(_:)(v74);
        v132 = v103;
        a4 = (uint64_t)v129;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v132, &v133);
        v98[1] = v103;

        v104 = v127;
        _os_log_impl((void *)&_mh_execute_header, v127, (os_log_type_t)v126, "Query for CKShareRecord %@ for zone %s failed with ckerror %@", (uint8_t *)v95, 0x20u);
        v105 = sub_1000080B4((uint64_t *)&unk_10028BC20);
        swift_arrayDestroy(v98, 2, v105);
        swift_slowDealloc(v98, -1, -1);
        v106 = v128;
        swift_arrayDestroy(v128, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v106, -1, -1);
        swift_slowDealloc(v95, -1, -1);

        goto LABEL_41;
      }

      sub_100028388((uint64_t)v22, type metadata accessor for InheritanceHealthRecord);
    }
    else
    {
      swift_errorRetain(a2);
      if (qword_10028ADB8 != -1)
        swift_once(&qword_10028ADB8, sub_100046CE4);
      v71 = type metadata accessor for Logger(0);
      sub_100005288(v71, (uint64_t)qword_1002A89A8);
      sub_100027FE8(a4, (uint64_t)v14, type metadata accessor for InheritanceHealthRecord);
      swift_errorRetain(a2);
      v72 = a3;
      swift_errorRetain(a2);
      v73 = v72;
      v74 = Logger.logObject.getter(v73);
      v75 = static os_log_type_t.error.getter(v74);
      v76 = v75;
      if (os_log_type_enabled(v74, v75))
      {
        v77 = swift_slowAlloc(32, -1);
        v78 = (_QWORD *)swift_slowAlloc(16, -1);
        v128 = swift_slowAlloc(32, -1);
        v132 = (uint64_t)v73;
        v133 = v128;
        *(_DWORD *)v77 = 138412802;
        LODWORD(v127) = v76;
        v126 = v74;
        v129 = (id)a4;
        v79 = v73;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v132, &v133);
        *v78 = v73;

        *(_WORD *)(v77 + 12) = 2080;
        v81 = UUID.uuidString.getter(v80);
        v83 = v82;
        v132 = sub_1001DEF4C(v81, v82, &v133);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v132, &v133);
        swift_bridgeObjectRelease(v83);
        sub_100028388((uint64_t)v14, type metadata accessor for InheritanceHealthRecord);
        *(_WORD *)(v77 + 22) = 2112;
        v84 = _convertErrorToNSError(_:)(a2);
        v132 = v84;
        a4 = (uint64_t)v129;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v132, &v133);
        v78[1] = v84;
        swift_errorRelease(a2);
        swift_errorRelease(a2);
        v85 = v126;
        _os_log_impl((void *)&_mh_execute_header, v126, (os_log_type_t)v127, "Query for CKShareRecord %@ for zone %s failed with error %@", (uint8_t *)v77, 0x20u);
        v86 = sub_1000080B4((uint64_t *)&unk_10028BC20);
        swift_arrayDestroy(v78, 2, v86);
        swift_slowDealloc(v78, -1, -1);
        v87 = v128;
        swift_arrayDestroy(v128, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v87, -1, -1);
        swift_slowDealloc(v77, -1, -1);

        swift_errorRelease(a2);
        goto LABEL_41;
      }
      swift_errorRelease(a2);

      sub_100028388((uint64_t)v14, type metadata accessor for InheritanceHealthRecord);
      swift_errorRelease(a2);
      swift_errorRelease(a2);
    }

LABEL_41:
    if (qword_10028ADB8 == -1)
    {
LABEL_42:
      v107 = type metadata accessor for Logger(0);
      sub_100005288(v107, (uint64_t)qword_1002A89A8);
      v108 = sub_100027FE8(a4, v18, type metadata accessor for InheritanceHealthRecord);
      v109 = Logger.logObject.getter(v108);
      v110 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v109, v110))
      {
        v111 = (uint8_t *)swift_slowAlloc(12, -1);
        v112 = swift_slowAlloc(32, -1);
        v133 = v112;
        *(_DWORD *)v111 = 136315138;
        v113 = UUID.uuidString.getter(v112);
        v115 = v114;
        v132 = sub_1001DEF4C(v113, v114, &v133);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v132, &v133);
        swift_bridgeObjectRelease(v115);
        sub_100028388(v18, type metadata accessor for InheritanceHealthRecord);
        _os_log_impl((void *)&_mh_execute_header, v109, v110, "Returning failure for isSharedAndAccepted. Zone: %s", v111, 0xCu);
        swift_arrayDestroy(v112, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v112, -1, -1);
        swift_slowDealloc(v111, -1, -1);
      }
      else
      {
        sub_100028388(v18, type metadata accessor for InheritanceHealthRecord);
      }

      v116 = v131;
      if (a2)
      {
        v117 = a2;
      }
      else
      {
        type metadata accessor for AACustodianError(0);
        v119 = v118;
        v132 = -7003;
        v120 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
        v121 = sub_100005150((unint64_t *)&qword_10028B640, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianError, (uint64_t)&unk_100218378);
        _BridgedStoredNSError.init(_:userInfo:)(&v133, &v132, v120, v119, v121);
        v117 = v133;
      }
      swift_errorRetain(a2);
      v116(v117, 1);
      swift_errorRelease(v117);
      return;
    }
LABEL_50:
    swift_once(&qword_10028ADB8, sub_100046CE4);
    goto LABEL_42;
  }
  v32 = (void *)v31;
  v33 = a1;
  v34 = objc_msgSend(v32, "participants");
  v35 = sub_1000067D4(0, &qword_10028D720, CKShareParticipant_ptr);
  v18 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v34, v35);

  if (qword_10028ADB8 != -1)
    swift_once(&qword_10028ADB8, sub_100046CE4);
  v36 = type metadata accessor for Logger(0);
  sub_100005288(v36, (uint64_t)qword_1002A89A8);
  sub_100027FE8(a4, (uint64_t)v29, type metadata accessor for InheritanceHealthRecord);
  v37 = swift_bridgeObjectRetain_n(v18, 2);
  v38 = Logger.logObject.getter(v37);
  v39 = static os_log_type_t.info.getter();
  v40 = (unint64_t)v18 >> 62;
  if (os_log_type_enabled(v38, v39))
  {
    v41 = swift_slowAlloc(22, -1);
    v42 = swift_slowAlloc(32, -1);
    v133 = v42;
    *(_DWORD *)v41 = 134218242;
    v129 = v33;
    if (v40)
    {
      if (v18 < 0)
        v123 = v18;
      else
        v123 = v18 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v18);
      v43 = _CocoaArrayWrapper.endIndex.getter(v123);
      swift_bridgeObjectRelease(v18);
    }
    else
    {
      v43 = *(_QWORD *)((v18 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease(v18);
    v132 = v43;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v132, &v133);
    v44 = swift_bridgeObjectRelease(v18);
    *(_WORD *)(v41 + 12) = 2080;
    v45 = UUID.uuidString.getter(v44);
    v47 = v46;
    v132 = sub_1001DEF4C(v45, v46, &v133);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v132, &v133);
    swift_bridgeObjectRelease(v47);
    sub_100028388((uint64_t)v29, type metadata accessor for InheritanceHealthRecord);
    _os_log_impl((void *)&_mh_execute_header, v38, v39, "Found %ld participants for zone %s", (uint8_t *)v41, 0x16u);
    swift_arrayDestroy(v42, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v42, -1, -1);
    swift_slowDealloc(v41, -1, -1);

    v33 = v129;
  }
  else
  {
    swift_bridgeObjectRelease_n(v18, 2);
    sub_100028388((uint64_t)v29, type metadata accessor for InheritanceHealthRecord);

  }
  if (v40)
  {
    if (v18 < 0)
      v122 = v18;
    else
      v122 = v18 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v18);
    v67 = _CocoaArrayWrapper.endIndex.getter(v122);
    swift_bridgeObjectRelease(v18);
    if (v67)
    {
LABEL_19:
      a2 = v18 & 0xC000000000000001;
      a4 = 4;
      while (1)
      {
        v68 = a2
            ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(a4 - 4, v18)
            : *(id *)(v18 + 8 * a4);
        v69 = v68;
        v70 = a4 - 3;
        if (__OFADD__(a4 - 4, 1))
          break;
        if ((objc_msgSend(v68, "isCurrentUser") & 1) == 0
          && objc_msgSend(v69, "acceptanceStatus") == (id)2)
        {
          swift_bridgeObjectRelease(v18);
          v131(1, 0);

          goto LABEL_56;
        }

        ++a4;
        if (v70 == v67)
          goto LABEL_55;
      }
      __break(1u);
      goto LABEL_50;
    }
  }
  else
  {
    v67 = *(_QWORD *)((v18 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v67)
      goto LABEL_19;
  }
LABEL_55:
  swift_bridgeObjectRelease(v18);
  v131(0, 0);
LABEL_56:

}

void sub_1000DD198(void *a1, uint64_t a2, void *a3, uint64_t a4, char **a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  id v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  BOOL v39;
  unint64_t v40;
  uint64_t v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  NSObject *v55;
  os_log_type_t v56;
  uint64_t v57;
  _QWORD *v58;
  id v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  id v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  id v71;
  id v72;
  NSObject *v73;
  os_log_type_t v74;
  int v75;
  uint64_t v76;
  _QWORD *v77;
  id v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  os_log_t v84;
  uint64_t v85;
  id v86;
  uint64_t v87;
  id v88;
  id v89;
  id v90;
  os_log_t v91;
  NSObject *v92;
  os_log_type_t v93;
  int v94;
  uint64_t v95;
  _QWORD *v96;
  id v97;
  id v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  os_log_t v103;
  uint64_t v104;
  os_log_t v105;
  uint64_t v106;
  id v107;
  uint64_t v108;
  uint64_t v109;
  NSObject *v110;
  os_log_type_t v111;
  uint8_t *v112;
  char **v113;
  id v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  id v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  os_log_t v126;
  os_log_t v127;
  os_log_t v128;
  id v129;
  char **v130;
  uint64_t v131;
  uint64_t v132;
  id v133;
  uint64_t v134;
  id v135;

  v132 = a6;
  v133 = (id)a4;
  v131 = type metadata accessor for CustodianHealthRecord(0);
  v11 = __chkstk_darwin(v131, v10);
  v13 = (uint64_t)&v126 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v11, v14);
  v17 = (char *)&v126 - v16;
  v19 = __chkstk_darwin(v15, v18);
  v21 = (char *)&v126 - v20;
  v23 = __chkstk_darwin(v19, v22);
  v25 = (char *)&v126 - v24;
  __chkstk_darwin(v23, v26);
  v28 = (char *)&v126 - v27;
  if (!a1 || (v29 = objc_opt_self(CKShare), (v30 = swift_dynamicCastObjCClass(a1, v29)) == 0))
  {
    if (a2)
    {
      v135 = (id)a2;
      swift_errorRetain(a2);
      v48 = sub_1000080B4(&qword_10028E850);
      type metadata accessor for CKError(0);
      v50 = v49;
      if (swift_dynamicCast(&v134, &v135, v48, v49, 6))
      {
        v51 = (void *)v134;
        v52 = sub_100005150((unint64_t *)&qword_10028B678, (uint64_t (*)(uint64_t))type metadata accessor for CKError, (uint64_t)&unk_100218478);
        _BridgedStoredNSError.code.getter(&v135, v50, v52);
        if (v135 == (id)11)
        {
          v129 = v51;
          v130 = a5;
          if (qword_10028ADB8 != -1)
            swift_once(&qword_10028ADB8, sub_100046CE4);
          v53 = type metadata accessor for Logger(0);
          sub_100005288(v53, (uint64_t)qword_1002A89A8);
          sub_100027FE8((uint64_t)v133, (uint64_t)v21, type metadata accessor for CustodianHealthRecord);
          v54 = a3;
          v55 = Logger.logObject.getter(v54);
          v56 = static os_log_type_t.info.getter(v55);
          if (os_log_type_enabled(v55, v56))
          {
            v57 = swift_slowAlloc(22, -1);
            v58 = (_QWORD *)swift_slowAlloc(8, -1);
            v133 = (id)swift_slowAlloc(32, -1);
            v134 = (uint64_t)v54;
            v135 = v133;
            *(_DWORD *)v57 = 138412546;
            v59 = v54;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v134, &v135);
            *v58 = v54;

            *(_WORD *)(v57 + 12) = 2080;
            v61 = UUID.uuidString.getter(v60);
            v63 = v62;
            v134 = sub_1001DEF4C(v61, v62, (uint64_t *)&v135);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v134, &v135);
            swift_bridgeObjectRelease(v63);
            sub_100028388((uint64_t)v21, type metadata accessor for CustodianHealthRecord);
            _os_log_impl((void *)&_mh_execute_header, v55, v56, "No CKShareRecord %@ exists for zone %s when checking isSharedAndAccepted, zone is not shared.", (uint8_t *)v57, 0x16u);
            v64 = sub_1000080B4((uint64_t *)&unk_10028BC20);
            swift_arrayDestroy(v58, 1, v64);
            swift_slowDealloc(v58, -1, -1);
            v65 = (uint64_t)v133;
            swift_arrayDestroy(v133, 1, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v65, -1, -1);
            swift_slowDealloc(v57, -1, -1);
          }
          else
          {

            sub_100028388((uint64_t)v21, type metadata accessor for CustodianHealthRecord);
          }

          ((void (*)(_QWORD, _QWORD))v130)(0, 0);
          return;
        }
        if (qword_10028ADB8 != -1)
          swift_once(&qword_10028ADB8, sub_100046CE4);
        v87 = type metadata accessor for Logger(0);
        sub_100005288(v87, (uint64_t)qword_1002A89A8);
        sub_100027FE8((uint64_t)v133, (uint64_t)v17, type metadata accessor for CustodianHealthRecord);
        v88 = a3;
        v89 = v51;
        v90 = v88;
        v91 = (os_log_t)v89;
        v92 = Logger.logObject.getter(v91);
        v93 = static os_log_type_t.error.getter(v92);
        v94 = v93;
        if (os_log_type_enabled(v92, v93))
        {
          v95 = swift_slowAlloc(32, -1);
          v96 = (_QWORD *)swift_slowAlloc(16, -1);
          v129 = (id)swift_slowAlloc(32, -1);
          v134 = (uint64_t)v90;
          v135 = v129;
          *(_DWORD *)v95 = 138412802;
          v128 = v92;
          v126 = v91;
          v130 = a5;
          v97 = v90;
          LODWORD(v127) = v94;
          v98 = v97;
          a5 = v130;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v134, &v135);
          *v96 = v90;

          *(_WORD *)(v95 + 12) = 2080;
          v100 = UUID.uuidString.getter(v99);
          v102 = v101;
          v134 = sub_1001DEF4C(v100, v101, (uint64_t *)&v135);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v134, &v135);
          swift_bridgeObjectRelease(v102);
          sub_100028388((uint64_t)v17, type metadata accessor for CustodianHealthRecord);
          *(_WORD *)(v95 + 22) = 2112;
          v103 = v126;
          v104 = _convertErrorToNSError(_:)(v126);
          v134 = v104;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v134, &v135);
          v96[1] = v104;

          v105 = v103;
          v91 = v128;
          _os_log_impl((void *)&_mh_execute_header, v128, (os_log_type_t)v127, "Query for CKShareRecord %@ for zone %s failed with ckerror %@", (uint8_t *)v95, 0x20u);
          v106 = sub_1000080B4((uint64_t *)&unk_10028BC20);
          swift_arrayDestroy(v96, 2, v106);
          swift_slowDealloc(v96, -1, -1);
          v107 = v129;
          swift_arrayDestroy(v129, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v107, -1, -1);
          swift_slowDealloc(v95, -1, -1);

        }
        else
        {

          sub_100028388((uint64_t)v17, type metadata accessor for CustodianHealthRecord);
        }

      }
      else
      {
        swift_errorRetain(a2);
        if (qword_10028ADB8 != -1)
          swift_once(&qword_10028ADB8, sub_100046CE4);
        v70 = type metadata accessor for Logger(0);
        sub_100005288(v70, (uint64_t)qword_1002A89A8);
        sub_100027FE8((uint64_t)v133, (uint64_t)v25, type metadata accessor for CustodianHealthRecord);
        swift_errorRetain(a2);
        v71 = a3;
        swift_errorRetain(a2);
        v72 = v71;
        v73 = Logger.logObject.getter(v72);
        v74 = static os_log_type_t.error.getter(v73);
        v75 = v74;
        if (os_log_type_enabled(v73, v74))
        {
          v76 = swift_slowAlloc(32, -1);
          v77 = (_QWORD *)swift_slowAlloc(16, -1);
          v129 = (id)swift_slowAlloc(32, -1);
          v134 = (uint64_t)v72;
          v135 = v129;
          *(_DWORD *)v76 = 138412802;
          v127 = v73;
          LODWORD(v128) = v75;
          v130 = a5;
          v78 = v72;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v134, &v135);
          *v77 = v72;

          *(_WORD *)(v76 + 12) = 2080;
          v80 = UUID.uuidString.getter(v79);
          v82 = v81;
          v134 = sub_1001DEF4C(v80, v81, (uint64_t *)&v135);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v134, &v135);
          swift_bridgeObjectRelease(v82);
          sub_100028388((uint64_t)v25, type metadata accessor for CustodianHealthRecord);
          *(_WORD *)(v76 + 22) = 2112;
          v83 = _convertErrorToNSError(_:)(a2);
          v134 = v83;
          a5 = v130;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v134, &v135);
          v77[1] = v83;
          swift_errorRelease(a2);
          swift_errorRelease(a2);
          v84 = v127;
          _os_log_impl((void *)&_mh_execute_header, v127, (os_log_type_t)v128, "Query for CKShareRecord %@ for zone %s failed with error %@", (uint8_t *)v76, 0x20u);
          v85 = sub_1000080B4((uint64_t *)&unk_10028BC20);
          swift_arrayDestroy(v77, 2, v85);
          swift_slowDealloc(v77, -1, -1);
          v86 = v129;
          swift_arrayDestroy(v129, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v86, -1, -1);
          swift_slowDealloc(v76, -1, -1);

          swift_errorRelease(a2);
        }
        else
        {
          swift_errorRelease(a2);

          sub_100028388((uint64_t)v25, type metadata accessor for CustodianHealthRecord);
          swift_errorRelease(a2);
          swift_errorRelease(a2);

        }
      }
    }
    if (qword_10028ADB8 == -1)
    {
LABEL_42:
      v108 = type metadata accessor for Logger(0);
      sub_100005288(v108, (uint64_t)qword_1002A89A8);
      v109 = sub_100027FE8((uint64_t)v133, v13, type metadata accessor for CustodianHealthRecord);
      v110 = Logger.logObject.getter(v109);
      v111 = static os_log_type_t.info.getter(v110);
      if (os_log_type_enabled(v110, v111))
      {
        v112 = (uint8_t *)swift_slowAlloc(12, -1);
        v113 = a5;
        v114 = (id)swift_slowAlloc(32, -1);
        v135 = v114;
        *(_DWORD *)v112 = 136315138;
        v115 = UUID.uuidString.getter(v114);
        v117 = v116;
        v134 = sub_1001DEF4C(v115, v116, (uint64_t *)&v135);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v134, &v135);
        swift_bridgeObjectRelease(v117);
        sub_100028388(v13, type metadata accessor for CustodianHealthRecord);
        _os_log_impl((void *)&_mh_execute_header, v110, v111, "Returning failure for isSharedAndAccepted. Zone: %s", v112, 0xCu);
        swift_arrayDestroy(v114, 1, (char *)&type metadata for Any + 8);
        v118 = v114;
        a5 = v113;
        swift_slowDealloc(v118, -1, -1);
        swift_slowDealloc(v112, -1, -1);
      }
      else
      {
        sub_100028388(v13, type metadata accessor for CustodianHealthRecord);
      }

      if (a2)
      {
        v119 = a2;
      }
      else
      {
        type metadata accessor for AACustodianError(0);
        v121 = v120;
        v134 = -7003;
        v122 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
        v123 = sub_100005150((unint64_t *)&qword_10028B640, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianError, (uint64_t)&unk_100218378);
        _BridgedStoredNSError.init(_:userInfo:)(&v135, &v134, v122, v121, v123);
        v119 = (uint64_t)v135;
      }
      swift_errorRetain(a2);
      ((void (*)(uint64_t, uint64_t))a5)(v119, 1);
      swift_errorRelease(v119);
      return;
    }
LABEL_50:
    swift_once(&qword_10028ADB8, sub_100046CE4);
    goto LABEL_42;
  }
  v31 = (void *)v30;
  v32 = a1;
  v33 = objc_msgSend(v31, "participants");
  v34 = sub_1000067D4(0, &qword_10028D720, CKShareParticipant_ptr);
  v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v33, v34);

  if (qword_10028ADB8 != -1)
    swift_once(&qword_10028ADB8, sub_100046CE4);
  v35 = type metadata accessor for Logger(0);
  sub_100005288(v35, (uint64_t)qword_1002A89A8);
  sub_100027FE8((uint64_t)v133, (uint64_t)v28, type metadata accessor for CustodianHealthRecord);
  v36 = swift_bridgeObjectRetain_n(v13, 2);
  v37 = Logger.logObject.getter(v36);
  v38 = static os_log_type_t.info.getter(v37);
  v39 = os_log_type_enabled(v37, v38);
  v40 = (unint64_t)v13 >> 62;
  v130 = a5;
  if (v39)
  {
    v133 = v32;
    v41 = swift_slowAlloc(22, -1);
    v42 = (id)swift_slowAlloc(32, -1);
    v135 = v42;
    *(_DWORD *)v41 = 134218242;
    if (v40)
    {
      if (v13 < 0)
        v125 = v13;
      else
        v125 = v13 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v13);
      v43 = _CocoaArrayWrapper.endIndex.getter(v125);
      swift_bridgeObjectRelease(v13);
    }
    else
    {
      v43 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease(v13);
    v134 = v43;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v134, &v135);
    v44 = swift_bridgeObjectRelease(v13);
    *(_WORD *)(v41 + 12) = 2080;
    v45 = UUID.uuidString.getter(v44);
    v47 = v46;
    v134 = sub_1001DEF4C(v45, v46, (uint64_t *)&v135);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v134, &v135);
    swift_bridgeObjectRelease(v47);
    sub_100028388((uint64_t)v28, type metadata accessor for CustodianHealthRecord);
    _os_log_impl((void *)&_mh_execute_header, v37, v38, "Found %ld participants for zone %s", (uint8_t *)v41, 0x16u);
    swift_arrayDestroy(v42, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v42, -1, -1);
    swift_slowDealloc(v41, -1, -1);

    v32 = v133;
  }
  else
  {
    swift_bridgeObjectRelease_n(v13, 2);
    sub_100028388((uint64_t)v28, type metadata accessor for CustodianHealthRecord);

  }
  if (v40)
  {
    if (v13 < 0)
      v124 = v13;
    else
      v124 = v13 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v13);
    v66 = _CocoaArrayWrapper.endIndex.getter(v124);
    swift_bridgeObjectRelease(v13);
    if (v66)
    {
LABEL_19:
      a2 = 4;
      a5 = &off_100287000;
      while (1)
      {
        v67 = (v13 & 0xC000000000000001) != 0
            ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(a2 - 4, v13)
            : *(id *)(v13 + 8 * a2);
        v68 = v67;
        v69 = a2 - 3;
        if (__OFADD__(a2 - 4, 1))
          break;
        if ((objc_msgSend(v67, "isCurrentUser") & 1) == 0
          && objc_msgSend(v68, "acceptanceStatus") == (id)2)
        {
          swift_bridgeObjectRelease(v13);
          ((void (*)(uint64_t, _QWORD))v130)(1, 0);

          goto LABEL_56;
        }

        ++a2;
        if (v69 == v66)
          goto LABEL_55;
      }
      __break(1u);
      goto LABEL_50;
    }
  }
  else
  {
    v66 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v66)
      goto LABEL_19;
  }
LABEL_55:
  swift_bridgeObjectRelease(v13);
  ((void (*)(_QWORD, _QWORD))v130)(0, 0);
LABEL_56:

}

uint64_t sub_1000DDFD8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t (*v44)(uint64_t);
  void *v45;
  uint64_t v46;
  _QWORD *v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t (**v61)(uint64_t);
  _QWORD *v62;
  _QWORD *v63;
  void *v64;
  id v65;
  uint64_t v66;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(uint64_t, uint64_t, uint64_t);
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  id v74;
  char *v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86[6];

  v76 = a4;
  v73 = a3;
  v74 = a2;
  v6 = *a5;
  v81 = a5;
  v82 = v6;
  v7 = sub_1000080B4((uint64_t *)&unk_100295380);
  v77 = *(_QWORD **)(v7 - 8);
  __chkstk_darwin(v7, v8);
  v75 = (char *)&v68 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for UUID(0);
  v83 = *(_QWORD *)(v10 - 8);
  v11 = *(_QWORD *)(v83 + 64);
  v13 = __chkstk_darwin(v10, v12);
  v79 = (char *)&v68 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13, v14);
  v84 = (uint64_t)&v68 - v15;
  v16 = type metadata accessor for BeneficiaryInfoRecord(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(_QWORD *)(v17 + 64);
  v20 = __chkstk_darwin(v16, v19);
  v72 = (uint64_t)&v68 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20, v21);
  v23 = (char *)&v68 - v22;
  if (qword_10028ADD8 != -1)
    swift_once(&qword_10028ADD8, sub_100046D78);
  v24 = type metadata accessor for Logger(0);
  sub_100005288(v24, (uint64_t)qword_1002A8A08);
  v25 = sub_100027FE8(a1, (uint64_t)v23, type metadata accessor for BeneficiaryInfoRecord);
  v26 = Logger.logObject.getter(v25);
  v27 = static os_log_type_t.info.getter();
  v28 = os_log_type_enabled(v26, v27);
  v80 = v10;
  v78 = v11;
  if (v28)
  {
    v69 = v17;
    v70 = (void (*)(uint64_t, uint64_t, uint64_t))a1;
    v71 = v7;
    v29 = swift_slowAlloc(22, -1);
    v30 = swift_slowAlloc(64, -1);
    v86[0] = v30;
    *(_DWORD *)v29 = 136315394;
    if (qword_10028AE68 != -1)
      swift_once(&qword_10028AE68, sub_1000D48E0);
    v32 = qword_100290CB8;
    v31 = unk_100290CC0;
    swift_bridgeObjectRetain(unk_100290CC0);
    v85 = sub_1001DEF4C(v32, v31, v86);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v85, v86);
    swift_bridgeObjectRelease(v31);
    *(_WORD *)(v29 + 12) = 2080;
    v33 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v10 = v80;
    v34 = dispatch thunk of CustomStringConvertible.description.getter(v80, v33);
    v36 = v35;
    v85 = sub_1001DEF4C(v34, v35, v86);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v85, v86);
    swift_bridgeObjectRelease(v36);
    sub_100028388((uint64_t)v23, type metadata accessor for BeneficiaryInfoRecord);
    _os_log_impl((void *)&_mh_execute_header, v26, v27, "%s - fetching health record for beneficiaryID: %s", (uint8_t *)v29, 0x16u);
    swift_arrayDestroy(v30, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v30, -1, -1);
    swift_slowDealloc(v29, -1, -1);

    a1 = (uint64_t)v70;
    v7 = v71;
    v17 = v69;
  }
  else
  {
    sub_100028388((uint64_t)v23, type metadata accessor for BeneficiaryInfoRecord);

  }
  v70 = *(void (**)(uint64_t, uint64_t, uint64_t))(v83 + 16);
  v70(v84, a1, v10);
  v37 = swift_allocObject(&unk_1002667D0, 24, 7);
  v38 = v81;
  swift_weakInit(v37 + 16, v81);
  v39 = v72;
  sub_100027FE8(a1, v72, type metadata accessor for BeneficiaryInfoRecord);
  v40 = *(unsigned __int8 *)(v17 + 80);
  v41 = (v40 + 48) & ~v40;
  v42 = (v18 + v41 + 7) & 0xFFFFFFFFFFFFFFF8;
  v43 = (v42 + 15) & 0xFFFFFFFFFFFFFFF8;
  v44 = (uint64_t (*)(uint64_t))swift_allocObject(&unk_1002668C0, v43 + 8, v40 | 7);
  v45 = v74;
  *((_QWORD *)v44 + 2) = v74;
  *((_QWORD *)v44 + 3) = &off_10026D230;
  v46 = v76;
  *((_QWORD *)v44 + 4) = v73;
  *((_QWORD *)v44 + 5) = v46;
  sub_10003B730(v39, (uint64_t)v44 + v41, type metadata accessor for BeneficiaryInfoRecord);
  v71 = v37;
  *(_QWORD *)((char *)v44 + v42) = v37;
  *(_QWORD *)((char *)v44 + v43) = v82;
  v47 = v77;
  v48 = v75;
  ((void (*)(char *, uint64_t, uint64_t))v77[2])(v75, (uint64_t)v38 + OBJC_IVAR____TtC13appleaccountd22BeneficiaryHealthCheck__inheritanceStorage, v7);
  v74 = v45;
  swift_retain(v46);
  swift_retain(v37);
  Dependency.wrappedValue.getter(v86, v7);
  ((void (*)(char *, uint64_t))v47[1])(v48, v7);
  v77 = sub_10000732C(v86, v86[3]);
  v49 = v79;
  v50 = v80;
  v70((uint64_t)v79, v84, v80);
  v51 = v83;
  v52 = *(unsigned __int8 *)(v83 + 80);
  v53 = (v52 + 16) & ~v52;
  v54 = (v78 + v53 + 7) & 0xFFFFFFFFFFFFFFF8;
  v55 = (v54 + 23) & 0xFFFFFFFFFFFFFFF8;
  v56 = (v55 + 15) & 0xFFFFFFFFFFFFFFF8;
  v57 = (v56 + 23) & 0xFFFFFFFFFFFFFFF8;
  v58 = swift_allocObject(&unk_1002668E8, v57 + 8, v52 | 7);
  v59 = v58 + v53;
  v60 = v50;
  (*(void (**)(uint64_t, char *, uint64_t))(v51 + 32))(v59, v49, v50);
  v61 = (uint64_t (**)(uint64_t))(v58 + v54);
  *v61 = sub_1000DF510;
  v61[1] = v44;
  v62 = v81;
  *(_QWORD *)(v58 + v55) = v81;
  v63 = (_QWORD *)(v58 + v56);
  v64 = v74;
  *v63 = v74;
  v63[1] = &off_10026D230;
  *(_QWORD *)(v58 + v57) = v82;
  v65 = v64;
  swift_retain(v44);
  swift_retain(v62);
  v66 = v84;
  sub_1000C8F4C(v84, (uint64_t)sub_1000DF61C, v58);
  swift_release(v58);
  sub_100006F58(v86);
  swift_release(v44);
  (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v66, v60);
  return swift_release(v71);
}

uint64_t sub_1000DE5A4(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  __n128 v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  void *v59;
  uint64_t v60;
  uint64_t v61[4];
  uint64_t v62[6];

  v3 = v2;
  v6 = *v2;
  v7 = sub_1000080B4((uint64_t *)&unk_100295380);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  v58 = (char *)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1000080B4(&qword_10028C060);
  v56 = *(_QWORD *)(v11 - 8);
  v57 = v11;
  __chkstk_darwin(v11, v12);
  v55 = (char *)&v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_1000080B4(&qword_10028FA50);
  v53 = *(_QWORD *)(v14 - 8);
  v54 = v14;
  __chkstk_darwin(v14, v15);
  v52 = (char *)&v45 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_1000080B4(&qword_10028C080);
  v51 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17, v18);
  v20 = (char *)&v45 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10028ADD8 != -1)
    swift_once(&qword_10028ADD8, sub_100046D78);
  v21 = type metadata accessor for Logger(0);
  v22 = sub_100005288(v21, (uint64_t)qword_1002A8A08);
  v23 = Logger.logObject.getter(v22);
  v25 = static os_log_type_t.default.getter(v24);
  if (os_log_type_enabled(v23, v25))
  {
    v46 = v8;
    v47 = v7;
    v48 = a1;
    v49 = v6;
    v50 = a2;
    v26 = (uint8_t *)swift_slowAlloc(12, -1);
    v27 = swift_slowAlloc(32, -1);
    v62[0] = v27;
    *(_DWORD *)v26 = 136315138;
    if (qword_10028AE68 != -1)
      swift_once(&qword_10028AE68, sub_1000D48E0);
    v28 = qword_100290CB8;
    v29 = unk_100290CC0;
    swift_bridgeObjectRetain(unk_100290CC0);
    v60 = sub_1001DEF4C(v28, v29, v62);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, v61);
    swift_bridgeObjectRelease(v29);
    _os_log_impl((void *)&_mh_execute_header, v23, v25, "%s - started.", v26, 0xCu);
    swift_arrayDestroy(v27, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v27, -1, -1);
    swift_slowDealloc(v26, -1, -1);

    v6 = v49;
    a2 = v50;
    a1 = v48;
    v7 = v47;
    v8 = v46;
  }
  else
  {

  }
  v30 = v51;
  (*(void (**)(char *, uint64_t, uint64_t))(v51 + 16))(v20, (uint64_t)v3 + OBJC_IVAR____TtC13appleaccountd22BeneficiaryHealthCheck__beneficiaryInfoVerificationProtocol, v17);
  Dependency.wrappedValue.getter(v62, v17);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v20, v17);
  v31 = v52;
  v32 = v53;
  v33 = v54;
  (*(void (**)(char *, uint64_t, uint64_t))(v53 + 16))(v52, (uint64_t)v3 + OBJC_IVAR____TtC13appleaccountd22BeneficiaryHealthCheck__accountStore, v54);
  Dependency.wrappedValue.getter(&v60, v33);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v31, v33);
  v34 = v55;
  v35 = v56;
  v36 = v57;
  (*(void (**)(char *, uint64_t, uint64_t))(v56 + 16))(v55, (uint64_t)v3 + OBJC_IVAR____TtC13appleaccountd22BeneficiaryHealthCheck__akAccountManager, v57);
  Dependency.wrappedValue.getter(&v59, v36);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v34, v36);
  v37 = v59;
  v38 = sub_10000732C(&v60, v61[2]);
  v39 = sub_10002193C(*v38, v37);

  sub_100006F58(&v60);
  v40 = *(_QWORD *)((char *)v3 + OBJC_IVAR____TtC13appleaccountd22BeneficiaryHealthCheck_idMSBeneficiaryCryptoData);
  *(_QWORD *)((char *)v3 + OBJC_IVAR____TtC13appleaccountd22BeneficiaryHealthCheck_idMSBeneficiaryCryptoData) = v39;
  swift_bridgeObjectRelease(v40);
  sub_100006F58(v62);
  v41 = v58;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v58, (uint64_t)v3 + OBJC_IVAR____TtC13appleaccountd22BeneficiaryHealthCheck__inheritanceStorage, v7);
  Dependency.wrappedValue.getter(v62, v7);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v41, v7);
  sub_10000732C(v62, v62[3]);
  v42 = swift_allocObject(&unk_1002667D0, 24, 7);
  swift_weakInit(v42 + 16, v3);
  v43 = (_QWORD *)swift_allocObject(&unk_1002667F8, 48, 7);
  v43[2] = v42;
  v43[3] = a1;
  v43[4] = a2;
  v43[5] = v6;
  swift_retain(v42);
  swift_retain(a2);
  sub_100006A8C((uint64_t)sub_1000DEABC, (uint64_t)v43);
  swift_release(v42);
  swift_release(v43);
  return sub_100006F58(v62);
}

uint64_t sub_1000DEA6C()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000DEA90()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 48, 7);
}

void sub_1000DEABC(uint64_t a1, char a2)
{
  uint64_t v2;

  sub_1000D4928(a1, a2 & 1, *(_QWORD *)(v2 + 16), *(void (**)(_QWORD))(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40));
}

uint64_t sub_1000DEACC(uint64_t a1)
{
  return sub_1000DEB58(a1, type metadata accessor for FinalizeCustodianSetupMessage, (unint64_t *)&unk_100290E50, (uint64_t)&unk_10021DD10);
}

uint64_t sub_1000DEAE8(uint64_t a1)
{
  return sub_1000DEB58(a1, type metadata accessor for ShareMessage, &qword_100290E28, (uint64_t)&unk_10021E138);
}

uint64_t sub_1000DEB04(uint64_t a1)
{
  return sub_1000DEB58(a1, type metadata accessor for CustodianInvitationMessage, &qword_100290E40, (uint64_t)&unk_100222918);
}

uint64_t sub_1000DEB20(uint64_t a1)
{
  return sub_1000DEB58(a1, type metadata accessor for CustodianRemovedMessage, &qword_100290E48, (uint64_t)&unk_1002193B0);
}

uint64_t sub_1000DEB3C(uint64_t a1)
{
  return sub_1000DEB58(a1, type metadata accessor for CustodianInvitationResponseMessage, &qword_100290E38, (uint64_t)&unk_10021E468);
}

uint64_t sub_1000DEB58(uint64_t a1, uint64_t (*a2)(uint64_t), unint64_t *a3, uint64_t a4)
{
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v14 = a1;
  v7 = type metadata accessor for JSONEncoder(0);
  swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
  v9 = JSONEncoder.init()(v8);
  v10 = a2(0);
  v11 = sub_100005150(a3, a2, a4);
  v12 = dispatch thunk of JSONEncoder.encode<A>(_:)(&v14, v10, v11);
  swift_release(v9);
  return v12;
}

uint64_t sub_1000DED78(uint64_t a1)
{
  return sub_1000DED94(a1, type metadata accessor for CustodianRecoveryKeys, &qword_100290E30, (uint64_t)&unk_100220040);
}

uint64_t sub_1000DED94(uint64_t a1, uint64_t (*a2)(uint64_t), unint64_t *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v8 = type metadata accessor for JSONEncoder(0);
  swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
  v9 = JSONEncoder.init()();
  v10 = a2(0);
  v11 = sub_100005150(a3, a2, a4);
  v12 = dispatch thunk of JSONEncoder.encode<A>(_:)(a1, v10, v11);
  swift_release(v9);
  return v12;
}

uint64_t sub_1000DEFAC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;

  if (a2 >= a1)
  {
    if (a1 >= a2)
    {
      if (qword_10028ADD8 != -1)
        swift_once(&qword_10028ADD8, sub_100046D78);
      v12 = type metadata accessor for Logger(0);
      v13 = sub_100005288(v12, (uint64_t)qword_1002A8A08);
      v6 = Logger.logObject.getter(v13);
      v7 = static os_log_type_t.debug.getter(v6);
      if (!os_log_type_enabled(v6, v7))
        goto LABEL_15;
      v8 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v8 = 0;
      v9 = "idMS has EQUAL number of beneficiaries registered.";
    }
    else
    {
      if (qword_10028ADD8 != -1)
        swift_once(&qword_10028ADD8, sub_100046D78);
      v10 = type metadata accessor for Logger(0);
      v11 = sub_100005288(v10, (uint64_t)qword_1002A8A08);
      v6 = Logger.logObject.getter(v11);
      v7 = static os_log_type_t.debug.getter(v6);
      if (!os_log_type_enabled(v6, v7))
        goto LABEL_15;
      v8 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v8 = 0;
      v9 = "idMS has LESS number of beneficiaries registered.";
    }
    goto LABEL_14;
  }
  if (qword_10028ADD8 != -1)
    goto LABEL_18;
  while (1)
  {
    v4 = type metadata accessor for Logger(0);
    v5 = sub_100005288(v4, (uint64_t)qword_1002A8A08);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.debug.getter(v6);
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v8 = 0;
      v9 = "idMS has MORE number of beneficiaries registered.";
LABEL_14:
      _os_log_impl((void *)&_mh_execute_header, v6, v7, v9, v8, 2u);
      swift_slowDealloc(v8, -1, -1);
    }
LABEL_15:

    result = a1 - a2;
    if (!__OFSUB__(a1, a2))
      break;
    __break(1u);
LABEL_18:
    swift_once(&qword_10028ADD8, sub_100046D78);
  }
  return result;
}

uint64_t sub_1000DF1A8()
{
  uint64_t v0;

  swift_errorRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000DF1CC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000DF1F8()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;

  v1 = (int *)type metadata accessor for BeneficiaryInfoRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v0 + v4;
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v0 + v4, v7);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[5] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[6] + 8));
  sub_10000F494(*(_QWORD *)(v6 + v1[7]), *(_QWORD *)(v6 + v1[7] + 8));
  v9(v0 + v4 + v1[8], v7);
  sub_10000F494(*(_QWORD *)(v6 + v1[9]), *(_QWORD *)(v6 + v1[9] + 8));
  v10 = v0 + v4 + v1[11];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v10, 1, v7))
    v9(v10, v7);
  v11 = (v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v12 = (v11 + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[12] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[14] + 8));
  swift_release(*(_QWORD *)(v0 + v11));

  return swift_deallocObject(v0, ((v12 + 15) & 0xFFFFFFFFFFFFFFF8) + 8, v3 | 7);
}

void sub_1000DF350(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v3 = *(_QWORD *)(type metadata accessor for BeneficiaryInfoRecord(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_1000D5A5C(a1, v1 + v4, *(_QWORD *)(v1 + v5), *(NSObject **)(v1 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t sub_1000DF3B8()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  unint64_t v11;

  v1 = (int *)type metadata accessor for BeneficiaryInfoRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 48) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 40));
  v6 = v0 + v4;
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v0 + v4, v7);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[5] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[6] + 8));
  sub_10000F494(*(_QWORD *)(v6 + v1[7]), *(_QWORD *)(v6 + v1[7] + 8));
  v9(v0 + v4 + v1[8], v7);
  sub_10000F494(*(_QWORD *)(v6 + v1[9]), *(_QWORD *)(v6 + v1[9] + 8));
  v10 = v0 + v4 + v1[11];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v10, 1, v7))
    v9(v10, v7);
  v11 = (v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[12] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[14] + 8));
  swift_release(*(_QWORD *)(v0 + v11));
  return swift_deallocObject(v0, ((v11 + 15) & 0xFFFFFFFFFFFFFFF8) + 8, v3 | 7);
}

uint64_t sub_1000DF510(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v3 = *(_QWORD *)(type metadata accessor for BeneficiaryInfoRecord(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_1000D6594(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(void (**)(uint64_t))(v1 + 32), *(void (**)(uint64_t))(v1 + 40), v1 + v4, *(_QWORD **)(v1 + v5), *(_QWORD *)(v1 + ((v5 + 15) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_1000DF574()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 23) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v6 + 8));
  swift_release(*(_QWORD *)(v0 + v7));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + v8));
  return swift_deallocObject(v0, ((v8 + 23) & 0xFFFFFFFFFFFFFFF8) + 8, v5);
}

uint64_t sub_1000DF61C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v3 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_1000D7780(a1, v1 + v4, *(void (**)(uint64_t *))(v1 + v5), *(_QWORD *)(v1 + v5 + 8), *(char **)(v1 + ((v5 + 23) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v1 + ((((v5 + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v1 + ((((v5 + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
}

unint64_t sub_1000DF698()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100290E10;
  if (!qword_100290E10)
  {
    v1 = sub_1000067D4(255, &qword_10028FB98, AAMessagingCapability_ptr);
    result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_100290E10);
  }
  return result;
}

uint64_t sub_1000DF6F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000080B4(&qword_10028D658);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000DF738()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(unint64_t, uint64_t);
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  void (*v17)(uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v1 = (int *)type metadata accessor for BeneficiaryInfoRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v19 = *(_QWORD *)(v2 + 64);
  v20 = *(unsigned __int8 *)(v2 + 80);
  v4 = (int *)type metadata accessor for InheritanceInvitationRecord(0);
  v5 = *((_QWORD *)v4 - 1);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v18 = *(_QWORD *)(v5 + 64);
  v7 = v0 + v3;
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(void (**)(unint64_t, uint64_t))(v9 + 8);
  v10(v0 + v3, v8);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v3 + v1[5] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v3 + v1[6] + 8));
  sub_10000F494(*(_QWORD *)(v7 + v1[7]), *(_QWORD *)(v7 + v1[7] + 8));
  v10(v0 + v3 + v1[8], v8);
  sub_10000F494(*(_QWORD *)(v7 + v1[9]), *(_QWORD *)(v7 + v1[9] + 8));
  v11 = v0 + v3 + v1[11];
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v9 + 48))(v11, 1, v8))
    v10(v11, v8);
  v12 = (v19 + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  v13 = (v12 + 23) & 0xFFFFFFFFFFFFFFF8;
  v17 = (void (*)(uint64_t, uint64_t))v10;
  v14 = (v13 + 23) & 0xFFFFFFFFFFFFFFF8;
  v15 = (v6 + v14 + 8) & ~v6;
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[12] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[14] + 8));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + v12));
  swift_release(*(_QWORD *)(v0 + v13 + 8));
  swift_release(*(_QWORD *)(v0 + v14));
  v17(v0 + v15, v8);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v15 + v4[5] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v15 + v4[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v15 + v4[7] + 8));
  v17(v0 + v15 + v4[9], v8);
  sub_10000F494(*(_QWORD *)(v0 + v15 + v4[10]), *(_QWORD *)(v0 + v15 + v4[10] + 8));
  return swift_deallocObject(v0, ((v18 + v15 + 7) & 0xFFFFFFFFFFFFFFF8) + 8, v20 | v6 | 7);
}

uint64_t sub_1000DF958(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v3 = *(_QWORD *)(type metadata accessor for BeneficiaryInfoRecord(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = (v5 + 23) & 0xFFFFFFFFFFFFFFF8;
  v7 = *(_QWORD *)(type metadata accessor for InheritanceInvitationRecord(0) - 8);
  return sub_1000D707C(a1, v1 + v4, *(_QWORD *)(v1 + v5), *(_QWORD *)(v1 + v5 + 8), *(void (**)(uint64_t))(v1 + v6), *(_QWORD *)(v1 + v6 + 8), *(_QWORD *)(v1 + ((v6 + 23) & 0xFFFFFFFFFFFFFFF8)), v1+ ((*(unsigned __int8 *)(v7 + 80) + ((v6 + 23) & 0xFFFFFFFFFFFFFFF8) + 8) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80)));
}

uint64_t sub_1000DFA1C()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v1 = (int *)type metadata accessor for BeneficiaryInfoRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v25 = *(unsigned __int8 *)(v2 + 80);
  v22 = *(_QWORD *)(v2 + 64);
  v3 = (int *)type metadata accessor for InheritanceInvitationRecord(0);
  v4 = *((_QWORD *)v3 - 1);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v21 = *(_QWORD *)(v4 + 64);
  v26 = type metadata accessor for InheritanceHealthRecord(0);
  v6 = *(_QWORD *)(v26 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v20 = *(_QWORD *)(v6 + 64);
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  v24 = (v25 + 40) & ~v25;
  v8 = v0 + v24;
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
  v11(v0 + v24, v9);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v24 + v1[5] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v24 + v1[6] + 8));
  sub_10000F494(*(_QWORD *)(v8 + v1[7]), *(_QWORD *)(v8 + v1[7] + 8));
  v11(v0 + v24 + v1[8], v9);
  sub_10000F494(*(_QWORD *)(v8 + v1[9]), *(_QWORD *)(v8 + v1[9] + 8));
  v12 = v0 + v24 + v1[11];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v12, 1, v9))
    v11(v12, v9);
  v13 = (v24 + v22 + v5) & ~v5;
  v14 = (v13 + v21 + v7) & ~v7;
  v23 = (v20 + v14 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease(*(_QWORD *)(v8 + v1[12] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v8 + v1[14] + 8));
  v11(v0 + v13, v9);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v13 + v3[5] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v13 + v3[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v13 + v3[7] + 8));
  v11(v0 + v13 + v3[9], v9);
  sub_10000F494(*(_QWORD *)(v0 + v13 + v3[10]), *(_QWORD *)(v0 + v13 + v3[10] + 8));
  v15 = v0 + v14;
  v11(v0 + v14, v9);
  v16 = v26;
  v17 = v15 + *(int *)(v26 + 20);
  v18 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v17, v18);
  sub_10000F494(*(_QWORD *)(v15 + *(int *)(v16 + 24)), *(_QWORD *)(v15 + *(int *)(v16 + 24) + 8));
  v11(v15 + *(int *)(v26 + 28), v9);
  sub_10000F494(*(_QWORD *)(v15 + *(int *)(v16 + 32)), *(_QWORD *)(v15 + *(int *)(v16 + 32) + 8));
  swift_release(*(_QWORD *)(v0 + v23 + 8));
  return swift_deallocObject(v0, ((v23 + 23) & 0xFFFFFFFFFFFFFFF8) + 8, v25 | v5 | v7 | 7);
}

uint64_t sub_1000DFCC8(char a1)
{
  uint64_t *v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v3 = *(_QWORD *)(type metadata accessor for BeneficiaryInfoRecord(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = *(_QWORD *)(v3 + 64);
  v6 = *(_QWORD *)(type metadata accessor for InheritanceInvitationRecord(0) - 8);
  v7 = (v4 + v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = *(_QWORD *)(type metadata accessor for InheritanceHealthRecord(0) - 8);
  v10 = (v7 + v8 + *(unsigned __int8 *)(v9 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v11 = (*(_QWORD *)(v9 + 64) + v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_1000D917C(a1, v1[2], v1[3], v1[4], (uint64_t)v1 + v4, (uint64_t)v1 + v7, (uint64_t)v1 + v10, *(uint64_t (**)(_QWORD))((char *)v1 + v11), *(uint64_t *)((char *)v1 + v11 + 8));
}

uint64_t sub_1000DFD98()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;

  v1 = (int *)type metadata accessor for InheritanceHealthRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = v0 + v4;
  v8 = type metadata accessor for UUID(0);
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8);
  v9(v7, v8);
  v10 = v7 + v1[5];
  v11 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  sub_10000F494(*(_QWORD *)(v7 + v1[6]), *(_QWORD *)(v7 + v1[6] + 8));
  v9(v7 + v1[7], v8);
  sub_10000F494(*(_QWORD *)(v7 + v1[8]), *(_QWORD *)(v7 + v1[8] + 8));
  swift_release(*(_QWORD *)(v0 + v6 + 8));
  return swift_deallocObject(v0, ((v6 + 23) & 0xFFFFFFFFFFFFFFF8) + 8, v5);
}

uint64_t sub_1000DFE9C(uint64_t a1, char a2)
{
  uint64_t v2;
  char v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  v4 = a2 & 1;
  v5 = *(_QWORD *)(type metadata accessor for InheritanceHealthRecord(0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = v2 + ((*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  return sub_1000DBB9C(a1, v4, v2 + v6, *(void (**)(uint64_t))v7, *(_QWORD *)(v7 + 8));
}

void sub_1000DFF0C(char a1, void *a2, uint64_t a3)
{
  uint64_t v4;
  void *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  void *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  *(_BYTE *)(a3 + qword_1002965F0) = a1;
  v4 = qword_1002965E8;
  v5 = *(void **)(a3 + qword_1002965E8);
  *(_QWORD *)(a3 + qword_1002965E8) = a2;
  v6 = a2;

  if (qword_10028ADD8 != -1)
    swift_once(&qword_10028ADD8, sub_100046D78);
  v7 = type metadata accessor for Logger(0);
  sub_100005288(v7, (uint64_t)qword_1002A8A08);
  v8 = swift_unknownObjectRetain_n(a3, 2);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.debug.getter(v9);
  if (os_log_type_enabled(v9, v10))
  {
    v11 = swift_slowAlloc(22, -1);
    v12 = (_QWORD *)swift_slowAlloc(8, -1);
    v13 = swift_slowAlloc(32, -1);
    v20 = v13;
    *(_DWORD *)v11 = 136315394;
    if (qword_10028AE68 != -1)
      swift_once(&qword_10028AE68, sub_1000D48E0);
    v14 = qword_100290CB8;
    v15 = unk_100290CC0;
    swift_bridgeObjectRetain(unk_100290CC0);
    v19 = sub_1001DEF4C(v14, v15, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20);
    swift_bridgeObjectRelease(v15);
    *(_WORD *)(v11 + 12) = 2112;
    v16 = *(void **)(a3 + v4);
    if (v16)
    {
      v19 = (uint64_t)v16;
      v17 = v16;
    }
    else
    {
      v19 = 0;
    }
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20);
    *v12 = v16;
    swift_unknownObjectRelease_n(a3, 2);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "%s: claimCodeVerificationError appended to the event\n%@", (uint8_t *)v11, 0x16u);
    v18 = sub_1000080B4((uint64_t *)&unk_10028BC20);
    swift_arrayDestroy(v12, 1, v18);
    swift_slowDealloc(v12, -1, -1);
    swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1, -1);
    swift_slowDealloc(v11, -1, -1);

  }
  else
  {

    swift_unknownObjectRelease_n(a3, 2);
  }
}

void sub_1000E01C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  Swift::String v18;
  void *v19;
  Swift::String v20;
  Class isa;
  uint64_t v22;
  void *v23;
  void *v24;
  objc_class *v25;
  Swift::String v26;
  Class v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  objc_class *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD aBlock[5];
  uint64_t v40;

  v37 = a2;
  v38 = a3;
  v4 = type metadata accessor for InheritanceHealthRecord(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(v4, v7);
  v8 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10028AF00 != -1)
    swift_once(&qword_10028AF00, sub_1001FD458);
  if (*(_BYTE *)(a1 + *(int *)(v4 + 36)) == 1)
  {
    if (qword_10028AF20 != -1)
      swift_once(&qword_10028AF20, sub_1001FDDFC);
    v9 = &qword_1002A8CA0;
  }
  else
  {
    if (qword_10028AF18 != -1)
      swift_once(&qword_10028AF18, sub_1001FDDC4);
    v9 = &qword_1002A8C90;
  }
  v10 = *v9;
  v11 = v9[1];
  swift_bridgeObjectRetain(v11);
  v12 = sub_1001FD4C0(v10, v11);
  v13 = objc_msgSend(v12, "privateCloudDatabase");
  swift_bridgeObjectRelease(v11);

  v14 = sub_1000067D4(0, (unint64_t *)&qword_1002953A0, CKRecordZoneID_ptr);
  v15 = UUID.uuidString.getter(v14);
  v17 = v16;
  v18._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)(CKCurrentUserDefaultName);
  v18._object = v19;
  v20._countAndFlagsBits = v15;
  v20._object = v17;
  isa = CKRecordZoneID.init(zoneName:ownerName:)(v20, v18).super.isa;
  sub_1000067D4(0, (unint64_t *)&qword_10028D580, CKRecordID_ptr);
  v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(CKRecordNameZoneWideShare);
  v24 = v23;
  v25 = isa;
  v26._countAndFlagsBits = v22;
  v26._object = v24;
  v27 = CKRecordID.init(recordName:zoneID:)(v26, (CKRecordZoneID)v25).super.isa;
  sub_100027FE8(a1, (uint64_t)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for InheritanceHealthRecord);
  v28 = *(unsigned __int8 *)(v5 + 80);
  v29 = (v28 + 24) & ~v28;
  v30 = (v6 + v29 + 7) & 0xFFFFFFFFFFFFFFF8;
  v31 = swift_allocObject(&unk_100266988, v30 + 16, v28 | 7);
  *(_QWORD *)(v31 + 16) = v27;
  sub_10003B730((uint64_t)v8, v31 + v29, type metadata accessor for InheritanceHealthRecord);
  v32 = (_QWORD *)(v31 + v30);
  v33 = v38;
  *v32 = v37;
  v32[1] = v33;
  aBlock[4] = sub_1000E05D0;
  v40 = v31;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000ABBFC;
  aBlock[3] = &unk_1002669A0;
  v34 = _Block_copy(aBlock);
  v35 = v40;
  v36 = v27;
  swift_retain(v33);
  swift_release(v35);
  objc_msgSend(v13, "fetchRecordWithID:completionHandler:", v36, v34);
  _Block_release(v34);

}

uint64_t sub_1000E04CC()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;

  v1 = (int *)type metadata accessor for InheritanceHealthRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;

  v7 = v0 + v4;
  v8 = type metadata accessor for UUID(0);
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8);
  v9(v7, v8);
  v10 = v7 + v1[5];
  v11 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  sub_10000F494(*(_QWORD *)(v7 + v1[6]), *(_QWORD *)(v7 + v1[6] + 8));
  v9(v7 + v1[7], v8);
  sub_10000F494(*(_QWORD *)(v7 + v1[8]), *(_QWORD *)(v7 + v1[8] + 8));
  swift_release(*(_QWORD *)(v0 + v6 + 8));
  return swift_deallocObject(v0, v6 + 16, v5);
}

uint64_t sub_1000E05D0(uint64_t a1, uint64_t a2)
{
  return sub_1000E0DB8(a1, a2, type metadata accessor for InheritanceHealthRecord, (uint64_t (*)(uint64_t, uint64_t, _QWORD, unint64_t, _QWORD, _QWORD))sub_1000DC3AC);
}

uint64_t sub_1000E05E4(uint64_t result, char a2)
{
  if ((a2 & 1) != 0)
    return swift_errorRetain(result);
  return result;
}

uint64_t sub_1000E05F0()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;

  v1 = (int *)type metadata accessor for InheritanceInvitationRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = (int *)type metadata accessor for InheritanceHealthRecord(0);
  v7 = *((_QWORD *)v6 - 1);
  v8 = *(unsigned __int8 *)(v7 + 80);
  v9 = (v4 + v5 + v8) & ~v8;
  v19 = v3 | v8 | 7;
  v10 = (*(_QWORD *)(v7 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
  v11 = (v10 + 23) & 0xFFFFFFFFFFFFFFF8;
  swift_release(*(_QWORD *)(v0 + 16));
  v12 = v0 + v4;
  v13 = type metadata accessor for UUID(0);
  v14 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8);
  v14(v12, v13);
  swift_bridgeObjectRelease(*(_QWORD *)(v12 + v1[5] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v12 + v1[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v12 + v1[7] + 8));
  v14(v12 + v1[9], v13);
  sub_10000F494(*(_QWORD *)(v12 + v1[10]), *(_QWORD *)(v12 + v1[10] + 8));
  v15 = v0 + v9;
  v14(v0 + v9, v13);
  v16 = v0 + v9 + v6[5];
  v17 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v16, v17);
  sub_10000F494(*(_QWORD *)(v15 + v6[6]), *(_QWORD *)(v15 + v6[6] + 8));
  v14(v0 + v9 + v6[7], v13);
  sub_10000F494(*(_QWORD *)(v15 + v6[8]), *(_QWORD *)(v15 + v6[8] + 8));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + v10));
  swift_release(*(_QWORD *)(v0 + v11 + 8));
  return swift_deallocObject(v0, v11 + 16, v19);
}

uint64_t sub_1000E0798(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v3 = *(_QWORD *)(type metadata accessor for InheritanceInvitationRecord(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = *(_QWORD *)(v3 + 64);
  v6 = *(_QWORD *)(type metadata accessor for InheritanceHealthRecord(0) - 8);
  v7 = (v4 + v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v8 = (*(_QWORD *)(v6 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_1000DA7F4(a1, *(_QWORD *)(v1 + 16), v1 + v4, v1 + v7, *(_QWORD *)(v1 + v8), *(_QWORD *)(v1 + v8 + 8), *(uint64_t (**)(_QWORD))(v1 + ((v8 + 23) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v1 + ((v8 + 23) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_1000E082C()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);

  v1 = (int *)type metadata accessor for InheritanceInvitationRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = ((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  v7 = v0 + v4;
  v8 = type metadata accessor for UUID(0);
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8);
  v9(v7, v8);
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[5] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[7] + 8));
  v9(v7 + v1[9], v8);
  sub_10000F494(*(_QWORD *)(v7 + v1[10]), *(_QWORD *)(v7 + v1[10] + 8));
  return swift_deallocObject(v0, v6, v5);
}

void sub_1000E0910(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for InheritanceInvitationRecord(0) - 8) + 80);
  sub_1000DB324(a1, v1 + ((v3 + 16) & ~v3));
}

uint64_t sub_1000E0960()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000E0984(uint64_t a1)
{
  uint64_t v1;

  return sub_1000DB8AC(a1, *(void (**)(uint64_t))(v1 + 16));
}

void sub_1000E0990(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  Swift::String v18;
  void *v19;
  Swift::String v20;
  Class isa;
  uint64_t v22;
  void *v23;
  void *v24;
  objc_class *v25;
  Swift::String v26;
  Class v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  objc_class *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD aBlock[5];
  uint64_t v40;

  v37 = a2;
  v38 = a3;
  v4 = type metadata accessor for CustodianHealthRecord(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(v4, v7);
  v8 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10028AF00 != -1)
    swift_once(&qword_10028AF00, sub_1001FD458);
  if (*(_BYTE *)(a1 + *(int *)(v4 + 36)) == 1)
  {
    if (qword_10028AF10 != -1)
      swift_once(&qword_10028AF10, sub_1001FDD8C);
    v9 = &qword_1002A8C80;
  }
  else
  {
    if (qword_10028AF08 != -1)
      swift_once(&qword_10028AF08, sub_1001FDD54);
    v9 = &qword_1002A8C70;
  }
  v10 = *v9;
  v11 = v9[1];
  swift_bridgeObjectRetain(v11);
  v12 = sub_1001FD4C0(v10, v11);
  v13 = objc_msgSend(v12, "privateCloudDatabase");
  swift_bridgeObjectRelease(v11);

  v14 = sub_1000067D4(0, (unint64_t *)&qword_1002953A0, CKRecordZoneID_ptr);
  v15 = UUID.uuidString.getter(v14);
  v17 = v16;
  v18._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)(CKCurrentUserDefaultName);
  v18._object = v19;
  v20._countAndFlagsBits = v15;
  v20._object = v17;
  isa = CKRecordZoneID.init(zoneName:ownerName:)(v20, v18).super.isa;
  sub_1000067D4(0, (unint64_t *)&qword_10028D580, CKRecordID_ptr);
  v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(CKRecordNameZoneWideShare);
  v24 = v23;
  v25 = isa;
  v26._countAndFlagsBits = v22;
  v26._object = v24;
  v27 = CKRecordID.init(recordName:zoneID:)(v26, (CKRecordZoneID)v25).super.isa;
  sub_100027FE8(a1, (uint64_t)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for CustodianHealthRecord);
  v28 = *(unsigned __int8 *)(v5 + 80);
  v29 = (v28 + 24) & ~v28;
  v30 = (v6 + v29 + 7) & 0xFFFFFFFFFFFFFFF8;
  v31 = swift_allocObject(&unk_100266A50, v30 + 16, v28 | 7);
  *(_QWORD *)(v31 + 16) = v27;
  sub_10003B730((uint64_t)v8, v31 + v29, type metadata accessor for CustodianHealthRecord);
  v32 = (_QWORD *)(v31 + v30);
  v33 = v38;
  *v32 = v37;
  v32[1] = v33;
  aBlock[4] = sub_1000E0DA4;
  v40 = v31;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000ABBFC;
  aBlock[3] = &unk_100266A68;
  v34 = _Block_copy(aBlock);
  v35 = v40;
  v36 = v27;
  swift_retain(v33);
  swift_release(v35);
  objc_msgSend(v13, "fetchRecordWithID:completionHandler:", v36, v34);
  _Block_release(v34);

}

uint64_t sub_1000E0C98()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  unint64_t v13;

  v1 = (int *)type metadata accessor for CustodianHealthRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);

  v6 = v0 + v4;
  v7 = type metadata accessor for UUID(0);
  v8 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8);
  v8(v0 + v4, v7);
  v8(v0 + v4 + v1[5], v7);
  v9 = v0 + v4 + v1[6];
  v10 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  v11 = (uint64_t *)(v0 + v4 + v1[7]);
  v12 = v11[1];
  if (v12 >> 60 != 15)
    sub_10000F494(*v11, v12);
  v13 = (v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_10000F494(*(_QWORD *)(v6 + v1[8]), *(_QWORD *)(v6 + v1[8] + 8));
  swift_release(*(_QWORD *)(v0 + v13 + 8));
  return swift_deallocObject(v0, v13 + 16, v3 | 7);
}

uint64_t sub_1000E0DA4(uint64_t a1, uint64_t a2)
{
  return sub_1000E0DB8(a1, a2, type metadata accessor for CustodianHealthRecord, (uint64_t (*)(uint64_t, uint64_t, _QWORD, unint64_t, _QWORD, _QWORD))sub_1000DD198);
}

uint64_t sub_1000E0DB8(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD), uint64_t (*a4)(uint64_t, uint64_t, _QWORD, unint64_t, _QWORD, _QWORD))
{
  uint64_t v4;
  uint64_t v7;
  unint64_t v8;
  _QWORD *v9;

  v7 = *(_QWORD *)(a3(0) - 8);
  v8 = (*(unsigned __int8 *)(v7 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = (_QWORD *)(v4 + ((*(_QWORD *)(v7 + 64) + v8 + 7) & 0xFFFFFFFFFFFFFFF8));
  return a4(a1, a2, *(_QWORD *)(v4 + 16), v4 + v8, *v9, v9[1]);
}

uint64_t static OSTransaction.named(_:block:)(char *a1, uint64_t a2, int a3, void (*a4)(void))
{
  uint64_t v4;
  uint64_t v9;

  swift_allocObject(v4, 48, 7);
  v9 = sub_1000E0EB0(a1, a2, a3);
  a4();
  return swift_release(v9);
}

{
  uint64_t v4;
  uint64_t v9;
  uint64_t v11;

  swift_initStackObject(v4, &v11);
  v9 = sub_1000E0EB0(a1, a2, a3);
  a4();
  return swift_release(v9);
}

uint64_t sub_1000E0EB0(char *a1, uint64_t a2, int a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t *v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  Swift::String v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  void *v29;
  Swift::String v30;
  uint64_t v31;
  uint64_t v32;
  __n128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __n128 v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  unsigned int v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;

  v4 = v3;
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  result = __chkstk_darwin(v8, v10);
  v13 = (v12 + 15) & 0xFFFFFFFFFFFFFFF0;
  v14 = (char *)&v47 - v13;
  v48 = a3;
  v47 = a2;
  if ((a3 & 1) == 0)
  {
    if (a1)
    {
      v15 = (uint64_t *)a1;
      v16 = a2;
      goto LABEL_11;
    }
    __break(1u);
    goto LABEL_14;
  }
  v13 = (unint64_t)a1 >> 32;
  if ((unint64_t)a1 >> 32)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (a1 >> 11 == 27)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  LODWORD(v13) = a1 >> 16;
  if (a1 >> 16 > 0x10)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if ((a1 & 0xFFFFFF80) != 0)
  {
LABEL_16:
    v42 = (a1 & 0x3F) << 8;
    v43 = (v42 | (a1 >> 6)) + 33217;
    v44 = (v42 | (a1 >> 6) & 0x3F) << 8;
    v45 = (((v44 | (a1 >> 12) & 0x3F) << 8) | (a1 >> 18)) - 2122219023;
    v46 = (v44 | (a1 >> 12)) + 8487393;
    if ((_DWORD)v13)
      v17 = v45;
    else
      v17 = v46;
    if (a1 < 0x800)
      v17 = v43;
    goto LABEL_10;
  }
  if (a1 > 0xFF)
  {
    __break(1u);
    goto LABEL_23;
  }
  v17 = ((_BYTE)a1 + 1);
LABEL_10:
  v18 = __clz(v17);
  v16 = 4 - (v18 >> 3);
  v49 = (v17 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << (8 * ((4 - (v18 >> 3)) & 7)));
  v15 = &v49;
LABEL_11:
  v19 = static String._fromUTF8Repairing(_:)(v15, v16);
  v21 = v20;
  v49 = v19;
  v50 = v20;
  swift_bridgeObjectRetain(v20);
  v22._countAndFlagsBits = 46;
  v22._object = (void *)0xE100000000000000;
  String.append(_:)(v22);
  v23 = swift_bridgeObjectRelease(v21);
  v24 = v49;
  v25 = v50;
  v26 = UUID.init()(v23);
  v27 = UUID.uuidString.getter(v26);
  v29 = v28;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v14, v8);
  v49 = v24;
  v50 = v25;
  swift_bridgeObjectRetain(v25);
  v30._countAndFlagsBits = v27;
  v30._object = v29;
  String.append(_:)(v30);
  swift_bridgeObjectRelease(v29);
  swift_bridgeObjectRelease(v25);
  v32 = v49;
  v31 = v50;
  v4[2] = v49;
  v4[3] = v31;
  v33 = swift_bridgeObjectRetain(v31);
  v34 = static os_log_type_t.default.getter(v33);
  v35 = sub_1000080B4(&qword_100290F10);
  v36 = swift_allocObject(v35, 72, 7);
  *(_OWORD *)(v36 + 16) = xmmword_100218E30;
  *(_QWORD *)(v36 + 56) = &type metadata for String;
  *(_QWORD *)(v36 + 64) = sub_1000E13D0();
  *(_QWORD *)(v36 + 32) = v32;
  *(_QWORD *)(v36 + 40) = v31;
  sub_1000E1414();
  v37 = swift_bridgeObjectRetain(v31);
  v38 = (void *)static OS_os_log.default.getter(v37);
  os_log(_:dso:log:_:_:)(v34, &_mh_execute_header, v38, "Opening transaction - %@", 24, 2, v36);
  swift_bridgeObjectRelease(v36);

  v39 = String.utf8CString.getter(v32, v31);
  swift_bridgeObjectRelease(v31);
  v40 = os_transaction_create(v39 + 32);
  result = swift_release(v39);
  if (v40)
  {
    v4[4] = v40;
    v41 = type metadata accessor for OSActivity();
    swift_allocObject(v41, 40, 7);
    v4[5] = sub_10015C584(a1, v47, v48);
    return (uint64_t)v4;
  }
LABEL_24:
  __break(1u);
  return result;
}

uint64_t sub_1000E11D0(__n128 a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  void *v9;
  os_activity_scope_state_s *v10;
  _BYTE v12[24];

  v2 = v1;
  v3 = static os_log_type_t.default.getter(a1);
  v4 = sub_1000080B4(&qword_100290F10);
  v5 = swift_allocObject(v4, 72, 7);
  *(_OWORD *)(v5 + 16) = xmmword_100218E30;
  v7 = *(_QWORD *)(v1 + 16);
  v6 = *(_QWORD *)(v1 + 24);
  *(_QWORD *)(v5 + 56) = &type metadata for String;
  *(_QWORD *)(v5 + 64) = sub_1000E13D0();
  *(_QWORD *)(v5 + 32) = v7;
  *(_QWORD *)(v5 + 40) = v6;
  sub_1000E1414();
  v8 = swift_bridgeObjectRetain(v6);
  v9 = (void *)static OS_os_log.default.getter(v8);
  os_log(_:dso:log:_:_:)(v3, &_mh_execute_header, v9, "Closing transaction - %@", 24, 2, v5);
  swift_bridgeObjectRelease(v5);

  v10 = (os_activity_scope_state_s *)(*(_QWORD *)(v2 + 40) + 24);
  swift_beginAccess(v10, v12, 33, 0);
  os_activity_scope_leave(v10);
  return swift_endAccess(v12);
}

_QWORD *OSTransaction.deinit(__n128 a1)
{
  _QWORD *v1;

  sub_1000E11D0(a1);
  swift_bridgeObjectRelease(v1[3]);
  swift_unknownObjectRelease(v1[4]);
  swift_release(v1[5]);
  return v1;
}

uint64_t OSTransaction.__deallocating_deinit(__n128 a1)
{
  _QWORD *v1;

  sub_1000E11D0(a1);
  swift_bridgeObjectRelease(v1[3]);
  swift_unknownObjectRelease(v1[4]);
  swift_release(v1[5]);
  return swift_deallocClassInstance(v1, 48, 7);
}

uint64_t type metadata accessor for OSTransaction()
{
  return objc_opt_self(_TtC13appleaccountd13OSTransaction);
}

unint64_t sub_1000E13D0()
{
  unint64_t result;

  result = qword_100290F18;
  if (!qword_100290F18)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_100290F18);
  }
  return result;
}

unint64_t sub_1000E1414()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100290F20;
  if (!qword_100290F20)
  {
    v1 = objc_opt_self(OS_os_log);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100290F20);
  }
  return result;
}

_QWORD *sub_1000E1450(_QWORD *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(char *, uint64_t, uint64_t, __n128);
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  char *__dst;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v17 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v17);
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a2[3];
    a1[2] = a2[2];
    a1[3] = v8;
    v9 = a2[5];
    v10 = a3[7];
    __dst = (char *)a1 + v10;
    v11 = (char *)a2 + v10;
    a1[4] = a2[4];
    a1[5] = v9;
    v12 = type metadata accessor for UUID(0);
    v13 = *(_QWORD *)(v12 - 8);
    v14 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v13 + 48);
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    v15 = swift_bridgeObjectRetain(v9);
    if (v14(v11, 1, v12, v15))
    {
      v16 = sub_1000080B4((uint64_t *)&unk_1002904F0);
      memcpy(__dst, v11, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(__dst, v11, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(__dst, 0, 1, v12);
    }
    v18 = a3[8];
    v19 = a3[9];
    v20 = (_QWORD *)((char *)v4 + v18);
    v21 = (_QWORD *)((char *)a2 + v18);
    v22 = v21[1];
    *v20 = *v21;
    v20[1] = v22;
    v23 = (_QWORD *)((char *)v4 + v19);
    v24 = (_QWORD *)((char *)a2 + v19);
    v25 = v24[1];
    *v23 = *v24;
    v23[1] = v25;
    v26 = a3[10];
    v27 = (char *)v4 + v26;
    v28 = (_QWORD *)((char *)a2 + v26);
    v29 = *(_QWORD *)((char *)a2 + v26 + 8);
    swift_bridgeObjectRetain(v22);
    swift_bridgeObjectRetain(v25);
    if (v29 >> 60 == 15)
    {
      *(_OWORD *)v27 = *(_OWORD *)v28;
    }
    else
    {
      v30 = *v28;
      sub_10000F450(*v28, v29);
      *(_QWORD *)v27 = v30;
      *((_QWORD *)v27 + 1) = v29;
    }
    v31 = a3[11];
    v32 = (char *)v4 + v31;
    v33 = (char *)a2 + v31;
    v34 = *((_QWORD *)v33 + 1);
    if (v34 >> 60 == 15)
    {
      *(_OWORD *)v32 = *(_OWORD *)v33;
    }
    else
    {
      v35 = *(_QWORD *)v33;
      sub_10000F450(*(_QWORD *)v33, *((_QWORD *)v33 + 1));
      *(_QWORD *)v32 = v35;
      *((_QWORD *)v32 + 1) = v34;
    }
    v36 = a3[12];
    v37 = (char *)v4 + v36;
    v38 = (char *)a2 + v36;
    v39 = *((_QWORD *)v38 + 1);
    if (v39 >> 60 == 15)
    {
      *(_OWORD *)v37 = *(_OWORD *)v38;
    }
    else
    {
      v40 = *(_QWORD *)v38;
      sub_10000F450(*(_QWORD *)v38, *((_QWORD *)v38 + 1));
      *(_QWORD *)v37 = v40;
      *((_QWORD *)v37 + 1) = v39;
    }
    v41 = a3[13];
    v42 = a3[14];
    v43 = (char *)v4 + v41;
    v44 = (char *)a2 + v41;
    *(_QWORD *)v43 = *(_QWORD *)v44;
    v43[8] = v44[8];
    *((_BYTE *)v4 + v42) = *((_BYTE *)a2 + v42);
    v45 = a3[16];
    *(_QWORD *)((char *)v4 + a3[15]) = *(_QWORD *)((char *)a2 + a3[15]);
    v46 = (_QWORD *)((char *)v4 + v45);
    v47 = (_QWORD *)((char *)a2 + v45);
    v48 = v47[1];
    *v46 = *v47;
    v46[1] = v48;
    swift_bridgeObjectRetain(v48);
  }
  return v4;
}

uint64_t sub_1000E16B0(_QWORD *a1, int *a2)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  unint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t *v11;
  unint64_t v12;

  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[5]);
  v4 = (char *)a1 + a2[7];
  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5))
    (*(void (**)(char *, uint64_t))(v6 + 8))(v4, v5);
  swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + a2[8] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + a2[9] + 8));
  v7 = (_QWORD *)((char *)a1 + a2[10]);
  v8 = v7[1];
  if (v8 >> 60 != 15)
    sub_10000F494(*v7, v8);
  v9 = (_QWORD *)((char *)a1 + a2[11]);
  v10 = v9[1];
  if (v10 >> 60 != 15)
    sub_10000F494(*v9, v10);
  v11 = (_QWORD *)((char *)a1 + a2[12]);
  v12 = v11[1];
  if (v12 >> 60 != 15)
    sub_10000F494(*v11, v12);
  return swift_bridgeObjectRelease(*(_QWORD *)((char *)a1 + a2[16] + 8));
}

_QWORD *sub_1000E17C4(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(char *, uint64_t, uint64_t, __n128);
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  char *__dst;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  v8 = a2[5];
  v9 = a3[7];
  __dst = (char *)a1 + v9;
  v10 = (char *)a2 + v9;
  a1[4] = a2[4];
  a1[5] = v8;
  v11 = type metadata accessor for UUID(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v12 + 48);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  v14 = swift_bridgeObjectRetain(v8);
  if (v13(v10, 1, v11, v14))
  {
    v15 = sub_1000080B4((uint64_t *)&unk_1002904F0);
    memcpy(__dst, v10, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 16))(__dst, v10, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(__dst, 0, 1, v11);
  }
  v16 = a3[8];
  v17 = a3[9];
  v18 = (_QWORD *)((char *)a1 + v16);
  v19 = (_QWORD *)((char *)a2 + v16);
  v20 = v19[1];
  *v18 = *v19;
  v18[1] = v20;
  v21 = (_QWORD *)((char *)a1 + v17);
  v22 = (_QWORD *)((char *)a2 + v17);
  v23 = v22[1];
  *v21 = *v22;
  v21[1] = v23;
  v24 = a3[10];
  v25 = (char *)a1 + v24;
  v26 = (_QWORD *)((char *)a2 + v24);
  v27 = *(_QWORD *)((char *)a2 + v24 + 8);
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRetain(v23);
  if (v27 >> 60 == 15)
  {
    *(_OWORD *)v25 = *(_OWORD *)v26;
  }
  else
  {
    v28 = *v26;
    sub_10000F450(*v26, v27);
    *(_QWORD *)v25 = v28;
    *((_QWORD *)v25 + 1) = v27;
  }
  v29 = a3[11];
  v30 = (char *)a1 + v29;
  v31 = (char *)a2 + v29;
  v32 = *((_QWORD *)v31 + 1);
  if (v32 >> 60 == 15)
  {
    *(_OWORD *)v30 = *(_OWORD *)v31;
  }
  else
  {
    v33 = *(_QWORD *)v31;
    sub_10000F450(*(_QWORD *)v31, *((_QWORD *)v31 + 1));
    *(_QWORD *)v30 = v33;
    *((_QWORD *)v30 + 1) = v32;
  }
  v34 = a3[12];
  v35 = (char *)a1 + v34;
  v36 = (char *)a2 + v34;
  v37 = *((_QWORD *)v36 + 1);
  if (v37 >> 60 == 15)
  {
    *(_OWORD *)v35 = *(_OWORD *)v36;
  }
  else
  {
    v38 = *(_QWORD *)v36;
    sub_10000F450(*(_QWORD *)v36, *((_QWORD *)v36 + 1));
    *(_QWORD *)v35 = v38;
    *((_QWORD *)v35 + 1) = v37;
  }
  v39 = a3[13];
  v40 = a3[14];
  v41 = (char *)a1 + v39;
  v42 = (char *)a2 + v39;
  *(_QWORD *)v41 = *(_QWORD *)v42;
  v41[8] = v42[8];
  *((_BYTE *)a1 + v40) = *((_BYTE *)a2 + v40);
  v43 = a3[16];
  *(_QWORD *)((char *)a1 + a3[15]) = *(_QWORD *)((char *)a2 + a3[15]);
  v44 = (_QWORD *)((char *)a1 + v43);
  v45 = (_QWORD *)((char *)a2 + v43);
  v46 = v45[1];
  *v44 = *v45;
  v44[1] = v46;
  swift_bridgeObjectRetain(v46);
  return a1;
}

_QWORD *sub_1000E19F8(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(char *, uint64_t, uint64_t);
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;

  *a1 = *a2;
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[2] = a2[2];
  v8 = a2[3];
  v9 = a1[3];
  a1[3] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  a1[4] = a2[4];
  v10 = a2[5];
  v11 = a1[5];
  a1[5] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  v12 = a3[7];
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for UUID(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  v18 = v17(v13, 1, v15);
  v19 = v17(v14, 1, v15);
  if (v18)
  {
    if (!v19)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v13, v14, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v19)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v13, v15);
LABEL_6:
    v20 = sub_1000080B4((uint64_t *)&unk_1002904F0);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v16 + 24))(v13, v14, v15);
LABEL_7:
  v21 = a3[8];
  v22 = (_QWORD *)((char *)a1 + v21);
  v23 = (_QWORD *)((char *)a2 + v21);
  *v22 = *v23;
  v24 = v23[1];
  v25 = v22[1];
  v22[1] = v24;
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRelease(v25);
  v26 = a3[9];
  v27 = (_QWORD *)((char *)a1 + v26);
  v28 = (_QWORD *)((char *)a2 + v26);
  *v27 = *v28;
  v29 = v28[1];
  v30 = v27[1];
  v27[1] = v29;
  swift_bridgeObjectRetain(v29);
  swift_bridgeObjectRelease(v30);
  v31 = a3[10];
  v32 = (_QWORD *)((char *)a1 + v31);
  v33 = (_QWORD *)((char *)a2 + v31);
  v34 = *(_QWORD *)((char *)a2 + v31 + 8);
  if (*(_QWORD *)((char *)a1 + v31 + 8) >> 60 == 15)
  {
    if (v34 >> 60 != 15)
    {
      v35 = *v33;
      sub_10000F450(v35, v34);
      *v32 = v35;
      v32[1] = v34;
      goto LABEL_14;
    }
    goto LABEL_12;
  }
  if (v34 >> 60 == 15)
  {
    sub_100071D90((uint64_t)v32);
LABEL_12:
    *(_OWORD *)v32 = *(_OWORD *)v33;
    goto LABEL_14;
  }
  v36 = *v33;
  sub_10000F450(v36, v34);
  v37 = *v32;
  v38 = v32[1];
  *v32 = v36;
  v32[1] = v34;
  sub_10000F494(v37, v38);
LABEL_14:
  v39 = a3[11];
  v40 = (_QWORD *)((char *)a1 + v39);
  v41 = (_QWORD *)((char *)a2 + v39);
  v42 = *(_QWORD *)((char *)a2 + v39 + 8);
  if (*(_QWORD *)((char *)a1 + v39 + 8) >> 60 == 15)
  {
    if (v42 >> 60 != 15)
    {
      v43 = *v41;
      sub_10000F450(v43, v42);
      *v40 = v43;
      v40[1] = v42;
      goto LABEL_21;
    }
    goto LABEL_19;
  }
  if (v42 >> 60 == 15)
  {
    sub_100071D90((uint64_t)v40);
LABEL_19:
    *(_OWORD *)v40 = *(_OWORD *)v41;
    goto LABEL_21;
  }
  v44 = *v41;
  sub_10000F450(v44, v42);
  v45 = *v40;
  v46 = v40[1];
  *v40 = v44;
  v40[1] = v42;
  sub_10000F494(v45, v46);
LABEL_21:
  v47 = a3[12];
  v48 = (_QWORD *)((char *)a1 + v47);
  v49 = (_QWORD *)((char *)a2 + v47);
  v50 = *(_QWORD *)((char *)a2 + v47 + 8);
  if (*(_QWORD *)((char *)a1 + v47 + 8) >> 60 != 15)
  {
    if (v50 >> 60 != 15)
    {
      v52 = *v49;
      sub_10000F450(v52, v50);
      v53 = *v48;
      v54 = v48[1];
      *v48 = v52;
      v48[1] = v50;
      sub_10000F494(v53, v54);
      goto LABEL_28;
    }
    sub_100071D90((uint64_t)v48);
    goto LABEL_26;
  }
  if (v50 >> 60 == 15)
  {
LABEL_26:
    *(_OWORD *)v48 = *(_OWORD *)v49;
    goto LABEL_28;
  }
  v51 = *v49;
  sub_10000F450(v51, v50);
  *v48 = v51;
  v48[1] = v50;
LABEL_28:
  v55 = a3[13];
  v56 = (char *)a1 + v55;
  v57 = (char *)a2 + v55;
  v58 = *(_QWORD *)v57;
  v56[8] = v57[8];
  *(_QWORD *)v56 = v58;
  *((_BYTE *)a1 + a3[14]) = *((_BYTE *)a2 + a3[14]);
  *(_QWORD *)((char *)a1 + a3[15]) = *(_QWORD *)((char *)a2 + a3[15]);
  v59 = a3[16];
  v60 = (_QWORD *)((char *)a1 + v59);
  v61 = (_QWORD *)((char *)a2 + v59);
  *v60 = *v61;
  v62 = v61[1];
  v63 = v60[1];
  v60[1] = v62;
  swift_bridgeObjectRetain(v62);
  swift_bridgeObjectRelease(v63);
  return a1;
}

_OWORD *sub_1000E1DA0(_OWORD *a1, _OWORD *a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  a1[2] = a2[2];
  v7 = a3[7];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for UUID(0);
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    v12 = sub_1000080B4((uint64_t *)&unk_1002904F0);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  v13 = a3[9];
  *(_OWORD *)((char *)a1 + a3[8]) = *(_OWORD *)((char *)a2 + a3[8]);
  *(_OWORD *)((char *)a1 + v13) = *(_OWORD *)((char *)a2 + v13);
  v14 = a3[11];
  *(_OWORD *)((char *)a1 + a3[10]) = *(_OWORD *)((char *)a2 + a3[10]);
  *(_OWORD *)((char *)a1 + v14) = *(_OWORD *)((char *)a2 + v14);
  v15 = a3[13];
  *(_OWORD *)((char *)a1 + a3[12]) = *(_OWORD *)((char *)a2 + a3[12]);
  v16 = (char *)a1 + v15;
  v17 = (char *)a2 + v15;
  v16[8] = v17[8];
  *(_QWORD *)v16 = *(_QWORD *)v17;
  v18 = a3[15];
  *((_BYTE *)a1 + a3[14]) = *((_BYTE *)a2 + a3[14]);
  *(_QWORD *)((char *)a1 + v18) = *(_QWORD *)((char *)a2 + v18);
  *(_OWORD *)((char *)a1 + a3[16]) = *(_OWORD *)((char *)a2 + a3[16]);
  return a1;
}

_QWORD *sub_1000E1EE0(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(char *, uint64_t, uint64_t);
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t *v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  v6 = a2[1];
  v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = a2[3];
  v9 = a1[3];
  a1[2] = a2[2];
  a1[3] = v8;
  swift_bridgeObjectRelease(v9);
  v10 = a2[5];
  v11 = a1[5];
  a1[4] = a2[4];
  a1[5] = v10;
  swift_bridgeObjectRelease(v11);
  v12 = a3[7];
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for UUID(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  v18 = v17(v13, 1, v15);
  v19 = v17(v14, 1, v15);
  if (v18)
  {
    if (!v19)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v13, v14, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v19)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v13, v15);
LABEL_6:
    v20 = sub_1000080B4((uint64_t *)&unk_1002904F0);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v16 + 40))(v13, v14, v15);
LABEL_7:
  v21 = a3[8];
  v22 = (_QWORD *)((char *)a1 + v21);
  v23 = (_QWORD *)((char *)a2 + v21);
  v25 = *v23;
  v24 = v23[1];
  v26 = v22[1];
  *v22 = v25;
  v22[1] = v24;
  swift_bridgeObjectRelease(v26);
  v27 = a3[9];
  v28 = (_QWORD *)((char *)a1 + v27);
  v29 = (_QWORD *)((char *)a2 + v27);
  v31 = *v29;
  v30 = v29[1];
  v32 = v28[1];
  *v28 = v31;
  v28[1] = v30;
  swift_bridgeObjectRelease(v32);
  v33 = a3[10];
  v34 = (uint64_t)a1 + v33;
  v35 = (char *)a2 + v33;
  v36 = *(_QWORD *)((char *)a1 + v33 + 8);
  if (v36 >> 60 == 15)
  {
LABEL_10:
    *(_OWORD *)v34 = *(_OWORD *)v35;
    goto LABEL_12;
  }
  v37 = *((_QWORD *)v35 + 1);
  if (v37 >> 60 == 15)
  {
    sub_100071D90(v34);
    goto LABEL_10;
  }
  v38 = *(_QWORD *)v34;
  *(_QWORD *)v34 = *(_QWORD *)v35;
  *(_QWORD *)(v34 + 8) = v37;
  sub_10000F494(v38, v36);
LABEL_12:
  v39 = a3[11];
  v40 = (uint64_t)a1 + v39;
  v41 = (char *)a2 + v39;
  v42 = *(_QWORD *)((char *)a1 + v39 + 8);
  if (v42 >> 60 == 15)
  {
LABEL_15:
    *(_OWORD *)v40 = *(_OWORD *)v41;
    goto LABEL_17;
  }
  v43 = *((_QWORD *)v41 + 1);
  if (v43 >> 60 == 15)
  {
    sub_100071D90(v40);
    goto LABEL_15;
  }
  v44 = *(_QWORD *)v40;
  *(_QWORD *)v40 = *(_QWORD *)v41;
  *(_QWORD *)(v40 + 8) = v43;
  sub_10000F494(v44, v42);
LABEL_17:
  v45 = a3[12];
  v46 = (_QWORD *)((char *)a1 + v45);
  v47 = (_QWORD *)((char *)a2 + v45);
  v48 = *(_QWORD *)((char *)a1 + v45 + 8);
  if (v48 >> 60 != 15)
  {
    v49 = v47[1];
    if (v49 >> 60 != 15)
    {
      v50 = *v46;
      *v46 = *v47;
      v46[1] = v49;
      sub_10000F494(v50, v48);
      goto LABEL_22;
    }
    sub_100071D90((uint64_t)v46);
  }
  *(_OWORD *)v46 = *(_OWORD *)v47;
LABEL_22:
  v51 = a3[13];
  v52 = a3[14];
  v53 = (char *)a1 + v51;
  v54 = (char *)a2 + v51;
  *(_QWORD *)v53 = *(_QWORD *)v54;
  v53[8] = v54[8];
  *((_BYTE *)a1 + v52) = *((_BYTE *)a2 + v52);
  v55 = a3[16];
  *(_QWORD *)((char *)a1 + a3[15]) = *(_QWORD *)((char *)a2 + a3[15]);
  v56 = (_QWORD *)((char *)a1 + v55);
  v57 = (_QWORD *)((char *)a2 + v55);
  v59 = *v57;
  v58 = v57[1];
  v60 = v56[1];
  *v56 = v59;
  v56[1] = v58;
  swift_bridgeObjectRelease(v60);
  return a1;
}

uint64_t sub_1000E2190(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000E219C);
}

uint64_t sub_1000E219C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  int v5;
  uint64_t v9;

  if ((_DWORD)a2 == 2147483646)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    v5 = v4 - 1;
    if (v5 < 0)
      v5 = -1;
    return (v5 + 1);
  }
  else
  {
    v9 = sub_1000080B4((uint64_t *)&unk_1002904F0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(a1 + *(int *)(a3 + 28), a2, v9);
  }
}

uint64_t sub_1000E2228(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000E2234);
}

uint64_t sub_1000E2234(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 2147483646)
  {
    *(_QWORD *)(result + 8) = a2;
  }
  else
  {
    v7 = sub_1000080B4((uint64_t *)&unk_1002904F0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 28), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for CustodianRecoveryData(uint64_t a1)
{
  uint64_t result;

  result = qword_100290F88;
  if (!qword_100290F88)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CustodianRecoveryData);
  return result;
}

void sub_1000E22E8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[13];

  v4[0] = &unk_10021C5D8;
  v4[1] = &unk_10021C5D8;
  v4[2] = &unk_10021C5D8;
  sub_100015374(319);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(v2 - 8) + 64;
    v4[4] = &unk_10021C5D8;
    v4[5] = &unk_10021C5D8;
    v4[6] = &unk_10021C5F0;
    v4[7] = &unk_10021C5F0;
    v4[8] = &unk_10021C5F0;
    v4[9] = &unk_10021C608;
    v4[10] = &unk_10021C620;
    v4[11] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[12] = &unk_10021C5D8;
    swift_initStructMetadata(a1, 256, 13, v4, a1 + 16);
  }
}

uint64_t sub_1000E2394@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t, uint64_t, uint64_t);
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  __n128 v28;
  unint64_t v29;
  char v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  __n128 v34;
  unint64_t v35;
  char v36;
  __n128 v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  __n128 v46;
  unint64_t v47;
  char v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  __n128 v52;
  unint64_t v53;
  char v54;
  __n128 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  unint64_t v61;
  char v62;
  __n128 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  unint64_t v69;
  char v70;
  int v71;
  __n128 v72;
  uint64_t v73;
  char v74;
  unint64_t v75;
  char v76;
  uint64_t result;
  uint64_t v78;
  uint64_t v79;
  uint8_t *v80;
  _QWORD *v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  char *v85;
  uint64_t *v86;
  uint64_t *v87;
  _QWORD *v88;
  _QWORD v89[2];
  uint64_t v90[5];
  __int128 v91;
  __int128 v92;

  v4 = sub_1000080B4((uint64_t *)&unk_1002904F0);
  __chkstk_darwin(v4, v5);
  v85 = (char *)&v80 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (int *)type metadata accessor for CustodianRecoveryData(0);
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  v8 = a2 + v7[7];
  v9 = type metadata accessor for UUID(0);
  v10 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56);
  v84 = v8;
  v10(v8, 1, 1, v9);
  v11 = (_QWORD *)(a2 + v7[8]);
  *v11 = 0;
  v11[1] = 0;
  v88 = v11;
  v12 = (_QWORD *)(a2 + v7[9]);
  *v12 = 0;
  v12[1] = 0;
  *(_OWORD *)(a2 + v7[10]) = xmmword_10021A7E0;
  v86 = (uint64_t *)(a2 + v7[11]);
  *(_OWORD *)v86 = xmmword_10021A7E0;
  v87 = (uint64_t *)(a2 + v7[12]);
  *(_OWORD *)v87 = xmmword_10021A7E0;
  v13 = a2 + v7[13];
  *(_QWORD *)v13 = 0;
  *(_BYTE *)(v13 + 8) = 1;
  *(_BYTE *)(a2 + v7[14]) = 0;
  *(_QWORD *)(a2 + v7[15]) = 1;
  v14 = (_QWORD *)(a2 + v7[16]);
  *v14 = 0;
  v14[1] = 0;
  if (qword_10028ADC8 != -1)
    swift_once(&qword_10028ADC8, sub_100046D2C);
  v15 = type metadata accessor for Logger(0);
  sub_100005288(v15, (uint64_t)qword_1002A89D8);
  v16 = swift_bridgeObjectRetain_n(a1, 2);
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.debug.getter(v17);
  if (os_log_type_enabled(v17, v18))
  {
    v19 = (uint8_t *)swift_slowAlloc(12, -1);
    v20 = swift_slowAlloc(32, -1);
    v83 = v14;
    v21 = v20;
    v90[0] = v20;
    v82 = v13;
    *(_DWORD *)v19 = 136315138;
    v80 = v19 + 4;
    swift_bridgeObjectRetain(a1);
    v23 = Dictionary.description.getter(v22, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
    v81 = v12;
    v25 = v24;
    swift_bridgeObjectRelease(a1);
    *(_QWORD *)&v91 = sub_1001DEF4C(v23, v25, v90);
    v13 = v82;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v91, (char *)&v91 + 8);
    swift_bridgeObjectRelease_n(a1, 2);
    v26 = v25;
    v12 = v81;
    swift_bridgeObjectRelease(v26);
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Got push with user info: %s", v19, 0xCu);
    swift_arrayDestroy(v21, 1, (char *)&type metadata for Any + 8);
    v27 = v21;
    v14 = v83;
    swift_slowDealloc(v27, -1, -1);
    swift_slowDealloc(v19, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a1, 2);
  }
  *(_QWORD *)&v91 = 0xD000000000000011;
  *((_QWORD *)&v91 + 1) = 0x800000010020ACB0;
  AnyHashable.init<A>(_:)(v90, &v91, &type metadata for String, &protocol witness table for String, v28);
  if (*(_QWORD *)(a1 + 16) && (v29 = sub_10010AAE0((uint64_t)v90), (v30 & 1) != 0))
  {
    sub_1000244B0(*(_QWORD *)(a1 + 56) + 32 * v29, (uint64_t)&v91);
  }
  else
  {
    v91 = 0u;
    v92 = 0u;
  }
  sub_1000839B4((uint64_t)v90);
  if (*((_QWORD *)&v92 + 1))
  {
    v31 = swift_dynamicCast(v89, &v91, (char *)&type metadata for Any + 8, &type metadata for String, 6);
    if (v31)
      v32 = v89[0];
    else
      v32 = 0;
    if (v31)
      v33 = v89[1];
    else
      v33 = 0;
  }
  else
  {
    sub_100004934((uint64_t)&v91, (uint64_t *)&unk_10028E7E0);
    v32 = 0;
    v33 = 0;
  }
  swift_bridgeObjectRelease(*(_QWORD *)(a2 + 8));
  *(_QWORD *)a2 = v32;
  *(_QWORD *)(a2 + 8) = v33;
  strcpy((char *)v89, "custodianUUID");
  HIWORD(v89[1]) = -4864;
  AnyHashable.init<A>(_:)(v90, v89, &type metadata for String, &protocol witness table for String, v34);
  if (*(_QWORD *)(a1 + 16) && (v35 = sub_10010AAE0((uint64_t)v90), (v36 & 1) != 0))
  {
    sub_1000244B0(*(_QWORD *)(a1 + 56) + 32 * v35, (uint64_t)&v91);
  }
  else
  {
    v91 = 0u;
    v92 = 0u;
  }
  sub_1000839B4((uint64_t)v90);
  if (*((_QWORD *)&v92 + 1))
  {
    if ((swift_dynamicCast(v89, &v91, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) != 0)
    {
      v38 = v89[1];
      v39 = (uint64_t)v85;
      UUID.init(uuidString:)(v89[0], v89[1]);
      swift_bridgeObjectRelease(v38);
      sub_100013AEC(v39, v84);
    }
  }
  else
  {
    sub_100004934((uint64_t)&v91, (uint64_t *)&unk_10028E7E0);
  }
  strcpy((char *)&v91, "ownerAppleId");
  BYTE13(v91) = 0;
  HIWORD(v91) = -5120;
  AnyHashable.init<A>(_:)(v90, &v91, &type metadata for String, &protocol witness table for String, v37);
  if (*(_QWORD *)(a1 + 16) && (v40 = sub_10010AAE0((uint64_t)v90), (v41 & 1) != 0))
  {
    sub_1000244B0(*(_QWORD *)(a1 + 56) + 32 * v40, (uint64_t)&v91);
  }
  else
  {
    v91 = 0u;
    v92 = 0u;
  }
  sub_1000839B4((uint64_t)v90);
  if (*((_QWORD *)&v92 + 1))
  {
    v42 = swift_dynamicCast(v89, &v91, (char *)&type metadata for Any + 8, &type metadata for String, 6);
    if (v42)
      v43 = v89[0];
    else
      v43 = 0;
    if (v42)
      v44 = v89[1];
    else
      v44 = 0;
  }
  else
  {
    sub_100004934((uint64_t)&v91, (uint64_t *)&unk_10028E7E0);
    v43 = 0;
    v44 = 0;
  }
  v45 = v88;
  swift_bridgeObjectRelease(v88[1]);
  *v45 = v43;
  v45[1] = v44;
  *(_QWORD *)&v91 = 0xD000000000000015;
  *((_QWORD *)&v91 + 1) = 0x800000010020C500;
  AnyHashable.init<A>(_:)(v90, &v91, &type metadata for String, &protocol witness table for String, v46);
  if (*(_QWORD *)(a1 + 16) && (v47 = sub_10010AAE0((uint64_t)v90), (v48 & 1) != 0))
  {
    sub_1000244B0(*(_QWORD *)(a1 + 56) + 32 * v47, (uint64_t)&v91);
  }
  else
  {
    v91 = 0u;
    v92 = 0u;
  }
  sub_1000839B4((uint64_t)v90);
  if (*((_QWORD *)&v92 + 1))
  {
    v49 = swift_dynamicCast(v89, &v91, (char *)&type metadata for Any + 8, &type metadata for String, 6);
    if (v49)
      v50 = v89[0];
    else
      v50 = 0;
    if (v49)
      v51 = v89[1];
    else
      v51 = 0;
  }
  else
  {
    sub_100004934((uint64_t)&v91, (uint64_t *)&unk_10028E7E0);
    v50 = 0;
    v51 = 0;
  }
  swift_bridgeObjectRelease(v12[1]);
  *v12 = v50;
  v12[1] = v51;
  v89[0] = 0x617461646161;
  v89[1] = 0xE600000000000000;
  AnyHashable.init<A>(_:)(v90, v89, &type metadata for String, &protocol witness table for String, v52);
  if (*(_QWORD *)(a1 + 16) && (v53 = sub_10010AAE0((uint64_t)v90), (v54 & 1) != 0))
  {
    sub_1000244B0(*(_QWORD *)(a1 + 56) + 32 * v53, (uint64_t)&v91);
  }
  else
  {
    v91 = 0u;
    v92 = 0u;
  }
  sub_1000839B4((uint64_t)v90);
  if (*((_QWORD *)&v92 + 1))
  {
    if ((swift_dynamicCast(v89, &v91, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) != 0)
    {
      v56 = v89[1];
      v57 = Data.init(base64Encoded:options:)(v89[0], v89[1], 0);
      v59 = v58;
      swift_bridgeObjectRelease(v56);
      v60 = v86;
      sub_1000144D8(*v86, v86[1]);
      *v60 = v57;
      v60[1] = v59;
    }
  }
  else
  {
    sub_100004934((uint64_t)&v91, (uint64_t *)&unk_10028E7E0);
  }
  strcpy((char *)v89, "idmsdata");
  BYTE1(v89[1]) = 0;
  WORD1(v89[1]) = 0;
  HIDWORD(v89[1]) = -402653184;
  AnyHashable.init<A>(_:)(v90, v89, &type metadata for String, &protocol witness table for String, v55);
  if (*(_QWORD *)(a1 + 16) && (v61 = sub_10010AAE0((uint64_t)v90), (v62 & 1) != 0))
  {
    sub_1000244B0(*(_QWORD *)(a1 + 56) + 32 * v61, (uint64_t)&v91);
  }
  else
  {
    v91 = 0u;
    v92 = 0u;
  }
  sub_1000839B4((uint64_t)v90);
  if (*((_QWORD *)&v92 + 1))
  {
    if ((swift_dynamicCast(v89, &v91, (char *)&type metadata for Any + 8, &type metadata for String, 6) & 1) != 0)
    {
      v64 = v89[1];
      v65 = Data.init(base64Encoded:options:)(v89[0], v89[1], 0);
      v67 = v66;
      swift_bridgeObjectRelease(v64);
      v68 = v87;
      sub_1000144D8(*v87, v87[1]);
      *v68 = v65;
      v68[1] = v67;
    }
  }
  else
  {
    sub_100004934((uint64_t)&v91, (uint64_t *)&unk_10028E7E0);
  }
  *(_QWORD *)&v91 = 25445;
  *((_QWORD *)&v91 + 1) = 0xE200000000000000;
  AnyHashable.init<A>(_:)(v90, &v91, &type metadata for String, &protocol witness table for String, v63);
  if (*(_QWORD *)(a1 + 16) && (v69 = sub_10010AAE0((uint64_t)v90), (v70 & 1) != 0))
  {
    sub_1000244B0(*(_QWORD *)(a1 + 56) + 32 * v69, (uint64_t)&v91);
  }
  else
  {
    v91 = 0u;
    v92 = 0u;
  }
  sub_1000839B4((uint64_t)v90);
  if (*((_QWORD *)&v92 + 1))
  {
    v71 = swift_dynamicCast(v89, &v91, (char *)&type metadata for Any + 8, &type metadata for Int, 6);
    v73 = v89[0];
    if (!v71)
      v73 = 0;
    v74 = v71 ^ 1;
  }
  else
  {
    sub_100004934((uint64_t)&v91, (uint64_t *)&unk_10028E7E0);
    v73 = 0;
    v74 = 1;
  }
  *(_QWORD *)v13 = v73;
  *(_BYTE *)(v13 + 8) = v74;
  v89[0] = 0xD000000000000012;
  v89[1] = 0x800000010020AC10;
  AnyHashable.init<A>(_:)(v90, v89, &type metadata for String, &protocol witness table for String, v72);
  if (*(_QWORD *)(a1 + 16) && (v75 = sub_10010AAE0((uint64_t)v90), (v76 & 1) != 0))
  {
    sub_1000244B0(*(_QWORD *)(a1 + 56) + 32 * v75, (uint64_t)&v91);
  }
  else
  {
    v91 = 0u;
    v92 = 0u;
  }
  swift_bridgeObjectRelease(a1);
  sub_1000839B4((uint64_t)v90);
  if (!*((_QWORD *)&v92 + 1))
    return sub_100004934((uint64_t)&v91, (uint64_t *)&unk_10028E7E0);
  result = swift_dynamicCast(v89, &v91, (char *)&type metadata for Any + 8, &type metadata for String, 6);
  if ((result & 1) != 0)
  {
    v78 = v89[0];
    v79 = v89[1];
    result = swift_bridgeObjectRelease(v14[1]);
    *v14 = v78;
    v14[1] = v79;
  }
  return result;
}

uint64_t sub_1000E2D20(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t result;
  void (*v35)(char *, uint64_t, uint64_t);
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t *v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  _QWORD v77[2];
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;

  v2 = v1;
  v4 = sub_1000080B4((uint64_t *)&unk_1002904F0);
  __chkstk_darwin(v4, v5);
  v80 = (uint64_t)v77 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UUID(0);
  v81 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7, v8);
  v79 = (char *)v77 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (int *)type metadata accessor for CustodianRecoveryData(0);
  __chkstk_darwin(v10, v11);
  v13 = (char *)v77 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10028ADC8 != -1)
    swift_once(&qword_10028ADC8, sub_100046D2C);
  v14 = type metadata accessor for Logger(0);
  sub_100005288(v14, (uint64_t)qword_1002A89D8);
  v15 = sub_10000E0DC((uint64_t)a1, (uint64_t)v13);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.debug.getter(v16);
  if (os_log_type_enabled(v16, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc(12, -1);
    v19 = swift_slowAlloc(32, -1);
    v83 = v19;
    v78 = v7;
    *(_DWORD *)v18 = 136315138;
    v77[1] = v18 + 4;
    v20 = sub_1000E3D40();
    v22 = v21;
    v82 = sub_1001DEF4C(v20, v21, &v83);
    v7 = v78;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83);
    swift_bridgeObjectRelease(v22);
    sub_10000E120((uint64_t)v13);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Updating recovery data with data: %s", v18, 0xCu);
    swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v19, -1, -1);
    swift_slowDealloc(v18, -1, -1);
  }
  else
  {
    sub_10000E120((uint64_t)v13);
  }

  v23 = a1[1];
  v24 = v81;
  if (v23)
  {
    v25 = *a1;
    v26 = v2[1];
    swift_bridgeObjectRetain(a1[1]);
    swift_bridgeObjectRelease(v26);
    *v2 = v25;
    v2[1] = v23;
  }
  v27 = a1[3];
  if (v27)
  {
    v28 = a1[2];
    v29 = v2[3];
    swift_bridgeObjectRetain(a1[3]);
    swift_bridgeObjectRelease(v29);
    v2[2] = v28;
    v2[3] = v27;
  }
  v30 = a1[5];
  if (v30)
  {
    v31 = a1[4];
    v32 = v2[5];
    swift_bridgeObjectRetain(a1[5]);
    swift_bridgeObjectRelease(v32);
    v2[4] = v31;
    v2[5] = v30;
  }
  v33 = v80;
  sub_1000144EC((uint64_t)a1 + v10[7], v80);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v24 + 48))(v33, 1, v7) == 1)
  {
    result = sub_100004934(v33, (uint64_t *)&unk_1002904F0);
  }
  else
  {
    v35 = *(void (**)(char *, uint64_t, uint64_t))(v24 + 32);
    v36 = v79;
    v35(v79, v33, v7);
    v37 = (uint64_t)v2 + v10[7];
    sub_100004934(v37, (uint64_t *)&unk_1002904F0);
    v35((char *)v37, (uint64_t)v36, v7);
    result = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v24 + 56))(v37, 0, 1, v7);
  }
  v38 = v10[8];
  v39 = *(_QWORD *)((char *)a1 + v38 + 8);
  if (v39)
  {
    v40 = *(_QWORD *)((char *)a1 + v38);
    v41 = (_QWORD *)((char *)v2 + v38);
    v42 = *(_QWORD *)((char *)v2 + v38 + 8);
    swift_bridgeObjectRetain(*(_QWORD *)((char *)a1 + v38 + 8));
    result = swift_bridgeObjectRelease(v42);
    *v41 = v40;
    v41[1] = v39;
  }
  v43 = v10[9];
  v44 = *(_QWORD *)((char *)a1 + v43 + 8);
  if (v44)
  {
    v45 = *(_QWORD *)((char *)a1 + v43);
    v46 = (_QWORD *)((char *)v2 + v43);
    v47 = *(_QWORD *)((char *)v2 + v43 + 8);
    swift_bridgeObjectRetain(*(_QWORD *)((char *)a1 + v43 + 8));
    result = swift_bridgeObjectRelease(v47);
    *v46 = v45;
    v46[1] = v44;
  }
  v48 = v10[11];
  v49 = (_QWORD *)((char *)a1 + v48);
  v50 = *(_QWORD *)((char *)a1 + v48 + 8);
  if (v50 >> 60 != 15)
  {
    v51 = *v49;
    v52 = (_QWORD *)((char *)v2 + v48);
    v53 = *(_QWORD *)((char *)v2 + v48);
    v54 = *(_QWORD *)((char *)v2 + v48 + 8);
    sub_10000F450(*v49, *(_QWORD *)((char *)a1 + v48 + 8));
    result = sub_1000144D8(v53, v54);
    *v52 = v51;
    v52[1] = v50;
  }
  v55 = v10[12];
  v56 = (_QWORD *)((char *)a1 + v55);
  v57 = *(_QWORD *)((char *)a1 + v55 + 8);
  if (v57 >> 60 != 15)
  {
    v58 = *v56;
    v59 = (_QWORD *)((char *)v2 + v55);
    v60 = *(_QWORD *)((char *)v2 + v55);
    v61 = *(_QWORD *)((char *)v2 + v55 + 8);
    sub_10000F450(*v56, *(_QWORD *)((char *)a1 + v55 + 8));
    result = sub_1000144D8(v60, v61);
    *v59 = v58;
    v59[1] = v57;
  }
  v62 = v10[13];
  if ((*((_BYTE *)a1 + v62 + 8) & 1) == 0)
  {
    v63 = *(_QWORD *)((char *)a1 + v62);
    v64 = (char *)v2 + v62;
    *(_QWORD *)v64 = v63;
    v64[8] = 0;
  }
  v65 = v10[10];
  v66 = (_QWORD *)((char *)a1 + v65);
  v67 = *(_QWORD *)((char *)a1 + v65 + 8);
  if (v67 >> 60 != 15)
  {
    v68 = *v66;
    v69 = (_QWORD *)((char *)v2 + v65);
    v70 = *(_QWORD *)((char *)v2 + v65);
    v71 = *(_QWORD *)((char *)v2 + v65 + 8);
    sub_10000F450(*v66, *(_QWORD *)((char *)a1 + v65 + 8));
    result = sub_1000144D8(v70, v71);
    *v69 = v68;
    v69[1] = v67;
  }
  v72 = v10[16];
  v73 = *(_QWORD *)((char *)a1 + v72 + 8);
  if (v73)
  {
    v74 = *(_QWORD *)((char *)a1 + v72);
    v75 = (_QWORD *)((char *)v2 + v72);
    v76 = *(_QWORD *)((char *)v2 + v72 + 8);
    swift_bridgeObjectRetain(v73);
    result = swift_bridgeObjectRelease(v76);
    *v75 = v74;
    v75[1] = v73;
  }
  return result;
}

uint64_t sub_1000E31F4(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1000E322C
                                                                     + 4 * aS_0[a1]))(0xD000000000000011, 0x800000010020C520);
}

uint64_t sub_1000E322C()
{
  return 0x736553656B617073;
}

uint64_t sub_1000E3250()
{
  return 0x797265766F636572;
}

uint64_t sub_1000E3270()
{
  return 0x6169646F74737563;
}

uint64_t sub_1000E3294()
{
  return 0x70704172656E776FLL;
}

uint64_t sub_1000E32B4(uint64_t a1)
{
  return a1 + 4;
}

uint64_t sub_1000E337C(_QWORD *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  char v40;
  __int128 v41;

  v3 = v1;
  v5 = sub_1000080B4(&qword_100291000);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  v9 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a1[3];
  v11 = a1[4];
  sub_10000732C(a1, v10);
  v12 = sub_1000E4440();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for CustodianRecoveryData.CodingKeys, &type metadata for CustodianRecoveryData.CodingKeys, v12, v10, v11);
  v13 = *v3;
  v14 = v3[1];
  LOBYTE(v41) = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v13, v14, &v41, v5);
  if (!v2)
  {
    v15 = v3[2];
    v16 = v3[3];
    LOBYTE(v41) = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v15, v16, &v41, v5);
    v17 = v3[4];
    v18 = v3[5];
    LOBYTE(v41) = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v17, v18, &v41, v5);
    v19 = (int *)type metadata accessor for CustodianRecoveryData(0);
    v20 = (char *)v3 + v19[7];
    LOBYTE(v41) = 3;
    v21 = type metadata accessor for UUID(0);
    v22 = sub_100005190((unint64_t *)&unk_10028DC20, (uint64_t)&protocol conformance descriptor for UUID);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v20, &v41, v5, v21, v22);
    v23 = (uint64_t *)((char *)v3 + v19[8]);
    v24 = *v23;
    v25 = v23[1];
    LOBYTE(v41) = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v24, v25, &v41, v5);
    v26 = (uint64_t *)((char *)v3 + v19[9]);
    v27 = *v26;
    v28 = v26[1];
    LOBYTE(v41) = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v27, v28, &v41, v5);
    v41 = *(_OWORD *)((char *)v3 + v19[10]);
    v40 = 6;
    v29 = sub_10000F4D8();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v41, &v40, v5, &type metadata for Data, v29);
    v41 = *(_OWORD *)((char *)v3 + v19[11]);
    v40 = 7;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v41, &v40, v5, &type metadata for Data, v29);
    v41 = *(_OWORD *)((char *)v3 + v19[12]);
    v40 = 8;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v41, &v40, v5, &type metadata for Data, v29);
    v30 = (char *)v3 + v19[13];
    v31 = *(_QWORD *)v30;
    v32 = v30[8];
    LOBYTE(v41) = 9;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v31, v32, &v41, v5);
    v33 = *((unsigned __int8 *)v3 + v19[14]);
    LOBYTE(v41) = 10;
    KeyedEncodingContainer.encode(_:forKey:)(v33, &v41, v5);
    v34 = *(uint64_t *)((char *)v3 + v19[15]);
    LOBYTE(v41) = 11;
    KeyedEncodingContainer.encode(_:forKey:)(v34, &v41, v5);
    v35 = (uint64_t *)((char *)v3 + v19[16]);
    v36 = *v35;
    v37 = v35[1];
    LOBYTE(v41) = 12;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v36, v37, &v41, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

uint64_t sub_1000E3700@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t *v17;
  uint64_t *v18;
  uint64_t **v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  unint64_t v49;
  uint64_t *v50;
  uint64_t **v51;
  uint64_t *v52;
  uint64_t **v53;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t **v56;
  char *v57;
  uint64_t v58;
  uint64_t *v59;
  char v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t **v76;
  uint64_t **v77;
  uint64_t **v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t *v85;
  uint64_t *v86;
  char *v87;
  uint64_t *v88;
  uint64_t *v89;
  char v90;

  v74 = a2;
  v3 = sub_1000080B4((uint64_t *)&unk_1002904F0);
  __chkstk_darwin(v3, v4);
  v80 = (char *)&v69 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_1000080B4(&qword_100290FF0);
  v82 = *(_QWORD *)(v6 - 8);
  v83 = v6;
  __chkstk_darwin(v6, v7);
  v87 = (char *)&v69 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = (int *)type metadata accessor for CustodianRecoveryData(0);
  v11 = __chkstk_darwin(v9, v10);
  v13 = (_OWORD *)((char *)&v69 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13[1] = 0u;
  v13[2] = 0u;
  *v13 = 0u;
  v14 = (uint64_t)v13 + *(int *)(v11 + 28);
  v15 = type metadata accessor for UUID(0);
  v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56);
  v79 = v14;
  v81 = v15;
  v16(v14, 1, 1);
  v17 = (uint64_t *)((char *)v13 + v9[8]);
  *v17 = 0;
  v17[1] = 0;
  v18 = (uint64_t *)((char *)v13 + v9[9]);
  *v18 = 0;
  v18[1] = 0;
  v19 = (uint64_t **)((char *)v13 + v9[10]);
  *(_OWORD *)v19 = xmmword_10021A7E0;
  v77 = (uint64_t **)((char *)v13 + v9[11]);
  v78 = v19;
  *(_OWORD *)v77 = xmmword_10021A7E0;
  v76 = (uint64_t **)((char *)v13 + v9[12]);
  *(_OWORD *)v76 = xmmword_10021A7E0;
  v20 = (uint64_t *)((char *)v13 + v9[13]);
  *v20 = 0;
  *((_BYTE *)v20 + 8) = 1;
  v75 = v9[14];
  *((_BYTE *)v13 + v75) = 0;
  v21 = v9[15];
  *(_QWORD *)((char *)v13 + v21) = 1;
  v22 = v9[16];
  v86 = (uint64_t *)v13;
  v23 = (uint64_t *)((char *)v13 + v22);
  *v23 = 0;
  v23[1] = 0;
  v24 = a1[3];
  v25 = a1[4];
  v84 = a1;
  sub_10000732C(a1, v24);
  v26 = sub_1000E4440();
  v27 = v85;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for CustodianRecoveryData.CodingKeys, &type metadata for CustodianRecoveryData.CodingKeys, v26, v24, v25);
  if (v27)
  {
    v33 = v86;
    sub_100006F58(v84);
    v68 = (uint64_t)v33;
  }
  else
  {
    v85 = v17;
    v72 = v20;
    v73 = v18;
    v70 = v23;
    v71 = v21;
    v28 = v81;
    v29 = v82;
    LOBYTE(v88) = 0;
    v30 = v83;
    v31 = v87;
    v32 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v88, v83);
    v35 = v86;
    *v86 = v32;
    v35[1] = v36;
    LOBYTE(v88) = 1;
    v35[2] = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v88, v30);
    v35[3] = v37;
    LOBYTE(v88) = 2;
    v35[4] = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v88, v30);
    v35[5] = v38;
    LOBYTE(v88) = 3;
    v39 = sub_100005190((unint64_t *)&unk_10028BBB0, (uint64_t)&protocol conformance descriptor for UUID);
    v40 = (uint64_t)v80;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v28, &v88, v30, v28, v39);
    sub_100013AEC(v40, v79);
    LOBYTE(v88) = 4;
    v41 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v88, v30);
    v43 = v42;
    v44 = v85;
    swift_bridgeObjectRelease(v85[1]);
    *v44 = v41;
    v44[1] = v43;
    LOBYTE(v88) = 5;
    v45 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v88, v30);
    v47 = v46;
    v48 = v73;
    swift_bridgeObjectRelease(v73[1]);
    *v48 = v45;
    v48[1] = v47;
    v90 = 6;
    v49 = sub_10000F40C();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&type metadata for Data, &v90, v30, &type metadata for Data, v49);
    v50 = v89;
    v85 = v88;
    v51 = v78;
    sub_1000144D8((uint64_t)*v78, (unint64_t)v78[1]);
    *v51 = v85;
    v51[1] = v50;
    v90 = 7;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&type metadata for Data, &v90, v30, &type metadata for Data, v49);
    v52 = v89;
    v85 = v88;
    v53 = v77;
    sub_1000144D8((uint64_t)*v77, (unint64_t)v77[1]);
    *v53 = v85;
    v53[1] = v52;
    v90 = 8;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(&type metadata for Data, &v90, v30, &type metadata for Data, v49);
    v54 = v88;
    v55 = v89;
    v56 = v76;
    sub_1000144D8((uint64_t)*v76, (unint64_t)v76[1]);
    *v56 = v54;
    v56[1] = v55;
    LOBYTE(v88) = 9;
    v57 = v31;
    v58 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v88, v30);
    v59 = v72;
    *v72 = v58;
    *((_BYTE *)v59 + 8) = v60 & 1;
    LOBYTE(v88) = 10;
    v61 = KeyedDecodingContainer.decode(_:forKey:)(&v88, v83);
    *((_BYTE *)v86 + v75) = v61 & 1;
    LOBYTE(v88) = 11;
    v62 = KeyedDecodingContainer.decode(_:forKey:)(&v88, v83);
    *(uint64_t *)((char *)v86 + v71) = v62;
    LOBYTE(v88) = 12;
    v63 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v88, v83);
    v65 = v64;
    (*(void (**)(char *, uint64_t))(v29 + 8))(v57, v83);
    v66 = v70;
    swift_bridgeObjectRelease(v70[1]);
    *v66 = v63;
    v66[1] = v65;
    v67 = v86;
    sub_10000E0DC((uint64_t)v86, v74);
    sub_100006F58(v84);
    v68 = (uint64_t)v67;
  }
  return sub_10000E120(v68);
}

uint64_t sub_1000E3C9C()
{
  unsigned __int8 *v0;

  return sub_1000E31F4(*v0);
}

uint64_t sub_1000E3CA4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1000E4628(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000E3CC8(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000E4440();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000E3CF0(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000E4440();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000E3D18@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000E3700(a1, a2);
}

uint64_t sub_1000E3D2C(_QWORD *a1)
{
  return sub_1000E337C(a1);
}

uint64_t sub_1000E3D40()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  Swift::String v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  Swift::String v14;
  Swift::String v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  Swift::String v19;
  void *v20;
  uint64_t v21;
  Swift::String v22;
  void *object;
  int *v24;
  uint64_t v25;
  Swift::String v26;
  void *v27;
  void *v28;
  uint64_t *v29;
  void *v30;
  uint64_t v31;
  Swift::String v32;
  void *v33;
  uint64_t *v34;
  void *v35;
  uint64_t v36;
  Swift::String v37;
  void *v38;
  uint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  Swift::String v42;
  void *v43;
  void *v44;
  uint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  Swift::String v48;
  void *v49;
  void *v50;
  uint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  Swift::String v54;
  void *v55;
  void *v56;
  char *v57;
  uint64_t v58;
  Swift::String v59;
  void *v60;
  void *v61;
  Swift::String v62;
  uint64_t *v63;
  void *v64;
  uint64_t v65;
  Swift::String v66;
  void *v67;
  Swift::String v68;
  void *v69;
  void *v70;
  uint64_t v72;
  uint64_t v73;
  Swift::String v74;
  uint64_t v75;
  unint64_t v76;

  v1 = sub_1000080B4((uint64_t *)&unk_1002904F0);
  __chkstk_darwin(v1, v2);
  v4 = (char *)&v72 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  v9 = (char *)&v72 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v75 = 0;
  v76 = 0xE000000000000000;
  _StringGuts.grow(_:)(70);
  v10._countAndFlagsBits = 0xD000000000000030;
  v10._object = (void *)0x800000010020C3C0;
  String.append(_:)(v10);
  v11 = v0[1];
  if (v11)
  {
    v12 = *v0;
    v13 = (void *)v0[1];
  }
  else
  {
    v12 = 7104878;
    v13 = (void *)0xE300000000000000;
  }
  swift_bridgeObjectRetain(v11);
  v14._countAndFlagsBits = v12;
  v14._object = v13;
  String.append(_:)(v14);
  swift_bridgeObjectRelease(v13);
  v15._countAndFlagsBits = 0xD000000000000012;
  v15._object = (void *)0x800000010020C400;
  String.append(_:)(v15);
  v16 = v0[3];
  if (v16)
  {
    v17 = v0[2];
    v18 = (void *)v0[3];
  }
  else
  {
    v17 = 7104878;
    v18 = (void *)0xE300000000000000;
  }
  swift_bridgeObjectRetain(v16);
  v19._countAndFlagsBits = v17;
  v19._object = v18;
  String.append(_:)(v19);
  swift_bridgeObjectRelease(v18);
  v20 = (void *)v0[5];
  if (v20)
  {
    v21 = v0[4];
    v74._countAndFlagsBits = 0;
    v74._object = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(18);
    swift_bridgeObjectRelease(v74._object);
    v74._countAndFlagsBits = 0xD000000000000010;
    v74._object = (void *)0x800000010020C4E0;
    v22._countAndFlagsBits = v21;
    v22._object = v20;
    String.append(_:)(v22);
    object = v74._object;
    String.append(_:)(v74);
    swift_bridgeObjectRelease(object);
  }
  v24 = (int *)type metadata accessor for CustodianRecoveryData(0);
  sub_1000144EC((uint64_t)v0 + v24[7], (uint64_t)v4);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    sub_100004934((uint64_t)v4, (uint64_t *)&unk_1002904F0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v9, v4, v5);
    v74._countAndFlagsBits = 0;
    v74._object = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(19);
    swift_bridgeObjectRelease(v74._object);
    v74._countAndFlagsBits = 0xD000000000000011;
    v74._object = (void *)0x800000010020C4C0;
    v25 = sub_100005190((unint64_t *)&qword_10028BBE0, (uint64_t)&protocol conformance descriptor for UUID);
    v26._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v5, v25);
    v27 = v26._object;
    String.append(_:)(v26);
    swift_bridgeObjectRelease(v27);
    v28 = v74._object;
    String.append(_:)(v74);
    swift_bridgeObjectRelease(v28);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  }
  v29 = (uint64_t *)((char *)v0 + v24[8]);
  v30 = (void *)v29[1];
  if (v30)
  {
    v31 = *v29;
    v74._countAndFlagsBits = 0;
    v74._object = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(18);
    swift_bridgeObjectRelease(v74._object);
    v74._countAndFlagsBits = 0xD000000000000010;
    v74._object = (void *)0x800000010020C4A0;
    v32._countAndFlagsBits = v31;
    v32._object = v30;
    String.append(_:)(v32);
    v33 = v74._object;
    String.append(_:)(v74);
    swift_bridgeObjectRelease(v33);
  }
  v34 = (uint64_t *)((char *)v0 + v24[9]);
  v35 = (void *)v34[1];
  if (v35)
  {
    v36 = *v34;
    v74._countAndFlagsBits = 0;
    v74._object = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(27);
    swift_bridgeObjectRelease(v74._object);
    v74._countAndFlagsBits = 0xD000000000000019;
    v74._object = (void *)0x800000010020C480;
    v37._countAndFlagsBits = v36;
    v37._object = v35;
    String.append(_:)(v37);
    v38 = v74._object;
    String.append(_:)(v74);
    swift_bridgeObjectRelease(v38);
  }
  v39 = (uint64_t *)((char *)v0 + v24[11]);
  v40 = v39[1];
  if (v40 >> 60 != 15)
  {
    v41 = *v39;
    strcpy((char *)&v74, "\n aaData: ");
    BYTE3(v74._object) = 0;
    HIDWORD(v74._object) = -369098752;
    sub_100014534(v41, v40);
    v42._countAndFlagsBits = Data.description.getter(v41, v40);
    v43 = v42._object;
    String.append(_:)(v42);
    swift_bridgeObjectRelease(v43);
    v44 = v74._object;
    String.append(_:)(v74);
    swift_bridgeObjectRelease(v44);
    sub_1000144D8(v41, v40);
  }
  v45 = (uint64_t *)((char *)v0 + v24[12]);
  v46 = v45[1];
  if (v46 >> 60 != 15)
  {
    v47 = *v45;
    strcpy((char *)&v74, "\n IdMSData: ");
    BYTE5(v74._object) = 0;
    HIWORD(v74._object) = -5120;
    sub_100014534(v47, v46);
    v48._countAndFlagsBits = Data.description.getter(v47, v46);
    v49 = v48._object;
    String.append(_:)(v48);
    swift_bridgeObjectRelease(v49);
    v50 = v74._object;
    String.append(_:)(v74);
    swift_bridgeObjectRelease(v50);
    sub_1000144D8(v47, v46);
  }
  v51 = (uint64_t *)((char *)v0 + v24[10]);
  v52 = v51[1];
  if (v52 >> 60 != 15)
  {
    v53 = *v51;
    v74._countAndFlagsBits = 0;
    v74._object = (void *)0xE000000000000000;
    sub_10000F450(v53, v52);
    _StringGuts.grow(_:)(19);
    swift_bridgeObjectRelease(v74._object);
    v74._countAndFlagsBits = 0xD000000000000011;
    v74._object = (void *)0x800000010020C460;
    v54._countAndFlagsBits = Data.description.getter(v53, v52);
    v55 = v54._object;
    String.append(_:)(v54);
    swift_bridgeObjectRelease(v55);
    v56 = v74._object;
    String.append(_:)(v74);
    swift_bridgeObjectRelease(v56);
    sub_1000144D8(v53, v52);
  }
  v57 = (char *)v0 + v24[13];
  if ((v57[8] & 1) == 0)
  {
    v58 = *(_QWORD *)v57;
    strcpy((char *)&v74, "\n errorCode: ");
    HIWORD(v74._object) = -4864;
    v73 = v58;
    v59._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    v60 = v59._object;
    String.append(_:)(v59);
    swift_bridgeObjectRelease(v60);
    v61 = v74._object;
    String.append(_:)(v74);
    swift_bridgeObjectRelease(v61);
  }
  if (*((_BYTE *)v0 + v24[14]) == 1)
  {
    v62._countAndFlagsBits = 0x736553696C43200ALL;
    v62._object = (void *)0xEC0000006E6F6973;
    String.append(_:)(v62);
  }
  v63 = (uint64_t *)((char *)v0 + v24[16]);
  v64 = (void *)v63[1];
  if (v64)
  {
    v65 = *v63;
    v74._countAndFlagsBits = 0;
    v74._object = (void *)0xE000000000000000;
    _StringGuts.grow(_:)(24);
    swift_bridgeObjectRelease(v74._object);
    v74._countAndFlagsBits = 0xD000000000000016;
    v74._object = (void *)0x800000010020C440;
    v66._countAndFlagsBits = v65;
    v66._object = v64;
    String.append(_:)(v66);
    v67 = v74._object;
    String.append(_:)(v74);
    swift_bridgeObjectRelease(v67);
  }
  v74._countAndFlagsBits = 0;
  v74._object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(27);
  swift_bridgeObjectRelease(v74._object);
  v74._countAndFlagsBits = 0xD000000000000019;
  v74._object = (void *)0x800000010020C420;
  v73 = *(uint64_t *)((char *)v0 + v24[15]);
  v68._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v69 = v68._object;
  String.append(_:)(v68);
  swift_bridgeObjectRelease(v69);
  v70 = v74._object;
  String.append(_:)(v74);
  swift_bridgeObjectRelease(v70);
  return v75;
}

unint64_t sub_1000E4440()
{
  unint64_t result;

  result = qword_100290FF8;
  if (!qword_100290FF8)
  {
    result = swift_getWitnessTable(&unk_10021C774, &type metadata for CustodianRecoveryData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100290FF8);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for CustodianRecoveryData.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 12 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 12) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF4)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF3)
    return ((uint64_t (*)(void))((char *)&loc_1000E44D0 + 4 * byte_10021C5A2[v4]))();
  *a1 = a2 + 12;
  return ((uint64_t (*)(void))((char *)sub_1000E4504 + 4 * byte_10021C59D[v4]))();
}

uint64_t sub_1000E4504(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000E450C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000E4514);
  return result;
}

uint64_t sub_1000E4520(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000E4528);
  *(_BYTE *)result = a2 + 12;
  return result;
}

uint64_t sub_1000E452C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000E4534(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CustodianRecoveryData.CodingKeys()
{
  return &type metadata for CustodianRecoveryData.CodingKeys;
}

unint64_t sub_1000E4554()
{
  unint64_t result;

  result = qword_100291008;
  if (!qword_100291008)
  {
    result = swift_getWitnessTable(&unk_10021C74C, &type metadata for CustodianRecoveryData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100291008);
  }
  return result;
}

unint64_t sub_1000E459C()
{
  unint64_t result;

  result = qword_100291010;
  if (!qword_100291010)
  {
    result = swift_getWitnessTable(&unk_10021C6BC, &type metadata for CustodianRecoveryData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100291010);
  }
  return result;
}

unint64_t sub_1000E45E4()
{
  unint64_t result;

  result = qword_100291018;
  if (!qword_100291018)
  {
    result = swift_getWitnessTable(&unk_10021C6E4, &type metadata for CustodianRecoveryData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100291018);
  }
  return result;
}

uint64_t sub_1000E4628(uint64_t a1, unint64_t a2)
{
  unint64_t v4;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char v17;

  if (a1 == 0xD000000000000011)
  {
    v4 = 0x800000010020C520;
    if (a2 == 0x800000010020C520)
      goto LABEL_5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011, 0x800000010020C520, a1, a2, 0) & 1) != 0)
  {
    v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (a1 == 0x736553656B617073 && a2 == 0xEE0044496E6F6973)
  {
    v6 = 0xEE0044496E6F6973;
LABEL_11:
    swift_bridgeObjectRelease(v6);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x736553656B617073, 0xEE0044496E6F6973, a1, a2, 0) & 1) != 0)
  {
    v6 = a2;
    goto LABEL_11;
  }
  if (a1 == 0x797265766F636572 && a2 == 0xEC00000065646F43)
  {
    v7 = 0xEC00000065646F43;
LABEL_17:
    swift_bridgeObjectRelease(v7);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x797265766F636572, 0xEC00000065646F43, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_17;
  }
  if (a1 == 0x6169646F74737563 && a2 == 0xED0000444955556ELL)
  {
    v8 = 0xED0000444955556ELL;
LABEL_23:
    swift_bridgeObjectRelease(v8);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6169646F74737563, 0xED0000444955556ELL, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_23;
  }
  if (a1 == 0x70704172656E776FLL && a2 == 0xEC0000004449656CLL)
  {
    v9 = 0xEC0000004449656CLL;
LABEL_29:
    swift_bridgeObjectRelease(v9);
    return 4;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x70704172656E776FLL, 0xEC0000004449656CLL, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_29;
  }
  if (a1 == 0xD000000000000015 && a2 == 0x800000010020C500)
  {
    v10 = 0x800000010020C500;
LABEL_35:
    swift_bridgeObjectRelease(v10);
    return 5;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015, 0x800000010020C500, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
    goto LABEL_35;
  }
  if (a1 == 0x6574707972636E65 && a2 == 0xED0000434B525064)
  {
    v11 = 0xED0000434B525064;
LABEL_41:
    swift_bridgeObjectRelease(v11);
    return 6;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6574707972636E65, 0xED0000434B525064, a1, a2, 0) & 1) != 0)
  {
    v11 = a2;
    goto LABEL_41;
  }
  if (a1 == 0x617461446161 && a2 == 0xE600000000000000)
  {
    v12 = 0xE600000000000000;
LABEL_47:
    swift_bridgeObjectRelease(v12);
    return 7;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x617461446161, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v12 = a2;
    goto LABEL_47;
  }
  if (a1 == 0x61746144736D6469 && a2 == 0xE800000000000000)
  {
    v13 = 0xE800000000000000;
LABEL_53:
    swift_bridgeObjectRelease(v13);
    return 8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x61746144736D6469, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v13 = a2;
    goto LABEL_53;
  }
  if (a1 == 0x646F43726F727265 && a2 == 0xE900000000000065)
  {
    v14 = 0xE900000000000065;
LABEL_59:
    swift_bridgeObjectRelease(v14);
    return 9;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x646F43726F727265, 0xE900000000000065, a1, a2, 0) & 1) != 0)
  {
    v14 = a2;
    goto LABEL_59;
  }
  if (a1 == 0x6973736553696C63 && a2 == 0xEA00000000006E6FLL)
  {
    v15 = 0xEA00000000006E6FLL;
LABEL_65:
    swift_bridgeObjectRelease(v15);
    return 10;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6973736553696C63, 0xEA00000000006E6FLL, a1, a2, 0) & 1) != 0)
  {
    v15 = a2;
    goto LABEL_65;
  }
  if (a1 == 0x7374706D65747461 && a2 == 0xE800000000000000)
  {
    v16 = 0xE800000000000000;
LABEL_71:
    swift_bridgeObjectRelease(v16);
    return 11;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7374706D65747461, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v16 = a2;
    goto LABEL_71;
  }
  if (a1 == 0xD000000000000012 && a2 == 0x800000010020AC10)
  {
    swift_bridgeObjectRelease(0x800000010020AC10);
    return 12;
  }
  else
  {
    v17 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012, 0x800000010020AC10, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v17 & 1) != 0)
      return 12;
    else
      return 13;
  }
}

uint64_t sub_1000E4BFC(uint64_t a1, unint64_t a2)
{
  void *v4;
  Class isa;
  id v6;
  id v7;
  uint64_t v8;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD v14[2];
  _OWORD v15[2];

  v4 = (void *)objc_opt_self(NSJSONSerialization);
  isa = Data._bridgeToObjectiveC()().super.isa;
  *(_QWORD *)&v15[0] = 0;
  v6 = objc_msgSend(v4, "JSONObjectWithData:options:error:", isa, 4, v15);

  v7 = *(id *)&v15[0];
  if (v6)
  {
    _bridgeAnyObjectToAny(_:)(v14, v6);
    sub_10000F494(a1, a2);
    swift_unknownObjectRelease(v6);
    sub_1000080F4(v14, v15);
    sub_1000080F4(v15, v14);
    v8 = sub_1000080B4(&qword_100291020);
    if (swift_dynamicCast(&v13, v14, (char *)&type metadata for Any + 8, v8, 6))
      return v13;
  }
  else
  {
    v10 = v7;
    v11 = _convertNSErrorToError(_:)(v7);

    swift_willThrow(v12);
    sub_10000F494(a1, a2);
    swift_errorRelease(v11);
  }
  return 0;
}

uint64_t sub_1000E4D5C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void (*v13)(char *, uint64_t);
  Swift::String v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  v4 = type metadata accessor for URL(0);
  v5 = *(_QWORD *)(v4 - 8);
  v7 = __chkstk_darwin(v4, v6);
  v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7, v10);
  v12 = (char *)&v17 - v11;
  type metadata accessor for LocalCache();
  sub_10000840C();
  URL.appendingPathComponent(_:isDirectory:)(0xD000000000000011, 0x800000010020C540, 1);
  v13 = *(void (**)(char *, uint64_t))(v5 + 8);
  v13(v9, v4);
  sub_1000E5764();
  v17 = a1;
  v18 = a2;
  swift_bridgeObjectRetain(a2);
  v14._countAndFlagsBits = 0x6E656B6F742ELL;
  v14._object = (void *)0xE600000000000000;
  String.append(_:)(v14);
  v15 = v18;
  URL.appendingPathComponent(_:)(v17);
  swift_bridgeObjectRelease(v15);
  return ((uint64_t (*)(char *, uint64_t))v13)(v12, v4);
}

uint64_t sub_1000E4EA4(uint64_t a1, uint64_t a2, void *a3)
{
  void *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  id v11;
  id v12;
  id v13;
  id v14;
  NSObject *v15;
  __n128 v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  id v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  void *v27;
  void *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  void *v38;
  uint64_t *v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  uint64_t v47;

  v44 = a2;
  v45 = a1;
  v5 = type metadata accessor for URL(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  v9 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10028ADC0 != -1)
    swift_once(&qword_10028ADC0, sub_100046D04);
  v10 = type metadata accessor for Logger(0);
  sub_100005288(v10, (uint64_t)qword_1002A89C0);
  v11 = a3;
  v12 = v3;
  v13 = v11;
  v14 = v12;
  v15 = Logger.logObject.getter(v14);
  v17 = static os_log_type_t.default.getter(v16);
  if (os_log_type_enabled(v15, (os_log_type_t)v17))
  {
    v41 = v17;
    v42 = v6;
    v43 = v5;
    v18 = swift_slowAlloc(22, -1);
    v40 = swift_slowAlloc(64, -1);
    v47 = v40;
    *(_DWORD *)v18 = 136315394;
    v46 = objc_msgSend(v14, "scope");
    type metadata accessor for Scope(0);
    v20 = String.init<A>(describing:)(&v46, v19);
    v22 = v21;
    v46 = (id)sub_1001DEF4C(v20, v21, &v47);
    v39 = &v47;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, &v47);

    swift_bridgeObjectRelease(v22);
    *(_WORD *)(v18 + 12) = 2080;
    if (a3)
    {
      v23 = objc_msgSend(v13, "data");
      v24 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v23);
      v26 = v25;

      sub_1001D34B0(v24, v26);
      v38 = a3;
      v28 = v27;
      v46 = v27;
      v29 = sub_1000080B4((uint64_t *)&unk_10028E800);
      v30 = sub_10008685C();
      v31 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v29, v30);
      v33 = v32;
      v34 = v28;
      a3 = v38;
      swift_bridgeObjectRelease(v34);
      sub_10000F494(v24, v26);
    }
    else
    {
      v33 = 0xE300000000000000;
      v31 = 7104878;
    }
    v35 = v44;
    v46 = (id)sub_1001DEF4C(v31, v33, &v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, v39);

    swift_bridgeObjectRelease(v33);
    _os_log_impl((void *)&_mh_execute_header, v15, (os_log_type_t)v41, "Updated database change token. database: %s, token: %s", (uint8_t *)v18, 0x16u);
    v36 = v40;
    swift_arrayDestroy(v40, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v36, -1, -1);
    swift_slowDealloc(v18, -1, -1);

    v6 = v42;
    v5 = v43;
  }
  else
  {

    v35 = v44;
  }
  sub_1000E4D5C(v45, v35);
  sub_1000E5EE4(a3, (uint64_t)v9);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

uint64_t sub_1000E51F4(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  id v7;
  uint64_t v8;
  void *v9;
  void *v10;
  Swift::String v11;
  id v12;
  uint64_t v13;
  void *v14;
  void *v15;
  Swift::String v16;
  void *object;
  Swift::String v19;

  v2 = type metadata accessor for URL(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for LocalCache();
  sub_10000840C();
  URL.appendingPathComponent(_:isDirectory:)(0x736E656B6F544B43, 0xED0000656E6F5A2FLL, 1);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  sub_1000E5764();
  v7 = objc_msgSend(a1, "ownerName");
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
  v10 = v9;

  v11._countAndFlagsBits = v8;
  v11._object = v10;
  URL.appendPathComponent(_:)(v11);
  swift_bridgeObjectRelease(v10);
  v12 = objc_msgSend(a1, "zoneName");
  v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
  v15 = v14;

  v19._countAndFlagsBits = v13;
  v19._object = v15;
  v16._countAndFlagsBits = 0x6E656B6F742ELL;
  v16._object = (void *)0xE600000000000000;
  String.append(_:)(v16);
  object = v19._object;
  URL.appendPathComponent(_:)(v19);
  return swift_bridgeObjectRelease(object);
}

uint64_t sub_1000E5374(void *a1, void *a2)
{
  void *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  NSObject *v16;
  __n128 v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  id v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  id v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  void *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  os_log_t v42;
  uint64_t v43;
  id v45;
  uint64_t *v46;
  uint64_t v47;
  int v48;
  os_log_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  id v53;
  uint64_t v54;

  v5 = type metadata accessor for URL(0);
  v52 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5, v6);
  v8 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10028ADC0 != -1)
    swift_once(&qword_10028ADC0, sub_100046D04);
  v9 = type metadata accessor for Logger(0);
  sub_100005288(v9, (uint64_t)qword_1002A89C0);
  v10 = a2;
  v11 = v2;
  v12 = a1;
  v13 = v10;
  v14 = v11;
  v15 = v12;
  v16 = Logger.logObject.getter(v15);
  v18 = static os_log_type_t.default.getter(v17);
  if (os_log_type_enabled(v16, (os_log_type_t)v18))
  {
    v45 = v13;
    v48 = v18;
    v49 = v16;
    v50 = v5;
    v19 = swift_slowAlloc(32, -1);
    v47 = swift_slowAlloc(96, -1);
    v54 = v47;
    *(_DWORD *)v19 = 136315650;
    v53 = objc_msgSend(v14, "scope");
    type metadata accessor for Scope(0);
    v21 = String.init<A>(describing:)(&v53, v20);
    v23 = v22;
    v53 = (id)sub_1001DEF4C(v21, v22, &v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &v54);

    swift_bridgeObjectRelease(v23);
    v51 = a2;
    *(_WORD *)(v19 + 12) = 2080;
    v24 = objc_msgSend(v15, "zoneName");
    v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
    v27 = v26;

    v53 = (id)sub_1001DEF4C(v25, v27, &v54);
    v46 = &v54;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &v54);

    swift_bridgeObjectRelease(v27);
    *(_WORD *)(v19 + 22) = 2080;
    a2 = v51;
    if (v51)
    {
      v28 = v45;
      v29 = objc_msgSend(v45, "data");
      v30 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v29);
      v32 = v31;

      sub_1001D34B0(v30, v32);
      v34 = v33;
      v53 = v33;
      v35 = sub_1000080B4((uint64_t *)&unk_10028E800);
      v36 = sub_10008685C();
      v37 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v35, v36);
      v39 = v38;
      swift_bridgeObjectRelease(v34);
      v40 = v32;
      a2 = v51;
      sub_10000F494(v30, v40);
      v41 = v52;
    }
    else
    {
      v39 = 0xE300000000000000;
      v37 = 7104878;
      v41 = v52;
      v28 = v45;
    }
    v53 = (id)sub_1001DEF4C(v37, v39, &v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, v46);

    swift_bridgeObjectRelease(v39);
    v42 = v49;
    _os_log_impl((void *)&_mh_execute_header, v49, (os_log_type_t)v48, "Updated zone change token. database: %s, zoneID: %s, token: %s", (uint8_t *)v19, 0x20u);
    v43 = v47;
    swift_arrayDestroy(v47, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v43, -1, -1);
    swift_slowDealloc(v19, -1, -1);

    v5 = v50;
  }
  else
  {

    v41 = v52;
  }
  sub_1000E51F4(v15);
  sub_1000E5EE4(a2, (uint64_t)v8);
  return (*(uint64_t (**)(char *, uint64_t))(v41 + 8))(v8, v5);
}

void sub_1000E5764()
{
  void *v0;
  id v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;

  v1 = objc_msgSend(v0, "scope");
  if (v1 == (id)3)
  {
    v2 = 0x646572616853;
    goto LABEL_6;
  }
  if (v1 == (id)2)
  {
    v2 = 0x65746176697250;
LABEL_13:
    v3 = 0xE700000000000000;
    goto LABEL_14;
  }
  if (v1 != (id)1)
  {
    if (qword_10028ADB8 != -1)
      swift_once(&qword_10028ADB8, sub_100046CE4);
    v4 = type metadata accessor for Logger(0);
    v5 = sub_100005288(v4, (uint64_t)qword_1002A89A8);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Unknown CKDatabase.Scope!", v8, 2u);
      swift_slowDealloc(v8, -1, -1);
    }

    v2 = 0x6E776F6E6B6E55;
    goto LABEL_13;
  }
  v2 = 0x63696C627550;
LABEL_6:
  v3 = 0xE600000000000000;
LABEL_14:
  URL.appendPathComponent(_:)(*(Swift::String *)&v2);
}

uint64_t sub_1000E58B0(uint64_t a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  NSString v5;
  uint64_t result;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[4];
  uint64_t v14;

  v2 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  URL.path.getter();
  v4 = v3;
  v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v4);
  LODWORD(v4) = objc_msgSend(v2, "fileExistsAtPath:", v5);

  result = 0;
  if ((_DWORD)v4)
  {
    v7 = Data.init(contentsOf:options:)(a1, 0);
    v9 = v8;
    sub_1000067D4(0, &qword_10028C0B8, NSKeyedUnarchiver_ptr);
    v10 = sub_1000080B4(&qword_10028C0C0);
    v11 = swift_allocObject(v10, 40, 7);
    *(_OWORD *)(v11 + 16) = xmmword_100218E30;
    v12 = sub_1000067D4(0, &qword_100291028, CKServerChangeToken_ptr);
    *(_QWORD *)(v11 + 32) = v12;
    sub_10000F450(v7, v9);
    static NSKeyedUnarchiver.unarchivedObject(ofClasses:from:)(v13, v11, v7, v9);
    sub_10000F494(v7, v9);
    sub_10000F494(v7, v9);
    swift_bridgeObjectRelease(v11);
    if (v13[3])
    {
      if (swift_dynamicCast(&v14, v13, (char *)&type metadata for Any + 8, v12, 6))
        return v14;
      else
        return 0;
    }
    else
    {
      sub_10008C388((uint64_t)v13);
      return 0;
    }
  }
  return result;
}

uint64_t sub_1000E5C14(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  id v9;
  NSURL *v10;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  id v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  void *v20;
  id v21;

  v4 = type metadata accessor for URL(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  URL.deletingLastPathComponent()();
  URL._bridgeToObjectiveC()(v10);
  v12 = v11;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  v21 = 0;
  LODWORD(v4) = objc_msgSend(v9, "createDirectoryAtURL:withIntermediateDirectories:attributes:error:", v12, 1, 0, &v21);

  v13 = v21;
  if ((_DWORD)v4
    && (v14 = (void *)objc_opt_self(NSKeyedArchiver),
        v21 = 0,
        v15 = objc_msgSend(v14, "archivedDataWithRootObject:requiringSecureCoding:error:", a1, 1, &v21),
        v13 = v21,
        v15))
  {
    v16 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v15);
    v18 = v17;

    sub_10000F450(v16, v18);
    sub_1000C3E94(a2, 1, 0, 1, v16, v18);
    sub_10000F494(v16, v18);
    return sub_10000F494(v16, v18);
  }
  else
  {
    v20 = v13;
    _convertNSErrorToError(_:)(v13);

    return swift_willThrow();
  }
}

id sub_1000E5E00()
{
  id v0;
  NSURL *v1;
  void *v2;
  void *v3;
  unsigned int v4;
  id v5;
  id v7;
  id v8;

  v0 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  URL._bridgeToObjectiveC()(v1);
  v3 = v2;
  v8 = 0;
  v4 = objc_msgSend(v0, "removeItemAtURL:error:", v2, &v8);

  v5 = v8;
  if (v4)
    return v8;
  v7 = v8;
  _convertNSErrorToError(_:)(v5);

  return (id)swift_willThrow();
}

void sub_1000E5EE4(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  NSString v11;
  id v12;

  v4 = type metadata accessor for URL(0);
  v6 = __chkstk_darwin(v4, v5);
  __chkstk_darwin(v6, v7);
  if (a1)
  {
    v12 = a1;
    sub_1000E5C14((uint64_t)v12, a2);

  }
  else
  {
    v8 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
    URL.path.getter();
    v10 = v9;
    v11 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v10);
    LODWORD(v10) = objc_msgSend(v8, "fileExistsAtPath:", v11);

    if ((_DWORD)v10)
      sub_1000E5E00();
  }
}

uint64_t sub_1000E6454()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  uint64_t v3;

  v3 = type metadata accessor for TrustedContactsAwarenessSync(0);
  v0 = sub_1000080B4(&qword_100291118);
  result = String.init<A>(describing:)(&v3, v0);
  qword_100291030 = result;
  *(_QWORD *)algn_100291038 = v2;
  return result;
}

uint64_t sub_1000E649C(uint64_t a1, char a2, void (*a3)(_QWORD), uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  void (*v42)(_QWORD);
  uint64_t v43[5];
  uint64_t v44;
  _BYTE v45[16];

  v12 = sub_1000080B4(&qword_10028FA50);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12, v14);
  v16 = (char *)&v41 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 1) != 0)
  {
    swift_errorRetain(a1);
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v19 = type metadata accessor for Logger(0);
    sub_100005288(v19, (uint64_t)qword_1002A8A08);
    swift_errorRetain(a1);
    v20 = swift_errorRetain(a1);
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.error.getter(v21);
    if (os_log_type_enabled(v21, v22))
    {
      v42 = a3;
      v23 = swift_slowAlloc(22, -1);
      v24 = swift_slowAlloc(64, -1);
      v43[0] = v24;
      *(_DWORD *)v23 = 136315394;
      if (qword_10028AE70 != -1)
        swift_once(&qword_10028AE70, sub_1000E6454);
      v25 = qword_100291030;
      v26 = *(_QWORD *)algn_100291038;
      swift_bridgeObjectRetain(*(_QWORD *)algn_100291038);
      v44 = sub_1001DEF4C(v25, v26, v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, v45);
      swift_bridgeObjectRelease(v26);
      *(_WORD *)(v23 + 12) = 2080;
      v44 = a1;
      swift_errorRetain(a1);
      v27 = sub_1000080B4(&qword_10028E850);
      v28 = String.init<A>(describing:)(&v44, v27);
      v30 = v29;
      v44 = sub_1001DEF4C(v28, v29, v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, v45);
      swift_bridgeObjectRelease(v30);
      sub_10006AEB4(a1, 1);
      sub_10006AEB4(a1, 1);
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "%s - error fetching manatee status: %s", (uint8_t *)v23, 0x16u);
      swift_arrayDestroy(v24, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v24, -1, -1);
      swift_slowDealloc(v23, -1, -1);

      a3 = v42;
    }
    else
    {
      sub_10006AEB4(a1, 1);
      sub_10006AEB4(a1, 1);

    }
    swift_errorRetain(a1);
    a3(a1);
    sub_10006AEB4(a1, 1);
    return sub_10006AEB4(a1, 1);
  }
  else if ((a1 & 1) != 0)
  {
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v31 = type metadata accessor for Logger(0);
    v32 = sub_100005288(v31, (uint64_t)qword_1002A8A08);
    v33 = Logger.logObject.getter(v32);
    v34 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v33, v34))
    {
      v41 = a4;
      v42 = a3;
      v35 = (uint8_t *)swift_slowAlloc(12, -1);
      v36 = swift_slowAlloc(32, -1);
      v43[0] = v36;
      *(_DWORD *)v35 = 136315138;
      if (qword_10028AE70 != -1)
        swift_once(&qword_10028AE70, sub_1000E6454);
      v38 = qword_100291030;
      v37 = *(_QWORD *)algn_100291038;
      swift_bridgeObjectRetain(*(_QWORD *)algn_100291038);
      v44 = sub_1001DEF4C(v38, v37, v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, v45);
      swift_bridgeObjectRelease(v37);
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "%s - updating Trusted Contacts Awareness on account", v35, 0xCu);
      swift_arrayDestroy(v36, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v36, -1, -1);
      swift_slowDealloc(v35, -1, -1);

      a4 = v41;
      a3 = v42;
    }
    else
    {

    }
    swift_beginAccess(a5 + 16, v43, 0, 0);
    result = swift_weakLoadStrong(a5 + 16);
    if (result)
    {
      v39 = result;
      v40 = (_QWORD *)swift_allocObject(&unk_100266C70, 48, 7);
      v40[2] = a5;
      v40[3] = a3;
      v40[4] = a4;
      v40[5] = a6;
      swift_retain(a5);
      swift_retain(a4);
      sub_1000E6F50((uint64_t)sub_1000E80F0, (uint64_t)v40);
      swift_release(v39);
      return swift_release(v40);
    }
  }
  else
  {
    swift_beginAccess(a5 + 16, &v44, 0, 0);
    result = swift_weakLoadStrong(a5 + 16);
    if (result)
    {
      v18 = result;
      (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v16, result + OBJC_IVAR____TtC13appleaccountd28TrustedContactsAwarenessSync__accountStore, v12);
      Dependency.wrappedValue.getter(v43, v12);
      swift_release(v18);
      (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
      sub_10000732C(v43, v43[3]);
      sub_100046A3C(0, 0, a3, a4);
      return sub_100006F58(v43);
    }
  }
  return result;
}

uint64_t sub_1000E6A04(uint64_t a1, char a2, uint64_t a3, void (*a4)(_QWORD), uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  void (*v28)(_QWORD);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t result;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(_QWORD);
  uint64_t v42;
  uint64_t v43[5];
  uint64_t v44;
  _BYTE v45[16];

  v10 = sub_1000080B4(&qword_10028FA50);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  v14 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 1) != 0)
  {
    swift_errorRetain(a1);
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v24 = type metadata accessor for Logger(0);
    sub_100005288(v24, (uint64_t)qword_1002A8A08);
    swift_errorRetain(a1);
    v25 = swift_errorRetain(a1);
    v26 = Logger.logObject.getter(v25);
    v27 = static os_log_type_t.error.getter(v26);
    if (os_log_type_enabled(v26, v27))
    {
      v28 = a4;
      v29 = swift_slowAlloc(22, -1);
      v30 = swift_slowAlloc(64, -1);
      v43[0] = v30;
      *(_DWORD *)v29 = 136315394;
      if (qword_10028AE70 != -1)
        swift_once(&qword_10028AE70, sub_1000E6454);
      v31 = qword_100291030;
      v32 = *(_QWORD *)algn_100291038;
      swift_bridgeObjectRetain(*(_QWORD *)algn_100291038);
      v44 = sub_1001DEF4C(v31, v32, v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, v45);
      swift_bridgeObjectRelease(v32);
      *(_WORD *)(v29 + 12) = 2080;
      v44 = a1;
      swift_errorRetain(a1);
      v33 = sub_1000080B4(&qword_10028E850);
      v34 = String.init<A>(describing:)(&v44, v33);
      v36 = v35;
      v44 = sub_1001DEF4C(v34, v35, v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, v45);
      swift_bridgeObjectRelease(v36);
      sub_10006AEB4(a1, 1);
      sub_10006AEB4(a1, 1);
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "%s - error fetching trusted contacts on cloud - %s", (uint8_t *)v29, 0x16u);
      swift_arrayDestroy(v30, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v30, -1, -1);
      swift_slowDealloc(v29, -1, -1);

      a4 = v28;
    }
    else
    {
      sub_10006AEB4(a1, 1);
      sub_10006AEB4(a1, 1);

    }
    swift_errorRetain(a1);
    a4(a1);
    sub_10006AEB4(a1, 1);
    return sub_10006AEB4(a1, 1);
  }
  else
  {
    v15 = a3 + 16;
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v16 = type metadata accessor for Logger(0);
    v17 = sub_100005288(v16, (uint64_t)qword_1002A8A08);
    v18 = Logger.logObject.getter(v17);
    v19 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v18, v19))
    {
      v40 = v15;
      v41 = a4;
      v42 = a5;
      v20 = swift_slowAlloc(32, -1);
      v39 = swift_slowAlloc(32, -1);
      v43[0] = v39;
      *(_DWORD *)v20 = 136315650;
      if (qword_10028AE70 != -1)
        swift_once(&qword_10028AE70, sub_1000E6454);
      v21 = qword_100291030;
      v22 = *(_QWORD *)algn_100291038;
      swift_bridgeObjectRetain(*(_QWORD *)algn_100291038);
      v44 = sub_1001DEF4C(v21, v22, v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, v45);
      swift_bridgeObjectRelease(v22);
      *(_WORD *)(v20 + 12) = 2048;
      v44 = a1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, v45);
      *(_WORD *)(v20 + 22) = 2048;
      v44 = BYTE1(a1);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, v45);
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "%s - account state: \n\nCustodianAssignee - %ld\n\nBeneficiaryAssignee - %ld", (uint8_t *)v20, 0x20u);
      v23 = v39;
      swift_arrayDestroy(v39, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v23, -1, -1);
      swift_slowDealloc(v20, -1, -1);

      a4 = v41;
      a5 = v42;
      v15 = v40;
    }
    else
    {

    }
    swift_beginAccess(v15, &v44, 0, 0);
    result = swift_weakLoadStrong(v15);
    if (result)
    {
      v38 = result;
      (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v14, result + OBJC_IVAR____TtC13appleaccountd28TrustedContactsAwarenessSync__accountStore, v10);
      Dependency.wrappedValue.getter(v43, v10);
      swift_release(v38);
      (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
      sub_10000732C(v43, v43[3]);
      sub_100046A3C(a1, BYTE1(a1), a4, a5);
      return sub_100006F58(v43);
    }
  }
  return result;
}

uint64_t sub_1000E6F50(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  NSObject *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  NSObject *v34;
  void (*v35)(char *, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  NSObject *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  void *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  char *v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  char *v57;
  _QWORD *v58;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  _QWORD aBlock[3];
  void *v80;
  uint64_t (*v81)();
  _QWORD *v82;

  v67 = a1;
  v68 = a2;
  v77 = *v2;
  v71 = type metadata accessor for DispatchWorkItemFlags(0);
  v74 = *(_QWORD *)(v71 - 8);
  __chkstk_darwin(v71, v3);
  v70 = (char *)&v60 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  v72 = *(_QWORD *)(v5 - 8);
  v73 = v5;
  __chkstk_darwin(v5, v6);
  v69 = (char *)&v60 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS.QoSClass(0);
  v65 = *(_QWORD *)(v8 - 8);
  v66 = v8;
  __chkstk_darwin(v8, v9);
  v64 = (char *)&v60 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = sub_1000080B4((uint64_t *)&unk_100295380);
  v62 = *(_QWORD *)(v63 - 8);
  __chkstk_darwin(v63, v11);
  v13 = (char *)&v60 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for URL(0);
  v61 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14, v15);
  v18 = (char *)&v60 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16, v19);
  v21 = (char *)&v60 - v20;
  v22 = sub_1000080B4(&qword_10028C448);
  v23 = *(_QWORD *)(v22 - 8);
  __chkstk_darwin(v22, v24);
  v26 = (char *)&v60 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = dispatch_group_create();
  v28 = swift_allocObject(&unk_100266C98, 24, 7);
  *(_QWORD *)(v28 + 16) = 0;
  v29 = swift_allocObject(&unk_100266CC0, 17, 7);
  *(_BYTE *)(v29 + 16) = 0;
  dispatch_group_enter(v27);
  (*(void (**)(char *, uint64_t, uint64_t))(v23 + 16))(v26, v76 + OBJC_IVAR____TtC13appleaccountd28TrustedContactsAwarenessSync__custodianStorage, v22);
  Dependency.wrappedValue.getter(aBlock, v22);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v26, v22);
  v30 = sub_10000732C(aBlock, (uint64_t)v80);
  v31 = (_QWORD *)swift_allocObject(&unk_100266CE8, 48, 7);
  v31[2] = v27;
  v31[3] = v29;
  v75 = v29;
  v32 = v77;
  v31[4] = v28;
  v31[5] = v32;
  v33 = sub_10000732C((_QWORD *)(*v30 + 16), *(_QWORD *)(*v30 + 40));
  type metadata accessor for LocalCache();
  v34 = v27;
  swift_retain(v29);
  swift_retain(v28);
  sub_10000840C();
  URL.appendingPathComponent(_:isDirectory:)(0xD000000000000017, 0x8000000100209FC0, 1);
  v35 = *(void (**)(char *, uint64_t))(v61 + 8);
  v35(v18, v14);
  sub_10000732C((_QWORD *)(*v33 + 16), *(_QWORD *)(*v33 + 40));
  sub_10009D070((uint64_t)v21, (uint64_t)sub_1000E8134, (uint64_t)v31);
  v35(v21, v14);
  swift_release(v31);
  sub_100006F58(aBlock);
  v36 = swift_allocObject(&unk_100266CC0, 17, 7);
  *(_BYTE *)(v36 + 16) = 0;
  dispatch_group_enter(v34);
  v37 = v62;
  v38 = v63;
  (*(void (**)(char *, uint64_t, uint64_t))(v62 + 16))(v13, v76 + OBJC_IVAR____TtC13appleaccountd28TrustedContactsAwarenessSync__inheritanceStorage, v63);
  Dependency.wrappedValue.getter(aBlock, v38);
  (*(void (**)(char *, uint64_t))(v37 + 8))(v13, v38);
  sub_10000732C(aBlock, (uint64_t)v80);
  v39 = (_QWORD *)swift_allocObject(&unk_100266D10, 48, 7);
  v39[2] = v34;
  v39[3] = v36;
  v40 = v77;
  v39[4] = v28;
  v39[5] = v40;
  v41 = v34;
  swift_retain(v28);
  swift_retain(v36);
  sub_1000CC71C((uint64_t)sub_1000E8178, (uint64_t)v39);
  swift_release(v39);
  sub_100006F58(aBlock);
  sub_100007764();
  v43 = v64;
  v42 = v65;
  v44 = v66;
  (*(void (**)(char *, _QWORD, uint64_t))(v65 + 104))(v64, enum case for DispatchQoS.QoSClass.default(_:), v66);
  v45 = (void *)static OS_dispatch_queue.global(qos:)(v43);
  (*(void (**)(char *, uint64_t))(v42 + 8))(v43, v44);
  v46 = (_QWORD *)swift_allocObject(&unk_100266D38, 56, 7);
  v47 = v67;
  v48 = v68;
  v46[2] = v28;
  v46[3] = v47;
  v49 = v75;
  v46[4] = v48;
  v46[5] = v49;
  v46[6] = v36;
  v81 = sub_1000E81C0;
  v82 = v46;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000051D0;
  v80 = &unk_100266D50;
  v50 = _Block_copy(aBlock);
  swift_retain(v49);
  swift_retain(v28);
  swift_retain(v36);
  v51 = swift_retain(v48);
  v52 = v69;
  static DispatchQoS.unspecified.getter(v51);
  v78 = _swiftEmptyArrayStorage;
  v53 = sub_1000C3D30();
  v54 = sub_1000080B4((uint64_t *)&unk_100295A00);
  v55 = sub_100008628();
  v57 = v70;
  v56 = v71;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v78, v54, v55, v71, v53);
  OS_dispatch_group.notify(qos:flags:queue:execute:)(v52, v57, v45, v50);
  _Block_release(v50);

  (*(void (**)(char *, uint64_t))(v74 + 8))(v57, v56);
  (*(void (**)(char *, uint64_t))(v72 + 8))(v52, v73);
  v58 = v82;
  swift_release(v28);
  swift_release(v75);
  swift_release(v36);
  return swift_release(v58);
}

uint64_t sub_1000E7538()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = v0 + OBJC_IVAR____TtC13appleaccountd28TrustedContactsAwarenessSync__accountStore;
  v2 = sub_1000080B4(&qword_10028FA50);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  v3 = v0 + OBJC_IVAR____TtC13appleaccountd28TrustedContactsAwarenessSync__custodianStorage;
  v4 = sub_1000080B4(&qword_10028C448);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  v5 = v0 + OBJC_IVAR____TtC13appleaccountd28TrustedContactsAwarenessSync__inheritanceStorage;
  v6 = sub_1000080B4((uint64_t *)&unk_100295380);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1000E75E4()
{
  return type metadata accessor for TrustedContactsAwarenessSync(0);
}

uint64_t type metadata accessor for TrustedContactsAwarenessSync(uint64_t a1)
{
  uint64_t result;

  result = qword_100291080;
  if (!qword_100291080)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for TrustedContactsAwarenessSync);
  return result;
}

void sub_1000E7628(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[3];

  sub_100017464(319, (unint64_t *)&qword_100293810, &qword_10028C860);
  if (v3 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_100017464(319, (unint64_t *)&qword_10028C350, &qword_10028C880);
    if (v5 <= 0x3F)
    {
      v8[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_100017464(319, (unint64_t *)&qword_1002954D0, &qword_100294B10);
      if (v7 <= 0x3F)
      {
        v8[2] = *(_QWORD *)(v6 - 8) + 64;
        swift_updateClassMetadata2(a1, 256, 3, v8, a1 + 80);
      }
    }
  }
}

uint64_t sub_1000E76F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000E7F30(a3, a4);
}

void sub_1000E7720(uint64_t a1, char a2, NSObject *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint64_t v32;
  uint8_t *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  NSObject *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45[3];

  v10 = type metadata accessor for CustodianshipInfoRecord(0);
  v11 = *(_QWORD *)(v10 - 8);
  v13 = __chkstk_darwin(v10, v12);
  v15 = (char *)&v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13, v16);
  v18 = (char *)&v40 - v17;
  if ((a2 & 1) != 0)
  {
    swift_errorRetain(a1);
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v27 = (uint64_t *)(a5 + 16);
    v28 = type metadata accessor for Logger(0);
    v29 = sub_100005288(v28, (uint64_t)qword_1002A8A08);
    v30 = Logger.logObject.getter(v29);
    v31 = static os_log_type_t.error.getter(v30);
    if (os_log_type_enabled(v30, v31))
    {
      v32 = a1;
      v33 = (uint8_t *)swift_slowAlloc(12, -1);
      v34 = swift_slowAlloc(32, -1);
      v45[0] = v34;
      *(_DWORD *)v33 = 136315138;
      if (qword_10028AE70 != -1)
        swift_once(&qword_10028AE70, sub_1000E6454);
      v35 = qword_100291030;
      v36 = *(_QWORD *)algn_100291038;
      swift_bridgeObjectRetain(*(_QWORD *)algn_100291038);
      v44 = sub_1001DEF4C(v35, v36, v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, v45);
      swift_bridgeObjectRelease(v36);
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "%s - failed to fetch custodianship List", v33, 0xCu);
      swift_arrayDestroy(v34, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v34, -1, -1);
      swift_slowDealloc(v33, -1, -1);

      a1 = v32;
    }
    else
    {

    }
    swift_beginAccess(v27, v45, 1, 0);
    v39 = *v27;
    *v27 = a1;
    swift_errorRelease(v39);
  }
  else
  {
    v42 = a3;
    v19 = (char *)(a4 + 16);
    v20 = _swiftEmptyArrayStorage;
    v45[0] = (uint64_t)_swiftEmptyArrayStorage;
    v21 = *(_QWORD *)(a1 + 16);
    swift_bridgeObjectRetain(a1);
    if (v21)
    {
      v40 = v19;
      v41 = a1;
      v22 = *(unsigned __int8 *)(v11 + 80);
      v23 = *(_QWORD *)(v11 + 72);
      v43 = (v22 + 32) & ~v22;
      v24 = a1 + v43;
      do
      {
        sub_100027FE8(v24, (uint64_t)v18, type metadata accessor for CustodianshipInfoRecord);
        if (*(_QWORD *)&v18[*(int *)(v10 + 28)] == 2)
        {
          sub_10003B730((uint64_t)v18, (uint64_t)v15, type metadata accessor for CustodianshipInfoRecord);
          if ((swift_isUniquelyReferenced_nonNull_native(v20) & 1) == 0)
            sub_1001D4C28(0, v20[2] + 1, 1);
          v20 = (_QWORD *)v45[0];
          v26 = *(_QWORD *)(v45[0] + 16);
          v25 = *(_QWORD *)(v45[0] + 24);
          if (v26 >= v25 >> 1)
          {
            sub_1001D4C28(v25 > 1, v26 + 1, 1);
            v20 = (_QWORD *)v45[0];
          }
          v20[2] = v26 + 1;
          sub_10003B730((uint64_t)v15, (uint64_t)v20 + v43 + v26 * v23, type metadata accessor for CustodianshipInfoRecord);
        }
        else
        {
          sub_100028388((uint64_t)v18, type metadata accessor for CustodianshipInfoRecord);
        }
        v24 += v23;
        --v21;
      }
      while (v21);
      v20 = (_QWORD *)v45[0];
      v19 = v40;
      a1 = v41;
    }
    sub_1000057B0(a1, 0);
    v37 = v20[2];
    swift_release(v20);
    if (v37)
      v38 = 2;
    else
      v38 = 1;
    swift_beginAccess(v19, v45, 1, 0);
    *v19 = v38;
    a3 = v42;
  }
  dispatch_group_leave(a3);
}

void sub_1000E7AC8(uint64_t a1, char a2, NSObject *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint64_t v32;
  uint8_t *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  NSObject *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45[3];

  v10 = type metadata accessor for BenefactorInfoRecord(0);
  v11 = *(_QWORD *)(v10 - 8);
  v13 = __chkstk_darwin(v10, v12);
  v15 = (char *)&v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13, v16);
  v18 = (char *)&v40 - v17;
  if ((a2 & 1) != 0)
  {
    swift_errorRetain(a1);
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v27 = (uint64_t *)(a5 + 16);
    v28 = type metadata accessor for Logger(0);
    v29 = sub_100005288(v28, (uint64_t)qword_1002A8A08);
    v30 = Logger.logObject.getter(v29);
    v31 = static os_log_type_t.error.getter(v30);
    if (os_log_type_enabled(v30, v31))
    {
      v32 = a1;
      v33 = (uint8_t *)swift_slowAlloc(12, -1);
      v34 = swift_slowAlloc(32, -1);
      v45[0] = v34;
      *(_DWORD *)v33 = 136315138;
      if (qword_10028AE70 != -1)
        swift_once(&qword_10028AE70, sub_1000E6454);
      v35 = qword_100291030;
      v36 = *(_QWORD *)algn_100291038;
      swift_bridgeObjectRetain(*(_QWORD *)algn_100291038);
      v44 = sub_1001DEF4C(v35, v36, v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, v45);
      swift_bridgeObjectRelease(v36);
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "%s - failed to fetch benefactors List", v33, 0xCu);
      swift_arrayDestroy(v34, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v34, -1, -1);
      swift_slowDealloc(v33, -1, -1);

      a1 = v32;
    }
    else
    {

    }
    swift_beginAccess(v27, v45, 1, 0);
    v39 = *v27;
    *v27 = a1;
    swift_errorRelease(v39);
  }
  else
  {
    v42 = a3;
    v19 = (char *)(a4 + 16);
    v20 = _swiftEmptyArrayStorage;
    v45[0] = (uint64_t)_swiftEmptyArrayStorage;
    v21 = *(_QWORD *)(a1 + 16);
    swift_bridgeObjectRetain(a1);
    if (v21)
    {
      v40 = v19;
      v41 = a1;
      v22 = *(unsigned __int8 *)(v11 + 80);
      v23 = *(_QWORD *)(v11 + 72);
      v43 = (v22 + 32) & ~v22;
      v24 = a1 + v43;
      do
      {
        sub_100027FE8(v24, (uint64_t)v18, type metadata accessor for BenefactorInfoRecord);
        if (*(_QWORD *)&v18[*(int *)(v10 + 24)] == 2)
        {
          sub_10003B730((uint64_t)v18, (uint64_t)v15, type metadata accessor for BenefactorInfoRecord);
          if ((swift_isUniquelyReferenced_nonNull_native(v20) & 1) == 0)
            sub_1001D4D20(0, v20[2] + 1, 1);
          v20 = (_QWORD *)v45[0];
          v26 = *(_QWORD *)(v45[0] + 16);
          v25 = *(_QWORD *)(v45[0] + 24);
          if (v26 >= v25 >> 1)
          {
            sub_1001D4D20(v25 > 1, v26 + 1, 1);
            v20 = (_QWORD *)v45[0];
          }
          v20[2] = v26 + 1;
          sub_10003B730((uint64_t)v15, (uint64_t)v20 + v43 + v26 * v23, type metadata accessor for BenefactorInfoRecord);
        }
        else
        {
          sub_100028388((uint64_t)v18, type metadata accessor for BenefactorInfoRecord);
        }
        v24 += v23;
        --v21;
      }
      while (v21);
      v20 = (_QWORD *)v45[0];
      v19 = v40;
      a1 = v41;
    }
    sub_1000057B0(a1, 0);
    v37 = v20[2];
    swift_release(v20);
    if (v37)
      v38 = 2;
    else
      v38 = 1;
    swift_beginAccess(v19, v45, 1, 0);
    *v19 = v38;
    a3 = v42;
  }
  dispatch_group_leave(a3);
}

uint64_t sub_1000E7E70(uint64_t a1, void (*a2)(uint64_t, uint64_t), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v11;
  _BYTE v12[24];
  _BYTE v13[24];
  _BYTE v14[24];

  swift_beginAccess(a1 + 16, v14, 0, 0);
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    swift_errorRetain(v9);
    a2(v9, 1);
    return swift_errorRelease(v9);
  }
  else
  {
    swift_beginAccess(a4 + 16, v13, 0, 0);
    v11 = *(unsigned __int8 *)(a4 + 16);
    swift_beginAccess(a5 + 16, v12, 0, 0);
    return ((uint64_t (*)(unint64_t, _QWORD))a2)(v11 | ((unint64_t)*(unsigned __int8 *)(a5 + 16) << 8), 0);
  }
}

uint64_t sub_1000E7F30(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD v16[5];

  v3 = v2;
  v6 = *v2;
  v7 = sub_1000080B4((uint64_t *)&unk_100295380);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  v11 = (char *)&v16[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, (uint64_t)v3 + OBJC_IVAR____TtC13appleaccountd28TrustedContactsAwarenessSync__inheritanceStorage, v7);
  Dependency.wrappedValue.getter(v16, v7);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  v12 = swift_allocObject(&unk_100266C20, 24, 7);
  swift_weakInit(v12 + 16, v3);
  v13 = (_QWORD *)swift_allocObject(&unk_100266C48, 48, 7);
  v13[2] = a1;
  v13[3] = a2;
  v13[4] = v12;
  v13[5] = v6;
  swift_retain(a2);
  swift_retain(v12);
  sub_1000D0C00((uint64_t)sub_1000E80B8, (uint64_t)v13);
  swift_release(v12);
  swift_release(v13);
  return sub_100006F58(v16);
}

uint64_t sub_1000E8068()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000E808C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000E80B8(uint64_t a1, char a2)
{
  return sub_1000B9CE8(a1, a2, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000E649C);
}

uint64_t sub_1000E80C4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000E80F0(uint64_t a1, char a2)
{
  return sub_1000B9CE8(a1, a2, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000E6A04);
}

uint64_t sub_1000E80FC()
{
  uint64_t v0;

  swift_errorRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000E8120()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1000E8134(uint64_t a1, char a2)
{
  return sub_1000B9CE8(a1, a2, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000E7720);
}

uint64_t sub_1000E8144()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000E8178(uint64_t a1, char a2)
{
  return sub_1000B9CE8(a1, a2, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000E7AC8);
}

uint64_t sub_1000E8184()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[4]);
  swift_release(v0[5]);
  swift_release(v0[6]);
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1000E81C0()
{
  uint64_t v0;

  return sub_1000E7E70(*(_QWORD *)(v0 + 16), *(void (**)(uint64_t, uint64_t))(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48));
}

void sub_1000E81D0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  __n128 v20;
  os_log_type_t v21;
  uint8_t *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  void *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v33;
  uint64_t v34;
  os_log_type_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  uint8_t *v43;
  void *v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  NSObject *v56;
  os_log_type_t v57;
  uint8_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  NSObject *v62;
  os_log_type_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;

  v2 = sub_1000080B4(&qword_1002911E0);
  __chkstk_darwin(v2, v3);
  v5 = (char *)&v70 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for WalrusWebAccessInfo(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v10 = __chkstk_darwin(v6, v9);
  v71 = (uint64_t)&v70 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v10, v11);
  v72 = (uint64_t)&v70 - v13;
  __chkstk_darwin(v12, v14);
  v16 = (char *)&v70 - v15;
  if (qword_10028ADB0 != -1)
    swift_once(&qword_10028ADB0, sub_100046CC8);
  v73 = v7;
  v74 = v6;
  v17 = type metadata accessor for Logger(0);
  v18 = sub_100005288(v17, (uint64_t)qword_1002A8990);
  v19 = Logger.logObject.getter(v18);
  v21 = static os_log_type_t.default.getter(v20);
  if (os_log_type_enabled(v19, v21))
  {
    v22 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v22 = 0;
    _os_log_impl((void *)&_mh_execute_header, v19, v21, "Walrus push received. Processing message.", v22, 2u);
    swift_slowDealloc(v22, -1, -1);
  }

  v24 = *(_QWORD *)(a1 + 32);
  if (!v24)
    goto LABEL_13;
  v25 = *(_QWORD *)(a1 + 24);
  v26 = v75 + 16;
  v23 = objc_msgSend(*(id *)(*sub_10000732C((_QWORD *)v75 + 2, *((_QWORD *)v75 + 5)) + 16), "aa_primaryAppleAccount");
  if (!v23)
    goto LABEL_13;
  v27 = v23;
  v28 = objc_msgSend(v23, "aa_altDSID");

  if (!v28)
    goto LABEL_13;
  v70 = v16;
  v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
  v31 = v30;

  if (v29 == v25 && v24 == v31)
  {
    swift_bridgeObjectRelease(v31);
    v34 = (uint64_t)v70;
  }
  else
  {
    v33 = _stringCompareWithSmolCheck(_:_:expecting:)(v29, v31, v25, v24, 0);
    v23 = (id)swift_bridgeObjectRelease(v31);
    v34 = (uint64_t)v70;
    if ((v33 & 1) == 0)
    {
LABEL_13:
      v75 = (char *)Logger.logObject.getter(v23);
      v35 = static os_log_type_t.error.getter(v75);
      if (os_log_type_enabled((os_log_t)v75, v35))
      {
        v36 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v36 = 0;
        _os_log_impl((void *)&_mh_execute_header, (os_log_t)v75, v35, "Can't process this message, missing altDSID or doesn't match with primary account.", v36, 2u);
        swift_slowDealloc(v36, -1, -1);
      }

      return;
    }
  }
  v37 = type metadata accessor for PushMessage(0);
  sub_1000E96FC(a1 + *(int *)(v37 + 56), (uint64_t)v5);
  v38 = v73;
  v39 = v74;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v73 + 48))(v5, 1, v74) != 1)
  {
    sub_1000E9784((uint64_t)v5, v34);
    sub_10000732C(v26, *((_QWORD *)v75 + 5));
    v44 = sub_100046548();
    if (v45)
    {
      v46 = (uint64_t)v44;
      v47 = v45;
      v48 = v34 + *(int *)(v39 + 60);
      v49 = *(void **)(v48 + 80);
      v50 = *(_QWORD *)(v48 + 88);
      if (v44 == v49 && v45 == v50 || (_stringCompareWithSmolCheck(_:_:expecting:)(v44, v45, v49, v50, 0) & 1) != 0)
      {
        swift_bridgeObjectRelease(v47);
        v51 = v75;
        sub_10000732C((_QWORD *)v75 + 7, *((_QWORD *)v75 + 10));
        v52 = v72;
        sub_1000E9804(v34, v72);
        v53 = *(unsigned __int8 *)(v38 + 80);
        v54 = (v53 + 24) & ~v53;
        v55 = swift_allocObject(&unk_100266DB0, v54 + v8, v53 | 7);
        *(_QWORD *)(v55 + 16) = v51;
        sub_1000E9784(v52, v55 + v54);
        swift_retain(v51);
        sub_10019F760(v34, (void (*)(uint64_t, _QWORD, uint64_t))sub_1000E99AC, v55);
        swift_release(v55);
      }
      else
      {
        v60 = v71;
        sub_1000E9804(v34, v71);
        swift_bridgeObjectRetain(v47);
        v62 = Logger.logObject.getter(v61);
        v63 = static os_log_type_t.error.getter(v62);
        if (os_log_type_enabled(v62, v63))
        {
          v64 = swift_slowAlloc(22, -1);
          v65 = swift_slowAlloc(64, -1);
          v77 = v65;
          *(_DWORD *)v64 = 136315394;
          v66 = v60 + *(int *)(v39 + 60);
          v67 = v60;
          v68 = *(_QWORD *)(v66 + 80);
          v69 = *(_QWORD *)(v66 + 88);
          swift_bridgeObjectRetain(v69);
          v76 = sub_1001DEF4C(v68, v69, &v77);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &v77);
          swift_bridgeObjectRelease(v69);
          sub_1000E97C8(v67);
          *(_WORD *)(v64 + 12) = 2080;
          swift_bridgeObjectRetain(v47);
          v76 = sub_1001DEF4C(v46, v47, &v77);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v76, &v77);
          swift_bridgeObjectRelease_n(v47, 3);
          _os_log_impl((void *)&_mh_execute_header, v62, v63, "Can't process this message, encryption material DSID %s doesn't match with primary account %s.", (uint8_t *)v64, 0x16u);
          swift_arrayDestroy(v65, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v65, -1, -1);
          swift_slowDealloc(v64, -1, -1);

          v59 = (uint64_t)v70;
          goto LABEL_30;
        }
        swift_bridgeObjectRelease_n(v47, 2);

        sub_1000E97C8(v60);
      }
    }
    else
    {
      v56 = Logger.logObject.getter(v44);
      v57 = static os_log_type_t.error.getter(v56);
      if (os_log_type_enabled(v56, v57))
      {
        v58 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v58 = 0;
        _os_log_impl((void *)&_mh_execute_header, v56, v57, "Can't process this message, no primary idMS account found.", v58, 2u);
        swift_slowDealloc(v58, -1, -1);
      }

    }
    v59 = v34;
LABEL_30:
    sub_1000E97C8(v59);
    return;
  }
  v40 = sub_1000E9744((uint64_t)v5);
  v41 = Logger.logObject.getter(v40);
  v42 = static os_log_type_t.error.getter(v41);
  if (os_log_type_enabled(v41, v42))
  {
    v43 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v43 = 0;
    _os_log_impl((void *)&_mh_execute_header, v41, v42, "Can't process this push, it does not contain required walrus web access info.", v43, 2u);
    swift_slowDealloc(v43, -1, -1);
  }

}

void sub_1000E8878(void *a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *oslog;
  void **aBlock;
  _QWORD v23[5];

  if ((a3 & 1) != 0)
  {
    swift_errorRetain(a1);
    if (qword_10028ADB0 != -1)
      swift_once(&qword_10028ADB0, sub_100046CC8);
    v13 = type metadata accessor for Logger(0);
    sub_100005288(v13, (uint64_t)qword_1002A8990);
    v14 = swift_errorRetain(a1);
    oslog = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.default.getter(v15);
    if (os_log_type_enabled(oslog, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc(12, -1);
      v18 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v17 = 138412290;
      v19 = _convertErrorToNSError(_:)(a1);
      aBlock = (void **)v19;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v23);
      *v18 = v19;
      sub_1000E9A04(a1, a2, 1);
      _os_log_impl((void *)&_mh_execute_header, oslog, v16, "Failed to fetch PCS auth request with error: %@", v17, 0xCu);
      v20 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v18, 1, v20);
      swift_slowDealloc(v18, -1, -1);
      swift_slowDealloc(v17, -1, -1);

      sub_1000E9A04(a1, a2, 1);
    }
    else
    {
      sub_1000E9A04(a1, a2, 1);
      sub_1000E9A04(a1, a2, 1);

    }
  }
  else
  {
    v7 = *(_QWORD *)(a5 + 96);
    v8 = *(_QWORD *)(a5 + 104);
    v9 = a1;
    swift_bridgeObjectRetain(a2);
    sub_1000E8AF4(v10, v7, v8);
    v23[3] = sub_1000E9218;
    v23[4] = 0;
    aBlock = _NSConcreteStackBlock;
    v23[0] = 1107296256;
    v23[1] = sub_1000E9480;
    v23[2] = &unk_100266DC8;
    v11 = _Block_copy(&aBlock);
    v12 = v9;
    objc_msgSend(v12, "performPinnedRequestWithHandler:", v11);
    _Block_release(v11);
    swift_bridgeObjectRelease(a2);

  }
}

void sub_1000E8AF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _UNKNOWN **v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t inited;
  void *v27;
  NSString v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  NSObject *v48;
  os_log_type_t v49;
  uint8_t *v50;
  uint64_t v51;
  NSObject *v52;
  uint8_t *v53;
  uint64_t v54;
  uint64_t type;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v64;
  char v65;
  unint64_t v66;
  uint64_t v67;
  _BYTE v68[64];
  uint64_t v69[6];
  char v70;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = &off_10028A000;
  if (!v4)
    goto LABEL_20;
  v60 = (_QWORD *)(v3 + 96);
  v6 = a1 + 32;
  swift_bridgeObjectRetain(a1);
  v7 = 0;
  v8 = 0;
LABEL_3:
  v65 = v8;
  v9 = v7;
  do
  {
    v10 = *(_BYTE *)(v6 + v9);
    v7 = v9 + 1;
    sub_1001CBF60(v10);
    if (v12)
    {
      v23 = v11;
      v24 = v12;
      v25 = sub_1000080B4((uint64_t *)&unk_100293A90);
      inited = swift_initStackObject(v25, v68);
      *(_OWORD *)(inited + 16) = xmmword_100218E30;
      *(_QWORD *)(inited + 32) = 0xD000000000000010;
      *(_QWORD *)(inited + 40) = 0x800000010020AED0;
      *(_QWORD *)(inited + 48) = a2;
      *(_QWORD *)(inited + 56) = a3;
      swift_bridgeObjectRetain(a3);
      v66 = sub_10001565C(inited);
      v27 = (void *)objc_opt_self(AAWalrusStringProvider);
      v58 = v6;
      v28 = String._bridgeToObjectiveC()();
      v29 = objc_msgSend(v27, "webAccessNotificationTextForKey:", v28);

      v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
      v32 = v31;

      v59 = v30;
      v69[1] = v30;
      v69[2] = v32;
      v64 = v32;
      v69[3] = v23;
      v69[4] = v24;
      v69[5] = v66;
      v70 = 2;
      if (v5[438] != (_UNKNOWN *)-1)
        swift_once(&qword_10028ADB0, sub_100046CC8);
      v33 = type metadata accessor for Logger(0);
      type = sub_100005288(v33, (uint64_t)qword_1002A8990);
      v34 = Logger.logObject.getter(type);
      v35 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v34, v35))
      {
        v36 = swift_slowAlloc(12, -1);
        v37 = swift_slowAlloc(32, -1);
        v69[0] = v37;
        *(_DWORD *)v36 = 136315138;
        sub_1001CBDA0(v10);
        v39 = v38;
        *(_QWORD *)(v36 + 4) = sub_1001DEF4C(v40, v38, v69);
        swift_bridgeObjectRelease(v39);
        _os_log_impl((void *)&_mh_execute_header, v34, v35, "Posting %s FYI notification.", (uint8_t *)v36, 0xCu);
        swift_arrayDestroy(v37, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v37, -1, -1);
        swift_slowDealloc(v36, -1, -1);
      }

      v6 = v58;
      v57 = *sub_10000732C(v60, *(_QWORD *)(v61 + 120));
      swift_bridgeObjectRetain_n(v64, 2);
      swift_bridgeObjectRetain_n(v24, 2);
      v41 = swift_bridgeObjectRetain_n(v66, 2);
      v42 = Logger.logObject.getter(v41);
      v43 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v42, v43))
      {
        v53 = (uint8_t *)swift_slowAlloc(12, -1);
        v54 = swift_slowAlloc(32, -1);
        v69[0] = v54;
        *(_DWORD *)v53 = 136315138;
        swift_bridgeObjectRetain(v64);
        swift_bridgeObjectRetain(v24);
        swift_bridgeObjectRetain(v66);
        v52 = v42;
        v51 = sub_1001D076C();
        v45 = v44;
        swift_bridgeObjectRelease(v66);
        swift_bridgeObjectRelease(v24);
        swift_bridgeObjectRelease(v64);
        v67 = sub_1001DEF4C(v51, v45, v69);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, v68);
        swift_bridgeObjectRelease_n(v66, 2);
        swift_bridgeObjectRelease_n(v24, 2);
        swift_bridgeObjectRelease_n(v64, 2);
        swift_bridgeObjectRelease(v45);
        _os_log_impl((void *)&_mh_execute_header, v52, v43, "Posting User notification : %s", v53, 0xCu);
        swift_arrayDestroy(v54, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v54, -1, -1);
        swift_slowDealloc(v53, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(v66, 2);
        swift_bridgeObjectRelease_n(v24, 2);
        swift_bridgeObjectRelease_n(v64, 2);
      }
      v5 = &off_10028A000;
      sub_10000732C((_QWORD *)(v57 + OBJC_IVAR____TtC13appleaccountd23UserNotificationManager_notificationController), *(_QWORD *)(v57 + OBJC_IVAR____TtC13appleaccountd23UserNotificationManager_notificationController + 24));
      sub_1001B4EF4(v59, v64, v23, v24, v66, (uint64_t)sub_1000E9544, 0);
      swift_bridgeObjectRelease(v66);
      swift_bridgeObjectRelease(v24);
      swift_bridgeObjectRelease(v64);
      v8 = 1;
      if (v4 - 1 == v9)
      {
        swift_bridgeObjectRelease(a1);
        return;
      }
      goto LABEL_3;
    }
    if (v5[438] != (_UNKNOWN *)-1)
      swift_once(&qword_10028ADB0, sub_100046CC8);
    v13 = type metadata accessor for Logger(0);
    v14 = sub_100005288(v13, (uint64_t)qword_1002A8990);
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.debug.getter(v15);
    if (os_log_type_enabled(v15, v16))
    {
      v17 = swift_slowAlloc(12, -1);
      v18 = swift_slowAlloc(32, -1);
      v69[0] = v18;
      *(_DWORD *)v17 = 136315138;
      sub_1001CBDA0(v10);
      v20 = v19;
      *(_QWORD *)(v17 + 4) = sub_1001DEF4C(v21, v19, v69);
      swift_bridgeObjectRelease(v20);
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "No FYI message for %s.", (uint8_t *)v17, 0xCu);
      swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v18, -1, -1);
      v22 = v17;
      v5 = &off_10028A000;
      swift_slowDealloc(v22, -1, -1);
    }

    ++v9;
  }
  while (v4 != v7);
  swift_bridgeObjectRelease(a1);
  if ((v65 & 1) == 0)
  {
LABEL_20:
    if (v5[438] != (_UNKNOWN *)-1)
      swift_once(&qword_10028ADB0, sub_100046CC8);
    v46 = type metadata accessor for Logger(0);
    v47 = sub_100005288(v46, (uint64_t)qword_1002A8990);
    v48 = Logger.logObject.getter(v47);
    v49 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v48, v49))
    {
      v50 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v50 = 0;
      _os_log_impl((void *)&_mh_execute_header, v48, v49, "Uploading PCS keys without any FYI notification.", v50, 2u);
      swift_slowDealloc(v50, -1, -1);
    }

  }
}

void sub_1000E9218(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  os_log_type_t v14;
  uint8_t *v15;
  NSObject *oslog;
  uint64_t v17;
  uint64_t v18;

  if (a3)
  {
    swift_errorRetain(a3);
    if (qword_10028ADB0 != -1)
      swift_once(&qword_10028ADB0, sub_100046CC8);
    v4 = type metadata accessor for Logger(0);
    sub_100005288(v4, (uint64_t)qword_1002A8990);
    v5 = swift_errorRetain(a3);
    oslog = Logger.logObject.getter(v5);
    v6 = static os_log_type_t.error.getter(oslog);
    if (os_log_type_enabled(oslog, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc(12, -1);
      v8 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v7 = 138412290;
      v9 = _convertErrorToNSError(_:)(a3);
      v17 = v9;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, &v18);
      *v8 = v9;
      swift_errorRelease(a3);
      _os_log_impl((void *)&_mh_execute_header, oslog, v6, "PCS keys upload failed with error: %@", v7, 0xCu);
      v10 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v8, 1, v10);
      swift_slowDealloc(v8, -1, -1);
      swift_slowDealloc(v7, -1, -1);

      swift_errorRelease(a3);
      return;
    }
    swift_errorRelease(a3);
    swift_errorRelease(a3);
  }
  else
  {
    if (qword_10028ADB0 != -1)
      swift_once(&qword_10028ADB0, sub_100046CC8);
    v11 = type metadata accessor for Logger(0);
    v12 = sub_100005288(v11, (uint64_t)qword_1002A8990);
    oslog = Logger.logObject.getter(v12);
    v14 = static os_log_type_t.default.getter(v13);
    if (os_log_type_enabled(oslog, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v14, "PCS keys upload completed successfully.", v15, 2u);
      swift_slowDealloc(v15, -1, -1);
    }
  }

}

void sub_1000E9480(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v7;
  void (*v8)(void *, void *, void *);
  id v9;
  id v10;
  id v11;

  v8 = *(void (**)(void *, void *, void *))(a1 + 32);
  v7 = *(_QWORD *)(a1 + 40);
  swift_retain(v7);
  v11 = a2;
  v9 = a3;
  v10 = a4;
  v8(a2, a3, a4);
  swift_release(v7);

}

uint64_t type metadata accessor for WalrusPushServiceDelegate()
{
  return objc_opt_self(_TtC13appleaccountd25WalrusPushServiceDelegate);
}

BOOL sub_1000E9534(unsigned __int8 a1)
{
  return a1 > 4u;
}

void sub_1000E9544(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *oslog;
  uint64_t v10;
  uint64_t v11;

  if (a1)
  {
    swift_errorRetain(a1);
    if (qword_10028ADB0 != -1)
      swift_once(&qword_10028ADB0, sub_100046CC8);
    v2 = type metadata accessor for Logger(0);
    sub_100005288(v2, (uint64_t)qword_1002A8990);
    v3 = swift_errorRetain(a1);
    oslog = Logger.logObject.getter(v3);
    v4 = static os_log_type_t.error.getter(oslog);
    if (os_log_type_enabled(oslog, v4))
    {
      v5 = (uint8_t *)swift_slowAlloc(12, -1);
      v6 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v5 = 138412290;
      v7 = _convertErrorToNSError(_:)(a1);
      v10 = v7;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v10, &v11);
      *v6 = v7;
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, oslog, v4, "Failed to post FYI notification with error %@", v5, 0xCu);
      v8 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v6, 1, v8);
      swift_slowDealloc(v6, -1, -1);
      swift_slowDealloc(v5, -1, -1);

      swift_errorRelease(a1);
    }
    else
    {
      swift_errorRelease(a1);
      swift_errorRelease(a1);

    }
  }
}

uint64_t sub_1000E96FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000080B4(&qword_1002911E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000E9744(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1000080B4(&qword_1002911E0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000E9784(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for WalrusWebAccessInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000E97C8(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for WalrusWebAccessInfo(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000E9804(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for WalrusWebAccessInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000E9848()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  int *v9;
  char *v10;
  uint64_t v11;

  v1 = type metadata accessor for WalrusWebAccessInfo(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release(*(_QWORD *)(v0 + 16));
  v7 = (_QWORD *)(v0 + v4);
  swift_bridgeObjectRelease(v7[1]);
  swift_bridgeObjectRelease(v7[3]);
  swift_bridgeObjectRelease(v7[5]);
  swift_bridgeObjectRelease(v7[7]);
  swift_bridgeObjectRelease(v7[9]);
  swift_bridgeObjectRelease(v7[11]);
  swift_bridgeObjectRelease(v7[13]);
  swift_bridgeObjectRelease(v7[15]);
  swift_bridgeObjectRelease(v7[17]);
  swift_bridgeObjectRelease(v7[18]);
  swift_bridgeObjectRelease(v7[20]);
  v8 = (_QWORD *)((char *)v7 + *(int *)(v1 + 60));
  swift_bridgeObjectRelease(v8[1]);
  swift_bridgeObjectRelease(v8[3]);
  swift_bridgeObjectRelease(v8[5]);
  swift_bridgeObjectRelease(v8[7]);
  swift_bridgeObjectRelease(v8[9]);
  swift_bridgeObjectRelease(v8[11]);
  sub_10000F494(v8[12], v8[13]);
  swift_bridgeObjectRelease(v8[15]);
  v9 = (int *)type metadata accessor for WalrusPCSEncryptionMaterial(0);
  v10 = (char *)v8 + v9[13];
  v11 = type metadata accessor for P384.KeyAgreement.PublicKey(0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  sub_10000F494(*(_QWORD *)((char *)v8 + v9[14]), *(_QWORD *)((char *)v8 + v9[14] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v8 + v9[15]));
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v8 + v9[16] + 8));
  return swift_deallocObject(v0, v5, v6);
}

void sub_1000E99AC(void *a1, uint64_t a2, char a3)
{
  uint64_t v3;
  char v6;
  uint64_t v7;

  v6 = a3 & 1;
  v7 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for WalrusWebAccessInfo(0) - 8) + 80);
  sub_1000E8878(a1, a2, v6, *(_QWORD *)(v3 + 16), v3 + ((v7 + 24) & ~v7));
}

uint64_t sub_1000E9A04(void *a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_errorRelease(a1);

  return swift_bridgeObjectRelease(a2);
}

uint64_t sub_1000E9A30(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_1000080B4((uint64_t *)&unk_10028CD50);
  __chkstk_darwin(v7, v8);
  v10 = (uint64_t *)((char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100024A20(a1, (uint64_t)v10, (uint64_t *)&unk_10028CD50);
  if (swift_getEnumCaseMultiPayload(v10, v7) == 1)
  {
    v15 = *v10;
    v11 = sub_1000080B4(&qword_10028EA88);
    return CheckedContinuation.resume(throwing:)(&v15, v11);
  }
  else
  {
    (*(void (**)(char *, uint64_t *, uint64_t))(v3 + 32))(v6, v10, v2);
    v13 = sub_1000080B4(&qword_10028EA88);
    return CheckedContinuation.resume(returning:)(v6, v13);
  }
}

uint64_t sub_1000E9B5C(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v4 = sub_1000080B4((uint64_t *)&unk_10028CD50);
  __chkstk_darwin(v4, v5);
  v7 = (uint64_t *)((char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100024A20(a1, (uint64_t)v7, (uint64_t *)&unk_10028CD50);
  if (swift_getEnumCaseMultiPayload(v7, v4) == 1)
  {
    v8 = *v7;
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v9 = type metadata accessor for Logger(0);
    sub_100005288(v9, (uint64_t)qword_1002A89D8);
    v10 = swift_errorRetain(v8);
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.error.getter(v11);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc(12, -1);
      v14 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v13 = 138412290;
      v15 = _convertErrorToNSError(_:)(v8);
      v19 = v15;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20);
      *v14 = v15;
      swift_errorRelease(v8);
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Failed to delete record from cloud store: %@", v13, 0xCu);
      v16 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v14, 1, v16);
      swift_slowDealloc(v14, -1, -1);
      swift_slowDealloc(v13, -1, -1);
    }
    else
    {
      swift_errorRelease(v8);
    }

    swift_errorRetain(v8);
    a2(v8);
    swift_errorRelease(v8);
    return swift_errorRelease(v8);
  }
  else
  {
    sub_100004934((uint64_t)v7, (uint64_t *)&unk_10028CD50);
    return ((uint64_t (*)(_QWORD))a2)(0);
  }
}

uint64_t sub_1000E9D98(uint64_t a1, void (*a2)(_QWORD), uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  __n128 v22;
  os_log_type_t v23;
  uint64_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint8_t *v30;
  uint64_t v32;
  void (*v33)(_QWORD);
  uint64_t v34;
  _QWORD v35[3];
  _BYTE v36[8];
  uint64_t v37;

  v6 = type metadata accessor for CloudShareInfo(0);
  __chkstk_darwin(v6, v7);
  v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1000080B4(&qword_1002953C0);
  v12 = __chkstk_darwin(v10, v11);
  v14 = (uint64_t *)((char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v12, v15);
  v17 = (uint64_t *)((char *)&v32 - v16);
  sub_100024A20(a1, (uint64_t)&v32 - v16, &qword_1002953C0);
  if (swift_getEnumCaseMultiPayload(v17, v10) == 1)
  {
    v18 = *v17;
    if (qword_10028ADE8 != -1)
      swift_once(&qword_10028ADE8, sub_100046DC4);
    v19 = type metadata accessor for Logger(0);
    sub_100005288(v19, (uint64_t)qword_1002A8A38);
    swift_errorRetain(v18);
    v20 = swift_errorRetain(v18);
    v21 = Logger.logObject.getter(v20);
    v23 = static os_log_type_t.default.getter(v22);
    if (os_log_type_enabled(v21, v23))
    {
      v24 = swift_slowAlloc(12, -1);
      v33 = a2;
      v25 = (uint8_t *)v24;
      v26 = swift_slowAlloc(32, -1);
      v37 = v26;
      *(_DWORD *)v25 = 136315138;
      v32 = a3;
      swift_getErrorValue(v18, v36, v35);
      v27 = Error.localizedDescription.getter(v35[1], v35[2]);
      v29 = v28;
      v34 = sub_1001DEF4C(v27, v28, &v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, v35);
      swift_bridgeObjectRelease(v29);
      swift_errorRelease(v18);
      swift_errorRelease(v18);
      _os_log_impl((void *)&_mh_execute_header, v21, v23, "Sharing failed with error - %s", v25, 0xCu);
      swift_arrayDestroy(v26, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v26, -1, -1);
      v30 = v25;
      a2 = v33;
      swift_slowDealloc(v30, -1, -1);
    }
    else
    {
      swift_errorRelease(v18);
      swift_errorRelease(v18);
    }

    *v14 = v18;
    swift_storeEnumTagMultiPayload(v14, v10, 1);
    swift_errorRetain(v18);
    a2(v14);
    swift_errorRelease(v18);
    return sub_100004934((uint64_t)v14, &qword_1002953C0);
  }
  else
  {
    sub_1000C8698((uint64_t)v17, (uint64_t)v9);
    sub_1000EA0D8((uint64_t)v9, (uint64_t)v14);
    swift_storeEnumTagMultiPayload(v14, v10, 0);
    a2(v14);
    sub_100004934((uint64_t)v14, &qword_1002953C0);
    return sub_1000EA11C((uint64_t)v9);
  }
}

uint64_t type metadata accessor for StorageController()
{
  return objc_opt_self(_TtC13appleaccountd17StorageController);
}

uint64_t sub_1000EA0D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CloudShareInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000EA11C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for CloudShareInfo(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_1000EA158(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v61[2];
  uint64_t v62;
  uint64_t v63;
  _BYTE v64[32];
  uint64_t v65[6];

  v59 = a6;
  v57 = a3;
  v12 = type metadata accessor for CloudShareInfo(0);
  v14 = __chkstk_darwin(v12, v13);
  v16 = (char *)&v53 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14, v17);
  v19 = (char *)&v53 - v18;
  v20 = qword_10028ADE8;
  swift_retain(a4);
  swift_retain(a5);
  v60 = a7;
  swift_bridgeObjectRetain(a7);
  if (v20 != -1)
    swift_once(&qword_10028ADE8, sub_100046DC4);
  v21 = type metadata accessor for Logger(0);
  sub_100005288(v21, (uint64_t)qword_1002A8A38);
  sub_1000EA0D8(a1, (uint64_t)v19);
  v58 = a1;
  v22 = sub_1000EA0D8(a1, (uint64_t)v16);
  v23 = Logger.logObject.getter(v22);
  v24 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v23, v24))
  {
    v25 = swift_slowAlloc(22, -1);
    v55 = a5;
    v26 = v25;
    v27 = swift_slowAlloc(64, -1);
    v65[0] = v27;
    *(_DWORD *)v26 = 136315394;
    v54 = a2;
    v28 = type metadata accessor for URL(0);
    v56 = a4;
    v29 = v28;
    v30 = sub_100005150((unint64_t *)&qword_10028F3B0, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
    v31 = dispatch thunk of CustomStringConvertible.description.getter(v29, v30);
    v33 = v32;
    v63 = sub_1001DEF4C(v31, v32, v65);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, v64);
    swift_bridgeObjectRelease(v33);
    sub_1000EA11C((uint64_t)v19);
    *(_WORD *)(v26 + 12) = 2080;
    v63 = *(_QWORD *)&v16[*(int *)(v12 + 24)];
    v34 = (id)v63;
    v35 = sub_1000080B4(&qword_10028D728);
    v36 = String.init<A>(describing:)(&v63, v35);
    v38 = v37;
    v63 = sub_1001DEF4C(v36, v37, v65);
    a4 = v56;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, v64);
    v39 = v38;
    a2 = v54;
    swift_bridgeObjectRelease(v39);
    sub_1000EA11C((uint64_t)v16);
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "Accepting share with url: %s and token: %s", (uint8_t *)v26, 0x16u);
    swift_arrayDestroy(v27, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v27, -1, -1);
    v40 = v26;
    a5 = v55;
    swift_slowDealloc(v40, -1, -1);
  }
  else
  {
    sub_1000EA11C((uint64_t)v19);
    sub_1000EA11C((uint64_t)v16);
  }

  sub_100006CA4(v57 + 56, (uint64_t)&v63);
  v41 = sub_1000080B4((uint64_t *)&unk_10028C8C0);
  v42 = sub_1000080B4(&qword_10028CCB0);
  v43 = swift_dynamicCast(v61, &v63, v41, v42, 6);
  v44 = v58;
  if (v43)
  {
    sub_10003A190(v61, (uint64_t)v65);
    v45 = *sub_10000732C(v65, v65[3]);
    swift_retain(a4);
    swift_retain(a5);
    v46 = v60;
    swift_bridgeObjectRetain(v60);
    sub_10014F3D4(v44, a2, v45, a4, a5, v59, v46);
    swift_release(a4);
    swift_release(a5);
    swift_bridgeObjectRelease(v46);
    sub_100006F58(v65);
    swift_bridgeObjectRelease(v46);
    swift_release(a5);
    swift_release(a4);
  }
  else
  {
    v62 = 0;
    memset(v61, 0, sizeof(v61));
    sub_100004934((uint64_t)v61, &qword_10028CCB8);
    type metadata accessor for AACustodianError(0);
    v48 = v47;
    v63 = -7000;
    v49 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
    v50 = sub_100005150((unint64_t *)&qword_10028B640, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianError, (uint64_t)&unk_100218378);
    _BridgedStoredNSError.init(_:userInfo:)(v65, &v63, v49, v48, v50);
    v51 = (void *)v65[0];
    v52 = v60;
    sub_100026478(v65[0], a4, a5, v59, v60);
    swift_bridgeObjectRelease(v52);
    swift_release(a5);
    swift_release(a4);

  }
}

uint64_t sub_1000EA5D4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v25;
  _QWORD v26[5];

  v5 = v4;
  v25 = a3;
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  v13 = (char *)&v26[-1] - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_1000080B4(&qword_10028C448);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14, v16);
  v18 = (char *)&v26[-1] - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v18, v5 + OBJC_IVAR____TtC13appleaccountd30DaemonSetupFinalizationHandler__storageController, v14);
  Dependency.wrappedValue.getter(v26, v14);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
  sub_10000732C(v26, v26[3]);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, a1 + OBJC_IVAR____TtC13appleaccountd29FinalizeCustodianSetupMessage_custodianID, v9);
  v19 = swift_allocObject(&unk_100266EB8, 24, 7);
  swift_weakInit(v19 + 16, v5);
  v20 = (_QWORD *)swift_allocObject(&unk_100266EE0, 56, 7);
  v20[2] = a2;
  v20[3] = v19;
  v21 = v25;
  v20[4] = a1;
  v20[5] = v21;
  v20[6] = a4;
  v22 = swift_allocObject(&unk_100266F08, 32, 7);
  *(_QWORD *)(v22 + 16) = sub_1000EB070;
  *(_QWORD *)(v22 + 24) = v20;
  v23 = a2;
  swift_retain(v19);
  swift_retain(a1);
  swift_retain(a4);
  swift_retain(v20);
  sub_1001BD630((uint64_t)v13, (uint64_t)sub_10003B8CC, v22);
  swift_release(v20);
  swift_release(v22);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  swift_release(v19);
  return sub_100006F58(v26);
}

void sub_1000EA7E0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD), uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  id v31;
  char *v32;
  uint64_t v33;
  NSString v34;
  Class isa;
  Class v36;
  char *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t Strong;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v12 = type metadata accessor for CustodianshipRecords(0);
  __chkstk_darwin(v12, v13);
  v15 = (char *)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_1000080B4((uint64_t *)&unk_10028CCD0);
  __chkstk_darwin(v16, v17);
  v19 = (uint64_t *)((char *)&v42 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_1000EB450(a1, (uint64_t)v19);
  if (swift_getEnumCaseMultiPayload(v19, v16) == 1)
  {
    v20 = *v19;
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v21 = type metadata accessor for Logger(0);
    sub_100005288(v21, (uint64_t)qword_1002A89D8);
    v22 = swift_errorRetain(v20);
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.error.getter(v23);
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc(12, -1);
      v26 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v25 = 138412290;
      v27 = _convertErrorToNSError(_:)(v20);
      v43 = v27;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, &v44);
      *v26 = v27;
      swift_errorRelease(v20);
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Error fetching custodianship: %@", v25, 0xCu);
      v28 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v26, 1, v28);
      swift_slowDealloc(v26, -1, -1);
      swift_slowDealloc(v25, -1, -1);

      swift_errorRelease(v20);
    }
    else
    {
      swift_errorRelease(v20);
      swift_errorRelease(v20);

    }
  }
  else
  {
    v29 = a3 + 16;
    sub_1000EB498((uint64_t)v19, (uint64_t)v15);
    v30 = objc_msgSend(objc_allocWithZone((Class)AKCustodianContext), "init");
    v31 = objc_msgSend(a2, "aa_altDSID");
    objc_msgSend(v30, "setAltDSID:", v31);

    v32 = &v15[*(int *)(v12 + 20)];
    v33 = *(_QWORD *)&v32[*(int *)(type metadata accessor for CustodianRecoveryInfoRecord(0) + 24) + 8];
    swift_bridgeObjectRetain(v33);
    v34 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v33);
    objc_msgSend(v30, "setOwnerCustodianAltDSID:", v34);

    isa = UUID._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v30, "setCustodianUUID:", isa);

    v36 = 0;
    v37 = &v15[*(int *)(type metadata accessor for CustodianRecord(0) + 40)];
    v38 = *((_QWORD *)v37 + 1);
    if (v38 >> 60 != 15)
    {
      v39 = *(_QWORD *)v37;
      sub_10000F450(*(_QWORD *)v37, *((_QWORD *)v37 + 1));
      v36 = Data._bridgeToObjectiveC()().super.isa;
      sub_1000144D8(v39, v38);
    }
    objc_msgSend(v30, "setWrappingKeyRKC:", v36);

    swift_beginAccess(v29, &v43, 0, 0);
    Strong = swift_weakLoadStrong(v29);
    if (Strong)
    {
      v41 = Strong;
      sub_1000EABC0((uint64_t)v30, a4, a5, a6);
      swift_release(v41);
    }

    sub_1000EB4DC((uint64_t)v15);
  }
}

uint64_t sub_1000EABC0(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD), uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  void **v21;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  _QWORD v26[5];

  v5 = v4;
  v10 = sub_1000080B4(&qword_10028CD18);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  v14 = (char *)&v26[-1] - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((objc_msgSend((id)objc_opt_self(AAPreferences), "shouldSkipIdMSFinalizeCustodian") & 1) != 0)
  {
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v15 = type metadata accessor for Logger(0);
    v16 = sub_100005288(v15, (uint64_t)qword_1002A89D8);
    v17 = Logger.logObject.getter(v16);
    v18 = static os_log_type_t.debug.getter(v17);
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "🚨 TCS IdMS Endpoint Testing: SkipIdMSFinalizeCustodian. Custodian setup skipped.", v19, 2u);
      swift_slowDealloc(v19, -1, -1);
    }

    return a3(0);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v14, v5 + OBJC_IVAR____TtC13appleaccountd30DaemonSetupFinalizationHandler__requestManager, v10);
    Dependency.wrappedValue.getter(v26, v10);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
    v21 = (void **)sub_10000732C(v26, v26[3]);
    v22 = swift_allocObject(&unk_100266EB8, 24, 7);
    swift_weakInit(v22 + 16, v5);
    v23 = (_QWORD *)swift_allocObject(&unk_100266F30, 48, 7);
    v23[2] = a3;
    v23[3] = a4;
    v23[4] = a2;
    v23[5] = v22;
    v24 = *v21;
    swift_retain(a4);
    swift_retain(a2);
    swift_retain(v22);
    sub_100043E98(a1, (uint64_t)sub_1000EB54C, (uint64_t)v23, v24);
    swift_release(v22);
    swift_release(v23);
    return sub_100006F58(v26);
  }
}

uint64_t sub_1000EADF8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = v0 + OBJC_IVAR____TtC13appleaccountd30DaemonSetupFinalizationHandler__requestManager;
  v2 = sub_1000080B4(&qword_10028CD18);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  v3 = v0 + OBJC_IVAR____TtC13appleaccountd30DaemonSetupFinalizationHandler__storageController;
  v4 = sub_1000080B4(&qword_10028C448);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  v5 = v0 + OBJC_IVAR____TtC13appleaccountd30DaemonSetupFinalizationHandler__notificationManager;
  v6 = sub_1000080B4(&qword_10028D068);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = v0 + OBJC_IVAR____TtC13appleaccountd30DaemonSetupFinalizationHandler__healthCheckScheduler;
  v8 = sub_1000080B4(&qword_10028E868);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1000EAED0()
{
  return type metadata accessor for DaemonSetupFinalizationHandler(0);
}

uint64_t type metadata accessor for DaemonSetupFinalizationHandler(uint64_t a1)
{
  uint64_t result;

  result = qword_100291350;
  if (!qword_100291350)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for DaemonSetupFinalizationHandler);
  return result;
}

void sub_1000EAF14(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD v10[4];

  sub_100017464(319, &qword_10028C888, &qword_10028C890);
  if (v3 <= 0x3F)
  {
    v10[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_100017464(319, (unint64_t *)&qword_10028C350, &qword_10028C880);
    if (v5 <= 0x3F)
    {
      v10[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_100017464(319, (unint64_t *)&qword_10028CFD8, &qword_100294AE0);
      if (v7 <= 0x3F)
      {
        v10[2] = *(_QWORD *)(v6 - 8) + 64;
        sub_100017464(319, &qword_10028E258, &qword_10028E260);
        if (v9 <= 0x3F)
        {
          v10[3] = *(_QWORD *)(v8 - 8) + 64;
          swift_updateClassMetadata2(a1, 256, 4, v10, a1 + 80);
        }
      }
    }
  }
}

uint64_t sub_1000EB010()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000EB034()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 56, 7);
}

void sub_1000EB070(uint64_t a1)
{
  uint64_t v1;

  sub_1000EA7E0(a1, *(void **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(uint64_t (**)(_QWORD))(v1 + 40), *(_QWORD *)(v1 + 48));
}

uint64_t sub_1000EB080(uint64_t a1, void (*a2)(uint64_t), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t Strong;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE v36[24];

  v9 = sub_1000080B4(&qword_10028E868);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  v13 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    swift_errorRetain(a1);
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v14 = type metadata accessor for Logger(0);
    sub_100005288(v14, (uint64_t)qword_1002A89D8);
    v15 = swift_errorRetain(a1);
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.error.getter(v16);
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc(12, -1);
      v19 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v18 = 138412290;
      v20 = _convertErrorToNSError(_:)(a1);
      v32 = v20;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, &v33);
      *v19 = v20;
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Error finalizing custodianship: %@", v18, 0xCu);
      v21 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v19, 1, v21);
      swift_slowDealloc(v19, -1, -1);
      swift_slowDealloc(v18, -1, -1);
    }
    else
    {
      swift_errorRelease(a1);
    }

    swift_errorRetain(a1);
    a2(a1);
    swift_errorRelease(a1);
    return swift_errorRelease(a1);
  }
  else
  {
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v22 = type metadata accessor for Logger(0);
    v23 = sub_100005288(v22, (uint64_t)qword_1002A89D8);
    v24 = Logger.logObject.getter(v23);
    v25 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v24, v25))
    {
      v26 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Custodian setup complete!", v26, 2u);
      swift_slowDealloc(v26, -1, -1);
    }

    objc_msgSend((id)objc_opt_self(AATrustedContactNotificationPublisher), "postRecoveryContactChangedNotification");
    if ((objc_msgSend((id)objc_opt_self(AAPreferences), "simulate2FAFA") & 1) == 0
      && (*(_BYTE *)(a4 + OBJC_IVAR____TtC13appleaccountd29FinalizeCustodianSetupMessage_skipHealthCheckOnSuccess) & 1) == 0)
    {
      swift_beginAccess(a5 + 16, v36, 0, 0);
      Strong = swift_weakLoadStrong(a5 + 16);
      if (Strong)
      {
        v28 = Strong;
        (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, Strong + OBJC_IVAR____TtC13appleaccountd30DaemonSetupFinalizationHandler__healthCheckScheduler, v9);
        Dependency.wrappedValue.getter(&v32, v9);
        swift_release(v28);
        (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
        v29 = v34;
        v30 = v35;
        sub_10000732C(&v32, v34);
        (*(void (**)(Swift::Void (__swiftcall *)(), _QWORD, uint64_t, uint64_t))(v30 + 16))(OSTransaction.complete(), 0, v29, v30);
        sub_100006F58(&v32);
      }
    }
    return ((uint64_t (*)(_QWORD))a2)(0);
  }
}

uint64_t sub_1000EB42C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000EB450(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000080B4((uint64_t *)&unk_10028CCD0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000EB498(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CustodianshipRecords(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000EB4DC(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for CustodianshipRecords(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000EB518()
{
  _QWORD *v0;

  swift_release(v0[3]);
  swift_release(v0[4]);
  swift_release(v0[5]);
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000EB54C(uint64_t a1)
{
  uint64_t v1;

  return sub_1000EB080(a1, *(void (**)(uint64_t))(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t sub_1000EB558()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;

  swift_bridgeObjectRelease(v0[2]);
  v1 = (char *)v0 + OBJC_IVAR____TtC13appleaccountd24IdentityActivityProvider__accountStore;
  v2 = sub_1000080B4(&qword_10028FA50);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  v3 = (char *)v0 + OBJC_IVAR____TtC13appleaccountd24IdentityActivityProvider__storageController;
  v4 = sub_1000080B4(&qword_10028CCC0);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  v5 = (char *)v0 + OBJC_IVAR____TtC13appleaccountd24IdentityActivityProvider__syncManager;
  v6 = sub_1000080B4(&qword_10028E860);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

uint64_t sub_1000EB60C()
{
  return type metadata accessor for IdentityActivityProvider(0);
}

uint64_t type metadata accessor for IdentityActivityProvider(uint64_t a1)
{
  uint64_t result;

  result = qword_1002914F8;
  if (!qword_1002914F8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for IdentityActivityProvider);
  return result;
}

void sub_1000EB650(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[4];

  v8[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  sub_100017464(319, (unint64_t *)&qword_100293810, &qword_10028C860);
  if (v3 <= 0x3F)
  {
    v8[1] = *(_QWORD *)(v2 - 8) + 64;
    sub_100017464(319, &qword_10028C898, &qword_10028C8A0);
    if (v5 <= 0x3F)
    {
      v8[2] = *(_QWORD *)(v4 - 8) + 64;
      sub_100017464(319, (unint64_t *)&qword_100294A60, &qword_10028E2A0);
      if (v7 <= 0x3F)
      {
        v8[3] = *(_QWORD *)(v6 - 8) + 64;
        swift_updateClassMetadata2(a1, 256, 4, v8, a1 + 80);
      }
    }
  }
}

uint64_t type metadata accessor for CustodianOwnerRecoverabilityHealthCheckAnalyticsEvent(uint64_t a1)
{
  uint64_t result;

  result = qword_100291660;
  if (!qword_100291660)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CustodianOwnerRecoverabilityHealthCheckAnalyticsEvent);
  return result;
}

void sub_1000EB76C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD v5[2];

  v2 = qword_1002A8B18;
  v5[0] = &unk_10021CA48;
  sub_1000AAD84(319);
  if (v4 <= 0x3F)
  {
    v5[1] = *(_QWORD *)(v3 - 8) + 64;
    swift_initClassMetadata2(a1, 0, 2, v5, a1 + v2);
  }
}

_QWORD *sub_1000EB7EC(uint64_t a1)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  unint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v2 = *(_QWORD *)(a1 + 16);
  result = _swiftEmptyArrayStorage;
  if (v2)
  {
    specialized ContiguousArray.reserveCapacity(_:)(v2);
    result = (_QWORD *)sub_1000EC1B0(a1);
    v4 = (uint64_t)result;
    v6 = v5;
    v7 = 0;
    v8 = a1 + 64;
    v19 = v2;
    while ((v4 & 0x8000000000000000) == 0 && v4 < 1 << *(_BYTE *)(a1 + 32))
    {
      v10 = (unint64_t)v4 >> 6;
      if ((*(_QWORD *)(v8 + 8 * ((unint64_t)v4 >> 6)) & (1 << v4)) == 0)
        goto LABEL_22;
      if (*(_DWORD *)(a1 + 36) != v6)
        goto LABEL_23;
      v20 = v7;
      v11 = *(id *)(*(_QWORD *)(a1 + 56) + 8 * v4);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v11);
      v12 = _swiftEmptyArrayStorage[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v12);
      v13 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v12, v11);
      result = (_QWORD *)specialized ContiguousArray._endMutation()(v13);
      v9 = 1 << *(_BYTE *)(a1 + 32);
      if (v4 >= v9)
        goto LABEL_24;
      v14 = *(_QWORD *)(v8 + 8 * v10);
      if ((v14 & (1 << v4)) == 0)
        goto LABEL_25;
      if (*(_DWORD *)(a1 + 36) != v6)
        goto LABEL_26;
      v15 = v14 & (-2 << (v4 & 0x3F));
      if (v15)
      {
        v9 = __clz(__rbit64(v15)) | v4 & 0xFFFFFFFFFFFFFFC0;
      }
      else
      {
        v16 = v10 + 1;
        v17 = (unint64_t)(v9 + 63) >> 6;
        if (v10 + 1 < v17)
        {
          v18 = *(_QWORD *)(v8 + 8 * v16);
          if (v18)
          {
LABEL_18:
            v9 = __clz(__rbit64(v18)) + (v16 << 6);
          }
          else
          {
            while (v17 - 2 != v10)
            {
              v18 = *(_QWORD *)(a1 + 80 + 8 * v10++);
              if (v18)
              {
                v16 = v10 + 1;
                goto LABEL_18;
              }
            }
          }
        }
      }
      v7 = v20 + 1;
      v4 = v9;
      if (v20 + 1 == v19)
        return _swiftEmptyArrayStorage;
    }
    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
  }
  return result;
}

uint64_t sub_1000EB9C8(uint64_t a1, uint64_t a2, void *a3)
{
  char *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  id v14;
  id v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t result;
  uint64_t v20;
  void (*v21)(char *, char *, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSString v27;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v29;
  Class isa;
  char v31;
  uint64_t v32;
  Class v33;
  char v34;
  id v35;
  id v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  id v49;
  id v50;
  uint64_t *v51;
  uint64_t v52;
  void (*v53)(char *, uint64_t);
  char *v54;
  void (*v55)(char *, char *, uint64_t);
  id v56;
  uint64_t v57;
  uint64_t v58;
  id v59;
  uint64_t v60;
  uint64_t v61[6];
  __int128 v62;
  __int128 v63;

  v4 = v3;
  v59 = a3;
  v60 = a1;
  v57 = a2;
  v5 = sub_1000080B4((uint64_t *)&unk_10028CC80);
  v58 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5, v6);
  v8 = (char *)&v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1000080B4(&qword_10028F658);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  v13 = (char *)&v52 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (objc_msgSend((id)objc_opt_self(AADeviceInfo), "isInternalBuild"))
  {
    v14 = objc_msgSend((id)objc_opt_self(NSProcessInfo), "processInfo");
    v15 = objc_msgSend(v14, "environment");

    v16 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v15, &type metadata for String, &type metadata for String, &protocol witness table for String);
    if (*(_QWORD *)(v16 + 16))
    {
      sub_10010A9E0(0xD00000000000001BLL, 0x800000010020AFA0);
      v18 = v17;
      result = swift_bridgeObjectRelease(v16);
      if ((v18 & 1) != 0)
        return result;
    }
    else
    {
      swift_bridgeObjectRelease(v16);
    }
  }
  v20 = swift_allocObject(&unk_100266F80, 24, 7);
  v21 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
  v54 = &v4[qword_100291658];
  v55 = v21;
  v56 = v4;
  ((void (*)(char *))v21)(v13);
  Dependency.wrappedValue.getter(&v62, v9);
  v53 = *(void (**)(char *, uint64_t))(v10 + 8);
  v53(v13, v9);
  v22 = *sub_10000732C(&v62, *((uint64_t *)&v63 + 1));
  v23 = sub_1000080B4(&qword_10028F8B8);
  OS_dispatch_queue.sync<A>(execute:)(v61, sub_1000AAE2C, v22, v23);
  v52 = 0;
  v24 = v61[0];
  sub_1001CE0B4(v61[0]);
  v26 = v25;
  swift_bridgeObjectRelease(v24);
  *(_QWORD *)(v20 + 16) = v26;
  sub_100006F58(&v62);
  v27 = String._bridgeToObjectiveC()();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v26);
  *(_QWORD *)&v62 = v26;
  *(_QWORD *)(v20 + 16) = 0x8000000000000000;
  sub_10001FC90((uint64_t)v27, 0x6E6F6973726576, 0xE700000000000000, isUniquelyReferenced_nonNull_native);
  v29 = v62;
  *(_QWORD *)(v20 + 16) = v62;
  swift_bridgeObjectRelease(0x8000000000000000);
  isa = Int._bridgeToObjectiveC()().super.super.isa;
  v31 = swift_isUniquelyReferenced_nonNull_native(v29);
  *(_QWORD *)&v62 = v29;
  *(_QWORD *)(v20 + 16) = 0x8000000000000000;
  sub_10001FC90((uint64_t)isa, 0xD000000000000019, 0x800000010020C810, v31);
  v32 = v62;
  *(_QWORD *)(v20 + 16) = v62;
  swift_bridgeObjectRelease(0x8000000000000000);
  v33 = Int._bridgeToObjectiveC()().super.super.isa;
  v34 = swift_isUniquelyReferenced_nonNull_native(v32);
  *(_QWORD *)&v62 = v32;
  *(_QWORD *)(v20 + 16) = 0x8000000000000000;
  sub_10001FC90((uint64_t)v33, 0x6C6544746E756F63, 0xEA00000000006174, v34);
  *(_QWORD *)(v20 + 16) = v62;
  swift_bridgeObjectRelease(0x8000000000000000);
  v35 = v59;
  if (v59)
  {
    v36 = v59;
    v37 = objc_msgSend(v36, "userInfo");
    v38 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v37, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);

    v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(AAPartialErrorsByNameKey);
    v41 = v40;
    if (*(_QWORD *)(v38 + 16) && (v42 = sub_10010A9E0(v39, v40), (v43 & 1) != 0))
    {
      sub_1000244B0(*(_QWORD *)(v38 + 56) + 32 * v42, (uint64_t)&v62);
    }
    else
    {
      v62 = 0u;
      v63 = 0u;
    }
    swift_bridgeObjectRelease(v41);
    swift_bridgeObjectRelease(v38);
    if (*((_QWORD *)&v63 + 1))
    {
      v44 = sub_1000080B4((uint64_t *)&unk_1002916B0);
      if ((swift_dynamicCast(v61, &v62, (char *)&type metadata for Any + 8, v44, 6) & 1) != 0)
      {
        v45 = v61[0];
        v35 = v59;
        if (*(_QWORD *)(v61[0] + 16))
        {
          v46 = sub_1000EB7EC(v61[0]);
          swift_bridgeObjectRelease(v45);
          sub_1000EC238((uint64_t)v46, (_QWORD *)(v20 + 16));

          swift_bridgeObjectRelease(v46);
        }
        else
        {

          swift_bridgeObjectRelease(v45);
        }
        goto LABEL_18;
      }

    }
    else
    {

      sub_10008C388((uint64_t)&v62);
    }
    v35 = v59;
  }
LABEL_18:
  v55(v13, v54, v9);
  Dependency.wrappedValue.getter(&v62, v9);
  v53(v13, v9);
  v47 = sub_10000732C(&v62, *((uint64_t *)&v63 + 1));
  v48 = v58;
  (*(void (**)(char *, uint64_t, uint64_t))(v58 + 16))(v8, *v47 + OBJC_IVAR____TtC13appleaccountd27DaemonAnalyticsAccountModel__cdpController, v5);
  v49 = v35;
  swift_retain(v20);
  v50 = v56;
  Dependency.wrappedValue.getter(v61, v5);
  (*(void (**)(char *, uint64_t))(v48 + 8))(v8, v5);
  v51 = sub_10000732C(v61, v61[3]);
  sub_100049244(*v51, v20, v60, v50, v35);
  swift_release(v20);

  sub_100006F58(v61);
  sub_100006F58(&v62);
  return swift_release(v20);
}

void sub_1000EBF48(char a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t *v9;
  Class isa;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE v16[24];

  v9 = (uint64_t *)(a2 + 16);
  isa = Bool._bridgeToObjectiveC()().super.super.isa;
  swift_beginAccess(v9, v16, 33, 0);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(a2 + 16));
  v15 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0x8000000000000000;
  sub_10001FC90((uint64_t)isa, 0x766F636552736168, 0xEE0079654B797265, isUniquelyReferenced_nonNull_native);
  v12 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = v15;
  swift_bridgeObjectRelease(v12);
  swift_endAccess(v16);
  if (a5)
  {
    v13 = a5;
    a5 = (void *)sub_1001FE9A0();

  }
  swift_beginAccess(v9, v16, 0, 0);
  v14 = *v9;
  swift_bridgeObjectRetain(v14);
  dispatch thunk of AAFTimedAnalyticsEvent.completeEvent(withSuccess:error:additionalData:)((a3 > 0) | (a1 & 1), a5, v14);
  swift_bridgeObjectRelease(v14);

}

void sub_1000EC078()
{
  _swift_stdlib_reportUnimplementedInitializer("appleaccountd.CustodianOwnerRecoverabilityHealthCheckAnalyticsEvent", 67, "init(eventName:initialData:)", 28, 0);
  __break(1u);
}

uint64_t sub_1000EC0A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + qword_100291650 + 8));
  v1 = v0 + qword_100291658;
  v2 = sub_1000080B4(&qword_10028F658);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
}

id sub_1000EC0F8()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CustodianOwnerRecoverabilityHealthCheckAnalyticsEvent(0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_1000EC12C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + qword_100291650 + 8));
  v2 = a1 + qword_100291658;
  v3 = sub_1000080B4(&qword_10028F658);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
}

uint64_t sub_1000EC184()
{
  return type metadata accessor for CustodianOwnerRecoverabilityHealthCheckAnalyticsEvent(0);
}

uint64_t sub_1000EC18C()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000EC1B0(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2)
    v7 = 2;
  v8 = v7 - 2;
  v9 = (unint64_t *)(a1 + 80);
  v2 = 64;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

void sub_1000EC238(uint64_t a1, _QWORD *a2)
{
  unint64_t v4;
  unint64_t v5;
  id v6;
  void *v7;
  Class isa;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  id v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  void *v18;
  Class v19;
  char v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  id v26;
  void *v27;
  void *v28;
  Class v29;
  char v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v4 = (unint64_t)a1 >> 62;
  if (!((unint64_t)a1 >> 62))
  {
    if (!*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
      return;
LABEL_3:
    v5 = a1 & 0xC000000000000001;
    if ((a1 & 0xC000000000000001) != 0)
    {
      v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, a1);
    }
    else
    {
      if (!*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
        goto LABEL_35;
      }
      v6 = *(id *)(a1 + 32);
    }
    v7 = v6;
    v39 = (id)sub_1001FE9A0();

    objc_msgSend(v39, "code");
    isa = Int._bridgeToObjectiveC()().super.super.isa;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a2);
    v40 = *a2;
    *a2 = 0x8000000000000000;
    sub_10001FC90((uint64_t)isa, 0xD000000000000014, 0x800000010020B7F0, isUniquelyReferenced_nonNull_native);
    v10 = *a2;
    *a2 = v40;
    swift_bridgeObjectRelease(v10);
    v11 = objc_msgSend(v39, "domain");
    if (!v11)
    {
LABEL_37:
      __break(1u);
      goto LABEL_38;
    }
    v12 = (uint64_t)v11;
    v13 = swift_isUniquelyReferenced_nonNull_native(*a2);
    v41 = *a2;
    *a2 = 0x8000000000000000;
    sub_10001FC90(v12, 0xD000000000000016, 0x800000010020B810, v13);
    v14 = *a2;
    *a2 = v41;
    swift_bridgeObjectRelease(v14);
    if (v4)
    {
      if (a1 < 0)
        v16 = a1;
      else
        v16 = a1 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(a1);
      v15 = _CocoaArrayWrapper.endIndex.getter(v16);
      swift_bridgeObjectRelease(a1);
      if (v15 < 2)
        goto LABEL_9;
    }
    else
    {
      v15 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v15 < 2)
      {
LABEL_9:

        return;
      }
    }
    if (v5)
    {
      v17 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(1, a1);
LABEL_18:
      v18 = v17;
      v38 = (id)sub_1001FE9A0();

      objc_msgSend(v38, "code");
      v19 = Int._bridgeToObjectiveC()().super.super.isa;
      v20 = swift_isUniquelyReferenced_nonNull_native(*a2);
      v42 = *a2;
      *a2 = 0x8000000000000000;
      sub_10001FC90((uint64_t)v19, 0xD000000000000014, 0x800000010020B830, v20);
      v21 = *a2;
      *a2 = v42;
      swift_bridgeObjectRelease(v21);
      v22 = objc_msgSend(v38, "domain");
      if (!v22)
      {
LABEL_38:
        __break(1u);
        goto LABEL_39;
      }
      v23 = (uint64_t)v22;
      v24 = swift_isUniquelyReferenced_nonNull_native(*a2);
      v43 = *a2;
      *a2 = 0x8000000000000000;
      sub_10001FC90(v23, 0xD000000000000016, 0x800000010020B850, v24);
      v25 = *a2;
      *a2 = v43;
      swift_bridgeObjectRelease(v25);
      if ((unint64_t)v15 < 3)
      {

        return;
      }
      if (v5)
      {
        v26 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(2, a1);
        goto LABEL_25;
      }
      if (*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10) >= 3uLL)
      {
        v26 = *(id *)(a1 + 48);
LABEL_25:
        v27 = v26;
        v28 = (void *)sub_1001FE9A0();

        objc_msgSend(v28, "code");
        v29 = Int._bridgeToObjectiveC()().super.super.isa;
        v30 = swift_isUniquelyReferenced_nonNull_native(*a2);
        v44 = *a2;
        *a2 = 0x8000000000000000;
        sub_10001FC90((uint64_t)v29, 0xD000000000000014, 0x800000010020B870, v30);
        v31 = *a2;
        *a2 = v44;
        swift_bridgeObjectRelease(v31);
        v32 = objc_msgSend(v28, "domain");
        if (v32)
        {
          v33 = (uint64_t)v32;
          v34 = swift_isUniquelyReferenced_nonNull_native(*a2);
          v45 = *a2;
          *a2 = 0x8000000000000000;
          sub_10001FC90(v33, 0xD000000000000016, 0x800000010020B890, v34);
          v35 = *a2;
          *a2 = v45;

          swift_bridgeObjectRelease(v35);
          return;
        }
LABEL_39:
        __break(1u);
        return;
      }
      goto LABEL_36;
    }
    if (*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10) >= 2uLL)
    {
      v17 = *(id *)(a1 + 40);
      goto LABEL_18;
    }
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  if (a1 < 0)
    v36 = a1;
  else
    v36 = a1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(a1);
  v37 = _CocoaArrayWrapper.endIndex.getter(v36);
  swift_bridgeObjectRelease(a1);
  if (v37)
    goto LABEL_3;
}

uint64_t sub_1000EC688(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  uint64_t v13;

  v3 = type metadata accessor for UUID(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC13appleaccountd24CustodianRecoverySession_terminateTask) = 0;
  v8 = (_QWORD *)(v1 + OBJC_IVAR____TtC13appleaccountd24CustodianRecoverySession_validationCompletion);
  *v8 = 0;
  v8[1] = 0;
  v9 = v1 + OBJC_IVAR____TtC13appleaccountd24CustodianRecoverySession_verifier;
  *(_OWORD *)v9 = 0u;
  *(_OWORD *)(v9 + 16) = 0u;
  *(_QWORD *)(v9 + 32) = 0;
  v10 = OBJC_IVAR____TtC13appleaccountd24CustodianRecoverySession_lock;
  v11 = (_DWORD *)swift_slowAlloc(4, -1);
  *v11 = 0;
  *(_QWORD *)(v1 + v10) = v11;
  *(_QWORD *)(v1 + OBJC_IVAR____TtC13appleaccountd24CustodianRecoverySession_transaction) = 0;
  UUID.init()(v11);
  (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))(v1 + OBJC_IVAR____TtC13appleaccountd24CustodianRecoverySession_sessionID, v7, v3);
  sub_1000ECB78(a1, v1 + OBJC_IVAR____TtC13appleaccountd24CustodianRecoverySession_recoveryData);
  return v1;
}

uint64_t sub_1000EC788(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  Swift::String v4;
  void *object;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = OBJC_IVAR____TtC13appleaccountd24CustodianRecoverySession_transaction;
  if (*(_QWORD *)(result + OBJC_IVAR____TtC13appleaccountd24CustodianRecoverySession_transaction))
  {
    __break(1u);
  }
  else
  {
    v2 = result;
    _StringGuts.grow(_:)(34);
    v3 = swift_bridgeObjectRelease(0xE000000000000000);
    v4._countAndFlagsBits = UUID.uuidString.getter(v3);
    object = v4._object;
    String.append(_:)(v4);
    swift_bridgeObjectRelease(object);
    v6 = String.utf8CString.getter(0xD000000000000020, 0x800000010020C8C0);
    swift_bridgeObjectRelease(0x800000010020C8C0);
    v7 = os_transaction_create(v6 + 32);
    swift_release(v6);
    v8 = *(_QWORD *)(v2 + v1);
    *(_QWORD *)(v2 + v1) = v7;
    return swift_unknownObjectRelease(v8);
  }
  return result;
}

uint64_t sub_1000EC858()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC13appleaccountd24CustodianRecoverySession_sessionID;
  v2 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  sub_10000E120(v0 + OBJC_IVAR____TtC13appleaccountd24CustodianRecoverySession_recoveryData);
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtC13appleaccountd24CustodianRecoverySession_terminateTask));
  sub_10000D98C(*(_QWORD *)(v0 + OBJC_IVAR____TtC13appleaccountd24CustodianRecoverySession_validationCompletion), *(_QWORD *)(v0 + OBJC_IVAR____TtC13appleaccountd24CustodianRecoverySession_validationCompletion + 8));
  sub_1000ECB38(v0 + OBJC_IVAR____TtC13appleaccountd24CustodianRecoverySession_verifier);
  swift_unknownObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC13appleaccountd24CustodianRecoverySession_transaction));
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1000EC8FC()
{
  return type metadata accessor for CustodianRecoverySession(0);
}

uint64_t type metadata accessor for CustodianRecoverySession(uint64_t a1)
{
  uint64_t result;

  result = qword_1002916F8;
  if (!qword_1002916F8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CustodianRecoverySession);
  return result;
}

uint64_t sub_1000EC940(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[7];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for CustodianRecoveryData(319);
    if (v4 <= 0x3F)
    {
      v5[1] = *(_QWORD *)(result - 8) + 64;
      v5[2] = "\b";
      v5[3] = &unk_10021CAB8;
      v5[4] = &unk_10021CAD0;
      v5[5] = (char *)&value witness table for Builtin.RawPointer + 64;
      v5[6] = "\b";
      result = swift_updateClassMetadata2(a1, 256, 7, v5, a1 + 80);
      if (!result)
        return 0;
    }
  }
  return result;
}

unint64_t sub_1000EC9F8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100291848;
  if (!qword_100291848)
  {
    v1 = type metadata accessor for CustodianRecoverySession(255);
    result = swift_getWitnessTable(&unk_10021CB30, v1);
    atomic_store(result, (unint64_t *)&qword_100291848);
  }
  return result;
}

uint64_t (*sub_1000ECA40(uint64_t a1))(_QWORD)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC13appleaccountd24CustodianRecoverySession_recoveryData, a1, 33, 0);
  return j__swift_endAccess;
}

Swift::Int sub_1000ECA84()
{
  uint64_t *v0;
  uint64_t v1;
  Swift::UInt v2;
  _QWORD v4[9];

  v1 = *v0;
  Hasher.init(_seed:)(v4);
  v2 = ObjectIdentifier.hashValue.getter(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void sub_1000ECACC()
{
  _QWORD *v0;
  Swift::UInt v1;

  v1 = ObjectIdentifier.hashValue.getter(*v0);
  Hasher._combine(_:)(v1);
}

Swift::Int sub_1000ECAF8()
{
  _QWORD *v0;
  Swift::UInt v1;
  _QWORD v3[9];

  Hasher.init(_seed:)(v3);
  v1 = ObjectIdentifier.hashValue.getter(*v0);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t sub_1000ECB38(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1000080B4((uint64_t *)&unk_100291850);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000ECB78(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for CustodianRecoveryData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_1000ECBBC(void *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  id v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int (*v31)(char *, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  void (*v37)(char *, char *, uint64_t);
  id v38;
  NSString v39;
  id v40;
  uint64_t v41;
  NSObject *v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  NSObject *v46;
  os_log_type_t v47;
  uint8_t *v48;
  NSObject **v49;
  NSObject *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  NSString v58;
  id v59;
  NSObject *v60;
  NSObject *v61;
  NSString v62;
  NSObject *v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(uint64_t, char *, uint64_t);
  uint64_t v67;
  uint64_t v68;
  int *v69;
  NSObject **v70;
  id v71;
  id v72;
  uint64_t v73;
  uint64_t v74;
  void (*v75)(char *, uint64_t);
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  NSObject *v79;
  NSObject *v80;
  os_log_type_t v81;
  uint8_t *v82;
  NSObject **v83;
  NSObject *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  NSObject *v92;
  NSObject *v93;
  os_log_type_t v94;
  uint8_t *v95;
  NSObject **v96;
  NSObject *v97;
  uint64_t v98;
  id v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  void (*v106)(char *, uint64_t);
  uint64_t v107;
  id v108;
  uint64_t v109;
  int v110;
  char *v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  NSObject *v115;
  NSObject *v116;
  uint64_t v117;

  v110 = a2;
  v109 = a3;
  v4 = sub_1000080B4((uint64_t *)&unk_1002904F0);
  v6 = __chkstk_darwin(v4, v5);
  v8 = (char *)&v107 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6, v9);
  v11 = (char *)&v107 - v10;
  v12 = type metadata accessor for UUID(0);
  v13 = *(_QWORD *)(v12 - 8);
  v15 = __chkstk_darwin(v12, v14);
  v111 = (char *)&v107 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v15, v17);
  v112 = (char *)&v107 - v19;
  v20 = CKRecord.recordType.getter(v18);
  v22 = v21;
  if (v20 == 0xD000000000000017 && v21 == 0x800000010021CBF0)
  {
    swift_bridgeObjectRelease(0x800000010021CBF0);
  }
  else
  {
    v23 = _stringCompareWithSmolCheck(_:_:expecting:)(v20, v21, 0xD000000000000017, 0x800000010021CBF0, 0);
    swift_bridgeObjectRelease(v22);
    if ((v23 & 1) == 0)
    {
LABEL_7:
      type metadata accessor for AACustodianError(0);
      v33 = v32;
      v117 = -7005;
      v34 = sub_100005014((uint64_t)&_swiftEmptyArrayStorage);
      v35 = sub_100005150((unint64_t *)&qword_10028B640, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianError, (uint64_t)&unk_100218378);
      v36 = _BridgedStoredNSError.init(_:userInfo:)(&v115, &v117, v34, v33, v35);
      swift_willThrow(v36);

      return;
    }
  }
  v24 = objc_msgSend(a1, "recordID");
  v25 = objc_msgSend(v24, "recordName");

  v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
  v113 = v13;
  v114 = v12;
  v28 = v27;

  UUID.init(uuidString:)(v26, v28);
  v30 = v113;
  v29 = v114;
  swift_bridgeObjectRelease(v28);
  v31 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48);
  if (v31(v11, 1, v29) == 1)
  {
    sub_100013AAC((uint64_t)v11);
    goto LABEL_7;
  }
  v37 = *(void (**)(char *, char *, uint64_t))(v30 + 32);
  v37(v112, v11, v29);
  v38 = objc_msgSend(a1, "encryptedValuesByKey");
  v39 = String._bridgeToObjectiveC()();
  v40 = objc_msgSend(v38, "objectForKeyedSubscript:", v39);

  if (!v40)
    goto LABEL_12;
  v117 = (uint64_t)v40;
  v41 = sub_1000080B4(&qword_10028DB30);
  if ((swift_dynamicCast(&v115, &v117, v41, &type metadata for String, 6) & 1) == 0)
    goto LABEL_12;
  v42 = v116;
  UUID.init(uuidString:)(v115, v116);
  swift_bridgeObjectRelease(v42);
  v43 = v114;
  if (v31(v8, 1, v114) == 1)
  {
    sub_100013AAC((uint64_t)v8);
LABEL_12:
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v44 = type metadata accessor for Logger(0);
    sub_100005288(v44, (uint64_t)qword_1002A89D8);
    v45 = a1;
    v46 = Logger.logObject.getter(v45);
    v47 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v46, v47))
    {
      v48 = (uint8_t *)swift_slowAlloc(12, -1);
      v49 = (NSObject **)swift_slowAlloc(8, -1);
      v108 = v38;
      *(_DWORD *)v48 = 138412290;
      v115 = v45;
      v50 = v45;
      v38 = v108;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v115, &v116);
      *v49 = v45;

      _os_log_impl((void *)&_mh_execute_header, v46, v47, "Missing CustodianID - %@", v48, 0xCu);
      v51 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v49, 1, v51);
      swift_slowDealloc(v49, -1, -1);
      swift_slowDealloc(v48, -1, -1);
    }
    else
    {

      v46 = v45;
    }
    v52 = v114;

    type metadata accessor for AACustodianError(0);
    v54 = v53;
    v117 = -7005;
    v55 = sub_100005014((uint64_t)&_swiftEmptyArrayStorage);
    v56 = sub_100005150((unint64_t *)&qword_10028B640, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianError, (uint64_t)&unk_100218378);
    v57 = _BridgedStoredNSError.init(_:userInfo:)(&v115, &v117, v55, v54, v56);
    swift_willThrow(v57);
    swift_unknownObjectRelease(v38);

    (*(void (**)(char *, uint64_t))(v113 + 8))(v112, v52);
    return;
  }
  v37(v111, v8, v43);
  v58 = String._bridgeToObjectiveC()();
  v59 = objc_msgSend(v38, "objectForKeyedSubscript:", v58);

  if (v59 && (v117 = (uint64_t)v59, (swift_dynamicCast(&v115, &v117, v41, &type metadata for String, 6) & 1) != 0))
  {
    v60 = v115;
    v61 = v116;
    v62 = String._bridgeToObjectiveC()();
    v108 = v38;
    v63 = objc_msgSend(v38, "objectForKeyedSubscript:", v62);

    if (v63)
    {
      v115 = v63;
      type metadata accessor for Status(0);
      if ((swift_dynamicCast(&v117, &v115, v41, v64, 6) & 1) != 0)
      {
        v65 = v117;
        v66 = *(void (**)(uint64_t, char *, uint64_t))(v113 + 16);
        v67 = v109;
        v68 = v114;
        v66(v109, v112, v114);
        v69 = (int *)type metadata accessor for CustodianshipInfoRecord(0);
        v66(v67 + v69[5], v111, v68);
        v70 = (NSObject **)(v67 + v69[6]);
        *v70 = v60;
        v70[1] = v61;
        *(_QWORD *)(v67 + v69[7]) = v65;
        v71 = objc_msgSend(objc_allocWithZone((Class)NSKeyedArchiver), "initRequiringSecureCoding:", 1);
        objc_msgSend(a1, "encodeSystemFieldsWithCoder:", v71);
        objc_msgSend(v71, "finishEncoding");
        v72 = objc_msgSend(v71, "encodedData");
        v73 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v72);
        v107 = v74;
        swift_unknownObjectRelease(v108);

        v75 = *(void (**)(char *, uint64_t))(v113 + 8);
        v75(v111, v68);
        v75(v112, v68);
        v76 = (uint64_t *)(v67 + v69[8]);
        v77 = v107;
        *v76 = v73;
        v76[1] = v77;
        *(_BYTE *)(v67 + v69[9]) = v110 & 1;
        return;
      }
    }
    swift_bridgeObjectRelease(v61);
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v91 = type metadata accessor for Logger(0);
    sub_100005288(v91, (uint64_t)qword_1002A89D8);
    v92 = a1;
    v93 = Logger.logObject.getter(v92);
    v94 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v93, v94))
    {
      v95 = (uint8_t *)swift_slowAlloc(12, -1);
      v96 = (NSObject **)swift_slowAlloc(8, -1);
      *(_DWORD *)v95 = 138412290;
      v115 = v92;
      v97 = v92;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v115, &v116);
      *v96 = v92;

      _os_log_impl((void *)&_mh_execute_header, v93, v94, "Missing Status - %@", v95, 0xCu);
      v98 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v96, 1, v98);
      swift_slowDealloc(v96, -1, -1);
      swift_slowDealloc(v95, -1, -1);
    }
    else
    {

      v93 = v92;
    }
    v99 = v108;

    type metadata accessor for AACustodianError(0);
    v101 = v100;
    v117 = -7005;
    v102 = sub_100005014((uint64_t)&_swiftEmptyArrayStorage);
    v103 = sub_100005150((unint64_t *)&qword_10028B640, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianError, (uint64_t)&unk_100218378);
    v104 = _BridgedStoredNSError.init(_:userInfo:)(&v115, &v117, v102, v101, v103);
    swift_willThrow(v104);
    swift_unknownObjectRelease(v99);

  }
  else
  {
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v78 = type metadata accessor for Logger(0);
    sub_100005288(v78, (uint64_t)qword_1002A89D8);
    v79 = a1;
    v80 = Logger.logObject.getter(v79);
    v81 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v80, v81))
    {
      v82 = (uint8_t *)swift_slowAlloc(12, -1);
      v83 = (NSObject **)swift_slowAlloc(8, -1);
      v108 = v38;
      *(_DWORD *)v82 = 138412290;
      v115 = v79;
      v84 = v79;
      v38 = v108;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v115, &v116);
      *v83 = v79;

      _os_log_impl((void *)&_mh_execute_header, v80, v81, "Missing Owner Handle - %@", v82, 0xCu);
      v85 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v83, 1, v85);
      swift_slowDealloc(v83, -1, -1);
      swift_slowDealloc(v82, -1, -1);
    }
    else
    {

      v80 = v79;
    }

    type metadata accessor for AACustodianError(0);
    v87 = v86;
    v117 = -7005;
    v88 = sub_100005014((uint64_t)&_swiftEmptyArrayStorage);
    v89 = sub_100005150((unint64_t *)&qword_10028B640, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianError, (uint64_t)&unk_100218378);
    v90 = _BridgedStoredNSError.init(_:userInfo:)(&v115, &v117, v88, v87, v89);
    swift_willThrow(v90);
    swift_unknownObjectRelease(v38);

  }
  v105 = v114;
  v106 = *(void (**)(char *, uint64_t))(v113 + 8);
  v106(v111, v114);
  v106(v112, v105);
}

uint64_t sub_1000ED6BC(id *a1)
{
  uint64_t v1;
  uint64_t v2;
  id v3;
  uint64_t ObjectType;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  char v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;

  v2 = v1;
  v3 = objc_msgSend(*a1, "encryptedValuesByKey");
  ObjectType = swift_getObjectType(v3);
  CKRecordKeyValueSetting.subscript.getter(&v24, 0x6169646F74737563, 0xEB0000000044496ELL);
  v6 = v24;
  v5 = v25;
  v7 = type metadata accessor for CustodianshipInfoRecord(0);
  v8 = UUID.uuidString.getter(v7);
  v10 = v9;
  if (v5)
  {
    if (v6 == v8 && v5 == v9)
    {
      swift_bridgeObjectRelease(v5);
      swift_bridgeObjectRelease(v10);
      goto LABEL_11;
    }
    v12 = _stringCompareWithSmolCheck(_:_:expecting:)(v6, v5, v8, v9, 0);
    swift_bridgeObjectRelease(v5);
    v13 = swift_bridgeObjectRelease(v10);
    if ((v12 & 1) != 0)
      goto LABEL_11;
  }
  else
  {
    v13 = swift_bridgeObjectRelease(v9);
  }
  v14 = UUID.uuidString.getter(v13);
  v26 = &type metadata for String;
  v27 = &protocol witness table for String;
  v24 = v14;
  v25 = v15;
  CKRecordKeyValueSetting.subscript.setter(&v24, 0x6169646F74737563, 0xEB0000000044496ELL, ObjectType);
LABEL_11:
  CKRecordKeyValueSetting.subscript.getter(&v24, 0x6E614872656E776FLL, 0xEB00000000656C64);
  v16 = v25;
  v17 = (uint64_t *)(v1 + *(int *)(v7 + 24));
  v19 = *v17;
  v18 = v17[1];
  if (!v25)
    goto LABEL_17;
  if (v24 == v19 && v25 == v18)
  {
    swift_bridgeObjectRelease(v25);
    goto LABEL_19;
  }
  v21 = _stringCompareWithSmolCheck(_:_:expecting:)(v24, v25, *v17, v17[1], 0);
  swift_bridgeObjectRelease(v16);
  if ((v21 & 1) == 0)
  {
LABEL_17:
    v26 = &type metadata for String;
    v27 = &protocol witness table for String;
    v24 = v19;
    v25 = v18;
    swift_bridgeObjectRetain(v18);
    CKRecordKeyValueSetting.subscript.setter(&v24, 0x6E614872656E776FLL, 0xEB00000000656C64, ObjectType);
  }
LABEL_19:
  CKRecordKeyValueSetting.subscript.getter(&v24, 0x737574617473, 0xE600000000000000);
  v22 = *(_QWORD *)(v2 + *(int *)(v7 + 28));
  if ((v25 & 1) != 0 || v24 != v22)
  {
    v26 = &type metadata for Int;
    v27 = &protocol witness table for Int;
    v24 = v22;
    CKRecordKeyValueSetting.subscript.setter(&v24, 0x737574617473, 0xE600000000000000, ObjectType);
  }
  return swift_unknownObjectRelease(v3);
}

uint64_t sub_1000ED968(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000ED99C + 4 * byte_10021CB70[a1]))(0x444964726F636572, 0xE800000000000000);
}

uint64_t sub_1000ED99C()
{
  return 0x6169646F74737563;
}

uint64_t sub_1000ED9BC()
{
  return 0x6E614872656E776FLL;
}

uint64_t sub_1000ED9DC()
{
  return 0x737574617473;
}

unint64_t sub_1000ED9F0()
{
  return 0xD000000000000010;
}

unint64_t sub_1000EDA0C()
{
  return 0xD000000000000013;
}

uint64_t sub_1000EDA2C()
{
  unsigned __int8 *v0;

  return sub_1000ED968(*v0);
}

uint64_t sub_1000EDA34@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1000EE9DC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000EDA58(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000EE208();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000EDA80(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000EE208();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000EDAA8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  char *v43;
  uint64_t v44;
  __int128 v45;
  char v46;

  v38 = a2;
  v3 = type metadata accessor for UUID(0);
  v39 = *(_QWORD *)(v3 - 8);
  v40 = v3;
  v5 = __chkstk_darwin(v3, v4);
  v7 = (uint64_t *)((char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v5, v8);
  v42 = (uint64_t *)((char *)&v35 - v9);
  v41 = sub_1000080B4(&qword_100291878);
  v10 = *(_QWORD *)(v41 - 8);
  __chkstk_darwin(v41, v11);
  v13 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = (int *)type metadata accessor for CustodianshipInfoRecord(0);
  __chkstk_darwin(v14, v15);
  v17 = (char *)&v35 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = a1[3];
  v18 = a1[4];
  sub_10000732C(a1, v19);
  v20 = sub_1000EE208();
  v43 = v13;
  v21 = v44;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for CustodianshipInfoRecord.CodingKeys, &type metadata for CustodianshipInfoRecord.CodingKeys, v20, v19, v18);
  if (v21)
    return sub_100006F58(a1);
  v36 = v7;
  v37 = a1;
  v44 = v10;
  v22 = v39;
  LOBYTE(v45) = 0;
  v23 = sub_100005150((unint64_t *)&unk_10028BBB0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v24 = v41;
  v25 = v40;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v42, v40, &v45, v41, v40, v23);
  v26 = v42;
  v42 = *(_QWORD **)(v22 + 32);
  ((void (*)(char *, _QWORD *, uint64_t))v42)(v17, v26, v25);
  LOBYTE(v45) = 1;
  v27 = v36;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v36, v25, &v45, v24, v25, v23);
  ((void (*)(char *, _QWORD *, uint64_t))v42)(&v17[v14[5]], v27, v25);
  LOBYTE(v45) = 2;
  v28 = KeyedDecodingContainer.decode(_:forKey:)(&v45, v24);
  v29 = v44;
  v30 = (uint64_t *)&v17[v14[6]];
  *v30 = v28;
  v30[1] = v31;
  LOBYTE(v45) = 3;
  *(_QWORD *)&v17[v14[7]] = KeyedDecodingContainer.decode(_:forKey:)(&v45, v24);
  v46 = 4;
  v32 = sub_10000F40C();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v45, &type metadata for Data, &v46, v24, &type metadata for Data, v32);
  *(_OWORD *)&v17[v14[8]] = v45;
  LOBYTE(v45) = 5;
  v33 = KeyedDecodingContainer.decode(_:forKey:)(&v45, v24);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v43, v24);
  v17[v14[9]] = v33 & 1;
  sub_1000433A0((uint64_t)v17, v38);
  sub_100006F58(v37);
  return sub_10006BD98((uint64_t)v17);
}

uint64_t sub_1000EDED8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  __int128 v24;
  char v25;

  v3 = v1;
  v5 = sub_1000080B4(&qword_100291888);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a1[3];
  v11 = a1[4];
  sub_10000732C(a1, v10);
  v12 = sub_1000EE208();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for CustodianshipInfoRecord.CodingKeys, &type metadata for CustodianshipInfoRecord.CodingKeys, v12, v10, v11);
  LOBYTE(v24) = 0;
  v13 = type metadata accessor for UUID(0);
  v14 = sub_100005150((unint64_t *)&unk_10028DC20, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v3, &v24, v5, v13, v14);
  if (!v2)
  {
    v15 = (int *)type metadata accessor for CustodianshipInfoRecord(0);
    v16 = v3 + v15[5];
    LOBYTE(v24) = 1;
    KeyedEncodingContainer.encode<A>(_:forKey:)(v16, &v24, v5, v13, v14);
    v17 = (uint64_t *)(v3 + v15[6]);
    v18 = *v17;
    v19 = v17[1];
    LOBYTE(v24) = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v18, v19, &v24, v5);
    v20 = *(_QWORD *)(v3 + v15[7]);
    LOBYTE(v24) = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v20, &v24, v5);
    v24 = *(_OWORD *)(v3 + v15[8]);
    v25 = 4;
    v21 = sub_10000F4D8();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v24, &v25, v5, &type metadata for Data, v21);
    v22 = *(unsigned __int8 *)(v3 + v15[9]);
    LOBYTE(v24) = 5;
    KeyedEncodingContainer.encode(_:forKey:)(v22, &v24, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

uint64_t sub_1000EE10C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000EDAA8(a1, a2);
}

uint64_t sub_1000EE120(_QWORD *a1)
{
  return sub_1000EDED8(a1);
}

uint64_t sub_1000EE134(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_100005150((unint64_t *)&unk_100291860, type metadata accessor for CustodianshipInfoRecord, (uint64_t)&unk_10021CBA8);
  result = sub_100005150(&qword_10028D5F0, type metadata accessor for CustodianshipInfoRecord, (uint64_t)&unk_10021CB80);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t type metadata accessor for CustodianshipInfoRecord(uint64_t a1)
{
  uint64_t result;

  result = qword_1002918E8;
  if (!qword_1002918E8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CustodianshipInfoRecord);
  return result;
}

uint64_t sub_1000EE1CC(uint64_t a1)
{
  uint64_t result;

  result = sub_100005150(&qword_100291870, type metadata accessor for CustodianshipInfoRecord, (uint64_t)&unk_10021CBD0);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000EE208()
{
  unint64_t result;

  result = qword_100291880;
  if (!qword_100291880)
  {
    result = swift_getWitnessTable(&unk_10021CD50, &type metadata for CustodianshipInfoRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100291880);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for CustodianshipInfoRecord.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_1000EE298 + 4 * byte_10021CB7B[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1000EE2CC + 4 * byte_10021CB76[v4]))();
}

uint64_t sub_1000EE2CC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000EE2D4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000EE2DCLL);
  return result;
}

uint64_t sub_1000EE2E8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000EE2F0);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_1000EE2F4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000EE2FC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CustodianshipInfoRecord.CodingKeys()
{
  return &type metadata for CustodianshipInfoRecord.CodingKeys;
}

_QWORD *sub_1000EE318(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(_QWORD *, _QWORD *, uint64_t);
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v19 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v19);
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    v8 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v8((_QWORD *)((char *)a1 + a3[5]), (_QWORD *)((char *)a2 + a3[5]), v7);
    v9 = a3[6];
    v10 = a3[7];
    v11 = (_QWORD *)((char *)a1 + v9);
    v12 = (_QWORD *)((char *)a2 + v9);
    v13 = v12[1];
    *v11 = *v12;
    v11[1] = v13;
    *(_QWORD *)((char *)a1 + v10) = *(_QWORD *)((char *)a2 + v10);
    v14 = a3[8];
    v15 = (_QWORD *)((char *)a1 + v14);
    v16 = (_QWORD *)((char *)a2 + v14);
    v17 = *v16;
    v18 = v16[1];
    swift_bridgeObjectRetain(v13);
    sub_10000F450(v17, v18);
    *v15 = v17;
    v15[1] = v18;
    *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  }
  return a1;
}

uint64_t sub_1000EE400(uint64_t a1, int *a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);

  v4 = type metadata accessor for UUID(0);
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(a1, v4);
  v5(a1 + a2[5], v4);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[6] + 8));
  return sub_10000F494(*(_QWORD *)(a1 + a2[8]), *(_QWORD *)(a1 + a2[8] + 8));
}

uint64_t sub_1000EE474(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;

  v6 = type metadata accessor for UUID(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v8 = a3[6];
  v9 = a3[7];
  v10 = (_QWORD *)(a1 + v8);
  v11 = (_QWORD *)(a2 + v8);
  v12 = v11[1];
  *v10 = *v11;
  v10[1] = v12;
  *(_QWORD *)(a1 + v9) = *(_QWORD *)(a2 + v9);
  v13 = a3[8];
  v14 = (uint64_t *)(a1 + v13);
  v15 = (uint64_t *)(a2 + v13);
  v16 = *v15;
  v17 = v15[1];
  swift_bridgeObjectRetain(v12);
  sub_10000F450(v16, v17);
  *v14 = v16;
  v14[1] = v17;
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_1000EE530(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;

  v6 = type metadata accessor for UUID(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v8 = a3[6];
  v9 = (_QWORD *)(a1 + v8);
  v10 = (_QWORD *)(a2 + v8);
  *v9 = *v10;
  v11 = v10[1];
  v12 = v9[1];
  v9[1] = v11;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRelease(v12);
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  v13 = a3[8];
  v14 = (uint64_t *)(a1 + v13);
  v15 = (uint64_t *)(a2 + v13);
  v16 = *v15;
  v17 = v15[1];
  sub_10000F450(*v15, v17);
  v18 = *v14;
  v19 = v14[1];
  *v14 = v16;
  v14[1] = v17;
  sub_10000F494(v18, v19);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_1000EE60C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;

  v6 = type metadata accessor for UUID(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v8 = a3[7];
  *(_OWORD *)(a1 + a3[6]) = *(_OWORD *)(a2 + a3[6]);
  *(_QWORD *)(a1 + v8) = *(_QWORD *)(a2 + v8);
  v9 = a3[9];
  *(_OWORD *)(a1 + a3[8]) = *(_OWORD *)(a2 + a3[8]);
  *(_BYTE *)(a1 + v9) = *(_BYTE *)(a2 + v9);
  return a1;
}

uint64_t sub_1000EE6A4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;

  v6 = type metadata accessor for UUID(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v8 = a3[6];
  v9 = (_QWORD *)(a1 + v8);
  v10 = (uint64_t *)(a2 + v8);
  v12 = *v10;
  v11 = v10[1];
  v13 = v9[1];
  *v9 = v12;
  v9[1] = v11;
  swift_bridgeObjectRelease(v13);
  v14 = a3[8];
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  v15 = *(_QWORD *)(a1 + v14);
  v16 = *(_QWORD *)(a1 + v14 + 8);
  *(_OWORD *)(a1 + v14) = *(_OWORD *)(a2 + v14);
  sub_10000F494(v15, v16);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_1000EE75C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000EE768);
}

uint64_t sub_1000EE768(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 24) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_1000EE7E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000EE7F4);
}

uint64_t sub_1000EE7F4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 24) + 8) = (a2 - 1);
  return result;
}

uint64_t sub_1000EE870(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[6];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = v4[0];
    v4[2] = &unk_10021CC50;
    v4[3] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[4] = &unk_10021CC68;
    v4[5] = &unk_10021CC80;
    swift_initStructMetadata(a1, 256, 6, v4, a1 + 16);
    return 0;
  }
  return result;
}

unint64_t sub_1000EE908()
{
  unint64_t result;

  result = qword_100291930;
  if (!qword_100291930)
  {
    result = swift_getWitnessTable(&unk_10021CD28, &type metadata for CustodianshipInfoRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100291930);
  }
  return result;
}

unint64_t sub_1000EE950()
{
  unint64_t result;

  result = qword_100291938;
  if (!qword_100291938)
  {
    result = swift_getWitnessTable(&unk_10021CC98, &type metadata for CustodianshipInfoRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100291938);
  }
  return result;
}

unint64_t sub_1000EE998()
{
  unint64_t result;

  result = qword_100291940;
  if (!qword_100291940)
  {
    result = swift_getWitnessTable(&unk_10021CCC0, &type metadata for CustodianshipInfoRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100291940);
  }
  return result;
}

uint64_t sub_1000EE9DC(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char v11;

  if (a1 == 0x444964726F636572 && a2 == 0xE800000000000000)
  {
    v5 = 0xE800000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x444964726F636572, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x6169646F74737563 && a2 == 0xEB0000000044496ELL)
  {
    v7 = 0xEB0000000044496ELL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6169646F74737563, 0xEB0000000044496ELL, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x6E614872656E776FLL && a2 == 0xEB00000000656C64)
  {
    v8 = 0xEB00000000656C64;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E614872656E776FLL, 0xEB00000000656C64, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0x737574617473 && a2 == 0xE600000000000000)
  {
    v9 = 0xE600000000000000;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x737574617473, 0xE600000000000000, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
    goto LABEL_26;
  }
  if (a1 == 0xD000000000000010)
  {
    v10 = 0x8000000100209650;
    if (a2 == 0x8000000100209650)
      goto LABEL_31;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x8000000100209650, a1, a2, 0) & 1) != 0)
  {
    v10 = a2;
LABEL_31:
    swift_bridgeObjectRelease(v10);
    return 4;
  }
  if (a1 == 0xD000000000000013 && a2 == 0x8000000100209670)
  {
    swift_bridgeObjectRelease(0x8000000100209670);
    return 5;
  }
  else
  {
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, 0x8000000100209670, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v11 & 1) != 0)
      return 5;
    else
      return 6;
  }
}

uint64_t sub_1000EEC78()
{
  uint64_t v0;
  uint64_t result;

  v0 = type metadata accessor for URLConfigurationManager();
  swift_allocObject(v0, 64, 7);
  result = sub_1000EECB0();
  qword_1002A8B50 = result;
  return result;
}

uint64_t sub_1000EECB0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  _QWORD *v21;

  v1 = v0;
  v2 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v2, v3);
  v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v6, v7);
  v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  v14 = (char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100007764();
  *(_OWORD *)(v1 + 16) = 0u;
  *(_OWORD *)(v1 + 32) = 0u;
  *(_QWORD *)(v1 + 48) = 0;
  v15 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v11 + 104))(v14, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v10);
  static DispatchQoS.unspecified.getter(v15);
  v21 = _swiftEmptyArrayStorage;
  v16 = sub_100005150((unint64_t *)&qword_10028C6D0, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v17 = sub_1000080B4(&qword_10028B9F0);
  v18 = sub_1000077A0((unint64_t *)&qword_10028C6E0, &qword_10028B9F0);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v21, v17, v18, v2, v16);
  *(_QWORD *)(v1 + 56) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000030, 0x800000010020C9D0, v9, v5, v14, 0);
  return v1;
}

uint64_t sub_1000EEE7C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  id v6;
  NSString v7;
  id v8;
  id v9;
  NSString v10;
  id v11;
  NSString v12;
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;

  v2 = sub_1000080B4((uint64_t *)&unk_10028DC30);
  __chkstk_darwin(v2, v3);
  v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = objc_allocWithZone((Class)NSURLComponents);
  v7 = String._bridgeToObjectiveC()();
  v8 = objc_msgSend(v6, "initWithString:", v7);

  if (v8)
  {
    v9 = v8;
    v10 = String._bridgeToObjectiveC()();
    objc_msgSend(v9, "setPath:", v10);

    v11 = v9;
    v12 = String._bridgeToObjectiveC()();
    objc_msgSend(v11, "setQuery:", v12);

    v13 = objc_msgSend(v11, "URL");
    if (v13)
    {
      v14 = v13;
      static URL._unconditionallyBridgeFromObjectiveC(_:)(v13);

      v15 = type metadata accessor for URL(0);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v5, 0, 1, v15);
    }
    else
    {

      v18 = type metadata accessor for URL(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v5, 1, 1, v18);
    }
    return sub_1000F0910((uint64_t)v5, a1);
  }
  else
  {
    v16 = type metadata accessor for URL(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(a1, 1, 1, v16);
  }
}

uint64_t sub_1000EF078(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  _QWORD *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  _QWORD *v23;
  _QWORD aBlock[5];
  _QWORD *v25;

  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = *(_QWORD *)(v2 + 56);
  v15 = (_QWORD *)swift_allocObject(&unk_100267230, 40, 7);
  v15[2] = v2;
  v15[3] = a1;
  v15[4] = a2;
  aBlock[4] = sub_1000F0430;
  v25 = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000051D0;
  aBlock[3] = &unk_100267248;
  v16 = _Block_copy(aBlock);
  swift_retain(v2);
  v17 = swift_retain(a2);
  static DispatchQoS.unspecified.getter(v17);
  v23 = _swiftEmptyArrayStorage;
  v18 = sub_100005150((unint64_t *)&qword_10028CD20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v19 = sub_1000080B4((uint64_t *)&unk_100295A00);
  v20 = sub_1000077A0((unint64_t *)&qword_10028CD30, (uint64_t *)&unk_100295A00);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v23, v19, v20, v5, v18);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v14, v9, v16);
  _Block_release(v16);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  return swift_release(v25);
}

void sub_1000EF270(uint64_t a1, void (*a2)(void *, _QWORD, _QWORD), uint64_t a3)
{
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  id v13;

  v6 = sub_1000EF3DC();
  if (v6)
  {
    v7 = v6;
    if (qword_10028ADB0 != -1)
      swift_once(&qword_10028ADB0, sub_100046CC8);
    v8 = type metadata accessor for Logger(0);
    v9 = sub_100005288(v8, (uint64_t)qword_1002A8990);
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "cachedURLConfiguration is present", v12, 2u);
      swift_slowDealloc(v12, -1, -1);
    }

    v13 = v7;
    a2(v7, 0, 0);

  }
  else
  {
    dispatch_suspend(*(dispatch_object_t *)(a1 + 56));
    swift_retain(a1);
    swift_retain(a3);
    sub_1000F043C(a1, a1, (uint64_t (*)(_QWORD, _QWORD, _QWORD))a2, a3);
    swift_release(a1);
    swift_release(a3);
  }
}

id sub_1000EF3DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  double v14;
  void (*v15)(char *, uint64_t);
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  uint8_t *v19;
  uint8_t *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  void *v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  void (*v31)(char *, uint64_t);
  id v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  void (*v39)(char *, uint64_t);
  id v40;
  uint64_t v41;
  _QWORD v43[2];
  int v44;
  _BYTE v45[24];
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  _BYTE v49[24];
  id v50;
  uint64_t v51[4];

  v1 = v0;
  v2 = type metadata accessor for Date(0);
  v3 = *(_QWORD *)(v2 - 8);
  v5 = __chkstk_darwin(v2, v4);
  v7 = (char *)v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5, v8);
  v10 = (char *)v43 - v9;
  v11 = (_QWORD *)(v1 + 16);
  swift_beginAccess(v1 + 16, v49, 0, 0);
  sub_100024A20(v1 + 16, (uint64_t)&v46, &qword_100291A08);
  if (*((_QWORD *)&v47 + 1))
  {
    v12 = sub_10003A190(&v46, (uint64_t)&v50);
    static Date.now.getter(v12);
    v13 = sub_10000732C(&v50, v51[2]);
    (*(void (**)(char *, _QWORD *, uint64_t))(v3 + 16))(v7, v13, v2);
    v14 = Date.timeIntervalSince(_:)(v7);
    v15 = *(void (**)(char *, uint64_t))(v3 + 8);
    v15(v7, v2);
    v15(v10, v2);
    if (v14 > 600.0)
    {
      v48 = 0;
      v46 = 0u;
      v47 = 0u;
      swift_beginAccess(v1 + 16, v45, 33, 0);
      sub_1000F0958((uint64_t)&v46, v1 + 16);
      swift_endAccess(v45);
    }
    sub_100006F58(&v50);
  }
  else
  {
    sub_100004934((uint64_t)&v46, &qword_100291A08);
  }
  if (qword_10028ADB0 != -1)
    swift_once(&qword_10028ADB0, sub_100046CC8);
  v16 = type metadata accessor for Logger(0);
  sub_100005288(v16, (uint64_t)qword_1002A8990);
  v17 = swift_retain_n(v1, 2);
  v18 = Logger.logObject.getter(v17);
  LODWORD(v19) = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v18, (os_log_type_t)v19))
  {
    v20 = (uint8_t *)swift_slowAlloc(12, -1);
    v21 = (_QWORD *)swift_slowAlloc(8, -1);
    *(_DWORD *)v20 = 138412290;
    v22 = *(_QWORD *)(v1 + 40);
    if (v22)
    {
      v23 = sub_10000732C((_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 40));
      v43[1] = v43;
      v24 = *(_QWORD *)(v22 - 8);
      __chkstk_darwin(v23, v23);
      v26 = (char *)v43 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *))(v24 + 16))(v26);
      v27 = *(void **)&v26[*(int *)(type metadata accessor for URLConfigurationCache(0) + 20)];
      v44 = (int)v19;
      v19 = v20;
      v28 = v1;
      v29 = v21;
      v30 = v11;
      v31 = *(void (**)(char *, uint64_t))(v24 + 8);
      v32 = v27;
      v31(v26, v22);
      v11 = v30;
      v21 = v29;
      v1 = v28;
      v20 = v19;
      LOBYTE(v19) = v44;
      v50 = v32;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, v51);
    }
    else
    {
      v50 = 0;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, v51);
      v32 = 0;
    }
    *v21 = v32;
    swift_release_n(v1, 2);
    _os_log_impl((void *)&_mh_execute_header, v18, (os_log_type_t)v19, "[URLConfigurationManager cachedURLConfiguration]: %@", v20, 0xCu);
    v41 = sub_1000080B4((uint64_t *)&unk_10028BC20);
    swift_arrayDestroy(v21, 1, v41);
    swift_slowDealloc(v21, -1, -1);
    swift_slowDealloc(v20, -1, -1);

    v33 = *(_QWORD *)(v1 + 40);
    if (!v33)
      return 0;
  }
  else
  {

    swift_release_n(v1, 2);
    v33 = *(_QWORD *)(v1 + 40);
    if (!v33)
      return 0;
  }
  v34 = sub_10000732C(v11, v33);
  v35 = *(_QWORD *)(v33 - 8);
  __chkstk_darwin(v34, v34);
  v37 = (char *)v43 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v35 + 16))(v37);
  v38 = type metadata accessor for URLConfigurationCache(0);
  v39 = *(void (**)(char *, uint64_t))(v35 + 8);
  v40 = *(id *)&v37[*(int *)(v38 + 20)];
  v39(v37, v33);
  return v40;
}

uint64_t sub_1000EF850(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD, _QWORD, _QWORD))
{
  uint64_t v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t (*v17)(_QWORD, _QWORD, _QWORD);
  uint8_t *v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v29)(_QWORD, _QWORD, _QWORD);
  uint64_t v30;
  uint64_t v31;

  if (a1 && a2)
  {
    v10 = qword_10028ADB0;
    v11 = a1;
    v12 = a2;
    if (v10 != -1)
      swift_once(&qword_10028ADB0, sub_100046CC8);
    v13 = type metadata accessor for Logger(0);
    v14 = sub_100005288(v13, (uint64_t)qword_1002A8990);
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = a5;
      v18 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Successfully fetched URL configuration", v18, 2u);
      v19 = v18;
      a5 = v17;
      swift_slowDealloc(v19, -1, -1);
    }

    if (qword_10028AE78 != -1)
      swift_once(&qword_10028AE78, sub_1000EEC78);
    sub_1000EFB9C(v11, v12);

  }
  else
  {
    if (qword_10028ADB0 != -1)
      swift_once(&qword_10028ADB0, sub_100046CC8);
    v20 = type metadata accessor for Logger(0);
    sub_100005288(v20, (uint64_t)qword_1002A8990);
    swift_errorRetain(a3);
    v21 = swift_errorRetain(a3);
    v22 = Logger.logObject.getter(v21);
    v23 = static os_log_type_t.error.getter(v22);
    if (os_log_type_enabled(v22, v23))
    {
      v29 = a5;
      v24 = (uint8_t *)swift_slowAlloc(12, -1);
      v25 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v24 = 138412290;
      if (a3)
      {
        swift_errorRetain(a3);
        v26 = _swift_stdlib_bridgeErrorToNSError(a3);
        v30 = v26;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31);
      }
      else
      {
        v30 = 0;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31);
        v26 = 0;
      }
      *v25 = v26;
      swift_errorRelease(a3);
      swift_errorRelease(a3);
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Failed to fetch URL configuration, error: %@", v24, 0xCu);
      v27 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v25, 1, v27);
      swift_slowDealloc(v25, -1, -1);
      swift_slowDealloc(v24, -1, -1);

      a5 = v29;
    }
    else
    {
      swift_errorRelease(a3);
      swift_errorRelease(a3);

    }
  }
  dispatch_resume(*(dispatch_object_t *)(a4 + 56));
  return a5(a1, a2, a3);
}

uint64_t sub_1000EFB9C(void *a1, void *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  id v11;
  id v12;
  uint64_t v13;
  int v14;
  void (*v15)(char *, uint64_t, uint64_t, uint64_t);
  _QWORD *v16;
  _QWORD v19[5];
  __int128 v20;
  __int128 v21;
  _UNKNOWN **v22;

  v5 = sub_1000080B4(&qword_1002919F8);
  __chkstk_darwin(v5, v6);
  v8 = (char *)&v19[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for URLConfigurationCache(0);
  v19[3] = v9;
  v19[4] = &off_100262840;
  v10 = sub_1000B9D04(v19);
  v11 = a1;
  v12 = a2;
  Date.init()(v12);
  *(_QWORD *)((char *)v10 + *(int *)(v9 + 20)) = v11;
  *(_QWORD *)((char *)v10 + *(int *)(v9 + 24)) = v12;
  v13 = sub_1000080B4(&qword_100291A00);
  v14 = swift_dynamicCast(v8, v19, v13, v9, 6);
  v15 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56);
  if (v14)
  {
    v15(v8, 0, 1, v9);
    *((_QWORD *)&v21 + 1) = v9;
    v22 = &off_100262840;
    v16 = sub_1000B9D04(&v20);
    sub_1000F09A0((uint64_t)v8, (uint64_t)v16);
  }
  else
  {
    v15(v8, 1, 1, v9);
    sub_100004934((uint64_t)v8, &qword_1002919F8);
    v20 = 0u;
    v21 = 0u;
    v22 = 0;
  }
  swift_beginAccess(v2 + 16, v19, 33, 0);
  sub_1000F0958((uint64_t)&v20, v2 + 16);
  return swift_endAccess(v19);
}

void sub_1000EFD1C(uint64_t a1, uint64_t a2, void *a3, void (*a4)(id, uint64_t, id))
{
  uint64_t v6;
  uint64_t v7;
  id v8;
  Class isa;
  id v10;
  uint64_t v11;
  id v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  _QWORD *v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  void *v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  id v39;
  uint64_t v41;
  uint64_t v42;
  _QWORD v43[3];

  if (*(_QWORD *)(a1 + 24))
  {
    sub_100024A20(a1, (uint64_t)&v42, (uint64_t *)&unk_10028E7E0);
    if (v43[2])
    {
      v6 = sub_1000080B4(&qword_100291020);
      if ((swift_dynamicCast(&v41, &v42, (char *)&type metadata for Any + 8, v6, 6) & 1) != 0)
      {
        v7 = v41;
        v8 = objc_allocWithZone((Class)AAURLConfiguration);
        isa = Dictionary._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v7);
        v10 = objc_msgSend(v8, "initWithDictionary:", isa);

        if (qword_10028ADB0 != -1)
          swift_once(&qword_10028ADB0, sub_100046CC8);
        v11 = type metadata accessor for Logger(0);
        sub_100005288(v11, (uint64_t)qword_1002A8990);
        v12 = v10;
        v13 = Logger.logObject.getter(v12);
        v14 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v13, v14))
        {
          v15 = (uint8_t *)swift_slowAlloc(12, -1);
          v16 = (_QWORD *)swift_slowAlloc(8, -1);
          *(_DWORD *)v15 = 138412290;
          v42 = (uint64_t)v12;
          v17 = v12;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, v43);
          *v16 = v12;

          _os_log_impl((void *)&_mh_execute_header, v13, v14, "[URLConfigurationManager fetchURLConfiguration]: %@", v15, 0xCu);
          v18 = sub_1000080B4((uint64_t *)&unk_10028BC20);
          swift_arrayDestroy(v16, 1, v18);
          swift_slowDealloc(v16, -1, -1);
          swift_slowDealloc(v15, -1, -1);

        }
        else
        {

        }
        v33 = v12;
        a4(v12, a2, 0);

LABEL_31:
        return;
      }
    }
    else
    {
      sub_100004934((uint64_t)&v42, (uint64_t *)&unk_10028E7E0);
    }
    if (qword_10028ADB0 != -1)
      swift_once(&qword_10028ADB0, sub_100046CC8);
    v27 = type metadata accessor for Logger(0);
    v28 = sub_100005288(v27, (uint64_t)qword_1002A8990);
    v29 = Logger.logObject.getter(v28);
    v30 = static os_log_type_t.error.getter(v29);
    if (os_log_type_enabled(v29, v30))
    {
      v31 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v31 = 0;
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "[URLConfigurationManager fetchURLConfiguration]: Failed to convert object to dictionary.", v31, 2u);
      swift_slowDealloc(v31, -1, -1);
    }

    if (a3)
      v32 = (void *)_convertErrorToNSError(_:)(a3);
    else
      v32 = 0;
    v33 = objc_msgSend((id)objc_opt_self(NSError), "aa_errorWithCode:underlyingError:", -4402, v32);

    a4(0, a2, v33);
    goto LABEL_31;
  }
  if (a3)
  {
    if (qword_10028ADB0 != -1)
      swift_once(&qword_10028ADB0, sub_100046CC8);
    v19 = type metadata accessor for Logger(0);
    sub_100005288(v19, (uint64_t)qword_1002A8990);
    swift_errorRetain(a3);
    v20 = swift_errorRetain(a3);
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.error.getter(v21);
    if (os_log_type_enabled(v21, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc(12, -1);
      v24 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v23 = 138412290;
      swift_errorRetain(a3);
      v25 = _swift_stdlib_bridgeErrorToNSError(a3);
      v42 = v25;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, v43);
      *v24 = v25;
      swift_errorRelease(a3);
      swift_errorRelease(a3);
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "[URLConfigurationManager fetchURLConfiguration]: %@", v23, 0xCu);
      v26 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v24, 1, v26);
      swift_slowDealloc(v24, -1, -1);
      swift_slowDealloc(v23, -1, -1);
    }
    else
    {
      swift_errorRelease(a3);
      swift_errorRelease(a3);
    }

    a4(0, a2, a3);
  }
  else
  {
    if (qword_10028ADB0 != -1)
      swift_once(&qword_10028ADB0, sub_100046CC8);
    v34 = type metadata accessor for Logger(0);
    v35 = sub_100005288(v34, (uint64_t)qword_1002A8990);
    v36 = Logger.logObject.getter(v35);
    v37 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v36, v37))
    {
      v38 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v38 = 0;
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "[URLConfigurationManager fetchURLConfiguration]: Both object and error are nil.", v38, 2u);
      swift_slowDealloc(v38, -1, -1);
    }

    v39 = objc_msgSend((id)objc_opt_self(NSError), "aa_errorWithCode:underlyingError:", -4402, 0);
    a4(0, a2, v39);

  }
}

uint64_t sub_1000F0328(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v7;
  void (*v8)(__int128 *, void *, void *);
  id v9;
  id v10;
  __int128 v12;
  __int128 v13;

  v8 = *(void (**)(__int128 *, void *, void *))(a1 + 32);
  v7 = *(_QWORD *)(a1 + 40);
  if (a2)
  {
    *((_QWORD *)&v13 + 1) = swift_getObjectType(a2);
    *(_QWORD *)&v12 = a2;
  }
  else
  {
    v12 = 0u;
    v13 = 0u;
  }
  swift_retain(v7);
  swift_unknownObjectRetain(a2);
  v9 = a3;
  v10 = a4;
  v8(&v12, a3, a4);

  swift_release(v7);
  return sub_100004934((uint64_t)&v12, (uint64_t *)&unk_10028E7E0);
}

uint64_t sub_1000F03D8()
{
  uint64_t v0;

  sub_100004934(v0 + 16, &qword_100291A08);

  return swift_deallocClassInstance(v0, 64, 7);
}

uint64_t type metadata accessor for URLConfigurationManager()
{
  return objc_opt_self(_TtC13appleaccountd23URLConfigurationManager);
}

void sub_1000F0430()
{
  uint64_t v0;

  sub_1000EF270(*(_QWORD *)(v0 + 16), *(void (**)(void *, _QWORD, _QWORD))(v0 + 24), *(_QWORD *)(v0 + 32));
}

void sub_1000F043C(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD, _QWORD, _QWORD), uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint8_t *v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  id v33;
  char *v34;
  char *v35;
  char *v36;
  id v37;
  Class isa;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD aBlock[5];
  uint64_t v52;

  v50 = a1;
  v7 = type metadata accessor for URLRequest(0);
  v48 = *(_QWORD *)(v7 - 8);
  v49 = v7;
  __chkstk_darwin(v7, v8);
  v47 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1000080B4((uint64_t *)&unk_10028DC30);
  __chkstk_darwin(v10, v11);
  v13 = (char *)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for URL(0);
  v15 = *(_QWORD *)(v14 - 8);
  v17 = __chkstk_darwin(v14, v16);
  v45 = (char *)&v43 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17, v19);
  v46 = (char *)&v43 - v20;
  v21 = (_QWORD *)swift_allocObject(&unk_100267280, 40, 7);
  v21[2] = a2;
  v21[3] = a3;
  v21[4] = a4;
  v22 = qword_10028ADB0;
  swift_retain(a2);
  swift_retain(a4);
  if (v22 != -1)
    swift_once(&qword_10028ADB0, sub_100046CC8);
  v23 = type metadata accessor for Logger(0);
  v24 = sub_100005288(v23, (uint64_t)qword_1002A8990);
  v25 = Logger.logObject.getter(v24);
  v26 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v25, v26))
  {
    v27 = (uint8_t *)swift_slowAlloc(2, -1);
    v44 = a2;
    v28 = v27;
    *(_WORD *)v27 = 0;
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "[URLConfigurationManager fetchURLConfiguration] called.", v27, 2u);
    a2 = v44;
    swift_slowDealloc(v28, -1, -1);
  }

  sub_1000EEE7C((uint64_t)v13);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
  {
    v29 = sub_100004934((uint64_t)v13, (uint64_t *)&unk_10028DC30);
    v30 = Logger.logObject.getter(v29);
    v31 = static os_log_type_t.error.getter(v30);
    if (os_log_type_enabled(v30, v31))
    {
      v32 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v32 = 0;
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "[URLConfigurationManager fetchURLConfiguration]: configurationURL is nil.", v32, 2u);
      swift_slowDealloc(v32, -1, -1);
    }

    v33 = objc_msgSend((id)objc_opt_self(NSError), "aa_errorWithCode:underlyingError:", -4417, 0);
    sub_1000EF850(0, 0, (uint64_t)v33, a2, a3);
    swift_release(v21);

  }
  else
  {
    v34 = v46;
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v46, v13, v14);
    v35 = v45;
    (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v45, v34, v14);
    v36 = v47;
    URLRequest.init(url:cachePolicy:timeoutInterval:)(v35, 0, 60.0);
    v37 = objc_msgSend((id)objc_opt_self(AAURLSession), "sharedSession");
    isa = URLRequest._bridgeToObjectiveC()().super.isa;
    v39 = swift_allocObject(&unk_1002672A8, 32, 7);
    *(_QWORD *)(v39 + 16) = sub_1000F08D8;
    *(_QWORD *)(v39 + 24) = v21;
    aBlock[4] = sub_1000F0908;
    v52 = v39;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1000F0328;
    aBlock[3] = &unk_1002672C0;
    v40 = _Block_copy(aBlock);
    v41 = v52;
    swift_retain(v21);
    swift_release(v41);
    v42 = objc_msgSend(v37, "bodyTaskWithRequest:completion:", isa, v40);
    _Block_release(v40);

    objc_msgSend(v42, "resume");
    swift_unknownObjectRelease(v42);
    (*(void (**)(char *, uint64_t))(v48 + 8))(v36, v49);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v34, v14);
    swift_release(v21);
  }
}

uint64_t sub_1000F08D8(void *a1, void *a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1000EF850(a1, a2, a3, *(_QWORD *)(v3 + 16), *(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v3 + 24));
}

uint64_t sub_1000F08E4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_1000F0908(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;

  sub_1000EFD1C(a1, a2, a3, *(void (**)(id, uint64_t, id))(v3 + 16));
}

uint64_t sub_1000F0910(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000080B4((uint64_t *)&unk_10028DC30);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000F0958(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_1000080B4(&qword_100291A08);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000F09A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for URLConfigurationCache(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t destroy for CustodianRecoveryContainer(_QWORD *a1)
{
  sub_100006F58(a1);
  sub_100006F58(a1 + 5);
  sub_100006F58(a1 + 10);
  sub_100006F58(a1 + 15);
  swift_unknownObjectRelease(a1[20]);
  return sub_100006F58(a1 + 22);
}

_OWORD *initializeWithCopy for CustodianRecoveryContainer(_OWORD *a1, _OWORD *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  _OWORD *v9;
  __int128 v10;
  uint64_t v11;
  void (*v12)(_OWORD *, _OWORD *, uint64_t);

  v4 = *(_OWORD *)((char *)a2 + 24);
  *(_OWORD *)((char *)a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  v5 = a2[4];
  a1[4] = v5;
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))((uint64_t)a1 + 40, (uint64_t)a2 + 40);
  v6 = *(_OWORD *)((char *)a2 + 104);
  *(_OWORD *)((char *)a1 + 104) = v6;
  (**(void (***)(uint64_t, uint64_t))(v6 - 8))((uint64_t)(a1 + 5), (uint64_t)(a2 + 5));
  v7 = a2[9];
  a1[9] = v7;
  (**(void (***)(uint64_t, uint64_t))(v7 - 8))((uint64_t)a1 + 120, (uint64_t)a2 + 120);
  v8 = a2[10];
  a1[10] = v8;
  v9 = a2 + 11;
  v10 = *(_OWORD *)((char *)a2 + 200);
  *(_OWORD *)((char *)a1 + 200) = v10;
  v11 = v10;
  v12 = **(void (***)(_OWORD *, _OWORD *, uint64_t))(v10 - 8);
  swift_unknownObjectRetain(v8);
  v12(a1 + 11, v9, v11);
  return a1;
}

_QWORD *assignWithCopy for CustodianRecoveryContainer(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  sub_1000B2628(a1, a2);
  sub_1000B2628(a1 + 5, a2 + 5);
  sub_1000B2628(a1 + 10, a2 + 10);
  sub_1000B2628(a1 + 15, a2 + 15);
  v4 = a2[20];
  v5 = a2[21];
  v6 = a1[20];
  a1[20] = v4;
  swift_unknownObjectRetain(v4);
  swift_unknownObjectRelease(v6);
  a1[21] = v5;
  sub_1000B2628(a1 + 22, a2 + 22);
  return a1;
}

__n128 initializeWithTake for CustodianRecoveryContainer(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __n128 result;
  __int128 v10;
  __int128 v11;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  v8 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v8;
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  result = *(__n128 *)(a2 + 160);
  v10 = *(_OWORD *)(a2 + 176);
  v11 = *(_OWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 176) = v10;
  *(_OWORD *)(a1 + 192) = v11;
  *(__n128 *)(a1 + 160) = result;
  return result;
}

uint64_t assignWithTake for CustodianRecoveryContainer(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;

  sub_100006F58((_QWORD *)a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  sub_100006F58((_QWORD *)(a1 + 40));
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  sub_100006F58((_QWORD *)(a1 + 80));
  v5 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v5;
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  sub_100006F58((_QWORD *)(a1 + 120));
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  v6 = *(_QWORD *)(a2 + 160);
  v7 = *(_QWORD *)(a2 + 168);
  v8 = *(_QWORD *)(a1 + 160);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = v6;
  swift_unknownObjectRelease(v8);
  *(_QWORD *)(a1 + 168) = v7;
  sub_100006F58((_QWORD *)(a1 + 176));
  v9 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 192) = v9;
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  return a1;
}

uint64_t getEnumTagSinglePayload for CustodianRecoveryContainer(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 216))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CustodianRecoveryContainer(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 216) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 216) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for CustodianRecoveryContainer()
{
  return &type metadata for CustodianRecoveryContainer;
}

uint64_t sub_1000F0D64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v15;

  v8 = type metadata accessor for InheritanceInvitationRecord(0);
  __chkstk_darwin(v8, v9);
  v11 = (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = swift_allocObject(&unk_100267398, 24, 7);
  swift_weakInit(v12 + 16, v4);
  v13 = (_QWORD *)swift_allocObject(&unk_1002673C0, 40, 7);
  v13[2] = v12;
  v13[3] = a3;
  v13[4] = a4;
  sub_100027FE8(a2, (uint64_t)v11, type metadata accessor for InheritanceInvitationRecord);
  *(_QWORD *)&v11[*(int *)(v8 + 32)] = 2;
  sub_10000732C((_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 40));
  swift_retain(v12);
  swift_retain(a4);
  sub_1000C993C((uint64_t)v11, (uint64_t)sub_1000F226C, (uint64_t)v13);
  sub_100028388((uint64_t)v11, type metadata accessor for InheritanceInvitationRecord);
  swift_release(v12);
  return swift_release(v13);
}

uint64_t sub_1000F0E9C(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), void (*a4)(uint64_t))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t Strong;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  void (**v44)(uint64_t);
  uint64_t v46;
  void (*v47)(uint64_t);
  _BYTE v48[24];
  uint64_t v49;
  uint64_t v50;

  v47 = a3;
  v7 = type metadata accessor for InheritanceInvitationRecord(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  v11 = __chkstk_darwin(v7, v10);
  v12 = (char *)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11, v13);
  v15 = (char *)&v46 - v14;
  v16 = sub_1000080B4((uint64_t *)&unk_10028FA70);
  __chkstk_darwin(v16, v17);
  v19 = (uint64_t *)((char *)&v46 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100024A20(a1, (uint64_t)v19, (uint64_t *)&unk_10028FA70);
  if (swift_getEnumCaseMultiPayload(v19, v16) == 1)
  {
    v20 = *v19;
    if (qword_10028ADD0 != -1)
      swift_once(&qword_10028ADD0, sub_100046D50);
    v21 = type metadata accessor for Logger(0);
    sub_100005288(v21, (uint64_t)qword_1002A89F0);
    v22 = swift_errorRetain(v20);
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.error.getter(v23);
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc(12, -1);
      v26 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v25 = 138412290;
      v27 = _convertErrorToNSError(_:)(v20);
      v49 = v27;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50);
      *v26 = v27;
      swift_errorRelease(v20);
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Error updating Inheritance invitation %@", v25, 0xCu);
      v28 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v26, 1, v28);
      swift_slowDealloc(v26, -1, -1);
      swift_slowDealloc(v25, -1, -1);
    }
    else
    {
      swift_errorRelease(v20);
    }

    swift_errorRetain(v20);
    v47(v20);
    swift_errorRelease(v20);
    return swift_errorRelease(v20);
  }
  else
  {
    v29 = a2 + 16;
    sub_10003B730((uint64_t)v19, (uint64_t)v15, type metadata accessor for InheritanceInvitationRecord);
    if (qword_10028ADD0 != -1)
      swift_once(&qword_10028ADD0, sub_100046D50);
    v30 = type metadata accessor for Logger(0);
    v31 = sub_100005288(v30, (uint64_t)qword_1002A89F0);
    v32 = Logger.logObject.getter(v31);
    v33 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v32, v33))
    {
      v34 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v34 = 0;
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "Inheritance invitation updated!", v34, 2u);
      swift_slowDealloc(v34, -1, -1);
    }

    swift_beginAccess(v29, &v49, 0, 0);
    Strong = swift_weakLoadStrong(v29);
    if (Strong)
    {
      v36 = Strong;
      v37 = swift_allocObject(&unk_100267398, 24, 7);
      swift_beginAccess(v29, v48, 0, 0);
      v38 = swift_weakLoadStrong(v29);
      swift_weakInit(v37 + 16, v38);
      swift_release(v38);
      sub_100027FE8((uint64_t)v15, (uint64_t)v12, type metadata accessor for InheritanceInvitationRecord);
      v39 = *(unsigned __int8 *)(v8 + 80);
      v40 = (v39 + 16) & ~v39;
      v41 = (v9 + v40 + 7) & 0xFFFFFFFFFFFFFFF8;
      v42 = (v41 + 23) & 0xFFFFFFFFFFFFFFF8;
      v43 = swift_allocObject(&unk_1002673E8, v42 + 8, v39 | 7);
      sub_10003B730((uint64_t)v12, v43 + v40, type metadata accessor for InheritanceInvitationRecord);
      v44 = (void (**)(uint64_t))(v43 + v41);
      *v44 = v47;
      v44[1] = a4;
      *(_QWORD *)(v43 + v42) = v37;
      sub_10000732C((_QWORD *)(v36 + 16), *(_QWORD *)(v36 + 40));
      swift_retain(a4);
      swift_retain(v37);
      sub_1000CA860((uint64_t)v15, (uint64_t)sub_1000F38F0, v43);
      swift_release(v36);
      swift_release(v43);
      sub_100028388((uint64_t)v15, type metadata accessor for InheritanceInvitationRecord);
      return swift_release(v37);
    }
    else
    {
      return sub_100028388((uint64_t)v15, type metadata accessor for InheritanceInvitationRecord);
    }
  }
}

uint64_t sub_1000F1328(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  int EnumCaseMultiPayload;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  uint64_t v47;
  uint8_t *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v56;
  char *v57;
  unint64_t v58;
  void **v59;
  uint64_t Strong;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  void ***v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  NSObject *v73;
  os_log_type_t v74;
  uint8_t *v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  void (*v82)(uint64_t);
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void (*v94)(uint64_t);
  uint64_t v95;
  uint64_t v96[3];
  uint64_t v97;
  uint64_t v98;

  v93 = a5;
  v94 = a3;
  v92 = type metadata accessor for BeneficiaryInfoRecord(0);
  v90 = *(_QWORD *)(v92 - 8);
  v8 = *(_QWORD *)(v90 + 64);
  v10 = __chkstk_darwin(v92, v9);
  v91 = (uint64_t)&v88 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v10, v11);
  v89 = (uint64_t)&v88 - v13;
  v15 = __chkstk_darwin(v12, v14);
  v17 = (char *)&v88 - v16;
  __chkstk_darwin(v15, v18);
  v20 = (char *)&v88 - v19;
  v21 = type metadata accessor for InheritanceInvitationRecord(0);
  __chkstk_darwin(v21, v22);
  v24 = (char *)&v88 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_1000080B4(&qword_100295630);
  __chkstk_darwin(v25, v26);
  v28 = (uint64_t *)((char *)&v88 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100024A20(a1, (uint64_t)v28, &qword_100295630);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v28, v25);
  v95 = a4;
  if (EnumCaseMultiPayload != 1)
  {
    sub_10003B730((uint64_t)v28, (uint64_t)v20, type metadata accessor for BeneficiaryInfoRecord);
    if (qword_10028ADD0 != -1)
      swift_once(&qword_10028ADD0, sub_100046D50);
    v42 = type metadata accessor for Logger(0);
    v43 = sub_100005288(v42, (uint64_t)qword_1002A89F0);
    v44 = sub_100027FE8((uint64_t)v20, (uint64_t)v17, type metadata accessor for BeneficiaryInfoRecord);
    v45 = Logger.logObject.getter(v44);
    v46 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v45, v46))
    {
      v47 = swift_slowAlloc(12, -1);
      v88 = v43;
      v48 = (uint8_t *)v47;
      v49 = v20;
      v50 = swift_slowAlloc(32, -1);
      v96[0] = v50;
      *(_DWORD *)v48 = 136315138;
      v51 = sub_100013870();
      v53 = v52;
      v97 = sub_1001DEF4C(v51, v52, v96);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, &v98);
      swift_bridgeObjectRelease(v53);
      sub_100028388((uint64_t)v17, type metadata accessor for BeneficiaryInfoRecord);
      _os_log_impl((void *)&_mh_execute_header, v45, v46, "Successfully fetched Beneficiary - %s", v48, 0xCu);
      swift_arrayDestroy(v50, 1, (char *)&type metadata for Any + 8);
      v54 = v50;
      v20 = v49;
      swift_slowDealloc(v54, -1, -1);
      swift_slowDealloc(v48, -1, -1);
    }
    else
    {
      sub_100028388((uint64_t)v17, type metadata accessor for BeneficiaryInfoRecord);
    }

    v56 = v93;
    v57 = &v20[*(int *)(v92 + 20)];
    v58 = *((_QWORD *)v57 + 1);
    if (v58)
    {
      v59 = *(void ***)v57;
      swift_beginAccess(v93 + 16, v96, 0, 0);
      Strong = swift_weakLoadStrong(v56 + 16);
      if (Strong)
      {
        v61 = Strong;
        v62 = v91;
        sub_100027FE8((uint64_t)v20, v91, type metadata accessor for BeneficiaryInfoRecord);
        v63 = *(unsigned __int8 *)(v90 + 80);
        v64 = (uint64_t)v20;
        v65 = (v63 + 40) & ~v63;
        v66 = (v8 + v65 + 7) & 0xFFFFFFFFFFFFFFF8;
        v67 = (_QWORD *)swift_allocObject(&unk_100267410, v66 + 16, v63 | 7);
        v68 = v95;
        v67[2] = v94;
        v67[3] = v68;
        v67[4] = v56;
        sub_10003B730(v62, (uint64_t)v67 + v65, type metadata accessor for BeneficiaryInfoRecord);
        v69 = (void ***)((char *)v67 + v66);
        *v69 = v59;
        v69[1] = (void **)v58;
        swift_bridgeObjectRetain_n(v58, 2);
        swift_retain(v68);
        swift_retain(v56);
        sub_1000F1FC8(v64, v59, v58, (uint64_t)sub_1000F3AA4, (uint64_t)v67);
        swift_bridgeObjectRelease(v58);
        swift_release(v61);
        swift_release(v67);
        v70 = v64;
        return sub_100028388(v70, type metadata accessor for BeneficiaryInfoRecord);
      }
    }
    else
    {
      v71 = v89;
      v72 = sub_100027FE8((uint64_t)v20, v89, type metadata accessor for BeneficiaryInfoRecord);
      v73 = Logger.logObject.getter(v72);
      v74 = static os_log_type_t.error.getter(v73);
      if (os_log_type_enabled(v73, v74))
      {
        v75 = (uint8_t *)swift_slowAlloc(12, -1);
        v76 = v20;
        v77 = swift_slowAlloc(32, -1);
        v96[0] = v77;
        *(_DWORD *)v75 = 136315138;
        v78 = sub_100013870();
        v80 = v79;
        v97 = sub_1001DEF4C(v78, v79, v96);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, &v98);
        swift_bridgeObjectRelease(v80);
        sub_100028388(v71, type metadata accessor for BeneficiaryInfoRecord);
        _os_log_impl((void *)&_mh_execute_header, v73, v74, "Cannot proceed. Beneficiary handle is nil - %s", v75, 0xCu);
        swift_arrayDestroy(v77, 1, (char *)&type metadata for Any + 8);
        v81 = v77;
        v20 = v76;
        swift_slowDealloc(v81, -1, -1);
        swift_slowDealloc(v75, -1, -1);
      }
      else
      {
        sub_100028388(v71, type metadata accessor for BeneficiaryInfoRecord);
      }

      v82 = v94;
      type metadata accessor for InheritanceError(0);
      v84 = v83;
      v97 = 2;
      v85 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
      v86 = sub_100005150(&qword_10028B350, (uint64_t (*)(uint64_t))type metadata accessor for InheritanceError, (uint64_t)&unk_100216D64);
      _BridgedStoredNSError.init(_:userInfo:)(v96, &v97, v85, v84, v86);
      v87 = (void *)v96[0];
      v82(v96[0]);

    }
    v70 = (uint64_t)v20;
    return sub_100028388(v70, type metadata accessor for BeneficiaryInfoRecord);
  }
  v30 = *v28;
  if (qword_10028ADD0 != -1)
    swift_once(&qword_10028ADD0, sub_100046D50);
  v31 = type metadata accessor for Logger(0);
  sub_100005288(v31, (uint64_t)qword_1002A89F0);
  v32 = sub_100027FE8(a2, (uint64_t)v24, type metadata accessor for InheritanceInvitationRecord);
  v33 = Logger.logObject.getter(v32);
  v34 = static os_log_type_t.error.getter(v33);
  if (os_log_type_enabled(v33, v34))
  {
    v35 = (uint8_t *)swift_slowAlloc(12, -1);
    v36 = swift_slowAlloc(32, -1);
    v96[0] = v36;
    *(_DWORD *)v35 = 136315138;
    v37 = type metadata accessor for UUID(0);
    v38 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v39 = dispatch thunk of CustomStringConvertible.description.getter(v37, v38);
    v41 = v40;
    v97 = sub_1001DEF4C(v39, v40, v96);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, &v98);
    swift_bridgeObjectRelease(v41);
    sub_100028388((uint64_t)v24, type metadata accessor for InheritanceInvitationRecord);
    _os_log_impl((void *)&_mh_execute_header, v33, v34, "Failed to fetch Beneficiary Record with beneficiaryID - %s", v35, 0xCu);
    swift_arrayDestroy(v36, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v36, -1, -1);
    swift_slowDealloc(v35, -1, -1);
  }
  else
  {
    sub_100028388((uint64_t)v24, type metadata accessor for InheritanceInvitationRecord);
  }

  swift_errorRetain(v30);
  v94(v30);
  swift_errorRelease(v30);
  return swift_errorRelease(v30);
}

uint64_t sub_1000F1AE0(uint64_t a1, void (*a2)(uint64_t), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _BYTE v29[24];

  if (a1)
  {
    swift_errorRetain(a1);
    if (qword_10028ADD0 != -1)
      swift_once(&qword_10028ADD0, sub_100046D50);
    v10 = type metadata accessor for Logger(0);
    v11 = sub_100005288(v10, (uint64_t)qword_1002A89F0);
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.error.getter(v12);
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Failed to share Beneficiary Record.", v14, 2u);
      swift_slowDealloc(v14, -1, -1);
    }

    swift_errorRetain(a1);
    a2(a1);
    swift_errorRelease(a1);
    return swift_errorRelease(a1);
  }
  else
  {
    v19 = a4 + 16;
    if (qword_10028ADD0 != -1)
      swift_once(&qword_10028ADD0, sub_100046D50);
    v20 = type metadata accessor for Logger(0);
    v21 = sub_100005288(v20, (uint64_t)qword_1002A89F0);
    v22 = Logger.logObject.getter(v21);
    v23 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v22, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v24 = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Successfully shared BeneficiaryRecord. Creating Health Record...", v24, 2u);
      swift_slowDealloc(v24, -1, -1);
    }

    swift_beginAccess(v19, v29, 0, 0);
    result = swift_weakLoadStrong(v19);
    if (result)
    {
      v25 = result;
      v26 = swift_allocObject(&unk_100267460, 32, 7);
      *(_QWORD *)(v26 + 16) = a2;
      *(_QWORD *)(v26 + 24) = a3;
      v27 = swift_allocObject(&unk_100267398, 24, 7);
      swift_weakInit(v27 + 16, v25);
      v28 = (_QWORD *)swift_allocObject(&unk_100267488, 56, 7);
      v28[2] = sub_1000F3CD4;
      v28[3] = v26;
      v28[4] = v27;
      v28[5] = a6;
      v28[6] = a7;
      swift_retain(a3);
      swift_retain(v26);
      swift_retain(v27);
      swift_bridgeObjectRetain(a7);
      sub_1000F2A5C(a5, (uint64_t)sub_1000F3D18, (uint64_t)v28);
      swift_release(v25);
      swift_release(v26);
      swift_release(v27);
      return swift_release(v28);
    }
  }
  return result;
}

uint64_t sub_1000F1DC0(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  if (qword_10028ADD0 != -1)
    swift_once(&qword_10028ADD0, sub_100046D50);
  v4 = type metadata accessor for Logger(0);
  sub_100005288(v4, (uint64_t)qword_1002A89F0);
  swift_errorRetain(a1);
  v5 = swift_errorRetain(a1);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v8 = 138412290;
    if (a1)
    {
      swift_errorRetain(a1);
      v10 = _swift_stdlib_bridgeErrorToNSError(a1);
      v13 = v10;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, &v14);
    }
    else
    {
      v13 = 0;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, &v14);
      v10 = 0;
    }
    *v9 = v10;
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Finished sharing health record. Error: %@", v8, 0xCu);
    v11 = sub_1000080B4((uint64_t *)&unk_10028BC20);
    swift_arrayDestroy(v9, 1, v11);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {
    swift_errorRelease(a1);
    swift_errorRelease(a1);
  }

  return a2(a1);
}

uint64_t sub_1000F1FC8(uint64_t a1, void **a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  void **v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v30;
  void **v31;

  v6 = v5;
  v30 = a5;
  v31 = a2;
  v10 = type metadata accessor for BeneficiaryInfoRecord(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  __chkstk_darwin(v10, v13);
  v14 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10028ADD0 != -1)
    swift_once(&qword_10028ADD0, sub_100046D50);
  v15 = type metadata accessor for Logger(0);
  v16 = sub_100005288(v15, (uint64_t)qword_1002A89F0);
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v17, v18))
  {
    v19 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v19 = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Sharing Cloud Record...", v19, 2u);
    swift_slowDealloc(v19, -1, -1);
  }

  v20 = swift_allocObject(&unk_100267398, 24, 7);
  swift_weakInit(v20 + 16, v6);
  sub_100027FE8(a1, (uint64_t)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for BeneficiaryInfoRecord);
  v21 = *(unsigned __int8 *)(v11 + 80);
  v22 = (v21 + 40) & ~v21;
  v23 = (v12 + v22 + 7) & 0xFFFFFFFFFFFFFFF8;
  v24 = (_QWORD *)swift_allocObject(&unk_100267438, v23 + 16, v21 | 7);
  v25 = a1;
  v26 = v31;
  v24[2] = v20;
  v24[3] = v26;
  v24[4] = a3;
  sub_10003B730((uint64_t)v14, (uint64_t)v24 + v22, type metadata accessor for BeneficiaryInfoRecord);
  v27 = (_QWORD *)((char *)v24 + v23);
  v28 = v30;
  *v27 = a4;
  v27[1] = v28;
  swift_retain(v20);
  swift_bridgeObjectRetain(a3);
  sub_10000E1C0(a4, v28);
  sub_100066680(v25, v26, a3, (uint64_t)sub_1000F3C54, (uint64_t)v24);
  swift_release(v20);
  return swift_release(v24);
}

uint64_t type metadata accessor for BeneficiaryAcceptedStatusHandler()
{
  return objc_opt_self(_TtC13appleaccountd32BeneficiaryAcceptedStatusHandler);
}

uint64_t sub_1000F21FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000F0D64(a1, a2, a3, a4);
}

uint64_t sub_1000F221C()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000F2240()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000F226C(uint64_t a1)
{
  uint64_t v1;

  return sub_1000F0E9C(a1, *(_QWORD *)(v1 + 16), *(void (**)(uint64_t))(v1 + 24), *(void (**)(uint64_t))(v1 + 32));
}

uint64_t sub_1000F2278(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint64_t v44;
  uint8_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint8_t *v54;
  void (*v55)(uint64_t);
  uint64_t Strong;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void (*v64)(uint64_t);
  uint64_t v65;
  uint64_t v66[5];
  uint64_t v67;
  _BYTE v68[16];

  v65 = a5;
  v62 = a3;
  v63 = a4;
  v11 = type metadata accessor for BeneficiaryInfoRecord(0);
  __chkstk_darwin(v11, v12);
  v14 = (char *)&v60 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for CloudShareInfo(0);
  v17 = __chkstk_darwin(v15, v16);
  v19 = (char *)&v60 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17, v20);
  v22 = (char *)&v60 - v21;
  v23 = sub_1000080B4(&qword_1002953C0);
  __chkstk_darwin(v23, v24);
  v26 = (uint64_t *)((char *)&v60 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100024A20(a1, (uint64_t)v26, &qword_1002953C0);
  if (swift_getEnumCaseMultiPayload(v26, v23) == 1)
  {
    v64 = (void (*)(uint64_t))a6;
    v27 = *v26;
    if (qword_10028ADD0 != -1)
      swift_once(&qword_10028ADD0, sub_100046D50);
    v28 = type metadata accessor for Logger(0);
    sub_100005288(v28, (uint64_t)qword_1002A89F0);
    v29 = sub_100027FE8(v65, (uint64_t)v14, type metadata accessor for BeneficiaryInfoRecord);
    v30 = Logger.logObject.getter(v29);
    v31 = static os_log_type_t.error.getter(v30);
    if (os_log_type_enabled(v30, v31))
    {
      v32 = (uint8_t *)swift_slowAlloc(12, -1);
      v33 = swift_slowAlloc(32, -1);
      v66[0] = v33;
      v61 = a7;
      *(_DWORD *)v32 = 136315138;
      v34 = type metadata accessor for UUID(0);
      v35 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v36 = dispatch thunk of CustomStringConvertible.description.getter(v34, v35);
      v38 = v37;
      v67 = sub_1001DEF4C(v36, v37, v66);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, v68);
      swift_bridgeObjectRelease(v38);
      sub_100028388((uint64_t)v14, type metadata accessor for BeneficiaryInfoRecord);
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "Failed to share accessKey for beneficiaryID - %s", v32, 0xCu);
      swift_arrayDestroy(v33, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v33, -1, -1);
      swift_slowDealloc(v32, -1, -1);
    }
    else
    {
      sub_100028388((uint64_t)v14, type metadata accessor for BeneficiaryInfoRecord);
    }

    v55 = v64;
    if (v64)
    {
      swift_errorRetain(v27);
      v55(v27);
      swift_errorRelease(v27);
    }
    return swift_errorRelease(v27);
  }
  else
  {
    v39 = a2 + 16;
    sub_10003B730((uint64_t)v26, (uint64_t)v22, type metadata accessor for CloudShareInfo);
    if (qword_10028ADD0 != -1)
      swift_once(&qword_10028ADD0, sub_100046D50);
    v40 = type metadata accessor for Logger(0);
    sub_100005288(v40, (uint64_t)qword_1002A89F0);
    v41 = sub_100027FE8((uint64_t)v22, (uint64_t)v19, type metadata accessor for CloudShareInfo);
    v42 = Logger.logObject.getter(v41);
    v43 = static os_log_type_t.debug.getter(v42);
    if (os_log_type_enabled(v42, v43))
    {
      v44 = swift_slowAlloc(12, -1);
      v64 = (void (*)(uint64_t))a6;
      v45 = (uint8_t *)v44;
      v46 = swift_slowAlloc(32, -1);
      v60 = v39;
      v47 = v46;
      v66[0] = v46;
      *(_DWORD *)v45 = 136315138;
      v61 = a7;
      v48 = type metadata accessor for URL(0);
      v49 = sub_100005150((unint64_t *)&qword_10028F3B0, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
      v50 = dispatch thunk of CustomStringConvertible.description.getter(v48, v49);
      v52 = v51;
      v67 = sub_1001DEF4C(v50, v51, v66);
      a7 = v61;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, v68);
      swift_bridgeObjectRelease(v52);
      sub_100028388((uint64_t)v19, type metadata accessor for CloudShareInfo);
      _os_log_impl((void *)&_mh_execute_header, v42, v43, "Successfully shared record with URL - %s", v45, 0xCu);
      swift_arrayDestroy(v47, 1, (char *)&type metadata for Any + 8);
      v53 = v47;
      v39 = v60;
      swift_slowDealloc(v53, -1, -1);
      v54 = v45;
      a6 = (uint64_t)v64;
      swift_slowDealloc(v54, -1, -1);
    }
    else
    {
      sub_100028388((uint64_t)v19, type metadata accessor for CloudShareInfo);
    }

    swift_beginAccess(v39, &v67, 0, 0);
    Strong = swift_weakLoadStrong(v39);
    if (Strong)
    {
      v58 = Strong;
      sub_100006CA4(Strong + 56, (uint64_t)v66);
      swift_release(v58);
      v59 = *sub_10000732C(v66, v66[3]);
      sub_10000E1C0(a6, a7);
      sub_100153EC4((uint64_t)v22, v62, v63, v65, v59, a6, a7);
      sub_10000D98C(a6, a7);
      sub_100028388((uint64_t)v22, type metadata accessor for CloudShareInfo);
      return sub_100006F58(v66);
    }
    else
    {
      return sub_100028388((uint64_t)v22, type metadata accessor for CloudShareInfo);
    }
  }
}

uint64_t sub_1000F2808(uint64_t a1, void (*a2)(uint64_t), uint64_t a3, uint64_t a4, void **a5, unint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t Strong;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  void **v32;
  void **v33;
  unint64_t v34;
  uint64_t v35;
  char v36[24];

  v33 = a5;
  v34 = a6;
  v35 = a3;
  v9 = type metadata accessor for InheritanceHealthRecord(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  v13 = __chkstk_darwin(v9, v12);
  v14 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13, v15);
  v17 = (char *)&v33 - v16;
  v18 = sub_1000080B4((uint64_t *)&unk_100295390);
  __chkstk_darwin(v18, v19);
  v21 = (void ***)((char *)&v33 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100024A20(a1, (uint64_t)v21, (uint64_t *)&unk_100295390);
  if (swift_getEnumCaseMultiPayload(v21, v18) == 1)
  {
    v22 = *v21;
    if (a2)
    {
      swift_errorRetain(*v21);
      a2(v22);
      swift_errorRelease(v22);
    }
    return swift_errorRelease(v22);
  }
  else
  {
    sub_10003B730((uint64_t)v21, (uint64_t)v17, type metadata accessor for InheritanceHealthRecord);
    swift_beginAccess(a4 + 16, v36, 0, 0);
    Strong = swift_weakLoadStrong(a4 + 16);
    if (Strong)
    {
      v25 = Strong;
      v26 = swift_allocObject(&unk_1002674D8, 32, 7);
      v27 = v35;
      *(_QWORD *)(v26 + 16) = a2;
      *(_QWORD *)(v26 + 24) = v27;
      sub_100027FE8((uint64_t)v17, (uint64_t)v14, type metadata accessor for InheritanceHealthRecord);
      v28 = *(unsigned __int8 *)(v10 + 80);
      v29 = (v28 + 48) & ~v28;
      v30 = (_QWORD *)swift_allocObject(&unk_100267500, v29 + v11, v28 | 7);
      v32 = v33;
      v31 = v34;
      v30[2] = v33;
      v30[3] = v31;
      v30[4] = sub_1000F3D9C;
      v30[5] = v26;
      sub_10003B730((uint64_t)v14, (uint64_t)v30 + v29, type metadata accessor for InheritanceHealthRecord);
      sub_10000E1C0((uint64_t)a2, v27);
      swift_bridgeObjectRetain(v31);
      swift_retain(v26);
      sub_100067708((uint64_t)v17, v32, v31, (uint64_t)sub_1000F3EB0, (uint64_t)v30);
      swift_release(v25);
      swift_release(v26);
      swift_release(v30);
    }
    return sub_100028388((uint64_t)v17, type metadata accessor for InheritanceHealthRecord);
  }
}

uint64_t sub_1000F2A5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint8_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v4 = v3;
  v8 = (int *)type metadata accessor for InheritanceHealthRecord(0);
  __chkstk_darwin(v8, v9);
  v11 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = type metadata accessor for BeneficiaryInfoRecord(0);
  __chkstk_darwin(v42, v12);
  v14 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10028ADD0 != -1)
    swift_once(&qword_10028ADD0, sub_100046D50);
  v15 = type metadata accessor for Logger(0);
  sub_100005288(v15, (uint64_t)qword_1002A89F0);
  v16 = sub_100027FE8(a1, (uint64_t)v14, type metadata accessor for BeneficiaryInfoRecord);
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v17, v18))
  {
    v19 = swift_slowAlloc(12, -1);
    v39 = a1;
    v20 = (uint8_t *)v19;
    v21 = swift_slowAlloc(32, -1);
    v41 = a3;
    v38 = v21;
    v44 = v21;
    v40 = v3;
    *(_DWORD *)v20 = 136315138;
    v37 = v20 + 4;
    v22 = a2;
    v23 = type metadata accessor for UUID(0);
    v24 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v25 = v23;
    a2 = v22;
    v26 = dispatch thunk of CustomStringConvertible.description.getter(v25, v24);
    v28 = v27;
    v43 = sub_1001DEF4C(v26, v27, &v44);
    v4 = v40;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, &v44);
    swift_bridgeObjectRelease(v28);
    sub_100028388((uint64_t)v14, type metadata accessor for BeneficiaryInfoRecord);
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Creating Inheritance Health Record for beneficiaryID - %s", v20, 0xCu);
    v29 = v38;
    swift_arrayDestroy(v38, 1, (char *)&type metadata for Any + 8);
    a3 = v41;
    swift_slowDealloc(v29, -1, -1);
    v30 = v20;
    a1 = v39;
    swift_slowDealloc(v30, -1, -1);
  }
  else
  {
    sub_100028388((uint64_t)v14, type metadata accessor for BeneficiaryInfoRecord);
  }

  v31 = type metadata accessor for UUID(0);
  v32 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 16))(v11, a1, v31);
  v33 = Date.init(timeIntervalSince1970:)(v32, 946713600.0);
  UUID.init()(v33);
  v34 = *(_BYTE *)(a1 + *(int *)(v42 + 40));
  *(_OWORD *)&v11[v8[6]] = xmmword_100218E90;
  *(_OWORD *)&v11[v8[8]] = xmmword_100218E90;
  v11[v8[9]] = v34;
  sub_10000732C((_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 40));
  v35 = swift_allocObject(&unk_1002674B0, 32, 7);
  *(_QWORD *)(v35 + 16) = a2;
  *(_QWORD *)(v35 + 24) = a3;
  swift_retain(a3);
  sub_1000CE4C4((uint64_t)v11, (uint64_t)sub_1000F3D28, v35);
  swift_release(v35);
  return sub_100028388((uint64_t)v11, type metadata accessor for InheritanceHealthRecord);
}

uint64_t sub_1000F2DB4(uint64_t a1, void (*a2)(_QWORD))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint64_t v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint8_t *v44;
  uint8_t *v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(_QWORD);
  uint64_t v50;
  uint64_t v51;

  v4 = type metadata accessor for InheritanceHealthRecord(0);
  v6 = __chkstk_darwin(v4, v5);
  v8 = (char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6, v9);
  v11 = (char *)&v46 - v10;
  v12 = sub_1000080B4((uint64_t *)&unk_100295390);
  v14 = __chkstk_darwin(v12, v13);
  v16 = (uint64_t *)((char *)&v46 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v14, v17);
  v19 = (uint64_t *)((char *)&v46 - v18);
  sub_100024A20(a1, (uint64_t)&v46 - v18, (uint64_t *)&unk_100295390);
  if (swift_getEnumCaseMultiPayload(v19, v12) == 1)
  {
    v20 = *v19;
    if (qword_10028ADD0 != -1)
      swift_once(&qword_10028ADD0, sub_100046D50);
    v21 = type metadata accessor for Logger(0);
    sub_100005288(v21, (uint64_t)qword_1002A89F0);
    swift_errorRetain(v20);
    v22 = swift_errorRetain(v20);
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.error.getter(v23);
    if (os_log_type_enabled(v23, v24))
    {
      v49 = a2;
      v25 = (uint8_t *)swift_slowAlloc(12, -1);
      v26 = swift_slowAlloc(32, -1);
      v50 = v20;
      v51 = v26;
      v48 = v12;
      *(_DWORD *)v25 = 136315138;
      swift_errorRetain(v20);
      v27 = sub_1000080B4(&qword_10028E850);
      v28 = String.init<A>(describing:)(&v50, v27);
      v30 = v29;
      v50 = sub_1001DEF4C(v28, v29, &v51);
      v12 = v48;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, &v51);
      v31 = v30;
      a2 = v49;
      swift_bridgeObjectRelease(v31);
      swift_errorRelease(v20);
      swift_errorRelease(v20);
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Error saving health Record: - %s", v25, 0xCu);
      swift_arrayDestroy(v26, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v26, -1, -1);
      swift_slowDealloc(v25, -1, -1);
    }
    else
    {
      swift_errorRelease(v20);
      swift_errorRelease(v20);
    }

    *v16 = v20;
    swift_storeEnumTagMultiPayload(v16, v12, 1);
    swift_errorRetain(v20);
    a2(v16);
    swift_errorRelease(v20);
    return sub_1000F3D30((uint64_t)v16);
  }
  else
  {
    sub_10003B730((uint64_t)v19, (uint64_t)v11, type metadata accessor for InheritanceHealthRecord);
    if (qword_10028ADD0 != -1)
      swift_once(&qword_10028ADD0, sub_100046D50);
    v32 = type metadata accessor for Logger(0);
    sub_100005288(v32, (uint64_t)qword_1002A89F0);
    v33 = sub_100027FE8((uint64_t)v11, (uint64_t)v8, type metadata accessor for InheritanceHealthRecord);
    v34 = Logger.logObject.getter(v33);
    v35 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v34, v35))
    {
      v36 = swift_slowAlloc(12, -1);
      v48 = v12;
      v37 = (uint8_t *)v36;
      v47 = swift_slowAlloc(32, -1);
      v51 = v47;
      v49 = a2;
      *(_DWORD *)v37 = 136315138;
      v46 = v37 + 4;
      v38 = type metadata accessor for UUID(0);
      v39 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v40 = dispatch thunk of CustomStringConvertible.description.getter(v38, v39);
      v42 = v41;
      v50 = sub_1001DEF4C(v40, v41, &v51);
      a2 = v49;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, &v51);
      swift_bridgeObjectRelease(v42);
      sub_100028388((uint64_t)v8, type metadata accessor for InheritanceHealthRecord);
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "Successfully created health record for beneficiaryID - %s", v37, 0xCu);
      v43 = v47;
      swift_arrayDestroy(v47, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v43, -1, -1);
      v44 = v37;
      v12 = v48;
      swift_slowDealloc(v44, -1, -1);
    }
    else
    {
      sub_100028388((uint64_t)v8, type metadata accessor for InheritanceHealthRecord);
    }

    sub_100027FE8((uint64_t)v11, (uint64_t)v16, type metadata accessor for InheritanceHealthRecord);
    swift_storeEnumTagMultiPayload(v16, v12, 0);
    a2(v16);
    sub_1000F3D30((uint64_t)v16);
    return sub_100028388((uint64_t)v11, type metadata accessor for InheritanceHealthRecord);
  }
}

uint64_t sub_1000F32B8(uint64_t a1, uint64_t a2, unint64_t a3, void (*a4)(uint64_t), uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v50;
  void (*v51)(uint64_t);
  uint64_t v52;
  uint64_t v53;

  v50 = a5;
  v51 = a4;
  v10 = type metadata accessor for InheritanceHealthRecord(0);
  __chkstk_darwin(v10, v11);
  v13 = (char *)&v50 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for CloudShareInfo(0);
  v16 = __chkstk_darwin(v14, v15);
  v18 = (char *)&v50 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16, v19);
  v21 = (char *)&v50 - v20;
  v22 = sub_1000080B4(&qword_1002953C0);
  __chkstk_darwin(v22, v23);
  v25 = (uint64_t *)((char *)&v50 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100024A20(a1, (uint64_t)v25, &qword_1002953C0);
  if (swift_getEnumCaseMultiPayload(v25, v22) == 1)
  {
    v26 = *v25;
    if (qword_10028ADD0 != -1)
      swift_once(&qword_10028ADD0, sub_100046D50);
    v27 = type metadata accessor for Logger(0);
    sub_100005288(v27, (uint64_t)qword_1002A89F0);
    v28 = sub_100027FE8(a6, (uint64_t)v13, type metadata accessor for InheritanceHealthRecord);
    v29 = Logger.logObject.getter(v28);
    v30 = static os_log_type_t.error.getter(v29);
    if (os_log_type_enabled(v29, v30))
    {
      v31 = (uint8_t *)swift_slowAlloc(12, -1);
      v32 = swift_slowAlloc(32, -1);
      v53 = v32;
      *(_DWORD *)v31 = 136315138;
      v33 = type metadata accessor for UUID(0);
      v34 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v35 = dispatch thunk of CustomStringConvertible.description.getter(v33, v34);
      v37 = v36;
      v52 = sub_1001DEF4C(v35, v36, &v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53);
      swift_bridgeObjectRelease(v37);
      sub_100028388((uint64_t)v13, type metadata accessor for InheritanceHealthRecord);
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "Failed to share health record for beneficiaryID - %s", v31, 0xCu);
      swift_arrayDestroy(v32, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v32, -1, -1);
      swift_slowDealloc(v31, -1, -1);
    }
    else
    {
      sub_100028388((uint64_t)v13, type metadata accessor for InheritanceHealthRecord);
    }

    swift_errorRetain(v26);
    v51(v26);
    swift_errorRelease(v26);
    return swift_errorRelease(v26);
  }
  else
  {
    sub_10003B730((uint64_t)v25, (uint64_t)v21, type metadata accessor for CloudShareInfo);
    if (qword_10028ADD0 != -1)
      swift_once(&qword_10028ADD0, sub_100046D50);
    v38 = type metadata accessor for Logger(0);
    sub_100005288(v38, (uint64_t)qword_1002A89F0);
    sub_100027FE8((uint64_t)v21, (uint64_t)v18, type metadata accessor for CloudShareInfo);
    v39 = swift_bridgeObjectRetain_n(a3, 2);
    v40 = Logger.logObject.getter(v39);
    v41 = static os_log_type_t.debug.getter(v40);
    if (os_log_type_enabled(v40, v41))
    {
      v42 = swift_slowAlloc(22, -1);
      v43 = swift_slowAlloc(64, -1);
      v53 = v43;
      *(_DWORD *)v42 = 136315394;
      swift_bridgeObjectRetain(a3);
      v52 = sub_1001DEF4C(a2, a3, &v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53);
      swift_bridgeObjectRelease_n(a3, 3);
      *(_WORD *)(v42 + 12) = 2080;
      v44 = type metadata accessor for URL(0);
      v45 = sub_100005150((unint64_t *)&qword_10028F3B0, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
      v46 = dispatch thunk of CustomStringConvertible.description.getter(v44, v45);
      v48 = v47;
      v52 = sub_1001DEF4C(v46, v47, &v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53);
      swift_bridgeObjectRelease(v48);
      sub_100028388((uint64_t)v18, type metadata accessor for CloudShareInfo);
      _os_log_impl((void *)&_mh_execute_header, v40, v41, "Successfully shared health record with %s. URL - %s", (uint8_t *)v42, 0x16u);
      swift_arrayDestroy(v43, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v43, -1, -1);
      swift_slowDealloc(v42, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n(a3, 2);
      sub_100028388((uint64_t)v18, type metadata accessor for CloudShareInfo);
    }

    v51(0);
    return sub_100028388((uint64_t)v21, type metadata accessor for CloudShareInfo);
  }
}

uint64_t sub_1000F37E8()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);

  v1 = (int *)type metadata accessor for InheritanceInvitationRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 23) & 0xFFFFFFFFFFFFFFF8;
  v8 = v0 + v4;
  v9 = type metadata accessor for UUID(0);
  v10 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8);
  v10(v8, v9);
  swift_bridgeObjectRelease(*(_QWORD *)(v8 + v1[5] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v8 + v1[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v8 + v1[7] + 8));
  v10(v8 + v1[9], v9);
  sub_10000F494(*(_QWORD *)(v8 + v1[10]), *(_QWORD *)(v8 + v1[10] + 8));
  swift_release(*(_QWORD *)(v0 + v6 + 8));
  swift_release(*(_QWORD *)(v0 + v7));
  return swift_deallocObject(v0, v7 + 8, v5);
}

uint64_t sub_1000F38F0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v3 = *(_QWORD *)(type metadata accessor for InheritanceInvitationRecord(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_1000F1328(a1, v1 + v4, *(void (**)(uint64_t))(v1 + v5), *(_QWORD *)(v1 + v5 + 8), *(_QWORD *)(v1 + ((v5 + 23) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_1000F3950()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  unint64_t v11;

  v1 = (int *)type metadata accessor for BeneficiaryInfoRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));
  v6 = v0 + v4;
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v0 + v4, v7);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[5] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[6] + 8));
  sub_10000F494(*(_QWORD *)(v6 + v1[7]), *(_QWORD *)(v6 + v1[7] + 8));
  v9(v0 + v4 + v1[8], v7);
  sub_10000F494(*(_QWORD *)(v6 + v1[9]), *(_QWORD *)(v6 + v1[9] + 8));
  v10 = v0 + v4 + v1[11];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v10, 1, v7))
    v9(v10, v7);
  v11 = (v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[12] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[14] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v11 + 8));
  return swift_deallocObject(v0, v11 + 16, v3 | 7);
}

uint64_t sub_1000F3AA4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t *v5;

  v3 = *(_QWORD *)(type metadata accessor for BeneficiaryInfoRecord(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (uint64_t *)(v1 + ((*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8));
  return sub_1000F1AE0(a1, *(void (**)(uint64_t))(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), v1 + v4, *v5, v5[1]);
}

uint64_t sub_1000F3B00()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;

  v1 = (int *)type metadata accessor for BeneficiaryInfoRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  v6 = v0 + v4;
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v6, v7);
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[5] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[6] + 8));
  sub_10000F494(*(_QWORD *)(v6 + v1[7]), *(_QWORD *)(v6 + v1[7] + 8));
  v9(v6 + v1[8], v7);
  sub_10000F494(*(_QWORD *)(v6 + v1[9]), *(_QWORD *)(v6 + v1[9] + 8));
  v10 = v6 + v1[11];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v10, 1, v7))
    v9(v10, v7);
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[12] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[14] + 8));
  if (*(_QWORD *)(v0 + v5))
    swift_release(*(_QWORD *)(v0 + v5 + 8));
  return swift_deallocObject(v0, v5 + 16, v3 | 7);
}

uint64_t sub_1000F3C54(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t *v5;

  v3 = *(_QWORD *)(type metadata accessor for BeneficiaryInfoRecord(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (uint64_t *)((char *)v1 + ((*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8));
  return sub_1000F2278(a1, v1[2], v1[3], v1[4], (uint64_t)v1 + v4, *v5, v5[1]);
}

uint64_t sub_1000F3CB0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000F3CD4(uint64_t a1)
{
  uint64_t v1;

  return sub_1000F1DC0(a1, *(uint64_t (**)(uint64_t))(v1 + 16));
}

uint64_t sub_1000F3CDC()
{
  _QWORD *v0;

  if (v0[2])
    swift_release(v0[3]);
  swift_release(v0[4]);
  swift_bridgeObjectRelease(v0[6]);
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1000F3D18(uint64_t a1)
{
  uint64_t v1;

  return sub_1000F2808(a1, *(void (**)(uint64_t))(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(void ***)(v1 + 40), *(_QWORD *)(v1 + 48));
}

uint64_t sub_1000F3D28(uint64_t a1)
{
  uint64_t v1;

  return sub_1000F2DB4(a1, *(void (**)(_QWORD))(v1 + 16));
}

uint64_t sub_1000F3D30(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_1000080B4((uint64_t *)&unk_100295390);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000F3D70()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 16))
    swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000F3D9C()
{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t result;

  v1 = *(uint64_t (**)(void))(v0 + 16);
  if (v1)
    return v1();
  return result;
}

uint64_t sub_1000F3DC4()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;

  v1 = (int *)type metadata accessor for InheritanceHealthRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 48) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 40));
  v7 = v0 + v4;
  v8 = type metadata accessor for UUID(0);
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8);
  v9(v7, v8);
  v10 = v7 + v1[5];
  v11 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10, v11);
  sub_10000F494(*(_QWORD *)(v7 + v1[6]), *(_QWORD *)(v7 + v1[6] + 8));
  v9(v7 + v1[7], v8);
  sub_10000F494(*(_QWORD *)(v7 + v1[8]), *(_QWORD *)(v7 + v1[8] + 8));
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1000F3EB0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for InheritanceHealthRecord(0) - 8) + 80);
  return sub_1000F32B8(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(void (**)(uint64_t))(v1 + 32), *(_QWORD *)(v1 + 40), v1 + ((v3 + 48) & ~v3));
}

uint64_t sub_1000F3EF8(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000F3F2C + 4 * byte_10021CED0[a1]))(0x444964726F636572, 0xE800000000000000);
}

uint64_t sub_1000F3F2C()
{
  return 0x797469746E656469;
}

uint64_t sub_1000F3F48()
{
  return 0x4965636976726573;
}

unint64_t sub_1000F3F64()
{
  return 0xD000000000000010;
}

unint64_t sub_1000F3F80()
{
  return 0xD000000000000013;
}

uint64_t sub_1000F3FA0()
{
  unsigned __int8 *v0;

  return sub_1000F3EF8(*v0);
}

uint64_t sub_1000F3FA8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_1000F5808(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000F3FCC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000F4FF4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000F3FF4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000F4FF4();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_1000F401C(void *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  id v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int (*v31)(char *, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  void (*v37)(char *, char *, uint64_t);
  id v38;
  NSString v39;
  id v40;
  uint64_t v41;
  NSObject *v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  NSObject *v46;
  os_log_type_t v47;
  uint8_t *v48;
  NSObject **v49;
  NSObject *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  NSString v57;
  id v58;
  NSObject *v59;
  NSObject *v60;
  uint64_t v61;
  void (*v62)(uint64_t, char *, uint64_t);
  uint64_t v63;
  int *v64;
  NSObject **v65;
  id v66;
  id v67;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(char *, uint64_t);
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  NSObject *v74;
  NSObject *v75;
  os_log_type_t v76;
  uint8_t *v77;
  NSObject *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  void (*v87)(char *, uint64_t);
  uint64_t v88;
  uint64_t v89;
  id v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  NSObject *v96;
  NSObject *v97;
  uint64_t v98;

  LODWORD(v92) = a2;
  v91 = a3;
  v4 = sub_1000080B4((uint64_t *)&unk_1002904F0);
  v6 = __chkstk_darwin(v4, v5);
  v8 = (char *)&v88 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6, v9);
  v11 = (char *)&v88 - v10;
  v12 = type metadata accessor for UUID(0);
  v95 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12, v13);
  v16 = (char *)&v88 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v14, v17);
  v93 = (char *)&v88 - v19;
  v20 = CKRecord.recordType.getter(v18);
  v22 = v21;
  if (v20 == 0xD000000000000015 && v21 == 0x800000010021CF50)
  {
    swift_bridgeObjectRelease(0x800000010021CF50);
  }
  else
  {
    v23 = _stringCompareWithSmolCheck(_:_:expecting:)(v20, v21, 0xD000000000000015, 0x800000010021CF50, 0);
    swift_bridgeObjectRelease(v22);
    if ((v23 & 1) == 0)
    {
LABEL_7:
      type metadata accessor for IdentityError(0);
      v33 = v32;
      v98 = -3001;
      v34 = sub_100005014((uint64_t)&_swiftEmptyArrayStorage);
      v35 = sub_100005150((unint64_t *)&qword_10028B5D0, (uint64_t (*)(uint64_t))type metadata accessor for IdentityError, (uint64_t)&unk_100218178);
      v36 = _BridgedStoredNSError.init(_:userInfo:)(&v96, &v98, v34, v33, v35);
      swift_willThrow(v36);

      return;
    }
  }
  v24 = objc_msgSend(a1, "recordID");
  v25 = objc_msgSend(v24, "recordName");

  v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
  v94 = v12;
  v28 = v27;

  UUID.init(uuidString:)(v26, v28);
  v29 = v94;
  swift_bridgeObjectRelease(v28);
  v30 = v95;
  v31 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v95 + 48);
  if (v31(v11, 1, v29) == 1)
  {
    sub_100013AAC((uint64_t)v11);
    goto LABEL_7;
  }
  v37 = *(void (**)(char *, char *, uint64_t))(v30 + 32);
  v37(v93, v11, v29);
  v38 = objc_msgSend(a1, "encryptedValuesByKey");
  v39 = String._bridgeToObjectiveC()();
  v90 = v38;
  v40 = objc_msgSend(v38, "objectForKeyedSubscript:", v39);

  if (!v40)
    goto LABEL_12;
  v98 = (uint64_t)v40;
  v41 = sub_1000080B4(&qword_10028DB30);
  if ((swift_dynamicCast(&v96, &v98, v41, &type metadata for String, 6) & 1) == 0)
    goto LABEL_12;
  v42 = v97;
  UUID.init(uuidString:)(v96, v97);
  swift_bridgeObjectRelease(v42);
  v43 = v94;
  if (v31(v8, 1, v94) == 1)
  {
    sub_100013AAC((uint64_t)v8);
LABEL_12:
    if (qword_10028ADF8 != -1)
      swift_once(&qword_10028ADF8, sub_100046E08);
    v44 = type metadata accessor for Logger(0);
    sub_100005288(v44, (uint64_t)qword_1002A8A68);
    v45 = a1;
    v46 = Logger.logObject.getter(v45);
    v47 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v46, v47))
    {
      v48 = (uint8_t *)swift_slowAlloc(12, -1);
      v49 = (NSObject **)swift_slowAlloc(8, -1);
      *(_DWORD *)v48 = 138412290;
      v96 = v45;
      v50 = v45;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v96, &v97);
      *v49 = v45;

      _os_log_impl((void *)&_mh_execute_header, v46, v47, "Missing identityID - %@", v48, 0xCu);
      v51 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v49, 1, v51);
      swift_slowDealloc(v49, -1, -1);
      swift_slowDealloc(v48, -1, -1);
    }
    else
    {

      v46 = v45;
    }

    type metadata accessor for IdentityError(0);
    v53 = v52;
    v98 = -3001;
    v54 = sub_100005014((uint64_t)&_swiftEmptyArrayStorage);
    v55 = sub_100005150((unint64_t *)&qword_10028B5D0, (uint64_t (*)(uint64_t))type metadata accessor for IdentityError, (uint64_t)&unk_100218178);
    v56 = _BridgedStoredNSError.init(_:userInfo:)(&v96, &v98, v54, v53, v55);
    swift_willThrow(v56);
    swift_unknownObjectRelease(v90);

    (*(void (**)(char *, uint64_t))(v95 + 8))(v93, v94);
    return;
  }
  v37(v16, v8, v43);
  v57 = String._bridgeToObjectiveC()();
  v58 = objc_msgSend(v90, "objectForKeyedSubscript:", v57);

  if (v58 && (v98 = (uint64_t)v58, (swift_dynamicCast(&v96, &v98, v41, &type metadata for String, 6) & 1) != 0))
  {
    v59 = v96;
    v60 = v97;
    v61 = v94;
    v62 = *(void (**)(uint64_t, char *, uint64_t))(v95 + 16);
    v63 = v91;
    v62(v91, v93, v94);
    v64 = (int *)type metadata accessor for IdentityServiceRecord(0);
    v62(v63 + v64[5], v16, v61);
    v65 = (NSObject **)(v63 + v64[6]);
    *v65 = v59;
    v65[1] = v60;
    v66 = objc_msgSend(objc_allocWithZone((Class)NSKeyedArchiver), "initRequiringSecureCoding:", 1);
    objc_msgSend(a1, "encodeSystemFieldsWithCoder:", v66);
    objc_msgSend(v66, "finishEncoding");
    v67 = objc_msgSend(v66, "encodedData");
    v68 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v67);
    v88 = v69;
    v89 = v68;
    swift_unknownObjectRelease(v90);

    v70 = *(void (**)(char *, uint64_t))(v95 + 8);
    v70(v16, v61);
    v70(v93, v61);
    v71 = (uint64_t *)(v63 + v64[7]);
    v72 = v88;
    *v71 = v89;
    v71[1] = v72;
    *(_BYTE *)(v63 + v64[8]) = v92 & 1;
  }
  else
  {
    if (qword_10028ADF8 != -1)
      swift_once(&qword_10028ADF8, sub_100046E08);
    v73 = type metadata accessor for Logger(0);
    sub_100005288(v73, (uint64_t)qword_1002A8A68);
    v74 = a1;
    v75 = Logger.logObject.getter(v74);
    v76 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v75, v76))
    {
      v77 = (uint8_t *)swift_slowAlloc(12, -1);
      v92 = swift_slowAlloc(8, -1);
      *(_DWORD *)v77 = 138412290;
      v96 = v74;
      v78 = v74;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v96, &v97);
      v79 = v92;
      *(_QWORD *)v92 = v74;

      _os_log_impl((void *)&_mh_execute_header, v75, v76, "Missing serviceID - %@", v77, 0xCu);
      v80 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v79, 1, v80);
      swift_slowDealloc(v79, -1, -1);
      swift_slowDealloc(v77, -1, -1);
    }
    else
    {

      v75 = v74;
    }

    type metadata accessor for IdentityError(0);
    v82 = v81;
    v98 = -3001;
    v83 = sub_100005014((uint64_t)&_swiftEmptyArrayStorage);
    v84 = sub_100005150((unint64_t *)&qword_10028B5D0, (uint64_t (*)(uint64_t))type metadata accessor for IdentityError, (uint64_t)&unk_100218178);
    v85 = _BridgedStoredNSError.init(_:userInfo:)(&v96, &v98, v83, v82, v84);
    swift_willThrow(v85);
    swift_unknownObjectRelease(v90);

    v86 = v94;
    v87 = *(void (**)(char *, uint64_t))(v95 + 8);
    v87(v16, v94);
    v87(v93, v86);
  }
}

uint64_t sub_1000F48C8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  void (*v26)(char *, char *, uint64_t);
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  _QWORD *v38;
  char v39;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  _QWORD *v50;
  __int128 v51;
  char v52;

  v44 = a2;
  v49 = type metadata accessor for UUID(0);
  v45 = *(_QWORD *)(v49 - 8);
  v4 = __chkstk_darwin(v49, v3);
  v6 = (char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4, v7);
  v46 = (char *)&v41 - v8;
  v47 = sub_1000080B4(&qword_100291AE8);
  v9 = *(_QWORD *)(v47 - 8);
  __chkstk_darwin(v47, v10);
  v12 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for IdentityServiceRecord(0);
  __chkstk_darwin(v13, v14);
  v16 = (char *)&v41 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = a1[3];
  v17 = a1[4];
  sub_10000732C(a1, v18);
  v19 = sub_1000F4FF4();
  v48 = v12;
  v20 = v50;
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for IdentityServiceRecord.CodingKeys, &type metadata for IdentityServiceRecord.CodingKeys, v19, v18, v17);
  if (v20)
    return sub_100006F58(a1);
  v42 = v6;
  v43 = v9;
  v50 = a1;
  LOBYTE(v51) = 1;
  v21 = sub_100005150((unint64_t *)&unk_10028BBB0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v22 = v46;
  v23 = v47;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v46, v49, &v51, v47, v49, v21);
  v41 = v13;
  v24 = (uint64_t)v16;
  v25 = &v16[*(int *)(v13 + 20)];
  v26 = *(void (**)(char *, char *, uint64_t))(v45 + 32);
  v27 = v22;
  v28 = v49;
  v26(v25, v27, v49);
  LOBYTE(v51) = 2;
  v29 = KeyedDecodingContainer.decode(_:forKey:)(&v51, v23);
  v30 = v28;
  v46 = v25;
  v31 = v41;
  v32 = v42;
  v33 = (uint64_t *)(v24 + *(int *)(v41 + 24));
  *v33 = v29;
  v33[1] = v34;
  LOBYTE(v51) = 0;
  v35 = v30;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v32, v30, &v51, v23, v30, v21);
  v26((char *)v24, v32, v35);
  v52 = 3;
  v36 = sub_10000F40C();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v51, &type metadata for Data, &v52, v23, &type metadata for Data, v36);
  *(_OWORD *)(v24 + *(int *)(v31 + 28)) = v51;
  LOBYTE(v51) = 4;
  v37 = KeyedDecodingContainer.decode(_:forKey:)(&v51, v23);
  v38 = v50;
  v39 = v37;
  (*(void (**)(char *, uint64_t))(v43 + 8))(v48, v23);
  *(_BYTE *)(v24 + *(int *)(v31 + 32)) = v39 & 1;
  sub_1000F5038(v24, v44);
  sub_100006F58(v38);
  return sub_1000F507C(v24);
}

uint64_t sub_1000F4CEC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  __int128 v23;
  char v24;

  v3 = v1;
  v5 = sub_1000080B4(&qword_100291AF8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a1[3];
  v11 = a1[4];
  sub_10000732C(a1, v10);
  v12 = sub_1000F4FF4();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for IdentityServiceRecord.CodingKeys, &type metadata for IdentityServiceRecord.CodingKeys, v12, v10, v11);
  v13 = (int *)type metadata accessor for IdentityServiceRecord(0);
  v14 = v3 + v13[5];
  LOBYTE(v23) = 1;
  v15 = type metadata accessor for UUID(0);
  v16 = sub_100005150((unint64_t *)&unk_10028DC20, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v14, &v23, v5, v15, v16);
  if (!v2)
  {
    v17 = (uint64_t *)(v3 + v13[6]);
    v18 = *v17;
    v19 = v17[1];
    LOBYTE(v23) = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v18, v19, &v23, v5);
    LOBYTE(v23) = 0;
    KeyedEncodingContainer.encode<A>(_:forKey:)(v3, &v23, v5, v15, v16);
    v23 = *(_OWORD *)(v3 + v13[7]);
    v24 = 3;
    v20 = sub_10000F4D8();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v23, &v24, v5, &type metadata for Data, v20);
    v21 = *(unsigned __int8 *)(v3 + v13[8]);
    LOBYTE(v23) = 4;
    KeyedEncodingContainer.encode(_:forKey:)(v21, &v23, v5);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

uint64_t sub_1000F4EF8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000F48C8(a1, a2);
}

uint64_t sub_1000F4F0C(_QWORD *a1)
{
  return sub_1000F4CEC(a1);
}

uint64_t sub_1000F4F20(uint64_t a1)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = sub_100005150((unint64_t *)&unk_100291AD0, type metadata accessor for IdentityServiceRecord, (uint64_t)&unk_10021CF08);
  result = sub_100005150(&qword_10028D630, type metadata accessor for IdentityServiceRecord, (uint64_t)&unk_10021CEE0);
  *(_QWORD *)(a1 + 16) = result;
  return result;
}

uint64_t type metadata accessor for IdentityServiceRecord(uint64_t a1)
{
  uint64_t result;

  result = qword_100291B58;
  if (!qword_100291B58)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for IdentityServiceRecord);
  return result;
}

uint64_t sub_1000F4FB8(uint64_t a1)
{
  uint64_t result;

  result = sub_100005150(&qword_100291AE0, type metadata accessor for IdentityServiceRecord, (uint64_t)&unk_10021CF30);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000F4FF4()
{
  unint64_t result;

  result = qword_100291AF0;
  if (!qword_100291AF0)
  {
    result = swift_getWitnessTable(&unk_10021D0B0, &type metadata for IdentityServiceRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100291AF0);
  }
  return result;
}

uint64_t sub_1000F5038(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for IdentityServiceRecord(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000F507C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for IdentityServiceRecord(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t storeEnumTagSinglePayload for IdentityServiceRecord.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1000F5104 + 4 * byte_10021CEDA[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1000F5138 + 4 * byte_10021CED5[v4]))();
}

uint64_t sub_1000F5138(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000F5140(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000F5148);
  return result;
}

uint64_t sub_1000F5154(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000F515CLL);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1000F5160(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000F5168(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for IdentityServiceRecord.CodingKeys()
{
  return &type metadata for IdentityServiceRecord.CodingKeys;
}

_QWORD *sub_1000F5184(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(_QWORD *, _QWORD *, uint64_t);
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v17 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v17);
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    v8 = *(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v8((_QWORD *)((char *)a1 + a3[5]), (_QWORD *)((char *)a2 + a3[5]), v7);
    v9 = a3[6];
    v10 = a3[7];
    v11 = (_QWORD *)((char *)a1 + v9);
    v12 = (_QWORD *)((char *)a2 + v9);
    v13 = v12[1];
    *v11 = *v12;
    v11[1] = v13;
    v14 = (_QWORD *)((char *)a1 + v10);
    v15 = *(_QWORD *)((char *)a2 + v10);
    v16 = *(_QWORD *)((char *)a2 + v10 + 8);
    swift_bridgeObjectRetain(v13);
    sub_10000F450(v15, v16);
    *v14 = v15;
    v14[1] = v16;
    *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  }
  return a1;
}

uint64_t sub_1000F5260(uint64_t a1, int *a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);

  v4 = type metadata accessor for UUID(0);
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(a1, v4);
  v5(a1 + a2[5], v4);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[6] + 8));
  return sub_10000F494(*(_QWORD *)(a1 + a2[7]), *(_QWORD *)(a1 + a2[7] + 8));
}

uint64_t sub_1000F52D4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;

  v6 = type metadata accessor for UUID(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v8 = a3[6];
  v9 = a3[7];
  v10 = (_QWORD *)(a1 + v8);
  v11 = (_QWORD *)(a2 + v8);
  v12 = v11[1];
  *v10 = *v11;
  v10[1] = v12;
  v13 = (uint64_t *)(a1 + v9);
  v14 = *(_QWORD *)(a2 + v9);
  v15 = *(_QWORD *)(a2 + v9 + 8);
  swift_bridgeObjectRetain(v12);
  sub_10000F450(v14, v15);
  *v13 = v14;
  v13[1] = v15;
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  return a1;
}

uint64_t sub_1000F5384(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;

  v6 = type metadata accessor for UUID(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v8 = a3[6];
  v9 = (_QWORD *)(a1 + v8);
  v10 = (_QWORD *)(a2 + v8);
  *v9 = *v10;
  v11 = v10[1];
  v12 = v9[1];
  v9[1] = v11;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRelease(v12);
  v13 = a3[7];
  v14 = (uint64_t *)(a1 + v13);
  v15 = (uint64_t *)(a2 + v13);
  v16 = *v15;
  v17 = v15[1];
  sub_10000F450(*v15, v17);
  v18 = *v14;
  v19 = v14[1];
  *v14 = v16;
  v14[1] = v17;
  sub_10000F494(v18, v19);
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  return a1;
}

uint64_t sub_1000F5454(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;

  v6 = type metadata accessor for UUID(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v8 = a3[7];
  *(_OWORD *)(a1 + a3[6]) = *(_OWORD *)(a2 + a3[6]);
  *(_OWORD *)(a1 + v8) = *(_OWORD *)(a2 + v8);
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  return a1;
}

uint64_t sub_1000F54E4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;

  v6 = type metadata accessor for UUID(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v8 = a3[6];
  v9 = (_QWORD *)(a1 + v8);
  v10 = (uint64_t *)(a2 + v8);
  v12 = *v10;
  v11 = v10[1];
  v13 = v9[1];
  *v9 = v12;
  v9[1] = v11;
  swift_bridgeObjectRelease(v13);
  v14 = a3[7];
  v15 = *(_QWORD *)(a1 + v14);
  v16 = *(_QWORD *)(a1 + v14 + 8);
  *(_OWORD *)(a1 + v14) = *(_OWORD *)(a2 + v14);
  sub_10000F494(v15, v16);
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  return a1;
}

uint64_t sub_1000F5594(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000F55A0);
}

uint64_t sub_1000F55A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 24) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_1000F5620(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000F562C);
}

uint64_t sub_1000F562C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 24) + 8) = (a2 - 1);
  return result;
}

uint64_t sub_1000F56A8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[5];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = v4[0];
    v4[2] = &unk_10021CFB0;
    v4[3] = &unk_10021CFC8;
    v4[4] = &unk_10021CFE0;
    swift_initStructMetadata(a1, 256, 5, v4, a1 + 16);
    return 0;
  }
  return result;
}

unint64_t sub_1000F5734()
{
  unint64_t result;

  result = qword_100291BA0;
  if (!qword_100291BA0)
  {
    result = swift_getWitnessTable(&unk_10021D088, &type metadata for IdentityServiceRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100291BA0);
  }
  return result;
}

unint64_t sub_1000F577C()
{
  unint64_t result;

  result = qword_100291BA8;
  if (!qword_100291BA8)
  {
    result = swift_getWitnessTable(&unk_10021CFF8, &type metadata for IdentityServiceRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100291BA8);
  }
  return result;
}

unint64_t sub_1000F57C4()
{
  unint64_t result;

  result = qword_100291BB0;
  if (!qword_100291BB0)
  {
    result = swift_getWitnessTable(&unk_10021D020, &type metadata for IdentityServiceRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100291BB0);
  }
  return result;
}

uint64_t sub_1000F5808(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char v10;

  if (a1 == 0x444964726F636572 && a2 == 0xE800000000000000)
  {
    v5 = 0xE800000000000000;
    goto LABEL_8;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x444964726F636572, 0xE800000000000000, a1, a2, 0) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  if (a1 == 0x797469746E656469 && a2 == 0xEA00000000004449)
  {
    v7 = 0xEA00000000004449;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x797469746E656469, 0xEA00000000004449, a1, a2, 0) & 1) != 0)
  {
    v7 = a2;
    goto LABEL_14;
  }
  if (a1 == 0x4965636976726573 && a2 == 0xE900000000000044)
  {
    v8 = 0xE900000000000044;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4965636976726573, 0xE900000000000044, a1, a2, 0) & 1) != 0)
  {
    v8 = a2;
    goto LABEL_20;
  }
  if (a1 == 0xD000000000000010)
  {
    v9 = 0x8000000100209650;
    if (a2 == 0x8000000100209650)
      goto LABEL_25;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010, 0x8000000100209650, a1, a2, 0) & 1) != 0)
  {
    v9 = a2;
LABEL_25:
    swift_bridgeObjectRelease(v9);
    return 3;
  }
  if (a1 == 0xD000000000000013 && a2 == 0x8000000100209670)
  {
    swift_bridgeObjectRelease(0x8000000100209670);
    return 4;
  }
  else
  {
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013, 0x8000000100209670, a1, a2, 0);
    swift_bridgeObjectRelease(a2);
    if ((v10 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t sub_1000F5A30(uint64_t a1, uint64_t a2, void (*a3)(_QWORD), uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  __n128 v34;
  os_log_type_t v35;
  uint8_t *v36;
  uint64_t v38;
  void (*v39)(_QWORD);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v40 = a4;
  v6 = sub_1000080B4((uint64_t *)&unk_10028CCD0);
  __chkstk_darwin(v6, v7);
  v9 = (uint64_t *)((char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = type metadata accessor for CustodianshipRecords(0);
  __chkstk_darwin(v10, v11);
  v13 = (char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for CustodianshipRecordBuilder.Components(0);
  __chkstk_darwin(v14, v15);
  v17 = (char *)&v38 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_1000080B4((uint64_t *)&unk_100291C88);
  __chkstk_darwin(v18, v19);
  v21 = (uint64_t *)((char *)&v38 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100024A20(a1, (uint64_t)v21, (uint64_t *)&unk_100291C88);
  if (swift_getEnumCaseMultiPayload(v21, v18) == 1)
  {
    v22 = *v21;
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v23 = type metadata accessor for Logger(0);
    sub_100005288(v23, (uint64_t)qword_1002A89D8);
    v24 = swift_errorRetain(v22);
    v25 = Logger.logObject.getter(v24);
    v26 = static os_log_type_t.error.getter(v25);
    if (os_log_type_enabled(v25, v26))
    {
      v39 = a3;
      v27 = (uint8_t *)swift_slowAlloc(12, -1);
      v28 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v27 = 138412290;
      v29 = _convertErrorToNSError(_:)(v22);
      v41 = v29;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42);
      *v28 = v29;
      a3 = v39;
      swift_errorRelease(v22);
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Error building custodian record: %@", v27, 0xCu);
      v30 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v28, 1, v30);
      swift_slowDealloc(v28, -1, -1);
      swift_slowDealloc(v27, -1, -1);
    }
    else
    {
      swift_errorRelease(v22);
    }

    *v9 = v22;
    swift_storeEnumTagMultiPayload(v9, v6, 1);
    swift_errorRetain(v22);
    a3(v9);
    swift_errorRelease(v22);
    return sub_100004934((uint64_t)v9, (uint64_t *)&unk_10028CCD0);
  }
  else
  {
    sub_10003B730((uint64_t)v21, (uint64_t)v17, type metadata accessor for CustodianshipRecordBuilder.Components);
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v31 = type metadata accessor for Logger(0);
    v32 = sub_100005288(v31, (uint64_t)qword_1002A89D8);
    v33 = Logger.logObject.getter(v32);
    v35 = static os_log_type_t.default.getter(v34);
    if (os_log_type_enabled(v33, v35))
    {
      v36 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v36 = 0;
      _os_log_impl((void *)&_mh_execute_header, v33, v35, "Custodian components fetched, building record...", v36, 2u);
      swift_slowDealloc(v36, -1, -1);
    }

    sub_1000F5E4C((unint64_t)v17, (uint64_t)v13);
    sub_100027FE8((uint64_t)v13, (uint64_t)v9, type metadata accessor for CustodianshipRecords);
    swift_storeEnumTagMultiPayload(v9, v6, 0);
    a3(v9);
    sub_100004934((uint64_t)v9, (uint64_t *)&unk_10028CCD0);
    sub_100028388((uint64_t)v13, type metadata accessor for CustodianshipRecords);
    return sub_100028388((uint64_t)v17, type metadata accessor for CustodianshipRecordBuilder.Components);
  }
}

uint64_t sub_1000F5E4C@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void *v44;
  NSString v45;
  id v46;
  id v47;
  id v48;
  NSString v49;
  id v50;
  id v51;
  int *v52;
  void *v53;
  id v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  id v63;
  void *v64;
  uint64_t v65;
  unint64_t v66;
  id v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  unint64_t v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void (*v78)(uint64_t, char *, uint64_t);
  uint64_t *v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t *v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  char v99;
  int *v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t *v104;
  uint64_t *v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  int *v115;
  uint64_t v116;
  uint64_t v117;
  char v118;
  _QWORD *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  NSObject *v123;
  __n128 v124;
  os_log_type_t v125;
  uint8_t *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  _QWORD v135[4];
  uint64_t v136;
  uint64_t v137;
  char *v138;
  id v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  void (*v146)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v147;
  uint64_t v148;
  _QWORD *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  void (*v157)(char *, unint64_t, uint64_t);
  uint64_t v158;
  uint64_t v159;
  uint64_t (*v160)(uint64_t *, uint64_t);
  uint64_t v161;
  uint64_t *v162;
  uint64_t v163;
  uint64_t v164;
  char *v165;
  __int128 v166;
  char *v167;
  char *v168;
  unint64_t v169;
  uint64_t v170;
  uint64_t v171;
  void *v172;

  v169 = a1;
  v140 = a2;
  v155 = type metadata accessor for CustodianshipRecordBuilder.Components(0);
  __chkstk_darwin(v155, v3);
  v153 = (char *)v135 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v141 = type metadata accessor for CustodianHealthRecord(0);
  __chkstk_darwin(v141, v5);
  v154 = (char *)v135 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v137 = type metadata accessor for SHA256(0);
  v135[1] = *(_QWORD *)(v137 - 8);
  __chkstk_darwin(v137, v7);
  v138 = (char *)v135 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v136 = type metadata accessor for SHA256Digest(0);
  v135[3] = *(_QWORD *)(v136 - 8);
  __chkstk_darwin(v136, v9);
  v135[2] = (char *)v135 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v151 = type metadata accessor for CustodianRecoveryInfoRecord(0);
  __chkstk_darwin(v151, v11);
  v159 = (uint64_t)v135 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1000080B4((uint64_t *)&unk_10028CD00);
  v15 = __chkstk_darwin(v13, v14);
  v152 = (uint64_t)v135 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v15, v17);
  v150 = (uint64_t)v135 - v19;
  __chkstk_darwin(v18, v20);
  v162 = (_QWORD *)((char *)v135 - v21);
  v170 = type metadata accessor for UUID(0);
  v149 = *(_QWORD **)(v170 - 8);
  v23 = __chkstk_darwin(v170, v22);
  v168 = (char *)v135 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = __chkstk_darwin(v23, v25);
  v167 = (char *)v135 - v27;
  v29 = __chkstk_darwin(v26, v28);
  *(_QWORD *)&v166 = (char *)v135 - v30;
  __chkstk_darwin(v29, v31);
  v165 = (char *)v135 - v32;
  v33 = (int *)type metadata accessor for CustodianRecord(0);
  __chkstk_darwin(v33, v34);
  v158 = (uint64_t)v135 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = type metadata accessor for ContactsHelper(0);
  v37 = swift_allocObject(v36, *(unsigned int *)(v36 + 48), *(unsigned __int16 *)(v36 + 52));
  v38 = sub_1000080B4((uint64_t *)&unk_100291CA0);
  Dependency.init(dependencyId:config:)(0, 0, 0, v38);
  v39 = *(void **)(v2 + 176);
  v40 = objc_msgSend(v39, "handle");
  static String._unconditionallyBridgeFromObjectiveC(_:)(v40);
  v42 = v41;

  v43 = sub_1000080B4((uint64_t *)&unk_10028F080);
  Dependency.wrappedValue.getter(&v172, v43);
  v44 = v172;
  v45 = String._bridgeToObjectiveC()();
  v46 = objc_msgSend(v44, "contactForHandle:", v45);

  swift_unknownObjectRelease(v44);
  if (v46)
  {
    v47 = objc_allocWithZone((Class)AALocalContactInfo);
    swift_bridgeObjectRetain(v42);
    v48 = v46;
    v49 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v42);
    v50 = objc_msgSend(v47, "initWithHandle:contact:", v49, v48);
    swift_bridgeObjectRelease(v42);

  }
  else
  {
    swift_bridgeObjectRelease(v42);
    v50 = 0;
  }
  swift_setDeallocating(v37);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 8))(v37 + OBJC_IVAR____TtC13appleaccountd14ContactsHelper__contactsManager, v43);
  swift_deallocClassInstance(v37, *(unsigned int *)(*(_QWORD *)v37 + 48), *(unsigned __int16 *)(*(_QWORD *)v37 + 52));
  v51 = objc_msgSend((id)objc_opt_self(AADeviceInfo), "currentInfo");
  v52 = (int *)v155;
  if (!v51)
    __break(1u);
  v53 = v51;
  v54 = objc_msgSend(v51, "buildVersion");

  v56 = v149;
  if (v54)
  {
    v57 = static String._unconditionallyBridgeFromObjectiveC(_:)(v54);
    v163 = v58;
    v164 = v57;

  }
  else
  {
    v163 = 0;
    v164 = 0;
  }
  v59 = v162;
  UUID.init()(v55);
  v157 = (void (*)(char *, unint64_t, uint64_t))v56[2];
  v157((char *)v166, v169, v170);
  v60 = objc_msgSend(v39, "handle");
  v61 = static String._unconditionallyBridgeFromObjectiveC(_:)(v60);
  v147 = v62;

  v148 = v61;
  if (v50)
  {
    v63 = objc_msgSend(v50, "firstName");
    if (v63)
    {
      v64 = v63;
      v145 = static String._unconditionallyBridgeFromObjectiveC(_:)(v63);
      v144 = v65;

    }
    else
    {
      v145 = 0;
      v144 = 0;
    }
    v66 = v169;
    v67 = objc_msgSend(v50, "lastName");
    if (v67)
    {
      v68 = v67;
      v143 = static String._unconditionallyBridgeFromObjectiveC(_:)(v67);
      v142 = v69;

    }
    else
    {
      v143 = 0;
      v142 = 0;
    }
  }
  else
  {
    v143 = 0;
    v142 = 0;
    v145 = 0;
    v144 = 0;
    v66 = v169;
  }
  v162 = (uint64_t *)(v66 + v52[7]);
  sub_100024A20((uint64_t)v162, (uint64_t)v59, (uint64_t *)&unk_10028CD00);
  v70 = type metadata accessor for RecoveryKeys(0);
  v160 = *(uint64_t (**)(uint64_t *, uint64_t))(*(_QWORD *)(v70 - 8) + 48);
  v161 = v70;
  v71 = v160(v59, 1);
  v139 = v50;
  if (v71 == 1)
  {
    sub_100004934((uint64_t)v59, (uint64_t *)&unk_10028CD00);
    v72 = 0;
    v73 = 0xF000000000000000;
  }
  else
  {
    v72 = *v59;
    v73 = v59[1];
    sub_10000F450(*v59, v73);
    sub_100028388((uint64_t)v59, type metadata accessor for RecoveryKeys);
  }
  v156 = v52[8];
  v74 = *(_BYTE *)(v66 + v156);
  v75 = v158;
  v76 = v158 + v33[16];
  v77 = v170;
  v146 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v56[7];
  v146(v76, 1, 1, v170);
  v78 = (void (*)(uint64_t, char *, uint64_t))v56[4];
  v78(v75, v165, v77);
  v78(v75 + v33[5], (char *)v166, v77);
  v79 = (uint64_t *)(v75 + v33[6]);
  v80 = v147;
  *v79 = v148;
  v79[1] = v80;
  v81 = (uint64_t *)(v75 + v33[7]);
  v82 = v144;
  *v81 = v145;
  v81[1] = v82;
  v83 = (uint64_t *)(v75 + v33[8]);
  v84 = v142;
  *v83 = v143;
  v83[1] = v84;
  *(_QWORD *)(v75 + v33[9]) = 1;
  v85 = (uint64_t *)(v75 + v33[10]);
  *v85 = v72;
  v85[1] = v73;
  v86 = v33[11];
  v166 = xmmword_100218E90;
  *(_OWORD *)(v75 + v86) = xmmword_100218E90;
  *(_BYTE *)(v75 + v33[12]) = v74;
  v87 = (uint64_t *)(v75 + v33[13]);
  v88 = v163;
  *v87 = v164;
  v87[1] = v88;
  v89 = (_QWORD *)(v75 + v33[14]);
  *v89 = 0;
  v89[1] = 0;
  v90 = v75 + v33[15];
  *(_QWORD *)v90 = 0;
  *(_BYTE *)(v90 + 8) = 1;
  swift_bridgeObjectRetain(v88);
  UUID.init()(v91);
  v157(v168, v66, v77);
  v92 = (uint64_t *)(v66 + v52[6]);
  v93 = v92[3];
  v165 = (char *)v92[2];
  v94 = *v92;
  v95 = v92[1];
  v96 = v150;
  sub_100024A20((uint64_t)v162, v150, (uint64_t *)&unk_10028CD00);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v160)(v96, 1, v161) == 1)
  {
    swift_bridgeObjectRetain(v93);
    sub_10000F450(v94, v95);
    sub_100004934(v96, (uint64_t *)&unk_10028CD00);
    v97 = 0;
    v98 = 0xF000000000000000;
  }
  else
  {
    v97 = *(_QWORD *)(v96 + 16);
    v98 = *(_QWORD *)(v96 + 24);
    swift_bridgeObjectRetain(v93);
    sub_10000F450(v94, v95);
    sub_10000F450(v97, v98);
    sub_100028388(v96, type metadata accessor for RecoveryKeys);
  }
  v99 = *(_BYTE *)(v66 + v156);
  v100 = (int *)v151;
  v101 = v159;
  v102 = v170;
  v146(v159 + *(int *)(v151 + 44), 1, 1, v170);
  v78(v101, v167, v102);
  v78(v101 + v100[5], v168, v102);
  v103 = (_QWORD *)(v101 + v100[6]);
  *v103 = v165;
  v103[1] = v93;
  v104 = (uint64_t *)(v101 + v100[7]);
  *v104 = v94;
  v104[1] = v95;
  v105 = (uint64_t *)(v101 + v100[8]);
  *v105 = v97;
  v105[1] = v98;
  *(_OWORD *)(v101 + v100[9]) = v166;
  *(_BYTE *)(v101 + v100[10]) = v99;
  v106 = (uint64_t *)(v101 + v100[12]);
  v107 = (uint64_t)v162;
  v108 = v163;
  *v106 = v164;
  v106[1] = v108;
  v109 = v152;
  sub_100024A20(v107, v152, (uint64_t *)&unk_10028CD00);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v160)(v109, 1, v161) != 1)
  {
    v113 = *(_QWORD *)(v109 + 24);
    sub_10000F450(*(_QWORD *)(v109 + 16), v113);
    sub_100028388(v109, type metadata accessor for RecoveryKeys);
    v114 = sub_100005150((unint64_t *)&unk_10028BC00, (uint64_t (*)(uint64_t))&type metadata accessor for SHA256, (uint64_t)&protocol conformance descriptor for SHA256);
    dispatch thunk of HashFunction.init()(v137, v114);
    __asm { BR              X9 }
  }
  v110 = sub_100004934(v109, (uint64_t *)&unk_10028CD00);
  v111 = (uint64_t)v154;
  v112 = (uint64_t)v153;
  UUID.init()(v110);
  v115 = (int *)v141;
  v116 = v169;
  v117 = ((uint64_t (*)(uint64_t, unint64_t, uint64_t))v157)(v111 + *(int *)(v141 + 20), v169, v170);
  Date.init(timeIntervalSince1970:)(v117, 946713600.0);
  v118 = *(_BYTE *)(v116 + v156);
  v119 = (_QWORD *)(v111 + v115[7]);
  *v119 = 0;
  v119[1] = 0xF000000000000000;
  *(_OWORD *)(v111 + v115[8]) = v166;
  *(_BYTE *)(v111 + v115[9]) = v118;
  v120 = v111 + v115[10];
  *(_QWORD *)v120 = 0;
  *(_BYTE *)(v120 + 8) = 1;
  sub_100014534(0, 0xF000000000000000);
  if (qword_10028ADC8 != -1)
    swift_once(&qword_10028ADC8, sub_100046D2C);
  v121 = type metadata accessor for Logger(0);
  sub_100005288(v121, (uint64_t)qword_1002A89D8);
  v122 = sub_100027FE8(v116, v112, type metadata accessor for CustodianshipRecordBuilder.Components);
  v123 = Logger.logObject.getter(v122);
  v125 = static os_log_type_t.default.getter(v124);
  if (os_log_type_enabled(v123, v125))
  {
    v126 = (uint8_t *)swift_slowAlloc(12, -1);
    v127 = swift_slowAlloc(32, -1);
    v172 = (void *)v127;
    *(_DWORD *)v126 = 136315138;
    v169 = 0xF000000000000000;
    v128 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v129 = dispatch thunk of CustomStringConvertible.description.getter(v170, v128);
    v131 = v130;
    v171 = sub_1001DEF4C(v129, v130, (uint64_t *)&v172);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v171, &v172);
    swift_bridgeObjectRelease(v131);
    sub_100028388(v112, type metadata accessor for CustodianshipRecordBuilder.Components);
    _os_log_impl((void *)&_mh_execute_header, v123, v125, "Custodianship records %s built successfully.", v126, 0xCu);
    swift_arrayDestroy(v127, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v127, -1, -1);
    swift_slowDealloc(v126, -1, -1);

    sub_1000144D8(0, v169);
  }
  else
  {

    sub_1000144D8(0, 0xF000000000000000);
    sub_100028388(v112, type metadata accessor for CustodianshipRecordBuilder.Components);

  }
  v132 = v140;
  sub_10003B730(v158, v140, type metadata accessor for CustodianRecord);
  v133 = type metadata accessor for CustodianshipRecords(0);
  sub_10003B730(v159, v132 + *(int *)(v133 + 20), type metadata accessor for CustodianRecoveryInfoRecord);
  return sub_10003B730(v111, v132 + *(int *)(v133 + 24), type metadata accessor for CustodianHealthRecord);
}

uint64_t sub_1000F6D5C()
{
  uint64_t v0;

  sub_100006F58((_QWORD *)(v0 + 16));
  sub_100006F58((_QWORD *)(v0 + 56));
  sub_100006F58((_QWORD *)(v0 + 96));
  sub_100006F58((_QWORD *)(v0 + 136));

  return swift_deallocClassInstance(v0, 184, 7);
}

uint64_t type metadata accessor for CustodianshipRecordBuilder()
{
  return objc_opt_self(_TtC13appleaccountd26CustodianshipRecordBuilder);
}

uint64_t sub_1000F6DC0(uint64_t a1, char a2, void (*a3)(_QWORD *), uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  void (*v24)(_QWORD *);
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v13 = sub_1000080B4((uint64_t *)&unk_100291C88);
  __chkstk_darwin(v13, v14);
  v16 = (uint64_t *)((char *)&v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  if ((a2 & 1) == 0)
    return sub_1000F702C(a6, a7, a1 & 1, a3, a4);
  swift_errorRetain(a1);
  if (qword_10028ADC8 != -1)
    swift_once(&qword_10028ADC8, sub_100046D2C);
  v18 = type metadata accessor for Logger(0);
  sub_100005288(v18, (uint64_t)qword_1002A89D8);
  v19 = swift_errorRetain(a1);
  v20 = Logger.logObject.getter(v19);
  v21 = static os_log_type_t.error.getter(v20);
  if (os_log_type_enabled(v20, v21))
  {
    v30 = a4;
    v22 = (uint8_t *)swift_slowAlloc(12, -1);
    v29 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v22 = 138412290;
    v23 = v13;
    v24 = a3;
    v25 = _convertErrorToNSError(_:)(a1);
    v31 = v25;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32);
    v26 = v29;
    *v29 = v25;
    a3 = v24;
    v13 = v23;
    sub_10006AEB4(a1, 1);
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "Error fetching manatee status: %@", v22, 0xCu);
    v27 = sub_1000080B4((uint64_t *)&unk_10028BC20);
    swift_arrayDestroy(v26, 1, v27);
    swift_slowDealloc(v26, -1, -1);
    swift_slowDealloc(v22, -1, -1);
  }
  else
  {
    sub_10006AEB4(a1, 1);
  }

  *v16 = a1;
  swift_storeEnumTagMultiPayload(v16, v13, 1);
  swift_errorRetain(a1);
  a3(v16);
  sub_10006AEB4(a1, 1);
  return sub_100004934((uint64_t)v16, (uint64_t *)&unk_100291C88);
}

uint64_t sub_1000F702C(uint64_t a1, void *a2, int a3, void (*a4)(_QWORD *), uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  void (*v20)(char *, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  void *v29;
  char v30;
  _QWORD *v31;
  void *v32;
  id v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  uint8_t *v49;
  uint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  uint8_t *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  char *v64;
  uint64_t v65;
  void *v66;
  int v67;
  void (*v68)(_QWORD *);
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;

  v66 = a2;
  v68 = a4;
  v69 = a5;
  v67 = a3;
  v6 = sub_1000080B4((uint64_t *)&unk_10028CD00);
  __chkstk_darwin(v6, v7);
  v64 = (char *)&v60 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = sub_1000080B4((uint64_t *)&unk_100291C88);
  __chkstk_darwin(v62, v9);
  v63 = (uint64_t *)((char *)&v60 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = type metadata accessor for UUID(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  v15 = __chkstk_darwin(v11, v14);
  v16 = (char *)&v60 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15, v17);
  v19 = (char *)&v60 - v18;
  v20 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v61 = a1;
  v20((char *)&v60 - v18, a1, v11);
  v20(v16, (uint64_t)v19, v11);
  v21 = *(unsigned __int8 *)(v12 + 80);
  v22 = (v21 + 24) & ~v21;
  v23 = (v22 + v13 + 7) & 0xFFFFFFFFFFFFFFF8;
  v24 = (v22 + v13 + 23) & 0xFFFFFFFFFFFFFFF8;
  v25 = swift_allocObject(&unk_1002677E0, v24 + 16, v21 | 7);
  v26 = v65;
  *(_QWORD *)(v25 + 16) = v65;
  v27 = v69;
  (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v25 + v22, v19, v11);
  v28 = v25 + v23;
  v29 = v66;
  *(_QWORD *)v28 = v66;
  v30 = v67;
  *(_BYTE *)(v28 + 8) = v67;
  v31 = (_QWORD *)(v25 + v24);
  *v31 = v68;
  v31[1] = v27;
  v32 = (void *)objc_opt_self(AAPreferences);
  swift_retain(v27);
  v33 = v29;
  swift_retain(v26);
  if ((objc_msgSend(v32, "simulate2FAFA") & 1) != 0)
  {
    v34 = type metadata accessor for RecoveryKeys(0);
    v35 = (uint64_t)v64;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v64, 1, 1, v34);
    sub_1000F7560((uint64_t)v16, v33, v30 & 1, v35, (uint64_t)v68, v69);
    swift_release(v25);
    sub_100004934(v35, (uint64_t *)&unk_10028CD00);
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v16, v11);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v16, v11);
    if ((v30 & 1) != 0)
    {
      v37 = v26;
      if (qword_10028ADC8 != -1)
        swift_once(&qword_10028ADC8, sub_100046D2C);
      v38 = type metadata accessor for Logger(0);
      v39 = sub_100005288(v38, (uint64_t)qword_1002A89D8);
      v40 = Logger.logObject.getter(v39);
      v41 = static os_log_type_t.debug.getter(v40);
      if (os_log_type_enabled(v40, v41))
      {
        v42 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v42 = 0;
        _os_log_impl((void *)&_mh_execute_header, v40, v41, "Manatee available. Creating Custodian Recovery Keys in OctagonTrust.", v42, 2u);
        swift_slowDealloc(v42, -1, -1);
      }

      v43 = (_QWORD *)*sub_10000732C((_QWORD *)(v37 + 96), *(_QWORD *)(v37 + 120));
      v44 = v69;
      swift_retain(v69);
      swift_retain(v25);
      sub_10018E824(v61, v43, (void (*)(char *))sub_1000F89C4, v25, v68, v44);
      swift_release_n(v25, 2);
      return swift_release(v44);
    }
    else
    {
      if (qword_10028ADC8 != -1)
        swift_once(&qword_10028ADC8, sub_100046D2C);
      v45 = type metadata accessor for Logger(0);
      v46 = sub_100005288(v45, (uint64_t)qword_1002A89D8);
      v47 = Logger.logObject.getter(v46);
      v48 = static os_log_type_t.debug.getter(v47);
      if (os_log_type_enabled(v47, v48))
      {
        v49 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v49 = 0;
        _os_log_impl((void *)&_mh_execute_header, v47, v48, "Manatee unavailable. Not creating Custodian Recovery Keys in OctagonTrust.", v49, 2u);
        swift_slowDealloc(v49, -1, -1);
      }

      v51 = Logger.logObject.getter(v50);
      v52 = static os_log_type_t.debug.getter(v51);
      if (os_log_type_enabled(v51, v52))
      {
        v53 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v53 = 0;
        _os_log_impl((void *)&_mh_execute_header, v51, v52, "Not proceeding with IdMS Setup without recovery keys.", v53, 2u);
        swift_slowDealloc(v53, -1, -1);
      }

      type metadata accessor for AACustodianError(0);
      v55 = v54;
      v70 = -7023;
      v56 = sub_100005014((uint64_t)&_swiftEmptyArrayStorage);
      v57 = sub_100005150((unint64_t *)&qword_10028B640, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianError, (uint64_t)&unk_100218378);
      _BridgedStoredNSError.init(_:userInfo:)(&v71, &v70, v56, v55, v57);
      v58 = v62;
      v59 = v63;
      *v63 = v71;
      swift_storeEnumTagMultiPayload(v59, v58, 1);
      v68(v59);
      swift_release(v25);
      return sub_100004934((uint64_t)v59, (uint64_t *)&unk_100291C88);
    }
  }
}

void sub_1000F7560(uint64_t a1, void *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  Class isa;
  id v18;
  id v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t, uint64_t);
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  void *v32;
  uint64_t v33;
  void *v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  void **v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;

  v7 = v6;
  v44 = a5;
  v45 = a6;
  v41 = a4;
  v43 = a3;
  v39 = a2;
  v10 = sub_1000080B4((uint64_t *)&unk_10028CD00);
  v42 = *(_QWORD *)(v10 - 8);
  v11 = *(_QWORD *)(v42 + 64);
  __chkstk_darwin(v10, v12);
  v37 = (uint64_t)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = type metadata accessor for UUID(0);
  v13 = *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64);
  v14 = *(_QWORD *)(v40 - 8);
  __chkstk_darwin(v40, v15);
  v16 = objc_msgSend(objc_allocWithZone((Class)AKCustodianContext), "init");
  isa = UUID._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v16, "setCustodianUUID:", isa);

  v18 = objc_msgSend(a2, "aa_altDSID");
  objc_msgSend(v16, "setAltDSID:", v18);

  v19 = objc_msgSend(*(id *)(v7 + 176), "custodianSetupToken");
  objc_msgSend(v16, "setCustodianSetupToken:", v19);

  v38 = (void **)sub_10000732C((_QWORD *)(v7 + 16), *(_QWORD *)(v7 + 40));
  v20 = v14;
  v21 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
  v22 = (char *)&v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = v40;
  v21(v22, a1, v40);
  sub_100024A20(v41, (uint64_t)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t *)&unk_10028CD00);
  v24 = *(unsigned __int8 *)(v20 + 80);
  v25 = (v24 + 16) & ~v24;
  v26 = (v13 + v25 + 7) & 0xFFFFFFFFFFFFFFF8;
  v27 = *(unsigned __int8 *)(v42 + 80);
  v28 = (v27 + v26 + 8) & ~v27;
  v29 = v28 + v11;
  v30 = swift_allocObject(&unk_100267808, (v29 & 0xFFFFFFFFFFFFFFF8) + 24, v24 | v27 | 7);
  v31 = (v29 & 0xFFFFFFFFFFFFFFF8) + v30;
  (*(void (**)(uint64_t, char *, uint64_t))(v20 + 32))(v30 + v25, v22, v23);
  v32 = v39;
  *(_QWORD *)(v30 + v26) = v39;
  sub_1000249A0(v37, v30 + v28, (uint64_t *)&unk_10028CD00);
  *(_BYTE *)(v30 + v29) = v43;
  v33 = v45;
  *(_QWORD *)(v31 + 8) = v44;
  *(_QWORD *)(v31 + 16) = v33;
  v34 = *v38;
  v35 = v32;
  swift_retain(v33);
  sub_100043554((uint64_t)v16, (uint64_t)sub_1000F8B50, v30, v34);
  swift_release(v30);

}

uint64_t sub_1000F77EC(uint64_t a1, void (*a2)(char *), uint64_t a3, void (*a4)(_QWORD *), uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  void (*v31)(_QWORD *);
  uint64_t v32;
  void (*v33)(char *);

  v30 = a5;
  v31 = a4;
  v32 = a3;
  v33 = a2;
  v6 = sub_1000080B4((uint64_t *)&unk_100291C88);
  __chkstk_darwin(v6, v7);
  v9 = (uint64_t *)((char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = sub_1000080B4((uint64_t *)&unk_10028CD00);
  __chkstk_darwin(v10, v11);
  v13 = (char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for RecoveryKeys(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14, v16);
  v18 = (char *)&v30 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_1000080B4((uint64_t *)&unk_10028CCF0);
  __chkstk_darwin(v19, v20);
  v22 = (uint64_t *)((char *)&v30 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100024A20(a1, (uint64_t)v22, (uint64_t *)&unk_10028CCF0);
  if (swift_getEnumCaseMultiPayload(v22, v19) == 1)
  {
    v23 = *v22;
    *v9 = v23;
    swift_storeEnumTagMultiPayload(v9, v6, 1);
    swift_errorRetain(v23);
    v31(v9);
    swift_errorRelease(v23);
    return sub_100004934((uint64_t)v9, (uint64_t *)&unk_100291C88);
  }
  else
  {
    sub_10003B730((uint64_t)v22, (uint64_t)v18, type metadata accessor for RecoveryKeys);
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v25 = type metadata accessor for Logger(0);
    v26 = sub_100005288(v25, (uint64_t)qword_1002A89D8);
    v27 = Logger.logObject.getter(v26);
    v28 = static os_log_type_t.debug.getter(v27);
    if (os_log_type_enabled(v27, v28))
    {
      v29 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v29 = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "Created Custodian Recovery Keys in OctagonTrust. Proceeding to IdMS Setup.", v29, 2u);
      swift_slowDealloc(v29, -1, -1);
    }

    sub_100027FE8((uint64_t)v18, (uint64_t)v13, type metadata accessor for RecoveryKeys);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v13, 0, 1, v14);
    v33(v13);
    sub_100004934((uint64_t)v13, (uint64_t *)&unk_10028CD00);
    return sub_100028388((uint64_t)v18, type metadata accessor for RecoveryKeys);
  }
}

uint64_t sub_1000F7AA8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, int a5, void (*a6)(_QWORD *), uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v21;
  _OWORD *v22;
  __int128 v23;
  id v24;
  _BYTE v25[12];
  int v26;
  uint64_t v27;
  void (*v28)(_QWORD *);
  _QWORD v29[5];
  _OWORD v30[2];
  char v31;
  __int128 v32;
  __int128 v33;

  v27 = a7;
  v28 = a6;
  v26 = a5;
  sub_1000249A0(a1, (uint64_t)v29, &qword_100291C98);
  v11 = v29[0];
  v12 = sub_1000080B4((uint64_t *)&unk_100291C88);
  __chkstk_darwin(v12, v13);
  v15 = &v25[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v16 = (int *)type metadata accessor for CustodianshipRecordBuilder.Components(0);
  __chkstk_darwin(v16, v17);
  v19 = &v25[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1000249A0(a1, (uint64_t)v30, &qword_100291C98);
  if ((v31 & 1) != 0)
  {
    *v15 = *(_QWORD *)&v30[0];
    swift_storeEnumTagMultiPayload(v15, v12, 1);
    swift_errorRetain(v11);
    v28(v15);
    return sub_100004934((uint64_t)v15, (uint64_t *)&unk_100291C88);
  }
  else
  {
    v32 = v30[0];
    v33 = v30[1];
    v21 = type metadata accessor for UUID(0);
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v19, a2, v21);
    sub_100024A20(a4, (uint64_t)&v19[v16[7]], (uint64_t *)&unk_10028CD00);
    *(_QWORD *)&v19[v16[5]] = a3;
    v22 = &v19[v16[6]];
    v23 = v33;
    *v22 = v32;
    v22[1] = v23;
    v19[v16[8]] = v26 & 1;
    sub_100027FE8((uint64_t)v19, (uint64_t)v15, type metadata accessor for CustodianshipRecordBuilder.Components);
    swift_storeEnumTagMultiPayload(v15, v12, 0);
    sub_1000F8C20(a1);
    v24 = a3;
    v28(v15);
    sub_100004934((uint64_t)v15, (uint64_t *)&unk_100291C88);
    return sub_100028388((uint64_t)v19, type metadata accessor for CustodianshipRecordBuilder.Components);
  }
}

uint64_t sub_1000F7CAC(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(char *, void *), uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  __n128 v35;
  os_log_type_t v36;
  uint8_t *v37;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(char *, void *);
  uint64_t v42;
  uint64_t v43;

  v40 = a3;
  v41 = a4;
  v7 = sub_1000080B4((uint64_t *)&unk_10028CCD0);
  __chkstk_darwin(v7, v8);
  v10 = (uint64_t *)((char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = type metadata accessor for CustodianshipRecords(0);
  __chkstk_darwin(v11, v12);
  v14 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for CustodianshipRecordBuilder.Components(0);
  __chkstk_darwin(v15, v16);
  v18 = (char *)&v39 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_1000080B4((uint64_t *)&unk_100291C88);
  __chkstk_darwin(v19, v20);
  v22 = (uint64_t *)((char *)&v39 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100024A20(a1, (uint64_t)v22, (uint64_t *)&unk_100291C88);
  if (swift_getEnumCaseMultiPayload(v22, v19) == 1)
  {
    v23 = *v22;
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v24 = type metadata accessor for Logger(0);
    sub_100005288(v24, (uint64_t)qword_1002A89D8);
    v25 = swift_errorRetain(v23);
    v26 = Logger.logObject.getter(v25);
    v27 = static os_log_type_t.error.getter(v26);
    if (os_log_type_enabled(v26, v27))
    {
      v39 = a5;
      v28 = (uint8_t *)swift_slowAlloc(12, -1);
      v29 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v28 = 138412290;
      v30 = _convertErrorToNSError(_:)(v23);
      v42 = v30;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, &v43);
      *v29 = v30;
      a5 = v39;
      swift_errorRelease(v23);
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "Error building custodian record: %@", v28, 0xCu);
      v31 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v29, 1, v31);
      swift_slowDealloc(v29, -1, -1);
      swift_slowDealloc(v28, -1, -1);
    }
    else
    {
      swift_errorRelease(v23);
    }

    *v10 = v23;
    swift_storeEnumTagMultiPayload(v10, v7, 1);
    swift_errorRetain(v23);
    sub_100076BF4((uint64_t)v10, v40, v41, a5);
    swift_errorRelease(v23);
    return sub_100004934((uint64_t)v10, (uint64_t *)&unk_10028CCD0);
  }
  else
  {
    sub_10003B730((uint64_t)v22, (uint64_t)v18, type metadata accessor for CustodianshipRecordBuilder.Components);
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v32 = type metadata accessor for Logger(0);
    v33 = sub_100005288(v32, (uint64_t)qword_1002A89D8);
    v34 = Logger.logObject.getter(v33);
    v36 = static os_log_type_t.default.getter(v35);
    if (os_log_type_enabled(v34, v36))
    {
      v37 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v37 = 0;
      _os_log_impl((void *)&_mh_execute_header, v34, v36, "Custodian components fetched, building record...", v37, 2u);
      swift_slowDealloc(v37, -1, -1);
    }

    sub_1000F5E4C((unint64_t)v18, (uint64_t)v14);
    sub_100027FE8((uint64_t)v14, (uint64_t)v10, type metadata accessor for CustodianshipRecords);
    swift_storeEnumTagMultiPayload(v10, v7, 0);
    sub_100076BF4((uint64_t)v10, v40, v41, a5);
    sub_100004934((uint64_t)v10, (uint64_t *)&unk_10028CCD0);
    sub_100028388((uint64_t)v14, type metadata accessor for CustodianshipRecords);
    return sub_100028388((uint64_t)v18, type metadata accessor for CustodianshipRecordBuilder.Components);
  }
}

uint64_t sub_1000F80D0(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(char *, void *), uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  void *v22;
  id v23;
  _QWORD *v24;
  uint64_t v25;
  void *v26;
  id v27;
  void *v28;
  id v29;
  id v30;
  unsigned int v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  _QWORD *v40;
  id v41;
  uint64_t v42;
  id v43;
  uint64_t v44;
  id v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  NSObject *v52;
  os_log_type_t v53;
  _BOOL4 v54;
  _QWORD *v55;
  uint8_t *v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  NSObject *v64;
  os_log_type_t v65;
  BOOL v66;
  uint8_t *v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  id v76;
  uint64_t v77;
  uint64_t v78;
  void (*v79)(char *, void *);
  _QWORD *v80;
  uint64_t v81;
  _QWORD aBlock[5];
  uint64_t v83;
  uint64_t v84;

  v78 = sub_1000080B4((uint64_t *)&unk_100291C88);
  __chkstk_darwin(v78, v10);
  v12 = (char **)((char *)&v73 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = type metadata accessor for UUID(0);
  v74 = *(_QWORD *)(v13 - 8);
  v75 = v13;
  v14 = *(_QWORD *)(v74 + 64);
  v16 = __chkstk_darwin(v13, v15);
  v17 = (char *)&v73 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16, v18);
  v73 = (char *)&v73 - v19;
  v20 = (_QWORD *)swift_allocObject(&unk_100267718, 40, 7);
  v20[2] = a3;
  v20[3] = a4;
  v79 = a4;
  v20[4] = a5;
  v21 = (_QWORD *)swift_allocObject(&unk_100267740, 40, 7);
  v21[2] = a2;
  v21[3] = sub_1000F87E0;
  v80 = v21;
  v21[4] = v20;
  v22 = *(void **)(*sub_10000732C((_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 80)) + 16);
  v81 = a3;
  swift_retain_n(a3, 2);
  swift_retain_n(a5, 2);
  swift_retain(a2);
  swift_retain(v20);
  v23 = objc_msgSend(v22, "aa_primaryAppleAccount");
  if (!v23)
  {
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v62 = type metadata accessor for Logger(0);
    v63 = sub_100005288(v62, (uint64_t)qword_1002A89D8);
    v64 = Logger.logObject.getter(v63);
    v65 = static os_log_type_t.error.getter(v64);
    v66 = os_log_type_enabled(v64, v65);
    v55 = v80;
    if (v66)
    {
      v67 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v67 = 0;
      _os_log_impl((void *)&_mh_execute_header, v64, v65, "Not logged in to AppleAccount, unable to complete setup", v67, 2u);
      swift_slowDealloc(v67, -1, -1);
    }

    type metadata accessor for AACustodianError(0);
    v69 = v68;
    v84 = -7002;
    v70 = sub_100005014((uint64_t)&_swiftEmptyArrayStorage);
    v71 = sub_100005150((unint64_t *)&qword_10028B640, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianError, (uint64_t)&unk_100218378);
    _BridgedStoredNSError.init(_:userInfo:)(aBlock, &v84, v70, v69, v71);
    *v12 = aBlock[0];
    swift_storeEnumTagMultiPayload(v12, v78, 1);
    v61 = v81;
    swift_retain(v81);
    swift_retain(a5);
    sub_1000F7CAC((uint64_t)v12, a2, v61, v79, a5);
    goto LABEL_20;
  }
  v76 = v23;
  v77 = a2;
  v24 = sub_10000732C((_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 80));
  v25 = *v24;
  v26 = *(void **)(*v24 + 16);
  v27 = objc_msgSend(v26, "aa_primaryAppleAccount");
  if (!v27
    || (v28 = v27,
        v29 = objc_msgSend(v27, "aa_altDSID"),
        v30 = objc_msgSend(v26, "aa_authKitAccountForAltDSID:", v29),
        v28,
        v29,
        !v30)
    || (v31 = objc_msgSend(*(id *)(v25 + 24), "canHaveCustodianForAccount:", v30), v30, !v31))
  {
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v50 = type metadata accessor for Logger(0);
    v51 = sub_100005288(v50, (uint64_t)qword_1002A89D8);
    v52 = Logger.logObject.getter(v51);
    v53 = static os_log_type_t.error.getter(v52);
    v54 = os_log_type_enabled(v52, v53);
    a2 = v77;
    v55 = v80;
    if (v54)
    {
      v56 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v56 = 0;
      _os_log_impl((void *)&_mh_execute_header, v52, v53, "Account is ineligible to have a custodian, unable to complete setup", v56, 2u);
      swift_slowDealloc(v56, -1, -1);
    }

    type metadata accessor for AACustodianError(0);
    v58 = v57;
    v84 = -7012;
    v59 = sub_100005014((uint64_t)&_swiftEmptyArrayStorage);
    v60 = sub_100005150((unint64_t *)&qword_10028B640, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianError, (uint64_t)&unk_100218378);
    _BridgedStoredNSError.init(_:userInfo:)(aBlock, &v84, v59, v58, v60);
    *v12 = aBlock[0];
    swift_storeEnumTagMultiPayload(v12, v78, 1);
    v61 = v81;
    swift_retain(v81);
    swift_retain(a5);
    sub_1000F7CAC((uint64_t)v12, a2, v61, v79, a5);

LABEL_20:
    swift_release(v61);
    swift_release(a5);
    sub_100004934((uint64_t)v12, (uint64_t *)&unk_100291C88);
    swift_release(a5);
    swift_release(v61);
    swift_release(v20);
    swift_release(a2);
    v49 = v55;
    return swift_release(v49);
  }
  v33 = v73;
  UUID.init()(v32);
  v35 = v74;
  v34 = v75;
  (*(void (**)(char *, char *, uint64_t))(v74 + 16))(v17, v33, v75);
  v36 = *(unsigned __int8 *)(v35 + 80);
  v37 = (v36 + 40) & ~v36;
  v38 = (v14 + v37 + 7) & 0xFFFFFFFFFFFFFFF8;
  v39 = (char *)swift_allocObject(&unk_100267768, v38 + 8, v36 | 7);
  v40 = v80;
  *((_QWORD *)v39 + 2) = sub_1000F87F0;
  *((_QWORD *)v39 + 3) = v40;
  *((_QWORD *)v39 + 4) = a1;
  (*(void (**)(char *, char *, uint64_t))(v35 + 32))(&v39[v37], v17, v34);
  v41 = v76;
  *(_QWORD *)&v39[v38] = v76;
  v42 = qword_10028AF00;
  swift_retain(v40);
  swift_retain(a1);
  v43 = v41;
  if (v42 != -1)
    swift_once(&qword_10028AF00, sub_1001FD458);
  v44 = v77;
  if (qword_10028AF10 != -1)
    swift_once(&qword_10028AF10, sub_1001FDD8C);
  v45 = sub_1001FD4C0(qword_1002A8C80, *(unint64_t *)algn_1002A8C88);
  v46 = swift_allocObject(&unk_100267790, 32, 7);
  *(_QWORD *)(v46 + 16) = sub_1000F8894;
  *(_QWORD *)(v46 + 24) = v39;
  aBlock[4] = sub_1000D0E44;
  v83 = v46;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100043E24;
  aBlock[3] = &unk_1002677A8;
  v47 = _Block_copy(aBlock);
  v48 = v83;
  swift_retain(v39);
  swift_release(v48);
  objc_msgSend(v45, "accountInfoWithCompletionHandler:", v47);
  _Block_release(v47);

  swift_release(v39);
  (*(void (**)(char *, uint64_t))(v74 + 8))(v73, v75);
  swift_release(a5);
  swift_release(v81);
  swift_release(v20);
  swift_release(v44);
  v49 = v40;
  return swift_release(v49);
}

uint64_t sub_1000F87E0(uint64_t a1)
{
  uint64_t v1;

  return sub_100076BF4(a1, *(_QWORD *)(v1 + 16), *(void (**)(char *, void *))(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_1000F87F0(uint64_t a1)
{
  uint64_t v1;

  return sub_1000F5A30(a1, *(_QWORD *)(v1 + 16), *(void (**)(_QWORD))(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_1000F87FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return swift_deallocObject(v0, v6 + 8, v5);
}

uint64_t sub_1000F8894(uint64_t a1, char a2)
{
  uint64_t v2;
  char v4;
  uint64_t v5;
  unint64_t v6;

  v4 = a2 & 1;
  v5 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  return sub_1000F6DC0(a1, v4, *(void (**)(_QWORD *))(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), v2 + v6, *(void **)(v2 + ((*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_1000F88FC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000F8920()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  v7 = (v5 + 7) & 0xFFFFFFFFFFFFF8;
  v8 = (v5 + 23) & 0xFFFFFFFFFFFFFFF8;
  swift_release(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  swift_release(*(_QWORD *)(v0 + v8 + 8));
  return swift_deallocObject(v0, v8 + 16, v6);
}

void sub_1000F89C4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v3 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = v4 + *(_QWORD *)(v3 + 64);
  sub_1000F7560(v1 + v4, *(void **)(v1 + ((v5 + 7) & 0xFFFFFFFFFFFFFFF8)), *(unsigned __int8 *)(v1 + ((v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 8), a1, *(_QWORD *)(v1 + ((v5 + 23) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v1 + ((v5 + 23) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_1000F8A38()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = *(_QWORD *)(sub_1000080B4((uint64_t *)&unk_10028CD00) - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (v5 + v7 + 8) & ~v7;
  v9 = *(_QWORD *)(v6 + 64);
  v10 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v10(v0 + v4, v1);

  v11 = v0 + v8;
  v12 = type metadata accessor for RecoveryKeys(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 48))(v0 + v8, 1, v12))
  {
    sub_10000F494(*(_QWORD *)v11, *(_QWORD *)(v11 + 8));
    sub_10000F494(*(_QWORD *)(v11 + 16), *(_QWORD *)(v11 + 24));
    v10(v11 + *(int *)(v12 + 24), v1);
  }
  v13 = (v8 + v9) & 0xFFFFFFFFFFFFFFF8;
  v14 = v13 + 24;
  swift_release(*(_QWORD *)(v13 + v0 + 16));
  return swift_deallocObject(v0, v14, v3 | v7 | 7);
}

uint64_t sub_1000F8B50(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v3 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = *(_QWORD *)(sub_1000080B4((uint64_t *)&unk_10028CD00) - 8);
  v7 = (v5 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  return sub_1000F7AA8(a1, v1 + v4, *(void **)(v1 + v5), v1 + v7, *(unsigned __int8 *)(v1 + v7 + *(_QWORD *)(v6 + 64)), *(void (**)(_QWORD *))(((v7 + *(_QWORD *)(v6 + 64)) & 0xFFFFFFFFFFFFFFF8) + v1 + 8), *(_QWORD *)(((v7 + *(_QWORD *)(v6 + 64)) & 0xFFFFFFFFFFFFFFF8) + v1 + 16));
}

uint64_t type metadata accessor for CustodianshipRecordBuilder.Components(uint64_t a1)
{
  uint64_t result;

  result = qword_100291D10;
  if (!qword_100291D10)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CustodianshipRecordBuilder.Components);
  return result;
}

uint64_t sub_1000F8C20(uint64_t a1)
{
  sub_1000F8C54(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
  return a1;
}

double sub_1000F8C54(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  double result;

  if ((a5 & 1) != 0)
  {
    swift_errorRetain(a1);
  }
  else
  {
    sub_10000F450(a1, a2);
    *(_QWORD *)&result = swift_bridgeObjectRetain(a4).n128_u64[0];
  }
  return result;
}

uint64_t *sub_1000F8C80(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t *v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int (*v23)(uint64_t *, uint64_t, uint64_t, __n128);
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  void (*v32)(uint64_t *, uint64_t *, uint64_t);

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v26 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v26 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v26);
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    v32 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v32(a1, a2, v7);
    v8 = a3[5];
    v9 = a3[6];
    v10 = *(void **)((char *)a2 + v8);
    *(uint64_t *)((char *)a1 + v8) = (uint64_t)v10;
    v11 = (uint64_t *)((char *)a1 + v9);
    v12 = (char *)a2 + v9;
    v13 = *(uint64_t *)((char *)a2 + v9);
    v14 = *(uint64_t *)((char *)a2 + v9 + 8);
    v15 = v10;
    sub_10000F450(v13, v14);
    *v11 = v13;
    v11[1] = v14;
    v16 = *((_QWORD *)v12 + 2);
    v17 = *((_QWORD *)v12 + 3);
    v11[2] = v16;
    v11[3] = v17;
    v18 = a3[7];
    v19 = (uint64_t *)((char *)a1 + v18);
    v20 = (uint64_t *)((char *)a2 + v18);
    v21 = type metadata accessor for RecoveryKeys(0);
    v22 = *(_QWORD *)(v21 - 8);
    v23 = *(unsigned int (**)(uint64_t *, uint64_t, uint64_t, __n128))(v22 + 48);
    v24 = swift_bridgeObjectRetain(v17);
    if (v23(v20, 1, v21, v24))
    {
      v25 = sub_1000080B4((uint64_t *)&unk_10028CD00);
      memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    }
    else
    {
      v27 = *v20;
      v28 = v20[1];
      sub_10000F450(*v20, v28);
      *v19 = v27;
      v19[1] = v28;
      v29 = v20[2];
      v30 = v20[3];
      sub_10000F450(v29, v30);
      v19[2] = v29;
      v19[3] = v30;
      v32((_QWORD *)((char *)v19 + *(int *)(v21 + 24)), (uint64_t *)((char *)v20 + *(int *)(v21 + 24)), v7);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
    }
    *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  }
  return a1;
}

uint64_t sub_1000F8E1C(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  void (*v9)(uint64_t, uint64_t);

  v4 = type metadata accessor for UUID(0);
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v9(a1, v4);

  v5 = (uint64_t *)(a1 + a2[6]);
  sub_10000F494(*v5, v5[1]);
  swift_bridgeObjectRelease(v5[3]);
  v6 = a1 + a2[7];
  v7 = type metadata accessor for RecoveryKeys(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7);
  if (!(_DWORD)result)
  {
    sub_10000F494(*(_QWORD *)v6, *(_QWORD *)(v6 + 8));
    sub_10000F494(*(_QWORD *)(v6 + 16), *(_QWORD *)(v6 + 24));
    return ((uint64_t (*)(uint64_t, uint64_t))v9)(v6 + *(int *)(v7 + 24), v4);
  }
  return result;
}

uint64_t sub_1000F8EF8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int (*v22)(uint64_t *, uint64_t, uint64_t, __n128);
  __n128 v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  void (*v30)(uint64_t, uint64_t, uint64_t);

  v6 = type metadata accessor for UUID(0);
  v30 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v30(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = *(void **)(a2 + v7);
  *(_QWORD *)(a1 + v7) = v9;
  v10 = (uint64_t *)(a1 + v8);
  v11 = a2 + v8;
  v12 = *(_QWORD *)(a2 + v8);
  v13 = *(_QWORD *)(a2 + v8 + 8);
  v14 = v9;
  sub_10000F450(v12, v13);
  *v10 = v12;
  v10[1] = v13;
  v15 = *(_QWORD *)(v11 + 16);
  v16 = *(_QWORD *)(v11 + 24);
  v10[2] = v15;
  v10[3] = v16;
  v17 = a3[7];
  v18 = (_QWORD *)(a1 + v17);
  v19 = (uint64_t *)(a2 + v17);
  v20 = type metadata accessor for RecoveryKeys(0);
  v21 = *(_QWORD *)(v20 - 8);
  v22 = *(unsigned int (**)(uint64_t *, uint64_t, uint64_t, __n128))(v21 + 48);
  v23 = swift_bridgeObjectRetain(v16);
  if (v22(v19, 1, v20, v23))
  {
    v24 = sub_1000080B4((uint64_t *)&unk_10028CD00);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
  }
  else
  {
    v25 = *v19;
    v26 = v19[1];
    sub_10000F450(*v19, v26);
    *v18 = v25;
    v18[1] = v26;
    v27 = v19[2];
    v28 = v19[3];
    sub_10000F450(v27, v28);
    v18[2] = v27;
    v18[3] = v28;
    v30((uint64_t)v18 + *(int *)(v20 + 24), (uint64_t)v19 + *(int *)(v20 + 24), v6);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
  }
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  return a1;
}

uint64_t sub_1000F9068(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(char *, char *, uint64_t);
  uint64_t v8;
  void *v9;
  void *v10;
  id v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t *, uint64_t, uint64_t);
  int v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v6 = type metadata accessor for UUID(0);
  v42 = *(_QWORD *)(v6 - 8);
  v43 = v6;
  v7 = *(void (**)(char *, char *, uint64_t))(v42 + 24);
  ((void (*)(uint64_t, uint64_t))v7)(a1, a2);
  v8 = a3[5];
  v9 = *(void **)(a2 + v8);
  v10 = *(void **)(a1 + v8);
  *(_QWORD *)(a1 + v8) = v9;
  v11 = v9;

  v12 = a3[6];
  v13 = (uint64_t *)(a1 + v12);
  v14 = a2 + v12;
  v15 = *(_QWORD *)(a2 + v12);
  v16 = *(_QWORD *)(a2 + v12 + 8);
  sub_10000F450(v15, v16);
  v17 = *v13;
  v18 = v13[1];
  *v13 = v15;
  v13[1] = v16;
  sub_10000F494(v17, v18);
  v13[2] = *(_QWORD *)(v14 + 16);
  v19 = *(_QWORD *)(v14 + 24);
  v20 = v13[3];
  v13[3] = v19;
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRelease(v20);
  v21 = a3[7];
  v22 = (uint64_t *)(a1 + v21);
  v23 = (uint64_t *)(a2 + v21);
  v24 = type metadata accessor for RecoveryKeys(0);
  v25 = *(_QWORD *)(v24 - 8);
  v26 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v25 + 48);
  LODWORD(v14) = v26(v22, 1, v24);
  v27 = v26(v23, 1, v24);
  if (!(_DWORD)v14)
  {
    if (!v27)
    {
      v34 = *v23;
      v35 = v23[1];
      sub_10000F450(*v23, v35);
      v36 = *v22;
      v37 = v22[1];
      *v22 = v34;
      v22[1] = v35;
      sub_10000F494(v36, v37);
      v38 = v23[2];
      v39 = v23[3];
      sub_10000F450(v38, v39);
      v40 = v22[2];
      v41 = v22[3];
      v22[2] = v38;
      v22[3] = v39;
      sub_10000F494(v40, v41);
      v7((char *)v22 + *(int *)(v24 + 24), (char *)v23 + *(int *)(v24 + 24), v43);
      goto LABEL_7;
    }
    sub_100028388((uint64_t)v22, type metadata accessor for RecoveryKeys);
    goto LABEL_6;
  }
  if (v27)
  {
LABEL_6:
    v32 = sub_1000080B4((uint64_t *)&unk_10028CD00);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    goto LABEL_7;
  }
  v28 = *v23;
  v29 = v23[1];
  sub_10000F450(*v23, v29);
  *v22 = v28;
  v22[1] = v29;
  v30 = v23[2];
  v31 = v23[3];
  sub_10000F450(v30, v31);
  v22[2] = v30;
  v22[3] = v31;
  (*(void (**)(char *, char *, uint64_t))(v42 + 16))((char *)v22 + *(int *)(v24 + 24), (char *)v23 + *(int *)(v24 + 24), v43);
  (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
LABEL_7:
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  return a1;
}

char *sub_1000F9274(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  void (*v7)(char *, char *, uint64_t);
  uint64_t v8;
  char *v9;
  char *v10;
  __int128 v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;

  v6 = type metadata accessor for UUID(0);
  v7 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v8 = a3[6];
  *(_QWORD *)&a1[a3[5]] = *(_QWORD *)&a2[a3[5]];
  v9 = &a1[v8];
  v10 = &a2[v8];
  v11 = *((_OWORD *)v10 + 1);
  *(_OWORD *)v9 = *(_OWORD *)v10;
  *((_OWORD *)v9 + 1) = v11;
  v12 = a3[7];
  v13 = &a1[v12];
  v14 = &a2[v12];
  v15 = type metadata accessor for RecoveryKeys(0);
  v16 = *(_QWORD *)(v15 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
  {
    v17 = sub_1000080B4((uint64_t *)&unk_10028CD00);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    v18 = *((_OWORD *)v14 + 1);
    *(_OWORD *)v13 = *(_OWORD *)v14;
    *((_OWORD *)v13 + 1) = v18;
    v7(&v13[*(int *)(v15 + 24)], &v14[*(int *)(v15 + 24)], v6);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  a1[a3[8]] = a2[a3[8]];
  return a1;
}

uint64_t sub_1000F9394(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  void (*v7)(char *, char *, uint64_t);
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t *, uint64_t, uint64_t);
  int v23;
  int v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v6 = type metadata accessor for UUID(0);
  v32 = *(_QWORD *)(v6 - 8);
  v33 = v6;
  v7 = *(void (**)(char *, char *, uint64_t))(v32 + 40);
  ((void (*)(uint64_t, uint64_t))v7)(a1, a2);
  v8 = a3[5];
  v9 = *(void **)(a1 + v8);
  *(_QWORD *)(a1 + v8) = *(_QWORD *)(a2 + v8);

  v10 = a3[6];
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = *(_QWORD *)(a1 + v10);
  v14 = *(_QWORD *)(a1 + v10 + 8);
  *(_OWORD *)(a1 + v10) = *(_OWORD *)(a2 + v10);
  sub_10000F494(v13, v14);
  v15 = *(_QWORD *)(v12 + 24);
  v16 = *(_QWORD *)(v11 + 24);
  *(_QWORD *)(v11 + 16) = *(_QWORD *)(v12 + 16);
  *(_QWORD *)(v11 + 24) = v15;
  swift_bridgeObjectRelease(v16);
  v17 = a3[7];
  v18 = (uint64_t *)(a1 + v17);
  v19 = (uint64_t *)(a2 + v17);
  v20 = type metadata accessor for RecoveryKeys(0);
  v21 = *(_QWORD *)(v20 - 8);
  v22 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v21 + 48);
  v23 = v22(v18, 1, v20);
  v24 = v22(v19, 1, v20);
  if (!v23)
  {
    if (!v24)
    {
      v28 = *v18;
      v29 = v18[1];
      *(_OWORD *)v18 = *(_OWORD *)v19;
      sub_10000F494(v28, v29);
      v30 = v18[2];
      v31 = v18[3];
      *((_OWORD *)v18 + 1) = *((_OWORD *)v19 + 1);
      sub_10000F494(v30, v31);
      v7((char *)v18 + *(int *)(v20 + 24), (char *)v19 + *(int *)(v20 + 24), v33);
      goto LABEL_7;
    }
    sub_100028388((uint64_t)v18, type metadata accessor for RecoveryKeys);
    goto LABEL_6;
  }
  if (v24)
  {
LABEL_6:
    v26 = sub_1000080B4((uint64_t *)&unk_10028CD00);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    goto LABEL_7;
  }
  v25 = *((_OWORD *)v19 + 1);
  *(_OWORD *)v18 = *(_OWORD *)v19;
  *((_OWORD *)v18 + 1) = v25;
  (*(void (**)(char *, char *, uint64_t))(v32 + 32))((char *)v18 + *(int *)(v20 + 24), (char *)v19 + *(int *)(v20 + 24), v33);
  (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
LABEL_7:
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  return a1;
}

uint64_t sub_1000F9548(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000F9554);
}

uint64_t sub_1000F9554(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  unint64_t v11;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v8 = sub_1000080B4((uint64_t *)&unk_10028CD00);
    v10 = a1 + *(int *)(a3 + 28);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
    return v9(v10, a2, v8);
  }
  v11 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v11 >= 0xFFFFFFFF)
    LODWORD(v11) = -1;
  return (v11 + 1);
}

uint64_t sub_1000F9600(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000F960C);
}

uint64_t sub_1000F960C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  result = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
      return result;
    }
    v10 = sub_1000080B4((uint64_t *)&unk_10028CD00);
    v12 = a1 + *(int *)(a4 + 28);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

void sub_1000F96B4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[5];

  v2 = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    v6[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v6[2] = " ";
    sub_1000F9758(319);
    if (v5 <= 0x3F)
    {
      v6[3] = *(_QWORD *)(v4 - 8) + 64;
      v6[4] = &unk_10021D210;
      swift_initStructMetadata(a1, 256, 5, v6, a1 + 16);
    }
  }
}

void sub_1000F9758(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100291D20)
  {
    v2 = type metadata accessor for RecoveryKeys(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100291D20);
  }
}

uint64_t sub_1000F97AC()
{
  uint64_t v0;

  sub_100006F58((_QWORD *)(v0 + 16));

  return swift_deallocClassInstance(v0, 72, 7);
}

uint64_t type metadata accessor for RenewCredentialsActivity()
{
  return objc_opt_self(_TtC13appleaccountd24RenewCredentialsActivity);
}

_QWORD *sub_1000F9800(void (*a1)(_QWORD *, __n128), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int64_t v10;
  _QWORD *v11;
  uint64_t *v12;
  uint64_t v13;
  __n128 v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(_QWORD *, __n128);
  uint64_t v21;
  _QWORD v22[2];
  _QWORD *v23;

  v4 = v3;
  v20 = a1;
  v21 = a2;
  v19 = type metadata accessor for SQL(0);
  v6 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19, v7);
  v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(a3 + 16);
  v11 = _swiftEmptyArrayStorage;
  if (v10)
  {
    v23 = _swiftEmptyArrayStorage;
    sub_1001D4D4C(0, v10, 0);
    v11 = v23;
    v12 = (uint64_t *)(a3 + 40);
    while (1)
    {
      v13 = *v12;
      v22[0] = *(v12 - 1);
      v22[1] = v13;
      v14 = swift_bridgeObjectRetain(v13);
      v20(v22, v14);
      if (v4)
        break;
      v4 = 0;
      swift_bridgeObjectRelease(v13);
      v23 = v11;
      v16 = v11[2];
      v15 = v11[3];
      if (v16 >= v15 >> 1)
      {
        sub_1001D4D4C(v15 > 1, v16 + 1, 1);
        v11 = v23;
      }
      v12 += 2;
      v11[2] = v16 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))((unint64_t)v11+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(_QWORD *)(v6 + 72) * v16, v9, v19);
      if (!--v10)
        return v11;
    }
    swift_release(v11);
    swift_bridgeObjectRelease(v13);
  }
  return v11;
}

uint64_t sub_1000F9974(uint64_t a1)
{
  uint64_t result;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17[2];
  uint64_t v18;

  result = Set.init(minimumCapacity:)(*(_QWORD *)(a1 + 16), &type metadata for String, &protocol witness table for String);
  v3 = 0;
  v18 = result;
  v4 = a1 + 64;
  v5 = 1 << *(_BYTE *)(a1 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(a1 + 64);
  v8 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      v9 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v10 = v9 | (v3 << 6);
      goto LABEL_5;
    }
    v14 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v14 >= v8)
      goto LABEL_23;
    v15 = *(_QWORD *)(v4 + 8 * v14);
    ++v3;
    if (!v15)
    {
      v3 = v14 + 1;
      if (v14 + 1 >= v8)
        goto LABEL_23;
      v15 = *(_QWORD *)(v4 + 8 * v3);
      if (!v15)
      {
        v3 = v14 + 2;
        if (v14 + 2 >= v8)
          goto LABEL_23;
        v15 = *(_QWORD *)(v4 + 8 * v3);
        if (!v15)
        {
          v3 = v14 + 3;
          if (v14 + 3 >= v8)
            goto LABEL_23;
          v15 = *(_QWORD *)(v4 + 8 * v3);
          if (!v15)
            break;
        }
      }
    }
LABEL_22:
    v7 = (v15 - 1) & v15;
    v10 = __clz(__rbit64(v15)) + (v3 << 6);
LABEL_5:
    v11 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v10);
    v12 = *v11;
    v13 = v11[1];
    swift_bridgeObjectRetain(v13);
    sub_1001F3A5C(v17, v12, v13);
    result = swift_bridgeObjectRelease(v17[1]);
  }
  v16 = v14 + 4;
  if (v16 >= v8)
  {
LABEL_23:
    swift_release(a1);
    return v18;
  }
  v15 = *(_QWORD *)(v4 + 8 * v16);
  if (v15)
  {
    v3 = v16;
    goto LABEL_22;
  }
  while (1)
  {
    v3 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v3 >= v8)
      goto LABEL_23;
    v15 = *(_QWORD *)(v4 + 8 * v3);
    ++v16;
    if (v15)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t CKRecord.description.getter()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  unint64_t v7;
  Swift::String v8;
  void *object;
  id v10;
  id v11;
  id v12;
  id v13;
  uint64_t v14;
  void *v15;
  void *v16;
  Swift::String v17;
  id v18;
  uint64_t v19;
  void *v20;
  void *v21;
  Swift::String v22;
  Swift::String v23;
  id v24;
  uint64_t v25;
  void *v26;
  void *v27;
  Swift::String v28;
  Swift::String v29;
  void *v30;
  id v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  void *v42;
  void *v43;
  Swift::String v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  unint64_t v50;
  Swift::String v51;
  void *v52;
  Swift::String v53;
  Swift::String v54;
  Swift::String v55;
  Swift::String v56;
  Swift::String v57;
  uint64_t countAndFlagsBits;
  Swift::String v60;
  id v61;
  uint64_t v62;
  void *v63;
  Swift::String v64;

  v1 = v0;
  v2 = type metadata accessor for SQL(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (char *)&countAndFlagsBits - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!objc_msgSend((id)objc_opt_self(AADeviceInfo), "isInternalBuild"))
    return 0x657463616465723CLL;
  v64._countAndFlagsBits = 30768;
  v64._object = (void *)0xE200000000000000;
  v63 = v0;
  v7 = sub_1000FA058();
  v8._countAndFlagsBits = String.init<A>(_:radix:uppercase:)(&v63, 16, 0, &type metadata for UInt, v7);
  object = v8._object;
  String.append(_:)(v8);
  swift_bridgeObjectRelease(object);
  v60 = v64;
  v10 = objc_msgSend(v0, "recordID");
  v11 = objc_msgSend(v10, "zoneID");

  v12 = objc_msgSend(v1, "recordID");
  v13 = objc_msgSend(v12, "recordName");

  v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
  v16 = v15;

  v64._countAndFlagsBits = v14;
  v64._object = v16;
  v17._countAndFlagsBits = 10298;
  v17._object = (void *)0xE200000000000000;
  String.append(_:)(v17);
  v18 = objc_msgSend(v11, "zoneName");
  v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
  v21 = v20;

  v22._countAndFlagsBits = v19;
  v22._object = v21;
  String.append(_:)(v22);
  swift_bridgeObjectRelease(v21);
  v23._countAndFlagsBits = 58;
  v23._object = (void *)0xE100000000000000;
  String.append(_:)(v23);
  v61 = v11;
  v24 = objc_msgSend(v11, "ownerName");
  v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
  v27 = v26;

  v28._countAndFlagsBits = v25;
  v28._object = v27;
  String.append(_:)(v28);
  swift_bridgeObjectRelease(v27);
  v29._countAndFlagsBits = 41;
  v29._object = (void *)0xE100000000000000;
  String.append(_:)(v29);
  v30 = v64._object;
  countAndFlagsBits = v64._countAndFlagsBits;
  v31 = objc_msgSend(v1, "encryptedValuesByKey");
  v32 = objc_msgSend(v31, "changedKeys");
  v33 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v32, &type metadata for String);

  v34 = sub_1000FB2CC(v33);
  swift_bridgeObjectRelease(v33);
  v35 = objc_msgSend(v31, "allKeys");
  v36 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v35, &type metadata for String);

  v64._countAndFlagsBits = v36;
  swift_bridgeObjectRetain(v36);
  sub_1000FA248(&v64._countAndFlagsBits);
  v62 = v3;
  swift_bridgeObjectRelease(v36);
  v37 = v64._countAndFlagsBits;
  v38 = objc_msgSend(v1, "recordChangeTag");
  if (v38)
  {
    v40 = v38;
    v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(v38);
    v43 = v42;

    v64._countAndFlagsBits = 0x3D676174202CLL;
    v64._object = (void *)0xE600000000000000;
    v44._countAndFlagsBits = v41;
    v44._object = v43;
    String.append(_:)(v44);
    v38 = (id)swift_bridgeObjectRelease(v43);
    v45 = v64._countAndFlagsBits;
    v46 = v64._object;
  }
  else
  {
    v45 = 0;
    v46 = (void *)0xE000000000000000;
  }
  __chkstk_darwin(v38, v39);
  *(&countAndFlagsBits - 2) = v34;
  *(&countAndFlagsBits - 1) = (uint64_t)v31;
  v48 = sub_1000F9800((void (*)(_QWORD *, __n128))sub_1000FB360, (uint64_t)(&countAndFlagsBits - 4), v37);
  swift_release(v37);
  swift_bridgeObjectRelease(v34);
  v64._countAndFlagsBits = (uint64_t)v48;
  v49 = sub_1000080B4(&qword_100291E20);
  v50 = sub_1000FB37C();
  Collection<>.joined(separator:)(8251, 0xE200000000000000, v49, v50);
  swift_bridgeObjectRelease(v48);
  v64._countAndFlagsBits = 0;
  v64._object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(34);
  v51._countAndFlagsBits = 0x726F6365524B433CLL;
  v51._object = (void *)0xEB00000000203A64;
  String.append(_:)(v51);
  v52 = v60._object;
  String.append(_:)(v60);
  swift_bridgeObjectRelease(v52);
  v53._countAndFlagsBits = 0x64726F636572203BLL;
  v53._object = (void *)0xEB000000003D6449;
  String.append(_:)(v53);
  v54._countAndFlagsBits = countAndFlagsBits;
  v54._object = v30;
  String.append(_:)(v54);
  swift_bridgeObjectRelease(v30);
  v55._countAndFlagsBits = v45;
  v55._object = v46;
  String.append(_:)(v55);
  swift_bridgeObjectRelease(v46);
  v56._countAndFlagsBits = 31520;
  v56._object = (void *)0xE200000000000000;
  String.append(_:)(v56);
  _print_unlocked<A, B>(_:_:)(v6, &v64, v2, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v57._countAndFlagsBits = 15997;
  v57._object = (void *)0xE200000000000000;
  String.append(_:)(v57);
  swift_unknownObjectRelease(v31);

  v47 = v64._countAndFlagsBits;
  (*(void (**)(char *, uint64_t))(v62 + 8))(v6, v2);
  return v47;
}

unint64_t sub_1000FA058()
{
  unint64_t result;

  result = qword_100291E18;
  if (!qword_100291E18)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for UInt, &type metadata for UInt);
    atomic_store(result, (unint64_t *)&qword_100291E18);
  }
  return result;
}

uint64_t sub_1000FA09C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  Swift::String v13;
  uint64_t v14;
  uint64_t v15;
  Swift::String v16;
  unint64_t v17;
  Swift::String v18;
  uint64_t v19;
  unint64_t v20;
  Swift::String v21;
  _QWORD v23[2];
  uint64_t v24;
  unint64_t v25;

  v23[1] = a4;
  v7 = type metadata accessor for SQLInterpolation(0);
  __chkstk_darwin(v7, v8);
  v10 = (char *)v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *a1;
  v12 = a1[1];
  if ((sub_10008EF20(v11, v12, a2) & 1) != 0)
  {
    v24 = v11;
    v25 = v12;
    swift_bridgeObjectRetain(v12);
    v13._countAndFlagsBits = 42;
    v13._object = (void *)0xE100000000000000;
    String.append(_:)(v13);
    v14 = v24;
    v15 = v25;
  }
  else
  {
    swift_bridgeObjectRetain(v12);
    v14 = v11;
    v15 = v12;
  }
  SQLInterpolation.init(literalCapacity:interpolationCount:)(3, 2);
  v16._countAndFlagsBits = 0;
  v16._object = (void *)0xE000000000000000;
  SQLInterpolation.appendLiteral(_:)(v16);
  v24 = v14;
  v25 = v15;
  v17 = sub_10006B00C();
  SQLInterpolation.appendInterpolation<A>(_:)(&v24, &type metadata for String, v17);
  swift_bridgeObjectRelease(v15);
  v18._countAndFlagsBits = 2112800;
  v18._object = (void *)0xE300000000000000;
  SQLInterpolation.appendLiteral(_:)(v18);
  swift_getObjectType(a3);
  CKRecordKeyValueSetting.subscript.getter(&v24, v11, v12);
  v19 = v24;
  if (v25)
  {
    v20 = v25;
  }
  else
  {
    v19 = 0;
    v20 = 0xE000000000000000;
  }
  v24 = v19;
  v25 = v20;
  SQLInterpolation.appendInterpolation<A>(_:)(&v24, &type metadata for String, v17);
  swift_bridgeObjectRelease(v20);
  v21._countAndFlagsBits = 0;
  v21._object = (void *)0xE000000000000000;
  SQLInterpolation.appendLiteral(_:)(v21);
  return SQL.init(stringInterpolation:)(v10);
}

Swift::Int sub_1000FA248(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  Swift::Int result;
  uint64_t v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v2 = sub_100109534(v2);
  v3 = *(_QWORD *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  result = sub_1000FA2B0(v5);
  *a1 = v2;
  return result;
}

Swift::Int sub_1000FA2B0(uint64_t *a1)
{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  Swift::Int v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  Swift::Int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  int v20;
  Swift::Int v21;
  uint64_t *v22;
  Swift::Int v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  Swift::Int v31;
  Swift::Int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  Swift::Int v36;
  _QWORD *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  Swift::Int v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  BOOL v45;
  unint64_t v46;
  unint64_t v47;
  char *v48;
  char *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  BOOL v61;
  unint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  BOOL v71;
  uint64_t v72;
  char v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  BOOL v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  char *v94;
  unint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  unint64_t v107;
  uint64_t *v108;
  uint64_t v109;
  _QWORD *v110;
  Swift::Int v111;
  Swift::Int v112;
  Swift::Int v113;
  char *__dst;

  v3 = a1[1];
  result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if ((v3 & 0x8000000000000000) == 0)
    {
      if (v3)
        return sub_1000FA998(0, v3, 1, a1);
      return result;
    }
    goto LABEL_154;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
  {
LABEL_162:
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
    __break(1u);
    return result;
  }
  v111 = result;
  v108 = a1;
  if (v3 < 2)
  {
    v8 = _swiftEmptyArrayStorage;
    __dst = (char *)&_swiftEmptyArrayStorage[4];
    if (v3 != 1)
    {
      v12 = _swiftEmptyArrayStorage[2];
      v11 = (char *)_swiftEmptyArrayStorage;
LABEL_120:
      v101 = v11;
      v110 = v8;
      if (v12 < 2)
        goto LABEL_117;
      v102 = *v108;
      while (1)
      {
        v103 = v12 - 2;
        if (v12 < 2)
          goto LABEL_149;
        if (!v102)
          goto LABEL_161;
        v100 = v101;
        v104 = *(_QWORD *)&v101[16 * v103 + 32];
        v105 = *(_QWORD *)&v101[16 * v12 + 24];
        sub_1000FAA64((char *)(v102 + 16 * v104), (char *)(v102 + 16 * *(_QWORD *)&v101[16 * v12 + 16]), v102 + 16 * v105, __dst);
        if (v1)
          goto LABEL_116;
        if (v105 < v104)
          goto LABEL_150;
        if ((swift_isUniquelyReferenced_nonNull_native(v100) & 1) == 0)
          v100 = sub_100109520((uint64_t)v100);
        if (v103 >= *((_QWORD *)v100 + 2))
          goto LABEL_151;
        v106 = &v100[16 * v103 + 32];
        *(_QWORD *)v106 = v104;
        *((_QWORD *)v106 + 1) = v105;
        v107 = *((_QWORD *)v100 + 2);
        if (v12 > v107)
          goto LABEL_152;
        memmove(&v100[16 * v12 + 16], &v100[16 * v12 + 32], 16 * (v107 - v12));
        v101 = v100;
        *((_QWORD *)v100 + 2) = v107 - 1;
        v12 = v107 - 1;
        if (v107 <= 2)
          goto LABEL_117;
      }
    }
    v110 = _swiftEmptyArrayStorage;
  }
  else
  {
    v6 = v5 >> 1;
    v7 = static Array._allocateBufferUninitialized(minimumCapacity:)(v5 >> 1, &type metadata for String);
    *(_QWORD *)(v7 + 16) = v6;
    v110 = (_QWORD *)v7;
    __dst = (char *)(v7 + 32);
  }
  v9 = 0;
  v10 = *a1;
  v109 = v10 + 8;
  v11 = (char *)_swiftEmptyArrayStorage;
  v112 = v3;
  while (1)
  {
    v13 = v9++;
    if (v9 >= v3)
      goto LABEL_46;
    v14 = (uint64_t *)(v10 + 16 * v9);
    v15 = *v14;
    v16 = v14[1];
    v17 = (_QWORD *)(v10 + 16 * v13);
    v18 = v17[1];
    if (v15 == *v17 && v16 == v18)
    {
      v21 = v13 + 2;
      if (v13 + 2 >= v3)
        goto LABEL_45;
      v20 = 0;
    }
    else
    {
      v20 = _stringCompareWithSmolCheck(_:_:expecting:)(v15, v16, *v17, v18, 1);
      v21 = v13 + 2;
      if (v13 + 2 >= v3)
        goto LABEL_36;
    }
    v22 = (uint64_t *)(v109 + 16 * v21);
    do
    {
      v24 = *(v22 - 1);
      v25 = *v22;
      v26 = (_QWORD *)(v10 + 16 * v9);
      v27 = v26[1];
      if (v24 == *v26 && v25 == v27)
      {
        if ((v20 & 1) != 0)
          goto LABEL_37;
      }
      else if (((v20 ^ _stringCompareWithSmolCheck(_:_:expecting:)(v24, v25, *v26, v27, 1)) & 1) != 0)
      {
        goto LABEL_36;
      }
      v22 += 2;
      v23 = v21 + 1;
      v9 = v21;
      v21 = v23;
    }
    while (v23 < v3);
    v21 = v23;
LABEL_36:
    v9 = v21;
    if ((v20 & 1) != 0)
    {
LABEL_37:
      if (v21 < v13)
        goto LABEL_157;
      if (v13 < v21)
      {
        v29 = 16 * v21;
        v30 = 16 * v13;
        v31 = v21;
        v32 = v13;
        do
        {
          if (v32 != --v31)
          {
            if (!v10)
              goto LABEL_160;
            v33 = v10 + v29;
            v34 = *(_QWORD *)(v10 + v30);
            v35 = *(_QWORD *)(v10 + v30 + 8);
            *(_OWORD *)(v10 + v30) = *(_OWORD *)(v10 + v29 - 16);
            *(_QWORD *)(v33 - 16) = v34;
            *(_QWORD *)(v33 - 8) = v35;
          }
          ++v32;
          v29 -= 16;
          v30 += 16;
        }
        while (v32 < v31);
      }
LABEL_45:
      v9 = v21;
    }
LABEL_46:
    if (v9 < v3)
    {
      if (__OFSUB__(v9, v13))
        goto LABEL_153;
      if (v9 - v13 < v111)
      {
        if (__OFADD__(v13, v111))
          goto LABEL_155;
        if (v13 + v111 >= v3)
          v36 = v3;
        else
          v36 = v13 + v111;
        if (v36 < v13)
          goto LABEL_156;
        if (v9 != v36)
        {
          v37 = (_QWORD *)(v10 + 16 * v9);
          do
          {
            v38 = (uint64_t *)(v10 + 16 * v9);
            v39 = *v38;
            v40 = v38[1];
            v41 = v13;
            v42 = v37;
            do
            {
              v43 = *(v42 - 2);
              v44 = *(v42 - 1);
              v45 = v39 == v43 && v40 == v44;
              if (v45 || (_stringCompareWithSmolCheck(_:_:expecting:)(v39, v40, v43, v44, 1) & 1) == 0)
                break;
              if (!v10)
                goto LABEL_158;
              v39 = *v42;
              v40 = v42[1];
              *(_OWORD *)v42 = *((_OWORD *)v42 - 1);
              *(v42 - 1) = v40;
              *(v42 - 2) = v39;
              v42 -= 2;
              ++v41;
            }
            while (v9 != v41);
            ++v9;
            v37 += 2;
          }
          while (v9 != v36);
          v9 = v36;
        }
      }
    }
    if (v9 < v13)
    {
LABEL_148:
      __break(1u);
LABEL_149:
      __break(1u);
LABEL_150:
      __break(1u);
LABEL_151:
      __break(1u);
LABEL_152:
      __break(1u);
LABEL_153:
      __break(1u);
LABEL_154:
      __break(1u);
LABEL_155:
      __break(1u);
LABEL_156:
      __break(1u);
LABEL_157:
      __break(1u);
LABEL_158:
      __break(1u);
LABEL_159:
      __break(1u);
LABEL_160:
      __break(1u);
LABEL_161:
      __break(1u);
      goto LABEL_162;
    }
    if ((swift_isUniquelyReferenced_nonNull_native(v11) & 1) == 0)
      v11 = sub_100109274(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
    v47 = *((_QWORD *)v11 + 2);
    v46 = *((_QWORD *)v11 + 3);
    v12 = v47 + 1;
    if (v47 >= v46 >> 1)
      v11 = sub_100109274((char *)(v46 > 1), v47 + 1, 1, v11);
    *((_QWORD *)v11 + 2) = v12;
    v48 = v11 + 32;
    v49 = &v11[16 * v47 + 32];
    *(_QWORD *)v49 = v13;
    *((_QWORD *)v49 + 1) = v9;
    if (v47)
      break;
    v12 = 1;
LABEL_15:
    v3 = v112;
    if (v9 >= v112)
    {
      v8 = v110;
      goto LABEL_120;
    }
  }
  v113 = v9;
  while (1)
  {
    v50 = v12 - 1;
    if (v12 >= 4)
    {
      v55 = &v48[16 * v12];
      v56 = *((_QWORD *)v55 - 8);
      v57 = *((_QWORD *)v55 - 7);
      v61 = __OFSUB__(v57, v56);
      v58 = v57 - v56;
      if (v61)
        goto LABEL_137;
      v60 = *((_QWORD *)v55 - 6);
      v59 = *((_QWORD *)v55 - 5);
      v61 = __OFSUB__(v59, v60);
      v53 = v59 - v60;
      v54 = v61;
      if (v61)
        goto LABEL_138;
      v62 = v12 - 2;
      v63 = &v48[16 * v12 - 32];
      v65 = *(_QWORD *)v63;
      v64 = *((_QWORD *)v63 + 1);
      v61 = __OFSUB__(v64, v65);
      v66 = v64 - v65;
      if (v61)
        goto LABEL_140;
      v61 = __OFADD__(v53, v66);
      v67 = v53 + v66;
      if (v61)
        goto LABEL_143;
      if (v67 >= v58)
      {
        v85 = &v48[16 * v50];
        v87 = *(_QWORD *)v85;
        v86 = *((_QWORD *)v85 + 1);
        v61 = __OFSUB__(v86, v87);
        v88 = v86 - v87;
        if (v61)
          goto LABEL_147;
        v78 = v53 < v88;
        goto LABEL_105;
      }
    }
    else
    {
      if (v12 != 3)
      {
        v79 = *((_QWORD *)v11 + 4);
        v80 = *((_QWORD *)v11 + 5);
        v61 = __OFSUB__(v80, v79);
        v72 = v80 - v79;
        v73 = v61;
        goto LABEL_99;
      }
      v52 = *((_QWORD *)v11 + 4);
      v51 = *((_QWORD *)v11 + 5);
      v61 = __OFSUB__(v51, v52);
      v53 = v51 - v52;
      v54 = v61;
    }
    if ((v54 & 1) != 0)
      goto LABEL_139;
    v62 = v12 - 2;
    v68 = &v48[16 * v12 - 32];
    v70 = *(_QWORD *)v68;
    v69 = *((_QWORD *)v68 + 1);
    v71 = __OFSUB__(v69, v70);
    v72 = v69 - v70;
    v73 = v71;
    if (v71)
      goto LABEL_142;
    v74 = &v48[16 * v50];
    v76 = *(_QWORD *)v74;
    v75 = *((_QWORD *)v74 + 1);
    v61 = __OFSUB__(v75, v76);
    v77 = v75 - v76;
    if (v61)
      goto LABEL_145;
    if (__OFADD__(v72, v77))
      goto LABEL_146;
    if (v72 + v77 >= v53)
    {
      v78 = v53 < v77;
LABEL_105:
      if (v78)
        v50 = v62;
      goto LABEL_107;
    }
LABEL_99:
    if ((v73 & 1) != 0)
      goto LABEL_141;
    v81 = &v48[16 * v50];
    v83 = *(_QWORD *)v81;
    v82 = *((_QWORD *)v81 + 1);
    v61 = __OFSUB__(v82, v83);
    v84 = v82 - v83;
    if (v61)
      goto LABEL_144;
    if (v84 < v72)
      goto LABEL_15;
LABEL_107:
    v89 = v50 - 1;
    if (v50 - 1 >= v12)
    {
      __break(1u);
LABEL_134:
      __break(1u);
LABEL_135:
      __break(1u);
LABEL_136:
      __break(1u);
LABEL_137:
      __break(1u);
LABEL_138:
      __break(1u);
LABEL_139:
      __break(1u);
LABEL_140:
      __break(1u);
LABEL_141:
      __break(1u);
LABEL_142:
      __break(1u);
LABEL_143:
      __break(1u);
LABEL_144:
      __break(1u);
LABEL_145:
      __break(1u);
LABEL_146:
      __break(1u);
LABEL_147:
      __break(1u);
      goto LABEL_148;
    }
    v90 = v10;
    if (!v10)
      goto LABEL_159;
    v91 = v11;
    v92 = &v48[16 * v89];
    v93 = *(_QWORD *)v92;
    v94 = v48;
    v95 = v50;
    v96 = &v48[16 * v50];
    v97 = *((_QWORD *)v96 + 1);
    v98 = v90;
    sub_1000FAA64((char *)(v90 + 16 * *(_QWORD *)v92), (char *)(v90 + 16 * *(_QWORD *)v96), v90 + 16 * v97, __dst);
    if (v1)
      break;
    if (v97 < v93)
      goto LABEL_134;
    if (v95 > *((_QWORD *)v91 + 2))
      goto LABEL_135;
    *(_QWORD *)v92 = v93;
    *(_QWORD *)&v94[16 * v89 + 8] = v97;
    v99 = *((_QWORD *)v91 + 2);
    if (v95 >= v99)
      goto LABEL_136;
    v11 = v91;
    v12 = v99 - 1;
    memmove(v96, v96 + 16, 16 * (v99 - 1 - v95));
    v48 = v94;
    *((_QWORD *)v91 + 2) = v99 - 1;
    v10 = v98;
    v9 = v113;
    if (v99 <= 2)
      goto LABEL_15;
  }
  v100 = v91;
LABEL_116:
  v101 = v100;
LABEL_117:
  swift_bridgeObjectRelease(v101);
  v110[2] = 0;
  return swift_bridgeObjectRelease(v110);
}

uint64_t sub_1000FA998(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;

  if (a3 != a2)
  {
    v4 = a3;
    v6 = result;
    v7 = *a4;
    v8 = *a4 + 16 * a3;
LABEL_5:
    v9 = (uint64_t *)(v7 + 16 * v4);
    result = *v9;
    v10 = v9[1];
    v11 = v6;
    v12 = (uint64_t *)v8;
    while (1)
    {
      v13 = *(v12 - 2);
      v14 = *(v12 - 1);
      v15 = result == v13 && v10 == v14;
      if (v15 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(result, v10, v13, v14, 1), (result & 1) == 0))
      {
LABEL_4:
        ++v4;
        v8 += 16;
        if (v4 == a2)
          return result;
        goto LABEL_5;
      }
      if (!v7)
        break;
      result = *v12;
      v10 = v12[1];
      *(_OWORD *)v12 = *((_OWORD *)v12 - 1);
      *(v12 - 1) = v10;
      *(v12 - 2) = result;
      v12 -= 2;
      if (v4 == ++v11)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_1000FAA64(char *__src, char *a2, unint64_t a3, char *__dst)
{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t result;
  char *v29;
  char *v30;
  char *v31;

  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = a2 - __src;
  v9 = a2 - __src + 15;
  if (a2 - __src >= 0)
    v9 = a2 - __src;
  v10 = v9 >> 4;
  v11 = a3 - (_QWORD)a2;
  v12 = a3 - (_QWORD)a2 + 15;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v12 = a3 - (_QWORD)a2;
  v13 = v12 >> 4;
  v31 = __src;
  v30 = __dst;
  if (v10 >= v12 >> 4)
  {
    if (v11 >= -15)
    {
      if (__dst != a2 || &a2[16 * v13] <= __dst)
        memmove(__dst, a2, 16 * v13);
      v19 = &v4[16 * v13];
      v29 = v19;
      v31 = v6;
      if (v7 < v6 && v11 >= 16)
      {
        v20 = (char *)(a3 - 16);
        v21 = v6;
        while (1)
        {
          v22 = v20 + 16;
          v23 = *((_QWORD *)v19 - 2);
          v24 = *((_QWORD *)v19 - 1);
          v25 = *((_QWORD *)v21 - 2);
          v26 = *((_QWORD *)v21 - 1);
          v21 -= 16;
          v27 = v23 == v25 && v24 == v26;
          if (v27 || (_stringCompareWithSmolCheck(_:_:expecting:)(v23, v24, v25, v26, 1) & 1) == 0)
          {
            v29 = v19 - 16;
            if (v22 < v19 || v20 >= v19 || v22 != v19)
              *(_OWORD *)v20 = *((_OWORD *)v19 - 1);
            v21 = v6;
            v19 -= 16;
            if (v6 <= v7)
              goto LABEL_50;
          }
          else
          {
            if (v22 != v6 || v20 >= v6)
              *(_OWORD *)v20 = *(_OWORD *)v21;
            v31 = v21;
            if (v21 <= v7)
              goto LABEL_50;
          }
          v20 -= 16;
          v6 = v21;
          if (v19 <= v4)
            goto LABEL_50;
        }
      }
      goto LABEL_50;
    }
  }
  else if (v8 >= -15)
  {
    if (__dst != __src || &__src[16 * v10] <= __dst)
      memmove(__dst, __src, 16 * v10);
    v14 = &v4[16 * v10];
    v29 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 16)
    {
      do
      {
        v15 = *((_QWORD *)v6 + 1);
        v16 = *((_QWORD *)v4 + 1);
        v17 = *(_QWORD *)v6 == *(_QWORD *)v4 && v15 == v16;
        if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)v6, v15, *(_QWORD *)v4, v16, 1) & 1) == 0)
        {
          if (v7 != v4)
            *(_OWORD *)v7 = *(_OWORD *)v4;
          v4 += 16;
          v30 = v4;
          v18 = v6;
        }
        else
        {
          v18 = v6 + 16;
          if (v7 < v6 || v7 >= v18 || v7 != v6)
            *(_OWORD *)v7 = *(_OWORD *)v6;
        }
        v7 += 16;
        if (v4 >= v14)
          break;
        v6 = v18;
      }
      while ((unint64_t)v18 < a3);
      v31 = v7;
    }
LABEL_50:
    sub_10010936C((void **)&v31, (const void **)&v30, &v29);
    return 1;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

id sub_1000FACFC()
{
  void *v0;
  Class isa;
  id v2;
  id v3;
  id v4;
  id v5;
  id v7;

  isa = Data._bridgeToObjectiveC()().super.isa;
  v7 = 0;
  v2 = objc_msgSend(v0, "initForReadingFromData:error:", isa, &v7);

  v3 = v7;
  if (v2)
  {
    v4 = v7;
  }
  else
  {
    v5 = v7;
    _convertNSErrorToError(_:)(v3);

    swift_willThrow();
  }
  return v2;
}

void sub_1000FADB8(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

id sub_1000FAE00()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  id v3;
  NSObject *v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  id v15;
  id v16;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24[14];

  if ((v1 & 0xFF000000000000) == 0)
    return 0;
  v3 = objc_allocWithZone((Class)NSKeyedUnarchiver);
  sub_10000F450(v2, v1);
  v4 = sub_1000FACFC();
  if (v0)
  {
    sub_10000F494(v2, v1);
    if (qword_10028ADB8 != -1)
      swift_once(&qword_10028ADB8, sub_100046CE4);
    v5 = type metadata accessor for Logger(0);
    sub_100005288(v5, (uint64_t)qword_1002A89A8);
    swift_errorRetain(v0);
    v6 = swift_errorRetain(v0);
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc(12, -1);
      v10 = swift_slowAlloc(32, -1);
      v23 = v0;
      v24[0] = v10;
      *(_DWORD *)v9 = 136315138;
      swift_errorRetain(v0);
      v11 = sub_1000080B4(&qword_10028E850);
      v12 = String.init<A>(describing:)(&v23, v11);
      v14 = v13;
      v23 = sub_1001DEF4C(v12, v13, v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, v24);
      swift_bridgeObjectRelease(v14);
      swift_errorRelease(v0);
      swift_errorRelease(v0);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Unable to create unarchiver: %s", v9, 0xCu);
      swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v10, -1, -1);
      swift_slowDealloc(v9, -1, -1);

      swift_errorRelease(v0);
      return 0;
    }
    swift_errorRelease(v0);
    swift_errorRelease(v0);
    swift_errorRelease(v0);
LABEL_10:

    return 0;
  }
  v7 = v4;
  sub_10000F494(v2, v1);
  v15 = objc_msgSend(objc_allocWithZone((Class)CKRecord), "initWithCoder:", v7);
  if (!v15)
  {
    if (qword_10028ADB8 != -1)
      swift_once(&qword_10028ADB8, sub_100046CE4);
    v18 = type metadata accessor for Logger(0);
    v19 = sub_100005288(v18, (uint64_t)qword_1002A89A8);
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v22 = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Unable to extract CKRecord from cloudKitMetadata", v22, 2u);
      swift_slowDealloc(v22, -1, -1);

      return 0;
    }

    goto LABEL_10;
  }
  v16 = v15;

  return v16;
}

uint64_t sub_1000FB118(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t, uint64_t);
  void (*v19)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;

  v2 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v2 - 8);
  v5 = __chkstk_darwin(v2, v4);
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5, v8);
  v10 = (char *)&v21 - v9;
  v11 = sub_1000080B4((uint64_t *)&unk_1002904F0);
  __chkstk_darwin(v11, v12);
  v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *(_QWORD *)(a1 + 16);
  v16 = sub_1000FB3C8();
  v22 = Set.init(minimumCapacity:)(v15, v2, v16);
  if (v15)
  {
    v17 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v21 = *(_QWORD *)(v3 + 72);
    v18 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    while (1)
    {
      v18(v14, v17, v2);
      v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
      v19(v14, 0, 1, v2);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v14, 1, v2) == 1)
        break;
      (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v7, v14, v2);
      sub_1001F3C08((uint64_t)v10, v7);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v10, v2);
      v17 += v21;
      if (!--v15)
        goto LABEL_7;
    }
  }
  else
  {
    v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
LABEL_7:
    v19(v14, 1, 1, v2);
  }
  return v22;
}

uint64_t sub_1000FB2CC(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7[2];
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 16);
  result = Set.init(minimumCapacity:)(v2, &type metadata for String, &protocol witness table for String);
  v8 = result;
  if (v2)
  {
    v4 = (uint64_t *)(a1 + 40);
    do
    {
      v5 = *(v4 - 1);
      v6 = *v4;
      swift_bridgeObjectRetain(*v4);
      sub_1001F3A5C(v7, v5, v6);
      swift_bridgeObjectRelease(v7[1]);
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

uint64_t sub_1000FB360@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1000FA09C(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

unint64_t sub_1000FB37C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100291E28;
  if (!qword_100291E28)
  {
    v1 = sub_10000D908(&qword_100291E20);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_100291E28);
  }
  return result;
}

unint64_t sub_1000FB3C8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10028CC90;
  if (!qword_10028CC90)
  {
    v1 = type metadata accessor for UUID(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for UUID, v1);
    atomic_store(result, (unint64_t *)&qword_10028CC90);
  }
  return result;
}

uint64_t sub_1000FB410(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t), uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t Strong;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v10 = sub_1000080B4(&qword_10028C450);
  __chkstk_darwin(v10, v11);
  v13 = (uint64_t *)((char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100027F5C(a1, (uint64_t)v13);
  if (swift_getEnumCaseMultiPayload(v13, v10) == 1)
  {
    v14 = *v13;
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v15 = type metadata accessor for Logger(0);
    sub_100005288(v15, (uint64_t)qword_1002A89D8);
    v16 = swift_errorRetain(v14);
    v17 = Logger.logObject.getter(v16);
    v18 = static os_log_type_t.error.getter(v17);
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc(12, -1);
      v20 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v19 = 138412290;
      v21 = _convertErrorToNSError(_:)(v14);
      v28 = v21;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29);
      *v20 = v21;
      swift_errorRelease(v14);
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Failed to replace record: %@", v19, 0xCu);
      v22 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v20, 1, v22);
      swift_slowDealloc(v20, -1, -1);
      swift_slowDealloc(v19, -1, -1);
    }
    else
    {
      swift_errorRelease(v14);
    }

    swift_errorRetain(v14);
    a4(v14);
    swift_errorRelease(v14);
    return swift_errorRelease(v14);
  }
  else
  {
    v23 = a2 + 16;
    swift_beginAccess(v23, &v28, 0, 0);
    Strong = swift_weakLoadStrong(v23);
    if (Strong)
    {
      swift_release(Strong);
      v25 = swift_allocObject(&unk_100267AB0, 32, 7);
      *(_QWORD *)(v25 + 16) = a4;
      *(_QWORD *)(v25 + 24) = a5;
      swift_retain(a5);
      sub_1001813B0(a3, (uint64_t)sub_1000FF11C, v25);
      swift_release(v25);
    }
    return sub_10006BDD4((uint64_t)v13);
  }
}

id sub_1000FB6A0()
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)NSOperationQueue), "init");
  qword_100291E30 = (uint64_t)result;
  return result;
}

void sub_1000FB6D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  id v7;

  v1 = v0;
  if (qword_10028AE00 != -1)
    swift_once(&qword_10028AE00, sub_100046E2C);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_100005288(v2, (uint64_t)qword_1002A8A80);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Custodian manatee migrator listening for CKAccountChanged", v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }

  v7 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  objc_msgSend(v7, "addObserver:selector:name:object:", v1, "manateeStatusChanged", CKAccountChangedNotification, 0);

}

void sub_1000FB7F8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  _QWORD *v6;
  objc_class *v7;
  _BYTE *v8;
  _QWORD *v9;
  id v10;
  objc_super v11;

  v5 = swift_allocObject(&unk_100267858, 24, 7);
  swift_weakInit(v5 + 16, v2);
  v6 = (_QWORD *)swift_allocObject(&unk_100267B50, 40, 7);
  v6[2] = v5;
  v6[3] = a1;
  v6[4] = a2;
  v7 = (objc_class *)type metadata accessor for AsyncOperation();
  v8 = objc_allocWithZone(v7);
  v8[OBJC_IVAR____TtC13appleaccountd14AsyncOperation_state] = 0;
  v9 = &v8[OBJC_IVAR____TtC13appleaccountd14AsyncOperation_workBlock];
  *v9 = sub_1000FF18C;
  v9[1] = v6;
  v11.receiver = v8;
  v11.super_class = v7;
  swift_retain(a2);
  v10 = objc_msgSendSuper2(&v11, "init");
  if (qword_10028AE80 != -1)
    swift_once(&qword_10028AE80, sub_1000FB6A0);
  objc_msgSend((id)qword_100291E30, "addOperation:", v10, v11.receiver, v11.super_class);

}

uint64_t sub_1000FB908(void (*a1)(uint64_t), uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD), uint64_t a5)
{
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  _BYTE v12[24];

  v9 = a3 + 16;
  swift_beginAccess(a3 + 16, v12, 0, 0);
  result = swift_weakLoadStrong(v9);
  if (result)
  {
    v11 = result;
    swift_retain(a5);
    swift_retain(a2);
    sub_1000FD8C8(v11, a4, a5, a1, a2);
    swift_release(v11);
    swift_release(a5);
    return swift_release(a2);
  }
  return result;
}

uint64_t sub_1000FB9B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  void *v7;
  char v8;
  _BYTE v10[24];

  if (*(uint64_t *)(a2 + OBJC_IVAR____TtC13appleaccountd24CustodianManateeMigrator_numOfRecordsMigrated) > 0)
  {
    if (!a1)
    {
      v7 = 0;
      v8 = 1;
LABEL_6:
      swift_beginAccess(a2 + OBJC_IVAR____TtC13appleaccountd24CustodianManateeMigrator_migrateErrors, v10, 0, 0);
      sub_1001FEAFC(v8, v7);

      return a4(a1);
    }
LABEL_5:
    v7 = (void *)_convertErrorToNSError(_:)(a1);
    v8 = 0;
    goto LABEL_6;
  }
  if (a1)
    goto LABEL_5;
  return a4(a1);
}

void sub_1000FBA88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  _BOOL4 v22;
  dispatch_group_t v23;
  uint64_t v24;
  uint8_t *v25;
  uint64_t Strong;
  uint64_t v27;
  uint64_t v28;
  os_unfair_lock_s *v29;
  char **v30;
  char *v31;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  BOOL v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint8_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  NSObject *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  NSObject *v58;
  uint64_t v59;
  char *v60;
  void *v61;
  void *v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  dispatch_group_t v81;
  _QWORD *v82;
  _QWORD aBlock[5];
  uint64_t v84;
  _BYTE v85[32];

  v78 = a1;
  v79 = type metadata accessor for DispatchWorkItemFlags(0);
  v77 = *(_QWORD *)(v79 - 8);
  __chkstk_darwin(v79, v5);
  v7 = (char *)&v69 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v12 = (char *)&v69 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DispatchQoS.QoSClass(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13, v15);
  v17 = (char *)&v69 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v80 = a3 + 16;
  v81 = dispatch_group_create();
  if (a2)
  {
    swift_errorRetain(a2);
    if (qword_10028AE00 != -1)
      swift_once(&qword_10028AE00, sub_100046E2C);
    v18 = type metadata accessor for Logger(0);
    v19 = sub_100005288(v18, (uint64_t)qword_1002A8A80);
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.error.getter(v20);
    v22 = os_log_type_enabled(v20, v21);
    v24 = v80;
    v23 = v81;
    if (v22)
    {
      v25 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Couldn't fetch custodianship records for manatee migration.", v25, 2u);
      swift_slowDealloc(v25, -1, -1);
    }

    swift_beginAccess(v24, aBlock, 0, 0);
    Strong = swift_weakLoadStrong(v24);
    if (Strong)
    {
      v27 = Strong;
      v28 = OBJC_IVAR____TtC13appleaccountd24CustodianManateeMigrator_reportResultLock;
      v29 = *(os_unfair_lock_s **)(Strong + OBJC_IVAR____TtC13appleaccountd24CustodianManateeMigrator_reportResultLock);
      swift_errorRetain(a2);
      os_unfair_lock_lock(v29);
      v30 = (char **)(v27 + OBJC_IVAR____TtC13appleaccountd24CustodianManateeMigrator_migrateErrors);
      swift_beginAccess(v27 + OBJC_IVAR____TtC13appleaccountd24CustodianManateeMigrator_migrateErrors, v85, 33, 0);
      v31 = *v30;
      swift_errorRetain(a2);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v31);
      *v30 = v31;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v31 = sub_10013428C(0, *((_QWORD *)v31 + 2) + 1, 1, v31);
        *v30 = v31;
      }
      v34 = *((_QWORD *)v31 + 2);
      v33 = *((_QWORD *)v31 + 3);
      if (v34 >= v33 >> 1)
      {
        v31 = sub_10013428C((char *)(v33 > 1), v34 + 1, 1, v31);
        *v30 = v31;
      }
      *((_QWORD *)v31 + 2) = v34 + 1;
      *(_QWORD *)&v31[8 * v34 + 32] = a2;
      swift_endAccess(v85);
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v27 + v28));
      swift_errorRelease(a2);
      swift_release(v27);
    }
    swift_beginAccess(v24, v85, 0, 0);
    v35 = swift_weakLoadStrong(v24);
    if (v35)
    {
      v36 = v35;
      v37 = *(id *)(v35 + OBJC_IVAR____TtC13appleaccountd24CustodianManateeMigrator_dispatchGroup);
      swift_release(v36);
      dispatch_group_leave(v37);
      swift_errorRelease(a2);

    }
    else
    {
      swift_errorRelease(a2);
    }

  }
  else
  {
    v71 = v17;
    v72 = v14;
    v70 = v13;
    v38 = v79;
    v73 = v12;
    v74 = v9;
    if (qword_10028AE00 != -1)
      swift_once(&qword_10028AE00, sub_100046E2C);
    v75 = v8;
    v76 = v7;
    v39 = type metadata accessor for Logger(0);
    v40 = sub_100005288(v39, (uint64_t)qword_1002A8A80);
    v41 = Logger.logObject.getter(v40);
    v42 = static os_log_type_t.debug.getter(v41);
    v43 = os_log_type_enabled(v41, v42);
    v44 = v73;
    v45 = a3;
    v46 = v80;
    if (v43)
    {
      v47 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v47 = 0;
      _os_log_impl((void *)&_mh_execute_header, v41, v42, "Starting migrating custodianship records to Manatee.", v47, 2u);
      swift_slowDealloc(v47, -1, -1);
    }

    v48 = v78;
    v49 = *(_QWORD *)(v78 + 16);
    v50 = v38;
    v51 = v70;
    v52 = v81;
    if (v49)
    {
      v53 = *(_QWORD *)(type metadata accessor for CustodianRecord(0) - 8);
      v54 = v48 + ((*(unsigned __int8 *)(v53 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v53 + 80));
      swift_bridgeObjectRetain(v48);
      swift_beginAccess(v46, v85, 0, 0);
      v55 = *(_QWORD *)(v53 + 72);
      do
      {
        dispatch_group_enter(v52);
        v56 = swift_weakLoadStrong(v46);
        if (v56)
        {
          v57 = v56;
          v58 = v52;
          sub_1000FE358(v54, v57, v58);
          swift_release(v57);

        }
        v54 += v55;
        --v49;
      }
      while (v49);
      swift_bridgeObjectRelease(v78);
      v50 = v79;
    }
    sub_100007764();
    v60 = v71;
    v59 = v72;
    (*(void (**)(char *, _QWORD, uint64_t))(v72 + 104))(v71, enum case for DispatchQoS.QoSClass.default(_:), v51);
    v61 = (void *)static OS_dispatch_queue.global(qos:)(v60);
    (*(void (**)(char *, uint64_t))(v59 + 8))(v60, v51);
    aBlock[4] = sub_1000FF124;
    v84 = v45;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1000051D0;
    aBlock[3] = &unk_100267AC8;
    v62 = _Block_copy(aBlock);
    v63 = swift_retain(v45);
    static DispatchQoS.unspecified.getter(v63);
    v82 = _swiftEmptyArrayStorage;
    v64 = v44;
    v65 = sub_100005150((unint64_t *)&qword_10028CD20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v66 = sub_1000080B4((uint64_t *)&unk_100295A00);
    v67 = sub_100008628();
    v68 = v76;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v82, v66, v67, v50, v65);
    OS_dispatch_group.notify(qos:flags:queue:execute:)(v64, v68, v61, v62);

    _Block_release(v62);
    (*(void (**)(char *, uint64_t))(v77 + 8))(v68, v50);
    (*(void (**)(char *, uint64_t))(v74 + 8))(v64, v75);
    swift_release(v84);
  }
}

void sub_1000FC094(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  _BOOL4 v23;
  dispatch_group_t v24;
  uint8_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  BOOL v34;
  char *v35;
  uint64_t v36;
  NSObject *v37;
  uint8_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  NSObject *v47;
  uint64_t v48;
  uint64_t Strong;
  uint64_t v50;
  uint64_t v51;
  os_unfair_lock_s *v52;
  char **v53;
  char *v54;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  NSObject *v61;
  NSObject *v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  void *v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  dispatch_group_t v84;
  uint64_t v85;
  _QWORD *v86;
  void **aBlock;
  _QWORD v88[4];
  uint64_t v89;
  _BYTE v90[32];

  v81 = a1;
  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v82 = *(_QWORD *)(v5 - 8);
  v83 = v5;
  __chkstk_darwin(v5, v6);
  v8 = (char *)&v73 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  v13 = (char *)&v73 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for DispatchQoS.QoSClass(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14, v16);
  v18 = (char *)&v73 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v85 = a3 + 16;
  v84 = dispatch_group_create();
  if (a2)
  {
    swift_errorRetain(a2);
    if (qword_10028AE00 != -1)
      swift_once(&qword_10028AE00, sub_100046E2C);
    v19 = type metadata accessor for Logger(0);
    sub_100005288(v19, (uint64_t)qword_1002A8A80);
    v20 = swift_errorRetain(a2);
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.error.getter(v21);
    v23 = os_log_type_enabled(v21, v22);
    v24 = v84;
    if (v23)
    {
      v25 = (uint8_t *)swift_slowAlloc(12, -1);
      v26 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v25 = 138412290;
      v27 = _convertErrorToNSError(_:)(a2);
      aBlock = (void **)v27;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v88);
      *v26 = v27;
      swift_errorRelease(a2);
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Couldn't fetch custodianship info records for manatee migration: %@", v25, 0xCu);
      v28 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v26, 1, v28);
      swift_slowDealloc(v26, -1, -1);
      swift_slowDealloc(v25, -1, -1);
    }
    else
    {
      swift_errorRelease(a2);
    }

    v48 = v85;
    swift_beginAccess(v85, &aBlock, 0, 0);
    Strong = swift_weakLoadStrong(v48);
    if (Strong)
    {
      v50 = Strong;
      v51 = OBJC_IVAR____TtC13appleaccountd24CustodianManateeMigrator_reportResultLock;
      v52 = *(os_unfair_lock_s **)(Strong + OBJC_IVAR____TtC13appleaccountd24CustodianManateeMigrator_reportResultLock);
      swift_errorRetain(a2);
      os_unfair_lock_lock(v52);
      v53 = (char **)(v50 + OBJC_IVAR____TtC13appleaccountd24CustodianManateeMigrator_migrateErrors);
      swift_beginAccess(v50 + OBJC_IVAR____TtC13appleaccountd24CustodianManateeMigrator_migrateErrors, v90, 33, 0);
      v54 = *v53;
      swift_errorRetain(a2);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v54);
      *v53 = v54;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v54 = sub_10013428C(0, *((_QWORD *)v54 + 2) + 1, 1, v54);
        *v53 = v54;
      }
      v57 = *((_QWORD *)v54 + 2);
      v56 = *((_QWORD *)v54 + 3);
      if (v57 >= v56 >> 1)
      {
        v54 = sub_10013428C((char *)(v56 > 1), v57 + 1, 1, v54);
        *v53 = v54;
      }
      *((_QWORD *)v54 + 2) = v57 + 1;
      *(_QWORD *)&v54[8 * v57 + 32] = a2;
      swift_endAccess(v90);
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v50 + v51));
      swift_errorRelease(a2);
      swift_release(v50);
    }
    v58 = v85;
    swift_beginAccess(v85, v90, 0, 0);
    v59 = swift_weakLoadStrong(v58);
    if (v59)
    {
      v60 = v59;
      v61 = *(id *)(v59 + OBJC_IVAR____TtC13appleaccountd24CustodianManateeMigrator_dispatchGroup);
      swift_release(v60);
      dispatch_group_leave(v61);
      swift_errorRelease(a2);

    }
    else
    {
      swift_errorRelease(a2);
    }

  }
  else
  {
    v75 = v18;
    v76 = v15;
    v74 = v14;
    v29 = v83;
    v77 = v13;
    v78 = v10;
    if (qword_10028AE00 != -1)
      swift_once(&qword_10028AE00, sub_100046E2C);
    v79 = v9;
    v80 = v8;
    v30 = type metadata accessor for Logger(0);
    v31 = sub_100005288(v30, (uint64_t)qword_1002A8A80);
    v32 = Logger.logObject.getter(v31);
    v33 = static os_log_type_t.info.getter();
    v34 = os_log_type_enabled(v32, v33);
    v35 = v77;
    v36 = a3;
    v37 = v84;
    if (v34)
    {
      v38 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v38 = 0;
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "Starting migrating custodianship info records to Manatee.", v38, 2u);
      swift_slowDealloc(v38, -1, -1);
    }

    v39 = v81;
    v40 = *(_QWORD *)(v81 + 16);
    v41 = v29;
    if (v40)
    {
      v42 = *(_QWORD *)(type metadata accessor for CustodianshipInfoRecord(0) - 8);
      v43 = v39 + ((*(unsigned __int8 *)(v42 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v42 + 80));
      swift_bridgeObjectRetain(v39);
      swift_beginAccess(v85, v90, 0, 0);
      v44 = *(_QWORD *)(v42 + 72);
      do
      {
        dispatch_group_enter(v37);
        v45 = swift_weakLoadStrong(v85);
        if (v45)
        {
          v46 = v45;
          v47 = v37;
          sub_1000FE858(v43, v46, v47);
          swift_release(v46);

        }
        v43 += v44;
        --v40;
      }
      while (v40);
      swift_bridgeObjectRelease(v39);
      v41 = v83;
    }
    sub_100007764();
    v62 = v37;
    v64 = v75;
    v63 = v76;
    v65 = v74;
    (*(void (**)(char *, _QWORD, uint64_t))(v76 + 104))(v75, enum case for DispatchQoS.QoSClass.default(_:), v74);
    v66 = (void *)static OS_dispatch_queue.global(qos:)(v64);
    (*(void (**)(char *, uint64_t))(v63 + 8))(v64, v65);
    v88[3] = sub_1000FEE84;
    v89 = v36;
    aBlock = _NSConcreteStackBlock;
    v88[0] = 1107296256;
    v88[1] = sub_1000051D0;
    v88[2] = &unk_1002679D8;
    v67 = _Block_copy(&aBlock);
    v68 = swift_retain(v36);
    static DispatchQoS.unspecified.getter(v68);
    v86 = _swiftEmptyArrayStorage;
    v69 = sub_100005150((unint64_t *)&qword_10028CD20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v70 = sub_1000080B4((uint64_t *)&unk_100295A00);
    v71 = sub_100008628();
    v72 = v80;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v86, v70, v71, v41, v69);
    OS_dispatch_group.notify(qos:flags:queue:execute:)(v35, v72, v66, v67);

    _Block_release(v67);
    (*(void (**)(char *, uint64_t))(v82 + 8))(v72, v41);
    (*(void (**)(char *, uint64_t))(v78 + 8))(v35, v79);
    swift_release(v89);
  }
}

void sub_1000FC738(uint64_t a1, const char *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t Strong;
  uint64_t v10;
  NSObject *v11;
  _BYTE v12[24];

  v3 = a1 + 16;
  if (qword_10028AE00 != -1)
    swift_once(&qword_10028AE00, sub_100046E2C);
  v4 = type metadata accessor for Logger(0);
  v5 = sub_100005288(v4, (uint64_t)qword_1002A8A80);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, a2, v8, 2u);
    swift_slowDealloc(v8, -1, -1);
  }

  swift_beginAccess(v3, v12, 0, 0);
  Strong = swift_weakLoadStrong(v3);
  if (Strong)
  {
    v10 = Strong;
    v11 = objc_retain(*(id *)(Strong
                                        + OBJC_IVAR____TtC13appleaccountd24CustodianManateeMigrator_dispatchGroup));
    swift_release(v10);
    dispatch_group_leave(v11);

  }
}

uint64_t sub_1000FC864(void (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v13[24];

  if (qword_10028AE00 != -1)
    swift_once(&qword_10028AE00, sub_100046E2C);
  v5 = type metadata accessor for Logger(0);
  v6 = sub_100005288(v5, (uint64_t)qword_1002A8A80);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Custodian + CustodianshipInfo migration complete.", v9, 2u);
    swift_slowDealloc(v9, -1, -1);
  }

  v10 = a3 + OBJC_IVAR____TtC13appleaccountd24CustodianManateeMigrator_migrateErrors;
  swift_beginAccess(a3 + OBJC_IVAR____TtC13appleaccountd24CustodianManateeMigrator_migrateErrors, v13, 0, 0);
  if (*(_QWORD *)(*(_QWORD *)v10 + 16))
  {
    v11 = *(_QWORD *)(*(_QWORD *)v10 + 32);
    swift_errorRetain(v11);
  }
  else
  {
    v11 = 0;
  }
  a1(v11);
  return swift_errorRelease(v11);
}

uint64_t sub_1000FC9A0()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;

  sub_100006F58(v0 + 2);
  sub_100006F58(v0 + 7);
  v1 = (char *)v0 + OBJC_IVAR____TtC13appleaccountd24CustodianManateeMigrator__accountStore;
  v2 = sub_1000080B4(&qword_10028FA50);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  v3 = (char *)v0 + OBJC_IVAR____TtC13appleaccountd24CustodianManateeMigrator__keyRepair;
  v4 = sub_1000080B4(&qword_10028E840);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);

  swift_bridgeObjectRelease(*(_QWORD *)((char *)v0
                                      + OBJC_IVAR____TtC13appleaccountd24CustodianManateeMigrator_migrateErrors));
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

uint64_t sub_1000FCA50()
{
  return type metadata accessor for CustodianManateeMigrator(0);
}

uint64_t type metadata accessor for CustodianManateeMigrator(uint64_t a1)
{
  uint64_t result;

  result = qword_100291E90;
  if (!qword_100291E90)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CustodianManateeMigrator);
  return result;
}

void sub_1000FCA94(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[8];

  v6[0] = "(";
  v6[1] = "(";
  sub_100017464(319, (unint64_t *)&qword_100293810, &qword_10028C860);
  if (v3 <= 0x3F)
  {
    v6[2] = *(_QWORD *)(v2 - 8) + 64;
    sub_100017464(319, &qword_10028E2B8, &qword_10028E2C0);
    if (v5 <= 0x3F)
    {
      v6[3] = *(_QWORD *)(v4 - 8) + 64;
      v6[4] = (char *)&value witness table for Builtin.UnknownObject + 64;
      v6[5] = (char *)&value witness table for Builtin.RawPointer + 64;
      v6[6] = (char *)&value witness table for Builtin.Int64 + 64;
      v6[7] = (char *)&value witness table for Builtin.BridgeObject + 64;
      swift_updateClassMetadata2(a1, 256, 8, v6, a1 + 80);
    }
  }
}

void sub_1000FCB7C(uint64_t a1, uint64_t a2)
{
  sub_1000FB7F8(a1, a2);
}

void sub_1000FCB9C(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t Strong;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  os_unfair_lock_s *v25;
  char **v26;
  char *v27;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33[3];

  v4 = a2 + 16;
  if (!a1)
  {
    swift_beginAccess(v4, v33, 0, 0);
    Strong = swift_weakLoadStrong(v4);
    if (Strong)
    {
      v17 = Strong;
      v18 = OBJC_IVAR____TtC13appleaccountd24CustodianManateeMigrator_reportResultLock;
      os_unfair_lock_lock(*(os_unfair_lock_t *)(Strong
                                              + OBJC_IVAR____TtC13appleaccountd24CustodianManateeMigrator_reportResultLock));
      v19 = *(_QWORD *)(v17 + OBJC_IVAR____TtC13appleaccountd24CustodianManateeMigrator_numOfRecordsMigrated);
      v20 = __OFADD__(v19, 1);
      v21 = v19 + 1;
      if (v20)
      {
        __break(1u);
        return;
      }
      *(_QWORD *)(v17 + OBJC_IVAR____TtC13appleaccountd24CustodianManateeMigrator_numOfRecordsMigrated) = v21;
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v17 + v18));
      swift_release(v17);
    }
    a3(0);
    return;
  }
  swift_errorRetain(a1);
  if (qword_10028AE00 != -1)
    swift_once(&qword_10028AE00, sub_100046E2C);
  v6 = type metadata accessor for Logger(0);
  sub_100005288(v6, (uint64_t)qword_1002A8A80);
  swift_errorRetain(a1);
  v7 = swift_errorRetain(a1);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.error.getter(v8);
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(12, -1);
    v11 = swift_slowAlloc(32, -1);
    v33[0] = v11;
    v31 = a1;
    *(_DWORD *)v10 = 136315138;
    swift_errorRetain(a1);
    v12 = sub_1000080B4(&qword_10028E850);
    v13 = String.init<A>(describing:)(&v31, v12);
    v15 = v14;
    v31 = sub_1001DEF4C(v13, v14, v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32);
    swift_bridgeObjectRelease(v15);
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Error migrating custodianRecord : %s", v10, 0xCu);
    swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);
  }
  else
  {
    swift_errorRelease(a1);
    swift_errorRelease(a1);
  }

  swift_beginAccess(v4, v33, 0, 0);
  v22 = swift_weakLoadStrong(v4);
  if (v22)
  {
    v23 = v22;
    v24 = OBJC_IVAR____TtC13appleaccountd24CustodianManateeMigrator_reportResultLock;
    v25 = *(os_unfair_lock_s **)(v22 + OBJC_IVAR____TtC13appleaccountd24CustodianManateeMigrator_reportResultLock);
    swift_errorRetain(a1);
    os_unfair_lock_lock(v25);
    v26 = (char **)(v23 + OBJC_IVAR____TtC13appleaccountd24CustodianManateeMigrator_migrateErrors);
    swift_beginAccess(v23 + OBJC_IVAR____TtC13appleaccountd24CustodianManateeMigrator_migrateErrors, &v31, 33, 0);
    v27 = *v26;
    swift_errorRetain(a1);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v27);
    *v26 = v27;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v27 = sub_10013428C(0, *((_QWORD *)v27 + 2) + 1, 1, v27);
      *v26 = v27;
    }
    v30 = *((_QWORD *)v27 + 2);
    v29 = *((_QWORD *)v27 + 3);
    if (v30 >= v29 >> 1)
    {
      v27 = sub_10013428C((char *)(v29 > 1), v30 + 1, 1, v27);
      *v26 = v27;
    }
    *((_QWORD *)v27 + 2) = v30 + 1;
    *(_QWORD *)&v27[8 * v30 + 32] = a1;
    swift_endAccess(&v31);
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v23 + v24));
    swift_errorRelease(a1);
    swift_release(v23);
  }
  swift_errorRetain(a1);
  a3(a1);
  swift_errorRelease(a1);
  swift_errorRelease(a1);
}

uint64_t sub_1000FCF10(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD), uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t (*v29)(_QWORD);
  uint64_t v30;
  uint64_t v31;

  v8 = type metadata accessor for CustodianshipInfoRecord(0);
  __chkstk_darwin(v8, v9);
  v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    swift_errorRetain(a1);
    if (qword_10028AE00 != -1)
      swift_once(&qword_10028AE00, sub_100046E2C);
    v12 = type metadata accessor for Logger(0);
    sub_100005288(v12, (uint64_t)qword_1002A8A80);
    sub_100027FE8(a2, (uint64_t)v11, type metadata accessor for CustodianshipInfoRecord);
    swift_errorRetain(a1);
    v13 = swift_errorRetain(a1);
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.error.getter(v14);
    if (os_log_type_enabled(v14, v15))
    {
      v16 = swift_slowAlloc(22, -1);
      v28 = a4;
      v17 = v16;
      v18 = (uint64_t *)swift_slowAlloc(8, -1);
      v19 = swift_slowAlloc(32, -1);
      v31 = v19;
      *(_DWORD *)v17 = 136315394;
      v29 = a3;
      v20 = type metadata accessor for UUID(0);
      v21 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v22 = dispatch thunk of CustomStringConvertible.description.getter(v20, v21);
      v24 = v23;
      v30 = sub_1001DEF4C(v22, v23, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31);
      swift_bridgeObjectRelease(v24);
      sub_100028388((uint64_t)v11, type metadata accessor for CustodianshipInfoRecord);
      *(_WORD *)(v17 + 12) = 2112;
      v25 = _convertErrorToNSError(_:)(a1);
      v30 = v25;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31);
      *v18 = v25;
      a3 = v29;
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Error migrating CustodianshipInfoRecord for custodianID - %s: %@", (uint8_t *)v17, 0x16u);
      v26 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v18, 1, v26);
      swift_slowDealloc(v18, -1, -1);
      swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v19, -1, -1);
      swift_slowDealloc(v17, -1, -1);

      swift_errorRelease(a1);
    }
    else
    {
      swift_errorRelease(a1);
      sub_100028388((uint64_t)v11, type metadata accessor for CustodianshipInfoRecord);
      swift_errorRelease(a1);
      swift_errorRelease(a1);

    }
  }
  return a3(a1);
}

void sub_1000FD214()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  _QWORD v13[5];
  uint64_t v14;

  v1 = v0;
  if (qword_10028AE00 != -1)
    swift_once(&qword_10028AE00, sub_100046E2C);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_100005288(v2, (uint64_t)qword_1002A8A80);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.debug.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Manatee status changed, fetching new manatee status.", v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }

  v7 = swift_allocObject(&unk_100267858, 24, 7);
  swift_weakInit(v7 + 16, v1);
  v8 = qword_10028AF00;
  swift_retain(v7);
  if (v8 != -1)
    swift_once(&qword_10028AF00, sub_1001FD458);
  if (qword_10028AF10 != -1)
    swift_once(&qword_10028AF10, sub_1001FDD8C);
  v9 = sub_1001FD4C0(qword_1002A8C80, *(unint64_t *)algn_1002A8C88);
  v10 = swift_allocObject(&unk_100267880, 32, 7);
  *(_QWORD *)(v10 + 16) = sub_1000FD8AC;
  *(_QWORD *)(v10 + 24) = v7;
  v13[4] = sub_1000D0E44;
  v14 = v10;
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 1107296256;
  v13[2] = sub_100043E24;
  v13[3] = &unk_100267898;
  v11 = _Block_copy(v13);
  v12 = v14;
  swift_retain(v7);
  swift_release(v12);
  objc_msgSend(v9, "accountInfoWithCompletionHandler:", v11);
  _Block_release(v11);
  swift_release_n(v7, 2);

}

void sub_1000FD428(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t Strong;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(void (*)(uint64_t), uint64_t);
  objc_class *v25;
  _BYTE *v26;
  uint64_t (**v27)(void (*)(uint64_t), uint64_t);
  id v28;
  NSObject *oslog;
  objc_super v30;
  uint64_t v31;
  uint64_t v32;

  if ((a2 & 1) != 0)
  {
    swift_errorRetain(a1);
    if (qword_10028AE00 != -1)
      swift_once(&qword_10028AE00, sub_100046E2C);
    v8 = type metadata accessor for Logger(0);
    sub_100005288(v8, (uint64_t)qword_1002A8A80);
    v9 = swift_errorRetain(a1);
    oslog = Logger.logObject.getter(v9);
    v10 = static os_log_type_t.error.getter(oslog);
    if (os_log_type_enabled(oslog, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc(12, -1);
      v12 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v11 = 138412290;
      v13 = _convertErrorToNSError(_:)(a1);
      v31 = v13;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32);
      *v12 = v13;
      sub_10006AEB4(a1, 1);
      _os_log_impl((void *)&_mh_execute_header, oslog, v10, "Something went wrong while checking manatee status: %@", v11, 0xCu);
      v14 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v12, 1, v14);
      swift_slowDealloc(v12, -1, -1);
      swift_slowDealloc(v11, -1, -1);

      sub_10006AEB4(a1, 1);
      return;
    }
    sub_10006AEB4(a1, 1);
    sub_10006AEB4(a1, 1);
    goto LABEL_21;
  }
  if ((a1 & 1) == 0)
  {
    if (qword_10028ADC8 != -1)
      swift_once(&qword_10028ADC8, sub_100046D2C);
    v4 = type metadata accessor for Logger(0);
    v5 = sub_100005288(v4, (uint64_t)qword_1002A89D8);
    oslog = Logger.logObject.getter(v5);
    v6 = static os_log_type_t.debug.getter(oslog);
    if (os_log_type_enabled(oslog, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v6, "Account is not manatee, skipping manatee migration.", v7, 2u);
      swift_slowDealloc(v7, -1, -1);
    }
LABEL_21:

    return;
  }
  v15 = a3 + 16;
  if (qword_10028AE00 != -1)
    swift_once(&qword_10028AE00, sub_100046E2C);
  v16 = type metadata accessor for Logger(0);
  v17 = sub_100005288(v16, (uint64_t)qword_1002A8A80);
  v18 = Logger.logObject.getter(v17);
  v19 = static os_log_type_t.debug.getter(v18);
  if (os_log_type_enabled(v18, v19))
  {
    v20 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v20 = 0;
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Account is now manatee, kicking off migration.", v20, 2u);
    swift_slowDealloc(v20, -1, -1);
  }

  swift_beginAccess(v15, &v31, 0, 0);
  Strong = swift_weakLoadStrong(v15);
  if (Strong)
  {
    v22 = Strong;
    v23 = swift_allocObject(&unk_100267858, 24, 7);
    swift_weakInit(v23 + 16, v22);
    v24 = (uint64_t (*)(void (*)(uint64_t), uint64_t))swift_allocObject(&unk_1002678D0, 40, 7);
    *((_QWORD *)v24 + 2) = v23;
    *((_QWORD *)v24 + 3) = OSTransaction.complete();
    *((_QWORD *)v24 + 4) = 0;
    v25 = (objc_class *)type metadata accessor for AsyncOperation();
    v26 = objc_allocWithZone(v25);
    v26[OBJC_IVAR____TtC13appleaccountd14AsyncOperation_state] = 0;
    v27 = (uint64_t (**)(void (*)(uint64_t), uint64_t))&v26[OBJC_IVAR____TtC13appleaccountd14AsyncOperation_workBlock];
    *v27 = sub_1000FD8BC;
    v27[1] = v24;
    v30.receiver = v26;
    v30.super_class = v25;
    v28 = objc_msgSendSuper2(&v30, "init");
    if (qword_10028AE80 != -1)
      swift_once(&qword_10028AE80, sub_1000FB6A0);
    objc_msgSend((id)qword_100291E30, "addOperation:", v28);
    swift_release(v22);

  }
}

uint64_t sub_1000FD888()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_1000FD8AC(uint64_t a1, char a2)
{
  uint64_t v2;

  sub_1000FD428(a1, a2 & 1, v2);
}

uint64_t sub_1000FD8BC(void (*a1)(uint64_t), uint64_t a2)
{
  uint64_t v2;

  return sub_1000FB908(a1, a2, *(_QWORD *)(v2 + 16), *(uint64_t (**)(_QWORD))(v2 + 24), *(_QWORD *)(v2 + 32));
}

void sub_1000FD8C8(uint64_t a1, uint64_t (*a2)(_QWORD), uint64_t a3, void (*a4)(uint64_t), uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  _QWORD *v30;
  id v31;
  id v32;
  unint64_t v33;
  void *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  BOOL v40;
  uint64_t v41;
  uint8_t *v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  void (*v47)(char *, uint64_t);
  uint64_t v48;
  uint64_t v49;
  NSObject *v50;
  os_log_type_t v51;
  uint8_t *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  void *v62;
  _QWORD *v63;
  _QWORD *v64;
  void *v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  NSObject *v76;
  os_log_type_t v77;
  uint8_t *v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  dispatch_group_t v87;
  id v88;
  _QWORD *v89;
  _QWORD *v90;
  char *v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD aBlock[3];
  void *v104;
  uint64_t (*v105)();
  _QWORD *v106;
  _QWORD v107[2];

  v10 = type metadata accessor for DispatchWorkItemFlags(0);
  v100 = *(_QWORD *)(v10 - 8);
  v101 = v10;
  __chkstk_darwin(v10, v11);
  v99 = (char *)&v85 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DispatchQoS(0);
  v97 = *(_QWORD *)(v13 - 8);
  v98 = v13;
  __chkstk_darwin(v13, v14);
  v96 = (char *)&v85 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for DispatchQoS.QoSClass(0);
  v94 = *(_QWORD *)(v16 - 8);
  v95 = v16;
  __chkstk_darwin(v16, v17);
  v93 = (char *)&v85 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v102 = type metadata accessor for URL(0);
  v92 = *(_QWORD *)(v102 - 8);
  v20 = __chkstk_darwin(v102, v19);
  v22 = (char *)&v85 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20, v23);
  v91 = (char *)&v85 - v24;
  v25 = sub_1000080B4(&qword_10028FA50);
  v26 = *(_QWORD *)(v25 - 8);
  __chkstk_darwin(v25, v27);
  v29 = (char *)&v85 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = (_QWORD *)swift_allocObject(&unk_1002678F8, 48, 7);
  v30[2] = a2;
  v30[3] = a3;
  v30[4] = a4;
  v30[5] = a5;
  (*(void (**)(char *, uint64_t, uint64_t))(v26 + 16))(v29, a1 + OBJC_IVAR____TtC13appleaccountd24CustodianManateeMigrator__accountStore, v25);
  swift_retain(a3);
  swift_retain(a5);
  Dependency.wrappedValue.getter(aBlock, v25);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v29, v25);
  v31 = objc_msgSend(*(id *)(*sub_10000732C(aBlock, (uint64_t)v104) + 16), "aa_primaryAppleAccount");

  sub_100006F58(aBlock);
  if (v31)
  {
    v32 = objc_allocWithZone((Class)type metadata accessor for CustodianMigrationAnalyticsEvent(0));
    v33 = sub_10006A7EC((uint64_t)_swiftEmptyArrayStorage);
    v34 = (void *)AAFTimedAnalyticsEvent.init(eventName:initialData:)(0xD000000000000029, 0x800000010020CC30, v33);
    v35 = (_QWORD *)swift_allocObject(&unk_100267920, 48, 7);
    v35[2] = a1;
    v35[3] = v34;
    v35[4] = sub_1000FE258;
    v35[5] = v30;
    v89 = v35;
    v36 = qword_10028AE00;
    swift_retain(a1);
    v88 = v34;
    swift_retain(v30);
    if (v36 != -1)
      swift_once(&qword_10028AE00, sub_100046E2C);
    v90 = v30;
    v37 = type metadata accessor for Logger(0);
    v86 = sub_100005288(v37, (uint64_t)qword_1002A8A80);
    v38 = Logger.logObject.getter(v86);
    v39 = static os_log_type_t.info.getter();
    v40 = os_log_type_enabled(v38, v39);
    v41 = (uint64_t)v91;
    if (v40)
    {
      v42 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v42 = 0;
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "Starting custodian manatee migration.", v42, 2u);
      swift_slowDealloc(v42, -1, -1);
    }

    v87 = *(dispatch_group_t *)(a1 + OBJC_IVAR____TtC13appleaccountd24CustodianManateeMigrator_dispatchGroup);
    dispatch_group_enter(v87);
    v43 = swift_allocObject(&unk_100267858, 24, 7);
    swift_weakInit(v43 + 16, a1);
    v85 = a1 + 56;
    sub_100006CA4(a1 + 56, (uint64_t)aBlock);
    v44 = sub_10000732C(aBlock, (uint64_t)v104);
    v45 = swift_allocObject(&unk_100267948, 32, 7);
    *(_QWORD *)(v45 + 16) = sub_1000FE2D0;
    *(_QWORD *)(v45 + 24) = v43;
    v46 = sub_10000732C((_QWORD *)(*v44 + 16), *(_QWORD *)(*v44 + 40));
    type metadata accessor for LocalCache();
    swift_retain_n(v43, 2);
    sub_10000840C();
    URL.appendingPathComponent(_:isDirectory:)(0x6169646F74737543, 0xEF64726F6365526ELL, 1);
    v47 = *(void (**)(char *, uint64_t))(v92 + 8);
    v48 = v102;
    v47(v22, v102);
    sub_10000732C((_QWORD *)(*v46 + 16), *(_QWORD *)(*v46 + 40));
    sub_10009D320(v41, (uint64_t)sub_1000FE2FC, v45);
    v47((char *)v41, v48);
    swift_release(v45);
    sub_100006F58(aBlock);
    v49 = swift_release_n(v43, 2);
    v50 = Logger.logObject.getter(v49);
    v51 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v50, v51))
    {
      v52 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v52 = 0;
      _os_log_impl((void *)&_mh_execute_header, v50, v51, "Starting custodianshipInfo manatee migration.", v52, 2u);
      swift_slowDealloc(v52, -1, -1);
    }

    dispatch_group_enter(v87);
    v53 = swift_allocObject(&unk_100267858, 24, 7);
    swift_weakInit(v53 + 16, a1);
    sub_100006CA4(v85, (uint64_t)aBlock);
    v54 = sub_10000732C(aBlock, (uint64_t)v104);
    v55 = swift_allocObject(&unk_100267970, 32, 7);
    *(_QWORD *)(v55 + 16) = sub_1000FE318;
    *(_QWORD *)(v55 + 24) = v53;
    v56 = sub_10000732C((_QWORD *)(*v54 + 16), *(_QWORD *)(*v54 + 40));
    swift_retain_n(v53, 2);
    sub_10000840C();
    URL.appendingPathComponent(_:isDirectory:)(0xD000000000000017, 0x8000000100209FC0, 1);
    v57 = v22;
    v58 = v102;
    v47(v57, v102);
    sub_10000732C((_QWORD *)(*v56 + 16), *(_QWORD *)(*v56 + 40));
    sub_10009D070(v41, (uint64_t)sub_1000FF188, v55);
    v47((char *)v41, v58);
    swift_release(v55);
    sub_100006F58(aBlock);
    swift_release_n(v53, 2);
    sub_100007764();
    v60 = v93;
    v59 = v94;
    v61 = v95;
    (*(void (**)(char *, _QWORD, uint64_t))(v94 + 104))(v93, enum case for DispatchQoS.QoSClass.default(_:), v95);
    v62 = (void *)static OS_dispatch_queue.global(qos:)(v60);
    (*(void (**)(char *, uint64_t))(v59 + 8))(v60, v61);
    v63 = (_QWORD *)swift_allocObject(&unk_100267998, 40, 7);
    v64 = v89;
    v63[2] = sub_1000FE2C4;
    v63[3] = v64;
    v63[4] = a1;
    v105 = sub_1000FE34C;
    v106 = v63;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1000051D0;
    v104 = &unk_1002679B0;
    v65 = _Block_copy(aBlock);
    swift_retain(a1);
    v66 = swift_retain(v64);
    v67 = v96;
    static DispatchQoS.unspecified.getter(v66);
    v107[0] = _swiftEmptyArrayStorage;
    v68 = sub_100005150((unint64_t *)&qword_10028CD20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v69 = sub_1000080B4((uint64_t *)&unk_100295A00);
    v70 = sub_100008628();
    v71 = v99;
    v72 = v101;
    dispatch thunk of SetAlgebra.init<A>(_:)(v107, v69, v70, v101, v68);
    OS_dispatch_group.notify(qos:flags:queue:execute:)(v67, v71, v62, v65);
    _Block_release(v65);

    swift_release(v64);
    (*(void (**)(char *, uint64_t))(v100 + 8))(v71, v72);
    (*(void (**)(char *, uint64_t))(v97 + 8))(v67, v98);
    v73 = v106;
    swift_release(v90);
    swift_release(v73);
  }
  else
  {
    if (qword_10028AE00 != -1)
      swift_once(&qword_10028AE00, sub_100046E2C);
    v74 = type metadata accessor for Logger(0);
    v75 = sub_100005288(v74, (uint64_t)qword_1002A8A80);
    v76 = Logger.logObject.getter(v75);
    v77 = static os_log_type_t.error.getter(v76);
    if (os_log_type_enabled(v76, v77))
    {
      v78 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v78 = 0;
      _os_log_impl((void *)&_mh_execute_header, v76, v77, "Not logged in to AppleAccount, Aborting migration!", v78, 2u);
      swift_slowDealloc(v78, -1, -1);
    }

    type metadata accessor for AACustodianError(0);
    v80 = v79;
    v107[0] = -7002;
    v81 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
    v82 = sub_100005150((unint64_t *)&qword_10028B640, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianError, (uint64_t)&unk_100218378);
    _BridgedStoredNSError.init(_:userInfo:)(aBlock, v107, v81, v80, v82);
    v83 = (void *)aBlock[0];
    v84 = a2(aBlock[0]);
    a4(v84);
    swift_release(v30);

  }
}

uint64_t sub_1000FE22C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000FE258()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);
  uint64_t v2;

  v1 = *(uint64_t (**)(uint64_t))(v0 + 32);
  v2 = (*(uint64_t (**)(void))(v0 + 16))();
  return v1(v2);
}

uint64_t sub_1000FE290()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000FE2C4(uint64_t a1)
{
  uint64_t v1;

  return sub_1000FB9B0(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(uint64_t (**)(uint64_t))(v1 + 32));
}

void sub_1000FE2D0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_1000FBA88(a1, a2, v2);
}

uint64_t sub_1000FE2D8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000FE2FC(uint64_t a1, char a2)
{
  uint64_t v2;

  return sub_10007A840(a1, a2 & 1, *(uint64_t (**)(uint64_t, uint64_t))(v2 + 16));
}

void sub_1000FE318(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_1000FC094(a1, a2, v2);
}

uint64_t sub_1000FE320()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000FE34C()
{
  uint64_t v0;

  return sub_1000FC864(*(void (**)(uint64_t))(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_1000FE358(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  NSObject *v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  int v34;
  uint64_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint8_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint8_t *v53;
  uint8_t *v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62[5];

  v6 = sub_1000080B4(&qword_10028E840);
  v58 = *(_QWORD *)(v6 - 8);
  v59 = v6;
  __chkstk_darwin(v6, v7);
  v9 = (char *)&v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (int *)type metadata accessor for KeyRepairContext(0);
  __chkstk_darwin(v10, v11);
  v13 = (char *)&v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for CustodianRecord(0);
  __chkstk_darwin(v14, v15);
  v17 = (char *)&v53 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = swift_allocObject(&unk_100267B00, 24, 7);
  *(_QWORD *)(v18 + 16) = a3;
  v19 = *(int *)(v14 + 48);
  v60 = a1;
  v20 = *(unsigned __int8 *)(a1 + v19);
  v21 = qword_10028AE00;
  v22 = a3;
  if (v20 == 1)
  {
    v23 = v22;
    if (v21 != -1)
      swift_once(&qword_10028AE00, sub_100046E2C);
    v24 = type metadata accessor for Logger(0);
    v25 = sub_100005288(v24, (uint64_t)qword_1002A8A80);
    v26 = Logger.logObject.getter(v25);
    v27 = static os_log_type_t.debug.getter(v26);
    if (os_log_type_enabled(v26, v27))
    {
      v28 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v28 = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "CustodianRecord is already in Manatee.", v28, 2u);
      swift_slowDealloc(v28, -1, -1);
    }

    dispatch_group_leave(v23);
    return swift_release(v18);
  }
  else
  {
    if (v21 != -1)
      swift_once(&qword_10028AE00, sub_100046E2C);
    v30 = type metadata accessor for Logger(0);
    sub_100005288(v30, (uint64_t)qword_1002A8A80);
    v31 = sub_100027FE8(v60, (uint64_t)v17, type metadata accessor for CustodianRecord);
    v32 = Logger.logObject.getter(v31);
    v33 = static os_log_type_t.debug.getter(v32);
    v34 = v33;
    if (os_log_type_enabled(v32, v33))
    {
      v35 = swift_slowAlloc(12, -1);
      v55 = v34;
      v36 = (uint8_t *)v35;
      v56 = swift_slowAlloc(32, -1);
      v62[0] = v56;
      v57 = v18;
      *(_DWORD *)v36 = 136315138;
      v53 = v36 + 4;
      v54 = v36;
      v37 = a2;
      v38 = type metadata accessor for UUID(0);
      v39 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v40 = v38;
      a2 = v37;
      v41 = dispatch thunk of CustomStringConvertible.description.getter(v40, v39);
      v43 = v42;
      v61 = sub_1001DEF4C(v41, v42, v62);
      v18 = v57;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v61, v62);
      swift_bridgeObjectRelease(v43);
      sub_100028388((uint64_t)v17, type metadata accessor for CustodianRecord);
      v44 = v54;
      _os_log_impl((void *)&_mh_execute_header, v32, (os_log_type_t)v55, "Migrating CustodianRecord with custodianID %s...", v54, 0xCu);
      v45 = v56;
      swift_arrayDestroy(v56, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v45, -1, -1);
      swift_slowDealloc(v44, -1, -1);
    }
    else
    {
      sub_100028388((uint64_t)v17, type metadata accessor for CustodianRecord);
    }

    v46 = v60 + *(int *)(v14 + 20);
    v47 = type metadata accessor for UUID(0);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 16))(v13, v46, v47);
    v13[v10[5]] = 1;
    v13[v10[6]] = 1;
    v48 = &v13[v10[7]];
    *(_QWORD *)v48 = 0;
    *((_QWORD *)v48 + 1) = 0;
    v50 = v58;
    v49 = v59;
    (*(void (**)(char *, uint64_t, uint64_t))(v58 + 16))(v9, a2 + OBJC_IVAR____TtC13appleaccountd24CustodianManateeMigrator__keyRepair, v59);
    Dependency.wrappedValue.getter(v62, v49);
    (*(void (**)(char *, uint64_t))(v50 + 8))(v9, v49);
    sub_10000732C(v62, v62[3]);
    v51 = swift_allocObject(&unk_100267858, 24, 7);
    swift_weakInit(v51 + 16, a2);
    v52 = swift_allocObject(&unk_100267B28, 40, 7);
    *(_QWORD *)(v52 + 16) = v51;
    *(_QWORD *)(v52 + 24) = sub_1000A9BA8;
    *(_QWORD *)(v52 + 32) = v18;
    swift_retain(v51);
    swift_retain(v18);
    sub_1000319C8((uint64_t)v13, sub_1000FF148, (void (*)(uint64_t))v52);
    swift_release(v52);
    sub_100028388((uint64_t)v13, type metadata accessor for KeyRepairContext);
    swift_release(v51);
    sub_100006F58(v62);
    return swift_release(v18);
  }
}

uint64_t sub_1000FE858(uint64_t a1, uint64_t a2, void *a3)
{
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  NSObject *v30;
  NSObject *v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  BOOL v42;
  uint8_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint8_t *v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(char *, char *, uint64_t);
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  void (**v71)();
  void (*v72)();
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t (**v80)(uint64_t);
  uint8_t *v81;
  uint8_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92[5];

  v86 = a2;
  v5 = (int *)type metadata accessor for CustodianshipInfoRecord(0);
  v87 = *((_QWORD *)v5 - 1);
  v6 = *(_QWORD *)(v87 + 64);
  v8 = __chkstk_darwin(v5, v7);
  v10 = __chkstk_darwin(v8, v9);
  v88 = (uint64_t)&v81 - v11;
  v13 = __chkstk_darwin(v10, v12);
  v15 = (char *)&v81 - v14;
  v17 = __chkstk_darwin(v13, v16);
  v19 = (char *)&v81 - v18;
  v21 = __chkstk_darwin(v17, v20);
  v89 = (uint64_t)&v81 - v22;
  __chkstk_darwin(v21, v23);
  v25 = (char *)&v81 - v24;
  v26 = swift_allocObject(&unk_100267A10, 24, 7);
  *(_QWORD *)(v26 + 16) = a3;
  v27 = v5[9];
  v90 = a1;
  v28 = *(unsigned __int8 *)(a1 + v27);
  v29 = qword_10028AE00;
  v30 = a3;
  if (v28 == 1)
  {
    v31 = v30;
    if (v29 != -1)
      swift_once(&qword_10028AE00, sub_100046E2C);
    v32 = type metadata accessor for Logger(0);
    v33 = sub_100005288(v32, (uint64_t)qword_1002A8A80);
    v34 = Logger.logObject.getter(v33);
    v35 = static os_log_type_t.debug.getter(v34);
    if (os_log_type_enabled(v34, v35))
    {
      v36 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v36 = 0;
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "CustodianshipInfoRecord is already in Manatee.", v36, 2u);
      swift_slowDealloc(v36, -1, -1);
    }

    dispatch_group_leave(v31);
    return swift_release(v26);
  }
  else
  {
    v84 = (uint64_t)&v81 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
    if (v29 != -1)
      swift_once(&qword_10028AE00, sub_100046E2C);
    v38 = type metadata accessor for Logger(0);
    sub_100005288(v38, (uint64_t)qword_1002A8A80);
    v39 = sub_100027FE8(v90, (uint64_t)v25, type metadata accessor for CustodianshipInfoRecord);
    v40 = Logger.logObject.getter(v39);
    v41 = static os_log_type_t.debug.getter(v40);
    v42 = os_log_type_enabled(v40, v41);
    v85 = v26;
    if (v42)
    {
      v43 = (uint8_t *)swift_slowAlloc(12, -1);
      v83 = swift_slowAlloc(32, -1);
      v92[0] = v83;
      v82 = v43;
      *(_DWORD *)v43 = 136315138;
      v81 = v43 + 4;
      v44 = type metadata accessor for UUID(0);
      v45 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v46 = dispatch thunk of CustomStringConvertible.description.getter(v44, v45);
      v48 = v47;
      v91 = sub_1001DEF4C(v46, v47, v92);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v91, v92);
      swift_bridgeObjectRelease(v48);
      sub_100028388((uint64_t)v25, type metadata accessor for CustodianshipInfoRecord);
      v49 = v82;
      _os_log_impl((void *)&_mh_execute_header, v40, v41, "Migrating CustodianshipInfoRecord for custodianID - %s", v82, 0xCu);
      v50 = v83;
      swift_arrayDestroy(v83, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v50, -1, -1);
      swift_slowDealloc(v49, -1, -1);
    }
    else
    {
      sub_100028388((uint64_t)v25, type metadata accessor for CustodianshipInfoRecord);
    }

    sub_100027FE8(v90, (uint64_t)v19, type metadata accessor for CustodianshipInfoRecord);
    v51 = type metadata accessor for UUID(0);
    v52 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v51 - 8) + 16);
    v52(v15, v19, v51);
    v52(&v15[v5[5]], &v19[v5[5]], v51);
    v53 = v5[8];
    if (v19[v5[9]] == 1)
    {
      v54 = *(_QWORD *)&v19[v53];
      v55 = *(_QWORD *)&v19[v53 + 8];
      v56 = (uint64_t *)&v15[v53];
      *v56 = v54;
      v56[1] = v55;
      sub_10000F450(v54, v55);
    }
    else
    {
      *(_OWORD *)&v15[v53] = xmmword_100218E90;
    }
    v57 = v5[6];
    v59 = *(_QWORD *)&v19[v57];
    v58 = *(_QWORD *)&v19[v57 + 8];
    v60 = &v15[v57];
    *(_QWORD *)v60 = v59;
    *((_QWORD *)v60 + 1) = v58;
    *(_QWORD *)&v15[v5[7]] = *(_QWORD *)&v19[v5[7]];
    swift_bridgeObjectRetain(v58);
    sub_100028388((uint64_t)v19, type metadata accessor for CustodianshipInfoRecord);
    v15[v5[9]] = 1;
    v61 = v89;
    sub_100027FA4((uint64_t)v15, v89);
    sub_100006CA4(v86 + 16, (uint64_t)v92);
    v62 = sub_10000732C(v92, v92[3]);
    v63 = v90;
    v64 = v88;
    sub_100027FE8(v90, v88, type metadata accessor for CustodianshipInfoRecord);
    v65 = *(unsigned __int8 *)(v87 + 80);
    v66 = (v65 + 16) & ~v65;
    v67 = v65 | 7;
    v68 = v6 + 7;
    v69 = (v68 + v66) & 0xFFFFFFFFFFFFFFF8;
    v70 = swift_allocObject(&unk_100267A38, v69 + 16, v65 | 7);
    sub_100027FA4(v64, v70 + v66);
    v71 = (void (**)())(v70 + v69);
    v72 = (void (*)())v85;
    *v71 = sub_1000FF168;
    v71[1] = v72;
    v73 = *v62;
    v74 = swift_allocObject(&unk_100267A60, 24, 7);
    swift_weakInit(v74 + 16, v73);
    v75 = v63;
    v76 = v84;
    sub_100027FE8(v75, v84, type metadata accessor for CustodianshipInfoRecord);
    v77 = (v65 + 24) & ~v65;
    v78 = (v68 + v77) & 0xFFFFFFFFFFFFFFF8;
    v79 = swift_allocObject(&unk_100267A88, v78 + 16, v67);
    *(_QWORD *)(v79 + 16) = v74;
    sub_100027FA4(v76, v79 + v77);
    v80 = (uint64_t (**)(uint64_t))(v79 + v78);
    *v80 = sub_1000FEF98;
    v80[1] = (uint64_t (*)(uint64_t))v70;
    swift_retain(v72);
    swift_retain(v74);
    swift_retain(v70);
    sub_1001E5A68(v61, (uint64_t)sub_1000FF0C4, v79);
    swift_release(v70);
    swift_release(v74);
    swift_release(v79);
    sub_100028388(v61, type metadata accessor for CustodianshipInfoRecord);
    sub_100006F58(v92);
    return swift_release(v72);
  }
}

void sub_1000FEE84()
{
  uint64_t v0;

  sub_1000FC738(v0, "CustodianshipInfo manatee migration complete.");
}

uint64_t sub_1000FEEA4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000FEEC8()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);

  v1 = (int *)type metadata accessor for CustodianshipInfoRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = v0 + v4;
  v8 = type metadata accessor for UUID(0);
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8);
  v9(v7, v8);
  v9(v7 + v1[5], v8);
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[6] + 8));
  sub_10000F494(*(_QWORD *)(v7 + v1[8]), *(_QWORD *)(v7 + v1[8] + 8));
  swift_release(*(_QWORD *)(v0 + v6 + 8));
  return swift_deallocObject(v0, v6 + 16, v5);
}

uint64_t sub_1000FEF98(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(type metadata accessor for CustodianshipInfoRecord(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = v1 + ((*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8);
  return sub_1000FCF10(a1, v1 + v4, *(uint64_t (**)(_QWORD))v5, *(_QWORD *)(v5 + 8));
}

uint64_t sub_1000FEFEC()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);

  v1 = (int *)type metadata accessor for CustodianshipInfoRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release(*(_QWORD *)(v0 + 16));
  v7 = v0 + v4;
  v8 = type metadata accessor for UUID(0);
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8);
  v9(v7, v8);
  v9(v7 + v1[5], v8);
  swift_bridgeObjectRelease(*(_QWORD *)(v7 + v1[6] + 8));
  sub_10000F494(*(_QWORD *)(v7 + v1[8]), *(_QWORD *)(v7 + v1[8] + 8));
  swift_release(*(_QWORD *)(v0 + v6 + 8));
  return swift_deallocObject(v0, v6 + 16, v5);
}

uint64_t sub_1000FF0C4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(type metadata accessor for CustodianshipInfoRecord(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = v1 + ((*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8);
  return sub_1000FB410(a1, *(_QWORD *)(v1 + 16), v1 + v4, *(void (**)(uint64_t))v5, *(_QWORD *)(v5 + 8));
}

uint64_t sub_1000FF11C(uint64_t a1)
{
  uint64_t v1;

  return sub_1000E9B5C(a1, *(void (**)(uint64_t))(v1 + 16));
}

void sub_1000FF124()
{
  uint64_t v0;

  sub_1000FC738(v0, "Custodian migration complete.");
}

void sub_1000FF148(uint64_t a1)
{
  uint64_t v1;

  sub_1000FCB9C(a1, *(_QWORD *)(v1 + 16), *(void (**)(uint64_t))(v1 + 24));
}

uint64_t sub_1000FF190(uint64_t (*a1)(_QWORD), uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t (*v39)(_QWORD);
  uint64_t v40;
  uint64_t v41[5];

  v3 = v2;
  v6 = *v2;
  v7 = sub_1000080B4((uint64_t *)&unk_10028CC80);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  v11 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1000080B4(&qword_10028FA50);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12, v14);
  v16 = (char *)&v38 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v16, (uint64_t)v3 + OBJC_IVAR____TtC13appleaccountd23TrustedContactsDataSync__accountStore, v12);
  Dependency.wrappedValue.getter(v41, v12);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
  sub_10000732C(v41, v41[3]);
  v17 = sub_1000468BC();
  sub_100006F58(v41);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, (uint64_t)v3 + OBJC_IVAR____TtC13appleaccountd23TrustedContactsDataSync__cdpRequestController, v7);
  Dependency.wrappedValue.getter(v41, v7);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  v18 = sub_100048588();
  sub_100006F58(v41);
  if ((v17 & 1) != 0 && (v18 & 1) != 0)
  {
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v19 = type metadata accessor for Logger(0);
    v20 = sub_100005288(v19, (uint64_t)qword_1002A8A08);
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v21, v22))
    {
      v39 = a1;
      v23 = (uint8_t *)swift_slowAlloc(12, -1);
      v24 = swift_slowAlloc(32, -1);
      v41[0] = v24;
      *(_DWORD *)v23 = 136315138;
      if (qword_10028AE88 != -1)
        swift_once(&qword_10028AE88, sub_1000FF8A0);
      v25 = qword_100292038;
      v26 = unk_100292040;
      swift_bridgeObjectRetain(unk_100292040);
      v40 = sub_1001DEF4C(v25, v26, v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, v41);
      swift_bridgeObjectRelease(v26);
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "%s - started.", v23, 0xCu);
      swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v24, -1, -1);
      swift_slowDealloc(v23, -1, -1);

      a1 = v39;
    }
    else
    {

    }
    v36 = swift_allocObject(&unk_100267BA8, 24, 7);
    swift_weakInit(v36 + 16, v3);
    v37 = (_QWORD *)swift_allocObject(&unk_100267BD0, 48, 7);
    v37[2] = v36;
    v37[3] = a1;
    v37[4] = a2;
    v37[5] = v6;
    swift_retain(v36);
    swift_retain(a2);
    sub_1001019B4((uint64_t)sub_100109598, (uint64_t)v37);
    swift_release(v36);
    return swift_release(v37);
  }
  else
  {
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v27 = type metadata accessor for Logger(0);
    v28 = sub_100005288(v27, (uint64_t)qword_1002A8A08);
    v29 = Logger.logObject.getter(v28);
    v30 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v29, v30))
    {
      v39 = a1;
      v31 = swift_slowAlloc(24, -1);
      v32 = swift_slowAlloc(32, -1);
      v41[0] = v32;
      *(_DWORD *)v31 = 136315650;
      if (qword_10028AE88 != -1)
        swift_once(&qword_10028AE88, sub_1000FF8A0);
      v34 = qword_100292038;
      v33 = unk_100292040;
      swift_bridgeObjectRetain(unk_100292040);
      v40 = sub_1001DEF4C(v34, v33, v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, v41);
      swift_bridgeObjectRelease(v33);
      *(_WORD *)(v31 + 12) = 1024;
      LODWORD(v40) = v17 & 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, (char *)&v40 + 4);
      *(_WORD *)(v31 + 18) = 1024;
      LODWORD(v40) = v18 & 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, (char *)&v40 + 4);
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "%s - Not starting due to isHSA2Enabled: %{BOOL}d isCDPEnabled: %{BOOL}d", (uint8_t *)v31, 0x18u);
      swift_arrayDestroy(v32, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v32, -1, -1);
      swift_slowDealloc(v31, -1, -1);

      return v39(0);
    }
    else
    {

      return a1(0);
    }
  }
}

uint64_t sub_1000FF6B4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v0 = type metadata accessor for SHA256Digest(0);
  v1 = sub_100005150(&qword_100291CB0, (uint64_t (*)(uint64_t))&type metadata accessor for SHA256Digest, (uint64_t)&protocol conformance descriptor for SHA256Digest);
  v2 = Digest.makeIterator()(v0, v1);
  sub_100013DB4(v2, v3);
  v5 = v4;
  swift_bridgeObjectRelease(v2);
  v6 = *(_QWORD *)(v5 + 16);
  if (v6)
  {
    sub_1001D4B98(0, v6, 0);
    v7 = 0;
    do
    {
      v8 = *(_BYTE *)(v5 + v7 + 32);
      v9 = sub_1000080B4(&qword_100290F10);
      v10 = swift_allocObject(v9, 72, 7);
      *(_OWORD *)(v10 + 16) = xmmword_100218E30;
      *(_QWORD *)(v10 + 56) = &type metadata for UInt8;
      *(_QWORD *)(v10 + 64) = &protocol witness table for UInt8;
      *(_BYTE *)(v10 + 32) = v8;
      v11 = String.init(format:_:)(2016555045, 0xE400000000000000, v10);
      v13 = v12;
      v15 = _swiftEmptyArrayStorage[2];
      v14 = _swiftEmptyArrayStorage[3];
      if (v15 >= v14 >> 1)
        sub_1001D4B98(v14 > 1, v15 + 1, 1);
      ++v7;
      _swiftEmptyArrayStorage[2] = v15 + 1;
      v16 = &_swiftEmptyArrayStorage[2 * v15];
      v16[4] = v11;
      v16[5] = v13;
    }
    while (v6 != v7);
  }
  swift_release(v5);
  v17 = sub_1000080B4((uint64_t *)&unk_10028E800);
  v18 = sub_1000077E0((unint64_t *)&qword_10028C790, (uint64_t *)&unk_10028E800, (uint64_t)&protocol conformance descriptor for [A]);
  v19 = BidirectionalCollection<>.joined(separator:)(0, 0xE000000000000000, v17, v18);
  swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
  return v19;
}

uint64_t sub_1000FF8A0()
{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  uint64_t v3;

  v3 = type metadata accessor for TrustedContactsDataSync(0);
  v0 = sub_1000080B4(&qword_100292190);
  result = String.init<A>(describing:)(&v3, v0);
  qword_100292038 = result;
  unk_100292040 = v2;
  return result;
}

void sub_1000FF8E8(uint64_t a1, uint64_t a2, char a3, uint64_t a4, void (*a5)(void *), uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t Strong;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  void *v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  Swift::String v30;
  Swift::String v31;
  Swift::String v32;
  Swift::String v33;
  unint64_t v34;
  void *v35;
  Swift::String v36;
  uint64_t v37;
  Swift::String v38;
  Swift::String v39;
  Swift::String v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  void *v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  NSObject *v68;
  os_log_type_t v69;
  uint64_t v70;
  void (*v71)(void *);
  uint8_t *v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  NSObject *v76;
  os_log_type_t v77;
  uint8_t *v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  void *v84;
  NSObject *log;
  uint64_t v86;
  uint64_t v87;
  os_log_type_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  uint64_t v95;
  uint64_t v96;
  void (*v97)(void *);
  void (*v98)(void *);
  void (*v99)(void *);
  void *v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103[4];

  if ((a3 & 1) == 0)
  {
    v12 = a4 + 16;
    swift_beginAccess(a4 + 16, v103, 0, 0);
    Strong = swift_weakLoadStrong(v12);
    if (!Strong)
    {
      type metadata accessor for AACustodianError(0);
      v57 = v56;
      v102 = -7000;
      v58 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
      v59 = sub_100005150((unint64_t *)&qword_10028B640, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianError, (uint64_t)&unk_100218378);
      _BridgedStoredNSError.init(_:userInfo:)(&v100, &v102, v58, v57, v59);
      v60 = v100;
      a5(v100);

      return;
    }
    v14 = Strong;
    v90 = a6;
    swift_bridgeObjectRetain(a1);
    swift_bridgeObjectRetain(a2);
    v92 = sub_1001096AC(a1);
    v16 = v15;
    v96 = sub_100109918(a2);
    v18 = v17;
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(a1);
    v93 = sub_100100484();
    v20 = v19;
    v95 = v21;
    v23 = v22;
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v24 = type metadata accessor for Logger(0);
    sub_100005288(v24, (uint64_t)qword_1002A8A08);
    swift_bridgeObjectRetain_n(v20, 2);
    swift_bridgeObjectRetain_n(v23, 2);
    swift_bridgeObjectRetain_n(v16, 2);
    v25 = swift_bridgeObjectRetain_n(v18, 2);
    v26 = Logger.logObject.getter(v25);
    v88 = static os_log_type_t.debug.getter(v26);
    v91 = (uint64_t)v18;
    v89 = a2;
    v94 = v23;
    if (os_log_type_enabled(v26, v88))
    {
      v84 = v16;
      log = v26;
      v87 = v14;
      v97 = a5;
      v27 = swift_slowAlloc(32, -1);
      v83 = swift_slowAlloc(96, -1);
      v102 = v83;
      *(_DWORD *)v27 = 136315650;
      if (qword_10028AE88 != -1)
        swift_once(&qword_10028AE88, sub_1000FF8A0);
      v28 = qword_100292038;
      v29 = unk_100292040;
      swift_bridgeObjectRetain(unk_100292040);
      v100 = (void *)sub_1001DEF4C(v28, v29, &v102);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v100, &v101);
      swift_bridgeObjectRelease(v29);
      *(_WORD *)(v27 + 12) = 2080;
      v100 = 0;
      v101 = 0xE000000000000000;
      swift_bridgeObjectRetain(v20);
      swift_bridgeObjectRetain(v23);
      _StringGuts.grow(_:)(51);
      v30._countAndFlagsBits = 0xD000000000000016;
      v30._object = (void *)0x800000010020CCB0;
      String.append(_:)(v30);
      swift_bridgeObjectRetain(v20);
      v31._countAndFlagsBits = v93;
      v31._object = v20;
      String.append(_:)(v31);
      swift_bridgeObjectRelease(v20);
      v32._countAndFlagsBits = 0xD000000000000019;
      v32._object = (void *)0x800000010020CCD0;
      String.append(_:)(v32);
      swift_bridgeObjectRetain(v23);
      v33._countAndFlagsBits = v95;
      v33._object = v23;
      String.append(_:)(v33);
      swift_bridgeObjectRelease(v20);
      swift_bridgeObjectRelease_n(v23, 2);
      v34 = v101;
      v100 = (void *)sub_1001DEF4C((uint64_t)v100, v101, &v102);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v100, &v101);
      swift_bridgeObjectRelease_n(v23, 2);
      v35 = v20;
      swift_bridgeObjectRelease_n(v20, 2);
      swift_bridgeObjectRelease(v34);
      *(_WORD *)(v27 + 22) = 2080;
      v100 = 0;
      v101 = 0xE000000000000000;
      swift_bridgeObjectRetain(v84);
      swift_bridgeObjectRetain(v18);
      _StringGuts.grow(_:)(51);
      v36._countAndFlagsBits = 0xD000000000000016;
      v36._object = (void *)0x800000010020CCB0;
      String.append(_:)(v36);
      swift_bridgeObjectRetain(v84);
      v37 = v92;
      v38._countAndFlagsBits = v92;
      v38._object = v84;
      String.append(_:)(v38);
      swift_bridgeObjectRelease(v84);
      v39._countAndFlagsBits = 0xD000000000000019;
      v39._object = (void *)0x800000010020CCD0;
      String.append(_:)(v39);
      swift_bridgeObjectRetain(v18);
      v40._countAndFlagsBits = v96;
      v40._object = v18;
      String.append(_:)(v40);
      swift_bridgeObjectRelease(v84);
      swift_bridgeObjectRelease_n(v18, 2);
      v41 = v101;
      v100 = (void *)sub_1001DEF4C((uint64_t)v100, v101, &v102);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v100, &v101);
      swift_bridgeObjectRelease_n(v18, 2);
      v42 = (uint64_t)v84;
      swift_bridgeObjectRelease_n(v84, 2);
      swift_bridgeObjectRelease(v41);
      _os_log_impl((void *)&_mh_execute_header, log, v88, "%s - current idmsListVersion - %s\ncloudListVersion - %s", (uint8_t *)v27, 0x20u);
      swift_arrayDestroy(v83, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v83, -1, -1);
      swift_slowDealloc(v27, -1, -1);

      v43 = v93;
      a5 = v97;
      v14 = v87;
    }
    else
    {

      swift_bridgeObjectRelease_n(v18, 2);
      v61 = v20;
      v42 = (uint64_t)v16;
      swift_bridgeObjectRelease_n(v16, 2);
      swift_bridgeObjectRelease_n(v23, 2);
      v35 = v61;
      swift_bridgeObjectRelease_n(v61, 2);
      v37 = v92;
      v43 = v93;
    }
    v62 = v42;
    v63 = (uint64_t)v35;
    if (v43 == v37 && v35 == (void *)v62
      || (_stringCompareWithSmolCheck(_:_:expecting:)(v43, v35, v37, v62, 0) & 1) != 0)
    {
      v64 = v89;
      if (v95 == v96 && v94 == v18)
      {
        swift_bridgeObjectRelease(v62);
        swift_bridgeObjectRelease(v18);
        goto LABEL_27;
      }
      v65 = _stringCompareWithSmolCheck(_:_:expecting:)(v95, v94, v96, v18, 0);
      swift_bridgeObjectRelease(v94);
      v66 = swift_bridgeObjectRelease(v35);
      if ((v65 & 1) != 0)
      {
        v63 = v62;
        v18 = (void *)v91;
LABEL_27:
        swift_bridgeObjectRelease(v18);
        v67 = swift_bridgeObjectRelease(v63);
        v68 = Logger.logObject.getter(v67);
        v69 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v68, v69))
        {
          v70 = v14;
          v71 = a5;
          v72 = (uint8_t *)swift_slowAlloc(12, -1);
          v73 = swift_slowAlloc(32, -1);
          v100 = (void *)v73;
          *(_DWORD *)v72 = 136315138;
          if (qword_10028AE88 != -1)
            swift_once(&qword_10028AE88, sub_1000FF8A0);
          v74 = qword_100292038;
          v75 = unk_100292040;
          swift_bridgeObjectRetain(unk_100292040);
          v102 = sub_1001DEF4C(v74, v75, (uint64_t *)&v100);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v102, v103);
          swift_bridgeObjectRelease(v75);
          _os_log_impl((void *)&_mh_execute_header, v68, v69, "%s - list version matches with IdMS! All good!", v72, 0xCu);
          swift_arrayDestroy(v73, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v73, -1, -1);
          swift_slowDealloc(v72, -1, -1);

          v14 = v70;
          v71(0);
        }
        else
        {

          a5(0);
        }
LABEL_39:
        swift_release(v14);
        return;
      }
    }
    else
    {
      swift_bridgeObjectRelease(v94);
      v66 = swift_bridgeObjectRelease(v35);
      v64 = v89;
    }
    v76 = Logger.logObject.getter(v66);
    v77 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v76, v77))
    {
      v86 = a7;
      v99 = a5;
      v78 = (uint8_t *)swift_slowAlloc(12, -1);
      v79 = swift_slowAlloc(32, -1);
      v100 = (void *)v79;
      *(_DWORD *)v78 = 136315138;
      if (qword_10028AE88 != -1)
        swift_once(&qword_10028AE88, sub_1000FF8A0);
      v80 = qword_100292038;
      v81 = unk_100292040;
      swift_bridgeObjectRetain(unk_100292040);
      v102 = sub_1001DEF4C(v80, v81, (uint64_t *)&v100);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v102, v103);
      swift_bridgeObjectRelease(v81);
      _os_log_impl((void *)&_mh_execute_header, v76, v77, "%s - list version doesn't match with IdMS.", v78, 0xCu);
      swift_arrayDestroy(v79, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v79, -1, -1);
      swift_slowDealloc(v78, -1, -1);

      a5 = v99;
      a7 = v86;
    }
    else
    {

    }
    v82 = (_QWORD *)swift_allocObject(&unk_100267D10, 40, 7);
    v82[2] = a5;
    v82[3] = v90;
    v82[4] = a7;
    swift_retain(v90);
    sub_100100824(a1, v64, v92, v62, v96, v91, (void (*)(uint64_t))sub_100109E68, (uint64_t)v82);
    swift_release(v82);
    swift_bridgeObjectRelease(v91);
    swift_bridgeObjectRelease(v62);
    goto LABEL_39;
  }
  swift_errorRetain(a1);
  if (qword_10028ADD8 != -1)
    swift_once(&qword_10028ADD8, sub_100046D78);
  v44 = type metadata accessor for Logger(0);
  sub_100005288(v44, (uint64_t)qword_1002A8A08);
  swift_errorRetain(a1);
  v45 = swift_errorRetain(a1);
  v46 = Logger.logObject.getter(v45);
  v47 = static os_log_type_t.error.getter(v46);
  if (os_log_type_enabled(v46, v47))
  {
    v98 = a5;
    v48 = swift_slowAlloc(22, -1);
    v49 = swift_slowAlloc(64, -1);
    v103[0] = v49;
    *(_DWORD *)v48 = 136315394;
    if (qword_10028AE88 != -1)
      swift_once(&qword_10028AE88, sub_1000FF8A0);
    v50 = qword_100292038;
    v51 = unk_100292040;
    swift_bridgeObjectRetain(unk_100292040);
    v100 = (void *)sub_1001DEF4C(v50, v51, v103);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v100, &v101);
    swift_bridgeObjectRelease(v51);
    *(_WORD *)(v48 + 12) = 2080;
    v100 = (void *)a1;
    swift_errorRetain(a1);
    v52 = sub_1000080B4(&qword_10028E850);
    v53 = String.init<A>(describing:)(&v100, v52);
    v55 = v54;
    v100 = (void *)sub_1001DEF4C(v53, v54, v103);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v100, &v101);
    swift_bridgeObjectRelease(v55);
    sub_100109680(a1, a2, 1);
    sub_100109680(a1, a2, 1);
    _os_log_impl((void *)&_mh_execute_header, v46, v47, "%s - error fetching trusted contacts on cloud - %s", (uint8_t *)v48, 0x16u);
    swift_arrayDestroy(v49, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v49, -1, -1);
    swift_slowDealloc(v48, -1, -1);

    a5 = v98;
  }
  else
  {
    sub_100109680(a1, a2, 1);
    sub_100109680(a1, a2, 1);

  }
  swift_errorRetain(a1);
  a5((void *)a1);
  sub_100109680(a1, a2, 1);
  sub_100109680(a1, a2, 1);
}

uint64_t sub_100100484()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  void (*v7)(char *, uint64_t, uint64_t);
  void (*v8)(char *, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v14[3];
  uint64_t v15;

  v1 = sub_1000080B4(&qword_10028FA50);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  v5 = (char *)&v14[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = v0 + OBJC_IVAR____TtC13appleaccountd23TrustedContactsDataSync__accountStore;
  v7 = *(void (**)(char *, uint64_t, uint64_t))(v2 + 16);
  v7(v5, v0 + OBJC_IVAR____TtC13appleaccountd23TrustedContactsDataSync__accountStore, v1);
  Dependency.wrappedValue.getter(v14, v1);
  v8 = *(void (**)(char *, uint64_t))(v2 + 8);
  v8(v5, v1);
  sub_10000732C(v14, v15);
  v9 = sub_100046604();
  if (v10)
    v11 = v9;
  else
    v11 = 0;
  sub_100006F58(v14);
  v7(v5, v6, v1);
  Dependency.wrappedValue.getter(v14, v1);
  v8(v5, v1);
  sub_10000732C(v14, v15);
  sub_1000466F4();
  sub_100006F58(v14);
  return v11;
}

uint64_t sub_1001005D0(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v17;
  uint64_t v18;

  if (a1)
  {
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v4 = type metadata accessor for Logger(0);
    sub_100005288(v4, (uint64_t)qword_1002A8A08);
    swift_errorRetain(a1);
    v5 = swift_errorRetain(a1);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.error.getter(v6);
    if (os_log_type_enabled(v6, v7))
    {
      v8 = swift_slowAlloc(22, -1);
      v9 = swift_slowAlloc(64, -1);
      v18 = v9;
      *(_DWORD *)v8 = 136315394;
      if (qword_10028AE88 != -1)
        swift_once(&qword_10028AE88, sub_1000FF8A0);
      v10 = qword_100292038;
      v11 = unk_100292040;
      swift_bridgeObjectRetain(unk_100292040);
      v17 = sub_1001DEF4C(v10, v11, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, &v18);
      swift_bridgeObjectRelease(v11);
      *(_WORD *)(v8 + 12) = 2080;
      v17 = a1;
      swift_errorRetain(a1);
      v12 = sub_1000080B4((uint64_t *)&unk_10028FB70);
      v13 = String.init<A>(describing:)(&v17, v12);
      v15 = v14;
      v17 = sub_1001DEF4C(v13, v14, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, &v18);
      swift_bridgeObjectRelease(v15);
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "%s - error syncing trusted contacts with IdMS - %s", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy(v9, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v9, -1, -1);
      swift_slowDealloc(v8, -1, -1);
    }
    else
    {
      swift_errorRelease(a1);
      swift_errorRelease(a1);
    }

  }
  return a2(a1);
}

void sub_100100824(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(uint64_t), uint64_t a8)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  NSString v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  id v45;
  id v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _UNKNOWN **v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  id v59;
  uint64_t v60;
  Class isa;
  id v62;
  uint64_t *v63;
  unint64_t v64;
  uint64_t v65;
  id v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  NSObject *v77;
  os_log_type_t v78;
  uint8_t *v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  Class v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  id v92;
  Class v93;
  id v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  Class v99;
  id v100;
  Class v101;
  uint64_t v102;
  uint64_t v103;
  NSObject *v104;
  os_log_type_t v105;
  uint8_t *v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  void **v114;
  uint64_t v115;
  _QWORD *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  void *v120;
  void *v121;
  uint64_t v122;
  void *v123;
  uint64_t v124;
  id v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  void *v130;
  uint64_t v131;
  char *v132;
  id v133;
  id v134;
  uint64_t v135;
  char *v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  void (*v149)(uint64_t);
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  char *v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t aBlock[3];
  void *v165;
  uint64_t (*v166)(void *, uint64_t);
  uint64_t v167;
  __int128 v168;
  __int128 v169;

  v150 = a8;
  v149 = a7;
  v144 = a6;
  v142 = a5;
  v143 = a4;
  v140 = a3;
  v145 = a2;
  v146 = a1;
  v141 = *v8;
  v139 = sub_1000080B4(&qword_10028CD18);
  v138 = *(_QWORD *)(v139 - 8);
  __chkstk_darwin(v139, v9);
  v137 = (char *)&v131 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for BeneficiaryInfoRecord(0);
  v135 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11, v12);
  v15 = (char *)&v131 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13, v16);
  v136 = (char *)&v131 - v17;
  v151 = type metadata accessor for SHA256(0);
  v157 = *(_QWORD *)(v151 - 8);
  __chkstk_darwin(v151, v18);
  v159 = (char *)&v131 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v156 = type metadata accessor for SHA256Digest(0);
  v155 = *(_QWORD *)(v156 - 8);
  __chkstk_darwin(v156, v20);
  v154 = (char *)&v131 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v161 = type metadata accessor for CustodianRecord(0);
  v22 = *(_QWORD *)(v161 - 8);
  v24 = __chkstk_darwin(v161, v23);
  v162 = (uint64_t)&v131 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24, v26);
  v158 = (char *)&v131 - v27;
  v28 = sub_1000080B4(&qword_10028FA50);
  v29 = *(_QWORD *)(v28 - 8);
  __chkstk_darwin(v28, v30);
  v32 = (char *)&v131 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = sub_1000080B4(&qword_10028E810);
  __chkstk_darwin(v33, v34);
  v36 = (char *)&v131 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v153 = type metadata accessor for Date(0);
  v152 = *(_QWORD *)(v153 - 8);
  __chkstk_darwin(v153, v37);
  v148 = (char *)&v131 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
  v40 = String._bridgeToObjectiveC()();
  v41 = objc_msgSend(v39, "objectForKey:", v40);

  if (v41)
  {
    _bridgeAnyObjectToAny(_:)(&v168, v41);
    swift_unknownObjectRelease(v41);
  }
  else
  {
    v168 = 0u;
    v169 = 0u;
  }
  sub_1000249A0((uint64_t)&v168, (uint64_t)aBlock, (uint64_t *)&unk_10028E7E0);
  v42 = v153;
  v43 = v152;
  if (!v165)
  {
    sub_100004934((uint64_t)aBlock, (uint64_t *)&unk_10028E7E0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v43 + 56))(v36, 1, 1, v42);
    goto LABEL_13;
  }
  v44 = swift_dynamicCast(v36, aBlock, (char *)&type metadata for Any + 8, v153, 6);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v43 + 56))(v36, v44 ^ 1u, 1, v42);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))(v36, 1, v42) == 1)
  {
LABEL_13:
    sub_100004934((uint64_t)v36, &qword_10028E810);
    type metadata accessor for AACustodianError(0);
    v71 = v70;
    *(_QWORD *)&v168 = -7008;
    v72 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
    v73 = sub_100005150((unint64_t *)&qword_10028B640, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianError, (uint64_t)&unk_100218378);
    _BridgedStoredNSError.init(_:userInfo:)(aBlock, &v168, v72, v71, v73);
    v74 = (void *)aBlock[0];
    v149(aBlock[0]);

    return;
  }
  (*(void (**)(char *, char *, uint64_t))(v43 + 32))(v148, v36, v42);
  (*(void (**)(char *, uint64_t, uint64_t))(v29 + 16))(v32, v147 + OBJC_IVAR____TtC13appleaccountd23TrustedContactsDataSync__accountStore, v28);
  Dependency.wrappedValue.getter(aBlock, v28);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v32, v28);
  v45 = objc_msgSend(*(id *)(*sub_10000732C(aBlock, (uint64_t)v165) + 16), "aa_primaryAppleAccount");
  sub_100006F58(aBlock);
  if (v45)
  {
    v46 = objc_msgSend(objc_allocWithZone((Class)AKCustodianContext), "init");
    v133 = v45;
    v47 = objc_msgSend(v45, "aa_altDSID");
    v134 = v46;
    objc_msgSend(v46, "setAltDSID:", v47);

    v48 = v146;
    v49 = *(_QWORD *)(v146 + 16);
    v50 = _swiftEmptyArrayStorage;
    v132 = v15;
    if (v49)
    {
      *(_QWORD *)&v168 = _swiftEmptyArrayStorage;
      swift_bridgeObjectRetain(v146);
      specialized ContiguousArray.reserveCapacity(_:)(v49);
      v51 = v48 + ((*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80));
      v160 = *(_QWORD *)(v22 + 72);
      v52 = v151;
      v53 = (uint64_t)v158;
      v54 = &_sSh8IteratorV6_cocoaAByx_Gs10__CocoaSetVAACn_tcfC_ptr;
      do
      {
        sub_100027FE8(v51, v53, type metadata accessor for CustodianRecord);
        v58 = v162;
        sub_100027FE8(v53, v162, type metadata accessor for CustodianRecord);
        v59 = objc_allocWithZone((Class)AKTrustedContact);
        v60 = v161;
        isa = UUID._bridgeToObjectiveC()().super.isa;
        v62 = objc_msgSend(v59, "initWithUUID:status:", isa, AKTrustedContactStatusFromAATrustedContactStatus(*(_QWORD *)(v58 + *(int *)(v60 + 36))));

        v63 = (uint64_t *)(v58 + *(int *)(v60 + 40));
        v64 = v63[1];
        v163 = (uint64_t)v62;
        if (v64 >> 60 != 15)
        {
          v65 = *v63;
          v66 = v62;
          sub_100014534(v65, v64);
          Data.base64EncodedData(options:)(0, v65, v64);
          v68 = v67;
          sub_1000144D8(v65, v64);
          v69 = sub_100005150((unint64_t *)&unk_10028BC00, (uint64_t (*)(uint64_t))&type metadata accessor for SHA256, (uint64_t)&protocol conformance descriptor for SHA256);
          dispatch thunk of HashFunction.init()(v52, v69);
          __asm { BR              X9 }
        }
        sub_100028388(v58, type metadata accessor for CustodianRecord);
        v55 = sub_100028388(v53, type metadata accessor for CustodianRecord);
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v55);
        v56 = *(_QWORD *)(v168 + 16);
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v56);
        v57 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v56, v163);
        specialized ContiguousArray._endMutation()(v57);
        v51 += v160;
        --v49;
      }
      while (v49);
      v50 = (_QWORD *)v168;
      swift_bridgeObjectRelease(v146);
    }
    else
    {
      v54 = &_sSh8IteratorV6_cocoaAByx_Gs10__CocoaSetVAACn_tcfC_ptr;
    }
    v83 = sub_1000067D4(0, &qword_100292168, AKTrustedContact_ptr);
    v84 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v50);
    objc_msgSend(v134, "setCustodianContacts:", v84);

    v85 = v145;
    v86 = *(_QWORD *)(v145 + 16);
    v87 = _swiftEmptyArrayStorage;
    if (v86)
    {
      v163 = v83;
      aBlock[0] = (uint64_t)_swiftEmptyArrayStorage;
      swift_bridgeObjectRetain(v145);
      specialized ContiguousArray.reserveCapacity(_:)(v86);
      v88 = v85 + ((*(unsigned __int8 *)(v135 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v135 + 80));
      v89 = *(_QWORD *)(v135 + 72);
      v90 = (uint64_t)v132;
      v91 = (uint64_t)v136;
      do
      {
        sub_100027FE8(v88, v91, type metadata accessor for BeneficiaryInfoRecord);
        sub_100027FE8(v91, v90, type metadata accessor for BeneficiaryInfoRecord);
        v92 = objc_allocWithZone((Class)v54[340]);
        v93 = UUID._bridgeToObjectiveC()().super.isa;
        v94 = objc_msgSend(v92, "initWithUUID:status:", v93, -1);

        sub_100028388(v90, type metadata accessor for BeneficiaryInfoRecord);
        v95 = sub_100028388(v91, type metadata accessor for BeneficiaryInfoRecord);
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v95);
        v96 = *(_QWORD *)(aBlock[0] + 16);
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v96);
        v97 = v96;
        v54 = &_sSh8IteratorV6_cocoaAByx_Gs10__CocoaSetVAACn_tcfC_ptr;
        v98 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v97, v94);
        specialized ContiguousArray._endMutation()(v98);
        v88 += v89;
        --v86;
      }
      while (v86);
      v87 = (_QWORD *)aBlock[0];
      swift_bridgeObjectRelease(v145);
    }
    v99 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v87);
    v100 = v134;
    objc_msgSend(v134, "setBeneficiaryContacts:", v99);

    v101 = Date._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v100, "setLastDataSyncTimestamp:", v101);

    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v102 = type metadata accessor for Logger(0);
    v103 = sub_100005288(v102, (uint64_t)qword_1002A8A08);
    v104 = Logger.logObject.getter(v103);
    v105 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v104, v105))
    {
      v106 = (uint8_t *)swift_slowAlloc(12, -1);
      v107 = swift_slowAlloc(32, -1);
      aBlock[0] = v107;
      *(_DWORD *)v106 = 136315138;
      if (qword_10028AE88 != -1)
        swift_once(&qword_10028AE88, sub_1000FF8A0);
      v108 = qword_100292038;
      v109 = unk_100292040;
      swift_bridgeObjectRetain(unk_100292040);
      *(_QWORD *)&v168 = sub_1001DEF4C(v108, v109, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v168, (char *)&v168 + 8);
      swift_bridgeObjectRelease(v109);
      _os_log_impl((void *)&_mh_execute_header, v104, v105, "%s - updating IdMS with the recent trusted contacts list", v106, 0xCu);
      swift_arrayDestroy(v107, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v107, -1, -1);
      swift_slowDealloc(v106, -1, -1);
    }

    v110 = v147;
    v111 = v138;
    v112 = v137;
    v113 = v139;
    (*(void (**)(char *, uint64_t, uint64_t))(v138 + 16))(v137, v147 + OBJC_IVAR____TtC13appleaccountd23TrustedContactsDataSync__idmsRequestController, v139);
    Dependency.wrappedValue.getter(&v168, v113);
    (*(void (**)(char *, uint64_t))(v111 + 8))(v112, v113);
    v114 = (void **)sub_10000732C(&v168, *((uint64_t *)&v169 + 1));
    v115 = swift_allocObject(&unk_100267BA8, 24, 7);
    swift_weakInit(v115 + 16, v110);
    v116 = (_QWORD *)swift_allocObject(&unk_100267D38, 88, 7);
    v117 = v143;
    v116[2] = v140;
    v116[3] = v117;
    v118 = v144;
    v116[4] = v142;
    v116[5] = v118;
    v119 = v150;
    v116[6] = v149;
    v116[7] = v119;
    v120 = v133;
    v116[8] = v115;
    v116[9] = v120;
    v116[10] = v141;
    v121 = *v114;
    v122 = swift_allocObject(&unk_100267D60, 32, 7);
    *(_QWORD *)(v122 + 16) = sub_100109EB8;
    *(_QWORD *)(v122 + 24) = v116;
    v166 = sub_100109F10;
    v167 = v122;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_100043E24;
    v165 = &unk_100267D78;
    v123 = _Block_copy(aBlock);
    v124 = v167;
    swift_bridgeObjectRetain(v117);
    swift_bridgeObjectRetain(v118);
    swift_retain(v119);
    swift_retain(v115);
    v125 = v120;
    swift_retain(v116);
    swift_release(v124);
    objc_msgSend(v121, "performTrustedContactsDataSync:completion:", v100, v123);
    _Block_release(v123);

    swift_release(v116);
    (*(void (**)(char *, uint64_t))(v152 + 8))(v148, v153);
    swift_release(v115);
    sub_100006F58(&v168);
  }
  else
  {
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v75 = type metadata accessor for Logger(0);
    v76 = sub_100005288(v75, (uint64_t)qword_1002A8A08);
    v77 = Logger.logObject.getter(v76);
    v78 = static os_log_type_t.error.getter(v77);
    if (os_log_type_enabled(v77, v78))
    {
      v79 = (uint8_t *)swift_slowAlloc(12, -1);
      v80 = swift_slowAlloc(32, -1);
      aBlock[0] = v80;
      *(_DWORD *)v79 = 136315138;
      if (qword_10028AE88 != -1)
        swift_once(&qword_10028AE88, sub_1000FF8A0);
      v81 = qword_100292038;
      v82 = unk_100292040;
      swift_bridgeObjectRetain(unk_100292040);
      *(_QWORD *)&v168 = sub_1001DEF4C(v81, v82, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v168, (char *)&v168 + 8);
      swift_bridgeObjectRelease(v82);
      _os_log_impl((void *)&_mh_execute_header, v77, v78, "%s - not logged in to an Apple account, unable to perform trusted contacts data sync with IdMS", v79, 0xCu);
      swift_arrayDestroy(v80, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v80, -1, -1);
      swift_slowDealloc(v79, -1, -1);

      v42 = v153;
      v43 = v152;
    }
    else
    {

    }
    type metadata accessor for AACustodianError(0);
    v127 = v126;
    *(_QWORD *)&v168 = -7002;
    v128 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
    v129 = sub_100005150((unint64_t *)&qword_10028B640, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianError, (uint64_t)&unk_100218378);
    _BridgedStoredNSError.init(_:userInfo:)(aBlock, &v168, v128, v127, v129);
    v130 = (void *)aBlock[0];
    v149(aBlock[0]);

    (*(void (**)(char *, uint64_t))(v43 + 8))(v148, v42);
  }
}

uint64_t sub_1001019B4(uint64_t a1, uint64_t a2)
{
  NSObject **v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  NSObject *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  NSObject *v32;
  _QWORD *v33;
  NSObject *v34;
  void (*v35)(char *, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  NSObject *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  void *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  NSObject *v58;
  _QWORD *v59;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  NSObject *v78;
  _QWORD *v79;
  _QWORD aBlock[3];
  void *v81;
  uint64_t (*v82)();
  _QWORD *v83;

  v69 = a1;
  v70 = a2;
  v78 = *v2;
  v73 = type metadata accessor for DispatchWorkItemFlags(0);
  v76 = *(_QWORD *)(v73 - 8);
  __chkstk_darwin(v73, v3);
  v72 = (char *)&v61 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  v74 = *(_QWORD *)(v5 - 8);
  v75 = v5;
  __chkstk_darwin(v5, v6);
  v71 = (char *)&v61 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS.QoSClass(0);
  v67 = *(_QWORD *)(v8 - 8);
  v68 = v8;
  __chkstk_darwin(v8, v9);
  v66 = (char *)&v61 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = sub_1000080B4((uint64_t *)&unk_100295380);
  v64 = *(_QWORD *)(v65 - 8);
  __chkstk_darwin(v65, v11);
  v13 = (char *)&v61 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for URL(0);
  v62 = *(_QWORD *)(v14 - 8);
  v16 = __chkstk_darwin(v14, v15);
  v18 = (char *)&v61 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16, v19);
  v21 = (char *)&v61 - v20;
  v22 = sub_1000080B4(&qword_10028C448);
  v23 = *(_QWORD *)(v22 - 8);
  __chkstk_darwin(v22, v24);
  v26 = (char *)&v61 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = dispatch_group_create();
  v28 = swift_allocObject(&unk_100267BF8, 24, 7);
  *(_QWORD *)(v28 + 16) = 0;
  v29 = swift_allocObject(&unk_100267C20, 24, 7);
  *(_QWORD *)(v29 + 16) = _swiftEmptyArrayStorage;
  dispatch_group_enter(v27);
  (*(void (**)(char *, uint64_t, uint64_t))(v23 + 16))(v26, v77 + OBJC_IVAR____TtC13appleaccountd23TrustedContactsDataSync__custodianStorage, v22);
  Dependency.wrappedValue.getter(aBlock, v22);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v26, v22);
  v30 = sub_10000732C(aBlock, (uint64_t)v81);
  v31 = (_QWORD *)swift_allocObject(&unk_100267C48, 48, 7);
  v31[2] = v27;
  v31[3] = v29;
  v63 = v29;
  v32 = v78;
  v31[4] = v28;
  v31[5] = v32;
  v33 = sub_10000732C((_QWORD *)(*v30 + 16), *(_QWORD *)(*v30 + 40));
  type metadata accessor for LocalCache();
  v34 = v27;
  swift_retain(v29);
  swift_retain(v28);
  sub_10000840C();
  URL.appendingPathComponent(_:isDirectory:)(0x6169646F74737543, 0xEF64726F6365526ELL, 1);
  v35 = *(void (**)(char *, uint64_t))(v62 + 8);
  v35(v18, v14);
  sub_10000732C((_QWORD *)(*v33 + 16), *(_QWORD *)(*v33 + 40));
  sub_10009D320((uint64_t)v21, (uint64_t)sub_1001095D0, (uint64_t)v31);
  v35(v21, v14);
  swift_release(v31);
  sub_100006F58(aBlock);
  v36 = swift_allocObject(&unk_100267C70, 24, 7);
  *(_QWORD *)(v36 + 16) = _swiftEmptyArrayStorage;
  dispatch_group_enter(v34);
  v37 = v64;
  v38 = v65;
  (*(void (**)(char *, uint64_t, uint64_t))(v64 + 16))(v13, v77 + OBJC_IVAR____TtC13appleaccountd23TrustedContactsDataSync__inheritanceStorage, v65);
  Dependency.wrappedValue.getter(aBlock, v38);
  (*(void (**)(char *, uint64_t))(v37 + 8))(v13, v38);
  sub_10000732C(aBlock, (uint64_t)v81);
  v39 = (_QWORD *)swift_allocObject(&unk_100267C98, 48, 7);
  v39[2] = v34;
  v39[3] = v36;
  v40 = v78;
  v39[4] = v28;
  v39[5] = v40;
  v78 = v34;
  swift_retain(v28);
  swift_retain(v36);
  sub_100006A8C((uint64_t)sub_100109604, (uint64_t)v39);
  swift_release(v39);
  sub_100006F58(aBlock);
  sub_1000067D4(0, (unint64_t *)&qword_100295A10, OS_dispatch_queue_ptr);
  v42 = v66;
  v41 = v67;
  v43 = v68;
  (*(void (**)(char *, _QWORD, uint64_t))(v67 + 104))(v66, enum case for DispatchQoS.QoSClass.default(_:), v68);
  v44 = (void *)static OS_dispatch_queue.global(qos:)(v42);
  (*(void (**)(char *, uint64_t))(v41 + 8))(v42, v43);
  v45 = (_QWORD *)swift_allocObject(&unk_100267CC0, 56, 7);
  v46 = v69;
  v47 = v70;
  v45[2] = v28;
  v45[3] = v46;
  v48 = v63;
  v45[4] = v47;
  v45[5] = v48;
  v45[6] = v36;
  v82 = sub_100109670;
  v83 = v45;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000051D0;
  v81 = &unk_100267CD8;
  v49 = _Block_copy(aBlock);
  swift_retain(v48);
  swift_retain(v28);
  swift_retain(v36);
  v50 = swift_retain(v47);
  v51 = v71;
  static DispatchQoS.unspecified.getter(v50);
  v79 = _swiftEmptyArrayStorage;
  v52 = sub_100005150((unint64_t *)&qword_10028CD20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v53 = sub_1000080B4((uint64_t *)&unk_100295A00);
  v54 = sub_1000077E0((unint64_t *)&qword_10028CD30, (uint64_t *)&unk_100295A00, (uint64_t)&protocol conformance descriptor for [A]);
  v55 = v72;
  v56 = v53;
  v57 = v73;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v79, v56, v54, v73, v52);
  v58 = v78;
  OS_dispatch_group.notify(qos:flags:queue:execute:)(v51, v55, v44, v49);
  _Block_release(v49);

  (*(void (**)(char *, uint64_t))(v76 + 8))(v55, v57);
  (*(void (**)(char *, uint64_t))(v74 + 8))(v51, v75);
  v59 = v83;
  swift_release(v28);
  swift_release(v48);
  swift_release(v36);
  return swift_release(v59);
}

uint64_t sub_100101FF0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = v0 + OBJC_IVAR____TtC13appleaccountd23TrustedContactsDataSync__accountStore;
  v2 = sub_1000080B4(&qword_10028FA50);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  v3 = v0 + OBJC_IVAR____TtC13appleaccountd23TrustedContactsDataSync__custodianStorage;
  v4 = sub_1000080B4(&qword_10028C448);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  v5 = v0 + OBJC_IVAR____TtC13appleaccountd23TrustedContactsDataSync__inheritanceStorage;
  v6 = sub_1000080B4((uint64_t *)&unk_100295380);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = v0 + OBJC_IVAR____TtC13appleaccountd23TrustedContactsDataSync__idmsRequestController;
  v8 = sub_1000080B4(&qword_10028CD18);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = v0 + OBJC_IVAR____TtC13appleaccountd23TrustedContactsDataSync__userDefaults;
  v10 = sub_1000080B4(&qword_100292198);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  v11 = v0 + OBJC_IVAR____TtC13appleaccountd23TrustedContactsDataSync__keyRepair;
  v12 = sub_1000080B4(&qword_10028E840);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
  v13 = v0 + OBJC_IVAR____TtC13appleaccountd23TrustedContactsDataSync__cdpRequestController;
  v14 = sub_1000080B4((uint64_t *)&unk_10028CC80);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_10010214C()
{
  return type metadata accessor for TrustedContactsDataSync(0);
}

uint64_t type metadata accessor for TrustedContactsDataSync(uint64_t a1)
{
  uint64_t result;

  result = qword_1002920A8;
  if (!qword_1002920A8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for TrustedContactsDataSync);
  return result;
}

void sub_100102190(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD v16[7];

  sub_100017464(319, (unint64_t *)&qword_100293810, &qword_10028C860);
  if (v3 <= 0x3F)
  {
    v16[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_100017464(319, (unint64_t *)&qword_10028C350, &qword_10028C880);
    if (v5 <= 0x3F)
    {
      v16[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_100017464(319, (unint64_t *)&qword_1002954D0, &qword_100294B10);
      if (v7 <= 0x3F)
      {
        v16[2] = *(_QWORD *)(v6 - 8) + 64;
        sub_100017464(319, &qword_10028C888, &qword_10028C890);
        if (v9 <= 0x3F)
        {
          v16[3] = *(_QWORD *)(v8 - 8) + 64;
          sub_100102300(319);
          if (v11 <= 0x3F)
          {
            v16[4] = *(_QWORD *)(v10 - 8) + 64;
            sub_100017464(319, &qword_10028E2B8, &qword_10028E2C0);
            if (v13 <= 0x3F)
            {
              v16[5] = *(_QWORD *)(v12 - 8) + 64;
              sub_100017464(319, &qword_10028BDA8, &qword_10028C8D0);
              if (v15 <= 0x3F)
              {
                v16[6] = *(_QWORD *)(v14 - 8) + 64;
                swift_updateClassMetadata2(a1, 256, 7, v16, a1 + 80);
              }
            }
          }
        }
      }
    }
  }
}

void sub_100102300(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1002920B8)
  {
    v2 = sub_1000067D4(255, (unint64_t *)&qword_10028E828, NSUserDefaults_ptr);
    v3 = type metadata accessor for Dependency(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1002920B8);
  }
}

uint64_t sub_100102364(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD), uint64_t a4)
{
  return sub_1000FF190(a3, a4);
}

unint64_t sub_10010238C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v26;

  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(AKTrustedContactsSyncOperationDelete);
  v4 = v3;
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  if (v2 == v5 && v4 == v6)
  {
    swift_bridgeObjectRelease_n(v4, 2);
    return 0xD000000000000010;
  }
  v8 = v6;
  v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v2, v4, v5, v6, 0);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v8);
  if ((v9 & 1) != 0)
    return 0xD000000000000010;
  v10 = 0x6B20726961706572;
  v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(AKTrustedContactsSyncOperationUpdateRKC);
  v13 = v12;
  v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  if (v11 == v14 && v13 == v15)
  {
    swift_bridgeObjectRelease_n(v13, 2);
  }
  else
  {
    v17 = v15;
    v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v11, v13, v14, v15, 0);
    swift_bridgeObjectRelease(v13);
    swift_bridgeObjectRelease(v17);
    if ((v18 & 1) == 0)
    {
      v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(AKTrustedContactsSyncOperationFinish);
      v21 = v20;
      v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
      v24 = v22;
      if (v19 == v23 && v21 == v22)
      {
        swift_bridgeObjectRelease_n(v21, 2);
        return 0xD000000000000012;
      }
      else
      {
        v26 = _stringCompareWithSmolCheck(_:_:expecting:)(v19, v21, v23, v22, 0);
        swift_bridgeObjectRelease(v21);
        swift_bridgeObjectRelease(v24);
        if ((v26 & 1) != 0)
          return 0xD000000000000012;
        else
          return 0xD00000000000002CLL;
      }
    }
  }
  return v10;
}

unint64_t sub_10010259C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v24;

  v2 = 0x6574656C6564;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(AKTrustedContactsSyncOperationDelete);
  v5 = v4;
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  if (v3 == v6 && v5 == v7)
    goto LABEL_13;
  v9 = v7;
  v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v9);
  if ((v10 & 1) == 0)
  {
    v2 = 0x657461647075;
    v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(AKTrustedContactsSyncOperationUpdateRKC);
    v5 = v12;
    v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
    if (v11 == v13 && v5 == v14)
      goto LABEL_13;
    v16 = v14;
    v17 = _stringCompareWithSmolCheck(_:_:expecting:)(v11, v5, v13, v14, 0);
    swift_bridgeObjectRelease(v5);
    swift_bridgeObjectRelease(v16);
    if ((v17 & 1) == 0)
    {
      v2 = 0x6873696E6966;
      v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(AKTrustedContactsSyncOperationFinish);
      v5 = v19;
      v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
      v22 = v20;
      if (v18 == v21 && v5 == v20)
      {
LABEL_13:
        swift_bridgeObjectRelease_n(v5, 2);
        return v2;
      }
      v24 = _stringCompareWithSmolCheck(_:_:expecting:)(v18, v5, v21, v20, 0);
      swift_bridgeObjectRelease(v5);
      swift_bridgeObjectRelease(v22);
      if ((v24 & 1) == 0)
        return 0xD00000000000002CLL;
    }
  }
  return v2;
}

void sub_10010274C(uint64_t a1, char a2, NSObject *a3, uint64_t a4, uint64_t a5, uint64_t a6, char *a7)
{
  uint64_t v10;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *format;
  uint64_t v24;
  uint64_t v25[3];

  if ((a2 & 1) != 0)
  {
    swift_errorRetain(a1);
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v13 = (uint64_t *)(a5 + 16);
    v14 = type metadata accessor for Logger(0);
    v15 = sub_100005288(v14, (uint64_t)qword_1002A8A08);
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.error.getter(v16);
    if (os_log_type_enabled(v16, v17))
    {
      format = a7;
      v18 = (uint8_t *)swift_slowAlloc(12, -1);
      v19 = swift_slowAlloc(32, -1);
      v25[0] = v19;
      *(_DWORD *)v18 = 136315138;
      if (qword_10028AE88 != -1)
        swift_once(&qword_10028AE88, sub_1000FF8A0);
      v21 = qword_100292038;
      v20 = unk_100292040;
      swift_bridgeObjectRetain(unk_100292040);
      v24 = sub_1001DEF4C(v21, v20, v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, v25);
      swift_bridgeObjectRelease(v20);
      _os_log_impl((void *)&_mh_execute_header, v16, v17, format, v18, 0xCu);
      swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v19, -1, -1);
      swift_slowDealloc(v18, -1, -1);
    }

    swift_beginAccess(v13, v25, 1, 0);
    v22 = *v13;
    *v13 = a1;
    swift_errorRelease(v22);
  }
  else
  {
    swift_beginAccess(a4 + 16, v25, 1, 0);
    v10 = *(_QWORD *)(a4 + 16);
    *(_QWORD *)(a4 + 16) = a1;
    swift_bridgeObjectRetain(a1);
    swift_bridgeObjectRelease(v10);
  }
  dispatch_group_leave(a3);
}

uint64_t sub_10010296C(uint64_t a1, void (*a2)(uint64_t, uint64_t, uint64_t), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[24];
  _BYTE v14[24];
  _BYTE v15[24];

  swift_beginAccess(a1 + 16, v15, 0, 0);
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    swift_errorRetain(v9);
    a2(v9, 0, 1);
    return swift_errorRelease(v9);
  }
  else
  {
    swift_beginAccess(a4 + 16, v14, 0, 0);
    v11 = *(_QWORD *)(a4 + 16);
    swift_beginAccess(a5 + 16, v13, 0, 0);
    v12 = *(_QWORD *)(a5 + 16);
    swift_bridgeObjectRetain(v11);
    swift_bridgeObjectRetain(v12);
    a2(v11, v12, 0);
    swift_bridgeObjectRelease(v12);
    return swift_bridgeObjectRelease(v11);
  }
}

void sub_100102A54(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, void (*a6)(_QWORD), uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v16;
  uint64_t v17;
  void *countAndFlagsBits;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  void *v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  Swift::String v38;
  Swift::String v39;
  Swift::String v40;
  Swift::String v41;
  unint64_t v42;
  Swift::String v43;
  Swift::String v44;
  Swift::String v45;
  Swift::String v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  NSObject *v62;
  os_log_type_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  Swift::String v67;
  Swift::String v68;
  Swift::String v69;
  Swift::String v70;
  unint64_t v71;
  Swift::String v72;
  uint64_t v73;
  Swift::String v74;
  Swift::String v75;
  Swift::String v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  NSObject *v81;
  os_log_type_t v82;
  uint8_t *v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t Strong;
  uint64_t v88;
  NSObject *v89;
  uint64_t v90;
  os_log_type_t v91;
  uint8_t *v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint8_t *v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  os_log_type_t v108;
  os_log_type_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  void (*v114)(void *);
  void (*v115)(_QWORD);
  uint64_t v116;
  uint64_t v117;
  Swift::String v118;
  uint64_t v119;
  unint64_t v120[2];
  void *v121;
  _QWORD v122[7];
  uint64_t v123;
  void *v124;
  uint64_t v125;
  void *v126;
  uint64_t v127;
  char v128;

  v118._countAndFlagsBits = a2;
  sub_1000249A0(a1, (uint64_t)v122, &qword_100292170);
  v16 = v122[0];
  sub_1000249A0(a1, (uint64_t)&v123, &qword_100292170);
  if ((v128 & 1) != 0)
  {
    v17 = v123;
    swift_errorRetain(v16);
    countAndFlagsBits = (void *)_convertErrorToNSError(_:)(v17);
    if (objc_msgSend(countAndFlagsBits, "ak_isAuthenticationErrorWithCode:", -7097))
    {
      if (qword_10028ADD8 != -1)
        swift_once(&qword_10028ADD8, sub_100046D78);
      v19 = type metadata accessor for Logger(0);
      v20 = sub_100005288(v19, (uint64_t)qword_1002A8A08);
      v21 = Logger.logObject.getter(v20);
      v22 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v21, v22))
      {
        v118._countAndFlagsBits = (uint64_t)countAndFlagsBits;
        v23 = (uint8_t *)swift_slowAlloc(12, -1);
        v24 = swift_slowAlloc(32, -1);
        v119 = v24;
        *(_DWORD *)v23 = 136315138;
        if (qword_10028AE88 != -1)
          swift_once(&qword_10028AE88, sub_1000FF8A0);
        v25 = qword_100292038;
        v26 = unk_100292040;
        swift_bridgeObjectRetain(unk_100292040);
        v121 = (void *)sub_1001DEF4C(v25, v26, &v119);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v121, v122);
        swift_bridgeObjectRelease(v26);
        _os_log_impl((void *)&_mh_execute_header, v21, v22, "%s - IdMS has disabled trusted contact data sync, returning early.", v23, 0xCu);
        swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v24, -1, -1);
        swift_slowDealloc(v23, -1, -1);

        countAndFlagsBits = (void *)v118._countAndFlagsBits;
      }
      else
      {

      }
      a6(0);
      sub_100109F18(a1);

    }
    else
    {
      if (qword_10028ADD8 != -1)
        swift_once(&qword_10028ADD8, sub_100046D78);
      v49 = type metadata accessor for Logger(0);
      sub_100005288(v49, (uint64_t)qword_1002A8A08);
      swift_errorRetain(v16);
      v50 = swift_errorRetain(v16);
      v51 = Logger.logObject.getter(v50);
      v52 = static os_log_type_t.error.getter(v51);
      if (os_log_type_enabled(v51, v52))
      {
        v118._countAndFlagsBits = (uint64_t)countAndFlagsBits;
        v115 = a6;
        v53 = swift_slowAlloc(22, -1);
        v54 = swift_slowAlloc(64, -1);
        v119 = v54;
        *(_DWORD *)v53 = 136315394;
        if (qword_10028AE88 != -1)
          swift_once(&qword_10028AE88, sub_1000FF8A0);
        v56 = qword_100292038;
        v55 = unk_100292040;
        swift_bridgeObjectRetain(unk_100292040);
        v121 = (void *)sub_1001DEF4C(v56, v55, &v119);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v121, v122);
        swift_bridgeObjectRelease(v55);
        *(_WORD *)(v53 + 12) = 2080;
        v121 = (void *)v17;
        swift_errorRetain(v16);
        v57 = sub_1000080B4(&qword_10028E850);
        v58 = String.init<A>(describing:)(&v121, v57);
        v60 = v59;
        v121 = (void *)sub_1001DEF4C(v58, v59, &v119);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v121, v122);
        swift_bridgeObjectRelease(v60);
        sub_100109F18(a1);
        sub_100109F18(a1);
        _os_log_impl((void *)&_mh_execute_header, v51, v52, "%s - error performing ContactsDataSync with IdMS - %s", (uint8_t *)v53, 0x16u);
        swift_arrayDestroy(v54, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v54, -1, -1);
        swift_slowDealloc(v53, -1, -1);

        a6 = v115;
        countAndFlagsBits = (void *)v118._countAndFlagsBits;
      }
      else
      {
        sub_100109F18(a1);
        sub_100109F18(a1);

      }
      swift_errorRetain(v16);
      a6(v17);
      sub_100109F18(a1);

      sub_100109F18(a1);
    }
    return;
  }
  v113 = a7;
  v114 = (void (*)(void *))a6;
  v27 = v123;
  v28 = v124;
  v29 = v126;
  v117 = v125;
  v111 = v127;
  v112 = a8;
  v30 = qword_10028ADC8;
  swift_bridgeObjectRetain(v124);
  swift_bridgeObjectRetain(v29);
  if (v30 != -1)
    swift_once(&qword_10028ADC8, sub_100046D2C);
  v31 = type metadata accessor for Logger(0);
  sub_100005288(v31, (uint64_t)qword_1002A89D8);
  swift_bridgeObjectRetain_n(v28, 2);
  swift_bridgeObjectRetain_n(v29, 2);
  swift_bridgeObjectRetain_n(a3, 2);
  v32 = swift_bridgeObjectRetain_n(a5, 2);
  v33 = Logger.logObject.getter(v32);
  v34 = static os_log_type_t.error.getter(v33);
  v116 = v27;
  if (os_log_type_enabled(v33, v34))
  {
    v108 = v34;
    v110 = v31;
    v35 = swift_slowAlloc(32, -1);
    v106 = swift_slowAlloc(96, -1);
    v121 = (void *)v106;
    *(_DWORD *)v35 = 136315650;
    if (qword_10028AE88 != -1)
      swift_once(&qword_10028AE88, sub_1000FF8A0);
    v36 = qword_100292038;
    v37 = unk_100292040;
    swift_bridgeObjectRetain(unk_100292040);
    v119 = sub_1001DEF4C(v36, v37, (uint64_t *)&v121);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v119, v120);
    swift_bridgeObjectRelease(v37);
    *(_WORD *)(v35 + 12) = 2080;
    v119 = 0;
    v120[0] = 0xE000000000000000;
    swift_bridgeObjectRetain(v28);
    swift_bridgeObjectRetain(v29);
    _StringGuts.grow(_:)(51);
    v38._countAndFlagsBits = 0xD000000000000016;
    v38._object = (void *)0x800000010020CCB0;
    String.append(_:)(v38);
    swift_bridgeObjectRetain(v28);
    v39._countAndFlagsBits = v116;
    v39._object = v28;
    String.append(_:)(v39);
    swift_bridgeObjectRelease(v28);
    v40._countAndFlagsBits = 0xD000000000000019;
    v40._object = (void *)0x800000010020CCD0;
    String.append(_:)(v40);
    swift_bridgeObjectRetain(v29);
    v41._countAndFlagsBits = v117;
    v41._object = v29;
    String.append(_:)(v41);
    swift_bridgeObjectRelease(v28);
    swift_bridgeObjectRelease_n(v29, 2);
    v42 = v120[0];
    v119 = sub_1001DEF4C(v119, v120[0], (uint64_t *)&v121);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v119, v120);
    swift_bridgeObjectRelease_n(v29, 2);
    swift_bridgeObjectRelease_n(v28, 2);
    swift_bridgeObjectRelease(v42);
    *(_WORD *)(v35 + 22) = 2080;
    v119 = 0;
    v120[0] = 0xE000000000000000;
    swift_bridgeObjectRetain(a3);
    swift_bridgeObjectRetain(a5);
    _StringGuts.grow(_:)(51);
    v43._countAndFlagsBits = 0xD000000000000016;
    v43._object = (void *)0x800000010020CCB0;
    String.append(_:)(v43);
    swift_bridgeObjectRetain(a3);
    v44._countAndFlagsBits = v118._countAndFlagsBits;
    v44._object = a3;
    String.append(_:)(v44);
    swift_bridgeObjectRelease(a3);
    v45._countAndFlagsBits = 0xD000000000000019;
    v45._object = (void *)0x800000010020CCD0;
    String.append(_:)(v45);
    swift_bridgeObjectRetain(a5);
    v46._countAndFlagsBits = a4;
    v46._object = a5;
    String.append(_:)(v46);
    swift_bridgeObjectRelease(a3);
    swift_bridgeObjectRelease_n(a5, 2);
    v47 = v120[0];
    v119 = sub_1001DEF4C(v119, v120[0], (uint64_t *)&v121);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v119, v120);
    swift_bridgeObjectRelease_n(a5, 2);
    swift_bridgeObjectRelease_n(a3, 2);
    swift_bridgeObjectRelease(v47);
    _os_log_impl((void *)&_mh_execute_header, v33, v108, "%s - <DM> Updated idmsListVersion – %s\ncloudListVersion – %s", (uint8_t *)v35, 0x20u);
    swift_arrayDestroy(v106, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v106, -1, -1);
    v48 = v35;
    v27 = v116;
    swift_slowDealloc(v48, -1, -1);

    v31 = v110;
  }
  else
  {

    swift_bridgeObjectRelease_n(a5, 2);
    swift_bridgeObjectRelease_n(a3, 2);
    swift_bridgeObjectRelease_n(v29, 2);
    swift_bridgeObjectRelease_n(v28, 2);
  }
  if (qword_10028ADD8 != -1)
    swift_once(&qword_10028ADD8, sub_100046D78);
  sub_100005288(v31, (uint64_t)qword_1002A8A08);
  swift_bridgeObjectRetain_n(v28, 2);
  swift_bridgeObjectRetain_n(v29, 2);
  swift_bridgeObjectRetain_n(a3, 2);
  v61 = swift_bridgeObjectRetain_n(a5, 2);
  v62 = Logger.logObject.getter(v61);
  v63 = static os_log_type_t.debug.getter(v62);
  if (!os_log_type_enabled(v62, v63))
  {

    swift_bridgeObjectRelease_n(a5, 2);
    swift_bridgeObjectRelease_n(a3, 2);
    swift_bridgeObjectRelease_n(v29, 2);
    swift_bridgeObjectRelease_n(v28, 2);
    v73 = v118._countAndFlagsBits;
    if (v27 != v118._countAndFlagsBits)
      goto LABEL_31;
LABEL_30:
    if (v28 == a3)
      goto LABEL_32;
    goto LABEL_31;
  }
  v109 = v63;
  v64 = swift_slowAlloc(32, -1);
  v107 = swift_slowAlloc(96, -1);
  v121 = (void *)v107;
  *(_DWORD *)v64 = 136315650;
  if (qword_10028AE88 != -1)
    swift_once(&qword_10028AE88, sub_1000FF8A0);
  v65 = qword_100292038;
  v66 = unk_100292040;
  swift_bridgeObjectRetain(unk_100292040);
  v119 = sub_1001DEF4C(v65, v66, (uint64_t *)&v121);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v119, v120);
  swift_bridgeObjectRelease(v66);
  *(_WORD *)(v64 + 12) = 2080;
  v119 = 0;
  v120[0] = 0xE000000000000000;
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRetain(v29);
  _StringGuts.grow(_:)(51);
  v67._countAndFlagsBits = 0xD000000000000016;
  v67._object = (void *)0x800000010020CCB0;
  String.append(_:)(v67);
  swift_bridgeObjectRetain(v28);
  v68._countAndFlagsBits = v116;
  v68._object = v28;
  String.append(_:)(v68);
  swift_bridgeObjectRelease(v28);
  v69._countAndFlagsBits = 0xD000000000000019;
  v69._object = (void *)0x800000010020CCD0;
  String.append(_:)(v69);
  swift_bridgeObjectRetain(v29);
  v70._countAndFlagsBits = v117;
  v70._object = v29;
  String.append(_:)(v70);
  swift_bridgeObjectRelease(v28);
  swift_bridgeObjectRelease_n(v29, 2);
  v71 = v120[0];
  v119 = sub_1001DEF4C(v119, v120[0], (uint64_t *)&v121);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v119, v120);
  swift_bridgeObjectRelease_n(v29, 2);
  swift_bridgeObjectRelease_n(v28, 2);
  swift_bridgeObjectRelease(v71);
  *(_WORD *)(v64 + 22) = 2080;
  v119 = 0;
  v120[0] = 0xE000000000000000;
  swift_bridgeObjectRetain(a3);
  swift_bridgeObjectRetain(a5);
  _StringGuts.grow(_:)(51);
  v72._countAndFlagsBits = 0xD000000000000016;
  v72._object = (void *)0x800000010020CCB0;
  String.append(_:)(v72);
  swift_bridgeObjectRetain(a3);
  v73 = v118._countAndFlagsBits;
  v74._countAndFlagsBits = v118._countAndFlagsBits;
  v74._object = a3;
  String.append(_:)(v74);
  swift_bridgeObjectRelease(a3);
  v75._countAndFlagsBits = 0xD000000000000019;
  v75._object = (void *)0x800000010020CCD0;
  String.append(_:)(v75);
  swift_bridgeObjectRetain(a5);
  v76._countAndFlagsBits = a4;
  v76._object = a5;
  String.append(_:)(v76);
  swift_bridgeObjectRelease(a3);
  swift_bridgeObjectRelease_n(a5, 2);
  v77 = v120[0];
  v119 = sub_1001DEF4C(v119, v120[0], (uint64_t *)&v121);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v119, v120);
  swift_bridgeObjectRelease_n(a5, 2);
  swift_bridgeObjectRelease_n(a3, 2);
  swift_bridgeObjectRelease(v77);
  _os_log_impl((void *)&_mh_execute_header, v62, v109, "%s - Updated idmsListVersion – %s\ncloudListVersion – %s", (uint8_t *)v64, 0x20u);
  swift_arrayDestroy(v107, 3, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v107, -1, -1);
  v78 = v64;
  v27 = v116;
  swift_slowDealloc(v78, -1, -1);

  if (v116 == v118._countAndFlagsBits)
    goto LABEL_30;
LABEL_31:
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(v27, v28, v73, a3, 0) & 1) == 0)
  {
    swift_bridgeObjectRelease(v29);
    swift_bridgeObjectRelease(v28);
    goto LABEL_46;
  }
LABEL_32:
  if (v117 == a4 && v29 == a5)
  {
    swift_bridgeObjectRelease(a5);
    v79 = swift_bridgeObjectRelease(v28);
LABEL_36:
    v81 = Logger.logObject.getter(v79);
    v82 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v81, v82))
    {
      v83 = (uint8_t *)swift_slowAlloc(12, -1);
      v84 = swift_slowAlloc(32, -1);
      v119 = v84;
      *(_DWORD *)v83 = 136315138;
      if (qword_10028AE88 != -1)
        swift_once(&qword_10028AE88, sub_1000FF8A0);
      v85 = qword_100292038;
      v86 = unk_100292040;
      swift_bridgeObjectRetain(unk_100292040);
      v121 = (void *)sub_1001DEF4C(v85, v86, &v119);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v121, v122);
      swift_bridgeObjectRelease(v86);
      _os_log_impl((void *)&_mh_execute_header, v81, v82, "%s - IdMS List version matches with cloud storage! All good!", v83, 0xCu);
      swift_arrayDestroy(v84, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v84, -1, -1);
      swift_slowDealloc(v83, -1, -1);
    }

    v114(0);
    return;
  }
  v80 = _stringCompareWithSmolCheck(_:_:expecting:)(v117, v29, a4, a5, 0);
  swift_bridgeObjectRelease(v29);
  v79 = swift_bridgeObjectRelease(v28);
  if ((v80 & 1) != 0)
    goto LABEL_36;
LABEL_46:
  swift_beginAccess(v112 + 16, &v119, 0, 0);
  Strong = swift_weakLoadStrong(v112 + 16);
  v88 = Logger.logObject.getter(Strong);
  v89 = v88;
  v90 = (uint64_t)v114;
  if (Strong)
  {
    v91 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v89, v91))
    {
      v92 = (uint8_t *)swift_slowAlloc(12, -1);
      v93 = swift_slowAlloc(32, -1);
      v121 = (void *)v93;
      *(_DWORD *)v92 = 136315138;
      if (qword_10028AE88 != -1)
        swift_once(&qword_10028AE88, sub_1000FF8A0);
      v94 = qword_100292038;
      v95 = unk_100292040;
      swift_bridgeObjectRetain(unk_100292040);
      v118._object = (void *)sub_1001DEF4C(v94, v95, (uint64_t *)&v121);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v118._object, &v119);
      swift_bridgeObjectRelease(v95);
      _os_log_impl((void *)&_mh_execute_header, v89, v91, "%s - IdMS list version does not match with cloud storage, handling requested custodian operations", v92, 0xCu);
      swift_arrayDestroy(v93, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v93, -1, -1);
      swift_slowDealloc(v92, -1, -1);

      v90 = (uint64_t)v114;
    }
    else
    {

    }
    sub_100103BFC(v111, a9, v90, v113);
    swift_release(Strong);
  }
  else
  {
    v96 = static os_log_type_t.error.getter(v88);
    if (os_log_type_enabled(v89, (os_log_type_t)v96))
    {
      v97 = (uint8_t *)swift_slowAlloc(12, -1);
      v98 = swift_slowAlloc(32, -1);
      v121 = (void *)v98;
      *(_DWORD *)v97 = 136315138;
      if (qword_10028AE88 != -1)
        swift_once(&qword_10028AE88, sub_1000FF8A0);
      v99 = qword_100292038;
      v100 = unk_100292040;
      swift_bridgeObjectRetain(unk_100292040);
      v118._object = (void *)sub_1001DEF4C(v99, v100, (uint64_t *)&v121);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v118._object, &v119);
      swift_bridgeObjectRelease(v100);
      _os_log_impl((void *)&_mh_execute_header, v89, (os_log_type_t)v96, "%s - performContactsDataSyncWithIdMS: self is no longer retained, nothing to do here", v97, 0xCu);
      swift_arrayDestroy(v98, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v98, -1, -1);
      swift_slowDealloc(v97, -1, -1);
    }

    type metadata accessor for AACustodianError(0);
    v102 = v101;
    v118._object = (void *)-7000;
    v103 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
    v104 = sub_100005150((unint64_t *)&qword_10028B640, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianError, (uint64_t)&unk_100218378);
    _BridgedStoredNSError.init(_:userInfo:)(&v121, &v118._object, v103, v102, v104);
    v105 = v121;
    v114(v121);

  }
}

void sub_100103BFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  __n128 v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  id v37;
  int64_t v38;
  unint64_t v39;
  int64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  void (*v75)(void (*)(uint64_t), uint64_t);
  uint64_t v76;
  char v77;
  uint64_t v78;
  id v79;
  NSObject *v80;
  os_log_type_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  id v88;
  os_log_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  void *v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  void *v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  NSObject *v109;
  _QWORD *v110;
  uint64_t v111;
  id v112;
  os_log_t v113;
  uint64_t v114;
  int64_t v115;
  char *v116;
  __n128 v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  int64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  NSObject *v137;
  uint64_t v138;
  uint64_t v139;
  int64_t v140;
  uint64_t v141;
  _QWORD *v142;
  uint64_t aBlock[5];
  _QWORD *v144;

  v122 = a4;
  v121 = a3;
  v133 = a2;
  v139 = *v4;
  v128 = type metadata accessor for DispatchWorkItemFlags(0);
  v127 = *(_QWORD *)(v128 - 8);
  __chkstk_darwin(v128, v6);
  v126 = (char *)&v111 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v125 = type metadata accessor for DispatchQoS(0);
  v124 = *(_QWORD *)(v125 - 8);
  __chkstk_darwin(v125, v8);
  v123 = (char *)&v111 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v120 = type metadata accessor for DispatchQoS.QoSClass(0);
  v119 = *(_QWORD *)(v120 - 8);
  __chkstk_darwin(v120, v10);
  v118 = (char *)&v111 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v141 = type metadata accessor for UUID(0);
  v12 = *(_QWORD *)(v141 - 8);
  __chkstk_darwin(v141, v13);
  v15 = (char *)&v111 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_1000080B4(&qword_100292178);
  v18 = __chkstk_darwin(v16, v17);
  v20 = (char *)&v111 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18, v21);
  v23 = (char *)&v111 - v22;
  v137 = dispatch_group_create();
  v24 = swift_allocObject(&unk_100267DB0, 24, 7);
  v25 = sub_10001577C((uint64_t)_swiftEmptyArrayStorage);
  v138 = v24;
  *(_QWORD *)(v24 + 16) = v25;
  v26 = *(_QWORD *)(a1 + 64);
  v130 = a1 + 64;
  v27 = 1 << *(_BYTE *)(a1 + 32);
  v28 = -1;
  if (v27 < 64)
    v28 = ~(-1 << v27);
  v29 = v28 & v26;
  v136 = AKTrustedContactsSyncOperationDelete;
  v131 = AKTrustedContactsSyncOperationUpdateRKC;
  v129 = AKTrustedContactsSyncOperationFinish;
  v132 = (unint64_t)(v27 + 63) >> 6;
  v115 = v132 - 1;
  v134 = a1;
  v30 = swift_bridgeObjectRetain(a1);
  v140 = 0;
  v30.n128_u64[0] = 136315138;
  v117 = v30;
  v116 = (char *)&type metadata for Any + 8;
  if (!v29)
    goto LABEL_6;
LABEL_4:
  v31 = __clz(__rbit64(v29));
  v29 &= v29 - 1;
  v32 = v31 | (v140 << 6);
  while (2)
  {
    v33 = v134;
    (*(void (**)(char *, unint64_t, uint64_t))(v12 + 16))(v20, *(_QWORD *)(v134 + 48) + *(_QWORD *)(v12 + 72) * v32, v141);
    v34 = *(_QWORD *)(v33 + 56);
    v35 = sub_1000080B4(&qword_100292180);
    v36 = *(void **)(v34 + 8 * v32);
    *(_QWORD *)&v20[*(int *)(v35 + 48)] = v36;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(v20, 0, 1, v35);
    v37 = v36;
    while (1)
    {
      sub_1000249A0((uint64_t)v20, (uint64_t)v23, &qword_100292178);
      v42 = sub_1000080B4(&qword_100292180);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 48))(v23, 1, v42) == 1)
      {
        swift_release(v134);
        sub_1000067D4(0, (unint64_t *)&qword_100295A10, OS_dispatch_queue_ptr);
        v91 = v119;
        v92 = v118;
        v93 = v120;
        (*(void (**)(char *, _QWORD, uint64_t))(v119 + 104))(v118, enum case for DispatchQoS.QoSClass.default(_:), v120);
        v94 = (void *)static OS_dispatch_queue.global(qos:)(v92);
        (*(void (**)(char *, uint64_t))(v91 + 8))(v92, v93);
        v95 = (_QWORD *)swift_allocObject(&unk_100267DD8, 48, 7);
        v96 = v138;
        v97 = v121;
        v95[2] = v138;
        v95[3] = v97;
        v98 = v122;
        v99 = v139;
        v95[4] = v122;
        v95[5] = v99;
        aBlock[4] = (uint64_t)sub_100109FD0;
        v144 = v95;
        aBlock[0] = (uint64_t)_NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        aBlock[2] = (uint64_t)sub_1000051D0;
        aBlock[3] = (uint64_t)&unk_100267DF0;
        v100 = _Block_copy(aBlock);
        swift_retain(v96);
        v101 = swift_retain(v98);
        v102 = v123;
        static DispatchQoS.unspecified.getter(v101);
        v142 = _swiftEmptyArrayStorage;
        v103 = sub_100005150((unint64_t *)&qword_10028CD20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
        v104 = sub_1000080B4((uint64_t *)&unk_100295A00);
        v105 = sub_1000077E0((unint64_t *)&qword_10028CD30, (uint64_t *)&unk_100295A00, (uint64_t)&protocol conformance descriptor for [A]);
        v106 = v126;
        v107 = v104;
        v108 = v128;
        dispatch thunk of SetAlgebra.init<A>(_:)(&v142, v107, v105, v128, v103);
        v109 = v137;
        OS_dispatch_group.notify(qos:flags:queue:execute:)(v102, v106, v94, v100);
        _Block_release(v100);

        (*(void (**)(char *, uint64_t))(v127 + 8))(v106, v108);
        (*(void (**)(char *, uint64_t))(v124 + 8))(v102, v125);
        v110 = v144;
        swift_release(v96);
        swift_release(v110);
        return;
      }
      v43 = *(void **)&v23[*(int *)(v42 + 48)];
      (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v15, v23, v141);
      v44 = static String._unconditionallyBridgeFromObjectiveC(_:)(v136);
      v46 = v45;
      v47 = static String._unconditionallyBridgeFromObjectiveC(_:)(v43);
      if (v44 == v47 && v46 == v48)
      {
        v52 = swift_bridgeObjectRelease_n(v46, 2);
LABEL_39:
        __chkstk_darwin(v52, v53);
        v72 = &v111 - 6;
        *(&v111 - 4) = v135;
        *(&v111 - 3) = (uint64_t)v15;
        *(&v111 - 2) = v133;
        v73 = (uint64_t)v43;
        v74 = (uint64_t)v15;
        v75 = (void (*)(void (*)(uint64_t), uint64_t))sub_100109FF0;
        goto LABEL_44;
      }
      v50 = v48;
      v51 = _stringCompareWithSmolCheck(_:_:expecting:)(v44, v46, v47, v48, 0);
      swift_bridgeObjectRelease(v46);
      v52 = swift_bridgeObjectRelease(v50);
      if ((v51 & 1) != 0)
        goto LABEL_39;
      v54 = static String._unconditionallyBridgeFromObjectiveC(_:)(v131);
      v56 = v55;
      v57 = static String._unconditionallyBridgeFromObjectiveC(_:)(v43);
      if (v54 == v57 && v56 == v58)
      {
        v62 = swift_bridgeObjectRelease_n(v56, 2);
LABEL_41:
        __chkstk_darwin(v62, v63);
        v72 = &v111 - 4;
        v76 = v135;
        *(&v111 - 2) = (uint64_t)v15;
        *(&v111 - 1) = v76;
        v73 = (uint64_t)v43;
        v74 = (uint64_t)v15;
        v75 = (void (*)(void (*)(uint64_t), uint64_t))sub_100109FE8;
        goto LABEL_44;
      }
      v60 = v58;
      v61 = _stringCompareWithSmolCheck(_:_:expecting:)(v54, v56, v57, v58, 0);
      swift_bridgeObjectRelease(v56);
      v62 = swift_bridgeObjectRelease(v60);
      if ((v61 & 1) != 0)
        goto LABEL_41;
      v64 = static String._unconditionallyBridgeFromObjectiveC(_:)(v129);
      v66 = v65;
      v68 = static String._unconditionallyBridgeFromObjectiveC(_:)(v43);
      v69 = v67;
      if (v64 == v68 && v66 == v67)
      {
        v70 = swift_bridgeObjectRelease_n(v66, 2);
      }
      else
      {
        v77 = _stringCompareWithSmolCheck(_:_:expecting:)(v64, v66, v68, v67, 0);
        swift_bridgeObjectRelease(v66);
        v70 = swift_bridgeObjectRelease(v69);
        if ((v77 & 1) == 0)
        {
          if (qword_10028ADD8 != -1)
            swift_once(&qword_10028ADD8, sub_100046D78);
          v78 = type metadata accessor for Logger(0);
          sub_100005288(v78, (uint64_t)qword_1002A8A08);
          v79 = v43;
          v80 = Logger.logObject.getter(v79);
          v81 = static os_log_type_t.error.getter(v80);
          if (os_log_type_enabled(v80, v81))
          {
            v82 = swift_slowAlloc(12, -1);
            v112 = v79;
            v83 = v82;
            v84 = swift_slowAlloc(32, -1);
            v113 = v80;
            v114 = v84;
            aBlock[0] = v84;
            *(_DWORD *)v83 = v117.n128_u32[0];
            v85 = static String._unconditionallyBridgeFromObjectiveC(_:)(v43);
            v87 = v86;
            *(_QWORD *)(v83 + 4) = sub_1001DEF4C(v85, v86, aBlock);
            v88 = v112;

            swift_bridgeObjectRelease(v87);
            v89 = v113;
            _os_log_impl((void *)&_mh_execute_header, v113, v81, "Unexpected operation type received: %s", (uint8_t *)v83, 0xCu);
            v90 = v114;
            swift_arrayDestroy(v114, 1, v116);
            swift_slowDealloc(v90, -1, -1);
            swift_slowDealloc(v83, -1, -1);

          }
          else
          {

          }
          goto LABEL_45;
        }
      }
      __chkstk_darwin(v70, v71);
      v72 = &v111 - 6;
      *(&v111 - 4) = v135;
      *(&v111 - 3) = (uint64_t)v15;
      *(&v111 - 2) = v133;
      v73 = (uint64_t)v43;
      v74 = (uint64_t)v15;
      v75 = (void (*)(void (*)(uint64_t), uint64_t))sub_100109FDC;
LABEL_44:
      sub_100104620(v73, v74, v75, (uint64_t)v72, v137, v138, v139);

LABEL_45:
      (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v141);
      if (v29)
        goto LABEL_4;
LABEL_6:
      v38 = v140 + 1;
      if (__OFADD__(v140, 1))
      {
        __break(1u);
        goto LABEL_54;
      }
      if (v38 < v132)
      {
        v39 = *(_QWORD *)(v130 + 8 * v38);
        if (v39)
          goto LABEL_9;
        v40 = v140 + 2;
        ++v140;
        if (v38 + 1 < v132)
        {
          v39 = *(_QWORD *)(v130 + 8 * v40);
          if (v39)
            goto LABEL_12;
          v140 = v38 + 1;
          if (v38 + 2 < v132)
          {
            v39 = *(_QWORD *)(v130 + 8 * (v38 + 2));
            if (v39)
            {
              v38 += 2;
              goto LABEL_9;
            }
            v40 = v38 + 3;
            v140 = v38 + 2;
            if (v38 + 3 < v132)
              break;
          }
        }
      }
LABEL_23:
      v41 = sub_1000080B4(&qword_100292180);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 56))(v20, 1, 1, v41);
      v29 = 0;
    }
    v39 = *(_QWORD *)(v130 + 8 * v40);
    if (v39)
    {
LABEL_12:
      v38 = v40;
LABEL_9:
      v29 = (v39 - 1) & v39;
      v32 = __clz(__rbit64(v39)) + (v38 << 6);
      v140 = v38;
      continue;
    }
    break;
  }
  while (1)
  {
    v38 = v40 + 1;
    if (__OFADD__(v40, 1))
      break;
    if (v38 >= v132)
    {
      v140 = v115;
      goto LABEL_23;
    }
    v39 = *(_QWORD *)(v130 + 8 * v38);
    ++v40;
    if (v39)
      goto LABEL_9;
  }
LABEL_54:
  __break(1u);
}

void sub_100104620(uint64_t a1, uint64_t a2, void (*a3)(void (*)(uint64_t a1), uint64_t), uint64_t a4, NSObject *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  _BOOL4 v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  uint64_t inited;
  NSString v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  dispatch_group_t v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  id v58;
  NSObject *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  void (*v64)(char *, uint64_t, uint64_t);
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(void (*)(uint64_t), uint64_t);
  unint64_t v71;
  unint64_t v72;
  dispatch_group_t v73;
  uint64_t v74;
  uint64_t v75;
  char v76[64];

  v67 = a7;
  v68 = a6;
  v73 = a5;
  v69 = a4;
  v70 = a3;
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  v13 = __chkstk_darwin(v9, v12);
  v66 = (char *)&v60 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13, v14);
  v16 = (char *)&v60 - v15;
  v63 = (void *)a1;
  v17 = sub_10010238C(a1);
  v19 = v18;
  if (qword_10028ADD8 != -1)
    swift_once(&qword_10028ADD8, sub_100046D78);
  v71 = v17;
  v20 = type metadata accessor for Logger(0);
  sub_100005288(v20, (uint64_t)qword_1002A8A08);
  v64 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v65 = a2;
  v64(v16, a2, v9);
  v21 = swift_bridgeObjectRetain_n(v19, 2);
  v22 = Logger.logObject.getter(v21);
  v23 = static os_log_type_t.info.getter();
  v24 = os_log_type_enabled(v22, v23);
  v72 = v19;
  if (v24)
  {
    v62 = v10;
    v25 = swift_slowAlloc(32, -1);
    v61 = swift_slowAlloc(96, -1);
    v75 = v61;
    *(_DWORD *)v25 = 136315650;
    if (qword_10028AE88 != -1)
      swift_once(&qword_10028AE88, sub_1000FF8A0);
    v27 = qword_100292038;
    v26 = unk_100292040;
    swift_bridgeObjectRetain(unk_100292040);
    v74 = sub_1001DEF4C(v27, v26, &v75);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, &v75);
    swift_bridgeObjectRelease(v26);
    *(_WORD *)(v25 + 12) = 2080;
    v28 = v72;
    swift_bridgeObjectRetain(v72);
    v74 = sub_1001DEF4C(v71, v28, &v75);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, &v75);
    swift_bridgeObjectRelease_n(v28, 3);
    *(_WORD *)(v25 + 22) = 2080;
    v29 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v30 = dispatch thunk of CustomStringConvertible.description.getter(v9, v29);
    v32 = v31;
    v74 = sub_1001DEF4C(v30, v31, &v75);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, &v75);
    swift_bridgeObjectRelease(v32);
    v10 = v62;
    (*(void (**)(char *, uint64_t))(v62 + 8))(v16, v9);
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "%s - requested to %s for %s", (uint8_t *)v25, 0x20u);
    v33 = v61;
    swift_arrayDestroy(v61, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v33, -1, -1);
    swift_slowDealloc(v25, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n(v19, 2);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v16, v9);
  }

  dispatch_group_enter(v73);
  sub_10010259C((uint64_t)v63);
  v35 = v34;
  v36 = objc_allocWithZone((Class)type metadata accessor for TrustedContactsSyncOperationsCAEvent(0));
  v37 = sub_1000080B4(&qword_10028E7F8);
  inited = swift_initStackObject(v37, v76);
  *(_OWORD *)(inited + 16) = xmmword_100218E30;
  *(_QWORD *)(inited + 32) = 0x656D614E706FLL;
  *(_QWORD *)(inited + 40) = 0xE600000000000000;
  v39 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v35);
  *(_QWORD *)(inited + 48) = v39;
  v40 = sub_10001612C(inited);
  v63 = (void *)AAFTimedAnalyticsEvent.init(eventName:initialData:)(0xD000000000000034, 0x800000010020CD70, v40);
  v41 = v66;
  v64(v66, v65, v9);
  v42 = *(unsigned __int8 *)(v10 + 80);
  v43 = (v42 + 16) & ~v42;
  v44 = (v11 + v43 + 7) & 0xFFFFFFFFFFFFFFF8;
  v45 = (v44 + 23) & 0xFFFFFFFFFFFFFFF8;
  v46 = v9;
  v47 = v10;
  v48 = (v45 + 15) & 0xFFFFFFFFFFFFFFF8;
  v49 = (v48 + 15) & 0xFFFFFFFFFFFFFFF8;
  v50 = (v49 + 15) & 0xFFFFFFFFFFFFFFF8;
  v51 = swift_allocObject(&unk_100267E28, v50 + 8, v42 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v47 + 32))(v51 + v43, v41, v46);
  v52 = (unint64_t *)(v51 + v44);
  v53 = v72;
  v54 = v73;
  *v52 = v71;
  v52[1] = v53;
  v55 = v67;
  v56 = v68;
  *(_QWORD *)(v51 + v45) = v68;
  v57 = v63;
  *(_QWORD *)(v51 + v48) = v63;
  *(_QWORD *)(v51 + v49) = v54;
  *(_QWORD *)(v51 + v50) = v55;
  v58 = v57;
  swift_retain(v56);
  v59 = v54;
  v70(sub_10010A0F0, v51);
  swift_release(v51);

}

void sub_100104AEC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, NSObject *a7)
{
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  void *v37;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v39;
  uint64_t v40;
  os_log_type_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  uint64_t v46[3];
  uint64_t v47;
  uint64_t v48;

  v12 = UUID.uuidString.getter(a1);
  v14 = v13;
  if (a1)
  {
    swift_errorRetain(a1);
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v15 = (uint64_t *)(a5 + 16);
    v16 = type metadata accessor for Logger(0);
    sub_100005288(v16, (uint64_t)qword_1002A8A08);
    swift_errorRetain(a1);
    swift_bridgeObjectRetain(a4);
    swift_bridgeObjectRetain(v14);
    swift_errorRetain(a1);
    swift_bridgeObjectRetain(a4);
    swift_bridgeObjectRetain(v14);
    v18 = Logger.logObject.getter(v17);
    v19 = static os_log_type_t.error.getter(v18);
    if (os_log_type_enabled(v18, v19))
    {
      v41 = v19;
      v20 = a3;
      v43 = v12;
      v45 = a7;
      v21 = swift_slowAlloc(42, -1);
      v40 = swift_slowAlloc(128, -1);
      v46[0] = v40;
      *(_DWORD *)v21 = 136315906;
      if (qword_10028AE88 != -1)
        swift_once(&qword_10028AE88, sub_1000FF8A0);
      v23 = qword_100292038;
      v22 = unk_100292040;
      swift_bridgeObjectRetain(unk_100292040);
      v47 = sub_1001DEF4C(v23, v22, v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48);
      swift_bridgeObjectRelease(v22);
      *(_WORD *)(v21 + 12) = 2080;
      swift_bridgeObjectRetain(a4);
      v47 = sub_1001DEF4C(v20, a4, v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48);
      swift_bridgeObjectRelease_n(a4, 3);
      *(_WORD *)(v21 + 22) = 2080;
      swift_bridgeObjectRetain(v14);
      v47 = sub_1001DEF4C(v43, v14, v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48);
      swift_bridgeObjectRelease_n(v14, 3);
      *(_WORD *)(v21 + 32) = 2080;
      v47 = a1;
      swift_errorRetain(a1);
      v24 = sub_1000080B4(&qword_10028E850);
      v25 = String.init<A>(describing:)(&v47, v24);
      v27 = v26;
      v47 = sub_1001DEF4C(v25, v26, v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48);
      swift_bridgeObjectRelease(v27);
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, v18, v41, "%s - failed to %s (%s): %s", (uint8_t *)v21, 0x2Au);
      swift_arrayDestroy(v40, 4, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v40, -1, -1);
      v28 = v21;
      v12 = v43;
      swift_slowDealloc(v28, -1, -1);

      a7 = v45;
    }
    else
    {
      swift_bridgeObjectRelease_n(v14, 2);
      swift_bridgeObjectRelease_n(a4, 2);
      swift_errorRelease(a1);
      swift_errorRelease(a1);

    }
    swift_beginAccess(v15, v46, 33, 0);
    swift_errorRetain(a1);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v15);
    v47 = *v15;
    *v15 = 0x8000000000000000;
    sub_10001F710(a1, v12, v14, isUniquelyReferenced_nonNull_native);
    v39 = *v15;
    *v15 = v47;
    swift_bridgeObjectRelease(v14);
    swift_bridgeObjectRelease(v39);
    swift_endAccess(v46);
    swift_errorRelease(a1);
    v37 = (void *)_convertErrorToNSError(_:)(a1);
  }
  else
  {
    v42 = a3;
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v29 = type metadata accessor for Logger(0);
    sub_100005288(v29, (uint64_t)qword_1002A8A08);
    swift_bridgeObjectRetain_n(a4, 2);
    swift_bridgeObjectRetain(v14);
    v31 = Logger.logObject.getter(v30);
    v32 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v31, v32))
    {
      v44 = v12;
      v33 = swift_slowAlloc(32, -1);
      v34 = swift_slowAlloc(96, -1);
      v46[0] = v34;
      *(_DWORD *)v33 = 136315650;
      if (qword_10028AE88 != -1)
        swift_once(&qword_10028AE88, sub_1000FF8A0);
      v35 = qword_100292038;
      v36 = unk_100292040;
      swift_bridgeObjectRetain(unk_100292040);
      v47 = sub_1001DEF4C(v35, v36, v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48);
      swift_bridgeObjectRelease(v36);
      *(_WORD *)(v33 + 12) = 2080;
      swift_bridgeObjectRetain(a4);
      v47 = sub_1001DEF4C(v42, a4, v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48);
      swift_bridgeObjectRelease_n(a4, 3);
      *(_WORD *)(v33 + 22) = 2080;
      swift_bridgeObjectRetain(v14);
      v47 = sub_1001DEF4C(v44, v14, v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48);
      swift_bridgeObjectRelease_n(v14, 3);
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "%s - successfully completed %s operation for %s", (uint8_t *)v33, 0x20u);
      swift_arrayDestroy(v34, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v34, -1, -1);
      swift_slowDealloc(v33, -1, -1);

      v37 = 0;
    }
    else
    {

      swift_bridgeObjectRelease_n(v14, 2);
      swift_bridgeObjectRelease_n(a4, 2);
      v37 = 0;
    }
  }
  sub_100163618(a1 == 0, (uint64_t)v37);

  dispatch_group_leave(a7);
}

uint64_t sub_100105130(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  id v14;
  id v15;
  Class isa;
  void **v17;
  _QWORD v20[5];

  v5 = v4;
  v9 = sub_1000080B4(&qword_10028CD18);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  v13 = (char *)&v20[-1] - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = objc_msgSend(objc_allocWithZone((Class)AKCustodianContext), "init");
  v15 = objc_msgSend(a2, "aa_altDSID");
  objc_msgSend(v14, "setAltDSID:", v15);

  isa = UUID._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v14, "setCustodianUUID:", isa);

  if (objc_msgSend(v14, "respondsToSelector:", Selector.init(_:)(0xD000000000000015, 0x800000010020CD50)))objc_msgSend(v14, "setCustodianSyncAction:", 1);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, v5 + OBJC_IVAR____TtC13appleaccountd23TrustedContactsDataSync__idmsRequestController, v9);
  Dependency.wrappedValue.getter(v20, v9);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  v17 = (void **)sub_10000732C(v20, v20[3]);
  sub_10004401C((uint64_t)v14, a3, a4, *v17);

  return sub_100006F58(v20);
}

uint64_t sub_1001052E0(void (*a1)(uint64_t), void (*a2)(uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  _QWORD v21[5];

  v8 = sub_1000080B4(&qword_10028E840);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v12 = (char *)&v21[-1] - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (int *)type metadata accessor for KeyRepairContext(0);
  __chkstk_darwin(v13, v14);
  v16 = (char *)&v21[-1] - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for UUID(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v16, a3, v17);
  v16[v13[5]] = 0;
  v16[v13[6]] = 1;
  v18 = &v16[v13[7]];
  *(_QWORD *)v18 = 0;
  *((_QWORD *)v18 + 1) = 0;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, a4 + OBJC_IVAR____TtC13appleaccountd23TrustedContactsDataSync__keyRepair, v8);
  Dependency.wrappedValue.getter(v21, v8);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  sub_10000732C(v21, v21[3]);
  sub_1000319C8((uint64_t)v16, a1, a2);
  sub_100028388((uint64_t)v16, type metadata accessor for KeyRepairContext);
  return sub_100006F58(v21);
}

uint64_t sub_10010545C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  id v19;
  _QWORD v22[5];

  v5 = v4;
  v10 = *v4;
  v11 = sub_1000080B4(&qword_10028C448);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11, v13);
  v15 = (char *)&v22[-1] - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, (uint64_t)v5 + OBJC_IVAR____TtC13appleaccountd23TrustedContactsDataSync__custodianStorage, v11);
  Dependency.wrappedValue.getter(v22, v11);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  sub_10000732C(v22, v22[3]);
  v16 = swift_allocObject(&unk_100267BA8, 24, 7);
  swift_weakInit(v16 + 16, v5);
  v17 = (_QWORD *)swift_allocObject(&unk_100267E50, 56, 7);
  v17[2] = v16;
  v17[3] = a3;
  v17[4] = a4;
  v17[5] = a2;
  v17[6] = v10;
  v18 = swift_allocObject(&unk_100267E78, 32, 7);
  *(_QWORD *)(v18 + 16) = sub_10010A1A8;
  *(_QWORD *)(v18 + 24) = v17;
  swift_retain(v16);
  swift_retain(a4);
  v19 = a2;
  swift_retain(v17);
  sub_1001BD630(a1, (uint64_t)sub_10003B8CC, v18);
  swift_release(v16);
  swift_release(v17);
  swift_release(v18);
  return sub_100006F58(v22);
}

void sub_1001055F8(uint64_t a1, void (*a2)(_QWORD))
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t inited;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  id v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  id v26;
  void (*v27)(_QWORD);
  _BYTE v28[24];
  _BYTE v29[80];
  uint64_t v30;
  void *v31;
  _BYTE v32[32];

  v4 = (uint64_t *)(a1 + 16);
  swift_beginAccess(a1 + 16, v32, 0, 0);
  if (*(_QWORD *)(*(_QWORD *)(a1 + 16) + 16))
  {
    type metadata accessor for AAError(0);
    v6 = v5;
    v30 = -4408;
    v7 = sub_1000080B4(&qword_10028BB68);
    inited = swift_initStackObject(v7, v29);
    *(_OWORD *)(inited + 16) = xmmword_100218E30;
    *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(AAPartialErrorsByNameKey);
    *(_QWORD *)(inited + 40) = v9;
    swift_beginAccess(v4, v28, 0, 0);
    v10 = *v4;
    *(_QWORD *)(inited + 72) = sub_1000080B4((uint64_t *)&unk_10028CD40);
    *(_QWORD *)(inited + 48) = v10;
    swift_bridgeObjectRetain(v10);
    v11 = sub_100015894(inited);
    v12 = sub_100005150((unint64_t *)&qword_10028B6B0, (uint64_t (*)(uint64_t))type metadata accessor for AAError, (uint64_t)&unk_100218588);
    _BridgedStoredNSError.init(_:userInfo:)(&v31, &v30, v11, v6, v12);
    v13 = v31;
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v14 = type metadata accessor for Logger(0);
    sub_100005288(v14, (uint64_t)qword_1002A8A08);
    v15 = v13;
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.error.getter(v16);
    if (os_log_type_enabled(v16, v17))
    {
      v27 = a2;
      v18 = swift_slowAlloc(22, -1);
      v19 = swift_slowAlloc(64, -1);
      v31 = (void *)v19;
      *(_DWORD *)v18 = 136315394;
      if (qword_10028AE88 != -1)
        swift_once(&qword_10028AE88, sub_1000FF8A0);
      v21 = qword_100292038;
      v20 = unk_100292040;
      swift_bridgeObjectRetain(unk_100292040);
      v30 = sub_1001DEF4C(v21, v20, (uint64_t *)&v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31);
      swift_bridgeObjectRelease(v20);
      *(_WORD *)(v18 + 12) = 2080;
      v30 = (uint64_t)v15;
      v22 = v15;
      v23 = String.init<A>(describing:)(&v30, v6);
      v25 = v24;
      v30 = sub_1001DEF4C(v23, v24, (uint64_t *)&v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31);

      swift_bridgeObjectRelease(v25);
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "%s - failed to handle requested custodian operations: %s", (uint8_t *)v18, 0x16u);
      swift_arrayDestroy(v19, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v19, -1, -1);
      swift_slowDealloc(v18, -1, -1);

      a2 = v27;
    }
    else
    {

    }
    v26 = v15;
    a2(v15);

  }
  else
  {
    a2(0);
  }
}

void sub_100105944(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4, void *a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t Strong;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  void *v36;
  id v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  NSString v41;
  uint64_t v42;
  Class isa;
  Class v44;
  char *v45;
  unint64_t v46;
  uint64_t v47;
  void **v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(uint64_t);
  uint64_t v52[5];
  uint64_t v53;
  _BYTE v54[24];

  v50 = a4;
  v51 = a3;
  v8 = sub_1000080B4(&qword_10028CD18);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v12 = (char *)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for CustodianshipRecords(0);
  __chkstk_darwin(v13, v14);
  v16 = (char *)&v49 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_1000080B4((uint64_t *)&unk_10028CCD0);
  __chkstk_darwin(v17, v18);
  v20 = (uint64_t *)((char *)&v49 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  a2 += 16;
  swift_beginAccess(a2, v54, 0, 0);
  Strong = swift_weakLoadStrong(a2);
  if (Strong)
  {
    v22 = Strong;
    sub_1000EB450(a1, (uint64_t)v20);
    if (swift_getEnumCaseMultiPayload(v20, v17) == 1)
    {
      v23 = *v20;
      swift_errorRetain(*v20);
      v51(v23);
      swift_release(v22);
      swift_errorRelease(v23);
      swift_errorRelease(v23);
    }
    else
    {
      sub_10003B730((uint64_t)v20, (uint64_t)v16, type metadata accessor for CustodianshipRecords);
      v37 = objc_msgSend(objc_allocWithZone((Class)AKCustodianContext), "init");
      v38 = objc_msgSend(a5, "aa_altDSID");
      objc_msgSend(v37, "setAltDSID:", v38);

      v39 = *(int *)(v13 + 20);
      v40 = *(_QWORD *)&v16[v39 + 8 + *(int *)(type metadata accessor for CustodianRecoveryInfoRecord(0) + 24)];
      swift_bridgeObjectRetain(v40);
      v41 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v40);
      objc_msgSend(v37, "setOwnerCustodianAltDSID:", v41);

      v42 = type metadata accessor for CustodianRecord(0);
      isa = UUID._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v37, "setCustodianUUID:", isa);

      v44 = 0;
      v45 = &v16[*(int *)(v42 + 40)];
      v46 = *((_QWORD *)v45 + 1);
      if (v46 >> 60 != 15)
      {
        v47 = *(_QWORD *)v45;
        sub_10000F450(*(_QWORD *)v45, *((_QWORD *)v45 + 1));
        v44 = Data._bridgeToObjectiveC()().super.isa;
        sub_1000144D8(v47, v46);
      }
      objc_msgSend(v37, "setWrappingKeyRKC:", v44);

      if (objc_msgSend(v37, "respondsToSelector:", Selector.init(_:)(0xD000000000000015, 0x800000010020CD50)))objc_msgSend(v37, "setCustodianSyncAction:", 1);
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, v22 + OBJC_IVAR____TtC13appleaccountd23TrustedContactsDataSync__idmsRequestController, v8);
      Dependency.wrappedValue.getter(v52, v8);
      (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
      v48 = (void **)sub_10000732C(v52, v52[3]);
      sub_100043E98((uint64_t)v37, (uint64_t)v51, v50, *v48);

      swift_release(v22);
      sub_100028388((uint64_t)v16, type metadata accessor for CustodianshipRecords);
      sub_100006F58(v52);
    }
  }
  else
  {
    if (qword_10028ADD8 != -1)
      swift_once(&qword_10028ADD8, sub_100046D78);
    v24 = type metadata accessor for Logger(0);
    v25 = sub_100005288(v24, (uint64_t)qword_1002A8A08);
    v26 = Logger.logObject.getter(v25);
    v27 = static os_log_type_t.error.getter(v26);
    if (os_log_type_enabled(v26, v27))
    {
      v28 = (uint8_t *)swift_slowAlloc(12, -1);
      v29 = swift_slowAlloc(32, -1);
      v52[0] = v29;
      *(_DWORD *)v28 = 136315138;
      if (qword_10028AE88 != -1)
        swift_once(&qword_10028AE88, sub_1000FF8A0);
      v30 = qword_100292038;
      v31 = unk_100292040;
      swift_bridgeObjectRetain(unk_100292040);
      v53 = sub_1001DEF4C(v30, v31, v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, v54);
      swift_bridgeObjectRelease(v31);
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "%s - finalizeCustodian: self is no longer retained, nothing to do here", v28, 0xCu);
      swift_arrayDestroy(v29, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v29, -1, -1);
      swift_slowDealloc(v28, -1, -1);
    }

    type metadata accessor for AACustodianError(0);
    v33 = v32;
    v53 = -7000;
    v34 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
    v35 = sub_100005150((unint64_t *)&qword_10028B640, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianError, (uint64_t)&unk_100218378);
    _BridgedStoredNSError.init(_:userInfo:)(v52, &v53, v34, v33, v35);
    v36 = (void *)v52[0];
    v51(v52[0]);

  }
}

void sub_100105EA8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  Swift::String v15;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v4 = type metadata accessor for CustodianRecord(0);
  v6 = __chkstk_darwin(v4, v5);
  v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v6, v9);
  v12 = (char *)&v28 - v11;
  if ((unint64_t)(*(_QWORD *)(a2 + *(int *)(v10 + 36)) - 1) <= 2)
  {
    UUID.uuidString.getter(v10);
    v14 = v13;
    v15 = String.lowercased()();
    swift_bridgeObjectRelease(v14);
    sub_1001AEE10(v15._countAndFlagsBits, (unint64_t)v15._object);
    __asm { BR              X10 }
  }
  if (qword_10028ADD8 != -1)
    swift_once(&qword_10028ADD8, sub_100046D78);
  v17 = type metadata accessor for Logger(0);
  sub_100005288(v17, (uint64_t)qword_1002A8A08);
  v18 = sub_100027FE8(a2, (uint64_t)v12, type metadata accessor for CustodianRecord);
  v19 = Logger.logObject.getter(v18);
  v20 = static os_log_type_t.debug.getter(v19);
  if (os_log_type_enabled(v19, v20))
  {
    v28 = v2;
    v29 = v4;
    v21 = swift_slowAlloc(22, -1);
    v22 = swift_slowAlloc(64, -1);
    v31 = v22;
    *(_DWORD *)v21 = 136315394;
    if (qword_10028AE88 != -1)
      swift_once(&qword_10028AE88, sub_1000FF8A0);
    v24 = qword_100292038;
    v23 = unk_100292040;
    swift_bridgeObjectRetain(unk_100292040);
    v30 = sub_1001DEF4C(v24, v23, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31);
    swift_bridgeObjectRelease(v23);
    *(_WORD *)(v21 + 12) = 2080;
    sub_100027FE8((uint64_t)v12, (uint64_t)v8, type metadata accessor for CustodianRecord);
    v25 = String.init<A>(describing:)(v8, v29);
    v27 = v26;
    v30 = sub_1001DEF4C(v25, v26, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31);
    swift_bridgeObjectRelease(v27);
    sub_100028388((uint64_t)v12, type metadata accessor for CustodianRecord);
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "%s - unable to get list version status for record:\n%s", (uint8_t *)v21, 0x16u);
    swift_arrayDestroy(v22, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v22, -1, -1);
    swift_slowDealloc(v21, -1, -1);

  }
  else
  {
    sub_100028388((uint64_t)v12, type metadata accessor for CustodianRecord);

  }
}

uint64_t sub_100106810(uint64_t a1, void *a2, uint64_t a3, void *a4)
{
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;

  _StringGuts.grow(_:)(51);
  v8._object = (void *)0x800000010020CCB0;
  v8._countAndFlagsBits = 0xD000000000000016;
  String.append(_:)(v8);
  swift_bridgeObjectRetain(a2);
  v9._countAndFlagsBits = a1;
  v9._object = a2;
  String.append(_:)(v9);
  swift_bridgeObjectRelease(a2);
  v10._countAndFlagsBits = 0xD000000000000019;
  v10._object = (void *)0x800000010020CCD0;
  String.append(_:)(v10);
  swift_bridgeObjectRetain(a4);
  v11._countAndFlagsBits = a3;
  v11._object = a4;
  String.append(_:)(v11);
  swift_bridgeObjectRelease(a4);
  return 0;
}

uint64_t sub_1001068F4()
{
  uint64_t v0;

  return sub_100106810(*(_QWORD *)v0, *(void **)(v0 + 8), *(_QWORD *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_100106900(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  char v12;
  uint64_t result;

  v4 = *a1;
  v5 = a1[1];
  v6 = a1[2];
  v7 = a1[3];
  v8 = a2[1];
  v9 = a2[2];
  v10 = a2[3];
  v11 = v4 == *a2 && v5 == v8;
  if (v11 || (v12 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *a2, v8, 0), result = 0, (v12 & 1) != 0))
  {
    if (v6 == v9 && v7 == v10)
      return 1;
    else
      return _stringCompareWithSmolCheck(_:_:expecting:)(v6, v7, v9, v10, 0);
  }
  return result;
}

uint64_t sub_100106990(uint64_t *a1, uint64_t (*a2)(_QWORD), uint64_t (*a3)(uint64_t), uint64_t (*a4)(_QWORD *))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  _QWORD v11[2];

  v7 = *(_QWORD *)(a2(0) - 8);
  v8 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v8 = a3(v8);
  v9 = *(_QWORD *)(v8 + 16);
  v11[0] = v8 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  v11[1] = v9;
  result = a4(v11);
  *a1 = v8;
  return result;
}

Swift::Int sub_100106A20(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  Swift::Int v29;
  Swift::Int result;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  Swift::Int v36;
  unint64_t v37;
  Swift::Int v38;
  Swift::Int v39;
  uint64_t v40;
  Swift::Int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  Swift::Int v50;
  uint64_t (*v51)(uint64_t);
  uint64_t v52;
  Swift::Int v53;
  Swift::Int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  Swift::Int v66;
  Swift::Int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  Swift::Int v71;
  uint64_t v72;
  unint64_t v73;
  Swift::Int v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  Swift::Int v78;
  uint64_t v79;
  Swift::Int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t (*v83)(uint64_t);
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v91;
  char v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v97;
  unint64_t v98;
  char *v99;
  char *v100;
  Swift::Int v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  BOOL v113;
  unint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  BOOL v123;
  uint64_t v124;
  char v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  BOOL v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  char *v142;
  char *v143;
  uint64_t v144;
  char *v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  unint64_t v153;
  _QWORD *v154;
  uint64_t v155;
  uint64_t v156;
  _QWORD *v157;
  Swift::Int v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  Swift::Int v162;
  uint64_t v163;
  Swift::Int v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  char *v169;
  char *v170;
  uint64_t v171;
  uint64_t v172;
  Swift::Int v173;
  uint64_t v174;
  uint64_t v175;
  Swift::Int v176;
  Swift::Int v177;
  uint64_t *v178;

  v2 = v1;
  v174 = type metadata accessor for CustodianRecord(0);
  v168 = *(_QWORD *)(v174 - 8);
  v5 = __chkstk_darwin(v174, v4);
  v163 = (uint64_t)&v155 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v5, v7);
  v175 = (uint64_t)&v155 - v9;
  v11 = __chkstk_darwin(v8, v10);
  v13 = (char *)&v155 - v12;
  v15 = __chkstk_darwin(v11, v14);
  v17 = (char *)&v155 - v16;
  v19 = __chkstk_darwin(v15, v18);
  v166 = (uint64_t)&v155 - v20;
  v22 = __chkstk_darwin(v19, v21);
  v165 = (uint64_t)&v155 - v23;
  v25 = __chkstk_darwin(v22, v24);
  v161 = (uint64_t)&v155 - v26;
  __chkstk_darwin(v25, v27);
  v160 = (uint64_t)&v155 - v28;
  v178 = a1;
  v29 = a1[1];
  result = _minimumMergeRunLength(_:)(v29);
  if (result >= v29)
  {
    if (v29 < 0)
      goto LABEL_157;
    if (v29)
      return sub_100108174(0, v29, 1, v178);
    return result;
  }
  if (v29 >= 0)
    v31 = v29;
  else
    v31 = v29 + 1;
  if (v29 < -1)
    goto LABEL_165;
  v170 = v13;
  v158 = result;
  if (v29 < 2)
  {
    v35 = (char *)_swiftEmptyArrayStorage;
    v167 = (unint64_t)_swiftEmptyArrayStorage
         + ((*(unsigned __int8 *)(v168 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v168 + 80));
    v157 = _swiftEmptyArrayStorage;
    if (v29 != 1)
    {
      v37 = _swiftEmptyArrayStorage[2];
LABEL_123:
      if (v37 >= 2)
      {
        v148 = *v178;
        do
        {
          v149 = v37 - 2;
          if (v37 < 2)
            goto LABEL_152;
          if (!v148)
            goto LABEL_164;
          v150 = *(_QWORD *)&v35[16 * v149 + 32];
          v151 = *(_QWORD *)&v35[16 * v37 + 24];
          sub_1001086E4(v148 + *(_QWORD *)(v168 + 72) * v150, v148 + *(_QWORD *)(v168 + 72) * *(_QWORD *)&v35[16 * v37 + 16], v148 + *(_QWORD *)(v168 + 72) * v151, v167);
          if (v2)
            break;
          if (v151 < v150)
            goto LABEL_153;
          if ((swift_isUniquelyReferenced_nonNull_native(v35) & 1) == 0)
            v35 = sub_100109520((uint64_t)v35);
          if (v149 >= *((_QWORD *)v35 + 2))
            goto LABEL_154;
          v152 = &v35[16 * v149 + 32];
          *(_QWORD *)v152 = v150;
          *((_QWORD *)v152 + 1) = v151;
          v153 = *((_QWORD *)v35 + 2);
          if (v37 > v153)
            goto LABEL_155;
          memmove(&v35[16 * v37 + 16], &v35[16 * v37 + 32], 16 * (v153 - v37));
          *((_QWORD *)v35 + 2) = v153 - 1;
          v37 = v153 - 1;
        }
        while (v153 > 2);
      }
LABEL_134:
      swift_bridgeObjectRelease(v35);
      v154 = v157;
      v157[2] = 0;
      return swift_bridgeObjectRelease(v154);
    }
  }
  else
  {
    v32 = v31 >> 1;
    v33 = static Array._allocateBufferUninitialized(minimumCapacity:)(v31 >> 1, v174);
    *(_QWORD *)(v33 + 16) = v32;
    v34 = *(unsigned __int8 *)(v168 + 80);
    v157 = (_QWORD *)v33;
    v167 = v33 + ((v34 + 32) & ~v34);
  }
  v36 = 0;
  v35 = (char *)_swiftEmptyArrayStorage;
  v169 = v17;
  while (1)
  {
    v38 = v36;
    v39 = v36 + 1;
    if (v36 + 1 >= v29)
    {
      v50 = v36 + 1;
      v51 = type metadata accessor for CustodianRecord;
    }
    else
    {
      v176 = v29;
      v40 = *v178;
      v41 = *(_QWORD *)(v168 + 72);
      sub_100027FE8(*v178 + v41 * v39, v160, type metadata accessor for CustodianRecord);
      v171 = v40;
      v177 = v41;
      v42 = sub_100027FE8(v40 + v41 * v38, v161, type metadata accessor for CustodianRecord);
      v43 = UUID.uuidString.getter(v42);
      v45 = v44;
      v46 = UUID.uuidString.getter(v43);
      if (v43 == v46 && v45 == v47)
      {
        LODWORD(v173) = 0;
        v49 = v45;
      }
      else
      {
        v49 = v47;
        LODWORD(v173) = _stringCompareWithSmolCheck(_:_:expecting:)(v43, v45, v46, v47, 1);
      }
      v29 = v176;
      swift_bridgeObjectRelease(v45);
      swift_bridgeObjectRelease(v49);
      sub_100028388(v161, type metadata accessor for CustodianRecord);
      sub_100028388(v160, type metadata accessor for CustodianRecord);
      v50 = v38 + 2;
      if (v38 + 2 >= v29)
      {
        v17 = v169;
      }
      else
      {
        v164 = v38;
        v159 = v35;
        v172 = v177 * v39;
        v52 = v171;
        v53 = v177 * v50;
        while (1)
        {
          v54 = v50;
          sub_100027FE8(v52 + v53, v165, type metadata accessor for CustodianRecord);
          v55 = sub_100027FE8(v52 + v172, v166, type metadata accessor for CustodianRecord);
          v56 = UUID.uuidString.getter(v55);
          v58 = v57;
          v59 = UUID.uuidString.getter(v56);
          if (v56 == v59 && v58 == v60)
          {
            v63 = 0;
            v62 = v58;
          }
          else
          {
            v62 = v60;
            v63 = _stringCompareWithSmolCheck(_:_:expecting:)(v56, v58, v59, v60, 1);
          }
          swift_bridgeObjectRelease(v58);
          swift_bridgeObjectRelease(v62);
          sub_100028388(v166, type metadata accessor for CustodianRecord);
          sub_100028388(v165, type metadata accessor for CustodianRecord);
          if (((v173 ^ v63) & 1) != 0)
            break;
          v50 = v54 + 1;
          v52 += v177;
          if (v176 == v54 + 1)
          {
            v29 = v176;
            v50 = v176;
            v35 = v159;
            v17 = v169;
            v38 = v164;
            goto LABEL_36;
          }
        }
        v35 = v159;
        v17 = v169;
        v50 = v54;
        v38 = v164;
        v29 = v176;
      }
LABEL_36:
      v51 = type metadata accessor for CustodianRecord;
      if ((v173 & 1) != 0)
      {
        if (v50 < v38)
          goto LABEL_158;
        if (v38 < v50)
        {
          v159 = v35;
          v64 = 0;
          v65 = v177 * (v50 - 1);
          v66 = v50 * v177;
          v67 = v38;
          v164 = v38;
          v68 = v38 * v177;
          do
          {
            if (v67 != v50 + v64 - 1)
            {
              v71 = v50;
              v72 = v171;
              if (!v171)
                goto LABEL_163;
              v73 = v171 + v68;
              v173 = v171 + v65;
              sub_10003B730(v171 + v68, v163, type metadata accessor for CustodianRecord);
              if (v68 < v65 || v73 >= v72 + v66)
              {
                v69 = v72 + v68;
                v70 = v173;
                swift_arrayInitWithTakeFrontToBack(v69, v173);
              }
              else
              {
                v70 = v173;
                if (v68 != v65)
                  swift_arrayInitWithTakeBackToFront(v73, v173);
              }
              sub_10003B730(v163, v70, type metadata accessor for CustodianRecord);
              v50 = v71;
            }
            ++v67;
            --v64;
            v65 -= v177;
            v66 -= v177;
            v68 += v177;
          }
          while (v67 < v50 + v64);
          v35 = v159;
          v17 = v169;
          v51 = type metadata accessor for CustodianRecord;
          v38 = v164;
          v29 = v176;
        }
      }
    }
    if (v50 < v29)
    {
      if (__OFSUB__(v50, v38))
        goto LABEL_156;
      if (v50 - v38 < v158)
        break;
    }
LABEL_74:
    if (v50 < v38)
      goto LABEL_151;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v35);
    v173 = v50;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      v35 = sub_100109274(0, *((_QWORD *)v35 + 2) + 1, 1, v35);
    v98 = *((_QWORD *)v35 + 2);
    v97 = *((_QWORD *)v35 + 3);
    v37 = v98 + 1;
    if (v98 >= v97 >> 1)
      v35 = sub_100109274((char *)(v97 > 1), v98 + 1, 1, v35);
    *((_QWORD *)v35 + 2) = v37;
    v99 = v35 + 32;
    v100 = &v35[16 * v98 + 32];
    v101 = v173;
    *(_QWORD *)v100 = v38;
    *((_QWORD *)v100 + 1) = v101;
    if (v98)
    {
      while (1)
      {
        v102 = v37 - 1;
        if (v37 >= 4)
        {
          v107 = &v99[16 * v37];
          v108 = *((_QWORD *)v107 - 8);
          v109 = *((_QWORD *)v107 - 7);
          v113 = __OFSUB__(v109, v108);
          v110 = v109 - v108;
          if (v113)
            goto LABEL_140;
          v112 = *((_QWORD *)v107 - 6);
          v111 = *((_QWORD *)v107 - 5);
          v113 = __OFSUB__(v111, v112);
          v105 = v111 - v112;
          v106 = v113;
          if (v113)
            goto LABEL_141;
          v114 = v37 - 2;
          v115 = &v99[16 * v37 - 32];
          v117 = *(_QWORD *)v115;
          v116 = *((_QWORD *)v115 + 1);
          v113 = __OFSUB__(v116, v117);
          v118 = v116 - v117;
          if (v113)
            goto LABEL_143;
          v113 = __OFADD__(v105, v118);
          v119 = v105 + v118;
          if (v113)
            goto LABEL_146;
          if (v119 >= v110)
          {
            v137 = &v99[16 * v102];
            v139 = *(_QWORD *)v137;
            v138 = *((_QWORD *)v137 + 1);
            v113 = __OFSUB__(v138, v139);
            v140 = v138 - v139;
            if (v113)
              goto LABEL_150;
            v130 = v105 < v140;
            goto LABEL_111;
          }
        }
        else
        {
          if (v37 != 3)
          {
            v131 = *((_QWORD *)v35 + 4);
            v132 = *((_QWORD *)v35 + 5);
            v113 = __OFSUB__(v132, v131);
            v124 = v132 - v131;
            v125 = v113;
            goto LABEL_105;
          }
          v104 = *((_QWORD *)v35 + 4);
          v103 = *((_QWORD *)v35 + 5);
          v113 = __OFSUB__(v103, v104);
          v105 = v103 - v104;
          v106 = v113;
        }
        if ((v106 & 1) != 0)
          goto LABEL_142;
        v114 = v37 - 2;
        v120 = &v99[16 * v37 - 32];
        v122 = *(_QWORD *)v120;
        v121 = *((_QWORD *)v120 + 1);
        v123 = __OFSUB__(v121, v122);
        v124 = v121 - v122;
        v125 = v123;
        if (v123)
          goto LABEL_145;
        v126 = &v99[16 * v102];
        v128 = *(_QWORD *)v126;
        v127 = *((_QWORD *)v126 + 1);
        v113 = __OFSUB__(v127, v128);
        v129 = v127 - v128;
        if (v113)
          goto LABEL_148;
        if (__OFADD__(v124, v129))
          goto LABEL_149;
        if (v124 + v129 >= v105)
        {
          v130 = v105 < v129;
LABEL_111:
          if (v130)
            v102 = v114;
          goto LABEL_113;
        }
LABEL_105:
        if ((v125 & 1) != 0)
          goto LABEL_144;
        v133 = &v99[16 * v102];
        v135 = *(_QWORD *)v133;
        v134 = *((_QWORD *)v133 + 1);
        v113 = __OFSUB__(v134, v135);
        v136 = v134 - v135;
        if (v113)
          goto LABEL_147;
        if (v136 < v124)
          goto LABEL_14;
LABEL_113:
        v141 = v102 - 1;
        if (v102 - 1 >= v37)
        {
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
LABEL_154:
          __break(1u);
LABEL_155:
          __break(1u);
LABEL_156:
          __break(1u);
LABEL_157:
          __break(1u);
LABEL_158:
          __break(1u);
LABEL_159:
          __break(1u);
          goto LABEL_160;
        }
        if (!*v178)
          goto LABEL_162;
        v142 = v35;
        v143 = &v99[16 * v141];
        v144 = *(_QWORD *)v143;
        v145 = &v99[16 * v102];
        v146 = *((_QWORD *)v145 + 1);
        sub_1001086E4(*v178 + *(_QWORD *)(v168 + 72) * *(_QWORD *)v143, *v178 + *(_QWORD *)(v168 + 72) * *(_QWORD *)v145, *v178 + *(_QWORD *)(v168 + 72) * v146, v167);
        if (v2)
        {
          v35 = v142;
          goto LABEL_134;
        }
        if (v146 < v144)
          goto LABEL_137;
        if (v102 > *((_QWORD *)v142 + 2))
          goto LABEL_138;
        *(_QWORD *)v143 = v144;
        *(_QWORD *)&v99[16 * v141 + 8] = v146;
        v147 = *((_QWORD *)v142 + 2);
        if (v102 >= v147)
          goto LABEL_139;
        v35 = v142;
        v37 = v147 - 1;
        memmove(&v99[16 * v102], v145 + 16, 16 * (v147 - 1 - v102));
        *((_QWORD *)v142 + 2) = v147 - 1;
        if (v147 <= 2)
          goto LABEL_14;
      }
    }
    v37 = 1;
LABEL_14:
    v29 = v178[1];
    v36 = v173;
    v17 = v169;
    if (v173 >= v29)
      goto LABEL_123;
  }
  if (__OFADD__(v38, v158))
    goto LABEL_159;
  if (v38 + v158 >= v29)
    v74 = v29;
  else
    v74 = v38 + v158;
  if (v74 >= v38)
  {
    if (v50 != v74)
    {
      v164 = v38;
      v159 = v35;
      v156 = v2;
      v75 = *(_QWORD *)(v168 + 72);
      v76 = v75 * (v50 - 1);
      v171 = v75;
      v177 = v50 * v75;
      v77 = (uint64_t)v170;
      v162 = v74;
      do
      {
        v79 = 0;
        v80 = v164;
        v172 = v76;
        v173 = v50;
        while (1)
        {
          v176 = v80;
          v81 = *v178;
          sub_100027FE8(v177 + v79 + *v178, (uint64_t)v17, v51);
          v82 = sub_100027FE8(v76 + v79 + v81, v77, v51);
          v83 = v51;
          v84 = (uint64_t)v17;
          v85 = UUID.uuidString.getter(v82);
          v87 = v86;
          v77 = (uint64_t)v170;
          v88 = UUID.uuidString.getter(v85);
          if (v85 == v88 && v87 == v89)
          {
            swift_bridgeObjectRelease_n(v87, 2);
            sub_100028388(v77, v83);
            sub_100028388(v84, v83);
            v17 = (char *)v84;
            v51 = v83;
            goto LABEL_61;
          }
          v91 = v89;
          v92 = _stringCompareWithSmolCheck(_:_:expecting:)(v85, v87, v88, v89, 1);
          swift_bridgeObjectRelease(v87);
          swift_bridgeObjectRelease(v91);
          sub_100028388(v77, v83);
          sub_100028388(v84, v83);
          v51 = v83;
          if ((v92 & 1) == 0)
            break;
          v93 = *v178;
          v76 = v172;
          if (!*v178)
            goto LABEL_161;
          v94 = v93 + v177 + v79;
          v95 = v93 + v172 + v79;
          sub_10003B730(v94, v175, v51);
          v17 = v169;
          swift_arrayInitWithTakeFrontToBack(v94, v95);
          sub_10003B730(v175, v95, v51);
          v79 -= v171;
          v80 = v176 + 1;
          v78 = v173;
          if (v173 == v176 + 1)
            goto LABEL_62;
        }
        v17 = v169;
LABEL_61:
        v76 = v172;
        v78 = v173;
LABEL_62:
        v50 = v78 + 1;
        v76 += v171;
        v177 += v171;
      }
      while (v50 != v162);
      v50 = v162;
      v2 = v156;
      v35 = v159;
      v38 = v164;
    }
    goto LABEL_74;
  }
LABEL_160:
  __break(1u);
LABEL_161:
  __break(1u);
LABEL_162:
  __break(1u);
LABEL_163:
  __break(1u);
LABEL_164:
  __break(1u);
LABEL_165:
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
  __break(1u);
  return result;
}

Swift::Int sub_1001075F0(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  Swift::Int v28;
  Swift::Int result;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  Swift::Int v35;
  unint64_t v36;
  Swift::Int v37;
  uint64_t v38;
  Swift::Int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  Swift::Int v47;
  uint64_t v48;
  Swift::Int v49;
  Swift::Int v50;
  Swift::Int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  Swift::Int v63;
  Swift::Int v64;
  Swift::Int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  Swift::Int v70;
  unint64_t v71;
  Swift::Int v72;
  Swift::Int v73;
  uint64_t v74;
  Swift::Int v75;
  Swift::Int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  char *v93;
  char *v94;
  Swift::Int v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  BOOL v107;
  unint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  BOOL v117;
  uint64_t v118;
  char v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  BOOL v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  char *v136;
  char *v137;
  uint64_t v138;
  char *v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  unint64_t v147;
  _QWORD *v148;
  uint64_t v149;
  uint64_t v150;
  _QWORD *v151;
  Swift::Int v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  Swift::Int v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t v163;
  Swift::Int v164;
  uint64_t v165;
  Swift::Int v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t *v170;

  v2 = v1;
  v4 = type metadata accessor for BeneficiaryInfoRecord(0);
  v162 = *(_QWORD *)(v4 - 8);
  v163 = v4;
  v6 = __chkstk_darwin(v4, v5);
  v157 = (uint64_t)&v149 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v6, v8);
  v167 = (uint64_t)&v149 - v10;
  v12 = __chkstk_darwin(v9, v11);
  v169 = (uint64_t)&v149 - v13;
  v15 = __chkstk_darwin(v12, v14);
  v168 = (uint64_t)&v149 - v16;
  v18 = __chkstk_darwin(v15, v17);
  v160 = (uint64_t)&v149 - v19;
  v21 = __chkstk_darwin(v18, v20);
  v159 = (uint64_t)&v149 - v22;
  v24 = __chkstk_darwin(v21, v23);
  v155 = (uint64_t)&v149 - v25;
  __chkstk_darwin(v24, v26);
  v154 = (uint64_t)&v149 - v27;
  v170 = a1;
  v28 = a1[1];
  result = _minimumMergeRunLength(_:)(v28);
  if (result >= v28)
  {
    if (v28 < 0)
      goto LABEL_149;
    if (v28)
      return sub_100108430(0, v28, 1, v170);
    return result;
  }
  if (v28 >= 0)
    v30 = v28;
  else
    v30 = v28 + 1;
  if (v28 < -1)
    goto LABEL_157;
  v152 = result;
  if (v28 < 2)
  {
    v34 = (char *)_swiftEmptyArrayStorage;
    v161 = (unint64_t)_swiftEmptyArrayStorage
         + ((*(unsigned __int8 *)(v162 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v162 + 80));
    v151 = _swiftEmptyArrayStorage;
    if (v28 != 1)
    {
      v36 = _swiftEmptyArrayStorage[2];
LABEL_115:
      v136 = v34;
      if (v36 >= 2)
      {
        v142 = *v170;
        do
        {
          v143 = v36 - 2;
          if (v36 < 2)
            goto LABEL_144;
          if (!v142)
            goto LABEL_156;
          v144 = *(_QWORD *)&v136[16 * v143 + 32];
          v145 = *(_QWORD *)&v136[16 * v36 + 24];
          sub_100108CC4(v142 + *(_QWORD *)(v162 + 72) * v144, v142 + *(_QWORD *)(v162 + 72) * *(_QWORD *)&v136[16 * v36 + 16], v142 + *(_QWORD *)(v162 + 72) * v145, v161);
          if (v2)
            break;
          if (v145 < v144)
            goto LABEL_145;
          if ((swift_isUniquelyReferenced_nonNull_native(v136) & 1) == 0)
            v136 = sub_100109520((uint64_t)v136);
          if (v143 >= *((_QWORD *)v136 + 2))
            goto LABEL_146;
          v146 = &v136[16 * v143 + 32];
          *(_QWORD *)v146 = v144;
          *((_QWORD *)v146 + 1) = v145;
          v147 = *((_QWORD *)v136 + 2);
          if (v36 > v147)
            goto LABEL_147;
          memmove(&v136[16 * v36 + 16], &v136[16 * v36 + 32], 16 * (v147 - v36));
          *((_QWORD *)v136 + 2) = v147 - 1;
          v36 = v147 - 1;
        }
        while (v147 > 2);
      }
LABEL_126:
      swift_bridgeObjectRelease(v136);
      v148 = v151;
      v151[2] = 0;
      return swift_bridgeObjectRelease(v148);
    }
  }
  else
  {
    v31 = v30 >> 1;
    v32 = static Array._allocateBufferUninitialized(minimumCapacity:)(v30 >> 1, v163);
    *(_QWORD *)(v32 + 16) = v31;
    v33 = *(unsigned __int8 *)(v162 + 80);
    v151 = (_QWORD *)v32;
    v161 = v32 + ((v33 + 32) & ~v33);
  }
  v35 = 0;
  v34 = (char *)_swiftEmptyArrayStorage;
  while (1)
  {
    v37 = v35 + 1;
    v158 = v35;
    if (v35 + 1 >= v28)
    {
      v47 = v35 + 1;
      goto LABEL_67;
    }
    v38 = *v170;
    v39 = *(_QWORD *)(v162 + 72);
    sub_100027FE8(*v170 + v39 * v37, v154, type metadata accessor for BeneficiaryInfoRecord);
    v156 = v38;
    v166 = v39;
    v40 = sub_100027FE8(v38 + v39 * v35, v155, type metadata accessor for BeneficiaryInfoRecord);
    v41 = UUID.uuidString.getter(v40);
    v43 = v42;
    v45 = UUID.uuidString.getter(v41);
    v46 = v44;
    if (v41 == v45 && v43 == v44)
    {
      LODWORD(v165) = 0;
      v46 = v43;
    }
    else
    {
      LODWORD(v165) = _stringCompareWithSmolCheck(_:_:expecting:)(v41, v43, v45, v44, 1);
    }
    swift_bridgeObjectRelease(v43);
    swift_bridgeObjectRelease(v46);
    sub_100028388(v155, type metadata accessor for BeneficiaryInfoRecord);
    sub_100028388(v154, type metadata accessor for BeneficiaryInfoRecord);
    v35 = v158;
    v47 = v158 + 2;
    if (v158 + 2 < v28)
    {
      v153 = v34;
      v164 = v166 * v37;
      v48 = v156;
      v49 = v166 * v47;
      while (1)
      {
        v50 = v28;
        v51 = v47;
        sub_100027FE8(v48 + v49, v159, type metadata accessor for BeneficiaryInfoRecord);
        v52 = sub_100027FE8(v48 + v164, v160, type metadata accessor for BeneficiaryInfoRecord);
        v53 = UUID.uuidString.getter(v52);
        v55 = v54;
        v57 = UUID.uuidString.getter(v53);
        v58 = v56;
        if (v53 != v57)
          goto LABEL_26;
        if (v55 == v56)
        {
          v59 = 0;
          v58 = v55;
        }
        else
        {
LABEL_26:
          v59 = _stringCompareWithSmolCheck(_:_:expecting:)(v53, v55, v57, v56, 1);
        }
        swift_bridgeObjectRelease(v55);
        swift_bridgeObjectRelease(v58);
        sub_100028388(v160, type metadata accessor for BeneficiaryInfoRecord);
        sub_100028388(v159, type metadata accessor for BeneficiaryInfoRecord);
        if (((v165 ^ v59) & 1) != 0)
          break;
        v47 = v51 + 1;
        v48 += v166;
        v28 = v50;
        if (v50 == v51 + 1)
        {
          v47 = v50;
          v34 = v153;
          v35 = v158;
          goto LABEL_31;
        }
      }
      v34 = v153;
      v47 = v51;
      v35 = v158;
      v28 = v50;
    }
LABEL_31:
    v60 = v156;
    if ((v165 & 1) == 0)
      break;
    if (v47 < v35)
      goto LABEL_150;
    if (v35 >= v47)
      break;
    v164 = v28;
    v153 = v34;
    v61 = 0;
    v62 = v166 * (v47 - 1);
    v63 = v35;
    v64 = v47 * v166;
    v65 = v63;
    v66 = v63 * v166;
    do
    {
      if (v65 != v47 + v61 - 1)
      {
        if (!v60)
          goto LABEL_155;
        v69 = v2;
        v70 = v47;
        v71 = v60 + v66;
        v165 = v60 + v62;
        sub_10003B730(v60 + v66, v157, type metadata accessor for BeneficiaryInfoRecord);
        if (v66 < v62 || v71 >= v60 + v64)
        {
          v67 = v60 + v66;
          v68 = v165;
          swift_arrayInitWithTakeFrontToBack(v67, v165);
        }
        else
        {
          v68 = v165;
          if (v66 != v62)
            swift_arrayInitWithTakeBackToFront(v71, v165);
        }
        sub_10003B730(v157, v68, type metadata accessor for BeneficiaryInfoRecord);
        v47 = v70;
        v2 = v69;
        v60 = v156;
      }
      ++v65;
      --v61;
      v62 -= v166;
      v64 -= v166;
      v66 += v166;
    }
    while (v65 < v47 + v61);
    v34 = v153;
    v35 = v158;
    v28 = v164;
    if (v47 < v164)
      goto LABEL_47;
LABEL_67:
    if (v47 < v35)
      goto LABEL_143;
    if ((swift_isUniquelyReferenced_nonNull_native(v34) & 1) == 0)
      v34 = sub_100109274(0, *((_QWORD *)v34 + 2) + 1, 1, v34);
    v92 = *((_QWORD *)v34 + 2);
    v91 = *((_QWORD *)v34 + 3);
    v36 = v92 + 1;
    v166 = v47;
    if (v92 >= v91 >> 1)
      v34 = sub_100109274((char *)(v91 > 1), v92 + 1, 1, v34);
    *((_QWORD *)v34 + 2) = v36;
    v93 = v34 + 32;
    v94 = &v34[16 * v92 + 32];
    v95 = v166;
    *(_QWORD *)v94 = v35;
    *((_QWORD *)v94 + 1) = v95;
    if (v92)
    {
      while (1)
      {
        v96 = v36 - 1;
        if (v36 >= 4)
        {
          v101 = &v93[16 * v36];
          v102 = *((_QWORD *)v101 - 8);
          v103 = *((_QWORD *)v101 - 7);
          v107 = __OFSUB__(v103, v102);
          v104 = v103 - v102;
          if (v107)
            goto LABEL_132;
          v106 = *((_QWORD *)v101 - 6);
          v105 = *((_QWORD *)v101 - 5);
          v107 = __OFSUB__(v105, v106);
          v99 = v105 - v106;
          v100 = v107;
          if (v107)
            goto LABEL_133;
          v108 = v36 - 2;
          v109 = &v93[16 * v36 - 32];
          v111 = *(_QWORD *)v109;
          v110 = *((_QWORD *)v109 + 1);
          v107 = __OFSUB__(v110, v111);
          v112 = v110 - v111;
          if (v107)
            goto LABEL_135;
          v107 = __OFADD__(v99, v112);
          v113 = v99 + v112;
          if (v107)
            goto LABEL_138;
          if (v113 >= v104)
          {
            v131 = &v93[16 * v96];
            v133 = *(_QWORD *)v131;
            v132 = *((_QWORD *)v131 + 1);
            v107 = __OFSUB__(v132, v133);
            v134 = v132 - v133;
            if (v107)
              goto LABEL_142;
            v124 = v99 < v134;
            goto LABEL_104;
          }
        }
        else
        {
          if (v36 != 3)
          {
            v125 = *((_QWORD *)v34 + 4);
            v126 = *((_QWORD *)v34 + 5);
            v107 = __OFSUB__(v126, v125);
            v118 = v126 - v125;
            v119 = v107;
            goto LABEL_98;
          }
          v98 = *((_QWORD *)v34 + 4);
          v97 = *((_QWORD *)v34 + 5);
          v107 = __OFSUB__(v97, v98);
          v99 = v97 - v98;
          v100 = v107;
        }
        if ((v100 & 1) != 0)
          goto LABEL_134;
        v108 = v36 - 2;
        v114 = &v93[16 * v36 - 32];
        v116 = *(_QWORD *)v114;
        v115 = *((_QWORD *)v114 + 1);
        v117 = __OFSUB__(v115, v116);
        v118 = v115 - v116;
        v119 = v117;
        if (v117)
          goto LABEL_137;
        v120 = &v93[16 * v96];
        v122 = *(_QWORD *)v120;
        v121 = *((_QWORD *)v120 + 1);
        v107 = __OFSUB__(v121, v122);
        v123 = v121 - v122;
        if (v107)
          goto LABEL_140;
        if (__OFADD__(v118, v123))
          goto LABEL_141;
        if (v118 + v123 >= v99)
        {
          v124 = v99 < v123;
LABEL_104:
          if (v124)
            v96 = v108;
          goto LABEL_106;
        }
LABEL_98:
        if ((v119 & 1) != 0)
          goto LABEL_136;
        v127 = &v93[16 * v96];
        v129 = *(_QWORD *)v127;
        v128 = *((_QWORD *)v127 + 1);
        v107 = __OFSUB__(v128, v129);
        v130 = v128 - v129;
        if (v107)
          goto LABEL_139;
        if (v130 < v118)
          goto LABEL_14;
LABEL_106:
        v135 = v96 - 1;
        if (v96 - 1 >= v36)
        {
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
          goto LABEL_152;
        }
        if (!*v170)
          goto LABEL_154;
        v136 = v34;
        v137 = &v93[16 * v135];
        v138 = *(_QWORD *)v137;
        v139 = &v93[16 * v96];
        v140 = *((_QWORD *)v139 + 1);
        sub_100108CC4(*v170 + *(_QWORD *)(v162 + 72) * *(_QWORD *)v137, *v170 + *(_QWORD *)(v162 + 72) * *(_QWORD *)v139, *v170 + *(_QWORD *)(v162 + 72) * v140, v161);
        if (v2)
          goto LABEL_126;
        if (v140 < v138)
          goto LABEL_129;
        if (v96 > *((_QWORD *)v136 + 2))
          goto LABEL_130;
        *(_QWORD *)v137 = v138;
        *(_QWORD *)&v93[16 * v135 + 8] = v140;
        v141 = *((_QWORD *)v136 + 2);
        if (v96 >= v141)
          goto LABEL_131;
        v34 = v136;
        v36 = v141 - 1;
        memmove(&v93[16 * v96], v139 + 16, 16 * (v141 - 1 - v96));
        *((_QWORD *)v136 + 2) = v141 - 1;
        if (v141 <= 2)
          goto LABEL_14;
      }
    }
    v36 = 1;
LABEL_14:
    v28 = v170[1];
    v35 = v166;
    if (v166 >= v28)
      goto LABEL_115;
  }
  if (v47 >= v28)
    goto LABEL_67;
LABEL_47:
  if (__OFSUB__(v47, v35))
    goto LABEL_148;
  if (v47 - v35 >= v152)
    goto LABEL_67;
  if (__OFADD__(v35, v152))
    goto LABEL_151;
  if (v35 + v152 >= v28)
    v72 = v28;
  else
    v72 = v35 + v152;
  if (v72 >= v35)
  {
    if (v47 != v72)
    {
      v153 = v34;
      v150 = v2;
      v73 = *(_QWORD *)(v162 + 72);
      v74 = v73 * (v47 - 1);
      v164 = v73;
      v75 = v47 * v73;
      v156 = v72;
      do
      {
        v77 = 0;
        v165 = v75;
        v166 = v47;
        while (1)
        {
          v78 = *v170;
          sub_100027FE8(v75 + v77 + *v170, v168, type metadata accessor for BeneficiaryInfoRecord);
          v79 = v74;
          v80 = sub_100027FE8(v74 + v77 + v78, v169, type metadata accessor for BeneficiaryInfoRecord);
          v81 = UUID.uuidString.getter(v80);
          v83 = v82;
          v85 = UUID.uuidString.getter(v81);
          v86 = v84;
          if (v81 == v85 && v83 == v84)
            break;
          v87 = _stringCompareWithSmolCheck(_:_:expecting:)(v81, v83, v85, v84, 1);
          swift_bridgeObjectRelease(v83);
          swift_bridgeObjectRelease(v86);
          sub_100028388(v169, type metadata accessor for BeneficiaryInfoRecord);
          sub_100028388(v168, type metadata accessor for BeneficiaryInfoRecord);
          if ((v87 & 1) == 0)
            goto LABEL_57;
          v88 = *v170;
          if (!*v170)
            goto LABEL_153;
          v74 = v79;
          v75 = v165;
          v89 = v88 + v165 + v77;
          v90 = v88 + v74 + v77;
          sub_10003B730(v89, v167, type metadata accessor for BeneficiaryInfoRecord);
          swift_arrayInitWithTakeFrontToBack(v89, v90);
          sub_10003B730(v167, v90, type metadata accessor for BeneficiaryInfoRecord);
          v77 -= v164;
          ++v35;
          v76 = v166;
          if (v166 == v35)
            goto LABEL_58;
        }
        swift_bridgeObjectRelease_n(v83, 2);
        sub_100028388(v169, type metadata accessor for BeneficiaryInfoRecord);
        sub_100028388(v168, type metadata accessor for BeneficiaryInfoRecord);
LABEL_57:
        v74 = v79;
        v75 = v165;
        v76 = v166;
LABEL_58:
        v47 = v76 + 1;
        v74 += v164;
        v75 += v164;
        v35 = v158;
      }
      while (v47 != v156);
      v47 = v156;
      v2 = v150;
      v34 = v153;
    }
    goto LABEL_67;
  }
LABEL_152:
  __break(1u);
LABEL_153:
  __break(1u);
LABEL_154:
  __break(1u);
LABEL_155:
  __break(1u);
LABEL_156:
  __break(1u);
LABEL_157:
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
  __break(1u);
  return result;
}

uint64_t sub_100108174(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;

  v43 = a4;
  v36 = a1;
  v40 = type metadata accessor for CustodianRecord(0);
  v7 = __chkstk_darwin(v40, v6);
  v41 = (uint64_t)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v7, v9);
  v12 = (char *)&v34 - v11;
  result = __chkstk_darwin(v10, v13);
  v17 = (char *)&v34 - v16;
  v39 = a3;
  v35 = a2;
  if (a3 != a2)
  {
    v18 = *(_QWORD *)(v15 + 72);
    v19 = v18 * (v39 - 1);
    v37 = v18;
    v45 = v18 * v39;
LABEL_6:
    v20 = 0;
    v44 = v36;
    v38 = v19;
    while (1)
    {
      v21 = *v43;
      v42 = v45 + v20;
      sub_100027FE8(v45 + v20 + v21, (uint64_t)v17, type metadata accessor for CustodianRecord);
      v22 = sub_100027FE8(v19 + v20 + v21, (uint64_t)v12, type metadata accessor for CustodianRecord);
      v23 = UUID.uuidString.getter(v22);
      v25 = v24;
      v26 = UUID.uuidString.getter(v23);
      if (v23 == v26 && v25 == v27)
      {
        swift_bridgeObjectRelease_n(v25, 2);
        sub_100028388((uint64_t)v12, type metadata accessor for CustodianRecord);
        result = sub_100028388((uint64_t)v17, type metadata accessor for CustodianRecord);
        v19 = v38;
LABEL_5:
        v19 += v37;
        v45 += v37;
        if (++v39 == v35)
          return result;
        goto LABEL_6;
      }
      v29 = v27;
      v30 = _stringCompareWithSmolCheck(_:_:expecting:)(v23, v25, v26, v27, 1);
      swift_bridgeObjectRelease(v25);
      swift_bridgeObjectRelease(v29);
      sub_100028388((uint64_t)v12, type metadata accessor for CustodianRecord);
      result = sub_100028388((uint64_t)v17, type metadata accessor for CustodianRecord);
      v19 = v38;
      if ((v30 & 1) == 0)
        goto LABEL_5;
      v31 = *v43;
      if (!*v43)
        break;
      v32 = v31 + v45 + v20;
      v33 = v31 + v38 + v20;
      sub_10003B730(v32, v41, type metadata accessor for CustodianRecord);
      swift_arrayInitWithTakeFrontToBack(v32, v33);
      result = sub_10003B730(v41, v33, type metadata accessor for CustodianRecord);
      v20 -= v37;
      if (v39 == ++v44)
        goto LABEL_5;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_100108430(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;

  v41 = a4;
  v35 = a1;
  v36 = type metadata accessor for BeneficiaryInfoRecord(0);
  v7 = __chkstk_darwin(v36, v6);
  v40 = (uint64_t)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v7, v9);
  v43 = (uint64_t)&v33 - v11;
  result = __chkstk_darwin(v10, v12);
  v42 = (uint64_t)&v33 - v15;
  v39 = a3;
  v34 = a2;
  if (a3 != a2)
  {
    v16 = *(_QWORD *)(v14 + 72);
    v17 = v16 * (v39 - 1);
    v37 = v16;
    v18 = v16 * v39;
LABEL_6:
    v19 = 0;
    v20 = v35;
    v38 = v18;
    while (1)
    {
      v21 = *v41;
      sub_100027FE8(v18 + v19 + *v41, v42, type metadata accessor for BeneficiaryInfoRecord);
      v22 = sub_100027FE8(v17 + v19 + v21, v43, type metadata accessor for BeneficiaryInfoRecord);
      v23 = UUID.uuidString.getter(v22);
      v25 = v24;
      v27 = UUID.uuidString.getter(v23);
      v28 = v26;
      if (v23 == v27 && v25 == v26)
      {
        swift_bridgeObjectRelease_n(v25, 2);
        sub_100028388(v43, type metadata accessor for BeneficiaryInfoRecord);
        result = sub_100028388(v42, type metadata accessor for BeneficiaryInfoRecord);
        v18 = v38;
LABEL_5:
        v17 += v37;
        v18 += v37;
        if (++v39 == v34)
          return result;
        goto LABEL_6;
      }
      v29 = _stringCompareWithSmolCheck(_:_:expecting:)(v23, v25, v27, v26, 1);
      swift_bridgeObjectRelease(v25);
      swift_bridgeObjectRelease(v28);
      sub_100028388(v43, type metadata accessor for BeneficiaryInfoRecord);
      result = sub_100028388(v42, type metadata accessor for BeneficiaryInfoRecord);
      v18 = v38;
      if ((v29 & 1) == 0)
        goto LABEL_5;
      v30 = *v41;
      if (!*v41)
        break;
      v31 = v30 + v38 + v19;
      v32 = v30 + v17 + v19;
      sub_10003B730(v31, v40, type metadata accessor for BeneficiaryInfoRecord);
      swift_arrayInitWithTakeFrontToBack(v31, v32);
      result = sub_10003B730(v40, v32, type metadata accessor for BeneficiaryInfoRecord);
      v19 -= v37;
      if (v39 == ++v20)
        goto LABEL_5;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_1001086E4(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  char v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v52;
  char v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t result;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;

  v65 = type metadata accessor for CustodianRecord(0);
  v9 = __chkstk_darwin(v65, v8);
  v63 = (unint64_t)&v59 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v9, v11);
  v62 = (uint64_t)&v59 - v13;
  v15 = __chkstk_darwin(v12, v14);
  v17 = (char *)&v59 - v16;
  __chkstk_darwin(v15, v18);
  v20 = (char *)&v59 - v19;
  v64 = *(_QWORD *)(v21 + 72);
  if (!v64)
  {
    __break(1u);
LABEL_72:
    __break(1u);
LABEL_73:
    __break(1u);
    goto LABEL_74;
  }
  if (a2 - a1 == 0x8000000000000000 && v64 == -1)
    goto LABEL_72;
  v22 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v64 == -1)
    goto LABEL_73;
  v23 = (uint64_t)(a2 - a1) / v64;
  v68 = a1;
  v67 = a4;
  v24 = v22 / v64;
  if (v23 >= v22 / v64)
  {
    if ((v24 & 0x8000000000000000) == 0)
    {
      v26 = v24 * v64;
      if (a4 < a2 || a2 + v26 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack(a4, a2);
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront(a4, a2);
      }
      v40 = a4 + v26;
      v66 = a4 + v26;
      v68 = a2;
      if (v26 >= 1 && a1 < a2)
      {
        v42 = -v64;
        v60 = a4;
        v61 = a1;
        do
        {
          v43 = a3;
          sub_100027FE8(v40 + v42, v62, type metadata accessor for CustodianRecord);
          v44 = a2 + v42;
          v45 = sub_100027FE8(a2 + v42, v63, type metadata accessor for CustodianRecord);
          v46 = UUID.uuidString.getter(v45);
          v48 = v47;
          v49 = UUID.uuidString.getter(v46);
          if (v46 == v49 && v48 == v50)
          {
            v53 = 0;
            v52 = v48;
          }
          else
          {
            v52 = v50;
            v53 = _stringCompareWithSmolCheck(_:_:expecting:)(v46, v48, v49, v50, 1);
          }
          swift_bridgeObjectRelease(v48);
          swift_bridgeObjectRelease(v52);
          a3 += v42;
          sub_100028388(v63, type metadata accessor for CustodianRecord);
          sub_100028388(v62, type metadata accessor for CustodianRecord);
          if ((v53 & 1) != 0)
          {
            if (v43 < a2 || a3 >= a2)
            {
              swift_arrayInitWithTakeFrontToBack(v43 + v42, a2 + v42);
              v55 = v60;
              v54 = v61;
            }
            else
            {
              v34 = v43 == a2;
              v55 = v60;
              v54 = v61;
              if (!v34)
                swift_arrayInitWithTakeBackToFront(a3, a2 + v42);
            }
            v68 += v42;
          }
          else
          {
            v56 = v66;
            v57 = v66 + v42;
            v66 += v42;
            if (v43 < v56 || a3 >= v56)
            {
              swift_arrayInitWithTakeFrontToBack(v43 + v42, v57);
              v44 = a2;
              v55 = v60;
              v54 = v61;
            }
            else
            {
              v54 = v61;
              if (v43 != v56)
                swift_arrayInitWithTakeBackToFront(v43 + v42, v57);
              v44 = a2;
              v55 = v60;
            }
          }
          v40 = v66;
          if (v66 <= v55)
            break;
          a2 = v44;
        }
        while (v44 > v54);
      }
LABEL_70:
      sub_100109414(&v68, &v67, (uint64_t *)&v66, type metadata accessor for CustodianRecord);
      return 1;
    }
  }
  else if ((v23 & 0x8000000000000000) == 0)
  {
    v25 = v23 * v64;
    if (a4 < a1 || a1 + v25 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack(a4, a1);
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront(a4, a1);
    }
    v63 = a4 + v25;
    v66 = a4 + v25;
    if (v25 >= 1 && a2 < a3)
    {
      while (1)
      {
        sub_100027FE8(a2, (uint64_t)v20, type metadata accessor for CustodianRecord);
        v28 = sub_100027FE8(a4, (uint64_t)v17, type metadata accessor for CustodianRecord);
        v29 = UUID.uuidString.getter(v28);
        v31 = v30;
        v32 = UUID.uuidString.getter(v29);
        v34 = v29 == v32 && v31 == v33;
        if (v34)
          break;
        v35 = v33;
        v36 = _stringCompareWithSmolCheck(_:_:expecting:)(v29, v31, v32, v33, 1);
        swift_bridgeObjectRelease(v31);
        swift_bridgeObjectRelease(v35);
        sub_100028388((uint64_t)v17, type metadata accessor for CustodianRecord);
        sub_100028388((uint64_t)v20, type metadata accessor for CustodianRecord);
        if ((v36 & 1) == 0)
          goto LABEL_32;
        v37 = v68;
        v38 = a2 + v64;
        if (v68 < a2 || v68 >= v38)
        {
          swift_arrayInitWithTakeFrontToBack(v68, a2);
        }
        else if (v68 == a2)
        {
          v37 = a2;
        }
        else
        {
          swift_arrayInitWithTakeBackToFront(v68, a2);
        }
LABEL_38:
        v68 = v37 + v64;
        a4 = v67;
        if (v67 < v63)
        {
          a2 = v38;
          if (v38 < a3)
            continue;
        }
        goto LABEL_70;
      }
      swift_bridgeObjectRelease_n(v31, 2);
      sub_100028388((uint64_t)v17, type metadata accessor for CustodianRecord);
      sub_100028388((uint64_t)v20, type metadata accessor for CustodianRecord);
LABEL_32:
      v37 = v68;
      v39 = v67 + v64;
      if (v68 < v67 || v68 >= v39)
      {
        swift_arrayInitWithTakeFrontToBack(v68, v67);
      }
      else if (v68 != v67)
      {
        swift_arrayInitWithTakeBackToFront(v68, v67);
      }
      v67 = v39;
      v38 = a2;
      goto LABEL_38;
    }
    goto LABEL_70;
  }
LABEL_74:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_100108CC4(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  int64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t result;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;

  v61 = type metadata accessor for BeneficiaryInfoRecord(0);
  v9 = __chkstk_darwin(v61, v8);
  v63 = (unint64_t)&v59 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v9, v11);
  v62 = (uint64_t)&v59 - v13;
  v15 = __chkstk_darwin(v12, v14);
  v17 = (char *)&v59 - v16;
  __chkstk_darwin(v15, v18);
  v21 = (char *)&v59 - v20;
  v22 = *(_QWORD *)(v19 + 72);
  if (!v22)
  {
    __break(1u);
LABEL_68:
    __break(1u);
LABEL_69:
    __break(1u);
    goto LABEL_70;
  }
  v23 = *(_QWORD *)(v19 + 72);
  if (a2 - a1 == 0x8000000000000000 && v23 == -1)
    goto LABEL_68;
  v24 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v22 == -1)
    goto LABEL_69;
  v25 = (uint64_t)(a2 - a1) / v22;
  v66 = a1;
  v65 = a4;
  v26 = v24 / v22;
  if (v25 >= v24 / v23)
  {
    if ((v26 & 0x8000000000000000) == 0)
    {
      v28 = v26 * v23;
      if (a4 < a2 || a2 + v28 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack(a4, a2);
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront(a4, a2);
      }
      v41 = a4 + v28;
      v64 = a4 + v28;
      v66 = a2;
      if (v28 >= 1 && a1 < a2)
      {
        v43 = -v23;
        v60 = a4;
        do
        {
          v44 = a1;
          sub_100027FE8(v41 + v43, v62, type metadata accessor for BeneficiaryInfoRecord);
          v45 = a2 + v43;
          v46 = sub_100027FE8(a2 + v43, v63, type metadata accessor for BeneficiaryInfoRecord);
          v47 = UUID.uuidString.getter(v46);
          v49 = v48;
          v51 = UUID.uuidString.getter(v47);
          v52 = v50;
          if (v47 == v51 && v49 == v50)
          {
            v53 = 0;
            v52 = v49;
          }
          else
          {
            v53 = _stringCompareWithSmolCheck(_:_:expecting:)(v47, v49, v51, v50, 1);
          }
          swift_bridgeObjectRelease(v49);
          swift_bridgeObjectRelease(v52);
          v54 = a3 + v43;
          sub_100028388(v63, type metadata accessor for BeneficiaryInfoRecord);
          sub_100028388(v62, type metadata accessor for BeneficiaryInfoRecord);
          if ((v53 & 1) != 0)
          {
            a1 = v44;
            if (a3 < a2 || v54 >= a2)
            {
              swift_arrayInitWithTakeFrontToBack(a3 + v43, a2 + v43);
              v55 = v60;
            }
            else
            {
              v55 = v60;
              if (a3 != a2)
                swift_arrayInitWithTakeBackToFront(v54, a2 + v43);
            }
            v66 += v43;
          }
          else
          {
            v56 = v64;
            v57 = v64 + v43;
            v64 += v43;
            a1 = v44;
            if (a3 < v56 || v54 >= v56)
            {
              swift_arrayInitWithTakeFrontToBack(a3 + v43, v57);
            }
            else if (a3 != v56)
            {
              swift_arrayInitWithTakeBackToFront(a3 + v43, v57);
            }
            v45 = a2;
            v55 = v60;
          }
          v41 = v64;
          if (v64 <= v55)
            break;
          a2 = v45;
          a3 += v43;
        }
        while (v45 > a1);
      }
LABEL_66:
      sub_100109414(&v66, &v65, (uint64_t *)&v64, type metadata accessor for BeneficiaryInfoRecord);
      return 1;
    }
  }
  else if ((v25 & 0x8000000000000000) == 0)
  {
    v27 = v25 * v23;
    if (a4 < a1 || a1 + v27 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack(a4, a1);
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront(a4, a1);
    }
    v63 = a4 + v27;
    v64 = a4 + v27;
    if (v27 >= 1 && a2 < a3)
    {
      while (1)
      {
        sub_100027FE8(a2, (uint64_t)v21, type metadata accessor for BeneficiaryInfoRecord);
        v30 = sub_100027FE8(a4, (uint64_t)v17, type metadata accessor for BeneficiaryInfoRecord);
        v31 = UUID.uuidString.getter(v30);
        v33 = v32;
        v35 = UUID.uuidString.getter(v31);
        v36 = v34;
        if (v31 == v35 && v33 == v34)
          break;
        v37 = _stringCompareWithSmolCheck(_:_:expecting:)(v31, v33, v35, v34, 1);
        swift_bridgeObjectRelease(v33);
        swift_bridgeObjectRelease(v36);
        sub_100028388((uint64_t)v17, type metadata accessor for BeneficiaryInfoRecord);
        sub_100028388((uint64_t)v21, type metadata accessor for BeneficiaryInfoRecord);
        if ((v37 & 1) == 0)
          goto LABEL_30;
        v38 = v66;
        v39 = a2 + v23;
        if (v66 < a2 || v66 >= v39)
        {
          swift_arrayInitWithTakeFrontToBack(v66, a2);
        }
        else if (v66 == a2)
        {
          v38 = a2;
        }
        else
        {
          swift_arrayInitWithTakeBackToFront(v66, a2);
        }
LABEL_36:
        v66 = v38 + v23;
        a4 = v65;
        if (v65 < v63)
        {
          a2 = v39;
          if (v39 < a3)
            continue;
        }
        goto LABEL_66;
      }
      swift_bridgeObjectRelease_n(v33, 2);
      sub_100028388((uint64_t)v17, type metadata accessor for BeneficiaryInfoRecord);
      sub_100028388((uint64_t)v21, type metadata accessor for BeneficiaryInfoRecord);
LABEL_30:
      v38 = v66;
      v40 = v65 + v23;
      if (v66 < v65 || v66 >= v40)
      {
        swift_arrayInitWithTakeFrontToBack(v66, v65);
      }
      else if (v66 != v65)
      {
        swift_arrayInitWithTakeBackToFront(v66, v65);
      }
      v65 = v40;
      v39 = a2;
      goto LABEL_36;
    }
    goto LABEL_66;
  }
LABEL_70:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

char *sub_100109274(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_1000080B4(&qword_100292188);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v14, v15, 16 * v8);
  }
  swift_bridgeObjectRelease(a4);
  return v11;
}

char *sub_10010936C(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t v7;
  char v9;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  v5 = v4 + 15;
  if (v4 >= 0)
    v5 = *a3 - (_QWORD)v3;
  if (v4 <= -16)
  {
    v9 = 2;
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v9, 1046, 0);
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v7 = v5 >> 4;
    if (result != v3 || result >= &v3[16 * v7])
      return (char *)memmove(result, v3, 16 * v7);
  }
  return result;
}

uint64_t sub_100109414(unint64_t *a1, unint64_t *a2, uint64_t *a3, uint64_t (*a4)(_QWORD))
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  v4 = *a1;
  v5 = *a2;
  v6 = *a3;
  result = a4(0);
  v8 = *(_QWORD *)(*(_QWORD *)(result - 8) + 72);
  if (!v8)
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v9 = v6 - v5;
  if (v6 - v5 == 0x8000000000000000 && v8 == -1)
    goto LABEL_14;
  if (v9 / v8 < 0)
  {
LABEL_15:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
    __break(1u);
    return result;
  }
  if (v4 < v5 || v4 >= v5 + v9 / v8 * v8)
    return swift_arrayInitWithTakeFrontToBack(v4, v5);
  if (v4 != v5)
    return swift_arrayInitWithTakeBackToFront(v4, v5);
  return result;
}

char *sub_100109520(uint64_t a1)
{
  return sub_100109274(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_100109534(uint64_t a1)
{
  return sub_1001D4F64(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_100109548(_QWORD *a1)
{
  return sub_1001D5254(0, a1[2], 0, a1);
}

uint64_t sub_10010955C(_QWORD *a1)
{
  return sub_1001D53C4(0, a1[2], 0, a1);
}

uint64_t sub_100109570()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_100109598(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;

  sub_1000FF8E8(a1, a2, a3 & 1, *(_QWORD *)(v3 + 16), *(void (**)(void *))(v3 + 24), *(_QWORD *)(v3 + 32), *(_QWORD *)(v3 + 40));
}

uint64_t sub_1001095A8()
{
  uint64_t v0;

  swift_errorRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

void sub_1001095D0(uint64_t a1, char a2)
{
  sub_100109610(a1, a2, "%s - failed to fetch custodian List");
}

uint64_t sub_1001095DC()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

void sub_100109604(uint64_t a1, char a2)
{
  sub_100109610(a1, a2, "%s - failed to fetch beneficiary List");
}

void sub_100109610(uint64_t a1, char a2, char *a3)
{
  uint64_t v3;

  sub_10010274C(a1, a2 & 1, *(NSObject **)(v3 + 16), *(_QWORD *)(v3 + 24), *(_QWORD *)(v3 + 32), *(_QWORD *)(v3 + 40), a3);
}

uint64_t sub_100109634()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[4]);
  swift_release(v0[5]);
  swift_release(v0[6]);
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100109670()
{
  uint64_t v0;

  return sub_10010296C(*(_QWORD *)(v0 + 16), *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48));
}

uint64_t sub_100109680(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_errorRelease(a1);
  swift_bridgeObjectRelease(a1);
  return swift_bridgeObjectRelease(a2);
}

uint64_t sub_1001096AC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v2 = type metadata accessor for CustodianRecord(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for SHA256(0);
  v31 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7, v8);
  v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9, v12);
  v14 = (char *)&v28 - v13;
  v15 = type metadata accessor for SHA256Digest(0);
  v29 = *(_QWORD *)(v15 - 8);
  v30 = v15;
  __chkstk_darwin(v15, v16);
  v18 = (char *)&v28 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = a1;
  swift_bridgeObjectRetain_n(a1, 2);
  sub_100106990(&v32, type metadata accessor for CustodianRecord, (uint64_t (*)(uint64_t))sub_100109548, sub_100106A20);
  v19 = swift_bridgeObjectRelease(a1);
  v20 = v32;
  SHA256.init()(v19);
  v21 = *(_QWORD *)(v20 + 16);
  if (v21)
  {
    v28 = v7;
    v22 = v20 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v23 = *(_QWORD *)(v3 + 72);
    swift_retain(v20);
    do
    {
      sub_100027FE8(v22, (uint64_t)v6, type metadata accessor for CustodianRecord);
      sub_100105EA8((uint64_t)v11, (uint64_t)v6);
      sub_100028388((uint64_t)v6, type metadata accessor for CustodianRecord);
      v22 += v23;
      --v21;
    }
    while (v21);
    swift_release(v20);
    v7 = v28;
  }
  v24 = v31;
  (*(void (**)(char *, char *, uint64_t))(v31 + 32))(v14, v11, v7);
  v25 = swift_release(v20);
  SHA256.finalize()(v25);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v14, v7);
  v26 = sub_1000FF6B4();
  (*(void (**)(char *, uint64_t))(v29 + 8))(v18, v30);
  return v26;
}

uint64_t sub_100109918(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  Swift::String v26;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  _QWORD v33[5];
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;

  v2 = type metadata accessor for BeneficiaryInfoRecord(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (char *)v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for SHA256(0);
  v8 = *(_QWORD *)(v7 - 8);
  v10 = __chkstk_darwin(v7, v9);
  v12 = (char *)v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10, v13);
  v35 = (char *)v33 - v14;
  v15 = type metadata accessor for SHA256Digest(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15, v17);
  v34 = (char *)v33 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = a1;
  swift_bridgeObjectRetain_n(a1, 2);
  sub_100106990(&v39, type metadata accessor for BeneficiaryInfoRecord, (uint64_t (*)(uint64_t))sub_10010955C, sub_1001075F0);
  v19 = swift_bridgeObjectRelease(a1);
  v20 = v39;
  v38 = v12;
  SHA256.init()(v19);
  if (*(_QWORD *)(v20 + 16))
  {
    v33[2] = v16;
    v33[3] = v15;
    v33[4] = v8;
    v21 = v20 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v22 = *(_QWORD *)(v3 + 72);
    v33[1] = v20;
    swift_retain(v20);
    v36 = v7;
    v37 = v22;
    v23 = sub_100027FE8(v21, (uint64_t)v6, type metadata accessor for BeneficiaryInfoRecord);
    UUID.uuidString.getter(v23);
    v25 = v24;
    v26 = String.lowercased()();
    swift_bridgeObjectRelease(v25);
    sub_1001AEE10(v26._countAndFlagsBits, (unint64_t)v26._object);
    __asm { BR              X9 }
  }
  v28 = v35;
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v35, v38, v7);
  v29 = swift_release(v20);
  v30 = v34;
  SHA256.finalize()(v29);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v28, v7);
  v31 = sub_1000FF6B4();
  (*(void (**)(char *, uint64_t))(v16 + 8))(v30, v15);
  return v31;
}

uint64_t sub_100109E44()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100109E68(uint64_t a1)
{
  uint64_t v1;

  return sub_1001005D0(a1, *(uint64_t (**)(uint64_t))(v1 + 16));
}

uint64_t sub_100109E74()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));
  swift_release(*(_QWORD *)(v0 + 56));
  swift_release(*(_QWORD *)(v0 + 64));

  return swift_deallocObject(v0, 88, 7);
}

void sub_100109EB8(uint64_t a1)
{
  uint64_t v1;

  sub_100102A54(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24), *(_QWORD *)(v1 + 32), *(void **)(v1 + 40), *(void (**)(_QWORD))(v1 + 48), *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 64), *(_QWORD *)(v1 + 72));
}

uint64_t sub_100109EEC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100109F10(void *a1, uint64_t a2)
{
  uint64_t v2;

  return sub_100045308(a1, a2, *(void (**)(uint64_t *))(v2 + 16));
}

uint64_t sub_100109F18(uint64_t a1)
{
  sub_100109F50(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_BYTE *)(a1 + 48));
  return a1;
}

uint64_t sub_100109F50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  if ((a7 & 1) != 0)
    return swift_errorRelease(a1);
  swift_bridgeObjectRelease(a2);
  swift_bridgeObjectRelease(a4);
  swift_bridgeObjectRelease(a5);
  return swift_bridgeObjectRelease(a6);
}

uint64_t sub_100109FA4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 48, 7);
}

void sub_100109FD0()
{
  uint64_t v0;

  sub_1001055F8(*(_QWORD *)(v0 + 16), *(void (**)(_QWORD))(v0 + 24));
}

uint64_t sub_100109FDC(uint64_t a1, uint64_t a2)
{
  return sub_100109FFC(a1, a2, (uint64_t (*)(_QWORD, _QWORD, uint64_t, uint64_t))sub_10010545C);
}

uint64_t sub_100109FE8(void (*a1)(uint64_t), void (*a2)(uint64_t))
{
  uint64_t v2;

  return sub_1001052E0(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t sub_100109FF0(uint64_t a1, uint64_t a2)
{
  return sub_100109FFC(a1, a2, (uint64_t (*)(_QWORD, _QWORD, uint64_t, uint64_t))sub_100105130);
}

uint64_t sub_100109FFC(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD, _QWORD, uint64_t, uint64_t))
{
  uint64_t v3;

  return a3(*(_QWORD *)(v3 + 24), *(_QWORD *)(v3 + 32), a1, a2);
}

uint64_t sub_10010A030()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 23) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  v9 = (v8 + 15) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v6 + 8));
  swift_release(*(_QWORD *)(v0 + v7));

  return swift_deallocObject(v0, ((v9 + 15) & 0xFFFFFFFFFFFFFFF8) + 8, v5);
}

void sub_10010A0F0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v3 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_100104AEC(a1, v1 + v4, *(_QWORD *)(v1 + v5), *(_QWORD *)(v1 + v5 + 8), *(_QWORD *)(v1 + ((v5 + 23) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v1 + ((((v5 + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)), *(NSObject **)(v1+ ((((((v5 + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t sub_10010A174()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));

  return swift_deallocObject(v0, 56, 7);
}

void sub_10010A1A8(uint64_t a1)
{
  uint64_t v1;

  sub_100105944(a1, *(_QWORD *)(v1 + 16), *(void (**)(uint64_t))(v1 + 24), *(_QWORD *)(v1 + 32), *(void **)(v1 + 40));
}

ValueMetadata *type metadata accessor for TrustedContactsDataSync.ListVersion()
{
  return &type metadata for TrustedContactsDataSync.ListVersion;
}

id sub_10010A1E4(uint64_t a1)
{
  id v2;
  NSString v3;
  NSString v4;
  NSString v5;
  NSString v6;
  NSString v7;
  NSString v8;
  NSString v9;
  NSString v10;
  NSString v11;
  Class isa;

  v2 = objc_msgSend(objc_allocWithZone((Class)AAFTapToRadarRequest), "init");
  v3 = String._bridgeToObjectiveC()();
  objc_msgSend(v2, "setAlertTitle:", v3);

  v4 = String._bridgeToObjectiveC()();
  objc_msgSend(v2, "setAlertDefaultButtonText:", v4);

  v5 = String._bridgeToObjectiveC()();
  objc_msgSend(v2, "setAlertCancelButtonText:", v5);

  v6 = String._bridgeToObjectiveC()();
  objc_msgSend(v2, "setComponentName:", v6);

  v7 = String._bridgeToObjectiveC()();
  objc_msgSend(v2, "setComponentVersion:", v7);

  v8 = String._bridgeToObjectiveC()();
  objc_msgSend(v2, "setComponentID:", v8);

  v9 = String._bridgeToObjectiveC()();
  objc_msgSend(v2, "setAlertMessage:", v9);

  v10 = String._bridgeToObjectiveC()();
  objc_msgSend(v2, "setRadarTitle:", v10);

  v11 = String._bridgeToObjectiveC()();
  objc_msgSend(v2, "setRadarDescription:", v11);

  sub_1000067D4(0, (unint64_t *)&qword_10028E8B0, NSNumber_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v2, "setKeywordIDs:", isa);

  objc_msgSend(v2, "setFullDiagnostic:", *(unsigned __int8 *)(a1 + 56));
  return v2;
}

_QWORD *sub_10010A3C4()
{
  _QWORD *v0;
  char *v1;
  uint64_t v2;

  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[5]);
  swift_bridgeObjectRelease(v0[7]);
  swift_bridgeObjectRelease(v0[9]);
  swift_bridgeObjectRelease(v0[11]);
  swift_bridgeObjectRelease(v0[13]);
  swift_bridgeObjectRelease(v0[15]);
  v1 = (char *)v0 + OBJC_IVAR____TtC13appleaccountd27TapToRadarRequestController__helper;
  v2 = sub_1000080B4(&qword_10028F648);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t sub_10010A444()
{
  uint64_t v0;

  sub_10010A3C4();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_10010A468()
{
  return type metadata accessor for TapToRadarRequestController(0);
}

uint64_t type metadata accessor for TapToRadarRequestController(uint64_t a1)
{
  uint64_t result;

  result = qword_1002921D0;
  if (!qword_1002921D0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for TapToRadarRequestController);
  return result;
}

void sub_10010A4AC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[8];

  v4[0] = &unk_10021D470;
  v4[1] = &unk_10021D470;
  v4[2] = &unk_10021D470;
  v4[3] = &unk_10021D470;
  v4[4] = &unk_10021D470;
  v4[5] = &unk_10021D470;
  v4[6] = &unk_10021D470;
  sub_10010A530(319);
  if (v3 <= 0x3F)
  {
    v4[7] = *(_QWORD *)(v2 - 8) + 64;
    swift_updateClassMetadata2(a1, 256, 8, v4, a1 + 80);
  }
}

void sub_10010A530(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1002921E0)
  {
    v2 = sub_1000067D4(255, (unint64_t *)&unk_1002921E8, AAFTapToRadarHelper_ptr);
    v3 = type metadata accessor for Dependency(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1002921E0);
  }
}

_QWORD *sub_10010A594()
{
  _QWORD *v0;
  uint64_t v1;

  v0[2] = 0xD000000000000021;
  v0[3] = 0x800000010020CEE0;
  v0[4] = 0x6E4F6576694CLL;
  v0[5] = 0xE600000000000000;
  v0[6] = 0x36323037383231;
  v0[7] = 0xE700000000000000;
  v0[8] = 0xD000000000000013;
  v0[9] = 0x800000010020CF10;
  v0[10] = 0x65756E69746E6F43;
  v0[11] = 0xE800000000000000;
  v0[12] = 0x6C65636E6143;
  v0[13] = 0xE600000000000000;
  v0[14] = 0x73412074276E6F44;
  v0[15] = 0xEF6E69616741206BLL;
  v1 = sub_1000067D4(0, (unint64_t *)&unk_1002921E8, AAFTapToRadarHelper_ptr);
  Dependency.init(dependencyId:config:)(0, 0, 0, v1);
  return v0;
}

uint64_t AAUnderTest.getter()
{
  id v0;
  id v1;
  uint64_t v2;
  unint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;

  if (!objc_msgSend((id)objc_opt_self(AADeviceInfo), "isInternalBuild"))
    return 0;
  v0 = objc_msgSend((id)objc_opt_self(NSProcessInfo), "processInfo");
  v1 = objc_msgSend(v0, "environment");

  v2 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v1, &type metadata for String, &type metadata for String, &protocol witness table for String);
  if (*(_QWORD *)(v2 + 16) && (v3 = sub_10010A9E0(0xD00000000000001BLL, 0x800000010020AFA0), (v4 & 1) != 0))
  {
    v5 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 16 * v3 + 8);
    swift_bridgeObjectRetain(v5);
    v6 = 1;
  }
  else
  {
    v6 = 0;
    v5 = 0;
  }
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v5);
  return v6;
}

uint64_t sub_10010A7A0()
{
  qword_1002922E0 = (uint64_t)dlsym((void *)0xFFFFFFFFFFFFFFFELL, "_os_activity_current");
  return swift_unknownObjectRetain(qword_1002922E0);
}

os_activity_t _AADActivityCreate(_:dso:)(char *description, int a2, char a3, void *dso)
{
  os_activity_t result;
  unsigned int v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  char descriptiona[8];

  if ((a3 & 1) == 0)
  {
    if (description)
    {
      if (dso)
      {
        if (qword_10028AE90 == -1)
          return _os_activity_create(dso, description, (os_activity_t)qword_1002922E0, OS_ACTIVITY_FLAG_DEFAULT);
LABEL_18:
        swift_once(&qword_10028AE90, sub_10010A7A0);
        return _os_activity_create(dso, description, (os_activity_t)qword_1002922E0, OS_ACTIVITY_FLAG_DEFAULT);
      }
      goto LABEL_28;
    }
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  if ((unint64_t)description >> 32)
    goto LABEL_17;
  if (description >> 11 == 27)
    goto LABEL_27;
  if (description >> 16 > 0x10)
  {
    __break(1u);
  }
  else if ((description & 0xFFFFFF80) == 0)
  {
    if (description <= 0xFF)
    {
      v7 = ((_BYTE)description + 1);
      goto LABEL_12;
    }
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  v8 = (description & 0x3F) << 8;
  v9 = (v8 | (description >> 6)) + 33217;
  v10 = (v8 | (description >> 6) & 0x3F) << 8;
  v11 = (((v10 | (description >> 12) & 0x3F) << 8) | (description >> 18)) - 2122219023;
  v12 = (v10 | (description >> 12)) + 8487393;
  if (description >> 16)
    v7 = v11;
  else
    v7 = v12;
  if (description < 0x800)
    v7 = v9;
LABEL_12:
  *(_QWORD *)descriptiona = (v7 + 0xFEFEFEFEFEFEFFLL) & ~(-1 << ((32 - (__clz(v7) & 0x38)) & 0x38));
  if (!dso)
  {
LABEL_28:
    result = (os_activity_t)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD00000000000001FLL, 0x800000010020CF50, "appleaccountd/Constants.swift", 29, 2, 44, 0);
    __break(1u);
    return result;
  }
  if (qword_10028AE90 != -1)
    swift_once(&qword_10028AE90, sub_10010A7A0);
  return _os_activity_create(dso, descriptiona, (os_activity_t)qword_1002922E0, OS_ACTIVITY_FLAG_DEFAULT);
}

uint64_t AAPrettyBool(_:)(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 24))
    return 5457241;
  else
    return 20302;
}

unint64_t sub_10010A9E0(uint64_t a1, uint64_t a2)
{
  Swift::Int v4;
  _QWORD v6[9];

  Hasher.init(_seed:)(v6);
  String.hash(into:)(v6, a1, a2);
  v4 = Hasher._finalize()();
  return sub_10010ACCC(a1, a2, v4);
}

unint64_t sub_10010AA48(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = v1;
  v4 = *(_QWORD *)(v2 + 40);
  v5 = type metadata accessor for UUID(0);
  v6 = sub_100005150((unint64_t *)&qword_10028CC90, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  v7 = dispatch thunk of Hashable._rawHashValue(seed:)(v4, v5, v6);
  return sub_10010AE70(a1, v7, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, &qword_10028CC98, (uint64_t)&protocol conformance descriptor for UUID);
}

unint64_t sub_10010AAE0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  v2 = v1;
  v4 = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
  return sub_10010ADAC(a1, v4);
}

unint64_t sub_10010AB10(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = v1;
  v4 = *(_QWORD *)(v2 + 40);
  v5 = type metadata accessor for URL(0);
  v6 = sub_100005150(&qword_1002922E8, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
  v7 = dispatch thunk of Hashable._rawHashValue(seed:)(v4, v5, v6);
  return sub_10010AE70(a1, v7, (uint64_t (*)(uint64_t))&type metadata accessor for URL, &qword_1002922F0, (uint64_t)&protocol conformance descriptor for URL);
}

unint64_t sub_10010ABA8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  v2 = v1;
  v4 = NSObject._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
  return sub_10010AFA0(a1, v4, (unint64_t *)&qword_10028E140, AAMessagingDestination_ptr);
}

unint64_t sub_10010ABF4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  v2 = v1;
  v4 = NSObject._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
  return sub_10010AFA0(a1, v4, (unint64_t *)&qword_1002953A0, CKRecordZoneID_ptr);
}

unint64_t sub_10010AC40(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  Swift::Int v5;
  _QWORD v7[9];

  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v4 = v3;
  Hasher.init(_seed:)(v7);
  String.hash(into:)(v7, v2, v4);
  v5 = Hasher._finalize()();
  swift_bridgeObjectRelease(v4);
  return sub_10010B0B0(a1, v5);
}

unint64_t sub_10010ACCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  BOOL v16;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = v10[1];
    v12 = *v10 == a1 && v11 == a2;
    if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0) & 1) == 0)
    {
      v13 = ~v5;
      do
      {
        v6 = (v6 + 1) & v13;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v14 = (_QWORD *)(v9 + 16 * v6);
        v15 = v14[1];
        v16 = *v14 == a1 && v15 == a2;
      }
      while (!v16 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v14, v15, a1, a2, 0) & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_10010ADAC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  char v7;
  _BYTE v9[40];

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v6 = ~v3;
    do
    {
      sub_1000249E4(*(_QWORD *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      v7 = static AnyHashable.== infix(_:_:)(v9, a1);
      sub_1000839B4((uint64_t)v9);
      if ((v7 & 1) != 0)
        break;
      v4 = (v4 + 1) & v6;
    }
    while (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

unint64_t sub_10010AE70(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), unint64_t *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, unint64_t, uint64_t);
  uint64_t v18;
  char v19;
  uint64_t v21;
  uint64_t (*v22)(uint64_t);
  unint64_t *v23;
  uint64_t v24;

  v23 = a4;
  v24 = a5;
  v6 = v5;
  v21 = a1;
  v22 = a3;
  v8 = a3(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v12 = (char *)&v21 - v11;
  v13 = -1 << *(_BYTE *)(v6 + 32);
  v14 = a2 & ~v13;
  if (((*(_QWORD *)(v6 + 64 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) != 0)
  {
    v15 = ~v13;
    v16 = *(_QWORD *)(v9 + 72);
    v17 = *(void (**)(char *, unint64_t, uint64_t))(v9 + 16);
    do
    {
      v17(v12, *(_QWORD *)(v6 + 48) + v16 * v14, v8);
      v18 = sub_100005150(v23, v22, v24);
      v19 = dispatch thunk of static Equatable.== infix(_:_:)(v12, v21, v8, v18);
      (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
      if ((v19 & 1) != 0)
        break;
      v14 = (v14 + 1) & v15;
    }
    while (((*(_QWORD *)(v6 + 64 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) != 0);
  }
  return v14;
}

unint64_t sub_10010AFA0(uint64_t a1, uint64_t a2, unint64_t *a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t i;
  id v9;
  char v10;
  uint64_t v11;
  id v12;
  char v13;

  v5 = v4 + 64;
  v6 = -1 << *(_BYTE *)(v4 + 32);
  i = a2 & ~v6;
  if (((*(_QWORD *)(v4 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
  {
    sub_1000067D4(0, a3, a4);
    v9 = *(id *)(*(_QWORD *)(v4 + 48) + 8 * i);
    v10 = static NSObject.== infix(_:_:)(v9, a1);

    if ((v10 & 1) == 0)
    {
      v11 = ~v6;
      for (i = (i + 1) & v11; ((*(_QWORD *)(v5 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v11)
      {
        v12 = *(id *)(*(_QWORD *)(v4 + 48) + 8 * i);
        v13 = static NSObject.== infix(_:_:)(v12, a1);

        if ((v13 & 1) != 0)
          break;
      }
    }
  }
  return i;
}

unint64_t sub_10010B0B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  char v22;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  v5 = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
  {
    v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v5));
    v9 = v8;
    v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
    if (v7 == v10 && v9 == v11)
    {
LABEL_16:
      swift_bridgeObjectRelease_n(v9, 2);
      return v5;
    }
    v13 = v11;
    v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v9, v10, v11, 0);
    swift_bridgeObjectRelease(v9);
    swift_bridgeObjectRelease(v13);
    if ((v14 & 1) == 0)
    {
      v15 = ~v4;
      v5 = (v5 + 1) & v15;
      if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
      {
        while (1)
        {
          v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v5));
          v9 = v17;
          v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
          if (v16 == v18 && v9 == v19)
            break;
          v21 = v19;
          v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v9, v18, v19, 0);
          swift_bridgeObjectRelease(v9);
          swift_bridgeObjectRelease(v21);
          if ((v22 & 1) == 0)
          {
            v5 = (v5 + 1) & v15;
            if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
              continue;
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

uint64_t sub_10010B224()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck____lazy_storage___custodianDefaults;
  v2 = *(_QWORD *)(v0
                 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck____lazy_storage___custodianDefaults);
  if (v2)
  {
    v3 = *(_QWORD *)(v0
                   + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck____lazy_storage___custodianDefaults);
  }
  else
  {
    v4 = type metadata accessor for CustodianDefaults();
    v3 = swift_allocObject(v4, 16, 7);
    *(_QWORD *)(v0 + v1) = v3;
    swift_retain(v3);
    v2 = 0;
  }
  swift_retain(v2);
  return v3;
}

uint64_t sub_10010B284()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;

  v1 = sub_1000080B4(&qword_10028C880);
  Dependency.init(dependencyId:config:)(0, 0, 0, v1);
  v2 = sub_1000080B4((uint64_t *)&unk_10028C870);
  Dependency.init(dependencyId:config:)(0, 0, 0, v2);
  v3 = sub_1000080B4((uint64_t *)&unk_10028C900);
  Dependency.init(dependencyId:config:)(0, 0, 0, v3);
  v4 = sub_1000080B4((uint64_t *)&unk_10028C910);
  Dependency.init(dependencyId:config:)(0, 0, 0, v4);
  v5 = sub_1000080B4(&qword_10028F438);
  Dependency.init(dependencyId:config:)(0, 0, 0, v5);
  v6 = sub_1000080B4((uint64_t *)&unk_10028C8E0);
  Dependency.init(dependencyId:config:)(0, 0, 0, v6);
  v7 = sub_1000080B4(&qword_10028C8A0);
  Dependency.init(dependencyId:config:)(0, 0, 0, v7);
  v8 = sub_1000080B4(&qword_10028E2C0);
  Dependency.init(dependencyId:config:)(0, 0, 0, v8);
  v9 = sub_1000080B4(&qword_10028C860);
  Dependency.init(dependencyId:config:)(0, 0, 0, v9);
  v10 = sub_1000080B4((uint64_t *)&unk_10028C8F0);
  Dependency.init(dependencyId:config:)(0, 0, 0, v10);
  v11 = sub_1000067D4(0, &qword_10028BB50, AKAccountManager_ptr);
  Dependency.init(dependencyId:config:)(0, 0, 0, v11);
  v12 = sub_1000080B4(&qword_10028C8D0);
  Dependency.init(dependencyId:config:)(0, 0, 0, v12);
  *(_QWORD *)(v0 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck____lazy_storage___custodianDefaults) = 0;
  v13 = OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_queue;
  v14 = objc_msgSend(objc_allocWithZone((Class)NSOperationQueue), "init");
  *(_QWORD *)(v0 + v13) = v14;
  *(_QWORD *)(v0 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_uniqueCustodianCount) = 0;
  v15 = (_QWORD *)(v0 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName);
  v19 = type metadata accessor for CustodianPreflightHealthCheck(0);
  v16 = sub_1000080B4(&qword_1002927B0);
  *v15 = String.init<A>(describing:)(&v19, v16);
  v15[1] = v17;
  objc_msgSend(v14, "setMaxConcurrentOperationCount:", 1);
  return v0;
}

uint64_t sub_10010B584(uint64_t a1, uint64_t a2, void (*a3)(_QWORD), uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  __n128 v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  void (*v17)(_QWORD);
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v5 = v4;
  if (qword_10028ADE0 != -1)
    swift_once(&qword_10028ADE0, sub_100046DA0);
  v10 = type metadata accessor for Logger(0);
  sub_100005288(v10, (uint64_t)qword_1002A8A20);
  v11 = swift_retain(v4);
  v12 = Logger.logObject.getter(v11);
  v14 = static os_log_type_t.default.getter(v13);
  if (os_log_type_enabled(v12, v14))
  {
    v24 = a2;
    v15 = (uint8_t *)swift_slowAlloc(12, -1);
    v16 = swift_slowAlloc(32, -1);
    v26 = v16;
    *(_DWORD *)v15 = 136315138;
    v23 = a4;
    v17 = a3;
    v19 = *(_QWORD *)(v5 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName);
    v18 = *(_QWORD *)(v5 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName + 8);
    swift_bridgeObjectRetain(v18);
    v20 = v19;
    a3 = v17;
    v25 = sub_1001DEF4C(v20, v18, &v26);
    a4 = v23;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26);
    swift_release(v5);
    v21 = v18;
    a2 = v24;
    swift_bridgeObjectRelease(v21);
    _os_log_impl((void *)&_mh_execute_header, v12, v14, "%s - started.", v15, 0xCu);
    swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v16, -1, -1);
    swift_slowDealloc(v15, -1, -1);

  }
  else
  {

    swift_release(v5);
  }
  swift_retain(v5);
  swift_retain(a4);
  swift_bridgeObjectRetain(a2);
  sub_1001191F8(v5, v5, a3, a4, a1, a2);
  swift_release(v5);
  swift_release(a4);
  return swift_bridgeObjectRelease(a2);
}

void sub_10010B7A4(int a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  os_log_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  char *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  char *v47;
  uint64_t v48;
  void (*v49)(char *, uint64_t);
  uint64_t v50;
  uint64_t v51;
  NSObject *v52;
  os_log_type_t v53;
  uint8_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  os_log_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  void (*v69)(_QWORD);
  uint64_t v70;
  char *v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81[3];
  uint64_t v82;

  v74 = a6;
  v75 = a7;
  v79 = a5;
  v73 = a1;
  v10 = type metadata accessor for URL(0);
  v77 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10, v11);
  v76 = (char *)&v65 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12, v14);
  v78 = (char *)&v65 - v15;
  v16 = sub_1000080B4(&qword_10028C448);
  v72 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16, v17);
  v71 = (char *)&v65 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_1000080B4(&qword_10028FA50);
  v20 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19, v21);
  v23 = (char *)&v65 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    v70 = v10;
    swift_errorRetain(a2);
    if (qword_10028ADE0 != -1)
      swift_once(&qword_10028ADE0, sub_100046DA0);
    v24 = type metadata accessor for Logger(0);
    sub_100005288(v24, (uint64_t)qword_1002A8A20);
    swift_errorRetain(a2);
    swift_errorRetain(a2);
    v25 = swift_retain(a3);
    v26 = Logger.logObject.getter(v25);
    v27 = static os_log_type_t.error.getter(v26);
    if (os_log_type_enabled(v26, v27))
    {
      v28 = swift_slowAlloc(22, -1);
      v69 = a4;
      v29 = v28;
      v66 = (uint64_t *)swift_slowAlloc(8, -1);
      v67 = swift_slowAlloc(32, -1);
      v81[0] = v67;
      *(_DWORD *)v29 = 136315394;
      v68 = v16;
      v65 = v26;
      v30 = a3;
      v31 = *(_QWORD *)(a3 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName);
      v32 = *(_QWORD *)(a3 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName + 8);
      swift_bridgeObjectRetain(v32);
      v80 = sub_1001DEF4C(v31, v32, v81);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v80, v81);
      swift_release(v30);
      swift_bridgeObjectRelease(v32);
      *(_WORD *)(v29 + 12) = 2112;
      swift_errorRetain(a2);
      v33 = _swift_stdlib_bridgeErrorToNSError(a2);
      v80 = v33;
      v16 = v68;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v80, v81);
      v34 = v66;
      *v66 = v33;
      a3 = v30;
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      v35 = v65;
      _os_log_impl((void *)&_mh_execute_header, v65, v27, "%s - Error while dismissing Custodian Review follow up items. Error: %@", (uint8_t *)v29, 0x16u);
      v36 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v34, 1, v36);
      swift_slowDealloc(v34, -1, -1);
      v37 = v67;
      swift_arrayDestroy(v67, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v37, -1, -1);
      v38 = v29;
      a4 = v69;
      swift_slowDealloc(v38, -1, -1);

      swift_errorRelease(a2);
    }
    else
    {
      swift_errorRelease(a2);
      swift_release(a3);
      swift_errorRelease(a2);
      swift_errorRelease(a2);

    }
    v10 = v70;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v23, a3 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck__accountStore, v19);
  Dependency.wrappedValue.getter(v81, v19);
  (*(void (**)(char *, uint64_t))(v20 + 8))(v23, v19);
  v39 = objc_msgSend(*(id *)(*sub_10000732C(v81, v82) + 16), "aa_primaryAppleAccount");
  sub_100006F58(v81);
  if (v39)
  {
    v40 = v71;
    v41 = v72;
    (*(void (**)(char *, uint64_t, uint64_t))(v72 + 16))(v71, a3 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck__custodianStorage, v16);
    Dependency.wrappedValue.getter(v81, v16);
    (*(void (**)(char *, uint64_t))(v41 + 8))(v40, v16);
    v42 = sub_10000732C(v81, v82);
    v43 = swift_allocObject(&unk_100268660, 64, 7);
    *(_QWORD *)(v43 + 16) = a3;
    *(_BYTE *)(v43 + 24) = v73 & 1;
    v44 = v75;
    *(_QWORD *)(v43 + 32) = v74;
    *(_QWORD *)(v43 + 40) = v44;
    v45 = v79;
    *(_QWORD *)(v43 + 48) = a4;
    *(_QWORD *)(v43 + 56) = v45;
    v46 = sub_10000732C((_QWORD *)(*v42 + 16), *(_QWORD *)(*v42 + 40));
    type metadata accessor for LocalCache();
    swift_retain(a3);
    swift_bridgeObjectRetain(v44);
    swift_retain(v45);
    v47 = v76;
    sub_10000840C();
    v48 = (uint64_t)v78;
    URL.appendingPathComponent(_:isDirectory:)(0x6169646F74737543, 0xEF64726F6365526ELL, 1);
    v49 = *(void (**)(char *, uint64_t))(v77 + 8);
    v49(v47, v10);
    sub_10000732C((_QWORD *)(*v46 + 16), *(_QWORD *)(*v46 + 40));
    sub_10009D320(v48, (uint64_t)sub_10011E858, v43);
    v49((char *)v48, v10);
    swift_release(v43);
    sub_100006F58(v81);
  }
  else
  {
    if (qword_10028ADE0 != -1)
      swift_once(&qword_10028ADE0, sub_100046DA0);
    v50 = type metadata accessor for Logger(0);
    sub_100005288(v50, (uint64_t)qword_1002A8A20);
    v51 = swift_retain(a3);
    v52 = Logger.logObject.getter(v51);
    v53 = static os_log_type_t.error.getter(v52);
    if (os_log_type_enabled(v52, v53))
    {
      v54 = (uint8_t *)swift_slowAlloc(12, -1);
      v55 = swift_slowAlloc(32, -1);
      v69 = a4;
      v56 = v55;
      v81[0] = v55;
      *(_DWORD *)v54 = 136315138;
      v57 = a3;
      v58 = *(_QWORD *)(a3 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName);
      v59 = *(_QWORD *)(a3 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName + 8);
      swift_bridgeObjectRetain(v59);
      v80 = sub_1001DEF4C(v58, v59, v81);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v80, v81);
      swift_release(v57);
      swift_bridgeObjectRelease(v59);
      _os_log_impl((void *)&_mh_execute_header, v52, v53, "%s - not logged in to AppleAccount, unable to Preflight", v54, 0xCu);
      swift_arrayDestroy(v56, 1, (char *)&type metadata for Any + 8);
      v60 = v56;
      a4 = v69;
      swift_slowDealloc(v60, -1, -1);
      swift_slowDealloc(v54, -1, -1);

    }
    else
    {

      swift_release(a3);
    }
    type metadata accessor for AACustodianError(0);
    v62 = v61;
    v80 = -7002;
    v63 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
    v64 = sub_100005150((unint64_t *)&qword_10028B640, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianError, (uint64_t)&unk_100218378);
    _BridgedStoredNSError.init(_:userInfo:)(v81, &v80, v63, v62, v64);
    v39 = (id)v81[0];
    a4(v81[0]);
  }

}

uint64_t sub_10010BEE4(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void (*v8)(_QWORD);
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(_QWORD);
  uint64_t v24;
  uint64_t v25;

  v8 = (void (*)(_QWORD))a7;
  if ((a2 & 1) == 0)
    return sub_10010C368(a1, a4 & 1, a5, a6, a7, a8);
  swift_errorRetain(a1);
  if (qword_10028ADE0 != -1)
    swift_once(&qword_10028ADE0, sub_100046DA0);
  v12 = type metadata accessor for Logger(0);
  sub_100005288(v12, (uint64_t)qword_1002A8A20);
  sub_1000057BC(a1, 1);
  v13 = swift_retain(a3);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.error.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    v16 = swift_slowAlloc(22, -1);
    v17 = (uint64_t *)swift_slowAlloc(8, -1);
    v18 = swift_slowAlloc(32, -1);
    v25 = v18;
    *(_DWORD *)v16 = 136315394;
    v23 = v8;
    v19 = *(_QWORD *)(a3 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName);
    v20 = *(_QWORD *)(a3 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName + 8);
    swift_bridgeObjectRetain(v20);
    v24 = sub_1001DEF4C(v19, v20, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25);
    swift_release(a3);
    swift_bridgeObjectRelease(v20);
    *(_WORD *)(v16 + 12) = 2112;
    v21 = _convertErrorToNSError(_:)(a1);
    v24 = v21;
    v8 = v23;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25);
    *v17 = v21;
    sub_1000057B0(a1, 1);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "%s - error fetching custodian records: %@", (uint8_t *)v16, 0x16u);
    v22 = sub_1000080B4((uint64_t *)&unk_10028BC20);
    swift_arrayDestroy(v17, 1, v22);
    swift_slowDealloc(v17, -1, -1);
    swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v18, -1, -1);
    swift_slowDealloc(v16, -1, -1);
  }
  else
  {
    swift_release(a3);
    sub_1000057B0(a1, 1);
  }

  swift_errorRetain(a1);
  v8(a1);
  sub_1000057B0(a1, 1);
  return sub_1000057B0(a1, 1);
}

uint64_t sub_10010C18C(char a1, uint64_t a2, uint64_t (*a3)(_QWORD, uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v15;
  uint64_t v16;

  if (qword_10028ADE0 != -1)
    swift_once(&qword_10028ADE0, sub_100046DA0);
  v6 = type metadata accessor for Logger(0);
  v7 = sub_100005288(v6, (uint64_t)qword_1002A8A20);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(12, -1);
    v11 = swift_slowAlloc(32, -1);
    v16 = v11;
    *(_DWORD *)v10 = 136315138;
    if ((a1 & 1) != 0)
      v12 = 0xD00000000000001ELL;
    else
      v12 = 0xD000000000000026;
    if ((a1 & 1) != 0)
      v13 = 0x800000010020D0B0;
    else
      v13 = 0x800000010020D080;
    v15 = sub_1001DEF4C(v12, v13, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16);
    swift_bridgeObjectRelease(v13);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "%s", v10, 0xCu);
    swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);
  }

  return a3(a1 & 1, a2);
}

uint64_t sub_10010C368(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int64_t v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  objc_class *v40;
  _BYTE *v41;
  uint64_t (**v42)(uint64_t, uint64_t);
  double v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD aBlock[5];
  uint64_t v73;
  objc_super v74;

  v58 = a5;
  v61 = a3;
  v59 = a2;
  v69 = (_QWORD *)type metadata accessor for UUID(0);
  v9 = *(v69 - 1);
  __chkstk_darwin(v69, v10);
  v12 = (char *)&v55 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = type metadata accessor for CustodianRecord(0);
  v13 = *(_QWORD *)(v68 - 8);
  __chkstk_darwin(v68, v14);
  v66 = v15;
  v16 = (char *)&v55 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for PartialErrorHandler();
  swift_allocObject(v17, 32, 7);
  v62 = sub_1001561E0();
  v18 = swift_allocObject(&unk_100268408, 24, 7);
  v19 = sub_100016520((uint64_t)_swiftEmptyArrayStorage);
  v60 = v18;
  *(_QWORD *)(v18 + 16) = v19;
  v20 = *(_QWORD *)(a1 + 16);
  if (v20)
  {
    v55 = a6;
    v56 = a4;
    aBlock[0] = _swiftEmptyArrayStorage;
    sub_1001D4BFC(0, v20, 0);
    v21 = *(unsigned __int8 *)(v13 + 80);
    v65 = ~v21;
    v67 = v21;
    v57 = a1;
    v22 = a1 + ((v21 + 32) & ~v21);
    v71 = *(_QWORD *)(v13 + 72);
    v23 = v22;
    v24 = v20;
    v25 = v69;
    do
    {
      sub_100027FE8(v23, (uint64_t)v16, type metadata accessor for CustodianRecord);
      (*(void (**)(char *, char *, _QWORD *))(v9 + 16))(v12, &v16[*(int *)(v68 + 20)], v25);
      sub_100028388((uint64_t)v16, type metadata accessor for CustodianRecord);
      v26 = aBlock[0];
      if ((swift_isUniquelyReferenced_nonNull_native(aBlock[0]) & 1) == 0)
      {
        sub_1001D4BFC(0, *(_QWORD *)(v26 + 16) + 1, 1);
        v26 = aBlock[0];
      }
      v28 = *(_QWORD *)(v26 + 16);
      v27 = *(_QWORD *)(v26 + 24);
      if (v28 >= v27 >> 1)
      {
        sub_1001D4BFC(v27 > 1, v28 + 1, 1);
        v26 = aBlock[0];
      }
      *(_QWORD *)(v26 + 16) = v28 + 1;
      v29 = v26
          + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))
          + *(_QWORD *)(v9 + 72) * v28;
      v25 = v69;
      (*(void (**)(unint64_t, char *, _QWORD *))(v9 + 32))(v29, v12, v69);
      aBlock[0] = v26;
      v23 += v71;
      --v24;
    }
    while (v24);
    v30 = sub_1000FB118(v26);
    swift_bridgeObjectRelease(v26);
    v31 = *(_QWORD *)(v30 + 16);
    swift_bridgeObjectRelease(v30);
    v32 = v70;
    *(_QWORD *)(v70 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_uniqueCustodianCount) = v31;
    v33 = *(_QWORD **)(v32 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_queue);
    v34 = (v67 + 24) & v65;
    v67 |= 7uLL;
    v68 = v34;
    v69 = v33;
    v66 = (v66 + v34 + 7) & 0xFFFFFFFFFFFFFFF8;
    v65 = (v66 + 23) & 0xFFFFFFFFFFFFFFF8;
    v64 = (v65 + 15) & 0xFFFFFFFFFFFFFFF8;
    v63 = v64 + 8;
    swift_bridgeObjectRetain(v57);
    a4 = v56;
    v35 = v61;
    v36 = v62;
    v37 = v60;
    do
    {
      sub_100027FE8(v22, (uint64_t)v16, type metadata accessor for CustodianRecord);
      v38 = swift_allocObject(&unk_100268430, v63, v67);
      *(_QWORD *)(v38 + 16) = v32;
      sub_10003B730((uint64_t)v16, v38 + v68, type metadata accessor for CustodianRecord);
      v39 = (_QWORD *)(v38 + v66);
      *v39 = v35;
      v39[1] = a4;
      *(_QWORD *)(v38 + v65) = v36;
      *(_QWORD *)(v38 + v64) = v37;
      v40 = (objc_class *)type metadata accessor for AsyncOperation();
      v41 = objc_allocWithZone(v40);
      v41[OBJC_IVAR____TtC13appleaccountd14AsyncOperation_state] = 0;
      v42 = (uint64_t (**)(uint64_t, uint64_t))&v41[OBJC_IVAR____TtC13appleaccountd14AsyncOperation_workBlock];
      *v42 = sub_10011E068;
      v42[1] = (uint64_t (*)(uint64_t, uint64_t))v38;
      v74.receiver = v41;
      v74.super_class = v40;
      v32 = v70;
      swift_retain(v70);
      swift_retain(v37);
      swift_retain(v36);
      *(_QWORD *)&v43 = swift_bridgeObjectRetain(a4).n128_u64[0];
      v44 = objc_msgSendSuper2(&v74, "init", v43);
      objc_msgSend(v69, "addOperation:", v44);

      v22 += v71;
      --v20;
    }
    while (v20);
    a1 = v57;
    swift_bridgeObjectRelease(v57);
    a6 = v55;
  }
  else
  {
    v45 = sub_1000FB118((uint64_t)_swiftEmptyArrayStorage);
    swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
    v46 = *(_QWORD *)(v45 + 16);
    swift_bridgeObjectRelease(v45);
    v32 = v70;
    *(_QWORD *)(v70 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_uniqueCustodianCount) = v46;
  }
  v47 = *(void **)(v32 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_queue);
  v48 = swift_allocObject(&unk_100268458, 88, 7);
  v49 = v60;
  *(_QWORD *)(v48 + 16) = v32;
  *(_QWORD *)(v48 + 24) = v49;
  v50 = v62;
  v51 = v58;
  *(_QWORD *)(v48 + 32) = v62;
  *(_QWORD *)(v48 + 40) = v51;
  *(_QWORD *)(v48 + 48) = a6;
  *(_QWORD *)(v48 + 56) = a1;
  *(_BYTE *)(v48 + 64) = v59 & 1;
  *(_QWORD *)(v48 + 72) = v61;
  *(_QWORD *)(v48 + 80) = a4;
  aBlock[4] = sub_10011E134;
  v73 = v48;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000051D0;
  aBlock[3] = &unk_100268470;
  v52 = _Block_copy(aBlock);
  v53 = v73;
  swift_bridgeObjectRetain(a1);
  swift_retain(v32);
  swift_retain(v49);
  swift_retain(v50);
  swift_retain(a6);
  swift_bridgeObjectRetain(a4);
  swift_release(v53);
  objc_msgSend(v47, "addBarrierBlock:", v52);
  _Block_release(v52);
  swift_release(v50);
  return swift_release(v49);
}

uint64_t sub_10010C8C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  __n128 v31;
  os_log_type_t v32;
  _BOOL4 v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87[6];

  v75 = a2;
  v76 = a8;
  v74 = a7;
  v78 = a5;
  v79 = a6;
  v70 = a1;
  v10 = type metadata accessor for UUID(0);
  v85 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10, v11);
  v80 = (char *)&v67 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1000080B4(&qword_10028C448);
  v72 = *(_QWORD *)(v13 - 8);
  v73 = v13;
  __chkstk_darwin(v13, v14);
  v71 = (char *)&v67 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for CustodianRecord(0);
  v17 = *(_QWORD *)(v16 - 8);
  v19 = __chkstk_darwin(v16, v18);
  v77 = (uint64_t)&v67 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __chkstk_darwin(v19, v21);
  v69 = (uint64_t)&v67 - v23;
  v84 = v24;
  __chkstk_darwin(v22, v25);
  v27 = (char *)&v67 - v26;
  if (qword_10028ADE0 != -1)
    swift_once(&qword_10028ADE0, sub_100046DA0);
  v81 = v16;
  v83 = v10;
  v28 = type metadata accessor for Logger(0);
  sub_100005288(v28, (uint64_t)qword_1002A8A20);
  sub_100027FE8(a4, (uint64_t)v27, type metadata accessor for CustodianRecord);
  v29 = swift_retain(a3);
  v30 = Logger.logObject.getter(v29);
  v32 = static os_log_type_t.default.getter(v31);
  v33 = os_log_type_enabled(v30, v32);
  v82 = a4;
  if (v33)
  {
    v34 = swift_slowAlloc(22, -1);
    v35 = swift_slowAlloc(64, -1);
    v87[0] = v35;
    *(_DWORD *)v34 = 136315394;
    v68 = v17;
    v37 = *(_QWORD *)(a3 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName);
    v36 = *(_QWORD *)(a3 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName + 8);
    swift_bridgeObjectRetain(v36);
    v86 = sub_1001DEF4C(v37, v36, v87);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v86, v87);
    swift_release(a3);
    swift_bridgeObjectRelease(v36);
    *(_WORD *)(v34 + 12) = 2080;
    v38 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v39 = dispatch thunk of CustomStringConvertible.description.getter(v83, v38);
    v41 = v40;
    v86 = sub_1001DEF4C(v39, v40, v87);
    v17 = v68;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v86, v87);
    swift_bridgeObjectRelease(v41);
    sub_100028388((uint64_t)v27, type metadata accessor for CustodianRecord);
    _os_log_impl((void *)&_mh_execute_header, v30, v32, "%s - Starting Custodian Preflight Activity for %s", (uint8_t *)v34, 0x16u);
    swift_arrayDestroy(v35, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v35, -1, -1);
    a4 = v82;
    swift_slowDealloc(v34, -1, -1);
  }
  else
  {
    swift_release(a3);
    sub_100028388((uint64_t)v27, type metadata accessor for CustodianRecord);
  }

  v42 = a3;
  v43 = v69;
  sub_100027FE8(a4, v69, type metadata accessor for CustodianRecord);
  v44 = *(unsigned __int8 *)(v17 + 80);
  v45 = (v44 + 24) & ~v44;
  v68 = v44 | 7;
  v46 = (v84 + v45 + 7) & 0xFFFFFFFFFFFFFFF8;
  v47 = (v46 + 15) & 0xFFFFFFFFFFFFFFF8;
  v48 = swift_allocObject(&unk_100268570, v47 + 16, v44 | 7);
  v49 = v74;
  *(_QWORD *)(v48 + 16) = v74;
  sub_10003B730(v43, v48 + v45, type metadata accessor for CustodianRecord);
  v50 = v76;
  *(_QWORD *)(v48 + v46) = v76;
  v51 = (_QWORD *)(v48 + v47);
  v52 = v75;
  *v51 = v70;
  v51[1] = v52;
  v67 = v42;
  v54 = v71;
  v53 = v72;
  v55 = v73;
  (*(void (**)(char *, uint64_t, uint64_t))(v72 + 16))(v71, v42 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck__custodianStorage, v73);
  swift_retain(v49);
  swift_retain(v50);
  swift_retain(v52);
  Dependency.wrappedValue.getter(v87, v55);
  (*(void (**)(char *, uint64_t))(v53 + 8))(v54, v55);
  sub_10000732C(v87, v87[3]);
  v56 = v82;
  v57 = (uint64_t)v80;
  v58 = v83;
  (*(void (**)(char *, uint64_t, uint64_t))(v85 + 16))(v80, v82 + *(int *)(v81 + 20), v83);
  v59 = v77;
  sub_100027FE8(v56, v77, type metadata accessor for CustodianRecord);
  v60 = (v44 + 56) & ~v44;
  v61 = (_QWORD *)swift_allocObject(&unk_100268598, v60 + v84, v68);
  v62 = v67;
  v63 = v78;
  v64 = v79;
  v61[2] = v67;
  v61[3] = v63;
  v61[4] = v64;
  v61[5] = sub_10011E3B0;
  v61[6] = v48;
  sub_10003B730(v59, (uint64_t)v61 + v60, type metadata accessor for CustodianRecord);
  v65 = swift_allocObject(&unk_1002685C0, 32, 7);
  *(_QWORD *)(v65 + 16) = sub_10011E570;
  *(_QWORD *)(v65 + 24) = v61;
  swift_retain(v62);
  swift_bridgeObjectRetain(v64);
  swift_retain(v48);
  swift_retain(v61);
  sub_1001BD630(v57, (uint64_t)sub_10011E874, v65);
  swift_release(v61);
  swift_release(v65);
  (*(void (**)(uint64_t, uint64_t))(v85 + 8))(v57, v58);
  sub_100006F58(v87);
  return swift_release(v48);
}

uint64_t sub_10010CE7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t), uint64_t (*a6)(uint64_t))
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t *v16;
  uint64_t v17;
  Swift::String v18;
  uint64_t v19;
  Swift::String v20;
  void *object;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  uint64_t (**v28)(uint64_t);
  uint64_t (*v29)(uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(uint64_t);
  uint64_t (*v38)(uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v37 = a5;
  v38 = a6;
  v10 = type metadata accessor for CustodianRecord(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  v14 = __chkstk_darwin(v10, v13);
  v15 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    v16 = (uint64_t *)(a3 + *(int *)(v10 + 24));
    v17 = v16[1];
    v40 = *v16;
    v41 = v17;
    swift_errorRetain(a1);
    swift_bridgeObjectRetain(v17);
    v18._countAndFlagsBits = 58;
    v18._object = (void *)0xE100000000000000;
    String.append(_:)(v18);
    v20._countAndFlagsBits = UUID.uuidString.getter(v19);
    object = v20._object;
    String.append(_:)(v20);
    swift_bridgeObjectRelease(object);
    v22 = v40;
    v23 = v41;
    sub_100027FE8(a3, (uint64_t)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for CustodianRecord);
    v24 = *(unsigned __int8 *)(v11 + 80);
    v25 = (v24 + 40) & ~v24;
    v26 = (v12 + v25 + 7) & 0xFFFFFFFFFFFFFFF8;
    v27 = (_QWORD *)swift_allocObject(&unk_1002685E8, v26 + 16, v24 | 7);
    v27[2] = a2;
    v27[3] = a1;
    v27[4] = a4;
    sub_10003B730((uint64_t)v15, (uint64_t)v27 + v25, type metadata accessor for CustodianRecord);
    v28 = (uint64_t (**)(uint64_t))((char *)v27 + v26);
    v29 = v38;
    *v28 = v37;
    v28[1] = v29;
    swift_errorRetain(a1);
    swift_retain(a2);
    swift_retain(a4);
    swift_retain(v29);
    sub_100155AC4(v22, v23, a1, (uint64_t)sub_10011E758, (uint64_t)v27);
    swift_bridgeObjectRelease(v23);
    swift_errorRelease(a1);
    return swift_release(v27);
  }
  else
  {
    v31 = UUID.uuidString.getter(v14);
    v33 = v32;
    swift_beginAccess(a4 + 16, &v40, 33, 0);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(a4 + 16));
    v39 = *(_QWORD *)(a4 + 16);
    *(_QWORD *)(a4 + 16) = 0x8000000000000000;
    sub_10001FCA8(1, v31, v33, isUniquelyReferenced_nonNull_native);
    v35 = *(_QWORD *)(a4 + 16);
    *(_QWORD *)(a4 + 16) = v39;
    swift_bridgeObjectRelease(v33);
    swift_bridgeObjectRelease(v35);
    v36 = swift_endAccess(&v40);
    return v37(v36);
  }
}

uint64_t sub_10010D0B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t))
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[7];
  _BYTE v14[24];

  v9 = a3 + 16;
  swift_beginAccess(a1 + 24, v14, 0, 0);
  v10 = *(_QWORD *)(a1 + 24);
  v13[2] = a2;
  v13[3] = v9;
  v13[4] = a4;
  swift_bridgeObjectRetain(v10);
  sub_10001A2B4((void (*)(uint64_t *))sub_10011E7A4, (uint64_t)v13, v10);
  v11 = swift_bridgeObjectRelease(v10);
  return a5(v11);
}

uint64_t sub_10010D144(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[24];
  _QWORD v18[3];
  _BYTE v19[8];
  _QWORD v20[3];
  _BYTE v21[8];

  swift_getErrorValue(a2, v21, v20);
  v5 = v20[1];
  v6 = v20[2];
  if (qword_10028AD88 != -1)
    swift_once(&qword_10028AD88, sub_10002FC20);
  if ((sub_10002F768(qword_1002A8970, v5, v6) & 1) != 0)
    goto LABEL_7;
  swift_getErrorValue(a2, v19, v18);
  v7 = v18[1];
  v8 = v18[2];
  if (qword_10028AD90 != -1)
    swift_once(&qword_10028AD90, sub_10002FC48);
  result = sub_10002F768(qword_1002A8978, v7, v8);
  if ((result & 1) != 0)
  {
LABEL_7:
    v10 = type metadata accessor for CustodianRecord(0);
    v11 = UUID.uuidString.getter(v10);
    v13 = v12;
    swift_beginAccess(a3, v17, 33, 0);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a3);
    v16 = *a3;
    *a3 = 0x8000000000000000;
    sub_10001FCA8(0, v11, v13, isUniquelyReferenced_nonNull_native);
    v15 = *a3;
    *a3 = v16;
    swift_bridgeObjectRelease(v13);
    swift_bridgeObjectRelease(v15);
    return swift_endAccess(v17);
  }
  return result;
}

id sub_10010D2C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8, _QWORD *a9)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  _BOOL4 v34;
  uint8_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint8_t *v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  uint8_t *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  _QWORD *v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  NSObject *v86;
  os_log_type_t v87;
  _BOOL4 v88;
  uint8_t *v89;
  uint64_t v90;
  __n128 v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  NSObject *v96;
  os_log_type_t v97;
  _BOOL4 v98;
  uint64_t v99;
  uint8_t *v100;
  uint64_t v101;
  uint64_t v102;
  _BYTE *v103;
  uint64_t v104;
  uint64_t v105;
  void (*v106)(_BYTE *, uint64_t, uint64_t);
  uint64_t v107;
  void (*v108)(_BYTE *, uint64_t);
  _BYTE *v109;
  uint64_t v110;
  uint64_t v111;
  id v112;
  uint64_t v113;
  void *v114;
  uint64_t v115;
  NSObject *v116;
  os_log_type_t v117;
  uint8_t *v118;
  uint64_t v119;
  __n128 v120;
  uint64_t v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t v124;
  NSObject *v125;
  os_log_type_t v126;
  uint8_t *v127;
  uint64_t *v128;
  uint64_t v129;
  uint64_t v130;
  char v131;
  uint64_t v132;
  BOOL v133;
  BOOL v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  void *v140;
  _BYTE *v141;
  uint64_t v142;
  _QWORD *v143;
  uint64_t v144;
  void *v145;
  id result;
  void *v147;
  void *v148;
  _QWORD *v149;
  uint64_t v150;
  os_log_type_t v151;
  _BOOL4 v152;
  _BOOL4 v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  int64_t v157;
  _QWORD *v158;
  uint64_t *v159;
  uint64_t v160;
  uint64_t v161;
  unint64_t v162;
  unint64_t v163;
  _QWORD *v164;
  _BYTE *v165;
  uint64_t v166;
  void *v167;
  uint64_t (*v168)(char, uint64_t);
  uint64_t v169;
  uint64_t inited;
  void *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  id v176;
  __n128 v177;
  unint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  _QWORD *v182;
  uint64_t v183;
  uint64_t v184;
  void (*v185)(uint64_t, uint64_t *, unint64_t, uint64_t (*)(char, uint64_t), uint64_t, void *, uint64_t (*)(char, uint64_t));
  uint64_t *v186;
  _BYTE v187[4];
  int v188;
  uint64_t v189;
  uint64_t v190;
  _BYTE *v191;
  uint64_t v192;
  _BYTE *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  _BYTE *v202;
  uint64_t v203;
  uint64_t v204;
  unint64_t v205;
  _QWORD *v206;
  uint64_t *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211[3];
  void *v212;
  uint64_t (*v213)(char, uint64_t);
  _QWORD *v214;
  uint64_t v215;
  _BYTE v216[32];
  char v217[24];
  char v218[24];
  _QWORD v219[3];
  char v220[8];
  _QWORD v221[3];
  char v222[16];
  char v223[24];
  char v224[32];

  v200 = a6;
  v208 = a4;
  v209 = a5;
  v14 = sub_1000080B4(&qword_10028CD60);
  v192 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14, v15);
  v191 = &v187[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v17 = sub_1000080B4(&qword_10028FA50);
  v194 = *(_QWORD *)(v17 - 8);
  v195 = v17;
  __chkstk_darwin(v17, v18);
  v193 = &v187[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v203 = sub_1000080B4(&qword_10028CCE8);
  v201 = *(_QWORD *)(v203 - 8);
  __chkstk_darwin(v203, v20);
  v202 = &v187[-((v21 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v22 = sub_10010B224();
  v24 = sub_100154E08(v22, v23);
  swift_release(v22);
  v25 = sub_10010B224();
  v207 = (uint64_t *)(a2 + 16);
  swift_beginAccess(a2 + 16, v224, 0, 0);
  v26 = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain(v26);
  sub_100154EB8(v27);
  swift_release(v25);
  swift_bridgeObjectRelease(v26);
  v28 = (_QWORD *)(a3 + 24);
  swift_beginAccess(a3 + 24, v223, 0, 0);
  if (!*(_QWORD *)(*(_QWORD *)(a3 + 24) + 16))
  {
    swift_bridgeObjectRelease(v24);
    if (qword_10028ADE0 != -1)
      swift_once(&qword_10028ADE0, sub_100046DA0);
    v43 = type metadata accessor for Logger(0);
    v44 = sub_100005288(v43, (uint64_t)qword_1002A8A20);
    v45 = Logger.logObject.getter(v44);
    v46 = static os_log_type_t.debug.getter(v45);
    if (os_log_type_enabled(v45, v46))
    {
      v47 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v47 = 0;
      _os_log_impl((void *)&_mh_execute_header, v45, v46, "Overall Custodian Preflight activity successful.", v47, 2u);
      swift_slowDealloc(v47, -1, -1);
    }
LABEL_60:

    v101 = v208;
    v102 = v209;
    return (id)sub_100155E5C(v101, v102);
  }
  v198 = v24;
  v189 = a8;
  if (qword_10028ADE0 != -1)
    swift_once(&qword_10028ADE0, sub_100046DA0);
  v29 = type metadata accessor for Logger(0);
  v30 = sub_100005288(v29, (uint64_t)qword_1002A8A20);
  v31 = swift_retain_n(a3, 2);
  v204 = v30;
  v32 = Logger.logObject.getter(v31);
  v33 = static os_log_type_t.error.getter(v32);
  v34 = os_log_type_enabled(v32, v33);
  v196 = a1;
  v190 = v14;
  v199 = a3;
  v188 = a7;
  v206 = (_QWORD *)(a3 + 24);
  if (v34)
  {
    v35 = (uint8_t *)swift_slowAlloc(12, -1);
    v36 = swift_slowAlloc(32, -1);
    v211[0] = v36;
    *(_DWORD *)v35 = 136315138;
    v205 = (unint64_t)(v35 + 4);
    v37 = *(_QWORD *)(a3 + 24);
    swift_bridgeObjectRetain(v37);
    v38 = sub_1000080B4(&qword_10028E850);
    v39 = Dictionary.description.getter(v37, &type metadata for String, v38, &protocol witness table for String);
    v41 = v40;
    swift_bridgeObjectRelease(v37);
    v215 = sub_1001DEF4C(v39, v41, v211);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v215, v216);
    swift_release_n(a3, 2);
    swift_bridgeObjectRelease(v41);
    _os_log_impl((void *)&_mh_execute_header, v32, v33, "Overall Custodian Preflight activity failed: %s", v35, 0xCu);
    swift_arrayDestroy(v36, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v36, -1, -1);
    v42 = v35;
    v28 = v206;
    swift_slowDealloc(v42, -1, -1);

  }
  else
  {

    swift_release_n(a3, 2);
  }
  v48 = *v28;
  swift_bridgeObjectRetain(*v28);
  sub_10010E494(v49);
  v51 = v50;
  v197 = 0;
  swift_bridgeObjectRelease(v48);
  v52 = _swiftEmptyArrayStorage;
  v211[0] = (uint64_t)_swiftEmptyArrayStorage;
  v53 = v51[2];
  v205 = (unint64_t)v51;
  if (v53)
  {
    v54 = v51 + 4;
    do
    {
      v55 = *v54;
      swift_getErrorValue(*v54, v222, v221);
      v56 = v221[1];
      v57 = v221[2];
      swift_errorRetain(v55);
      if (qword_10028AD88 != -1)
        swift_once(&qword_10028AD88, sub_10002FC20);
      if ((sub_10002F768(qword_1002A8970, v56, v57) & 1) != 0)
      {
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v52);
        v211[0] = (uint64_t)v52;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_1001D4BB4(0, v52[2] + 1, 1);
          v52 = (_QWORD *)v211[0];
        }
        v60 = v52[2];
        v59 = v52[3];
        if (v60 >= v59 >> 1)
        {
          sub_1001D4BB4(v59 > 1, v60 + 1, 1);
          v52 = (_QWORD *)v211[0];
        }
        v52[2] = v60 + 1;
        v52[v60 + 4] = v55;
      }
      else
      {
        swift_errorRelease(v55);
      }
      ++v54;
      --v53;
    }
    while (v53);
  }
  swift_bridgeObjectRelease(v205);
  v205 = v52[2];
  swift_release(v52);
  v61 = *v206;
  swift_bridgeObjectRetain(*v206);
  v62 = v197;
  sub_10010E494(v63);
  v65 = v64;
  v197 = v62;
  swift_bridgeObjectRelease(v61);
  v66 = _swiftEmptyArrayStorage;
  v211[0] = (uint64_t)_swiftEmptyArrayStorage;
  v67 = v65[2];
  v206 = v65;
  if (v67)
  {
    v68 = v65 + 4;
    do
    {
      v69 = *v68;
      swift_getErrorValue(*v68, v220, v219);
      v70 = v219[1];
      v71 = v219[2];
      swift_errorRetain(v69);
      if (qword_10028AD90 != -1)
        swift_once(&qword_10028AD90, sub_10002FC48);
      if ((sub_10002F768(qword_1002A8978, v70, v71) & 1) != 0)
      {
        v72 = swift_isUniquelyReferenced_nonNull_native(v66);
        v211[0] = (uint64_t)v66;
        if ((v72 & 1) == 0)
        {
          sub_1001D4BB4(0, v66[2] + 1, 1);
          v66 = (_QWORD *)v211[0];
        }
        v74 = v66[2];
        v73 = v66[3];
        if (v74 >= v73 >> 1)
        {
          sub_1001D4BB4(v73 > 1, v74 + 1, 1);
          v66 = (_QWORD *)v211[0];
        }
        v66[2] = v74 + 1;
        v66[v74 + 4] = v69;
      }
      else
      {
        swift_errorRelease(v69);
      }
      ++v68;
      --v67;
    }
    while (v67);
  }
  swift_bridgeObjectRelease(v206);
  v75 = v66[2];
  v76 = v205 | v75;
  swift_release(v66);
  if (!v76)
  {
    v95 = swift_bridgeObjectRelease(v198);
    v96 = Logger.logObject.getter(v95);
    v97 = static os_log_type_t.debug.getter(v96);
    v98 = os_log_type_enabled(v96, v97);
    v99 = v209;
    if (v98)
    {
      v100 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v100 = 0;
      _os_log_impl((void *)&_mh_execute_header, v96, v97, "No Error 32 or 34 found. Not posting repair transparency CFU, Not triggering TTR. Ending preflight.", v100, 2u);
      swift_slowDealloc(v100, -1, -1);
    }

    v101 = v208;
    v102 = v99;
    return (id)sub_100155E5C(v101, v102);
  }
  v77 = v207;
  swift_beginAccess(v207, v218, 0, 0);
  v78 = *v77;
  swift_bridgeObjectRetain(v78);
  v81 = sub_100118134(v79, v80);
  swift_bridgeObjectRelease(v78);
  v82 = v200;
  swift_bridgeObjectRetain(v200);
  v83 = v196;
  swift_retain(v196);
  v84 = sub_100118F84((uint64_t)v81, v82, v83);
  swift_bridgeObjectRelease(v82);
  swift_release(v83);
  v85 = swift_bridgeObjectRetain_n(v84, 2);
  v86 = Logger.logObject.getter(v85);
  v87 = static os_log_type_t.info.getter();
  v88 = os_log_type_enabled(v86, v87);
  v206 = (_QWORD *)v75;
  if (v88)
  {
    v89 = (uint8_t *)swift_slowAlloc(12, -1);
    v90 = swift_slowAlloc(32, -1);
    v211[0] = v90;
    *(_DWORD *)v89 = 136315138;
    v91 = swift_bridgeObjectRetain(v84);
    v92 = Array.description.getter(v91);
    v94 = v93;
    swift_bridgeObjectRelease(v84);
    v215 = sub_1001DEF4C(v92, v94, v211);
    v83 = v196;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v215, v216);
    swift_bridgeObjectRelease_n(v84, 2);
    swift_bridgeObjectRelease(v94);
    _os_log_impl((void *)&_mh_execute_header, v86, v87, "Repair Eligible Custodian UUIDs: %s", v89, 0xCu);
    swift_arrayDestroy(v90, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v90, -1, -1);
    swift_slowDealloc(v89, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v84, 2);
  }
  v104 = v201;
  v103 = v202;
  v105 = v83 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck__urlBagProvider;
  v106 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v201 + 16);
  v107 = v203;
  v106(v202, v83 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck__urlBagProvider, v203);
  Dependency.wrappedValue.getter(v211, v107);
  v108 = *(void (**)(_BYTE *, uint64_t))(v104 + 8);
  v108(v103, v107);
  LODWORD(v103) = objc_msgSend((id)objc_opt_self(AAUrlBagHelper), "canRepairCustodian");
  sub_100006F58(v211);
  if (!(_DWORD)v103)
  {
    v124 = swift_bridgeObjectRelease(v84);
    v113 = v198;
LABEL_51:
    v125 = Logger.logObject.getter(v124);
    v126 = static os_log_type_t.debug.getter(v125);
    if (os_log_type_enabled(v125, v126))
    {
      v127 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v127 = 0;
      _os_log_impl((void *)&_mh_execute_header, v125, v126, "Untrusted CRK Repair is not enabled. Continuing to TTR.", v127, 2u);
      swift_slowDealloc(v127, -1, -1);
    }

    v128 = v207;
    swift_beginAccess(v207, v217, 0, 0);
    v129 = *v128;
    swift_bridgeObjectRetain(*v128);
    v131 = sub_100110A48(v130, v113);
    swift_bridgeObjectRelease(v129);
    v132 = swift_bridgeObjectRelease(v113);
    if ((v131 & 1) != 0)
    {
      v132 = sub_10011A1AC();
      if ((v132 & 1) != 0)
      {
        v133 = v206 != 0;
        v134 = v205 != 0;
        v135 = swift_allocObject(&unk_1002684A8, 56, 7);
        v136 = v199;
        v138 = v208;
        v137 = v209;
        *(_QWORD *)(v135 + 16) = v199;
        *(_QWORD *)(v135 + 24) = v138;
        *(_QWORD *)(v135 + 32) = v137;
        *(_BYTE *)(v135 + 40) = v134;
        v139 = v137;
        *(_BYTE *)(v135 + 41) = v133;
        *(_QWORD *)(v135 + 48) = v83;
        v140 = (void *)objc_opt_self(AADeviceInfo);
        swift_retain_n(v136, 2);
        swift_retain_n(v83, 2);
        swift_retain_n(v139, 2);
        if (objc_msgSend(v140, "isInternalBuild"))
        {
          v141 = v202;
          v142 = v203;
          v106(v202, v105, v203);
          Dependency.wrappedValue.getter(&v215, v142);
          v108(v141, v142);
          v143 = (_QWORD *)swift_allocObject(&unk_1002684D0, 40, 7);
          v144 = v196;
          v143[2] = v196;
          v143[3] = sub_10011E174;
          v143[4] = v135;
          v145 = (void *)objc_opt_self(AKURLBag);
          swift_retain(v144);
          swift_retain(v135);
          result = objc_msgSend(v145, "sharedBag");
          if (!result)
          {
            __break(1u);
            return result;
          }
          v147 = result;
          v213 = sub_10011E1B8;
          v214 = v143;
          v211[0] = (uint64_t)_NSConcreteStackBlock;
          v211[1] = 1107296256;
          v211[2] = (uint64_t)sub_100045BC0;
          v212 = &unk_1002684E8;
          v148 = _Block_copy(v211);
          v149 = v214;
          swift_retain(v143);
          swift_release(v149);
          objc_msgSend(v147, "requestNewURLBagIfNecessaryWithCompletion:", v148);
          _Block_release(v148);
          swift_release(v143);

          sub_100006F58(&v215);
          swift_release(v144);
          v150 = v209;
        }
        else
        {
          v155 = v196;
          sub_10010EDE8(0, v136, v138, v139, v205 != 0, v206 != 0, v196);
          swift_release(v155);
          v150 = v139;
        }
        swift_release(v150);
        swift_release(v136);
        return (id)swift_release(v135);
      }
    }
    v45 = Logger.logObject.getter(v132);
    v151 = static os_log_type_t.error.getter(v45);
    if (os_log_type_enabled(v45, v151))
    {
      v152 = v206 != 0;
      v153 = v205 != 0;
      v154 = swift_slowAlloc(20, -1);
      *(_DWORD *)v154 = 67109632;
      LODWORD(v211[0]) = v131 & 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v211, (char *)v211 + 4);
      *(_WORD *)(v154 + 8) = 1024;
      LODWORD(v211[0]) = v153;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v211, (char *)v211 + 4);
      *(_WORD *)(v154 + 14) = 1024;
      LODWORD(v211[0]) = v152;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v211, (char *)v211 + 4);
      _os_log_impl((void *)&_mh_execute_header, v45, v151, "Skipping Custodian Preflight TTR: hasAtLeastOneNewInvalidCRK:%{BOOL}d,\nhasOctagonMissingKeysError:%{BOOL}d,\nhasOctagonUntrustedKeysError:%{BOOL}d", (uint8_t *)v154, 0x14u);
      swift_slowDealloc(v154, -1, -1);
    }
    goto LABEL_60;
  }
  v109 = v193;
  v110 = v194;
  v111 = v195;
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v194 + 16))(v193, v83 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck__accountStore, v195);
  Dependency.wrappedValue.getter(v211, v111);
  (*(void (**)(_BYTE *, uint64_t))(v110 + 8))(v109, v111);
  v112 = objc_msgSend(*(id *)(*sub_10000732C(v211, (uint64_t)v212) + 16), "aa_primaryAppleAccount");
  v113 = v198;
  if (!v112)
  {
    swift_bridgeObjectRelease(v84);
    v124 = sub_100006F58(v211);
    goto LABEL_51;
  }
  v114 = v112;
  sub_100006F58(v211);
  if (!*(_QWORD *)(v84 + 16))
  {

    v124 = swift_bridgeObjectRelease(v84);
    goto LABEL_51;
  }
  v207 = (uint64_t *)v114;
  swift_bridgeObjectRelease(v113);
  v115 = swift_bridgeObjectRetain_n(v84, 2);
  v116 = Logger.logObject.getter(v115);
  v117 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v116, v117))
  {
    v118 = (uint8_t *)swift_slowAlloc(12, -1);
    v119 = swift_slowAlloc(32, -1);
    v211[0] = v119;
    *(_DWORD *)v118 = 136315138;
    v120 = swift_bridgeObjectRetain(v84);
    v121 = Array.description.getter(v120);
    v123 = v122;
    swift_bridgeObjectRelease(v84);
    v215 = sub_1001DEF4C(v121, v123, v211);
    v83 = v196;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v215, v216);
    swift_bridgeObjectRelease_n(v84, 2);
    swift_bridgeObjectRelease(v123);
    _os_log_impl((void *)&_mh_execute_header, v116, v117, "Trying to post RC Repair Transparency CFU %s", v118, 0xCu);
    swift_arrayDestroy(v119, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v119, -1, -1);
    swift_slowDealloc(v118, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v84, 2);
  }
  v156 = v190;
  v206 = a9;
  v157 = *(_QWORD *)(v84 + 16);
  if (v157)
  {
    v211[0] = (uint64_t)_swiftEmptyArrayStorage;
    sub_1001D4B98(0, v157, 0);
    v158 = (_QWORD *)v211[0];
    v159 = (uint64_t *)(v84 + 40);
    do
    {
      v160 = *(v159 - 1);
      v161 = *v159;
      v211[0] = (uint64_t)v158;
      v163 = v158[2];
      v162 = v158[3];
      swift_bridgeObjectRetain(v161);
      if (v163 >= v162 >> 1)
      {
        sub_1001D4B98(v162 > 1, v163 + 1, 1);
        v158 = (_QWORD *)v211[0];
      }
      v159 += 2;
      v158[2] = v163 + 1;
      v164 = &v158[2 * v163];
      v164[4] = v160;
      v164[5] = v161;
      --v157;
    }
    while (v157);
    swift_bridgeObjectRelease(v84);
    v83 = v196;
    v156 = v190;
  }
  else
  {
    swift_bridgeObjectRelease(v84);
    v158 = _swiftEmptyArrayStorage;
  }
  v165 = v191;
  v166 = v192;
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v192 + 16))(v191, v83 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck__followUpController, v156);
  Dependency.wrappedValue.getter(v211, v156);
  (*(void (**)(_BYTE *, uint64_t))(v166 + 8))(v165, v156);
  v167 = v212;
  v168 = v213;
  v205 = (unint64_t)sub_10000732C(v211, (uint64_t)v212);
  v204 = AAFollowUpIdentifierCustodianReview;
  v169 = sub_1000080B4(&qword_1002927F8);
  inited = swift_initStackObject(v169, &v210);
  *(_OWORD *)(inited + 16) = xmmword_100218E30;
  v171 = (void *)AAFollowUpTrustedContactIDs;
  v215 = AAFollowUpTrustedContactIDs;
  type metadata accessor for AAFollowUpUserInfo(0);
  v172 = v83;
  v174 = v173;
  v175 = sub_100005150((unint64_t *)&qword_10028B6D8, (uint64_t (*)(uint64_t))type metadata accessor for AAFollowUpUserInfo, (uint64_t)&unk_1002180F4);
  v176 = v171;
  AnyHashable.init<A>(_:)((_QWORD *)(inited + 32), &v215, v174, v175, v177);
  *(_QWORD *)(inited + 96) = sub_1000080B4((uint64_t *)&unk_10028E800);
  *(_QWORD *)(inited + 72) = v158;
  v178 = sub_100016630(inited);
  v179 = swift_allocObject(&unk_100268520, 72, 7);
  v180 = v199;
  *(_QWORD *)(v179 + 16) = v199;
  *(_BYTE *)(v179 + 24) = v188 & 1;
  v181 = v189;
  *(_QWORD *)(v179 + 32) = v172;
  *(_QWORD *)(v179 + 40) = v181;
  v182 = v206;
  v183 = v208;
  v184 = v209;
  *(_QWORD *)(v179 + 48) = v206;
  *(_QWORD *)(v179 + 56) = v183;
  *(_QWORD *)(v179 + 64) = v184;
  v185 = (void (*)(uint64_t, uint64_t *, unint64_t, uint64_t (*)(char, uint64_t), uint64_t, void *, uint64_t (*)(char, uint64_t)))*((_QWORD *)v168 + 2);
  swift_retain(v180);
  swift_retain(v172);
  swift_bridgeObjectRetain(v182);
  swift_retain(v184);
  v186 = v207;
  v185(v204, v207, v178, sub_10011E200, v179, v167, v168);
  swift_bridgeObjectRelease(v178);
  swift_release(v179);

  return (id)sub_100006F58(v211);
}

void sub_10010E494(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  int64_t v6;
  int64_t v7;
  char *v8;
  unint64_t v9;
  unint64_t i;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;

  v2 = a1 + 64;
  v3 = 1 << *(_BYTE *)(a1 + 32);
  v4 = -1;
  if (v3 < 64)
    v4 = ~(-1 << v3);
  v5 = v4 & *(_QWORD *)(a1 + 64);
  v6 = (unint64_t)(v3 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v7 = 0;
  v8 = (char *)_swiftEmptyArrayStorage;
  if (!v5)
    goto LABEL_5;
LABEL_4:
  v9 = __clz(__rbit64(v5));
  v5 &= v5 - 1;
  for (i = v9 | (v7 << 6); ; i = __clz(__rbit64(v12)) + (v7 << 6))
  {
    v14 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8 * i);
    swift_errorRetain(v14);
    if ((swift_isUniquelyReferenced_nonNull_native(v8) & 1) == 0)
      v8 = sub_10013428C(0, *((_QWORD *)v8 + 2) + 1, 1, v8);
    v16 = *((_QWORD *)v8 + 2);
    v15 = *((_QWORD *)v8 + 3);
    if (v16 >= v15 >> 1)
      v8 = sub_10013428C((char *)(v15 > 1), v16 + 1, 1, v8);
    *((_QWORD *)v8 + 2) = v16 + 1;
    *(_QWORD *)&v8[8 * v16 + 32] = v14;
    if (v5)
      goto LABEL_4;
LABEL_5:
    v11 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v11 >= v6)
      goto LABEL_27;
    v12 = *(_QWORD *)(v2 + 8 * v11);
    ++v7;
    if (!v12)
    {
      v7 = v11 + 1;
      if (v11 + 1 >= v6)
        goto LABEL_27;
      v12 = *(_QWORD *)(v2 + 8 * v7);
      if (!v12)
      {
        v7 = v11 + 2;
        if (v11 + 2 >= v6)
          goto LABEL_27;
        v12 = *(_QWORD *)(v2 + 8 * v7);
        if (!v12)
        {
          v7 = v11 + 3;
          if (v11 + 3 >= v6)
            goto LABEL_27;
          v12 = *(_QWORD *)(v2 + 8 * v7);
          if (!v12)
            break;
        }
      }
    }
LABEL_20:
    v5 = (v12 - 1) & v12;
  }
  v13 = v11 + 4;
  if (v13 >= v6)
  {
LABEL_27:
    swift_release(a1);
    return;
  }
  v12 = *(_QWORD *)(v2 + 8 * v13);
  if (v12)
  {
    v7 = v13;
    goto LABEL_20;
  }
  while (1)
  {
    v7 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v7 >= v6)
      goto LABEL_27;
    v12 = *(_QWORD *)(v2 + 8 * v7);
    ++v13;
    if (v12)
      goto LABEL_20;
  }
LABEL_29:
  __break(1u);
}

BOOL sub_10010E66C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  unint64_t v32;
  int v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t, uint64_t);
  void *v36;
  id v37;
  _BOOL8 v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint64_t v44;
  id v45;
  void (*v47)(char *, uint64_t);
  uint64_t v48;
  void (*v49)(char *, uint64_t, uint64_t);
  uint64_t v50;
  char *v51;
  unint64_t v52;
  _BYTE v53[32];
  uint64_t v54;

  v4 = v3;
  v54 = a3;
  v7 = sub_1000080B4(&qword_10028CCE8);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  v11 = (char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1000080B4(&qword_10028D5C8);
  v14 = __chkstk_darwin(v12, v13);
  v16 = (char *)&v47 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14, v17);
  v19 = (char *)&v47 - v18;
  v20 = *a1;
  v21 = a1[1];
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRetain(a2);
  v22 = v20;
  v23 = v4;
  v25 = sub_100118D90(v24, v22, v21);
  v50 = v23;
  swift_bridgeObjectRelease(a2);
  swift_bridgeObjectRelease(v21);
  v26 = v25[2];
  v27 = type metadata accessor for CustodianRecord(0);
  v28 = *(_QWORD *)(v27 - 8);
  if (v26)
  {
    sub_100027FE8((uint64_t)v25 + ((*(unsigned __int8 *)(v28 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80)), (uint64_t)v19, type metadata accessor for CustodianRecord);
    v29 = 0;
  }
  else
  {
    v29 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v28 + 56))(v19, v29, 1, v27);
  swift_bridgeObjectRelease(v25);
  v51 = v19;
  sub_100024A20((uint64_t)v19, (uint64_t)v16, &qword_10028D5C8);
  type metadata accessor for CustodianRecord(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v16, 1, v27) == 1)
  {
    sub_100004934((uint64_t)v16, &qword_10028D5C8);
    v30 = 0;
  }
  else
  {
    v31 = &v16[*(int *)(v27 + 60)];
    v32 = *(_QWORD *)v31;
    v33 = v31[8];
    sub_100028388((uint64_t)v16, type metadata accessor for CustodianRecord);
    if (v33)
      v30 = 0;
    else
      v30 = v32;
  }
  v34 = v54;
  v35 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v48 = v54 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck__urlBagProvider;
  v49 = v35;
  ((void (*)(char *))v35)(v11);
  Dependency.wrappedValue.getter(&v52, v7);
  v47 = *(void (**)(char *, uint64_t))(v8 + 8);
  v47(v11, v7);
  v36 = (void *)objc_opt_self(AAUrlBagHelper);
  v37 = objc_msgSend(v36, "maxRepairCount");
  v39 = (uint64_t)v37 > 0 && v30 < (unint64_t)v37;
  sub_100006F58(&v52);
  if (qword_10028ADE0 != -1)
    swift_once(&qword_10028ADE0, sub_100046DA0);
  v40 = type metadata accessor for Logger(0);
  sub_100005288(v40, (uint64_t)qword_1002A8A20);
  v41 = swift_retain(v34);
  v42 = Logger.logObject.getter(v41);
  v43 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v42, v43))
  {
    v44 = swift_slowAlloc(28, -1);
    *(_DWORD *)v44 = 134218496;
    v52 = v30;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, v53);
    *(_WORD *)(v44 + 12) = 2048;
    v49(v11, v48, v7);
    Dependency.wrappedValue.getter(&v52, v7);
    v47(v11, v7);
    v45 = objc_msgSend(v36, "maxRepairCount");
    sub_100006F58(&v52);
    v52 = (unint64_t)v45;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, v53);
    swift_release(v54);
    *(_WORD *)(v44 + 22) = 1024;
    LODWORD(v52) = v39;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, (char *)&v52 + 4);
    _os_log_impl((void *)&_mh_execute_header, v42, v43, "CK repairCount %lu <  IdMS maxRepairCount %ld = %{BOOL}d", (uint8_t *)v44, 0x1Cu);
    swift_slowDealloc(v44, -1, -1);
  }
  else
  {
    swift_release(v34);
  }

  sub_100004934((uint64_t)v51, &qword_10028D5C8);
  return v39;
}

uint64_t sub_10010EA7C(char a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v30;
  char *v33;
  uint64_t v34;
  _BYTE v35[16];

  if (qword_10028ADE0 != -1)
    swift_once(&qword_10028ADE0, sub_100046DA0);
  v15 = type metadata accessor for Logger(0);
  sub_100005288(v15, (uint64_t)qword_1002A8A20);
  swift_errorRetain(a2);
  v16 = swift_errorRetain(a2);
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v17, v18))
  {
    v30 = a8;
    v19 = swift_slowAlloc(18, -1);
    v20 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v19 = 67109378;
    LODWORD(v34) = a1 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, (char *)&v34 + 4);
    *(_WORD *)(v19 + 8) = 2112;
    if (a2)
    {
      swift_errorRetain(a2);
      v21 = _swift_stdlib_bridgeErrorToNSError(a2);
      v34 = v21;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, v35);
    }
    else
    {
      v34 = 0;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, v35);
      v21 = 0;
    }
    *v20 = v21;
    swift_errorRelease(a2);
    swift_errorRelease(a2);
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Posted RC Repair Transparency CFU: %{BOOL}d error: %@", (uint8_t *)v19, 0x12u);
    v22 = sub_1000080B4((uint64_t *)&unk_10028BC20);
    swift_arrayDestroy(v20, 1, v22);
    swift_slowDealloc(v20, -1, -1);
    swift_slowDealloc(v19, -1, -1);

    a8 = v30;
  }
  else
  {
    swift_errorRelease(a2);
    swift_errorRelease(a2);

  }
  v33 = (char *)_swiftEmptyArrayStorage;
  if (a2)
  {
    swift_errorRetain(a2);
    v23 = sub_10013428C(0, 1, 1, (char *)_swiftEmptyArrayStorage);
    v25 = *((_QWORD *)v23 + 2);
    v24 = *((_QWORD *)v23 + 3);
    if (v25 >= v24 >> 1)
      v23 = sub_10013428C((char *)(v24 > 1), v25 + 1, 1, v23);
    *((_QWORD *)v23 + 2) = v25 + 1;
    *(_QWORD *)&v23[8 * v25 + 32] = a2;
    v33 = v23;
  }
  swift_beginAccess(a3 + 24, &v34, 0, 0);
  v26 = *(_QWORD *)(a3 + 24);
  swift_bridgeObjectRetain(v26);
  v28 = sub_1001A1574(v27);
  swift_bridgeObjectRelease(v26);
  sub_1001FD234((uint64_t)v28);
  if ((a4 & 1) != 0 || (a1 & 1) == 0)
  {
    swift_bridgeObjectRelease(v33);
    return sub_100155E5C(a8, a9);
  }
  else
  {
    swift_retain(a3);
    swift_retain(a9);
    sub_10011A264(a1 & 1, (uint64_t)v33, a6, a7, a5, a3, a8, a9);
    swift_bridgeObjectRelease(v33);
    swift_release(a3);
    return swift_release(a9);
  }
}

uint64_t sub_10010EDE8(char a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, char a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  Swift::String v21;
  Swift::String v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSNumber v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  void *v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint8_t *v39;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD aBlock[5];
  uint64_t v48;
  _QWORD v49[5];
  unint64_t v50;
  unint64_t v51;
  _QWORD v52[7];
  char v53;

  v44 = a7;
  v46 = a4;
  v45 = a3;
  v11 = sub_1000080B4(&qword_10028F648);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11, v13);
  v15 = (char *)&v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_1000080B4(&qword_10028F650);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16, v18);
  v20 = (char *)&v41 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a1 & 1) != 0)
  {
    v50 = 0xD000000000000021;
    v51 = 0x800000010020D030;
    if ((a5 & 1) != 0)
    {
      v21._object = (void *)0xEA00000000003433;
      v21._countAndFlagsBits = 0x20726F727265202CLL;
      String.append(_:)(v21);
    }
    v43 = a2;
    if ((a6 & 1) != 0)
    {
      v22._countAndFlagsBits = 0x20726F727265202CLL;
      v22._object = (void *)0xEA00000000003233;
      String.append(_:)(v22);
    }
    v24 = v50;
    v23 = v51;
    v25 = sub_1000080B4(&qword_10028D570);
    v26 = swift_allocObject(v25, 40, 7);
    *(_OWORD *)(v26 + 16) = xmmword_10021A1B0;
    sub_1000067D4(0, (unint64_t *)&qword_10028E8B0, NSNumber_ptr);
    v27.super.super.isa = NSNumber.init(integerLiteral:)(1518603).super.super.isa;
    *(NSNumber *)(v26 + 32) = v27;
    v52[0] = v26;
    specialized Array._endMutation()(v27.super.super.isa);
    v28 = v52[0];
    v42 = 0x800000010020B470;
    v52[0] = 0xD0000000000000AFLL;
    v52[1] = 0x800000010020B470;
    v52[2] = v24;
    v52[3] = v23;
    v52[4] = 0xD000000000000086;
    v52[5] = 0x800000010020B520;
    v52[6] = v28;
    v53 = 1;
    (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v20, v44 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck__ttrRequester, v16);
    Dependency.wrappedValue.getter(v49, v16);
    (*(void (**)(char *, uint64_t))(v17 + 8))(v20, v16);
    v29 = *sub_10000732C(v49, v49[3]);
    v30 = sub_10010A1E4((uint64_t)v52);
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, v29 + OBJC_IVAR____TtC13appleaccountd27TapToRadarRequestController__helper, v11);
    Dependency.wrappedValue.getter(aBlock, v11);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
    v31 = (void *)aBlock[0];
    aBlock[4] = sub_10010F244;
    v48 = 0;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1001DC548;
    aBlock[3] = &unk_100268538;
    v32 = _Block_copy(aBlock);
    swift_release(v48);
    objc_msgSend(v31, "silentTapToRadarWithRequest:completion:", v30, v32);
    _Block_release(v32);
    swift_bridgeObjectRelease(v28);
    swift_bridgeObjectRelease(0x800000010020B520);
    swift_bridgeObjectRelease(v23);
    swift_bridgeObjectRelease(v42);

    sub_100006F58(v49);
    v33 = v45;
    v34 = v46;
  }
  else
  {
    if (qword_10028ADE0 != -1)
      swift_once(&qword_10028ADE0, sub_100046DA0);
    v35 = type metadata accessor for Logger(0);
    v36 = sub_100005288(v35, (uint64_t)qword_1002A8A20);
    v37 = Logger.logObject.getter(v36);
    v38 = static os_log_type_t.error.getter(v37);
    if (os_log_type_enabled(v37, v38))
    {
      v39 = (uint8_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v39 = 67109120;
      LODWORD(v52[0]) = 0;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v52, (char *)v52 + 4);
      _os_log_impl((void *)&_mh_execute_header, v37, v38, "Skipping Custodian Preflight TTR: isWithInTTRFrequency:%{BOOL}d", v39, 8u);
      swift_slowDealloc(v39, -1, -1);
    }

    v33 = v45;
    v34 = v46;
  }
  return sub_100155E5C(v33, v34);
}

void sub_10010F244(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  os_log_type_t v11;
  uint8_t *v12;
  NSObject *oslog;
  uint64_t v14;
  uint64_t v15;

  if (a1)
  {
    swift_errorRetain(a1);
    if (qword_10028ADE0 != -1)
      swift_once(&qword_10028ADE0, sub_100046DA0);
    v2 = type metadata accessor for Logger(0);
    sub_100005288(v2, (uint64_t)qword_1002A8A20);
    v3 = swift_errorRetain(a1);
    oslog = Logger.logObject.getter(v3);
    v4 = static os_log_type_t.error.getter(oslog);
    if (os_log_type_enabled(oslog, v4))
    {
      v5 = (uint8_t *)swift_slowAlloc(12, -1);
      v6 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v5 = 138412290;
      v7 = _convertErrorToNSError(_:)(a1);
      v14 = v7;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, &v15);
      *v6 = v7;
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, oslog, v4, "Unable to launch Silent TTR due to error: %@", v5, 0xCu);
      v8 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v6, 1, v8);
      swift_slowDealloc(v6, -1, -1);
      swift_slowDealloc(v5, -1, -1);

      swift_errorRelease(a1);
      return;
    }
    swift_errorRelease(a1);
    swift_errorRelease(a1);
  }
  else
  {
    if (qword_10028ADE0 != -1)
      swift_once(&qword_10028ADE0, sub_100046DA0);
    v9 = type metadata accessor for Logger(0);
    v10 = sub_100005288(v9, (uint64_t)qword_1002A8A20);
    oslog = Logger.logObject.getter(v10);
    v11 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(oslog, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v11, "Custodian Preflight Silent TTR launched successfully.", v12, 2u);
      swift_slowDealloc(v12, -1, -1);
    }
  }

}

uint64_t sub_10010F4A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t), uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  void (*v41)(uint64_t);
  uint64_t v42;
  uint64_t *v43;
  void (*v44)(uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v46 = a7;
  v47 = a4;
  v45 = type metadata accessor for CustodianRecord(0);
  __chkstk_darwin(v45, v12);
  v14 = (char *)&v42 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for CustodianshipRecords(0);
  __chkstk_darwin(v15, v16);
  v18 = (char *)&v42 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_1000080B4((uint64_t *)&unk_10028CCD0);
  __chkstk_darwin(v19, v20);
  v22 = (uint64_t *)((char *)&v42 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100024A20(a1, (uint64_t)v22, (uint64_t *)&unk_10028CCD0);
  if (swift_getEnumCaseMultiPayload(v22, v19) == 1)
  {
    v44 = a5;
    v47 = a6;
    v23 = *v22;
    if (qword_10028ADE0 != -1)
      swift_once(&qword_10028ADE0, sub_100046DA0);
    v24 = type metadata accessor for Logger(0);
    sub_100005288(v24, (uint64_t)qword_1002A8A20);
    sub_100027FE8(v46, (uint64_t)v14, type metadata accessor for CustodianRecord);
    swift_errorRetain(v23);
    swift_errorRetain(v23);
    v25 = swift_retain(a2);
    v26 = Logger.logObject.getter(v25);
    v27 = static os_log_type_t.error.getter(v26);
    if (os_log_type_enabled(v26, v27))
    {
      v28 = swift_slowAlloc(32, -1);
      v43 = (uint64_t *)swift_slowAlloc(8, -1);
      v46 = swift_slowAlloc(64, -1);
      v49 = v46;
      *(_DWORD *)v28 = 136315650;
      v30 = *(_QWORD *)(a2 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName);
      v29 = *(_QWORD *)(a2 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName + 8);
      swift_bridgeObjectRetain(v29);
      v48 = sub_1001DEF4C(v30, v29, &v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49);
      swift_release(a2);
      swift_bridgeObjectRelease(v29);
      *(_WORD *)(v28 + 12) = 2080;
      v31 = type metadata accessor for UUID(0);
      v32 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v33 = dispatch thunk of CustomStringConvertible.description.getter(v31, v32);
      v35 = v34;
      v48 = sub_1001DEF4C(v33, v34, &v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49);
      swift_bridgeObjectRelease(v35);
      sub_100028388((uint64_t)v14, type metadata accessor for CustodianRecord);
      *(_WORD *)(v28 + 22) = 2112;
      v36 = _convertErrorToNSError(_:)(v23);
      v48 = v36;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49);
      v37 = v43;
      *v43 = v36;
      swift_errorRelease(v23);
      swift_errorRelease(v23);
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "%s - error fetching health check record for %s: %@", (uint8_t *)v28, 0x20u);
      v38 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v37, 1, v38);
      swift_slowDealloc(v37, -1, -1);
      v39 = v46;
      swift_arrayDestroy(v46, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v39, -1, -1);
      swift_slowDealloc(v28, -1, -1);
    }
    else
    {
      swift_release(a2);
      sub_100028388((uint64_t)v14, type metadata accessor for CustodianRecord);
      swift_errorRelease(v23);
      swift_errorRelease(v23);
    }

    v41 = v44;
    swift_errorRetain(v23);
    v41(v23);
    swift_errorRelease(v23);
    return swift_errorRelease(v23);
  }
  else
  {
    sub_10003B730((uint64_t)v22, (uint64_t)v18, type metadata accessor for CustodianshipRecords);
    sub_100112318((uint64_t)v18, a3, v47, a5, a6);
    return sub_100028388((uint64_t)v18, type metadata accessor for CustodianshipRecords);
  }
}

uint64_t sub_10010F900(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, int a7, void (*a8)(_QWORD), uint64_t a9, uint64_t a10)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  _QWORD *v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t ObjectType;
  uint64_t v43;
  void (*v44)(uint64_t *, _QWORD);
  _QWORD *v45;
  _QWORD *v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(_QWORD);
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58[4];
  uint64_t v59;
  uint64_t v60;

  v55 = a6;
  v57 = a1;
  v16 = type metadata accessor for CustodianshipRecords(0);
  __chkstk_darwin(v16, v17);
  v19 = (char *)&v51 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_1000080B4((uint64_t *)&unk_100294B20);
  __chkstk_darwin(v20, v21);
  v23 = (char *)&v51 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v23, 1, 1, v24);
  v25 = (_QWORD *)swift_allocObject(&unk_100268278, 56, 7);
  v25[2] = 0;
  v25[3] = 0;
  v25[4] = a4;
  v25[5] = a2;
  v25[6] = a3;
  swift_retain(a3);
  v26 = a4;
  swift_errorRetain(a2);
  v27 = sub_10001CC6C((uint64_t)v23, (uint64_t)&unk_1002927C8, (uint64_t)v25);
  swift_release(v27);
  if (a2)
  {
    swift_errorRetain(a2);
    if (qword_10028ADE0 != -1)
      swift_once(&qword_10028ADE0, sub_100046DA0);
    v56 = a7;
    v28 = type metadata accessor for Logger(0);
    sub_100005288(v28, (uint64_t)qword_1002A8A20);
    swift_retain(a3);
    swift_errorRetain(a2);
    swift_retain(a3);
    v29 = swift_errorRetain(a2);
    v30 = Logger.logObject.getter(v29);
    v31 = static os_log_type_t.error.getter(v30);
    if (os_log_type_enabled(v30, v31))
    {
      v53 = a9;
      v54 = a8;
      v32 = swift_slowAlloc(32, -1);
      swift_slowAlloc(8, -1);
      v52 = swift_slowAlloc(64, -1);
      v58[0] = v52;
      *(_DWORD *)v32 = 136315650;
      v34 = *(_QWORD *)(a3 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName);
      v33 = *(_QWORD *)(a3 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName + 8);
      swift_bridgeObjectRetain(v33);
      v59 = sub_1001DEF4C(v34, v33, v58);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, &v60);
      swift_release_n(a3, 2);
      swift_bridgeObjectRelease(v33);
      *(_WORD *)(v32 + 12) = 2080;
      __asm { BR              X10 }
    }
    swift_release_n(a3, 2);
    swift_errorRelease(a2);
    swift_errorRelease(a2);

    ObjectType = swift_getObjectType(a5);
    v43 = _convertErrorToNSError(_:)(a2);
    v44 = (void (*)(uint64_t *, _QWORD))(*(uint64_t (**)(uint64_t *, uint64_t))(v55 + 32))(v58, ObjectType);
    v46 = v45;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v44);
    v48 = *(_QWORD *)((*v46 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v47 = *(_QWORD *)((*v46 & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v48 >= v47 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v47 > 1, v48 + 1, 1);
    v49 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v48, v43);
    specialized Array._endMutation()(v49);
    v44(v58, 0);
    sub_1000A9FA0(0, v56 & 1, v57);
    swift_errorRetain(a2);
    a8(a2);
    swift_errorRelease(a2);
    return swift_errorRelease(a2);
  }
  else
  {
    if (qword_10028ADE0 != -1)
      swift_once(&qword_10028ADE0, sub_100046DA0);
    v35 = type metadata accessor for Logger(0);
    sub_100005288(v35, (uint64_t)qword_1002A8A20);
    sub_100027FE8(a10, (uint64_t)v19, type metadata accessor for CustodianshipRecords);
    v36 = swift_retain(a3);
    v37 = Logger.logObject.getter(v36);
    v38 = static os_log_type_t.debug.getter(v37);
    if (os_log_type_enabled(v37, v38))
    {
      v56 = a7;
      v54 = a8;
      v55 = a5;
      v53 = a9;
      v39 = swift_slowAlloc(32, -1);
      v58[0] = swift_slowAlloc(96, -1);
      *(_DWORD *)v39 = 136315650;
      v40 = *(_QWORD *)(a3 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName);
      v41 = *(_QWORD *)(a3 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName + 8);
      swift_bridgeObjectRetain(v41);
      v59 = sub_1001DEF4C(v40, v41, v58);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, &v60);
      swift_release(a3);
      swift_bridgeObjectRelease(v41);
      *(_WORD *)(v39 + 12) = 2080;
      __asm { BR              X10 }
    }
    swift_release(a3);
    sub_100028388((uint64_t)v19, type metadata accessor for CustodianshipRecords);

    sub_1000A9FA0(1, a7 & 1, v57);
    return ((uint64_t (*)(_QWORD))a8)(0);
  }
}

uint64_t sub_10011022C(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD, _QWORD), uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  __n128 v41;
  os_log_type_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  NSObject *v55;
  __n128 v56;
  uint64_t v57;
  os_log_type_t v58;
  uint8_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  _QWORD *v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void (*v76)(_QWORD, _QWORD);
  uint64_t v77;
  uint64_t v78;

  v10 = type metadata accessor for CustodianshipRecords(0);
  v12 = __chkstk_darwin(v10, v11);
  v14 = (char *)&v69 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12, v15);
  v17 = (char *)&v69 - v16;
  if (a1)
  {
    swift_errorRetain(a1);
    if (qword_10028ADE0 != -1)
      swift_once(&qword_10028ADE0, sub_100046DA0);
    v18 = type metadata accessor for Logger(0);
    v19 = sub_100005288(v18, (uint64_t)qword_1002A8A20);
    v75 = a3;
    sub_100027FE8(a3, (uint64_t)v14, type metadata accessor for CustodianshipRecords);
    swift_errorRetain(a1);
    swift_retain(a2);
    v20 = swift_errorRetain(a1);
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.error.getter(v21);
    if (os_log_type_enabled(v21, v22))
    {
      v23 = swift_slowAlloc(32, -1);
      v73 = a5;
      v24 = v23;
      v70 = (uint64_t *)swift_slowAlloc(8, -1);
      v71 = swift_slowAlloc(64, -1);
      v78 = v71;
      *(_DWORD *)v24 = 136315650;
      v25 = a2 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName;
      v72 = v19;
      v74 = a2;
      v76 = a4;
      v26 = *(_QWORD *)(a2 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName);
      v27 = *(_QWORD *)(v25 + 8);
      swift_bridgeObjectRetain(v27);
      v77 = sub_1001DEF4C(v26, v27, &v78);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v77, &v78);
      swift_release(v74);
      swift_bridgeObjectRelease(v27);
      *(_WORD *)(v24 + 12) = 2080;
      type metadata accessor for CustodianHealthRecord(0);
      v28 = type metadata accessor for UUID(0);
      v29 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v30 = dispatch thunk of CustomStringConvertible.description.getter(v28, v29);
      v32 = v31;
      v77 = sub_1001DEF4C(v30, v31, &v78);
      a4 = v76;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v77, &v78);
      swift_bridgeObjectRelease(v32);
      sub_100028388((uint64_t)v14, type metadata accessor for CustodianshipRecords);
      *(_WORD *)(v24 + 22) = 2112;
      v33 = _convertErrorToNSError(_:)(a1);
      v77 = v33;
      a2 = v74;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v77, &v78);
      v34 = v70;
      *v70 = v33;
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "%s - Preflight Custodian Recovery failed for custodian %s with error: %@\"", (uint8_t *)v24, 0x20u);
      v35 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v34, 1, v35);
      swift_slowDealloc(v34, -1, -1);
      v36 = v71;
      swift_arrayDestroy(v71, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v36, -1, -1);
      v37 = v24;
      a5 = v73;
      swift_slowDealloc(v37, -1, -1);
    }
    else
    {
      swift_release(a2);
      sub_100028388((uint64_t)v14, type metadata accessor for CustodianshipRecords);
      swift_errorRelease(a1);
      swift_errorRelease(a1);
    }

    if (!sub_10011A1AC()
      || *(_QWORD *)(a2 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_uniqueCustodianCount) != 1)
    {
      swift_errorRetain(a1);
      a4(4, a1);
      swift_errorRelease(a1);
      return swift_errorRelease(a1);
    }
    v54 = swift_retain(a2);
    v55 = Logger.logObject.getter(v54);
    v57 = a2;
    v58 = static os_log_type_t.default.getter(v56);
    if (os_log_type_enabled(v55, v58))
    {
      v59 = (uint8_t *)swift_slowAlloc(12, -1);
      v60 = swift_slowAlloc(32, -1);
      v76 = a4;
      v61 = v60;
      v78 = v60;
      *(_DWORD *)v59 = 136315138;
      v74 = (uint64_t)(v59 + 4);
      v62 = *(_QWORD *)(v57 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName);
      v63 = *(_QWORD *)(v57 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName + 8);
      swift_bridgeObjectRetain(v63);
      v77 = sub_1001DEF4C(v62, v63, &v78);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v77, &v78);
      swift_release(v57);
      swift_bridgeObjectRelease(v63);
      _os_log_impl((void *)&_mh_execute_header, v55, v58, "%s - Owner is an ADP user, with only one custodian failing preflight.", v59, 0xCu);
      swift_arrayDestroy(v61, 1, (char *)&type metadata for Any + 8);
      v64 = v61;
      a4 = v76;
      swift_slowDealloc(v64, -1, -1);
      swift_slowDealloc(v59, -1, -1);

    }
    else
    {

      swift_release(v57);
    }
    v67 = v75;
    v68 = (_QWORD *)swift_allocObject(&unk_100268188, 40, 7);
    v68[2] = a4;
    v68[3] = a5;
    v68[4] = a1;
    swift_errorRetain(a1);
    swift_retain(a5);
    sub_10011572C(v67, sub_10011CF78, (uint64_t)v68);
    swift_errorRelease(a1);
    v66 = v68;
  }
  else
  {
    v76 = a4;
    if (qword_10028ADE0 != -1)
      swift_once(&qword_10028ADE0, sub_100046DA0);
    v38 = type metadata accessor for Logger(0);
    sub_100005288(v38, (uint64_t)qword_1002A8A20);
    sub_100027FE8(a3, (uint64_t)v17, type metadata accessor for CustodianshipRecords);
    v39 = swift_retain(a2);
    v40 = Logger.logObject.getter(v39);
    v42 = static os_log_type_t.default.getter(v41);
    if (os_log_type_enabled(v40, v42))
    {
      v43 = swift_slowAlloc(22, -1);
      v74 = swift_slowAlloc(64, -1);
      v78 = v74;
      *(_DWORD *)v43 = 136315394;
      v44 = a2 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName;
      v75 = a3;
      v45 = a2;
      v46 = *(_QWORD *)(a2 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName);
      v47 = *(_QWORD *)(v44 + 8);
      swift_bridgeObjectRetain(v47);
      v77 = sub_1001DEF4C(v46, v47, &v78);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v77, &v78);
      swift_release(v45);
      swift_bridgeObjectRelease(v47);
      *(_WORD *)(v43 + 12) = 2080;
      type metadata accessor for CustodianRecord(0);
      v48 = type metadata accessor for UUID(0);
      v49 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v50 = dispatch thunk of CustomStringConvertible.description.getter(v48, v49);
      v52 = v51;
      v77 = sub_1001DEF4C(v50, v51, &v78);
      a2 = v45;
      a3 = v75;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v77, &v78);
      swift_bridgeObjectRelease(v52);
      sub_100028388((uint64_t)v17, type metadata accessor for CustodianshipRecords);
      _os_log_impl((void *)&_mh_execute_header, v40, v42, "%s - Preflight Custodian Recovery successful for custodian %s", (uint8_t *)v43, 0x16u);
      v53 = v74;
      swift_arrayDestroy(v74, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v53, -1, -1);
      swift_slowDealloc(v43, -1, -1);
    }
    else
    {
      swift_release(a2);
      sub_100028388((uint64_t)v17, type metadata accessor for CustodianshipRecords);
    }

    swift_retain(a5);
    sub_10011BC6C(a3, a2, (uint64_t)v76, a5);
    v66 = (_QWORD *)a5;
  }
  return swift_release(v66);
}

uint64_t sub_1001109EC(uint64_t a1, void (*a2)(uint64_t, uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t v6;

  if (a1)
  {
    v6 = a1;
  }
  else
  {
    v6 = a4;
    swift_errorRetain(a4);
  }
  swift_errorRetain(a1);
  a2(4, v6);
  return swift_errorRelease(v6);
}

uint64_t sub_100110A48(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30[4];
  unsigned __int8 v31;

  v3 = v2;
  if (qword_10028ADE0 != -1)
    swift_once(&qword_10028ADE0, sub_100046DA0);
  v6 = type metadata accessor for Logger(0);
  v7 = sub_100005288(v6, (uint64_t)qword_1002A8A20);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.debug.getter(v8);
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "hasAtLeastOneNewInvalidCRK was called.", v10, 2u);
    swift_slowDealloc(v10, -1, -1);
  }

  v31 = 0;
  swift_bridgeObjectRetain(a2);
  v12 = sub_1000F9974(v11);
  swift_bridgeObjectRetain(a1);
  v14 = sub_100118670(v13, v12);
  swift_bridgeObjectRelease(a1);
  sub_100119E4C(a2, (void (*)(uint64_t, uint64_t, uint64_t))sub_10011DE78);
  sub_100119E4C(a1, (void (*)(uint64_t, uint64_t, uint64_t))sub_10011DE98);
  if (*(_QWORD *)(v14 + 16))
  {
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRetain(a1);
    sub_100119FD4(v14, a2, a1, &v31);
    swift_release(v14);
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(a1);
    v15 = swift_retain(v2);
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.debug.getter(v16);
    if (os_log_type_enabled(v16, v17))
    {
      v18 = swift_slowAlloc(18, -1);
      v19 = swift_slowAlloc(32, -1);
      v30[0] = v19;
      *(_DWORD *)v18 = 136315394;
      v20 = *(_QWORD *)(v3 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName);
      v21 = *(_QWORD *)(v3 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName + 8);
      swift_bridgeObjectRetain(v21);
      v28 = sub_1001DEF4C(v20, v21, v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29);
      swift_release(v3);
      swift_bridgeObjectRelease(v21);
      *(_WORD *)(v18 + 12) = 1024;
      swift_beginAccess(&v31, &v28, 0, 0);
      v27 = v31;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, &v28);
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "%s hasAtLeastOneNewInvalidCRK: Returning %{BOOL}d.", (uint8_t *)v18, 0x12u);
      swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v19, -1, -1);
      swift_slowDealloc(v18, -1, -1);

    }
    else
    {

      swift_release(v3);
    }
    swift_beginAccess(&v31, v30, 0, 0);
    return v31;
  }
  else
  {
    v22 = swift_release(v14);
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.debug.getter(v23);
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "hasAtLeastOneNewInvalidCRK: Intersection set between old / new Preflight results is empty. Returning true.", v25, 2u);
      swift_slowDealloc(v25, -1, -1);
    }

    return 1;
  }
}

void sub_100110DC8(uint64_t a1, unint64_t a2, char a3, uint64_t a4, char *a5)
{
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  char *format;
  uint64_t v20;
  uint64_t v21;

  if (qword_10028ADE0 != -1)
    swift_once(&qword_10028ADE0, sub_100046DA0);
  v10 = type metadata accessor for Logger(0);
  sub_100005288(v10, (uint64_t)qword_1002A8A20);
  swift_retain_n(a4, 2);
  v11 = swift_bridgeObjectRetain_n(a2, 2);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.debug.getter(v12);
  if (os_log_type_enabled(v12, v13))
  {
    v14 = swift_slowAlloc(28, -1);
    v15 = swift_slowAlloc(64, -1);
    v21 = v15;
    *(_DWORD *)v14 = 136315650;
    format = a5;
    v18 = a3;
    v16 = *(_QWORD *)(a4 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName);
    v17 = *(_QWORD *)(a4 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName + 8);
    swift_bridgeObjectRetain(v17);
    v20 = sub_1001DEF4C(v16, v17, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21);
    swift_release_n(a4, 2);
    swift_bridgeObjectRelease(v17);
    *(_WORD *)(v14 + 12) = 2080;
    swift_bridgeObjectRetain(a2);
    v20 = sub_1001DEF4C(a1, a2, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21);
    swift_bridgeObjectRelease_n(a2, 3);
    *(_WORD *)(v14 + 22) = 1024;
    LODWORD(v20) = v18 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, (char *)&v20 + 4);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, format, (uint8_t *)v14, 0x1Cu);
    swift_arrayDestroy(v15, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v15, -1, -1);
    swift_slowDealloc(v14, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
    swift_release_n(a4, 2);
  }
}

void sub_10011101C(uint64_t *a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  unint64_t v5;
  uint64_t v6;
  unint64_t v9;
  char v10;
  int v11;
  unint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint8_t *v28;
  unint64_t v29;
  char v30;
  char v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  uint64_t v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  os_log_type_t v42;
  _BOOL4 v43;
  uint64_t v44;
  os_log_type_t v45;
  const char *v46;
  uint8_t *v47;
  uint64_t v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v6 = *a1;
  v5 = a1[1];
  if (!*(_QWORD *)(a2 + 16))
  {
LABEL_10:
    if (qword_10028ADE0 != -1)
      swift_once(&qword_10028ADE0, sub_100046DA0);
    v22 = type metadata accessor for Logger(0);
    sub_100005288(v22, (uint64_t)qword_1002A8A20);
    v23 = swift_bridgeObjectRetain_n(v5, 2);
    v24 = Logger.logObject.getter(v23);
    v25 = static os_log_type_t.debug.getter(v24);
    if (os_log_type_enabled(v24, v25))
    {
      v52 = v6;
      v26 = (uint8_t *)swift_slowAlloc(12, -1);
      v27 = swift_slowAlloc(32, -1);
      v55 = v27;
      *(_DWORD *)v26 = 136315138;
      swift_bridgeObjectRetain(v5);
      v53 = sub_1001DEF4C(v52, v5, &v55);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &v54);
      swift_bridgeObjectRelease_n(v5, 3);
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "No old Preflight results for uuid: %s exist", v26, 0xCu);
      swift_arrayDestroy(v27, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v27, -1, -1);
      v28 = v26;
      v6 = v52;
      swift_slowDealloc(v28, -1, -1);

      if (!*(_QWORD *)(a3 + 16))
        return;
    }
    else
    {

      swift_bridgeObjectRelease_n(v5, 2);
      if (!*(_QWORD *)(a3 + 16))
        return;
    }
    swift_bridgeObjectRetain(v5);
    v29 = sub_10010A9E0(v6, v5);
    if ((v30 & 1) == 0)
    {
      swift_bridgeObjectRelease(v5);
      return;
    }
    v31 = *(_BYTE *)(*(_QWORD *)(a3 + 56) + v29);
    swift_bridgeObjectRelease(v5);
    if ((v31 & 1) != 0)
      return;
    v32 = swift_bridgeObjectRetain_n(v5, 2);
    v33 = Logger.logObject.getter(v32);
    v34 = static os_log_type_t.debug.getter(v33);
    if (os_log_type_enabled(v33, v34))
    {
      v35 = (uint8_t *)swift_slowAlloc(12, -1);
      v36 = swift_slowAlloc(32, -1);
      v55 = v36;
      *(_DWORD *)v35 = 136315138;
      swift_bridgeObjectRetain(v5);
      v53 = sub_1001DEF4C(v6, v5, &v55);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &v54);
      swift_bridgeObjectRelease_n(v5, 3);
      v37 = "Preflight result for uuid: %s, are bad. This could possibly be the first bad preflight result.";
LABEL_26:
      _os_log_impl((void *)&_mh_execute_header, v33, v34, v37, v35, 0xCu);
      swift_arrayDestroy(v36, 1, (char *)&type metadata for Any + 8);
      v40 = v36;
LABEL_27:
      swift_slowDealloc(v40, -1, -1);
      swift_slowDealloc(v35, -1, -1);

      return;
    }
LABEL_41:

    swift_bridgeObjectRelease_n(v5, 2);
    return;
  }
  swift_bridgeObjectRetain(a1[1]);
  v9 = sub_10010A9E0(v6, v5);
  if ((v10 & 1) == 0)
  {
    swift_bridgeObjectRelease(v5);
    goto LABEL_10;
  }
  v11 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 56) + v9);
  swift_bridgeObjectRelease(v5);
  if (!*(_QWORD *)(a3 + 16))
    goto LABEL_22;
  swift_bridgeObjectRetain(v5);
  v12 = sub_10010A9E0(v6, v5);
  if ((v13 & 1) == 0)
  {
    swift_bridgeObjectRelease(v5);
LABEL_22:
    if (qword_10028ADE0 != -1)
      swift_once(&qword_10028ADE0, sub_100046DA0);
    v38 = type metadata accessor for Logger(0);
    sub_100005288(v38, (uint64_t)qword_1002A8A20);
    v39 = swift_bridgeObjectRetain_n(v5, 2);
    v33 = Logger.logObject.getter(v39);
    v34 = static os_log_type_t.debug.getter(v33);
    if (os_log_type_enabled(v33, v34))
    {
      v35 = (uint8_t *)swift_slowAlloc(12, -1);
      v36 = swift_slowAlloc(32, -1);
      v55 = v36;
      *(_DWORD *)v35 = 136315138;
      swift_bridgeObjectRetain(v5);
      v53 = sub_1001DEF4C(v6, v5, &v55);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &v54);
      swift_bridgeObjectRelease_n(v5, 3);
      v37 = "Preflight results for uuid: %s not present";
      goto LABEL_26;
    }
    goto LABEL_41;
  }
  v50 = *(unsigned __int8 *)(*(_QWORD *)(a3 + 56) + v12);
  swift_bridgeObjectRelease(v5);
  if (qword_10028ADE0 != -1)
    swift_once(&qword_10028ADE0, sub_100046DA0);
  v14 = type metadata accessor for Logger(0);
  sub_100005288(v14, (uint64_t)qword_1002A8A20);
  v15 = swift_bridgeObjectRetain_n(v5, 2);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.debug.getter(v16);
  v51 = v6;
  if (os_log_type_enabled(v16, v17))
  {
    v49 = v11;
    v18 = v6;
    v19 = swift_slowAlloc(24, -1);
    v20 = swift_slowAlloc(32, -1);
    v55 = v20;
    *(_DWORD *)v19 = 136315650;
    swift_bridgeObjectRetain(v5);
    v21 = v18;
    v11 = v49;
    v53 = sub_1001DEF4C(v21, v5, &v55);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &v54);
    swift_bridgeObjectRelease_n(v5, 3);
    *(_WORD *)(v19 + 12) = 1024;
    LODWORD(v53) = v49;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, (char *)&v53 + 4);
    *(_WORD *)(v19 + 18) = 1024;
    LODWORD(v53) = v50;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, (char *)&v53 + 4);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Preflight result for uuid: %s,\npreviously successful? %{BOOL}d,\ncurrently successful? %{BOOL}d", (uint8_t *)v19, 0x18u);
    swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v20, -1, -1);
    swift_slowDealloc(v19, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v5, 2);
  }
  v41 = swift_bridgeObjectRetain_n(v5, 2);
  v33 = Logger.logObject.getter(v41);
  v42 = static os_log_type_t.debug.getter(v33);
  v43 = os_log_type_enabled(v33, v42);
  if (!v11)
  {
    if (v50)
    {
      if (v43)
      {
        v35 = (uint8_t *)swift_slowAlloc(12, -1);
        v44 = swift_slowAlloc(32, -1);
        v55 = v44;
        *(_DWORD *)v35 = 136315138;
        swift_bridgeObjectRetain(v5);
        v53 = sub_1001DEF4C(v51, v5, &v55);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &v54);
        swift_bridgeObjectRelease_n(v5, 3);
        v45 = v42;
        v46 = "Preflight result for uuid: %s, transitioning from bad to good";
        goto LABEL_40;
      }
    }
    else if (v43)
    {
      v35 = (uint8_t *)swift_slowAlloc(12, -1);
      v44 = swift_slowAlloc(32, -1);
      v55 = v44;
      *(_DWORD *)v35 = 136315138;
      swift_bridgeObjectRetain(v5);
      v53 = sub_1001DEF4C(v51, v5, &v55);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &v54);
      swift_bridgeObjectRelease_n(v5, 3);
      v45 = v42;
      v46 = "Preflight results for uuid: %s, transitioning from bad to bad. Not triggering TTR.";
      goto LABEL_40;
    }
    goto LABEL_41;
  }
  if ((v50 & 1) != 0)
  {
    if (v43)
    {
      v35 = (uint8_t *)swift_slowAlloc(12, -1);
      v44 = swift_slowAlloc(32, -1);
      v55 = v44;
      *(_DWORD *)v35 = 136315138;
      swift_bridgeObjectRetain(v5);
      v53 = sub_1001DEF4C(v51, v5, &v55);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &v54);
      swift_bridgeObjectRelease_n(v5, 3);
      v45 = v42;
      v46 = "Preflight results for uuid: %s, is same as before";
LABEL_40:
      _os_log_impl((void *)&_mh_execute_header, v33, v45, v46, v35, 0xCu);
      swift_arrayDestroy(v44, 1, (char *)&type metadata for Any + 8);
      v40 = v44;
      goto LABEL_27;
    }
    goto LABEL_41;
  }
  if (v43)
  {
    v47 = (uint8_t *)swift_slowAlloc(12, -1);
    v48 = swift_slowAlloc(32, -1);
    v55 = v48;
    *(_DWORD *)v47 = 136315138;
    swift_bridgeObjectRetain(v5);
    v53 = sub_1001DEF4C(v51, v5, &v55);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &v54);
    swift_bridgeObjectRelease_n(v5, 3);
    _os_log_impl((void *)&_mh_execute_header, v33, v42, "Preflight result for uuid: %s, transitioning from good to bad", v47, 0xCu);
    swift_arrayDestroy(v48, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v48, -1, -1);
    swift_slowDealloc(v47, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v5, 2);
  }
  *a4 = 1;
}

uint64_t sub_1001119CC(char a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD), uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t, uint64_t);
  char *v25;
  void (*v26)(char *, uint64_t);
  id v27;
  void *v28;
  NSString v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(char *, uint64_t);
  void (*v41)(char *, uint64_t, uint64_t);
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __n128 v47;
  uint64_t v48;
  NSObject *v49;
  os_log_type_t v50;
  uint8_t *v51;
  const char *v52;
  unint64_t v53;
  char v54;
  uint64_t v55;
  NSObject *v56;
  os_log_type_t v57;
  uint8_t *v58;
  char *v59;
  unint64_t v60;
  int64_t v61;
  uint64_t v62;
  uint64_t v63;
  NSObject *v64;
  os_log_type_t v65;
  uint64_t v66;
  int64_t v67;
  uint64_t v68;
  NSObject *v69;
  os_log_type_t v70;
  uint8_t *v71;
  _BOOL8 v72;
  _QWORD v74[2];
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t (*v79)(_QWORD);
  uint64_t v80;
  char *v81;
  uint64_t v82;
  _QWORD v83[3];
  uint64_t v84;
  _BYTE v85[32];
  __int128 v86;
  __int128 v87;

  v10 = sub_1000080B4(&qword_10028CCE8);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  v81 = (char *)v74 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10028ADE0 != -1)
    swift_once(&qword_10028ADE0, sub_100046DA0);
  v14 = type metadata accessor for Logger(0);
  v15 = sub_100005288(v14, (uint64_t)qword_1002A8A20);
  swift_errorRetain(a2);
  v16 = swift_errorRetain(a2);
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.debug.getter(v17);
  if (os_log_type_enabled(v17, v18))
  {
    v77 = v10;
    v78 = a5;
    v79 = a4;
    v80 = v15;
    v19 = swift_slowAlloc(18, -1);
    v20 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v19 = 67109378;
    LODWORD(v84) = a1 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v84, (char *)&v84 + 4);
    *(_WORD *)(v19 + 8) = 2112;
    if (a2)
    {
      swift_errorRetain(a2);
      v21 = _swift_stdlib_bridgeErrorToNSError(a2);
      v84 = v21;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v84, v85);
    }
    else
    {
      v84 = 0;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v84, v85);
      v21 = 0;
    }
    *v20 = v21;
    swift_errorRelease(a2);
    swift_errorRelease(a2);
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "ttr-cfgs url bag requested? %{BOOL}d error: %@", (uint8_t *)v19, 0x12u);
    v22 = sub_1000080B4((uint64_t *)&unk_10028BC20);
    swift_arrayDestroy(v20, 1, v22);
    swift_slowDealloc(v20, -1, -1);
    swift_slowDealloc(v19, -1, -1);

    a5 = v78;
    a4 = v79;
    v15 = v80;
    v10 = v77;
  }
  else
  {
    swift_errorRelease(a2);
    swift_errorRelease(a2);

  }
  v23 = a3 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck__urlBagProvider;
  v24 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v25 = v81;
  v24(v81, v23, v10);
  Dependency.wrappedValue.getter(&v84, v10);
  v26 = *(void (**)(char *, uint64_t))(v11 + 8);
  v26(v25, v10);
  v27 = objc_msgSend((id)objc_opt_self(AKURLBag), "sharedBag");
  if (!v27)
    __break(1u);
  v28 = v27;
  v29 = String._bridgeToObjectiveC()();
  v30 = objc_msgSend(v28, "configurationAtKey:", v29);

  if (!v30
    || (_bridgeAnyObjectToAny(_:)(&v86, v30),
        swift_unknownObjectRelease(v30),
        v31 = sub_1000080B4(&qword_100291020),
        (swift_dynamicCast(v83, &v86, (char *)&type metadata for Any + 8, v31, 6) & 1) == 0))
  {
    v48 = sub_100006F58(&v84);
    v49 = Logger.logObject.getter(v48);
    v50 = static os_log_type_t.error.getter(v49);
    if (os_log_type_enabled(v49, v50))
    {
      v51 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v51 = 0;
      v52 = "ttr-cfgs not found";
LABEL_35:
      _os_log_impl((void *)&_mh_execute_header, v49, v50, v52, v51, 2u);
      swift_slowDealloc(v51, -1, -1);
    }
LABEL_36:

    v72 = 0;
    return a4(v72);
  }
  v76 = v23;
  v32 = v83[0];
  sub_100006F58(&v84);
  v33 = swift_bridgeObjectRetain_n(v32, 2);
  v34 = Logger.logObject.getter(v33);
  v35 = static os_log_type_t.debug.getter(v34);
  if (os_log_type_enabled(v34, v35))
  {
    v77 = v10;
    v36 = (uint8_t *)swift_slowAlloc(12, -1);
    v37 = swift_slowAlloc(32, -1);
    v79 = a4;
    v38 = v37;
    v84 = v37;
    v80 = v15;
    *(_DWORD *)v36 = 136315138;
    v74[1] = v36 + 4;
    swift_bridgeObjectRetain(v32);
    v75 = (char *)&type metadata for Any + 8;
    v40 = v26;
    v41 = v24;
    v42 = Dictionary.description.getter(v39, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
    v78 = a5;
    v44 = v43;
    swift_bridgeObjectRelease(v32);
    v45 = v42;
    v24 = v41;
    v26 = v40;
    *(_QWORD *)&v86 = sub_1001DEF4C(v45, v44, &v84);
    v15 = v80;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v86, (char *)&v86 + 8);
    swift_bridgeObjectRelease_n(v32, 2);
    v10 = v77;
    swift_bridgeObjectRelease(v44);
    _os_log_impl((void *)&_mh_execute_header, v34, v35, "ttr-cfgs: %s", v36, 0xCu);
    swift_arrayDestroy(v38, 1, v75);
    v46 = v38;
    a4 = v79;
    swift_slowDealloc(v46, -1, -1);
    swift_slowDealloc(v36, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v32, 2);
  }
  v83[0] = 0xD000000000000010;
  v83[1] = 0x800000010020D010;
  AnyHashable.init<A>(_:)(&v84, v83, &type metadata for String, &protocol witness table for String, v47);
  if (*(_QWORD *)(v32 + 16) && (v53 = sub_10010AAE0((uint64_t)&v84), (v54 & 1) != 0))
  {
    sub_1000244B0(*(_QWORD *)(v32 + 56) + 32 * v53, (uint64_t)&v86);
  }
  else
  {
    v86 = 0u;
    v87 = 0u;
  }
  swift_bridgeObjectRelease(v32);
  sub_1000839B4((uint64_t)&v84);
  if (!*((_QWORD *)&v87 + 1))
  {
    v55 = sub_100004934((uint64_t)&v86, (uint64_t *)&unk_10028E7E0);
LABEL_33:
    v49 = Logger.logObject.getter(v55);
    v50 = static os_log_type_t.error.getter(v49);
    if (os_log_type_enabled(v49, v50))
    {
      v51 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v51 = 0;
      v52 = "ttr-cfgs ttrFrequency not found";
      goto LABEL_35;
    }
    goto LABEL_36;
  }
  v55 = swift_dynamicCast(v83, &v86, (char *)&type metadata for Any + 8, &type metadata for Int, 6);
  if ((v55 & 1) == 0)
    goto LABEL_33;
  v82 = v83[0];
  v80 = v15;
  v56 = Logger.logObject.getter(v55);
  v57 = static os_log_type_t.debug.getter(v56);
  if (os_log_type_enabled(v56, v57))
  {
    v58 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v58 = 134217984;
    swift_beginAccess(&v82, v83, 0, 0);
    v84 = v82;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v84, v85);
    _os_log_impl((void *)&_mh_execute_header, v56, v57, "ttr-cfgs ttrFrequency from IdMS: %ld", v58, 0xCu);
    swift_slowDealloc(v58, -1, -1);
  }

  swift_beginAccess(&v82, &v86, 1, 0);
  v59 = v81;
  v60 = v82 & ~(v82 >> 63);
  if (v60 >= 0x64)
    v60 = 100;
  v82 = v60;
  v24(v81, v76, v10);
  Dependency.wrappedValue.getter(&v84, v10);
  v26(v59, v10);
  v61 = sub_1001180AC(0x64uLL) + 1;
  v62 = sub_100006F58(&v84);
  v63 = v82;
  v64 = Logger.logObject.getter(v62);
  v65 = static os_log_type_t.debug.getter(v64);
  if (os_log_type_enabled(v64, v65))
  {
    v66 = swift_slowAlloc(22, -1);
    *(_DWORD *)v66 = 134218240;
    v84 = v63;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v84, v85);
    *(_WORD *)(v66 + 12) = 2048;
    v84 = v61;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v84, v85);
    _os_log_impl((void *)&_mh_execute_header, v64, v65, "ttr-cfgs normalized ttrFrequencyForCustodianUnusableCRK: %ld RandomNumber: %ld", (uint8_t *)v66, 0x16u);
    swift_slowDealloc(v66, -1, -1);
  }

  v67 = v82;
  v69 = Logger.logObject.getter(v68);
  v70 = static os_log_type_t.debug.getter(v69);
  if (os_log_type_enabled(v69, v70))
  {
    v71 = (uint8_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v71 = 67109120;
    LODWORD(v84) = v67 >= v61;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v84, (char *)&v84 + 4);
    _os_log_impl((void *)&_mh_execute_header, v69, v70, "ttr-cfgs isCustodianPreflightTTREnabledForUnusableCRK %{BOOL}d", v71, 8u);
    swift_slowDealloc(v71, -1, -1);
  }

  v72 = v67 >= v61;
  return a4(v72);
}

void sub_100112318(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD), uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  int *v25;
  uint64_t v26;
  uint64_t v27;
  int *v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  void (**v32)(char *, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  id v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  void (***v65)(char *, uint64_t, uint64_t);
  void (**v66)(char *, uint64_t, uint64_t);
  _QWORD *v67;
  id v68;
  void (**v69)(char *, uint64_t, uint64_t);
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  NSObject *v74;
  __n128 v75;
  os_log_type_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void (**v89)(char *, uint64_t, uint64_t);
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void (*v93)(_QWORD);
  uint64_t v94;
  uint64_t v95;
  uint64_t v96[5];
  uint64_t v97;
  uint64_t v98;

  v6 = v5;
  v93 = a4;
  v94 = a5;
  v92 = a3;
  v95 = a2;
  v8 = sub_1000080B4((uint64_t *)&unk_10028E7D0);
  v89 = *(void (***)(char *, uint64_t, uint64_t))(v8 - 8);
  __chkstk_darwin(v8, v9);
  v11 = (char *)&v86 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v88 = type metadata accessor for CustodianshipRecords(0);
  v90 = *(_QWORD *)(v88 - 8);
  v12 = *(_QWORD *)(v90 + 64);
  v14 = __chkstk_darwin(v88, v13);
  v16 = __chkstk_darwin(v14, v15);
  v91 = (uint64_t)&v86 - v17;
  v19 = __chkstk_darwin(v16, v18);
  v21 = (char *)&v86 - v20;
  __chkstk_darwin(v19, v22);
  v24 = (char *)&v86 - v23;
  v25 = (int *)type metadata accessor for CustodianRecord(0);
  v26 = *(_QWORD *)(a1 + v25[9]);
  sub_100027FE8(a1, (uint64_t)v24, type metadata accessor for CustodianshipRecords);
  if (v26 == 2)
  {
    sub_100028388((uint64_t)v24, type metadata accessor for CustodianshipRecords);
    sub_100027FE8(a1, (uint64_t)v21, type metadata accessor for CustodianshipRecords);
LABEL_5:
    sub_100028388((uint64_t)v21, type metadata accessor for CustodianshipRecords);
LABEL_6:
    v87 = a1;
    v32 = v89;
    v89[2](v11, v6 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck__analyticsEventFactory, v8);
    Dependency.wrappedValue.getter(v96, v8);
    ((void (*)(char *, uint64_t))v32[1])(v11, v8);
    v33 = a1 + *(int *)(v88 + 24);
    v34 = v33 + *(int *)(type metadata accessor for CustodianHealthRecord(0) + 40);
    v35 = *(_QWORD *)v34;
    v36 = *(_BYTE *)(v34 + 8);
    v37 = objc_allocWithZone((Class)type metadata accessor for CustodianPreflightEvent(0));
    v38 = sub_1000A9E8C(v35, v36);
    sub_100006F58(v96);
    v39 = (uint64_t *)(a1 + v25[13]);
    v40 = *v39;
    v41 = v39[1];
    v42 = (uint64_t *)(v38 + qword_10028F840);
    v43 = *(_QWORD *)(v38 + qword_10028F840 + 8);
    *v42 = v40;
    v42[1] = v41;
    swift_bridgeObjectRetain(v41);
    swift_bridgeObjectRelease(v43);
    v44 = a1 + v25[15];
    v45 = *(_QWORD *)v44;
    LOBYTE(v44) = *(_BYTE *)(v44 + 8);
    v89 = (void (**)(char *, uint64_t, uint64_t))v38;
    v46 = v38 + qword_10028F848;
    *(_QWORD *)v46 = v45;
    *(_BYTE *)(v46 + 8) = v44;
    v47 = (uint64_t *)(a1 + v25[14]);
    v49 = *v47;
    v48 = v47[1];
    v50 = (_QWORD *)(v38 + qword_10028F850);
    v51 = *(_QWORD *)(v38 + qword_10028F850 + 8);
    *v50 = v49;
    v50[1] = v48;
    swift_bridgeObjectRetain(v48);
    swift_bridgeObjectRelease(v51);
    v52 = v92;
    v53 = sub_100116BD0(v95, v92, v40, v41);
    v54 = v91;
    sub_100027FE8(a1, v91, type metadata accessor for CustodianshipRecords);
    v55 = *(unsigned __int8 *)(v90 + 80);
    v56 = (v55 + 24) & ~v55;
    v57 = (v12 + v56 + 7) & 0xFFFFFFFFFFFFFFF8;
    v58 = v6;
    v59 = (v57 + 23) & 0xFFFFFFFFFFFFFFF8;
    v60 = (v59 + 23) & 0xFFFFFFFFFFFFFFF8;
    v61 = (v60 + 15) & 0xFFFFFFFFFFFFFFF8;
    v62 = swift_allocObject(&unk_100268098, v61 + 16, v55 | 7);
    *(_QWORD *)(v62 + 16) = v58;
    sub_10003B730(v54, v62 + v56, type metadata accessor for CustodianshipRecords);
    v63 = (_QWORD *)(v62 + v57);
    v64 = v94;
    *v63 = v95;
    v63[1] = v52;
    v65 = (void (***)(char *, uint64_t, uint64_t))(v62 + v59);
    v66 = v89;
    *v65 = v89;
    v65[1] = (void (**)(char *, uint64_t, uint64_t))&off_100264AB8;
    *(_QWORD *)(v62 + v60) = v53;
    v67 = (_QWORD *)(v62 + v61);
    *v67 = v93;
    v67[1] = v64;
    v68 = v53;
    swift_retain(v64);
    swift_retain(v58);
    swift_bridgeObjectRetain(v52);
    v69 = v66;
    sub_10011AB40(v87, v69, (uint64_t)sub_100118004, v62, v58);
    swift_release(v62);

    return;
  }
  v86 = (uint64_t)&v86 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = v25[9];
  v28 = v25;
  v29 = v6;
  v30 = *(_QWORD *)&v24[v27];
  sub_100028388((uint64_t)v24, type metadata accessor for CustodianshipRecords);
  sub_100027FE8(a1, (uint64_t)v21, type metadata accessor for CustodianshipRecords);
  v31 = v30 == 3;
  v6 = v29;
  v25 = v28;
  if (v31)
    goto LABEL_5;
  v70 = *(_QWORD *)&v21[v28[9]];
  sub_100028388((uint64_t)v21, type metadata accessor for CustodianshipRecords);
  if (v70 == 1)
    goto LABEL_6;
  if (qword_10028ADE0 != -1)
    swift_once(&qword_10028ADE0, sub_100046DA0);
  v71 = type metadata accessor for Logger(0);
  sub_100005288(v71, (uint64_t)qword_1002A8A20);
  v72 = v86;
  sub_100027FE8(a1, v86, type metadata accessor for CustodianshipRecords);
  v73 = swift_retain(v6);
  v74 = Logger.logObject.getter(v73);
  v76 = static os_log_type_t.default.getter(v75);
  if (os_log_type_enabled(v74, v76))
  {
    v77 = swift_slowAlloc(22, -1);
    v78 = swift_slowAlloc(64, -1);
    v96[0] = v78;
    *(_DWORD *)v77 = 136315394;
    v79 = *(_QWORD *)(v6 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName);
    v80 = *(_QWORD *)(v6 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName + 8);
    swift_bridgeObjectRetain(v80);
    v97 = sub_1001DEF4C(v79, v80, v96);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, &v98);
    swift_release(v6);
    swift_bridgeObjectRelease(v80);
    *(_WORD *)(v77 + 12) = 2080;
    v81 = type metadata accessor for UUID(0);
    v82 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v83 = dispatch thunk of CustomStringConvertible.description.getter(v81, v82);
    v85 = v84;
    v97 = sub_1001DEF4C(v83, v84, v96);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, &v98);
    swift_bridgeObjectRelease(v85);
    sub_100028388(v72, type metadata accessor for CustodianshipRecords);
    _os_log_impl((void *)&_mh_execute_header, v74, v76, "%s - custodian %s does not require a health check, ending check early.", (uint8_t *)v77, 0x16u);
    swift_arrayDestroy(v78, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v78, -1, -1);
    swift_slowDealloc(v77, -1, -1);
  }
  else
  {
    swift_release(v6);
    sub_100028388(v72, type metadata accessor for CustodianshipRecords);
  }

  v93(0);
}

uint64_t sub_100112970(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void (*a10)(uint64_t), void (*a11)(uint64_t))
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  _QWORD *v31;
  id v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  void (**v46)(uint64_t);
  void (*v47)(uint64_t);
  id v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(uint64_t);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(uint64_t);
  uint64_t v56;

  v53 = a6;
  v54 = a8;
  v52 = a5;
  v55 = a10;
  v56 = a7;
  v15 = sub_1000080B4((uint64_t *)&unk_100294B20);
  __chkstk_darwin(v15, v16);
  v18 = (char *)&v49 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for CustodianshipRecords(0);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(_QWORD *)(v20 + 64);
  __chkstk_darwin(v19, v22);
  v23 = (char *)&v49 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a1 & 1) != 0)
  {
    sub_100027FE8(a4, (uint64_t)&v49 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for CustodianshipRecords);
    v24 = *(unsigned __int8 *)(v20 + 80);
    v25 = (v24 + 72) & ~v24;
    v26 = swift_allocObject(&unk_100268138, v25 + v21, v24 | 7);
    *(_QWORD *)(v26 + 16) = a3;
    *(_QWORD *)(v26 + 24) = a9;
    v27 = v56;
    v28 = v54;
    *(_QWORD *)(v26 + 32) = v56;
    *(_QWORD *)(v26 + 40) = v28;
    *(_BYTE *)(v26 + 48) = 0;
    *(_QWORD *)(v26 + 56) = v55;
    *(_QWORD *)(v26 + 64) = a11;
    sub_10003B730((uint64_t)v23, v26 + v25, type metadata accessor for CustodianshipRecords);
    v29 = a9;
    swift_unknownObjectRetain(v27);
    swift_retain(a11);
    swift_retain(a3);
    sub_10011B66C(a4, (void (*)(uint64_t, uint64_t))sub_10011CED0, (void (*)(uint64_t, uint64_t))v26);
  }
  else
  {
    v51 = a11;
    if (a2)
    {
      v30 = type metadata accessor for TaskPriority(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v18, 1, 1, v30);
      v31 = (_QWORD *)swift_allocObject(&unk_100268110, 56, 7);
      v31[2] = 0;
      v31[3] = 0;
      v31[4] = a9;
      v31[5] = a2;
      v31[6] = a3;
      swift_errorRetain(a2);
      swift_errorRetain(a2);
      v32 = a9;
      swift_retain(a3);
      swift_errorRetain(a2);
      v33 = sub_10001CC6C((uint64_t)v18, (uint64_t)&unk_1002927C0, (uint64_t)v31);
      swift_release(v33);
      swift_errorRelease(a2);
      sub_1000A9FA0(0, 0, 1);
      swift_errorRetain(a2);
      v55(a2);
      swift_errorRelease(a2);
      return swift_errorRelease(a2);
    }
    v50 = a4;
    sub_100027FE8(a4, (uint64_t)&v49 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for CustodianshipRecords);
    v35 = *(unsigned __int8 *)(v20 + 80);
    v36 = (v35 + 24) & ~v35;
    v37 = (v21 + v36 + 7) & 0xFFFFFFFFFFFFFFF8;
    v38 = (v37 + 23) & 0xFFFFFFFFFFFFFFF8;
    v39 = (v38 + 15) & 0xFFFFFFFFFFFFFFF8;
    v40 = (v39 + 23) & 0xFFFFFFFFFFFFFFF8;
    v26 = swift_allocObject(&unk_1002680E8, v40 + 16, v35 | 7);
    *(_QWORD *)(v26 + 16) = a3;
    sub_10003B730((uint64_t)v23, v26 + v36, type metadata accessor for CustodianshipRecords);
    v41 = (_QWORD *)(v26 + v37);
    v42 = v53;
    *v41 = v52;
    v41[1] = v42;
    *(_QWORD *)(v26 + v38) = a9;
    v43 = (_QWORD *)(v26 + v39);
    v44 = v56;
    v45 = v54;
    *v43 = v56;
    v43[1] = v45;
    v46 = (void (**)(uint64_t))(v26 + v40);
    v47 = v51;
    *v46 = v55;
    v46[1] = v47;
    v48 = a9;
    swift_unknownObjectRetain(v44);
    swift_retain(v47);
    swift_bridgeObjectRetain(v42);
    swift_retain(a3);
    sub_10011C79C(v50, (uint64_t)sub_10011B5D8, v26);
  }
  return swift_release(v26);
}

uint64_t sub_100112C9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char *a5, void *a6, uint64_t a7, uint64_t a8, void (*a9)(_QWORD), uint64_t a10)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  _BOOL4 v34;
  uint64_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  uint64_t v45;
  uint64_t v46;
  uint8_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t ObjectType;
  uint64_t v55;
  void (*v56)(uint64_t *, _QWORD);
  _QWORD *v57;
  _QWORD *v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  NSObject *v63;
  __n128 v64;
  os_log_type_t v65;
  uint8_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  NSObject *v72;
  __n128 v73;
  os_log_type_t v74;
  uint8_t *v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  void *v83;
  uint64_t v84;
  id v85;
  uint64_t v86;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  id v109;
  _QWORD *v110;
  uint64_t v111;
  uint64_t v112;
  void (*v113)(_QWORD);
  void *v114;
  uint64_t v115;
  id v116;
  uint8_t *v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  void (*v128)(_QWORD);
  void *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135[6];

  v131 = a8;
  v132 = a7;
  v125 = a4;
  v126 = a5;
  v133 = a2;
  v129 = a6;
  v130 = a10;
  v127 = a3;
  v128 = a9;
  v11 = type metadata accessor for CustodianshipRecords(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  __chkstk_darwin(v11, v14);
  v15 = type metadata accessor for UUID(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15, v17);
  v19 = (char *)&v117 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_1000080B4(&qword_10028C448);
  v21 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20, v22);
  v24 = (char *)&v117 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_1000080B4((uint64_t *)&unk_100294B20);
  __chkstk_darwin(v25, v26);
  v28 = (char *)&v117 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    v126 = v28;
    swift_errorRetain(a1);
    if (qword_10028ADE0 != -1)
      swift_once(&qword_10028ADE0, sub_100046DA0);
    v29 = type metadata accessor for Logger(0);
    v30 = sub_100005288(v29, (uint64_t)qword_1002A8A20);
    v31 = swift_retain(v133);
    v32 = Logger.logObject.getter(v31);
    v33 = static os_log_type_t.error.getter(v32);
    v34 = os_log_type_enabled(v32, v33);
    v35 = v131;
    v124 = a1;
    if (v34)
    {
      v36 = (uint8_t *)swift_slowAlloc(12, -1);
      v37 = swift_slowAlloc(32, -1);
      v135[0] = v37;
      v125 = v30;
      *(_DWORD *)v36 = 136315138;
      v38 = v133;
      v40 = *(_QWORD *)(v133 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName);
      v39 = *(_QWORD *)(v133 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName + 8);
      swift_bridgeObjectRetain(v39);
      v134 = sub_1001DEF4C(v40, v39, v135);
      v35 = v131;
      a1 = v124;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v134, v135);
      swift_release(v38);
      swift_bridgeObjectRelease(v39);
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "%s Error repairing CRK.", v36, 0xCu);
      swift_arrayDestroy(v37, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v37, -1, -1);
      swift_slowDealloc(v36, -1, -1);

    }
    else
    {

      swift_release(v133);
    }
    ObjectType = swift_getObjectType(v132);
    v55 = _convertErrorToNSError(_:)(a1);
    v56 = (void (*)(uint64_t *, _QWORD))(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v35 + 32))(v135, ObjectType, v35);
    v58 = v57;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v56);
    v60 = *(_QWORD *)((*v58 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v59 = *(_QWORD *)((*v58 & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v60 >= v59 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v59 > 1, v60 + 1, 1);
    v61 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v60, v55);
    specialized Array._endMutation()(v61);
    v56(v135, 0);
    if (sub_10011A1AC()
      && *(_QWORD *)(v133 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_uniqueCustodianCount) == 1)
    {
      v62 = swift_retain(v133);
      v63 = Logger.logObject.getter(v62);
      v65 = static os_log_type_t.default.getter(v64);
      if (os_log_type_enabled(v63, v65))
      {
        v66 = (uint8_t *)swift_slowAlloc(12, -1);
        v67 = swift_slowAlloc(32, -1);
        v135[0] = v67;
        *(_DWORD *)v66 = 136315138;
        v68 = v133;
        v69 = *(_QWORD *)(v133 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName);
        v70 = *(_QWORD *)(v133 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName + 8);
        swift_bridgeObjectRetain(v70);
        v134 = sub_1001DEF4C(v69, v70, v135);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v134, v135);
        swift_release(v68);
        a1 = v124;
        swift_bridgeObjectRelease(v70);
        _os_log_impl((void *)&_mh_execute_header, v63, v65, "%s - Owner is an ADP user, with only one custodian with missing CRK and attempt to repair failed. Attempting to mark custodian as not reachable.", v66, 0xCu);
        swift_arrayDestroy(v67, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v67, -1, -1);
        swift_slowDealloc(v66, -1, -1);

      }
      else
      {

        swift_release(v133);
      }
      v110 = (_QWORD *)swift_allocObject(&unk_100268340, 72, 7);
      v111 = v132;
      v112 = v133;
      v113 = v128;
      v114 = v129;
      v110[2] = v133;
      v110[3] = v114;
      v110[4] = v111;
      v110[5] = v35;
      v115 = v130;
      v110[6] = v113;
      v110[7] = v115;
      v110[8] = a1;
      swift_retain(v112);
      swift_errorRetain(a1);
      v116 = v114;
      swift_unknownObjectRetain(v111);
      swift_retain(v115);
      sub_10011572C(v127, sub_10011DAB4, (uint64_t)v110);
      swift_errorRelease(a1);
      return swift_release(v110);
    }
    else
    {
      v71 = swift_retain(v133);
      v72 = Logger.logObject.getter(v71);
      v74 = static os_log_type_t.default.getter(v73);
      if (os_log_type_enabled(v72, v74))
      {
        v75 = (uint8_t *)swift_slowAlloc(12, -1);
        v76 = swift_slowAlloc(32, -1);
        v135[0] = v76;
        *(_DWORD *)v75 = 136315138;
        v77 = *(_QWORD *)(v133 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName);
        v78 = *(_QWORD *)(v133 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName + 8);
        v79 = v133;
        swift_bridgeObjectRetain(v78);
        v134 = sub_1001DEF4C(v77, v78, v135);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v134, v135);
        swift_release(v79);
        a1 = v124;
        swift_bridgeObjectRelease(v78);
        _os_log_impl((void *)&_mh_execute_header, v72, v74, "%s - Ending preflight.", v75, 0xCu);
        swift_arrayDestroy(v76, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v76, -1, -1);
        swift_slowDealloc(v75, -1, -1);

      }
      else
      {

        swift_release(v133);
      }
      v80 = type metadata accessor for TaskPriority(0);
      v81 = (uint64_t)v126;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v80 - 8) + 56))(v126, 1, 1, v80);
      v82 = (_QWORD *)swift_allocObject(&unk_100268318, 56, 7);
      v82[2] = 0;
      v82[3] = 0;
      v83 = v129;
      v82[4] = v129;
      v82[5] = a1;
      v84 = v133;
      v82[6] = v133;
      swift_errorRetain(a1);
      swift_retain(v84);
      swift_errorRetain(a1);
      v85 = v83;
      v86 = sub_10001CC6C(v81, (uint64_t)&unk_1002927D0, (uint64_t)v82);
      swift_release(v86);
      swift_errorRelease(a1);
      sub_1000A9FA0(0, 0, 2);
      swift_errorRetain(a1);
      v128(a1);
      swift_errorRelease(a1);
      return swift_errorRelease(a1);
    }
  }
  else
  {
    v118 = v24;
    v119 = v21;
    v120 = v12;
    v121 = (char *)&v117 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
    v122 = v19;
    v123 = v16;
    v124 = v15;
    if (qword_10028ADE0 != -1)
      swift_once(&qword_10028ADE0, sub_100046DA0);
    v41 = type metadata accessor for Logger(0);
    sub_100005288(v41, (uint64_t)qword_1002A8A20);
    v42 = swift_retain(v133);
    v43 = Logger.logObject.getter(v42);
    v44 = static os_log_type_t.info.getter();
    v45 = v13;
    v46 = v20;
    if (os_log_type_enabled(v43, v44))
    {
      v47 = (uint8_t *)swift_slowAlloc(12, -1);
      v135[0] = swift_slowAlloc(32, -1);
      v48 = v13;
      v49 = v135[0];
      *(_DWORD *)v47 = 136315138;
      v117 = v47 + 4;
      v50 = v133;
      v52 = *(_QWORD *)(v133 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName);
      v51 = *(_QWORD *)(v133 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName + 8);
      swift_bridgeObjectRetain(v51);
      v134 = sub_1001DEF4C(v52, v51, v135);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v134, v135);
      swift_release(v50);
      swift_bridgeObjectRelease(v51);
      _os_log_impl((void *)&_mh_execute_header, v43, v44, "%s CRK repair successful. Proceeding to refetch records to preflight", v47, 0xCu);
      swift_arrayDestroy(v49, 1, (char *)&type metadata for Any + 8);
      v53 = v49;
      v45 = v48;
      swift_slowDealloc(v53, -1, -1);
      swift_slowDealloc(v47, -1, -1);

    }
    else
    {

      swift_release(v133);
    }
    v88 = v125;
    v89 = v126;
    v91 = (uint64_t)v122;
    v90 = v123;
    v92 = (uint64_t)v121;
    v93 = v119;
    v94 = v133;
    v95 = v118;
    (*(void (**)(char *, uint64_t, uint64_t))(v119 + 16))(v118, v133 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck__custodianStorage, v46);
    Dependency.wrappedValue.getter(v135, v46);
    (*(void (**)(char *, uint64_t))(v93 + 8))(v95, v46);
    sub_10000732C(v135, v135[3]);
    v96 = type metadata accessor for CustodianRecord(0);
    v97 = v127;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v90 + 16))(v91, v127 + *(int *)(v96 + 20), v124);
    sub_100027FE8(v97, v92, type metadata accessor for CustodianshipRecords);
    v98 = *(unsigned __int8 *)(v120 + 80);
    v99 = (v98 + 80) & ~v98;
    v100 = (_QWORD *)swift_allocObject(&unk_1002682C8, v99 + v45, v98 | 7);
    v100[2] = v94;
    v100[3] = v88;
    v101 = v91;
    v102 = v129;
    v100[4] = v89;
    v100[5] = v102;
    v103 = v92;
    v104 = v131;
    v105 = v132;
    v100[6] = v132;
    v100[7] = v104;
    v106 = (uint64_t)v100 + v99;
    v107 = v130;
    v100[8] = v128;
    v100[9] = v107;
    sub_10003B730(v103, v106, type metadata accessor for CustodianshipRecords);
    v108 = swift_allocObject(&unk_1002682F0, 32, 7);
    *(_QWORD *)(v108 + 16) = sub_10011DA10;
    *(_QWORD *)(v108 + 24) = v100;
    v109 = v102;
    swift_unknownObjectRetain(v105);
    swift_retain(v107);
    swift_bridgeObjectRetain(v89);
    swift_retain(v100);
    swift_retain(v94);
    sub_1001BD630(v101, (uint64_t)sub_10003B8CC, v108);
    swift_release(v100);
    swift_release(v108);
    (*(void (**)(uint64_t, uint64_t))(v123 + 8))(v101, v124);
    return sub_100006F58(v135);
  }
}

uint64_t sub_1001136FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(uint64_t), uint64_t *a7, void (*a8)(uint64_t), void (*a9)(uint64_t), uint64_t a10)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  void *v52;
  void (**v53)(uint64_t);
  void (*v54)(uint64_t);
  uint64_t *v55;
  void (**v56)(uint64_t);
  id v57;
  void (*v59)(uint64_t);
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  void (*v64)(uint64_t);
  void (*v65)(uint64_t);
  uint64_t v66;
  uint64_t v67;

  v64 = a6;
  v65 = a8;
  v61 = a7;
  v62 = a5;
  v12 = type metadata accessor for CustodianshipRecords(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  v16 = __chkstk_darwin(v12, v15);
  v63 = (uint64_t)&v60 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v16, v17);
  v20 = (char *)&v60 - v19;
  __chkstk_darwin(v18, v21);
  v23 = (char *)&v60 - v22;
  v24 = sub_1000080B4((uint64_t *)&unk_10028CCD0);
  __chkstk_darwin(v24, v25);
  v27 = (uint64_t *)((char *)&v60 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100024A20(a1, (uint64_t)v27, (uint64_t *)&unk_10028CCD0);
  if (swift_getEnumCaseMultiPayload(v27, v24) == 1)
  {
    v28 = a2;
    v64 = a9;
    v29 = *v27;
    if (qword_10028ADE0 != -1)
      swift_once(&qword_10028ADE0, sub_100046DA0);
    v30 = type metadata accessor for Logger(0);
    sub_100005288(v30, (uint64_t)qword_1002A8A20);
    v31 = v63;
    sub_100027FE8(a10, v63, type metadata accessor for CustodianshipRecords);
    swift_errorRetain(v29);
    swift_retain(a2);
    v32 = swift_errorRetain(v29);
    v33 = Logger.logObject.getter(v32);
    v34 = static os_log_type_t.error.getter(v33);
    if (os_log_type_enabled(v33, v34))
    {
      v35 = swift_slowAlloc(32, -1);
      v61 = (uint64_t *)swift_slowAlloc(8, -1);
      v62 = swift_slowAlloc(64, -1);
      v67 = v62;
      *(_DWORD *)v35 = 136315650;
      v36 = *(_QWORD *)(a2 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName);
      v37 = *(_QWORD *)(v28 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName + 8);
      swift_bridgeObjectRetain(v37);
      v66 = sub_1001DEF4C(v36, v37, &v67);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, &v67);
      swift_release(v28);
      swift_bridgeObjectRelease(v37);
      *(_WORD *)(v35 + 12) = 2080;
      type metadata accessor for CustodianRecord(0);
      v38 = type metadata accessor for UUID(0);
      v39 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v40 = dispatch thunk of CustomStringConvertible.description.getter(v38, v39);
      v42 = v41;
      v66 = sub_1001DEF4C(v40, v41, &v67);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, &v67);
      swift_bridgeObjectRelease(v42);
      sub_100028388(v31, type metadata accessor for CustodianshipRecords);
      *(_WORD *)(v35 + 22) = 2112;
      v43 = _convertErrorToNSError(_:)(v29);
      v66 = v43;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, &v67);
      v44 = v61;
      *v61 = v43;
      swift_errorRelease(v29);
      swift_errorRelease(v29);
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "%s - error fetching health check record for %s: %@", (uint8_t *)v35, 0x20u);
      v45 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v44, 1, v45);
      swift_slowDealloc(v44, -1, -1);
      v46 = v62;
      swift_arrayDestroy(v62, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v46, -1, -1);
      swift_slowDealloc(v35, -1, -1);
    }
    else
    {
      swift_release(a2);
      sub_100028388(v31, type metadata accessor for CustodianshipRecords);
      swift_errorRelease(v29);
      swift_errorRelease(v29);
    }

    v59 = v65;
    swift_errorRetain(v29);
    v59(v29);
    swift_errorRelease(v29);
    return swift_errorRelease(v29);
  }
  else
  {
    sub_10003B730((uint64_t)v27, (uint64_t)v23, type metadata accessor for CustodianshipRecords);
    sub_100027FE8((uint64_t)v23, (uint64_t)v20, type metadata accessor for CustodianshipRecords);
    v47 = *(unsigned __int8 *)(v13 + 80);
    v48 = (v47 + 32) & ~v47;
    v49 = (v14 + v48 + 7) & 0xFFFFFFFFFFFFFFF8;
    v50 = (v49 + 23) & 0xFFFFFFFFFFFFFFF8;
    v51 = swift_allocObject(&unk_1002683B8, v50 + 16, v47 | 7);
    v52 = (void *)v62;
    *(_QWORD *)(v51 + 16) = a2;
    *(_QWORD *)(v51 + 24) = v52;
    sub_10003B730((uint64_t)v20, v51 + v48, type metadata accessor for CustodianshipRecords);
    v53 = (void (**)(uint64_t))(v51 + v49);
    v54 = v64;
    v55 = v61;
    *v53 = v64;
    v53[1] = (void (*)(uint64_t))v55;
    v56 = (void (**)(uint64_t))(v51 + v50);
    *v56 = v65;
    v56[1] = a9;
    v57 = v52;
    swift_unknownObjectRetain(v54);
    swift_retain(a9);
    swift_retain(a2);
    sub_10011B66C((uint64_t)v23, (void (*)(uint64_t, uint64_t))sub_10011DDB0, (void (*)(uint64_t, uint64_t))v51);
    swift_release(v51);
    return sub_100028388((uint64_t)v23, type metadata accessor for CustodianshipRecords);
  }
}

uint64_t sub_100113BF4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, void (*a8)(_QWORD), uint64_t a9)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  _QWORD *v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t ObjectType;
  uint64_t v60;
  void (*v61)(uint64_t *, _QWORD);
  _QWORD *v62;
  _QWORD *v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v68;
  void (*v69)(_QWORD);
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73[4];
  uint64_t v74;
  uint64_t v75;

  v71 = a7;
  v72 = a6;
  v14 = type metadata accessor for CustodianshipRecords(0);
  v16 = __chkstk_darwin(v14, v15);
  v18 = (char *)&v68 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16, v19);
  v21 = (char *)&v68 - v20;
  v22 = sub_1000080B4((uint64_t *)&unk_100294B20);
  __chkstk_darwin(v22, v23);
  v25 = (char *)&v68 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = type metadata accessor for TaskPriority(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v25, 1, 1, v26);
  v27 = (_QWORD *)swift_allocObject(&unk_1002683E0, 56, 7);
  v27[2] = 0;
  v27[3] = 0;
  v27[4] = a4;
  v27[5] = a2;
  v27[6] = a3;
  swift_retain(a3);
  v28 = a4;
  swift_errorRetain(a2);
  v29 = sub_10001CC6C((uint64_t)v25, (uint64_t)&unk_1002927E8, (uint64_t)v27);
  swift_release(v29);
  if (a2)
  {
    swift_errorRetain(a2);
    if (qword_10028ADE0 != -1)
      swift_once(&qword_10028ADE0, sub_100046DA0);
    v30 = type metadata accessor for Logger(0);
    sub_100005288(v30, (uint64_t)qword_1002A8A20);
    sub_100027FE8(a5, (uint64_t)v18, type metadata accessor for CustodianshipRecords);
    v31 = swift_retain(a3);
    v32 = Logger.logObject.getter(v31);
    v33 = static os_log_type_t.error.getter(v32);
    if (os_log_type_enabled(v32, v33))
    {
      v34 = swift_slowAlloc(22, -1);
      v69 = a8;
      v35 = v34;
      v36 = swift_slowAlloc(64, -1);
      v73[0] = v36;
      *(_DWORD *)v35 = 136315394;
      v70 = a9;
      v37 = *(_QWORD *)(a3 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName);
      v38 = *(_QWORD *)(a3 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName + 8);
      swift_bridgeObjectRetain(v38);
      v74 = sub_1001DEF4C(v37, v38, v73);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, &v75);
      swift_release(a3);
      swift_bridgeObjectRelease(v38);
      *(_WORD *)(v35 + 12) = 2080;
      type metadata accessor for CustodianRecord(0);
      v39 = type metadata accessor for UUID(0);
      v40 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v41 = dispatch thunk of CustomStringConvertible.description.getter(v39, v40);
      v43 = v42;
      v74 = sub_1001DEF4C(v41, v42, v73);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, &v75);
      swift_bridgeObjectRelease(v43);
      sub_100028388((uint64_t)v18, type metadata accessor for CustodianshipRecords);
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "%s - Ending with failed preflight after a repair for custodian %s", (uint8_t *)v35, 0x16u);
      swift_arrayDestroy(v36, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v36, -1, -1);
      v44 = v35;
      a8 = v69;
      swift_slowDealloc(v44, -1, -1);
    }
    else
    {
      swift_release(a3);
      sub_100028388((uint64_t)v18, type metadata accessor for CustodianshipRecords);
    }

    ObjectType = swift_getObjectType(v72);
    v60 = _convertErrorToNSError(_:)(a2);
    v61 = (void (*)(uint64_t *, _QWORD))(*(uint64_t (**)(uint64_t *, uint64_t))(v71 + 32))(v73, ObjectType);
    v63 = v62;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v61);
    v65 = *(_QWORD *)((*v63 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v64 = *(_QWORD *)((*v63 & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v65 >= v64 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v64 > 1, v65 + 1, 1);
    v66 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v65, v60);
    specialized Array._endMutation()(v66);
    v61(v73, 0);
    sub_1000A9FA0(0, 1, 6);
    swift_errorRetain(a2);
    a8(a2);
    swift_errorRelease(a2);
    return swift_errorRelease(a2);
  }
  else
  {
    if (qword_10028ADE0 != -1)
      swift_once(&qword_10028ADE0, sub_100046DA0);
    v45 = type metadata accessor for Logger(0);
    sub_100005288(v45, (uint64_t)qword_1002A8A20);
    sub_100027FE8(a5, (uint64_t)v21, type metadata accessor for CustodianshipRecords);
    v46 = swift_retain(a3);
    v47 = Logger.logObject.getter(v46);
    v48 = static os_log_type_t.debug.getter(v47);
    if (os_log_type_enabled(v47, v48))
    {
      v49 = swift_slowAlloc(22, -1);
      v70 = a9;
      v50 = v49;
      v51 = swift_slowAlloc(64, -1);
      v73[0] = v51;
      *(_DWORD *)v50 = 136315394;
      v52 = *(_QWORD *)(a3 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName);
      v53 = *(_QWORD *)(a3 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName + 8);
      swift_bridgeObjectRetain(v53);
      v74 = sub_1001DEF4C(v52, v53, v73);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, &v75);
      swift_release(a3);
      swift_bridgeObjectRelease(v53);
      *(_WORD *)(v50 + 12) = 2080;
      type metadata accessor for CustodianRecord(0);
      v54 = type metadata accessor for UUID(0);
      v55 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v56 = dispatch thunk of CustomStringConvertible.description.getter(v54, v55);
      v58 = v57;
      v74 = sub_1001DEF4C(v56, v57, v73);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, &v75);
      swift_bridgeObjectRelease(v58);
      sub_100028388((uint64_t)v21, type metadata accessor for CustodianshipRecords);
      _os_log_impl((void *)&_mh_execute_header, v47, v48, "%s - Ending with successful preflight after repair for custodian %s", (uint8_t *)v50, 0x16u);
      swift_arrayDestroy(v51, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v51, -1, -1);
      swift_slowDealloc(v50, -1, -1);
    }
    else
    {
      swift_release(a3);
      sub_100028388((uint64_t)v21, type metadata accessor for CustodianshipRecords);
    }

    sub_1000A9FA0(1, 1, 5);
    return ((uint64_t (*)(_QWORD))a8)(0);
  }
}

uint64_t sub_10011427C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, void (*a6)(_QWORD), uint64_t a7, uint64_t a8)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  __n128 v35;
  os_log_type_t v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  id v46;
  uint64_t v47;
  uint64_t ObjectType;
  uint64_t v49;
  void (*v50)(uint64_t *, _QWORD);
  _QWORD *v51;
  _QWORD *v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  id v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  void (*v66)(_QWORD);
  uint64_t v67;
  char *v68;
  uint64_t v69[4];
  uint64_t v70;
  uint64_t v71;

  v16 = sub_1000080B4((uint64_t *)&unk_100294B20);
  __chkstk_darwin(v16, v17);
  v68 = (char *)&v62 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    swift_errorRetain(a1);
    if (qword_10028ADE0 != -1)
      swift_once(&qword_10028ADE0, sub_100046DA0);
    v67 = a5;
    v19 = type metadata accessor for Logger(0);
    sub_100005288(v19, (uint64_t)qword_1002A8A20);
    swift_retain(a2);
    swift_errorRetain(a1);
    swift_retain(a2);
    v20 = swift_errorRetain(a1);
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.error.getter(v21);
    if (os_log_type_enabled(v21, v22))
    {
      v23 = swift_slowAlloc(22, -1);
      v24 = swift_slowAlloc(8, -1);
      v63 = a3;
      v25 = (_QWORD *)v24;
      v26 = swift_slowAlloc(32, -1);
      v69[0] = v26;
      *(_DWORD *)v23 = 136315394;
      v65 = a7;
      v66 = a6;
      v64 = a4;
      v28 = *(_QWORD *)(a2 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName);
      v27 = *(_QWORD *)(a2 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName + 8);
      swift_bridgeObjectRetain(v27);
      v70 = sub_1001DEF4C(v28, v27, v69);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71);
      swift_release_n(a2, 2);
      swift_bridgeObjectRelease(v27);
      *(_WORD *)(v23 + 12) = 2112;
      swift_errorRetain(a1);
      v29 = _swift_stdlib_bridgeErrorToNSError(a1);
      v70 = v29;
      a4 = v64;
      a6 = v66;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71);
      *v25 = v29;
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "%s Mark as not reachable after failed CRK repair resulted in error %@. Ending preflight.", (uint8_t *)v23, 0x16u);
      v30 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v25, 1, v30);
      v31 = v25;
      a3 = v63;
      swift_slowDealloc(v31, -1, -1);
      swift_arrayDestroy(v26, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v26, -1, -1);
      swift_slowDealloc(v23, -1, -1);
    }
    else
    {
      swift_release_n(a2, 2);
      swift_errorRelease(a1);
      swift_errorRelease(a1);
    }

    v43 = type metadata accessor for TaskPriority(0);
    v44 = (uint64_t)v68;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 56))(v68, 1, 1, v43);
    v45 = (_QWORD *)swift_allocObject(&unk_100268390, 56, 7);
    v45[2] = 0;
    v45[3] = 0;
    v45[4] = a3;
    v45[5] = a1;
    v45[6] = a2;
    swift_errorRetain(a1);
    swift_retain(a2);
    swift_errorRetain(a1);
    v46 = a3;
    v47 = sub_10001CC6C(v44, (uint64_t)&unk_1002927E0, (uint64_t)v45);
    swift_release(v47);
    swift_errorRelease(a1);
    ObjectType = swift_getObjectType(a4);
    v49 = _convertErrorToNSError(_:)(a1);
    v50 = (void (*)(uint64_t *, _QWORD))(*(uint64_t (**)(uint64_t *, uint64_t))(v67 + 32))(v69, ObjectType);
    v52 = v51;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v50);
    v54 = *(_QWORD *)((*v52 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v53 = *(_QWORD *)((*v52 & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v54 >= v53 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v53 > 1, v54 + 1, 1);
    v55 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v54, v49);
    specialized Array._endMutation()(v55);
    v50(v69, 0);
    sub_1000A9FA0(0, 0, 2);
    swift_errorRetain(a1);
    a6(a1);
    swift_errorRelease(a1);
    return swift_errorRelease(a1);
  }
  else
  {
    if (qword_10028ADE0 != -1)
      swift_once(&qword_10028ADE0, sub_100046DA0);
    v32 = type metadata accessor for Logger(0);
    sub_100005288(v32, (uint64_t)qword_1002A8A20);
    v33 = swift_retain(a2);
    v34 = Logger.logObject.getter(v33);
    v36 = static os_log_type_t.default.getter(v35);
    if (os_log_type_enabled(v34, v36))
    {
      v65 = a7;
      v37 = (uint8_t *)swift_slowAlloc(12, -1);
      v38 = swift_slowAlloc(32, -1);
      v63 = a3;
      v39 = v38;
      v69[0] = v38;
      v66 = a6;
      *(_DWORD *)v37 = 136315138;
      v64 = a4;
      v40 = *(_QWORD *)(a2 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName);
      v41 = *(_QWORD *)(a2 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName + 8);
      swift_bridgeObjectRetain(v41);
      v70 = sub_1001DEF4C(v40, v41, v69);
      a6 = v66;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71);
      swift_release(a2);
      swift_bridgeObjectRelease(v41);
      _os_log_impl((void *)&_mh_execute_header, v34, v36, "%s Successfully marked custodian as not reachable after failed CRK repair. Stopping preflight.", v37, 0xCu);
      swift_arrayDestroy(v39, 1, (char *)&type metadata for Any + 8);
      v42 = v39;
      a3 = v63;
      swift_slowDealloc(v42, -1, -1);
      swift_slowDealloc(v37, -1, -1);

    }
    else
    {

      swift_release(a2);
    }
    v57 = type metadata accessor for TaskPriority(0);
    v58 = (uint64_t)v68;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v57 - 8) + 56))(v68, 1, 1, v57);
    v59 = (_QWORD *)swift_allocObject(&unk_100268368, 56, 7);
    v59[2] = 0;
    v59[3] = 0;
    v59[4] = a3;
    v59[5] = a8;
    v59[6] = a2;
    v60 = a3;
    swift_retain(a2);
    swift_errorRetain(a8);
    v61 = sub_10001CC6C(v58, (uint64_t)&unk_1002927D8, (uint64_t)v59);
    swift_release(v61);
    sub_1000A9FA0(0, 0, 2);
    return ((uint64_t (*)(uint64_t))a6)(a8);
  }
}

uint64_t sub_1001148C0(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(_QWORD, uint64_t), uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v23;
  uint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  __n128 v47;
  os_log_type_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t ObjectType;
  uint64_t v60;
  void (*v61)(uint64_t *, _QWORD);
  _QWORD *v62;
  _QWORD *v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t (*v78)(_QWORD, uint64_t);
  int v79;
  uint64_t v80;
  uint64_t v81[4];

  v77 = a8;
  v78 = a7;
  v75 = a5;
  v76 = a6;
  v79 = a1;
  v74 = type metadata accessor for CustodianshipRecords(0);
  v12 = __chkstk_darwin(v74, v11);
  v14 = (char *)&v68 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12, v15);
  v17 = (char *)&v68 - v16;
  if (qword_10028ADE0 != -1)
    swift_once(&qword_10028ADE0, sub_100046DA0);
  v18 = type metadata accessor for Logger(0);
  v19 = sub_100005288(v18, (uint64_t)qword_1002A8A20);
  swift_retain(a3);
  swift_errorRetain(a2);
  swift_retain(a3);
  v20 = swift_errorRetain(a2);
  v21 = Logger.logObject.getter(v20);
  v22 = static os_log_type_t.debug.getter(v21);
  if (os_log_type_enabled(v21, v22))
  {
    v70 = v19;
    v71 = a4;
    v72 = v17;
    v73 = (uint64_t)v14;
    v23 = swift_slowAlloc(28, -1);
    v24 = (uint64_t *)swift_slowAlloc(8, -1);
    v69 = swift_slowAlloc(32, -1);
    v81[0] = v69;
    *(_DWORD *)v23 = 136315650;
    v26 = *(_QWORD *)(a3 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName);
    v25 = *(_QWORD *)(a3 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName + 8);
    swift_bridgeObjectRetain(v25);
    v80 = sub_1001DEF4C(v26, v25, v81);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v80, v81);
    swift_release_n(a3, 2);
    swift_bridgeObjectRelease(v25);
    *(_WORD *)(v23 + 12) = 1024;
    LODWORD(v80) = v79 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v80, (char *)&v80 + 4);
    *(_WORD *)(v23 + 18) = 2112;
    if (a2)
    {
      swift_errorRetain(a2);
      v27 = _swift_stdlib_bridgeErrorToNSError(a2);
      v80 = v27;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v80, v81);
    }
    else
    {
      v80 = 0;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v80, v81);
      v27 = 0;
    }
    *v24 = v27;
    swift_errorRelease(a2);
    swift_errorRelease(a2);
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "%s CRK exists on OT? %{BOOL}d error: %@", (uint8_t *)v23, 0x1Cu);
    v28 = sub_1000080B4((uint64_t *)&unk_10028BC20);
    swift_arrayDestroy(v24, 1, v28);
    swift_slowDealloc(v24, -1, -1);
    v29 = v69;
    swift_arrayDestroy(v69, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v29, -1, -1);
    swift_slowDealloc(v23, -1, -1);

    v17 = v72;
    v14 = (char *)v73;
    a4 = v71;
  }
  else
  {
    swift_release_n(a3, 2);
    swift_errorRelease(a2);
    swift_errorRelease(a2);

  }
  if (a2)
  {
    sub_100027FE8(a4, (uint64_t)v14, type metadata accessor for CustodianshipRecords);
    swift_errorRetain(a2);
    swift_errorRetain(a2);
    swift_retain(a3);
    v30 = swift_errorRetain(a2);
    v31 = Logger.logObject.getter(v30);
    v32 = static os_log_type_t.error.getter(v31);
    if (os_log_type_enabled(v31, v32))
    {
      v33 = swift_slowAlloc(38, -1);
      v34 = (uint64_t *)swift_slowAlloc(8, -1);
      v73 = swift_slowAlloc(64, -1);
      v81[0] = v73;
      *(_DWORD *)v33 = 136315906;
      v35 = *(_QWORD *)(a3 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName);
      v36 = *(_QWORD *)(a3 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName + 8);
      swift_bridgeObjectRetain(v36);
      v80 = sub_1001DEF4C(v35, v36, v81);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v80, v81);
      swift_release(a3);
      swift_bridgeObjectRelease(v36);
      *(_WORD *)(v33 + 12) = 2080;
      type metadata accessor for CustodianHealthRecord(0);
      v37 = type metadata accessor for UUID(0);
      v38 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v39 = dispatch thunk of CustomStringConvertible.description.getter(v37, v38);
      v41 = v40;
      v80 = sub_1001DEF4C(v39, v40, v81);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v80, v81);
      swift_bridgeObjectRelease(v41);
      sub_100028388((uint64_t)v14, type metadata accessor for CustodianshipRecords);
      *(_WORD *)(v33 + 22) = 2112;
      v42 = _convertErrorToNSError(_:)(a2);
      v80 = v42;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v80, v81);
      *v34 = v42;
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      *(_WORD *)(v33 + 32) = 1024;
      LODWORD(v80) = v79 & 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v80, (char *)&v80 + 4);
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "%s - Check custodian recovery failed for custodian %s with error: %@ exists: %{BOOL}d\"", (uint8_t *)v33, 0x26u);
      v43 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v34, 1, v43);
      swift_slowDealloc(v34, -1, -1);
      v44 = v73;
      swift_arrayDestroy(v73, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v44, -1, -1);
      swift_slowDealloc(v33, -1, -1);
    }
    else
    {
      swift_release(a3);
      sub_100028388((uint64_t)v14, type metadata accessor for CustodianshipRecords);
      swift_errorRelease(a2);
      swift_errorRelease(a2);
    }

    ObjectType = swift_getObjectType(v75);
    v60 = _convertErrorToNSError(_:)(a2);
    v61 = (void (*)(uint64_t *, _QWORD))(*(uint64_t (**)(uint64_t *, uint64_t))(v76 + 32))(v81, ObjectType);
    v63 = v62;
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v61);
    v65 = *(_QWORD *)((*v63 & 0xFFFFFFFFFFFFFF8) + 0x10);
    v64 = *(_QWORD *)((*v63 & 0xFFFFFFFFFFFFFF8) + 0x18);
    if (v65 >= v64 >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v64 > 1, v65 + 1, 1);
    v66 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v65, v60);
    specialized Array._endMutation()(v66);
    v61(v81, 0);
    swift_errorRelease(a2);
  }
  else
  {
    sub_100027FE8(a4, (uint64_t)v17, type metadata accessor for CustodianshipRecords);
    v45 = swift_retain(a3);
    v46 = Logger.logObject.getter(v45);
    v48 = static os_log_type_t.default.getter(v47);
    if (os_log_type_enabled(v46, v48))
    {
      v49 = swift_slowAlloc(28, -1);
      v50 = (uint64_t)v17;
      v51 = swift_slowAlloc(64, -1);
      v81[0] = v51;
      *(_DWORD *)v49 = 136315650;
      v52 = *(_QWORD *)(a3 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName);
      v53 = *(_QWORD *)(a3 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName + 8);
      swift_bridgeObjectRetain(v53);
      v80 = sub_1001DEF4C(v52, v53, v81);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v80, v81);
      swift_release(a3);
      swift_bridgeObjectRelease(v53);
      *(_WORD *)(v49 + 12) = 2080;
      type metadata accessor for CustodianRecord(0);
      v54 = type metadata accessor for UUID(0);
      v55 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v56 = dispatch thunk of CustomStringConvertible.description.getter(v54, v55);
      v58 = v57;
      v80 = sub_1001DEF4C(v56, v57, v81);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v80, v81);
      swift_bridgeObjectRelease(v58);
      sub_100028388(v50, type metadata accessor for CustodianshipRecords);
      *(_WORD *)(v49 + 22) = 1024;
      LODWORD(v80) = v79 & 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v80, (char *)&v80 + 4);
      _os_log_impl((void *)&_mh_execute_header, v46, v48, "%s - custodian %s check recovery key exists: %{BOOL}d", (uint8_t *)v49, 0x1Cu);
      swift_arrayDestroy(v51, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v51, -1, -1);
      swift_slowDealloc(v49, -1, -1);
    }
    else
    {
      swift_release(a3);
      sub_100028388((uint64_t)v17, type metadata accessor for CustodianshipRecords);
    }

  }
  return v78(v79 & 1, a2);
}

uint64_t sub_100115164(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD), uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(_QWORD);
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(_QWORD);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v10 = type metadata accessor for CustodianshipRecords(0);
  v12 = __chkstk_darwin(v10, v11);
  v14 = (char *)&v51 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12, v15);
  v17 = (char *)&v51 - v16;
  if (a1)
  {
    swift_errorRetain(a1);
    if (qword_10028ADE0 != -1)
      swift_once(&qword_10028ADE0, sub_100046DA0);
    v18 = type metadata accessor for Logger(0);
    sub_100005288(v18, (uint64_t)qword_1002A8A20);
    sub_100027FE8(a3, (uint64_t)v14, type metadata accessor for CustodianshipRecords);
    swift_errorRetain(a1);
    swift_retain(a2);
    v19 = swift_errorRetain(a1);
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.error.getter(v20);
    if (os_log_type_enabled(v20, v21))
    {
      v22 = swift_slowAlloc(32, -1);
      v54 = a5;
      v23 = v22;
      v24 = (uint64_t *)swift_slowAlloc(8, -1);
      v52 = swift_slowAlloc(64, -1);
      v56 = v52;
      *(_DWORD *)v23 = 136315650;
      v53 = a4;
      v25 = *(_QWORD *)(a2 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName);
      v26 = *(_QWORD *)(a2 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName + 8);
      swift_bridgeObjectRetain(v26);
      v55 = sub_1001DEF4C(v25, v26, &v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56);
      swift_release(a2);
      swift_bridgeObjectRelease(v26);
      *(_WORD *)(v23 + 12) = 2080;
      type metadata accessor for CustodianRecord(0);
      v27 = type metadata accessor for UUID(0);
      v28 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v29 = dispatch thunk of CustomStringConvertible.description.getter(v27, v28);
      v31 = v30;
      v55 = sub_1001DEF4C(v29, v30, &v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56);
      swift_bridgeObjectRelease(v31);
      sub_100028388((uint64_t)v14, type metadata accessor for CustodianshipRecords);
      *(_WORD *)(v23 + 22) = 2112;
      v32 = _convertErrorToNSError(_:)(a1);
      v55 = v32;
      a4 = v53;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56);
      *v24 = v32;
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "%s - error repairing recovery keys for %s: %@.", (uint8_t *)v23, 0x20u);
      v33 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v24, 1, v33);
      swift_slowDealloc(v24, -1, -1);
      v34 = v52;
      swift_arrayDestroy(v52, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v34, -1, -1);
      swift_slowDealloc(v23, -1, -1);
    }
    else
    {
      swift_release(a2);
      sub_100028388((uint64_t)v14, type metadata accessor for CustodianshipRecords);
      swift_errorRelease(a1);
      swift_errorRelease(a1);
    }

    swift_errorRetain(a1);
    a4(a1);
    swift_errorRelease(a1);
    return swift_errorRelease(a1);
  }
  else
  {
    if (qword_10028ADE0 != -1)
      swift_once(&qword_10028ADE0, sub_100046DA0);
    v35 = type metadata accessor for Logger(0);
    sub_100005288(v35, (uint64_t)qword_1002A8A20);
    sub_100027FE8(a3, (uint64_t)v17, type metadata accessor for CustodianshipRecords);
    v36 = swift_retain(a2);
    v37 = Logger.logObject.getter(v36);
    v38 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v37, v38))
    {
      v39 = swift_slowAlloc(22, -1);
      v40 = swift_slowAlloc(64, -1);
      v54 = a5;
      v41 = v40;
      v56 = v40;
      *(_DWORD *)v39 = 136315394;
      v42 = a4;
      v43 = *(_QWORD *)(a2 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName);
      v44 = *(_QWORD *)(a2 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName + 8);
      swift_bridgeObjectRetain(v44);
      v55 = sub_1001DEF4C(v43, v44, &v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56);
      swift_release(a2);
      swift_bridgeObjectRelease(v44);
      *(_WORD *)(v39 + 12) = 2080;
      type metadata accessor for CustodianRecord(0);
      v45 = type metadata accessor for UUID(0);
      v46 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v47 = dispatch thunk of CustomStringConvertible.description.getter(v45, v46);
      v49 = v48;
      v55 = sub_1001DEF4C(v47, v48, &v56);
      a4 = v42;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56);
      swift_bridgeObjectRelease(v49);
      sub_100028388((uint64_t)v17, type metadata accessor for CustodianshipRecords);
      _os_log_impl((void *)&_mh_execute_header, v37, v38, "%s - recovery key repair was successful for %s.", (uint8_t *)v39, 0x16u);
      swift_arrayDestroy(v41, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v41, -1, -1);
      swift_slowDealloc(v39, -1, -1);
    }
    else
    {
      swift_release(a2);
      sub_100028388((uint64_t)v17, type metadata accessor for CustodianshipRecords);
    }

    return ((uint64_t (*)(_QWORD))a4)(0);
  }
}

uint64_t sub_10011572C(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  __n128 v31;
  os_log_type_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  _QWORD *v67;
  uint64_t (**v68)@<X0>(uint64_t@<X0>, uint64_t@<X8>);
  uint64_t v69;
  uint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  id v73;
  id v74;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92[6];

  v4 = v3;
  v87 = a3;
  v82 = a2;
  v6 = sub_1000080B4(&qword_10028E810);
  __chkstk_darwin(v6, v7);
  v85 = (char *)&v76 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1000080B4((uint64_t *)&unk_1002904F0);
  __chkstk_darwin(v9, v10);
  v84 = (char *)&v76 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v89 = type metadata accessor for CustodianRecord(0);
  v81 = *(_QWORD *)(v89 - 8);
  v12 = *(_QWORD *)(v81 + 64);
  v14 = __chkstk_darwin(v89, v13);
  v86 = (uint64_t)&v76 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v14, v15);
  v90 = (uint64_t)&v76 - v17;
  __chkstk_darwin(v16, v18);
  v83 = (uint64_t)&v76 - v19;
  v20 = sub_1000080B4(&qword_10028CCC0);
  v21 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20, v22);
  v24 = (char *)&v76 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = type metadata accessor for CustodianshipRecords(0);
  __chkstk_darwin(v79, v25);
  v27 = (char *)&v76 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10028ADE0 != -1)
    swift_once(&qword_10028ADE0, sub_100046DA0);
  v28 = type metadata accessor for Logger(0);
  sub_100005288(v28, (uint64_t)qword_1002A8A20);
  v88 = a1;
  sub_100027FE8(a1, (uint64_t)v27, type metadata accessor for CustodianshipRecords);
  v29 = swift_retain(v3);
  v30 = Logger.logObject.getter(v29);
  v32 = static os_log_type_t.default.getter(v31);
  if (os_log_type_enabled(v30, v32))
  {
    v33 = swift_slowAlloc(22, -1);
    v78 = v21;
    v34 = v33;
    v77 = swift_slowAlloc(64, -1);
    v92[0] = v77;
    *(_DWORD *)v34 = 136315394;
    v80 = v3;
    v36 = *(_QWORD *)(v3 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName);
    v35 = *(_QWORD *)(v3 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName + 8);
    swift_bridgeObjectRetain(v35);
    v91 = sub_1001DEF4C(v36, v35, v92);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v91, v92);
    swift_release(v80);
    swift_bridgeObjectRelease(v35);
    *(_WORD *)(v34 + 12) = 2080;
    v76 = v34 + 14;
    type metadata accessor for CustodianHealthRecord(0);
    v37 = type metadata accessor for UUID(0);
    v38 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v39 = dispatch thunk of CustomStringConvertible.description.getter(v37, v38);
    v41 = v40;
    v91 = sub_1001DEF4C(v39, v40, v92);
    v4 = v80;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v91, v92);
    swift_bridgeObjectRelease(v41);
    sub_100028388((uint64_t)v27, type metadata accessor for CustodianshipRecords);
    _os_log_impl((void *)&_mh_execute_header, v30, v32, "%s - marking custodian %s as Not reachable.", (uint8_t *)v34, 0x16u);
    v42 = v77;
    swift_arrayDestroy(v77, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v42, -1, -1);
    v43 = v34;
    v21 = v78;
    swift_slowDealloc(v43, -1, -1);
  }
  else
  {
    swift_release(v3);
    sub_100028388((uint64_t)v27, type metadata accessor for CustodianshipRecords);
  }

  v80 = swift_allocObject(&unk_100268020, 24, 7);
  *(_QWORD *)(v80 + 16) = 3;
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v24, v4 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck__storageController, v20);
  Dependency.wrappedValue.getter(v92, v20);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v24, v20);
  v44 = sub_10000732C(v92, v92[3]);
  v45 = v88;
  v46 = v83;
  sub_100027FE8(v88, v83, type metadata accessor for CustodianRecord);
  v47 = *(unsigned __int8 *)(v81 + 80);
  v48 = (v47 + 24) & ~v47;
  v81 = v47 | 7;
  v49 = v12 + 7;
  v50 = v4;
  v51 = (v12 + 7 + v48) & 0xFFFFFFFFFFFFFFF8;
  v52 = (v51 + 15) & 0xFFFFFFFFFFFFFFF8;
  v53 = swift_allocObject(&unk_100268048, v52 + 16, v47 | 7);
  *(_QWORD *)(v53 + 16) = v50;
  sub_10003B730(v46, v53 + v48, type metadata accessor for CustodianRecord);
  *(_QWORD *)(v53 + v51) = 3;
  v54 = (_QWORD *)(v53 + v52);
  v55 = v87;
  *v54 = v82;
  v54[1] = v55;
  v56 = *v44;
  v82 = sub_10000732C((_QWORD *)(v56 + 56), *(_QWORD *)(v56 + 80));
  sub_100027FE8(v45, v46, type metadata accessor for CustodianRecord);
  v57 = type metadata accessor for UUID(0);
  v58 = (uint64_t)v84;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v57 - 8) + 56))(v84, 1, 1, v57);
  v59 = type metadata accessor for Date(0);
  v60 = (uint64_t)v85;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v59 - 8) + 56))(v85, 1, 1, v59);
  swift_retain(v50);
  v61 = v80;
  swift_retain(v80);
  swift_retain(v55);
  v62 = v90;
  sub_100093290(v46, 0, 0, 3, 0, 0, 0xF000000000000000, 2u, v90, v58, 0, 0, v60, 0);
  v63 = v45;
  v64 = v86;
  sub_100027FE8(v63, v86, type metadata accessor for CustodianRecord);
  v65 = (v47 + 48) & ~v47;
  v66 = (v49 + v65) & 0xFFFFFFFFFFFFFFF8;
  v67 = (_QWORD *)swift_allocObject(&unk_100268070, v66 + 16, v81);
  v67[2] = v56;
  v67[3] = sub_100117CFC;
  v67[4] = v53;
  v67[5] = 0;
  sub_10003B730(v64, (uint64_t)v67 + v65, type metadata accessor for CustodianRecord);
  v68 = (uint64_t (**)@<X0>(uint64_t@<X0>, uint64_t@<X8>))((char *)v67 + v66);
  *v68 = sub_100117CF0;
  v68[1] = (uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X8>))v61;
  v69 = qword_10028AF00;
  swift_retain(v61);
  swift_retain(v56);
  swift_retain(v53);
  if (v69 != -1)
    swift_once(&qword_10028AF00, sub_1001FD458);
  if (*(_BYTE *)(v62 + *(int *)(v89 + 48)) == 1)
  {
    if (qword_10028AF10 != -1)
      swift_once(&qword_10028AF10, sub_1001FDD8C);
    v70 = &qword_1002A8C80;
  }
  else
  {
    if (qword_10028AF08 != -1)
      swift_once(&qword_10028AF08, sub_1001FDD54);
    v70 = &qword_1002A8C70;
  }
  v72 = *v70;
  v71 = v70[1];
  swift_bridgeObjectRetain(v71);
  v73 = sub_1001FD4C0(v72, v71);
  v74 = objc_msgSend(v73, "privateCloudDatabase");
  swift_bridgeObjectRelease(v71);

  sub_100054464(v62, v74, (uint64_t)sub_100117D04, (uint64_t)v67);
  swift_release(v67);

  sub_100028388(v62, type metadata accessor for CustodianRecord);
  swift_release(v53);
  swift_release_n(v61, 2);
  return sub_100006F58(v92);
}

uint64_t sub_100115EC4(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD), uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  __n128 v39;
  os_log_type_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(_QWORD);
  uint64_t v55;
  uint64_t v56;

  v10 = type metadata accessor for CustodianshipRecords(0);
  v12 = __chkstk_darwin(v10, v11);
  v14 = (char *)&v51 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12, v15);
  v17 = (char *)&v51 - v16;
  if (a1)
  {
    swift_errorRetain(a1);
    if (qword_10028ADE0 != -1)
      swift_once(&qword_10028ADE0, sub_100046DA0);
    v18 = type metadata accessor for Logger(0);
    sub_100005288(v18, (uint64_t)qword_1002A8A20);
    sub_100027FE8(a3, (uint64_t)v14, type metadata accessor for CustodianshipRecords);
    swift_errorRetain(a1);
    swift_retain(a2);
    v19 = swift_errorRetain(a1);
    v20 = Logger.logObject.getter(v19);
    v21 = static os_log_type_t.error.getter(v20);
    if (os_log_type_enabled(v20, v21))
    {
      v22 = swift_slowAlloc(32, -1);
      v54 = a4;
      v23 = v22;
      v51 = (uint64_t *)swift_slowAlloc(8, -1);
      v52 = swift_slowAlloc(64, -1);
      v56 = v52;
      *(_DWORD *)v23 = 136315650;
      v53 = a5;
      v25 = *(_QWORD *)(a2 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName);
      v24 = *(_QWORD *)(a2 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName + 8);
      swift_bridgeObjectRetain(v24);
      v55 = sub_1001DEF4C(v25, v24, &v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56);
      swift_release(a2);
      swift_bridgeObjectRelease(v24);
      *(_WORD *)(v23 + 12) = 2080;
      type metadata accessor for CustodianHealthRecord(0);
      v26 = type metadata accessor for UUID(0);
      v27 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v28 = dispatch thunk of CustomStringConvertible.description.getter(v26, v27);
      v30 = v29;
      v55 = sub_1001DEF4C(v28, v29, &v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56);
      swift_bridgeObjectRelease(v30);
      sub_100028388((uint64_t)v14, type metadata accessor for CustodianshipRecords);
      *(_WORD *)(v23 + 22) = 2112;
      v31 = _convertErrorToNSError(_:)(a1);
      v55 = v31;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56);
      v32 = v51;
      *v51 = v31;
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "%s - failed to mark custodian %s as accepted. Error: %@", (uint8_t *)v23, 0x20u);
      v33 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v32, 1, v33);
      swift_slowDealloc(v32, -1, -1);
      v34 = v52;
      swift_arrayDestroy(v52, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v34, -1, -1);
      v35 = v23;
      a4 = v54;
      swift_slowDealloc(v35, -1, -1);
    }
    else
    {
      swift_release(a2);
      sub_100028388((uint64_t)v14, type metadata accessor for CustodianshipRecords);
      swift_errorRelease(a1);
      swift_errorRelease(a1);
    }

    swift_errorRetain(a1);
    a4(a1);
    swift_errorRelease(a1);
    return swift_errorRelease(a1);
  }
  else
  {
    if (qword_10028ADE0 != -1)
      swift_once(&qword_10028ADE0, sub_100046DA0);
    v36 = type metadata accessor for Logger(0);
    sub_100005288(v36, (uint64_t)qword_1002A8A20);
    sub_100027FE8(a3, (uint64_t)v17, type metadata accessor for CustodianshipRecords);
    v37 = swift_retain(a2);
    v38 = Logger.logObject.getter(v37);
    v40 = static os_log_type_t.default.getter(v39);
    if (os_log_type_enabled(v38, v40))
    {
      v41 = swift_slowAlloc(22, -1);
      v53 = swift_slowAlloc(64, -1);
      v56 = v53;
      *(_DWORD *)v41 = 136315394;
      v54 = a4;
      v42 = *(_QWORD *)(a2 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName);
      v43 = *(_QWORD *)(a2 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName + 8);
      swift_bridgeObjectRetain(v43);
      v55 = sub_1001DEF4C(v42, v43, &v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56);
      swift_release(a2);
      swift_bridgeObjectRelease(v43);
      *(_WORD *)(v41 + 12) = 2080;
      type metadata accessor for CustodianHealthRecord(0);
      v44 = type metadata accessor for UUID(0);
      v45 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v46 = dispatch thunk of CustomStringConvertible.description.getter(v44, v45);
      v48 = v47;
      v55 = sub_1001DEF4C(v46, v47, &v56);
      a4 = v54;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56);
      swift_bridgeObjectRelease(v48);
      sub_100028388((uint64_t)v17, type metadata accessor for CustodianshipRecords);
      _os_log_impl((void *)&_mh_execute_header, v38, v40, "%s - successfully marked custodian %s as accepted.", (uint8_t *)v41, 0x16u);
      v49 = v53;
      swift_arrayDestroy(v53, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v49, -1, -1);
      swift_slowDealloc(v41, -1, -1);
    }
    else
    {
      swift_release(a2);
      sub_100028388((uint64_t)v17, type metadata accessor for CustodianshipRecords);
    }

    return ((uint64_t (*)(_QWORD))a4)(0);
  }
}

uint64_t sub_1001164AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t (*v18)(_QWORD);
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;

  v6 = sub_1000080B4(&qword_10028E810);
  __chkstk_darwin(v6, v7);
  v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1000080B4((uint64_t *)&unk_1002904F0);
  __chkstk_darwin(v10, v11);
  v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for CustodianRecord(0);
  __chkstk_darwin(v14, v15);
  v17 = (char *)&v22 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100027FE8(a1, (uint64_t)v17, v18);
  v19 = type metadata accessor for UUID(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v13, 1, 1, v19);
  v20 = type metadata accessor for Date(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v9, 1, 1, v20);
  return sub_100093290((uint64_t)v17, 0, 0, a2, 0, 0, 0xF000000000000000, 2u, a3, (uint64_t)v13, 0, 0, (uint64_t)v9, 0);
}

uint64_t sub_100116620(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD), uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  void (*v27)(_QWORD);
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  __n128 v37;
  os_log_type_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v53 = a4;
  v11 = type metadata accessor for CustodianRecord(0);
  __chkstk_darwin(v11, v12);
  v14 = (char *)&v51 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_1000080B4(&qword_10028D5D0);
  __chkstk_darwin(v15, v16);
  v18 = (uint64_t *)((char *)&v51 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100024A20(a1, (uint64_t)v18, &qword_10028D5D0);
  if (swift_getEnumCaseMultiPayload(v18, v15) == 1)
  {
    v19 = *v18;
    if (qword_10028ADE0 != -1)
      swift_once(&qword_10028ADE0, sub_100046DA0);
    v20 = type metadata accessor for Logger(0);
    sub_100005288(v20, (uint64_t)qword_1002A8A20);
    swift_retain(a2);
    v21 = swift_errorRetain(v19);
    v22 = Logger.logObject.getter(v21);
    v23 = static os_log_type_t.error.getter(v22);
    if (os_log_type_enabled(v22, v23))
    {
      v24 = swift_slowAlloc(32, -1);
      v25 = swift_slowAlloc(8, -1);
      v54 = a6;
      v26 = (_QWORD *)v25;
      v52 = swift_slowAlloc(32, -1);
      v56 = v52;
      *(_DWORD *)v24 = 136315650;
      v27 = a5;
      v28 = *(_QWORD *)(a2 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName);
      v29 = *(_QWORD *)(a2 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName + 8);
      swift_bridgeObjectRetain(v29);
      v55 = sub_1001DEF4C(v28, v29, &v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56);
      swift_release(a2);
      v30 = v29;
      a5 = v27;
      swift_bridgeObjectRelease(v30);
      *(_WORD *)(v24 + 12) = 2048;
      v55 = v53;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56);
      *(_WORD *)(v24 + 22) = 2112;
      v31 = _convertErrorToNSError(_:)(v19);
      v55 = v31;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56);
      *v26 = v31;
      swift_errorRelease(v19);
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "%s - error marking custodian record with status %ld: %@", (uint8_t *)v24, 0x20u);
      v32 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v26, 1, v32);
      swift_slowDealloc(v26, -1, -1);
      v33 = v52;
      swift_arrayDestroy(v52, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v33, -1, -1);
      swift_slowDealloc(v24, -1, -1);
    }
    else
    {
      swift_release(a2);
      swift_errorRelease(v19);
    }

    swift_errorRetain(v19);
    a5(v19);
    swift_errorRelease(v19);
    return swift_errorRelease(v19);
  }
  else
  {
    v54 = a6;
    if (qword_10028ADE0 != -1)
      swift_once(&qword_10028ADE0, sub_100046DA0);
    v34 = type metadata accessor for Logger(0);
    sub_100005288(v34, (uint64_t)qword_1002A8A20);
    sub_100027FE8(a3, (uint64_t)v14, type metadata accessor for CustodianRecord);
    v35 = swift_retain(a2);
    v36 = Logger.logObject.getter(v35);
    v38 = static os_log_type_t.default.getter(v37);
    if (os_log_type_enabled(v36, v38))
    {
      v39 = swift_slowAlloc(32, -1);
      v52 = (uint64_t)a5;
      v40 = v39;
      v51 = swift_slowAlloc(64, -1);
      v56 = v51;
      *(_DWORD *)v40 = 136315650;
      v42 = *(_QWORD *)(a2 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName);
      v41 = *(_QWORD *)(a2 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName + 8);
      swift_bridgeObjectRetain(v41);
      v55 = sub_1001DEF4C(v42, v41, &v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56);
      swift_release(a2);
      swift_bridgeObjectRelease(v41);
      *(_WORD *)(v40 + 12) = 2080;
      v43 = type metadata accessor for UUID(0);
      v44 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v45 = dispatch thunk of CustomStringConvertible.description.getter(v43, v44);
      v47 = v46;
      v55 = sub_1001DEF4C(v45, v46, &v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56);
      swift_bridgeObjectRelease(v47);
      sub_100028388((uint64_t)v14, type metadata accessor for CustodianRecord);
      *(_WORD *)(v40 + 22) = 2048;
      v55 = v53;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56);
      _os_log_impl((void *)&_mh_execute_header, v36, v38, "%s - custodian %s has been updated with status %ld.", (uint8_t *)v40, 0x20u);
      v48 = v51;
      swift_arrayDestroy(v51, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v48, -1, -1);
      v49 = v40;
      a5 = (void (*)(_QWORD))v52;
      swift_slowDealloc(v49, -1, -1);
    }
    else
    {
      swift_release(a2);
      sub_100028388((uint64_t)v14, type metadata accessor for CustodianRecord);
    }

    objc_msgSend((id)objc_opt_self(AATrustedContactNotificationPublisher), "postRecoveryContactChangedNotification");
    a5(0);
    return sub_100004934((uint64_t)v18, &qword_10028D5D0);
  }
}

id sub_100116BD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  id v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSString v25;
  NSString v26;
  NSString v27;
  id v28;
  id v29;
  NSString v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  id v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD v41[5];

  v5 = v4;
  v40 = a3;
  v8 = sub_1000080B4((uint64_t *)&unk_10028E7D0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v12 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_1000080B4(&qword_10028FA50);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13, v15);
  v17 = (char *)&v38 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v17, v5 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck__accountStore, v13);
  Dependency.wrappedValue.getter(v41, v13);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
  v18 = objc_msgSend(*(id *)(*sub_10000732C(v41, v41[3]) + 16), "aa_primaryAppleAccount");
  if (!v18
    || (v19 = v18, v20 = objc_msgSend(v18, "aa_altDSID"), v19, !v20))
  {
    sub_100006F58(v41);
    if (qword_10028ADE0 != -1)
      swift_once(&qword_10028ADE0, sub_100046DA0);
    v31 = type metadata accessor for Logger(0);
    v32 = sub_100005288(v31, (uint64_t)qword_1002A8A20);
    v33 = Logger.logObject.getter(v32);
    v34 = static os_log_type_t.debug.getter(v33);
    if (os_log_type_enabled(v33, v34))
    {
      v35 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v35 = 0;
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "Account is nil. Not reporting Preflight Event.", v35, 2u);
      swift_slowDealloc(v35, -1, -1);
    }
    v28 = 0;
    goto LABEL_13;
  }
  v39 = a4;
  static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
  v22 = v21;

  sub_100006F58(v41);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, v5 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck__analyticsEventFactory, v8);
  Dependency.wrappedValue.getter(v41, v8);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
  static String._unconditionallyBridgeFromObjectiveC(_:)(kAACustodianPreflightEvent);
  v24 = v23;
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(v22);
  v25 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v24);
  v26 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v22);
  v27 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  v28 = objc_msgSend((id)objc_opt_self(AAFAnalyticsEvent), "analyticsEventWithName:altDSID:flowID:", v25, v26, v27);
  swift_bridgeObjectRelease(v22);

  sub_100006F58(v41);
  if (v28)
  {
    if (v39)
    {
      v29 = v28;
      v30 = String._bridgeToObjectiveC()();
    }
    else
    {
      v36 = v28;
      v30 = 0;
    }
    sub_1000067D4(0, &qword_10028FB80, NSString_ptr);
    v33 = NSString.init(stringLiteral:)("recordBuildVersion", 18, 2);
    objc_msgSend(v28, "setObject:forKeyedSubscript:", v30, v33);

    swift_unknownObjectRelease(v30);
LABEL_13:

  }
  return v28;
}

uint64_t sub_100116F80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6[16] = a5;
  v6[17] = a6;
  v6[15] = a4;
  v7 = sub_1000080B4((uint64_t *)&unk_10028E7C0);
  v6[18] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v6[19] = v8;
  v6[20] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_1000080B4((uint64_t *)&unk_10028CC80);
  v6[21] = v9;
  v10 = *(_QWORD *)(v9 - 8);
  v6[22] = v10;
  v6[23] = swift_task_alloc((*(_QWORD *)(v10 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1000080B4(&qword_10028C060);
  v6[24] = v11;
  v12 = *(_QWORD *)(v11 - 8);
  v6[25] = v12;
  v6[26] = swift_task_alloc((*(_QWORD *)(v12 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  return swift_task_switch(sub_100117040, 0, 0);
}

uint64_t sub_100117040()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  Class isa;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  Class v22;
  Class v23;
  id v24;
  _QWORD *v25;
  uint64_t (*v26)(uint64_t);

  v1 = *(void **)(v0 + 120);
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + 128);
    v3 = v1;
    isa = Bool._bridgeToObjectiveC()().super.super.isa;
    objc_msgSend(v3, "setObject:forKeyedSubscript:", isa, kAAFDidSucceed);

    if (v2)
      v5 = (void *)_convertErrorToNSError(_:)(*(_QWORD *)(v0 + 128));
    else
      v5 = 0;
    v9 = *(_QWORD *)(v0 + 136);
    objc_msgSend(v3, "populateUnderlyingErrorsStartingWithRootError:", v5);

    swift_retain(v9);
    v10 = sub_1000174E0();
    if (v10)
    {
      v11 = v10;
      v13 = *(_QWORD *)(v0 + 200);
      v12 = *(_QWORD *)(v0 + 208);
      v14 = *(_QWORD *)(v0 + 192);
      v15 = *(_QWORD *)(v0 + 136);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(v12, v15 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck__akAccountManager, v14);
      Dependency.wrappedValue.getter((_QWORD *)(v0 + 112), v14);
      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
      v16 = *(void **)(v0 + 112);
      objc_msgSend(v16, "securityLevelForAccount:", v11);

    }
    else
    {
      v15 = *(_QWORD *)(v0 + 136);
    }
    swift_release(v15);
    v18 = *(_QWORD *)(v0 + 176);
    v17 = *(_QWORD *)(v0 + 184);
    v19 = *(_QWORD *)(v0 + 168);
    v20 = *(_QWORD *)(v0 + 136);
    v21 = *(void **)(v0 + 120);
    v22 = UInt._bridgeToObjectiveC()().super.super.isa;
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v22, kAAAnalyticsSecurityLevel);

    (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16))(v17, v20 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck__cdpController, v19);
    Dependency.wrappedValue.getter((_QWORD *)(v0 + 16), v19);
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v17, v19);
    sub_100048588();
    v23 = Bool._bridgeToObjectiveC()().super.super.isa;
    sub_100006F58((_QWORD *)(v0 + 16));
    objc_msgSend(v3, "setObject:forKeyedSubscript:", v23, kAAAnalyticsCdpStatus);

    v24 = v3;
    sub_100017700(v21);
    v26 = (uint64_t (*)(uint64_t))((char *)&dword_10028C178 + dword_10028C178);
    v25 = (_QWORD *)swift_task_alloc(unk_10028C17C);
    *(_QWORD *)(v0 + 216) = v25;
    *v25 = v0;
    v25[1] = sub_1001172E8;
    return v26(*(_QWORD *)(v0 + 120));
  }
  else
  {
    v6 = *(_QWORD *)(v0 + 184);
    v7 = *(_QWORD *)(v0 + 160);
    swift_task_dealloc(*(_QWORD *)(v0 + 208));
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

uint64_t sub_1001172E8()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(*(_QWORD *)v0 + 120);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 216));

  return swift_task_switch(sub_100117344, 0, 0);
}

uint64_t sub_100117344()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  _QWORD *v3;
  uint64_t (*v5)(uint64_t);

  v1 = unk_10028C174;
  v5 = (uint64_t (*)(uint64_t))((char *)&dword_10028C170 + dword_10028C170);
  v2 = *(id *)(v0 + 120);
  v3 = (_QWORD *)swift_task_alloc(v1);
  *(_QWORD *)(v0 + 224) = v3;
  *v3 = v0;
  v3[1] = sub_1001173B4;
  return v5(*(_QWORD *)(v0 + 120));
}

uint64_t sub_1001173B4()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(*(_QWORD *)v0 + 120);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 224));

  return swift_task_switch(sub_100117410, 0, 0);
}

uint64_t sub_100117410()
{
  uint64_t v0;
  _QWORD *v1;
  void *v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  NSObject *v7;
  uint8_t *v8;
  NSObject **v9;
  NSObject *v10;
  uint64_t v11;
  NSObject **v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  id v17;
  NSObject *v18;
  os_log_type_t v19;
  _BOOL4 v20;
  NSObject *v21;
  uint8_t *v22;
  NSObject **v23;
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;

  v1 = (_QWORD *)(v0 + 56);
  v29 = v0 + 104;
  if (qword_10028ADE0 != -1)
    swift_once(&qword_10028ADE0, sub_100046DA0);
  v2 = *(void **)(v0 + 120);
  v3 = type metadata accessor for Logger(0);
  sub_100005288(v3, (uint64_t)qword_1002A8A20);
  v4 = Logger.logObject.getter(v2);
  v5 = static os_log_type_t.debug.getter(v4);
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(NSObject **)(v0 + 120);
  if (v6)
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = (NSObject **)swift_slowAlloc(8, -1);
    *(_DWORD *)v8 = 138412290;
    *(_QWORD *)(v0 + 104) = v7;
    v10 = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v29, v0 + 112);
    *v9 = v7;

    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Reporting Preflight Event %@", v8, 0xCu);
    v11 = sub_1000080B4((uint64_t *)&unk_10028BC20);
    swift_arrayDestroy(v9, 1, v11);
    v12 = v9;
    v1 = (_QWORD *)(v0 + 56);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v8, -1, -1);
  }
  else
  {

    v4 = v7;
  }

  v14 = *(_QWORD *)(v0 + 152);
  v13 = *(_QWORD *)(v0 + 160);
  v15 = *(_QWORD *)(v0 + 144);
  v16 = *(void **)(v0 + 120);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v13, *(_QWORD *)(v0 + 136) + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck__analyticsRTCReporter, v15);
  Dependency.wrappedValue.getter(v1, v15);
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
  v17 = objc_msgSend((id)objc_opt_self(AAAnalyticsRTCReporter), "reporter");
  objc_msgSend(v17, "sendEvent:", v16);

  sub_100006F58(v1);
  v18 = Logger.logObject.getter(v16);
  v19 = static os_log_type_t.debug.getter(v18);
  v20 = os_log_type_enabled(v18, v19);
  v21 = *(NSObject **)(v0 + 120);
  if (v20)
  {
    v22 = (uint8_t *)swift_slowAlloc(12, -1);
    v23 = (NSObject **)swift_slowAlloc(8, -1);
    *(_DWORD *)v22 = 138412290;
    *(_QWORD *)(v0 + 96) = v21;
    v24 = v21;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 96, v29);
    *v23 = v21;

    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Reported Preflight Event successfully %@", v22, 0xCu);
    v25 = sub_1000080B4((uint64_t *)&unk_10028BC20);
    swift_arrayDestroy(v23, 1, v25);
    swift_slowDealloc(v23, -1, -1);
    swift_slowDealloc(v22, -1, -1);
  }
  else
  {

    v18 = v21;
    v24 = v21;
  }

  v26 = *(_QWORD *)(v0 + 184);
  v27 = *(_QWORD *)(v0 + 160);
  swift_task_dealloc(*(_QWORD *)(v0 + 208));
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10011777C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v1 = v0 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck__custodianStorage;
  v2 = sub_1000080B4(&qword_10028C448);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  v3 = v0 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck__securityController;
  v4 = sub_1000080B4(&qword_10028CCE0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  v5 = v0 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck__analyticsEventFactory;
  v6 = sub_1000080B4((uint64_t *)&unk_10028E7D0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  v7 = v0 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck__analyticsRTCReporter;
  v8 = sub_1000080B4((uint64_t *)&unk_10028E7C0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v7, v8);
  v9 = v0 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck__ttrRequester;
  v10 = sub_1000080B4(&qword_10028F650);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  v11 = v0 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck__urlBagProvider;
  v12 = sub_1000080B4(&qword_10028CCE8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 8))(v11, v12);
  v13 = v0 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck__storageController;
  v14 = sub_1000080B4(&qword_10028CCC0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 8))(v13, v14);
  v15 = v0 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck__keyRepair;
  v16 = sub_1000080B4(&qword_10028E840);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(v15, v16);
  v17 = v0 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck__accountStore;
  v18 = sub_1000080B4(&qword_10028FA50);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 8))(v17, v18);
  v19 = v0 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck__followUpController;
  v20 = sub_1000080B4(&qword_10028CD60);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 8))(v19, v20);
  v21 = v0 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck__akAccountManager;
  v22 = sub_1000080B4(&qword_10028C060);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 8))(v21, v22);
  v23 = v0 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck__cdpController;
  v24 = sub_1000080B4((uint64_t *)&unk_10028CC80);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 8))(v23, v24);
  swift_release(*(_QWORD *)(v0
                          + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck____lazy_storage___custodianDefaults));

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName + 8));
  return v0;
}

uint64_t sub_1001179DC()
{
  uint64_t v0;

  sub_10011777C();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_100117A00()
{
  return type metadata accessor for CustodianPreflightHealthCheck(0);
}

uint64_t type metadata accessor for CustodianPreflightHealthCheck(uint64_t a1)
{
  uint64_t result;

  result = qword_100292398;
  if (!qword_100292398)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for CustodianPreflightHealthCheck);
  return result;
}

void sub_100117A44(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _QWORD v26[16];

  sub_100017464(319, (unint64_t *)&qword_10028C350, &qword_10028C880);
  if (v3 <= 0x3F)
  {
    v26[0] = *(_QWORD *)(v2 - 8) + 64;
    sub_100017464(319, &qword_10028C868, (uint64_t *)&unk_10028C870);
    if (v5 <= 0x3F)
    {
      v26[1] = *(_QWORD *)(v4 - 8) + 64;
      sub_100017464(319, (unint64_t *)&qword_100293820, (uint64_t *)&unk_10028C900);
      if (v7 <= 0x3F)
      {
        v26[2] = *(_QWORD *)(v6 - 8) + 64;
        sub_100017464(319, qword_100293830, (uint64_t *)&unk_10028C910);
        if (v9 <= 0x3F)
        {
          v26[3] = *(_QWORD *)(v8 - 8) + 64;
          sub_100017464(319, &qword_10028F430, &qword_10028F438);
          if (v11 <= 0x3F)
          {
            v26[4] = *(_QWORD *)(v10 - 8) + 64;
            sub_100017464(319, &qword_10028C8D8, (uint64_t *)&unk_10028C8E0);
            if (v13 <= 0x3F)
            {
              v26[5] = *(_QWORD *)(v12 - 8) + 64;
              sub_100017464(319, &qword_10028C898, &qword_10028C8A0);
              if (v15 <= 0x3F)
              {
                v26[6] = *(_QWORD *)(v14 - 8) + 64;
                sub_100017464(319, &qword_10028E2B8, &qword_10028E2C0);
                if (v17 <= 0x3F)
                {
                  v26[7] = *(_QWORD *)(v16 - 8) + 64;
                  sub_100017464(319, (unint64_t *)&qword_100293810, &qword_10028C860);
                  if (v19 <= 0x3F)
                  {
                    v26[8] = *(_QWORD *)(v18 - 8) + 64;
                    sub_100017464(319, &qword_10028BDA0, (uint64_t *)&unk_10028C8F0);
                    if (v21 <= 0x3F)
                    {
                      v26[9] = *(_QWORD *)(v20 - 8) + 64;
                      sub_100017400(319);
                      if (v23 <= 0x3F)
                      {
                        v26[10] = *(_QWORD *)(v22 - 8) + 64;
                        sub_100017464(319, &qword_10028BDA8, &qword_10028C8D0);
                        if (v25 <= 0x3F)
                        {
                          v26[11] = *(_QWORD *)(v24 - 8) + 64;
                          v26[12] = "\b";
                          v26[13] = (char *)&value witness table for Builtin.UnknownObject + 64;
                          v26[14] = (char *)&value witness table for Builtin.Int64 + 64;
                          v26[15] = &unk_10021D528;
                          swift_updateClassMetadata2(a1, 256, 16, v26, a1 + 80);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

uint64_t sub_100117CC0(uint64_t a1, uint64_t a2, void (*a3)(_QWORD), uint64_t a4)
{
  return sub_10010B584(a1, a2, a3, a4);
}

uint64_t sub_100117CE0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100117CF0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1001164AC(a1, *(_QWORD *)(v2 + 16), a2);
}

uint64_t sub_100117D08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  int *v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  int *v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v29;

  v1 = type metadata accessor for CustodianshipRecords(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v29 = *(_QWORD *)(v2 + 64);
  swift_release(*(_QWORD *)(v0 + 16));
  v4 = v0 + ((v3 + 24) & ~v3);
  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v7(v4, v5);
  v8 = (int *)type metadata accessor for CustodianRecord(0);
  v7(v4 + v8[5], v5);
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v8[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v8[7] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v8[8] + 8));
  v9 = (uint64_t *)(v4 + v8[10]);
  v10 = v9[1];
  if (v10 >> 60 != 15)
    sub_10000F494(*v9, v10);
  sub_10000F494(*(_QWORD *)(v4 + v8[11]), *(_QWORD *)(v4 + v8[11] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v8[13] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v8[14] + 8));
  v11 = v4 + v8[16];
  v12 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (!v12(v11, 1, v5))
    v7(v11, v5);
  v13 = v4 + *(int *)(v1 + 20);
  v7(v13, v5);
  v14 = (int *)type metadata accessor for CustodianRecoveryInfoRecord(0);
  v7(v13 + v14[5], v5);
  swift_bridgeObjectRelease(*(_QWORD *)(v13 + v14[6] + 8));
  sub_10000F494(*(_QWORD *)(v13 + v14[7]), *(_QWORD *)(v13 + v14[7] + 8));
  v15 = (uint64_t *)(v13 + v14[8]);
  v16 = v15[1];
  if (v16 >> 60 != 15)
    sub_10000F494(*v15, v16);
  sub_10000F494(*(_QWORD *)(v13 + v14[9]), *(_QWORD *)(v13 + v14[9] + 8));
  v17 = v13 + v14[11];
  if (!v12(v17, 1, v5))
    v7(v17, v5);
  swift_bridgeObjectRelease(*(_QWORD *)(v13 + v14[12] + 8));
  v18 = v4 + *(int *)(v1 + 24);
  v7(v18, v5);
  v19 = (int *)type metadata accessor for CustodianHealthRecord(0);
  v7(v18 + v19[5], v5);
  v20 = v18 + v19[6];
  v21 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 8))(v20, v21);
  v22 = (uint64_t *)(v18 + v19[7]);
  v23 = v22[1];
  if (v23 >> 60 != 15)
    sub_10000F494(*v22, v23);
  v24 = (v29 + ((v3 + 24) & ~v3) + 7) & 0xFFFFFFFFFFFFFFF8;
  v25 = (v24 + 23) & 0xFFFFFFFFFFFFFFF8;
  v26 = (v25 + 23) & 0xFFFFFFFFFFFFFFF8;
  v27 = (v26 + 15) & 0xFFFFFFFFFFFFFFF8;
  sub_10000F494(*(_QWORD *)(v18 + v19[8]), *(_QWORD *)(v18 + v19[8] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v24 + 8));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + v25));

  swift_release(*(_QWORD *)(v0 + v27 + 8));
  return swift_deallocObject(v0, v27 + 16, v3 | 7);
}

uint64_t sub_100118004(char a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;

  v5 = *(_QWORD *)(type metadata accessor for CustodianshipRecords(0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = (*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  v8 = (v7 + 23) & 0xFFFFFFFFFFFFFFF8;
  return sub_100112970(a1, a2, *(_QWORD *)(v2 + 16), v2 + v6, *(_QWORD *)(v2 + v7), *(_QWORD *)(v2 + v7 + 8), *(_QWORD *)(v2 + v8), *(_QWORD *)(v2 + v8 + 8), *(void **)(v2 + ((v8 + 23) & 0xFFFFFFFFFFFFFFF8)), *(void (**)(uint64_t))(v2 + ((((v8 + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)), *(void (**)(uint64_t))(v2 + ((((v8 + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
}

unint64_t sub_1001180AC(unint64_t result)
{
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  if (result)
  {
    v1 = result;
    v3 = 0;
    swift_stdlib_random(&v3, 8);
    result = (v3 * (unsigned __int128)v1) >> 64;
    if (v3 * v1 < v1)
    {
      v2 = -(uint64_t)v1 % v1;
      if (v2 > v3 * v1)
      {
        do
        {
          v3 = 0;
          swift_stdlib_random(&v3, 8);
        }
        while (v2 > v3 * v1);
        return (v3 * (unsigned __int128)v1) >> 64;
      }
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

unint64_t *sub_100118134(uint64_t isStackAllocationSafe, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  char v4;
  unsigned int v5;
  unint64_t v6;
  uint64_t v7;
  size_t v8;
  unint64_t *v9;
  void *v10;
  uint64_t v12;

  v3 = (unint64_t *)isStackAllocationSafe;
  v4 = *(_BYTE *)(isStackAllocationSafe + 32);
  v5 = v4 & 0x3F;
  v6 = (1 << v4) + 63;
  v7 = v6 >> 6;
  v8 = 8 * (v6 >> 6);
  if (v5 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v6 >> 6), 8), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe, a2);
    bzero((char *)&v12 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0), v8);
    v9 = sub_100118284((unint64_t *)((char *)&v12 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0)), v7, (uint64_t)v3);
    if (v2)
      swift_willThrow(v9);
    else
      return v9;
  }
  else
  {
    v10 = (void *)swift_slowAlloc(v8, -1);
    bzero(v10, v8);
    v3 = sub_100118284((unint64_t *)v10, v7, (uint64_t)v3);
    swift_slowDealloc(v10, -1, -1);
  }
  return v3;
}

unint64_t *sub_100118284(unint64_t *result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;

  v4 = 0;
  v5 = 0;
  v6 = a3 + 64;
  v7 = 1 << *(_BYTE *)(a3 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & *(_QWORD *)(a3 + 64);
  v10 = (unint64_t)(v7 + 63) >> 6;
  while (1)
  {
    if (v9)
    {
      v11 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v12 = v11 | (v5 << 6);
      goto LABEL_5;
    }
    v13 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v13 >= v10)
      return (unint64_t *)sub_1001183CC(result, a2, v4, a3);
    v14 = *(_QWORD *)(v6 + 8 * v13);
    ++v5;
    if (!v14)
    {
      v5 = v13 + 1;
      if (v13 + 1 >= v10)
        return (unint64_t *)sub_1001183CC(result, a2, v4, a3);
      v14 = *(_QWORD *)(v6 + 8 * v5);
      if (!v14)
      {
        v5 = v13 + 2;
        if (v13 + 2 >= v10)
          return (unint64_t *)sub_1001183CC(result, a2, v4, a3);
        v14 = *(_QWORD *)(v6 + 8 * v5);
        if (!v14)
          break;
      }
    }
LABEL_20:
    v9 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v5 << 6);
LABEL_5:
    if ((*(_BYTE *)(*(_QWORD *)(a3 + 56) + v12) & 1) == 0)
    {
      *(unint64_t *)((char *)result + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      if (__OFADD__(v4++, 1))
      {
        __break(1u);
        return (unint64_t *)sub_1001183CC(result, a2, v4, a3);
      }
    }
  }
  v15 = v13 + 3;
  if (v15 >= v10)
    return (unint64_t *)sub_1001183CC(result, a2, v4, a3);
  v14 = *(_QWORD *)(v6 + 8 * v15);
  if (v14)
  {
    v5 = v15;
    goto LABEL_20;
  }
  while (1)
  {
    v5 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v5 >= v10)
      return (unint64_t *)sub_1001183CC(result, a2, v4, a3);
    v14 = *(_QWORD *)(v6 + 8 * v5);
    ++v15;
    if (v14)
      goto LABEL_20;
  }
LABEL_26:
  __break(1u);
  return result;
}

Swift::Int sub_1001183CC(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  Swift::Int result;
  Swift::Int v8;
  unint64_t v9;
  uint64_t v10;
  Swift::Int v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  unint64_t v26;
  BOOL v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v31;
  _QWORD v33[9];

  if (!a3)
    return (Swift::Int)&_swiftEmptyDictionarySingleton;
  v4 = a4;
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
  {
    swift_retain(a4);
    return v4;
  }
  sub_1000080B4(&qword_10028C150);
  result = static _DictionaryStorage.allocate(capacity:)(v5);
  v8 = result;
  v31 = a2;
  if (a2 < 1)
    v9 = 0;
  else
    v9 = *a1;
  v10 = 0;
  v11 = result + 64;
  while (1)
  {
    if (v9)
    {
      v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v13 = v12 | (v10 << 6);
    }
    else
    {
      v14 = v10 + 1;
      if (__OFADD__(v10, 1))
        goto LABEL_40;
      if (v14 >= v31)
        return v8;
      v15 = a1[v14];
      ++v10;
      if (!v15)
      {
        v10 = v14 + 1;
        if (v14 + 1 >= v31)
          return v8;
        v15 = a1[v10];
        if (!v15)
        {
          v10 = v14 + 2;
          if (v14 + 2 >= v31)
            return v8;
          v15 = a1[v10];
          if (!v15)
          {
            v16 = v14 + 3;
            if (v16 >= v31)
              return v8;
            v15 = a1[v16];
            if (!v15)
            {
              while (1)
              {
                v10 = v16 + 1;
                if (__OFADD__(v16, 1))
                  goto LABEL_41;
                if (v10 >= v31)
                  return v8;
                v15 = a1[v10];
                ++v16;
                if (v15)
                  goto LABEL_24;
              }
            }
            v10 = v16;
          }
        }
      }
LABEL_24:
      v9 = (v15 - 1) & v15;
      v13 = __clz(__rbit64(v15)) + (v10 << 6);
    }
    v17 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 16 * v13);
    v19 = *v17;
    v18 = v17[1];
    v20 = *(_BYTE *)(*(_QWORD *)(v4 + 56) + v13);
    Hasher.init(_seed:)(v33);
    swift_bridgeObjectRetain(v18);
    String.hash(into:)(v33, v19, v18);
    result = Hasher._finalize()();
    v21 = -1 << *(_BYTE *)(v8 + 32);
    v22 = result & ~v21;
    v23 = v22 >> 6;
    if (((-1 << v22) & ~*(_QWORD *)(v11 + 8 * (v22 >> 6))) != 0)
    {
      v24 = __clz(__rbit64((-1 << v22) & ~*(_QWORD *)(v11 + 8 * (v22 >> 6)))) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v25 = 0;
      v26 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v26 && (v25 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v27 = v23 == v26;
        if (v23 == v26)
          v23 = 0;
        v25 |= v27;
        v28 = *(_QWORD *)(v11 + 8 * v23);
      }
      while (v28 == -1);
      v24 = __clz(__rbit64(~v28)) + (v23 << 6);
    }
    *(_QWORD *)(v11 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v24;
    v29 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v24);
    *v29 = v19;
    v29[1] = v18;
    *(_BYTE *)(*(_QWORD *)(v8 + 56) + v24) = v20;
    ++*(_QWORD *)(v8 + 16);
    if (__OFSUB__(v5--, 1))
      break;
    if (!v5)
      return v8;
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_100118670(uint64_t isStackAllocationSafe, uint64_t a2)
{
  uint64_t v3;
  char v4;
  unsigned int v5;
  unint64_t v6;
  uint64_t v7;
  size_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v14;

  v3 = isStackAllocationSafe;
  v4 = *(_BYTE *)(a2 + 32);
  v5 = v4 & 0x3F;
  v6 = (1 << v4) + 63;
  v7 = v6 >> 6;
  v8 = 8 * (v6 >> 6);
  if (v5 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v6 >> 6), 8), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe, a2);
    bzero((char *)&v14 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0), v8);
    sub_1001187F0((unint64_t *)((char *)&v14 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0)), v7, v3, a2);
    v10 = v9;
    swift_release(a2);
  }
  else
  {
    v11 = (void *)swift_slowAlloc(v8, -1);
    bzero(v11, v8);
    sub_1001187F0((unint64_t *)v11, v7, v3, a2);
    v10 = v12;
    swift_release(a2);
    swift_slowDealloc(v11, -1, -1);
  }
  return v10;
}

void sub_1001187F0(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  Swift::Int v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  BOOL v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t i;
  unint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v34;
  uint64_t v36;
  int64_t v37;
  _QWORD v40[9];
  uint64_t v41;

  v36 = a3 + 64;
  v4 = 1 << *(_BYTE *)(a3 + 32);
  if (v4 < 64)
    v5 = ~(-1 << v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(a3 + 64);
  v37 = (unint64_t)(v4 + 63) >> 6;
  v41 = a4 + 56;
  swift_bridgeObjectRetain(a3);
  v7 = 0;
  v8 = 0;
LABEL_5:
  v34 = v7;
  while (1)
  {
    if (v6)
    {
      v9 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v10 = v9 | (v8 << 6);
      goto LABEL_25;
    }
    v11 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_48;
    }
    if (v11 >= v37)
      goto LABEL_46;
    v12 = *(_QWORD *)(v36 + 8 * v11);
    ++v8;
    if (!v12)
    {
      v8 = v11 + 1;
      if (v11 + 1 >= v37)
        goto LABEL_46;
      v12 = *(_QWORD *)(v36 + 8 * v8);
      if (!v12)
      {
        v8 = v11 + 2;
        if (v11 + 2 >= v37)
          goto LABEL_46;
        v12 = *(_QWORD *)(v36 + 8 * v8);
        if (!v12)
        {
          v8 = v11 + 3;
          if (v11 + 3 >= v37)
            goto LABEL_46;
          v12 = *(_QWORD *)(v36 + 8 * v8);
          if (!v12)
            break;
        }
      }
    }
LABEL_24:
    v6 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v8 << 6);
LABEL_25:
    v14 = (uint64_t *)(*(_QWORD *)(a3 + 48) + 16 * v10);
    v16 = *v14;
    v15 = v14[1];
    Hasher.init(_seed:)(v40);
    swift_bridgeObjectRetain(v15);
    String.hash(into:)(v40, v16, v15);
    v17 = Hasher._finalize()();
    v18 = -1 << *(_BYTE *)(a4 + 32);
    v19 = v17 & ~v18;
    v20 = v19 >> 6;
    v21 = 1 << v19;
    if (((1 << v19) & *(_QWORD *)(v41 + 8 * (v19 >> 6))) == 0)
      goto LABEL_6;
    v22 = *(_QWORD *)(a4 + 48);
    v23 = (_QWORD *)(v22 + 16 * v19);
    v24 = v23[1];
    v25 = *v23 == v16 && v24 == v15;
    if (v25 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v23, v24, v16, v15, 0) & 1) != 0)
    {
      swift_bridgeObjectRelease(v15);
LABEL_32:
      v26 = a1[v20];
      a1[v20] = v21 | v26;
      if ((v21 & v26) == 0)
      {
        v7 = v34 + 1;
        if (!__OFADD__(v34, 1))
          goto LABEL_5;
        __break(1u);
LABEL_46:
        swift_release(a3);
        swift_retain(a4);
        sub_100118AFC(a1, a2, v34, a4);
        return;
      }
    }
    else
    {
      v27 = ~v18;
      for (i = v19 + 1; ; i = v29 + 1)
      {
        v29 = i & v27;
        if (((*(_QWORD *)(v41 + (((i & v27) >> 3) & 0xFFFFFFFFFFFFF8)) >> (i & v27)) & 1) == 0)
          break;
        v30 = (_QWORD *)(v22 + 16 * v29);
        v31 = v30[1];
        v32 = *v30 == v16 && v31 == v15;
        if (v32 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v30, v31, v16, v15, 0) & 1) != 0)
        {
          swift_bridgeObjectRelease(v15);
          v20 = v29 >> 6;
          v21 = 1 << v29;
          goto LABEL_32;
        }
      }
LABEL_6:
      swift_bridgeObjectRelease(v15);
    }
  }
  v13 = v11 + 4;
  if (v13 >= v37)
    goto LABEL_46;
  v12 = *(_QWORD *)(v36 + 8 * v13);
  if (v12)
  {
    v8 = v13;
    goto LABEL_24;
  }
  while (1)
  {
    v8 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v8 >= v37)
      goto LABEL_46;
    v12 = *(_QWORD *)(v36 + 8 * v8);
    ++v13;
    if (v12)
      goto LABEL_24;
  }
LABEL_48:
  __break(1u);
}

Swift::Int sub_100118AFC(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  Swift::Int result;
  _BYTE *v8;
  unint64_t v9;
  uint64_t v10;
  Swift::Int v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v30;
  _QWORD v32[9];

  v4 = a4;
  if (!a3)
  {
    v8 = &_swiftEmptySetSingleton;
LABEL_36:
    swift_release(v4);
    return (Swift::Int)v8;
  }
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
    return v4;
  sub_1000080B4(&qword_1002927F0);
  result = static _SetStorage.allocate(capacity:)(v5);
  v8 = (_BYTE *)result;
  v30 = a2;
  if (a2 < 1)
    v9 = 0;
  else
    v9 = *a1;
  v10 = 0;
  v11 = result + 56;
  while (1)
  {
    if (v9)
    {
      v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v13 = v12 | (v10 << 6);
      goto LABEL_24;
    }
    v14 = v10 + 1;
    if (__OFADD__(v10, 1))
      goto LABEL_39;
    if (v14 >= v30)
      goto LABEL_36;
    v15 = a1[v14];
    ++v10;
    if (!v15)
    {
      v10 = v14 + 1;
      if (v14 + 1 >= v30)
        goto LABEL_36;
      v15 = a1[v10];
      if (!v15)
      {
        v10 = v14 + 2;
        if (v14 + 2 >= v30)
          goto LABEL_36;
        v15 = a1[v10];
        if (!v15)
          break;
      }
    }
LABEL_23:
    v9 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_24:
    v17 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 16 * v13);
    v18 = *v17;
    v19 = v17[1];
    Hasher.init(_seed:)(v32);
    swift_bridgeObjectRetain(v19);
    String.hash(into:)(v32, v18, v19);
    result = Hasher._finalize()();
    v20 = -1 << v8[32];
    v21 = result & ~v20;
    v22 = v21 >> 6;
    if (((-1 << v21) & ~*(_QWORD *)(v11 + 8 * (v21 >> 6))) != 0)
    {
      v23 = __clz(__rbit64((-1 << v21) & ~*(_QWORD *)(v11 + 8 * (v21 >> 6)))) | v21 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v20) >> 6;
      do
      {
        if (++v22 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v26 = v22 == v25;
        if (v22 == v25)
          v22 = 0;
        v24 |= v26;
        v27 = *(_QWORD *)(v11 + 8 * v22);
      }
      while (v27 == -1);
      v23 = __clz(__rbit64(~v27)) + (v22 << 6);
    }
    *(_QWORD *)(v11 + ((v23 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v23;
    v28 = (_QWORD *)(*((_QWORD *)v8 + 6) + 16 * v23);
    *v28 = v18;
    v28[1] = v19;
    ++*((_QWORD *)v8 + 2);
    if (__OFSUB__(v5--, 1))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (!v5)
      goto LABEL_36;
  }
  v16 = v14 + 3;
  if (v16 >= v30)
    goto LABEL_36;
  v15 = a1[v16];
  if (v15)
  {
    v10 = v16;
    goto LABEL_23;
  }
  while (1)
  {
    v10 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v10 >= v30)
      goto LABEL_36;
    v15 = a1[v10];
    ++v16;
    if (v15)
      goto LABEL_23;
  }
LABEL_40:
  __break(1u);
  return result;
}

_QWORD *sub_100118D90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD *result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  char v24;
  _QWORD *v25;
  unint64_t v26;
  unint64_t v27;
  _QWORD v28[2];
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;

  v31 = type metadata accessor for CustodianRecord(0);
  v8 = __chkstk_darwin(v31, v7);
  v32 = (uint64_t)v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8, v10);
  v13 = (char *)v28 - v12;
  result = _swiftEmptyArrayStorage;
  v33 = _swiftEmptyArrayStorage;
  v15 = *(_QWORD *)(a1 + 16);
  if (v15)
  {
    v16 = *(unsigned __int8 *)(v11 + 80);
    v17 = *(_QWORD *)(v11 + 72);
    v28[1] = v3;
    v29 = (v16 + 32) & ~v16;
    v18 = a1 + v29;
    v30 = a2;
    while (1)
    {
      v19 = sub_100027FE8(v18, (uint64_t)v13, type metadata accessor for CustodianRecord);
      v20 = UUID.uuidString.getter(v19);
      if (v20 == a2 && v21 == a3)
        break;
      v23 = v21;
      v24 = _stringCompareWithSmolCheck(_:_:expecting:)(v20, v21, a2, a3, 0);
      swift_bridgeObjectRelease(v23);
      if ((v24 & 1) != 0)
        goto LABEL_12;
      sub_100028388((uint64_t)v13, type metadata accessor for CustodianRecord);
LABEL_4:
      v18 += v17;
      if (!--v15)
        return v33;
    }
    swift_bridgeObjectRelease(a3);
LABEL_12:
    sub_10003B730((uint64_t)v13, v32, type metadata accessor for CustodianRecord);
    v25 = v33;
    if ((swift_isUniquelyReferenced_nonNull_native(v33) & 1) == 0)
    {
      sub_1001D4CAC(0, v25[2] + 1, 1);
      v25 = v33;
    }
    v27 = v25[2];
    v26 = v25[3];
    if (v27 >= v26 >> 1)
    {
      sub_1001D4CAC(v26 > 1, v27 + 1, 1);
      v25 = v33;
    }
    v25[2] = v27 + 1;
    sub_10003B730(v32, (uint64_t)v25 + v29 + v27 * v17, type metadata accessor for CustodianRecord);
    a2 = v30;
    goto LABEL_4;
  }
  return result;
}

uint64_t sub_100118F84(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t i;
  unint64_t v16;
  int64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v27;
  int64_t v28;
  uint64_t v29[2];
  _QWORD *v30;

  v4 = a3;
  v5 = a2;
  v6 = result;
  v7 = 0;
  v8 = *(_QWORD *)(result + 64);
  v27 = result + 64;
  v9 = 1 << *(_BYTE *)(result + 32);
  v10 = -1;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  v11 = v10 & v8;
  v28 = (unint64_t)(v9 + 63) >> 6;
  v12 = _swiftEmptyArrayStorage;
  if ((v10 & v8) != 0)
    goto LABEL_6;
LABEL_7:
  if (__OFADD__(v7++, 1))
  {
    __break(1u);
    goto LABEL_36;
  }
  if (v7 >= v28)
    goto LABEL_33;
  v16 = *(_QWORD *)(v27 + 8 * v7);
  if (v16)
    goto LABEL_19;
  v17 = v7 + 1;
  if (v7 + 1 >= v28)
    goto LABEL_33;
  v16 = *(_QWORD *)(v27 + 8 * v17);
  if (v16)
  {
LABEL_18:
    v7 = v17;
LABEL_19:
    v11 = (v16 - 1) & v16;
    for (i = __clz(__rbit64(v16)) + (v7 << 6); ; i = v13 | (v7 << 6))
    {
      v18 = (uint64_t *)(*(_QWORD *)(v6 + 48) + 16 * i);
      v19 = *v18;
      v20 = v18[1];
      v29[0] = *v18;
      v29[1] = v20;
      swift_bridgeObjectRetain(v20);
      v21 = sub_10010E66C(v29, v5, v4);
      if (v3)
        break;
      if (v21)
      {
        result = swift_isUniquelyReferenced_nonNull_native(v12);
        v30 = v12;
        if ((result & 1) == 0)
        {
          result = sub_1001D4B98(0, v12[2] + 1, 1);
          v12 = v30;
        }
        v23 = v12[2];
        v22 = v12[3];
        if (v23 >= v22 >> 1)
        {
          result = sub_1001D4B98(v22 > 1, v23 + 1, 1);
          v12 = v30;
        }
        v12[2] = v23 + 1;
        v24 = &v12[2 * v23];
        v24[4] = v19;
        v24[5] = v20;
        v5 = a2;
        v4 = a3;
        if (!v11)
          goto LABEL_7;
      }
      else
      {
        result = swift_bridgeObjectRelease(v20);
        if (!v11)
          goto LABEL_7;
      }
LABEL_6:
      v13 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
    }
    swift_release(v12);
    swift_release(v6);
    swift_bridgeObjectRelease(v20);
    return (uint64_t)v12;
  }
  v17 = v7 + 2;
  if (v7 + 2 >= v28)
  {
LABEL_33:
    swift_release(v6);
    return (uint64_t)v12;
  }
  v16 = *(_QWORD *)(v27 + 8 * v17);
  if (v16)
    goto LABEL_18;
  v17 = v7 + 3;
  if (v7 + 3 >= v28)
    goto LABEL_33;
  v16 = *(_QWORD *)(v27 + 8 * v17);
  if (v16)
    goto LABEL_18;
  v17 = v7 + 4;
  if (v7 + 4 >= v28)
    goto LABEL_33;
  v16 = *(_QWORD *)(v27 + 8 * v17);
  if (v16)
    goto LABEL_18;
  while (1)
  {
    v7 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v7 >= v28)
      goto LABEL_33;
    v16 = *(_QWORD *)(v27 + 8 * v7);
    ++v17;
    if (v16)
      goto LABEL_19;
  }
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_1001191F8(uint64_t a1, uint64_t a2, void (*a3)(_QWORD), uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  _QWORD *v17;
  void (*v18)(char *, uint64_t, uint64_t);
  void (*v19)(char *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  __n128 v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint8_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  id v57;
  __n128 v58;
  unint64_t v59;
  char v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  NSObject *v69;
  os_log_type_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  __n128 v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  const __CFString *v79;
  __CFString *v80;
  CFPropertyListRef v81;
  uint64_t v82;
  NSObject *v83;
  os_log_type_t v84;
  uint8_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  NSObject *v95;
  os_log_type_t v96;
  BOOL v97;
  uint8_t *v98;
  uint64_t result;
  uint8_t *v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  void (*v107)(uint64_t, uint64_t (*)(char, uint64_t), uint64_t, uint64_t, uint64_t);
  _QWORD *v108;
  uint64_t v109;
  void (*v110)(char *, uint64_t);
  uint64_t v111;
  void (*v112)(char *, uint64_t, uint64_t);
  char *v113;
  uint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  void (*v119)(_QWORD);
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  _QWORD *v126;
  __int128 v127;
  __int128 v128;
  void *v129;
  uint64_t v130[3];
  uint64_t v131;
  uint64_t v132;

  v12 = sub_1000080B4(&qword_10028CD60);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12, v14);
  v16 = (char *)&v109 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = (_QWORD *)swift_allocObject(&unk_100268610, 56, 7);
  v17[2] = a2;
  v17[3] = a3;
  v17[4] = a4;
  v17[5] = a5;
  v17[6] = a6;
  v122 = a1;
  v18 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  v111 = a1 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck__followUpController;
  v112 = v18;
  ((void (*)(char *))v18)(v16);
  swift_retain(a2);
  swift_retain(a4);
  v120 = a6;
  swift_bridgeObjectRetain(a6);
  Dependency.wrappedValue.getter(v130, v12);
  v19 = *(void (**)(char *, uint64_t))(v13 + 8);
  v113 = v16;
  v114 = v12;
  v110 = v19;
  v19(v16, v12);
  v20 = v131;
  v21 = v132;
  sub_10000732C(v130, v131);
  v22 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(v21 + 64))(AAFollowUpIdentifierCustodianReview, v20, v21);
  v119 = a3;
  if (!v22)
  {
    sub_100006F58(v130);
    if (qword_10028ADE0 != -1)
      swift_once(&qword_10028ADE0, sub_100046DA0);
    v39 = type metadata accessor for Logger(0);
    sub_100005288(v39, (uint64_t)qword_1002A8A20);
    v40 = v122;
    v41 = swift_retain(v122);
    v42 = Logger.logObject.getter(v41);
    v43 = static os_log_type_t.debug.getter(v42);
    if (os_log_type_enabled(v42, v43))
    {
      v116 = a4;
      v44 = (uint8_t *)swift_slowAlloc(12, -1);
      v45 = swift_slowAlloc(32, -1);
      v118 = a2;
      v46 = v45;
      v130[0] = v45;
      *(_DWORD *)v44 = 136315138;
      v117 = a5;
      v47 = *(_QWORD *)(v40 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName);
      v48 = *(_QWORD *)(v40 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName + 8);
      swift_bridgeObjectRetain(v48);
      *(_QWORD *)&v127 = sub_1001DEF4C(v47, v48, v130);
      a4 = v116;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v127, (char *)&v127 + 8);
      swift_release(v40);
      v49 = v48;
      a5 = v117;
      swift_bridgeObjectRelease(v49);
      _os_log_impl((void *)&_mh_execute_header, v42, v43, "%s - No pending custodian review follow up found", v44, 0xCu);
      swift_arrayDestroy(v46, 1, (char *)&type metadata for Any + 8);
      v50 = v46;
      a2 = v118;
      swift_slowDealloc(v50, -1, -1);
      swift_slowDealloc(v44, -1, -1);

    }
    else
    {

      swift_release(v40);
    }
    sub_10010B7A4(0, 0, a2, v119, a4, a5, v120);
    v108 = v17;
    return swift_release(v108);
  }
  v23 = v22;
  sub_100006F58(v130);
  if (qword_10028ADE0 != -1)
    swift_once(&qword_10028ADE0, sub_100046DA0);
  v24 = type metadata accessor for Logger(0);
  v25 = sub_100005288(v24, (uint64_t)qword_1002A8A20);
  v26 = v122;
  swift_retain_n(v122, 2);
  v27 = swift_bridgeObjectRetain_n(v23, 2);
  v121 = v25;
  v28 = Logger.logObject.getter(v27);
  v29 = static os_log_type_t.info.getter();
  v30 = os_log_type_enabled(v28, v29);
  v115 = v17;
  v116 = a4;
  v117 = a5;
  v118 = a2;
  if (v30)
  {
    v31 = swift_slowAlloc(22, -1);
    v32 = swift_slowAlloc(64, -1);
    v130[0] = v32;
    *(_DWORD *)v31 = 136315394;
    v33 = *(_QWORD *)(v122 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName);
    v34 = *(_QWORD *)(v122 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName + 8);
    swift_bridgeObjectRetain(v34);
    *(_QWORD *)&v127 = sub_1001DEF4C(v33, v34, v130);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v127, (char *)&v127 + 8);
    swift_release_n(v122, 2);
    swift_bridgeObjectRelease(v34);
    *(_WORD *)(v31 + 12) = 2080;
    swift_bridgeObjectRetain(v23);
    sub_1000080B4(&qword_100291020);
    v36 = Array.description.getter(v35);
    v38 = v37;
    swift_bridgeObjectRelease(v23);
    *(_QWORD *)&v127 = sub_1001DEF4C(v36, v38, v130);
    v26 = v122;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v127, (char *)&v127 + 8);
    swift_bridgeObjectRelease_n(v23, 2);
    swift_bridgeObjectRelease(v38);
    _os_log_impl((void *)&_mh_execute_header, v28, v29, "%s - Pending custodian review follow up userInfo dictionaries: %s", (uint8_t *)v31, 0x16u);
    swift_arrayDestroy(v32, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v32, -1, -1);
    swift_slowDealloc(v31, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v23, 2);
    swift_release_n(v26, 2);
  }
  v129 = &_swiftEmptySetSingleton;
  v125 = *(_QWORD *)(v23 + 16);
  if (v125)
  {
    v124 = v23 + 32;
    v109 = v23;
    swift_bridgeObjectRetain(v23);
    type metadata accessor for AAFollowUpUserInfo(0);
    v52 = v51;
    v53 = sub_100005150((unint64_t *)&qword_10028B6D8, (uint64_t (*)(uint64_t))type metadata accessor for AAFollowUpUserInfo, (uint64_t)&unk_1002180F4);
    v54 = 0;
    v123 = (char *)&type metadata for Any + 8;
    while (1)
    {
      v55 = *(_QWORD *)(v124 + 8 * v54);
      v56 = (void *)AAFollowUpTrustedContactIDs;
      *(_QWORD *)&v127 = AAFollowUpTrustedContactIDs;
      swift_bridgeObjectRetain(v55);
      v57 = v56;
      AnyHashable.init<A>(_:)(v130, &v127, v52, v53, v58);
      if (*(_QWORD *)(v55 + 16) && (v59 = sub_10010AAE0((uint64_t)v130), (v60 & 1) != 0))
      {
        sub_1000244B0(*(_QWORD *)(v55 + 56) + 32 * v59, (uint64_t)&v127);
      }
      else
      {
        v127 = 0u;
        v128 = 0u;
      }
      sub_1000839B4((uint64_t)v130);
      if (*((_QWORD *)&v128 + 1))
      {
        v61 = sub_1000080B4((uint64_t *)&unk_10028E800);
        if ((swift_dynamicCast(&v126, &v127, v123, v61, 6) & 1) != 0)
        {
          v62 = v126;
          v63 = v126[2];
          if (v63)
            goto LABEL_24;
          goto LABEL_13;
        }
      }
      else
      {
        sub_100004934((uint64_t)&v127, (uint64_t *)&unk_10028E7E0);
      }
      v62 = _swiftEmptyArrayStorage;
      v63 = _swiftEmptyArrayStorage[2];
      if (v63)
      {
LABEL_24:
        v64 = v62 + 5;
        do
        {
          v66 = *(v64 - 1);
          v65 = *v64;
          swift_bridgeObjectRetain(*v64);
          sub_1001F3A5C(v130, v66, v65);
          swift_bridgeObjectRelease(v130[1]);
          v64 += 2;
          --v63;
        }
        while (v63);
      }
LABEL_13:
      swift_bridgeObjectRelease(v55);
      ++v54;
      swift_bridgeObjectRelease(v62);
      if (v54 == v125)
      {
        swift_bridgeObjectRelease_n(v109, 2);
        v67 = v129;
        v26 = v122;
        goto LABEL_29;
      }
    }
  }
  swift_bridgeObjectRelease(v23);
  v67 = &_swiftEmptySetSingleton;
LABEL_29:
  swift_retain_n(v26, 2);
  swift_bridgeObjectRetain(v67);
  v69 = Logger.logObject.getter(v68);
  v70 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v69, v70))
  {
    v71 = swift_slowAlloc(22, -1);
    v72 = swift_slowAlloc(64, -1);
    v130[0] = v72;
    *(_DWORD *)v71 = 136315394;
    v73 = *(_QWORD *)(v26 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName);
    v74 = *(_QWORD *)(v26 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName + 8);
    swift_bridgeObjectRetain(v74);
    *(_QWORD *)&v127 = sub_1001DEF4C(v73, v74, v130);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v127, (char *)&v127 + 8);
    swift_release_n(v26, 2);
    swift_bridgeObjectRelease(v74);
    *(_WORD *)(v71 + 12) = 2080;
    v75 = swift_bridgeObjectRetain(v67);
    v76 = Set.description.getter(v75);
    v78 = v77;
    swift_bridgeObjectRelease(v67);
    *(_QWORD *)&v127 = sub_1001DEF4C(v76, v78, v130);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v127, (char *)&v127 + 8);
    swift_bridgeObjectRelease_n(v67, 2);
    swift_bridgeObjectRelease(v78);
    _os_log_impl((void *)&_mh_execute_header, v69, v70, "%s - Checking if pending custodian review follow up needs to be dismissed for custodians: %s", (uint8_t *)v71, 0x16u);
    swift_arrayDestroy(v72, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v72, -1, -1);
    swift_slowDealloc(v71, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v67, 2);
    swift_release_n(v26, 2);
  }
  v79 = (const __CFString *)String._bridgeToObjectiveC()();
  if (!AAPrefsDomain)
  {
    swift_bridgeObjectRelease(v120);
    swift_release(v116);
    result = swift_release(v118);
    __break(1u);
    return result;
  }
  v80 = (__CFString *)v79;
  v81 = CFPreferencesCopyAppValue(v79, AAPrefsDomain);

  v82 = swift_unknownObjectRetain_n(v81, 2);
  v83 = Logger.logObject.getter(v82);
  v84 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v83, v84))
  {
    v85 = (uint8_t *)swift_slowAlloc(12, -1);
    v86 = swift_slowAlloc(32, -1);
    v130[0] = v86;
    *(_DWORD *)v85 = 136315138;
    *(_QWORD *)&v127 = v81;
    swift_unknownObjectRetain(v81);
    v87 = sub_1000080B4(&qword_100292800);
    v88 = String.init<A>(describing:)(&v127, v87);
    v90 = v89;
    *(_QWORD *)&v127 = sub_1001DEF4C(v88, v89, v130);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v127, (char *)&v127 + 8);
    swift_unknownObjectRelease_n(v81, 2);
    swift_bridgeObjectRelease(v90);
    _os_log_impl((void *)&_mh_execute_header, v83, v84, "Should Dismiss Custodian Review CFU: %s", v85, 0xCu);
    swift_arrayDestroy(v86, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v86, -1, -1);
    swift_slowDealloc(v85, -1, -1);

  }
  else
  {

    v91 = swift_unknownObjectRelease_n(v81, 2);
  }
  v92 = v115;
  v94 = v117;
  v93 = v118;
  v95 = Logger.logObject.getter(v91);
  v96 = static os_log_type_t.info.getter();
  v97 = os_log_type_enabled(v95, v96);
  if (!v81)
  {
    if (v97)
    {
      v100 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v100 = 0;
      _os_log_impl((void *)&_mh_execute_header, v95, v96, "Dismissing Custodian Review CFU", v100, 2u);
      swift_slowDealloc(v100, -1, -1);
    }

    v101 = v113;
    v102 = v114;
    v112(v113, v111, v114);
    Dependency.wrappedValue.getter(v130, v102);
    v110(v101, v102);
    v103 = v131;
    v104 = v132;
    sub_10000732C(v130, v131);
    v105 = AAFollowUpIdentifierCustodianReview;
    v106 = swift_allocObject(&unk_100268638, 32, 7);
    *(_QWORD *)(v106 + 16) = sub_10011E80C;
    *(_QWORD *)(v106 + 24) = v92;
    v107 = *(void (**)(uint64_t, uint64_t (*)(char, uint64_t), uint64_t, uint64_t, uint64_t))(v104 + 24);
    swift_retain(v92);
    v107(v105, sub_10011E81C, v106, v103, v104);
    swift_release(v106);
    sub_100006F58(v130);
    v108 = v92;
    return swift_release(v108);
  }
  if (v97)
  {
    v98 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v98 = 0;
    _os_log_impl((void *)&_mh_execute_header, v95, v96, "Not dismissing Custodian Review CFU", v98, 2u);
    swift_slowDealloc(v98, -1, -1);
  }

  sub_10010B7A4(0, 0, v93, v119, v116, v94, v120);
  swift_release(v92);
  return swift_unknownObjectRelease(v81);
}

uint64_t sub_100119E4C(uint64_t a1, void (*a2)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t result;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;

  v4 = a1 + 64;
  v5 = 1 << *(_BYTE *)(a1 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(a1 + 64);
  v8 = (unint64_t)(v5 + 63) >> 6;
  result = swift_bridgeObjectRetain(a1);
  v10 = 0;
  while (1)
  {
    if (v7)
    {
      v11 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v12 = v11 | (v10 << 6);
      goto LABEL_5;
    }
    v17 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v17 >= v8)
      return swift_release(a1);
    v18 = *(_QWORD *)(v4 + 8 * v17);
    ++v10;
    if (!v18)
    {
      v10 = v17 + 1;
      if (v17 + 1 >= v8)
        return swift_release(a1);
      v18 = *(_QWORD *)(v4 + 8 * v10);
      if (!v18)
      {
        v10 = v17 + 2;
        if (v17 + 2 >= v8)
          return swift_release(a1);
        v18 = *(_QWORD *)(v4 + 8 * v10);
        if (!v18)
        {
          v10 = v17 + 3;
          if (v17 + 3 >= v8)
            return swift_release(a1);
          v18 = *(_QWORD *)(v4 + 8 * v10);
          if (!v18)
            break;
        }
      }
    }
LABEL_22:
    v7 = (v18 - 1) & v18;
    v12 = __clz(__rbit64(v18)) + (v10 << 6);
LABEL_5:
    v13 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v12);
    v14 = *v13;
    v15 = v13[1];
    v16 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 56) + v12);
    swift_bridgeObjectRetain(v15);
    a2(v14, v15, v16);
    result = swift_bridgeObjectRelease(v15);
  }
  v19 = v17 + 4;
  if (v19 >= v8)
    return swift_release(a1);
  v18 = *(_QWORD *)(v4 + 8 * v19);
  if (v18)
  {
    v10 = v19;
    goto LABEL_22;
  }
  while (1)
  {
    v10 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v10 >= v8)
      return swift_release(a1);
    v18 = *(_QWORD *)(v4 + 8 * v10);
    ++v19;
    if (v18)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

void sub_100119FD4(uint64_t a1, uint64_t a2, uint64_t a3, _BYTE *a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t i;
  unint64_t v17;
  int64_t v18;
  uint64_t *v19;
  uint64_t v20;
  int64_t v21;
  uint64_t v22[2];
  int64_t v23;

  v9 = a1 + 56;
  v10 = 1 << *(_BYTE *)(a1 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(a1 + 56);
  v23 = (unint64_t)(v10 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v13 = 0;
  if (!v12)
    goto LABEL_5;
LABEL_4:
  v14 = __clz(__rbit64(v12));
  v12 &= v12 - 1;
  for (i = v14 | (v13 << 6); ; i = __clz(__rbit64(v17)) + (v13 << 6))
  {
    v19 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * i);
    v20 = v19[1];
    v22[0] = *v19;
    v22[1] = v20;
    swift_bridgeObjectRetain(v20);
    sub_10011101C(v22, a2, a3, a4);
    if (v4)
    {
      swift_release(a1);
      swift_bridgeObjectRelease(v20);
      return;
    }
    swift_bridgeObjectRelease(v20);
    if (v12)
      goto LABEL_4;
LABEL_5:
    if (__OFADD__(v13++, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v13 >= v23)
      goto LABEL_26;
    v17 = *(_QWORD *)(v9 + 8 * v13);
    if (!v17)
    {
      v18 = v13 + 1;
      if (v13 + 1 >= v23)
        goto LABEL_26;
      v17 = *(_QWORD *)(v9 + 8 * v18);
      if (v17)
        goto LABEL_14;
      v18 = v13 + 2;
      if (v13 + 2 >= v23)
        goto LABEL_26;
      v17 = *(_QWORD *)(v9 + 8 * v18);
      if (v17)
        goto LABEL_14;
      v18 = v13 + 3;
      if (v13 + 3 >= v23)
        goto LABEL_26;
      v17 = *(_QWORD *)(v9 + 8 * v18);
      if (v17)
      {
LABEL_14:
        v13 = v18;
        goto LABEL_15;
      }
      v21 = v13 + 4;
      if (v13 + 4 >= v23)
      {
LABEL_26:
        swift_release(a1);
        return;
      }
      v17 = *(_QWORD *)(v9 + 8 * v21);
      v13 += 4;
      if (!v17)
        break;
    }
LABEL_15:
    v12 = (v17 - 1) & v17;
  }
  while (1)
  {
    v13 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v13 >= v23)
      goto LABEL_26;
    v17 = *(_QWORD *)(v9 + 8 * v13);
    ++v21;
    if (v17)
      goto LABEL_15;
  }
LABEL_28:
  __break(1u);
}

BOOL sub_10011A1AC()
{
  id v0;
  id v1;
  id v2;
  id v4;
  id v5;

  v0 = objc_msgSend(objc_allocWithZone((Class)CDPWalrusStateController), "init");
  v5 = 0;
  v1 = objc_msgSend(v0, "walrusStatus:", &v5);
  if (v5)
  {
    v2 = v5;
    swift_willThrow();

    return 0;
  }
  else
  {
    v4 = v1;

    return v4 == (id)1;
  }
}

void sub_10011A264(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  id v24;
  void *v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSString v31;
  NSString v32;
  NSString v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  id v44;
  Class isa;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  uint8_t *v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  id v58;
  NSObject *v59;
  os_log_type_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  id v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  id v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81[5];

  v78 = a7;
  v79 = a8;
  v74 = a2;
  LODWORD(v73) = a1;
  v11 = sub_1000080B4((uint64_t *)&unk_10028E7C0);
  v76 = *(_QWORD *)(v11 - 8);
  v77 = v11;
  __chkstk_darwin(v11, v12);
  v75 = (char *)&v72 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_1000080B4((uint64_t *)&unk_10028E7D0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14, v16);
  v18 = (char *)&v72 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_1000080B4(&qword_10028FA50);
  v20 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19, v21);
  v23 = (char *)&v72 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v23, a5 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck__accountStore, v19);
  Dependency.wrappedValue.getter(v81, v19);
  (*(void (**)(char *, uint64_t))(v20 + 8))(v23, v19);
  v24 = objc_msgSend(*(id *)(*sub_10000732C(v81, v81[3]) + 16), "aa_primaryAppleAccount");
  if (!v24
    || (v25 = v24, v26 = objc_msgSend(v24, "aa_altDSID"), v25, !v26))
  {
    sub_100006F58(v81);
    if (qword_10028ADE0 != -1)
      swift_once(&qword_10028ADE0, sub_100046DA0);
    v34 = type metadata accessor for Logger(0);
    sub_100005288(v34, (uint64_t)qword_1002A8A20);
    v35 = swift_retain(a5);
    v36 = Logger.logObject.getter(v35);
    v37 = static os_log_type_t.debug.getter(v36);
    if (os_log_type_enabled(v36, v37))
    {
      v38 = (uint8_t *)swift_slowAlloc(12, -1);
      v39 = swift_slowAlloc(32, -1);
      v81[0] = v39;
      *(_DWORD *)v38 = 136315138;
      v40 = *(_QWORD *)(a5 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName);
      v41 = *(_QWORD *)(a5 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName + 8);
      swift_bridgeObjectRetain(v41);
      v80 = sub_1001DEF4C(v40, v41, v81);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v80, v81);
      swift_release(a5);
      swift_bridgeObjectRelease(v41);
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "%s Account is nil. Not reporting Post Repair CFU Event.", v38, 0xCu);
      swift_arrayDestroy(v39, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v39, -1, -1);
      swift_slowDealloc(v38, -1, -1);

    }
    else
    {

      swift_release(a5);
    }
    v42 = v78;
    v43 = v79;
    goto LABEL_11;
  }
  v72 = a6;
  static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
  v28 = v27;

  sub_100006F58(v81);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v18, a5 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck__analyticsEventFactory, v14);
  Dependency.wrappedValue.getter(v81, v14);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
  static String._unconditionallyBridgeFromObjectiveC(_:)(kAACustodianPostRepairCFUEvent);
  v30 = v29;
  swift_bridgeObjectRetain(a4);
  swift_bridgeObjectRetain(v28);
  v31 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v30);
  v32 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v28);
  if (a4)
  {
    v33 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(a4);
  }
  else
  {
    v33 = 0;
  }
  v44 = objc_msgSend((id)objc_opt_self(AAFAnalyticsEvent), "analyticsEventWithName:altDSID:flowID:", v31, v32, v33);
  swift_bridgeObjectRelease(v28);

  sub_100006F58(v81);
  if (!v44)
  {
    if (qword_10028ADE0 != -1)
      swift_once(&qword_10028ADE0, sub_100046DA0);
    v49 = type metadata accessor for Logger(0);
    sub_100005288(v49, (uint64_t)qword_1002A8A20);
    v50 = swift_retain(a5);
    v51 = Logger.logObject.getter(v50);
    v52 = static os_log_type_t.debug.getter(v51);
    if (os_log_type_enabled(v51, v52))
    {
      v53 = (uint8_t *)swift_slowAlloc(12, -1);
      v54 = swift_slowAlloc(32, -1);
      v81[0] = v54;
      *(_DWORD *)v53 = 136315138;
      v55 = *(_QWORD *)(a5 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName);
      v56 = *(_QWORD *)(a5 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName + 8);
      swift_bridgeObjectRetain(v56);
      v80 = sub_1001DEF4C(v55, v56, v81);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v80, v81);
      swift_release(a5);
      swift_bridgeObjectRelease(v56);
      _os_log_impl((void *)&_mh_execute_header, v51, v52, "%s Event creation failed. Not reporting Post Repair CFU Event.", v53, 0xCu);
      swift_arrayDestroy(v54, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v54, -1, -1);
      swift_slowDealloc(v53, -1, -1);

    }
    else
    {

      swift_release(a5);
    }
    v42 = v78;
    v43 = v79;
LABEL_11:
    sub_100155E5C(v42, v43);
    return;
  }
  isa = Bool._bridgeToObjectiveC()().super.super.isa;
  objc_msgSend(v44, "setObject:forKeyedSubscript:", isa, kAAFDidSucceed);

  v46 = *(_QWORD *)(v74 + 16);
  if (v46)
  {
    v47 = *(_QWORD *)(v74 + 8 * v46 + 24);
    swift_errorRetain(v47);
    v48 = (void *)_convertErrorToNSError(_:)(v47);
    swift_errorRelease(v47);
  }
  else
  {
    v48 = 0;
  }
  objc_msgSend(v44, "populateUnderlyingErrorsStartingWithRootError:", v48);

  if (qword_10028ADE0 != -1)
    swift_once(&qword_10028ADE0, sub_100046DA0);
  v57 = type metadata accessor for Logger(0);
  sub_100005288(v57, (uint64_t)qword_1002A8A20);
  swift_retain_n(a5, 2);
  v58 = v44;
  v59 = Logger.logObject.getter(v58);
  v60 = static os_log_type_t.debug.getter(v59);
  if (os_log_type_enabled(v59, v60))
  {
    v61 = swift_slowAlloc(22, -1);
    v73 = (_QWORD *)swift_slowAlloc(8, -1);
    v74 = swift_slowAlloc(32, -1);
    v81[0] = v74;
    *(_DWORD *)v61 = 136315394;
    v62 = *(_QWORD *)(a5 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName);
    v63 = *(_QWORD *)(a5 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName + 8);
    swift_bridgeObjectRetain(v63);
    v80 = sub_1001DEF4C(v62, v63, v81);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v80, v81);
    swift_release_n(a5, 2);
    swift_bridgeObjectRelease(v63);
    *(_WORD *)(v61 + 12) = 2112;
    v80 = (uint64_t)v58;
    v64 = v58;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v80, v81);
    v65 = v73;
    *v73 = v44;

    _os_log_impl((void *)&_mh_execute_header, v59, v60, "%s Reporting Post Repair CFU Event %@", (uint8_t *)v61, 0x16u);
    v66 = sub_1000080B4((uint64_t *)&unk_10028BC20);
    swift_arrayDestroy(v65, 1, v66);
    swift_slowDealloc(v65, -1, -1);
    v67 = v74;
    swift_arrayDestroy(v74, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v67, -1, -1);
    swift_slowDealloc(v61, -1, -1);

  }
  else
  {

    swift_release_n(a5, 2);
  }
  v68 = v75;
  v69 = v76;
  v70 = v77;
  (*(void (**)(char *, uint64_t, uint64_t))(v76 + 16))(v75, a5 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck__analyticsRTCReporter, v77);
  Dependency.wrappedValue.getter(v81, v70);
  (*(void (**)(char *, uint64_t))(v69 + 8))(v68, v70);
  v71 = objc_msgSend((id)objc_opt_self(AAAnalyticsRTCReporter), "reporter");
  objc_msgSend(v71, "sendEvent:", v58);

  sub_100006F58(v81);
  sub_100155E5C(v78, v79);

}

uint64_t sub_10011AB40(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  void *v43;
  _QWORD *v44;
  uint64_t v45;
  id v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61[5];

  v58 = a4;
  v55 = a3;
  v56 = a2;
  v7 = type metadata accessor for UUID(0);
  v59 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7, v8);
  v57 = (uint64_t)&v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_1000080B4(&qword_10028CCE0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  v14 = (char *)&v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for CustodianshipRecords(0);
  v52 = *(_QWORD *)(v15 - 8);
  v17 = __chkstk_darwin(v15, v16);
  v53 = v18;
  v54 = (uint64_t)&v48 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17, v19);
  v21 = (char *)&v48 - v20;
  if (qword_10028ADE0 != -1)
    swift_once(&qword_10028ADE0, sub_100046DA0);
  v22 = type metadata accessor for Logger(0);
  sub_100005288(v22, (uint64_t)qword_1002A8A20);
  sub_100027FE8(a1, (uint64_t)v21, type metadata accessor for CustodianshipRecords);
  v23 = swift_retain(a5);
  v24 = Logger.logObject.getter(v23);
  v25 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v24, v25))
  {
    v26 = swift_slowAlloc(22, -1);
    v51 = v7;
    v27 = v26;
    v48 = swift_slowAlloc(64, -1);
    v61[0] = v48;
    *(_DWORD *)v27 = 136315394;
    v49 = v11;
    v50 = a1;
    v28 = *(_QWORD *)(a5 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName);
    v29 = *(_QWORD *)(a5 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName + 8);
    swift_bridgeObjectRetain(v29);
    v60 = sub_1001DEF4C(v28, v29, v61);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, v61);
    swift_release(a5);
    swift_bridgeObjectRelease(v29);
    *(_WORD *)(v27 + 12) = 2080;
    v30 = sub_1001E4A60();
    v32 = v31;
    v60 = sub_1001DEF4C(v30, v31, v61);
    v11 = v49;
    a1 = v50;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, v61);
    swift_bridgeObjectRelease(v32);
    sub_100028388((uint64_t)v21, type metadata accessor for CustodianshipRecords);
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "%s - Checking CRK presence on Octagon for %s", (uint8_t *)v27, 0x16u);
    v33 = v48;
    swift_arrayDestroy(v48, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v33, -1, -1);
    v34 = v27;
    v7 = v51;
    swift_slowDealloc(v34, -1, -1);
  }
  else
  {
    swift_release(a5);
    sub_100028388((uint64_t)v21, type metadata accessor for CustodianshipRecords);
  }

  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v14, a5 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck__securityController, v10);
  Dependency.wrappedValue.getter(v61, v10);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  sub_10000732C(v61, v61[3]);
  v35 = v57;
  sub_1001E4D98(v57);
  v36 = v54;
  sub_100027FE8(a1, v54, type metadata accessor for CustodianshipRecords);
  v37 = *(unsigned __int8 *)(v52 + 80);
  v38 = (v37 + 24) & ~v37;
  v39 = (v53 + v38 + 7) & 0xFFFFFFFFFFFFFFF8;
  v40 = (v39 + 23) & 0xFFFFFFFFFFFFFFF8;
  v41 = swift_allocObject(&unk_1002680C0, v40 + 16, v37 | 7);
  *(_QWORD *)(v41 + 16) = a5;
  sub_10003B730(v36, v41 + v38, type metadata accessor for CustodianshipRecords);
  v42 = (_QWORD *)(v41 + v39);
  v43 = v56;
  *v42 = v56;
  v42[1] = &off_100264AB8;
  v44 = (_QWORD *)(v41 + v40);
  v45 = v58;
  *v44 = v55;
  v44[1] = v45;
  swift_retain(a5);
  v46 = v43;
  swift_retain(v45);
  sub_10018BCE0(v35, (void (*)(_QWORD, _QWORD))sub_10011B264, v41);
  swift_release(v41);
  (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v35, v7);
  return sub_100006F58(v61);
}

uint64_t sub_10011AF8C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  int *v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  int *v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v27;

  v1 = type metadata accessor for CustodianshipRecords(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v27 = *(_QWORD *)(v2 + 64);
  swift_release(*(_QWORD *)(v0 + 16));
  v4 = v0 + ((v3 + 24) & ~v3);
  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v7(v4, v5);
  v8 = (int *)type metadata accessor for CustodianRecord(0);
  v7(v4 + v8[5], v5);
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v8[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v8[7] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v8[8] + 8));
  v9 = (uint64_t *)(v4 + v8[10]);
  v10 = v9[1];
  if (v10 >> 60 != 15)
    sub_10000F494(*v9, v10);
  sub_10000F494(*(_QWORD *)(v4 + v8[11]), *(_QWORD *)(v4 + v8[11] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v8[13] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v8[14] + 8));
  v11 = v4 + v8[16];
  v12 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (!v12(v11, 1, v5))
    v7(v11, v5);
  v13 = v4 + *(int *)(v1 + 20);
  v7(v13, v5);
  v14 = (int *)type metadata accessor for CustodianRecoveryInfoRecord(0);
  v7(v13 + v14[5], v5);
  swift_bridgeObjectRelease(*(_QWORD *)(v13 + v14[6] + 8));
  sub_10000F494(*(_QWORD *)(v13 + v14[7]), *(_QWORD *)(v13 + v14[7] + 8));
  v15 = (uint64_t *)(v13 + v14[8]);
  v16 = v15[1];
  if (v16 >> 60 != 15)
    sub_10000F494(*v15, v16);
  sub_10000F494(*(_QWORD *)(v13 + v14[9]), *(_QWORD *)(v13 + v14[9] + 8));
  v17 = v13 + v14[11];
  if (!v12(v17, 1, v5))
    v7(v17, v5);
  swift_bridgeObjectRelease(*(_QWORD *)(v13 + v14[12] + 8));
  v18 = v4 + *(int *)(v1 + 24);
  v7(v18, v5);
  v19 = (int *)type metadata accessor for CustodianHealthRecord(0);
  v7(v18 + v19[5], v5);
  v20 = v18 + v19[6];
  v21 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 8))(v20, v21);
  v22 = (uint64_t *)(v18 + v19[7]);
  v23 = v22[1];
  if (v23 >> 60 != 15)
    sub_10000F494(*v22, v23);
  v24 = (v27 + ((v3 + 24) & ~v3) + 7) & 0xFFFFFFFFFFFFFFF8;
  v25 = (v24 + 23) & 0xFFFFFFFFFFFFFFF8;
  sub_10000F494(*(_QWORD *)(v18 + v19[8]), *(_QWORD *)(v18 + v19[8] + 8));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + v24));
  swift_release(*(_QWORD *)(v0 + v25 + 8));
  return swift_deallocObject(v0, v25 + 16, v3 | 7);
}

uint64_t sub_10011B264(int a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v5 = *(_QWORD *)(type metadata accessor for CustodianshipRecords(0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = (*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_1001148C0(a1, a2, *(_QWORD *)(v2 + 16), v2 + v6, *(_QWORD *)(v2 + v7), *(_QWORD *)(v2 + v7 + 8), *(uint64_t (**)(_QWORD, uint64_t))(v2 + ((v7 + 23) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v2 + ((v7 + 23) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_10011B2DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  int *v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  int *v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v29;

  v1 = type metadata accessor for CustodianshipRecords(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v29 = *(_QWORD *)(v2 + 64);
  swift_release(*(_QWORD *)(v0 + 16));
  v4 = v0 + ((v3 + 24) & ~v3);
  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v7(v4, v5);
  v8 = (int *)type metadata accessor for CustodianRecord(0);
  v7(v4 + v8[5], v5);
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v8[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v8[7] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v8[8] + 8));
  v9 = (uint64_t *)(v4 + v8[10]);
  v10 = v9[1];
  if (v10 >> 60 != 15)
    sub_10000F494(*v9, v10);
  sub_10000F494(*(_QWORD *)(v4 + v8[11]), *(_QWORD *)(v4 + v8[11] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v8[13] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v8[14] + 8));
  v11 = v4 + v8[16];
  v12 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (!v12(v11, 1, v5))
    v7(v11, v5);
  v13 = v4 + *(int *)(v1 + 20);
  v7(v13, v5);
  v14 = (int *)type metadata accessor for CustodianRecoveryInfoRecord(0);
  v7(v13 + v14[5], v5);
  swift_bridgeObjectRelease(*(_QWORD *)(v13 + v14[6] + 8));
  sub_10000F494(*(_QWORD *)(v13 + v14[7]), *(_QWORD *)(v13 + v14[7] + 8));
  v15 = (uint64_t *)(v13 + v14[8]);
  v16 = v15[1];
  if (v16 >> 60 != 15)
    sub_10000F494(*v15, v16);
  sub_10000F494(*(_QWORD *)(v13 + v14[9]), *(_QWORD *)(v13 + v14[9] + 8));
  v17 = v13 + v14[11];
  if (!v12(v17, 1, v5))
    v7(v17, v5);
  swift_bridgeObjectRelease(*(_QWORD *)(v13 + v14[12] + 8));
  v18 = v4 + *(int *)(v1 + 24);
  v7(v18, v5);
  v19 = (int *)type metadata accessor for CustodianHealthRecord(0);
  v7(v18 + v19[5], v5);
  v20 = v18 + v19[6];
  v21 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 8))(v20, v21);
  v22 = (uint64_t *)(v18 + v19[7]);
  v23 = v22[1];
  if (v23 >> 60 != 15)
    sub_10000F494(*v22, v23);
  v24 = (v29 + ((v3 + 24) & ~v3) + 7) & 0xFFFFFFFFFFFFFFF8;
  v25 = (v24 + 23) & 0xFFFFFFFFFFFFFFF8;
  v26 = (v25 + 15) & 0xFFFFFFFFFFFFFFF8;
  v27 = (v26 + 23) & 0xFFFFFFFFFFFFFFF8;
  sub_10000F494(*(_QWORD *)(v18 + v19[8]), *(_QWORD *)(v18 + v19[8] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v24 + 8));

  swift_unknownObjectRelease(*(_QWORD *)(v0 + v26));
  swift_release(*(_QWORD *)(v0 + v27 + 8));
  return swift_deallocObject(v0, v27 + 16, v3 | 7);
}

uint64_t sub_10011B5D8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v3 = *(_QWORD *)(type metadata accessor for CustodianshipRecords(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = (v5 + 23) & 0xFFFFFFFFFFFFFFF8;
  v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  return sub_100112C9C(a1, *(_QWORD *)(v1 + 16), v1 + v4, *(_QWORD *)(v1 + v5), *(char **)(v1 + v5 + 8), *(void **)(v1 + v6), *(_QWORD *)(v1 + v7), *(_QWORD *)(v1 + v7 + 8), *(void (**)(_QWORD))(v1 + ((v7 + 23) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v1 + ((v7 + 23) & 0xFFFFFFFFFFFFFFF8) + 8));
}

void sub_10011B66C(uint64_t a1, void (*a2)(uint64_t, uint64_t), void (*a3)(uint64_t, uint64_t))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  void *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void (**v67)(uint64_t, uint64_t);
  void (*v68)(uint64_t, uint64_t);
  uint64_t v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  void (*v74)(uint64_t, uint64_t);
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  void (*v87)(uint64_t, uint64_t);
  uint64_t v88[5];
  uint64_t v89;
  uint64_t v90;

  v87 = a2;
  v5 = type metadata accessor for UUID(0);
  v85 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5, v6);
  v84 = (char *)&v69 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1000080B4(&qword_10028CCE0);
  v81 = *(_QWORD *)(v8 - 8);
  v82 = (_QWORD *)v8;
  __chkstk_darwin(v8, v9);
  v11 = (char *)&v69 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78 = type metadata accessor for RecoveryKeys(0);
  __chkstk_darwin(v78, v12);
  v14 = (uint64_t *)((char *)&v69 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = type metadata accessor for CustodianshipRecords(0);
  v80 = *(_QWORD *)(v15 - 8);
  v16 = *(_QWORD *)(v80 + 64);
  v18 = __chkstk_darwin(v15, v17);
  v83 = (uint64_t)&v69 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18, v19);
  v21 = (char *)&v69 - v20;
  v79 = type metadata accessor for CustodianRecord(0);
  v22 = (uint64_t *)(a1 + *(int *)(v79 + 40));
  v23 = v22[1];
  if (v23 >> 60 == 15
    || (v24 = *v22,
        v25 = a1 + *(int *)(v15 + 20),
        v26 = (uint64_t *)(v25 + *(int *)(type metadata accessor for CustodianRecoveryInfoRecord(0) + 32)),
        v27 = v26[1],
        v27 >> 60 == 15))
  {
    type metadata accessor for AACustodianError(0);
    v29 = v28;
    v89 = -7019;
    v30 = sub_100005014((uint64_t)_swiftEmptyArrayStorage);
    v31 = sub_100005150((unint64_t *)&qword_10028B640, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianError, (uint64_t)&unk_100218378);
    _BridgedStoredNSError.init(_:userInfo:)(v88, &v89, v30, v29, v31);
    v32 = (void *)v88[0];
    v87(7, v88[0]);

  }
  else
  {
    v33 = v23;
    v34 = *v26;
    v77 = v24;
    v73 = v33;
    sub_100014534(v24, v33);
    v75 = v27;
    v76 = v34;
    sub_100014534(v34, v27);
    if (qword_10028ADE0 != -1)
      swift_once(&qword_10028ADE0, sub_100046DA0);
    v74 = a3;
    v35 = type metadata accessor for Logger(0);
    sub_100005288(v35, (uint64_t)qword_1002A8A20);
    sub_100027FE8(a1, (uint64_t)v21, type metadata accessor for CustodianshipRecords);
    v36 = v86;
    v37 = swift_retain(v86);
    v38 = Logger.logObject.getter(v37);
    v39 = static os_log_type_t.debug.getter(v38);
    v40 = v39;
    if (os_log_type_enabled(v38, v39))
    {
      v41 = swift_slowAlloc(22, -1);
      v72 = v5;
      v42 = v41;
      v71 = swift_slowAlloc(64, -1);
      v88[0] = v71;
      *(_DWORD *)v42 = 136315394;
      v69 = v42 + 4;
      v70 = v40;
      v43 = *(_QWORD *)(v36 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName);
      v44 = *(_QWORD *)(v36 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName + 8);
      swift_bridgeObjectRetain(v44);
      v89 = sub_1001DEF4C(v43, v44, v88);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v89, &v90);
      swift_release(v86);
      swift_bridgeObjectRelease(v44);
      *(_WORD *)(v42 + 12) = 2080;
      v45 = sub_1001E4A60();
      v47 = v46;
      v89 = sub_1001DEF4C(v45, v46, v88);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v89, &v90);
      swift_bridgeObjectRelease(v47);
      sub_100028388((uint64_t)v21, type metadata accessor for CustodianshipRecords);
      _os_log_impl((void *)&_mh_execute_header, v38, (os_log_type_t)v70, "%s - Starting to Preflight Custodian Recovery for %s", (uint8_t *)v42, 0x16u);
      v48 = v71;
      swift_arrayDestroy(v71, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v48, -1, -1);
      v49 = v42;
      v5 = v72;
      swift_slowDealloc(v49, -1, -1);
    }
    else
    {
      swift_release(v36);
      sub_100028388((uint64_t)v21, type metadata accessor for CustodianshipRecords);
    }

    v50 = v73;
    v51 = (uint64_t)v14 + *(int *)(v78 + 24);
    v52 = v77;
    sub_100014534(v77, v73);
    v53 = v75;
    v54 = v76;
    sub_100014534(v76, v75);
    sub_1001E4D98(v51);
    *v14 = v52;
    v14[1] = v50;
    v14[2] = v54;
    v14[3] = v53;
    v55 = v86;
    v57 = v81;
    v56 = v82;
    (*(void (**)(char *, uint64_t, _QWORD *))(v81 + 16))(v11, v86 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck__securityController, v82);
    Dependency.wrappedValue.getter(v88, v56);
    (*(void (**)(char *, _QWORD *))(v57 + 8))(v11, v56);
    v82 = sub_10000732C(v88, v88[3]);
    v58 = (uint64_t)v84;
    v59 = v85;
    (*(void (**)(char *, uint64_t, uint64_t))(v85 + 16))(v84, a1 + *(int *)(v79 + 20), v5);
    v60 = v83;
    sub_100027FE8(a1, v83, type metadata accessor for CustodianshipRecords);
    v61 = *(unsigned __int8 *)(v80 + 80);
    v62 = (v61 + 24) & ~v61;
    v63 = v55;
    v64 = (v16 + v62 + 7) & 0xFFFFFFFFFFFFFFF8;
    v65 = v5;
    v66 = swift_allocObject(&unk_100268160, v64 + 16, v61 | 7);
    *(_QWORD *)(v66 + 16) = v63;
    sub_10003B730(v60, v66 + v62, type metadata accessor for CustodianshipRecords);
    v67 = (void (**)(uint64_t, uint64_t))(v66 + v64);
    v68 = v74;
    *v67 = v87;
    v67[1] = v68;
    swift_retain(v63);
    swift_retain(v68);
    sub_10018CB64(v58, v14, (void (*)(uint64_t))sub_10011CF40, (void (*)(uint64_t))v66);
    swift_release(v66);
    sub_1000144D8(v76, v75);
    sub_1000144D8(v77, v50);
    (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v58, v65);
    sub_100028388((uint64_t)v14, type metadata accessor for RecoveryKeys);
    sub_100006F58(v88);
  }
}

uint64_t sub_10011BC6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  __n128 v47;
  os_log_type_t v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  NSObject *v61;
  __n128 v62;
  os_log_type_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t (**v78)(uint64_t);
  uint64_t (*v79)(uint64_t);
  _QWORD *v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t (**v91)(uint64_t);
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  _QWORD *v102;
  uint64_t (**v103)@<X0>(uint64_t@<X0>, uint64_t@<X8>);
  uint64_t v104;
  uint64_t v105;
  uint64_t *v106;
  unint64_t v107;
  uint64_t v108;
  id v109;
  id v110;
  _QWORD v112[2];
  os_log_t v113;
  int v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  _QWORD *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130[5];
  uint64_t v131;
  uint64_t v132;

  v8 = sub_1000080B4(&qword_10028E810);
  __chkstk_darwin(v8, v9);
  v125 = (char *)v112 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_1000080B4((uint64_t *)&unk_1002904F0);
  __chkstk_darwin(v11, v12);
  v123 = (char *)v112 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v121 = sub_1000080B4(&qword_10028CCC0);
  v119 = *(_QWORD *)(v121 - 8);
  __chkstk_darwin(v121, v14);
  v118 = (_QWORD *)((char *)v112 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = type metadata accessor for CustodianRecord(0);
  v120 = *(_QWORD *)(v16 - 8);
  v17 = *(_QWORD *)(v120 + 64);
  v19 = __chkstk_darwin(v16, v18);
  v124 = (uint64_t)v112 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __chkstk_darwin(v19, v20);
  v127 = (uint64_t)v112 - v22;
  v24 = __chkstk_darwin(v21, v23);
  v122 = (uint64_t)v112 - v25;
  __chkstk_darwin(v24, v26);
  v128 = (uint64_t)v112 - v27;
  v28 = type metadata accessor for CustodianshipRecords(0);
  v29 = *(_QWORD *)(v28 - 8);
  v115 = v28;
  v116 = v29;
  v30 = *(_QWORD *)(v29 + 64);
  v32 = __chkstk_darwin(v28, v31);
  v33 = (char *)v112 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = __chkstk_darwin(v32, v34);
  v37 = (char *)v112 - v36;
  __chkstk_darwin(v35, v38);
  v40 = (char *)v112 - v39;
  v41 = swift_allocObject(&unk_1002681B0, 32, 7);
  v117 = a3;
  *(_QWORD *)(v41 + 16) = a3;
  *(_QWORD *)(v41 + 24) = a4;
  v129 = v41;
  v126 = v16;
  v42 = *(_QWORD *)(a1 + *(int *)(v16 + 36));
  v43 = qword_10028ADE0;
  swift_retain(a4);
  if (v42 == 3)
  {
    if (v43 != -1)
      swift_once(&qword_10028ADE0, sub_100046DA0);
    v44 = type metadata accessor for Logger(0);
    sub_100005288(v44, (uint64_t)qword_1002A8A20);
    sub_100027FE8(a1, (uint64_t)v40, type metadata accessor for CustodianshipRecords);
    v45 = swift_retain(a2);
    v46 = Logger.logObject.getter(v45);
    v48 = static os_log_type_t.default.getter(v47);
    v49 = v48;
    if (os_log_type_enabled(v46, v48))
    {
      v50 = swift_slowAlloc(22, -1);
      v117 = swift_slowAlloc(64, -1);
      v130[0] = v117;
      *(_DWORD *)v50 = 136315394;
      v114 = v49;
      v113 = v46;
      v51 = *(_QWORD *)(a2 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName);
      v52 = *(_QWORD *)(a2 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName + 8);
      swift_bridgeObjectRetain(v52);
      v131 = sub_1001DEF4C(v51, v52, v130);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v131, &v132);
      swift_release(a2);
      swift_bridgeObjectRelease(v52);
      *(_WORD *)(v50 + 12) = 2080;
      v112[1] = v50 + 14;
      type metadata accessor for CustodianHealthRecord(0);
      v53 = type metadata accessor for UUID(0);
      v54 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v55 = dispatch thunk of CustomStringConvertible.description.getter(v53, v54);
      v57 = v56;
      v131 = sub_1001DEF4C(v55, v56, v130);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v131, &v132);
      swift_bridgeObjectRelease(v57);
      sub_100028388((uint64_t)v40, type metadata accessor for CustodianshipRecords);
      v46 = v113;
      _os_log_impl((void *)&_mh_execute_header, v113, (os_log_type_t)v114, "%s - custodian %s was marked as unreachable, marking as accepted again.", (uint8_t *)v50, 0x16u);
      v58 = v117;
      swift_arrayDestroy(v117, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v58, -1, -1);
      swift_slowDealloc(v50, -1, -1);
    }
    else
    {
      swift_release(a2);
      sub_100028388((uint64_t)v40, type metadata accessor for CustodianshipRecords);
    }

    v73 = v128;
    sub_100027FE8(a1, v128, type metadata accessor for CustodianRecord);
    sub_100027FE8(a1, (uint64_t)v33, type metadata accessor for CustodianshipRecords);
    v74 = *(unsigned __int8 *)(v116 + 80);
    v75 = (v74 + 24) & ~v74;
    v76 = (v30 + v75 + 7) & 0xFFFFFFFFFFFFFFF8;
    v77 = swift_allocObject(&unk_1002681D8, v76 + 16, v74 | 7);
    *(_QWORD *)(v77 + 16) = a2;
    sub_10003B730((uint64_t)v33, v77 + v75, type metadata accessor for CustodianshipRecords);
    v78 = (uint64_t (**)(uint64_t))(v77 + v76);
    v79 = (uint64_t (*)(uint64_t))v129;
    *v78 = sub_10011CF84;
    v78[1] = v79;
    v117 = swift_allocObject(&unk_100268200, 24, 7);
    *(_QWORD *)(v117 + 16) = 2;
    v80 = v118;
    v81 = v119;
    v82 = v121;
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(v119 + 16))(v118, a2 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck__storageController, v121);
    swift_retain(a2);
    swift_retain(v79);
    Dependency.wrappedValue.getter(v130, v82);
    (*(void (**)(_QWORD *, uint64_t))(v81 + 8))(v80, v82);
    v83 = sub_10000732C(v130, v130[3]);
    v84 = v122;
    sub_100027FE8(v73, v122, type metadata accessor for CustodianRecord);
    v85 = *(unsigned __int8 *)(v120 + 80);
    v86 = (v85 + 24) & ~v85;
    v119 = v85 | 7;
    v120 = v17 + 7;
    v87 = (v17 + 7 + v86) & 0xFFFFFFFFFFFFFFF8;
    v88 = (v87 + 15) & 0xFFFFFFFFFFFFFFF8;
    v89 = swift_allocObject(&unk_100268228, v88 + 16, v85 | 7);
    *(_QWORD *)(v89 + 16) = a2;
    v90 = v89;
    sub_10003B730(v84, v89 + v86, type metadata accessor for CustodianRecord);
    *(_QWORD *)(v90 + v87) = 2;
    v91 = (uint64_t (**)(uint64_t))(v90 + v88);
    *v91 = sub_10011CFB0;
    v91[1] = (uint64_t (*)(uint64_t))v77;
    v92 = *v83;
    v118 = sub_10000732C((_QWORD *)(*v83 + 56), *(_QWORD *)(*v83 + 80));
    sub_100027FE8(v73, v84, type metadata accessor for CustodianRecord);
    v93 = type metadata accessor for UUID(0);
    v94 = (uint64_t)v123;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v93 - 8) + 56))(v123, 1, 1, v93);
    v95 = type metadata accessor for Date(0);
    v96 = (uint64_t)v125;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v95 - 8) + 56))(v125, 1, 1, v95);
    swift_retain(a2);
    v97 = v117;
    swift_retain(v117);
    v121 = v77;
    swift_retain(v77);
    v98 = v127;
    sub_100093290(v84, 0, 0, 2, 0, 0, 0xF000000000000000, 2u, v127, v94, 0, 0, v96, 0);
    v99 = v124;
    sub_100027FE8(v128, v124, type metadata accessor for CustodianRecord);
    v100 = (v85 + 48) & ~v85;
    v101 = (v120 + v100) & 0xFFFFFFFFFFFFFFF8;
    v102 = (_QWORD *)swift_allocObject(&unk_100268250, v101 + 16, v119);
    v102[2] = v92;
    v102[3] = sub_100117CFC;
    v102[4] = v90;
    v102[5] = 0;
    sub_10003B730(v99, (uint64_t)v102 + v100, type metadata accessor for CustodianRecord);
    v103 = (uint64_t (**)@<X0>(uint64_t@<X0>, uint64_t@<X8>))((char *)v102 + v101);
    *v103 = sub_10011E870;
    v103[1] = (uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X8>))v97;
    v104 = qword_10028AF00;
    swift_retain(v97);
    swift_retain(v92);
    swift_retain(v90);
    if (v104 != -1)
      swift_once(&qword_10028AF00, sub_1001FD458);
    v105 = v98;
    if (*(_BYTE *)(v98 + *(int *)(v126 + 48)) == 1)
    {
      if (qword_10028AF10 != -1)
        swift_once(&qword_10028AF10, sub_1001FDD8C);
      v106 = &qword_1002A8C80;
    }
    else
    {
      if (qword_10028AF08 != -1)
        swift_once(&qword_10028AF08, sub_1001FDD54);
      v106 = &qword_1002A8C70;
    }
    v108 = *v106;
    v107 = v106[1];
    swift_bridgeObjectRetain(v107);
    v109 = sub_1001FD4C0(v108, v107);
    v110 = objc_msgSend(v109, "privateCloudDatabase");
    swift_bridgeObjectRelease(v107);

    sub_100054464(v105, v110, (uint64_t)sub_100117D04, (uint64_t)v102);
    swift_release(v102);

    sub_100028388(v105, type metadata accessor for CustodianRecord);
    swift_release(v90);
    swift_release_n(v97, 2);
    sub_100006F58(v130);
    swift_release(v121);
    sub_100028388(v128, type metadata accessor for CustodianRecord);
  }
  else
  {
    if (v43 != -1)
      swift_once(&qword_10028ADE0, sub_100046DA0);
    v59 = type metadata accessor for Logger(0);
    sub_100005288(v59, (uint64_t)qword_1002A8A20);
    sub_100027FE8(a1, (uint64_t)v37, type metadata accessor for CustodianshipRecords);
    v60 = swift_retain(a2);
    v61 = Logger.logObject.getter(v60);
    v63 = static os_log_type_t.default.getter(v62);
    if (os_log_type_enabled(v61, v63))
    {
      v64 = swift_slowAlloc(22, -1);
      v65 = swift_slowAlloc(64, -1);
      v130[0] = v65;
      *(_DWORD *)v64 = 136315394;
      v66 = *(_QWORD *)(a2 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName);
      v67 = *(_QWORD *)(a2 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName + 8);
      swift_bridgeObjectRetain(v67);
      v131 = sub_1001DEF4C(v66, v67, v130);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v131, &v132);
      swift_release(a2);
      swift_bridgeObjectRelease(v67);
      *(_WORD *)(v64 + 12) = 2080;
      type metadata accessor for CustodianHealthRecord(0);
      v68 = type metadata accessor for UUID(0);
      v69 = sub_100005150((unint64_t *)&qword_10028BBE0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v70 = dispatch thunk of CustomStringConvertible.description.getter(v68, v69);
      v72 = v71;
      v131 = sub_1001DEF4C(v70, v71, v130);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v131, &v132);
      swift_bridgeObjectRelease(v72);
      sub_100028388((uint64_t)v37, type metadata accessor for CustodianshipRecords);
      _os_log_impl((void *)&_mh_execute_header, v61, v63, "%s - custodian %s status is not unreachable, bailing.", (uint8_t *)v64, 0x16u);
      swift_arrayDestroy(v65, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v65, -1, -1);
      swift_slowDealloc(v64, -1, -1);
    }
    else
    {
      swift_release(a2);
      sub_100028388((uint64_t)v37, type metadata accessor for CustodianshipRecords);
    }

    ((void (*)(uint64_t, _QWORD))v117)(3, 0);
  }
  return swift_release(v129);
}

uint64_t sub_10011C79C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint64_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint8_t *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD v46[2];
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56[5];

  v4 = v3;
  v54 = a2;
  v7 = type metadata accessor for CustodianshipRecords(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  __chkstk_darwin(v7, v10);
  v11 = (char *)v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_1000080B4(&qword_10028E840);
  v52 = *(_QWORD *)(v12 - 8);
  v53 = v12;
  __chkstk_darwin(v12, v13);
  v51 = (char *)v46 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = (int *)type metadata accessor for KeyRepairContext(0);
  __chkstk_darwin(v15, v16);
  v18 = (char *)v46 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = a1 + *(int *)(type metadata accessor for CustodianRecord(0) + 20);
  v20 = type metadata accessor for UUID(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v18, v19, v20);
  v18[v15[5]] = 0;
  v18[v15[6]] = 1;
  v21 = &v18[v15[7]];
  *(_QWORD *)v21 = 0;
  *((_QWORD *)v21 + 1) = 0;
  if (qword_10028ADC8 != -1)
    swift_once(&qword_10028ADC8, sub_100046D2C);
  v22 = type metadata accessor for Logger(0);
  sub_100005288(v22, (uint64_t)qword_1002A89D8);
  v23 = swift_retain(v4);
  v24 = Logger.logObject.getter(v23);
  v25 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v24, v25))
  {
    v49 = v9;
    v26 = swift_slowAlloc(12, -1);
    v47 = v8;
    v27 = (uint8_t *)v26;
    v28 = swift_slowAlloc(32, -1);
    v56[0] = v28;
    v48 = a1;
    *(_DWORD *)v27 = 136315138;
    v50 = a3;
    v46[1] = v27 + 4;
    v29 = v4 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName;
    v30 = (char *)v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
    v31 = v4;
    v33 = *(_QWORD *)(v4 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck_checkName);
    v32 = *(_QWORD *)(v29 + 8);
    swift_bridgeObjectRetain(v32);
    v34 = v33;
    v4 = v31;
    v11 = v30;
    v55 = sub_1001DEF4C(v34, v32, v56);
    a3 = v50;
    a1 = v48;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, v56);
    swift_release(v4);
    v35 = v32;
    v9 = v49;
    swift_bridgeObjectRelease(v35);
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "%s Starting repair keys", v27, 0xCu);
    swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v28, -1, -1);
    v36 = v27;
    v8 = v47;
    swift_slowDealloc(v36, -1, -1);

  }
  else
  {

    swift_release(v4);
  }
  v37 = v51;
  v38 = v52;
  v39 = v53;
  (*(void (**)(char *, uint64_t, uint64_t))(v52 + 16))(v51, v4 + OBJC_IVAR____TtC13appleaccountd29CustodianPreflightHealthCheck__keyRepair, v53);
  Dependency.wrappedValue.getter(v56, v39);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v37, v39);
  sub_10000732C(v56, v56[3]);
  sub_100027FE8(a1, (uint64_t)v11, type metadata accessor for CustodianshipRecords);
  v40 = *(unsigned __int8 *)(v8 + 80);
  v41 = (v40 + 24) & ~v40;
  v42 = (v9 + v41 + 7) & 0xFFFFFFFFFFFFFFF8;
  v43 = swift_allocObject(&unk_1002682A0, v42 + 16, v40 | 7);
  *(_QWORD *)(v43 + 16) = v4;
  sub_10003B730((uint64_t)v11, v43 + v41, type metadata accessor for CustodianshipRecords);
  v44 = (_QWORD *)(v43 + v42);
  *v44 = v54;
  v44[1] = a3;
  swift_retain(v4);
  swift_retain(a3);
  sub_1000319C8((uint64_t)v18, (void (*)(uint64_t))sub_10011D6CC, (void (*)(uint64_t))v43);
  swift_release(v43);
  sub_100028388((uint64_t)v18, type metadata accessor for KeyRepairContext);
  return sub_100006F58(v56);
}

uint64_t sub_10011CB88(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = (_QWORD *)swift_task_alloc(dword_1002927BC);
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_100075348;
  return sub_100116F80(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_10011CC08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  int *v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  int *v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  uint64_t v25;

  v1 = type metadata accessor for CustodianshipRecords(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v25 = *(_QWORD *)(v2 + 64);
  swift_release(*(_QWORD *)(v0 + 16));

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 64));
  v4 = v0 + ((v3 + 72) & ~v3);
  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v7(v4, v5);
  v8 = (int *)type metadata accessor for CustodianRecord(0);
  v7(v4 + v8[5], v5);
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v8[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v8[7] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v8[8] + 8));
  v9 = (uint64_t *)(v4 + v8[10]);
  v10 = v9[1];
  if (v10 >> 60 != 15)
    sub_10000F494(*v9, v10);
  sub_10000F494(*(_QWORD *)(v4 + v8[11]), *(_QWORD *)(v4 + v8[11] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v8[13] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v8[14] + 8));
  v11 = v4 + v8[16];
  v12 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (!v12(v11, 1, v5))
    v7(v11, v5);
  v13 = v4 + *(int *)(v1 + 20);
  v7(v13, v5);
  v14 = (int *)type metadata accessor for CustodianRecoveryInfoRecord(0);
  v7(v13 + v14[5], v5);
  swift_bridgeObjectRelease(*(_QWORD *)(v13 + v14[6] + 8));
  sub_10000F494(*(_QWORD *)(v13 + v14[7]), *(_QWORD *)(v13 + v14[7] + 8));
  v15 = (uint64_t *)(v13 + v14[8]);
  v16 = v15[1];
  if (v16 >> 60 != 15)
    sub_10000F494(*v15, v16);
  sub_10000F494(*(_QWORD *)(v13 + v14[9]), *(_QWORD *)(v13 + v14[9] + 8));
  v17 = v13 + v14[11];
  if (!v12(v17, 1, v5))
    v7(v17, v5);
  swift_bridgeObjectRelease(*(_QWORD *)(v13 + v14[12] + 8));
  v18 = v4 + *(int *)(v1 + 24);
  v7(v18, v5);
  v19 = (int *)type metadata accessor for CustodianHealthRecord(0);
  v7(v18 + v19[5], v5);
  v20 = v18 + v19[6];
  v21 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 8))(v20, v21);
  v22 = (uint64_t *)(v18 + v19[7]);
  v23 = v22[1];
  if (v23 >> 60 != 15)
    sub_10000F494(*v22, v23);
  sub_10000F494(*(_QWORD *)(v18 + v19[8]), *(_QWORD *)(v18 + v19[8] + 8));
  return swift_deallocObject(v0, ((v3 + 72) & ~v3) + v25, v3 | 7);
}

uint64_t sub_10011CED0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for CustodianshipRecords(0) - 8) + 80);
  return sub_10010F900(a1, a2, *(_QWORD *)(v2 + 16), *(void **)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), *(unsigned __int8 *)(v2 + 48), *(void (**)(_QWORD))(v2 + 56), *(_QWORD *)(v2 + 64), v2 + ((v5 + 72) & ~v5));
}

uint64_t sub_10011CF40(uint64_t a1)
{
  return sub_10011D6D8(a1, (uint64_t (*)(uint64_t, _QWORD, unint64_t, _QWORD, _QWORD))sub_10011022C);
}

uint64_t sub_10011CF4C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_errorRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10011CF78(uint64_t a1)
{
  uint64_t v1;

  return sub_1001109EC(a1, *(void (**)(uint64_t, uint64_t))(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_10011CF84(uint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 16))(3, a1);
}

uint64_t sub_10011CFB0(uint64_t a1)
{
  return sub_10011D6D8(a1, (uint64_t (*)(uint64_t, _QWORD, unint64_t, _QWORD, _QWORD))sub_100115EC4);
}

uint64_t sub_10011CFBC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10011CFD0()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;

  v1 = (int *)type metadata accessor for CustodianRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release(*(_QWORD *)(v0 + 16));
  v6 = v0 + v4;
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v0 + v4, v7);
  v9(v0 + v4 + v1[5], v7);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[7] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[8] + 8));
  v10 = (uint64_t *)(v0 + v4 + v1[10]);
  v11 = v10[1];
  if (v11 >> 60 != 15)
    sub_10000F494(*v10, v11);
  sub_10000F494(*(_QWORD *)(v6 + v1[11]), *(_QWORD *)(v6 + v1[11] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[13] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[14] + 8));
  v12 = v6 + v1[16];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v12, 1, v7))
    v9(v12, v7);
  v13 = (((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  v14 = v13 + 16;
  swift_release(*(_QWORD *)(v0 + v13 + 8));
  return swift_deallocObject(v0, v14, v3 | 7);
}

uint64_t sub_10011D144(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v3 = *(_QWORD *)(type metadata accessor for CustodianRecord(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_100116620(a1, *(_QWORD *)(v1 + 16), v1 + v4, *(_QWORD *)(v1 + v5), *(void (**)(_QWORD))(v1 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v1 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_10011D1AC()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;

  v1 = (int *)type metadata accessor for CustodianRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 48) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  v6 = v0 + v4;
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v0 + v4, v7);
  v9(v0 + v4 + v1[5], v7);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[7] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[8] + 8));
  v10 = (uint64_t *)(v0 + v4 + v1[10]);
  v11 = v10[1];
  if (v11 >> 60 != 15)
    sub_10000F494(*v10, v11);
  sub_10000F494(*(_QWORD *)(v6 + v1[11]), *(_QWORD *)(v6 + v1[11] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[13] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[14] + 8));
  v12 = v6 + v1[16];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v12, 1, v7))
    v9(v12, v7);
  v13 = (v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v14 = v13 + 16;
  swift_release(*(_QWORD *)(v0 + v13 + 8));
  return swift_deallocObject(v0, v14, v3 | 7);
}

uint64_t sub_10011D320(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(type metadata accessor for CustodianRecord(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = v1 + ((*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8);
  return sub_1001E78D0(a1, *(_QWORD *)(v1 + 16), *(void (**)(_QWORD))(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), v1 + v4, *(void (**)(_QWORD))v5, *(_QWORD *)(v5 + 8));
}

uint64_t sub_10011D380(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = (_QWORD *)swift_task_alloc(dword_1002927BC);
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_1000224D8;
  return sub_100116F80(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_10011D404()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  int *v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  int *v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v26;

  v1 = type metadata accessor for CustodianshipRecords(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v26 = *(_QWORD *)(v2 + 64);
  swift_release(*(_QWORD *)(v0 + 16));
  v4 = v0 + ((v3 + 24) & ~v3);
  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v7(v4, v5);
  v8 = (int *)type metadata accessor for CustodianRecord(0);
  v7(v4 + v8[5], v5);
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v8[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v8[7] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v8[8] + 8));
  v9 = (uint64_t *)(v4 + v8[10]);
  v10 = v9[1];
  if (v10 >> 60 != 15)
    sub_10000F494(*v9, v10);
  sub_10000F494(*(_QWORD *)(v4 + v8[11]), *(_QWORD *)(v4 + v8[11] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v8[13] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v8[14] + 8));
  v11 = v4 + v8[16];
  v12 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (!v12(v11, 1, v5))
    v7(v11, v5);
  v13 = v4 + *(int *)(v1 + 20);
  v7(v13, v5);
  v14 = (int *)type metadata accessor for CustodianRecoveryInfoRecord(0);
  v7(v13 + v14[5], v5);
  swift_bridgeObjectRelease(*(_QWORD *)(v13 + v14[6] + 8));
  sub_10000F494(*(_QWORD *)(v13 + v14[7]), *(_QWORD *)(v13 + v14[7] + 8));
  v15 = (uint64_t *)(v13 + v14[8]);
  v16 = v15[1];
  if (v16 >> 60 != 15)
    sub_10000F494(*v15, v16);
  sub_10000F494(*(_QWORD *)(v13 + v14[9]), *(_QWORD *)(v13 + v14[9] + 8));
  v17 = v13 + v14[11];
  if (!v12(v17, 1, v5))
    v7(v17, v5);
  swift_bridgeObjectRelease(*(_QWORD *)(v13 + v14[12] + 8));
  v18 = v4 + *(int *)(v1 + 24);
  v7(v18, v5);
  v19 = (int *)type metadata accessor for CustodianHealthRecord(0);
  v7(v18 + v19[5], v5);
  v20 = v18 + v19[6];
  v21 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 8))(v20, v21);
  v22 = (uint64_t *)(v18 + v19[7]);
  v23 = v22[1];
  if (v23 >> 60 != 15)
    sub_10000F494(*v22, v23);
  v24 = (v26 + ((v3 + 24) & ~v3) + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_10000F494(*(_QWORD *)(v18 + v19[8]), *(_QWORD *)(v18 + v19[8] + 8));
  swift_release(*(_QWORD *)(v0 + v24 + 8));
  return swift_deallocObject(v0, v24 + 16, v3 | 7);
}

uint64_t sub_10011D6CC(uint64_t a1)
{
  return sub_10011D6D8(a1, (uint64_t (*)(uint64_t, _QWORD, unint64_t, _QWORD, _QWORD))sub_100115164);
}

uint64_t sub_10011D6D8(uint64_t a1, uint64_t (*a2)(uint64_t, _QWORD, unint64_t, _QWORD, _QWORD))
{
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;

  v4 = *(_QWORD *)(type metadata accessor for CustodianshipRecords(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = (_QWORD *)(v2 + ((*(_QWORD *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  return a2(a1, *(_QWORD *)(v2 + 16), v2 + v5, *v6, v6[1]);
}

uint64_t sub_10011D740()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  int *v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  int *v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  uint64_t v25;

  v1 = type metadata accessor for CustodianshipRecords(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v25 = *(_QWORD *)(v2 + 64);
  swift_release(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 48));
  swift_release(*(_QWORD *)(v0 + 72));
  v4 = v0 + ((v3 + 80) & ~v3);
  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v7(v4, v5);
  v8 = (int *)type metadata accessor for CustodianRecord(0);
  v7(v4 + v8[5], v5);
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v8[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v8[7] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v8[8] + 8));
  v9 = (uint64_t *)(v4 + v8[10]);
  v10 = v9[1];
  if (v10 >> 60 != 15)
    sub_10000F494(*v9, v10);
  sub_10000F494(*(_QWORD *)(v4 + v8[11]), *(_QWORD *)(v4 + v8[11] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v8[13] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v8[14] + 8));
  v11 = v4 + v8[16];
  v12 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (!v12(v11, 1, v5))
    v7(v11, v5);
  v13 = v4 + *(int *)(v1 + 20);
  v7(v13, v5);
  v14 = (int *)type metadata accessor for CustodianRecoveryInfoRecord(0);
  v7(v13 + v14[5], v5);
  swift_bridgeObjectRelease(*(_QWORD *)(v13 + v14[6] + 8));
  sub_10000F494(*(_QWORD *)(v13 + v14[7]), *(_QWORD *)(v13 + v14[7] + 8));
  v15 = (uint64_t *)(v13 + v14[8]);
  v16 = v15[1];
  if (v16 >> 60 != 15)
    sub_10000F494(*v15, v16);
  sub_10000F494(*(_QWORD *)(v13 + v14[9]), *(_QWORD *)(v13 + v14[9] + 8));
  v17 = v13 + v14[11];
  if (!v12(v17, 1, v5))
    v7(v17, v5);
  swift_bridgeObjectRelease(*(_QWORD *)(v13 + v14[12] + 8));
  v18 = v4 + *(int *)(v1 + 24);
  v7(v18, v5);
  v19 = (int *)type metadata accessor for CustodianHealthRecord(0);
  v7(v18 + v19[5], v5);
  v20 = v18 + v19[6];
  v21 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 8))(v20, v21);
  v22 = (uint64_t *)(v18 + v19[7]);
  v23 = v22[1];
  if (v23 >> 60 != 15)
    sub_10000F494(*v22, v23);
  sub_10000F494(*(_QWORD *)(v18 + v19[8]), *(_QWORD *)(v18 + v19[8] + 8));
  return swift_deallocObject(v0, ((v3 + 80) & ~v3) + v25, v3 | 7);
}

uint64_t sub_10011DA10(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for CustodianshipRecords(0) - 8) + 80);
  return sub_1001136FC(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(void (**)(uint64_t))(v1 + 48), *(uint64_t **)(v1 + 56), *(void (**)(uint64_t))(v1 + 64), *(void (**)(uint64_t))(v1 + 72), v1 + ((v3 + 80) & ~v3));
}

uint64_t sub_10011DA70()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 56));
  swift_errorRelease(*(_QWORD *)(v0 + 64));
  return swift_deallocObject(v0, 72, 7);
}

uint64_t sub_10011DAB4(uint64_t a1)
{
  uint64_t v1;

  return sub_10011427C(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(void (**)(_QWORD))(v1 + 48), *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 64));
}

uint64_t sub_10011DAD0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  int *v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  int *v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v27;

  v1 = type metadata accessor for CustodianshipRecords(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v27 = *(_QWORD *)(v2 + 64);
  swift_release(*(_QWORD *)(v0 + 16));

  v4 = v0 + ((v3 + 32) & ~v3);
  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v7(v4, v5);
  v8 = (int *)type metadata accessor for CustodianRecord(0);
  v7(v4 + v8[5], v5);
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v8[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v8[7] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v8[8] + 8));
  v9 = (uint64_t *)(v4 + v8[10]);
  v10 = v9[1];
  if (v10 >> 60 != 15)
    sub_10000F494(*v9, v10);
  sub_10000F494(*(_QWORD *)(v4 + v8[11]), *(_QWORD *)(v4 + v8[11] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v8[13] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v4 + v8[14] + 8));
  v11 = v4 + v8[16];
  v12 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (!v12(v11, 1, v5))
    v7(v11, v5);
  v13 = v4 + *(int *)(v1 + 20);
  v7(v13, v5);
  v14 = (int *)type metadata accessor for CustodianRecoveryInfoRecord(0);
  v7(v13 + v14[5], v5);
  swift_bridgeObjectRelease(*(_QWORD *)(v13 + v14[6] + 8));
  sub_10000F494(*(_QWORD *)(v13 + v14[7]), *(_QWORD *)(v13 + v14[7] + 8));
  v15 = (uint64_t *)(v13 + v14[8]);
  v16 = v15[1];
  if (v16 >> 60 != 15)
    sub_10000F494(*v15, v16);
  sub_10000F494(*(_QWORD *)(v13 + v14[9]), *(_QWORD *)(v13 + v14[9] + 8));
  v17 = v13 + v14[11];
  if (!v12(v17, 1, v5))
    v7(v17, v5);
  swift_bridgeObjectRelease(*(_QWORD *)(v13 + v14[12] + 8));
  v18 = v4 + *(int *)(v1 + 24);
  v7(v18, v5);
  v19 = (int *)type metadata accessor for CustodianHealthRecord(0);
  v7(v18 + v19[5], v5);
  v20 = v18 + v19[6];
  v21 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 8))(v20, v21);
  v22 = (uint64_t *)(v18 + v19[7]);
  v23 = v22[1];
  if (v23 >> 60 != 15)
    sub_10000F494(*v22, v23);
  v24 = (v27 + ((v3 + 32) & ~v3) + 7) & 0xFFFFFFFFFFFFFFF8;
  v25 = (v24 + 23) & 0xFFFFFFFFFFFFFFF8;
  sub_10000F494(*(_QWORD *)(v18 + v19[8]), *(_QWORD *)(v18 + v19[8] + 8));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + v24));
  swift_release(*(_QWORD *)(v0 + v25 + 8));
  return swift_deallocObject(v0, v25 + 16, v3 | 7);
}

uint64_t sub_10011DDB0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v5 = *(_QWORD *)(type metadata accessor for CustodianshipRecords(0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = (*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_100113BF4(a1, a2, *(_QWORD *)(v2 + 16), *(void **)(v2 + 24), v2 + v6, *(_QWORD *)(v2 + v7), *(_QWORD *)(v2 + v7 + 8), *(void (**)(_QWORD))(v2 + ((v7 + 23) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v2 + ((v7 + 23) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_10011DE3C()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  swift_errorRelease(*(_QWORD *)(v0 + 40));
  swift_release(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 56, 7);
}

void sub_10011DE78(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v3;

  sub_100110DC8(a1, a2, a3, v3, "%s Past Key: %s Bool: %{BOOL}d");
}

void sub_10011DE98(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v3;

  sub_100110DC8(a1, a2, a3, v3, "%s Current Key: %s Bool: %{BOOL}d");
}

uint64_t sub_10011DEB8()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10011DEDC()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;

  v1 = (int *)type metadata accessor for CustodianRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release(*(_QWORD *)(v0 + 16));
  v6 = v0 + v4;
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v0 + v4, v7);
  v9(v0 + v4 + v1[5], v7);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[7] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[8] + 8));
  v10 = (uint64_t *)(v0 + v4 + v1[10]);
  v11 = v10[1];
  if (v11 >> 60 != 15)
    sub_10000F494(*v10, v11);
  sub_10000F494(*(_QWORD *)(v6 + v1[11]), *(_QWORD *)(v6 + v1[11] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[13] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[14] + 8));
  v12 = v6 + v1[16];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v12, 1, v7))
    v9(v12, v7);
  v13 = (v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v14 = (v13 + 23) & 0xFFFFFFFFFFFFFFF8;
  v15 = (v14 + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v13 + 8));
  swift_release(*(_QWORD *)(v0 + v14));
  swift_release(*(_QWORD *)(v0 + v15));
  return swift_deallocObject(v0, v15 + 8, v3 | 7);
}

uint64_t sub_10011E068(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v5 = *(_QWORD *)(type metadata accessor for CustodianRecord(0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = (*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_10010C8C8(a1, a2, *(_QWORD *)(v2 + 16), v2 + v6, *(_QWORD *)(v2 + v7), *(_QWORD *)(v2 + v7 + 8), *(_QWORD *)(v2 + ((v7 + 23) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v2 + ((((v7 + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_10011E0E8()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[3]);
  swift_release(v0[4]);
  swift_release(v0[6]);
  swift_bridgeObjectRelease(v0[7]);
  swift_bridgeObjectRelease(v0[10]);
  return swift_deallocObject(v0, 88, 7);
}

id sub_10011E134()
{
  uint64_t v0;

  return sub_10010D2C4(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(unsigned __int8 *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD **)(v0 + 80));
}

uint64_t sub_10011E168()
{
  return sub_10011E7CC((void (*)(_QWORD))&_swift_release);
}

uint64_t sub_10011E174(char a1)
{
  uint64_t v1;

  return sub_10010EDE8(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_BYTE *)(v1 + 40), *(_BYTE *)(v1 + 41), *(_QWORD *)(v1 + 48));
}

uint64_t sub_10011E18C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10011E1B8(char a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1001119CC(a1, a2, *(_QWORD *)(v2 + 16), *(uint64_t (**)(_QWORD))(v2 + 24), *(_QWORD *)(v2 + 32));
}

uint64_t sub_10011E1C4()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[4]);
  swift_bridgeObjectRelease(v0[6]);
  swift_release(v0[8]);
  return swift_deallocObject(v0, 72, 7);
}

uint64_t sub_10011E200(char a1, uint64_t a2)
{
  uint64_t v2;

  return sub_10010EA7C(a1, a2, *(_QWORD *)(v2 + 16), *(_BYTE *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48), *(_QWORD *)(v2 + 56), *(_QWORD *)(v2 + 64));
}

uint64_t sub_10011E234()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;

  v1 = (int *)type metadata accessor for CustodianRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release(*(_QWORD *)(v0 + 16));
  v6 = v0 + v4;
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v0 + v4, v7);
  v9(v0 + v4 + v1[5], v7);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[6] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[7] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v4 + v1[8] + 8));
  v10 = (uint64_t *)(v0 + v4 + v1[10]);
  v11 = v10[1];
  if (v11 >> 60 != 15)
    sub_10000F494(*v10, v11);
  sub_10000F494(*(_QWORD *)(v6 + v1[11]), *(_QWORD *)(v6 + v1[11] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[13] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + v1[14] + 8));
  v12 = v6 + v1[16];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v12, 1, v7))
    v9(v12, v7);
  v13 = (v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v14 = (v13 + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_release(*(_QWORD *)(v0 + v13));
  swift_release(*(_QWORD *)(v0 + v14 + 8));
  return swift_deallocObject(v0, v14 + 16, v3 | 7);
}

uint64_t sub_10011E3B0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v3 = *(_QWORD *)(type metadata accessor for CustodianRecord(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = (*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_10010CE7C(a1, *(_QWORD *)(v1 + 16), v1 + v4, *(_QWORD *)(v1 + v5), *(uint64_t (**)(uint64_t))(v1 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF8)), *(uint64_t (**)(uint64_t))(v1 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_10011E414()
{
  char *v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(char *, uint64_t);
  uint64_t *v10;
  unint64_t v11;
  char *v12;

  v1 = (int *)type metadata accessor for CustodianRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 56) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release(*((_QWORD *)v0 + 2));
  swift_bridgeObjectRelease(*((_QWORD *)v0 + 4));
  swift_release(*((_QWORD *)v0 + 6));
  v6 = &v0[v4];
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(void (**)(char *, uint64_t))(v8 + 8);
  v9(&v0[v4], v7);
  v9(&v0[v4 + v1[5]], v7);
  swift_bridgeObjectRelease(*(_QWORD *)&v0[v4 + 8 + v1[6]]);
  swift_bridgeObjectRelease(*(_QWORD *)&v0[v4 + 8 + v1[7]]);
  swift_bridgeObjectRelease(*(_QWORD *)&v0[v4 + 8 + v1[8]]);
  v10 = (uint64_t *)&v0[v4 + v1[10]];
  v11 = v10[1];
  if (v11 >> 60 != 15)
    sub_10000F494(*v10, v11);
  sub_10000F494(*(_QWORD *)&v6[v1[11]], *(_QWORD *)&v6[v1[11] + 8]);
  swift_bridgeObjectRelease(*(_QWORD *)&v6[v1[13] + 8]);
  swift_bridgeObjectRelease(*(_QWORD *)&v6[v1[14] + 8]);
  v12 = &v6[v1[16]];
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v12, 1, v7))
    v9(v12, v7);
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_10011E570(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for CustodianRecord(0) - 8) + 80);
  return sub_10010F4A8(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(void (**)(uint64_t))(v1 + 40), *(_QWORD *)(v1 + 48), v1 + ((v3 + 56) & ~v3));
}

uint64_t sub_10011E5B8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10011E5DC()
{
  char *v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(char *, uint64_t);
  uint64_t *v10;
  unint64_t v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;

  v1 = (int *)type metadata accessor for CustodianRecord(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 40) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release(*((_QWORD *)v0 + 2));
  swift_errorRelease(*((_QWORD *)v0 + 3));
  swift_release(*((_QWORD *)v0 + 4));
  v6 = &v0[v4];
  v7 = type metadata accessor for UUID(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(void (**)(char *, uint64_t))(v8 + 8);
  v9(&v0[v4], v7);
  v9(&v0[v4 + v1[5]], v7);
  swift_bridgeObjectRelease(*(_QWORD *)&v0[v4 + 8 + v1[6]]);
  swift_bridgeObjectRelease(*(_QWORD *)&v0[v4 + 8 + v1[7]]);
  swift_bridgeObjectRelease(*(_QWORD *)&v0[v4 + 8 + v1[8]]);
  v10 = (uint64_t *)&v0[v4 + v1[10]];
  v11 = v10[1];
  if (v11 >> 60 != 15)
    sub_10000F494(*v10, v11);
  sub_10000F494(*(_QWORD *)&v6[v1[11]], *(_QWORD *)&v6[v1[11] + 8]);
  swift_bridgeObjectRelease(*(_QWORD *)&v6[v1[13] + 8]);
  swift_bridgeObjectRelease(*(_QWORD *)&v6[v1[14] + 8]);
  v12 = &v6[v1[16]];
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v12, 1, v7))
    v9(v12, v7);
  v13 = (v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v14 = v13 + 16;
  swift_release(*(_QWORD *)&v0[v13 + 8]);
  return swift_deallocObject(v0, v14, v3 | 7);
}

uint64_t sub_10011E758()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(type metadata accessor for CustodianRecord(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  return sub_10010D0B0(v0[2], v0[3], v0[4], (uint64_t)v0 + v2, *(uint64_t (**)(uint64_t))((char *)v0 + ((*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t sub_10011E7A4(uint64_t a1)
{
  uint64_t v1;

  return sub_10010D144(a1, *(_QWORD *)(v1 + 16), *(_QWORD **)(v1 + 24));
}

uint64_t sub_10011E7C0()
{
  return sub_10011E7CC((void (*)(_QWORD))&_swift_bridgeObjectRelease);
}

uint64_t sub_10011E7CC(void (*a1)(_QWORD))
{
  _QWORD *v1;

  swift_release(v1[2]);
  swift_release(v1[4]);
  a1(v1[6]);
  return swift_deallocObject(v1, 56, 7);
}

void sub_10011E80C(int a1, uint64_t a2)
{
  uint64_t v2;

  sub_10010B7A4(a1, a2, *(_QWORD *)(v2 + 16), *(void (**)(_QWORD))(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48));
}

uint64_t sub_10011E81C(char a1, uint64_t a2)
{
  uint64_t v2;

  return sub_10010C18C(a1, a2, *(uint64_t (**)(_QWORD, uint64_t))(v2 + 16));
}

uint64_t sub_10011E824()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_bridgeObjectRelease(v0[5]);
  swift_release(v0[7]);
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_10011E858(uint64_t a1, char a2)
{
  uint64_t v2;

  return sub_10010BEE4(a1, a2 & 1, *(_QWORD *)(v2 + 16), *(_BYTE *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 48), *(_QWORD *)(v2 + 56));
}

void sub_10011E894(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  id v28;
  NSString v29;
  NSString v30;
  id v31;
  void *v32;
  void *v33;
  id v34;
  Class isa;
  void *v36;
  uint64_t v37;
  _QWORD *v38;
  void *v39;
  uint64_t v40;
  id v41;
  NSString v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD v48[5];

  v2 = v1;
  v46 = a1;
  v3 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v44 = *(_QWORD *)(v3 - 8);
  v45 = v3;
  __chkstk_darwin(v3, v4);
  v6 = (char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v7, v8);
  v10 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v11, v12);
  v14 = (char *)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100024A20((uint64_t)(v2 + 2), (uint64_t)v48, &qword_1002929F0);
  if (v48[3])
  {
    v15 = sub_1000080B4(&qword_1002929F8);
    v16 = type metadata accessor for CloudKitStore();
    if ((swift_dynamicCast(&v47, v48, v15, v16, 6) & 1) != 0)
    {
      v17 = v47;
      v18 = v47 + 16;
      *(_QWORD *)(v47 + 24) = &off_100268690;
      swift_unknownObjectWeakAssign(v18, v2);
      swift_release(v17);
    }
  }
  else
  {
    sub_100004934((uint64_t)v48, &qword_1002929F0);
  }
  if (qword_10028AF60 != -1)
    swift_once(&qword_10028AF60, sub_1001FE2BC);
  v19 = qword_1002A8CF8;
  v20 = swift_bridgeObjectRetain(qword_1002A8CF8);
  v21 = sub_1001A1570(v20);
  swift_bridgeObjectRelease(v19);
  v22 = sub_100007764();
  static DispatchQoS.unspecified.getter(v22);
  v48[0] = &_swiftEmptyArrayStorage;
  v23 = sub_100005150((unint64_t *)&qword_10028C6D0, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v24 = sub_1000080B4(&qword_10028B9F0);
  v25 = sub_1000077A0((unint64_t *)&qword_10028C6E0, &qword_10028B9F0);
  dispatch thunk of SetAlgebra.init<A>(_:)(v48, v24, v25, v7, v23);
  (*(void (**)(char *, _QWORD, uint64_t))(v44 + 104))(v6, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v45);
  v26 = (void *)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000026, 0x800000010020D210, v14, v10, v6, 0);
  v27 = v2[10];
  v28 = objc_allocWithZone((Class)APSConnection);
  swift_bridgeObjectRetain(v27);
  v29 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v27);
  v30 = String._bridgeToObjectiveC()();
  v31 = objc_msgSend(v28, "initWithEnvironmentName:namedDelegatePort:queue:", v29, v30, v26);

  v32 = (void *)v2[11];
  v2[11] = v31;

  v33 = (void *)v2[11];
  if (v33)
  {
    v34 = v33;
    isa = Array._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v34, "_setEnabledTopics:", isa);

    v36 = (void *)v2[11];
    if (v36)
      objc_msgSend(v36, "setDelegate:", v2[8]);
  }
  v37 = *(_QWORD *)(v21 + 16);
  if (v37)
  {
    v38 = (_QWORD *)(v21 + 40);
    do
    {
      v39 = (void *)v2[11];
      if (v39)
      {
        v40 = *v38;
        swift_bridgeObjectRetain(*v38);
        v41 = v39;
        v42 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(v40);
        objc_msgSend(v41, "requestTokenForTopic:identifier:", v42, 0);

      }
      v38 += 2;
      --v37;
    }
    while (v37);
  }
  swift_release(v21);
  sub_10011EDC0(v46, 257, (uint64_t)sub_10011ECA0, 0);

}

void sub_10011ECA0(char a1)
{
  uint64_t v2;
  uint64_t v3;
  os_log_type_t v4;
  uint8_t *v5;
  NSObject *oslog;
  int v7;
  uint64_t v8;

  if (qword_10028ADB8 != -1)
    swift_once(&qword_10028ADB8, sub_100046CE4);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_100005288(v2, (uint64_t)qword_1002A89A8);
  oslog = Logger.logObject.getter(v3);
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(oslog, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v5 = 67109120;
    v7 = a1 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v7, &v8);
    _os_log_impl((void *)&_mh_execute_header, oslog, v4, "Completed launch pull of cloud changes: %{BOOL}d", v5, 8u);
    swift_slowDealloc(v5, -1, -1);

  }
  else
  {

  }
}

uint64_t sub_10011EDC0(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t result;
  uint64_t v29;
  dispatch_queue_t v30;
  _QWORD aBlock[5];
  uint64_t v32;

  v5 = v4;
  v29 = a1;
  v9 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 64);
  v13 = __chkstk_darwin(v9, v12);
  v14 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13, v15);
  v17 = (char *)&v29 - v16;
  v18 = swift_allocObject(&unk_100268EA0, 32, 7);
  *(_QWORD *)(v18 + 16) = a3;
  *(_QWORD *)(v18 + 24) = a4;
  v19 = swift_retain(a4);
  Date.init()(v19);
  v30 = *(dispatch_queue_t *)(v5 + 128);
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v14, v17, v9);
  v20 = *(unsigned __int8 *)(v10 + 80);
  v21 = (v20 + 50) & ~v20;
  v22 = swift_allocObject(&unk_100268EC8, v21 + v11, v20 | 7);
  v23 = v5;
  *(_QWORD *)(v22 + 16) = v5;
  *(_QWORD *)(v22 + 24) = sub_10012B868;
  v24 = v29;
  *(_QWORD *)(v22 + 32) = v18;
  *(_QWORD *)(v22 + 40) = v24;
  *(_BYTE *)(v22 + 48) = a2 & 1;
  *(_BYTE *)(v22 + 49) = HIBYTE(a2) & 1;
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(v22 + v21, v14, v9);
  v25 = swift_allocObject(&unk_100268EF0, 32, 7);
  *(_QWORD *)(v25 + 16) = sub_10012B8EC;
  *(_QWORD *)(v25 + 24) = v22;
  aBlock[4] = sub_1000A26B8;
  v32 = v25;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10002B11C;
  aBlock[3] = &unk_100268F08;
  v26 = _Block_copy(aBlock);
  v27 = v32;
  swift_retain(v23);
  swift_retain(v18);
  swift_retain(v25);
  swift_release(v27);
  dispatch_sync(v30, v26);
  _Block_release(v26);
  swift_release(v18);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v17, v9);
  LOBYTE(v9) = swift_isEscapingClosureAtFileLocation(v25, "", 123, 103, 26, 1);
  swift_release(v22);
  result = swift_release(v25);
  if ((v9 & 1) != 0)
    __break(1u);
  return result;
}

uint64_t sub_10011F004(char a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  int v10;
  uint64_t v11;

  if (qword_10028ADC0 != -1)
    swift_once(&qword_10028ADC0, sub_100046D04);
  v4 = type metadata accessor for Logger(0);
  v5 = sub_100005288(v4, (uint64_t)qword_1002A89C0);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v8 = 67109120;
    v10 = a1 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v10, &v11);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "✅ pullCloudUpdates: Invoking Completion with success %{BOOL}d", v8, 8u);
    swift_slowDealloc(v8, -1, -1);
  }

  return a2(a1 & 1);
}

void sub_10011F12C(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, __int16 a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  __int16 v18;
  uint8_t *v19;
  uint8_t *v20;
  uint64_t v21;
  char **v22;
  char *v23;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  _BOOL4 v32;
  uint8_t *v33;
  __int16 v34;
  uint8_t *v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(char *, uint64_t, uint64_t);
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(uint64_t, char *, uint64_t);
  objc_class *v49;
  _BYTE *v50;
  uint64_t (**v51)(uint64_t, uint64_t);
  id v52;
  uint64_t v53;
  uint64_t v54;
  _BYTE *v55;
  uint64_t (**v56)(uint64_t, uint64_t);
  id v57;
  void *v58;
  void *v59;
  id v60;
  uint64_t v61;
  NSObject *v62;
  os_log_type_t v63;
  uint8_t *v64;
  void *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void (*v69)(char *, uint64_t, uint64_t);
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  objc_super v75;
  objc_super v76;
  _BYTE v77[24];

  v72 = a4;
  v11 = type metadata accessor for Date(0);
  v71 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11, v12);
  v73 = v13;
  v74 = (char *)&v66 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_10028ADC0 != -1)
    swift_once(&qword_10028ADC0, sub_100046D04);
  v14 = type metadata accessor for Logger(0);
  v15 = sub_100005288(v14, (uint64_t)qword_1002A89C0);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = a5;
    v19 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v19 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "🎒 pullCloudUpdates: Queuing completion", v19, 2u);
    v20 = v19;
    a5 = v18;
    swift_slowDealloc(v20, -1, -1);
  }

  v21 = swift_allocObject(&unk_100268F40, 32, 7);
  *(_QWORD *)(v21 + 16) = a2;
  *(_QWORD *)(v21 + 24) = a3;
  v22 = (char **)(a1 + 12);
  swift_beginAccess(a1 + 12, v77, 33, 0);
  v23 = (char *)a1[12];
  swift_retain(a3);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v23);
  a1[12] = v23;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    v23 = sub_10013460C(0, *((_QWORD *)v23 + 2) + 1, 1, v23);
    *v22 = v23;
  }
  v26 = *((_QWORD *)v23 + 2);
  v25 = *((_QWORD *)v23 + 3);
  if (v26 >= v25 >> 1)
  {
    v23 = sub_10013460C((char *)(v25 > 1), v26 + 1, 1, v23);
    *v22 = v23;
  }
  *((_QWORD *)v23 + 2) = v26 + 1;
  v27 = &v23[16 * v26];
  *((_QWORD *)v27 + 4) = sub_10012B948;
  *((_QWORD *)v27 + 5) = v21;
  v28 = swift_endAccess(v77);
  v29 = a1[14];
  v30 = Logger.logObject.getter(v28);
  v31 = static os_log_type_t.debug.getter();
  v32 = os_log_type_enabled(v30, v31);
  if (v29)
  {
    if (v32)
    {
      v33 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v33 = 0;
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "😎 pullCloudUpdates: Pull underway. NOT Configuring Operations. Returning.", v33, 2u);
      swift_slowDealloc(v33, -1, -1);
    }
  }
  else
  {
    v70 = v15;
    if (v32)
    {
      v34 = a5;
      v35 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v35 = 0;
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "🎒 pullCloudUpdates: Configuring Operations", v35, 2u);
      v36 = v35;
      a5 = v34;
      swift_slowDealloc(v36, -1, -1);
    }

    v37 = swift_allocObject(&unk_100268F68, 17, 7);
    *(_BYTE *)(v37 + 16) = 0;
    v38 = v71;
    v39 = *(void (**)(char *, uint64_t, uint64_t))(v71 + 16);
    v68 = a6;
    v69 = v39;
    v40 = v74;
    v39(v74, a6, v11);
    v41 = *(unsigned __int8 *)(v38 + 80);
    v42 = v11;
    v43 = (v41 + 48) & ~v41;
    v44 = v73;
    v67 = v41 | 7;
    v45 = swift_allocObject(&unk_100268F90, v43 + v73, v41 | 7);
    v46 = v72;
    *(_QWORD *)(v45 + 16) = a1;
    *(_QWORD *)(v45 + 24) = v46;
    *(_BYTE *)(v45 + 32) = a5 & 1;
    *(_BYTE *)(v45 + 33) = HIBYTE(a5) & 1;
    *(_QWORD *)(v45 + 40) = v37;
    v47 = v45 + v43;
    v48 = *(void (**)(uint64_t, char *, uint64_t))(v38 + 32);
    v48(v47, v40, v42);
    v49 = (objc_class *)type metadata accessor for AsyncOperation();
    v50 = objc_allocWithZone(v49);
    v50[OBJC_IVAR____TtC13appleaccountd14AsyncOperation_state] = 0;
    v51 = (uint64_t (**)(uint64_t, uint64_t))&v50[OBJC_IVAR____TtC13appleaccountd14AsyncOperation_workBlock];
    *v51 = sub_10012B980;
    v51[1] = (uint64_t (*)(uint64_t, uint64_t))v45;
    v76.receiver = v50;
    v76.super_class = v49;
    swift_retain(a1);
    swift_retain(v37);
    v52 = objc_msgSendSuper2(&v76, "init");
    v69(v40, v68, v42);
    v53 = (v41 + 32) & ~v41;
    v54 = swift_allocObject(&unk_100268FB8, v53 + v44, v67);
    *(_QWORD *)(v54 + 16) = a1;
    *(_QWORD *)(v54 + 24) = v37;
    v48(v54 + v53, v40, v42);
    v55 = objc_allocWithZone(v49);
    v55[OBJC_IVAR____TtC13appleaccountd14AsyncOperation_state] = 0;
    v56 = (uint64_t (**)(uint64_t, uint64_t))&v55[OBJC_IVAR____TtC13appleaccountd14AsyncOperation_workBlock];
    *v56 = sub_10012BA68;
    v56[1] = (uint64_t (*)(uint64_t, uint64_t))v54;
    v75.receiver = v55;
    v75.super_class = v49;
    swift_retain(a1);
    swift_retain(v37);
    v57 = objc_msgSendSuper2(&v75, "init");
    objc_msgSend(v57, "addDependency:", v52);
    v58 = (void *)a1[15];
    a1[15] = v57;
    v30 = v57;

    v59 = (void *)a1[14];
    a1[14] = v52;
    v60 = v52;

    v62 = Logger.logObject.getter(v61);
    v63 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v62, v63))
    {
      v64 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v64 = 0;
      _os_log_impl((void *)&_mh_execute_header, v62, v63, "🟢 pullCloudUpdates: Starting Pull & Comp Ops", v64, 2u);
      swift_slowDealloc(v64, -1, -1);
    }

    v65 = (void *)a1[13];
    objc_msgSend(v65, "addOperation:", v30);
    objc_msgSend(v65, "addOperation:", v60);
    swift_release(v37);

  }
}

uint64_t sub_10011F684(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int16 a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  _QWORD v20[2];

  v20[0] = a4;
  v20[1] = a3;
  v12 = type metadata accessor for Date(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  __chkstk_darwin(v12, v15);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))((char *)v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), a7, v12);
  v16 = *(unsigned __int8 *)(v13 + 80);
  v17 = (v16 + 40) & ~v16;
  v18 = (char *)swift_allocObject(&unk_100269058, v17 + v14, v16 | 7);
  *((_QWORD *)v18 + 2) = a6;
  *((_QWORD *)v18 + 3) = a1;
  *((_QWORD *)v18 + 4) = a2;
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(&v18[v17], (char *)v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), v12);
  swift_retain(a6);
  swift_retain(a2);
  sub_10011FE20(v20[0], a5 & 0x101, (uint64_t (*)(_QWORD))sub_10012BBF8, (uint64_t)v18);
  return swift_release(v18);
}

void sub_10011F7A0(char a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  double v24;
  void (*v25)(_BYTE *, uint64_t);
  double v26;
  _BYTE v27[24];

  v9 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v9 - 8);
  v12 = __chkstk_darwin(v9, v11);
  v14 = &v27[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v12, v15);
  v17 = &v27[-v16 - 8];
  v18 = swift_beginAccess(a2 + 16, v27, 1, 0);
  *(_BYTE *)(a2 + 16) = a1;
  a3(v18);
  if (qword_10028ADC0 != -1)
    swift_once(&qword_10028ADC0, sub_100046D04);
  v19 = type metadata accessor for Logger(0);
  sub_100005288(v19, (uint64_t)qword_1002A89C0);
  v20 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v10 + 16))(v17, a5, v9);
  v21 = Logger.logObject.getter(v20);
  v22 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v21, v22))
  {
    v23 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v23 = 134217984;
    Date.init()();
    v24 = Date.timeIntervalSince(_:)(v17);
    v25 = *(void (**)(_BYTE *, uint64_t))(v10 + 8);
    v25(v14, v9);
    v26 = v24;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, v27);
    v25(v17, v9);
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "✅ pullCloudUpdates: PullOp Complete ⏰ %f", v23, 0xCu);
    swift_slowDealloc(v23, -1, -1);
  }
  else
  {
    (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v17, v9);
  }

}

uint64_t sub_10011F9A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  dispatch_queue_t v23;
  _QWORD aBlock[5];
  uint64_t v25;

  v10 = type metadata accessor for Date(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  __chkstk_darwin(v10, v13);
  v14 = a4 + 16;
  v23 = *(dispatch_queue_t *)(a3 + 128);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), a5, v10);
  v15 = *(unsigned __int8 *)(v11 + 80);
  v16 = (v15 + 48) & ~v15;
  v17 = (char *)swift_allocObject(&unk_100268FE0, v16 + v12, v15 | 7);
  *((_QWORD *)v17 + 2) = a3;
  *((_QWORD *)v17 + 3) = v14;
  *((_QWORD *)v17 + 4) = a1;
  *((_QWORD *)v17 + 5) = a2;
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(&v17[v16], (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v10);
  v18 = swift_allocObject(&unk_100269008, 32, 7);
  *(_QWORD *)(v18 + 16) = sub_10012BB38;
  *(_QWORD *)(v18 + 24) = v17;
  aBlock[4] = sub_10012BD50;
  v25 = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10002B11C;
  aBlock[3] = &unk_100269020;
  v19 = _Block_copy(aBlock);
  v20 = v25;
  swift_retain(a3);
  swift_retain(a2);
  swift_retain(v18);
  swift_release(v20);
  dispatch_sync(v23, v19);
  _Block_release(v19);
  LOBYTE(a2) = swift_isEscapingClosureAtFileLocation(v18, "", 123, 117, 43, 1);
  swift_release(v17);
  result = swift_release(v18);
  if ((a2 & 1) != 0)
    __break(1u);
  return result;
}

void sub_10011FB6C(_QWORD *a1, _BYTE *a2, void (*a3)(uint64_t), uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  void (*v21)(double *);
  uint64_t v22;
  void *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  char *v30;
  double v31;
  void (*v32)(char *, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  void (*v37)(uint64_t);
  double v38;
  _BYTE v39[24];
  _BYTE v40[24];

  v37 = a3;
  v9 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v9 - 8);
  v12 = __chkstk_darwin(v9, v11);
  v36 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12, v14);
  v16 = (char *)&v33 - v15;
  swift_beginAccess(a1 + 12, v40, 1, 0);
  v17 = a1[12];
  v18 = *(_QWORD *)(v17 + 16);
  if (v18)
  {
    v33 = a4;
    v34 = a5;
    v35 = v10;
    swift_bridgeObjectRetain(v17);
    swift_beginAccess(a2, v39, 0, 0);
    v19 = (uint64_t *)(v17 + 40);
    do
    {
      v21 = (void (*)(double *))*(v19 - 1);
      v20 = *v19;
      LOBYTE(v38) = *a2;
      swift_retain(v20);
      v21(&v38);
      swift_release(v20);
      v19 += 2;
      --v18;
    }
    while (v18);
    swift_bridgeObjectRelease(v17);
    v17 = a1[12];
    a5 = v34;
    v10 = v35;
  }
  a1[12] = &_swiftEmptyArrayStorage;
  v22 = swift_bridgeObjectRelease(v17);
  v37(v22);
  v23 = (void *)a1[15];
  a1[15] = 0;

  v24 = (void *)a1[14];
  a1[14] = 0;

  if (qword_10028ADC0 != -1)
    swift_once(&qword_10028ADC0, sub_100046D04);
  v25 = type metadata accessor for Logger(0);
  sub_100005288(v25, (uint64_t)qword_1002A89C0);
  v26 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 16))(v16, a5, v9);
  v27 = Logger.logObject.getter(v26);
  v28 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v27, v28))
  {
    v29 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v29 = 134217984;
    v30 = v36;
    Date.init()();
    v31 = Date.timeIntervalSince(_:)(v16);
    v32 = *(void (**)(char *, uint64_t))(v10 + 8);
    v32(v30, v9);
    v38 = v31;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, v39);
    v32(v16, v9);
    _os_log_impl((void *)&_mh_execute_header, v27, v28, "✅ pullCloudUpdates: CompOp Complete ⏰ %f", v29, 0xCu);
    swift_slowDealloc(v29, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v16, v9);
  }

}

uint64_t sub_10011FE20(char a1, int a2, uint64_t (*a3)(_QWORD), uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t *v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  id v30;
  id v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  id v35;
  id v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  NSObject *v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void **v50;
  _QWORD *v51;
  char *v52;
  NSObject *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  NSObject *v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  id v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  _QWORD *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  char *v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  void *v78;
  _QWORD *v79;
  uint64_t v81;
  uint64_t v82;
  uint64_t (*v83)(_QWORD);
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  unint64_t v92;
  char *v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  void *v101;
  _QWORD aBlock[3];
  void *v103;
  uint64_t (*v104)();
  _QWORD *v105;

  v91 = a2;
  v7 = type metadata accessor for DispatchWorkItemFlags(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  v11 = (char *)&v81 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchQoS.QoSClass(0);
  v94 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12, v13);
  v93 = (char *)&v81 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v99 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v99, v15);
  v100 = (char *)&v81 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for DispatchQoS(0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17, v19);
  v95 = (char *)&v81 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v96 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v92 = *(_QWORD *)(v96 - 8);
  __chkstk_darwin(v96, v21);
  v97 = (char *)&v81 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_10012A324(a1);
  v24 = v23[2];
  if (v24)
  {
    v82 = v12;
    v83 = a3;
    v84 = a4;
    v85 = v18;
    v86 = v17;
    v87 = v11;
    v88 = v8;
    v89 = v7;
    v98 = (uint64_t)v23;
    v25 = v23 + 5;
    v26 = (char *)&_swiftEmptyArrayStorage;
    do
    {
      v27 = *(v25 - 1);
      v28 = *v25;
      v29 = qword_10028AF00;
      swift_bridgeObjectRetain_n(*v25, 2);
      if (v29 != -1)
        swift_once(&qword_10028AF00, sub_1001FD458);
      v30 = sub_1001FD4C0(v27, v28);
      v31 = objc_msgSend(v30, "privateCloudDatabase");

      if ((swift_isUniquelyReferenced_nonNull_native(v26) & 1) == 0)
        v26 = sub_100134738(0, *((_QWORD *)v26 + 2) + 1, 1, v26);
      v33 = *((_QWORD *)v26 + 2);
      v32 = *((_QWORD *)v26 + 3);
      if (v33 >= v32 >> 1)
        v26 = sub_100134738((char *)(v32 > 1), v33 + 1, 1, v26);
      *((_QWORD *)v26 + 2) = v33 + 1;
      v34 = &v26[24 * v33];
      *((_QWORD *)v34 + 4) = v27;
      *((_QWORD *)v34 + 5) = v28;
      *((_QWORD *)v34 + 6) = v31;
      v35 = sub_1001FD4C0(v27, v28);
      v36 = objc_msgSend(v35, "sharedCloudDatabase");

      v38 = *((_QWORD *)v26 + 2);
      v37 = *((_QWORD *)v26 + 3);
      if (v38 >= v37 >> 1)
        v26 = sub_100134738((char *)(v37 > 1), v38 + 1, 1, v26);
      v25 += 2;
      *((_QWORD *)v26 + 2) = v38 + 1;
      v39 = &v26[24 * v38];
      *((_QWORD *)v39 + 4) = v27;
      *((_QWORD *)v39 + 5) = v28;
      *((_QWORD *)v39 + 6) = v36;
      --v24;
    }
    while (v24);
    swift_bridgeObjectRelease(v98);
    v40 = dispatch_group_create();
    v98 = swift_allocObject(&unk_100268D60, 24, 7);
    *(_QWORD *)(v98 + 16) = &_swiftEmptyDictionarySingleton;
    v41 = sub_100007764();
    v42 = v97;
    v43 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v92 + 104))(v97, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v96);
    v44 = v95;
    static DispatchQoS.unspecified.getter(v43);
    aBlock[0] = &_swiftEmptyArrayStorage;
    v45 = sub_100005150((unint64_t *)&qword_10028C6D0, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
    v46 = sub_1000080B4(&qword_10028B9F0);
    v47 = sub_1000077A0((unint64_t *)&qword_10028C6E0, &qword_10028B9F0);
    v48 = (uint64_t)v100;
    dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v46, v47, v99, v45);
    v92 = v41;
    v97 = (char *)OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD00000000000003BLL, 0x800000010020D1B0, v44, v48, v42, 0);
    v49 = *((_QWORD *)v26 + 2);
    if (v49)
    {
      v99 = v90 + 16;
      LODWORD(v96) = v91 & 0x101;
      v50 = (void **)(v26 + 48);
      do
      {
        v58 = (uint64_t)*(v50 - 2);
        v59 = (uint64_t)*(v50 - 1);
        v60 = *v50;
        swift_bridgeObjectRetain(v59);
        v61 = v60;
        dispatch_group_enter(v40);
        sub_100024A20(v99, (uint64_t)aBlock, &qword_1002929F0);
        if (v103)
        {
          sub_10000732C(aBlock, (uint64_t)v103);
          v51 = (_QWORD *)swift_allocObject(&unk_100268DD8, 56, 7);
          v51[2] = v58;
          v51[3] = v59;
          v100 = (char *)v58;
          v52 = v97;
          v53 = v40;
          v54 = v98;
          v51[4] = v97;
          v51[5] = v54;
          v51[6] = v53;
          swift_bridgeObjectRetain(v59);
          v55 = v52;
          v56 = v54;
          v40 = v53;
          swift_retain(v56);
          v57 = v53;
          sub_1000986F0(v61, (uint64_t)v100, v59, v96, (uint64_t)sub_10012B7BC, (uint64_t)v51);
          swift_release(v51);
          swift_bridgeObjectRelease(v59);

          sub_100006F58(aBlock);
        }
        else
        {
          swift_bridgeObjectRelease(v59);

          sub_100004934((uint64_t)aBlock, &qword_1002929F0);
        }
        v50 += 3;
        --v49;
      }
      while (v49);
    }
    swift_bridgeObjectRelease(v26);
    v63 = v93;
    v62 = v94;
    v64 = v82;
    (*(void (**)(char *, _QWORD, uint64_t))(v94 + 104))(v93, enum case for DispatchQoS.QoSClass.default(_:), v82);
    v100 = (char *)static OS_dispatch_queue.global(qos:)(v63);
    (*(void (**)(char *, uint64_t))(v62 + 8))(v63, v64);
    v65 = (_QWORD *)swift_allocObject(&unk_100268D88, 48, 7);
    v66 = v97;
    v67 = v98;
    v65[2] = v97;
    v65[3] = v67;
    v68 = v84;
    v65[4] = v83;
    v65[5] = v68;
    v104 = sub_10012B774;
    v105 = v65;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1000051D0;
    v103 = &unk_100268DA0;
    v69 = _Block_copy(aBlock);
    v70 = v66;
    swift_retain(v67);
    v71 = swift_retain(v68);
    v72 = v95;
    static DispatchQoS.unspecified.getter(v71);
    v101 = &_swiftEmptyArrayStorage;
    v73 = sub_100005150((unint64_t *)&qword_10028CD20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v74 = sub_1000080B4((uint64_t *)&unk_100295A00);
    v75 = sub_1000077A0((unint64_t *)&qword_10028CD30, (uint64_t *)&unk_100295A00);
    v76 = v87;
    v77 = v89;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v101, v74, v75, v89, v73);
    v78 = v100;
    OS_dispatch_group.notify(qos:flags:queue:execute:)(v72, v76, v100, v69);
    _Block_release(v69);

    (*(void (**)(char *, uint64_t))(v88 + 8))(v76, v77);
    (*(void (**)(char *, uint64_t))(v85 + 8))(v72, v86);
    v79 = v105;
    swift_release(v67);
    return swift_release(v79);
  }
  else
  {
    swift_bridgeObjectRelease(v23);
    return a3(0);
  }
}

void sub_10012058C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, NSObject *a6)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint8_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  Class isa;
  NSString v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  NSObject *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t aBlock[5];
  _QWORD *v69;
  void *v70;
  uint64_t v71;

  v66 = a5;
  v10 = type metadata accessor for Date(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  v14 = (char *)&v57 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for DispatchWorkItemFlags(0);
  v16 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15, v17);
  v67 = (char *)&v57 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for DispatchQoS(0);
  v21 = __chkstk_darwin(v19, v20);
  v24 = (char *)&v57 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    v61 = v24;
    v62 = v22;
    v63 = v21;
    v64 = v16;
    v65 = v15;
    swift_errorRetain(a1);
    if (qword_10028ADB8 != -1)
      swift_once(&qword_10028ADB8, sub_100046CE4);
    v25 = type metadata accessor for Logger(0);
    sub_100005288(v25, (uint64_t)qword_1002A89A8);
    swift_bridgeObjectRetain(a3);
    swift_errorRetain(a1);
    swift_bridgeObjectRetain(a3);
    v26 = swift_errorRetain(a1);
    v27 = Logger.logObject.getter(v26);
    v28 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v27, v28))
    {
      v29 = swift_slowAlloc(22, -1);
      v58 = (uint64_t *)swift_slowAlloc(8, -1);
      v59 = swift_slowAlloc(32, -1);
      aBlock[0] = v59;
      *(_DWORD *)v29 = 136315394;
      v60 = a6;
      swift_bridgeObjectRetain(a3);
      v70 = (void *)sub_1001DEF4C(a2, a3, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71);
      swift_bridgeObjectRelease_n(a3, 3);
      *(_WORD *)(v29 + 12) = 2112;
      v30 = a2;
      v31 = _convertErrorToNSError(_:)(a1);
      v70 = (void *)v31;
      a6 = v60;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71);
      v32 = v58;
      *v58 = v31;
      a2 = v30;
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "Error fetching ckDatabase (%s) changes: %@", (uint8_t *)v29, 0x16u);
      v33 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v32, 1, v33);
      swift_slowDealloc(v32, -1, -1);
      v34 = v59;
      swift_arrayDestroy(v59, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v34, -1, -1);
      swift_slowDealloc(v29, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n(a3, 2);
      swift_errorRelease(a1);
      swift_errorRelease(a1);
    }

    v43 = (_QWORD *)swift_allocObject(&unk_100268E00, 48, 7);
    v44 = v66;
    v43[2] = v66;
    v43[3] = a2;
    v43[4] = a3;
    v43[5] = a1;
    aBlock[4] = (uint64_t)sub_10012B800;
    v69 = v43;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_1000051D0;
    aBlock[3] = (uint64_t)&unk_100268E18;
    v45 = _Block_copy(aBlock);
    swift_bridgeObjectRetain(a3);
    swift_errorRetain(a1);
    v46 = swift_retain(v44);
    v47 = v61;
    static DispatchQoS.unspecified.getter(v46);
    v70 = &_swiftEmptyArrayStorage;
    v48 = sub_100005150((unint64_t *)&qword_10028CD20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v49 = sub_1000080B4((uint64_t *)&unk_100295A00);
    v50 = sub_1000077A0((unint64_t *)&qword_10028CD30, (uint64_t *)&unk_100295A00);
    v51 = v67;
    v52 = v49;
    v53 = v65;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v70, v52, v50, v65, v48);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v47, v51, v45);
    _Block_release(v45);
    swift_errorRelease(a1);
    (*(void (**)(char *, uint64_t))(v64 + 8))(v51, v53);
    (*(void (**)(char *, uint64_t))(v62 + 8))(v47, v63);
    swift_release(v69);
  }
  else
  {
    if (qword_10028ADC0 != -1)
      swift_once(&qword_10028ADC0, sub_100046D04);
    v35 = type metadata accessor for Logger(0);
    sub_100005288(v35, (uint64_t)qword_1002A89C0);
    v36 = swift_bridgeObjectRetain_n(a3, 2);
    v37 = Logger.logObject.getter(v36);
    v38 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v37, v38))
    {
      v39 = (uint8_t *)swift_slowAlloc(12, -1);
      v40 = swift_slowAlloc(32, -1);
      v60 = a6;
      v41 = v40;
      *(_DWORD *)v39 = 136315138;
      v67 = (char *)(v39 + 4);
      aBlock[0] = v40;
      swift_bridgeObjectRetain(a3);
      v70 = (void *)sub_1001DEF4C(a2, a3, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71);
      swift_bridgeObjectRelease_n(a3, 3);
      _os_log_impl((void *)&_mh_execute_header, v37, v38, "Successfully fetched ckDatabase (%s) changes", v39, 0xCu);
      swift_arrayDestroy(v41, 1, (char *)&type metadata for Any + 8);
      v42 = v41;
      a6 = v60;
      swift_slowDealloc(v42, -1, -1);
      swift_slowDealloc(v39, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a3, 2);
    }
    v54 = objc_msgSend((id)objc_opt_self(NSUserDefaults), "standardUserDefaults");
    Date.init()();
    isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
    v56 = String._bridgeToObjectiveC()();
    objc_msgSend(v54, "setObject:forKey:", isa, v56);

  }
  dispatch_group_leave(a6);
}

uint64_t sub_100120C14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  uint64_t v11;
  _BYTE v12[24];

  swift_beginAccess(a1 + 16, v12, 33, 0);
  swift_bridgeObjectRetain(a3);
  swift_errorRetain(a4);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(a1 + 16));
  v11 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0x8000000000000000;
  sub_10001F710(a4, a2, a3, isUniquelyReferenced_nonNull_native);
  v9 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v11;
  swift_bridgeObjectRelease(a3);
  swift_bridgeObjectRelease(v9);
  return swift_endAccess(v12);
}

uint64_t sub_100120CCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  _QWORD *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  void *v25;
  _QWORD aBlock[5];
  _QWORD *v27;

  v24 = a1;
  v7 = type metadata accessor for DispatchWorkItemFlags(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchQoS(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12, v14);
  v16 = (char *)&v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = (_QWORD *)swift_allocObject(&unk_100268E50, 40, 7);
  v17[2] = a2;
  v17[3] = a3;
  v17[4] = a4;
  aBlock[4] = sub_10012B838;
  v27 = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000051D0;
  aBlock[3] = &unk_100268E68;
  v18 = _Block_copy(aBlock);
  swift_retain(a2);
  v19 = swift_retain(a4);
  static DispatchQoS.unspecified.getter(v19);
  v25 = &_swiftEmptyArrayStorage;
  v20 = sub_100005150((unint64_t *)&qword_10028CD20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v21 = sub_1000080B4((uint64_t *)&unk_100295A00);
  v22 = sub_1000077A0((unint64_t *)&qword_10028CD30, (uint64_t *)&unk_100295A00);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v25, v21, v22, v7, v20);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v16, v11, v18);
  _Block_release(v18);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
  return swift_release(v27);
}

uint64_t sub_100120EC0(uint64_t a1, uint64_t (*a2)(BOOL))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v25;
  uint64_t v26;
  _BYTE v27[24];
  uint64_t v28;
  _BYTE v29[24];

  v4 = a1 + 16;
  swift_beginAccess(a1 + 16, v29, 0, 0);
  v5 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 16);
  if (v5)
  {
    if (qword_10028ADB8 != -1)
      swift_once(&qword_10028ADB8, sub_100046CE4);
    v6 = type metadata accessor for Logger(0);
    sub_100005288(v6, (uint64_t)qword_1002A89A8);
    v7 = swift_retain_n(a1, 2);
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v8, v9))
    {

      swift_release_n(a1, 2);
      return a2(v5 == 0);
    }
    v10 = (uint8_t *)swift_slowAlloc(12, -1);
    v25 = v5;
    v11 = swift_slowAlloc(32, -1);
    v28 = v11;
    *(_DWORD *)v10 = 136315138;
    swift_beginAccess(v4, v27, 0, 0);
    v12 = *(_QWORD *)(a1 + 16);
    swift_bridgeObjectRetain(v12);
    v13 = sub_1000080B4(&qword_10028E850);
    v14 = Dictionary.description.getter(v12, &type metadata for String, v13, &protocol witness table for String);
    v16 = v15;
    swift_bridgeObjectRelease(v12);
    v26 = sub_1001DEF4C(v14, v16, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, v27);
    swift_release_n(a1, 2);
    swift_bridgeObjectRelease(v16);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Failed syncing (pulling) cloudkit changes from server: %s", v10, 0xCu);
    swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
    v17 = v11;
    v5 = v25;
    swift_slowDealloc(v17, -1, -1);
    v18 = v10;
  }
  else
  {
    if (qword_10028ADB8 != -1)
      swift_once(&qword_10028ADB8, sub_100046CE4);
    v19 = type metadata accessor for Logger(0);
    v20 = sub_100005288(v19, (uint64_t)qword_1002A89A8);
    v8 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.default.getter(v21);
    if (!os_log_type_enabled(v8, v22))
      goto LABEL_11;
    v23 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v23 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v22, "Successfully synced (pulled) cloudkit changes from server", v23, 2u);
    v18 = v23;
  }
  swift_slowDealloc(v18, -1, -1);
LABEL_11:

  return a2(v5 == 0);
}

uint64_t sub_10012119C()
{
  uint64_t v0;

  sub_100004934(v0 + 16, &qword_1002929F0);
  swift_release(*(_QWORD *)(v0 + 56));

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 80));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 96));

  return v0;
}

uint64_t sub_100121208()
{
  uint64_t v0;

  sub_10012119C();
  return swift_deallocClassInstance(v0, 136, 7);
}

uint64_t type metadata accessor for CloudKitSyncManager()
{
  return objc_opt_self(_TtC13appleaccountd19CloudKitSyncManager);
}

void sub_100121248(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD), uint64_t *a4, uint64_t a5, unint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v12 = a3(0);
  v14 = __chkstk_darwin(v12, v13);
  v16 = (char *)&v49 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14, v17);
  v19 = (char *)&v49 - v18;
  v20 = sub_1000080B4(a4);
  __chkstk_darwin(v20, v21);
  v23 = (uint64_t *)((char *)&v49 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100024A20(a1, (uint64_t)v23, a4);
  if (swift_getEnumCaseMultiPayload(v23, v20) == 1)
  {
    v24 = *v23;
    if (qword_10028ADB8 != -1)
      swift_once(&qword_10028ADB8, sub_100046CE4);
    v25 = type metadata accessor for Logger(0);
    sub_100005288(v25, (uint64_t)qword_1002A89A8);
    sub_100027FE8(a2, (uint64_t)v19, a3);
    swift_errorRetain(v24);
    v26 = swift_errorRetain(v24);
    v27 = Logger.logObject.getter(v26);
    v28 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v27, v28))
    {
      v29 = swift_slowAlloc(22, -1);
      v30 = (uint64_t *)swift_slowAlloc(8, -1);
      v31 = swift_slowAlloc(32, -1);
      v50 = v31;
      v52 = v31;
      *(_DWORD *)v29 = 136315394;
      v32 = UUID.uuidString.getter(v31);
      v34 = v33;
      v51 = sub_1001DEF4C(v32, v33, &v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, &v52);
      swift_bridgeObjectRelease(v34);
      sub_100028388((uint64_t)v19, a3);
      *(_WORD *)(v29 + 12) = 2112;
      v35 = _convertErrorToNSError(_:)(v24);
      v51 = v35;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, &v52);
      *v30 = v35;
      swift_errorRelease(v24);
      swift_errorRelease(v24);
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "Failed to save record %s with error: %@", (uint8_t *)v29, 0x16u);
      v36 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v30, 1, v36);
      swift_slowDealloc(v30, -1, -1);
      v37 = v50;
      swift_arrayDestroy(v50, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v37, -1, -1);
      swift_slowDealloc(v29, -1, -1);

      swift_errorRelease(v24);
    }
    else
    {
      swift_errorRelease(v24);
      sub_100028388((uint64_t)v19, a3);
      swift_errorRelease(v24);
      swift_errorRelease(v24);

    }
  }
  else
  {
    v38 = a6;
    if (qword_10028ADB8 != -1)
      swift_once(&qword_10028ADB8, sub_100046CE4);
    v39 = type metadata accessor for Logger(0);
    sub_100005288(v39, (uint64_t)qword_1002A89A8);
    v40 = sub_100027FE8(a2, (uint64_t)v16, a3);
    v41 = Logger.logObject.getter(v40);
    v42 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v41, v42))
    {
      v43 = swift_slowAlloc(22, -1);
      v50 = swift_slowAlloc(64, -1);
      v52 = v50;
      *(_DWORD *)v43 = 136315394;
      v51 = sub_1001DEF4C(a5, v38, &v52);
      v44 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, &v52);
      *(_WORD *)(v43 + 12) = 2080;
      v45 = UUID.uuidString.getter(v44);
      v47 = v46;
      v51 = sub_1001DEF4C(v45, v46, &v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, &v52);
      swift_bridgeObjectRelease(v47);
      sub_100028388((uint64_t)v16, a3);
      _os_log_impl((void *)&_mh_execute_header, v41, v42, "Successfully saved %s %s", (uint8_t *)v43, 0x16u);
      v48 = v50;
      swift_arrayDestroy(v50, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v48, -1, -1);
      swift_slowDealloc(v43, -1, -1);
    }
    else
    {
      sub_100028388((uint64_t)v16, a3);
    }

    sub_100004934((uint64_t)v23, a4);
  }
}

void sub_100121714(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD), uint64_t *a4, uint64_t a5, unint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  int v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  _BYTE v49[12];
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v52 = a5;
  v11 = a3(0);
  v13 = __chkstk_darwin(v11, v12);
  v15 = &v49[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v13, v16);
  v18 = &v49[-v17];
  v19 = sub_1000080B4(a4);
  __chkstk_darwin(v19, v20);
  v22 = (uint64_t *)&v49[-((v21 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_100024A20(a1, (uint64_t)v22, a4);
  if (swift_getEnumCaseMultiPayload(v22, v19) == 1)
  {
    v23 = *v22;
    if (qword_10028ADB8 != -1)
      swift_once(&qword_10028ADB8, sub_100046CE4);
    v24 = type metadata accessor for Logger(0);
    sub_100005288(v24, (uint64_t)qword_1002A89A8);
    sub_100027FE8(a2, (uint64_t)v18, a3);
    swift_errorRetain(v23);
    v25 = swift_errorRetain(v23);
    v26 = Logger.logObject.getter(v25);
    v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v27))
    {
      v28 = swift_slowAlloc(22, -1);
      v29 = (uint64_t *)swift_slowAlloc(8, -1);
      v30 = swift_slowAlloc(32, -1);
      v52 = v30;
      v54 = v30;
      *(_DWORD *)v28 = 136315394;
      v31 = UUID.uuidString.getter(v30);
      v33 = v32;
      v53 = sub_1001DEF4C(v31, v32, &v54);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &v54);
      swift_bridgeObjectRelease(v33);
      sub_100028388((uint64_t)v18, a3);
      *(_WORD *)(v28 + 12) = 2112;
      v34 = _convertErrorToNSError(_:)(v23);
      v53 = v34;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &v54);
      *v29 = v34;
      swift_errorRelease(v23);
      swift_errorRelease(v23);
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "Failed to save record %s with error: %@", (uint8_t *)v28, 0x16u);
      v35 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v29, 1, v35);
      swift_slowDealloc(v29, -1, -1);
      v36 = v52;
      swift_arrayDestroy(v52, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v36, -1, -1);
      swift_slowDealloc(v28, -1, -1);

      swift_errorRelease(v23);
    }
    else
    {
      swift_errorRelease(v23);
      sub_100028388((uint64_t)v18, a3);
      swift_errorRelease(v23);
      swift_errorRelease(v23);

    }
  }
  else
  {
    if (qword_10028ADB8 != -1)
      swift_once(&qword_10028ADB8, sub_100046CE4);
    v37 = type metadata accessor for Logger(0);
    sub_100005288(v37, (uint64_t)qword_1002A89A8);
    v38 = sub_100027FE8(a2, (uint64_t)v15, a3);
    v39 = Logger.logObject.getter(v38);
    v40 = static os_log_type_t.debug.getter();
    v41 = v40;
    if (os_log_type_enabled(v39, v40))
    {
      v42 = a6;
      v43 = swift_slowAlloc(22, -1);
      v51 = swift_slowAlloc(64, -1);
      v54 = v51;
      *(_DWORD *)v43 = 136315394;
      v50 = v41;
      v53 = sub_1001DEF4C(v52, v42, &v54);
      v44 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &v54);
      *(_WORD *)(v43 + 12) = 2080;
      v45 = UUID.uuidString.getter(v44);
      v47 = v46;
      v53 = sub_1001DEF4C(v45, v46, &v54);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &v54);
      swift_bridgeObjectRelease(v47);
      sub_100028388((uint64_t)v15, a3);
      _os_log_impl((void *)&_mh_execute_header, v39, (os_log_type_t)v50, "Successfully saved %s %s", (uint8_t *)v43, 0x16u);
      v48 = v51;
      swift_arrayDestroy(v51, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v48, -1, -1);
      swift_slowDealloc(v43, -1, -1);
    }
    else
    {
      sub_100028388((uint64_t)v15, a3);
    }

    sub_100004934((uint64_t)v22, a4);
  }
}

void sub_100121BF0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v4 = type metadata accessor for BeneficiaryManifestRecord(0);
  v6 = __chkstk_darwin(v4, v5);
  v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6, v9);
  v11 = (char *)&v39 - v10;
  v12 = sub_1000080B4(&qword_10028D600);
  __chkstk_darwin(v12, v13);
  v15 = (uint64_t *)((char *)&v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100024A20(a1, (uint64_t)v15, &qword_10028D600);
  if (swift_getEnumCaseMultiPayload(v15, v12) == 1)
  {
    v16 = *v15;
    if (qword_10028ADB8 != -1)
      swift_once(&qword_10028ADB8, sub_100046CE4);
    v17 = type metadata accessor for Logger(0);
    sub_100005288(v17, (uint64_t)qword_1002A89A8);
    sub_100027FE8(a2, (uint64_t)v11, type metadata accessor for BeneficiaryManifestRecord);
    swift_errorRetain(v16);
    v18 = swift_errorRetain(v16);
    v19 = Logger.logObject.getter(v18);
    v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v20))
    {
      v21 = swift_slowAlloc(22, -1);
      v22 = (uint64_t *)swift_slowAlloc(8, -1);
      v23 = swift_slowAlloc(32, -1);
      v40 = v23;
      *(_DWORD *)v21 = 136315394;
      v24 = UUID.uuidString.getter(v23);
      v26 = v25;
      v39 = sub_1001DEF4C(v24, v25, &v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40);
      swift_bridgeObjectRelease(v26);
      sub_100028388((uint64_t)v11, type metadata accessor for BeneficiaryManifestRecord);
      *(_WORD *)(v21 + 12) = 2112;
      v27 = _convertErrorToNSError(_:)(v16);
      v39 = v27;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40);
      *v22 = v27;
      swift_errorRelease(v16);
      swift_errorRelease(v16);
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Failed to save record %s with error: %@", (uint8_t *)v21, 0x16u);
      v28 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v22, 1, v28);
      swift_slowDealloc(v22, -1, -1);
      swift_arrayDestroy(v23, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v23, -1, -1);
      swift_slowDealloc(v21, -1, -1);

      swift_errorRelease(v16);
    }
    else
    {
      swift_errorRelease(v16);
      sub_100028388((uint64_t)v11, type metadata accessor for BeneficiaryManifestRecord);
      swift_errorRelease(v16);
      swift_errorRelease(v16);

    }
  }
  else
  {
    if (qword_10028ADB8 != -1)
      swift_once(&qword_10028ADB8, sub_100046CE4);
    v29 = type metadata accessor for Logger(0);
    sub_100005288(v29, (uint64_t)qword_1002A89A8);
    v30 = sub_100027FE8(a2, (uint64_t)v8, type metadata accessor for BeneficiaryManifestRecord);
    v31 = Logger.logObject.getter(v30);
    v32 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v31, v32))
    {
      v33 = swift_slowAlloc(22, -1);
      v34 = swift_slowAlloc(64, -1);
      v40 = v34;
      *(_DWORD *)v33 = 136315394;
      v39 = sub_1001DEF4C(0xD000000000000019, 0x800000010020D190, &v40);
      v35 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40);
      *(_WORD *)(v33 + 12) = 2080;
      v36 = UUID.uuidString.getter(v35);
      v38 = v37;
      v39 = sub_1001DEF4C(v36, v37, &v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40);
      swift_bridgeObjectRelease(v38);
      sub_100028388((uint64_t)v8, type metadata accessor for BeneficiaryManifestRecord);
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "Successfully saved %s %s", (uint8_t *)v33, 0x16u);
      swift_arrayDestroy(v34, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v34, -1, -1);
      swift_slowDealloc(v33, -1, -1);
    }
    else
    {
      sub_100028388((uint64_t)v8, type metadata accessor for BeneficiaryManifestRecord);
    }

    sub_100004934((uint64_t)v15, &qword_10028D600);
  }
}

void sub_1001220E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v4 = type metadata accessor for BeneficiaryInfoRecord(0);
  v6 = __chkstk_darwin(v4, v5);
  v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6, v9);
  v11 = (char *)&v39 - v10;
  v12 = sub_1000080B4(&qword_100295630);
  __chkstk_darwin(v12, v13);
  v15 = (uint64_t *)((char *)&v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100024A20(a1, (uint64_t)v15, &qword_100295630);
  if (swift_getEnumCaseMultiPayload(v15, v12) == 1)
  {
    v16 = *v15;
    if (qword_10028ADB8 != -1)
      swift_once(&qword_10028ADB8, sub_100046CE4);
    v17 = type metadata accessor for Logger(0);
    sub_100005288(v17, (uint64_t)qword_1002A89A8);
    sub_100027FE8(a2, (uint64_t)v11, type metadata accessor for BeneficiaryInfoRecord);
    swift_errorRetain(v16);
    v18 = swift_errorRetain(v16);
    v19 = Logger.logObject.getter(v18);
    v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v20))
    {
      v21 = swift_slowAlloc(22, -1);
      v22 = (uint64_t *)swift_slowAlloc(8, -1);
      v23 = swift_slowAlloc(32, -1);
      v40 = v23;
      *(_DWORD *)v21 = 136315394;
      v24 = UUID.uuidString.getter(v23);
      v26 = v25;
      v39 = sub_1001DEF4C(v24, v25, &v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40);
      swift_bridgeObjectRelease(v26);
      sub_100028388((uint64_t)v11, type metadata accessor for BeneficiaryInfoRecord);
      *(_WORD *)(v21 + 12) = 2112;
      v27 = _convertErrorToNSError(_:)(v16);
      v39 = v27;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40);
      *v22 = v27;
      swift_errorRelease(v16);
      swift_errorRelease(v16);
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Failed to save record %s with error: %@", (uint8_t *)v21, 0x16u);
      v28 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v22, 1, v28);
      swift_slowDealloc(v22, -1, -1);
      swift_arrayDestroy(v23, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v23, -1, -1);
      swift_slowDealloc(v21, -1, -1);

      swift_errorRelease(v16);
    }
    else
    {
      swift_errorRelease(v16);
      sub_100028388((uint64_t)v11, type metadata accessor for BeneficiaryInfoRecord);
      swift_errorRelease(v16);
      swift_errorRelease(v16);

    }
  }
  else
  {
    if (qword_10028ADB8 != -1)
      swift_once(&qword_10028ADB8, sub_100046CE4);
    v29 = type metadata accessor for Logger(0);
    sub_100005288(v29, (uint64_t)qword_1002A89A8);
    v30 = sub_100027FE8(a2, (uint64_t)v8, type metadata accessor for BeneficiaryInfoRecord);
    v31 = Logger.logObject.getter(v30);
    v32 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v31, v32))
    {
      v33 = swift_slowAlloc(22, -1);
      v34 = swift_slowAlloc(64, -1);
      v40 = v34;
      *(_DWORD *)v33 = 136315394;
      v39 = sub_1001DEF4C(0xD000000000000015, 0x800000010020A580, &v40);
      v35 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40);
      *(_WORD *)(v33 + 12) = 2080;
      v36 = UUID.uuidString.getter(v35);
      v38 = v37;
      v39 = sub_1001DEF4C(v36, v37, &v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40);
      swift_bridgeObjectRelease(v38);
      sub_100028388((uint64_t)v8, type metadata accessor for BeneficiaryInfoRecord);
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "Successfully saved %s %s", (uint8_t *)v33, 0x16u);
      swift_arrayDestroy(v34, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v34, -1, -1);
      swift_slowDealloc(v33, -1, -1);
    }
    else
    {
      sub_100028388((uint64_t)v8, type metadata accessor for BeneficiaryInfoRecord);
    }

    sub_100004934((uint64_t)v15, &qword_100295630);
  }
}

void sub_1001225D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v4 = type metadata accessor for InheritanceInvitationRecord(0);
  v6 = __chkstk_darwin(v4, v5);
  v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6, v9);
  v11 = (char *)&v39 - v10;
  v12 = sub_1000080B4((uint64_t *)&unk_10028FA70);
  __chkstk_darwin(v12, v13);
  v15 = (uint64_t *)((char *)&v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100024A20(a1, (uint64_t)v15, (uint64_t *)&unk_10028FA70);
  if (swift_getEnumCaseMultiPayload(v15, v12) == 1)
  {
    v16 = *v15;
    if (qword_10028ADB8 != -1)
      swift_once(&qword_10028ADB8, sub_100046CE4);
    v17 = type metadata accessor for Logger(0);
    sub_100005288(v17, (uint64_t)qword_1002A89A8);
    sub_100027FE8(a2, (uint64_t)v11, type metadata accessor for InheritanceInvitationRecord);
    swift_errorRetain(v16);
    v18 = swift_errorRetain(v16);
    v19 = Logger.logObject.getter(v18);
    v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v20))
    {
      v21 = swift_slowAlloc(22, -1);
      v22 = (uint64_t *)swift_slowAlloc(8, -1);
      v23 = swift_slowAlloc(32, -1);
      v40 = v23;
      *(_DWORD *)v21 = 136315394;
      v24 = UUID.uuidString.getter(v23);
      v26 = v25;
      v39 = sub_1001DEF4C(v24, v25, &v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40);
      swift_bridgeObjectRelease(v26);
      sub_100028388((uint64_t)v11, type metadata accessor for InheritanceInvitationRecord);
      *(_WORD *)(v21 + 12) = 2112;
      v27 = _convertErrorToNSError(_:)(v16);
      v39 = v27;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40);
      *v22 = v27;
      swift_errorRelease(v16);
      swift_errorRelease(v16);
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Failed to save record %s with error: %@", (uint8_t *)v21, 0x16u);
      v28 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v22, 1, v28);
      swift_slowDealloc(v22, -1, -1);
      swift_arrayDestroy(v23, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v23, -1, -1);
      swift_slowDealloc(v21, -1, -1);

      swift_errorRelease(v16);
    }
    else
    {
      swift_errorRelease(v16);
      sub_100028388((uint64_t)v11, type metadata accessor for InheritanceInvitationRecord);
      swift_errorRelease(v16);
      swift_errorRelease(v16);

    }
  }
  else
  {
    if (qword_10028ADB8 != -1)
      swift_once(&qword_10028ADB8, sub_100046CE4);
    v29 = type metadata accessor for Logger(0);
    sub_100005288(v29, (uint64_t)qword_1002A89A8);
    v30 = sub_100027FE8(a2, (uint64_t)v8, type metadata accessor for InheritanceInvitationRecord);
    v31 = Logger.logObject.getter(v30);
    v32 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v31, v32))
    {
      v33 = swift_slowAlloc(22, -1);
      v34 = swift_slowAlloc(64, -1);
      v40 = v34;
      *(_DWORD *)v33 = 136315394;
      v39 = sub_1001DEF4C(0xD00000000000001BLL, 0x800000010020A4B0, &v40);
      v35 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40);
      *(_WORD *)(v33 + 12) = 2080;
      v36 = UUID.uuidString.getter(v35);
      v38 = v37;
      v39 = sub_1001DEF4C(v36, v37, &v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40);
      swift_bridgeObjectRelease(v38);
      sub_100028388((uint64_t)v8, type metadata accessor for InheritanceInvitationRecord);
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "Successfully saved %s %s", (uint8_t *)v33, 0x16u);
      swift_arrayDestroy(v34, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v34, -1, -1);
      swift_slowDealloc(v33, -1, -1);
    }
    else
    {
      sub_100028388((uint64_t)v8, type metadata accessor for InheritanceInvitationRecord);
    }

    sub_100004934((uint64_t)v15, (uint64_t *)&unk_10028FA70);
  }
}

void sub_100122AC0(uint64_t a1, char a2, uint64_t a3, unint64_t a4, void *a5)
{
  uint64_t v8;
  id v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v19;
  id v20;
  id v21;
  os_log_type_t v22;
  uint64_t v23;
  uint64_t *v24;
  id v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *oslog;
  uint64_t v33;
  uint64_t v34;

  if ((a2 & 1) != 0)
  {
    swift_errorRetain(a1);
    if (qword_10028ADB8 != -1)
      swift_once(&qword_10028ADB8, sub_100046CE4);
    v19 = type metadata accessor for Logger(0);
    sub_100005288(v19, (uint64_t)qword_1002A89A8);
    sub_1000E05E4(a1, 1);
    swift_bridgeObjectRetain(a4);
    v20 = a5;
    sub_1000E05E4(a1, 1);
    swift_bridgeObjectRetain(a4);
    v21 = v20;
    oslog = Logger.logObject.getter(v21);
    v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v22))
    {
      v23 = swift_slowAlloc(32, -1);
      v24 = (uint64_t *)swift_slowAlloc(8, -1);
      v31 = swift_slowAlloc(64, -1);
      v34 = v31;
      *(_DWORD *)v23 = 136315650;
      swift_bridgeObjectRetain(a4);
      v33 = sub_1001DEF4C(a3, a4, &v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, &v34);
      swift_bridgeObjectRelease_n(a4, 3);
      *(_WORD *)(v23 + 12) = 2080;
      v25 = objc_msgSend(v21, "recordName");
      v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
      v28 = v27;

      v33 = sub_1001DEF4C(v26, v28, &v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, &v34);

      swift_bridgeObjectRelease(v28);
      *(_WORD *)(v23 + 22) = 2112;
      v29 = _convertErrorToNSError(_:)(a1);
      v33 = v29;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, &v34);
      *v24 = v29;
      sub_10006AEB4(a1, 1);
      sub_10006AEB4(a1, 1);
      _os_log_impl((void *)&_mh_execute_header, oslog, v22, "Failed to delete record %s %s with error: %@", (uint8_t *)v23, 0x20u);
      v30 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v24, 1, v30);
      swift_slowDealloc(v24, -1, -1);
      swift_arrayDestroy(v31, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v31, -1, -1);
      swift_slowDealloc(v23, -1, -1);

      sub_10006AEB4(a1, 1);
    }
    else
    {
      sub_10006AEB4(a1, 1);

      swift_bridgeObjectRelease_n(a4, 2);
      sub_10006AEB4(a1, 1);
      sub_10006AEB4(a1, 1);

    }
  }
  else
  {
    if (qword_10028ADC0 != -1)
      swift_once(&qword_10028ADC0, sub_100046D04);
    v8 = type metadata accessor for Logger(0);
    sub_100005288(v8, (uint64_t)qword_1002A89C0);
    swift_bridgeObjectRetain_n(a4, 2);
    v9 = a5;
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = swift_slowAlloc(22, -1);
      v13 = swift_slowAlloc(64, -1);
      v34 = v13;
      *(_DWORD *)v12 = 136315394;
      swift_bridgeObjectRetain(a4);
      v33 = sub_1001DEF4C(a3, a4, &v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, &v34);
      swift_bridgeObjectRelease_n(a4, 3);
      *(_WORD *)(v12 + 12) = 2080;
      v14 = objc_msgSend(v9, "recordName");
      v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
      v17 = v16;

      v33 = sub_1001DEF4C(v15, v17, &v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, &v34);

      swift_bridgeObjectRelease(v17);
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Successfully deleted record  %s %s", (uint8_t *)v12, 0x16u);
      swift_arrayDestroy(v13, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v13, -1, -1);
      swift_slowDealloc(v12, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a4, 2);
    }
  }
}

uint64_t sub_100122FD8(uint64_t a1, int a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t), uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint8_t *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  void *v46;
  char v48;
  uint64_t v49;
  uint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  void (*v65)(uint64_t, uint64_t);
  uint64_t v66;
  void *v67;
  uint64_t v68;

  v64 = a6;
  v65 = a5;
  v61 = a4;
  v62 = a3;
  v63 = a2;
  v7 = type metadata accessor for IdentityRecord(0);
  v8 = *(_QWORD *)(v7 - 8);
  v10 = __chkstk_darwin(v7, v9);
  v12 = (char *)&v60 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10, v13);
  v15 = (char *)&v60 - v14;
  v16 = sub_1000080B4(&qword_10028D660);
  v18 = __chkstk_darwin(v16, v17);
  v20 = (char *)&v60 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18, v21);
  v23 = (char *)&v60 - v22;
  v24 = sub_1000080B4(&qword_1002929E0);
  __chkstk_darwin(v24, v25);
  v27 = (uint64_t *)((char *)&v60 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100024A20(a1, (uint64_t)v27, &qword_1002929E0);
  if (swift_getEnumCaseMultiPayload(v27, v24) == 1)
  {
    v28 = *v27;
    if (qword_10028ADB8 != -1)
      swift_once(&qword_10028ADB8, sub_100046CE4);
    v29 = type metadata accessor for Logger(0);
    sub_100005288(v29, (uint64_t)qword_1002A89A8);
    v30 = swift_errorRetain(v28);
    v31 = Logger.logObject.getter(v30);
    v32 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v31, v32))
    {
      v33 = (uint8_t *)swift_slowAlloc(12, -1);
      v34 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v33 = 138412290;
      v35 = _convertErrorToNSError(_:)(v28);
      v67 = (void *)v35;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, &v68);
      *v34 = v35;
      swift_errorRelease(v28);
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "processZoneRecordDelete failed to find existing local record with error: %@", v33, 0xCu);
      v36 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v34, 1, v36);
      swift_slowDealloc(v34, -1, -1);
      swift_slowDealloc(v33, -1, -1);
    }
    else
    {
      swift_errorRelease(v28);
    }

    swift_errorRetain(v28);
    v65(v28, 1);
    swift_errorRelease(v28);
    return swift_errorRelease(v28);
  }
  else
  {
    sub_1000249A0((uint64_t)v27, (uint64_t)v23, &qword_10028D660);
    sub_100024A20((uint64_t)v23, (uint64_t)v20, &qword_10028D660);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v20, 1, v7) == 1)
    {
      sub_100004934((uint64_t)v20, &qword_10028D660);
      if (qword_10028ADB8 != -1)
        swift_once(&qword_10028ADB8, sub_100046CE4);
      v37 = type metadata accessor for Logger(0);
      v38 = sub_100005288(v37, (uint64_t)qword_1002A89A8);
      v39 = Logger.logObject.getter(v38);
      v40 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v39, v40))
      {
        v41 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v41 = 0;
        _os_log_impl((void *)&_mh_execute_header, v39, v40, "processZoneRecordDelete did not find existing local record", v41, 2u);
        swift_slowDealloc(v41, -1, -1);
      }

      type metadata accessor for AACustodianError(0);
      v43 = v42;
      v66 = -7003;
      v44 = sub_100005014((uint64_t)&_swiftEmptyArrayStorage);
      v45 = sub_100005150((unint64_t *)&qword_10028B640, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianError, (uint64_t)&unk_100218378);
      _BridgedStoredNSError.init(_:userInfo:)(&v67, &v66, v44, v43, v45);
      v46 = v67;
      v65((uint64_t)v67, 1);

    }
    else
    {
      sub_10003B730((uint64_t)v20, (uint64_t)v15, type metadata accessor for IdentityRecord);
      v48 = v63;
      if (v15[*(int *)(v7 + 64)] == (v63 & 1))
      {
        sub_1001365FC(v61, (uint64_t)v65, v64);
      }
      else
      {
        if (qword_10028ADB8 != -1)
          swift_once(&qword_10028ADB8, sub_100046CE4);
        v49 = type metadata accessor for Logger(0);
        sub_100005288(v49, (uint64_t)qword_1002A89A8);
        v50 = sub_100027FE8((uint64_t)v15, (uint64_t)v12, type metadata accessor for IdentityRecord);
        v51 = Logger.logObject.getter(v50);
        v52 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v51, v52))
        {
          v53 = swift_slowAlloc(14, -1);
          *(_DWORD *)v53 = 67109376;
          v54 = v12[*(int *)(v7 + 64)];
          sub_100028388((uint64_t)v12, type metadata accessor for IdentityRecord);
          LODWORD(v67) = v54;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, (char *)&v67 + 4);
          *(_WORD *)(v53 + 8) = 1024;
          LODWORD(v67) = v48 & 1;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, (char *)&v67 + 4);
          _os_log_impl((void *)&_mh_execute_header, v51, v52, "processZoneRecordDelete not deleting record because currentRecord is in manatee %{BOOL}d and request was for %{BOOL}d", (uint8_t *)v53, 0xEu);
          swift_slowDealloc(v53, -1, -1);
        }
        else
        {
          sub_100028388((uint64_t)v12, type metadata accessor for IdentityRecord);
        }

        type metadata accessor for AACustodianError(0);
        v56 = v55;
        v66 = -7003;
        v57 = sub_100005014((uint64_t)&_swiftEmptyArrayStorage);
        v58 = sub_100005150((unint64_t *)&qword_10028B640, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianError, (uint64_t)&unk_100218378);
        _BridgedStoredNSError.init(_:userInfo:)(&v67, &v66, v57, v56, v58);
        v59 = v67;
        v65((uint64_t)v67, 1);

      }
      sub_100028388((uint64_t)v15, type metadata accessor for IdentityRecord);
    }
    return sub_100004934((uint64_t)v23, &qword_10028D660);
  }
}

uint64_t sub_100123634(uint64_t a1, int a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t), uint64_t a6, uint64_t (*a7)(_QWORD), uint64_t *a8, uint64_t *a9)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  uint8_t *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v52;
  uint64_t (*v53)(_QWORD);
  uint64_t v54;
  uint64_t v55;
  NSObject *v56;
  os_log_type_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t (*v68)(_QWORD);
  int v69;
  uint64_t v70;
  uint64_t v71;
  void (*v72)(uint64_t, uint64_t);
  uint64_t v73;
  void *v74;
  uint64_t v75;

  v71 = a6;
  v72 = a5;
  v66 = a4;
  v67 = a3;
  v69 = a2;
  v68 = a7;
  v11 = a7(0);
  v12 = *(_QWORD *)(v11 - 8);
  v14 = __chkstk_darwin(v11, v13);
  v16 = (char *)&v65 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14, v17);
  v70 = (uint64_t)&v65 - v18;
  v19 = sub_1000080B4(a8);
  v21 = __chkstk_darwin(v19, v20);
  v23 = (char *)&v65 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21, v24);
  v26 = (char *)&v65 - v25;
  v27 = sub_1000080B4(a9);
  __chkstk_darwin(v27, v28);
  v30 = (uint64_t *)((char *)&v65 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100024A20(a1, (uint64_t)v30, a9);
  if (swift_getEnumCaseMultiPayload(v30, v27) == 1)
  {
    v31 = *v30;
    if (qword_10028ADB8 != -1)
      swift_once(&qword_10028ADB8, sub_100046CE4);
    v32 = type metadata accessor for Logger(0);
    sub_100005288(v32, (uint64_t)qword_1002A89A8);
    v33 = swift_errorRetain(v31);
    v34 = Logger.logObject.getter(v33);
    v35 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v34, v35))
    {
      v36 = (uint8_t *)swift_slowAlloc(12, -1);
      v37 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v36 = 138412290;
      v38 = _convertErrorToNSError(_:)(v31);
      v74 = (void *)v38;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, &v75);
      *v37 = v38;
      swift_errorRelease(v31);
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "processZoneRecordDelete failed to find existing local record with error: %@", v36, 0xCu);
      v39 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v37, 1, v39);
      swift_slowDealloc(v37, -1, -1);
      swift_slowDealloc(v36, -1, -1);
    }
    else
    {
      swift_errorRelease(v31);
    }

    swift_errorRetain(v31);
    v72(v31, 1);
    swift_errorRelease(v31);
    return swift_errorRelease(v31);
  }
  else
  {
    sub_1000249A0((uint64_t)v30, (uint64_t)v26, a8);
    sub_100024A20((uint64_t)v26, (uint64_t)v23, a8);
    v40 = a8;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v23, 1, v11) == 1)
    {
      sub_100004934((uint64_t)v23, a8);
      if (qword_10028ADB8 != -1)
        swift_once(&qword_10028ADB8, sub_100046CE4);
      v41 = type metadata accessor for Logger(0);
      v42 = sub_100005288(v41, (uint64_t)qword_1002A89A8);
      v43 = Logger.logObject.getter(v42);
      v44 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v43, v44))
      {
        v45 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v45 = 0;
        _os_log_impl((void *)&_mh_execute_header, v43, v44, "processZoneRecordDelete did not find existing local record", v45, 2u);
        swift_slowDealloc(v45, -1, -1);
      }

      type metadata accessor for AACustodianError(0);
      v47 = v46;
      v73 = -7003;
      v48 = sub_100005014((uint64_t)&_swiftEmptyArrayStorage);
      v49 = sub_100005150((unint64_t *)&qword_10028B640, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianError, (uint64_t)&unk_100218378);
      _BridgedStoredNSError.init(_:userInfo:)(&v74, &v73, v48, v47, v49);
      v50 = v74;
      v72((uint64_t)v74, 1);

    }
    else
    {
      v52 = v70;
      v53 = v68;
      sub_10003B730((uint64_t)v23, v70, v68);
      if (*(_BYTE *)(v52 + *(int *)(v11 + 32)) == (v69 & 1))
      {
        sub_1001365FC(v66, (uint64_t)v72, v71);
      }
      else
      {
        if (qword_10028ADB8 != -1)
          swift_once(&qword_10028ADB8, sub_100046CE4);
        v54 = type metadata accessor for Logger(0);
        sub_100005288(v54, (uint64_t)qword_1002A89A8);
        v55 = sub_100027FE8(v52, (uint64_t)v16, v53);
        v56 = Logger.logObject.getter(v55);
        v57 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v56, v57))
        {
          v58 = swift_slowAlloc(14, -1);
          *(_DWORD *)v58 = 67109376;
          v59 = v16[*(int *)(v11 + 32)];
          sub_100028388((uint64_t)v16, v53);
          LODWORD(v74) = v59;
          v52 = v70;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, (char *)&v74 + 4);
          *(_WORD *)(v58 + 8) = 1024;
          LODWORD(v74) = v69 & 1;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, (char *)&v74 + 4);
          _os_log_impl((void *)&_mh_execute_header, v56, v57, "processZoneRecordDelete not deleting record because currentRecord is in manatee %{BOOL}d and request was for %{BOOL}d", (uint8_t *)v58, 0xEu);
          swift_slowDealloc(v58, -1, -1);
        }
        else
        {
          sub_100028388((uint64_t)v16, v53);
        }

        type metadata accessor for AACustodianError(0);
        v61 = v60;
        v73 = -7003;
        v62 = sub_100005014((uint64_t)&_swiftEmptyArrayStorage);
        v63 = sub_100005150((unint64_t *)&qword_10028B640, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianError, (uint64_t)&unk_100218378);
        _BridgedStoredNSError.init(_:userInfo:)(&v74, &v73, v62, v61, v63);
        v64 = v74;
        v72((uint64_t)v74, 1);

      }
      sub_100028388(v52, v53);
    }
    return sub_100004934((uint64_t)v26, v40);
  }
}

uint64_t sub_100123C88(uint64_t a1, int a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t), uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint8_t *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  void *v46;
  char v48;
  uint64_t v49;
  uint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  void (*v65)(uint64_t, uint64_t);
  uint64_t v66;
  void *v67;
  uint64_t v68;

  v64 = a6;
  v65 = a5;
  v61 = a4;
  v62 = a3;
  v63 = a2;
  v7 = type metadata accessor for InheritanceInvitationRecord(0);
  v8 = *(_QWORD *)(v7 - 8);
  v10 = __chkstk_darwin(v7, v9);
  v12 = (char *)&v60 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10, v13);
  v15 = (char *)&v60 - v14;
  v16 = sub_1000080B4(&qword_10028D658);
  v18 = __chkstk_darwin(v16, v17);
  v20 = (char *)&v60 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18, v21);
  v23 = (char *)&v60 - v22;
  v24 = sub_1000080B4(&qword_100290E08);
  __chkstk_darwin(v24, v25);
  v27 = (uint64_t *)((char *)&v60 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100024A20(a1, (uint64_t)v27, &qword_100290E08);
  if (swift_getEnumCaseMultiPayload(v27, v24) == 1)
  {
    v28 = *v27;
    if (qword_10028ADB8 != -1)
      swift_once(&qword_10028ADB8, sub_100046CE4);
    v29 = type metadata accessor for Logger(0);
    sub_100005288(v29, (uint64_t)qword_1002A89A8);
    v30 = swift_errorRetain(v28);
    v31 = Logger.logObject.getter(v30);
    v32 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v31, v32))
    {
      v33 = (uint8_t *)swift_slowAlloc(12, -1);
      v34 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v33 = 138412290;
      v35 = _convertErrorToNSError(_:)(v28);
      v67 = (void *)v35;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, &v68);
      *v34 = v35;
      swift_errorRelease(v28);
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "processZoneRecordDelete failed to find existing local record with error: %@", v33, 0xCu);
      v36 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v34, 1, v36);
      swift_slowDealloc(v34, -1, -1);
      swift_slowDealloc(v33, -1, -1);
    }
    else
    {
      swift_errorRelease(v28);
    }

    swift_errorRetain(v28);
    v65(v28, 1);
    swift_errorRelease(v28);
    return swift_errorRelease(v28);
  }
  else
  {
    sub_1000249A0((uint64_t)v27, (uint64_t)v23, &qword_10028D658);
    sub_100024A20((uint64_t)v23, (uint64_t)v20, &qword_10028D658);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v20, 1, v7) == 1)
    {
      sub_100004934((uint64_t)v20, &qword_10028D658);
      if (qword_10028ADB8 != -1)
        swift_once(&qword_10028ADB8, sub_100046CE4);
      v37 = type metadata accessor for Logger(0);
      v38 = sub_100005288(v37, (uint64_t)qword_1002A89A8);
      v39 = Logger.logObject.getter(v38);
      v40 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v39, v40))
      {
        v41 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v41 = 0;
        _os_log_impl((void *)&_mh_execute_header, v39, v40, "processZoneRecordDelete did not find existing local record", v41, 2u);
        swift_slowDealloc(v41, -1, -1);
      }

      type metadata accessor for AACustodianError(0);
      v43 = v42;
      v66 = -7003;
      v44 = sub_100005014((uint64_t)&_swiftEmptyArrayStorage);
      v45 = sub_100005150((unint64_t *)&qword_10028B640, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianError, (uint64_t)&unk_100218378);
      _BridgedStoredNSError.init(_:userInfo:)(&v67, &v66, v44, v43, v45);
      v46 = v67;
      v65((uint64_t)v67, 1);

    }
    else
    {
      sub_10003B730((uint64_t)v20, (uint64_t)v15, type metadata accessor for InheritanceInvitationRecord);
      v48 = v63;
      if (v15[*(int *)(v7 + 44)] == (v63 & 1))
      {
        sub_1001365FC(v61, (uint64_t)v65, v64);
      }
      else
      {
        if (qword_10028ADB8 != -1)
          swift_once(&qword_10028ADB8, sub_100046CE4);
        v49 = type metadata accessor for Logger(0);
        sub_100005288(v49, (uint64_t)qword_1002A89A8);
        v50 = sub_100027FE8((uint64_t)v15, (uint64_t)v12, type metadata accessor for InheritanceInvitationRecord);
        v51 = Logger.logObject.getter(v50);
        v52 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v51, v52))
        {
          v53 = swift_slowAlloc(14, -1);
          *(_DWORD *)v53 = 67109376;
          v54 = v12[*(int *)(v7 + 44)];
          sub_100028388((uint64_t)v12, type metadata accessor for InheritanceInvitationRecord);
          LODWORD(v67) = v54;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, (char *)&v67 + 4);
          *(_WORD *)(v53 + 8) = 1024;
          LODWORD(v67) = v48 & 1;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, (char *)&v67 + 4);
          _os_log_impl((void *)&_mh_execute_header, v51, v52, "processZoneRecordDelete not deleting record because currentRecord is in manatee %{BOOL}d and request was for %{BOOL}d", (uint8_t *)v53, 0xEu);
          swift_slowDealloc(v53, -1, -1);
        }
        else
        {
          sub_100028388((uint64_t)v12, type metadata accessor for InheritanceInvitationRecord);
        }

        type metadata accessor for AACustodianError(0);
        v56 = v55;
        v66 = -7003;
        v57 = sub_100005014((uint64_t)&_swiftEmptyArrayStorage);
        v58 = sub_100005150((unint64_t *)&qword_10028B640, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianError, (uint64_t)&unk_100218378);
        _BridgedStoredNSError.init(_:userInfo:)(&v67, &v66, v57, v56, v58);
        v59 = v67;
        v65((uint64_t)v67, 1);

      }
      sub_100028388((uint64_t)v15, type metadata accessor for InheritanceInvitationRecord);
    }
    return sub_100004934((uint64_t)v23, &qword_10028D658);
  }
}

uint64_t sub_1001242E4(uint64_t a1, int a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t), uint64_t a6, uint64_t (*a7)(_QWORD), uint64_t *a8, uint64_t *a9)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  uint8_t *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v52;
  uint64_t (*v53)(_QWORD);
  uint64_t v54;
  uint64_t v55;
  NSObject *v56;
  os_log_type_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t (*v68)(_QWORD);
  int v69;
  uint64_t v70;
  uint64_t v71;
  void (*v72)(uint64_t, uint64_t);
  uint64_t v73;
  void *v74;
  uint64_t v75;

  v71 = a6;
  v72 = a5;
  v66 = a4;
  v67 = a3;
  v69 = a2;
  v68 = a7;
  v11 = a7(0);
  v12 = *(_QWORD *)(v11 - 8);
  v14 = __chkstk_darwin(v11, v13);
  v16 = (char *)&v65 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14, v17);
  v70 = (uint64_t)&v65 - v18;
  v19 = sub_1000080B4(a8);
  v21 = __chkstk_darwin(v19, v20);
  v23 = (char *)&v65 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21, v24);
  v26 = (char *)&v65 - v25;
  v27 = sub_1000080B4(a9);
  __chkstk_darwin(v27, v28);
  v30 = (uint64_t *)((char *)&v65 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100024A20(a1, (uint64_t)v30, a9);
  if (swift_getEnumCaseMultiPayload(v30, v27) == 1)
  {
    v31 = *v30;
    if (qword_10028ADB8 != -1)
      swift_once(&qword_10028ADB8, sub_100046CE4);
    v32 = type metadata accessor for Logger(0);
    sub_100005288(v32, (uint64_t)qword_1002A89A8);
    v33 = swift_errorRetain(v31);
    v34 = Logger.logObject.getter(v33);
    v35 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v34, v35))
    {
      v36 = (uint8_t *)swift_slowAlloc(12, -1);
      v37 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v36 = 138412290;
      v38 = _convertErrorToNSError(_:)(v31);
      v74 = (void *)v38;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, &v75);
      *v37 = v38;
      swift_errorRelease(v31);
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "processZoneRecordDelete failed to find existing local record with error: %@", v36, 0xCu);
      v39 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v37, 1, v39);
      swift_slowDealloc(v37, -1, -1);
      swift_slowDealloc(v36, -1, -1);
    }
    else
    {
      swift_errorRelease(v31);
    }

    swift_errorRetain(v31);
    v72(v31, 1);
    swift_errorRelease(v31);
    return swift_errorRelease(v31);
  }
  else
  {
    sub_1000249A0((uint64_t)v30, (uint64_t)v26, a8);
    sub_100024A20((uint64_t)v26, (uint64_t)v23, a8);
    v40 = a8;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v23, 1, v11) == 1)
    {
      sub_100004934((uint64_t)v23, a8);
      if (qword_10028ADB8 != -1)
        swift_once(&qword_10028ADB8, sub_100046CE4);
      v41 = type metadata accessor for Logger(0);
      v42 = sub_100005288(v41, (uint64_t)qword_1002A89A8);
      v43 = Logger.logObject.getter(v42);
      v44 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v43, v44))
      {
        v45 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v45 = 0;
        _os_log_impl((void *)&_mh_execute_header, v43, v44, "processZoneRecordDelete did not find existing local record", v45, 2u);
        swift_slowDealloc(v45, -1, -1);
      }

      type metadata accessor for AACustodianError(0);
      v47 = v46;
      v73 = -7003;
      v48 = sub_100005014((uint64_t)&_swiftEmptyArrayStorage);
      v49 = sub_100005150((unint64_t *)&qword_10028B640, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianError, (uint64_t)&unk_100218378);
      _BridgedStoredNSError.init(_:userInfo:)(&v74, &v73, v48, v47, v49);
      v50 = v74;
      v72((uint64_t)v74, 1);

    }
    else
    {
      v52 = v70;
      v53 = v68;
      sub_10003B730((uint64_t)v23, v70, v68);
      if (*(_BYTE *)(v52 + *(int *)(v11 + 36)) == (v69 & 1))
      {
        sub_1001365FC(v66, (uint64_t)v72, v71);
      }
      else
      {
        if (qword_10028ADB8 != -1)
          swift_once(&qword_10028ADB8, sub_100046CE4);
        v54 = type metadata accessor for Logger(0);
        sub_100005288(v54, (uint64_t)qword_1002A89A8);
        v55 = sub_100027FE8(v52, (uint64_t)v16, v53);
        v56 = Logger.logObject.getter(v55);
        v57 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v56, v57))
        {
          v58 = swift_slowAlloc(14, -1);
          *(_DWORD *)v58 = 67109376;
          v59 = v16[*(int *)(v11 + 36)];
          sub_100028388((uint64_t)v16, v53);
          LODWORD(v74) = v59;
          v52 = v70;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, (char *)&v74 + 4);
          *(_WORD *)(v58 + 8) = 1024;
          LODWORD(v74) = v69 & 1;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, (char *)&v74 + 4);
          _os_log_impl((void *)&_mh_execute_header, v56, v57, "processZoneRecordDelete not deleting record because currentRecord is in manatee %{BOOL}d and request was for %{BOOL}d", (uint8_t *)v58, 0xEu);
          swift_slowDealloc(v58, -1, -1);
        }
        else
        {
          sub_100028388((uint64_t)v16, v53);
        }

        type metadata accessor for AACustodianError(0);
        v61 = v60;
        v73 = -7003;
        v62 = sub_100005014((uint64_t)&_swiftEmptyArrayStorage);
        v63 = sub_100005150((unint64_t *)&qword_10028B640, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianError, (uint64_t)&unk_100218378);
        _BridgedStoredNSError.init(_:userInfo:)(&v74, &v73, v62, v61, v63);
        v64 = v74;
        v72((uint64_t)v74, 1);

      }
      sub_100028388(v52, v53);
    }
    return sub_100004934((uint64_t)v26, v40);
  }
}

uint64_t sub_100124938(uint64_t a1, int a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t), uint64_t a6, uint64_t (*a7)(_QWORD), uint64_t *a8, uint64_t *a9)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  uint8_t *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v52;
  uint64_t (*v53)(_QWORD);
  uint64_t v54;
  uint64_t v55;
  NSObject *v56;
  os_log_type_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  void *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t (*v68)(_QWORD);
  int v69;
  uint64_t v70;
  uint64_t v71;
  void (*v72)(uint64_t, uint64_t);
  uint64_t v73;
  void *v74;
  uint64_t v75;

  v71 = a6;
  v72 = a5;
  v66 = a4;
  v67 = a3;
  v69 = a2;
  v68 = a7;
  v11 = a7(0);
  v12 = *(_QWORD *)(v11 - 8);
  v14 = __chkstk_darwin(v11, v13);
  v16 = (char *)&v65 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14, v17);
  v70 = (uint64_t)&v65 - v18;
  v19 = sub_1000080B4(a8);
  v21 = __chkstk_darwin(v19, v20);
  v23 = (char *)&v65 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21, v24);
  v26 = (char *)&v65 - v25;
  v27 = sub_1000080B4(a9);
  __chkstk_darwin(v27, v28);
  v30 = (uint64_t *)((char *)&v65 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100024A20(a1, (uint64_t)v30, a9);
  if (swift_getEnumCaseMultiPayload(v30, v27) == 1)
  {
    v31 = *v30;
    if (qword_10028ADB8 != -1)
      swift_once(&qword_10028ADB8, sub_100046CE4);
    v32 = type metadata accessor for Logger(0);
    sub_100005288(v32, (uint64_t)qword_1002A89A8);
    v33 = swift_errorRetain(v31);
    v34 = Logger.logObject.getter(v33);
    v35 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v34, v35))
    {
      v36 = (uint8_t *)swift_slowAlloc(12, -1);
      v37 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v36 = 138412290;
      v38 = _convertErrorToNSError(_:)(v31);
      v74 = (void *)v38;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, &v75);
      *v37 = v38;
      swift_errorRelease(v31);
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "processZoneRecordDelete failed to find existing local record with error: %@", v36, 0xCu);
      v39 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v37, 1, v39);
      swift_slowDealloc(v37, -1, -1);
      swift_slowDealloc(v36, -1, -1);
    }
    else
    {
      swift_errorRelease(v31);
    }

    swift_errorRetain(v31);
    v72(v31, 1);
    swift_errorRelease(v31);
    return swift_errorRelease(v31);
  }
  else
  {
    sub_1000249A0((uint64_t)v30, (uint64_t)v26, a8);
    sub_100024A20((uint64_t)v26, (uint64_t)v23, a8);
    v40 = a8;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v23, 1, v11) == 1)
    {
      sub_100004934((uint64_t)v23, a8);
      if (qword_10028ADB8 != -1)
        swift_once(&qword_10028ADB8, sub_100046CE4);
      v41 = type metadata accessor for Logger(0);
      v42 = sub_100005288(v41, (uint64_t)qword_1002A89A8);
      v43 = Logger.logObject.getter(v42);
      v44 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v43, v44))
      {
        v45 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v45 = 0;
        _os_log_impl((void *)&_mh_execute_header, v43, v44, "processZoneRecordDelete did not find existing local record", v45, 2u);
        swift_slowDealloc(v45, -1, -1);
      }

      type metadata accessor for AACustodianError(0);
      v47 = v46;
      v73 = -7003;
      v48 = sub_100005014((uint64_t)&_swiftEmptyArrayStorage);
      v49 = sub_100005150((unint64_t *)&qword_10028B640, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianError, (uint64_t)&unk_100218378);
      _BridgedStoredNSError.init(_:userInfo:)(&v74, &v73, v48, v47, v49);
      v50 = v74;
      v72((uint64_t)v74, 1);

    }
    else
    {
      v52 = v70;
      v53 = v68;
      sub_10003B730((uint64_t)v23, v70, v68);
      if (*(_BYTE *)(v52 + *(int *)(v11 + 40)) == (v69 & 1))
      {
        sub_1001365FC(v66, (uint64_t)v72, v71);
      }
      else
      {
        if (qword_10028ADB8 != -1)
          swift_once(&qword_10028ADB8, sub_100046CE4);
        v54 = type metadata accessor for Logger(0);
        sub_100005288(v54, (uint64_t)qword_1002A89A8);
        v55 = sub_100027FE8(v52, (uint64_t)v16, v53);
        v56 = Logger.logObject.getter(v55);
        v57 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v56, v57))
        {
          v58 = swift_slowAlloc(14, -1);
          *(_DWORD *)v58 = 67109376;
          v59 = v16[*(int *)(v11 + 40)];
          sub_100028388((uint64_t)v16, v53);
          LODWORD(v74) = v59;
          v52 = v70;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, (char *)&v74 + 4);
          *(_WORD *)(v58 + 8) = 1024;
          LODWORD(v74) = v69 & 1;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, (char *)&v74 + 4);
          _os_log_impl((void *)&_mh_execute_header, v56, v57, "processZoneRecordDelete not deleting record because currentRecord is in manatee %{BOOL}d and request was for %{BOOL}d", (uint8_t *)v58, 0xEu);
          swift_slowDealloc(v58, -1, -1);
        }
        else
        {
          sub_100028388((uint64_t)v16, v53);
        }

        type metadata accessor for AACustodianError(0);
        v61 = v60;
        v73 = -7003;
        v62 = sub_100005014((uint64_t)&_swiftEmptyArrayStorage);
        v63 = sub_100005150((unint64_t *)&qword_10028B640, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianError, (uint64_t)&unk_100218378);
        _BridgedStoredNSError.init(_:userInfo:)(&v74, &v73, v62, v61, v63);
        v64 = v74;
        v72((uint64_t)v74, 1);

      }
      sub_100028388(v52, v53);
    }
    return sub_100004934((uint64_t)v26, v40);
  }
}

uint64_t sub_100124F8C(uint64_t a1, int a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t), uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint8_t *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  void *v46;
  char v48;
  uint64_t v49;
  uint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  void (*v65)(uint64_t, uint64_t);
  uint64_t v66;
  void *v67;
  uint64_t v68;

  v64 = a6;
  v65 = a5;
  v61 = a4;
  v62 = a3;
  v63 = a2;
  v7 = type metadata accessor for CustodianRecord(0);
  v8 = *(_QWORD *)(v7 - 8);
  v10 = __chkstk_darwin(v7, v9);
  v12 = (char *)&v60 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10, v13);
  v15 = (char *)&v60 - v14;
  v16 = sub_1000080B4(&qword_10028D5C8);
  v18 = __chkstk_darwin(v16, v17);
  v20 = (char *)&v60 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18, v21);
  v23 = (char *)&v60 - v22;
  v24 = sub_1000080B4(&qword_1002929A8);
  __chkstk_darwin(v24, v25);
  v27 = (uint64_t *)((char *)&v60 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100024A20(a1, (uint64_t)v27, &qword_1002929A8);
  if (swift_getEnumCaseMultiPayload(v27, v24) == 1)
  {
    v28 = *v27;
    if (qword_10028ADB8 != -1)
      swift_once(&qword_10028ADB8, sub_100046CE4);
    v29 = type metadata accessor for Logger(0);
    sub_100005288(v29, (uint64_t)qword_1002A89A8);
    v30 = swift_errorRetain(v28);
    v31 = Logger.logObject.getter(v30);
    v32 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v31, v32))
    {
      v33 = (uint8_t *)swift_slowAlloc(12, -1);
      v34 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v33 = 138412290;
      v35 = _convertErrorToNSError(_:)(v28);
      v67 = (void *)v35;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, &v68);
      *v34 = v35;
      swift_errorRelease(v28);
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "processZoneRecordDelete failed to find existing local record with error: %@", v33, 0xCu);
      v36 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v34, 1, v36);
      swift_slowDealloc(v34, -1, -1);
      swift_slowDealloc(v33, -1, -1);
    }
    else
    {
      swift_errorRelease(v28);
    }

    swift_errorRetain(v28);
    v65(v28, 1);
    swift_errorRelease(v28);
    return swift_errorRelease(v28);
  }
  else
  {
    sub_1000249A0((uint64_t)v27, (uint64_t)v23, &qword_10028D5C8);
    sub_100024A20((uint64_t)v23, (uint64_t)v20, &qword_10028D5C8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v20, 1, v7) == 1)
    {
      sub_100004934((uint64_t)v20, &qword_10028D5C8);
      if (qword_10028ADB8 != -1)
        swift_once(&qword_10028ADB8, sub_100046CE4);
      v37 = type metadata accessor for Logger(0);
      v38 = sub_100005288(v37, (uint64_t)qword_1002A89A8);
      v39 = Logger.logObject.getter(v38);
      v40 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v39, v40))
      {
        v41 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v41 = 0;
        _os_log_impl((void *)&_mh_execute_header, v39, v40, "processZoneRecordDelete did not find existing local record", v41, 2u);
        swift_slowDealloc(v41, -1, -1);
      }

      type metadata accessor for AACustodianError(0);
      v43 = v42;
      v66 = -7003;
      v44 = sub_100005014((uint64_t)&_swiftEmptyArrayStorage);
      v45 = sub_100005150((unint64_t *)&qword_10028B640, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianError, (uint64_t)&unk_100218378);
      _BridgedStoredNSError.init(_:userInfo:)(&v67, &v66, v44, v43, v45);
      v46 = v67;
      v65((uint64_t)v67, 1);

    }
    else
    {
      sub_10003B730((uint64_t)v20, (uint64_t)v15, type metadata accessor for CustodianRecord);
      v48 = v63;
      if (v15[*(int *)(v7 + 48)] == (v63 & 1))
      {
        sub_1001365FC(v61, (uint64_t)v65, v64);
      }
      else
      {
        if (qword_10028ADB8 != -1)
          swift_once(&qword_10028ADB8, sub_100046CE4);
        v49 = type metadata accessor for Logger(0);
        sub_100005288(v49, (uint64_t)qword_1002A89A8);
        v50 = sub_100027FE8((uint64_t)v15, (uint64_t)v12, type metadata accessor for CustodianRecord);
        v51 = Logger.logObject.getter(v50);
        v52 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v51, v52))
        {
          v53 = swift_slowAlloc(14, -1);
          *(_DWORD *)v53 = 67109376;
          v54 = v12[*(int *)(v7 + 48)];
          sub_100028388((uint64_t)v12, type metadata accessor for CustodianRecord);
          LODWORD(v67) = v54;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, (char *)&v67 + 4);
          *(_WORD *)(v53 + 8) = 1024;
          LODWORD(v67) = v48 & 1;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, (char *)&v67 + 4);
          _os_log_impl((void *)&_mh_execute_header, v51, v52, "processZoneRecordDelete not deleting record because currentRecord is in manatee %{BOOL}d and request was for %{BOOL}d", (uint8_t *)v53, 0xEu);
          swift_slowDealloc(v53, -1, -1);
        }
        else
        {
          sub_100028388((uint64_t)v12, type metadata accessor for CustodianRecord);
        }

        type metadata accessor for AACustodianError(0);
        v56 = v55;
        v66 = -7003;
        v57 = sub_100005014((uint64_t)&_swiftEmptyArrayStorage);
        v58 = sub_100005150((unint64_t *)&qword_10028B640, (uint64_t (*)(uint64_t))type metadata accessor for AACustodianError, (uint64_t)&unk_100218378);
        _BridgedStoredNSError.init(_:userInfo:)(&v67, &v66, v57, v56, v58);
        v59 = v67;
        v65((uint64_t)v67, 1);

      }
      sub_100028388((uint64_t)v15, type metadata accessor for CustodianRecord);
    }
    return sub_100004934((uint64_t)v23, &qword_10028D5C8);
  }
}

uint64_t sub_1001255E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  _QWORD aBlock[5];
  uint64_t v48;

  v39 = a5;
  v40 = a6;
  v36 = a4;
  v37 = a2;
  v7 = v6;
  v38 = a3;
  v42 = type metadata accessor for DispatchWorkItemFlags(0);
  v45 = *(_QWORD *)(v42 - 8);
  __chkstk_darwin(v42, v9);
  v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchQoS(0);
  v43 = *(_QWORD *)(v12 - 8);
  v44 = v12;
  __chkstk_darwin(v12, v13);
  v15 = (char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for URL(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(_QWORD *)(v17 + 64);
  __chkstk_darwin(v16, v19);
  v20 = (char *)&v35 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = *(_QWORD *)(v7 + 32);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v20, a1, v16);
  v21 = *(unsigned __int8 *)(v17 + 80);
  v22 = (v21 + 16) & ~v21;
  v23 = (v18 + v22 + 7) & 0xFFFFFFFFFFFFFFF8;
  v24 = (v23 + 23) & 0xFFFFFFFFFFFFFFF8;
  v25 = swift_allocObject(v36, v24 + 8, v21 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v17 + 32))(v25 + v22, v20, v16);
  v26 = (_QWORD *)(v25 + v23);
  v27 = v38;
  *v26 = v37;
  v26[1] = v27;
  *(_QWORD *)(v25 + v24) = v7;
  aBlock[4] = v39;
  v48 = v25;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000051D0;
  aBlock[3] = v40;
  v28 = _Block_copy(aBlock);
  swift_retain(v27);
  v29 = swift_retain(v7);
  static DispatchQoS.unspecified.getter(v29);
  v46 = &_swiftEmptyArrayStorage;
  v30 = sub_100005150((unint64_t *)&qword_10028CD20, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v31 = sub_1000080B4((uint64_t *)&unk_100295A00);
  v32 = sub_1000077A0((unint64_t *)&qword_10028CD30, (uint64_t *)&unk_100295A00);
  v33 = v42;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v46, v31, v32, v42, v30);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v15, v11, v28);
  _Block_release(v28);
  (*(void (**)(char *, uint64_t))(v45 + 8))(v11, v33);
  (*(void (**)(char *, uint64_t))(v43 + 8))(v15, v44);
  return swift_release(v48);
}

uint64_t sub_100125870(uint64_t a1, void (*a2)(char *), uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t (*a6)(uint64_t), unint64_t *a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  NSString v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint8_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t *v47;
  void (*v48)(char *);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t (*v56)(uint64_t);
  uint64_t v58;
  uint64_t v59;
  unint64_t *v60;
  uint64_t v61;
  uint64_t (*v62)(uint64_t);
  uint8_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void (*v67)(char *);
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70[3];
  uint64_t v71;
  uint64_t v72;

  v60 = a7;
  v61 = a8;
  v63 = (uint8_t *)a4;
  v69 = a3;
  v67 = a2;
  v11 = type metadata accessor for URL(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11, v13);
  v15 = (char *)&v58 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = a5;
  v66 = sub_1000080B4(a5);
  __chkstk_darwin(v66, v16);
  v18 = (char *)&v58 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = a6;
  v19 = a6(0);
  v64 = *(_QWORD *)(v19 - 8);
  v65 = v19;
  v21 = __chkstk_darwin(v19, v20);
  v23 = (uint64_t *)((char *)&v58 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v21, v24);
  v26 = (char *)&v58 - v25;
  v27 = objc_msgSend((id)objc_opt_self(NSFileManager), "defaultManager");
  URL.path.getter();
  v29 = v28;
  v30 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v29);
  LODWORD(v29) = objc_msgSend(v27, "fileExistsAtPath:", v30);

  if ((_DWORD)v29)
  {
    v31 = Data.init(contentsOf:options:)(a1, 0);
    v33 = v32;
    v34 = (uint64_t)v63;
    v35 = *((_QWORD *)v63 + 5);
    swift_retain(v35);
    v36 = objc_autoreleasePoolPush();
    sub_1001A858C(v31, v33, v35, v70);
    objc_autoreleasePoolPop(v36);
    swift_release(v35);
    v50 = v70[0];
    v59 = v70[1];
    v51 = *(_QWORD *)(v34 + 24);
    v52 = sub_100005150(v60, v62, v61);
    swift_retain(v51);
    v53 = v65;
    v63 = (uint8_t *)v50;
    v54 = v50;
    v55 = v59;
    dispatch thunk of JSONDecoder.decode<A>(_:from:)(v23, v65, v54, v59, v65, v52);
    sub_10000F494((uint64_t)v63, v55);
    sub_10000F494(v31, v33);
    swift_release(v51);
    v56 = v62;
    sub_10003B730((uint64_t)v23, (uint64_t)v26, v62);
    sub_100027FE8((uint64_t)v26, (uint64_t)v18, v56);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v64 + 56))(v18, 0, 1, v53);
    swift_storeEnumTagMultiPayload(v18, v66, 0);
    v67(v18);
    sub_100004934((uint64_t)v18, v68);
    return sub_100028388((uint64_t)v26, v56);
  }
  else
  {
    if (qword_10028ADE8 != -1)
      swift_once(&qword_10028ADE8, sub_100046DC4);
    v37 = type metadata accessor for Logger(0);
    sub_100005288(v37, (uint64_t)qword_1002A8A38);
    v38 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, a1, v11);
    v39 = Logger.logObject.getter(v38);
    v40 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v39, v40))
    {
      v41 = (uint8_t *)swift_slowAlloc(12, -1);
      v42 = swift_slowAlloc(32, -1);
      v70[0] = v42;
      *(_DWORD *)v41 = 136315138;
      v63 = v41 + 4;
      v43 = sub_100005150((unint64_t *)&qword_10028F3B0, (uint64_t (*)(uint64_t))&type metadata accessor for URL, (uint64_t)&protocol conformance descriptor for URL);
      v44 = dispatch thunk of CustomStringConvertible.description.getter(v11, v43);
      v46 = v45;
      v71 = sub_1001DEF4C(v44, v45, v70);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v71, &v72);
      swift_bridgeObjectRelease(v46);
      (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
      _os_log_impl((void *)&_mh_execute_header, v39, v40, "Record %s not found.", v41, 0xCu);
      swift_arrayDestroy(v42, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v42, -1, -1);
      swift_slowDealloc(v41, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
    }

    v48 = v67;
    v47 = v68;
    v49 = v66;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v64 + 56))(v18, 1, 1, v65);
    swift_storeEnumTagMultiPayload(v18, v49, 0);
    v48(v18);
    return sub_100004934((uint64_t)v18, v47);
  }
}

_QWORD *sub_100125EE8(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  objc_class *v26;
  char *v27;
  char *v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  objc_super v33;
  _QWORD v34[5];

  v2 = v1;
  v32 = a1;
  v31 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v3 = *(_QWORD *)(v31 - 8);
  __chkstk_darwin(v31, v4);
  v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v7, v8);
  v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v11, v12);
  v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2[9] = static String._unconditionallyBridgeFromObjectiveC(_:)(APSEnvironmentProduction);
  v2[10] = v15;
  v2[11] = 0;
  v2[12] = &_swiftEmptyArrayStorage;
  v2[13] = objc_msgSend(objc_allocWithZone((Class)NSOperationQueue), "init");
  v16 = sub_100007764();
  v2[14] = 0;
  v2[15] = 0;
  static DispatchQoS.unspecified.getter(v16);
  v34[0] = &_swiftEmptyArrayStorage;
  v17 = sub_100005150((unint64_t *)&qword_10028C6D0, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v18 = sub_1000080B4(&qword_10028B9F0);
  v19 = sub_1000077A0((unint64_t *)&qword_10028C6E0, &qword_10028B9F0);
  dispatch thunk of SetAlgebra.init<A>(_:)(v34, v18, v19, v7, v17);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v6, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v31);
  v2[16] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(0xD000000000000033, 0x800000010020D240, v14, v10, v6, 0);
  v20 = type metadata accessor for CloudKitStore();
  v21 = v32;
  v2[2] = v32;
  v2[5] = v20;
  v2[6] = &off_100263F68;
  sub_100024A20((uint64_t)(v2 + 2), (uint64_t)v34, &qword_1002929F0);
  v22 = type metadata accessor for CloudKitSyncPushDelegate();
  v23 = swift_allocObject(v22, 64, 7);
  v24 = qword_10028AF00;
  swift_retain(v21);
  if (v24 != -1)
    swift_once(&qword_10028AF00, sub_1001FD458);
  v25 = qword_1002A8C68;
  *(_QWORD *)(v23 + 16) = qword_1002A8C68;
  sub_1000249A0((uint64_t)v34, v23 + 24, &qword_1002929F0);
  v2[7] = v23;
  v26 = (objc_class *)type metadata accessor for CloudKitAPSBridge();
  v27 = (char *)objc_allocWithZone(v26);
  v28 = &v27[OBJC_IVAR____TtC13appleaccountd17CloudKitAPSBridge_delegate];
  *((_QWORD *)v28 + 1) = 0;
  *(_QWORD *)(swift_unknownObjectWeakInit(v28, 0) + 8) = &off_10026F6C0;
  swift_unknownObjectWeakAssign();
  v33.receiver = v27;
  v33.super_class = v26;
  swift_retain(v25);
  v2[8] = objc_msgSendSuper2(&v33, "init");
  return v2;
}

uint64_t sub_1001261EC(void *a1, int a2)
{
  id v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  id v74;
  NSObject *v75;
  os_log_type_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  id v80;
  id v81;
  uint64_t v82;
  char *v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  id v97;
  NSObject **v98;
  uint64_t (*v99)(uint64_t);
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  id v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  id v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  id v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  id v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  id v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  id v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  id v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char v152;
  id v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  id v157;
  NSObject *v158;
  os_log_type_t v159;
  uint8_t *v160;
  uint64_t v161;
  id v162;
  id v163;
  uint64_t v164;
  unint64_t v165;
  unint64_t v166;
  uint64_t v167;
  char *v168;
  int v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  char *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  char *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  char *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  NSObject **v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  NSObject **v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  NSObject **v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  NSObject **v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  NSObject **v212;
  uint64_t v213;
  uint64_t v214;

  LODWORD(v2) = a2;
  v4 = type metadata accessor for IdentityServiceRecord(0);
  v171 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4, v5);
  v173 = (uint64_t)&v167 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v172 = v7;
  __chkstk_darwin(v6, v8);
  v174 = (char *)&v167 - v9;
  v10 = type metadata accessor for IdentityRecord(0);
  v175 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10, v11);
  v177 = (uint64_t)&v167 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v176 = v13;
  __chkstk_darwin(v12, v14);
  v178 = (char *)&v167 - v15;
  v16 = type metadata accessor for InheritanceHealthRecord(0);
  v179 = *(_QWORD *)(v16 - 8);
  v18 = __chkstk_darwin(v16, v17);
  v181 = (uint64_t)&v167 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v180 = v19;
  __chkstk_darwin(v18, v20);
  v182 = (char *)&v167 - v21;
  v22 = type metadata accessor for BenefactorInfoRecord(0);
  v183 = *(_QWORD *)(v22 - 8);
  v24 = __chkstk_darwin(v22, v23);
  v185 = (uint64_t)&v167 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v184 = v25;
  __chkstk_darwin(v24, v26);
  v186 = (char *)&v167 - v27;
  v28 = type metadata accessor for BeneficiaryManifestRecord(0);
  v187 = *(_QWORD *)(v28 - 8);
  v30 = __chkstk_darwin(v28, v29);
  v189 = (uint64_t)&v167 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v188 = v31;
  __chkstk_darwin(v30, v32);
  v34 = (char *)&v167 - v33;
  v35 = type metadata accessor for BeneficiaryInfoRecord(0);
  v190 = *(_QWORD *)(v35 - 8);
  v37 = __chkstk_darwin(v35, v36);
  v192 = (uint64_t)&v167 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v191 = v38;
  __chkstk_darwin(v37, v39);
  v193 = (NSObject **)((char *)&v167 - v40);
  v41 = type metadata accessor for InheritanceInvitationRecord(0);
  v194 = *(_QWORD *)(v41 - 8);
  v43 = __chkstk_darwin(v41, v42);
  v195 = v44;
  v196 = (uint64_t)&v167 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v43, v45);
  v197 = (NSObject **)((char *)&v167 - v46);
  v47 = type metadata accessor for CustodianHealthRecord(0);
  v198 = *(_QWORD *)(v47 - 8);
  v49 = __chkstk_darwin(v47, v48);
  v199 = v50;
  v200 = (uint64_t)&v167 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v49, v51);
  v201 = (NSObject **)((char *)&v167 - v52);
  v53 = type metadata accessor for CustodianRecoveryInfoRecord(0);
  v202 = *(_QWORD *)(v53 - 8);
  v55 = __chkstk_darwin(v53, v54);
  v203 = v56;
  v204 = (uint64_t)&v167 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v55, v57);
  v205 = (NSObject **)((char *)&v167 - v58);
  v59 = type metadata accessor for CustodianRecord(0);
  v206 = *(_QWORD *)(v59 - 8);
  v61 = __chkstk_darwin(v59, v60);
  v207 = v62;
  v208 = (uint64_t)&v167 - ((v62 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v61, v63);
  v65 = (char *)&v167 - v64;
  v66 = type metadata accessor for CustodianshipInfoRecord(0);
  v209 = *(_QWORD *)(v66 - 8);
  v68 = __chkstk_darwin(v66, v67);
  v210 = v69;
  v211 = (uint64_t)&v167 - ((v69 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v68, v70);
  v212 = (NSObject **)((char *)&v167 - v71);
  if (qword_10028ADB8 != -1)
    swift_once(&qword_10028ADB8, sub_100046CE4);
  v72 = type metadata accessor for Logger(0);
  v73 = sub_100005288(v72, (uint64_t)qword_1002A89A8);
  v74 = a1;
  v75 = Logger.logObject.getter(v74);
  v76 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v75, v76))
  {
    v77 = swift_slowAlloc(22, -1);
    v168 = v65;
    v78 = v77;
    v79 = swift_slowAlloc(64, -1);
    v214 = v79;
    *(_DWORD *)v78 = 136315394;
    v80 = objc_msgSend(v74, "recordID");
    v81 = objc_msgSend(v80, "recordName");
    v170 = v73;
    v169 = (int)v2;
    v2 = v81;

    v82 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
    v83 = v34;
    v85 = v84;

    v213 = sub_1001DEF4C(v82, v85, &v214);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v213, &v214);

    v86 = v85;
    v34 = v83;
    v87 = swift_bridgeObjectRelease(v86);
    *(_WORD *)(v78 + 12) = 2080;
    v88 = CKRecord.recordType.getter(v87);
    v90 = v89;
    v213 = sub_1001DEF4C(v88, v89, &v214);
    LOBYTE(v2) = v169;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v213, &v214);

    swift_bridgeObjectRelease(v90);
    _os_log_impl((void *)&_mh_execute_header, v75, v76, "Updating record %s of type %s", (uint8_t *)v78, 0x16u);
    swift_arrayDestroy(v79, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v79, -1, -1);
    v91 = v78;
    v65 = v168;
    swift_slowDealloc(v91, -1, -1);

  }
  else
  {

  }
  v94 = CKRecord.recordType.getter(v92);
  v95 = v93;
  if (v94 == 0xD000000000000017)
  {
    v96 = 0x8000000100209FC0;
    if (v93 == 0x8000000100209FC0)
      goto LABEL_10;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000017, 0x8000000100209FC0, v94, v93, 0) & 1) != 0)
  {
    v96 = v95;
LABEL_10:
    swift_bridgeObjectRelease(v96);
    v97 = v74;
    v98 = v212;
    sub_1000ECBBC(v97, v2 & 1, (uint64_t)v212);
    if (qword_10028AE58 != -1)
      swift_once(&qword_10028AE58, sub_1000C8A74);
    v99 = type metadata accessor for CustodianshipInfoRecord;
    v100 = v211;
    sub_100027FE8((uint64_t)v98, v211, type metadata accessor for CustodianshipInfoRecord);
    v101 = *(unsigned __int8 *)(v209 + 80);
    v102 = (v101 + 16) & ~v101;
    v103 = swift_allocObject(&unk_100268D38, v102 + v210, v101 | 7);
    sub_10003B730(v100, v103 + v102, type metadata accessor for CustodianshipInfoRecord);
    sub_10004E724((uint64_t)v98, 0, 2, (uint64_t)sub_10012B6B4, v103);
LABEL_13:
    swift_release(v103);
    v104 = (uint64_t)v98;
LABEL_14:
    sub_100028388(v104, v99);
    return 0;
  }
  if (v94 == 0x6169646F74737543 && v95 == 0xEF64726F6365526ELL)
  {
    v106 = 0xEF64726F6365526ELL;
LABEL_21:
    swift_bridgeObjectRelease(v106);
    sub_1000940B4(v74, v2 & 1, (uint64_t)v65);
    if (qword_10028AE58 != -1)
      swift_once(&qword_10028AE58, sub_1000C8A74);
    v99 = type metadata accessor for CustodianRecord;
    v107 = v208;
    sub_100027FE8((uint64_t)v65, v208, type metadata accessor for CustodianRecord);
    v108 = *(unsigned __int8 *)(v206 + 80);
    v109 = v65;
    v110 = (v108 + 16) & ~v108;
    v111 = swift_allocObject(&unk_100268D10, v110 + v207, v108 | 7);
    sub_10003B730(v107, v111 + v110, type metadata accessor for CustodianRecord);
    sub_10004E664((uint64_t)v109, 0, 2, (uint64_t)sub_10012B58C, v111);
LABEL_24:
    swift_release(v111);
    v104 = (uint64_t)v109;
    goto LABEL_14;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6169646F74737543, 0xEF64726F6365526ELL, v94, v95, 0) & 1) != 0)
  {
    v106 = v95;
    goto LABEL_21;
  }
  if (v94 == 0xD00000000000001BLL)
  {
    v112 = 0x800000010020A490;
    if (v95 == 0x800000010020A490)
    {
LABEL_29:
      swift_bridgeObjectRelease(v112);
      v113 = v74;
      v98 = v205;
      sub_1001F9C24(v113, v2 & 1, (uint64_t)v205);
      if (qword_10028AE58 != -1)
        swift_once(&qword_10028AE58, sub_1000C8A74);
      v99 = type metadata accessor for CustodianRecoveryInfoRecord;
      v114 = v204;
      sub_100027FE8((uint64_t)v98, v204, type metadata accessor for CustodianRecoveryInfoRecord);
      v115 = *(unsigned __int8 *)(v202 + 80);
      v116 = (v115 + 16) & ~v115;
      v103 = swift_allocObject(&unk_100268CE8, v116 + v203, v115 | 7);
      sub_10003B730(v114, v103 + v116, type metadata accessor for CustodianRecoveryInfoRecord);
      sub_10004E39C((uint64_t)v98, 0, 2, (uint64_t)sub_10012B3E0, v103);
      goto LABEL_13;
    }
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001BLL, 0x800000010020A490, v94, v95, 0) & 1) != 0)
  {
    v112 = v95;
    goto LABEL_29;
  }
  if (v94 == 0xD000000000000015)
  {
    v117 = 0x800000010020A450;
    if (v95 == 0x800000010020A450)
    {
LABEL_36:
      swift_bridgeObjectRelease(v117);
      v118 = v74;
      v98 = v201;
      sub_10016A448(v118, v2 & 1, v201);
      if (qword_10028AE58 != -1)
        swift_once(&qword_10028AE58, sub_1000C8A74);
      v99 = type metadata accessor for CustodianHealthRecord;
      v119 = v200;
      sub_100027FE8((uint64_t)v98, v200, type metadata accessor for CustodianHealthRecord);
      v120 = *(unsigned __int8 *)(v198 + 80);
      v121 = (v120 + 16) & ~v120;
      v103 = swift_allocObject(&unk_100268CC0, v121 + v199, v120 | 7);
      sub_10003B730(v119, v103 + v121, type metadata accessor for CustodianHealthRecord);
      sub_10004E35C((uint64_t)v98, 0, 2, (uint64_t)sub_10012B24C, v103);
      goto LABEL_13;
    }
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015, 0x800000010020A450, v94, v95, 0) & 1) != 0)
  {
    v117 = v95;
    goto LABEL_36;
  }
  if (v94 == 0xD00000000000001BLL)
  {
    v122 = 0x800000010020A4B0;
    if (v95 == 0x800000010020A4B0)
    {
LABEL_43:
      swift_bridgeObjectRelease(v122);
      v123 = v74;
      v98 = v197;
      sub_1001FEF48(v123, v2 & 1, (uint64_t)v197);
      if (qword_10028AE58 != -1)
        swift_once(&qword_10028AE58, sub_1000C8A74);
      v99 = type metadata accessor for InheritanceInvitationRecord;
      v124 = v196;
      sub_100027FE8((uint64_t)v98, v196, type metadata accessor for InheritanceInvitationRecord);
      v125 = *(unsigned __int8 *)(v194 + 80);
      v126 = (v125 + 16) & ~v125;
      v103 = swift_allocObject(&unk_100268C98, v126 + v195, v125 | 7);
      sub_10003B730(v124, v103 + v126, type metadata accessor for InheritanceInvitationRecord);
      sub_10004E6E4((uint64_t)v98, 0, 2, (uint64_t)sub_10012B100, v103);
      goto LABEL_13;
    }
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001BLL, 0x800000010020A4B0, v94, v95, 0) & 1) != 0)
  {
    v122 = v95;
    goto LABEL_43;
  }
  if (v94 == 0xD000000000000020 && v95 == 0x80000001002094E0)
  {
    v127 = 0x80000001002094E0;
LABEL_51:
    swift_bridgeObjectRelease(v127);
    v128 = v74;
    v98 = v193;
    sub_100011C84(v128, v2 & 1, (uint64_t)v193);
    if (qword_10028AE58 != -1)
      swift_once(&qword_10028AE58, sub_1000C8A74);
    v99 = type metadata accessor for BeneficiaryInfoRecord;
    v129 = v192;
    sub_100027FE8((uint64_t)v98, v192, type metadata accessor for BeneficiaryInfoRecord);
    v130 = *(unsigned __int8 *)(v190 + 80);
    v131 = (v130 + 16) & ~v130;
    v103 = swift_allocObject(&unk_100268C70, v131 + v191, v130 | 7);
    sub_10003B730(v129, v103 + v131, type metadata accessor for BeneficiaryInfoRecord);
    sub_10004E864((uint64_t)v98, 0, 2, (uint64_t)sub_10012B014, v103);
    goto LABEL_13;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000020, 0x80000001002094E0, v94, v95, 0) & 1) != 0)
  {
    v127 = v95;
    goto LABEL_51;
  }
  if (v94 == 0xD000000000000024 && v95 == 0x800000010020A4D0)
  {
    v132 = 0x800000010020A4D0;
LABEL_59:
    swift_bridgeObjectRelease(v132);
    sub_10006D554(v74, v2 & 1, (uint64_t)v34);
    if (qword_10028AE58 != -1)
      swift_once(&qword_10028AE58, sub_1000C8A74);
    v99 = type metadata accessor for BeneficiaryManifestRecord;
    v133 = v189;
    sub_100027FE8((uint64_t)v34, v189, type metadata accessor for BeneficiaryManifestRecord);
    v134 = *(unsigned __int8 *)(v187 + 80);
    v135 = (v134 + 16) & ~v134;
    v136 = swift_allocObject(&unk_100268C48, v135 + v188, v134 | 7);
    sub_10003B730(v133, v136 + v135, type metadata accessor for BeneficiaryManifestRecord);
    sub_10004E824((uint64_t)v34, 0, 2, (uint64_t)sub_10012AED4, v136);
    swift_release(v136);
    v104 = (uint64_t)v34;
    goto LABEL_14;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000024, 0x800000010020A4D0, v94, v95, 0) & 1) != 0)
  {
    v132 = v95;
    goto LABEL_59;
  }
  if (v94 == 0xD00000000000001FLL && v95 == 0x800000010020A500)
  {
    v137 = 0x800000010020A500;
LABEL_67:
    swift_bridgeObjectRelease(v137);
    v138 = v74;
    sub_10016E820(v138, v2 & 1, (uint64_t)v186);
    if (qword_10028AE58 != -1)
      swift_once(&qword_10028AE58, sub_1000C8A74);
    v99 = type metadata accessor for BenefactorInfoRecord;
    v109 = v186;
    v139 = v185;
    sub_100027FE8((uint64_t)v186, v185, type metadata accessor for BenefactorInfoRecord);
    v140 = *(unsigned __int8 *)(v183 + 80);
    v141 = (v140 + 16) & ~v140;
    v111 = swift_allocObject(&unk_100268C20, v141 + v184, v140 | 7);
    sub_10003B730(v139, v111 + v141, type metadata accessor for BenefactorInfoRecord);
    sub_10004E7E4((uint64_t)v109, 0, 2, (uint64_t)sub_10012ADB8, v111);
    goto LABEL_24;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001FLL, 0x800000010020A500, v94, v95, 0) & 1) != 0)
  {
    v137 = v95;
    goto LABEL_67;
  }
  if (v94 == 0xD000000000000017)
  {
    v142 = 0x800000010020A430;
    if (v95 == 0x800000010020A430)
    {
LABEL_74:
      swift_bridgeObjectRelease(v142);
      v143 = v74;
      sub_1000C426C(v143, v2 & 1, v182);
      if (qword_10028AE58 != -1)
        swift_once(&qword_10028AE58, sub_1000C8A74);
      v99 = type metadata accessor for InheritanceHealthRecord;
      v109 = v182;
      v144 = v181;
      sub_100027FE8((uint64_t)v182, v181, type metadata accessor for InheritanceHealthRecord);
      v145 = *(unsigned __int8 *)(v179 + 80);
      v146 = (v145 + 16) & ~v145;
      v111 = swift_allocObject(&unk_100268BF8, v146 + v180, v145 | 7);
      sub_10003B730(v144, v111 + v146, type metadata accessor for InheritanceHealthRecord);
      sub_10004E6A4((uint64_t)v109, 0, 2, (uint64_t)sub_10012AC98, v111);
      goto LABEL_24;
    }
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000017, 0x800000010020A430, v94, v95, 0) & 1) != 0)
  {
    v142 = v95;
    goto LABEL_74;
  }
  if (v94 == 0x797469746E656449 && v95 == 0xEE0064726F636552)
  {
    v147 = 0xEE0064726F636552;
LABEL_82:
    swift_bridgeObjectRelease(v147);
    v148 = v74;
    sub_10006ED5C(v148, v2 & 1, (uint64_t)v178);
    if (qword_10028AE58 != -1)
      swift_once(&qword_10028AE58, sub_1000C8A74);
    v99 = type metadata accessor for IdentityRecord;
    v109 = v178;
    v149 = v177;
    sub_100027FE8((uint64_t)v178, v177, type metadata accessor for IdentityRecord);
    v150 = *(unsigned __int8 *)(v175 + 80);
    v151 = (v150 + 16) & ~v150;
    v111 = swift_allocObject(&unk_100268BD0, v151 + v176, v150 | 7);
    sub_10003B730(v149, v111 + v151, type metadata accessor for IdentityRecord);
    sub_10004E7A4((uint64_t)v109, 0, 2, (uint64_t)sub_10012AB4C, v111);
    goto LABEL_24;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x797469746E656449, 0xEE0064726F636552, v94, v95, 0) & 1) != 0)
  {
    v147 = v95;
    goto LABEL_82;
  }
  if (v94 == 0xD000000000000015 && v95 == 0x800000010020A520)
  {
    swift_bridgeObjectRelease(0x800000010020A520);
LABEL_89:
    v153 = v74;
    sub_1000F401C(v153, v2 & 1, (uint64_t)v174);
    if (qword_10028AE58 != -1)
      swift_once(&qword_10028AE58, sub_1000C8A74);
    v99 = type metadata accessor for IdentityServiceRecord;
    v109 = v174;
    v154 = v173;
    sub_100027FE8((uint64_t)v174, v173, type metadata accessor for IdentityServiceRecord);
    v155 = *(unsigned __int8 *)(v171 + 80);
    v156 = (v155 + 16) & ~v155;
    v111 = swift_allocObject(&unk_100268BA8, v156 + v172, v155 | 7);
    sub_10003B730(v154, v111 + v156, type metadata accessor for IdentityServiceRecord);
    sub_10004E764((uint64_t)v109, 0, 2, (uint64_t)sub_10012A984, v111);
    goto LABEL_24;
  }
  v152 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015, 0x800000010020A520, v94, v95, 0);
  swift_bridgeObjectRelease(v95);
  if ((v152 & 1) != 0)
    goto LABEL_89;
  v157 = v74;
  v158 = Logger.logObject.getter(v157);
  v159 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v158, v159))
  {
    v160 = (uint8_t *)swift_slowAlloc(12, -1);
    v161 = swift_slowAlloc(32, -1);
    v214 = v161;
    *(_DWORD *)v160 = 136315138;
    v162 = v157;
    v163 = objc_msgSend(v162, "description");
    v164 = static String._unconditionallyBridgeFromObjectiveC(_:)(v163);
    v166 = v165;

    v213 = sub_1001DEF4C(v164, v166, &v214);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v213, &v214);

    swift_bridgeObjectRelease(v166);
    _os_log_impl((void *)&_mh_execute_header, v158, v159, "Unrecognized record type cannot be processed: %s", v160, 0xCu);
    swift_arrayDestroy(v161, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v161, -1, -1);
    swift_slowDealloc(v160, -1, -1);

  }
  else
  {

  }
  return 0;
}

void sub_1001278F0(void *a1, uint64_t a2)
{
  uint8_t *v2;
  id v5;
  void *v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  os_log_type_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  _QWORD *v24;
  id v25;
  uint64_t v26;
  NSObject *v27;
  uint8_t *v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;

  v5 = objc_msgSend(a1, "container");
  if (v5)
  {
    v6 = v5;
    v7 = objc_msgSend(v5, "containerID");

    v8 = objc_msgSend(v7, "containerIdentifier");
    v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
    v11 = v10;

    if (qword_10028AF58 != -1)
      swift_once(&qword_10028AF58, sub_1001FE1C4);
    v12 = sub_1001FD394(v9, v11, (_QWORD *)qword_1002A8CF0);
    swift_bridgeObjectRelease(v11);
    if (qword_10028ADC0 != -1)
      swift_once(&qword_10028ADC0, sub_100046D04);
    v13 = type metadata accessor for Logger(0);
    sub_100005288(v13, (uint64_t)qword_1002A89C0);
    v14 = swift_bridgeObjectRetain_n(a2, 2);
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.info.getter();
    v17 = (unint64_t)a2 >> 62;
    if (!os_log_type_enabled((os_log_t)v15, v16))
    {

      v19 = swift_bridgeObjectRelease_n(a2, 2);
      goto LABEL_15;
    }
    v2 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v2 = 134217984;
    if (v17)
      goto LABEL_37;
    v18 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
    while (1)
    {
      swift_bridgeObjectRelease(a2);
      v41 = v18;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42);
      swift_bridgeObjectRelease(a2);
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)v15, v16, "CloudKitSyncManager processing [%ld] changed", v2, 0xCu);
      swift_slowDealloc(v2, -1, -1);

LABEL_15:
      v27 = Logger.logObject.getter(v19);
      v16 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v27, v16))
      {
        v28 = (uint8_t *)swift_slowAlloc(12, -1);
        v2 = (uint8_t *)swift_slowAlloc(32, -1);
        v41 = (uint64_t)v2;
        *(_DWORD *)v28 = 136315138;
        v43 = (void *)sub_1001DEF4C(5457241, 0xE300000000000000, &v41);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, &v44);
        _os_log_impl((void *)&_mh_execute_header, v27, v16, "Records in manatee?: %s", v28, 0xCu);
        swift_arrayDestroy(v2, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v2, -1, -1);
        swift_slowDealloc(v28, -1, -1);
      }

      v43 = &_swiftEmptySetSingleton;
      if (v17)
      {
        if (a2 < 0)
          v38 = a2;
        else
          v38 = a2 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(a2);
        v15 = _CocoaArrayWrapper.endIndex.getter(v38);
        if (!v15)
        {
LABEL_34:
          swift_bridgeObjectRelease(a2);
          v37 = &_swiftEmptySetSingleton;
          goto LABEL_35;
        }
      }
      else
      {
        v15 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain(a2);
        if (!v15)
          goto LABEL_34;
      }
      if (v15 >= 1)
        break;
      __break(1u);
LABEL_37:
      if (a2 < 0)
        v39 = a2;
      else
        v39 = a2 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(a2);
      v18 = _CocoaArrayWrapper.endIndex.getter(v39);
      swift_bridgeObjectRelease(a2);
    }
    v29 = 0;
    v30 = v12 & 1;
    do
    {
      if ((a2 & 0xC000000000000001) != 0)
        v33 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v29, a2);
      else
        v33 = *(id *)(a2 + 8 * v29 + 32);
      v34 = v33;
      v35 = sub_1001261EC(v33, v30);
      v36 = swift_errorRelease(v35);
      if (v35)
      {

      }
      else
      {
        v31 = CKRecord.recordType.getter(v36);
        sub_1001F3A5C(&v41, v31, v32);

        swift_bridgeObjectRelease(v42);
      }
      ++v29;
    }
    while (v15 != v29);
    swift_bridgeObjectRelease(a2);
    v37 = v43;
LABEL_35:
    swift_bridgeObjectRelease(v37);
  }
  else
  {
    if (qword_10028ADB8 != -1)
      swift_once(&qword_10028ADB8, sub_100046CE4);
    v20 = type metadata accessor for Logger(0);
    sub_100005288(v20, (uint64_t)qword_1002A89A8);
    v40 = a1;
    v21 = Logger.logObject.getter(v40);
    v22 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v21, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc(12, -1);
      v24 = (_QWORD *)swift_slowAlloc(8, -1);
      *(_DWORD *)v23 = 138412290;
      v41 = (uint64_t)v40;
      v25 = v40;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42);
      *v24 = v40;

      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Failed to obtain containerID from database: %@", v23, 0xCu);
      v26 = sub_1000080B4((uint64_t *)&unk_10028BC20);
      swift_arrayDestroy(v24, 1, v26);
      swift_slowDealloc(v24, -1, -1);
      swift_slowDealloc(v23, -1, -1);

    }
    else
    {

    }
  }
}

uint64_t sub_100127E98(void *a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  void (*v18)(_BYTE *, uint64_t);
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _BYTE v30[12];
  int v31;
  uint64_t v32;
  uint64_t v33;

  v32 = a3;
  v33 = a4;
  v31 = a2;
  v5 = type metadata accessor for URL(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v9 = __chkstk_darwin(v5, v8);
  v11 = __chkstk_darwin(v9, v10);
  v13 = &v30[-v12];
  __chkstk_darwin(v11, v14);
  v16 = &v30[-v15];
  if (qword_10028AE58 != -1)
    swift_once(&qword_10028AE58, sub_1000C8A74);
  v17 = qword_1002A8B00;
  type metadata accessor for LocalCache();
  sub_10000840C();
  URL.appendingPathComponent(_:isDirectory:)(0xD000000000000017, 0x8000000100209FC0, 1);
  v18 = *(void (**)(_BYTE *, uint64_t))(v6 + 8);
  v18(&v30[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)], v5);
  v19 = objc_msgSend(a1, "recordName");
  v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
  v22 = v21;

  URL.appendingPathComponent(_:)(v20);
  swift_bridgeObjectRelease(v22);
  v18(v13, v5);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v6 + 16))(v13, v16, v5);
  v23 = *(unsigned __int8 *)(v6 + 80);
  v24 = (v23 + 32) & ~v23;
  v25 = (v7 + v24 + 7) & 0xFFFFFFFFFFFFFFF8;
  v26 = swift_allocObject(&unk_1002686F8, v25 + 16, v23 | 7);
  *(_BYTE *)(v26 + 16) = v31 & 1;
  *(_QWORD *)(v26 + 24) = v17;
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v6 + 32))(v26 + v24, v13, v5);
  v27 = (_QWORD *)(v26 + v25);
  v28 = v33;
  *v27 = v32;
  v27[1] = v28;
  swift_retain(v17);
  swift_retain(v28);
  sub_1001255E8((uint64_t)v16, (uint64_t)sub_10012A2D8, v26, (uint64_t)&unk_100268720, (uint64_t)sub_10012A300, (uint64_t)&unk_100268738);
  swift_release(v26);
  return ((uint64_t (*)(_BYTE *, uint64_t))v18)(v16, v5);
}

uint64_t sub_1001280EC(void *a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  void (*v18)(_BYTE *, uint64_t);
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _BYTE v30[12];
  int v31;
  uint64_t v32;
  uint64_t v33;

  v32 = a3;
  v33 = a4;
  v31 = a2;
  v5 = type metadata accessor for URL(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v9 = __chkstk_darwin(v5, v8);
  v11 = __chkstk_darwin(v9, v10);
  v13 = &v30[-v12];
  __chkstk_darwin(v11, v14);
  v16 = &v30[-v15];
  if (qword_10028AE58 != -1)
    swift_once(&qword_10028AE58, sub_1000C8A74);
  v17 = qword_1002A8B00;
  type metadata accessor for LocalCache();
  sub_10000840C();
  URL.appendingPathComponent(_:isDirectory:)(0x6169646F74737543, 0xEF64726F6365526ELL, 1);
  v18 = *(void (**)(_BYTE *, uint64_t))(v6 + 8);
  v18(&v30[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)], v5);
  v19 = objc_msgSend(a1, "recordName");
  v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
  v22 = v21;

  URL.appendingPathComponent(_:)(v20);
  swift_bridgeObjectRelease(v22);
  v18(v13, v5);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v6 + 16))(v13, v16, v5);
  v23 = *(unsigned __int8 *)(v6 + 80);
  v24 = (v23 + 32) & ~v23;
  v25 = (v7 + v24 + 7) & 0xFFFFFFFFFFFFFFF8;
  v26 = swift_allocObject(&unk_100268770, v25 + 16, v23 | 7);
  *(_BYTE *)(v26 + 16) = v31 & 1;
  *(_QWORD *)(v26 + 24) = v17;
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v6 + 32))(v26 + v24, v13, v5);
  v27 = (_QWORD *)(v26 + v25);
  v28 = v33;
  *v27 = v32;
  v27[1] = v28;
  swift_retain(v17);
  swift_retain(v28);
  sub_1001255E8((uint64_t)v16, (uint64_t)sub_10012A428, v26, (uint64_t)&unk_100268798, (uint64_t)sub_10012A438, (uint64_t)&unk_1002687B0);
  swift_release(v26);
  return ((uint64_t (*)(_BYTE *, uint64_t))v18)(v16, v5);
}

uint64_t sub_100128348(void *a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  void (*v18)(_BYTE *, uint64_t);
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _BYTE v30[12];
  int v31;
  uint64_t v32;
  uint64_t v33;

  v32 = a3;
  v33 = a4;
  v31 = a2;
  v5 = type metadata accessor for URL(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v9 = __chkstk_darwin(v5, v8);
  v11 = __chkstk_darwin(v9, v10);
  v13 = &v30[-v12];
  __chkstk_darwin(v11, v14);
  v16 = &v30[-v15];
  if (qword_10028AE58 != -1)
    swift_once(&qword_10028AE58, sub_1000C8A74);
  v17 = qword_1002A8B00;
  type metadata accessor for LocalCache();
  sub_10000840C();
  URL.appendingPathComponent(_:isDirectory:)(0xD00000000000001BLL, 0x800000010020A490, 1);
  v18 = *(void (**)(_BYTE *, uint64_t))(v6 + 8);
  v18(&v30[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)], v5);
  v19 = objc_msgSend(a1, "recordName");
  v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
  v22 = v21;

  URL.appendingPathComponent(_:)(v20);
  swift_bridgeObjectRelease(v22);
  v18(v13, v5);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v6 + 16))(v13, v16, v5);
  v23 = *(unsigned __int8 *)(v6 + 80);
  v24 = (v23 + 32) & ~v23;
  v25 = (v7 + v24 + 7) & 0xFFFFFFFFFFFFFFF8;
  v26 = swift_allocObject(&unk_1002687E8, v25 + 16, v23 | 7);
  *(_BYTE *)(v26 + 16) = v31 & 1;
  *(_QWORD *)(v26 + 24) = v17;
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v6 + 32))(v26 + v24, v13, v5);
  v27 = (_QWORD *)(v26 + v25);
  v28 = v33;
  *v27 = v32;
  v27[1] = v28;
  swift_retain(v17);
  swift_retain(v28);
  sub_1001255E8((uint64_t)v16, (uint64_t)sub_10012A460, v26, (uint64_t)&unk_100268810, (uint64_t)sub_10012A488, (uint64_t)&unk_100268828);
  swift_release(v26);
  return ((uint64_t (*)(_BYTE *, uint64_t))v18)(v16, v5);
}

uint64_t sub_10012859C(void *a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  void (*v18)(_BYTE *, uint64_t);
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _BYTE v30[12];
  int v31;
  uint64_t v32;
  uint64_t v33;

  v32 = a3;
  v33 = a4;
  v31 = a2;
  v5 = type metadata accessor for URL(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v9 = __chkstk_darwin(v5, v8);
  v11 = __chkstk_darwin(v9, v10);
  v13 = &v30[-v12];
  __chkstk_darwin(v11, v14);
  v16 = &v30[-v15];
  if (qword_10028AE58 != -1)
    swift_once(&qword_10028AE58, sub_1000C8A74);
  v17 = qword_1002A8B00;
  type metadata accessor for LocalCache();
  sub_10000840C();
  URL.appendingPathComponent(_:isDirectory:)(0xD000000000000015, 0x800000010020A450, 1);
  v18 = *(void (**)(_BYTE *, uint64_t))(v6 + 8);
  v18(&v30[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)], v5);
  v19 = objc_msgSend(a1, "recordName");
  v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
  v22 = v21;

  URL.appendingPathComponent(_:)(v20);
  swift_bridgeObjectRelease(v22);
  v18(v13, v5);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v6 + 16))(v13, v16, v5);
  v23 = *(unsigned __int8 *)(v6 + 80);
  v24 = (v23 + 32) & ~v23;
  v25 = (v7 + v24 + 7) & 0xFFFFFFFFFFFFFFF8;
  v26 = swift_allocObject(&unk_100268860, v25 + 16, v23 | 7);
  *(_BYTE *)(v26 + 16) = v31 & 1;
  *(_QWORD *)(v26 + 24) = v17;
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v6 + 32))(v26 + v24, v13, v5);
  v27 = (_QWORD *)(v26 + v25);
  v28 = v33;
  *v27 = v32;
  v27[1] = v28;
  swift_retain(v17);
  swift_retain(v28);
  sub_1001255E8((uint64_t)v16, (uint64_t)sub_10012A4B0, v26, (uint64_t)&unk_100268888, (uint64_t)sub_10012A4D8, (uint64_t)&unk_1002688A0);
  swift_release(v26);
  return ((uint64_t (*)(_BYTE *, uint64_t))v18)(v16, v5);
}

uint64_t sub_1001287F0(void *a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  void (*v18)(_BYTE *, uint64_t);
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _BYTE v30[12];
  int v31;
  uint64_t v32;
  uint64_t v33;

  v32 = a3;
  v33 = a4;
  v31 = a2;
  v5 = type metadata accessor for URL(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v9 = __chkstk_darwin(v5, v8);
  v11 = __chkstk_darwin(v9, v10);
  v13 = &v30[-v12];
  __chkstk_darwin(v11, v14);
  v16 = &v30[-v15];
  if (qword_10028AE58 != -1)
    swift_once(&qword_10028AE58, sub_1000C8A74);
  v17 = qword_1002A8B00;
  type metadata accessor for LocalCache();
  sub_10000840C();
  URL.appendingPathComponent(_:isDirectory:)(0xD00000000000001BLL, 0x800000010020A4B0, 1);
  v18 = *(void (**)(_BYTE *, uint64_t))(v6 + 8);
  v18(&v30[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)], v5);
  v19 = objc_msgSend(a1, "recordName");
  v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
  v22 = v21;

  URL.appendingPathComponent(_:)(v20);
  swift_bridgeObjectRelease(v22);
  v18(v13, v5);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v6 + 16))(v13, v16, v5);
  v23 = *(unsigned __int8 *)(v6 + 80);
  v24 = (v23 + 32) & ~v23;
  v25 = (v7 + v24 + 7) & 0xFFFFFFFFFFFFFFF8;
  v26 = swift_allocObject(&unk_1002688D8, v25 + 16, v23 | 7);
  *(_BYTE *)(v26 + 16) = v31 & 1;
  *(_QWORD *)(v26 + 24) = v17;
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v6 + 32))(v26 + v24, v13, v5);
  v27 = (_QWORD *)(v26 + v25);
  v28 = v33;
  *v27 = v32;
  v27[1] = v28;
  swift_retain(v17);
  swift_retain(v28);
  sub_1001255E8((uint64_t)v16, (uint64_t)sub_10012A500, v26, (uint64_t)&unk_100268900, (uint64_t)sub_10012A510, (uint64_t)&unk_100268918);
  swift_release(v26);
  return ((uint64_t (*)(_BYTE *, uint64_t))v18)(v16, v5);
}

uint64_t sub_100128A44(void *a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  void (*v18)(_BYTE *, uint64_t);
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _BYTE v30[12];
  int v31;
  uint64_t v32;
  uint64_t v33;

  v32 = a3;
  v33 = a4;
  v31 = a2;
  v5 = type metadata accessor for URL(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v9 = __chkstk_darwin(v5, v8);
  v11 = __chkstk_darwin(v9, v10);
  v13 = &v30[-v12];
  __chkstk_darwin(v11, v14);
  v16 = &v30[-v15];
  if (qword_10028AE58 != -1)
    swift_once(&qword_10028AE58, sub_1000C8A74);
  v17 = qword_1002A8B00;
  type metadata accessor for LocalCache();
  sub_10000840C();
  URL.appendingPathComponent(_:isDirectory:)(0xD000000000000020, 0x80000001002094E0, 1);
  v18 = *(void (**)(_BYTE *, uint64_t))(v6 + 8);
  v18(&v30[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)], v5);
  v19 = objc_msgSend(a1, "recordName");
  v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
  v22 = v21;

  URL.appendingPathComponent(_:)(v20);
  swift_bridgeObjectRelease(v22);
  v18(v13, v5);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v6 + 16))(v13, v16, v5);
  v23 = *(unsigned __int8 *)(v6 + 80);
  v24 = (v23 + 32) & ~v23;
  v25 = (v7 + v24 + 7) & 0xFFFFFFFFFFFFFFF8;
  v26 = swift_allocObject(&unk_100268950, v25 + 16, v23 | 7);
  *(_BYTE *)(v26 + 16) = v31 & 1;
  *(_QWORD *)(v26 + 24) = v17;
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v6 + 32))(v26 + v24, v13, v5);
  v27 = (_QWORD *)(v26 + v25);
  v28 = v33;
  *v27 = v32;
  v27[1] = v28;
  swift_retain(v17);
  swift_retain(v28);
  sub_1001255E8((uint64_t)v16, (uint64_t)sub_10012A538, v26, (uint64_t)&unk_100268978, (uint64_t)sub_10012A560, (uint64_t)&unk_100268990);
  swift_release(v26);
  return ((uint64_t (*)(_BYTE *, uint64_t))v18)(v16, v5);
}

uint64_t sub_100128C98(void *a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  void (*v18)(_BYTE *, uint64_t);
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _BYTE v30[12];
  int v31;
  uint64_t v32;
  uint64_t v33;

  v32 = a3;
  v33 = a4;
  v31 = a2;
  v5 = type metadata accessor for URL(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v9 = __chkstk_darwin(v5, v8);
  v11 = __chkstk_darwin(v9, v10);
  v13 = &v30[-v12];
  __chkstk_darwin(v11, v14);
  v16 = &v30[-v15];
  if (qword_10028AE58 != -1)
    swift_once(&qword_10028AE58, sub_1000C8A74);
  v17 = qword_1002A8B00;
  type metadata accessor for LocalCache();
  sub_10000840C();
  URL.appendingPathComponent(_:isDirectory:)(0xD000000000000024, 0x800000010020A4D0, 1);
  v18 = *(void (**)(_BYTE *, uint64_t))(v6 + 8);
  v18(&v30[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)], v5);
  v19 = objc_msgSend(a1, "recordName");
  v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
  v22 = v21;

  URL.appendingPathComponent(_:)(v20);
  swift_bridgeObjectRelease(v22);
  v18(v13, v5);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v6 + 16))(v13, v16, v5);
  v23 = *(unsigned __int8 *)(v6 + 80);
  v24 = (v23 + 32) & ~v23;
  v25 = (v7 + v24 + 7) & 0xFFFFFFFFFFFFFFF8;
  v26 = swift_allocObject(&unk_1002689C8, v25 + 16, v23 | 7);
  *(_BYTE *)(v26 + 16) = v31 & 1;
  *(_QWORD *)(v26 + 24) = v17;
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v6 + 32))(v26 + v24, v13, v5);
  v27 = (_QWORD *)(v26 + v25);
  v28 = v33;
  *v27 = v32;
  v27[1] = v28;
  swift_retain(v17);
  swift_retain(v28);
  sub_1001255E8((uint64_t)v16, (uint64_t)sub_10012A588, v26, (uint64_t)&unk_1002689F0, (uint64_t)sub_10012A5B0, (uint64_t)&unk_100268A08);
  swift_release(v26);
  return ((uint64_t (*)(_BYTE *, uint64_t))v18)(v16, v5);
}

uint64_t sub_100128EEC(void *a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  void (*v18)(_BYTE *, uint64_t);
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _BYTE v30[12];
  int v31;
  uint64_t v32;
  uint64_t v33;

  v32 = a3;
  v33 = a4;
  v31 = a2;
  v5 = type metadata accessor for URL(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v9 = __chkstk_darwin(v5, v8);
  v11 = __chkstk_darwin(v9, v10);
  v13 = &v30[-v12];
  __chkstk_darwin(v11, v14);
  v16 = &v30[-v15];
  if (qword_10028AE58 != -1)
    swift_once(&qword_10028AE58, sub_1000C8A74);
  v17 = qword_1002A8B00;
  type metadata accessor for LocalCache();
  sub_10000840C();
  URL.appendingPathComponent(_:isDirectory:)(0xD00000000000001FLL, 0x800000010020A500, 1);
  v18 = *(void (**)(_BYTE *, uint64_t))(v6 + 8);
  v18(&v30[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)], v5);
  v19 = objc_msgSend(a1, "recordName");
  v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
  v22 = v21;

  URL.appendingPathComponent(_:)(v20);
  swift_bridgeObjectRelease(v22);
  v18(v13, v5);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v6 + 16))(v13, v16, v5);
  v23 = *(unsigned __int8 *)(v6 + 80);
  v24 = (v23 + 32) & ~v23;
  v25 = (v7 + v24 + 7) & 0xFFFFFFFFFFFFFFF8;
  v26 = swift_allocObject(&unk_100268A40, v25 + 16, v23 | 7);
  *(_BYTE *)(v26 + 16) = v31 & 1;
  *(_QWORD *)(v26 + 24) = v17;
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v6 + 32))(v26 + v24, v13, v5);
  v27 = (_QWORD *)(v26 + v25);
  v28 = v33;
  *v27 = v32;
  v27[1] = v28;
  swift_retain(v17);
  swift_retain(v28);
  sub_1001255E8((uint64_t)v16, (uint64_t)sub_10012A5D8, v26, (uint64_t)&unk_100268A68, (uint64_t)sub_10012A600, (uint64_t)&unk_100268A80);
  swift_release(v26);
  return ((uint64_t (*)(_BYTE *, uint64_t))v18)(v16, v5);
}

uint64_t sub_100129140(void *a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  void (*v18)(_BYTE *, uint64_t);
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _BYTE v30[12];
  int v31;
  uint64_t v32;
  uint64_t v33;

  v32 = a3;
  v33 = a4;
  v31 = a2;
  v5 = type metadata accessor for URL(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v9 = __chkstk_darwin(v5, v8);
  v11 = __chkstk_darwin(v9, v10);
  v13 = &v30[-v12];
  __chkstk_darwin(v11, v14);
  v16 = &v30[-v15];
  if (qword_10028AE58 != -1)
    swift_once(&qword_10028AE58, sub_1000C8A74);
  v17 = qword_1002A8B00;
  type metadata accessor for LocalCache();
  sub_10000840C();
  URL.appendingPathComponent(_:isDirectory:)(0x797469746E656449, 0xEE0064726F636552, 1);
  v18 = *(void (**)(_BYTE *, uint64_t))(v6 + 8);
  v18(&v30[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)], v5);
  v19 = objc_msgSend(a1, "recordName");
  v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
  v22 = v21;

  URL.appendingPathComponent(_:)(v20);
  swift_bridgeObjectRelease(v22);
  v18(v13, v5);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v6 + 16))(v13, v16, v5);
  v23 = *(unsigned __int8 *)(v6 + 80);
  v24 = (v23 + 32) & ~v23;
  v25 = (v7 + v24 + 7) & 0xFFFFFFFFFFFFFFF8;
  v26 = swift_allocObject(&unk_100268AB8, v25 + 16, v23 | 7);
  *(_BYTE *)(v26 + 16) = v31 & 1;
  *(_QWORD *)(v26 + 24) = v17;
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v6 + 32))(v26 + v24, v13, v5);
  v27 = (_QWORD *)(v26 + v25);
  v28 = v33;
  *v27 = v32;
  v27[1] = v28;
  swift_retain(v17);
  swift_retain(v28);
  sub_1001255E8((uint64_t)v16, (uint64_t)sub_10012A628, v26, (uint64_t)&unk_100268AE0, (uint64_t)sub_10012A6A4, (uint64_t)&unk_100268AF8);
  swift_release(v26);
  return ((uint64_t (*)(_BYTE *, uint64_t))v18)(v16, v5);
}

